record_number,buggy_code,fixed_code,code_similarity
195001,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  if (hasFixedHeight) {
    ownMaxHeight=Math.min(MeasureSpec.getSize(heightMeasureSpec),ownMaxHeight);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=hasFixedHeight ? ownMaxHeight : Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}",0.924255820807545
195002,"private void updateActiveGroup(int userId){
  File path=Environment.getUserSystemDirectory(userId);
  nativeSetActiveGroup(userId,path.getAbsolutePath().getBytes());
}","private void updateActiveGroup(int userId){
  if (mHalDeviceId != 0) {
    File path=Environment.getUserSystemDirectory(userId);
    nativeSetActiveGroup(userId,path.getAbsolutePath().getBytes());
  }
}",0.9051490514905148
195003,"@Override public void onStart(){
  publishBinderService(Context.FINGERPRINT_SERVICE,new FingerprintServiceWrapper());
  mHalDeviceId=nativeOpenHal();
  if (mHalDeviceId != 0) {
    updateActiveGroup(ActivityManager.getCurrentUser());
  }
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + mHalDeviceId);
  listenForUserSwitches();
}","@Override public void onStart(){
  publishBinderService(Context.FINGERPRINT_SERVICE,new FingerprintServiceWrapper());
  mHalDeviceId=nativeOpenHal();
  updateActiveGroup(ActivityManager.getCurrentUser());
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + mHalDeviceId);
  listenForUserSwitches();
}",0.5571658615136876
195004,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  if (hasFixedHeight) {
    ownMaxHeight=Math.min(MeasureSpec.getSize(heightMeasureSpec),ownMaxHeight);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=hasFixedHeight ? ownMaxHeight : Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}",0.924255820807545
195005,"private void updateActiveGroup(int userId){
  File path=Environment.getUserSystemDirectory(userId);
  nativeSetActiveGroup(userId,path.getAbsolutePath().getBytes());
}","private void updateActiveGroup(int userId){
  if (mHalDeviceId != 0) {
    File path=Environment.getUserSystemDirectory(userId);
    nativeSetActiveGroup(userId,path.getAbsolutePath().getBytes());
  }
}",0.9051490514905148
195006,"@Override public void onStart(){
  publishBinderService(Context.FINGERPRINT_SERVICE,new FingerprintServiceWrapper());
  mHalDeviceId=nativeOpenHal();
  if (mHalDeviceId != 0) {
    updateActiveGroup(ActivityManager.getCurrentUser());
  }
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + mHalDeviceId);
  listenForUserSwitches();
}","@Override public void onStart(){
  publishBinderService(Context.FINGERPRINT_SERVICE,new FingerprintServiceWrapper());
  mHalDeviceId=nativeOpenHal();
  updateActiveGroup(ActivityManager.getCurrentUser());
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + mHalDeviceId);
  listenForUserSwitches();
}",0.5571658615136876
195007,"private void updateActiveGroup(int userId){
  File path=Environment.getUserSystemDirectory(userId);
  nativeSetActiveGroup(userId,path.getAbsolutePath().getBytes());
}","private void updateActiveGroup(int userId){
  if (mHalDeviceId != 0) {
    File path=Environment.getUserSystemDirectory(userId);
    nativeSetActiveGroup(userId,path.getAbsolutePath().getBytes());
  }
}",0.9051490514905148
195008,"@Override public void onStart(){
  publishBinderService(Context.FINGERPRINT_SERVICE,new FingerprintServiceWrapper());
  mHalDeviceId=nativeOpenHal();
  if (mHalDeviceId != 0) {
    updateActiveGroup(ActivityManager.getCurrentUser());
  }
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + mHalDeviceId);
  listenForUserSwitches();
}","@Override public void onStart(){
  publishBinderService(Context.FINGERPRINT_SERVICE,new FingerprintServiceWrapper());
  mHalDeviceId=nativeOpenHal();
  updateActiveGroup(ActivityManager.getCurrentUser());
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + mHalDeviceId);
  listenForUserSwitches();
}",0.5571658615136876
195009,"private void updateActiveGroup(int userId){
  File path=Environment.getUserSystemDirectory(userId);
  nativeSetActiveGroup(userId,path.getAbsolutePath().getBytes());
}","private void updateActiveGroup(int userId){
  if (mHalDeviceId != 0) {
    File path=Environment.getUserSystemDirectory(userId);
    nativeSetActiveGroup(userId,path.getAbsolutePath().getBytes());
  }
}",0.9051490514905148
195010,"@Override public void onStart(){
  publishBinderService(Context.FINGERPRINT_SERVICE,new FingerprintServiceWrapper());
  mHalDeviceId=nativeOpenHal();
  if (mHalDeviceId != 0) {
    updateActiveGroup(ActivityManager.getCurrentUser());
  }
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + mHalDeviceId);
  listenForUserSwitches();
}","@Override public void onStart(){
  publishBinderService(Context.FINGERPRINT_SERVICE,new FingerprintServiceWrapper());
  mHalDeviceId=nativeOpenHal();
  updateActiveGroup(ActivityManager.getCurrentUser());
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + mHalDeviceId);
  listenForUserSwitches();
}",0.5571658615136876
195011,"private void updateActiveGroup(int userId){
  File path=Environment.getUserSystemDirectory(userId);
  nativeSetActiveGroup(userId,path.getAbsolutePath().getBytes());
}","private void updateActiveGroup(int userId){
  if (mHalDeviceId != 0) {
    File path=Environment.getUserSystemDirectory(userId);
    nativeSetActiveGroup(userId,path.getAbsolutePath().getBytes());
  }
}",0.9051490514905148
195012,"@Override public void onStart(){
  publishBinderService(Context.FINGERPRINT_SERVICE,new FingerprintServiceWrapper());
  mHalDeviceId=nativeOpenHal();
  if (mHalDeviceId != 0) {
    updateActiveGroup(ActivityManager.getCurrentUser());
  }
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + mHalDeviceId);
  listenForUserSwitches();
}","@Override public void onStart(){
  publishBinderService(Context.FINGERPRINT_SERVICE,new FingerprintServiceWrapper());
  mHalDeviceId=nativeOpenHal();
  updateActiveGroup(ActivityManager.getCurrentUser());
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + mHalDeviceId);
  listenForUserSwitches();
}",0.5571658615136876
195013,"private void updateActiveGroup(int userId){
  File path=Environment.getUserSystemDirectory(userId);
  nativeSetActiveGroup(userId,path.getAbsolutePath().getBytes());
}","private void updateActiveGroup(int userId){
  if (mHalDeviceId != 0) {
    File path=Environment.getUserSystemDirectory(userId);
    nativeSetActiveGroup(userId,path.getAbsolutePath().getBytes());
  }
}",0.9051490514905148
195014,"@Override public void onStart(){
  publishBinderService(Context.FINGERPRINT_SERVICE,new FingerprintServiceWrapper());
  mHalDeviceId=nativeOpenHal();
  if (mHalDeviceId != 0) {
    updateActiveGroup(ActivityManager.getCurrentUser());
  }
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + mHalDeviceId);
  listenForUserSwitches();
}","@Override public void onStart(){
  publishBinderService(Context.FINGERPRINT_SERVICE,new FingerprintServiceWrapper());
  mHalDeviceId=nativeOpenHal();
  updateActiveGroup(ActivityManager.getCurrentUser());
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + mHalDeviceId);
  listenForUserSwitches();
}",0.5571658615136876
195015,"/** 
 * Give a job to this context for execution. Callers must first check   {@link #isAvailable()}to make sure this is a valid context.
 * @param job The status of the job that we are going to run.
 * @return True if the job is valid and is running. False if the job cannot be executed.
 */
boolean executeRunnableJob(JobStatus job){
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,""String_Node_Str"");
      return false;
    }
    mRunningJob=job;
    final boolean isDeadlineExpired=job.getLatestRunTimeElapsed() >= SystemClock.elapsedRealtime();
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + ""String_Node_Str"");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}","/** 
 * Give a job to this context for execution. Callers must first check   {@link #isAvailable()}to make sure this is a valid context.
 * @param job The status of the job that we are going to run.
 * @return True if the job is valid and is running. False if the job cannot be executed.
 */
boolean executeRunnableJob(JobStatus job){
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,""String_Node_Str"");
      return false;
    }
    mRunningJob=job;
    final boolean isDeadlineExpired=job.hasDeadlineConstraint() && (job.getLatestRunTimeElapsed() < SystemClock.elapsedRealtime());
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + ""String_Node_Str"");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}",0.9874213836477987
195016,"private GeofenceHardwareImpl getGeofenceHardwareSink(){
  if (mGeofenceHardwareSink == null) {
    mGeofenceHardwareSink=GeofenceHardwareImpl.getInstance(mContext);
  }
  return mGeofenceHardwareSink;
}","private GeofenceHardwareImpl getGeofenceHardwareSink(){
  if (mGeofenceHardwareSink == null) {
    mGeofenceHardwareSink=GeofenceHardwareImpl.getInstance(mContext);
    mGeofenceHardwareSink.setVersion(mVersion);
  }
  return mGeofenceHardwareSink;
}",0.8938053097345132
195017,"private void setVersion(int version){
  mVersion=version;
  getGeofenceHardwareSink().setVersion(version);
}","private void setVersion(int version){
  mVersion=version;
  if (mGeofenceHardwareSink != null) {
    mGeofenceHardwareSink.setVersion(version);
  }
}",0.8093385214007782
195018,"private GeofenceHardwareImpl getGeofenceHardwareSink(){
  if (mGeofenceHardwareSink == null) {
    mGeofenceHardwareSink=GeofenceHardwareImpl.getInstance(mContext);
  }
  return mGeofenceHardwareSink;
}","private GeofenceHardwareImpl getGeofenceHardwareSink(){
  if (mGeofenceHardwareSink == null) {
    mGeofenceHardwareSink=GeofenceHardwareImpl.getInstance(mContext);
    mGeofenceHardwareSink.setVersion(mVersion);
  }
  return mGeofenceHardwareSink;
}",0.8938053097345132
195019,"private void setVersion(int version){
  mVersion=version;
  getGeofenceHardwareSink().setVersion(version);
}","private void setVersion(int version){
  mVersion=version;
  if (mGeofenceHardwareSink != null) {
    mGeofenceHardwareSink.setVersion(version);
  }
}",0.8093385214007782
195020,"private GeofenceHardwareImpl getGeofenceHardwareSink(){
  if (mGeofenceHardwareSink == null) {
    mGeofenceHardwareSink=GeofenceHardwareImpl.getInstance(mContext);
  }
  return mGeofenceHardwareSink;
}","private GeofenceHardwareImpl getGeofenceHardwareSink(){
  if (mGeofenceHardwareSink == null) {
    mGeofenceHardwareSink=GeofenceHardwareImpl.getInstance(mContext);
    mGeofenceHardwareSink.setVersion(mVersion);
  }
  return mGeofenceHardwareSink;
}",0.8938053097345132
195021,"private void setVersion(int version){
  mVersion=version;
  getGeofenceHardwareSink().setVersion(version);
}","private void setVersion(int version){
  mVersion=version;
  if (mGeofenceHardwareSink != null) {
    mGeofenceHardwareSink.setVersion(version);
  }
}",0.8093385214007782
195022,"private GeofenceHardwareImpl getGeofenceHardwareSink(){
  if (mGeofenceHardwareSink == null) {
    mGeofenceHardwareSink=GeofenceHardwareImpl.getInstance(mContext);
  }
  return mGeofenceHardwareSink;
}","private GeofenceHardwareImpl getGeofenceHardwareSink(){
  if (mGeofenceHardwareSink == null) {
    mGeofenceHardwareSink=GeofenceHardwareImpl.getInstance(mContext);
    mGeofenceHardwareSink.setVersion(mVersion);
  }
  return mGeofenceHardwareSink;
}",0.8938053097345132
195023,"private void setVersion(int version){
  mVersion=version;
  getGeofenceHardwareSink().setVersion(version);
}","private void setVersion(int version){
  mVersion=version;
  if (mGeofenceHardwareSink != null) {
    mGeofenceHardwareSink.setVersion(version);
  }
}",0.8093385214007782
195024,"private GeofenceHardwareImpl getGeofenceHardwareSink(){
  if (mGeofenceHardwareSink == null) {
    mGeofenceHardwareSink=GeofenceHardwareImpl.getInstance(mContext);
  }
  return mGeofenceHardwareSink;
}","private GeofenceHardwareImpl getGeofenceHardwareSink(){
  if (mGeofenceHardwareSink == null) {
    mGeofenceHardwareSink=GeofenceHardwareImpl.getInstance(mContext);
    mGeofenceHardwareSink.setVersion(mVersion);
  }
  return mGeofenceHardwareSink;
}",0.8938053097345132
195025,"private void setVersion(int version){
  mVersion=version;
  getGeofenceHardwareSink().setVersion(version);
}","private void setVersion(int version){
  mVersion=version;
  if (mGeofenceHardwareSink != null) {
    mGeofenceHardwareSink.setVersion(version);
  }
}",0.8093385214007782
195026,"private GeofenceHardwareImpl getGeofenceHardwareSink(){
  if (mGeofenceHardwareSink == null) {
    mGeofenceHardwareSink=GeofenceHardwareImpl.getInstance(mContext);
  }
  return mGeofenceHardwareSink;
}","private GeofenceHardwareImpl getGeofenceHardwareSink(){
  if (mGeofenceHardwareSink == null) {
    mGeofenceHardwareSink=GeofenceHardwareImpl.getInstance(mContext);
    mGeofenceHardwareSink.setVersion(mVersion);
  }
  return mGeofenceHardwareSink;
}",0.8938053097345132
195027,"private void setVersion(int version){
  mVersion=version;
  getGeofenceHardwareSink().setVersion(version);
}","private void setVersion(int version){
  mVersion=version;
  if (mGeofenceHardwareSink != null) {
    mGeofenceHardwareSink.setVersion(version);
  }
}",0.8093385214007782
195028,"/** 
 * Give a job to this context for execution. Callers must first check   {@link #isAvailable()}to make sure this is a valid context.
 * @param job The status of the job that we are going to run.
 * @return True if the job is valid and is running. False if the job cannot be executed.
 */
boolean executeRunnableJob(JobStatus job){
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,""String_Node_Str"");
      return false;
    }
    mRunningJob=job;
    final boolean isDeadlineExpired=job.getLatestRunTimeElapsed() >= SystemClock.elapsedRealtime();
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + ""String_Node_Str"");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}","/** 
 * Give a job to this context for execution. Callers must first check   {@link #isAvailable()}to make sure this is a valid context.
 * @param job The status of the job that we are going to run.
 * @return True if the job is valid and is running. False if the job cannot be executed.
 */
boolean executeRunnableJob(JobStatus job){
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,""String_Node_Str"");
      return false;
    }
    mRunningJob=job;
    final boolean isDeadlineExpired=job.hasDeadlineConstraint() && (job.getLatestRunTimeElapsed() < SystemClock.elapsedRealtime());
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + ""String_Node_Str"");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}",0.9874213836477987
195029,"/** 
 * Give a job to this context for execution. Callers must first check   {@link #isAvailable()}to make sure this is a valid context.
 * @param job The status of the job that we are going to run.
 * @return True if the job is valid and is running. False if the job cannot be executed.
 */
boolean executeRunnableJob(JobStatus job){
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,""String_Node_Str"");
      return false;
    }
    mRunningJob=job;
    final boolean isDeadlineExpired=job.getLatestRunTimeElapsed() >= SystemClock.elapsedRealtime();
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + ""String_Node_Str"");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      mVerb=VERB_FINISHED;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}","/** 
 * Give a job to this context for execution. Callers must first check   {@link #isAvailable()}to make sure this is a valid context.
 * @param job The status of the job that we are going to run.
 * @return True if the job is valid and is running. False if the job cannot be executed.
 */
boolean executeRunnableJob(JobStatus job){
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,""String_Node_Str"");
      return false;
    }
    mRunningJob=job;
    final boolean isDeadlineExpired=job.hasDeadlineConstraint() && (job.getLatestRunTimeElapsed() < SystemClock.elapsedRealtime());
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + ""String_Node_Str"");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      mVerb=VERB_FINISHED;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}",0.9876543209876544
195030,"/** 
 * Give a job to this context for execution. Callers must first check   {@link #isAvailable()}to make sure this is a valid context.
 * @param job The status of the job that we are going to run.
 * @return True if the job is valid and is running. False if the job cannot be executed.
 */
boolean executeRunnableJob(JobStatus job){
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,""String_Node_Str"");
      return false;
    }
    mRunningJob=job;
    final boolean isDeadlineExpired=job.getLatestRunTimeElapsed() >= SystemClock.elapsedRealtime();
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + ""String_Node_Str"");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      mVerb=VERB_FINISHED;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}","/** 
 * Give a job to this context for execution. Callers must first check   {@link #isAvailable()}to make sure this is a valid context.
 * @param job The status of the job that we are going to run.
 * @return True if the job is valid and is running. False if the job cannot be executed.
 */
boolean executeRunnableJob(JobStatus job){
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,""String_Node_Str"");
      return false;
    }
    mRunningJob=job;
    final boolean isDeadlineExpired=job.hasDeadlineConstraint() && (job.getLatestRunTimeElapsed() < SystemClock.elapsedRealtime());
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + ""String_Node_Str"");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      mVerb=VERB_FINISHED;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}",0.9876543209876544
195031,"/** 
 * Give a job to this context for execution. Callers must first check   {@link #isAvailable()}to make sure this is a valid context.
 * @param job The status of the job that we are going to run.
 * @return True if the job is valid and is running. False if the job cannot be executed.
 */
boolean executeRunnableJob(JobStatus job){
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,""String_Node_Str"");
      return false;
    }
    mRunningJob=job;
    final boolean isDeadlineExpired=job.getLatestRunTimeElapsed() >= SystemClock.elapsedRealtime();
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + ""String_Node_Str"");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}","/** 
 * Give a job to this context for execution. Callers must first check   {@link #isAvailable()}to make sure this is a valid context.
 * @param job The status of the job that we are going to run.
 * @return True if the job is valid and is running. False if the job cannot be executed.
 */
boolean executeRunnableJob(JobStatus job){
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,""String_Node_Str"");
      return false;
    }
    mRunningJob=job;
    final boolean isDeadlineExpired=job.hasDeadlineConstraint() && (job.getLatestRunTimeElapsed() < SystemClock.elapsedRealtime());
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + ""String_Node_Str"");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}",0.9874213836477987
195032,"/** 
 * Give a job to this context for execution. Callers must first check   {@link #isAvailable()}to make sure this is a valid context.
 * @param job The status of the job that we are going to run.
 * @return True if the job is valid and is running. False if the job cannot be executed.
 */
boolean executeRunnableJob(JobStatus job){
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,""String_Node_Str"");
      return false;
    }
    mRunningJob=job;
    final boolean isDeadlineExpired=job.getLatestRunTimeElapsed() >= SystemClock.elapsedRealtime();
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + ""String_Node_Str"");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}","/** 
 * Give a job to this context for execution. Callers must first check   {@link #isAvailable()}to make sure this is a valid context.
 * @param job The status of the job that we are going to run.
 * @return True if the job is valid and is running. False if the job cannot be executed.
 */
boolean executeRunnableJob(JobStatus job){
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,""String_Node_Str"");
      return false;
    }
    mRunningJob=job;
    final boolean isDeadlineExpired=job.hasDeadlineConstraint() && (job.getLatestRunTimeElapsed() < SystemClock.elapsedRealtime());
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + ""String_Node_Str"");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}",0.9874213836477987
195033,"/** 
 * Give a job to this context for execution. Callers must first check   {@link #isAvailable()}to make sure this is a valid context.
 * @param job The status of the job that we are going to run.
 * @return True if the job is valid and is running. False if the job cannot be executed.
 */
boolean executeRunnableJob(JobStatus job){
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,""String_Node_Str"");
      return false;
    }
    mRunningJob=job;
    final boolean isDeadlineExpired=job.getLatestRunTimeElapsed() >= SystemClock.elapsedRealtime();
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + ""String_Node_Str"");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}","/** 
 * Give a job to this context for execution. Callers must first check   {@link #isAvailable()}to make sure this is a valid context.
 * @param job The status of the job that we are going to run.
 * @return True if the job is valid and is running. False if the job cannot be executed.
 */
boolean executeRunnableJob(JobStatus job){
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,""String_Node_Str"");
      return false;
    }
    mRunningJob=job;
    final boolean isDeadlineExpired=job.hasDeadlineConstraint() && (job.getLatestRunTimeElapsed() < SystemClock.elapsedRealtime());
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + ""String_Node_Str"");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}",0.9874213836477987
195034,"/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}","/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_16:
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}",0.9915292019616584
195035,"public static Element F16_3(RenderScript rs){
  if (rs.mElement_FLOAT_3 == null) {
    rs.mElement_FLOAT_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}","public static Element F16_3(RenderScript rs){
  if (rs.mElement_HALF_3 == null) {
    rs.mElement_HALF_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}",0.9606741573033708
195036,"/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}","/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_16:
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}",0.9915292019616584
195037,"public static Element F16_3(RenderScript rs){
  if (rs.mElement_FLOAT_3 == null) {
    rs.mElement_FLOAT_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}","public static Element F16_3(RenderScript rs){
  if (rs.mElement_HALF_3 == null) {
    rs.mElement_HALF_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}",0.9606741573033708
195038,"/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}","/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_16:
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}",0.9915292019616584
195039,"public static Element F16_3(RenderScript rs){
  if (rs.mElement_FLOAT_3 == null) {
    rs.mElement_FLOAT_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}","public static Element F16_3(RenderScript rs){
  if (rs.mElement_HALF_3 == null) {
    rs.mElement_HALF_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}",0.9606741573033708
195040,"private int getWordStart(int offset){
  int retOffset=getWordIteratorWithText().prevBoundary(offset);
  if (isPunctBoundaryBehind(retOffset,true)) {
    retOffset=getWordIteratorWithText().prevBoundary(retOffset);
    while (!isPunctBoundaryBehind(retOffset,false) && retOffset != BreakIterator.DONE) {
      retOffset=getWordIteratorWithText().prevBoundary(retOffset);
    }
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}","private int getWordStart(int offset){
  int retOffset=getWordIteratorWithText().prevBoundary(offset);
  if (getWordIteratorWithText().isOnPunctuation(retOffset)) {
    retOffset=getWordIteratorWithText().getPunctuationBeginning(offset);
  }
 else {
    retOffset=getWordIteratorWithText().getBeginning(offset);
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}",0.4277456647398844
195041,"private int getWordEnd(int offset){
  int retOffset=getWordIteratorWithText().nextBoundary(offset);
  if (isPunctBoundaryForward(retOffset,true)) {
    retOffset=getWordIteratorWithText().nextBoundary(retOffset);
    while (!isPunctBoundaryForward(retOffset,false) && retOffset != BreakIterator.DONE) {
      retOffset=getWordIteratorWithText().nextBoundary(retOffset);
    }
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}","private int getWordEnd(int offset){
  int retOffset=getWordIteratorWithText().nextBoundary(offset);
  if (getWordIteratorWithText().isAfterPunctuation(retOffset)) {
    retOffset=getWordIteratorWithText().getPunctuationEnd(offset);
  }
 else {
    retOffset=getWordIteratorWithText().getEnd(offset);
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}",0.3957845433255269
195042,"/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}","/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_16:
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}",0.9915292019616584
195043,"public static Element F16_3(RenderScript rs){
  if (rs.mElement_FLOAT_3 == null) {
    rs.mElement_FLOAT_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}","public static Element F16_3(RenderScript rs){
  if (rs.mElement_HALF_3 == null) {
    rs.mElement_HALF_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}",0.9606741573033708
195044,"/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}","/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_16:
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}",0.9915292019616584
195045,"public static Element F16_3(RenderScript rs){
  if (rs.mElement_FLOAT_3 == null) {
    rs.mElement_FLOAT_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}","public static Element F16_3(RenderScript rs){
  if (rs.mElement_HALF_3 == null) {
    rs.mElement_HALF_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}",0.9606741573033708
195046,"/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}","/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_16:
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}",0.9915292019616584
195047,"/** 
 * @hide
 */
public static Element F16_3(RenderScript rs){
  if (rs.mElement_FLOAT_3 == null) {
    rs.mElement_FLOAT_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}","/** 
 * @hide
 */
public static Element F16_3(RenderScript rs){
  if (rs.mElement_HALF_3 == null) {
    rs.mElement_HALF_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}",0.9642857142857144
195048,"/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}","/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_16:
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}",0.9915292019616584
195049,"/** 
 * @hide
 */
public static Element F16_3(RenderScript rs){
  if (rs.mElement_FLOAT_3 == null) {
    rs.mElement_FLOAT_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}","/** 
 * @hide
 */
public static Element F16_3(RenderScript rs){
  if (rs.mElement_HALF_3 == null) {
    rs.mElement_HALF_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}",0.9642857142857144
195050,"/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}","/** 
 * Create a custom vector element of the specified DataType and vector size. DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64, SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16, UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
 * @param rs The context associated with the new Element.
 * @param dt The DataType for the new Element.
 * @param size Vector size for the new Element.  Range 2-4 inclusivesupported.
 * @return Element
 */
public static Element createVector(RenderScript rs,DataType dt,int size){
  if (size < 2 || size > 4) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
switch (dt) {
case FLOAT_16:
case FLOAT_32:
case FLOAT_64:
case SIGNED_8:
case SIGNED_16:
case SIGNED_32:
case SIGNED_64:
case UNSIGNED_8:
case UNSIGNED_16:
case UNSIGNED_32:
case UNSIGNED_64:
case BOOLEAN:
{
      DataKind dk=DataKind.USER;
      boolean norm=false;
      long id=rs.nElementCreate(dt.mID,dk.mID,norm,size);
      return new Element(id,rs,dt,dk,norm,size);
    }
default :
{
    throw new RSIllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}
}",0.9915292019616584
195051,"public static Element F16_3(RenderScript rs){
  if (rs.mElement_FLOAT_3 == null) {
    rs.mElement_FLOAT_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}","public static Element F16_3(RenderScript rs){
  if (rs.mElement_HALF_3 == null) {
    rs.mElement_HALF_3=createVector(rs,DataType.FLOAT_16,3);
  }
  return rs.mElement_HALF_3;
}",0.9606741573033708
195052,"private int getWordStart(int offset){
  int retOffset=getWordIteratorWithText().prevBoundary(offset);
  if (isPunctBoundaryBehind(retOffset,true)) {
    retOffset=getWordIteratorWithText().prevBoundary(retOffset);
    while (!isPunctBoundaryBehind(retOffset,false) && retOffset != BreakIterator.DONE) {
      retOffset=getWordIteratorWithText().prevBoundary(retOffset);
    }
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}","private int getWordStart(int offset){
  int retOffset=getWordIteratorWithText().prevBoundary(offset);
  if (getWordIteratorWithText().isOnPunctuation(retOffset)) {
    retOffset=getWordIteratorWithText().getPunctuationBeginning(offset);
  }
 else {
    retOffset=getWordIteratorWithText().getBeginning(offset);
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}",0.4277456647398844
195053,"private int getWordEnd(int offset){
  int retOffset=getWordIteratorWithText().nextBoundary(offset);
  if (isPunctBoundaryForward(retOffset,true)) {
    retOffset=getWordIteratorWithText().nextBoundary(retOffset);
    while (!isPunctBoundaryForward(retOffset,false) && retOffset != BreakIterator.DONE) {
      retOffset=getWordIteratorWithText().nextBoundary(retOffset);
    }
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}","private int getWordEnd(int offset){
  int retOffset=getWordIteratorWithText().nextBoundary(offset);
  if (getWordIteratorWithText().isAfterPunctuation(retOffset)) {
    retOffset=getWordIteratorWithText().getPunctuationEnd(offset);
  }
 else {
    retOffset=getWordIteratorWithText().getEnd(offset);
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}",0.3957845433255269
195054,"private int getWordStart(int offset){
  int retOffset=getWordIteratorWithText().prevBoundary(offset);
  if (isPunctBoundaryBehind(retOffset,true)) {
    retOffset=getWordIteratorWithText().prevBoundary(retOffset);
    while (!isPunctBoundaryBehind(retOffset,false) && retOffset != BreakIterator.DONE) {
      retOffset=getWordIteratorWithText().prevBoundary(retOffset);
    }
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}","private int getWordStart(int offset){
  int retOffset=getWordIteratorWithText().prevBoundary(offset);
  if (getWordIteratorWithText().isOnPunctuation(retOffset)) {
    retOffset=getWordIteratorWithText().getPunctuationBeginning(offset);
  }
 else {
    retOffset=getWordIteratorWithText().getBeginning(offset);
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}",0.4277456647398844
195055,"private int getWordEnd(int offset){
  int retOffset=getWordIteratorWithText().nextBoundary(offset);
  if (isPunctBoundaryForward(retOffset,true)) {
    retOffset=getWordIteratorWithText().nextBoundary(retOffset);
    while (!isPunctBoundaryForward(retOffset,false) && retOffset != BreakIterator.DONE) {
      retOffset=getWordIteratorWithText().nextBoundary(retOffset);
    }
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}","private int getWordEnd(int offset){
  int retOffset=getWordIteratorWithText().nextBoundary(offset);
  if (getWordIteratorWithText().isAfterPunctuation(retOffset)) {
    retOffset=getWordIteratorWithText().getPunctuationEnd(offset);
  }
 else {
    retOffset=getWordIteratorWithText().getEnd(offset);
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}",0.3957845433255269
195056,"private int getWordStart(int offset){
  int retOffset=getWordIteratorWithText().prevBoundary(offset);
  if (isPunctBoundaryBehind(retOffset,true)) {
    retOffset=getWordIteratorWithText().prevBoundary(retOffset);
    while (!isPunctBoundaryBehind(retOffset,false) && retOffset != BreakIterator.DONE) {
      retOffset=getWordIteratorWithText().prevBoundary(retOffset);
    }
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}","private int getWordStart(int offset){
  int retOffset=getWordIteratorWithText().prevBoundary(offset);
  if (getWordIteratorWithText().isOnPunctuation(retOffset)) {
    retOffset=getWordIteratorWithText().getPunctuationBeginning(offset);
  }
 else {
    retOffset=getWordIteratorWithText().getBeginning(offset);
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}",0.4277456647398844
195057,"private int getWordEnd(int offset){
  int retOffset=getWordIteratorWithText().nextBoundary(offset);
  if (isPunctBoundaryForward(retOffset,true)) {
    retOffset=getWordIteratorWithText().nextBoundary(retOffset);
    while (!isPunctBoundaryForward(retOffset,false) && retOffset != BreakIterator.DONE) {
      retOffset=getWordIteratorWithText().nextBoundary(retOffset);
    }
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}","private int getWordEnd(int offset){
  int retOffset=getWordIteratorWithText().nextBoundary(offset);
  if (getWordIteratorWithText().isAfterPunctuation(retOffset)) {
    retOffset=getWordIteratorWithText().getPunctuationEnd(offset);
  }
 else {
    retOffset=getWordIteratorWithText().getEnd(offset);
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}",0.3957845433255269
195058,"private int getWordStart(int offset){
  int retOffset=getWordIteratorWithText().prevBoundary(offset);
  if (isPunctBoundaryBehind(retOffset,true)) {
    retOffset=getWordIteratorWithText().prevBoundary(retOffset);
    while (!isPunctBoundaryBehind(retOffset,false) && retOffset != BreakIterator.DONE) {
      retOffset=getWordIteratorWithText().prevBoundary(retOffset);
    }
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}","private int getWordStart(int offset){
  int retOffset=getWordIteratorWithText().prevBoundary(offset);
  if (getWordIteratorWithText().isOnPunctuation(retOffset)) {
    retOffset=getWordIteratorWithText().getPunctuationBeginning(offset);
  }
 else {
    retOffset=getWordIteratorWithText().getBeginning(offset);
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}",0.4277456647398844
195059,"private int getWordEnd(int offset){
  int retOffset=getWordIteratorWithText().nextBoundary(offset);
  if (isPunctBoundaryForward(retOffset,true)) {
    retOffset=getWordIteratorWithText().nextBoundary(retOffset);
    while (!isPunctBoundaryForward(retOffset,false) && retOffset != BreakIterator.DONE) {
      retOffset=getWordIteratorWithText().nextBoundary(retOffset);
    }
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}","private int getWordEnd(int offset){
  int retOffset=getWordIteratorWithText().nextBoundary(offset);
  if (getWordIteratorWithText().isAfterPunctuation(retOffset)) {
    retOffset=getWordIteratorWithText().getPunctuationEnd(offset);
  }
 else {
    retOffset=getWordIteratorWithText().getEnd(offset);
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}",0.3957845433255269
195060,"@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}","@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mNotificationPanel.requestLayout();
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
    mStatusBarWindowManager.setForceWindowCollapsed(true);
    mNotificationPanel.post(new Runnable(){
      @Override public void run(){
        mStatusBarWindowManager.setForceWindowCollapsed(false);
      }
    }
);
  }
 else {
    if (!mNotificationPanel.isFullyCollapsed()) {
      mStatusBarWindowManager.setHeadsUpShowing(false);
    }
 else {
      mHeadsUpManager.setHeadsUpGoingAway(true);
      mStackScroller.runAfterAnimationFinished(new Runnable(){
        @Override public void run(){
          if (!mHeadsUpManager.hasPinnedHeadsUp()) {
            mStatusBarWindowManager.setHeadsUpShowing(false);
            mHeadsUpManager.setHeadsUpGoingAway(false);
          }
        }
      }
);
    }
  }
}",0.4540192926045016
195061,"protected PhoneStatusBarView makeStatusBarView(){
  final Context context=mContext;
  Resources res=context.getResources();
  updateDisplaySize();
  updateResources();
  mStatusBarWindow=(StatusBarWindowView)View.inflate(context,R.layout.super_status_bar,null);
  mStatusBarWindow.mService=this;
  mStatusBarWindow.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      checkUserAutohide(v,event);
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        if (mExpandedVisible) {
          animateCollapsePanels();
        }
      }
      return mStatusBarWindow.onTouchEvent(event);
    }
  }
);
  mStatusBarView=(PhoneStatusBarView)mStatusBarWindow.findViewById(R.id.status_bar);
  mStatusBarView.setBar(this);
  PanelHolder holder=(PanelHolder)mStatusBarWindow.findViewById(R.id.panel_holder);
  mStatusBarView.setPanelHolder(holder);
  mNotificationPanel=(NotificationPanelView)mStatusBarWindow.findViewById(R.id.notification_panel);
  mNotificationPanel.setStatusBar(this);
  if (!ActivityManager.isHighEndGfx()) {
    mStatusBarWindow.setBackground(null);
    mNotificationPanel.setBackground(new FastColorDrawable(context.getColor(R.color.notification_panel_solid_background)));
  }
  mHeadsUpManager=new HeadsUpManager(context,mNotificationPanel.getViewTreeObserver());
  mHeadsUpManager.setBar(this);
  mHeadsUpManager.addListener(this);
  mHeadsUpManager.addListener(mNotificationPanel);
  mNotificationPanel.setHeadsUpManager(mHeadsUpManager);
  mNotificationData.setHeadsUpManager(mHeadsUpManager);
  if (MULTIUSER_DEBUG) {
    mNotificationPanelDebugText=(TextView)mNotificationPanel.findViewById(R.id.header_debug_info);
    mNotificationPanelDebugText.setVisibility(View.VISIBLE);
  }
  updateShowSearchHoldoff();
  try {
    boolean showNav=mWindowManagerService.hasNavigationBar();
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showNav);
    if (showNav) {
      mNavigationBarView=(NavigationBarView)View.inflate(context,R.layout.navigation_bar,null);
      mNavigationBarView.setDisabledFlags(mDisabled1);
      mNavigationBarView.setBar(this);
      mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener(){
        @Override public void onVerticalChanged(        boolean isVertical){
          if (mAssistManager != null) {
            mAssistManager.onConfigurationChanged();
          }
          mNotificationPanel.setQsScrimEnabled(!isVertical);
        }
      }
);
      mNavigationBarView.setOnTouchListener(new View.OnTouchListener(){
        @Override public boolean onTouch(        View v,        MotionEvent event){
          checkUserAutohide(v,event);
          return false;
        }
      }
);
    }
  }
 catch (  RemoteException ex) {
  }
  mAssistManager=new AssistManager(this,context);
  mPixelFormat=PixelFormat.OPAQUE;
  mStackScroller=(NotificationStackScrollLayout)mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
  mStackScroller.setLongPressListener(getNotificationLongClicker());
  mStackScroller.setPhoneStatusBar(this);
  mStackScroller.setGroupManager(mGroupManager);
  mStackScroller.setHeadsUpManager(mHeadsUpManager);
  mGroupManager.setOnGroupChangeListener(mStackScroller);
  mKeyguardIconOverflowContainer=(NotificationOverflowContainer)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow,mStackScroller,false);
  mKeyguardIconOverflowContainer.setOnActivatedListener(this);
  mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
  mStackScroller.addView(mKeyguardIconOverflowContainer);
  SpeedBumpView speedBump=(SpeedBumpView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump,mStackScroller,false);
  mStackScroller.setSpeedBumpView(speedBump);
  mEmptyShadeView=(EmptyShadeView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications,mStackScroller,false);
  mStackScroller.setEmptyShadeView(mEmptyShadeView);
  mDismissView=(DismissView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all,mStackScroller,false);
  mDismissView.setOnButtonClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      MetricsLogger.action(mContext,MetricsLogger.ACTION_DISMISS_ALL_NOTES);
      clearAllNotifications();
    }
  }
);
  mStackScroller.setDismissView(mDismissView);
  mExpandedContents=mStackScroller;
  mBackdrop=(BackDropView)mStatusBarWindow.findViewById(R.id.backdrop);
  mBackdropFront=(ImageView)mBackdrop.findViewById(R.id.backdrop_front);
  mBackdropBack=(ImageView)mBackdrop.findViewById(R.id.backdrop_back);
  ScrimView scrimBehind=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_behind);
  ScrimView scrimInFront=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_in_front);
  View headsUpScrim=mStatusBarWindow.findViewById(R.id.heads_up_scrim);
  mScrimController=new ScrimController(scrimBehind,scrimInFront,headsUpScrim,mScrimSrcModeEnabled);
  mHeadsUpManager.addListener(mScrimController);
  mStackScroller.setScrimController(mScrimController);
  mScrimController.setBackDropView(mBackdrop);
  mStatusBarView.setScrimController(mScrimController);
  mDozeScrimController=new DozeScrimController(mScrimController,context);
  mHeader=(StatusBarHeaderView)mStatusBarWindow.findViewById(R.id.header);
  mHeader.setActivityStarter(this);
  mKeyguardStatusBar=(KeyguardStatusBarView)mStatusBarWindow.findViewById(R.id.keyguard_header);
  mKeyguardStatusView=mStatusBarWindow.findViewById(R.id.keyguard_status_view);
  mKeyguardBottomArea=(KeyguardBottomAreaView)mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
  mKeyguardBottomArea.setActivityStarter(this);
  mKeyguardBottomArea.setAssistManager(mAssistManager);
  mKeyguardIndicationController=new KeyguardIndicationController(mContext,(KeyguardIndicationTextView)mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
  mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
  setAreThereNotifications();
  mIconController=new StatusBarIconController(mContext,mStatusBarView,mKeyguardStatusBar,this);
  mHandlerThread=new HandlerThread(TAG,Process.THREAD_PRIORITY_BACKGROUND);
  mHandlerThread.start();
  mLocationController=new LocationControllerImpl(mContext);
  mBatteryController=new BatteryController(mContext);
  mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback(){
    @Override public void onPowerSaveChanged(){
      mHandler.post(mCheckBarModes);
      if (mDozeServiceHost != null) {
        mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
      }
    }
    @Override public void onBatteryLevelChanged(    int level,    boolean pluggedIn,    boolean charging){
    }
  }
);
  mNetworkController=new NetworkControllerImpl(mContext,mHandlerThread.getLooper());
  mHotspotController=new HotspotControllerImpl(mContext);
  mBluetoothController=new BluetoothControllerImpl(mContext,mHandlerThread.getLooper());
  mSecurityController=new SecurityControllerImpl(mContext);
  if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
    mRotationLockController=new RotationLockControllerImpl(mContext);
  }
  mUserInfoController=new UserInfoController(mContext);
  mVolumeComponent=getComponent(VolumeComponent.class);
  if (mVolumeComponent != null) {
    mZenModeController=mVolumeComponent.getZenController();
  }
  mCastController=new CastControllerImpl(mContext);
  final SignalClusterView signalCluster=(SignalClusterView)mStatusBarView.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterKeyguard=(SignalClusterView)mKeyguardStatusBar.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterQs=(SignalClusterView)mHeader.findViewById(R.id.signal_cluster);
  mNetworkController.addSignalCluster(signalCluster);
  mNetworkController.addSignalCluster(signalClusterKeyguard);
  mNetworkController.addSignalCluster(signalClusterQs);
  signalCluster.setSecurityController(mSecurityController);
  signalCluster.setNetworkController(mNetworkController);
  signalClusterKeyguard.setSecurityController(mSecurityController);
  signalClusterKeyguard.setNetworkController(mNetworkController);
  signalClusterQs.setSecurityController(mSecurityController);
  signalClusterQs.setNetworkController(mNetworkController);
  final boolean isAPhone=mNetworkController.hasVoiceCallingFeature();
  if (isAPhone) {
    mNetworkController.addEmergencyListener(new NetworkControllerImpl.EmergencyListener(){
      @Override public void setEmergencyCallsOnly(      boolean emergencyOnly){
        mHeader.setShowEmergencyCallsOnly(emergencyOnly);
      }
    }
);
  }
  mFlashlightController=new FlashlightController(mContext);
  mKeyguardBottomArea.setFlashlightController(mFlashlightController);
  mKeyguardBottomArea.setPhoneStatusBar(this);
  mAccessibilityController=new AccessibilityController(mContext);
  mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
  mNextAlarmController=new NextAlarmController(mContext);
  mKeyguardMonitor=new KeyguardMonitor();
  if (UserSwitcherController.isUserSwitcherAvailable(UserManager.get(mContext))) {
    mUserSwitcherController=new UserSwitcherController(mContext,mKeyguardMonitor);
  }
  mKeyguardUserSwitcher=new KeyguardUserSwitcher(mContext,(ViewStub)mStatusBarWindow.findViewById(R.id.keyguard_user_switcher),mKeyguardStatusBar,mNotificationPanel,mUserSwitcherController);
  mQSPanel=(QSPanel)mStatusBarWindow.findViewById(R.id.quick_settings_panel);
  if (mQSPanel != null) {
    final QSTileHost qsh=new QSTileHost(mContext,this,mBluetoothController,mLocationController,mRotationLockController,mNetworkController,mZenModeController,mHotspotController,mCastController,mFlashlightController,mUserSwitcherController,mKeyguardMonitor,mSecurityController);
    mQSPanel.setHost(qsh);
    mQSPanel.setTiles(qsh.getTiles());
    mBrightnessMirrorController=new BrightnessMirrorController(mStatusBarWindow);
    mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
    mHeader.setQSPanel(mQSPanel);
    qsh.setCallback(new QSTileHost.Callback(){
      @Override public void onTilesChanged(){
        mQSPanel.setTiles(qsh.getTiles());
      }
    }
);
  }
  mHeader.setUserInfoController(mUserInfoController);
  mKeyguardStatusBar.setUserInfoController(mUserInfoController);
  mUserInfoController.reloadUserInfo();
  mHeader.setBatteryController(mBatteryController);
  ((BatteryMeterView)mStatusBarView.findViewById(R.id.battery)).setBatteryController(mBatteryController);
  mKeyguardStatusBar.setBatteryController(mBatteryController);
  mHeader.setNextAlarmController(mNextAlarmController);
  PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mBroadcastReceiver.onReceive(mContext,new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(Intent.ACTION_SCREEN_ON);
  if (DEBUG_MEDIA_FAKE_ARTWORK) {
    filter.addAction(""String_Node_Str"");
  }
  filter.addAction(ACTION_DEMO);
  context.registerReceiverAsUser(mBroadcastReceiver,UserHandle.ALL,filter,null,null);
  resetUserSetupObserver();
  ThreadedRenderer.overrideProperty(""String_Node_Str"",""String_Node_Str"");
  ThreadedRenderer.overrideProperty(""String_Node_Str"",String.valueOf(1.5f));
  return mStatusBarView;
}","protected PhoneStatusBarView makeStatusBarView(){
  final Context context=mContext;
  Resources res=context.getResources();
  updateDisplaySize();
  updateResources();
  mStatusBarWindow=(StatusBarWindowView)View.inflate(context,R.layout.super_status_bar,null);
  mStatusBarWindow.mService=this;
  mStatusBarWindow.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      checkUserAutohide(v,event);
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        if (mExpandedVisible) {
          animateCollapsePanels();
        }
      }
      return mStatusBarWindow.onTouchEvent(event);
    }
  }
);
  mStatusBarView=(PhoneStatusBarView)mStatusBarWindow.findViewById(R.id.status_bar);
  mStatusBarView.setBar(this);
  PanelHolder holder=(PanelHolder)mStatusBarWindow.findViewById(R.id.panel_holder);
  mStatusBarView.setPanelHolder(holder);
  mNotificationPanel=(NotificationPanelView)mStatusBarWindow.findViewById(R.id.notification_panel);
  mNotificationPanel.setStatusBar(this);
  if (!ActivityManager.isHighEndGfx()) {
    mStatusBarWindow.setBackground(null);
    mNotificationPanel.setBackground(new FastColorDrawable(context.getColor(R.color.notification_panel_solid_background)));
  }
  mHeadsUpManager=new HeadsUpManager(context,mStatusBarWindow);
  mHeadsUpManager.setBar(this);
  mHeadsUpManager.addListener(this);
  mHeadsUpManager.addListener(mNotificationPanel);
  mNotificationPanel.setHeadsUpManager(mHeadsUpManager);
  mNotificationData.setHeadsUpManager(mHeadsUpManager);
  if (MULTIUSER_DEBUG) {
    mNotificationPanelDebugText=(TextView)mNotificationPanel.findViewById(R.id.header_debug_info);
    mNotificationPanelDebugText.setVisibility(View.VISIBLE);
  }
  updateShowSearchHoldoff();
  try {
    boolean showNav=mWindowManagerService.hasNavigationBar();
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showNav);
    if (showNav) {
      mNavigationBarView=(NavigationBarView)View.inflate(context,R.layout.navigation_bar,null);
      mNavigationBarView.setDisabledFlags(mDisabled1);
      mNavigationBarView.setBar(this);
      mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener(){
        @Override public void onVerticalChanged(        boolean isVertical){
          if (mAssistManager != null) {
            mAssistManager.onConfigurationChanged();
          }
          mNotificationPanel.setQsScrimEnabled(!isVertical);
        }
      }
);
      mNavigationBarView.setOnTouchListener(new View.OnTouchListener(){
        @Override public boolean onTouch(        View v,        MotionEvent event){
          checkUserAutohide(v,event);
          return false;
        }
      }
);
    }
  }
 catch (  RemoteException ex) {
  }
  mAssistManager=new AssistManager(this,context);
  mPixelFormat=PixelFormat.OPAQUE;
  mStackScroller=(NotificationStackScrollLayout)mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
  mStackScroller.setLongPressListener(getNotificationLongClicker());
  mStackScroller.setPhoneStatusBar(this);
  mStackScroller.setGroupManager(mGroupManager);
  mStackScroller.setHeadsUpManager(mHeadsUpManager);
  mGroupManager.setOnGroupChangeListener(mStackScroller);
  mKeyguardIconOverflowContainer=(NotificationOverflowContainer)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow,mStackScroller,false);
  mKeyguardIconOverflowContainer.setOnActivatedListener(this);
  mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
  mStackScroller.addView(mKeyguardIconOverflowContainer);
  SpeedBumpView speedBump=(SpeedBumpView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump,mStackScroller,false);
  mStackScroller.setSpeedBumpView(speedBump);
  mEmptyShadeView=(EmptyShadeView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications,mStackScroller,false);
  mStackScroller.setEmptyShadeView(mEmptyShadeView);
  mDismissView=(DismissView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all,mStackScroller,false);
  mDismissView.setOnButtonClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      MetricsLogger.action(mContext,MetricsLogger.ACTION_DISMISS_ALL_NOTES);
      clearAllNotifications();
    }
  }
);
  mStackScroller.setDismissView(mDismissView);
  mExpandedContents=mStackScroller;
  mBackdrop=(BackDropView)mStatusBarWindow.findViewById(R.id.backdrop);
  mBackdropFront=(ImageView)mBackdrop.findViewById(R.id.backdrop_front);
  mBackdropBack=(ImageView)mBackdrop.findViewById(R.id.backdrop_back);
  ScrimView scrimBehind=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_behind);
  ScrimView scrimInFront=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_in_front);
  View headsUpScrim=mStatusBarWindow.findViewById(R.id.heads_up_scrim);
  mScrimController=new ScrimController(scrimBehind,scrimInFront,headsUpScrim,mScrimSrcModeEnabled);
  mHeadsUpManager.addListener(mScrimController);
  mStackScroller.setScrimController(mScrimController);
  mScrimController.setBackDropView(mBackdrop);
  mStatusBarView.setScrimController(mScrimController);
  mDozeScrimController=new DozeScrimController(mScrimController,context);
  mHeader=(StatusBarHeaderView)mStatusBarWindow.findViewById(R.id.header);
  mHeader.setActivityStarter(this);
  mKeyguardStatusBar=(KeyguardStatusBarView)mStatusBarWindow.findViewById(R.id.keyguard_header);
  mKeyguardStatusView=mStatusBarWindow.findViewById(R.id.keyguard_status_view);
  mKeyguardBottomArea=(KeyguardBottomAreaView)mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
  mKeyguardBottomArea.setActivityStarter(this);
  mKeyguardBottomArea.setAssistManager(mAssistManager);
  mKeyguardIndicationController=new KeyguardIndicationController(mContext,(KeyguardIndicationTextView)mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
  mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
  setAreThereNotifications();
  mIconController=new StatusBarIconController(mContext,mStatusBarView,mKeyguardStatusBar,this);
  mHandlerThread=new HandlerThread(TAG,Process.THREAD_PRIORITY_BACKGROUND);
  mHandlerThread.start();
  mLocationController=new LocationControllerImpl(mContext);
  mBatteryController=new BatteryController(mContext);
  mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback(){
    @Override public void onPowerSaveChanged(){
      mHandler.post(mCheckBarModes);
      if (mDozeServiceHost != null) {
        mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
      }
    }
    @Override public void onBatteryLevelChanged(    int level,    boolean pluggedIn,    boolean charging){
    }
  }
);
  mNetworkController=new NetworkControllerImpl(mContext,mHandlerThread.getLooper());
  mHotspotController=new HotspotControllerImpl(mContext);
  mBluetoothController=new BluetoothControllerImpl(mContext,mHandlerThread.getLooper());
  mSecurityController=new SecurityControllerImpl(mContext);
  if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
    mRotationLockController=new RotationLockControllerImpl(mContext);
  }
  mUserInfoController=new UserInfoController(mContext);
  mVolumeComponent=getComponent(VolumeComponent.class);
  if (mVolumeComponent != null) {
    mZenModeController=mVolumeComponent.getZenController();
  }
  mCastController=new CastControllerImpl(mContext);
  final SignalClusterView signalCluster=(SignalClusterView)mStatusBarView.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterKeyguard=(SignalClusterView)mKeyguardStatusBar.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterQs=(SignalClusterView)mHeader.findViewById(R.id.signal_cluster);
  mNetworkController.addSignalCluster(signalCluster);
  mNetworkController.addSignalCluster(signalClusterKeyguard);
  mNetworkController.addSignalCluster(signalClusterQs);
  signalCluster.setSecurityController(mSecurityController);
  signalCluster.setNetworkController(mNetworkController);
  signalClusterKeyguard.setSecurityController(mSecurityController);
  signalClusterKeyguard.setNetworkController(mNetworkController);
  signalClusterQs.setSecurityController(mSecurityController);
  signalClusterQs.setNetworkController(mNetworkController);
  final boolean isAPhone=mNetworkController.hasVoiceCallingFeature();
  if (isAPhone) {
    mNetworkController.addEmergencyListener(new NetworkControllerImpl.EmergencyListener(){
      @Override public void setEmergencyCallsOnly(      boolean emergencyOnly){
        mHeader.setShowEmergencyCallsOnly(emergencyOnly);
      }
    }
);
  }
  mFlashlightController=new FlashlightController(mContext);
  mKeyguardBottomArea.setFlashlightController(mFlashlightController);
  mKeyguardBottomArea.setPhoneStatusBar(this);
  mAccessibilityController=new AccessibilityController(mContext);
  mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
  mNextAlarmController=new NextAlarmController(mContext);
  mKeyguardMonitor=new KeyguardMonitor();
  if (UserSwitcherController.isUserSwitcherAvailable(UserManager.get(mContext))) {
    mUserSwitcherController=new UserSwitcherController(mContext,mKeyguardMonitor);
  }
  mKeyguardUserSwitcher=new KeyguardUserSwitcher(mContext,(ViewStub)mStatusBarWindow.findViewById(R.id.keyguard_user_switcher),mKeyguardStatusBar,mNotificationPanel,mUserSwitcherController);
  mQSPanel=(QSPanel)mStatusBarWindow.findViewById(R.id.quick_settings_panel);
  if (mQSPanel != null) {
    final QSTileHost qsh=new QSTileHost(mContext,this,mBluetoothController,mLocationController,mRotationLockController,mNetworkController,mZenModeController,mHotspotController,mCastController,mFlashlightController,mUserSwitcherController,mKeyguardMonitor,mSecurityController);
    mQSPanel.setHost(qsh);
    mQSPanel.setTiles(qsh.getTiles());
    mBrightnessMirrorController=new BrightnessMirrorController(mStatusBarWindow);
    mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
    mHeader.setQSPanel(mQSPanel);
    qsh.setCallback(new QSTileHost.Callback(){
      @Override public void onTilesChanged(){
        mQSPanel.setTiles(qsh.getTiles());
      }
    }
);
  }
  mHeader.setUserInfoController(mUserInfoController);
  mKeyguardStatusBar.setUserInfoController(mUserInfoController);
  mUserInfoController.reloadUserInfo();
  mHeader.setBatteryController(mBatteryController);
  ((BatteryMeterView)mStatusBarView.findViewById(R.id.battery)).setBatteryController(mBatteryController);
  mKeyguardStatusBar.setBatteryController(mBatteryController);
  mHeader.setNextAlarmController(mNextAlarmController);
  PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mBroadcastReceiver.onReceive(mContext,new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(Intent.ACTION_SCREEN_ON);
  if (DEBUG_MEDIA_FAKE_ARTWORK) {
    filter.addAction(""String_Node_Str"");
  }
  filter.addAction(ACTION_DEMO);
  context.registerReceiverAsUser(mBroadcastReceiver,UserHandle.ALL,filter,null,null);
  resetUserSetupObserver();
  ThreadedRenderer.overrideProperty(""String_Node_Str"",""String_Node_Str"");
  ThreadedRenderer.overrideProperty(""String_Node_Str"",String.valueOf(1.5f));
  return mStatusBarView;
}",0.99765726681128
195062,"private void updateHeadsUpScrim(boolean animate){
  float alpha=calculateHeadsUpAlpha();
  ValueAnimator previousAnimator=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_KEY_ANIM);
  float animEndValue=-1;
  if (previousAnimator != null) {
    if (animate || alpha == mCurrentHeadsUpAlpha) {
      previousAnimator.cancel();
    }
    animEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
  }
  if (alpha != mCurrentHeadsUpAlpha && alpha != animEndValue) {
    if (animate) {
      startScrimAnimation(mHeadsUpScrim,alpha);
      mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,mCurrentHeadsUpAlpha);
      mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
    }
 else {
      if (previousAnimator != null) {
        float previousStartValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
        float previousEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
        PropertyValuesHolder[] values=previousAnimator.getValues();
        float relativeDiff=alpha - previousEndValue;
        float newStartValue=previousStartValue + relativeDiff;
        values[0].setFloatValues(newStartValue,alpha);
        mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,newStartValue);
        mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
        previousAnimator.setCurrentPlayTime(previousAnimator.getCurrentPlayTime());
      }
 else {
        setCurrentScrimAlpha(mHeadsUpScrim,alpha);
        updateScrimColor(mHeadsUpScrim);
      }
    }
  }
}","private void updateHeadsUpScrim(boolean animate){
  float alpha=calculateHeadsUpAlpha();
  ValueAnimator previousAnimator=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_KEY_ANIM);
  float animEndValue=-1;
  if (previousAnimator != null) {
    if (animate || alpha == mCurrentHeadsUpAlpha) {
      previousAnimator.cancel();
    }
 else {
      animEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
    }
  }
  if (alpha != mCurrentHeadsUpAlpha && alpha != animEndValue) {
    if (animate) {
      startScrimAnimation(mHeadsUpScrim,alpha);
      mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,mCurrentHeadsUpAlpha);
      mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
    }
 else {
      if (previousAnimator != null) {
        float previousStartValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
        float previousEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
        PropertyValuesHolder[] values=previousAnimator.getValues();
        float relativeDiff=alpha - previousEndValue;
        float newStartValue=previousStartValue + relativeDiff;
        values[0].setFloatValues(newStartValue,alpha);
        mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,newStartValue);
        mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
        previousAnimator.setCurrentPlayTime(previousAnimator.getCurrentPlayTime());
      }
 else {
        setCurrentScrimAlpha(mHeadsUpScrim,alpha);
        updateScrimColor(mHeadsUpScrim);
      }
    }
  }
}",0.9919946631087392
195063,"private void applyHeight(State state){
  boolean expanded=state.isKeyguardShowingAndNotOccluded() || state.statusBarExpanded || state.keyguardFadingAway|| state.bouncerShowing|| state.headsUpShowing;
  if (expanded) {
    mLpChanged.height=ViewGroup.LayoutParams.MATCH_PARENT;
  }
 else {
    mLpChanged.height=mBarHeight;
  }
}","private void applyHeight(State state){
  boolean expanded=!state.forceCollapsed && (state.isKeyguardShowingAndNotOccluded() || state.statusBarExpanded || state.keyguardFadingAway|| state.bouncerShowing|| state.headsUpShowing);
  if (expanded) {
    mLpChanged.height=ViewGroup.LayoutParams.MATCH_PARENT;
  }
 else {
    mLpChanged.height=mBarHeight;
  }
}",0.9604685212298684
195064,"public void setIsExpanded(boolean isExpanded){
  if (isExpanded != mIsExpanded) {
    mIsExpanded=isExpanded;
    if (isExpanded) {
      unpinAll();
    }
  }
}","public void setIsExpanded(boolean isExpanded){
  if (isExpanded != mIsExpanded) {
    mIsExpanded=isExpanded;
    if (isExpanded) {
      unpinAll();
      mWaitingOnCollapseWhenGoingAway=false;
      mHeadsUpGoingAway=false;
      updateTouchableRegionListener();
    }
  }
}",0.7368421052631579
195065,"private void updatePinnedMode(){
  boolean hasPinnedNotification=hasPinnedNotificationInternal();
  if (hasPinnedNotification == mHasPinnedNotification) {
    return;
  }
  mHasPinnedNotification=hasPinnedNotification;
  for (  OnHeadsUpChangedListener listener : mListeners) {
    listener.onHeadsUpPinnedModeChanged(hasPinnedNotification);
  }
}","private void updatePinnedMode(){
  boolean hasPinnedNotification=hasPinnedNotificationInternal();
  if (hasPinnedNotification == mHasPinnedNotification) {
    return;
  }
  mHasPinnedNotification=hasPinnedNotification;
  updateTouchableRegionListener();
  for (  OnHeadsUpChangedListener listener : mListeners) {
    listener.onHeadsUpPinnedModeChanged(hasPinnedNotification);
  }
}",0.9519890260631
195066,"public HeadsUpManager(final Context context,ViewTreeObserver observer){
  Resources resources=context.getResources();
  mTouchAcceptanceDelay=resources.getInteger(R.integer.touch_acceptance_delay);
  mSnoozedPackages=new ArrayMap<>();
  mDefaultSnoozeLengthMs=resources.getInteger(R.integer.heads_up_default_snooze_length_ms);
  mSnoozeLengthMs=mDefaultSnoozeLengthMs;
  mMinimumDisplayTime=resources.getInteger(R.integer.heads_up_notification_minimum_time);
  mHeadsUpNotificationDecay=resources.getInteger(R.integer.heads_up_notification_decay);
  mClock=new Clock();
  mSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,mDefaultSnoozeLengthMs);
  mSettingsObserver=new ContentObserver(mHandler){
    @Override public void onChange(    boolean selfChange){
      final int packageSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,-1);
      if (packageSnoozeLengthMs > -1 && packageSnoozeLengthMs != mSnoozeLengthMs) {
        mSnoozeLengthMs=packageSnoozeLengthMs;
        if (DEBUG)         Log.v(TAG,""String_Node_Str"" + mSnoozeLengthMs);
      }
    }
  }
;
  context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(SETTING_HEADS_UP_SNOOZE_LENGTH_MS),false,mSettingsObserver);
  observer.addOnComputeInternalInsetsListener(this);
}","public HeadsUpManager(final Context context,View statusBarWindowView){
  Resources resources=context.getResources();
  mTouchAcceptanceDelay=resources.getInteger(R.integer.touch_acceptance_delay);
  mSnoozedPackages=new ArrayMap<>();
  mDefaultSnoozeLengthMs=resources.getInteger(R.integer.heads_up_default_snooze_length_ms);
  mSnoozeLengthMs=mDefaultSnoozeLengthMs;
  mMinimumDisplayTime=resources.getInteger(R.integer.heads_up_notification_minimum_time);
  mHeadsUpNotificationDecay=resources.getInteger(R.integer.heads_up_notification_decay);
  mClock=new Clock();
  mSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,mDefaultSnoozeLengthMs);
  mSettingsObserver=new ContentObserver(mHandler){
    @Override public void onChange(    boolean selfChange){
      final int packageSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,-1);
      if (packageSnoozeLengthMs > -1 && packageSnoozeLengthMs != mSnoozeLengthMs) {
        mSnoozeLengthMs=packageSnoozeLengthMs;
        if (DEBUG)         Log.v(TAG,""String_Node_Str"" + mSnoozeLengthMs);
      }
    }
  }
;
  context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(SETTING_HEADS_UP_SNOOZE_LENGTH_MS),false,mSettingsObserver);
  mStatusBarWindowView=statusBarWindowView;
  mStatusBarHeight=resources.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
}",0.9196301564722618
195067,"public void onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo info){
  if (!mIsExpanded && mHasPinnedNotification) {
    int minX=Integer.MAX_VALUE;
    int maxX=0;
    int minY=Integer.MAX_VALUE;
    int maxY=0;
    for (    HeadsUpEntry entry : mSortedEntries) {
      ExpandableNotificationRow row=entry.entry.row;
      if (row.isPinned()) {
        row.getLocationOnScreen(mTmpTwoArray);
        minX=Math.min(minX,mTmpTwoArray[0]);
        minY=Math.min(minY,0);
        maxX=Math.max(maxX,mTmpTwoArray[0] + row.getWidth());
        maxY=Math.max(maxY,row.getHeadsUpHeight());
      }
    }
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(minX,minY,maxX,maxY);
  }
}","public void onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo info){
  if (mHasPinnedNotification) {
    int minX=Integer.MAX_VALUE;
    int maxX=0;
    int minY=Integer.MAX_VALUE;
    int maxY=0;
    for (    HeadsUpEntry entry : mSortedEntries) {
      ExpandableNotificationRow row=entry.entry.row;
      if (row.isPinned()) {
        row.getLocationOnScreen(mTmpTwoArray);
        minX=Math.min(minX,mTmpTwoArray[0]);
        minY=Math.min(minY,0);
        maxX=Math.max(maxX,mTmpTwoArray[0] + row.getWidth());
        maxY=Math.max(maxY,row.getHeadsUpHeight());
      }
    }
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(minX,minY,maxX,maxY);
  }
 else   if (mHeadsUpGoingAway || mWaitingOnCollapseWhenGoingAway) {
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(0,0,mStatusBarWindowView.getWidth(),mStatusBarHeight);
  }
}",0.8490783410138248
195068,"@Override public ComponentName getHomeActivityForUser(int userId){
synchronized (ActivityManagerService.this) {
    ActivityRecord homeActivity=mStackSupervisor.getHomeActivityForUser(userId);
    return homeActivity.realActivity;
  }
}","@Override public ComponentName getHomeActivityForUser(int userId){
synchronized (ActivityManagerService.this) {
    ActivityRecord homeActivity=mStackSupervisor.getHomeActivityForUser(userId);
    return homeActivity == null ? null : homeActivity.realActivity;
  }
}",0.9402390438247012
195069,"private void killBackgroundUserProcessesWithRecordAudioPermission(UserInfo oldUser){
  PackageManager pm=mContext.getPackageManager();
  ComponentName homeActivityName=null;
  if (!oldUser.isManagedProfile()) {
    homeActivityName=LocalServices.getService(ActivityManagerInternal.class).getHomeActivityForUser(oldUser.id);
  }
  final String[] permissions={Manifest.permission.RECORD_AUDIO};
  List<PackageInfo> packages;
  try {
    packages=AppGlobals.getPackageManager().getPackagesHoldingPermissions(permissions,0,oldUser.id).getList();
  }
 catch (  RemoteException e) {
    throw new AndroidRuntimeException(e);
  }
  for (int j=packages.size() - 1; j >= 0; j--) {
    PackageInfo pkg=packages.get(j);
    if (homeActivityName != null && pkg.packageName.equals(homeActivityName.getPackageName()) && pkg.applicationInfo.isSystemApp()) {
      continue;
    }
    try {
      ActivityManagerNative.getDefault().killUid(pkg.applicationInfo.uid,""String_Node_Str"");
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
}","private void killBackgroundUserProcessesWithRecordAudioPermission(UserInfo oldUser){
  PackageManager pm=mContext.getPackageManager();
  ComponentName homeActivityName=null;
  if (!oldUser.isManagedProfile()) {
    homeActivityName=LocalServices.getService(ActivityManagerInternal.class).getHomeActivityForUser(oldUser.id);
  }
  final String[] permissions={Manifest.permission.RECORD_AUDIO};
  List<PackageInfo> packages;
  try {
    packages=AppGlobals.getPackageManager().getPackagesHoldingPermissions(permissions,0,oldUser.id).getList();
  }
 catch (  RemoteException e) {
    throw new AndroidRuntimeException(e);
  }
  for (int j=packages.size() - 1; j >= 0; j--) {
    PackageInfo pkg=packages.get(j);
    if (UserHandle.getAppId(pkg.applicationInfo.uid) < FIRST_APPLICATION_UID) {
      continue;
    }
    if (homeActivityName != null && pkg.packageName.equals(homeActivityName.getPackageName()) && pkg.applicationInfo.isSystemApp()) {
      continue;
    }
    try {
      ActivityManagerNative.getDefault().killUid(pkg.applicationInfo.uid,""String_Node_Str"");
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
}",0.9539295392953928
195070,"@Override public boolean onInterceptTouchEvent(MotionEvent event){
  if (!mTouchingHeadsUpView && event.getActionMasked() != MotionEvent.ACTION_DOWN) {
    return false;
  }
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mInitialTouchY=y;
  mInitialTouchX=x;
setTrackingHeadsUp(false);
ExpandableView child=mStackScroller.getChildAtPosition(x,y);
mTouchingHeadsUpView=false;
if (child instanceof ExpandableNotificationRow) {
mPickedChild=(ExpandableNotificationRow)child;
mTouchingHeadsUpView=mPickedChild.isHeadsUp() && mPickedChild.isPinned();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
mTrackingPointer=event.getPointerId(newIndex);
mInitialTouchX=event.getX(newIndex);
mInitialTouchY=event.getY(newIndex);
}
break;
case MotionEvent.ACTION_MOVE:
final float h=y - mInitialTouchY;
if (Math.abs(h) > mTouchSlop && Math.abs(h) > Math.abs(x - mInitialTouchX)) {
setTrackingHeadsUp(true);
mCollapseSnoozes=h < 0;
mInitialTouchX=x;
mInitialTouchY=y;
int expandedHeight=mPickedChild.getActualHeight();
mPanel.startExpandMotion(x,y,true,expandedHeight);
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mPickedChild != null && mTouchingHeadsUpView) {
if (mHeadsUpManager.shouldSwallowClick(mPickedChild.getStatusBarNotification().getKey())) {
endMotion();
return true;
}
}
endMotion();
break;
}
return false;
}","@Override public boolean onInterceptTouchEvent(MotionEvent event){
  if (!mTouchingHeadsUpView && event.getActionMasked() != MotionEvent.ACTION_DOWN) {
    return false;
  }
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mInitialTouchY=y;
  mInitialTouchX=x;
setTrackingHeadsUp(false);
ExpandableView child=mStackScroller.getChildAtRawPosition(x,y);
mTouchingHeadsUpView=false;
if (child instanceof ExpandableNotificationRow) {
mPickedChild=(ExpandableNotificationRow)child;
mTouchingHeadsUpView=mPickedChild.isHeadsUp() && mPickedChild.isPinned();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
mTrackingPointer=event.getPointerId(newIndex);
mInitialTouchX=event.getX(newIndex);
mInitialTouchY=event.getY(newIndex);
}
break;
case MotionEvent.ACTION_MOVE:
final float h=y - mInitialTouchY;
if (Math.abs(h) > mTouchSlop && Math.abs(h) > Math.abs(x - mInitialTouchX)) {
setTrackingHeadsUp(true);
mCollapseSnoozes=h < 0;
mInitialTouchX=x;
mInitialTouchY=y;
int expandedHeight=mPickedChild.getActualHeight();
mPanel.startExpandMotion(x,y,true,expandedHeight);
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mPickedChild != null && mTouchingHeadsUpView) {
if (mHeadsUpManager.shouldSwallowClick(mPickedChild.getStatusBarNotification().getKey())) {
endMotion();
return true;
}
}
endMotion();
break;
}
return false;
}",0.9991580129104688
195071,"public void install(MenuItem menu){
  assert(mMenu == null);
  mMenu=menu;
  mView=(SearchView)menu.getActionView();
  mMenu.setOnActionExpandListener(this);
  mView.setOnQueryTextListener(this);
  mView.setOnCloseListener(this);
}","public void install(MenuItem menu){
  mMenu=menu;
  mView=(SearchView)menu.getActionView();
  mMenu.setOnActionExpandListener(this);
  mView.setOnQueryTextListener(this);
  mView.setOnCloseListener(this);
}",0.94279176201373
195072,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  final RootInfo root=getCurrentRoot();
  final DocumentInfo cwd=getCurrentDirectory();
  final MenuItem createDir=menu.findItem(R.id.menu_create_dir);
  final MenuItem grid=menu.findItem(R.id.menu_grid);
  final MenuItem list=menu.findItem(R.id.menu_list);
  final MenuItem advanced=menu.findItem(R.id.menu_advanced);
  final MenuItem fileSize=menu.findItem(R.id.menu_file_size);
  final MenuItem settings=menu.findItem(R.id.menu_settings);
  boolean fileSizeVisible=!(mState.action == ACTION_MANAGE || mState.action == ACTION_BROWSE);
  if (mState.action == ACTION_CREATE || mState.action == ACTION_OPEN_TREE) {
    createDir.setVisible(cwd != null && cwd.isCreateSupported());
    mSearchManager.showMenu(false);
    if (cwd == null) {
      grid.setVisible(false);
      list.setVisible(false);
      fileSizeVisible=false;
    }
    if (mState.action == ACTION_CREATE) {
      final FragmentManager fm=getFragmentManager();
      SaveFragment.get(fm).setSaveEnabled(cwd != null && cwd.isCreateSupported());
    }
  }
 else {
    createDir.setVisible(false);
  }
  advanced.setVisible(!(mState.action == ACTION_MANAGE || mState.action == ACTION_BROWSE));
  fileSize.setVisible(fileSizeVisible);
  settings.setVisible((mState.action == ACTION_MANAGE || mState.action == ACTION_BROWSE) && (root.flags & Root.FLAG_HAS_SETTINGS) != 0);
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  final RootInfo root=getCurrentRoot();
  final DocumentInfo cwd=getCurrentDirectory();
  final MenuItem createDir=menu.findItem(R.id.menu_create_dir);
  final MenuItem grid=menu.findItem(R.id.menu_grid);
  final MenuItem list=menu.findItem(R.id.menu_list);
  final MenuItem advanced=menu.findItem(R.id.menu_advanced);
  final MenuItem fileSize=menu.findItem(R.id.menu_file_size);
  final MenuItem settings=menu.findItem(R.id.menu_settings);
  boolean fileSizeVisible=!(mState.action == ACTION_MANAGE || mState.action == ACTION_BROWSE);
  if (mState.action == ACTION_CREATE || mState.action == ACTION_OPEN_TREE) {
    createDir.setVisible(cwd != null && cwd.isCreateSupported());
    mSearchManager.showMenu(false);
    if (cwd == null) {
      grid.setVisible(false);
      list.setVisible(false);
      fileSizeVisible=false;
    }
    if (mState.action == ACTION_CREATE) {
      final FragmentManager fm=getFragmentManager();
      SaveFragment.get(fm).setSaveEnabled(cwd != null && cwd.isCreateSupported());
    }
  }
 else {
    createDir.setVisible(false);
  }
  advanced.setVisible(!(mState.action == ACTION_MANAGE || mState.action == ACTION_BROWSE) && !mState.forceAdvanced);
  fileSize.setVisible(fileSizeVisible);
  settings.setVisible((mState.action == ACTION_MANAGE || mState.action == ACTION_BROWSE) && (root.flags & Root.FLAG_HAS_SETTINGS) != 0);
  return true;
}",0.9914295509084676
195073,"private State buildDefaultState(){
  State state=new State();
  final Intent intent=getIntent();
  state.action=State.ACTION_BROWSE_ALL;
  state.acceptMimes=new String[]{""String_Node_Str""};
  state.allowMultiple=true;
  state.acceptMimes=new String[]{intent.getType()};
  state.localOnly=intent.getBooleanExtra(Intent.EXTRA_LOCAL_ONLY,false);
  state.forceAdvanced=intent.getBooleanExtra(DocumentsContract.EXTRA_SHOW_ADVANCED,false);
  state.showAdvanced=state.forceAdvanced | LocalPreferences.getDisplayAdvancedDevices(this);
  state.showSize=LocalPreferences.getDisplayFileSize(this);
  final DocumentStack stack=intent.getParcelableExtra(CopyService.EXTRA_STACK);
  if (stack != null)   state.stack=stack;
  return state;
}","private State buildDefaultState(){
  State state=new State();
  final Intent intent=getIntent();
  state.action=State.ACTION_BROWSE_ALL;
  state.acceptMimes=new String[]{""String_Node_Str""};
  state.allowMultiple=true;
  state.acceptMimes=new String[]{intent.getType()};
  Preconditions.checkArgument(!intent.hasExtra(Intent.EXTRA_LOCAL_ONLY));
  Preconditions.checkArgument(!intent.hasExtra(DocumentsContract.EXTRA_SHOW_ADVANCED));
  state.showAdvanced=LocalPreferences.getDisplayAdvancedDevices(this);
  state.showSize=LocalPreferences.getDisplayFileSize(this);
  final DocumentStack stack=intent.getParcelableExtra(CopyService.EXTRA_STACK);
  if (stack != null)   state.stack=stack;
  return state;
}",0.865546218487395
195074,"public void install(MenuItem menu){
  assert(mMenu == null);
  mMenu=menu;
  mView=(SearchView)menu.getActionView();
  mMenu.setOnActionExpandListener(this);
  mView.setOnQueryTextListener(this);
  mView.setOnCloseListener(this);
}","public void install(MenuItem menu){
  mMenu=menu;
  mView=(SearchView)menu.getActionView();
  mMenu.setOnActionExpandListener(this);
  mView.setOnQueryTextListener(this);
  mView.setOnCloseListener(this);
}",0.94279176201373
195075,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  final RootInfo root=getCurrentRoot();
  final DocumentInfo cwd=getCurrentDirectory();
  final MenuItem createDir=menu.findItem(R.id.menu_create_dir);
  final MenuItem grid=menu.findItem(R.id.menu_grid);
  final MenuItem list=menu.findItem(R.id.menu_list);
  final MenuItem advanced=menu.findItem(R.id.menu_advanced);
  final MenuItem fileSize=menu.findItem(R.id.menu_file_size);
  final MenuItem settings=menu.findItem(R.id.menu_settings);
  boolean fileSizeVisible=!(mState.action == ACTION_MANAGE || mState.action == ACTION_BROWSE);
  if (mState.action == ACTION_CREATE || mState.action == ACTION_OPEN_TREE) {
    createDir.setVisible(cwd != null && cwd.isCreateSupported());
    mSearchManager.showMenu(false);
    if (cwd == null) {
      grid.setVisible(false);
      list.setVisible(false);
      fileSizeVisible=false;
    }
    if (mState.action == ACTION_CREATE) {
      final FragmentManager fm=getFragmentManager();
      SaveFragment.get(fm).setSaveEnabled(cwd != null && cwd.isCreateSupported());
    }
  }
 else {
    createDir.setVisible(false);
  }
  advanced.setVisible(!(mState.action == ACTION_MANAGE || mState.action == ACTION_BROWSE));
  fileSize.setVisible(fileSizeVisible);
  settings.setVisible((mState.action == ACTION_MANAGE || mState.action == ACTION_BROWSE) && (root.flags & Root.FLAG_HAS_SETTINGS) != 0);
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  final RootInfo root=getCurrentRoot();
  final DocumentInfo cwd=getCurrentDirectory();
  final MenuItem createDir=menu.findItem(R.id.menu_create_dir);
  final MenuItem grid=menu.findItem(R.id.menu_grid);
  final MenuItem list=menu.findItem(R.id.menu_list);
  final MenuItem advanced=menu.findItem(R.id.menu_advanced);
  final MenuItem fileSize=menu.findItem(R.id.menu_file_size);
  final MenuItem settings=menu.findItem(R.id.menu_settings);
  boolean fileSizeVisible=!(mState.action == ACTION_MANAGE || mState.action == ACTION_BROWSE);
  if (mState.action == ACTION_CREATE || mState.action == ACTION_OPEN_TREE) {
    createDir.setVisible(cwd != null && cwd.isCreateSupported());
    mSearchManager.showMenu(false);
    if (cwd == null) {
      grid.setVisible(false);
      list.setVisible(false);
      fileSizeVisible=false;
    }
    if (mState.action == ACTION_CREATE) {
      final FragmentManager fm=getFragmentManager();
      SaveFragment.get(fm).setSaveEnabled(cwd != null && cwd.isCreateSupported());
    }
  }
 else {
    createDir.setVisible(false);
  }
  advanced.setVisible(!(mState.action == ACTION_MANAGE || mState.action == ACTION_BROWSE) && !mState.forceAdvanced);
  fileSize.setVisible(fileSizeVisible);
  settings.setVisible((mState.action == ACTION_MANAGE || mState.action == ACTION_BROWSE) && (root.flags & Root.FLAG_HAS_SETTINGS) != 0);
  return true;
}",0.9914295509084676
195076,"private State buildDefaultState(){
  State state=new State();
  final Intent intent=getIntent();
  state.action=State.ACTION_BROWSE_ALL;
  state.acceptMimes=new String[]{""String_Node_Str""};
  state.allowMultiple=true;
  state.acceptMimes=new String[]{intent.getType()};
  state.localOnly=intent.getBooleanExtra(Intent.EXTRA_LOCAL_ONLY,false);
  state.forceAdvanced=intent.getBooleanExtra(DocumentsContract.EXTRA_SHOW_ADVANCED,false);
  state.showAdvanced=state.forceAdvanced | LocalPreferences.getDisplayAdvancedDevices(this);
  state.showSize=LocalPreferences.getDisplayFileSize(this);
  final DocumentStack stack=intent.getParcelableExtra(CopyService.EXTRA_STACK);
  if (stack != null)   state.stack=stack;
  return state;
}","private State buildDefaultState(){
  State state=new State();
  final Intent intent=getIntent();
  state.action=State.ACTION_BROWSE_ALL;
  state.acceptMimes=new String[]{""String_Node_Str""};
  state.allowMultiple=true;
  state.acceptMimes=new String[]{intent.getType()};
  Preconditions.checkArgument(!intent.hasExtra(Intent.EXTRA_LOCAL_ONLY));
  Preconditions.checkArgument(!intent.hasExtra(DocumentsContract.EXTRA_SHOW_ADVANCED));
  state.showAdvanced=LocalPreferences.getDisplayAdvancedDevices(this);
  state.showSize=LocalPreferences.getDisplayFileSize(this);
  final DocumentStack stack=intent.getParcelableExtra(CopyService.EXTRA_STACK);
  if (stack != null)   state.stack=stack;
  return state;
}",0.865546218487395
195077,"@Override public boolean activeServiceSupportsLaunchFromKeyguard() throws RemoteException {
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo.getSupportsLaunchFromKeyguard();
  }
}","@Override public boolean activeServiceSupportsLaunchFromKeyguard() throws RemoteException {
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo != null && mImpl.mInfo.getSupportsLaunchFromKeyguard();
  }
}",0.9597197898423818
195078,"@Override public boolean activeServiceSupportsAssist(){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo.getSupportsAssist();
  }
}","@Override public boolean activeServiceSupportsAssist(){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo != null && mImpl.mInfo.getSupportsAssist();
  }
}",0.9515789473684212
195079,"public void setSystemUiVisibility(int vis,int mask){
synchronized (mList) {
    mHandler.removeMessages(MSG_SET_SYSTEMUI_VISIBILITY);
    mHandler.obtainMessage(MSG_SET_SYSTEMUI_VISIBILITY,vis,mask,null).sendToTarget();
  }
}","public void setSystemUiVisibility(int vis,int mask){
synchronized (mList) {
    mHandler.obtainMessage(MSG_SET_SYSTEMUI_VISIBILITY,vis,mask,null).sendToTarget();
  }
}",0.8520408163265306
195080,"@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}","@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}",0.9467140319715808
195081,"private void checkBarModes(){
  if (mDemoMode)   return;
  checkBarMode(mStatusBarMode,mStatusBarWindowState,mStatusBarView.getBarTransitions());
  if (mNavigationBarView != null) {
    checkBarMode(mNavigationBarMode,mNavigationBarWindowState,mNavigationBarView.getBarTransitions());
  }
}","private void checkBarModes(){
  if (mDemoMode)   return;
  checkBarMode(mStatusBarMode,mStatusBarWindowState,mStatusBarView.getBarTransitions(),mNoAnimationOnNextBarModeChange);
  if (mNavigationBarView != null) {
    checkBarMode(mNavigationBarMode,mNavigationBarWindowState,mNavigationBarView.getBarTransitions(),mNoAnimationOnNextBarModeChange);
  }
  mNoAnimationOnNextBarModeChange=false;
}",0.8467153284671532
195082,"private void checkBarMode(int mode,int windowState,BarTransitions transitions){
  final boolean powerSave=mBatteryController.isPowerSave();
  final boolean anim=(mScreenOn == null || mScreenOn) && windowState != WINDOW_STATE_HIDDEN && !powerSave;
  if (powerSave && getBarState() == StatusBarState.SHADE) {
    mode=MODE_WARNING;
  }
  transitions.transitionTo(mode,anim);
}","private void checkBarMode(int mode,int windowState,BarTransitions transitions,boolean noAnimation){
  final boolean powerSave=mBatteryController.isPowerSave();
  final boolean anim=!noAnimation && (mScreenOn == null || mScreenOn) && windowState != WINDOW_STATE_HIDDEN && !powerSave;
  if (powerSave && getBarState() == StatusBarState.SHADE) {
    mode=MODE_WARNING;
  }
  transitions.transitionTo(mode,anim);
}",0.9540816326530612
195083,"@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}","@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}",0.9497029702970295
195084,"/** 
 * State is one or more of the DISABLE constants from StatusBarManager.
 */
public void disable(int state1,int state2,boolean animate){
  mDisabledUnmodified1=state1;
  mDisabledUnmodified2=state2;
  state1=adjustDisableFlags(state1);
  final int old1=mDisabled1;
  final int diff1=state1 ^ old1;
  mDisabled1=state1;
  final int old2=mDisabled2;
  final int diff2=state2 ^ old2;
  mDisabled2=state2;
  if (DEBUG) {
    Log.d(TAG,String.format(""String_Node_Str"",old1,state1,diff1));
    Log.d(TAG,String.format(""String_Node_Str"",old2,state2,diff2));
  }
  StringBuilder flagdbg=new StringBuilder();
  flagdbg.append(""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(""String_Node_Str"");
  Log.d(TAG,flagdbg.toString());
  if ((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
    if ((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
      mIconController.hideSystemIconArea(animate);
    }
 else {
      mIconController.showSystemIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) {
    boolean visible=(state1 & StatusBarManager.DISABLE_CLOCK) == 0;
    mIconController.setClockVisibility(visible);
  }
  if ((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) {
    if ((state1 & StatusBarManager.DISABLE_EXPAND) != 0) {
      animateCollapsePanels();
    }
  }
  if ((diff1 & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK| StatusBarManager.DISABLE_SEARCH)) != 0) {
    if (mNavigationBarView != null)     mNavigationBarView.setDisabledFlags(state1);
    if ((state1 & StatusBarManager.DISABLE_RECENT) != 0) {
      mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
      mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
    if ((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
      mIconController.hideNotificationIconArea(animate);
    }
 else {
      mIconController.showNotificationIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
    mDisableNotificationAlerts=(state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
    mHeadsUpObserver.onChange(true);
  }
  if ((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) {
    updateQsExpansionEnabled();
  }
}","/** 
 * State is one or more of the DISABLE constants from StatusBarManager.
 */
public void disable(int state1,int state2,boolean animate){
  animate&=mStatusBarWindowState != WINDOW_STATE_HIDDEN;
  mDisabledUnmodified1=state1;
  mDisabledUnmodified2=state2;
  state1=adjustDisableFlags(state1);
  final int old1=mDisabled1;
  final int diff1=state1 ^ old1;
  mDisabled1=state1;
  final int old2=mDisabled2;
  final int diff2=state2 ^ old2;
  mDisabled2=state2;
  if (DEBUG) {
    Log.d(TAG,String.format(""String_Node_Str"",old1,state1,diff1));
    Log.d(TAG,String.format(""String_Node_Str"",old2,state2,diff2));
  }
  StringBuilder flagdbg=new StringBuilder();
  flagdbg.append(""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(""String_Node_Str"");
  Log.d(TAG,flagdbg.toString());
  if ((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
    if ((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
      mIconController.hideSystemIconArea(animate);
    }
 else {
      mIconController.showSystemIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) {
    boolean visible=(state1 & StatusBarManager.DISABLE_CLOCK) == 0;
    mIconController.setClockVisibility(visible);
  }
  if ((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) {
    if ((state1 & StatusBarManager.DISABLE_EXPAND) != 0) {
      animateCollapsePanels();
    }
  }
  if ((diff1 & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK| StatusBarManager.DISABLE_SEARCH)) != 0) {
    if (mNavigationBarView != null)     mNavigationBarView.setDisabledFlags(state1);
    if ((state1 & StatusBarManager.DISABLE_RECENT) != 0) {
      mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
      mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
    if ((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
      mIconController.hideNotificationIconArea(animate);
    }
 else {
      mIconController.showNotificationIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
    mDisableNotificationAlerts=(state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
    mHeadsUpObserver.onChange(true);
  }
  if ((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) {
    updateQsExpansionEnabled();
  }
}",0.9937493146178308
195085,"void makeExpandedInvisible(){
  if (SPEW)   Log.d(TAG,""String_Node_Str"" + mExpandedVisible + ""String_Node_Str""+ mExpandedVisible);
  if (!mExpandedVisible || mStatusBarWindow == null) {
    return;
  }
  mStatusBarView.collapseAllPanels(false,false,1.0f);
  mNotificationPanel.closeQs();
  mExpandedVisible=false;
  if (mNavigationBarView != null)   mNavigationBarView.setSlippery(false);
  visibilityChanged(false);
  mStatusBarWindowManager.setStatusBarExpanded(false);
  mStatusBarView.setFocusable(true);
  dismissPopups();
  runPostCollapseRunnables();
  setInteracting(StatusBarManager.WINDOW_STATUS_BAR,false);
  showBouncer();
  disable(mDisabledUnmodified1,mDisabledUnmodified2,true);
  if (!mStatusBarKeyguardViewManager.isShowing()) {
    WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
  }
}","void makeExpandedInvisible(){
  if (SPEW)   Log.d(TAG,""String_Node_Str"" + mExpandedVisible + ""String_Node_Str""+ mExpandedVisible);
  if (!mExpandedVisible || mStatusBarWindow == null) {
    return;
  }
  mStatusBarView.collapseAllPanels(false,false,1.0f);
  mNotificationPanel.closeQs();
  mExpandedVisible=false;
  if (mNavigationBarView != null)   mNavigationBarView.setSlippery(false);
  visibilityChanged(false);
  mStatusBarWindowManager.setStatusBarExpanded(false);
  mStatusBarWindowManager.setForceStatusBarVisible(false);
  mStatusBarView.setFocusable(true);
  dismissPopups();
  runPostCollapseRunnables();
  setInteracting(StatusBarManager.WINDOW_STATUS_BAR,false);
  showBouncer();
  disable(mDisabledUnmodified1,mDisabledUnmodified2,true);
  if (!mStatusBarKeyguardViewManager.isShowing()) {
    WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
  }
}",0.9662278191184888
195086,"private void apply(State state){
  applyKeyguardFlags(state);
  applyFocusableFlag(state);
  adjustScreenOrientation(state);
  applyHeight(state);
  applyUserActivityTimeout(state);
  applyInputFeatures(state);
  applyFitsSystemWindows(state);
  applyModalFlag(state);
  if (mLp.copyFrom(mLpChanged) != 0) {
    mWindowManager.updateViewLayout(mStatusBarView,mLp);
  }
}","private void apply(State state){
  applyKeyguardFlags(state);
  applyForceStatusBarVisibleFlag(state);
  applyFocusableFlag(state);
  adjustScreenOrientation(state);
  applyHeight(state);
  applyUserActivityTimeout(state);
  applyInputFeatures(state);
  applyFitsSystemWindows(state);
  applyModalFlag(state);
  if (mLp.copyFrom(mLpChanged) != 0) {
    mWindowManager.updateViewLayout(mStatusBarView,mLp);
  }
}",0.9475032010243278
195087,"public int updateVisibilityLw(boolean transientAllowed,int oldVis,int vis){
  if (mWin == null)   return vis;
  if (isTransientShowing() || isTransientShowRequested()) {
    if (transientAllowed) {
      vis|=mTransientFlag;
      if ((oldVis & mTransientFlag) == 0) {
        vis|=mUnhideFlag;
      }
      setTransientBarState(TRANSIENT_BAR_SHOWING);
    }
 else {
      setTransientBarState(TRANSIENT_BAR_NONE);
    }
  }
  if (mTransientBarState != TRANSIENT_BAR_NONE) {
    vis|=mTransientFlag;
    vis&=~View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
  if ((vis & mTranslucentFlag) != 0 || (oldVis & mTranslucentFlag) != 0 || ((vis | oldVis) & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
    mLastTranslucent=SystemClock.uptimeMillis();
  }
  return vis;
}","public int updateVisibilityLw(boolean transientAllowed,int oldVis,int vis){
  if (mWin == null)   return vis;
  if (isTransientShowing() || isTransientShowRequested()) {
    if (transientAllowed) {
      vis|=mTransientFlag;
      if ((oldVis & mTransientFlag) == 0) {
        vis|=mUnhideFlag;
      }
      setTransientBarState(TRANSIENT_BAR_SHOWING);
    }
 else {
      setTransientBarState(TRANSIENT_BAR_NONE);
    }
  }
  if (mShowTransparent) {
    vis|=View.SYSTEM_UI_TRANSPARENT;
    if (mSetUnHideFlagWhenNextTransparent) {
      vis|=mUnhideFlag;
      mSetUnHideFlagWhenNextTransparent=false;
    }
  }
  if (mTransientBarState != TRANSIENT_BAR_NONE) {
    vis|=mTransientFlag;
    vis&=~View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
  if ((vis & mTranslucentFlag) != 0 || (oldVis & mTranslucentFlag) != 0 || ((vis | oldVis) & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
    mLastTranslucent=SystemClock.uptimeMillis();
  }
  return vis;
}",0.8879668049792531
195088,"public boolean setBarShowingLw(final boolean show){
  if (mWin == null)   return false;
  if (show && mTransientBarState == TRANSIENT_BAR_HIDING) {
    mPendingShow=true;
    return false;
  }
  final boolean wasVis=mWin.isVisibleLw();
  final boolean wasAnim=mWin.isAnimatingLw();
  final boolean change=show ? mWin.showLw(true) : mWin.hideLw(true);
  final int state=computeStateLw(wasVis,wasAnim,mWin,change);
  final boolean stateChanged=updateStateLw(state);
  return change || stateChanged;
}","public boolean setBarShowingLw(final boolean show){
  if (mWin == null)   return false;
  if (show && mTransientBarState == TRANSIENT_BAR_HIDING) {
    mPendingShow=true;
    return false;
  }
  final boolean wasVis=mWin.isVisibleLw();
  final boolean wasAnim=mWin.isAnimatingLw();
  final boolean change=show ? mWin.showLw(!mNoAnimationOnNextShow) : mWin.hideLw(!mNoAnimationOnNextShow);
  mNoAnimationOnNextShow=false;
  final int state=computeStateLw(wasVis,wasAnim,mWin,change);
  final boolean stateChanged=updateStateLw(state);
  return change || stateChanged;
}",0.9174484052532832
195089,"/** 
 * {@inheritDoc} 
 */
@Override public void beginPostLayoutPolicyLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mTopFullscreenOpaqueOrDimmingWindowState=null;
  mAppsToBeHidden.clear();
  mAppsThatDismissKeyguard.clear();
  mForceStatusBar=false;
  mForceStatusBarFromKeyguard=false;
  mForcingShowNavBar=false;
  mForcingShowNavBarLayer=-1;
  mHideLockScreen=false;
  mAllowLockscreenWhenOn=false;
  mDismissKeyguard=DISMISS_KEYGUARD_NONE;
  mShowingLockscreen=false;
  mShowingDream=false;
  mWinShowWhenLocked=null;
  mKeyguardSecure=isKeyguardSecure();
  mKeyguardSecureIncludingHidden=mKeyguardSecure && (mKeyguardDelegate != null && mKeyguardDelegate.isShowing());
}","/** 
 * {@inheritDoc} 
 */
@Override public void beginPostLayoutPolicyLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mTopFullscreenOpaqueOrDimmingWindowState=null;
  mAppsToBeHidden.clear();
  mAppsThatDismissKeyguard.clear();
  mForceStatusBar=false;
  mForceStatusBarFromKeyguard=false;
  mForceStatusBarTransparent=false;
  mForcingShowNavBar=false;
  mForcingShowNavBarLayer=-1;
  mHideLockScreen=false;
  mAllowLockscreenWhenOn=false;
  mDismissKeyguard=DISMISS_KEYGUARD_NONE;
  mShowingLockscreen=false;
  mShowingDream=false;
  mWinShowWhenLocked=null;
  mKeyguardSecure=isKeyguardSecure();
  mKeyguardSecureIncludingHidden=mKeyguardSecure && (mKeyguardDelegate != null && mKeyguardDelegate.isShowing());
}",0.9753424657534246
195090,"/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR && (attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
    mForceStatusBarFromKeyguard=true;
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    if (appWindow) {
      final IApplicationToken appToken=win.getAppToken();
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=mWinDismissingKeyguard == win ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    if (appWindow) {
      final IApplicationToken appToken=win.getAppToken();
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=mWinDismissingKeyguard == win ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}",0.9806562193927522
195091,"/** 
 * {@inheritDoc} 
 */
@Override public int finishPostLayoutPolicyLw(){
  if (mWinShowWhenLocked != null && mTopFullscreenOpaqueWindowState != null && mWinShowWhenLocked.getAppToken() != mTopFullscreenOpaqueWindowState.getAppToken() && isKeyguardLocked()) {
    mWinShowWhenLocked.getAttrs().flags|=FLAG_SHOW_WALLPAPER;
    mTopFullscreenOpaqueWindowState.hideLw(false);
    mTopFullscreenOpaqueWindowState=mWinShowWhenLocked;
  }
  int changes=0;
  boolean topIsFullscreen=false;
  final WindowManager.LayoutParams lp=(mTopFullscreenOpaqueWindowState != null) ? mTopFullscreenOpaqueWindowState.getAttrs() : null;
  if (!mShowingDream) {
    mDreamingLockscreen=mShowingLockscreen;
    if (mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=false;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,0,1).sendToTarget();
    }
  }
 else {
    if (!mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=true;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,1,1).sendToTarget();
    }
  }
  if (mStatusBar != null) {
    if (DEBUG_LAYOUT)     Slog.i(TAG,""String_Node_Str"" + mForceStatusBar + ""String_Node_Str""+ mForceStatusBarFromKeyguard+ ""String_Node_Str""+ mTopFullscreenOpaqueWindowState);
    if (mForceStatusBar || mForceStatusBarFromKeyguard) {
      if (DEBUG_LAYOUT)       Slog.v(TAG,""String_Node_Str"");
      if (mStatusBarController.setBarShowingLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT;
      }
      topIsFullscreen=mTopIsFullscreen && mStatusBar.isAnimatingLw();
      if (mForceStatusBarFromKeyguard && mStatusBarController.isTransientShowing()) {
        mStatusBarController.updateVisibilityLw(false,mLastSystemUiFlags,mLastSystemUiFlags);
      }
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      final int fl=PolicyControl.getWindowFlags(null,lp);
      if (localLOGV) {
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getFrameLw() + ""String_Node_Str""+ mTopFullscreenOpaqueWindowState.getShownFrameLw());
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getAttrs() + ""String_Node_Str""+ Integer.toHexString(fl));
      }
      topIsFullscreen=(fl & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0 || (mLastSystemUiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0;
      if (mStatusBarController.isTransientShowing()) {
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
 else       if (topIsFullscreen) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
 else {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"");
        }
      }
 else {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
    }
  }
  if (mTopIsFullscreen != topIsFullscreen) {
    if (!topIsFullscreen) {
      changes|=FINISH_LAYOUT_REDO_LAYOUT;
    }
    mTopIsFullscreen=topIsFullscreen;
  }
  if (mKeyguardDelegate != null && mStatusBar != null) {
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + mHideLockScreen);
    if (mDismissKeyguard != DISMISS_KEYGUARD_NONE && !mKeyguardSecure) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      if (mKeyguardDelegate.isShowing()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.keyguardDone(false,false);
          }
        }
);
      }
    }
 else     if (mHideLockScreen) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
 else     if (mDismissKeyguard != DISMISS_KEYGUARD_NONE) {
      if (mDismissKeyguard == DISMISS_KEYGUARD_START) {
        mKeyguardHidden=false;
        if (setKeyguardOccludedLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
        }
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.dismiss();
          }
        }
);
      }
    }
 else {
      mWinDismissingKeyguard=null;
      mKeyguardHidden=false;
      if (setKeyguardOccludedLw(false)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
  }
  if ((updateSystemUiVisibilityLw() & SYSTEM_UI_CHANGING_LAYOUT) != 0) {
    changes|=FINISH_LAYOUT_REDO_LAYOUT;
  }
  updateLockScreenTimeout();
  return changes;
}","/** 
 * {@inheritDoc} 
 */
@Override public int finishPostLayoutPolicyLw(){
  if (mWinShowWhenLocked != null && mTopFullscreenOpaqueWindowState != null && mWinShowWhenLocked.getAppToken() != mTopFullscreenOpaqueWindowState.getAppToken() && isKeyguardLocked()) {
    mWinShowWhenLocked.getAttrs().flags|=FLAG_SHOW_WALLPAPER;
    mTopFullscreenOpaqueWindowState.hideLw(false);
    mTopFullscreenOpaqueWindowState=mWinShowWhenLocked;
  }
  int changes=0;
  boolean topIsFullscreen=false;
  final WindowManager.LayoutParams lp=(mTopFullscreenOpaqueWindowState != null) ? mTopFullscreenOpaqueWindowState.getAttrs() : null;
  if (!mShowingDream) {
    mDreamingLockscreen=mShowingLockscreen;
    if (mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=false;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,0,1).sendToTarget();
    }
  }
 else {
    if (!mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=true;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,1,1).sendToTarget();
    }
  }
  if (mStatusBar != null) {
    if (DEBUG_LAYOUT)     Slog.i(TAG,""String_Node_Str"" + mForceStatusBar + ""String_Node_Str""+ mForceStatusBarFromKeyguard+ ""String_Node_Str""+ mTopFullscreenOpaqueWindowState);
    boolean shouldBeTransparent=mForceStatusBarTransparent && !mForceStatusBar && !mForceStatusBarFromKeyguard;
    if (!shouldBeTransparent) {
      mStatusBarController.setShowTransparent(false);
    }
 else     if (!mStatusBar.isVisibleLw()) {
      mStatusBarController.setShowTransparent(true);
    }
    if (mForceStatusBar || mForceStatusBarFromKeyguard || mForceStatusBarTransparent) {
      if (DEBUG_LAYOUT)       Slog.v(TAG,""String_Node_Str"");
      if (mStatusBarController.setBarShowingLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT;
      }
      topIsFullscreen=mTopIsFullscreen && mStatusBar.isAnimatingLw();
      if (mForceStatusBarFromKeyguard && mStatusBarController.isTransientShowing()) {
        mStatusBarController.updateVisibilityLw(false,mLastSystemUiFlags,mLastSystemUiFlags);
      }
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      final int fl=PolicyControl.getWindowFlags(null,lp);
      if (localLOGV) {
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getFrameLw() + ""String_Node_Str""+ mTopFullscreenOpaqueWindowState.getShownFrameLw());
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getAttrs() + ""String_Node_Str""+ Integer.toHexString(fl));
      }
      topIsFullscreen=(fl & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0 || (mLastSystemUiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0;
      if (mStatusBarController.isTransientShowing()) {
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
 else       if (topIsFullscreen) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
 else {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"");
        }
      }
 else {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
    }
  }
  if (mTopIsFullscreen != topIsFullscreen) {
    if (!topIsFullscreen) {
      changes|=FINISH_LAYOUT_REDO_LAYOUT;
    }
    mTopIsFullscreen=topIsFullscreen;
  }
  if (mKeyguardDelegate != null && mStatusBar != null) {
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + mHideLockScreen);
    if (mDismissKeyguard != DISMISS_KEYGUARD_NONE && !mKeyguardSecure) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      if (mKeyguardDelegate.isShowing()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.keyguardDone(false,false);
          }
        }
);
      }
    }
 else     if (mHideLockScreen) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
 else     if (mDismissKeyguard != DISMISS_KEYGUARD_NONE) {
      if (mDismissKeyguard == DISMISS_KEYGUARD_START) {
        mKeyguardHidden=false;
        if (setKeyguardOccludedLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
        }
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.dismiss();
          }
        }
);
      }
    }
 else {
      mWinDismissingKeyguard=null;
      mKeyguardHidden=false;
      if (setKeyguardOccludedLw(false)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
  }
  if ((updateSystemUiVisibilityLw() & SYSTEM_UI_CHANGING_LAYOUT) != 0) {
    changes|=FINISH_LAYOUT_REDO_LAYOUT;
  }
  updateLockScreenTimeout();
  return changes;
}",0.9663932786557312
195092,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  boolean isHeightLimited=heightMode == MeasureSpec.AT_MOST;
  if (hasFixedHeight || isHeightLimited) {
    int size=MeasureSpec.getSize(heightMeasureSpec);
    ownMaxHeight=Math.min(ownMaxHeight,size);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=hasFixedHeight ? ownMaxHeight : isHeightLimited ? Math.min(ownMaxHeight,maxChildHeight) : maxChildHeight;
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}",0.193932520555713
195093,"private int getMaxAllowedChildHeight(View child,AmbientState ambientState){
  if (child instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (ambientState == null && row.isHeadsUp() || ambientState != null && ambientState.getTopHeadsUpEntry() == child) {
      int extraSize=row.getIntrinsicHeight() - row.getHeadsUpHeight();
      return mCollapsedSize + extraSize;
    }
    return row.getIntrinsicHeight();
  }
 else   if (child instanceof ExpandableView) {
    ExpandableView expandableView=(ExpandableView)child;
    return expandableView.getActualHeight();
  }
  return child == null ? mCollapsedSize : child.getHeight();
}","private int getMaxAllowedChildHeight(View child,AmbientState ambientState){
  if (child instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (ambientState == null && row.isHeadsUp() || ambientState != null && ambientState.getTopHeadsUpEntry() == child) {
      int extraSize=row.getIntrinsicHeight() - row.getHeadsUpHeight();
      return mCollapsedSize + extraSize;
    }
    return row.getIntrinsicHeight();
  }
 else   if (child instanceof ExpandableView) {
    ExpandableView expandableView=(ExpandableView)child;
    return expandableView.getIntrinsicHeight();
  }
  return child == null ? mCollapsedSize : child.getHeight();
}",0.9891696750902528
195094,"private int getWordStart(int offset){
  int retOffset=getWordIteratorWithText().prevBoundary(offset);
  if (isPunctBoundaryBehind(retOffset,true)) {
    retOffset=getWordIteratorWithText().prevBoundary(retOffset);
    while (!isPunctBoundaryBehind(retOffset,false) && retOffset != BreakIterator.DONE) {
      retOffset=getWordIteratorWithText().prevBoundary(retOffset);
    }
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}","private int getWordStart(int offset){
  int retOffset=getWordIteratorWithText().prevBoundary(offset);
  if (getWordIteratorWithText().isOnPunctuation(retOffset)) {
    retOffset=getWordIteratorWithText().getPunctuationBeginning(offset);
  }
 else {
    retOffset=getWordIteratorWithText().getBeginning(offset);
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}",0.4277456647398844
195095,"private int getWordEnd(int offset){
  int retOffset=getWordIteratorWithText().nextBoundary(offset);
  if (isPunctBoundaryForward(retOffset,true)) {
    retOffset=getWordIteratorWithText().nextBoundary(retOffset);
    while (!isPunctBoundaryForward(retOffset,false) && retOffset != BreakIterator.DONE) {
      retOffset=getWordIteratorWithText().nextBoundary(retOffset);
    }
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}","private int getWordEnd(int offset){
  int retOffset=getWordIteratorWithText().nextBoundary(offset);
  if (getWordIteratorWithText().isAfterPunctuation(retOffset)) {
    retOffset=getWordIteratorWithText().getPunctuationEnd(offset);
  }
 else {
    retOffset=getWordIteratorWithText().getEnd(offset);
  }
  if (retOffset == BreakIterator.DONE) {
    return offset;
  }
  return retOffset;
}",0.3957845433255269
195096,"@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}","@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mNotificationPanel.requestLayout();
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
    mStatusBarWindowManager.setForceWindowCollapsed(true);
    mNotificationPanel.post(new Runnable(){
      @Override public void run(){
        mStatusBarWindowManager.setForceWindowCollapsed(false);
      }
    }
);
  }
 else {
    if (!mNotificationPanel.isFullyCollapsed()) {
      mStatusBarWindowManager.setHeadsUpShowing(false);
    }
 else {
      mHeadsUpManager.setHeadsUpGoingAway(true);
      mStackScroller.runAfterAnimationFinished(new Runnable(){
        @Override public void run(){
          if (!mHeadsUpManager.hasPinnedHeadsUp()) {
            mStatusBarWindowManager.setHeadsUpShowing(false);
            mHeadsUpManager.setHeadsUpGoingAway(false);
          }
        }
      }
);
    }
  }
}",0.4540192926045016
195097,"protected PhoneStatusBarView makeStatusBarView(){
  final Context context=mContext;
  Resources res=context.getResources();
  updateDisplaySize();
  updateResources();
  mStatusBarWindow=(StatusBarWindowView)View.inflate(context,R.layout.super_status_bar,null);
  mStatusBarWindow.mService=this;
  mStatusBarWindow.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      checkUserAutohide(v,event);
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        if (mExpandedVisible) {
          animateCollapsePanels();
        }
      }
      return mStatusBarWindow.onTouchEvent(event);
    }
  }
);
  mStatusBarView=(PhoneStatusBarView)mStatusBarWindow.findViewById(R.id.status_bar);
  mStatusBarView.setBar(this);
  PanelHolder holder=(PanelHolder)mStatusBarWindow.findViewById(R.id.panel_holder);
  mStatusBarView.setPanelHolder(holder);
  mNotificationPanel=(NotificationPanelView)mStatusBarWindow.findViewById(R.id.notification_panel);
  mNotificationPanel.setStatusBar(this);
  if (!ActivityManager.isHighEndGfx()) {
    mStatusBarWindow.setBackground(null);
    mNotificationPanel.setBackground(new FastColorDrawable(context.getColor(R.color.notification_panel_solid_background)));
  }
  mHeadsUpManager=new HeadsUpManager(context,mNotificationPanel.getViewTreeObserver());
  mHeadsUpManager.setBar(this);
  mHeadsUpManager.addListener(this);
  mHeadsUpManager.addListener(mNotificationPanel);
  mNotificationPanel.setHeadsUpManager(mHeadsUpManager);
  mNotificationData.setHeadsUpManager(mHeadsUpManager);
  if (MULTIUSER_DEBUG) {
    mNotificationPanelDebugText=(TextView)mNotificationPanel.findViewById(R.id.header_debug_info);
    mNotificationPanelDebugText.setVisibility(View.VISIBLE);
  }
  updateShowSearchHoldoff();
  try {
    boolean showNav=mWindowManagerService.hasNavigationBar();
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showNav);
    if (showNav) {
      mNavigationBarView=(NavigationBarView)View.inflate(context,R.layout.navigation_bar,null);
      mNavigationBarView.setDisabledFlags(mDisabled1);
      mNavigationBarView.setBar(this);
      mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener(){
        @Override public void onVerticalChanged(        boolean isVertical){
          if (mAssistManager != null) {
            mAssistManager.onConfigurationChanged();
          }
          mNotificationPanel.setQsScrimEnabled(!isVertical);
        }
      }
);
      mNavigationBarView.setOnTouchListener(new View.OnTouchListener(){
        @Override public boolean onTouch(        View v,        MotionEvent event){
          checkUserAutohide(v,event);
          return false;
        }
      }
);
    }
  }
 catch (  RemoteException ex) {
  }
  mAssistManager=new AssistManager(this,context);
  mPixelFormat=PixelFormat.OPAQUE;
  mStackScroller=(NotificationStackScrollLayout)mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
  mStackScroller.setLongPressListener(getNotificationLongClicker());
  mStackScroller.setPhoneStatusBar(this);
  mStackScroller.setGroupManager(mGroupManager);
  mStackScroller.setHeadsUpManager(mHeadsUpManager);
  mGroupManager.setOnGroupChangeListener(mStackScroller);
  mKeyguardIconOverflowContainer=(NotificationOverflowContainer)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow,mStackScroller,false);
  mKeyguardIconOverflowContainer.setOnActivatedListener(this);
  mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
  mStackScroller.addView(mKeyguardIconOverflowContainer);
  SpeedBumpView speedBump=(SpeedBumpView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump,mStackScroller,false);
  mStackScroller.setSpeedBumpView(speedBump);
  mEmptyShadeView=(EmptyShadeView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications,mStackScroller,false);
  mStackScroller.setEmptyShadeView(mEmptyShadeView);
  mDismissView=(DismissView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all,mStackScroller,false);
  mDismissView.setOnButtonClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      MetricsLogger.action(mContext,MetricsLogger.ACTION_DISMISS_ALL_NOTES);
      clearAllNotifications();
    }
  }
);
  mStackScroller.setDismissView(mDismissView);
  mExpandedContents=mStackScroller;
  mBackdrop=(BackDropView)mStatusBarWindow.findViewById(R.id.backdrop);
  mBackdropFront=(ImageView)mBackdrop.findViewById(R.id.backdrop_front);
  mBackdropBack=(ImageView)mBackdrop.findViewById(R.id.backdrop_back);
  ScrimView scrimBehind=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_behind);
  ScrimView scrimInFront=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_in_front);
  View headsUpScrim=mStatusBarWindow.findViewById(R.id.heads_up_scrim);
  mScrimController=new ScrimController(scrimBehind,scrimInFront,headsUpScrim,mScrimSrcModeEnabled);
  mHeadsUpManager.addListener(mScrimController);
  mStackScroller.setScrimController(mScrimController);
  mScrimController.setBackDropView(mBackdrop);
  mStatusBarView.setScrimController(mScrimController);
  mDozeScrimController=new DozeScrimController(mScrimController,context);
  mHeader=(StatusBarHeaderView)mStatusBarWindow.findViewById(R.id.header);
  mHeader.setActivityStarter(this);
  mKeyguardStatusBar=(KeyguardStatusBarView)mStatusBarWindow.findViewById(R.id.keyguard_header);
  mKeyguardStatusView=mStatusBarWindow.findViewById(R.id.keyguard_status_view);
  mKeyguardBottomArea=(KeyguardBottomAreaView)mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
  mKeyguardBottomArea.setActivityStarter(this);
  mKeyguardBottomArea.setAssistManager(mAssistManager);
  mKeyguardIndicationController=new KeyguardIndicationController(mContext,(KeyguardIndicationTextView)mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
  mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
  setAreThereNotifications();
  mIconController=new StatusBarIconController(mContext,mStatusBarView,mKeyguardStatusBar,this);
  mHandlerThread=new HandlerThread(TAG,Process.THREAD_PRIORITY_BACKGROUND);
  mHandlerThread.start();
  mLocationController=new LocationControllerImpl(mContext);
  mBatteryController=new BatteryController(mContext);
  mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback(){
    @Override public void onPowerSaveChanged(){
      mHandler.post(mCheckBarModes);
      if (mDozeServiceHost != null) {
        mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
      }
    }
    @Override public void onBatteryLevelChanged(    int level,    boolean pluggedIn,    boolean charging){
    }
  }
);
  mNetworkController=new NetworkControllerImpl(mContext,mHandlerThread.getLooper());
  mHotspotController=new HotspotControllerImpl(mContext);
  mBluetoothController=new BluetoothControllerImpl(mContext,mHandlerThread.getLooper());
  mSecurityController=new SecurityControllerImpl(mContext);
  if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
    mRotationLockController=new RotationLockControllerImpl(mContext);
  }
  mUserInfoController=new UserInfoController(mContext);
  mVolumeComponent=getComponent(VolumeComponent.class);
  if (mVolumeComponent != null) {
    mZenModeController=mVolumeComponent.getZenController();
  }
  mCastController=new CastControllerImpl(mContext);
  final SignalClusterView signalCluster=(SignalClusterView)mStatusBarView.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterKeyguard=(SignalClusterView)mKeyguardStatusBar.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterQs=(SignalClusterView)mHeader.findViewById(R.id.signal_cluster);
  mNetworkController.addSignalCluster(signalCluster);
  mNetworkController.addSignalCluster(signalClusterKeyguard);
  mNetworkController.addSignalCluster(signalClusterQs);
  signalCluster.setSecurityController(mSecurityController);
  signalCluster.setNetworkController(mNetworkController);
  signalClusterKeyguard.setSecurityController(mSecurityController);
  signalClusterKeyguard.setNetworkController(mNetworkController);
  signalClusterQs.setSecurityController(mSecurityController);
  signalClusterQs.setNetworkController(mNetworkController);
  final boolean isAPhone=mNetworkController.hasVoiceCallingFeature();
  if (isAPhone) {
    mNetworkController.addEmergencyListener(new NetworkControllerImpl.EmergencyListener(){
      @Override public void setEmergencyCallsOnly(      boolean emergencyOnly){
        mHeader.setShowEmergencyCallsOnly(emergencyOnly);
      }
    }
);
  }
  mFlashlightController=new FlashlightController(mContext);
  mKeyguardBottomArea.setFlashlightController(mFlashlightController);
  mKeyguardBottomArea.setPhoneStatusBar(this);
  mAccessibilityController=new AccessibilityController(mContext);
  mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
  mNextAlarmController=new NextAlarmController(mContext);
  mKeyguardMonitor=new KeyguardMonitor();
  if (UserSwitcherController.isUserSwitcherAvailable(UserManager.get(mContext))) {
    mUserSwitcherController=new UserSwitcherController(mContext,mKeyguardMonitor);
  }
  mKeyguardUserSwitcher=new KeyguardUserSwitcher(mContext,(ViewStub)mStatusBarWindow.findViewById(R.id.keyguard_user_switcher),mKeyguardStatusBar,mNotificationPanel,mUserSwitcherController);
  mQSPanel=(QSPanel)mStatusBarWindow.findViewById(R.id.quick_settings_panel);
  if (mQSPanel != null) {
    final QSTileHost qsh=new QSTileHost(mContext,this,mBluetoothController,mLocationController,mRotationLockController,mNetworkController,mZenModeController,mHotspotController,mCastController,mFlashlightController,mUserSwitcherController,mKeyguardMonitor,mSecurityController);
    mQSPanel.setHost(qsh);
    mQSPanel.setTiles(qsh.getTiles());
    mBrightnessMirrorController=new BrightnessMirrorController(mStatusBarWindow);
    mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
    mHeader.setQSPanel(mQSPanel);
    qsh.setCallback(new QSTileHost.Callback(){
      @Override public void onTilesChanged(){
        mQSPanel.setTiles(qsh.getTiles());
      }
    }
);
  }
  mHeader.setUserInfoController(mUserInfoController);
  mKeyguardStatusBar.setUserInfoController(mUserInfoController);
  mUserInfoController.reloadUserInfo();
  mHeader.setBatteryController(mBatteryController);
  ((BatteryMeterView)mStatusBarView.findViewById(R.id.battery)).setBatteryController(mBatteryController);
  mKeyguardStatusBar.setBatteryController(mBatteryController);
  mHeader.setNextAlarmController(mNextAlarmController);
  PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mBroadcastReceiver.onReceive(mContext,new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(Intent.ACTION_SCREEN_ON);
  if (DEBUG_MEDIA_FAKE_ARTWORK) {
    filter.addAction(""String_Node_Str"");
  }
  filter.addAction(ACTION_DEMO);
  context.registerReceiverAsUser(mBroadcastReceiver,UserHandle.ALL,filter,null,null);
  resetUserSetupObserver();
  ThreadedRenderer.overrideProperty(""String_Node_Str"",""String_Node_Str"");
  ThreadedRenderer.overrideProperty(""String_Node_Str"",String.valueOf(1.5f));
  return mStatusBarView;
}","protected PhoneStatusBarView makeStatusBarView(){
  final Context context=mContext;
  Resources res=context.getResources();
  updateDisplaySize();
  updateResources();
  mStatusBarWindow=(StatusBarWindowView)View.inflate(context,R.layout.super_status_bar,null);
  mStatusBarWindow.mService=this;
  mStatusBarWindow.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      checkUserAutohide(v,event);
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        if (mExpandedVisible) {
          animateCollapsePanels();
        }
      }
      return mStatusBarWindow.onTouchEvent(event);
    }
  }
);
  mStatusBarView=(PhoneStatusBarView)mStatusBarWindow.findViewById(R.id.status_bar);
  mStatusBarView.setBar(this);
  PanelHolder holder=(PanelHolder)mStatusBarWindow.findViewById(R.id.panel_holder);
  mStatusBarView.setPanelHolder(holder);
  mNotificationPanel=(NotificationPanelView)mStatusBarWindow.findViewById(R.id.notification_panel);
  mNotificationPanel.setStatusBar(this);
  if (!ActivityManager.isHighEndGfx()) {
    mStatusBarWindow.setBackground(null);
    mNotificationPanel.setBackground(new FastColorDrawable(context.getColor(R.color.notification_panel_solid_background)));
  }
  mHeadsUpManager=new HeadsUpManager(context,mStatusBarWindow);
  mHeadsUpManager.setBar(this);
  mHeadsUpManager.addListener(this);
  mHeadsUpManager.addListener(mNotificationPanel);
  mNotificationPanel.setHeadsUpManager(mHeadsUpManager);
  mNotificationData.setHeadsUpManager(mHeadsUpManager);
  if (MULTIUSER_DEBUG) {
    mNotificationPanelDebugText=(TextView)mNotificationPanel.findViewById(R.id.header_debug_info);
    mNotificationPanelDebugText.setVisibility(View.VISIBLE);
  }
  updateShowSearchHoldoff();
  try {
    boolean showNav=mWindowManagerService.hasNavigationBar();
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showNav);
    if (showNav) {
      mNavigationBarView=(NavigationBarView)View.inflate(context,R.layout.navigation_bar,null);
      mNavigationBarView.setDisabledFlags(mDisabled1);
      mNavigationBarView.setBar(this);
      mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener(){
        @Override public void onVerticalChanged(        boolean isVertical){
          if (mAssistManager != null) {
            mAssistManager.onConfigurationChanged();
          }
          mNotificationPanel.setQsScrimEnabled(!isVertical);
        }
      }
);
      mNavigationBarView.setOnTouchListener(new View.OnTouchListener(){
        @Override public boolean onTouch(        View v,        MotionEvent event){
          checkUserAutohide(v,event);
          return false;
        }
      }
);
    }
  }
 catch (  RemoteException ex) {
  }
  mAssistManager=new AssistManager(this,context);
  mPixelFormat=PixelFormat.OPAQUE;
  mStackScroller=(NotificationStackScrollLayout)mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
  mStackScroller.setLongPressListener(getNotificationLongClicker());
  mStackScroller.setPhoneStatusBar(this);
  mStackScroller.setGroupManager(mGroupManager);
  mStackScroller.setHeadsUpManager(mHeadsUpManager);
  mGroupManager.setOnGroupChangeListener(mStackScroller);
  mKeyguardIconOverflowContainer=(NotificationOverflowContainer)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow,mStackScroller,false);
  mKeyguardIconOverflowContainer.setOnActivatedListener(this);
  mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
  mStackScroller.addView(mKeyguardIconOverflowContainer);
  SpeedBumpView speedBump=(SpeedBumpView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump,mStackScroller,false);
  mStackScroller.setSpeedBumpView(speedBump);
  mEmptyShadeView=(EmptyShadeView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications,mStackScroller,false);
  mStackScroller.setEmptyShadeView(mEmptyShadeView);
  mDismissView=(DismissView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all,mStackScroller,false);
  mDismissView.setOnButtonClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      MetricsLogger.action(mContext,MetricsLogger.ACTION_DISMISS_ALL_NOTES);
      clearAllNotifications();
    }
  }
);
  mStackScroller.setDismissView(mDismissView);
  mExpandedContents=mStackScroller;
  mBackdrop=(BackDropView)mStatusBarWindow.findViewById(R.id.backdrop);
  mBackdropFront=(ImageView)mBackdrop.findViewById(R.id.backdrop_front);
  mBackdropBack=(ImageView)mBackdrop.findViewById(R.id.backdrop_back);
  ScrimView scrimBehind=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_behind);
  ScrimView scrimInFront=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_in_front);
  View headsUpScrim=mStatusBarWindow.findViewById(R.id.heads_up_scrim);
  mScrimController=new ScrimController(scrimBehind,scrimInFront,headsUpScrim,mScrimSrcModeEnabled);
  mHeadsUpManager.addListener(mScrimController);
  mStackScroller.setScrimController(mScrimController);
  mScrimController.setBackDropView(mBackdrop);
  mStatusBarView.setScrimController(mScrimController);
  mDozeScrimController=new DozeScrimController(mScrimController,context);
  mHeader=(StatusBarHeaderView)mStatusBarWindow.findViewById(R.id.header);
  mHeader.setActivityStarter(this);
  mKeyguardStatusBar=(KeyguardStatusBarView)mStatusBarWindow.findViewById(R.id.keyguard_header);
  mKeyguardStatusView=mStatusBarWindow.findViewById(R.id.keyguard_status_view);
  mKeyguardBottomArea=(KeyguardBottomAreaView)mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
  mKeyguardBottomArea.setActivityStarter(this);
  mKeyguardBottomArea.setAssistManager(mAssistManager);
  mKeyguardIndicationController=new KeyguardIndicationController(mContext,(KeyguardIndicationTextView)mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
  mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
  setAreThereNotifications();
  mIconController=new StatusBarIconController(mContext,mStatusBarView,mKeyguardStatusBar,this);
  mHandlerThread=new HandlerThread(TAG,Process.THREAD_PRIORITY_BACKGROUND);
  mHandlerThread.start();
  mLocationController=new LocationControllerImpl(mContext);
  mBatteryController=new BatteryController(mContext);
  mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback(){
    @Override public void onPowerSaveChanged(){
      mHandler.post(mCheckBarModes);
      if (mDozeServiceHost != null) {
        mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
      }
    }
    @Override public void onBatteryLevelChanged(    int level,    boolean pluggedIn,    boolean charging){
    }
  }
);
  mNetworkController=new NetworkControllerImpl(mContext,mHandlerThread.getLooper());
  mHotspotController=new HotspotControllerImpl(mContext);
  mBluetoothController=new BluetoothControllerImpl(mContext,mHandlerThread.getLooper());
  mSecurityController=new SecurityControllerImpl(mContext);
  if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
    mRotationLockController=new RotationLockControllerImpl(mContext);
  }
  mUserInfoController=new UserInfoController(mContext);
  mVolumeComponent=getComponent(VolumeComponent.class);
  if (mVolumeComponent != null) {
    mZenModeController=mVolumeComponent.getZenController();
  }
  mCastController=new CastControllerImpl(mContext);
  final SignalClusterView signalCluster=(SignalClusterView)mStatusBarView.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterKeyguard=(SignalClusterView)mKeyguardStatusBar.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterQs=(SignalClusterView)mHeader.findViewById(R.id.signal_cluster);
  mNetworkController.addSignalCluster(signalCluster);
  mNetworkController.addSignalCluster(signalClusterKeyguard);
  mNetworkController.addSignalCluster(signalClusterQs);
  signalCluster.setSecurityController(mSecurityController);
  signalCluster.setNetworkController(mNetworkController);
  signalClusterKeyguard.setSecurityController(mSecurityController);
  signalClusterKeyguard.setNetworkController(mNetworkController);
  signalClusterQs.setSecurityController(mSecurityController);
  signalClusterQs.setNetworkController(mNetworkController);
  final boolean isAPhone=mNetworkController.hasVoiceCallingFeature();
  if (isAPhone) {
    mNetworkController.addEmergencyListener(new NetworkControllerImpl.EmergencyListener(){
      @Override public void setEmergencyCallsOnly(      boolean emergencyOnly){
        mHeader.setShowEmergencyCallsOnly(emergencyOnly);
      }
    }
);
  }
  mFlashlightController=new FlashlightController(mContext);
  mKeyguardBottomArea.setFlashlightController(mFlashlightController);
  mKeyguardBottomArea.setPhoneStatusBar(this);
  mAccessibilityController=new AccessibilityController(mContext);
  mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
  mNextAlarmController=new NextAlarmController(mContext);
  mKeyguardMonitor=new KeyguardMonitor();
  if (UserSwitcherController.isUserSwitcherAvailable(UserManager.get(mContext))) {
    mUserSwitcherController=new UserSwitcherController(mContext,mKeyguardMonitor);
  }
  mKeyguardUserSwitcher=new KeyguardUserSwitcher(mContext,(ViewStub)mStatusBarWindow.findViewById(R.id.keyguard_user_switcher),mKeyguardStatusBar,mNotificationPanel,mUserSwitcherController);
  mQSPanel=(QSPanel)mStatusBarWindow.findViewById(R.id.quick_settings_panel);
  if (mQSPanel != null) {
    final QSTileHost qsh=new QSTileHost(mContext,this,mBluetoothController,mLocationController,mRotationLockController,mNetworkController,mZenModeController,mHotspotController,mCastController,mFlashlightController,mUserSwitcherController,mKeyguardMonitor,mSecurityController);
    mQSPanel.setHost(qsh);
    mQSPanel.setTiles(qsh.getTiles());
    mBrightnessMirrorController=new BrightnessMirrorController(mStatusBarWindow);
    mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
    mHeader.setQSPanel(mQSPanel);
    qsh.setCallback(new QSTileHost.Callback(){
      @Override public void onTilesChanged(){
        mQSPanel.setTiles(qsh.getTiles());
      }
    }
);
  }
  mHeader.setUserInfoController(mUserInfoController);
  mKeyguardStatusBar.setUserInfoController(mUserInfoController);
  mUserInfoController.reloadUserInfo();
  mHeader.setBatteryController(mBatteryController);
  ((BatteryMeterView)mStatusBarView.findViewById(R.id.battery)).setBatteryController(mBatteryController);
  mKeyguardStatusBar.setBatteryController(mBatteryController);
  mHeader.setNextAlarmController(mNextAlarmController);
  PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mBroadcastReceiver.onReceive(mContext,new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(Intent.ACTION_SCREEN_ON);
  if (DEBUG_MEDIA_FAKE_ARTWORK) {
    filter.addAction(""String_Node_Str"");
  }
  filter.addAction(ACTION_DEMO);
  context.registerReceiverAsUser(mBroadcastReceiver,UserHandle.ALL,filter,null,null);
  resetUserSetupObserver();
  ThreadedRenderer.overrideProperty(""String_Node_Str"",""String_Node_Str"");
  ThreadedRenderer.overrideProperty(""String_Node_Str"",String.valueOf(1.5f));
  return mStatusBarView;
}",0.99765726681128
195098,"private void updateHeadsUpScrim(boolean animate){
  float alpha=calculateHeadsUpAlpha();
  ValueAnimator previousAnimator=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_KEY_ANIM);
  float animEndValue=-1;
  if (previousAnimator != null) {
    if (animate || alpha == mCurrentHeadsUpAlpha) {
      previousAnimator.cancel();
    }
    animEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
  }
  if (alpha != mCurrentHeadsUpAlpha && alpha != animEndValue) {
    if (animate) {
      startScrimAnimation(mHeadsUpScrim,alpha);
      mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,mCurrentHeadsUpAlpha);
      mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
    }
 else {
      if (previousAnimator != null) {
        float previousStartValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
        float previousEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
        PropertyValuesHolder[] values=previousAnimator.getValues();
        float relativeDiff=alpha - previousEndValue;
        float newStartValue=previousStartValue + relativeDiff;
        values[0].setFloatValues(newStartValue,alpha);
        mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,newStartValue);
        mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
        previousAnimator.setCurrentPlayTime(previousAnimator.getCurrentPlayTime());
      }
 else {
        setCurrentScrimAlpha(mHeadsUpScrim,alpha);
        updateScrimColor(mHeadsUpScrim);
      }
    }
  }
}","private void updateHeadsUpScrim(boolean animate){
  float alpha=calculateHeadsUpAlpha();
  ValueAnimator previousAnimator=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_KEY_ANIM);
  float animEndValue=-1;
  if (previousAnimator != null) {
    if (animate || alpha == mCurrentHeadsUpAlpha) {
      previousAnimator.cancel();
    }
 else {
      animEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
    }
  }
  if (alpha != mCurrentHeadsUpAlpha && alpha != animEndValue) {
    if (animate) {
      startScrimAnimation(mHeadsUpScrim,alpha);
      mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,mCurrentHeadsUpAlpha);
      mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
    }
 else {
      if (previousAnimator != null) {
        float previousStartValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
        float previousEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
        PropertyValuesHolder[] values=previousAnimator.getValues();
        float relativeDiff=alpha - previousEndValue;
        float newStartValue=previousStartValue + relativeDiff;
        values[0].setFloatValues(newStartValue,alpha);
        mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,newStartValue);
        mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
        previousAnimator.setCurrentPlayTime(previousAnimator.getCurrentPlayTime());
      }
 else {
        setCurrentScrimAlpha(mHeadsUpScrim,alpha);
        updateScrimColor(mHeadsUpScrim);
      }
    }
  }
}",0.9919946631087392
195099,"private void applyHeight(State state){
  boolean expanded=state.isKeyguardShowingAndNotOccluded() || state.statusBarExpanded || state.keyguardFadingAway|| state.bouncerShowing|| state.headsUpShowing;
  if (expanded) {
    mLpChanged.height=ViewGroup.LayoutParams.MATCH_PARENT;
  }
 else {
    mLpChanged.height=mBarHeight;
  }
}","private void applyHeight(State state){
  boolean expanded=!state.forceCollapsed && (state.isKeyguardShowingAndNotOccluded() || state.statusBarExpanded || state.keyguardFadingAway|| state.bouncerShowing|| state.headsUpShowing);
  if (expanded) {
    mLpChanged.height=ViewGroup.LayoutParams.MATCH_PARENT;
  }
 else {
    mLpChanged.height=mBarHeight;
  }
}",0.9604685212298684
195100,"public void setIsExpanded(boolean isExpanded){
  if (isExpanded != mIsExpanded) {
    mIsExpanded=isExpanded;
    if (isExpanded) {
      unpinAll();
    }
  }
}","public void setIsExpanded(boolean isExpanded){
  if (isExpanded != mIsExpanded) {
    mIsExpanded=isExpanded;
    if (isExpanded) {
      unpinAll();
      mWaitingOnCollapseWhenGoingAway=false;
      mHeadsUpGoingAway=false;
      updateTouchableRegionListener();
    }
  }
}",0.7368421052631579
195101,"private void updatePinnedMode(){
  boolean hasPinnedNotification=hasPinnedNotificationInternal();
  if (hasPinnedNotification == mHasPinnedNotification) {
    return;
  }
  mHasPinnedNotification=hasPinnedNotification;
  for (  OnHeadsUpChangedListener listener : mListeners) {
    listener.onHeadsUpPinnedModeChanged(hasPinnedNotification);
  }
}","private void updatePinnedMode(){
  boolean hasPinnedNotification=hasPinnedNotificationInternal();
  if (hasPinnedNotification == mHasPinnedNotification) {
    return;
  }
  mHasPinnedNotification=hasPinnedNotification;
  updateTouchableRegionListener();
  for (  OnHeadsUpChangedListener listener : mListeners) {
    listener.onHeadsUpPinnedModeChanged(hasPinnedNotification);
  }
}",0.9519890260631
195102,"public HeadsUpManager(final Context context,ViewTreeObserver observer){
  Resources resources=context.getResources();
  mTouchAcceptanceDelay=resources.getInteger(R.integer.touch_acceptance_delay);
  mSnoozedPackages=new ArrayMap<>();
  mDefaultSnoozeLengthMs=resources.getInteger(R.integer.heads_up_default_snooze_length_ms);
  mSnoozeLengthMs=mDefaultSnoozeLengthMs;
  mMinimumDisplayTime=resources.getInteger(R.integer.heads_up_notification_minimum_time);
  mHeadsUpNotificationDecay=resources.getInteger(R.integer.heads_up_notification_decay);
  mClock=new Clock();
  mSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,mDefaultSnoozeLengthMs);
  mSettingsObserver=new ContentObserver(mHandler){
    @Override public void onChange(    boolean selfChange){
      final int packageSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,-1);
      if (packageSnoozeLengthMs > -1 && packageSnoozeLengthMs != mSnoozeLengthMs) {
        mSnoozeLengthMs=packageSnoozeLengthMs;
        if (DEBUG)         Log.v(TAG,""String_Node_Str"" + mSnoozeLengthMs);
      }
    }
  }
;
  context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(SETTING_HEADS_UP_SNOOZE_LENGTH_MS),false,mSettingsObserver);
  observer.addOnComputeInternalInsetsListener(this);
}","public HeadsUpManager(final Context context,View statusBarWindowView){
  Resources resources=context.getResources();
  mTouchAcceptanceDelay=resources.getInteger(R.integer.touch_acceptance_delay);
  mSnoozedPackages=new ArrayMap<>();
  mDefaultSnoozeLengthMs=resources.getInteger(R.integer.heads_up_default_snooze_length_ms);
  mSnoozeLengthMs=mDefaultSnoozeLengthMs;
  mMinimumDisplayTime=resources.getInteger(R.integer.heads_up_notification_minimum_time);
  mHeadsUpNotificationDecay=resources.getInteger(R.integer.heads_up_notification_decay);
  mClock=new Clock();
  mSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,mDefaultSnoozeLengthMs);
  mSettingsObserver=new ContentObserver(mHandler){
    @Override public void onChange(    boolean selfChange){
      final int packageSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,-1);
      if (packageSnoozeLengthMs > -1 && packageSnoozeLengthMs != mSnoozeLengthMs) {
        mSnoozeLengthMs=packageSnoozeLengthMs;
        if (DEBUG)         Log.v(TAG,""String_Node_Str"" + mSnoozeLengthMs);
      }
    }
  }
;
  context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(SETTING_HEADS_UP_SNOOZE_LENGTH_MS),false,mSettingsObserver);
  mStatusBarWindowView=statusBarWindowView;
  mStatusBarHeight=resources.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
}",0.9196301564722618
195103,"public void onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo info){
  if (!mIsExpanded && mHasPinnedNotification) {
    int minX=Integer.MAX_VALUE;
    int maxX=0;
    int minY=Integer.MAX_VALUE;
    int maxY=0;
    for (    HeadsUpEntry entry : mSortedEntries) {
      ExpandableNotificationRow row=entry.entry.row;
      if (row.isPinned()) {
        row.getLocationOnScreen(mTmpTwoArray);
        minX=Math.min(minX,mTmpTwoArray[0]);
        minY=Math.min(minY,0);
        maxX=Math.max(maxX,mTmpTwoArray[0] + row.getWidth());
        maxY=Math.max(maxY,row.getHeadsUpHeight());
      }
    }
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(minX,minY,maxX,maxY);
  }
}","public void onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo info){
  if (mHasPinnedNotification) {
    int minX=Integer.MAX_VALUE;
    int maxX=0;
    int minY=Integer.MAX_VALUE;
    int maxY=0;
    for (    HeadsUpEntry entry : mSortedEntries) {
      ExpandableNotificationRow row=entry.entry.row;
      if (row.isPinned()) {
        row.getLocationOnScreen(mTmpTwoArray);
        minX=Math.min(minX,mTmpTwoArray[0]);
        minY=Math.min(minY,0);
        maxX=Math.max(maxX,mTmpTwoArray[0] + row.getWidth());
        maxY=Math.max(maxY,row.getHeadsUpHeight());
      }
    }
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(minX,minY,maxX,maxY);
  }
 else   if (mHeadsUpGoingAway || mWaitingOnCollapseWhenGoingAway) {
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(0,0,mStatusBarWindowView.getWidth(),mStatusBarHeight);
  }
}",0.8490783410138248
195104,"@Override public boolean onInterceptTouchEvent(MotionEvent event){
  if (!mTouchingHeadsUpView && event.getActionMasked() != MotionEvent.ACTION_DOWN) {
    return false;
  }
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mInitialTouchY=y;
  mInitialTouchX=x;
setTrackingHeadsUp(false);
ExpandableView child=mStackScroller.getChildAtPosition(x,y);
mTouchingHeadsUpView=false;
if (child instanceof ExpandableNotificationRow) {
mPickedChild=(ExpandableNotificationRow)child;
mTouchingHeadsUpView=mPickedChild.isHeadsUp() && mPickedChild.isPinned();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
mTrackingPointer=event.getPointerId(newIndex);
mInitialTouchX=event.getX(newIndex);
mInitialTouchY=event.getY(newIndex);
}
break;
case MotionEvent.ACTION_MOVE:
final float h=y - mInitialTouchY;
if (Math.abs(h) > mTouchSlop && Math.abs(h) > Math.abs(x - mInitialTouchX)) {
setTrackingHeadsUp(true);
mCollapseSnoozes=h < 0;
mInitialTouchX=x;
mInitialTouchY=y;
int expandedHeight=mPickedChild.getActualHeight();
mPanel.startExpandMotion(x,y,true,expandedHeight);
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mPickedChild != null && mTouchingHeadsUpView) {
if (mHeadsUpManager.shouldSwallowClick(mPickedChild.getStatusBarNotification().getKey())) {
endMotion();
return true;
}
}
endMotion();
break;
}
return false;
}","@Override public boolean onInterceptTouchEvent(MotionEvent event){
  if (!mTouchingHeadsUpView && event.getActionMasked() != MotionEvent.ACTION_DOWN) {
    return false;
  }
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mInitialTouchY=y;
  mInitialTouchX=x;
setTrackingHeadsUp(false);
ExpandableView child=mStackScroller.getChildAtRawPosition(x,y);
mTouchingHeadsUpView=false;
if (child instanceof ExpandableNotificationRow) {
mPickedChild=(ExpandableNotificationRow)child;
mTouchingHeadsUpView=mPickedChild.isHeadsUp() && mPickedChild.isPinned();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
mTrackingPointer=event.getPointerId(newIndex);
mInitialTouchX=event.getX(newIndex);
mInitialTouchY=event.getY(newIndex);
}
break;
case MotionEvent.ACTION_MOVE:
final float h=y - mInitialTouchY;
if (Math.abs(h) > mTouchSlop && Math.abs(h) > Math.abs(x - mInitialTouchX)) {
setTrackingHeadsUp(true);
mCollapseSnoozes=h < 0;
mInitialTouchX=x;
mInitialTouchY=y;
int expandedHeight=mPickedChild.getActualHeight();
mPanel.startExpandMotion(x,y,true,expandedHeight);
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mPickedChild != null && mTouchingHeadsUpView) {
if (mHeadsUpManager.shouldSwallowClick(mPickedChild.getStatusBarNotification().getKey())) {
endMotion();
return true;
}
}
endMotion();
break;
}
return false;
}",0.9991580129104688
195105,"@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}","@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mNotificationPanel.requestLayout();
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
    mStatusBarWindowManager.setForceWindowCollapsed(true);
    mNotificationPanel.post(new Runnable(){
      @Override public void run(){
        mStatusBarWindowManager.setForceWindowCollapsed(false);
      }
    }
);
  }
 else {
    if (!mNotificationPanel.isFullyCollapsed()) {
      mStatusBarWindowManager.setHeadsUpShowing(false);
    }
 else {
      mHeadsUpManager.setHeadsUpGoingAway(true);
      mStackScroller.runAfterAnimationFinished(new Runnable(){
        @Override public void run(){
          if (!mHeadsUpManager.hasPinnedHeadsUp()) {
            mStatusBarWindowManager.setHeadsUpShowing(false);
            mHeadsUpManager.setHeadsUpGoingAway(false);
          }
        }
      }
);
    }
  }
}",0.4540192926045016
195106,"protected PhoneStatusBarView makeStatusBarView(){
  final Context context=mContext;
  Resources res=context.getResources();
  updateDisplaySize();
  updateResources();
  mStatusBarWindow=(StatusBarWindowView)View.inflate(context,R.layout.super_status_bar,null);
  mStatusBarWindow.mService=this;
  mStatusBarWindow.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      checkUserAutohide(v,event);
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        if (mExpandedVisible) {
          animateCollapsePanels();
        }
      }
      return mStatusBarWindow.onTouchEvent(event);
    }
  }
);
  mStatusBarView=(PhoneStatusBarView)mStatusBarWindow.findViewById(R.id.status_bar);
  mStatusBarView.setBar(this);
  PanelHolder holder=(PanelHolder)mStatusBarWindow.findViewById(R.id.panel_holder);
  mStatusBarView.setPanelHolder(holder);
  mNotificationPanel=(NotificationPanelView)mStatusBarWindow.findViewById(R.id.notification_panel);
  mNotificationPanel.setStatusBar(this);
  if (!ActivityManager.isHighEndGfx()) {
    mStatusBarWindow.setBackground(null);
    mNotificationPanel.setBackground(new FastColorDrawable(context.getColor(R.color.notification_panel_solid_background)));
  }
  mHeadsUpManager=new HeadsUpManager(context,mNotificationPanel.getViewTreeObserver());
  mHeadsUpManager.setBar(this);
  mHeadsUpManager.addListener(this);
  mHeadsUpManager.addListener(mNotificationPanel);
  mNotificationPanel.setHeadsUpManager(mHeadsUpManager);
  mNotificationData.setHeadsUpManager(mHeadsUpManager);
  if (MULTIUSER_DEBUG) {
    mNotificationPanelDebugText=(TextView)mNotificationPanel.findViewById(R.id.header_debug_info);
    mNotificationPanelDebugText.setVisibility(View.VISIBLE);
  }
  updateShowSearchHoldoff();
  try {
    boolean showNav=mWindowManagerService.hasNavigationBar();
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showNav);
    if (showNav) {
      mNavigationBarView=(NavigationBarView)View.inflate(context,R.layout.navigation_bar,null);
      mNavigationBarView.setDisabledFlags(mDisabled1);
      mNavigationBarView.setBar(this);
      mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener(){
        @Override public void onVerticalChanged(        boolean isVertical){
          if (mAssistManager != null) {
            mAssistManager.onConfigurationChanged();
          }
          mNotificationPanel.setQsScrimEnabled(!isVertical);
        }
      }
);
      mNavigationBarView.setOnTouchListener(new View.OnTouchListener(){
        @Override public boolean onTouch(        View v,        MotionEvent event){
          checkUserAutohide(v,event);
          return false;
        }
      }
);
    }
  }
 catch (  RemoteException ex) {
  }
  mAssistManager=new AssistManager(this,context);
  mPixelFormat=PixelFormat.OPAQUE;
  mStackScroller=(NotificationStackScrollLayout)mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
  mStackScroller.setLongPressListener(getNotificationLongClicker());
  mStackScroller.setPhoneStatusBar(this);
  mStackScroller.setGroupManager(mGroupManager);
  mStackScroller.setHeadsUpManager(mHeadsUpManager);
  mGroupManager.setOnGroupChangeListener(mStackScroller);
  mKeyguardIconOverflowContainer=(NotificationOverflowContainer)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow,mStackScroller,false);
  mKeyguardIconOverflowContainer.setOnActivatedListener(this);
  mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
  mStackScroller.addView(mKeyguardIconOverflowContainer);
  SpeedBumpView speedBump=(SpeedBumpView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump,mStackScroller,false);
  mStackScroller.setSpeedBumpView(speedBump);
  mEmptyShadeView=(EmptyShadeView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications,mStackScroller,false);
  mStackScroller.setEmptyShadeView(mEmptyShadeView);
  mDismissView=(DismissView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all,mStackScroller,false);
  mDismissView.setOnButtonClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      MetricsLogger.action(mContext,MetricsLogger.ACTION_DISMISS_ALL_NOTES);
      clearAllNotifications();
    }
  }
);
  mStackScroller.setDismissView(mDismissView);
  mExpandedContents=mStackScroller;
  mBackdrop=(BackDropView)mStatusBarWindow.findViewById(R.id.backdrop);
  mBackdropFront=(ImageView)mBackdrop.findViewById(R.id.backdrop_front);
  mBackdropBack=(ImageView)mBackdrop.findViewById(R.id.backdrop_back);
  ScrimView scrimBehind=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_behind);
  ScrimView scrimInFront=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_in_front);
  View headsUpScrim=mStatusBarWindow.findViewById(R.id.heads_up_scrim);
  mScrimController=new ScrimController(scrimBehind,scrimInFront,headsUpScrim,mScrimSrcModeEnabled);
  mHeadsUpManager.addListener(mScrimController);
  mStackScroller.setScrimController(mScrimController);
  mScrimController.setBackDropView(mBackdrop);
  mStatusBarView.setScrimController(mScrimController);
  mDozeScrimController=new DozeScrimController(mScrimController,context);
  mHeader=(StatusBarHeaderView)mStatusBarWindow.findViewById(R.id.header);
  mHeader.setActivityStarter(this);
  mKeyguardStatusBar=(KeyguardStatusBarView)mStatusBarWindow.findViewById(R.id.keyguard_header);
  mKeyguardStatusView=mStatusBarWindow.findViewById(R.id.keyguard_status_view);
  mKeyguardBottomArea=(KeyguardBottomAreaView)mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
  mKeyguardBottomArea.setActivityStarter(this);
  mKeyguardBottomArea.setAssistManager(mAssistManager);
  mKeyguardIndicationController=new KeyguardIndicationController(mContext,(KeyguardIndicationTextView)mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
  mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
  setAreThereNotifications();
  mIconController=new StatusBarIconController(mContext,mStatusBarView,mKeyguardStatusBar,this);
  mHandlerThread=new HandlerThread(TAG,Process.THREAD_PRIORITY_BACKGROUND);
  mHandlerThread.start();
  mLocationController=new LocationControllerImpl(mContext);
  mBatteryController=new BatteryController(mContext);
  mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback(){
    @Override public void onPowerSaveChanged(){
      mHandler.post(mCheckBarModes);
      if (mDozeServiceHost != null) {
        mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
      }
    }
    @Override public void onBatteryLevelChanged(    int level,    boolean pluggedIn,    boolean charging){
    }
  }
);
  mNetworkController=new NetworkControllerImpl(mContext,mHandlerThread.getLooper());
  mHotspotController=new HotspotControllerImpl(mContext);
  mBluetoothController=new BluetoothControllerImpl(mContext,mHandlerThread.getLooper());
  mSecurityController=new SecurityControllerImpl(mContext);
  if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
    mRotationLockController=new RotationLockControllerImpl(mContext);
  }
  mUserInfoController=new UserInfoController(mContext);
  mVolumeComponent=getComponent(VolumeComponent.class);
  if (mVolumeComponent != null) {
    mZenModeController=mVolumeComponent.getZenController();
  }
  mCastController=new CastControllerImpl(mContext);
  final SignalClusterView signalCluster=(SignalClusterView)mStatusBarView.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterKeyguard=(SignalClusterView)mKeyguardStatusBar.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterQs=(SignalClusterView)mHeader.findViewById(R.id.signal_cluster);
  mNetworkController.addSignalCluster(signalCluster);
  mNetworkController.addSignalCluster(signalClusterKeyguard);
  mNetworkController.addSignalCluster(signalClusterQs);
  signalCluster.setSecurityController(mSecurityController);
  signalCluster.setNetworkController(mNetworkController);
  signalClusterKeyguard.setSecurityController(mSecurityController);
  signalClusterKeyguard.setNetworkController(mNetworkController);
  signalClusterQs.setSecurityController(mSecurityController);
  signalClusterQs.setNetworkController(mNetworkController);
  final boolean isAPhone=mNetworkController.hasVoiceCallingFeature();
  if (isAPhone) {
    mNetworkController.addEmergencyListener(new NetworkControllerImpl.EmergencyListener(){
      @Override public void setEmergencyCallsOnly(      boolean emergencyOnly){
        mHeader.setShowEmergencyCallsOnly(emergencyOnly);
      }
    }
);
  }
  mFlashlightController=new FlashlightController(mContext);
  mKeyguardBottomArea.setFlashlightController(mFlashlightController);
  mKeyguardBottomArea.setPhoneStatusBar(this);
  mAccessibilityController=new AccessibilityController(mContext);
  mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
  mNextAlarmController=new NextAlarmController(mContext);
  mKeyguardMonitor=new KeyguardMonitor();
  if (UserSwitcherController.isUserSwitcherAvailable(UserManager.get(mContext))) {
    mUserSwitcherController=new UserSwitcherController(mContext,mKeyguardMonitor);
  }
  mKeyguardUserSwitcher=new KeyguardUserSwitcher(mContext,(ViewStub)mStatusBarWindow.findViewById(R.id.keyguard_user_switcher),mKeyguardStatusBar,mNotificationPanel,mUserSwitcherController);
  mQSPanel=(QSPanel)mStatusBarWindow.findViewById(R.id.quick_settings_panel);
  if (mQSPanel != null) {
    final QSTileHost qsh=new QSTileHost(mContext,this,mBluetoothController,mLocationController,mRotationLockController,mNetworkController,mZenModeController,mHotspotController,mCastController,mFlashlightController,mUserSwitcherController,mKeyguardMonitor,mSecurityController);
    mQSPanel.setHost(qsh);
    mQSPanel.setTiles(qsh.getTiles());
    mBrightnessMirrorController=new BrightnessMirrorController(mStatusBarWindow);
    mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
    mHeader.setQSPanel(mQSPanel);
    qsh.setCallback(new QSTileHost.Callback(){
      @Override public void onTilesChanged(){
        mQSPanel.setTiles(qsh.getTiles());
      }
    }
);
  }
  mHeader.setUserInfoController(mUserInfoController);
  mKeyguardStatusBar.setUserInfoController(mUserInfoController);
  mUserInfoController.reloadUserInfo();
  mHeader.setBatteryController(mBatteryController);
  ((BatteryMeterView)mStatusBarView.findViewById(R.id.battery)).setBatteryController(mBatteryController);
  mKeyguardStatusBar.setBatteryController(mBatteryController);
  mHeader.setNextAlarmController(mNextAlarmController);
  PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mBroadcastReceiver.onReceive(mContext,new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(Intent.ACTION_SCREEN_ON);
  if (DEBUG_MEDIA_FAKE_ARTWORK) {
    filter.addAction(""String_Node_Str"");
  }
  filter.addAction(ACTION_DEMO);
  context.registerReceiverAsUser(mBroadcastReceiver,UserHandle.ALL,filter,null,null);
  resetUserSetupObserver();
  ThreadedRenderer.overrideProperty(""String_Node_Str"",""String_Node_Str"");
  ThreadedRenderer.overrideProperty(""String_Node_Str"",String.valueOf(1.5f));
  return mStatusBarView;
}","protected PhoneStatusBarView makeStatusBarView(){
  final Context context=mContext;
  Resources res=context.getResources();
  updateDisplaySize();
  updateResources();
  mStatusBarWindow=(StatusBarWindowView)View.inflate(context,R.layout.super_status_bar,null);
  mStatusBarWindow.mService=this;
  mStatusBarWindow.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      checkUserAutohide(v,event);
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        if (mExpandedVisible) {
          animateCollapsePanels();
        }
      }
      return mStatusBarWindow.onTouchEvent(event);
    }
  }
);
  mStatusBarView=(PhoneStatusBarView)mStatusBarWindow.findViewById(R.id.status_bar);
  mStatusBarView.setBar(this);
  PanelHolder holder=(PanelHolder)mStatusBarWindow.findViewById(R.id.panel_holder);
  mStatusBarView.setPanelHolder(holder);
  mNotificationPanel=(NotificationPanelView)mStatusBarWindow.findViewById(R.id.notification_panel);
  mNotificationPanel.setStatusBar(this);
  if (!ActivityManager.isHighEndGfx()) {
    mStatusBarWindow.setBackground(null);
    mNotificationPanel.setBackground(new FastColorDrawable(context.getColor(R.color.notification_panel_solid_background)));
  }
  mHeadsUpManager=new HeadsUpManager(context,mStatusBarWindow);
  mHeadsUpManager.setBar(this);
  mHeadsUpManager.addListener(this);
  mHeadsUpManager.addListener(mNotificationPanel);
  mNotificationPanel.setHeadsUpManager(mHeadsUpManager);
  mNotificationData.setHeadsUpManager(mHeadsUpManager);
  if (MULTIUSER_DEBUG) {
    mNotificationPanelDebugText=(TextView)mNotificationPanel.findViewById(R.id.header_debug_info);
    mNotificationPanelDebugText.setVisibility(View.VISIBLE);
  }
  updateShowSearchHoldoff();
  try {
    boolean showNav=mWindowManagerService.hasNavigationBar();
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showNav);
    if (showNav) {
      mNavigationBarView=(NavigationBarView)View.inflate(context,R.layout.navigation_bar,null);
      mNavigationBarView.setDisabledFlags(mDisabled1);
      mNavigationBarView.setBar(this);
      mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener(){
        @Override public void onVerticalChanged(        boolean isVertical){
          if (mAssistManager != null) {
            mAssistManager.onConfigurationChanged();
          }
          mNotificationPanel.setQsScrimEnabled(!isVertical);
        }
      }
);
      mNavigationBarView.setOnTouchListener(new View.OnTouchListener(){
        @Override public boolean onTouch(        View v,        MotionEvent event){
          checkUserAutohide(v,event);
          return false;
        }
      }
);
    }
  }
 catch (  RemoteException ex) {
  }
  mAssistManager=new AssistManager(this,context);
  mPixelFormat=PixelFormat.OPAQUE;
  mStackScroller=(NotificationStackScrollLayout)mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
  mStackScroller.setLongPressListener(getNotificationLongClicker());
  mStackScroller.setPhoneStatusBar(this);
  mStackScroller.setGroupManager(mGroupManager);
  mStackScroller.setHeadsUpManager(mHeadsUpManager);
  mGroupManager.setOnGroupChangeListener(mStackScroller);
  mKeyguardIconOverflowContainer=(NotificationOverflowContainer)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow,mStackScroller,false);
  mKeyguardIconOverflowContainer.setOnActivatedListener(this);
  mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
  mStackScroller.addView(mKeyguardIconOverflowContainer);
  SpeedBumpView speedBump=(SpeedBumpView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump,mStackScroller,false);
  mStackScroller.setSpeedBumpView(speedBump);
  mEmptyShadeView=(EmptyShadeView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications,mStackScroller,false);
  mStackScroller.setEmptyShadeView(mEmptyShadeView);
  mDismissView=(DismissView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all,mStackScroller,false);
  mDismissView.setOnButtonClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      MetricsLogger.action(mContext,MetricsLogger.ACTION_DISMISS_ALL_NOTES);
      clearAllNotifications();
    }
  }
);
  mStackScroller.setDismissView(mDismissView);
  mExpandedContents=mStackScroller;
  mBackdrop=(BackDropView)mStatusBarWindow.findViewById(R.id.backdrop);
  mBackdropFront=(ImageView)mBackdrop.findViewById(R.id.backdrop_front);
  mBackdropBack=(ImageView)mBackdrop.findViewById(R.id.backdrop_back);
  ScrimView scrimBehind=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_behind);
  ScrimView scrimInFront=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_in_front);
  View headsUpScrim=mStatusBarWindow.findViewById(R.id.heads_up_scrim);
  mScrimController=new ScrimController(scrimBehind,scrimInFront,headsUpScrim,mScrimSrcModeEnabled);
  mHeadsUpManager.addListener(mScrimController);
  mStackScroller.setScrimController(mScrimController);
  mScrimController.setBackDropView(mBackdrop);
  mStatusBarView.setScrimController(mScrimController);
  mDozeScrimController=new DozeScrimController(mScrimController,context);
  mHeader=(StatusBarHeaderView)mStatusBarWindow.findViewById(R.id.header);
  mHeader.setActivityStarter(this);
  mKeyguardStatusBar=(KeyguardStatusBarView)mStatusBarWindow.findViewById(R.id.keyguard_header);
  mKeyguardStatusView=mStatusBarWindow.findViewById(R.id.keyguard_status_view);
  mKeyguardBottomArea=(KeyguardBottomAreaView)mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
  mKeyguardBottomArea.setActivityStarter(this);
  mKeyguardBottomArea.setAssistManager(mAssistManager);
  mKeyguardIndicationController=new KeyguardIndicationController(mContext,(KeyguardIndicationTextView)mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
  mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
  setAreThereNotifications();
  mIconController=new StatusBarIconController(mContext,mStatusBarView,mKeyguardStatusBar,this);
  mHandlerThread=new HandlerThread(TAG,Process.THREAD_PRIORITY_BACKGROUND);
  mHandlerThread.start();
  mLocationController=new LocationControllerImpl(mContext);
  mBatteryController=new BatteryController(mContext);
  mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback(){
    @Override public void onPowerSaveChanged(){
      mHandler.post(mCheckBarModes);
      if (mDozeServiceHost != null) {
        mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
      }
    }
    @Override public void onBatteryLevelChanged(    int level,    boolean pluggedIn,    boolean charging){
    }
  }
);
  mNetworkController=new NetworkControllerImpl(mContext,mHandlerThread.getLooper());
  mHotspotController=new HotspotControllerImpl(mContext);
  mBluetoothController=new BluetoothControllerImpl(mContext,mHandlerThread.getLooper());
  mSecurityController=new SecurityControllerImpl(mContext);
  if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
    mRotationLockController=new RotationLockControllerImpl(mContext);
  }
  mUserInfoController=new UserInfoController(mContext);
  mVolumeComponent=getComponent(VolumeComponent.class);
  if (mVolumeComponent != null) {
    mZenModeController=mVolumeComponent.getZenController();
  }
  mCastController=new CastControllerImpl(mContext);
  final SignalClusterView signalCluster=(SignalClusterView)mStatusBarView.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterKeyguard=(SignalClusterView)mKeyguardStatusBar.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterQs=(SignalClusterView)mHeader.findViewById(R.id.signal_cluster);
  mNetworkController.addSignalCluster(signalCluster);
  mNetworkController.addSignalCluster(signalClusterKeyguard);
  mNetworkController.addSignalCluster(signalClusterQs);
  signalCluster.setSecurityController(mSecurityController);
  signalCluster.setNetworkController(mNetworkController);
  signalClusterKeyguard.setSecurityController(mSecurityController);
  signalClusterKeyguard.setNetworkController(mNetworkController);
  signalClusterQs.setSecurityController(mSecurityController);
  signalClusterQs.setNetworkController(mNetworkController);
  final boolean isAPhone=mNetworkController.hasVoiceCallingFeature();
  if (isAPhone) {
    mNetworkController.addEmergencyListener(new NetworkControllerImpl.EmergencyListener(){
      @Override public void setEmergencyCallsOnly(      boolean emergencyOnly){
        mHeader.setShowEmergencyCallsOnly(emergencyOnly);
      }
    }
);
  }
  mFlashlightController=new FlashlightController(mContext);
  mKeyguardBottomArea.setFlashlightController(mFlashlightController);
  mKeyguardBottomArea.setPhoneStatusBar(this);
  mAccessibilityController=new AccessibilityController(mContext);
  mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
  mNextAlarmController=new NextAlarmController(mContext);
  mKeyguardMonitor=new KeyguardMonitor();
  if (UserSwitcherController.isUserSwitcherAvailable(UserManager.get(mContext))) {
    mUserSwitcherController=new UserSwitcherController(mContext,mKeyguardMonitor);
  }
  mKeyguardUserSwitcher=new KeyguardUserSwitcher(mContext,(ViewStub)mStatusBarWindow.findViewById(R.id.keyguard_user_switcher),mKeyguardStatusBar,mNotificationPanel,mUserSwitcherController);
  mQSPanel=(QSPanel)mStatusBarWindow.findViewById(R.id.quick_settings_panel);
  if (mQSPanel != null) {
    final QSTileHost qsh=new QSTileHost(mContext,this,mBluetoothController,mLocationController,mRotationLockController,mNetworkController,mZenModeController,mHotspotController,mCastController,mFlashlightController,mUserSwitcherController,mKeyguardMonitor,mSecurityController);
    mQSPanel.setHost(qsh);
    mQSPanel.setTiles(qsh.getTiles());
    mBrightnessMirrorController=new BrightnessMirrorController(mStatusBarWindow);
    mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
    mHeader.setQSPanel(mQSPanel);
    qsh.setCallback(new QSTileHost.Callback(){
      @Override public void onTilesChanged(){
        mQSPanel.setTiles(qsh.getTiles());
      }
    }
);
  }
  mHeader.setUserInfoController(mUserInfoController);
  mKeyguardStatusBar.setUserInfoController(mUserInfoController);
  mUserInfoController.reloadUserInfo();
  mHeader.setBatteryController(mBatteryController);
  ((BatteryMeterView)mStatusBarView.findViewById(R.id.battery)).setBatteryController(mBatteryController);
  mKeyguardStatusBar.setBatteryController(mBatteryController);
  mHeader.setNextAlarmController(mNextAlarmController);
  PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mBroadcastReceiver.onReceive(mContext,new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(Intent.ACTION_SCREEN_ON);
  if (DEBUG_MEDIA_FAKE_ARTWORK) {
    filter.addAction(""String_Node_Str"");
  }
  filter.addAction(ACTION_DEMO);
  context.registerReceiverAsUser(mBroadcastReceiver,UserHandle.ALL,filter,null,null);
  resetUserSetupObserver();
  ThreadedRenderer.overrideProperty(""String_Node_Str"",""String_Node_Str"");
  ThreadedRenderer.overrideProperty(""String_Node_Str"",String.valueOf(1.5f));
  return mStatusBarView;
}",0.99765726681128
195107,"private void updateHeadsUpScrim(boolean animate){
  float alpha=calculateHeadsUpAlpha();
  ValueAnimator previousAnimator=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_KEY_ANIM);
  float animEndValue=-1;
  if (previousAnimator != null) {
    if (animate || alpha == mCurrentHeadsUpAlpha) {
      previousAnimator.cancel();
    }
    animEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
  }
  if (alpha != mCurrentHeadsUpAlpha && alpha != animEndValue) {
    if (animate) {
      startScrimAnimation(mHeadsUpScrim,alpha);
      mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,mCurrentHeadsUpAlpha);
      mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
    }
 else {
      if (previousAnimator != null) {
        float previousStartValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
        float previousEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
        PropertyValuesHolder[] values=previousAnimator.getValues();
        float relativeDiff=alpha - previousEndValue;
        float newStartValue=previousStartValue + relativeDiff;
        values[0].setFloatValues(newStartValue,alpha);
        mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,newStartValue);
        mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
        previousAnimator.setCurrentPlayTime(previousAnimator.getCurrentPlayTime());
      }
 else {
        setCurrentScrimAlpha(mHeadsUpScrim,alpha);
        updateScrimColor(mHeadsUpScrim);
      }
    }
  }
}","private void updateHeadsUpScrim(boolean animate){
  float alpha=calculateHeadsUpAlpha();
  ValueAnimator previousAnimator=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_KEY_ANIM);
  float animEndValue=-1;
  if (previousAnimator != null) {
    if (animate || alpha == mCurrentHeadsUpAlpha) {
      previousAnimator.cancel();
    }
 else {
      animEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
    }
  }
  if (alpha != mCurrentHeadsUpAlpha && alpha != animEndValue) {
    if (animate) {
      startScrimAnimation(mHeadsUpScrim,alpha);
      mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,mCurrentHeadsUpAlpha);
      mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
    }
 else {
      if (previousAnimator != null) {
        float previousStartValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
        float previousEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
        PropertyValuesHolder[] values=previousAnimator.getValues();
        float relativeDiff=alpha - previousEndValue;
        float newStartValue=previousStartValue + relativeDiff;
        values[0].setFloatValues(newStartValue,alpha);
        mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,newStartValue);
        mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
        previousAnimator.setCurrentPlayTime(previousAnimator.getCurrentPlayTime());
      }
 else {
        setCurrentScrimAlpha(mHeadsUpScrim,alpha);
        updateScrimColor(mHeadsUpScrim);
      }
    }
  }
}",0.9919946631087392
195108,"private void applyHeight(State state){
  boolean expanded=state.isKeyguardShowingAndNotOccluded() || state.statusBarExpanded || state.keyguardFadingAway|| state.bouncerShowing|| state.headsUpShowing;
  if (expanded) {
    mLpChanged.height=ViewGroup.LayoutParams.MATCH_PARENT;
  }
 else {
    mLpChanged.height=mBarHeight;
  }
}","private void applyHeight(State state){
  boolean expanded=!state.forceCollapsed && (state.isKeyguardShowingAndNotOccluded() || state.statusBarExpanded || state.keyguardFadingAway|| state.bouncerShowing|| state.headsUpShowing);
  if (expanded) {
    mLpChanged.height=ViewGroup.LayoutParams.MATCH_PARENT;
  }
 else {
    mLpChanged.height=mBarHeight;
  }
}",0.9604685212298684
195109,"public void setIsExpanded(boolean isExpanded){
  if (isExpanded != mIsExpanded) {
    mIsExpanded=isExpanded;
    if (isExpanded) {
      unpinAll();
    }
  }
}","public void setIsExpanded(boolean isExpanded){
  if (isExpanded != mIsExpanded) {
    mIsExpanded=isExpanded;
    if (isExpanded) {
      unpinAll();
      mWaitingOnCollapseWhenGoingAway=false;
      mHeadsUpGoingAway=false;
      updateTouchableRegionListener();
    }
  }
}",0.7368421052631579
195110,"private void updatePinnedMode(){
  boolean hasPinnedNotification=hasPinnedNotificationInternal();
  if (hasPinnedNotification == mHasPinnedNotification) {
    return;
  }
  mHasPinnedNotification=hasPinnedNotification;
  for (  OnHeadsUpChangedListener listener : mListeners) {
    listener.onHeadsUpPinnedModeChanged(hasPinnedNotification);
  }
}","private void updatePinnedMode(){
  boolean hasPinnedNotification=hasPinnedNotificationInternal();
  if (hasPinnedNotification == mHasPinnedNotification) {
    return;
  }
  mHasPinnedNotification=hasPinnedNotification;
  updateTouchableRegionListener();
  for (  OnHeadsUpChangedListener listener : mListeners) {
    listener.onHeadsUpPinnedModeChanged(hasPinnedNotification);
  }
}",0.9519890260631
195111,"public HeadsUpManager(final Context context,ViewTreeObserver observer){
  Resources resources=context.getResources();
  mTouchAcceptanceDelay=resources.getInteger(R.integer.touch_acceptance_delay);
  mSnoozedPackages=new ArrayMap<>();
  mDefaultSnoozeLengthMs=resources.getInteger(R.integer.heads_up_default_snooze_length_ms);
  mSnoozeLengthMs=mDefaultSnoozeLengthMs;
  mMinimumDisplayTime=resources.getInteger(R.integer.heads_up_notification_minimum_time);
  mHeadsUpNotificationDecay=resources.getInteger(R.integer.heads_up_notification_decay);
  mClock=new Clock();
  mSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,mDefaultSnoozeLengthMs);
  mSettingsObserver=new ContentObserver(mHandler){
    @Override public void onChange(    boolean selfChange){
      final int packageSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,-1);
      if (packageSnoozeLengthMs > -1 && packageSnoozeLengthMs != mSnoozeLengthMs) {
        mSnoozeLengthMs=packageSnoozeLengthMs;
        if (DEBUG)         Log.v(TAG,""String_Node_Str"" + mSnoozeLengthMs);
      }
    }
  }
;
  context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(SETTING_HEADS_UP_SNOOZE_LENGTH_MS),false,mSettingsObserver);
  observer.addOnComputeInternalInsetsListener(this);
}","public HeadsUpManager(final Context context,View statusBarWindowView){
  Resources resources=context.getResources();
  mTouchAcceptanceDelay=resources.getInteger(R.integer.touch_acceptance_delay);
  mSnoozedPackages=new ArrayMap<>();
  mDefaultSnoozeLengthMs=resources.getInteger(R.integer.heads_up_default_snooze_length_ms);
  mSnoozeLengthMs=mDefaultSnoozeLengthMs;
  mMinimumDisplayTime=resources.getInteger(R.integer.heads_up_notification_minimum_time);
  mHeadsUpNotificationDecay=resources.getInteger(R.integer.heads_up_notification_decay);
  mClock=new Clock();
  mSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,mDefaultSnoozeLengthMs);
  mSettingsObserver=new ContentObserver(mHandler){
    @Override public void onChange(    boolean selfChange){
      final int packageSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,-1);
      if (packageSnoozeLengthMs > -1 && packageSnoozeLengthMs != mSnoozeLengthMs) {
        mSnoozeLengthMs=packageSnoozeLengthMs;
        if (DEBUG)         Log.v(TAG,""String_Node_Str"" + mSnoozeLengthMs);
      }
    }
  }
;
  context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(SETTING_HEADS_UP_SNOOZE_LENGTH_MS),false,mSettingsObserver);
  mStatusBarWindowView=statusBarWindowView;
  mStatusBarHeight=resources.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
}",0.9196301564722618
195112,"public void onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo info){
  if (!mIsExpanded && mHasPinnedNotification) {
    int minX=Integer.MAX_VALUE;
    int maxX=0;
    int minY=Integer.MAX_VALUE;
    int maxY=0;
    for (    HeadsUpEntry entry : mSortedEntries) {
      ExpandableNotificationRow row=entry.entry.row;
      if (row.isPinned()) {
        row.getLocationOnScreen(mTmpTwoArray);
        minX=Math.min(minX,mTmpTwoArray[0]);
        minY=Math.min(minY,0);
        maxX=Math.max(maxX,mTmpTwoArray[0] + row.getWidth());
        maxY=Math.max(maxY,row.getHeadsUpHeight());
      }
    }
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(minX,minY,maxX,maxY);
  }
}","public void onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo info){
  if (mHasPinnedNotification) {
    int minX=Integer.MAX_VALUE;
    int maxX=0;
    int minY=Integer.MAX_VALUE;
    int maxY=0;
    for (    HeadsUpEntry entry : mSortedEntries) {
      ExpandableNotificationRow row=entry.entry.row;
      if (row.isPinned()) {
        row.getLocationOnScreen(mTmpTwoArray);
        minX=Math.min(minX,mTmpTwoArray[0]);
        minY=Math.min(minY,0);
        maxX=Math.max(maxX,mTmpTwoArray[0] + row.getWidth());
        maxY=Math.max(maxY,row.getHeadsUpHeight());
      }
    }
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(minX,minY,maxX,maxY);
  }
 else   if (mHeadsUpGoingAway || mWaitingOnCollapseWhenGoingAway) {
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(0,0,mStatusBarWindowView.getWidth(),mStatusBarHeight);
  }
}",0.8490783410138248
195113,"@Override public boolean onInterceptTouchEvent(MotionEvent event){
  if (!mTouchingHeadsUpView && event.getActionMasked() != MotionEvent.ACTION_DOWN) {
    return false;
  }
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mInitialTouchY=y;
  mInitialTouchX=x;
setTrackingHeadsUp(false);
ExpandableView child=mStackScroller.getChildAtPosition(x,y);
mTouchingHeadsUpView=false;
if (child instanceof ExpandableNotificationRow) {
mPickedChild=(ExpandableNotificationRow)child;
mTouchingHeadsUpView=mPickedChild.isHeadsUp() && mPickedChild.isPinned();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
mTrackingPointer=event.getPointerId(newIndex);
mInitialTouchX=event.getX(newIndex);
mInitialTouchY=event.getY(newIndex);
}
break;
case MotionEvent.ACTION_MOVE:
final float h=y - mInitialTouchY;
if (Math.abs(h) > mTouchSlop && Math.abs(h) > Math.abs(x - mInitialTouchX)) {
setTrackingHeadsUp(true);
mCollapseSnoozes=h < 0;
mInitialTouchX=x;
mInitialTouchY=y;
int expandedHeight=mPickedChild.getActualHeight();
mPanel.startExpandMotion(x,y,true,expandedHeight);
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mPickedChild != null && mTouchingHeadsUpView) {
if (mHeadsUpManager.shouldSwallowClick(mPickedChild.getStatusBarNotification().getKey())) {
endMotion();
return true;
}
}
endMotion();
break;
}
return false;
}","@Override public boolean onInterceptTouchEvent(MotionEvent event){
  if (!mTouchingHeadsUpView && event.getActionMasked() != MotionEvent.ACTION_DOWN) {
    return false;
  }
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mInitialTouchY=y;
  mInitialTouchX=x;
setTrackingHeadsUp(false);
ExpandableView child=mStackScroller.getChildAtRawPosition(x,y);
mTouchingHeadsUpView=false;
if (child instanceof ExpandableNotificationRow) {
mPickedChild=(ExpandableNotificationRow)child;
mTouchingHeadsUpView=mPickedChild.isHeadsUp() && mPickedChild.isPinned();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
mTrackingPointer=event.getPointerId(newIndex);
mInitialTouchX=event.getX(newIndex);
mInitialTouchY=event.getY(newIndex);
}
break;
case MotionEvent.ACTION_MOVE:
final float h=y - mInitialTouchY;
if (Math.abs(h) > mTouchSlop && Math.abs(h) > Math.abs(x - mInitialTouchX)) {
setTrackingHeadsUp(true);
mCollapseSnoozes=h < 0;
mInitialTouchX=x;
mInitialTouchY=y;
int expandedHeight=mPickedChild.getActualHeight();
mPanel.startExpandMotion(x,y,true,expandedHeight);
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mPickedChild != null && mTouchingHeadsUpView) {
if (mHeadsUpManager.shouldSwallowClick(mPickedChild.getStatusBarNotification().getKey())) {
endMotion();
return true;
}
}
endMotion();
break;
}
return false;
}",0.9991580129104688
195114,"@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}","@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mNotificationPanel.requestLayout();
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
    mStatusBarWindowManager.setForceWindowCollapsed(true);
    mNotificationPanel.post(new Runnable(){
      @Override public void run(){
        mStatusBarWindowManager.setForceWindowCollapsed(false);
      }
    }
);
  }
 else {
    if (!mNotificationPanel.isFullyCollapsed()) {
      mStatusBarWindowManager.setHeadsUpShowing(false);
    }
 else {
      mHeadsUpManager.setHeadsUpGoingAway(true);
      mStackScroller.runAfterAnimationFinished(new Runnable(){
        @Override public void run(){
          if (!mHeadsUpManager.hasPinnedHeadsUp()) {
            mStatusBarWindowManager.setHeadsUpShowing(false);
            mHeadsUpManager.setHeadsUpGoingAway(false);
          }
        }
      }
);
    }
  }
}",0.4540192926045016
195115,"protected PhoneStatusBarView makeStatusBarView(){
  final Context context=mContext;
  Resources res=context.getResources();
  updateDisplaySize();
  updateResources();
  mStatusBarWindow=(StatusBarWindowView)View.inflate(context,R.layout.super_status_bar,null);
  mStatusBarWindow.mService=this;
  mStatusBarWindow.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      checkUserAutohide(v,event);
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        if (mExpandedVisible) {
          animateCollapsePanels();
        }
      }
      return mStatusBarWindow.onTouchEvent(event);
    }
  }
);
  mStatusBarView=(PhoneStatusBarView)mStatusBarWindow.findViewById(R.id.status_bar);
  mStatusBarView.setBar(this);
  PanelHolder holder=(PanelHolder)mStatusBarWindow.findViewById(R.id.panel_holder);
  mStatusBarView.setPanelHolder(holder);
  mNotificationPanel=(NotificationPanelView)mStatusBarWindow.findViewById(R.id.notification_panel);
  mNotificationPanel.setStatusBar(this);
  if (!ActivityManager.isHighEndGfx()) {
    mStatusBarWindow.setBackground(null);
    mNotificationPanel.setBackground(new FastColorDrawable(context.getColor(R.color.notification_panel_solid_background)));
  }
  mHeadsUpManager=new HeadsUpManager(context,mNotificationPanel.getViewTreeObserver());
  mHeadsUpManager.setBar(this);
  mHeadsUpManager.addListener(this);
  mHeadsUpManager.addListener(mNotificationPanel);
  mNotificationPanel.setHeadsUpManager(mHeadsUpManager);
  mNotificationData.setHeadsUpManager(mHeadsUpManager);
  if (MULTIUSER_DEBUG) {
    mNotificationPanelDebugText=(TextView)mNotificationPanel.findViewById(R.id.header_debug_info);
    mNotificationPanelDebugText.setVisibility(View.VISIBLE);
  }
  updateShowSearchHoldoff();
  try {
    boolean showNav=mWindowManagerService.hasNavigationBar();
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showNav);
    if (showNav) {
      mNavigationBarView=(NavigationBarView)View.inflate(context,R.layout.navigation_bar,null);
      mNavigationBarView.setDisabledFlags(mDisabled1);
      mNavigationBarView.setBar(this);
      mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener(){
        @Override public void onVerticalChanged(        boolean isVertical){
          if (mAssistManager != null) {
            mAssistManager.onConfigurationChanged();
          }
          mNotificationPanel.setQsScrimEnabled(!isVertical);
        }
      }
);
      mNavigationBarView.setOnTouchListener(new View.OnTouchListener(){
        @Override public boolean onTouch(        View v,        MotionEvent event){
          checkUserAutohide(v,event);
          return false;
        }
      }
);
    }
  }
 catch (  RemoteException ex) {
  }
  mAssistManager=new AssistManager(this,context);
  mPixelFormat=PixelFormat.OPAQUE;
  mStackScroller=(NotificationStackScrollLayout)mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
  mStackScroller.setLongPressListener(getNotificationLongClicker());
  mStackScroller.setPhoneStatusBar(this);
  mStackScroller.setGroupManager(mGroupManager);
  mStackScroller.setHeadsUpManager(mHeadsUpManager);
  mGroupManager.setOnGroupChangeListener(mStackScroller);
  mKeyguardIconOverflowContainer=(NotificationOverflowContainer)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow,mStackScroller,false);
  mKeyguardIconOverflowContainer.setOnActivatedListener(this);
  mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
  mStackScroller.addView(mKeyguardIconOverflowContainer);
  SpeedBumpView speedBump=(SpeedBumpView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump,mStackScroller,false);
  mStackScroller.setSpeedBumpView(speedBump);
  mEmptyShadeView=(EmptyShadeView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications,mStackScroller,false);
  mStackScroller.setEmptyShadeView(mEmptyShadeView);
  mDismissView=(DismissView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all,mStackScroller,false);
  mDismissView.setOnButtonClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      MetricsLogger.action(mContext,MetricsLogger.ACTION_DISMISS_ALL_NOTES);
      clearAllNotifications();
    }
  }
);
  mStackScroller.setDismissView(mDismissView);
  mExpandedContents=mStackScroller;
  mBackdrop=(BackDropView)mStatusBarWindow.findViewById(R.id.backdrop);
  mBackdropFront=(ImageView)mBackdrop.findViewById(R.id.backdrop_front);
  mBackdropBack=(ImageView)mBackdrop.findViewById(R.id.backdrop_back);
  ScrimView scrimBehind=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_behind);
  ScrimView scrimInFront=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_in_front);
  View headsUpScrim=mStatusBarWindow.findViewById(R.id.heads_up_scrim);
  mScrimController=new ScrimController(scrimBehind,scrimInFront,headsUpScrim,mScrimSrcModeEnabled);
  mHeadsUpManager.addListener(mScrimController);
  mStackScroller.setScrimController(mScrimController);
  mScrimController.setBackDropView(mBackdrop);
  mStatusBarView.setScrimController(mScrimController);
  mDozeScrimController=new DozeScrimController(mScrimController,context);
  mHeader=(StatusBarHeaderView)mStatusBarWindow.findViewById(R.id.header);
  mHeader.setActivityStarter(this);
  mKeyguardStatusBar=(KeyguardStatusBarView)mStatusBarWindow.findViewById(R.id.keyguard_header);
  mKeyguardStatusView=mStatusBarWindow.findViewById(R.id.keyguard_status_view);
  mKeyguardBottomArea=(KeyguardBottomAreaView)mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
  mKeyguardBottomArea.setActivityStarter(this);
  mKeyguardBottomArea.setAssistManager(mAssistManager);
  mKeyguardIndicationController=new KeyguardIndicationController(mContext,(KeyguardIndicationTextView)mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
  mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
  setAreThereNotifications();
  mIconController=new StatusBarIconController(mContext,mStatusBarView,mKeyguardStatusBar,this);
  mHandlerThread=new HandlerThread(TAG,Process.THREAD_PRIORITY_BACKGROUND);
  mHandlerThread.start();
  mLocationController=new LocationControllerImpl(mContext);
  mBatteryController=new BatteryController(mContext);
  mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback(){
    @Override public void onPowerSaveChanged(){
      mHandler.post(mCheckBarModes);
      if (mDozeServiceHost != null) {
        mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
      }
    }
    @Override public void onBatteryLevelChanged(    int level,    boolean pluggedIn,    boolean charging){
    }
  }
);
  mNetworkController=new NetworkControllerImpl(mContext,mHandlerThread.getLooper());
  mHotspotController=new HotspotControllerImpl(mContext);
  mBluetoothController=new BluetoothControllerImpl(mContext,mHandlerThread.getLooper());
  mSecurityController=new SecurityControllerImpl(mContext);
  if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
    mRotationLockController=new RotationLockControllerImpl(mContext);
  }
  mUserInfoController=new UserInfoController(mContext);
  mVolumeComponent=getComponent(VolumeComponent.class);
  if (mVolumeComponent != null) {
    mZenModeController=mVolumeComponent.getZenController();
  }
  mCastController=new CastControllerImpl(mContext);
  final SignalClusterView signalCluster=(SignalClusterView)mStatusBarView.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterKeyguard=(SignalClusterView)mKeyguardStatusBar.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterQs=(SignalClusterView)mHeader.findViewById(R.id.signal_cluster);
  mNetworkController.addSignalCluster(signalCluster);
  mNetworkController.addSignalCluster(signalClusterKeyguard);
  mNetworkController.addSignalCluster(signalClusterQs);
  signalCluster.setSecurityController(mSecurityController);
  signalCluster.setNetworkController(mNetworkController);
  signalClusterKeyguard.setSecurityController(mSecurityController);
  signalClusterKeyguard.setNetworkController(mNetworkController);
  signalClusterQs.setSecurityController(mSecurityController);
  signalClusterQs.setNetworkController(mNetworkController);
  final boolean isAPhone=mNetworkController.hasVoiceCallingFeature();
  if (isAPhone) {
    mNetworkController.addEmergencyListener(new NetworkControllerImpl.EmergencyListener(){
      @Override public void setEmergencyCallsOnly(      boolean emergencyOnly){
        mHeader.setShowEmergencyCallsOnly(emergencyOnly);
      }
    }
);
  }
  mFlashlightController=new FlashlightController(mContext);
  mKeyguardBottomArea.setFlashlightController(mFlashlightController);
  mKeyguardBottomArea.setPhoneStatusBar(this);
  mAccessibilityController=new AccessibilityController(mContext);
  mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
  mNextAlarmController=new NextAlarmController(mContext);
  mKeyguardMonitor=new KeyguardMonitor();
  if (UserSwitcherController.isUserSwitcherAvailable(UserManager.get(mContext))) {
    mUserSwitcherController=new UserSwitcherController(mContext,mKeyguardMonitor);
  }
  mKeyguardUserSwitcher=new KeyguardUserSwitcher(mContext,(ViewStub)mStatusBarWindow.findViewById(R.id.keyguard_user_switcher),mKeyguardStatusBar,mNotificationPanel,mUserSwitcherController);
  mQSPanel=(QSPanel)mStatusBarWindow.findViewById(R.id.quick_settings_panel);
  if (mQSPanel != null) {
    final QSTileHost qsh=new QSTileHost(mContext,this,mBluetoothController,mLocationController,mRotationLockController,mNetworkController,mZenModeController,mHotspotController,mCastController,mFlashlightController,mUserSwitcherController,mKeyguardMonitor,mSecurityController);
    mQSPanel.setHost(qsh);
    mQSPanel.setTiles(qsh.getTiles());
    mBrightnessMirrorController=new BrightnessMirrorController(mStatusBarWindow);
    mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
    mHeader.setQSPanel(mQSPanel);
    qsh.setCallback(new QSTileHost.Callback(){
      @Override public void onTilesChanged(){
        mQSPanel.setTiles(qsh.getTiles());
      }
    }
);
  }
  mHeader.setUserInfoController(mUserInfoController);
  mKeyguardStatusBar.setUserInfoController(mUserInfoController);
  mUserInfoController.reloadUserInfo();
  mHeader.setBatteryController(mBatteryController);
  ((BatteryMeterView)mStatusBarView.findViewById(R.id.battery)).setBatteryController(mBatteryController);
  mKeyguardStatusBar.setBatteryController(mBatteryController);
  mHeader.setNextAlarmController(mNextAlarmController);
  PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mBroadcastReceiver.onReceive(mContext,new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(Intent.ACTION_SCREEN_ON);
  if (DEBUG_MEDIA_FAKE_ARTWORK) {
    filter.addAction(""String_Node_Str"");
  }
  filter.addAction(ACTION_DEMO);
  context.registerReceiverAsUser(mBroadcastReceiver,UserHandle.ALL,filter,null,null);
  resetUserSetupObserver();
  ThreadedRenderer.overrideProperty(""String_Node_Str"",""String_Node_Str"");
  ThreadedRenderer.overrideProperty(""String_Node_Str"",String.valueOf(1.5f));
  return mStatusBarView;
}","protected PhoneStatusBarView makeStatusBarView(){
  final Context context=mContext;
  Resources res=context.getResources();
  updateDisplaySize();
  updateResources();
  mStatusBarWindow=(StatusBarWindowView)View.inflate(context,R.layout.super_status_bar,null);
  mStatusBarWindow.mService=this;
  mStatusBarWindow.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      checkUserAutohide(v,event);
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        if (mExpandedVisible) {
          animateCollapsePanels();
        }
      }
      return mStatusBarWindow.onTouchEvent(event);
    }
  }
);
  mStatusBarView=(PhoneStatusBarView)mStatusBarWindow.findViewById(R.id.status_bar);
  mStatusBarView.setBar(this);
  PanelHolder holder=(PanelHolder)mStatusBarWindow.findViewById(R.id.panel_holder);
  mStatusBarView.setPanelHolder(holder);
  mNotificationPanel=(NotificationPanelView)mStatusBarWindow.findViewById(R.id.notification_panel);
  mNotificationPanel.setStatusBar(this);
  if (!ActivityManager.isHighEndGfx()) {
    mStatusBarWindow.setBackground(null);
    mNotificationPanel.setBackground(new FastColorDrawable(context.getColor(R.color.notification_panel_solid_background)));
  }
  mHeadsUpManager=new HeadsUpManager(context,mStatusBarWindow);
  mHeadsUpManager.setBar(this);
  mHeadsUpManager.addListener(this);
  mHeadsUpManager.addListener(mNotificationPanel);
  mNotificationPanel.setHeadsUpManager(mHeadsUpManager);
  mNotificationData.setHeadsUpManager(mHeadsUpManager);
  if (MULTIUSER_DEBUG) {
    mNotificationPanelDebugText=(TextView)mNotificationPanel.findViewById(R.id.header_debug_info);
    mNotificationPanelDebugText.setVisibility(View.VISIBLE);
  }
  updateShowSearchHoldoff();
  try {
    boolean showNav=mWindowManagerService.hasNavigationBar();
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showNav);
    if (showNav) {
      mNavigationBarView=(NavigationBarView)View.inflate(context,R.layout.navigation_bar,null);
      mNavigationBarView.setDisabledFlags(mDisabled1);
      mNavigationBarView.setBar(this);
      mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener(){
        @Override public void onVerticalChanged(        boolean isVertical){
          if (mAssistManager != null) {
            mAssistManager.onConfigurationChanged();
          }
          mNotificationPanel.setQsScrimEnabled(!isVertical);
        }
      }
);
      mNavigationBarView.setOnTouchListener(new View.OnTouchListener(){
        @Override public boolean onTouch(        View v,        MotionEvent event){
          checkUserAutohide(v,event);
          return false;
        }
      }
);
    }
  }
 catch (  RemoteException ex) {
  }
  mAssistManager=new AssistManager(this,context);
  mPixelFormat=PixelFormat.OPAQUE;
  mStackScroller=(NotificationStackScrollLayout)mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
  mStackScroller.setLongPressListener(getNotificationLongClicker());
  mStackScroller.setPhoneStatusBar(this);
  mStackScroller.setGroupManager(mGroupManager);
  mStackScroller.setHeadsUpManager(mHeadsUpManager);
  mGroupManager.setOnGroupChangeListener(mStackScroller);
  mKeyguardIconOverflowContainer=(NotificationOverflowContainer)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow,mStackScroller,false);
  mKeyguardIconOverflowContainer.setOnActivatedListener(this);
  mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
  mStackScroller.addView(mKeyguardIconOverflowContainer);
  SpeedBumpView speedBump=(SpeedBumpView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump,mStackScroller,false);
  mStackScroller.setSpeedBumpView(speedBump);
  mEmptyShadeView=(EmptyShadeView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications,mStackScroller,false);
  mStackScroller.setEmptyShadeView(mEmptyShadeView);
  mDismissView=(DismissView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all,mStackScroller,false);
  mDismissView.setOnButtonClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      MetricsLogger.action(mContext,MetricsLogger.ACTION_DISMISS_ALL_NOTES);
      clearAllNotifications();
    }
  }
);
  mStackScroller.setDismissView(mDismissView);
  mExpandedContents=mStackScroller;
  mBackdrop=(BackDropView)mStatusBarWindow.findViewById(R.id.backdrop);
  mBackdropFront=(ImageView)mBackdrop.findViewById(R.id.backdrop_front);
  mBackdropBack=(ImageView)mBackdrop.findViewById(R.id.backdrop_back);
  ScrimView scrimBehind=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_behind);
  ScrimView scrimInFront=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_in_front);
  View headsUpScrim=mStatusBarWindow.findViewById(R.id.heads_up_scrim);
  mScrimController=new ScrimController(scrimBehind,scrimInFront,headsUpScrim,mScrimSrcModeEnabled);
  mHeadsUpManager.addListener(mScrimController);
  mStackScroller.setScrimController(mScrimController);
  mScrimController.setBackDropView(mBackdrop);
  mStatusBarView.setScrimController(mScrimController);
  mDozeScrimController=new DozeScrimController(mScrimController,context);
  mHeader=(StatusBarHeaderView)mStatusBarWindow.findViewById(R.id.header);
  mHeader.setActivityStarter(this);
  mKeyguardStatusBar=(KeyguardStatusBarView)mStatusBarWindow.findViewById(R.id.keyguard_header);
  mKeyguardStatusView=mStatusBarWindow.findViewById(R.id.keyguard_status_view);
  mKeyguardBottomArea=(KeyguardBottomAreaView)mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
  mKeyguardBottomArea.setActivityStarter(this);
  mKeyguardBottomArea.setAssistManager(mAssistManager);
  mKeyguardIndicationController=new KeyguardIndicationController(mContext,(KeyguardIndicationTextView)mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
  mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
  setAreThereNotifications();
  mIconController=new StatusBarIconController(mContext,mStatusBarView,mKeyguardStatusBar,this);
  mHandlerThread=new HandlerThread(TAG,Process.THREAD_PRIORITY_BACKGROUND);
  mHandlerThread.start();
  mLocationController=new LocationControllerImpl(mContext);
  mBatteryController=new BatteryController(mContext);
  mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback(){
    @Override public void onPowerSaveChanged(){
      mHandler.post(mCheckBarModes);
      if (mDozeServiceHost != null) {
        mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
      }
    }
    @Override public void onBatteryLevelChanged(    int level,    boolean pluggedIn,    boolean charging){
    }
  }
);
  mNetworkController=new NetworkControllerImpl(mContext,mHandlerThread.getLooper());
  mHotspotController=new HotspotControllerImpl(mContext);
  mBluetoothController=new BluetoothControllerImpl(mContext,mHandlerThread.getLooper());
  mSecurityController=new SecurityControllerImpl(mContext);
  if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
    mRotationLockController=new RotationLockControllerImpl(mContext);
  }
  mUserInfoController=new UserInfoController(mContext);
  mVolumeComponent=getComponent(VolumeComponent.class);
  if (mVolumeComponent != null) {
    mZenModeController=mVolumeComponent.getZenController();
  }
  mCastController=new CastControllerImpl(mContext);
  final SignalClusterView signalCluster=(SignalClusterView)mStatusBarView.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterKeyguard=(SignalClusterView)mKeyguardStatusBar.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterQs=(SignalClusterView)mHeader.findViewById(R.id.signal_cluster);
  mNetworkController.addSignalCluster(signalCluster);
  mNetworkController.addSignalCluster(signalClusterKeyguard);
  mNetworkController.addSignalCluster(signalClusterQs);
  signalCluster.setSecurityController(mSecurityController);
  signalCluster.setNetworkController(mNetworkController);
  signalClusterKeyguard.setSecurityController(mSecurityController);
  signalClusterKeyguard.setNetworkController(mNetworkController);
  signalClusterQs.setSecurityController(mSecurityController);
  signalClusterQs.setNetworkController(mNetworkController);
  final boolean isAPhone=mNetworkController.hasVoiceCallingFeature();
  if (isAPhone) {
    mNetworkController.addEmergencyListener(new NetworkControllerImpl.EmergencyListener(){
      @Override public void setEmergencyCallsOnly(      boolean emergencyOnly){
        mHeader.setShowEmergencyCallsOnly(emergencyOnly);
      }
    }
);
  }
  mFlashlightController=new FlashlightController(mContext);
  mKeyguardBottomArea.setFlashlightController(mFlashlightController);
  mKeyguardBottomArea.setPhoneStatusBar(this);
  mAccessibilityController=new AccessibilityController(mContext);
  mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
  mNextAlarmController=new NextAlarmController(mContext);
  mKeyguardMonitor=new KeyguardMonitor();
  if (UserSwitcherController.isUserSwitcherAvailable(UserManager.get(mContext))) {
    mUserSwitcherController=new UserSwitcherController(mContext,mKeyguardMonitor);
  }
  mKeyguardUserSwitcher=new KeyguardUserSwitcher(mContext,(ViewStub)mStatusBarWindow.findViewById(R.id.keyguard_user_switcher),mKeyguardStatusBar,mNotificationPanel,mUserSwitcherController);
  mQSPanel=(QSPanel)mStatusBarWindow.findViewById(R.id.quick_settings_panel);
  if (mQSPanel != null) {
    final QSTileHost qsh=new QSTileHost(mContext,this,mBluetoothController,mLocationController,mRotationLockController,mNetworkController,mZenModeController,mHotspotController,mCastController,mFlashlightController,mUserSwitcherController,mKeyguardMonitor,mSecurityController);
    mQSPanel.setHost(qsh);
    mQSPanel.setTiles(qsh.getTiles());
    mBrightnessMirrorController=new BrightnessMirrorController(mStatusBarWindow);
    mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
    mHeader.setQSPanel(mQSPanel);
    qsh.setCallback(new QSTileHost.Callback(){
      @Override public void onTilesChanged(){
        mQSPanel.setTiles(qsh.getTiles());
      }
    }
);
  }
  mHeader.setUserInfoController(mUserInfoController);
  mKeyguardStatusBar.setUserInfoController(mUserInfoController);
  mUserInfoController.reloadUserInfo();
  mHeader.setBatteryController(mBatteryController);
  ((BatteryMeterView)mStatusBarView.findViewById(R.id.battery)).setBatteryController(mBatteryController);
  mKeyguardStatusBar.setBatteryController(mBatteryController);
  mHeader.setNextAlarmController(mNextAlarmController);
  PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mBroadcastReceiver.onReceive(mContext,new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(Intent.ACTION_SCREEN_ON);
  if (DEBUG_MEDIA_FAKE_ARTWORK) {
    filter.addAction(""String_Node_Str"");
  }
  filter.addAction(ACTION_DEMO);
  context.registerReceiverAsUser(mBroadcastReceiver,UserHandle.ALL,filter,null,null);
  resetUserSetupObserver();
  ThreadedRenderer.overrideProperty(""String_Node_Str"",""String_Node_Str"");
  ThreadedRenderer.overrideProperty(""String_Node_Str"",String.valueOf(1.5f));
  return mStatusBarView;
}",0.99765726681128
195116,"private void updateHeadsUpScrim(boolean animate){
  float alpha=calculateHeadsUpAlpha();
  ValueAnimator previousAnimator=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_KEY_ANIM);
  float animEndValue=-1;
  if (previousAnimator != null) {
    if (animate || alpha == mCurrentHeadsUpAlpha) {
      previousAnimator.cancel();
    }
    animEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
  }
  if (alpha != mCurrentHeadsUpAlpha && alpha != animEndValue) {
    if (animate) {
      startScrimAnimation(mHeadsUpScrim,alpha);
      mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,mCurrentHeadsUpAlpha);
      mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
    }
 else {
      if (previousAnimator != null) {
        float previousStartValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
        float previousEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
        PropertyValuesHolder[] values=previousAnimator.getValues();
        float relativeDiff=alpha - previousEndValue;
        float newStartValue=previousStartValue + relativeDiff;
        values[0].setFloatValues(newStartValue,alpha);
        mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,newStartValue);
        mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
        previousAnimator.setCurrentPlayTime(previousAnimator.getCurrentPlayTime());
      }
 else {
        setCurrentScrimAlpha(mHeadsUpScrim,alpha);
        updateScrimColor(mHeadsUpScrim);
      }
    }
  }
}","private void updateHeadsUpScrim(boolean animate){
  float alpha=calculateHeadsUpAlpha();
  ValueAnimator previousAnimator=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_KEY_ANIM);
  float animEndValue=-1;
  if (previousAnimator != null) {
    if (animate || alpha == mCurrentHeadsUpAlpha) {
      previousAnimator.cancel();
    }
 else {
      animEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
    }
  }
  if (alpha != mCurrentHeadsUpAlpha && alpha != animEndValue) {
    if (animate) {
      startScrimAnimation(mHeadsUpScrim,alpha);
      mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,mCurrentHeadsUpAlpha);
      mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
    }
 else {
      if (previousAnimator != null) {
        float previousStartValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
        float previousEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
        PropertyValuesHolder[] values=previousAnimator.getValues();
        float relativeDiff=alpha - previousEndValue;
        float newStartValue=previousStartValue + relativeDiff;
        values[0].setFloatValues(newStartValue,alpha);
        mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,newStartValue);
        mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
        previousAnimator.setCurrentPlayTime(previousAnimator.getCurrentPlayTime());
      }
 else {
        setCurrentScrimAlpha(mHeadsUpScrim,alpha);
        updateScrimColor(mHeadsUpScrim);
      }
    }
  }
}",0.9919946631087392
195117,"private void applyHeight(State state){
  boolean expanded=state.isKeyguardShowingAndNotOccluded() || state.statusBarExpanded || state.keyguardFadingAway|| state.bouncerShowing|| state.headsUpShowing;
  if (expanded) {
    mLpChanged.height=ViewGroup.LayoutParams.MATCH_PARENT;
  }
 else {
    mLpChanged.height=mBarHeight;
  }
}","private void applyHeight(State state){
  boolean expanded=!state.forceCollapsed && (state.isKeyguardShowingAndNotOccluded() || state.statusBarExpanded || state.keyguardFadingAway|| state.bouncerShowing|| state.headsUpShowing);
  if (expanded) {
    mLpChanged.height=ViewGroup.LayoutParams.MATCH_PARENT;
  }
 else {
    mLpChanged.height=mBarHeight;
  }
}",0.9604685212298684
195118,"public void setIsExpanded(boolean isExpanded){
  if (isExpanded != mIsExpanded) {
    mIsExpanded=isExpanded;
    if (isExpanded) {
      unpinAll();
    }
  }
}","public void setIsExpanded(boolean isExpanded){
  if (isExpanded != mIsExpanded) {
    mIsExpanded=isExpanded;
    if (isExpanded) {
      unpinAll();
      mWaitingOnCollapseWhenGoingAway=false;
      mHeadsUpGoingAway=false;
      updateTouchableRegionListener();
    }
  }
}",0.7368421052631579
195119,"private void updatePinnedMode(){
  boolean hasPinnedNotification=hasPinnedNotificationInternal();
  if (hasPinnedNotification == mHasPinnedNotification) {
    return;
  }
  mHasPinnedNotification=hasPinnedNotification;
  for (  OnHeadsUpChangedListener listener : mListeners) {
    listener.onHeadsUpPinnedModeChanged(hasPinnedNotification);
  }
}","private void updatePinnedMode(){
  boolean hasPinnedNotification=hasPinnedNotificationInternal();
  if (hasPinnedNotification == mHasPinnedNotification) {
    return;
  }
  mHasPinnedNotification=hasPinnedNotification;
  updateTouchableRegionListener();
  for (  OnHeadsUpChangedListener listener : mListeners) {
    listener.onHeadsUpPinnedModeChanged(hasPinnedNotification);
  }
}",0.9519890260631
195120,"public HeadsUpManager(final Context context,ViewTreeObserver observer){
  Resources resources=context.getResources();
  mTouchAcceptanceDelay=resources.getInteger(R.integer.touch_acceptance_delay);
  mSnoozedPackages=new ArrayMap<>();
  mDefaultSnoozeLengthMs=resources.getInteger(R.integer.heads_up_default_snooze_length_ms);
  mSnoozeLengthMs=mDefaultSnoozeLengthMs;
  mMinimumDisplayTime=resources.getInteger(R.integer.heads_up_notification_minimum_time);
  mHeadsUpNotificationDecay=resources.getInteger(R.integer.heads_up_notification_decay);
  mClock=new Clock();
  mSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,mDefaultSnoozeLengthMs);
  mSettingsObserver=new ContentObserver(mHandler){
    @Override public void onChange(    boolean selfChange){
      final int packageSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,-1);
      if (packageSnoozeLengthMs > -1 && packageSnoozeLengthMs != mSnoozeLengthMs) {
        mSnoozeLengthMs=packageSnoozeLengthMs;
        if (DEBUG)         Log.v(TAG,""String_Node_Str"" + mSnoozeLengthMs);
      }
    }
  }
;
  context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(SETTING_HEADS_UP_SNOOZE_LENGTH_MS),false,mSettingsObserver);
  observer.addOnComputeInternalInsetsListener(this);
}","public HeadsUpManager(final Context context,View statusBarWindowView){
  Resources resources=context.getResources();
  mTouchAcceptanceDelay=resources.getInteger(R.integer.touch_acceptance_delay);
  mSnoozedPackages=new ArrayMap<>();
  mDefaultSnoozeLengthMs=resources.getInteger(R.integer.heads_up_default_snooze_length_ms);
  mSnoozeLengthMs=mDefaultSnoozeLengthMs;
  mMinimumDisplayTime=resources.getInteger(R.integer.heads_up_notification_minimum_time);
  mHeadsUpNotificationDecay=resources.getInteger(R.integer.heads_up_notification_decay);
  mClock=new Clock();
  mSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,mDefaultSnoozeLengthMs);
  mSettingsObserver=new ContentObserver(mHandler){
    @Override public void onChange(    boolean selfChange){
      final int packageSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,-1);
      if (packageSnoozeLengthMs > -1 && packageSnoozeLengthMs != mSnoozeLengthMs) {
        mSnoozeLengthMs=packageSnoozeLengthMs;
        if (DEBUG)         Log.v(TAG,""String_Node_Str"" + mSnoozeLengthMs);
      }
    }
  }
;
  context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(SETTING_HEADS_UP_SNOOZE_LENGTH_MS),false,mSettingsObserver);
  mStatusBarWindowView=statusBarWindowView;
  mStatusBarHeight=resources.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
}",0.9196301564722618
195121,"public void onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo info){
  if (!mIsExpanded && mHasPinnedNotification) {
    int minX=Integer.MAX_VALUE;
    int maxX=0;
    int minY=Integer.MAX_VALUE;
    int maxY=0;
    for (    HeadsUpEntry entry : mSortedEntries) {
      ExpandableNotificationRow row=entry.entry.row;
      if (row.isPinned()) {
        row.getLocationOnScreen(mTmpTwoArray);
        minX=Math.min(minX,mTmpTwoArray[0]);
        minY=Math.min(minY,0);
        maxX=Math.max(maxX,mTmpTwoArray[0] + row.getWidth());
        maxY=Math.max(maxY,row.getHeadsUpHeight());
      }
    }
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(minX,minY,maxX,maxY);
  }
}","public void onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo info){
  if (mHasPinnedNotification) {
    int minX=Integer.MAX_VALUE;
    int maxX=0;
    int minY=Integer.MAX_VALUE;
    int maxY=0;
    for (    HeadsUpEntry entry : mSortedEntries) {
      ExpandableNotificationRow row=entry.entry.row;
      if (row.isPinned()) {
        row.getLocationOnScreen(mTmpTwoArray);
        minX=Math.min(minX,mTmpTwoArray[0]);
        minY=Math.min(minY,0);
        maxX=Math.max(maxX,mTmpTwoArray[0] + row.getWidth());
        maxY=Math.max(maxY,row.getHeadsUpHeight());
      }
    }
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(minX,minY,maxX,maxY);
  }
 else   if (mHeadsUpGoingAway || mWaitingOnCollapseWhenGoingAway) {
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(0,0,mStatusBarWindowView.getWidth(),mStatusBarHeight);
  }
}",0.8490783410138248
195122,"@Override public boolean onInterceptTouchEvent(MotionEvent event){
  if (!mTouchingHeadsUpView && event.getActionMasked() != MotionEvent.ACTION_DOWN) {
    return false;
  }
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mInitialTouchY=y;
  mInitialTouchX=x;
setTrackingHeadsUp(false);
ExpandableView child=mStackScroller.getChildAtPosition(x,y);
mTouchingHeadsUpView=false;
if (child instanceof ExpandableNotificationRow) {
mPickedChild=(ExpandableNotificationRow)child;
mTouchingHeadsUpView=mPickedChild.isHeadsUp() && mPickedChild.isPinned();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
mTrackingPointer=event.getPointerId(newIndex);
mInitialTouchX=event.getX(newIndex);
mInitialTouchY=event.getY(newIndex);
}
break;
case MotionEvent.ACTION_MOVE:
final float h=y - mInitialTouchY;
if (Math.abs(h) > mTouchSlop && Math.abs(h) > Math.abs(x - mInitialTouchX)) {
setTrackingHeadsUp(true);
mCollapseSnoozes=h < 0;
mInitialTouchX=x;
mInitialTouchY=y;
int expandedHeight=mPickedChild.getActualHeight();
mPanel.startExpandMotion(x,y,true,expandedHeight);
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mPickedChild != null && mTouchingHeadsUpView) {
if (mHeadsUpManager.shouldSwallowClick(mPickedChild.getStatusBarNotification().getKey())) {
endMotion();
return true;
}
}
endMotion();
break;
}
return false;
}","@Override public boolean onInterceptTouchEvent(MotionEvent event){
  if (!mTouchingHeadsUpView && event.getActionMasked() != MotionEvent.ACTION_DOWN) {
    return false;
  }
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mInitialTouchY=y;
  mInitialTouchX=x;
setTrackingHeadsUp(false);
ExpandableView child=mStackScroller.getChildAtRawPosition(x,y);
mTouchingHeadsUpView=false;
if (child instanceof ExpandableNotificationRow) {
mPickedChild=(ExpandableNotificationRow)child;
mTouchingHeadsUpView=mPickedChild.isHeadsUp() && mPickedChild.isPinned();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
mTrackingPointer=event.getPointerId(newIndex);
mInitialTouchX=event.getX(newIndex);
mInitialTouchY=event.getY(newIndex);
}
break;
case MotionEvent.ACTION_MOVE:
final float h=y - mInitialTouchY;
if (Math.abs(h) > mTouchSlop && Math.abs(h) > Math.abs(x - mInitialTouchX)) {
setTrackingHeadsUp(true);
mCollapseSnoozes=h < 0;
mInitialTouchX=x;
mInitialTouchY=y;
int expandedHeight=mPickedChild.getActualHeight();
mPanel.startExpandMotion(x,y,true,expandedHeight);
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mPickedChild != null && mTouchingHeadsUpView) {
if (mHeadsUpManager.shouldSwallowClick(mPickedChild.getStatusBarNotification().getKey())) {
endMotion();
return true;
}
}
endMotion();
break;
}
return false;
}",0.9991580129104688
195123,"@Override public boolean onInterceptTouchEvent(MotionEvent event){
  if (!mTouchingHeadsUpView && event.getActionMasked() != MotionEvent.ACTION_DOWN) {
    return false;
  }
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mInitialTouchY=y;
  mInitialTouchX=x;
setTrackingHeadsUp(false);
ExpandableView child=mStackScroller.getChildAtPosition(x,y);
mTouchingHeadsUpView=false;
if (child instanceof ExpandableNotificationRow) {
mPickedChild=(ExpandableNotificationRow)child;
mTouchingHeadsUpView=mPickedChild.isHeadsUp() && mPickedChild.isPinned();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
mTrackingPointer=event.getPointerId(newIndex);
mInitialTouchX=event.getX(newIndex);
mInitialTouchY=event.getY(newIndex);
}
break;
case MotionEvent.ACTION_MOVE:
final float h=y - mInitialTouchY;
if (Math.abs(h) > mTouchSlop && Math.abs(h) > Math.abs(x - mInitialTouchX)) {
setTrackingHeadsUp(true);
mCollapseSnoozes=h < 0;
mInitialTouchX=x;
mInitialTouchY=y;
int expandedHeight=mPickedChild.getActualHeight();
mPanel.startExpandMotion(x,y,true,expandedHeight);
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mPickedChild != null && mTouchingHeadsUpView) {
if (mHeadsUpManager.shouldSwallowClick(mPickedChild.getStatusBarNotification().getKey())) {
endMotion();
return true;
}
}
endMotion();
break;
}
return false;
}","@Override public boolean onInterceptTouchEvent(MotionEvent event){
  if (!mTouchingHeadsUpView && event.getActionMasked() != MotionEvent.ACTION_DOWN) {
    return false;
  }
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mInitialTouchY=y;
  mInitialTouchX=x;
setTrackingHeadsUp(false);
ExpandableView child=mStackScroller.getChildAtRawPosition(x,y);
mTouchingHeadsUpView=false;
if (child instanceof ExpandableNotificationRow) {
mPickedChild=(ExpandableNotificationRow)child;
mTouchingHeadsUpView=mPickedChild.isHeadsUp() && mPickedChild.isPinned();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
mTrackingPointer=event.getPointerId(newIndex);
mInitialTouchX=event.getX(newIndex);
mInitialTouchY=event.getY(newIndex);
}
break;
case MotionEvent.ACTION_MOVE:
final float h=y - mInitialTouchY;
if (Math.abs(h) > mTouchSlop && Math.abs(h) > Math.abs(x - mInitialTouchX)) {
setTrackingHeadsUp(true);
mCollapseSnoozes=h < 0;
mInitialTouchX=x;
mInitialTouchY=y;
int expandedHeight=mPickedChild.getActualHeight();
mPanel.startExpandMotion(x,y,true,expandedHeight);
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mPickedChild != null && mTouchingHeadsUpView) {
if (mHeadsUpManager.shouldSwallowClick(mPickedChild.getStatusBarNotification().getKey())) {
endMotion();
return true;
}
}
endMotion();
break;
}
return false;
}",0.9991580129104688
195124,"@Override public ComponentName getHomeActivityForUser(int userId){
synchronized (ActivityManagerService.this) {
    ActivityRecord homeActivity=mStackSupervisor.getHomeActivityForUser(userId);
    return homeActivity.realActivity;
  }
}","@Override public ComponentName getHomeActivityForUser(int userId){
synchronized (ActivityManagerService.this) {
    ActivityRecord homeActivity=mStackSupervisor.getHomeActivityForUser(userId);
    return homeActivity == null ? null : homeActivity.realActivity;
  }
}",0.9402390438247012
195125,"private void killBackgroundUserProcessesWithRecordAudioPermission(UserInfo oldUser){
  PackageManager pm=mContext.getPackageManager();
  ComponentName homeActivityName=null;
  if (!oldUser.isManagedProfile()) {
    homeActivityName=LocalServices.getService(ActivityManagerInternal.class).getHomeActivityForUser(oldUser.id);
  }
  final String[] permissions={Manifest.permission.RECORD_AUDIO};
  List<PackageInfo> packages;
  try {
    packages=AppGlobals.getPackageManager().getPackagesHoldingPermissions(permissions,0,oldUser.id).getList();
  }
 catch (  RemoteException e) {
    throw new AndroidRuntimeException(e);
  }
  for (int j=packages.size() - 1; j >= 0; j--) {
    PackageInfo pkg=packages.get(j);
    if (homeActivityName != null && pkg.packageName.equals(homeActivityName.getPackageName()) && pkg.applicationInfo.isSystemApp()) {
      continue;
    }
    try {
      ActivityManagerNative.getDefault().killUid(pkg.applicationInfo.uid,""String_Node_Str"");
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
}","private void killBackgroundUserProcessesWithRecordAudioPermission(UserInfo oldUser){
  PackageManager pm=mContext.getPackageManager();
  ComponentName homeActivityName=null;
  if (!oldUser.isManagedProfile()) {
    homeActivityName=LocalServices.getService(ActivityManagerInternal.class).getHomeActivityForUser(oldUser.id);
  }
  final String[] permissions={Manifest.permission.RECORD_AUDIO};
  List<PackageInfo> packages;
  try {
    packages=AppGlobals.getPackageManager().getPackagesHoldingPermissions(permissions,0,oldUser.id).getList();
  }
 catch (  RemoteException e) {
    throw new AndroidRuntimeException(e);
  }
  for (int j=packages.size() - 1; j >= 0; j--) {
    PackageInfo pkg=packages.get(j);
    if (UserHandle.getAppId(pkg.applicationInfo.uid) < FIRST_APPLICATION_UID) {
      continue;
    }
    if (homeActivityName != null && pkg.packageName.equals(homeActivityName.getPackageName()) && pkg.applicationInfo.isSystemApp()) {
      continue;
    }
    try {
      ActivityManagerNative.getDefault().killUid(pkg.applicationInfo.uid,""String_Node_Str"");
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
}",0.9539295392953928
195126,"@Override public ComponentName getHomeActivityForUser(int userId){
synchronized (ActivityManagerService.this) {
    ActivityRecord homeActivity=mStackSupervisor.getHomeActivityForUser(userId);
    return homeActivity.realActivity;
  }
}","@Override public ComponentName getHomeActivityForUser(int userId){
synchronized (ActivityManagerService.this) {
    ActivityRecord homeActivity=mStackSupervisor.getHomeActivityForUser(userId);
    return homeActivity == null ? null : homeActivity.realActivity;
  }
}",0.9402390438247012
195127,"private void killBackgroundUserProcessesWithRecordAudioPermission(UserInfo oldUser){
  PackageManager pm=mContext.getPackageManager();
  ComponentName homeActivityName=null;
  if (!oldUser.isManagedProfile()) {
    homeActivityName=LocalServices.getService(ActivityManagerInternal.class).getHomeActivityForUser(oldUser.id);
  }
  final String[] permissions={Manifest.permission.RECORD_AUDIO};
  List<PackageInfo> packages;
  try {
    packages=AppGlobals.getPackageManager().getPackagesHoldingPermissions(permissions,0,oldUser.id).getList();
  }
 catch (  RemoteException e) {
    throw new AndroidRuntimeException(e);
  }
  for (int j=packages.size() - 1; j >= 0; j--) {
    PackageInfo pkg=packages.get(j);
    if (homeActivityName != null && pkg.packageName.equals(homeActivityName.getPackageName()) && pkg.applicationInfo.isSystemApp()) {
      continue;
    }
    try {
      ActivityManagerNative.getDefault().killUid(pkg.applicationInfo.uid,""String_Node_Str"");
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
}","private void killBackgroundUserProcessesWithRecordAudioPermission(UserInfo oldUser){
  PackageManager pm=mContext.getPackageManager();
  ComponentName homeActivityName=null;
  if (!oldUser.isManagedProfile()) {
    homeActivityName=LocalServices.getService(ActivityManagerInternal.class).getHomeActivityForUser(oldUser.id);
  }
  final String[] permissions={Manifest.permission.RECORD_AUDIO};
  List<PackageInfo> packages;
  try {
    packages=AppGlobals.getPackageManager().getPackagesHoldingPermissions(permissions,0,oldUser.id).getList();
  }
 catch (  RemoteException e) {
    throw new AndroidRuntimeException(e);
  }
  for (int j=packages.size() - 1; j >= 0; j--) {
    PackageInfo pkg=packages.get(j);
    if (UserHandle.getAppId(pkg.applicationInfo.uid) < FIRST_APPLICATION_UID) {
      continue;
    }
    if (homeActivityName != null && pkg.packageName.equals(homeActivityName.getPackageName()) && pkg.applicationInfo.isSystemApp()) {
      continue;
    }
    try {
      ActivityManagerNative.getDefault().killUid(pkg.applicationInfo.uid,""String_Node_Str"");
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
}",0.9539295392953928
195128,"@Override public ComponentName getHomeActivityForUser(int userId){
synchronized (ActivityManagerService.this) {
    ActivityRecord homeActivity=mStackSupervisor.getHomeActivityForUser(userId);
    return homeActivity.realActivity;
  }
}","@Override public ComponentName getHomeActivityForUser(int userId){
synchronized (ActivityManagerService.this) {
    ActivityRecord homeActivity=mStackSupervisor.getHomeActivityForUser(userId);
    return homeActivity == null ? null : homeActivity.realActivity;
  }
}",0.9402390438247012
195129,"private void killBackgroundUserProcessesWithRecordAudioPermission(UserInfo oldUser){
  PackageManager pm=mContext.getPackageManager();
  ComponentName homeActivityName=null;
  if (!oldUser.isManagedProfile()) {
    homeActivityName=LocalServices.getService(ActivityManagerInternal.class).getHomeActivityForUser(oldUser.id);
  }
  final String[] permissions={Manifest.permission.RECORD_AUDIO};
  List<PackageInfo> packages;
  try {
    packages=AppGlobals.getPackageManager().getPackagesHoldingPermissions(permissions,0,oldUser.id).getList();
  }
 catch (  RemoteException e) {
    throw new AndroidRuntimeException(e);
  }
  for (int j=packages.size() - 1; j >= 0; j--) {
    PackageInfo pkg=packages.get(j);
    if (homeActivityName != null && pkg.packageName.equals(homeActivityName.getPackageName()) && pkg.applicationInfo.isSystemApp()) {
      continue;
    }
    try {
      ActivityManagerNative.getDefault().killUid(pkg.applicationInfo.uid,""String_Node_Str"");
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
}","private void killBackgroundUserProcessesWithRecordAudioPermission(UserInfo oldUser){
  PackageManager pm=mContext.getPackageManager();
  ComponentName homeActivityName=null;
  if (!oldUser.isManagedProfile()) {
    homeActivityName=LocalServices.getService(ActivityManagerInternal.class).getHomeActivityForUser(oldUser.id);
  }
  final String[] permissions={Manifest.permission.RECORD_AUDIO};
  List<PackageInfo> packages;
  try {
    packages=AppGlobals.getPackageManager().getPackagesHoldingPermissions(permissions,0,oldUser.id).getList();
  }
 catch (  RemoteException e) {
    throw new AndroidRuntimeException(e);
  }
  for (int j=packages.size() - 1; j >= 0; j--) {
    PackageInfo pkg=packages.get(j);
    if (UserHandle.getAppId(pkg.applicationInfo.uid) < FIRST_APPLICATION_UID) {
      continue;
    }
    if (homeActivityName != null && pkg.packageName.equals(homeActivityName.getPackageName()) && pkg.applicationInfo.isSystemApp()) {
      continue;
    }
    try {
      ActivityManagerNative.getDefault().killUid(pkg.applicationInfo.uid,""String_Node_Str"");
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
}",0.9539295392953928
195130,"@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}","@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mNotificationPanel.requestLayout();
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
    mStatusBarWindowManager.setForceWindowCollapsed(true);
    mNotificationPanel.post(new Runnable(){
      @Override public void run(){
        mStatusBarWindowManager.setForceWindowCollapsed(false);
      }
    }
);
  }
 else {
    if (!mNotificationPanel.isFullyCollapsed()) {
      mStatusBarWindowManager.setHeadsUpShowing(false);
    }
 else {
      mHeadsUpManager.setHeadsUpGoingAway(true);
      mStackScroller.runAfterAnimationFinished(new Runnable(){
        @Override public void run(){
          if (!mHeadsUpManager.hasPinnedHeadsUp()) {
            mStatusBarWindowManager.setHeadsUpShowing(false);
            mHeadsUpManager.setHeadsUpGoingAway(false);
          }
        }
      }
);
    }
  }
}",0.4540192926045016
195131,"protected PhoneStatusBarView makeStatusBarView(){
  final Context context=mContext;
  Resources res=context.getResources();
  updateDisplaySize();
  updateResources();
  mStatusBarWindow=(StatusBarWindowView)View.inflate(context,R.layout.super_status_bar,null);
  mStatusBarWindow.mService=this;
  mStatusBarWindow.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      checkUserAutohide(v,event);
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        if (mExpandedVisible) {
          animateCollapsePanels();
        }
      }
      return mStatusBarWindow.onTouchEvent(event);
    }
  }
);
  mStatusBarView=(PhoneStatusBarView)mStatusBarWindow.findViewById(R.id.status_bar);
  mStatusBarView.setBar(this);
  PanelHolder holder=(PanelHolder)mStatusBarWindow.findViewById(R.id.panel_holder);
  mStatusBarView.setPanelHolder(holder);
  mNotificationPanel=(NotificationPanelView)mStatusBarWindow.findViewById(R.id.notification_panel);
  mNotificationPanel.setStatusBar(this);
  if (!ActivityManager.isHighEndGfx()) {
    mStatusBarWindow.setBackground(null);
    mNotificationPanel.setBackground(new FastColorDrawable(context.getColor(R.color.notification_panel_solid_background)));
  }
  mHeadsUpManager=new HeadsUpManager(context,mNotificationPanel.getViewTreeObserver());
  mHeadsUpManager.setBar(this);
  mHeadsUpManager.addListener(this);
  mHeadsUpManager.addListener(mNotificationPanel);
  mNotificationPanel.setHeadsUpManager(mHeadsUpManager);
  mNotificationData.setHeadsUpManager(mHeadsUpManager);
  if (MULTIUSER_DEBUG) {
    mNotificationPanelDebugText=(TextView)mNotificationPanel.findViewById(R.id.header_debug_info);
    mNotificationPanelDebugText.setVisibility(View.VISIBLE);
  }
  updateShowSearchHoldoff();
  try {
    boolean showNav=mWindowManagerService.hasNavigationBar();
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showNav);
    if (showNav) {
      mNavigationBarView=(NavigationBarView)View.inflate(context,R.layout.navigation_bar,null);
      mNavigationBarView.setDisabledFlags(mDisabled1);
      mNavigationBarView.setBar(this);
      mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener(){
        @Override public void onVerticalChanged(        boolean isVertical){
          if (mAssistManager != null) {
            mAssistManager.onConfigurationChanged();
          }
          mNotificationPanel.setQsScrimEnabled(!isVertical);
        }
      }
);
      mNavigationBarView.setOnTouchListener(new View.OnTouchListener(){
        @Override public boolean onTouch(        View v,        MotionEvent event){
          checkUserAutohide(v,event);
          return false;
        }
      }
);
    }
  }
 catch (  RemoteException ex) {
  }
  mAssistManager=new AssistManager(this,context);
  mPixelFormat=PixelFormat.OPAQUE;
  mStackScroller=(NotificationStackScrollLayout)mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
  mStackScroller.setLongPressListener(getNotificationLongClicker());
  mStackScroller.setPhoneStatusBar(this);
  mStackScroller.setGroupManager(mGroupManager);
  mStackScroller.setHeadsUpManager(mHeadsUpManager);
  mGroupManager.setOnGroupChangeListener(mStackScroller);
  mKeyguardIconOverflowContainer=(NotificationOverflowContainer)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow,mStackScroller,false);
  mKeyguardIconOverflowContainer.setOnActivatedListener(this);
  mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
  mStackScroller.addView(mKeyguardIconOverflowContainer);
  SpeedBumpView speedBump=(SpeedBumpView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump,mStackScroller,false);
  mStackScroller.setSpeedBumpView(speedBump);
  mEmptyShadeView=(EmptyShadeView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications,mStackScroller,false);
  mStackScroller.setEmptyShadeView(mEmptyShadeView);
  mDismissView=(DismissView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all,mStackScroller,false);
  mDismissView.setOnButtonClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      MetricsLogger.action(mContext,MetricsLogger.ACTION_DISMISS_ALL_NOTES);
      clearAllNotifications();
    }
  }
);
  mStackScroller.setDismissView(mDismissView);
  mExpandedContents=mStackScroller;
  mBackdrop=(BackDropView)mStatusBarWindow.findViewById(R.id.backdrop);
  mBackdropFront=(ImageView)mBackdrop.findViewById(R.id.backdrop_front);
  mBackdropBack=(ImageView)mBackdrop.findViewById(R.id.backdrop_back);
  ScrimView scrimBehind=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_behind);
  ScrimView scrimInFront=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_in_front);
  View headsUpScrim=mStatusBarWindow.findViewById(R.id.heads_up_scrim);
  mScrimController=new ScrimController(scrimBehind,scrimInFront,headsUpScrim,mScrimSrcModeEnabled);
  mHeadsUpManager.addListener(mScrimController);
  mStackScroller.setScrimController(mScrimController);
  mScrimController.setBackDropView(mBackdrop);
  mStatusBarView.setScrimController(mScrimController);
  mDozeScrimController=new DozeScrimController(mScrimController,context);
  mHeader=(StatusBarHeaderView)mStatusBarWindow.findViewById(R.id.header);
  mHeader.setActivityStarter(this);
  mKeyguardStatusBar=(KeyguardStatusBarView)mStatusBarWindow.findViewById(R.id.keyguard_header);
  mKeyguardStatusView=mStatusBarWindow.findViewById(R.id.keyguard_status_view);
  mKeyguardBottomArea=(KeyguardBottomAreaView)mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
  mKeyguardBottomArea.setActivityStarter(this);
  mKeyguardBottomArea.setAssistManager(mAssistManager);
  mKeyguardIndicationController=new KeyguardIndicationController(mContext,(KeyguardIndicationTextView)mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
  mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
  setAreThereNotifications();
  mIconController=new StatusBarIconController(mContext,mStatusBarView,mKeyguardStatusBar,this);
  mHandlerThread=new HandlerThread(TAG,Process.THREAD_PRIORITY_BACKGROUND);
  mHandlerThread.start();
  mLocationController=new LocationControllerImpl(mContext);
  mBatteryController=new BatteryController(mContext);
  mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback(){
    @Override public void onPowerSaveChanged(){
      mHandler.post(mCheckBarModes);
      if (mDozeServiceHost != null) {
        mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
      }
    }
    @Override public void onBatteryLevelChanged(    int level,    boolean pluggedIn,    boolean charging){
    }
  }
);
  mNetworkController=new NetworkControllerImpl(mContext,mHandlerThread.getLooper());
  mHotspotController=new HotspotControllerImpl(mContext);
  mBluetoothController=new BluetoothControllerImpl(mContext,mHandlerThread.getLooper());
  mSecurityController=new SecurityControllerImpl(mContext);
  if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
    mRotationLockController=new RotationLockControllerImpl(mContext);
  }
  mUserInfoController=new UserInfoController(mContext);
  mVolumeComponent=getComponent(VolumeComponent.class);
  if (mVolumeComponent != null) {
    mZenModeController=mVolumeComponent.getZenController();
  }
  mCastController=new CastControllerImpl(mContext);
  final SignalClusterView signalCluster=(SignalClusterView)mStatusBarView.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterKeyguard=(SignalClusterView)mKeyguardStatusBar.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterQs=(SignalClusterView)mHeader.findViewById(R.id.signal_cluster);
  mNetworkController.addSignalCluster(signalCluster);
  mNetworkController.addSignalCluster(signalClusterKeyguard);
  mNetworkController.addSignalCluster(signalClusterQs);
  signalCluster.setSecurityController(mSecurityController);
  signalCluster.setNetworkController(mNetworkController);
  signalClusterKeyguard.setSecurityController(mSecurityController);
  signalClusterKeyguard.setNetworkController(mNetworkController);
  signalClusterQs.setSecurityController(mSecurityController);
  signalClusterQs.setNetworkController(mNetworkController);
  final boolean isAPhone=mNetworkController.hasVoiceCallingFeature();
  if (isAPhone) {
    mNetworkController.addEmergencyListener(new NetworkControllerImpl.EmergencyListener(){
      @Override public void setEmergencyCallsOnly(      boolean emergencyOnly){
        mHeader.setShowEmergencyCallsOnly(emergencyOnly);
      }
    }
);
  }
  mFlashlightController=new FlashlightController(mContext);
  mKeyguardBottomArea.setFlashlightController(mFlashlightController);
  mKeyguardBottomArea.setPhoneStatusBar(this);
  mAccessibilityController=new AccessibilityController(mContext);
  mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
  mNextAlarmController=new NextAlarmController(mContext);
  mKeyguardMonitor=new KeyguardMonitor();
  if (UserSwitcherController.isUserSwitcherAvailable(UserManager.get(mContext))) {
    mUserSwitcherController=new UserSwitcherController(mContext,mKeyguardMonitor);
  }
  mKeyguardUserSwitcher=new KeyguardUserSwitcher(mContext,(ViewStub)mStatusBarWindow.findViewById(R.id.keyguard_user_switcher),mKeyguardStatusBar,mNotificationPanel,mUserSwitcherController);
  mQSPanel=(QSPanel)mStatusBarWindow.findViewById(R.id.quick_settings_panel);
  if (mQSPanel != null) {
    final QSTileHost qsh=new QSTileHost(mContext,this,mBluetoothController,mLocationController,mRotationLockController,mNetworkController,mZenModeController,mHotspotController,mCastController,mFlashlightController,mUserSwitcherController,mKeyguardMonitor,mSecurityController);
    mQSPanel.setHost(qsh);
    mQSPanel.setTiles(qsh.getTiles());
    mBrightnessMirrorController=new BrightnessMirrorController(mStatusBarWindow);
    mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
    mHeader.setQSPanel(mQSPanel);
    qsh.setCallback(new QSTileHost.Callback(){
      @Override public void onTilesChanged(){
        mQSPanel.setTiles(qsh.getTiles());
      }
    }
);
  }
  mHeader.setUserInfoController(mUserInfoController);
  mKeyguardStatusBar.setUserInfoController(mUserInfoController);
  mUserInfoController.reloadUserInfo();
  mHeader.setBatteryController(mBatteryController);
  ((BatteryMeterView)mStatusBarView.findViewById(R.id.battery)).setBatteryController(mBatteryController);
  mKeyguardStatusBar.setBatteryController(mBatteryController);
  mHeader.setNextAlarmController(mNextAlarmController);
  PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mBroadcastReceiver.onReceive(mContext,new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(Intent.ACTION_SCREEN_ON);
  if (DEBUG_MEDIA_FAKE_ARTWORK) {
    filter.addAction(""String_Node_Str"");
  }
  filter.addAction(ACTION_DEMO);
  context.registerReceiverAsUser(mBroadcastReceiver,UserHandle.ALL,filter,null,null);
  resetUserSetupObserver();
  ThreadedRenderer.overrideProperty(""String_Node_Str"",""String_Node_Str"");
  ThreadedRenderer.overrideProperty(""String_Node_Str"",String.valueOf(1.5f));
  return mStatusBarView;
}","protected PhoneStatusBarView makeStatusBarView(){
  final Context context=mContext;
  Resources res=context.getResources();
  updateDisplaySize();
  updateResources();
  mStatusBarWindow=(StatusBarWindowView)View.inflate(context,R.layout.super_status_bar,null);
  mStatusBarWindow.mService=this;
  mStatusBarWindow.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      checkUserAutohide(v,event);
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        if (mExpandedVisible) {
          animateCollapsePanels();
        }
      }
      return mStatusBarWindow.onTouchEvent(event);
    }
  }
);
  mStatusBarView=(PhoneStatusBarView)mStatusBarWindow.findViewById(R.id.status_bar);
  mStatusBarView.setBar(this);
  PanelHolder holder=(PanelHolder)mStatusBarWindow.findViewById(R.id.panel_holder);
  mStatusBarView.setPanelHolder(holder);
  mNotificationPanel=(NotificationPanelView)mStatusBarWindow.findViewById(R.id.notification_panel);
  mNotificationPanel.setStatusBar(this);
  if (!ActivityManager.isHighEndGfx()) {
    mStatusBarWindow.setBackground(null);
    mNotificationPanel.setBackground(new FastColorDrawable(context.getColor(R.color.notification_panel_solid_background)));
  }
  mHeadsUpManager=new HeadsUpManager(context,mStatusBarWindow);
  mHeadsUpManager.setBar(this);
  mHeadsUpManager.addListener(this);
  mHeadsUpManager.addListener(mNotificationPanel);
  mNotificationPanel.setHeadsUpManager(mHeadsUpManager);
  mNotificationData.setHeadsUpManager(mHeadsUpManager);
  if (MULTIUSER_DEBUG) {
    mNotificationPanelDebugText=(TextView)mNotificationPanel.findViewById(R.id.header_debug_info);
    mNotificationPanelDebugText.setVisibility(View.VISIBLE);
  }
  updateShowSearchHoldoff();
  try {
    boolean showNav=mWindowManagerService.hasNavigationBar();
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showNav);
    if (showNav) {
      mNavigationBarView=(NavigationBarView)View.inflate(context,R.layout.navigation_bar,null);
      mNavigationBarView.setDisabledFlags(mDisabled1);
      mNavigationBarView.setBar(this);
      mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener(){
        @Override public void onVerticalChanged(        boolean isVertical){
          if (mAssistManager != null) {
            mAssistManager.onConfigurationChanged();
          }
          mNotificationPanel.setQsScrimEnabled(!isVertical);
        }
      }
);
      mNavigationBarView.setOnTouchListener(new View.OnTouchListener(){
        @Override public boolean onTouch(        View v,        MotionEvent event){
          checkUserAutohide(v,event);
          return false;
        }
      }
);
    }
  }
 catch (  RemoteException ex) {
  }
  mAssistManager=new AssistManager(this,context);
  mPixelFormat=PixelFormat.OPAQUE;
  mStackScroller=(NotificationStackScrollLayout)mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
  mStackScroller.setLongPressListener(getNotificationLongClicker());
  mStackScroller.setPhoneStatusBar(this);
  mStackScroller.setGroupManager(mGroupManager);
  mStackScroller.setHeadsUpManager(mHeadsUpManager);
  mGroupManager.setOnGroupChangeListener(mStackScroller);
  mKeyguardIconOverflowContainer=(NotificationOverflowContainer)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow,mStackScroller,false);
  mKeyguardIconOverflowContainer.setOnActivatedListener(this);
  mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
  mStackScroller.addView(mKeyguardIconOverflowContainer);
  SpeedBumpView speedBump=(SpeedBumpView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump,mStackScroller,false);
  mStackScroller.setSpeedBumpView(speedBump);
  mEmptyShadeView=(EmptyShadeView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications,mStackScroller,false);
  mStackScroller.setEmptyShadeView(mEmptyShadeView);
  mDismissView=(DismissView)LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all,mStackScroller,false);
  mDismissView.setOnButtonClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      MetricsLogger.action(mContext,MetricsLogger.ACTION_DISMISS_ALL_NOTES);
      clearAllNotifications();
    }
  }
);
  mStackScroller.setDismissView(mDismissView);
  mExpandedContents=mStackScroller;
  mBackdrop=(BackDropView)mStatusBarWindow.findViewById(R.id.backdrop);
  mBackdropFront=(ImageView)mBackdrop.findViewById(R.id.backdrop_front);
  mBackdropBack=(ImageView)mBackdrop.findViewById(R.id.backdrop_back);
  ScrimView scrimBehind=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_behind);
  ScrimView scrimInFront=(ScrimView)mStatusBarWindow.findViewById(R.id.scrim_in_front);
  View headsUpScrim=mStatusBarWindow.findViewById(R.id.heads_up_scrim);
  mScrimController=new ScrimController(scrimBehind,scrimInFront,headsUpScrim,mScrimSrcModeEnabled);
  mHeadsUpManager.addListener(mScrimController);
  mStackScroller.setScrimController(mScrimController);
  mScrimController.setBackDropView(mBackdrop);
  mStatusBarView.setScrimController(mScrimController);
  mDozeScrimController=new DozeScrimController(mScrimController,context);
  mHeader=(StatusBarHeaderView)mStatusBarWindow.findViewById(R.id.header);
  mHeader.setActivityStarter(this);
  mKeyguardStatusBar=(KeyguardStatusBarView)mStatusBarWindow.findViewById(R.id.keyguard_header);
  mKeyguardStatusView=mStatusBarWindow.findViewById(R.id.keyguard_status_view);
  mKeyguardBottomArea=(KeyguardBottomAreaView)mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
  mKeyguardBottomArea.setActivityStarter(this);
  mKeyguardBottomArea.setAssistManager(mAssistManager);
  mKeyguardIndicationController=new KeyguardIndicationController(mContext,(KeyguardIndicationTextView)mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
  mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
  setAreThereNotifications();
  mIconController=new StatusBarIconController(mContext,mStatusBarView,mKeyguardStatusBar,this);
  mHandlerThread=new HandlerThread(TAG,Process.THREAD_PRIORITY_BACKGROUND);
  mHandlerThread.start();
  mLocationController=new LocationControllerImpl(mContext);
  mBatteryController=new BatteryController(mContext);
  mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback(){
    @Override public void onPowerSaveChanged(){
      mHandler.post(mCheckBarModes);
      if (mDozeServiceHost != null) {
        mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
      }
    }
    @Override public void onBatteryLevelChanged(    int level,    boolean pluggedIn,    boolean charging){
    }
  }
);
  mNetworkController=new NetworkControllerImpl(mContext,mHandlerThread.getLooper());
  mHotspotController=new HotspotControllerImpl(mContext);
  mBluetoothController=new BluetoothControllerImpl(mContext,mHandlerThread.getLooper());
  mSecurityController=new SecurityControllerImpl(mContext);
  if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
    mRotationLockController=new RotationLockControllerImpl(mContext);
  }
  mUserInfoController=new UserInfoController(mContext);
  mVolumeComponent=getComponent(VolumeComponent.class);
  if (mVolumeComponent != null) {
    mZenModeController=mVolumeComponent.getZenController();
  }
  mCastController=new CastControllerImpl(mContext);
  final SignalClusterView signalCluster=(SignalClusterView)mStatusBarView.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterKeyguard=(SignalClusterView)mKeyguardStatusBar.findViewById(R.id.signal_cluster);
  final SignalClusterView signalClusterQs=(SignalClusterView)mHeader.findViewById(R.id.signal_cluster);
  mNetworkController.addSignalCluster(signalCluster);
  mNetworkController.addSignalCluster(signalClusterKeyguard);
  mNetworkController.addSignalCluster(signalClusterQs);
  signalCluster.setSecurityController(mSecurityController);
  signalCluster.setNetworkController(mNetworkController);
  signalClusterKeyguard.setSecurityController(mSecurityController);
  signalClusterKeyguard.setNetworkController(mNetworkController);
  signalClusterQs.setSecurityController(mSecurityController);
  signalClusterQs.setNetworkController(mNetworkController);
  final boolean isAPhone=mNetworkController.hasVoiceCallingFeature();
  if (isAPhone) {
    mNetworkController.addEmergencyListener(new NetworkControllerImpl.EmergencyListener(){
      @Override public void setEmergencyCallsOnly(      boolean emergencyOnly){
        mHeader.setShowEmergencyCallsOnly(emergencyOnly);
      }
    }
);
  }
  mFlashlightController=new FlashlightController(mContext);
  mKeyguardBottomArea.setFlashlightController(mFlashlightController);
  mKeyguardBottomArea.setPhoneStatusBar(this);
  mAccessibilityController=new AccessibilityController(mContext);
  mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
  mNextAlarmController=new NextAlarmController(mContext);
  mKeyguardMonitor=new KeyguardMonitor();
  if (UserSwitcherController.isUserSwitcherAvailable(UserManager.get(mContext))) {
    mUserSwitcherController=new UserSwitcherController(mContext,mKeyguardMonitor);
  }
  mKeyguardUserSwitcher=new KeyguardUserSwitcher(mContext,(ViewStub)mStatusBarWindow.findViewById(R.id.keyguard_user_switcher),mKeyguardStatusBar,mNotificationPanel,mUserSwitcherController);
  mQSPanel=(QSPanel)mStatusBarWindow.findViewById(R.id.quick_settings_panel);
  if (mQSPanel != null) {
    final QSTileHost qsh=new QSTileHost(mContext,this,mBluetoothController,mLocationController,mRotationLockController,mNetworkController,mZenModeController,mHotspotController,mCastController,mFlashlightController,mUserSwitcherController,mKeyguardMonitor,mSecurityController);
    mQSPanel.setHost(qsh);
    mQSPanel.setTiles(qsh.getTiles());
    mBrightnessMirrorController=new BrightnessMirrorController(mStatusBarWindow);
    mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
    mHeader.setQSPanel(mQSPanel);
    qsh.setCallback(new QSTileHost.Callback(){
      @Override public void onTilesChanged(){
        mQSPanel.setTiles(qsh.getTiles());
      }
    }
);
  }
  mHeader.setUserInfoController(mUserInfoController);
  mKeyguardStatusBar.setUserInfoController(mUserInfoController);
  mUserInfoController.reloadUserInfo();
  mHeader.setBatteryController(mBatteryController);
  ((BatteryMeterView)mStatusBarView.findViewById(R.id.battery)).setBatteryController(mBatteryController);
  mKeyguardStatusBar.setBatteryController(mBatteryController);
  mHeader.setNextAlarmController(mNextAlarmController);
  PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mBroadcastReceiver.onReceive(mContext,new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(Intent.ACTION_SCREEN_ON);
  if (DEBUG_MEDIA_FAKE_ARTWORK) {
    filter.addAction(""String_Node_Str"");
  }
  filter.addAction(ACTION_DEMO);
  context.registerReceiverAsUser(mBroadcastReceiver,UserHandle.ALL,filter,null,null);
  resetUserSetupObserver();
  ThreadedRenderer.overrideProperty(""String_Node_Str"",""String_Node_Str"");
  ThreadedRenderer.overrideProperty(""String_Node_Str"",String.valueOf(1.5f));
  return mStatusBarView;
}",0.99765726681128
195132,"private void updateHeadsUpScrim(boolean animate){
  float alpha=calculateHeadsUpAlpha();
  ValueAnimator previousAnimator=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_KEY_ANIM);
  float animEndValue=-1;
  if (previousAnimator != null) {
    if (animate || alpha == mCurrentHeadsUpAlpha) {
      previousAnimator.cancel();
    }
    animEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
  }
  if (alpha != mCurrentHeadsUpAlpha && alpha != animEndValue) {
    if (animate) {
      startScrimAnimation(mHeadsUpScrim,alpha);
      mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,mCurrentHeadsUpAlpha);
      mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
    }
 else {
      if (previousAnimator != null) {
        float previousStartValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
        float previousEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
        PropertyValuesHolder[] values=previousAnimator.getValues();
        float relativeDiff=alpha - previousEndValue;
        float newStartValue=previousStartValue + relativeDiff;
        values[0].setFloatValues(newStartValue,alpha);
        mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,newStartValue);
        mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
        previousAnimator.setCurrentPlayTime(previousAnimator.getCurrentPlayTime());
      }
 else {
        setCurrentScrimAlpha(mHeadsUpScrim,alpha);
        updateScrimColor(mHeadsUpScrim);
      }
    }
  }
}","private void updateHeadsUpScrim(boolean animate){
  float alpha=calculateHeadsUpAlpha();
  ValueAnimator previousAnimator=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_KEY_ANIM);
  float animEndValue=-1;
  if (previousAnimator != null) {
    if (animate || alpha == mCurrentHeadsUpAlpha) {
      previousAnimator.cancel();
    }
 else {
      animEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
    }
  }
  if (alpha != mCurrentHeadsUpAlpha && alpha != animEndValue) {
    if (animate) {
      startScrimAnimation(mHeadsUpScrim,alpha);
      mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,mCurrentHeadsUpAlpha);
      mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
    }
 else {
      if (previousAnimator != null) {
        float previousStartValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_START_ALPHA);
        float previousEndValue=StackStateAnimator.getChildTag(mHeadsUpScrim,TAG_HUN_END_ALPHA);
        PropertyValuesHolder[] values=previousAnimator.getValues();
        float relativeDiff=alpha - previousEndValue;
        float newStartValue=previousStartValue + relativeDiff;
        values[0].setFloatValues(newStartValue,alpha);
        mHeadsUpScrim.setTag(TAG_HUN_START_ALPHA,newStartValue);
        mHeadsUpScrim.setTag(TAG_HUN_END_ALPHA,alpha);
        previousAnimator.setCurrentPlayTime(previousAnimator.getCurrentPlayTime());
      }
 else {
        setCurrentScrimAlpha(mHeadsUpScrim,alpha);
        updateScrimColor(mHeadsUpScrim);
      }
    }
  }
}",0.9919946631087392
195133,"private void applyHeight(State state){
  boolean expanded=state.isKeyguardShowingAndNotOccluded() || state.statusBarExpanded || state.keyguardFadingAway|| state.bouncerShowing|| state.headsUpShowing;
  if (expanded) {
    mLpChanged.height=ViewGroup.LayoutParams.MATCH_PARENT;
  }
 else {
    mLpChanged.height=mBarHeight;
  }
}","private void applyHeight(State state){
  boolean expanded=!state.forceCollapsed && (state.isKeyguardShowingAndNotOccluded() || state.statusBarExpanded || state.keyguardFadingAway|| state.bouncerShowing|| state.headsUpShowing);
  if (expanded) {
    mLpChanged.height=ViewGroup.LayoutParams.MATCH_PARENT;
  }
 else {
    mLpChanged.height=mBarHeight;
  }
}",0.9604685212298684
195134,"public void setIsExpanded(boolean isExpanded){
  if (isExpanded != mIsExpanded) {
    mIsExpanded=isExpanded;
    if (isExpanded) {
      unpinAll();
    }
  }
}","public void setIsExpanded(boolean isExpanded){
  if (isExpanded != mIsExpanded) {
    mIsExpanded=isExpanded;
    if (isExpanded) {
      unpinAll();
      mWaitingOnCollapseWhenGoingAway=false;
      mHeadsUpGoingAway=false;
      updateTouchableRegionListener();
    }
  }
}",0.7368421052631579
195135,"private void updatePinnedMode(){
  boolean hasPinnedNotification=hasPinnedNotificationInternal();
  if (hasPinnedNotification == mHasPinnedNotification) {
    return;
  }
  mHasPinnedNotification=hasPinnedNotification;
  for (  OnHeadsUpChangedListener listener : mListeners) {
    listener.onHeadsUpPinnedModeChanged(hasPinnedNotification);
  }
}","private void updatePinnedMode(){
  boolean hasPinnedNotification=hasPinnedNotificationInternal();
  if (hasPinnedNotification == mHasPinnedNotification) {
    return;
  }
  mHasPinnedNotification=hasPinnedNotification;
  updateTouchableRegionListener();
  for (  OnHeadsUpChangedListener listener : mListeners) {
    listener.onHeadsUpPinnedModeChanged(hasPinnedNotification);
  }
}",0.9519890260631
195136,"public HeadsUpManager(final Context context,ViewTreeObserver observer){
  Resources resources=context.getResources();
  mTouchAcceptanceDelay=resources.getInteger(R.integer.touch_acceptance_delay);
  mSnoozedPackages=new ArrayMap<>();
  mDefaultSnoozeLengthMs=resources.getInteger(R.integer.heads_up_default_snooze_length_ms);
  mSnoozeLengthMs=mDefaultSnoozeLengthMs;
  mMinimumDisplayTime=resources.getInteger(R.integer.heads_up_notification_minimum_time);
  mHeadsUpNotificationDecay=resources.getInteger(R.integer.heads_up_notification_decay);
  mClock=new Clock();
  mSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,mDefaultSnoozeLengthMs);
  mSettingsObserver=new ContentObserver(mHandler){
    @Override public void onChange(    boolean selfChange){
      final int packageSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,-1);
      if (packageSnoozeLengthMs > -1 && packageSnoozeLengthMs != mSnoozeLengthMs) {
        mSnoozeLengthMs=packageSnoozeLengthMs;
        if (DEBUG)         Log.v(TAG,""String_Node_Str"" + mSnoozeLengthMs);
      }
    }
  }
;
  context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(SETTING_HEADS_UP_SNOOZE_LENGTH_MS),false,mSettingsObserver);
  observer.addOnComputeInternalInsetsListener(this);
}","public HeadsUpManager(final Context context,View statusBarWindowView){
  Resources resources=context.getResources();
  mTouchAcceptanceDelay=resources.getInteger(R.integer.touch_acceptance_delay);
  mSnoozedPackages=new ArrayMap<>();
  mDefaultSnoozeLengthMs=resources.getInteger(R.integer.heads_up_default_snooze_length_ms);
  mSnoozeLengthMs=mDefaultSnoozeLengthMs;
  mMinimumDisplayTime=resources.getInteger(R.integer.heads_up_notification_minimum_time);
  mHeadsUpNotificationDecay=resources.getInteger(R.integer.heads_up_notification_decay);
  mClock=new Clock();
  mSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,mDefaultSnoozeLengthMs);
  mSettingsObserver=new ContentObserver(mHandler){
    @Override public void onChange(    boolean selfChange){
      final int packageSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,-1);
      if (packageSnoozeLengthMs > -1 && packageSnoozeLengthMs != mSnoozeLengthMs) {
        mSnoozeLengthMs=packageSnoozeLengthMs;
        if (DEBUG)         Log.v(TAG,""String_Node_Str"" + mSnoozeLengthMs);
      }
    }
  }
;
  context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(SETTING_HEADS_UP_SNOOZE_LENGTH_MS),false,mSettingsObserver);
  mStatusBarWindowView=statusBarWindowView;
  mStatusBarHeight=resources.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
}",0.9196301564722618
195137,"public void onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo info){
  if (!mIsExpanded && mHasPinnedNotification) {
    int minX=Integer.MAX_VALUE;
    int maxX=0;
    int minY=Integer.MAX_VALUE;
    int maxY=0;
    for (    HeadsUpEntry entry : mSortedEntries) {
      ExpandableNotificationRow row=entry.entry.row;
      if (row.isPinned()) {
        row.getLocationOnScreen(mTmpTwoArray);
        minX=Math.min(minX,mTmpTwoArray[0]);
        minY=Math.min(minY,0);
        maxX=Math.max(maxX,mTmpTwoArray[0] + row.getWidth());
        maxY=Math.max(maxY,row.getHeadsUpHeight());
      }
    }
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(minX,minY,maxX,maxY);
  }
}","public void onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo info){
  if (mHasPinnedNotification) {
    int minX=Integer.MAX_VALUE;
    int maxX=0;
    int minY=Integer.MAX_VALUE;
    int maxY=0;
    for (    HeadsUpEntry entry : mSortedEntries) {
      ExpandableNotificationRow row=entry.entry.row;
      if (row.isPinned()) {
        row.getLocationOnScreen(mTmpTwoArray);
        minX=Math.min(minX,mTmpTwoArray[0]);
        minY=Math.min(minY,0);
        maxX=Math.max(maxX,mTmpTwoArray[0] + row.getWidth());
        maxY=Math.max(maxY,row.getHeadsUpHeight());
      }
    }
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(minX,minY,maxX,maxY);
  }
 else   if (mHeadsUpGoingAway || mWaitingOnCollapseWhenGoingAway) {
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(0,0,mStatusBarWindowView.getWidth(),mStatusBarHeight);
  }
}",0.8490783410138248
195138,"@Override public ComponentName getHomeActivityForUser(int userId){
synchronized (ActivityManagerService.this) {
    ActivityRecord homeActivity=mStackSupervisor.getHomeActivityForUser(userId);
    return homeActivity.realActivity;
  }
}","@Override public ComponentName getHomeActivityForUser(int userId){
synchronized (ActivityManagerService.this) {
    ActivityRecord homeActivity=mStackSupervisor.getHomeActivityForUser(userId);
    return homeActivity == null ? null : homeActivity.realActivity;
  }
}",0.9402390438247012
195139,"private void killBackgroundUserProcessesWithRecordAudioPermission(UserInfo oldUser){
  PackageManager pm=mContext.getPackageManager();
  ComponentName homeActivityName=null;
  if (!oldUser.isManagedProfile()) {
    homeActivityName=LocalServices.getService(ActivityManagerInternal.class).getHomeActivityForUser(oldUser.id);
  }
  final String[] permissions={Manifest.permission.RECORD_AUDIO};
  List<PackageInfo> packages;
  try {
    packages=AppGlobals.getPackageManager().getPackagesHoldingPermissions(permissions,0,oldUser.id).getList();
  }
 catch (  RemoteException e) {
    throw new AndroidRuntimeException(e);
  }
  for (int j=packages.size() - 1; j >= 0; j--) {
    PackageInfo pkg=packages.get(j);
    if (homeActivityName != null && pkg.packageName.equals(homeActivityName.getPackageName()) && pkg.applicationInfo.isSystemApp()) {
      continue;
    }
    try {
      ActivityManagerNative.getDefault().killUid(pkg.applicationInfo.uid,""String_Node_Str"");
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
}","private void killBackgroundUserProcessesWithRecordAudioPermission(UserInfo oldUser){
  PackageManager pm=mContext.getPackageManager();
  ComponentName homeActivityName=null;
  if (!oldUser.isManagedProfile()) {
    homeActivityName=LocalServices.getService(ActivityManagerInternal.class).getHomeActivityForUser(oldUser.id);
  }
  final String[] permissions={Manifest.permission.RECORD_AUDIO};
  List<PackageInfo> packages;
  try {
    packages=AppGlobals.getPackageManager().getPackagesHoldingPermissions(permissions,0,oldUser.id).getList();
  }
 catch (  RemoteException e) {
    throw new AndroidRuntimeException(e);
  }
  for (int j=packages.size() - 1; j >= 0; j--) {
    PackageInfo pkg=packages.get(j);
    if (UserHandle.getAppId(pkg.applicationInfo.uid) < FIRST_APPLICATION_UID) {
      continue;
    }
    if (homeActivityName != null && pkg.packageName.equals(homeActivityName.getPackageName()) && pkg.applicationInfo.isSystemApp()) {
      continue;
    }
    try {
      ActivityManagerNative.getDefault().killUid(pkg.applicationInfo.uid,""String_Node_Str"");
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
}",0.9539295392953928
195140,"@Override public ComponentName getHomeActivityForUser(int userId){
synchronized (ActivityManagerService.this) {
    ActivityRecord homeActivity=mStackSupervisor.getHomeActivityForUser(userId);
    return homeActivity.realActivity;
  }
}","@Override public ComponentName getHomeActivityForUser(int userId){
synchronized (ActivityManagerService.this) {
    ActivityRecord homeActivity=mStackSupervisor.getHomeActivityForUser(userId);
    return homeActivity == null ? null : homeActivity.realActivity;
  }
}",0.9402390438247012
195141,"private void killBackgroundUserProcessesWithRecordAudioPermission(UserInfo oldUser){
  PackageManager pm=mContext.getPackageManager();
  ComponentName homeActivityName=null;
  if (!oldUser.isManagedProfile()) {
    homeActivityName=LocalServices.getService(ActivityManagerInternal.class).getHomeActivityForUser(oldUser.id);
  }
  final String[] permissions={Manifest.permission.RECORD_AUDIO};
  List<PackageInfo> packages;
  try {
    packages=AppGlobals.getPackageManager().getPackagesHoldingPermissions(permissions,0,oldUser.id).getList();
  }
 catch (  RemoteException e) {
    throw new AndroidRuntimeException(e);
  }
  for (int j=packages.size() - 1; j >= 0; j--) {
    PackageInfo pkg=packages.get(j);
    if (homeActivityName != null && pkg.packageName.equals(homeActivityName.getPackageName()) && pkg.applicationInfo.isSystemApp()) {
      continue;
    }
    try {
      ActivityManagerNative.getDefault().killUid(pkg.applicationInfo.uid,""String_Node_Str"");
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
}","private void killBackgroundUserProcessesWithRecordAudioPermission(UserInfo oldUser){
  PackageManager pm=mContext.getPackageManager();
  ComponentName homeActivityName=null;
  if (!oldUser.isManagedProfile()) {
    homeActivityName=LocalServices.getService(ActivityManagerInternal.class).getHomeActivityForUser(oldUser.id);
  }
  final String[] permissions={Manifest.permission.RECORD_AUDIO};
  List<PackageInfo> packages;
  try {
    packages=AppGlobals.getPackageManager().getPackagesHoldingPermissions(permissions,0,oldUser.id).getList();
  }
 catch (  RemoteException e) {
    throw new AndroidRuntimeException(e);
  }
  for (int j=packages.size() - 1; j >= 0; j--) {
    PackageInfo pkg=packages.get(j);
    if (UserHandle.getAppId(pkg.applicationInfo.uid) < FIRST_APPLICATION_UID) {
      continue;
    }
    if (homeActivityName != null && pkg.packageName.equals(homeActivityName.getPackageName()) && pkg.applicationInfo.isSystemApp()) {
      continue;
    }
    try {
      ActivityManagerNative.getDefault().killUid(pkg.applicationInfo.uid,""String_Node_Str"");
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
}",0.9539295392953928
195142,"@Override public ComponentName getHomeActivityForUser(int userId){
synchronized (ActivityManagerService.this) {
    ActivityRecord homeActivity=mStackSupervisor.getHomeActivityForUser(userId);
    return homeActivity.realActivity;
  }
}","@Override public ComponentName getHomeActivityForUser(int userId){
synchronized (ActivityManagerService.this) {
    ActivityRecord homeActivity=mStackSupervisor.getHomeActivityForUser(userId);
    return homeActivity == null ? null : homeActivity.realActivity;
  }
}",0.9402390438247012
195143,"private void killBackgroundUserProcessesWithRecordAudioPermission(UserInfo oldUser){
  PackageManager pm=mContext.getPackageManager();
  ComponentName homeActivityName=null;
  if (!oldUser.isManagedProfile()) {
    homeActivityName=LocalServices.getService(ActivityManagerInternal.class).getHomeActivityForUser(oldUser.id);
  }
  final String[] permissions={Manifest.permission.RECORD_AUDIO};
  List<PackageInfo> packages;
  try {
    packages=AppGlobals.getPackageManager().getPackagesHoldingPermissions(permissions,0,oldUser.id).getList();
  }
 catch (  RemoteException e) {
    throw new AndroidRuntimeException(e);
  }
  for (int j=packages.size() - 1; j >= 0; j--) {
    PackageInfo pkg=packages.get(j);
    if (homeActivityName != null && pkg.packageName.equals(homeActivityName.getPackageName()) && pkg.applicationInfo.isSystemApp()) {
      continue;
    }
    try {
      ActivityManagerNative.getDefault().killUid(pkg.applicationInfo.uid,""String_Node_Str"");
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
}","private void killBackgroundUserProcessesWithRecordAudioPermission(UserInfo oldUser){
  PackageManager pm=mContext.getPackageManager();
  ComponentName homeActivityName=null;
  if (!oldUser.isManagedProfile()) {
    homeActivityName=LocalServices.getService(ActivityManagerInternal.class).getHomeActivityForUser(oldUser.id);
  }
  final String[] permissions={Manifest.permission.RECORD_AUDIO};
  List<PackageInfo> packages;
  try {
    packages=AppGlobals.getPackageManager().getPackagesHoldingPermissions(permissions,0,oldUser.id).getList();
  }
 catch (  RemoteException e) {
    throw new AndroidRuntimeException(e);
  }
  for (int j=packages.size() - 1; j >= 0; j--) {
    PackageInfo pkg=packages.get(j);
    if (UserHandle.getAppId(pkg.applicationInfo.uid) < FIRST_APPLICATION_UID) {
      continue;
    }
    if (homeActivityName != null && pkg.packageName.equals(homeActivityName.getPackageName()) && pkg.applicationInfo.isSystemApp()) {
      continue;
    }
    try {
      ActivityManagerNative.getDefault().killUid(pkg.applicationInfo.uid,""String_Node_Str"");
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
}",0.9539295392953928
195144,"public void setSystemUiVisibility(int vis,int mask){
synchronized (mList) {
    mHandler.removeMessages(MSG_SET_SYSTEMUI_VISIBILITY);
    mHandler.obtainMessage(MSG_SET_SYSTEMUI_VISIBILITY,vis,mask,null).sendToTarget();
  }
}","public void setSystemUiVisibility(int vis,int mask){
synchronized (mList) {
    mHandler.obtainMessage(MSG_SET_SYSTEMUI_VISIBILITY,vis,mask,null).sendToTarget();
  }
}",0.8520408163265306
195145,"@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}","@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}",0.9467140319715808
195146,"private void checkBarModes(){
  if (mDemoMode)   return;
  checkBarMode(mStatusBarMode,mStatusBarWindowState,mStatusBarView.getBarTransitions());
  if (mNavigationBarView != null) {
    checkBarMode(mNavigationBarMode,mNavigationBarWindowState,mNavigationBarView.getBarTransitions());
  }
}","private void checkBarModes(){
  if (mDemoMode)   return;
  checkBarMode(mStatusBarMode,mStatusBarWindowState,mStatusBarView.getBarTransitions(),mNoAnimationOnNextBarModeChange);
  if (mNavigationBarView != null) {
    checkBarMode(mNavigationBarMode,mNavigationBarWindowState,mNavigationBarView.getBarTransitions(),mNoAnimationOnNextBarModeChange);
  }
  mNoAnimationOnNextBarModeChange=false;
}",0.8467153284671532
195147,"private void checkBarMode(int mode,int windowState,BarTransitions transitions){
  final boolean powerSave=mBatteryController.isPowerSave();
  final boolean anim=(mScreenOn == null || mScreenOn) && windowState != WINDOW_STATE_HIDDEN && !powerSave;
  if (powerSave && getBarState() == StatusBarState.SHADE) {
    mode=MODE_WARNING;
  }
  transitions.transitionTo(mode,anim);
}","private void checkBarMode(int mode,int windowState,BarTransitions transitions,boolean noAnimation){
  final boolean powerSave=mBatteryController.isPowerSave();
  final boolean anim=!noAnimation && (mScreenOn == null || mScreenOn) && windowState != WINDOW_STATE_HIDDEN && !powerSave;
  if (powerSave && getBarState() == StatusBarState.SHADE) {
    mode=MODE_WARNING;
  }
  transitions.transitionTo(mode,anim);
}",0.9540816326530612
195148,"@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}","@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}",0.9497029702970295
195149,"/** 
 * State is one or more of the DISABLE constants from StatusBarManager.
 */
public void disable(int state1,int state2,boolean animate){
  mDisabledUnmodified1=state1;
  mDisabledUnmodified2=state2;
  state1=adjustDisableFlags(state1);
  final int old1=mDisabled1;
  final int diff1=state1 ^ old1;
  mDisabled1=state1;
  final int old2=mDisabled2;
  final int diff2=state2 ^ old2;
  mDisabled2=state2;
  if (DEBUG) {
    Log.d(TAG,String.format(""String_Node_Str"",old1,state1,diff1));
    Log.d(TAG,String.format(""String_Node_Str"",old2,state2,diff2));
  }
  StringBuilder flagdbg=new StringBuilder();
  flagdbg.append(""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(""String_Node_Str"");
  Log.d(TAG,flagdbg.toString());
  if ((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
    if ((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
      mIconController.hideSystemIconArea(animate);
    }
 else {
      mIconController.showSystemIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) {
    boolean visible=(state1 & StatusBarManager.DISABLE_CLOCK) == 0;
    mIconController.setClockVisibility(visible);
  }
  if ((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) {
    if ((state1 & StatusBarManager.DISABLE_EXPAND) != 0) {
      animateCollapsePanels();
    }
  }
  if ((diff1 & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK| StatusBarManager.DISABLE_SEARCH)) != 0) {
    if (mNavigationBarView != null)     mNavigationBarView.setDisabledFlags(state1);
    if ((state1 & StatusBarManager.DISABLE_RECENT) != 0) {
      mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
      mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
    if ((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
      mIconController.hideNotificationIconArea(animate);
    }
 else {
      mIconController.showNotificationIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
    mDisableNotificationAlerts=(state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
    mHeadsUpObserver.onChange(true);
  }
  if ((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) {
    updateQsExpansionEnabled();
  }
}","/** 
 * State is one or more of the DISABLE constants from StatusBarManager.
 */
public void disable(int state1,int state2,boolean animate){
  animate&=mStatusBarWindowState != WINDOW_STATE_HIDDEN;
  mDisabledUnmodified1=state1;
  mDisabledUnmodified2=state2;
  state1=adjustDisableFlags(state1);
  final int old1=mDisabled1;
  final int diff1=state1 ^ old1;
  mDisabled1=state1;
  final int old2=mDisabled2;
  final int diff2=state2 ^ old2;
  mDisabled2=state2;
  if (DEBUG) {
    Log.d(TAG,String.format(""String_Node_Str"",old1,state1,diff1));
    Log.d(TAG,String.format(""String_Node_Str"",old2,state2,diff2));
  }
  StringBuilder flagdbg=new StringBuilder();
  flagdbg.append(""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(""String_Node_Str"");
  Log.d(TAG,flagdbg.toString());
  if ((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
    if ((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
      mIconController.hideSystemIconArea(animate);
    }
 else {
      mIconController.showSystemIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) {
    boolean visible=(state1 & StatusBarManager.DISABLE_CLOCK) == 0;
    mIconController.setClockVisibility(visible);
  }
  if ((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) {
    if ((state1 & StatusBarManager.DISABLE_EXPAND) != 0) {
      animateCollapsePanels();
    }
  }
  if ((diff1 & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK| StatusBarManager.DISABLE_SEARCH)) != 0) {
    if (mNavigationBarView != null)     mNavigationBarView.setDisabledFlags(state1);
    if ((state1 & StatusBarManager.DISABLE_RECENT) != 0) {
      mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
      mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
    if ((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
      mIconController.hideNotificationIconArea(animate);
    }
 else {
      mIconController.showNotificationIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
    mDisableNotificationAlerts=(state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
    mHeadsUpObserver.onChange(true);
  }
  if ((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) {
    updateQsExpansionEnabled();
  }
}",0.9937493146178308
195150,"void makeExpandedInvisible(){
  if (SPEW)   Log.d(TAG,""String_Node_Str"" + mExpandedVisible + ""String_Node_Str""+ mExpandedVisible);
  if (!mExpandedVisible || mStatusBarWindow == null) {
    return;
  }
  mStatusBarView.collapseAllPanels(false,false,1.0f);
  mNotificationPanel.closeQs();
  mExpandedVisible=false;
  if (mNavigationBarView != null)   mNavigationBarView.setSlippery(false);
  visibilityChanged(false);
  mStatusBarWindowManager.setStatusBarExpanded(false);
  mStatusBarView.setFocusable(true);
  dismissPopups();
  runPostCollapseRunnables();
  setInteracting(StatusBarManager.WINDOW_STATUS_BAR,false);
  showBouncer();
  disable(mDisabledUnmodified1,mDisabledUnmodified2,true);
  if (!mStatusBarKeyguardViewManager.isShowing()) {
    WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
  }
}","void makeExpandedInvisible(){
  if (SPEW)   Log.d(TAG,""String_Node_Str"" + mExpandedVisible + ""String_Node_Str""+ mExpandedVisible);
  if (!mExpandedVisible || mStatusBarWindow == null) {
    return;
  }
  mStatusBarView.collapseAllPanels(false,false,1.0f);
  mNotificationPanel.closeQs();
  mExpandedVisible=false;
  if (mNavigationBarView != null)   mNavigationBarView.setSlippery(false);
  visibilityChanged(false);
  mStatusBarWindowManager.setStatusBarExpanded(false);
  mStatusBarWindowManager.setForceStatusBarVisible(false);
  mStatusBarView.setFocusable(true);
  dismissPopups();
  runPostCollapseRunnables();
  setInteracting(StatusBarManager.WINDOW_STATUS_BAR,false);
  showBouncer();
  disable(mDisabledUnmodified1,mDisabledUnmodified2,true);
  if (!mStatusBarKeyguardViewManager.isShowing()) {
    WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
  }
}",0.9662278191184888
195151,"private void apply(State state){
  applyKeyguardFlags(state);
  applyFocusableFlag(state);
  adjustScreenOrientation(state);
  applyHeight(state);
  applyUserActivityTimeout(state);
  applyInputFeatures(state);
  applyFitsSystemWindows(state);
  applyModalFlag(state);
  if (mLp.copyFrom(mLpChanged) != 0) {
    mWindowManager.updateViewLayout(mStatusBarView,mLp);
  }
}","private void apply(State state){
  applyKeyguardFlags(state);
  applyForceStatusBarVisibleFlag(state);
  applyFocusableFlag(state);
  adjustScreenOrientation(state);
  applyHeight(state);
  applyUserActivityTimeout(state);
  applyInputFeatures(state);
  applyFitsSystemWindows(state);
  applyModalFlag(state);
  if (mLp.copyFrom(mLpChanged) != 0) {
    mWindowManager.updateViewLayout(mStatusBarView,mLp);
  }
}",0.9475032010243278
195152,"public int updateVisibilityLw(boolean transientAllowed,int oldVis,int vis){
  if (mWin == null)   return vis;
  if (isTransientShowing() || isTransientShowRequested()) {
    if (transientAllowed) {
      vis|=mTransientFlag;
      if ((oldVis & mTransientFlag) == 0) {
        vis|=mUnhideFlag;
      }
      setTransientBarState(TRANSIENT_BAR_SHOWING);
    }
 else {
      setTransientBarState(TRANSIENT_BAR_NONE);
    }
  }
  if (mTransientBarState != TRANSIENT_BAR_NONE) {
    vis|=mTransientFlag;
    vis&=~View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
  if ((vis & mTranslucentFlag) != 0 || (oldVis & mTranslucentFlag) != 0 || ((vis | oldVis) & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
    mLastTranslucent=SystemClock.uptimeMillis();
  }
  return vis;
}","public int updateVisibilityLw(boolean transientAllowed,int oldVis,int vis){
  if (mWin == null)   return vis;
  if (isTransientShowing() || isTransientShowRequested()) {
    if (transientAllowed) {
      vis|=mTransientFlag;
      if ((oldVis & mTransientFlag) == 0) {
        vis|=mUnhideFlag;
      }
      setTransientBarState(TRANSIENT_BAR_SHOWING);
    }
 else {
      setTransientBarState(TRANSIENT_BAR_NONE);
    }
  }
  if (mShowTransparent) {
    vis|=View.SYSTEM_UI_TRANSPARENT;
    if (mSetUnHideFlagWhenNextTransparent) {
      vis|=mUnhideFlag;
      mSetUnHideFlagWhenNextTransparent=false;
    }
  }
  if (mTransientBarState != TRANSIENT_BAR_NONE) {
    vis|=mTransientFlag;
    vis&=~View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
  if ((vis & mTranslucentFlag) != 0 || (oldVis & mTranslucentFlag) != 0 || ((vis | oldVis) & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
    mLastTranslucent=SystemClock.uptimeMillis();
  }
  return vis;
}",0.8879668049792531
195153,"public boolean setBarShowingLw(final boolean show){
  if (mWin == null)   return false;
  if (show && mTransientBarState == TRANSIENT_BAR_HIDING) {
    mPendingShow=true;
    return false;
  }
  final boolean wasVis=mWin.isVisibleLw();
  final boolean wasAnim=mWin.isAnimatingLw();
  final boolean change=show ? mWin.showLw(true) : mWin.hideLw(true);
  final int state=computeStateLw(wasVis,wasAnim,mWin,change);
  final boolean stateChanged=updateStateLw(state);
  return change || stateChanged;
}","public boolean setBarShowingLw(final boolean show){
  if (mWin == null)   return false;
  if (show && mTransientBarState == TRANSIENT_BAR_HIDING) {
    mPendingShow=true;
    return false;
  }
  final boolean wasVis=mWin.isVisibleLw();
  final boolean wasAnim=mWin.isAnimatingLw();
  final boolean change=show ? mWin.showLw(!mNoAnimationOnNextShow) : mWin.hideLw(!mNoAnimationOnNextShow);
  mNoAnimationOnNextShow=false;
  final int state=computeStateLw(wasVis,wasAnim,mWin,change);
  final boolean stateChanged=updateStateLw(state);
  return change || stateChanged;
}",0.9174484052532832
195154,"/** 
 * {@inheritDoc} 
 */
@Override public void beginPostLayoutPolicyLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mTopFullscreenOpaqueOrDimmingWindowState=null;
  mAppsToBeHidden.clear();
  mAppsThatDismissKeyguard.clear();
  mForceStatusBar=false;
  mForceStatusBarFromKeyguard=false;
  mForcingShowNavBar=false;
  mForcingShowNavBarLayer=-1;
  mHideLockScreen=false;
  mAllowLockscreenWhenOn=false;
  mDismissKeyguard=DISMISS_KEYGUARD_NONE;
  mShowingLockscreen=false;
  mShowingDream=false;
  mWinShowWhenLocked=null;
  mKeyguardSecure=isKeyguardSecure();
  mKeyguardSecureIncludingHidden=mKeyguardSecure && (mKeyguardDelegate != null && mKeyguardDelegate.isShowing());
}","/** 
 * {@inheritDoc} 
 */
@Override public void beginPostLayoutPolicyLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mTopFullscreenOpaqueOrDimmingWindowState=null;
  mAppsToBeHidden.clear();
  mAppsThatDismissKeyguard.clear();
  mForceStatusBar=false;
  mForceStatusBarFromKeyguard=false;
  mForceStatusBarTransparent=false;
  mForcingShowNavBar=false;
  mForcingShowNavBarLayer=-1;
  mHideLockScreen=false;
  mAllowLockscreenWhenOn=false;
  mDismissKeyguard=DISMISS_KEYGUARD_NONE;
  mShowingLockscreen=false;
  mShowingDream=false;
  mWinShowWhenLocked=null;
  mKeyguardSecure=isKeyguardSecure();
  mKeyguardSecureIncludingHidden=mKeyguardSecure && (mKeyguardDelegate != null && mKeyguardDelegate.isShowing());
}",0.9753424657534246
195155,"/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR && (attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
    mForceStatusBarFromKeyguard=true;
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    if (appWindow) {
      final IApplicationToken appToken=win.getAppToken();
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=mWinDismissingKeyguard == win ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    if (appWindow) {
      final IApplicationToken appToken=win.getAppToken();
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=mWinDismissingKeyguard == win ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}",0.9806562193927522
195156,"/** 
 * {@inheritDoc} 
 */
@Override public int finishPostLayoutPolicyLw(){
  if (mWinShowWhenLocked != null && mTopFullscreenOpaqueWindowState != null && mWinShowWhenLocked.getAppToken() != mTopFullscreenOpaqueWindowState.getAppToken() && isKeyguardLocked()) {
    mWinShowWhenLocked.getAttrs().flags|=FLAG_SHOW_WALLPAPER;
    mTopFullscreenOpaqueWindowState.hideLw(false);
    mTopFullscreenOpaqueWindowState=mWinShowWhenLocked;
  }
  int changes=0;
  boolean topIsFullscreen=false;
  final WindowManager.LayoutParams lp=(mTopFullscreenOpaqueWindowState != null) ? mTopFullscreenOpaqueWindowState.getAttrs() : null;
  if (!mShowingDream) {
    mDreamingLockscreen=mShowingLockscreen;
    if (mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=false;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,0,1).sendToTarget();
    }
  }
 else {
    if (!mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=true;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,1,1).sendToTarget();
    }
  }
  if (mStatusBar != null) {
    if (DEBUG_LAYOUT)     Slog.i(TAG,""String_Node_Str"" + mForceStatusBar + ""String_Node_Str""+ mForceStatusBarFromKeyguard+ ""String_Node_Str""+ mTopFullscreenOpaqueWindowState);
    if (mForceStatusBar || mForceStatusBarFromKeyguard) {
      if (DEBUG_LAYOUT)       Slog.v(TAG,""String_Node_Str"");
      if (mStatusBarController.setBarShowingLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT;
      }
      topIsFullscreen=mTopIsFullscreen && mStatusBar.isAnimatingLw();
      if (mForceStatusBarFromKeyguard && mStatusBarController.isTransientShowing()) {
        mStatusBarController.updateVisibilityLw(false,mLastSystemUiFlags,mLastSystemUiFlags);
      }
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      final int fl=PolicyControl.getWindowFlags(null,lp);
      if (localLOGV) {
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getFrameLw() + ""String_Node_Str""+ mTopFullscreenOpaqueWindowState.getShownFrameLw());
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getAttrs() + ""String_Node_Str""+ Integer.toHexString(fl));
      }
      topIsFullscreen=(fl & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0 || (mLastSystemUiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0;
      if (mStatusBarController.isTransientShowing()) {
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
 else       if (topIsFullscreen) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
 else {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"");
        }
      }
 else {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
    }
  }
  if (mTopIsFullscreen != topIsFullscreen) {
    if (!topIsFullscreen) {
      changes|=FINISH_LAYOUT_REDO_LAYOUT;
    }
    mTopIsFullscreen=topIsFullscreen;
  }
  if (mKeyguardDelegate != null && mStatusBar != null) {
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + mHideLockScreen);
    if (mDismissKeyguard != DISMISS_KEYGUARD_NONE && !mKeyguardSecure) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      if (mKeyguardDelegate.isShowing()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.keyguardDone(false,false);
          }
        }
);
      }
    }
 else     if (mHideLockScreen) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
 else     if (mDismissKeyguard != DISMISS_KEYGUARD_NONE) {
      if (mDismissKeyguard == DISMISS_KEYGUARD_START) {
        mKeyguardHidden=false;
        if (setKeyguardOccludedLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
        }
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.dismiss();
          }
        }
);
      }
    }
 else {
      mWinDismissingKeyguard=null;
      mKeyguardHidden=false;
      if (setKeyguardOccludedLw(false)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
  }
  if ((updateSystemUiVisibilityLw() & SYSTEM_UI_CHANGING_LAYOUT) != 0) {
    changes|=FINISH_LAYOUT_REDO_LAYOUT;
  }
  updateLockScreenTimeout();
  return changes;
}","/** 
 * {@inheritDoc} 
 */
@Override public int finishPostLayoutPolicyLw(){
  if (mWinShowWhenLocked != null && mTopFullscreenOpaqueWindowState != null && mWinShowWhenLocked.getAppToken() != mTopFullscreenOpaqueWindowState.getAppToken() && isKeyguardLocked()) {
    mWinShowWhenLocked.getAttrs().flags|=FLAG_SHOW_WALLPAPER;
    mTopFullscreenOpaqueWindowState.hideLw(false);
    mTopFullscreenOpaqueWindowState=mWinShowWhenLocked;
  }
  int changes=0;
  boolean topIsFullscreen=false;
  final WindowManager.LayoutParams lp=(mTopFullscreenOpaqueWindowState != null) ? mTopFullscreenOpaqueWindowState.getAttrs() : null;
  if (!mShowingDream) {
    mDreamingLockscreen=mShowingLockscreen;
    if (mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=false;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,0,1).sendToTarget();
    }
  }
 else {
    if (!mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=true;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,1,1).sendToTarget();
    }
  }
  if (mStatusBar != null) {
    if (DEBUG_LAYOUT)     Slog.i(TAG,""String_Node_Str"" + mForceStatusBar + ""String_Node_Str""+ mForceStatusBarFromKeyguard+ ""String_Node_Str""+ mTopFullscreenOpaqueWindowState);
    boolean shouldBeTransparent=mForceStatusBarTransparent && !mForceStatusBar && !mForceStatusBarFromKeyguard;
    if (!shouldBeTransparent) {
      mStatusBarController.setShowTransparent(false);
    }
 else     if (!mStatusBar.isVisibleLw()) {
      mStatusBarController.setShowTransparent(true);
    }
    if (mForceStatusBar || mForceStatusBarFromKeyguard || mForceStatusBarTransparent) {
      if (DEBUG_LAYOUT)       Slog.v(TAG,""String_Node_Str"");
      if (mStatusBarController.setBarShowingLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT;
      }
      topIsFullscreen=mTopIsFullscreen && mStatusBar.isAnimatingLw();
      if (mForceStatusBarFromKeyguard && mStatusBarController.isTransientShowing()) {
        mStatusBarController.updateVisibilityLw(false,mLastSystemUiFlags,mLastSystemUiFlags);
      }
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      final int fl=PolicyControl.getWindowFlags(null,lp);
      if (localLOGV) {
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getFrameLw() + ""String_Node_Str""+ mTopFullscreenOpaqueWindowState.getShownFrameLw());
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getAttrs() + ""String_Node_Str""+ Integer.toHexString(fl));
      }
      topIsFullscreen=(fl & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0 || (mLastSystemUiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0;
      if (mStatusBarController.isTransientShowing()) {
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
 else       if (topIsFullscreen) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
 else {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"");
        }
      }
 else {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
    }
  }
  if (mTopIsFullscreen != topIsFullscreen) {
    if (!topIsFullscreen) {
      changes|=FINISH_LAYOUT_REDO_LAYOUT;
    }
    mTopIsFullscreen=topIsFullscreen;
  }
  if (mKeyguardDelegate != null && mStatusBar != null) {
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + mHideLockScreen);
    if (mDismissKeyguard != DISMISS_KEYGUARD_NONE && !mKeyguardSecure) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      if (mKeyguardDelegate.isShowing()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.keyguardDone(false,false);
          }
        }
);
      }
    }
 else     if (mHideLockScreen) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
 else     if (mDismissKeyguard != DISMISS_KEYGUARD_NONE) {
      if (mDismissKeyguard == DISMISS_KEYGUARD_START) {
        mKeyguardHidden=false;
        if (setKeyguardOccludedLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
        }
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.dismiss();
          }
        }
);
      }
    }
 else {
      mWinDismissingKeyguard=null;
      mKeyguardHidden=false;
      if (setKeyguardOccludedLw(false)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
  }
  if ((updateSystemUiVisibilityLw() & SYSTEM_UI_CHANGING_LAYOUT) != 0) {
    changes|=FINISH_LAYOUT_REDO_LAYOUT;
  }
  updateLockScreenTimeout();
  return changes;
}",0.9663932786557312
195157,"@Override public boolean activeServiceSupportsLaunchFromKeyguard() throws RemoteException {
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo.getSupportsLaunchFromKeyguard();
  }
}","@Override public boolean activeServiceSupportsLaunchFromKeyguard() throws RemoteException {
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo != null && mImpl.mInfo.getSupportsLaunchFromKeyguard();
  }
}",0.9597197898423818
195158,"@Override public boolean activeServiceSupportsAssist(){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo.getSupportsAssist();
  }
}","@Override public boolean activeServiceSupportsAssist(){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo != null && mImpl.mInfo.getSupportsAssist();
  }
}",0.9515789473684212
195159,"public void setSystemUiVisibility(int vis,int mask){
synchronized (mList) {
    mHandler.removeMessages(MSG_SET_SYSTEMUI_VISIBILITY);
    mHandler.obtainMessage(MSG_SET_SYSTEMUI_VISIBILITY,vis,mask,null).sendToTarget();
  }
}","public void setSystemUiVisibility(int vis,int mask){
synchronized (mList) {
    mHandler.obtainMessage(MSG_SET_SYSTEMUI_VISIBILITY,vis,mask,null).sendToTarget();
  }
}",0.8520408163265306
195160,"@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}","@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}",0.9467140319715808
195161,"private void checkBarModes(){
  if (mDemoMode)   return;
  checkBarMode(mStatusBarMode,mStatusBarWindowState,mStatusBarView.getBarTransitions());
  if (mNavigationBarView != null) {
    checkBarMode(mNavigationBarMode,mNavigationBarWindowState,mNavigationBarView.getBarTransitions());
  }
}","private void checkBarModes(){
  if (mDemoMode)   return;
  checkBarMode(mStatusBarMode,mStatusBarWindowState,mStatusBarView.getBarTransitions(),mNoAnimationOnNextBarModeChange);
  if (mNavigationBarView != null) {
    checkBarMode(mNavigationBarMode,mNavigationBarWindowState,mNavigationBarView.getBarTransitions(),mNoAnimationOnNextBarModeChange);
  }
  mNoAnimationOnNextBarModeChange=false;
}",0.8467153284671532
195162,"private void checkBarMode(int mode,int windowState,BarTransitions transitions){
  final boolean powerSave=mBatteryController.isPowerSave();
  final boolean anim=(mScreenOn == null || mScreenOn) && windowState != WINDOW_STATE_HIDDEN && !powerSave;
  if (powerSave && getBarState() == StatusBarState.SHADE) {
    mode=MODE_WARNING;
  }
  transitions.transitionTo(mode,anim);
}","private void checkBarMode(int mode,int windowState,BarTransitions transitions,boolean noAnimation){
  final boolean powerSave=mBatteryController.isPowerSave();
  final boolean anim=!noAnimation && (mScreenOn == null || mScreenOn) && windowState != WINDOW_STATE_HIDDEN && !powerSave;
  if (powerSave && getBarState() == StatusBarState.SHADE) {
    mode=MODE_WARNING;
  }
  transitions.transitionTo(mode,anim);
}",0.9540816326530612
195163,"@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}","@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}",0.9497029702970295
195164,"/** 
 * State is one or more of the DISABLE constants from StatusBarManager.
 */
public void disable(int state1,int state2,boolean animate){
  mDisabledUnmodified1=state1;
  mDisabledUnmodified2=state2;
  state1=adjustDisableFlags(state1);
  final int old1=mDisabled1;
  final int diff1=state1 ^ old1;
  mDisabled1=state1;
  final int old2=mDisabled2;
  final int diff2=state2 ^ old2;
  mDisabled2=state2;
  if (DEBUG) {
    Log.d(TAG,String.format(""String_Node_Str"",old1,state1,diff1));
    Log.d(TAG,String.format(""String_Node_Str"",old2,state2,diff2));
  }
  StringBuilder flagdbg=new StringBuilder();
  flagdbg.append(""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(""String_Node_Str"");
  Log.d(TAG,flagdbg.toString());
  if ((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
    if ((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
      mIconController.hideSystemIconArea(animate);
    }
 else {
      mIconController.showSystemIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) {
    boolean visible=(state1 & StatusBarManager.DISABLE_CLOCK) == 0;
    mIconController.setClockVisibility(visible);
  }
  if ((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) {
    if ((state1 & StatusBarManager.DISABLE_EXPAND) != 0) {
      animateCollapsePanels();
    }
  }
  if ((diff1 & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK| StatusBarManager.DISABLE_SEARCH)) != 0) {
    if (mNavigationBarView != null)     mNavigationBarView.setDisabledFlags(state1);
    if ((state1 & StatusBarManager.DISABLE_RECENT) != 0) {
      mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
      mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
    if ((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
      mIconController.hideNotificationIconArea(animate);
    }
 else {
      mIconController.showNotificationIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
    mDisableNotificationAlerts=(state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
    mHeadsUpObserver.onChange(true);
  }
  if ((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) {
    updateQsExpansionEnabled();
  }
}","/** 
 * State is one or more of the DISABLE constants from StatusBarManager.
 */
public void disable(int state1,int state2,boolean animate){
  animate&=mStatusBarWindowState != WINDOW_STATE_HIDDEN;
  mDisabledUnmodified1=state1;
  mDisabledUnmodified2=state2;
  state1=adjustDisableFlags(state1);
  final int old1=mDisabled1;
  final int diff1=state1 ^ old1;
  mDisabled1=state1;
  final int old2=mDisabled2;
  final int diff2=state2 ^ old2;
  mDisabled2=state2;
  if (DEBUG) {
    Log.d(TAG,String.format(""String_Node_Str"",old1,state1,diff1));
    Log.d(TAG,String.format(""String_Node_Str"",old2,state2,diff2));
  }
  StringBuilder flagdbg=new StringBuilder();
  flagdbg.append(""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(""String_Node_Str"");
  Log.d(TAG,flagdbg.toString());
  if ((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
    if ((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
      mIconController.hideSystemIconArea(animate);
    }
 else {
      mIconController.showSystemIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) {
    boolean visible=(state1 & StatusBarManager.DISABLE_CLOCK) == 0;
    mIconController.setClockVisibility(visible);
  }
  if ((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) {
    if ((state1 & StatusBarManager.DISABLE_EXPAND) != 0) {
      animateCollapsePanels();
    }
  }
  if ((diff1 & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK| StatusBarManager.DISABLE_SEARCH)) != 0) {
    if (mNavigationBarView != null)     mNavigationBarView.setDisabledFlags(state1);
    if ((state1 & StatusBarManager.DISABLE_RECENT) != 0) {
      mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
      mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
    if ((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
      mIconController.hideNotificationIconArea(animate);
    }
 else {
      mIconController.showNotificationIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
    mDisableNotificationAlerts=(state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
    mHeadsUpObserver.onChange(true);
  }
  if ((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) {
    updateQsExpansionEnabled();
  }
}",0.9937493146178308
195165,"void makeExpandedInvisible(){
  if (SPEW)   Log.d(TAG,""String_Node_Str"" + mExpandedVisible + ""String_Node_Str""+ mExpandedVisible);
  if (!mExpandedVisible || mStatusBarWindow == null) {
    return;
  }
  mStatusBarView.collapseAllPanels(false,false,1.0f);
  mNotificationPanel.closeQs();
  mExpandedVisible=false;
  if (mNavigationBarView != null)   mNavigationBarView.setSlippery(false);
  visibilityChanged(false);
  mStatusBarWindowManager.setStatusBarExpanded(false);
  mStatusBarView.setFocusable(true);
  dismissPopups();
  runPostCollapseRunnables();
  setInteracting(StatusBarManager.WINDOW_STATUS_BAR,false);
  showBouncer();
  disable(mDisabledUnmodified1,mDisabledUnmodified2,true);
  if (!mStatusBarKeyguardViewManager.isShowing()) {
    WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
  }
}","void makeExpandedInvisible(){
  if (SPEW)   Log.d(TAG,""String_Node_Str"" + mExpandedVisible + ""String_Node_Str""+ mExpandedVisible);
  if (!mExpandedVisible || mStatusBarWindow == null) {
    return;
  }
  mStatusBarView.collapseAllPanels(false,false,1.0f);
  mNotificationPanel.closeQs();
  mExpandedVisible=false;
  if (mNavigationBarView != null)   mNavigationBarView.setSlippery(false);
  visibilityChanged(false);
  mStatusBarWindowManager.setStatusBarExpanded(false);
  mStatusBarWindowManager.setForceStatusBarVisible(false);
  mStatusBarView.setFocusable(true);
  dismissPopups();
  runPostCollapseRunnables();
  setInteracting(StatusBarManager.WINDOW_STATUS_BAR,false);
  showBouncer();
  disable(mDisabledUnmodified1,mDisabledUnmodified2,true);
  if (!mStatusBarKeyguardViewManager.isShowing()) {
    WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
  }
}",0.9662278191184888
195166,"private void apply(State state){
  applyKeyguardFlags(state);
  applyFocusableFlag(state);
  adjustScreenOrientation(state);
  applyHeight(state);
  applyUserActivityTimeout(state);
  applyInputFeatures(state);
  applyFitsSystemWindows(state);
  applyModalFlag(state);
  if (mLp.copyFrom(mLpChanged) != 0) {
    mWindowManager.updateViewLayout(mStatusBarView,mLp);
  }
}","private void apply(State state){
  applyKeyguardFlags(state);
  applyForceStatusBarVisibleFlag(state);
  applyFocusableFlag(state);
  adjustScreenOrientation(state);
  applyHeight(state);
  applyUserActivityTimeout(state);
  applyInputFeatures(state);
  applyFitsSystemWindows(state);
  applyModalFlag(state);
  if (mLp.copyFrom(mLpChanged) != 0) {
    mWindowManager.updateViewLayout(mStatusBarView,mLp);
  }
}",0.9475032010243278
195167,"public int updateVisibilityLw(boolean transientAllowed,int oldVis,int vis){
  if (mWin == null)   return vis;
  if (isTransientShowing() || isTransientShowRequested()) {
    if (transientAllowed) {
      vis|=mTransientFlag;
      if ((oldVis & mTransientFlag) == 0) {
        vis|=mUnhideFlag;
      }
      setTransientBarState(TRANSIENT_BAR_SHOWING);
    }
 else {
      setTransientBarState(TRANSIENT_BAR_NONE);
    }
  }
  if (mTransientBarState != TRANSIENT_BAR_NONE) {
    vis|=mTransientFlag;
    vis&=~View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
  if ((vis & mTranslucentFlag) != 0 || (oldVis & mTranslucentFlag) != 0 || ((vis | oldVis) & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
    mLastTranslucent=SystemClock.uptimeMillis();
  }
  return vis;
}","public int updateVisibilityLw(boolean transientAllowed,int oldVis,int vis){
  if (mWin == null)   return vis;
  if (isTransientShowing() || isTransientShowRequested()) {
    if (transientAllowed) {
      vis|=mTransientFlag;
      if ((oldVis & mTransientFlag) == 0) {
        vis|=mUnhideFlag;
      }
      setTransientBarState(TRANSIENT_BAR_SHOWING);
    }
 else {
      setTransientBarState(TRANSIENT_BAR_NONE);
    }
  }
  if (mShowTransparent) {
    vis|=View.SYSTEM_UI_TRANSPARENT;
    if (mSetUnHideFlagWhenNextTransparent) {
      vis|=mUnhideFlag;
      mSetUnHideFlagWhenNextTransparent=false;
    }
  }
  if (mTransientBarState != TRANSIENT_BAR_NONE) {
    vis|=mTransientFlag;
    vis&=~View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
  if ((vis & mTranslucentFlag) != 0 || (oldVis & mTranslucentFlag) != 0 || ((vis | oldVis) & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
    mLastTranslucent=SystemClock.uptimeMillis();
  }
  return vis;
}",0.8879668049792531
195168,"public boolean setBarShowingLw(final boolean show){
  if (mWin == null)   return false;
  if (show && mTransientBarState == TRANSIENT_BAR_HIDING) {
    mPendingShow=true;
    return false;
  }
  final boolean wasVis=mWin.isVisibleLw();
  final boolean wasAnim=mWin.isAnimatingLw();
  final boolean change=show ? mWin.showLw(true) : mWin.hideLw(true);
  final int state=computeStateLw(wasVis,wasAnim,mWin,change);
  final boolean stateChanged=updateStateLw(state);
  return change || stateChanged;
}","public boolean setBarShowingLw(final boolean show){
  if (mWin == null)   return false;
  if (show && mTransientBarState == TRANSIENT_BAR_HIDING) {
    mPendingShow=true;
    return false;
  }
  final boolean wasVis=mWin.isVisibleLw();
  final boolean wasAnim=mWin.isAnimatingLw();
  final boolean change=show ? mWin.showLw(!mNoAnimationOnNextShow) : mWin.hideLw(!mNoAnimationOnNextShow);
  mNoAnimationOnNextShow=false;
  final int state=computeStateLw(wasVis,wasAnim,mWin,change);
  final boolean stateChanged=updateStateLw(state);
  return change || stateChanged;
}",0.9174484052532832
195169,"/** 
 * {@inheritDoc} 
 */
@Override public void beginPostLayoutPolicyLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mTopFullscreenOpaqueOrDimmingWindowState=null;
  mAppsToBeHidden.clear();
  mAppsThatDismissKeyguard.clear();
  mForceStatusBar=false;
  mForceStatusBarFromKeyguard=false;
  mForcingShowNavBar=false;
  mForcingShowNavBarLayer=-1;
  mHideLockScreen=false;
  mAllowLockscreenWhenOn=false;
  mDismissKeyguard=DISMISS_KEYGUARD_NONE;
  mShowingLockscreen=false;
  mShowingDream=false;
  mWinShowWhenLocked=null;
  mKeyguardSecure=isKeyguardSecure();
  mKeyguardSecureIncludingHidden=mKeyguardSecure && (mKeyguardDelegate != null && mKeyguardDelegate.isShowing());
}","/** 
 * {@inheritDoc} 
 */
@Override public void beginPostLayoutPolicyLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mTopFullscreenOpaqueOrDimmingWindowState=null;
  mAppsToBeHidden.clear();
  mAppsThatDismissKeyguard.clear();
  mForceStatusBar=false;
  mForceStatusBarFromKeyguard=false;
  mForceStatusBarTransparent=false;
  mForcingShowNavBar=false;
  mForcingShowNavBarLayer=-1;
  mHideLockScreen=false;
  mAllowLockscreenWhenOn=false;
  mDismissKeyguard=DISMISS_KEYGUARD_NONE;
  mShowingLockscreen=false;
  mShowingDream=false;
  mWinShowWhenLocked=null;
  mKeyguardSecure=isKeyguardSecure();
  mKeyguardSecureIncludingHidden=mKeyguardSecure && (mKeyguardDelegate != null && mKeyguardDelegate.isShowing());
}",0.9753424657534246
195170,"/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR && (attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
    mForceStatusBarFromKeyguard=true;
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    if (appWindow) {
      final IApplicationToken appToken=win.getAppToken();
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=mWinDismissingKeyguard == win ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    if (appWindow) {
      final IApplicationToken appToken=win.getAppToken();
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=mWinDismissingKeyguard == win ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}",0.9806562193927522
195171,"/** 
 * {@inheritDoc} 
 */
@Override public int finishPostLayoutPolicyLw(){
  if (mWinShowWhenLocked != null && mTopFullscreenOpaqueWindowState != null && mWinShowWhenLocked.getAppToken() != mTopFullscreenOpaqueWindowState.getAppToken() && isKeyguardLocked()) {
    mWinShowWhenLocked.getAttrs().flags|=FLAG_SHOW_WALLPAPER;
    mTopFullscreenOpaqueWindowState.hideLw(false);
    mTopFullscreenOpaqueWindowState=mWinShowWhenLocked;
  }
  int changes=0;
  boolean topIsFullscreen=false;
  final WindowManager.LayoutParams lp=(mTopFullscreenOpaqueWindowState != null) ? mTopFullscreenOpaqueWindowState.getAttrs() : null;
  if (!mShowingDream) {
    mDreamingLockscreen=mShowingLockscreen;
    if (mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=false;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,0,1).sendToTarget();
    }
  }
 else {
    if (!mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=true;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,1,1).sendToTarget();
    }
  }
  if (mStatusBar != null) {
    if (DEBUG_LAYOUT)     Slog.i(TAG,""String_Node_Str"" + mForceStatusBar + ""String_Node_Str""+ mForceStatusBarFromKeyguard+ ""String_Node_Str""+ mTopFullscreenOpaqueWindowState);
    if (mForceStatusBar || mForceStatusBarFromKeyguard) {
      if (DEBUG_LAYOUT)       Slog.v(TAG,""String_Node_Str"");
      if (mStatusBarController.setBarShowingLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT;
      }
      topIsFullscreen=mTopIsFullscreen && mStatusBar.isAnimatingLw();
      if (mForceStatusBarFromKeyguard && mStatusBarController.isTransientShowing()) {
        mStatusBarController.updateVisibilityLw(false,mLastSystemUiFlags,mLastSystemUiFlags);
      }
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      final int fl=PolicyControl.getWindowFlags(null,lp);
      if (localLOGV) {
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getFrameLw() + ""String_Node_Str""+ mTopFullscreenOpaqueWindowState.getShownFrameLw());
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getAttrs() + ""String_Node_Str""+ Integer.toHexString(fl));
      }
      topIsFullscreen=(fl & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0 || (mLastSystemUiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0;
      if (mStatusBarController.isTransientShowing()) {
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
 else       if (topIsFullscreen) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
 else {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"");
        }
      }
 else {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
    }
  }
  if (mTopIsFullscreen != topIsFullscreen) {
    if (!topIsFullscreen) {
      changes|=FINISH_LAYOUT_REDO_LAYOUT;
    }
    mTopIsFullscreen=topIsFullscreen;
  }
  if (mKeyguardDelegate != null && mStatusBar != null) {
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + mHideLockScreen);
    if (mDismissKeyguard != DISMISS_KEYGUARD_NONE && !mKeyguardSecure) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      if (mKeyguardDelegate.isShowing()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.keyguardDone(false,false);
          }
        }
);
      }
    }
 else     if (mHideLockScreen) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
 else     if (mDismissKeyguard != DISMISS_KEYGUARD_NONE) {
      if (mDismissKeyguard == DISMISS_KEYGUARD_START) {
        mKeyguardHidden=false;
        if (setKeyguardOccludedLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
        }
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.dismiss();
          }
        }
);
      }
    }
 else {
      mWinDismissingKeyguard=null;
      mKeyguardHidden=false;
      if (setKeyguardOccludedLw(false)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
  }
  if ((updateSystemUiVisibilityLw() & SYSTEM_UI_CHANGING_LAYOUT) != 0) {
    changes|=FINISH_LAYOUT_REDO_LAYOUT;
  }
  updateLockScreenTimeout();
  return changes;
}","/** 
 * {@inheritDoc} 
 */
@Override public int finishPostLayoutPolicyLw(){
  if (mWinShowWhenLocked != null && mTopFullscreenOpaqueWindowState != null && mWinShowWhenLocked.getAppToken() != mTopFullscreenOpaqueWindowState.getAppToken() && isKeyguardLocked()) {
    mWinShowWhenLocked.getAttrs().flags|=FLAG_SHOW_WALLPAPER;
    mTopFullscreenOpaqueWindowState.hideLw(false);
    mTopFullscreenOpaqueWindowState=mWinShowWhenLocked;
  }
  int changes=0;
  boolean topIsFullscreen=false;
  final WindowManager.LayoutParams lp=(mTopFullscreenOpaqueWindowState != null) ? mTopFullscreenOpaqueWindowState.getAttrs() : null;
  if (!mShowingDream) {
    mDreamingLockscreen=mShowingLockscreen;
    if (mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=false;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,0,1).sendToTarget();
    }
  }
 else {
    if (!mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=true;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,1,1).sendToTarget();
    }
  }
  if (mStatusBar != null) {
    if (DEBUG_LAYOUT)     Slog.i(TAG,""String_Node_Str"" + mForceStatusBar + ""String_Node_Str""+ mForceStatusBarFromKeyguard+ ""String_Node_Str""+ mTopFullscreenOpaqueWindowState);
    boolean shouldBeTransparent=mForceStatusBarTransparent && !mForceStatusBar && !mForceStatusBarFromKeyguard;
    if (!shouldBeTransparent) {
      mStatusBarController.setShowTransparent(false);
    }
 else     if (!mStatusBar.isVisibleLw()) {
      mStatusBarController.setShowTransparent(true);
    }
    if (mForceStatusBar || mForceStatusBarFromKeyguard || mForceStatusBarTransparent) {
      if (DEBUG_LAYOUT)       Slog.v(TAG,""String_Node_Str"");
      if (mStatusBarController.setBarShowingLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT;
      }
      topIsFullscreen=mTopIsFullscreen && mStatusBar.isAnimatingLw();
      if (mForceStatusBarFromKeyguard && mStatusBarController.isTransientShowing()) {
        mStatusBarController.updateVisibilityLw(false,mLastSystemUiFlags,mLastSystemUiFlags);
      }
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      final int fl=PolicyControl.getWindowFlags(null,lp);
      if (localLOGV) {
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getFrameLw() + ""String_Node_Str""+ mTopFullscreenOpaqueWindowState.getShownFrameLw());
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getAttrs() + ""String_Node_Str""+ Integer.toHexString(fl));
      }
      topIsFullscreen=(fl & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0 || (mLastSystemUiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0;
      if (mStatusBarController.isTransientShowing()) {
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
 else       if (topIsFullscreen) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
 else {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"");
        }
      }
 else {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
    }
  }
  if (mTopIsFullscreen != topIsFullscreen) {
    if (!topIsFullscreen) {
      changes|=FINISH_LAYOUT_REDO_LAYOUT;
    }
    mTopIsFullscreen=topIsFullscreen;
  }
  if (mKeyguardDelegate != null && mStatusBar != null) {
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + mHideLockScreen);
    if (mDismissKeyguard != DISMISS_KEYGUARD_NONE && !mKeyguardSecure) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      if (mKeyguardDelegate.isShowing()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.keyguardDone(false,false);
          }
        }
);
      }
    }
 else     if (mHideLockScreen) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
 else     if (mDismissKeyguard != DISMISS_KEYGUARD_NONE) {
      if (mDismissKeyguard == DISMISS_KEYGUARD_START) {
        mKeyguardHidden=false;
        if (setKeyguardOccludedLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
        }
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.dismiss();
          }
        }
);
      }
    }
 else {
      mWinDismissingKeyguard=null;
      mKeyguardHidden=false;
      if (setKeyguardOccludedLw(false)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
  }
  if ((updateSystemUiVisibilityLw() & SYSTEM_UI_CHANGING_LAYOUT) != 0) {
    changes|=FINISH_LAYOUT_REDO_LAYOUT;
  }
  updateLockScreenTimeout();
  return changes;
}",0.9663932786557312
195172,"@Override public boolean activeServiceSupportsLaunchFromKeyguard() throws RemoteException {
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo.getSupportsLaunchFromKeyguard();
  }
}","@Override public boolean activeServiceSupportsLaunchFromKeyguard() throws RemoteException {
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo != null && mImpl.mInfo.getSupportsLaunchFromKeyguard();
  }
}",0.9597197898423818
195173,"@Override public boolean activeServiceSupportsAssist(){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo.getSupportsAssist();
  }
}","@Override public boolean activeServiceSupportsAssist(){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo != null && mImpl.mInfo.getSupportsAssist();
  }
}",0.9515789473684212
195174,"@Override public boolean activeServiceSupportsLaunchFromKeyguard() throws RemoteException {
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo.getSupportsLaunchFromKeyguard();
  }
}","@Override public boolean activeServiceSupportsLaunchFromKeyguard() throws RemoteException {
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo != null && mImpl.mInfo.getSupportsLaunchFromKeyguard();
  }
}",0.9597197898423818
195175,"@Override public boolean activeServiceSupportsAssist(){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo.getSupportsAssist();
  }
}","@Override public boolean activeServiceSupportsAssist(){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo != null && mImpl.mInfo.getSupportsAssist();
  }
}",0.9515789473684212
195176,"public void setSystemUiVisibility(int vis,int mask){
synchronized (mList) {
    mHandler.removeMessages(MSG_SET_SYSTEMUI_VISIBILITY);
    mHandler.obtainMessage(MSG_SET_SYSTEMUI_VISIBILITY,vis,mask,null).sendToTarget();
  }
}","public void setSystemUiVisibility(int vis,int mask){
synchronized (mList) {
    mHandler.obtainMessage(MSG_SET_SYSTEMUI_VISIBILITY,vis,mask,null).sendToTarget();
  }
}",0.8520408163265306
195177,"@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}","@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}",0.9467140319715808
195178,"private void checkBarModes(){
  if (mDemoMode)   return;
  checkBarMode(mStatusBarMode,mStatusBarWindowState,mStatusBarView.getBarTransitions());
  if (mNavigationBarView != null) {
    checkBarMode(mNavigationBarMode,mNavigationBarWindowState,mNavigationBarView.getBarTransitions());
  }
}","private void checkBarModes(){
  if (mDemoMode)   return;
  checkBarMode(mStatusBarMode,mStatusBarWindowState,mStatusBarView.getBarTransitions(),mNoAnimationOnNextBarModeChange);
  if (mNavigationBarView != null) {
    checkBarMode(mNavigationBarMode,mNavigationBarWindowState,mNavigationBarView.getBarTransitions(),mNoAnimationOnNextBarModeChange);
  }
  mNoAnimationOnNextBarModeChange=false;
}",0.8467153284671532
195179,"private void checkBarMode(int mode,int windowState,BarTransitions transitions){
  final boolean powerSave=mBatteryController.isPowerSave();
  final boolean anim=(mScreenOn == null || mScreenOn) && windowState != WINDOW_STATE_HIDDEN && !powerSave;
  if (powerSave && getBarState() == StatusBarState.SHADE) {
    mode=MODE_WARNING;
  }
  transitions.transitionTo(mode,anim);
}","private void checkBarMode(int mode,int windowState,BarTransitions transitions,boolean noAnimation){
  final boolean powerSave=mBatteryController.isPowerSave();
  final boolean anim=!noAnimation && (mScreenOn == null || mScreenOn) && windowState != WINDOW_STATE_HIDDEN && !powerSave;
  if (powerSave && getBarState() == StatusBarState.SHADE) {
    mode=MODE_WARNING;
  }
  transitions.transitionTo(mode,anim);
}",0.9540816326530612
195180,"@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}","@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}",0.9497029702970295
195181,"/** 
 * State is one or more of the DISABLE constants from StatusBarManager.
 */
public void disable(int state1,int state2,boolean animate){
  mDisabledUnmodified1=state1;
  mDisabledUnmodified2=state2;
  state1=adjustDisableFlags(state1);
  final int old1=mDisabled1;
  final int diff1=state1 ^ old1;
  mDisabled1=state1;
  final int old2=mDisabled2;
  final int diff2=state2 ^ old2;
  mDisabled2=state2;
  if (DEBUG) {
    Log.d(TAG,String.format(""String_Node_Str"",old1,state1,diff1));
    Log.d(TAG,String.format(""String_Node_Str"",old2,state2,diff2));
  }
  StringBuilder flagdbg=new StringBuilder();
  flagdbg.append(""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(""String_Node_Str"");
  Log.d(TAG,flagdbg.toString());
  if ((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
    if ((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
      mIconController.hideSystemIconArea(animate);
    }
 else {
      mIconController.showSystemIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) {
    boolean visible=(state1 & StatusBarManager.DISABLE_CLOCK) == 0;
    mIconController.setClockVisibility(visible);
  }
  if ((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) {
    if ((state1 & StatusBarManager.DISABLE_EXPAND) != 0) {
      animateCollapsePanels();
    }
  }
  if ((diff1 & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK| StatusBarManager.DISABLE_SEARCH)) != 0) {
    if (mNavigationBarView != null)     mNavigationBarView.setDisabledFlags(state1);
    if ((state1 & StatusBarManager.DISABLE_RECENT) != 0) {
      mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
      mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
    if ((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
      mIconController.hideNotificationIconArea(animate);
    }
 else {
      mIconController.showNotificationIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
    mDisableNotificationAlerts=(state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
    mHeadsUpObserver.onChange(true);
  }
  if ((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) {
    updateQsExpansionEnabled();
  }
}","/** 
 * State is one or more of the DISABLE constants from StatusBarManager.
 */
public void disable(int state1,int state2,boolean animate){
  animate&=mStatusBarWindowState != WINDOW_STATE_HIDDEN;
  mDisabledUnmodified1=state1;
  mDisabledUnmodified2=state2;
  state1=adjustDisableFlags(state1);
  final int old1=mDisabled1;
  final int diff1=state1 ^ old1;
  mDisabled1=state1;
  final int old2=mDisabled2;
  final int diff2=state2 ^ old2;
  mDisabled2=state2;
  if (DEBUG) {
    Log.d(TAG,String.format(""String_Node_Str"",old1,state1,diff1));
    Log.d(TAG,String.format(""String_Node_Str"",old2,state2,diff2));
  }
  StringBuilder flagdbg=new StringBuilder();
  flagdbg.append(""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(""String_Node_Str"");
  Log.d(TAG,flagdbg.toString());
  if ((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
    if ((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
      mIconController.hideSystemIconArea(animate);
    }
 else {
      mIconController.showSystemIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) {
    boolean visible=(state1 & StatusBarManager.DISABLE_CLOCK) == 0;
    mIconController.setClockVisibility(visible);
  }
  if ((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) {
    if ((state1 & StatusBarManager.DISABLE_EXPAND) != 0) {
      animateCollapsePanels();
    }
  }
  if ((diff1 & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK| StatusBarManager.DISABLE_SEARCH)) != 0) {
    if (mNavigationBarView != null)     mNavigationBarView.setDisabledFlags(state1);
    if ((state1 & StatusBarManager.DISABLE_RECENT) != 0) {
      mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
      mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
    if ((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
      mIconController.hideNotificationIconArea(animate);
    }
 else {
      mIconController.showNotificationIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
    mDisableNotificationAlerts=(state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
    mHeadsUpObserver.onChange(true);
  }
  if ((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) {
    updateQsExpansionEnabled();
  }
}",0.9937493146178308
195182,"void makeExpandedInvisible(){
  if (SPEW)   Log.d(TAG,""String_Node_Str"" + mExpandedVisible + ""String_Node_Str""+ mExpandedVisible);
  if (!mExpandedVisible || mStatusBarWindow == null) {
    return;
  }
  mStatusBarView.collapseAllPanels(false,false,1.0f);
  mNotificationPanel.closeQs();
  mExpandedVisible=false;
  if (mNavigationBarView != null)   mNavigationBarView.setSlippery(false);
  visibilityChanged(false);
  mStatusBarWindowManager.setStatusBarExpanded(false);
  mStatusBarView.setFocusable(true);
  dismissPopups();
  runPostCollapseRunnables();
  setInteracting(StatusBarManager.WINDOW_STATUS_BAR,false);
  showBouncer();
  disable(mDisabledUnmodified1,mDisabledUnmodified2,true);
  if (!mStatusBarKeyguardViewManager.isShowing()) {
    WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
  }
}","void makeExpandedInvisible(){
  if (SPEW)   Log.d(TAG,""String_Node_Str"" + mExpandedVisible + ""String_Node_Str""+ mExpandedVisible);
  if (!mExpandedVisible || mStatusBarWindow == null) {
    return;
  }
  mStatusBarView.collapseAllPanels(false,false,1.0f);
  mNotificationPanel.closeQs();
  mExpandedVisible=false;
  if (mNavigationBarView != null)   mNavigationBarView.setSlippery(false);
  visibilityChanged(false);
  mStatusBarWindowManager.setStatusBarExpanded(false);
  mStatusBarWindowManager.setForceStatusBarVisible(false);
  mStatusBarView.setFocusable(true);
  dismissPopups();
  runPostCollapseRunnables();
  setInteracting(StatusBarManager.WINDOW_STATUS_BAR,false);
  showBouncer();
  disable(mDisabledUnmodified1,mDisabledUnmodified2,true);
  if (!mStatusBarKeyguardViewManager.isShowing()) {
    WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
  }
}",0.9662278191184888
195183,"private void apply(State state){
  applyKeyguardFlags(state);
  applyFocusableFlag(state);
  adjustScreenOrientation(state);
  applyHeight(state);
  applyUserActivityTimeout(state);
  applyInputFeatures(state);
  applyFitsSystemWindows(state);
  applyModalFlag(state);
  if (mLp.copyFrom(mLpChanged) != 0) {
    mWindowManager.updateViewLayout(mStatusBarView,mLp);
  }
}","private void apply(State state){
  applyKeyguardFlags(state);
  applyForceStatusBarVisibleFlag(state);
  applyFocusableFlag(state);
  adjustScreenOrientation(state);
  applyHeight(state);
  applyUserActivityTimeout(state);
  applyInputFeatures(state);
  applyFitsSystemWindows(state);
  applyModalFlag(state);
  if (mLp.copyFrom(mLpChanged) != 0) {
    mWindowManager.updateViewLayout(mStatusBarView,mLp);
  }
}",0.9475032010243278
195184,"public int updateVisibilityLw(boolean transientAllowed,int oldVis,int vis){
  if (mWin == null)   return vis;
  if (isTransientShowing() || isTransientShowRequested()) {
    if (transientAllowed) {
      vis|=mTransientFlag;
      if ((oldVis & mTransientFlag) == 0) {
        vis|=mUnhideFlag;
      }
      setTransientBarState(TRANSIENT_BAR_SHOWING);
    }
 else {
      setTransientBarState(TRANSIENT_BAR_NONE);
    }
  }
  if (mTransientBarState != TRANSIENT_BAR_NONE) {
    vis|=mTransientFlag;
    vis&=~View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
  if ((vis & mTranslucentFlag) != 0 || (oldVis & mTranslucentFlag) != 0 || ((vis | oldVis) & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
    mLastTranslucent=SystemClock.uptimeMillis();
  }
  return vis;
}","public int updateVisibilityLw(boolean transientAllowed,int oldVis,int vis){
  if (mWin == null)   return vis;
  if (isTransientShowing() || isTransientShowRequested()) {
    if (transientAllowed) {
      vis|=mTransientFlag;
      if ((oldVis & mTransientFlag) == 0) {
        vis|=mUnhideFlag;
      }
      setTransientBarState(TRANSIENT_BAR_SHOWING);
    }
 else {
      setTransientBarState(TRANSIENT_BAR_NONE);
    }
  }
  if (mShowTransparent) {
    vis|=View.SYSTEM_UI_TRANSPARENT;
    if (mSetUnHideFlagWhenNextTransparent) {
      vis|=mUnhideFlag;
      mSetUnHideFlagWhenNextTransparent=false;
    }
  }
  if (mTransientBarState != TRANSIENT_BAR_NONE) {
    vis|=mTransientFlag;
    vis&=~View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
  if ((vis & mTranslucentFlag) != 0 || (oldVis & mTranslucentFlag) != 0 || ((vis | oldVis) & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
    mLastTranslucent=SystemClock.uptimeMillis();
  }
  return vis;
}",0.8879668049792531
195185,"public boolean setBarShowingLw(final boolean show){
  if (mWin == null)   return false;
  if (show && mTransientBarState == TRANSIENT_BAR_HIDING) {
    mPendingShow=true;
    return false;
  }
  final boolean wasVis=mWin.isVisibleLw();
  final boolean wasAnim=mWin.isAnimatingLw();
  final boolean change=show ? mWin.showLw(true) : mWin.hideLw(true);
  final int state=computeStateLw(wasVis,wasAnim,mWin,change);
  final boolean stateChanged=updateStateLw(state);
  return change || stateChanged;
}","public boolean setBarShowingLw(final boolean show){
  if (mWin == null)   return false;
  if (show && mTransientBarState == TRANSIENT_BAR_HIDING) {
    mPendingShow=true;
    return false;
  }
  final boolean wasVis=mWin.isVisibleLw();
  final boolean wasAnim=mWin.isAnimatingLw();
  final boolean change=show ? mWin.showLw(!mNoAnimationOnNextShow) : mWin.hideLw(!mNoAnimationOnNextShow);
  mNoAnimationOnNextShow=false;
  final int state=computeStateLw(wasVis,wasAnim,mWin,change);
  final boolean stateChanged=updateStateLw(state);
  return change || stateChanged;
}",0.9174484052532832
195186,"/** 
 * {@inheritDoc} 
 */
@Override public void beginPostLayoutPolicyLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mTopFullscreenOpaqueOrDimmingWindowState=null;
  mAppsToBeHidden.clear();
  mAppsThatDismissKeyguard.clear();
  mForceStatusBar=false;
  mForceStatusBarFromKeyguard=false;
  mForcingShowNavBar=false;
  mForcingShowNavBarLayer=-1;
  mHideLockScreen=false;
  mAllowLockscreenWhenOn=false;
  mDismissKeyguard=DISMISS_KEYGUARD_NONE;
  mShowingLockscreen=false;
  mShowingDream=false;
  mWinShowWhenLocked=null;
  mKeyguardSecure=isKeyguardSecure();
  mKeyguardSecureIncludingHidden=mKeyguardSecure && (mKeyguardDelegate != null && mKeyguardDelegate.isShowing());
}","/** 
 * {@inheritDoc} 
 */
@Override public void beginPostLayoutPolicyLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mTopFullscreenOpaqueOrDimmingWindowState=null;
  mAppsToBeHidden.clear();
  mAppsThatDismissKeyguard.clear();
  mForceStatusBar=false;
  mForceStatusBarFromKeyguard=false;
  mForceStatusBarTransparent=false;
  mForcingShowNavBar=false;
  mForcingShowNavBarLayer=-1;
  mHideLockScreen=false;
  mAllowLockscreenWhenOn=false;
  mDismissKeyguard=DISMISS_KEYGUARD_NONE;
  mShowingLockscreen=false;
  mShowingDream=false;
  mWinShowWhenLocked=null;
  mKeyguardSecure=isKeyguardSecure();
  mKeyguardSecureIncludingHidden=mKeyguardSecure && (mKeyguardDelegate != null && mKeyguardDelegate.isShowing());
}",0.9753424657534246
195187,"/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR && (attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
    mForceStatusBarFromKeyguard=true;
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    if (appWindow) {
      final IApplicationToken appToken=win.getAppToken();
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=mWinDismissingKeyguard == win ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    if (appWindow) {
      final IApplicationToken appToken=win.getAppToken();
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=mWinDismissingKeyguard == win ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}",0.9806562193927522
195188,"/** 
 * {@inheritDoc} 
 */
@Override public int finishPostLayoutPolicyLw(){
  if (mWinShowWhenLocked != null && mTopFullscreenOpaqueWindowState != null && mWinShowWhenLocked.getAppToken() != mTopFullscreenOpaqueWindowState.getAppToken() && isKeyguardLocked()) {
    mWinShowWhenLocked.getAttrs().flags|=FLAG_SHOW_WALLPAPER;
    mTopFullscreenOpaqueWindowState.hideLw(false);
    mTopFullscreenOpaqueWindowState=mWinShowWhenLocked;
  }
  int changes=0;
  boolean topIsFullscreen=false;
  final WindowManager.LayoutParams lp=(mTopFullscreenOpaqueWindowState != null) ? mTopFullscreenOpaqueWindowState.getAttrs() : null;
  if (!mShowingDream) {
    mDreamingLockscreen=mShowingLockscreen;
    if (mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=false;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,0,1).sendToTarget();
    }
  }
 else {
    if (!mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=true;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,1,1).sendToTarget();
    }
  }
  if (mStatusBar != null) {
    if (DEBUG_LAYOUT)     Slog.i(TAG,""String_Node_Str"" + mForceStatusBar + ""String_Node_Str""+ mForceStatusBarFromKeyguard+ ""String_Node_Str""+ mTopFullscreenOpaqueWindowState);
    if (mForceStatusBar || mForceStatusBarFromKeyguard) {
      if (DEBUG_LAYOUT)       Slog.v(TAG,""String_Node_Str"");
      if (mStatusBarController.setBarShowingLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT;
      }
      topIsFullscreen=mTopIsFullscreen && mStatusBar.isAnimatingLw();
      if (mForceStatusBarFromKeyguard && mStatusBarController.isTransientShowing()) {
        mStatusBarController.updateVisibilityLw(false,mLastSystemUiFlags,mLastSystemUiFlags);
      }
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      final int fl=PolicyControl.getWindowFlags(null,lp);
      if (localLOGV) {
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getFrameLw() + ""String_Node_Str""+ mTopFullscreenOpaqueWindowState.getShownFrameLw());
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getAttrs() + ""String_Node_Str""+ Integer.toHexString(fl));
      }
      topIsFullscreen=(fl & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0 || (mLastSystemUiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0;
      if (mStatusBarController.isTransientShowing()) {
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
 else       if (topIsFullscreen) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
 else {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"");
        }
      }
 else {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
    }
  }
  if (mTopIsFullscreen != topIsFullscreen) {
    if (!topIsFullscreen) {
      changes|=FINISH_LAYOUT_REDO_LAYOUT;
    }
    mTopIsFullscreen=topIsFullscreen;
  }
  if (mKeyguardDelegate != null && mStatusBar != null) {
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + mHideLockScreen);
    if (mDismissKeyguard != DISMISS_KEYGUARD_NONE && !mKeyguardSecure) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      if (mKeyguardDelegate.isShowing()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.keyguardDone(false,false);
          }
        }
);
      }
    }
 else     if (mHideLockScreen) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
 else     if (mDismissKeyguard != DISMISS_KEYGUARD_NONE) {
      if (mDismissKeyguard == DISMISS_KEYGUARD_START) {
        mKeyguardHidden=false;
        if (setKeyguardOccludedLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
        }
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.dismiss();
          }
        }
);
      }
    }
 else {
      mWinDismissingKeyguard=null;
      mKeyguardHidden=false;
      if (setKeyguardOccludedLw(false)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
  }
  if ((updateSystemUiVisibilityLw() & SYSTEM_UI_CHANGING_LAYOUT) != 0) {
    changes|=FINISH_LAYOUT_REDO_LAYOUT;
  }
  updateLockScreenTimeout();
  return changes;
}","/** 
 * {@inheritDoc} 
 */
@Override public int finishPostLayoutPolicyLw(){
  if (mWinShowWhenLocked != null && mTopFullscreenOpaqueWindowState != null && mWinShowWhenLocked.getAppToken() != mTopFullscreenOpaqueWindowState.getAppToken() && isKeyguardLocked()) {
    mWinShowWhenLocked.getAttrs().flags|=FLAG_SHOW_WALLPAPER;
    mTopFullscreenOpaqueWindowState.hideLw(false);
    mTopFullscreenOpaqueWindowState=mWinShowWhenLocked;
  }
  int changes=0;
  boolean topIsFullscreen=false;
  final WindowManager.LayoutParams lp=(mTopFullscreenOpaqueWindowState != null) ? mTopFullscreenOpaqueWindowState.getAttrs() : null;
  if (!mShowingDream) {
    mDreamingLockscreen=mShowingLockscreen;
    if (mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=false;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,0,1).sendToTarget();
    }
  }
 else {
    if (!mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=true;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,1,1).sendToTarget();
    }
  }
  if (mStatusBar != null) {
    if (DEBUG_LAYOUT)     Slog.i(TAG,""String_Node_Str"" + mForceStatusBar + ""String_Node_Str""+ mForceStatusBarFromKeyguard+ ""String_Node_Str""+ mTopFullscreenOpaqueWindowState);
    boolean shouldBeTransparent=mForceStatusBarTransparent && !mForceStatusBar && !mForceStatusBarFromKeyguard;
    if (!shouldBeTransparent) {
      mStatusBarController.setShowTransparent(false);
    }
 else     if (!mStatusBar.isVisibleLw()) {
      mStatusBarController.setShowTransparent(true);
    }
    if (mForceStatusBar || mForceStatusBarFromKeyguard || mForceStatusBarTransparent) {
      if (DEBUG_LAYOUT)       Slog.v(TAG,""String_Node_Str"");
      if (mStatusBarController.setBarShowingLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT;
      }
      topIsFullscreen=mTopIsFullscreen && mStatusBar.isAnimatingLw();
      if (mForceStatusBarFromKeyguard && mStatusBarController.isTransientShowing()) {
        mStatusBarController.updateVisibilityLw(false,mLastSystemUiFlags,mLastSystemUiFlags);
      }
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      final int fl=PolicyControl.getWindowFlags(null,lp);
      if (localLOGV) {
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getFrameLw() + ""String_Node_Str""+ mTopFullscreenOpaqueWindowState.getShownFrameLw());
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getAttrs() + ""String_Node_Str""+ Integer.toHexString(fl));
      }
      topIsFullscreen=(fl & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0 || (mLastSystemUiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0;
      if (mStatusBarController.isTransientShowing()) {
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
 else       if (topIsFullscreen) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
 else {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"");
        }
      }
 else {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
    }
  }
  if (mTopIsFullscreen != topIsFullscreen) {
    if (!topIsFullscreen) {
      changes|=FINISH_LAYOUT_REDO_LAYOUT;
    }
    mTopIsFullscreen=topIsFullscreen;
  }
  if (mKeyguardDelegate != null && mStatusBar != null) {
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + mHideLockScreen);
    if (mDismissKeyguard != DISMISS_KEYGUARD_NONE && !mKeyguardSecure) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      if (mKeyguardDelegate.isShowing()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.keyguardDone(false,false);
          }
        }
);
      }
    }
 else     if (mHideLockScreen) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
 else     if (mDismissKeyguard != DISMISS_KEYGUARD_NONE) {
      if (mDismissKeyguard == DISMISS_KEYGUARD_START) {
        mKeyguardHidden=false;
        if (setKeyguardOccludedLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
        }
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.dismiss();
          }
        }
);
      }
    }
 else {
      mWinDismissingKeyguard=null;
      mKeyguardHidden=false;
      if (setKeyguardOccludedLw(false)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
  }
  if ((updateSystemUiVisibilityLw() & SYSTEM_UI_CHANGING_LAYOUT) != 0) {
    changes|=FINISH_LAYOUT_REDO_LAYOUT;
  }
  updateLockScreenTimeout();
  return changes;
}",0.9663932786557312
195189,"@Override public boolean activeServiceSupportsLaunchFromKeyguard() throws RemoteException {
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo.getSupportsLaunchFromKeyguard();
  }
}","@Override public boolean activeServiceSupportsLaunchFromKeyguard() throws RemoteException {
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo != null && mImpl.mInfo.getSupportsLaunchFromKeyguard();
  }
}",0.9597197898423818
195190,"@Override public boolean activeServiceSupportsAssist(){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo.getSupportsAssist();
  }
}","@Override public boolean activeServiceSupportsAssist(){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo != null && mImpl.mInfo.getSupportsAssist();
  }
}",0.9515789473684212
195191,"public void setSystemUiVisibility(int vis,int mask){
synchronized (mList) {
    mHandler.removeMessages(MSG_SET_SYSTEMUI_VISIBILITY);
    mHandler.obtainMessage(MSG_SET_SYSTEMUI_VISIBILITY,vis,mask,null).sendToTarget();
  }
}","public void setSystemUiVisibility(int vis,int mask){
synchronized (mList) {
    mHandler.obtainMessage(MSG_SET_SYSTEMUI_VISIBILITY,vis,mask,null).sendToTarget();
  }
}",0.8520408163265306
195192,"@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}","@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}",0.9467140319715808
195193,"private void checkBarModes(){
  if (mDemoMode)   return;
  checkBarMode(mStatusBarMode,mStatusBarWindowState,mStatusBarView.getBarTransitions());
  if (mNavigationBarView != null) {
    checkBarMode(mNavigationBarMode,mNavigationBarWindowState,mNavigationBarView.getBarTransitions());
  }
}","private void checkBarModes(){
  if (mDemoMode)   return;
  checkBarMode(mStatusBarMode,mStatusBarWindowState,mStatusBarView.getBarTransitions(),mNoAnimationOnNextBarModeChange);
  if (mNavigationBarView != null) {
    checkBarMode(mNavigationBarMode,mNavigationBarWindowState,mNavigationBarView.getBarTransitions(),mNoAnimationOnNextBarModeChange);
  }
  mNoAnimationOnNextBarModeChange=false;
}",0.8467153284671532
195194,"private void checkBarMode(int mode,int windowState,BarTransitions transitions){
  final boolean powerSave=mBatteryController.isPowerSave();
  final boolean anim=(mScreenOn == null || mScreenOn) && windowState != WINDOW_STATE_HIDDEN && !powerSave;
  if (powerSave && getBarState() == StatusBarState.SHADE) {
    mode=MODE_WARNING;
  }
  transitions.transitionTo(mode,anim);
}","private void checkBarMode(int mode,int windowState,BarTransitions transitions,boolean noAnimation){
  final boolean powerSave=mBatteryController.isPowerSave();
  final boolean anim=!noAnimation && (mScreenOn == null || mScreenOn) && windowState != WINDOW_STATE_HIDDEN && !powerSave;
  if (powerSave && getBarState() == StatusBarState.SHADE) {
    mode=MODE_WARNING;
  }
  transitions.transitionTo(mode,anim);
}",0.9540816326530612
195195,"@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}","@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}",0.9497029702970295
195196,"/** 
 * State is one or more of the DISABLE constants from StatusBarManager.
 */
public void disable(int state1,int state2,boolean animate){
  mDisabledUnmodified1=state1;
  mDisabledUnmodified2=state2;
  state1=adjustDisableFlags(state1);
  final int old1=mDisabled1;
  final int diff1=state1 ^ old1;
  mDisabled1=state1;
  final int old2=mDisabled2;
  final int diff2=state2 ^ old2;
  mDisabled2=state2;
  if (DEBUG) {
    Log.d(TAG,String.format(""String_Node_Str"",old1,state1,diff1));
    Log.d(TAG,String.format(""String_Node_Str"",old2,state2,diff2));
  }
  StringBuilder flagdbg=new StringBuilder();
  flagdbg.append(""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(""String_Node_Str"");
  Log.d(TAG,flagdbg.toString());
  if ((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
    if ((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
      mIconController.hideSystemIconArea(animate);
    }
 else {
      mIconController.showSystemIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) {
    boolean visible=(state1 & StatusBarManager.DISABLE_CLOCK) == 0;
    mIconController.setClockVisibility(visible);
  }
  if ((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) {
    if ((state1 & StatusBarManager.DISABLE_EXPAND) != 0) {
      animateCollapsePanels();
    }
  }
  if ((diff1 & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK| StatusBarManager.DISABLE_SEARCH)) != 0) {
    if (mNavigationBarView != null)     mNavigationBarView.setDisabledFlags(state1);
    if ((state1 & StatusBarManager.DISABLE_RECENT) != 0) {
      mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
      mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
    if ((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
      mIconController.hideNotificationIconArea(animate);
    }
 else {
      mIconController.showNotificationIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
    mDisableNotificationAlerts=(state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
    mHeadsUpObserver.onChange(true);
  }
  if ((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) {
    updateQsExpansionEnabled();
  }
}","/** 
 * State is one or more of the DISABLE constants from StatusBarManager.
 */
public void disable(int state1,int state2,boolean animate){
  animate&=mStatusBarWindowState != WINDOW_STATE_HIDDEN;
  mDisabledUnmodified1=state1;
  mDisabledUnmodified2=state2;
  state1=adjustDisableFlags(state1);
  final int old1=mDisabled1;
  final int diff1=state1 ^ old1;
  mDisabled1=state1;
  final int old2=mDisabled2;
  final int diff2=state2 ^ old2;
  mDisabled2=state2;
  if (DEBUG) {
    Log.d(TAG,String.format(""String_Node_Str"",old1,state1,diff1));
    Log.d(TAG,String.format(""String_Node_Str"",old2,state2,diff2));
  }
  StringBuilder flagdbg=new StringBuilder();
  flagdbg.append(""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(""String_Node_Str"");
  Log.d(TAG,flagdbg.toString());
  if ((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
    if ((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
      mIconController.hideSystemIconArea(animate);
    }
 else {
      mIconController.showSystemIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) {
    boolean visible=(state1 & StatusBarManager.DISABLE_CLOCK) == 0;
    mIconController.setClockVisibility(visible);
  }
  if ((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) {
    if ((state1 & StatusBarManager.DISABLE_EXPAND) != 0) {
      animateCollapsePanels();
    }
  }
  if ((diff1 & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK| StatusBarManager.DISABLE_SEARCH)) != 0) {
    if (mNavigationBarView != null)     mNavigationBarView.setDisabledFlags(state1);
    if ((state1 & StatusBarManager.DISABLE_RECENT) != 0) {
      mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
      mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
    if ((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
      mIconController.hideNotificationIconArea(animate);
    }
 else {
      mIconController.showNotificationIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
    mDisableNotificationAlerts=(state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
    mHeadsUpObserver.onChange(true);
  }
  if ((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) {
    updateQsExpansionEnabled();
  }
}",0.9937493146178308
195197,"void makeExpandedInvisible(){
  if (SPEW)   Log.d(TAG,""String_Node_Str"" + mExpandedVisible + ""String_Node_Str""+ mExpandedVisible);
  if (!mExpandedVisible || mStatusBarWindow == null) {
    return;
  }
  mStatusBarView.collapseAllPanels(false,false,1.0f);
  mNotificationPanel.closeQs();
  mExpandedVisible=false;
  if (mNavigationBarView != null)   mNavigationBarView.setSlippery(false);
  visibilityChanged(false);
  mStatusBarWindowManager.setStatusBarExpanded(false);
  mStatusBarView.setFocusable(true);
  dismissPopups();
  runPostCollapseRunnables();
  setInteracting(StatusBarManager.WINDOW_STATUS_BAR,false);
  showBouncer();
  disable(mDisabledUnmodified1,mDisabledUnmodified2,true);
  if (!mStatusBarKeyguardViewManager.isShowing()) {
    WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
  }
}","void makeExpandedInvisible(){
  if (SPEW)   Log.d(TAG,""String_Node_Str"" + mExpandedVisible + ""String_Node_Str""+ mExpandedVisible);
  if (!mExpandedVisible || mStatusBarWindow == null) {
    return;
  }
  mStatusBarView.collapseAllPanels(false,false,1.0f);
  mNotificationPanel.closeQs();
  mExpandedVisible=false;
  if (mNavigationBarView != null)   mNavigationBarView.setSlippery(false);
  visibilityChanged(false);
  mStatusBarWindowManager.setStatusBarExpanded(false);
  mStatusBarWindowManager.setForceStatusBarVisible(false);
  mStatusBarView.setFocusable(true);
  dismissPopups();
  runPostCollapseRunnables();
  setInteracting(StatusBarManager.WINDOW_STATUS_BAR,false);
  showBouncer();
  disable(mDisabledUnmodified1,mDisabledUnmodified2,true);
  if (!mStatusBarKeyguardViewManager.isShowing()) {
    WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
  }
}",0.9662278191184888
195198,"private void apply(State state){
  applyKeyguardFlags(state);
  applyFocusableFlag(state);
  adjustScreenOrientation(state);
  applyHeight(state);
  applyUserActivityTimeout(state);
  applyInputFeatures(state);
  applyFitsSystemWindows(state);
  applyModalFlag(state);
  if (mLp.copyFrom(mLpChanged) != 0) {
    mWindowManager.updateViewLayout(mStatusBarView,mLp);
  }
}","private void apply(State state){
  applyKeyguardFlags(state);
  applyForceStatusBarVisibleFlag(state);
  applyFocusableFlag(state);
  adjustScreenOrientation(state);
  applyHeight(state);
  applyUserActivityTimeout(state);
  applyInputFeatures(state);
  applyFitsSystemWindows(state);
  applyModalFlag(state);
  if (mLp.copyFrom(mLpChanged) != 0) {
    mWindowManager.updateViewLayout(mStatusBarView,mLp);
  }
}",0.9475032010243278
195199,"public int updateVisibilityLw(boolean transientAllowed,int oldVis,int vis){
  if (mWin == null)   return vis;
  if (isTransientShowing() || isTransientShowRequested()) {
    if (transientAllowed) {
      vis|=mTransientFlag;
      if ((oldVis & mTransientFlag) == 0) {
        vis|=mUnhideFlag;
      }
      setTransientBarState(TRANSIENT_BAR_SHOWING);
    }
 else {
      setTransientBarState(TRANSIENT_BAR_NONE);
    }
  }
  if (mTransientBarState != TRANSIENT_BAR_NONE) {
    vis|=mTransientFlag;
    vis&=~View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
  if ((vis & mTranslucentFlag) != 0 || (oldVis & mTranslucentFlag) != 0 || ((vis | oldVis) & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
    mLastTranslucent=SystemClock.uptimeMillis();
  }
  return vis;
}","public int updateVisibilityLw(boolean transientAllowed,int oldVis,int vis){
  if (mWin == null)   return vis;
  if (isTransientShowing() || isTransientShowRequested()) {
    if (transientAllowed) {
      vis|=mTransientFlag;
      if ((oldVis & mTransientFlag) == 0) {
        vis|=mUnhideFlag;
      }
      setTransientBarState(TRANSIENT_BAR_SHOWING);
    }
 else {
      setTransientBarState(TRANSIENT_BAR_NONE);
    }
  }
  if (mShowTransparent) {
    vis|=View.SYSTEM_UI_TRANSPARENT;
    if (mSetUnHideFlagWhenNextTransparent) {
      vis|=mUnhideFlag;
      mSetUnHideFlagWhenNextTransparent=false;
    }
  }
  if (mTransientBarState != TRANSIENT_BAR_NONE) {
    vis|=mTransientFlag;
    vis&=~View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
  if ((vis & mTranslucentFlag) != 0 || (oldVis & mTranslucentFlag) != 0 || ((vis | oldVis) & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
    mLastTranslucent=SystemClock.uptimeMillis();
  }
  return vis;
}",0.8879668049792531
195200,"public boolean setBarShowingLw(final boolean show){
  if (mWin == null)   return false;
  if (show && mTransientBarState == TRANSIENT_BAR_HIDING) {
    mPendingShow=true;
    return false;
  }
  final boolean wasVis=mWin.isVisibleLw();
  final boolean wasAnim=mWin.isAnimatingLw();
  final boolean change=show ? mWin.showLw(true) : mWin.hideLw(true);
  final int state=computeStateLw(wasVis,wasAnim,mWin,change);
  final boolean stateChanged=updateStateLw(state);
  return change || stateChanged;
}","public boolean setBarShowingLw(final boolean show){
  if (mWin == null)   return false;
  if (show && mTransientBarState == TRANSIENT_BAR_HIDING) {
    mPendingShow=true;
    return false;
  }
  final boolean wasVis=mWin.isVisibleLw();
  final boolean wasAnim=mWin.isAnimatingLw();
  final boolean change=show ? mWin.showLw(!mNoAnimationOnNextShow) : mWin.hideLw(!mNoAnimationOnNextShow);
  mNoAnimationOnNextShow=false;
  final int state=computeStateLw(wasVis,wasAnim,mWin,change);
  final boolean stateChanged=updateStateLw(state);
  return change || stateChanged;
}",0.9174484052532832
195201,"/** 
 * {@inheritDoc} 
 */
@Override public void beginPostLayoutPolicyLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mTopFullscreenOpaqueOrDimmingWindowState=null;
  mAppsToBeHidden.clear();
  mAppsThatDismissKeyguard.clear();
  mForceStatusBar=false;
  mForceStatusBarFromKeyguard=false;
  mForcingShowNavBar=false;
  mForcingShowNavBarLayer=-1;
  mHideLockScreen=false;
  mAllowLockscreenWhenOn=false;
  mDismissKeyguard=DISMISS_KEYGUARD_NONE;
  mShowingLockscreen=false;
  mShowingDream=false;
  mWinShowWhenLocked=null;
  mKeyguardSecure=isKeyguardSecure();
  mKeyguardSecureIncludingHidden=mKeyguardSecure && (mKeyguardDelegate != null && mKeyguardDelegate.isShowing());
}","/** 
 * {@inheritDoc} 
 */
@Override public void beginPostLayoutPolicyLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mTopFullscreenOpaqueOrDimmingWindowState=null;
  mAppsToBeHidden.clear();
  mAppsThatDismissKeyguard.clear();
  mForceStatusBar=false;
  mForceStatusBarFromKeyguard=false;
  mForceStatusBarTransparent=false;
  mForcingShowNavBar=false;
  mForcingShowNavBarLayer=-1;
  mHideLockScreen=false;
  mAllowLockscreenWhenOn=false;
  mDismissKeyguard=DISMISS_KEYGUARD_NONE;
  mShowingLockscreen=false;
  mShowingDream=false;
  mWinShowWhenLocked=null;
  mKeyguardSecure=isKeyguardSecure();
  mKeyguardSecureIncludingHidden=mKeyguardSecure && (mKeyguardDelegate != null && mKeyguardDelegate.isShowing());
}",0.9753424657534246
195202,"/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR && (attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
    mForceStatusBarFromKeyguard=true;
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    if (appWindow) {
      final IApplicationToken appToken=win.getAppToken();
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=mWinDismissingKeyguard == win ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    if (appWindow) {
      final IApplicationToken appToken=win.getAppToken();
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=mWinDismissingKeyguard == win ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}",0.9806562193927522
195203,"/** 
 * {@inheritDoc} 
 */
@Override public int finishPostLayoutPolicyLw(){
  if (mWinShowWhenLocked != null && mTopFullscreenOpaqueWindowState != null && mWinShowWhenLocked.getAppToken() != mTopFullscreenOpaqueWindowState.getAppToken() && isKeyguardLocked()) {
    mWinShowWhenLocked.getAttrs().flags|=FLAG_SHOW_WALLPAPER;
    mTopFullscreenOpaqueWindowState.hideLw(false);
    mTopFullscreenOpaqueWindowState=mWinShowWhenLocked;
  }
  int changes=0;
  boolean topIsFullscreen=false;
  final WindowManager.LayoutParams lp=(mTopFullscreenOpaqueWindowState != null) ? mTopFullscreenOpaqueWindowState.getAttrs() : null;
  if (!mShowingDream) {
    mDreamingLockscreen=mShowingLockscreen;
    if (mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=false;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,0,1).sendToTarget();
    }
  }
 else {
    if (!mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=true;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,1,1).sendToTarget();
    }
  }
  if (mStatusBar != null) {
    if (DEBUG_LAYOUT)     Slog.i(TAG,""String_Node_Str"" + mForceStatusBar + ""String_Node_Str""+ mForceStatusBarFromKeyguard+ ""String_Node_Str""+ mTopFullscreenOpaqueWindowState);
    if (mForceStatusBar || mForceStatusBarFromKeyguard) {
      if (DEBUG_LAYOUT)       Slog.v(TAG,""String_Node_Str"");
      if (mStatusBarController.setBarShowingLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT;
      }
      topIsFullscreen=mTopIsFullscreen && mStatusBar.isAnimatingLw();
      if (mForceStatusBarFromKeyguard && mStatusBarController.isTransientShowing()) {
        mStatusBarController.updateVisibilityLw(false,mLastSystemUiFlags,mLastSystemUiFlags);
      }
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      final int fl=PolicyControl.getWindowFlags(null,lp);
      if (localLOGV) {
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getFrameLw() + ""String_Node_Str""+ mTopFullscreenOpaqueWindowState.getShownFrameLw());
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getAttrs() + ""String_Node_Str""+ Integer.toHexString(fl));
      }
      topIsFullscreen=(fl & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0 || (mLastSystemUiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0;
      if (mStatusBarController.isTransientShowing()) {
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
 else       if (topIsFullscreen) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
 else {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"");
        }
      }
 else {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
    }
  }
  if (mTopIsFullscreen != topIsFullscreen) {
    if (!topIsFullscreen) {
      changes|=FINISH_LAYOUT_REDO_LAYOUT;
    }
    mTopIsFullscreen=topIsFullscreen;
  }
  if (mKeyguardDelegate != null && mStatusBar != null) {
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + mHideLockScreen);
    if (mDismissKeyguard != DISMISS_KEYGUARD_NONE && !mKeyguardSecure) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      if (mKeyguardDelegate.isShowing()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.keyguardDone(false,false);
          }
        }
);
      }
    }
 else     if (mHideLockScreen) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
 else     if (mDismissKeyguard != DISMISS_KEYGUARD_NONE) {
      if (mDismissKeyguard == DISMISS_KEYGUARD_START) {
        mKeyguardHidden=false;
        if (setKeyguardOccludedLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
        }
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.dismiss();
          }
        }
);
      }
    }
 else {
      mWinDismissingKeyguard=null;
      mKeyguardHidden=false;
      if (setKeyguardOccludedLw(false)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
  }
  if ((updateSystemUiVisibilityLw() & SYSTEM_UI_CHANGING_LAYOUT) != 0) {
    changes|=FINISH_LAYOUT_REDO_LAYOUT;
  }
  updateLockScreenTimeout();
  return changes;
}","/** 
 * {@inheritDoc} 
 */
@Override public int finishPostLayoutPolicyLw(){
  if (mWinShowWhenLocked != null && mTopFullscreenOpaqueWindowState != null && mWinShowWhenLocked.getAppToken() != mTopFullscreenOpaqueWindowState.getAppToken() && isKeyguardLocked()) {
    mWinShowWhenLocked.getAttrs().flags|=FLAG_SHOW_WALLPAPER;
    mTopFullscreenOpaqueWindowState.hideLw(false);
    mTopFullscreenOpaqueWindowState=mWinShowWhenLocked;
  }
  int changes=0;
  boolean topIsFullscreen=false;
  final WindowManager.LayoutParams lp=(mTopFullscreenOpaqueWindowState != null) ? mTopFullscreenOpaqueWindowState.getAttrs() : null;
  if (!mShowingDream) {
    mDreamingLockscreen=mShowingLockscreen;
    if (mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=false;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,0,1).sendToTarget();
    }
  }
 else {
    if (!mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=true;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,1,1).sendToTarget();
    }
  }
  if (mStatusBar != null) {
    if (DEBUG_LAYOUT)     Slog.i(TAG,""String_Node_Str"" + mForceStatusBar + ""String_Node_Str""+ mForceStatusBarFromKeyguard+ ""String_Node_Str""+ mTopFullscreenOpaqueWindowState);
    boolean shouldBeTransparent=mForceStatusBarTransparent && !mForceStatusBar && !mForceStatusBarFromKeyguard;
    if (!shouldBeTransparent) {
      mStatusBarController.setShowTransparent(false);
    }
 else     if (!mStatusBar.isVisibleLw()) {
      mStatusBarController.setShowTransparent(true);
    }
    if (mForceStatusBar || mForceStatusBarFromKeyguard || mForceStatusBarTransparent) {
      if (DEBUG_LAYOUT)       Slog.v(TAG,""String_Node_Str"");
      if (mStatusBarController.setBarShowingLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT;
      }
      topIsFullscreen=mTopIsFullscreen && mStatusBar.isAnimatingLw();
      if (mForceStatusBarFromKeyguard && mStatusBarController.isTransientShowing()) {
        mStatusBarController.updateVisibilityLw(false,mLastSystemUiFlags,mLastSystemUiFlags);
      }
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      final int fl=PolicyControl.getWindowFlags(null,lp);
      if (localLOGV) {
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getFrameLw() + ""String_Node_Str""+ mTopFullscreenOpaqueWindowState.getShownFrameLw());
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getAttrs() + ""String_Node_Str""+ Integer.toHexString(fl));
      }
      topIsFullscreen=(fl & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0 || (mLastSystemUiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0;
      if (mStatusBarController.isTransientShowing()) {
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
 else       if (topIsFullscreen) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
 else {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"");
        }
      }
 else {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
    }
  }
  if (mTopIsFullscreen != topIsFullscreen) {
    if (!topIsFullscreen) {
      changes|=FINISH_LAYOUT_REDO_LAYOUT;
    }
    mTopIsFullscreen=topIsFullscreen;
  }
  if (mKeyguardDelegate != null && mStatusBar != null) {
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + mHideLockScreen);
    if (mDismissKeyguard != DISMISS_KEYGUARD_NONE && !mKeyguardSecure) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      if (mKeyguardDelegate.isShowing()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.keyguardDone(false,false);
          }
        }
);
      }
    }
 else     if (mHideLockScreen) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
 else     if (mDismissKeyguard != DISMISS_KEYGUARD_NONE) {
      if (mDismissKeyguard == DISMISS_KEYGUARD_START) {
        mKeyguardHidden=false;
        if (setKeyguardOccludedLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
        }
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.dismiss();
          }
        }
);
      }
    }
 else {
      mWinDismissingKeyguard=null;
      mKeyguardHidden=false;
      if (setKeyguardOccludedLw(false)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
  }
  if ((updateSystemUiVisibilityLw() & SYSTEM_UI_CHANGING_LAYOUT) != 0) {
    changes|=FINISH_LAYOUT_REDO_LAYOUT;
  }
  updateLockScreenTimeout();
  return changes;
}",0.9663932786557312
195204,"@Override public boolean activeServiceSupportsLaunchFromKeyguard() throws RemoteException {
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo.getSupportsLaunchFromKeyguard();
  }
}","@Override public boolean activeServiceSupportsLaunchFromKeyguard() throws RemoteException {
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo != null && mImpl.mInfo.getSupportsLaunchFromKeyguard();
  }
}",0.9597197898423818
195205,"@Override public boolean activeServiceSupportsAssist(){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo.getSupportsAssist();
  }
}","@Override public boolean activeServiceSupportsAssist(){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    return mImpl != null && mImpl.mInfo != null && mImpl.mInfo.getSupportsAssist();
  }
}",0.9515789473684212
195206,"public void setSystemUiVisibility(int vis,int mask){
synchronized (mList) {
    mHandler.removeMessages(MSG_SET_SYSTEMUI_VISIBILITY);
    mHandler.obtainMessage(MSG_SET_SYSTEMUI_VISIBILITY,vis,mask,null).sendToTarget();
  }
}","public void setSystemUiVisibility(int vis,int mask){
synchronized (mList) {
    mHandler.obtainMessage(MSG_SET_SYSTEMUI_VISIBILITY,vis,mask,null).sendToTarget();
  }
}",0.8520408163265306
195207,"@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}","@Override public void onHeadsUpPinnedModeChanged(boolean inPinnedMode){
  if (inPinnedMode) {
    mStatusBarWindowManager.setHeadsUpShowing(true);
    mStatusBarWindowManager.setForceStatusBarVisible(true);
  }
 else {
    Runnable endRunnable=new Runnable(){
      @Override public void run(){
        if (!mHeadsUpManager.hasPinnedHeadsUp()) {
          mStatusBarWindowManager.setHeadsUpShowing(false);
        }
      }
    }
;
    if (!mNotificationPanel.isFullyCollapsed()) {
      endRunnable.run();
    }
 else {
      mStackScroller.runAfterAnimationFinished(endRunnable);
    }
  }
}",0.9467140319715808
195208,"private void checkBarModes(){
  if (mDemoMode)   return;
  checkBarMode(mStatusBarMode,mStatusBarWindowState,mStatusBarView.getBarTransitions());
  if (mNavigationBarView != null) {
    checkBarMode(mNavigationBarMode,mNavigationBarWindowState,mNavigationBarView.getBarTransitions());
  }
}","private void checkBarModes(){
  if (mDemoMode)   return;
  checkBarMode(mStatusBarMode,mStatusBarWindowState,mStatusBarView.getBarTransitions(),mNoAnimationOnNextBarModeChange);
  if (mNavigationBarView != null) {
    checkBarMode(mNavigationBarMode,mNavigationBarWindowState,mNavigationBarView.getBarTransitions(),mNoAnimationOnNextBarModeChange);
  }
  mNoAnimationOnNextBarModeChange=false;
}",0.8467153284671532
195209,"private void checkBarMode(int mode,int windowState,BarTransitions transitions){
  final boolean powerSave=mBatteryController.isPowerSave();
  final boolean anim=(mScreenOn == null || mScreenOn) && windowState != WINDOW_STATE_HIDDEN && !powerSave;
  if (powerSave && getBarState() == StatusBarState.SHADE) {
    mode=MODE_WARNING;
  }
  transitions.transitionTo(mode,anim);
}","private void checkBarMode(int mode,int windowState,BarTransitions transitions,boolean noAnimation){
  final boolean powerSave=mBatteryController.isPowerSave();
  final boolean anim=!noAnimation && (mScreenOn == null || mScreenOn) && windowState != WINDOW_STATE_HIDDEN && !powerSave;
  if (powerSave && getBarState() == StatusBarState.SHADE) {
    mode=MODE_WARNING;
  }
  transitions.transitionTo(mode,anim);
}",0.9540816326530612
195210,"@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}","@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}",0.9497029702970295
195211,"/** 
 * State is one or more of the DISABLE constants from StatusBarManager.
 */
public void disable(int state1,int state2,boolean animate){
  mDisabledUnmodified1=state1;
  mDisabledUnmodified2=state2;
  state1=adjustDisableFlags(state1);
  final int old1=mDisabled1;
  final int diff1=state1 ^ old1;
  mDisabled1=state1;
  final int old2=mDisabled2;
  final int diff2=state2 ^ old2;
  mDisabled2=state2;
  if (DEBUG) {
    Log.d(TAG,String.format(""String_Node_Str"",old1,state1,diff1));
    Log.d(TAG,String.format(""String_Node_Str"",old2,state2,diff2));
  }
  StringBuilder flagdbg=new StringBuilder();
  flagdbg.append(""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(""String_Node_Str"");
  Log.d(TAG,flagdbg.toString());
  if ((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
    if ((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
      mIconController.hideSystemIconArea(animate);
    }
 else {
      mIconController.showSystemIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) {
    boolean visible=(state1 & StatusBarManager.DISABLE_CLOCK) == 0;
    mIconController.setClockVisibility(visible);
  }
  if ((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) {
    if ((state1 & StatusBarManager.DISABLE_EXPAND) != 0) {
      animateCollapsePanels();
    }
  }
  if ((diff1 & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK| StatusBarManager.DISABLE_SEARCH)) != 0) {
    if (mNavigationBarView != null)     mNavigationBarView.setDisabledFlags(state1);
    if ((state1 & StatusBarManager.DISABLE_RECENT) != 0) {
      mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
      mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
    if ((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
      mIconController.hideNotificationIconArea(animate);
    }
 else {
      mIconController.showNotificationIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
    mDisableNotificationAlerts=(state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
    mHeadsUpObserver.onChange(true);
  }
  if ((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) {
    updateQsExpansionEnabled();
  }
}","/** 
 * State is one or more of the DISABLE constants from StatusBarManager.
 */
public void disable(int state1,int state2,boolean animate){
  animate&=mStatusBarWindowState != WINDOW_STATE_HIDDEN;
  mDisabledUnmodified1=state1;
  mDisabledUnmodified2=state2;
  state1=adjustDisableFlags(state1);
  final int old1=mDisabled1;
  final int diff1=state1 ^ old1;
  mDisabled1=state1;
  final int old2=mDisabled2;
  final int diff2=state2 ^ old2;
  mDisabled2=state2;
  if (DEBUG) {
    Log.d(TAG,String.format(""String_Node_Str"",old1,state1,diff1));
    Log.d(TAG,String.format(""String_Node_Str"",old2,state2,diff2));
  }
  StringBuilder flagdbg=new StringBuilder();
  flagdbg.append(""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_BACK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_HOME) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_RECENT) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff1 & StatusBarManager.DISABLE_SEARCH) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((state2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) ? ""String_Node_Str"" : ""String_Node_Str"");
  flagdbg.append(""String_Node_Str"");
  Log.d(TAG,flagdbg.toString());
  if ((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
    if ((state1 & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
      mIconController.hideSystemIconArea(animate);
    }
 else {
      mIconController.showSystemIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_CLOCK) != 0) {
    boolean visible=(state1 & StatusBarManager.DISABLE_CLOCK) == 0;
    mIconController.setClockVisibility(visible);
  }
  if ((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) {
    if ((state1 & StatusBarManager.DISABLE_EXPAND) != 0) {
      animateCollapsePanels();
    }
  }
  if ((diff1 & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK| StatusBarManager.DISABLE_SEARCH)) != 0) {
    if (mNavigationBarView != null)     mNavigationBarView.setDisabledFlags(state1);
    if ((state1 & StatusBarManager.DISABLE_RECENT) != 0) {
      mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
      mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
    if ((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
      mIconController.hideNotificationIconArea(animate);
    }
 else {
      mIconController.showNotificationIconArea(animate);
    }
  }
  if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
    mDisableNotificationAlerts=(state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
    mHeadsUpObserver.onChange(true);
  }
  if ((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) {
    updateQsExpansionEnabled();
  }
}",0.9937493146178308
195212,"void makeExpandedInvisible(){
  if (SPEW)   Log.d(TAG,""String_Node_Str"" + mExpandedVisible + ""String_Node_Str""+ mExpandedVisible);
  if (!mExpandedVisible || mStatusBarWindow == null) {
    return;
  }
  mStatusBarView.collapseAllPanels(false,false,1.0f);
  mNotificationPanel.closeQs();
  mExpandedVisible=false;
  if (mNavigationBarView != null)   mNavigationBarView.setSlippery(false);
  visibilityChanged(false);
  mStatusBarWindowManager.setStatusBarExpanded(false);
  mStatusBarView.setFocusable(true);
  dismissPopups();
  runPostCollapseRunnables();
  setInteracting(StatusBarManager.WINDOW_STATUS_BAR,false);
  showBouncer();
  disable(mDisabledUnmodified1,mDisabledUnmodified2,true);
  if (!mStatusBarKeyguardViewManager.isShowing()) {
    WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
  }
}","void makeExpandedInvisible(){
  if (SPEW)   Log.d(TAG,""String_Node_Str"" + mExpandedVisible + ""String_Node_Str""+ mExpandedVisible);
  if (!mExpandedVisible || mStatusBarWindow == null) {
    return;
  }
  mStatusBarView.collapseAllPanels(false,false,1.0f);
  mNotificationPanel.closeQs();
  mExpandedVisible=false;
  if (mNavigationBarView != null)   mNavigationBarView.setSlippery(false);
  visibilityChanged(false);
  mStatusBarWindowManager.setStatusBarExpanded(false);
  mStatusBarWindowManager.setForceStatusBarVisible(false);
  mStatusBarView.setFocusable(true);
  dismissPopups();
  runPostCollapseRunnables();
  setInteracting(StatusBarManager.WINDOW_STATUS_BAR,false);
  showBouncer();
  disable(mDisabledUnmodified1,mDisabledUnmodified2,true);
  if (!mStatusBarKeyguardViewManager.isShowing()) {
    WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
  }
}",0.9662278191184888
195213,"private void apply(State state){
  applyKeyguardFlags(state);
  applyFocusableFlag(state);
  adjustScreenOrientation(state);
  applyHeight(state);
  applyUserActivityTimeout(state);
  applyInputFeatures(state);
  applyFitsSystemWindows(state);
  applyModalFlag(state);
  if (mLp.copyFrom(mLpChanged) != 0) {
    mWindowManager.updateViewLayout(mStatusBarView,mLp);
  }
}","private void apply(State state){
  applyKeyguardFlags(state);
  applyForceStatusBarVisibleFlag(state);
  applyFocusableFlag(state);
  adjustScreenOrientation(state);
  applyHeight(state);
  applyUserActivityTimeout(state);
  applyInputFeatures(state);
  applyFitsSystemWindows(state);
  applyModalFlag(state);
  if (mLp.copyFrom(mLpChanged) != 0) {
    mWindowManager.updateViewLayout(mStatusBarView,mLp);
  }
}",0.9475032010243278
195214,"public int updateVisibilityLw(boolean transientAllowed,int oldVis,int vis){
  if (mWin == null)   return vis;
  if (isTransientShowing() || isTransientShowRequested()) {
    if (transientAllowed) {
      vis|=mTransientFlag;
      if ((oldVis & mTransientFlag) == 0) {
        vis|=mUnhideFlag;
      }
      setTransientBarState(TRANSIENT_BAR_SHOWING);
    }
 else {
      setTransientBarState(TRANSIENT_BAR_NONE);
    }
  }
  if (mTransientBarState != TRANSIENT_BAR_NONE) {
    vis|=mTransientFlag;
    vis&=~View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
  if ((vis & mTranslucentFlag) != 0 || (oldVis & mTranslucentFlag) != 0 || ((vis | oldVis) & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
    mLastTranslucent=SystemClock.uptimeMillis();
  }
  return vis;
}","public int updateVisibilityLw(boolean transientAllowed,int oldVis,int vis){
  if (mWin == null)   return vis;
  if (isTransientShowing() || isTransientShowRequested()) {
    if (transientAllowed) {
      vis|=mTransientFlag;
      if ((oldVis & mTransientFlag) == 0) {
        vis|=mUnhideFlag;
      }
      setTransientBarState(TRANSIENT_BAR_SHOWING);
    }
 else {
      setTransientBarState(TRANSIENT_BAR_NONE);
    }
  }
  if (mShowTransparent) {
    vis|=View.SYSTEM_UI_TRANSPARENT;
    if (mSetUnHideFlagWhenNextTransparent) {
      vis|=mUnhideFlag;
      mSetUnHideFlagWhenNextTransparent=false;
    }
  }
  if (mTransientBarState != TRANSIENT_BAR_NONE) {
    vis|=mTransientFlag;
    vis&=~View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
  if ((vis & mTranslucentFlag) != 0 || (oldVis & mTranslucentFlag) != 0 || ((vis | oldVis) & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
    mLastTranslucent=SystemClock.uptimeMillis();
  }
  return vis;
}",0.8879668049792531
195215,"public boolean setBarShowingLw(final boolean show){
  if (mWin == null)   return false;
  if (show && mTransientBarState == TRANSIENT_BAR_HIDING) {
    mPendingShow=true;
    return false;
  }
  final boolean wasVis=mWin.isVisibleLw();
  final boolean wasAnim=mWin.isAnimatingLw();
  final boolean change=show ? mWin.showLw(true) : mWin.hideLw(true);
  final int state=computeStateLw(wasVis,wasAnim,mWin,change);
  final boolean stateChanged=updateStateLw(state);
  return change || stateChanged;
}","public boolean setBarShowingLw(final boolean show){
  if (mWin == null)   return false;
  if (show && mTransientBarState == TRANSIENT_BAR_HIDING) {
    mPendingShow=true;
    return false;
  }
  final boolean wasVis=mWin.isVisibleLw();
  final boolean wasAnim=mWin.isAnimatingLw();
  final boolean change=show ? mWin.showLw(!mNoAnimationOnNextShow) : mWin.hideLw(!mNoAnimationOnNextShow);
  mNoAnimationOnNextShow=false;
  final int state=computeStateLw(wasVis,wasAnim,mWin,change);
  final boolean stateChanged=updateStateLw(state);
  return change || stateChanged;
}",0.9174484052532832
195216,"/** 
 * {@inheritDoc} 
 */
@Override public void beginPostLayoutPolicyLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mTopFullscreenOpaqueOrDimmingWindowState=null;
  mAppsToBeHidden.clear();
  mAppsThatDismissKeyguard.clear();
  mForceStatusBar=false;
  mForceStatusBarFromKeyguard=false;
  mForcingShowNavBar=false;
  mForcingShowNavBarLayer=-1;
  mHideLockScreen=false;
  mAllowLockscreenWhenOn=false;
  mDismissKeyguard=DISMISS_KEYGUARD_NONE;
  mShowingLockscreen=false;
  mShowingDream=false;
  mWinShowWhenLocked=null;
  mKeyguardSecure=isKeyguardSecure();
  mKeyguardSecureIncludingHidden=mKeyguardSecure && (mKeyguardDelegate != null && mKeyguardDelegate.isShowing());
}","/** 
 * {@inheritDoc} 
 */
@Override public void beginPostLayoutPolicyLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mTopFullscreenOpaqueOrDimmingWindowState=null;
  mAppsToBeHidden.clear();
  mAppsThatDismissKeyguard.clear();
  mForceStatusBar=false;
  mForceStatusBarFromKeyguard=false;
  mForceStatusBarTransparent=false;
  mForcingShowNavBar=false;
  mForcingShowNavBarLayer=-1;
  mHideLockScreen=false;
  mAllowLockscreenWhenOn=false;
  mDismissKeyguard=DISMISS_KEYGUARD_NONE;
  mShowingLockscreen=false;
  mShowingDream=false;
  mWinShowWhenLocked=null;
  mKeyguardSecure=isKeyguardSecure();
  mKeyguardSecureIncludingHidden=mKeyguardSecure && (mKeyguardDelegate != null && mKeyguardDelegate.isShowing());
}",0.9753424657534246
195217,"/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR && (attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
    mForceStatusBarFromKeyguard=true;
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    if (appWindow) {
      final IApplicationToken appToken=win.getAppToken();
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=mWinDismissingKeyguard == win ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    if (appWindow) {
      final IApplicationToken appToken=win.getAppToken();
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=mWinDismissingKeyguard == win ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}",0.9806562193927522
195218,"/** 
 * {@inheritDoc} 
 */
@Override public int finishPostLayoutPolicyLw(){
  if (mWinShowWhenLocked != null && mTopFullscreenOpaqueWindowState != null && mWinShowWhenLocked.getAppToken() != mTopFullscreenOpaqueWindowState.getAppToken() && isKeyguardLocked()) {
    mWinShowWhenLocked.getAttrs().flags|=FLAG_SHOW_WALLPAPER;
    mTopFullscreenOpaqueWindowState.hideLw(false);
    mTopFullscreenOpaqueWindowState=mWinShowWhenLocked;
  }
  int changes=0;
  boolean topIsFullscreen=false;
  final WindowManager.LayoutParams lp=(mTopFullscreenOpaqueWindowState != null) ? mTopFullscreenOpaqueWindowState.getAttrs() : null;
  if (!mShowingDream) {
    mDreamingLockscreen=mShowingLockscreen;
    if (mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=false;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,0,1).sendToTarget();
    }
  }
 else {
    if (!mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=true;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,1,1).sendToTarget();
    }
  }
  if (mStatusBar != null) {
    if (DEBUG_LAYOUT)     Slog.i(TAG,""String_Node_Str"" + mForceStatusBar + ""String_Node_Str""+ mForceStatusBarFromKeyguard+ ""String_Node_Str""+ mTopFullscreenOpaqueWindowState);
    if (mForceStatusBar || mForceStatusBarFromKeyguard) {
      if (DEBUG_LAYOUT)       Slog.v(TAG,""String_Node_Str"");
      if (mStatusBarController.setBarShowingLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT;
      }
      topIsFullscreen=mTopIsFullscreen && mStatusBar.isAnimatingLw();
      if (mForceStatusBarFromKeyguard && mStatusBarController.isTransientShowing()) {
        mStatusBarController.updateVisibilityLw(false,mLastSystemUiFlags,mLastSystemUiFlags);
      }
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      final int fl=PolicyControl.getWindowFlags(null,lp);
      if (localLOGV) {
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getFrameLw() + ""String_Node_Str""+ mTopFullscreenOpaqueWindowState.getShownFrameLw());
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getAttrs() + ""String_Node_Str""+ Integer.toHexString(fl));
      }
      topIsFullscreen=(fl & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0 || (mLastSystemUiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0;
      if (mStatusBarController.isTransientShowing()) {
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
 else       if (topIsFullscreen) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
 else {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"");
        }
      }
 else {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
    }
  }
  if (mTopIsFullscreen != topIsFullscreen) {
    if (!topIsFullscreen) {
      changes|=FINISH_LAYOUT_REDO_LAYOUT;
    }
    mTopIsFullscreen=topIsFullscreen;
  }
  if (mKeyguardDelegate != null && mStatusBar != null) {
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + mHideLockScreen);
    if (mDismissKeyguard != DISMISS_KEYGUARD_NONE && !mKeyguardSecure) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      if (mKeyguardDelegate.isShowing()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.keyguardDone(false,false);
          }
        }
);
      }
    }
 else     if (mHideLockScreen) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
 else     if (mDismissKeyguard != DISMISS_KEYGUARD_NONE) {
      if (mDismissKeyguard == DISMISS_KEYGUARD_START) {
        mKeyguardHidden=false;
        if (setKeyguardOccludedLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
        }
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.dismiss();
          }
        }
);
      }
    }
 else {
      mWinDismissingKeyguard=null;
      mKeyguardHidden=false;
      if (setKeyguardOccludedLw(false)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
  }
  if ((updateSystemUiVisibilityLw() & SYSTEM_UI_CHANGING_LAYOUT) != 0) {
    changes|=FINISH_LAYOUT_REDO_LAYOUT;
  }
  updateLockScreenTimeout();
  return changes;
}","/** 
 * {@inheritDoc} 
 */
@Override public int finishPostLayoutPolicyLw(){
  if (mWinShowWhenLocked != null && mTopFullscreenOpaqueWindowState != null && mWinShowWhenLocked.getAppToken() != mTopFullscreenOpaqueWindowState.getAppToken() && isKeyguardLocked()) {
    mWinShowWhenLocked.getAttrs().flags|=FLAG_SHOW_WALLPAPER;
    mTopFullscreenOpaqueWindowState.hideLw(false);
    mTopFullscreenOpaqueWindowState=mWinShowWhenLocked;
  }
  int changes=0;
  boolean topIsFullscreen=false;
  final WindowManager.LayoutParams lp=(mTopFullscreenOpaqueWindowState != null) ? mTopFullscreenOpaqueWindowState.getAttrs() : null;
  if (!mShowingDream) {
    mDreamingLockscreen=mShowingLockscreen;
    if (mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=false;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,0,1).sendToTarget();
    }
  }
 else {
    if (!mDreamingSleepTokenNeeded) {
      mDreamingSleepTokenNeeded=true;
      mHandler.obtainMessage(MSG_UPDATE_DREAMING_SLEEP_TOKEN,1,1).sendToTarget();
    }
  }
  if (mStatusBar != null) {
    if (DEBUG_LAYOUT)     Slog.i(TAG,""String_Node_Str"" + mForceStatusBar + ""String_Node_Str""+ mForceStatusBarFromKeyguard+ ""String_Node_Str""+ mTopFullscreenOpaqueWindowState);
    boolean shouldBeTransparent=mForceStatusBarTransparent && !mForceStatusBar && !mForceStatusBarFromKeyguard;
    if (!shouldBeTransparent) {
      mStatusBarController.setShowTransparent(false);
    }
 else     if (!mStatusBar.isVisibleLw()) {
      mStatusBarController.setShowTransparent(true);
    }
    if (mForceStatusBar || mForceStatusBarFromKeyguard || mForceStatusBarTransparent) {
      if (DEBUG_LAYOUT)       Slog.v(TAG,""String_Node_Str"");
      if (mStatusBarController.setBarShowingLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT;
      }
      topIsFullscreen=mTopIsFullscreen && mStatusBar.isAnimatingLw();
      if (mForceStatusBarFromKeyguard && mStatusBarController.isTransientShowing()) {
        mStatusBarController.updateVisibilityLw(false,mLastSystemUiFlags,mLastSystemUiFlags);
      }
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      final int fl=PolicyControl.getWindowFlags(null,lp);
      if (localLOGV) {
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getFrameLw() + ""String_Node_Str""+ mTopFullscreenOpaqueWindowState.getShownFrameLw());
        Slog.d(TAG,""String_Node_Str"" + mTopFullscreenOpaqueWindowState.getAttrs() + ""String_Node_Str""+ Integer.toHexString(fl));
      }
      topIsFullscreen=(fl & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0 || (mLastSystemUiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0;
      if (mStatusBarController.isTransientShowing()) {
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
 else       if (topIsFullscreen) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
 else {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"");
        }
      }
 else {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mStatusBarController.setBarShowingLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
        }
      }
    }
  }
  if (mTopIsFullscreen != topIsFullscreen) {
    if (!topIsFullscreen) {
      changes|=FINISH_LAYOUT_REDO_LAYOUT;
    }
    mTopIsFullscreen=topIsFullscreen;
  }
  if (mKeyguardDelegate != null && mStatusBar != null) {
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + mHideLockScreen);
    if (mDismissKeyguard != DISMISS_KEYGUARD_NONE && !mKeyguardSecure) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      if (mKeyguardDelegate.isShowing()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.keyguardDone(false,false);
          }
        }
);
      }
    }
 else     if (mHideLockScreen) {
      mKeyguardHidden=true;
      if (setKeyguardOccludedLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
 else     if (mDismissKeyguard != DISMISS_KEYGUARD_NONE) {
      if (mDismissKeyguard == DISMISS_KEYGUARD_START) {
        mKeyguardHidden=false;
        if (setKeyguardOccludedLw(false)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
        }
        mHandler.post(new Runnable(){
          @Override public void run(){
            mKeyguardDelegate.dismiss();
          }
        }
);
      }
    }
 else {
      mWinDismissingKeyguard=null;
      mKeyguardHidden=false;
      if (setKeyguardOccludedLw(false)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
  }
  if ((updateSystemUiVisibilityLw() & SYSTEM_UI_CHANGING_LAYOUT) != 0) {
    changes|=FINISH_LAYOUT_REDO_LAYOUT;
  }
  updateLockScreenTimeout();
  return changes;
}",0.9663932786557312
195219,"@Override public ParcelableConference createFromParcel(Parcel source){
  ClassLoader classLoader=ParcelableConference.class.getClassLoader();
  PhoneAccountHandle phoneAccount=source.readParcelable(classLoader);
  int state=source.readInt();
  int capabilities=source.readInt();
  List<String> connectionIds=new ArrayList<>(2);
  source.readList(connectionIds,classLoader);
  long connectTimeMillis=source.readLong();
  StatusHints statusHints=source.readParcelable(classLoader);
  IVideoProvider videoCallProvider=IVideoProvider.Stub.asInterface(source.readStrongBinder());
  int videoState=source.readInt();
  return new ParcelableConference(phoneAccount,state,capabilities,connectionIds,videoCallProvider,videoState,connectTimeMillis,statusHints);
}","@Override public ParcelableConference createFromParcel(Parcel source){
  ClassLoader classLoader=ParcelableConference.class.getClassLoader();
  PhoneAccountHandle phoneAccount=source.readParcelable(classLoader);
  int state=source.readInt();
  int capabilities=source.readInt();
  List<String> connectionIds=new ArrayList<>(2);
  source.readList(connectionIds,classLoader);
  long connectTimeMillis=source.readLong();
  IVideoProvider videoCallProvider=IVideoProvider.Stub.asInterface(source.readStrongBinder());
  int videoState=source.readInt();
  StatusHints statusHints=source.readParcelable(classLoader);
  return new ParcelableConference(phoneAccount,state,capabilities,connectionIds,videoCallProvider,videoState,connectTimeMillis,statusHints);
}",0.9175531914893617
195220,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  boolean isHeightLimited=heightMode == MeasureSpec.AT_MOST;
  if (hasFixedHeight || isHeightLimited) {
    int size=MeasureSpec.getSize(heightMeasureSpec);
    ownMaxHeight=Math.min(ownMaxHeight,size);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=hasFixedHeight ? ownMaxHeight : isHeightLimited ? Math.min(ownMaxHeight,maxChildHeight) : maxChildHeight;
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}",0.193932520555713
195221,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  boolean isHeightLimited=heightMode == MeasureSpec.AT_MOST;
  if (hasFixedHeight || isHeightLimited) {
    int size=MeasureSpec.getSize(heightMeasureSpec);
    ownMaxHeight=Math.min(ownMaxHeight,size);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=hasFixedHeight ? ownMaxHeight : isHeightLimited ? Math.min(ownMaxHeight,maxChildHeight) : maxChildHeight;
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}",0.193932520555713
195222,"private int getMaxAllowedChildHeight(View child,AmbientState ambientState){
  if (child instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (ambientState == null && row.isHeadsUp() || ambientState != null && ambientState.getTopHeadsUpEntry() == child) {
      int extraSize=row.getIntrinsicHeight() - row.getHeadsUpHeight();
      return mCollapsedSize + extraSize;
    }
    return row.getIntrinsicHeight();
  }
 else   if (child instanceof ExpandableView) {
    ExpandableView expandableView=(ExpandableView)child;
    return expandableView.getActualHeight();
  }
  return child == null ? mCollapsedSize : child.getHeight();
}","private int getMaxAllowedChildHeight(View child,AmbientState ambientState){
  if (child instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (ambientState == null && row.isHeadsUp() || ambientState != null && ambientState.getTopHeadsUpEntry() == child) {
      int extraSize=row.getIntrinsicHeight() - row.getHeadsUpHeight();
      return mCollapsedSize + extraSize;
    }
    return row.getIntrinsicHeight();
  }
 else   if (child instanceof ExpandableView) {
    ExpandableView expandableView=(ExpandableView)child;
    return expandableView.getIntrinsicHeight();
  }
  return child == null ? mCollapsedSize : child.getHeight();
}",0.9891696750902528
195223,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  boolean isHeightLimited=heightMode == MeasureSpec.AT_MOST;
  if (hasFixedHeight || isHeightLimited) {
    int size=MeasureSpec.getSize(heightMeasureSpec);
    ownMaxHeight=Math.min(ownMaxHeight,size);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=hasFixedHeight ? ownMaxHeight : isHeightLimited ? Math.min(ownMaxHeight,maxChildHeight) : maxChildHeight;
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}",0.193932520555713
195224,"private int getMaxAllowedChildHeight(View child,AmbientState ambientState){
  if (child instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (ambientState == null && row.isHeadsUp() || ambientState != null && ambientState.getTopHeadsUpEntry() == child) {
      int extraSize=row.getIntrinsicHeight() - row.getHeadsUpHeight();
      return mCollapsedSize + extraSize;
    }
    return row.getIntrinsicHeight();
  }
 else   if (child instanceof ExpandableView) {
    ExpandableView expandableView=(ExpandableView)child;
    return expandableView.getActualHeight();
  }
  return child == null ? mCollapsedSize : child.getHeight();
}","private int getMaxAllowedChildHeight(View child,AmbientState ambientState){
  if (child instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (ambientState == null && row.isHeadsUp() || ambientState != null && ambientState.getTopHeadsUpEntry() == child) {
      int extraSize=row.getIntrinsicHeight() - row.getHeadsUpHeight();
      return mCollapsedSize + extraSize;
    }
    return row.getIntrinsicHeight();
  }
 else   if (child instanceof ExpandableView) {
    ExpandableView expandableView=(ExpandableView)child;
    return expandableView.getIntrinsicHeight();
  }
  return child == null ? mCollapsedSize : child.getHeight();
}",0.9891696750902528
195225,"private int getMaxAllowedChildHeight(View child,AmbientState ambientState){
  if (child instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (ambientState == null && row.isHeadsUp() || ambientState != null && ambientState.getTopHeadsUpEntry() == child) {
      int extraSize=row.getIntrinsicHeight() - row.getHeadsUpHeight();
      return mCollapsedSize + extraSize;
    }
    return row.getIntrinsicHeight();
  }
 else   if (child instanceof ExpandableView) {
    ExpandableView expandableView=(ExpandableView)child;
    return expandableView.getActualHeight();
  }
  return child == null ? mCollapsedSize : child.getHeight();
}","private int getMaxAllowedChildHeight(View child,AmbientState ambientState){
  if (child instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (ambientState == null && row.isHeadsUp() || ambientState != null && ambientState.getTopHeadsUpEntry() == child) {
      int extraSize=row.getIntrinsicHeight() - row.getHeadsUpHeight();
      return mCollapsedSize + extraSize;
    }
    return row.getIntrinsicHeight();
  }
 else   if (child instanceof ExpandableView) {
    ExpandableView expandableView=(ExpandableView)child;
    return expandableView.getIntrinsicHeight();
  }
  return child == null ? mCollapsedSize : child.getHeight();
}",0.9891696750902528
195226,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  boolean isHeightLimited=heightMode == MeasureSpec.AT_MOST;
  if (hasFixedHeight || isHeightLimited) {
    int size=MeasureSpec.getSize(heightMeasureSpec);
    ownMaxHeight=Math.min(ownMaxHeight,size);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=hasFixedHeight ? ownMaxHeight : isHeightLimited ? Math.min(ownMaxHeight,maxChildHeight) : maxChildHeight;
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}",0.193932520555713
195227,"private int getMaxAllowedChildHeight(View child,AmbientState ambientState){
  if (child instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (ambientState == null && row.isHeadsUp() || ambientState != null && ambientState.getTopHeadsUpEntry() == child) {
      int extraSize=row.getIntrinsicHeight() - row.getHeadsUpHeight();
      return mCollapsedSize + extraSize;
    }
    return row.getIntrinsicHeight();
  }
 else   if (child instanceof ExpandableView) {
    ExpandableView expandableView=(ExpandableView)child;
    return expandableView.getActualHeight();
  }
  return child == null ? mCollapsedSize : child.getHeight();
}","private int getMaxAllowedChildHeight(View child,AmbientState ambientState){
  if (child instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (ambientState == null && row.isHeadsUp() || ambientState != null && ambientState.getTopHeadsUpEntry() == child) {
      int extraSize=row.getIntrinsicHeight() - row.getHeadsUpHeight();
      return mCollapsedSize + extraSize;
    }
    return row.getIntrinsicHeight();
  }
 else   if (child instanceof ExpandableView) {
    ExpandableView expandableView=(ExpandableView)child;
    return expandableView.getIntrinsicHeight();
  }
  return child == null ? mCollapsedSize : child.getHeight();
}",0.9891696750902528
195228,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  boolean isHeightLimited=heightMode == MeasureSpec.AT_MOST;
  if (hasFixedHeight || isHeightLimited) {
    int size=MeasureSpec.getSize(heightMeasureSpec);
    ownMaxHeight=Math.min(ownMaxHeight,size);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=hasFixedHeight ? ownMaxHeight : isHeightLimited ? Math.min(ownMaxHeight,maxChildHeight) : maxChildHeight;
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxViewHeight;
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE || isChildInvisible(child)) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (canHaveBottomDecor()) {
    ownHeight+=mBottomDecorHeight;
  }
  setMeasuredDimension(width,ownHeight);
}",0.193932520555713
195229,"private int getMaxAllowedChildHeight(View child,AmbientState ambientState){
  if (child instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (ambientState == null && row.isHeadsUp() || ambientState != null && ambientState.getTopHeadsUpEntry() == child) {
      int extraSize=row.getIntrinsicHeight() - row.getHeadsUpHeight();
      return mCollapsedSize + extraSize;
    }
    return row.getIntrinsicHeight();
  }
 else   if (child instanceof ExpandableView) {
    ExpandableView expandableView=(ExpandableView)child;
    return expandableView.getActualHeight();
  }
  return child == null ? mCollapsedSize : child.getHeight();
}","private int getMaxAllowedChildHeight(View child,AmbientState ambientState){
  if (child instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (ambientState == null && row.isHeadsUp() || ambientState != null && ambientState.getTopHeadsUpEntry() == child) {
      int extraSize=row.getIntrinsicHeight() - row.getHeadsUpHeight();
      return mCollapsedSize + extraSize;
    }
    return row.getIntrinsicHeight();
  }
 else   if (child instanceof ExpandableView) {
    ExpandableView expandableView=(ExpandableView)child;
    return expandableView.getIntrinsicHeight();
  }
  return child == null ? mCollapsedSize : child.getHeight();
}",0.9891696750902528
195230,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    return super.onTouchEvent(ev);
  }
switch (ev.getActionMasked()) {
case MotionEvent.ACTION_UP:
    updateDismiss(ev);
  if (mDismissed) {
    dismiss();
  }
 else   if (mSwiping) {
    cancel();
  }
resetMembers();
break;
case MotionEvent.ACTION_CANCEL:
cancel();
resetMembers();
break;
case MotionEvent.ACTION_MOVE:
mVelocityTracker.addMovement(ev);
mLastX=ev.getRawX();
updateSwiping(ev);
if (mSwiping) {
if (mUseDynamicTranslucency && getContext() instanceof Activity) {
((Activity)getContext()).convertToTranslucent(null,null);
}
setProgress(ev.getRawX() - mDownX);
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    return super.onTouchEvent(ev);
  }
  ev.offsetLocation(mTranslationX,0);
switch (ev.getActionMasked()) {
case MotionEvent.ACTION_UP:
    updateDismiss(ev);
  if (mDismissed) {
    dismiss();
  }
 else   if (mSwiping) {
    cancel();
  }
resetMembers();
break;
case MotionEvent.ACTION_CANCEL:
cancel();
resetMembers();
break;
case MotionEvent.ACTION_MOVE:
mVelocityTracker.addMovement(ev);
mLastX=ev.getRawX();
updateSwiping(ev);
if (mSwiping) {
if (mUseDynamicTranslucency && getContext() instanceof Activity) {
((Activity)getContext()).convertToTranslucent(null,null);
}
setProgress(ev.getRawX() - mDownX);
break;
}
}
return true;
}",0.9731258840169732
195231,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    return super.onTouchEvent(ev);
  }
switch (ev.getActionMasked()) {
case MotionEvent.ACTION_UP:
    updateDismiss(ev);
  if (mDismissed) {
    dismiss();
  }
 else   if (mSwiping) {
    cancel();
  }
resetMembers();
break;
case MotionEvent.ACTION_CANCEL:
cancel();
resetMembers();
break;
case MotionEvent.ACTION_MOVE:
mVelocityTracker.addMovement(ev);
mLastX=ev.getRawX();
updateSwiping(ev);
if (mSwiping) {
if (mUseDynamicTranslucency && getContext() instanceof Activity) {
((Activity)getContext()).convertToTranslucent(null,null);
}
setProgress(ev.getRawX() - mDownX);
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    return super.onTouchEvent(ev);
  }
  ev.offsetLocation(mTranslationX,0);
switch (ev.getActionMasked()) {
case MotionEvent.ACTION_UP:
    updateDismiss(ev);
  if (mDismissed) {
    dismiss();
  }
 else   if (mSwiping) {
    cancel();
  }
resetMembers();
break;
case MotionEvent.ACTION_CANCEL:
cancel();
resetMembers();
break;
case MotionEvent.ACTION_MOVE:
mVelocityTracker.addMovement(ev);
mLastX=ev.getRawX();
updateSwiping(ev);
if (mSwiping) {
if (mUseDynamicTranslucency && getContext() instanceof Activity) {
((Activity)getContext()).convertToTranslucent(null,null);
}
setProgress(ev.getRawX() - mDownX);
break;
}
}
return true;
}",0.9731258840169732
195232,"/** 
 * Ensure that a network route exists to deliver traffic to the specified host via the specified network interface. An attempt to add a route that already exists is ignored, but treated as successful. <p>This method requires the caller to hold the permission  {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.
 * @param networkType the type of the network over which traffic to the specifiedhost is to be routed
 * @param hostAddress the IP address of the host to which the route is desired
 * @return {@code true} on success, {@code false} on failure
 * @deprecated Deprecated in favor of the {@link #requestNetwork},  {@link #bindProcessToNetwork} and {@link Network#getSocketFactory} api.
 * @removed
 */
public boolean requestRouteToHost(int networkType,int hostAddress){
  return requestRouteToHostAddress(networkType,NetworkUtils.intToInetAddress(hostAddress));
}","/** 
 * Ensure that a network route exists to deliver traffic to the specified host via the specified network interface. An attempt to add a route that already exists is ignored, but treated as successful. <p>This method requires the caller to hold the permission  {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.
 * @param networkType the type of the network over which traffic to the specifiedhost is to be routed
 * @param hostAddress the IP address of the host to which the route is desired
 * @return {@code true} on success, {@code false} on failure
 * @deprecated Deprecated in favor of the{@link #requestNetwork(NetworkRequest,NetworkCallback)},  {@link #bindProcessToNetwork} and {@link Network#getSocketFactory} API.
 * @removed
 */
public boolean requestRouteToHost(int networkType,int hostAddress){
  return requestRouteToHostAddress(networkType,NetworkUtils.intToInetAddress(hostAddress));
}",0.9782729805013928
195233,"/** 
 * Tells the underlying networking system that the caller is finished using the named feature. The interpretation of   {@code feature}is completely up to each networking implementation. <p>This method requires the caller to hold the permission  {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.
 * @param networkType specifies which network the request pertains to
 * @param feature the name of the feature that is no longer needed
 * @return an integer value representing the outcome of the request.The interpretation of this value is specific to each networking implementation+feature combination, except that the value  {@code -1}always indicates failure.
 * @deprecated Deprecated in favor of the cleaner {@link #requestNetwork} api.
 * @removed
 */
public int stopUsingNetworkFeature(int networkType,String feature){
  NetworkCapabilities netCap=networkCapabilitiesForFeature(networkType,feature);
  if (netCap == null) {
    Log.d(TAG,""String_Node_Str"" + networkType + ""String_Node_Str""+ feature);
    return -1;
  }
  if (removeRequestForFeature(netCap)) {
    Log.d(TAG,""String_Node_Str"" + networkType + ""String_Node_Str""+ feature);
  }
  return 1;
}","/** 
 * Tells the underlying networking system that the caller is finished using the named feature. The interpretation of   {@code feature}is completely up to each networking implementation. <p>This method requires the caller to hold the permission  {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.
 * @param networkType specifies which network the request pertains to
 * @param feature the name of the feature that is no longer needed
 * @return an integer value representing the outcome of the request.The interpretation of this value is specific to each networking implementation+feature combination, except that the value  {@code -1}always indicates failure.
 * @deprecated Deprecated in favor of the cleaner {@link unregisterNetworkCallback} API.
 * @removed
 */
public int stopUsingNetworkFeature(int networkType,String feature){
  NetworkCapabilities netCap=networkCapabilitiesForFeature(networkType,feature);
  if (netCap == null) {
    Log.d(TAG,""String_Node_Str"" + networkType + ""String_Node_Str""+ feature);
    return -1;
  }
  if (removeRequestForFeature(netCap)) {
    Log.d(TAG,""String_Node_Str"" + networkType + ""String_Node_Str""+ feature);
  }
  return 1;
}",0.9863945578231292
195234,"/** 
 * Tells the underlying networking system that the caller wants to begin using the named feature. The interpretation of   {@code feature}is completely up to each networking implementation. <p>This method requires the caller to hold the permission  {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.
 * @param networkType specifies which network the request pertains to
 * @param feature the name of the feature to be used
 * @return an integer value representing the outcome of the request.The interpretation of this value is specific to each networking implementation+feature combination, except that the value  {@code -1}always indicates failure.
 * @deprecated Deprecated in favor of the cleaner {@link #requestNetwork} api.
 * @removed
 */
public int startUsingNetworkFeature(int networkType,String feature){
  NetworkCapabilities netCap=networkCapabilitiesForFeature(networkType,feature);
  if (netCap == null) {
    Log.d(TAG,""String_Node_Str"" + networkType + ""String_Node_Str""+ feature);
    return PhoneConstants.APN_REQUEST_FAILED;
  }
  NetworkRequest request=null;
synchronized (sLegacyRequests) {
    LegacyRequest l=sLegacyRequests.get(netCap);
    if (l != null) {
      Log.d(TAG,""String_Node_Str"" + l.networkRequest);
      renewRequestLocked(l);
      if (l.currentNetwork != null) {
        return PhoneConstants.APN_ALREADY_ACTIVE;
      }
 else {
        return PhoneConstants.APN_REQUEST_STARTED;
      }
    }
    request=requestNetworkForFeatureLocked(netCap);
  }
  if (request != null) {
    Log.d(TAG,""String_Node_Str"" + request);
    return PhoneConstants.APN_REQUEST_STARTED;
  }
 else {
    Log.d(TAG,""String_Node_Str"");
    return PhoneConstants.APN_REQUEST_FAILED;
  }
}","/** 
 * Tells the underlying networking system that the caller wants to begin using the named feature. The interpretation of   {@code feature}is completely up to each networking implementation. <p>This method requires the caller to hold the permission  {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.
 * @param networkType specifies which network the request pertains to
 * @param feature the name of the feature to be used
 * @return an integer value representing the outcome of the request.The interpretation of this value is specific to each networking implementation+feature combination, except that the value  {@code -1}always indicates failure.
 * @deprecated Deprecated in favor of the cleaner{@link #requestNetwork(NetworkRequest,NetworkCallback)} API.
 * @removed
 */
public int startUsingNetworkFeature(int networkType,String feature){
  NetworkCapabilities netCap=networkCapabilitiesForFeature(networkType,feature);
  if (netCap == null) {
    Log.d(TAG,""String_Node_Str"" + networkType + ""String_Node_Str""+ feature);
    return PhoneConstants.APN_REQUEST_FAILED;
  }
  NetworkRequest request=null;
synchronized (sLegacyRequests) {
    LegacyRequest l=sLegacyRequests.get(netCap);
    if (l != null) {
      Log.d(TAG,""String_Node_Str"" + l.networkRequest);
      renewRequestLocked(l);
      if (l.currentNetwork != null) {
        return PhoneConstants.APN_ALREADY_ACTIVE;
      }
 else {
        return PhoneConstants.APN_REQUEST_STARTED;
      }
    }
    request=requestNetworkForFeatureLocked(netCap);
  }
  if (request != null) {
    Log.d(TAG,""String_Node_Str"" + request);
    return PhoneConstants.APN_REQUEST_STARTED;
  }
 else {
    Log.d(TAG,""String_Node_Str"");
    return PhoneConstants.APN_REQUEST_FAILED;
  }
}",0.988718542088516
195235,"/** 
 * Unregisters callbacks about and possibly releases networks originating from  {@link #requestNetwork} and {@link #registerNetworkCallback} calls.  If thegiven  {@code NetworkCallback} had previously been used with {@code #requestNetwork}, any networks that had been connected to only to satisfy that request will be disconnected.
 * @param networkCallback The {@link NetworkCallback} used when making the request.
 */
public void unregisterNetworkCallback(NetworkCallback networkCallback){
  if (networkCallback == null || networkCallback.networkRequest == null || networkCallback.networkRequest.requestId == REQUEST_ID_UNSET) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    mService.releaseNetworkRequest(networkCallback.networkRequest);
  }
 catch (  RemoteException e) {
  }
}","/** 
 * Unregisters callbacks about and possibly releases networks originating from  {@link #requestNetwork(NetworkRequest,NetworkCallback)} and {@link #registerNetworkCallback}calls.  If the given   {@code NetworkCallback} had previously been used with{@code #requestNetwork}, any networks that had been connected to only to satisfy that request will be disconnected.
 * @param networkCallback The {@link NetworkCallback} used when making the request.
 */
public void unregisterNetworkCallback(NetworkCallback networkCallback){
  if (networkCallback == null || networkCallback.networkRequest == null || networkCallback.networkRequest.requestId == REQUEST_ID_UNSET) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    mService.releaseNetworkRequest(networkCallback.networkRequest);
  }
 catch (  RemoteException e) {
  }
}",0.9783393501805054
195236,"/** 
 * Ensure that a network route exists to deliver traffic to the specified host via the specified network interface. An attempt to add a route that already exists is ignored, but treated as successful. <p>This method requires the caller to hold the permission  {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.
 * @param networkType the type of the network over which traffic to the specifiedhost is to be routed
 * @param hostAddress the IP address of the host to which the route is desired
 * @return {@code true} on success, {@code false} on failure
 * @hide
 * @deprecated Deprecated in favor of the {@link #requestNetwork} and{@link #bindProcessToNetwork} api.
 * @removed
 */
public boolean requestRouteToHostAddress(int networkType,InetAddress hostAddress){
  try {
    return mService.requestRouteToHostAddress(networkType,hostAddress.getAddress());
  }
 catch (  RemoteException e) {
    return false;
  }
}","/** 
 * Ensure that a network route exists to deliver traffic to the specified host via the specified network interface. An attempt to add a route that already exists is ignored, but treated as successful. <p>This method requires the caller to hold the permission  {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.
 * @param networkType the type of the network over which traffic to the specifiedhost is to be routed
 * @param hostAddress the IP address of the host to which the route is desired
 * @return {@code true} on success, {@code false} on failure
 * @hide
 * @deprecated Deprecated in favor of the {@link #requestNetwork} and{@link #bindProcessToNetwork} API.
 * @removed
 */
public boolean requestRouteToHostAddress(int networkType,InetAddress hostAddress){
  try {
    return mService.requestRouteToHostAddress(networkType,hostAddress.getAddress());
  }
 catch (  RemoteException e) {
    return false;
  }
}",0.9967672413793104
195237,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    return super.onTouchEvent(ev);
  }
switch (ev.getActionMasked()) {
case MotionEvent.ACTION_UP:
    updateDismiss(ev);
  if (mDismissed) {
    dismiss();
  }
 else   if (mSwiping) {
    cancel();
  }
resetMembers();
break;
case MotionEvent.ACTION_CANCEL:
cancel();
resetMembers();
break;
case MotionEvent.ACTION_MOVE:
mVelocityTracker.addMovement(ev);
mLastX=ev.getRawX();
updateSwiping(ev);
if (mSwiping) {
if (mUseDynamicTranslucency && getContext() instanceof Activity) {
((Activity)getContext()).convertToTranslucent(null,null);
}
setProgress(ev.getRawX() - mDownX);
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    return super.onTouchEvent(ev);
  }
  ev.offsetLocation(mTranslationX,0);
switch (ev.getActionMasked()) {
case MotionEvent.ACTION_UP:
    updateDismiss(ev);
  if (mDismissed) {
    dismiss();
  }
 else   if (mSwiping) {
    cancel();
  }
resetMembers();
break;
case MotionEvent.ACTION_CANCEL:
cancel();
resetMembers();
break;
case MotionEvent.ACTION_MOVE:
mVelocityTracker.addMovement(ev);
mLastX=ev.getRawX();
updateSwiping(ev);
if (mSwiping) {
if (mUseDynamicTranslucency && getContext() instanceof Activity) {
((Activity)getContext()).convertToTranslucent(null,null);
}
setProgress(ev.getRawX() - mDownX);
break;
}
}
return true;
}",0.9731258840169732
195238,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    return super.onTouchEvent(ev);
  }
switch (ev.getActionMasked()) {
case MotionEvent.ACTION_UP:
    updateDismiss(ev);
  if (mDismissed) {
    dismiss();
  }
 else   if (mSwiping) {
    cancel();
  }
resetMembers();
break;
case MotionEvent.ACTION_CANCEL:
cancel();
resetMembers();
break;
case MotionEvent.ACTION_MOVE:
mVelocityTracker.addMovement(ev);
mLastX=ev.getRawX();
updateSwiping(ev);
if (mSwiping) {
if (mUseDynamicTranslucency && getContext() instanceof Activity) {
((Activity)getContext()).convertToTranslucent(null,null);
}
setProgress(ev.getRawX() - mDownX);
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    return super.onTouchEvent(ev);
  }
  ev.offsetLocation(mTranslationX,0);
switch (ev.getActionMasked()) {
case MotionEvent.ACTION_UP:
    updateDismiss(ev);
  if (mDismissed) {
    dismiss();
  }
 else   if (mSwiping) {
    cancel();
  }
resetMembers();
break;
case MotionEvent.ACTION_CANCEL:
cancel();
resetMembers();
break;
case MotionEvent.ACTION_MOVE:
mVelocityTracker.addMovement(ev);
mLastX=ev.getRawX();
updateSwiping(ev);
if (mSwiping) {
if (mUseDynamicTranslucency && getContext() instanceof Activity) {
((Activity)getContext()).convertToTranslucent(null,null);
}
setProgress(ev.getRawX() - mDownX);
break;
}
}
return true;
}",0.9731258840169732
195239,"public ChooserListAdapter(Context context,Intent[] initialIntents,List<ResolveInfo> rList,int launchedFromUid,boolean filterLastUsed,ChooserTarget[] callerChooserTargets){
  super(context,initialIntents,rList,launchedFromUid,filterLastUsed);
  for (  ChooserTarget target : callerChooserTargets) {
    mCallerTargets.add(new ChooserTargetInfo(target));
  }
}","public ChooserListAdapter(Context context,Intent[] initialIntents,List<ResolveInfo> rList,int launchedFromUid,boolean filterLastUsed,ChooserTarget[] callerChooserTargets){
  super(context,initialIntents,rList,launchedFromUid,filterLastUsed);
  if (callerChooserTargets != null) {
    for (    ChooserTarget target : callerChooserTargets) {
      mCallerTargets.add(new ChooserTargetInfo(target));
    }
  }
}",0.9216710182767625
195240,"public ChooserListAdapter(Context context,Intent[] initialIntents,List<ResolveInfo> rList,int launchedFromUid,boolean filterLastUsed,ChooserTarget[] callerChooserTargets){
  super(context,initialIntents,rList,launchedFromUid,filterLastUsed);
  for (  ChooserTarget target : callerChooserTargets) {
    mCallerTargets.add(new ChooserTargetInfo(target));
  }
}","public ChooserListAdapter(Context context,Intent[] initialIntents,List<ResolveInfo> rList,int launchedFromUid,boolean filterLastUsed,ChooserTarget[] callerChooserTargets){
  super(context,initialIntents,rList,launchedFromUid,filterLastUsed);
  if (callerChooserTargets != null) {
    for (    ChooserTarget target : callerChooserTargets) {
      mCallerTargets.add(new ChooserTargetInfo(target));
    }
  }
}",0.9216710182767625
195241,"/** 
 * Stress Wifi Scanning TODO: test the scanning quality for each frequency band
 */
@LargeTest public void testWifiScanning(){
  long scanTimeSum=0, i, averageScanTime=-1;
  int ssidAppearInScanResultsCount=0;
  for (i=1; i <= mScanIterations; i++) {
    logv(""String_Node_Str"" + i);
    averageScanTime=scanTimeSum / i;
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",averageScanTime));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
    List<ScanResult> scanResultLocal=null;
    long start=0;
synchronized (mWifiScanResultLock) {
      start=SystemClock.uptimeMillis();
      assertTrue(""String_Node_Str"",mWifiManager.startScan());
      try {
        mWifiScanResultLock.wait(WAIT_FOR_SCAN_RESULT);
      }
 catch (      InterruptedException e) {
      }
      scanTimeSum+=SystemClock.uptimeMillis() - start;
      scanResultLocal=mLastScanResult;
    }
    if (scanResultLocal == null || scanResultLocal.isEmpty()) {
      fail(""String_Node_Str"");
    }
    logv(""String_Node_Str"" + scanResultLocal.size());
    for (    ScanResult sr : scanResultLocal) {
      logv(String.format(""String_Node_Str"" + sr.toString()));
      if (mSsid.equals(sr.SSID)) {
        ssidAppearInScanResultsCount+=1;
        break;
      }
    }
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",averageScanTime);
  result.putInt(""String_Node_Str"",ssidAppearInScanResultsCount);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mScanIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",scanTimeSum / (i - 1)));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
  }
}","/** 
 * Stress Wifi Scanning TODO: test the scanning quality for each frequency band
 */
@LargeTest public void testWifiScanning(){
  long scanTimeSum=0, i, averageScanTime=-1;
  int ssidAppearInScanResultsCount=0;
  for (i=1; i <= mScanIterations; i++) {
    logv(""String_Node_Str"" + i);
    averageScanTime=scanTimeSum / i;
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",averageScanTime));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
    List<ScanResult> scanResultLocal=null;
    long start=0;
synchronized (mWifiScanResultLock) {
      start=SystemClock.uptimeMillis();
      assertTrue(""String_Node_Str"",mWifiManager.startScan());
      try {
        mWifiScanResultLock.wait(WAIT_FOR_SCAN_RESULT);
      }
 catch (      InterruptedException e) {
      }
      scanTimeSum+=SystemClock.uptimeMillis() - start;
      scanResultLocal=mLastScanResult;
    }
    if (scanResultLocal == null || scanResultLocal.isEmpty()) {
      fail(""String_Node_Str"");
    }
    logv(""String_Node_Str"" + scanResultLocal.size());
    for (    ScanResult sr : scanResultLocal) {
      logv(String.format(""String_Node_Str"" + sr.toString()));
      if (mSsid.equals(sr.SSID)) {
        ssidAppearInScanResultsCount+=1;
        break;
      }
    }
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",averageScanTime);
  result.putInt(""String_Node_Str"",ssidAppearInScanResultsCount);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mScanIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i - 1,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",scanTimeSum / (i - 1)));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i - 1));
  }
}",0.9978609625668448
195242,"@LargeTest public void testWifiReconnectionAfterSleep(){
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE,0);
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SLEEP_POLICY,Settings.Global.WIFI_SLEEP_POLICY_DEFAULT);
  Settings.Global.putLong(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_IDLE_MS,WIFI_IDLE_MS);
  WifiConfiguration config;
  if (mPassword == null) {
    config=WifiConfigurationHelper.createOpenConfig(mSsid);
  }
 else {
    config=WifiConfigurationHelper.createPskConfig(mSsid,mPassword);
  }
  assertTrue(""String_Node_Str"" + mSsid,connectToWifiWithConfiguration(config));
  assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,WIFI_CONNECTION_TIMEOUT));
  assertTrue(""String_Node_Str"",pingTest());
  long i, sum=0, avgReconnectTime=0;
  for (i=1; i <= mReconnectIterations; i++) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
    logv(""String_Node_Str"" + i);
    turnScreenOff();
    long start=SystemClock.uptimeMillis();
    PowerManager pm=(PowerManager)mRunner.getContext().getSystemService(Context.POWER_SERVICE);
    while (pm.isInteractive() && ((SystemClock.uptimeMillis() - start) < SCREEN_OFF_TIMER)) {
      SystemClock.sleep(100);
    }
    assertFalse(""String_Node_Str"",pm.isInteractive());
    SystemClock.sleep(WIFI_IDLE_MS + WIFI_SHUTDOWN_DELAY);
    if (mWifiOnlyFlag) {
      assertTrue(""String_Node_Str"",waitUntilNoActiveNetworkConnection(2 * LONG_TIMEOUT));
    }
 else {
      assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_MOBILE,State.CONNECTED,2 * LONG_TIMEOUT));
    }
    SystemClock.sleep(mWifiSleepTime);
    if (mWifiOnlyFlag) {
      NetworkInfo ni=mCm.getActiveNetworkInfo();
      if (ni != null) {
        Log.e(mLogTag,""String_Node_Str"" + ni.toString());
        fail(""String_Node_Str"");
      }
    }
 else {
      assertEquals(""String_Node_Str"",State.CONNECTED,mCm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState());
      assertTrue(""String_Node_Str"",pingTest());
    }
    turnScreenOn();
    long startTime=SystemClock.uptimeMillis();
    assertTrue(""String_Node_Str"",waitForWifiState(WifiManager.WIFI_STATE_ENABLED,SHORT_TIMEOUT));
    assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,LONG_TIMEOUT));
    long connectionTime=SystemClock.uptimeMillis() - startTime;
    sum+=connectionTime;
    avgReconnectTime=sum / i;
    logv(""String_Node_Str"" + avgReconnectTime);
    assertTrue(""String_Node_Str"",pingTest());
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",avgReconnectTime);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mReconnectIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
  }
}","@LargeTest public void testWifiReconnectionAfterSleep(){
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE,0);
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SLEEP_POLICY,Settings.Global.WIFI_SLEEP_POLICY_DEFAULT);
  Settings.Global.putLong(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_IDLE_MS,WIFI_IDLE_MS);
  WifiConfiguration config;
  if (mPassword == null) {
    config=WifiConfigurationHelper.createOpenConfig(mSsid);
  }
 else {
    config=WifiConfigurationHelper.createPskConfig(mSsid,mPassword);
  }
  assertTrue(""String_Node_Str"" + mSsid,connectToWifiWithConfiguration(config));
  assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,WIFI_CONNECTION_TIMEOUT));
  assertTrue(""String_Node_Str"",pingTest());
  long i, sum=0, avgReconnectTime=0;
  for (i=1; i <= mReconnectIterations; i++) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
    logv(""String_Node_Str"" + i);
    turnScreenOff();
    long start=SystemClock.uptimeMillis();
    PowerManager pm=(PowerManager)mRunner.getContext().getSystemService(Context.POWER_SERVICE);
    while (pm.isInteractive() && ((SystemClock.uptimeMillis() - start) < SCREEN_OFF_TIMER)) {
      SystemClock.sleep(100);
    }
    assertFalse(""String_Node_Str"",pm.isInteractive());
    SystemClock.sleep(WIFI_IDLE_MS + WIFI_SHUTDOWN_DELAY);
    if (mWifiOnlyFlag) {
      assertTrue(""String_Node_Str"",waitUntilNoActiveNetworkConnection(2 * LONG_TIMEOUT));
    }
 else {
      assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_MOBILE,State.CONNECTED,2 * LONG_TIMEOUT));
    }
    SystemClock.sleep(mWifiSleepTime);
    if (mWifiOnlyFlag) {
      NetworkInfo ni=mCm.getActiveNetworkInfo();
      if (ni != null) {
        Log.e(mLogTag,""String_Node_Str"" + ni.toString());
        fail(""String_Node_Str"");
      }
    }
 else {
      assertEquals(""String_Node_Str"",State.CONNECTED,mCm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState());
      assertTrue(""String_Node_Str"",pingTest());
    }
    turnScreenOn();
    long startTime=SystemClock.uptimeMillis();
    assertTrue(""String_Node_Str"",waitForWifiState(WifiManager.WIFI_STATE_ENABLED,SHORT_TIMEOUT));
    assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,LONG_TIMEOUT));
    long connectionTime=SystemClock.uptimeMillis() - startTime;
    sum+=connectionTime;
    avgReconnectTime=sum / i;
    logv(""String_Node_Str"" + avgReconnectTime);
    assertTrue(""String_Node_Str"",pingTest());
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",avgReconnectTime);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mReconnectIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i - 1,mReconnectIterations));
  }
}",0.9993252361673416
195243,"public ChooserListAdapter(Context context,Intent[] initialIntents,List<ResolveInfo> rList,int launchedFromUid,boolean filterLastUsed,ChooserTarget[] callerChooserTargets){
  super(context,initialIntents,rList,launchedFromUid,filterLastUsed);
  for (  ChooserTarget target : callerChooserTargets) {
    mCallerTargets.add(new ChooserTargetInfo(target));
  }
}","public ChooserListAdapter(Context context,Intent[] initialIntents,List<ResolveInfo> rList,int launchedFromUid,boolean filterLastUsed,ChooserTarget[] callerChooserTargets){
  super(context,initialIntents,rList,launchedFromUid,filterLastUsed);
  if (callerChooserTargets != null) {
    for (    ChooserTarget target : callerChooserTargets) {
      mCallerTargets.add(new ChooserTargetInfo(target));
    }
  }
}",0.9216710182767625
195244,"/** 
 * Stress Wifi Scanning TODO: test the scanning quality for each frequency band
 */
@LargeTest public void testWifiScanning(){
  long scanTimeSum=0, i, averageScanTime=-1;
  int ssidAppearInScanResultsCount=0;
  for (i=1; i <= mScanIterations; i++) {
    logv(""String_Node_Str"" + i);
    averageScanTime=scanTimeSum / i;
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",averageScanTime));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
    List<ScanResult> scanResultLocal=null;
    long start=0;
synchronized (mWifiScanResultLock) {
      start=SystemClock.uptimeMillis();
      assertTrue(""String_Node_Str"",mWifiManager.startScan());
      try {
        mWifiScanResultLock.wait(WAIT_FOR_SCAN_RESULT);
      }
 catch (      InterruptedException e) {
      }
      scanTimeSum+=SystemClock.uptimeMillis() - start;
      scanResultLocal=mLastScanResult;
    }
    if (scanResultLocal == null || scanResultLocal.isEmpty()) {
      fail(""String_Node_Str"");
    }
    logv(""String_Node_Str"" + scanResultLocal.size());
    for (    ScanResult sr : scanResultLocal) {
      logv(String.format(""String_Node_Str"" + sr.toString()));
      if (mSsid.equals(sr.SSID)) {
        ssidAppearInScanResultsCount+=1;
        break;
      }
    }
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",averageScanTime);
  result.putInt(""String_Node_Str"",ssidAppearInScanResultsCount);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mScanIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",scanTimeSum / (i - 1)));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
  }
}","/** 
 * Stress Wifi Scanning TODO: test the scanning quality for each frequency band
 */
@LargeTest public void testWifiScanning(){
  long scanTimeSum=0, i, averageScanTime=-1;
  int ssidAppearInScanResultsCount=0;
  for (i=1; i <= mScanIterations; i++) {
    logv(""String_Node_Str"" + i);
    averageScanTime=scanTimeSum / i;
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",averageScanTime));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
    List<ScanResult> scanResultLocal=null;
    long start=0;
synchronized (mWifiScanResultLock) {
      start=SystemClock.uptimeMillis();
      assertTrue(""String_Node_Str"",mWifiManager.startScan());
      try {
        mWifiScanResultLock.wait(WAIT_FOR_SCAN_RESULT);
      }
 catch (      InterruptedException e) {
      }
      scanTimeSum+=SystemClock.uptimeMillis() - start;
      scanResultLocal=mLastScanResult;
    }
    if (scanResultLocal == null || scanResultLocal.isEmpty()) {
      fail(""String_Node_Str"");
    }
    logv(""String_Node_Str"" + scanResultLocal.size());
    for (    ScanResult sr : scanResultLocal) {
      logv(String.format(""String_Node_Str"" + sr.toString()));
      if (mSsid.equals(sr.SSID)) {
        ssidAppearInScanResultsCount+=1;
        break;
      }
    }
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",averageScanTime);
  result.putInt(""String_Node_Str"",ssidAppearInScanResultsCount);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mScanIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i - 1,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",scanTimeSum / (i - 1)));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i - 1));
  }
}",0.9978609625668448
195245,"@LargeTest public void testWifiReconnectionAfterSleep(){
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE,0);
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SLEEP_POLICY,Settings.Global.WIFI_SLEEP_POLICY_DEFAULT);
  Settings.Global.putLong(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_IDLE_MS,WIFI_IDLE_MS);
  WifiConfiguration config;
  if (mPassword == null) {
    config=WifiConfigurationHelper.createOpenConfig(mSsid);
  }
 else {
    config=WifiConfigurationHelper.createPskConfig(mSsid,mPassword);
  }
  assertTrue(""String_Node_Str"" + mSsid,connectToWifiWithConfiguration(config));
  assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,WIFI_CONNECTION_TIMEOUT));
  assertTrue(""String_Node_Str"",pingTest());
  long i, sum=0, avgReconnectTime=0;
  for (i=1; i <= mReconnectIterations; i++) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
    logv(""String_Node_Str"" + i);
    turnScreenOff();
    long start=SystemClock.uptimeMillis();
    PowerManager pm=(PowerManager)mRunner.getContext().getSystemService(Context.POWER_SERVICE);
    while (pm.isInteractive() && ((SystemClock.uptimeMillis() - start) < SCREEN_OFF_TIMER)) {
      SystemClock.sleep(100);
    }
    assertFalse(""String_Node_Str"",pm.isInteractive());
    SystemClock.sleep(WIFI_IDLE_MS + WIFI_SHUTDOWN_DELAY);
    if (mWifiOnlyFlag) {
      assertTrue(""String_Node_Str"",waitUntilNoActiveNetworkConnection(2 * LONG_TIMEOUT));
    }
 else {
      assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_MOBILE,State.CONNECTED,2 * LONG_TIMEOUT));
    }
    SystemClock.sleep(mWifiSleepTime);
    if (mWifiOnlyFlag) {
      NetworkInfo ni=mCm.getActiveNetworkInfo();
      if (ni != null) {
        Log.e(mLogTag,""String_Node_Str"" + ni.toString());
        fail(""String_Node_Str"");
      }
    }
 else {
      assertEquals(""String_Node_Str"",State.CONNECTED,mCm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState());
      assertTrue(""String_Node_Str"",pingTest());
    }
    turnScreenOn();
    long startTime=SystemClock.uptimeMillis();
    assertTrue(""String_Node_Str"",waitForWifiState(WifiManager.WIFI_STATE_ENABLED,SHORT_TIMEOUT));
    assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,LONG_TIMEOUT));
    long connectionTime=SystemClock.uptimeMillis() - startTime;
    sum+=connectionTime;
    avgReconnectTime=sum / i;
    logv(""String_Node_Str"" + avgReconnectTime);
    assertTrue(""String_Node_Str"",pingTest());
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",avgReconnectTime);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mReconnectIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
  }
}","@LargeTest public void testWifiReconnectionAfterSleep(){
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE,0);
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SLEEP_POLICY,Settings.Global.WIFI_SLEEP_POLICY_DEFAULT);
  Settings.Global.putLong(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_IDLE_MS,WIFI_IDLE_MS);
  WifiConfiguration config;
  if (mPassword == null) {
    config=WifiConfigurationHelper.createOpenConfig(mSsid);
  }
 else {
    config=WifiConfigurationHelper.createPskConfig(mSsid,mPassword);
  }
  assertTrue(""String_Node_Str"" + mSsid,connectToWifiWithConfiguration(config));
  assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,WIFI_CONNECTION_TIMEOUT));
  assertTrue(""String_Node_Str"",pingTest());
  long i, sum=0, avgReconnectTime=0;
  for (i=1; i <= mReconnectIterations; i++) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
    logv(""String_Node_Str"" + i);
    turnScreenOff();
    long start=SystemClock.uptimeMillis();
    PowerManager pm=(PowerManager)mRunner.getContext().getSystemService(Context.POWER_SERVICE);
    while (pm.isInteractive() && ((SystemClock.uptimeMillis() - start) < SCREEN_OFF_TIMER)) {
      SystemClock.sleep(100);
    }
    assertFalse(""String_Node_Str"",pm.isInteractive());
    SystemClock.sleep(WIFI_IDLE_MS + WIFI_SHUTDOWN_DELAY);
    if (mWifiOnlyFlag) {
      assertTrue(""String_Node_Str"",waitUntilNoActiveNetworkConnection(2 * LONG_TIMEOUT));
    }
 else {
      assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_MOBILE,State.CONNECTED,2 * LONG_TIMEOUT));
    }
    SystemClock.sleep(mWifiSleepTime);
    if (mWifiOnlyFlag) {
      NetworkInfo ni=mCm.getActiveNetworkInfo();
      if (ni != null) {
        Log.e(mLogTag,""String_Node_Str"" + ni.toString());
        fail(""String_Node_Str"");
      }
    }
 else {
      assertEquals(""String_Node_Str"",State.CONNECTED,mCm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState());
      assertTrue(""String_Node_Str"",pingTest());
    }
    turnScreenOn();
    long startTime=SystemClock.uptimeMillis();
    assertTrue(""String_Node_Str"",waitForWifiState(WifiManager.WIFI_STATE_ENABLED,SHORT_TIMEOUT));
    assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,LONG_TIMEOUT));
    long connectionTime=SystemClock.uptimeMillis() - startTime;
    sum+=connectionTime;
    avgReconnectTime=sum / i;
    logv(""String_Node_Str"" + avgReconnectTime);
    assertTrue(""String_Node_Str"",pingTest());
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",avgReconnectTime);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mReconnectIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i - 1,mReconnectIterations));
  }
}",0.9993252361673416
195246,"public ChooserListAdapter(Context context,Intent[] initialIntents,List<ResolveInfo> rList,int launchedFromUid,boolean filterLastUsed,ChooserTarget[] callerChooserTargets){
  super(context,initialIntents,rList,launchedFromUid,filterLastUsed);
  for (  ChooserTarget target : callerChooserTargets) {
    mCallerTargets.add(new ChooserTargetInfo(target));
  }
}","public ChooserListAdapter(Context context,Intent[] initialIntents,List<ResolveInfo> rList,int launchedFromUid,boolean filterLastUsed,ChooserTarget[] callerChooserTargets){
  super(context,initialIntents,rList,launchedFromUid,filterLastUsed);
  if (callerChooserTargets != null) {
    for (    ChooserTarget target : callerChooserTargets) {
      mCallerTargets.add(new ChooserTargetInfo(target));
    }
  }
}",0.9216710182767625
195247,"/** 
 * Stress Wifi Scanning TODO: test the scanning quality for each frequency band
 */
@LargeTest public void testWifiScanning(){
  long scanTimeSum=0, i, averageScanTime=-1;
  int ssidAppearInScanResultsCount=0;
  for (i=1; i <= mScanIterations; i++) {
    logv(""String_Node_Str"" + i);
    averageScanTime=scanTimeSum / i;
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",averageScanTime));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
    List<ScanResult> scanResultLocal=null;
    long start=0;
synchronized (mWifiScanResultLock) {
      start=SystemClock.uptimeMillis();
      assertTrue(""String_Node_Str"",mWifiManager.startScan());
      try {
        mWifiScanResultLock.wait(WAIT_FOR_SCAN_RESULT);
      }
 catch (      InterruptedException e) {
      }
      scanTimeSum+=SystemClock.uptimeMillis() - start;
      scanResultLocal=mLastScanResult;
    }
    if (scanResultLocal == null || scanResultLocal.isEmpty()) {
      fail(""String_Node_Str"");
    }
    logv(""String_Node_Str"" + scanResultLocal.size());
    for (    ScanResult sr : scanResultLocal) {
      logv(String.format(""String_Node_Str"" + sr.toString()));
      if (mSsid.equals(sr.SSID)) {
        ssidAppearInScanResultsCount+=1;
        break;
      }
    }
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",averageScanTime);
  result.putInt(""String_Node_Str"",ssidAppearInScanResultsCount);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mScanIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",scanTimeSum / (i - 1)));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
  }
}","/** 
 * Stress Wifi Scanning TODO: test the scanning quality for each frequency band
 */
@LargeTest public void testWifiScanning(){
  long scanTimeSum=0, i, averageScanTime=-1;
  int ssidAppearInScanResultsCount=0;
  for (i=1; i <= mScanIterations; i++) {
    logv(""String_Node_Str"" + i);
    averageScanTime=scanTimeSum / i;
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",averageScanTime));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
    List<ScanResult> scanResultLocal=null;
    long start=0;
synchronized (mWifiScanResultLock) {
      start=SystemClock.uptimeMillis();
      assertTrue(""String_Node_Str"",mWifiManager.startScan());
      try {
        mWifiScanResultLock.wait(WAIT_FOR_SCAN_RESULT);
      }
 catch (      InterruptedException e) {
      }
      scanTimeSum+=SystemClock.uptimeMillis() - start;
      scanResultLocal=mLastScanResult;
    }
    if (scanResultLocal == null || scanResultLocal.isEmpty()) {
      fail(""String_Node_Str"");
    }
    logv(""String_Node_Str"" + scanResultLocal.size());
    for (    ScanResult sr : scanResultLocal) {
      logv(String.format(""String_Node_Str"" + sr.toString()));
      if (mSsid.equals(sr.SSID)) {
        ssidAppearInScanResultsCount+=1;
        break;
      }
    }
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",averageScanTime);
  result.putInt(""String_Node_Str"",ssidAppearInScanResultsCount);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mScanIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i - 1,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",scanTimeSum / (i - 1)));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i - 1));
  }
}",0.9978609625668448
195248,"@LargeTest public void testWifiReconnectionAfterSleep(){
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE,0);
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SLEEP_POLICY,Settings.Global.WIFI_SLEEP_POLICY_DEFAULT);
  Settings.Global.putLong(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_IDLE_MS,WIFI_IDLE_MS);
  WifiConfiguration config;
  if (mPassword == null) {
    config=WifiConfigurationHelper.createOpenConfig(mSsid);
  }
 else {
    config=WifiConfigurationHelper.createPskConfig(mSsid,mPassword);
  }
  assertTrue(""String_Node_Str"" + mSsid,connectToWifiWithConfiguration(config));
  assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,WIFI_CONNECTION_TIMEOUT));
  assertTrue(""String_Node_Str"",pingTest());
  long i, sum=0, avgReconnectTime=0;
  for (i=1; i <= mReconnectIterations; i++) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
    logv(""String_Node_Str"" + i);
    turnScreenOff();
    long start=SystemClock.uptimeMillis();
    PowerManager pm=(PowerManager)mRunner.getContext().getSystemService(Context.POWER_SERVICE);
    while (pm.isInteractive() && ((SystemClock.uptimeMillis() - start) < SCREEN_OFF_TIMER)) {
      SystemClock.sleep(100);
    }
    assertFalse(""String_Node_Str"",pm.isInteractive());
    SystemClock.sleep(WIFI_IDLE_MS + WIFI_SHUTDOWN_DELAY);
    if (mWifiOnlyFlag) {
      assertTrue(""String_Node_Str"",waitUntilNoActiveNetworkConnection(2 * LONG_TIMEOUT));
    }
 else {
      assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_MOBILE,State.CONNECTED,2 * LONG_TIMEOUT));
    }
    SystemClock.sleep(mWifiSleepTime);
    if (mWifiOnlyFlag) {
      NetworkInfo ni=mCm.getActiveNetworkInfo();
      if (ni != null) {
        Log.e(mLogTag,""String_Node_Str"" + ni.toString());
        fail(""String_Node_Str"");
      }
    }
 else {
      assertEquals(""String_Node_Str"",State.CONNECTED,mCm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState());
      assertTrue(""String_Node_Str"",pingTest());
    }
    turnScreenOn();
    long startTime=SystemClock.uptimeMillis();
    assertTrue(""String_Node_Str"",waitForWifiState(WifiManager.WIFI_STATE_ENABLED,SHORT_TIMEOUT));
    assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,LONG_TIMEOUT));
    long connectionTime=SystemClock.uptimeMillis() - startTime;
    sum+=connectionTime;
    avgReconnectTime=sum / i;
    logv(""String_Node_Str"" + avgReconnectTime);
    assertTrue(""String_Node_Str"",pingTest());
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",avgReconnectTime);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mReconnectIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
  }
}","@LargeTest public void testWifiReconnectionAfterSleep(){
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE,0);
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SLEEP_POLICY,Settings.Global.WIFI_SLEEP_POLICY_DEFAULT);
  Settings.Global.putLong(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_IDLE_MS,WIFI_IDLE_MS);
  WifiConfiguration config;
  if (mPassword == null) {
    config=WifiConfigurationHelper.createOpenConfig(mSsid);
  }
 else {
    config=WifiConfigurationHelper.createPskConfig(mSsid,mPassword);
  }
  assertTrue(""String_Node_Str"" + mSsid,connectToWifiWithConfiguration(config));
  assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,WIFI_CONNECTION_TIMEOUT));
  assertTrue(""String_Node_Str"",pingTest());
  long i, sum=0, avgReconnectTime=0;
  for (i=1; i <= mReconnectIterations; i++) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
    logv(""String_Node_Str"" + i);
    turnScreenOff();
    long start=SystemClock.uptimeMillis();
    PowerManager pm=(PowerManager)mRunner.getContext().getSystemService(Context.POWER_SERVICE);
    while (pm.isInteractive() && ((SystemClock.uptimeMillis() - start) < SCREEN_OFF_TIMER)) {
      SystemClock.sleep(100);
    }
    assertFalse(""String_Node_Str"",pm.isInteractive());
    SystemClock.sleep(WIFI_IDLE_MS + WIFI_SHUTDOWN_DELAY);
    if (mWifiOnlyFlag) {
      assertTrue(""String_Node_Str"",waitUntilNoActiveNetworkConnection(2 * LONG_TIMEOUT));
    }
 else {
      assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_MOBILE,State.CONNECTED,2 * LONG_TIMEOUT));
    }
    SystemClock.sleep(mWifiSleepTime);
    if (mWifiOnlyFlag) {
      NetworkInfo ni=mCm.getActiveNetworkInfo();
      if (ni != null) {
        Log.e(mLogTag,""String_Node_Str"" + ni.toString());
        fail(""String_Node_Str"");
      }
    }
 else {
      assertEquals(""String_Node_Str"",State.CONNECTED,mCm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState());
      assertTrue(""String_Node_Str"",pingTest());
    }
    turnScreenOn();
    long startTime=SystemClock.uptimeMillis();
    assertTrue(""String_Node_Str"",waitForWifiState(WifiManager.WIFI_STATE_ENABLED,SHORT_TIMEOUT));
    assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,LONG_TIMEOUT));
    long connectionTime=SystemClock.uptimeMillis() - startTime;
    sum+=connectionTime;
    avgReconnectTime=sum / i;
    logv(""String_Node_Str"" + avgReconnectTime);
    assertTrue(""String_Node_Str"",pingTest());
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",avgReconnectTime);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mReconnectIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i - 1,mReconnectIterations));
  }
}",0.9993252361673416
195249,"public ChooserListAdapter(Context context,Intent[] initialIntents,List<ResolveInfo> rList,int launchedFromUid,boolean filterLastUsed,ChooserTarget[] callerChooserTargets){
  super(context,initialIntents,rList,launchedFromUid,filterLastUsed);
  for (  ChooserTarget target : callerChooserTargets) {
    mCallerTargets.add(new ChooserTargetInfo(target));
  }
}","public ChooserListAdapter(Context context,Intent[] initialIntents,List<ResolveInfo> rList,int launchedFromUid,boolean filterLastUsed,ChooserTarget[] callerChooserTargets){
  super(context,initialIntents,rList,launchedFromUid,filterLastUsed);
  if (callerChooserTargets != null) {
    for (    ChooserTarget target : callerChooserTargets) {
      mCallerTargets.add(new ChooserTargetInfo(target));
    }
  }
}",0.9216710182767625
195250,"/** 
 * Stress Wifi Scanning TODO: test the scanning quality for each frequency band
 */
@LargeTest public void testWifiScanning(){
  long scanTimeSum=0, i, averageScanTime=-1;
  int ssidAppearInScanResultsCount=0;
  for (i=1; i <= mScanIterations; i++) {
    logv(""String_Node_Str"" + i);
    averageScanTime=scanTimeSum / i;
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",averageScanTime));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
    List<ScanResult> scanResultLocal=null;
    long start=0;
synchronized (mWifiScanResultLock) {
      start=SystemClock.uptimeMillis();
      assertTrue(""String_Node_Str"",mWifiManager.startScan());
      try {
        mWifiScanResultLock.wait(WAIT_FOR_SCAN_RESULT);
      }
 catch (      InterruptedException e) {
      }
      scanTimeSum+=SystemClock.uptimeMillis() - start;
      scanResultLocal=mLastScanResult;
    }
    if (scanResultLocal == null || scanResultLocal.isEmpty()) {
      fail(""String_Node_Str"");
    }
    logv(""String_Node_Str"" + scanResultLocal.size());
    for (    ScanResult sr : scanResultLocal) {
      logv(String.format(""String_Node_Str"" + sr.toString()));
      if (mSsid.equals(sr.SSID)) {
        ssidAppearInScanResultsCount+=1;
        break;
      }
    }
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",averageScanTime);
  result.putInt(""String_Node_Str"",ssidAppearInScanResultsCount);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mScanIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",scanTimeSum / (i - 1)));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
  }
}","/** 
 * Stress Wifi Scanning TODO: test the scanning quality for each frequency band
 */
@LargeTest public void testWifiScanning(){
  long scanTimeSum=0, i, averageScanTime=-1;
  int ssidAppearInScanResultsCount=0;
  for (i=1; i <= mScanIterations; i++) {
    logv(""String_Node_Str"" + i);
    averageScanTime=scanTimeSum / i;
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",averageScanTime));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
    List<ScanResult> scanResultLocal=null;
    long start=0;
synchronized (mWifiScanResultLock) {
      start=SystemClock.uptimeMillis();
      assertTrue(""String_Node_Str"",mWifiManager.startScan());
      try {
        mWifiScanResultLock.wait(WAIT_FOR_SCAN_RESULT);
      }
 catch (      InterruptedException e) {
      }
      scanTimeSum+=SystemClock.uptimeMillis() - start;
      scanResultLocal=mLastScanResult;
    }
    if (scanResultLocal == null || scanResultLocal.isEmpty()) {
      fail(""String_Node_Str"");
    }
    logv(""String_Node_Str"" + scanResultLocal.size());
    for (    ScanResult sr : scanResultLocal) {
      logv(String.format(""String_Node_Str"" + sr.toString()));
      if (mSsid.equals(sr.SSID)) {
        ssidAppearInScanResultsCount+=1;
        break;
      }
    }
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",averageScanTime);
  result.putInt(""String_Node_Str"",ssidAppearInScanResultsCount);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mScanIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i - 1,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",scanTimeSum / (i - 1)));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i - 1));
  }
}",0.9978609625668448
195251,"@LargeTest public void testWifiReconnectionAfterSleep(){
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE,0);
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SLEEP_POLICY,Settings.Global.WIFI_SLEEP_POLICY_DEFAULT);
  Settings.Global.putLong(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_IDLE_MS,WIFI_IDLE_MS);
  WifiConfiguration config;
  if (mPassword == null) {
    config=WifiConfigurationHelper.createOpenConfig(mSsid);
  }
 else {
    config=WifiConfigurationHelper.createPskConfig(mSsid,mPassword);
  }
  assertTrue(""String_Node_Str"" + mSsid,connectToWifiWithConfiguration(config));
  assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,WIFI_CONNECTION_TIMEOUT));
  assertTrue(""String_Node_Str"",pingTest());
  long i, sum=0, avgReconnectTime=0;
  for (i=1; i <= mReconnectIterations; i++) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
    logv(""String_Node_Str"" + i);
    turnScreenOff();
    long start=SystemClock.uptimeMillis();
    PowerManager pm=(PowerManager)mRunner.getContext().getSystemService(Context.POWER_SERVICE);
    while (pm.isInteractive() && ((SystemClock.uptimeMillis() - start) < SCREEN_OFF_TIMER)) {
      SystemClock.sleep(100);
    }
    assertFalse(""String_Node_Str"",pm.isInteractive());
    SystemClock.sleep(WIFI_IDLE_MS + WIFI_SHUTDOWN_DELAY);
    if (mWifiOnlyFlag) {
      assertTrue(""String_Node_Str"",waitUntilNoActiveNetworkConnection(2 * LONG_TIMEOUT));
    }
 else {
      assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_MOBILE,State.CONNECTED,2 * LONG_TIMEOUT));
    }
    SystemClock.sleep(mWifiSleepTime);
    if (mWifiOnlyFlag) {
      NetworkInfo ni=mCm.getActiveNetworkInfo();
      if (ni != null) {
        Log.e(mLogTag,""String_Node_Str"" + ni.toString());
        fail(""String_Node_Str"");
      }
    }
 else {
      assertEquals(""String_Node_Str"",State.CONNECTED,mCm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState());
      assertTrue(""String_Node_Str"",pingTest());
    }
    turnScreenOn();
    long startTime=SystemClock.uptimeMillis();
    assertTrue(""String_Node_Str"",waitForWifiState(WifiManager.WIFI_STATE_ENABLED,SHORT_TIMEOUT));
    assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,LONG_TIMEOUT));
    long connectionTime=SystemClock.uptimeMillis() - startTime;
    sum+=connectionTime;
    avgReconnectTime=sum / i;
    logv(""String_Node_Str"" + avgReconnectTime);
    assertTrue(""String_Node_Str"",pingTest());
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",avgReconnectTime);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mReconnectIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
  }
}","@LargeTest public void testWifiReconnectionAfterSleep(){
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE,0);
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SLEEP_POLICY,Settings.Global.WIFI_SLEEP_POLICY_DEFAULT);
  Settings.Global.putLong(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_IDLE_MS,WIFI_IDLE_MS);
  WifiConfiguration config;
  if (mPassword == null) {
    config=WifiConfigurationHelper.createOpenConfig(mSsid);
  }
 else {
    config=WifiConfigurationHelper.createPskConfig(mSsid,mPassword);
  }
  assertTrue(""String_Node_Str"" + mSsid,connectToWifiWithConfiguration(config));
  assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,WIFI_CONNECTION_TIMEOUT));
  assertTrue(""String_Node_Str"",pingTest());
  long i, sum=0, avgReconnectTime=0;
  for (i=1; i <= mReconnectIterations; i++) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
    logv(""String_Node_Str"" + i);
    turnScreenOff();
    long start=SystemClock.uptimeMillis();
    PowerManager pm=(PowerManager)mRunner.getContext().getSystemService(Context.POWER_SERVICE);
    while (pm.isInteractive() && ((SystemClock.uptimeMillis() - start) < SCREEN_OFF_TIMER)) {
      SystemClock.sleep(100);
    }
    assertFalse(""String_Node_Str"",pm.isInteractive());
    SystemClock.sleep(WIFI_IDLE_MS + WIFI_SHUTDOWN_DELAY);
    if (mWifiOnlyFlag) {
      assertTrue(""String_Node_Str"",waitUntilNoActiveNetworkConnection(2 * LONG_TIMEOUT));
    }
 else {
      assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_MOBILE,State.CONNECTED,2 * LONG_TIMEOUT));
    }
    SystemClock.sleep(mWifiSleepTime);
    if (mWifiOnlyFlag) {
      NetworkInfo ni=mCm.getActiveNetworkInfo();
      if (ni != null) {
        Log.e(mLogTag,""String_Node_Str"" + ni.toString());
        fail(""String_Node_Str"");
      }
    }
 else {
      assertEquals(""String_Node_Str"",State.CONNECTED,mCm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState());
      assertTrue(""String_Node_Str"",pingTest());
    }
    turnScreenOn();
    long startTime=SystemClock.uptimeMillis();
    assertTrue(""String_Node_Str"",waitForWifiState(WifiManager.WIFI_STATE_ENABLED,SHORT_TIMEOUT));
    assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,LONG_TIMEOUT));
    long connectionTime=SystemClock.uptimeMillis() - startTime;
    sum+=connectionTime;
    avgReconnectTime=sum / i;
    logv(""String_Node_Str"" + avgReconnectTime);
    assertTrue(""String_Node_Str"",pingTest());
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",avgReconnectTime);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mReconnectIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i - 1,mReconnectIterations));
  }
}",0.9993252361673416
195252,"/** 
 * Stress Wifi Scanning TODO: test the scanning quality for each frequency band
 */
@LargeTest public void testWifiScanning(){
  long scanTimeSum=0, i, averageScanTime=-1;
  int ssidAppearInScanResultsCount=0;
  for (i=1; i <= mScanIterations; i++) {
    logv(""String_Node_Str"" + i);
    averageScanTime=scanTimeSum / i;
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",averageScanTime));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
    List<ScanResult> scanResultLocal=null;
    long start=0;
synchronized (mWifiScanResultLock) {
      start=SystemClock.uptimeMillis();
      assertTrue(""String_Node_Str"",mWifiManager.startScan());
      try {
        mWifiScanResultLock.wait(WAIT_FOR_SCAN_RESULT);
      }
 catch (      InterruptedException e) {
      }
      scanTimeSum+=SystemClock.uptimeMillis() - start;
      scanResultLocal=mLastScanResult;
    }
    if (scanResultLocal == null || scanResultLocal.isEmpty()) {
      fail(""String_Node_Str"");
    }
    logv(""String_Node_Str"" + scanResultLocal.size());
    for (    ScanResult sr : scanResultLocal) {
      logv(String.format(""String_Node_Str"" + sr.toString()));
      if (mSsid.equals(sr.SSID)) {
        ssidAppearInScanResultsCount+=1;
        break;
      }
    }
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",averageScanTime);
  result.putInt(""String_Node_Str"",ssidAppearInScanResultsCount);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mScanIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",scanTimeSum / (i - 1)));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
  }
}","/** 
 * Stress Wifi Scanning TODO: test the scanning quality for each frequency band
 */
@LargeTest public void testWifiScanning(){
  long scanTimeSum=0, i, averageScanTime=-1;
  int ssidAppearInScanResultsCount=0;
  for (i=1; i <= mScanIterations; i++) {
    logv(""String_Node_Str"" + i);
    averageScanTime=scanTimeSum / i;
    writeOutput(String.format(""String_Node_Str"",i,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",averageScanTime));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i));
    List<ScanResult> scanResultLocal=null;
    long start=0;
synchronized (mWifiScanResultLock) {
      start=SystemClock.uptimeMillis();
      assertTrue(""String_Node_Str"",mWifiManager.startScan());
      try {
        mWifiScanResultLock.wait(WAIT_FOR_SCAN_RESULT);
      }
 catch (      InterruptedException e) {
      }
      scanTimeSum+=SystemClock.uptimeMillis() - start;
      scanResultLocal=mLastScanResult;
    }
    if (scanResultLocal == null || scanResultLocal.isEmpty()) {
      fail(""String_Node_Str"");
    }
    logv(""String_Node_Str"" + scanResultLocal.size());
    for (    ScanResult sr : scanResultLocal) {
      logv(String.format(""String_Node_Str"" + sr.toString()));
      if (mSsid.equals(sr.SSID)) {
        ssidAppearInScanResultsCount+=1;
        break;
      }
    }
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",averageScanTime);
  result.putInt(""String_Node_Str"",ssidAppearInScanResultsCount);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mScanIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i - 1,mScanIterations));
    writeOutput(String.format(""String_Node_Str"",scanTimeSum / (i - 1)));
    writeOutput(String.format(""String_Node_Str"",ssidAppearInScanResultsCount,i - 1));
  }
}",0.9978609625668448
195253,"@LargeTest public void testWifiReconnectionAfterSleep(){
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE,0);
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SLEEP_POLICY,Settings.Global.WIFI_SLEEP_POLICY_DEFAULT);
  Settings.Global.putLong(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_IDLE_MS,WIFI_IDLE_MS);
  WifiConfiguration config;
  if (mPassword == null) {
    config=WifiConfigurationHelper.createOpenConfig(mSsid);
  }
 else {
    config=WifiConfigurationHelper.createPskConfig(mSsid,mPassword);
  }
  assertTrue(""String_Node_Str"" + mSsid,connectToWifiWithConfiguration(config));
  assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,WIFI_CONNECTION_TIMEOUT));
  assertTrue(""String_Node_Str"",pingTest());
  long i, sum=0, avgReconnectTime=0;
  for (i=1; i <= mReconnectIterations; i++) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
    logv(""String_Node_Str"" + i);
    turnScreenOff();
    long start=SystemClock.uptimeMillis();
    PowerManager pm=(PowerManager)mRunner.getContext().getSystemService(Context.POWER_SERVICE);
    while (pm.isInteractive() && ((SystemClock.uptimeMillis() - start) < SCREEN_OFF_TIMER)) {
      SystemClock.sleep(100);
    }
    assertFalse(""String_Node_Str"",pm.isInteractive());
    SystemClock.sleep(WIFI_IDLE_MS + WIFI_SHUTDOWN_DELAY);
    if (mWifiOnlyFlag) {
      assertTrue(""String_Node_Str"",waitUntilNoActiveNetworkConnection(2 * LONG_TIMEOUT));
    }
 else {
      assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_MOBILE,State.CONNECTED,2 * LONG_TIMEOUT));
    }
    SystemClock.sleep(mWifiSleepTime);
    if (mWifiOnlyFlag) {
      NetworkInfo ni=mCm.getActiveNetworkInfo();
      if (ni != null) {
        Log.e(mLogTag,""String_Node_Str"" + ni.toString());
        fail(""String_Node_Str"");
      }
    }
 else {
      assertEquals(""String_Node_Str"",State.CONNECTED,mCm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState());
      assertTrue(""String_Node_Str"",pingTest());
    }
    turnScreenOn();
    long startTime=SystemClock.uptimeMillis();
    assertTrue(""String_Node_Str"",waitForWifiState(WifiManager.WIFI_STATE_ENABLED,SHORT_TIMEOUT));
    assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,LONG_TIMEOUT));
    long connectionTime=SystemClock.uptimeMillis() - startTime;
    sum+=connectionTime;
    avgReconnectTime=sum / i;
    logv(""String_Node_Str"" + avgReconnectTime);
    assertTrue(""String_Node_Str"",pingTest());
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",avgReconnectTime);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mReconnectIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
  }
}","@LargeTest public void testWifiReconnectionAfterSleep(){
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE,0);
  Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SLEEP_POLICY,Settings.Global.WIFI_SLEEP_POLICY_DEFAULT);
  Settings.Global.putLong(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_IDLE_MS,WIFI_IDLE_MS);
  WifiConfiguration config;
  if (mPassword == null) {
    config=WifiConfigurationHelper.createOpenConfig(mSsid);
  }
 else {
    config=WifiConfigurationHelper.createPskConfig(mSsid,mPassword);
  }
  assertTrue(""String_Node_Str"" + mSsid,connectToWifiWithConfiguration(config));
  assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,WIFI_CONNECTION_TIMEOUT));
  assertTrue(""String_Node_Str"",pingTest());
  long i, sum=0, avgReconnectTime=0;
  for (i=1; i <= mReconnectIterations; i++) {
    writeOutput(String.format(""String_Node_Str"",i,mReconnectIterations));
    logv(""String_Node_Str"" + i);
    turnScreenOff();
    long start=SystemClock.uptimeMillis();
    PowerManager pm=(PowerManager)mRunner.getContext().getSystemService(Context.POWER_SERVICE);
    while (pm.isInteractive() && ((SystemClock.uptimeMillis() - start) < SCREEN_OFF_TIMER)) {
      SystemClock.sleep(100);
    }
    assertFalse(""String_Node_Str"",pm.isInteractive());
    SystemClock.sleep(WIFI_IDLE_MS + WIFI_SHUTDOWN_DELAY);
    if (mWifiOnlyFlag) {
      assertTrue(""String_Node_Str"",waitUntilNoActiveNetworkConnection(2 * LONG_TIMEOUT));
    }
 else {
      assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_MOBILE,State.CONNECTED,2 * LONG_TIMEOUT));
    }
    SystemClock.sleep(mWifiSleepTime);
    if (mWifiOnlyFlag) {
      NetworkInfo ni=mCm.getActiveNetworkInfo();
      if (ni != null) {
        Log.e(mLogTag,""String_Node_Str"" + ni.toString());
        fail(""String_Node_Str"");
      }
    }
 else {
      assertEquals(""String_Node_Str"",State.CONNECTED,mCm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState());
      assertTrue(""String_Node_Str"",pingTest());
    }
    turnScreenOn();
    long startTime=SystemClock.uptimeMillis();
    assertTrue(""String_Node_Str"",waitForWifiState(WifiManager.WIFI_STATE_ENABLED,SHORT_TIMEOUT));
    assertTrue(""String_Node_Str"",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,LONG_TIMEOUT));
    long connectionTime=SystemClock.uptimeMillis() - startTime;
    sum+=connectionTime;
    avgReconnectTime=sum / i;
    logv(""String_Node_Str"" + avgReconnectTime);
    assertTrue(""String_Node_Str"",pingTest());
  }
  Bundle result=new Bundle();
  result.putLong(""String_Node_Str"",i - 1);
  result.putLong(""String_Node_Str"",avgReconnectTime);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mReconnectIterations + 1) {
    writeOutput(String.format(""String_Node_Str"",i - 1,mReconnectIterations));
  }
}",0.9993252361673416
195254,"@Override public ParcelableConference createFromParcel(Parcel source){
  ClassLoader classLoader=ParcelableConference.class.getClassLoader();
  PhoneAccountHandle phoneAccount=source.readParcelable(classLoader);
  int state=source.readInt();
  int capabilities=source.readInt();
  List<String> connectionIds=new ArrayList<>(2);
  source.readList(connectionIds,classLoader);
  long connectTimeMillis=source.readLong();
  StatusHints statusHints=source.readParcelable(classLoader);
  IVideoProvider videoCallProvider=IVideoProvider.Stub.asInterface(source.readStrongBinder());
  int videoState=source.readInt();
  return new ParcelableConference(phoneAccount,state,capabilities,connectionIds,videoCallProvider,videoState,connectTimeMillis,statusHints);
}","@Override public ParcelableConference createFromParcel(Parcel source){
  ClassLoader classLoader=ParcelableConference.class.getClassLoader();
  PhoneAccountHandle phoneAccount=source.readParcelable(classLoader);
  int state=source.readInt();
  int capabilities=source.readInt();
  List<String> connectionIds=new ArrayList<>(2);
  source.readList(connectionIds,classLoader);
  long connectTimeMillis=source.readLong();
  IVideoProvider videoCallProvider=IVideoProvider.Stub.asInterface(source.readStrongBinder());
  int videoState=source.readInt();
  StatusHints statusHints=source.readParcelable(classLoader);
  return new ParcelableConference(phoneAccount,state,capabilities,connectionIds,videoCallProvider,videoState,connectTimeMillis,statusHints);
}",0.9175531914893617
195255,"public void onServiceDisconnected(int profile){
switch (profile) {
case BluetoothProfile.A2DP:
synchronized (mConnectedDevices) {
synchronized (mA2dpAvrcpLock) {
        for (        Map.Entry<String,DeviceListSpec> entry : mConnectedDevices.entrySet()) {
          DeviceListSpec deviceSpec=entry.getValue();
          if (deviceSpec.mDeviceType == AudioSystem.DEVICE_OUT_BLUETOOTH_A2DP) {
            makeA2dpDeviceUnavailableNow(deviceSpec.mDeviceAddress);
          }
        }
      }
    }
  break;
case BluetoothProfile.A2DP_SINK:
synchronized (mConnectedDevices) {
  for (  Map.Entry<String,DeviceListSpec> entry : mConnectedDevices.entrySet()) {
    DeviceListSpec deviceSpec=entry.getValue();
    if (deviceSpec.mDeviceType == AudioSystem.DEVICE_IN_BLUETOOTH_A2DP) {
      makeA2dpSrcUnavailable(deviceSpec.mDeviceAddress);
    }
  }
}
break;
case BluetoothProfile.HEADSET:
synchronized (mScoClients) {
mBluetoothHeadset=null;
}
break;
default :
break;
}
}","public void onServiceDisconnected(int profile){
  ArraySet<String> toRemove=null;
switch (profile) {
case BluetoothProfile.A2DP:
synchronized (mConnectedDevices) {
synchronized (mA2dpAvrcpLock) {
        for (int i=0; i < mConnectedDevices.size(); i++) {
          DeviceListSpec deviceSpec=mConnectedDevices.valueAt(i);
          if (deviceSpec.mDeviceType == AudioSystem.DEVICE_OUT_BLUETOOTH_A2DP) {
            toRemove=toRemove != null ? toRemove : new ArraySet<String>();
            toRemove.add(deviceSpec.mDeviceAddress);
          }
        }
        if (toRemove != null) {
          for (int i=0; i < toRemove.size(); i++) {
            makeA2dpDeviceUnavailableNow(toRemove.valueAt(i));
          }
        }
      }
    }
  break;
case BluetoothProfile.A2DP_SINK:
synchronized (mConnectedDevices) {
  for (int i=0; i < mConnectedDevices.size(); i++) {
    DeviceListSpec deviceSpec=mConnectedDevices.valueAt(i);
    if (deviceSpec.mDeviceType == AudioSystem.DEVICE_IN_BLUETOOTH_A2DP) {
      toRemove=toRemove != null ? toRemove : new ArraySet<String>();
      toRemove.add(deviceSpec.mDeviceAddress);
    }
  }
  if (toRemove != null) {
    for (int i=0; i < toRemove.size(); i++) {
      makeA2dpSrcUnavailable(toRemove.valueAt(i));
    }
  }
}
break;
case BluetoothProfile.HEADSET:
synchronized (mScoClients) {
mBluetoothHeadset=null;
}
break;
default :
break;
}
}",0.6223358908780904
195256,"private int checkSendBecomingNoisyIntent(int device,int state){
  int delay=0;
  if ((state == 0) && ((device & mBecomingNoisyIntentDevices) != 0)) {
    int devices=0;
    for (    String key : mConnectedDevices.keySet()) {
      int dev=mConnectedDevices.get(key).mDeviceType;
      if (((dev & AudioSystem.DEVICE_BIT_IN) == 0) && ((dev & mBecomingNoisyIntentDevices) != 0)) {
        devices|=dev;
      }
    }
    if (devices == device) {
      sendMsg(mAudioHandler,MSG_BROADCAST_AUDIO_BECOMING_NOISY,SENDMSG_REPLACE,0,0,null,0);
      delay=1000;
    }
  }
  if (mAudioHandler.hasMessages(MSG_SET_A2DP_SRC_CONNECTION_STATE) || mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE) || mAudioHandler.hasMessages(MSG_SET_WIRED_DEVICE_CONNECTION_STATE)) {
synchronized (mLastDeviceConnectMsgTime) {
      long time=SystemClock.uptimeMillis();
      if (mLastDeviceConnectMsgTime > time) {
        delay=(int)(mLastDeviceConnectMsgTime - time) + 30;
      }
    }
  }
  return delay;
}","private int checkSendBecomingNoisyIntent(int device,int state){
  int delay=0;
  if ((state == 0) && ((device & mBecomingNoisyIntentDevices) != 0)) {
    int devices=0;
    for (int i=0; i < mConnectedDevices.size(); i++) {
      int dev=mConnectedDevices.valueAt(i).mDeviceType;
      if (((dev & AudioSystem.DEVICE_BIT_IN) == 0) && ((dev & mBecomingNoisyIntentDevices) != 0)) {
        devices|=dev;
      }
    }
    if (devices == device) {
      sendMsg(mAudioHandler,MSG_BROADCAST_AUDIO_BECOMING_NOISY,SENDMSG_REPLACE,0,0,null,0);
      delay=1000;
    }
  }
  if (mAudioHandler.hasMessages(MSG_SET_A2DP_SRC_CONNECTION_STATE) || mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE) || mAudioHandler.hasMessages(MSG_SET_WIRED_DEVICE_CONNECTION_STATE)) {
synchronized (mLastDeviceConnectMsgTime) {
      long time=SystemClock.uptimeMillis();
      if (mLastDeviceConnectMsgTime > time) {
        delay=(int)(mLastDeviceConnectMsgTime - time) + 30;
      }
    }
  }
  return delay;
}",0.9683576092415872
195257,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case MSG_SET_DEVICE_VOLUME:
    setDeviceVolume((VolumeStreamState)msg.obj,msg.arg1);
  break;
case MSG_SET_ALL_VOLUMES:
setAllVolumes((VolumeStreamState)msg.obj);
break;
case MSG_PERSIST_VOLUME:
persistVolume((VolumeStreamState)msg.obj,msg.arg1);
break;
case MSG_PERSIST_MASTER_VOLUME_MUTE:
if (mUseFixedVolume) {
return;
}
Settings.System.putIntForUser(mContentResolver,Settings.System.VOLUME_MASTER_MUTE,msg.arg1,msg.arg2);
break;
case MSG_PERSIST_RINGER_MODE:
persistRingerMode(getRingerModeInternal());
break;
case MSG_MEDIA_SERVER_DIED:
if (!mSystemReady || (AudioSystem.checkAudioFlinger() != AudioSystem.AUDIO_STATUS_OK)) {
Log.e(TAG,""String_Node_Str"");
sendMsg(mAudioHandler,MSG_MEDIA_SERVER_DIED,SENDMSG_NOOP,0,0,null,500);
break;
}
Log.e(TAG,""String_Node_Str"");
AudioSystem.setParameters(""String_Node_Str"");
readAndSetLowRamDevice();
synchronized (mConnectedDevices) {
Set set=mConnectedDevices.entrySet();
Iterator i=set.iterator();
while (i.hasNext()) {
Map.Entry device=(Map.Entry)i.next();
DeviceListSpec spec=(DeviceListSpec)device.getValue();
AudioSystem.setDeviceConnectionState(spec.mDeviceType,AudioSystem.DEVICE_STATE_AVAILABLE,spec.mDeviceAddress,spec.mDeviceName);
}
}
AudioSystem.setPhoneState(mMode);
AudioSystem.setForceUse(AudioSystem.FOR_COMMUNICATION,mForcedUseForComm);
AudioSystem.setForceUse(AudioSystem.FOR_RECORD,mForcedUseForComm);
AudioSystem.setForceUse(AudioSystem.FOR_SYSTEM,mCameraSoundForced ? AudioSystem.FORCE_SYSTEM_ENFORCED : AudioSystem.FORCE_NONE);
int numStreamTypes=AudioSystem.getNumStreamTypes();
for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
VolumeStreamState streamState=mStreamStates[streamType];
AudioSystem.initStreamVolume(streamType,0,(streamState.mIndexMax + 5) / 10);
streamState.applyAllVolumes();
}
setRingerModeInt(getRingerModeInternal(),false);
if (mMonitorOrientation) {
setOrientationForAudioSystem();
}
if (mMonitorRotation) {
setRotationForAudioSystem();
}
synchronized (mBluetoothA2dpEnabledLock) {
AudioSystem.setForceUse(AudioSystem.FOR_MEDIA,mBluetoothA2dpEnabled ? AudioSystem.FORCE_NONE : AudioSystem.FORCE_NO_BT_A2DP);
}
synchronized (mSettingsLock) {
AudioSystem.setForceUse(AudioSystem.FOR_DOCK,mDockAudioMediaEnabled ? AudioSystem.FORCE_ANALOG_DOCK : AudioSystem.FORCE_NONE);
}
if (mHdmiManager != null) {
synchronized (mHdmiManager) {
if (mHdmiTvClient != null) {
setHdmiSystemAudioSupported(mHdmiSystemAudioSupported);
}
}
}
synchronized (mAudioPolicies) {
for (AudioPolicyProxy policy : mAudioPolicies.values()) {
policy.connectMixes();
}
}
AudioSystem.setParameters(""String_Node_Str"");
break;
case MSG_UNLOAD_SOUND_EFFECTS:
onUnloadSoundEffects();
break;
case MSG_LOAD_SOUND_EFFECTS:
boolean loaded=onLoadSoundEffects();
if (msg.obj != null) {
LoadSoundEffectReply reply=(LoadSoundEffectReply)msg.obj;
synchronized (reply) {
reply.mStatus=loaded ? 0 : -1;
reply.notify();
}
}
break;
case MSG_PLAY_SOUND_EFFECT:
onPlaySoundEffect(msg.arg1,msg.arg2);
break;
case MSG_BTA2DP_DOCK_TIMEOUT:
synchronized (mConnectedDevices) {
makeA2dpDeviceUnavailableNow((String)msg.obj);
}
break;
case MSG_SET_FORCE_USE:
case MSG_SET_FORCE_BT_A2DP_USE:
setForceUse(msg.arg1,msg.arg2);
break;
case MSG_BT_HEADSET_CNCT_FAILED:
resetBluetoothSco();
break;
case MSG_SET_WIRED_DEVICE_CONNECTION_STATE:
{
WiredDeviceConnectionState connectState=(WiredDeviceConnectionState)msg.obj;
onSetWiredDeviceConnectionState(connectState.mType,connectState.mState,connectState.mAddress,connectState.mName,connectState.mCaller);
mAudioEventWakeLock.release();
}
break;
case MSG_SET_A2DP_SRC_CONNECTION_STATE:
onSetA2dpSourceConnectionState((BluetoothDevice)msg.obj,msg.arg1);
mAudioEventWakeLock.release();
break;
case MSG_SET_A2DP_SINK_CONNECTION_STATE:
onSetA2dpSinkConnectionState((BluetoothDevice)msg.obj,msg.arg1);
mAudioEventWakeLock.release();
break;
case MSG_REPORT_NEW_ROUTES:
{
int N=mRoutesObservers.beginBroadcast();
if (N > 0) {
AudioRoutesInfo routes;
synchronized (mCurAudioRoutes) {
routes=new AudioRoutesInfo(mCurAudioRoutes);
}
while (N > 0) {
N--;
IAudioRoutesObserver obs=mRoutesObservers.getBroadcastItem(N);
try {
obs.dispatchAudioRoutesChanged(routes);
}
 catch (RemoteException e) {
}
}
}
mRoutesObservers.finishBroadcast();
observeDevicesForStreams(-1);
break;
}
case MSG_CHECK_MUSIC_ACTIVE:
onCheckMusicActive((String)msg.obj);
break;
case MSG_BROADCAST_AUDIO_BECOMING_NOISY:
onSendBecomingNoisyIntent();
break;
case MSG_CONFIGURE_SAFE_MEDIA_VOLUME_FORCED:
case MSG_CONFIGURE_SAFE_MEDIA_VOLUME:
onConfigureSafeVolume((msg.what == MSG_CONFIGURE_SAFE_MEDIA_VOLUME_FORCED),(String)msg.obj);
break;
case MSG_PERSIST_SAFE_VOLUME_STATE:
onPersistSafeVolumeState(msg.arg1);
break;
case MSG_BROADCAST_BT_CONNECTION_STATE:
onBroadcastScoConnectionState(msg.arg1);
break;
case MSG_SYSTEM_READY:
onSystemReady();
break;
case MSG_PERSIST_MUSIC_ACTIVE_MS:
final int musicActiveMs=msg.arg1;
Settings.Secure.putIntForUser(mContentResolver,Settings.Secure.UNSAFE_VOLUME_MUSIC_ACTIVE_MS,musicActiveMs,UserHandle.USER_CURRENT);
break;
case MSG_PERSIST_MICROPHONE_MUTE:
Settings.System.putIntForUser(mContentResolver,Settings.System.MICROPHONE_MUTE,msg.arg1,msg.arg2);
break;
case MSG_UNMUTE_STREAM:
onUnmuteStream(msg.arg1,msg.arg2);
break;
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case MSG_SET_DEVICE_VOLUME:
    setDeviceVolume((VolumeStreamState)msg.obj,msg.arg1);
  break;
case MSG_SET_ALL_VOLUMES:
setAllVolumes((VolumeStreamState)msg.obj);
break;
case MSG_PERSIST_VOLUME:
persistVolume((VolumeStreamState)msg.obj,msg.arg1);
break;
case MSG_PERSIST_MASTER_VOLUME_MUTE:
if (mUseFixedVolume) {
return;
}
Settings.System.putIntForUser(mContentResolver,Settings.System.VOLUME_MASTER_MUTE,msg.arg1,msg.arg2);
break;
case MSG_PERSIST_RINGER_MODE:
persistRingerMode(getRingerModeInternal());
break;
case MSG_MEDIA_SERVER_DIED:
if (!mSystemReady || (AudioSystem.checkAudioFlinger() != AudioSystem.AUDIO_STATUS_OK)) {
Log.e(TAG,""String_Node_Str"");
sendMsg(mAudioHandler,MSG_MEDIA_SERVER_DIED,SENDMSG_NOOP,0,0,null,500);
break;
}
Log.e(TAG,""String_Node_Str"");
AudioSystem.setParameters(""String_Node_Str"");
readAndSetLowRamDevice();
synchronized (mConnectedDevices) {
for (int i=0; i < mConnectedDevices.size(); i++) {
DeviceListSpec spec=mConnectedDevices.valueAt(i);
AudioSystem.setDeviceConnectionState(spec.mDeviceType,AudioSystem.DEVICE_STATE_AVAILABLE,spec.mDeviceAddress,spec.mDeviceName);
}
}
AudioSystem.setPhoneState(mMode);
AudioSystem.setForceUse(AudioSystem.FOR_COMMUNICATION,mForcedUseForComm);
AudioSystem.setForceUse(AudioSystem.FOR_RECORD,mForcedUseForComm);
AudioSystem.setForceUse(AudioSystem.FOR_SYSTEM,mCameraSoundForced ? AudioSystem.FORCE_SYSTEM_ENFORCED : AudioSystem.FORCE_NONE);
int numStreamTypes=AudioSystem.getNumStreamTypes();
for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
VolumeStreamState streamState=mStreamStates[streamType];
AudioSystem.initStreamVolume(streamType,0,(streamState.mIndexMax + 5) / 10);
streamState.applyAllVolumes();
}
setRingerModeInt(getRingerModeInternal(),false);
if (mMonitorOrientation) {
setOrientationForAudioSystem();
}
if (mMonitorRotation) {
setRotationForAudioSystem();
}
synchronized (mBluetoothA2dpEnabledLock) {
AudioSystem.setForceUse(AudioSystem.FOR_MEDIA,mBluetoothA2dpEnabled ? AudioSystem.FORCE_NONE : AudioSystem.FORCE_NO_BT_A2DP);
}
synchronized (mSettingsLock) {
AudioSystem.setForceUse(AudioSystem.FOR_DOCK,mDockAudioMediaEnabled ? AudioSystem.FORCE_ANALOG_DOCK : AudioSystem.FORCE_NONE);
}
if (mHdmiManager != null) {
synchronized (mHdmiManager) {
if (mHdmiTvClient != null) {
setHdmiSystemAudioSupported(mHdmiSystemAudioSupported);
}
}
}
synchronized (mAudioPolicies) {
for (AudioPolicyProxy policy : mAudioPolicies.values()) {
policy.connectMixes();
}
}
AudioSystem.setParameters(""String_Node_Str"");
break;
case MSG_UNLOAD_SOUND_EFFECTS:
onUnloadSoundEffects();
break;
case MSG_LOAD_SOUND_EFFECTS:
boolean loaded=onLoadSoundEffects();
if (msg.obj != null) {
LoadSoundEffectReply reply=(LoadSoundEffectReply)msg.obj;
synchronized (reply) {
reply.mStatus=loaded ? 0 : -1;
reply.notify();
}
}
break;
case MSG_PLAY_SOUND_EFFECT:
onPlaySoundEffect(msg.arg1,msg.arg2);
break;
case MSG_BTA2DP_DOCK_TIMEOUT:
synchronized (mConnectedDevices) {
makeA2dpDeviceUnavailableNow((String)msg.obj);
}
break;
case MSG_SET_FORCE_USE:
case MSG_SET_FORCE_BT_A2DP_USE:
setForceUse(msg.arg1,msg.arg2);
break;
case MSG_BT_HEADSET_CNCT_FAILED:
resetBluetoothSco();
break;
case MSG_SET_WIRED_DEVICE_CONNECTION_STATE:
{
WiredDeviceConnectionState connectState=(WiredDeviceConnectionState)msg.obj;
onSetWiredDeviceConnectionState(connectState.mType,connectState.mState,connectState.mAddress,connectState.mName,connectState.mCaller);
mAudioEventWakeLock.release();
}
break;
case MSG_SET_A2DP_SRC_CONNECTION_STATE:
onSetA2dpSourceConnectionState((BluetoothDevice)msg.obj,msg.arg1);
mAudioEventWakeLock.release();
break;
case MSG_SET_A2DP_SINK_CONNECTION_STATE:
onSetA2dpSinkConnectionState((BluetoothDevice)msg.obj,msg.arg1);
mAudioEventWakeLock.release();
break;
case MSG_REPORT_NEW_ROUTES:
{
int N=mRoutesObservers.beginBroadcast();
if (N > 0) {
AudioRoutesInfo routes;
synchronized (mCurAudioRoutes) {
routes=new AudioRoutesInfo(mCurAudioRoutes);
}
while (N > 0) {
N--;
IAudioRoutesObserver obs=mRoutesObservers.getBroadcastItem(N);
try {
obs.dispatchAudioRoutesChanged(routes);
}
 catch (RemoteException e) {
}
}
}
mRoutesObservers.finishBroadcast();
observeDevicesForStreams(-1);
break;
}
case MSG_CHECK_MUSIC_ACTIVE:
onCheckMusicActive((String)msg.obj);
break;
case MSG_BROADCAST_AUDIO_BECOMING_NOISY:
onSendBecomingNoisyIntent();
break;
case MSG_CONFIGURE_SAFE_MEDIA_VOLUME_FORCED:
case MSG_CONFIGURE_SAFE_MEDIA_VOLUME:
onConfigureSafeVolume((msg.what == MSG_CONFIGURE_SAFE_MEDIA_VOLUME_FORCED),(String)msg.obj);
break;
case MSG_PERSIST_SAFE_VOLUME_STATE:
onPersistSafeVolumeState(msg.arg1);
break;
case MSG_BROADCAST_BT_CONNECTION_STATE:
onBroadcastScoConnectionState(msg.arg1);
break;
case MSG_SYSTEM_READY:
onSystemReady();
break;
case MSG_PERSIST_MUSIC_ACTIVE_MS:
final int musicActiveMs=msg.arg1;
Settings.Secure.putIntForUser(mContentResolver,Settings.Secure.UNSAFE_VOLUME_MUSIC_ACTIVE_MS,musicActiveMs,UserHandle.USER_CURRENT);
break;
case MSG_PERSIST_MICROPHONE_MUTE:
Settings.System.putIntForUser(mContentResolver,Settings.System.MICROPHONE_MUTE,msg.arg1,msg.arg2);
break;
case MSG_UNMUTE_STREAM:
onUnmuteStream(msg.arg1,msg.arg2);
break;
}
}",0.978780093253402
195258,"public void onServiceDisconnected(int profile){
switch (profile) {
case BluetoothProfile.A2DP:
synchronized (mConnectedDevices) {
synchronized (mA2dpAvrcpLock) {
        for (        Map.Entry<String,DeviceListSpec> entry : mConnectedDevices.entrySet()) {
          DeviceListSpec deviceSpec=entry.getValue();
          if (deviceSpec.mDeviceType == AudioSystem.DEVICE_OUT_BLUETOOTH_A2DP) {
            makeA2dpDeviceUnavailableNow(deviceSpec.mDeviceAddress);
          }
        }
      }
    }
  break;
case BluetoothProfile.A2DP_SINK:
synchronized (mConnectedDevices) {
  for (  Map.Entry<String,DeviceListSpec> entry : mConnectedDevices.entrySet()) {
    DeviceListSpec deviceSpec=entry.getValue();
    if (deviceSpec.mDeviceType == AudioSystem.DEVICE_IN_BLUETOOTH_A2DP) {
      makeA2dpSrcUnavailable(deviceSpec.mDeviceAddress);
    }
  }
}
break;
case BluetoothProfile.HEADSET:
synchronized (mScoClients) {
mBluetoothHeadset=null;
}
break;
default :
break;
}
}","public void onServiceDisconnected(int profile){
  ArraySet<String> toRemove=null;
switch (profile) {
case BluetoothProfile.A2DP:
synchronized (mConnectedDevices) {
synchronized (mA2dpAvrcpLock) {
        for (int i=0; i < mConnectedDevices.size(); i++) {
          DeviceListSpec deviceSpec=mConnectedDevices.valueAt(i);
          if (deviceSpec.mDeviceType == AudioSystem.DEVICE_OUT_BLUETOOTH_A2DP) {
            toRemove=toRemove != null ? toRemove : new ArraySet<String>();
            toRemove.add(deviceSpec.mDeviceAddress);
          }
        }
        if (toRemove != null) {
          for (int i=0; i < toRemove.size(); i++) {
            makeA2dpDeviceUnavailableNow(toRemove.valueAt(i));
          }
        }
      }
    }
  break;
case BluetoothProfile.A2DP_SINK:
synchronized (mConnectedDevices) {
  for (int i=0; i < mConnectedDevices.size(); i++) {
    DeviceListSpec deviceSpec=mConnectedDevices.valueAt(i);
    if (deviceSpec.mDeviceType == AudioSystem.DEVICE_IN_BLUETOOTH_A2DP) {
      toRemove=toRemove != null ? toRemove : new ArraySet<String>();
      toRemove.add(deviceSpec.mDeviceAddress);
    }
  }
  if (toRemove != null) {
    for (int i=0; i < toRemove.size(); i++) {
      makeA2dpSrcUnavailable(toRemove.valueAt(i));
    }
  }
}
break;
case BluetoothProfile.HEADSET:
synchronized (mScoClients) {
mBluetoothHeadset=null;
}
break;
default :
break;
}
}",0.6223358908780904
195259,"private int checkSendBecomingNoisyIntent(int device,int state){
  int delay=0;
  if ((state == 0) && ((device & mBecomingNoisyIntentDevices) != 0)) {
    int devices=0;
    for (    String key : mConnectedDevices.keySet()) {
      int dev=mConnectedDevices.get(key).mDeviceType;
      if (((dev & AudioSystem.DEVICE_BIT_IN) == 0) && ((dev & mBecomingNoisyIntentDevices) != 0)) {
        devices|=dev;
      }
    }
    if (devices == device) {
      sendMsg(mAudioHandler,MSG_BROADCAST_AUDIO_BECOMING_NOISY,SENDMSG_REPLACE,0,0,null,0);
      delay=1000;
    }
  }
  if (mAudioHandler.hasMessages(MSG_SET_A2DP_SRC_CONNECTION_STATE) || mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE) || mAudioHandler.hasMessages(MSG_SET_WIRED_DEVICE_CONNECTION_STATE)) {
synchronized (mLastDeviceConnectMsgTime) {
      long time=SystemClock.uptimeMillis();
      if (mLastDeviceConnectMsgTime > time) {
        delay=(int)(mLastDeviceConnectMsgTime - time) + 30;
      }
    }
  }
  return delay;
}","private int checkSendBecomingNoisyIntent(int device,int state){
  int delay=0;
  if ((state == 0) && ((device & mBecomingNoisyIntentDevices) != 0)) {
    int devices=0;
    for (int i=0; i < mConnectedDevices.size(); i++) {
      int dev=mConnectedDevices.valueAt(i).mDeviceType;
      if (((dev & AudioSystem.DEVICE_BIT_IN) == 0) && ((dev & mBecomingNoisyIntentDevices) != 0)) {
        devices|=dev;
      }
    }
    if (devices == device) {
      sendMsg(mAudioHandler,MSG_BROADCAST_AUDIO_BECOMING_NOISY,SENDMSG_REPLACE,0,0,null,0);
      delay=1000;
    }
  }
  if (mAudioHandler.hasMessages(MSG_SET_A2DP_SRC_CONNECTION_STATE) || mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE) || mAudioHandler.hasMessages(MSG_SET_WIRED_DEVICE_CONNECTION_STATE)) {
synchronized (mLastDeviceConnectMsgTime) {
      long time=SystemClock.uptimeMillis();
      if (mLastDeviceConnectMsgTime > time) {
        delay=(int)(mLastDeviceConnectMsgTime - time) + 30;
      }
    }
  }
  return delay;
}",0.9683576092415872
195260,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case MSG_SET_DEVICE_VOLUME:
    setDeviceVolume((VolumeStreamState)msg.obj,msg.arg1);
  break;
case MSG_SET_ALL_VOLUMES:
setAllVolumes((VolumeStreamState)msg.obj);
break;
case MSG_PERSIST_VOLUME:
persistVolume((VolumeStreamState)msg.obj,msg.arg1);
break;
case MSG_PERSIST_MASTER_VOLUME_MUTE:
if (mUseFixedVolume) {
return;
}
Settings.System.putIntForUser(mContentResolver,Settings.System.VOLUME_MASTER_MUTE,msg.arg1,msg.arg2);
break;
case MSG_PERSIST_RINGER_MODE:
persistRingerMode(getRingerModeInternal());
break;
case MSG_MEDIA_SERVER_DIED:
if (!mSystemReady || (AudioSystem.checkAudioFlinger() != AudioSystem.AUDIO_STATUS_OK)) {
Log.e(TAG,""String_Node_Str"");
sendMsg(mAudioHandler,MSG_MEDIA_SERVER_DIED,SENDMSG_NOOP,0,0,null,500);
break;
}
Log.e(TAG,""String_Node_Str"");
AudioSystem.setParameters(""String_Node_Str"");
readAndSetLowRamDevice();
synchronized (mConnectedDevices) {
Set set=mConnectedDevices.entrySet();
Iterator i=set.iterator();
while (i.hasNext()) {
Map.Entry device=(Map.Entry)i.next();
DeviceListSpec spec=(DeviceListSpec)device.getValue();
AudioSystem.setDeviceConnectionState(spec.mDeviceType,AudioSystem.DEVICE_STATE_AVAILABLE,spec.mDeviceAddress,spec.mDeviceName);
}
}
AudioSystem.setPhoneState(mMode);
AudioSystem.setForceUse(AudioSystem.FOR_COMMUNICATION,mForcedUseForComm);
AudioSystem.setForceUse(AudioSystem.FOR_RECORD,mForcedUseForComm);
AudioSystem.setForceUse(AudioSystem.FOR_SYSTEM,mCameraSoundForced ? AudioSystem.FORCE_SYSTEM_ENFORCED : AudioSystem.FORCE_NONE);
int numStreamTypes=AudioSystem.getNumStreamTypes();
for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
VolumeStreamState streamState=mStreamStates[streamType];
AudioSystem.initStreamVolume(streamType,0,(streamState.mIndexMax + 5) / 10);
streamState.applyAllVolumes();
}
setRingerModeInt(getRingerModeInternal(),false);
if (mMonitorOrientation) {
setOrientationForAudioSystem();
}
if (mMonitorRotation) {
setRotationForAudioSystem();
}
synchronized (mBluetoothA2dpEnabledLock) {
AudioSystem.setForceUse(AudioSystem.FOR_MEDIA,mBluetoothA2dpEnabled ? AudioSystem.FORCE_NONE : AudioSystem.FORCE_NO_BT_A2DP);
}
synchronized (mSettingsLock) {
AudioSystem.setForceUse(AudioSystem.FOR_DOCK,mDockAudioMediaEnabled ? AudioSystem.FORCE_ANALOG_DOCK : AudioSystem.FORCE_NONE);
}
if (mHdmiManager != null) {
synchronized (mHdmiManager) {
if (mHdmiTvClient != null) {
setHdmiSystemAudioSupported(mHdmiSystemAudioSupported);
}
}
}
synchronized (mAudioPolicies) {
for (AudioPolicyProxy policy : mAudioPolicies.values()) {
policy.connectMixes();
}
}
AudioSystem.setParameters(""String_Node_Str"");
break;
case MSG_UNLOAD_SOUND_EFFECTS:
onUnloadSoundEffects();
break;
case MSG_LOAD_SOUND_EFFECTS:
boolean loaded=onLoadSoundEffects();
if (msg.obj != null) {
LoadSoundEffectReply reply=(LoadSoundEffectReply)msg.obj;
synchronized (reply) {
reply.mStatus=loaded ? 0 : -1;
reply.notify();
}
}
break;
case MSG_PLAY_SOUND_EFFECT:
onPlaySoundEffect(msg.arg1,msg.arg2);
break;
case MSG_BTA2DP_DOCK_TIMEOUT:
synchronized (mConnectedDevices) {
makeA2dpDeviceUnavailableNow((String)msg.obj);
}
break;
case MSG_SET_FORCE_USE:
case MSG_SET_FORCE_BT_A2DP_USE:
setForceUse(msg.arg1,msg.arg2);
break;
case MSG_BT_HEADSET_CNCT_FAILED:
resetBluetoothSco();
break;
case MSG_SET_WIRED_DEVICE_CONNECTION_STATE:
{
WiredDeviceConnectionState connectState=(WiredDeviceConnectionState)msg.obj;
onSetWiredDeviceConnectionState(connectState.mType,connectState.mState,connectState.mAddress,connectState.mName,connectState.mCaller);
mAudioEventWakeLock.release();
}
break;
case MSG_SET_A2DP_SRC_CONNECTION_STATE:
onSetA2dpSourceConnectionState((BluetoothDevice)msg.obj,msg.arg1);
mAudioEventWakeLock.release();
break;
case MSG_SET_A2DP_SINK_CONNECTION_STATE:
onSetA2dpSinkConnectionState((BluetoothDevice)msg.obj,msg.arg1);
mAudioEventWakeLock.release();
break;
case MSG_REPORT_NEW_ROUTES:
{
int N=mRoutesObservers.beginBroadcast();
if (N > 0) {
AudioRoutesInfo routes;
synchronized (mCurAudioRoutes) {
routes=new AudioRoutesInfo(mCurAudioRoutes);
}
while (N > 0) {
N--;
IAudioRoutesObserver obs=mRoutesObservers.getBroadcastItem(N);
try {
obs.dispatchAudioRoutesChanged(routes);
}
 catch (RemoteException e) {
}
}
}
mRoutesObservers.finishBroadcast();
observeDevicesForStreams(-1);
break;
}
case MSG_CHECK_MUSIC_ACTIVE:
onCheckMusicActive((String)msg.obj);
break;
case MSG_BROADCAST_AUDIO_BECOMING_NOISY:
onSendBecomingNoisyIntent();
break;
case MSG_CONFIGURE_SAFE_MEDIA_VOLUME_FORCED:
case MSG_CONFIGURE_SAFE_MEDIA_VOLUME:
onConfigureSafeVolume((msg.what == MSG_CONFIGURE_SAFE_MEDIA_VOLUME_FORCED),(String)msg.obj);
break;
case MSG_PERSIST_SAFE_VOLUME_STATE:
onPersistSafeVolumeState(msg.arg1);
break;
case MSG_BROADCAST_BT_CONNECTION_STATE:
onBroadcastScoConnectionState(msg.arg1);
break;
case MSG_SYSTEM_READY:
onSystemReady();
break;
case MSG_PERSIST_MUSIC_ACTIVE_MS:
final int musicActiveMs=msg.arg1;
Settings.Secure.putIntForUser(mContentResolver,Settings.Secure.UNSAFE_VOLUME_MUSIC_ACTIVE_MS,musicActiveMs,UserHandle.USER_CURRENT);
break;
case MSG_PERSIST_MICROPHONE_MUTE:
Settings.System.putIntForUser(mContentResolver,Settings.System.MICROPHONE_MUTE,msg.arg1,msg.arg2);
break;
case MSG_UNMUTE_STREAM:
onUnmuteStream(msg.arg1,msg.arg2);
break;
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case MSG_SET_DEVICE_VOLUME:
    setDeviceVolume((VolumeStreamState)msg.obj,msg.arg1);
  break;
case MSG_SET_ALL_VOLUMES:
setAllVolumes((VolumeStreamState)msg.obj);
break;
case MSG_PERSIST_VOLUME:
persistVolume((VolumeStreamState)msg.obj,msg.arg1);
break;
case MSG_PERSIST_MASTER_VOLUME_MUTE:
if (mUseFixedVolume) {
return;
}
Settings.System.putIntForUser(mContentResolver,Settings.System.VOLUME_MASTER_MUTE,msg.arg1,msg.arg2);
break;
case MSG_PERSIST_RINGER_MODE:
persistRingerMode(getRingerModeInternal());
break;
case MSG_MEDIA_SERVER_DIED:
if (!mSystemReady || (AudioSystem.checkAudioFlinger() != AudioSystem.AUDIO_STATUS_OK)) {
Log.e(TAG,""String_Node_Str"");
sendMsg(mAudioHandler,MSG_MEDIA_SERVER_DIED,SENDMSG_NOOP,0,0,null,500);
break;
}
Log.e(TAG,""String_Node_Str"");
AudioSystem.setParameters(""String_Node_Str"");
readAndSetLowRamDevice();
synchronized (mConnectedDevices) {
for (int i=0; i < mConnectedDevices.size(); i++) {
DeviceListSpec spec=mConnectedDevices.valueAt(i);
AudioSystem.setDeviceConnectionState(spec.mDeviceType,AudioSystem.DEVICE_STATE_AVAILABLE,spec.mDeviceAddress,spec.mDeviceName);
}
}
AudioSystem.setPhoneState(mMode);
AudioSystem.setForceUse(AudioSystem.FOR_COMMUNICATION,mForcedUseForComm);
AudioSystem.setForceUse(AudioSystem.FOR_RECORD,mForcedUseForComm);
AudioSystem.setForceUse(AudioSystem.FOR_SYSTEM,mCameraSoundForced ? AudioSystem.FORCE_SYSTEM_ENFORCED : AudioSystem.FORCE_NONE);
int numStreamTypes=AudioSystem.getNumStreamTypes();
for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
VolumeStreamState streamState=mStreamStates[streamType];
AudioSystem.initStreamVolume(streamType,0,(streamState.mIndexMax + 5) / 10);
streamState.applyAllVolumes();
}
setRingerModeInt(getRingerModeInternal(),false);
if (mMonitorOrientation) {
setOrientationForAudioSystem();
}
if (mMonitorRotation) {
setRotationForAudioSystem();
}
synchronized (mBluetoothA2dpEnabledLock) {
AudioSystem.setForceUse(AudioSystem.FOR_MEDIA,mBluetoothA2dpEnabled ? AudioSystem.FORCE_NONE : AudioSystem.FORCE_NO_BT_A2DP);
}
synchronized (mSettingsLock) {
AudioSystem.setForceUse(AudioSystem.FOR_DOCK,mDockAudioMediaEnabled ? AudioSystem.FORCE_ANALOG_DOCK : AudioSystem.FORCE_NONE);
}
if (mHdmiManager != null) {
synchronized (mHdmiManager) {
if (mHdmiTvClient != null) {
setHdmiSystemAudioSupported(mHdmiSystemAudioSupported);
}
}
}
synchronized (mAudioPolicies) {
for (AudioPolicyProxy policy : mAudioPolicies.values()) {
policy.connectMixes();
}
}
AudioSystem.setParameters(""String_Node_Str"");
break;
case MSG_UNLOAD_SOUND_EFFECTS:
onUnloadSoundEffects();
break;
case MSG_LOAD_SOUND_EFFECTS:
boolean loaded=onLoadSoundEffects();
if (msg.obj != null) {
LoadSoundEffectReply reply=(LoadSoundEffectReply)msg.obj;
synchronized (reply) {
reply.mStatus=loaded ? 0 : -1;
reply.notify();
}
}
break;
case MSG_PLAY_SOUND_EFFECT:
onPlaySoundEffect(msg.arg1,msg.arg2);
break;
case MSG_BTA2DP_DOCK_TIMEOUT:
synchronized (mConnectedDevices) {
makeA2dpDeviceUnavailableNow((String)msg.obj);
}
break;
case MSG_SET_FORCE_USE:
case MSG_SET_FORCE_BT_A2DP_USE:
setForceUse(msg.arg1,msg.arg2);
break;
case MSG_BT_HEADSET_CNCT_FAILED:
resetBluetoothSco();
break;
case MSG_SET_WIRED_DEVICE_CONNECTION_STATE:
{
WiredDeviceConnectionState connectState=(WiredDeviceConnectionState)msg.obj;
onSetWiredDeviceConnectionState(connectState.mType,connectState.mState,connectState.mAddress,connectState.mName,connectState.mCaller);
mAudioEventWakeLock.release();
}
break;
case MSG_SET_A2DP_SRC_CONNECTION_STATE:
onSetA2dpSourceConnectionState((BluetoothDevice)msg.obj,msg.arg1);
mAudioEventWakeLock.release();
break;
case MSG_SET_A2DP_SINK_CONNECTION_STATE:
onSetA2dpSinkConnectionState((BluetoothDevice)msg.obj,msg.arg1);
mAudioEventWakeLock.release();
break;
case MSG_REPORT_NEW_ROUTES:
{
int N=mRoutesObservers.beginBroadcast();
if (N > 0) {
AudioRoutesInfo routes;
synchronized (mCurAudioRoutes) {
routes=new AudioRoutesInfo(mCurAudioRoutes);
}
while (N > 0) {
N--;
IAudioRoutesObserver obs=mRoutesObservers.getBroadcastItem(N);
try {
obs.dispatchAudioRoutesChanged(routes);
}
 catch (RemoteException e) {
}
}
}
mRoutesObservers.finishBroadcast();
observeDevicesForStreams(-1);
break;
}
case MSG_CHECK_MUSIC_ACTIVE:
onCheckMusicActive((String)msg.obj);
break;
case MSG_BROADCAST_AUDIO_BECOMING_NOISY:
onSendBecomingNoisyIntent();
break;
case MSG_CONFIGURE_SAFE_MEDIA_VOLUME_FORCED:
case MSG_CONFIGURE_SAFE_MEDIA_VOLUME:
onConfigureSafeVolume((msg.what == MSG_CONFIGURE_SAFE_MEDIA_VOLUME_FORCED),(String)msg.obj);
break;
case MSG_PERSIST_SAFE_VOLUME_STATE:
onPersistSafeVolumeState(msg.arg1);
break;
case MSG_BROADCAST_BT_CONNECTION_STATE:
onBroadcastScoConnectionState(msg.arg1);
break;
case MSG_SYSTEM_READY:
onSystemReady();
break;
case MSG_PERSIST_MUSIC_ACTIVE_MS:
final int musicActiveMs=msg.arg1;
Settings.Secure.putIntForUser(mContentResolver,Settings.Secure.UNSAFE_VOLUME_MUSIC_ACTIVE_MS,musicActiveMs,UserHandle.USER_CURRENT);
break;
case MSG_PERSIST_MICROPHONE_MUTE:
Settings.System.putIntForUser(mContentResolver,Settings.System.MICROPHONE_MUTE,msg.arg1,msg.arg2);
break;
case MSG_UNMUTE_STREAM:
onUnmuteStream(msg.arg1,msg.arg2);
break;
}
}",0.978780093253402
195261,"void restorePendingWhileIdleAlarmsLocked(){
  final long nowElapsed=SystemClock.elapsedRealtime();
  for (int i=mPendingWhileIdleAlarms.size() - 1; i >= 0 && mPendingIdleUntil != null; i--) {
    Alarm a=mPendingWhileIdleAlarms.remove(i);
    reAddAlarmLocked(a,nowElapsed,false);
  }
  rescheduleKernelAlarmsLocked();
  updateNextAlarmClockLocked();
}","void restorePendingWhileIdleAlarmsLocked(){
  final long nowElapsed=SystemClock.elapsedRealtime();
  for (int i=mPendingWhileIdleAlarms.size() - 1; i >= 0 && mPendingIdleUntil == null; i--) {
    Alarm a=mPendingWhileIdleAlarms.remove(i);
    reAddAlarmLocked(a,nowElapsed,false);
  }
  rescheduleKernelAlarmsLocked();
  updateNextAlarmClockLocked();
  try {
    mTimeTickSender.send();
  }
 catch (  PendingIntent.CanceledException e) {
  }
}",0.8830188679245283
195262,"void restorePendingWhileIdleAlarmsLocked(){
  final long nowElapsed=SystemClock.elapsedRealtime();
  for (int i=mPendingWhileIdleAlarms.size() - 1; i >= 0 && mPendingIdleUntil != null; i--) {
    Alarm a=mPendingWhileIdleAlarms.remove(i);
    reAddAlarmLocked(a,nowElapsed,false);
  }
  rescheduleKernelAlarmsLocked();
  updateNextAlarmClockLocked();
}","void restorePendingWhileIdleAlarmsLocked(){
  final long nowElapsed=SystemClock.elapsedRealtime();
  for (int i=mPendingWhileIdleAlarms.size() - 1; i >= 0 && mPendingIdleUntil == null; i--) {
    Alarm a=mPendingWhileIdleAlarms.remove(i);
    reAddAlarmLocked(a,nowElapsed,false);
  }
  rescheduleKernelAlarmsLocked();
  updateNextAlarmClockLocked();
  try {
    mTimeTickSender.send();
  }
 catch (  PendingIntent.CanceledException e) {
  }
}",0.8830188679245283
195263,"/** 
 * Initializes a new floating toolbar popup.
 * @param parent  A parent view to get the {@link android.view.View#getWindowToken()} tokenfrom.
 */
public FloatingToolbarPopup(View parent){
  mParent=Preconditions.checkNotNull(parent);
  mContentContainer=createContentContainer(parent.getContext());
  mPopupWindow=createPopupWindow(mContentContainer);
  mShowAnimation=createGrowFadeInFromBottom(mContentContainer);
  mDismissAnimation=createShrinkFadeOutFromBottomAnimation(mContentContainer,new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      mPopupWindow.dismiss();
      mContentContainer.removeAllViews();
    }
  }
);
  mHideAnimation=createShrinkFadeOutFromBottomAnimation(mContentContainer,new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      mPopupWindow.dismiss();
    }
  }
);
  mPopupWindow.getContentView().getRootView().getViewTreeObserver().addOnComputeInternalInsetsListener(new ViewTreeObserver.OnComputeInternalInsetsListener(){
    public void onComputeInternalInsets(    ViewTreeObserver.InternalInsetsInfo info){
      info.contentInsets.setEmpty();
      info.visibleInsets.setEmpty();
      info.touchableRegion.set(mTouchableRegion);
      info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    }
  }
);
  mMarginHorizontal=parent.getResources().getDimensionPixelSize(R.dimen.floating_toolbar_horizontal_margin);
  mMarginVertical=parent.getResources().getDimensionPixelSize(R.dimen.floating_toolbar_vertical_margin);
}","/** 
 * Initializes a new floating toolbar popup.
 * @param parent  A parent view to get the {@link android.view.View#getWindowToken()} tokenfrom.
 */
public FloatingToolbarPopup(View parent){
  mParent=Preconditions.checkNotNull(parent);
  mContentContainer=createContentContainer(parent.getContext());
  mPopupWindow=createPopupWindow(mContentContainer);
  mShowAnimation=createGrowFadeInFromBottom(mContentContainer);
  mDismissAnimation=createShrinkFadeOutFromBottomAnimation(mContentContainer,new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      mPopupWindow.dismiss();
      mContentContainer.removeAllViews();
    }
  }
);
  mHideAnimation=createShrinkFadeOutFromBottomAnimation(mContentContainer,new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      mPopupWindow.dismiss();
    }
  }
);
  mMarginHorizontal=parent.getResources().getDimensionPixelSize(R.dimen.floating_toolbar_horizontal_margin);
  mMarginVertical=parent.getResources().getDimensionPixelSize(R.dimen.floating_toolbar_vertical_margin);
}",0.8236167842554771
195264,"/** 
 * Shows this popup at the specified coordinates. The specified coordinates may be adjusted to make sure the popup is entirely on-screen.
 */
public void show(int x,int y){
  if (isShowing()) {
    return;
  }
  mHidden=false;
  mDismissed=false;
  cancelAllAnimations();
  if (mContentContainer.getChildCount() == 0) {
    setMainPanelAsContent();
  }
  preparePopupContent();
  mContentContainer.setAlpha(0);
  mPopupWindow.showAtLocation(mParent,Gravity.NO_GRAVITY,x,y);
  runShowAnimation();
}","/** 
 * Shows this popup at the specified coordinates. The specified coordinates may be adjusted to make sure the popup is entirely on-screen.
 */
public void show(int x,int y){
  if (isShowing()) {
    return;
  }
  mHidden=false;
  mDismissed=false;
  cancelAllAnimations();
  if (mContentContainer.getChildCount() == 0) {
    setMainPanelAsContent();
  }
  preparePopupContent();
  mContentContainer.setAlpha(0);
  mPopupWindow.showAtLocation(mParent,Gravity.NO_GRAVITY,x,y);
  setTouchableSurfaceInsetsComputer();
  runShowAnimation();
}",0.9568552253116012
195265,"/** 
 * Initializes a new floating toolbar popup.
 * @param parent  A parent view to get the {@link android.view.View#getWindowToken()} tokenfrom.
 */
public FloatingToolbarPopup(View parent){
  mParent=Preconditions.checkNotNull(parent);
  mContentContainer=createContentContainer(parent.getContext());
  mPopupWindow=createPopupWindow(mContentContainer);
  mShowAnimation=createGrowFadeInFromBottom(mContentContainer);
  mDismissAnimation=createShrinkFadeOutFromBottomAnimation(mContentContainer,new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      mPopupWindow.dismiss();
      mContentContainer.removeAllViews();
    }
  }
);
  mHideAnimation=createShrinkFadeOutFromBottomAnimation(mContentContainer,new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      mPopupWindow.dismiss();
    }
  }
);
  mPopupWindow.getContentView().getRootView().getViewTreeObserver().addOnComputeInternalInsetsListener(new ViewTreeObserver.OnComputeInternalInsetsListener(){
    public void onComputeInternalInsets(    ViewTreeObserver.InternalInsetsInfo info){
      info.contentInsets.setEmpty();
      info.visibleInsets.setEmpty();
      info.touchableRegion.set(mTouchableRegion);
      info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    }
  }
);
  mMarginHorizontal=parent.getResources().getDimensionPixelSize(R.dimen.floating_toolbar_horizontal_margin);
  mMarginVertical=parent.getResources().getDimensionPixelSize(R.dimen.floating_toolbar_vertical_margin);
}","/** 
 * Initializes a new floating toolbar popup.
 * @param parent  A parent view to get the {@link android.view.View#getWindowToken()} tokenfrom.
 */
public FloatingToolbarPopup(View parent){
  mParent=Preconditions.checkNotNull(parent);
  mContentContainer=createContentContainer(parent.getContext());
  mPopupWindow=createPopupWindow(mContentContainer);
  mShowAnimation=createGrowFadeInFromBottom(mContentContainer);
  mDismissAnimation=createShrinkFadeOutFromBottomAnimation(mContentContainer,new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      mPopupWindow.dismiss();
      mContentContainer.removeAllViews();
    }
  }
);
  mHideAnimation=createShrinkFadeOutFromBottomAnimation(mContentContainer,new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      mPopupWindow.dismiss();
    }
  }
);
  mMarginHorizontal=parent.getResources().getDimensionPixelSize(R.dimen.floating_toolbar_horizontal_margin);
  mMarginVertical=parent.getResources().getDimensionPixelSize(R.dimen.floating_toolbar_vertical_margin);
}",0.8236167842554771
195266,"/** 
 * Shows this popup at the specified coordinates. The specified coordinates may be adjusted to make sure the popup is entirely on-screen.
 */
public void show(int x,int y){
  if (isShowing()) {
    return;
  }
  mHidden=false;
  mDismissed=false;
  cancelAllAnimations();
  if (mContentContainer.getChildCount() == 0) {
    setMainPanelAsContent();
  }
  preparePopupContent();
  mContentContainer.setAlpha(0);
  mPopupWindow.showAtLocation(mParent,Gravity.NO_GRAVITY,x,y);
  runShowAnimation();
}","/** 
 * Shows this popup at the specified coordinates. The specified coordinates may be adjusted to make sure the popup is entirely on-screen.
 */
public void show(int x,int y){
  if (isShowing()) {
    return;
  }
  mHidden=false;
  mDismissed=false;
  cancelAllAnimations();
  if (mContentContainer.getChildCount() == 0) {
    setMainPanelAsContent();
  }
  preparePopupContent();
  mContentContainer.setAlpha(0);
  mPopupWindow.showAtLocation(mParent,Gravity.NO_GRAVITY,x,y);
  setTouchableSurfaceInsetsComputer();
  runShowAnimation();
}",0.9568552253116012
195267,"@Override public int checkRtl(CharSequence cs,int start,int count){
  boolean haveUnlookedFor=false;
  for (int i=start, e=start + count; i < e; ++i) {
switch (isRtlText(Character.getDirectionality(cs.charAt(i)))) {
case STATE_TRUE:
      if (mLookForRtl) {
        return STATE_TRUE;
      }
    haveUnlookedFor=true;
  break;
case STATE_FALSE:
if (!mLookForRtl) {
  return STATE_FALSE;
}
haveUnlookedFor=true;
break;
default :
break;
}
}
if (haveUnlookedFor) {
return mLookForRtl ? STATE_FALSE : STATE_TRUE;
}
return STATE_UNKNOWN;
}","@Override public int checkRtl(CharSequence cs,int start,int count){
  boolean haveUnlookedFor=false;
  int openIsolateCount=0;
  for (int cp, i=start, end=start + count; i < end; i+=Character.charCount(cp)) {
    cp=Character.codePointAt(cs,i);
    if (0x2066 <= cp && cp <= 0x2068) {
      openIsolateCount+=1;
    }
 else     if (cp == 0x2069) {
      if (openIsolateCount > 0)       openIsolateCount-=1;
    }
 else     if (openIsolateCount == 0) {
switch (isRtlCodePoint(cp)) {
case STATE_TRUE:
        if (mLookForRtl) {
          return STATE_TRUE;
        }
      haveUnlookedFor=true;
    break;
case STATE_FALSE:
  if (!mLookForRtl) {
    return STATE_FALSE;
  }
haveUnlookedFor=true;
break;
default :
break;
}
}
}
if (haveUnlookedFor) {
return mLookForRtl ? STATE_FALSE : STATE_TRUE;
}
return STATE_UNKNOWN;
}",0.6927621861152142
195268,"@Override public int getIntrinsicHeight(){
  if (isUserLocked()) {
    return getActualHeight();
  }
  boolean inExpansionState=isExpanded();
  int maxContentHeight;
  if (mIsHeadsUp) {
    if (inExpansionState) {
      maxContentHeight=Math.max(mMaxExpandHeight,mHeadsUpHeight);
    }
 else {
      maxContentHeight=Math.max(mRowMinHeight,mHeadsUpHeight);
    }
  }
 else   if ((!inExpansionState && !mChildrenExpanded) || mShowingPublicForIntrinsicHeight) {
    maxContentHeight=mRowMinHeight;
  }
 else   if (mChildrenExpanded) {
    maxContentHeight=mChildrenContainer.getIntrinsicHeight();
  }
 else {
    maxContentHeight=getMaxExpandHeight();
  }
  return maxContentHeight + getBottomDecorHeight();
}","@Override public int getIntrinsicHeight(){
  if (isUserLocked()) {
    return getActualHeight();
  }
  boolean inExpansionState=isExpanded();
  int maxContentHeight;
  if (mSensitive && mHideSensitiveForIntrinsicHeight) {
    return mRowMinHeight;
  }
 else   if (mIsHeadsUp) {
    if (inExpansionState) {
      maxContentHeight=Math.max(mMaxExpandHeight,mHeadsUpHeight);
    }
 else {
      maxContentHeight=Math.max(mRowMinHeight,mHeadsUpHeight);
    }
  }
 else   if ((!inExpansionState && !mChildrenExpanded)) {
    maxContentHeight=mRowMinHeight;
  }
 else   if (mChildrenExpanded) {
    maxContentHeight=mChildrenContainer.getIntrinsicHeight();
  }
 else {
    maxContentHeight=getMaxExpandHeight();
  }
  return maxContentHeight + getBottomDecorHeight();
}",0.9129251700680272
195269,"public void setHideSensitiveForIntrinsicHeight(boolean hideSensitive){
  mShowingPublicForIntrinsicHeight=mSensitive && hideSensitive;
}","public void setHideSensitiveForIntrinsicHeight(boolean hideSensitive){
  mHideSensitiveForIntrinsicHeight=hideSensitive;
}",0.8682170542635659
195270,"@Override public int getIntrinsicHeight(){
  if (isUserLocked()) {
    return getActualHeight();
  }
  boolean inExpansionState=isExpanded();
  int maxContentHeight;
  if (mIsHeadsUp) {
    if (inExpansionState) {
      maxContentHeight=Math.max(mMaxExpandHeight,mHeadsUpHeight);
    }
 else {
      maxContentHeight=Math.max(mRowMinHeight,mHeadsUpHeight);
    }
  }
 else   if ((!inExpansionState && !mChildrenExpanded) || mShowingPublicForIntrinsicHeight) {
    maxContentHeight=mRowMinHeight;
  }
 else   if (mChildrenExpanded) {
    maxContentHeight=mChildrenContainer.getIntrinsicHeight();
  }
 else {
    maxContentHeight=getMaxExpandHeight();
  }
  return maxContentHeight + getBottomDecorHeight();
}","@Override public int getIntrinsicHeight(){
  if (isUserLocked()) {
    return getActualHeight();
  }
  boolean inExpansionState=isExpanded();
  int maxContentHeight;
  if (mSensitive && mHideSensitiveForIntrinsicHeight) {
    return mRowMinHeight;
  }
 else   if (mIsHeadsUp) {
    if (inExpansionState) {
      maxContentHeight=Math.max(mMaxExpandHeight,mHeadsUpHeight);
    }
 else {
      maxContentHeight=Math.max(mRowMinHeight,mHeadsUpHeight);
    }
  }
 else   if ((!inExpansionState && !mChildrenExpanded)) {
    maxContentHeight=mRowMinHeight;
  }
 else   if (mChildrenExpanded) {
    maxContentHeight=mChildrenContainer.getIntrinsicHeight();
  }
 else {
    maxContentHeight=getMaxExpandHeight();
  }
  return maxContentHeight + getBottomDecorHeight();
}",0.9129251700680272
195271,"public void setHideSensitiveForIntrinsicHeight(boolean hideSensitive){
  mShowingPublicForIntrinsicHeight=mSensitive && hideSensitive;
}","public void setHideSensitiveForIntrinsicHeight(boolean hideSensitive){
  mHideSensitiveForIntrinsicHeight=hideSensitive;
}",0.8682170542635659
195272,"/** 
 * Handles SET_OCCLUDED message sent by setOccluded()
 */
private void handleSetOccluded(boolean isOccluded){
synchronized (KeyguardViewMediator.this) {
    if (mOccluded != isOccluded) {
      mOccluded=isOccluded;
      mStatusBarKeyguardViewManager.setOccluded(isOccluded);
      updateActivityLockScreenState();
      adjustStatusBarLocked();
    }
  }
}","/** 
 * Handles SET_OCCLUDED message sent by setOccluded()
 */
private void handleSetOccluded(boolean isOccluded){
synchronized (KeyguardViewMediator.this) {
    if (mHiding && isOccluded) {
      startKeyguardExitAnimation(0,0);
    }
    if (mOccluded != isOccluded) {
      mOccluded=isOccluded;
      mStatusBarKeyguardViewManager.setOccluded(isOccluded);
      updateActivityLockScreenState();
      adjustStatusBarLocked();
    }
  }
}",0.9029850746268656
195273,"@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(mShowListenerWhenConnect));
    mShowListenerWhenConnect=null;
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(mShowListenerWhenConnect));
    mShowListenerWhenConnect=null;
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
  if (mKeyguardState.occluded) {
    mKeyguardService.setOccluded(mKeyguardState.occluded);
  }
}",0.9142857142857144
195274,"/** 
 * Handles SET_OCCLUDED message sent by setOccluded()
 */
private void handleSetOccluded(boolean isOccluded){
synchronized (KeyguardViewMediator.this) {
    if (mOccluded != isOccluded) {
      mOccluded=isOccluded;
      mStatusBarKeyguardViewManager.setOccluded(isOccluded);
      updateActivityLockScreenState();
      adjustStatusBarLocked();
    }
  }
}","/** 
 * Handles SET_OCCLUDED message sent by setOccluded()
 */
private void handleSetOccluded(boolean isOccluded){
synchronized (KeyguardViewMediator.this) {
    if (mHiding && isOccluded) {
      startKeyguardExitAnimation(0,0);
    }
    if (mOccluded != isOccluded) {
      mOccluded=isOccluded;
      mStatusBarKeyguardViewManager.setOccluded(isOccluded);
      updateActivityLockScreenState();
      adjustStatusBarLocked();
    }
  }
}",0.9029850746268656
195275,"@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(mShowListenerWhenConnect));
    mShowListenerWhenConnect=null;
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(mShowListenerWhenConnect));
    mShowListenerWhenConnect=null;
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
  if (mKeyguardState.occluded) {
    mKeyguardService.setOccluded(mKeyguardState.occluded);
  }
}",0.9142857142857144
195276,"@Override public void finish(IBinder token){
synchronized (this) {
    if (mImpl == null) {
      Slog.w(TAG,""String_Node_Str"");
      return;
    }
    final int callingPid=Binder.getCallingPid();
    final int callingUid=Binder.getCallingUid();
    final long caller=Binder.clearCallingIdentity();
    try {
      mImpl.finishLocked(callingPid,callingUid,token);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}","@Override public void finish(IBinder token){
synchronized (this) {
    if (mImpl == null) {
      Slog.w(TAG,""String_Node_Str"");
      return;
    }
    final long caller=Binder.clearCallingIdentity();
    try {
      mImpl.finishLocked(token);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}",0.8126649076517151
195277,"@Override public boolean showSessionFromSession(IBinder token,Bundle sessionArgs,int flags){
synchronized (this) {
    if (mImpl == null) {
      Slog.w(TAG,""String_Node_Str"");
      return false;
    }
    final int callingPid=Binder.getCallingPid();
    final int callingUid=Binder.getCallingUid();
    final long caller=Binder.clearCallingIdentity();
    try {
      return mImpl.showSessionLocked(callingPid,callingUid,sessionArgs,flags,null);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}","@Override public boolean showSessionFromSession(IBinder token,Bundle sessionArgs,int flags){
synchronized (this) {
    if (mImpl == null) {
      Slog.w(TAG,""String_Node_Str"");
      return false;
    }
    final long caller=Binder.clearCallingIdentity();
    try {
      return mImpl.showSessionLocked(sessionArgs,flags,null);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}",0.8354978354978355
195278,"@Override public void showSessionForActiveService(IVoiceInteractionSessionShowCallback showCallback){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    if (mImpl == null) {
      Slog.w(TAG,""String_Node_Str"" + ""String_Node_Str"");
      return;
    }
    final int callingPid=Binder.getCallingPid();
    final int callingUid=Binder.getCallingUid();
    final long caller=Binder.clearCallingIdentity();
    try {
      mImpl.showSessionLocked(callingPid,callingUid,new Bundle(),VoiceInteractionService.START_SOURCE_ASSIST_GESTURE | VoiceInteractionService.START_WITH_ASSIST | VoiceInteractionService.START_WITH_SCREENSHOT,showCallback);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}","@Override public void showSessionForActiveService(IVoiceInteractionSessionShowCallback showCallback){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    if (mImpl == null) {
      Slog.w(TAG,""String_Node_Str"" + ""String_Node_Str"");
      return;
    }
    final long caller=Binder.clearCallingIdentity();
    try {
      mImpl.showSessionLocked(new Bundle(),VoiceInteractionService.START_SOURCE_ASSIST_GESTURE | VoiceInteractionService.START_WITH_ASSIST | VoiceInteractionService.START_WITH_SCREENSHOT,showCallback);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}",0.9024045261669024
195279,"@Override public void showSession(IVoiceInteractionService service,Bundle args,int flags){
synchronized (this) {
    if (mImpl == null || mImpl.mService == null || service.asBinder() != mImpl.mService.asBinder()) {
      throw new SecurityException(""String_Node_Str"");
    }
    final int callingPid=Binder.getCallingPid();
    final int callingUid=Binder.getCallingUid();
    final long caller=Binder.clearCallingIdentity();
    try {
      mImpl.showSessionLocked(callingPid,callingUid,args,flags,null);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}","@Override public void showSession(IVoiceInteractionService service,Bundle args,int flags){
synchronized (this) {
    if (mImpl == null || mImpl.mService == null || service.asBinder() != mImpl.mService.asBinder()) {
      throw new SecurityException(""String_Node_Str"");
    }
    final long caller=Binder.clearCallingIdentity();
    try {
      mImpl.showSessionLocked(args,flags,null);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}",0.8384615384615385
195280,"public void finishLocked(int callingPid,int callingUid,IBinder token){
  if (mActiveSession == null || token != mActiveSession.mToken) {
    Slog.w(TAG,""String_Node_Str"");
    return;
  }
  mActiveSession.cancel();
  mActiveSession=null;
}","public void finishLocked(IBinder token){
  if (mActiveSession == null || token != mActiveSession.mToken) {
    Slog.w(TAG,""String_Node_Str"");
    return;
  }
  mActiveSession.cancel();
  mActiveSession=null;
}",0.9330357142857144
195281,"public boolean showSessionLocked(int callingPid,int callingUid,Bundle args,int flags,IVoiceInteractionSessionShowCallback showCallback){
  if (mActiveSession == null) {
    mActiveSession=new VoiceInteractionSessionConnection(mLock,mSessionComponentName,mUser,mContext,this,callingPid,callingUid);
  }
  return mActiveSession.showLocked(args,flags,showCallback);
}","public boolean showSessionLocked(Bundle args,int flags,IVoiceInteractionSessionShowCallback showCallback){
  if (mActiveSession == null) {
    mActiveSession=new VoiceInteractionSessionConnection(mLock,mSessionComponentName,mUser,mContext,this,mInfo.getServiceInfo().applicationInfo.uid);
  }
  return mActiveSession.showLocked(args,flags,showCallback);
}",0.6981919332406119
195282,"@Override public void sessionConnectionGone(VoiceInteractionSessionConnection connection){
synchronized (mLock) {
    finishLocked(connection.mCallingPid,connection.mCallingUid,connection.mToken);
  }
}","@Override public void sessionConnectionGone(VoiceInteractionSessionConnection connection){
synchronized (mLock) {
    finishLocked(connection.mToken);
  }
}",0.8715083798882681
195283,"public VoiceInteractionSessionConnection(Object lock,ComponentName component,int user,Context context,Callback callback,int callingPid,int callingUid){
  mLock=lock;
  mSessionComponentName=component;
  mUser=user;
  mContext=context;
  mCallback=callback;
  mCallingPid=callingPid;
  mCallingUid=callingUid;
  mAm=ActivityManagerNative.getDefault();
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  mAppOps=context.getSystemService(AppOpsManager.class);
  IBinder permOwner=null;
  try {
    permOwner=mAm.newUriPermissionOwner(""String_Node_Str"" + component.flattenToShortString());
  }
 catch (  RemoteException e) {
    Slog.w(""String_Node_Str"",""String_Node_Str"",e);
  }
  mPermissionOwner=permOwner;
  mBindIntent=new Intent(VoiceInteractionService.SERVICE_INTERFACE);
  mBindIntent.setComponent(mSessionComponentName);
  mBound=mContext.bindServiceAsUser(mBindIntent,this,Context.BIND_AUTO_CREATE | Context.BIND_WAIVE_PRIORITY | Context.BIND_ALLOW_OOM_MANAGEMENT,new UserHandle(mUser));
  if (mBound) {
    try {
      mIWindowManager.addWindowToken(mToken,WindowManager.LayoutParams.TYPE_VOICE_INTERACTION);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
 else {
    Slog.w(TAG,""String_Node_Str"" + mSessionComponentName);
  }
}","public VoiceInteractionSessionConnection(Object lock,ComponentName component,int user,Context context,Callback callback,int callingUid){
  mLock=lock;
  mSessionComponentName=component;
  mUser=user;
  mContext=context;
  mCallback=callback;
  mCallingUid=callingUid;
  mAm=ActivityManagerNative.getDefault();
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  mAppOps=context.getSystemService(AppOpsManager.class);
  IBinder permOwner=null;
  try {
    permOwner=mAm.newUriPermissionOwner(""String_Node_Str"" + component.flattenToShortString());
  }
 catch (  RemoteException e) {
    Slog.w(""String_Node_Str"",""String_Node_Str"",e);
  }
  mPermissionOwner=permOwner;
  mBindIntent=new Intent(VoiceInteractionService.SERVICE_INTERFACE);
  mBindIntent.setComponent(mSessionComponentName);
  mBound=mContext.bindServiceAsUser(mBindIntent,this,Context.BIND_AUTO_CREATE | Context.BIND_WAIVE_PRIORITY | Context.BIND_ALLOW_OOM_MANAGEMENT,new UserHandle(mUser));
  if (mBound) {
    try {
      mIWindowManager.addWindowToken(mToken,WindowManager.LayoutParams.TYPE_VOICE_INTERACTION);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
 else {
    Slog.w(TAG,""String_Node_Str"" + mSessionComponentName);
  }
}",0.984333205961024
195284,"@Override public void finish(IBinder token){
synchronized (this) {
    if (mImpl == null) {
      Slog.w(TAG,""String_Node_Str"");
      return;
    }
    final int callingPid=Binder.getCallingPid();
    final int callingUid=Binder.getCallingUid();
    final long caller=Binder.clearCallingIdentity();
    try {
      mImpl.finishLocked(callingPid,callingUid,token);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}","@Override public void finish(IBinder token){
synchronized (this) {
    if (mImpl == null) {
      Slog.w(TAG,""String_Node_Str"");
      return;
    }
    final long caller=Binder.clearCallingIdentity();
    try {
      mImpl.finishLocked(token);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}",0.8126649076517151
195285,"@Override public boolean showSessionFromSession(IBinder token,Bundle sessionArgs,int flags){
synchronized (this) {
    if (mImpl == null) {
      Slog.w(TAG,""String_Node_Str"");
      return false;
    }
    final int callingPid=Binder.getCallingPid();
    final int callingUid=Binder.getCallingUid();
    final long caller=Binder.clearCallingIdentity();
    try {
      return mImpl.showSessionLocked(callingPid,callingUid,sessionArgs,flags,null);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}","@Override public boolean showSessionFromSession(IBinder token,Bundle sessionArgs,int flags){
synchronized (this) {
    if (mImpl == null) {
      Slog.w(TAG,""String_Node_Str"");
      return false;
    }
    final long caller=Binder.clearCallingIdentity();
    try {
      return mImpl.showSessionLocked(sessionArgs,flags,null);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}",0.8354978354978355
195286,"@Override public void showSessionForActiveService(IVoiceInteractionSessionShowCallback showCallback){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    if (mImpl == null) {
      Slog.w(TAG,""String_Node_Str"" + ""String_Node_Str"");
      return;
    }
    final int callingPid=Binder.getCallingPid();
    final int callingUid=Binder.getCallingUid();
    final long caller=Binder.clearCallingIdentity();
    try {
      mImpl.showSessionLocked(callingPid,callingUid,new Bundle(),VoiceInteractionService.START_SOURCE_ASSIST_GESTURE | VoiceInteractionService.START_WITH_ASSIST | VoiceInteractionService.START_WITH_SCREENSHOT,showCallback);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}","@Override public void showSessionForActiveService(IVoiceInteractionSessionShowCallback showCallback){
  enforceCallingPermission(Manifest.permission.ACCESS_VOICE_INTERACTION_SERVICE);
synchronized (this) {
    if (mImpl == null) {
      Slog.w(TAG,""String_Node_Str"" + ""String_Node_Str"");
      return;
    }
    final long caller=Binder.clearCallingIdentity();
    try {
      mImpl.showSessionLocked(new Bundle(),VoiceInteractionService.START_SOURCE_ASSIST_GESTURE | VoiceInteractionService.START_WITH_ASSIST | VoiceInteractionService.START_WITH_SCREENSHOT,showCallback);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}",0.9024045261669024
195287,"@Override public void showSession(IVoiceInteractionService service,Bundle args,int flags){
synchronized (this) {
    if (mImpl == null || mImpl.mService == null || service.asBinder() != mImpl.mService.asBinder()) {
      throw new SecurityException(""String_Node_Str"");
    }
    final int callingPid=Binder.getCallingPid();
    final int callingUid=Binder.getCallingUid();
    final long caller=Binder.clearCallingIdentity();
    try {
      mImpl.showSessionLocked(callingPid,callingUid,args,flags,null);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}","@Override public void showSession(IVoiceInteractionService service,Bundle args,int flags){
synchronized (this) {
    if (mImpl == null || mImpl.mService == null || service.asBinder() != mImpl.mService.asBinder()) {
      throw new SecurityException(""String_Node_Str"");
    }
    final long caller=Binder.clearCallingIdentity();
    try {
      mImpl.showSessionLocked(args,flags,null);
    }
  finally {
      Binder.restoreCallingIdentity(caller);
    }
  }
}",0.8384615384615385
195288,"public void finishLocked(int callingPid,int callingUid,IBinder token){
  if (mActiveSession == null || token != mActiveSession.mToken) {
    Slog.w(TAG,""String_Node_Str"");
    return;
  }
  mActiveSession.cancel();
  mActiveSession=null;
}","public void finishLocked(IBinder token){
  if (mActiveSession == null || token != mActiveSession.mToken) {
    Slog.w(TAG,""String_Node_Str"");
    return;
  }
  mActiveSession.cancel();
  mActiveSession=null;
}",0.9330357142857144
195289,"public boolean showSessionLocked(int callingPid,int callingUid,Bundle args,int flags,IVoiceInteractionSessionShowCallback showCallback){
  if (mActiveSession == null) {
    mActiveSession=new VoiceInteractionSessionConnection(mLock,mSessionComponentName,mUser,mContext,this,callingPid,callingUid);
  }
  return mActiveSession.showLocked(args,flags,showCallback);
}","public boolean showSessionLocked(Bundle args,int flags,IVoiceInteractionSessionShowCallback showCallback){
  if (mActiveSession == null) {
    mActiveSession=new VoiceInteractionSessionConnection(mLock,mSessionComponentName,mUser,mContext,this,mInfo.getServiceInfo().applicationInfo.uid);
  }
  return mActiveSession.showLocked(args,flags,showCallback);
}",0.6981919332406119
195290,"@Override public void sessionConnectionGone(VoiceInteractionSessionConnection connection){
synchronized (mLock) {
    finishLocked(connection.mCallingPid,connection.mCallingUid,connection.mToken);
  }
}","@Override public void sessionConnectionGone(VoiceInteractionSessionConnection connection){
synchronized (mLock) {
    finishLocked(connection.mToken);
  }
}",0.8715083798882681
195291,"public VoiceInteractionSessionConnection(Object lock,ComponentName component,int user,Context context,Callback callback,int callingPid,int callingUid){
  mLock=lock;
  mSessionComponentName=component;
  mUser=user;
  mContext=context;
  mCallback=callback;
  mCallingPid=callingPid;
  mCallingUid=callingUid;
  mAm=ActivityManagerNative.getDefault();
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  mAppOps=context.getSystemService(AppOpsManager.class);
  IBinder permOwner=null;
  try {
    permOwner=mAm.newUriPermissionOwner(""String_Node_Str"" + component.flattenToShortString());
  }
 catch (  RemoteException e) {
    Slog.w(""String_Node_Str"",""String_Node_Str"",e);
  }
  mPermissionOwner=permOwner;
  mBindIntent=new Intent(VoiceInteractionService.SERVICE_INTERFACE);
  mBindIntent.setComponent(mSessionComponentName);
  mBound=mContext.bindServiceAsUser(mBindIntent,this,Context.BIND_AUTO_CREATE | Context.BIND_WAIVE_PRIORITY | Context.BIND_ALLOW_OOM_MANAGEMENT,new UserHandle(mUser));
  if (mBound) {
    try {
      mIWindowManager.addWindowToken(mToken,WindowManager.LayoutParams.TYPE_VOICE_INTERACTION);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
 else {
    Slog.w(TAG,""String_Node_Str"" + mSessionComponentName);
  }
}","public VoiceInteractionSessionConnection(Object lock,ComponentName component,int user,Context context,Callback callback,int callingUid){
  mLock=lock;
  mSessionComponentName=component;
  mUser=user;
  mContext=context;
  mCallback=callback;
  mCallingUid=callingUid;
  mAm=ActivityManagerNative.getDefault();
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  mAppOps=context.getSystemService(AppOpsManager.class);
  IBinder permOwner=null;
  try {
    permOwner=mAm.newUriPermissionOwner(""String_Node_Str"" + component.flattenToShortString());
  }
 catch (  RemoteException e) {
    Slog.w(""String_Node_Str"",""String_Node_Str"",e);
  }
  mPermissionOwner=permOwner;
  mBindIntent=new Intent(VoiceInteractionService.SERVICE_INTERFACE);
  mBindIntent.setComponent(mSessionComponentName);
  mBound=mContext.bindServiceAsUser(mBindIntent,this,Context.BIND_AUTO_CREATE | Context.BIND_WAIVE_PRIORITY | Context.BIND_ALLOW_OOM_MANAGEMENT,new UserHandle(mUser));
  if (mBound) {
    try {
      mIWindowManager.addWindowToken(mToken,WindowManager.LayoutParams.TYPE_VOICE_INTERACTION);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
 else {
    Slog.w(TAG,""String_Node_Str"" + mSessionComponentName);
  }
}",0.984333205961024
195292,"/** 
 * Helper method for adding launch-search to most applications. Opens the search window using default settings.
 * @return true if search window opened
 */
private boolean launchDefaultSearch(KeyEvent event){
  boolean result;
  final Callback cb=getCallback();
  if (cb == null || isDestroyed()) {
    result=false;
  }
 else {
    sendCloseSystemWindows(""String_Node_Str"");
    int deviceId=event.getDeviceId();
    SearchEvent searchEvent=null;
    if (deviceId != 0) {
      searchEvent=new SearchEvent(InputDevice.getDevice(deviceId));
    }
    result=cb.onSearchRequested(searchEvent);
  }
  if (!result && (getContext().getResources().getConfiguration().uiMode & Configuration.UI_MODE_TYPE_MASK) == Configuration.UI_MODE_TYPE_TELEVISION) {
    return ((SearchManager)getContext().getSystemService(Context.SEARCH_SERVICE)).launchAssistAction(null,UserHandle.myUserId());
  }
  return result;
}","/** 
 * Helper method for adding launch-search to most applications. Opens the search window using default settings.
 * @return true if search window opened
 */
private boolean launchDefaultSearch(KeyEvent event){
  boolean result;
  final Callback cb=getCallback();
  if (cb == null || isDestroyed()) {
    result=false;
  }
 else {
    sendCloseSystemWindows(""String_Node_Str"");
    int deviceId=event.getDeviceId();
    SearchEvent searchEvent=null;
    if (deviceId != 0) {
      searchEvent=new SearchEvent(InputDevice.getDevice(deviceId));
    }
    try {
      result=cb.onSearchRequested(searchEvent);
    }
 catch (    AbstractMethodError e) {
      Log.e(TAG,""String_Node_Str"" + cb.getClass().getName() + ""String_Node_Str""+ ""String_Node_Str"",e);
      result=cb.onSearchRequested();
    }
  }
  if (!result && (getContext().getResources().getConfiguration().uiMode & Configuration.UI_MODE_TYPE_MASK) == Configuration.UI_MODE_TYPE_TELEVISION) {
    return ((SearchManager)getContext().getSystemService(Context.SEARCH_SERVICE)).launchAssistAction(null,UserHandle.myUserId());
  }
  return result;
}",0.9000497265042268
195293,"@Override public int checkRtl(CharSequence cs,int start,int count){
  boolean haveUnlookedFor=false;
  for (int i=start, e=start + count; i < e; ++i) {
switch (isRtlText(Character.getDirectionality(cs.charAt(i)))) {
case STATE_TRUE:
      if (mLookForRtl) {
        return STATE_TRUE;
      }
    haveUnlookedFor=true;
  break;
case STATE_FALSE:
if (!mLookForRtl) {
  return STATE_FALSE;
}
haveUnlookedFor=true;
break;
default :
break;
}
}
if (haveUnlookedFor) {
return mLookForRtl ? STATE_FALSE : STATE_TRUE;
}
return STATE_UNKNOWN;
}","@Override public int checkRtl(CharSequence cs,int start,int count){
  boolean haveUnlookedFor=false;
  int openIsolateCount=0;
  for (int cp, i=start, end=start + count; i < end; i+=Character.charCount(cp)) {
    cp=Character.codePointAt(cs,i);
    if (0x2066 <= cp && cp <= 0x2068) {
      openIsolateCount+=1;
    }
 else     if (cp == 0x2069) {
      if (openIsolateCount > 0)       openIsolateCount-=1;
    }
 else     if (openIsolateCount == 0) {
switch (isRtlCodePoint(cp)) {
case STATE_TRUE:
        if (mLookForRtl) {
          return STATE_TRUE;
        }
      haveUnlookedFor=true;
    break;
case STATE_FALSE:
  if (!mLookForRtl) {
    return STATE_FALSE;
  }
haveUnlookedFor=true;
break;
default :
break;
}
}
}
if (haveUnlookedFor) {
return mLookForRtl ? STATE_FALSE : STATE_TRUE;
}
return STATE_UNKNOWN;
}",0.6927621861152142
195294,"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (!isEnabled()) {
    return false;
  }
  trackVelocity(ev);
  final int action=ev.getAction();
  if (DEBUG_SCALE)   Log.d(TAG,""String_Node_Str"" + MotionEvent.actionToString(action) + ""String_Node_Str""+ mExpanding+ (0 != (mExpansionStyle & BLINDS) ? ""String_Node_Str"" : ""String_Node_Str"")+ (0 != (mExpansionStyle & PULL) ? ""String_Node_Str"" : ""String_Node_Str"")+ (0 != (mExpansionStyle & STRETCH) ? ""String_Node_Str"" : ""String_Node_Str""));
  mSGD.onTouchEvent(ev);
  final int x=(int)mSGD.getFocusX();
  final int y=(int)mSGD.getFocusY();
  mInitialTouchFocusY=y;
  mInitialTouchSpan=mSGD.getCurrentSpan();
  mLastFocusY=mInitialTouchFocusY;
  mLastSpanY=mInitialTouchSpan;
  if (DEBUG_SCALE)   Log.d(TAG,""String_Node_Str"" + mInitialTouchSpan);
  if (mExpanding) {
    mLastMotionY=ev.getRawY();
    maybeRecycleVelocityTracker(ev);
    return true;
  }
 else {
    if ((action == MotionEvent.ACTION_MOVE) && 0 != (mExpansionStyle & BLINDS)) {
      return true;
    }
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
{
        final float xspan=mSGD.getCurrentSpanX();
        if (xspan > mPullGestureMinXSpan && xspan > mSGD.getCurrentSpanY() && !mExpanding) {
          if (DEBUG_SCALE)           Log.v(TAG,""String_Node_Str"" + xspan + ""String_Node_Str"");
          startExpanding(mResizedView,PULL);
          mWatchingForPull=false;
        }
        if (mWatchingForPull) {
          final float yDiff=ev.getRawY() - mInitialTouchY;
          if (yDiff > mTouchSlop) {
            if (DEBUG)             Log.v(TAG,""String_Node_Str"" + yDiff + ""String_Node_Str"");
            mWatchingForPull=false;
            if (mResizedView != null && !isFullyExpanded(mResizedView)) {
              if (startExpanding(mResizedView,BLINDS)) {
                mLastMotionY=ev.getRawY();
                mInitialTouchY=ev.getRawY();
                mHasPopped=false;
              }
            }
          }
        }
        break;
      }
case MotionEvent.ACTION_DOWN:
    mWatchingForPull=mScrollAdapter != null && isInside(mScrollAdapter.getHostView(),x,y) && mScrollAdapter.isScrolledToTop();
  mResizedView=findView(x,y);
mInitialTouchY=ev.getY();
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
finishExpanding(false,getCurrentVelocity());
clearView();
break;
}
mLastMotionY=ev.getRawY();
maybeRecycleVelocityTracker(ev);
return mExpanding;
}
}","@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (!isEnabled()) {
    return false;
  }
  trackVelocity(ev);
  final int action=ev.getAction();
  if (DEBUG_SCALE)   Log.d(TAG,""String_Node_Str"" + MotionEvent.actionToString(action) + ""String_Node_Str""+ mExpanding+ (0 != (mExpansionStyle & BLINDS) ? ""String_Node_Str"" : ""String_Node_Str"")+ (0 != (mExpansionStyle & PULL) ? ""String_Node_Str"" : ""String_Node_Str"")+ (0 != (mExpansionStyle & STRETCH) ? ""String_Node_Str"" : ""String_Node_Str""));
  mSGD.onTouchEvent(ev);
  final int x=(int)mSGD.getFocusX();
  final int y=(int)mSGD.getFocusY();
  mInitialTouchFocusY=y;
  mInitialTouchSpan=mSGD.getCurrentSpan();
  mLastFocusY=mInitialTouchFocusY;
  mLastSpanY=mInitialTouchSpan;
  if (DEBUG_SCALE)   Log.d(TAG,""String_Node_Str"" + mInitialTouchSpan);
  if (mExpanding) {
    mLastMotionY=ev.getRawY();
    maybeRecycleVelocityTracker(ev);
    return true;
  }
 else {
    if ((action == MotionEvent.ACTION_MOVE) && 0 != (mExpansionStyle & BLINDS)) {
      return true;
    }
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
{
        final float xspan=mSGD.getCurrentSpanX();
        if (xspan > mPullGestureMinXSpan && xspan > mSGD.getCurrentSpanY() && !mExpanding) {
          if (DEBUG_SCALE)           Log.v(TAG,""String_Node_Str"" + xspan + ""String_Node_Str"");
          startExpanding(mResizedView,PULL);
          mWatchingForPull=false;
        }
        if (mWatchingForPull) {
          final float yDiff=ev.getRawY() - mInitialTouchY;
          if (yDiff > mTouchSlop) {
            if (DEBUG)             Log.v(TAG,""String_Node_Str"" + yDiff + ""String_Node_Str"");
            mWatchingForPull=false;
            if (mResizedView != null && !isFullyExpanded(mResizedView)) {
              if (startExpanding(mResizedView,BLINDS)) {
                mLastMotionY=ev.getRawY();
                mInitialTouchY=ev.getRawY();
                mHasPopped=false;
              }
            }
          }
        }
        break;
      }
case MotionEvent.ACTION_DOWN:
    mWatchingForPull=mScrollAdapter != null && isInside(mScrollAdapter.getHostView(),x,y) && mScrollAdapter.isScrolledToTop();
  mResizedView=findView(x,y);
if (mResizedView != null && (isFullyExpanded(mResizedView) || !mCallback.canChildBeExpanded(mResizedView))) {
  mResizedView=null;
  mWatchingForPull=false;
}
mInitialTouchY=ev.getY();
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
finishExpanding(false,getCurrentVelocity());
clearView();
break;
}
mLastMotionY=ev.getRawY();
maybeRecycleVelocityTracker(ev);
return mExpanding;
}
}",0.9691082183796388
195295,"public void setTrackingHeadsUp(boolean tracking){
  if (tracking) {
    mNotificationStackScroller.setTrackingHeadsUp(true);
  }
}","public void setTrackingHeadsUp(boolean tracking){
  if (tracking) {
    mNotificationStackScroller.setTrackingHeadsUp(true);
    mExpandingFromHeadsUp=true;
  }
}",0.8904109589041096
195296,"private void updateNotificationTranslucency(){
  float alpha=(getNotificationsTopY() + mNotificationStackScroller.getItemHeight()) / (mQsMinExpansionHeight + mNotificationStackScroller.getBottomStackPeekSize() - mNotificationStackScroller.getCollapseSecondCardPadding());
  alpha=Math.max(0,Math.min(alpha,1));
  alpha=(float)Math.pow(alpha,0.75);
  if (alpha != 1f && mNotificationStackScroller.getLayerType() != LAYER_TYPE_HARDWARE) {
    mNotificationStackScroller.setLayerType(LAYER_TYPE_HARDWARE,null);
  }
 else   if (alpha == 1f && mNotificationStackScroller.getLayerType() == LAYER_TYPE_HARDWARE) {
    mNotificationStackScroller.setLayerType(LAYER_TYPE_NONE,null);
  }
  mNotificationStackScroller.setAlpha(alpha);
}","private void updateNotificationTranslucency(){
  float alpha;
  if (mExpandingFromHeadsUp || mHeadsUpManager.hasPinnedHeadsUp()) {
    alpha=1f;
  }
 else {
    alpha=(getNotificationsTopY() + mNotificationStackScroller.getItemHeight()) / (mQsMinExpansionHeight + mNotificationStackScroller.getBottomStackPeekSize() - mNotificationStackScroller.getCollapseSecondCardPadding());
    alpha=Math.max(0,Math.min(alpha,1));
    alpha=(float)Math.pow(alpha,0.75);
    if (alpha != 1f && mNotificationStackScroller.getLayerType() != LAYER_TYPE_HARDWARE) {
      mNotificationStackScroller.setLayerType(LAYER_TYPE_HARDWARE,null);
    }
 else     if (alpha == 1f && mNotificationStackScroller.getLayerType() == LAYER_TYPE_HARDWARE) {
      mNotificationStackScroller.setLayerType(LAYER_TYPE_NONE,null);
    }
  }
  mNotificationStackScroller.setAlpha(alpha);
}",0.9200507614213198
195297,"private float getHeaderTranslation(){
  if (mStatusBar.getBarState() == StatusBarState.KEYGUARD) {
    return 0;
  }
  if (mNotificationStackScroller.getNotGoneChildCount() == 0) {
    if (mExpandedHeight / HEADER_RUBBERBAND_FACTOR >= mQsMinExpansionHeight) {
      return 0;
    }
 else {
      return mExpandedHeight / HEADER_RUBBERBAND_FACTOR - mQsMinExpansionHeight;
    }
  }
  float paddingOffset=mNotificationStackScroller.getPaddingOffset();
  float translation=paddingOffset / HEADER_RUBBERBAND_FACTOR;
  if (mHeadsUpManager.hasPinnedHeadsUp() || mExpansionIsFromHeadsUp) {
    translation=mNotificationStackScroller.getTopPadding() + mNotificationStackScroller.getPaddingOffset() - mNotificationTopPadding - mQsMinExpansionHeight;
  }
  return Math.min(0,translation);
}","private float getHeaderTranslation(){
  if (mStatusBar.getBarState() == StatusBarState.KEYGUARD) {
    return 0;
  }
  if (mNotificationStackScroller.getNotGoneChildCount() == 0) {
    if (mExpandedHeight / HEADER_RUBBERBAND_FACTOR >= mQsMinExpansionHeight) {
      return 0;
    }
 else {
      return mExpandedHeight / HEADER_RUBBERBAND_FACTOR - mQsMinExpansionHeight;
    }
  }
  float stackTranslation=mNotificationStackScroller.getStackTranslation();
  float translation=stackTranslation / HEADER_RUBBERBAND_FACTOR;
  if (mHeadsUpManager.hasPinnedHeadsUp() || mExpansionIsFromHeadsUp) {
    translation=mNotificationStackScroller.getTopPadding() + stackTranslation - mNotificationTopPadding - mQsMinExpansionHeight;
  }
  return Math.min(0,translation);
}",0.9090909090909092
195298,"@Override public void OnPinnedHeadsUpExistChanged(final boolean exist,boolean changeImmediatly){
  if (exist != mPinnedHeadsUpExist) {
    mPinnedHeadsUpExist=exist;
    if (!exist) {
      mNotificationStackScroller.performOnAnimationFinished(mHeadsUpExistenceChangedRunnable);
    }
 else {
      mHeadsUpExistenceChangedRunnable.run();
    }
  }
}","@Override public void OnPinnedHeadsUpExistChanged(final boolean exist,boolean changeImmediatly){
  if (exist != mPinnedHeadsUpExist) {
    mPinnedHeadsUpExist=exist;
    if (exist) {
      mHeadsUpExistenceChangedRunnable.run();
      updateNotificationTranslucency();
    }
 else {
      mNotificationStackScroller.performOnAnimationFinished(mHeadsUpExistenceChangedRunnable);
    }
  }
}",0.7658998646820027
195299,"@Override protected void onExpandingFinished(){
  super.onExpandingFinished();
  mNotificationStackScroller.onExpansionStopped();
  mHeadsUpManager.onExpandingFinished();
  mIsExpanding=false;
  mScrollYOverride=-1;
  if (mExpandedHeight == 0f) {
    setListening(false);
  }
 else {
    setListening(true);
  }
  mQsExpandImmediate=false;
  mTwoFingerQsExpandPossible=false;
  mExpansionIsFromHeadsUp=false;
  mNotificationStackScroller.setTrackingHeadsUp(mHeadsUpTouchHelper.isTrackingHeadsUp());
}","@Override protected void onExpandingFinished(){
  super.onExpandingFinished();
  mNotificationStackScroller.onExpansionStopped();
  mHeadsUpManager.onExpandingFinished();
  mIsExpanding=false;
  mScrollYOverride=-1;
  if (mExpandedHeight == 0f) {
    setListening(false);
  }
 else {
    setListening(true);
  }
  mQsExpandImmediate=false;
  mTwoFingerQsExpandPossible=false;
  mExpansionIsFromHeadsUp=false;
  mNotificationStackScroller.setTrackingHeadsUp(mHeadsUpTouchHelper.isTrackingHeadsUp());
  mExpandingFromHeadsUp=mHeadsUpTouchHelper.isTrackingHeadsUp();
}",0.9389671361502347
195300,"/** 
 * Update the height of the stack to a new height.
 * @param height the new height of the stack
 */
public void setStackHeight(float height){
  mLastSetStackHeight=height;
  setIsExpanded(height > 0.0f);
  int newStackHeight=(int)height;
  int minStackHeight=getMinStackHeight();
  int stackHeight;
  float paddingOffset;
  boolean trackingHeadsUp=mTrackingHeadsUp;
  int normalExpandPositionStart=trackingHeadsUp ? mHeadsUpManager.getTopHeadsUpHeight() : minStackHeight;
  if (newStackHeight - mTopPadding - mTopPaddingOverflow >= normalExpandPositionStart || getNotGoneChildCount() == 0) {
    paddingOffset=mTopPaddingOverflow;
    stackHeight=newStackHeight;
  }
 else {
    int translationY=(newStackHeight - minStackHeight);
    float partiallyThere=(newStackHeight - mTopPadding - mTopPaddingOverflow) / minStackHeight;
    partiallyThere=Math.max(0,partiallyThere);
    if (!trackingHeadsUp) {
      translationY+=(1 - partiallyThere) * (mBottomStackPeekSize + mCollapseSecondCardPadding);
    }
 else {
      translationY=(int)(height - mHeadsUpManager.getTopHeadsUpHeight());
    }
    paddingOffset=translationY - mTopPadding;
    stackHeight=(int)(height - (translationY - mTopPadding));
  }
  if (stackHeight != mCurrentStackHeight) {
    mCurrentStackHeight=stackHeight;
    updateAlgorithmHeightAndPadding();
    requestChildrenUpdate();
  }
  setPaddingOffset(paddingOffset);
}","/** 
 * Update the height of the stack to a new height.
 * @param height the new height of the stack
 */
public void setStackHeight(float height){
  mLastSetStackHeight=height;
  setIsExpanded(height > 0.0f);
  int newStackHeight=(int)height;
  int minStackHeight=getMinStackHeight();
  int stackHeight;
  float paddingOffset;
  boolean trackingHeadsUp=mTrackingHeadsUp;
  int normalExpandPositionStart=trackingHeadsUp ? mHeadsUpManager.getTopHeadsUpHeight() : minStackHeight;
  if (newStackHeight - mTopPadding - mTopPaddingOverflow >= normalExpandPositionStart || getNotGoneChildCount() == 0) {
    paddingOffset=mTopPaddingOverflow;
    stackHeight=newStackHeight;
  }
 else {
    int translationY=(newStackHeight - minStackHeight);
    float partiallyThere=(newStackHeight - mTopPadding - mTopPaddingOverflow) / minStackHeight;
    partiallyThere=Math.max(0,partiallyThere);
    if (!trackingHeadsUp) {
      translationY+=(1 - partiallyThere) * (mBottomStackPeekSize + mCollapseSecondCardPadding);
    }
 else {
      translationY=(int)(height - mHeadsUpManager.getTopHeadsUpHeight());
    }
    paddingOffset=translationY - mTopPadding;
    stackHeight=(int)(height - (translationY - mTopPadding));
  }
  if (stackHeight != mCurrentStackHeight) {
    mCurrentStackHeight=stackHeight;
    updateAlgorithmHeightAndPadding();
    requestChildrenUpdate();
  }
  setStackTranslation(paddingOffset);
}",0.9882100750267953
195301,"/** 
 * @return the y position of the first notification
 */
public float getNotificationsTopY(){
  return mTopPadding + getTranslationY();
}","/** 
 * @return the y position of the first notification
 */
public float getNotificationsTopY(){
  return mTopPadding + getStackTranslation();
}",0.9790209790209792
195302,"public void setHeadsUpManager(HeadsUpManager headsUpManager){
  mHeadsUpManager=headsUpManager;
  mAmbientState.setHeadsUpManager(headsUpManager);
}","public void setHeadsUpManager(HeadsUpManager headsUpManager){
  mHeadsUpManager=headsUpManager;
  mAmbientState.setHeadsUpManager(headsUpManager);
  mStackScrollAlgorithm.setHeadsUpManager(headsUpManager);
}",0.8338028169014085
195303,"public float getBottomMostNotificationBottom(){
  final int count=getChildCount();
  float max=0;
  for (int childIdx=0; childIdx < count; childIdx++) {
    ExpandableView child=(ExpandableView)getChildAt(childIdx);
    if (child.getVisibility() == GONE) {
      continue;
    }
    float bottom=child.getTranslationY() + child.getActualHeight();
    if (bottom > max) {
      max=bottom;
    }
  }
  return max + getTranslationY();
}","public float getBottomMostNotificationBottom(){
  final int count=getChildCount();
  float max=0;
  for (int childIdx=0; childIdx < count; childIdx++) {
    ExpandableView child=(ExpandableView)getChildAt(childIdx);
    if (child.getVisibility() == GONE) {
      continue;
    }
    float bottom=child.getTranslationY() + child.getActualHeight();
    if (bottom > max) {
      max=bottom;
    }
  }
  return max + getStackTranslation();
}",0.993119266055046
195304,"private void updateFirstChildHeightWhileExpanding(ViewGroup hostView){
  mFirstChildWhileExpanding=(ExpandableView)findFirstVisibleChild(hostView);
  if (mFirstChildWhileExpanding != null) {
    if (mExpandedOnStart) {
      mFirstChildMaxHeight=StackStateAnimator.getFinalActualHeight(mFirstChildWhileExpanding);
    }
 else {
      updateFirstChildMaxSizeToMaxHeight();
    }
  }
 else {
    mFirstChildMaxHeight=0;
  }
}","private void updateFirstChildHeightWhileExpanding(ViewGroup hostView){
  mFirstChildWhileExpanding=(ExpandableView)findFirstVisibleChild(hostView);
  if (mFirstChildWhileExpanding != null) {
    if (mExpandedOnStart) {
      mFirstChildMaxHeight=StackStateAnimator.getFinalActualHeight(mFirstChildWhileExpanding);
      if (mFirstChildWhileExpanding instanceof ExpandableNotificationRow) {
        ExpandableNotificationRow row=(ExpandableNotificationRow)mFirstChildWhileExpanding;
        if (row.isHeadsUp()) {
          mFirstChildMaxHeight+=mCollapsedSize - row.getHeadsUpHeight();
        }
      }
    }
 else {
      updateFirstChildMaxSizeToMaxHeight();
    }
  }
 else {
    mFirstChildMaxHeight=0;
  }
}",0.7447183098591549
195305,"private int getMaxAllowedChildHeight(View child,AmbientState ambientState){
  if (child instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (ambientState != null && ambientState.getTopHeadsUpEntry() == child) {
      int extraSize=row.getIntrinsicHeight() - row.getHeadsUpHeight();
      return mCollapsedSize + extraSize;
    }
    return row.getIntrinsicHeight();
  }
 else   if (child instanceof ExpandableView) {
    ExpandableView expandableView=(ExpandableView)child;
    return expandableView.getActualHeight();
  }
  return child == null ? mCollapsedSize : child.getHeight();
}","private int getMaxAllowedChildHeight(View child,AmbientState ambientState){
  if (child instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (ambientState == null && row.isHeadsUp() || ambientState != null && ambientState.getTopHeadsUpEntry() == child) {
      int extraSize=row.getIntrinsicHeight() - row.getHeadsUpHeight();
      return mCollapsedSize + extraSize;
    }
    return row.getIntrinsicHeight();
  }
 else   if (child instanceof ExpandableView) {
    ExpandableView expandableView=(ExpandableView)child;
    return expandableView.getActualHeight();
  }
  return child == null ? mCollapsedSize : child.getHeight();
}",0.9663928304705004
195306,"private View findFirstVisibleChild(ViewGroup container){
  int childCount=container.getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=container.getChildAt(i);
    if (child.getVisibility() != View.GONE) {
      return child;
    }
  }
  return null;
}","private View findFirstVisibleChild(ViewGroup container){
  if (mHeadsUpManager != null && mHeadsUpManager.getTopEntry() != null) {
    return mHeadsUpManager.getTopEntry().entry.row;
  }
  int childCount=container.getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=container.getChildAt(i);
    if (child.getVisibility() != View.GONE) {
      return child;
    }
  }
  return null;
}",0.8071216617210683
195307,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (!mActualHeightInitialized && mActualHeight == 0) {
    int initialHeight=getInitialHeight();
    if (initialHeight != 0) {
      setContentHeight(initialHeight);
    }
  }
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (!mActualHeightInitialized && mActualHeight == 0) {
    int initialHeight=getInitialHeight();
    if (initialHeight != 0) {
      setContentHeight(initialHeight);
    }
  }
  updateClipping();
}",0.9695121951219512
195308,"private void updateMaxHeights(){
  int intrinsicBefore=getIntrinsicHeight();
  View expandedChild=mPrivateLayout.getExpandedChild();
  if (expandedChild == null) {
    expandedChild=mPrivateLayout.getContractedChild();
  }
  mMaxExpandHeight=expandedChild.getHeight();
  View headsUpChild=mPrivateLayout.getHeadsUpChild();
  if (headsUpChild != null) {
    mHeadsUpHeight=headsUpChild.getHeight();
  }
  if (intrinsicBefore != getIntrinsicHeight()) {
    notifyHeightChanged(false);
  }
}","private void updateMaxHeights(){
  int intrinsicBefore=getIntrinsicHeight();
  View expandedChild=mPrivateLayout.getExpandedChild();
  if (expandedChild == null) {
    expandedChild=mPrivateLayout.getContractedChild();
  }
  mMaxExpandHeight=expandedChild.getHeight();
  View headsUpChild=mPrivateLayout.getHeadsUpChild();
  if (headsUpChild == null) {
    headsUpChild=mPrivateLayout.getContractedChild();
  }
  mHeadsUpHeight=headsUpChild.getHeight();
  if (intrinsicBefore != getIntrinsicHeight()) {
    notifyHeightChanged(false);
  }
}",0.9396887159533074
195309,"public NotificationContentView(Context context,AttributeSet attrs){
  super(context,attrs);
  mFadePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.ADD));
  reset(true);
}","public NotificationContentView(Context context,AttributeSet attrs){
  super(context,attrs);
  mFadePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.ADD));
  mSmallHeight=getResources().getDimensionPixelSize(R.dimen.notification_min_height);
  mHeadsUpHeight=getResources().getDimensionPixelSize(R.dimen.notification_mid_height);
  reset(true);
}",0.6729323308270677
195310,"public void setContractedChild(View child){
  if (mContractedChild != null) {
    mContractedChild.animate().cancel();
    removeView(mContractedChild);
  }
  sanitizeLayoutParams(child,mSmallHeight);
  addView(child);
  mContractedChild=child;
  mContractedWrapper=NotificationViewWrapper.wrap(getContext(),child);
  selectLayout(false,true);
  mContractedWrapper.setDark(mDark,false,0);
}","public void setContractedChild(View child){
  if (mContractedChild != null) {
    mContractedChild.animate().cancel();
    removeView(mContractedChild);
  }
  addView(child);
  mContractedChild=child;
  mContractedWrapper=NotificationViewWrapper.wrap(getContext(),child);
  selectLayout(false,true);
  mContractedWrapper.setDark(mDark,false,0);
}",0.9402173913043478
195311,"public void reset(boolean resetActualHeight){
  if (mContractedChild != null) {
    mContractedChild.animate().cancel();
  }
  if (mExpandedChild != null) {
    mExpandedChild.animate().cancel();
  }
  if (mHeadsUpChild != null) {
    mHeadsUpChild.animate().cancel();
  }
  removeAllViews();
  mContractedChild=null;
  mExpandedChild=null;
  mSmallHeight=getResources().getDimensionPixelSize(R.dimen.notification_min_height);
  mHeadsUpHeight=getResources().getDimensionPixelSize(R.dimen.notification_mid_height);
  mVisibleView=CONTRACTED;
  if (resetActualHeight) {
    mContentHeight=mSmallHeight;
  }
}","public void reset(boolean resetActualHeight){
  if (mContractedChild != null) {
    mContractedChild.animate().cancel();
  }
  if (mExpandedChild != null) {
    mExpandedChild.animate().cancel();
  }
  if (mHeadsUpChild != null) {
    mHeadsUpChild.animate().cancel();
  }
  removeAllViews();
  mContractedChild=null;
  mExpandedChild=null;
  mHeadsUpChild=null;
  mVisibleView=CONTRACTED;
  if (resetActualHeight) {
    mContentHeight=mSmallHeight;
  }
}",0.8380414312617702
195312,"private int calculateVisibleView(){
  boolean noExpandedChild=mExpandedChild == null;
  if (mIsHeadsUp) {
    if (mContentHeight <= mHeadsUpHeight || noExpandedChild) {
      return HEADSUP;
    }
 else {
      return EXPANDED;
    }
  }
 else {
    if (mContentHeight <= mSmallHeight || noExpandedChild) {
      return CONTRACTED;
    }
 else {
      return EXPANDED;
    }
  }
}","private int calculateVisibleView(){
  boolean noExpandedChild=mExpandedChild == null;
  if (mIsHeadsUp && mHeadsUpChild != null) {
    if (mContentHeight <= mHeadsUpChild.getHeight() || noExpandedChild) {
      return HEADSUP;
    }
 else {
      return EXPANDED;
    }
  }
 else {
    if (mContentHeight <= mSmallHeight || noExpandedChild) {
      return CONTRACTED;
    }
 else {
      return EXPANDED;
    }
  }
}",0.942211055276382
195313,"@Override public boolean onInterceptTouchEvent(MotionEvent event){
  if (!mMotionOnHeadsUpView && event.getActionMasked() != MotionEvent.ACTION_DOWN) {
    return false;
  }
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mInitialTouchY=y;
  mInitialTouchX=x;
setTrackingHeadsUp(false);
ExpandableView child=mStackScroller.getChildAtPosition(x,y);
mMotionOnHeadsUpView=false;
if (child instanceof ExpandableNotificationRow) {
mPickedChild=(ExpandableNotificationRow)child;
mMotionOnHeadsUpView=mPickedChild.isHeadsUp() && !mPickedChild.isInShade();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
mTrackingPointer=event.getPointerId(newIndex);
mInitialTouchX=event.getX(newIndex);
mInitialTouchY=event.getY(newIndex);
}
break;
case MotionEvent.ACTION_MOVE:
final float h=y - mInitialTouchY;
if (Math.abs(h) > mTouchSlop && Math.abs(h) > Math.abs(x - mInitialTouchX)) {
setTrackingHeadsUp(true);
mCollapseSnoozes=h < 0;
mInitialTouchX=x;
mInitialTouchY=y;
mHeadsUpManager.releaseAllToShade();
int expandedHeight=mPickedChild.getActualHeight();
mPanel.startExpandMotion(x,y,true,expandedHeight);
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mPickedChild != null && mMotionOnHeadsUpView) {
if (mHeadsUpManager.shouldSwallowClick(mPickedChild.getStatusBarNotification().getKey())) {
endMotion();
return true;
}
}
endMotion();
break;
}
return false;
}","@Override public boolean onInterceptTouchEvent(MotionEvent event){
  if (!mMotionOnHeadsUpView && event.getActionMasked() != MotionEvent.ACTION_DOWN) {
    return false;
  }
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mInitialTouchY=y;
  mInitialTouchX=x;
setTrackingHeadsUp(false);
ExpandableView child=mStackScroller.getChildAtPosition(x,y);
mMotionOnHeadsUpView=false;
if (child instanceof ExpandableNotificationRow) {
mPickedChild=(ExpandableNotificationRow)child;
mMotionOnHeadsUpView=mPickedChild.isHeadsUp() && !mPickedChild.isInShade();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
mTrackingPointer=event.getPointerId(newIndex);
mInitialTouchX=event.getX(newIndex);
mInitialTouchY=event.getY(newIndex);
}
break;
case MotionEvent.ACTION_MOVE:
final float h=y - mInitialTouchY;
if (Math.abs(h) > mTouchSlop && Math.abs(h) > Math.abs(x - mInitialTouchX)) {
setTrackingHeadsUp(true);
mCollapseSnoozes=h < 0;
mInitialTouchX=x;
mInitialTouchY=y;
int expandedHeight=mPickedChild.getActualHeight();
mPanel.startExpandMotion(x,y,true,expandedHeight);
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mPickedChild != null && mMotionOnHeadsUpView) {
if (mHeadsUpManager.shouldSwallowClick(mPickedChild.getStatusBarNotification().getKey())) {
endMotion();
return true;
}
}
endMotion();
break;
}
return false;
}",0.9897250763676756
195314,"@Override protected void onHeightUpdated(float expandedHeight){
  if (!mQsExpanded || mQsExpandImmediate || mIsExpanding && mQsExpandedWhenExpandingStarted) {
    positionClockAndNotifications();
  }
  if (mQsExpandImmediate || mQsExpanded && !mQsTracking && mQsExpansionAnimator == null && !mQsExpansionFromOverscroll) {
    float t;
    if (mKeyguardShowing) {
      t=expandedHeight / getMaxPanelHeight();
    }
 else {
      float panelHeightQsCollapsed=mNotificationStackScroller.getIntrinsicPadding() + mNotificationStackScroller.getMinStackHeight();
      float panelHeightQsExpanded=calculatePanelHeightQsExpanded();
      t=(expandedHeight - panelHeightQsCollapsed) / (panelHeightQsExpanded - panelHeightQsCollapsed);
    }
    setQsExpansion(mQsMinExpansionHeight + t * (getTempQsMaxExpansion() - mQsMinExpansionHeight));
  }
  mNotificationStackScroller.setStackHeight(expandedHeight);
  updateHeader();
  updateUnlockIcon();
  updateNotificationTranslucency();
  mHeadsUpManager.setIsExpanded(!isShadeCollapsed());
  mNotificationStackScroller.setShadeExpanded(!isShadeCollapsed());
  if (DEBUG) {
    invalidate();
  }
}","@Override protected void onHeightUpdated(float expandedHeight){
  if (!mQsExpanded || mQsExpandImmediate || mIsExpanding && mQsExpandedWhenExpandingStarted) {
    positionClockAndNotifications();
  }
  if (mQsExpandImmediate || mQsExpanded && !mQsTracking && mQsExpansionAnimator == null && !mQsExpansionFromOverscroll) {
    float t;
    if (mKeyguardShowing) {
      t=expandedHeight / getMaxPanelHeight();
    }
 else {
      float panelHeightQsCollapsed=mNotificationStackScroller.getIntrinsicPadding() + mNotificationStackScroller.getMinStackHeight();
      float panelHeightQsExpanded=calculatePanelHeightQsExpanded();
      t=(expandedHeight - panelHeightQsCollapsed) / (panelHeightQsExpanded - panelHeightQsCollapsed);
    }
    setQsExpansion(mQsMinExpansionHeight + t * (getTempQsMaxExpansion() - mQsMinExpansionHeight));
  }
  mNotificationStackScroller.setStackHeight(expandedHeight);
  updateHeader();
  updateUnlockIcon();
  updateNotificationTranslucency();
  mHeadsUpManager.setIsExpanded(expandedHeight != 0);
  mNotificationStackScroller.setShadeExpanded(!isShadeCollapsed());
  if (DEBUG) {
    invalidate();
  }
}",0.9841129744042364
195315,"/** 
 * Called when updating or posting a notification to the heads up.
 */
public void updateNotification(NotificationData.Entry headsUp,boolean alert){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  headsUp.row.setChildrenExpanded(false,false);
  headsUp.row.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED);
  if (alert) {
    HeadsUpEntry headsUpEntry=mHeadsUpEntries.get(headsUp.key);
    headsUpEntry.updateEntry();
    headsUpEntry.entry.row.setInShade(mIsExpanded);
  }
}","/** 
 * Called when updating or posting a notification to the heads up.
 */
public void updateNotification(NotificationData.Entry headsUp,boolean alert){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  headsUp.row.setChildrenExpanded(false,false);
  headsUp.row.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED);
  if (alert) {
    HeadsUpEntry headsUpEntry=mHeadsUpEntries.get(headsUp.key);
    headsUpEntry.updateEntry();
    setEntryToShade(headsUpEntry,mIsExpanded);
  }
}",0.9488465396188566
195316,"public void setIsExpanded(boolean isExpanded){
  mIsExpanded=isExpanded;
}","public void setIsExpanded(boolean isExpanded){
  if (isExpanded != mIsExpanded) {
    mIsExpanded=isExpanded;
    if (isExpanded) {
      releaseAllToShade();
    }
  }
}",0.6065573770491803
195317,"private void addHeadsUpEntry(NotificationData.Entry entry){
  HeadsUpEntry headsUpEntry=mEntryPool.acquire();
  headsUpEntry.setEntry(entry);
  mHeadsUpEntries.put(entry.key,headsUpEntry);
  entry.row.setHeadsUp(true);
  if (!entry.row.isInShade() && mIsExpanded) {
    headsUpEntry.entry.row.setInShade(true);
  }
  updatePinnedHeadsUpState(false);
  for (  OnHeadsUpChangedListener listener : mListeners) {
    listener.OnHeadsUpStateChanged(entry,true);
  }
  entry.row.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED);
}","private void addHeadsUpEntry(NotificationData.Entry entry){
  HeadsUpEntry headsUpEntry=mEntryPool.acquire();
  headsUpEntry.setEntry(entry);
  mHeadsUpEntries.put(entry.key,headsUpEntry);
  entry.row.setHeadsUp(true);
  if (!entry.row.isInShade() && mIsExpanded) {
    setEntryToShade(headsUpEntry,true);
  }
  updatePinnedHeadsUpState(false);
  for (  OnHeadsUpChangedListener listener : mListeners) {
    listener.OnHeadsUpStateChanged(entry,true);
  }
  entry.row.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED);
}",0.953081876724931
195318,"private void generateHeadsUpAnimationEvents(){
  for (  Pair<ExpandableNotificationRow,Boolean> eventPair : mHeadsUpChangeAnimations) {
    ExpandableNotificationRow row=eventPair.first;
    boolean isHeadsUp=eventPair.second;
    int type=AnimationEvent.ANIMATION_TYPE_HEADS_UP_OTHER;
    boolean onBottom=false;
    if (!row.isInShade() && !isHeadsUp) {
      type=AnimationEvent.ANIMATION_TYPE_HEADS_UP_DISAPPEAR;
    }
 else     if (mAddedHeadsUpChildren.contains(row)) {
      if (!row.isInShade() || shouldHunAppearFromBottom(row)) {
        type=AnimationEvent.ANIMATION_TYPE_HEADS_UP_APPEAR;
      }
 else {
        type=AnimationEvent.ANIMATION_TYPE_ADD;
      }
      onBottom=row.isInShade();
    }
    AnimationEvent event=new AnimationEvent(row,type);
    event.headsUpFromBottom=onBottom;
    mAnimationEvents.add(event);
  }
  mHeadsUpChangeAnimations.clear();
  mAddedHeadsUpChildren.clear();
}","private void generateHeadsUpAnimationEvents(){
  for (  Pair<ExpandableNotificationRow,Boolean> eventPair : mHeadsUpChangeAnimations) {
    ExpandableNotificationRow row=eventPair.first;
    boolean isHeadsUp=eventPair.second;
    int type=AnimationEvent.ANIMATION_TYPE_HEADS_UP_OTHER;
    boolean onBottom=false;
    if (!row.isInShade() && !isHeadsUp) {
      type=AnimationEvent.ANIMATION_TYPE_HEADS_UP_DISAPPEAR;
    }
 else     if (mAddedHeadsUpChildren.contains(row) || (!row.isInShade() && !mIsExpanded)) {
      if (!row.isInShade() || shouldHunAppearFromBottom(row)) {
        type=AnimationEvent.ANIMATION_TYPE_HEADS_UP_APPEAR;
      }
 else {
        type=AnimationEvent.ANIMATION_TYPE_ADD;
      }
      onBottom=row.isInShade();
    }
    AnimationEvent event=new AnimationEvent(row,type);
    event.headsUpFromBottom=onBottom;
    mAnimationEvents.add(event);
  }
  mHeadsUpChangeAnimations.clear();
  mAddedHeadsUpChildren.clear();
}",0.9666307857911732
195319,"private boolean isPinnedHeadsUp(View v){
  if (v instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)v;
    return row.isHeadsUp() && !row.isInShade();
  }
  return false;
}","public boolean isPinnedHeadsUp(View v){
  if (v instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)v;
    return row.isHeadsUp() && !row.isInShade();
  }
  return false;
}",0.9751693002257336
195320,"private void updateHeadsUpStates(StackScrollState resultState,AmbientState ambientState){
  TreeSet<HeadsUpManager.HeadsUpEntry> headsUpEntries=ambientState.getSortedHeadsUpEntries();
  for (  HeadsUpManager.HeadsUpEntry entry : headsUpEntries) {
    ExpandableNotificationRow row=entry.entry.row;
    StackViewState childState=resultState.getViewStateForView(row);
    if (!row.isInShade()) {
      childState.yTranslation=0;
    }
    if (ambientState.getTopHeadsUpEntry() == row) {
      childState.height+=row.getHeadsUpHeight() - mCollapsedSize;
    }
    childState.height=Math.max(childState.height,row.getHeadsUpHeight());
    childState.yTranslation=Math.min(childState.yTranslation,ambientState.getMaxHeadsUpTranslation() - childState.height);
  }
}","private void updateHeadsUpStates(StackScrollState resultState,AmbientState ambientState){
  TreeSet<HeadsUpManager.HeadsUpEntry> headsUpEntries=ambientState.getSortedHeadsUpEntries();
  for (  HeadsUpManager.HeadsUpEntry entry : headsUpEntries) {
    ExpandableNotificationRow row=entry.entry.row;
    StackViewState childState=resultState.getViewStateForView(row);
    ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
    boolean isTopEntry=topHeadsUpEntry == row;
    if (!row.isInShade()) {
      childState.yTranslation=0;
      childState.height=row.getHeadsUpHeight();
      if (!isTopEntry) {
        StackViewState topState=resultState.getViewStateForView(topHeadsUpEntry);
        childState.height=row.getHeadsUpHeight();
        childState.yTranslation=Math.min(childState.yTranslation,topState.yTranslation + topState.height - childState.height);
      }
    }
 else     if (mIsExpanded) {
      if (isTopEntry) {
        childState.height+=row.getHeadsUpHeight() - mCollapsedSize;
      }
      childState.height=Math.max(childState.height,row.getHeadsUpHeight());
      float bottomPosition=ambientState.getMaxHeadsUpTranslation() - childState.height;
      childState.yTranslation=Math.min(childState.yTranslation,bottomPosition);
    }
  }
}",0.6105675146771037
195321,"/** 
 * Determines if a view should not perform an animation and applies it directly.
 * @return true if no animation should be performed
 */
private boolean applyWithoutAnimation(ExpandableView child,StackViewState viewState,StackScrollState finalState){
  if (mShadeExpanded) {
    return false;
  }
  if (getChildTag(child,TAG_ANIMATOR_TRANSLATION_Y) != null) {
    return false;
  }
  if (mHeadsUpDisappearChildren.contains(child) || mHeadsUpAppearChildren.contains(child)) {
    return false;
  }
  finalState.applyState(child,viewState);
  return true;
}","/** 
 * Determines if a view should not perform an animation and applies it directly.
 * @return true if no animation should be performed
 */
private boolean applyWithoutAnimation(ExpandableView child,StackViewState viewState,StackScrollState finalState){
  if (mShadeExpanded) {
    return false;
  }
  if (getChildTag(child,TAG_ANIMATOR_TRANSLATION_Y) != null) {
    return false;
  }
  if (mHeadsUpDisappearChildren.contains(child) || mHeadsUpAppearChildren.contains(child)) {
    return false;
  }
  if (mHostLayout.isPinnedHeadsUp(child)) {
    return false;
  }
  finalState.applyState(child,viewState);
  return true;
}",0.9443507588532885
195322,"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (!isEnabled()) {
    return false;
  }
  trackVelocity(ev);
  final int action=ev.getAction();
  if (DEBUG_SCALE)   Log.d(TAG,""String_Node_Str"" + MotionEvent.actionToString(action) + ""String_Node_Str""+ mExpanding+ (0 != (mExpansionStyle & BLINDS) ? ""String_Node_Str"" : ""String_Node_Str"")+ (0 != (mExpansionStyle & PULL) ? ""String_Node_Str"" : ""String_Node_Str"")+ (0 != (mExpansionStyle & STRETCH) ? ""String_Node_Str"" : ""String_Node_Str""));
  mSGD.onTouchEvent(ev);
  final int x=(int)mSGD.getFocusX();
  final int y=(int)mSGD.getFocusY();
  mInitialTouchFocusY=y;
  mInitialTouchSpan=mSGD.getCurrentSpan();
  mLastFocusY=mInitialTouchFocusY;
  mLastSpanY=mInitialTouchSpan;
  if (DEBUG_SCALE)   Log.d(TAG,""String_Node_Str"" + mInitialTouchSpan);
  if (mExpanding) {
    mLastMotionY=ev.getRawY();
    maybeRecycleVelocityTracker(ev);
    return true;
  }
 else {
    if ((action == MotionEvent.ACTION_MOVE) && 0 != (mExpansionStyle & BLINDS)) {
      return true;
    }
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
{
        final float xspan=mSGD.getCurrentSpanX();
        if (xspan > mPullGestureMinXSpan && xspan > mSGD.getCurrentSpanY() && !mExpanding) {
          if (DEBUG_SCALE)           Log.v(TAG,""String_Node_Str"" + xspan + ""String_Node_Str"");
          startExpanding(mResizedView,PULL);
          mWatchingForPull=false;
        }
        if (mWatchingForPull) {
          final float yDiff=ev.getRawY() - mInitialTouchY;
          if (yDiff > mTouchSlop) {
            if (DEBUG)             Log.v(TAG,""String_Node_Str"" + yDiff + ""String_Node_Str"");
            mWatchingForPull=false;
            if (mResizedView != null && !isFullyExpanded(mResizedView)) {
              if (startExpanding(mResizedView,BLINDS)) {
                mLastMotionY=ev.getRawY();
                mInitialTouchY=ev.getRawY();
                mHasPopped=false;
              }
            }
          }
        }
        break;
      }
case MotionEvent.ACTION_DOWN:
    mWatchingForPull=mScrollAdapter != null && isInside(mScrollAdapter.getHostView(),x,y) && mScrollAdapter.isScrolledToTop();
  mResizedView=findView(x,y);
if (mResizedView != null && (isFullyExpanded(mResizedView) || !mCallback.canChildBeExpanded(mResizedView))) {
  mResizedView=null;
  mWatchingForPull=false;
}
mInitialTouchY=ev.getY();
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
finishExpanding(false,getCurrentVelocity());
clearView();
break;
}
mLastMotionY=ev.getRawY();
maybeRecycleVelocityTracker(ev);
return mExpanding;
}
}","@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (!isEnabled()) {
    return false;
  }
  trackVelocity(ev);
  final int action=ev.getAction();
  if (DEBUG_SCALE)   Log.d(TAG,""String_Node_Str"" + MotionEvent.actionToString(action) + ""String_Node_Str""+ mExpanding+ (0 != (mExpansionStyle & BLINDS) ? ""String_Node_Str"" : ""String_Node_Str"")+ (0 != (mExpansionStyle & PULL) ? ""String_Node_Str"" : ""String_Node_Str"")+ (0 != (mExpansionStyle & STRETCH) ? ""String_Node_Str"" : ""String_Node_Str""));
  mSGD.onTouchEvent(ev);
  final int x=(int)mSGD.getFocusX();
  final int y=(int)mSGD.getFocusY();
  mInitialTouchFocusY=y;
  mInitialTouchSpan=mSGD.getCurrentSpan();
  mLastFocusY=mInitialTouchFocusY;
  mLastSpanY=mInitialTouchSpan;
  if (DEBUG_SCALE)   Log.d(TAG,""String_Node_Str"" + mInitialTouchSpan);
  if (mExpanding) {
    mLastMotionY=ev.getRawY();
    maybeRecycleVelocityTracker(ev);
    return true;
  }
 else {
    if ((action == MotionEvent.ACTION_MOVE) && 0 != (mExpansionStyle & BLINDS)) {
      return true;
    }
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
{
        final float xspan=mSGD.getCurrentSpanX();
        if (xspan > mPullGestureMinXSpan && xspan > mSGD.getCurrentSpanY() && !mExpanding) {
          if (DEBUG_SCALE)           Log.v(TAG,""String_Node_Str"" + xspan + ""String_Node_Str"");
          startExpanding(mResizedView,PULL);
          mWatchingForPull=false;
        }
        if (mWatchingForPull) {
          final float yDiff=ev.getRawY() - mInitialTouchY;
          if (yDiff > mTouchSlop) {
            if (DEBUG)             Log.v(TAG,""String_Node_Str"" + yDiff + ""String_Node_Str"");
            mWatchingForPull=false;
            if (mResizedView != null && !isFullyExpanded(mResizedView)) {
              if (startExpanding(mResizedView,BLINDS)) {
                mLastMotionY=ev.getRawY();
                mInitialTouchY=ev.getRawY();
                mHasPopped=false;
              }
            }
          }
        }
        break;
      }
case MotionEvent.ACTION_DOWN:
    mWatchingForPull=mScrollAdapter != null && isInside(mScrollAdapter.getHostView(),x,y) && mScrollAdapter.isScrolledToTop();
  mResizedView=findView(x,y);
if (mResizedView != null && !mCallback.canChildBeExpanded(mResizedView)) {
  mResizedView=null;
  mWatchingForPull=false;
}
mInitialTouchY=ev.getY();
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (DEBUG) Log.d(TAG,""String_Node_Str"");
finishExpanding(false,getCurrentVelocity());
clearView();
break;
}
mLastMotionY=ev.getRawY();
maybeRecycleVelocityTracker(ev);
return mExpanding;
}
}",0.9933598937583
195323,"public HeadsUpManager(final Context context,ViewTreeObserver observer){
  Resources resources=context.getResources();
  mTouchSensitivityDelay=resources.getInteger(R.integer.heads_up_sensitivity_delay);
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + mTouchSensitivityDelay);
  mSnoozedPackages=new ArrayMap<>();
  mDefaultSnoozeLengthMs=resources.getInteger(R.integer.heads_up_default_snooze_length_ms);
  mSnoozeLengthMs=mDefaultSnoozeLengthMs;
  mMinimumDisplayTime=resources.getInteger(R.integer.heads_up_notification_minimum_time);
  mHeadsUpNotificationDecay=200000000;
  ;
  mClock=new Clock();
  mSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,mDefaultSnoozeLengthMs);
  mSettingsObserver=new ContentObserver(mHandler){
    @Override public void onChange(    boolean selfChange){
      final int packageSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,-1);
      if (packageSnoozeLengthMs > -1 && packageSnoozeLengthMs != mSnoozeLengthMs) {
        mSnoozeLengthMs=packageSnoozeLengthMs;
        if (DEBUG)         Log.v(TAG,""String_Node_Str"" + mSnoozeLengthMs);
      }
    }
  }
;
  context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(SETTING_HEADS_UP_SNOOZE_LENGTH_MS),false,mSettingsObserver);
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + mSnoozeLengthMs);
  observer.addOnComputeInternalInsetsListener(this);
}","public HeadsUpManager(final Context context,ViewTreeObserver observer){
  Resources resources=context.getResources();
  mTouchSensitivityDelay=resources.getInteger(R.integer.heads_up_sensitivity_delay);
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + mTouchSensitivityDelay);
  mSnoozedPackages=new ArrayMap<>();
  mDefaultSnoozeLengthMs=resources.getInteger(R.integer.heads_up_default_snooze_length_ms);
  mSnoozeLengthMs=mDefaultSnoozeLengthMs;
  mMinimumDisplayTime=resources.getInteger(R.integer.heads_up_notification_minimum_time);
  mHeadsUpNotificationDecay=resources.getInteger(R.integer.heads_up_notification_decay);
  mClock=new Clock();
  mSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,mDefaultSnoozeLengthMs);
  mSettingsObserver=new ContentObserver(mHandler){
    @Override public void onChange(    boolean selfChange){
      final int packageSnoozeLengthMs=Settings.Global.getInt(context.getContentResolver(),SETTING_HEADS_UP_SNOOZE_LENGTH_MS,-1);
      if (packageSnoozeLengthMs > -1 && packageSnoozeLengthMs != mSnoozeLengthMs) {
        mSnoozeLengthMs=packageSnoozeLengthMs;
        if (DEBUG)         Log.v(TAG,""String_Node_Str"" + mSnoozeLengthMs);
      }
    }
  }
;
  context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(SETTING_HEADS_UP_SNOOZE_LENGTH_MS),false,mSettingsObserver);
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + mSnoozeLengthMs);
  observer.addOnComputeInternalInsetsListener(this);
}",0.975609756097561
195324,"private void updateContentHeight(){
  int height=0;
  for (int i=0; i < getChildCount(); i++) {
    View child=getChildAt(i);
    if (child.getVisibility() != View.GONE) {
      if (height != 0) {
        height+=mPaddingBetweenElements;
      }
      if (child instanceof ExpandableNotificationRow) {
        ExpandableNotificationRow row=(ExpandableNotificationRow)child;
        height+=row.getIntrinsicHeight();
      }
 else       if (child instanceof ExpandableView) {
        ExpandableView expandableView=(ExpandableView)child;
        height+=expandableView.getActualHeight();
      }
    }
  }
  mContentHeight=height + mTopPadding;
}","private void updateContentHeight(){
  int height=0;
  for (int i=0; i < getChildCount(); i++) {
    View child=getChildAt(i);
    if (child.getVisibility() != View.GONE) {
      if (height != 0) {
        height+=mPaddingBetweenElements;
      }
      if (child instanceof ExpandableView) {
        ExpandableView expandableView=(ExpandableView)child;
        height+=expandableView.getIntrinsicHeight();
      }
    }
  }
  mContentHeight=height + mTopPadding;
}",0.7551942186088527
195325,"private void updateHeadsUpStates(StackScrollState resultState,AmbientState ambientState){
  TreeSet<HeadsUpManager.HeadsUpEntry> headsUpEntries=ambientState.getSortedHeadsUpEntries();
  for (  HeadsUpManager.HeadsUpEntry entry : headsUpEntries) {
    ExpandableNotificationRow row=entry.entry.row;
    StackViewState childState=resultState.getViewStateForView(row);
    ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
    boolean isTopEntry=topHeadsUpEntry == row;
    if (!row.isInShade()) {
      childState.yTranslation=0;
      childState.height=row.getHeadsUpHeight();
      if (!isTopEntry) {
        StackViewState topState=resultState.getViewStateForView(topHeadsUpEntry);
        childState.height=row.getHeadsUpHeight();
        childState.yTranslation=Math.min(childState.yTranslation,topState.yTranslation + topState.height - childState.height);
      }
    }
 else     if (mIsExpanded) {
      if (isTopEntry) {
        childState.height+=row.getHeadsUpHeight() - mCollapsedSize;
      }
      childState.height=Math.max(childState.height,row.getHeadsUpHeight());
      float bottomPosition=ambientState.getMaxHeadsUpTranslation() - childState.height;
      childState.yTranslation=Math.min(childState.yTranslation,bottomPosition);
    }
  }
}","private void updateHeadsUpStates(StackScrollState resultState,AmbientState ambientState){
  TreeSet<HeadsUpManager.HeadsUpEntry> headsUpEntries=ambientState.getSortedHeadsUpEntries();
  for (  HeadsUpManager.HeadsUpEntry entry : headsUpEntries) {
    ExpandableNotificationRow row=entry.entry.row;
    StackViewState childState=resultState.getViewStateForView(row);
    ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
    boolean isTopEntry=topHeadsUpEntry == row;
    if (!row.isInShade()) {
      childState.yTranslation=0;
      childState.height=row.getHeadsUpHeight();
      if (!isTopEntry) {
        StackViewState topState=resultState.getViewStateForView(topHeadsUpEntry);
        childState.height=row.getHeadsUpHeight();
        childState.yTranslation=topState.yTranslation + topState.height - childState.height;
      }
    }
 else     if (mIsExpanded) {
      if (isTopEntry) {
        childState.height+=row.getHeadsUpHeight() - mCollapsedSize;
      }
      childState.height=Math.max(childState.height,row.getHeadsUpHeight());
      float bottomPosition=ambientState.getMaxHeadsUpTranslation() - childState.height;
      childState.yTranslation=Math.min(childState.yTranslation,bottomPosition);
    }
  }
}",0.9842271293375394
195326,"public void setHeadsUp(boolean isHeadsUp){
  mIsHeadsUp=isHeadsUp;
  mPrivateLayout.setHeadsUp(isHeadsUp);
}","public void setHeadsUp(boolean isHeadsUp){
  int intrinsicBefore=getIntrinsicHeight();
  mIsHeadsUp=isHeadsUp;
  mPrivateLayout.setHeadsUp(isHeadsUp);
  if (intrinsicBefore != getIntrinsicHeight()) {
    notifyHeightChanged(false);
  }
}",0.6260869565217392
195327,"/** 
 * Returns a map of the names/values of the runtime statistics that   {@link #getRuntimeStat()} supports.
 * @return a map of the names/values of the supported runtime statistics.
 * @hide
 */
public static Map<String,String> getRuntimeStats(){
  return VMDebug.getRuntimeStats();
}","/** 
 * Returns a map of the names/values of the runtime statistics that   {@link #getRuntimeStat(String)} supports.
 * @return a map of the names/values of the supported runtime statistics.
 * @hide
 */
public static Map<String,String> getRuntimeStats(){
  return VMDebug.getRuntimeStats();
}",0.9896551724137932
195328,"/** 
 * Returns a map of the names/values of the runtime statistics that   {@link #getRuntimeStat()} supports.
 * @return a map of the names/values of the supported runtime statistics.
 * @hide
 */
public static Map<String,String> getRuntimeStats(){
  return VMDebug.getRuntimeStats();
}","/** 
 * Returns a map of the names/values of the runtime statistics that   {@link #getRuntimeStat(String)} supports.
 * @return a map of the names/values of the supported runtime statistics.
 * @hide
 */
public static Map<String,String> getRuntimeStats(){
  return VMDebug.getRuntimeStats();
}",0.9896551724137932
195329,"/** 
 * Returns a map of the names/values of the runtime statistics that   {@link #getRuntimeStat()} supports.
 * @return a map of the names/values of the supported runtime statistics.
 * @hide
 */
public static Map<String,String> getRuntimeStats(){
  return VMDebug.getRuntimeStats();
}","/** 
 * Returns a map of the names/values of the runtime statistics that   {@link #getRuntimeStat(String)} supports.
 * @return a map of the names/values of the supported runtime statistics.
 * @hide
 */
public static Map<String,String> getRuntimeStats(){
  return VMDebug.getRuntimeStats();
}",0.9896551724137932
195330,"/** 
 * Returns a map of the names/values of the runtime statistics that   {@link #getRuntimeStat()} supports.
 * @return a map of the names/values of the supported runtime statistics.
 * @hide
 */
public static Map<String,String> getRuntimeStats(){
  return VMDebug.getRuntimeStats();
}","/** 
 * Returns a map of the names/values of the runtime statistics that   {@link #getRuntimeStat(String)} supports.
 * @return a map of the names/values of the supported runtime statistics.
 * @hide
 */
public static Map<String,String> getRuntimeStats(){
  return VMDebug.getRuntimeStats();
}",0.9896551724137932
195331,"/** 
 * Returns a map of the names/values of the runtime statistics that   {@link #getRuntimeStat()} supports.
 * @return a map of the names/values of the supported runtime statistics.
 * @hide
 */
public static Map<String,String> getRuntimeStats(){
  return VMDebug.getRuntimeStats();
}","/** 
 * Returns a map of the names/values of the runtime statistics that   {@link #getRuntimeStat(String)} supports.
 * @return a map of the names/values of the supported runtime statistics.
 * @hide
 */
public static Map<String,String> getRuntimeStats(){
  return VMDebug.getRuntimeStats();
}",0.9896551724137932
195332,"public void refreshStats(int statsType,SparseArray<UserHandle> asUsers,long rawRealtimeUs,long rawUptimeUs){
  getStats();
  mMaxPower=0;
  mMaxRealPower=0;
  mComputedPower=0;
  mTotalPower=0;
  mUsageList.clear();
  mWifiSippers.clear();
  mBluetoothSippers.clear();
  mUserSippers.clear();
  mMobilemsppList.clear();
  if (mStats == null) {
    return;
  }
  if (mCpuPowerCalculator == null) {
    mCpuPowerCalculator=new CpuPowerCalculator(mPowerProfile);
  }
  mCpuPowerCalculator.reset();
  if (mWakelockPowerCalculator == null) {
    mWakelockPowerCalculator=new WakelockPowerCalculator(mPowerProfile);
  }
  mWakelockPowerCalculator.reset();
  if (mMobileRadioPowerCalculator == null) {
    mMobileRadioPowerCalculator=new MobileRadioPowerCalculator(mPowerProfile,mStats);
  }
  mMobileRadioPowerCalculator.reset(mStats);
  if (mWifiPowerCalculator == null) {
    if (checkHasWifiPowerReporting(mContext,mPowerProfile)) {
      mWifiPowerCalculator=new WifiPowerCalculator(mPowerProfile);
    }
 else {
      mWifiPowerCalculator=new WifiPowerEstimator(mPowerProfile);
    }
  }
  mWifiPowerCalculator.reset();
  if (mBluetoothPowerCalculator == null) {
    mBluetoothPowerCalculator=new BluetoothPowerCalculator();
  }
  mBluetoothPowerCalculator.reset();
  if (mSensorPowerCalculator == null) {
    mSensorPowerCalculator=new SensorPowerCalculator(mPowerProfile,(SensorManager)mContext.getSystemService(Context.SENSOR_SERVICE));
  }
  mSensorPowerCalculator.reset();
  mStatsType=statsType;
  mRawUptime=rawUptimeUs;
  mRawRealtime=rawRealtimeUs;
  mBatteryUptime=mStats.getBatteryUptime(rawUptimeUs);
  mBatteryRealtime=mStats.getBatteryRealtime(rawRealtimeUs);
  mTypeBatteryUptime=mStats.computeBatteryUptime(rawUptimeUs,mStatsType);
  mTypeBatteryRealtime=mStats.computeBatteryRealtime(rawRealtimeUs,mStatsType);
  mBatteryTimeRemaining=mStats.computeBatteryTimeRemaining(rawRealtimeUs);
  mChargeTimeRemaining=mStats.computeChargeTimeRemaining(rawRealtimeUs);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + (rawRealtimeUs / 1000) + ""String_Node_Str""+ (rawUptimeUs / 1000));
    Log.d(TAG,""String_Node_Str"" + (mBatteryRealtime / 1000) + ""String_Node_Str""+ (mBatteryUptime / 1000));
    Log.d(TAG,""String_Node_Str"" + (mTypeBatteryRealtime / 1000) + ""String_Node_Str""+ (mTypeBatteryUptime / 1000));
  }
  mMinDrainedPower=(mStats.getLowDischargeAmountSinceCharge() * mPowerProfile.getBatteryCapacity()) / 100;
  mMaxDrainedPower=(mStats.getHighDischargeAmountSinceCharge() * mPowerProfile.getBatteryCapacity()) / 100;
  processAppUsage(asUsers);
  for (int i=0; i < mUsageList.size(); i++) {
    BatterySipper bs=mUsageList.get(i);
    bs.computeMobilemspp();
    if (bs.mobilemspp != 0) {
      mMobilemsppList.add(bs);
    }
  }
  for (int i=0; i < mUserSippers.size(); i++) {
    List<BatterySipper> user=mUserSippers.valueAt(i);
    for (int j=0; j < user.size(); j++) {
      BatterySipper bs=user.get(j);
      bs.computeMobilemspp();
      if (bs.mobilemspp != 0) {
        mMobilemsppList.add(bs);
      }
    }
  }
  Collections.sort(mMobilemsppList,new Comparator<BatterySipper>(){
    @Override public int compare(    BatterySipper lhs,    BatterySipper rhs){
      return Double.compare(rhs.mobilemspp,lhs.mobilemspp);
    }
  }
);
  processMiscUsage();
  Collections.sort(mUsageList);
  if (!mUsageList.isEmpty()) {
    mMaxRealPower=mMaxPower=mUsageList.get(0).totalPowerMah;
    final int usageListCount=mUsageList.size();
    for (int i=0; i < usageListCount; i++) {
      mComputedPower+=mUsageList.get(i).totalPowerMah;
    }
  }
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + makemAh(mComputedPower) + ""String_Node_Str""+ makemAh(mMinDrainedPower)+ ""String_Node_Str""+ makemAh(mMaxDrainedPower));
  }
  mTotalPower=mComputedPower;
  if (mStats.getLowDischargeAmountSinceCharge() > 1) {
    if (mMinDrainedPower > mComputedPower) {
      double amount=mMinDrainedPower - mComputedPower;
      mTotalPower=mMinDrainedPower;
      BatterySipper bs=new BatterySipper(DrainType.UNACCOUNTED,null,amount);
      int index=Collections.binarySearch(mUsageList,bs);
      if (index < 0) {
        index=-(index + 1);
      }
      mUsageList.add(index,bs);
      mMaxPower=Math.max(mMaxPower,amount);
    }
 else     if (mMaxDrainedPower < mComputedPower) {
      double amount=mComputedPower - mMaxDrainedPower;
      BatterySipper bs=new BatterySipper(DrainType.OVERCOUNTED,null,amount);
      int index=Collections.binarySearch(mUsageList,bs);
      if (index < 0) {
        index=-(index + 1);
      }
      mUsageList.add(index,bs);
      mMaxPower=Math.max(mMaxPower,amount);
    }
  }
}","public void refreshStats(int statsType,SparseArray<UserHandle> asUsers,long rawRealtimeUs,long rawUptimeUs){
  getStats();
  mMaxPower=0;
  mMaxRealPower=0;
  mComputedPower=0;
  mTotalPower=0;
  mUsageList.clear();
  mWifiSippers.clear();
  mBluetoothSippers.clear();
  mUserSippers.clear();
  mMobilemsppList.clear();
  if (mStats == null) {
    return;
  }
  if (mCpuPowerCalculator == null) {
    mCpuPowerCalculator=new CpuPowerCalculator(mPowerProfile);
  }
  mCpuPowerCalculator.reset();
  if (mWakelockPowerCalculator == null) {
    mWakelockPowerCalculator=new WakelockPowerCalculator(mPowerProfile);
  }
  mWakelockPowerCalculator.reset();
  if (mMobileRadioPowerCalculator == null) {
    mMobileRadioPowerCalculator=new MobileRadioPowerCalculator(mPowerProfile,mStats);
  }
  mMobileRadioPowerCalculator.reset(mStats);
  if (mWifiPowerCalculator == null) {
    if (checkHasWifiPowerReporting(mStats,mPowerProfile)) {
      mWifiPowerCalculator=new WifiPowerCalculator(mPowerProfile);
    }
 else {
      mWifiPowerCalculator=new WifiPowerEstimator(mPowerProfile);
    }
  }
  mWifiPowerCalculator.reset();
  if (mBluetoothPowerCalculator == null) {
    mBluetoothPowerCalculator=new BluetoothPowerCalculator();
  }
  mBluetoothPowerCalculator.reset();
  if (mSensorPowerCalculator == null) {
    mSensorPowerCalculator=new SensorPowerCalculator(mPowerProfile,(SensorManager)mContext.getSystemService(Context.SENSOR_SERVICE));
  }
  mSensorPowerCalculator.reset();
  mStatsType=statsType;
  mRawUptime=rawUptimeUs;
  mRawRealtime=rawRealtimeUs;
  mBatteryUptime=mStats.getBatteryUptime(rawUptimeUs);
  mBatteryRealtime=mStats.getBatteryRealtime(rawRealtimeUs);
  mTypeBatteryUptime=mStats.computeBatteryUptime(rawUptimeUs,mStatsType);
  mTypeBatteryRealtime=mStats.computeBatteryRealtime(rawRealtimeUs,mStatsType);
  mBatteryTimeRemaining=mStats.computeBatteryTimeRemaining(rawRealtimeUs);
  mChargeTimeRemaining=mStats.computeChargeTimeRemaining(rawRealtimeUs);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + (rawRealtimeUs / 1000) + ""String_Node_Str""+ (rawUptimeUs / 1000));
    Log.d(TAG,""String_Node_Str"" + (mBatteryRealtime / 1000) + ""String_Node_Str""+ (mBatteryUptime / 1000));
    Log.d(TAG,""String_Node_Str"" + (mTypeBatteryRealtime / 1000) + ""String_Node_Str""+ (mTypeBatteryUptime / 1000));
  }
  mMinDrainedPower=(mStats.getLowDischargeAmountSinceCharge() * mPowerProfile.getBatteryCapacity()) / 100;
  mMaxDrainedPower=(mStats.getHighDischargeAmountSinceCharge() * mPowerProfile.getBatteryCapacity()) / 100;
  processAppUsage(asUsers);
  for (int i=0; i < mUsageList.size(); i++) {
    BatterySipper bs=mUsageList.get(i);
    bs.computeMobilemspp();
    if (bs.mobilemspp != 0) {
      mMobilemsppList.add(bs);
    }
  }
  for (int i=0; i < mUserSippers.size(); i++) {
    List<BatterySipper> user=mUserSippers.valueAt(i);
    for (int j=0; j < user.size(); j++) {
      BatterySipper bs=user.get(j);
      bs.computeMobilemspp();
      if (bs.mobilemspp != 0) {
        mMobilemsppList.add(bs);
      }
    }
  }
  Collections.sort(mMobilemsppList,new Comparator<BatterySipper>(){
    @Override public int compare(    BatterySipper lhs,    BatterySipper rhs){
      return Double.compare(rhs.mobilemspp,lhs.mobilemspp);
    }
  }
);
  processMiscUsage();
  Collections.sort(mUsageList);
  if (!mUsageList.isEmpty()) {
    mMaxRealPower=mMaxPower=mUsageList.get(0).totalPowerMah;
    final int usageListCount=mUsageList.size();
    for (int i=0; i < usageListCount; i++) {
      mComputedPower+=mUsageList.get(i).totalPowerMah;
    }
  }
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + makemAh(mComputedPower) + ""String_Node_Str""+ makemAh(mMinDrainedPower)+ ""String_Node_Str""+ makemAh(mMaxDrainedPower));
  }
  mTotalPower=mComputedPower;
  if (mStats.getLowDischargeAmountSinceCharge() > 1) {
    if (mMinDrainedPower > mComputedPower) {
      double amount=mMinDrainedPower - mComputedPower;
      mTotalPower=mMinDrainedPower;
      BatterySipper bs=new BatterySipper(DrainType.UNACCOUNTED,null,amount);
      int index=Collections.binarySearch(mUsageList,bs);
      if (index < 0) {
        index=-(index + 1);
      }
      mUsageList.add(index,bs);
      mMaxPower=Math.max(mMaxPower,amount);
    }
 else     if (mMaxDrainedPower < mComputedPower) {
      double amount=mComputedPower - mMaxDrainedPower;
      BatterySipper bs=new BatterySipper(DrainType.OVERCOUNTED,null,amount);
      int index=Collections.binarySearch(mUsageList,bs);
      if (index < 0) {
        index=-(index + 1);
      }
      mUsageList.add(index,bs);
      mMaxPower=Math.max(mMaxPower,amount);
    }
  }
}",0.9986998916576382
195333,"public static boolean checkHasWifiPowerReporting(Context context,PowerProfile profile){
  WifiManager manager=context.getSystemService(WifiManager.class);
  if (manager.isEnhancedPowerReportingSupported()) {
    if (profile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_IDLE) != 0 && profile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_RX) != 0 && profile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_TX) != 0) {
      return true;
    }
  }
  return false;
}","public static boolean checkHasWifiPowerReporting(BatteryStats stats,PowerProfile profile){
  return stats.hasWifiActivityReporting() && profile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_IDLE) != 0 && profile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_RX) != 0 && profile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_TX) != 0;
}",0.7037484885126964
195334,"@SuppressWarnings(""String_Node_Str"") void writeToParcelLocked(Parcel out,boolean inclUids,int flags){
  pullPendingStateUpdatesLocked();
  long startClockTime=getStartClockTime();
  final long uSecUptime=SystemClock.uptimeMillis() * 1000;
  final long uSecRealtime=SystemClock.elapsedRealtime() * 1000;
  final long batteryRealtime=mOnBatteryTimeBase.getRealtime(uSecRealtime);
  final long batteryScreenOffRealtime=mOnBatteryScreenOffTimeBase.getRealtime(uSecRealtime);
  out.writeInt(MAGIC);
  writeHistory(out,true,false);
  out.writeInt(mStartCount);
  out.writeLong(startClockTime);
  out.writeString(mStartPlatformVersion);
  out.writeString(mEndPlatformVersion);
  out.writeLong(mUptime);
  out.writeLong(mUptimeStart);
  out.writeLong(mRealtime);
  out.writeLong(mRealtimeStart);
  out.writeInt(mOnBattery ? 1 : 0);
  mOnBatteryTimeBase.writeToParcel(out,uSecUptime,uSecRealtime);
  mOnBatteryScreenOffTimeBase.writeToParcel(out,uSecUptime,uSecRealtime);
  mScreenOnTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i].writeToParcel(out,uSecRealtime);
  }
  mInteractiveTimer.writeToParcel(out,uSecRealtime);
  mPowerSaveModeEnabledTimer.writeToParcel(out,uSecRealtime);
  mDeviceIdleModeEnabledTimer.writeToParcel(out,uSecRealtime);
  mDeviceIdlingTimer.writeToParcel(out,uSecRealtime);
  mPhoneOnTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i].writeToParcel(out,uSecRealtime);
  }
  mPhoneSignalScanningTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
    mNetworkByteActivityCounters[i].writeToParcel(out);
    mNetworkPacketActivityCounters[i].writeToParcel(out);
  }
  mMobileRadioActiveTimer.writeToParcel(out,uSecRealtime);
  mMobileRadioActivePerAppTimer.writeToParcel(out,uSecRealtime);
  mMobileRadioActiveAdjustedTime.writeToParcel(out);
  mMobileRadioActiveUnknownTime.writeToParcel(out);
  mMobileRadioActiveUnknownCount.writeToParcel(out);
  mWifiOnTimer.writeToParcel(out,uSecRealtime);
  mGlobalWifiRunningTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_WIFI_STATES; i++) {
    mWifiStateTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_WIFI_SUPPL_STATES; i++) {
    mWifiSupplStateTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_WIFI_SIGNAL_STRENGTH_BINS; i++) {
    mWifiSignalStrengthsTimer[i].writeToParcel(out,uSecRealtime);
  }
  mBluetoothOnTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_BLUETOOTH_STATES; i++) {
    mBluetoothStateTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mBluetoothActivityCounters[i].writeToParcel(out);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mWifiActivityCounters[i].writeToParcel(out);
  }
  out.writeInt(mNumConnectivityChange);
  out.writeInt(mLoadedNumConnectivityChange);
  out.writeInt(mUnpluggedNumConnectivityChange);
  mFlashlightOnTimer.writeToParcel(out,uSecRealtime);
  out.writeInt(mDischargeUnplugLevel);
  out.writeInt(mDischargePlugLevel);
  out.writeInt(mDischargeCurrentLevel);
  out.writeInt(mCurrentBatteryLevel);
  out.writeInt(mLowDischargeAmountSinceCharge);
  out.writeInt(mHighDischargeAmountSinceCharge);
  out.writeInt(mDischargeAmountScreenOn);
  out.writeInt(mDischargeAmountScreenOnSinceCharge);
  out.writeInt(mDischargeAmountScreenOff);
  out.writeInt(mDischargeAmountScreenOffSinceCharge);
  mDischargeStepTracker.writeToParcel(out);
  mChargeStepTracker.writeToParcel(out);
  out.writeLong(mLastWriteTime);
  out.writeInt(getBluetoothPingCount());
  if (inclUids) {
    out.writeInt(mKernelWakelockStats.size());
    for (    Map.Entry<String,SamplingTimer> ent : mKernelWakelockStats.entrySet()) {
      SamplingTimer kwlt=ent.getValue();
      if (kwlt != null) {
        out.writeInt(1);
        out.writeString(ent.getKey());
        kwlt.writeToParcel(out,uSecRealtime);
      }
 else {
        out.writeInt(0);
      }
    }
    out.writeInt(mWakeupReasonStats.size());
    for (    Map.Entry<String,SamplingTimer> ent : mWakeupReasonStats.entrySet()) {
      SamplingTimer timer=ent.getValue();
      if (timer != null) {
        out.writeInt(1);
        out.writeString(ent.getKey());
        timer.writeToParcel(out,uSecRealtime);
      }
 else {
        out.writeInt(0);
      }
    }
  }
 else {
    out.writeInt(0);
  }
  out.writeInt(sNumSpeedSteps);
  if (inclUids) {
    int size=mUidStats.size();
    out.writeInt(size);
    for (int i=0; i < size; i++) {
      out.writeInt(mUidStats.keyAt(i));
      Uid uid=mUidStats.valueAt(i);
      uid.writeToParcelLocked(out,uSecRealtime);
    }
  }
 else {
    out.writeInt(0);
  }
}","@SuppressWarnings(""String_Node_Str"") void writeToParcelLocked(Parcel out,boolean inclUids,int flags){
  pullPendingStateUpdatesLocked();
  long startClockTime=getStartClockTime();
  final long uSecUptime=SystemClock.uptimeMillis() * 1000;
  final long uSecRealtime=SystemClock.elapsedRealtime() * 1000;
  final long batteryRealtime=mOnBatteryTimeBase.getRealtime(uSecRealtime);
  final long batteryScreenOffRealtime=mOnBatteryScreenOffTimeBase.getRealtime(uSecRealtime);
  out.writeInt(MAGIC);
  writeHistory(out,true,false);
  out.writeInt(mStartCount);
  out.writeLong(startClockTime);
  out.writeString(mStartPlatformVersion);
  out.writeString(mEndPlatformVersion);
  out.writeLong(mUptime);
  out.writeLong(mUptimeStart);
  out.writeLong(mRealtime);
  out.writeLong(mRealtimeStart);
  out.writeInt(mOnBattery ? 1 : 0);
  mOnBatteryTimeBase.writeToParcel(out,uSecUptime,uSecRealtime);
  mOnBatteryScreenOffTimeBase.writeToParcel(out,uSecUptime,uSecRealtime);
  mScreenOnTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i].writeToParcel(out,uSecRealtime);
  }
  mInteractiveTimer.writeToParcel(out,uSecRealtime);
  mPowerSaveModeEnabledTimer.writeToParcel(out,uSecRealtime);
  mDeviceIdleModeEnabledTimer.writeToParcel(out,uSecRealtime);
  mDeviceIdlingTimer.writeToParcel(out,uSecRealtime);
  mPhoneOnTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i].writeToParcel(out,uSecRealtime);
  }
  mPhoneSignalScanningTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
    mNetworkByteActivityCounters[i].writeToParcel(out);
    mNetworkPacketActivityCounters[i].writeToParcel(out);
  }
  mMobileRadioActiveTimer.writeToParcel(out,uSecRealtime);
  mMobileRadioActivePerAppTimer.writeToParcel(out,uSecRealtime);
  mMobileRadioActiveAdjustedTime.writeToParcel(out);
  mMobileRadioActiveUnknownTime.writeToParcel(out);
  mMobileRadioActiveUnknownCount.writeToParcel(out);
  mWifiOnTimer.writeToParcel(out,uSecRealtime);
  mGlobalWifiRunningTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_WIFI_STATES; i++) {
    mWifiStateTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_WIFI_SUPPL_STATES; i++) {
    mWifiSupplStateTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_WIFI_SIGNAL_STRENGTH_BINS; i++) {
    mWifiSignalStrengthsTimer[i].writeToParcel(out,uSecRealtime);
  }
  mBluetoothOnTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_BLUETOOTH_STATES; i++) {
    mBluetoothStateTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mBluetoothActivityCounters[i].writeToParcel(out);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mWifiActivityCounters[i].writeToParcel(out);
  }
  out.writeInt(mHasWifiEnergyReporting ? 1 : 0);
  out.writeInt(mHasBluetoothEnergyReporting ? 1 : 0);
  out.writeInt(mNumConnectivityChange);
  out.writeInt(mLoadedNumConnectivityChange);
  out.writeInt(mUnpluggedNumConnectivityChange);
  mFlashlightOnTimer.writeToParcel(out,uSecRealtime);
  out.writeInt(mDischargeUnplugLevel);
  out.writeInt(mDischargePlugLevel);
  out.writeInt(mDischargeCurrentLevel);
  out.writeInt(mCurrentBatteryLevel);
  out.writeInt(mLowDischargeAmountSinceCharge);
  out.writeInt(mHighDischargeAmountSinceCharge);
  out.writeInt(mDischargeAmountScreenOn);
  out.writeInt(mDischargeAmountScreenOnSinceCharge);
  out.writeInt(mDischargeAmountScreenOff);
  out.writeInt(mDischargeAmountScreenOffSinceCharge);
  mDischargeStepTracker.writeToParcel(out);
  mChargeStepTracker.writeToParcel(out);
  out.writeLong(mLastWriteTime);
  out.writeInt(getBluetoothPingCount());
  if (inclUids) {
    out.writeInt(mKernelWakelockStats.size());
    for (    Map.Entry<String,SamplingTimer> ent : mKernelWakelockStats.entrySet()) {
      SamplingTimer kwlt=ent.getValue();
      if (kwlt != null) {
        out.writeInt(1);
        out.writeString(ent.getKey());
        kwlt.writeToParcel(out,uSecRealtime);
      }
 else {
        out.writeInt(0);
      }
    }
    out.writeInt(mWakeupReasonStats.size());
    for (    Map.Entry<String,SamplingTimer> ent : mWakeupReasonStats.entrySet()) {
      SamplingTimer timer=ent.getValue();
      if (timer != null) {
        out.writeInt(1);
        out.writeString(ent.getKey());
        timer.writeToParcel(out,uSecRealtime);
      }
 else {
        out.writeInt(0);
      }
    }
  }
 else {
    out.writeInt(0);
  }
  out.writeInt(sNumSpeedSteps);
  if (inclUids) {
    int size=mUidStats.size();
    out.writeInt(size);
    for (int i=0; i < size; i++) {
      out.writeInt(mUidStats.keyAt(i));
      Uid uid=mUidStats.valueAt(i);
      uid.writeToParcelLocked(out,uSecRealtime);
    }
  }
 else {
    out.writeInt(0);
  }
}",0.9896575961441912
195335,"/** 
 * Distribute WiFi energy info and network traffic to apps.
 * @param info The energy information from the WiFi controller.
 */
public void updateWifiStateLocked(@Nullable final WifiActivityEnergyInfo info){
  final long elapsedRealtimeMs=SystemClock.elapsedRealtime();
  NetworkStats delta=null;
  try {
    if (!ArrayUtils.isEmpty(mWifiIfaces)) {
      delta=getNetworkStatsDeltaLocked(mWifiIfaces,mWifiNetworkStats);
    }
  }
 catch (  IOException e) {
    Slog.wtf(TAG,""String_Node_Str"",e);
    return;
  }
  if (!mOnBatteryInternal) {
    return;
  }
  SparseLongArray rxPackets=new SparseLongArray();
  SparseLongArray txPackets=new SparseLongArray();
  long totalTxPackets=0;
  long totalRxPackets=0;
  if (delta != null) {
    final int size=delta.size();
    for (int i=0; i < size; i++) {
      final NetworkStats.Entry entry=delta.getValues(i,mTmpNetworkStatsEntry);
      if (DEBUG_ENERGY) {
        Slog.d(TAG,""String_Node_Str"" + entry.uid + ""String_Node_Str""+ entry.rxBytes+ ""String_Node_Str""+ entry.txBytes+ ""String_Node_Str""+ entry.rxPackets+ ""String_Node_Str""+ entry.txPackets);
      }
      if (entry.rxBytes == 0 || entry.txBytes == 0) {
        continue;
      }
      final Uid u=getUidStatsLocked(mapUid(entry.uid));
      u.noteNetworkActivityLocked(NETWORK_WIFI_RX_DATA,entry.rxBytes,entry.rxPackets);
      u.noteNetworkActivityLocked(NETWORK_WIFI_TX_DATA,entry.txBytes,entry.txPackets);
      rxPackets.put(u.getUid(),entry.rxPackets);
      txPackets.put(u.getUid(),entry.txPackets);
      totalRxPackets+=entry.rxPackets;
      totalTxPackets+=entry.txPackets;
      mNetworkByteActivityCounters[NETWORK_WIFI_RX_DATA].addCountLocked(entry.rxBytes);
      mNetworkByteActivityCounters[NETWORK_WIFI_TX_DATA].addCountLocked(entry.txBytes);
      mNetworkPacketActivityCounters[NETWORK_WIFI_RX_DATA].addCountLocked(entry.rxPackets);
      mNetworkPacketActivityCounters[NETWORK_WIFI_TX_DATA].addCountLocked(entry.txPackets);
    }
  }
  if (info != null) {
    final long txTimeMs=info.getControllerTxTimeMillis();
    final long rxTimeMs=info.getControllerRxTimeMillis();
    final long idleTimeMs=info.getControllerIdleTimeMillis();
    final long totalTimeMs=txTimeMs + rxTimeMs + idleTimeMs;
    long leftOverRxTimeMs=rxTimeMs;
    if (DEBUG_ENERGY) {
      Slog.d(TAG,""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + txTimeMs + ""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + rxTimeMs + ""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + idleTimeMs + ""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + totalTimeMs + ""String_Node_Str"");
    }
    long totalWifiLockTimeMs=0;
    long totalScanTimeMs=0;
    final int uidStatsSize=mUidStats.size();
    for (int i=0; i < uidStatsSize; i++) {
      final Uid uid=mUidStats.valueAt(i);
      totalScanTimeMs+=uid.mWifiScanTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
      totalWifiLockTimeMs+=uid.mFullWifiLockTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
    }
    if (DEBUG_ENERGY && totalScanTimeMs > rxTimeMs) {
      Slog.d(TAG,""String_Node_Str"" + totalScanTimeMs + ""String_Node_Str""+ rxTimeMs+ ""String_Node_Str"");
    }
    for (int i=0; i < uidStatsSize; i++) {
      final Uid uid=mUidStats.valueAt(i);
      long scanTimeSinceMarkMs=uid.mWifiScanTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
      if (scanTimeSinceMarkMs > 0) {
        uid.mWifiScanTimer.setMark(elapsedRealtimeMs);
        if (totalScanTimeMs > rxTimeMs) {
          scanTimeSinceMarkMs=(rxTimeMs * scanTimeSinceMarkMs) / totalScanTimeMs;
        }
        if (DEBUG_ENERGY) {
          Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ scanTimeSinceMarkMs+ ""String_Node_Str"");
        }
        uid.noteWifiControllerActivityLocked(CONTROLLER_RX_TIME,scanTimeSinceMarkMs);
        leftOverRxTimeMs-=scanTimeSinceMarkMs;
      }
      final long wifiLockTimeSinceMarkMs=uid.mFullWifiLockTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
      if (wifiLockTimeSinceMarkMs > 0) {
        uid.mFullWifiLockTimer.setMark(elapsedRealtimeMs);
        final long myIdleTimeMs=(wifiLockTimeSinceMarkMs * idleTimeMs) / totalWifiLockTimeMs;
        if (DEBUG_ENERGY) {
          Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ myIdleTimeMs+ ""String_Node_Str"");
        }
        uid.noteWifiControllerActivityLocked(CONTROLLER_IDLE_TIME,myIdleTimeMs);
      }
    }
    if (DEBUG_ENERGY) {
      Slog.d(TAG,""String_Node_Str"" + leftOverRxTimeMs + ""String_Node_Str"");
    }
    for (int i=0; i < txPackets.size(); i++) {
      final Uid uid=getUidStatsLocked(txPackets.keyAt(i));
      final long myTxTimeMs=(txPackets.valueAt(i) * txTimeMs) / totalTxPackets;
      if (DEBUG_ENERGY) {
        Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ myTxTimeMs+ ""String_Node_Str"");
      }
      uid.noteWifiControllerActivityLocked(CONTROLLER_TX_TIME,myTxTimeMs);
    }
    for (int i=0; i < rxPackets.size(); i++) {
      final Uid uid=getUidStatsLocked(rxPackets.keyAt(i));
      final long myRxTimeMs=(rxPackets.valueAt(i) * leftOverRxTimeMs) / totalRxPackets;
      if (DEBUG_ENERGY) {
        Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ myRxTimeMs+ ""String_Node_Str"");
      }
      uid.noteWifiControllerActivityLocked(CONTROLLER_RX_TIME,myRxTimeMs);
    }
    mWifiActivityCounters[CONTROLLER_RX_TIME].addCountLocked(info.getControllerRxTimeMillis());
    mWifiActivityCounters[CONTROLLER_TX_TIME].addCountLocked(info.getControllerTxTimeMillis());
    mWifiActivityCounters[CONTROLLER_IDLE_TIME].addCountLocked(info.getControllerIdleTimeMillis());
    final double powerDrainMaMs;
    if (mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_OPERATING_VOLTAGE) == 0) {
      powerDrainMaMs=0.0;
    }
 else {
      powerDrainMaMs=info.getControllerEnergyUsed() / mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_OPERATING_VOLTAGE);
    }
    mWifiActivityCounters[CONTROLLER_POWER_DRAIN].addCountLocked((long)powerDrainMaMs);
  }
}","/** 
 * Distribute WiFi energy info and network traffic to apps.
 * @param info The energy information from the WiFi controller.
 */
public void updateWifiStateLocked(@Nullable final WifiActivityEnergyInfo info){
  final long elapsedRealtimeMs=SystemClock.elapsedRealtime();
  NetworkStats delta=null;
  try {
    if (!ArrayUtils.isEmpty(mWifiIfaces)) {
      delta=getNetworkStatsDeltaLocked(mWifiIfaces,mWifiNetworkStats);
    }
  }
 catch (  IOException e) {
    Slog.wtf(TAG,""String_Node_Str"",e);
    return;
  }
  if (!mOnBatteryInternal) {
    return;
  }
  SparseLongArray rxPackets=new SparseLongArray();
  SparseLongArray txPackets=new SparseLongArray();
  long totalTxPackets=0;
  long totalRxPackets=0;
  if (delta != null) {
    final int size=delta.size();
    for (int i=0; i < size; i++) {
      final NetworkStats.Entry entry=delta.getValues(i,mTmpNetworkStatsEntry);
      if (DEBUG_ENERGY) {
        Slog.d(TAG,""String_Node_Str"" + entry.uid + ""String_Node_Str""+ entry.rxBytes+ ""String_Node_Str""+ entry.txBytes+ ""String_Node_Str""+ entry.rxPackets+ ""String_Node_Str""+ entry.txPackets);
      }
      if (entry.rxBytes == 0 || entry.txBytes == 0) {
        continue;
      }
      final Uid u=getUidStatsLocked(mapUid(entry.uid));
      u.noteNetworkActivityLocked(NETWORK_WIFI_RX_DATA,entry.rxBytes,entry.rxPackets);
      u.noteNetworkActivityLocked(NETWORK_WIFI_TX_DATA,entry.txBytes,entry.txPackets);
      rxPackets.put(u.getUid(),entry.rxPackets);
      txPackets.put(u.getUid(),entry.txPackets);
      totalRxPackets+=entry.rxPackets;
      totalTxPackets+=entry.txPackets;
      mNetworkByteActivityCounters[NETWORK_WIFI_RX_DATA].addCountLocked(entry.rxBytes);
      mNetworkByteActivityCounters[NETWORK_WIFI_TX_DATA].addCountLocked(entry.txBytes);
      mNetworkPacketActivityCounters[NETWORK_WIFI_RX_DATA].addCountLocked(entry.rxPackets);
      mNetworkPacketActivityCounters[NETWORK_WIFI_TX_DATA].addCountLocked(entry.txPackets);
    }
  }
  if (info != null) {
    mHasWifiEnergyReporting=true;
    final long txTimeMs=info.getControllerTxTimeMillis();
    final long rxTimeMs=info.getControllerRxTimeMillis();
    final long idleTimeMs=info.getControllerIdleTimeMillis();
    final long totalTimeMs=txTimeMs + rxTimeMs + idleTimeMs;
    long leftOverRxTimeMs=rxTimeMs;
    if (DEBUG_ENERGY) {
      Slog.d(TAG,""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + txTimeMs + ""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + rxTimeMs + ""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + idleTimeMs + ""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + totalTimeMs + ""String_Node_Str"");
    }
    long totalWifiLockTimeMs=0;
    long totalScanTimeMs=0;
    final int uidStatsSize=mUidStats.size();
    for (int i=0; i < uidStatsSize; i++) {
      final Uid uid=mUidStats.valueAt(i);
      totalScanTimeMs+=uid.mWifiScanTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
      totalWifiLockTimeMs+=uid.mFullWifiLockTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
    }
    if (DEBUG_ENERGY && totalScanTimeMs > rxTimeMs) {
      Slog.d(TAG,""String_Node_Str"" + totalScanTimeMs + ""String_Node_Str""+ rxTimeMs+ ""String_Node_Str"");
    }
    for (int i=0; i < uidStatsSize; i++) {
      final Uid uid=mUidStats.valueAt(i);
      long scanTimeSinceMarkMs=uid.mWifiScanTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
      if (scanTimeSinceMarkMs > 0) {
        uid.mWifiScanTimer.setMark(elapsedRealtimeMs);
        if (totalScanTimeMs > rxTimeMs) {
          scanTimeSinceMarkMs=(rxTimeMs * scanTimeSinceMarkMs) / totalScanTimeMs;
        }
        if (DEBUG_ENERGY) {
          Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ scanTimeSinceMarkMs+ ""String_Node_Str"");
        }
        uid.noteWifiControllerActivityLocked(CONTROLLER_RX_TIME,scanTimeSinceMarkMs);
        leftOverRxTimeMs-=scanTimeSinceMarkMs;
      }
      final long wifiLockTimeSinceMarkMs=uid.mFullWifiLockTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
      if (wifiLockTimeSinceMarkMs > 0) {
        uid.mFullWifiLockTimer.setMark(elapsedRealtimeMs);
        final long myIdleTimeMs=(wifiLockTimeSinceMarkMs * idleTimeMs) / totalWifiLockTimeMs;
        if (DEBUG_ENERGY) {
          Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ myIdleTimeMs+ ""String_Node_Str"");
        }
        uid.noteWifiControllerActivityLocked(CONTROLLER_IDLE_TIME,myIdleTimeMs);
      }
    }
    if (DEBUG_ENERGY) {
      Slog.d(TAG,""String_Node_Str"" + leftOverRxTimeMs + ""String_Node_Str"");
    }
    for (int i=0; i < txPackets.size(); i++) {
      final Uid uid=getUidStatsLocked(txPackets.keyAt(i));
      final long myTxTimeMs=(txPackets.valueAt(i) * txTimeMs) / totalTxPackets;
      if (DEBUG_ENERGY) {
        Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ myTxTimeMs+ ""String_Node_Str"");
      }
      uid.noteWifiControllerActivityLocked(CONTROLLER_TX_TIME,myTxTimeMs);
    }
    for (int i=0; i < rxPackets.size(); i++) {
      final Uid uid=getUidStatsLocked(rxPackets.keyAt(i));
      final long myRxTimeMs=(rxPackets.valueAt(i) * leftOverRxTimeMs) / totalRxPackets;
      if (DEBUG_ENERGY) {
        Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ myRxTimeMs+ ""String_Node_Str"");
      }
      uid.noteWifiControllerActivityLocked(CONTROLLER_RX_TIME,myRxTimeMs);
    }
    mWifiActivityCounters[CONTROLLER_RX_TIME].addCountLocked(info.getControllerRxTimeMillis());
    mWifiActivityCounters[CONTROLLER_TX_TIME].addCountLocked(info.getControllerTxTimeMillis());
    mWifiActivityCounters[CONTROLLER_IDLE_TIME].addCountLocked(info.getControllerIdleTimeMillis());
    final double powerDrainMaMs;
    if (mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_OPERATING_VOLTAGE) == 0) {
      powerDrainMaMs=0.0;
    }
 else {
      powerDrainMaMs=info.getControllerEnergyUsed() / mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_OPERATING_VOLTAGE);
    }
    mWifiActivityCounters[CONTROLLER_POWER_DRAIN].addCountLocked((long)powerDrainMaMs);
  }
}",0.9972080801445228
195336,"void readFromParcelLocked(Parcel in){
  int magic=in.readInt();
  if (magic != MAGIC) {
    throw new ParcelFormatException(""String_Node_Str"" + Integer.toHexString(magic));
  }
  readHistory(in,false);
  mStartCount=in.readInt();
  mStartClockTime=in.readLong();
  mStartPlatformVersion=in.readString();
  mEndPlatformVersion=in.readString();
  mUptime=in.readLong();
  mUptimeStart=in.readLong();
  mRealtime=in.readLong();
  mRealtimeStart=in.readLong();
  mOnBattery=in.readInt() != 0;
  mOnBatteryInternal=false;
  mOnBatteryTimeBase.readFromParcel(in);
  mOnBatteryScreenOffTimeBase.readFromParcel(in);
  mScreenState=Display.STATE_UNKNOWN;
  mScreenOnTimer=new StopwatchTimer(null,-1,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i]=new StopwatchTimer(null,-100 - i,null,mOnBatteryTimeBase,in);
  }
  mInteractive=false;
  mInteractiveTimer=new StopwatchTimer(null,-10,null,mOnBatteryTimeBase,in);
  mPhoneOn=false;
  mPowerSaveModeEnabledTimer=new StopwatchTimer(null,-2,null,mOnBatteryTimeBase,in);
  mDeviceIdleModeEnabledTimer=new StopwatchTimer(null,-11,null,mOnBatteryTimeBase,in);
  mDeviceIdlingTimer=new StopwatchTimer(null,-12,null,mOnBatteryTimeBase,in);
  mPhoneOnTimer=new StopwatchTimer(null,-3,null,mOnBatteryTimeBase,in);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i]=new StopwatchTimer(null,-200 - i,null,mOnBatteryTimeBase,in);
  }
  mPhoneSignalScanningTimer=new StopwatchTimer(null,-200 + 1,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i]=new StopwatchTimer(null,-300 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
    mNetworkByteActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
    mNetworkPacketActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
  }
  mMobileRadioPowerState=DataConnectionRealTimeInfo.DC_POWER_STATE_LOW;
  mMobileRadioActiveTimer=new StopwatchTimer(null,-400,null,mOnBatteryTimeBase,in);
  mMobileRadioActivePerAppTimer=new StopwatchTimer(null,-401,null,mOnBatteryTimeBase,in);
  mMobileRadioActiveAdjustedTime=new LongSamplingCounter(mOnBatteryTimeBase,in);
  mMobileRadioActiveUnknownTime=new LongSamplingCounter(mOnBatteryTimeBase,in);
  mMobileRadioActiveUnknownCount=new LongSamplingCounter(mOnBatteryTimeBase,in);
  mWifiOn=false;
  mWifiOnTimer=new StopwatchTimer(null,-4,null,mOnBatteryTimeBase,in);
  mGlobalWifiRunning=false;
  mGlobalWifiRunningTimer=new StopwatchTimer(null,-5,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_WIFI_STATES; i++) {
    mWifiStateTimer[i]=new StopwatchTimer(null,-600 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_WIFI_SUPPL_STATES; i++) {
    mWifiSupplStateTimer[i]=new StopwatchTimer(null,-700 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_WIFI_SIGNAL_STRENGTH_BINS; i++) {
    mWifiSignalStrengthsTimer[i]=new StopwatchTimer(null,-800 - i,null,mOnBatteryTimeBase,in);
  }
  mBluetoothOn=false;
  mBluetoothOnTimer=new StopwatchTimer(null,-6,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_BLUETOOTH_STATES; i++) {
    mBluetoothStateTimer[i]=new StopwatchTimer(null,-500 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mBluetoothActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mWifiActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
  }
  mNumConnectivityChange=in.readInt();
  mLoadedNumConnectivityChange=in.readInt();
  mUnpluggedNumConnectivityChange=in.readInt();
  mAudioOnNesting=0;
  mAudioOnTimer=new StopwatchTimer(null,-7,null,mOnBatteryTimeBase);
  mVideoOnNesting=0;
  mVideoOnTimer=new StopwatchTimer(null,-8,null,mOnBatteryTimeBase);
  mFlashlightOn=false;
  mFlashlightOnTimer=new StopwatchTimer(null,-9,null,mOnBatteryTimeBase,in);
  mDischargeUnplugLevel=in.readInt();
  mDischargePlugLevel=in.readInt();
  mDischargeCurrentLevel=in.readInt();
  mCurrentBatteryLevel=in.readInt();
  mLowDischargeAmountSinceCharge=in.readInt();
  mHighDischargeAmountSinceCharge=in.readInt();
  mDischargeAmountScreenOn=in.readInt();
  mDischargeAmountScreenOnSinceCharge=in.readInt();
  mDischargeAmountScreenOff=in.readInt();
  mDischargeAmountScreenOffSinceCharge=in.readInt();
  mDischargeStepTracker.readFromParcel(in);
  mChargeStepTracker.readFromParcel(in);
  mLastWriteTime=in.readLong();
  mBluetoothPingCount=in.readInt();
  mBluetoothPingStart=-1;
  mKernelWakelockStats.clear();
  int NKW=in.readInt();
  for (int ikw=0; ikw < NKW; ikw++) {
    if (in.readInt() != 0) {
      String wakelockName=in.readString();
      SamplingTimer kwlt=new SamplingTimer(mOnBatteryScreenOffTimeBase,in);
      mKernelWakelockStats.put(wakelockName,kwlt);
    }
  }
  mWakeupReasonStats.clear();
  int NWR=in.readInt();
  for (int iwr=0; iwr < NWR; iwr++) {
    if (in.readInt() != 0) {
      String reasonName=in.readString();
      SamplingTimer timer=new SamplingTimer(mOnBatteryTimeBase,in);
      mWakeupReasonStats.put(reasonName,timer);
    }
  }
  mPartialTimers.clear();
  mFullTimers.clear();
  mWindowTimers.clear();
  mWifiRunningTimers.clear();
  mFullWifiLockTimers.clear();
  mWifiScanTimers.clear();
  mWifiBatchedScanTimers.clear();
  mWifiMulticastTimers.clear();
  mAudioTurnedOnTimers.clear();
  mVideoTurnedOnTimers.clear();
  sNumSpeedSteps=in.readInt();
  int numUids=in.readInt();
  mUidStats.clear();
  for (int i=0; i < numUids; i++) {
    int uid=in.readInt();
    Uid u=new Uid(uid);
    u.readFromParcelLocked(mOnBatteryTimeBase,mOnBatteryScreenOffTimeBase,in);
    mUidStats.append(uid,u);
  }
}","void readFromParcelLocked(Parcel in){
  int magic=in.readInt();
  if (magic != MAGIC) {
    throw new ParcelFormatException(""String_Node_Str"" + Integer.toHexString(magic));
  }
  readHistory(in,false);
  mStartCount=in.readInt();
  mStartClockTime=in.readLong();
  mStartPlatformVersion=in.readString();
  mEndPlatformVersion=in.readString();
  mUptime=in.readLong();
  mUptimeStart=in.readLong();
  mRealtime=in.readLong();
  mRealtimeStart=in.readLong();
  mOnBattery=in.readInt() != 0;
  mOnBatteryInternal=false;
  mOnBatteryTimeBase.readFromParcel(in);
  mOnBatteryScreenOffTimeBase.readFromParcel(in);
  mScreenState=Display.STATE_UNKNOWN;
  mScreenOnTimer=new StopwatchTimer(null,-1,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i]=new StopwatchTimer(null,-100 - i,null,mOnBatteryTimeBase,in);
  }
  mInteractive=false;
  mInteractiveTimer=new StopwatchTimer(null,-10,null,mOnBatteryTimeBase,in);
  mPhoneOn=false;
  mPowerSaveModeEnabledTimer=new StopwatchTimer(null,-2,null,mOnBatteryTimeBase,in);
  mDeviceIdleModeEnabledTimer=new StopwatchTimer(null,-11,null,mOnBatteryTimeBase,in);
  mDeviceIdlingTimer=new StopwatchTimer(null,-12,null,mOnBatteryTimeBase,in);
  mPhoneOnTimer=new StopwatchTimer(null,-3,null,mOnBatteryTimeBase,in);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i]=new StopwatchTimer(null,-200 - i,null,mOnBatteryTimeBase,in);
  }
  mPhoneSignalScanningTimer=new StopwatchTimer(null,-200 + 1,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i]=new StopwatchTimer(null,-300 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
    mNetworkByteActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
    mNetworkPacketActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
  }
  mMobileRadioPowerState=DataConnectionRealTimeInfo.DC_POWER_STATE_LOW;
  mMobileRadioActiveTimer=new StopwatchTimer(null,-400,null,mOnBatteryTimeBase,in);
  mMobileRadioActivePerAppTimer=new StopwatchTimer(null,-401,null,mOnBatteryTimeBase,in);
  mMobileRadioActiveAdjustedTime=new LongSamplingCounter(mOnBatteryTimeBase,in);
  mMobileRadioActiveUnknownTime=new LongSamplingCounter(mOnBatteryTimeBase,in);
  mMobileRadioActiveUnknownCount=new LongSamplingCounter(mOnBatteryTimeBase,in);
  mWifiOn=false;
  mWifiOnTimer=new StopwatchTimer(null,-4,null,mOnBatteryTimeBase,in);
  mGlobalWifiRunning=false;
  mGlobalWifiRunningTimer=new StopwatchTimer(null,-5,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_WIFI_STATES; i++) {
    mWifiStateTimer[i]=new StopwatchTimer(null,-600 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_WIFI_SUPPL_STATES; i++) {
    mWifiSupplStateTimer[i]=new StopwatchTimer(null,-700 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_WIFI_SIGNAL_STRENGTH_BINS; i++) {
    mWifiSignalStrengthsTimer[i]=new StopwatchTimer(null,-800 - i,null,mOnBatteryTimeBase,in);
  }
  mBluetoothOn=false;
  mBluetoothOnTimer=new StopwatchTimer(null,-6,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_BLUETOOTH_STATES; i++) {
    mBluetoothStateTimer[i]=new StopwatchTimer(null,-500 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mBluetoothActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mWifiActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
  }
  mHasWifiEnergyReporting=in.readInt() != 0;
  mHasBluetoothEnergyReporting=in.readInt() != 0;
  mNumConnectivityChange=in.readInt();
  mLoadedNumConnectivityChange=in.readInt();
  mUnpluggedNumConnectivityChange=in.readInt();
  mAudioOnNesting=0;
  mAudioOnTimer=new StopwatchTimer(null,-7,null,mOnBatteryTimeBase);
  mVideoOnNesting=0;
  mVideoOnTimer=new StopwatchTimer(null,-8,null,mOnBatteryTimeBase);
  mFlashlightOn=false;
  mFlashlightOnTimer=new StopwatchTimer(null,-9,null,mOnBatteryTimeBase,in);
  mDischargeUnplugLevel=in.readInt();
  mDischargePlugLevel=in.readInt();
  mDischargeCurrentLevel=in.readInt();
  mCurrentBatteryLevel=in.readInt();
  mLowDischargeAmountSinceCharge=in.readInt();
  mHighDischargeAmountSinceCharge=in.readInt();
  mDischargeAmountScreenOn=in.readInt();
  mDischargeAmountScreenOnSinceCharge=in.readInt();
  mDischargeAmountScreenOff=in.readInt();
  mDischargeAmountScreenOffSinceCharge=in.readInt();
  mDischargeStepTracker.readFromParcel(in);
  mChargeStepTracker.readFromParcel(in);
  mLastWriteTime=in.readLong();
  mBluetoothPingCount=in.readInt();
  mBluetoothPingStart=-1;
  mKernelWakelockStats.clear();
  int NKW=in.readInt();
  for (int ikw=0; ikw < NKW; ikw++) {
    if (in.readInt() != 0) {
      String wakelockName=in.readString();
      SamplingTimer kwlt=new SamplingTimer(mOnBatteryScreenOffTimeBase,in);
      mKernelWakelockStats.put(wakelockName,kwlt);
    }
  }
  mWakeupReasonStats.clear();
  int NWR=in.readInt();
  for (int iwr=0; iwr < NWR; iwr++) {
    if (in.readInt() != 0) {
      String reasonName=in.readString();
      SamplingTimer timer=new SamplingTimer(mOnBatteryTimeBase,in);
      mWakeupReasonStats.put(reasonName,timer);
    }
  }
  mPartialTimers.clear();
  mFullTimers.clear();
  mWindowTimers.clear();
  mWifiRunningTimers.clear();
  mFullWifiLockTimers.clear();
  mWifiScanTimers.clear();
  mWifiBatchedScanTimers.clear();
  mWifiMulticastTimers.clear();
  mAudioTurnedOnTimers.clear();
  mVideoTurnedOnTimers.clear();
  sNumSpeedSteps=in.readInt();
  int numUids=in.readInt();
  mUidStats.clear();
  for (int i=0; i < numUids; i++) {
    int uid=in.readInt();
    Uid u=new Uid(uid);
    u.readFromParcelLocked(mOnBatteryTimeBase,mOnBatteryScreenOffTimeBase,in);
    mUidStats.append(uid,u);
  }
}",0.991848991848992
195337,"/** 
 * Distribute Bluetooth energy info and network traffic to apps.
 * @param info The energy information from the bluetooth controller.
 */
public void updateBluetoothStateLocked(@Nullable final BluetoothActivityEnergyInfo info){
  if (info != null && mOnBatteryInternal && false) {
    mBluetoothActivityCounters[CONTROLLER_RX_TIME].addCountLocked(info.getControllerRxTimeMillis());
    mBluetoothActivityCounters[CONTROLLER_TX_TIME].addCountLocked(info.getControllerTxTimeMillis());
    mBluetoothActivityCounters[CONTROLLER_IDLE_TIME].addCountLocked(info.getControllerIdleTimeMillis());
    mBluetoothActivityCounters[CONTROLLER_POWER_DRAIN].addCountLocked(info.getControllerEnergyUsed());
  }
}","/** 
 * Distribute Bluetooth energy info and network traffic to apps.
 * @param info The energy information from the bluetooth controller.
 */
public void updateBluetoothStateLocked(@Nullable final BluetoothActivityEnergyInfo info){
  if (info != null && mOnBatteryInternal && false) {
    mHasBluetoothEnergyReporting=true;
    mBluetoothActivityCounters[CONTROLLER_RX_TIME].addCountLocked(info.getControllerRxTimeMillis());
    mBluetoothActivityCounters[CONTROLLER_TX_TIME].addCountLocked(info.getControllerTxTimeMillis());
    mBluetoothActivityCounters[CONTROLLER_IDLE_TIME].addCountLocked(info.getControllerIdleTimeMillis());
    mBluetoothActivityCounters[CONTROLLER_POWER_DRAIN].addCountLocked(info.getControllerEnergyUsed());
  }
}",0.9729354614850798
195338,"@Override public void calculateRemaining(BatterySipper app,BatteryStats stats,long rawRealtimeUs,long rawUptimeUs,int statsType){
  final long idleTimeMs=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_IDLE_TIME,statsType);
  final long rxTimeMs=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_RX_TIME,statsType);
  final long txTimeMs=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_TX_TIME,statsType);
  app.wifiRunningTimeMs=idleTimeMs + rxTimeMs + txTimeMs;
  double powerDrain=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_POWER_DRAIN,statsType) / (1000 * 60 * 60);
  if (powerDrain == 0) {
    powerDrain=((idleTimeMs * mIdleCurrentMa) + (txTimeMs * mTxCurrentMa) + (rxTimeMs * mRxCurrentMa)) / (1000 * 60 * 60);
  }
  app.wifiPowerMah=Math.max(0,powerDrain - mTotalAppPowerDrain);
}","@Override public void calculateRemaining(BatterySipper app,BatteryStats stats,long rawRealtimeUs,long rawUptimeUs,int statsType){
  final long idleTimeMs=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_IDLE_TIME,statsType);
  final long rxTimeMs=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_RX_TIME,statsType);
  final long txTimeMs=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_TX_TIME,statsType);
  app.wifiRunningTimeMs=idleTimeMs + rxTimeMs + txTimeMs;
  double powerDrain=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_POWER_DRAIN,statsType) / (1000 * 60 * 60);
  if (powerDrain == 0) {
    powerDrain=((idleTimeMs * mIdleCurrentMa) + (txTimeMs * mTxCurrentMa) + (rxTimeMs * mRxCurrentMa)) / (1000 * 60 * 60);
  }
  app.wifiPowerMah=Math.max(0,powerDrain - mTotalAppPowerDrain);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + BatteryStatsHelper.makemAh(app.wifiPowerMah));
  }
}",0.9427262313860252
195339,"public void refreshStats(int statsType,SparseArray<UserHandle> asUsers,long rawRealtimeUs,long rawUptimeUs){
  getStats();
  mMaxPower=0;
  mMaxRealPower=0;
  mComputedPower=0;
  mTotalPower=0;
  mUsageList.clear();
  mWifiSippers.clear();
  mBluetoothSippers.clear();
  mUserSippers.clear();
  mMobilemsppList.clear();
  if (mStats == null) {
    return;
  }
  if (mCpuPowerCalculator == null) {
    mCpuPowerCalculator=new CpuPowerCalculator(mPowerProfile);
  }
  mCpuPowerCalculator.reset();
  if (mWakelockPowerCalculator == null) {
    mWakelockPowerCalculator=new WakelockPowerCalculator(mPowerProfile);
  }
  mWakelockPowerCalculator.reset();
  if (mMobileRadioPowerCalculator == null) {
    mMobileRadioPowerCalculator=new MobileRadioPowerCalculator(mPowerProfile,mStats);
  }
  mMobileRadioPowerCalculator.reset(mStats);
  if (mWifiPowerCalculator == null) {
    if (checkHasWifiPowerReporting(mContext,mPowerProfile)) {
      mWifiPowerCalculator=new WifiPowerCalculator(mPowerProfile);
    }
 else {
      mWifiPowerCalculator=new WifiPowerEstimator(mPowerProfile);
    }
  }
  mWifiPowerCalculator.reset();
  if (mBluetoothPowerCalculator == null) {
    mBluetoothPowerCalculator=new BluetoothPowerCalculator();
  }
  mBluetoothPowerCalculator.reset();
  if (mSensorPowerCalculator == null) {
    mSensorPowerCalculator=new SensorPowerCalculator(mPowerProfile,(SensorManager)mContext.getSystemService(Context.SENSOR_SERVICE));
  }
  mSensorPowerCalculator.reset();
  mStatsType=statsType;
  mRawUptime=rawUptimeUs;
  mRawRealtime=rawRealtimeUs;
  mBatteryUptime=mStats.getBatteryUptime(rawUptimeUs);
  mBatteryRealtime=mStats.getBatteryRealtime(rawRealtimeUs);
  mTypeBatteryUptime=mStats.computeBatteryUptime(rawUptimeUs,mStatsType);
  mTypeBatteryRealtime=mStats.computeBatteryRealtime(rawRealtimeUs,mStatsType);
  mBatteryTimeRemaining=mStats.computeBatteryTimeRemaining(rawRealtimeUs);
  mChargeTimeRemaining=mStats.computeChargeTimeRemaining(rawRealtimeUs);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + (rawRealtimeUs / 1000) + ""String_Node_Str""+ (rawUptimeUs / 1000));
    Log.d(TAG,""String_Node_Str"" + (mBatteryRealtime / 1000) + ""String_Node_Str""+ (mBatteryUptime / 1000));
    Log.d(TAG,""String_Node_Str"" + (mTypeBatteryRealtime / 1000) + ""String_Node_Str""+ (mTypeBatteryUptime / 1000));
  }
  mMinDrainedPower=(mStats.getLowDischargeAmountSinceCharge() * mPowerProfile.getBatteryCapacity()) / 100;
  mMaxDrainedPower=(mStats.getHighDischargeAmountSinceCharge() * mPowerProfile.getBatteryCapacity()) / 100;
  processAppUsage(asUsers);
  for (int i=0; i < mUsageList.size(); i++) {
    BatterySipper bs=mUsageList.get(i);
    bs.computeMobilemspp();
    if (bs.mobilemspp != 0) {
      mMobilemsppList.add(bs);
    }
  }
  for (int i=0; i < mUserSippers.size(); i++) {
    List<BatterySipper> user=mUserSippers.valueAt(i);
    for (int j=0; j < user.size(); j++) {
      BatterySipper bs=user.get(j);
      bs.computeMobilemspp();
      if (bs.mobilemspp != 0) {
        mMobilemsppList.add(bs);
      }
    }
  }
  Collections.sort(mMobilemsppList,new Comparator<BatterySipper>(){
    @Override public int compare(    BatterySipper lhs,    BatterySipper rhs){
      return Double.compare(rhs.mobilemspp,lhs.mobilemspp);
    }
  }
);
  processMiscUsage();
  Collections.sort(mUsageList);
  if (!mUsageList.isEmpty()) {
    mMaxRealPower=mMaxPower=mUsageList.get(0).totalPowerMah;
    final int usageListCount=mUsageList.size();
    for (int i=0; i < usageListCount; i++) {
      mComputedPower+=mUsageList.get(i).totalPowerMah;
    }
  }
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + makemAh(mComputedPower) + ""String_Node_Str""+ makemAh(mMinDrainedPower)+ ""String_Node_Str""+ makemAh(mMaxDrainedPower));
  }
  mTotalPower=mComputedPower;
  if (mStats.getLowDischargeAmountSinceCharge() > 1) {
    if (mMinDrainedPower > mComputedPower) {
      double amount=mMinDrainedPower - mComputedPower;
      mTotalPower=mMinDrainedPower;
      BatterySipper bs=new BatterySipper(DrainType.UNACCOUNTED,null,amount);
      int index=Collections.binarySearch(mUsageList,bs);
      if (index < 0) {
        index=-(index + 1);
      }
      mUsageList.add(index,bs);
      mMaxPower=Math.max(mMaxPower,amount);
    }
 else     if (mMaxDrainedPower < mComputedPower) {
      double amount=mComputedPower - mMaxDrainedPower;
      BatterySipper bs=new BatterySipper(DrainType.OVERCOUNTED,null,amount);
      int index=Collections.binarySearch(mUsageList,bs);
      if (index < 0) {
        index=-(index + 1);
      }
      mUsageList.add(index,bs);
      mMaxPower=Math.max(mMaxPower,amount);
    }
  }
}","public void refreshStats(int statsType,SparseArray<UserHandle> asUsers,long rawRealtimeUs,long rawUptimeUs){
  getStats();
  mMaxPower=0;
  mMaxRealPower=0;
  mComputedPower=0;
  mTotalPower=0;
  mUsageList.clear();
  mWifiSippers.clear();
  mBluetoothSippers.clear();
  mUserSippers.clear();
  mMobilemsppList.clear();
  if (mStats == null) {
    return;
  }
  if (mCpuPowerCalculator == null) {
    mCpuPowerCalculator=new CpuPowerCalculator(mPowerProfile);
  }
  mCpuPowerCalculator.reset();
  if (mWakelockPowerCalculator == null) {
    mWakelockPowerCalculator=new WakelockPowerCalculator(mPowerProfile);
  }
  mWakelockPowerCalculator.reset();
  if (mMobileRadioPowerCalculator == null) {
    mMobileRadioPowerCalculator=new MobileRadioPowerCalculator(mPowerProfile,mStats);
  }
  mMobileRadioPowerCalculator.reset(mStats);
  if (mWifiPowerCalculator == null) {
    if (checkHasWifiPowerReporting(mStats,mPowerProfile)) {
      mWifiPowerCalculator=new WifiPowerCalculator(mPowerProfile);
    }
 else {
      mWifiPowerCalculator=new WifiPowerEstimator(mPowerProfile);
    }
  }
  mWifiPowerCalculator.reset();
  if (mBluetoothPowerCalculator == null) {
    mBluetoothPowerCalculator=new BluetoothPowerCalculator();
  }
  mBluetoothPowerCalculator.reset();
  if (mSensorPowerCalculator == null) {
    mSensorPowerCalculator=new SensorPowerCalculator(mPowerProfile,(SensorManager)mContext.getSystemService(Context.SENSOR_SERVICE));
  }
  mSensorPowerCalculator.reset();
  mStatsType=statsType;
  mRawUptime=rawUptimeUs;
  mRawRealtime=rawRealtimeUs;
  mBatteryUptime=mStats.getBatteryUptime(rawUptimeUs);
  mBatteryRealtime=mStats.getBatteryRealtime(rawRealtimeUs);
  mTypeBatteryUptime=mStats.computeBatteryUptime(rawUptimeUs,mStatsType);
  mTypeBatteryRealtime=mStats.computeBatteryRealtime(rawRealtimeUs,mStatsType);
  mBatteryTimeRemaining=mStats.computeBatteryTimeRemaining(rawRealtimeUs);
  mChargeTimeRemaining=mStats.computeChargeTimeRemaining(rawRealtimeUs);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + (rawRealtimeUs / 1000) + ""String_Node_Str""+ (rawUptimeUs / 1000));
    Log.d(TAG,""String_Node_Str"" + (mBatteryRealtime / 1000) + ""String_Node_Str""+ (mBatteryUptime / 1000));
    Log.d(TAG,""String_Node_Str"" + (mTypeBatteryRealtime / 1000) + ""String_Node_Str""+ (mTypeBatteryUptime / 1000));
  }
  mMinDrainedPower=(mStats.getLowDischargeAmountSinceCharge() * mPowerProfile.getBatteryCapacity()) / 100;
  mMaxDrainedPower=(mStats.getHighDischargeAmountSinceCharge() * mPowerProfile.getBatteryCapacity()) / 100;
  processAppUsage(asUsers);
  for (int i=0; i < mUsageList.size(); i++) {
    BatterySipper bs=mUsageList.get(i);
    bs.computeMobilemspp();
    if (bs.mobilemspp != 0) {
      mMobilemsppList.add(bs);
    }
  }
  for (int i=0; i < mUserSippers.size(); i++) {
    List<BatterySipper> user=mUserSippers.valueAt(i);
    for (int j=0; j < user.size(); j++) {
      BatterySipper bs=user.get(j);
      bs.computeMobilemspp();
      if (bs.mobilemspp != 0) {
        mMobilemsppList.add(bs);
      }
    }
  }
  Collections.sort(mMobilemsppList,new Comparator<BatterySipper>(){
    @Override public int compare(    BatterySipper lhs,    BatterySipper rhs){
      return Double.compare(rhs.mobilemspp,lhs.mobilemspp);
    }
  }
);
  processMiscUsage();
  Collections.sort(mUsageList);
  if (!mUsageList.isEmpty()) {
    mMaxRealPower=mMaxPower=mUsageList.get(0).totalPowerMah;
    final int usageListCount=mUsageList.size();
    for (int i=0; i < usageListCount; i++) {
      mComputedPower+=mUsageList.get(i).totalPowerMah;
    }
  }
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + makemAh(mComputedPower) + ""String_Node_Str""+ makemAh(mMinDrainedPower)+ ""String_Node_Str""+ makemAh(mMaxDrainedPower));
  }
  mTotalPower=mComputedPower;
  if (mStats.getLowDischargeAmountSinceCharge() > 1) {
    if (mMinDrainedPower > mComputedPower) {
      double amount=mMinDrainedPower - mComputedPower;
      mTotalPower=mMinDrainedPower;
      BatterySipper bs=new BatterySipper(DrainType.UNACCOUNTED,null,amount);
      int index=Collections.binarySearch(mUsageList,bs);
      if (index < 0) {
        index=-(index + 1);
      }
      mUsageList.add(index,bs);
      mMaxPower=Math.max(mMaxPower,amount);
    }
 else     if (mMaxDrainedPower < mComputedPower) {
      double amount=mComputedPower - mMaxDrainedPower;
      BatterySipper bs=new BatterySipper(DrainType.OVERCOUNTED,null,amount);
      int index=Collections.binarySearch(mUsageList,bs);
      if (index < 0) {
        index=-(index + 1);
      }
      mUsageList.add(index,bs);
      mMaxPower=Math.max(mMaxPower,amount);
    }
  }
}",0.9986998916576382
195340,"public static boolean checkHasWifiPowerReporting(Context context,PowerProfile profile){
  WifiManager manager=context.getSystemService(WifiManager.class);
  if (manager.isEnhancedPowerReportingSupported()) {
    if (profile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_IDLE) != 0 && profile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_RX) != 0 && profile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_TX) != 0) {
      return true;
    }
  }
  return false;
}","public static boolean checkHasWifiPowerReporting(BatteryStats stats,PowerProfile profile){
  return stats.hasWifiActivityReporting() && profile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_IDLE) != 0 && profile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_RX) != 0 && profile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_TX) != 0;
}",0.7037484885126964
195341,"@SuppressWarnings(""String_Node_Str"") void writeToParcelLocked(Parcel out,boolean inclUids,int flags){
  pullPendingStateUpdatesLocked();
  long startClockTime=getStartClockTime();
  final long uSecUptime=SystemClock.uptimeMillis() * 1000;
  final long uSecRealtime=SystemClock.elapsedRealtime() * 1000;
  final long batteryRealtime=mOnBatteryTimeBase.getRealtime(uSecRealtime);
  final long batteryScreenOffRealtime=mOnBatteryScreenOffTimeBase.getRealtime(uSecRealtime);
  out.writeInt(MAGIC);
  writeHistory(out,true,false);
  out.writeInt(mStartCount);
  out.writeLong(startClockTime);
  out.writeString(mStartPlatformVersion);
  out.writeString(mEndPlatformVersion);
  out.writeLong(mUptime);
  out.writeLong(mUptimeStart);
  out.writeLong(mRealtime);
  out.writeLong(mRealtimeStart);
  out.writeInt(mOnBattery ? 1 : 0);
  mOnBatteryTimeBase.writeToParcel(out,uSecUptime,uSecRealtime);
  mOnBatteryScreenOffTimeBase.writeToParcel(out,uSecUptime,uSecRealtime);
  mScreenOnTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i].writeToParcel(out,uSecRealtime);
  }
  mInteractiveTimer.writeToParcel(out,uSecRealtime);
  mPowerSaveModeEnabledTimer.writeToParcel(out,uSecRealtime);
  mDeviceIdleModeEnabledTimer.writeToParcel(out,uSecRealtime);
  mDeviceIdlingTimer.writeToParcel(out,uSecRealtime);
  mPhoneOnTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i].writeToParcel(out,uSecRealtime);
  }
  mPhoneSignalScanningTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
    mNetworkByteActivityCounters[i].writeToParcel(out);
    mNetworkPacketActivityCounters[i].writeToParcel(out);
  }
  mMobileRadioActiveTimer.writeToParcel(out,uSecRealtime);
  mMobileRadioActivePerAppTimer.writeToParcel(out,uSecRealtime);
  mMobileRadioActiveAdjustedTime.writeToParcel(out);
  mMobileRadioActiveUnknownTime.writeToParcel(out);
  mMobileRadioActiveUnknownCount.writeToParcel(out);
  mWifiOnTimer.writeToParcel(out,uSecRealtime);
  mGlobalWifiRunningTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_WIFI_STATES; i++) {
    mWifiStateTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_WIFI_SUPPL_STATES; i++) {
    mWifiSupplStateTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_WIFI_SIGNAL_STRENGTH_BINS; i++) {
    mWifiSignalStrengthsTimer[i].writeToParcel(out,uSecRealtime);
  }
  mBluetoothOnTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_BLUETOOTH_STATES; i++) {
    mBluetoothStateTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mBluetoothActivityCounters[i].writeToParcel(out);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mWifiActivityCounters[i].writeToParcel(out);
  }
  out.writeInt(mNumConnectivityChange);
  out.writeInt(mLoadedNumConnectivityChange);
  out.writeInt(mUnpluggedNumConnectivityChange);
  mFlashlightOnTimer.writeToParcel(out,uSecRealtime);
  out.writeInt(mDischargeUnplugLevel);
  out.writeInt(mDischargePlugLevel);
  out.writeInt(mDischargeCurrentLevel);
  out.writeInt(mCurrentBatteryLevel);
  out.writeInt(mLowDischargeAmountSinceCharge);
  out.writeInt(mHighDischargeAmountSinceCharge);
  out.writeInt(mDischargeAmountScreenOn);
  out.writeInt(mDischargeAmountScreenOnSinceCharge);
  out.writeInt(mDischargeAmountScreenOff);
  out.writeInt(mDischargeAmountScreenOffSinceCharge);
  mDischargeStepTracker.writeToParcel(out);
  mChargeStepTracker.writeToParcel(out);
  out.writeLong(mLastWriteTime);
  out.writeInt(getBluetoothPingCount());
  if (inclUids) {
    out.writeInt(mKernelWakelockStats.size());
    for (    Map.Entry<String,SamplingTimer> ent : mKernelWakelockStats.entrySet()) {
      SamplingTimer kwlt=ent.getValue();
      if (kwlt != null) {
        out.writeInt(1);
        out.writeString(ent.getKey());
        kwlt.writeToParcel(out,uSecRealtime);
      }
 else {
        out.writeInt(0);
      }
    }
    out.writeInt(mWakeupReasonStats.size());
    for (    Map.Entry<String,SamplingTimer> ent : mWakeupReasonStats.entrySet()) {
      SamplingTimer timer=ent.getValue();
      if (timer != null) {
        out.writeInt(1);
        out.writeString(ent.getKey());
        timer.writeToParcel(out,uSecRealtime);
      }
 else {
        out.writeInt(0);
      }
    }
  }
 else {
    out.writeInt(0);
  }
  out.writeInt(sNumSpeedSteps);
  if (inclUids) {
    int size=mUidStats.size();
    out.writeInt(size);
    for (int i=0; i < size; i++) {
      out.writeInt(mUidStats.keyAt(i));
      Uid uid=mUidStats.valueAt(i);
      uid.writeToParcelLocked(out,uSecRealtime);
    }
  }
 else {
    out.writeInt(0);
  }
}","@SuppressWarnings(""String_Node_Str"") void writeToParcelLocked(Parcel out,boolean inclUids,int flags){
  pullPendingStateUpdatesLocked();
  long startClockTime=getStartClockTime();
  final long uSecUptime=SystemClock.uptimeMillis() * 1000;
  final long uSecRealtime=SystemClock.elapsedRealtime() * 1000;
  final long batteryRealtime=mOnBatteryTimeBase.getRealtime(uSecRealtime);
  final long batteryScreenOffRealtime=mOnBatteryScreenOffTimeBase.getRealtime(uSecRealtime);
  out.writeInt(MAGIC);
  writeHistory(out,true,false);
  out.writeInt(mStartCount);
  out.writeLong(startClockTime);
  out.writeString(mStartPlatformVersion);
  out.writeString(mEndPlatformVersion);
  out.writeLong(mUptime);
  out.writeLong(mUptimeStart);
  out.writeLong(mRealtime);
  out.writeLong(mRealtimeStart);
  out.writeInt(mOnBattery ? 1 : 0);
  mOnBatteryTimeBase.writeToParcel(out,uSecUptime,uSecRealtime);
  mOnBatteryScreenOffTimeBase.writeToParcel(out,uSecUptime,uSecRealtime);
  mScreenOnTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i].writeToParcel(out,uSecRealtime);
  }
  mInteractiveTimer.writeToParcel(out,uSecRealtime);
  mPowerSaveModeEnabledTimer.writeToParcel(out,uSecRealtime);
  mDeviceIdleModeEnabledTimer.writeToParcel(out,uSecRealtime);
  mDeviceIdlingTimer.writeToParcel(out,uSecRealtime);
  mPhoneOnTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i].writeToParcel(out,uSecRealtime);
  }
  mPhoneSignalScanningTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
    mNetworkByteActivityCounters[i].writeToParcel(out);
    mNetworkPacketActivityCounters[i].writeToParcel(out);
  }
  mMobileRadioActiveTimer.writeToParcel(out,uSecRealtime);
  mMobileRadioActivePerAppTimer.writeToParcel(out,uSecRealtime);
  mMobileRadioActiveAdjustedTime.writeToParcel(out);
  mMobileRadioActiveUnknownTime.writeToParcel(out);
  mMobileRadioActiveUnknownCount.writeToParcel(out);
  mWifiOnTimer.writeToParcel(out,uSecRealtime);
  mGlobalWifiRunningTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_WIFI_STATES; i++) {
    mWifiStateTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_WIFI_SUPPL_STATES; i++) {
    mWifiSupplStateTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_WIFI_SIGNAL_STRENGTH_BINS; i++) {
    mWifiSignalStrengthsTimer[i].writeToParcel(out,uSecRealtime);
  }
  mBluetoothOnTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_BLUETOOTH_STATES; i++) {
    mBluetoothStateTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mBluetoothActivityCounters[i].writeToParcel(out);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mWifiActivityCounters[i].writeToParcel(out);
  }
  out.writeInt(mHasWifiEnergyReporting ? 1 : 0);
  out.writeInt(mHasBluetoothEnergyReporting ? 1 : 0);
  out.writeInt(mNumConnectivityChange);
  out.writeInt(mLoadedNumConnectivityChange);
  out.writeInt(mUnpluggedNumConnectivityChange);
  mFlashlightOnTimer.writeToParcel(out,uSecRealtime);
  out.writeInt(mDischargeUnplugLevel);
  out.writeInt(mDischargePlugLevel);
  out.writeInt(mDischargeCurrentLevel);
  out.writeInt(mCurrentBatteryLevel);
  out.writeInt(mLowDischargeAmountSinceCharge);
  out.writeInt(mHighDischargeAmountSinceCharge);
  out.writeInt(mDischargeAmountScreenOn);
  out.writeInt(mDischargeAmountScreenOnSinceCharge);
  out.writeInt(mDischargeAmountScreenOff);
  out.writeInt(mDischargeAmountScreenOffSinceCharge);
  mDischargeStepTracker.writeToParcel(out);
  mChargeStepTracker.writeToParcel(out);
  out.writeLong(mLastWriteTime);
  out.writeInt(getBluetoothPingCount());
  if (inclUids) {
    out.writeInt(mKernelWakelockStats.size());
    for (    Map.Entry<String,SamplingTimer> ent : mKernelWakelockStats.entrySet()) {
      SamplingTimer kwlt=ent.getValue();
      if (kwlt != null) {
        out.writeInt(1);
        out.writeString(ent.getKey());
        kwlt.writeToParcel(out,uSecRealtime);
      }
 else {
        out.writeInt(0);
      }
    }
    out.writeInt(mWakeupReasonStats.size());
    for (    Map.Entry<String,SamplingTimer> ent : mWakeupReasonStats.entrySet()) {
      SamplingTimer timer=ent.getValue();
      if (timer != null) {
        out.writeInt(1);
        out.writeString(ent.getKey());
        timer.writeToParcel(out,uSecRealtime);
      }
 else {
        out.writeInt(0);
      }
    }
  }
 else {
    out.writeInt(0);
  }
  out.writeInt(sNumSpeedSteps);
  if (inclUids) {
    int size=mUidStats.size();
    out.writeInt(size);
    for (int i=0; i < size; i++) {
      out.writeInt(mUidStats.keyAt(i));
      Uid uid=mUidStats.valueAt(i);
      uid.writeToParcelLocked(out,uSecRealtime);
    }
  }
 else {
    out.writeInt(0);
  }
}",0.9896575961441912
195342,"/** 
 * Distribute WiFi energy info and network traffic to apps.
 * @param info The energy information from the WiFi controller.
 */
public void updateWifiStateLocked(@Nullable final WifiActivityEnergyInfo info){
  final long elapsedRealtimeMs=SystemClock.elapsedRealtime();
  NetworkStats delta=null;
  try {
    if (!ArrayUtils.isEmpty(mWifiIfaces)) {
      delta=getNetworkStatsDeltaLocked(mWifiIfaces,mWifiNetworkStats);
    }
  }
 catch (  IOException e) {
    Slog.wtf(TAG,""String_Node_Str"",e);
    return;
  }
  if (!mOnBatteryInternal) {
    return;
  }
  SparseLongArray rxPackets=new SparseLongArray();
  SparseLongArray txPackets=new SparseLongArray();
  long totalTxPackets=0;
  long totalRxPackets=0;
  if (delta != null) {
    final int size=delta.size();
    for (int i=0; i < size; i++) {
      final NetworkStats.Entry entry=delta.getValues(i,mTmpNetworkStatsEntry);
      if (DEBUG_ENERGY) {
        Slog.d(TAG,""String_Node_Str"" + entry.uid + ""String_Node_Str""+ entry.rxBytes+ ""String_Node_Str""+ entry.txBytes+ ""String_Node_Str""+ entry.rxPackets+ ""String_Node_Str""+ entry.txPackets);
      }
      if (entry.rxBytes == 0 || entry.txBytes == 0) {
        continue;
      }
      final Uid u=getUidStatsLocked(mapUid(entry.uid));
      u.noteNetworkActivityLocked(NETWORK_WIFI_RX_DATA,entry.rxBytes,entry.rxPackets);
      u.noteNetworkActivityLocked(NETWORK_WIFI_TX_DATA,entry.txBytes,entry.txPackets);
      rxPackets.put(u.getUid(),entry.rxPackets);
      txPackets.put(u.getUid(),entry.txPackets);
      totalRxPackets+=entry.rxPackets;
      totalTxPackets+=entry.txPackets;
      mNetworkByteActivityCounters[NETWORK_WIFI_RX_DATA].addCountLocked(entry.rxBytes);
      mNetworkByteActivityCounters[NETWORK_WIFI_TX_DATA].addCountLocked(entry.txBytes);
      mNetworkPacketActivityCounters[NETWORK_WIFI_RX_DATA].addCountLocked(entry.rxPackets);
      mNetworkPacketActivityCounters[NETWORK_WIFI_TX_DATA].addCountLocked(entry.txPackets);
    }
  }
  if (info != null) {
    final long txTimeMs=info.getControllerTxTimeMillis();
    final long rxTimeMs=info.getControllerRxTimeMillis();
    final long idleTimeMs=info.getControllerIdleTimeMillis();
    final long totalTimeMs=txTimeMs + rxTimeMs + idleTimeMs;
    long leftOverRxTimeMs=rxTimeMs;
    if (DEBUG_ENERGY) {
      Slog.d(TAG,""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + txTimeMs + ""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + rxTimeMs + ""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + idleTimeMs + ""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + totalTimeMs + ""String_Node_Str"");
    }
    long totalWifiLockTimeMs=0;
    long totalScanTimeMs=0;
    final int uidStatsSize=mUidStats.size();
    for (int i=0; i < uidStatsSize; i++) {
      final Uid uid=mUidStats.valueAt(i);
      totalScanTimeMs+=uid.mWifiScanTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
      totalWifiLockTimeMs+=uid.mFullWifiLockTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
    }
    if (DEBUG_ENERGY && totalScanTimeMs > rxTimeMs) {
      Slog.d(TAG,""String_Node_Str"" + totalScanTimeMs + ""String_Node_Str""+ rxTimeMs+ ""String_Node_Str"");
    }
    for (int i=0; i < uidStatsSize; i++) {
      final Uid uid=mUidStats.valueAt(i);
      long scanTimeSinceMarkMs=uid.mWifiScanTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
      if (scanTimeSinceMarkMs > 0) {
        uid.mWifiScanTimer.setMark(elapsedRealtimeMs);
        if (totalScanTimeMs > rxTimeMs) {
          scanTimeSinceMarkMs=(rxTimeMs * scanTimeSinceMarkMs) / totalScanTimeMs;
        }
        if (DEBUG_ENERGY) {
          Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ scanTimeSinceMarkMs+ ""String_Node_Str"");
        }
        uid.noteWifiControllerActivityLocked(CONTROLLER_RX_TIME,scanTimeSinceMarkMs);
        leftOverRxTimeMs-=scanTimeSinceMarkMs;
      }
      final long wifiLockTimeSinceMarkMs=uid.mFullWifiLockTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
      if (wifiLockTimeSinceMarkMs > 0) {
        uid.mFullWifiLockTimer.setMark(elapsedRealtimeMs);
        final long myIdleTimeMs=(wifiLockTimeSinceMarkMs * idleTimeMs) / totalWifiLockTimeMs;
        if (DEBUG_ENERGY) {
          Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ myIdleTimeMs+ ""String_Node_Str"");
        }
        uid.noteWifiControllerActivityLocked(CONTROLLER_IDLE_TIME,myIdleTimeMs);
      }
    }
    if (DEBUG_ENERGY) {
      Slog.d(TAG,""String_Node_Str"" + leftOverRxTimeMs + ""String_Node_Str"");
    }
    for (int i=0; i < txPackets.size(); i++) {
      final Uid uid=getUidStatsLocked(txPackets.keyAt(i));
      final long myTxTimeMs=(txPackets.valueAt(i) * txTimeMs) / totalTxPackets;
      if (DEBUG_ENERGY) {
        Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ myTxTimeMs+ ""String_Node_Str"");
      }
      uid.noteWifiControllerActivityLocked(CONTROLLER_TX_TIME,myTxTimeMs);
    }
    for (int i=0; i < rxPackets.size(); i++) {
      final Uid uid=getUidStatsLocked(rxPackets.keyAt(i));
      final long myRxTimeMs=(rxPackets.valueAt(i) * leftOverRxTimeMs) / totalRxPackets;
      if (DEBUG_ENERGY) {
        Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ myRxTimeMs+ ""String_Node_Str"");
      }
      uid.noteWifiControllerActivityLocked(CONTROLLER_RX_TIME,myRxTimeMs);
    }
    mWifiActivityCounters[CONTROLLER_RX_TIME].addCountLocked(info.getControllerRxTimeMillis());
    mWifiActivityCounters[CONTROLLER_TX_TIME].addCountLocked(info.getControllerTxTimeMillis());
    mWifiActivityCounters[CONTROLLER_IDLE_TIME].addCountLocked(info.getControllerIdleTimeMillis());
    final double powerDrainMaMs;
    if (mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_OPERATING_VOLTAGE) == 0) {
      powerDrainMaMs=0.0;
    }
 else {
      powerDrainMaMs=info.getControllerEnergyUsed() / mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_OPERATING_VOLTAGE);
    }
    mWifiActivityCounters[CONTROLLER_POWER_DRAIN].addCountLocked((long)powerDrainMaMs);
  }
}","/** 
 * Distribute WiFi energy info and network traffic to apps.
 * @param info The energy information from the WiFi controller.
 */
public void updateWifiStateLocked(@Nullable final WifiActivityEnergyInfo info){
  final long elapsedRealtimeMs=SystemClock.elapsedRealtime();
  NetworkStats delta=null;
  try {
    if (!ArrayUtils.isEmpty(mWifiIfaces)) {
      delta=getNetworkStatsDeltaLocked(mWifiIfaces,mWifiNetworkStats);
    }
  }
 catch (  IOException e) {
    Slog.wtf(TAG,""String_Node_Str"",e);
    return;
  }
  if (!mOnBatteryInternal) {
    return;
  }
  SparseLongArray rxPackets=new SparseLongArray();
  SparseLongArray txPackets=new SparseLongArray();
  long totalTxPackets=0;
  long totalRxPackets=0;
  if (delta != null) {
    final int size=delta.size();
    for (int i=0; i < size; i++) {
      final NetworkStats.Entry entry=delta.getValues(i,mTmpNetworkStatsEntry);
      if (DEBUG_ENERGY) {
        Slog.d(TAG,""String_Node_Str"" + entry.uid + ""String_Node_Str""+ entry.rxBytes+ ""String_Node_Str""+ entry.txBytes+ ""String_Node_Str""+ entry.rxPackets+ ""String_Node_Str""+ entry.txPackets);
      }
      if (entry.rxBytes == 0 || entry.txBytes == 0) {
        continue;
      }
      final Uid u=getUidStatsLocked(mapUid(entry.uid));
      u.noteNetworkActivityLocked(NETWORK_WIFI_RX_DATA,entry.rxBytes,entry.rxPackets);
      u.noteNetworkActivityLocked(NETWORK_WIFI_TX_DATA,entry.txBytes,entry.txPackets);
      rxPackets.put(u.getUid(),entry.rxPackets);
      txPackets.put(u.getUid(),entry.txPackets);
      totalRxPackets+=entry.rxPackets;
      totalTxPackets+=entry.txPackets;
      mNetworkByteActivityCounters[NETWORK_WIFI_RX_DATA].addCountLocked(entry.rxBytes);
      mNetworkByteActivityCounters[NETWORK_WIFI_TX_DATA].addCountLocked(entry.txBytes);
      mNetworkPacketActivityCounters[NETWORK_WIFI_RX_DATA].addCountLocked(entry.rxPackets);
      mNetworkPacketActivityCounters[NETWORK_WIFI_TX_DATA].addCountLocked(entry.txPackets);
    }
  }
  if (info != null) {
    mHasWifiEnergyReporting=true;
    final long txTimeMs=info.getControllerTxTimeMillis();
    final long rxTimeMs=info.getControllerRxTimeMillis();
    final long idleTimeMs=info.getControllerIdleTimeMillis();
    final long totalTimeMs=txTimeMs + rxTimeMs + idleTimeMs;
    long leftOverRxTimeMs=rxTimeMs;
    if (DEBUG_ENERGY) {
      Slog.d(TAG,""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + txTimeMs + ""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + rxTimeMs + ""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + idleTimeMs + ""String_Node_Str"");
      Slog.d(TAG,""String_Node_Str"" + totalTimeMs + ""String_Node_Str"");
    }
    long totalWifiLockTimeMs=0;
    long totalScanTimeMs=0;
    final int uidStatsSize=mUidStats.size();
    for (int i=0; i < uidStatsSize; i++) {
      final Uid uid=mUidStats.valueAt(i);
      totalScanTimeMs+=uid.mWifiScanTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
      totalWifiLockTimeMs+=uid.mFullWifiLockTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
    }
    if (DEBUG_ENERGY && totalScanTimeMs > rxTimeMs) {
      Slog.d(TAG,""String_Node_Str"" + totalScanTimeMs + ""String_Node_Str""+ rxTimeMs+ ""String_Node_Str"");
    }
    for (int i=0; i < uidStatsSize; i++) {
      final Uid uid=mUidStats.valueAt(i);
      long scanTimeSinceMarkMs=uid.mWifiScanTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
      if (scanTimeSinceMarkMs > 0) {
        uid.mWifiScanTimer.setMark(elapsedRealtimeMs);
        if (totalScanTimeMs > rxTimeMs) {
          scanTimeSinceMarkMs=(rxTimeMs * scanTimeSinceMarkMs) / totalScanTimeMs;
        }
        if (DEBUG_ENERGY) {
          Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ scanTimeSinceMarkMs+ ""String_Node_Str"");
        }
        uid.noteWifiControllerActivityLocked(CONTROLLER_RX_TIME,scanTimeSinceMarkMs);
        leftOverRxTimeMs-=scanTimeSinceMarkMs;
      }
      final long wifiLockTimeSinceMarkMs=uid.mFullWifiLockTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
      if (wifiLockTimeSinceMarkMs > 0) {
        uid.mFullWifiLockTimer.setMark(elapsedRealtimeMs);
        final long myIdleTimeMs=(wifiLockTimeSinceMarkMs * idleTimeMs) / totalWifiLockTimeMs;
        if (DEBUG_ENERGY) {
          Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ myIdleTimeMs+ ""String_Node_Str"");
        }
        uid.noteWifiControllerActivityLocked(CONTROLLER_IDLE_TIME,myIdleTimeMs);
      }
    }
    if (DEBUG_ENERGY) {
      Slog.d(TAG,""String_Node_Str"" + leftOverRxTimeMs + ""String_Node_Str"");
    }
    for (int i=0; i < txPackets.size(); i++) {
      final Uid uid=getUidStatsLocked(txPackets.keyAt(i));
      final long myTxTimeMs=(txPackets.valueAt(i) * txTimeMs) / totalTxPackets;
      if (DEBUG_ENERGY) {
        Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ myTxTimeMs+ ""String_Node_Str"");
      }
      uid.noteWifiControllerActivityLocked(CONTROLLER_TX_TIME,myTxTimeMs);
    }
    for (int i=0; i < rxPackets.size(); i++) {
      final Uid uid=getUidStatsLocked(rxPackets.keyAt(i));
      final long myRxTimeMs=(rxPackets.valueAt(i) * leftOverRxTimeMs) / totalRxPackets;
      if (DEBUG_ENERGY) {
        Slog.d(TAG,""String_Node_Str"" + uid.getUid() + ""String_Node_Str""+ myRxTimeMs+ ""String_Node_Str"");
      }
      uid.noteWifiControllerActivityLocked(CONTROLLER_RX_TIME,myRxTimeMs);
    }
    mWifiActivityCounters[CONTROLLER_RX_TIME].addCountLocked(info.getControllerRxTimeMillis());
    mWifiActivityCounters[CONTROLLER_TX_TIME].addCountLocked(info.getControllerTxTimeMillis());
    mWifiActivityCounters[CONTROLLER_IDLE_TIME].addCountLocked(info.getControllerIdleTimeMillis());
    final double powerDrainMaMs;
    if (mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_OPERATING_VOLTAGE) == 0) {
      powerDrainMaMs=0.0;
    }
 else {
      powerDrainMaMs=info.getControllerEnergyUsed() / mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_OPERATING_VOLTAGE);
    }
    mWifiActivityCounters[CONTROLLER_POWER_DRAIN].addCountLocked((long)powerDrainMaMs);
  }
}",0.9972080801445228
195343,"void readFromParcelLocked(Parcel in){
  int magic=in.readInt();
  if (magic != MAGIC) {
    throw new ParcelFormatException(""String_Node_Str"" + Integer.toHexString(magic));
  }
  readHistory(in,false);
  mStartCount=in.readInt();
  mStartClockTime=in.readLong();
  mStartPlatformVersion=in.readString();
  mEndPlatformVersion=in.readString();
  mUptime=in.readLong();
  mUptimeStart=in.readLong();
  mRealtime=in.readLong();
  mRealtimeStart=in.readLong();
  mOnBattery=in.readInt() != 0;
  mOnBatteryInternal=false;
  mOnBatteryTimeBase.readFromParcel(in);
  mOnBatteryScreenOffTimeBase.readFromParcel(in);
  mScreenState=Display.STATE_UNKNOWN;
  mScreenOnTimer=new StopwatchTimer(null,-1,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i]=new StopwatchTimer(null,-100 - i,null,mOnBatteryTimeBase,in);
  }
  mInteractive=false;
  mInteractiveTimer=new StopwatchTimer(null,-10,null,mOnBatteryTimeBase,in);
  mPhoneOn=false;
  mPowerSaveModeEnabledTimer=new StopwatchTimer(null,-2,null,mOnBatteryTimeBase,in);
  mDeviceIdleModeEnabledTimer=new StopwatchTimer(null,-11,null,mOnBatteryTimeBase,in);
  mDeviceIdlingTimer=new StopwatchTimer(null,-12,null,mOnBatteryTimeBase,in);
  mPhoneOnTimer=new StopwatchTimer(null,-3,null,mOnBatteryTimeBase,in);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i]=new StopwatchTimer(null,-200 - i,null,mOnBatteryTimeBase,in);
  }
  mPhoneSignalScanningTimer=new StopwatchTimer(null,-200 + 1,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i]=new StopwatchTimer(null,-300 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
    mNetworkByteActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
    mNetworkPacketActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
  }
  mMobileRadioPowerState=DataConnectionRealTimeInfo.DC_POWER_STATE_LOW;
  mMobileRadioActiveTimer=new StopwatchTimer(null,-400,null,mOnBatteryTimeBase,in);
  mMobileRadioActivePerAppTimer=new StopwatchTimer(null,-401,null,mOnBatteryTimeBase,in);
  mMobileRadioActiveAdjustedTime=new LongSamplingCounter(mOnBatteryTimeBase,in);
  mMobileRadioActiveUnknownTime=new LongSamplingCounter(mOnBatteryTimeBase,in);
  mMobileRadioActiveUnknownCount=new LongSamplingCounter(mOnBatteryTimeBase,in);
  mWifiOn=false;
  mWifiOnTimer=new StopwatchTimer(null,-4,null,mOnBatteryTimeBase,in);
  mGlobalWifiRunning=false;
  mGlobalWifiRunningTimer=new StopwatchTimer(null,-5,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_WIFI_STATES; i++) {
    mWifiStateTimer[i]=new StopwatchTimer(null,-600 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_WIFI_SUPPL_STATES; i++) {
    mWifiSupplStateTimer[i]=new StopwatchTimer(null,-700 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_WIFI_SIGNAL_STRENGTH_BINS; i++) {
    mWifiSignalStrengthsTimer[i]=new StopwatchTimer(null,-800 - i,null,mOnBatteryTimeBase,in);
  }
  mBluetoothOn=false;
  mBluetoothOnTimer=new StopwatchTimer(null,-6,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_BLUETOOTH_STATES; i++) {
    mBluetoothStateTimer[i]=new StopwatchTimer(null,-500 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mBluetoothActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mWifiActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
  }
  mNumConnectivityChange=in.readInt();
  mLoadedNumConnectivityChange=in.readInt();
  mUnpluggedNumConnectivityChange=in.readInt();
  mAudioOnNesting=0;
  mAudioOnTimer=new StopwatchTimer(null,-7,null,mOnBatteryTimeBase);
  mVideoOnNesting=0;
  mVideoOnTimer=new StopwatchTimer(null,-8,null,mOnBatteryTimeBase);
  mFlashlightOn=false;
  mFlashlightOnTimer=new StopwatchTimer(null,-9,null,mOnBatteryTimeBase,in);
  mDischargeUnplugLevel=in.readInt();
  mDischargePlugLevel=in.readInt();
  mDischargeCurrentLevel=in.readInt();
  mCurrentBatteryLevel=in.readInt();
  mLowDischargeAmountSinceCharge=in.readInt();
  mHighDischargeAmountSinceCharge=in.readInt();
  mDischargeAmountScreenOn=in.readInt();
  mDischargeAmountScreenOnSinceCharge=in.readInt();
  mDischargeAmountScreenOff=in.readInt();
  mDischargeAmountScreenOffSinceCharge=in.readInt();
  mDischargeStepTracker.readFromParcel(in);
  mChargeStepTracker.readFromParcel(in);
  mLastWriteTime=in.readLong();
  mBluetoothPingCount=in.readInt();
  mBluetoothPingStart=-1;
  mKernelWakelockStats.clear();
  int NKW=in.readInt();
  for (int ikw=0; ikw < NKW; ikw++) {
    if (in.readInt() != 0) {
      String wakelockName=in.readString();
      SamplingTimer kwlt=new SamplingTimer(mOnBatteryScreenOffTimeBase,in);
      mKernelWakelockStats.put(wakelockName,kwlt);
    }
  }
  mWakeupReasonStats.clear();
  int NWR=in.readInt();
  for (int iwr=0; iwr < NWR; iwr++) {
    if (in.readInt() != 0) {
      String reasonName=in.readString();
      SamplingTimer timer=new SamplingTimer(mOnBatteryTimeBase,in);
      mWakeupReasonStats.put(reasonName,timer);
    }
  }
  mPartialTimers.clear();
  mFullTimers.clear();
  mWindowTimers.clear();
  mWifiRunningTimers.clear();
  mFullWifiLockTimers.clear();
  mWifiScanTimers.clear();
  mWifiBatchedScanTimers.clear();
  mWifiMulticastTimers.clear();
  mAudioTurnedOnTimers.clear();
  mVideoTurnedOnTimers.clear();
  sNumSpeedSteps=in.readInt();
  int numUids=in.readInt();
  mUidStats.clear();
  for (int i=0; i < numUids; i++) {
    int uid=in.readInt();
    Uid u=new Uid(uid);
    u.readFromParcelLocked(mOnBatteryTimeBase,mOnBatteryScreenOffTimeBase,in);
    mUidStats.append(uid,u);
  }
}","void readFromParcelLocked(Parcel in){
  int magic=in.readInt();
  if (magic != MAGIC) {
    throw new ParcelFormatException(""String_Node_Str"" + Integer.toHexString(magic));
  }
  readHistory(in,false);
  mStartCount=in.readInt();
  mStartClockTime=in.readLong();
  mStartPlatformVersion=in.readString();
  mEndPlatformVersion=in.readString();
  mUptime=in.readLong();
  mUptimeStart=in.readLong();
  mRealtime=in.readLong();
  mRealtimeStart=in.readLong();
  mOnBattery=in.readInt() != 0;
  mOnBatteryInternal=false;
  mOnBatteryTimeBase.readFromParcel(in);
  mOnBatteryScreenOffTimeBase.readFromParcel(in);
  mScreenState=Display.STATE_UNKNOWN;
  mScreenOnTimer=new StopwatchTimer(null,-1,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i]=new StopwatchTimer(null,-100 - i,null,mOnBatteryTimeBase,in);
  }
  mInteractive=false;
  mInteractiveTimer=new StopwatchTimer(null,-10,null,mOnBatteryTimeBase,in);
  mPhoneOn=false;
  mPowerSaveModeEnabledTimer=new StopwatchTimer(null,-2,null,mOnBatteryTimeBase,in);
  mDeviceIdleModeEnabledTimer=new StopwatchTimer(null,-11,null,mOnBatteryTimeBase,in);
  mDeviceIdlingTimer=new StopwatchTimer(null,-12,null,mOnBatteryTimeBase,in);
  mPhoneOnTimer=new StopwatchTimer(null,-3,null,mOnBatteryTimeBase,in);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i]=new StopwatchTimer(null,-200 - i,null,mOnBatteryTimeBase,in);
  }
  mPhoneSignalScanningTimer=new StopwatchTimer(null,-200 + 1,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i]=new StopwatchTimer(null,-300 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
    mNetworkByteActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
    mNetworkPacketActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
  }
  mMobileRadioPowerState=DataConnectionRealTimeInfo.DC_POWER_STATE_LOW;
  mMobileRadioActiveTimer=new StopwatchTimer(null,-400,null,mOnBatteryTimeBase,in);
  mMobileRadioActivePerAppTimer=new StopwatchTimer(null,-401,null,mOnBatteryTimeBase,in);
  mMobileRadioActiveAdjustedTime=new LongSamplingCounter(mOnBatteryTimeBase,in);
  mMobileRadioActiveUnknownTime=new LongSamplingCounter(mOnBatteryTimeBase,in);
  mMobileRadioActiveUnknownCount=new LongSamplingCounter(mOnBatteryTimeBase,in);
  mWifiOn=false;
  mWifiOnTimer=new StopwatchTimer(null,-4,null,mOnBatteryTimeBase,in);
  mGlobalWifiRunning=false;
  mGlobalWifiRunningTimer=new StopwatchTimer(null,-5,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_WIFI_STATES; i++) {
    mWifiStateTimer[i]=new StopwatchTimer(null,-600 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_WIFI_SUPPL_STATES; i++) {
    mWifiSupplStateTimer[i]=new StopwatchTimer(null,-700 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_WIFI_SIGNAL_STRENGTH_BINS; i++) {
    mWifiSignalStrengthsTimer[i]=new StopwatchTimer(null,-800 - i,null,mOnBatteryTimeBase,in);
  }
  mBluetoothOn=false;
  mBluetoothOnTimer=new StopwatchTimer(null,-6,null,mOnBatteryTimeBase,in);
  for (int i=0; i < NUM_BLUETOOTH_STATES; i++) {
    mBluetoothStateTimer[i]=new StopwatchTimer(null,-500 - i,null,mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mBluetoothActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mWifiActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
  }
  mHasWifiEnergyReporting=in.readInt() != 0;
  mHasBluetoothEnergyReporting=in.readInt() != 0;
  mNumConnectivityChange=in.readInt();
  mLoadedNumConnectivityChange=in.readInt();
  mUnpluggedNumConnectivityChange=in.readInt();
  mAudioOnNesting=0;
  mAudioOnTimer=new StopwatchTimer(null,-7,null,mOnBatteryTimeBase);
  mVideoOnNesting=0;
  mVideoOnTimer=new StopwatchTimer(null,-8,null,mOnBatteryTimeBase);
  mFlashlightOn=false;
  mFlashlightOnTimer=new StopwatchTimer(null,-9,null,mOnBatteryTimeBase,in);
  mDischargeUnplugLevel=in.readInt();
  mDischargePlugLevel=in.readInt();
  mDischargeCurrentLevel=in.readInt();
  mCurrentBatteryLevel=in.readInt();
  mLowDischargeAmountSinceCharge=in.readInt();
  mHighDischargeAmountSinceCharge=in.readInt();
  mDischargeAmountScreenOn=in.readInt();
  mDischargeAmountScreenOnSinceCharge=in.readInt();
  mDischargeAmountScreenOff=in.readInt();
  mDischargeAmountScreenOffSinceCharge=in.readInt();
  mDischargeStepTracker.readFromParcel(in);
  mChargeStepTracker.readFromParcel(in);
  mLastWriteTime=in.readLong();
  mBluetoothPingCount=in.readInt();
  mBluetoothPingStart=-1;
  mKernelWakelockStats.clear();
  int NKW=in.readInt();
  for (int ikw=0; ikw < NKW; ikw++) {
    if (in.readInt() != 0) {
      String wakelockName=in.readString();
      SamplingTimer kwlt=new SamplingTimer(mOnBatteryScreenOffTimeBase,in);
      mKernelWakelockStats.put(wakelockName,kwlt);
    }
  }
  mWakeupReasonStats.clear();
  int NWR=in.readInt();
  for (int iwr=0; iwr < NWR; iwr++) {
    if (in.readInt() != 0) {
      String reasonName=in.readString();
      SamplingTimer timer=new SamplingTimer(mOnBatteryTimeBase,in);
      mWakeupReasonStats.put(reasonName,timer);
    }
  }
  mPartialTimers.clear();
  mFullTimers.clear();
  mWindowTimers.clear();
  mWifiRunningTimers.clear();
  mFullWifiLockTimers.clear();
  mWifiScanTimers.clear();
  mWifiBatchedScanTimers.clear();
  mWifiMulticastTimers.clear();
  mAudioTurnedOnTimers.clear();
  mVideoTurnedOnTimers.clear();
  sNumSpeedSteps=in.readInt();
  int numUids=in.readInt();
  mUidStats.clear();
  for (int i=0; i < numUids; i++) {
    int uid=in.readInt();
    Uid u=new Uid(uid);
    u.readFromParcelLocked(mOnBatteryTimeBase,mOnBatteryScreenOffTimeBase,in);
    mUidStats.append(uid,u);
  }
}",0.991848991848992
195344,"/** 
 * Distribute Bluetooth energy info and network traffic to apps.
 * @param info The energy information from the bluetooth controller.
 */
public void updateBluetoothStateLocked(@Nullable final BluetoothActivityEnergyInfo info){
  if (info != null && mOnBatteryInternal && false) {
    mBluetoothActivityCounters[CONTROLLER_RX_TIME].addCountLocked(info.getControllerRxTimeMillis());
    mBluetoothActivityCounters[CONTROLLER_TX_TIME].addCountLocked(info.getControllerTxTimeMillis());
    mBluetoothActivityCounters[CONTROLLER_IDLE_TIME].addCountLocked(info.getControllerIdleTimeMillis());
    mBluetoothActivityCounters[CONTROLLER_POWER_DRAIN].addCountLocked(info.getControllerEnergyUsed());
  }
}","/** 
 * Distribute Bluetooth energy info and network traffic to apps.
 * @param info The energy information from the bluetooth controller.
 */
public void updateBluetoothStateLocked(@Nullable final BluetoothActivityEnergyInfo info){
  if (info != null && mOnBatteryInternal && false) {
    mHasBluetoothEnergyReporting=true;
    mBluetoothActivityCounters[CONTROLLER_RX_TIME].addCountLocked(info.getControllerRxTimeMillis());
    mBluetoothActivityCounters[CONTROLLER_TX_TIME].addCountLocked(info.getControllerTxTimeMillis());
    mBluetoothActivityCounters[CONTROLLER_IDLE_TIME].addCountLocked(info.getControllerIdleTimeMillis());
    mBluetoothActivityCounters[CONTROLLER_POWER_DRAIN].addCountLocked(info.getControllerEnergyUsed());
  }
}",0.9729354614850798
195345,"@Override public void calculateRemaining(BatterySipper app,BatteryStats stats,long rawRealtimeUs,long rawUptimeUs,int statsType){
  final long idleTimeMs=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_IDLE_TIME,statsType);
  final long rxTimeMs=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_RX_TIME,statsType);
  final long txTimeMs=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_TX_TIME,statsType);
  app.wifiRunningTimeMs=idleTimeMs + rxTimeMs + txTimeMs;
  double powerDrain=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_POWER_DRAIN,statsType) / (1000 * 60 * 60);
  if (powerDrain == 0) {
    powerDrain=((idleTimeMs * mIdleCurrentMa) + (txTimeMs * mTxCurrentMa) + (rxTimeMs * mRxCurrentMa)) / (1000 * 60 * 60);
  }
  app.wifiPowerMah=Math.max(0,powerDrain - mTotalAppPowerDrain);
}","@Override public void calculateRemaining(BatterySipper app,BatteryStats stats,long rawRealtimeUs,long rawUptimeUs,int statsType){
  final long idleTimeMs=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_IDLE_TIME,statsType);
  final long rxTimeMs=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_RX_TIME,statsType);
  final long txTimeMs=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_TX_TIME,statsType);
  app.wifiRunningTimeMs=idleTimeMs + rxTimeMs + txTimeMs;
  double powerDrain=stats.getWifiControllerActivity(BatteryStats.CONTROLLER_POWER_DRAIN,statsType) / (1000 * 60 * 60);
  if (powerDrain == 0) {
    powerDrain=((idleTimeMs * mIdleCurrentMa) + (txTimeMs * mTxCurrentMa) + (rxTimeMs * mRxCurrentMa)) / (1000 * 60 * 60);
  }
  app.wifiPowerMah=Math.max(0,powerDrain - mTotalAppPowerDrain);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + BatteryStatsHelper.makemAh(app.wifiPowerMah));
  }
}",0.9427262313860252
195346,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.996875
195347,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975186104218362
195348,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9968253968253968
195349,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9960474308300395
195350,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.9969604863221884
195351,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975728155339806
195352,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9969135802469136
195353,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9961832061068704
195354,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.9969604863221884
195355,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975728155339806
195356,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9969135802469136
195357,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9961832061068704
195358,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.996875
195359,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975186104218362
195360,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9968253968253968
195361,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9960474308300395
195362,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.9969604863221884
195363,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975728155339806
195364,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9969135802469136
195365,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9961832061068704
195366,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.9969604863221884
195367,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975728155339806
195368,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9969135802469136
195369,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9961832061068704
195370,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.996875
195371,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975186104218362
195372,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9968253968253968
195373,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9960474308300395
195374,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.9969604863221884
195375,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975728155339806
195376,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9969135802469136
195377,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9961832061068704
195378,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.9969604863221884
195379,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975728155339806
195380,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9969135802469136
195381,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9961832061068704
195382,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.996875
195383,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975186104218362
195384,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9968253968253968
195385,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9960474308300395
195386,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.9969604863221884
195387,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975728155339806
195388,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9969135802469136
195389,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9961832061068704
195390,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.9969604863221884
195391,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975728155339806
195392,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9969135802469136
195393,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9961832061068704
195394,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.996875
195395,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975186104218362
195396,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9968253968253968
195397,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9960474308300395
195398,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.9969604863221884
195399,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975728155339806
195400,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9969135802469136
195401,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9961832061068704
195402,"/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for decryption and verification. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityForConsumptionEnd(Date endDate){
  mKeyValidityForConsumptionEnd=endDate;
  return this;
}",0.9969604863221884
195403,"/** 
 * Sets the time instant after which the key is no longer valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityStart(Date)
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @see #setKeyValidityForOriginationEnd(Date)
 * @hide
 */
public Builder setKeyValidityEnd(Date endDate){
  setKeyValidityForOriginationEnd(endDate);
  setKeyValidityForConsumptionEnd(endDate);
  return this;
}",0.9975728155339806
195404,"/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}","/** 
 * Sets the time instant after which the key is no longer valid for encryption and signing. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityForConsumptionEnd(Date)
 * @hide
 */
public Builder setKeyValidityForOriginationEnd(Date endDate){
  mKeyValidityForOriginationEnd=endDate;
  return this;
}",0.9969135802469136
195405,"/** 
 * Sets the time instant before which the key is not yet valid. <b>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}","/** 
 * Sets the time instant before which the key is not yet valid. <p>By default, the key is valid at any instant.
 * @see #setKeyValidityEnd(Date)
 * @hide
 */
public Builder setKeyValidityStart(Date startDate){
  mKeyValidityStart=startDate;
  return this;
}",0.9961832061068704
195406,"private List<ResolveInfo> filterCandidatesWithDomainPreferedActivitiesLPr(List<ResolveInfo> candidates){
  if (DEBUG_PREFERRED) {
    Slog.v(""String_Node_Str"",""String_Node_Str"" + candidates.size());
  }
  final int userId=UserHandle.getCallingUserId();
  ArrayList<ResolveInfo> result=new ArrayList<ResolveInfo>();
  ArrayList<ResolveInfo> neverList=new ArrayList<ResolveInfo>();
  ArrayList<ResolveInfo> matchAllList=new ArrayList<ResolveInfo>();
synchronized (mPackages) {
    final int count=candidates.size();
    for (int n=0; n < count; n++) {
      ResolveInfo info=candidates.get(n);
      String packageName=info.activityInfo.packageName;
      PackageSetting ps=mSettings.mPackages.get(packageName);
      if (ps != null) {
        int status=getDomainVerificationStatusLPr(ps,userId);
        if (status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS) {
          result.add(info);
        }
 else         if (status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_NEVER) {
          neverList.add(info);
        }
        if (info.handleAllWebDataURI) {
          matchAllList.add(info);
        }
      }
    }
    if (result.size() == 0) {
      result.addAll(candidates);
    }
    result.removeAll(neverList);
    result.removeAll(matchAllList);
    if (result.size() == 0) {
      result.addAll(matchAllList);
    }
  }
  if (DEBUG_PREFERRED) {
    Slog.v(""String_Node_Str"",""String_Node_Str"" + result.size());
  }
  return result;
}","private List<ResolveInfo> filterCandidatesWithDomainPreferedActivitiesLPr(List<ResolveInfo> candidates){
  if (DEBUG_PREFERRED) {
    Slog.v(""String_Node_Str"",""String_Node_Str"" + candidates.size());
  }
  final int userId=UserHandle.getCallingUserId();
  ArrayList<ResolveInfo> result=new ArrayList<ResolveInfo>();
  ArrayList<ResolveInfo> neverList=new ArrayList<ResolveInfo>();
  ArrayList<ResolveInfo> matchAllList=new ArrayList<ResolveInfo>();
synchronized (mPackages) {
    final int count=candidates.size();
    for (int n=0; n < count; n++) {
      ResolveInfo info=candidates.get(n);
      String packageName=info.activityInfo.packageName;
      PackageSetting ps=mSettings.mPackages.get(packageName);
      if (ps != null) {
        int status=getDomainVerificationStatusLPr(ps,userId);
        if (status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS || status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
          result.add(info);
        }
 else         if (status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_NEVER) {
          neverList.add(info);
        }
        if (info.handleAllWebDataURI) {
          matchAllList.add(info);
        }
      }
    }
    if (result.size() == 0) {
      result.addAll(candidates);
    }
    result.removeAll(neverList);
    result.removeAll(matchAllList);
    if (result.size() == 0) {
      result.addAll(matchAllList);
    }
  }
  if (DEBUG_PREFERRED) {
    Slog.v(""String_Node_Str"",""String_Node_Str"" + result.size());
  }
  return result;
}",0.937879810938555
195407,"private List<ResolveInfo> filterCandidatesWithDomainPreferedActivitiesLPr(List<ResolveInfo> candidates){
  if (DEBUG_PREFERRED) {
    Slog.v(""String_Node_Str"",""String_Node_Str"" + candidates.size());
  }
  final int userId=UserHandle.getCallingUserId();
  ArrayList<ResolveInfo> result=new ArrayList<ResolveInfo>();
  ArrayList<ResolveInfo> neverList=new ArrayList<ResolveInfo>();
  ArrayList<ResolveInfo> matchAllList=new ArrayList<ResolveInfo>();
synchronized (mPackages) {
    final int count=candidates.size();
    for (int n=0; n < count; n++) {
      ResolveInfo info=candidates.get(n);
      String packageName=info.activityInfo.packageName;
      PackageSetting ps=mSettings.mPackages.get(packageName);
      if (ps != null) {
        int status=getDomainVerificationStatusLPr(ps,userId);
        if (status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS) {
          result.add(info);
        }
 else         if (status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_NEVER) {
          neverList.add(info);
        }
        if (info.handleAllWebDataURI) {
          matchAllList.add(info);
        }
      }
    }
    if (result.size() == 0) {
      result.addAll(candidates);
    }
    result.removeAll(neverList);
    result.removeAll(matchAllList);
    if (result.size() == 0) {
      result.addAll(matchAllList);
    }
  }
  if (DEBUG_PREFERRED) {
    Slog.v(""String_Node_Str"",""String_Node_Str"" + result.size());
  }
  return result;
}","private List<ResolveInfo> filterCandidatesWithDomainPreferedActivitiesLPr(List<ResolveInfo> candidates){
  if (DEBUG_PREFERRED) {
    Slog.v(""String_Node_Str"",""String_Node_Str"" + candidates.size());
  }
  final int userId=UserHandle.getCallingUserId();
  ArrayList<ResolveInfo> result=new ArrayList<ResolveInfo>();
  ArrayList<ResolveInfo> neverList=new ArrayList<ResolveInfo>();
  ArrayList<ResolveInfo> matchAllList=new ArrayList<ResolveInfo>();
synchronized (mPackages) {
    final int count=candidates.size();
    for (int n=0; n < count; n++) {
      ResolveInfo info=candidates.get(n);
      String packageName=info.activityInfo.packageName;
      PackageSetting ps=mSettings.mPackages.get(packageName);
      if (ps != null) {
        int status=getDomainVerificationStatusLPr(ps,userId);
        if (status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS || status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
          result.add(info);
        }
 else         if (status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_NEVER) {
          neverList.add(info);
        }
        if (info.handleAllWebDataURI) {
          matchAllList.add(info);
        }
      }
    }
    if (result.size() == 0) {
      result.addAll(candidates);
    }
    result.removeAll(neverList);
    result.removeAll(matchAllList);
    if (result.size() == 0) {
      result.addAll(matchAllList);
    }
  }
  if (DEBUG_PREFERRED) {
    Slog.v(""String_Node_Str"",""String_Node_Str"" + result.size());
  }
  return result;
}",0.937879810938555
195408,"@Override protected void onDetachedFromWindow(){
  if (mIndeterminate) {
    stopAnimation();
  }
  if (mRefreshProgressRunnable != null) {
    removeCallbacks(mRefreshProgressRunnable);
  }
  if (mRefreshProgressRunnable != null && mRefreshIsPosted) {
    removeCallbacks(mRefreshProgressRunnable);
  }
  if (mAccessibilityEventSender != null) {
    removeCallbacks(mAccessibilityEventSender);
  }
  super.onDetachedFromWindow();
  mAttached=false;
}","@Override protected void onDetachedFromWindow(){
  if (mIndeterminate) {
    stopAnimation();
  }
  if (mRefreshProgressRunnable != null) {
    removeCallbacks(mRefreshProgressRunnable);
    mRefreshIsPosted=false;
  }
  if (mAccessibilityEventSender != null) {
    removeCallbacks(mAccessibilityEventSender);
  }
  super.onDetachedFromWindow();
  mAttached=false;
}",0.6291309669522643
195409,"@Override protected void onDetachedFromWindow(){
  if (mIndeterminate) {
    stopAnimation();
  }
  if (mRefreshProgressRunnable != null) {
    removeCallbacks(mRefreshProgressRunnable);
  }
  if (mRefreshProgressRunnable != null && mRefreshIsPosted) {
    removeCallbacks(mRefreshProgressRunnable);
  }
  if (mAccessibilityEventSender != null) {
    removeCallbacks(mAccessibilityEventSender);
  }
  super.onDetachedFromWindow();
  mAttached=false;
}","@Override protected void onDetachedFromWindow(){
  if (mIndeterminate) {
    stopAnimation();
  }
  if (mRefreshProgressRunnable != null) {
    removeCallbacks(mRefreshProgressRunnable);
    mRefreshIsPosted=false;
  }
  if (mAccessibilityEventSender != null) {
    removeCallbacks(mAccessibilityEventSender);
  }
  super.onDetachedFromWindow();
  mAttached=false;
}",0.6291309669522643
195410,"@Override public void release(){
synchronized (mService) {
    if (mContainerState == CONTAINER_STATE_FINISHING) {
      return;
    }
    mContainerState=CONTAINER_STATE_FINISHING;
    final Message msg=mHandler.obtainMessage(CONTAINER_TASK_LIST_EMPTY_TIMEOUT,this);
    mHandler.sendMessageDelayed(msg,2000);
    long origId=Binder.clearCallingIdentity();
    try {
      mStack.finishAllActivitiesLocked(false);
      removePendingActivityLaunchesLocked(mStack);
    }
  finally {
      Binder.restoreCallingIdentity(origId);
    }
  }
}","@Override public void release(){
synchronized (mService) {
    if (mContainerState == CONTAINER_STATE_FINISHING) {
      return;
    }
    mContainerState=CONTAINER_STATE_FINISHING;
    long origId=Binder.clearCallingIdentity();
    try {
      mStack.finishAllActivitiesLocked(false);
      removePendingActivityLaunchesLocked(mStack);
    }
  finally {
      Binder.restoreCallingIdentity(origId);
    }
  }
}",0.8643533123028391
195411,"void onTaskListEmptyLocked(){
  mHandler.removeMessages(CONTAINER_TASK_LIST_EMPTY_TIMEOUT,this);
  detachLocked();
  deleteActivityContainer(this);
  mHandler.obtainMessage(CONTAINER_CALLBACK_TASK_LIST_EMPTY,this).sendToTarget();
}","void onTaskListEmptyLocked(){
  detachLocked();
  deleteActivityContainer(this);
  mHandler.obtainMessage(CONTAINER_CALLBACK_TASK_LIST_EMPTY,this).sendToTarget();
}",0.830379746835443
195412,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case IDLE_TIMEOUT_MSG:
{
      if (DEBUG_IDLE)       Slog.d(TAG,""String_Node_Str"" + msg.obj);
      if (mService.mDidDexOpt) {
        mService.mDidDexOpt=false;
        Message nmsg=mHandler.obtainMessage(IDLE_TIMEOUT_MSG);
        nmsg.obj=msg.obj;
        mHandler.sendMessageDelayed(nmsg,IDLE_TIMEOUT);
        return;
      }
      activityIdleInternal((ActivityRecord)msg.obj);
    }
  break;
case IDLE_NOW_MSG:
{
  if (DEBUG_IDLE)   Slog.d(TAG,""String_Node_Str"" + msg.obj);
  activityIdleInternal((ActivityRecord)msg.obj);
}
break;
case RESUME_TOP_ACTIVITY_MSG:
{
synchronized (mService) {
resumeTopActivitiesLocked();
}
}
break;
case SLEEP_TIMEOUT_MSG:
{
synchronized (mService) {
if (mService.isSleepingOrShuttingDown()) {
Slog.w(TAG,""String_Node_Str"");
mSleepTimeout=true;
checkReadyForSleepLocked();
}
}
}
break;
case LAUNCH_TIMEOUT_MSG:
{
if (mService.mDidDexOpt) {
mService.mDidDexOpt=false;
mHandler.sendEmptyMessageDelayed(LAUNCH_TIMEOUT_MSG,LAUNCH_TIMEOUT);
return;
}
synchronized (mService) {
if (mLaunchingActivity.isHeld()) {
Slog.w(TAG,""String_Node_Str"");
if (VALIDATE_WAKE_LOCK_CALLER && Binder.getCallingUid() != Process.myUid()) {
throw new IllegalStateException(""String_Node_Str"");
}
mLaunchingActivity.release();
}
}
}
break;
case HANDLE_DISPLAY_ADDED:
{
handleDisplayAdded(msg.arg1);
}
break;
case HANDLE_DISPLAY_CHANGED:
{
handleDisplayChanged(msg.arg1);
}
break;
case HANDLE_DISPLAY_REMOVED:
{
handleDisplayRemoved(msg.arg1);
}
break;
case CONTAINER_CALLBACK_VISIBILITY:
{
final ActivityContainer container=(ActivityContainer)msg.obj;
final IActivityContainerCallback callback=container.mCallback;
if (callback != null) {
try {
callback.setVisible(container.asBinder(),msg.arg1 == 1);
}
 catch (RemoteException e) {
}
}
}
break;
case LOCK_TASK_START_MSG:
{
try {
if (mLockTaskNotify == null) {
mLockTaskNotify=new LockTaskNotify(mService.mContext);
}
mLockTaskNotify.show(true);
mLockTaskModeState=msg.arg2;
if (getStatusBarService() != null) {
int flags=0;
if (mLockTaskModeState == ActivityManager.LOCK_TASK_MODE_LOCKED) {
flags=StatusBarManager.DISABLE_MASK & (~StatusBarManager.DISABLE_BACK);
}
 else if (mLockTaskModeState == ActivityManager.LOCK_TASK_MODE_PINNED) {
flags=StatusBarManager.DISABLE_MASK & (~StatusBarManager.DISABLE_BACK) & (~StatusBarManager.DISABLE_HOME)& (~StatusBarManager.DISABLE_RECENT);
}
getStatusBarService().disable(flags,mToken,mService.mContext.getPackageName());
}
mWindowManager.disableKeyguard(mToken,LOCK_TASK_TAG);
if (getDevicePolicyManager() != null) {
getDevicePolicyManager().notifyLockTaskModeChanged(true,(String)msg.obj,msg.arg1);
}
}
 catch (RemoteException ex) {
throw new RuntimeException(ex);
}
}
break;
case LOCK_TASK_END_MSG:
{
try {
if (getStatusBarService() != null) {
getStatusBarService().disable(StatusBarManager.DISABLE_NONE,mToken,mService.mContext.getPackageName());
}
mWindowManager.reenableKeyguard(mToken);
if (getDevicePolicyManager() != null) {
getDevicePolicyManager().notifyLockTaskModeChanged(false,null,msg.arg1);
}
if (mLockTaskNotify == null) {
mLockTaskNotify=new LockTaskNotify(mService.mContext);
}
mLockTaskNotify.show(false);
try {
boolean shouldLockKeyguard=Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED) != 0;
if (mLockTaskModeState == ActivityManager.LOCK_TASK_MODE_PINNED && shouldLockKeyguard) {
mWindowManager.lockNow(null);
mWindowManager.dismissKeyguard();
new LockPatternUtils(mService.mContext).requireCredentialEntry(UserHandle.USER_ALL);
}
}
 catch (SettingNotFoundException e) {
}
}
 catch (RemoteException ex) {
throw new RuntimeException(ex);
}
 finally {
mLockTaskModeState=ActivityManager.LOCK_TASK_MODE_NONE;
}
}
break;
case CONTAINER_CALLBACK_TASK_LIST_EMPTY:
{
final ActivityContainer container=(ActivityContainer)msg.obj;
final IActivityContainerCallback callback=container.mCallback;
if (callback != null) {
try {
callback.onAllActivitiesComplete(container.asBinder());
}
 catch (RemoteException e) {
}
}
}
break;
case CONTAINER_TASK_LIST_EMPTY_TIMEOUT:
{
synchronized (mService) {
Slog.w(TAG,""String_Node_Str"" + msg.obj);
final ActivityContainer container=(ActivityContainer)msg.obj;
container.mStack.finishAllActivitiesLocked(true);
container.onTaskListEmptyLocked();
}
}
break;
case LAUNCH_TASK_BEHIND_COMPLETE:
{
synchronized (mService) {
ActivityRecord r=ActivityRecord.forTokenLocked((IBinder)msg.obj);
if (r != null) {
handleLaunchTaskBehindCompleteLocked(r);
}
}
}
break;
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case IDLE_TIMEOUT_MSG:
{
      if (DEBUG_IDLE)       Slog.d(TAG,""String_Node_Str"" + msg.obj);
      if (mService.mDidDexOpt) {
        mService.mDidDexOpt=false;
        Message nmsg=mHandler.obtainMessage(IDLE_TIMEOUT_MSG);
        nmsg.obj=msg.obj;
        mHandler.sendMessageDelayed(nmsg,IDLE_TIMEOUT);
        return;
      }
      activityIdleInternal((ActivityRecord)msg.obj);
    }
  break;
case IDLE_NOW_MSG:
{
  if (DEBUG_IDLE)   Slog.d(TAG,""String_Node_Str"" + msg.obj);
  activityIdleInternal((ActivityRecord)msg.obj);
}
break;
case RESUME_TOP_ACTIVITY_MSG:
{
synchronized (mService) {
resumeTopActivitiesLocked();
}
}
break;
case SLEEP_TIMEOUT_MSG:
{
synchronized (mService) {
if (mService.isSleepingOrShuttingDown()) {
Slog.w(TAG,""String_Node_Str"");
mSleepTimeout=true;
checkReadyForSleepLocked();
}
}
}
break;
case LAUNCH_TIMEOUT_MSG:
{
if (mService.mDidDexOpt) {
mService.mDidDexOpt=false;
mHandler.sendEmptyMessageDelayed(LAUNCH_TIMEOUT_MSG,LAUNCH_TIMEOUT);
return;
}
synchronized (mService) {
if (mLaunchingActivity.isHeld()) {
Slog.w(TAG,""String_Node_Str"");
if (VALIDATE_WAKE_LOCK_CALLER && Binder.getCallingUid() != Process.myUid()) {
throw new IllegalStateException(""String_Node_Str"");
}
mLaunchingActivity.release();
}
}
}
break;
case HANDLE_DISPLAY_ADDED:
{
handleDisplayAdded(msg.arg1);
}
break;
case HANDLE_DISPLAY_CHANGED:
{
handleDisplayChanged(msg.arg1);
}
break;
case HANDLE_DISPLAY_REMOVED:
{
handleDisplayRemoved(msg.arg1);
}
break;
case CONTAINER_CALLBACK_VISIBILITY:
{
final ActivityContainer container=(ActivityContainer)msg.obj;
final IActivityContainerCallback callback=container.mCallback;
if (callback != null) {
try {
callback.setVisible(container.asBinder(),msg.arg1 == 1);
}
 catch (RemoteException e) {
}
}
}
break;
case LOCK_TASK_START_MSG:
{
try {
if (mLockTaskNotify == null) {
mLockTaskNotify=new LockTaskNotify(mService.mContext);
}
mLockTaskNotify.show(true);
mLockTaskModeState=msg.arg2;
if (getStatusBarService() != null) {
int flags=0;
if (mLockTaskModeState == ActivityManager.LOCK_TASK_MODE_LOCKED) {
flags=StatusBarManager.DISABLE_MASK & (~StatusBarManager.DISABLE_BACK);
}
 else if (mLockTaskModeState == ActivityManager.LOCK_TASK_MODE_PINNED) {
flags=StatusBarManager.DISABLE_MASK & (~StatusBarManager.DISABLE_BACK) & (~StatusBarManager.DISABLE_HOME)& (~StatusBarManager.DISABLE_RECENT);
}
getStatusBarService().disable(flags,mToken,mService.mContext.getPackageName());
}
mWindowManager.disableKeyguard(mToken,LOCK_TASK_TAG);
if (getDevicePolicyManager() != null) {
getDevicePolicyManager().notifyLockTaskModeChanged(true,(String)msg.obj,msg.arg1);
}
}
 catch (RemoteException ex) {
throw new RuntimeException(ex);
}
}
break;
case LOCK_TASK_END_MSG:
{
try {
if (getStatusBarService() != null) {
getStatusBarService().disable(StatusBarManager.DISABLE_NONE,mToken,mService.mContext.getPackageName());
}
mWindowManager.reenableKeyguard(mToken);
if (getDevicePolicyManager() != null) {
getDevicePolicyManager().notifyLockTaskModeChanged(false,null,msg.arg1);
}
if (mLockTaskNotify == null) {
mLockTaskNotify=new LockTaskNotify(mService.mContext);
}
mLockTaskNotify.show(false);
try {
boolean shouldLockKeyguard=Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED) != 0;
if (mLockTaskModeState == ActivityManager.LOCK_TASK_MODE_PINNED && shouldLockKeyguard) {
mWindowManager.lockNow(null);
mWindowManager.dismissKeyguard();
new LockPatternUtils(mService.mContext).requireCredentialEntry(UserHandle.USER_ALL);
}
}
 catch (SettingNotFoundException e) {
}
}
 catch (RemoteException ex) {
throw new RuntimeException(ex);
}
 finally {
mLockTaskModeState=ActivityManager.LOCK_TASK_MODE_NONE;
}
}
break;
case CONTAINER_CALLBACK_TASK_LIST_EMPTY:
{
final ActivityContainer container=(ActivityContainer)msg.obj;
final IActivityContainerCallback callback=container.mCallback;
if (callback != null) {
try {
callback.onAllActivitiesComplete(container.asBinder());
}
 catch (RemoteException e) {
}
}
}
break;
case LAUNCH_TASK_BEHIND_COMPLETE:
{
synchronized (mService) {
ActivityRecord r=ActivityRecord.forTokenLocked((IBinder)msg.obj);
if (r != null) {
handleLaunchTaskBehindCompleteLocked(r);
}
}
}
break;
}
}",0.944665378934212
195413,"@Override public void release(){
synchronized (mService) {
    if (mContainerState == CONTAINER_STATE_FINISHING) {
      return;
    }
    mContainerState=CONTAINER_STATE_FINISHING;
    final Message msg=mHandler.obtainMessage(CONTAINER_TASK_LIST_EMPTY_TIMEOUT,this);
    mHandler.sendMessageDelayed(msg,2000);
    long origId=Binder.clearCallingIdentity();
    try {
      mStack.finishAllActivitiesLocked(false);
      removePendingActivityLaunchesLocked(mStack);
    }
  finally {
      Binder.restoreCallingIdentity(origId);
    }
  }
}","@Override public void release(){
synchronized (mService) {
    if (mContainerState == CONTAINER_STATE_FINISHING) {
      return;
    }
    mContainerState=CONTAINER_STATE_FINISHING;
    long origId=Binder.clearCallingIdentity();
    try {
      mStack.finishAllActivitiesLocked(false);
      removePendingActivityLaunchesLocked(mStack);
    }
  finally {
      Binder.restoreCallingIdentity(origId);
    }
  }
}",0.8643533123028391
195414,"void onTaskListEmptyLocked(){
  mHandler.removeMessages(CONTAINER_TASK_LIST_EMPTY_TIMEOUT,this);
  detachLocked();
  deleteActivityContainer(this);
  mHandler.obtainMessage(CONTAINER_CALLBACK_TASK_LIST_EMPTY,this).sendToTarget();
}","void onTaskListEmptyLocked(){
  detachLocked();
  deleteActivityContainer(this);
  mHandler.obtainMessage(CONTAINER_CALLBACK_TASK_LIST_EMPTY,this).sendToTarget();
}",0.830379746835443
195415,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case IDLE_TIMEOUT_MSG:
{
      if (DEBUG_IDLE)       Slog.d(TAG,""String_Node_Str"" + msg.obj);
      if (mService.mDidDexOpt) {
        mService.mDidDexOpt=false;
        Message nmsg=mHandler.obtainMessage(IDLE_TIMEOUT_MSG);
        nmsg.obj=msg.obj;
        mHandler.sendMessageDelayed(nmsg,IDLE_TIMEOUT);
        return;
      }
      activityIdleInternal((ActivityRecord)msg.obj);
    }
  break;
case IDLE_NOW_MSG:
{
  if (DEBUG_IDLE)   Slog.d(TAG,""String_Node_Str"" + msg.obj);
  activityIdleInternal((ActivityRecord)msg.obj);
}
break;
case RESUME_TOP_ACTIVITY_MSG:
{
synchronized (mService) {
resumeTopActivitiesLocked();
}
}
break;
case SLEEP_TIMEOUT_MSG:
{
synchronized (mService) {
if (mService.isSleepingOrShuttingDown()) {
Slog.w(TAG,""String_Node_Str"");
mSleepTimeout=true;
checkReadyForSleepLocked();
}
}
}
break;
case LAUNCH_TIMEOUT_MSG:
{
if (mService.mDidDexOpt) {
mService.mDidDexOpt=false;
mHandler.sendEmptyMessageDelayed(LAUNCH_TIMEOUT_MSG,LAUNCH_TIMEOUT);
return;
}
synchronized (mService) {
if (mLaunchingActivity.isHeld()) {
Slog.w(TAG,""String_Node_Str"");
if (VALIDATE_WAKE_LOCK_CALLER && Binder.getCallingUid() != Process.myUid()) {
throw new IllegalStateException(""String_Node_Str"");
}
mLaunchingActivity.release();
}
}
}
break;
case HANDLE_DISPLAY_ADDED:
{
handleDisplayAdded(msg.arg1);
}
break;
case HANDLE_DISPLAY_CHANGED:
{
handleDisplayChanged(msg.arg1);
}
break;
case HANDLE_DISPLAY_REMOVED:
{
handleDisplayRemoved(msg.arg1);
}
break;
case CONTAINER_CALLBACK_VISIBILITY:
{
final ActivityContainer container=(ActivityContainer)msg.obj;
final IActivityContainerCallback callback=container.mCallback;
if (callback != null) {
try {
callback.setVisible(container.asBinder(),msg.arg1 == 1);
}
 catch (RemoteException e) {
}
}
}
break;
case LOCK_TASK_START_MSG:
{
try {
if (mLockTaskNotify == null) {
mLockTaskNotify=new LockTaskNotify(mService.mContext);
}
mLockTaskNotify.show(true);
mLockTaskModeState=msg.arg2;
if (getStatusBarService() != null) {
int flags=0;
if (mLockTaskModeState == ActivityManager.LOCK_TASK_MODE_LOCKED) {
flags=StatusBarManager.DISABLE_MASK & (~StatusBarManager.DISABLE_BACK);
}
 else if (mLockTaskModeState == ActivityManager.LOCK_TASK_MODE_PINNED) {
flags=StatusBarManager.DISABLE_MASK & (~StatusBarManager.DISABLE_BACK) & (~StatusBarManager.DISABLE_HOME)& (~StatusBarManager.DISABLE_RECENT);
}
getStatusBarService().disable(flags,mToken,mService.mContext.getPackageName());
}
mWindowManager.disableKeyguard(mToken,LOCK_TASK_TAG);
if (getDevicePolicyManager() != null) {
getDevicePolicyManager().notifyLockTaskModeChanged(true,(String)msg.obj,msg.arg1);
}
}
 catch (RemoteException ex) {
throw new RuntimeException(ex);
}
}
break;
case LOCK_TASK_END_MSG:
{
try {
if (getStatusBarService() != null) {
getStatusBarService().disable(StatusBarManager.DISABLE_NONE,mToken,mService.mContext.getPackageName());
}
mWindowManager.reenableKeyguard(mToken);
if (getDevicePolicyManager() != null) {
getDevicePolicyManager().notifyLockTaskModeChanged(false,null,msg.arg1);
}
if (mLockTaskNotify == null) {
mLockTaskNotify=new LockTaskNotify(mService.mContext);
}
mLockTaskNotify.show(false);
try {
boolean shouldLockKeyguard=Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED) != 0;
if (mLockTaskModeState == ActivityManager.LOCK_TASK_MODE_PINNED && shouldLockKeyguard) {
mWindowManager.lockNow(null);
mWindowManager.dismissKeyguard();
new LockPatternUtils(mService.mContext).requireCredentialEntry(UserHandle.USER_ALL);
}
}
 catch (SettingNotFoundException e) {
}
}
 catch (RemoteException ex) {
throw new RuntimeException(ex);
}
 finally {
mLockTaskModeState=ActivityManager.LOCK_TASK_MODE_NONE;
}
}
break;
case CONTAINER_CALLBACK_TASK_LIST_EMPTY:
{
final ActivityContainer container=(ActivityContainer)msg.obj;
final IActivityContainerCallback callback=container.mCallback;
if (callback != null) {
try {
callback.onAllActivitiesComplete(container.asBinder());
}
 catch (RemoteException e) {
}
}
}
break;
case CONTAINER_TASK_LIST_EMPTY_TIMEOUT:
{
synchronized (mService) {
Slog.w(TAG,""String_Node_Str"" + msg.obj);
final ActivityContainer container=(ActivityContainer)msg.obj;
container.mStack.finishAllActivitiesLocked(true);
container.onTaskListEmptyLocked();
}
}
break;
case LAUNCH_TASK_BEHIND_COMPLETE:
{
synchronized (mService) {
ActivityRecord r=ActivityRecord.forTokenLocked((IBinder)msg.obj);
if (r != null) {
handleLaunchTaskBehindCompleteLocked(r);
}
}
}
break;
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case IDLE_TIMEOUT_MSG:
{
      if (DEBUG_IDLE)       Slog.d(TAG,""String_Node_Str"" + msg.obj);
      if (mService.mDidDexOpt) {
        mService.mDidDexOpt=false;
        Message nmsg=mHandler.obtainMessage(IDLE_TIMEOUT_MSG);
        nmsg.obj=msg.obj;
        mHandler.sendMessageDelayed(nmsg,IDLE_TIMEOUT);
        return;
      }
      activityIdleInternal((ActivityRecord)msg.obj);
    }
  break;
case IDLE_NOW_MSG:
{
  if (DEBUG_IDLE)   Slog.d(TAG,""String_Node_Str"" + msg.obj);
  activityIdleInternal((ActivityRecord)msg.obj);
}
break;
case RESUME_TOP_ACTIVITY_MSG:
{
synchronized (mService) {
resumeTopActivitiesLocked();
}
}
break;
case SLEEP_TIMEOUT_MSG:
{
synchronized (mService) {
if (mService.isSleepingOrShuttingDown()) {
Slog.w(TAG,""String_Node_Str"");
mSleepTimeout=true;
checkReadyForSleepLocked();
}
}
}
break;
case LAUNCH_TIMEOUT_MSG:
{
if (mService.mDidDexOpt) {
mService.mDidDexOpt=false;
mHandler.sendEmptyMessageDelayed(LAUNCH_TIMEOUT_MSG,LAUNCH_TIMEOUT);
return;
}
synchronized (mService) {
if (mLaunchingActivity.isHeld()) {
Slog.w(TAG,""String_Node_Str"");
if (VALIDATE_WAKE_LOCK_CALLER && Binder.getCallingUid() != Process.myUid()) {
throw new IllegalStateException(""String_Node_Str"");
}
mLaunchingActivity.release();
}
}
}
break;
case HANDLE_DISPLAY_ADDED:
{
handleDisplayAdded(msg.arg1);
}
break;
case HANDLE_DISPLAY_CHANGED:
{
handleDisplayChanged(msg.arg1);
}
break;
case HANDLE_DISPLAY_REMOVED:
{
handleDisplayRemoved(msg.arg1);
}
break;
case CONTAINER_CALLBACK_VISIBILITY:
{
final ActivityContainer container=(ActivityContainer)msg.obj;
final IActivityContainerCallback callback=container.mCallback;
if (callback != null) {
try {
callback.setVisible(container.asBinder(),msg.arg1 == 1);
}
 catch (RemoteException e) {
}
}
}
break;
case LOCK_TASK_START_MSG:
{
try {
if (mLockTaskNotify == null) {
mLockTaskNotify=new LockTaskNotify(mService.mContext);
}
mLockTaskNotify.show(true);
mLockTaskModeState=msg.arg2;
if (getStatusBarService() != null) {
int flags=0;
if (mLockTaskModeState == ActivityManager.LOCK_TASK_MODE_LOCKED) {
flags=StatusBarManager.DISABLE_MASK & (~StatusBarManager.DISABLE_BACK);
}
 else if (mLockTaskModeState == ActivityManager.LOCK_TASK_MODE_PINNED) {
flags=StatusBarManager.DISABLE_MASK & (~StatusBarManager.DISABLE_BACK) & (~StatusBarManager.DISABLE_HOME)& (~StatusBarManager.DISABLE_RECENT);
}
getStatusBarService().disable(flags,mToken,mService.mContext.getPackageName());
}
mWindowManager.disableKeyguard(mToken,LOCK_TASK_TAG);
if (getDevicePolicyManager() != null) {
getDevicePolicyManager().notifyLockTaskModeChanged(true,(String)msg.obj,msg.arg1);
}
}
 catch (RemoteException ex) {
throw new RuntimeException(ex);
}
}
break;
case LOCK_TASK_END_MSG:
{
try {
if (getStatusBarService() != null) {
getStatusBarService().disable(StatusBarManager.DISABLE_NONE,mToken,mService.mContext.getPackageName());
}
mWindowManager.reenableKeyguard(mToken);
if (getDevicePolicyManager() != null) {
getDevicePolicyManager().notifyLockTaskModeChanged(false,null,msg.arg1);
}
if (mLockTaskNotify == null) {
mLockTaskNotify=new LockTaskNotify(mService.mContext);
}
mLockTaskNotify.show(false);
try {
boolean shouldLockKeyguard=Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED) != 0;
if (mLockTaskModeState == ActivityManager.LOCK_TASK_MODE_PINNED && shouldLockKeyguard) {
mWindowManager.lockNow(null);
mWindowManager.dismissKeyguard();
new LockPatternUtils(mService.mContext).requireCredentialEntry(UserHandle.USER_ALL);
}
}
 catch (SettingNotFoundException e) {
}
}
 catch (RemoteException ex) {
throw new RuntimeException(ex);
}
 finally {
mLockTaskModeState=ActivityManager.LOCK_TASK_MODE_NONE;
}
}
break;
case CONTAINER_CALLBACK_TASK_LIST_EMPTY:
{
final ActivityContainer container=(ActivityContainer)msg.obj;
final IActivityContainerCallback callback=container.mCallback;
if (callback != null) {
try {
callback.onAllActivitiesComplete(container.asBinder());
}
 catch (RemoteException e) {
}
}
}
break;
case LAUNCH_TASK_BEHIND_COMPLETE:
{
synchronized (mService) {
ActivityRecord r=ActivityRecord.forTokenLocked((IBinder)msg.obj);
if (r != null) {
handleLaunchTaskBehindCompleteLocked(r);
}
}
}
break;
}
}",0.944665378934212
195416,"@Override protected void onDetachedFromWindow(){
  if (mIndeterminate) {
    stopAnimation();
  }
  if (mRefreshProgressRunnable != null) {
    removeCallbacks(mRefreshProgressRunnable);
  }
  if (mRefreshProgressRunnable != null && mRefreshIsPosted) {
    removeCallbacks(mRefreshProgressRunnable);
  }
  if (mAccessibilityEventSender != null) {
    removeCallbacks(mAccessibilityEventSender);
  }
  super.onDetachedFromWindow();
  mAttached=false;
}","@Override protected void onDetachedFromWindow(){
  if (mIndeterminate) {
    stopAnimation();
  }
  if (mRefreshProgressRunnable != null) {
    removeCallbacks(mRefreshProgressRunnable);
    mRefreshIsPosted=false;
  }
  if (mAccessibilityEventSender != null) {
    removeCallbacks(mAccessibilityEventSender);
  }
  super.onDetachedFromWindow();
  mAttached=false;
}",0.6291309669522643
195417,"@Override protected void onDetachedFromWindow(){
  if (mIndeterminate) {
    stopAnimation();
  }
  if (mRefreshProgressRunnable != null) {
    removeCallbacks(mRefreshProgressRunnable);
  }
  if (mRefreshProgressRunnable != null && mRefreshIsPosted) {
    removeCallbacks(mRefreshProgressRunnable);
  }
  if (mAccessibilityEventSender != null) {
    removeCallbacks(mAccessibilityEventSender);
  }
  super.onDetachedFromWindow();
  mAttached=false;
}","@Override protected void onDetachedFromWindow(){
  if (mIndeterminate) {
    stopAnimation();
  }
  if (mRefreshProgressRunnable != null) {
    removeCallbacks(mRefreshProgressRunnable);
    mRefreshIsPosted=false;
  }
  if (mAccessibilityEventSender != null) {
    removeCallbacks(mAccessibilityEventSender);
  }
  super.onDetachedFromWindow();
  mAttached=false;
}",0.6291309669522643
195418,"/** 
 * Create an intrinsic for applying a blur to an allocation. The default radius is 5.0. Supported elements types are   {@link Element#U8_4}
 * @param rs The RenderScript context
 * @param e Element type for inputs and outputs
 * @return ScriptIntrinsicBlur
 */
public static ScriptIntrinsicBlur create(RenderScript rs,Element e){
  if ((!e.isCompatible(Element.U8_4(rs))) && (!e.isCompatible(Element.U8(rs)))) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
  long id=rs.nScriptIntrinsicCreate(5,e.getID(rs));
  ScriptIntrinsicBlur sib=new ScriptIntrinsicBlur(id,rs);
  sib.setRadius(5.f);
  return sib;
}","/** 
 * Create an intrinsic for applying a blur to an allocation. The default radius is 5.0. Supported elements types are   {@link Element#U8_4 Element#U8}
 * @param rs The RenderScript context
 * @param e Element type for inputs and outputs
 * @return ScriptIntrinsicBlur
 */
public static ScriptIntrinsicBlur create(RenderScript rs,Element e){
  if ((!e.isCompatible(Element.U8_4(rs))) && (!e.isCompatible(Element.U8(rs)))) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
  long id=rs.nScriptIntrinsicCreate(5,e.getID(rs));
  ScriptIntrinsicBlur sib=new ScriptIntrinsicBlur(id,rs);
  sib.setRadius(5.f);
  return sib;
}",0.991331757289204
195419,"/** 
 * Create an intrinsic for applying a blur to an allocation. The default radius is 5.0. Supported elements types are   {@link Element#U8_4}
 * @param rs The RenderScript context
 * @param e Element type for inputs and outputs
 * @return ScriptIntrinsicBlur
 */
public static ScriptIntrinsicBlur create(RenderScript rs,Element e){
  if ((!e.isCompatible(Element.U8_4(rs))) && (!e.isCompatible(Element.U8(rs)))) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
  long id=rs.nScriptIntrinsicCreate(5,e.getID(rs));
  ScriptIntrinsicBlur sib=new ScriptIntrinsicBlur(id,rs);
  sib.setRadius(5.f);
  return sib;
}","/** 
 * Create an intrinsic for applying a blur to an allocation. The default radius is 5.0. Supported elements types are   {@link Element#U8_4 Element#U8}
 * @param rs The RenderScript context
 * @param e Element type for inputs and outputs
 * @return ScriptIntrinsicBlur
 */
public static ScriptIntrinsicBlur create(RenderScript rs,Element e){
  if ((!e.isCompatible(Element.U8_4(rs))) && (!e.isCompatible(Element.U8(rs)))) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
  long id=rs.nScriptIntrinsicCreate(5,e.getID(rs));
  ScriptIntrinsicBlur sib=new ScriptIntrinsicBlur(id,rs);
  sib.setRadius(5.f);
  return sib;
}",0.991331757289204
195420,"/** 
 * Create an intrinsic for applying a blur to an allocation. The default radius is 5.0. Supported elements types are   {@link Element#U8_4}
 * @param rs The RenderScript context
 * @param e Element type for inputs and outputs
 * @return ScriptIntrinsicBlur
 */
public static ScriptIntrinsicBlur create(RenderScript rs,Element e){
  if ((!e.isCompatible(Element.U8_4(rs))) && (!e.isCompatible(Element.U8(rs)))) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
  long id=rs.nScriptIntrinsicCreate(5,e.getID(rs));
  ScriptIntrinsicBlur sib=new ScriptIntrinsicBlur(id,rs);
  sib.setRadius(5.f);
  return sib;
}","/** 
 * Create an intrinsic for applying a blur to an allocation. The default radius is 5.0. Supported elements types are   {@link Element#U8_4 Element#U8}
 * @param rs The RenderScript context
 * @param e Element type for inputs and outputs
 * @return ScriptIntrinsicBlur
 */
public static ScriptIntrinsicBlur create(RenderScript rs,Element e){
  if ((!e.isCompatible(Element.U8_4(rs))) && (!e.isCompatible(Element.U8(rs)))) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
  long id=rs.nScriptIntrinsicCreate(5,e.getID(rs));
  ScriptIntrinsicBlur sib=new ScriptIntrinsicBlur(id,rs);
  sib.setRadius(5.f);
  return sib;
}",0.991331757289204
195421,"private void insertTaskAtTop(TaskRecord task){
  if (task.isOverHomeStack()) {
    final TaskRecord nextTask=getNextTask(task);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(task.getTaskToReturnTo());
    }
  }
  if (isOnHomeDisplay()) {
    ActivityStack lastStack=mStackSupervisor.getLastStack();
    final boolean fromHome=lastStack.isHomeStack();
    if (!isHomeStack() && (fromHome || topTask() != task)) {
      task.setTaskToReturnTo(fromHome ? lastStack.topTask() == null ? HOME_ACTIVITY_TYPE : lastStack.topTask().taskType : APPLICATION_ACTIVITY_TYPE);
    }
  }
 else {
    task.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
  }
  mTaskHistory.remove(task);
  int taskNdx=mTaskHistory.size();
  if (!isCurrentProfileLocked(task.userId)) {
    while (--taskNdx >= 0) {
      if (!isCurrentProfileLocked(mTaskHistory.get(taskNdx).userId)) {
        break;
      }
    }
    ++taskNdx;
  }
  mTaskHistory.add(taskNdx,task);
  updateTaskMovement(task,true);
}","private void insertTaskAtTop(TaskRecord task,ActivityRecord newActivity){
  if (task.isOverHomeStack()) {
    final TaskRecord nextTask=getNextTask(task);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(task.getTaskToReturnTo());
    }
  }
  if (isOnHomeDisplay()) {
    ActivityStack lastStack=mStackSupervisor.getLastStack();
    final boolean fromHome=lastStack.isHomeStack();
    if (!isHomeStack() && (fromHome || topTask() != task)) {
      task.setTaskToReturnTo(fromHome ? lastStack.topTask() == null ? HOME_ACTIVITY_TYPE : lastStack.topTask().taskType : APPLICATION_ACTIVITY_TYPE);
    }
  }
 else {
    task.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
  }
  mTaskHistory.remove(task);
  int taskNdx=mTaskHistory.size();
  final boolean notShownWhenLocked=(newActivity != null && (newActivity.info.flags & FLAG_SHOW_ON_LOCK_SCREEN) == 0) || (newActivity == null && task.topRunningActivityLocked(null) == null);
  if (!isCurrentProfileLocked(task.userId) && notShownWhenLocked) {
    while (--taskNdx >= 0) {
      final TaskRecord tmpTask=mTaskHistory.get(taskNdx);
      if (!isCurrentProfileLocked(tmpTask.userId) || tmpTask.topRunningActivityLocked(null) == null) {
        break;
      }
    }
    ++taskNdx;
  }
  mTaskHistory.add(taskNdx,task);
  updateTaskMovement(task,true);
}",0.8230668414154653
195422,"/** 
 * Returns the first activity (starting from the top of the stack) that is the same as the given activity.  Returns null if no such activity is found.
 */
ActivityRecord findActivityLocked(Intent intent,ActivityInfo info){
  ComponentName cls=intent.getComponent();
  if (info.targetActivity != null) {
    cls=new ComponentName(info.packageName,info.targetActivity);
  }
  final int userId=UserHandle.getUserId(info.applicationInfo.uid);
  for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
    TaskRecord task=mTaskHistory.get(taskNdx);
    if (!isCurrentProfileLocked(task.userId)) {
      return null;
    }
    final ArrayList<ActivityRecord> activities=task.mActivities;
    for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
      ActivityRecord r=activities.get(activityNdx);
      if (!r.finishing && r.intent.getComponent().equals(cls) && r.userId == userId) {
        return r;
      }
    }
  }
  return null;
}","/** 
 * Returns the first activity (starting from the top of the stack) that is the same as the given activity.  Returns null if no such activity is found.
 */
ActivityRecord findActivityLocked(Intent intent,ActivityInfo info){
  ComponentName cls=intent.getComponent();
  if (info.targetActivity != null) {
    cls=new ComponentName(info.packageName,info.targetActivity);
  }
  final int userId=UserHandle.getUserId(info.applicationInfo.uid);
  for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    final boolean notCurrentUserTask=!isCurrentProfileLocked(task.userId);
    final ArrayList<ActivityRecord> activities=task.mActivities;
    for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
      ActivityRecord r=activities.get(activityNdx);
      if (notCurrentUserTask && (r.info.flags & FLAG_SHOW_ON_LOCK_SCREEN) == 0) {
        return null;
      }
      if (!r.finishing && r.intent.getComponent().equals(cls) && r.userId == userId) {
        return r;
      }
    }
  }
  return null;
}",0.8669569424286405
195423,"void addTask(final TaskRecord task,final boolean toTop,boolean moving){
  task.stack=this;
  if (toTop) {
    insertTaskAtTop(task);
  }
 else {
    mTaskHistory.add(0,task);
    updateTaskMovement(task,false);
  }
  if (!moving && task.voiceSession != null) {
    try {
      task.voiceSession.taskStarted(task.intent,task.taskId);
    }
 catch (    RemoteException e) {
    }
  }
}","void addTask(final TaskRecord task,final boolean toTop,boolean moving){
  task.stack=this;
  if (toTop) {
    insertTaskAtTop(task,null);
  }
 else {
    mTaskHistory.add(0,task);
    updateTaskMovement(task,false);
  }
  if (!moving && task.voiceSession != null) {
    try {
      task.voiceSession.taskStarted(task.intent,task.taskId);
    }
 catch (    RemoteException e) {
    }
  }
}",0.993514915693904
195424,"final void moveTaskToFrontLocked(TaskRecord tr,boolean noAnimation,Bundle options,String reason){
  if (DEBUG_SWITCH)   Slog.v(TAG_SWITCH,""String_Node_Str"" + tr);
  final int numTasks=mTaskHistory.size();
  final int index=mTaskHistory.indexOf(tr);
  if (numTasks == 0 || index < 0) {
    if (noAnimation) {
      ActivityOptions.abort(options);
    }
 else {
      updateTransitLocked(AppTransition.TRANSIT_TASK_TO_FRONT,options);
    }
    return;
  }
  insertTaskAtTop(tr);
  ActivityRecord r=topRunningActivityLocked(null);
  mService.setFocusedActivityLocked(r,reason);
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + tr);
  if (noAnimation) {
    mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE,false);
    if (r != null) {
      mNoAnimActivities.add(r);
    }
    ActivityOptions.abort(options);
  }
 else {
    updateTransitLocked(AppTransition.TRANSIT_TASK_TO_FRONT,options);
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  EventLog.writeEvent(EventLogTags.AM_TASK_TO_FRONT,tr.userId,tr.taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
}","final void moveTaskToFrontLocked(TaskRecord tr,boolean noAnimation,Bundle options,String reason){
  if (DEBUG_SWITCH)   Slog.v(TAG_SWITCH,""String_Node_Str"" + tr);
  final int numTasks=mTaskHistory.size();
  final int index=mTaskHistory.indexOf(tr);
  if (numTasks == 0 || index < 0) {
    if (noAnimation) {
      ActivityOptions.abort(options);
    }
 else {
      updateTransitLocked(AppTransition.TRANSIT_TASK_TO_FRONT,options);
    }
    return;
  }
  insertTaskAtTop(tr,null);
  ActivityRecord r=topRunningActivityLocked(null);
  mService.setFocusedActivityLocked(r,reason);
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + tr);
  if (noAnimation) {
    mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE,false);
    if (r != null) {
      mNoAnimActivities.add(r);
    }
    ActivityOptions.abort(options);
  }
 else {
    updateTransitLocked(AppTransition.TRANSIT_TASK_TO_FRONT,options);
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  EventLog.writeEvent(EventLogTags.AM_TASK_TO_FRONT,tr.userId,tr.taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
}",0.9977487618190004
195425,"final void startActivityLocked(ActivityRecord r,boolean newTask,boolean doResume,boolean keepCurTransition,Bundle options){
  TaskRecord rTask=r.task;
  final int taskId=rTask.taskId;
  if (!r.mLaunchTaskBehind && (taskForIdLocked(taskId) == null || newTask)) {
    insertTaskAtTop(rTask);
    mWindowManager.moveTaskToTop(taskId);
  }
  TaskRecord task=null;
  if (!newTask) {
    boolean startIt=true;
    for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
      task=mTaskHistory.get(taskNdx);
      if (task.getTopActivity() == null) {
        continue;
      }
      if (task == r.task) {
        if (!startIt) {
          if (DEBUG_ADD_REMOVE)           Slog.i(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ task,new RuntimeException(""String_Node_Str"").fillInStackTrace());
          task.addActivityToTop(r);
          r.putInHistory();
          mWindowManager.addAppToken(task.mActivities.indexOf(r),r.appToken,r.task.taskId,mStackId,r.info.screenOrientation,r.fullscreen,(r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0,r.userId,r.info.configChanges,task.voiceSession != null,r.mLaunchTaskBehind);
          if (VALIDATE_TOKENS) {
            validateAppTokensLocked();
          }
          ActivityOptions.abort(options);
          return;
        }
        break;
      }
 else       if (task.numFullscreen > 0) {
        startIt=false;
      }
    }
  }
  if (task == r.task && mTaskHistory.indexOf(task) != (mTaskHistory.size() - 1)) {
    mStackSupervisor.mUserLeaving=false;
    if (DEBUG_USER_LEAVING)     Slog.v(TAG_USER_LEAVING,""String_Node_Str"");
  }
  task=r.task;
  if (DEBUG_ADD_REMOVE)   Slog.i(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ task,new RuntimeException(""String_Node_Str"").fillInStackTrace());
  task.addActivityToTop(r);
  task.setFrontOfTask();
  r.putInHistory();
  if (!isHomeStack() || numActivities() > 0) {
    boolean showStartingIcon=newTask;
    ProcessRecord proc=r.app;
    if (proc == null) {
      proc=mService.mProcessNames.get(r.processName,r.info.applicationInfo.uid);
    }
    if (proc == null || proc.thread == null) {
      showStartingIcon=true;
    }
    if (DEBUG_TRANSITION)     Slog.v(TAG_TRANSITION,""String_Node_Str"" + r);
    if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0) {
      mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE,keepCurTransition);
      mNoAnimActivities.add(r);
    }
 else {
      mWindowManager.prepareAppTransition(newTask ? r.mLaunchTaskBehind ? AppTransition.TRANSIT_TASK_OPEN_BEHIND : AppTransition.TRANSIT_TASK_OPEN : AppTransition.TRANSIT_ACTIVITY_OPEN,keepCurTransition);
      mNoAnimActivities.remove(r);
    }
    mWindowManager.addAppToken(task.mActivities.indexOf(r),r.appToken,r.task.taskId,mStackId,r.info.screenOrientation,r.fullscreen,(r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0,r.userId,r.info.configChanges,task.voiceSession != null,r.mLaunchTaskBehind);
    boolean doShow=true;
    if (newTask) {
      if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) != 0) {
        resetTaskIfNeededLocked(r,r);
        doShow=topRunningNonDelayedActivityLocked(null) == r;
      }
    }
 else     if (options != null && new ActivityOptions(options).getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION) {
      doShow=false;
    }
    if (r.mLaunchTaskBehind) {
      mWindowManager.setAppVisibility(r.appToken,true);
      ensureActivitiesVisibleLocked(null,0);
    }
 else     if (SHOW_APP_STARTING_PREVIEW && doShow) {
      ActivityRecord prev=mResumedActivity;
      if (prev != null) {
        if (prev.task != r.task) {
          prev=null;
        }
 else         if (prev.nowVisible) {
          prev=null;
        }
      }
      mWindowManager.setAppStartingWindow(r.appToken,r.packageName,r.theme,mService.compatibilityInfoForPackageLocked(r.info.applicationInfo),r.nonLocalizedLabel,r.labelRes,r.icon,r.logo,r.windowFlags,prev != null ? prev.appToken : null,showStartingIcon);
      r.mStartingWindowShown=true;
    }
  }
 else {
    mWindowManager.addAppToken(task.mActivities.indexOf(r),r.appToken,r.task.taskId,mStackId,r.info.screenOrientation,r.fullscreen,(r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0,r.userId,r.info.configChanges,task.voiceSession != null,r.mLaunchTaskBehind);
    ActivityOptions.abort(options);
    options=null;
  }
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  if (doResume) {
    mStackSupervisor.resumeTopActivitiesLocked(this,r,options);
  }
}","final void startActivityLocked(ActivityRecord r,boolean newTask,boolean doResume,boolean keepCurTransition,Bundle options){
  TaskRecord rTask=r.task;
  final int taskId=rTask.taskId;
  if (!r.mLaunchTaskBehind && (taskForIdLocked(taskId) == null || newTask)) {
    insertTaskAtTop(rTask,r);
    mWindowManager.moveTaskToTop(taskId);
  }
  TaskRecord task=null;
  if (!newTask) {
    boolean startIt=true;
    for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
      task=mTaskHistory.get(taskNdx);
      if (task.getTopActivity() == null) {
        continue;
      }
      if (task == r.task) {
        if (!startIt) {
          if (DEBUG_ADD_REMOVE)           Slog.i(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ task,new RuntimeException(""String_Node_Str"").fillInStackTrace());
          task.addActivityToTop(r);
          r.putInHistory();
          mWindowManager.addAppToken(task.mActivities.indexOf(r),r.appToken,r.task.taskId,mStackId,r.info.screenOrientation,r.fullscreen,(r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0,r.userId,r.info.configChanges,task.voiceSession != null,r.mLaunchTaskBehind);
          if (VALIDATE_TOKENS) {
            validateAppTokensLocked();
          }
          ActivityOptions.abort(options);
          return;
        }
        break;
      }
 else       if (task.numFullscreen > 0) {
        startIt=false;
      }
    }
  }
  if (task == r.task && mTaskHistory.indexOf(task) != (mTaskHistory.size() - 1)) {
    mStackSupervisor.mUserLeaving=false;
    if (DEBUG_USER_LEAVING)     Slog.v(TAG_USER_LEAVING,""String_Node_Str"");
  }
  task=r.task;
  if (DEBUG_ADD_REMOVE)   Slog.i(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ task,new RuntimeException(""String_Node_Str"").fillInStackTrace());
  task.addActivityToTop(r);
  task.setFrontOfTask();
  r.putInHistory();
  if (!isHomeStack() || numActivities() > 0) {
    boolean showStartingIcon=newTask;
    ProcessRecord proc=r.app;
    if (proc == null) {
      proc=mService.mProcessNames.get(r.processName,r.info.applicationInfo.uid);
    }
    if (proc == null || proc.thread == null) {
      showStartingIcon=true;
    }
    if (DEBUG_TRANSITION)     Slog.v(TAG_TRANSITION,""String_Node_Str"" + r);
    if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0) {
      mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE,keepCurTransition);
      mNoAnimActivities.add(r);
    }
 else {
      mWindowManager.prepareAppTransition(newTask ? r.mLaunchTaskBehind ? AppTransition.TRANSIT_TASK_OPEN_BEHIND : AppTransition.TRANSIT_TASK_OPEN : AppTransition.TRANSIT_ACTIVITY_OPEN,keepCurTransition);
      mNoAnimActivities.remove(r);
    }
    mWindowManager.addAppToken(task.mActivities.indexOf(r),r.appToken,r.task.taskId,mStackId,r.info.screenOrientation,r.fullscreen,(r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0,r.userId,r.info.configChanges,task.voiceSession != null,r.mLaunchTaskBehind);
    boolean doShow=true;
    if (newTask) {
      if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) != 0) {
        resetTaskIfNeededLocked(r,r);
        doShow=topRunningNonDelayedActivityLocked(null) == r;
      }
    }
 else     if (options != null && new ActivityOptions(options).getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION) {
      doShow=false;
    }
    if (r.mLaunchTaskBehind) {
      mWindowManager.setAppVisibility(r.appToken,true);
      ensureActivitiesVisibleLocked(null,0);
    }
 else     if (SHOW_APP_STARTING_PREVIEW && doShow) {
      ActivityRecord prev=mResumedActivity;
      if (prev != null) {
        if (prev.task != r.task) {
          prev=null;
        }
 else         if (prev.nowVisible) {
          prev=null;
        }
      }
      mWindowManager.setAppStartingWindow(r.appToken,r.packageName,r.theme,mService.compatibilityInfoForPackageLocked(r.info.applicationInfo),r.nonLocalizedLabel,r.labelRes,r.icon,r.logo,r.windowFlags,prev != null ? prev.appToken : null,showStartingIcon);
      r.mStartingWindowShown=true;
    }
  }
 else {
    mWindowManager.addAppToken(task.mActivities.indexOf(r),r.appToken,r.task.taskId,mStackId,r.info.screenOrientation,r.fullscreen,(r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0,r.userId,r.info.configChanges,task.voiceSession != null,r.mLaunchTaskBehind);
    ActivityOptions.abort(options);
    options=null;
  }
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  if (doResume) {
    mStackSupervisor.resumeTopActivitiesLocked(this,r,options);
  }
}",0.9997789078045544
195426,"boolean okToShowLocked(ActivityRecord r){
  return isCurrentProfileLocked(r.userId) || (r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0;
}","boolean okToShowLocked(ActivityRecord r){
  return isCurrentProfileLocked(r.userId) || (r.info.flags & FLAG_SHOW_ON_LOCK_SCREEN) != 0;
}",0.9543859649122808
195427,"final void switchUserLocked(int userId){
  if (mCurrentUser == userId) {
    return;
  }
  mCurrentUser=userId;
  int index=mTaskHistory.size();
  for (int i=0; i < index; ) {
    TaskRecord task=mTaskHistory.get(i);
    if (isCurrentProfileLocked(task.userId)) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + getStackId() + ""String_Node_Str""+ task+ ""String_Node_Str"");
      mTaskHistory.remove(i);
      mTaskHistory.add(task);
      --index;
    }
 else {
      ++i;
    }
  }
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
}","final void switchUserLocked(int userId){
  if (mCurrentUser == userId) {
    return;
  }
  mCurrentUser=userId;
  int index=mTaskHistory.size();
  for (int i=0; i < index; ) {
    final TaskRecord task=mTaskHistory.get(i);
    if (isCurrentProfileLocked(task.userId) || task.topRunningActivityLocked(null) != null) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + getStackId() + ""String_Node_Str""+ task+ ""String_Node_Str"");
      mTaskHistory.remove(i);
      mTaskHistory.add(task);
      --index;
    }
 else {
      ++i;
    }
  }
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
}",0.9548936170212766
195428,"/** 
 * Put a Task in this stack. Used for adding and moving.
 * @param task The task to add.
 * @param toTop Whether to add it to the top or bottom.
 */
void addTask(Task task,boolean toTop){
  int stackNdx;
  if (!toTop) {
    stackNdx=0;
  }
 else {
    stackNdx=mTasks.size();
    if (!mService.isCurrentProfileLocked(task.mUserId)) {
      while (--stackNdx >= 0) {
        if (!mService.isCurrentProfileLocked(mTasks.get(stackNdx).mUserId)) {
          break;
        }
      }
      ++stackNdx;
    }
  }
  if (DEBUG_TASK_MOVEMENT)   Slog.d(TAG,""String_Node_Str"" + task + ""String_Node_Str""+ toTop+ ""String_Node_Str""+ stackNdx);
  mTasks.add(stackNdx,task);
  task.mStack=this;
  if (toTop) {
    mDisplayContent.moveStack(this,true);
  }
  EventLog.writeEvent(EventLogTags.WM_TASK_MOVED,task.mTaskId,toTop ? 1 : 0,stackNdx);
}","/** 
 * Put a Task in this stack. Used for adding and moving.
 * @param task The task to add.
 * @param toTop Whether to add it to the top or bottom.
 * @param showWhenLocked Whether to show the task when the device is lockedregardless of the current user.
 */
void addTask(Task task,boolean toTop,boolean showWhenLocked){
  int stackNdx;
  if (!toTop) {
    stackNdx=0;
  }
 else {
    stackNdx=mTasks.size();
    if (!showWhenLocked && !mService.isCurrentProfileLocked(task.mUserId)) {
      while (--stackNdx >= 0) {
        final Task tmpTask=mTasks.get(stackNdx);
        if (!tmpTask.showWhenLocked() || !mService.isCurrentProfileLocked(tmpTask.mUserId)) {
          break;
        }
      }
      ++stackNdx;
    }
  }
  if (DEBUG_TASK_MOVEMENT)   Slog.d(TAG,""String_Node_Str"" + task + ""String_Node_Str""+ toTop+ ""String_Node_Str""+ stackNdx);
  mTasks.add(stackNdx,task);
  task.mStack=this;
  if (toTop) {
    mDisplayContent.moveStack(this,true);
  }
  EventLog.writeEvent(EventLogTags.WM_TASK_MOVED,task.mTaskId,toTop ? 1 : 0,stackNdx);
}",0.8617021276595744
195429,"void switchUser(){
  int top=mTasks.size();
  for (int taskNdx=0; taskNdx < top; ++taskNdx) {
    Task task=mTasks.get(taskNdx);
    if (mService.isCurrentProfileLocked(task.mUserId)) {
      mTasks.remove(taskNdx);
      mTasks.add(task);
      --top;
    }
  }
}","void switchUser(){
  int top=mTasks.size();
  for (int taskNdx=0; taskNdx < top; ++taskNdx) {
    Task task=mTasks.get(taskNdx);
    if (mService.isCurrentProfileLocked(task.mUserId) || task.showWhenLocked()) {
      mTasks.remove(taskNdx);
      mTasks.add(task);
      --top;
    }
  }
}",0.9547920433996384
195430,"private Task createTaskLocked(int taskId,int stackId,int userId,AppWindowToken atoken){
  if (DEBUG_STACK)   Slog.i(TAG,""String_Node_Str"" + taskId + ""String_Node_Str""+ stackId+ ""String_Node_Str""+ atoken);
  final TaskStack stack=mStackIdToStack.get(stackId);
  if (stack == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + stackId);
  }
  EventLog.writeEvent(EventLogTags.WM_TASK_CREATED,taskId,stackId);
  Task task=new Task(taskId,stack,userId,this);
  mTaskIdToTask.put(taskId,task);
  stack.addTask(task,!atoken.mLaunchTaskBehind);
  return task;
}","private Task createTaskLocked(int taskId,int stackId,int userId,AppWindowToken atoken){
  if (DEBUG_STACK)   Slog.i(TAG,""String_Node_Str"" + taskId + ""String_Node_Str""+ stackId+ ""String_Node_Str""+ atoken);
  final TaskStack stack=mStackIdToStack.get(stackId);
  if (stack == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + stackId);
  }
  EventLog.writeEvent(EventLogTags.WM_TASK_CREATED,taskId,stackId);
  Task task=new Task(taskId,stack,userId,this);
  mTaskIdToTask.put(taskId,task);
  stack.addTask(task,!atoken.mLaunchTaskBehind,atoken.showWhenLocked);
  return task;
}",0.9810671256454389
195431,"/** 
 * Create an intrinsic for applying a blur to an allocation. The default radius is 5.0. Supported elements types are   {@link Element#U8_4}
 * @param rs The RenderScript context
 * @param e Element type for inputs and outputs
 * @return ScriptIntrinsicBlur
 */
public static ScriptIntrinsicBlur create(RenderScript rs,Element e){
  if ((!e.isCompatible(Element.U8_4(rs))) && (!e.isCompatible(Element.U8(rs)))) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
  long id=rs.nScriptIntrinsicCreate(5,e.getID(rs));
  ScriptIntrinsicBlur sib=new ScriptIntrinsicBlur(id,rs);
  sib.setRadius(5.f);
  return sib;
}","/** 
 * Create an intrinsic for applying a blur to an allocation. The default radius is 5.0. Supported elements types are   {@link Element#U8_4 Element#U8}
 * @param rs The RenderScript context
 * @param e Element type for inputs and outputs
 * @return ScriptIntrinsicBlur
 */
public static ScriptIntrinsicBlur create(RenderScript rs,Element e){
  if ((!e.isCompatible(Element.U8_4(rs))) && (!e.isCompatible(Element.U8(rs)))) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
  long id=rs.nScriptIntrinsicCreate(5,e.getID(rs));
  ScriptIntrinsicBlur sib=new ScriptIntrinsicBlur(id,rs);
  sib.setRadius(5.f);
  return sib;
}",0.991331757289204
195432,"private void insertTaskAtTop(TaskRecord task){
  if (task.isOverHomeStack()) {
    final TaskRecord nextTask=getNextTask(task);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(task.getTaskToReturnTo());
    }
  }
  if (isOnHomeDisplay()) {
    ActivityStack lastStack=mStackSupervisor.getLastStack();
    final boolean fromHome=lastStack.isHomeStack();
    if (!isHomeStack() && (fromHome || topTask() != task)) {
      task.setTaskToReturnTo(fromHome ? lastStack.topTask() == null ? HOME_ACTIVITY_TYPE : lastStack.topTask().taskType : APPLICATION_ACTIVITY_TYPE);
    }
  }
 else {
    task.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
  }
  mTaskHistory.remove(task);
  int taskNdx=mTaskHistory.size();
  if (!isCurrentProfileLocked(task.userId)) {
    while (--taskNdx >= 0) {
      if (!isCurrentProfileLocked(mTaskHistory.get(taskNdx).userId)) {
        break;
      }
    }
    ++taskNdx;
  }
  mTaskHistory.add(taskNdx,task);
  updateTaskMovement(task,true);
}","private void insertTaskAtTop(TaskRecord task,ActivityRecord newActivity){
  if (task.isOverHomeStack()) {
    final TaskRecord nextTask=getNextTask(task);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(task.getTaskToReturnTo());
    }
  }
  if (isOnHomeDisplay()) {
    ActivityStack lastStack=mStackSupervisor.getLastStack();
    final boolean fromHome=lastStack.isHomeStack();
    if (!isHomeStack() && (fromHome || topTask() != task)) {
      task.setTaskToReturnTo(fromHome ? lastStack.topTask() == null ? HOME_ACTIVITY_TYPE : lastStack.topTask().taskType : APPLICATION_ACTIVITY_TYPE);
    }
  }
 else {
    task.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
  }
  mTaskHistory.remove(task);
  int taskNdx=mTaskHistory.size();
  final boolean notShownWhenLocked=(newActivity != null && (newActivity.info.flags & FLAG_SHOW_ON_LOCK_SCREEN) == 0) || (newActivity == null && task.topRunningActivityLocked(null) == null);
  if (!isCurrentProfileLocked(task.userId) && notShownWhenLocked) {
    while (--taskNdx >= 0) {
      final TaskRecord tmpTask=mTaskHistory.get(taskNdx);
      if (!isCurrentProfileLocked(tmpTask.userId) || tmpTask.topRunningActivityLocked(null) == null) {
        break;
      }
    }
    ++taskNdx;
  }
  mTaskHistory.add(taskNdx,task);
  updateTaskMovement(task,true);
}",0.8230668414154653
195433,"/** 
 * Returns the first activity (starting from the top of the stack) that is the same as the given activity.  Returns null if no such activity is found.
 */
ActivityRecord findActivityLocked(Intent intent,ActivityInfo info){
  ComponentName cls=intent.getComponent();
  if (info.targetActivity != null) {
    cls=new ComponentName(info.packageName,info.targetActivity);
  }
  final int userId=UserHandle.getUserId(info.applicationInfo.uid);
  for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
    TaskRecord task=mTaskHistory.get(taskNdx);
    if (!isCurrentProfileLocked(task.userId)) {
      return null;
    }
    final ArrayList<ActivityRecord> activities=task.mActivities;
    for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
      ActivityRecord r=activities.get(activityNdx);
      if (!r.finishing && r.intent.getComponent().equals(cls) && r.userId == userId) {
        return r;
      }
    }
  }
  return null;
}","/** 
 * Returns the first activity (starting from the top of the stack) that is the same as the given activity.  Returns null if no such activity is found.
 */
ActivityRecord findActivityLocked(Intent intent,ActivityInfo info){
  ComponentName cls=intent.getComponent();
  if (info.targetActivity != null) {
    cls=new ComponentName(info.packageName,info.targetActivity);
  }
  final int userId=UserHandle.getUserId(info.applicationInfo.uid);
  for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    final boolean notCurrentUserTask=!isCurrentProfileLocked(task.userId);
    final ArrayList<ActivityRecord> activities=task.mActivities;
    for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
      ActivityRecord r=activities.get(activityNdx);
      if (notCurrentUserTask && (r.info.flags & FLAG_SHOW_ON_LOCK_SCREEN) == 0) {
        return null;
      }
      if (!r.finishing && r.intent.getComponent().equals(cls) && r.userId == userId) {
        return r;
      }
    }
  }
  return null;
}",0.8669569424286405
195434,"void addTask(final TaskRecord task,final boolean toTop,boolean moving){
  task.stack=this;
  if (toTop) {
    insertTaskAtTop(task);
  }
 else {
    mTaskHistory.add(0,task);
    updateTaskMovement(task,false);
  }
  if (!moving && task.voiceSession != null) {
    try {
      task.voiceSession.taskStarted(task.intent,task.taskId);
    }
 catch (    RemoteException e) {
    }
  }
}","void addTask(final TaskRecord task,final boolean toTop,boolean moving){
  task.stack=this;
  if (toTop) {
    insertTaskAtTop(task,null);
  }
 else {
    mTaskHistory.add(0,task);
    updateTaskMovement(task,false);
  }
  if (!moving && task.voiceSession != null) {
    try {
      task.voiceSession.taskStarted(task.intent,task.taskId);
    }
 catch (    RemoteException e) {
    }
  }
}",0.993514915693904
195435,"final void moveTaskToFrontLocked(TaskRecord tr,boolean noAnimation,Bundle options,String reason){
  if (DEBUG_SWITCH)   Slog.v(TAG_SWITCH,""String_Node_Str"" + tr);
  final int numTasks=mTaskHistory.size();
  final int index=mTaskHistory.indexOf(tr);
  if (numTasks == 0 || index < 0) {
    if (noAnimation) {
      ActivityOptions.abort(options);
    }
 else {
      updateTransitLocked(AppTransition.TRANSIT_TASK_TO_FRONT,options);
    }
    return;
  }
  insertTaskAtTop(tr);
  ActivityRecord r=topRunningActivityLocked(null);
  mService.setFocusedActivityLocked(r,reason);
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + tr);
  if (noAnimation) {
    mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE,false);
    if (r != null) {
      mNoAnimActivities.add(r);
    }
    ActivityOptions.abort(options);
  }
 else {
    updateTransitLocked(AppTransition.TRANSIT_TASK_TO_FRONT,options);
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  EventLog.writeEvent(EventLogTags.AM_TASK_TO_FRONT,tr.userId,tr.taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
}","final void moveTaskToFrontLocked(TaskRecord tr,boolean noAnimation,Bundle options,String reason){
  if (DEBUG_SWITCH)   Slog.v(TAG_SWITCH,""String_Node_Str"" + tr);
  final int numTasks=mTaskHistory.size();
  final int index=mTaskHistory.indexOf(tr);
  if (numTasks == 0 || index < 0) {
    if (noAnimation) {
      ActivityOptions.abort(options);
    }
 else {
      updateTransitLocked(AppTransition.TRANSIT_TASK_TO_FRONT,options);
    }
    return;
  }
  insertTaskAtTop(tr,null);
  ActivityRecord r=topRunningActivityLocked(null);
  mService.setFocusedActivityLocked(r,reason);
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + tr);
  if (noAnimation) {
    mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE,false);
    if (r != null) {
      mNoAnimActivities.add(r);
    }
    ActivityOptions.abort(options);
  }
 else {
    updateTransitLocked(AppTransition.TRANSIT_TASK_TO_FRONT,options);
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  EventLog.writeEvent(EventLogTags.AM_TASK_TO_FRONT,tr.userId,tr.taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
}",0.9977487618190004
195436,"final void startActivityLocked(ActivityRecord r,boolean newTask,boolean doResume,boolean keepCurTransition,Bundle options){
  TaskRecord rTask=r.task;
  final int taskId=rTask.taskId;
  if (!r.mLaunchTaskBehind && (taskForIdLocked(taskId) == null || newTask)) {
    insertTaskAtTop(rTask);
    mWindowManager.moveTaskToTop(taskId);
  }
  TaskRecord task=null;
  if (!newTask) {
    boolean startIt=true;
    for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
      task=mTaskHistory.get(taskNdx);
      if (task.getTopActivity() == null) {
        continue;
      }
      if (task == r.task) {
        if (!startIt) {
          if (DEBUG_ADD_REMOVE)           Slog.i(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ task,new RuntimeException(""String_Node_Str"").fillInStackTrace());
          task.addActivityToTop(r);
          r.putInHistory();
          mWindowManager.addAppToken(task.mActivities.indexOf(r),r.appToken,r.task.taskId,mStackId,r.info.screenOrientation,r.fullscreen,(r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0,r.userId,r.info.configChanges,task.voiceSession != null,r.mLaunchTaskBehind);
          if (VALIDATE_TOKENS) {
            validateAppTokensLocked();
          }
          ActivityOptions.abort(options);
          return;
        }
        break;
      }
 else       if (task.numFullscreen > 0) {
        startIt=false;
      }
    }
  }
  if (task == r.task && mTaskHistory.indexOf(task) != (mTaskHistory.size() - 1)) {
    mStackSupervisor.mUserLeaving=false;
    if (DEBUG_USER_LEAVING)     Slog.v(TAG_USER_LEAVING,""String_Node_Str"");
  }
  task=r.task;
  if (DEBUG_ADD_REMOVE)   Slog.i(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ task,new RuntimeException(""String_Node_Str"").fillInStackTrace());
  task.addActivityToTop(r);
  task.setFrontOfTask();
  r.putInHistory();
  if (!isHomeStack() || numActivities() > 0) {
    boolean showStartingIcon=newTask;
    ProcessRecord proc=r.app;
    if (proc == null) {
      proc=mService.mProcessNames.get(r.processName,r.info.applicationInfo.uid);
    }
    if (proc == null || proc.thread == null) {
      showStartingIcon=true;
    }
    if (DEBUG_TRANSITION)     Slog.v(TAG_TRANSITION,""String_Node_Str"" + r);
    if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0) {
      mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE,keepCurTransition);
      mNoAnimActivities.add(r);
    }
 else {
      mWindowManager.prepareAppTransition(newTask ? r.mLaunchTaskBehind ? AppTransition.TRANSIT_TASK_OPEN_BEHIND : AppTransition.TRANSIT_TASK_OPEN : AppTransition.TRANSIT_ACTIVITY_OPEN,keepCurTransition);
      mNoAnimActivities.remove(r);
    }
    mWindowManager.addAppToken(task.mActivities.indexOf(r),r.appToken,r.task.taskId,mStackId,r.info.screenOrientation,r.fullscreen,(r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0,r.userId,r.info.configChanges,task.voiceSession != null,r.mLaunchTaskBehind);
    boolean doShow=true;
    if (newTask) {
      if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) != 0) {
        resetTaskIfNeededLocked(r,r);
        doShow=topRunningNonDelayedActivityLocked(null) == r;
      }
    }
 else     if (options != null && new ActivityOptions(options).getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION) {
      doShow=false;
    }
    if (r.mLaunchTaskBehind) {
      mWindowManager.setAppVisibility(r.appToken,true);
      ensureActivitiesVisibleLocked(null,0);
    }
 else     if (SHOW_APP_STARTING_PREVIEW && doShow) {
      ActivityRecord prev=mResumedActivity;
      if (prev != null) {
        if (prev.task != r.task) {
          prev=null;
        }
 else         if (prev.nowVisible) {
          prev=null;
        }
      }
      mWindowManager.setAppStartingWindow(r.appToken,r.packageName,r.theme,mService.compatibilityInfoForPackageLocked(r.info.applicationInfo),r.nonLocalizedLabel,r.labelRes,r.icon,r.logo,r.windowFlags,prev != null ? prev.appToken : null,showStartingIcon);
      r.mStartingWindowShown=true;
    }
  }
 else {
    mWindowManager.addAppToken(task.mActivities.indexOf(r),r.appToken,r.task.taskId,mStackId,r.info.screenOrientation,r.fullscreen,(r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0,r.userId,r.info.configChanges,task.voiceSession != null,r.mLaunchTaskBehind);
    ActivityOptions.abort(options);
    options=null;
  }
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  if (doResume) {
    mStackSupervisor.resumeTopActivitiesLocked(this,r,options);
  }
}","final void startActivityLocked(ActivityRecord r,boolean newTask,boolean doResume,boolean keepCurTransition,Bundle options){
  TaskRecord rTask=r.task;
  final int taskId=rTask.taskId;
  if (!r.mLaunchTaskBehind && (taskForIdLocked(taskId) == null || newTask)) {
    insertTaskAtTop(rTask,r);
    mWindowManager.moveTaskToTop(taskId);
  }
  TaskRecord task=null;
  if (!newTask) {
    boolean startIt=true;
    for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
      task=mTaskHistory.get(taskNdx);
      if (task.getTopActivity() == null) {
        continue;
      }
      if (task == r.task) {
        if (!startIt) {
          if (DEBUG_ADD_REMOVE)           Slog.i(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ task,new RuntimeException(""String_Node_Str"").fillInStackTrace());
          task.addActivityToTop(r);
          r.putInHistory();
          mWindowManager.addAppToken(task.mActivities.indexOf(r),r.appToken,r.task.taskId,mStackId,r.info.screenOrientation,r.fullscreen,(r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0,r.userId,r.info.configChanges,task.voiceSession != null,r.mLaunchTaskBehind);
          if (VALIDATE_TOKENS) {
            validateAppTokensLocked();
          }
          ActivityOptions.abort(options);
          return;
        }
        break;
      }
 else       if (task.numFullscreen > 0) {
        startIt=false;
      }
    }
  }
  if (task == r.task && mTaskHistory.indexOf(task) != (mTaskHistory.size() - 1)) {
    mStackSupervisor.mUserLeaving=false;
    if (DEBUG_USER_LEAVING)     Slog.v(TAG_USER_LEAVING,""String_Node_Str"");
  }
  task=r.task;
  if (DEBUG_ADD_REMOVE)   Slog.i(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ task,new RuntimeException(""String_Node_Str"").fillInStackTrace());
  task.addActivityToTop(r);
  task.setFrontOfTask();
  r.putInHistory();
  if (!isHomeStack() || numActivities() > 0) {
    boolean showStartingIcon=newTask;
    ProcessRecord proc=r.app;
    if (proc == null) {
      proc=mService.mProcessNames.get(r.processName,r.info.applicationInfo.uid);
    }
    if (proc == null || proc.thread == null) {
      showStartingIcon=true;
    }
    if (DEBUG_TRANSITION)     Slog.v(TAG_TRANSITION,""String_Node_Str"" + r);
    if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0) {
      mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE,keepCurTransition);
      mNoAnimActivities.add(r);
    }
 else {
      mWindowManager.prepareAppTransition(newTask ? r.mLaunchTaskBehind ? AppTransition.TRANSIT_TASK_OPEN_BEHIND : AppTransition.TRANSIT_TASK_OPEN : AppTransition.TRANSIT_ACTIVITY_OPEN,keepCurTransition);
      mNoAnimActivities.remove(r);
    }
    mWindowManager.addAppToken(task.mActivities.indexOf(r),r.appToken,r.task.taskId,mStackId,r.info.screenOrientation,r.fullscreen,(r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0,r.userId,r.info.configChanges,task.voiceSession != null,r.mLaunchTaskBehind);
    boolean doShow=true;
    if (newTask) {
      if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) != 0) {
        resetTaskIfNeededLocked(r,r);
        doShow=topRunningNonDelayedActivityLocked(null) == r;
      }
    }
 else     if (options != null && new ActivityOptions(options).getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION) {
      doShow=false;
    }
    if (r.mLaunchTaskBehind) {
      mWindowManager.setAppVisibility(r.appToken,true);
      ensureActivitiesVisibleLocked(null,0);
    }
 else     if (SHOW_APP_STARTING_PREVIEW && doShow) {
      ActivityRecord prev=mResumedActivity;
      if (prev != null) {
        if (prev.task != r.task) {
          prev=null;
        }
 else         if (prev.nowVisible) {
          prev=null;
        }
      }
      mWindowManager.setAppStartingWindow(r.appToken,r.packageName,r.theme,mService.compatibilityInfoForPackageLocked(r.info.applicationInfo),r.nonLocalizedLabel,r.labelRes,r.icon,r.logo,r.windowFlags,prev != null ? prev.appToken : null,showStartingIcon);
      r.mStartingWindowShown=true;
    }
  }
 else {
    mWindowManager.addAppToken(task.mActivities.indexOf(r),r.appToken,r.task.taskId,mStackId,r.info.screenOrientation,r.fullscreen,(r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0,r.userId,r.info.configChanges,task.voiceSession != null,r.mLaunchTaskBehind);
    ActivityOptions.abort(options);
    options=null;
  }
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  if (doResume) {
    mStackSupervisor.resumeTopActivitiesLocked(this,r,options);
  }
}",0.9997789078045544
195437,"boolean okToShowLocked(ActivityRecord r){
  return isCurrentProfileLocked(r.userId) || (r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0;
}","boolean okToShowLocked(ActivityRecord r){
  return isCurrentProfileLocked(r.userId) || (r.info.flags & FLAG_SHOW_ON_LOCK_SCREEN) != 0;
}",0.9543859649122808
195438,"final void switchUserLocked(int userId){
  if (mCurrentUser == userId) {
    return;
  }
  mCurrentUser=userId;
  int index=mTaskHistory.size();
  for (int i=0; i < index; ) {
    TaskRecord task=mTaskHistory.get(i);
    if (isCurrentProfileLocked(task.userId)) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + getStackId() + ""String_Node_Str""+ task+ ""String_Node_Str"");
      mTaskHistory.remove(i);
      mTaskHistory.add(task);
      --index;
    }
 else {
      ++i;
    }
  }
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
}","final void switchUserLocked(int userId){
  if (mCurrentUser == userId) {
    return;
  }
  mCurrentUser=userId;
  int index=mTaskHistory.size();
  for (int i=0; i < index; ) {
    final TaskRecord task=mTaskHistory.get(i);
    if (isCurrentProfileLocked(task.userId) || task.topRunningActivityLocked(null) != null) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + getStackId() + ""String_Node_Str""+ task+ ""String_Node_Str"");
      mTaskHistory.remove(i);
      mTaskHistory.add(task);
      --index;
    }
 else {
      ++i;
    }
  }
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
}",0.9548936170212766
195439,"/** 
 * Put a Task in this stack. Used for adding and moving.
 * @param task The task to add.
 * @param toTop Whether to add it to the top or bottom.
 */
void addTask(Task task,boolean toTop){
  int stackNdx;
  if (!toTop) {
    stackNdx=0;
  }
 else {
    stackNdx=mTasks.size();
    if (!mService.isCurrentProfileLocked(task.mUserId)) {
      while (--stackNdx >= 0) {
        if (!mService.isCurrentProfileLocked(mTasks.get(stackNdx).mUserId)) {
          break;
        }
      }
      ++stackNdx;
    }
  }
  if (DEBUG_TASK_MOVEMENT)   Slog.d(TAG,""String_Node_Str"" + task + ""String_Node_Str""+ toTop+ ""String_Node_Str""+ stackNdx);
  mTasks.add(stackNdx,task);
  task.mStack=this;
  if (toTop) {
    mDisplayContent.moveStack(this,true);
  }
  EventLog.writeEvent(EventLogTags.WM_TASK_MOVED,task.mTaskId,toTop ? 1 : 0,stackNdx);
}","/** 
 * Put a Task in this stack. Used for adding and moving.
 * @param task The task to add.
 * @param toTop Whether to add it to the top or bottom.
 * @param showWhenLocked Whether to show the task when the device is lockedregardless of the current user.
 */
void addTask(Task task,boolean toTop,boolean showWhenLocked){
  int stackNdx;
  if (!toTop) {
    stackNdx=0;
  }
 else {
    stackNdx=mTasks.size();
    if (!showWhenLocked && !mService.isCurrentProfileLocked(task.mUserId)) {
      while (--stackNdx >= 0) {
        final Task tmpTask=mTasks.get(stackNdx);
        if (!tmpTask.showWhenLocked() || !mService.isCurrentProfileLocked(tmpTask.mUserId)) {
          break;
        }
      }
      ++stackNdx;
    }
  }
  if (DEBUG_TASK_MOVEMENT)   Slog.d(TAG,""String_Node_Str"" + task + ""String_Node_Str""+ toTop+ ""String_Node_Str""+ stackNdx);
  mTasks.add(stackNdx,task);
  task.mStack=this;
  if (toTop) {
    mDisplayContent.moveStack(this,true);
  }
  EventLog.writeEvent(EventLogTags.WM_TASK_MOVED,task.mTaskId,toTop ? 1 : 0,stackNdx);
}",0.8617021276595744
195440,"void switchUser(){
  int top=mTasks.size();
  for (int taskNdx=0; taskNdx < top; ++taskNdx) {
    Task task=mTasks.get(taskNdx);
    if (mService.isCurrentProfileLocked(task.mUserId)) {
      mTasks.remove(taskNdx);
      mTasks.add(task);
      --top;
    }
  }
}","void switchUser(){
  int top=mTasks.size();
  for (int taskNdx=0; taskNdx < top; ++taskNdx) {
    Task task=mTasks.get(taskNdx);
    if (mService.isCurrentProfileLocked(task.mUserId) || task.showWhenLocked()) {
      mTasks.remove(taskNdx);
      mTasks.add(task);
      --top;
    }
  }
}",0.9547920433996384
195441,"private Task createTaskLocked(int taskId,int stackId,int userId,AppWindowToken atoken){
  if (DEBUG_STACK)   Slog.i(TAG,""String_Node_Str"" + taskId + ""String_Node_Str""+ stackId+ ""String_Node_Str""+ atoken);
  final TaskStack stack=mStackIdToStack.get(stackId);
  if (stack == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + stackId);
  }
  EventLog.writeEvent(EventLogTags.WM_TASK_CREATED,taskId,stackId);
  Task task=new Task(taskId,stack,userId,this);
  mTaskIdToTask.put(taskId,task);
  stack.addTask(task,!atoken.mLaunchTaskBehind);
  return task;
}","private Task createTaskLocked(int taskId,int stackId,int userId,AppWindowToken atoken){
  if (DEBUG_STACK)   Slog.i(TAG,""String_Node_Str"" + taskId + ""String_Node_Str""+ stackId+ ""String_Node_Str""+ atoken);
  final TaskStack stack=mStackIdToStack.get(stackId);
  if (stack == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + stackId);
  }
  EventLog.writeEvent(EventLogTags.WM_TASK_CREATED,taskId,stackId);
  Task task=new Task(taskId,stack,userId,this);
  mTaskIdToTask.put(taskId,task);
  stack.addTask(task,!atoken.mLaunchTaskBehind,atoken.showWhenLocked);
  return task;
}",0.9810671256454389
195442,"@Override public Expr visitQuestionQuestionOp(@NotNull BindingExpressionParser.QuestionQuestionOpContext ctx){
  final Expr left=ctx.left.accept(this);
  return mModel.ternary(mModel.comparison(""String_Node_Str"",left,mModel.symbol(""String_Node_Str"",Object.class)),left,ctx.right.accept(this));
}","@Override public Expr visitQuestionQuestionOp(@NotNull BindingExpressionParser.QuestionQuestionOpContext ctx){
  final Expr left=ctx.left.accept(this);
  return mModel.ternary(mModel.comparison(""String_Node_Str"",left,mModel.symbol(""String_Node_Str"",Object.class)),ctx.right.accept(this),left);
}",0.9830508474576272
195443,"public boolean markAsReadIfDone(){
  if (mRead) {
    return false;
  }
  BitSet clone=(BitSet)mShouldReadWithConditionals.clone();
  clone.andNot(mReadSoFar);
  mRead=clone.isEmpty();
  if (!mRead && !mReadSoFar.isEmpty()) {
    for (int i=clone.nextSetBit(0); i != -1; i=clone.nextSetBit(i + 1)) {
      final Expr expr=mModel.findFlagExpression(i);
      if (!expr.isConditional()) {
        continue;
      }
      final BitSet readForConditional=expr.findConditionalFlags();
      clone.andNot(readForConditional);
      final BitSet invalidFlags=(BitSet)getInvalidFlags().clone();
      invalidFlags.andNot(readForConditional);
      mRead=invalidFlags.isEmpty() || clone.isEmpty();
    }
  }
  return mRead;
}","public boolean markAsReadIfDone(){
  if (mRead) {
    return false;
  }
  BitSet clone=(BitSet)mShouldReadWithConditionals.clone();
  clone.andNot(mReadSoFar);
  mRead=clone.isEmpty();
  if (!mRead && !mReadSoFar.isEmpty()) {
    for (int i=clone.nextSetBit(0); i != -1; i=clone.nextSetBit(i + 1)) {
      final Expr expr=mModel.findFlagExpression(i);
      if (!expr.isConditional()) {
        continue;
      }
      final BitSet readForConditional=expr.findConditionalFlags();
      clone.andNot(readForConditional);
      final BitSet invalidFlags=(BitSet)getInvalidFlags().clone();
      invalidFlags.andNot(readForConditional);
      mRead=invalidFlags.isEmpty() || clone.isEmpty();
    }
  }
  if (mRead) {
    mShouldReadFlags=null;
  }
  return mRead;
}",0.9512855209742896
195444,"public boolean considerElevatingConditionals(Expr cond){
  boolean elevated=false;
  for (  Dependency dependency : mDependencies) {
    if (dependency.isConditional() && dependency.getCondition() == cond) {
      dependency.elevate();
      if (!dependency.getOther().isRead()) {
        elevated=true;
      }
    }
  }
  return elevated;
}","public boolean considerElevatingConditionals(Expr justRead){
  boolean elevated=false;
  for (  Dependency dependency : mDependencies) {
    if (dependency.isConditional() && dependency.getCondition() == justRead) {
      dependency.elevate();
      elevated=true;
    }
  }
  return elevated;
}",0.7817896389324961
195445,"public Iterable<Expr> filterShouldRead(Iterable<Expr> exprs){
  return Iterables.filter(exprs,sShouldReadPred);
}","public static Iterable<Expr> filterShouldRead(Iterable<Expr> exprs){
  return toCollection(Iterables.filter(exprs,sShouldReadPred));
}",0.9149797570850202
195446,"/** 
 * Create an intrinsic for applying a blur to an allocation. The default radius is 5.0. Supported elements types are   {@link Element#U8_4}
 * @param rs The RenderScript context
 * @param e Element type for inputs and outputs
 * @return ScriptIntrinsicBlur
 */
public static ScriptIntrinsicBlur create(RenderScript rs,Element e){
  if ((!e.isCompatible(Element.U8_4(rs))) && (!e.isCompatible(Element.U8(rs)))) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
  long id=rs.nScriptIntrinsicCreate(5,e.getID(rs));
  ScriptIntrinsicBlur sib=new ScriptIntrinsicBlur(id,rs);
  sib.setRadius(5.f);
  return sib;
}","/** 
 * Create an intrinsic for applying a blur to an allocation. The default radius is 5.0. Supported elements types are   {@link Element#U8_4 Element#U8}
 * @param rs The RenderScript context
 * @param e Element type for inputs and outputs
 * @return ScriptIntrinsicBlur
 */
public static ScriptIntrinsicBlur create(RenderScript rs,Element e){
  if ((!e.isCompatible(Element.U8_4(rs))) && (!e.isCompatible(Element.U8(rs)))) {
    throw new RSIllegalArgumentException(""String_Node_Str"");
  }
  long id=rs.nScriptIntrinsicCreate(5,e.getID(rs));
  ScriptIntrinsicBlur sib=new ScriptIntrinsicBlur(id,rs);
  sib.setRadius(5.f);
  return sib;
}",0.991331757289204
195447,"private static boolean dumpDurationSteps(PrintWriter pw,String prefix,String header,LevelStepTracker steps,boolean checkin){
  if (steps == null) {
    return false;
  }
  int count=steps.mNumStepDurations;
  if (count <= 0) {
    return false;
  }
  if (!checkin) {
    pw.println(header);
  }
  String[] lineArgs=new String[4];
  for (int i=0; i < count; i++) {
    long duration=steps.getDurationAt(i);
    int level=steps.getLevelAt(i);
    long initMode=steps.getInitModeAt(i);
    long modMode=steps.getModModeAt(i);
    if (checkin) {
      lineArgs[0]=Long.toString(duration);
      lineArgs[1]=Integer.toString(level);
      if ((modMode & STEP_LEVEL_MODE_SCREEN_STATE) == 0) {
switch ((int)(initMode & STEP_LEVEL_MODE_SCREEN_STATE) + 1) {
case Display.STATE_OFF:
          lineArgs[2]=""String_Node_Str"";
        break;
case Display.STATE_ON:
      lineArgs[2]=""String_Node_Str"";
    break;
case Display.STATE_DOZE:
  lineArgs[2]=""String_Node_Str"";
break;
case Display.STATE_DOZE_SUSPEND:
lineArgs[2]=""String_Node_Str"";
break;
default :
lineArgs[1]=""String_Node_Str"";
break;
}
}
 else {
lineArgs[2]=""String_Node_Str"";
}
if ((modMode & STEP_LEVEL_MODE_POWER_SAVE) == 0) {
lineArgs[3]=(initMode & STEP_LEVEL_MODE_POWER_SAVE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"";
}
 else {
lineArgs[3]=""String_Node_Str"";
}
if ((modMode & STEP_LEVEL_MODE_DEVICE_IDLE) == 0) {
lineArgs[3]=(initMode & STEP_LEVEL_MODE_DEVICE_IDLE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"";
}
 else {
lineArgs[3]=""String_Node_Str"";
}
dumpLine(pw,0,""String_Node_Str"",header,(Object[])lineArgs);
}
 else {
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
TimeUtils.formatDuration(duration,pw);
pw.print(""String_Node_Str"");
pw.print(level);
boolean haveModes=false;
if ((modMode & STEP_LEVEL_MODE_SCREEN_STATE) == 0) {
pw.print(""String_Node_Str"");
switch ((int)(initMode & STEP_LEVEL_MODE_SCREEN_STATE) + 1) {
case Display.STATE_OFF:
pw.print(""String_Node_Str"");
break;
case Display.STATE_ON:
pw.print(""String_Node_Str"");
break;
case Display.STATE_DOZE:
pw.print(""String_Node_Str"");
break;
case Display.STATE_DOZE_SUSPEND:
pw.print(""String_Node_Str"");
break;
default :
lineArgs[1]=""String_Node_Str"";
break;
}
haveModes=true;
}
if ((modMode & STEP_LEVEL_MODE_POWER_SAVE) == 0) {
pw.print(haveModes ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print((initMode & STEP_LEVEL_MODE_POWER_SAVE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"");
haveModes=true;
}
if ((modMode & STEP_LEVEL_MODE_DEVICE_IDLE) == 0) {
pw.print(haveModes ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print((initMode & STEP_LEVEL_MODE_DEVICE_IDLE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"");
haveModes=true;
}
if (haveModes) {
pw.print(""String_Node_Str"");
}
pw.println();
}
}
return true;
}","private static boolean dumpDurationSteps(PrintWriter pw,String prefix,String header,LevelStepTracker steps,boolean checkin){
  if (steps == null) {
    return false;
  }
  int count=steps.mNumStepDurations;
  if (count <= 0) {
    return false;
  }
  if (!checkin) {
    pw.println(header);
  }
  String[] lineArgs=new String[5];
  for (int i=0; i < count; i++) {
    long duration=steps.getDurationAt(i);
    int level=steps.getLevelAt(i);
    long initMode=steps.getInitModeAt(i);
    long modMode=steps.getModModeAt(i);
    if (checkin) {
      lineArgs[0]=Long.toString(duration);
      lineArgs[1]=Integer.toString(level);
      if ((modMode & STEP_LEVEL_MODE_SCREEN_STATE) == 0) {
switch ((int)(initMode & STEP_LEVEL_MODE_SCREEN_STATE) + 1) {
case Display.STATE_OFF:
          lineArgs[2]=""String_Node_Str"";
        break;
case Display.STATE_ON:
      lineArgs[2]=""String_Node_Str"";
    break;
case Display.STATE_DOZE:
  lineArgs[2]=""String_Node_Str"";
break;
case Display.STATE_DOZE_SUSPEND:
lineArgs[2]=""String_Node_Str"";
break;
default :
lineArgs[2]=""String_Node_Str"";
break;
}
}
 else {
lineArgs[2]=""String_Node_Str"";
}
if ((modMode & STEP_LEVEL_MODE_POWER_SAVE) == 0) {
lineArgs[3]=(initMode & STEP_LEVEL_MODE_POWER_SAVE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"";
}
 else {
lineArgs[3]=""String_Node_Str"";
}
if ((modMode & STEP_LEVEL_MODE_DEVICE_IDLE) == 0) {
lineArgs[4]=(initMode & STEP_LEVEL_MODE_DEVICE_IDLE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"";
}
 else {
lineArgs[4]=""String_Node_Str"";
}
dumpLine(pw,0,""String_Node_Str"",header,(Object[])lineArgs);
}
 else {
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
TimeUtils.formatDuration(duration,pw);
pw.print(""String_Node_Str"");
pw.print(level);
boolean haveModes=false;
if ((modMode & STEP_LEVEL_MODE_SCREEN_STATE) == 0) {
pw.print(""String_Node_Str"");
switch ((int)(initMode & STEP_LEVEL_MODE_SCREEN_STATE) + 1) {
case Display.STATE_OFF:
pw.print(""String_Node_Str"");
break;
case Display.STATE_ON:
pw.print(""String_Node_Str"");
break;
case Display.STATE_DOZE:
pw.print(""String_Node_Str"");
break;
case Display.STATE_DOZE_SUSPEND:
pw.print(""String_Node_Str"");
break;
default :
pw.print(""String_Node_Str"");
break;
}
haveModes=true;
}
if ((modMode & STEP_LEVEL_MODE_POWER_SAVE) == 0) {
pw.print(haveModes ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print((initMode & STEP_LEVEL_MODE_POWER_SAVE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"");
haveModes=true;
}
if ((modMode & STEP_LEVEL_MODE_DEVICE_IDLE) == 0) {
pw.print(haveModes ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print((initMode & STEP_LEVEL_MODE_DEVICE_IDLE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"");
haveModes=true;
}
if (haveModes) {
pw.print(""String_Node_Str"");
}
pw.println();
}
}
return true;
}",0.988480921526278
195448,"private static boolean dumpDurationSteps(PrintWriter pw,String prefix,String header,LevelStepTracker steps,boolean checkin){
  if (steps == null) {
    return false;
  }
  int count=steps.mNumStepDurations;
  if (count <= 0) {
    return false;
  }
  if (!checkin) {
    pw.println(header);
  }
  String[] lineArgs=new String[4];
  for (int i=0; i < count; i++) {
    long duration=steps.getDurationAt(i);
    int level=steps.getLevelAt(i);
    long initMode=steps.getInitModeAt(i);
    long modMode=steps.getModModeAt(i);
    if (checkin) {
      lineArgs[0]=Long.toString(duration);
      lineArgs[1]=Integer.toString(level);
      if ((modMode & STEP_LEVEL_MODE_SCREEN_STATE) == 0) {
switch ((int)(initMode & STEP_LEVEL_MODE_SCREEN_STATE) + 1) {
case Display.STATE_OFF:
          lineArgs[2]=""String_Node_Str"";
        break;
case Display.STATE_ON:
      lineArgs[2]=""String_Node_Str"";
    break;
case Display.STATE_DOZE:
  lineArgs[2]=""String_Node_Str"";
break;
case Display.STATE_DOZE_SUSPEND:
lineArgs[2]=""String_Node_Str"";
break;
default :
lineArgs[1]=""String_Node_Str"";
break;
}
}
 else {
lineArgs[2]=""String_Node_Str"";
}
if ((modMode & STEP_LEVEL_MODE_POWER_SAVE) == 0) {
lineArgs[3]=(initMode & STEP_LEVEL_MODE_POWER_SAVE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"";
}
 else {
lineArgs[3]=""String_Node_Str"";
}
if ((modMode & STEP_LEVEL_MODE_DEVICE_IDLE) == 0) {
lineArgs[3]=(initMode & STEP_LEVEL_MODE_DEVICE_IDLE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"";
}
 else {
lineArgs[3]=""String_Node_Str"";
}
dumpLine(pw,0,""String_Node_Str"",header,(Object[])lineArgs);
}
 else {
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
TimeUtils.formatDuration(duration,pw);
pw.print(""String_Node_Str"");
pw.print(level);
boolean haveModes=false;
if ((modMode & STEP_LEVEL_MODE_SCREEN_STATE) == 0) {
pw.print(""String_Node_Str"");
switch ((int)(initMode & STEP_LEVEL_MODE_SCREEN_STATE) + 1) {
case Display.STATE_OFF:
pw.print(""String_Node_Str"");
break;
case Display.STATE_ON:
pw.print(""String_Node_Str"");
break;
case Display.STATE_DOZE:
pw.print(""String_Node_Str"");
break;
case Display.STATE_DOZE_SUSPEND:
pw.print(""String_Node_Str"");
break;
default :
lineArgs[1]=""String_Node_Str"";
break;
}
haveModes=true;
}
if ((modMode & STEP_LEVEL_MODE_POWER_SAVE) == 0) {
pw.print(haveModes ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print((initMode & STEP_LEVEL_MODE_POWER_SAVE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"");
haveModes=true;
}
if ((modMode & STEP_LEVEL_MODE_DEVICE_IDLE) == 0) {
pw.print(haveModes ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print((initMode & STEP_LEVEL_MODE_DEVICE_IDLE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"");
haveModes=true;
}
if (haveModes) {
pw.print(""String_Node_Str"");
}
pw.println();
}
}
return true;
}","private static boolean dumpDurationSteps(PrintWriter pw,String prefix,String header,LevelStepTracker steps,boolean checkin){
  if (steps == null) {
    return false;
  }
  int count=steps.mNumStepDurations;
  if (count <= 0) {
    return false;
  }
  if (!checkin) {
    pw.println(header);
  }
  String[] lineArgs=new String[5];
  for (int i=0; i < count; i++) {
    long duration=steps.getDurationAt(i);
    int level=steps.getLevelAt(i);
    long initMode=steps.getInitModeAt(i);
    long modMode=steps.getModModeAt(i);
    if (checkin) {
      lineArgs[0]=Long.toString(duration);
      lineArgs[1]=Integer.toString(level);
      if ((modMode & STEP_LEVEL_MODE_SCREEN_STATE) == 0) {
switch ((int)(initMode & STEP_LEVEL_MODE_SCREEN_STATE) + 1) {
case Display.STATE_OFF:
          lineArgs[2]=""String_Node_Str"";
        break;
case Display.STATE_ON:
      lineArgs[2]=""String_Node_Str"";
    break;
case Display.STATE_DOZE:
  lineArgs[2]=""String_Node_Str"";
break;
case Display.STATE_DOZE_SUSPEND:
lineArgs[2]=""String_Node_Str"";
break;
default :
lineArgs[2]=""String_Node_Str"";
break;
}
}
 else {
lineArgs[2]=""String_Node_Str"";
}
if ((modMode & STEP_LEVEL_MODE_POWER_SAVE) == 0) {
lineArgs[3]=(initMode & STEP_LEVEL_MODE_POWER_SAVE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"";
}
 else {
lineArgs[3]=""String_Node_Str"";
}
if ((modMode & STEP_LEVEL_MODE_DEVICE_IDLE) == 0) {
lineArgs[4]=(initMode & STEP_LEVEL_MODE_DEVICE_IDLE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"";
}
 else {
lineArgs[4]=""String_Node_Str"";
}
dumpLine(pw,0,""String_Node_Str"",header,(Object[])lineArgs);
}
 else {
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
TimeUtils.formatDuration(duration,pw);
pw.print(""String_Node_Str"");
pw.print(level);
boolean haveModes=false;
if ((modMode & STEP_LEVEL_MODE_SCREEN_STATE) == 0) {
pw.print(""String_Node_Str"");
switch ((int)(initMode & STEP_LEVEL_MODE_SCREEN_STATE) + 1) {
case Display.STATE_OFF:
pw.print(""String_Node_Str"");
break;
case Display.STATE_ON:
pw.print(""String_Node_Str"");
break;
case Display.STATE_DOZE:
pw.print(""String_Node_Str"");
break;
case Display.STATE_DOZE_SUSPEND:
pw.print(""String_Node_Str"");
break;
default :
pw.print(""String_Node_Str"");
break;
}
haveModes=true;
}
if ((modMode & STEP_LEVEL_MODE_POWER_SAVE) == 0) {
pw.print(haveModes ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print((initMode & STEP_LEVEL_MODE_POWER_SAVE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"");
haveModes=true;
}
if ((modMode & STEP_LEVEL_MODE_DEVICE_IDLE) == 0) {
pw.print(haveModes ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print((initMode & STEP_LEVEL_MODE_DEVICE_IDLE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"");
haveModes=true;
}
if (haveModes) {
pw.print(""String_Node_Str"");
}
pw.println();
}
}
return true;
}",0.988480921526278
195449,"private void completePauseLocked(boolean resumeNext){
  ActivityRecord prev=mPausingActivity;
  if (DEBUG_PAUSE)   Slog.v(TAG,""String_Node_Str"" + prev);
  if (prev != null) {
    prev.state=ActivityState.PAUSED;
    if (prev.finishing) {
      if (DEBUG_PAUSE)       Slog.v(TAG,""String_Node_Str"" + prev);
      prev=finishCurrentActivityLocked(prev,FINISH_AFTER_VISIBLE,false);
    }
 else     if (prev.app != null) {
      if (DEBUG_PAUSE)       Slog.v(TAG,""String_Node_Str"" + prev);
      if (mStackSupervisor.mWaitingVisibleActivities.remove(prev)) {
        if (DEBUG_SWITCH || DEBUG_PAUSE)         Slog.v(TAG,""String_Node_Str"" + prev);
      }
      if (prev.configDestroy) {
        if (DEBUG_PAUSE)         Slog.v(TAG,""String_Node_Str"" + prev);
        destroyActivityLocked(prev,true,""String_Node_Str"");
      }
 else       if (!hasVisibleBehindActivity()) {
        mStackSupervisor.mStoppingActivities.add(prev);
        if (mStackSupervisor.mStoppingActivities.size() > 3 || prev.frontOfTask && mTaskHistory.size() <= 1) {
          if (DEBUG_PAUSE)           Slog.v(TAG,""String_Node_Str"");
          mStackSupervisor.scheduleIdleLocked();
        }
 else {
          mStackSupervisor.checkReadyForSleepLocked();
        }
      }
    }
 else {
      if (DEBUG_PAUSE)       Slog.v(TAG,""String_Node_Str"" + prev);
      prev=null;
    }
    mPausingActivity=null;
  }
  if (resumeNext) {
    final ActivityStack topStack=mStackSupervisor.getFocusedStack();
    if (!mService.isSleepingOrShuttingDown()) {
      mStackSupervisor.resumeTopActivitiesLocked(topStack,prev,null);
    }
 else {
      mStackSupervisor.checkReadyForSleepLocked();
      ActivityRecord top=topStack.topRunningActivityLocked(null);
      if (top == null || (prev != null && top != prev)) {
        mStackSupervisor.resumeTopActivitiesLocked(topStack,null,null);
      }
    }
  }
  if (prev != null) {
    prev.resumeKeyDispatchingLocked();
    if (prev.app != null && prev.cpuTimeAtResume > 0 && mService.mBatteryStatsService.isOnBattery()) {
      long diff=mService.mProcessCpuTracker.getCpuTimeForPid(prev.app.pid) - prev.cpuTimeAtResume;
      if (diff > 0) {
        BatteryStatsImpl bsi=mService.mBatteryStatsService.getActiveStatistics();
synchronized (bsi) {
          BatteryStatsImpl.Uid.Proc ps=bsi.getProcessStatsLocked(prev.info.applicationInfo.uid,prev.info.packageName);
          if (ps != null) {
            ps.addForegroundTimeLocked(diff);
          }
        }
      }
    }
    prev.cpuTimeAtResume=0;
  }
  mService.notifyTaskStackChangedLocked();
}","private void completePauseLocked(boolean resumeNext){
  ActivityRecord prev=mPausingActivity;
  if (DEBUG_PAUSE)   Slog.v(TAG,""String_Node_Str"" + prev);
  if (prev != null) {
    prev.state=ActivityState.PAUSED;
    if (prev.finishing) {
      if (DEBUG_PAUSE)       Slog.v(TAG,""String_Node_Str"" + prev);
      prev=finishCurrentActivityLocked(prev,FINISH_AFTER_VISIBLE,false);
    }
 else     if (prev.app != null) {
      if (DEBUG_PAUSE)       Slog.v(TAG,""String_Node_Str"" + prev);
      if (mStackSupervisor.mWaitingVisibleActivities.remove(prev)) {
        if (DEBUG_SWITCH || DEBUG_PAUSE)         Slog.v(TAG,""String_Node_Str"" + prev);
      }
      if (prev.configDestroy) {
        if (DEBUG_PAUSE)         Slog.v(TAG,""String_Node_Str"" + prev);
        destroyActivityLocked(prev,true,""String_Node_Str"");
      }
 else       if (!hasVisibleBehindActivity()) {
        mStackSupervisor.mStoppingActivities.add(prev);
        if (mStackSupervisor.mStoppingActivities.size() > 3 || prev.frontOfTask && mTaskHistory.size() <= 1) {
          if (DEBUG_PAUSE)           Slog.v(TAG,""String_Node_Str"");
          mStackSupervisor.scheduleIdleLocked();
        }
 else {
          mStackSupervisor.checkReadyForSleepLocked();
        }
      }
    }
 else {
      if (DEBUG_PAUSE)       Slog.v(TAG,""String_Node_Str"" + prev);
      prev=null;
    }
    prev.stopFreezingScreenLocked(true);
    mPausingActivity=null;
  }
  if (resumeNext) {
    final ActivityStack topStack=mStackSupervisor.getFocusedStack();
    if (!mService.isSleepingOrShuttingDown()) {
      mStackSupervisor.resumeTopActivitiesLocked(topStack,prev,null);
    }
 else {
      mStackSupervisor.checkReadyForSleepLocked();
      ActivityRecord top=topStack.topRunningActivityLocked(null);
      if (top == null || (prev != null && top != prev)) {
        mStackSupervisor.resumeTopActivitiesLocked(topStack,null,null);
      }
    }
  }
  if (prev != null) {
    prev.resumeKeyDispatchingLocked();
    if (prev.app != null && prev.cpuTimeAtResume > 0 && mService.mBatteryStatsService.isOnBattery()) {
      long diff=mService.mProcessCpuTracker.getCpuTimeForPid(prev.app.pid) - prev.cpuTimeAtResume;
      if (diff > 0) {
        BatteryStatsImpl bsi=mService.mBatteryStatsService.getActiveStatistics();
synchronized (bsi) {
          BatteryStatsImpl.Uid.Proc ps=bsi.getProcessStatsLocked(prev.info.applicationInfo.uid,prev.info.packageName);
          if (ps != null) {
            ps.addForegroundTimeLocked(diff);
          }
        }
      }
    }
    prev.cpuTimeAtResume=0;
  }
  mService.notifyTaskStackChangedLocked();
}",0.992043469823404
195450,"private void completePauseLocked(boolean resumeNext){
  ActivityRecord prev=mPausingActivity;
  if (DEBUG_PAUSE)   Slog.v(TAG,""String_Node_Str"" + prev);
  if (prev != null) {
    prev.state=ActivityState.PAUSED;
    if (prev.finishing) {
      if (DEBUG_PAUSE)       Slog.v(TAG,""String_Node_Str"" + prev);
      prev=finishCurrentActivityLocked(prev,FINISH_AFTER_VISIBLE,false);
    }
 else     if (prev.app != null) {
      if (DEBUG_PAUSE)       Slog.v(TAG,""String_Node_Str"" + prev);
      if (mStackSupervisor.mWaitingVisibleActivities.remove(prev)) {
        if (DEBUG_SWITCH || DEBUG_PAUSE)         Slog.v(TAG,""String_Node_Str"" + prev);
      }
      if (prev.configDestroy) {
        if (DEBUG_PAUSE)         Slog.v(TAG,""String_Node_Str"" + prev);
        destroyActivityLocked(prev,true,""String_Node_Str"");
      }
 else       if (!hasVisibleBehindActivity()) {
        mStackSupervisor.mStoppingActivities.add(prev);
        if (mStackSupervisor.mStoppingActivities.size() > 3 || prev.frontOfTask && mTaskHistory.size() <= 1) {
          if (DEBUG_PAUSE)           Slog.v(TAG,""String_Node_Str"");
          mStackSupervisor.scheduleIdleLocked();
        }
 else {
          mStackSupervisor.checkReadyForSleepLocked();
        }
      }
    }
 else {
      if (DEBUG_PAUSE)       Slog.v(TAG,""String_Node_Str"" + prev);
      prev=null;
    }
    mPausingActivity=null;
  }
  if (resumeNext) {
    final ActivityStack topStack=mStackSupervisor.getFocusedStack();
    if (!mService.isSleepingOrShuttingDown()) {
      mStackSupervisor.resumeTopActivitiesLocked(topStack,prev,null);
    }
 else {
      mStackSupervisor.checkReadyForSleepLocked();
      ActivityRecord top=topStack.topRunningActivityLocked(null);
      if (top == null || (prev != null && top != prev)) {
        mStackSupervisor.resumeTopActivitiesLocked(topStack,null,null);
      }
    }
  }
  if (prev != null) {
    prev.resumeKeyDispatchingLocked();
    if (prev.app != null && prev.cpuTimeAtResume > 0 && mService.mBatteryStatsService.isOnBattery()) {
      long diff=mService.mProcessCpuTracker.getCpuTimeForPid(prev.app.pid) - prev.cpuTimeAtResume;
      if (diff > 0) {
        BatteryStatsImpl bsi=mService.mBatteryStatsService.getActiveStatistics();
synchronized (bsi) {
          BatteryStatsImpl.Uid.Proc ps=bsi.getProcessStatsLocked(prev.info.applicationInfo.uid,prev.info.packageName);
          if (ps != null) {
            ps.addForegroundTimeLocked(diff);
          }
        }
      }
    }
    prev.cpuTimeAtResume=0;
  }
  mService.notifyTaskStackChangedLocked();
}","private void completePauseLocked(boolean resumeNext){
  ActivityRecord prev=mPausingActivity;
  if (DEBUG_PAUSE)   Slog.v(TAG,""String_Node_Str"" + prev);
  if (prev != null) {
    prev.state=ActivityState.PAUSED;
    if (prev.finishing) {
      if (DEBUG_PAUSE)       Slog.v(TAG,""String_Node_Str"" + prev);
      prev=finishCurrentActivityLocked(prev,FINISH_AFTER_VISIBLE,false);
    }
 else     if (prev.app != null) {
      if (DEBUG_PAUSE)       Slog.v(TAG,""String_Node_Str"" + prev);
      if (mStackSupervisor.mWaitingVisibleActivities.remove(prev)) {
        if (DEBUG_SWITCH || DEBUG_PAUSE)         Slog.v(TAG,""String_Node_Str"" + prev);
      }
      if (prev.configDestroy) {
        if (DEBUG_PAUSE)         Slog.v(TAG,""String_Node_Str"" + prev);
        destroyActivityLocked(prev,true,""String_Node_Str"");
      }
 else       if (!hasVisibleBehindActivity()) {
        mStackSupervisor.mStoppingActivities.add(prev);
        if (mStackSupervisor.mStoppingActivities.size() > 3 || prev.frontOfTask && mTaskHistory.size() <= 1) {
          if (DEBUG_PAUSE)           Slog.v(TAG,""String_Node_Str"");
          mStackSupervisor.scheduleIdleLocked();
        }
 else {
          mStackSupervisor.checkReadyForSleepLocked();
        }
      }
    }
 else {
      if (DEBUG_PAUSE)       Slog.v(TAG,""String_Node_Str"" + prev);
      prev=null;
    }
    prev.stopFreezingScreenLocked(true);
    mPausingActivity=null;
  }
  if (resumeNext) {
    final ActivityStack topStack=mStackSupervisor.getFocusedStack();
    if (!mService.isSleepingOrShuttingDown()) {
      mStackSupervisor.resumeTopActivitiesLocked(topStack,prev,null);
    }
 else {
      mStackSupervisor.checkReadyForSleepLocked();
      ActivityRecord top=topStack.topRunningActivityLocked(null);
      if (top == null || (prev != null && top != prev)) {
        mStackSupervisor.resumeTopActivitiesLocked(topStack,null,null);
      }
    }
  }
  if (prev != null) {
    prev.resumeKeyDispatchingLocked();
    if (prev.app != null && prev.cpuTimeAtResume > 0 && mService.mBatteryStatsService.isOnBattery()) {
      long diff=mService.mProcessCpuTracker.getCpuTimeForPid(prev.app.pid) - prev.cpuTimeAtResume;
      if (diff > 0) {
        BatteryStatsImpl bsi=mService.mBatteryStatsService.getActiveStatistics();
synchronized (bsi) {
          BatteryStatsImpl.Uid.Proc ps=bsi.getProcessStatsLocked(prev.info.applicationInfo.uid,prev.info.packageName);
          if (ps != null) {
            ps.addForegroundTimeLocked(diff);
          }
        }
      }
    }
    prev.cpuTimeAtResume=0;
  }
  mService.notifyTaskStackChangedLocked();
}",0.992043469823404
195451,"/** 
 * Set the layout direction from the Locale.
 * @param locale The Locale. If null will set the layout direction to{@link View#LAYOUT_DIRECTION_LTR}. If not null will set it to the layout direction corresponding to the Locale.
 * @see {@link View#LAYOUT_DIRECTION_LTR} and {@link View#LAYOUT_DIRECTION_RTL}
 */
public void setLayoutDirection(Locale locale){
  final int layoutDirection=1 + TextUtils.getLayoutDirectionFromLocale(locale);
  screenLayout=(screenLayout & ~SCREENLAYOUT_LAYOUTDIR_MASK) | (layoutDirection << SCREENLAYOUT_LAYOUTDIR_SHIFT);
}","/** 
 * Set the layout direction from the Locale.
 * @param locale The Locale. If null will set the layout direction to{@link View#LAYOUT_DIRECTION_LTR}. If not null will set it to the layout direction corresponding to the Locale.
 * @see View#LAYOUT_DIRECTION_LTR
 * @see View#LAYOUT_DIRECTION_RTL
 */
public void setLayoutDirection(Locale locale){
  final int layoutDirection=1 + TextUtils.getLayoutDirectionFromLocale(locale);
  screenLayout=(screenLayout & ~SCREENLAYOUT_LAYOUTDIR_MASK) | (layoutDirection << SCREENLAYOUT_LAYOUTDIR_SHIFT);
}",0.9764065335753176
195452,"/** 
 * defines the method to be invoked when database corruption is detected.
 * @param dbObj the {@link SQLiteDatabase} object representing the database on which corruptionis detected.
 */
void onCorruption(SQLiteDatabase dbObj);","/** 
 * The method invoked when database corruption is detected.
 * @param dbObj the {@link SQLiteDatabase} object representing the database on which corruptionis detected.
 */
void onCorruption(SQLiteDatabase dbObj);",0.9642857142857144
195453,"/** 
 * Sets the color of the status bar to   {@param color}. For this to take effect, the window must be drawing the system bar backgrounds with  {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS} and{@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS} must not be set.If  {@param color} is not opaque, consider setting{@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and{@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}. <p> The transitionName for the view background will be ""android:status:background"". </p>
 */
public abstract void setStatusBarColor(@ColorInt int color);","/** 
 * Sets the color of the status bar to   {@code color}. For this to take effect, the window must be drawing the system bar backgrounds with  {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS} and{@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS} must not be set.If  {@code color} is not opaque, consider setting{@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and{@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}. <p> The transitionName for the view background will be ""android:status:background"". </p>
 */
public abstract void setStatusBarColor(@ColorInt int color);",0.9859375
195454,"/** 
 * Set the layout direction from the Locale.
 * @param locale The Locale. If null will set the layout direction to{@link View#LAYOUT_DIRECTION_LTR}. If not null will set it to the layout direction corresponding to the Locale.
 * @see {@link View#LAYOUT_DIRECTION_LTR} and {@link View#LAYOUT_DIRECTION_RTL}
 */
public void setLayoutDirection(Locale locale){
  final int layoutDirection=1 + TextUtils.getLayoutDirectionFromLocale(locale);
  screenLayout=(screenLayout & ~SCREENLAYOUT_LAYOUTDIR_MASK) | (layoutDirection << SCREENLAYOUT_LAYOUTDIR_SHIFT);
}","/** 
 * Set the layout direction from the Locale.
 * @param locale The Locale. If null will set the layout direction to{@link View#LAYOUT_DIRECTION_LTR}. If not null will set it to the layout direction corresponding to the Locale.
 * @see View#LAYOUT_DIRECTION_LTR
 * @see View#LAYOUT_DIRECTION_RTL
 */
public void setLayoutDirection(Locale locale){
  final int layoutDirection=1 + TextUtils.getLayoutDirectionFromLocale(locale);
  screenLayout=(screenLayout & ~SCREENLAYOUT_LAYOUTDIR_MASK) | (layoutDirection << SCREENLAYOUT_LAYOUTDIR_SHIFT);
}",0.9764065335753176
195455,"/** 
 * defines the method to be invoked when database corruption is detected.
 * @param dbObj the {@link SQLiteDatabase} object representing the database on which corruptionis detected.
 */
void onCorruption(SQLiteDatabase dbObj);","/** 
 * The method invoked when database corruption is detected.
 * @param dbObj the {@link SQLiteDatabase} object representing the database on which corruptionis detected.
 */
void onCorruption(SQLiteDatabase dbObj);",0.9642857142857144
195456,"/** 
 * Sets the color of the status bar to   {@param color}. For this to take effect, the window must be drawing the system bar backgrounds with  {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS} and{@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS} must not be set.If  {@param color} is not opaque, consider setting{@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and{@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}. <p> The transitionName for the view background will be ""android:status:background"". </p>
 */
public abstract void setStatusBarColor(@ColorInt int color);","/** 
 * Sets the color of the status bar to   {@code color}. For this to take effect, the window must be drawing the system bar backgrounds with  {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS} and{@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS} must not be set.If  {@code color} is not opaque, consider setting{@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and{@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}. <p> The transitionName for the view background will be ""android:status:background"". </p>
 */
public abstract void setStatusBarColor(@ColorInt int color);",0.9859375
195457,"private void removeDeviceLocked(Device device){
  if (mDevicesByInfo.remove(device.getDeviceInfo()) != null) {
    IMidiDeviceServer server=device.getDeviceServer();
    if (server != null) {
      mDevicesByServer.remove(server);
    }
synchronized (mClients) {
      for (      Client c : mClients.values()) {
        c.deviceRemoved(device);
      }
    }
  }
}","private void removeDeviceLocked(Device device){
  IMidiDeviceServer server=device.getDeviceServer();
  if (server != null) {
    mDevicesByServer.remove(server);
  }
synchronized (mClients) {
    for (    Client c : mClients.values()) {
      c.deviceRemoved(device);
    }
  }
}",0.6625194401244168
195458,"private void removePackageDeviceServers(String packageName){
synchronized (mDevicesByInfo) {
    for (    Device device : mDevicesByInfo.values()) {
      if (packageName.equals(device.getPackageName())) {
        removeDeviceLocked(device);
      }
    }
  }
}","private void removePackageDeviceServers(String packageName){
synchronized (mDevicesByInfo) {
    Iterator<Device> iterator=mDevicesByInfo.values().iterator();
    while (iterator.hasNext()) {
      Device device=iterator.next();
      if (packageName.equals(device.getPackageName())) {
        iterator.remove();
        removeDeviceLocked(device);
      }
    }
  }
}",0.7503974562798092
195459,"@Override public void dump(FileDescriptor fd,PrintWriter writer,String[] args){
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP,TAG);
  final IndentingPrintWriter pw=new IndentingPrintWriter(writer,""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.increaseIndent();
  pw.println(""String_Node_Str"");
  pw.increaseIndent();
  for (  Device device : mDevicesByInfo.values()) {
    pw.println(device.toString());
  }
  pw.decreaseIndent();
  pw.println(""String_Node_Str"");
  pw.increaseIndent();
  for (  Client client : mClients.values()) {
    pw.println(client.toString());
  }
  pw.decreaseIndent();
}","@Override public void dump(FileDescriptor fd,PrintWriter writer,String[] args){
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP,TAG);
  final IndentingPrintWriter pw=new IndentingPrintWriter(writer,""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.increaseIndent();
  pw.println(""String_Node_Str"");
  pw.increaseIndent();
synchronized (mDevicesByInfo) {
    for (    Device device : mDevicesByInfo.values()) {
      pw.println(device.toString());
    }
  }
  pw.decreaseIndent();
  pw.println(""String_Node_Str"");
  pw.increaseIndent();
synchronized (mClients) {
    for (    Client client : mClients.values()) {
      pw.println(client.toString());
    }
  }
  pw.decreaseIndent();
}",0.7444608567208272
195460,"@Override public void unregisterDeviceServer(IMidiDeviceServer server){
synchronized (mDevicesByInfo) {
    Device device=mDevicesByServer.get(server.asBinder());
    if (device != null) {
      removeDeviceLocked(device);
    }
  }
}","@Override public void unregisterDeviceServer(IMidiDeviceServer server){
synchronized (mDevicesByInfo) {
    Device device=mDevicesByServer.get(server.asBinder());
    if (device != null) {
      mDevicesByInfo.remove(device.getDeviceInfo());
      removeDeviceLocked(device);
    }
  }
}",0.8982725527831094
195461,"public void binderDied(){
synchronized (mDevicesByInfo) {
    removeDeviceLocked(this);
  }
}","public void binderDied(){
synchronized (mDevicesByInfo) {
    if (mDevicesByInfo.remove(mDeviceInfo) != null) {
      removeDeviceLocked(this);
    }
  }
}",0.75
195462,"/** 
 * Reset the transform on a view. 
 */
public static void reset(View v){
  v.setTranslationX(0f);
  v.setTranslationY(0f);
  v.setTranslationZ(0f);
  v.setScaleX(1f);
  v.setScaleY(1f);
  v.setAlpha(1f);
}","/** 
 * Reset the transform on a view. 
 */
public static void reset(View v){
  v.animate().cancel();
  v.setTranslationX(0f);
  v.setTranslationY(0f);
  v.setTranslationZ(0f);
  v.setScaleX(1f);
  v.setScaleY(1f);
  v.setAlpha(1f);
}",0.945945945945946
195463,"/** 
 * Reset the transform on a view. 
 */
public static void reset(View v){
  v.setTranslationX(0f);
  v.setTranslationY(0f);
  v.setTranslationZ(0f);
  v.setScaleX(1f);
  v.setScaleY(1f);
  v.setAlpha(1f);
}","/** 
 * Reset the transform on a view. 
 */
public static void reset(View v){
  v.animate().cancel();
  v.setTranslationX(0f);
  v.setTranslationY(0f);
  v.setTranslationZ(0f);
  v.setScaleX(1f);
  v.setScaleY(1f);
  v.setAlpha(1f);
}",0.945945945945946
195464,"private void removeDeviceLocked(Device device){
  if (mDevicesByInfo.remove(device.getDeviceInfo()) != null) {
    IMidiDeviceServer server=device.getDeviceServer();
    if (server != null) {
      mDevicesByServer.remove(server);
    }
synchronized (mClients) {
      for (      Client c : mClients.values()) {
        c.deviceRemoved(device);
      }
    }
  }
}","private void removeDeviceLocked(Device device){
  IMidiDeviceServer server=device.getDeviceServer();
  if (server != null) {
    mDevicesByServer.remove(server);
  }
synchronized (mClients) {
    for (    Client c : mClients.values()) {
      c.deviceRemoved(device);
    }
  }
}",0.6625194401244168
195465,"private void removePackageDeviceServers(String packageName){
synchronized (mDevicesByInfo) {
    for (    Device device : mDevicesByInfo.values()) {
      if (packageName.equals(device.getPackageName())) {
        removeDeviceLocked(device);
      }
    }
  }
}","private void removePackageDeviceServers(String packageName){
synchronized (mDevicesByInfo) {
    Iterator<Device> iterator=mDevicesByInfo.values().iterator();
    while (iterator.hasNext()) {
      Device device=iterator.next();
      if (packageName.equals(device.getPackageName())) {
        iterator.remove();
        removeDeviceLocked(device);
      }
    }
  }
}",0.7503974562798092
195466,"@Override public void dump(FileDescriptor fd,PrintWriter writer,String[] args){
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP,TAG);
  final IndentingPrintWriter pw=new IndentingPrintWriter(writer,""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.increaseIndent();
  pw.println(""String_Node_Str"");
  pw.increaseIndent();
  for (  Device device : mDevicesByInfo.values()) {
    pw.println(device.toString());
  }
  pw.decreaseIndent();
  pw.println(""String_Node_Str"");
  pw.increaseIndent();
  for (  Client client : mClients.values()) {
    pw.println(client.toString());
  }
  pw.decreaseIndent();
}","@Override public void dump(FileDescriptor fd,PrintWriter writer,String[] args){
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP,TAG);
  final IndentingPrintWriter pw=new IndentingPrintWriter(writer,""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.increaseIndent();
  pw.println(""String_Node_Str"");
  pw.increaseIndent();
synchronized (mDevicesByInfo) {
    for (    Device device : mDevicesByInfo.values()) {
      pw.println(device.toString());
    }
  }
  pw.decreaseIndent();
  pw.println(""String_Node_Str"");
  pw.increaseIndent();
synchronized (mClients) {
    for (    Client client : mClients.values()) {
      pw.println(client.toString());
    }
  }
  pw.decreaseIndent();
}",0.7444608567208272
195467,"@Override public void unregisterDeviceServer(IMidiDeviceServer server){
synchronized (mDevicesByInfo) {
    Device device=mDevicesByServer.get(server.asBinder());
    if (device != null) {
      removeDeviceLocked(device);
    }
  }
}","@Override public void unregisterDeviceServer(IMidiDeviceServer server){
synchronized (mDevicesByInfo) {
    Device device=mDevicesByServer.get(server.asBinder());
    if (device != null) {
      mDevicesByInfo.remove(device.getDeviceInfo());
      removeDeviceLocked(device);
    }
  }
}",0.8982725527831094
195468,"public void binderDied(){
synchronized (mDevicesByInfo) {
    removeDeviceLocked(this);
  }
}","public void binderDied(){
synchronized (mDevicesByInfo) {
    if (mDevicesByInfo.remove(mDeviceInfo) != null) {
      removeDeviceLocked(this);
    }
  }
}",0.75
195469,"/** 
 * Initializes the Recents. 
 */
@ProxyFromPrimaryToCurrentUser @Override public void start(){
  if (sInstance == null) {
    sInstance=this;
  }
  RecentsTaskLoader.initialize(mContext);
  mInflater=LayoutInflater.from(mContext);
  mSystemServicesProxy=new SystemServicesProxy(mContext);
  mHandler=new Handler();
  mTaskStackBounds=new Rect();
  mTaskStackListener=new TaskStackListenerImpl(mHandler);
  mSystemServicesProxy.registerTaskStackListener(mTaskStackListener);
  if (mSystemServicesProxy.isForegroundUserOwner()) {
    mProxyBroadcastReceiver=new RecentsOwnerEventProxyReceiver();
    IntentFilter filter=new IntentFilter();
    filter.addAction(Recents.ACTION_PROXY_NOTIFY_RECENTS_VISIBLITY_TO_OWNER);
    mContext.registerReceiverAsUser(mProxyBroadcastReceiver,UserHandle.CURRENT,filter,null,mHandler);
  }
  TaskStackViewLayoutAlgorithm.initializeCurve();
  reloadHeaderBarLayout(true);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  RecentsTaskLoadPlan plan=loader.createLoadPlan(mContext);
  loader.preloadTasks(plan,true);
  RecentsTaskLoadPlan.Options launchOpts=new RecentsTaskLoadPlan.Options();
  launchOpts.numVisibleTasks=loader.getApplicationIconCacheSize();
  launchOpts.numVisibleTaskThumbnails=loader.getThumbnailCacheSize();
  launchOpts.onlyLoadForCache=true;
  loader.loadTasks(mContext,plan,launchOpts);
  putComponent(Recents.class,this);
}","/** 
 * Initializes the Recents. 
 */
@ProxyFromPrimaryToCurrentUser @Override public void start(){
  if (sInstance == null) {
    sInstance=this;
  }
  RecentsTaskLoader.initialize(mContext);
  mInflater=LayoutInflater.from(mContext);
  mSystemServicesProxy=new SystemServicesProxy(mContext);
  mHandler=new Handler();
  mTaskStackBounds=new Rect();
  mTaskStackListener=new TaskStackListenerImpl(mHandler);
  mSystemServicesProxy.registerTaskStackListener(mTaskStackListener);
  if (mSystemServicesProxy.isForegroundUserOwner()) {
    mProxyBroadcastReceiver=new RecentsOwnerEventProxyReceiver();
    IntentFilter filter=new IntentFilter();
    filter.addAction(Recents.ACTION_PROXY_NOTIFY_RECENTS_VISIBLITY_TO_OWNER);
    filter.addAction(Recents.ACTION_PROXY_SCREEN_PINNING_REQUEST_TO_OWNER);
    mContext.registerReceiverAsUser(mProxyBroadcastReceiver,UserHandle.CURRENT,filter,null,mHandler);
  }
  TaskStackViewLayoutAlgorithm.initializeCurve();
  reloadHeaderBarLayout(true);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  RecentsTaskLoadPlan plan=loader.createLoadPlan(mContext);
  loader.preloadTasks(plan,true);
  RecentsTaskLoadPlan.Options launchOpts=new RecentsTaskLoadPlan.Options();
  launchOpts.numVisibleTasks=loader.getApplicationIconCacheSize();
  launchOpts.numVisibleTaskThumbnails=loader.getThumbnailCacheSize();
  launchOpts.onlyLoadForCache=true;
  loader.loadTasks(mContext,plan,launchOpts);
  putComponent(Recents.class,this);
}",0.973463687150838
195470,"/** 
 * Called with the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  RecentsTaskLoader.initialize(this);
  SystemServicesProxy ssp=RecentsTaskLoader.getInstance().getSystemServicesProxy();
  mConfig=RecentsConfiguration.reinitialize(this,ssp);
  mAppWidgetHost=new RecentsAppWidgetHost(this,Constants.Values.App.AppWidgetHostId);
  setContentView(R.layout.recents);
  mRecentsView=(RecentsView)findViewById(R.id.recents_view);
  mRecentsView.setCallbacks(this);
  mRecentsView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
  mEmptyViewStub=(ViewStub)findViewById(R.id.empty_view_stub);
  mDebugOverlayStub=(ViewStub)findViewById(R.id.debug_overlay_stub);
  mScrimViews=new SystemBarScrimViews(this,mConfig);
  mStatusBar=((SystemUIApplication)getApplication()).getComponent(PhoneStatusBar.class);
  inflateDebugOverlay();
  bindSearchBarAppWidget();
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(SearchManager.INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED);
  registerReceiver(mSystemBroadcastReceiver,filter);
  try {
    Utilities.setShadowProperty(""String_Node_Str"",String.valueOf(1.5f));
  }
 catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
}","/** 
 * Called with the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  RecentsTaskLoader.initialize(this);
  SystemServicesProxy ssp=RecentsTaskLoader.getInstance().getSystemServicesProxy();
  mConfig=RecentsConfiguration.reinitialize(this,ssp);
  mAppWidgetHost=new RecentsAppWidgetHost(this,Constants.Values.App.AppWidgetHostId);
  setContentView(R.layout.recents);
  mRecentsView=(RecentsView)findViewById(R.id.recents_view);
  mRecentsView.setCallbacks(this);
  mRecentsView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
  mEmptyViewStub=(ViewStub)findViewById(R.id.empty_view_stub);
  mDebugOverlayStub=(ViewStub)findViewById(R.id.debug_overlay_stub);
  mScrimViews=new SystemBarScrimViews(this,mConfig);
  inflateDebugOverlay();
  bindSearchBarAppWidget();
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(SearchManager.INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED);
  registerReceiver(mSystemBroadcastReceiver,filter);
  try {
    Utilities.setShadowProperty(""String_Node_Str"",String.valueOf(1.5f));
  }
 catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
}",0.9687609687609688
195471,"@Override public void onScreenPinningRequest(){
  if (mStatusBar != null) {
    mStatusBar.showScreenPinningRequest(false);
  }
}","@Override public void onScreenPinningRequest(){
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.startScreenPinning(this,ssp);
}",0.373887240356083
195472,"/** 
 * Initializes the Recents. 
 */
@ProxyFromPrimaryToCurrentUser @Override public void start(){
  if (sInstance == null) {
    sInstance=this;
  }
  RecentsTaskLoader.initialize(mContext);
  mInflater=LayoutInflater.from(mContext);
  mSystemServicesProxy=new SystemServicesProxy(mContext);
  mHandler=new Handler();
  mTaskStackBounds=new Rect();
  mTaskStackListener=new TaskStackListenerImpl(mHandler);
  mSystemServicesProxy.registerTaskStackListener(mTaskStackListener);
  if (mSystemServicesProxy.isForegroundUserOwner()) {
    mProxyBroadcastReceiver=new RecentsOwnerEventProxyReceiver();
    IntentFilter filter=new IntentFilter();
    filter.addAction(Recents.ACTION_PROXY_NOTIFY_RECENTS_VISIBLITY_TO_OWNER);
    mContext.registerReceiverAsUser(mProxyBroadcastReceiver,UserHandle.CURRENT,filter,null,mHandler);
  }
  TaskStackViewLayoutAlgorithm.initializeCurve();
  reloadHeaderBarLayout(true);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  RecentsTaskLoadPlan plan=loader.createLoadPlan(mContext);
  loader.preloadTasks(plan,true);
  RecentsTaskLoadPlan.Options launchOpts=new RecentsTaskLoadPlan.Options();
  launchOpts.numVisibleTasks=loader.getApplicationIconCacheSize();
  launchOpts.numVisibleTaskThumbnails=loader.getThumbnailCacheSize();
  launchOpts.onlyLoadForCache=true;
  loader.loadTasks(mContext,plan,launchOpts);
  putComponent(Recents.class,this);
}","/** 
 * Initializes the Recents. 
 */
@ProxyFromPrimaryToCurrentUser @Override public void start(){
  if (sInstance == null) {
    sInstance=this;
  }
  RecentsTaskLoader.initialize(mContext);
  mInflater=LayoutInflater.from(mContext);
  mSystemServicesProxy=new SystemServicesProxy(mContext);
  mHandler=new Handler();
  mTaskStackBounds=new Rect();
  mTaskStackListener=new TaskStackListenerImpl(mHandler);
  mSystemServicesProxy.registerTaskStackListener(mTaskStackListener);
  if (mSystemServicesProxy.isForegroundUserOwner()) {
    mProxyBroadcastReceiver=new RecentsOwnerEventProxyReceiver();
    IntentFilter filter=new IntentFilter();
    filter.addAction(Recents.ACTION_PROXY_NOTIFY_RECENTS_VISIBLITY_TO_OWNER);
    filter.addAction(Recents.ACTION_PROXY_SCREEN_PINNING_REQUEST_TO_OWNER);
    mContext.registerReceiverAsUser(mProxyBroadcastReceiver,UserHandle.CURRENT,filter,null,mHandler);
  }
  TaskStackViewLayoutAlgorithm.initializeCurve();
  reloadHeaderBarLayout(true);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  RecentsTaskLoadPlan plan=loader.createLoadPlan(mContext);
  loader.preloadTasks(plan,true);
  RecentsTaskLoadPlan.Options launchOpts=new RecentsTaskLoadPlan.Options();
  launchOpts.numVisibleTasks=loader.getApplicationIconCacheSize();
  launchOpts.numVisibleTaskThumbnails=loader.getThumbnailCacheSize();
  launchOpts.onlyLoadForCache=true;
  loader.loadTasks(mContext,plan,launchOpts);
  putComponent(Recents.class,this);
}",0.973463687150838
195473,"/** 
 * Called with the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  RecentsTaskLoader.initialize(this);
  SystemServicesProxy ssp=RecentsTaskLoader.getInstance().getSystemServicesProxy();
  mConfig=RecentsConfiguration.reinitialize(this,ssp);
  mAppWidgetHost=new RecentsAppWidgetHost(this,Constants.Values.App.AppWidgetHostId);
  setContentView(R.layout.recents);
  mRecentsView=(RecentsView)findViewById(R.id.recents_view);
  mRecentsView.setCallbacks(this);
  mRecentsView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
  mEmptyViewStub=(ViewStub)findViewById(R.id.empty_view_stub);
  mDebugOverlayStub=(ViewStub)findViewById(R.id.debug_overlay_stub);
  mScrimViews=new SystemBarScrimViews(this,mConfig);
  mStatusBar=((SystemUIApplication)getApplication()).getComponent(PhoneStatusBar.class);
  inflateDebugOverlay();
  bindSearchBarAppWidget();
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(SearchManager.INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED);
  registerReceiver(mSystemBroadcastReceiver,filter);
  try {
    Utilities.setShadowProperty(""String_Node_Str"",String.valueOf(1.5f));
  }
 catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
}","/** 
 * Called with the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  RecentsTaskLoader.initialize(this);
  SystemServicesProxy ssp=RecentsTaskLoader.getInstance().getSystemServicesProxy();
  mConfig=RecentsConfiguration.reinitialize(this,ssp);
  mAppWidgetHost=new RecentsAppWidgetHost(this,Constants.Values.App.AppWidgetHostId);
  setContentView(R.layout.recents);
  mRecentsView=(RecentsView)findViewById(R.id.recents_view);
  mRecentsView.setCallbacks(this);
  mRecentsView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
  mEmptyViewStub=(ViewStub)findViewById(R.id.empty_view_stub);
  mDebugOverlayStub=(ViewStub)findViewById(R.id.debug_overlay_stub);
  mScrimViews=new SystemBarScrimViews(this,mConfig);
  inflateDebugOverlay();
  bindSearchBarAppWidget();
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(SearchManager.INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED);
  registerReceiver(mSystemBroadcastReceiver,filter);
  try {
    Utilities.setShadowProperty(""String_Node_Str"",String.valueOf(1.5f));
  }
 catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
}",0.9687609687609688
195474,"@Override public void onScreenPinningRequest(){
  if (mStatusBar != null) {
    mStatusBar.showScreenPinningRequest(false);
  }
}","@Override public void onScreenPinningRequest(){
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.startScreenPinning(this,ssp);
}",0.373887240356083
195475,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((mName != null) ? mName.hashCode() : 0);
  result=prime * result + mContentType;
  result=prime * result + mPageCount;
  result=prime * result + (int)mDataSize;
  result=prime * result + (int)mDataSize >> 32;
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((mName != null) ? mName.hashCode() : 0);
  result=prime * result + mContentType;
  result=prime * result + mPageCount;
  result=prime * result + (int)mDataSize;
  result=prime * result + (int)(mDataSize >> 32);
  return result;
}",0.9969325153374232
195476,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((mName != null) ? mName.hashCode() : 0);
  result=prime * result + mContentType;
  result=prime * result + mPageCount;
  result=prime * result + (int)mDataSize;
  result=prime * result + (int)mDataSize >> 32;
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((mName != null) ? mName.hashCode() : 0);
  result=prime * result + mContentType;
  result=prime * result + mPageCount;
  result=prime * result + (int)mDataSize;
  result=prime * result + (int)(mDataSize >> 32);
  return result;
}",0.9969325153374232
195477,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((mName != null) ? mName.hashCode() : 0);
  result=prime * result + mContentType;
  result=prime * result + mPageCount;
  result=prime * result + (int)mDataSize;
  result=prime * result + (int)mDataSize >> 32;
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((mName != null) ? mName.hashCode() : 0);
  result=prime * result + mContentType;
  result=prime * result + mPageCount;
  result=prime * result + (int)mDataSize;
  result=prime * result + (int)(mDataSize >> 32);
  return result;
}",0.9969325153374232
195478,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((mName != null) ? mName.hashCode() : 0);
  result=prime * result + mContentType;
  result=prime * result + mPageCount;
  result=prime * result + (int)mDataSize;
  result=prime * result + (int)mDataSize >> 32;
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((mName != null) ? mName.hashCode() : 0);
  result=prime * result + mContentType;
  result=prime * result + mPageCount;
  result=prime * result + (int)mDataSize;
  result=prime * result + (int)(mDataSize >> 32);
  return result;
}",0.9969325153374232
195479,"/** 
 * Called when updating or posting a notification to the heads up.
 */
public void updateNotification(NotificationData.Entry headsUp,boolean alert){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  if (alert) {
    mBar.scheduleHeadsUpDecay(mHeadsUpNotificationDecay);
  }
  invalidate();
  if (mHeadsUp == headsUp) {
    resetViewForHeadsup();
    return;
  }
  mHeadsUp=headsUp;
  if (mContentHolder != null) {
    mContentHolder.removeAllViews();
  }
  if (mHeadsUp != null) {
    mMostRecentPackageName=mHeadsUp.notification.getPackageName();
    if (mHeadsUp.row != null) {
      resetViewForHeadsup();
    }
    mStartTouchTime=SystemClock.elapsedRealtime() + mTouchSensitivityDelay;
    if (mContentHolder != null) {
      mContentHolder.setX(0);
      mContentHolder.setVisibility(View.VISIBLE);
      mContentHolder.setAlpha(mMaxAlpha);
      mContentHolder.addView(mHeadsUp.row);
      sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED);
      mSwipeHelper.snapChild(mContentHolder,1f);
    }
    mHeadsUp.setInterruption();
    mBar.scheduleHeadsUpOpen();
  }
}","/** 
 * Called when updating or posting a notification to the heads up.
 */
public void updateNotification(NotificationData.Entry headsUp,boolean alert){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  if (mHeadsUp == headsUp) {
    resetViewForHeadsup();
    return;
  }
  mHeadsUp=headsUp;
  if (mContentHolder != null) {
    mContentHolder.removeAllViews();
  }
  if (mHeadsUp != null) {
    mMostRecentPackageName=mHeadsUp.notification.getPackageName();
    if (mHeadsUp.row != null) {
      resetViewForHeadsup();
    }
    mStartTouchTime=SystemClock.elapsedRealtime() + mTouchSensitivityDelay;
    if (mContentHolder != null) {
      mContentHolder.setX(0);
      mContentHolder.setVisibility(View.VISIBLE);
      mContentHolder.setAlpha(mMaxAlpha);
      mContentHolder.addView(mHeadsUp.row);
      sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED);
      mSwipeHelper.snapChild(mContentHolder,1f);
    }
    mHeadsUp.setInterruption();
  }
  if (alert) {
    mBar.scheduleHeadsUpOpen();
    mBar.scheduleHeadsUpDecay(mHeadsUpNotificationDecay);
  }
}",0.921803127874885
195480,"/** 
 * Called when updating or posting a notification to the heads up.
 */
public void updateNotification(NotificationData.Entry headsUp,boolean alert){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  if (alert) {
    mBar.scheduleHeadsUpDecay(mHeadsUpNotificationDecay);
  }
  invalidate();
  if (mHeadsUp == headsUp) {
    resetViewForHeadsup();
    return;
  }
  mHeadsUp=headsUp;
  if (mContentHolder != null) {
    mContentHolder.removeAllViews();
  }
  if (mHeadsUp != null) {
    mMostRecentPackageName=mHeadsUp.notification.getPackageName();
    if (mHeadsUp.row != null) {
      resetViewForHeadsup();
    }
    mStartTouchTime=SystemClock.elapsedRealtime() + mTouchSensitivityDelay;
    if (mContentHolder != null) {
      mContentHolder.setX(0);
      mContentHolder.setVisibility(View.VISIBLE);
      mContentHolder.setAlpha(mMaxAlpha);
      mContentHolder.addView(mHeadsUp.row);
      sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED);
      mSwipeHelper.snapChild(mContentHolder,1f);
    }
    mHeadsUp.setInterruption();
    mBar.scheduleHeadsUpOpen();
  }
}","/** 
 * Called when updating or posting a notification to the heads up.
 */
public void updateNotification(NotificationData.Entry headsUp,boolean alert){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  if (mHeadsUp == headsUp) {
    resetViewForHeadsup();
    return;
  }
  mHeadsUp=headsUp;
  if (mContentHolder != null) {
    mContentHolder.removeAllViews();
  }
  if (mHeadsUp != null) {
    mMostRecentPackageName=mHeadsUp.notification.getPackageName();
    if (mHeadsUp.row != null) {
      resetViewForHeadsup();
    }
    mStartTouchTime=SystemClock.elapsedRealtime() + mTouchSensitivityDelay;
    if (mContentHolder != null) {
      mContentHolder.setX(0);
      mContentHolder.setVisibility(View.VISIBLE);
      mContentHolder.setAlpha(mMaxAlpha);
      mContentHolder.addView(mHeadsUp.row);
      sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED);
      mSwipeHelper.snapChild(mContentHolder,1f);
    }
    mHeadsUp.setInterruption();
  }
  if (alert) {
    mBar.scheduleHeadsUpOpen();
    mBar.scheduleHeadsUpDecay(mHeadsUpNotificationDecay);
  }
}",0.921803127874885
195481,"private boolean isBelowLastNotification(float touchX,float touchY){
  ExpandableView lastChildNotGone=(ExpandableView)getLastChildNotGone();
  if (lastChildNotGone == null) {
    return touchY > mIntrinsicPadding;
  }
  if (lastChildNotGone != mDismissView && lastChildNotGone != mEmptyShadeView) {
    return touchY > lastChildNotGone.getY() + lastChildNotGone.getActualHeight();
  }
 else   if (lastChildNotGone == mEmptyShadeView) {
    return touchY > mEmptyShadeView.getY();
  }
 else {
    float dismissY=mDismissView.getY();
    boolean belowDismissView=touchY > dismissY + mDismissView.getActualHeight();
    return belowDismissView || (touchY > dismissY && mDismissView.isOnEmptySpace(touchX - mDismissView.getX(),touchY - dismissY));
  }
}","private boolean isBelowLastNotification(float touchX,float touchY){
  int childCount=getChildCount();
  for (int i=childCount - 1; i >= 0; i--) {
    ExpandableView child=(ExpandableView)getChildAt(i);
    if (child.getVisibility() != View.GONE) {
      float childTop=child.getY();
      if (childTop > touchY) {
        return false;
      }
      boolean belowChild=touchY > childTop + child.getActualHeight();
      if (child == mDismissView) {
        if (!belowChild && !mDismissView.isOnEmptySpace(touchX - mDismissView.getX(),touchY - childTop)) {
          return false;
        }
      }
 else       if (child == mEmptyShadeView) {
        return true;
      }
 else       if (!belowChild) {
        return false;
      }
    }
  }
  return touchY > mIntrinsicPadding;
}",0.2616088947024199
195482,"private boolean isBelowLastNotification(float touchX,float touchY){
  ExpandableView lastChildNotGone=(ExpandableView)getLastChildNotGone();
  if (lastChildNotGone == null) {
    return touchY > mIntrinsicPadding;
  }
  if (lastChildNotGone != mDismissView && lastChildNotGone != mEmptyShadeView) {
    return touchY > lastChildNotGone.getY() + lastChildNotGone.getActualHeight();
  }
 else   if (lastChildNotGone == mEmptyShadeView) {
    return touchY > mEmptyShadeView.getY();
  }
 else {
    float dismissY=mDismissView.getY();
    boolean belowDismissView=touchY > dismissY + mDismissView.getActualHeight();
    return belowDismissView || (touchY > dismissY && mDismissView.isOnEmptySpace(touchX - mDismissView.getX(),touchY - dismissY));
  }
}","private boolean isBelowLastNotification(float touchX,float touchY){
  int childCount=getChildCount();
  for (int i=childCount - 1; i >= 0; i--) {
    ExpandableView child=(ExpandableView)getChildAt(i);
    if (child.getVisibility() != View.GONE) {
      float childTop=child.getY();
      if (childTop > touchY) {
        return false;
      }
      boolean belowChild=touchY > childTop + child.getActualHeight();
      if (child == mDismissView) {
        if (!belowChild && !mDismissView.isOnEmptySpace(touchX - mDismissView.getX(),touchY - childTop)) {
          return false;
        }
      }
 else       if (child == mEmptyShadeView) {
        return true;
      }
 else       if (!belowChild) {
        return false;
      }
    }
  }
  return touchY > mIntrinsicPadding;
}",0.2616088947024199
195483,"private void processAppUsage(SparseArray<UserHandle> asUsers){
  final boolean forAllUsers=(asUsers.get(UserHandle.USER_ALL) != null);
  SensorManager sensorManager=(SensorManager)mContext.getSystemService(Context.SENSOR_SERVICE);
  final int which=mStatsType;
  final int speedSteps=mPowerProfile.getNumSpeedSteps();
  final double[] powerCpuNormal=new double[speedSteps];
  final long[] cpuSpeedStepTimes=new long[speedSteps];
  for (int p=0; p < speedSteps; p++) {
    powerCpuNormal[p]=mPowerProfile.getAveragePower(PowerProfile.POWER_CPU_ACTIVE,p);
  }
  final double mobilePowerPerPacket=getMobilePowerPerPacket();
  final double mobilePowerPerMs=getMobilePowerPerMs();
  final double wifiPowerPerPacket=getWifiPowerPerPacket();
  long appWakelockTimeUs=0;
  BatterySipper osApp=null;
  mStatsPeriod=mTypeBatteryRealtime;
  SparseArray<? extends Uid> uidStats=mStats.getUidStats();
  final int NU=uidStats.size();
  for (int iu=0; iu < NU; iu++) {
    Uid u=uidStats.valueAt(iu);
    double p;
    double power=0;
    double highestDrain=0;
    String packageWithHighestDrain=null;
    Map<String,? extends BatteryStats.Uid.Proc> processStats=u.getProcessStats();
    long cpuTime=0;
    long cpuFgTime=0;
    long wakelockTime=0;
    long gpsTime=0;
    if (processStats.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Proc> ent : processStats.entrySet()) {
        Uid.Proc ps=ent.getValue();
        final long userTime=ps.getUserTime(which);
        final long systemTime=ps.getSystemTime(which);
        final long foregroundTime=ps.getForegroundTime(which);
        cpuFgTime+=foregroundTime * 10;
        final long tmpCpuTime=(userTime + systemTime) * 10;
        int totalTimeAtSpeeds=0;
        for (int step=0; step < speedSteps; step++) {
          cpuSpeedStepTimes[step]=ps.getTimeAtCpuSpeedStep(step,which);
          totalTimeAtSpeeds+=cpuSpeedStepTimes[step];
        }
        if (totalTimeAtSpeeds == 0)         totalTimeAtSpeeds=1;
        double processPower=0;
        for (int step=0; step < speedSteps; step++) {
          double ratio=(double)cpuSpeedStepTimes[step] / totalTimeAtSpeeds;
          if (DEBUG && ratio != 0)           Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ step+ ""String_Node_Str""+ makemAh(ratio)+ ""String_Node_Str""+ makemAh(ratio * tmpCpuTime * powerCpuNormal[step] / (60 * 60 * 1000)));
          processPower+=ratio * tmpCpuTime * powerCpuNormal[step];
        }
        cpuTime+=tmpCpuTime;
        if (DEBUG && processPower != 0) {
          Log.d(TAG,String.format(""String_Node_Str"",ent.getKey(),makemAh(processPower / (60 * 60 * 1000))));
        }
        power+=processPower;
        if (packageWithHighestDrain == null || packageWithHighestDrain.startsWith(""String_Node_Str"")) {
          highestDrain=processPower;
          packageWithHighestDrain=ent.getKey();
        }
 else         if (highestDrain < processPower && !ent.getKey().startsWith(""String_Node_Str"")) {
          highestDrain=processPower;
          packageWithHighestDrain=ent.getKey();
        }
      }
    }
    if (cpuFgTime > cpuTime) {
      if (DEBUG && cpuFgTime > cpuTime + 10000) {
        Log.d(TAG,""String_Node_Str"");
      }
      cpuTime=cpuFgTime;
    }
    power/=(60 * 60 * 1000);
    Map<String,? extends BatteryStats.Uid.Wakelock> wakelockStats=u.getWakelockStats();
    for (    Map.Entry<String,? extends BatteryStats.Uid.Wakelock> wakelockEntry : wakelockStats.entrySet()) {
      Uid.Wakelock wakelock=wakelockEntry.getValue();
      BatteryStats.Timer timer=wakelock.getWakeTime(BatteryStats.WAKE_TYPE_PARTIAL);
      if (timer != null) {
        wakelockTime+=timer.getTotalTimeLocked(mRawRealtime,which);
      }
    }
    appWakelockTimeUs+=wakelockTime;
    wakelockTime/=1000;
    p=(wakelockTime * mPowerProfile.getAveragePower(PowerProfile.POWER_CPU_AWAKE)) / (60 * 60 * 1000);
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ wakelockTime+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    final long mobileRx=u.getNetworkActivityPackets(NETWORK_MOBILE_RX_DATA,mStatsType);
    final long mobileTx=u.getNetworkActivityPackets(NETWORK_MOBILE_TX_DATA,mStatsType);
    final long mobileRxB=u.getNetworkActivityBytes(NETWORK_MOBILE_RX_DATA,mStatsType);
    final long mobileTxB=u.getNetworkActivityBytes(NETWORK_MOBILE_TX_DATA,mStatsType);
    final long mobileActive=u.getMobileRadioActiveTime(mStatsType);
    if (mobileActive > 0) {
      mAppMobileActive+=mobileActive;
      p=(mobilePowerPerMs * mobileActive) / 1000;
    }
 else {
      p=(mobileRx + mobileTx) * mobilePowerPerPacket;
    }
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ (mobileRx + mobileTx)+ ""String_Node_Str""+ mobileActive+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    final long wifiRx=u.getNetworkActivityPackets(NETWORK_WIFI_RX_DATA,mStatsType);
    final long wifiTx=u.getNetworkActivityPackets(NETWORK_WIFI_TX_DATA,mStatsType);
    final long wifiRxB=u.getNetworkActivityBytes(NETWORK_WIFI_RX_DATA,mStatsType);
    final long wifiTxB=u.getNetworkActivityBytes(NETWORK_WIFI_TX_DATA,mStatsType);
    p=(wifiRx + wifiTx) * wifiPowerPerPacket;
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ (mobileRx + mobileTx)+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    long wifiRunningTimeMs=u.getWifiRunningTime(mRawRealtime,which) / 1000;
    mAppWifiRunning+=wifiRunningTimeMs;
    p=(wifiRunningTimeMs * mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_ON)) / (60 * 60 * 1000);
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ wifiRunningTimeMs+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    long wifiScanTimeMs=u.getWifiScanTime(mRawRealtime,which) / 1000;
    p=(wifiScanTimeMs * mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_SCAN)) / (60 * 60 * 1000);
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ wifiScanTimeMs+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    for (int bin=0; bin < BatteryStats.Uid.NUM_WIFI_BATCHED_SCAN_BINS; bin++) {
      long batchScanTimeMs=u.getWifiBatchedScanTime(bin,mRawRealtime,which) / 1000;
      p=((batchScanTimeMs * mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_BATCHED_SCAN,bin))) / (60 * 60 * 1000);
      if (DEBUG && p != 0)       Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ bin+ ""String_Node_Str""+ batchScanTimeMs+ ""String_Node_Str""+ makemAh(p));
      power+=p;
    }
    SparseArray<? extends BatteryStats.Uid.Sensor> sensorStats=u.getSensorStats();
    int NSE=sensorStats.size();
    for (int ise=0; ise < NSE; ise++) {
      Uid.Sensor sensor=sensorStats.valueAt(ise);
      int sensorHandle=sensorStats.keyAt(ise);
      BatteryStats.Timer timer=sensor.getSensorTime();
      long sensorTime=timer.getTotalTimeLocked(mRawRealtime,which) / 1000;
      double multiplier=0;
switch (sensorHandle) {
case Uid.Sensor.GPS:
        multiplier=mPowerProfile.getAveragePower(PowerProfile.POWER_GPS_ON);
      gpsTime=sensorTime;
    break;
default :
  List<Sensor> sensorList=sensorManager.getSensorList(android.hardware.Sensor.TYPE_ALL);
for (android.hardware.Sensor s : sensorList) {
  if (s.getHandle() == sensorHandle) {
    multiplier=s.getPower();
    break;
  }
}
}
p=(multiplier * sensorTime) / (60 * 60 * 1000);
if (DEBUG && p != 0) Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ sensorHandle+ ""String_Node_Str""+ sensorTime+ ""String_Node_Str""+ makemAh(p));
power+=p;
}
if (DEBUG && power != 0) Log.d(TAG,String.format(""String_Node_Str"",u.getUid(),makemAh(power)));
final int userId=UserHandle.getUserId(u.getUid());
if (power != 0 || u.getUid() == 0) {
BatterySipper app=new BatterySipper(BatterySipper.DrainType.APP,u,new double[]{power});
app.cpuTime=cpuTime;
app.gpsTime=gpsTime;
app.wifiRunningTime=wifiRunningTimeMs;
app.cpuFgTime=cpuFgTime;
app.wakeLockTime=wakelockTime;
app.mobileRxPackets=mobileRx;
app.mobileTxPackets=mobileTx;
app.mobileActive=mobileActive / 1000;
app.mobileActiveCount=u.getMobileRadioActiveCount(mStatsType);
app.wifiRxPackets=wifiRx;
app.wifiTxPackets=wifiTx;
app.mobileRxBytes=mobileRxB;
app.mobileTxBytes=mobileTxB;
app.wifiRxBytes=wifiRxB;
app.wifiTxBytes=wifiTxB;
app.packageWithHighestDrain=packageWithHighestDrain;
if (u.getUid() == Process.WIFI_UID) {
mWifiSippers.add(app);
mWifiPower+=power;
}
 else if (u.getUid() == Process.BLUETOOTH_UID) {
mBluetoothSippers.add(app);
mBluetoothPower+=power;
}
 else if (!forAllUsers && asUsers.get(userId) == null && UserHandle.getAppId(u.getUid()) >= Process.FIRST_APPLICATION_UID) {
List<BatterySipper> list=mUserSippers.get(userId);
if (list == null) {
list=new ArrayList<BatterySipper>();
mUserSippers.put(userId,list);
}
list.add(app);
if (power != 0) {
Double userPower=mUserPower.get(userId);
if (userPower == null) {
  userPower=power;
}
 else {
  userPower+=power;
}
mUserPower.put(userId,userPower);
}
}
 else {
mUsageList.add(app);
if (power > mMaxPower) mMaxPower=power;
if (power > mMaxRealPower) mMaxRealPower=power;
mComputedPower+=power;
}
if (u.getUid() == 0) {
osApp=app;
}
}
}
if (osApp != null) {
long wakeTimeMillis=mBatteryUptime / 1000;
wakeTimeMillis-=(appWakelockTimeUs / 1000) + (mStats.getScreenOnTime(mRawRealtime,which) / 1000);
if (wakeTimeMillis > 0) {
double power=(wakeTimeMillis * mPowerProfile.getAveragePower(PowerProfile.POWER_CPU_AWAKE)) / (60 * 60 * 1000);
if (DEBUG) Log.d(TAG,""String_Node_Str"" + wakeTimeMillis + ""String_Node_Str""+ makemAh(power));
osApp.wakeLockTime+=wakeTimeMillis;
osApp.value+=power;
osApp.values[0]+=power;
if (osApp.value > mMaxPower) mMaxPower=osApp.value;
if (osApp.value > mMaxRealPower) mMaxRealPower=osApp.value;
mComputedPower+=power;
}
}
}","private void processAppUsage(SparseArray<UserHandle> asUsers){
  final boolean forAllUsers=(asUsers.get(UserHandle.USER_ALL) != null);
  SensorManager sensorManager=(SensorManager)mContext.getSystemService(Context.SENSOR_SERVICE);
  final int which=mStatsType;
  final int speedSteps=mPowerProfile.getNumSpeedSteps();
  final double[] powerCpuNormal=new double[speedSteps];
  final long[] cpuSpeedStepTimes=new long[speedSteps];
  for (int p=0; p < speedSteps; p++) {
    powerCpuNormal[p]=mPowerProfile.getAveragePower(PowerProfile.POWER_CPU_ACTIVE,p);
  }
  final double mobilePowerPerPacket=getMobilePowerPerPacket();
  final double mobilePowerPerMs=getMobilePowerPerMs();
  final double wifiPowerPerPacket=getWifiPowerPerPacket();
  long appWakelockTimeUs=0;
  BatterySipper osApp=null;
  mStatsPeriod=mTypeBatteryRealtime;
  SparseArray<? extends Uid> uidStats=mStats.getUidStats();
  final int NU=uidStats.size();
  for (int iu=0; iu < NU; iu++) {
    Uid u=uidStats.valueAt(iu);
    double p;
    double power=0;
    double highestDrain=0;
    String packageWithHighestDrain=null;
    Map<String,? extends BatteryStats.Uid.Proc> processStats=u.getProcessStats();
    long cpuTime=0;
    long cpuFgTime=0;
    long wakelockTime=0;
    long gpsTime=0;
    if (processStats.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Proc> ent : processStats.entrySet()) {
        Uid.Proc ps=ent.getValue();
        final long userTime=ps.getUserTime(which);
        final long systemTime=ps.getSystemTime(which);
        final long foregroundTime=ps.getForegroundTime(which);
        cpuFgTime+=foregroundTime;
        final long tmpCpuTime=userTime + systemTime;
        int totalTimeAtSpeeds=0;
        for (int step=0; step < speedSteps; step++) {
          cpuSpeedStepTimes[step]=ps.getTimeAtCpuSpeedStep(step,which);
          totalTimeAtSpeeds+=cpuSpeedStepTimes[step];
        }
        if (totalTimeAtSpeeds == 0)         totalTimeAtSpeeds=1;
        double processPower=0;
        for (int step=0; step < speedSteps; step++) {
          double ratio=(double)cpuSpeedStepTimes[step] / totalTimeAtSpeeds;
          if (DEBUG && ratio != 0)           Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ step+ ""String_Node_Str""+ makemAh(ratio)+ ""String_Node_Str""+ makemAh(ratio * tmpCpuTime * powerCpuNormal[step] / (60 * 60 * 1000)));
          processPower+=ratio * tmpCpuTime * powerCpuNormal[step];
        }
        cpuTime+=tmpCpuTime;
        if (DEBUG && processPower != 0) {
          Log.d(TAG,String.format(""String_Node_Str"",ent.getKey(),makemAh(processPower / (60 * 60 * 1000))));
        }
        power+=processPower;
        if (packageWithHighestDrain == null || packageWithHighestDrain.startsWith(""String_Node_Str"")) {
          highestDrain=processPower;
          packageWithHighestDrain=ent.getKey();
        }
 else         if (highestDrain < processPower && !ent.getKey().startsWith(""String_Node_Str"")) {
          highestDrain=processPower;
          packageWithHighestDrain=ent.getKey();
        }
      }
    }
    if (cpuFgTime > cpuTime) {
      if (DEBUG && cpuFgTime > cpuTime + 10000) {
        Log.d(TAG,""String_Node_Str"");
      }
      cpuTime=cpuFgTime;
    }
    power/=(60 * 60 * 1000);
    Map<String,? extends BatteryStats.Uid.Wakelock> wakelockStats=u.getWakelockStats();
    for (    Map.Entry<String,? extends BatteryStats.Uid.Wakelock> wakelockEntry : wakelockStats.entrySet()) {
      Uid.Wakelock wakelock=wakelockEntry.getValue();
      BatteryStats.Timer timer=wakelock.getWakeTime(BatteryStats.WAKE_TYPE_PARTIAL);
      if (timer != null) {
        wakelockTime+=timer.getTotalTimeLocked(mRawRealtime,which);
      }
    }
    appWakelockTimeUs+=wakelockTime;
    wakelockTime/=1000;
    p=(wakelockTime * mPowerProfile.getAveragePower(PowerProfile.POWER_CPU_AWAKE)) / (60 * 60 * 1000);
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ wakelockTime+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    final long mobileRx=u.getNetworkActivityPackets(NETWORK_MOBILE_RX_DATA,mStatsType);
    final long mobileTx=u.getNetworkActivityPackets(NETWORK_MOBILE_TX_DATA,mStatsType);
    final long mobileRxB=u.getNetworkActivityBytes(NETWORK_MOBILE_RX_DATA,mStatsType);
    final long mobileTxB=u.getNetworkActivityBytes(NETWORK_MOBILE_TX_DATA,mStatsType);
    final long mobileActive=u.getMobileRadioActiveTime(mStatsType);
    if (mobileActive > 0) {
      mAppMobileActive+=mobileActive;
      p=(mobilePowerPerMs * mobileActive) / 1000;
    }
 else {
      p=(mobileRx + mobileTx) * mobilePowerPerPacket;
    }
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ (mobileRx + mobileTx)+ ""String_Node_Str""+ mobileActive+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    final long wifiRx=u.getNetworkActivityPackets(NETWORK_WIFI_RX_DATA,mStatsType);
    final long wifiTx=u.getNetworkActivityPackets(NETWORK_WIFI_TX_DATA,mStatsType);
    final long wifiRxB=u.getNetworkActivityBytes(NETWORK_WIFI_RX_DATA,mStatsType);
    final long wifiTxB=u.getNetworkActivityBytes(NETWORK_WIFI_TX_DATA,mStatsType);
    p=(wifiRx + wifiTx) * wifiPowerPerPacket;
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ (mobileRx + mobileTx)+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    long wifiRunningTimeMs=u.getWifiRunningTime(mRawRealtime,which) / 1000;
    mAppWifiRunning+=wifiRunningTimeMs;
    p=(wifiRunningTimeMs * mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_ON)) / (60 * 60 * 1000);
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ wifiRunningTimeMs+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    long wifiScanTimeMs=u.getWifiScanTime(mRawRealtime,which) / 1000;
    p=(wifiScanTimeMs * mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_SCAN)) / (60 * 60 * 1000);
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ wifiScanTimeMs+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    for (int bin=0; bin < BatteryStats.Uid.NUM_WIFI_BATCHED_SCAN_BINS; bin++) {
      long batchScanTimeMs=u.getWifiBatchedScanTime(bin,mRawRealtime,which) / 1000;
      p=((batchScanTimeMs * mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_BATCHED_SCAN,bin))) / (60 * 60 * 1000);
      if (DEBUG && p != 0)       Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ bin+ ""String_Node_Str""+ batchScanTimeMs+ ""String_Node_Str""+ makemAh(p));
      power+=p;
    }
    SparseArray<? extends BatteryStats.Uid.Sensor> sensorStats=u.getSensorStats();
    int NSE=sensorStats.size();
    for (int ise=0; ise < NSE; ise++) {
      Uid.Sensor sensor=sensorStats.valueAt(ise);
      int sensorHandle=sensorStats.keyAt(ise);
      BatteryStats.Timer timer=sensor.getSensorTime();
      long sensorTime=timer.getTotalTimeLocked(mRawRealtime,which) / 1000;
      double multiplier=0;
switch (sensorHandle) {
case Uid.Sensor.GPS:
        multiplier=mPowerProfile.getAveragePower(PowerProfile.POWER_GPS_ON);
      gpsTime=sensorTime;
    break;
default :
  List<Sensor> sensorList=sensorManager.getSensorList(android.hardware.Sensor.TYPE_ALL);
for (android.hardware.Sensor s : sensorList) {
  if (s.getHandle() == sensorHandle) {
    multiplier=s.getPower();
    break;
  }
}
}
p=(multiplier * sensorTime) / (60 * 60 * 1000);
if (DEBUG && p != 0) Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ sensorHandle+ ""String_Node_Str""+ sensorTime+ ""String_Node_Str""+ makemAh(p));
power+=p;
}
if (DEBUG && power != 0) Log.d(TAG,String.format(""String_Node_Str"",u.getUid(),makemAh(power)));
final int userId=UserHandle.getUserId(u.getUid());
if (power != 0 || u.getUid() == 0) {
BatterySipper app=new BatterySipper(BatterySipper.DrainType.APP,u,new double[]{power});
app.cpuTime=cpuTime;
app.gpsTime=gpsTime;
app.wifiRunningTime=wifiRunningTimeMs;
app.cpuFgTime=cpuFgTime;
app.wakeLockTime=wakelockTime;
app.mobileRxPackets=mobileRx;
app.mobileTxPackets=mobileTx;
app.mobileActive=mobileActive / 1000;
app.mobileActiveCount=u.getMobileRadioActiveCount(mStatsType);
app.wifiRxPackets=wifiRx;
app.wifiTxPackets=wifiTx;
app.mobileRxBytes=mobileRxB;
app.mobileTxBytes=mobileTxB;
app.wifiRxBytes=wifiRxB;
app.wifiTxBytes=wifiTxB;
app.packageWithHighestDrain=packageWithHighestDrain;
if (u.getUid() == Process.WIFI_UID) {
mWifiSippers.add(app);
mWifiPower+=power;
}
 else if (u.getUid() == Process.BLUETOOTH_UID) {
mBluetoothSippers.add(app);
mBluetoothPower+=power;
}
 else if (!forAllUsers && asUsers.get(userId) == null && UserHandle.getAppId(u.getUid()) >= Process.FIRST_APPLICATION_UID) {
List<BatterySipper> list=mUserSippers.get(userId);
if (list == null) {
list=new ArrayList<BatterySipper>();
mUserSippers.put(userId,list);
}
list.add(app);
if (power != 0) {
Double userPower=mUserPower.get(userId);
if (userPower == null) {
  userPower=power;
}
 else {
  userPower+=power;
}
mUserPower.put(userId,userPower);
}
}
 else {
mUsageList.add(app);
if (power > mMaxPower) mMaxPower=power;
if (power > mMaxRealPower) mMaxRealPower=power;
mComputedPower+=power;
}
if (u.getUid() == 0) {
osApp=app;
}
}
}
if (osApp != null) {
long wakeTimeMillis=mBatteryUptime / 1000;
wakeTimeMillis-=(appWakelockTimeUs / 1000) + (mStats.getScreenOnTime(mRawRealtime,which) / 1000);
if (wakeTimeMillis > 0) {
double power=(wakeTimeMillis * mPowerProfile.getAveragePower(PowerProfile.POWER_CPU_AWAKE)) / (60 * 60 * 1000);
if (DEBUG) Log.d(TAG,""String_Node_Str"" + wakeTimeMillis + ""String_Node_Str""+ makemAh(power));
osApp.wakeLockTime+=wakeTimeMillis;
osApp.value+=power;
osApp.values[0]+=power;
if (osApp.value > mMaxPower) mMaxPower=osApp.value;
if (osApp.value > mMaxRealPower) mMaxRealPower=osApp.value;
mComputedPower+=power;
}
}
}",0.9993865030674848
195484,"private int[] collectStats(String statsFile,int parentPid,boolean first,int[] curPids,ArrayList<Stats> allProcs){
  int[] pids=Process.getPids(statsFile,curPids);
  int NP=(pids == null) ? 0 : pids.length;
  int NS=allProcs.size();
  int curStatsIndex=0;
  for (int i=0; i < NP; i++) {
    int pid=pids[i];
    if (pid < 0) {
      NP=pid;
      break;
    }
    Stats st=curStatsIndex < NS ? allProcs.get(curStatsIndex) : null;
    if (st != null && st.pid == pid) {
      st.added=false;
      st.working=false;
      curStatsIndex++;
      if (DEBUG)       Slog.v(TAG,""String_Node_Str"" + (parentPid < 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ pid+ ""String_Node_Str""+ st);
      if (st.interesting) {
        final long uptime=SystemClock.uptimeMillis();
        final long[] procStats=mProcessStatsData;
        if (!Process.readProcFile(st.statFile.toString(),PROCESS_STATS_FORMAT,null,procStats,null)) {
          continue;
        }
        final long minfaults=procStats[PROCESS_STAT_MINOR_FAULTS];
        final long majfaults=procStats[PROCESS_STAT_MAJOR_FAULTS];
        final long utime=procStats[PROCESS_STAT_UTIME];
        final long stime=procStats[PROCESS_STAT_STIME];
        if (utime == st.base_utime && stime == st.base_stime) {
          st.rel_utime=0;
          st.rel_stime=0;
          st.rel_minfaults=0;
          st.rel_majfaults=0;
          if (st.active) {
            st.active=false;
          }
          continue;
        }
        if (!st.active) {
          st.active=true;
        }
        if (parentPid < 0) {
          getName(st,st.cmdlineFile);
          if (st.threadStats != null) {
            mCurThreadPids=collectStats(st.threadsDir,pid,false,mCurThreadPids,st.threadStats);
          }
        }
        if (DEBUG)         Slog.v(""String_Node_Str"",""String_Node_Str"" + st.name + ""String_Node_Str""+ st.pid+ ""String_Node_Str""+ utime+ ""String_Node_Str""+ st.base_utime+ ""String_Node_Str""+ stime+ ""String_Node_Str""+ st.base_stime+ ""String_Node_Str""+ minfaults+ ""String_Node_Str""+ st.base_minfaults+ ""String_Node_Str""+ majfaults+ ""String_Node_Str""+ st.base_majfaults);
        st.rel_uptime=uptime - st.base_uptime;
        st.base_uptime=uptime;
        st.rel_utime=(int)(utime - st.base_utime);
        st.rel_stime=(int)(stime - st.base_stime);
        st.base_utime=utime;
        st.base_stime=stime;
        st.rel_minfaults=(int)(minfaults - st.base_minfaults);
        st.rel_majfaults=(int)(majfaults - st.base_majfaults);
        st.base_minfaults=minfaults;
        st.base_majfaults=majfaults;
        st.working=true;
      }
      continue;
    }
    if (st == null || st.pid > pid) {
      st=new Stats(pid,parentPid,mIncludeThreads);
      allProcs.add(curStatsIndex,st);
      curStatsIndex++;
      NS++;
      if (DEBUG)       Slog.v(TAG,""String_Node_Str"" + (parentPid < 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ pid+ ""String_Node_Str""+ st);
      final String[] procStatsString=mProcessFullStatsStringData;
      final long[] procStats=mProcessFullStatsData;
      st.base_uptime=SystemClock.uptimeMillis();
      String path=st.statFile.toString();
      if (Process.readProcFile(path,PROCESS_FULL_STATS_FORMAT,procStatsString,procStats,null)) {
        st.vsize=procStats[PROCESS_FULL_STAT_VSIZE];
        if (true || procStats[PROCESS_FULL_STAT_VSIZE] != 0) {
          st.interesting=true;
          st.baseName=procStatsString[0];
          st.base_minfaults=procStats[PROCESS_FULL_STAT_MINOR_FAULTS];
          st.base_majfaults=procStats[PROCESS_FULL_STAT_MAJOR_FAULTS];
          st.base_utime=procStats[PROCESS_FULL_STAT_UTIME];
          st.base_stime=procStats[PROCESS_FULL_STAT_STIME];
        }
 else {
          Slog.i(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ procStatsString[0]);
          st.baseName=procStatsString[0];
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + pid);
        st.baseName=""String_Node_Str"";
        st.base_utime=st.base_stime=0;
        st.base_minfaults=st.base_majfaults=0;
      }
      if (parentPid < 0) {
        getName(st,st.cmdlineFile);
        if (st.threadStats != null) {
          mCurThreadPids=collectStats(st.threadsDir,pid,true,mCurThreadPids,st.threadStats);
        }
      }
 else       if (st.interesting) {
        st.name=st.baseName;
        st.nameWidth=onMeasureProcessName(st.name);
      }
      if (DEBUG)       Slog.v(""String_Node_Str"",""String_Node_Str"" + st.name + ""String_Node_Str""+ st.pid+ ""String_Node_Str""+ st.base_utime+ ""String_Node_Str""+ st.base_stime+ ""String_Node_Str""+ st.base_minfaults+ ""String_Node_Str""+ st.base_majfaults);
      st.rel_utime=0;
      st.rel_stime=0;
      st.rel_minfaults=0;
      st.rel_majfaults=0;
      st.added=true;
      if (!first && st.interesting) {
        st.working=true;
      }
      continue;
    }
    st.rel_utime=0;
    st.rel_stime=0;
    st.rel_minfaults=0;
    st.rel_majfaults=0;
    st.removed=true;
    st.working=true;
    allProcs.remove(curStatsIndex);
    NS--;
    if (DEBUG)     Slog.v(TAG,""String_Node_Str"" + (parentPid < 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ pid+ ""String_Node_Str""+ st);
    i--;
    continue;
  }
  while (curStatsIndex < NS) {
    final Stats st=allProcs.get(curStatsIndex);
    st.rel_utime=0;
    st.rel_stime=0;
    st.rel_minfaults=0;
    st.rel_majfaults=0;
    st.removed=true;
    st.working=true;
    allProcs.remove(curStatsIndex);
    NS--;
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + st.pid + ""String_Node_Str""+ st);
  }
  return pids;
}","private int[] collectStats(String statsFile,int parentPid,boolean first,int[] curPids,ArrayList<Stats> allProcs){
  int[] pids=Process.getPids(statsFile,curPids);
  int NP=(pids == null) ? 0 : pids.length;
  int NS=allProcs.size();
  int curStatsIndex=0;
  for (int i=0; i < NP; i++) {
    int pid=pids[i];
    if (pid < 0) {
      NP=pid;
      break;
    }
    Stats st=curStatsIndex < NS ? allProcs.get(curStatsIndex) : null;
    if (st != null && st.pid == pid) {
      st.added=false;
      st.working=false;
      curStatsIndex++;
      if (DEBUG)       Slog.v(TAG,""String_Node_Str"" + (parentPid < 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ pid+ ""String_Node_Str""+ st);
      if (st.interesting) {
        final long uptime=SystemClock.uptimeMillis();
        final long[] procStats=mProcessStatsData;
        if (!Process.readProcFile(st.statFile.toString(),PROCESS_STATS_FORMAT,null,procStats,null)) {
          continue;
        }
        final long minfaults=procStats[PROCESS_STAT_MINOR_FAULTS];
        final long majfaults=procStats[PROCESS_STAT_MAJOR_FAULTS];
        final long utime=procStats[PROCESS_STAT_UTIME] * mJiffyMillis;
        final long stime=procStats[PROCESS_STAT_STIME] * mJiffyMillis;
        if (utime == st.base_utime && stime == st.base_stime) {
          st.rel_utime=0;
          st.rel_stime=0;
          st.rel_minfaults=0;
          st.rel_majfaults=0;
          if (st.active) {
            st.active=false;
          }
          continue;
        }
        if (!st.active) {
          st.active=true;
        }
        if (parentPid < 0) {
          getName(st,st.cmdlineFile);
          if (st.threadStats != null) {
            mCurThreadPids=collectStats(st.threadsDir,pid,false,mCurThreadPids,st.threadStats);
          }
        }
        if (DEBUG)         Slog.v(""String_Node_Str"",""String_Node_Str"" + st.name + ""String_Node_Str""+ st.pid+ ""String_Node_Str""+ utime+ ""String_Node_Str""+ st.base_utime+ ""String_Node_Str""+ stime+ ""String_Node_Str""+ st.base_stime+ ""String_Node_Str""+ minfaults+ ""String_Node_Str""+ st.base_minfaults+ ""String_Node_Str""+ majfaults+ ""String_Node_Str""+ st.base_majfaults);
        st.rel_uptime=uptime - st.base_uptime;
        st.base_uptime=uptime;
        st.rel_utime=(int)(utime - st.base_utime);
        st.rel_stime=(int)(stime - st.base_stime);
        st.base_utime=utime;
        st.base_stime=stime;
        st.rel_minfaults=(int)(minfaults - st.base_minfaults);
        st.rel_majfaults=(int)(majfaults - st.base_majfaults);
        st.base_minfaults=minfaults;
        st.base_majfaults=majfaults;
        st.working=true;
      }
      continue;
    }
    if (st == null || st.pid > pid) {
      st=new Stats(pid,parentPid,mIncludeThreads);
      allProcs.add(curStatsIndex,st);
      curStatsIndex++;
      NS++;
      if (DEBUG)       Slog.v(TAG,""String_Node_Str"" + (parentPid < 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ pid+ ""String_Node_Str""+ st);
      final String[] procStatsString=mProcessFullStatsStringData;
      final long[] procStats=mProcessFullStatsData;
      st.base_uptime=SystemClock.uptimeMillis();
      String path=st.statFile.toString();
      if (Process.readProcFile(path,PROCESS_FULL_STATS_FORMAT,procStatsString,procStats,null)) {
        st.vsize=procStats[PROCESS_FULL_STAT_VSIZE];
        if (true || procStats[PROCESS_FULL_STAT_VSIZE] != 0) {
          st.interesting=true;
          st.baseName=procStatsString[0];
          st.base_minfaults=procStats[PROCESS_FULL_STAT_MINOR_FAULTS];
          st.base_majfaults=procStats[PROCESS_FULL_STAT_MAJOR_FAULTS];
          st.base_utime=procStats[PROCESS_FULL_STAT_UTIME] * mJiffyMillis;
          st.base_stime=procStats[PROCESS_FULL_STAT_STIME] * mJiffyMillis;
        }
 else {
          Slog.i(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ procStatsString[0]);
          st.baseName=procStatsString[0];
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + pid);
        st.baseName=""String_Node_Str"";
        st.base_utime=st.base_stime=0;
        st.base_minfaults=st.base_majfaults=0;
      }
      if (parentPid < 0) {
        getName(st,st.cmdlineFile);
        if (st.threadStats != null) {
          mCurThreadPids=collectStats(st.threadsDir,pid,true,mCurThreadPids,st.threadStats);
        }
      }
 else       if (st.interesting) {
        st.name=st.baseName;
        st.nameWidth=onMeasureProcessName(st.name);
      }
      if (DEBUG)       Slog.v(""String_Node_Str"",""String_Node_Str"" + st.name + ""String_Node_Str""+ st.pid+ ""String_Node_Str""+ st.base_utime+ ""String_Node_Str""+ st.base_stime+ ""String_Node_Str""+ st.base_minfaults+ ""String_Node_Str""+ st.base_majfaults);
      st.rel_utime=0;
      st.rel_stime=0;
      st.rel_minfaults=0;
      st.rel_majfaults=0;
      st.added=true;
      if (!first && st.interesting) {
        st.working=true;
      }
      continue;
    }
    st.rel_utime=0;
    st.rel_stime=0;
    st.rel_minfaults=0;
    st.rel_majfaults=0;
    st.removed=true;
    st.working=true;
    allProcs.remove(curStatsIndex);
    NS--;
    if (DEBUG)     Slog.v(TAG,""String_Node_Str"" + (parentPid < 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ pid+ ""String_Node_Str""+ st);
    i--;
    continue;
  }
  while (curStatsIndex < NS) {
    final Stats st=allProcs.get(curStatsIndex);
    st.rel_utime=0;
    st.rel_stime=0;
    st.rel_minfaults=0;
    st.rel_majfaults=0;
    st.removed=true;
    st.working=true;
    allProcs.remove(curStatsIndex);
    NS--;
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + st.pid + ""String_Node_Str""+ st);
  }
  return pids;
}",0.9946457255041942
195485,"final public String printCurrentState(long now){
  buildWorkingProcs();
  StringWriter sw=new StringWriter();
  PrintWriter pw=new FastPrintWriter(sw,false,1024);
  pw.print(""String_Node_Str"");
  if (now > mLastSampleTime) {
    pw.print(now - mLastSampleTime);
    pw.print(""String_Node_Str"");
    pw.print(now - mCurrentSampleTime);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(mLastSampleTime - now);
    pw.print(""String_Node_Str"");
    pw.print(mCurrentSampleTime - now);
    pw.print(""String_Node_Str"");
  }
  long sampleTime=mCurrentSampleTime - mLastSampleTime;
  long sampleRealTime=mCurrentSampleRealTime - mLastSampleRealTime;
  long percAwake=sampleRealTime > 0 ? ((sampleTime * 100) / sampleRealTime) : 0;
  if (percAwake != 100) {
    pw.print(""String_Node_Str"");
    pw.print(percAwake);
    pw.print(""String_Node_Str"");
  }
  pw.println(""String_Node_Str"");
  final int totalTime=mRelUserTime + mRelSystemTime + mRelIoWaitTime+ mRelIrqTime+ mRelSoftIrqTime+ mRelIdleTime;
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + totalTime + ""String_Node_Str""+ (mCurrentSampleTime - mLastSampleTime));
  int N=mWorkingProcs.size();
  for (int i=0; i < N; i++) {
    Stats st=mWorkingProcs.get(i);
    printProcessCPU(pw,st.added ? ""String_Node_Str"" : (st.removed ? ""String_Node_Str"" : ""String_Node_Str""),st.pid,st.name,(int)(st.rel_uptime + 5) / 10,st.rel_utime,st.rel_stime,0,0,0,st.rel_minfaults,st.rel_majfaults);
    if (!st.removed && st.workingThreads != null) {
      int M=st.workingThreads.size();
      for (int j=0; j < M; j++) {
        Stats tst=st.workingThreads.get(j);
        printProcessCPU(pw,tst.added ? ""String_Node_Str"" : (tst.removed ? ""String_Node_Str"" : ""String_Node_Str""),tst.pid,tst.name,(int)(st.rel_uptime + 5) / 10,tst.rel_utime,tst.rel_stime,0,0,0,0,0);
      }
    }
  }
  printProcessCPU(pw,""String_Node_Str"",-1,""String_Node_Str"",totalTime,mRelUserTime,mRelSystemTime,mRelIoWaitTime,mRelIrqTime,mRelSoftIrqTime,0,0);
  pw.flush();
  return sw.toString();
}","final public String printCurrentState(long now){
  buildWorkingProcs();
  StringWriter sw=new StringWriter();
  PrintWriter pw=new FastPrintWriter(sw,false,1024);
  pw.print(""String_Node_Str"");
  if (now > mLastSampleTime) {
    pw.print(now - mLastSampleTime);
    pw.print(""String_Node_Str"");
    pw.print(now - mCurrentSampleTime);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(mLastSampleTime - now);
    pw.print(""String_Node_Str"");
    pw.print(mCurrentSampleTime - now);
    pw.print(""String_Node_Str"");
  }
  long sampleTime=mCurrentSampleTime - mLastSampleTime;
  long sampleRealTime=mCurrentSampleRealTime - mLastSampleRealTime;
  long percAwake=sampleRealTime > 0 ? ((sampleTime * 100) / sampleRealTime) : 0;
  if (percAwake != 100) {
    pw.print(""String_Node_Str"");
    pw.print(percAwake);
    pw.print(""String_Node_Str"");
  }
  pw.println(""String_Node_Str"");
  final int totalTime=mRelUserTime + mRelSystemTime + mRelIoWaitTime+ mRelIrqTime+ mRelSoftIrqTime+ mRelIdleTime;
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + totalTime + ""String_Node_Str""+ (mCurrentSampleTime - mLastSampleTime));
  int N=mWorkingProcs.size();
  for (int i=0; i < N; i++) {
    Stats st=mWorkingProcs.get(i);
    printProcessCPU(pw,st.added ? ""String_Node_Str"" : (st.removed ? ""String_Node_Str"" : ""String_Node_Str""),st.pid,st.name,(int)st.rel_uptime,st.rel_utime,st.rel_stime,0,0,0,st.rel_minfaults,st.rel_majfaults);
    if (!st.removed && st.workingThreads != null) {
      int M=st.workingThreads.size();
      for (int j=0; j < M; j++) {
        Stats tst=st.workingThreads.get(j);
        printProcessCPU(pw,tst.added ? ""String_Node_Str"" : (tst.removed ? ""String_Node_Str"" : ""String_Node_Str""),tst.pid,tst.name,(int)st.rel_uptime,tst.rel_utime,tst.rel_stime,0,0,0,0,0);
      }
    }
  }
  printProcessCPU(pw,""String_Node_Str"",-1,""String_Node_Str"",totalTime,mRelUserTime,mRelSystemTime,mRelIoWaitTime,mRelIrqTime,mRelSoftIrqTime,0,0);
  pw.flush();
  return sw.toString();
}",0.9944834503510532
195486,"public ProcessCpuTracker(boolean includeThreads){
  mIncludeThreads=includeThreads;
}","public ProcessCpuTracker(boolean includeThreads){
  mIncludeThreads=includeThreads;
  long jiffyHz=Libcore.os.sysconf(OsConstants._SC_CLK_TCK);
  mJiffyMillis=1000 / jiffyHz;
}",0.6513409961685823
195487,"public void update(){
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + this);
  final long nowUptime=SystemClock.uptimeMillis();
  final long nowRealtime=SystemClock.elapsedRealtime();
  final long[] sysCpu=mSystemCpuData;
  if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
    final long usertime=sysCpu[0] + sysCpu[1];
    final long systemtime=sysCpu[2];
    final long idletime=sysCpu[3];
    final long iowaittime=sysCpu[4];
    final long irqtime=sysCpu[5];
    final long softirqtime=sysCpu[6];
    if (true || (usertime >= mBaseUserTime && systemtime >= mBaseSystemTime && iowaittime >= mBaseIoWaitTime && irqtime >= mBaseIrqTime && softirqtime >= mBaseSoftIrqTime && idletime >= mBaseIdleTime)) {
      mRelUserTime=(int)(usertime - mBaseUserTime);
      mRelSystemTime=(int)(systemtime - mBaseSystemTime);
      mRelIoWaitTime=(int)(iowaittime - mBaseIoWaitTime);
      mRelIrqTime=(int)(irqtime - mBaseIrqTime);
      mRelSoftIrqTime=(int)(softirqtime - mBaseSoftIrqTime);
      mRelIdleTime=(int)(idletime - mBaseIdleTime);
      mRelStatsAreGood=true;
      if (DEBUG) {
        Slog.i(""String_Node_Str"",""String_Node_Str"" + sysCpu[0] + ""String_Node_Str""+ sysCpu[1]+ ""String_Node_Str""+ sysCpu[2]+ ""String_Node_Str""+ sysCpu[3]+ ""String_Node_Str""+ sysCpu[4]+ ""String_Node_Str""+ sysCpu[5]+ ""String_Node_Str""+ sysCpu[6]);
        Slog.i(""String_Node_Str"",""String_Node_Str"" + mRelUserTime + ""String_Node_Str""+ mRelSystemTime+ ""String_Node_Str""+ mRelIdleTime+ ""String_Node_Str""+ mRelIrqTime);
      }
      mBaseUserTime=usertime;
      mBaseSystemTime=systemtime;
      mBaseIoWaitTime=iowaittime;
      mBaseIrqTime=irqtime;
      mBaseSoftIrqTime=softirqtime;
      mBaseIdleTime=idletime;
    }
 else {
      mRelUserTime=0;
      mRelSystemTime=0;
      mRelIoWaitTime=0;
      mRelIrqTime=0;
      mRelSoftIrqTime=0;
      mRelIdleTime=0;
      mRelStatsAreGood=false;
      Slog.w(TAG,""String_Node_Str"");
      return;
    }
  }
  mLastSampleTime=mCurrentSampleTime;
  mCurrentSampleTime=nowUptime;
  mLastSampleRealTime=mCurrentSampleRealTime;
  mCurrentSampleRealTime=nowRealtime;
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskReads();
  try {
    mCurPids=collectStats(""String_Node_Str"",-1,mFirst,mCurPids,mProcStats);
  }
  finally {
    StrictMode.setThreadPolicy(savedPolicy);
  }
  final float[] loadAverages=mLoadAverageData;
  if (Process.readProcFile(""String_Node_Str"",LOAD_AVERAGE_FORMAT,null,null,loadAverages)) {
    float load1=loadAverages[0];
    float load5=loadAverages[1];
    float load15=loadAverages[2];
    if (load1 != mLoad1 || load5 != mLoad5 || load15 != mLoad15) {
      mLoad1=load1;
      mLoad5=load5;
      mLoad15=load15;
      onLoadChanged(load1,load5,load15);
    }
  }
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - mCurrentSampleTime));
  mWorkingProcsSorted=false;
  mFirst=false;
}","public void update(){
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + this);
  final long nowUptime=SystemClock.uptimeMillis();
  final long nowRealtime=SystemClock.elapsedRealtime();
  final long[] sysCpu=mSystemCpuData;
  if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
    final long usertime=(sysCpu[0] + sysCpu[1]) * mJiffyMillis;
    final long systemtime=sysCpu[2] * mJiffyMillis;
    final long idletime=sysCpu[3] * mJiffyMillis;
    final long iowaittime=sysCpu[4] * mJiffyMillis;
    final long irqtime=sysCpu[5] * mJiffyMillis;
    final long softirqtime=sysCpu[6] * mJiffyMillis;
    if (true || (usertime >= mBaseUserTime && systemtime >= mBaseSystemTime && iowaittime >= mBaseIoWaitTime && irqtime >= mBaseIrqTime && softirqtime >= mBaseSoftIrqTime && idletime >= mBaseIdleTime)) {
      mRelUserTime=(int)(usertime - mBaseUserTime);
      mRelSystemTime=(int)(systemtime - mBaseSystemTime);
      mRelIoWaitTime=(int)(iowaittime - mBaseIoWaitTime);
      mRelIrqTime=(int)(irqtime - mBaseIrqTime);
      mRelSoftIrqTime=(int)(softirqtime - mBaseSoftIrqTime);
      mRelIdleTime=(int)(idletime - mBaseIdleTime);
      mRelStatsAreGood=true;
      if (DEBUG) {
        Slog.i(""String_Node_Str"",""String_Node_Str"" + (sysCpu[0] * mJiffyMillis) + ""String_Node_Str""+ (sysCpu[1] * mJiffyMillis)+ ""String_Node_Str""+ (sysCpu[2] * mJiffyMillis)+ ""String_Node_Str""+ (sysCpu[3] * mJiffyMillis)+ ""String_Node_Str""+ (sysCpu[4] * mJiffyMillis)+ ""String_Node_Str""+ (sysCpu[5] * mJiffyMillis)+ ""String_Node_Str""+ (sysCpu[6] * mJiffyMillis));
        Slog.i(""String_Node_Str"",""String_Node_Str"" + mRelUserTime + ""String_Node_Str""+ mRelSystemTime+ ""String_Node_Str""+ mRelIdleTime+ ""String_Node_Str""+ mRelIrqTime);
      }
      mBaseUserTime=usertime;
      mBaseSystemTime=systemtime;
      mBaseIoWaitTime=iowaittime;
      mBaseIrqTime=irqtime;
      mBaseSoftIrqTime=softirqtime;
      mBaseIdleTime=idletime;
    }
 else {
      mRelUserTime=0;
      mRelSystemTime=0;
      mRelIoWaitTime=0;
      mRelIrqTime=0;
      mRelSoftIrqTime=0;
      mRelIdleTime=0;
      mRelStatsAreGood=false;
      Slog.w(TAG,""String_Node_Str"");
      return;
    }
  }
  mLastSampleTime=mCurrentSampleTime;
  mCurrentSampleTime=nowUptime;
  mLastSampleRealTime=mCurrentSampleRealTime;
  mCurrentSampleRealTime=nowRealtime;
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskReads();
  try {
    mCurPids=collectStats(""String_Node_Str"",-1,mFirst,mCurPids,mProcStats);
  }
  finally {
    StrictMode.setThreadPolicy(savedPolicy);
  }
  final float[] loadAverages=mLoadAverageData;
  if (Process.readProcFile(""String_Node_Str"",LOAD_AVERAGE_FORMAT,null,null,loadAverages)) {
    float load1=loadAverages[0];
    float load5=loadAverages[1];
    float load15=loadAverages[2];
    if (load1 != mLoad1 || load5 != mLoad5 || load15 != mLoad15) {
      mLoad1=load1;
      mLoad5=load5;
      mLoad15=load15;
      onLoadChanged(load1,load5,load15);
    }
  }
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - mCurrentSampleTime));
  mWorkingProcsSorted=false;
  mFirst=false;
}",0.9650951199338296
195488,"/** 
 * Returns the total time (in clock ticks, or 1/100 sec) spent executing in both user and system code.  Safe to call without lock held.
 */
public long getCpuTimeForPid(int pid){
synchronized (mSinglePidStatsData) {
    final String statFile=""String_Node_Str"" + pid + ""String_Node_Str"";
    final long[] statsData=mSinglePidStatsData;
    if (Process.readProcFile(statFile,PROCESS_STATS_FORMAT,null,statsData,null)) {
      long time=statsData[PROCESS_STAT_UTIME] + statsData[PROCESS_STAT_STIME];
      return time;
    }
    return 0;
  }
}","/** 
 * Returns the total time (in clock ticks, or 1/100 sec) spent executing in both user and system code.  Safe to call without lock held.
 */
public long getCpuTimeForPid(int pid){
synchronized (mSinglePidStatsData) {
    final String statFile=""String_Node_Str"" + pid + ""String_Node_Str"";
    final long[] statsData=mSinglePidStatsData;
    if (Process.readProcFile(statFile,PROCESS_STATS_FORMAT,null,statsData,null)) {
      long time=statsData[PROCESS_STAT_UTIME] + statsData[PROCESS_STAT_STIME];
      return time * mJiffyMillis;
    }
    return 0;
  }
}",0.986449864498645
195489,"void updateCpuStatsNow(){
synchronized (mProcessCpuTracker) {
    mProcessCpuMutexFree.set(false);
    final long now=SystemClock.uptimeMillis();
    boolean haveNewCpuStats=false;
    if (MONITOR_CPU_USAGE && mLastCpuTime.get() < (now - MONITOR_CPU_MIN_TIME)) {
      mLastCpuTime.set(now);
      mProcessCpuTracker.update();
      if (mProcessCpuTracker.hasGoodLastStats()) {
        haveNewCpuStats=true;
        if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
          int user=mProcessCpuTracker.getLastUserTime();
          int system=mProcessCpuTracker.getLastSystemTime();
          int iowait=mProcessCpuTracker.getLastIoWaitTime();
          int irq=mProcessCpuTracker.getLastIrqTime();
          int softIrq=mProcessCpuTracker.getLastSoftIrqTime();
          int idle=mProcessCpuTracker.getLastIdleTime();
          int total=user + system + iowait+ irq+ softIrq+ idle;
          if (total == 0)           total=1;
          EventLog.writeEvent(EventLogTags.CPU,((user + system + iowait+ irq+ softIrq) * 100) / total,(user * 100) / total,(system * 100) / total,(iowait * 100) / total,(irq * 100) / total,(softIrq * 100) / total);
        }
      }
    }
    long[] cpuSpeedTimes=mProcessCpuTracker.getLastCpuSpeedTimes();
    final BatteryStatsImpl bstats=mBatteryStatsService.getActiveStatistics();
synchronized (bstats) {
synchronized (mPidsSelfLocked) {
        if (haveNewCpuStats) {
          final int perc=bstats.startAddingCpuLocked();
          if (perc >= 0) {
            int remainUTime=0;
            int remainSTime=0;
            int totalUTime=0;
            int totalSTime=0;
            final int N=mProcessCpuTracker.countStats();
            for (int i=0; i < N; i++) {
              ProcessCpuTracker.Stats st=mProcessCpuTracker.getStats(i);
              if (!st.working) {
                continue;
              }
              ProcessRecord pr=mPidsSelfLocked.get(st.pid);
              int otherUTime=(st.rel_utime * perc) / 100;
              int otherSTime=(st.rel_stime * perc) / 100;
              remainUTime+=otherUTime;
              remainSTime+=otherSTime;
              totalUTime+=st.rel_utime;
              totalSTime+=st.rel_stime;
              if (pr != null) {
                BatteryStatsImpl.Uid.Proc ps=pr.curProcBatteryStats;
                if (ps == null || !ps.isActive()) {
                  pr.curProcBatteryStats=ps=bstats.getProcessStatsLocked(pr.info.uid,pr.processName);
                }
                ps.addCpuTimeLocked(st.rel_utime - otherUTime,st.rel_stime - otherSTime,cpuSpeedTimes);
                pr.curCpuTime+=(st.rel_utime + st.rel_stime) * 10;
              }
 else {
                BatteryStatsImpl.Uid.Proc ps=st.batteryStats;
                if (ps == null || !ps.isActive()) {
                  st.batteryStats=ps=bstats.getProcessStatsLocked(bstats.mapUid(st.uid),st.name);
                }
                ps.addCpuTimeLocked(st.rel_utime - otherUTime,st.rel_stime - otherSTime,cpuSpeedTimes);
              }
            }
            final int userTime=mProcessCpuTracker.getLastUserTime();
            final int systemTime=mProcessCpuTracker.getLastSystemTime();
            final int iowaitTime=mProcessCpuTracker.getLastIoWaitTime();
            final int irqTime=mProcessCpuTracker.getLastIrqTime();
            final int softIrqTime=mProcessCpuTracker.getLastSoftIrqTime();
            final int idleTime=mProcessCpuTracker.getLastIdleTime();
            bstats.finishAddingCpuLocked(perc,remainUTime,remainSTime,totalUTime,totalSTime,userTime,systemTime,iowaitTime,irqTime,softIrqTime,idleTime,cpuSpeedTimes);
          }
        }
      }
      if (mLastWriteTime < (now - BATTERY_STATS_TIME)) {
        mLastWriteTime=now;
        mBatteryStatsService.getActiveStatistics().writeAsyncLocked();
      }
    }
  }
}","void updateCpuStatsNow(){
synchronized (mProcessCpuTracker) {
    mProcessCpuMutexFree.set(false);
    final long now=SystemClock.uptimeMillis();
    boolean haveNewCpuStats=false;
    if (MONITOR_CPU_USAGE && mLastCpuTime.get() < (now - MONITOR_CPU_MIN_TIME)) {
      mLastCpuTime.set(now);
      mProcessCpuTracker.update();
      if (mProcessCpuTracker.hasGoodLastStats()) {
        haveNewCpuStats=true;
        if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
          int user=mProcessCpuTracker.getLastUserTime();
          int system=mProcessCpuTracker.getLastSystemTime();
          int iowait=mProcessCpuTracker.getLastIoWaitTime();
          int irq=mProcessCpuTracker.getLastIrqTime();
          int softIrq=mProcessCpuTracker.getLastSoftIrqTime();
          int idle=mProcessCpuTracker.getLastIdleTime();
          int total=user + system + iowait+ irq+ softIrq+ idle;
          if (total == 0)           total=1;
          EventLog.writeEvent(EventLogTags.CPU,((user + system + iowait+ irq+ softIrq) * 100) / total,(user * 100) / total,(system * 100) / total,(iowait * 100) / total,(irq * 100) / total,(softIrq * 100) / total);
        }
      }
    }
    long[] cpuSpeedTimes=mProcessCpuTracker.getLastCpuSpeedTimes();
    final BatteryStatsImpl bstats=mBatteryStatsService.getActiveStatistics();
synchronized (bstats) {
synchronized (mPidsSelfLocked) {
        if (haveNewCpuStats) {
          final int perc=bstats.startAddingCpuLocked();
          if (perc >= 0) {
            int remainUTime=0;
            int remainSTime=0;
            int totalUTime=0;
            int totalSTime=0;
            final int N=mProcessCpuTracker.countStats();
            for (int i=0; i < N; i++) {
              ProcessCpuTracker.Stats st=mProcessCpuTracker.getStats(i);
              if (!st.working) {
                continue;
              }
              ProcessRecord pr=mPidsSelfLocked.get(st.pid);
              int otherUTime=(st.rel_utime * perc) / 100;
              int otherSTime=(st.rel_stime * perc) / 100;
              remainUTime+=otherUTime;
              remainSTime+=otherSTime;
              totalUTime+=st.rel_utime;
              totalSTime+=st.rel_stime;
              if (pr != null) {
                BatteryStatsImpl.Uid.Proc ps=pr.curProcBatteryStats;
                if (ps == null || !ps.isActive()) {
                  pr.curProcBatteryStats=ps=bstats.getProcessStatsLocked(pr.info.uid,pr.processName);
                }
                ps.addCpuTimeLocked(st.rel_utime - otherUTime,st.rel_stime - otherSTime,cpuSpeedTimes);
                pr.curCpuTime+=st.rel_utime + st.rel_stime;
              }
 else {
                BatteryStatsImpl.Uid.Proc ps=st.batteryStats;
                if (ps == null || !ps.isActive()) {
                  st.batteryStats=ps=bstats.getProcessStatsLocked(bstats.mapUid(st.uid),st.name);
                }
                ps.addCpuTimeLocked(st.rel_utime - otherUTime,st.rel_stime - otherSTime,cpuSpeedTimes);
              }
            }
            final int userTime=mProcessCpuTracker.getLastUserTime();
            final int systemTime=mProcessCpuTracker.getLastSystemTime();
            final int iowaitTime=mProcessCpuTracker.getLastIoWaitTime();
            final int irqTime=mProcessCpuTracker.getLastIrqTime();
            final int softIrqTime=mProcessCpuTracker.getLastSoftIrqTime();
            final int idleTime=mProcessCpuTracker.getLastIdleTime();
            bstats.finishAddingCpuLocked(perc,remainUTime,remainSTime,totalUTime,totalSTime,userTime,systemTime,iowaitTime,irqTime,softIrqTime,idleTime,cpuSpeedTimes);
          }
        }
      }
      if (mLastWriteTime < (now - BATTERY_STATS_TIME)) {
        mLastWriteTime=now;
        mBatteryStatsService.getActiveStatistics().writeAsyncLocked();
      }
    }
  }
}",0.9990877101524828
195490,"private void processAppUsage(SparseArray<UserHandle> asUsers){
  final boolean forAllUsers=(asUsers.get(UserHandle.USER_ALL) != null);
  SensorManager sensorManager=(SensorManager)mContext.getSystemService(Context.SENSOR_SERVICE);
  final int which=mStatsType;
  final int speedSteps=mPowerProfile.getNumSpeedSteps();
  final double[] powerCpuNormal=new double[speedSteps];
  final long[] cpuSpeedStepTimes=new long[speedSteps];
  for (int p=0; p < speedSteps; p++) {
    powerCpuNormal[p]=mPowerProfile.getAveragePower(PowerProfile.POWER_CPU_ACTIVE,p);
  }
  final double mobilePowerPerPacket=getMobilePowerPerPacket();
  final double mobilePowerPerMs=getMobilePowerPerMs();
  final double wifiPowerPerPacket=getWifiPowerPerPacket();
  long appWakelockTimeUs=0;
  BatterySipper osApp=null;
  mStatsPeriod=mTypeBatteryRealtime;
  SparseArray<? extends Uid> uidStats=mStats.getUidStats();
  final int NU=uidStats.size();
  for (int iu=0; iu < NU; iu++) {
    Uid u=uidStats.valueAt(iu);
    double p;
    double power=0;
    double highestDrain=0;
    String packageWithHighestDrain=null;
    Map<String,? extends BatteryStats.Uid.Proc> processStats=u.getProcessStats();
    long cpuTime=0;
    long cpuFgTime=0;
    long wakelockTime=0;
    long gpsTime=0;
    if (processStats.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Proc> ent : processStats.entrySet()) {
        Uid.Proc ps=ent.getValue();
        final long userTime=ps.getUserTime(which);
        final long systemTime=ps.getSystemTime(which);
        final long foregroundTime=ps.getForegroundTime(which);
        cpuFgTime+=foregroundTime * 10;
        final long tmpCpuTime=(userTime + systemTime) * 10;
        int totalTimeAtSpeeds=0;
        for (int step=0; step < speedSteps; step++) {
          cpuSpeedStepTimes[step]=ps.getTimeAtCpuSpeedStep(step,which);
          totalTimeAtSpeeds+=cpuSpeedStepTimes[step];
        }
        if (totalTimeAtSpeeds == 0)         totalTimeAtSpeeds=1;
        double processPower=0;
        for (int step=0; step < speedSteps; step++) {
          double ratio=(double)cpuSpeedStepTimes[step] / totalTimeAtSpeeds;
          if (DEBUG && ratio != 0)           Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ step+ ""String_Node_Str""+ makemAh(ratio)+ ""String_Node_Str""+ makemAh(ratio * tmpCpuTime * powerCpuNormal[step] / (60 * 60 * 1000)));
          processPower+=ratio * tmpCpuTime * powerCpuNormal[step];
        }
        cpuTime+=tmpCpuTime;
        if (DEBUG && processPower != 0) {
          Log.d(TAG,String.format(""String_Node_Str"",ent.getKey(),makemAh(processPower / (60 * 60 * 1000))));
        }
        power+=processPower;
        if (packageWithHighestDrain == null || packageWithHighestDrain.startsWith(""String_Node_Str"")) {
          highestDrain=processPower;
          packageWithHighestDrain=ent.getKey();
        }
 else         if (highestDrain < processPower && !ent.getKey().startsWith(""String_Node_Str"")) {
          highestDrain=processPower;
          packageWithHighestDrain=ent.getKey();
        }
      }
    }
    if (cpuFgTime > cpuTime) {
      if (DEBUG && cpuFgTime > cpuTime + 10000) {
        Log.d(TAG,""String_Node_Str"");
      }
      cpuTime=cpuFgTime;
    }
    power/=(60 * 60 * 1000);
    Map<String,? extends BatteryStats.Uid.Wakelock> wakelockStats=u.getWakelockStats();
    for (    Map.Entry<String,? extends BatteryStats.Uid.Wakelock> wakelockEntry : wakelockStats.entrySet()) {
      Uid.Wakelock wakelock=wakelockEntry.getValue();
      BatteryStats.Timer timer=wakelock.getWakeTime(BatteryStats.WAKE_TYPE_PARTIAL);
      if (timer != null) {
        wakelockTime+=timer.getTotalTimeLocked(mRawRealtime,which);
      }
    }
    appWakelockTimeUs+=wakelockTime;
    wakelockTime/=1000;
    p=(wakelockTime * mPowerProfile.getAveragePower(PowerProfile.POWER_CPU_AWAKE)) / (60 * 60 * 1000);
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ wakelockTime+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    final long mobileRx=u.getNetworkActivityPackets(NETWORK_MOBILE_RX_DATA,mStatsType);
    final long mobileTx=u.getNetworkActivityPackets(NETWORK_MOBILE_TX_DATA,mStatsType);
    final long mobileRxB=u.getNetworkActivityBytes(NETWORK_MOBILE_RX_DATA,mStatsType);
    final long mobileTxB=u.getNetworkActivityBytes(NETWORK_MOBILE_TX_DATA,mStatsType);
    final long mobileActive=u.getMobileRadioActiveTime(mStatsType);
    if (mobileActive > 0) {
      mAppMobileActive+=mobileActive;
      p=(mobilePowerPerMs * mobileActive) / 1000;
    }
 else {
      p=(mobileRx + mobileTx) * mobilePowerPerPacket;
    }
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ (mobileRx + mobileTx)+ ""String_Node_Str""+ mobileActive+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    final long wifiRx=u.getNetworkActivityPackets(NETWORK_WIFI_RX_DATA,mStatsType);
    final long wifiTx=u.getNetworkActivityPackets(NETWORK_WIFI_TX_DATA,mStatsType);
    final long wifiRxB=u.getNetworkActivityBytes(NETWORK_WIFI_RX_DATA,mStatsType);
    final long wifiTxB=u.getNetworkActivityBytes(NETWORK_WIFI_TX_DATA,mStatsType);
    p=(wifiRx + wifiTx) * wifiPowerPerPacket;
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ (mobileRx + mobileTx)+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    long wifiRunningTimeMs=u.getWifiRunningTime(mRawRealtime,which) / 1000;
    mAppWifiRunning+=wifiRunningTimeMs;
    p=(wifiRunningTimeMs * mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_ON)) / (60 * 60 * 1000);
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ wifiRunningTimeMs+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    long wifiScanTimeMs=u.getWifiScanTime(mRawRealtime,which) / 1000;
    p=(wifiScanTimeMs * mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_SCAN)) / (60 * 60 * 1000);
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ wifiScanTimeMs+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    for (int bin=0; bin < BatteryStats.Uid.NUM_WIFI_BATCHED_SCAN_BINS; bin++) {
      long batchScanTimeMs=u.getWifiBatchedScanTime(bin,mRawRealtime,which) / 1000;
      p=((batchScanTimeMs * mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_BATCHED_SCAN,bin))) / (60 * 60 * 1000);
      if (DEBUG && p != 0)       Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ bin+ ""String_Node_Str""+ batchScanTimeMs+ ""String_Node_Str""+ makemAh(p));
      power+=p;
    }
    SparseArray<? extends BatteryStats.Uid.Sensor> sensorStats=u.getSensorStats();
    int NSE=sensorStats.size();
    for (int ise=0; ise < NSE; ise++) {
      Uid.Sensor sensor=sensorStats.valueAt(ise);
      int sensorHandle=sensorStats.keyAt(ise);
      BatteryStats.Timer timer=sensor.getSensorTime();
      long sensorTime=timer.getTotalTimeLocked(mRawRealtime,which) / 1000;
      double multiplier=0;
switch (sensorHandle) {
case Uid.Sensor.GPS:
        multiplier=mPowerProfile.getAveragePower(PowerProfile.POWER_GPS_ON);
      gpsTime=sensorTime;
    break;
default :
  List<Sensor> sensorList=sensorManager.getSensorList(android.hardware.Sensor.TYPE_ALL);
for (android.hardware.Sensor s : sensorList) {
  if (s.getHandle() == sensorHandle) {
    multiplier=s.getPower();
    break;
  }
}
}
p=(multiplier * sensorTime) / (60 * 60 * 1000);
if (DEBUG && p != 0) Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ sensorHandle+ ""String_Node_Str""+ sensorTime+ ""String_Node_Str""+ makemAh(p));
power+=p;
}
if (DEBUG && power != 0) Log.d(TAG,String.format(""String_Node_Str"",u.getUid(),makemAh(power)));
final int userId=UserHandle.getUserId(u.getUid());
if (power != 0 || u.getUid() == 0) {
BatterySipper app=new BatterySipper(BatterySipper.DrainType.APP,u,new double[]{power});
app.cpuTime=cpuTime;
app.gpsTime=gpsTime;
app.wifiRunningTime=wifiRunningTimeMs;
app.cpuFgTime=cpuFgTime;
app.wakeLockTime=wakelockTime;
app.mobileRxPackets=mobileRx;
app.mobileTxPackets=mobileTx;
app.mobileActive=mobileActive / 1000;
app.mobileActiveCount=u.getMobileRadioActiveCount(mStatsType);
app.wifiRxPackets=wifiRx;
app.wifiTxPackets=wifiTx;
app.mobileRxBytes=mobileRxB;
app.mobileTxBytes=mobileTxB;
app.wifiRxBytes=wifiRxB;
app.wifiTxBytes=wifiTxB;
app.packageWithHighestDrain=packageWithHighestDrain;
if (u.getUid() == Process.WIFI_UID) {
mWifiSippers.add(app);
mWifiPower+=power;
}
 else if (u.getUid() == Process.BLUETOOTH_UID) {
mBluetoothSippers.add(app);
mBluetoothPower+=power;
}
 else if (!forAllUsers && asUsers.get(userId) == null && UserHandle.getAppId(u.getUid()) >= Process.FIRST_APPLICATION_UID) {
List<BatterySipper> list=mUserSippers.get(userId);
if (list == null) {
list=new ArrayList<BatterySipper>();
mUserSippers.put(userId,list);
}
list.add(app);
if (power != 0) {
Double userPower=mUserPower.get(userId);
if (userPower == null) {
  userPower=power;
}
 else {
  userPower+=power;
}
mUserPower.put(userId,userPower);
}
}
 else {
mUsageList.add(app);
if (power > mMaxPower) mMaxPower=power;
if (power > mMaxRealPower) mMaxRealPower=power;
mComputedPower+=power;
}
if (u.getUid() == 0) {
osApp=app;
}
}
}
if (osApp != null) {
long wakeTimeMillis=mBatteryUptime / 1000;
wakeTimeMillis-=(appWakelockTimeUs / 1000) + (mStats.getScreenOnTime(mRawRealtime,which) / 1000);
if (wakeTimeMillis > 0) {
double power=(wakeTimeMillis * mPowerProfile.getAveragePower(PowerProfile.POWER_CPU_AWAKE)) / (60 * 60 * 1000);
if (DEBUG) Log.d(TAG,""String_Node_Str"" + wakeTimeMillis + ""String_Node_Str""+ makemAh(power));
osApp.wakeLockTime+=wakeTimeMillis;
osApp.value+=power;
osApp.values[0]+=power;
if (osApp.value > mMaxPower) mMaxPower=osApp.value;
if (osApp.value > mMaxRealPower) mMaxRealPower=osApp.value;
mComputedPower+=power;
}
}
}","private void processAppUsage(SparseArray<UserHandle> asUsers){
  final boolean forAllUsers=(asUsers.get(UserHandle.USER_ALL) != null);
  SensorManager sensorManager=(SensorManager)mContext.getSystemService(Context.SENSOR_SERVICE);
  final int which=mStatsType;
  final int speedSteps=mPowerProfile.getNumSpeedSteps();
  final double[] powerCpuNormal=new double[speedSteps];
  final long[] cpuSpeedStepTimes=new long[speedSteps];
  for (int p=0; p < speedSteps; p++) {
    powerCpuNormal[p]=mPowerProfile.getAveragePower(PowerProfile.POWER_CPU_ACTIVE,p);
  }
  final double mobilePowerPerPacket=getMobilePowerPerPacket();
  final double mobilePowerPerMs=getMobilePowerPerMs();
  final double wifiPowerPerPacket=getWifiPowerPerPacket();
  long appWakelockTimeUs=0;
  BatterySipper osApp=null;
  mStatsPeriod=mTypeBatteryRealtime;
  SparseArray<? extends Uid> uidStats=mStats.getUidStats();
  final int NU=uidStats.size();
  for (int iu=0; iu < NU; iu++) {
    Uid u=uidStats.valueAt(iu);
    double p;
    double power=0;
    double highestDrain=0;
    String packageWithHighestDrain=null;
    Map<String,? extends BatteryStats.Uid.Proc> processStats=u.getProcessStats();
    long cpuTime=0;
    long cpuFgTime=0;
    long wakelockTime=0;
    long gpsTime=0;
    if (processStats.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Proc> ent : processStats.entrySet()) {
        Uid.Proc ps=ent.getValue();
        final long userTime=ps.getUserTime(which);
        final long systemTime=ps.getSystemTime(which);
        final long foregroundTime=ps.getForegroundTime(which);
        cpuFgTime+=foregroundTime;
        final long tmpCpuTime=userTime + systemTime;
        int totalTimeAtSpeeds=0;
        for (int step=0; step < speedSteps; step++) {
          cpuSpeedStepTimes[step]=ps.getTimeAtCpuSpeedStep(step,which);
          totalTimeAtSpeeds+=cpuSpeedStepTimes[step];
        }
        if (totalTimeAtSpeeds == 0)         totalTimeAtSpeeds=1;
        double processPower=0;
        for (int step=0; step < speedSteps; step++) {
          double ratio=(double)cpuSpeedStepTimes[step] / totalTimeAtSpeeds;
          if (DEBUG && ratio != 0)           Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ step+ ""String_Node_Str""+ makemAh(ratio)+ ""String_Node_Str""+ makemAh(ratio * tmpCpuTime * powerCpuNormal[step] / (60 * 60 * 1000)));
          processPower+=ratio * tmpCpuTime * powerCpuNormal[step];
        }
        cpuTime+=tmpCpuTime;
        if (DEBUG && processPower != 0) {
          Log.d(TAG,String.format(""String_Node_Str"",ent.getKey(),makemAh(processPower / (60 * 60 * 1000))));
        }
        power+=processPower;
        if (packageWithHighestDrain == null || packageWithHighestDrain.startsWith(""String_Node_Str"")) {
          highestDrain=processPower;
          packageWithHighestDrain=ent.getKey();
        }
 else         if (highestDrain < processPower && !ent.getKey().startsWith(""String_Node_Str"")) {
          highestDrain=processPower;
          packageWithHighestDrain=ent.getKey();
        }
      }
    }
    if (cpuFgTime > cpuTime) {
      if (DEBUG && cpuFgTime > cpuTime + 10000) {
        Log.d(TAG,""String_Node_Str"");
      }
      cpuTime=cpuFgTime;
    }
    power/=(60 * 60 * 1000);
    Map<String,? extends BatteryStats.Uid.Wakelock> wakelockStats=u.getWakelockStats();
    for (    Map.Entry<String,? extends BatteryStats.Uid.Wakelock> wakelockEntry : wakelockStats.entrySet()) {
      Uid.Wakelock wakelock=wakelockEntry.getValue();
      BatteryStats.Timer timer=wakelock.getWakeTime(BatteryStats.WAKE_TYPE_PARTIAL);
      if (timer != null) {
        wakelockTime+=timer.getTotalTimeLocked(mRawRealtime,which);
      }
    }
    appWakelockTimeUs+=wakelockTime;
    wakelockTime/=1000;
    p=(wakelockTime * mPowerProfile.getAveragePower(PowerProfile.POWER_CPU_AWAKE)) / (60 * 60 * 1000);
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ wakelockTime+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    final long mobileRx=u.getNetworkActivityPackets(NETWORK_MOBILE_RX_DATA,mStatsType);
    final long mobileTx=u.getNetworkActivityPackets(NETWORK_MOBILE_TX_DATA,mStatsType);
    final long mobileRxB=u.getNetworkActivityBytes(NETWORK_MOBILE_RX_DATA,mStatsType);
    final long mobileTxB=u.getNetworkActivityBytes(NETWORK_MOBILE_TX_DATA,mStatsType);
    final long mobileActive=u.getMobileRadioActiveTime(mStatsType);
    if (mobileActive > 0) {
      mAppMobileActive+=mobileActive;
      p=(mobilePowerPerMs * mobileActive) / 1000;
    }
 else {
      p=(mobileRx + mobileTx) * mobilePowerPerPacket;
    }
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ (mobileRx + mobileTx)+ ""String_Node_Str""+ mobileActive+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    final long wifiRx=u.getNetworkActivityPackets(NETWORK_WIFI_RX_DATA,mStatsType);
    final long wifiTx=u.getNetworkActivityPackets(NETWORK_WIFI_TX_DATA,mStatsType);
    final long wifiRxB=u.getNetworkActivityBytes(NETWORK_WIFI_RX_DATA,mStatsType);
    final long wifiTxB=u.getNetworkActivityBytes(NETWORK_WIFI_TX_DATA,mStatsType);
    p=(wifiRx + wifiTx) * wifiPowerPerPacket;
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ (mobileRx + mobileTx)+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    long wifiRunningTimeMs=u.getWifiRunningTime(mRawRealtime,which) / 1000;
    mAppWifiRunning+=wifiRunningTimeMs;
    p=(wifiRunningTimeMs * mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_ON)) / (60 * 60 * 1000);
    if (DEBUG && p != 0)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ wifiRunningTimeMs+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    long wifiScanTimeMs=u.getWifiScanTime(mRawRealtime,which) / 1000;
    p=(wifiScanTimeMs * mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_SCAN)) / (60 * 60 * 1000);
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ wifiScanTimeMs+ ""String_Node_Str""+ makemAh(p));
    power+=p;
    for (int bin=0; bin < BatteryStats.Uid.NUM_WIFI_BATCHED_SCAN_BINS; bin++) {
      long batchScanTimeMs=u.getWifiBatchedScanTime(bin,mRawRealtime,which) / 1000;
      p=((batchScanTimeMs * mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_BATCHED_SCAN,bin))) / (60 * 60 * 1000);
      if (DEBUG && p != 0)       Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ bin+ ""String_Node_Str""+ batchScanTimeMs+ ""String_Node_Str""+ makemAh(p));
      power+=p;
    }
    SparseArray<? extends BatteryStats.Uid.Sensor> sensorStats=u.getSensorStats();
    int NSE=sensorStats.size();
    for (int ise=0; ise < NSE; ise++) {
      Uid.Sensor sensor=sensorStats.valueAt(ise);
      int sensorHandle=sensorStats.keyAt(ise);
      BatteryStats.Timer timer=sensor.getSensorTime();
      long sensorTime=timer.getTotalTimeLocked(mRawRealtime,which) / 1000;
      double multiplier=0;
switch (sensorHandle) {
case Uid.Sensor.GPS:
        multiplier=mPowerProfile.getAveragePower(PowerProfile.POWER_GPS_ON);
      gpsTime=sensorTime;
    break;
default :
  List<Sensor> sensorList=sensorManager.getSensorList(android.hardware.Sensor.TYPE_ALL);
for (android.hardware.Sensor s : sensorList) {
  if (s.getHandle() == sensorHandle) {
    multiplier=s.getPower();
    break;
  }
}
}
p=(multiplier * sensorTime) / (60 * 60 * 1000);
if (DEBUG && p != 0) Log.d(TAG,""String_Node_Str"" + u.getUid() + ""String_Node_Str""+ sensorHandle+ ""String_Node_Str""+ sensorTime+ ""String_Node_Str""+ makemAh(p));
power+=p;
}
if (DEBUG && power != 0) Log.d(TAG,String.format(""String_Node_Str"",u.getUid(),makemAh(power)));
final int userId=UserHandle.getUserId(u.getUid());
if (power != 0 || u.getUid() == 0) {
BatterySipper app=new BatterySipper(BatterySipper.DrainType.APP,u,new double[]{power});
app.cpuTime=cpuTime;
app.gpsTime=gpsTime;
app.wifiRunningTime=wifiRunningTimeMs;
app.cpuFgTime=cpuFgTime;
app.wakeLockTime=wakelockTime;
app.mobileRxPackets=mobileRx;
app.mobileTxPackets=mobileTx;
app.mobileActive=mobileActive / 1000;
app.mobileActiveCount=u.getMobileRadioActiveCount(mStatsType);
app.wifiRxPackets=wifiRx;
app.wifiTxPackets=wifiTx;
app.mobileRxBytes=mobileRxB;
app.mobileTxBytes=mobileTxB;
app.wifiRxBytes=wifiRxB;
app.wifiTxBytes=wifiTxB;
app.packageWithHighestDrain=packageWithHighestDrain;
if (u.getUid() == Process.WIFI_UID) {
mWifiSippers.add(app);
mWifiPower+=power;
}
 else if (u.getUid() == Process.BLUETOOTH_UID) {
mBluetoothSippers.add(app);
mBluetoothPower+=power;
}
 else if (!forAllUsers && asUsers.get(userId) == null && UserHandle.getAppId(u.getUid()) >= Process.FIRST_APPLICATION_UID) {
List<BatterySipper> list=mUserSippers.get(userId);
if (list == null) {
list=new ArrayList<BatterySipper>();
mUserSippers.put(userId,list);
}
list.add(app);
if (power != 0) {
Double userPower=mUserPower.get(userId);
if (userPower == null) {
  userPower=power;
}
 else {
  userPower+=power;
}
mUserPower.put(userId,userPower);
}
}
 else {
mUsageList.add(app);
if (power > mMaxPower) mMaxPower=power;
if (power > mMaxRealPower) mMaxRealPower=power;
mComputedPower+=power;
}
if (u.getUid() == 0) {
osApp=app;
}
}
}
if (osApp != null) {
long wakeTimeMillis=mBatteryUptime / 1000;
wakeTimeMillis-=(appWakelockTimeUs / 1000) + (mStats.getScreenOnTime(mRawRealtime,which) / 1000);
if (wakeTimeMillis > 0) {
double power=(wakeTimeMillis * mPowerProfile.getAveragePower(PowerProfile.POWER_CPU_AWAKE)) / (60 * 60 * 1000);
if (DEBUG) Log.d(TAG,""String_Node_Str"" + wakeTimeMillis + ""String_Node_Str""+ makemAh(power));
osApp.wakeLockTime+=wakeTimeMillis;
osApp.value+=power;
osApp.values[0]+=power;
if (osApp.value > mMaxPower) mMaxPower=osApp.value;
if (osApp.value > mMaxRealPower) mMaxRealPower=osApp.value;
mComputedPower+=power;
}
}
}",0.9993865030674848
195491,"private int[] collectStats(String statsFile,int parentPid,boolean first,int[] curPids,ArrayList<Stats> allProcs){
  int[] pids=Process.getPids(statsFile,curPids);
  int NP=(pids == null) ? 0 : pids.length;
  int NS=allProcs.size();
  int curStatsIndex=0;
  for (int i=0; i < NP; i++) {
    int pid=pids[i];
    if (pid < 0) {
      NP=pid;
      break;
    }
    Stats st=curStatsIndex < NS ? allProcs.get(curStatsIndex) : null;
    if (st != null && st.pid == pid) {
      st.added=false;
      st.working=false;
      curStatsIndex++;
      if (DEBUG)       Slog.v(TAG,""String_Node_Str"" + (parentPid < 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ pid+ ""String_Node_Str""+ st);
      if (st.interesting) {
        final long uptime=SystemClock.uptimeMillis();
        final long[] procStats=mProcessStatsData;
        if (!Process.readProcFile(st.statFile.toString(),PROCESS_STATS_FORMAT,null,procStats,null)) {
          continue;
        }
        final long minfaults=procStats[PROCESS_STAT_MINOR_FAULTS];
        final long majfaults=procStats[PROCESS_STAT_MAJOR_FAULTS];
        final long utime=procStats[PROCESS_STAT_UTIME];
        final long stime=procStats[PROCESS_STAT_STIME];
        if (utime == st.base_utime && stime == st.base_stime) {
          st.rel_utime=0;
          st.rel_stime=0;
          st.rel_minfaults=0;
          st.rel_majfaults=0;
          if (st.active) {
            st.active=false;
          }
          continue;
        }
        if (!st.active) {
          st.active=true;
        }
        if (parentPid < 0) {
          getName(st,st.cmdlineFile);
          if (st.threadStats != null) {
            mCurThreadPids=collectStats(st.threadsDir,pid,false,mCurThreadPids,st.threadStats);
          }
        }
        if (DEBUG)         Slog.v(""String_Node_Str"",""String_Node_Str"" + st.name + ""String_Node_Str""+ st.pid+ ""String_Node_Str""+ utime+ ""String_Node_Str""+ st.base_utime+ ""String_Node_Str""+ stime+ ""String_Node_Str""+ st.base_stime+ ""String_Node_Str""+ minfaults+ ""String_Node_Str""+ st.base_minfaults+ ""String_Node_Str""+ majfaults+ ""String_Node_Str""+ st.base_majfaults);
        st.rel_uptime=uptime - st.base_uptime;
        st.base_uptime=uptime;
        st.rel_utime=(int)(utime - st.base_utime);
        st.rel_stime=(int)(stime - st.base_stime);
        st.base_utime=utime;
        st.base_stime=stime;
        st.rel_minfaults=(int)(minfaults - st.base_minfaults);
        st.rel_majfaults=(int)(majfaults - st.base_majfaults);
        st.base_minfaults=minfaults;
        st.base_majfaults=majfaults;
        st.working=true;
      }
      continue;
    }
    if (st == null || st.pid > pid) {
      st=new Stats(pid,parentPid,mIncludeThreads);
      allProcs.add(curStatsIndex,st);
      curStatsIndex++;
      NS++;
      if (DEBUG)       Slog.v(TAG,""String_Node_Str"" + (parentPid < 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ pid+ ""String_Node_Str""+ st);
      final String[] procStatsString=mProcessFullStatsStringData;
      final long[] procStats=mProcessFullStatsData;
      st.base_uptime=SystemClock.uptimeMillis();
      String path=st.statFile.toString();
      if (Process.readProcFile(path,PROCESS_FULL_STATS_FORMAT,procStatsString,procStats,null)) {
        st.vsize=procStats[PROCESS_FULL_STAT_VSIZE];
        if (true || procStats[PROCESS_FULL_STAT_VSIZE] != 0) {
          st.interesting=true;
          st.baseName=procStatsString[0];
          st.base_minfaults=procStats[PROCESS_FULL_STAT_MINOR_FAULTS];
          st.base_majfaults=procStats[PROCESS_FULL_STAT_MAJOR_FAULTS];
          st.base_utime=procStats[PROCESS_FULL_STAT_UTIME];
          st.base_stime=procStats[PROCESS_FULL_STAT_STIME];
        }
 else {
          Slog.i(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ procStatsString[0]);
          st.baseName=procStatsString[0];
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + pid);
        st.baseName=""String_Node_Str"";
        st.base_utime=st.base_stime=0;
        st.base_minfaults=st.base_majfaults=0;
      }
      if (parentPid < 0) {
        getName(st,st.cmdlineFile);
        if (st.threadStats != null) {
          mCurThreadPids=collectStats(st.threadsDir,pid,true,mCurThreadPids,st.threadStats);
        }
      }
 else       if (st.interesting) {
        st.name=st.baseName;
        st.nameWidth=onMeasureProcessName(st.name);
      }
      if (DEBUG)       Slog.v(""String_Node_Str"",""String_Node_Str"" + st.name + ""String_Node_Str""+ st.pid+ ""String_Node_Str""+ st.base_utime+ ""String_Node_Str""+ st.base_stime+ ""String_Node_Str""+ st.base_minfaults+ ""String_Node_Str""+ st.base_majfaults);
      st.rel_utime=0;
      st.rel_stime=0;
      st.rel_minfaults=0;
      st.rel_majfaults=0;
      st.added=true;
      if (!first && st.interesting) {
        st.working=true;
      }
      continue;
    }
    st.rel_utime=0;
    st.rel_stime=0;
    st.rel_minfaults=0;
    st.rel_majfaults=0;
    st.removed=true;
    st.working=true;
    allProcs.remove(curStatsIndex);
    NS--;
    if (DEBUG)     Slog.v(TAG,""String_Node_Str"" + (parentPid < 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ pid+ ""String_Node_Str""+ st);
    i--;
    continue;
  }
  while (curStatsIndex < NS) {
    final Stats st=allProcs.get(curStatsIndex);
    st.rel_utime=0;
    st.rel_stime=0;
    st.rel_minfaults=0;
    st.rel_majfaults=0;
    st.removed=true;
    st.working=true;
    allProcs.remove(curStatsIndex);
    NS--;
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + st.pid + ""String_Node_Str""+ st);
  }
  return pids;
}","private int[] collectStats(String statsFile,int parentPid,boolean first,int[] curPids,ArrayList<Stats> allProcs){
  int[] pids=Process.getPids(statsFile,curPids);
  int NP=(pids == null) ? 0 : pids.length;
  int NS=allProcs.size();
  int curStatsIndex=0;
  for (int i=0; i < NP; i++) {
    int pid=pids[i];
    if (pid < 0) {
      NP=pid;
      break;
    }
    Stats st=curStatsIndex < NS ? allProcs.get(curStatsIndex) : null;
    if (st != null && st.pid == pid) {
      st.added=false;
      st.working=false;
      curStatsIndex++;
      if (DEBUG)       Slog.v(TAG,""String_Node_Str"" + (parentPid < 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ pid+ ""String_Node_Str""+ st);
      if (st.interesting) {
        final long uptime=SystemClock.uptimeMillis();
        final long[] procStats=mProcessStatsData;
        if (!Process.readProcFile(st.statFile.toString(),PROCESS_STATS_FORMAT,null,procStats,null)) {
          continue;
        }
        final long minfaults=procStats[PROCESS_STAT_MINOR_FAULTS];
        final long majfaults=procStats[PROCESS_STAT_MAJOR_FAULTS];
        final long utime=procStats[PROCESS_STAT_UTIME] * mJiffyMillis;
        final long stime=procStats[PROCESS_STAT_STIME] * mJiffyMillis;
        if (utime == st.base_utime && stime == st.base_stime) {
          st.rel_utime=0;
          st.rel_stime=0;
          st.rel_minfaults=0;
          st.rel_majfaults=0;
          if (st.active) {
            st.active=false;
          }
          continue;
        }
        if (!st.active) {
          st.active=true;
        }
        if (parentPid < 0) {
          getName(st,st.cmdlineFile);
          if (st.threadStats != null) {
            mCurThreadPids=collectStats(st.threadsDir,pid,false,mCurThreadPids,st.threadStats);
          }
        }
        if (DEBUG)         Slog.v(""String_Node_Str"",""String_Node_Str"" + st.name + ""String_Node_Str""+ st.pid+ ""String_Node_Str""+ utime+ ""String_Node_Str""+ st.base_utime+ ""String_Node_Str""+ stime+ ""String_Node_Str""+ st.base_stime+ ""String_Node_Str""+ minfaults+ ""String_Node_Str""+ st.base_minfaults+ ""String_Node_Str""+ majfaults+ ""String_Node_Str""+ st.base_majfaults);
        st.rel_uptime=uptime - st.base_uptime;
        st.base_uptime=uptime;
        st.rel_utime=(int)(utime - st.base_utime);
        st.rel_stime=(int)(stime - st.base_stime);
        st.base_utime=utime;
        st.base_stime=stime;
        st.rel_minfaults=(int)(minfaults - st.base_minfaults);
        st.rel_majfaults=(int)(majfaults - st.base_majfaults);
        st.base_minfaults=minfaults;
        st.base_majfaults=majfaults;
        st.working=true;
      }
      continue;
    }
    if (st == null || st.pid > pid) {
      st=new Stats(pid,parentPid,mIncludeThreads);
      allProcs.add(curStatsIndex,st);
      curStatsIndex++;
      NS++;
      if (DEBUG)       Slog.v(TAG,""String_Node_Str"" + (parentPid < 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ pid+ ""String_Node_Str""+ st);
      final String[] procStatsString=mProcessFullStatsStringData;
      final long[] procStats=mProcessFullStatsData;
      st.base_uptime=SystemClock.uptimeMillis();
      String path=st.statFile.toString();
      if (Process.readProcFile(path,PROCESS_FULL_STATS_FORMAT,procStatsString,procStats,null)) {
        st.vsize=procStats[PROCESS_FULL_STAT_VSIZE];
        if (true || procStats[PROCESS_FULL_STAT_VSIZE] != 0) {
          st.interesting=true;
          st.baseName=procStatsString[0];
          st.base_minfaults=procStats[PROCESS_FULL_STAT_MINOR_FAULTS];
          st.base_majfaults=procStats[PROCESS_FULL_STAT_MAJOR_FAULTS];
          st.base_utime=procStats[PROCESS_FULL_STAT_UTIME] * mJiffyMillis;
          st.base_stime=procStats[PROCESS_FULL_STAT_STIME] * mJiffyMillis;
        }
 else {
          Slog.i(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ procStatsString[0]);
          st.baseName=procStatsString[0];
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + pid);
        st.baseName=""String_Node_Str"";
        st.base_utime=st.base_stime=0;
        st.base_minfaults=st.base_majfaults=0;
      }
      if (parentPid < 0) {
        getName(st,st.cmdlineFile);
        if (st.threadStats != null) {
          mCurThreadPids=collectStats(st.threadsDir,pid,true,mCurThreadPids,st.threadStats);
        }
      }
 else       if (st.interesting) {
        st.name=st.baseName;
        st.nameWidth=onMeasureProcessName(st.name);
      }
      if (DEBUG)       Slog.v(""String_Node_Str"",""String_Node_Str"" + st.name + ""String_Node_Str""+ st.pid+ ""String_Node_Str""+ st.base_utime+ ""String_Node_Str""+ st.base_stime+ ""String_Node_Str""+ st.base_minfaults+ ""String_Node_Str""+ st.base_majfaults);
      st.rel_utime=0;
      st.rel_stime=0;
      st.rel_minfaults=0;
      st.rel_majfaults=0;
      st.added=true;
      if (!first && st.interesting) {
        st.working=true;
      }
      continue;
    }
    st.rel_utime=0;
    st.rel_stime=0;
    st.rel_minfaults=0;
    st.rel_majfaults=0;
    st.removed=true;
    st.working=true;
    allProcs.remove(curStatsIndex);
    NS--;
    if (DEBUG)     Slog.v(TAG,""String_Node_Str"" + (parentPid < 0 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ pid+ ""String_Node_Str""+ st);
    i--;
    continue;
  }
  while (curStatsIndex < NS) {
    final Stats st=allProcs.get(curStatsIndex);
    st.rel_utime=0;
    st.rel_stime=0;
    st.rel_minfaults=0;
    st.rel_majfaults=0;
    st.removed=true;
    st.working=true;
    allProcs.remove(curStatsIndex);
    NS--;
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + st.pid + ""String_Node_Str""+ st);
  }
  return pids;
}",0.9946457255041942
195492,"final public String printCurrentState(long now){
  buildWorkingProcs();
  StringWriter sw=new StringWriter();
  PrintWriter pw=new FastPrintWriter(sw,false,1024);
  pw.print(""String_Node_Str"");
  if (now > mLastSampleTime) {
    pw.print(now - mLastSampleTime);
    pw.print(""String_Node_Str"");
    pw.print(now - mCurrentSampleTime);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(mLastSampleTime - now);
    pw.print(""String_Node_Str"");
    pw.print(mCurrentSampleTime - now);
    pw.print(""String_Node_Str"");
  }
  long sampleTime=mCurrentSampleTime - mLastSampleTime;
  long sampleRealTime=mCurrentSampleRealTime - mLastSampleRealTime;
  long percAwake=sampleRealTime > 0 ? ((sampleTime * 100) / sampleRealTime) : 0;
  if (percAwake != 100) {
    pw.print(""String_Node_Str"");
    pw.print(percAwake);
    pw.print(""String_Node_Str"");
  }
  pw.println(""String_Node_Str"");
  final int totalTime=mRelUserTime + mRelSystemTime + mRelIoWaitTime+ mRelIrqTime+ mRelSoftIrqTime+ mRelIdleTime;
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + totalTime + ""String_Node_Str""+ (mCurrentSampleTime - mLastSampleTime));
  int N=mWorkingProcs.size();
  for (int i=0; i < N; i++) {
    Stats st=mWorkingProcs.get(i);
    printProcessCPU(pw,st.added ? ""String_Node_Str"" : (st.removed ? ""String_Node_Str"" : ""String_Node_Str""),st.pid,st.name,(int)(st.rel_uptime + 5) / 10,st.rel_utime,st.rel_stime,0,0,0,st.rel_minfaults,st.rel_majfaults);
    if (!st.removed && st.workingThreads != null) {
      int M=st.workingThreads.size();
      for (int j=0; j < M; j++) {
        Stats tst=st.workingThreads.get(j);
        printProcessCPU(pw,tst.added ? ""String_Node_Str"" : (tst.removed ? ""String_Node_Str"" : ""String_Node_Str""),tst.pid,tst.name,(int)(st.rel_uptime + 5) / 10,tst.rel_utime,tst.rel_stime,0,0,0,0,0);
      }
    }
  }
  printProcessCPU(pw,""String_Node_Str"",-1,""String_Node_Str"",totalTime,mRelUserTime,mRelSystemTime,mRelIoWaitTime,mRelIrqTime,mRelSoftIrqTime,0,0);
  pw.flush();
  return sw.toString();
}","final public String printCurrentState(long now){
  buildWorkingProcs();
  StringWriter sw=new StringWriter();
  PrintWriter pw=new FastPrintWriter(sw,false,1024);
  pw.print(""String_Node_Str"");
  if (now > mLastSampleTime) {
    pw.print(now - mLastSampleTime);
    pw.print(""String_Node_Str"");
    pw.print(now - mCurrentSampleTime);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(mLastSampleTime - now);
    pw.print(""String_Node_Str"");
    pw.print(mCurrentSampleTime - now);
    pw.print(""String_Node_Str"");
  }
  long sampleTime=mCurrentSampleTime - mLastSampleTime;
  long sampleRealTime=mCurrentSampleRealTime - mLastSampleRealTime;
  long percAwake=sampleRealTime > 0 ? ((sampleTime * 100) / sampleRealTime) : 0;
  if (percAwake != 100) {
    pw.print(""String_Node_Str"");
    pw.print(percAwake);
    pw.print(""String_Node_Str"");
  }
  pw.println(""String_Node_Str"");
  final int totalTime=mRelUserTime + mRelSystemTime + mRelIoWaitTime+ mRelIrqTime+ mRelSoftIrqTime+ mRelIdleTime;
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + totalTime + ""String_Node_Str""+ (mCurrentSampleTime - mLastSampleTime));
  int N=mWorkingProcs.size();
  for (int i=0; i < N; i++) {
    Stats st=mWorkingProcs.get(i);
    printProcessCPU(pw,st.added ? ""String_Node_Str"" : (st.removed ? ""String_Node_Str"" : ""String_Node_Str""),st.pid,st.name,(int)st.rel_uptime,st.rel_utime,st.rel_stime,0,0,0,st.rel_minfaults,st.rel_majfaults);
    if (!st.removed && st.workingThreads != null) {
      int M=st.workingThreads.size();
      for (int j=0; j < M; j++) {
        Stats tst=st.workingThreads.get(j);
        printProcessCPU(pw,tst.added ? ""String_Node_Str"" : (tst.removed ? ""String_Node_Str"" : ""String_Node_Str""),tst.pid,tst.name,(int)st.rel_uptime,tst.rel_utime,tst.rel_stime,0,0,0,0,0);
      }
    }
  }
  printProcessCPU(pw,""String_Node_Str"",-1,""String_Node_Str"",totalTime,mRelUserTime,mRelSystemTime,mRelIoWaitTime,mRelIrqTime,mRelSoftIrqTime,0,0);
  pw.flush();
  return sw.toString();
}",0.9944834503510532
195493,"public ProcessCpuTracker(boolean includeThreads){
  mIncludeThreads=includeThreads;
}","public ProcessCpuTracker(boolean includeThreads){
  mIncludeThreads=includeThreads;
  long jiffyHz=Libcore.os.sysconf(OsConstants._SC_CLK_TCK);
  mJiffyMillis=1000 / jiffyHz;
}",0.6513409961685823
195494,"public void update(){
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + this);
  final long nowUptime=SystemClock.uptimeMillis();
  final long nowRealtime=SystemClock.elapsedRealtime();
  final long[] sysCpu=mSystemCpuData;
  if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
    final long usertime=sysCpu[0] + sysCpu[1];
    final long systemtime=sysCpu[2];
    final long idletime=sysCpu[3];
    final long iowaittime=sysCpu[4];
    final long irqtime=sysCpu[5];
    final long softirqtime=sysCpu[6];
    if (true || (usertime >= mBaseUserTime && systemtime >= mBaseSystemTime && iowaittime >= mBaseIoWaitTime && irqtime >= mBaseIrqTime && softirqtime >= mBaseSoftIrqTime && idletime >= mBaseIdleTime)) {
      mRelUserTime=(int)(usertime - mBaseUserTime);
      mRelSystemTime=(int)(systemtime - mBaseSystemTime);
      mRelIoWaitTime=(int)(iowaittime - mBaseIoWaitTime);
      mRelIrqTime=(int)(irqtime - mBaseIrqTime);
      mRelSoftIrqTime=(int)(softirqtime - mBaseSoftIrqTime);
      mRelIdleTime=(int)(idletime - mBaseIdleTime);
      mRelStatsAreGood=true;
      if (DEBUG) {
        Slog.i(""String_Node_Str"",""String_Node_Str"" + sysCpu[0] + ""String_Node_Str""+ sysCpu[1]+ ""String_Node_Str""+ sysCpu[2]+ ""String_Node_Str""+ sysCpu[3]+ ""String_Node_Str""+ sysCpu[4]+ ""String_Node_Str""+ sysCpu[5]+ ""String_Node_Str""+ sysCpu[6]);
        Slog.i(""String_Node_Str"",""String_Node_Str"" + mRelUserTime + ""String_Node_Str""+ mRelSystemTime+ ""String_Node_Str""+ mRelIdleTime+ ""String_Node_Str""+ mRelIrqTime);
      }
      mBaseUserTime=usertime;
      mBaseSystemTime=systemtime;
      mBaseIoWaitTime=iowaittime;
      mBaseIrqTime=irqtime;
      mBaseSoftIrqTime=softirqtime;
      mBaseIdleTime=idletime;
    }
 else {
      mRelUserTime=0;
      mRelSystemTime=0;
      mRelIoWaitTime=0;
      mRelIrqTime=0;
      mRelSoftIrqTime=0;
      mRelIdleTime=0;
      mRelStatsAreGood=false;
      Slog.w(TAG,""String_Node_Str"");
      return;
    }
  }
  mLastSampleTime=mCurrentSampleTime;
  mCurrentSampleTime=nowUptime;
  mLastSampleRealTime=mCurrentSampleRealTime;
  mCurrentSampleRealTime=nowRealtime;
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskReads();
  try {
    mCurPids=collectStats(""String_Node_Str"",-1,mFirst,mCurPids,mProcStats);
  }
  finally {
    StrictMode.setThreadPolicy(savedPolicy);
  }
  final float[] loadAverages=mLoadAverageData;
  if (Process.readProcFile(""String_Node_Str"",LOAD_AVERAGE_FORMAT,null,null,loadAverages)) {
    float load1=loadAverages[0];
    float load5=loadAverages[1];
    float load15=loadAverages[2];
    if (load1 != mLoad1 || load5 != mLoad5 || load15 != mLoad15) {
      mLoad1=load1;
      mLoad5=load5;
      mLoad15=load15;
      onLoadChanged(load1,load5,load15);
    }
  }
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - mCurrentSampleTime));
  mWorkingProcsSorted=false;
  mFirst=false;
}","public void update(){
  if (DEBUG)   Slog.v(TAG,""String_Node_Str"" + this);
  final long nowUptime=SystemClock.uptimeMillis();
  final long nowRealtime=SystemClock.elapsedRealtime();
  final long[] sysCpu=mSystemCpuData;
  if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
    final long usertime=(sysCpu[0] + sysCpu[1]) * mJiffyMillis;
    final long systemtime=sysCpu[2] * mJiffyMillis;
    final long idletime=sysCpu[3] * mJiffyMillis;
    final long iowaittime=sysCpu[4] * mJiffyMillis;
    final long irqtime=sysCpu[5] * mJiffyMillis;
    final long softirqtime=sysCpu[6] * mJiffyMillis;
    if (true || (usertime >= mBaseUserTime && systemtime >= mBaseSystemTime && iowaittime >= mBaseIoWaitTime && irqtime >= mBaseIrqTime && softirqtime >= mBaseSoftIrqTime && idletime >= mBaseIdleTime)) {
      mRelUserTime=(int)(usertime - mBaseUserTime);
      mRelSystemTime=(int)(systemtime - mBaseSystemTime);
      mRelIoWaitTime=(int)(iowaittime - mBaseIoWaitTime);
      mRelIrqTime=(int)(irqtime - mBaseIrqTime);
      mRelSoftIrqTime=(int)(softirqtime - mBaseSoftIrqTime);
      mRelIdleTime=(int)(idletime - mBaseIdleTime);
      mRelStatsAreGood=true;
      if (DEBUG) {
        Slog.i(""String_Node_Str"",""String_Node_Str"" + (sysCpu[0] * mJiffyMillis) + ""String_Node_Str""+ (sysCpu[1] * mJiffyMillis)+ ""String_Node_Str""+ (sysCpu[2] * mJiffyMillis)+ ""String_Node_Str""+ (sysCpu[3] * mJiffyMillis)+ ""String_Node_Str""+ (sysCpu[4] * mJiffyMillis)+ ""String_Node_Str""+ (sysCpu[5] * mJiffyMillis)+ ""String_Node_Str""+ (sysCpu[6] * mJiffyMillis));
        Slog.i(""String_Node_Str"",""String_Node_Str"" + mRelUserTime + ""String_Node_Str""+ mRelSystemTime+ ""String_Node_Str""+ mRelIdleTime+ ""String_Node_Str""+ mRelIrqTime);
      }
      mBaseUserTime=usertime;
      mBaseSystemTime=systemtime;
      mBaseIoWaitTime=iowaittime;
      mBaseIrqTime=irqtime;
      mBaseSoftIrqTime=softirqtime;
      mBaseIdleTime=idletime;
    }
 else {
      mRelUserTime=0;
      mRelSystemTime=0;
      mRelIoWaitTime=0;
      mRelIrqTime=0;
      mRelSoftIrqTime=0;
      mRelIdleTime=0;
      mRelStatsAreGood=false;
      Slog.w(TAG,""String_Node_Str"");
      return;
    }
  }
  mLastSampleTime=mCurrentSampleTime;
  mCurrentSampleTime=nowUptime;
  mLastSampleRealTime=mCurrentSampleRealTime;
  mCurrentSampleRealTime=nowRealtime;
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskReads();
  try {
    mCurPids=collectStats(""String_Node_Str"",-1,mFirst,mCurPids,mProcStats);
  }
  finally {
    StrictMode.setThreadPolicy(savedPolicy);
  }
  final float[] loadAverages=mLoadAverageData;
  if (Process.readProcFile(""String_Node_Str"",LOAD_AVERAGE_FORMAT,null,null,loadAverages)) {
    float load1=loadAverages[0];
    float load5=loadAverages[1];
    float load15=loadAverages[2];
    if (load1 != mLoad1 || load5 != mLoad5 || load15 != mLoad15) {
      mLoad1=load1;
      mLoad5=load5;
      mLoad15=load15;
      onLoadChanged(load1,load5,load15);
    }
  }
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - mCurrentSampleTime));
  mWorkingProcsSorted=false;
  mFirst=false;
}",0.9650951199338296
195495,"/** 
 * Returns the total time (in clock ticks, or 1/100 sec) spent executing in both user and system code.  Safe to call without lock held.
 */
public long getCpuTimeForPid(int pid){
synchronized (mSinglePidStatsData) {
    final String statFile=""String_Node_Str"" + pid + ""String_Node_Str"";
    final long[] statsData=mSinglePidStatsData;
    if (Process.readProcFile(statFile,PROCESS_STATS_FORMAT,null,statsData,null)) {
      long time=statsData[PROCESS_STAT_UTIME] + statsData[PROCESS_STAT_STIME];
      return time;
    }
    return 0;
  }
}","/** 
 * Returns the total time (in clock ticks, or 1/100 sec) spent executing in both user and system code.  Safe to call without lock held.
 */
public long getCpuTimeForPid(int pid){
synchronized (mSinglePidStatsData) {
    final String statFile=""String_Node_Str"" + pid + ""String_Node_Str"";
    final long[] statsData=mSinglePidStatsData;
    if (Process.readProcFile(statFile,PROCESS_STATS_FORMAT,null,statsData,null)) {
      long time=statsData[PROCESS_STAT_UTIME] + statsData[PROCESS_STAT_STIME];
      return time * mJiffyMillis;
    }
    return 0;
  }
}",0.986449864498645
195496,"void updateCpuStatsNow(){
synchronized (mProcessCpuTracker) {
    mProcessCpuMutexFree.set(false);
    final long now=SystemClock.uptimeMillis();
    boolean haveNewCpuStats=false;
    if (MONITOR_CPU_USAGE && mLastCpuTime.get() < (now - MONITOR_CPU_MIN_TIME)) {
      mLastCpuTime.set(now);
      mProcessCpuTracker.update();
      if (mProcessCpuTracker.hasGoodLastStats()) {
        haveNewCpuStats=true;
        if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
          int user=mProcessCpuTracker.getLastUserTime();
          int system=mProcessCpuTracker.getLastSystemTime();
          int iowait=mProcessCpuTracker.getLastIoWaitTime();
          int irq=mProcessCpuTracker.getLastIrqTime();
          int softIrq=mProcessCpuTracker.getLastSoftIrqTime();
          int idle=mProcessCpuTracker.getLastIdleTime();
          int total=user + system + iowait+ irq+ softIrq+ idle;
          if (total == 0)           total=1;
          EventLog.writeEvent(EventLogTags.CPU,((user + system + iowait+ irq+ softIrq) * 100) / total,(user * 100) / total,(system * 100) / total,(iowait * 100) / total,(irq * 100) / total,(softIrq * 100) / total);
        }
      }
    }
    long[] cpuSpeedTimes=mProcessCpuTracker.getLastCpuSpeedTimes();
    final BatteryStatsImpl bstats=mBatteryStatsService.getActiveStatistics();
synchronized (bstats) {
synchronized (mPidsSelfLocked) {
        if (haveNewCpuStats) {
          final int perc=bstats.startAddingCpuLocked();
          if (perc >= 0) {
            int remainUTime=0;
            int remainSTime=0;
            int totalUTime=0;
            int totalSTime=0;
            final int N=mProcessCpuTracker.countStats();
            for (int i=0; i < N; i++) {
              ProcessCpuTracker.Stats st=mProcessCpuTracker.getStats(i);
              if (!st.working) {
                continue;
              }
              ProcessRecord pr=mPidsSelfLocked.get(st.pid);
              int otherUTime=(st.rel_utime * perc) / 100;
              int otherSTime=(st.rel_stime * perc) / 100;
              remainUTime+=otherUTime;
              remainSTime+=otherSTime;
              totalUTime+=st.rel_utime;
              totalSTime+=st.rel_stime;
              if (pr != null) {
                BatteryStatsImpl.Uid.Proc ps=pr.curProcBatteryStats;
                if (ps == null || !ps.isActive()) {
                  pr.curProcBatteryStats=ps=bstats.getProcessStatsLocked(pr.info.uid,pr.processName);
                }
                ps.addCpuTimeLocked(st.rel_utime - otherUTime,st.rel_stime - otherSTime,cpuSpeedTimes);
                pr.curCpuTime+=(st.rel_utime + st.rel_stime) * 10;
              }
 else {
                BatteryStatsImpl.Uid.Proc ps=st.batteryStats;
                if (ps == null || !ps.isActive()) {
                  st.batteryStats=ps=bstats.getProcessStatsLocked(bstats.mapUid(st.uid),st.name);
                }
                ps.addCpuTimeLocked(st.rel_utime - otherUTime,st.rel_stime - otherSTime,cpuSpeedTimes);
              }
            }
            final int userTime=mProcessCpuTracker.getLastUserTime();
            final int systemTime=mProcessCpuTracker.getLastSystemTime();
            final int iowaitTime=mProcessCpuTracker.getLastIoWaitTime();
            final int irqTime=mProcessCpuTracker.getLastIrqTime();
            final int softIrqTime=mProcessCpuTracker.getLastSoftIrqTime();
            final int idleTime=mProcessCpuTracker.getLastIdleTime();
            bstats.finishAddingCpuLocked(perc,remainUTime,remainSTime,totalUTime,totalSTime,userTime,systemTime,iowaitTime,irqTime,softIrqTime,idleTime,cpuSpeedTimes);
          }
        }
      }
      if (mLastWriteTime < (now - BATTERY_STATS_TIME)) {
        mLastWriteTime=now;
        mBatteryStatsService.getActiveStatistics().writeAsyncLocked();
      }
    }
  }
}","void updateCpuStatsNow(){
synchronized (mProcessCpuTracker) {
    mProcessCpuMutexFree.set(false);
    final long now=SystemClock.uptimeMillis();
    boolean haveNewCpuStats=false;
    if (MONITOR_CPU_USAGE && mLastCpuTime.get() < (now - MONITOR_CPU_MIN_TIME)) {
      mLastCpuTime.set(now);
      mProcessCpuTracker.update();
      if (mProcessCpuTracker.hasGoodLastStats()) {
        haveNewCpuStats=true;
        if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
          int user=mProcessCpuTracker.getLastUserTime();
          int system=mProcessCpuTracker.getLastSystemTime();
          int iowait=mProcessCpuTracker.getLastIoWaitTime();
          int irq=mProcessCpuTracker.getLastIrqTime();
          int softIrq=mProcessCpuTracker.getLastSoftIrqTime();
          int idle=mProcessCpuTracker.getLastIdleTime();
          int total=user + system + iowait+ irq+ softIrq+ idle;
          if (total == 0)           total=1;
          EventLog.writeEvent(EventLogTags.CPU,((user + system + iowait+ irq+ softIrq) * 100) / total,(user * 100) / total,(system * 100) / total,(iowait * 100) / total,(irq * 100) / total,(softIrq * 100) / total);
        }
      }
    }
    long[] cpuSpeedTimes=mProcessCpuTracker.getLastCpuSpeedTimes();
    final BatteryStatsImpl bstats=mBatteryStatsService.getActiveStatistics();
synchronized (bstats) {
synchronized (mPidsSelfLocked) {
        if (haveNewCpuStats) {
          final int perc=bstats.startAddingCpuLocked();
          if (perc >= 0) {
            int remainUTime=0;
            int remainSTime=0;
            int totalUTime=0;
            int totalSTime=0;
            final int N=mProcessCpuTracker.countStats();
            for (int i=0; i < N; i++) {
              ProcessCpuTracker.Stats st=mProcessCpuTracker.getStats(i);
              if (!st.working) {
                continue;
              }
              ProcessRecord pr=mPidsSelfLocked.get(st.pid);
              int otherUTime=(st.rel_utime * perc) / 100;
              int otherSTime=(st.rel_stime * perc) / 100;
              remainUTime+=otherUTime;
              remainSTime+=otherSTime;
              totalUTime+=st.rel_utime;
              totalSTime+=st.rel_stime;
              if (pr != null) {
                BatteryStatsImpl.Uid.Proc ps=pr.curProcBatteryStats;
                if (ps == null || !ps.isActive()) {
                  pr.curProcBatteryStats=ps=bstats.getProcessStatsLocked(pr.info.uid,pr.processName);
                }
                ps.addCpuTimeLocked(st.rel_utime - otherUTime,st.rel_stime - otherSTime,cpuSpeedTimes);
                pr.curCpuTime+=st.rel_utime + st.rel_stime;
              }
 else {
                BatteryStatsImpl.Uid.Proc ps=st.batteryStats;
                if (ps == null || !ps.isActive()) {
                  st.batteryStats=ps=bstats.getProcessStatsLocked(bstats.mapUid(st.uid),st.name);
                }
                ps.addCpuTimeLocked(st.rel_utime - otherUTime,st.rel_stime - otherSTime,cpuSpeedTimes);
              }
            }
            final int userTime=mProcessCpuTracker.getLastUserTime();
            final int systemTime=mProcessCpuTracker.getLastSystemTime();
            final int iowaitTime=mProcessCpuTracker.getLastIoWaitTime();
            final int irqTime=mProcessCpuTracker.getLastIrqTime();
            final int softIrqTime=mProcessCpuTracker.getLastSoftIrqTime();
            final int idleTime=mProcessCpuTracker.getLastIdleTime();
            bstats.finishAddingCpuLocked(perc,remainUTime,remainSTime,totalUTime,totalSTime,userTime,systemTime,iowaitTime,irqTime,softIrqTime,idleTime,cpuSpeedTimes);
          }
        }
      }
      if (mLastWriteTime < (now - BATTERY_STATS_TIME)) {
        mLastWriteTime=now;
        mBatteryStatsService.getActiveStatistics().writeAsyncLocked();
      }
    }
  }
}",0.9990877101524828
195497,"/** 
 * {@inheritDoc}
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  consistencyCheck();
  int targetWidth=right - left;
  int targetHeight=bottom - top;
  int paddingLeft=getPaddingLeft();
  int paddingTop=getPaddingTop();
  int paddingRight=getPaddingRight();
  int paddingBottom=getPaddingBottom();
  mHorizontalAxis.layout(targetWidth - paddingLeft - paddingRight);
  mVerticalAxis.layout(targetHeight - paddingTop - paddingBottom);
  int[] hLocations=mHorizontalAxis.getLocations();
  int[] vLocations=mVerticalAxis.getLocations();
  for (int i=0, N=getChildCount(); i < N; i++) {
    View c=getChildAt(i);
    if (c.getVisibility() == View.GONE)     continue;
    LayoutParams lp=getLayoutParams(c);
    Spec columnSpec=lp.columnSpec;
    Spec rowSpec=lp.rowSpec;
    Interval colSpan=columnSpec.span;
    Interval rowSpan=rowSpec.span;
    int x1=hLocations[colSpan.min];
    int y1=vLocations[rowSpan.min];
    int x2=hLocations[colSpan.max];
    int y2=vLocations[rowSpan.max];
    int cellWidth=x2 - x1;
    int cellHeight=y2 - y1;
    int pWidth=getMeasurement(c,true);
    int pHeight=getMeasurement(c,false);
    Alignment hAlign=getAlignment(columnSpec.alignment,true);
    Alignment vAlign=getAlignment(rowSpec.alignment,false);
    Bounds boundsX=mHorizontalAxis.getGroupBounds().getValue(i);
    Bounds boundsY=mVerticalAxis.getGroupBounds().getValue(i);
    int gravityOffsetX=hAlign.getGravityOffset(c,cellWidth - boundsX.size(true));
    int gravityOffsetY=vAlign.getGravityOffset(c,cellHeight - boundsY.size(true));
    int leftMargin=getMargin(c,true,true);
    int topMargin=getMargin(c,false,true);
    int rightMargin=getMargin(c,true,false);
    int bottomMargin=getMargin(c,false,false);
    int sumMarginsX=leftMargin + rightMargin;
    int sumMarginsY=topMargin + bottomMargin;
    int alignmentOffsetX=boundsX.getOffset(this,c,hAlign,pWidth + sumMarginsX,true);
    int alignmentOffsetY=boundsY.getOffset(this,c,vAlign,pHeight + sumMarginsY,false);
    int width=hAlign.getSizeInCell(c,pWidth,cellWidth - sumMarginsX);
    int height=vAlign.getSizeInCell(c,pHeight,cellHeight - sumMarginsY);
    int dx=x1 + gravityOffsetX + alignmentOffsetX;
    int cx=!isLayoutRtl() ? paddingLeft + leftMargin + dx : targetWidth - width - paddingRight- rightMargin- dx;
    int cy=paddingTop + y1 + gravityOffsetY+ alignmentOffsetY+ topMargin;
    if (width != c.getMeasuredWidth() || height != c.getMeasuredHeight()) {
      c.measure(makeMeasureSpec(width,EXACTLY),makeMeasureSpec(height,EXACTLY));
    }
    c.layout(cx,cy,cx + width,cy + height);
  }
}","/** 
 * {@inheritDoc}
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  consistencyCheck();
  int targetWidth=right - left;
  int targetHeight=bottom - top;
  int paddingLeft=getPaddingLeft();
  int paddingTop=getPaddingTop();
  int paddingRight=getPaddingRight();
  int paddingBottom=getPaddingBottom();
  mHorizontalAxis.layout(targetWidth - paddingLeft - paddingRight);
  mVerticalAxis.layout(targetHeight - paddingTop - paddingBottom);
  int[] hLocations=mHorizontalAxis.getLocations();
  int[] vLocations=mVerticalAxis.getLocations();
  for (int i=0, N=getChildCount(); i < N; i++) {
    View c=getChildAt(i);
    if (c.getVisibility() == View.GONE)     continue;
    LayoutParams lp=getLayoutParams(c);
    Spec columnSpec=lp.columnSpec;
    Spec rowSpec=lp.rowSpec;
    Interval colSpan=columnSpec.span;
    Interval rowSpan=rowSpec.span;
    int x1=hLocations[colSpan.min];
    int y1=vLocations[rowSpan.min];
    int x2=hLocations[colSpan.max];
    int y2=vLocations[rowSpan.max];
    int cellWidth=x2 - x1;
    int cellHeight=y2 - y1;
    int pWidth=getMeasurement(c,true);
    int pHeight=getMeasurement(c,false);
    Alignment hAlign=columnSpec.getAbsoluteAlignment(true);
    Alignment vAlign=rowSpec.getAbsoluteAlignment(false);
    Bounds boundsX=mHorizontalAxis.getGroupBounds().getValue(i);
    Bounds boundsY=mVerticalAxis.getGroupBounds().getValue(i);
    int gravityOffsetX=hAlign.getGravityOffset(c,cellWidth - boundsX.size(true));
    int gravityOffsetY=vAlign.getGravityOffset(c,cellHeight - boundsY.size(true));
    int leftMargin=getMargin(c,true,true);
    int topMargin=getMargin(c,false,true);
    int rightMargin=getMargin(c,true,false);
    int bottomMargin=getMargin(c,false,false);
    int sumMarginsX=leftMargin + rightMargin;
    int sumMarginsY=topMargin + bottomMargin;
    int alignmentOffsetX=boundsX.getOffset(this,c,hAlign,pWidth + sumMarginsX,true);
    int alignmentOffsetY=boundsY.getOffset(this,c,vAlign,pHeight + sumMarginsY,false);
    int width=hAlign.getSizeInCell(c,pWidth,cellWidth - sumMarginsX);
    int height=vAlign.getSizeInCell(c,pHeight,cellHeight - sumMarginsY);
    int dx=x1 + gravityOffsetX + alignmentOffsetX;
    int cx=!isLayoutRtl() ? paddingLeft + leftMargin + dx : targetWidth - width - paddingRight- rightMargin- dx;
    int cy=paddingTop + y1 + gravityOffsetY+ alignmentOffsetY+ topMargin;
    if (width != c.getMeasuredWidth() || height != c.getMeasuredHeight()) {
      c.measure(makeMeasureSpec(width,EXACTLY),makeMeasureSpec(height,EXACTLY));
    }
    c.layout(cx,cy,cx + width,cy + height);
  }
}",0.9805269186712484
195498,"private float calculateTotalWeight(){
  float totalWeight=0f;
  for (int i=0, N=getChildCount(); i < N; i++) {
    View c=getChildAt(i);
    LayoutParams lp=getLayoutParams(c);
    Spec spec=horizontal ? lp.columnSpec : lp.rowSpec;
    totalWeight+=spec.weight;
  }
  return totalWeight;
}","private float calculateTotalWeight(){
  float totalWeight=0f;
  for (int i=0, N=getChildCount(); i < N; i++) {
    View c=getChildAt(i);
    if (c.getVisibility() == View.GONE) {
      continue;
    }
    LayoutParams lp=getLayoutParams(c);
    Spec spec=horizontal ? lp.columnSpec : lp.rowSpec;
    totalWeight+=spec.weight;
  }
  return totalWeight;
}",0.9003115264797508
195499,"private PackedMap<Spec,Bounds> createGroupBounds(){
  Assoc<Spec,Bounds> assoc=Assoc.of(Spec.class,Bounds.class);
  for (int i=0, N=getChildCount(); i < N; i++) {
    View c=getChildAt(i);
    LayoutParams lp=getLayoutParams(c);
    Spec spec=horizontal ? lp.columnSpec : lp.rowSpec;
    Bounds bounds=getAlignment(spec.alignment,horizontal).getBounds();
    assoc.put(spec,bounds);
  }
  return assoc.pack();
}","private PackedMap<Spec,Bounds> createGroupBounds(){
  Assoc<Spec,Bounds> assoc=Assoc.of(Spec.class,Bounds.class);
  for (int i=0, N=getChildCount(); i < N; i++) {
    View c=getChildAt(i);
    LayoutParams lp=getLayoutParams(c);
    Spec spec=horizontal ? lp.columnSpec : lp.rowSpec;
    Bounds bounds=spec.getAbsoluteAlignment(horizontal).getBounds();
    assoc.put(spec,bounds);
  }
  return assoc.pack();
}",0.9658536585365852
195500,"private void measureChildrenWithMargins(int widthSpec,int heightSpec,boolean firstPass){
  for (int i=0, N=getChildCount(); i < N; i++) {
    View c=getChildAt(i);
    if (c.getVisibility() == View.GONE)     continue;
    LayoutParams lp=getLayoutParams(c);
    if (firstPass) {
      measureChildWithMargins2(c,widthSpec,heightSpec,lp.width,lp.height);
      mHorizontalAxis.recordOriginalMeasurement(i);
      mVerticalAxis.recordOriginalMeasurement(i);
    }
 else {
      boolean horizontal=(mOrientation == HORIZONTAL);
      Spec spec=horizontal ? lp.columnSpec : lp.rowSpec;
      if (spec.alignment == FILL) {
        Interval span=spec.span;
        Axis axis=horizontal ? mHorizontalAxis : mVerticalAxis;
        int[] locations=axis.getLocations();
        int cellSize=locations[span.max] - locations[span.min];
        int viewSize=cellSize - getTotalMargin(c,horizontal);
        if (horizontal) {
          measureChildWithMargins2(c,widthSpec,heightSpec,viewSize,lp.height);
        }
 else {
          measureChildWithMargins2(c,widthSpec,heightSpec,lp.width,viewSize);
        }
      }
    }
  }
}","private void measureChildrenWithMargins(int widthSpec,int heightSpec,boolean firstPass){
  for (int i=0, N=getChildCount(); i < N; i++) {
    View c=getChildAt(i);
    if (c.getVisibility() == View.GONE)     continue;
    LayoutParams lp=getLayoutParams(c);
    if (firstPass) {
      measureChildWithMargins2(c,widthSpec,heightSpec,lp.width,lp.height);
      mHorizontalAxis.recordOriginalMeasurement(i);
      mVerticalAxis.recordOriginalMeasurement(i);
    }
 else {
      boolean horizontal=(mOrientation == HORIZONTAL);
      Spec spec=horizontal ? lp.columnSpec : lp.rowSpec;
      if (spec.getAbsoluteAlignment(horizontal) == FILL) {
        Interval span=spec.span;
        Axis axis=horizontal ? mHorizontalAxis : mVerticalAxis;
        int[] locations=axis.getLocations();
        int cellSize=locations[span.max] - locations[span.min];
        int viewSize=cellSize - getTotalMargin(c,horizontal);
        if (horizontal) {
          measureChildWithMargins2(c,widthSpec,heightSpec,viewSize,lp.height);
        }
 else {
          measureChildWithMargins2(c,widthSpec,heightSpec,lp.width,viewSize);
        }
      }
    }
  }
}",0.9818181818181818
195501,"private boolean computeHasWeights(){
  for (int i=0, N=getChildCount(); i < N; i++) {
    LayoutParams lp=getLayoutParams(getChildAt(i));
    Spec spec=horizontal ? lp.columnSpec : lp.rowSpec;
    if (spec.weight != 0) {
      return true;
    }
  }
  return false;
}","private boolean computeHasWeights(){
  for (int i=0, N=getChildCount(); i < N; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() == View.GONE) {
      continue;
    }
    LayoutParams lp=getLayoutParams(child);
    Spec spec=horizontal ? lp.columnSpec : lp.rowSpec;
    if (spec.weight != 0) {
      return true;
    }
  }
  return false;
}",0.8063492063492064
195502,"final Alignment getAlignment(Alignment alignment,boolean horizontal){
  return (alignment != UNDEFINED_ALIGNMENT) ? alignment : (horizontal ? START : BASELINE);
}","static Alignment getAlignment(int gravity,boolean horizontal){
  int mask=horizontal ? HORIZONTAL_GRAVITY_MASK : VERTICAL_GRAVITY_MASK;
  int shift=horizontal ? AXIS_X_SHIFT : AXIS_Y_SHIFT;
  int flags=(gravity & mask) >> shift;
switch (flags) {
case (AXIS_SPECIFIED | AXIS_PULL_BEFORE):
    return horizontal ? LEFT : TOP;
case (AXIS_SPECIFIED | AXIS_PULL_AFTER):
  return horizontal ? RIGHT : BOTTOM;
case (AXIS_SPECIFIED | AXIS_PULL_BEFORE | AXIS_PULL_AFTER):
return FILL;
case AXIS_SPECIFIED:
return CENTER;
case (AXIS_SPECIFIED | AXIS_PULL_BEFORE | RELATIVE_LAYOUT_DIRECTION):
return START;
case (AXIS_SPECIFIED | AXIS_PULL_AFTER | RELATIVE_LAYOUT_DIRECTION):
return END;
default :
return UNDEFINED_ALIGNMENT;
}
}",0.1545454545454545
195503,"private void shareOutDelta(int totalDelta,float totalWeight){
  Arrays.fill(deltas,0);
  for (int i=0, N=getChildCount(); i < N; i++) {
    View c=getChildAt(i);
    LayoutParams lp=getLayoutParams(c);
    Spec spec=horizontal ? lp.columnSpec : lp.rowSpec;
    float weight=spec.weight;
    if (weight != 0) {
      int delta=Math.round((weight * totalDelta / totalWeight));
      deltas[i]=delta;
      totalDelta-=delta;
      totalWeight-=weight;
    }
  }
}","private void shareOutDelta(int totalDelta,float totalWeight){
  Arrays.fill(deltas,0);
  for (int i=0, N=getChildCount(); i < N; i++) {
    final View c=getChildAt(i);
    if (c.getVisibility() == View.GONE) {
      continue;
    }
    LayoutParams lp=getLayoutParams(c);
    Spec spec=horizontal ? lp.columnSpec : lp.rowSpec;
    float weight=spec.weight;
    if (weight != 0) {
      int delta=Math.round((weight * totalDelta / totalWeight));
      deltas[i]=delta;
      totalDelta-=delta;
      totalWeight-=weight;
    }
  }
}",0.9294354838709676
195504,"@Override public void run(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  while (true) {
synchronized (this) {
      if (mStopped) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        return;
      }
      try {
        openSocketLocked();
      }
 catch (      Exception e) {
        SystemClock.sleep(1000);
      }
    }
    try {
      listenToSocket();
    }
 catch (    IOException e) {
      SystemClock.sleep(1000);
    }
  }
}","@Override public void run(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  while (true) {
synchronized (this) {
      if (mStopped) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        return;
      }
      try {
        openSocketLocked();
      }
 catch (      Exception e) {
        SystemClock.sleep(1000);
      }
    }
    try {
      listenToSocket();
    }
 catch (    Exception e) {
      SystemClock.sleep(1000);
    }
  }
}",0.9977876106194692
195505,"@Override public void run(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  while (true) {
synchronized (this) {
      if (mStopped) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        return;
      }
      try {
        openSocketLocked();
      }
 catch (      Exception e) {
        SystemClock.sleep(1000);
      }
    }
    try {
      listenToSocket();
    }
 catch (    IOException e) {
      SystemClock.sleep(1000);
    }
  }
}","@Override public void run(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  while (true) {
synchronized (this) {
      if (mStopped) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        return;
      }
      try {
        openSocketLocked();
      }
 catch (      Exception e) {
        SystemClock.sleep(1000);
      }
    }
    try {
      listenToSocket();
    }
 catch (    Exception e) {
      SystemClock.sleep(1000);
    }
  }
}",0.9977876106194692
195506,"@Override public void run(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  while (true) {
synchronized (this) {
      if (mStopped) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        return;
      }
      try {
        openSocketLocked();
      }
 catch (      Exception e) {
        SystemClock.sleep(1000);
      }
    }
    try {
      listenToSocket();
    }
 catch (    IOException e) {
      SystemClock.sleep(1000);
    }
  }
}","@Override public void run(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  while (true) {
synchronized (this) {
      if (mStopped) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        return;
      }
      try {
        openSocketLocked();
      }
 catch (      Exception e) {
        SystemClock.sleep(1000);
      }
    }
    try {
      listenToSocket();
    }
 catch (    Exception e) {
      SystemClock.sleep(1000);
    }
  }
}",0.9977876106194692
195507,"/** 
 * Find all   {@link IntervalStats} for the given range and interval type.
 */
public <T>List<T> queryUsageStats(int intervalType,long beginTime,long endTime,StatCombiner<T> combiner){
synchronized (mLock) {
    if (intervalType < 0 || intervalType >= mIntervalDirs.length) {
      throw new IllegalArgumentException(""String_Node_Str"" + intervalType);
    }
    final TimeSparseArray<AtomicFile> intervalStats=mSortedStatFiles[intervalType];
    if (endTime <= beginTime) {
      if (DEBUG) {
        Slog.d(TAG,""String_Node_Str"" + endTime + ""String_Node_Str""+ beginTime+ ""String_Node_Str"");
      }
      return null;
    }
    int startIndex=intervalStats.closestIndexOnOrBefore(beginTime);
    if (startIndex < 0) {
      startIndex=0;
    }
    int endIndex=intervalStats.closestIndexOnOrBefore(endTime);
    if (endIndex < 0) {
      if (DEBUG) {
        Slog.d(TAG,""String_Node_Str"");
      }
      return null;
    }
    if (intervalStats.keyAt(endIndex) == endTime) {
      endIndex--;
      if (endIndex < 0) {
        if (DEBUG) {
          Slog.d(TAG,""String_Node_Str"");
        }
        return null;
      }
    }
    try {
      IntervalStats stats=new IntervalStats();
      ArrayList<T> results=new ArrayList<>();
      for (int i=startIndex; i <= endIndex; i++) {
        final AtomicFile f=intervalStats.valueAt(i);
        if (DEBUG) {
          Slog.d(TAG,""String_Node_Str"" + f.getBaseFile().getAbsolutePath());
        }
        UsageStatsXml.read(f,stats);
        if (beginTime < stats.endTime) {
          combiner.combine(stats,false,results);
        }
      }
      return results;
    }
 catch (    IOException e) {
      Slog.e(TAG,""String_Node_Str"",e);
      return null;
    }
  }
}","/** 
 * Find all   {@link IntervalStats} for the given range and interval type.
 */
public <T>List<T> queryUsageStats(int intervalType,long beginTime,long endTime,StatCombiner<T> combiner){
synchronized (mLock) {
    if (intervalType < 0 || intervalType >= mIntervalDirs.length) {
      throw new IllegalArgumentException(""String_Node_Str"" + intervalType);
    }
    final TimeSparseArray<AtomicFile> intervalStats=mSortedStatFiles[intervalType];
    if (endTime <= beginTime) {
      if (DEBUG) {
        Slog.d(TAG,""String_Node_Str"" + endTime + ""String_Node_Str""+ beginTime+ ""String_Node_Str"");
      }
      return null;
    }
    int startIndex=intervalStats.closestIndexOnOrBefore(beginTime);
    if (startIndex < 0) {
      startIndex=0;
    }
    int endIndex=intervalStats.closestIndexOnOrBefore(endTime);
    if (endIndex < 0) {
      if (DEBUG) {
        Slog.d(TAG,""String_Node_Str"");
      }
      return null;
    }
    if (intervalStats.keyAt(endIndex) == endTime) {
      endIndex--;
      if (endIndex < 0) {
        if (DEBUG) {
          Slog.d(TAG,""String_Node_Str"");
        }
        return null;
      }
    }
    final IntervalStats stats=new IntervalStats();
    final ArrayList<T> results=new ArrayList<>();
    for (int i=startIndex; i <= endIndex; i++) {
      final AtomicFile f=intervalStats.valueAt(i);
      if (DEBUG) {
        Slog.d(TAG,""String_Node_Str"" + f.getBaseFile().getAbsolutePath());
      }
      try {
        UsageStatsXml.read(f,stats);
        if (beginTime < stats.endTime) {
          combiner.combine(stats,false,results);
        }
      }
 catch (      IOException e) {
        Slog.e(TAG,""String_Node_Str"",e);
      }
    }
    return results;
  }
}",0.9693072201110786
195508,"/** 
 * Remove any usage stat files that are too old.
 */
public void prune(final long currentTimeMillis){
synchronized (mLock) {
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addYears(-3);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_YEARLY],mCal.getTimeInMillis());
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addMonths(-6);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_MONTHLY],mCal.getTimeInMillis());
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addWeeks(-4);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_WEEKLY],mCal.getTimeInMillis());
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addDays(-7);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_DAILY],mCal.getTimeInMillis());
  }
}","/** 
 * Remove any usage stat files that are too old.
 */
public void prune(final long currentTimeMillis){
synchronized (mLock) {
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addYears(-3);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_YEARLY],mCal.getTimeInMillis());
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addMonths(-6);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_MONTHLY],mCal.getTimeInMillis());
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addWeeks(-4);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_WEEKLY],mCal.getTimeInMillis());
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addDays(-7);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_DAILY],mCal.getTimeInMillis());
    indexFilesLocked();
  }
}",0.9852034525277436
195509,"/** 
 * Find all   {@link IntervalStats} for the given range and interval type.
 */
public <T>List<T> queryUsageStats(int intervalType,long beginTime,long endTime,StatCombiner<T> combiner){
synchronized (mLock) {
    if (intervalType < 0 || intervalType >= mIntervalDirs.length) {
      throw new IllegalArgumentException(""String_Node_Str"" + intervalType);
    }
    final TimeSparseArray<AtomicFile> intervalStats=mSortedStatFiles[intervalType];
    if (endTime <= beginTime) {
      if (DEBUG) {
        Slog.d(TAG,""String_Node_Str"" + endTime + ""String_Node_Str""+ beginTime+ ""String_Node_Str"");
      }
      return null;
    }
    int startIndex=intervalStats.closestIndexOnOrBefore(beginTime);
    if (startIndex < 0) {
      startIndex=0;
    }
    int endIndex=intervalStats.closestIndexOnOrBefore(endTime);
    if (endIndex < 0) {
      if (DEBUG) {
        Slog.d(TAG,""String_Node_Str"");
      }
      return null;
    }
    if (intervalStats.keyAt(endIndex) == endTime) {
      endIndex--;
      if (endIndex < 0) {
        if (DEBUG) {
          Slog.d(TAG,""String_Node_Str"");
        }
        return null;
      }
    }
    try {
      IntervalStats stats=new IntervalStats();
      ArrayList<T> results=new ArrayList<>();
      for (int i=startIndex; i <= endIndex; i++) {
        final AtomicFile f=intervalStats.valueAt(i);
        if (DEBUG) {
          Slog.d(TAG,""String_Node_Str"" + f.getBaseFile().getAbsolutePath());
        }
        UsageStatsXml.read(f,stats);
        if (beginTime < stats.endTime) {
          combiner.combine(stats,false,results);
        }
      }
      return results;
    }
 catch (    IOException e) {
      Slog.e(TAG,""String_Node_Str"",e);
      return null;
    }
  }
}","/** 
 * Find all   {@link IntervalStats} for the given range and interval type.
 */
public <T>List<T> queryUsageStats(int intervalType,long beginTime,long endTime,StatCombiner<T> combiner){
synchronized (mLock) {
    if (intervalType < 0 || intervalType >= mIntervalDirs.length) {
      throw new IllegalArgumentException(""String_Node_Str"" + intervalType);
    }
    final TimeSparseArray<AtomicFile> intervalStats=mSortedStatFiles[intervalType];
    if (endTime <= beginTime) {
      if (DEBUG) {
        Slog.d(TAG,""String_Node_Str"" + endTime + ""String_Node_Str""+ beginTime+ ""String_Node_Str"");
      }
      return null;
    }
    int startIndex=intervalStats.closestIndexOnOrBefore(beginTime);
    if (startIndex < 0) {
      startIndex=0;
    }
    int endIndex=intervalStats.closestIndexOnOrBefore(endTime);
    if (endIndex < 0) {
      if (DEBUG) {
        Slog.d(TAG,""String_Node_Str"");
      }
      return null;
    }
    if (intervalStats.keyAt(endIndex) == endTime) {
      endIndex--;
      if (endIndex < 0) {
        if (DEBUG) {
          Slog.d(TAG,""String_Node_Str"");
        }
        return null;
      }
    }
    final IntervalStats stats=new IntervalStats();
    final ArrayList<T> results=new ArrayList<>();
    for (int i=startIndex; i <= endIndex; i++) {
      final AtomicFile f=intervalStats.valueAt(i);
      if (DEBUG) {
        Slog.d(TAG,""String_Node_Str"" + f.getBaseFile().getAbsolutePath());
      }
      try {
        UsageStatsXml.read(f,stats);
        if (beginTime < stats.endTime) {
          combiner.combine(stats,false,results);
        }
      }
 catch (      IOException e) {
        Slog.e(TAG,""String_Node_Str"",e);
      }
    }
    return results;
  }
}",0.9693072201110786
195510,"/** 
 * Remove any usage stat files that are too old.
 */
public void prune(final long currentTimeMillis){
synchronized (mLock) {
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addYears(-3);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_YEARLY],mCal.getTimeInMillis());
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addMonths(-6);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_MONTHLY],mCal.getTimeInMillis());
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addWeeks(-4);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_WEEKLY],mCal.getTimeInMillis());
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addDays(-7);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_DAILY],mCal.getTimeInMillis());
  }
}","/** 
 * Remove any usage stat files that are too old.
 */
public void prune(final long currentTimeMillis){
synchronized (mLock) {
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addYears(-3);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_YEARLY],mCal.getTimeInMillis());
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addMonths(-6);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_MONTHLY],mCal.getTimeInMillis());
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addWeeks(-4);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_WEEKLY],mCal.getTimeInMillis());
    mCal.setTimeInMillis(currentTimeMillis);
    mCal.addDays(-7);
    pruneFilesOlderThan(mIntervalDirs[UsageStatsManager.INTERVAL_DAILY],mCal.getTimeInMillis());
    indexFilesLocked();
  }
}",0.9852034525277436
195511,"public void setLayer(int layer){
  mSurfaceControl.setLayer(layer);
}","void setLayer(int layer){
  if (mLayer == layer) {
    return;
  }
  mLayer=layer;
  mSurfaceControl.setLayer(mLayer);
}",0.6455026455026455
195512,"public FocusedStackFrame(Display display,SurfaceSession session){
  SurfaceControl ctrl=null;
  try {
    if (DEBUG_SURFACE_TRACE) {
      ctrl=new SurfaceTrace(session,""String_Node_Str"",1,1,PixelFormat.TRANSLUCENT,SurfaceControl.HIDDEN);
    }
 else {
      ctrl=new SurfaceControl(session,""String_Node_Str"",1,1,PixelFormat.TRANSLUCENT,SurfaceControl.HIDDEN);
    }
    ctrl.setLayerStack(display.getLayerStack());
    ctrl.setAlpha(ALPHA);
    mSurface.copyFrom(ctrl);
  }
 catch (  OutOfResourcesException e) {
  }
  mSurfaceControl=ctrl;
}","public FocusedStackFrame(Display display,SurfaceSession session){
  SurfaceControl ctrl=null;
  try {
    if (DEBUG_SURFACE_TRACE) {
      ctrl=new SurfaceTrace(session,""String_Node_Str"",1,1,PixelFormat.TRANSLUCENT,SurfaceControl.HIDDEN);
    }
 else {
      ctrl=new SurfaceControl(session,""String_Node_Str"",1,1,PixelFormat.TRANSLUCENT,SurfaceControl.HIDDEN);
    }
    ctrl.setLayerStack(display.getLayerStack());
    ctrl.setAlpha(ALPHA);
    mSurface.copyFrom(ctrl);
  }
 catch (  OutOfResourcesException e) {
  }
  mSurfaceControl=ctrl;
  mInnerPaint.setStyle(Paint.Style.STROKE);
  mInnerPaint.setStrokeWidth(THICKNESS);
  mInnerPaint.setColor(Color.WHITE);
  mOuterPaint.setStyle(Paint.Style.STROKE);
  mOuterPaint.setStrokeWidth(THICKNESS);
  mOuterPaint.setColor(Color.BLACK);
}",0.8165413533834587
195513,"private void draw(Rect bounds,int color){
  if (false && DEBUG_STACK)   Slog.i(TAG,""String_Node_Str"" + bounds.toShortString() + ""String_Node_Str""+ Integer.toHexString(color));
  mTmpDrawRect.set(bounds);
  Canvas c=null;
  try {
    c=mSurface.lockCanvas(mTmpDrawRect);
  }
 catch (  IllegalArgumentException e) {
  }
catch (  Surface.OutOfResourcesException e) {
  }
  if (c == null) {
    return;
  }
  final int w=bounds.width();
  final int h=bounds.height();
  mTmpDrawRect.set(0,0,w,THICKNESS);
  c.clipRect(mTmpDrawRect,Region.Op.REPLACE);
  c.drawColor(color);
  mTmpDrawRect.set(0,THICKNESS,THICKNESS,h - THICKNESS);
  c.clipRect(mTmpDrawRect,Region.Op.REPLACE);
  c.drawColor(color);
  mTmpDrawRect.set(w - THICKNESS,THICKNESS,w,h - THICKNESS);
  c.clipRect(mTmpDrawRect,Region.Op.REPLACE);
  c.drawColor(color);
  mTmpDrawRect.set(0,h - THICKNESS,w,h);
  c.clipRect(mTmpDrawRect,Region.Op.REPLACE);
  c.drawColor(color);
  mSurface.unlockCanvasAndPost(c);
}","private void draw(){
  if (mLastBounds.isEmpty()) {
    mLastBounds.set(mBounds);
  }
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + mBounds + ""String_Node_Str""+ mLastBounds);
  Canvas c=null;
  try {
    c=mSurface.lockCanvas(mLastBounds);
  }
 catch (  IllegalArgumentException e) {
    Slog.e(TAG,""String_Node_Str"",e);
  }
catch (  Surface.OutOfResourcesException e) {
    Slog.e(TAG,""String_Node_Str"",e);
  }
  if (c == null) {
    if (DEBUG)     Slog.w(TAG,""String_Node_Str"");
    return;
  }
  c.drawRect(0,0,mBounds.width(),mBounds.height(),mOuterPaint);
  c.drawRect(THICKNESS,THICKNESS,mBounds.width() - THICKNESS,mBounds.height() - THICKNESS,mInnerPaint);
  if (DEBUG)   Slog.w(TAG,""String_Node_Str"" + c.getWidth() + ""String_Node_Str""+ c.getHeight()+ ""String_Node_Str""+ c.getClipBounds());
  mSurface.unlockCanvasAndPost(c);
  mLastBounds.set(mBounds);
}",0.3724740578918624
195514,"public void setVisibility(boolean on){
  if (false && DEBUG_STACK)   Slog.i(TAG,""String_Node_Str"" + on + ""String_Node_Str""+ mLastBounds.toShortString()+ ""String_Node_Str""+ mBounds.toShortString());
  if (mSurfaceControl == null) {
    return;
  }
  if (on) {
    if (!mLastBounds.equals(mBounds)) {
      positionSurface(mLastBounds);
      draw(mLastBounds,Color.TRANSPARENT);
      positionSurface(mBounds);
      draw(mBounds,Color.WHITE);
      mLastBounds.set(mBounds);
    }
    mSurfaceControl.show();
  }
 else {
    mSurfaceControl.hide();
  }
}","void setVisibility(TaskStack stack){
  if (stack == null || stack.isFullscreen()) {
    setupSurface(false);
  }
 else {
    stack.getBounds(mBounds);
    setupSurface(true);
    if (!mBounds.equals(mLastBounds)) {
      draw();
    }
  }
}",0.0680100755667506
195515,"void setFocusedStackFrame(){
  final TaskStack stack;
  if (mFocusedApp != null) {
    final Task task=mFocusedApp.mTask;
    stack=task.mStack;
    final DisplayContent displayContent=task.getDisplayContent();
    if (displayContent != null) {
      displayContent.setTouchExcludeRegion(stack);
    }
  }
 else {
    stack=null;
  }
  if (SHOW_LIGHT_TRANSACTIONS)   Slog.i(TAG,""String_Node_Str"");
  SurfaceControl.openTransaction();
  try {
    if (stack == null) {
      mFocusedStackFrame.setVisibility(false);
    }
 else {
      mFocusedStackFrame.setBounds(stack);
      final boolean multipleStacks=!stack.isFullscreen();
      mFocusedStackFrame.setVisibility(multipleStacks);
    }
  }
  finally {
    SurfaceControl.closeTransaction();
    if (SHOW_LIGHT_TRANSACTIONS)     Slog.i(TAG,""String_Node_Str"");
  }
}","void setFocusedStackFrame(){
  final TaskStack stack;
  if (mFocusedApp != null) {
    final Task task=mFocusedApp.mTask;
    stack=task.mStack;
    final DisplayContent displayContent=task.getDisplayContent();
    if (displayContent != null) {
      displayContent.setTouchExcludeRegion(stack);
    }
  }
 else {
    stack=null;
  }
  mFocusedStackFrame.setVisibility(stack);
}",0.5964912280701754
195516,"public void setLayer(int layer){
  mSurfaceControl.setLayer(layer);
}","void setLayer(int layer){
  if (mLayer == layer) {
    return;
  }
  mLayer=layer;
  mSurfaceControl.setLayer(mLayer);
}",0.6455026455026455
195517,"public FocusedStackFrame(Display display,SurfaceSession session){
  SurfaceControl ctrl=null;
  try {
    if (DEBUG_SURFACE_TRACE) {
      ctrl=new SurfaceTrace(session,""String_Node_Str"",1,1,PixelFormat.TRANSLUCENT,SurfaceControl.HIDDEN);
    }
 else {
      ctrl=new SurfaceControl(session,""String_Node_Str"",1,1,PixelFormat.TRANSLUCENT,SurfaceControl.HIDDEN);
    }
    ctrl.setLayerStack(display.getLayerStack());
    ctrl.setAlpha(ALPHA);
    mSurface.copyFrom(ctrl);
  }
 catch (  OutOfResourcesException e) {
  }
  mSurfaceControl=ctrl;
}","public FocusedStackFrame(Display display,SurfaceSession session){
  SurfaceControl ctrl=null;
  try {
    if (DEBUG_SURFACE_TRACE) {
      ctrl=new SurfaceTrace(session,""String_Node_Str"",1,1,PixelFormat.TRANSLUCENT,SurfaceControl.HIDDEN);
    }
 else {
      ctrl=new SurfaceControl(session,""String_Node_Str"",1,1,PixelFormat.TRANSLUCENT,SurfaceControl.HIDDEN);
    }
    ctrl.setLayerStack(display.getLayerStack());
    ctrl.setAlpha(ALPHA);
    mSurface.copyFrom(ctrl);
  }
 catch (  OutOfResourcesException e) {
  }
  mSurfaceControl=ctrl;
  mInnerPaint.setStyle(Paint.Style.STROKE);
  mInnerPaint.setStrokeWidth(THICKNESS);
  mInnerPaint.setColor(Color.WHITE);
  mOuterPaint.setStyle(Paint.Style.STROKE);
  mOuterPaint.setStrokeWidth(THICKNESS);
  mOuterPaint.setColor(Color.BLACK);
}",0.8165413533834587
195518,"private void draw(Rect bounds,int color){
  if (false && DEBUG_STACK)   Slog.i(TAG,""String_Node_Str"" + bounds.toShortString() + ""String_Node_Str""+ Integer.toHexString(color));
  mTmpDrawRect.set(bounds);
  Canvas c=null;
  try {
    c=mSurface.lockCanvas(mTmpDrawRect);
  }
 catch (  IllegalArgumentException e) {
  }
catch (  Surface.OutOfResourcesException e) {
  }
  if (c == null) {
    return;
  }
  final int w=bounds.width();
  final int h=bounds.height();
  mTmpDrawRect.set(0,0,w,THICKNESS);
  c.clipRect(mTmpDrawRect,Region.Op.REPLACE);
  c.drawColor(color);
  mTmpDrawRect.set(0,THICKNESS,THICKNESS,h - THICKNESS);
  c.clipRect(mTmpDrawRect,Region.Op.REPLACE);
  c.drawColor(color);
  mTmpDrawRect.set(w - THICKNESS,THICKNESS,w,h - THICKNESS);
  c.clipRect(mTmpDrawRect,Region.Op.REPLACE);
  c.drawColor(color);
  mTmpDrawRect.set(0,h - THICKNESS,w,h);
  c.clipRect(mTmpDrawRect,Region.Op.REPLACE);
  c.drawColor(color);
  mSurface.unlockCanvasAndPost(c);
}","private void draw(){
  if (mLastBounds.isEmpty()) {
    mLastBounds.set(mBounds);
  }
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + mBounds + ""String_Node_Str""+ mLastBounds);
  Canvas c=null;
  try {
    c=mSurface.lockCanvas(mLastBounds);
  }
 catch (  IllegalArgumentException e) {
    Slog.e(TAG,""String_Node_Str"",e);
  }
catch (  Surface.OutOfResourcesException e) {
    Slog.e(TAG,""String_Node_Str"",e);
  }
  if (c == null) {
    if (DEBUG)     Slog.w(TAG,""String_Node_Str"");
    return;
  }
  c.drawRect(0,0,mBounds.width(),mBounds.height(),mOuterPaint);
  c.drawRect(THICKNESS,THICKNESS,mBounds.width() - THICKNESS,mBounds.height() - THICKNESS,mInnerPaint);
  if (DEBUG)   Slog.w(TAG,""String_Node_Str"" + c.getWidth() + ""String_Node_Str""+ c.getHeight()+ ""String_Node_Str""+ c.getClipBounds());
  mSurface.unlockCanvasAndPost(c);
  mLastBounds.set(mBounds);
}",0.3724740578918624
195519,"public void setVisibility(boolean on){
  if (false && DEBUG_STACK)   Slog.i(TAG,""String_Node_Str"" + on + ""String_Node_Str""+ mLastBounds.toShortString()+ ""String_Node_Str""+ mBounds.toShortString());
  if (mSurfaceControl == null) {
    return;
  }
  if (on) {
    if (!mLastBounds.equals(mBounds)) {
      positionSurface(mLastBounds);
      draw(mLastBounds,Color.TRANSPARENT);
      positionSurface(mBounds);
      draw(mBounds,Color.WHITE);
      mLastBounds.set(mBounds);
    }
    mSurfaceControl.show();
  }
 else {
    mSurfaceControl.hide();
  }
}","void setVisibility(TaskStack stack){
  if (stack == null || stack.isFullscreen()) {
    setupSurface(false);
  }
 else {
    stack.getBounds(mBounds);
    setupSurface(true);
    if (!mBounds.equals(mLastBounds)) {
      draw();
    }
  }
}",0.0680100755667506
195520,"void setFocusedStackFrame(){
  final TaskStack stack;
  if (mFocusedApp != null) {
    final Task task=mFocusedApp.mTask;
    stack=task.mStack;
    final DisplayContent displayContent=task.getDisplayContent();
    if (displayContent != null) {
      displayContent.setTouchExcludeRegion(stack);
    }
  }
 else {
    stack=null;
  }
  if (SHOW_LIGHT_TRANSACTIONS)   Slog.i(TAG,""String_Node_Str"");
  SurfaceControl.openTransaction();
  try {
    if (stack == null) {
      mFocusedStackFrame.setVisibility(false);
    }
 else {
      mFocusedStackFrame.setBounds(stack);
      final boolean multipleStacks=!stack.isFullscreen();
      mFocusedStackFrame.setVisibility(multipleStacks);
    }
  }
  finally {
    SurfaceControl.closeTransaction();
    if (SHOW_LIGHT_TRANSACTIONS)     Slog.i(TAG,""String_Node_Str"");
  }
}","void setFocusedStackFrame(){
  final TaskStack stack;
  if (mFocusedApp != null) {
    final Task task=mFocusedApp.mTask;
    stack=task.mStack;
    final DisplayContent displayContent=task.getDisplayContent();
    if (displayContent != null) {
      displayContent.setTouchExcludeRegion(stack);
    }
  }
 else {
    stack=null;
  }
  mFocusedStackFrame.setVisibility(stack);
}",0.5964912280701754
195521,"/** 
 * Parses the commandline arguments intended for the Zygote spawner (such as ""--setuid="" and ""--setgid="") and creates an array containing the remaining args. Per security review bug #1112214, duplicate args are disallowed in critical cases to make injection harder.
 */
private void parseArgs(String args[]) throws IllegalArgumentException {
  int curArg=0;
  boolean seenRuntimeArgs=true;
  for (; curArg < args.length; curArg++) {
    String arg=args[curArg];
    if (arg.equals(""String_Node_Str"")) {
      curArg++;
      break;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (uidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      uidSpecified=true;
      uid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      gidSpecified=true;
      gid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (targetSdkVersionSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      targetSdkVersionSpecified=true;
      targetSdkVersion=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      seenRuntimeArgs=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (seInfoSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      seInfoSpecified=true;
      seInfo=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (capabilitiesSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      capabilitiesSpecified=true;
      String capString=arg.substring(arg.indexOf('=') + 1);
      String[] capStrings=capString.split(""String_Node_Str"",2);
      if (capStrings.length == 1) {
        effectiveCapabilities=Long.decode(capStrings[0]);
        permittedCapabilities=effectiveCapabilities;
      }
 else {
        permittedCapabilities=Long.decode(capStrings[0]);
        effectiveCapabilities=Long.decode(capStrings[1]);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      String[] limitStrings=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      if (limitStrings.length != 3) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int[] rlimitTuple=new int[limitStrings.length];
      for (int i=0; i < limitStrings.length; i++) {
        rlimitTuple[i]=Integer.parseInt(limitStrings[i]);
      }
      if (rlimits == null) {
        rlimits=new ArrayList();
      }
      rlimits.add(rlimitTuple);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gids != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String[] params=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      gids=new int[params.length];
      for (int i=params.length - 1; i >= 0; i--) {
        gids[i]=Integer.parseInt(params[i]);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
      if (invokeWith != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      try {
        invokeWith=args[++curArg];
      }
 catch (      IndexOutOfBoundsException ex) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (niceName != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      niceName=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      abiListQuery=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      instructionSet=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      appDataDir=arg.substring(arg.indexOf('=') + 1);
    }
 else {
      break;
    }
  }
  if (!seenRuntimeArgs) {
    throw new IllegalArgumentException(""String_Node_Str"" + args[curArg]);
  }
  remainingArgs=new String[args.length - curArg];
  System.arraycopy(args,curArg,remainingArgs,0,remainingArgs.length);
}","/** 
 * Parses the commandline arguments intended for the Zygote spawner (such as ""--setuid="" and ""--setgid="") and creates an array containing the remaining args. Per security review bug #1112214, duplicate args are disallowed in critical cases to make injection harder.
 */
private void parseArgs(String args[]) throws IllegalArgumentException {
  int curArg=0;
  boolean seenRuntimeArgs=false;
  for (; curArg < args.length; curArg++) {
    String arg=args[curArg];
    if (arg.equals(""String_Node_Str"")) {
      curArg++;
      break;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (uidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      uidSpecified=true;
      uid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      gidSpecified=true;
      gid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (targetSdkVersionSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      targetSdkVersionSpecified=true;
      targetSdkVersion=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      seenRuntimeArgs=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (seInfoSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      seInfoSpecified=true;
      seInfo=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (capabilitiesSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      capabilitiesSpecified=true;
      String capString=arg.substring(arg.indexOf('=') + 1);
      String[] capStrings=capString.split(""String_Node_Str"",2);
      if (capStrings.length == 1) {
        effectiveCapabilities=Long.decode(capStrings[0]);
        permittedCapabilities=effectiveCapabilities;
      }
 else {
        permittedCapabilities=Long.decode(capStrings[0]);
        effectiveCapabilities=Long.decode(capStrings[1]);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      String[] limitStrings=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      if (limitStrings.length != 3) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int[] rlimitTuple=new int[limitStrings.length];
      for (int i=0; i < limitStrings.length; i++) {
        rlimitTuple[i]=Integer.parseInt(limitStrings[i]);
      }
      if (rlimits == null) {
        rlimits=new ArrayList();
      }
      rlimits.add(rlimitTuple);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gids != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String[] params=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      gids=new int[params.length];
      for (int i=params.length - 1; i >= 0; i--) {
        gids[i]=Integer.parseInt(params[i]);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
      if (invokeWith != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      try {
        invokeWith=args[++curArg];
      }
 catch (      IndexOutOfBoundsException ex) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (niceName != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      niceName=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      abiListQuery=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      instructionSet=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      appDataDir=arg.substring(arg.indexOf('=') + 1);
    }
 else {
      break;
    }
  }
  if (abiListQuery) {
    if (args.length - curArg > 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    if (!seenRuntimeArgs) {
      throw new IllegalArgumentException(""String_Node_Str"" + args[curArg]);
    }
    remainingArgs=new String[args.length - curArg];
    System.arraycopy(args,curArg,remainingArgs,0,remainingArgs.length);
  }
}",0.9817496528466574
195522,"/** 
 * Parses the commandline arguments intended for the Zygote spawner (such as ""--setuid="" and ""--setgid="") and creates an array containing the remaining args. Per security review bug #1112214, duplicate args are disallowed in critical cases to make injection harder.
 */
private void parseArgs(String args[]) throws IllegalArgumentException {
  int curArg=0;
  boolean seenRuntimeArgs=true;
  for (; curArg < args.length; curArg++) {
    String arg=args[curArg];
    if (arg.equals(""String_Node_Str"")) {
      curArg++;
      break;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (uidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      uidSpecified=true;
      uid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      gidSpecified=true;
      gid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (targetSdkVersionSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      targetSdkVersionSpecified=true;
      targetSdkVersion=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      seenRuntimeArgs=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (seInfoSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      seInfoSpecified=true;
      seInfo=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (capabilitiesSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      capabilitiesSpecified=true;
      String capString=arg.substring(arg.indexOf('=') + 1);
      String[] capStrings=capString.split(""String_Node_Str"",2);
      if (capStrings.length == 1) {
        effectiveCapabilities=Long.decode(capStrings[0]);
        permittedCapabilities=effectiveCapabilities;
      }
 else {
        permittedCapabilities=Long.decode(capStrings[0]);
        effectiveCapabilities=Long.decode(capStrings[1]);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      String[] limitStrings=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      if (limitStrings.length != 3) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int[] rlimitTuple=new int[limitStrings.length];
      for (int i=0; i < limitStrings.length; i++) {
        rlimitTuple[i]=Integer.parseInt(limitStrings[i]);
      }
      if (rlimits == null) {
        rlimits=new ArrayList();
      }
      rlimits.add(rlimitTuple);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gids != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String[] params=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      gids=new int[params.length];
      for (int i=params.length - 1; i >= 0; i--) {
        gids[i]=Integer.parseInt(params[i]);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
      if (invokeWith != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      try {
        invokeWith=args[++curArg];
      }
 catch (      IndexOutOfBoundsException ex) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (niceName != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      niceName=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      abiListQuery=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      instructionSet=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      appDataDir=arg.substring(arg.indexOf('=') + 1);
    }
 else {
      break;
    }
  }
  if (!seenRuntimeArgs) {
    throw new IllegalArgumentException(""String_Node_Str"" + args[curArg]);
  }
  remainingArgs=new String[args.length - curArg];
  System.arraycopy(args,curArg,remainingArgs,0,remainingArgs.length);
}","/** 
 * Parses the commandline arguments intended for the Zygote spawner (such as ""--setuid="" and ""--setgid="") and creates an array containing the remaining args. Per security review bug #1112214, duplicate args are disallowed in critical cases to make injection harder.
 */
private void parseArgs(String args[]) throws IllegalArgumentException {
  int curArg=0;
  boolean seenRuntimeArgs=false;
  for (; curArg < args.length; curArg++) {
    String arg=args[curArg];
    if (arg.equals(""String_Node_Str"")) {
      curArg++;
      break;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (uidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      uidSpecified=true;
      uid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      gidSpecified=true;
      gid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (targetSdkVersionSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      targetSdkVersionSpecified=true;
      targetSdkVersion=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      seenRuntimeArgs=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (seInfoSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      seInfoSpecified=true;
      seInfo=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (capabilitiesSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      capabilitiesSpecified=true;
      String capString=arg.substring(arg.indexOf('=') + 1);
      String[] capStrings=capString.split(""String_Node_Str"",2);
      if (capStrings.length == 1) {
        effectiveCapabilities=Long.decode(capStrings[0]);
        permittedCapabilities=effectiveCapabilities;
      }
 else {
        permittedCapabilities=Long.decode(capStrings[0]);
        effectiveCapabilities=Long.decode(capStrings[1]);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      String[] limitStrings=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      if (limitStrings.length != 3) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int[] rlimitTuple=new int[limitStrings.length];
      for (int i=0; i < limitStrings.length; i++) {
        rlimitTuple[i]=Integer.parseInt(limitStrings[i]);
      }
      if (rlimits == null) {
        rlimits=new ArrayList();
      }
      rlimits.add(rlimitTuple);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gids != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String[] params=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      gids=new int[params.length];
      for (int i=params.length - 1; i >= 0; i--) {
        gids[i]=Integer.parseInt(params[i]);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
      if (invokeWith != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      try {
        invokeWith=args[++curArg];
      }
 catch (      IndexOutOfBoundsException ex) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (niceName != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      niceName=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      abiListQuery=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      instructionSet=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      appDataDir=arg.substring(arg.indexOf('=') + 1);
    }
 else {
      break;
    }
  }
  if (abiListQuery) {
    if (args.length - curArg > 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    if (!seenRuntimeArgs) {
      throw new IllegalArgumentException(""String_Node_Str"" + args[curArg]);
    }
    remainingArgs=new String[args.length - curArg];
    System.arraycopy(args,curArg,remainingArgs,0,remainingArgs.length);
  }
}",0.9817496528466574
195523,"/** 
 * Parses the commandline arguments intended for the Zygote spawner (such as ""--setuid="" and ""--setgid="") and creates an array containing the remaining args. Per security review bug #1112214, duplicate args are disallowed in critical cases to make injection harder.
 */
private void parseArgs(String args[]) throws IllegalArgumentException {
  int curArg=0;
  boolean seenRuntimeArgs=true;
  for (; curArg < args.length; curArg++) {
    String arg=args[curArg];
    if (arg.equals(""String_Node_Str"")) {
      curArg++;
      break;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (uidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      uidSpecified=true;
      uid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      gidSpecified=true;
      gid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (targetSdkVersionSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      targetSdkVersionSpecified=true;
      targetSdkVersion=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      seenRuntimeArgs=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (seInfoSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      seInfoSpecified=true;
      seInfo=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (capabilitiesSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      capabilitiesSpecified=true;
      String capString=arg.substring(arg.indexOf('=') + 1);
      String[] capStrings=capString.split(""String_Node_Str"",2);
      if (capStrings.length == 1) {
        effectiveCapabilities=Long.decode(capStrings[0]);
        permittedCapabilities=effectiveCapabilities;
      }
 else {
        permittedCapabilities=Long.decode(capStrings[0]);
        effectiveCapabilities=Long.decode(capStrings[1]);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      String[] limitStrings=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      if (limitStrings.length != 3) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int[] rlimitTuple=new int[limitStrings.length];
      for (int i=0; i < limitStrings.length; i++) {
        rlimitTuple[i]=Integer.parseInt(limitStrings[i]);
      }
      if (rlimits == null) {
        rlimits=new ArrayList();
      }
      rlimits.add(rlimitTuple);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gids != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String[] params=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      gids=new int[params.length];
      for (int i=params.length - 1; i >= 0; i--) {
        gids[i]=Integer.parseInt(params[i]);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
      if (invokeWith != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      try {
        invokeWith=args[++curArg];
      }
 catch (      IndexOutOfBoundsException ex) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (niceName != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      niceName=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      abiListQuery=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      instructionSet=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      appDataDir=arg.substring(arg.indexOf('=') + 1);
    }
 else {
      break;
    }
  }
  if (!seenRuntimeArgs) {
    throw new IllegalArgumentException(""String_Node_Str"" + args[curArg]);
  }
  remainingArgs=new String[args.length - curArg];
  System.arraycopy(args,curArg,remainingArgs,0,remainingArgs.length);
}","/** 
 * Parses the commandline arguments intended for the Zygote spawner (such as ""--setuid="" and ""--setgid="") and creates an array containing the remaining args. Per security review bug #1112214, duplicate args are disallowed in critical cases to make injection harder.
 */
private void parseArgs(String args[]) throws IllegalArgumentException {
  int curArg=0;
  boolean seenRuntimeArgs=false;
  for (; curArg < args.length; curArg++) {
    String arg=args[curArg];
    if (arg.equals(""String_Node_Str"")) {
      curArg++;
      break;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (uidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      uidSpecified=true;
      uid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      gidSpecified=true;
      gid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (targetSdkVersionSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      targetSdkVersionSpecified=true;
      targetSdkVersion=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      seenRuntimeArgs=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (seInfoSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      seInfoSpecified=true;
      seInfo=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (capabilitiesSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      capabilitiesSpecified=true;
      String capString=arg.substring(arg.indexOf('=') + 1);
      String[] capStrings=capString.split(""String_Node_Str"",2);
      if (capStrings.length == 1) {
        effectiveCapabilities=Long.decode(capStrings[0]);
        permittedCapabilities=effectiveCapabilities;
      }
 else {
        permittedCapabilities=Long.decode(capStrings[0]);
        effectiveCapabilities=Long.decode(capStrings[1]);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      String[] limitStrings=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      if (limitStrings.length != 3) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int[] rlimitTuple=new int[limitStrings.length];
      for (int i=0; i < limitStrings.length; i++) {
        rlimitTuple[i]=Integer.parseInt(limitStrings[i]);
      }
      if (rlimits == null) {
        rlimits=new ArrayList();
      }
      rlimits.add(rlimitTuple);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gids != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String[] params=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      gids=new int[params.length];
      for (int i=params.length - 1; i >= 0; i--) {
        gids[i]=Integer.parseInt(params[i]);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
      if (invokeWith != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      try {
        invokeWith=args[++curArg];
      }
 catch (      IndexOutOfBoundsException ex) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (niceName != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      niceName=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      abiListQuery=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      instructionSet=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      appDataDir=arg.substring(arg.indexOf('=') + 1);
    }
 else {
      break;
    }
  }
  if (abiListQuery) {
    if (args.length - curArg > 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    if (!seenRuntimeArgs) {
      throw new IllegalArgumentException(""String_Node_Str"" + args[curArg]);
    }
    remainingArgs=new String[args.length - curArg];
    System.arraycopy(args,curArg,remainingArgs,0,remainingArgs.length);
  }
}",0.9817496528466574
195524,"/** 
 * Parses the commandline arguments intended for the Zygote spawner (such as ""--setuid="" and ""--setgid="") and creates an array containing the remaining args. Per security review bug #1112214, duplicate args are disallowed in critical cases to make injection harder.
 */
private void parseArgs(String args[]) throws IllegalArgumentException {
  int curArg=0;
  boolean seenRuntimeArgs=true;
  for (; curArg < args.length; curArg++) {
    String arg=args[curArg];
    if (arg.equals(""String_Node_Str"")) {
      curArg++;
      break;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (uidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      uidSpecified=true;
      uid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      gidSpecified=true;
      gid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (targetSdkVersionSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      targetSdkVersionSpecified=true;
      targetSdkVersion=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      seenRuntimeArgs=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (seInfoSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      seInfoSpecified=true;
      seInfo=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (capabilitiesSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      capabilitiesSpecified=true;
      String capString=arg.substring(arg.indexOf('=') + 1);
      String[] capStrings=capString.split(""String_Node_Str"",2);
      if (capStrings.length == 1) {
        effectiveCapabilities=Long.decode(capStrings[0]);
        permittedCapabilities=effectiveCapabilities;
      }
 else {
        permittedCapabilities=Long.decode(capStrings[0]);
        effectiveCapabilities=Long.decode(capStrings[1]);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      String[] limitStrings=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      if (limitStrings.length != 3) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int[] rlimitTuple=new int[limitStrings.length];
      for (int i=0; i < limitStrings.length; i++) {
        rlimitTuple[i]=Integer.parseInt(limitStrings[i]);
      }
      if (rlimits == null) {
        rlimits=new ArrayList();
      }
      rlimits.add(rlimitTuple);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gids != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String[] params=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      gids=new int[params.length];
      for (int i=params.length - 1; i >= 0; i--) {
        gids[i]=Integer.parseInt(params[i]);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
      if (invokeWith != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      try {
        invokeWith=args[++curArg];
      }
 catch (      IndexOutOfBoundsException ex) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (niceName != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      niceName=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      abiListQuery=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      instructionSet=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      appDataDir=arg.substring(arg.indexOf('=') + 1);
    }
 else {
      break;
    }
  }
  if (!seenRuntimeArgs) {
    throw new IllegalArgumentException(""String_Node_Str"" + args[curArg]);
  }
  remainingArgs=new String[args.length - curArg];
  System.arraycopy(args,curArg,remainingArgs,0,remainingArgs.length);
}","/** 
 * Parses the commandline arguments intended for the Zygote spawner (such as ""--setuid="" and ""--setgid="") and creates an array containing the remaining args. Per security review bug #1112214, duplicate args are disallowed in critical cases to make injection harder.
 */
private void parseArgs(String args[]) throws IllegalArgumentException {
  int curArg=0;
  boolean seenRuntimeArgs=false;
  for (; curArg < args.length; curArg++) {
    String arg=args[curArg];
    if (arg.equals(""String_Node_Str"")) {
      curArg++;
      break;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (uidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      uidSpecified=true;
      uid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      gidSpecified=true;
      gid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (targetSdkVersionSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      targetSdkVersionSpecified=true;
      targetSdkVersion=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      seenRuntimeArgs=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (seInfoSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      seInfoSpecified=true;
      seInfo=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (capabilitiesSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      capabilitiesSpecified=true;
      String capString=arg.substring(arg.indexOf('=') + 1);
      String[] capStrings=capString.split(""String_Node_Str"",2);
      if (capStrings.length == 1) {
        effectiveCapabilities=Long.decode(capStrings[0]);
        permittedCapabilities=effectiveCapabilities;
      }
 else {
        permittedCapabilities=Long.decode(capStrings[0]);
        effectiveCapabilities=Long.decode(capStrings[1]);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      String[] limitStrings=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      if (limitStrings.length != 3) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int[] rlimitTuple=new int[limitStrings.length];
      for (int i=0; i < limitStrings.length; i++) {
        rlimitTuple[i]=Integer.parseInt(limitStrings[i]);
      }
      if (rlimits == null) {
        rlimits=new ArrayList();
      }
      rlimits.add(rlimitTuple);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gids != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String[] params=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      gids=new int[params.length];
      for (int i=params.length - 1; i >= 0; i--) {
        gids[i]=Integer.parseInt(params[i]);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
      if (invokeWith != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      try {
        invokeWith=args[++curArg];
      }
 catch (      IndexOutOfBoundsException ex) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (niceName != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      niceName=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      abiListQuery=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      instructionSet=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      appDataDir=arg.substring(arg.indexOf('=') + 1);
    }
 else {
      break;
    }
  }
  if (abiListQuery) {
    if (args.length - curArg > 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    if (!seenRuntimeArgs) {
      throw new IllegalArgumentException(""String_Node_Str"" + args[curArg]);
    }
    remainingArgs=new String[args.length - curArg];
    System.arraycopy(args,curArg,remainingArgs,0,remainingArgs.length);
  }
}",0.9817496528466574
195525,"/** 
 * Parses the commandline arguments intended for the Zygote spawner (such as ""--setuid="" and ""--setgid="") and creates an array containing the remaining args. Per security review bug #1112214, duplicate args are disallowed in critical cases to make injection harder.
 */
private void parseArgs(String args[]) throws IllegalArgumentException {
  int curArg=0;
  boolean seenRuntimeArgs=true;
  for (; curArg < args.length; curArg++) {
    String arg=args[curArg];
    if (arg.equals(""String_Node_Str"")) {
      curArg++;
      break;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (uidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      uidSpecified=true;
      uid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      gidSpecified=true;
      gid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (targetSdkVersionSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      targetSdkVersionSpecified=true;
      targetSdkVersion=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      seenRuntimeArgs=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (seInfoSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      seInfoSpecified=true;
      seInfo=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (capabilitiesSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      capabilitiesSpecified=true;
      String capString=arg.substring(arg.indexOf('=') + 1);
      String[] capStrings=capString.split(""String_Node_Str"",2);
      if (capStrings.length == 1) {
        effectiveCapabilities=Long.decode(capStrings[0]);
        permittedCapabilities=effectiveCapabilities;
      }
 else {
        permittedCapabilities=Long.decode(capStrings[0]);
        effectiveCapabilities=Long.decode(capStrings[1]);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      String[] limitStrings=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      if (limitStrings.length != 3) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int[] rlimitTuple=new int[limitStrings.length];
      for (int i=0; i < limitStrings.length; i++) {
        rlimitTuple[i]=Integer.parseInt(limitStrings[i]);
      }
      if (rlimits == null) {
        rlimits=new ArrayList();
      }
      rlimits.add(rlimitTuple);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gids != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String[] params=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      gids=new int[params.length];
      for (int i=params.length - 1; i >= 0; i--) {
        gids[i]=Integer.parseInt(params[i]);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
      if (invokeWith != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      try {
        invokeWith=args[++curArg];
      }
 catch (      IndexOutOfBoundsException ex) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (niceName != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      niceName=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      abiListQuery=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      instructionSet=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      appDataDir=arg.substring(arg.indexOf('=') + 1);
    }
 else {
      break;
    }
  }
  if (!seenRuntimeArgs) {
    throw new IllegalArgumentException(""String_Node_Str"" + args[curArg]);
  }
  remainingArgs=new String[args.length - curArg];
  System.arraycopy(args,curArg,remainingArgs,0,remainingArgs.length);
}","/** 
 * Parses the commandline arguments intended for the Zygote spawner (such as ""--setuid="" and ""--setgid="") and creates an array containing the remaining args. Per security review bug #1112214, duplicate args are disallowed in critical cases to make injection harder.
 */
private void parseArgs(String args[]) throws IllegalArgumentException {
  int curArg=0;
  boolean seenRuntimeArgs=false;
  for (; curArg < args.length; curArg++) {
    String arg=args[curArg];
    if (arg.equals(""String_Node_Str"")) {
      curArg++;
      break;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (uidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      uidSpecified=true;
      uid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gidSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      gidSpecified=true;
      gid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (targetSdkVersionSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      targetSdkVersionSpecified=true;
      targetSdkVersion=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      seenRuntimeArgs=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (seInfoSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      seInfoSpecified=true;
      seInfo=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (capabilitiesSpecified) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      capabilitiesSpecified=true;
      String capString=arg.substring(arg.indexOf('=') + 1);
      String[] capStrings=capString.split(""String_Node_Str"",2);
      if (capStrings.length == 1) {
        effectiveCapabilities=Long.decode(capStrings[0]);
        permittedCapabilities=effectiveCapabilities;
      }
 else {
        permittedCapabilities=Long.decode(capStrings[0]);
        effectiveCapabilities=Long.decode(capStrings[1]);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      String[] limitStrings=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      if (limitStrings.length != 3) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int[] rlimitTuple=new int[limitStrings.length];
      for (int i=0; i < limitStrings.length; i++) {
        rlimitTuple[i]=Integer.parseInt(limitStrings[i]);
      }
      if (rlimits == null) {
        rlimits=new ArrayList();
      }
      rlimits.add(rlimitTuple);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (gids != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String[] params=arg.substring(arg.indexOf('=') + 1).split(""String_Node_Str"");
      gids=new int[params.length];
      for (int i=params.length - 1; i >= 0; i--) {
        gids[i]=Integer.parseInt(params[i]);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
      if (invokeWith != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      try {
        invokeWith=args[++curArg];
      }
 catch (      IndexOutOfBoundsException ex) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (niceName != null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      niceName=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
    }
 else     if (arg.equals(""String_Node_Str"")) {
      abiListQuery=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      instructionSet=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      appDataDir=arg.substring(arg.indexOf('=') + 1);
    }
 else {
      break;
    }
  }
  if (abiListQuery) {
    if (args.length - curArg > 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    if (!seenRuntimeArgs) {
      throw new IllegalArgumentException(""String_Node_Str"" + args[curArg]);
    }
    remainingArgs=new String[args.length - curArg];
    System.arraycopy(args,curArg,remainingArgs,0,remainingArgs.length);
  }
}",0.9817496528466574
195526,"private void drawHardwareAccelerated(Canvas canvas,Layout layout,Path highlight,Paint highlightPaint,int cursorOffsetVertical){
  final long lineRange=layout.getLineRangeForDraw(canvas);
  int firstLine=TextUtils.unpackRangeStartFromLong(lineRange);
  int lastLine=TextUtils.unpackRangeEndFromLong(lineRange);
  if (lastLine < 0)   return;
  layout.drawBackground(canvas,highlight,highlightPaint,cursorOffsetVertical,firstLine,lastLine);
  if (layout instanceof DynamicLayout) {
    if (mTextDisplayLists == null) {
      mTextDisplayLists=ArrayUtils.emptyArray(TextDisplayList.class);
    }
    DynamicLayout dynamicLayout=(DynamicLayout)layout;
    int[] blockEndLines=dynamicLayout.getBlockEndLines();
    int[] blockIndices=dynamicLayout.getBlockIndices();
    final int numberOfBlocks=dynamicLayout.getNumberOfBlocks();
    final int indexFirstChangedBlock=dynamicLayout.getIndexFirstChangedBlock();
    int endOfPreviousBlock=-1;
    int searchStartIndex=0;
    for (int i=0; i < numberOfBlocks; i++) {
      int blockEndLine=blockEndLines[i];
      int blockIndex=blockIndices[i];
      final boolean blockIsInvalid=blockIndex == DynamicLayout.INVALID_BLOCK_INDEX;
      if (blockIsInvalid) {
        blockIndex=getAvailableDisplayListIndex(blockIndices,numberOfBlocks,searchStartIndex);
        blockIndices[i]=blockIndex;
        searchStartIndex=blockIndex + 1;
      }
      if (mTextDisplayLists[blockIndex] == null) {
        mTextDisplayLists[blockIndex]=new TextDisplayList(""String_Node_Str"" + blockIndex);
      }
      final boolean blockDisplayListIsInvalid=mTextDisplayLists[blockIndex].needsRecord();
      RenderNode blockDisplayList=mTextDisplayLists[blockIndex].displayList;
      if (i >= indexFirstChangedBlock || blockDisplayListIsInvalid) {
        final int blockBeginLine=endOfPreviousBlock + 1;
        final int top=layout.getLineTop(blockBeginLine);
        final int bottom=layout.getLineBottom(blockEndLine);
        int left=0;
        int right=mTextView.getWidth();
        if (mTextView.getHorizontallyScrolling()) {
          float min=Float.MAX_VALUE;
          float max=Float.MIN_VALUE;
          for (int line=blockBeginLine; line <= blockEndLine; line++) {
            min=Math.min(min,layout.getLineLeft(line));
            max=Math.max(max,layout.getLineRight(line));
          }
          left=(int)min;
          right=(int)(max + 0.5f);
        }
        if (blockDisplayListIsInvalid) {
          final HardwareCanvas hardwareCanvas=blockDisplayList.start(right - left,bottom - top);
          try {
            hardwareCanvas.translate(-left,-top);
            layout.drawText(hardwareCanvas,blockBeginLine,blockEndLine);
          }
  finally {
            blockDisplayList.end(hardwareCanvas);
            blockDisplayList.setClipToBounds(false);
          }
        }
        blockDisplayList.setLeftTopRightBottom(left,top,right,bottom);
      }
      ((HardwareCanvas)canvas).drawRenderNode(blockDisplayList,0);
      endOfPreviousBlock=blockEndLine;
    }
    dynamicLayout.setIndexFirstChangedBlock(numberOfBlocks);
  }
 else {
    layout.drawText(canvas,firstLine,lastLine);
  }
}","private void drawHardwareAccelerated(Canvas canvas,Layout layout,Path highlight,Paint highlightPaint,int cursorOffsetVertical){
  final long lineRange=layout.getLineRangeForDraw(canvas);
  int firstLine=TextUtils.unpackRangeStartFromLong(lineRange);
  int lastLine=TextUtils.unpackRangeEndFromLong(lineRange);
  if (lastLine < 0)   return;
  layout.drawBackground(canvas,highlight,highlightPaint,cursorOffsetVertical,firstLine,lastLine);
  if (layout instanceof DynamicLayout) {
    if (mTextDisplayLists == null) {
      mTextDisplayLists=ArrayUtils.emptyArray(TextDisplayList.class);
    }
    DynamicLayout dynamicLayout=(DynamicLayout)layout;
    int[] blockEndLines=dynamicLayout.getBlockEndLines();
    int[] blockIndices=dynamicLayout.getBlockIndices();
    final int numberOfBlocks=dynamicLayout.getNumberOfBlocks();
    final int indexFirstChangedBlock=dynamicLayout.getIndexFirstChangedBlock();
    int endOfPreviousBlock=-1;
    int searchStartIndex=0;
    for (int i=0; i < numberOfBlocks; i++) {
      int blockEndLine=blockEndLines[i];
      int blockIndex=blockIndices[i];
      final boolean blockIsInvalid=blockIndex == DynamicLayout.INVALID_BLOCK_INDEX;
      if (blockIsInvalid) {
        blockIndex=getAvailableDisplayListIndex(blockIndices,numberOfBlocks,searchStartIndex);
        blockIndices[i]=blockIndex;
        if (mTextDisplayLists[blockIndex] != null) {
          mTextDisplayLists[blockIndex].isDirty=true;
        }
        searchStartIndex=blockIndex + 1;
      }
      if (mTextDisplayLists[blockIndex] == null) {
        mTextDisplayLists[blockIndex]=new TextDisplayList(""String_Node_Str"" + blockIndex);
      }
      final boolean blockDisplayListIsInvalid=mTextDisplayLists[blockIndex].needsRecord();
      RenderNode blockDisplayList=mTextDisplayLists[blockIndex].displayList;
      if (i >= indexFirstChangedBlock || blockDisplayListIsInvalid) {
        final int blockBeginLine=endOfPreviousBlock + 1;
        final int top=layout.getLineTop(blockBeginLine);
        final int bottom=layout.getLineBottom(blockEndLine);
        int left=0;
        int right=mTextView.getWidth();
        if (mTextView.getHorizontallyScrolling()) {
          float min=Float.MAX_VALUE;
          float max=Float.MIN_VALUE;
          for (int line=blockBeginLine; line <= blockEndLine; line++) {
            min=Math.min(min,layout.getLineLeft(line));
            max=Math.max(max,layout.getLineRight(line));
          }
          left=(int)min;
          right=(int)(max + 0.5f);
        }
        if (blockDisplayListIsInvalid) {
          final HardwareCanvas hardwareCanvas=blockDisplayList.start(right - left,bottom - top);
          try {
            hardwareCanvas.translate(-left,-top);
            layout.drawText(hardwareCanvas,blockBeginLine,blockEndLine);
            mTextDisplayLists[blockIndex].isDirty=false;
          }
  finally {
            blockDisplayList.end(hardwareCanvas);
            blockDisplayList.setClipToBounds(false);
          }
        }
        blockDisplayList.setLeftTopRightBottom(left,top,right,bottom);
      }
      ((HardwareCanvas)canvas).drawRenderNode(blockDisplayList,0);
      endOfPreviousBlock=blockEndLine;
    }
    dynamicLayout.setIndexFirstChangedBlock(numberOfBlocks);
  }
 else {
    layout.drawText(canvas,firstLine,lastLine);
  }
}",0.9730316181029138
195527,"private void drawHardwareAccelerated(Canvas canvas,Layout layout,Path highlight,Paint highlightPaint,int cursorOffsetVertical){
  final long lineRange=layout.getLineRangeForDraw(canvas);
  int firstLine=TextUtils.unpackRangeStartFromLong(lineRange);
  int lastLine=TextUtils.unpackRangeEndFromLong(lineRange);
  if (lastLine < 0)   return;
  layout.drawBackground(canvas,highlight,highlightPaint,cursorOffsetVertical,firstLine,lastLine);
  if (layout instanceof DynamicLayout) {
    if (mTextDisplayLists == null) {
      mTextDisplayLists=ArrayUtils.emptyArray(TextDisplayList.class);
    }
    DynamicLayout dynamicLayout=(DynamicLayout)layout;
    int[] blockEndLines=dynamicLayout.getBlockEndLines();
    int[] blockIndices=dynamicLayout.getBlockIndices();
    final int numberOfBlocks=dynamicLayout.getNumberOfBlocks();
    final int indexFirstChangedBlock=dynamicLayout.getIndexFirstChangedBlock();
    int endOfPreviousBlock=-1;
    int searchStartIndex=0;
    for (int i=0; i < numberOfBlocks; i++) {
      int blockEndLine=blockEndLines[i];
      int blockIndex=blockIndices[i];
      final boolean blockIsInvalid=blockIndex == DynamicLayout.INVALID_BLOCK_INDEX;
      if (blockIsInvalid) {
        blockIndex=getAvailableDisplayListIndex(blockIndices,numberOfBlocks,searchStartIndex);
        blockIndices[i]=blockIndex;
        searchStartIndex=blockIndex + 1;
      }
      if (mTextDisplayLists[blockIndex] == null) {
        mTextDisplayLists[blockIndex]=new TextDisplayList(""String_Node_Str"" + blockIndex);
      }
      final boolean blockDisplayListIsInvalid=mTextDisplayLists[blockIndex].needsRecord();
      RenderNode blockDisplayList=mTextDisplayLists[blockIndex].displayList;
      if (i >= indexFirstChangedBlock || blockDisplayListIsInvalid) {
        final int blockBeginLine=endOfPreviousBlock + 1;
        final int top=layout.getLineTop(blockBeginLine);
        final int bottom=layout.getLineBottom(blockEndLine);
        int left=0;
        int right=mTextView.getWidth();
        if (mTextView.getHorizontallyScrolling()) {
          float min=Float.MAX_VALUE;
          float max=Float.MIN_VALUE;
          for (int line=blockBeginLine; line <= blockEndLine; line++) {
            min=Math.min(min,layout.getLineLeft(line));
            max=Math.max(max,layout.getLineRight(line));
          }
          left=(int)min;
          right=(int)(max + 0.5f);
        }
        if (blockDisplayListIsInvalid) {
          final HardwareCanvas hardwareCanvas=blockDisplayList.start(right - left,bottom - top);
          try {
            hardwareCanvas.translate(-left,-top);
            layout.drawText(hardwareCanvas,blockBeginLine,blockEndLine);
          }
  finally {
            blockDisplayList.end(hardwareCanvas);
            blockDisplayList.setClipToBounds(false);
          }
        }
        blockDisplayList.setLeftTopRightBottom(left,top,right,bottom);
      }
      ((HardwareCanvas)canvas).drawRenderNode(blockDisplayList,0);
      endOfPreviousBlock=blockEndLine;
    }
    dynamicLayout.setIndexFirstChangedBlock(numberOfBlocks);
  }
 else {
    layout.drawText(canvas,firstLine,lastLine);
  }
}","private void drawHardwareAccelerated(Canvas canvas,Layout layout,Path highlight,Paint highlightPaint,int cursorOffsetVertical){
  final long lineRange=layout.getLineRangeForDraw(canvas);
  int firstLine=TextUtils.unpackRangeStartFromLong(lineRange);
  int lastLine=TextUtils.unpackRangeEndFromLong(lineRange);
  if (lastLine < 0)   return;
  layout.drawBackground(canvas,highlight,highlightPaint,cursorOffsetVertical,firstLine,lastLine);
  if (layout instanceof DynamicLayout) {
    if (mTextDisplayLists == null) {
      mTextDisplayLists=ArrayUtils.emptyArray(TextDisplayList.class);
    }
    DynamicLayout dynamicLayout=(DynamicLayout)layout;
    int[] blockEndLines=dynamicLayout.getBlockEndLines();
    int[] blockIndices=dynamicLayout.getBlockIndices();
    final int numberOfBlocks=dynamicLayout.getNumberOfBlocks();
    final int indexFirstChangedBlock=dynamicLayout.getIndexFirstChangedBlock();
    int endOfPreviousBlock=-1;
    int searchStartIndex=0;
    for (int i=0; i < numberOfBlocks; i++) {
      int blockEndLine=blockEndLines[i];
      int blockIndex=blockIndices[i];
      final boolean blockIsInvalid=blockIndex == DynamicLayout.INVALID_BLOCK_INDEX;
      if (blockIsInvalid) {
        blockIndex=getAvailableDisplayListIndex(blockIndices,numberOfBlocks,searchStartIndex);
        blockIndices[i]=blockIndex;
        if (mTextDisplayLists[blockIndex] != null) {
          mTextDisplayLists[blockIndex].isDirty=true;
        }
        searchStartIndex=blockIndex + 1;
      }
      if (mTextDisplayLists[blockIndex] == null) {
        mTextDisplayLists[blockIndex]=new TextDisplayList(""String_Node_Str"" + blockIndex);
      }
      final boolean blockDisplayListIsInvalid=mTextDisplayLists[blockIndex].needsRecord();
      RenderNode blockDisplayList=mTextDisplayLists[blockIndex].displayList;
      if (i >= indexFirstChangedBlock || blockDisplayListIsInvalid) {
        final int blockBeginLine=endOfPreviousBlock + 1;
        final int top=layout.getLineTop(blockBeginLine);
        final int bottom=layout.getLineBottom(blockEndLine);
        int left=0;
        int right=mTextView.getWidth();
        if (mTextView.getHorizontallyScrolling()) {
          float min=Float.MAX_VALUE;
          float max=Float.MIN_VALUE;
          for (int line=blockBeginLine; line <= blockEndLine; line++) {
            min=Math.min(min,layout.getLineLeft(line));
            max=Math.max(max,layout.getLineRight(line));
          }
          left=(int)min;
          right=(int)(max + 0.5f);
        }
        if (blockDisplayListIsInvalid) {
          final HardwareCanvas hardwareCanvas=blockDisplayList.start(right - left,bottom - top);
          try {
            hardwareCanvas.translate(-left,-top);
            layout.drawText(hardwareCanvas,blockBeginLine,blockEndLine);
            mTextDisplayLists[blockIndex].isDirty=false;
          }
  finally {
            blockDisplayList.end(hardwareCanvas);
            blockDisplayList.setClipToBounds(false);
          }
        }
        blockDisplayList.setLeftTopRightBottom(left,top,right,bottom);
      }
      ((HardwareCanvas)canvas).drawRenderNode(blockDisplayList,0);
      endOfPreviousBlock=blockEndLine;
    }
    dynamicLayout.setIndexFirstChangedBlock(numberOfBlocks);
  }
 else {
    layout.drawText(canvas,firstLine,lastLine);
  }
}",0.9730316181029138
195528,"private void runStackSplit() throws Exception {
  final int stackId=Integer.valueOf(nextArgRequired());
  final String splitDirection=nextArgRequired();
  Intent intent=null;
  try {
    intent=makeIntent(UserHandle.USER_CURRENT);
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    final StackInfo currentStackInfo=mAm.getStackInfo(stackId);
    final Rect currentStackBounds=new Rect(currentStackInfo.bounds);
    final Rect newStackBounds=new Rect(currentStackInfo.bounds);
    if (""String_Node_Str"".equals(splitDirection)) {
      currentStackBounds.right=newStackBounds.left=currentStackInfo.bounds.centerX();
    }
 else     if (""String_Node_Str"".equals(splitDirection)) {
      currentStackBounds.bottom=newStackBounds.top=currentStackInfo.bounds.centerY();
    }
 else {
      showError(""String_Node_Str"" + splitDirection + ""String_Node_Str"");
      return;
    }
    IActivityContainer container=mAm.createStackOnDisplay(currentStackInfo.displayId);
    if (container == null) {
      showError(""String_Node_Str"");
    }
    final StackInfo newStackInfo=mAm.getStackInfo(container.getStackId());
    if (intent != null) {
      container.startActivity(intent);
    }
 else     if (currentStackInfo.taskIds != null && currentStackInfo.taskIds.length > 1) {
      mAm.moveTaskToStack(currentStackInfo.taskIds[currentStackInfo.taskIds.length - 1],newStackInfo.stackId,true);
    }
    for (    int taskId : currentStackInfo.taskIds) {
      mAm.setTaskResizeable(taskId,true);
    }
    for (    int taskId : newStackInfo.taskIds) {
      mAm.setTaskResizeable(taskId,true);
    }
    mAm.resizeStack(currentStackInfo.stackId,currentStackBounds);
    mAm.resizeStack(newStackInfo.stackId,newStackBounds);
  }
 catch (  RemoteException e) {
  }
}","private void runStackSplit() throws Exception {
  final int stackId=Integer.valueOf(nextArgRequired());
  final String splitDirection=nextArgRequired();
  Intent intent=null;
  try {
    intent=makeIntent(UserHandle.USER_CURRENT);
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    final StackInfo currentStackInfo=mAm.getStackInfo(stackId);
    final Rect currentStackBounds=new Rect(currentStackInfo.bounds);
    final Rect newStackBounds=new Rect(currentStackInfo.bounds);
    if (""String_Node_Str"".equals(splitDirection)) {
      currentStackBounds.right=newStackBounds.left=currentStackInfo.bounds.centerX();
    }
 else     if (""String_Node_Str"".equals(splitDirection)) {
      currentStackBounds.bottom=newStackBounds.top=currentStackInfo.bounds.centerY();
    }
 else {
      showError(""String_Node_Str"" + splitDirection + ""String_Node_Str"");
      return;
    }
    IActivityContainer container=mAm.createStackOnDisplay(currentStackInfo.displayId);
    if (container == null) {
      showError(""String_Node_Str"");
    }
    final int newStackId=container.getStackId();
    if (intent != null) {
      container.startActivity(intent);
    }
 else     if (currentStackInfo.taskIds != null && currentStackInfo.taskIds.length > 1) {
      mAm.moveTaskToStack(currentStackInfo.taskIds[currentStackInfo.taskIds.length - 1],newStackId,true);
    }
    final StackInfo newStackInfo=mAm.getStackInfo(newStackId);
    for (    int taskId : currentStackInfo.taskIds) {
      mAm.setTaskResizeable(taskId,true);
    }
    for (    int taskId : newStackInfo.taskIds) {
      mAm.setTaskResizeable(taskId,true);
    }
    mAm.resizeStack(currentStackInfo.stackId,currentStackBounds);
    mAm.resizeStack(newStackInfo.stackId,newStackBounds);
  }
 catch (  RemoteException e) {
  }
}",0.96361071932299
195529,"/** 
 * Has the given user chosen to allow their private (full) notifications to be shown even when the lockscreen is in ""public"" (secure & locked) mode?
 */
public boolean userAllowsPrivateNotificationsInPublic(int userHandle){
  if (userHandle == UserHandle.USER_ALL) {
    return true;
  }
  if (mUsersAllowingPrivateNotifications.indexOfKey(userHandle) < 0) {
    final boolean allowed=0 != Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.LOCK_SCREEN_ALLOW_PRIVATE_NOTIFICATIONS,0,userHandle);
    final int dpmFlags=mDevicePolicyManager.getKeyguardDisabledFeatures(null,userHandle);
    final boolean allowedByDpm=(dpmFlags & DevicePolicyManager.KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS) == 0;
    mUsersAllowingPrivateNotifications.append(userHandle,allowed && allowedByDpm);
    return allowed;
  }
  return mUsersAllowingPrivateNotifications.get(userHandle);
}","/** 
 * Has the given user chosen to allow their private (full) notifications to be shown even when the lockscreen is in ""public"" (secure & locked) mode?
 */
public boolean userAllowsPrivateNotificationsInPublic(int userHandle){
  if (userHandle == UserHandle.USER_ALL) {
    return true;
  }
  if (mUsersAllowingPrivateNotifications.indexOfKey(userHandle) < 0) {
    final boolean allowedByUser=0 != Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.LOCK_SCREEN_ALLOW_PRIVATE_NOTIFICATIONS,0,userHandle);
    final int dpmFlags=mDevicePolicyManager.getKeyguardDisabledFeatures(null,userHandle);
    final boolean allowedByDpm=(dpmFlags & DevicePolicyManager.KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS) == 0;
    final boolean allowed=allowedByUser && allowedByDpm;
    mUsersAllowingPrivateNotifications.append(userHandle,allowed);
    return allowed;
  }
  return mUsersAllowingPrivateNotifications.get(userHandle);
}",0.8777838131450298
195530,"/** 
 * Has the given user chosen to allow their private (full) notifications to be shown even when the lockscreen is in ""public"" (secure & locked) mode?
 */
public boolean userAllowsPrivateNotificationsInPublic(int userHandle){
  if (userHandle == UserHandle.USER_ALL) {
    return true;
  }
  if (mUsersAllowingPrivateNotifications.indexOfKey(userHandle) < 0) {
    final boolean allowed=0 != Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.LOCK_SCREEN_ALLOW_PRIVATE_NOTIFICATIONS,0,userHandle);
    final int dpmFlags=mDevicePolicyManager.getKeyguardDisabledFeatures(null,userHandle);
    final boolean allowedByDpm=(dpmFlags & DevicePolicyManager.KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS) == 0;
    mUsersAllowingPrivateNotifications.append(userHandle,allowed && allowedByDpm);
    return allowed;
  }
  return mUsersAllowingPrivateNotifications.get(userHandle);
}","/** 
 * Has the given user chosen to allow their private (full) notifications to be shown even when the lockscreen is in ""public"" (secure & locked) mode?
 */
public boolean userAllowsPrivateNotificationsInPublic(int userHandle){
  if (userHandle == UserHandle.USER_ALL) {
    return true;
  }
  if (mUsersAllowingPrivateNotifications.indexOfKey(userHandle) < 0) {
    final boolean allowedByUser=0 != Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.LOCK_SCREEN_ALLOW_PRIVATE_NOTIFICATIONS,0,userHandle);
    final int dpmFlags=mDevicePolicyManager.getKeyguardDisabledFeatures(null,userHandle);
    final boolean allowedByDpm=(dpmFlags & DevicePolicyManager.KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS) == 0;
    final boolean allowed=allowedByUser && allowedByDpm;
    mUsersAllowingPrivateNotifications.append(userHandle,allowed);
    return allowed;
  }
  return mUsersAllowingPrivateNotifications.get(userHandle);
}",0.8777838131450298
195531,"void resizeWindows(){
  final boolean underStatusBar=mBounds.top == 0;
  final ArrayList<WindowState> resizingWindows=mService.mResizingWindows;
  for (int taskNdx=mTasks.size() - 1; taskNdx >= 0; --taskNdx) {
    final ArrayList<AppWindowToken> activities=mTasks.get(taskNdx).mAppTokens;
    for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
      final ArrayList<WindowState> windows=activities.get(activityNdx).allAppWindows;
      for (int winNdx=windows.size() - 1; winNdx >= 0; --winNdx) {
        final WindowState win=windows.get(winNdx);
        if (!resizingWindows.contains(win)) {
          if (WindowManagerService.DEBUG_RESIZE)           Slog.d(TAG,""String_Node_Str"" + win);
          resizingWindows.add(win);
        }
        win.mUnderStatusBar=underStatusBar;
      }
    }
  }
}","void resizeWindows(){
  final ArrayList<WindowState> resizingWindows=mService.mResizingWindows;
  for (int taskNdx=mTasks.size() - 1; taskNdx >= 0; --taskNdx) {
    final ArrayList<AppWindowToken> activities=mTasks.get(taskNdx).mAppTokens;
    for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
      final ArrayList<WindowState> windows=activities.get(activityNdx).allAppWindows;
      for (int winNdx=windows.size() - 1; winNdx >= 0; --winNdx) {
        final WindowState win=windows.get(winNdx);
        if (!resizingWindows.contains(win)) {
          if (WindowManagerService.DEBUG_RESIZE)           Slog.d(TAG,""String_Node_Str"" + win);
          resizingWindows.add(win);
        }
      }
    }
  }
}",0.940422805893658
195532,"/** 
 * Set the stack bounds. Passing in null sets the bounds to fullscreen. 
 */
boolean setBounds(Rect bounds){
  boolean oldFullscreen=mFullscreen;
  if (mDisplayContent != null) {
    mDisplayContent.getLogicalDisplayRect(mTmpRect);
    if (bounds == null) {
      bounds=mTmpRect;
      mFullscreen=true;
    }
 else {
      bounds.intersect(mTmpRect);
      mFullscreen=mTmpRect.equals(bounds);
    }
  }
  if (bounds == null) {
    return false;
  }
  if (mBounds.equals(bounds) && oldFullscreen == mFullscreen) {
    return false;
  }
  mDimLayer.setBounds(bounds);
  mAnimationBackgroundSurface.setBounds(bounds);
  mBounds.set(bounds);
  updateOverrideConfiguration();
  return true;
}","/** 
 * Set the stack bounds. Passing in null sets the bounds to fullscreen. 
 */
boolean setBounds(Rect bounds){
  boolean oldFullscreen=mFullscreen;
  if (mDisplayContent != null) {
    mDisplayContent.getLogicalDisplayRect(mTmpRect);
    if (bounds == null) {
      bounds=mTmpRect;
      mFullscreen=true;
    }
 else {
      bounds.intersect(mTmpRect);
      mFullscreen=mTmpRect.equals(bounds);
    }
  }
  if (bounds == null) {
    return false;
  }
  if (mBounds.equals(bounds) && oldFullscreen == mFullscreen) {
    return false;
  }
  mDimLayer.setBounds(bounds);
  mAnimationBackgroundSurface.setBounds(bounds);
  mBounds.set(bounds);
  mUnderStatusBar=(mBounds.top == 0);
  updateOverrideConfiguration();
  return true;
}",0.9733893557422968
195533,"TaskStack(WindowManagerService service,int stackId){
  mService=service;
  mStackId=stackId;
  mOverrideConfig=Configuration.EMPTY;
  mForceFullscreen=false;
  mPreForceFullscreenBounds=new Rect();
  EventLog.writeEvent(EventLogTags.WM_STACK_CREATED,stackId,mBounds.left,mBounds.top,mBounds.right,mBounds.bottom);
}","TaskStack(WindowManagerService service,int stackId){
  mService=service;
  mStackId=stackId;
  mOverrideConfig=Configuration.EMPTY;
  mForceFullscreen=false;
  mPreForceFullscreenBounds=new Rect();
  mUnderStatusBar=true;
  EventLog.writeEvent(EventLogTags.WM_STACK_CREATED,stackId,mBounds.left,mBounds.top,mBounds.right,mBounds.bottom);
}",0.963302752293578
195534,"@Override public void computeFrameLw(Rect pf,Rect df,Rect of,Rect cf,Rect vf,Rect dcf,Rect sf){
  mHaveFrame=true;
  TaskStack stack=mAppToken != null ? getStack() : null;
  if (stack != null && !stack.isFullscreen()) {
    getStackBounds(stack,mContainingFrame);
    if (mUnderStatusBar) {
      mContainingFrame.top=pf.top;
    }
  }
 else {
    mContainingFrame.set(pf);
  }
  mDisplayFrame.set(df);
  final int pw=mContainingFrame.width();
  final int ph=mContainingFrame.height();
  int w, h;
  if ((mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0) {
    if (mAttrs.width < 0) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mAttrs.width * mGlobalScale + .5f);
    }
 else {
      w=mAttrs.width;
    }
    if (mAttrs.height < 0) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mAttrs.height * mGlobalScale + .5f);
    }
 else {
      h=mAttrs.height;
    }
  }
 else {
    if (mAttrs.width == WindowManager.LayoutParams.MATCH_PARENT) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mRequestedWidth * mGlobalScale + .5f);
    }
 else {
      w=mRequestedWidth;
    }
    if (mAttrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mRequestedHeight * mGlobalScale + .5f);
    }
 else {
      h=mRequestedHeight;
    }
  }
  if (!mParentFrame.equals(pf)) {
    mParentFrame.set(pf);
    mContentChanged=true;
  }
  if (mRequestedWidth != mLastRequestedWidth || mRequestedHeight != mLastRequestedHeight) {
    mLastRequestedWidth=mRequestedWidth;
    mLastRequestedHeight=mRequestedHeight;
    mContentChanged=true;
  }
  mOverscanFrame.set(of);
  mContentFrame.set(cf);
  mVisibleFrame.set(vf);
  mDecorFrame.set(dcf);
  mStableFrame.set(sf);
  final int fw=mFrame.width();
  final int fh=mFrame.height();
  float x, y;
  if (mEnforceSizeCompat) {
    x=mAttrs.x * mGlobalScale;
    y=mAttrs.y * mGlobalScale;
  }
 else {
    x=mAttrs.x;
    y=mAttrs.y;
  }
  Gravity.apply(mAttrs.gravity,w,h,mContainingFrame,(int)(x + mAttrs.horizontalMargin * pw),(int)(y + mAttrs.verticalMargin * ph),mFrame);
  Gravity.applyDisplay(mAttrs.gravity,df,mFrame);
  mContentFrame.set(Math.max(mContentFrame.left,mFrame.left),Math.max(mContentFrame.top,mFrame.top),Math.min(mContentFrame.right,mFrame.right),Math.min(mContentFrame.bottom,mFrame.bottom));
  mVisibleFrame.set(Math.max(mVisibleFrame.left,mFrame.left),Math.max(mVisibleFrame.top,mFrame.top),Math.min(mVisibleFrame.right,mFrame.right),Math.min(mVisibleFrame.bottom,mFrame.bottom));
  mStableFrame.set(Math.max(mStableFrame.left,mFrame.left),Math.max(mStableFrame.top,mFrame.top),Math.min(mStableFrame.right,mFrame.right),Math.min(mStableFrame.bottom,mFrame.bottom));
  mOverscanInsets.set(Math.max(mOverscanFrame.left - mFrame.left,0),Math.max(mOverscanFrame.top - mFrame.top,0),Math.max(mFrame.right - mOverscanFrame.right,0),Math.max(mFrame.bottom - mOverscanFrame.bottom,0));
  mContentInsets.set(mContentFrame.left - mFrame.left,mContentFrame.top - mFrame.top,mFrame.right - mContentFrame.right,mFrame.bottom - mContentFrame.bottom);
  mVisibleInsets.set(mVisibleFrame.left - mFrame.left,mVisibleFrame.top - mFrame.top,mFrame.right - mVisibleFrame.right,mFrame.bottom - mVisibleFrame.bottom);
  mStableInsets.set(Math.max(mStableFrame.left - mFrame.left,0),Math.max(mStableFrame.top - mFrame.top,0),Math.max(mFrame.right - mStableFrame.right,0),Math.max(mFrame.bottom - mStableFrame.bottom,0));
  mCompatFrame.set(mFrame);
  if (mEnforceSizeCompat) {
    mOverscanInsets.scale(mInvGlobalScale);
    mContentInsets.scale(mInvGlobalScale);
    mVisibleInsets.scale(mInvGlobalScale);
    mStableInsets.scale(mInvGlobalScale);
    mCompatFrame.scale(mInvGlobalScale);
  }
  if (mIsWallpaper && (fw != mFrame.width() || fh != mFrame.height())) {
    final DisplayContent displayContent=getDisplayContent();
    if (displayContent != null) {
      final DisplayInfo displayInfo=displayContent.getDisplayInfo();
      mService.updateWallpaperOffsetLocked(this,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
  }
  if (DEBUG_LAYOUT || WindowManagerService.localLOGV)   Slog.v(TAG,""String_Node_Str"" + mRequestedWidth + ""String_Node_Str""+ mRequestedHeight+ ""String_Node_Str""+ ""String_Node_Str""+ pw+ ""String_Node_Str""+ ph+ ""String_Node_Str""+ mFrame.toShortString()+ ""String_Node_Str""+ mContentInsets.toShortString()+ ""String_Node_Str""+ mVisibleInsets.toShortString()+ ""String_Node_Str""+ mStableInsets.toShortString());
}","@Override public void computeFrameLw(Rect pf,Rect df,Rect of,Rect cf,Rect vf,Rect dcf,Rect sf){
  mHaveFrame=true;
  TaskStack stack=mAppToken != null ? getStack() : null;
  if (stack != null && !stack.isFullscreen()) {
    stack.getBounds(mContainingFrame);
    if (stack.mUnderStatusBar) {
      mContainingFrame.top=pf.top;
    }
  }
 else {
    mContainingFrame.set(pf);
  }
  mDisplayFrame.set(df);
  final int pw=mContainingFrame.width();
  final int ph=mContainingFrame.height();
  int w, h;
  if ((mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0) {
    if (mAttrs.width < 0) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mAttrs.width * mGlobalScale + .5f);
    }
 else {
      w=mAttrs.width;
    }
    if (mAttrs.height < 0) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mAttrs.height * mGlobalScale + .5f);
    }
 else {
      h=mAttrs.height;
    }
  }
 else {
    if (mAttrs.width == WindowManager.LayoutParams.MATCH_PARENT) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mRequestedWidth * mGlobalScale + .5f);
    }
 else {
      w=mRequestedWidth;
    }
    if (mAttrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mRequestedHeight * mGlobalScale + .5f);
    }
 else {
      h=mRequestedHeight;
    }
  }
  if (!mParentFrame.equals(pf)) {
    mParentFrame.set(pf);
    mContentChanged=true;
  }
  if (mRequestedWidth != mLastRequestedWidth || mRequestedHeight != mLastRequestedHeight) {
    mLastRequestedWidth=mRequestedWidth;
    mLastRequestedHeight=mRequestedHeight;
    mContentChanged=true;
  }
  mOverscanFrame.set(of);
  mContentFrame.set(cf);
  mVisibleFrame.set(vf);
  mDecorFrame.set(dcf);
  mStableFrame.set(sf);
  final int fw=mFrame.width();
  final int fh=mFrame.height();
  float x, y;
  if (mEnforceSizeCompat) {
    x=mAttrs.x * mGlobalScale;
    y=mAttrs.y * mGlobalScale;
  }
 else {
    x=mAttrs.x;
    y=mAttrs.y;
  }
  Gravity.apply(mAttrs.gravity,w,h,mContainingFrame,(int)(x + mAttrs.horizontalMargin * pw),(int)(y + mAttrs.verticalMargin * ph),mFrame);
  Gravity.applyDisplay(mAttrs.gravity,df,mFrame);
  mContentFrame.set(Math.max(mContentFrame.left,mFrame.left),Math.max(mContentFrame.top,mFrame.top),Math.min(mContentFrame.right,mFrame.right),Math.min(mContentFrame.bottom,mFrame.bottom));
  mVisibleFrame.set(Math.max(mVisibleFrame.left,mFrame.left),Math.max(mVisibleFrame.top,mFrame.top),Math.min(mVisibleFrame.right,mFrame.right),Math.min(mVisibleFrame.bottom,mFrame.bottom));
  mStableFrame.set(Math.max(mStableFrame.left,mFrame.left),Math.max(mStableFrame.top,mFrame.top),Math.min(mStableFrame.right,mFrame.right),Math.min(mStableFrame.bottom,mFrame.bottom));
  mOverscanInsets.set(Math.max(mOverscanFrame.left - mFrame.left,0),Math.max(mOverscanFrame.top - mFrame.top,0),Math.max(mFrame.right - mOverscanFrame.right,0),Math.max(mFrame.bottom - mOverscanFrame.bottom,0));
  mContentInsets.set(mContentFrame.left - mFrame.left,mContentFrame.top - mFrame.top,mFrame.right - mContentFrame.right,mFrame.bottom - mContentFrame.bottom);
  mVisibleInsets.set(mVisibleFrame.left - mFrame.left,mVisibleFrame.top - mFrame.top,mFrame.right - mVisibleFrame.right,mFrame.bottom - mVisibleFrame.bottom);
  mStableInsets.set(Math.max(mStableFrame.left - mFrame.left,0),Math.max(mStableFrame.top - mFrame.top,0),Math.max(mFrame.right - mStableFrame.right,0),Math.max(mFrame.bottom - mStableFrame.bottom,0));
  mCompatFrame.set(mFrame);
  if (mEnforceSizeCompat) {
    mOverscanInsets.scale(mInvGlobalScale);
    mContentInsets.scale(mInvGlobalScale);
    mVisibleInsets.scale(mInvGlobalScale);
    mStableInsets.scale(mInvGlobalScale);
    mCompatFrame.scale(mInvGlobalScale);
  }
  if (mIsWallpaper && (fw != mFrame.width() || fh != mFrame.height())) {
    final DisplayContent displayContent=getDisplayContent();
    if (displayContent != null) {
      final DisplayInfo displayInfo=displayContent.getDisplayInfo();
      mService.updateWallpaperOffsetLocked(this,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
  }
  if (DEBUG_LAYOUT || WindowManagerService.localLOGV)   Slog.v(TAG,""String_Node_Str"" + mRequestedWidth + ""String_Node_Str""+ mRequestedHeight+ ""String_Node_Str""+ ""String_Node_Str""+ pw+ ""String_Node_Str""+ ph+ ""String_Node_Str""+ mFrame.toShortString()+ ""String_Node_Str""+ mContentInsets.toShortString()+ ""String_Node_Str""+ mVisibleInsets.toShortString()+ ""String_Node_Str""+ mStableInsets.toShortString());
}",0.9928232306503256
195535,"private void getStackBounds(TaskStack stack,Rect bounds){
  if (stack != null) {
    stack.getBounds(bounds);
    return;
  }
  bounds.set(mFrame);
}","void getStackBounds(Rect bounds){
  final TaskStack stack=getStack();
  if (stack != null) {
    stack.getBounds(bounds);
    return;
  }
  bounds.set(mFrame);
}",0.8387096774193549
195536,"void resizeWindows(){
  final boolean underStatusBar=mBounds.top == 0;
  final ArrayList<WindowState> resizingWindows=mService.mResizingWindows;
  for (int taskNdx=mTasks.size() - 1; taskNdx >= 0; --taskNdx) {
    final ArrayList<AppWindowToken> activities=mTasks.get(taskNdx).mAppTokens;
    for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
      final ArrayList<WindowState> windows=activities.get(activityNdx).allAppWindows;
      for (int winNdx=windows.size() - 1; winNdx >= 0; --winNdx) {
        final WindowState win=windows.get(winNdx);
        if (!resizingWindows.contains(win)) {
          if (WindowManagerService.DEBUG_RESIZE)           Slog.d(TAG,""String_Node_Str"" + win);
          resizingWindows.add(win);
        }
        win.mUnderStatusBar=underStatusBar;
      }
    }
  }
}","void resizeWindows(){
  final ArrayList<WindowState> resizingWindows=mService.mResizingWindows;
  for (int taskNdx=mTasks.size() - 1; taskNdx >= 0; --taskNdx) {
    final ArrayList<AppWindowToken> activities=mTasks.get(taskNdx).mAppTokens;
    for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
      final ArrayList<WindowState> windows=activities.get(activityNdx).allAppWindows;
      for (int winNdx=windows.size() - 1; winNdx >= 0; --winNdx) {
        final WindowState win=windows.get(winNdx);
        if (!resizingWindows.contains(win)) {
          if (WindowManagerService.DEBUG_RESIZE)           Slog.d(TAG,""String_Node_Str"" + win);
          resizingWindows.add(win);
        }
      }
    }
  }
}",0.940422805893658
195537,"/** 
 * Set the stack bounds. Passing in null sets the bounds to fullscreen. 
 */
boolean setBounds(Rect bounds){
  boolean oldFullscreen=mFullscreen;
  if (mDisplayContent != null) {
    mDisplayContent.getLogicalDisplayRect(mTmpRect);
    if (bounds == null) {
      bounds=mTmpRect;
      mFullscreen=true;
    }
 else {
      bounds.intersect(mTmpRect);
      mFullscreen=mTmpRect.equals(bounds);
    }
  }
  if (bounds == null) {
    return false;
  }
  if (mBounds.equals(bounds) && oldFullscreen == mFullscreen) {
    return false;
  }
  mDimLayer.setBounds(bounds);
  mAnimationBackgroundSurface.setBounds(bounds);
  mBounds.set(bounds);
  updateOverrideConfiguration();
  return true;
}","/** 
 * Set the stack bounds. Passing in null sets the bounds to fullscreen. 
 */
boolean setBounds(Rect bounds){
  boolean oldFullscreen=mFullscreen;
  if (mDisplayContent != null) {
    mDisplayContent.getLogicalDisplayRect(mTmpRect);
    if (bounds == null) {
      bounds=mTmpRect;
      mFullscreen=true;
    }
 else {
      bounds.intersect(mTmpRect);
      mFullscreen=mTmpRect.equals(bounds);
    }
  }
  if (bounds == null) {
    return false;
  }
  if (mBounds.equals(bounds) && oldFullscreen == mFullscreen) {
    return false;
  }
  mDimLayer.setBounds(bounds);
  mAnimationBackgroundSurface.setBounds(bounds);
  mBounds.set(bounds);
  mUnderStatusBar=(mBounds.top == 0);
  updateOverrideConfiguration();
  return true;
}",0.9733893557422968
195538,"TaskStack(WindowManagerService service,int stackId){
  mService=service;
  mStackId=stackId;
  mOverrideConfig=Configuration.EMPTY;
  mForceFullscreen=false;
  mPreForceFullscreenBounds=new Rect();
  EventLog.writeEvent(EventLogTags.WM_STACK_CREATED,stackId,mBounds.left,mBounds.top,mBounds.right,mBounds.bottom);
}","TaskStack(WindowManagerService service,int stackId){
  mService=service;
  mStackId=stackId;
  mOverrideConfig=Configuration.EMPTY;
  mForceFullscreen=false;
  mPreForceFullscreenBounds=new Rect();
  mUnderStatusBar=true;
  EventLog.writeEvent(EventLogTags.WM_STACK_CREATED,stackId,mBounds.left,mBounds.top,mBounds.right,mBounds.bottom);
}",0.963302752293578
195539,"@Override public void computeFrameLw(Rect pf,Rect df,Rect of,Rect cf,Rect vf,Rect dcf,Rect sf){
  mHaveFrame=true;
  TaskStack stack=mAppToken != null ? getStack() : null;
  if (stack != null && !stack.isFullscreen()) {
    getStackBounds(stack,mContainingFrame);
    if (mUnderStatusBar) {
      mContainingFrame.top=pf.top;
    }
  }
 else {
    mContainingFrame.set(pf);
  }
  mDisplayFrame.set(df);
  final int pw=mContainingFrame.width();
  final int ph=mContainingFrame.height();
  int w, h;
  if ((mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0) {
    if (mAttrs.width < 0) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mAttrs.width * mGlobalScale + .5f);
    }
 else {
      w=mAttrs.width;
    }
    if (mAttrs.height < 0) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mAttrs.height * mGlobalScale + .5f);
    }
 else {
      h=mAttrs.height;
    }
  }
 else {
    if (mAttrs.width == WindowManager.LayoutParams.MATCH_PARENT) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mRequestedWidth * mGlobalScale + .5f);
    }
 else {
      w=mRequestedWidth;
    }
    if (mAttrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mRequestedHeight * mGlobalScale + .5f);
    }
 else {
      h=mRequestedHeight;
    }
  }
  if (!mParentFrame.equals(pf)) {
    mParentFrame.set(pf);
    mContentChanged=true;
  }
  if (mRequestedWidth != mLastRequestedWidth || mRequestedHeight != mLastRequestedHeight) {
    mLastRequestedWidth=mRequestedWidth;
    mLastRequestedHeight=mRequestedHeight;
    mContentChanged=true;
  }
  mOverscanFrame.set(of);
  mContentFrame.set(cf);
  mVisibleFrame.set(vf);
  mDecorFrame.set(dcf);
  mStableFrame.set(sf);
  final int fw=mFrame.width();
  final int fh=mFrame.height();
  float x, y;
  if (mEnforceSizeCompat) {
    x=mAttrs.x * mGlobalScale;
    y=mAttrs.y * mGlobalScale;
  }
 else {
    x=mAttrs.x;
    y=mAttrs.y;
  }
  Gravity.apply(mAttrs.gravity,w,h,mContainingFrame,(int)(x + mAttrs.horizontalMargin * pw),(int)(y + mAttrs.verticalMargin * ph),mFrame);
  Gravity.applyDisplay(mAttrs.gravity,df,mFrame);
  mContentFrame.set(Math.max(mContentFrame.left,mFrame.left),Math.max(mContentFrame.top,mFrame.top),Math.min(mContentFrame.right,mFrame.right),Math.min(mContentFrame.bottom,mFrame.bottom));
  mVisibleFrame.set(Math.max(mVisibleFrame.left,mFrame.left),Math.max(mVisibleFrame.top,mFrame.top),Math.min(mVisibleFrame.right,mFrame.right),Math.min(mVisibleFrame.bottom,mFrame.bottom));
  mStableFrame.set(Math.max(mStableFrame.left,mFrame.left),Math.max(mStableFrame.top,mFrame.top),Math.min(mStableFrame.right,mFrame.right),Math.min(mStableFrame.bottom,mFrame.bottom));
  mOverscanInsets.set(Math.max(mOverscanFrame.left - mFrame.left,0),Math.max(mOverscanFrame.top - mFrame.top,0),Math.max(mFrame.right - mOverscanFrame.right,0),Math.max(mFrame.bottom - mOverscanFrame.bottom,0));
  mContentInsets.set(mContentFrame.left - mFrame.left,mContentFrame.top - mFrame.top,mFrame.right - mContentFrame.right,mFrame.bottom - mContentFrame.bottom);
  mVisibleInsets.set(mVisibleFrame.left - mFrame.left,mVisibleFrame.top - mFrame.top,mFrame.right - mVisibleFrame.right,mFrame.bottom - mVisibleFrame.bottom);
  mStableInsets.set(Math.max(mStableFrame.left - mFrame.left,0),Math.max(mStableFrame.top - mFrame.top,0),Math.max(mFrame.right - mStableFrame.right,0),Math.max(mFrame.bottom - mStableFrame.bottom,0));
  mCompatFrame.set(mFrame);
  if (mEnforceSizeCompat) {
    mOverscanInsets.scale(mInvGlobalScale);
    mContentInsets.scale(mInvGlobalScale);
    mVisibleInsets.scale(mInvGlobalScale);
    mStableInsets.scale(mInvGlobalScale);
    mCompatFrame.scale(mInvGlobalScale);
  }
  if (mIsWallpaper && (fw != mFrame.width() || fh != mFrame.height())) {
    final DisplayContent displayContent=getDisplayContent();
    if (displayContent != null) {
      final DisplayInfo displayInfo=displayContent.getDisplayInfo();
      mService.updateWallpaperOffsetLocked(this,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
  }
  if (DEBUG_LAYOUT || WindowManagerService.localLOGV)   Slog.v(TAG,""String_Node_Str"" + mRequestedWidth + ""String_Node_Str""+ mRequestedHeight+ ""String_Node_Str""+ ""String_Node_Str""+ pw+ ""String_Node_Str""+ ph+ ""String_Node_Str""+ mFrame.toShortString()+ ""String_Node_Str""+ mContentInsets.toShortString()+ ""String_Node_Str""+ mVisibleInsets.toShortString()+ ""String_Node_Str""+ mStableInsets.toShortString());
}","@Override public void computeFrameLw(Rect pf,Rect df,Rect of,Rect cf,Rect vf,Rect dcf,Rect sf){
  mHaveFrame=true;
  TaskStack stack=mAppToken != null ? getStack() : null;
  if (stack != null && !stack.isFullscreen()) {
    stack.getBounds(mContainingFrame);
    if (stack.mUnderStatusBar) {
      mContainingFrame.top=pf.top;
    }
  }
 else {
    mContainingFrame.set(pf);
  }
  mDisplayFrame.set(df);
  final int pw=mContainingFrame.width();
  final int ph=mContainingFrame.height();
  int w, h;
  if ((mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0) {
    if (mAttrs.width < 0) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mAttrs.width * mGlobalScale + .5f);
    }
 else {
      w=mAttrs.width;
    }
    if (mAttrs.height < 0) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mAttrs.height * mGlobalScale + .5f);
    }
 else {
      h=mAttrs.height;
    }
  }
 else {
    if (mAttrs.width == WindowManager.LayoutParams.MATCH_PARENT) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mRequestedWidth * mGlobalScale + .5f);
    }
 else {
      w=mRequestedWidth;
    }
    if (mAttrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mRequestedHeight * mGlobalScale + .5f);
    }
 else {
      h=mRequestedHeight;
    }
  }
  if (!mParentFrame.equals(pf)) {
    mParentFrame.set(pf);
    mContentChanged=true;
  }
  if (mRequestedWidth != mLastRequestedWidth || mRequestedHeight != mLastRequestedHeight) {
    mLastRequestedWidth=mRequestedWidth;
    mLastRequestedHeight=mRequestedHeight;
    mContentChanged=true;
  }
  mOverscanFrame.set(of);
  mContentFrame.set(cf);
  mVisibleFrame.set(vf);
  mDecorFrame.set(dcf);
  mStableFrame.set(sf);
  final int fw=mFrame.width();
  final int fh=mFrame.height();
  float x, y;
  if (mEnforceSizeCompat) {
    x=mAttrs.x * mGlobalScale;
    y=mAttrs.y * mGlobalScale;
  }
 else {
    x=mAttrs.x;
    y=mAttrs.y;
  }
  Gravity.apply(mAttrs.gravity,w,h,mContainingFrame,(int)(x + mAttrs.horizontalMargin * pw),(int)(y + mAttrs.verticalMargin * ph),mFrame);
  Gravity.applyDisplay(mAttrs.gravity,df,mFrame);
  mContentFrame.set(Math.max(mContentFrame.left,mFrame.left),Math.max(mContentFrame.top,mFrame.top),Math.min(mContentFrame.right,mFrame.right),Math.min(mContentFrame.bottom,mFrame.bottom));
  mVisibleFrame.set(Math.max(mVisibleFrame.left,mFrame.left),Math.max(mVisibleFrame.top,mFrame.top),Math.min(mVisibleFrame.right,mFrame.right),Math.min(mVisibleFrame.bottom,mFrame.bottom));
  mStableFrame.set(Math.max(mStableFrame.left,mFrame.left),Math.max(mStableFrame.top,mFrame.top),Math.min(mStableFrame.right,mFrame.right),Math.min(mStableFrame.bottom,mFrame.bottom));
  mOverscanInsets.set(Math.max(mOverscanFrame.left - mFrame.left,0),Math.max(mOverscanFrame.top - mFrame.top,0),Math.max(mFrame.right - mOverscanFrame.right,0),Math.max(mFrame.bottom - mOverscanFrame.bottom,0));
  mContentInsets.set(mContentFrame.left - mFrame.left,mContentFrame.top - mFrame.top,mFrame.right - mContentFrame.right,mFrame.bottom - mContentFrame.bottom);
  mVisibleInsets.set(mVisibleFrame.left - mFrame.left,mVisibleFrame.top - mFrame.top,mFrame.right - mVisibleFrame.right,mFrame.bottom - mVisibleFrame.bottom);
  mStableInsets.set(Math.max(mStableFrame.left - mFrame.left,0),Math.max(mStableFrame.top - mFrame.top,0),Math.max(mFrame.right - mStableFrame.right,0),Math.max(mFrame.bottom - mStableFrame.bottom,0));
  mCompatFrame.set(mFrame);
  if (mEnforceSizeCompat) {
    mOverscanInsets.scale(mInvGlobalScale);
    mContentInsets.scale(mInvGlobalScale);
    mVisibleInsets.scale(mInvGlobalScale);
    mStableInsets.scale(mInvGlobalScale);
    mCompatFrame.scale(mInvGlobalScale);
  }
  if (mIsWallpaper && (fw != mFrame.width() || fh != mFrame.height())) {
    final DisplayContent displayContent=getDisplayContent();
    if (displayContent != null) {
      final DisplayInfo displayInfo=displayContent.getDisplayInfo();
      mService.updateWallpaperOffsetLocked(this,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
  }
  if (DEBUG_LAYOUT || WindowManagerService.localLOGV)   Slog.v(TAG,""String_Node_Str"" + mRequestedWidth + ""String_Node_Str""+ mRequestedHeight+ ""String_Node_Str""+ ""String_Node_Str""+ pw+ ""String_Node_Str""+ ph+ ""String_Node_Str""+ mFrame.toShortString()+ ""String_Node_Str""+ mContentInsets.toShortString()+ ""String_Node_Str""+ mVisibleInsets.toShortString()+ ""String_Node_Str""+ mStableInsets.toShortString());
}",0.9928232306503256
195540,"private void getStackBounds(TaskStack stack,Rect bounds){
  if (stack != null) {
    stack.getBounds(bounds);
    return;
  }
  bounds.set(mFrame);
}","void getStackBounds(Rect bounds){
  final TaskStack stack=getStack();
  if (stack != null) {
    stack.getBounds(bounds);
    return;
  }
  bounds.set(mFrame);
}",0.8387096774193549
195541,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  mBrightnessView.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  final int brightnessHeight=mBrightnessView.getMeasuredHeight() + mBrightnessPaddingTop;
  mFooter.getView().measure(exactly(width),MeasureSpec.UNSPECIFIED);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != record.tile.supportsDualTargets()) {
      r++;
      c=0;
      rowIsDual=record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  for (  TileRecord record : mRecords) {
    record.tileView.setDual(record.tile.supportsDualTargets());
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
  }
  int h=rows == 0 ? brightnessHeight : (getRowTop(rows) + mPanelPaddingBottom);
  if (mFooter.hasFooter()) {
    h+=mFooter.getView().getMeasuredHeight();
  }
  mDetail.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  if (mDetail.getMeasuredHeight() < h) {
    mDetail.measure(exactly(width),exactly(h));
  }
  mGridHeight=h;
  setMeasuredDimension(width,Math.max(h,mDetail.getMeasuredHeight()));
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  mBrightnessView.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  final int brightnessHeight=mBrightnessView.getMeasuredHeight() + mBrightnessPaddingTop;
  mFooter.getView().measure(exactly(width),MeasureSpec.UNSPECIFIED);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != record.tile.supportsDualTargets()) {
      r++;
      c=0;
      rowIsDual=record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  for (  TileRecord record : mRecords) {
    if (record.tileView.setDual(record.tile.supportsDualTargets())) {
      record.tileView.handleStateChanged(record.tile.getState());
    }
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
  }
  int h=rows == 0 ? brightnessHeight : (getRowTop(rows) + mPanelPaddingBottom);
  if (mFooter.hasFooter()) {
    h+=mFooter.getView().getMeasuredHeight();
  }
  mDetail.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  if (mDetail.getMeasuredHeight() < h) {
    mDetail.measure(exactly(width),exactly(h));
  }
  mGridHeight=h;
  setMeasuredDimension(width,Math.max(h,mDetail.getMeasuredHeight()));
}",0.9746995572422518
195542,"public void setDual(boolean dual){
  final boolean changed=dual != mDual;
  mDual=dual;
  if (changed) {
    recreateLabel();
  }
  if (mTileBackground instanceof RippleDrawable) {
    setRipple((RippleDrawable)mTileBackground);
  }
  if (dual) {
    mTopBackgroundView.setOnClickListener(mClickPrimary);
    setOnClickListener(null);
    setClickable(false);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    mTopBackgroundView.setBackground(mTileBackground);
  }
 else {
    mTopBackgroundView.setOnClickListener(null);
    mTopBackgroundView.setClickable(false);
    setOnClickListener(mClickPrimary);
    setOnLongClickListener(mLongClick);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    setBackground(mTileBackground);
  }
  mTopBackgroundView.setFocusable(dual);
  setFocusable(!dual);
  mDivider.setVisibility(dual ? VISIBLE : GONE);
  postInvalidate();
}","public boolean setDual(boolean dual){
  final boolean changed=dual != mDual;
  mDual=dual;
  if (changed) {
    recreateLabel();
  }
  if (mTileBackground instanceof RippleDrawable) {
    setRipple((RippleDrawable)mTileBackground);
  }
  if (dual) {
    mTopBackgroundView.setOnClickListener(mClickPrimary);
    setOnClickListener(null);
    setClickable(false);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    mTopBackgroundView.setBackground(mTileBackground);
  }
 else {
    mTopBackgroundView.setOnClickListener(null);
    mTopBackgroundView.setClickable(false);
    setOnClickListener(mClickPrimary);
    setOnLongClickListener(mLongClick);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    setBackground(mTileBackground);
  }
  mTopBackgroundView.setFocusable(dual);
  setFocusable(!dual);
  mDivider.setVisibility(dual ? VISIBLE : GONE);
  postInvalidate();
  return changed;
}",0.984349703184026
195543,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  mBrightnessView.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  final int brightnessHeight=mBrightnessView.getMeasuredHeight() + mBrightnessPaddingTop;
  mFooter.getView().measure(exactly(width),MeasureSpec.UNSPECIFIED);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != record.tile.supportsDualTargets()) {
      r++;
      c=0;
      rowIsDual=record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  for (  TileRecord record : mRecords) {
    record.tileView.setDual(record.tile.supportsDualTargets());
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
  }
  int h=rows == 0 ? brightnessHeight : (getRowTop(rows) + mPanelPaddingBottom);
  if (mFooter.hasFooter()) {
    h+=mFooter.getView().getMeasuredHeight();
  }
  mDetail.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  if (mDetail.getMeasuredHeight() < h) {
    mDetail.measure(exactly(width),exactly(h));
  }
  mGridHeight=h;
  setMeasuredDimension(width,Math.max(h,mDetail.getMeasuredHeight()));
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  mBrightnessView.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  final int brightnessHeight=mBrightnessView.getMeasuredHeight() + mBrightnessPaddingTop;
  mFooter.getView().measure(exactly(width),MeasureSpec.UNSPECIFIED);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != record.tile.supportsDualTargets()) {
      r++;
      c=0;
      rowIsDual=record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  for (  TileRecord record : mRecords) {
    if (record.tileView.setDual(record.tile.supportsDualTargets())) {
      record.tileView.handleStateChanged(record.tile.getState());
    }
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
  }
  int h=rows == 0 ? brightnessHeight : (getRowTop(rows) + mPanelPaddingBottom);
  if (mFooter.hasFooter()) {
    h+=mFooter.getView().getMeasuredHeight();
  }
  mDetail.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  if (mDetail.getMeasuredHeight() < h) {
    mDetail.measure(exactly(width),exactly(h));
  }
  mGridHeight=h;
  setMeasuredDimension(width,Math.max(h,mDetail.getMeasuredHeight()));
}",0.9746995572422518
195544,"public void setDual(boolean dual){
  final boolean changed=dual != mDual;
  mDual=dual;
  if (changed) {
    recreateLabel();
  }
  if (mTileBackground instanceof RippleDrawable) {
    setRipple((RippleDrawable)mTileBackground);
  }
  if (dual) {
    mTopBackgroundView.setOnClickListener(mClickPrimary);
    setOnClickListener(null);
    setClickable(false);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    mTopBackgroundView.setBackground(mTileBackground);
  }
 else {
    mTopBackgroundView.setOnClickListener(null);
    mTopBackgroundView.setClickable(false);
    setOnClickListener(mClickPrimary);
    setOnLongClickListener(mLongClick);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    setBackground(mTileBackground);
  }
  mTopBackgroundView.setFocusable(dual);
  setFocusable(!dual);
  mDivider.setVisibility(dual ? VISIBLE : GONE);
  postInvalidate();
}","public boolean setDual(boolean dual){
  final boolean changed=dual != mDual;
  mDual=dual;
  if (changed) {
    recreateLabel();
  }
  if (mTileBackground instanceof RippleDrawable) {
    setRipple((RippleDrawable)mTileBackground);
  }
  if (dual) {
    mTopBackgroundView.setOnClickListener(mClickPrimary);
    setOnClickListener(null);
    setClickable(false);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    mTopBackgroundView.setBackground(mTileBackground);
  }
 else {
    mTopBackgroundView.setOnClickListener(null);
    mTopBackgroundView.setClickable(false);
    setOnClickListener(mClickPrimary);
    setOnLongClickListener(mLongClick);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    setBackground(mTileBackground);
  }
  mTopBackgroundView.setFocusable(dual);
  setFocusable(!dual);
  mDivider.setVisibility(dual ? VISIBLE : GONE);
  postInvalidate();
  return changed;
}",0.984349703184026
195545,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  mBrightnessView.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  final int brightnessHeight=mBrightnessView.getMeasuredHeight() + mBrightnessPaddingTop;
  mFooter.getView().measure(exactly(width),MeasureSpec.UNSPECIFIED);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != record.tile.supportsDualTargets()) {
      r++;
      c=0;
      rowIsDual=record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  for (  TileRecord record : mRecords) {
    record.tileView.setDual(record.tile.supportsDualTargets());
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
  }
  int h=rows == 0 ? brightnessHeight : (getRowTop(rows) + mPanelPaddingBottom);
  if (mFooter.hasFooter()) {
    h+=mFooter.getView().getMeasuredHeight();
  }
  mDetail.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  if (mDetail.getMeasuredHeight() < h) {
    mDetail.measure(exactly(width),exactly(h));
  }
  mGridHeight=h;
  setMeasuredDimension(width,Math.max(h,mDetail.getMeasuredHeight()));
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  mBrightnessView.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  final int brightnessHeight=mBrightnessView.getMeasuredHeight() + mBrightnessPaddingTop;
  mFooter.getView().measure(exactly(width),MeasureSpec.UNSPECIFIED);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != record.tile.supportsDualTargets()) {
      r++;
      c=0;
      rowIsDual=record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  for (  TileRecord record : mRecords) {
    if (record.tileView.setDual(record.tile.supportsDualTargets())) {
      record.tileView.handleStateChanged(record.tile.getState());
    }
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
  }
  int h=rows == 0 ? brightnessHeight : (getRowTop(rows) + mPanelPaddingBottom);
  if (mFooter.hasFooter()) {
    h+=mFooter.getView().getMeasuredHeight();
  }
  mDetail.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  if (mDetail.getMeasuredHeight() < h) {
    mDetail.measure(exactly(width),exactly(h));
  }
  mGridHeight=h;
  setMeasuredDimension(width,Math.max(h,mDetail.getMeasuredHeight()));
}",0.9746995572422518
195546,"public void setDual(boolean dual){
  final boolean changed=dual != mDual;
  mDual=dual;
  if (changed) {
    recreateLabel();
  }
  if (mTileBackground instanceof RippleDrawable) {
    setRipple((RippleDrawable)mTileBackground);
  }
  if (dual) {
    mTopBackgroundView.setOnClickListener(mClickPrimary);
    setOnClickListener(null);
    setClickable(false);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    mTopBackgroundView.setBackground(mTileBackground);
  }
 else {
    mTopBackgroundView.setOnClickListener(null);
    mTopBackgroundView.setClickable(false);
    setOnClickListener(mClickPrimary);
    setOnLongClickListener(mLongClick);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    setBackground(mTileBackground);
  }
  mTopBackgroundView.setFocusable(dual);
  setFocusable(!dual);
  mDivider.setVisibility(dual ? VISIBLE : GONE);
  postInvalidate();
}","public boolean setDual(boolean dual){
  final boolean changed=dual != mDual;
  mDual=dual;
  if (changed) {
    recreateLabel();
  }
  if (mTileBackground instanceof RippleDrawable) {
    setRipple((RippleDrawable)mTileBackground);
  }
  if (dual) {
    mTopBackgroundView.setOnClickListener(mClickPrimary);
    setOnClickListener(null);
    setClickable(false);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    mTopBackgroundView.setBackground(mTileBackground);
  }
 else {
    mTopBackgroundView.setOnClickListener(null);
    mTopBackgroundView.setClickable(false);
    setOnClickListener(mClickPrimary);
    setOnLongClickListener(mLongClick);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    setBackground(mTileBackground);
  }
  mTopBackgroundView.setFocusable(dual);
  setFocusable(!dual);
  mDivider.setVisibility(dual ? VISIBLE : GONE);
  postInvalidate();
  return changed;
}",0.984349703184026
195547,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  mBrightnessView.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  final int brightnessHeight=mBrightnessView.getMeasuredHeight() + mBrightnessPaddingTop;
  mFooter.getView().measure(exactly(width),MeasureSpec.UNSPECIFIED);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != record.tile.supportsDualTargets()) {
      r++;
      c=0;
      rowIsDual=record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  for (  TileRecord record : mRecords) {
    record.tileView.setDual(record.tile.supportsDualTargets());
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
  }
  int h=rows == 0 ? brightnessHeight : (getRowTop(rows) + mPanelPaddingBottom);
  if (mFooter.hasFooter()) {
    h+=mFooter.getView().getMeasuredHeight();
  }
  mDetail.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  if (mDetail.getMeasuredHeight() < h) {
    mDetail.measure(exactly(width),exactly(h));
  }
  mGridHeight=h;
  setMeasuredDimension(width,Math.max(h,mDetail.getMeasuredHeight()));
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  mBrightnessView.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  final int brightnessHeight=mBrightnessView.getMeasuredHeight() + mBrightnessPaddingTop;
  mFooter.getView().measure(exactly(width),MeasureSpec.UNSPECIFIED);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != record.tile.supportsDualTargets()) {
      r++;
      c=0;
      rowIsDual=record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  for (  TileRecord record : mRecords) {
    if (record.tileView.setDual(record.tile.supportsDualTargets())) {
      record.tileView.handleStateChanged(record.tile.getState());
    }
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
  }
  int h=rows == 0 ? brightnessHeight : (getRowTop(rows) + mPanelPaddingBottom);
  if (mFooter.hasFooter()) {
    h+=mFooter.getView().getMeasuredHeight();
  }
  mDetail.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  if (mDetail.getMeasuredHeight() < h) {
    mDetail.measure(exactly(width),exactly(h));
  }
  mGridHeight=h;
  setMeasuredDimension(width,Math.max(h,mDetail.getMeasuredHeight()));
}",0.9746995572422518
195548,"public void setDual(boolean dual){
  final boolean changed=dual != mDual;
  mDual=dual;
  if (changed) {
    recreateLabel();
  }
  if (mTileBackground instanceof RippleDrawable) {
    setRipple((RippleDrawable)mTileBackground);
  }
  if (dual) {
    mTopBackgroundView.setOnClickListener(mClickPrimary);
    setOnClickListener(null);
    setClickable(false);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    mTopBackgroundView.setBackground(mTileBackground);
  }
 else {
    mTopBackgroundView.setOnClickListener(null);
    mTopBackgroundView.setClickable(false);
    setOnClickListener(mClickPrimary);
    setOnLongClickListener(mLongClick);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    setBackground(mTileBackground);
  }
  mTopBackgroundView.setFocusable(dual);
  setFocusable(!dual);
  mDivider.setVisibility(dual ? VISIBLE : GONE);
  postInvalidate();
}","public boolean setDual(boolean dual){
  final boolean changed=dual != mDual;
  mDual=dual;
  if (changed) {
    recreateLabel();
  }
  if (mTileBackground instanceof RippleDrawable) {
    setRipple((RippleDrawable)mTileBackground);
  }
  if (dual) {
    mTopBackgroundView.setOnClickListener(mClickPrimary);
    setOnClickListener(null);
    setClickable(false);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    mTopBackgroundView.setBackground(mTileBackground);
  }
 else {
    mTopBackgroundView.setOnClickListener(null);
    mTopBackgroundView.setClickable(false);
    setOnClickListener(mClickPrimary);
    setOnLongClickListener(mLongClick);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    setBackground(mTileBackground);
  }
  mTopBackgroundView.setFocusable(dual);
  setFocusable(!dual);
  mDivider.setVisibility(dual ? VISIBLE : GONE);
  postInvalidate();
  return changed;
}",0.984349703184026
195549,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  mBrightnessView.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  final int brightnessHeight=mBrightnessView.getMeasuredHeight() + mBrightnessPaddingTop;
  mFooter.getView().measure(exactly(width),MeasureSpec.UNSPECIFIED);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != record.tile.supportsDualTargets()) {
      r++;
      c=0;
      rowIsDual=record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  for (  TileRecord record : mRecords) {
    record.tileView.setDual(record.tile.supportsDualTargets());
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
  }
  int h=rows == 0 ? brightnessHeight : (getRowTop(rows) + mPanelPaddingBottom);
  if (mFooter.hasFooter()) {
    h+=mFooter.getView().getMeasuredHeight();
  }
  mDetail.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  if (mDetail.getMeasuredHeight() < h) {
    mDetail.measure(exactly(width),exactly(h));
  }
  mGridHeight=h;
  setMeasuredDimension(width,Math.max(h,mDetail.getMeasuredHeight()));
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  mBrightnessView.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  final int brightnessHeight=mBrightnessView.getMeasuredHeight() + mBrightnessPaddingTop;
  mFooter.getView().measure(exactly(width),MeasureSpec.UNSPECIFIED);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != record.tile.supportsDualTargets()) {
      r++;
      c=0;
      rowIsDual=record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  for (  TileRecord record : mRecords) {
    if (record.tileView.setDual(record.tile.supportsDualTargets())) {
      record.tileView.handleStateChanged(record.tile.getState());
    }
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
  }
  int h=rows == 0 ? brightnessHeight : (getRowTop(rows) + mPanelPaddingBottom);
  if (mFooter.hasFooter()) {
    h+=mFooter.getView().getMeasuredHeight();
  }
  mDetail.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  if (mDetail.getMeasuredHeight() < h) {
    mDetail.measure(exactly(width),exactly(h));
  }
  mGridHeight=h;
  setMeasuredDimension(width,Math.max(h,mDetail.getMeasuredHeight()));
}",0.9746995572422518
195550,"public void setDual(boolean dual){
  final boolean changed=dual != mDual;
  mDual=dual;
  if (changed) {
    recreateLabel();
  }
  if (mTileBackground instanceof RippleDrawable) {
    setRipple((RippleDrawable)mTileBackground);
  }
  if (dual) {
    mTopBackgroundView.setOnClickListener(mClickPrimary);
    setOnClickListener(null);
    setClickable(false);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    mTopBackgroundView.setBackground(mTileBackground);
  }
 else {
    mTopBackgroundView.setOnClickListener(null);
    mTopBackgroundView.setClickable(false);
    setOnClickListener(mClickPrimary);
    setOnLongClickListener(mLongClick);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    setBackground(mTileBackground);
  }
  mTopBackgroundView.setFocusable(dual);
  setFocusable(!dual);
  mDivider.setVisibility(dual ? VISIBLE : GONE);
  postInvalidate();
}","public boolean setDual(boolean dual){
  final boolean changed=dual != mDual;
  mDual=dual;
  if (changed) {
    recreateLabel();
  }
  if (mTileBackground instanceof RippleDrawable) {
    setRipple((RippleDrawable)mTileBackground);
  }
  if (dual) {
    mTopBackgroundView.setOnClickListener(mClickPrimary);
    setOnClickListener(null);
    setClickable(false);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    mTopBackgroundView.setBackground(mTileBackground);
  }
 else {
    mTopBackgroundView.setOnClickListener(null);
    mTopBackgroundView.setClickable(false);
    setOnClickListener(mClickPrimary);
    setOnLongClickListener(mLongClick);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    setBackground(mTileBackground);
  }
  mTopBackgroundView.setFocusable(dual);
  setFocusable(!dual);
  mDivider.setVisibility(dual ? VISIBLE : GONE);
  postInvalidate();
  return changed;
}",0.984349703184026
195551,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  mBrightnessView.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  final int brightnessHeight=mBrightnessView.getMeasuredHeight() + mBrightnessPaddingTop;
  mFooter.getView().measure(exactly(width),MeasureSpec.UNSPECIFIED);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != record.tile.supportsDualTargets()) {
      r++;
      c=0;
      rowIsDual=record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  for (  TileRecord record : mRecords) {
    record.tileView.setDual(record.tile.supportsDualTargets());
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
  }
  int h=rows == 0 ? brightnessHeight : (getRowTop(rows) + mPanelPaddingBottom);
  if (mFooter.hasFooter()) {
    h+=mFooter.getView().getMeasuredHeight();
  }
  mDetail.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  if (mDetail.getMeasuredHeight() < h) {
    mDetail.measure(exactly(width),exactly(h));
  }
  mGridHeight=h;
  setMeasuredDimension(width,Math.max(h,mDetail.getMeasuredHeight()));
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  mBrightnessView.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  final int brightnessHeight=mBrightnessView.getMeasuredHeight() + mBrightnessPaddingTop;
  mFooter.getView().measure(exactly(width),MeasureSpec.UNSPECIFIED);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != record.tile.supportsDualTargets()) {
      r++;
      c=0;
      rowIsDual=record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  for (  TileRecord record : mRecords) {
    if (record.tileView.setDual(record.tile.supportsDualTargets())) {
      record.tileView.handleStateChanged(record.tile.getState());
    }
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
  }
  int h=rows == 0 ? brightnessHeight : (getRowTop(rows) + mPanelPaddingBottom);
  if (mFooter.hasFooter()) {
    h+=mFooter.getView().getMeasuredHeight();
  }
  mDetail.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  if (mDetail.getMeasuredHeight() < h) {
    mDetail.measure(exactly(width),exactly(h));
  }
  mGridHeight=h;
  setMeasuredDimension(width,Math.max(h,mDetail.getMeasuredHeight()));
}",0.9746995572422518
195552,"public void setDual(boolean dual){
  final boolean changed=dual != mDual;
  mDual=dual;
  if (changed) {
    recreateLabel();
  }
  if (mTileBackground instanceof RippleDrawable) {
    setRipple((RippleDrawable)mTileBackground);
  }
  if (dual) {
    mTopBackgroundView.setOnClickListener(mClickPrimary);
    setOnClickListener(null);
    setClickable(false);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    mTopBackgroundView.setBackground(mTileBackground);
  }
 else {
    mTopBackgroundView.setOnClickListener(null);
    mTopBackgroundView.setClickable(false);
    setOnClickListener(mClickPrimary);
    setOnLongClickListener(mLongClick);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    setBackground(mTileBackground);
  }
  mTopBackgroundView.setFocusable(dual);
  setFocusable(!dual);
  mDivider.setVisibility(dual ? VISIBLE : GONE);
  postInvalidate();
}","public boolean setDual(boolean dual){
  final boolean changed=dual != mDual;
  mDual=dual;
  if (changed) {
    recreateLabel();
  }
  if (mTileBackground instanceof RippleDrawable) {
    setRipple((RippleDrawable)mTileBackground);
  }
  if (dual) {
    mTopBackgroundView.setOnClickListener(mClickPrimary);
    setOnClickListener(null);
    setClickable(false);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    mTopBackgroundView.setBackground(mTileBackground);
  }
 else {
    mTopBackgroundView.setOnClickListener(null);
    mTopBackgroundView.setClickable(false);
    setOnClickListener(mClickPrimary);
    setOnLongClickListener(mLongClick);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    setBackground(mTileBackground);
  }
  mTopBackgroundView.setFocusable(dual);
  setFocusable(!dual);
  mDivider.setVisibility(dual ? VISIBLE : GONE);
  postInvalidate();
  return changed;
}",0.984349703184026
195553,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  mBrightnessView.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  final int brightnessHeight=mBrightnessView.getMeasuredHeight() + mBrightnessPaddingTop;
  mFooter.getView().measure(exactly(width),MeasureSpec.UNSPECIFIED);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != record.tile.supportsDualTargets()) {
      r++;
      c=0;
      rowIsDual=record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  for (  TileRecord record : mRecords) {
    record.tileView.setDual(record.tile.supportsDualTargets());
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
  }
  int h=rows == 0 ? brightnessHeight : (getRowTop(rows) + mPanelPaddingBottom);
  if (mFooter.hasFooter()) {
    h+=mFooter.getView().getMeasuredHeight();
  }
  mDetail.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  if (mDetail.getMeasuredHeight() < h) {
    mDetail.measure(exactly(width),exactly(h));
  }
  mGridHeight=h;
  setMeasuredDimension(width,Math.max(h,mDetail.getMeasuredHeight()));
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  mBrightnessView.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  final int brightnessHeight=mBrightnessView.getMeasuredHeight() + mBrightnessPaddingTop;
  mFooter.getView().measure(exactly(width),MeasureSpec.UNSPECIFIED);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != record.tile.supportsDualTargets()) {
      r++;
      c=0;
      rowIsDual=record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  for (  TileRecord record : mRecords) {
    if (record.tileView.setDual(record.tile.supportsDualTargets())) {
      record.tileView.handleStateChanged(record.tile.getState());
    }
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
  }
  int h=rows == 0 ? brightnessHeight : (getRowTop(rows) + mPanelPaddingBottom);
  if (mFooter.hasFooter()) {
    h+=mFooter.getView().getMeasuredHeight();
  }
  mDetail.measure(exactly(width),MeasureSpec.UNSPECIFIED);
  if (mDetail.getMeasuredHeight() < h) {
    mDetail.measure(exactly(width),exactly(h));
  }
  mGridHeight=h;
  setMeasuredDimension(width,Math.max(h,mDetail.getMeasuredHeight()));
}",0.9746995572422518
195554,"public void setDual(boolean dual){
  final boolean changed=dual != mDual;
  mDual=dual;
  if (changed) {
    recreateLabel();
  }
  if (mTileBackground instanceof RippleDrawable) {
    setRipple((RippleDrawable)mTileBackground);
  }
  if (dual) {
    mTopBackgroundView.setOnClickListener(mClickPrimary);
    setOnClickListener(null);
    setClickable(false);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    mTopBackgroundView.setBackground(mTileBackground);
  }
 else {
    mTopBackgroundView.setOnClickListener(null);
    mTopBackgroundView.setClickable(false);
    setOnClickListener(mClickPrimary);
    setOnLongClickListener(mLongClick);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    setBackground(mTileBackground);
  }
  mTopBackgroundView.setFocusable(dual);
  setFocusable(!dual);
  mDivider.setVisibility(dual ? VISIBLE : GONE);
  postInvalidate();
}","public boolean setDual(boolean dual){
  final boolean changed=dual != mDual;
  mDual=dual;
  if (changed) {
    recreateLabel();
  }
  if (mTileBackground instanceof RippleDrawable) {
    setRipple((RippleDrawable)mTileBackground);
  }
  if (dual) {
    mTopBackgroundView.setOnClickListener(mClickPrimary);
    setOnClickListener(null);
    setClickable(false);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    mTopBackgroundView.setBackground(mTileBackground);
  }
 else {
    mTopBackgroundView.setOnClickListener(null);
    mTopBackgroundView.setClickable(false);
    setOnClickListener(mClickPrimary);
    setOnLongClickListener(mLongClick);
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    setBackground(mTileBackground);
  }
  mTopBackgroundView.setFocusable(dual);
  setFocusable(!dual);
  mDivider.setVisibility(dual ? VISIBLE : GONE);
  postInvalidate();
  return changed;
}",0.984349703184026
195555,"@Override public HdmiDeviceInfo getActiveSource(){
  enforceAccessPermission();
  HdmiCecLocalDeviceTv tv=tv();
  if (tv == null) {
    Slog.w(TAG,""String_Node_Str"");
    return null;
  }
  ActiveSource activeSource=tv.getActiveSource();
  if (activeSource.isValid()) {
    return new HdmiDeviceInfo(activeSource.logicalAddress,activeSource.physicalAddress,HdmiDeviceInfo.PORT_INVALID,HdmiDeviceInfo.DEVICE_INACTIVE,0,""String_Node_Str"");
  }
  int activePath=tv.getActivePath();
  if (activePath != HdmiDeviceInfo.PATH_INVALID) {
    HdmiDeviceInfo info=tv.getDeviceInfoByPath(activePath);
    return (info != null) ? info : new HdmiDeviceInfo(activePath,tv.getActivePortId());
  }
  return null;
}","@Override public HdmiDeviceInfo getActiveSource(){
  enforceAccessPermission();
  HdmiCecLocalDeviceTv tv=tv();
  if (tv == null) {
    Slog.w(TAG,""String_Node_Str"");
    return null;
  }
  ActiveSource activeSource=tv.getActiveSource();
  if (activeSource.isValid()) {
    return new HdmiDeviceInfo(activeSource.logicalAddress,activeSource.physicalAddress,HdmiDeviceInfo.PORT_INVALID,HdmiDeviceInfo.DEVICE_INACTIVE,0,""String_Node_Str"");
  }
  int activePath=tv.getActivePath();
  if (activePath != HdmiDeviceInfo.PATH_INVALID) {
    HdmiDeviceInfo info=tv.getSafeDeviceInfoByPath(activePath);
    return (info != null) ? info : new HdmiDeviceInfo(activePath,tv.getActivePortId());
  }
  return null;
}",0.9971428571428572
195556,"@Override public HdmiDeviceInfo getActiveSource(){
  enforceAccessPermission();
  HdmiCecLocalDeviceTv tv=tv();
  if (tv == null) {
    Slog.w(TAG,""String_Node_Str"");
    return null;
  }
  ActiveSource activeSource=tv.getActiveSource();
  if (activeSource.isValid()) {
    return new HdmiDeviceInfo(activeSource.logicalAddress,activeSource.physicalAddress,HdmiDeviceInfo.PORT_INVALID,HdmiDeviceInfo.DEVICE_INACTIVE,0,""String_Node_Str"");
  }
  int activePath=tv.getActivePath();
  if (activePath != HdmiDeviceInfo.PATH_INVALID) {
    HdmiDeviceInfo info=tv.getDeviceInfoByPath(activePath);
    return (info != null) ? info : new HdmiDeviceInfo(activePath,tv.getActivePortId());
  }
  return null;
}","@Override public HdmiDeviceInfo getActiveSource(){
  enforceAccessPermission();
  HdmiCecLocalDeviceTv tv=tv();
  if (tv == null) {
    Slog.w(TAG,""String_Node_Str"");
    return null;
  }
  ActiveSource activeSource=tv.getActiveSource();
  if (activeSource.isValid()) {
    return new HdmiDeviceInfo(activeSource.logicalAddress,activeSource.physicalAddress,HdmiDeviceInfo.PORT_INVALID,HdmiDeviceInfo.DEVICE_INACTIVE,0,""String_Node_Str"");
  }
  int activePath=tv.getActivePath();
  if (activePath != HdmiDeviceInfo.PATH_INVALID) {
    HdmiDeviceInfo info=tv.getSafeDeviceInfoByPath(activePath);
    return (info != null) ? info : new HdmiDeviceInfo(activePath,tv.getActivePortId());
  }
  return null;
}",0.9971428571428572
195557,"@Override public HdmiDeviceInfo getActiveSource(){
  enforceAccessPermission();
  HdmiCecLocalDeviceTv tv=tv();
  if (tv == null) {
    Slog.w(TAG,""String_Node_Str"");
    return null;
  }
  ActiveSource activeSource=tv.getActiveSource();
  if (activeSource.isValid()) {
    return new HdmiDeviceInfo(activeSource.logicalAddress,activeSource.physicalAddress,HdmiDeviceInfo.PORT_INVALID,HdmiDeviceInfo.DEVICE_INACTIVE,0,""String_Node_Str"");
  }
  int activePath=tv.getActivePath();
  if (activePath != HdmiDeviceInfo.PATH_INVALID) {
    HdmiDeviceInfo info=tv.getDeviceInfoByPath(activePath);
    return (info != null) ? info : new HdmiDeviceInfo(activePath,tv.getActivePortId());
  }
  return null;
}","@Override public HdmiDeviceInfo getActiveSource(){
  enforceAccessPermission();
  HdmiCecLocalDeviceTv tv=tv();
  if (tv == null) {
    Slog.w(TAG,""String_Node_Str"");
    return null;
  }
  ActiveSource activeSource=tv.getActiveSource();
  if (activeSource.isValid()) {
    return new HdmiDeviceInfo(activeSource.logicalAddress,activeSource.physicalAddress,HdmiDeviceInfo.PORT_INVALID,HdmiDeviceInfo.DEVICE_INACTIVE,0,""String_Node_Str"");
  }
  int activePath=tv.getActivePath();
  if (activePath != HdmiDeviceInfo.PATH_INVALID) {
    HdmiDeviceInfo info=tv.getSafeDeviceInfoByPath(activePath);
    return (info != null) ? info : new HdmiDeviceInfo(activePath,tv.getActivePortId());
  }
  return null;
}",0.9971428571428572
195558,"@Override public HdmiDeviceInfo getActiveSource(){
  enforceAccessPermission();
  HdmiCecLocalDeviceTv tv=tv();
  if (tv == null) {
    Slog.w(TAG,""String_Node_Str"");
    return null;
  }
  ActiveSource activeSource=tv.getActiveSource();
  if (activeSource.isValid()) {
    return new HdmiDeviceInfo(activeSource.logicalAddress,activeSource.physicalAddress,HdmiDeviceInfo.PORT_INVALID,HdmiDeviceInfo.DEVICE_INACTIVE,0,""String_Node_Str"");
  }
  int activePath=tv.getActivePath();
  if (activePath != HdmiDeviceInfo.PATH_INVALID) {
    HdmiDeviceInfo info=tv.getDeviceInfoByPath(activePath);
    return (info != null) ? info : new HdmiDeviceInfo(activePath,tv.getActivePortId());
  }
  return null;
}","@Override public HdmiDeviceInfo getActiveSource(){
  enforceAccessPermission();
  HdmiCecLocalDeviceTv tv=tv();
  if (tv == null) {
    Slog.w(TAG,""String_Node_Str"");
    return null;
  }
  ActiveSource activeSource=tv.getActiveSource();
  if (activeSource.isValid()) {
    return new HdmiDeviceInfo(activeSource.logicalAddress,activeSource.physicalAddress,HdmiDeviceInfo.PORT_INVALID,HdmiDeviceInfo.DEVICE_INACTIVE,0,""String_Node_Str"");
  }
  int activePath=tv.getActivePath();
  if (activePath != HdmiDeviceInfo.PATH_INVALID) {
    HdmiDeviceInfo info=tv.getSafeDeviceInfoByPath(activePath);
    return (info != null) ? info : new HdmiDeviceInfo(activePath,tv.getActivePortId());
  }
  return null;
}",0.9971428571428572
195559,"@Override public HdmiDeviceInfo getActiveSource(){
  enforceAccessPermission();
  HdmiCecLocalDeviceTv tv=tv();
  if (tv == null) {
    Slog.w(TAG,""String_Node_Str"");
    return null;
  }
  ActiveSource activeSource=tv.getActiveSource();
  if (activeSource.isValid()) {
    return new HdmiDeviceInfo(activeSource.logicalAddress,activeSource.physicalAddress,HdmiDeviceInfo.PORT_INVALID,HdmiDeviceInfo.DEVICE_INACTIVE,0,""String_Node_Str"");
  }
  int activePath=tv.getActivePath();
  if (activePath != HdmiDeviceInfo.PATH_INVALID) {
    HdmiDeviceInfo info=tv.getDeviceInfoByPath(activePath);
    return (info != null) ? info : new HdmiDeviceInfo(activePath,tv.getActivePortId());
  }
  return null;
}","@Override public HdmiDeviceInfo getActiveSource(){
  enforceAccessPermission();
  HdmiCecLocalDeviceTv tv=tv();
  if (tv == null) {
    Slog.w(TAG,""String_Node_Str"");
    return null;
  }
  ActiveSource activeSource=tv.getActiveSource();
  if (activeSource.isValid()) {
    return new HdmiDeviceInfo(activeSource.logicalAddress,activeSource.physicalAddress,HdmiDeviceInfo.PORT_INVALID,HdmiDeviceInfo.DEVICE_INACTIVE,0,""String_Node_Str"");
  }
  int activePath=tv.getActivePath();
  if (activePath != HdmiDeviceInfo.PATH_INVALID) {
    HdmiDeviceInfo info=tv.getSafeDeviceInfoByPath(activePath);
    return (info != null) ? info : new HdmiDeviceInfo(activePath,tv.getActivePortId());
  }
  return null;
}",0.9971428571428572
195560,"/** 
 * Prints a list of ServiceRecords (dumpsys activity services)
 */
void dumpServicesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,boolean dumpClient,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  ItemMatcher matcher=new ItemMatcher();
  matcher.build(args,opti);
  pw.println(""String_Node_Str"");
  try {
    int[] users=mAm.getUsersLocked();
    for (    int user : users) {
      ServiceMap smap=getServiceMap(user);
      boolean printed=false;
      if (smap.mServicesByName.size() > 0) {
        long nowReal=SystemClock.elapsedRealtime();
        needSep=false;
        for (int si=0; si < smap.mServicesByName.size(); si++) {
          ServiceRecord r=smap.mServicesByName.valueAt(si);
          if (!matcher.match(r,r.name)) {
            continue;
          }
          if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
            continue;
          }
          if (!printed) {
            if (printedAnything) {
              pw.println();
            }
            pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
            printed=true;
          }
          printedAnything=true;
          if (needSep) {
            pw.println();
          }
          pw.print(""String_Node_Str"");
          pw.println(r);
          if (dumpAll) {
            r.dump(pw,""String_Node_Str"");
            needSep=true;
          }
 else {
            pw.print(""String_Node_Str"");
            pw.println(r.app);
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(r.createTime,nowReal,pw);
            pw.print(""String_Node_Str"");
            pw.print(r.startRequested);
            pw.print(""String_Node_Str"");
            pw.println(r.connections.size());
            if (r.connections.size() > 0) {
              pw.println(""String_Node_Str"");
              for (int conni=0; conni < r.connections.size(); conni++) {
                ArrayList<ConnectionRecord> clist=r.connections.valueAt(conni);
                for (int i=0; i < clist.size(); i++) {
                  ConnectionRecord conn=clist.get(i);
                  pw.print(""String_Node_Str"");
                  pw.print(conn.binding.intent.intent.getIntent().toShortString(false,false,false,false));
                  pw.print(""String_Node_Str"");
                  ProcessRecord proc=conn.binding.client;
                  pw.println(proc != null ? proc.toShortString() : ""String_Node_Str"");
                }
              }
            }
          }
          if (dumpClient && r.app != null && r.app.thread != null) {
            pw.println(""String_Node_Str"");
            pw.flush();
            try {
              TransferPipe tp=new TransferPipe();
              try {
                r.app.thread.dumpService(tp.getWriteFd().getFileDescriptor(),r,args);
                tp.setBufferPrefix(""String_Node_Str"");
                tp.go(fd,2000);
              }
  finally {
                tp.kill();
              }
            }
 catch (            IOException e) {
              pw.println(""String_Node_Str"" + e);
            }
catch (            RemoteException e) {
              pw.println(""String_Node_Str"");
            }
            needSep=true;
          }
        }
        needSep|=printed;
      }
      printed=false;
      for (int si=0, SN=smap.mDelayedStartList.size(); si < SN; si++) {
        ServiceRecord r=smap.mDelayedStartList.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
      printed=false;
      for (int si=0, SN=smap.mStartingBackground.size(); si < SN; si++) {
        ServiceRecord r=smap.mStartingBackground.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
    }
  }
 catch (  Exception e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
  if (mPendingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mPendingServices.size(); i++) {
      ServiceRecord r=mPendingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mRestartingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mRestartingServices.size(); i++) {
      ServiceRecord r=mRestartingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mDestroyingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mDestroyingServices.size(); i++) {
      ServiceRecord r=mDestroyingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (dumpAll) {
    boolean printed=false;
    for (int ic=0; ic < mServiceConnections.size(); ic++) {
      ArrayList<ConnectionRecord> r=mServiceConnections.valueAt(ic);
      for (int i=0; i < r.size(); i++) {
        ConnectionRecord cr=r.get(i);
        if (!matcher.match(cr.binding.service,cr.binding.service.name)) {
          continue;
        }
        if (dumpPackage != null && (cr.binding.client == null || !dumpPackage.equals(cr.binding.client.info.packageName))) {
          continue;
        }
        printedAnything=true;
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.println(cr);
        cr.dump(pw,""String_Node_Str"");
      }
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}","/** 
 * Prints a list of ServiceRecords (dumpsys activity services)
 */
void dumpServicesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,boolean dumpClient,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  ItemMatcher matcher=new ItemMatcher();
  matcher.build(args,opti);
  pw.println(""String_Node_Str"");
  try {
    if (mLastAnrDump != null) {
      pw.println(""String_Node_Str"");
      pw.print(mLastAnrDump);
      pw.println();
    }
    int[] users=mAm.getUsersLocked();
    for (    int user : users) {
      ServiceMap smap=getServiceMap(user);
      boolean printed=false;
      if (smap.mServicesByName.size() > 0) {
        long nowReal=SystemClock.elapsedRealtime();
        needSep=false;
        for (int si=0; si < smap.mServicesByName.size(); si++) {
          ServiceRecord r=smap.mServicesByName.valueAt(si);
          if (!matcher.match(r,r.name)) {
            continue;
          }
          if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
            continue;
          }
          if (!printed) {
            if (printedAnything) {
              pw.println();
            }
            pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
            printed=true;
          }
          printedAnything=true;
          if (needSep) {
            pw.println();
          }
          pw.print(""String_Node_Str"");
          pw.println(r);
          if (dumpAll) {
            r.dump(pw,""String_Node_Str"");
            needSep=true;
          }
 else {
            pw.print(""String_Node_Str"");
            pw.println(r.app);
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(r.createTime,nowReal,pw);
            pw.print(""String_Node_Str"");
            pw.print(r.startRequested);
            pw.print(""String_Node_Str"");
            pw.println(r.connections.size());
            if (r.connections.size() > 0) {
              pw.println(""String_Node_Str"");
              for (int conni=0; conni < r.connections.size(); conni++) {
                ArrayList<ConnectionRecord> clist=r.connections.valueAt(conni);
                for (int i=0; i < clist.size(); i++) {
                  ConnectionRecord conn=clist.get(i);
                  pw.print(""String_Node_Str"");
                  pw.print(conn.binding.intent.intent.getIntent().toShortString(false,false,false,false));
                  pw.print(""String_Node_Str"");
                  ProcessRecord proc=conn.binding.client;
                  pw.println(proc != null ? proc.toShortString() : ""String_Node_Str"");
                }
              }
            }
          }
          if (dumpClient && r.app != null && r.app.thread != null) {
            pw.println(""String_Node_Str"");
            pw.flush();
            try {
              TransferPipe tp=new TransferPipe();
              try {
                r.app.thread.dumpService(tp.getWriteFd().getFileDescriptor(),r,args);
                tp.setBufferPrefix(""String_Node_Str"");
                tp.go(fd,2000);
              }
  finally {
                tp.kill();
              }
            }
 catch (            IOException e) {
              pw.println(""String_Node_Str"" + e);
            }
catch (            RemoteException e) {
              pw.println(""String_Node_Str"");
            }
            needSep=true;
          }
        }
        needSep|=printed;
      }
      printed=false;
      for (int si=0, SN=smap.mDelayedStartList.size(); si < SN; si++) {
        ServiceRecord r=smap.mDelayedStartList.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
      printed=false;
      for (int si=0, SN=smap.mStartingBackground.size(); si < SN; si++) {
        ServiceRecord r=smap.mStartingBackground.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
    }
  }
 catch (  Exception e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
  if (mPendingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mPendingServices.size(); i++) {
      ServiceRecord r=mPendingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mRestartingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mRestartingServices.size(); i++) {
      ServiceRecord r=mRestartingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mDestroyingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mDestroyingServices.size(); i++) {
      ServiceRecord r=mDestroyingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (dumpAll) {
    boolean printed=false;
    for (int ic=0; ic < mServiceConnections.size(); ic++) {
      ArrayList<ConnectionRecord> r=mServiceConnections.valueAt(ic);
      for (int i=0; i < r.size(); i++) {
        ConnectionRecord cr=r.get(i);
        if (!matcher.match(cr.binding.service,cr.binding.service.name)) {
          continue;
        }
        if (dumpPackage != null && (cr.binding.client == null || !dumpPackage.equals(cr.binding.client.info.packageName))) {
          continue;
        }
        printedAnything=true;
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.println(cr);
        cr.dump(pw,""String_Node_Str"");
      }
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}",0.9916926962185152
195561,"void serviceTimeout(ProcessRecord proc){
  String anrMessage=null;
synchronized (mAm) {
    if (proc.executingServices.size() == 0 || proc.thread == null) {
      return;
    }
    final long now=SystemClock.uptimeMillis();
    final long maxTime=now - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);
    ServiceRecord timeout=null;
    long nextTime=0;
    for (int i=proc.executingServices.size() - 1; i >= 0; i--) {
      ServiceRecord sr=proc.executingServices.valueAt(i);
      if (sr.executingStart < maxTime) {
        timeout=sr;
        break;
      }
      if (sr.executingStart > nextTime) {
        nextTime=sr.executingStart;
      }
    }
    if (timeout != null && mAm.mLruProcesses.contains(proc)) {
      Slog.w(TAG,""String_Node_Str"" + timeout);
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      sb.append(timeout.shortName);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.executingStart - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(timeout.executeNesting);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.destroyTime - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(proc.execServicesFg);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.createTime - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(timeout.app != null ? timeout.app.toShortString() : ""String_Node_Str"");
      sb.append(""String_Node_Str"");
      anrMessage=sb.toString();
    }
 else {
      Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);
      msg.obj=proc;
      mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));
    }
  }
  if (anrMessage != null) {
    mAm.appNotResponding(proc,null,null,false,anrMessage);
  }
}","void serviceTimeout(ProcessRecord proc){
  String anrMessage=null;
synchronized (mAm) {
    if (proc.executingServices.size() == 0 || proc.thread == null) {
      return;
    }
    final long now=SystemClock.uptimeMillis();
    final long maxTime=now - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);
    ServiceRecord timeout=null;
    long nextTime=0;
    for (int i=proc.executingServices.size() - 1; i >= 0; i--) {
      ServiceRecord sr=proc.executingServices.valueAt(i);
      if (sr.executingStart < maxTime) {
        timeout=sr;
        break;
      }
      if (sr.executingStart > nextTime) {
        nextTime=sr.executingStart;
      }
    }
    if (timeout != null && mAm.mLruProcesses.contains(proc)) {
      Slog.w(TAG,""String_Node_Str"" + timeout);
      StringWriter sw=new StringWriter();
      PrintWriter pw=new FastPrintWriter(sw,false,1024);
      pw.println(timeout);
      timeout.dump(pw,""String_Node_Str"");
      pw.close();
      mLastAnrDump=sw.toString();
      mAm.mHandler.removeCallbacks(mLastAnrDumpClearer);
      mAm.mHandler.postDelayed(mLastAnrDumpClearer,LAST_ANR_LIFETIME_DURATION_MSECS);
      anrMessage=""String_Node_Str"" + timeout.shortName;
    }
 else {
      Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);
      msg.obj=proc;
      mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));
    }
  }
  if (anrMessage != null) {
    mAm.appNotResponding(proc,null,null,false,anrMessage);
  }
}",0.6839677047289504
195562,"/** 
 * Prints a list of ServiceRecords (dumpsys activity services)
 */
void dumpServicesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,boolean dumpClient,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  ItemMatcher matcher=new ItemMatcher();
  matcher.build(args,opti);
  pw.println(""String_Node_Str"");
  try {
    int[] users=mAm.getUsersLocked();
    for (    int user : users) {
      ServiceMap smap=getServiceMap(user);
      boolean printed=false;
      if (smap.mServicesByName.size() > 0) {
        long nowReal=SystemClock.elapsedRealtime();
        needSep=false;
        for (int si=0; si < smap.mServicesByName.size(); si++) {
          ServiceRecord r=smap.mServicesByName.valueAt(si);
          if (!matcher.match(r,r.name)) {
            continue;
          }
          if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
            continue;
          }
          if (!printed) {
            if (printedAnything) {
              pw.println();
            }
            pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
            printed=true;
          }
          printedAnything=true;
          if (needSep) {
            pw.println();
          }
          pw.print(""String_Node_Str"");
          pw.println(r);
          if (dumpAll) {
            r.dump(pw,""String_Node_Str"");
            needSep=true;
          }
 else {
            pw.print(""String_Node_Str"");
            pw.println(r.app);
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(r.createTime,nowReal,pw);
            pw.print(""String_Node_Str"");
            pw.print(r.startRequested);
            pw.print(""String_Node_Str"");
            pw.println(r.connections.size());
            if (r.connections.size() > 0) {
              pw.println(""String_Node_Str"");
              for (int conni=0; conni < r.connections.size(); conni++) {
                ArrayList<ConnectionRecord> clist=r.connections.valueAt(conni);
                for (int i=0; i < clist.size(); i++) {
                  ConnectionRecord conn=clist.get(i);
                  pw.print(""String_Node_Str"");
                  pw.print(conn.binding.intent.intent.getIntent().toShortString(false,false,false,false));
                  pw.print(""String_Node_Str"");
                  ProcessRecord proc=conn.binding.client;
                  pw.println(proc != null ? proc.toShortString() : ""String_Node_Str"");
                }
              }
            }
          }
          if (dumpClient && r.app != null && r.app.thread != null) {
            pw.println(""String_Node_Str"");
            pw.flush();
            try {
              TransferPipe tp=new TransferPipe();
              try {
                r.app.thread.dumpService(tp.getWriteFd().getFileDescriptor(),r,args);
                tp.setBufferPrefix(""String_Node_Str"");
                tp.go(fd,2000);
              }
  finally {
                tp.kill();
              }
            }
 catch (            IOException e) {
              pw.println(""String_Node_Str"" + e);
            }
catch (            RemoteException e) {
              pw.println(""String_Node_Str"");
            }
            needSep=true;
          }
        }
        needSep|=printed;
      }
      printed=false;
      for (int si=0, SN=smap.mDelayedStartList.size(); si < SN; si++) {
        ServiceRecord r=smap.mDelayedStartList.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
      printed=false;
      for (int si=0, SN=smap.mStartingBackground.size(); si < SN; si++) {
        ServiceRecord r=smap.mStartingBackground.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
    }
  }
 catch (  Exception e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
  if (mPendingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mPendingServices.size(); i++) {
      ServiceRecord r=mPendingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mRestartingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mRestartingServices.size(); i++) {
      ServiceRecord r=mRestartingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mDestroyingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mDestroyingServices.size(); i++) {
      ServiceRecord r=mDestroyingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (dumpAll) {
    boolean printed=false;
    for (int ic=0; ic < mServiceConnections.size(); ic++) {
      ArrayList<ConnectionRecord> r=mServiceConnections.valueAt(ic);
      for (int i=0; i < r.size(); i++) {
        ConnectionRecord cr=r.get(i);
        if (!matcher.match(cr.binding.service,cr.binding.service.name)) {
          continue;
        }
        if (dumpPackage != null && (cr.binding.client == null || !dumpPackage.equals(cr.binding.client.info.packageName))) {
          continue;
        }
        printedAnything=true;
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.println(cr);
        cr.dump(pw,""String_Node_Str"");
      }
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}","/** 
 * Prints a list of ServiceRecords (dumpsys activity services)
 */
void dumpServicesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,boolean dumpClient,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  ItemMatcher matcher=new ItemMatcher();
  matcher.build(args,opti);
  pw.println(""String_Node_Str"");
  try {
    if (mLastAnrDump != null) {
      pw.println(""String_Node_Str"");
      pw.print(mLastAnrDump);
      pw.println();
    }
    int[] users=mAm.getUsersLocked();
    for (    int user : users) {
      ServiceMap smap=getServiceMap(user);
      boolean printed=false;
      if (smap.mServicesByName.size() > 0) {
        long nowReal=SystemClock.elapsedRealtime();
        needSep=false;
        for (int si=0; si < smap.mServicesByName.size(); si++) {
          ServiceRecord r=smap.mServicesByName.valueAt(si);
          if (!matcher.match(r,r.name)) {
            continue;
          }
          if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
            continue;
          }
          if (!printed) {
            if (printedAnything) {
              pw.println();
            }
            pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
            printed=true;
          }
          printedAnything=true;
          if (needSep) {
            pw.println();
          }
          pw.print(""String_Node_Str"");
          pw.println(r);
          if (dumpAll) {
            r.dump(pw,""String_Node_Str"");
            needSep=true;
          }
 else {
            pw.print(""String_Node_Str"");
            pw.println(r.app);
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(r.createTime,nowReal,pw);
            pw.print(""String_Node_Str"");
            pw.print(r.startRequested);
            pw.print(""String_Node_Str"");
            pw.println(r.connections.size());
            if (r.connections.size() > 0) {
              pw.println(""String_Node_Str"");
              for (int conni=0; conni < r.connections.size(); conni++) {
                ArrayList<ConnectionRecord> clist=r.connections.valueAt(conni);
                for (int i=0; i < clist.size(); i++) {
                  ConnectionRecord conn=clist.get(i);
                  pw.print(""String_Node_Str"");
                  pw.print(conn.binding.intent.intent.getIntent().toShortString(false,false,false,false));
                  pw.print(""String_Node_Str"");
                  ProcessRecord proc=conn.binding.client;
                  pw.println(proc != null ? proc.toShortString() : ""String_Node_Str"");
                }
              }
            }
          }
          if (dumpClient && r.app != null && r.app.thread != null) {
            pw.println(""String_Node_Str"");
            pw.flush();
            try {
              TransferPipe tp=new TransferPipe();
              try {
                r.app.thread.dumpService(tp.getWriteFd().getFileDescriptor(),r,args);
                tp.setBufferPrefix(""String_Node_Str"");
                tp.go(fd,2000);
              }
  finally {
                tp.kill();
              }
            }
 catch (            IOException e) {
              pw.println(""String_Node_Str"" + e);
            }
catch (            RemoteException e) {
              pw.println(""String_Node_Str"");
            }
            needSep=true;
          }
        }
        needSep|=printed;
      }
      printed=false;
      for (int si=0, SN=smap.mDelayedStartList.size(); si < SN; si++) {
        ServiceRecord r=smap.mDelayedStartList.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
      printed=false;
      for (int si=0, SN=smap.mStartingBackground.size(); si < SN; si++) {
        ServiceRecord r=smap.mStartingBackground.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
    }
  }
 catch (  Exception e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
  if (mPendingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mPendingServices.size(); i++) {
      ServiceRecord r=mPendingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mRestartingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mRestartingServices.size(); i++) {
      ServiceRecord r=mRestartingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mDestroyingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mDestroyingServices.size(); i++) {
      ServiceRecord r=mDestroyingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (dumpAll) {
    boolean printed=false;
    for (int ic=0; ic < mServiceConnections.size(); ic++) {
      ArrayList<ConnectionRecord> r=mServiceConnections.valueAt(ic);
      for (int i=0; i < r.size(); i++) {
        ConnectionRecord cr=r.get(i);
        if (!matcher.match(cr.binding.service,cr.binding.service.name)) {
          continue;
        }
        if (dumpPackage != null && (cr.binding.client == null || !dumpPackage.equals(cr.binding.client.info.packageName))) {
          continue;
        }
        printedAnything=true;
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.println(cr);
        cr.dump(pw,""String_Node_Str"");
      }
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}",0.9916926962185152
195563,"void serviceTimeout(ProcessRecord proc){
  String anrMessage=null;
synchronized (mAm) {
    if (proc.executingServices.size() == 0 || proc.thread == null) {
      return;
    }
    final long now=SystemClock.uptimeMillis();
    final long maxTime=now - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);
    ServiceRecord timeout=null;
    long nextTime=0;
    for (int i=proc.executingServices.size() - 1; i >= 0; i--) {
      ServiceRecord sr=proc.executingServices.valueAt(i);
      if (sr.executingStart < maxTime) {
        timeout=sr;
        break;
      }
      if (sr.executingStart > nextTime) {
        nextTime=sr.executingStart;
      }
    }
    if (timeout != null && mAm.mLruProcesses.contains(proc)) {
      Slog.w(TAG,""String_Node_Str"" + timeout);
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      sb.append(timeout.shortName);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.executingStart - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(timeout.executeNesting);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.destroyTime - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(proc.execServicesFg);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.createTime - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(timeout.app != null ? timeout.app.toShortString() : ""String_Node_Str"");
      sb.append(""String_Node_Str"");
      anrMessage=sb.toString();
    }
 else {
      Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);
      msg.obj=proc;
      mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));
    }
  }
  if (anrMessage != null) {
    mAm.appNotResponding(proc,null,null,false,anrMessage);
  }
}","void serviceTimeout(ProcessRecord proc){
  String anrMessage=null;
synchronized (mAm) {
    if (proc.executingServices.size() == 0 || proc.thread == null) {
      return;
    }
    final long now=SystemClock.uptimeMillis();
    final long maxTime=now - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);
    ServiceRecord timeout=null;
    long nextTime=0;
    for (int i=proc.executingServices.size() - 1; i >= 0; i--) {
      ServiceRecord sr=proc.executingServices.valueAt(i);
      if (sr.executingStart < maxTime) {
        timeout=sr;
        break;
      }
      if (sr.executingStart > nextTime) {
        nextTime=sr.executingStart;
      }
    }
    if (timeout != null && mAm.mLruProcesses.contains(proc)) {
      Slog.w(TAG,""String_Node_Str"" + timeout);
      StringWriter sw=new StringWriter();
      PrintWriter pw=new FastPrintWriter(sw,false,1024);
      pw.println(timeout);
      timeout.dump(pw,""String_Node_Str"");
      pw.close();
      mLastAnrDump=sw.toString();
      mAm.mHandler.removeCallbacks(mLastAnrDumpClearer);
      mAm.mHandler.postDelayed(mLastAnrDumpClearer,LAST_ANR_LIFETIME_DURATION_MSECS);
      anrMessage=""String_Node_Str"" + timeout.shortName;
    }
 else {
      Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);
      msg.obj=proc;
      mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));
    }
  }
  if (anrMessage != null) {
    mAm.appNotResponding(proc,null,null,false,anrMessage);
  }
}",0.6839677047289504
195564,"/** 
 * Prints a list of ServiceRecords (dumpsys activity services)
 */
void dumpServicesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,boolean dumpClient,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  ItemMatcher matcher=new ItemMatcher();
  matcher.build(args,opti);
  pw.println(""String_Node_Str"");
  try {
    int[] users=mAm.getUsersLocked();
    for (    int user : users) {
      ServiceMap smap=getServiceMap(user);
      boolean printed=false;
      if (smap.mServicesByName.size() > 0) {
        long nowReal=SystemClock.elapsedRealtime();
        needSep=false;
        for (int si=0; si < smap.mServicesByName.size(); si++) {
          ServiceRecord r=smap.mServicesByName.valueAt(si);
          if (!matcher.match(r,r.name)) {
            continue;
          }
          if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
            continue;
          }
          if (!printed) {
            if (printedAnything) {
              pw.println();
            }
            pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
            printed=true;
          }
          printedAnything=true;
          if (needSep) {
            pw.println();
          }
          pw.print(""String_Node_Str"");
          pw.println(r);
          if (dumpAll) {
            r.dump(pw,""String_Node_Str"");
            needSep=true;
          }
 else {
            pw.print(""String_Node_Str"");
            pw.println(r.app);
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(r.createTime,nowReal,pw);
            pw.print(""String_Node_Str"");
            pw.print(r.startRequested);
            pw.print(""String_Node_Str"");
            pw.println(r.connections.size());
            if (r.connections.size() > 0) {
              pw.println(""String_Node_Str"");
              for (int conni=0; conni < r.connections.size(); conni++) {
                ArrayList<ConnectionRecord> clist=r.connections.valueAt(conni);
                for (int i=0; i < clist.size(); i++) {
                  ConnectionRecord conn=clist.get(i);
                  pw.print(""String_Node_Str"");
                  pw.print(conn.binding.intent.intent.getIntent().toShortString(false,false,false,false));
                  pw.print(""String_Node_Str"");
                  ProcessRecord proc=conn.binding.client;
                  pw.println(proc != null ? proc.toShortString() : ""String_Node_Str"");
                }
              }
            }
          }
          if (dumpClient && r.app != null && r.app.thread != null) {
            pw.println(""String_Node_Str"");
            pw.flush();
            try {
              TransferPipe tp=new TransferPipe();
              try {
                r.app.thread.dumpService(tp.getWriteFd().getFileDescriptor(),r,args);
                tp.setBufferPrefix(""String_Node_Str"");
                tp.go(fd,2000);
              }
  finally {
                tp.kill();
              }
            }
 catch (            IOException e) {
              pw.println(""String_Node_Str"" + e);
            }
catch (            RemoteException e) {
              pw.println(""String_Node_Str"");
            }
            needSep=true;
          }
        }
        needSep|=printed;
      }
      printed=false;
      for (int si=0, SN=smap.mDelayedStartList.size(); si < SN; si++) {
        ServiceRecord r=smap.mDelayedStartList.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
      printed=false;
      for (int si=0, SN=smap.mStartingBackground.size(); si < SN; si++) {
        ServiceRecord r=smap.mStartingBackground.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
    }
  }
 catch (  Exception e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
  if (mPendingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mPendingServices.size(); i++) {
      ServiceRecord r=mPendingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mRestartingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mRestartingServices.size(); i++) {
      ServiceRecord r=mRestartingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mDestroyingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mDestroyingServices.size(); i++) {
      ServiceRecord r=mDestroyingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (dumpAll) {
    boolean printed=false;
    for (int ic=0; ic < mServiceConnections.size(); ic++) {
      ArrayList<ConnectionRecord> r=mServiceConnections.valueAt(ic);
      for (int i=0; i < r.size(); i++) {
        ConnectionRecord cr=r.get(i);
        if (!matcher.match(cr.binding.service,cr.binding.service.name)) {
          continue;
        }
        if (dumpPackage != null && (cr.binding.client == null || !dumpPackage.equals(cr.binding.client.info.packageName))) {
          continue;
        }
        printedAnything=true;
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.println(cr);
        cr.dump(pw,""String_Node_Str"");
      }
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}","/** 
 * Prints a list of ServiceRecords (dumpsys activity services)
 */
void dumpServicesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,boolean dumpClient,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  ItemMatcher matcher=new ItemMatcher();
  matcher.build(args,opti);
  pw.println(""String_Node_Str"");
  try {
    if (mLastAnrDump != null) {
      pw.println(""String_Node_Str"");
      pw.print(mLastAnrDump);
      pw.println();
    }
    int[] users=mAm.getUsersLocked();
    for (    int user : users) {
      ServiceMap smap=getServiceMap(user);
      boolean printed=false;
      if (smap.mServicesByName.size() > 0) {
        long nowReal=SystemClock.elapsedRealtime();
        needSep=false;
        for (int si=0; si < smap.mServicesByName.size(); si++) {
          ServiceRecord r=smap.mServicesByName.valueAt(si);
          if (!matcher.match(r,r.name)) {
            continue;
          }
          if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
            continue;
          }
          if (!printed) {
            if (printedAnything) {
              pw.println();
            }
            pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
            printed=true;
          }
          printedAnything=true;
          if (needSep) {
            pw.println();
          }
          pw.print(""String_Node_Str"");
          pw.println(r);
          if (dumpAll) {
            r.dump(pw,""String_Node_Str"");
            needSep=true;
          }
 else {
            pw.print(""String_Node_Str"");
            pw.println(r.app);
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(r.createTime,nowReal,pw);
            pw.print(""String_Node_Str"");
            pw.print(r.startRequested);
            pw.print(""String_Node_Str"");
            pw.println(r.connections.size());
            if (r.connections.size() > 0) {
              pw.println(""String_Node_Str"");
              for (int conni=0; conni < r.connections.size(); conni++) {
                ArrayList<ConnectionRecord> clist=r.connections.valueAt(conni);
                for (int i=0; i < clist.size(); i++) {
                  ConnectionRecord conn=clist.get(i);
                  pw.print(""String_Node_Str"");
                  pw.print(conn.binding.intent.intent.getIntent().toShortString(false,false,false,false));
                  pw.print(""String_Node_Str"");
                  ProcessRecord proc=conn.binding.client;
                  pw.println(proc != null ? proc.toShortString() : ""String_Node_Str"");
                }
              }
            }
          }
          if (dumpClient && r.app != null && r.app.thread != null) {
            pw.println(""String_Node_Str"");
            pw.flush();
            try {
              TransferPipe tp=new TransferPipe();
              try {
                r.app.thread.dumpService(tp.getWriteFd().getFileDescriptor(),r,args);
                tp.setBufferPrefix(""String_Node_Str"");
                tp.go(fd,2000);
              }
  finally {
                tp.kill();
              }
            }
 catch (            IOException e) {
              pw.println(""String_Node_Str"" + e);
            }
catch (            RemoteException e) {
              pw.println(""String_Node_Str"");
            }
            needSep=true;
          }
        }
        needSep|=printed;
      }
      printed=false;
      for (int si=0, SN=smap.mDelayedStartList.size(); si < SN; si++) {
        ServiceRecord r=smap.mDelayedStartList.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
      printed=false;
      for (int si=0, SN=smap.mStartingBackground.size(); si < SN; si++) {
        ServiceRecord r=smap.mStartingBackground.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
    }
  }
 catch (  Exception e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
  if (mPendingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mPendingServices.size(); i++) {
      ServiceRecord r=mPendingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mRestartingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mRestartingServices.size(); i++) {
      ServiceRecord r=mRestartingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mDestroyingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mDestroyingServices.size(); i++) {
      ServiceRecord r=mDestroyingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (dumpAll) {
    boolean printed=false;
    for (int ic=0; ic < mServiceConnections.size(); ic++) {
      ArrayList<ConnectionRecord> r=mServiceConnections.valueAt(ic);
      for (int i=0; i < r.size(); i++) {
        ConnectionRecord cr=r.get(i);
        if (!matcher.match(cr.binding.service,cr.binding.service.name)) {
          continue;
        }
        if (dumpPackage != null && (cr.binding.client == null || !dumpPackage.equals(cr.binding.client.info.packageName))) {
          continue;
        }
        printedAnything=true;
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.println(cr);
        cr.dump(pw,""String_Node_Str"");
      }
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}",0.9916926962185152
195565,"void serviceTimeout(ProcessRecord proc){
  String anrMessage=null;
synchronized (mAm) {
    if (proc.executingServices.size() == 0 || proc.thread == null) {
      return;
    }
    final long now=SystemClock.uptimeMillis();
    final long maxTime=now - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);
    ServiceRecord timeout=null;
    long nextTime=0;
    for (int i=proc.executingServices.size() - 1; i >= 0; i--) {
      ServiceRecord sr=proc.executingServices.valueAt(i);
      if (sr.executingStart < maxTime) {
        timeout=sr;
        break;
      }
      if (sr.executingStart > nextTime) {
        nextTime=sr.executingStart;
      }
    }
    if (timeout != null && mAm.mLruProcesses.contains(proc)) {
      Slog.w(TAG,""String_Node_Str"" + timeout);
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      sb.append(timeout.shortName);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.executingStart - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(timeout.executeNesting);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.destroyTime - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(proc.execServicesFg);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.createTime - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(timeout.app != null ? timeout.app.toShortString() : ""String_Node_Str"");
      sb.append(""String_Node_Str"");
      anrMessage=sb.toString();
    }
 else {
      Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);
      msg.obj=proc;
      mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));
    }
  }
  if (anrMessage != null) {
    mAm.appNotResponding(proc,null,null,false,anrMessage);
  }
}","void serviceTimeout(ProcessRecord proc){
  String anrMessage=null;
synchronized (mAm) {
    if (proc.executingServices.size() == 0 || proc.thread == null) {
      return;
    }
    final long now=SystemClock.uptimeMillis();
    final long maxTime=now - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);
    ServiceRecord timeout=null;
    long nextTime=0;
    for (int i=proc.executingServices.size() - 1; i >= 0; i--) {
      ServiceRecord sr=proc.executingServices.valueAt(i);
      if (sr.executingStart < maxTime) {
        timeout=sr;
        break;
      }
      if (sr.executingStart > nextTime) {
        nextTime=sr.executingStart;
      }
    }
    if (timeout != null && mAm.mLruProcesses.contains(proc)) {
      Slog.w(TAG,""String_Node_Str"" + timeout);
      StringWriter sw=new StringWriter();
      PrintWriter pw=new FastPrintWriter(sw,false,1024);
      pw.println(timeout);
      timeout.dump(pw,""String_Node_Str"");
      pw.close();
      mLastAnrDump=sw.toString();
      mAm.mHandler.removeCallbacks(mLastAnrDumpClearer);
      mAm.mHandler.postDelayed(mLastAnrDumpClearer,LAST_ANR_LIFETIME_DURATION_MSECS);
      anrMessage=""String_Node_Str"" + timeout.shortName;
    }
 else {
      Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);
      msg.obj=proc;
      mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));
    }
  }
  if (anrMessage != null) {
    mAm.appNotResponding(proc,null,null,false,anrMessage);
  }
}",0.6839677047289504
195566,"/** 
 * Prints a list of ServiceRecords (dumpsys activity services)
 */
void dumpServicesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,boolean dumpClient,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  ItemMatcher matcher=new ItemMatcher();
  matcher.build(args,opti);
  pw.println(""String_Node_Str"");
  try {
    int[] users=mAm.getUsersLocked();
    for (    int user : users) {
      ServiceMap smap=getServiceMap(user);
      boolean printed=false;
      if (smap.mServicesByName.size() > 0) {
        long nowReal=SystemClock.elapsedRealtime();
        needSep=false;
        for (int si=0; si < smap.mServicesByName.size(); si++) {
          ServiceRecord r=smap.mServicesByName.valueAt(si);
          if (!matcher.match(r,r.name)) {
            continue;
          }
          if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
            continue;
          }
          if (!printed) {
            if (printedAnything) {
              pw.println();
            }
            pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
            printed=true;
          }
          printedAnything=true;
          if (needSep) {
            pw.println();
          }
          pw.print(""String_Node_Str"");
          pw.println(r);
          if (dumpAll) {
            r.dump(pw,""String_Node_Str"");
            needSep=true;
          }
 else {
            pw.print(""String_Node_Str"");
            pw.println(r.app);
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(r.createTime,nowReal,pw);
            pw.print(""String_Node_Str"");
            pw.print(r.startRequested);
            pw.print(""String_Node_Str"");
            pw.println(r.connections.size());
            if (r.connections.size() > 0) {
              pw.println(""String_Node_Str"");
              for (int conni=0; conni < r.connections.size(); conni++) {
                ArrayList<ConnectionRecord> clist=r.connections.valueAt(conni);
                for (int i=0; i < clist.size(); i++) {
                  ConnectionRecord conn=clist.get(i);
                  pw.print(""String_Node_Str"");
                  pw.print(conn.binding.intent.intent.getIntent().toShortString(false,false,false,false));
                  pw.print(""String_Node_Str"");
                  ProcessRecord proc=conn.binding.client;
                  pw.println(proc != null ? proc.toShortString() : ""String_Node_Str"");
                }
              }
            }
          }
          if (dumpClient && r.app != null && r.app.thread != null) {
            pw.println(""String_Node_Str"");
            pw.flush();
            try {
              TransferPipe tp=new TransferPipe();
              try {
                r.app.thread.dumpService(tp.getWriteFd().getFileDescriptor(),r,args);
                tp.setBufferPrefix(""String_Node_Str"");
                tp.go(fd,2000);
              }
  finally {
                tp.kill();
              }
            }
 catch (            IOException e) {
              pw.println(""String_Node_Str"" + e);
            }
catch (            RemoteException e) {
              pw.println(""String_Node_Str"");
            }
            needSep=true;
          }
        }
        needSep|=printed;
      }
      printed=false;
      for (int si=0, SN=smap.mDelayedStartList.size(); si < SN; si++) {
        ServiceRecord r=smap.mDelayedStartList.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
      printed=false;
      for (int si=0, SN=smap.mStartingBackground.size(); si < SN; si++) {
        ServiceRecord r=smap.mStartingBackground.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
    }
  }
 catch (  Exception e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
  if (mPendingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mPendingServices.size(); i++) {
      ServiceRecord r=mPendingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mRestartingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mRestartingServices.size(); i++) {
      ServiceRecord r=mRestartingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mDestroyingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mDestroyingServices.size(); i++) {
      ServiceRecord r=mDestroyingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (dumpAll) {
    boolean printed=false;
    for (int ic=0; ic < mServiceConnections.size(); ic++) {
      ArrayList<ConnectionRecord> r=mServiceConnections.valueAt(ic);
      for (int i=0; i < r.size(); i++) {
        ConnectionRecord cr=r.get(i);
        if (!matcher.match(cr.binding.service,cr.binding.service.name)) {
          continue;
        }
        if (dumpPackage != null && (cr.binding.client == null || !dumpPackage.equals(cr.binding.client.info.packageName))) {
          continue;
        }
        printedAnything=true;
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.println(cr);
        cr.dump(pw,""String_Node_Str"");
      }
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}","/** 
 * Prints a list of ServiceRecords (dumpsys activity services)
 */
void dumpServicesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,boolean dumpClient,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  ItemMatcher matcher=new ItemMatcher();
  matcher.build(args,opti);
  pw.println(""String_Node_Str"");
  try {
    if (mLastAnrDump != null) {
      pw.println(""String_Node_Str"");
      pw.print(mLastAnrDump);
      pw.println();
    }
    int[] users=mAm.getUsersLocked();
    for (    int user : users) {
      ServiceMap smap=getServiceMap(user);
      boolean printed=false;
      if (smap.mServicesByName.size() > 0) {
        long nowReal=SystemClock.elapsedRealtime();
        needSep=false;
        for (int si=0; si < smap.mServicesByName.size(); si++) {
          ServiceRecord r=smap.mServicesByName.valueAt(si);
          if (!matcher.match(r,r.name)) {
            continue;
          }
          if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
            continue;
          }
          if (!printed) {
            if (printedAnything) {
              pw.println();
            }
            pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
            printed=true;
          }
          printedAnything=true;
          if (needSep) {
            pw.println();
          }
          pw.print(""String_Node_Str"");
          pw.println(r);
          if (dumpAll) {
            r.dump(pw,""String_Node_Str"");
            needSep=true;
          }
 else {
            pw.print(""String_Node_Str"");
            pw.println(r.app);
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(r.createTime,nowReal,pw);
            pw.print(""String_Node_Str"");
            pw.print(r.startRequested);
            pw.print(""String_Node_Str"");
            pw.println(r.connections.size());
            if (r.connections.size() > 0) {
              pw.println(""String_Node_Str"");
              for (int conni=0; conni < r.connections.size(); conni++) {
                ArrayList<ConnectionRecord> clist=r.connections.valueAt(conni);
                for (int i=0; i < clist.size(); i++) {
                  ConnectionRecord conn=clist.get(i);
                  pw.print(""String_Node_Str"");
                  pw.print(conn.binding.intent.intent.getIntent().toShortString(false,false,false,false));
                  pw.print(""String_Node_Str"");
                  ProcessRecord proc=conn.binding.client;
                  pw.println(proc != null ? proc.toShortString() : ""String_Node_Str"");
                }
              }
            }
          }
          if (dumpClient && r.app != null && r.app.thread != null) {
            pw.println(""String_Node_Str"");
            pw.flush();
            try {
              TransferPipe tp=new TransferPipe();
              try {
                r.app.thread.dumpService(tp.getWriteFd().getFileDescriptor(),r,args);
                tp.setBufferPrefix(""String_Node_Str"");
                tp.go(fd,2000);
              }
  finally {
                tp.kill();
              }
            }
 catch (            IOException e) {
              pw.println(""String_Node_Str"" + e);
            }
catch (            RemoteException e) {
              pw.println(""String_Node_Str"");
            }
            needSep=true;
          }
        }
        needSep|=printed;
      }
      printed=false;
      for (int si=0, SN=smap.mDelayedStartList.size(); si < SN; si++) {
        ServiceRecord r=smap.mDelayedStartList.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
      printed=false;
      for (int si=0, SN=smap.mStartingBackground.size(); si < SN; si++) {
        ServiceRecord r=smap.mStartingBackground.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
    }
  }
 catch (  Exception e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
  if (mPendingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mPendingServices.size(); i++) {
      ServiceRecord r=mPendingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mRestartingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mRestartingServices.size(); i++) {
      ServiceRecord r=mRestartingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mDestroyingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mDestroyingServices.size(); i++) {
      ServiceRecord r=mDestroyingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (dumpAll) {
    boolean printed=false;
    for (int ic=0; ic < mServiceConnections.size(); ic++) {
      ArrayList<ConnectionRecord> r=mServiceConnections.valueAt(ic);
      for (int i=0; i < r.size(); i++) {
        ConnectionRecord cr=r.get(i);
        if (!matcher.match(cr.binding.service,cr.binding.service.name)) {
          continue;
        }
        if (dumpPackage != null && (cr.binding.client == null || !dumpPackage.equals(cr.binding.client.info.packageName))) {
          continue;
        }
        printedAnything=true;
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.println(cr);
        cr.dump(pw,""String_Node_Str"");
      }
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}",0.9916926962185152
195567,"void serviceTimeout(ProcessRecord proc){
  String anrMessage=null;
synchronized (mAm) {
    if (proc.executingServices.size() == 0 || proc.thread == null) {
      return;
    }
    final long now=SystemClock.uptimeMillis();
    final long maxTime=now - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);
    ServiceRecord timeout=null;
    long nextTime=0;
    for (int i=proc.executingServices.size() - 1; i >= 0; i--) {
      ServiceRecord sr=proc.executingServices.valueAt(i);
      if (sr.executingStart < maxTime) {
        timeout=sr;
        break;
      }
      if (sr.executingStart > nextTime) {
        nextTime=sr.executingStart;
      }
    }
    if (timeout != null && mAm.mLruProcesses.contains(proc)) {
      Slog.w(TAG,""String_Node_Str"" + timeout);
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      sb.append(timeout.shortName);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.executingStart - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(timeout.executeNesting);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.destroyTime - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(proc.execServicesFg);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.createTime - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(timeout.app != null ? timeout.app.toShortString() : ""String_Node_Str"");
      sb.append(""String_Node_Str"");
      anrMessage=sb.toString();
    }
 else {
      Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);
      msg.obj=proc;
      mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));
    }
  }
  if (anrMessage != null) {
    mAm.appNotResponding(proc,null,null,false,anrMessage);
  }
}","void serviceTimeout(ProcessRecord proc){
  String anrMessage=null;
synchronized (mAm) {
    if (proc.executingServices.size() == 0 || proc.thread == null) {
      return;
    }
    final long now=SystemClock.uptimeMillis();
    final long maxTime=now - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);
    ServiceRecord timeout=null;
    long nextTime=0;
    for (int i=proc.executingServices.size() - 1; i >= 0; i--) {
      ServiceRecord sr=proc.executingServices.valueAt(i);
      if (sr.executingStart < maxTime) {
        timeout=sr;
        break;
      }
      if (sr.executingStart > nextTime) {
        nextTime=sr.executingStart;
      }
    }
    if (timeout != null && mAm.mLruProcesses.contains(proc)) {
      Slog.w(TAG,""String_Node_Str"" + timeout);
      StringWriter sw=new StringWriter();
      PrintWriter pw=new FastPrintWriter(sw,false,1024);
      pw.println(timeout);
      timeout.dump(pw,""String_Node_Str"");
      pw.close();
      mLastAnrDump=sw.toString();
      mAm.mHandler.removeCallbacks(mLastAnrDumpClearer);
      mAm.mHandler.postDelayed(mLastAnrDumpClearer,LAST_ANR_LIFETIME_DURATION_MSECS);
      anrMessage=""String_Node_Str"" + timeout.shortName;
    }
 else {
      Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);
      msg.obj=proc;
      mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));
    }
  }
  if (anrMessage != null) {
    mAm.appNotResponding(proc,null,null,false,anrMessage);
  }
}",0.6839677047289504
195568,"/** 
 * Prints a list of ServiceRecords (dumpsys activity services)
 */
void dumpServicesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,boolean dumpClient,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  ItemMatcher matcher=new ItemMatcher();
  matcher.build(args,opti);
  pw.println(""String_Node_Str"");
  try {
    int[] users=mAm.getUsersLocked();
    for (    int user : users) {
      ServiceMap smap=getServiceMap(user);
      boolean printed=false;
      if (smap.mServicesByName.size() > 0) {
        long nowReal=SystemClock.elapsedRealtime();
        needSep=false;
        for (int si=0; si < smap.mServicesByName.size(); si++) {
          ServiceRecord r=smap.mServicesByName.valueAt(si);
          if (!matcher.match(r,r.name)) {
            continue;
          }
          if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
            continue;
          }
          if (!printed) {
            if (printedAnything) {
              pw.println();
            }
            pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
            printed=true;
          }
          printedAnything=true;
          if (needSep) {
            pw.println();
          }
          pw.print(""String_Node_Str"");
          pw.println(r);
          if (dumpAll) {
            r.dump(pw,""String_Node_Str"");
            needSep=true;
          }
 else {
            pw.print(""String_Node_Str"");
            pw.println(r.app);
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(r.createTime,nowReal,pw);
            pw.print(""String_Node_Str"");
            pw.print(r.startRequested);
            pw.print(""String_Node_Str"");
            pw.println(r.connections.size());
            if (r.connections.size() > 0) {
              pw.println(""String_Node_Str"");
              for (int conni=0; conni < r.connections.size(); conni++) {
                ArrayList<ConnectionRecord> clist=r.connections.valueAt(conni);
                for (int i=0; i < clist.size(); i++) {
                  ConnectionRecord conn=clist.get(i);
                  pw.print(""String_Node_Str"");
                  pw.print(conn.binding.intent.intent.getIntent().toShortString(false,false,false,false));
                  pw.print(""String_Node_Str"");
                  ProcessRecord proc=conn.binding.client;
                  pw.println(proc != null ? proc.toShortString() : ""String_Node_Str"");
                }
              }
            }
          }
          if (dumpClient && r.app != null && r.app.thread != null) {
            pw.println(""String_Node_Str"");
            pw.flush();
            try {
              TransferPipe tp=new TransferPipe();
              try {
                r.app.thread.dumpService(tp.getWriteFd().getFileDescriptor(),r,args);
                tp.setBufferPrefix(""String_Node_Str"");
                tp.go(fd,2000);
              }
  finally {
                tp.kill();
              }
            }
 catch (            IOException e) {
              pw.println(""String_Node_Str"" + e);
            }
catch (            RemoteException e) {
              pw.println(""String_Node_Str"");
            }
            needSep=true;
          }
        }
        needSep|=printed;
      }
      printed=false;
      for (int si=0, SN=smap.mDelayedStartList.size(); si < SN; si++) {
        ServiceRecord r=smap.mDelayedStartList.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
      printed=false;
      for (int si=0, SN=smap.mStartingBackground.size(); si < SN; si++) {
        ServiceRecord r=smap.mStartingBackground.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
    }
  }
 catch (  Exception e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
  if (mPendingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mPendingServices.size(); i++) {
      ServiceRecord r=mPendingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mRestartingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mRestartingServices.size(); i++) {
      ServiceRecord r=mRestartingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mDestroyingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mDestroyingServices.size(); i++) {
      ServiceRecord r=mDestroyingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (dumpAll) {
    boolean printed=false;
    for (int ic=0; ic < mServiceConnections.size(); ic++) {
      ArrayList<ConnectionRecord> r=mServiceConnections.valueAt(ic);
      for (int i=0; i < r.size(); i++) {
        ConnectionRecord cr=r.get(i);
        if (!matcher.match(cr.binding.service,cr.binding.service.name)) {
          continue;
        }
        if (dumpPackage != null && (cr.binding.client == null || !dumpPackage.equals(cr.binding.client.info.packageName))) {
          continue;
        }
        printedAnything=true;
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.println(cr);
        cr.dump(pw,""String_Node_Str"");
      }
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}","/** 
 * Prints a list of ServiceRecords (dumpsys activity services)
 */
void dumpServicesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,boolean dumpClient,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  ItemMatcher matcher=new ItemMatcher();
  matcher.build(args,opti);
  pw.println(""String_Node_Str"");
  try {
    if (mLastAnrDump != null) {
      pw.println(""String_Node_Str"");
      pw.print(mLastAnrDump);
      pw.println();
    }
    int[] users=mAm.getUsersLocked();
    for (    int user : users) {
      ServiceMap smap=getServiceMap(user);
      boolean printed=false;
      if (smap.mServicesByName.size() > 0) {
        long nowReal=SystemClock.elapsedRealtime();
        needSep=false;
        for (int si=0; si < smap.mServicesByName.size(); si++) {
          ServiceRecord r=smap.mServicesByName.valueAt(si);
          if (!matcher.match(r,r.name)) {
            continue;
          }
          if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
            continue;
          }
          if (!printed) {
            if (printedAnything) {
              pw.println();
            }
            pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
            printed=true;
          }
          printedAnything=true;
          if (needSep) {
            pw.println();
          }
          pw.print(""String_Node_Str"");
          pw.println(r);
          if (dumpAll) {
            r.dump(pw,""String_Node_Str"");
            needSep=true;
          }
 else {
            pw.print(""String_Node_Str"");
            pw.println(r.app);
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(r.createTime,nowReal,pw);
            pw.print(""String_Node_Str"");
            pw.print(r.startRequested);
            pw.print(""String_Node_Str"");
            pw.println(r.connections.size());
            if (r.connections.size() > 0) {
              pw.println(""String_Node_Str"");
              for (int conni=0; conni < r.connections.size(); conni++) {
                ArrayList<ConnectionRecord> clist=r.connections.valueAt(conni);
                for (int i=0; i < clist.size(); i++) {
                  ConnectionRecord conn=clist.get(i);
                  pw.print(""String_Node_Str"");
                  pw.print(conn.binding.intent.intent.getIntent().toShortString(false,false,false,false));
                  pw.print(""String_Node_Str"");
                  ProcessRecord proc=conn.binding.client;
                  pw.println(proc != null ? proc.toShortString() : ""String_Node_Str"");
                }
              }
            }
          }
          if (dumpClient && r.app != null && r.app.thread != null) {
            pw.println(""String_Node_Str"");
            pw.flush();
            try {
              TransferPipe tp=new TransferPipe();
              try {
                r.app.thread.dumpService(tp.getWriteFd().getFileDescriptor(),r,args);
                tp.setBufferPrefix(""String_Node_Str"");
                tp.go(fd,2000);
              }
  finally {
                tp.kill();
              }
            }
 catch (            IOException e) {
              pw.println(""String_Node_Str"" + e);
            }
catch (            RemoteException e) {
              pw.println(""String_Node_Str"");
            }
            needSep=true;
          }
        }
        needSep|=printed;
      }
      printed=false;
      for (int si=0, SN=smap.mDelayedStartList.size(); si < SN; si++) {
        ServiceRecord r=smap.mDelayedStartList.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
      printed=false;
      for (int si=0, SN=smap.mStartingBackground.size(); si < SN; si++) {
        ServiceRecord r=smap.mStartingBackground.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println(""String_Node_Str"" + user + ""String_Node_Str"");
          printed=true;
        }
        printedAnything=true;
        pw.print(""String_Node_Str"");
        pw.println(r);
      }
    }
  }
 catch (  Exception e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
  if (mPendingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mPendingServices.size(); i++) {
      ServiceRecord r=mPendingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mRestartingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mRestartingServices.size(); i++) {
      ServiceRecord r=mRestartingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (mDestroyingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mDestroyingServices.size(); i++) {
      ServiceRecord r=mDestroyingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println(""String_Node_Str"");
        printed=true;
      }
      pw.print(""String_Node_Str"");
      pw.println(r);
      r.dump(pw,""String_Node_Str"");
    }
    needSep=true;
  }
  if (dumpAll) {
    boolean printed=false;
    for (int ic=0; ic < mServiceConnections.size(); ic++) {
      ArrayList<ConnectionRecord> r=mServiceConnections.valueAt(ic);
      for (int i=0; i < r.size(); i++) {
        ConnectionRecord cr=r.get(i);
        if (!matcher.match(cr.binding.service,cr.binding.service.name)) {
          continue;
        }
        if (dumpPackage != null && (cr.binding.client == null || !dumpPackage.equals(cr.binding.client.info.packageName))) {
          continue;
        }
        printedAnything=true;
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.println(cr);
        cr.dump(pw,""String_Node_Str"");
      }
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}",0.9916926962185152
195569,"void serviceTimeout(ProcessRecord proc){
  String anrMessage=null;
synchronized (mAm) {
    if (proc.executingServices.size() == 0 || proc.thread == null) {
      return;
    }
    final long now=SystemClock.uptimeMillis();
    final long maxTime=now - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);
    ServiceRecord timeout=null;
    long nextTime=0;
    for (int i=proc.executingServices.size() - 1; i >= 0; i--) {
      ServiceRecord sr=proc.executingServices.valueAt(i);
      if (sr.executingStart < maxTime) {
        timeout=sr;
        break;
      }
      if (sr.executingStart > nextTime) {
        nextTime=sr.executingStart;
      }
    }
    if (timeout != null && mAm.mLruProcesses.contains(proc)) {
      Slog.w(TAG,""String_Node_Str"" + timeout);
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      sb.append(timeout.shortName);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.executingStart - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(timeout.executeNesting);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.destroyTime - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(proc.execServicesFg);
      sb.append(""String_Node_Str"");
      TimeUtils.formatDuration(timeout.createTime - now,sb);
      sb.append(""String_Node_Str"");
      sb.append(timeout.app != null ? timeout.app.toShortString() : ""String_Node_Str"");
      sb.append(""String_Node_Str"");
      anrMessage=sb.toString();
    }
 else {
      Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);
      msg.obj=proc;
      mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));
    }
  }
  if (anrMessage != null) {
    mAm.appNotResponding(proc,null,null,false,anrMessage);
  }
}","void serviceTimeout(ProcessRecord proc){
  String anrMessage=null;
synchronized (mAm) {
    if (proc.executingServices.size() == 0 || proc.thread == null) {
      return;
    }
    final long now=SystemClock.uptimeMillis();
    final long maxTime=now - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);
    ServiceRecord timeout=null;
    long nextTime=0;
    for (int i=proc.executingServices.size() - 1; i >= 0; i--) {
      ServiceRecord sr=proc.executingServices.valueAt(i);
      if (sr.executingStart < maxTime) {
        timeout=sr;
        break;
      }
      if (sr.executingStart > nextTime) {
        nextTime=sr.executingStart;
      }
    }
    if (timeout != null && mAm.mLruProcesses.contains(proc)) {
      Slog.w(TAG,""String_Node_Str"" + timeout);
      StringWriter sw=new StringWriter();
      PrintWriter pw=new FastPrintWriter(sw,false,1024);
      pw.println(timeout);
      timeout.dump(pw,""String_Node_Str"");
      pw.close();
      mLastAnrDump=sw.toString();
      mAm.mHandler.removeCallbacks(mLastAnrDumpClearer);
      mAm.mHandler.postDelayed(mLastAnrDumpClearer,LAST_ANR_LIFETIME_DURATION_MSECS);
      anrMessage=""String_Node_Str"" + timeout.shortName;
    }
 else {
      Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);
      msg.obj=proc;
      mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));
    }
  }
  if (anrMessage != null) {
    mAm.appNotResponding(proc,null,null,false,anrMessage);
  }
}",0.6839677047289504
195570,"@Override public ParcelFileDescriptor openInputPort(int portNumber){
  if (portNumber < 0 || portNumber >= mInputPortCount) {
    Log.e(TAG,""String_Node_Str"" + portNumber);
    return null;
  }
  ParcelFileDescriptor result=null;
  MidiOutputPort newOutputPort=null;
synchronized (mInputPortSenders) {
    if (mInputPortSenders[portNumber] != null) {
      Log.d(TAG,""String_Node_Str"" + portNumber + ""String_Node_Str"");
      return null;
    }
    try {
      ParcelFileDescriptor[] pair=ParcelFileDescriptor.createSocketPair(OsConstants.SOCK_SEQPACKET);
      newOutputPort=new ServerOutputPort(pair[0],portNumber);
      mInputPortSenders[portNumber]=newOutputPort;
      result=pair[1];
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"");
      return null;
    }
    if (newOutputPort != null) {
      ArrayList<MidiReceiver> receivers=mInputPortReceivers[portNumber];
synchronized (receivers) {
        for (int i=0; i < receivers.size(); i++) {
          newOutputPort.connect(receivers.get(i));
        }
      }
    }
  }
  return result;
}","@Override public ParcelFileDescriptor openInputPort(int portNumber){
  if (portNumber < 0 || portNumber >= mInputPortCount) {
    Log.e(TAG,""String_Node_Str"" + portNumber);
    return null;
  }
  ParcelFileDescriptor result=null;
synchronized (mInputPortSenders) {
    if (mInputPortSenders[portNumber] != null) {
      Log.d(TAG,""String_Node_Str"" + portNumber + ""String_Node_Str"");
      return null;
    }
    try {
      ParcelFileDescriptor[] pair=ParcelFileDescriptor.createSocketPair(OsConstants.SOCK_SEQPACKET);
      MidiOutputPort newOutputPort=new ServerOutputPort(pair[0],portNumber);
      mInputPortSenders[portNumber]=newOutputPort;
      result=pair[1];
      ArrayList<MidiReceiver> receivers=mInputPortReceivers[portNumber];
synchronized (receivers) {
        for (int i=0; i < receivers.size(); i++) {
          newOutputPort.connect(receivers.get(i));
        }
      }
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"");
      return null;
    }
  }
  return result;
}",0.7296385542168675
195571,"@Override public void run(){
  byte[] buffer=new byte[MAX_PACKED_MESSAGE_SIZE];
  ArrayList<MidiReceiver> deadReceivers=new ArrayList<MidiReceiver>();
  try {
    while (true) {
      int count=mInputStream.read(buffer);
      if (count < MIN_PACKED_MESSAGE_SIZE || count > MAX_PACKED_MESSAGE_SIZE) {
        Log.e(TAG,""String_Node_Str"" + count);
        break;
      }
      int offset=getMessageOffset(buffer,count);
      int size=getMessageSize(buffer,count);
      long timestamp=getMessageTimeStamp(buffer,count);
synchronized (mReceivers) {
        for (int i=0; i < mReceivers.size(); i++) {
          MidiReceiver receiver=mReceivers.get(i);
          try {
            receiver.onPost(buffer,offset,size,timestamp);
          }
 catch (          IOException e) {
            Log.e(TAG,""String_Node_Str"");
            deadReceivers.add(receiver);
          }
        }
        if (deadReceivers.size() > 0) {
          for (          MidiReceiver receiver : deadReceivers) {
            mReceivers.remove(receiver);
            mReceiverCount--;
          }
          deadReceivers.clear();
        }
        if (mReceiverCount == 0) {
          break;
        }
      }
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"");
    IoUtils.closeQuietly(mInputStream);
    onIOException();
  }
}","@Override public void run(){
  byte[] buffer=new byte[MAX_PACKED_MESSAGE_SIZE];
  ArrayList<MidiReceiver> deadReceivers=new ArrayList<MidiReceiver>();
  try {
    while (true) {
      int count=mInputStream.read(buffer);
      if (count < 0) {
        break;
      }
 else       if (count < MIN_PACKED_MESSAGE_SIZE || count > MAX_PACKED_MESSAGE_SIZE) {
        Log.e(TAG,""String_Node_Str"" + count);
        continue;
      }
      int offset=getMessageOffset(buffer,count);
      int size=getMessageSize(buffer,count);
      long timestamp=getMessageTimeStamp(buffer,count);
synchronized (mReceivers) {
        for (int i=0; i < mReceivers.size(); i++) {
          MidiReceiver receiver=mReceivers.get(i);
          try {
            receiver.onPost(buffer,offset,size,timestamp);
          }
 catch (          IOException e) {
            Log.e(TAG,""String_Node_Str"");
            deadReceivers.add(receiver);
          }
        }
        if (deadReceivers.size() > 0) {
          for (          MidiReceiver receiver : deadReceivers) {
            mReceivers.remove(receiver);
            mReceiverCount--;
          }
          deadReceivers.clear();
        }
        if (mReceiverCount == 0) {
          break;
        }
      }
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"");
    IoUtils.closeQuietly(mInputStream);
    onIOException();
  }
}",0.9758274451468948
195572,"@Override public void run(){
  byte[] buffer=new byte[3];
  try {
    while (true) {
      for (int index=0; index < mPollFDs.length; index++) {
        StructPollfd pfd=mPollFDs[index];
        if ((pfd.revents & OsConstants.POLLIN) != 0) {
          pfd.revents=0;
          int count=readMessage(buffer,index);
          mOutputPortReceivers[index].onPost(buffer,0,count,System.nanoTime());
        }
      }
      Os.poll(mPollFDs,-1);
    }
  }
 catch (  IOException e) {
    Log.d(TAG,""String_Node_Str"");
  }
catch (  ErrnoException e) {
    Log.d(TAG,""String_Node_Str"");
  }
}","@Override public void run(){
  byte[] buffer=new byte[3];
  try {
    boolean done=false;
    while (!done) {
      for (int index=0; index < mPollFDs.length; index++) {
        StructPollfd pfd=mPollFDs[index];
        if ((pfd.revents & OsConstants.POLLIN) != 0) {
          pfd.revents=0;
          int count=readMessage(buffer,index);
          mOutputPortReceivers[index].onPost(buffer,0,count,System.nanoTime());
        }
 else         if ((pfd.revents & (OsConstants.POLLERR | OsConstants.POLLHUP)) != 0) {
          done=true;
        }
      }
      Os.poll(mPollFDs,-1);
    }
  }
 catch (  IOException e) {
    Log.d(TAG,""String_Node_Str"");
  }
catch (  ErrnoException e) {
    Log.d(TAG,""String_Node_Str"");
  }
}",0.8868501529051988
195573,"private UsbMidiDevice(MidiDeviceServer server,FileDescriptor[] inputFiles,FileDescriptor[] outputFiles){
  mServer=server;
  int inputCount=inputFiles.length;
  int outputCount=outputFiles.length;
  mPollFDs=new StructPollfd[inputCount];
  mInputStreams=new FileInputStream[inputCount];
  for (int i=0; i < inputCount; i++) {
    FileDescriptor fd=inputFiles[i];
    StructPollfd pollfd=new StructPollfd();
    pollfd.fd=fd;
    pollfd.events=(short)OsConstants.POLLIN;
    mPollFDs[i]=pollfd;
    mInputStreams[i]=new FileInputStream(fd);
  }
  mOutputStreams=new FileOutputStream[outputCount];
  for (int i=0; i < outputCount; i++) {
    mOutputStreams[i]=new FileOutputStream(outputFiles[i]);
  }
  mOutputPortReceivers=new MidiReceiver[outputCount];
  for (int port=0; port < outputCount; port++) {
    mOutputPortReceivers[port]=server.openOutputPortReceiver(port);
  }
  for (int port=0; port < inputCount; port++) {
    final int portNumberF=port;
    MidiReceiver receiver=new MidiReceiver(){
      @Override public void onPost(      byte[] data,      int offset,      int count,      long timestamp) throws IOException {
        mOutputStreams[portNumberF].write(data,offset,count);
      }
    }
;
    MidiSender sender=server.openInputPortSender(port);
    sender.connect(receiver);
  }
  new Thread(){
    @Override public void run(){
      byte[] buffer=new byte[3];
      try {
        while (true) {
          for (int index=0; index < mPollFDs.length; index++) {
            StructPollfd pfd=mPollFDs[index];
            if ((pfd.revents & OsConstants.POLLIN) != 0) {
              pfd.revents=0;
              int count=readMessage(buffer,index);
              mOutputPortReceivers[index].onPost(buffer,0,count,System.nanoTime());
            }
          }
          Os.poll(mPollFDs,-1);
        }
      }
 catch (      IOException e) {
        Log.d(TAG,""String_Node_Str"");
      }
catch (      ErrnoException e) {
        Log.d(TAG,""String_Node_Str"");
      }
    }
  }
.start();
}","private UsbMidiDevice(MidiDeviceServer server,FileDescriptor[] inputFiles,FileDescriptor[] outputFiles){
  mServer=server;
  int inputCount=inputFiles.length;
  int outputCount=outputFiles.length;
  mPollFDs=new StructPollfd[inputCount];
  mInputStreams=new FileInputStream[inputCount];
  for (int i=0; i < inputCount; i++) {
    FileDescriptor fd=inputFiles[i];
    StructPollfd pollfd=new StructPollfd();
    pollfd.fd=fd;
    pollfd.events=(short)OsConstants.POLLIN;
    mPollFDs[i]=pollfd;
    mInputStreams[i]=new FileInputStream(fd);
  }
  mOutputStreams=new FileOutputStream[outputCount];
  for (int i=0; i < outputCount; i++) {
    mOutputStreams[i]=new FileOutputStream(outputFiles[i]);
  }
  mOutputPortReceivers=new MidiReceiver[outputCount];
  for (int port=0; port < outputCount; port++) {
    mOutputPortReceivers[port]=server.openOutputPortReceiver(port);
  }
  for (int port=0; port < inputCount; port++) {
    final int portNumberF=port;
    MidiReceiver receiver=new MidiReceiver(){
      @Override public void onPost(      byte[] data,      int offset,      int count,      long timestamp) throws IOException {
        mOutputStreams[portNumberF].write(data,offset,count);
      }
    }
;
    MidiSender sender=server.openInputPortSender(port);
    sender.connect(receiver);
  }
  new Thread(){
    @Override public void run(){
      byte[] buffer=new byte[3];
      try {
        boolean done=false;
        while (!done) {
          for (int index=0; index < mPollFDs.length; index++) {
            StructPollfd pfd=mPollFDs[index];
            if ((pfd.revents & OsConstants.POLLIN) != 0) {
              pfd.revents=0;
              int count=readMessage(buffer,index);
              mOutputPortReceivers[index].onPost(buffer,0,count,System.nanoTime());
            }
 else             if ((pfd.revents & (OsConstants.POLLERR | OsConstants.POLLHUP)) != 0) {
              done=true;
            }
          }
          Os.poll(mPollFDs,-1);
        }
      }
 catch (      IOException e) {
        Log.d(TAG,""String_Node_Str"");
      }
catch (      ErrnoException e) {
        Log.d(TAG,""String_Node_Str"");
      }
    }
  }
.start();
}",0.9605769230769232
195574,"@Override public ParcelFileDescriptor openInputPort(int portNumber){
  if (portNumber < 0 || portNumber >= mInputPortCount) {
    Log.e(TAG,""String_Node_Str"" + portNumber);
    return null;
  }
  ParcelFileDescriptor result=null;
  MidiOutputPort newOutputPort=null;
synchronized (mInputPortSenders) {
    if (mInputPortSenders[portNumber] != null) {
      Log.d(TAG,""String_Node_Str"" + portNumber + ""String_Node_Str"");
      return null;
    }
    try {
      ParcelFileDescriptor[] pair=ParcelFileDescriptor.createSocketPair(OsConstants.SOCK_SEQPACKET);
      newOutputPort=new ServerOutputPort(pair[0],portNumber);
      mInputPortSenders[portNumber]=newOutputPort;
      result=pair[1];
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"");
      return null;
    }
    if (newOutputPort != null) {
      ArrayList<MidiReceiver> receivers=mInputPortReceivers[portNumber];
synchronized (receivers) {
        for (int i=0; i < receivers.size(); i++) {
          newOutputPort.connect(receivers.get(i));
        }
      }
    }
  }
  return result;
}","@Override public ParcelFileDescriptor openInputPort(int portNumber){
  if (portNumber < 0 || portNumber >= mInputPortCount) {
    Log.e(TAG,""String_Node_Str"" + portNumber);
    return null;
  }
  ParcelFileDescriptor result=null;
synchronized (mInputPortSenders) {
    if (mInputPortSenders[portNumber] != null) {
      Log.d(TAG,""String_Node_Str"" + portNumber + ""String_Node_Str"");
      return null;
    }
    try {
      ParcelFileDescriptor[] pair=ParcelFileDescriptor.createSocketPair(OsConstants.SOCK_SEQPACKET);
      MidiOutputPort newOutputPort=new ServerOutputPort(pair[0],portNumber);
      mInputPortSenders[portNumber]=newOutputPort;
      result=pair[1];
      ArrayList<MidiReceiver> receivers=mInputPortReceivers[portNumber];
synchronized (receivers) {
        for (int i=0; i < receivers.size(); i++) {
          newOutputPort.connect(receivers.get(i));
        }
      }
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"");
      return null;
    }
  }
  return result;
}",0.7296385542168675
195575,"@Override public void run(){
  byte[] buffer=new byte[MAX_PACKED_MESSAGE_SIZE];
  ArrayList<MidiReceiver> deadReceivers=new ArrayList<MidiReceiver>();
  try {
    while (true) {
      int count=mInputStream.read(buffer);
      if (count < MIN_PACKED_MESSAGE_SIZE || count > MAX_PACKED_MESSAGE_SIZE) {
        Log.e(TAG,""String_Node_Str"" + count);
        break;
      }
      int offset=getMessageOffset(buffer,count);
      int size=getMessageSize(buffer,count);
      long timestamp=getMessageTimeStamp(buffer,count);
synchronized (mReceivers) {
        for (int i=0; i < mReceivers.size(); i++) {
          MidiReceiver receiver=mReceivers.get(i);
          try {
            receiver.onPost(buffer,offset,size,timestamp);
          }
 catch (          IOException e) {
            Log.e(TAG,""String_Node_Str"");
            deadReceivers.add(receiver);
          }
        }
        if (deadReceivers.size() > 0) {
          for (          MidiReceiver receiver : deadReceivers) {
            mReceivers.remove(receiver);
            mReceiverCount--;
          }
          deadReceivers.clear();
        }
        if (mReceiverCount == 0) {
          break;
        }
      }
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"");
    IoUtils.closeQuietly(mInputStream);
    onIOException();
  }
}","@Override public void run(){
  byte[] buffer=new byte[MAX_PACKED_MESSAGE_SIZE];
  ArrayList<MidiReceiver> deadReceivers=new ArrayList<MidiReceiver>();
  try {
    while (true) {
      int count=mInputStream.read(buffer);
      if (count < 0) {
        break;
      }
 else       if (count < MIN_PACKED_MESSAGE_SIZE || count > MAX_PACKED_MESSAGE_SIZE) {
        Log.e(TAG,""String_Node_Str"" + count);
        continue;
      }
      int offset=getMessageOffset(buffer,count);
      int size=getMessageSize(buffer,count);
      long timestamp=getMessageTimeStamp(buffer,count);
synchronized (mReceivers) {
        for (int i=0; i < mReceivers.size(); i++) {
          MidiReceiver receiver=mReceivers.get(i);
          try {
            receiver.onPost(buffer,offset,size,timestamp);
          }
 catch (          IOException e) {
            Log.e(TAG,""String_Node_Str"");
            deadReceivers.add(receiver);
          }
        }
        if (deadReceivers.size() > 0) {
          for (          MidiReceiver receiver : deadReceivers) {
            mReceivers.remove(receiver);
            mReceiverCount--;
          }
          deadReceivers.clear();
        }
        if (mReceiverCount == 0) {
          break;
        }
      }
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"");
    IoUtils.closeQuietly(mInputStream);
    onIOException();
  }
}",0.9758274451468948
195576,"@Override public void run(){
  byte[] buffer=new byte[3];
  try {
    while (true) {
      for (int index=0; index < mPollFDs.length; index++) {
        StructPollfd pfd=mPollFDs[index];
        if ((pfd.revents & OsConstants.POLLIN) != 0) {
          pfd.revents=0;
          int count=readMessage(buffer,index);
          mOutputPortReceivers[index].onPost(buffer,0,count,System.nanoTime());
        }
      }
      Os.poll(mPollFDs,-1);
    }
  }
 catch (  IOException e) {
    Log.d(TAG,""String_Node_Str"");
  }
catch (  ErrnoException e) {
    Log.d(TAG,""String_Node_Str"");
  }
}","@Override public void run(){
  byte[] buffer=new byte[3];
  try {
    boolean done=false;
    while (!done) {
      for (int index=0; index < mPollFDs.length; index++) {
        StructPollfd pfd=mPollFDs[index];
        if ((pfd.revents & OsConstants.POLLIN) != 0) {
          pfd.revents=0;
          int count=readMessage(buffer,index);
          mOutputPortReceivers[index].onPost(buffer,0,count,System.nanoTime());
        }
 else         if ((pfd.revents & (OsConstants.POLLERR | OsConstants.POLLHUP)) != 0) {
          done=true;
        }
      }
      Os.poll(mPollFDs,-1);
    }
  }
 catch (  IOException e) {
    Log.d(TAG,""String_Node_Str"");
  }
catch (  ErrnoException e) {
    Log.d(TAG,""String_Node_Str"");
  }
}",0.8868501529051988
195577,"private UsbMidiDevice(MidiDeviceServer server,FileDescriptor[] inputFiles,FileDescriptor[] outputFiles){
  mServer=server;
  int inputCount=inputFiles.length;
  int outputCount=outputFiles.length;
  mPollFDs=new StructPollfd[inputCount];
  mInputStreams=new FileInputStream[inputCount];
  for (int i=0; i < inputCount; i++) {
    FileDescriptor fd=inputFiles[i];
    StructPollfd pollfd=new StructPollfd();
    pollfd.fd=fd;
    pollfd.events=(short)OsConstants.POLLIN;
    mPollFDs[i]=pollfd;
    mInputStreams[i]=new FileInputStream(fd);
  }
  mOutputStreams=new FileOutputStream[outputCount];
  for (int i=0; i < outputCount; i++) {
    mOutputStreams[i]=new FileOutputStream(outputFiles[i]);
  }
  mOutputPortReceivers=new MidiReceiver[outputCount];
  for (int port=0; port < outputCount; port++) {
    mOutputPortReceivers[port]=server.openOutputPortReceiver(port);
  }
  for (int port=0; port < inputCount; port++) {
    final int portNumberF=port;
    MidiReceiver receiver=new MidiReceiver(){
      @Override public void onPost(      byte[] data,      int offset,      int count,      long timestamp) throws IOException {
        mOutputStreams[portNumberF].write(data,offset,count);
      }
    }
;
    MidiSender sender=server.openInputPortSender(port);
    sender.connect(receiver);
  }
  new Thread(){
    @Override public void run(){
      byte[] buffer=new byte[3];
      try {
        while (true) {
          for (int index=0; index < mPollFDs.length; index++) {
            StructPollfd pfd=mPollFDs[index];
            if ((pfd.revents & OsConstants.POLLIN) != 0) {
              pfd.revents=0;
              int count=readMessage(buffer,index);
              mOutputPortReceivers[index].onPost(buffer,0,count,System.nanoTime());
            }
          }
          Os.poll(mPollFDs,-1);
        }
      }
 catch (      IOException e) {
        Log.d(TAG,""String_Node_Str"");
      }
catch (      ErrnoException e) {
        Log.d(TAG,""String_Node_Str"");
      }
    }
  }
.start();
}","private UsbMidiDevice(MidiDeviceServer server,FileDescriptor[] inputFiles,FileDescriptor[] outputFiles){
  mServer=server;
  int inputCount=inputFiles.length;
  int outputCount=outputFiles.length;
  mPollFDs=new StructPollfd[inputCount];
  mInputStreams=new FileInputStream[inputCount];
  for (int i=0; i < inputCount; i++) {
    FileDescriptor fd=inputFiles[i];
    StructPollfd pollfd=new StructPollfd();
    pollfd.fd=fd;
    pollfd.events=(short)OsConstants.POLLIN;
    mPollFDs[i]=pollfd;
    mInputStreams[i]=new FileInputStream(fd);
  }
  mOutputStreams=new FileOutputStream[outputCount];
  for (int i=0; i < outputCount; i++) {
    mOutputStreams[i]=new FileOutputStream(outputFiles[i]);
  }
  mOutputPortReceivers=new MidiReceiver[outputCount];
  for (int port=0; port < outputCount; port++) {
    mOutputPortReceivers[port]=server.openOutputPortReceiver(port);
  }
  for (int port=0; port < inputCount; port++) {
    final int portNumberF=port;
    MidiReceiver receiver=new MidiReceiver(){
      @Override public void onPost(      byte[] data,      int offset,      int count,      long timestamp) throws IOException {
        mOutputStreams[portNumberF].write(data,offset,count);
      }
    }
;
    MidiSender sender=server.openInputPortSender(port);
    sender.connect(receiver);
  }
  new Thread(){
    @Override public void run(){
      byte[] buffer=new byte[3];
      try {
        boolean done=false;
        while (!done) {
          for (int index=0; index < mPollFDs.length; index++) {
            StructPollfd pfd=mPollFDs[index];
            if ((pfd.revents & OsConstants.POLLIN) != 0) {
              pfd.revents=0;
              int count=readMessage(buffer,index);
              mOutputPortReceivers[index].onPost(buffer,0,count,System.nanoTime());
            }
 else             if ((pfd.revents & (OsConstants.POLLERR | OsConstants.POLLHUP)) != 0) {
              done=true;
            }
          }
          Os.poll(mPollFDs,-1);
        }
      }
 catch (      IOException e) {
        Log.d(TAG,""String_Node_Str"");
      }
catch (      ErrnoException e) {
        Log.d(TAG,""String_Node_Str"");
      }
    }
  }
.start();
}",0.9605769230769232
195578,"/** 
 * Constructs a new   {@code PrintWriter} with {@code pr} as its targetprinter and a custom buffer size.  Because a  {@link Printer} is line-base,autoflush is always enabled.
 * @param pr the target writer.
 * @param bufferLen specifies the size of the FastPrintWriter's internal buffer; the default is 512.
 * @throws NullPointerException if  {@code pr} is {@code null}.
 */
public FastPrintWriter(Printer pr,int bufferLen){
  super(sDummyWriter,true);
  if (pr == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  mBufferLen=bufferLen;
  mText=new char[bufferLen];
  mBytes=null;
  mOutputStream=null;
  mWriter=null;
  mPrinter=pr;
  mAutoFlush=true;
  mSeparator=System.lineSeparator();
  initDefaultEncoder();
}","/** 
 * Constructs a new   {@code PrintWriter} with {@code pr} as its targetprinter and a custom buffer size.  Because a  {@link Printer} is line-base,autoflush is always enabled.
 * @param pr the target writer.
 * @param bufferLen specifies the size of the FastPrintWriter's internal buffer; the default is 512.
 * @throws NullPointerException if  {@code pr} is {@code null}.
 */
public FastPrintWriter(Printer pr,int bufferLen){
  super(new DummyWriter(),true);
  if (pr == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  mBufferLen=bufferLen;
  mText=new char[bufferLen];
  mBytes=null;
  mOutputStream=null;
  mWriter=null;
  mPrinter=pr;
  mAutoFlush=true;
  mSeparator=System.lineSeparator();
  initDefaultEncoder();
}",0.9952861952861952
195579,"private void readPermissionsFromXml(File permFile,boolean onlyFeatures){
  FileReader permReader=null;
  try {
    permReader=new FileReader(permFile);
  }
 catch (  FileNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + permFile);
    return;
  }
  final boolean lowRam=ActivityManager.isLowRamDeviceStatic();
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(permReader);
    int type;
    while ((type=parser.next()) != parser.START_TAG && type != parser.END_DOCUMENT) {
      ;
    }
    if (type != parser.START_TAG) {
      throw new XmlPullParserException(""String_Node_Str"");
    }
    if (!parser.getName().equals(""String_Node_Str"") && !parser.getName().equals(""String_Node_Str"")) {
      throw new XmlPullParserException(""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
    }
    while (true) {
      XmlUtils.nextElement(parser);
      if (parser.getEventType() == XmlPullParser.END_DOCUMENT) {
        break;
      }
      String name=parser.getName();
      if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String gidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (gidStr != null) {
          int gid=android.os.Process.getGidForName(gidStr);
          mGlobalGids=appendInt(mGlobalGids,gid);
        }
 else {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        readPermission(parser,perm);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        String uidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (uidStr == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        int uid=Process.getUidForName(uidStr);
        if (uid < 0) {
          Slog.w(TAG,""String_Node_Str"" + uidStr + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        ArraySet<String> perms=mSystemPermissions.get(uid);
        if (perms == null) {
          perms=new ArraySet<String>();
          mSystemPermissions.put(uid,perms);
        }
        perms.add(perm);
        XmlUtils.skipCurrentTag(parser);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String lname=parser.getAttributeValue(null,""String_Node_Str"");
        String lfile=parser.getAttributeValue(null,""String_Node_Str"");
        if (lname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else         if (lfile == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mSharedLibraries.put(lname,lfile);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        boolean allowed;
        if (!lowRam) {
          allowed=true;
        }
 else {
          String notLowRam=parser.getAttributeValue(null,""String_Node_Str"");
          allowed=!""String_Node_Str"".equals(notLowRam);
        }
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else         if (allowed) {
          FeatureInfo fi=new FeatureInfo();
          fi.name=fname;
          mAvailableFeatures.put(fname,fi);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mUnavailableFeatures.add(fname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mAllowInPowerSave.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mFixedImeApps.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else {
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
    }
  }
 catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
 finally {
    IoUtils.closeQuietly(permReader);
  }
  for (  String fname : mUnavailableFeatures) {
    if (mAvailableFeatures.remove(fname) != null) {
      Slog.d(TAG,""String_Node_Str"" + fname);
    }
  }
}","private void readPermissionsFromXml(File permFile,boolean onlyFeatures){
  FileReader permReader=null;
  try {
    permReader=new FileReader(permFile);
  }
 catch (  FileNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + permFile);
    return;
  }
  final boolean lowRam=ActivityManager.isLowRamDeviceStatic();
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(permReader);
    int type;
    while ((type=parser.next()) != parser.START_TAG && type != parser.END_DOCUMENT) {
      ;
    }
    if (type != parser.START_TAG) {
      throw new XmlPullParserException(""String_Node_Str"");
    }
    if (!parser.getName().equals(""String_Node_Str"") && !parser.getName().equals(""String_Node_Str"")) {
      throw new XmlPullParserException(""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getName()+ ""String_Node_Str"");
    }
    while (true) {
      XmlUtils.nextElement(parser);
      if (parser.getEventType() == XmlPullParser.END_DOCUMENT) {
        break;
      }
      String name=parser.getName();
      if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String gidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (gidStr != null) {
          int gid=android.os.Process.getGidForName(gidStr);
          mGlobalGids=appendInt(mGlobalGids,gid);
        }
 else {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        readPermission(parser,perm);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        String uidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (uidStr == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        int uid=Process.getUidForName(uidStr);
        if (uid < 0) {
          Slog.w(TAG,""String_Node_Str"" + uidStr + ""String_Node_Str""+ permFile+ ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        ArraySet<String> perms=mSystemPermissions.get(uid);
        if (perms == null) {
          perms=new ArraySet<String>();
          mSystemPermissions.put(uid,perms);
        }
        perms.add(perm);
        XmlUtils.skipCurrentTag(parser);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String lname=parser.getAttributeValue(null,""String_Node_Str"");
        String lfile=parser.getAttributeValue(null,""String_Node_Str"");
        if (lname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else         if (lfile == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mSharedLibraries.put(lname,lfile);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        boolean allowed;
        if (!lowRam) {
          allowed=true;
        }
 else {
          String notLowRam=parser.getAttributeValue(null,""String_Node_Str"");
          allowed=!""String_Node_Str"".equals(notLowRam);
        }
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else         if (allowed) {
          FeatureInfo fi=new FeatureInfo();
          fi.name=fname;
          mAvailableFeatures.put(fname,fi);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mUnavailableFeatures.add(fname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mAllowInPowerSave.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mFixedImeApps.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else {
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
    }
  }
 catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
 finally {
    IoUtils.closeQuietly(permReader);
  }
  for (  String fname : mUnavailableFeatures) {
    if (mAvailableFeatures.remove(fname) != null) {
      Slog.d(TAG,""String_Node_Str"" + fname);
    }
  }
}",0.9671329849991572
195580,"private final void startProcessLocked(ProcessRecord app,String hostingType,String hostingNameStr,String abiOverride,String entryPoint,String[] entryPointArgs){
  long startTime=SystemClock.elapsedRealtime();
  if (app.pid > 0 && app.pid != MY_PID) {
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      mPidsSelfLocked.remove(app.pid);
      mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
    }
    checkTime(startTime,""String_Node_Str"");
    app.setPid(0);
  }
  if (DEBUG_PROCESSES && mProcessesOnHold.contains(app))   Slog.v(TAG,""String_Node_Str"" + app);
  mProcessesOnHold.remove(app);
  checkTime(startTime,""String_Node_Str"");
  updateCpuStats();
  checkTime(startTime,""String_Node_Str"");
  try {
    int uid=app.uid;
    int[] gids=null;
    int mountExternal=Zygote.MOUNT_EXTERNAL_NONE;
    if (!app.isolated) {
      int[] permGids=null;
      try {
        checkTime(startTime,""String_Node_Str"");
        final PackageManager pm=mContext.getPackageManager();
        permGids=pm.getPackageGids(app.info.packageName);
        if (Environment.isExternalStorageEmulated()) {
          checkTime(startTime,""String_Node_Str"");
          if (pm.checkPermission(android.Manifest.permission.ACCESS_ALL_EXTERNAL_STORAGE,app.info.packageName) == PERMISSION_GRANTED) {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
          }
 else {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
          }
        }
      }
 catch (      PackageManager.NameNotFoundException e) {
        Slog.w(TAG,""String_Node_Str"",e);
      }
      if (permGids == null) {
        gids=new int[2];
      }
 else {
        gids=new int[permGids.length + 2];
        System.arraycopy(permGids,0,gids,2,permGids.length);
      }
      gids[0]=UserHandle.getSharedAppGid(UserHandle.getAppId(uid));
      gids[1]=UserHandle.getUserGid(UserHandle.getUserId(uid));
    }
    checkTime(startTime,""String_Node_Str"");
    if (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) {
      if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL && mTopComponent != null && app.processName.equals(mTopComponent.getPackageName())) {
        uid=0;
      }
      if (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL && (app.info.flags & ApplicationInfo.FLAG_FACTORY_TEST) != 0) {
        uid=0;
      }
    }
    int debugFlags=0;
    if ((app.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if ((app.info.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0 || mSafeMode == true) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
    String requiredAbi=(abiOverride != null) ? abiOverride : app.info.primaryCpuAbi;
    if (requiredAbi == null) {
      requiredAbi=Build.SUPPORTED_ABIS[0];
    }
    String instructionSet=null;
    if (app.info.primaryCpuAbi != null) {
      instructionSet=VMRuntime.getInstructionSet(app.info.primaryCpuAbi);
    }
    boolean isActivityProcess=(entryPoint == null);
    if (entryPoint == null)     entryPoint=""String_Node_Str"";
    checkTime(startTime,""String_Node_Str"");
    Process.ProcessStartResult startResult=Process.start(entryPoint,app.processName,uid,uid,gids,debugFlags,mountExternal,app.info.targetSdkVersion,app.info.seinfo,requiredAbi,instructionSet,app.info.dataDir,entryPointArgs);
    checkTime(startTime,""String_Node_Str"");
    if (app.isolated) {
      mBatteryStatsService.addIsolatedUid(app.uid,app.info.uid);
    }
    mBatteryStatsService.noteProcessStart(app.processName,app.info.uid);
    checkTime(startTime,""String_Node_Str"");
    EventLog.writeEvent(EventLogTags.AM_PROC_START,UserHandle.getUserId(uid),startResult.pid,uid,app.processName,hostingType,hostingNameStr != null ? hostingNameStr : ""String_Node_Str"");
    if (app.persistent) {
      Watchdog.getInstance().processStarted(app.processName,startResult.pid);
    }
    checkTime(startTime,""String_Node_Str"");
    StringBuilder buf=mStringBuilder;
    buf.setLength(0);
    buf.append(""String_Node_Str"");
    buf.append(app.processName);
    if (!isActivityProcess) {
      buf.append(""String_Node_Str"");
      buf.append(entryPoint);
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
    buf.append(hostingType);
    if (hostingNameStr != null) {
      buf.append(""String_Node_Str"");
      buf.append(hostingNameStr);
    }
    buf.append(""String_Node_Str"");
    buf.append(startResult.pid);
    buf.append(""String_Node_Str"");
    buf.append(uid);
    buf.append(""String_Node_Str"");
    if (gids != null) {
      for (int gi=0; gi < gids.length; gi++) {
        if (gi != 0)         buf.append(""String_Node_Str"");
        buf.append(gids[gi]);
      }
    }
    buf.append(""String_Node_Str"");
    if (requiredAbi != null) {
      buf.append(""String_Node_Str"");
      buf.append(requiredAbi);
    }
    Slog.i(TAG,buf.toString());
    app.setPid(startResult.pid);
    app.usingWrapper=startResult.usingWrapper;
    app.removed=false;
    app.killed=false;
    app.killedByAm=false;
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      this.mPidsSelfLocked.put(startResult.pid,app);
      if (isActivityProcess) {
        Message msg=mHandler.obtainMessage(PROC_START_TIMEOUT_MSG);
        msg.obj=app;
        mHandler.sendMessageDelayed(msg,startResult.usingWrapper ? PROC_START_TIMEOUT_WITH_WRAPPER : PROC_START_TIMEOUT);
      }
    }
    checkTime(startTime,""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    app.setPid(0);
    mBatteryStatsService.noteProcessFinish(app.processName,app.info.uid);
    if (app.isolated) {
      mBatteryStatsService.removeIsolatedUid(app.uid,app.info.uid);
    }
    Slog.e(TAG,""String_Node_Str"" + app.processName,e);
  }
}","private final void startProcessLocked(ProcessRecord app,String hostingType,String hostingNameStr,String abiOverride,String entryPoint,String[] entryPointArgs){
  long startTime=SystemClock.elapsedRealtime();
  if (app.pid > 0 && app.pid != MY_PID) {
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      mPidsSelfLocked.remove(app.pid);
      mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
    }
    checkTime(startTime,""String_Node_Str"");
    app.setPid(0);
  }
  if (DEBUG_PROCESSES && mProcessesOnHold.contains(app))   Slog.v(TAG,""String_Node_Str"" + app);
  mProcessesOnHold.remove(app);
  checkTime(startTime,""String_Node_Str"");
  updateCpuStats();
  checkTime(startTime,""String_Node_Str"");
  try {
    int uid=app.uid;
    int[] gids=null;
    int mountExternal=Zygote.MOUNT_EXTERNAL_NONE;
    if (!app.isolated) {
      int[] permGids=null;
      try {
        checkTime(startTime,""String_Node_Str"");
        final PackageManager pm=mContext.getPackageManager();
        permGids=pm.getPackageGids(app.info.packageName);
        if (Environment.isExternalStorageEmulated()) {
          checkTime(startTime,""String_Node_Str"");
          if (pm.checkPermission(android.Manifest.permission.ACCESS_ALL_EXTERNAL_STORAGE,app.info.packageName) == PERMISSION_GRANTED) {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
          }
 else {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
          }
        }
      }
 catch (      PackageManager.NameNotFoundException e) {
        Slog.w(TAG,""String_Node_Str"",e);
      }
      if (permGids == null) {
        gids=new int[2];
      }
 else {
        gids=new int[permGids.length + 2];
        System.arraycopy(permGids,0,gids,2,permGids.length);
      }
      gids[0]=UserHandle.getSharedAppGid(UserHandle.getAppId(uid));
      gids[1]=UserHandle.getUserGid(UserHandle.getUserId(uid));
    }
    checkTime(startTime,""String_Node_Str"");
    if (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) {
      if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL && mTopComponent != null && app.processName.equals(mTopComponent.getPackageName())) {
        uid=0;
      }
      if (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL && (app.info.flags & ApplicationInfo.FLAG_FACTORY_TEST) != 0) {
        uid=0;
      }
    }
    int debugFlags=0;
    if ((app.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if ((app.info.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0 || mSafeMode == true) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
    String requiredAbi=(abiOverride != null) ? abiOverride : app.info.primaryCpuAbi;
    if (requiredAbi == null) {
      requiredAbi=Build.SUPPORTED_ABIS[0];
    }
    String instructionSet=null;
    if (app.info.primaryCpuAbi != null) {
      instructionSet=VMRuntime.getInstructionSet(app.info.primaryCpuAbi);
    }
    app.gids=gids;
    app.requiredAbi=requiredAbi;
    app.instructionSet=instructionSet;
    boolean isActivityProcess=(entryPoint == null);
    if (entryPoint == null)     entryPoint=""String_Node_Str"";
    checkTime(startTime,""String_Node_Str"");
    Process.ProcessStartResult startResult=Process.start(entryPoint,app.processName,uid,uid,gids,debugFlags,mountExternal,app.info.targetSdkVersion,app.info.seinfo,requiredAbi,instructionSet,app.info.dataDir,entryPointArgs);
    checkTime(startTime,""String_Node_Str"");
    if (app.isolated) {
      mBatteryStatsService.addIsolatedUid(app.uid,app.info.uid);
    }
    mBatteryStatsService.noteProcessStart(app.processName,app.info.uid);
    checkTime(startTime,""String_Node_Str"");
    EventLog.writeEvent(EventLogTags.AM_PROC_START,UserHandle.getUserId(uid),startResult.pid,uid,app.processName,hostingType,hostingNameStr != null ? hostingNameStr : ""String_Node_Str"");
    if (app.persistent) {
      Watchdog.getInstance().processStarted(app.processName,startResult.pid);
    }
    checkTime(startTime,""String_Node_Str"");
    StringBuilder buf=mStringBuilder;
    buf.setLength(0);
    buf.append(""String_Node_Str"");
    buf.append(startResult.pid);
    buf.append(':');
    buf.append(app.processName);
    buf.append('/');
    UserHandle.formatUid(buf,uid);
    if (!isActivityProcess) {
      buf.append(""String_Node_Str"");
      buf.append(entryPoint);
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
    buf.append(hostingType);
    if (hostingNameStr != null) {
      buf.append(""String_Node_Str"");
      buf.append(hostingNameStr);
    }
    Slog.i(TAG,buf.toString());
    app.setPid(startResult.pid);
    app.usingWrapper=startResult.usingWrapper;
    app.removed=false;
    app.killed=false;
    app.killedByAm=false;
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      this.mPidsSelfLocked.put(startResult.pid,app);
      if (isActivityProcess) {
        Message msg=mHandler.obtainMessage(PROC_START_TIMEOUT_MSG);
        msg.obj=app;
        mHandler.sendMessageDelayed(msg,startResult.usingWrapper ? PROC_START_TIMEOUT_WITH_WRAPPER : PROC_START_TIMEOUT);
      }
    }
    checkTime(startTime,""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    app.setPid(0);
    mBatteryStatsService.noteProcessFinish(app.processName,app.info.uid);
    if (app.isolated) {
      mBatteryStatsService.removeIsolatedUid(app.uid,app.info.uid);
    }
    Slog.e(TAG,""String_Node_Str"" + app.processName,e);
  }
}",0.9415858811831966
195581,"@Override public void addPackageDependency(String packageName){
synchronized (this) {
    int callingPid=Binder.getCallingPid();
    if (callingPid == Process.myPid()) {
      Slog.w(TAG,""String_Node_Str"");
      return;
    }
    ProcessRecord proc;
synchronized (mPidsSelfLocked) {
      proc=mPidsSelfLocked.get(Binder.getCallingPid());
    }
    if (proc != null) {
      if (proc.pkgDeps == null) {
        proc.pkgDeps=new ArraySet<String>(1);
      }
      proc.pkgDeps.add(packageName);
    }
  }
}","@Override public void addPackageDependency(String packageName){
synchronized (this) {
    int callingPid=Binder.getCallingPid();
    if (callingPid == Process.myPid()) {
      return;
    }
    ProcessRecord proc;
synchronized (mPidsSelfLocked) {
      proc=mPidsSelfLocked.get(Binder.getCallingPid());
    }
    if (proc != null) {
      if (proc.pkgDeps == null) {
        proc.pkgDeps=new ArraySet<String>(1);
      }
      proc.pkgDeps.add(packageName);
    }
  }
}",0.962051282051282
195582,"private void populateSettings(Bundle snapshot,Map<String,Class<?>> map){
  Context context=mActivityManagerService.mContext;
  for (  Map.Entry<String,Class<?>> entry : map.entrySet()) {
    String setting=entry.getKey();
    Class<?> type=entry.getValue();
    try {
      if (type == String.class) {
        final String value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getString(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getString(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getString(context.getContentResolver(),setting);
        }
        snapshot.putString(setting,value);
      }
 else       if (type == int.class) {
        final int value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getInt(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getInt(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getInt(context.getContentResolver(),setting);
        }
        snapshot.putInt(setting,value);
      }
 else       if (type == float.class) {
        final float value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getFloat(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getFloat(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getFloat(context.getContentResolver(),setting);
        }
        snapshot.putFloat(setting,value);
      }
 else       if (type == long.class) {
        final long value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getLong(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getLong(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getLong(context.getContentResolver(),setting);
        }
        snapshot.putLong(setting,value);
      }
    }
 catch (    SettingNotFoundException snfe) {
      Log.w(LOG_TAG,""String_Node_Str"" + setting + ""String_Node_Str"",snfe);
    }
  }
}","private void populateSettings(Bundle snapshot,Map<String,Class<?>> map){
  Context context=mActivityManagerService.mContext;
  for (  Map.Entry<String,Class<?>> entry : map.entrySet()) {
    String setting=entry.getKey();
    Class<?> type=entry.getValue();
    if (type == String.class) {
      final String value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getString(context.getContentResolver(),setting);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getString(context.getContentResolver(),setting);
      }
 else {
        value=Settings.Global.getString(context.getContentResolver(),setting);
      }
      snapshot.putString(setting,value);
    }
 else     if (type == int.class) {
      final int value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getInt(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getInt(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getInt(context.getContentResolver(),setting,0);
      }
      snapshot.putInt(setting,value);
    }
 else     if (type == float.class) {
      final float value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getFloat(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getFloat(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getFloat(context.getContentResolver(),setting,0);
      }
      snapshot.putFloat(setting,value);
    }
 else     if (type == long.class) {
      final long value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getLong(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getLong(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getLong(context.getContentResolver(),setting,0);
      }
      snapshot.putLong(setting,value);
    }
  }
}",0.5291759465478841
195583,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.println();
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  pw.print(lastPss);
  pw.print(""String_Node_Str"");
  pw.println(lastCachedPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}","void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  pw.print(lastPss);
  pw.print(""String_Node_Str"");
  pw.println(lastCachedPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}",0.9812317980800344
195584,"@Override protected void onServiceAdded(ManagedServiceInfo info){
  Slog.d(TAG,""String_Node_Str"" + info);
  final IConditionProvider provider=provider(info);
  try {
    provider.onConnected();
  }
 catch (  RemoteException e) {
  }
synchronized (mMutex) {
    if (info.component.equals(mExitConditionComponent)) {
      final ConditionRecord manualRecord=getRecordLocked(mExitCondition.id,mExitConditionComponent);
      manualRecord.isManual=true;
    }
    final int N=mRecords.size();
    for (int i=0; i < N; i++) {
      final ConditionRecord r=mRecords.get(i);
      if (!r.component.equals(info.component))       continue;
      r.info=info;
      if (r.isAutomatic || r.isManual) {
        subscribeLocked(r);
      }
    }
  }
}","@Override protected void onServiceAdded(ManagedServiceInfo info){
  final IConditionProvider provider=provider(info);
  try {
    provider.onConnected();
  }
 catch (  RemoteException e) {
  }
synchronized (mMutex) {
    if (info.component.equals(mExitConditionComponent)) {
      final ConditionRecord manualRecord=getRecordLocked(mExitCondition.id,mExitConditionComponent);
      manualRecord.isManual=true;
    }
    final int N=mRecords.size();
    for (int i=0; i < N; i++) {
      final ConditionRecord r=mRecords.get(i);
      if (!r.component.equals(info.component))       continue;
      r.info=info;
      if (r.isAutomatic || r.isManual) {
        subscribeLocked(r);
      }
    }
  }
}",0.9721448467966574
195585,"/** 
 * Constructs a new   {@code PrintWriter} with {@code pr} as its targetprinter and a custom buffer size.  Because a  {@link Printer} is line-base,autoflush is always enabled.
 * @param pr the target writer.
 * @param bufferLen specifies the size of the FastPrintWriter's internal buffer; the default is 512.
 * @throws NullPointerException if  {@code pr} is {@code null}.
 */
public FastPrintWriter(Printer pr,int bufferLen){
  super(sDummyWriter,true);
  if (pr == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  mBufferLen=bufferLen;
  mText=new char[bufferLen];
  mBytes=null;
  mOutputStream=null;
  mWriter=null;
  mPrinter=pr;
  mAutoFlush=true;
  mSeparator=System.lineSeparator();
  initDefaultEncoder();
}","/** 
 * Constructs a new   {@code PrintWriter} with {@code pr} as its targetprinter and a custom buffer size.  Because a  {@link Printer} is line-base,autoflush is always enabled.
 * @param pr the target writer.
 * @param bufferLen specifies the size of the FastPrintWriter's internal buffer; the default is 512.
 * @throws NullPointerException if  {@code pr} is {@code null}.
 */
public FastPrintWriter(Printer pr,int bufferLen){
  super(new DummyWriter(),true);
  if (pr == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  mBufferLen=bufferLen;
  mText=new char[bufferLen];
  mBytes=null;
  mOutputStream=null;
  mWriter=null;
  mPrinter=pr;
  mAutoFlush=true;
  mSeparator=System.lineSeparator();
  initDefaultEncoder();
}",0.9952861952861952
195586,"private void readPermissionsFromXml(File permFile,boolean onlyFeatures){
  FileReader permReader=null;
  try {
    permReader=new FileReader(permFile);
  }
 catch (  FileNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + permFile);
    return;
  }
  final boolean lowRam=ActivityManager.isLowRamDeviceStatic();
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(permReader);
    int type;
    while ((type=parser.next()) != parser.START_TAG && type != parser.END_DOCUMENT) {
      ;
    }
    if (type != parser.START_TAG) {
      throw new XmlPullParserException(""String_Node_Str"");
    }
    if (!parser.getName().equals(""String_Node_Str"") && !parser.getName().equals(""String_Node_Str"")) {
      throw new XmlPullParserException(""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
    }
    while (true) {
      XmlUtils.nextElement(parser);
      if (parser.getEventType() == XmlPullParser.END_DOCUMENT) {
        break;
      }
      String name=parser.getName();
      if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String gidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (gidStr != null) {
          int gid=android.os.Process.getGidForName(gidStr);
          mGlobalGids=appendInt(mGlobalGids,gid);
        }
 else {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        readPermission(parser,perm);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        String uidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (uidStr == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        int uid=Process.getUidForName(uidStr);
        if (uid < 0) {
          Slog.w(TAG,""String_Node_Str"" + uidStr + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        ArraySet<String> perms=mSystemPermissions.get(uid);
        if (perms == null) {
          perms=new ArraySet<String>();
          mSystemPermissions.put(uid,perms);
        }
        perms.add(perm);
        XmlUtils.skipCurrentTag(parser);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String lname=parser.getAttributeValue(null,""String_Node_Str"");
        String lfile=parser.getAttributeValue(null,""String_Node_Str"");
        if (lname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else         if (lfile == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mSharedLibraries.put(lname,lfile);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        boolean allowed;
        if (!lowRam) {
          allowed=true;
        }
 else {
          String notLowRam=parser.getAttributeValue(null,""String_Node_Str"");
          allowed=!""String_Node_Str"".equals(notLowRam);
        }
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else         if (allowed) {
          FeatureInfo fi=new FeatureInfo();
          fi.name=fname;
          mAvailableFeatures.put(fname,fi);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mUnavailableFeatures.add(fname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mAllowInPowerSave.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mFixedImeApps.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else {
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
    }
  }
 catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
 finally {
    IoUtils.closeQuietly(permReader);
  }
  for (  String fname : mUnavailableFeatures) {
    if (mAvailableFeatures.remove(fname) != null) {
      Slog.d(TAG,""String_Node_Str"" + fname);
    }
  }
}","private void readPermissionsFromXml(File permFile,boolean onlyFeatures){
  FileReader permReader=null;
  try {
    permReader=new FileReader(permFile);
  }
 catch (  FileNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + permFile);
    return;
  }
  final boolean lowRam=ActivityManager.isLowRamDeviceStatic();
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(permReader);
    int type;
    while ((type=parser.next()) != parser.START_TAG && type != parser.END_DOCUMENT) {
      ;
    }
    if (type != parser.START_TAG) {
      throw new XmlPullParserException(""String_Node_Str"");
    }
    if (!parser.getName().equals(""String_Node_Str"") && !parser.getName().equals(""String_Node_Str"")) {
      throw new XmlPullParserException(""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getName()+ ""String_Node_Str"");
    }
    while (true) {
      XmlUtils.nextElement(parser);
      if (parser.getEventType() == XmlPullParser.END_DOCUMENT) {
        break;
      }
      String name=parser.getName();
      if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String gidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (gidStr != null) {
          int gid=android.os.Process.getGidForName(gidStr);
          mGlobalGids=appendInt(mGlobalGids,gid);
        }
 else {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        readPermission(parser,perm);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        String uidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (uidStr == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        int uid=Process.getUidForName(uidStr);
        if (uid < 0) {
          Slog.w(TAG,""String_Node_Str"" + uidStr + ""String_Node_Str""+ permFile+ ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        ArraySet<String> perms=mSystemPermissions.get(uid);
        if (perms == null) {
          perms=new ArraySet<String>();
          mSystemPermissions.put(uid,perms);
        }
        perms.add(perm);
        XmlUtils.skipCurrentTag(parser);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String lname=parser.getAttributeValue(null,""String_Node_Str"");
        String lfile=parser.getAttributeValue(null,""String_Node_Str"");
        if (lname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else         if (lfile == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mSharedLibraries.put(lname,lfile);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        boolean allowed;
        if (!lowRam) {
          allowed=true;
        }
 else {
          String notLowRam=parser.getAttributeValue(null,""String_Node_Str"");
          allowed=!""String_Node_Str"".equals(notLowRam);
        }
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else         if (allowed) {
          FeatureInfo fi=new FeatureInfo();
          fi.name=fname;
          mAvailableFeatures.put(fname,fi);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mUnavailableFeatures.add(fname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mAllowInPowerSave.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mFixedImeApps.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else {
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
    }
  }
 catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
 finally {
    IoUtils.closeQuietly(permReader);
  }
  for (  String fname : mUnavailableFeatures) {
    if (mAvailableFeatures.remove(fname) != null) {
      Slog.d(TAG,""String_Node_Str"" + fname);
    }
  }
}",0.9671329849991572
195587,"private final void startProcessLocked(ProcessRecord app,String hostingType,String hostingNameStr,String abiOverride,String entryPoint,String[] entryPointArgs){
  long startTime=SystemClock.elapsedRealtime();
  if (app.pid > 0 && app.pid != MY_PID) {
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      mPidsSelfLocked.remove(app.pid);
      mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
    }
    checkTime(startTime,""String_Node_Str"");
    app.setPid(0);
  }
  if (DEBUG_PROCESSES && mProcessesOnHold.contains(app))   Slog.v(TAG,""String_Node_Str"" + app);
  mProcessesOnHold.remove(app);
  checkTime(startTime,""String_Node_Str"");
  updateCpuStats();
  checkTime(startTime,""String_Node_Str"");
  try {
    int uid=app.uid;
    int[] gids=null;
    int mountExternal=Zygote.MOUNT_EXTERNAL_NONE;
    if (!app.isolated) {
      int[] permGids=null;
      try {
        checkTime(startTime,""String_Node_Str"");
        final PackageManager pm=mContext.getPackageManager();
        permGids=pm.getPackageGids(app.info.packageName);
        if (Environment.isExternalStorageEmulated()) {
          checkTime(startTime,""String_Node_Str"");
          if (pm.checkPermission(android.Manifest.permission.ACCESS_ALL_EXTERNAL_STORAGE,app.info.packageName) == PERMISSION_GRANTED) {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
          }
 else {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
          }
        }
      }
 catch (      PackageManager.NameNotFoundException e) {
        Slog.w(TAG,""String_Node_Str"",e);
      }
      if (permGids == null) {
        gids=new int[2];
      }
 else {
        gids=new int[permGids.length + 2];
        System.arraycopy(permGids,0,gids,2,permGids.length);
      }
      gids[0]=UserHandle.getSharedAppGid(UserHandle.getAppId(uid));
      gids[1]=UserHandle.getUserGid(UserHandle.getUserId(uid));
    }
    checkTime(startTime,""String_Node_Str"");
    if (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) {
      if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL && mTopComponent != null && app.processName.equals(mTopComponent.getPackageName())) {
        uid=0;
      }
      if (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL && (app.info.flags & ApplicationInfo.FLAG_FACTORY_TEST) != 0) {
        uid=0;
      }
    }
    int debugFlags=0;
    if ((app.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if ((app.info.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0 || mSafeMode == true) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
    String requiredAbi=(abiOverride != null) ? abiOverride : app.info.primaryCpuAbi;
    if (requiredAbi == null) {
      requiredAbi=Build.SUPPORTED_ABIS[0];
    }
    String instructionSet=null;
    if (app.info.primaryCpuAbi != null) {
      instructionSet=VMRuntime.getInstructionSet(app.info.primaryCpuAbi);
    }
    boolean isActivityProcess=(entryPoint == null);
    if (entryPoint == null)     entryPoint=""String_Node_Str"";
    checkTime(startTime,""String_Node_Str"");
    Process.ProcessStartResult startResult=Process.start(entryPoint,app.processName,uid,uid,gids,debugFlags,mountExternal,app.info.targetSdkVersion,app.info.seinfo,requiredAbi,instructionSet,app.info.dataDir,entryPointArgs);
    checkTime(startTime,""String_Node_Str"");
    if (app.isolated) {
      mBatteryStatsService.addIsolatedUid(app.uid,app.info.uid);
    }
    mBatteryStatsService.noteProcessStart(app.processName,app.info.uid);
    checkTime(startTime,""String_Node_Str"");
    EventLog.writeEvent(EventLogTags.AM_PROC_START,UserHandle.getUserId(uid),startResult.pid,uid,app.processName,hostingType,hostingNameStr != null ? hostingNameStr : ""String_Node_Str"");
    if (app.persistent) {
      Watchdog.getInstance().processStarted(app.processName,startResult.pid);
    }
    checkTime(startTime,""String_Node_Str"");
    StringBuilder buf=mStringBuilder;
    buf.setLength(0);
    buf.append(""String_Node_Str"");
    buf.append(app.processName);
    if (!isActivityProcess) {
      buf.append(""String_Node_Str"");
      buf.append(entryPoint);
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
    buf.append(hostingType);
    if (hostingNameStr != null) {
      buf.append(""String_Node_Str"");
      buf.append(hostingNameStr);
    }
    buf.append(""String_Node_Str"");
    buf.append(startResult.pid);
    buf.append(""String_Node_Str"");
    buf.append(uid);
    buf.append(""String_Node_Str"");
    if (gids != null) {
      for (int gi=0; gi < gids.length; gi++) {
        if (gi != 0)         buf.append(""String_Node_Str"");
        buf.append(gids[gi]);
      }
    }
    buf.append(""String_Node_Str"");
    if (requiredAbi != null) {
      buf.append(""String_Node_Str"");
      buf.append(requiredAbi);
    }
    Slog.i(TAG,buf.toString());
    app.setPid(startResult.pid);
    app.usingWrapper=startResult.usingWrapper;
    app.removed=false;
    app.killed=false;
    app.killedByAm=false;
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      this.mPidsSelfLocked.put(startResult.pid,app);
      if (isActivityProcess) {
        Message msg=mHandler.obtainMessage(PROC_START_TIMEOUT_MSG);
        msg.obj=app;
        mHandler.sendMessageDelayed(msg,startResult.usingWrapper ? PROC_START_TIMEOUT_WITH_WRAPPER : PROC_START_TIMEOUT);
      }
    }
    checkTime(startTime,""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    app.setPid(0);
    mBatteryStatsService.noteProcessFinish(app.processName,app.info.uid);
    if (app.isolated) {
      mBatteryStatsService.removeIsolatedUid(app.uid,app.info.uid);
    }
    Slog.e(TAG,""String_Node_Str"" + app.processName,e);
  }
}","private final void startProcessLocked(ProcessRecord app,String hostingType,String hostingNameStr,String abiOverride,String entryPoint,String[] entryPointArgs){
  long startTime=SystemClock.elapsedRealtime();
  if (app.pid > 0 && app.pid != MY_PID) {
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      mPidsSelfLocked.remove(app.pid);
      mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
    }
    checkTime(startTime,""String_Node_Str"");
    app.setPid(0);
  }
  if (DEBUG_PROCESSES && mProcessesOnHold.contains(app))   Slog.v(TAG,""String_Node_Str"" + app);
  mProcessesOnHold.remove(app);
  checkTime(startTime,""String_Node_Str"");
  updateCpuStats();
  checkTime(startTime,""String_Node_Str"");
  try {
    int uid=app.uid;
    int[] gids=null;
    int mountExternal=Zygote.MOUNT_EXTERNAL_NONE;
    if (!app.isolated) {
      int[] permGids=null;
      try {
        checkTime(startTime,""String_Node_Str"");
        final PackageManager pm=mContext.getPackageManager();
        permGids=pm.getPackageGids(app.info.packageName);
        if (Environment.isExternalStorageEmulated()) {
          checkTime(startTime,""String_Node_Str"");
          if (pm.checkPermission(android.Manifest.permission.ACCESS_ALL_EXTERNAL_STORAGE,app.info.packageName) == PERMISSION_GRANTED) {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
          }
 else {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
          }
        }
      }
 catch (      PackageManager.NameNotFoundException e) {
        Slog.w(TAG,""String_Node_Str"",e);
      }
      if (permGids == null) {
        gids=new int[2];
      }
 else {
        gids=new int[permGids.length + 2];
        System.arraycopy(permGids,0,gids,2,permGids.length);
      }
      gids[0]=UserHandle.getSharedAppGid(UserHandle.getAppId(uid));
      gids[1]=UserHandle.getUserGid(UserHandle.getUserId(uid));
    }
    checkTime(startTime,""String_Node_Str"");
    if (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) {
      if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL && mTopComponent != null && app.processName.equals(mTopComponent.getPackageName())) {
        uid=0;
      }
      if (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL && (app.info.flags & ApplicationInfo.FLAG_FACTORY_TEST) != 0) {
        uid=0;
      }
    }
    int debugFlags=0;
    if ((app.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if ((app.info.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0 || mSafeMode == true) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
    String requiredAbi=(abiOverride != null) ? abiOverride : app.info.primaryCpuAbi;
    if (requiredAbi == null) {
      requiredAbi=Build.SUPPORTED_ABIS[0];
    }
    String instructionSet=null;
    if (app.info.primaryCpuAbi != null) {
      instructionSet=VMRuntime.getInstructionSet(app.info.primaryCpuAbi);
    }
    app.gids=gids;
    app.requiredAbi=requiredAbi;
    app.instructionSet=instructionSet;
    boolean isActivityProcess=(entryPoint == null);
    if (entryPoint == null)     entryPoint=""String_Node_Str"";
    checkTime(startTime,""String_Node_Str"");
    Process.ProcessStartResult startResult=Process.start(entryPoint,app.processName,uid,uid,gids,debugFlags,mountExternal,app.info.targetSdkVersion,app.info.seinfo,requiredAbi,instructionSet,app.info.dataDir,entryPointArgs);
    checkTime(startTime,""String_Node_Str"");
    if (app.isolated) {
      mBatteryStatsService.addIsolatedUid(app.uid,app.info.uid);
    }
    mBatteryStatsService.noteProcessStart(app.processName,app.info.uid);
    checkTime(startTime,""String_Node_Str"");
    EventLog.writeEvent(EventLogTags.AM_PROC_START,UserHandle.getUserId(uid),startResult.pid,uid,app.processName,hostingType,hostingNameStr != null ? hostingNameStr : ""String_Node_Str"");
    if (app.persistent) {
      Watchdog.getInstance().processStarted(app.processName,startResult.pid);
    }
    checkTime(startTime,""String_Node_Str"");
    StringBuilder buf=mStringBuilder;
    buf.setLength(0);
    buf.append(""String_Node_Str"");
    buf.append(startResult.pid);
    buf.append(':');
    buf.append(app.processName);
    buf.append('/');
    UserHandle.formatUid(buf,uid);
    if (!isActivityProcess) {
      buf.append(""String_Node_Str"");
      buf.append(entryPoint);
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
    buf.append(hostingType);
    if (hostingNameStr != null) {
      buf.append(""String_Node_Str"");
      buf.append(hostingNameStr);
    }
    Slog.i(TAG,buf.toString());
    app.setPid(startResult.pid);
    app.usingWrapper=startResult.usingWrapper;
    app.removed=false;
    app.killed=false;
    app.killedByAm=false;
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      this.mPidsSelfLocked.put(startResult.pid,app);
      if (isActivityProcess) {
        Message msg=mHandler.obtainMessage(PROC_START_TIMEOUT_MSG);
        msg.obj=app;
        mHandler.sendMessageDelayed(msg,startResult.usingWrapper ? PROC_START_TIMEOUT_WITH_WRAPPER : PROC_START_TIMEOUT);
      }
    }
    checkTime(startTime,""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    app.setPid(0);
    mBatteryStatsService.noteProcessFinish(app.processName,app.info.uid);
    if (app.isolated) {
      mBatteryStatsService.removeIsolatedUid(app.uid,app.info.uid);
    }
    Slog.e(TAG,""String_Node_Str"" + app.processName,e);
  }
}",0.9415858811831966
195588,"@Override public void addPackageDependency(String packageName){
synchronized (this) {
    int callingPid=Binder.getCallingPid();
    if (callingPid == Process.myPid()) {
      Slog.w(TAG,""String_Node_Str"");
      return;
    }
    ProcessRecord proc;
synchronized (mPidsSelfLocked) {
      proc=mPidsSelfLocked.get(Binder.getCallingPid());
    }
    if (proc != null) {
      if (proc.pkgDeps == null) {
        proc.pkgDeps=new ArraySet<String>(1);
      }
      proc.pkgDeps.add(packageName);
    }
  }
}","@Override public void addPackageDependency(String packageName){
synchronized (this) {
    int callingPid=Binder.getCallingPid();
    if (callingPid == Process.myPid()) {
      return;
    }
    ProcessRecord proc;
synchronized (mPidsSelfLocked) {
      proc=mPidsSelfLocked.get(Binder.getCallingPid());
    }
    if (proc != null) {
      if (proc.pkgDeps == null) {
        proc.pkgDeps=new ArraySet<String>(1);
      }
      proc.pkgDeps.add(packageName);
    }
  }
}",0.962051282051282
195589,"private void populateSettings(Bundle snapshot,Map<String,Class<?>> map){
  Context context=mActivityManagerService.mContext;
  for (  Map.Entry<String,Class<?>> entry : map.entrySet()) {
    String setting=entry.getKey();
    Class<?> type=entry.getValue();
    try {
      if (type == String.class) {
        final String value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getString(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getString(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getString(context.getContentResolver(),setting);
        }
        snapshot.putString(setting,value);
      }
 else       if (type == int.class) {
        final int value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getInt(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getInt(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getInt(context.getContentResolver(),setting);
        }
        snapshot.putInt(setting,value);
      }
 else       if (type == float.class) {
        final float value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getFloat(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getFloat(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getFloat(context.getContentResolver(),setting);
        }
        snapshot.putFloat(setting,value);
      }
 else       if (type == long.class) {
        final long value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getLong(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getLong(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getLong(context.getContentResolver(),setting);
        }
        snapshot.putLong(setting,value);
      }
    }
 catch (    SettingNotFoundException snfe) {
      Log.w(LOG_TAG,""String_Node_Str"" + setting + ""String_Node_Str"",snfe);
    }
  }
}","private void populateSettings(Bundle snapshot,Map<String,Class<?>> map){
  Context context=mActivityManagerService.mContext;
  for (  Map.Entry<String,Class<?>> entry : map.entrySet()) {
    String setting=entry.getKey();
    Class<?> type=entry.getValue();
    if (type == String.class) {
      final String value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getString(context.getContentResolver(),setting);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getString(context.getContentResolver(),setting);
      }
 else {
        value=Settings.Global.getString(context.getContentResolver(),setting);
      }
      snapshot.putString(setting,value);
    }
 else     if (type == int.class) {
      final int value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getInt(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getInt(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getInt(context.getContentResolver(),setting,0);
      }
      snapshot.putInt(setting,value);
    }
 else     if (type == float.class) {
      final float value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getFloat(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getFloat(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getFloat(context.getContentResolver(),setting,0);
      }
      snapshot.putFloat(setting,value);
    }
 else     if (type == long.class) {
      final long value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getLong(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getLong(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getLong(context.getContentResolver(),setting,0);
      }
      snapshot.putLong(setting,value);
    }
  }
}",0.5291759465478841
195590,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.println();
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  pw.print(lastPss);
  pw.print(""String_Node_Str"");
  pw.println(lastCachedPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}","void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  pw.print(lastPss);
  pw.print(""String_Node_Str"");
  pw.println(lastCachedPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}",0.9812317980800344
195591,"@Override protected void onServiceAdded(ManagedServiceInfo info){
  Slog.d(TAG,""String_Node_Str"" + info);
  final IConditionProvider provider=provider(info);
  try {
    provider.onConnected();
  }
 catch (  RemoteException e) {
  }
synchronized (mMutex) {
    if (info.component.equals(mExitConditionComponent)) {
      final ConditionRecord manualRecord=getRecordLocked(mExitCondition.id,mExitConditionComponent);
      manualRecord.isManual=true;
    }
    final int N=mRecords.size();
    for (int i=0; i < N; i++) {
      final ConditionRecord r=mRecords.get(i);
      if (!r.component.equals(info.component))       continue;
      r.info=info;
      if (r.isAutomatic || r.isManual) {
        subscribeLocked(r);
      }
    }
  }
}","@Override protected void onServiceAdded(ManagedServiceInfo info){
  final IConditionProvider provider=provider(info);
  try {
    provider.onConnected();
  }
 catch (  RemoteException e) {
  }
synchronized (mMutex) {
    if (info.component.equals(mExitConditionComponent)) {
      final ConditionRecord manualRecord=getRecordLocked(mExitCondition.id,mExitConditionComponent);
      manualRecord.isManual=true;
    }
    final int N=mRecords.size();
    for (int i=0; i < N; i++) {
      final ConditionRecord r=mRecords.get(i);
      if (!r.component.equals(info.component))       continue;
      r.info=info;
      if (r.isAutomatic || r.isManual) {
        subscribeLocked(r);
      }
    }
  }
}",0.9721448467966574
195592,"/** 
 * Constructs a new   {@code PrintWriter} with {@code pr} as its targetprinter and a custom buffer size.  Because a  {@link Printer} is line-base,autoflush is always enabled.
 * @param pr the target writer.
 * @param bufferLen specifies the size of the FastPrintWriter's internal buffer; the default is 512.
 * @throws NullPointerException if  {@code pr} is {@code null}.
 */
public FastPrintWriter(Printer pr,int bufferLen){
  super(sDummyWriter,true);
  if (pr == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  mBufferLen=bufferLen;
  mText=new char[bufferLen];
  mBytes=null;
  mOutputStream=null;
  mWriter=null;
  mPrinter=pr;
  mAutoFlush=true;
  mSeparator=System.lineSeparator();
  initDefaultEncoder();
}","/** 
 * Constructs a new   {@code PrintWriter} with {@code pr} as its targetprinter and a custom buffer size.  Because a  {@link Printer} is line-base,autoflush is always enabled.
 * @param pr the target writer.
 * @param bufferLen specifies the size of the FastPrintWriter's internal buffer; the default is 512.
 * @throws NullPointerException if  {@code pr} is {@code null}.
 */
public FastPrintWriter(Printer pr,int bufferLen){
  super(new DummyWriter(),true);
  if (pr == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  mBufferLen=bufferLen;
  mText=new char[bufferLen];
  mBytes=null;
  mOutputStream=null;
  mWriter=null;
  mPrinter=pr;
  mAutoFlush=true;
  mSeparator=System.lineSeparator();
  initDefaultEncoder();
}",0.9952861952861952
195593,"private void readPermissionsFromXml(File permFile,boolean onlyFeatures){
  FileReader permReader=null;
  try {
    permReader=new FileReader(permFile);
  }
 catch (  FileNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + permFile);
    return;
  }
  final boolean lowRam=ActivityManager.isLowRamDeviceStatic();
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(permReader);
    int type;
    while ((type=parser.next()) != parser.START_TAG && type != parser.END_DOCUMENT) {
      ;
    }
    if (type != parser.START_TAG) {
      throw new XmlPullParserException(""String_Node_Str"");
    }
    if (!parser.getName().equals(""String_Node_Str"") && !parser.getName().equals(""String_Node_Str"")) {
      throw new XmlPullParserException(""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
    }
    while (true) {
      XmlUtils.nextElement(parser);
      if (parser.getEventType() == XmlPullParser.END_DOCUMENT) {
        break;
      }
      String name=parser.getName();
      if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String gidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (gidStr != null) {
          int gid=android.os.Process.getGidForName(gidStr);
          mGlobalGids=appendInt(mGlobalGids,gid);
        }
 else {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        readPermission(parser,perm);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        String uidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (uidStr == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        int uid=Process.getUidForName(uidStr);
        if (uid < 0) {
          Slog.w(TAG,""String_Node_Str"" + uidStr + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        ArraySet<String> perms=mSystemPermissions.get(uid);
        if (perms == null) {
          perms=new ArraySet<String>();
          mSystemPermissions.put(uid,perms);
        }
        perms.add(perm);
        XmlUtils.skipCurrentTag(parser);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String lname=parser.getAttributeValue(null,""String_Node_Str"");
        String lfile=parser.getAttributeValue(null,""String_Node_Str"");
        if (lname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else         if (lfile == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mSharedLibraries.put(lname,lfile);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        boolean allowed;
        if (!lowRam) {
          allowed=true;
        }
 else {
          String notLowRam=parser.getAttributeValue(null,""String_Node_Str"");
          allowed=!""String_Node_Str"".equals(notLowRam);
        }
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else         if (allowed) {
          FeatureInfo fi=new FeatureInfo();
          fi.name=fname;
          mAvailableFeatures.put(fname,fi);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mUnavailableFeatures.add(fname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mAllowInPowerSave.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mFixedImeApps.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else {
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
    }
  }
 catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
 finally {
    IoUtils.closeQuietly(permReader);
  }
  for (  String fname : mUnavailableFeatures) {
    if (mAvailableFeatures.remove(fname) != null) {
      Slog.d(TAG,""String_Node_Str"" + fname);
    }
  }
}","private void readPermissionsFromXml(File permFile,boolean onlyFeatures){
  FileReader permReader=null;
  try {
    permReader=new FileReader(permFile);
  }
 catch (  FileNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + permFile);
    return;
  }
  final boolean lowRam=ActivityManager.isLowRamDeviceStatic();
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(permReader);
    int type;
    while ((type=parser.next()) != parser.START_TAG && type != parser.END_DOCUMENT) {
      ;
    }
    if (type != parser.START_TAG) {
      throw new XmlPullParserException(""String_Node_Str"");
    }
    if (!parser.getName().equals(""String_Node_Str"") && !parser.getName().equals(""String_Node_Str"")) {
      throw new XmlPullParserException(""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getName()+ ""String_Node_Str"");
    }
    while (true) {
      XmlUtils.nextElement(parser);
      if (parser.getEventType() == XmlPullParser.END_DOCUMENT) {
        break;
      }
      String name=parser.getName();
      if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String gidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (gidStr != null) {
          int gid=android.os.Process.getGidForName(gidStr);
          mGlobalGids=appendInt(mGlobalGids,gid);
        }
 else {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        readPermission(parser,perm);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        String uidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (uidStr == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        int uid=Process.getUidForName(uidStr);
        if (uid < 0) {
          Slog.w(TAG,""String_Node_Str"" + uidStr + ""String_Node_Str""+ permFile+ ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        ArraySet<String> perms=mSystemPermissions.get(uid);
        if (perms == null) {
          perms=new ArraySet<String>();
          mSystemPermissions.put(uid,perms);
        }
        perms.add(perm);
        XmlUtils.skipCurrentTag(parser);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String lname=parser.getAttributeValue(null,""String_Node_Str"");
        String lfile=parser.getAttributeValue(null,""String_Node_Str"");
        if (lname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else         if (lfile == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mSharedLibraries.put(lname,lfile);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        boolean allowed;
        if (!lowRam) {
          allowed=true;
        }
 else {
          String notLowRam=parser.getAttributeValue(null,""String_Node_Str"");
          allowed=!""String_Node_Str"".equals(notLowRam);
        }
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else         if (allowed) {
          FeatureInfo fi=new FeatureInfo();
          fi.name=fname;
          mAvailableFeatures.put(fname,fi);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mUnavailableFeatures.add(fname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mAllowInPowerSave.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mFixedImeApps.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else {
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
    }
  }
 catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
 finally {
    IoUtils.closeQuietly(permReader);
  }
  for (  String fname : mUnavailableFeatures) {
    if (mAvailableFeatures.remove(fname) != null) {
      Slog.d(TAG,""String_Node_Str"" + fname);
    }
  }
}",0.9671329849991572
195594,"private final void startProcessLocked(ProcessRecord app,String hostingType,String hostingNameStr,String abiOverride,String entryPoint,String[] entryPointArgs){
  long startTime=SystemClock.elapsedRealtime();
  if (app.pid > 0 && app.pid != MY_PID) {
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      mPidsSelfLocked.remove(app.pid);
      mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
    }
    checkTime(startTime,""String_Node_Str"");
    app.setPid(0);
  }
  if (DEBUG_PROCESSES && mProcessesOnHold.contains(app))   Slog.v(TAG,""String_Node_Str"" + app);
  mProcessesOnHold.remove(app);
  checkTime(startTime,""String_Node_Str"");
  updateCpuStats();
  checkTime(startTime,""String_Node_Str"");
  try {
    int uid=app.uid;
    int[] gids=null;
    int mountExternal=Zygote.MOUNT_EXTERNAL_NONE;
    if (!app.isolated) {
      int[] permGids=null;
      try {
        checkTime(startTime,""String_Node_Str"");
        final PackageManager pm=mContext.getPackageManager();
        permGids=pm.getPackageGids(app.info.packageName);
        if (Environment.isExternalStorageEmulated()) {
          checkTime(startTime,""String_Node_Str"");
          if (pm.checkPermission(android.Manifest.permission.ACCESS_ALL_EXTERNAL_STORAGE,app.info.packageName) == PERMISSION_GRANTED) {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
          }
 else {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
          }
        }
      }
 catch (      PackageManager.NameNotFoundException e) {
        Slog.w(TAG,""String_Node_Str"",e);
      }
      if (permGids == null) {
        gids=new int[2];
      }
 else {
        gids=new int[permGids.length + 2];
        System.arraycopy(permGids,0,gids,2,permGids.length);
      }
      gids[0]=UserHandle.getSharedAppGid(UserHandle.getAppId(uid));
      gids[1]=UserHandle.getUserGid(UserHandle.getUserId(uid));
    }
    checkTime(startTime,""String_Node_Str"");
    if (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) {
      if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL && mTopComponent != null && app.processName.equals(mTopComponent.getPackageName())) {
        uid=0;
      }
      if (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL && (app.info.flags & ApplicationInfo.FLAG_FACTORY_TEST) != 0) {
        uid=0;
      }
    }
    int debugFlags=0;
    if ((app.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if ((app.info.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0 || mSafeMode == true) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
    String requiredAbi=(abiOverride != null) ? abiOverride : app.info.primaryCpuAbi;
    if (requiredAbi == null) {
      requiredAbi=Build.SUPPORTED_ABIS[0];
    }
    String instructionSet=null;
    if (app.info.primaryCpuAbi != null) {
      instructionSet=VMRuntime.getInstructionSet(app.info.primaryCpuAbi);
    }
    boolean isActivityProcess=(entryPoint == null);
    if (entryPoint == null)     entryPoint=""String_Node_Str"";
    checkTime(startTime,""String_Node_Str"");
    Process.ProcessStartResult startResult=Process.start(entryPoint,app.processName,uid,uid,gids,debugFlags,mountExternal,app.info.targetSdkVersion,app.info.seinfo,requiredAbi,instructionSet,app.info.dataDir,entryPointArgs);
    checkTime(startTime,""String_Node_Str"");
    if (app.isolated) {
      mBatteryStatsService.addIsolatedUid(app.uid,app.info.uid);
    }
    mBatteryStatsService.noteProcessStart(app.processName,app.info.uid);
    checkTime(startTime,""String_Node_Str"");
    EventLog.writeEvent(EventLogTags.AM_PROC_START,UserHandle.getUserId(uid),startResult.pid,uid,app.processName,hostingType,hostingNameStr != null ? hostingNameStr : ""String_Node_Str"");
    if (app.persistent) {
      Watchdog.getInstance().processStarted(app.processName,startResult.pid);
    }
    checkTime(startTime,""String_Node_Str"");
    StringBuilder buf=mStringBuilder;
    buf.setLength(0);
    buf.append(""String_Node_Str"");
    buf.append(app.processName);
    if (!isActivityProcess) {
      buf.append(""String_Node_Str"");
      buf.append(entryPoint);
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
    buf.append(hostingType);
    if (hostingNameStr != null) {
      buf.append(""String_Node_Str"");
      buf.append(hostingNameStr);
    }
    buf.append(""String_Node_Str"");
    buf.append(startResult.pid);
    buf.append(""String_Node_Str"");
    buf.append(uid);
    buf.append(""String_Node_Str"");
    if (gids != null) {
      for (int gi=0; gi < gids.length; gi++) {
        if (gi != 0)         buf.append(""String_Node_Str"");
        buf.append(gids[gi]);
      }
    }
    buf.append(""String_Node_Str"");
    if (requiredAbi != null) {
      buf.append(""String_Node_Str"");
      buf.append(requiredAbi);
    }
    Slog.i(TAG,buf.toString());
    app.setPid(startResult.pid);
    app.usingWrapper=startResult.usingWrapper;
    app.removed=false;
    app.killed=false;
    app.killedByAm=false;
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      this.mPidsSelfLocked.put(startResult.pid,app);
      if (isActivityProcess) {
        Message msg=mHandler.obtainMessage(PROC_START_TIMEOUT_MSG);
        msg.obj=app;
        mHandler.sendMessageDelayed(msg,startResult.usingWrapper ? PROC_START_TIMEOUT_WITH_WRAPPER : PROC_START_TIMEOUT);
      }
    }
    checkTime(startTime,""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    app.setPid(0);
    mBatteryStatsService.noteProcessFinish(app.processName,app.info.uid);
    if (app.isolated) {
      mBatteryStatsService.removeIsolatedUid(app.uid,app.info.uid);
    }
    Slog.e(TAG,""String_Node_Str"" + app.processName,e);
  }
}","private final void startProcessLocked(ProcessRecord app,String hostingType,String hostingNameStr,String abiOverride,String entryPoint,String[] entryPointArgs){
  long startTime=SystemClock.elapsedRealtime();
  if (app.pid > 0 && app.pid != MY_PID) {
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      mPidsSelfLocked.remove(app.pid);
      mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
    }
    checkTime(startTime,""String_Node_Str"");
    app.setPid(0);
  }
  if (DEBUG_PROCESSES && mProcessesOnHold.contains(app))   Slog.v(TAG,""String_Node_Str"" + app);
  mProcessesOnHold.remove(app);
  checkTime(startTime,""String_Node_Str"");
  updateCpuStats();
  checkTime(startTime,""String_Node_Str"");
  try {
    int uid=app.uid;
    int[] gids=null;
    int mountExternal=Zygote.MOUNT_EXTERNAL_NONE;
    if (!app.isolated) {
      int[] permGids=null;
      try {
        checkTime(startTime,""String_Node_Str"");
        final PackageManager pm=mContext.getPackageManager();
        permGids=pm.getPackageGids(app.info.packageName);
        if (Environment.isExternalStorageEmulated()) {
          checkTime(startTime,""String_Node_Str"");
          if (pm.checkPermission(android.Manifest.permission.ACCESS_ALL_EXTERNAL_STORAGE,app.info.packageName) == PERMISSION_GRANTED) {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
          }
 else {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
          }
        }
      }
 catch (      PackageManager.NameNotFoundException e) {
        Slog.w(TAG,""String_Node_Str"",e);
      }
      if (permGids == null) {
        gids=new int[2];
      }
 else {
        gids=new int[permGids.length + 2];
        System.arraycopy(permGids,0,gids,2,permGids.length);
      }
      gids[0]=UserHandle.getSharedAppGid(UserHandle.getAppId(uid));
      gids[1]=UserHandle.getUserGid(UserHandle.getUserId(uid));
    }
    checkTime(startTime,""String_Node_Str"");
    if (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) {
      if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL && mTopComponent != null && app.processName.equals(mTopComponent.getPackageName())) {
        uid=0;
      }
      if (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL && (app.info.flags & ApplicationInfo.FLAG_FACTORY_TEST) != 0) {
        uid=0;
      }
    }
    int debugFlags=0;
    if ((app.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if ((app.info.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0 || mSafeMode == true) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
    String requiredAbi=(abiOverride != null) ? abiOverride : app.info.primaryCpuAbi;
    if (requiredAbi == null) {
      requiredAbi=Build.SUPPORTED_ABIS[0];
    }
    String instructionSet=null;
    if (app.info.primaryCpuAbi != null) {
      instructionSet=VMRuntime.getInstructionSet(app.info.primaryCpuAbi);
    }
    app.gids=gids;
    app.requiredAbi=requiredAbi;
    app.instructionSet=instructionSet;
    boolean isActivityProcess=(entryPoint == null);
    if (entryPoint == null)     entryPoint=""String_Node_Str"";
    checkTime(startTime,""String_Node_Str"");
    Process.ProcessStartResult startResult=Process.start(entryPoint,app.processName,uid,uid,gids,debugFlags,mountExternal,app.info.targetSdkVersion,app.info.seinfo,requiredAbi,instructionSet,app.info.dataDir,entryPointArgs);
    checkTime(startTime,""String_Node_Str"");
    if (app.isolated) {
      mBatteryStatsService.addIsolatedUid(app.uid,app.info.uid);
    }
    mBatteryStatsService.noteProcessStart(app.processName,app.info.uid);
    checkTime(startTime,""String_Node_Str"");
    EventLog.writeEvent(EventLogTags.AM_PROC_START,UserHandle.getUserId(uid),startResult.pid,uid,app.processName,hostingType,hostingNameStr != null ? hostingNameStr : ""String_Node_Str"");
    if (app.persistent) {
      Watchdog.getInstance().processStarted(app.processName,startResult.pid);
    }
    checkTime(startTime,""String_Node_Str"");
    StringBuilder buf=mStringBuilder;
    buf.setLength(0);
    buf.append(""String_Node_Str"");
    buf.append(startResult.pid);
    buf.append(':');
    buf.append(app.processName);
    buf.append('/');
    UserHandle.formatUid(buf,uid);
    if (!isActivityProcess) {
      buf.append(""String_Node_Str"");
      buf.append(entryPoint);
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
    buf.append(hostingType);
    if (hostingNameStr != null) {
      buf.append(""String_Node_Str"");
      buf.append(hostingNameStr);
    }
    Slog.i(TAG,buf.toString());
    app.setPid(startResult.pid);
    app.usingWrapper=startResult.usingWrapper;
    app.removed=false;
    app.killed=false;
    app.killedByAm=false;
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      this.mPidsSelfLocked.put(startResult.pid,app);
      if (isActivityProcess) {
        Message msg=mHandler.obtainMessage(PROC_START_TIMEOUT_MSG);
        msg.obj=app;
        mHandler.sendMessageDelayed(msg,startResult.usingWrapper ? PROC_START_TIMEOUT_WITH_WRAPPER : PROC_START_TIMEOUT);
      }
    }
    checkTime(startTime,""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    app.setPid(0);
    mBatteryStatsService.noteProcessFinish(app.processName,app.info.uid);
    if (app.isolated) {
      mBatteryStatsService.removeIsolatedUid(app.uid,app.info.uid);
    }
    Slog.e(TAG,""String_Node_Str"" + app.processName,e);
  }
}",0.9415858811831966
195595,"@Override public void addPackageDependency(String packageName){
synchronized (this) {
    int callingPid=Binder.getCallingPid();
    if (callingPid == Process.myPid()) {
      Slog.w(TAG,""String_Node_Str"");
      return;
    }
    ProcessRecord proc;
synchronized (mPidsSelfLocked) {
      proc=mPidsSelfLocked.get(Binder.getCallingPid());
    }
    if (proc != null) {
      if (proc.pkgDeps == null) {
        proc.pkgDeps=new ArraySet<String>(1);
      }
      proc.pkgDeps.add(packageName);
    }
  }
}","@Override public void addPackageDependency(String packageName){
synchronized (this) {
    int callingPid=Binder.getCallingPid();
    if (callingPid == Process.myPid()) {
      return;
    }
    ProcessRecord proc;
synchronized (mPidsSelfLocked) {
      proc=mPidsSelfLocked.get(Binder.getCallingPid());
    }
    if (proc != null) {
      if (proc.pkgDeps == null) {
        proc.pkgDeps=new ArraySet<String>(1);
      }
      proc.pkgDeps.add(packageName);
    }
  }
}",0.962051282051282
195596,"private void populateSettings(Bundle snapshot,Map<String,Class<?>> map){
  Context context=mActivityManagerService.mContext;
  for (  Map.Entry<String,Class<?>> entry : map.entrySet()) {
    String setting=entry.getKey();
    Class<?> type=entry.getValue();
    try {
      if (type == String.class) {
        final String value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getString(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getString(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getString(context.getContentResolver(),setting);
        }
        snapshot.putString(setting,value);
      }
 else       if (type == int.class) {
        final int value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getInt(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getInt(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getInt(context.getContentResolver(),setting);
        }
        snapshot.putInt(setting,value);
      }
 else       if (type == float.class) {
        final float value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getFloat(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getFloat(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getFloat(context.getContentResolver(),setting);
        }
        snapshot.putFloat(setting,value);
      }
 else       if (type == long.class) {
        final long value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getLong(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getLong(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getLong(context.getContentResolver(),setting);
        }
        snapshot.putLong(setting,value);
      }
    }
 catch (    SettingNotFoundException snfe) {
      Log.w(LOG_TAG,""String_Node_Str"" + setting + ""String_Node_Str"",snfe);
    }
  }
}","private void populateSettings(Bundle snapshot,Map<String,Class<?>> map){
  Context context=mActivityManagerService.mContext;
  for (  Map.Entry<String,Class<?>> entry : map.entrySet()) {
    String setting=entry.getKey();
    Class<?> type=entry.getValue();
    if (type == String.class) {
      final String value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getString(context.getContentResolver(),setting);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getString(context.getContentResolver(),setting);
      }
 else {
        value=Settings.Global.getString(context.getContentResolver(),setting);
      }
      snapshot.putString(setting,value);
    }
 else     if (type == int.class) {
      final int value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getInt(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getInt(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getInt(context.getContentResolver(),setting,0);
      }
      snapshot.putInt(setting,value);
    }
 else     if (type == float.class) {
      final float value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getFloat(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getFloat(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getFloat(context.getContentResolver(),setting,0);
      }
      snapshot.putFloat(setting,value);
    }
 else     if (type == long.class) {
      final long value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getLong(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getLong(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getLong(context.getContentResolver(),setting,0);
      }
      snapshot.putLong(setting,value);
    }
  }
}",0.5291759465478841
195597,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.println();
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  pw.print(lastPss);
  pw.print(""String_Node_Str"");
  pw.println(lastCachedPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}","void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  pw.print(lastPss);
  pw.print(""String_Node_Str"");
  pw.println(lastCachedPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}",0.9812317980800344
195598,"@Override protected void onServiceAdded(ManagedServiceInfo info){
  Slog.d(TAG,""String_Node_Str"" + info);
  final IConditionProvider provider=provider(info);
  try {
    provider.onConnected();
  }
 catch (  RemoteException e) {
  }
synchronized (mMutex) {
    if (info.component.equals(mExitConditionComponent)) {
      final ConditionRecord manualRecord=getRecordLocked(mExitCondition.id,mExitConditionComponent);
      manualRecord.isManual=true;
    }
    final int N=mRecords.size();
    for (int i=0; i < N; i++) {
      final ConditionRecord r=mRecords.get(i);
      if (!r.component.equals(info.component))       continue;
      r.info=info;
      if (r.isAutomatic || r.isManual) {
        subscribeLocked(r);
      }
    }
  }
}","@Override protected void onServiceAdded(ManagedServiceInfo info){
  final IConditionProvider provider=provider(info);
  try {
    provider.onConnected();
  }
 catch (  RemoteException e) {
  }
synchronized (mMutex) {
    if (info.component.equals(mExitConditionComponent)) {
      final ConditionRecord manualRecord=getRecordLocked(mExitCondition.id,mExitConditionComponent);
      manualRecord.isManual=true;
    }
    final int N=mRecords.size();
    for (int i=0; i < N; i++) {
      final ConditionRecord r=mRecords.get(i);
      if (!r.component.equals(info.component))       continue;
      r.info=info;
      if (r.isAutomatic || r.isManual) {
        subscribeLocked(r);
      }
    }
  }
}",0.9721448467966574
195599,"/** 
 * Constructs a new   {@code PrintWriter} with {@code pr} as its targetprinter and a custom buffer size.  Because a  {@link Printer} is line-base,autoflush is always enabled.
 * @param pr the target writer.
 * @param bufferLen specifies the size of the FastPrintWriter's internal buffer; the default is 512.
 * @throws NullPointerException if  {@code pr} is {@code null}.
 */
public FastPrintWriter(Printer pr,int bufferLen){
  super(sDummyWriter,true);
  if (pr == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  mBufferLen=bufferLen;
  mText=new char[bufferLen];
  mBytes=null;
  mOutputStream=null;
  mWriter=null;
  mPrinter=pr;
  mAutoFlush=true;
  mSeparator=System.lineSeparator();
  initDefaultEncoder();
}","/** 
 * Constructs a new   {@code PrintWriter} with {@code pr} as its targetprinter and a custom buffer size.  Because a  {@link Printer} is line-base,autoflush is always enabled.
 * @param pr the target writer.
 * @param bufferLen specifies the size of the FastPrintWriter's internal buffer; the default is 512.
 * @throws NullPointerException if  {@code pr} is {@code null}.
 */
public FastPrintWriter(Printer pr,int bufferLen){
  super(new DummyWriter(),true);
  if (pr == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  mBufferLen=bufferLen;
  mText=new char[bufferLen];
  mBytes=null;
  mOutputStream=null;
  mWriter=null;
  mPrinter=pr;
  mAutoFlush=true;
  mSeparator=System.lineSeparator();
  initDefaultEncoder();
}",0.9952861952861952
195600,"private void readPermissionsFromXml(File permFile,boolean onlyFeatures){
  FileReader permReader=null;
  try {
    permReader=new FileReader(permFile);
  }
 catch (  FileNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + permFile);
    return;
  }
  final boolean lowRam=ActivityManager.isLowRamDeviceStatic();
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(permReader);
    int type;
    while ((type=parser.next()) != parser.START_TAG && type != parser.END_DOCUMENT) {
      ;
    }
    if (type != parser.START_TAG) {
      throw new XmlPullParserException(""String_Node_Str"");
    }
    if (!parser.getName().equals(""String_Node_Str"") && !parser.getName().equals(""String_Node_Str"")) {
      throw new XmlPullParserException(""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
    }
    while (true) {
      XmlUtils.nextElement(parser);
      if (parser.getEventType() == XmlPullParser.END_DOCUMENT) {
        break;
      }
      String name=parser.getName();
      if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String gidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (gidStr != null) {
          int gid=android.os.Process.getGidForName(gidStr);
          mGlobalGids=appendInt(mGlobalGids,gid);
        }
 else {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        readPermission(parser,perm);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        String uidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (uidStr == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        int uid=Process.getUidForName(uidStr);
        if (uid < 0) {
          Slog.w(TAG,""String_Node_Str"" + uidStr + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        ArraySet<String> perms=mSystemPermissions.get(uid);
        if (perms == null) {
          perms=new ArraySet<String>();
          mSystemPermissions.put(uid,perms);
        }
        perms.add(perm);
        XmlUtils.skipCurrentTag(parser);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String lname=parser.getAttributeValue(null,""String_Node_Str"");
        String lfile=parser.getAttributeValue(null,""String_Node_Str"");
        if (lname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else         if (lfile == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mSharedLibraries.put(lname,lfile);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        boolean allowed;
        if (!lowRam) {
          allowed=true;
        }
 else {
          String notLowRam=parser.getAttributeValue(null,""String_Node_Str"");
          allowed=!""String_Node_Str"".equals(notLowRam);
        }
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else         if (allowed) {
          FeatureInfo fi=new FeatureInfo();
          fi.name=fname;
          mAvailableFeatures.put(fname,fi);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mUnavailableFeatures.add(fname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mAllowInPowerSave.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mFixedImeApps.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else {
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
    }
  }
 catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
 finally {
    IoUtils.closeQuietly(permReader);
  }
  for (  String fname : mUnavailableFeatures) {
    if (mAvailableFeatures.remove(fname) != null) {
      Slog.d(TAG,""String_Node_Str"" + fname);
    }
  }
}","private void readPermissionsFromXml(File permFile,boolean onlyFeatures){
  FileReader permReader=null;
  try {
    permReader=new FileReader(permFile);
  }
 catch (  FileNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + permFile);
    return;
  }
  final boolean lowRam=ActivityManager.isLowRamDeviceStatic();
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(permReader);
    int type;
    while ((type=parser.next()) != parser.START_TAG && type != parser.END_DOCUMENT) {
      ;
    }
    if (type != parser.START_TAG) {
      throw new XmlPullParserException(""String_Node_Str"");
    }
    if (!parser.getName().equals(""String_Node_Str"") && !parser.getName().equals(""String_Node_Str"")) {
      throw new XmlPullParserException(""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getName()+ ""String_Node_Str"");
    }
    while (true) {
      XmlUtils.nextElement(parser);
      if (parser.getEventType() == XmlPullParser.END_DOCUMENT) {
        break;
      }
      String name=parser.getName();
      if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String gidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (gidStr != null) {
          int gid=android.os.Process.getGidForName(gidStr);
          mGlobalGids=appendInt(mGlobalGids,gid);
        }
 else {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        readPermission(parser,perm);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        String uidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (uidStr == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        int uid=Process.getUidForName(uidStr);
        if (uid < 0) {
          Slog.w(TAG,""String_Node_Str"" + uidStr + ""String_Node_Str""+ permFile+ ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        ArraySet<String> perms=mSystemPermissions.get(uid);
        if (perms == null) {
          perms=new ArraySet<String>();
          mSystemPermissions.put(uid,perms);
        }
        perms.add(perm);
        XmlUtils.skipCurrentTag(parser);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String lname=parser.getAttributeValue(null,""String_Node_Str"");
        String lfile=parser.getAttributeValue(null,""String_Node_Str"");
        if (lname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else         if (lfile == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mSharedLibraries.put(lname,lfile);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        boolean allowed;
        if (!lowRam) {
          allowed=true;
        }
 else {
          String notLowRam=parser.getAttributeValue(null,""String_Node_Str"");
          allowed=!""String_Node_Str"".equals(notLowRam);
        }
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else         if (allowed) {
          FeatureInfo fi=new FeatureInfo();
          fi.name=fname;
          mAvailableFeatures.put(fname,fi);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mUnavailableFeatures.add(fname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mAllowInPowerSave.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mFixedImeApps.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else {
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
    }
  }
 catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
 finally {
    IoUtils.closeQuietly(permReader);
  }
  for (  String fname : mUnavailableFeatures) {
    if (mAvailableFeatures.remove(fname) != null) {
      Slog.d(TAG,""String_Node_Str"" + fname);
    }
  }
}",0.9671329849991572
195601,"private final void startProcessLocked(ProcessRecord app,String hostingType,String hostingNameStr,String abiOverride,String entryPoint,String[] entryPointArgs){
  long startTime=SystemClock.elapsedRealtime();
  if (app.pid > 0 && app.pid != MY_PID) {
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      mPidsSelfLocked.remove(app.pid);
      mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
    }
    checkTime(startTime,""String_Node_Str"");
    app.setPid(0);
  }
  if (DEBUG_PROCESSES && mProcessesOnHold.contains(app))   Slog.v(TAG,""String_Node_Str"" + app);
  mProcessesOnHold.remove(app);
  checkTime(startTime,""String_Node_Str"");
  updateCpuStats();
  checkTime(startTime,""String_Node_Str"");
  try {
    int uid=app.uid;
    int[] gids=null;
    int mountExternal=Zygote.MOUNT_EXTERNAL_NONE;
    if (!app.isolated) {
      int[] permGids=null;
      try {
        checkTime(startTime,""String_Node_Str"");
        final PackageManager pm=mContext.getPackageManager();
        permGids=pm.getPackageGids(app.info.packageName);
        if (Environment.isExternalStorageEmulated()) {
          checkTime(startTime,""String_Node_Str"");
          if (pm.checkPermission(android.Manifest.permission.ACCESS_ALL_EXTERNAL_STORAGE,app.info.packageName) == PERMISSION_GRANTED) {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
          }
 else {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
          }
        }
      }
 catch (      PackageManager.NameNotFoundException e) {
        Slog.w(TAG,""String_Node_Str"",e);
      }
      if (permGids == null) {
        gids=new int[2];
      }
 else {
        gids=new int[permGids.length + 2];
        System.arraycopy(permGids,0,gids,2,permGids.length);
      }
      gids[0]=UserHandle.getSharedAppGid(UserHandle.getAppId(uid));
      gids[1]=UserHandle.getUserGid(UserHandle.getUserId(uid));
    }
    checkTime(startTime,""String_Node_Str"");
    if (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) {
      if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL && mTopComponent != null && app.processName.equals(mTopComponent.getPackageName())) {
        uid=0;
      }
      if (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL && (app.info.flags & ApplicationInfo.FLAG_FACTORY_TEST) != 0) {
        uid=0;
      }
    }
    int debugFlags=0;
    if ((app.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if ((app.info.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0 || mSafeMode == true) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
    String requiredAbi=(abiOverride != null) ? abiOverride : app.info.primaryCpuAbi;
    if (requiredAbi == null) {
      requiredAbi=Build.SUPPORTED_ABIS[0];
    }
    String instructionSet=null;
    if (app.info.primaryCpuAbi != null) {
      instructionSet=VMRuntime.getInstructionSet(app.info.primaryCpuAbi);
    }
    boolean isActivityProcess=(entryPoint == null);
    if (entryPoint == null)     entryPoint=""String_Node_Str"";
    checkTime(startTime,""String_Node_Str"");
    Process.ProcessStartResult startResult=Process.start(entryPoint,app.processName,uid,uid,gids,debugFlags,mountExternal,app.info.targetSdkVersion,app.info.seinfo,requiredAbi,instructionSet,app.info.dataDir,entryPointArgs);
    checkTime(startTime,""String_Node_Str"");
    if (app.isolated) {
      mBatteryStatsService.addIsolatedUid(app.uid,app.info.uid);
    }
    mBatteryStatsService.noteProcessStart(app.processName,app.info.uid);
    checkTime(startTime,""String_Node_Str"");
    EventLog.writeEvent(EventLogTags.AM_PROC_START,UserHandle.getUserId(uid),startResult.pid,uid,app.processName,hostingType,hostingNameStr != null ? hostingNameStr : ""String_Node_Str"");
    if (app.persistent) {
      Watchdog.getInstance().processStarted(app.processName,startResult.pid);
    }
    checkTime(startTime,""String_Node_Str"");
    StringBuilder buf=mStringBuilder;
    buf.setLength(0);
    buf.append(""String_Node_Str"");
    buf.append(app.processName);
    if (!isActivityProcess) {
      buf.append(""String_Node_Str"");
      buf.append(entryPoint);
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
    buf.append(hostingType);
    if (hostingNameStr != null) {
      buf.append(""String_Node_Str"");
      buf.append(hostingNameStr);
    }
    buf.append(""String_Node_Str"");
    buf.append(startResult.pid);
    buf.append(""String_Node_Str"");
    buf.append(uid);
    buf.append(""String_Node_Str"");
    if (gids != null) {
      for (int gi=0; gi < gids.length; gi++) {
        if (gi != 0)         buf.append(""String_Node_Str"");
        buf.append(gids[gi]);
      }
    }
    buf.append(""String_Node_Str"");
    if (requiredAbi != null) {
      buf.append(""String_Node_Str"");
      buf.append(requiredAbi);
    }
    Slog.i(TAG,buf.toString());
    app.setPid(startResult.pid);
    app.usingWrapper=startResult.usingWrapper;
    app.removed=false;
    app.killed=false;
    app.killedByAm=false;
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      this.mPidsSelfLocked.put(startResult.pid,app);
      if (isActivityProcess) {
        Message msg=mHandler.obtainMessage(PROC_START_TIMEOUT_MSG);
        msg.obj=app;
        mHandler.sendMessageDelayed(msg,startResult.usingWrapper ? PROC_START_TIMEOUT_WITH_WRAPPER : PROC_START_TIMEOUT);
      }
    }
    checkTime(startTime,""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    app.setPid(0);
    mBatteryStatsService.noteProcessFinish(app.processName,app.info.uid);
    if (app.isolated) {
      mBatteryStatsService.removeIsolatedUid(app.uid,app.info.uid);
    }
    Slog.e(TAG,""String_Node_Str"" + app.processName,e);
  }
}","private final void startProcessLocked(ProcessRecord app,String hostingType,String hostingNameStr,String abiOverride,String entryPoint,String[] entryPointArgs){
  long startTime=SystemClock.elapsedRealtime();
  if (app.pid > 0 && app.pid != MY_PID) {
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      mPidsSelfLocked.remove(app.pid);
      mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
    }
    checkTime(startTime,""String_Node_Str"");
    app.setPid(0);
  }
  if (DEBUG_PROCESSES && mProcessesOnHold.contains(app))   Slog.v(TAG,""String_Node_Str"" + app);
  mProcessesOnHold.remove(app);
  checkTime(startTime,""String_Node_Str"");
  updateCpuStats();
  checkTime(startTime,""String_Node_Str"");
  try {
    int uid=app.uid;
    int[] gids=null;
    int mountExternal=Zygote.MOUNT_EXTERNAL_NONE;
    if (!app.isolated) {
      int[] permGids=null;
      try {
        checkTime(startTime,""String_Node_Str"");
        final PackageManager pm=mContext.getPackageManager();
        permGids=pm.getPackageGids(app.info.packageName);
        if (Environment.isExternalStorageEmulated()) {
          checkTime(startTime,""String_Node_Str"");
          if (pm.checkPermission(android.Manifest.permission.ACCESS_ALL_EXTERNAL_STORAGE,app.info.packageName) == PERMISSION_GRANTED) {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
          }
 else {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
          }
        }
      }
 catch (      PackageManager.NameNotFoundException e) {
        Slog.w(TAG,""String_Node_Str"",e);
      }
      if (permGids == null) {
        gids=new int[2];
      }
 else {
        gids=new int[permGids.length + 2];
        System.arraycopy(permGids,0,gids,2,permGids.length);
      }
      gids[0]=UserHandle.getSharedAppGid(UserHandle.getAppId(uid));
      gids[1]=UserHandle.getUserGid(UserHandle.getUserId(uid));
    }
    checkTime(startTime,""String_Node_Str"");
    if (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) {
      if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL && mTopComponent != null && app.processName.equals(mTopComponent.getPackageName())) {
        uid=0;
      }
      if (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL && (app.info.flags & ApplicationInfo.FLAG_FACTORY_TEST) != 0) {
        uid=0;
      }
    }
    int debugFlags=0;
    if ((app.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if ((app.info.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0 || mSafeMode == true) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
    String requiredAbi=(abiOverride != null) ? abiOverride : app.info.primaryCpuAbi;
    if (requiredAbi == null) {
      requiredAbi=Build.SUPPORTED_ABIS[0];
    }
    String instructionSet=null;
    if (app.info.primaryCpuAbi != null) {
      instructionSet=VMRuntime.getInstructionSet(app.info.primaryCpuAbi);
    }
    app.gids=gids;
    app.requiredAbi=requiredAbi;
    app.instructionSet=instructionSet;
    boolean isActivityProcess=(entryPoint == null);
    if (entryPoint == null)     entryPoint=""String_Node_Str"";
    checkTime(startTime,""String_Node_Str"");
    Process.ProcessStartResult startResult=Process.start(entryPoint,app.processName,uid,uid,gids,debugFlags,mountExternal,app.info.targetSdkVersion,app.info.seinfo,requiredAbi,instructionSet,app.info.dataDir,entryPointArgs);
    checkTime(startTime,""String_Node_Str"");
    if (app.isolated) {
      mBatteryStatsService.addIsolatedUid(app.uid,app.info.uid);
    }
    mBatteryStatsService.noteProcessStart(app.processName,app.info.uid);
    checkTime(startTime,""String_Node_Str"");
    EventLog.writeEvent(EventLogTags.AM_PROC_START,UserHandle.getUserId(uid),startResult.pid,uid,app.processName,hostingType,hostingNameStr != null ? hostingNameStr : ""String_Node_Str"");
    if (app.persistent) {
      Watchdog.getInstance().processStarted(app.processName,startResult.pid);
    }
    checkTime(startTime,""String_Node_Str"");
    StringBuilder buf=mStringBuilder;
    buf.setLength(0);
    buf.append(""String_Node_Str"");
    buf.append(startResult.pid);
    buf.append(':');
    buf.append(app.processName);
    buf.append('/');
    UserHandle.formatUid(buf,uid);
    if (!isActivityProcess) {
      buf.append(""String_Node_Str"");
      buf.append(entryPoint);
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
    buf.append(hostingType);
    if (hostingNameStr != null) {
      buf.append(""String_Node_Str"");
      buf.append(hostingNameStr);
    }
    Slog.i(TAG,buf.toString());
    app.setPid(startResult.pid);
    app.usingWrapper=startResult.usingWrapper;
    app.removed=false;
    app.killed=false;
    app.killedByAm=false;
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      this.mPidsSelfLocked.put(startResult.pid,app);
      if (isActivityProcess) {
        Message msg=mHandler.obtainMessage(PROC_START_TIMEOUT_MSG);
        msg.obj=app;
        mHandler.sendMessageDelayed(msg,startResult.usingWrapper ? PROC_START_TIMEOUT_WITH_WRAPPER : PROC_START_TIMEOUT);
      }
    }
    checkTime(startTime,""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    app.setPid(0);
    mBatteryStatsService.noteProcessFinish(app.processName,app.info.uid);
    if (app.isolated) {
      mBatteryStatsService.removeIsolatedUid(app.uid,app.info.uid);
    }
    Slog.e(TAG,""String_Node_Str"" + app.processName,e);
  }
}",0.9415858811831966
195602,"@Override public void addPackageDependency(String packageName){
synchronized (this) {
    int callingPid=Binder.getCallingPid();
    if (callingPid == Process.myPid()) {
      Slog.w(TAG,""String_Node_Str"");
      return;
    }
    ProcessRecord proc;
synchronized (mPidsSelfLocked) {
      proc=mPidsSelfLocked.get(Binder.getCallingPid());
    }
    if (proc != null) {
      if (proc.pkgDeps == null) {
        proc.pkgDeps=new ArraySet<String>(1);
      }
      proc.pkgDeps.add(packageName);
    }
  }
}","@Override public void addPackageDependency(String packageName){
synchronized (this) {
    int callingPid=Binder.getCallingPid();
    if (callingPid == Process.myPid()) {
      return;
    }
    ProcessRecord proc;
synchronized (mPidsSelfLocked) {
      proc=mPidsSelfLocked.get(Binder.getCallingPid());
    }
    if (proc != null) {
      if (proc.pkgDeps == null) {
        proc.pkgDeps=new ArraySet<String>(1);
      }
      proc.pkgDeps.add(packageName);
    }
  }
}",0.962051282051282
195603,"private void populateSettings(Bundle snapshot,Map<String,Class<?>> map){
  Context context=mActivityManagerService.mContext;
  for (  Map.Entry<String,Class<?>> entry : map.entrySet()) {
    String setting=entry.getKey();
    Class<?> type=entry.getValue();
    try {
      if (type == String.class) {
        final String value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getString(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getString(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getString(context.getContentResolver(),setting);
        }
        snapshot.putString(setting,value);
      }
 else       if (type == int.class) {
        final int value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getInt(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getInt(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getInt(context.getContentResolver(),setting);
        }
        snapshot.putInt(setting,value);
      }
 else       if (type == float.class) {
        final float value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getFloat(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getFloat(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getFloat(context.getContentResolver(),setting);
        }
        snapshot.putFloat(setting,value);
      }
 else       if (type == long.class) {
        final long value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getLong(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getLong(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getLong(context.getContentResolver(),setting);
        }
        snapshot.putLong(setting,value);
      }
    }
 catch (    SettingNotFoundException snfe) {
      Log.w(LOG_TAG,""String_Node_Str"" + setting + ""String_Node_Str"",snfe);
    }
  }
}","private void populateSettings(Bundle snapshot,Map<String,Class<?>> map){
  Context context=mActivityManagerService.mContext;
  for (  Map.Entry<String,Class<?>> entry : map.entrySet()) {
    String setting=entry.getKey();
    Class<?> type=entry.getValue();
    if (type == String.class) {
      final String value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getString(context.getContentResolver(),setting);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getString(context.getContentResolver(),setting);
      }
 else {
        value=Settings.Global.getString(context.getContentResolver(),setting);
      }
      snapshot.putString(setting,value);
    }
 else     if (type == int.class) {
      final int value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getInt(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getInt(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getInt(context.getContentResolver(),setting,0);
      }
      snapshot.putInt(setting,value);
    }
 else     if (type == float.class) {
      final float value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getFloat(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getFloat(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getFloat(context.getContentResolver(),setting,0);
      }
      snapshot.putFloat(setting,value);
    }
 else     if (type == long.class) {
      final long value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getLong(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getLong(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getLong(context.getContentResolver(),setting,0);
      }
      snapshot.putLong(setting,value);
    }
  }
}",0.5291759465478841
195604,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.println();
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  pw.print(lastPss);
  pw.print(""String_Node_Str"");
  pw.println(lastCachedPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}","void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  pw.print(lastPss);
  pw.print(""String_Node_Str"");
  pw.println(lastCachedPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}",0.9812317980800344
195605,"@Override protected void onServiceAdded(ManagedServiceInfo info){
  Slog.d(TAG,""String_Node_Str"" + info);
  final IConditionProvider provider=provider(info);
  try {
    provider.onConnected();
  }
 catch (  RemoteException e) {
  }
synchronized (mMutex) {
    if (info.component.equals(mExitConditionComponent)) {
      final ConditionRecord manualRecord=getRecordLocked(mExitCondition.id,mExitConditionComponent);
      manualRecord.isManual=true;
    }
    final int N=mRecords.size();
    for (int i=0; i < N; i++) {
      final ConditionRecord r=mRecords.get(i);
      if (!r.component.equals(info.component))       continue;
      r.info=info;
      if (r.isAutomatic || r.isManual) {
        subscribeLocked(r);
      }
    }
  }
}","@Override protected void onServiceAdded(ManagedServiceInfo info){
  final IConditionProvider provider=provider(info);
  try {
    provider.onConnected();
  }
 catch (  RemoteException e) {
  }
synchronized (mMutex) {
    if (info.component.equals(mExitConditionComponent)) {
      final ConditionRecord manualRecord=getRecordLocked(mExitCondition.id,mExitConditionComponent);
      manualRecord.isManual=true;
    }
    final int N=mRecords.size();
    for (int i=0; i < N; i++) {
      final ConditionRecord r=mRecords.get(i);
      if (!r.component.equals(info.component))       continue;
      r.info=info;
      if (r.isAutomatic || r.isManual) {
        subscribeLocked(r);
      }
    }
  }
}",0.9721448467966574
195606,"/** 
 * Constructs a new   {@code PrintWriter} with {@code pr} as its targetprinter and a custom buffer size.  Because a  {@link Printer} is line-base,autoflush is always enabled.
 * @param pr the target writer.
 * @param bufferLen specifies the size of the FastPrintWriter's internal buffer; the default is 512.
 * @throws NullPointerException if  {@code pr} is {@code null}.
 */
public FastPrintWriter(Printer pr,int bufferLen){
  super(sDummyWriter,true);
  if (pr == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  mBufferLen=bufferLen;
  mText=new char[bufferLen];
  mBytes=null;
  mOutputStream=null;
  mWriter=null;
  mPrinter=pr;
  mAutoFlush=true;
  mSeparator=System.lineSeparator();
  initDefaultEncoder();
}","/** 
 * Constructs a new   {@code PrintWriter} with {@code pr} as its targetprinter and a custom buffer size.  Because a  {@link Printer} is line-base,autoflush is always enabled.
 * @param pr the target writer.
 * @param bufferLen specifies the size of the FastPrintWriter's internal buffer; the default is 512.
 * @throws NullPointerException if  {@code pr} is {@code null}.
 */
public FastPrintWriter(Printer pr,int bufferLen){
  super(new DummyWriter(),true);
  if (pr == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  mBufferLen=bufferLen;
  mText=new char[bufferLen];
  mBytes=null;
  mOutputStream=null;
  mWriter=null;
  mPrinter=pr;
  mAutoFlush=true;
  mSeparator=System.lineSeparator();
  initDefaultEncoder();
}",0.9952861952861952
195607,"private void readPermissionsFromXml(File permFile,boolean onlyFeatures){
  FileReader permReader=null;
  try {
    permReader=new FileReader(permFile);
  }
 catch (  FileNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + permFile);
    return;
  }
  final boolean lowRam=ActivityManager.isLowRamDeviceStatic();
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(permReader);
    int type;
    while ((type=parser.next()) != parser.START_TAG && type != parser.END_DOCUMENT) {
      ;
    }
    if (type != parser.START_TAG) {
      throw new XmlPullParserException(""String_Node_Str"");
    }
    if (!parser.getName().equals(""String_Node_Str"") && !parser.getName().equals(""String_Node_Str"")) {
      throw new XmlPullParserException(""String_Node_Str"" + parser.getName() + ""String_Node_Str"");
    }
    while (true) {
      XmlUtils.nextElement(parser);
      if (parser.getEventType() == XmlPullParser.END_DOCUMENT) {
        break;
      }
      String name=parser.getName();
      if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String gidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (gidStr != null) {
          int gid=android.os.Process.getGidForName(gidStr);
          mGlobalGids=appendInt(mGlobalGids,gid);
        }
 else {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        readPermission(parser,perm);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        String uidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (uidStr == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        int uid=Process.getUidForName(uidStr);
        if (uid < 0) {
          Slog.w(TAG,""String_Node_Str"" + uidStr + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        ArraySet<String> perms=mSystemPermissions.get(uid);
        if (perms == null) {
          perms=new ArraySet<String>();
          mSystemPermissions.put(uid,perms);
        }
        perms.add(perm);
        XmlUtils.skipCurrentTag(parser);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String lname=parser.getAttributeValue(null,""String_Node_Str"");
        String lfile=parser.getAttributeValue(null,""String_Node_Str"");
        if (lname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else         if (lfile == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mSharedLibraries.put(lname,lfile);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        boolean allowed;
        if (!lowRam) {
          allowed=true;
        }
 else {
          String notLowRam=parser.getAttributeValue(null,""String_Node_Str"");
          allowed=!""String_Node_Str"".equals(notLowRam);
        }
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else         if (allowed) {
          FeatureInfo fi=new FeatureInfo();
          fi.name=fname;
          mAvailableFeatures.put(fname,fi);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mUnavailableFeatures.add(fname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mAllowInPowerSave.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + parser.getPositionDescription());
        }
 else {
          mFixedImeApps.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else {
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
    }
  }
 catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
 finally {
    IoUtils.closeQuietly(permReader);
  }
  for (  String fname : mUnavailableFeatures) {
    if (mAvailableFeatures.remove(fname) != null) {
      Slog.d(TAG,""String_Node_Str"" + fname);
    }
  }
}","private void readPermissionsFromXml(File permFile,boolean onlyFeatures){
  FileReader permReader=null;
  try {
    permReader=new FileReader(permFile);
  }
 catch (  FileNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + permFile);
    return;
  }
  final boolean lowRam=ActivityManager.isLowRamDeviceStatic();
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(permReader);
    int type;
    while ((type=parser.next()) != parser.START_TAG && type != parser.END_DOCUMENT) {
      ;
    }
    if (type != parser.START_TAG) {
      throw new XmlPullParserException(""String_Node_Str"");
    }
    if (!parser.getName().equals(""String_Node_Str"") && !parser.getName().equals(""String_Node_Str"")) {
      throw new XmlPullParserException(""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getName()+ ""String_Node_Str"");
    }
    while (true) {
      XmlUtils.nextElement(parser);
      if (parser.getEventType() == XmlPullParser.END_DOCUMENT) {
        break;
      }
      String name=parser.getName();
      if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String gidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (gidStr != null) {
          int gid=android.os.Process.getGidForName(gidStr);
          mGlobalGids=appendInt(mGlobalGids,gid);
        }
 else {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        readPermission(parser,perm);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String perm=parser.getAttributeValue(null,""String_Node_Str"");
        if (perm == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        String uidStr=parser.getAttributeValue(null,""String_Node_Str"");
        if (uidStr == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        int uid=Process.getUidForName(uidStr);
        if (uid < 0) {
          Slog.w(TAG,""String_Node_Str"" + uidStr + ""String_Node_Str""+ permFile+ ""String_Node_Str""+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        ArraySet<String> perms=mSystemPermissions.get(uid);
        if (perms == null) {
          perms=new ArraySet<String>();
          mSystemPermissions.put(uid,perms);
        }
        perms.add(perm);
        XmlUtils.skipCurrentTag(parser);
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String lname=parser.getAttributeValue(null,""String_Node_Str"");
        String lfile=parser.getAttributeValue(null,""String_Node_Str"");
        if (lname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else         if (lfile == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mSharedLibraries.put(lname,lfile);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        boolean allowed;
        if (!lowRam) {
          allowed=true;
        }
 else {
          String notLowRam=parser.getAttributeValue(null,""String_Node_Str"");
          allowed=!""String_Node_Str"".equals(notLowRam);
        }
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else         if (allowed) {
          FeatureInfo fi=new FeatureInfo();
          fi.name=fname;
          mAvailableFeatures.put(fname,fi);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name)) {
        String fname=parser.getAttributeValue(null,""String_Node_Str"");
        if (fname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mUnavailableFeatures.add(fname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mAllowInPowerSave.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if (""String_Node_Str"".equals(name) && !onlyFeatures) {
        String pkgname=parser.getAttributeValue(null,""String_Node_Str"");
        if (pkgname == null) {
          Slog.w(TAG,""String_Node_Str"" + permFile + ""String_Node_Str""+ parser.getPositionDescription());
        }
 else {
          mFixedImeApps.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else {
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
    }
  }
 catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"",e);
  }
 finally {
    IoUtils.closeQuietly(permReader);
  }
  for (  String fname : mUnavailableFeatures) {
    if (mAvailableFeatures.remove(fname) != null) {
      Slog.d(TAG,""String_Node_Str"" + fname);
    }
  }
}",0.9671329849991572
195608,"private final void startProcessLocked(ProcessRecord app,String hostingType,String hostingNameStr,String abiOverride,String entryPoint,String[] entryPointArgs){
  long startTime=SystemClock.elapsedRealtime();
  if (app.pid > 0 && app.pid != MY_PID) {
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      mPidsSelfLocked.remove(app.pid);
      mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
    }
    checkTime(startTime,""String_Node_Str"");
    app.setPid(0);
  }
  if (DEBUG_PROCESSES && mProcessesOnHold.contains(app))   Slog.v(TAG,""String_Node_Str"" + app);
  mProcessesOnHold.remove(app);
  checkTime(startTime,""String_Node_Str"");
  updateCpuStats();
  checkTime(startTime,""String_Node_Str"");
  try {
    int uid=app.uid;
    int[] gids=null;
    int mountExternal=Zygote.MOUNT_EXTERNAL_NONE;
    if (!app.isolated) {
      int[] permGids=null;
      try {
        checkTime(startTime,""String_Node_Str"");
        final PackageManager pm=mContext.getPackageManager();
        permGids=pm.getPackageGids(app.info.packageName);
        if (Environment.isExternalStorageEmulated()) {
          checkTime(startTime,""String_Node_Str"");
          if (pm.checkPermission(android.Manifest.permission.ACCESS_ALL_EXTERNAL_STORAGE,app.info.packageName) == PERMISSION_GRANTED) {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
          }
 else {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
          }
        }
      }
 catch (      PackageManager.NameNotFoundException e) {
        Slog.w(TAG,""String_Node_Str"",e);
      }
      if (permGids == null) {
        gids=new int[2];
      }
 else {
        gids=new int[permGids.length + 2];
        System.arraycopy(permGids,0,gids,2,permGids.length);
      }
      gids[0]=UserHandle.getSharedAppGid(UserHandle.getAppId(uid));
      gids[1]=UserHandle.getUserGid(UserHandle.getUserId(uid));
    }
    checkTime(startTime,""String_Node_Str"");
    if (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) {
      if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL && mTopComponent != null && app.processName.equals(mTopComponent.getPackageName())) {
        uid=0;
      }
      if (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL && (app.info.flags & ApplicationInfo.FLAG_FACTORY_TEST) != 0) {
        uid=0;
      }
    }
    int debugFlags=0;
    if ((app.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if ((app.info.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0 || mSafeMode == true) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
    String requiredAbi=(abiOverride != null) ? abiOverride : app.info.primaryCpuAbi;
    if (requiredAbi == null) {
      requiredAbi=Build.SUPPORTED_ABIS[0];
    }
    String instructionSet=null;
    if (app.info.primaryCpuAbi != null) {
      instructionSet=VMRuntime.getInstructionSet(app.info.primaryCpuAbi);
    }
    boolean isActivityProcess=(entryPoint == null);
    if (entryPoint == null)     entryPoint=""String_Node_Str"";
    checkTime(startTime,""String_Node_Str"");
    Process.ProcessStartResult startResult=Process.start(entryPoint,app.processName,uid,uid,gids,debugFlags,mountExternal,app.info.targetSdkVersion,app.info.seinfo,requiredAbi,instructionSet,app.info.dataDir,entryPointArgs);
    checkTime(startTime,""String_Node_Str"");
    if (app.isolated) {
      mBatteryStatsService.addIsolatedUid(app.uid,app.info.uid);
    }
    mBatteryStatsService.noteProcessStart(app.processName,app.info.uid);
    checkTime(startTime,""String_Node_Str"");
    EventLog.writeEvent(EventLogTags.AM_PROC_START,UserHandle.getUserId(uid),startResult.pid,uid,app.processName,hostingType,hostingNameStr != null ? hostingNameStr : ""String_Node_Str"");
    if (app.persistent) {
      Watchdog.getInstance().processStarted(app.processName,startResult.pid);
    }
    checkTime(startTime,""String_Node_Str"");
    StringBuilder buf=mStringBuilder;
    buf.setLength(0);
    buf.append(""String_Node_Str"");
    buf.append(app.processName);
    if (!isActivityProcess) {
      buf.append(""String_Node_Str"");
      buf.append(entryPoint);
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
    buf.append(hostingType);
    if (hostingNameStr != null) {
      buf.append(""String_Node_Str"");
      buf.append(hostingNameStr);
    }
    buf.append(""String_Node_Str"");
    buf.append(startResult.pid);
    buf.append(""String_Node_Str"");
    buf.append(uid);
    buf.append(""String_Node_Str"");
    if (gids != null) {
      for (int gi=0; gi < gids.length; gi++) {
        if (gi != 0)         buf.append(""String_Node_Str"");
        buf.append(gids[gi]);
      }
    }
    buf.append(""String_Node_Str"");
    if (requiredAbi != null) {
      buf.append(""String_Node_Str"");
      buf.append(requiredAbi);
    }
    Slog.i(TAG,buf.toString());
    app.setPid(startResult.pid);
    app.usingWrapper=startResult.usingWrapper;
    app.removed=false;
    app.killed=false;
    app.killedByAm=false;
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      this.mPidsSelfLocked.put(startResult.pid,app);
      if (isActivityProcess) {
        Message msg=mHandler.obtainMessage(PROC_START_TIMEOUT_MSG);
        msg.obj=app;
        mHandler.sendMessageDelayed(msg,startResult.usingWrapper ? PROC_START_TIMEOUT_WITH_WRAPPER : PROC_START_TIMEOUT);
      }
    }
    checkTime(startTime,""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    app.setPid(0);
    mBatteryStatsService.noteProcessFinish(app.processName,app.info.uid);
    if (app.isolated) {
      mBatteryStatsService.removeIsolatedUid(app.uid,app.info.uid);
    }
    Slog.e(TAG,""String_Node_Str"" + app.processName,e);
  }
}","private final void startProcessLocked(ProcessRecord app,String hostingType,String hostingNameStr,String abiOverride,String entryPoint,String[] entryPointArgs){
  long startTime=SystemClock.elapsedRealtime();
  if (app.pid > 0 && app.pid != MY_PID) {
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      mPidsSelfLocked.remove(app.pid);
      mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
    }
    checkTime(startTime,""String_Node_Str"");
    app.setPid(0);
  }
  if (DEBUG_PROCESSES && mProcessesOnHold.contains(app))   Slog.v(TAG,""String_Node_Str"" + app);
  mProcessesOnHold.remove(app);
  checkTime(startTime,""String_Node_Str"");
  updateCpuStats();
  checkTime(startTime,""String_Node_Str"");
  try {
    int uid=app.uid;
    int[] gids=null;
    int mountExternal=Zygote.MOUNT_EXTERNAL_NONE;
    if (!app.isolated) {
      int[] permGids=null;
      try {
        checkTime(startTime,""String_Node_Str"");
        final PackageManager pm=mContext.getPackageManager();
        permGids=pm.getPackageGids(app.info.packageName);
        if (Environment.isExternalStorageEmulated()) {
          checkTime(startTime,""String_Node_Str"");
          if (pm.checkPermission(android.Manifest.permission.ACCESS_ALL_EXTERNAL_STORAGE,app.info.packageName) == PERMISSION_GRANTED) {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;
          }
 else {
            mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;
          }
        }
      }
 catch (      PackageManager.NameNotFoundException e) {
        Slog.w(TAG,""String_Node_Str"",e);
      }
      if (permGids == null) {
        gids=new int[2];
      }
 else {
        gids=new int[permGids.length + 2];
        System.arraycopy(permGids,0,gids,2,permGids.length);
      }
      gids[0]=UserHandle.getSharedAppGid(UserHandle.getAppId(uid));
      gids[1]=UserHandle.getUserGid(UserHandle.getUserId(uid));
    }
    checkTime(startTime,""String_Node_Str"");
    if (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) {
      if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL && mTopComponent != null && app.processName.equals(mTopComponent.getPackageName())) {
        uid=0;
      }
      if (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL && (app.info.flags & ApplicationInfo.FLAG_FACTORY_TEST) != 0) {
        uid=0;
      }
    }
    int debugFlags=0;
    if ((app.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if ((app.info.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0 || mSafeMode == true) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
    if (""String_Node_Str"".equals(SystemProperties.get(""String_Node_Str""))) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
    String requiredAbi=(abiOverride != null) ? abiOverride : app.info.primaryCpuAbi;
    if (requiredAbi == null) {
      requiredAbi=Build.SUPPORTED_ABIS[0];
    }
    String instructionSet=null;
    if (app.info.primaryCpuAbi != null) {
      instructionSet=VMRuntime.getInstructionSet(app.info.primaryCpuAbi);
    }
    app.gids=gids;
    app.requiredAbi=requiredAbi;
    app.instructionSet=instructionSet;
    boolean isActivityProcess=(entryPoint == null);
    if (entryPoint == null)     entryPoint=""String_Node_Str"";
    checkTime(startTime,""String_Node_Str"");
    Process.ProcessStartResult startResult=Process.start(entryPoint,app.processName,uid,uid,gids,debugFlags,mountExternal,app.info.targetSdkVersion,app.info.seinfo,requiredAbi,instructionSet,app.info.dataDir,entryPointArgs);
    checkTime(startTime,""String_Node_Str"");
    if (app.isolated) {
      mBatteryStatsService.addIsolatedUid(app.uid,app.info.uid);
    }
    mBatteryStatsService.noteProcessStart(app.processName,app.info.uid);
    checkTime(startTime,""String_Node_Str"");
    EventLog.writeEvent(EventLogTags.AM_PROC_START,UserHandle.getUserId(uid),startResult.pid,uid,app.processName,hostingType,hostingNameStr != null ? hostingNameStr : ""String_Node_Str"");
    if (app.persistent) {
      Watchdog.getInstance().processStarted(app.processName,startResult.pid);
    }
    checkTime(startTime,""String_Node_Str"");
    StringBuilder buf=mStringBuilder;
    buf.setLength(0);
    buf.append(""String_Node_Str"");
    buf.append(startResult.pid);
    buf.append(':');
    buf.append(app.processName);
    buf.append('/');
    UserHandle.formatUid(buf,uid);
    if (!isActivityProcess) {
      buf.append(""String_Node_Str"");
      buf.append(entryPoint);
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
    buf.append(hostingType);
    if (hostingNameStr != null) {
      buf.append(""String_Node_Str"");
      buf.append(hostingNameStr);
    }
    Slog.i(TAG,buf.toString());
    app.setPid(startResult.pid);
    app.usingWrapper=startResult.usingWrapper;
    app.removed=false;
    app.killed=false;
    app.killedByAm=false;
    checkTime(startTime,""String_Node_Str"");
synchronized (mPidsSelfLocked) {
      this.mPidsSelfLocked.put(startResult.pid,app);
      if (isActivityProcess) {
        Message msg=mHandler.obtainMessage(PROC_START_TIMEOUT_MSG);
        msg.obj=app;
        mHandler.sendMessageDelayed(msg,startResult.usingWrapper ? PROC_START_TIMEOUT_WITH_WRAPPER : PROC_START_TIMEOUT);
      }
    }
    checkTime(startTime,""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    app.setPid(0);
    mBatteryStatsService.noteProcessFinish(app.processName,app.info.uid);
    if (app.isolated) {
      mBatteryStatsService.removeIsolatedUid(app.uid,app.info.uid);
    }
    Slog.e(TAG,""String_Node_Str"" + app.processName,e);
  }
}",0.9415858811831966
195609,"@Override public void addPackageDependency(String packageName){
synchronized (this) {
    int callingPid=Binder.getCallingPid();
    if (callingPid == Process.myPid()) {
      Slog.w(TAG,""String_Node_Str"");
      return;
    }
    ProcessRecord proc;
synchronized (mPidsSelfLocked) {
      proc=mPidsSelfLocked.get(Binder.getCallingPid());
    }
    if (proc != null) {
      if (proc.pkgDeps == null) {
        proc.pkgDeps=new ArraySet<String>(1);
      }
      proc.pkgDeps.add(packageName);
    }
  }
}","@Override public void addPackageDependency(String packageName){
synchronized (this) {
    int callingPid=Binder.getCallingPid();
    if (callingPid == Process.myPid()) {
      return;
    }
    ProcessRecord proc;
synchronized (mPidsSelfLocked) {
      proc=mPidsSelfLocked.get(Binder.getCallingPid());
    }
    if (proc != null) {
      if (proc.pkgDeps == null) {
        proc.pkgDeps=new ArraySet<String>(1);
      }
      proc.pkgDeps.add(packageName);
    }
  }
}",0.962051282051282
195610,"private void populateSettings(Bundle snapshot,Map<String,Class<?>> map){
  Context context=mActivityManagerService.mContext;
  for (  Map.Entry<String,Class<?>> entry : map.entrySet()) {
    String setting=entry.getKey();
    Class<?> type=entry.getValue();
    try {
      if (type == String.class) {
        final String value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getString(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getString(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getString(context.getContentResolver(),setting);
        }
        snapshot.putString(setting,value);
      }
 else       if (type == int.class) {
        final int value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getInt(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getInt(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getInt(context.getContentResolver(),setting);
        }
        snapshot.putInt(setting,value);
      }
 else       if (type == float.class) {
        final float value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getFloat(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getFloat(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getFloat(context.getContentResolver(),setting);
        }
        snapshot.putFloat(setting,value);
      }
 else       if (type == long.class) {
        final long value;
        if (map == sSecureSettingToTypeMap) {
          value=Settings.Secure.getLong(context.getContentResolver(),setting);
        }
 else         if (map == sSystemSettingToTypeMap) {
          value=Settings.System.getLong(context.getContentResolver(),setting);
        }
 else {
          value=Settings.Global.getLong(context.getContentResolver(),setting);
        }
        snapshot.putLong(setting,value);
      }
    }
 catch (    SettingNotFoundException snfe) {
      Log.w(LOG_TAG,""String_Node_Str"" + setting + ""String_Node_Str"",snfe);
    }
  }
}","private void populateSettings(Bundle snapshot,Map<String,Class<?>> map){
  Context context=mActivityManagerService.mContext;
  for (  Map.Entry<String,Class<?>> entry : map.entrySet()) {
    String setting=entry.getKey();
    Class<?> type=entry.getValue();
    if (type == String.class) {
      final String value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getString(context.getContentResolver(),setting);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getString(context.getContentResolver(),setting);
      }
 else {
        value=Settings.Global.getString(context.getContentResolver(),setting);
      }
      snapshot.putString(setting,value);
    }
 else     if (type == int.class) {
      final int value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getInt(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getInt(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getInt(context.getContentResolver(),setting,0);
      }
      snapshot.putInt(setting,value);
    }
 else     if (type == float.class) {
      final float value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getFloat(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getFloat(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getFloat(context.getContentResolver(),setting,0);
      }
      snapshot.putFloat(setting,value);
    }
 else     if (type == long.class) {
      final long value;
      if (map == sSecureSettingToTypeMap) {
        value=Settings.Secure.getLong(context.getContentResolver(),setting,0);
      }
 else       if (map == sSystemSettingToTypeMap) {
        value=Settings.System.getLong(context.getContentResolver(),setting,0);
      }
 else {
        value=Settings.Global.getLong(context.getContentResolver(),setting,0);
      }
      snapshot.putLong(setting,value);
    }
  }
}",0.5291759465478841
195611,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.println();
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  pw.print(lastPss);
  pw.print(""String_Node_Str"");
  pw.println(lastCachedPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}","void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  pw.print(lastPss);
  pw.print(""String_Node_Str"");
  pw.println(lastCachedPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}",0.9812317980800344
195612,"@Override protected void onServiceAdded(ManagedServiceInfo info){
  Slog.d(TAG,""String_Node_Str"" + info);
  final IConditionProvider provider=provider(info);
  try {
    provider.onConnected();
  }
 catch (  RemoteException e) {
  }
synchronized (mMutex) {
    if (info.component.equals(mExitConditionComponent)) {
      final ConditionRecord manualRecord=getRecordLocked(mExitCondition.id,mExitConditionComponent);
      manualRecord.isManual=true;
    }
    final int N=mRecords.size();
    for (int i=0; i < N; i++) {
      final ConditionRecord r=mRecords.get(i);
      if (!r.component.equals(info.component))       continue;
      r.info=info;
      if (r.isAutomatic || r.isManual) {
        subscribeLocked(r);
      }
    }
  }
}","@Override protected void onServiceAdded(ManagedServiceInfo info){
  final IConditionProvider provider=provider(info);
  try {
    provider.onConnected();
  }
 catch (  RemoteException e) {
  }
synchronized (mMutex) {
    if (info.component.equals(mExitConditionComponent)) {
      final ConditionRecord manualRecord=getRecordLocked(mExitCondition.id,mExitConditionComponent);
      manualRecord.isManual=true;
    }
    final int N=mRecords.size();
    for (int i=0; i < N; i++) {
      final ConditionRecord r=mRecords.get(i);
      if (!r.component.equals(info.component))       continue;
      r.info=info;
      if (r.isAutomatic || r.isManual) {
        subscribeLocked(r);
      }
    }
  }
}",0.9721448467966574
195613,"private void dumpHistoryLocked(PrintWriter pw,int flags,long histStart,boolean checkin){
  final HistoryPrinter hprinter=new HistoryPrinter();
  final HistoryItem rec=new HistoryItem();
  long lastTime=-1;
  long baseTime=-1;
  boolean printed=false;
  HistoryEventTracker tracker=null;
  while (getNextHistoryLocked(rec)) {
    lastTime=rec.time;
    if (baseTime < 0) {
      baseTime=lastTime;
    }
    if (rec.time >= histStart) {
      if (histStart >= 0 && !printed) {
        if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET || rec.cmd == HistoryItem.CMD_START) {
          printed=true;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=HistoryItem.CMD_UPDATE;
        }
 else         if (rec.currentTime != 0) {
          printed=true;
          byte cmd=rec.cmd;
          rec.cmd=HistoryItem.CMD_CURRENT_TIME;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=cmd;
        }
        if (tracker != null) {
          if (rec.cmd != HistoryItem.CMD_UPDATE) {
            hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
            rec.cmd=HistoryItem.CMD_UPDATE;
          }
          int oldEventCode=rec.eventCode;
          HistoryTag oldEventTag=rec.eventTag;
          rec.eventTag=new HistoryTag();
          for (int i=0; i < HistoryItem.EVENT_COUNT; i++) {
            HashMap<String,SparseIntArray> active=tracker.getStateForEvent(i);
            if (active == null) {
              continue;
            }
            for (            HashMap.Entry<String,SparseIntArray> ent : active.entrySet()) {
              SparseIntArray uids=ent.getValue();
              for (int j=0; j < uids.size(); j++) {
                rec.eventCode=i;
                rec.eventTag.string=ent.getKey();
                rec.eventTag.uid=uids.keyAt(j);
                rec.eventTag.poolIdx=uids.valueAt(j);
                hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
                rec.wakeReasonTag=null;
                rec.wakelockTag=null;
              }
            }
          }
          rec.eventCode=oldEventCode;
          rec.eventTag=oldEventTag;
          tracker=null;
        }
      }
      hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
    }
 else     if (false && rec.eventCode != HistoryItem.EVENT_NONE) {
      if (tracker == null) {
        tracker=new HistoryEventTracker();
      }
      tracker.updateState(rec.eventCode,rec.eventTag.string,rec.eventTag.uid,rec.eventTag.poolIdx);
    }
  }
  if (histStart >= 0) {
    commitCurrentHistoryBatchLocked();
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
    pw.println(lastTime + 1);
  }
}","private void dumpHistoryLocked(PrintWriter pw,int flags,long histStart,boolean checkin){
  final HistoryPrinter hprinter=new HistoryPrinter();
  final HistoryItem rec=new HistoryItem();
  long lastTime=-1;
  long baseTime=-1;
  boolean printed=false;
  HistoryEventTracker tracker=null;
  while (getNextHistoryLocked(rec)) {
    lastTime=rec.time;
    if (baseTime < 0) {
      baseTime=lastTime;
    }
    if (rec.time >= histStart) {
      if (histStart >= 0 && !printed) {
        if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET || rec.cmd == HistoryItem.CMD_START || rec.cmd == HistoryItem.CMD_SHUTDOWN) {
          printed=true;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=HistoryItem.CMD_UPDATE;
        }
 else         if (rec.currentTime != 0) {
          printed=true;
          byte cmd=rec.cmd;
          rec.cmd=HistoryItem.CMD_CURRENT_TIME;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=cmd;
        }
        if (tracker != null) {
          if (rec.cmd != HistoryItem.CMD_UPDATE) {
            hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
            rec.cmd=HistoryItem.CMD_UPDATE;
          }
          int oldEventCode=rec.eventCode;
          HistoryTag oldEventTag=rec.eventTag;
          rec.eventTag=new HistoryTag();
          for (int i=0; i < HistoryItem.EVENT_COUNT; i++) {
            HashMap<String,SparseIntArray> active=tracker.getStateForEvent(i);
            if (active == null) {
              continue;
            }
            for (            HashMap.Entry<String,SparseIntArray> ent : active.entrySet()) {
              SparseIntArray uids=ent.getValue();
              for (int j=0; j < uids.size(); j++) {
                rec.eventCode=i;
                rec.eventTag.string=ent.getKey();
                rec.eventTag.uid=uids.keyAt(j);
                rec.eventTag.poolIdx=uids.valueAt(j);
                hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
                rec.wakeReasonTag=null;
                rec.wakelockTag=null;
              }
            }
          }
          rec.eventCode=oldEventCode;
          rec.eventTag=oldEventTag;
          tracker=null;
        }
      }
      hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
    }
 else     if (false && rec.eventCode != HistoryItem.EVENT_NONE) {
      if (tracker == null) {
        tracker=new HistoryEventTracker();
      }
      tracker.updateState(rec.eventCode,rec.eventTag.string,rec.eventTag.uid,rec.eventTag.poolIdx);
    }
  }
  if (histStart >= 0) {
    commitCurrentHistoryBatchLocked();
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
    pw.println(lastTime + 1);
  }
}",0.9931107578166402
195614,"public void printNextItem(PrintWriter pw,HistoryItem rec,long baseTime,boolean checkin,boolean verbose){
  if (!checkin) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(rec.time - baseTime,pw,TimeUtils.HUNDRED_DAY_FIELD_LEN);
    pw.print(""String_Node_Str"");
    pw.print(rec.numReadInts);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(BATTERY_STATS_CHECKIN_VERSION);
    pw.print(',');
    pw.print(HISTORY_DATA);
    pw.print(',');
    if (lastTime < 0) {
      pw.print(rec.time - baseTime);
    }
 else {
      pw.print(rec.time - lastTime);
    }
    lastTime=rec.time;
  }
  if (rec.cmd == HistoryItem.CMD_START) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    reset();
  }
 else   if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    if (rec.cmd == HistoryItem.CMD_RESET) {
      pw.print(""String_Node_Str"");
      reset();
    }
    pw.print(""String_Node_Str"");
    if (checkin) {
      pw.println(rec.currentTime);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.println(DateFormat.format(""String_Node_Str"",rec.currentTime).toString());
    }
  }
 else   if (rec.cmd == HistoryItem.CMD_OVERFLOW) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else {
    if (!checkin) {
      if (rec.batteryLevel < 10)       pw.print(""String_Node_Str"");
 else       if (rec.batteryLevel < 100)       pw.print(""String_Node_Str"");
      pw.print(rec.batteryLevel);
      if (verbose) {
        pw.print(""String_Node_Str"");
        if (rec.states < 0)         ;
 else         if (rec.states < 0x10)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000000)         pw.print(""String_Node_Str"");
        pw.print(Integer.toHexString(rec.states));
      }
    }
 else {
      if (oldLevel != rec.batteryLevel) {
        oldLevel=rec.batteryLevel;
        pw.print(""String_Node_Str"");
        pw.print(rec.batteryLevel);
      }
    }
    if (oldStatus != rec.batteryStatus) {
      oldStatus=rec.batteryStatus;
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
        pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      break;
case BatteryManager.BATTERY_STATUS_CHARGING:
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
  break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_COLD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldPlug) {
case 0:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_WIRELESS:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,rec.wakelockTag,HISTORY_STATE_DESCRIPTIONS,!checkin);
printBitDescriptions(pw,oldState2,rec.states2,null,HISTORY_STATE2_DESCRIPTIONS,!checkin);
if (rec.wakeReasonTag != null) {
if (checkin) {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.poolIdx);
}
 else {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.string);
pw.print(""String_Node_Str"");
}
}
if (rec.eventCode != HistoryItem.EVENT_NONE) {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
if ((rec.eventCode & HistoryItem.EVENT_FLAG_START) != 0) {
pw.print(""String_Node_Str"");
}
 else if ((rec.eventCode & HistoryItem.EVENT_FLAG_FINISH) != 0) {
pw.print(""String_Node_Str"");
}
String[] eventNames=checkin ? HISTORY_EVENT_CHECKIN_NAMES : HISTORY_EVENT_NAMES;
int idx=rec.eventCode & ~(HistoryItem.EVENT_FLAG_START | HistoryItem.EVENT_FLAG_FINISH);
if (idx >= 0 && idx < eventNames.length) {
pw.print(eventNames[idx]);
}
 else {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(idx);
}
pw.print(""String_Node_Str"");
if (checkin) {
pw.print(rec.eventTag.poolIdx);
}
 else {
UserHandle.formatUid(pw,rec.eventTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.eventTag.string);
pw.print(""String_Node_Str"");
}
}
pw.println();
oldState=rec.states;
oldState2=rec.states2;
}
}","public void printNextItem(PrintWriter pw,HistoryItem rec,long baseTime,boolean checkin,boolean verbose){
  if (!checkin) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(rec.time - baseTime,pw,TimeUtils.HUNDRED_DAY_FIELD_LEN);
    pw.print(""String_Node_Str"");
    pw.print(rec.numReadInts);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(BATTERY_STATS_CHECKIN_VERSION);
    pw.print(',');
    pw.print(HISTORY_DATA);
    pw.print(',');
    if (lastTime < 0) {
      pw.print(rec.time - baseTime);
    }
 else {
      pw.print(rec.time - lastTime);
    }
    lastTime=rec.time;
  }
  if (rec.cmd == HistoryItem.CMD_START) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    reset();
  }
 else   if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    if (rec.cmd == HistoryItem.CMD_RESET) {
      pw.print(""String_Node_Str"");
      reset();
    }
    pw.print(""String_Node_Str"");
    if (checkin) {
      pw.println(rec.currentTime);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.println(DateFormat.format(""String_Node_Str"",rec.currentTime).toString());
    }
  }
 else   if (rec.cmd == HistoryItem.CMD_SHUTDOWN) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else   if (rec.cmd == HistoryItem.CMD_OVERFLOW) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else {
    if (!checkin) {
      if (rec.batteryLevel < 10)       pw.print(""String_Node_Str"");
 else       if (rec.batteryLevel < 100)       pw.print(""String_Node_Str"");
      pw.print(rec.batteryLevel);
      if (verbose) {
        pw.print(""String_Node_Str"");
        if (rec.states < 0)         ;
 else         if (rec.states < 0x10)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000000)         pw.print(""String_Node_Str"");
        pw.print(Integer.toHexString(rec.states));
      }
    }
 else {
      if (oldLevel != rec.batteryLevel) {
        oldLevel=rec.batteryLevel;
        pw.print(""String_Node_Str"");
        pw.print(rec.batteryLevel);
      }
    }
    if (oldStatus != rec.batteryStatus) {
      oldStatus=rec.batteryStatus;
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
        pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      break;
case BatteryManager.BATTERY_STATUS_CHARGING:
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
  break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_COLD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldPlug) {
case 0:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_WIRELESS:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,rec.wakelockTag,HISTORY_STATE_DESCRIPTIONS,!checkin);
printBitDescriptions(pw,oldState2,rec.states2,null,HISTORY_STATE2_DESCRIPTIONS,!checkin);
if (rec.wakeReasonTag != null) {
if (checkin) {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.poolIdx);
}
 else {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.string);
pw.print(""String_Node_Str"");
}
}
if (rec.eventCode != HistoryItem.EVENT_NONE) {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
if ((rec.eventCode & HistoryItem.EVENT_FLAG_START) != 0) {
pw.print(""String_Node_Str"");
}
 else if ((rec.eventCode & HistoryItem.EVENT_FLAG_FINISH) != 0) {
pw.print(""String_Node_Str"");
}
String[] eventNames=checkin ? HISTORY_EVENT_CHECKIN_NAMES : HISTORY_EVENT_NAMES;
int idx=rec.eventCode & ~(HistoryItem.EVENT_FLAG_START | HistoryItem.EVENT_FLAG_FINISH);
if (idx >= 0 && idx < eventNames.length) {
pw.print(eventNames[idx]);
}
 else {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(idx);
}
pw.print(""String_Node_Str"");
if (checkin) {
pw.print(rec.eventTag.poolIdx);
}
 else {
UserHandle.formatUid(pw,rec.eventTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.eventTag.string);
pw.print(""String_Node_Str"");
}
}
pw.println();
oldState=rec.states;
oldState2=rec.states2;
}
}",0.988547869903802
195615,"@Override public void onReceive(Context context,Intent intent){
  mChangeUserId=intent.getIntExtra(Intent.EXTRA_USER_HANDLE,UserHandle.USER_NULL);
  if (mChangeUserId == UserHandle.USER_NULL) {
    throw new IllegalArgumentException(""String_Node_Str"" + intent);
  }
  onBeginPackageChanges();
  mDisappearingPackages=mAppearingPackages=null;
  mSomePackagesChanged=false;
  String action=intent.getAction();
  if (Intent.ACTION_PACKAGE_ADDED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    mSomePackagesChanged=true;
    if (pkg != null) {
      mAppearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mModifiedPackages=mTempArray;
        mChangeType=PACKAGE_UPDATING;
        onPackageUpdateFinished(pkg,uid);
        onPackageModified(pkg);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        onPackageAdded(pkg,uid);
      }
      onPackageAppeared(pkg,mChangeType);
      if (mChangeType == PACKAGE_UPDATING) {
synchronized (mUpdatingPackages) {
          mUpdatingPackages.remove(pkg);
        }
      }
    }
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    if (pkg != null) {
      mDisappearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mChangeType=PACKAGE_UPDATING;
synchronized (mUpdatingPackages) {
        }
        onPackageUpdateStarted(pkg,uid);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        mSomePackagesChanged=true;
        onPackageRemoved(pkg,uid);
        if (intent.getBooleanExtra(Intent.EXTRA_REMOVED_FOR_ALL_USERS,false)) {
          onPackageRemovedAllUsers(pkg,uid);
        }
      }
      onPackageDisappeared(pkg,mChangeType);
    }
  }
 else   if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST);
    if (pkg != null) {
      mModifiedPackages=mTempArray;
      mTempArray[0]=pkg;
      mChangeType=PACKAGE_PERMANENT_CHANGE;
      if (onPackageChanged(pkg,uid,components)) {
        mSomePackagesChanged=true;
      }
      onPackageModified(pkg);
    }
  }
 else   if (Intent.ACTION_QUERY_PACKAGE_RESTART.equals(action)) {
    mDisappearingPackages=intent.getStringArrayExtra(Intent.EXTRA_PACKAGES);
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    boolean canRestart=onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),false);
    if (canRestart)     setResultCode(Activity.RESULT_OK);
  }
 else   if (Intent.ACTION_PACKAGE_RESTARTED.equals(action)) {
    mDisappearingPackages=new String[]{getPackageName(intent)};
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),true);
  }
 else   if (Intent.ACTION_UID_REMOVED.equals(action)) {
    onUidRemoved(intent.getIntExtra(Intent.EXTRA_UID,0));
  }
 else   if (Intent.ACTION_USER_STOPPED.equals(action)) {
    if (intent.hasExtra(Intent.EXTRA_USER_HANDLE)) {
      onHandleUserStop(intent,intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mAppearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesAvailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageAppeared(pkgList[i],mChangeType);
      }
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mDisappearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesUnavailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageDisappeared(pkgList[i],mChangeType);
      }
    }
  }
  if (mSomePackagesChanged) {
    onSomePackagesChanged();
  }
  onFinishPackageChanges();
  mChangeUserId=UserHandle.USER_NULL;
}","@Override public void onReceive(Context context,Intent intent){
  mChangeUserId=intent.getIntExtra(Intent.EXTRA_USER_HANDLE,UserHandle.USER_NULL);
  if (mChangeUserId == UserHandle.USER_NULL) {
    Slog.w(""String_Node_Str"",""String_Node_Str"" + intent);
    return;
  }
  onBeginPackageChanges();
  mDisappearingPackages=mAppearingPackages=null;
  mSomePackagesChanged=false;
  String action=intent.getAction();
  if (Intent.ACTION_PACKAGE_ADDED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    mSomePackagesChanged=true;
    if (pkg != null) {
      mAppearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mModifiedPackages=mTempArray;
        mChangeType=PACKAGE_UPDATING;
        onPackageUpdateFinished(pkg,uid);
        onPackageModified(pkg);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        onPackageAdded(pkg,uid);
      }
      onPackageAppeared(pkg,mChangeType);
      if (mChangeType == PACKAGE_UPDATING) {
synchronized (mUpdatingPackages) {
          mUpdatingPackages.remove(pkg);
        }
      }
    }
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    if (pkg != null) {
      mDisappearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mChangeType=PACKAGE_UPDATING;
synchronized (mUpdatingPackages) {
        }
        onPackageUpdateStarted(pkg,uid);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        mSomePackagesChanged=true;
        onPackageRemoved(pkg,uid);
        if (intent.getBooleanExtra(Intent.EXTRA_REMOVED_FOR_ALL_USERS,false)) {
          onPackageRemovedAllUsers(pkg,uid);
        }
      }
      onPackageDisappeared(pkg,mChangeType);
    }
  }
 else   if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST);
    if (pkg != null) {
      mModifiedPackages=mTempArray;
      mTempArray[0]=pkg;
      mChangeType=PACKAGE_PERMANENT_CHANGE;
      if (onPackageChanged(pkg,uid,components)) {
        mSomePackagesChanged=true;
      }
      onPackageModified(pkg);
    }
  }
 else   if (Intent.ACTION_QUERY_PACKAGE_RESTART.equals(action)) {
    mDisappearingPackages=intent.getStringArrayExtra(Intent.EXTRA_PACKAGES);
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    boolean canRestart=onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),false);
    if (canRestart)     setResultCode(Activity.RESULT_OK);
  }
 else   if (Intent.ACTION_PACKAGE_RESTARTED.equals(action)) {
    mDisappearingPackages=new String[]{getPackageName(intent)};
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),true);
  }
 else   if (Intent.ACTION_UID_REMOVED.equals(action)) {
    onUidRemoved(intent.getIntExtra(Intent.EXTRA_UID,0));
  }
 else   if (Intent.ACTION_USER_STOPPED.equals(action)) {
    if (intent.hasExtra(Intent.EXTRA_USER_HANDLE)) {
      onHandleUserStop(intent,intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mAppearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesAvailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageAppeared(pkgList[i],mChangeType);
      }
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mDisappearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesUnavailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageDisappeared(pkgList[i],mChangeType);
      }
    }
  }
  if (mSomePackagesChanged) {
    onSomePackagesChanged();
  }
  onFinishPackageChanges();
  mChangeUserId=UserHandle.USER_NULL;
}",0.986652078774617
195616,"public void shutdownLocked(){
  writeSyncLocked();
  mShuttingDown=true;
}","public void shutdownLocked(){
  recordShutdownLocked(SystemClock.elapsedRealtime(),SystemClock.uptimeMillis());
  writeSyncLocked();
  mShuttingDown=true;
}",0.6434782608695652
195617,"@Override public UserInfo getProfileParent(int userHandle){
  checkManageUsersPermission(""String_Node_Str"");
synchronized (mPackagesLock) {
    UserInfo profile=getUserInfoLocked(userHandle);
    int parentUserId=profile.profileGroupId;
    if (parentUserId == UserInfo.NO_PROFILE_GROUP_ID) {
      return null;
    }
 else {
      return getUserInfoLocked(parentUserId);
    }
  }
}","@Override public UserInfo getProfileParent(int userHandle){
  checkManageUsersPermission(""String_Node_Str"");
synchronized (mPackagesLock) {
    UserInfo profile=getUserInfoLocked(userHandle);
    if (profile == null) {
      return null;
    }
    int parentUserId=profile.profileGroupId;
    if (parentUserId == UserInfo.NO_PROFILE_GROUP_ID) {
      return null;
    }
 else {
      return getUserInfoLocked(parentUserId);
    }
  }
}",0.9364303178484108
195618,"private void dumpHistoryLocked(PrintWriter pw,int flags,long histStart,boolean checkin){
  final HistoryPrinter hprinter=new HistoryPrinter();
  final HistoryItem rec=new HistoryItem();
  long lastTime=-1;
  long baseTime=-1;
  boolean printed=false;
  HistoryEventTracker tracker=null;
  while (getNextHistoryLocked(rec)) {
    lastTime=rec.time;
    if (baseTime < 0) {
      baseTime=lastTime;
    }
    if (rec.time >= histStart) {
      if (histStart >= 0 && !printed) {
        if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET || rec.cmd == HistoryItem.CMD_START) {
          printed=true;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=HistoryItem.CMD_UPDATE;
        }
 else         if (rec.currentTime != 0) {
          printed=true;
          byte cmd=rec.cmd;
          rec.cmd=HistoryItem.CMD_CURRENT_TIME;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=cmd;
        }
        if (tracker != null) {
          if (rec.cmd != HistoryItem.CMD_UPDATE) {
            hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
            rec.cmd=HistoryItem.CMD_UPDATE;
          }
          int oldEventCode=rec.eventCode;
          HistoryTag oldEventTag=rec.eventTag;
          rec.eventTag=new HistoryTag();
          for (int i=0; i < HistoryItem.EVENT_COUNT; i++) {
            HashMap<String,SparseIntArray> active=tracker.getStateForEvent(i);
            if (active == null) {
              continue;
            }
            for (            HashMap.Entry<String,SparseIntArray> ent : active.entrySet()) {
              SparseIntArray uids=ent.getValue();
              for (int j=0; j < uids.size(); j++) {
                rec.eventCode=i;
                rec.eventTag.string=ent.getKey();
                rec.eventTag.uid=uids.keyAt(j);
                rec.eventTag.poolIdx=uids.valueAt(j);
                hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
                rec.wakeReasonTag=null;
                rec.wakelockTag=null;
              }
            }
          }
          rec.eventCode=oldEventCode;
          rec.eventTag=oldEventTag;
          tracker=null;
        }
      }
      hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
    }
 else     if (false && rec.eventCode != HistoryItem.EVENT_NONE) {
      if (tracker == null) {
        tracker=new HistoryEventTracker();
      }
      tracker.updateState(rec.eventCode,rec.eventTag.string,rec.eventTag.uid,rec.eventTag.poolIdx);
    }
  }
  if (histStart >= 0) {
    commitCurrentHistoryBatchLocked();
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
    pw.println(lastTime + 1);
  }
}","private void dumpHistoryLocked(PrintWriter pw,int flags,long histStart,boolean checkin){
  final HistoryPrinter hprinter=new HistoryPrinter();
  final HistoryItem rec=new HistoryItem();
  long lastTime=-1;
  long baseTime=-1;
  boolean printed=false;
  HistoryEventTracker tracker=null;
  while (getNextHistoryLocked(rec)) {
    lastTime=rec.time;
    if (baseTime < 0) {
      baseTime=lastTime;
    }
    if (rec.time >= histStart) {
      if (histStart >= 0 && !printed) {
        if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET || rec.cmd == HistoryItem.CMD_START || rec.cmd == HistoryItem.CMD_SHUTDOWN) {
          printed=true;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=HistoryItem.CMD_UPDATE;
        }
 else         if (rec.currentTime != 0) {
          printed=true;
          byte cmd=rec.cmd;
          rec.cmd=HistoryItem.CMD_CURRENT_TIME;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=cmd;
        }
        if (tracker != null) {
          if (rec.cmd != HistoryItem.CMD_UPDATE) {
            hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
            rec.cmd=HistoryItem.CMD_UPDATE;
          }
          int oldEventCode=rec.eventCode;
          HistoryTag oldEventTag=rec.eventTag;
          rec.eventTag=new HistoryTag();
          for (int i=0; i < HistoryItem.EVENT_COUNT; i++) {
            HashMap<String,SparseIntArray> active=tracker.getStateForEvent(i);
            if (active == null) {
              continue;
            }
            for (            HashMap.Entry<String,SparseIntArray> ent : active.entrySet()) {
              SparseIntArray uids=ent.getValue();
              for (int j=0; j < uids.size(); j++) {
                rec.eventCode=i;
                rec.eventTag.string=ent.getKey();
                rec.eventTag.uid=uids.keyAt(j);
                rec.eventTag.poolIdx=uids.valueAt(j);
                hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
                rec.wakeReasonTag=null;
                rec.wakelockTag=null;
              }
            }
          }
          rec.eventCode=oldEventCode;
          rec.eventTag=oldEventTag;
          tracker=null;
        }
      }
      hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
    }
 else     if (false && rec.eventCode != HistoryItem.EVENT_NONE) {
      if (tracker == null) {
        tracker=new HistoryEventTracker();
      }
      tracker.updateState(rec.eventCode,rec.eventTag.string,rec.eventTag.uid,rec.eventTag.poolIdx);
    }
  }
  if (histStart >= 0) {
    commitCurrentHistoryBatchLocked();
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
    pw.println(lastTime + 1);
  }
}",0.9931107578166402
195619,"public void printNextItem(PrintWriter pw,HistoryItem rec,long baseTime,boolean checkin,boolean verbose){
  if (!checkin) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(rec.time - baseTime,pw,TimeUtils.HUNDRED_DAY_FIELD_LEN);
    pw.print(""String_Node_Str"");
    pw.print(rec.numReadInts);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(BATTERY_STATS_CHECKIN_VERSION);
    pw.print(',');
    pw.print(HISTORY_DATA);
    pw.print(',');
    if (lastTime < 0) {
      pw.print(rec.time - baseTime);
    }
 else {
      pw.print(rec.time - lastTime);
    }
    lastTime=rec.time;
  }
  if (rec.cmd == HistoryItem.CMD_START) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    reset();
  }
 else   if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    if (rec.cmd == HistoryItem.CMD_RESET) {
      pw.print(""String_Node_Str"");
      reset();
    }
    pw.print(""String_Node_Str"");
    if (checkin) {
      pw.println(rec.currentTime);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.println(DateFormat.format(""String_Node_Str"",rec.currentTime).toString());
    }
  }
 else   if (rec.cmd == HistoryItem.CMD_OVERFLOW) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else {
    if (!checkin) {
      if (rec.batteryLevel < 10)       pw.print(""String_Node_Str"");
 else       if (rec.batteryLevel < 100)       pw.print(""String_Node_Str"");
      pw.print(rec.batteryLevel);
      if (verbose) {
        pw.print(""String_Node_Str"");
        if (rec.states < 0)         ;
 else         if (rec.states < 0x10)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000000)         pw.print(""String_Node_Str"");
        pw.print(Integer.toHexString(rec.states));
      }
    }
 else {
      if (oldLevel != rec.batteryLevel) {
        oldLevel=rec.batteryLevel;
        pw.print(""String_Node_Str"");
        pw.print(rec.batteryLevel);
      }
    }
    if (oldStatus != rec.batteryStatus) {
      oldStatus=rec.batteryStatus;
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
        pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      break;
case BatteryManager.BATTERY_STATUS_CHARGING:
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
  break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_COLD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldPlug) {
case 0:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_WIRELESS:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,rec.wakelockTag,HISTORY_STATE_DESCRIPTIONS,!checkin);
printBitDescriptions(pw,oldState2,rec.states2,null,HISTORY_STATE2_DESCRIPTIONS,!checkin);
if (rec.wakeReasonTag != null) {
if (checkin) {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.poolIdx);
}
 else {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.string);
pw.print(""String_Node_Str"");
}
}
if (rec.eventCode != HistoryItem.EVENT_NONE) {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
if ((rec.eventCode & HistoryItem.EVENT_FLAG_START) != 0) {
pw.print(""String_Node_Str"");
}
 else if ((rec.eventCode & HistoryItem.EVENT_FLAG_FINISH) != 0) {
pw.print(""String_Node_Str"");
}
String[] eventNames=checkin ? HISTORY_EVENT_CHECKIN_NAMES : HISTORY_EVENT_NAMES;
int idx=rec.eventCode & ~(HistoryItem.EVENT_FLAG_START | HistoryItem.EVENT_FLAG_FINISH);
if (idx >= 0 && idx < eventNames.length) {
pw.print(eventNames[idx]);
}
 else {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(idx);
}
pw.print(""String_Node_Str"");
if (checkin) {
pw.print(rec.eventTag.poolIdx);
}
 else {
UserHandle.formatUid(pw,rec.eventTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.eventTag.string);
pw.print(""String_Node_Str"");
}
}
pw.println();
oldState=rec.states;
oldState2=rec.states2;
}
}","public void printNextItem(PrintWriter pw,HistoryItem rec,long baseTime,boolean checkin,boolean verbose){
  if (!checkin) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(rec.time - baseTime,pw,TimeUtils.HUNDRED_DAY_FIELD_LEN);
    pw.print(""String_Node_Str"");
    pw.print(rec.numReadInts);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(BATTERY_STATS_CHECKIN_VERSION);
    pw.print(',');
    pw.print(HISTORY_DATA);
    pw.print(',');
    if (lastTime < 0) {
      pw.print(rec.time - baseTime);
    }
 else {
      pw.print(rec.time - lastTime);
    }
    lastTime=rec.time;
  }
  if (rec.cmd == HistoryItem.CMD_START) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    reset();
  }
 else   if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    if (rec.cmd == HistoryItem.CMD_RESET) {
      pw.print(""String_Node_Str"");
      reset();
    }
    pw.print(""String_Node_Str"");
    if (checkin) {
      pw.println(rec.currentTime);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.println(DateFormat.format(""String_Node_Str"",rec.currentTime).toString());
    }
  }
 else   if (rec.cmd == HistoryItem.CMD_SHUTDOWN) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else   if (rec.cmd == HistoryItem.CMD_OVERFLOW) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else {
    if (!checkin) {
      if (rec.batteryLevel < 10)       pw.print(""String_Node_Str"");
 else       if (rec.batteryLevel < 100)       pw.print(""String_Node_Str"");
      pw.print(rec.batteryLevel);
      if (verbose) {
        pw.print(""String_Node_Str"");
        if (rec.states < 0)         ;
 else         if (rec.states < 0x10)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000000)         pw.print(""String_Node_Str"");
        pw.print(Integer.toHexString(rec.states));
      }
    }
 else {
      if (oldLevel != rec.batteryLevel) {
        oldLevel=rec.batteryLevel;
        pw.print(""String_Node_Str"");
        pw.print(rec.batteryLevel);
      }
    }
    if (oldStatus != rec.batteryStatus) {
      oldStatus=rec.batteryStatus;
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
        pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      break;
case BatteryManager.BATTERY_STATUS_CHARGING:
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
  break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_COLD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldPlug) {
case 0:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_WIRELESS:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,rec.wakelockTag,HISTORY_STATE_DESCRIPTIONS,!checkin);
printBitDescriptions(pw,oldState2,rec.states2,null,HISTORY_STATE2_DESCRIPTIONS,!checkin);
if (rec.wakeReasonTag != null) {
if (checkin) {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.poolIdx);
}
 else {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.string);
pw.print(""String_Node_Str"");
}
}
if (rec.eventCode != HistoryItem.EVENT_NONE) {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
if ((rec.eventCode & HistoryItem.EVENT_FLAG_START) != 0) {
pw.print(""String_Node_Str"");
}
 else if ((rec.eventCode & HistoryItem.EVENT_FLAG_FINISH) != 0) {
pw.print(""String_Node_Str"");
}
String[] eventNames=checkin ? HISTORY_EVENT_CHECKIN_NAMES : HISTORY_EVENT_NAMES;
int idx=rec.eventCode & ~(HistoryItem.EVENT_FLAG_START | HistoryItem.EVENT_FLAG_FINISH);
if (idx >= 0 && idx < eventNames.length) {
pw.print(eventNames[idx]);
}
 else {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(idx);
}
pw.print(""String_Node_Str"");
if (checkin) {
pw.print(rec.eventTag.poolIdx);
}
 else {
UserHandle.formatUid(pw,rec.eventTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.eventTag.string);
pw.print(""String_Node_Str"");
}
}
pw.println();
oldState=rec.states;
oldState2=rec.states2;
}
}",0.988547869903802
195620,"@Override public void onReceive(Context context,Intent intent){
  mChangeUserId=intent.getIntExtra(Intent.EXTRA_USER_HANDLE,UserHandle.USER_NULL);
  if (mChangeUserId == UserHandle.USER_NULL) {
    throw new IllegalArgumentException(""String_Node_Str"" + intent);
  }
  onBeginPackageChanges();
  mDisappearingPackages=mAppearingPackages=null;
  mSomePackagesChanged=false;
  String action=intent.getAction();
  if (Intent.ACTION_PACKAGE_ADDED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    mSomePackagesChanged=true;
    if (pkg != null) {
      mAppearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mModifiedPackages=mTempArray;
        mChangeType=PACKAGE_UPDATING;
        onPackageUpdateFinished(pkg,uid);
        onPackageModified(pkg);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        onPackageAdded(pkg,uid);
      }
      onPackageAppeared(pkg,mChangeType);
      if (mChangeType == PACKAGE_UPDATING) {
synchronized (mUpdatingPackages) {
          mUpdatingPackages.remove(pkg);
        }
      }
    }
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    if (pkg != null) {
      mDisappearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mChangeType=PACKAGE_UPDATING;
synchronized (mUpdatingPackages) {
        }
        onPackageUpdateStarted(pkg,uid);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        mSomePackagesChanged=true;
        onPackageRemoved(pkg,uid);
        if (intent.getBooleanExtra(Intent.EXTRA_REMOVED_FOR_ALL_USERS,false)) {
          onPackageRemovedAllUsers(pkg,uid);
        }
      }
      onPackageDisappeared(pkg,mChangeType);
    }
  }
 else   if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST);
    if (pkg != null) {
      mModifiedPackages=mTempArray;
      mTempArray[0]=pkg;
      mChangeType=PACKAGE_PERMANENT_CHANGE;
      if (onPackageChanged(pkg,uid,components)) {
        mSomePackagesChanged=true;
      }
      onPackageModified(pkg);
    }
  }
 else   if (Intent.ACTION_QUERY_PACKAGE_RESTART.equals(action)) {
    mDisappearingPackages=intent.getStringArrayExtra(Intent.EXTRA_PACKAGES);
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    boolean canRestart=onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),false);
    if (canRestart)     setResultCode(Activity.RESULT_OK);
  }
 else   if (Intent.ACTION_PACKAGE_RESTARTED.equals(action)) {
    mDisappearingPackages=new String[]{getPackageName(intent)};
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),true);
  }
 else   if (Intent.ACTION_UID_REMOVED.equals(action)) {
    onUidRemoved(intent.getIntExtra(Intent.EXTRA_UID,0));
  }
 else   if (Intent.ACTION_USER_STOPPED.equals(action)) {
    if (intent.hasExtra(Intent.EXTRA_USER_HANDLE)) {
      onHandleUserStop(intent,intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mAppearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesAvailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageAppeared(pkgList[i],mChangeType);
      }
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mDisappearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesUnavailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageDisappeared(pkgList[i],mChangeType);
      }
    }
  }
  if (mSomePackagesChanged) {
    onSomePackagesChanged();
  }
  onFinishPackageChanges();
  mChangeUserId=UserHandle.USER_NULL;
}","@Override public void onReceive(Context context,Intent intent){
  mChangeUserId=intent.getIntExtra(Intent.EXTRA_USER_HANDLE,UserHandle.USER_NULL);
  if (mChangeUserId == UserHandle.USER_NULL) {
    Slog.w(""String_Node_Str"",""String_Node_Str"" + intent);
    return;
  }
  onBeginPackageChanges();
  mDisappearingPackages=mAppearingPackages=null;
  mSomePackagesChanged=false;
  String action=intent.getAction();
  if (Intent.ACTION_PACKAGE_ADDED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    mSomePackagesChanged=true;
    if (pkg != null) {
      mAppearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mModifiedPackages=mTempArray;
        mChangeType=PACKAGE_UPDATING;
        onPackageUpdateFinished(pkg,uid);
        onPackageModified(pkg);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        onPackageAdded(pkg,uid);
      }
      onPackageAppeared(pkg,mChangeType);
      if (mChangeType == PACKAGE_UPDATING) {
synchronized (mUpdatingPackages) {
          mUpdatingPackages.remove(pkg);
        }
      }
    }
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    if (pkg != null) {
      mDisappearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mChangeType=PACKAGE_UPDATING;
synchronized (mUpdatingPackages) {
        }
        onPackageUpdateStarted(pkg,uid);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        mSomePackagesChanged=true;
        onPackageRemoved(pkg,uid);
        if (intent.getBooleanExtra(Intent.EXTRA_REMOVED_FOR_ALL_USERS,false)) {
          onPackageRemovedAllUsers(pkg,uid);
        }
      }
      onPackageDisappeared(pkg,mChangeType);
    }
  }
 else   if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST);
    if (pkg != null) {
      mModifiedPackages=mTempArray;
      mTempArray[0]=pkg;
      mChangeType=PACKAGE_PERMANENT_CHANGE;
      if (onPackageChanged(pkg,uid,components)) {
        mSomePackagesChanged=true;
      }
      onPackageModified(pkg);
    }
  }
 else   if (Intent.ACTION_QUERY_PACKAGE_RESTART.equals(action)) {
    mDisappearingPackages=intent.getStringArrayExtra(Intent.EXTRA_PACKAGES);
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    boolean canRestart=onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),false);
    if (canRestart)     setResultCode(Activity.RESULT_OK);
  }
 else   if (Intent.ACTION_PACKAGE_RESTARTED.equals(action)) {
    mDisappearingPackages=new String[]{getPackageName(intent)};
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),true);
  }
 else   if (Intent.ACTION_UID_REMOVED.equals(action)) {
    onUidRemoved(intent.getIntExtra(Intent.EXTRA_UID,0));
  }
 else   if (Intent.ACTION_USER_STOPPED.equals(action)) {
    if (intent.hasExtra(Intent.EXTRA_USER_HANDLE)) {
      onHandleUserStop(intent,intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mAppearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesAvailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageAppeared(pkgList[i],mChangeType);
      }
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mDisappearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesUnavailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageDisappeared(pkgList[i],mChangeType);
      }
    }
  }
  if (mSomePackagesChanged) {
    onSomePackagesChanged();
  }
  onFinishPackageChanges();
  mChangeUserId=UserHandle.USER_NULL;
}",0.986652078774617
195621,"public void shutdownLocked(){
  writeSyncLocked();
  mShuttingDown=true;
}","public void shutdownLocked(){
  recordShutdownLocked(SystemClock.elapsedRealtime(),SystemClock.uptimeMillis());
  writeSyncLocked();
  mShuttingDown=true;
}",0.6434782608695652
195622,"@Override public UserInfo getProfileParent(int userHandle){
  checkManageUsersPermission(""String_Node_Str"");
synchronized (mPackagesLock) {
    UserInfo profile=getUserInfoLocked(userHandle);
    int parentUserId=profile.profileGroupId;
    if (parentUserId == UserInfo.NO_PROFILE_GROUP_ID) {
      return null;
    }
 else {
      return getUserInfoLocked(parentUserId);
    }
  }
}","@Override public UserInfo getProfileParent(int userHandle){
  checkManageUsersPermission(""String_Node_Str"");
synchronized (mPackagesLock) {
    UserInfo profile=getUserInfoLocked(userHandle);
    if (profile == null) {
      return null;
    }
    int parentUserId=profile.profileGroupId;
    if (parentUserId == UserInfo.NO_PROFILE_GROUP_ID) {
      return null;
    }
 else {
      return getUserInfoLocked(parentUserId);
    }
  }
}",0.9364303178484108
195623,"private void dumpHistoryLocked(PrintWriter pw,int flags,long histStart,boolean checkin){
  final HistoryPrinter hprinter=new HistoryPrinter();
  final HistoryItem rec=new HistoryItem();
  long lastTime=-1;
  long baseTime=-1;
  boolean printed=false;
  HistoryEventTracker tracker=null;
  while (getNextHistoryLocked(rec)) {
    lastTime=rec.time;
    if (baseTime < 0) {
      baseTime=lastTime;
    }
    if (rec.time >= histStart) {
      if (histStart >= 0 && !printed) {
        if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET || rec.cmd == HistoryItem.CMD_START) {
          printed=true;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=HistoryItem.CMD_UPDATE;
        }
 else         if (rec.currentTime != 0) {
          printed=true;
          byte cmd=rec.cmd;
          rec.cmd=HistoryItem.CMD_CURRENT_TIME;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=cmd;
        }
        if (tracker != null) {
          if (rec.cmd != HistoryItem.CMD_UPDATE) {
            hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
            rec.cmd=HistoryItem.CMD_UPDATE;
          }
          int oldEventCode=rec.eventCode;
          HistoryTag oldEventTag=rec.eventTag;
          rec.eventTag=new HistoryTag();
          for (int i=0; i < HistoryItem.EVENT_COUNT; i++) {
            HashMap<String,SparseIntArray> active=tracker.getStateForEvent(i);
            if (active == null) {
              continue;
            }
            for (            HashMap.Entry<String,SparseIntArray> ent : active.entrySet()) {
              SparseIntArray uids=ent.getValue();
              for (int j=0; j < uids.size(); j++) {
                rec.eventCode=i;
                rec.eventTag.string=ent.getKey();
                rec.eventTag.uid=uids.keyAt(j);
                rec.eventTag.poolIdx=uids.valueAt(j);
                hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
                rec.wakeReasonTag=null;
                rec.wakelockTag=null;
              }
            }
          }
          rec.eventCode=oldEventCode;
          rec.eventTag=oldEventTag;
          tracker=null;
        }
      }
      hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
    }
 else     if (false && rec.eventCode != HistoryItem.EVENT_NONE) {
      if (tracker == null) {
        tracker=new HistoryEventTracker();
      }
      tracker.updateState(rec.eventCode,rec.eventTag.string,rec.eventTag.uid,rec.eventTag.poolIdx);
    }
  }
  if (histStart >= 0) {
    commitCurrentHistoryBatchLocked();
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
    pw.println(lastTime + 1);
  }
}","private void dumpHistoryLocked(PrintWriter pw,int flags,long histStart,boolean checkin){
  final HistoryPrinter hprinter=new HistoryPrinter();
  final HistoryItem rec=new HistoryItem();
  long lastTime=-1;
  long baseTime=-1;
  boolean printed=false;
  HistoryEventTracker tracker=null;
  while (getNextHistoryLocked(rec)) {
    lastTime=rec.time;
    if (baseTime < 0) {
      baseTime=lastTime;
    }
    if (rec.time >= histStart) {
      if (histStart >= 0 && !printed) {
        if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET || rec.cmd == HistoryItem.CMD_START || rec.cmd == HistoryItem.CMD_SHUTDOWN) {
          printed=true;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=HistoryItem.CMD_UPDATE;
        }
 else         if (rec.currentTime != 0) {
          printed=true;
          byte cmd=rec.cmd;
          rec.cmd=HistoryItem.CMD_CURRENT_TIME;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=cmd;
        }
        if (tracker != null) {
          if (rec.cmd != HistoryItem.CMD_UPDATE) {
            hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
            rec.cmd=HistoryItem.CMD_UPDATE;
          }
          int oldEventCode=rec.eventCode;
          HistoryTag oldEventTag=rec.eventTag;
          rec.eventTag=new HistoryTag();
          for (int i=0; i < HistoryItem.EVENT_COUNT; i++) {
            HashMap<String,SparseIntArray> active=tracker.getStateForEvent(i);
            if (active == null) {
              continue;
            }
            for (            HashMap.Entry<String,SparseIntArray> ent : active.entrySet()) {
              SparseIntArray uids=ent.getValue();
              for (int j=0; j < uids.size(); j++) {
                rec.eventCode=i;
                rec.eventTag.string=ent.getKey();
                rec.eventTag.uid=uids.keyAt(j);
                rec.eventTag.poolIdx=uids.valueAt(j);
                hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
                rec.wakeReasonTag=null;
                rec.wakelockTag=null;
              }
            }
          }
          rec.eventCode=oldEventCode;
          rec.eventTag=oldEventTag;
          tracker=null;
        }
      }
      hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
    }
 else     if (false && rec.eventCode != HistoryItem.EVENT_NONE) {
      if (tracker == null) {
        tracker=new HistoryEventTracker();
      }
      tracker.updateState(rec.eventCode,rec.eventTag.string,rec.eventTag.uid,rec.eventTag.poolIdx);
    }
  }
  if (histStart >= 0) {
    commitCurrentHistoryBatchLocked();
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
    pw.println(lastTime + 1);
  }
}",0.9931107578166402
195624,"public void printNextItem(PrintWriter pw,HistoryItem rec,long baseTime,boolean checkin,boolean verbose){
  if (!checkin) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(rec.time - baseTime,pw,TimeUtils.HUNDRED_DAY_FIELD_LEN);
    pw.print(""String_Node_Str"");
    pw.print(rec.numReadInts);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(BATTERY_STATS_CHECKIN_VERSION);
    pw.print(',');
    pw.print(HISTORY_DATA);
    pw.print(',');
    if (lastTime < 0) {
      pw.print(rec.time - baseTime);
    }
 else {
      pw.print(rec.time - lastTime);
    }
    lastTime=rec.time;
  }
  if (rec.cmd == HistoryItem.CMD_START) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    reset();
  }
 else   if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    if (rec.cmd == HistoryItem.CMD_RESET) {
      pw.print(""String_Node_Str"");
      reset();
    }
    pw.print(""String_Node_Str"");
    if (checkin) {
      pw.println(rec.currentTime);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.println(DateFormat.format(""String_Node_Str"",rec.currentTime).toString());
    }
  }
 else   if (rec.cmd == HistoryItem.CMD_OVERFLOW) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else {
    if (!checkin) {
      if (rec.batteryLevel < 10)       pw.print(""String_Node_Str"");
 else       if (rec.batteryLevel < 100)       pw.print(""String_Node_Str"");
      pw.print(rec.batteryLevel);
      if (verbose) {
        pw.print(""String_Node_Str"");
        if (rec.states < 0)         ;
 else         if (rec.states < 0x10)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000000)         pw.print(""String_Node_Str"");
        pw.print(Integer.toHexString(rec.states));
      }
    }
 else {
      if (oldLevel != rec.batteryLevel) {
        oldLevel=rec.batteryLevel;
        pw.print(""String_Node_Str"");
        pw.print(rec.batteryLevel);
      }
    }
    if (oldStatus != rec.batteryStatus) {
      oldStatus=rec.batteryStatus;
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
        pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      break;
case BatteryManager.BATTERY_STATUS_CHARGING:
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
  break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_COLD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldPlug) {
case 0:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_WIRELESS:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,rec.wakelockTag,HISTORY_STATE_DESCRIPTIONS,!checkin);
printBitDescriptions(pw,oldState2,rec.states2,null,HISTORY_STATE2_DESCRIPTIONS,!checkin);
if (rec.wakeReasonTag != null) {
if (checkin) {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.poolIdx);
}
 else {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.string);
pw.print(""String_Node_Str"");
}
}
if (rec.eventCode != HistoryItem.EVENT_NONE) {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
if ((rec.eventCode & HistoryItem.EVENT_FLAG_START) != 0) {
pw.print(""String_Node_Str"");
}
 else if ((rec.eventCode & HistoryItem.EVENT_FLAG_FINISH) != 0) {
pw.print(""String_Node_Str"");
}
String[] eventNames=checkin ? HISTORY_EVENT_CHECKIN_NAMES : HISTORY_EVENT_NAMES;
int idx=rec.eventCode & ~(HistoryItem.EVENT_FLAG_START | HistoryItem.EVENT_FLAG_FINISH);
if (idx >= 0 && idx < eventNames.length) {
pw.print(eventNames[idx]);
}
 else {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(idx);
}
pw.print(""String_Node_Str"");
if (checkin) {
pw.print(rec.eventTag.poolIdx);
}
 else {
UserHandle.formatUid(pw,rec.eventTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.eventTag.string);
pw.print(""String_Node_Str"");
}
}
pw.println();
oldState=rec.states;
oldState2=rec.states2;
}
}","public void printNextItem(PrintWriter pw,HistoryItem rec,long baseTime,boolean checkin,boolean verbose){
  if (!checkin) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(rec.time - baseTime,pw,TimeUtils.HUNDRED_DAY_FIELD_LEN);
    pw.print(""String_Node_Str"");
    pw.print(rec.numReadInts);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(BATTERY_STATS_CHECKIN_VERSION);
    pw.print(',');
    pw.print(HISTORY_DATA);
    pw.print(',');
    if (lastTime < 0) {
      pw.print(rec.time - baseTime);
    }
 else {
      pw.print(rec.time - lastTime);
    }
    lastTime=rec.time;
  }
  if (rec.cmd == HistoryItem.CMD_START) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    reset();
  }
 else   if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    if (rec.cmd == HistoryItem.CMD_RESET) {
      pw.print(""String_Node_Str"");
      reset();
    }
    pw.print(""String_Node_Str"");
    if (checkin) {
      pw.println(rec.currentTime);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.println(DateFormat.format(""String_Node_Str"",rec.currentTime).toString());
    }
  }
 else   if (rec.cmd == HistoryItem.CMD_SHUTDOWN) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else   if (rec.cmd == HistoryItem.CMD_OVERFLOW) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else {
    if (!checkin) {
      if (rec.batteryLevel < 10)       pw.print(""String_Node_Str"");
 else       if (rec.batteryLevel < 100)       pw.print(""String_Node_Str"");
      pw.print(rec.batteryLevel);
      if (verbose) {
        pw.print(""String_Node_Str"");
        if (rec.states < 0)         ;
 else         if (rec.states < 0x10)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000000)         pw.print(""String_Node_Str"");
        pw.print(Integer.toHexString(rec.states));
      }
    }
 else {
      if (oldLevel != rec.batteryLevel) {
        oldLevel=rec.batteryLevel;
        pw.print(""String_Node_Str"");
        pw.print(rec.batteryLevel);
      }
    }
    if (oldStatus != rec.batteryStatus) {
      oldStatus=rec.batteryStatus;
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
        pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      break;
case BatteryManager.BATTERY_STATUS_CHARGING:
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
  break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_COLD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldPlug) {
case 0:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_WIRELESS:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,rec.wakelockTag,HISTORY_STATE_DESCRIPTIONS,!checkin);
printBitDescriptions(pw,oldState2,rec.states2,null,HISTORY_STATE2_DESCRIPTIONS,!checkin);
if (rec.wakeReasonTag != null) {
if (checkin) {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.poolIdx);
}
 else {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.string);
pw.print(""String_Node_Str"");
}
}
if (rec.eventCode != HistoryItem.EVENT_NONE) {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
if ((rec.eventCode & HistoryItem.EVENT_FLAG_START) != 0) {
pw.print(""String_Node_Str"");
}
 else if ((rec.eventCode & HistoryItem.EVENT_FLAG_FINISH) != 0) {
pw.print(""String_Node_Str"");
}
String[] eventNames=checkin ? HISTORY_EVENT_CHECKIN_NAMES : HISTORY_EVENT_NAMES;
int idx=rec.eventCode & ~(HistoryItem.EVENT_FLAG_START | HistoryItem.EVENT_FLAG_FINISH);
if (idx >= 0 && idx < eventNames.length) {
pw.print(eventNames[idx]);
}
 else {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(idx);
}
pw.print(""String_Node_Str"");
if (checkin) {
pw.print(rec.eventTag.poolIdx);
}
 else {
UserHandle.formatUid(pw,rec.eventTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.eventTag.string);
pw.print(""String_Node_Str"");
}
}
pw.println();
oldState=rec.states;
oldState2=rec.states2;
}
}",0.988547869903802
195625,"@Override public void onReceive(Context context,Intent intent){
  mChangeUserId=intent.getIntExtra(Intent.EXTRA_USER_HANDLE,UserHandle.USER_NULL);
  if (mChangeUserId == UserHandle.USER_NULL) {
    throw new IllegalArgumentException(""String_Node_Str"" + intent);
  }
  onBeginPackageChanges();
  mDisappearingPackages=mAppearingPackages=null;
  mSomePackagesChanged=false;
  String action=intent.getAction();
  if (Intent.ACTION_PACKAGE_ADDED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    mSomePackagesChanged=true;
    if (pkg != null) {
      mAppearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mModifiedPackages=mTempArray;
        mChangeType=PACKAGE_UPDATING;
        onPackageUpdateFinished(pkg,uid);
        onPackageModified(pkg);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        onPackageAdded(pkg,uid);
      }
      onPackageAppeared(pkg,mChangeType);
      if (mChangeType == PACKAGE_UPDATING) {
synchronized (mUpdatingPackages) {
          mUpdatingPackages.remove(pkg);
        }
      }
    }
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    if (pkg != null) {
      mDisappearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mChangeType=PACKAGE_UPDATING;
synchronized (mUpdatingPackages) {
        }
        onPackageUpdateStarted(pkg,uid);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        mSomePackagesChanged=true;
        onPackageRemoved(pkg,uid);
        if (intent.getBooleanExtra(Intent.EXTRA_REMOVED_FOR_ALL_USERS,false)) {
          onPackageRemovedAllUsers(pkg,uid);
        }
      }
      onPackageDisappeared(pkg,mChangeType);
    }
  }
 else   if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST);
    if (pkg != null) {
      mModifiedPackages=mTempArray;
      mTempArray[0]=pkg;
      mChangeType=PACKAGE_PERMANENT_CHANGE;
      if (onPackageChanged(pkg,uid,components)) {
        mSomePackagesChanged=true;
      }
      onPackageModified(pkg);
    }
  }
 else   if (Intent.ACTION_QUERY_PACKAGE_RESTART.equals(action)) {
    mDisappearingPackages=intent.getStringArrayExtra(Intent.EXTRA_PACKAGES);
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    boolean canRestart=onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),false);
    if (canRestart)     setResultCode(Activity.RESULT_OK);
  }
 else   if (Intent.ACTION_PACKAGE_RESTARTED.equals(action)) {
    mDisappearingPackages=new String[]{getPackageName(intent)};
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),true);
  }
 else   if (Intent.ACTION_UID_REMOVED.equals(action)) {
    onUidRemoved(intent.getIntExtra(Intent.EXTRA_UID,0));
  }
 else   if (Intent.ACTION_USER_STOPPED.equals(action)) {
    if (intent.hasExtra(Intent.EXTRA_USER_HANDLE)) {
      onHandleUserStop(intent,intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mAppearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesAvailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageAppeared(pkgList[i],mChangeType);
      }
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mDisappearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesUnavailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageDisappeared(pkgList[i],mChangeType);
      }
    }
  }
  if (mSomePackagesChanged) {
    onSomePackagesChanged();
  }
  onFinishPackageChanges();
  mChangeUserId=UserHandle.USER_NULL;
}","@Override public void onReceive(Context context,Intent intent){
  mChangeUserId=intent.getIntExtra(Intent.EXTRA_USER_HANDLE,UserHandle.USER_NULL);
  if (mChangeUserId == UserHandle.USER_NULL) {
    Slog.w(""String_Node_Str"",""String_Node_Str"" + intent);
    return;
  }
  onBeginPackageChanges();
  mDisappearingPackages=mAppearingPackages=null;
  mSomePackagesChanged=false;
  String action=intent.getAction();
  if (Intent.ACTION_PACKAGE_ADDED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    mSomePackagesChanged=true;
    if (pkg != null) {
      mAppearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mModifiedPackages=mTempArray;
        mChangeType=PACKAGE_UPDATING;
        onPackageUpdateFinished(pkg,uid);
        onPackageModified(pkg);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        onPackageAdded(pkg,uid);
      }
      onPackageAppeared(pkg,mChangeType);
      if (mChangeType == PACKAGE_UPDATING) {
synchronized (mUpdatingPackages) {
          mUpdatingPackages.remove(pkg);
        }
      }
    }
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    if (pkg != null) {
      mDisappearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mChangeType=PACKAGE_UPDATING;
synchronized (mUpdatingPackages) {
        }
        onPackageUpdateStarted(pkg,uid);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        mSomePackagesChanged=true;
        onPackageRemoved(pkg,uid);
        if (intent.getBooleanExtra(Intent.EXTRA_REMOVED_FOR_ALL_USERS,false)) {
          onPackageRemovedAllUsers(pkg,uid);
        }
      }
      onPackageDisappeared(pkg,mChangeType);
    }
  }
 else   if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST);
    if (pkg != null) {
      mModifiedPackages=mTempArray;
      mTempArray[0]=pkg;
      mChangeType=PACKAGE_PERMANENT_CHANGE;
      if (onPackageChanged(pkg,uid,components)) {
        mSomePackagesChanged=true;
      }
      onPackageModified(pkg);
    }
  }
 else   if (Intent.ACTION_QUERY_PACKAGE_RESTART.equals(action)) {
    mDisappearingPackages=intent.getStringArrayExtra(Intent.EXTRA_PACKAGES);
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    boolean canRestart=onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),false);
    if (canRestart)     setResultCode(Activity.RESULT_OK);
  }
 else   if (Intent.ACTION_PACKAGE_RESTARTED.equals(action)) {
    mDisappearingPackages=new String[]{getPackageName(intent)};
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),true);
  }
 else   if (Intent.ACTION_UID_REMOVED.equals(action)) {
    onUidRemoved(intent.getIntExtra(Intent.EXTRA_UID,0));
  }
 else   if (Intent.ACTION_USER_STOPPED.equals(action)) {
    if (intent.hasExtra(Intent.EXTRA_USER_HANDLE)) {
      onHandleUserStop(intent,intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mAppearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesAvailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageAppeared(pkgList[i],mChangeType);
      }
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mDisappearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesUnavailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageDisappeared(pkgList[i],mChangeType);
      }
    }
  }
  if (mSomePackagesChanged) {
    onSomePackagesChanged();
  }
  onFinishPackageChanges();
  mChangeUserId=UserHandle.USER_NULL;
}",0.986652078774617
195626,"public void shutdownLocked(){
  writeSyncLocked();
  mShuttingDown=true;
}","public void shutdownLocked(){
  recordShutdownLocked(SystemClock.elapsedRealtime(),SystemClock.uptimeMillis());
  writeSyncLocked();
  mShuttingDown=true;
}",0.6434782608695652
195627,"@Override public UserInfo getProfileParent(int userHandle){
  checkManageUsersPermission(""String_Node_Str"");
synchronized (mPackagesLock) {
    UserInfo profile=getUserInfoLocked(userHandle);
    int parentUserId=profile.profileGroupId;
    if (parentUserId == UserInfo.NO_PROFILE_GROUP_ID) {
      return null;
    }
 else {
      return getUserInfoLocked(parentUserId);
    }
  }
}","@Override public UserInfo getProfileParent(int userHandle){
  checkManageUsersPermission(""String_Node_Str"");
synchronized (mPackagesLock) {
    UserInfo profile=getUserInfoLocked(userHandle);
    if (profile == null) {
      return null;
    }
    int parentUserId=profile.profileGroupId;
    if (parentUserId == UserInfo.NO_PROFILE_GROUP_ID) {
      return null;
    }
 else {
      return getUserInfoLocked(parentUserId);
    }
  }
}",0.9364303178484108
195628,"private void dumpHistoryLocked(PrintWriter pw,int flags,long histStart,boolean checkin){
  final HistoryPrinter hprinter=new HistoryPrinter();
  final HistoryItem rec=new HistoryItem();
  long lastTime=-1;
  long baseTime=-1;
  boolean printed=false;
  HistoryEventTracker tracker=null;
  while (getNextHistoryLocked(rec)) {
    lastTime=rec.time;
    if (baseTime < 0) {
      baseTime=lastTime;
    }
    if (rec.time >= histStart) {
      if (histStart >= 0 && !printed) {
        if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET || rec.cmd == HistoryItem.CMD_START) {
          printed=true;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=HistoryItem.CMD_UPDATE;
        }
 else         if (rec.currentTime != 0) {
          printed=true;
          byte cmd=rec.cmd;
          rec.cmd=HistoryItem.CMD_CURRENT_TIME;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=cmd;
        }
        if (tracker != null) {
          if (rec.cmd != HistoryItem.CMD_UPDATE) {
            hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
            rec.cmd=HistoryItem.CMD_UPDATE;
          }
          int oldEventCode=rec.eventCode;
          HistoryTag oldEventTag=rec.eventTag;
          rec.eventTag=new HistoryTag();
          for (int i=0; i < HistoryItem.EVENT_COUNT; i++) {
            HashMap<String,SparseIntArray> active=tracker.getStateForEvent(i);
            if (active == null) {
              continue;
            }
            for (            HashMap.Entry<String,SparseIntArray> ent : active.entrySet()) {
              SparseIntArray uids=ent.getValue();
              for (int j=0; j < uids.size(); j++) {
                rec.eventCode=i;
                rec.eventTag.string=ent.getKey();
                rec.eventTag.uid=uids.keyAt(j);
                rec.eventTag.poolIdx=uids.valueAt(j);
                hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
                rec.wakeReasonTag=null;
                rec.wakelockTag=null;
              }
            }
          }
          rec.eventCode=oldEventCode;
          rec.eventTag=oldEventTag;
          tracker=null;
        }
      }
      hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
    }
 else     if (false && rec.eventCode != HistoryItem.EVENT_NONE) {
      if (tracker == null) {
        tracker=new HistoryEventTracker();
      }
      tracker.updateState(rec.eventCode,rec.eventTag.string,rec.eventTag.uid,rec.eventTag.poolIdx);
    }
  }
  if (histStart >= 0) {
    commitCurrentHistoryBatchLocked();
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
    pw.println(lastTime + 1);
  }
}","private void dumpHistoryLocked(PrintWriter pw,int flags,long histStart,boolean checkin){
  final HistoryPrinter hprinter=new HistoryPrinter();
  final HistoryItem rec=new HistoryItem();
  long lastTime=-1;
  long baseTime=-1;
  boolean printed=false;
  HistoryEventTracker tracker=null;
  while (getNextHistoryLocked(rec)) {
    lastTime=rec.time;
    if (baseTime < 0) {
      baseTime=lastTime;
    }
    if (rec.time >= histStart) {
      if (histStart >= 0 && !printed) {
        if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET || rec.cmd == HistoryItem.CMD_START || rec.cmd == HistoryItem.CMD_SHUTDOWN) {
          printed=true;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=HistoryItem.CMD_UPDATE;
        }
 else         if (rec.currentTime != 0) {
          printed=true;
          byte cmd=rec.cmd;
          rec.cmd=HistoryItem.CMD_CURRENT_TIME;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=cmd;
        }
        if (tracker != null) {
          if (rec.cmd != HistoryItem.CMD_UPDATE) {
            hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
            rec.cmd=HistoryItem.CMD_UPDATE;
          }
          int oldEventCode=rec.eventCode;
          HistoryTag oldEventTag=rec.eventTag;
          rec.eventTag=new HistoryTag();
          for (int i=0; i < HistoryItem.EVENT_COUNT; i++) {
            HashMap<String,SparseIntArray> active=tracker.getStateForEvent(i);
            if (active == null) {
              continue;
            }
            for (            HashMap.Entry<String,SparseIntArray> ent : active.entrySet()) {
              SparseIntArray uids=ent.getValue();
              for (int j=0; j < uids.size(); j++) {
                rec.eventCode=i;
                rec.eventTag.string=ent.getKey();
                rec.eventTag.uid=uids.keyAt(j);
                rec.eventTag.poolIdx=uids.valueAt(j);
                hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
                rec.wakeReasonTag=null;
                rec.wakelockTag=null;
              }
            }
          }
          rec.eventCode=oldEventCode;
          rec.eventTag=oldEventTag;
          tracker=null;
        }
      }
      hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
    }
 else     if (false && rec.eventCode != HistoryItem.EVENT_NONE) {
      if (tracker == null) {
        tracker=new HistoryEventTracker();
      }
      tracker.updateState(rec.eventCode,rec.eventTag.string,rec.eventTag.uid,rec.eventTag.poolIdx);
    }
  }
  if (histStart >= 0) {
    commitCurrentHistoryBatchLocked();
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
    pw.println(lastTime + 1);
  }
}",0.9931107578166402
195629,"public void printNextItem(PrintWriter pw,HistoryItem rec,long baseTime,boolean checkin,boolean verbose){
  if (!checkin) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(rec.time - baseTime,pw,TimeUtils.HUNDRED_DAY_FIELD_LEN);
    pw.print(""String_Node_Str"");
    pw.print(rec.numReadInts);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(BATTERY_STATS_CHECKIN_VERSION);
    pw.print(',');
    pw.print(HISTORY_DATA);
    pw.print(',');
    if (lastTime < 0) {
      pw.print(rec.time - baseTime);
    }
 else {
      pw.print(rec.time - lastTime);
    }
    lastTime=rec.time;
  }
  if (rec.cmd == HistoryItem.CMD_START) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    reset();
  }
 else   if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    if (rec.cmd == HistoryItem.CMD_RESET) {
      pw.print(""String_Node_Str"");
      reset();
    }
    pw.print(""String_Node_Str"");
    if (checkin) {
      pw.println(rec.currentTime);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.println(DateFormat.format(""String_Node_Str"",rec.currentTime).toString());
    }
  }
 else   if (rec.cmd == HistoryItem.CMD_OVERFLOW) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else {
    if (!checkin) {
      if (rec.batteryLevel < 10)       pw.print(""String_Node_Str"");
 else       if (rec.batteryLevel < 100)       pw.print(""String_Node_Str"");
      pw.print(rec.batteryLevel);
      if (verbose) {
        pw.print(""String_Node_Str"");
        if (rec.states < 0)         ;
 else         if (rec.states < 0x10)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000000)         pw.print(""String_Node_Str"");
        pw.print(Integer.toHexString(rec.states));
      }
    }
 else {
      if (oldLevel != rec.batteryLevel) {
        oldLevel=rec.batteryLevel;
        pw.print(""String_Node_Str"");
        pw.print(rec.batteryLevel);
      }
    }
    if (oldStatus != rec.batteryStatus) {
      oldStatus=rec.batteryStatus;
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
        pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      break;
case BatteryManager.BATTERY_STATUS_CHARGING:
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
  break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_COLD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldPlug) {
case 0:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_WIRELESS:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,rec.wakelockTag,HISTORY_STATE_DESCRIPTIONS,!checkin);
printBitDescriptions(pw,oldState2,rec.states2,null,HISTORY_STATE2_DESCRIPTIONS,!checkin);
if (rec.wakeReasonTag != null) {
if (checkin) {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.poolIdx);
}
 else {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.string);
pw.print(""String_Node_Str"");
}
}
if (rec.eventCode != HistoryItem.EVENT_NONE) {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
if ((rec.eventCode & HistoryItem.EVENT_FLAG_START) != 0) {
pw.print(""String_Node_Str"");
}
 else if ((rec.eventCode & HistoryItem.EVENT_FLAG_FINISH) != 0) {
pw.print(""String_Node_Str"");
}
String[] eventNames=checkin ? HISTORY_EVENT_CHECKIN_NAMES : HISTORY_EVENT_NAMES;
int idx=rec.eventCode & ~(HistoryItem.EVENT_FLAG_START | HistoryItem.EVENT_FLAG_FINISH);
if (idx >= 0 && idx < eventNames.length) {
pw.print(eventNames[idx]);
}
 else {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(idx);
}
pw.print(""String_Node_Str"");
if (checkin) {
pw.print(rec.eventTag.poolIdx);
}
 else {
UserHandle.formatUid(pw,rec.eventTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.eventTag.string);
pw.print(""String_Node_Str"");
}
}
pw.println();
oldState=rec.states;
oldState2=rec.states2;
}
}","public void printNextItem(PrintWriter pw,HistoryItem rec,long baseTime,boolean checkin,boolean verbose){
  if (!checkin) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(rec.time - baseTime,pw,TimeUtils.HUNDRED_DAY_FIELD_LEN);
    pw.print(""String_Node_Str"");
    pw.print(rec.numReadInts);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(BATTERY_STATS_CHECKIN_VERSION);
    pw.print(',');
    pw.print(HISTORY_DATA);
    pw.print(',');
    if (lastTime < 0) {
      pw.print(rec.time - baseTime);
    }
 else {
      pw.print(rec.time - lastTime);
    }
    lastTime=rec.time;
  }
  if (rec.cmd == HistoryItem.CMD_START) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    reset();
  }
 else   if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    if (rec.cmd == HistoryItem.CMD_RESET) {
      pw.print(""String_Node_Str"");
      reset();
    }
    pw.print(""String_Node_Str"");
    if (checkin) {
      pw.println(rec.currentTime);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.println(DateFormat.format(""String_Node_Str"",rec.currentTime).toString());
    }
  }
 else   if (rec.cmd == HistoryItem.CMD_SHUTDOWN) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else   if (rec.cmd == HistoryItem.CMD_OVERFLOW) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else {
    if (!checkin) {
      if (rec.batteryLevel < 10)       pw.print(""String_Node_Str"");
 else       if (rec.batteryLevel < 100)       pw.print(""String_Node_Str"");
      pw.print(rec.batteryLevel);
      if (verbose) {
        pw.print(""String_Node_Str"");
        if (rec.states < 0)         ;
 else         if (rec.states < 0x10)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000000)         pw.print(""String_Node_Str"");
        pw.print(Integer.toHexString(rec.states));
      }
    }
 else {
      if (oldLevel != rec.batteryLevel) {
        oldLevel=rec.batteryLevel;
        pw.print(""String_Node_Str"");
        pw.print(rec.batteryLevel);
      }
    }
    if (oldStatus != rec.batteryStatus) {
      oldStatus=rec.batteryStatus;
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
        pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      break;
case BatteryManager.BATTERY_STATUS_CHARGING:
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
  break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_COLD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldPlug) {
case 0:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_WIRELESS:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,rec.wakelockTag,HISTORY_STATE_DESCRIPTIONS,!checkin);
printBitDescriptions(pw,oldState2,rec.states2,null,HISTORY_STATE2_DESCRIPTIONS,!checkin);
if (rec.wakeReasonTag != null) {
if (checkin) {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.poolIdx);
}
 else {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.string);
pw.print(""String_Node_Str"");
}
}
if (rec.eventCode != HistoryItem.EVENT_NONE) {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
if ((rec.eventCode & HistoryItem.EVENT_FLAG_START) != 0) {
pw.print(""String_Node_Str"");
}
 else if ((rec.eventCode & HistoryItem.EVENT_FLAG_FINISH) != 0) {
pw.print(""String_Node_Str"");
}
String[] eventNames=checkin ? HISTORY_EVENT_CHECKIN_NAMES : HISTORY_EVENT_NAMES;
int idx=rec.eventCode & ~(HistoryItem.EVENT_FLAG_START | HistoryItem.EVENT_FLAG_FINISH);
if (idx >= 0 && idx < eventNames.length) {
pw.print(eventNames[idx]);
}
 else {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(idx);
}
pw.print(""String_Node_Str"");
if (checkin) {
pw.print(rec.eventTag.poolIdx);
}
 else {
UserHandle.formatUid(pw,rec.eventTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.eventTag.string);
pw.print(""String_Node_Str"");
}
}
pw.println();
oldState=rec.states;
oldState2=rec.states2;
}
}",0.988547869903802
195630,"@Override public void onReceive(Context context,Intent intent){
  mChangeUserId=intent.getIntExtra(Intent.EXTRA_USER_HANDLE,UserHandle.USER_NULL);
  if (mChangeUserId == UserHandle.USER_NULL) {
    throw new IllegalArgumentException(""String_Node_Str"" + intent);
  }
  onBeginPackageChanges();
  mDisappearingPackages=mAppearingPackages=null;
  mSomePackagesChanged=false;
  String action=intent.getAction();
  if (Intent.ACTION_PACKAGE_ADDED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    mSomePackagesChanged=true;
    if (pkg != null) {
      mAppearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mModifiedPackages=mTempArray;
        mChangeType=PACKAGE_UPDATING;
        onPackageUpdateFinished(pkg,uid);
        onPackageModified(pkg);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        onPackageAdded(pkg,uid);
      }
      onPackageAppeared(pkg,mChangeType);
      if (mChangeType == PACKAGE_UPDATING) {
synchronized (mUpdatingPackages) {
          mUpdatingPackages.remove(pkg);
        }
      }
    }
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    if (pkg != null) {
      mDisappearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mChangeType=PACKAGE_UPDATING;
synchronized (mUpdatingPackages) {
        }
        onPackageUpdateStarted(pkg,uid);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        mSomePackagesChanged=true;
        onPackageRemoved(pkg,uid);
        if (intent.getBooleanExtra(Intent.EXTRA_REMOVED_FOR_ALL_USERS,false)) {
          onPackageRemovedAllUsers(pkg,uid);
        }
      }
      onPackageDisappeared(pkg,mChangeType);
    }
  }
 else   if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST);
    if (pkg != null) {
      mModifiedPackages=mTempArray;
      mTempArray[0]=pkg;
      mChangeType=PACKAGE_PERMANENT_CHANGE;
      if (onPackageChanged(pkg,uid,components)) {
        mSomePackagesChanged=true;
      }
      onPackageModified(pkg);
    }
  }
 else   if (Intent.ACTION_QUERY_PACKAGE_RESTART.equals(action)) {
    mDisappearingPackages=intent.getStringArrayExtra(Intent.EXTRA_PACKAGES);
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    boolean canRestart=onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),false);
    if (canRestart)     setResultCode(Activity.RESULT_OK);
  }
 else   if (Intent.ACTION_PACKAGE_RESTARTED.equals(action)) {
    mDisappearingPackages=new String[]{getPackageName(intent)};
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),true);
  }
 else   if (Intent.ACTION_UID_REMOVED.equals(action)) {
    onUidRemoved(intent.getIntExtra(Intent.EXTRA_UID,0));
  }
 else   if (Intent.ACTION_USER_STOPPED.equals(action)) {
    if (intent.hasExtra(Intent.EXTRA_USER_HANDLE)) {
      onHandleUserStop(intent,intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mAppearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesAvailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageAppeared(pkgList[i],mChangeType);
      }
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mDisappearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesUnavailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageDisappeared(pkgList[i],mChangeType);
      }
    }
  }
  if (mSomePackagesChanged) {
    onSomePackagesChanged();
  }
  onFinishPackageChanges();
  mChangeUserId=UserHandle.USER_NULL;
}","@Override public void onReceive(Context context,Intent intent){
  mChangeUserId=intent.getIntExtra(Intent.EXTRA_USER_HANDLE,UserHandle.USER_NULL);
  if (mChangeUserId == UserHandle.USER_NULL) {
    Slog.w(""String_Node_Str"",""String_Node_Str"" + intent);
    return;
  }
  onBeginPackageChanges();
  mDisappearingPackages=mAppearingPackages=null;
  mSomePackagesChanged=false;
  String action=intent.getAction();
  if (Intent.ACTION_PACKAGE_ADDED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    mSomePackagesChanged=true;
    if (pkg != null) {
      mAppearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mModifiedPackages=mTempArray;
        mChangeType=PACKAGE_UPDATING;
        onPackageUpdateFinished(pkg,uid);
        onPackageModified(pkg);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        onPackageAdded(pkg,uid);
      }
      onPackageAppeared(pkg,mChangeType);
      if (mChangeType == PACKAGE_UPDATING) {
synchronized (mUpdatingPackages) {
          mUpdatingPackages.remove(pkg);
        }
      }
    }
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    if (pkg != null) {
      mDisappearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mChangeType=PACKAGE_UPDATING;
synchronized (mUpdatingPackages) {
        }
        onPackageUpdateStarted(pkg,uid);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        mSomePackagesChanged=true;
        onPackageRemoved(pkg,uid);
        if (intent.getBooleanExtra(Intent.EXTRA_REMOVED_FOR_ALL_USERS,false)) {
          onPackageRemovedAllUsers(pkg,uid);
        }
      }
      onPackageDisappeared(pkg,mChangeType);
    }
  }
 else   if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST);
    if (pkg != null) {
      mModifiedPackages=mTempArray;
      mTempArray[0]=pkg;
      mChangeType=PACKAGE_PERMANENT_CHANGE;
      if (onPackageChanged(pkg,uid,components)) {
        mSomePackagesChanged=true;
      }
      onPackageModified(pkg);
    }
  }
 else   if (Intent.ACTION_QUERY_PACKAGE_RESTART.equals(action)) {
    mDisappearingPackages=intent.getStringArrayExtra(Intent.EXTRA_PACKAGES);
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    boolean canRestart=onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),false);
    if (canRestart)     setResultCode(Activity.RESULT_OK);
  }
 else   if (Intent.ACTION_PACKAGE_RESTARTED.equals(action)) {
    mDisappearingPackages=new String[]{getPackageName(intent)};
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),true);
  }
 else   if (Intent.ACTION_UID_REMOVED.equals(action)) {
    onUidRemoved(intent.getIntExtra(Intent.EXTRA_UID,0));
  }
 else   if (Intent.ACTION_USER_STOPPED.equals(action)) {
    if (intent.hasExtra(Intent.EXTRA_USER_HANDLE)) {
      onHandleUserStop(intent,intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mAppearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesAvailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageAppeared(pkgList[i],mChangeType);
      }
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mDisappearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesUnavailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageDisappeared(pkgList[i],mChangeType);
      }
    }
  }
  if (mSomePackagesChanged) {
    onSomePackagesChanged();
  }
  onFinishPackageChanges();
  mChangeUserId=UserHandle.USER_NULL;
}",0.986652078774617
195631,"public void shutdownLocked(){
  writeSyncLocked();
  mShuttingDown=true;
}","public void shutdownLocked(){
  recordShutdownLocked(SystemClock.elapsedRealtime(),SystemClock.uptimeMillis());
  writeSyncLocked();
  mShuttingDown=true;
}",0.6434782608695652
195632,"@Override public UserInfo getProfileParent(int userHandle){
  checkManageUsersPermission(""String_Node_Str"");
synchronized (mPackagesLock) {
    UserInfo profile=getUserInfoLocked(userHandle);
    int parentUserId=profile.profileGroupId;
    if (parentUserId == UserInfo.NO_PROFILE_GROUP_ID) {
      return null;
    }
 else {
      return getUserInfoLocked(parentUserId);
    }
  }
}","@Override public UserInfo getProfileParent(int userHandle){
  checkManageUsersPermission(""String_Node_Str"");
synchronized (mPackagesLock) {
    UserInfo profile=getUserInfoLocked(userHandle);
    if (profile == null) {
      return null;
    }
    int parentUserId=profile.profileGroupId;
    if (parentUserId == UserInfo.NO_PROFILE_GROUP_ID) {
      return null;
    }
 else {
      return getUserInfoLocked(parentUserId);
    }
  }
}",0.9364303178484108
195633,"private void dumpHistoryLocked(PrintWriter pw,int flags,long histStart,boolean checkin){
  final HistoryPrinter hprinter=new HistoryPrinter();
  final HistoryItem rec=new HistoryItem();
  long lastTime=-1;
  long baseTime=-1;
  boolean printed=false;
  HistoryEventTracker tracker=null;
  while (getNextHistoryLocked(rec)) {
    lastTime=rec.time;
    if (baseTime < 0) {
      baseTime=lastTime;
    }
    if (rec.time >= histStart) {
      if (histStart >= 0 && !printed) {
        if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET || rec.cmd == HistoryItem.CMD_START) {
          printed=true;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=HistoryItem.CMD_UPDATE;
        }
 else         if (rec.currentTime != 0) {
          printed=true;
          byte cmd=rec.cmd;
          rec.cmd=HistoryItem.CMD_CURRENT_TIME;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=cmd;
        }
        if (tracker != null) {
          if (rec.cmd != HistoryItem.CMD_UPDATE) {
            hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
            rec.cmd=HistoryItem.CMD_UPDATE;
          }
          int oldEventCode=rec.eventCode;
          HistoryTag oldEventTag=rec.eventTag;
          rec.eventTag=new HistoryTag();
          for (int i=0; i < HistoryItem.EVENT_COUNT; i++) {
            HashMap<String,SparseIntArray> active=tracker.getStateForEvent(i);
            if (active == null) {
              continue;
            }
            for (            HashMap.Entry<String,SparseIntArray> ent : active.entrySet()) {
              SparseIntArray uids=ent.getValue();
              for (int j=0; j < uids.size(); j++) {
                rec.eventCode=i;
                rec.eventTag.string=ent.getKey();
                rec.eventTag.uid=uids.keyAt(j);
                rec.eventTag.poolIdx=uids.valueAt(j);
                hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
                rec.wakeReasonTag=null;
                rec.wakelockTag=null;
              }
            }
          }
          rec.eventCode=oldEventCode;
          rec.eventTag=oldEventTag;
          tracker=null;
        }
      }
      hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
    }
 else     if (false && rec.eventCode != HistoryItem.EVENT_NONE) {
      if (tracker == null) {
        tracker=new HistoryEventTracker();
      }
      tracker.updateState(rec.eventCode,rec.eventTag.string,rec.eventTag.uid,rec.eventTag.poolIdx);
    }
  }
  if (histStart >= 0) {
    commitCurrentHistoryBatchLocked();
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
    pw.println(lastTime + 1);
  }
}","private void dumpHistoryLocked(PrintWriter pw,int flags,long histStart,boolean checkin){
  final HistoryPrinter hprinter=new HistoryPrinter();
  final HistoryItem rec=new HistoryItem();
  long lastTime=-1;
  long baseTime=-1;
  boolean printed=false;
  HistoryEventTracker tracker=null;
  while (getNextHistoryLocked(rec)) {
    lastTime=rec.time;
    if (baseTime < 0) {
      baseTime=lastTime;
    }
    if (rec.time >= histStart) {
      if (histStart >= 0 && !printed) {
        if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET || rec.cmd == HistoryItem.CMD_START || rec.cmd == HistoryItem.CMD_SHUTDOWN) {
          printed=true;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=HistoryItem.CMD_UPDATE;
        }
 else         if (rec.currentTime != 0) {
          printed=true;
          byte cmd=rec.cmd;
          rec.cmd=HistoryItem.CMD_CURRENT_TIME;
          hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
          rec.cmd=cmd;
        }
        if (tracker != null) {
          if (rec.cmd != HistoryItem.CMD_UPDATE) {
            hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
            rec.cmd=HistoryItem.CMD_UPDATE;
          }
          int oldEventCode=rec.eventCode;
          HistoryTag oldEventTag=rec.eventTag;
          rec.eventTag=new HistoryTag();
          for (int i=0; i < HistoryItem.EVENT_COUNT; i++) {
            HashMap<String,SparseIntArray> active=tracker.getStateForEvent(i);
            if (active == null) {
              continue;
            }
            for (            HashMap.Entry<String,SparseIntArray> ent : active.entrySet()) {
              SparseIntArray uids=ent.getValue();
              for (int j=0; j < uids.size(); j++) {
                rec.eventCode=i;
                rec.eventTag.string=ent.getKey();
                rec.eventTag.uid=uids.keyAt(j);
                rec.eventTag.poolIdx=uids.valueAt(j);
                hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
                rec.wakeReasonTag=null;
                rec.wakelockTag=null;
              }
            }
          }
          rec.eventCode=oldEventCode;
          rec.eventTag=oldEventTag;
          tracker=null;
        }
      }
      hprinter.printNextItem(pw,rec,baseTime,checkin,(flags & DUMP_VERBOSE) != 0);
    }
 else     if (false && rec.eventCode != HistoryItem.EVENT_NONE) {
      if (tracker == null) {
        tracker=new HistoryEventTracker();
      }
      tracker.updateState(rec.eventCode,rec.eventTag.string,rec.eventTag.uid,rec.eventTag.poolIdx);
    }
  }
  if (histStart >= 0) {
    commitCurrentHistoryBatchLocked();
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
    pw.println(lastTime + 1);
  }
}",0.9931107578166402
195634,"public void printNextItem(PrintWriter pw,HistoryItem rec,long baseTime,boolean checkin,boolean verbose){
  if (!checkin) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(rec.time - baseTime,pw,TimeUtils.HUNDRED_DAY_FIELD_LEN);
    pw.print(""String_Node_Str"");
    pw.print(rec.numReadInts);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(BATTERY_STATS_CHECKIN_VERSION);
    pw.print(',');
    pw.print(HISTORY_DATA);
    pw.print(',');
    if (lastTime < 0) {
      pw.print(rec.time - baseTime);
    }
 else {
      pw.print(rec.time - lastTime);
    }
    lastTime=rec.time;
  }
  if (rec.cmd == HistoryItem.CMD_START) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    reset();
  }
 else   if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    if (rec.cmd == HistoryItem.CMD_RESET) {
      pw.print(""String_Node_Str"");
      reset();
    }
    pw.print(""String_Node_Str"");
    if (checkin) {
      pw.println(rec.currentTime);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.println(DateFormat.format(""String_Node_Str"",rec.currentTime).toString());
    }
  }
 else   if (rec.cmd == HistoryItem.CMD_OVERFLOW) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else {
    if (!checkin) {
      if (rec.batteryLevel < 10)       pw.print(""String_Node_Str"");
 else       if (rec.batteryLevel < 100)       pw.print(""String_Node_Str"");
      pw.print(rec.batteryLevel);
      if (verbose) {
        pw.print(""String_Node_Str"");
        if (rec.states < 0)         ;
 else         if (rec.states < 0x10)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000000)         pw.print(""String_Node_Str"");
        pw.print(Integer.toHexString(rec.states));
      }
    }
 else {
      if (oldLevel != rec.batteryLevel) {
        oldLevel=rec.batteryLevel;
        pw.print(""String_Node_Str"");
        pw.print(rec.batteryLevel);
      }
    }
    if (oldStatus != rec.batteryStatus) {
      oldStatus=rec.batteryStatus;
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
        pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      break;
case BatteryManager.BATTERY_STATUS_CHARGING:
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
  break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_COLD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldPlug) {
case 0:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_WIRELESS:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,rec.wakelockTag,HISTORY_STATE_DESCRIPTIONS,!checkin);
printBitDescriptions(pw,oldState2,rec.states2,null,HISTORY_STATE2_DESCRIPTIONS,!checkin);
if (rec.wakeReasonTag != null) {
if (checkin) {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.poolIdx);
}
 else {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.string);
pw.print(""String_Node_Str"");
}
}
if (rec.eventCode != HistoryItem.EVENT_NONE) {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
if ((rec.eventCode & HistoryItem.EVENT_FLAG_START) != 0) {
pw.print(""String_Node_Str"");
}
 else if ((rec.eventCode & HistoryItem.EVENT_FLAG_FINISH) != 0) {
pw.print(""String_Node_Str"");
}
String[] eventNames=checkin ? HISTORY_EVENT_CHECKIN_NAMES : HISTORY_EVENT_NAMES;
int idx=rec.eventCode & ~(HistoryItem.EVENT_FLAG_START | HistoryItem.EVENT_FLAG_FINISH);
if (idx >= 0 && idx < eventNames.length) {
pw.print(eventNames[idx]);
}
 else {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(idx);
}
pw.print(""String_Node_Str"");
if (checkin) {
pw.print(rec.eventTag.poolIdx);
}
 else {
UserHandle.formatUid(pw,rec.eventTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.eventTag.string);
pw.print(""String_Node_Str"");
}
}
pw.println();
oldState=rec.states;
oldState2=rec.states2;
}
}","public void printNextItem(PrintWriter pw,HistoryItem rec,long baseTime,boolean checkin,boolean verbose){
  if (!checkin) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(rec.time - baseTime,pw,TimeUtils.HUNDRED_DAY_FIELD_LEN);
    pw.print(""String_Node_Str"");
    pw.print(rec.numReadInts);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(BATTERY_STATS_CHECKIN_VERSION);
    pw.print(',');
    pw.print(HISTORY_DATA);
    pw.print(',');
    if (lastTime < 0) {
      pw.print(rec.time - baseTime);
    }
 else {
      pw.print(rec.time - lastTime);
    }
    lastTime=rec.time;
  }
  if (rec.cmd == HistoryItem.CMD_START) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    reset();
  }
 else   if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    if (rec.cmd == HistoryItem.CMD_RESET) {
      pw.print(""String_Node_Str"");
      reset();
    }
    pw.print(""String_Node_Str"");
    if (checkin) {
      pw.println(rec.currentTime);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.println(DateFormat.format(""String_Node_Str"",rec.currentTime).toString());
    }
  }
 else   if (rec.cmd == HistoryItem.CMD_SHUTDOWN) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else   if (rec.cmd == HistoryItem.CMD_OVERFLOW) {
    if (checkin) {
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
  }
 else {
    if (!checkin) {
      if (rec.batteryLevel < 10)       pw.print(""String_Node_Str"");
 else       if (rec.batteryLevel < 100)       pw.print(""String_Node_Str"");
      pw.print(rec.batteryLevel);
      if (verbose) {
        pw.print(""String_Node_Str"");
        if (rec.states < 0)         ;
 else         if (rec.states < 0x10)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000000)         pw.print(""String_Node_Str"");
        pw.print(Integer.toHexString(rec.states));
      }
    }
 else {
      if (oldLevel != rec.batteryLevel) {
        oldLevel=rec.batteryLevel;
        pw.print(""String_Node_Str"");
        pw.print(rec.batteryLevel);
      }
    }
    if (oldStatus != rec.batteryStatus) {
      oldStatus=rec.batteryStatus;
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
        pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      break;
case BatteryManager.BATTERY_STATUS_CHARGING:
    pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
  break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_COLD:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
switch (oldPlug) {
case 0:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_WIRELESS:
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,rec.wakelockTag,HISTORY_STATE_DESCRIPTIONS,!checkin);
printBitDescriptions(pw,oldState2,rec.states2,null,HISTORY_STATE2_DESCRIPTIONS,!checkin);
if (rec.wakeReasonTag != null) {
if (checkin) {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.poolIdx);
}
 else {
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.wakeReasonTag.string);
pw.print(""String_Node_Str"");
}
}
if (rec.eventCode != HistoryItem.EVENT_NONE) {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
if ((rec.eventCode & HistoryItem.EVENT_FLAG_START) != 0) {
pw.print(""String_Node_Str"");
}
 else if ((rec.eventCode & HistoryItem.EVENT_FLAG_FINISH) != 0) {
pw.print(""String_Node_Str"");
}
String[] eventNames=checkin ? HISTORY_EVENT_CHECKIN_NAMES : HISTORY_EVENT_NAMES;
int idx=rec.eventCode & ~(HistoryItem.EVENT_FLAG_START | HistoryItem.EVENT_FLAG_FINISH);
if (idx >= 0 && idx < eventNames.length) {
pw.print(eventNames[idx]);
}
 else {
pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
pw.print(idx);
}
pw.print(""String_Node_Str"");
if (checkin) {
pw.print(rec.eventTag.poolIdx);
}
 else {
UserHandle.formatUid(pw,rec.eventTag.uid);
pw.print(""String_Node_Str"");
pw.print(rec.eventTag.string);
pw.print(""String_Node_Str"");
}
}
pw.println();
oldState=rec.states;
oldState2=rec.states2;
}
}",0.988547869903802
195635,"@Override public void onReceive(Context context,Intent intent){
  mChangeUserId=intent.getIntExtra(Intent.EXTRA_USER_HANDLE,UserHandle.USER_NULL);
  if (mChangeUserId == UserHandle.USER_NULL) {
    throw new IllegalArgumentException(""String_Node_Str"" + intent);
  }
  onBeginPackageChanges();
  mDisappearingPackages=mAppearingPackages=null;
  mSomePackagesChanged=false;
  String action=intent.getAction();
  if (Intent.ACTION_PACKAGE_ADDED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    mSomePackagesChanged=true;
    if (pkg != null) {
      mAppearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mModifiedPackages=mTempArray;
        mChangeType=PACKAGE_UPDATING;
        onPackageUpdateFinished(pkg,uid);
        onPackageModified(pkg);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        onPackageAdded(pkg,uid);
      }
      onPackageAppeared(pkg,mChangeType);
      if (mChangeType == PACKAGE_UPDATING) {
synchronized (mUpdatingPackages) {
          mUpdatingPackages.remove(pkg);
        }
      }
    }
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    if (pkg != null) {
      mDisappearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mChangeType=PACKAGE_UPDATING;
synchronized (mUpdatingPackages) {
        }
        onPackageUpdateStarted(pkg,uid);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        mSomePackagesChanged=true;
        onPackageRemoved(pkg,uid);
        if (intent.getBooleanExtra(Intent.EXTRA_REMOVED_FOR_ALL_USERS,false)) {
          onPackageRemovedAllUsers(pkg,uid);
        }
      }
      onPackageDisappeared(pkg,mChangeType);
    }
  }
 else   if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST);
    if (pkg != null) {
      mModifiedPackages=mTempArray;
      mTempArray[0]=pkg;
      mChangeType=PACKAGE_PERMANENT_CHANGE;
      if (onPackageChanged(pkg,uid,components)) {
        mSomePackagesChanged=true;
      }
      onPackageModified(pkg);
    }
  }
 else   if (Intent.ACTION_QUERY_PACKAGE_RESTART.equals(action)) {
    mDisappearingPackages=intent.getStringArrayExtra(Intent.EXTRA_PACKAGES);
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    boolean canRestart=onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),false);
    if (canRestart)     setResultCode(Activity.RESULT_OK);
  }
 else   if (Intent.ACTION_PACKAGE_RESTARTED.equals(action)) {
    mDisappearingPackages=new String[]{getPackageName(intent)};
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),true);
  }
 else   if (Intent.ACTION_UID_REMOVED.equals(action)) {
    onUidRemoved(intent.getIntExtra(Intent.EXTRA_UID,0));
  }
 else   if (Intent.ACTION_USER_STOPPED.equals(action)) {
    if (intent.hasExtra(Intent.EXTRA_USER_HANDLE)) {
      onHandleUserStop(intent,intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mAppearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesAvailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageAppeared(pkgList[i],mChangeType);
      }
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mDisappearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesUnavailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageDisappeared(pkgList[i],mChangeType);
      }
    }
  }
  if (mSomePackagesChanged) {
    onSomePackagesChanged();
  }
  onFinishPackageChanges();
  mChangeUserId=UserHandle.USER_NULL;
}","@Override public void onReceive(Context context,Intent intent){
  mChangeUserId=intent.getIntExtra(Intent.EXTRA_USER_HANDLE,UserHandle.USER_NULL);
  if (mChangeUserId == UserHandle.USER_NULL) {
    Slog.w(""String_Node_Str"",""String_Node_Str"" + intent);
    return;
  }
  onBeginPackageChanges();
  mDisappearingPackages=mAppearingPackages=null;
  mSomePackagesChanged=false;
  String action=intent.getAction();
  if (Intent.ACTION_PACKAGE_ADDED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    mSomePackagesChanged=true;
    if (pkg != null) {
      mAppearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mModifiedPackages=mTempArray;
        mChangeType=PACKAGE_UPDATING;
        onPackageUpdateFinished(pkg,uid);
        onPackageModified(pkg);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        onPackageAdded(pkg,uid);
      }
      onPackageAppeared(pkg,mChangeType);
      if (mChangeType == PACKAGE_UPDATING) {
synchronized (mUpdatingPackages) {
          mUpdatingPackages.remove(pkg);
        }
      }
    }
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    if (pkg != null) {
      mDisappearingPackages=mTempArray;
      mTempArray[0]=pkg;
      if (intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
        mChangeType=PACKAGE_UPDATING;
synchronized (mUpdatingPackages) {
        }
        onPackageUpdateStarted(pkg,uid);
      }
 else {
        mChangeType=PACKAGE_PERMANENT_CHANGE;
        mSomePackagesChanged=true;
        onPackageRemoved(pkg,uid);
        if (intent.getBooleanExtra(Intent.EXTRA_REMOVED_FOR_ALL_USERS,false)) {
          onPackageRemovedAllUsers(pkg,uid);
        }
      }
      onPackageDisappeared(pkg,mChangeType);
    }
  }
 else   if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
    String pkg=getPackageName(intent);
    int uid=intent.getIntExtra(Intent.EXTRA_UID,0);
    String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST);
    if (pkg != null) {
      mModifiedPackages=mTempArray;
      mTempArray[0]=pkg;
      mChangeType=PACKAGE_PERMANENT_CHANGE;
      if (onPackageChanged(pkg,uid,components)) {
        mSomePackagesChanged=true;
      }
      onPackageModified(pkg);
    }
  }
 else   if (Intent.ACTION_QUERY_PACKAGE_RESTART.equals(action)) {
    mDisappearingPackages=intent.getStringArrayExtra(Intent.EXTRA_PACKAGES);
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    boolean canRestart=onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),false);
    if (canRestart)     setResultCode(Activity.RESULT_OK);
  }
 else   if (Intent.ACTION_PACKAGE_RESTARTED.equals(action)) {
    mDisappearingPackages=new String[]{getPackageName(intent)};
    mChangeType=PACKAGE_TEMPORARY_CHANGE;
    onHandleForceStop(intent,mDisappearingPackages,intent.getIntExtra(Intent.EXTRA_UID,0),true);
  }
 else   if (Intent.ACTION_UID_REMOVED.equals(action)) {
    onUidRemoved(intent.getIntExtra(Intent.EXTRA_UID,0));
  }
 else   if (Intent.ACTION_USER_STOPPED.equals(action)) {
    if (intent.hasExtra(Intent.EXTRA_USER_HANDLE)) {
      onHandleUserStop(intent,intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mAppearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesAvailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageAppeared(pkgList[i],mChangeType);
      }
    }
  }
 else   if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) {
    String[] pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
    mDisappearingPackages=pkgList;
    mChangeType=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false) ? PACKAGE_UPDATING : PACKAGE_TEMPORARY_CHANGE;
    mSomePackagesChanged=true;
    if (pkgList != null) {
      onPackagesUnavailable(pkgList);
      for (int i=0; i < pkgList.length; i++) {
        onPackageDisappeared(pkgList[i],mChangeType);
      }
    }
  }
  if (mSomePackagesChanged) {
    onSomePackagesChanged();
  }
  onFinishPackageChanges();
  mChangeUserId=UserHandle.USER_NULL;
}",0.986652078774617
195636,"public void shutdownLocked(){
  writeSyncLocked();
  mShuttingDown=true;
}","public void shutdownLocked(){
  recordShutdownLocked(SystemClock.elapsedRealtime(),SystemClock.uptimeMillis());
  writeSyncLocked();
  mShuttingDown=true;
}",0.6434782608695652
195637,"@Override public UserInfo getProfileParent(int userHandle){
  checkManageUsersPermission(""String_Node_Str"");
synchronized (mPackagesLock) {
    UserInfo profile=getUserInfoLocked(userHandle);
    int parentUserId=profile.profileGroupId;
    if (parentUserId == UserInfo.NO_PROFILE_GROUP_ID) {
      return null;
    }
 else {
      return getUserInfoLocked(parentUserId);
    }
  }
}","@Override public UserInfo getProfileParent(int userHandle){
  checkManageUsersPermission(""String_Node_Str"");
synchronized (mPackagesLock) {
    UserInfo profile=getUserInfoLocked(userHandle);
    if (profile == null) {
      return null;
    }
    int parentUserId=profile.profileGroupId;
    if (parentUserId == UserInfo.NO_PROFILE_GROUP_ID) {
      return null;
    }
 else {
      return getUserInfoLocked(parentUserId);
    }
  }
}",0.9364303178484108
195638,"private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 4;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}","private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  final boolean is64bit=Build.SUPPORTED_64_BIT_ABIS.length > 0;
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    if (is64bit) {
      if (i == 4)       high=(high * 3) / 2;
 else       if (i == 5)       high=(high * 7) / 4;
    }
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}",0.9500860585197934
195639,"private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 4;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}","private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  final boolean is64bit=Build.SUPPORTED_64_BIT_ABIS.length > 0;
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    if (is64bit) {
      if (i == 4)       high=(high * 3) / 2;
 else       if (i == 5)       high=(high * 7) / 4;
    }
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}",0.9500860585197934
195640,"private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 4;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}","private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  final boolean is64bit=Build.SUPPORTED_64_BIT_ABIS.length > 0;
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    if (is64bit) {
      if (i == 4)       high=(high * 3) / 2;
 else       if (i == 5)       high=(high * 7) / 4;
    }
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}",0.9500860585197934
195641,"private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 4;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}","private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  final boolean is64bit=Build.SUPPORTED_64_BIT_ABIS.length > 0;
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    if (is64bit) {
      if (i == 4)       high=(high * 3) / 2;
 else       if (i == 5)       high=(high * 7) / 4;
    }
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}",0.9500860585197934
195642,"private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 4;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}","private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  final boolean is64bit=Build.SUPPORTED_64_BIT_ABIS.length > 0;
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    if (is64bit) {
      if (i == 4)       high=(high * 3) / 2;
 else       if (i == 5)       high=(high * 7) / 4;
    }
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}",0.9500860585197934
195643,"private void positionSelector(int position,View sel,boolean manageHotspot,float x,float y){
  final boolean positionChanged=position != mSelectorPosition;
  if (position != INVALID_POSITION) {
    mSelectorPosition=position;
  }
  final Rect selectorRect=mSelectorRect;
  selectorRect.set(sel.getLeft(),sel.getTop(),sel.getRight(),sel.getBottom());
  if (sel instanceof SelectionBoundsAdjuster) {
    ((SelectionBoundsAdjuster)sel).adjustListItemSelectionBounds(selectorRect);
  }
  selectorRect.left-=mSelectionLeftPadding;
  selectorRect.top-=mSelectionTopPadding;
  selectorRect.right+=mSelectionRightPadding;
  selectorRect.bottom+=mSelectionBottomPadding;
  final Drawable selector=mSelector;
  if (selector != null) {
    if (positionChanged) {
      selector.setVisible(false,false);
      selector.setState(StateSet.NOTHING);
    }
    selector.setBounds(selectorRect);
    if (positionChanged) {
      if (getVisibility() == VISIBLE) {
        selector.setVisible(true,false);
      }
      selector.setState(getDrawableState());
    }
    if (manageHotspot) {
      selector.setHotspot(x,y);
    }
  }
  final boolean isChildViewEnabled=mIsChildViewEnabled;
  if (sel.isEnabled() != isChildViewEnabled) {
    mIsChildViewEnabled=!isChildViewEnabled;
    if (getSelectedItemPosition() != INVALID_POSITION) {
      refreshDrawableState();
    }
  }
}","private void positionSelector(int position,View sel,boolean manageHotspot,float x,float y){
  final boolean positionChanged=position != mSelectorPosition;
  if (position != INVALID_POSITION) {
    mSelectorPosition=position;
  }
  final Rect selectorRect=mSelectorRect;
  selectorRect.set(sel.getLeft(),sel.getTop(),sel.getRight(),sel.getBottom());
  if (sel instanceof SelectionBoundsAdjuster) {
    ((SelectionBoundsAdjuster)sel).adjustListItemSelectionBounds(selectorRect);
  }
  selectorRect.left-=mSelectionLeftPadding;
  selectorRect.top-=mSelectionTopPadding;
  selectorRect.right+=mSelectionRightPadding;
  selectorRect.bottom+=mSelectionBottomPadding;
  final Drawable selector=mSelector;
  if (selector != null) {
    if (positionChanged) {
      selector.setVisible(false,false);
      selector.setState(StateSet.NOTHING);
    }
    selector.setBounds(selectorRect);
    if (positionChanged) {
      if (getVisibility() == VISIBLE) {
        selector.setVisible(true,false);
      }
      updateSelectorState();
    }
    if (manageHotspot) {
      selector.setHotspot(x,y);
    }
  }
  final boolean isChildViewEnabled=mIsChildViewEnabled;
  if (sel.isEnabled() != isChildViewEnabled) {
    mIsChildViewEnabled=!isChildViewEnabled;
    if (getSelectedItemPosition() != INVALID_POSITION) {
      refreshDrawableState();
    }
  }
}",0.9792592592592592
195644,"private void positionSelector(int position,View sel,boolean manageHotspot,float x,float y){
  final boolean positionChanged=position != mSelectorPosition;
  if (position != INVALID_POSITION) {
    mSelectorPosition=position;
  }
  final Rect selectorRect=mSelectorRect;
  selectorRect.set(sel.getLeft(),sel.getTop(),sel.getRight(),sel.getBottom());
  if (sel instanceof SelectionBoundsAdjuster) {
    ((SelectionBoundsAdjuster)sel).adjustListItemSelectionBounds(selectorRect);
  }
  selectorRect.left-=mSelectionLeftPadding;
  selectorRect.top-=mSelectionTopPadding;
  selectorRect.right+=mSelectionRightPadding;
  selectorRect.bottom+=mSelectionBottomPadding;
  final Drawable selector=mSelector;
  if (selector != null) {
    if (positionChanged) {
      selector.setVisible(false,false);
      selector.setState(StateSet.NOTHING);
    }
    selector.setBounds(selectorRect);
    if (positionChanged) {
      if (getVisibility() == VISIBLE) {
        selector.setVisible(true,false);
      }
      selector.setState(getDrawableState());
    }
    if (manageHotspot) {
      selector.setHotspot(x,y);
    }
  }
  final boolean isChildViewEnabled=mIsChildViewEnabled;
  if (sel.isEnabled() != isChildViewEnabled) {
    mIsChildViewEnabled=!isChildViewEnabled;
    if (getSelectedItemPosition() != INVALID_POSITION) {
      refreshDrawableState();
    }
  }
}","private void positionSelector(int position,View sel,boolean manageHotspot,float x,float y){
  final boolean positionChanged=position != mSelectorPosition;
  if (position != INVALID_POSITION) {
    mSelectorPosition=position;
  }
  final Rect selectorRect=mSelectorRect;
  selectorRect.set(sel.getLeft(),sel.getTop(),sel.getRight(),sel.getBottom());
  if (sel instanceof SelectionBoundsAdjuster) {
    ((SelectionBoundsAdjuster)sel).adjustListItemSelectionBounds(selectorRect);
  }
  selectorRect.left-=mSelectionLeftPadding;
  selectorRect.top-=mSelectionTopPadding;
  selectorRect.right+=mSelectionRightPadding;
  selectorRect.bottom+=mSelectionBottomPadding;
  final Drawable selector=mSelector;
  if (selector != null) {
    if (positionChanged) {
      selector.setVisible(false,false);
      selector.setState(StateSet.NOTHING);
    }
    selector.setBounds(selectorRect);
    if (positionChanged) {
      if (getVisibility() == VISIBLE) {
        selector.setVisible(true,false);
      }
      updateSelectorState();
    }
    if (manageHotspot) {
      selector.setHotspot(x,y);
    }
  }
  final boolean isChildViewEnabled=mIsChildViewEnabled;
  if (sel.isEnabled() != isChildViewEnabled) {
    mIsChildViewEnabled=!isChildViewEnabled;
    if (getSelectedItemPosition() != INVALID_POSITION) {
      refreshDrawableState();
    }
  }
}",0.9792592592592592
195645,"private void positionSelector(int position,View sel,boolean manageHotspot,float x,float y){
  final boolean positionChanged=position != mSelectorPosition;
  if (position != INVALID_POSITION) {
    mSelectorPosition=position;
  }
  final Rect selectorRect=mSelectorRect;
  selectorRect.set(sel.getLeft(),sel.getTop(),sel.getRight(),sel.getBottom());
  if (sel instanceof SelectionBoundsAdjuster) {
    ((SelectionBoundsAdjuster)sel).adjustListItemSelectionBounds(selectorRect);
  }
  selectorRect.left-=mSelectionLeftPadding;
  selectorRect.top-=mSelectionTopPadding;
  selectorRect.right+=mSelectionRightPadding;
  selectorRect.bottom+=mSelectionBottomPadding;
  final Drawable selector=mSelector;
  if (selector != null) {
    if (positionChanged) {
      selector.setVisible(false,false);
      selector.setState(StateSet.NOTHING);
    }
    selector.setBounds(selectorRect);
    if (positionChanged) {
      if (getVisibility() == VISIBLE) {
        selector.setVisible(true,false);
      }
      selector.setState(getDrawableState());
    }
    if (manageHotspot) {
      selector.setHotspot(x,y);
    }
  }
  final boolean isChildViewEnabled=mIsChildViewEnabled;
  if (sel.isEnabled() != isChildViewEnabled) {
    mIsChildViewEnabled=!isChildViewEnabled;
    if (getSelectedItemPosition() != INVALID_POSITION) {
      refreshDrawableState();
    }
  }
}","private void positionSelector(int position,View sel,boolean manageHotspot,float x,float y){
  final boolean positionChanged=position != mSelectorPosition;
  if (position != INVALID_POSITION) {
    mSelectorPosition=position;
  }
  final Rect selectorRect=mSelectorRect;
  selectorRect.set(sel.getLeft(),sel.getTop(),sel.getRight(),sel.getBottom());
  if (sel instanceof SelectionBoundsAdjuster) {
    ((SelectionBoundsAdjuster)sel).adjustListItemSelectionBounds(selectorRect);
  }
  selectorRect.left-=mSelectionLeftPadding;
  selectorRect.top-=mSelectionTopPadding;
  selectorRect.right+=mSelectionRightPadding;
  selectorRect.bottom+=mSelectionBottomPadding;
  final Drawable selector=mSelector;
  if (selector != null) {
    if (positionChanged) {
      selector.setVisible(false,false);
      selector.setState(StateSet.NOTHING);
    }
    selector.setBounds(selectorRect);
    if (positionChanged) {
      if (getVisibility() == VISIBLE) {
        selector.setVisible(true,false);
      }
      updateSelectorState();
    }
    if (manageHotspot) {
      selector.setHotspot(x,y);
    }
  }
  final boolean isChildViewEnabled=mIsChildViewEnabled;
  if (sel.isEnabled() != isChildViewEnabled) {
    mIsChildViewEnabled=!isChildViewEnabled;
    if (getSelectedItemPosition() != INVALID_POSITION) {
      refreshDrawableState();
    }
  }
}",0.9792592592592592
195646,"private void positionSelector(int position,View sel,boolean manageHotspot,float x,float y){
  final boolean positionChanged=position != mSelectorPosition;
  if (position != INVALID_POSITION) {
    mSelectorPosition=position;
  }
  final Rect selectorRect=mSelectorRect;
  selectorRect.set(sel.getLeft(),sel.getTop(),sel.getRight(),sel.getBottom());
  if (sel instanceof SelectionBoundsAdjuster) {
    ((SelectionBoundsAdjuster)sel).adjustListItemSelectionBounds(selectorRect);
  }
  selectorRect.left-=mSelectionLeftPadding;
  selectorRect.top-=mSelectionTopPadding;
  selectorRect.right+=mSelectionRightPadding;
  selectorRect.bottom+=mSelectionBottomPadding;
  final Drawable selector=mSelector;
  if (selector != null) {
    if (positionChanged) {
      selector.setVisible(false,false);
      selector.setState(StateSet.NOTHING);
    }
    selector.setBounds(selectorRect);
    if (positionChanged) {
      if (getVisibility() == VISIBLE) {
        selector.setVisible(true,false);
      }
      selector.setState(getDrawableState());
    }
    if (manageHotspot) {
      selector.setHotspot(x,y);
    }
  }
  final boolean isChildViewEnabled=mIsChildViewEnabled;
  if (sel.isEnabled() != isChildViewEnabled) {
    mIsChildViewEnabled=!isChildViewEnabled;
    if (getSelectedItemPosition() != INVALID_POSITION) {
      refreshDrawableState();
    }
  }
}","private void positionSelector(int position,View sel,boolean manageHotspot,float x,float y){
  final boolean positionChanged=position != mSelectorPosition;
  if (position != INVALID_POSITION) {
    mSelectorPosition=position;
  }
  final Rect selectorRect=mSelectorRect;
  selectorRect.set(sel.getLeft(),sel.getTop(),sel.getRight(),sel.getBottom());
  if (sel instanceof SelectionBoundsAdjuster) {
    ((SelectionBoundsAdjuster)sel).adjustListItemSelectionBounds(selectorRect);
  }
  selectorRect.left-=mSelectionLeftPadding;
  selectorRect.top-=mSelectionTopPadding;
  selectorRect.right+=mSelectionRightPadding;
  selectorRect.bottom+=mSelectionBottomPadding;
  final Drawable selector=mSelector;
  if (selector != null) {
    if (positionChanged) {
      selector.setVisible(false,false);
      selector.setState(StateSet.NOTHING);
    }
    selector.setBounds(selectorRect);
    if (positionChanged) {
      if (getVisibility() == VISIBLE) {
        selector.setVisible(true,false);
      }
      updateSelectorState();
    }
    if (manageHotspot) {
      selector.setHotspot(x,y);
    }
  }
  final boolean isChildViewEnabled=mIsChildViewEnabled;
  if (sel.isEnabled() != isChildViewEnabled) {
    mIsChildViewEnabled=!isChildViewEnabled;
    if (getSelectedItemPosition() != INVALID_POSITION) {
      refreshDrawableState();
    }
  }
}",0.9792592592592592
195647,"/** 
 * <p>Sets the opacity of the view. This is a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque.</p> <p> Note that setting alpha to a translucent value (0 < alpha < 1) can have significant performance implications, especially for large views. It is best to use the alpha property sparingly and transiently, as in the case of fading animations.</p> <p>For a view with a frequently changing alpha, such as during a fading animation, it is strongly recommended for performance reasons to either override  {@link #hasOverlappingRendering()} to return false if appropriate, or setting a{@link #setLayerType(int,android.graphics.Paint) layer type} on the view.</p><p>If this view overrides  {@link #onSetAlpha(int)} to return true, then this view isresponsible for applying the opacity itself.</p> <p>Note that if the view is backed by a {@link #setLayerType(int,android.graphics.Paint) layer} and is associated with a{@link #setLayerPaint(android.graphics.Paint) layer paint}, setting an alpha value less than 1.0 will supercede the alpha of the layer paint.</p>
 * @param alpha The opacity of the view.
 * @see #hasOverlappingRendering()
 * @see #setLayerType(int,android.graphics.Paint)
 * @attr ref android.R.styleable#View_alpha
 */
public void setAlpha(float alpha){
  ensureTransformationInfo();
  if (mTransformationInfo.mAlpha != alpha) {
    mTransformationInfo.mAlpha=alpha;
    if (onSetAlpha((int)(alpha * 255))) {
      mPrivateFlags|=PFLAG_ALPHA_SET;
      invalidateParentCaches();
      invalidate(true);
    }
 else {
      mPrivateFlags&=~PFLAG_ALPHA_SET;
      invalidateViewProperty(true,false);
      mRenderNode.setAlpha(getFinalAlpha());
      notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_UNDEFINED);
    }
  }
}","/** 
 * <p>Sets the opacity of the view. This is a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque.</p> <p> Note that setting alpha to a translucent value (0 < alpha < 1) can have significant performance implications, especially for large views. It is best to use the alpha property sparingly and transiently, as in the case of fading animations.</p> <p>For a view with a frequently changing alpha, such as during a fading animation, it is strongly recommended for performance reasons to either override  {@link #hasOverlappingRendering()} to return false if appropriate, or setting a{@link #setLayerType(int,android.graphics.Paint) layer type} on the view.</p><p>If this view overrides  {@link #onSetAlpha(int)} to return true, then this view isresponsible for applying the opacity itself.</p> <p>Note that if the view is backed by a {@link #setLayerType(int,android.graphics.Paint) layer} and is associated with a{@link #setLayerPaint(android.graphics.Paint) layer paint}, setting an alpha value less than 1.0 will supersede the alpha of the layer paint.</p>
 * @param alpha The opacity of the view.
 * @see #hasOverlappingRendering()
 * @see #setLayerType(int,android.graphics.Paint)
 * @attr ref android.R.styleable#View_alpha
 */
public void setAlpha(float alpha){
  ensureTransformationInfo();
  if (mTransformationInfo.mAlpha != alpha) {
    mTransformationInfo.mAlpha=alpha;
    if (onSetAlpha((int)(alpha * 255))) {
      mPrivateFlags|=PFLAG_ALPHA_SET;
      invalidateParentCaches();
      invalidate(true);
    }
 else {
      mPrivateFlags&=~PFLAG_ALPHA_SET;
      invalidateViewProperty(true,false);
      mRenderNode.setAlpha(getFinalAlpha());
      notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_UNDEFINED);
    }
  }
}",0.9994544462629568
195648,"/** 
 * <p>Enables or disables the duplication of the parent's state into this view. When duplication is enabled, this view gets its drawable state from its parent rather than from its own internal properties.</p> <p>Note: in the current implementation, setting this property to true after the view was added to a ViewGroup might have no effect at all. This property should always be used from XML or set to true before adding this view to a ViewGroup.</p> <p>Note: if this view's parent addStateFromChildren property is enabled and this property is enabled, an exception will be thrown.</p> <p>Note: if the child view uses and updates additionnal states which are unknown to the parent, these states should not be affected by this method.</p>
 * @param enabled True to enable duplication of the parent's drawable state, falseto disable it.
 * @see #getDrawableState()
 * @see #isDuplicateParentStateEnabled()
 */
public void setDuplicateParentStateEnabled(boolean enabled){
  setFlags(enabled ? DUPLICATE_PARENT_STATE : 0,DUPLICATE_PARENT_STATE);
}","/** 
 * <p>Enables or disables the duplication of the parent's state into this view. When duplication is enabled, this view gets its drawable state from its parent rather than from its own internal properties.</p> <p>Note: in the current implementation, setting this property to true after the view was added to a ViewGroup might have no effect at all. This property should always be used from XML or set to true before adding this view to a ViewGroup.</p> <p>Note: if this view's parent addStateFromChildren property is enabled and this property is enabled, an exception will be thrown.</p> <p>Note: if the child view uses and updates additional states which are unknown to the parent, these states should not be affected by this method.</p>
 * @param enabled True to enable duplication of the parent's drawable state, falseto disable it.
 * @see #getDrawableState()
 * @see #isDuplicateParentStateEnabled()
 */
public void setDuplicateParentStateEnabled(boolean enabled){
  setFlags(enabled ? DUPLICATE_PARENT_STATE : 0,DUPLICATE_PARENT_STATE);
}",0.9995231282784932
195649,"/** 
 * Call this to try to give focus to a specific view or to one of its descendants. This is a special variant of   {@link #requestFocus() } that will allow views that are not focuable intouch mode to request focus when they are touched.
 * @return Whether this view or one of its descendants actually took focus.
 * @see #isInTouchMode()
 */
public final boolean requestFocusFromTouch(){
  if (isInTouchMode()) {
    ViewRootImpl viewRoot=getViewRootImpl();
    if (viewRoot != null) {
      viewRoot.ensureTouchMode(false);
    }
  }
  return requestFocus(View.FOCUS_DOWN);
}","/** 
 * Call this to try to give focus to a specific view or to one of its descendants. This is a special variant of   {@link #requestFocus() } that will allow views that are not focusable intouch mode to request focus when they are touched.
 * @return Whether this view or one of its descendants actually took focus.
 * @see #isInTouchMode()
 */
public final boolean requestFocusFromTouch(){
  if (isInTouchMode()) {
    ViewRootImpl viewRoot=getViewRootImpl();
    if (viewRoot != null) {
      viewRoot.ensureTouchMode(false);
    }
  }
  return requestFocus(View.FOCUS_DOWN);
}",0.9991386735572784
195650,"/** 
 * Define whether scrollbars will fade when the view is not scrolling.
 * @param fadeScrollbars wheter to enable fading
 * @attr ref android.R.styleable#View_fadeScrollbars
 */
public void setScrollbarFadingEnabled(boolean fadeScrollbars){
  initScrollCache();
  final ScrollabilityCache scrollabilityCache=mScrollCache;
  scrollabilityCache.fadeScrollBars=fadeScrollbars;
  if (fadeScrollbars) {
    scrollabilityCache.state=ScrollabilityCache.OFF;
  }
 else {
    scrollabilityCache.state=ScrollabilityCache.ON;
  }
}","/** 
 * Define whether scrollbars will fade when the view is not scrolling.
 * @param fadeScrollbars whether to enable fading
 * @attr ref android.R.styleable#View_fadeScrollbars
 */
public void setScrollbarFadingEnabled(boolean fadeScrollbars){
  initScrollCache();
  final ScrollabilityCache scrollabilityCache=mScrollCache;
  scrollabilityCache.fadeScrollBars=fadeScrollbars;
  if (fadeScrollbars) {
    scrollabilityCache.state=ScrollabilityCache.OFF;
  }
 else {
    scrollabilityCache.state=ScrollabilityCache.ON;
  }
}",0.9990467111534796
195651,"/** 
 * Returns true if this view has focus iteself, or is the ancestor of the view that has focus.
 * @return True if this view has or contains focus, false otherwise.
 */
@ViewDebug.ExportedProperty(category=""String_Node_Str"") public boolean hasFocus(){
  return (mPrivateFlags & PFLAG_FOCUSED) != 0;
}","/** 
 * Returns true if this view has focus itself, or is the ancestor of the view that has focus.
 * @return True if this view has or contains focus, false otherwise.
 */
@ViewDebug.ExportedProperty(category=""String_Node_Str"") public boolean hasFocus(){
  return (mPrivateFlags & PFLAG_FOCUSED) != 0;
}",0.99835255354201
195652,"/** 
 * <p>Specifies the type of layer backing this view. The layer can be  {@link #LAYER_TYPE_NONE},   {@link #LAYER_TYPE_SOFTWARE} or{@link #LAYER_TYPE_HARDWARE}.</p> <p>A layer is associated with an optional   {@link android.graphics.Paint}instance that controls how the layer is composed on screen. The following properties of the paint are taken into account when composing the layer:</p> <ul> <li>  {@link android.graphics.Paint#getAlpha() Translucency (alpha)}</li> <li>  {@link android.graphics.Paint#getXfermode() Blending mode}</li> <li>  {@link android.graphics.Paint#getColorFilter() Color filter}</li> </ul> <p>If this view has an alpha value set to < 1.0 by calling  {@link #setAlpha(float)}, the alpha value of the layer's paint is superceded by this view's alpha value.</p> <p>Refer to the documentation of   {@link #LAYER_TYPE_NONE},  {@link #LAYER_TYPE_SOFTWARE} and {@link #LAYER_TYPE_HARDWARE}for more information on when and how to use layers.</p>
 * @param layerType The type of layer to use with this view, must be one of{@link #LAYER_TYPE_NONE},   {@link #LAYER_TYPE_SOFTWARE} or{@link #LAYER_TYPE_HARDWARE}
 * @param paint The paint used to compose the layer. This argument is optionaland can be null. It is ignored when the layer type is {@link #LAYER_TYPE_NONE}
 * @see #getLayerType()
 * @see #LAYER_TYPE_NONE
 * @see #LAYER_TYPE_SOFTWARE
 * @see #LAYER_TYPE_HARDWARE
 * @see #setAlpha(float)
 * @attr ref android.R.styleable#View_layerType
 */
public void setLayerType(int layerType,Paint paint){
  if (layerType < LAYER_TYPE_NONE || layerType > LAYER_TYPE_HARDWARE) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  boolean typeChanged=mRenderNode.setLayerType(layerType);
  if (!typeChanged) {
    setLayerPaint(paint);
    return;
  }
  if (mLayerType == LAYER_TYPE_SOFTWARE) {
    destroyDrawingCache();
  }
  mLayerType=layerType;
  final boolean layerDisabled=(mLayerType == LAYER_TYPE_NONE);
  mLayerPaint=layerDisabled ? null : (paint == null ? new Paint() : paint);
  mRenderNode.setLayerPaint(mLayerPaint);
  invalidateParentCaches();
  invalidate(true);
}","/** 
 * <p>Specifies the type of layer backing this view. The layer can be  {@link #LAYER_TYPE_NONE},   {@link #LAYER_TYPE_SOFTWARE} or{@link #LAYER_TYPE_HARDWARE}.</p> <p>A layer is associated with an optional   {@link android.graphics.Paint}instance that controls how the layer is composed on screen. The following properties of the paint are taken into account when composing the layer:</p> <ul> <li>  {@link android.graphics.Paint#getAlpha() Translucency (alpha)}</li> <li>  {@link android.graphics.Paint#getXfermode() Blending mode}</li> <li>  {@link android.graphics.Paint#getColorFilter() Color filter}</li> </ul> <p>If this view has an alpha value set to < 1.0 by calling  {@link #setAlpha(float)}, the alpha value of the layer's paint is superseded by this view's alpha value.</p> <p>Refer to the documentation of   {@link #LAYER_TYPE_NONE},  {@link #LAYER_TYPE_SOFTWARE} and {@link #LAYER_TYPE_HARDWARE}for more information on when and how to use layers.</p>
 * @param layerType The type of layer to use with this view, must be one of{@link #LAYER_TYPE_NONE},   {@link #LAYER_TYPE_SOFTWARE} or{@link #LAYER_TYPE_HARDWARE}
 * @param paint The paint used to compose the layer. This argument is optionaland can be null. It is ignored when the layer type is {@link #LAYER_TYPE_NONE}
 * @see #getLayerType()
 * @see #LAYER_TYPE_NONE
 * @see #LAYER_TYPE_SOFTWARE
 * @see #LAYER_TYPE_HARDWARE
 * @see #setAlpha(float)
 * @attr ref android.R.styleable#View_layerType
 */
public void setLayerType(int layerType,Paint paint){
  if (layerType < LAYER_TYPE_NONE || layerType > LAYER_TYPE_HARDWARE) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  boolean typeChanged=mRenderNode.setLayerType(layerType);
  if (!typeChanged) {
    setLayerPaint(paint);
    return;
  }
  if (mLayerType == LAYER_TYPE_SOFTWARE) {
    destroyDrawingCache();
  }
  mLayerType=layerType;
  final boolean layerDisabled=(mLayerType == LAYER_TYPE_NONE);
  mLayerPaint=layerDisabled ? null : (paint == null ? new Paint() : paint);
  mRenderNode.setLayerPaint(mLayerPaint);
  invalidateParentCaches();
  invalidate(true);
}",0.99953095684803
195653,"/** 
 * Called when the current configuration of the resources being used by the application have changed.  You can use this to decide when to reload resources that can changed based on orientation and other configuration characterstics.  You only need to use this if you are not relying on the normal   {@link android.app.Activity} mechanism ofrecreating the activity instance upon a configuration change.
 * @param newConfig The new resource configuration.
 */
protected void onConfigurationChanged(Configuration newConfig){
}","/** 
 * Called when the current configuration of the resources being used by the application have changed.  You can use this to decide when to reload resources that can changed based on orientation and other configuration characteristics.  You only need to use this if you are not relying on the normal   {@link android.app.Activity} mechanism ofrecreating the activity instance upon a configuration change.
 * @param newConfig The new resource configuration.
 */
protected void onConfigurationChanged(Configuration newConfig){
}",0.999053926206244
195654,"/** 
 * <p> Measure the view and its content to determine the measured width and the measured height. This method is invoked by   {@link #measure(int,int)} andshould be overriden by subclasses to provide accurate and efficient measurement of their contents. </p> <p> <strong>CONTRACT:</strong> When overriding this method, you <em>must</em> call  {@link #setMeasuredDimension(int,int)} to store themeasured width and height of this view. Failure to do so will trigger an <code>IllegalStateException</code>, thrown by {@link #measure(int,int)}. Calling the superclass'  {@link #onMeasure(int,int)} is a valid use.</p> <p> The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override  {@link #onMeasure(int,int)} to provide better measurements oftheir content. </p> <p> If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width ( {@link #getSuggestedMinimumHeight()} and{@link #getSuggestedMinimumWidth()}). </p>
 * @param widthMeasureSpec horizontal space requirements as imposed by the parent.The requirements are encoded with {@link android.view.View.MeasureSpec}.
 * @param heightMeasureSpec vertical space requirements as imposed by the parent.The requirements are encoded with {@link android.view.View.MeasureSpec}.
 * @see #getMeasuredWidth()
 * @see #getMeasuredHeight()
 * @see #setMeasuredDimension(int,int)
 * @see #getSuggestedMinimumHeight()
 * @see #getSuggestedMinimumWidth()
 * @see android.view.View.MeasureSpec#getMode(int)
 * @see android.view.View.MeasureSpec#getSize(int)
 */
protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec),getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec));
}","/** 
 * <p> Measure the view and its content to determine the measured width and the measured height. This method is invoked by   {@link #measure(int,int)} andshould be overridden by subclasses to provide accurate and efficient measurement of their contents. </p> <p> <strong>CONTRACT:</strong> When overriding this method, you <em>must</em> call  {@link #setMeasuredDimension(int,int)} to store themeasured width and height of this view. Failure to do so will trigger an <code>IllegalStateException</code>, thrown by {@link #measure(int,int)}. Calling the superclass'  {@link #onMeasure(int,int)} is a valid use.</p> <p> The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override  {@link #onMeasure(int,int)} to provide better measurements oftheir content. </p> <p> If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width ( {@link #getSuggestedMinimumHeight()} and{@link #getSuggestedMinimumWidth()}). </p>
 * @param widthMeasureSpec horizontal space requirements as imposed by the parent.The requirements are encoded with {@link android.view.View.MeasureSpec}.
 * @param heightMeasureSpec vertical space requirements as imposed by the parent.The requirements are encoded with {@link android.view.View.MeasureSpec}.
 * @see #getMeasuredWidth()
 * @see #getMeasuredHeight()
 * @see #setMeasuredDimension(int,int)
 * @see #getSuggestedMinimumHeight()
 * @see #getSuggestedMinimumWidth()
 * @see android.view.View.MeasureSpec#getMode(int)
 * @see android.view.View.MeasureSpec#getSize(int)
 */
protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec),getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec));
}",0.9997376016793492
195655,"/** 
 * <p> Trigger the scrollbars to draw. When invoked this method starts an animation to fade the scrollbars out after a fixed delay. If a subclass provides animated scrolling, the start delay should equal the duration of the scrolling animation. </p> <p> The animation starts only if at least one of the scrollbars is enabled, as specified by   {@link #isHorizontalScrollBarEnabled()} and{@link #isVerticalScrollBarEnabled()}. When the animation is started, this method returns true, and false otherwise. If the animation is started, this method calls   {@link #invalidate()} if the invalidate parameteris set to true; in that case the caller should not call  {@link #invalidate()}. </p> <p> This method should be invoked everytime a subclass directly updates the scroll parameters. </p>
 * @param startDelay the delay, in milliseconds, after which the animationshould start; when the delay is 0, the animation starts immediately
 * @param invalidate Wheter this method should call invalidate
 * @return true if the animation is played, false otherwise
 * @see #scrollBy(int,int)
 * @see #scrollTo(int,int)
 * @see #isHorizontalScrollBarEnabled()
 * @see #isVerticalScrollBarEnabled()
 * @see #setHorizontalScrollBarEnabled(boolean)
 * @see #setVerticalScrollBarEnabled(boolean)
 */
protected boolean awakenScrollBars(int startDelay,boolean invalidate){
  final ScrollabilityCache scrollCache=mScrollCache;
  if (scrollCache == null || !scrollCache.fadeScrollBars) {
    return false;
  }
  if (scrollCache.scrollBar == null) {
    scrollCache.scrollBar=new ScrollBarDrawable();
  }
  if (isHorizontalScrollBarEnabled() || isVerticalScrollBarEnabled()) {
    if (invalidate) {
      postInvalidateOnAnimation();
    }
    if (scrollCache.state == ScrollabilityCache.OFF) {
      final int KEY_REPEAT_FIRST_DELAY=750;
      startDelay=Math.max(KEY_REPEAT_FIRST_DELAY,startDelay);
    }
    long fadeStartTime=AnimationUtils.currentAnimationTimeMillis() + startDelay;
    scrollCache.fadeStartTime=fadeStartTime;
    scrollCache.state=ScrollabilityCache.ON;
    if (mAttachInfo != null) {
      mAttachInfo.mHandler.removeCallbacks(scrollCache);
      mAttachInfo.mHandler.postAtTime(scrollCache,fadeStartTime);
    }
    return true;
  }
  return false;
}","/** 
 * <p> Trigger the scrollbars to draw. When invoked this method starts an animation to fade the scrollbars out after a fixed delay. If a subclass provides animated scrolling, the start delay should equal the duration of the scrolling animation. </p> <p> The animation starts only if at least one of the scrollbars is enabled, as specified by   {@link #isHorizontalScrollBarEnabled()} and{@link #isVerticalScrollBarEnabled()}. When the animation is started, this method returns true, and false otherwise. If the animation is started, this method calls   {@link #invalidate()} if the invalidate parameteris set to true; in that case the caller should not call  {@link #invalidate()}. </p> <p> This method should be invoked every time a subclass directly updates the scroll parameters. </p>
 * @param startDelay the delay, in milliseconds, after which the animationshould start; when the delay is 0, the animation starts immediately
 * @param invalidate Whether this method should call invalidate
 * @return true if the animation is played, false otherwise
 * @see #scrollBy(int,int)
 * @see #scrollTo(int,int)
 * @see #isHorizontalScrollBarEnabled()
 * @see #isVerticalScrollBarEnabled()
 * @see #setHorizontalScrollBarEnabled(boolean)
 * @see #setVerticalScrollBarEnabled(boolean)
 */
protected boolean awakenScrollBars(int startDelay,boolean invalidate){
  final ScrollabilityCache scrollCache=mScrollCache;
  if (scrollCache == null || !scrollCache.fadeScrollBars) {
    return false;
  }
  if (scrollCache.scrollBar == null) {
    scrollCache.scrollBar=new ScrollBarDrawable();
  }
  if (isHorizontalScrollBarEnabled() || isVerticalScrollBarEnabled()) {
    if (invalidate) {
      postInvalidateOnAnimation();
    }
    if (scrollCache.state == ScrollabilityCache.OFF) {
      final int KEY_REPEAT_FIRST_DELAY=750;
      startDelay=Math.max(KEY_REPEAT_FIRST_DELAY,startDelay);
    }
    long fadeStartTime=AnimationUtils.currentAnimationTimeMillis() + startDelay;
    scrollCache.fadeStartTime=fadeStartTime;
    scrollCache.state=ScrollabilityCache.ON;
    if (mAttachInfo != null) {
      mAttachInfo.mHandler.removeCallbacks(scrollCache);
      mAttachInfo.mHandler.postAtTime(scrollCache,fadeStartTime);
    }
    return true;
  }
  return false;
}",0.9995573262505534
195656,"/** 
 * Updates the   {@link Paint} object used with the current layer (used only if the currentlayer type is not set to  {@link #LAYER_TYPE_NONE}). Changed properties of the Paint provided to   {@link #setLayerType(int,android.graphics.Paint)} will be used the next timethe View is redrawn, but  {@link #setLayerPaint(android.graphics.Paint)} must be called toensure that the view gets redrawn immediately. <p>A layer is associated with an optional  {@link android.graphics.Paint}instance that controls how the layer is composed on screen. The following properties of the paint are taken into account when composing the layer:</p> <ul> <li>  {@link android.graphics.Paint#getAlpha() Translucency (alpha)}</li> <li>  {@link android.graphics.Paint#getXfermode() Blending mode}</li> <li>  {@link android.graphics.Paint#getColorFilter() Color filter}</li> </ul> <p>If this view has an alpha value set to < 1.0 by calling   {@link #setAlpha(float)}, the alpha value of the layer's paint is superceded by this view's alpha value.</p>
 * @param paint The paint used to compose the layer. This argument is optionaland can be null. It is ignored when the layer type is {@link #LAYER_TYPE_NONE}
 * @see #setLayerType(int,android.graphics.Paint)
 */
public void setLayerPaint(Paint paint){
  int layerType=getLayerType();
  if (layerType != LAYER_TYPE_NONE) {
    mLayerPaint=paint == null ? new Paint() : paint;
    if (layerType == LAYER_TYPE_HARDWARE) {
      if (mRenderNode.setLayerPaint(mLayerPaint)) {
        invalidateViewProperty(false,false);
      }
    }
 else {
      invalidate();
    }
  }
}","/** 
 * Updates the   {@link Paint} object used with the current layer (used only if the currentlayer type is not set to  {@link #LAYER_TYPE_NONE}). Changed properties of the Paint provided to   {@link #setLayerType(int,android.graphics.Paint)} will be used the next timethe View is redrawn, but  {@link #setLayerPaint(android.graphics.Paint)} must be called toensure that the view gets redrawn immediately. <p>A layer is associated with an optional  {@link android.graphics.Paint}instance that controls how the layer is composed on screen. The following properties of the paint are taken into account when composing the layer:</p> <ul> <li>  {@link android.graphics.Paint#getAlpha() Translucency (alpha)}</li> <li>  {@link android.graphics.Paint#getXfermode() Blending mode}</li> <li>  {@link android.graphics.Paint#getColorFilter() Color filter}</li> </ul> <p>If this view has an alpha value set to < 1.0 by calling   {@link #setAlpha(float)}, the alpha value of the layer's paint is superseded by this view's alpha value.</p>
 * @param paint The paint used to compose the layer. This argument is optionaland can be null. It is ignored when the layer type is {@link #LAYER_TYPE_NONE}
 * @see #setLayerType(int,android.graphics.Paint)
 */
public void setLayerPaint(Paint paint){
  int layerType=getLayerType();
  if (layerType != LAYER_TYPE_NONE) {
    mLayerPaint=paint == null ? new Paint() : paint;
    if (layerType == LAYER_TYPE_HARDWARE) {
      if (mRenderNode.setLayerPaint(mLayerPaint)) {
        invalidateViewProperty(false,false);
      }
    }
 else {
      invalidate();
    }
  }
}",0.9993738259236068
195657,"/** 
 * Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. This method adds all focusable views regardless if we are in touch mode or only views focusable in touch mode if we are in touch mode or only views that can take accessibility focus if accessibility is enabeld depending on the focusable mode paramater.
 * @param views Focusable views found so far or null if all we are interested isthe number of focusables.
 * @param direction The direction of the focus.
 * @param focusableMode The type of focusables to be added.
 * @see #FOCUSABLES_ALL
 * @see #FOCUSABLES_TOUCH_MODE
 */
public void addFocusables(ArrayList<View> views,@FocusDirection int direction,@FocusableMode int focusableMode){
  if (views == null) {
    return;
  }
  if (!isFocusable()) {
    return;
  }
  if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE && isInTouchMode() && !isFocusableInTouchMode()) {
    return;
  }
  views.add(this);
}","/** 
 * Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. This method adds all focusable views regardless if we are in touch mode or only views focusable in touch mode if we are in touch mode or only views that can take accessibility focus if accessibility is enabled depending on the focusable mode parameter.
 * @param views Focusable views found so far or null if all we are interested isthe number of focusables.
 * @param direction The direction of the focus.
 * @param focusableMode The type of focusables to be added.
 * @see #FOCUSABLES_ALL
 * @see #FOCUSABLES_TOUCH_MODE
 */
public void addFocusables(ArrayList<View> views,@FocusDirection int direction,@FocusableMode int focusableMode){
  if (views == null) {
    return;
  }
  if (!isFocusable()) {
    return;
  }
  if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE && isInTouchMode() && !isFocusableInTouchMode()) {
    return;
  }
  views.add(this);
}",0.997029702970297
195658,"/** 
 * Return if the padding as been set thru relative values  {@link #setPaddingRelative(int,int,int,int)} or thru
 * @attr ref android.R.styleable#View_paddingStart or
 * @attr ref android.R.styleable#View_paddingEnd
 * @return true if the padding is relative or false if it is not.
 */
public boolean isPaddingRelative(){
  return (mUserPaddingStart != UNDEFINED_PADDING || mUserPaddingEnd != UNDEFINED_PADDING);
}","/** 
 * Return if the padding has been set through relative values  {@link #setPaddingRelative(int,int,int,int)} or through
 * @attr ref android.R.styleable#View_paddingStart or
 * @attr ref android.R.styleable#View_paddingEnd
 * @return true if the padding is relative or false if it is not.
 */
public boolean isPaddingRelative(){
  return (mUserPaddingStart != UNDEFINED_PADDING || mUserPaddingEnd != UNDEFINED_PADDING);
}",0.9869513641755636
195659,"/** 
 * This is a framework-internal mirror of onDetachedFromWindow() that's called after onDetachedFromWindow(). If you override this you *MUST* call super.onDetachedFromWindowInternal()! The super method should be called at the end of the overriden method to ensure subclasses are destroyed first
 * @hide
 */
protected void onDetachedFromWindowInternal(){
  mPrivateFlags&=~PFLAG_CANCEL_NEXT_UP_EVENT;
  mPrivateFlags3&=~PFLAG3_IS_LAID_OUT;
  removeUnsetPressCallback();
  removeLongPressCallback();
  removePerformClickCallback();
  removeSendViewScrolledAccessibilityEventCallback();
  stopNestedScroll();
  jumpDrawablesToCurrentState();
  destroyDrawingCache();
  cleanupDraw();
  mCurrentAnimation=null;
}","/** 
 * This is a framework-internal mirror of onDetachedFromWindow() that's called after onDetachedFromWindow(). If you override this you *MUST* call super.onDetachedFromWindowInternal()! The super method should be called at the end of the overridden method to ensure subclasses are destroyed first
 * @hide
 */
protected void onDetachedFromWindowInternal(){
  mPrivateFlags&=~PFLAG_CANCEL_NEXT_UP_EVENT;
  mPrivateFlags3&=~PFLAG3_IS_LAID_OUT;
  removeUnsetPressCallback();
  removeLongPressCallback();
  removePerformClickCallback();
  removeSendViewScrolledAccessibilityEventCallback();
  stopNestedScroll();
  jumpDrawablesToCurrentState();
  destroyDrawingCache();
  cleanupDraw();
  mCurrentAnimation=null;
}",0.9992992291520671
195660,"private void positionSelector(int position,View sel,boolean manageHotspot,float x,float y){
  final boolean positionChanged=position != mSelectorPosition;
  if (position != INVALID_POSITION) {
    mSelectorPosition=position;
  }
  final Rect selectorRect=mSelectorRect;
  selectorRect.set(sel.getLeft(),sel.getTop(),sel.getRight(),sel.getBottom());
  if (sel instanceof SelectionBoundsAdjuster) {
    ((SelectionBoundsAdjuster)sel).adjustListItemSelectionBounds(selectorRect);
  }
  selectorRect.left-=mSelectionLeftPadding;
  selectorRect.top-=mSelectionTopPadding;
  selectorRect.right+=mSelectionRightPadding;
  selectorRect.bottom+=mSelectionBottomPadding;
  final Drawable selector=mSelector;
  if (selector != null) {
    if (positionChanged) {
      selector.setVisible(false,false);
      selector.setState(StateSet.NOTHING);
    }
    selector.setBounds(selectorRect);
    if (positionChanged) {
      if (getVisibility() == VISIBLE) {
        selector.setVisible(true,false);
      }
      selector.setState(getDrawableState());
    }
    if (manageHotspot) {
      selector.setHotspot(x,y);
    }
  }
  final boolean isChildViewEnabled=mIsChildViewEnabled;
  if (sel.isEnabled() != isChildViewEnabled) {
    mIsChildViewEnabled=!isChildViewEnabled;
    if (getSelectedItemPosition() != INVALID_POSITION) {
      refreshDrawableState();
    }
  }
}","private void positionSelector(int position,View sel,boolean manageHotspot,float x,float y){
  final boolean positionChanged=position != mSelectorPosition;
  if (position != INVALID_POSITION) {
    mSelectorPosition=position;
  }
  final Rect selectorRect=mSelectorRect;
  selectorRect.set(sel.getLeft(),sel.getTop(),sel.getRight(),sel.getBottom());
  if (sel instanceof SelectionBoundsAdjuster) {
    ((SelectionBoundsAdjuster)sel).adjustListItemSelectionBounds(selectorRect);
  }
  selectorRect.left-=mSelectionLeftPadding;
  selectorRect.top-=mSelectionTopPadding;
  selectorRect.right+=mSelectionRightPadding;
  selectorRect.bottom+=mSelectionBottomPadding;
  final Drawable selector=mSelector;
  if (selector != null) {
    if (positionChanged) {
      selector.setVisible(false,false);
      selector.setState(StateSet.NOTHING);
    }
    selector.setBounds(selectorRect);
    if (positionChanged) {
      if (getVisibility() == VISIBLE) {
        selector.setVisible(true,false);
      }
      updateSelectorState();
    }
    if (manageHotspot) {
      selector.setHotspot(x,y);
    }
  }
  final boolean isChildViewEnabled=mIsChildViewEnabled;
  if (sel.isEnabled() != isChildViewEnabled) {
    mIsChildViewEnabled=!isChildViewEnabled;
    if (getSelectedItemPosition() != INVALID_POSITION) {
      refreshDrawableState();
    }
  }
}",0.9792592592592592
195661,"/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating from.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the initial thumbnailof the animation.
 * @param startX The x starting location of the bitmap, relative to <var>source</var>.
 * @param startY The y starting location of the bitmap, relative to <var>source</var>.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleUpAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,listener,true);
}","/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating from.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the initial thumbnailof the animation.
 * @param startX The x starting location of the bitmap, relative to <var>source</var>.
 * @param startY The y starting location of the bitmap, relative to <var>source</var>.
 * @param handler If <var>listener</var> is non-null this must be a validHandler on which to dispatch the callback; otherwise it should be null.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleUpAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,handler,listener,true);
}",0.9347238315952106
195662,"/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating to.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the final thumbnailof the animation.
 * @param startX The x end location of the bitmap, relative to <var>source</var>.
 * @param startY The y end location of the bitmap, relative to <var>source</var>.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleDownAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,listener,false);
}","/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating to.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the final thumbnailof the animation.
 * @param startX The x end location of the bitmap, relative to <var>source</var>.
 * @param startY The y end location of the bitmap, relative to <var>source</var>.
 * @param handler If <var>listener</var> is non-null this must be a validHandler on which to dispatch the callback; otherwise it should be null.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleDownAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,handler,listener,false);
}",0.934164394234515
195663,"private static ActivityOptions makeAspectScaledThumbnailAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener,boolean scaleUp){
  ActivityOptions opts=new ActivityOptions();
  opts.mPackageName=source.getContext().getPackageName();
  opts.mAnimationType=scaleUp ? ANIM_THUMBNAIL_ASPECT_SCALE_UP : ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
  opts.mThumbnail=thumbnail;
  int[] pts=new int[2];
  source.getLocationOnScreen(pts);
  opts.mStartX=pts[0] + startX;
  opts.mStartY=pts[1] + startY;
  opts.mWidth=targetWidth;
  opts.mHeight=targetHeight;
  opts.setOnAnimationStartedListener(source.getHandler(),listener);
  return opts;
}","private static ActivityOptions makeAspectScaledThumbnailAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener,boolean scaleUp){
  ActivityOptions opts=new ActivityOptions();
  opts.mPackageName=source.getContext().getPackageName();
  opts.mAnimationType=scaleUp ? ANIM_THUMBNAIL_ASPECT_SCALE_UP : ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
  opts.mThumbnail=thumbnail;
  int[] pts=new int[2];
  source.getLocationOnScreen(pts);
  opts.mStartX=pts[0] + startX;
  opts.mStartY=pts[1] + startY;
  opts.mWidth=targetWidth;
  opts.mHeight=targetHeight;
  opts.setOnAnimationStartedListener(handler,listener);
  return opts;
}",0.9457917261055636
195664,"/** 
 * Creates the activity options for an app->recents transition.
 */
ActivityOptions getThumbnailTransitionActivityOptions(ActivityManager.RunningTaskInfo topTask,TaskStack stack,TaskStackView stackView){
  Task toTask=new Task();
  TaskViewTransform toTransform=getThumbnailTransitionTransform(stack,stackView,topTask.id,toTask);
  if (toTransform != null && toTask.key != null) {
    Rect toTaskRect=toTransform.rect;
    int toHeaderWidth=(int)(mHeaderBar.getMeasuredWidth() * toTransform.scale);
    int toHeaderHeight=(int)(mHeaderBar.getMeasuredHeight() * toTransform.scale);
    Bitmap thumbnail=Bitmap.createBitmap(toHeaderWidth,toHeaderHeight,Bitmap.Config.ARGB_8888);
    if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
      thumbnail.eraseColor(0xFFff0000);
    }
 else {
      Canvas c=new Canvas(thumbnail);
      c.scale(toTransform.scale,toTransform.scale);
      mHeaderBar.rebindToTask(toTask);
      mHeaderBar.draw(c);
      c.setBitmap(null);
    }
    mStartAnimationTriggered=false;
    return ActivityOptions.makeThumbnailAspectScaleDownAnimation(mDummyStackView,thumbnail,toTaskRect.left,toTaskRect.top,toTaskRect.width(),toTaskRect.height(),this);
  }
  return getUnknownTransitionActivityOptions();
}","/** 
 * Creates the activity options for an app->recents transition.
 */
ActivityOptions getThumbnailTransitionActivityOptions(ActivityManager.RunningTaskInfo topTask,TaskStack stack,TaskStackView stackView){
  Task toTask=new Task();
  TaskViewTransform toTransform=getThumbnailTransitionTransform(stack,stackView,topTask.id,toTask);
  if (toTransform != null && toTask.key != null) {
    Rect toTaskRect=toTransform.rect;
    int toHeaderWidth=(int)(mHeaderBar.getMeasuredWidth() * toTransform.scale);
    int toHeaderHeight=(int)(mHeaderBar.getMeasuredHeight() * toTransform.scale);
    Bitmap thumbnail=Bitmap.createBitmap(toHeaderWidth,toHeaderHeight,Bitmap.Config.ARGB_8888);
    if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
      thumbnail.eraseColor(0xFFff0000);
    }
 else {
      Canvas c=new Canvas(thumbnail);
      c.scale(toTransform.scale,toTransform.scale);
      mHeaderBar.rebindToTask(toTask);
      mHeaderBar.draw(c);
      c.setBitmap(null);
    }
    mStartAnimationTriggered=false;
    return ActivityOptions.makeThumbnailAspectScaleDownAnimation(mDummyStackView,thumbnail,toTaskRect.left,toTaskRect.top,toTaskRect.width(),toTaskRect.height(),mHandler,this);
  }
  return getUnknownTransitionActivityOptions();
}",0.9964129135113592
195665,"/** 
 * TaskStackView.TaskStackCallbacks Implementation 
 */
@Override public void onTaskViewClicked(final TaskStackView stackView,final TaskView tv,final TaskStack stack,final Task task,final boolean lockToTask){
  if (mCb != null) {
    mCb.onTaskViewClicked();
  }
  TaskViewTransform transform=new TaskViewTransform();
  View sourceView;
  int offsetX=0;
  int offsetY=0;
  float stackScroll=stackView.getScroller().getStackScroll();
  if (tv == null) {
    sourceView=stackView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
    offsetX=transform.rect.left;
    offsetY=mConfig.displayRect.height();
  }
 else {
    sourceView=tv.mThumbnailView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
  }
  final SystemServicesProxy ssp=RecentsTaskLoader.getInstance().getSystemServicesProxy();
  ActivityOptions opts=null;
  if (task.thumbnail != null && task.thumbnail.getWidth() > 0 && task.thumbnail.getHeight() > 0) {
    Bitmap b;
    if (tv != null) {
      if (tv.isFocusedTask()) {
        tv.unsetFocusedTask();
      }
      float scale=tv.getScaleX();
      int fromHeaderWidth=(int)(tv.mHeaderView.getMeasuredWidth() * scale);
      int fromHeaderHeight=(int)(tv.mHeaderView.getMeasuredHeight() * scale);
      b=Bitmap.createBitmap(fromHeaderWidth,fromHeaderHeight,Bitmap.Config.ARGB_8888);
      if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
        b.eraseColor(0xFFff0000);
      }
 else {
        Canvas c=new Canvas(b);
        c.scale(tv.getScaleX(),tv.getScaleY());
        tv.mHeaderView.draw(c);
        c.setBitmap(null);
      }
    }
 else {
      b=Bitmap.createBitmap(1,1,Bitmap.Config.ALPHA_8);
    }
    ActivityOptions.OnAnimationStartedListener animStartedListener=null;
    if (lockToTask) {
      animStartedListener=new ActivityOptions.OnAnimationStartedListener(){
        boolean mTriggered=false;
        @Override public void onAnimationStarted(){
          if (!mTriggered) {
            postDelayed(new Runnable(){
              @Override public void run(){
                mCb.onScreenPinningRequest();
              }
            }
,350);
            mTriggered=true;
          }
        }
      }
;
    }
    opts=ActivityOptions.makeThumbnailAspectScaleUpAnimation(sourceView,b,offsetX,offsetY,transform.rect.width(),transform.rect.height(),animStartedListener);
  }
  final ActivityOptions launchOpts=opts;
  final Runnable launchRunnable=new Runnable(){
    @Override public void run(){
      if (task.isActive) {
        ssp.moveTaskToFront(task.key.id,launchOpts);
      }
 else {
        if (ssp.startActivityFromRecents(getContext(),task.key.id,task.activityLabel,launchOpts)) {
          if (launchOpts == null && lockToTask) {
            mCb.onScreenPinningRequest();
          }
        }
 else {
          onTaskViewDismissed(task);
          if (mCb != null) {
            mCb.onTaskLaunchFailed();
          }
        }
      }
    }
  }
;
  if (tv == null) {
    launchRunnable.run();
  }
 else {
    if (!task.group.isFrontMostTask(task)) {
      stackView.startLaunchTaskAnimation(tv,launchRunnable,lockToTask);
    }
 else {
      stackView.startLaunchTaskAnimation(tv,null,lockToTask);
      launchRunnable.run();
    }
  }
}","/** 
 * TaskStackView.TaskStackCallbacks Implementation 
 */
@Override public void onTaskViewClicked(final TaskStackView stackView,final TaskView tv,final TaskStack stack,final Task task,final boolean lockToTask){
  if (mCb != null) {
    mCb.onTaskViewClicked();
  }
  TaskViewTransform transform=new TaskViewTransform();
  View sourceView;
  int offsetX=0;
  int offsetY=0;
  float stackScroll=stackView.getScroller().getStackScroll();
  if (tv == null) {
    sourceView=stackView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
    offsetX=transform.rect.left;
    offsetY=mConfig.displayRect.height();
  }
 else {
    sourceView=tv.mThumbnailView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
  }
  final SystemServicesProxy ssp=RecentsTaskLoader.getInstance().getSystemServicesProxy();
  ActivityOptions opts=null;
  if (task.thumbnail != null && task.thumbnail.getWidth() > 0 && task.thumbnail.getHeight() > 0) {
    Bitmap b;
    if (tv != null) {
      if (tv.isFocusedTask()) {
        tv.unsetFocusedTask();
      }
      float scale=tv.getScaleX();
      int fromHeaderWidth=(int)(tv.mHeaderView.getMeasuredWidth() * scale);
      int fromHeaderHeight=(int)(tv.mHeaderView.getMeasuredHeight() * scale);
      b=Bitmap.createBitmap(fromHeaderWidth,fromHeaderHeight,Bitmap.Config.ARGB_8888);
      if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
        b.eraseColor(0xFFff0000);
      }
 else {
        Canvas c=new Canvas(b);
        c.scale(tv.getScaleX(),tv.getScaleY());
        tv.mHeaderView.draw(c);
        c.setBitmap(null);
      }
    }
 else {
      b=Bitmap.createBitmap(1,1,Bitmap.Config.ALPHA_8);
    }
    ActivityOptions.OnAnimationStartedListener animStartedListener=null;
    if (lockToTask) {
      animStartedListener=new ActivityOptions.OnAnimationStartedListener(){
        boolean mTriggered=false;
        @Override public void onAnimationStarted(){
          if (!mTriggered) {
            postDelayed(new Runnable(){
              @Override public void run(){
                mCb.onScreenPinningRequest();
              }
            }
,350);
            mTriggered=true;
          }
        }
      }
;
    }
    opts=ActivityOptions.makeThumbnailAspectScaleUpAnimation(sourceView,b,offsetX,offsetY,transform.rect.width(),transform.rect.height(),sourceView.getHandler(),animStartedListener);
  }
  final ActivityOptions launchOpts=opts;
  final Runnable launchRunnable=new Runnable(){
    @Override public void run(){
      if (task.isActive) {
        ssp.moveTaskToFront(task.key.id,launchOpts);
      }
 else {
        if (ssp.startActivityFromRecents(getContext(),task.key.id,task.activityLabel,launchOpts)) {
          if (launchOpts == null && lockToTask) {
            mCb.onScreenPinningRequest();
          }
        }
 else {
          onTaskViewDismissed(task);
          if (mCb != null) {
            mCb.onTaskLaunchFailed();
          }
        }
      }
    }
  }
;
  if (tv == null) {
    launchRunnable.run();
  }
 else {
    if (!task.group.isFrontMostTask(task)) {
      stackView.startLaunchTaskAnimation(tv,launchRunnable,lockToTask);
    }
 else {
      stackView.startLaunchTaskAnimation(tv,null,lockToTask);
      launchRunnable.run();
    }
  }
}",0.996382273138378
195666,"/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating from.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the initial thumbnailof the animation.
 * @param startX The x starting location of the bitmap, relative to <var>source</var>.
 * @param startY The y starting location of the bitmap, relative to <var>source</var>.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleUpAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,listener,true);
}","/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating from.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the initial thumbnailof the animation.
 * @param startX The x starting location of the bitmap, relative to <var>source</var>.
 * @param startY The y starting location of the bitmap, relative to <var>source</var>.
 * @param handler If <var>listener</var> is non-null this must be a validHandler on which to dispatch the callback; otherwise it should be null.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleUpAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,handler,listener,true);
}",0.9347238315952106
195667,"/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating to.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the final thumbnailof the animation.
 * @param startX The x end location of the bitmap, relative to <var>source</var>.
 * @param startY The y end location of the bitmap, relative to <var>source</var>.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleDownAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,listener,false);
}","/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating to.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the final thumbnailof the animation.
 * @param startX The x end location of the bitmap, relative to <var>source</var>.
 * @param startY The y end location of the bitmap, relative to <var>source</var>.
 * @param handler If <var>listener</var> is non-null this must be a validHandler on which to dispatch the callback; otherwise it should be null.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleDownAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,handler,listener,false);
}",0.934164394234515
195668,"private static ActivityOptions makeAspectScaledThumbnailAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener,boolean scaleUp){
  ActivityOptions opts=new ActivityOptions();
  opts.mPackageName=source.getContext().getPackageName();
  opts.mAnimationType=scaleUp ? ANIM_THUMBNAIL_ASPECT_SCALE_UP : ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
  opts.mThumbnail=thumbnail;
  int[] pts=new int[2];
  source.getLocationOnScreen(pts);
  opts.mStartX=pts[0] + startX;
  opts.mStartY=pts[1] + startY;
  opts.mWidth=targetWidth;
  opts.mHeight=targetHeight;
  opts.setOnAnimationStartedListener(source.getHandler(),listener);
  return opts;
}","private static ActivityOptions makeAspectScaledThumbnailAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener,boolean scaleUp){
  ActivityOptions opts=new ActivityOptions();
  opts.mPackageName=source.getContext().getPackageName();
  opts.mAnimationType=scaleUp ? ANIM_THUMBNAIL_ASPECT_SCALE_UP : ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
  opts.mThumbnail=thumbnail;
  int[] pts=new int[2];
  source.getLocationOnScreen(pts);
  opts.mStartX=pts[0] + startX;
  opts.mStartY=pts[1] + startY;
  opts.mWidth=targetWidth;
  opts.mHeight=targetHeight;
  opts.setOnAnimationStartedListener(handler,listener);
  return opts;
}",0.9457917261055636
195669,"/** 
 * Creates the activity options for an app->recents transition.
 */
ActivityOptions getThumbnailTransitionActivityOptions(ActivityManager.RunningTaskInfo topTask,TaskStack stack,TaskStackView stackView){
  Task toTask=new Task();
  TaskViewTransform toTransform=getThumbnailTransitionTransform(stack,stackView,topTask.id,toTask);
  if (toTransform != null && toTask.key != null) {
    Rect toTaskRect=toTransform.rect;
    int toHeaderWidth=(int)(mHeaderBar.getMeasuredWidth() * toTransform.scale);
    int toHeaderHeight=(int)(mHeaderBar.getMeasuredHeight() * toTransform.scale);
    Bitmap thumbnail=Bitmap.createBitmap(toHeaderWidth,toHeaderHeight,Bitmap.Config.ARGB_8888);
    if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
      thumbnail.eraseColor(0xFFff0000);
    }
 else {
      Canvas c=new Canvas(thumbnail);
      c.scale(toTransform.scale,toTransform.scale);
      mHeaderBar.rebindToTask(toTask);
      mHeaderBar.draw(c);
      c.setBitmap(null);
    }
    mStartAnimationTriggered=false;
    return ActivityOptions.makeThumbnailAspectScaleDownAnimation(mDummyStackView,thumbnail,toTaskRect.left,toTaskRect.top,toTaskRect.width(),toTaskRect.height(),this);
  }
  return getUnknownTransitionActivityOptions();
}","/** 
 * Creates the activity options for an app->recents transition.
 */
ActivityOptions getThumbnailTransitionActivityOptions(ActivityManager.RunningTaskInfo topTask,TaskStack stack,TaskStackView stackView){
  Task toTask=new Task();
  TaskViewTransform toTransform=getThumbnailTransitionTransform(stack,stackView,topTask.id,toTask);
  if (toTransform != null && toTask.key != null) {
    Rect toTaskRect=toTransform.rect;
    int toHeaderWidth=(int)(mHeaderBar.getMeasuredWidth() * toTransform.scale);
    int toHeaderHeight=(int)(mHeaderBar.getMeasuredHeight() * toTransform.scale);
    Bitmap thumbnail=Bitmap.createBitmap(toHeaderWidth,toHeaderHeight,Bitmap.Config.ARGB_8888);
    if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
      thumbnail.eraseColor(0xFFff0000);
    }
 else {
      Canvas c=new Canvas(thumbnail);
      c.scale(toTransform.scale,toTransform.scale);
      mHeaderBar.rebindToTask(toTask);
      mHeaderBar.draw(c);
      c.setBitmap(null);
    }
    mStartAnimationTriggered=false;
    return ActivityOptions.makeThumbnailAspectScaleDownAnimation(mDummyStackView,thumbnail,toTaskRect.left,toTaskRect.top,toTaskRect.width(),toTaskRect.height(),mHandler,this);
  }
  return getUnknownTransitionActivityOptions();
}",0.9964129135113592
195670,"/** 
 * TaskStackView.TaskStackCallbacks Implementation 
 */
@Override public void onTaskViewClicked(final TaskStackView stackView,final TaskView tv,final TaskStack stack,final Task task,final boolean lockToTask){
  if (mCb != null) {
    mCb.onTaskViewClicked();
  }
  TaskViewTransform transform=new TaskViewTransform();
  View sourceView;
  int offsetX=0;
  int offsetY=0;
  float stackScroll=stackView.getScroller().getStackScroll();
  if (tv == null) {
    sourceView=stackView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
    offsetX=transform.rect.left;
    offsetY=mConfig.displayRect.height();
  }
 else {
    sourceView=tv.mThumbnailView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
  }
  final SystemServicesProxy ssp=RecentsTaskLoader.getInstance().getSystemServicesProxy();
  ActivityOptions opts=null;
  if (task.thumbnail != null && task.thumbnail.getWidth() > 0 && task.thumbnail.getHeight() > 0) {
    Bitmap b;
    if (tv != null) {
      if (tv.isFocusedTask()) {
        tv.unsetFocusedTask();
      }
      float scale=tv.getScaleX();
      int fromHeaderWidth=(int)(tv.mHeaderView.getMeasuredWidth() * scale);
      int fromHeaderHeight=(int)(tv.mHeaderView.getMeasuredHeight() * scale);
      b=Bitmap.createBitmap(fromHeaderWidth,fromHeaderHeight,Bitmap.Config.ARGB_8888);
      if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
        b.eraseColor(0xFFff0000);
      }
 else {
        Canvas c=new Canvas(b);
        c.scale(tv.getScaleX(),tv.getScaleY());
        tv.mHeaderView.draw(c);
        c.setBitmap(null);
      }
    }
 else {
      b=Bitmap.createBitmap(1,1,Bitmap.Config.ALPHA_8);
    }
    ActivityOptions.OnAnimationStartedListener animStartedListener=null;
    if (lockToTask) {
      animStartedListener=new ActivityOptions.OnAnimationStartedListener(){
        boolean mTriggered=false;
        @Override public void onAnimationStarted(){
          if (!mTriggered) {
            postDelayed(new Runnable(){
              @Override public void run(){
                mCb.onScreenPinningRequest();
              }
            }
,350);
            mTriggered=true;
          }
        }
      }
;
    }
    opts=ActivityOptions.makeThumbnailAspectScaleUpAnimation(sourceView,b,offsetX,offsetY,transform.rect.width(),transform.rect.height(),animStartedListener);
  }
  final ActivityOptions launchOpts=opts;
  final Runnable launchRunnable=new Runnable(){
    @Override public void run(){
      if (task.isActive) {
        ssp.moveTaskToFront(task.key.id,launchOpts);
      }
 else {
        if (ssp.startActivityFromRecents(getContext(),task.key.id,task.activityLabel,launchOpts)) {
          if (launchOpts == null && lockToTask) {
            mCb.onScreenPinningRequest();
          }
        }
 else {
          onTaskViewDismissed(task);
          if (mCb != null) {
            mCb.onTaskLaunchFailed();
          }
        }
      }
    }
  }
;
  if (tv == null) {
    launchRunnable.run();
  }
 else {
    if (!task.group.isFrontMostTask(task)) {
      stackView.startLaunchTaskAnimation(tv,launchRunnable,lockToTask);
    }
 else {
      stackView.startLaunchTaskAnimation(tv,null,lockToTask);
      launchRunnable.run();
    }
  }
}","/** 
 * TaskStackView.TaskStackCallbacks Implementation 
 */
@Override public void onTaskViewClicked(final TaskStackView stackView,final TaskView tv,final TaskStack stack,final Task task,final boolean lockToTask){
  if (mCb != null) {
    mCb.onTaskViewClicked();
  }
  TaskViewTransform transform=new TaskViewTransform();
  View sourceView;
  int offsetX=0;
  int offsetY=0;
  float stackScroll=stackView.getScroller().getStackScroll();
  if (tv == null) {
    sourceView=stackView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
    offsetX=transform.rect.left;
    offsetY=mConfig.displayRect.height();
  }
 else {
    sourceView=tv.mThumbnailView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
  }
  final SystemServicesProxy ssp=RecentsTaskLoader.getInstance().getSystemServicesProxy();
  ActivityOptions opts=null;
  if (task.thumbnail != null && task.thumbnail.getWidth() > 0 && task.thumbnail.getHeight() > 0) {
    Bitmap b;
    if (tv != null) {
      if (tv.isFocusedTask()) {
        tv.unsetFocusedTask();
      }
      float scale=tv.getScaleX();
      int fromHeaderWidth=(int)(tv.mHeaderView.getMeasuredWidth() * scale);
      int fromHeaderHeight=(int)(tv.mHeaderView.getMeasuredHeight() * scale);
      b=Bitmap.createBitmap(fromHeaderWidth,fromHeaderHeight,Bitmap.Config.ARGB_8888);
      if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
        b.eraseColor(0xFFff0000);
      }
 else {
        Canvas c=new Canvas(b);
        c.scale(tv.getScaleX(),tv.getScaleY());
        tv.mHeaderView.draw(c);
        c.setBitmap(null);
      }
    }
 else {
      b=Bitmap.createBitmap(1,1,Bitmap.Config.ALPHA_8);
    }
    ActivityOptions.OnAnimationStartedListener animStartedListener=null;
    if (lockToTask) {
      animStartedListener=new ActivityOptions.OnAnimationStartedListener(){
        boolean mTriggered=false;
        @Override public void onAnimationStarted(){
          if (!mTriggered) {
            postDelayed(new Runnable(){
              @Override public void run(){
                mCb.onScreenPinningRequest();
              }
            }
,350);
            mTriggered=true;
          }
        }
      }
;
    }
    opts=ActivityOptions.makeThumbnailAspectScaleUpAnimation(sourceView,b,offsetX,offsetY,transform.rect.width(),transform.rect.height(),sourceView.getHandler(),animStartedListener);
  }
  final ActivityOptions launchOpts=opts;
  final Runnable launchRunnable=new Runnable(){
    @Override public void run(){
      if (task.isActive) {
        ssp.moveTaskToFront(task.key.id,launchOpts);
      }
 else {
        if (ssp.startActivityFromRecents(getContext(),task.key.id,task.activityLabel,launchOpts)) {
          if (launchOpts == null && lockToTask) {
            mCb.onScreenPinningRequest();
          }
        }
 else {
          onTaskViewDismissed(task);
          if (mCb != null) {
            mCb.onTaskLaunchFailed();
          }
        }
      }
    }
  }
;
  if (tv == null) {
    launchRunnable.run();
  }
 else {
    if (!task.group.isFrontMostTask(task)) {
      stackView.startLaunchTaskAnimation(tv,launchRunnable,lockToTask);
    }
 else {
      stackView.startLaunchTaskAnimation(tv,null,lockToTask);
      launchRunnable.run();
    }
  }
}",0.996382273138378
195671,"/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating from.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the initial thumbnailof the animation.
 * @param startX The x starting location of the bitmap, relative to <var>source</var>.
 * @param startY The y starting location of the bitmap, relative to <var>source</var>.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleUpAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,listener,true);
}","/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating from.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the initial thumbnailof the animation.
 * @param startX The x starting location of the bitmap, relative to <var>source</var>.
 * @param startY The y starting location of the bitmap, relative to <var>source</var>.
 * @param handler If <var>listener</var> is non-null this must be a validHandler on which to dispatch the callback; otherwise it should be null.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleUpAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,handler,listener,true);
}",0.9347238315952106
195672,"/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating to.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the final thumbnailof the animation.
 * @param startX The x end location of the bitmap, relative to <var>source</var>.
 * @param startY The y end location of the bitmap, relative to <var>source</var>.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleDownAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,listener,false);
}","/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating to.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the final thumbnailof the animation.
 * @param startX The x end location of the bitmap, relative to <var>source</var>.
 * @param startY The y end location of the bitmap, relative to <var>source</var>.
 * @param handler If <var>listener</var> is non-null this must be a validHandler on which to dispatch the callback; otherwise it should be null.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleDownAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,handler,listener,false);
}",0.934164394234515
195673,"private static ActivityOptions makeAspectScaledThumbnailAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener,boolean scaleUp){
  ActivityOptions opts=new ActivityOptions();
  opts.mPackageName=source.getContext().getPackageName();
  opts.mAnimationType=scaleUp ? ANIM_THUMBNAIL_ASPECT_SCALE_UP : ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
  opts.mThumbnail=thumbnail;
  int[] pts=new int[2];
  source.getLocationOnScreen(pts);
  opts.mStartX=pts[0] + startX;
  opts.mStartY=pts[1] + startY;
  opts.mWidth=targetWidth;
  opts.mHeight=targetHeight;
  opts.setOnAnimationStartedListener(source.getHandler(),listener);
  return opts;
}","private static ActivityOptions makeAspectScaledThumbnailAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener,boolean scaleUp){
  ActivityOptions opts=new ActivityOptions();
  opts.mPackageName=source.getContext().getPackageName();
  opts.mAnimationType=scaleUp ? ANIM_THUMBNAIL_ASPECT_SCALE_UP : ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
  opts.mThumbnail=thumbnail;
  int[] pts=new int[2];
  source.getLocationOnScreen(pts);
  opts.mStartX=pts[0] + startX;
  opts.mStartY=pts[1] + startY;
  opts.mWidth=targetWidth;
  opts.mHeight=targetHeight;
  opts.setOnAnimationStartedListener(handler,listener);
  return opts;
}",0.9457917261055636
195674,"/** 
 * Creates the activity options for an app->recents transition.
 */
ActivityOptions getThumbnailTransitionActivityOptions(ActivityManager.RunningTaskInfo topTask,TaskStack stack,TaskStackView stackView){
  Task toTask=new Task();
  TaskViewTransform toTransform=getThumbnailTransitionTransform(stack,stackView,topTask.id,toTask);
  if (toTransform != null && toTask.key != null) {
    Rect toTaskRect=toTransform.rect;
    int toHeaderWidth=(int)(mHeaderBar.getMeasuredWidth() * toTransform.scale);
    int toHeaderHeight=(int)(mHeaderBar.getMeasuredHeight() * toTransform.scale);
    Bitmap thumbnail=Bitmap.createBitmap(toHeaderWidth,toHeaderHeight,Bitmap.Config.ARGB_8888);
    if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
      thumbnail.eraseColor(0xFFff0000);
    }
 else {
      Canvas c=new Canvas(thumbnail);
      c.scale(toTransform.scale,toTransform.scale);
      mHeaderBar.rebindToTask(toTask);
      mHeaderBar.draw(c);
      c.setBitmap(null);
    }
    mStartAnimationTriggered=false;
    return ActivityOptions.makeThumbnailAspectScaleDownAnimation(mDummyStackView,thumbnail,toTaskRect.left,toTaskRect.top,toTaskRect.width(),toTaskRect.height(),this);
  }
  return getUnknownTransitionActivityOptions();
}","/** 
 * Creates the activity options for an app->recents transition.
 */
ActivityOptions getThumbnailTransitionActivityOptions(ActivityManager.RunningTaskInfo topTask,TaskStack stack,TaskStackView stackView){
  Task toTask=new Task();
  TaskViewTransform toTransform=getThumbnailTransitionTransform(stack,stackView,topTask.id,toTask);
  if (toTransform != null && toTask.key != null) {
    Rect toTaskRect=toTransform.rect;
    int toHeaderWidth=(int)(mHeaderBar.getMeasuredWidth() * toTransform.scale);
    int toHeaderHeight=(int)(mHeaderBar.getMeasuredHeight() * toTransform.scale);
    Bitmap thumbnail=Bitmap.createBitmap(toHeaderWidth,toHeaderHeight,Bitmap.Config.ARGB_8888);
    if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
      thumbnail.eraseColor(0xFFff0000);
    }
 else {
      Canvas c=new Canvas(thumbnail);
      c.scale(toTransform.scale,toTransform.scale);
      mHeaderBar.rebindToTask(toTask);
      mHeaderBar.draw(c);
      c.setBitmap(null);
    }
    mStartAnimationTriggered=false;
    return ActivityOptions.makeThumbnailAspectScaleDownAnimation(mDummyStackView,thumbnail,toTaskRect.left,toTaskRect.top,toTaskRect.width(),toTaskRect.height(),mHandler,this);
  }
  return getUnknownTransitionActivityOptions();
}",0.9964129135113592
195675,"/** 
 * TaskStackView.TaskStackCallbacks Implementation 
 */
@Override public void onTaskViewClicked(final TaskStackView stackView,final TaskView tv,final TaskStack stack,final Task task,final boolean lockToTask){
  if (mCb != null) {
    mCb.onTaskViewClicked();
  }
  TaskViewTransform transform=new TaskViewTransform();
  View sourceView;
  int offsetX=0;
  int offsetY=0;
  float stackScroll=stackView.getScroller().getStackScroll();
  if (tv == null) {
    sourceView=stackView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
    offsetX=transform.rect.left;
    offsetY=mConfig.displayRect.height();
  }
 else {
    sourceView=tv.mThumbnailView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
  }
  final SystemServicesProxy ssp=RecentsTaskLoader.getInstance().getSystemServicesProxy();
  ActivityOptions opts=null;
  if (task.thumbnail != null && task.thumbnail.getWidth() > 0 && task.thumbnail.getHeight() > 0) {
    Bitmap b;
    if (tv != null) {
      if (tv.isFocusedTask()) {
        tv.unsetFocusedTask();
      }
      float scale=tv.getScaleX();
      int fromHeaderWidth=(int)(tv.mHeaderView.getMeasuredWidth() * scale);
      int fromHeaderHeight=(int)(tv.mHeaderView.getMeasuredHeight() * scale);
      b=Bitmap.createBitmap(fromHeaderWidth,fromHeaderHeight,Bitmap.Config.ARGB_8888);
      if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
        b.eraseColor(0xFFff0000);
      }
 else {
        Canvas c=new Canvas(b);
        c.scale(tv.getScaleX(),tv.getScaleY());
        tv.mHeaderView.draw(c);
        c.setBitmap(null);
      }
    }
 else {
      b=Bitmap.createBitmap(1,1,Bitmap.Config.ALPHA_8);
    }
    ActivityOptions.OnAnimationStartedListener animStartedListener=null;
    if (lockToTask) {
      animStartedListener=new ActivityOptions.OnAnimationStartedListener(){
        boolean mTriggered=false;
        @Override public void onAnimationStarted(){
          if (!mTriggered) {
            postDelayed(new Runnable(){
              @Override public void run(){
                mCb.onScreenPinningRequest();
              }
            }
,350);
            mTriggered=true;
          }
        }
      }
;
    }
    opts=ActivityOptions.makeThumbnailAspectScaleUpAnimation(sourceView,b,offsetX,offsetY,transform.rect.width(),transform.rect.height(),animStartedListener);
  }
  final ActivityOptions launchOpts=opts;
  final Runnable launchRunnable=new Runnable(){
    @Override public void run(){
      if (task.isActive) {
        ssp.moveTaskToFront(task.key.id,launchOpts);
      }
 else {
        if (ssp.startActivityFromRecents(getContext(),task.key.id,task.activityLabel,launchOpts)) {
          if (launchOpts == null && lockToTask) {
            mCb.onScreenPinningRequest();
          }
        }
 else {
          onTaskViewDismissed(task);
          if (mCb != null) {
            mCb.onTaskLaunchFailed();
          }
        }
      }
    }
  }
;
  if (tv == null) {
    launchRunnable.run();
  }
 else {
    if (!task.group.isFrontMostTask(task)) {
      stackView.startLaunchTaskAnimation(tv,launchRunnable,lockToTask);
    }
 else {
      stackView.startLaunchTaskAnimation(tv,null,lockToTask);
      launchRunnable.run();
    }
  }
}","/** 
 * TaskStackView.TaskStackCallbacks Implementation 
 */
@Override public void onTaskViewClicked(final TaskStackView stackView,final TaskView tv,final TaskStack stack,final Task task,final boolean lockToTask){
  if (mCb != null) {
    mCb.onTaskViewClicked();
  }
  TaskViewTransform transform=new TaskViewTransform();
  View sourceView;
  int offsetX=0;
  int offsetY=0;
  float stackScroll=stackView.getScroller().getStackScroll();
  if (tv == null) {
    sourceView=stackView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
    offsetX=transform.rect.left;
    offsetY=mConfig.displayRect.height();
  }
 else {
    sourceView=tv.mThumbnailView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
  }
  final SystemServicesProxy ssp=RecentsTaskLoader.getInstance().getSystemServicesProxy();
  ActivityOptions opts=null;
  if (task.thumbnail != null && task.thumbnail.getWidth() > 0 && task.thumbnail.getHeight() > 0) {
    Bitmap b;
    if (tv != null) {
      if (tv.isFocusedTask()) {
        tv.unsetFocusedTask();
      }
      float scale=tv.getScaleX();
      int fromHeaderWidth=(int)(tv.mHeaderView.getMeasuredWidth() * scale);
      int fromHeaderHeight=(int)(tv.mHeaderView.getMeasuredHeight() * scale);
      b=Bitmap.createBitmap(fromHeaderWidth,fromHeaderHeight,Bitmap.Config.ARGB_8888);
      if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
        b.eraseColor(0xFFff0000);
      }
 else {
        Canvas c=new Canvas(b);
        c.scale(tv.getScaleX(),tv.getScaleY());
        tv.mHeaderView.draw(c);
        c.setBitmap(null);
      }
    }
 else {
      b=Bitmap.createBitmap(1,1,Bitmap.Config.ALPHA_8);
    }
    ActivityOptions.OnAnimationStartedListener animStartedListener=null;
    if (lockToTask) {
      animStartedListener=new ActivityOptions.OnAnimationStartedListener(){
        boolean mTriggered=false;
        @Override public void onAnimationStarted(){
          if (!mTriggered) {
            postDelayed(new Runnable(){
              @Override public void run(){
                mCb.onScreenPinningRequest();
              }
            }
,350);
            mTriggered=true;
          }
        }
      }
;
    }
    opts=ActivityOptions.makeThumbnailAspectScaleUpAnimation(sourceView,b,offsetX,offsetY,transform.rect.width(),transform.rect.height(),sourceView.getHandler(),animStartedListener);
  }
  final ActivityOptions launchOpts=opts;
  final Runnable launchRunnable=new Runnable(){
    @Override public void run(){
      if (task.isActive) {
        ssp.moveTaskToFront(task.key.id,launchOpts);
      }
 else {
        if (ssp.startActivityFromRecents(getContext(),task.key.id,task.activityLabel,launchOpts)) {
          if (launchOpts == null && lockToTask) {
            mCb.onScreenPinningRequest();
          }
        }
 else {
          onTaskViewDismissed(task);
          if (mCb != null) {
            mCb.onTaskLaunchFailed();
          }
        }
      }
    }
  }
;
  if (tv == null) {
    launchRunnable.run();
  }
 else {
    if (!task.group.isFrontMostTask(task)) {
      stackView.startLaunchTaskAnimation(tv,launchRunnable,lockToTask);
    }
 else {
      stackView.startLaunchTaskAnimation(tv,null,lockToTask);
      launchRunnable.run();
    }
  }
}",0.996382273138378
195676,"/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating from.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the initial thumbnailof the animation.
 * @param startX The x starting location of the bitmap, relative to <var>source</var>.
 * @param startY The y starting location of the bitmap, relative to <var>source</var>.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleUpAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,listener,true);
}","/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating from.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the initial thumbnailof the animation.
 * @param startX The x starting location of the bitmap, relative to <var>source</var>.
 * @param startY The y starting location of the bitmap, relative to <var>source</var>.
 * @param handler If <var>listener</var> is non-null this must be a validHandler on which to dispatch the callback; otherwise it should be null.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleUpAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,handler,listener,true);
}",0.9347238315952106
195677,"/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating to.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the final thumbnailof the animation.
 * @param startX The x end location of the bitmap, relative to <var>source</var>.
 * @param startY The y end location of the bitmap, relative to <var>source</var>.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleDownAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,listener,false);
}","/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating to.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the final thumbnailof the animation.
 * @param startX The x end location of the bitmap, relative to <var>source</var>.
 * @param startY The y end location of the bitmap, relative to <var>source</var>.
 * @param handler If <var>listener</var> is non-null this must be a validHandler on which to dispatch the callback; otherwise it should be null.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleDownAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,handler,listener,false);
}",0.934164394234515
195678,"private static ActivityOptions makeAspectScaledThumbnailAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener,boolean scaleUp){
  ActivityOptions opts=new ActivityOptions();
  opts.mPackageName=source.getContext().getPackageName();
  opts.mAnimationType=scaleUp ? ANIM_THUMBNAIL_ASPECT_SCALE_UP : ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
  opts.mThumbnail=thumbnail;
  int[] pts=new int[2];
  source.getLocationOnScreen(pts);
  opts.mStartX=pts[0] + startX;
  opts.mStartY=pts[1] + startY;
  opts.mWidth=targetWidth;
  opts.mHeight=targetHeight;
  opts.setOnAnimationStartedListener(source.getHandler(),listener);
  return opts;
}","private static ActivityOptions makeAspectScaledThumbnailAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener,boolean scaleUp){
  ActivityOptions opts=new ActivityOptions();
  opts.mPackageName=source.getContext().getPackageName();
  opts.mAnimationType=scaleUp ? ANIM_THUMBNAIL_ASPECT_SCALE_UP : ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
  opts.mThumbnail=thumbnail;
  int[] pts=new int[2];
  source.getLocationOnScreen(pts);
  opts.mStartX=pts[0] + startX;
  opts.mStartY=pts[1] + startY;
  opts.mWidth=targetWidth;
  opts.mHeight=targetHeight;
  opts.setOnAnimationStartedListener(handler,listener);
  return opts;
}",0.9457917261055636
195679,"/** 
 * Creates the activity options for an app->recents transition.
 */
ActivityOptions getThumbnailTransitionActivityOptions(ActivityManager.RunningTaskInfo topTask,TaskStack stack,TaskStackView stackView){
  Task toTask=new Task();
  TaskViewTransform toTransform=getThumbnailTransitionTransform(stack,stackView,topTask.id,toTask);
  if (toTransform != null && toTask.key != null) {
    Rect toTaskRect=toTransform.rect;
    int toHeaderWidth=(int)(mHeaderBar.getMeasuredWidth() * toTransform.scale);
    int toHeaderHeight=(int)(mHeaderBar.getMeasuredHeight() * toTransform.scale);
    Bitmap thumbnail=Bitmap.createBitmap(toHeaderWidth,toHeaderHeight,Bitmap.Config.ARGB_8888);
    if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
      thumbnail.eraseColor(0xFFff0000);
    }
 else {
      Canvas c=new Canvas(thumbnail);
      c.scale(toTransform.scale,toTransform.scale);
      mHeaderBar.rebindToTask(toTask);
      mHeaderBar.draw(c);
      c.setBitmap(null);
    }
    mStartAnimationTriggered=false;
    return ActivityOptions.makeThumbnailAspectScaleDownAnimation(mDummyStackView,thumbnail,toTaskRect.left,toTaskRect.top,toTaskRect.width(),toTaskRect.height(),this);
  }
  return getUnknownTransitionActivityOptions();
}","/** 
 * Creates the activity options for an app->recents transition.
 */
ActivityOptions getThumbnailTransitionActivityOptions(ActivityManager.RunningTaskInfo topTask,TaskStack stack,TaskStackView stackView){
  Task toTask=new Task();
  TaskViewTransform toTransform=getThumbnailTransitionTransform(stack,stackView,topTask.id,toTask);
  if (toTransform != null && toTask.key != null) {
    Rect toTaskRect=toTransform.rect;
    int toHeaderWidth=(int)(mHeaderBar.getMeasuredWidth() * toTransform.scale);
    int toHeaderHeight=(int)(mHeaderBar.getMeasuredHeight() * toTransform.scale);
    Bitmap thumbnail=Bitmap.createBitmap(toHeaderWidth,toHeaderHeight,Bitmap.Config.ARGB_8888);
    if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
      thumbnail.eraseColor(0xFFff0000);
    }
 else {
      Canvas c=new Canvas(thumbnail);
      c.scale(toTransform.scale,toTransform.scale);
      mHeaderBar.rebindToTask(toTask);
      mHeaderBar.draw(c);
      c.setBitmap(null);
    }
    mStartAnimationTriggered=false;
    return ActivityOptions.makeThumbnailAspectScaleDownAnimation(mDummyStackView,thumbnail,toTaskRect.left,toTaskRect.top,toTaskRect.width(),toTaskRect.height(),mHandler,this);
  }
  return getUnknownTransitionActivityOptions();
}",0.9964129135113592
195680,"/** 
 * TaskStackView.TaskStackCallbacks Implementation 
 */
@Override public void onTaskViewClicked(final TaskStackView stackView,final TaskView tv,final TaskStack stack,final Task task,final boolean lockToTask){
  if (mCb != null) {
    mCb.onTaskViewClicked();
  }
  TaskViewTransform transform=new TaskViewTransform();
  View sourceView;
  int offsetX=0;
  int offsetY=0;
  float stackScroll=stackView.getScroller().getStackScroll();
  if (tv == null) {
    sourceView=stackView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
    offsetX=transform.rect.left;
    offsetY=mConfig.displayRect.height();
  }
 else {
    sourceView=tv.mThumbnailView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
  }
  final SystemServicesProxy ssp=RecentsTaskLoader.getInstance().getSystemServicesProxy();
  ActivityOptions opts=null;
  if (task.thumbnail != null && task.thumbnail.getWidth() > 0 && task.thumbnail.getHeight() > 0) {
    Bitmap b;
    if (tv != null) {
      if (tv.isFocusedTask()) {
        tv.unsetFocusedTask();
      }
      float scale=tv.getScaleX();
      int fromHeaderWidth=(int)(tv.mHeaderView.getMeasuredWidth() * scale);
      int fromHeaderHeight=(int)(tv.mHeaderView.getMeasuredHeight() * scale);
      b=Bitmap.createBitmap(fromHeaderWidth,fromHeaderHeight,Bitmap.Config.ARGB_8888);
      if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
        b.eraseColor(0xFFff0000);
      }
 else {
        Canvas c=new Canvas(b);
        c.scale(tv.getScaleX(),tv.getScaleY());
        tv.mHeaderView.draw(c);
        c.setBitmap(null);
      }
    }
 else {
      b=Bitmap.createBitmap(1,1,Bitmap.Config.ALPHA_8);
    }
    ActivityOptions.OnAnimationStartedListener animStartedListener=null;
    if (lockToTask) {
      animStartedListener=new ActivityOptions.OnAnimationStartedListener(){
        boolean mTriggered=false;
        @Override public void onAnimationStarted(){
          if (!mTriggered) {
            postDelayed(new Runnable(){
              @Override public void run(){
                mCb.onScreenPinningRequest();
              }
            }
,350);
            mTriggered=true;
          }
        }
      }
;
    }
    opts=ActivityOptions.makeThumbnailAspectScaleUpAnimation(sourceView,b,offsetX,offsetY,transform.rect.width(),transform.rect.height(),animStartedListener);
  }
  final ActivityOptions launchOpts=opts;
  final Runnable launchRunnable=new Runnable(){
    @Override public void run(){
      if (task.isActive) {
        ssp.moveTaskToFront(task.key.id,launchOpts);
      }
 else {
        if (ssp.startActivityFromRecents(getContext(),task.key.id,task.activityLabel,launchOpts)) {
          if (launchOpts == null && lockToTask) {
            mCb.onScreenPinningRequest();
          }
        }
 else {
          onTaskViewDismissed(task);
          if (mCb != null) {
            mCb.onTaskLaunchFailed();
          }
        }
      }
    }
  }
;
  if (tv == null) {
    launchRunnable.run();
  }
 else {
    if (!task.group.isFrontMostTask(task)) {
      stackView.startLaunchTaskAnimation(tv,launchRunnable,lockToTask);
    }
 else {
      stackView.startLaunchTaskAnimation(tv,null,lockToTask);
      launchRunnable.run();
    }
  }
}","/** 
 * TaskStackView.TaskStackCallbacks Implementation 
 */
@Override public void onTaskViewClicked(final TaskStackView stackView,final TaskView tv,final TaskStack stack,final Task task,final boolean lockToTask){
  if (mCb != null) {
    mCb.onTaskViewClicked();
  }
  TaskViewTransform transform=new TaskViewTransform();
  View sourceView;
  int offsetX=0;
  int offsetY=0;
  float stackScroll=stackView.getScroller().getStackScroll();
  if (tv == null) {
    sourceView=stackView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
    offsetX=transform.rect.left;
    offsetY=mConfig.displayRect.height();
  }
 else {
    sourceView=tv.mThumbnailView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
  }
  final SystemServicesProxy ssp=RecentsTaskLoader.getInstance().getSystemServicesProxy();
  ActivityOptions opts=null;
  if (task.thumbnail != null && task.thumbnail.getWidth() > 0 && task.thumbnail.getHeight() > 0) {
    Bitmap b;
    if (tv != null) {
      if (tv.isFocusedTask()) {
        tv.unsetFocusedTask();
      }
      float scale=tv.getScaleX();
      int fromHeaderWidth=(int)(tv.mHeaderView.getMeasuredWidth() * scale);
      int fromHeaderHeight=(int)(tv.mHeaderView.getMeasuredHeight() * scale);
      b=Bitmap.createBitmap(fromHeaderWidth,fromHeaderHeight,Bitmap.Config.ARGB_8888);
      if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
        b.eraseColor(0xFFff0000);
      }
 else {
        Canvas c=new Canvas(b);
        c.scale(tv.getScaleX(),tv.getScaleY());
        tv.mHeaderView.draw(c);
        c.setBitmap(null);
      }
    }
 else {
      b=Bitmap.createBitmap(1,1,Bitmap.Config.ALPHA_8);
    }
    ActivityOptions.OnAnimationStartedListener animStartedListener=null;
    if (lockToTask) {
      animStartedListener=new ActivityOptions.OnAnimationStartedListener(){
        boolean mTriggered=false;
        @Override public void onAnimationStarted(){
          if (!mTriggered) {
            postDelayed(new Runnable(){
              @Override public void run(){
                mCb.onScreenPinningRequest();
              }
            }
,350);
            mTriggered=true;
          }
        }
      }
;
    }
    opts=ActivityOptions.makeThumbnailAspectScaleUpAnimation(sourceView,b,offsetX,offsetY,transform.rect.width(),transform.rect.height(),sourceView.getHandler(),animStartedListener);
  }
  final ActivityOptions launchOpts=opts;
  final Runnable launchRunnable=new Runnable(){
    @Override public void run(){
      if (task.isActive) {
        ssp.moveTaskToFront(task.key.id,launchOpts);
      }
 else {
        if (ssp.startActivityFromRecents(getContext(),task.key.id,task.activityLabel,launchOpts)) {
          if (launchOpts == null && lockToTask) {
            mCb.onScreenPinningRequest();
          }
        }
 else {
          onTaskViewDismissed(task);
          if (mCb != null) {
            mCb.onTaskLaunchFailed();
          }
        }
      }
    }
  }
;
  if (tv == null) {
    launchRunnable.run();
  }
 else {
    if (!task.group.isFrontMostTask(task)) {
      stackView.startLaunchTaskAnimation(tv,launchRunnable,lockToTask);
    }
 else {
      stackView.startLaunchTaskAnimation(tv,null,lockToTask);
      launchRunnable.run();
    }
  }
}",0.996382273138378
195681,"/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating from.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the initial thumbnailof the animation.
 * @param startX The x starting location of the bitmap, relative to <var>source</var>.
 * @param startY The y starting location of the bitmap, relative to <var>source</var>.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleUpAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,listener,true);
}","/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating from.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the initial thumbnailof the animation.
 * @param startX The x starting location of the bitmap, relative to <var>source</var>.
 * @param startY The y starting location of the bitmap, relative to <var>source</var>.
 * @param handler If <var>listener</var> is non-null this must be a validHandler on which to dispatch the callback; otherwise it should be null.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleUpAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,handler,listener,true);
}",0.9347238315952106
195682,"/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating to.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the final thumbnailof the animation.
 * @param startX The x end location of the bitmap, relative to <var>source</var>.
 * @param startY The y end location of the bitmap, relative to <var>source</var>.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleDownAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,listener,false);
}","/** 
 * Create an ActivityOptions specifying an animation where the new activity window and a thumbnail is aspect-scaled to a new location.
 * @param source The View that this thumbnail is animating to.  Thisdefines the coordinate space for <var>startX</var> and <var>startY</var>.
 * @param thumbnail The bitmap that will be shown as the final thumbnailof the animation.
 * @param startX The x end location of the bitmap, relative to <var>source</var>.
 * @param startY The y end location of the bitmap, relative to <var>source</var>.
 * @param handler If <var>listener</var> is non-null this must be a validHandler on which to dispatch the callback; otherwise it should be null.
 * @param listener Optional OnAnimationStartedListener to find out when therequested animation has started running.  If for some reason the animation is not executed, the callback will happen immediately.
 * @return Returns a new ActivityOptions object that you can use tosupply these options as the options Bundle when starting an activity.
 * @hide
 */
public static ActivityOptions makeThumbnailAspectScaleDownAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener){
  return makeAspectScaledThumbnailAnimation(source,thumbnail,startX,startY,targetWidth,targetHeight,handler,listener,false);
}",0.934164394234515
195683,"private static ActivityOptions makeAspectScaledThumbnailAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,OnAnimationStartedListener listener,boolean scaleUp){
  ActivityOptions opts=new ActivityOptions();
  opts.mPackageName=source.getContext().getPackageName();
  opts.mAnimationType=scaleUp ? ANIM_THUMBNAIL_ASPECT_SCALE_UP : ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
  opts.mThumbnail=thumbnail;
  int[] pts=new int[2];
  source.getLocationOnScreen(pts);
  opts.mStartX=pts[0] + startX;
  opts.mStartY=pts[1] + startY;
  opts.mWidth=targetWidth;
  opts.mHeight=targetHeight;
  opts.setOnAnimationStartedListener(source.getHandler(),listener);
  return opts;
}","private static ActivityOptions makeAspectScaledThumbnailAnimation(View source,Bitmap thumbnail,int startX,int startY,int targetWidth,int targetHeight,Handler handler,OnAnimationStartedListener listener,boolean scaleUp){
  ActivityOptions opts=new ActivityOptions();
  opts.mPackageName=source.getContext().getPackageName();
  opts.mAnimationType=scaleUp ? ANIM_THUMBNAIL_ASPECT_SCALE_UP : ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
  opts.mThumbnail=thumbnail;
  int[] pts=new int[2];
  source.getLocationOnScreen(pts);
  opts.mStartX=pts[0] + startX;
  opts.mStartY=pts[1] + startY;
  opts.mWidth=targetWidth;
  opts.mHeight=targetHeight;
  opts.setOnAnimationStartedListener(handler,listener);
  return opts;
}",0.9457917261055636
195684,"/** 
 * Creates the activity options for an app->recents transition.
 */
ActivityOptions getThumbnailTransitionActivityOptions(ActivityManager.RunningTaskInfo topTask,TaskStack stack,TaskStackView stackView){
  Task toTask=new Task();
  TaskViewTransform toTransform=getThumbnailTransitionTransform(stack,stackView,topTask.id,toTask);
  if (toTransform != null && toTask.key != null) {
    Rect toTaskRect=toTransform.rect;
    int toHeaderWidth=(int)(mHeaderBar.getMeasuredWidth() * toTransform.scale);
    int toHeaderHeight=(int)(mHeaderBar.getMeasuredHeight() * toTransform.scale);
    Bitmap thumbnail=Bitmap.createBitmap(toHeaderWidth,toHeaderHeight,Bitmap.Config.ARGB_8888);
    if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
      thumbnail.eraseColor(0xFFff0000);
    }
 else {
      Canvas c=new Canvas(thumbnail);
      c.scale(toTransform.scale,toTransform.scale);
      mHeaderBar.rebindToTask(toTask);
      mHeaderBar.draw(c);
      c.setBitmap(null);
    }
    mStartAnimationTriggered=false;
    return ActivityOptions.makeThumbnailAspectScaleDownAnimation(mDummyStackView,thumbnail,toTaskRect.left,toTaskRect.top,toTaskRect.width(),toTaskRect.height(),this);
  }
  return getUnknownTransitionActivityOptions();
}","/** 
 * Creates the activity options for an app->recents transition.
 */
ActivityOptions getThumbnailTransitionActivityOptions(ActivityManager.RunningTaskInfo topTask,TaskStack stack,TaskStackView stackView){
  Task toTask=new Task();
  TaskViewTransform toTransform=getThumbnailTransitionTransform(stack,stackView,topTask.id,toTask);
  if (toTransform != null && toTask.key != null) {
    Rect toTaskRect=toTransform.rect;
    int toHeaderWidth=(int)(mHeaderBar.getMeasuredWidth() * toTransform.scale);
    int toHeaderHeight=(int)(mHeaderBar.getMeasuredHeight() * toTransform.scale);
    Bitmap thumbnail=Bitmap.createBitmap(toHeaderWidth,toHeaderHeight,Bitmap.Config.ARGB_8888);
    if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
      thumbnail.eraseColor(0xFFff0000);
    }
 else {
      Canvas c=new Canvas(thumbnail);
      c.scale(toTransform.scale,toTransform.scale);
      mHeaderBar.rebindToTask(toTask);
      mHeaderBar.draw(c);
      c.setBitmap(null);
    }
    mStartAnimationTriggered=false;
    return ActivityOptions.makeThumbnailAspectScaleDownAnimation(mDummyStackView,thumbnail,toTaskRect.left,toTaskRect.top,toTaskRect.width(),toTaskRect.height(),mHandler,this);
  }
  return getUnknownTransitionActivityOptions();
}",0.9964129135113592
195685,"/** 
 * TaskStackView.TaskStackCallbacks Implementation 
 */
@Override public void onTaskViewClicked(final TaskStackView stackView,final TaskView tv,final TaskStack stack,final Task task,final boolean lockToTask){
  if (mCb != null) {
    mCb.onTaskViewClicked();
  }
  TaskViewTransform transform=new TaskViewTransform();
  View sourceView;
  int offsetX=0;
  int offsetY=0;
  float stackScroll=stackView.getScroller().getStackScroll();
  if (tv == null) {
    sourceView=stackView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
    offsetX=transform.rect.left;
    offsetY=mConfig.displayRect.height();
  }
 else {
    sourceView=tv.mThumbnailView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
  }
  final SystemServicesProxy ssp=RecentsTaskLoader.getInstance().getSystemServicesProxy();
  ActivityOptions opts=null;
  if (task.thumbnail != null && task.thumbnail.getWidth() > 0 && task.thumbnail.getHeight() > 0) {
    Bitmap b;
    if (tv != null) {
      if (tv.isFocusedTask()) {
        tv.unsetFocusedTask();
      }
      float scale=tv.getScaleX();
      int fromHeaderWidth=(int)(tv.mHeaderView.getMeasuredWidth() * scale);
      int fromHeaderHeight=(int)(tv.mHeaderView.getMeasuredHeight() * scale);
      b=Bitmap.createBitmap(fromHeaderWidth,fromHeaderHeight,Bitmap.Config.ARGB_8888);
      if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
        b.eraseColor(0xFFff0000);
      }
 else {
        Canvas c=new Canvas(b);
        c.scale(tv.getScaleX(),tv.getScaleY());
        tv.mHeaderView.draw(c);
        c.setBitmap(null);
      }
    }
 else {
      b=Bitmap.createBitmap(1,1,Bitmap.Config.ALPHA_8);
    }
    ActivityOptions.OnAnimationStartedListener animStartedListener=null;
    if (lockToTask) {
      animStartedListener=new ActivityOptions.OnAnimationStartedListener(){
        boolean mTriggered=false;
        @Override public void onAnimationStarted(){
          if (!mTriggered) {
            postDelayed(new Runnable(){
              @Override public void run(){
                mCb.onScreenPinningRequest();
              }
            }
,350);
            mTriggered=true;
          }
        }
      }
;
    }
    opts=ActivityOptions.makeThumbnailAspectScaleUpAnimation(sourceView,b,offsetX,offsetY,transform.rect.width(),transform.rect.height(),animStartedListener);
  }
  final ActivityOptions launchOpts=opts;
  final Runnable launchRunnable=new Runnable(){
    @Override public void run(){
      if (task.isActive) {
        ssp.moveTaskToFront(task.key.id,launchOpts);
      }
 else {
        if (ssp.startActivityFromRecents(getContext(),task.key.id,task.activityLabel,launchOpts)) {
          if (launchOpts == null && lockToTask) {
            mCb.onScreenPinningRequest();
          }
        }
 else {
          onTaskViewDismissed(task);
          if (mCb != null) {
            mCb.onTaskLaunchFailed();
          }
        }
      }
    }
  }
;
  if (tv == null) {
    launchRunnable.run();
  }
 else {
    if (!task.group.isFrontMostTask(task)) {
      stackView.startLaunchTaskAnimation(tv,launchRunnable,lockToTask);
    }
 else {
      stackView.startLaunchTaskAnimation(tv,null,lockToTask);
      launchRunnable.run();
    }
  }
}","/** 
 * TaskStackView.TaskStackCallbacks Implementation 
 */
@Override public void onTaskViewClicked(final TaskStackView stackView,final TaskView tv,final TaskStack stack,final Task task,final boolean lockToTask){
  if (mCb != null) {
    mCb.onTaskViewClicked();
  }
  TaskViewTransform transform=new TaskViewTransform();
  View sourceView;
  int offsetX=0;
  int offsetY=0;
  float stackScroll=stackView.getScroller().getStackScroll();
  if (tv == null) {
    sourceView=stackView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
    offsetX=transform.rect.left;
    offsetY=mConfig.displayRect.height();
  }
 else {
    sourceView=tv.mThumbnailView;
    transform=stackView.getStackAlgorithm().getStackTransform(task,stackScroll,transform,null);
  }
  final SystemServicesProxy ssp=RecentsTaskLoader.getInstance().getSystemServicesProxy();
  ActivityOptions opts=null;
  if (task.thumbnail != null && task.thumbnail.getWidth() > 0 && task.thumbnail.getHeight() > 0) {
    Bitmap b;
    if (tv != null) {
      if (tv.isFocusedTask()) {
        tv.unsetFocusedTask();
      }
      float scale=tv.getScaleX();
      int fromHeaderWidth=(int)(tv.mHeaderView.getMeasuredWidth() * scale);
      int fromHeaderHeight=(int)(tv.mHeaderView.getMeasuredHeight() * scale);
      b=Bitmap.createBitmap(fromHeaderWidth,fromHeaderHeight,Bitmap.Config.ARGB_8888);
      if (Constants.DebugFlags.App.EnableTransitionThumbnailDebugMode) {
        b.eraseColor(0xFFff0000);
      }
 else {
        Canvas c=new Canvas(b);
        c.scale(tv.getScaleX(),tv.getScaleY());
        tv.mHeaderView.draw(c);
        c.setBitmap(null);
      }
    }
 else {
      b=Bitmap.createBitmap(1,1,Bitmap.Config.ALPHA_8);
    }
    ActivityOptions.OnAnimationStartedListener animStartedListener=null;
    if (lockToTask) {
      animStartedListener=new ActivityOptions.OnAnimationStartedListener(){
        boolean mTriggered=false;
        @Override public void onAnimationStarted(){
          if (!mTriggered) {
            postDelayed(new Runnable(){
              @Override public void run(){
                mCb.onScreenPinningRequest();
              }
            }
,350);
            mTriggered=true;
          }
        }
      }
;
    }
    opts=ActivityOptions.makeThumbnailAspectScaleUpAnimation(sourceView,b,offsetX,offsetY,transform.rect.width(),transform.rect.height(),sourceView.getHandler(),animStartedListener);
  }
  final ActivityOptions launchOpts=opts;
  final Runnable launchRunnable=new Runnable(){
    @Override public void run(){
      if (task.isActive) {
        ssp.moveTaskToFront(task.key.id,launchOpts);
      }
 else {
        if (ssp.startActivityFromRecents(getContext(),task.key.id,task.activityLabel,launchOpts)) {
          if (launchOpts == null && lockToTask) {
            mCb.onScreenPinningRequest();
          }
        }
 else {
          onTaskViewDismissed(task);
          if (mCb != null) {
            mCb.onTaskLaunchFailed();
          }
        }
      }
    }
  }
;
  if (tv == null) {
    launchRunnable.run();
  }
 else {
    if (!task.group.isFrontMostTask(task)) {
      stackView.startLaunchTaskAnimation(tv,launchRunnable,lockToTask);
    }
 else {
      stackView.startLaunchTaskAnimation(tv,null,lockToTask);
      launchRunnable.run();
    }
  }
}",0.996382273138378
195686,"/** 
 * <p>Sets the opacity of the view. This is a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque.</p> <p> Note that setting alpha to a translucent value (0 < alpha < 1) can have significant performance implications, especially for large views. It is best to use the alpha property sparingly and transiently, as in the case of fading animations.</p> <p>For a view with a frequently changing alpha, such as during a fading animation, it is strongly recommended for performance reasons to either override  {@link #hasOverlappingRendering()} to return false if appropriate, or setting a{@link #setLayerType(int,android.graphics.Paint) layer type} on the view.</p><p>If this view overrides  {@link #onSetAlpha(int)} to return true, then this view isresponsible for applying the opacity itself.</p> <p>Note that if the view is backed by a {@link #setLayerType(int,android.graphics.Paint) layer} and is associated with a{@link #setLayerPaint(android.graphics.Paint) layer paint}, setting an alpha value less than 1.0 will supercede the alpha of the layer paint.</p>
 * @param alpha The opacity of the view.
 * @see #hasOverlappingRendering()
 * @see #setLayerType(int,android.graphics.Paint)
 * @attr ref android.R.styleable#View_alpha
 */
public void setAlpha(float alpha){
  ensureTransformationInfo();
  if (mTransformationInfo.mAlpha != alpha) {
    mTransformationInfo.mAlpha=alpha;
    if (onSetAlpha((int)(alpha * 255))) {
      mPrivateFlags|=PFLAG_ALPHA_SET;
      invalidateParentCaches();
      invalidate(true);
    }
 else {
      mPrivateFlags&=~PFLAG_ALPHA_SET;
      invalidateViewProperty(true,false);
      mRenderNode.setAlpha(getFinalAlpha());
      notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_UNDEFINED);
    }
  }
}","/** 
 * <p>Sets the opacity of the view. This is a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque.</p> <p> Note that setting alpha to a translucent value (0 < alpha < 1) can have significant performance implications, especially for large views. It is best to use the alpha property sparingly and transiently, as in the case of fading animations.</p> <p>For a view with a frequently changing alpha, such as during a fading animation, it is strongly recommended for performance reasons to either override  {@link #hasOverlappingRendering()} to return false if appropriate, or setting a{@link #setLayerType(int,android.graphics.Paint) layer type} on the view.</p><p>If this view overrides  {@link #onSetAlpha(int)} to return true, then this view isresponsible for applying the opacity itself.</p> <p>Note that if the view is backed by a {@link #setLayerType(int,android.graphics.Paint) layer} and is associated with a{@link #setLayerPaint(android.graphics.Paint) layer paint}, setting an alpha value less than 1.0 will supersede the alpha of the layer paint.</p>
 * @param alpha The opacity of the view.
 * @see #hasOverlappingRendering()
 * @see #setLayerType(int,android.graphics.Paint)
 * @attr ref android.R.styleable#View_alpha
 */
public void setAlpha(float alpha){
  ensureTransformationInfo();
  if (mTransformationInfo.mAlpha != alpha) {
    mTransformationInfo.mAlpha=alpha;
    if (onSetAlpha((int)(alpha * 255))) {
      mPrivateFlags|=PFLAG_ALPHA_SET;
      invalidateParentCaches();
      invalidate(true);
    }
 else {
      mPrivateFlags&=~PFLAG_ALPHA_SET;
      invalidateViewProperty(true,false);
      mRenderNode.setAlpha(getFinalAlpha());
      notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_UNDEFINED);
    }
  }
}",0.9994544462629568
195687,"/** 
 * <p>Enables or disables the duplication of the parent's state into this view. When duplication is enabled, this view gets its drawable state from its parent rather than from its own internal properties.</p> <p>Note: in the current implementation, setting this property to true after the view was added to a ViewGroup might have no effect at all. This property should always be used from XML or set to true before adding this view to a ViewGroup.</p> <p>Note: if this view's parent addStateFromChildren property is enabled and this property is enabled, an exception will be thrown.</p> <p>Note: if the child view uses and updates additionnal states which are unknown to the parent, these states should not be affected by this method.</p>
 * @param enabled True to enable duplication of the parent's drawable state, falseto disable it.
 * @see #getDrawableState()
 * @see #isDuplicateParentStateEnabled()
 */
public void setDuplicateParentStateEnabled(boolean enabled){
  setFlags(enabled ? DUPLICATE_PARENT_STATE : 0,DUPLICATE_PARENT_STATE);
}","/** 
 * <p>Enables or disables the duplication of the parent's state into this view. When duplication is enabled, this view gets its drawable state from its parent rather than from its own internal properties.</p> <p>Note: in the current implementation, setting this property to true after the view was added to a ViewGroup might have no effect at all. This property should always be used from XML or set to true before adding this view to a ViewGroup.</p> <p>Note: if this view's parent addStateFromChildren property is enabled and this property is enabled, an exception will be thrown.</p> <p>Note: if the child view uses and updates additional states which are unknown to the parent, these states should not be affected by this method.</p>
 * @param enabled True to enable duplication of the parent's drawable state, falseto disable it.
 * @see #getDrawableState()
 * @see #isDuplicateParentStateEnabled()
 */
public void setDuplicateParentStateEnabled(boolean enabled){
  setFlags(enabled ? DUPLICATE_PARENT_STATE : 0,DUPLICATE_PARENT_STATE);
}",0.9995231282784932
195688,"/** 
 * Call this to try to give focus to a specific view or to one of its descendants. This is a special variant of   {@link #requestFocus() } that will allow views that are not focuable intouch mode to request focus when they are touched.
 * @return Whether this view or one of its descendants actually took focus.
 * @see #isInTouchMode()
 */
public final boolean requestFocusFromTouch(){
  if (isInTouchMode()) {
    ViewRootImpl viewRoot=getViewRootImpl();
    if (viewRoot != null) {
      viewRoot.ensureTouchMode(false);
    }
  }
  return requestFocus(View.FOCUS_DOWN);
}","/** 
 * Call this to try to give focus to a specific view or to one of its descendants. This is a special variant of   {@link #requestFocus() } that will allow views that are not focusable intouch mode to request focus when they are touched.
 * @return Whether this view or one of its descendants actually took focus.
 * @see #isInTouchMode()
 */
public final boolean requestFocusFromTouch(){
  if (isInTouchMode()) {
    ViewRootImpl viewRoot=getViewRootImpl();
    if (viewRoot != null) {
      viewRoot.ensureTouchMode(false);
    }
  }
  return requestFocus(View.FOCUS_DOWN);
}",0.9991386735572784
195689,"/** 
 * Define whether scrollbars will fade when the view is not scrolling.
 * @param fadeScrollbars wheter to enable fading
 * @attr ref android.R.styleable#View_fadeScrollbars
 */
public void setScrollbarFadingEnabled(boolean fadeScrollbars){
  initScrollCache();
  final ScrollabilityCache scrollabilityCache=mScrollCache;
  scrollabilityCache.fadeScrollBars=fadeScrollbars;
  if (fadeScrollbars) {
    scrollabilityCache.state=ScrollabilityCache.OFF;
  }
 else {
    scrollabilityCache.state=ScrollabilityCache.ON;
  }
}","/** 
 * Define whether scrollbars will fade when the view is not scrolling.
 * @param fadeScrollbars whether to enable fading
 * @attr ref android.R.styleable#View_fadeScrollbars
 */
public void setScrollbarFadingEnabled(boolean fadeScrollbars){
  initScrollCache();
  final ScrollabilityCache scrollabilityCache=mScrollCache;
  scrollabilityCache.fadeScrollBars=fadeScrollbars;
  if (fadeScrollbars) {
    scrollabilityCache.state=ScrollabilityCache.OFF;
  }
 else {
    scrollabilityCache.state=ScrollabilityCache.ON;
  }
}",0.9990467111534796
195690,"/** 
 * Returns true if this view has focus iteself, or is the ancestor of the view that has focus.
 * @return True if this view has or contains focus, false otherwise.
 */
@ViewDebug.ExportedProperty(category=""String_Node_Str"") public boolean hasFocus(){
  return (mPrivateFlags & PFLAG_FOCUSED) != 0;
}","/** 
 * Returns true if this view has focus itself, or is the ancestor of the view that has focus.
 * @return True if this view has or contains focus, false otherwise.
 */
@ViewDebug.ExportedProperty(category=""String_Node_Str"") public boolean hasFocus(){
  return (mPrivateFlags & PFLAG_FOCUSED) != 0;
}",0.99835255354201
195691,"/** 
 * <p>Specifies the type of layer backing this view. The layer can be  {@link #LAYER_TYPE_NONE},   {@link #LAYER_TYPE_SOFTWARE} or{@link #LAYER_TYPE_HARDWARE}.</p> <p>A layer is associated with an optional   {@link android.graphics.Paint}instance that controls how the layer is composed on screen. The following properties of the paint are taken into account when composing the layer:</p> <ul> <li>  {@link android.graphics.Paint#getAlpha() Translucency (alpha)}</li> <li>  {@link android.graphics.Paint#getXfermode() Blending mode}</li> <li>  {@link android.graphics.Paint#getColorFilter() Color filter}</li> </ul> <p>If this view has an alpha value set to < 1.0 by calling  {@link #setAlpha(float)}, the alpha value of the layer's paint is superceded by this view's alpha value.</p> <p>Refer to the documentation of   {@link #LAYER_TYPE_NONE},  {@link #LAYER_TYPE_SOFTWARE} and {@link #LAYER_TYPE_HARDWARE}for more information on when and how to use layers.</p>
 * @param layerType The type of layer to use with this view, must be one of{@link #LAYER_TYPE_NONE},   {@link #LAYER_TYPE_SOFTWARE} or{@link #LAYER_TYPE_HARDWARE}
 * @param paint The paint used to compose the layer. This argument is optionaland can be null. It is ignored when the layer type is {@link #LAYER_TYPE_NONE}
 * @see #getLayerType()
 * @see #LAYER_TYPE_NONE
 * @see #LAYER_TYPE_SOFTWARE
 * @see #LAYER_TYPE_HARDWARE
 * @see #setAlpha(float)
 * @attr ref android.R.styleable#View_layerType
 */
public void setLayerType(int layerType,Paint paint){
  if (layerType < LAYER_TYPE_NONE || layerType > LAYER_TYPE_HARDWARE) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  boolean typeChanged=mRenderNode.setLayerType(layerType);
  if (!typeChanged) {
    setLayerPaint(paint);
    return;
  }
  if (mLayerType == LAYER_TYPE_SOFTWARE) {
    destroyDrawingCache();
  }
  mLayerType=layerType;
  final boolean layerDisabled=(mLayerType == LAYER_TYPE_NONE);
  mLayerPaint=layerDisabled ? null : (paint == null ? new Paint() : paint);
  mRenderNode.setLayerPaint(mLayerPaint);
  invalidateParentCaches();
  invalidate(true);
}","/** 
 * <p>Specifies the type of layer backing this view. The layer can be  {@link #LAYER_TYPE_NONE},   {@link #LAYER_TYPE_SOFTWARE} or{@link #LAYER_TYPE_HARDWARE}.</p> <p>A layer is associated with an optional   {@link android.graphics.Paint}instance that controls how the layer is composed on screen. The following properties of the paint are taken into account when composing the layer:</p> <ul> <li>  {@link android.graphics.Paint#getAlpha() Translucency (alpha)}</li> <li>  {@link android.graphics.Paint#getXfermode() Blending mode}</li> <li>  {@link android.graphics.Paint#getColorFilter() Color filter}</li> </ul> <p>If this view has an alpha value set to < 1.0 by calling  {@link #setAlpha(float)}, the alpha value of the layer's paint is superseded by this view's alpha value.</p> <p>Refer to the documentation of   {@link #LAYER_TYPE_NONE},  {@link #LAYER_TYPE_SOFTWARE} and {@link #LAYER_TYPE_HARDWARE}for more information on when and how to use layers.</p>
 * @param layerType The type of layer to use with this view, must be one of{@link #LAYER_TYPE_NONE},   {@link #LAYER_TYPE_SOFTWARE} or{@link #LAYER_TYPE_HARDWARE}
 * @param paint The paint used to compose the layer. This argument is optionaland can be null. It is ignored when the layer type is {@link #LAYER_TYPE_NONE}
 * @see #getLayerType()
 * @see #LAYER_TYPE_NONE
 * @see #LAYER_TYPE_SOFTWARE
 * @see #LAYER_TYPE_HARDWARE
 * @see #setAlpha(float)
 * @attr ref android.R.styleable#View_layerType
 */
public void setLayerType(int layerType,Paint paint){
  if (layerType < LAYER_TYPE_NONE || layerType > LAYER_TYPE_HARDWARE) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  boolean typeChanged=mRenderNode.setLayerType(layerType);
  if (!typeChanged) {
    setLayerPaint(paint);
    return;
  }
  if (mLayerType == LAYER_TYPE_SOFTWARE) {
    destroyDrawingCache();
  }
  mLayerType=layerType;
  final boolean layerDisabled=(mLayerType == LAYER_TYPE_NONE);
  mLayerPaint=layerDisabled ? null : (paint == null ? new Paint() : paint);
  mRenderNode.setLayerPaint(mLayerPaint);
  invalidateParentCaches();
  invalidate(true);
}",0.99953095684803
195692,"/** 
 * Called when the current configuration of the resources being used by the application have changed.  You can use this to decide when to reload resources that can changed based on orientation and other configuration characterstics.  You only need to use this if you are not relying on the normal   {@link android.app.Activity} mechanism ofrecreating the activity instance upon a configuration change.
 * @param newConfig The new resource configuration.
 */
protected void onConfigurationChanged(Configuration newConfig){
}","/** 
 * Called when the current configuration of the resources being used by the application have changed.  You can use this to decide when to reload resources that can changed based on orientation and other configuration characteristics.  You only need to use this if you are not relying on the normal   {@link android.app.Activity} mechanism ofrecreating the activity instance upon a configuration change.
 * @param newConfig The new resource configuration.
 */
protected void onConfigurationChanged(Configuration newConfig){
}",0.999053926206244
195693,"/** 
 * <p> Measure the view and its content to determine the measured width and the measured height. This method is invoked by   {@link #measure(int,int)} andshould be overriden by subclasses to provide accurate and efficient measurement of their contents. </p> <p> <strong>CONTRACT:</strong> When overriding this method, you <em>must</em> call  {@link #setMeasuredDimension(int,int)} to store themeasured width and height of this view. Failure to do so will trigger an <code>IllegalStateException</code>, thrown by {@link #measure(int,int)}. Calling the superclass'  {@link #onMeasure(int,int)} is a valid use.</p> <p> The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override  {@link #onMeasure(int,int)} to provide better measurements oftheir content. </p> <p> If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width ( {@link #getSuggestedMinimumHeight()} and{@link #getSuggestedMinimumWidth()}). </p>
 * @param widthMeasureSpec horizontal space requirements as imposed by the parent.The requirements are encoded with {@link android.view.View.MeasureSpec}.
 * @param heightMeasureSpec vertical space requirements as imposed by the parent.The requirements are encoded with {@link android.view.View.MeasureSpec}.
 * @see #getMeasuredWidth()
 * @see #getMeasuredHeight()
 * @see #setMeasuredDimension(int,int)
 * @see #getSuggestedMinimumHeight()
 * @see #getSuggestedMinimumWidth()
 * @see android.view.View.MeasureSpec#getMode(int)
 * @see android.view.View.MeasureSpec#getSize(int)
 */
protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec),getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec));
}","/** 
 * <p> Measure the view and its content to determine the measured width and the measured height. This method is invoked by   {@link #measure(int,int)} andshould be overridden by subclasses to provide accurate and efficient measurement of their contents. </p> <p> <strong>CONTRACT:</strong> When overriding this method, you <em>must</em> call  {@link #setMeasuredDimension(int,int)} to store themeasured width and height of this view. Failure to do so will trigger an <code>IllegalStateException</code>, thrown by {@link #measure(int,int)}. Calling the superclass'  {@link #onMeasure(int,int)} is a valid use.</p> <p> The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override  {@link #onMeasure(int,int)} to provide better measurements oftheir content. </p> <p> If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width ( {@link #getSuggestedMinimumHeight()} and{@link #getSuggestedMinimumWidth()}). </p>
 * @param widthMeasureSpec horizontal space requirements as imposed by the parent.The requirements are encoded with {@link android.view.View.MeasureSpec}.
 * @param heightMeasureSpec vertical space requirements as imposed by the parent.The requirements are encoded with {@link android.view.View.MeasureSpec}.
 * @see #getMeasuredWidth()
 * @see #getMeasuredHeight()
 * @see #setMeasuredDimension(int,int)
 * @see #getSuggestedMinimumHeight()
 * @see #getSuggestedMinimumWidth()
 * @see android.view.View.MeasureSpec#getMode(int)
 * @see android.view.View.MeasureSpec#getSize(int)
 */
protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec),getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec));
}",0.9997376016793492
195694,"/** 
 * <p> Trigger the scrollbars to draw. When invoked this method starts an animation to fade the scrollbars out after a fixed delay. If a subclass provides animated scrolling, the start delay should equal the duration of the scrolling animation. </p> <p> The animation starts only if at least one of the scrollbars is enabled, as specified by   {@link #isHorizontalScrollBarEnabled()} and{@link #isVerticalScrollBarEnabled()}. When the animation is started, this method returns true, and false otherwise. If the animation is started, this method calls   {@link #invalidate()} if the invalidate parameteris set to true; in that case the caller should not call  {@link #invalidate()}. </p> <p> This method should be invoked everytime a subclass directly updates the scroll parameters. </p>
 * @param startDelay the delay, in milliseconds, after which the animationshould start; when the delay is 0, the animation starts immediately
 * @param invalidate Wheter this method should call invalidate
 * @return true if the animation is played, false otherwise
 * @see #scrollBy(int,int)
 * @see #scrollTo(int,int)
 * @see #isHorizontalScrollBarEnabled()
 * @see #isVerticalScrollBarEnabled()
 * @see #setHorizontalScrollBarEnabled(boolean)
 * @see #setVerticalScrollBarEnabled(boolean)
 */
protected boolean awakenScrollBars(int startDelay,boolean invalidate){
  final ScrollabilityCache scrollCache=mScrollCache;
  if (scrollCache == null || !scrollCache.fadeScrollBars) {
    return false;
  }
  if (scrollCache.scrollBar == null) {
    scrollCache.scrollBar=new ScrollBarDrawable();
  }
  if (isHorizontalScrollBarEnabled() || isVerticalScrollBarEnabled()) {
    if (invalidate) {
      postInvalidateOnAnimation();
    }
    if (scrollCache.state == ScrollabilityCache.OFF) {
      final int KEY_REPEAT_FIRST_DELAY=750;
      startDelay=Math.max(KEY_REPEAT_FIRST_DELAY,startDelay);
    }
    long fadeStartTime=AnimationUtils.currentAnimationTimeMillis() + startDelay;
    scrollCache.fadeStartTime=fadeStartTime;
    scrollCache.state=ScrollabilityCache.ON;
    if (mAttachInfo != null) {
      mAttachInfo.mHandler.removeCallbacks(scrollCache);
      mAttachInfo.mHandler.postAtTime(scrollCache,fadeStartTime);
    }
    return true;
  }
  return false;
}","/** 
 * <p> Trigger the scrollbars to draw. When invoked this method starts an animation to fade the scrollbars out after a fixed delay. If a subclass provides animated scrolling, the start delay should equal the duration of the scrolling animation. </p> <p> The animation starts only if at least one of the scrollbars is enabled, as specified by   {@link #isHorizontalScrollBarEnabled()} and{@link #isVerticalScrollBarEnabled()}. When the animation is started, this method returns true, and false otherwise. If the animation is started, this method calls   {@link #invalidate()} if the invalidate parameteris set to true; in that case the caller should not call  {@link #invalidate()}. </p> <p> This method should be invoked every time a subclass directly updates the scroll parameters. </p>
 * @param startDelay the delay, in milliseconds, after which the animationshould start; when the delay is 0, the animation starts immediately
 * @param invalidate Whether this method should call invalidate
 * @return true if the animation is played, false otherwise
 * @see #scrollBy(int,int)
 * @see #scrollTo(int,int)
 * @see #isHorizontalScrollBarEnabled()
 * @see #isVerticalScrollBarEnabled()
 * @see #setHorizontalScrollBarEnabled(boolean)
 * @see #setVerticalScrollBarEnabled(boolean)
 */
protected boolean awakenScrollBars(int startDelay,boolean invalidate){
  final ScrollabilityCache scrollCache=mScrollCache;
  if (scrollCache == null || !scrollCache.fadeScrollBars) {
    return false;
  }
  if (scrollCache.scrollBar == null) {
    scrollCache.scrollBar=new ScrollBarDrawable();
  }
  if (isHorizontalScrollBarEnabled() || isVerticalScrollBarEnabled()) {
    if (invalidate) {
      postInvalidateOnAnimation();
    }
    if (scrollCache.state == ScrollabilityCache.OFF) {
      final int KEY_REPEAT_FIRST_DELAY=750;
      startDelay=Math.max(KEY_REPEAT_FIRST_DELAY,startDelay);
    }
    long fadeStartTime=AnimationUtils.currentAnimationTimeMillis() + startDelay;
    scrollCache.fadeStartTime=fadeStartTime;
    scrollCache.state=ScrollabilityCache.ON;
    if (mAttachInfo != null) {
      mAttachInfo.mHandler.removeCallbacks(scrollCache);
      mAttachInfo.mHandler.postAtTime(scrollCache,fadeStartTime);
    }
    return true;
  }
  return false;
}",0.9995573262505534
195695,"/** 
 * Updates the   {@link Paint} object used with the current layer (used only if the currentlayer type is not set to  {@link #LAYER_TYPE_NONE}). Changed properties of the Paint provided to   {@link #setLayerType(int,android.graphics.Paint)} will be used the next timethe View is redrawn, but  {@link #setLayerPaint(android.graphics.Paint)} must be called toensure that the view gets redrawn immediately. <p>A layer is associated with an optional  {@link android.graphics.Paint}instance that controls how the layer is composed on screen. The following properties of the paint are taken into account when composing the layer:</p> <ul> <li>  {@link android.graphics.Paint#getAlpha() Translucency (alpha)}</li> <li>  {@link android.graphics.Paint#getXfermode() Blending mode}</li> <li>  {@link android.graphics.Paint#getColorFilter() Color filter}</li> </ul> <p>If this view has an alpha value set to < 1.0 by calling   {@link #setAlpha(float)}, the alpha value of the layer's paint is superceded by this view's alpha value.</p>
 * @param paint The paint used to compose the layer. This argument is optionaland can be null. It is ignored when the layer type is {@link #LAYER_TYPE_NONE}
 * @see #setLayerType(int,android.graphics.Paint)
 */
public void setLayerPaint(Paint paint){
  int layerType=getLayerType();
  if (layerType != LAYER_TYPE_NONE) {
    mLayerPaint=paint == null ? new Paint() : paint;
    if (layerType == LAYER_TYPE_HARDWARE) {
      if (mRenderNode.setLayerPaint(mLayerPaint)) {
        invalidateViewProperty(false,false);
      }
    }
 else {
      invalidate();
    }
  }
}","/** 
 * Updates the   {@link Paint} object used with the current layer (used only if the currentlayer type is not set to  {@link #LAYER_TYPE_NONE}). Changed properties of the Paint provided to   {@link #setLayerType(int,android.graphics.Paint)} will be used the next timethe View is redrawn, but  {@link #setLayerPaint(android.graphics.Paint)} must be called toensure that the view gets redrawn immediately. <p>A layer is associated with an optional  {@link android.graphics.Paint}instance that controls how the layer is composed on screen. The following properties of the paint are taken into account when composing the layer:</p> <ul> <li>  {@link android.graphics.Paint#getAlpha() Translucency (alpha)}</li> <li>  {@link android.graphics.Paint#getXfermode() Blending mode}</li> <li>  {@link android.graphics.Paint#getColorFilter() Color filter}</li> </ul> <p>If this view has an alpha value set to < 1.0 by calling   {@link #setAlpha(float)}, the alpha value of the layer's paint is superseded by this view's alpha value.</p>
 * @param paint The paint used to compose the layer. This argument is optionaland can be null. It is ignored when the layer type is {@link #LAYER_TYPE_NONE}
 * @see #setLayerType(int,android.graphics.Paint)
 */
public void setLayerPaint(Paint paint){
  int layerType=getLayerType();
  if (layerType != LAYER_TYPE_NONE) {
    mLayerPaint=paint == null ? new Paint() : paint;
    if (layerType == LAYER_TYPE_HARDWARE) {
      if (mRenderNode.setLayerPaint(mLayerPaint)) {
        invalidateViewProperty(false,false);
      }
    }
 else {
      invalidate();
    }
  }
}",0.9993738259236068
195696,"/** 
 * Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. This method adds all focusable views regardless if we are in touch mode or only views focusable in touch mode if we are in touch mode or only views that can take accessibility focus if accessibility is enabeld depending on the focusable mode paramater.
 * @param views Focusable views found so far or null if all we are interested isthe number of focusables.
 * @param direction The direction of the focus.
 * @param focusableMode The type of focusables to be added.
 * @see #FOCUSABLES_ALL
 * @see #FOCUSABLES_TOUCH_MODE
 */
public void addFocusables(ArrayList<View> views,@FocusDirection int direction,@FocusableMode int focusableMode){
  if (views == null) {
    return;
  }
  if (!isFocusable()) {
    return;
  }
  if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE && isInTouchMode() && !isFocusableInTouchMode()) {
    return;
  }
  views.add(this);
}","/** 
 * Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. This method adds all focusable views regardless if we are in touch mode or only views focusable in touch mode if we are in touch mode or only views that can take accessibility focus if accessibility is enabled depending on the focusable mode parameter.
 * @param views Focusable views found so far or null if all we are interested isthe number of focusables.
 * @param direction The direction of the focus.
 * @param focusableMode The type of focusables to be added.
 * @see #FOCUSABLES_ALL
 * @see #FOCUSABLES_TOUCH_MODE
 */
public void addFocusables(ArrayList<View> views,@FocusDirection int direction,@FocusableMode int focusableMode){
  if (views == null) {
    return;
  }
  if (!isFocusable()) {
    return;
  }
  if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE && isInTouchMode() && !isFocusableInTouchMode()) {
    return;
  }
  views.add(this);
}",0.997029702970297
195697,"/** 
 * Return if the padding as been set thru relative values  {@link #setPaddingRelative(int,int,int,int)} or thru
 * @attr ref android.R.styleable#View_paddingStart or
 * @attr ref android.R.styleable#View_paddingEnd
 * @return true if the padding is relative or false if it is not.
 */
public boolean isPaddingRelative(){
  return (mUserPaddingStart != UNDEFINED_PADDING || mUserPaddingEnd != UNDEFINED_PADDING);
}","/** 
 * Return if the padding has been set through relative values  {@link #setPaddingRelative(int,int,int,int)} or through
 * @attr ref android.R.styleable#View_paddingStart or
 * @attr ref android.R.styleable#View_paddingEnd
 * @return true if the padding is relative or false if it is not.
 */
public boolean isPaddingRelative(){
  return (mUserPaddingStart != UNDEFINED_PADDING || mUserPaddingEnd != UNDEFINED_PADDING);
}",0.9869513641755636
195698,"/** 
 * This is a framework-internal mirror of onDetachedFromWindow() that's called after onDetachedFromWindow(). If you override this you *MUST* call super.onDetachedFromWindowInternal()! The super method should be called at the end of the overriden method to ensure subclasses are destroyed first
 * @hide
 */
protected void onDetachedFromWindowInternal(){
  mPrivateFlags&=~PFLAG_CANCEL_NEXT_UP_EVENT;
  mPrivateFlags3&=~PFLAG3_IS_LAID_OUT;
  removeUnsetPressCallback();
  removeLongPressCallback();
  removePerformClickCallback();
  removeSendViewScrolledAccessibilityEventCallback();
  stopNestedScroll();
  jumpDrawablesToCurrentState();
  destroyDrawingCache();
  cleanupDraw();
  mCurrentAnimation=null;
}","/** 
 * This is a framework-internal mirror of onDetachedFromWindow() that's called after onDetachedFromWindow(). If you override this you *MUST* call super.onDetachedFromWindowInternal()! The super method should be called at the end of the overridden method to ensure subclasses are destroyed first
 * @hide
 */
protected void onDetachedFromWindowInternal(){
  mPrivateFlags&=~PFLAG_CANCEL_NEXT_UP_EVENT;
  mPrivateFlags3&=~PFLAG3_IS_LAID_OUT;
  removeUnsetPressCallback();
  removeLongPressCallback();
  removePerformClickCallback();
  removeSendViewScrolledAccessibilityEventCallback();
  stopNestedScroll();
  jumpDrawablesToCurrentState();
  destroyDrawingCache();
  cleanupDraw();
  mCurrentAnimation=null;
}",0.9992992291520671
195699,"@Override public boolean onTouchEvent(MotionEvent ev){
  final int action=ev.getActionMasked();
  mVelocityTracker.addMovement(ev);
  boolean handled=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      final float y=ev.getY();
      mInitialTouchX=x;
      mInitialTouchY=mLastTouchY=y;
      mActivePointerId=ev.getPointerId(0);
      mIsDragging=findChildUnder(mInitialTouchX,mInitialTouchY) != null;
      handled=(!mIsDragging && mOnDismissedListener != null) || mCollapsibleHeight > 0;
      abortAnimation();
    }
  break;
case MotionEvent.ACTION_MOVE:
{
  int index=ev.findPointerIndex(mActivePointerId);
  if (index < 0) {
    Log.e(TAG,""String_Node_Str"" + mActivePointerId + ""String_Node_Str"");
    index=0;
    mActivePointerId=ev.getPointerId(0);
    mInitialTouchX=ev.getX();
    mInitialTouchY=mLastTouchY=ev.getY();
  }
  final float x=ev.getX(index);
  final float y=ev.getY(index);
  if (!mIsDragging) {
    final float dy=y - mInitialTouchY;
    if (Math.abs(dy) > mTouchSlop && findChildUnder(x,y) != null) {
      handled=mIsDragging=true;
      mLastTouchY=Math.max(mLastTouchY - mTouchSlop,Math.min(mLastTouchY + dy,mLastTouchY + mTouchSlop));
    }
  }
  if (mIsDragging) {
    final float dy=y - mLastTouchY;
    performDrag(dy);
  }
  mLastTouchY=y;
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int pointerIndex=ev.getActionIndex();
final int pointerId=ev.getPointerId(pointerIndex);
mActivePointerId=pointerId;
mInitialTouchX=ev.getX(pointerIndex);
mInitialTouchY=mLastTouchY=ev.getY(pointerIndex);
}
break;
case MotionEvent.ACTION_POINTER_UP:
{
onSecondaryPointerUp(ev);
}
break;
case MotionEvent.ACTION_UP:
{
final boolean wasDragging=mIsDragging;
mIsDragging=false;
if (!wasDragging && findChildUnder(mInitialTouchX,mInitialTouchY) == null && findChildUnder(ev.getX(),ev.getY()) == null) {
if (mOnDismissedListener != null) {
dispatchOnDismissed();
resetTouch();
return true;
}
}
if (mOpenOnClick && Math.abs(ev.getX() - mInitialTouchX) < mTouchSlop && Math.abs(ev.getY() - mInitialTouchY) < mTouchSlop) {
smoothScrollTo(0,0);
return true;
}
mVelocityTracker.computeCurrentVelocity(1000);
final float yvel=mVelocityTracker.getYVelocity(mActivePointerId);
if (Math.abs(yvel) > mMinFlingVelocity) {
if (mOnDismissedListener != null && yvel > 0 && mCollapseOffset > mCollapsibleHeight) {
smoothScrollTo(mCollapsibleHeight + mUncollapsibleHeight,yvel);
mDismissOnScrollerFinished=true;
}
 else {
smoothScrollTo(yvel < 0 ? 0 : mCollapsibleHeight,yvel);
}
}
 else {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
}
break;
case MotionEvent.ACTION_CANCEL:
{
if (mIsDragging) {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
return true;
}
}
return handled;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  final int action=ev.getActionMasked();
  mVelocityTracker.addMovement(ev);
  boolean handled=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      final float y=ev.getY();
      mInitialTouchX=x;
      mInitialTouchY=mLastTouchY=y;
      mActivePointerId=ev.getPointerId(0);
      final boolean hitView=findChildUnder(mInitialTouchX,mInitialTouchY) != null;
      handled=(!hitView && mOnDismissedListener != null) || mCollapsibleHeight > 0;
      mIsDragging=hitView && handled;
      abortAnimation();
    }
  break;
case MotionEvent.ACTION_MOVE:
{
  int index=ev.findPointerIndex(mActivePointerId);
  if (index < 0) {
    Log.e(TAG,""String_Node_Str"" + mActivePointerId + ""String_Node_Str"");
    index=0;
    mActivePointerId=ev.getPointerId(0);
    mInitialTouchX=ev.getX();
    mInitialTouchY=mLastTouchY=ev.getY();
  }
  final float x=ev.getX(index);
  final float y=ev.getY(index);
  if (!mIsDragging) {
    final float dy=y - mInitialTouchY;
    if (Math.abs(dy) > mTouchSlop && findChildUnder(x,y) != null) {
      handled=mIsDragging=true;
      mLastTouchY=Math.max(mLastTouchY - mTouchSlop,Math.min(mLastTouchY + dy,mLastTouchY + mTouchSlop));
    }
  }
  if (mIsDragging) {
    final float dy=y - mLastTouchY;
    performDrag(dy);
  }
  mLastTouchY=y;
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int pointerIndex=ev.getActionIndex();
final int pointerId=ev.getPointerId(pointerIndex);
mActivePointerId=pointerId;
mInitialTouchX=ev.getX(pointerIndex);
mInitialTouchY=mLastTouchY=ev.getY(pointerIndex);
}
break;
case MotionEvent.ACTION_POINTER_UP:
{
onSecondaryPointerUp(ev);
}
break;
case MotionEvent.ACTION_UP:
{
final boolean wasDragging=mIsDragging;
mIsDragging=false;
if (!wasDragging && findChildUnder(mInitialTouchX,mInitialTouchY) == null && findChildUnder(ev.getX(),ev.getY()) == null) {
if (mOnDismissedListener != null) {
dispatchOnDismissed();
resetTouch();
return true;
}
}
if (mOpenOnClick && Math.abs(ev.getX() - mInitialTouchX) < mTouchSlop && Math.abs(ev.getY() - mInitialTouchY) < mTouchSlop) {
smoothScrollTo(0,0);
return true;
}
mVelocityTracker.computeCurrentVelocity(1000);
final float yvel=mVelocityTracker.getYVelocity(mActivePointerId);
if (Math.abs(yvel) > mMinFlingVelocity) {
if (mOnDismissedListener != null && yvel > 0 && mCollapseOffset > mCollapsibleHeight) {
smoothScrollTo(mCollapsibleHeight + mUncollapsibleHeight,yvel);
mDismissOnScrollerFinished=true;
}
 else {
smoothScrollTo(yvel < 0 ? 0 : mCollapsibleHeight,yvel);
}
}
 else {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
}
break;
case MotionEvent.ACTION_CANCEL:
{
if (mIsDragging) {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
return true;
}
}
return handled;
}",0.9846207619713389
195700,"@Override public boolean onTouchEvent(MotionEvent ev){
  final int action=ev.getActionMasked();
  mVelocityTracker.addMovement(ev);
  boolean handled=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      final float y=ev.getY();
      mInitialTouchX=x;
      mInitialTouchY=mLastTouchY=y;
      mActivePointerId=ev.getPointerId(0);
      mIsDragging=findChildUnder(mInitialTouchX,mInitialTouchY) != null;
      handled=(!mIsDragging && mOnDismissedListener != null) || mCollapsibleHeight > 0;
      abortAnimation();
    }
  break;
case MotionEvent.ACTION_MOVE:
{
  int index=ev.findPointerIndex(mActivePointerId);
  if (index < 0) {
    Log.e(TAG,""String_Node_Str"" + mActivePointerId + ""String_Node_Str"");
    index=0;
    mActivePointerId=ev.getPointerId(0);
    mInitialTouchX=ev.getX();
    mInitialTouchY=mLastTouchY=ev.getY();
  }
  final float x=ev.getX(index);
  final float y=ev.getY(index);
  if (!mIsDragging) {
    final float dy=y - mInitialTouchY;
    if (Math.abs(dy) > mTouchSlop && findChildUnder(x,y) != null) {
      handled=mIsDragging=true;
      mLastTouchY=Math.max(mLastTouchY - mTouchSlop,Math.min(mLastTouchY + dy,mLastTouchY + mTouchSlop));
    }
  }
  if (mIsDragging) {
    final float dy=y - mLastTouchY;
    performDrag(dy);
  }
  mLastTouchY=y;
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int pointerIndex=ev.getActionIndex();
final int pointerId=ev.getPointerId(pointerIndex);
mActivePointerId=pointerId;
mInitialTouchX=ev.getX(pointerIndex);
mInitialTouchY=mLastTouchY=ev.getY(pointerIndex);
}
break;
case MotionEvent.ACTION_POINTER_UP:
{
onSecondaryPointerUp(ev);
}
break;
case MotionEvent.ACTION_UP:
{
final boolean wasDragging=mIsDragging;
mIsDragging=false;
if (!wasDragging && findChildUnder(mInitialTouchX,mInitialTouchY) == null && findChildUnder(ev.getX(),ev.getY()) == null) {
if (mOnDismissedListener != null) {
dispatchOnDismissed();
resetTouch();
return true;
}
}
if (mOpenOnClick && Math.abs(ev.getX() - mInitialTouchX) < mTouchSlop && Math.abs(ev.getY() - mInitialTouchY) < mTouchSlop) {
smoothScrollTo(0,0);
return true;
}
mVelocityTracker.computeCurrentVelocity(1000);
final float yvel=mVelocityTracker.getYVelocity(mActivePointerId);
if (Math.abs(yvel) > mMinFlingVelocity) {
if (mOnDismissedListener != null && yvel > 0 && mCollapseOffset > mCollapsibleHeight) {
smoothScrollTo(mCollapsibleHeight + mUncollapsibleHeight,yvel);
mDismissOnScrollerFinished=true;
}
 else {
smoothScrollTo(yvel < 0 ? 0 : mCollapsibleHeight,yvel);
}
}
 else {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
}
break;
case MotionEvent.ACTION_CANCEL:
{
if (mIsDragging) {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
return true;
}
}
return handled;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  final int action=ev.getActionMasked();
  mVelocityTracker.addMovement(ev);
  boolean handled=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      final float y=ev.getY();
      mInitialTouchX=x;
      mInitialTouchY=mLastTouchY=y;
      mActivePointerId=ev.getPointerId(0);
      final boolean hitView=findChildUnder(mInitialTouchX,mInitialTouchY) != null;
      handled=(!hitView && mOnDismissedListener != null) || mCollapsibleHeight > 0;
      mIsDragging=hitView && handled;
      abortAnimation();
    }
  break;
case MotionEvent.ACTION_MOVE:
{
  int index=ev.findPointerIndex(mActivePointerId);
  if (index < 0) {
    Log.e(TAG,""String_Node_Str"" + mActivePointerId + ""String_Node_Str"");
    index=0;
    mActivePointerId=ev.getPointerId(0);
    mInitialTouchX=ev.getX();
    mInitialTouchY=mLastTouchY=ev.getY();
  }
  final float x=ev.getX(index);
  final float y=ev.getY(index);
  if (!mIsDragging) {
    final float dy=y - mInitialTouchY;
    if (Math.abs(dy) > mTouchSlop && findChildUnder(x,y) != null) {
      handled=mIsDragging=true;
      mLastTouchY=Math.max(mLastTouchY - mTouchSlop,Math.min(mLastTouchY + dy,mLastTouchY + mTouchSlop));
    }
  }
  if (mIsDragging) {
    final float dy=y - mLastTouchY;
    performDrag(dy);
  }
  mLastTouchY=y;
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int pointerIndex=ev.getActionIndex();
final int pointerId=ev.getPointerId(pointerIndex);
mActivePointerId=pointerId;
mInitialTouchX=ev.getX(pointerIndex);
mInitialTouchY=mLastTouchY=ev.getY(pointerIndex);
}
break;
case MotionEvent.ACTION_POINTER_UP:
{
onSecondaryPointerUp(ev);
}
break;
case MotionEvent.ACTION_UP:
{
final boolean wasDragging=mIsDragging;
mIsDragging=false;
if (!wasDragging && findChildUnder(mInitialTouchX,mInitialTouchY) == null && findChildUnder(ev.getX(),ev.getY()) == null) {
if (mOnDismissedListener != null) {
dispatchOnDismissed();
resetTouch();
return true;
}
}
if (mOpenOnClick && Math.abs(ev.getX() - mInitialTouchX) < mTouchSlop && Math.abs(ev.getY() - mInitialTouchY) < mTouchSlop) {
smoothScrollTo(0,0);
return true;
}
mVelocityTracker.computeCurrentVelocity(1000);
final float yvel=mVelocityTracker.getYVelocity(mActivePointerId);
if (Math.abs(yvel) > mMinFlingVelocity) {
if (mOnDismissedListener != null && yvel > 0 && mCollapseOffset > mCollapsibleHeight) {
smoothScrollTo(mCollapsibleHeight + mUncollapsibleHeight,yvel);
mDismissOnScrollerFinished=true;
}
 else {
smoothScrollTo(yvel < 0 ? 0 : mCollapsibleHeight,yvel);
}
}
 else {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
}
break;
case MotionEvent.ACTION_CANCEL:
{
if (mIsDragging) {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
return true;
}
}
return handled;
}",0.9846207619713389
195701,"@Override public boolean onTouchEvent(MotionEvent ev){
  final int action=ev.getActionMasked();
  mVelocityTracker.addMovement(ev);
  boolean handled=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      final float y=ev.getY();
      mInitialTouchX=x;
      mInitialTouchY=mLastTouchY=y;
      mActivePointerId=ev.getPointerId(0);
      mIsDragging=findChildUnder(mInitialTouchX,mInitialTouchY) != null;
      handled=(!mIsDragging && mOnDismissedListener != null) || mCollapsibleHeight > 0;
      abortAnimation();
    }
  break;
case MotionEvent.ACTION_MOVE:
{
  int index=ev.findPointerIndex(mActivePointerId);
  if (index < 0) {
    Log.e(TAG,""String_Node_Str"" + mActivePointerId + ""String_Node_Str"");
    index=0;
    mActivePointerId=ev.getPointerId(0);
    mInitialTouchX=ev.getX();
    mInitialTouchY=mLastTouchY=ev.getY();
  }
  final float x=ev.getX(index);
  final float y=ev.getY(index);
  if (!mIsDragging) {
    final float dy=y - mInitialTouchY;
    if (Math.abs(dy) > mTouchSlop && findChildUnder(x,y) != null) {
      handled=mIsDragging=true;
      mLastTouchY=Math.max(mLastTouchY - mTouchSlop,Math.min(mLastTouchY + dy,mLastTouchY + mTouchSlop));
    }
  }
  if (mIsDragging) {
    final float dy=y - mLastTouchY;
    performDrag(dy);
  }
  mLastTouchY=y;
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int pointerIndex=ev.getActionIndex();
final int pointerId=ev.getPointerId(pointerIndex);
mActivePointerId=pointerId;
mInitialTouchX=ev.getX(pointerIndex);
mInitialTouchY=mLastTouchY=ev.getY(pointerIndex);
}
break;
case MotionEvent.ACTION_POINTER_UP:
{
onSecondaryPointerUp(ev);
}
break;
case MotionEvent.ACTION_UP:
{
final boolean wasDragging=mIsDragging;
mIsDragging=false;
if (!wasDragging && findChildUnder(mInitialTouchX,mInitialTouchY) == null && findChildUnder(ev.getX(),ev.getY()) == null) {
if (mOnDismissedListener != null) {
dispatchOnDismissed();
resetTouch();
return true;
}
}
if (mOpenOnClick && Math.abs(ev.getX() - mInitialTouchX) < mTouchSlop && Math.abs(ev.getY() - mInitialTouchY) < mTouchSlop) {
smoothScrollTo(0,0);
return true;
}
mVelocityTracker.computeCurrentVelocity(1000);
final float yvel=mVelocityTracker.getYVelocity(mActivePointerId);
if (Math.abs(yvel) > mMinFlingVelocity) {
if (mOnDismissedListener != null && yvel > 0 && mCollapseOffset > mCollapsibleHeight) {
smoothScrollTo(mCollapsibleHeight + mUncollapsibleHeight,yvel);
mDismissOnScrollerFinished=true;
}
 else {
smoothScrollTo(yvel < 0 ? 0 : mCollapsibleHeight,yvel);
}
}
 else {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
}
break;
case MotionEvent.ACTION_CANCEL:
{
if (mIsDragging) {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
return true;
}
}
return handled;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  final int action=ev.getActionMasked();
  mVelocityTracker.addMovement(ev);
  boolean handled=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      final float y=ev.getY();
      mInitialTouchX=x;
      mInitialTouchY=mLastTouchY=y;
      mActivePointerId=ev.getPointerId(0);
      final boolean hitView=findChildUnder(mInitialTouchX,mInitialTouchY) != null;
      handled=(!hitView && mOnDismissedListener != null) || mCollapsibleHeight > 0;
      mIsDragging=hitView && handled;
      abortAnimation();
    }
  break;
case MotionEvent.ACTION_MOVE:
{
  int index=ev.findPointerIndex(mActivePointerId);
  if (index < 0) {
    Log.e(TAG,""String_Node_Str"" + mActivePointerId + ""String_Node_Str"");
    index=0;
    mActivePointerId=ev.getPointerId(0);
    mInitialTouchX=ev.getX();
    mInitialTouchY=mLastTouchY=ev.getY();
  }
  final float x=ev.getX(index);
  final float y=ev.getY(index);
  if (!mIsDragging) {
    final float dy=y - mInitialTouchY;
    if (Math.abs(dy) > mTouchSlop && findChildUnder(x,y) != null) {
      handled=mIsDragging=true;
      mLastTouchY=Math.max(mLastTouchY - mTouchSlop,Math.min(mLastTouchY + dy,mLastTouchY + mTouchSlop));
    }
  }
  if (mIsDragging) {
    final float dy=y - mLastTouchY;
    performDrag(dy);
  }
  mLastTouchY=y;
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int pointerIndex=ev.getActionIndex();
final int pointerId=ev.getPointerId(pointerIndex);
mActivePointerId=pointerId;
mInitialTouchX=ev.getX(pointerIndex);
mInitialTouchY=mLastTouchY=ev.getY(pointerIndex);
}
break;
case MotionEvent.ACTION_POINTER_UP:
{
onSecondaryPointerUp(ev);
}
break;
case MotionEvent.ACTION_UP:
{
final boolean wasDragging=mIsDragging;
mIsDragging=false;
if (!wasDragging && findChildUnder(mInitialTouchX,mInitialTouchY) == null && findChildUnder(ev.getX(),ev.getY()) == null) {
if (mOnDismissedListener != null) {
dispatchOnDismissed();
resetTouch();
return true;
}
}
if (mOpenOnClick && Math.abs(ev.getX() - mInitialTouchX) < mTouchSlop && Math.abs(ev.getY() - mInitialTouchY) < mTouchSlop) {
smoothScrollTo(0,0);
return true;
}
mVelocityTracker.computeCurrentVelocity(1000);
final float yvel=mVelocityTracker.getYVelocity(mActivePointerId);
if (Math.abs(yvel) > mMinFlingVelocity) {
if (mOnDismissedListener != null && yvel > 0 && mCollapseOffset > mCollapsibleHeight) {
smoothScrollTo(mCollapsibleHeight + mUncollapsibleHeight,yvel);
mDismissOnScrollerFinished=true;
}
 else {
smoothScrollTo(yvel < 0 ? 0 : mCollapsibleHeight,yvel);
}
}
 else {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
}
break;
case MotionEvent.ACTION_CANCEL:
{
if (mIsDragging) {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
return true;
}
}
return handled;
}",0.9846207619713389
195702,"@Override public boolean onTouchEvent(MotionEvent ev){
  final int action=ev.getActionMasked();
  mVelocityTracker.addMovement(ev);
  boolean handled=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      final float y=ev.getY();
      mInitialTouchX=x;
      mInitialTouchY=mLastTouchY=y;
      mActivePointerId=ev.getPointerId(0);
      mIsDragging=findChildUnder(mInitialTouchX,mInitialTouchY) != null;
      handled=(!mIsDragging && mOnDismissedListener != null) || mCollapsibleHeight > 0;
      abortAnimation();
    }
  break;
case MotionEvent.ACTION_MOVE:
{
  int index=ev.findPointerIndex(mActivePointerId);
  if (index < 0) {
    Log.e(TAG,""String_Node_Str"" + mActivePointerId + ""String_Node_Str"");
    index=0;
    mActivePointerId=ev.getPointerId(0);
    mInitialTouchX=ev.getX();
    mInitialTouchY=mLastTouchY=ev.getY();
  }
  final float x=ev.getX(index);
  final float y=ev.getY(index);
  if (!mIsDragging) {
    final float dy=y - mInitialTouchY;
    if (Math.abs(dy) > mTouchSlop && findChildUnder(x,y) != null) {
      handled=mIsDragging=true;
      mLastTouchY=Math.max(mLastTouchY - mTouchSlop,Math.min(mLastTouchY + dy,mLastTouchY + mTouchSlop));
    }
  }
  if (mIsDragging) {
    final float dy=y - mLastTouchY;
    performDrag(dy);
  }
  mLastTouchY=y;
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int pointerIndex=ev.getActionIndex();
final int pointerId=ev.getPointerId(pointerIndex);
mActivePointerId=pointerId;
mInitialTouchX=ev.getX(pointerIndex);
mInitialTouchY=mLastTouchY=ev.getY(pointerIndex);
}
break;
case MotionEvent.ACTION_POINTER_UP:
{
onSecondaryPointerUp(ev);
}
break;
case MotionEvent.ACTION_UP:
{
final boolean wasDragging=mIsDragging;
mIsDragging=false;
if (!wasDragging && findChildUnder(mInitialTouchX,mInitialTouchY) == null && findChildUnder(ev.getX(),ev.getY()) == null) {
if (mOnDismissedListener != null) {
dispatchOnDismissed();
resetTouch();
return true;
}
}
if (mOpenOnClick && Math.abs(ev.getX() - mInitialTouchX) < mTouchSlop && Math.abs(ev.getY() - mInitialTouchY) < mTouchSlop) {
smoothScrollTo(0,0);
return true;
}
mVelocityTracker.computeCurrentVelocity(1000);
final float yvel=mVelocityTracker.getYVelocity(mActivePointerId);
if (Math.abs(yvel) > mMinFlingVelocity) {
if (mOnDismissedListener != null && yvel > 0 && mCollapseOffset > mCollapsibleHeight) {
smoothScrollTo(mCollapsibleHeight + mUncollapsibleHeight,yvel);
mDismissOnScrollerFinished=true;
}
 else {
smoothScrollTo(yvel < 0 ? 0 : mCollapsibleHeight,yvel);
}
}
 else {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
}
break;
case MotionEvent.ACTION_CANCEL:
{
if (mIsDragging) {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
return true;
}
}
return handled;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  final int action=ev.getActionMasked();
  mVelocityTracker.addMovement(ev);
  boolean handled=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      final float y=ev.getY();
      mInitialTouchX=x;
      mInitialTouchY=mLastTouchY=y;
      mActivePointerId=ev.getPointerId(0);
      final boolean hitView=findChildUnder(mInitialTouchX,mInitialTouchY) != null;
      handled=(!hitView && mOnDismissedListener != null) || mCollapsibleHeight > 0;
      mIsDragging=hitView && handled;
      abortAnimation();
    }
  break;
case MotionEvent.ACTION_MOVE:
{
  int index=ev.findPointerIndex(mActivePointerId);
  if (index < 0) {
    Log.e(TAG,""String_Node_Str"" + mActivePointerId + ""String_Node_Str"");
    index=0;
    mActivePointerId=ev.getPointerId(0);
    mInitialTouchX=ev.getX();
    mInitialTouchY=mLastTouchY=ev.getY();
  }
  final float x=ev.getX(index);
  final float y=ev.getY(index);
  if (!mIsDragging) {
    final float dy=y - mInitialTouchY;
    if (Math.abs(dy) > mTouchSlop && findChildUnder(x,y) != null) {
      handled=mIsDragging=true;
      mLastTouchY=Math.max(mLastTouchY - mTouchSlop,Math.min(mLastTouchY + dy,mLastTouchY + mTouchSlop));
    }
  }
  if (mIsDragging) {
    final float dy=y - mLastTouchY;
    performDrag(dy);
  }
  mLastTouchY=y;
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int pointerIndex=ev.getActionIndex();
final int pointerId=ev.getPointerId(pointerIndex);
mActivePointerId=pointerId;
mInitialTouchX=ev.getX(pointerIndex);
mInitialTouchY=mLastTouchY=ev.getY(pointerIndex);
}
break;
case MotionEvent.ACTION_POINTER_UP:
{
onSecondaryPointerUp(ev);
}
break;
case MotionEvent.ACTION_UP:
{
final boolean wasDragging=mIsDragging;
mIsDragging=false;
if (!wasDragging && findChildUnder(mInitialTouchX,mInitialTouchY) == null && findChildUnder(ev.getX(),ev.getY()) == null) {
if (mOnDismissedListener != null) {
dispatchOnDismissed();
resetTouch();
return true;
}
}
if (mOpenOnClick && Math.abs(ev.getX() - mInitialTouchX) < mTouchSlop && Math.abs(ev.getY() - mInitialTouchY) < mTouchSlop) {
smoothScrollTo(0,0);
return true;
}
mVelocityTracker.computeCurrentVelocity(1000);
final float yvel=mVelocityTracker.getYVelocity(mActivePointerId);
if (Math.abs(yvel) > mMinFlingVelocity) {
if (mOnDismissedListener != null && yvel > 0 && mCollapseOffset > mCollapsibleHeight) {
smoothScrollTo(mCollapsibleHeight + mUncollapsibleHeight,yvel);
mDismissOnScrollerFinished=true;
}
 else {
smoothScrollTo(yvel < 0 ? 0 : mCollapsibleHeight,yvel);
}
}
 else {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
}
break;
case MotionEvent.ACTION_CANCEL:
{
if (mIsDragging) {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
return true;
}
}
return handled;
}",0.9846207619713389
195703,"@Override public boolean onTouchEvent(MotionEvent ev){
  final int action=ev.getActionMasked();
  mVelocityTracker.addMovement(ev);
  boolean handled=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      final float y=ev.getY();
      mInitialTouchX=x;
      mInitialTouchY=mLastTouchY=y;
      mActivePointerId=ev.getPointerId(0);
      mIsDragging=findChildUnder(mInitialTouchX,mInitialTouchY) != null;
      handled=(!mIsDragging && mOnDismissedListener != null) || mCollapsibleHeight > 0;
      abortAnimation();
    }
  break;
case MotionEvent.ACTION_MOVE:
{
  int index=ev.findPointerIndex(mActivePointerId);
  if (index < 0) {
    Log.e(TAG,""String_Node_Str"" + mActivePointerId + ""String_Node_Str"");
    index=0;
    mActivePointerId=ev.getPointerId(0);
    mInitialTouchX=ev.getX();
    mInitialTouchY=mLastTouchY=ev.getY();
  }
  final float x=ev.getX(index);
  final float y=ev.getY(index);
  if (!mIsDragging) {
    final float dy=y - mInitialTouchY;
    if (Math.abs(dy) > mTouchSlop && findChildUnder(x,y) != null) {
      handled=mIsDragging=true;
      mLastTouchY=Math.max(mLastTouchY - mTouchSlop,Math.min(mLastTouchY + dy,mLastTouchY + mTouchSlop));
    }
  }
  if (mIsDragging) {
    final float dy=y - mLastTouchY;
    performDrag(dy);
  }
  mLastTouchY=y;
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int pointerIndex=ev.getActionIndex();
final int pointerId=ev.getPointerId(pointerIndex);
mActivePointerId=pointerId;
mInitialTouchX=ev.getX(pointerIndex);
mInitialTouchY=mLastTouchY=ev.getY(pointerIndex);
}
break;
case MotionEvent.ACTION_POINTER_UP:
{
onSecondaryPointerUp(ev);
}
break;
case MotionEvent.ACTION_UP:
{
final boolean wasDragging=mIsDragging;
mIsDragging=false;
if (!wasDragging && findChildUnder(mInitialTouchX,mInitialTouchY) == null && findChildUnder(ev.getX(),ev.getY()) == null) {
if (mOnDismissedListener != null) {
dispatchOnDismissed();
resetTouch();
return true;
}
}
if (mOpenOnClick && Math.abs(ev.getX() - mInitialTouchX) < mTouchSlop && Math.abs(ev.getY() - mInitialTouchY) < mTouchSlop) {
smoothScrollTo(0,0);
return true;
}
mVelocityTracker.computeCurrentVelocity(1000);
final float yvel=mVelocityTracker.getYVelocity(mActivePointerId);
if (Math.abs(yvel) > mMinFlingVelocity) {
if (mOnDismissedListener != null && yvel > 0 && mCollapseOffset > mCollapsibleHeight) {
smoothScrollTo(mCollapsibleHeight + mUncollapsibleHeight,yvel);
mDismissOnScrollerFinished=true;
}
 else {
smoothScrollTo(yvel < 0 ? 0 : mCollapsibleHeight,yvel);
}
}
 else {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
}
break;
case MotionEvent.ACTION_CANCEL:
{
if (mIsDragging) {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
return true;
}
}
return handled;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  final int action=ev.getActionMasked();
  mVelocityTracker.addMovement(ev);
  boolean handled=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      final float y=ev.getY();
      mInitialTouchX=x;
      mInitialTouchY=mLastTouchY=y;
      mActivePointerId=ev.getPointerId(0);
      final boolean hitView=findChildUnder(mInitialTouchX,mInitialTouchY) != null;
      handled=(!hitView && mOnDismissedListener != null) || mCollapsibleHeight > 0;
      mIsDragging=hitView && handled;
      abortAnimation();
    }
  break;
case MotionEvent.ACTION_MOVE:
{
  int index=ev.findPointerIndex(mActivePointerId);
  if (index < 0) {
    Log.e(TAG,""String_Node_Str"" + mActivePointerId + ""String_Node_Str"");
    index=0;
    mActivePointerId=ev.getPointerId(0);
    mInitialTouchX=ev.getX();
    mInitialTouchY=mLastTouchY=ev.getY();
  }
  final float x=ev.getX(index);
  final float y=ev.getY(index);
  if (!mIsDragging) {
    final float dy=y - mInitialTouchY;
    if (Math.abs(dy) > mTouchSlop && findChildUnder(x,y) != null) {
      handled=mIsDragging=true;
      mLastTouchY=Math.max(mLastTouchY - mTouchSlop,Math.min(mLastTouchY + dy,mLastTouchY + mTouchSlop));
    }
  }
  if (mIsDragging) {
    final float dy=y - mLastTouchY;
    performDrag(dy);
  }
  mLastTouchY=y;
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int pointerIndex=ev.getActionIndex();
final int pointerId=ev.getPointerId(pointerIndex);
mActivePointerId=pointerId;
mInitialTouchX=ev.getX(pointerIndex);
mInitialTouchY=mLastTouchY=ev.getY(pointerIndex);
}
break;
case MotionEvent.ACTION_POINTER_UP:
{
onSecondaryPointerUp(ev);
}
break;
case MotionEvent.ACTION_UP:
{
final boolean wasDragging=mIsDragging;
mIsDragging=false;
if (!wasDragging && findChildUnder(mInitialTouchX,mInitialTouchY) == null && findChildUnder(ev.getX(),ev.getY()) == null) {
if (mOnDismissedListener != null) {
dispatchOnDismissed();
resetTouch();
return true;
}
}
if (mOpenOnClick && Math.abs(ev.getX() - mInitialTouchX) < mTouchSlop && Math.abs(ev.getY() - mInitialTouchY) < mTouchSlop) {
smoothScrollTo(0,0);
return true;
}
mVelocityTracker.computeCurrentVelocity(1000);
final float yvel=mVelocityTracker.getYVelocity(mActivePointerId);
if (Math.abs(yvel) > mMinFlingVelocity) {
if (mOnDismissedListener != null && yvel > 0 && mCollapseOffset > mCollapsibleHeight) {
smoothScrollTo(mCollapsibleHeight + mUncollapsibleHeight,yvel);
mDismissOnScrollerFinished=true;
}
 else {
smoothScrollTo(yvel < 0 ? 0 : mCollapsibleHeight,yvel);
}
}
 else {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
}
break;
case MotionEvent.ACTION_CANCEL:
{
if (mIsDragging) {
smoothScrollTo(mCollapseOffset < mCollapsibleHeight / 2 ? 0 : mCollapsibleHeight,0);
}
resetTouch();
return true;
}
}
return handled;
}",0.9846207619713389
195704,"/** 
 * Preflight adding a window to the system. Currently enforces that three window types are singletons: <ul> <li>STATUS_BAR_TYPE</li> <li>KEYGUARD_TYPE</li> </ul>
 * @param win The window to be added
 * @param attrs Information about the window to be added
 * @return If ok, WindowManagerImpl.ADD_OKAY.  If too many singletons,WindowManagerImpl.ADD_MULTIPLE_SINGLETON
 */
@Override public int prepareAddWindowLw(WindowState win,WindowManager.LayoutParams attrs){
switch (attrs.type) {
case TYPE_STATUS_BAR:
    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
  if (mStatusBar != null) {
    if (mStatusBar.isAlive()) {
      return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;
    }
  }
mStatusBar=win;
mStatusBarController.setWindow(win);
mKeyguardDelegate.hideScrim();
break;
case TYPE_NAVIGATION_BAR:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
if (mNavigationBar != null) {
if (mNavigationBar.isAlive()) {
return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;
}
}
mNavigationBar=win;
mNavigationBarController.setWindow(win);
if (DEBUG_LAYOUT) Slog.i(TAG,""String_Node_Str"" + mNavigationBar);
break;
case TYPE_NAVIGATION_BAR_PANEL:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
break;
case TYPE_STATUS_BAR_PANEL:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
break;
case TYPE_STATUS_BAR_SUB_PANEL:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
break;
case TYPE_KEYGUARD_SCRIM:
if (mKeyguardScrim != null) {
return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;
}
mKeyguardScrim=win;
break;
}
return WindowManagerGlobal.ADD_OKAY;
}","/** 
 * Preflight adding a window to the system. Currently enforces that three window types are singletons: <ul> <li>STATUS_BAR_TYPE</li> <li>KEYGUARD_TYPE</li> </ul>
 * @param win The window to be added
 * @param attrs Information about the window to be added
 * @return If ok, WindowManagerImpl.ADD_OKAY.  If too many singletons,WindowManagerImpl.ADD_MULTIPLE_SINGLETON
 */
@Override public int prepareAddWindowLw(WindowState win,WindowManager.LayoutParams attrs){
switch (attrs.type) {
case TYPE_STATUS_BAR:
    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
  if (mStatusBar != null) {
    if (mStatusBar.isAlive()) {
      return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;
    }
  }
mStatusBar=win;
mStatusBarController.setWindow(win);
break;
case TYPE_NAVIGATION_BAR:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
if (mNavigationBar != null) {
if (mNavigationBar.isAlive()) {
return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;
}
}
mNavigationBar=win;
mNavigationBarController.setWindow(win);
if (DEBUG_LAYOUT) Slog.i(TAG,""String_Node_Str"" + mNavigationBar);
break;
case TYPE_NAVIGATION_BAR_PANEL:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
break;
case TYPE_STATUS_BAR_PANEL:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
break;
case TYPE_STATUS_BAR_SUB_PANEL:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
break;
case TYPE_KEYGUARD_SCRIM:
if (mKeyguardScrim != null) {
return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;
}
mKeyguardScrim=win;
break;
}
return WindowManagerGlobal.ADD_OKAY;
}",0.9914764916139676
195705,"KeyguardState(){
  showing=true;
  showingAndNotOccluded=true;
  secure=true;
}","KeyguardState(){
  showing=true;
  showingAndNotOccluded=true;
  secure=true;
  deviceHasKeyguard=true;
}",0.8586956521739131
195706,"private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setVisibility(View.GONE);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}","private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}",0.9853658536585366
195707,"public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    showListener.onShown(null);
  }
  mKeyguardState.screenIsOn=true;
}","public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    mShowListenerWhenConnect=showListener;
    showScrim();
  }
  mKeyguardState.screenIsOn=true;
}",0.9005102040816326
195708,"public void showScrim(){
  mScrim.post(new Runnable(){
    @Override public void run(){
      mScrim.setVisibility(View.VISIBLE);
    }
  }
);
}","public void showScrim(){
  if (!mKeyguardState.deviceHasKeyguard)   return;
  mScrim.post(new Runnable(){
    @Override public void run(){
      mScrim.setVisibility(View.VISIBLE);
    }
  }
);
}",0.8495575221238938
195709,"@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(null));
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(mShowListenerWhenConnect));
    mShowListenerWhenConnect=null;
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}",0.9391124871001032
195710,"public void bindService(Context context){
  Intent intent=new Intent();
  intent.setClassName(KEYGUARD_PACKAGE,KEYGUARD_CLASS);
  if (!context.bindServiceAsUser(intent,mKeyguardConnection,Context.BIND_AUTO_CREATE,UserHandle.OWNER)) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + KEYGUARD_CLASS);
    mKeyguardState.showing=false;
    mKeyguardState.showingAndNotOccluded=false;
    mKeyguardState.secure=false;
  }
 else {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"");
  }
}","public void bindService(Context context){
  Intent intent=new Intent();
  intent.setClassName(KEYGUARD_PACKAGE,KEYGUARD_CLASS);
  if (!context.bindServiceAsUser(intent,mKeyguardConnection,Context.BIND_AUTO_CREATE,UserHandle.OWNER)) {
    Log.v(TAG,""String_Node_Str"" + KEYGUARD_CLASS);
    mKeyguardState.showing=false;
    mKeyguardState.showingAndNotOccluded=false;
    mKeyguardState.secure=false;
    mKeyguardState.deviceHasKeyguard=false;
    hideScrim();
  }
 else {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"");
  }
}",0.9246031746031746
195711,"/** 
 * Preflight adding a window to the system. Currently enforces that three window types are singletons: <ul> <li>STATUS_BAR_TYPE</li> <li>KEYGUARD_TYPE</li> </ul>
 * @param win The window to be added
 * @param attrs Information about the window to be added
 * @return If ok, WindowManagerImpl.ADD_OKAY.  If too many singletons,WindowManagerImpl.ADD_MULTIPLE_SINGLETON
 */
@Override public int prepareAddWindowLw(WindowState win,WindowManager.LayoutParams attrs){
switch (attrs.type) {
case TYPE_STATUS_BAR:
    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
  if (mStatusBar != null) {
    if (mStatusBar.isAlive()) {
      return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;
    }
  }
mStatusBar=win;
mStatusBarController.setWindow(win);
mKeyguardDelegate.hideScrim();
break;
case TYPE_NAVIGATION_BAR:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
if (mNavigationBar != null) {
if (mNavigationBar.isAlive()) {
return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;
}
}
mNavigationBar=win;
mNavigationBarController.setWindow(win);
if (DEBUG_LAYOUT) Slog.i(TAG,""String_Node_Str"" + mNavigationBar);
break;
case TYPE_NAVIGATION_BAR_PANEL:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
break;
case TYPE_STATUS_BAR_PANEL:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
break;
case TYPE_STATUS_BAR_SUB_PANEL:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
break;
case TYPE_KEYGUARD_SCRIM:
if (mKeyguardScrim != null) {
return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;
}
mKeyguardScrim=win;
break;
}
return WindowManagerGlobal.ADD_OKAY;
}","/** 
 * Preflight adding a window to the system. Currently enforces that three window types are singletons: <ul> <li>STATUS_BAR_TYPE</li> <li>KEYGUARD_TYPE</li> </ul>
 * @param win The window to be added
 * @param attrs Information about the window to be added
 * @return If ok, WindowManagerImpl.ADD_OKAY.  If too many singletons,WindowManagerImpl.ADD_MULTIPLE_SINGLETON
 */
@Override public int prepareAddWindowLw(WindowState win,WindowManager.LayoutParams attrs){
switch (attrs.type) {
case TYPE_STATUS_BAR:
    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
  if (mStatusBar != null) {
    if (mStatusBar.isAlive()) {
      return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;
    }
  }
mStatusBar=win;
mStatusBarController.setWindow(win);
break;
case TYPE_NAVIGATION_BAR:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
if (mNavigationBar != null) {
if (mNavigationBar.isAlive()) {
return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;
}
}
mNavigationBar=win;
mNavigationBarController.setWindow(win);
if (DEBUG_LAYOUT) Slog.i(TAG,""String_Node_Str"" + mNavigationBar);
break;
case TYPE_NAVIGATION_BAR_PANEL:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
break;
case TYPE_STATUS_BAR_PANEL:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
break;
case TYPE_STATUS_BAR_SUB_PANEL:
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,""String_Node_Str"");
break;
case TYPE_KEYGUARD_SCRIM:
if (mKeyguardScrim != null) {
return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;
}
mKeyguardScrim=win;
break;
}
return WindowManagerGlobal.ADD_OKAY;
}",0.9914764916139676
195712,"KeyguardState(){
  showing=true;
  showingAndNotOccluded=true;
  secure=true;
}","KeyguardState(){
  showing=true;
  showingAndNotOccluded=true;
  secure=true;
  deviceHasKeyguard=true;
}",0.8586956521739131
195713,"private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setVisibility(View.GONE);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}","private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}",0.9853658536585366
195714,"public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    showListener.onShown(null);
  }
  mKeyguardState.screenIsOn=true;
}","public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    mShowListenerWhenConnect=showListener;
    showScrim();
  }
  mKeyguardState.screenIsOn=true;
}",0.9005102040816326
195715,"public void showScrim(){
  mScrim.post(new Runnable(){
    @Override public void run(){
      mScrim.setVisibility(View.VISIBLE);
    }
  }
);
}","public void showScrim(){
  if (!mKeyguardState.deviceHasKeyguard)   return;
  mScrim.post(new Runnable(){
    @Override public void run(){
      mScrim.setVisibility(View.VISIBLE);
    }
  }
);
}",0.8495575221238938
195716,"@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(null));
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(mShowListenerWhenConnect));
    mShowListenerWhenConnect=null;
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}",0.9391124871001032
195717,"public void bindService(Context context){
  Intent intent=new Intent();
  intent.setClassName(KEYGUARD_PACKAGE,KEYGUARD_CLASS);
  if (!context.bindServiceAsUser(intent,mKeyguardConnection,Context.BIND_AUTO_CREATE,UserHandle.OWNER)) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + KEYGUARD_CLASS);
    mKeyguardState.showing=false;
    mKeyguardState.showingAndNotOccluded=false;
    mKeyguardState.secure=false;
  }
 else {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"");
  }
}","public void bindService(Context context){
  Intent intent=new Intent();
  intent.setClassName(KEYGUARD_PACKAGE,KEYGUARD_CLASS);
  if (!context.bindServiceAsUser(intent,mKeyguardConnection,Context.BIND_AUTO_CREATE,UserHandle.OWNER)) {
    Log.v(TAG,""String_Node_Str"" + KEYGUARD_CLASS);
    mKeyguardState.showing=false;
    mKeyguardState.showingAndNotOccluded=false;
    mKeyguardState.secure=false;
    mKeyguardState.deviceHasKeyguard=false;
    hideScrim();
  }
 else {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"");
  }
}",0.9246031746031746
195718,"boolean checkAllowNonWakeupDelayLocked(long nowELAPSED){
  if (mInteractive) {
    return false;
  }
  if (mLastAlarmDeliveryTime <= 0) {
    return false;
  }
  if (mPendingNonWakeupAlarms.size() > 0 && mNextNonWakeupDeliveryTime > nowELAPSED) {
    return false;
  }
  long timeSinceLast=nowELAPSED - mLastAlarmDeliveryTime;
  return timeSinceLast <= currentNonWakeupFuzzLocked(nowELAPSED);
}","boolean checkAllowNonWakeupDelayLocked(long nowELAPSED){
  if (mInteractive) {
    return false;
  }
  if (mLastAlarmDeliveryTime <= 0) {
    return false;
  }
  if (mPendingNonWakeupAlarms.size() > 0 && mNextNonWakeupDeliveryTime < nowELAPSED) {
    return false;
  }
  long timeSinceLast=nowELAPSED - mLastAlarmDeliveryTime;
  return timeSinceLast <= currentNonWakeupFuzzLocked(nowELAPSED);
}",0.9974619289340102
195719,"boolean checkAllowNonWakeupDelayLocked(long nowELAPSED){
  if (mInteractive) {
    return false;
  }
  if (mLastAlarmDeliveryTime <= 0) {
    return false;
  }
  if (mPendingNonWakeupAlarms.size() > 0 && mNextNonWakeupDeliveryTime > nowELAPSED) {
    return false;
  }
  long timeSinceLast=nowELAPSED - mLastAlarmDeliveryTime;
  return timeSinceLast <= currentNonWakeupFuzzLocked(nowELAPSED);
}","boolean checkAllowNonWakeupDelayLocked(long nowELAPSED){
  if (mInteractive) {
    return false;
  }
  if (mLastAlarmDeliveryTime <= 0) {
    return false;
  }
  if (mPendingNonWakeupAlarms.size() > 0 && mNextNonWakeupDeliveryTime < nowELAPSED) {
    return false;
  }
  long timeSinceLast=nowELAPSED - mLastAlarmDeliveryTime;
  return timeSinceLast <= currentNonWakeupFuzzLocked(nowELAPSED);
}",0.9974619289340102
195720,"boolean checkAllowNonWakeupDelayLocked(long nowELAPSED){
  if (mInteractive) {
    return false;
  }
  if (mLastAlarmDeliveryTime <= 0) {
    return false;
  }
  if (mPendingNonWakeupAlarms.size() > 0 && mNextNonWakeupDeliveryTime > nowELAPSED) {
    return false;
  }
  long timeSinceLast=nowELAPSED - mLastAlarmDeliveryTime;
  return timeSinceLast <= currentNonWakeupFuzzLocked(nowELAPSED);
}","boolean checkAllowNonWakeupDelayLocked(long nowELAPSED){
  if (mInteractive) {
    return false;
  }
  if (mLastAlarmDeliveryTime <= 0) {
    return false;
  }
  if (mPendingNonWakeupAlarms.size() > 0 && mNextNonWakeupDeliveryTime < nowELAPSED) {
    return false;
  }
  long timeSinceLast=nowELAPSED - mLastAlarmDeliveryTime;
  return timeSinceLast <= currentNonWakeupFuzzLocked(nowELAPSED);
}",0.9974619289340102
195721,"boolean checkAllowNonWakeupDelayLocked(long nowELAPSED){
  if (mInteractive) {
    return false;
  }
  if (mLastAlarmDeliveryTime <= 0) {
    return false;
  }
  if (mPendingNonWakeupAlarms.size() > 0 && mNextNonWakeupDeliveryTime > nowELAPSED) {
    return false;
  }
  long timeSinceLast=nowELAPSED - mLastAlarmDeliveryTime;
  return timeSinceLast <= currentNonWakeupFuzzLocked(nowELAPSED);
}","boolean checkAllowNonWakeupDelayLocked(long nowELAPSED){
  if (mInteractive) {
    return false;
  }
  if (mLastAlarmDeliveryTime <= 0) {
    return false;
  }
  if (mPendingNonWakeupAlarms.size() > 0 && mNextNonWakeupDeliveryTime < nowELAPSED) {
    return false;
  }
  long timeSinceLast=nowELAPSED - mLastAlarmDeliveryTime;
  return timeSinceLast <= currentNonWakeupFuzzLocked(nowELAPSED);
}",0.9974619289340102
195722,"private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}","private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setVisibility(View.GONE);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}",0.9853658536585366
195723,"public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    mShowListenerWhenConnect=showListener;
    showScrim();
  }
  mKeyguardState.screenIsOn=true;
}","public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    showListener.onShown(null);
  }
  mKeyguardState.screenIsOn=true;
}",0.9005102040816326
195724,"@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(mShowListenerWhenConnect));
    if (mShowListenerWhenConnect != null) {
      Log.v(TAG,""String_Node_Str"");
      mShowListenerWhenConnect=null;
      hideScrim();
    }
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(null));
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}",0.6914498141263941
195725,"private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}","private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setVisibility(View.GONE);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}",0.9853658536585366
195726,"public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    mShowListenerWhenConnect=showListener;
    showScrim();
  }
  mKeyguardState.screenIsOn=true;
}","public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    showListener.onShown(null);
  }
  mKeyguardState.screenIsOn=true;
}",0.9005102040816326
195727,"@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(mShowListenerWhenConnect));
    if (mShowListenerWhenConnect != null) {
      Log.v(TAG,""String_Node_Str"");
      mShowListenerWhenConnect=null;
      hideScrim();
    }
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(null));
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}",0.6914498141263941
195728,"private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}","private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setVisibility(View.GONE);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}",0.9853658536585366
195729,"public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    mShowListenerWhenConnect=showListener;
    showScrim();
  }
  mKeyguardState.screenIsOn=true;
}","public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    showListener.onShown(null);
  }
  mKeyguardState.screenIsOn=true;
}",0.9005102040816326
195730,"@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(mShowListenerWhenConnect));
    if (mShowListenerWhenConnect != null) {
      Log.v(TAG,""String_Node_Str"");
      mShowListenerWhenConnect=null;
      hideScrim();
    }
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(null));
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}",0.6914498141263941
195731,"private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setVisibility(View.GONE);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}","private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}",0.9853658536585366
195732,"public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    showListener.onShown(null);
  }
  mKeyguardState.screenIsOn=true;
}","public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    mShowListenerWhenConnect=showListener;
    showScrim();
  }
  mKeyguardState.screenIsOn=true;
}",0.9005102040816326
195733,"@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(null));
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(mShowListenerWhenConnect));
    if (mShowListenerWhenConnect != null) {
      Log.v(TAG,""String_Node_Str"");
      mShowListenerWhenConnect=null;
      hideScrim();
    }
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}",0.8345724907063197
195734,"boolean checkAllowNonWakeupDelayLocked(long nowELAPSED){
  if (mInteractive) {
    return false;
  }
  if (mLastAlarmDeliveryTime <= 0) {
    return false;
  }
  if (mPendingNonWakeupAlarms.size() > 0 && mNextNonWakeupDeliveryTime > nowELAPSED) {
    return false;
  }
  long timeSinceLast=nowELAPSED - mLastAlarmDeliveryTime;
  return timeSinceLast <= currentNonWakeupFuzzLocked(nowELAPSED);
}","boolean checkAllowNonWakeupDelayLocked(long nowELAPSED){
  if (mInteractive) {
    return false;
  }
  if (mLastAlarmDeliveryTime <= 0) {
    return false;
  }
  if (mPendingNonWakeupAlarms.size() > 0 && mNextNonWakeupDeliveryTime < nowELAPSED) {
    return false;
  }
  long timeSinceLast=nowELAPSED - mLastAlarmDeliveryTime;
  return timeSinceLast <= currentNonWakeupFuzzLocked(nowELAPSED);
}",0.9974619289340102
195735,"private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setVisibility(View.GONE);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}","private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}",0.9853658536585366
195736,"public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    showListener.onShown(null);
  }
  mKeyguardState.screenIsOn=true;
}","public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    mShowListenerWhenConnect=showListener;
    showScrim();
  }
  mKeyguardState.screenIsOn=true;
}",0.9005102040816326
195737,"@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(null));
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(mShowListenerWhenConnect));
    if (mShowListenerWhenConnect != null) {
      Log.v(TAG,""String_Node_Str"");
      mShowListenerWhenConnect=null;
      hideScrim();
    }
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}",0.8345724907063197
195738,"/** 
 * Preloads the list of recent tasks from the system.  After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded.
 */
synchronized void preloadPlan(RecentsTaskLoader loader,boolean isTopTaskHome){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  mActivityInfoCache.clear();
  mStack=new TaskStack();
  Resources res=mContext.getResources();
  ArrayList<Task> loadedTasks=new ArrayList<Task>();
  if (mRawTasks == null) {
    preloadRawTasks(isTopTaskHome);
  }
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    String activityLabel=loader.getAndUpdateActivityLabel(taskKey,t.taskDescription,mSystemServicesProxy,infoHandle);
    Drawable activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription,mConfig);
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
    Bitmap icon=t.taskDescription != null ? t.taskDescription.getInMemoryIcon() : null;
    String iconFilename=t.taskDescription != null ? t.taskDescription.getIconFilename() : null;
    Task task=new Task(taskKey,(t.id != RecentsTaskLoader.INVALID_TASK_ID),t.affiliatedTaskId,t.affiliatedTaskColor,activityLabel,activityIcon,activityColor,(i == (taskCount - 1)),mConfig.lockToAppEnabled,icon,iconFilename);
    task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,false);
    loadedTasks.add(task);
  }
  mStack.setTasks(loadedTasks);
  mStack.createAffiliatedGroupings(mConfig);
  if (mStack.getTaskCount() != mRawTasks.size()) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * Preloads the list of recent tasks from the system.  After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded.
 */
synchronized void preloadPlan(RecentsTaskLoader loader,boolean isTopTaskHome){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  mActivityInfoCache.clear();
  mStack=new TaskStack();
  Resources res=mContext.getResources();
  ArrayList<Task> loadedTasks=new ArrayList<Task>();
  if (mRawTasks == null) {
    preloadRawTasks(isTopTaskHome);
  }
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    String activityLabel=loader.getAndUpdateActivityLabel(taskKey,t.taskDescription,mSystemServicesProxy,infoHandle);
    Drawable activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription,mConfig);
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
    Bitmap icon=t.taskDescription != null ? t.taskDescription.getInMemoryIcon() : null;
    String iconFilename=t.taskDescription != null ? t.taskDescription.getIconFilename() : null;
    Task task=new Task(taskKey,(t.id != RecentsTaskLoader.INVALID_TASK_ID),t.affiliatedTaskId,t.affiliatedTaskColor,activityLabel,activityIcon,activityColor,(i == (taskCount - 1)),mConfig.lockToAppEnabled,icon,iconFilename);
    task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,false);
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + taskKey + ""String_Node_Str""+ task.thumbnail);
    loadedTasks.add(task);
  }
  mStack.setTasks(loadedTasks);
  mStack.createAffiliatedGroupings(mConfig);
  if (mStack.getTaskCount() != mRawTasks.size()) {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.9798001275781416
195739,"/** 
 * Called to apply the actual loading based on the specified conditions.
 */
synchronized void executePlan(Options opts,RecentsTaskLoader loader,TaskResourceLoadQueue loadQueue){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + opts.numVisibleTasks + ""String_Node_Str""+ opts.numVisibleTaskThumbnails+ ""String_Node_Str""+ opts.runningTaskId);
  Resources res=mContext.getResources();
  ArrayList<Task> tasks=mStack.getTasks();
  int taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task task=tasks.get(i);
    Task.TaskKey taskKey=task.key;
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    boolean isRunningTask=(task.key.id == opts.runningTaskId);
    boolean isVisibleTask=i >= (taskCount - opts.numVisibleTasks);
    boolean isVisibleThumbnail=i >= (taskCount - opts.numVisibleTaskThumbnails);
    if (opts.loadIcons && (isRunningTask || isVisibleTask)) {
      if (task.activityIcon == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        task.activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,true);
      }
    }
    if (opts.loadThumbnails && (isRunningTask || isVisibleThumbnail)) {
      if (task.thumbnail == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        if (mConfig.svelteLevel <= RecentsConfiguration.SVELTE_LIMIT_CACHE) {
          task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,true);
        }
 else         if (mConfig.svelteLevel == RecentsConfiguration.SVELTE_DISABLE_CACHE) {
          loadQueue.addTask(task);
        }
      }
    }
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
  }
}","/** 
 * Called to apply the actual loading based on the specified conditions.
 */
synchronized void executePlan(Options opts,RecentsTaskLoader loader,TaskResourceLoadQueue loadQueue){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + opts.numVisibleTasks + ""String_Node_Str""+ opts.numVisibleTaskThumbnails+ ""String_Node_Str""+ opts.runningTaskId);
  Resources res=mContext.getResources();
  ArrayList<Task> tasks=mStack.getTasks();
  int taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task task=tasks.get(i);
    Task.TaskKey taskKey=task.key;
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    boolean isRunningTask=(task.key.id == opts.runningTaskId);
    boolean isVisibleTask=i >= (taskCount - opts.numVisibleTasks);
    boolean isVisibleThumbnail=i >= (taskCount - opts.numVisibleTaskThumbnails);
    if (opts.onlyLoadPausedActivities && isRunningTask) {
      continue;
    }
    if (opts.loadIcons && (isRunningTask || isVisibleTask)) {
      if (task.activityIcon == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        task.activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,true);
      }
    }
    if (opts.loadThumbnails && (isRunningTask || isVisibleThumbnail)) {
      if (task.thumbnail == null || isRunningTask) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        if (mConfig.svelteLevel <= RecentsConfiguration.SVELTE_LIMIT_CACHE) {
          task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,true);
        }
 else         if (mConfig.svelteLevel == RecentsConfiguration.SVELTE_DISABLE_CACHE) {
          loadQueue.addTask(task);
        }
      }
    }
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
  }
}",0.97724607084213
195740,"/** 
 * Preloads the list of recent tasks from the system.  After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded.
 */
synchronized void preloadPlan(RecentsTaskLoader loader,boolean isTopTaskHome){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  mActivityInfoCache.clear();
  mStack=new TaskStack();
  Resources res=mContext.getResources();
  ArrayList<Task> loadedTasks=new ArrayList<Task>();
  if (mRawTasks == null) {
    preloadRawTasks(isTopTaskHome);
  }
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    String activityLabel=loader.getAndUpdateActivityLabel(taskKey,t.taskDescription,mSystemServicesProxy,infoHandle);
    Drawable activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription,mConfig);
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
    Bitmap icon=t.taskDescription != null ? t.taskDescription.getInMemoryIcon() : null;
    String iconFilename=t.taskDescription != null ? t.taskDescription.getIconFilename() : null;
    Task task=new Task(taskKey,(t.id != RecentsTaskLoader.INVALID_TASK_ID),t.affiliatedTaskId,t.affiliatedTaskColor,activityLabel,activityIcon,activityColor,(i == (taskCount - 1)),mConfig.lockToAppEnabled,icon,iconFilename);
    task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,false);
    loadedTasks.add(task);
  }
  mStack.setTasks(loadedTasks);
  mStack.createAffiliatedGroupings(mConfig);
  if (mStack.getTaskCount() != mRawTasks.size()) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * Preloads the list of recent tasks from the system.  After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded.
 */
synchronized void preloadPlan(RecentsTaskLoader loader,boolean isTopTaskHome){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  mActivityInfoCache.clear();
  mStack=new TaskStack();
  Resources res=mContext.getResources();
  ArrayList<Task> loadedTasks=new ArrayList<Task>();
  if (mRawTasks == null) {
    preloadRawTasks(isTopTaskHome);
  }
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    String activityLabel=loader.getAndUpdateActivityLabel(taskKey,t.taskDescription,mSystemServicesProxy,infoHandle);
    Drawable activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription,mConfig);
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
    Bitmap icon=t.taskDescription != null ? t.taskDescription.getInMemoryIcon() : null;
    String iconFilename=t.taskDescription != null ? t.taskDescription.getIconFilename() : null;
    Task task=new Task(taskKey,(t.id != RecentsTaskLoader.INVALID_TASK_ID),t.affiliatedTaskId,t.affiliatedTaskColor,activityLabel,activityIcon,activityColor,(i == (taskCount - 1)),mConfig.lockToAppEnabled,icon,iconFilename);
    task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,false);
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + taskKey + ""String_Node_Str""+ task.thumbnail);
    loadedTasks.add(task);
  }
  mStack.setTasks(loadedTasks);
  mStack.createAffiliatedGroupings(mConfig);
  if (mStack.getTaskCount() != mRawTasks.size()) {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.9798001275781416
195741,"/** 
 * Called to apply the actual loading based on the specified conditions.
 */
synchronized void executePlan(Options opts,RecentsTaskLoader loader,TaskResourceLoadQueue loadQueue){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + opts.numVisibleTasks + ""String_Node_Str""+ opts.numVisibleTaskThumbnails+ ""String_Node_Str""+ opts.runningTaskId);
  Resources res=mContext.getResources();
  ArrayList<Task> tasks=mStack.getTasks();
  int taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task task=tasks.get(i);
    Task.TaskKey taskKey=task.key;
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    boolean isRunningTask=(task.key.id == opts.runningTaskId);
    boolean isVisibleTask=i >= (taskCount - opts.numVisibleTasks);
    boolean isVisibleThumbnail=i >= (taskCount - opts.numVisibleTaskThumbnails);
    if (opts.loadIcons && (isRunningTask || isVisibleTask)) {
      if (task.activityIcon == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        task.activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,true);
      }
    }
    if (opts.loadThumbnails && (isRunningTask || isVisibleThumbnail)) {
      if (task.thumbnail == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        if (mConfig.svelteLevel <= RecentsConfiguration.SVELTE_LIMIT_CACHE) {
          task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,true);
        }
 else         if (mConfig.svelteLevel == RecentsConfiguration.SVELTE_DISABLE_CACHE) {
          loadQueue.addTask(task);
        }
      }
    }
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
  }
}","/** 
 * Called to apply the actual loading based on the specified conditions.
 */
synchronized void executePlan(Options opts,RecentsTaskLoader loader,TaskResourceLoadQueue loadQueue){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + opts.numVisibleTasks + ""String_Node_Str""+ opts.numVisibleTaskThumbnails+ ""String_Node_Str""+ opts.runningTaskId);
  Resources res=mContext.getResources();
  ArrayList<Task> tasks=mStack.getTasks();
  int taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task task=tasks.get(i);
    Task.TaskKey taskKey=task.key;
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    boolean isRunningTask=(task.key.id == opts.runningTaskId);
    boolean isVisibleTask=i >= (taskCount - opts.numVisibleTasks);
    boolean isVisibleThumbnail=i >= (taskCount - opts.numVisibleTaskThumbnails);
    if (opts.onlyLoadPausedActivities && isRunningTask) {
      continue;
    }
    if (opts.loadIcons && (isRunningTask || isVisibleTask)) {
      if (task.activityIcon == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        task.activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,true);
      }
    }
    if (opts.loadThumbnails && (isRunningTask || isVisibleThumbnail)) {
      if (task.thumbnail == null || isRunningTask) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        if (mConfig.svelteLevel <= RecentsConfiguration.SVELTE_LIMIT_CACHE) {
          task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,true);
        }
 else         if (mConfig.svelteLevel == RecentsConfiguration.SVELTE_DISABLE_CACHE) {
          loadQueue.addTask(task);
        }
      }
    }
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
  }
}",0.97724607084213
195742,"/** 
 * Preloads the list of recent tasks from the system.  After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded.
 */
synchronized void preloadPlan(RecentsTaskLoader loader,boolean isTopTaskHome){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  mActivityInfoCache.clear();
  mStack=new TaskStack();
  Resources res=mContext.getResources();
  ArrayList<Task> loadedTasks=new ArrayList<Task>();
  if (mRawTasks == null) {
    preloadRawTasks(isTopTaskHome);
  }
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    String activityLabel=loader.getAndUpdateActivityLabel(taskKey,t.taskDescription,mSystemServicesProxy,infoHandle);
    Drawable activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription,mConfig);
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
    Bitmap icon=t.taskDescription != null ? t.taskDescription.getInMemoryIcon() : null;
    String iconFilename=t.taskDescription != null ? t.taskDescription.getIconFilename() : null;
    Task task=new Task(taskKey,(t.id != RecentsTaskLoader.INVALID_TASK_ID),t.affiliatedTaskId,t.affiliatedTaskColor,activityLabel,activityIcon,activityColor,(i == (taskCount - 1)),mConfig.lockToAppEnabled,icon,iconFilename);
    task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,false);
    loadedTasks.add(task);
  }
  mStack.setTasks(loadedTasks);
  mStack.createAffiliatedGroupings(mConfig);
  if (mStack.getTaskCount() != mRawTasks.size()) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * Preloads the list of recent tasks from the system.  After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded.
 */
synchronized void preloadPlan(RecentsTaskLoader loader,boolean isTopTaskHome){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  mActivityInfoCache.clear();
  mStack=new TaskStack();
  Resources res=mContext.getResources();
  ArrayList<Task> loadedTasks=new ArrayList<Task>();
  if (mRawTasks == null) {
    preloadRawTasks(isTopTaskHome);
  }
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    String activityLabel=loader.getAndUpdateActivityLabel(taskKey,t.taskDescription,mSystemServicesProxy,infoHandle);
    Drawable activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription,mConfig);
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
    Bitmap icon=t.taskDescription != null ? t.taskDescription.getInMemoryIcon() : null;
    String iconFilename=t.taskDescription != null ? t.taskDescription.getIconFilename() : null;
    Task task=new Task(taskKey,(t.id != RecentsTaskLoader.INVALID_TASK_ID),t.affiliatedTaskId,t.affiliatedTaskColor,activityLabel,activityIcon,activityColor,(i == (taskCount - 1)),mConfig.lockToAppEnabled,icon,iconFilename);
    task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,false);
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + taskKey + ""String_Node_Str""+ task.thumbnail);
    loadedTasks.add(task);
  }
  mStack.setTasks(loadedTasks);
  mStack.createAffiliatedGroupings(mConfig);
  if (mStack.getTaskCount() != mRawTasks.size()) {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.9798001275781416
195743,"/** 
 * Called to apply the actual loading based on the specified conditions.
 */
synchronized void executePlan(Options opts,RecentsTaskLoader loader,TaskResourceLoadQueue loadQueue){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + opts.numVisibleTasks + ""String_Node_Str""+ opts.numVisibleTaskThumbnails+ ""String_Node_Str""+ opts.runningTaskId);
  Resources res=mContext.getResources();
  ArrayList<Task> tasks=mStack.getTasks();
  int taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task task=tasks.get(i);
    Task.TaskKey taskKey=task.key;
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    boolean isRunningTask=(task.key.id == opts.runningTaskId);
    boolean isVisibleTask=i >= (taskCount - opts.numVisibleTasks);
    boolean isVisibleThumbnail=i >= (taskCount - opts.numVisibleTaskThumbnails);
    if (opts.loadIcons && (isRunningTask || isVisibleTask)) {
      if (task.activityIcon == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        task.activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,true);
      }
    }
    if (opts.loadThumbnails && (isRunningTask || isVisibleThumbnail)) {
      if (task.thumbnail == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        if (mConfig.svelteLevel <= RecentsConfiguration.SVELTE_LIMIT_CACHE) {
          task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,true);
        }
 else         if (mConfig.svelteLevel == RecentsConfiguration.SVELTE_DISABLE_CACHE) {
          loadQueue.addTask(task);
        }
      }
    }
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
  }
}","/** 
 * Called to apply the actual loading based on the specified conditions.
 */
synchronized void executePlan(Options opts,RecentsTaskLoader loader,TaskResourceLoadQueue loadQueue){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + opts.numVisibleTasks + ""String_Node_Str""+ opts.numVisibleTaskThumbnails+ ""String_Node_Str""+ opts.runningTaskId);
  Resources res=mContext.getResources();
  ArrayList<Task> tasks=mStack.getTasks();
  int taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task task=tasks.get(i);
    Task.TaskKey taskKey=task.key;
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    boolean isRunningTask=(task.key.id == opts.runningTaskId);
    boolean isVisibleTask=i >= (taskCount - opts.numVisibleTasks);
    boolean isVisibleThumbnail=i >= (taskCount - opts.numVisibleTaskThumbnails);
    if (opts.onlyLoadPausedActivities && isRunningTask) {
      continue;
    }
    if (opts.loadIcons && (isRunningTask || isVisibleTask)) {
      if (task.activityIcon == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        task.activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,true);
      }
    }
    if (opts.loadThumbnails && (isRunningTask || isVisibleThumbnail)) {
      if (task.thumbnail == null || isRunningTask) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        if (mConfig.svelteLevel <= RecentsConfiguration.SVELTE_LIMIT_CACHE) {
          task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,true);
        }
 else         if (mConfig.svelteLevel == RecentsConfiguration.SVELTE_DISABLE_CACHE) {
          loadQueue.addTask(task);
        }
      }
    }
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
  }
}",0.97724607084213
195744,"private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setVisibility(View.GONE);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}","private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}",0.9853658536585366
195745,"public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    showListener.onShown(null);
  }
  mKeyguardState.screenIsOn=true;
}","public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    mShowListenerWhenConnect=showListener;
    showScrim();
  }
  mKeyguardState.screenIsOn=true;
}",0.9005102040816326
195746,"@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(null));
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(mShowListenerWhenConnect));
    if (mShowListenerWhenConnect != null) {
      Log.v(TAG,""String_Node_Str"");
      mShowListenerWhenConnect=null;
      hideScrim();
    }
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}",0.8345724907063197
195747,"/** 
 * Preloads the list of recent tasks from the system.  After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded.
 */
synchronized void preloadPlan(RecentsTaskLoader loader,boolean isTopTaskHome){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  mActivityInfoCache.clear();
  mStack=new TaskStack();
  Resources res=mContext.getResources();
  ArrayList<Task> loadedTasks=new ArrayList<Task>();
  if (mRawTasks == null) {
    preloadRawTasks(isTopTaskHome);
  }
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    String activityLabel=loader.getAndUpdateActivityLabel(taskKey,t.taskDescription,mSystemServicesProxy,infoHandle);
    Drawable activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription,mConfig);
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
    Bitmap icon=t.taskDescription != null ? t.taskDescription.getInMemoryIcon() : null;
    String iconFilename=t.taskDescription != null ? t.taskDescription.getIconFilename() : null;
    Task task=new Task(taskKey,(t.id != RecentsTaskLoader.INVALID_TASK_ID),t.affiliatedTaskId,t.affiliatedTaskColor,activityLabel,activityIcon,activityColor,(i == (taskCount - 1)),mConfig.lockToAppEnabled,icon,iconFilename);
    task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,false);
    loadedTasks.add(task);
  }
  mStack.setTasks(loadedTasks);
  mStack.createAffiliatedGroupings(mConfig);
  if (mStack.getTaskCount() != mRawTasks.size()) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * Preloads the list of recent tasks from the system.  After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded.
 */
synchronized void preloadPlan(RecentsTaskLoader loader,boolean isTopTaskHome){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  mActivityInfoCache.clear();
  mStack=new TaskStack();
  Resources res=mContext.getResources();
  ArrayList<Task> loadedTasks=new ArrayList<Task>();
  if (mRawTasks == null) {
    preloadRawTasks(isTopTaskHome);
  }
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    String activityLabel=loader.getAndUpdateActivityLabel(taskKey,t.taskDescription,mSystemServicesProxy,infoHandle);
    Drawable activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription,mConfig);
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
    Bitmap icon=t.taskDescription != null ? t.taskDescription.getInMemoryIcon() : null;
    String iconFilename=t.taskDescription != null ? t.taskDescription.getIconFilename() : null;
    Task task=new Task(taskKey,(t.id != RecentsTaskLoader.INVALID_TASK_ID),t.affiliatedTaskId,t.affiliatedTaskColor,activityLabel,activityIcon,activityColor,(i == (taskCount - 1)),mConfig.lockToAppEnabled,icon,iconFilename);
    task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,false);
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + taskKey + ""String_Node_Str""+ task.thumbnail);
    loadedTasks.add(task);
  }
  mStack.setTasks(loadedTasks);
  mStack.createAffiliatedGroupings(mConfig);
  if (mStack.getTaskCount() != mRawTasks.size()) {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.9798001275781416
195748,"/** 
 * Called to apply the actual loading based on the specified conditions.
 */
synchronized void executePlan(Options opts,RecentsTaskLoader loader,TaskResourceLoadQueue loadQueue){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + opts.numVisibleTasks + ""String_Node_Str""+ opts.numVisibleTaskThumbnails+ ""String_Node_Str""+ opts.runningTaskId);
  Resources res=mContext.getResources();
  ArrayList<Task> tasks=mStack.getTasks();
  int taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task task=tasks.get(i);
    Task.TaskKey taskKey=task.key;
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    boolean isRunningTask=(task.key.id == opts.runningTaskId);
    boolean isVisibleTask=i >= (taskCount - opts.numVisibleTasks);
    boolean isVisibleThumbnail=i >= (taskCount - opts.numVisibleTaskThumbnails);
    if (opts.loadIcons && (isRunningTask || isVisibleTask)) {
      if (task.activityIcon == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        task.activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,true);
      }
    }
    if (opts.loadThumbnails && (isRunningTask || isVisibleThumbnail)) {
      if (task.thumbnail == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        if (mConfig.svelteLevel <= RecentsConfiguration.SVELTE_LIMIT_CACHE) {
          task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,true);
        }
 else         if (mConfig.svelteLevel == RecentsConfiguration.SVELTE_DISABLE_CACHE) {
          loadQueue.addTask(task);
        }
      }
    }
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
  }
}","/** 
 * Called to apply the actual loading based on the specified conditions.
 */
synchronized void executePlan(Options opts,RecentsTaskLoader loader,TaskResourceLoadQueue loadQueue){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + opts.numVisibleTasks + ""String_Node_Str""+ opts.numVisibleTaskThumbnails+ ""String_Node_Str""+ opts.runningTaskId);
  Resources res=mContext.getResources();
  ArrayList<Task> tasks=mStack.getTasks();
  int taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task task=tasks.get(i);
    Task.TaskKey taskKey=task.key;
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    boolean isRunningTask=(task.key.id == opts.runningTaskId);
    boolean isVisibleTask=i >= (taskCount - opts.numVisibleTasks);
    boolean isVisibleThumbnail=i >= (taskCount - opts.numVisibleTaskThumbnails);
    if (opts.onlyLoadPausedActivities && isRunningTask) {
      continue;
    }
    if (opts.loadIcons && (isRunningTask || isVisibleTask)) {
      if (task.activityIcon == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        task.activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,true);
      }
    }
    if (opts.loadThumbnails && (isRunningTask || isVisibleThumbnail)) {
      if (task.thumbnail == null || isRunningTask) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        if (mConfig.svelteLevel <= RecentsConfiguration.SVELTE_LIMIT_CACHE) {
          task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,true);
        }
 else         if (mConfig.svelteLevel == RecentsConfiguration.SVELTE_DISABLE_CACHE) {
          loadQueue.addTask(task);
        }
      }
    }
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
  }
}",0.97724607084213
195749,"private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setVisibility(View.GONE);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}","private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}",0.9853658536585366
195750,"public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    showListener.onShown(null);
  }
  mKeyguardState.screenIsOn=true;
}","public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    mShowListenerWhenConnect=showListener;
    showScrim();
  }
  mKeyguardState.screenIsOn=true;
}",0.9005102040816326
195751,"@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(null));
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(mShowListenerWhenConnect));
    if (mShowListenerWhenConnect != null) {
      Log.v(TAG,""String_Node_Str"");
      mShowListenerWhenConnect=null;
      hideScrim();
    }
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}",0.8345724907063197
195752,"/** 
 * Preloads the list of recent tasks from the system.  After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded.
 */
synchronized void preloadPlan(RecentsTaskLoader loader,boolean isTopTaskHome){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  mActivityInfoCache.clear();
  mStack=new TaskStack();
  Resources res=mContext.getResources();
  ArrayList<Task> loadedTasks=new ArrayList<Task>();
  if (mRawTasks == null) {
    preloadRawTasks(isTopTaskHome);
  }
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    String activityLabel=loader.getAndUpdateActivityLabel(taskKey,t.taskDescription,mSystemServicesProxy,infoHandle);
    Drawable activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription,mConfig);
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
    Bitmap icon=t.taskDescription != null ? t.taskDescription.getInMemoryIcon() : null;
    String iconFilename=t.taskDescription != null ? t.taskDescription.getIconFilename() : null;
    Task task=new Task(taskKey,(t.id != RecentsTaskLoader.INVALID_TASK_ID),t.affiliatedTaskId,t.affiliatedTaskColor,activityLabel,activityIcon,activityColor,(i == (taskCount - 1)),mConfig.lockToAppEnabled,icon,iconFilename);
    task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,false);
    loadedTasks.add(task);
  }
  mStack.setTasks(loadedTasks);
  mStack.createAffiliatedGroupings(mConfig);
  if (mStack.getTaskCount() != mRawTasks.size()) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * Preloads the list of recent tasks from the system.  After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded.
 */
synchronized void preloadPlan(RecentsTaskLoader loader,boolean isTopTaskHome){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  mActivityInfoCache.clear();
  mStack=new TaskStack();
  Resources res=mContext.getResources();
  ArrayList<Task> loadedTasks=new ArrayList<Task>();
  if (mRawTasks == null) {
    preloadRawTasks(isTopTaskHome);
  }
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    String activityLabel=loader.getAndUpdateActivityLabel(taskKey,t.taskDescription,mSystemServicesProxy,infoHandle);
    Drawable activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription,mConfig);
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
    Bitmap icon=t.taskDescription != null ? t.taskDescription.getInMemoryIcon() : null;
    String iconFilename=t.taskDescription != null ? t.taskDescription.getIconFilename() : null;
    Task task=new Task(taskKey,(t.id != RecentsTaskLoader.INVALID_TASK_ID),t.affiliatedTaskId,t.affiliatedTaskColor,activityLabel,activityIcon,activityColor,(i == (taskCount - 1)),mConfig.lockToAppEnabled,icon,iconFilename);
    task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,false);
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + taskKey + ""String_Node_Str""+ task.thumbnail);
    loadedTasks.add(task);
  }
  mStack.setTasks(loadedTasks);
  mStack.createAffiliatedGroupings(mConfig);
  if (mStack.getTaskCount() != mRawTasks.size()) {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.9798001275781416
195753,"/** 
 * Called to apply the actual loading based on the specified conditions.
 */
synchronized void executePlan(Options opts,RecentsTaskLoader loader,TaskResourceLoadQueue loadQueue){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + opts.numVisibleTasks + ""String_Node_Str""+ opts.numVisibleTaskThumbnails+ ""String_Node_Str""+ opts.runningTaskId);
  Resources res=mContext.getResources();
  ArrayList<Task> tasks=mStack.getTasks();
  int taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task task=tasks.get(i);
    Task.TaskKey taskKey=task.key;
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    boolean isRunningTask=(task.key.id == opts.runningTaskId);
    boolean isVisibleTask=i >= (taskCount - opts.numVisibleTasks);
    boolean isVisibleThumbnail=i >= (taskCount - opts.numVisibleTaskThumbnails);
    if (opts.loadIcons && (isRunningTask || isVisibleTask)) {
      if (task.activityIcon == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        task.activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,true);
      }
    }
    if (opts.loadThumbnails && (isRunningTask || isVisibleThumbnail)) {
      if (task.thumbnail == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        if (mConfig.svelteLevel <= RecentsConfiguration.SVELTE_LIMIT_CACHE) {
          task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,true);
        }
 else         if (mConfig.svelteLevel == RecentsConfiguration.SVELTE_DISABLE_CACHE) {
          loadQueue.addTask(task);
        }
      }
    }
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
  }
}","/** 
 * Called to apply the actual loading based on the specified conditions.
 */
synchronized void executePlan(Options opts,RecentsTaskLoader loader,TaskResourceLoadQueue loadQueue){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + opts.numVisibleTasks + ""String_Node_Str""+ opts.numVisibleTaskThumbnails+ ""String_Node_Str""+ opts.runningTaskId);
  Resources res=mContext.getResources();
  ArrayList<Task> tasks=mStack.getTasks();
  int taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task task=tasks.get(i);
    Task.TaskKey taskKey=task.key;
    Task.ComponentNameKey cnKey=taskKey.getComponentNameKey();
    ActivityInfoHandle infoHandle;
    boolean hadCachedActivityInfo=false;
    if (mActivityInfoCache.containsKey(cnKey)) {
      infoHandle=mActivityInfoCache.get(cnKey);
      hadCachedActivityInfo=true;
    }
 else {
      infoHandle=new ActivityInfoHandle();
    }
    boolean isRunningTask=(task.key.id == opts.runningTaskId);
    boolean isVisibleTask=i >= (taskCount - opts.numVisibleTasks);
    boolean isVisibleThumbnail=i >= (taskCount - opts.numVisibleTaskThumbnails);
    if (opts.onlyLoadPausedActivities && isRunningTask) {
      continue;
    }
    if (opts.loadIcons && (isRunningTask || isVisibleTask)) {
      if (task.activityIcon == null) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        task.activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,mSystemServicesProxy,res,infoHandle,true);
      }
    }
    if (opts.loadThumbnails && (isRunningTask || isVisibleThumbnail)) {
      if (task.thumbnail == null || isRunningTask) {
        if (DEBUG)         Log.d(TAG,""String_Node_Str"" + taskKey);
        if (mConfig.svelteLevel <= RecentsConfiguration.SVELTE_LIMIT_CACHE) {
          task.thumbnail=loader.getAndUpdateThumbnail(taskKey,mSystemServicesProxy,true);
        }
 else         if (mConfig.svelteLevel == RecentsConfiguration.SVELTE_DISABLE_CACHE) {
          loadQueue.addTask(task);
        }
      }
    }
    if (!hadCachedActivityInfo && infoHandle.info != null) {
      mActivityInfoCache.put(cnKey,infoHandle);
    }
  }
}",0.97724607084213
195754,"@Override public void createAnimation(final LockPatternView.CellState animatedCell,long delay,long duration,float translationY,final boolean appearing,Interpolator interpolator,final Runnable finishListener){
  if (appearing) {
    animatedCell.scale=0.0f;
  }
  animatedCell.translateY=appearing ? translationY : 0;
  ValueAnimator animator=ValueAnimator.ofFloat(animatedCell.translateY,appearing ? 0 : translationY);
  animator.setInterpolator(interpolator);
  animator.setDuration(duration);
  animator.setStartDelay(delay);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      float animatedFraction=animation.getAnimatedFraction();
      if (appearing) {
        animatedCell.scale=animatedFraction;
      }
 else {
        animatedCell.alpha=1 - animatedFraction;
      }
      animatedCell.translateY=(float)animation.getAnimatedValue();
      mLockPatternView.invalidate();
    }
  }
);
  if (finishListener != null) {
    animator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        finishListener.run();
      }
    }
);
    mAppearAnimationUtils.createAnimation(mEcaView,delay,duration,translationY,appearing,interpolator,null);
  }
  animator.start();
  mLockPatternView.invalidate();
}","@Override public void createAnimation(final LockPatternView.CellState animatedCell,long delay,long duration,float translationY,final boolean appearing,Interpolator interpolator,final Runnable finishListener){
  if (appearing) {
    animatedCell.scale=0.0f;
    animatedCell.alpha=1.0f;
  }
  animatedCell.translateY=appearing ? translationY : 0;
  ValueAnimator animator=ValueAnimator.ofFloat(animatedCell.translateY,appearing ? 0 : translationY);
  animator.setInterpolator(interpolator);
  animator.setDuration(duration);
  animator.setStartDelay(delay);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      float animatedFraction=animation.getAnimatedFraction();
      if (appearing) {
        animatedCell.scale=animatedFraction;
      }
 else {
        animatedCell.alpha=1 - animatedFraction;
      }
      animatedCell.translateY=(float)animation.getAnimatedValue();
      mLockPatternView.invalidate();
    }
  }
);
  if (finishListener != null) {
    animator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        finishListener.run();
      }
    }
);
    mAppearAnimationUtils.createAnimation(mEcaView,delay,duration,translationY,appearing,interpolator,null);
  }
  animator.start();
  mLockPatternView.invalidate();
}",0.9895041621425986
195755,"public void setDark(boolean dark,boolean fade,long delay){
  super.setDark(dark,fade,delay);
  if (mDark == dark) {
    return;
  }
  mDark=dark;
  if (!dark && fade) {
    if (mActivated) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
 else {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.INVISIBLE);
    }
    fadeDarkToDimmed(delay);
  }
 else {
    updateBackground();
  }
}","public void setDark(boolean dark,boolean fade,long delay){
  super.setDark(dark,fade,delay);
  if (mDark == dark) {
    return;
  }
  mDark=dark;
  if (!dark && fade) {
    if (mActivated) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
 else     if (mDimmed) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.INVISIBLE);
    }
 else {
      mBackgroundDimmed.setVisibility(View.INVISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
    fadeInFromDark(delay);
  }
 else {
    updateBackground();
  }
}",0.8287488908606921
195756,"public void updateDismissView(boolean visible){
  int oldVisibility=mDismissView.willBeGone() ? GONE : mDismissView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mDismissView.willBeGone()) {
        mDismissView.cancelAnimation();
      }
 else {
        mDismissView.setInvisible();
      }
      mDismissView.setVisibility(newVisibility);
      mDismissView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable dimissHideFinishRunnable=new Runnable(){
        @Override public void run(){
          mDismissView.setVisibility(GONE);
          mDismissView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mDismissView.isButtonVisible() && mIsExpanded) {
        mDismissView.setWillBeGone(true);
        mDismissView.performVisibilityAnimation(false,dimissHideFinishRunnable);
      }
 else {
        dimissHideFinishRunnable.run();
        mDismissView.showClearButton();
      }
    }
  }
}","public void updateDismissView(boolean visible){
  int oldVisibility=mDismissView.willBeGone() ? GONE : mDismissView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mDismissView.willBeGone()) {
        mDismissView.cancelAnimation();
      }
 else {
        mDismissView.setInvisible();
      }
      mDismissView.setVisibility(newVisibility);
      mDismissView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable dimissHideFinishRunnable=new Runnable(){
        @Override public void run(){
          mDismissView.setVisibility(GONE);
          mDismissView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mDismissView.isButtonVisible() && mIsExpanded && mAnimationsEnabled) {
        mDismissView.setWillBeGone(true);
        mDismissView.performVisibilityAnimation(false,dimissHideFinishRunnable);
      }
 else {
        dimissHideFinishRunnable.run();
        mDismissView.showClearButton();
      }
    }
  }
}",0.990582191780822
195757,"public void updateEmptyShadeView(boolean visible){
  int oldVisibility=mEmptyShadeView.willBeGone() ? GONE : mEmptyShadeView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mEmptyShadeView.willBeGone()) {
        mEmptyShadeView.cancelAnimation();
      }
 else {
        mEmptyShadeView.setInvisible();
      }
      mEmptyShadeView.setVisibility(newVisibility);
      mEmptyShadeView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      mEmptyShadeView.setWillBeGone(true);
      mEmptyShadeView.performVisibilityAnimation(false,new Runnable(){
        @Override public void run(){
          mEmptyShadeView.setVisibility(GONE);
          mEmptyShadeView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
);
    }
  }
}","public void updateEmptyShadeView(boolean visible){
  int oldVisibility=mEmptyShadeView.willBeGone() ? GONE : mEmptyShadeView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mEmptyShadeView.willBeGone()) {
        mEmptyShadeView.cancelAnimation();
      }
 else {
        mEmptyShadeView.setInvisible();
      }
      mEmptyShadeView.setVisibility(newVisibility);
      mEmptyShadeView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable onFinishedRunnable=new Runnable(){
        @Override public void run(){
          mEmptyShadeView.setVisibility(GONE);
          mEmptyShadeView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mAnimationsEnabled) {
        mEmptyShadeView.setWillBeGone(true);
        mEmptyShadeView.performVisibilityAnimation(false,onFinishedRunnable);
      }
 else {
        mEmptyShadeView.setInvisible();
        onFinishedRunnable.run();
      }
    }
  }
}",0.8206831119544592
195758,"public void setDark(boolean dark,boolean fade,long delay){
  super.setDark(dark,fade,delay);
  if (mDark == dark) {
    return;
  }
  mDark=dark;
  if (!dark && fade) {
    if (mActivated) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
 else {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.INVISIBLE);
    }
    fadeDarkToDimmed(delay);
  }
 else {
    updateBackground();
  }
}","public void setDark(boolean dark,boolean fade,long delay){
  super.setDark(dark,fade,delay);
  if (mDark == dark) {
    return;
  }
  mDark=dark;
  if (!dark && fade) {
    if (mActivated) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
 else     if (mDimmed) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.INVISIBLE);
    }
 else {
      mBackgroundDimmed.setVisibility(View.INVISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
    fadeInFromDark(delay);
  }
 else {
    updateBackground();
  }
}",0.8287488908606921
195759,"private void handleBindApplication(AppBindData data){
  mBoundApplication=data;
  mConfiguration=new Configuration(data.config);
  mCompatConfiguration=new Configuration(data.config);
  mProfiler=new Profiler();
  if (data.initProfilerInfo != null) {
    mProfiler.profileFile=data.initProfilerInfo.profileFile;
    mProfiler.profileFd=data.initProfilerInfo.profileFd;
    mProfiler.samplingInterval=data.initProfilerInfo.samplingInterval;
    mProfiler.autoStopProfiler=data.initProfilerInfo.autoStopProfiler;
  }
  Process.setArgV0(data.processName);
  android.ddm.DdmHandleAppName.setAppName(data.processName,UserHandle.myUserId());
  if (data.persistent) {
    if (!ActivityManager.isHighEndGfx()) {
      HardwareRenderer.disable(false);
    }
  }
  if (mProfiler.profileFd != null) {
    mProfiler.startProfiling();
  }
  if (data.appInfo.targetSdkVersion <= android.os.Build.VERSION_CODES.HONEYCOMB_MR1) {
    AsyncTask.setDefaultExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
  Message.updateCheckRecycle(data.appInfo.targetSdkVersion);
  TimeZone.setDefault(null);
  Locale.setDefault(data.config.locale);
  mResourcesManager.applyConfigurationToResourcesLocked(data.config,data.compatInfo);
  mCurDefaultDisplayDpi=data.config.densityDpi;
  applyCompatConfiguration(mCurDefaultDisplayDpi);
  data.info=getPackageInfoNoCheck(data.appInfo,data.compatInfo);
  if ((data.appInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) == 0) {
    mDensityCompatMode=true;
    Bitmap.setDefaultDensity(DisplayMetrics.DENSITY_DEFAULT);
  }
  updateDefaultDensity();
  final ContextImpl appContext=ContextImpl.createAppContext(this,data.info);
  if (!Process.isIsolated()) {
    final File cacheDir=appContext.getCacheDir();
    if (cacheDir != null) {
      System.setProperty(""String_Node_Str"",cacheDir.getAbsolutePath());
      setupGraphicsSupport(data.info,cacheDir);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  final boolean is24Hr=""String_Node_Str"".equals(mCoreSettings.getString(Settings.System.TIME_12_24));
  DateFormat.set24HourTimePref(is24Hr);
  View.mDebugViewAttributes=mCoreSettings.getInt(Settings.Global.DEBUG_VIEW_ATTRIBUTES,0) != 0;
  if ((data.appInfo.flags & (ApplicationInfo.FLAG_SYSTEM | ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0) {
    StrictMode.conditionallyEnableDebugLogging();
  }
  if (data.appInfo.targetSdkVersion > 9) {
    StrictMode.enableDeathOnNetwork();
  }
  if (data.debugMode != IApplicationThread.DEBUG_OFF) {
    Debug.changeDebugPort(8100);
    if (data.debugMode == IApplicationThread.DEBUG_WAIT) {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
      IActivityManager mgr=ActivityManagerNative.getDefault();
      try {
        mgr.showWaitingForDebugger(mAppThread,true);
      }
 catch (      RemoteException ex) {
      }
      Debug.waitForDebugger();
      try {
        mgr.showWaitingForDebugger(mAppThread,false);
      }
 catch (      RemoteException ex) {
      }
    }
 else {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
    }
  }
  if (data.enableOpenGlTrace) {
    GLUtils.setTracingLevel(1);
  }
  boolean appTracingAllowed=(data.appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
  Trace.setAppTracingAllowed(appTracingAllowed);
  IBinder b=ServiceManager.getService(Context.CONNECTIVITY_SERVICE);
  if (b != null) {
    IConnectivityManager service=IConnectivityManager.Stub.asInterface(b);
    try {
      ProxyInfo proxyInfo=service.getProxy();
      Proxy.setHttpProxySystemProperty(proxyInfo);
    }
 catch (    RemoteException e) {
    }
  }
  if (data.instrumentationName != null) {
    InstrumentationInfo ii=null;
    try {
      ii=appContext.getPackageManager().getInstrumentationInfo(data.instrumentationName,0);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName);
    }
    mInstrumentationPackageName=ii.packageName;
    mInstrumentationAppDir=ii.sourceDir;
    mInstrumentationSplitAppDirs=ii.splitSourceDirs;
    mInstrumentationLibDir=ii.nativeLibraryDir;
    mInstrumentedAppDir=data.info.getAppDir();
    mInstrumentedSplitAppDirs=data.info.getSplitAppDirs();
    mInstrumentedLibDir=data.info.getLibDir();
    ApplicationInfo instrApp=new ApplicationInfo();
    instrApp.packageName=ii.packageName;
    instrApp.sourceDir=ii.sourceDir;
    instrApp.publicSourceDir=ii.publicSourceDir;
    instrApp.splitSourceDirs=ii.splitSourceDirs;
    instrApp.splitPublicSourceDirs=ii.splitPublicSourceDirs;
    instrApp.dataDir=ii.dataDir;
    instrApp.nativeLibraryDir=ii.nativeLibraryDir;
    LoadedApk pi=getPackageInfo(instrApp,data.compatInfo,appContext.getClassLoader(),false,true,false);
    ContextImpl instrContext=ContextImpl.createAppContext(this,pi);
    try {
      java.lang.ClassLoader cl=instrContext.getClassLoader();
      mInstrumentation=(Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    mInstrumentation.init(this,instrContext,appContext,new ComponentName(ii.packageName,ii.name),data.instrumentationWatcher,data.instrumentationUiAutomationConnection);
    if (mProfiler.profileFile != null && !ii.handleProfiling && mProfiler.profileFd == null) {
      mProfiler.handlingProfiling=true;
      File file=new File(mProfiler.profileFile);
      file.getParentFile().mkdirs();
      Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);
    }
  }
 else {
    mInstrumentation=new Instrumentation();
  }
  if ((data.appInfo.flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0) {
    dalvik.system.VMRuntime.getRuntime().clearGrowthLimit();
  }
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskWrites();
  try {
    Application app=data.info.makeApplication(data.restrictedBackupMode,null);
    mInitialApplication=app;
    if (!data.restrictedBackupMode) {
      List<ProviderInfo> providers=data.providers;
      if (providers != null) {
        installContentProviders(app,providers);
        mH.sendEmptyMessageDelayed(H.ENABLE_JIT,10 * 1000);
      }
    }
    try {
      mInstrumentation.onCreate(data.instrumentationArgs);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    try {
      mInstrumentation.callApplicationOnCreate(app);
    }
 catch (    Exception e) {
      if (!mInstrumentation.onException(app,e)) {
        throw new RuntimeException(""String_Node_Str"" + app.getClass().getName() + ""String_Node_Str""+ e.toString(),e);
      }
    }
  }
  finally {
    StrictMode.setThreadPolicy(savedPolicy);
  }
}","private void handleBindApplication(AppBindData data){
  mBoundApplication=data;
  mConfiguration=new Configuration(data.config);
  mCompatConfiguration=new Configuration(data.config);
  mProfiler=new Profiler();
  if (data.initProfilerInfo != null) {
    mProfiler.profileFile=data.initProfilerInfo.profileFile;
    mProfiler.profileFd=data.initProfilerInfo.profileFd;
    mProfiler.samplingInterval=data.initProfilerInfo.samplingInterval;
    mProfiler.autoStopProfiler=data.initProfilerInfo.autoStopProfiler;
  }
  Process.setArgV0(data.processName);
  android.ddm.DdmHandleAppName.setAppName(data.processName,UserHandle.myUserId());
  if (data.persistent) {
    if (!ActivityManager.isHighEndGfx()) {
      HardwareRenderer.disable(false);
    }
  }
  if (mProfiler.profileFd != null) {
    mProfiler.startProfiling();
  }
  if (data.appInfo.targetSdkVersion <= android.os.Build.VERSION_CODES.HONEYCOMB_MR1) {
    AsyncTask.setDefaultExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
  Message.updateCheckRecycle(data.appInfo.targetSdkVersion);
  TimeZone.setDefault(null);
  Locale.setDefault(data.config.locale);
  mResourcesManager.applyConfigurationToResourcesLocked(data.config,data.compatInfo);
  mCurDefaultDisplayDpi=data.config.densityDpi;
  applyCompatConfiguration(mCurDefaultDisplayDpi);
  data.info=getPackageInfoNoCheck(data.appInfo,data.compatInfo);
  if ((data.appInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) == 0) {
    mDensityCompatMode=true;
    Bitmap.setDefaultDensity(DisplayMetrics.DENSITY_DEFAULT);
  }
  updateDefaultDensity();
  final ContextImpl appContext=ContextImpl.createAppContext(this,data.info);
  if (!Process.isIsolated()) {
    final File cacheDir=appContext.getCacheDir();
    if (cacheDir != null) {
      System.setProperty(""String_Node_Str"",cacheDir.getAbsolutePath());
      setupGraphicsSupport(data.info,cacheDir);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  final boolean is24Hr=""String_Node_Str"".equals(mCoreSettings.getString(Settings.System.TIME_12_24));
  DateFormat.set24HourTimePref(is24Hr);
  View.mDebugViewAttributes=mCoreSettings.getInt(Settings.Global.DEBUG_VIEW_ATTRIBUTES,0) != 0;
  if ((data.appInfo.flags & (ApplicationInfo.FLAG_SYSTEM | ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0) {
    StrictMode.conditionallyEnableDebugLogging();
  }
  if (data.appInfo.targetSdkVersion > 9) {
    StrictMode.enableDeathOnNetwork();
  }
  if (data.debugMode != IApplicationThread.DEBUG_OFF) {
    Debug.changeDebugPort(8100);
    if (data.debugMode == IApplicationThread.DEBUG_WAIT) {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
      IActivityManager mgr=ActivityManagerNative.getDefault();
      try {
        mgr.showWaitingForDebugger(mAppThread,true);
      }
 catch (      RemoteException ex) {
      }
      Debug.waitForDebugger();
      try {
        mgr.showWaitingForDebugger(mAppThread,false);
      }
 catch (      RemoteException ex) {
      }
    }
 else {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
    }
  }
  if (data.enableOpenGlTrace) {
    GLUtils.setTracingLevel(1);
  }
  boolean appTracingAllowed=(data.appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
  Trace.setAppTracingAllowed(appTracingAllowed);
  IBinder b=ServiceManager.getService(Context.CONNECTIVITY_SERVICE);
  if (b != null) {
    IConnectivityManager service=IConnectivityManager.Stub.asInterface(b);
    try {
      final ProxyInfo proxyInfo=service.getDefaultProxy();
      Proxy.setHttpProxySystemProperty(proxyInfo);
    }
 catch (    RemoteException e) {
    }
  }
  if (data.instrumentationName != null) {
    InstrumentationInfo ii=null;
    try {
      ii=appContext.getPackageManager().getInstrumentationInfo(data.instrumentationName,0);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName);
    }
    mInstrumentationPackageName=ii.packageName;
    mInstrumentationAppDir=ii.sourceDir;
    mInstrumentationSplitAppDirs=ii.splitSourceDirs;
    mInstrumentationLibDir=ii.nativeLibraryDir;
    mInstrumentedAppDir=data.info.getAppDir();
    mInstrumentedSplitAppDirs=data.info.getSplitAppDirs();
    mInstrumentedLibDir=data.info.getLibDir();
    ApplicationInfo instrApp=new ApplicationInfo();
    instrApp.packageName=ii.packageName;
    instrApp.sourceDir=ii.sourceDir;
    instrApp.publicSourceDir=ii.publicSourceDir;
    instrApp.splitSourceDirs=ii.splitSourceDirs;
    instrApp.splitPublicSourceDirs=ii.splitPublicSourceDirs;
    instrApp.dataDir=ii.dataDir;
    instrApp.nativeLibraryDir=ii.nativeLibraryDir;
    LoadedApk pi=getPackageInfo(instrApp,data.compatInfo,appContext.getClassLoader(),false,true,false);
    ContextImpl instrContext=ContextImpl.createAppContext(this,pi);
    try {
      java.lang.ClassLoader cl=instrContext.getClassLoader();
      mInstrumentation=(Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    mInstrumentation.init(this,instrContext,appContext,new ComponentName(ii.packageName,ii.name),data.instrumentationWatcher,data.instrumentationUiAutomationConnection);
    if (mProfiler.profileFile != null && !ii.handleProfiling && mProfiler.profileFd == null) {
      mProfiler.handlingProfiling=true;
      File file=new File(mProfiler.profileFile);
      file.getParentFile().mkdirs();
      Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);
    }
  }
 else {
    mInstrumentation=new Instrumentation();
  }
  if ((data.appInfo.flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0) {
    dalvik.system.VMRuntime.getRuntime().clearGrowthLimit();
  }
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskWrites();
  try {
    Application app=data.info.makeApplication(data.restrictedBackupMode,null);
    mInitialApplication=app;
    if (!data.restrictedBackupMode) {
      List<ProviderInfo> providers=data.providers;
      if (providers != null) {
        installContentProviders(app,providers);
        mH.sendEmptyMessageDelayed(H.ENABLE_JIT,10 * 1000);
      }
    }
    try {
      mInstrumentation.onCreate(data.instrumentationArgs);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    try {
      mInstrumentation.callApplicationOnCreate(app);
    }
 catch (    Exception e) {
      if (!mInstrumentation.onException(app,e)) {
        throw new RuntimeException(""String_Node_Str"" + app.getClass().getName() + ""String_Node_Str""+ e.toString(),e);
      }
    }
  }
  finally {
    StrictMode.setThreadPolicy(savedPolicy);
  }
}",0.9990529613171124
195760,"public void setHttpProxy(String host,String port,String exclList,Uri pacFileUrl){
  Proxy.setHttpProxySystemProperty(host,port,exclList,pacFileUrl);
}","public void setHttpProxy(String host,String port,String exclList,Uri pacFileUrl){
  final Network network=ConnectivityManager.getProcessDefaultNetwork();
  if (network != null) {
    Proxy.setHttpProxySystemProperty(ConnectivityManager.from(getSystemContext()).getDefaultProxy());
  }
 else {
    Proxy.setHttpProxySystemProperty(host,port,exclList,pacFileUrl);
  }
}",0.5802707930367504
195761,"/** 
 * Binds the current process to   {@code network}.  All Sockets created in the future (and not explicitly bound via a bound SocketFactory from  {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to  {@code network}.  All host name resolutions will be limited to   {@code network} as well.Note that if  {@code network} ever disconnects, all Sockets created in this way will cease towork and all host name resolutions will fail.  This is by design so an application doesn't accidentally use Sockets it thinks are still bound to a particular  {@link Network}. To clear binding pass   {@code null} for {@code network}.  Using individually bound Sockets created by Network.getSocketFactory().createSocket() and performing network-specific host name resolutions via  {@link Network#getAllByName Network.getAllByName} is preferred to calling{@code setProcessDefaultNetwork}.
 * @param network The {@link Network} to bind the current process to, or {@code null} to clearthe current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 */
public static boolean setProcessDefaultNetwork(Network network){
  int netId=(network == null) ? NETID_UNSET : network.netId;
  if (netId == NetworkUtils.getNetworkBoundToProcess()) {
    return true;
  }
  if (NetworkUtils.bindProcessToNetwork(netId)) {
    InetAddress.clearDnsCache();
    NetworkEventDispatcher.getInstance().onNetworkConfigurationChanged();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Binds the current process to   {@code network}.  All Sockets created in the future (and not explicitly bound via a bound SocketFactory from  {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to  {@code network}.  All host name resolutions will be limited to   {@code network} as well.Note that if  {@code network} ever disconnects, all Sockets created in this way will cease towork and all host name resolutions will fail.  This is by design so an application doesn't accidentally use Sockets it thinks are still bound to a particular  {@link Network}. To clear binding pass   {@code null} for {@code network}.  Using individually bound Sockets created by Network.getSocketFactory().createSocket() and performing network-specific host name resolutions via  {@link Network#getAllByName Network.getAllByName} is preferred to calling{@code setProcessDefaultNetwork}.
 * @param network The {@link Network} to bind the current process to, or {@code null} to clearthe current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 */
public static boolean setProcessDefaultNetwork(Network network){
  int netId=(network == null) ? NETID_UNSET : network.netId;
  if (netId == NetworkUtils.getNetworkBoundToProcess()) {
    return true;
  }
  if (NetworkUtils.bindProcessToNetwork(netId)) {
    Proxy.setHttpProxySystemProperty(getInstance().getDefaultProxy());
    InetAddress.clearDnsCache();
    NetworkEventDispatcher.getInstance().onNetworkConfigurationChanged();
    return true;
  }
 else {
    return false;
  }
}",0.9772508811278436
195762,"/** 
 * {@hide}
 */
public ConnectivityManager(IConnectivityManager service){
  mService=checkNotNull(service,""String_Node_Str"");
}","/** 
 * {@hide}
 */
public ConnectivityManager(IConnectivityManager service){
  mService=checkNotNull(service,""String_Node_Str"");
  sInstance=this;
}",0.9357142857142856
195763,"public void updateDismissView(boolean visible){
  int oldVisibility=mDismissView.willBeGone() ? GONE : mDismissView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mDismissView.willBeGone()) {
        mDismissView.cancelAnimation();
      }
 else {
        mDismissView.setInvisible();
      }
      mDismissView.setVisibility(newVisibility);
      mDismissView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable dimissHideFinishRunnable=new Runnable(){
        @Override public void run(){
          mDismissView.setVisibility(GONE);
          mDismissView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mDismissView.isButtonVisible() && mIsExpanded) {
        mDismissView.setWillBeGone(true);
        mDismissView.performVisibilityAnimation(false,dimissHideFinishRunnable);
      }
 else {
        dimissHideFinishRunnable.run();
        mDismissView.showClearButton();
      }
    }
  }
}","public void updateDismissView(boolean visible){
  int oldVisibility=mDismissView.willBeGone() ? GONE : mDismissView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mDismissView.willBeGone()) {
        mDismissView.cancelAnimation();
      }
 else {
        mDismissView.setInvisible();
      }
      mDismissView.setVisibility(newVisibility);
      mDismissView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable dimissHideFinishRunnable=new Runnable(){
        @Override public void run(){
          mDismissView.setVisibility(GONE);
          mDismissView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mDismissView.isButtonVisible() && mIsExpanded && mAnimationsEnabled) {
        mDismissView.setWillBeGone(true);
        mDismissView.performVisibilityAnimation(false,dimissHideFinishRunnable);
      }
 else {
        dimissHideFinishRunnable.run();
        mDismissView.showClearButton();
      }
    }
  }
}",0.990582191780822
195764,"public void updateEmptyShadeView(boolean visible){
  int oldVisibility=mEmptyShadeView.willBeGone() ? GONE : mEmptyShadeView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mEmptyShadeView.willBeGone()) {
        mEmptyShadeView.cancelAnimation();
      }
 else {
        mEmptyShadeView.setInvisible();
      }
      mEmptyShadeView.setVisibility(newVisibility);
      mEmptyShadeView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      mEmptyShadeView.setWillBeGone(true);
      mEmptyShadeView.performVisibilityAnimation(false,new Runnable(){
        @Override public void run(){
          mEmptyShadeView.setVisibility(GONE);
          mEmptyShadeView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
);
    }
  }
}","public void updateEmptyShadeView(boolean visible){
  int oldVisibility=mEmptyShadeView.willBeGone() ? GONE : mEmptyShadeView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mEmptyShadeView.willBeGone()) {
        mEmptyShadeView.cancelAnimation();
      }
 else {
        mEmptyShadeView.setInvisible();
      }
      mEmptyShadeView.setVisibility(newVisibility);
      mEmptyShadeView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable onFinishedRunnable=new Runnable(){
        @Override public void run(){
          mEmptyShadeView.setVisibility(GONE);
          mEmptyShadeView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mAnimationsEnabled) {
        mEmptyShadeView.setWillBeGone(true);
        mEmptyShadeView.performVisibilityAnimation(false,onFinishedRunnable);
      }
 else {
        mEmptyShadeView.setInvisible();
        onFinishedRunnable.run();
      }
    }
  }
}",0.8206831119544592
195765,"@Override public void createAnimation(final LockPatternView.CellState animatedCell,long delay,long duration,float translationY,final boolean appearing,Interpolator interpolator,final Runnable finishListener){
  if (appearing) {
    animatedCell.scale=0.0f;
  }
  animatedCell.translateY=appearing ? translationY : 0;
  ValueAnimator animator=ValueAnimator.ofFloat(animatedCell.translateY,appearing ? 0 : translationY);
  animator.setInterpolator(interpolator);
  animator.setDuration(duration);
  animator.setStartDelay(delay);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      float animatedFraction=animation.getAnimatedFraction();
      if (appearing) {
        animatedCell.scale=animatedFraction;
      }
 else {
        animatedCell.alpha=1 - animatedFraction;
      }
      animatedCell.translateY=(float)animation.getAnimatedValue();
      mLockPatternView.invalidate();
    }
  }
);
  if (finishListener != null) {
    animator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        finishListener.run();
      }
    }
);
    mAppearAnimationUtils.createAnimation(mEcaView,delay,duration,translationY,appearing,interpolator,null);
  }
  animator.start();
  mLockPatternView.invalidate();
}","@Override public void createAnimation(final LockPatternView.CellState animatedCell,long delay,long duration,float translationY,final boolean appearing,Interpolator interpolator,final Runnable finishListener){
  if (appearing) {
    animatedCell.scale=0.0f;
    animatedCell.alpha=1.0f;
  }
  animatedCell.translateY=appearing ? translationY : 0;
  ValueAnimator animator=ValueAnimator.ofFloat(animatedCell.translateY,appearing ? 0 : translationY);
  animator.setInterpolator(interpolator);
  animator.setDuration(duration);
  animator.setStartDelay(delay);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      float animatedFraction=animation.getAnimatedFraction();
      if (appearing) {
        animatedCell.scale=animatedFraction;
      }
 else {
        animatedCell.alpha=1 - animatedFraction;
      }
      animatedCell.translateY=(float)animation.getAnimatedValue();
      mLockPatternView.invalidate();
    }
  }
);
  if (finishListener != null) {
    animator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        finishListener.run();
      }
    }
);
    mAppearAnimationUtils.createAnimation(mEcaView,delay,duration,translationY,appearing,interpolator,null);
  }
  animator.start();
  mLockPatternView.invalidate();
}",0.9895041621425986
195766,"public void setDark(boolean dark,boolean fade,long delay){
  super.setDark(dark,fade,delay);
  if (mDark == dark) {
    return;
  }
  mDark=dark;
  if (!dark && fade) {
    if (mActivated) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
 else {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.INVISIBLE);
    }
    fadeDarkToDimmed(delay);
  }
 else {
    updateBackground();
  }
}","public void setDark(boolean dark,boolean fade,long delay){
  super.setDark(dark,fade,delay);
  if (mDark == dark) {
    return;
  }
  mDark=dark;
  if (!dark && fade) {
    if (mActivated) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
 else     if (mDimmed) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.INVISIBLE);
    }
 else {
      mBackgroundDimmed.setVisibility(View.INVISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
    fadeInFromDark(delay);
  }
 else {
    updateBackground();
  }
}",0.8287488908606921
195767,"public void updateDismissView(boolean visible){
  int oldVisibility=mDismissView.willBeGone() ? GONE : mDismissView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mDismissView.willBeGone()) {
        mDismissView.cancelAnimation();
      }
 else {
        mDismissView.setInvisible();
      }
      mDismissView.setVisibility(newVisibility);
      mDismissView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable dimissHideFinishRunnable=new Runnable(){
        @Override public void run(){
          mDismissView.setVisibility(GONE);
          mDismissView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mDismissView.isButtonVisible() && mIsExpanded) {
        mDismissView.setWillBeGone(true);
        mDismissView.performVisibilityAnimation(false,dimissHideFinishRunnable);
      }
 else {
        dimissHideFinishRunnable.run();
        mDismissView.showClearButton();
      }
    }
  }
}","public void updateDismissView(boolean visible){
  int oldVisibility=mDismissView.willBeGone() ? GONE : mDismissView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mDismissView.willBeGone()) {
        mDismissView.cancelAnimation();
      }
 else {
        mDismissView.setInvisible();
      }
      mDismissView.setVisibility(newVisibility);
      mDismissView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable dimissHideFinishRunnable=new Runnable(){
        @Override public void run(){
          mDismissView.setVisibility(GONE);
          mDismissView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mDismissView.isButtonVisible() && mIsExpanded && mAnimationsEnabled) {
        mDismissView.setWillBeGone(true);
        mDismissView.performVisibilityAnimation(false,dimissHideFinishRunnable);
      }
 else {
        dimissHideFinishRunnable.run();
        mDismissView.showClearButton();
      }
    }
  }
}",0.990582191780822
195768,"public void updateEmptyShadeView(boolean visible){
  int oldVisibility=mEmptyShadeView.willBeGone() ? GONE : mEmptyShadeView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mEmptyShadeView.willBeGone()) {
        mEmptyShadeView.cancelAnimation();
      }
 else {
        mEmptyShadeView.setInvisible();
      }
      mEmptyShadeView.setVisibility(newVisibility);
      mEmptyShadeView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      mEmptyShadeView.setWillBeGone(true);
      mEmptyShadeView.performVisibilityAnimation(false,new Runnable(){
        @Override public void run(){
          mEmptyShadeView.setVisibility(GONE);
          mEmptyShadeView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
);
    }
  }
}","public void updateEmptyShadeView(boolean visible){
  int oldVisibility=mEmptyShadeView.willBeGone() ? GONE : mEmptyShadeView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mEmptyShadeView.willBeGone()) {
        mEmptyShadeView.cancelAnimation();
      }
 else {
        mEmptyShadeView.setInvisible();
      }
      mEmptyShadeView.setVisibility(newVisibility);
      mEmptyShadeView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable onFinishedRunnable=new Runnable(){
        @Override public void run(){
          mEmptyShadeView.setVisibility(GONE);
          mEmptyShadeView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mAnimationsEnabled) {
        mEmptyShadeView.setWillBeGone(true);
        mEmptyShadeView.performVisibilityAnimation(false,onFinishedRunnable);
      }
 else {
        mEmptyShadeView.setInvisible();
        onFinishedRunnable.run();
      }
    }
  }
}",0.8206831119544592
195769,"public void updateDismissView(boolean visible){
  int oldVisibility=mDismissView.willBeGone() ? GONE : mDismissView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mDismissView.willBeGone()) {
        mDismissView.cancelAnimation();
      }
 else {
        mDismissView.setInvisible();
      }
      mDismissView.setVisibility(newVisibility);
      mDismissView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable dimissHideFinishRunnable=new Runnable(){
        @Override public void run(){
          mDismissView.setVisibility(GONE);
          mDismissView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mDismissView.isButtonVisible() && mIsExpanded) {
        mDismissView.setWillBeGone(true);
        mDismissView.performVisibilityAnimation(false,dimissHideFinishRunnable);
      }
 else {
        dimissHideFinishRunnable.run();
        mDismissView.showClearButton();
      }
    }
  }
}","public void updateDismissView(boolean visible){
  int oldVisibility=mDismissView.willBeGone() ? GONE : mDismissView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mDismissView.willBeGone()) {
        mDismissView.cancelAnimation();
      }
 else {
        mDismissView.setInvisible();
      }
      mDismissView.setVisibility(newVisibility);
      mDismissView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable dimissHideFinishRunnable=new Runnable(){
        @Override public void run(){
          mDismissView.setVisibility(GONE);
          mDismissView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mDismissView.isButtonVisible() && mIsExpanded && mAnimationsEnabled) {
        mDismissView.setWillBeGone(true);
        mDismissView.performVisibilityAnimation(false,dimissHideFinishRunnable);
      }
 else {
        dimissHideFinishRunnable.run();
        mDismissView.showClearButton();
      }
    }
  }
}",0.990582191780822
195770,"public void updateEmptyShadeView(boolean visible){
  int oldVisibility=mEmptyShadeView.willBeGone() ? GONE : mEmptyShadeView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mEmptyShadeView.willBeGone()) {
        mEmptyShadeView.cancelAnimation();
      }
 else {
        mEmptyShadeView.setInvisible();
      }
      mEmptyShadeView.setVisibility(newVisibility);
      mEmptyShadeView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      mEmptyShadeView.setWillBeGone(true);
      mEmptyShadeView.performVisibilityAnimation(false,new Runnable(){
        @Override public void run(){
          mEmptyShadeView.setVisibility(GONE);
          mEmptyShadeView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
);
    }
  }
}","public void updateEmptyShadeView(boolean visible){
  int oldVisibility=mEmptyShadeView.willBeGone() ? GONE : mEmptyShadeView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mEmptyShadeView.willBeGone()) {
        mEmptyShadeView.cancelAnimation();
      }
 else {
        mEmptyShadeView.setInvisible();
      }
      mEmptyShadeView.setVisibility(newVisibility);
      mEmptyShadeView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable onFinishedRunnable=new Runnable(){
        @Override public void run(){
          mEmptyShadeView.setVisibility(GONE);
          mEmptyShadeView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mAnimationsEnabled) {
        mEmptyShadeView.setWillBeGone(true);
        mEmptyShadeView.performVisibilityAnimation(false,onFinishedRunnable);
      }
 else {
        mEmptyShadeView.setInvisible();
        onFinishedRunnable.run();
      }
    }
  }
}",0.8206831119544592
195771,"@Override public void createAnimation(final LockPatternView.CellState animatedCell,long delay,long duration,float translationY,final boolean appearing,Interpolator interpolator,final Runnable finishListener){
  if (appearing) {
    animatedCell.scale=0.0f;
  }
  animatedCell.translateY=appearing ? translationY : 0;
  ValueAnimator animator=ValueAnimator.ofFloat(animatedCell.translateY,appearing ? 0 : translationY);
  animator.setInterpolator(interpolator);
  animator.setDuration(duration);
  animator.setStartDelay(delay);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      float animatedFraction=animation.getAnimatedFraction();
      if (appearing) {
        animatedCell.scale=animatedFraction;
      }
 else {
        animatedCell.alpha=1 - animatedFraction;
      }
      animatedCell.translateY=(float)animation.getAnimatedValue();
      mLockPatternView.invalidate();
    }
  }
);
  if (finishListener != null) {
    animator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        finishListener.run();
      }
    }
);
    mAppearAnimationUtils.createAnimation(mEcaView,delay,duration,translationY,appearing,interpolator,null);
  }
  animator.start();
  mLockPatternView.invalidate();
}","@Override public void createAnimation(final LockPatternView.CellState animatedCell,long delay,long duration,float translationY,final boolean appearing,Interpolator interpolator,final Runnable finishListener){
  if (appearing) {
    animatedCell.scale=0.0f;
    animatedCell.alpha=1.0f;
  }
  animatedCell.translateY=appearing ? translationY : 0;
  ValueAnimator animator=ValueAnimator.ofFloat(animatedCell.translateY,appearing ? 0 : translationY);
  animator.setInterpolator(interpolator);
  animator.setDuration(duration);
  animator.setStartDelay(delay);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      float animatedFraction=animation.getAnimatedFraction();
      if (appearing) {
        animatedCell.scale=animatedFraction;
      }
 else {
        animatedCell.alpha=1 - animatedFraction;
      }
      animatedCell.translateY=(float)animation.getAnimatedValue();
      mLockPatternView.invalidate();
    }
  }
);
  if (finishListener != null) {
    animator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        finishListener.run();
      }
    }
);
    mAppearAnimationUtils.createAnimation(mEcaView,delay,duration,translationY,appearing,interpolator,null);
  }
  animator.start();
  mLockPatternView.invalidate();
}",0.9895041621425986
195772,"public void setDark(boolean dark,boolean fade,long delay){
  super.setDark(dark,fade,delay);
  if (mDark == dark) {
    return;
  }
  mDark=dark;
  if (!dark && fade) {
    if (mActivated) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
 else {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.INVISIBLE);
    }
    fadeDarkToDimmed(delay);
  }
 else {
    updateBackground();
  }
}","public void setDark(boolean dark,boolean fade,long delay){
  super.setDark(dark,fade,delay);
  if (mDark == dark) {
    return;
  }
  mDark=dark;
  if (!dark && fade) {
    if (mActivated) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
 else     if (mDimmed) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.INVISIBLE);
    }
 else {
      mBackgroundDimmed.setVisibility(View.INVISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
    fadeInFromDark(delay);
  }
 else {
    updateBackground();
  }
}",0.8287488908606921
195773,"@Override public void createAnimation(final LockPatternView.CellState animatedCell,long delay,long duration,float translationY,final boolean appearing,Interpolator interpolator,final Runnable finishListener){
  if (appearing) {
    animatedCell.scale=0.0f;
  }
  animatedCell.translateY=appearing ? translationY : 0;
  ValueAnimator animator=ValueAnimator.ofFloat(animatedCell.translateY,appearing ? 0 : translationY);
  animator.setInterpolator(interpolator);
  animator.setDuration(duration);
  animator.setStartDelay(delay);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      float animatedFraction=animation.getAnimatedFraction();
      if (appearing) {
        animatedCell.scale=animatedFraction;
      }
 else {
        animatedCell.alpha=1 - animatedFraction;
      }
      animatedCell.translateY=(float)animation.getAnimatedValue();
      mLockPatternView.invalidate();
    }
  }
);
  if (finishListener != null) {
    animator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        finishListener.run();
      }
    }
);
    mAppearAnimationUtils.createAnimation(mEcaView,delay,duration,translationY,appearing,interpolator,null);
  }
  animator.start();
  mLockPatternView.invalidate();
}","@Override public void createAnimation(final LockPatternView.CellState animatedCell,long delay,long duration,float translationY,final boolean appearing,Interpolator interpolator,final Runnable finishListener){
  if (appearing) {
    animatedCell.scale=0.0f;
    animatedCell.alpha=1.0f;
  }
  animatedCell.translateY=appearing ? translationY : 0;
  ValueAnimator animator=ValueAnimator.ofFloat(animatedCell.translateY,appearing ? 0 : translationY);
  animator.setInterpolator(interpolator);
  animator.setDuration(duration);
  animator.setStartDelay(delay);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      float animatedFraction=animation.getAnimatedFraction();
      if (appearing) {
        animatedCell.scale=animatedFraction;
      }
 else {
        animatedCell.alpha=1 - animatedFraction;
      }
      animatedCell.translateY=(float)animation.getAnimatedValue();
      mLockPatternView.invalidate();
    }
  }
);
  if (finishListener != null) {
    animator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        finishListener.run();
      }
    }
);
    mAppearAnimationUtils.createAnimation(mEcaView,delay,duration,translationY,appearing,interpolator,null);
  }
  animator.start();
  mLockPatternView.invalidate();
}",0.9895041621425986
195774,"private void handleBindApplication(AppBindData data){
  mBoundApplication=data;
  mConfiguration=new Configuration(data.config);
  mCompatConfiguration=new Configuration(data.config);
  mProfiler=new Profiler();
  if (data.initProfilerInfo != null) {
    mProfiler.profileFile=data.initProfilerInfo.profileFile;
    mProfiler.profileFd=data.initProfilerInfo.profileFd;
    mProfiler.samplingInterval=data.initProfilerInfo.samplingInterval;
    mProfiler.autoStopProfiler=data.initProfilerInfo.autoStopProfiler;
  }
  Process.setArgV0(data.processName);
  android.ddm.DdmHandleAppName.setAppName(data.processName,UserHandle.myUserId());
  if (data.persistent) {
    if (!ActivityManager.isHighEndGfx()) {
      HardwareRenderer.disable(false);
    }
  }
  if (mProfiler.profileFd != null) {
    mProfiler.startProfiling();
  }
  if (data.appInfo.targetSdkVersion <= android.os.Build.VERSION_CODES.HONEYCOMB_MR1) {
    AsyncTask.setDefaultExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
  Message.updateCheckRecycle(data.appInfo.targetSdkVersion);
  TimeZone.setDefault(null);
  Locale.setDefault(data.config.locale);
  mResourcesManager.applyConfigurationToResourcesLocked(data.config,data.compatInfo);
  mCurDefaultDisplayDpi=data.config.densityDpi;
  applyCompatConfiguration(mCurDefaultDisplayDpi);
  data.info=getPackageInfoNoCheck(data.appInfo,data.compatInfo);
  if ((data.appInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) == 0) {
    mDensityCompatMode=true;
    Bitmap.setDefaultDensity(DisplayMetrics.DENSITY_DEFAULT);
  }
  updateDefaultDensity();
  final ContextImpl appContext=ContextImpl.createAppContext(this,data.info);
  if (!Process.isIsolated()) {
    final File cacheDir=appContext.getCacheDir();
    if (cacheDir != null) {
      System.setProperty(""String_Node_Str"",cacheDir.getAbsolutePath());
      setupGraphicsSupport(data.info,cacheDir);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  final boolean is24Hr=""String_Node_Str"".equals(mCoreSettings.getString(Settings.System.TIME_12_24));
  DateFormat.set24HourTimePref(is24Hr);
  View.mDebugViewAttributes=mCoreSettings.getInt(Settings.Global.DEBUG_VIEW_ATTRIBUTES,0) != 0;
  if ((data.appInfo.flags & (ApplicationInfo.FLAG_SYSTEM | ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0) {
    StrictMode.conditionallyEnableDebugLogging();
  }
  if (data.appInfo.targetSdkVersion > 9) {
    StrictMode.enableDeathOnNetwork();
  }
  if (data.debugMode != IApplicationThread.DEBUG_OFF) {
    Debug.changeDebugPort(8100);
    if (data.debugMode == IApplicationThread.DEBUG_WAIT) {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
      IActivityManager mgr=ActivityManagerNative.getDefault();
      try {
        mgr.showWaitingForDebugger(mAppThread,true);
      }
 catch (      RemoteException ex) {
      }
      Debug.waitForDebugger();
      try {
        mgr.showWaitingForDebugger(mAppThread,false);
      }
 catch (      RemoteException ex) {
      }
    }
 else {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
    }
  }
  if (data.enableOpenGlTrace) {
    GLUtils.setTracingLevel(1);
  }
  boolean appTracingAllowed=(data.appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
  Trace.setAppTracingAllowed(appTracingAllowed);
  IBinder b=ServiceManager.getService(Context.CONNECTIVITY_SERVICE);
  if (b != null) {
    IConnectivityManager service=IConnectivityManager.Stub.asInterface(b);
    try {
      ProxyInfo proxyInfo=service.getProxy();
      Proxy.setHttpProxySystemProperty(proxyInfo);
    }
 catch (    RemoteException e) {
    }
  }
  if (data.instrumentationName != null) {
    InstrumentationInfo ii=null;
    try {
      ii=appContext.getPackageManager().getInstrumentationInfo(data.instrumentationName,0);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName);
    }
    mInstrumentationPackageName=ii.packageName;
    mInstrumentationAppDir=ii.sourceDir;
    mInstrumentationSplitAppDirs=ii.splitSourceDirs;
    mInstrumentationLibDir=ii.nativeLibraryDir;
    mInstrumentedAppDir=data.info.getAppDir();
    mInstrumentedSplitAppDirs=data.info.getSplitAppDirs();
    mInstrumentedLibDir=data.info.getLibDir();
    ApplicationInfo instrApp=new ApplicationInfo();
    instrApp.packageName=ii.packageName;
    instrApp.sourceDir=ii.sourceDir;
    instrApp.publicSourceDir=ii.publicSourceDir;
    instrApp.splitSourceDirs=ii.splitSourceDirs;
    instrApp.splitPublicSourceDirs=ii.splitPublicSourceDirs;
    instrApp.dataDir=ii.dataDir;
    instrApp.nativeLibraryDir=ii.nativeLibraryDir;
    LoadedApk pi=getPackageInfo(instrApp,data.compatInfo,appContext.getClassLoader(),false,true,false);
    ContextImpl instrContext=ContextImpl.createAppContext(this,pi);
    try {
      java.lang.ClassLoader cl=instrContext.getClassLoader();
      mInstrumentation=(Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    mInstrumentation.init(this,instrContext,appContext,new ComponentName(ii.packageName,ii.name),data.instrumentationWatcher,data.instrumentationUiAutomationConnection);
    if (mProfiler.profileFile != null && !ii.handleProfiling && mProfiler.profileFd == null) {
      mProfiler.handlingProfiling=true;
      File file=new File(mProfiler.profileFile);
      file.getParentFile().mkdirs();
      Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);
    }
  }
 else {
    mInstrumentation=new Instrumentation();
  }
  if ((data.appInfo.flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0) {
    dalvik.system.VMRuntime.getRuntime().clearGrowthLimit();
  }
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskWrites();
  try {
    Application app=data.info.makeApplication(data.restrictedBackupMode,null);
    mInitialApplication=app;
    if (!data.restrictedBackupMode) {
      List<ProviderInfo> providers=data.providers;
      if (providers != null) {
        installContentProviders(app,providers);
        mH.sendEmptyMessageDelayed(H.ENABLE_JIT,10 * 1000);
      }
    }
    try {
      mInstrumentation.onCreate(data.instrumentationArgs);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    try {
      mInstrumentation.callApplicationOnCreate(app);
    }
 catch (    Exception e) {
      if (!mInstrumentation.onException(app,e)) {
        throw new RuntimeException(""String_Node_Str"" + app.getClass().getName() + ""String_Node_Str""+ e.toString(),e);
      }
    }
  }
  finally {
    StrictMode.setThreadPolicy(savedPolicy);
  }
}","private void handleBindApplication(AppBindData data){
  mBoundApplication=data;
  mConfiguration=new Configuration(data.config);
  mCompatConfiguration=new Configuration(data.config);
  mProfiler=new Profiler();
  if (data.initProfilerInfo != null) {
    mProfiler.profileFile=data.initProfilerInfo.profileFile;
    mProfiler.profileFd=data.initProfilerInfo.profileFd;
    mProfiler.samplingInterval=data.initProfilerInfo.samplingInterval;
    mProfiler.autoStopProfiler=data.initProfilerInfo.autoStopProfiler;
  }
  Process.setArgV0(data.processName);
  android.ddm.DdmHandleAppName.setAppName(data.processName,UserHandle.myUserId());
  if (data.persistent) {
    if (!ActivityManager.isHighEndGfx()) {
      HardwareRenderer.disable(false);
    }
  }
  if (mProfiler.profileFd != null) {
    mProfiler.startProfiling();
  }
  if (data.appInfo.targetSdkVersion <= android.os.Build.VERSION_CODES.HONEYCOMB_MR1) {
    AsyncTask.setDefaultExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
  Message.updateCheckRecycle(data.appInfo.targetSdkVersion);
  TimeZone.setDefault(null);
  Locale.setDefault(data.config.locale);
  mResourcesManager.applyConfigurationToResourcesLocked(data.config,data.compatInfo);
  mCurDefaultDisplayDpi=data.config.densityDpi;
  applyCompatConfiguration(mCurDefaultDisplayDpi);
  data.info=getPackageInfoNoCheck(data.appInfo,data.compatInfo);
  if ((data.appInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) == 0) {
    mDensityCompatMode=true;
    Bitmap.setDefaultDensity(DisplayMetrics.DENSITY_DEFAULT);
  }
  updateDefaultDensity();
  final ContextImpl appContext=ContextImpl.createAppContext(this,data.info);
  if (!Process.isIsolated()) {
    final File cacheDir=appContext.getCacheDir();
    if (cacheDir != null) {
      System.setProperty(""String_Node_Str"",cacheDir.getAbsolutePath());
      setupGraphicsSupport(data.info,cacheDir);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  final boolean is24Hr=""String_Node_Str"".equals(mCoreSettings.getString(Settings.System.TIME_12_24));
  DateFormat.set24HourTimePref(is24Hr);
  View.mDebugViewAttributes=mCoreSettings.getInt(Settings.Global.DEBUG_VIEW_ATTRIBUTES,0) != 0;
  if ((data.appInfo.flags & (ApplicationInfo.FLAG_SYSTEM | ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0) {
    StrictMode.conditionallyEnableDebugLogging();
  }
  if (data.appInfo.targetSdkVersion > 9) {
    StrictMode.enableDeathOnNetwork();
  }
  if (data.debugMode != IApplicationThread.DEBUG_OFF) {
    Debug.changeDebugPort(8100);
    if (data.debugMode == IApplicationThread.DEBUG_WAIT) {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
      IActivityManager mgr=ActivityManagerNative.getDefault();
      try {
        mgr.showWaitingForDebugger(mAppThread,true);
      }
 catch (      RemoteException ex) {
      }
      Debug.waitForDebugger();
      try {
        mgr.showWaitingForDebugger(mAppThread,false);
      }
 catch (      RemoteException ex) {
      }
    }
 else {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
    }
  }
  if (data.enableOpenGlTrace) {
    GLUtils.setTracingLevel(1);
  }
  boolean appTracingAllowed=(data.appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
  Trace.setAppTracingAllowed(appTracingAllowed);
  IBinder b=ServiceManager.getService(Context.CONNECTIVITY_SERVICE);
  if (b != null) {
    IConnectivityManager service=IConnectivityManager.Stub.asInterface(b);
    try {
      final ProxyInfo proxyInfo=service.getDefaultProxy();
      Proxy.setHttpProxySystemProperty(proxyInfo);
    }
 catch (    RemoteException e) {
    }
  }
  if (data.instrumentationName != null) {
    InstrumentationInfo ii=null;
    try {
      ii=appContext.getPackageManager().getInstrumentationInfo(data.instrumentationName,0);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName);
    }
    mInstrumentationPackageName=ii.packageName;
    mInstrumentationAppDir=ii.sourceDir;
    mInstrumentationSplitAppDirs=ii.splitSourceDirs;
    mInstrumentationLibDir=ii.nativeLibraryDir;
    mInstrumentedAppDir=data.info.getAppDir();
    mInstrumentedSplitAppDirs=data.info.getSplitAppDirs();
    mInstrumentedLibDir=data.info.getLibDir();
    ApplicationInfo instrApp=new ApplicationInfo();
    instrApp.packageName=ii.packageName;
    instrApp.sourceDir=ii.sourceDir;
    instrApp.publicSourceDir=ii.publicSourceDir;
    instrApp.splitSourceDirs=ii.splitSourceDirs;
    instrApp.splitPublicSourceDirs=ii.splitPublicSourceDirs;
    instrApp.dataDir=ii.dataDir;
    instrApp.nativeLibraryDir=ii.nativeLibraryDir;
    LoadedApk pi=getPackageInfo(instrApp,data.compatInfo,appContext.getClassLoader(),false,true,false);
    ContextImpl instrContext=ContextImpl.createAppContext(this,pi);
    try {
      java.lang.ClassLoader cl=instrContext.getClassLoader();
      mInstrumentation=(Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    mInstrumentation.init(this,instrContext,appContext,new ComponentName(ii.packageName,ii.name),data.instrumentationWatcher,data.instrumentationUiAutomationConnection);
    if (mProfiler.profileFile != null && !ii.handleProfiling && mProfiler.profileFd == null) {
      mProfiler.handlingProfiling=true;
      File file=new File(mProfiler.profileFile);
      file.getParentFile().mkdirs();
      Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);
    }
  }
 else {
    mInstrumentation=new Instrumentation();
  }
  if ((data.appInfo.flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0) {
    dalvik.system.VMRuntime.getRuntime().clearGrowthLimit();
  }
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskWrites();
  try {
    Application app=data.info.makeApplication(data.restrictedBackupMode,null);
    mInitialApplication=app;
    if (!data.restrictedBackupMode) {
      List<ProviderInfo> providers=data.providers;
      if (providers != null) {
        installContentProviders(app,providers);
        mH.sendEmptyMessageDelayed(H.ENABLE_JIT,10 * 1000);
      }
    }
    try {
      mInstrumentation.onCreate(data.instrumentationArgs);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    try {
      mInstrumentation.callApplicationOnCreate(app);
    }
 catch (    Exception e) {
      if (!mInstrumentation.onException(app,e)) {
        throw new RuntimeException(""String_Node_Str"" + app.getClass().getName() + ""String_Node_Str""+ e.toString(),e);
      }
    }
  }
  finally {
    StrictMode.setThreadPolicy(savedPolicy);
  }
}",0.9990529613171124
195775,"public void setHttpProxy(String host,String port,String exclList,Uri pacFileUrl){
  Proxy.setHttpProxySystemProperty(host,port,exclList,pacFileUrl);
}","public void setHttpProxy(String host,String port,String exclList,Uri pacFileUrl){
  final Network network=ConnectivityManager.getProcessDefaultNetwork();
  if (network != null) {
    Proxy.setHttpProxySystemProperty(ConnectivityManager.from(getSystemContext()).getDefaultProxy());
  }
 else {
    Proxy.setHttpProxySystemProperty(host,port,exclList,pacFileUrl);
  }
}",0.5802707930367504
195776,"/** 
 * Binds the current process to   {@code network}.  All Sockets created in the future (and not explicitly bound via a bound SocketFactory from  {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to  {@code network}.  All host name resolutions will be limited to   {@code network} as well.Note that if  {@code network} ever disconnects, all Sockets created in this way will cease towork and all host name resolutions will fail.  This is by design so an application doesn't accidentally use Sockets it thinks are still bound to a particular  {@link Network}. To clear binding pass   {@code null} for {@code network}.  Using individually bound Sockets created by Network.getSocketFactory().createSocket() and performing network-specific host name resolutions via  {@link Network#getAllByName Network.getAllByName} is preferred to calling{@code setProcessDefaultNetwork}.
 * @param network The {@link Network} to bind the current process to, or {@code null} to clearthe current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 */
public static boolean setProcessDefaultNetwork(Network network){
  int netId=(network == null) ? NETID_UNSET : network.netId;
  if (netId == NetworkUtils.getNetworkBoundToProcess()) {
    return true;
  }
  if (NetworkUtils.bindProcessToNetwork(netId)) {
    InetAddress.clearDnsCache();
    NetworkEventDispatcher.getInstance().onNetworkConfigurationChanged();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Binds the current process to   {@code network}.  All Sockets created in the future (and not explicitly bound via a bound SocketFactory from  {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to  {@code network}.  All host name resolutions will be limited to   {@code network} as well.Note that if  {@code network} ever disconnects, all Sockets created in this way will cease towork and all host name resolutions will fail.  This is by design so an application doesn't accidentally use Sockets it thinks are still bound to a particular  {@link Network}. To clear binding pass   {@code null} for {@code network}.  Using individually bound Sockets created by Network.getSocketFactory().createSocket() and performing network-specific host name resolutions via  {@link Network#getAllByName Network.getAllByName} is preferred to calling{@code setProcessDefaultNetwork}.
 * @param network The {@link Network} to bind the current process to, or {@code null} to clearthe current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 */
public static boolean setProcessDefaultNetwork(Network network){
  int netId=(network == null) ? NETID_UNSET : network.netId;
  if (netId == NetworkUtils.getNetworkBoundToProcess()) {
    return true;
  }
  if (NetworkUtils.bindProcessToNetwork(netId)) {
    Proxy.setHttpProxySystemProperty(getInstance().getDefaultProxy());
    InetAddress.clearDnsCache();
    NetworkEventDispatcher.getInstance().onNetworkConfigurationChanged();
    return true;
  }
 else {
    return false;
  }
}",0.9772508811278436
195777,"/** 
 * {@hide}
 */
public ConnectivityManager(IConnectivityManager service){
  mService=checkNotNull(service,""String_Node_Str"");
}","/** 
 * {@hide}
 */
public ConnectivityManager(IConnectivityManager service){
  mService=checkNotNull(service,""String_Node_Str"");
  sInstance=this;
}",0.9357142857142856
195778,"private void handleBindApplication(AppBindData data){
  mBoundApplication=data;
  mConfiguration=new Configuration(data.config);
  mCompatConfiguration=new Configuration(data.config);
  mProfiler=new Profiler();
  if (data.initProfilerInfo != null) {
    mProfiler.profileFile=data.initProfilerInfo.profileFile;
    mProfiler.profileFd=data.initProfilerInfo.profileFd;
    mProfiler.samplingInterval=data.initProfilerInfo.samplingInterval;
    mProfiler.autoStopProfiler=data.initProfilerInfo.autoStopProfiler;
  }
  Process.setArgV0(data.processName);
  android.ddm.DdmHandleAppName.setAppName(data.processName,UserHandle.myUserId());
  if (data.persistent) {
    if (!ActivityManager.isHighEndGfx()) {
      HardwareRenderer.disable(false);
    }
  }
  if (mProfiler.profileFd != null) {
    mProfiler.startProfiling();
  }
  if (data.appInfo.targetSdkVersion <= android.os.Build.VERSION_CODES.HONEYCOMB_MR1) {
    AsyncTask.setDefaultExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
  Message.updateCheckRecycle(data.appInfo.targetSdkVersion);
  TimeZone.setDefault(null);
  Locale.setDefault(data.config.locale);
  mResourcesManager.applyConfigurationToResourcesLocked(data.config,data.compatInfo);
  mCurDefaultDisplayDpi=data.config.densityDpi;
  applyCompatConfiguration(mCurDefaultDisplayDpi);
  data.info=getPackageInfoNoCheck(data.appInfo,data.compatInfo);
  if ((data.appInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) == 0) {
    mDensityCompatMode=true;
    Bitmap.setDefaultDensity(DisplayMetrics.DENSITY_DEFAULT);
  }
  updateDefaultDensity();
  final ContextImpl appContext=ContextImpl.createAppContext(this,data.info);
  if (!Process.isIsolated()) {
    final File cacheDir=appContext.getCacheDir();
    if (cacheDir != null) {
      System.setProperty(""String_Node_Str"",cacheDir.getAbsolutePath());
      setupGraphicsSupport(data.info,cacheDir);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  final boolean is24Hr=""String_Node_Str"".equals(mCoreSettings.getString(Settings.System.TIME_12_24));
  DateFormat.set24HourTimePref(is24Hr);
  View.mDebugViewAttributes=mCoreSettings.getInt(Settings.Global.DEBUG_VIEW_ATTRIBUTES,0) != 0;
  if ((data.appInfo.flags & (ApplicationInfo.FLAG_SYSTEM | ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0) {
    StrictMode.conditionallyEnableDebugLogging();
  }
  if (data.appInfo.targetSdkVersion > 9) {
    StrictMode.enableDeathOnNetwork();
  }
  if (data.debugMode != IApplicationThread.DEBUG_OFF) {
    Debug.changeDebugPort(8100);
    if (data.debugMode == IApplicationThread.DEBUG_WAIT) {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
      IActivityManager mgr=ActivityManagerNative.getDefault();
      try {
        mgr.showWaitingForDebugger(mAppThread,true);
      }
 catch (      RemoteException ex) {
      }
      Debug.waitForDebugger();
      try {
        mgr.showWaitingForDebugger(mAppThread,false);
      }
 catch (      RemoteException ex) {
      }
    }
 else {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
    }
  }
  if (data.enableOpenGlTrace) {
    GLUtils.setTracingLevel(1);
  }
  boolean appTracingAllowed=(data.appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
  Trace.setAppTracingAllowed(appTracingAllowed);
  IBinder b=ServiceManager.getService(Context.CONNECTIVITY_SERVICE);
  if (b != null) {
    IConnectivityManager service=IConnectivityManager.Stub.asInterface(b);
    try {
      ProxyInfo proxyInfo=service.getProxy();
      Proxy.setHttpProxySystemProperty(proxyInfo);
    }
 catch (    RemoteException e) {
    }
  }
  if (data.instrumentationName != null) {
    InstrumentationInfo ii=null;
    try {
      ii=appContext.getPackageManager().getInstrumentationInfo(data.instrumentationName,0);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName);
    }
    mInstrumentationPackageName=ii.packageName;
    mInstrumentationAppDir=ii.sourceDir;
    mInstrumentationSplitAppDirs=ii.splitSourceDirs;
    mInstrumentationLibDir=ii.nativeLibraryDir;
    mInstrumentedAppDir=data.info.getAppDir();
    mInstrumentedSplitAppDirs=data.info.getSplitAppDirs();
    mInstrumentedLibDir=data.info.getLibDir();
    ApplicationInfo instrApp=new ApplicationInfo();
    instrApp.packageName=ii.packageName;
    instrApp.sourceDir=ii.sourceDir;
    instrApp.publicSourceDir=ii.publicSourceDir;
    instrApp.splitSourceDirs=ii.splitSourceDirs;
    instrApp.splitPublicSourceDirs=ii.splitPublicSourceDirs;
    instrApp.dataDir=ii.dataDir;
    instrApp.nativeLibraryDir=ii.nativeLibraryDir;
    LoadedApk pi=getPackageInfo(instrApp,data.compatInfo,appContext.getClassLoader(),false,true,false);
    ContextImpl instrContext=ContextImpl.createAppContext(this,pi);
    try {
      java.lang.ClassLoader cl=instrContext.getClassLoader();
      mInstrumentation=(Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    mInstrumentation.init(this,instrContext,appContext,new ComponentName(ii.packageName,ii.name),data.instrumentationWatcher,data.instrumentationUiAutomationConnection);
    if (mProfiler.profileFile != null && !ii.handleProfiling && mProfiler.profileFd == null) {
      mProfiler.handlingProfiling=true;
      File file=new File(mProfiler.profileFile);
      file.getParentFile().mkdirs();
      Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);
    }
  }
 else {
    mInstrumentation=new Instrumentation();
  }
  if ((data.appInfo.flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0) {
    dalvik.system.VMRuntime.getRuntime().clearGrowthLimit();
  }
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskWrites();
  try {
    Application app=data.info.makeApplication(data.restrictedBackupMode,null);
    mInitialApplication=app;
    if (!data.restrictedBackupMode) {
      List<ProviderInfo> providers=data.providers;
      if (providers != null) {
        installContentProviders(app,providers);
        mH.sendEmptyMessageDelayed(H.ENABLE_JIT,10 * 1000);
      }
    }
    try {
      mInstrumentation.onCreate(data.instrumentationArgs);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    try {
      mInstrumentation.callApplicationOnCreate(app);
    }
 catch (    Exception e) {
      if (!mInstrumentation.onException(app,e)) {
        throw new RuntimeException(""String_Node_Str"" + app.getClass().getName() + ""String_Node_Str""+ e.toString(),e);
      }
    }
  }
  finally {
    StrictMode.setThreadPolicy(savedPolicy);
  }
}","private void handleBindApplication(AppBindData data){
  mBoundApplication=data;
  mConfiguration=new Configuration(data.config);
  mCompatConfiguration=new Configuration(data.config);
  mProfiler=new Profiler();
  if (data.initProfilerInfo != null) {
    mProfiler.profileFile=data.initProfilerInfo.profileFile;
    mProfiler.profileFd=data.initProfilerInfo.profileFd;
    mProfiler.samplingInterval=data.initProfilerInfo.samplingInterval;
    mProfiler.autoStopProfiler=data.initProfilerInfo.autoStopProfiler;
  }
  Process.setArgV0(data.processName);
  android.ddm.DdmHandleAppName.setAppName(data.processName,UserHandle.myUserId());
  if (data.persistent) {
    if (!ActivityManager.isHighEndGfx()) {
      HardwareRenderer.disable(false);
    }
  }
  if (mProfiler.profileFd != null) {
    mProfiler.startProfiling();
  }
  if (data.appInfo.targetSdkVersion <= android.os.Build.VERSION_CODES.HONEYCOMB_MR1) {
    AsyncTask.setDefaultExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
  Message.updateCheckRecycle(data.appInfo.targetSdkVersion);
  TimeZone.setDefault(null);
  Locale.setDefault(data.config.locale);
  mResourcesManager.applyConfigurationToResourcesLocked(data.config,data.compatInfo);
  mCurDefaultDisplayDpi=data.config.densityDpi;
  applyCompatConfiguration(mCurDefaultDisplayDpi);
  data.info=getPackageInfoNoCheck(data.appInfo,data.compatInfo);
  if ((data.appInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) == 0) {
    mDensityCompatMode=true;
    Bitmap.setDefaultDensity(DisplayMetrics.DENSITY_DEFAULT);
  }
  updateDefaultDensity();
  final ContextImpl appContext=ContextImpl.createAppContext(this,data.info);
  if (!Process.isIsolated()) {
    final File cacheDir=appContext.getCacheDir();
    if (cacheDir != null) {
      System.setProperty(""String_Node_Str"",cacheDir.getAbsolutePath());
      setupGraphicsSupport(data.info,cacheDir);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  final boolean is24Hr=""String_Node_Str"".equals(mCoreSettings.getString(Settings.System.TIME_12_24));
  DateFormat.set24HourTimePref(is24Hr);
  View.mDebugViewAttributes=mCoreSettings.getInt(Settings.Global.DEBUG_VIEW_ATTRIBUTES,0) != 0;
  if ((data.appInfo.flags & (ApplicationInfo.FLAG_SYSTEM | ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0) {
    StrictMode.conditionallyEnableDebugLogging();
  }
  if (data.appInfo.targetSdkVersion > 9) {
    StrictMode.enableDeathOnNetwork();
  }
  if (data.debugMode != IApplicationThread.DEBUG_OFF) {
    Debug.changeDebugPort(8100);
    if (data.debugMode == IApplicationThread.DEBUG_WAIT) {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
      IActivityManager mgr=ActivityManagerNative.getDefault();
      try {
        mgr.showWaitingForDebugger(mAppThread,true);
      }
 catch (      RemoteException ex) {
      }
      Debug.waitForDebugger();
      try {
        mgr.showWaitingForDebugger(mAppThread,false);
      }
 catch (      RemoteException ex) {
      }
    }
 else {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
    }
  }
  if (data.enableOpenGlTrace) {
    GLUtils.setTracingLevel(1);
  }
  boolean appTracingAllowed=(data.appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
  Trace.setAppTracingAllowed(appTracingAllowed);
  IBinder b=ServiceManager.getService(Context.CONNECTIVITY_SERVICE);
  if (b != null) {
    IConnectivityManager service=IConnectivityManager.Stub.asInterface(b);
    try {
      final ProxyInfo proxyInfo=service.getDefaultProxy();
      Proxy.setHttpProxySystemProperty(proxyInfo);
    }
 catch (    RemoteException e) {
    }
  }
  if (data.instrumentationName != null) {
    InstrumentationInfo ii=null;
    try {
      ii=appContext.getPackageManager().getInstrumentationInfo(data.instrumentationName,0);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName);
    }
    mInstrumentationPackageName=ii.packageName;
    mInstrumentationAppDir=ii.sourceDir;
    mInstrumentationSplitAppDirs=ii.splitSourceDirs;
    mInstrumentationLibDir=ii.nativeLibraryDir;
    mInstrumentedAppDir=data.info.getAppDir();
    mInstrumentedSplitAppDirs=data.info.getSplitAppDirs();
    mInstrumentedLibDir=data.info.getLibDir();
    ApplicationInfo instrApp=new ApplicationInfo();
    instrApp.packageName=ii.packageName;
    instrApp.sourceDir=ii.sourceDir;
    instrApp.publicSourceDir=ii.publicSourceDir;
    instrApp.splitSourceDirs=ii.splitSourceDirs;
    instrApp.splitPublicSourceDirs=ii.splitPublicSourceDirs;
    instrApp.dataDir=ii.dataDir;
    instrApp.nativeLibraryDir=ii.nativeLibraryDir;
    LoadedApk pi=getPackageInfo(instrApp,data.compatInfo,appContext.getClassLoader(),false,true,false);
    ContextImpl instrContext=ContextImpl.createAppContext(this,pi);
    try {
      java.lang.ClassLoader cl=instrContext.getClassLoader();
      mInstrumentation=(Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    mInstrumentation.init(this,instrContext,appContext,new ComponentName(ii.packageName,ii.name),data.instrumentationWatcher,data.instrumentationUiAutomationConnection);
    if (mProfiler.profileFile != null && !ii.handleProfiling && mProfiler.profileFd == null) {
      mProfiler.handlingProfiling=true;
      File file=new File(mProfiler.profileFile);
      file.getParentFile().mkdirs();
      Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);
    }
  }
 else {
    mInstrumentation=new Instrumentation();
  }
  if ((data.appInfo.flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0) {
    dalvik.system.VMRuntime.getRuntime().clearGrowthLimit();
  }
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskWrites();
  try {
    Application app=data.info.makeApplication(data.restrictedBackupMode,null);
    mInitialApplication=app;
    if (!data.restrictedBackupMode) {
      List<ProviderInfo> providers=data.providers;
      if (providers != null) {
        installContentProviders(app,providers);
        mH.sendEmptyMessageDelayed(H.ENABLE_JIT,10 * 1000);
      }
    }
    try {
      mInstrumentation.onCreate(data.instrumentationArgs);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    try {
      mInstrumentation.callApplicationOnCreate(app);
    }
 catch (    Exception e) {
      if (!mInstrumentation.onException(app,e)) {
        throw new RuntimeException(""String_Node_Str"" + app.getClass().getName() + ""String_Node_Str""+ e.toString(),e);
      }
    }
  }
  finally {
    StrictMode.setThreadPolicy(savedPolicy);
  }
}",0.9990529613171124
195779,"public void setHttpProxy(String host,String port,String exclList,Uri pacFileUrl){
  Proxy.setHttpProxySystemProperty(host,port,exclList,pacFileUrl);
}","public void setHttpProxy(String host,String port,String exclList,Uri pacFileUrl){
  final Network network=ConnectivityManager.getProcessDefaultNetwork();
  if (network != null) {
    Proxy.setHttpProxySystemProperty(ConnectivityManager.from(getSystemContext()).getDefaultProxy());
  }
 else {
    Proxy.setHttpProxySystemProperty(host,port,exclList,pacFileUrl);
  }
}",0.5802707930367504
195780,"/** 
 * Binds the current process to   {@code network}.  All Sockets created in the future (and not explicitly bound via a bound SocketFactory from  {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to  {@code network}.  All host name resolutions will be limited to   {@code network} as well.Note that if  {@code network} ever disconnects, all Sockets created in this way will cease towork and all host name resolutions will fail.  This is by design so an application doesn't accidentally use Sockets it thinks are still bound to a particular  {@link Network}. To clear binding pass   {@code null} for {@code network}.  Using individually bound Sockets created by Network.getSocketFactory().createSocket() and performing network-specific host name resolutions via  {@link Network#getAllByName Network.getAllByName} is preferred to calling{@code setProcessDefaultNetwork}.
 * @param network The {@link Network} to bind the current process to, or {@code null} to clearthe current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 */
public static boolean setProcessDefaultNetwork(Network network){
  int netId=(network == null) ? NETID_UNSET : network.netId;
  if (netId == NetworkUtils.getNetworkBoundToProcess()) {
    return true;
  }
  if (NetworkUtils.bindProcessToNetwork(netId)) {
    InetAddress.clearDnsCache();
    NetworkEventDispatcher.getInstance().onNetworkConfigurationChanged();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Binds the current process to   {@code network}.  All Sockets created in the future (and not explicitly bound via a bound SocketFactory from  {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to  {@code network}.  All host name resolutions will be limited to   {@code network} as well.Note that if  {@code network} ever disconnects, all Sockets created in this way will cease towork and all host name resolutions will fail.  This is by design so an application doesn't accidentally use Sockets it thinks are still bound to a particular  {@link Network}. To clear binding pass   {@code null} for {@code network}.  Using individually bound Sockets created by Network.getSocketFactory().createSocket() and performing network-specific host name resolutions via  {@link Network#getAllByName Network.getAllByName} is preferred to calling{@code setProcessDefaultNetwork}.
 * @param network The {@link Network} to bind the current process to, or {@code null} to clearthe current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 */
public static boolean setProcessDefaultNetwork(Network network){
  int netId=(network == null) ? NETID_UNSET : network.netId;
  if (netId == NetworkUtils.getNetworkBoundToProcess()) {
    return true;
  }
  if (NetworkUtils.bindProcessToNetwork(netId)) {
    Proxy.setHttpProxySystemProperty(getInstance().getDefaultProxy());
    InetAddress.clearDnsCache();
    NetworkEventDispatcher.getInstance().onNetworkConfigurationChanged();
    return true;
  }
 else {
    return false;
  }
}",0.9772508811278436
195781,"/** 
 * {@hide}
 */
public ConnectivityManager(IConnectivityManager service){
  mService=checkNotNull(service,""String_Node_Str"");
}","/** 
 * {@hide}
 */
public ConnectivityManager(IConnectivityManager service){
  mService=checkNotNull(service,""String_Node_Str"");
  sInstance=this;
}",0.9357142857142856
195782,"private void handleBindApplication(AppBindData data){
  mBoundApplication=data;
  mConfiguration=new Configuration(data.config);
  mCompatConfiguration=new Configuration(data.config);
  mProfiler=new Profiler();
  if (data.initProfilerInfo != null) {
    mProfiler.profileFile=data.initProfilerInfo.profileFile;
    mProfiler.profileFd=data.initProfilerInfo.profileFd;
    mProfiler.samplingInterval=data.initProfilerInfo.samplingInterval;
    mProfiler.autoStopProfiler=data.initProfilerInfo.autoStopProfiler;
  }
  Process.setArgV0(data.processName);
  android.ddm.DdmHandleAppName.setAppName(data.processName,UserHandle.myUserId());
  if (data.persistent) {
    if (!ActivityManager.isHighEndGfx()) {
      HardwareRenderer.disable(false);
    }
  }
  if (mProfiler.profileFd != null) {
    mProfiler.startProfiling();
  }
  if (data.appInfo.targetSdkVersion <= android.os.Build.VERSION_CODES.HONEYCOMB_MR1) {
    AsyncTask.setDefaultExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
  Message.updateCheckRecycle(data.appInfo.targetSdkVersion);
  TimeZone.setDefault(null);
  Locale.setDefault(data.config.locale);
  mResourcesManager.applyConfigurationToResourcesLocked(data.config,data.compatInfo);
  mCurDefaultDisplayDpi=data.config.densityDpi;
  applyCompatConfiguration(mCurDefaultDisplayDpi);
  data.info=getPackageInfoNoCheck(data.appInfo,data.compatInfo);
  if ((data.appInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) == 0) {
    mDensityCompatMode=true;
    Bitmap.setDefaultDensity(DisplayMetrics.DENSITY_DEFAULT);
  }
  updateDefaultDensity();
  final ContextImpl appContext=ContextImpl.createAppContext(this,data.info);
  if (!Process.isIsolated()) {
    final File cacheDir=appContext.getCacheDir();
    if (cacheDir != null) {
      System.setProperty(""String_Node_Str"",cacheDir.getAbsolutePath());
      setupGraphicsSupport(data.info,cacheDir);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  final boolean is24Hr=""String_Node_Str"".equals(mCoreSettings.getString(Settings.System.TIME_12_24));
  DateFormat.set24HourTimePref(is24Hr);
  View.mDebugViewAttributes=mCoreSettings.getInt(Settings.Global.DEBUG_VIEW_ATTRIBUTES,0) != 0;
  if ((data.appInfo.flags & (ApplicationInfo.FLAG_SYSTEM | ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0) {
    StrictMode.conditionallyEnableDebugLogging();
  }
  if (data.appInfo.targetSdkVersion > 9) {
    StrictMode.enableDeathOnNetwork();
  }
  if (data.debugMode != IApplicationThread.DEBUG_OFF) {
    Debug.changeDebugPort(8100);
    if (data.debugMode == IApplicationThread.DEBUG_WAIT) {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
      IActivityManager mgr=ActivityManagerNative.getDefault();
      try {
        mgr.showWaitingForDebugger(mAppThread,true);
      }
 catch (      RemoteException ex) {
      }
      Debug.waitForDebugger();
      try {
        mgr.showWaitingForDebugger(mAppThread,false);
      }
 catch (      RemoteException ex) {
      }
    }
 else {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
    }
  }
  if (data.enableOpenGlTrace) {
    GLUtils.setTracingLevel(1);
  }
  boolean appTracingAllowed=(data.appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
  Trace.setAppTracingAllowed(appTracingAllowed);
  IBinder b=ServiceManager.getService(Context.CONNECTIVITY_SERVICE);
  if (b != null) {
    IConnectivityManager service=IConnectivityManager.Stub.asInterface(b);
    try {
      ProxyInfo proxyInfo=service.getProxy();
      Proxy.setHttpProxySystemProperty(proxyInfo);
    }
 catch (    RemoteException e) {
    }
  }
  if (data.instrumentationName != null) {
    InstrumentationInfo ii=null;
    try {
      ii=appContext.getPackageManager().getInstrumentationInfo(data.instrumentationName,0);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName);
    }
    mInstrumentationPackageName=ii.packageName;
    mInstrumentationAppDir=ii.sourceDir;
    mInstrumentationSplitAppDirs=ii.splitSourceDirs;
    mInstrumentationLibDir=ii.nativeLibraryDir;
    mInstrumentedAppDir=data.info.getAppDir();
    mInstrumentedSplitAppDirs=data.info.getSplitAppDirs();
    mInstrumentedLibDir=data.info.getLibDir();
    ApplicationInfo instrApp=new ApplicationInfo();
    instrApp.packageName=ii.packageName;
    instrApp.sourceDir=ii.sourceDir;
    instrApp.publicSourceDir=ii.publicSourceDir;
    instrApp.splitSourceDirs=ii.splitSourceDirs;
    instrApp.splitPublicSourceDirs=ii.splitPublicSourceDirs;
    instrApp.dataDir=ii.dataDir;
    instrApp.nativeLibraryDir=ii.nativeLibraryDir;
    LoadedApk pi=getPackageInfo(instrApp,data.compatInfo,appContext.getClassLoader(),false,true,false);
    ContextImpl instrContext=ContextImpl.createAppContext(this,pi);
    try {
      java.lang.ClassLoader cl=instrContext.getClassLoader();
      mInstrumentation=(Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    mInstrumentation.init(this,instrContext,appContext,new ComponentName(ii.packageName,ii.name),data.instrumentationWatcher,data.instrumentationUiAutomationConnection);
    if (mProfiler.profileFile != null && !ii.handleProfiling && mProfiler.profileFd == null) {
      mProfiler.handlingProfiling=true;
      File file=new File(mProfiler.profileFile);
      file.getParentFile().mkdirs();
      Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);
    }
  }
 else {
    mInstrumentation=new Instrumentation();
  }
  if ((data.appInfo.flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0) {
    dalvik.system.VMRuntime.getRuntime().clearGrowthLimit();
  }
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskWrites();
  try {
    Application app=data.info.makeApplication(data.restrictedBackupMode,null);
    mInitialApplication=app;
    if (!data.restrictedBackupMode) {
      List<ProviderInfo> providers=data.providers;
      if (providers != null) {
        installContentProviders(app,providers);
        mH.sendEmptyMessageDelayed(H.ENABLE_JIT,10 * 1000);
      }
    }
    try {
      mInstrumentation.onCreate(data.instrumentationArgs);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    try {
      mInstrumentation.callApplicationOnCreate(app);
    }
 catch (    Exception e) {
      if (!mInstrumentation.onException(app,e)) {
        throw new RuntimeException(""String_Node_Str"" + app.getClass().getName() + ""String_Node_Str""+ e.toString(),e);
      }
    }
  }
  finally {
    StrictMode.setThreadPolicy(savedPolicy);
  }
}","private void handleBindApplication(AppBindData data){
  mBoundApplication=data;
  mConfiguration=new Configuration(data.config);
  mCompatConfiguration=new Configuration(data.config);
  mProfiler=new Profiler();
  if (data.initProfilerInfo != null) {
    mProfiler.profileFile=data.initProfilerInfo.profileFile;
    mProfiler.profileFd=data.initProfilerInfo.profileFd;
    mProfiler.samplingInterval=data.initProfilerInfo.samplingInterval;
    mProfiler.autoStopProfiler=data.initProfilerInfo.autoStopProfiler;
  }
  Process.setArgV0(data.processName);
  android.ddm.DdmHandleAppName.setAppName(data.processName,UserHandle.myUserId());
  if (data.persistent) {
    if (!ActivityManager.isHighEndGfx()) {
      HardwareRenderer.disable(false);
    }
  }
  if (mProfiler.profileFd != null) {
    mProfiler.startProfiling();
  }
  if (data.appInfo.targetSdkVersion <= android.os.Build.VERSION_CODES.HONEYCOMB_MR1) {
    AsyncTask.setDefaultExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
  Message.updateCheckRecycle(data.appInfo.targetSdkVersion);
  TimeZone.setDefault(null);
  Locale.setDefault(data.config.locale);
  mResourcesManager.applyConfigurationToResourcesLocked(data.config,data.compatInfo);
  mCurDefaultDisplayDpi=data.config.densityDpi;
  applyCompatConfiguration(mCurDefaultDisplayDpi);
  data.info=getPackageInfoNoCheck(data.appInfo,data.compatInfo);
  if ((data.appInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) == 0) {
    mDensityCompatMode=true;
    Bitmap.setDefaultDensity(DisplayMetrics.DENSITY_DEFAULT);
  }
  updateDefaultDensity();
  final ContextImpl appContext=ContextImpl.createAppContext(this,data.info);
  if (!Process.isIsolated()) {
    final File cacheDir=appContext.getCacheDir();
    if (cacheDir != null) {
      System.setProperty(""String_Node_Str"",cacheDir.getAbsolutePath());
      setupGraphicsSupport(data.info,cacheDir);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  final boolean is24Hr=""String_Node_Str"".equals(mCoreSettings.getString(Settings.System.TIME_12_24));
  DateFormat.set24HourTimePref(is24Hr);
  View.mDebugViewAttributes=mCoreSettings.getInt(Settings.Global.DEBUG_VIEW_ATTRIBUTES,0) != 0;
  if ((data.appInfo.flags & (ApplicationInfo.FLAG_SYSTEM | ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0) {
    StrictMode.conditionallyEnableDebugLogging();
  }
  if (data.appInfo.targetSdkVersion > 9) {
    StrictMode.enableDeathOnNetwork();
  }
  if (data.debugMode != IApplicationThread.DEBUG_OFF) {
    Debug.changeDebugPort(8100);
    if (data.debugMode == IApplicationThread.DEBUG_WAIT) {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
      IActivityManager mgr=ActivityManagerNative.getDefault();
      try {
        mgr.showWaitingForDebugger(mAppThread,true);
      }
 catch (      RemoteException ex) {
      }
      Debug.waitForDebugger();
      try {
        mgr.showWaitingForDebugger(mAppThread,false);
      }
 catch (      RemoteException ex) {
      }
    }
 else {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
    }
  }
  if (data.enableOpenGlTrace) {
    GLUtils.setTracingLevel(1);
  }
  boolean appTracingAllowed=(data.appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
  Trace.setAppTracingAllowed(appTracingAllowed);
  IBinder b=ServiceManager.getService(Context.CONNECTIVITY_SERVICE);
  if (b != null) {
    IConnectivityManager service=IConnectivityManager.Stub.asInterface(b);
    try {
      final ProxyInfo proxyInfo=service.getDefaultProxy();
      Proxy.setHttpProxySystemProperty(proxyInfo);
    }
 catch (    RemoteException e) {
    }
  }
  if (data.instrumentationName != null) {
    InstrumentationInfo ii=null;
    try {
      ii=appContext.getPackageManager().getInstrumentationInfo(data.instrumentationName,0);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName);
    }
    mInstrumentationPackageName=ii.packageName;
    mInstrumentationAppDir=ii.sourceDir;
    mInstrumentationSplitAppDirs=ii.splitSourceDirs;
    mInstrumentationLibDir=ii.nativeLibraryDir;
    mInstrumentedAppDir=data.info.getAppDir();
    mInstrumentedSplitAppDirs=data.info.getSplitAppDirs();
    mInstrumentedLibDir=data.info.getLibDir();
    ApplicationInfo instrApp=new ApplicationInfo();
    instrApp.packageName=ii.packageName;
    instrApp.sourceDir=ii.sourceDir;
    instrApp.publicSourceDir=ii.publicSourceDir;
    instrApp.splitSourceDirs=ii.splitSourceDirs;
    instrApp.splitPublicSourceDirs=ii.splitPublicSourceDirs;
    instrApp.dataDir=ii.dataDir;
    instrApp.nativeLibraryDir=ii.nativeLibraryDir;
    LoadedApk pi=getPackageInfo(instrApp,data.compatInfo,appContext.getClassLoader(),false,true,false);
    ContextImpl instrContext=ContextImpl.createAppContext(this,pi);
    try {
      java.lang.ClassLoader cl=instrContext.getClassLoader();
      mInstrumentation=(Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    mInstrumentation.init(this,instrContext,appContext,new ComponentName(ii.packageName,ii.name),data.instrumentationWatcher,data.instrumentationUiAutomationConnection);
    if (mProfiler.profileFile != null && !ii.handleProfiling && mProfiler.profileFd == null) {
      mProfiler.handlingProfiling=true;
      File file=new File(mProfiler.profileFile);
      file.getParentFile().mkdirs();
      Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);
    }
  }
 else {
    mInstrumentation=new Instrumentation();
  }
  if ((data.appInfo.flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0) {
    dalvik.system.VMRuntime.getRuntime().clearGrowthLimit();
  }
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskWrites();
  try {
    Application app=data.info.makeApplication(data.restrictedBackupMode,null);
    mInitialApplication=app;
    if (!data.restrictedBackupMode) {
      List<ProviderInfo> providers=data.providers;
      if (providers != null) {
        installContentProviders(app,providers);
        mH.sendEmptyMessageDelayed(H.ENABLE_JIT,10 * 1000);
      }
    }
    try {
      mInstrumentation.onCreate(data.instrumentationArgs);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    try {
      mInstrumentation.callApplicationOnCreate(app);
    }
 catch (    Exception e) {
      if (!mInstrumentation.onException(app,e)) {
        throw new RuntimeException(""String_Node_Str"" + app.getClass().getName() + ""String_Node_Str""+ e.toString(),e);
      }
    }
  }
  finally {
    StrictMode.setThreadPolicy(savedPolicy);
  }
}",0.9990529613171124
195783,"public void setHttpProxy(String host,String port,String exclList,Uri pacFileUrl){
  Proxy.setHttpProxySystemProperty(host,port,exclList,pacFileUrl);
}","public void setHttpProxy(String host,String port,String exclList,Uri pacFileUrl){
  final Network network=ConnectivityManager.getProcessDefaultNetwork();
  if (network != null) {
    Proxy.setHttpProxySystemProperty(ConnectivityManager.from(getSystemContext()).getDefaultProxy());
  }
 else {
    Proxy.setHttpProxySystemProperty(host,port,exclList,pacFileUrl);
  }
}",0.5802707930367504
195784,"/** 
 * Binds the current process to   {@code network}.  All Sockets created in the future (and not explicitly bound via a bound SocketFactory from  {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to  {@code network}.  All host name resolutions will be limited to   {@code network} as well.Note that if  {@code network} ever disconnects, all Sockets created in this way will cease towork and all host name resolutions will fail.  This is by design so an application doesn't accidentally use Sockets it thinks are still bound to a particular  {@link Network}. To clear binding pass   {@code null} for {@code network}.  Using individually bound Sockets created by Network.getSocketFactory().createSocket() and performing network-specific host name resolutions via  {@link Network#getAllByName Network.getAllByName} is preferred to calling{@code setProcessDefaultNetwork}.
 * @param network The {@link Network} to bind the current process to, or {@code null} to clearthe current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 */
public static boolean setProcessDefaultNetwork(Network network){
  int netId=(network == null) ? NETID_UNSET : network.netId;
  if (netId == NetworkUtils.getNetworkBoundToProcess()) {
    return true;
  }
  if (NetworkUtils.bindProcessToNetwork(netId)) {
    InetAddress.clearDnsCache();
    NetworkEventDispatcher.getInstance().onNetworkConfigurationChanged();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Binds the current process to   {@code network}.  All Sockets created in the future (and not explicitly bound via a bound SocketFactory from  {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to  {@code network}.  All host name resolutions will be limited to   {@code network} as well.Note that if  {@code network} ever disconnects, all Sockets created in this way will cease towork and all host name resolutions will fail.  This is by design so an application doesn't accidentally use Sockets it thinks are still bound to a particular  {@link Network}. To clear binding pass   {@code null} for {@code network}.  Using individually bound Sockets created by Network.getSocketFactory().createSocket() and performing network-specific host name resolutions via  {@link Network#getAllByName Network.getAllByName} is preferred to calling{@code setProcessDefaultNetwork}.
 * @param network The {@link Network} to bind the current process to, or {@code null} to clearthe current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 */
public static boolean setProcessDefaultNetwork(Network network){
  int netId=(network == null) ? NETID_UNSET : network.netId;
  if (netId == NetworkUtils.getNetworkBoundToProcess()) {
    return true;
  }
  if (NetworkUtils.bindProcessToNetwork(netId)) {
    Proxy.setHttpProxySystemProperty(getInstance().getDefaultProxy());
    InetAddress.clearDnsCache();
    NetworkEventDispatcher.getInstance().onNetworkConfigurationChanged();
    return true;
  }
 else {
    return false;
  }
}",0.9772508811278436
195785,"/** 
 * {@hide}
 */
public ConnectivityManager(IConnectivityManager service){
  mService=checkNotNull(service,""String_Node_Str"");
}","/** 
 * {@hide}
 */
public ConnectivityManager(IConnectivityManager service){
  mService=checkNotNull(service,""String_Node_Str"");
  sInstance=this;
}",0.9357142857142856
195786,"private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 8;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}","private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 4;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}",0.9996155324875048
195787,"private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 8;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}","private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 4;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}",0.9996155324875048
195788,"private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setVisibility(View.GONE);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}","private static final View createScrim(Context context){
  View view=new View(context);
  int flags=WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN| WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
  final int stretch=ViewGroup.LayoutParams.MATCH_PARENT;
  final int type=WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
  WindowManager.LayoutParams lp=new WindowManager.LayoutParams(stretch,stretch,type,flags,PixelFormat.TRANSLUCENT);
  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
  lp.screenOrientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
  lp.privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED;
  lp.setTitle(""String_Node_Str"");
  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  wm.addView(view,lp);
  view.setSystemUiVisibility(View.STATUS_BAR_DISABLE_HOME | View.STATUS_BAR_DISABLE_BACK | View.STATUS_BAR_DISABLE_RECENT| View.STATUS_BAR_DISABLE_EXPAND| View.STATUS_BAR_DISABLE_SEARCH);
  return view;
}",0.9853658536585366
195789,"public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    showListener.onShown(null);
  }
  mKeyguardState.screenIsOn=true;
}","public void onScreenTurnedOn(final ShowListener showListener){
  if (mKeyguardService != null) {
    if (DEBUG)     Log.v(TAG,""String_Node_Str"" + showListener + ""String_Node_Str"");
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(showListener));
  }
 else {
    Slog.w(TAG,""String_Node_Str"");
    mShowListenerWhenConnect=showListener;
    showScrim();
  }
  mKeyguardState.screenIsOn=true;
}",0.9005102040816326
195790,"@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(null));
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mKeyguardService=new KeyguardServiceWrapper(mContext,IKeyguardService.Stub.asInterface(service));
  if (mKeyguardState.systemIsReady) {
    mKeyguardService.onSystemReady();
    mKeyguardService.onScreenTurnedOn(new KeyguardShowDelegate(mShowListenerWhenConnect));
    if (mShowListenerWhenConnect != null) {
      Log.v(TAG,""String_Node_Str"");
      mShowListenerWhenConnect=null;
      hideScrim();
    }
  }
  if (mKeyguardState.bootCompleted) {
    mKeyguardService.onBootCompleted();
  }
}",0.8345724907063197
195791,"/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    activity.mReferrer=intent.mReferrer;
    callActivityOnNewIntent(activity,new Intent(intent));
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}","/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    if (intent != null) {
      activity.mReferrer=intent.mReferrer;
    }
    callActivityOnNewIntent(activity,intent != null ? new Intent(intent) : null);
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}",0.9136904761904762
195792,"/** 
 * Create an intent from a URI.  This URI may encode the action, category, and other intent fields, if it was returned by  {@link #toUri}.  If the Intent was not generate by toUri(), its data will be the entire URI and its action will be ACTION_VIEW. <p>The URI given here must not be relative -- that is, it must include the scheme and full path.
 * @param uri The URI to turn into an Intent.
 * @param flags Additional processing flags.  Either 0,{@link #URI_INTENT_SCHEME}, or   {@link #URI_ANDROID_APP_SCHEME}.
 * @return Intent The newly created Intent object.
 * @throws URISyntaxException Throws URISyntaxError if the basic URI syntaxit bad (as parsed by the Uri class) or the Intent data within the URI is invalid.
 * @see #toUri
 */
public static Intent parseUri(String uri,int flags) throws URISyntaxException {
  int i=0;
  try {
    final boolean androidApp=uri.startsWith(""String_Node_Str"");
    if ((flags & (URI_INTENT_SCHEME | URI_ANDROID_APP_SCHEME)) != 0) {
      if (!uri.startsWith(""String_Node_Str"") && !androidApp) {
        Intent intent=new Intent(ACTION_VIEW);
        try {
          intent.setData(Uri.parse(uri));
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
        return intent;
      }
    }
    i=uri.lastIndexOf(""String_Node_Str"");
    if (i == -1) {
      if (!androidApp) {
        return new Intent(ACTION_VIEW,Uri.parse(uri));
      }
    }
 else     if (!uri.startsWith(""String_Node_Str"",i)) {
      if (!androidApp) {
        return getIntentOld(uri,flags);
      }
 else {
        i=-1;
      }
    }
    Intent intent=new Intent(ACTION_VIEW);
    Intent baseIntent=intent;
    boolean explicitAction=false;
    boolean inSelector=false;
    String scheme=null;
    String data;
    if (i >= 0) {
      data=uri.substring(0,i);
      i+=8;
    }
 else {
      data=uri;
    }
    while (i >= 0 && !uri.startsWith(""String_Node_Str"",i)) {
      int eq=uri.indexOf('=',i);
      if (eq < 0)       eq=i - 1;
      int semi=uri.indexOf(';',i);
      String value=eq < semi ? Uri.decode(uri.substring(eq + 1,semi)) : ""String_Node_Str"";
      if (uri.startsWith(""String_Node_Str"",i)) {
        intent.setAction(value);
        if (!inSelector) {
          explicitAction=true;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.addCategory(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mType=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mFlags=Integer.decode(value).intValue();
        if ((flags & URI_ALLOW_UNSAFE) == 0) {
          intent.mFlags&=~IMMUTABLE_FLAGS;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mPackage=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mComponent=ComponentName.unflattenFromString(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        if (inSelector) {
          intent.mData=Uri.parse(value);
        }
 else {
          scheme=value;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mSourceBounds=Rect.unflattenFromString(value);
      }
 else       if (semi == (i + 3) && uri.startsWith(""String_Node_Str"",i)) {
        intent=new Intent();
        inSelector=true;
      }
 else {
        String key=Uri.decode(uri.substring(i + 2,eq));
        if (intent.mExtras == null)         intent.mExtras=new Bundle();
        Bundle b=intent.mExtras;
        if (uri.startsWith(""String_Node_Str"",i))         b.putString(key,value);
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putBoolean(key,Boolean.parseBoolean(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putByte(key,Byte.parseByte(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putChar(key,value.charAt(0));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putDouble(key,Double.parseDouble(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putFloat(key,Float.parseFloat(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putInt(key,Integer.parseInt(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putLong(key,Long.parseLong(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putShort(key,Short.parseShort(value));
 else         throw new URISyntaxException(uri,""String_Node_Str"",i);
      }
      i=semi + 1;
    }
    if (inSelector) {
      if (baseIntent.mPackage == null) {
        baseIntent.setSelector(intent);
      }
      intent=baseIntent;
    }
    if (data != null) {
      if (data.startsWith(""String_Node_Str"")) {
        data=data.substring(7);
        if (scheme != null) {
          data=scheme + ':' + data;
        }
      }
 else       if (data.startsWith(""String_Node_Str"")) {
        if (data.charAt(12) == '/' && data.charAt(13) == '/') {
          int end=data.indexOf('/',14);
          if (end < 0) {
            intent.mPackage=data.substring(14);
            if (!explicitAction) {
              intent.setAction(ACTION_MAIN);
            }
            data=""String_Node_Str"";
          }
 else {
            String authority=null;
            intent.mPackage=data.substring(14,end);
            int newEnd;
            if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
              scheme=data.substring(end + 1,newEnd);
              end=newEnd;
              if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
                authority=data.substring(end + 1,newEnd);
                end=newEnd;
              }
            }
            if (scheme == null) {
              if (!explicitAction) {
                intent.setAction(ACTION_MAIN);
              }
              data=""String_Node_Str"";
            }
 else             if (authority == null) {
              data=scheme + ""String_Node_Str"";
            }
 else {
              data=scheme + ""String_Node_Str"" + authority+ data.substring(end);
            }
          }
        }
 else {
          data=""String_Node_Str"";
        }
      }
      if (data.length() > 0) {
        try {
          intent.mData=Uri.parse(data);
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
      }
    }
    return intent;
  }
 catch (  IndexOutOfBoundsException e) {
    throw new URISyntaxException(uri,""String_Node_Str"",i);
  }
}","/** 
 * Create an intent from a URI.  This URI may encode the action, category, and other intent fields, if it was returned by  {@link #toUri}.  If the Intent was not generate by toUri(), its data will be the entire URI and its action will be ACTION_VIEW. <p>The URI given here must not be relative -- that is, it must include the scheme and full path.
 * @param uri The URI to turn into an Intent.
 * @param flags Additional processing flags.  Either 0,{@link #URI_INTENT_SCHEME}, or   {@link #URI_ANDROID_APP_SCHEME}.
 * @return Intent The newly created Intent object.
 * @throws URISyntaxException Throws URISyntaxError if the basic URI syntaxit bad (as parsed by the Uri class) or the Intent data within the URI is invalid.
 * @see #toUri
 */
public static Intent parseUri(String uri,int flags) throws URISyntaxException {
  int i=0;
  try {
    final boolean androidApp=uri.startsWith(""String_Node_Str"");
    if ((flags & (URI_INTENT_SCHEME | URI_ANDROID_APP_SCHEME)) != 0) {
      if (!uri.startsWith(""String_Node_Str"") && !androidApp) {
        Intent intent=new Intent(ACTION_VIEW);
        try {
          intent.setData(Uri.parse(uri));
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
        return intent;
      }
    }
    i=uri.lastIndexOf(""String_Node_Str"");
    if (i == -1) {
      if (!androidApp) {
        return new Intent(ACTION_VIEW,Uri.parse(uri));
      }
    }
 else     if (!uri.startsWith(""String_Node_Str"",i)) {
      if (!androidApp) {
        return getIntentOld(uri,flags);
      }
 else {
        i=-1;
      }
    }
    Intent intent=new Intent(ACTION_VIEW);
    Intent baseIntent=intent;
    boolean explicitAction=false;
    boolean inSelector=false;
    String scheme=null;
    String data;
    if (i >= 0) {
      data=uri.substring(0,i);
      i+=8;
    }
 else {
      data=uri;
    }
    while (i >= 0 && !uri.startsWith(""String_Node_Str"",i)) {
      int eq=uri.indexOf('=',i);
      if (eq < 0)       eq=i - 1;
      int semi=uri.indexOf(';',i);
      String value=eq < semi ? Uri.decode(uri.substring(eq + 1,semi)) : ""String_Node_Str"";
      if (uri.startsWith(""String_Node_Str"",i)) {
        intent.setAction(value);
        if (!inSelector) {
          explicitAction=true;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.addCategory(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mType=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mFlags=Integer.decode(value).intValue();
        if ((flags & URI_ALLOW_UNSAFE) == 0) {
          intent.mFlags&=~IMMUTABLE_FLAGS;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mPackage=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mComponent=ComponentName.unflattenFromString(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        if (inSelector) {
          intent.mData=Uri.parse(value + ""String_Node_Str"");
        }
 else {
          scheme=value;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mSourceBounds=Rect.unflattenFromString(value);
      }
 else       if (semi == (i + 3) && uri.startsWith(""String_Node_Str"",i)) {
        intent=new Intent();
        inSelector=true;
      }
 else {
        String key=Uri.decode(uri.substring(i + 2,eq));
        if (intent.mExtras == null)         intent.mExtras=new Bundle();
        Bundle b=intent.mExtras;
        if (uri.startsWith(""String_Node_Str"",i))         b.putString(key,value);
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putBoolean(key,Boolean.parseBoolean(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putByte(key,Byte.parseByte(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putChar(key,value.charAt(0));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putDouble(key,Double.parseDouble(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putFloat(key,Float.parseFloat(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putInt(key,Integer.parseInt(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putLong(key,Long.parseLong(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putShort(key,Short.parseShort(value));
 else         throw new URISyntaxException(uri,""String_Node_Str"",i);
      }
      i=semi + 1;
    }
    if (inSelector) {
      if (baseIntent.mPackage == null) {
        baseIntent.setSelector(intent);
      }
      intent=baseIntent;
    }
    if (data != null) {
      if (data.startsWith(""String_Node_Str"")) {
        data=data.substring(7);
        if (scheme != null) {
          data=scheme + ':' + data;
        }
      }
 else       if (data.startsWith(""String_Node_Str"")) {
        if (data.charAt(12) == '/' && data.charAt(13) == '/') {
          int end=data.indexOf('/',14);
          if (end < 0) {
            intent.mPackage=data.substring(14);
            if (!explicitAction) {
              intent.setAction(ACTION_MAIN);
            }
            data=""String_Node_Str"";
          }
 else {
            String authority=null;
            intent.mPackage=data.substring(14,end);
            int newEnd;
            if ((end + 1) < data.length()) {
              if ((newEnd=data.indexOf('/',end + 1)) >= 0) {
                scheme=data.substring(end + 1,newEnd);
                end=newEnd;
                if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
                  authority=data.substring(end + 1,newEnd);
                  end=newEnd;
                }
              }
 else {
                scheme=data.substring(end + 1);
              }
            }
            if (scheme == null) {
              if (!explicitAction) {
                intent.setAction(ACTION_MAIN);
              }
              data=""String_Node_Str"";
            }
 else             if (authority == null) {
              data=scheme + ""String_Node_Str"";
            }
 else {
              data=scheme + ""String_Node_Str"" + authority+ data.substring(end);
            }
          }
        }
 else {
          data=""String_Node_Str"";
        }
      }
      if (data.length() > 0) {
        try {
          intent.mData=Uri.parse(data);
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
      }
    }
    return intent;
  }
 catch (  IndexOutOfBoundsException e) {
    throw new URISyntaxException(uri,""String_Node_Str"",i);
  }
}",0.988118514062265
195793,"private void toUriFragment(StringBuilder uri,String scheme,String defAction,String defPackage,int flags){
  StringBuilder frag=new StringBuilder(128);
  toUriInner(frag,scheme,defAction,defPackage,flags);
  if (mSelector != null) {
    uri.append(""String_Node_Str"");
    mSelector.toUriInner(frag,mSelector.mData != null ? mSelector.mData.getScheme() : null,null,null,flags);
  }
  if (frag.length() > 0) {
    uri.append(""String_Node_Str"");
    uri.append(frag);
    uri.append(""String_Node_Str"");
  }
}","private void toUriFragment(StringBuilder uri,String scheme,String defAction,String defPackage,int flags){
  StringBuilder frag=new StringBuilder(128);
  toUriInner(frag,scheme,defAction,defPackage,flags);
  if (mSelector != null) {
    frag.append(""String_Node_Str"");
    mSelector.toUriInner(frag,mSelector.mData != null ? mSelector.mData.getScheme() : null,null,null,flags);
  }
  if (frag.length() > 0) {
    uri.append(""String_Node_Str"");
    uri.append(frag);
    uri.append(""String_Node_Str"");
  }
}",0.9930624380574826
195794,"private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 8;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}","private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 4;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}",0.9996155324875048
195795,"private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 8;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}","private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 4;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}",0.9996155324875048
195796,"private void handleBindApplication(AppBindData data){
  mBoundApplication=data;
  mConfiguration=new Configuration(data.config);
  mCompatConfiguration=new Configuration(data.config);
  mProfiler=new Profiler();
  if (data.initProfilerInfo != null) {
    mProfiler.profileFile=data.initProfilerInfo.profileFile;
    mProfiler.profileFd=data.initProfilerInfo.profileFd;
    mProfiler.samplingInterval=data.initProfilerInfo.samplingInterval;
    mProfiler.autoStopProfiler=data.initProfilerInfo.autoStopProfiler;
  }
  Process.setArgV0(data.processName);
  android.ddm.DdmHandleAppName.setAppName(data.processName,UserHandle.myUserId());
  if (data.persistent) {
    if (!ActivityManager.isHighEndGfx()) {
      HardwareRenderer.disable(false);
    }
  }
  if (mProfiler.profileFd != null) {
    mProfiler.startProfiling();
  }
  if (data.appInfo.targetSdkVersion <= android.os.Build.VERSION_CODES.HONEYCOMB_MR1) {
    AsyncTask.setDefaultExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
  Message.updateCheckRecycle(data.appInfo.targetSdkVersion);
  TimeZone.setDefault(null);
  Locale.setDefault(data.config.locale);
  mResourcesManager.applyConfigurationToResourcesLocked(data.config,data.compatInfo);
  mCurDefaultDisplayDpi=data.config.densityDpi;
  applyCompatConfiguration(mCurDefaultDisplayDpi);
  data.info=getPackageInfoNoCheck(data.appInfo,data.compatInfo);
  if ((data.appInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) == 0) {
    mDensityCompatMode=true;
    Bitmap.setDefaultDensity(DisplayMetrics.DENSITY_DEFAULT);
  }
  updateDefaultDensity();
  final ContextImpl appContext=ContextImpl.createAppContext(this,data.info);
  if (!Process.isIsolated()) {
    final File cacheDir=appContext.getCacheDir();
    if (cacheDir != null) {
      System.setProperty(""String_Node_Str"",cacheDir.getAbsolutePath());
      setupGraphicsSupport(data.info,cacheDir);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  final boolean is24Hr=""String_Node_Str"".equals(mCoreSettings.getString(Settings.System.TIME_12_24));
  DateFormat.set24HourTimePref(is24Hr);
  View.mDebugViewAttributes=mCoreSettings.getInt(Settings.Global.DEBUG_VIEW_ATTRIBUTES,0) != 0;
  if ((data.appInfo.flags & (ApplicationInfo.FLAG_SYSTEM | ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0) {
    StrictMode.conditionallyEnableDebugLogging();
  }
  if (data.appInfo.targetSdkVersion > 9) {
    StrictMode.enableDeathOnNetwork();
  }
  if (data.debugMode != IApplicationThread.DEBUG_OFF) {
    Debug.changeDebugPort(8100);
    if (data.debugMode == IApplicationThread.DEBUG_WAIT) {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
      IActivityManager mgr=ActivityManagerNative.getDefault();
      try {
        mgr.showWaitingForDebugger(mAppThread,true);
      }
 catch (      RemoteException ex) {
      }
      Debug.waitForDebugger();
      try {
        mgr.showWaitingForDebugger(mAppThread,false);
      }
 catch (      RemoteException ex) {
      }
    }
 else {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
    }
  }
  if (data.enableOpenGlTrace) {
    GLUtils.setTracingLevel(1);
  }
  boolean appTracingAllowed=(data.appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
  Trace.setAppTracingAllowed(appTracingAllowed);
  IBinder b=ServiceManager.getService(Context.CONNECTIVITY_SERVICE);
  if (b != null) {
    IConnectivityManager service=IConnectivityManager.Stub.asInterface(b);
    try {
      ProxyInfo proxyInfo=service.getProxy();
      Proxy.setHttpProxySystemProperty(proxyInfo);
    }
 catch (    RemoteException e) {
    }
  }
  if (data.instrumentationName != null) {
    InstrumentationInfo ii=null;
    try {
      ii=appContext.getPackageManager().getInstrumentationInfo(data.instrumentationName,0);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName);
    }
    mInstrumentationPackageName=ii.packageName;
    mInstrumentationAppDir=ii.sourceDir;
    mInstrumentationSplitAppDirs=ii.splitSourceDirs;
    mInstrumentationLibDir=ii.nativeLibraryDir;
    mInstrumentedAppDir=data.info.getAppDir();
    mInstrumentedSplitAppDirs=data.info.getSplitAppDirs();
    mInstrumentedLibDir=data.info.getLibDir();
    ApplicationInfo instrApp=new ApplicationInfo();
    instrApp.packageName=ii.packageName;
    instrApp.sourceDir=ii.sourceDir;
    instrApp.publicSourceDir=ii.publicSourceDir;
    instrApp.splitSourceDirs=ii.splitSourceDirs;
    instrApp.splitPublicSourceDirs=ii.splitPublicSourceDirs;
    instrApp.dataDir=ii.dataDir;
    instrApp.nativeLibraryDir=ii.nativeLibraryDir;
    LoadedApk pi=getPackageInfo(instrApp,data.compatInfo,appContext.getClassLoader(),false,true,false);
    ContextImpl instrContext=ContextImpl.createAppContext(this,pi);
    try {
      java.lang.ClassLoader cl=instrContext.getClassLoader();
      mInstrumentation=(Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    mInstrumentation.init(this,instrContext,appContext,new ComponentName(ii.packageName,ii.name),data.instrumentationWatcher,data.instrumentationUiAutomationConnection);
    if (mProfiler.profileFile != null && !ii.handleProfiling && mProfiler.profileFd == null) {
      mProfiler.handlingProfiling=true;
      File file=new File(mProfiler.profileFile);
      file.getParentFile().mkdirs();
      Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);
    }
  }
 else {
    mInstrumentation=new Instrumentation();
  }
  if ((data.appInfo.flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0) {
    dalvik.system.VMRuntime.getRuntime().clearGrowthLimit();
  }
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskWrites();
  try {
    Application app=data.info.makeApplication(data.restrictedBackupMode,null);
    mInitialApplication=app;
    if (!data.restrictedBackupMode) {
      List<ProviderInfo> providers=data.providers;
      if (providers != null) {
        installContentProviders(app,providers);
        mH.sendEmptyMessageDelayed(H.ENABLE_JIT,10 * 1000);
      }
    }
    try {
      mInstrumentation.onCreate(data.instrumentationArgs);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    try {
      mInstrumentation.callApplicationOnCreate(app);
    }
 catch (    Exception e) {
      if (!mInstrumentation.onException(app,e)) {
        throw new RuntimeException(""String_Node_Str"" + app.getClass().getName() + ""String_Node_Str""+ e.toString(),e);
      }
    }
  }
  finally {
    StrictMode.setThreadPolicy(savedPolicy);
  }
}","private void handleBindApplication(AppBindData data){
  mBoundApplication=data;
  mConfiguration=new Configuration(data.config);
  mCompatConfiguration=new Configuration(data.config);
  mProfiler=new Profiler();
  if (data.initProfilerInfo != null) {
    mProfiler.profileFile=data.initProfilerInfo.profileFile;
    mProfiler.profileFd=data.initProfilerInfo.profileFd;
    mProfiler.samplingInterval=data.initProfilerInfo.samplingInterval;
    mProfiler.autoStopProfiler=data.initProfilerInfo.autoStopProfiler;
  }
  Process.setArgV0(data.processName);
  android.ddm.DdmHandleAppName.setAppName(data.processName,UserHandle.myUserId());
  if (data.persistent) {
    if (!ActivityManager.isHighEndGfx()) {
      HardwareRenderer.disable(false);
    }
  }
  if (mProfiler.profileFd != null) {
    mProfiler.startProfiling();
  }
  if (data.appInfo.targetSdkVersion <= android.os.Build.VERSION_CODES.HONEYCOMB_MR1) {
    AsyncTask.setDefaultExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
  Message.updateCheckRecycle(data.appInfo.targetSdkVersion);
  TimeZone.setDefault(null);
  Locale.setDefault(data.config.locale);
  mResourcesManager.applyConfigurationToResourcesLocked(data.config,data.compatInfo);
  mCurDefaultDisplayDpi=data.config.densityDpi;
  applyCompatConfiguration(mCurDefaultDisplayDpi);
  data.info=getPackageInfoNoCheck(data.appInfo,data.compatInfo);
  if ((data.appInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) == 0) {
    mDensityCompatMode=true;
    Bitmap.setDefaultDensity(DisplayMetrics.DENSITY_DEFAULT);
  }
  updateDefaultDensity();
  final ContextImpl appContext=ContextImpl.createAppContext(this,data.info);
  if (!Process.isIsolated()) {
    final File cacheDir=appContext.getCacheDir();
    if (cacheDir != null) {
      System.setProperty(""String_Node_Str"",cacheDir.getAbsolutePath());
      setupGraphicsSupport(data.info,cacheDir);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  final boolean is24Hr=""String_Node_Str"".equals(mCoreSettings.getString(Settings.System.TIME_12_24));
  DateFormat.set24HourTimePref(is24Hr);
  View.mDebugViewAttributes=mCoreSettings.getInt(Settings.Global.DEBUG_VIEW_ATTRIBUTES,0) != 0;
  if ((data.appInfo.flags & (ApplicationInfo.FLAG_SYSTEM | ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0) {
    StrictMode.conditionallyEnableDebugLogging();
  }
  if (data.appInfo.targetSdkVersion > 9) {
    StrictMode.enableDeathOnNetwork();
  }
  if (data.debugMode != IApplicationThread.DEBUG_OFF) {
    Debug.changeDebugPort(8100);
    if (data.debugMode == IApplicationThread.DEBUG_WAIT) {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
      IActivityManager mgr=ActivityManagerNative.getDefault();
      try {
        mgr.showWaitingForDebugger(mAppThread,true);
      }
 catch (      RemoteException ex) {
      }
      Debug.waitForDebugger();
      try {
        mgr.showWaitingForDebugger(mAppThread,false);
      }
 catch (      RemoteException ex) {
      }
    }
 else {
      Slog.w(TAG,""String_Node_Str"" + data.info.getPackageName() + ""String_Node_Str"");
    }
  }
  if (data.enableOpenGlTrace) {
    GLUtils.setTracingLevel(1);
  }
  boolean appTracingAllowed=(data.appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
  Trace.setAppTracingAllowed(appTracingAllowed);
  IBinder b=ServiceManager.getService(Context.CONNECTIVITY_SERVICE);
  if (b != null) {
    IConnectivityManager service=IConnectivityManager.Stub.asInterface(b);
    try {
      final ProxyInfo proxyInfo=service.getDefaultProxy();
      Proxy.setHttpProxySystemProperty(proxyInfo);
    }
 catch (    RemoteException e) {
    }
  }
  if (data.instrumentationName != null) {
    InstrumentationInfo ii=null;
    try {
      ii=appContext.getPackageManager().getInstrumentationInfo(data.instrumentationName,0);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName);
    }
    mInstrumentationPackageName=ii.packageName;
    mInstrumentationAppDir=ii.sourceDir;
    mInstrumentationSplitAppDirs=ii.splitSourceDirs;
    mInstrumentationLibDir=ii.nativeLibraryDir;
    mInstrumentedAppDir=data.info.getAppDir();
    mInstrumentedSplitAppDirs=data.info.getSplitAppDirs();
    mInstrumentedLibDir=data.info.getLibDir();
    ApplicationInfo instrApp=new ApplicationInfo();
    instrApp.packageName=ii.packageName;
    instrApp.sourceDir=ii.sourceDir;
    instrApp.publicSourceDir=ii.publicSourceDir;
    instrApp.splitSourceDirs=ii.splitSourceDirs;
    instrApp.splitPublicSourceDirs=ii.splitPublicSourceDirs;
    instrApp.dataDir=ii.dataDir;
    instrApp.nativeLibraryDir=ii.nativeLibraryDir;
    LoadedApk pi=getPackageInfo(instrApp,data.compatInfo,appContext.getClassLoader(),false,true,false);
    ContextImpl instrContext=ContextImpl.createAppContext(this,pi);
    try {
      java.lang.ClassLoader cl=instrContext.getClassLoader();
      mInstrumentation=(Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    mInstrumentation.init(this,instrContext,appContext,new ComponentName(ii.packageName,ii.name),data.instrumentationWatcher,data.instrumentationUiAutomationConnection);
    if (mProfiler.profileFile != null && !ii.handleProfiling && mProfiler.profileFd == null) {
      mProfiler.handlingProfiling=true;
      File file=new File(mProfiler.profileFile);
      file.getParentFile().mkdirs();
      Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);
    }
  }
 else {
    mInstrumentation=new Instrumentation();
  }
  if ((data.appInfo.flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0) {
    dalvik.system.VMRuntime.getRuntime().clearGrowthLimit();
  }
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskWrites();
  try {
    Application app=data.info.makeApplication(data.restrictedBackupMode,null);
    mInitialApplication=app;
    if (!data.restrictedBackupMode) {
      List<ProviderInfo> providers=data.providers;
      if (providers != null) {
        installContentProviders(app,providers);
        mH.sendEmptyMessageDelayed(H.ENABLE_JIT,10 * 1000);
      }
    }
    try {
      mInstrumentation.onCreate(data.instrumentationArgs);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + data.instrumentationName + ""String_Node_Str""+ e.toString(),e);
    }
    try {
      mInstrumentation.callApplicationOnCreate(app);
    }
 catch (    Exception e) {
      if (!mInstrumentation.onException(app,e)) {
        throw new RuntimeException(""String_Node_Str"" + app.getClass().getName() + ""String_Node_Str""+ e.toString(),e);
      }
    }
  }
  finally {
    StrictMode.setThreadPolicy(savedPolicy);
  }
}",0.9990529613171124
195797,"public void setHttpProxy(String host,String port,String exclList,Uri pacFileUrl){
  Proxy.setHttpProxySystemProperty(host,port,exclList,pacFileUrl);
}","public void setHttpProxy(String host,String port,String exclList,Uri pacFileUrl){
  final Network network=ConnectivityManager.getProcessDefaultNetwork();
  if (network != null) {
    Proxy.setHttpProxySystemProperty(ConnectivityManager.from(getSystemContext()).getDefaultProxy());
  }
 else {
    Proxy.setHttpProxySystemProperty(host,port,exclList,pacFileUrl);
  }
}",0.5802707930367504
195798,"/** 
 * Binds the current process to   {@code network}.  All Sockets created in the future (and not explicitly bound via a bound SocketFactory from  {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to  {@code network}.  All host name resolutions will be limited to   {@code network} as well.Note that if  {@code network} ever disconnects, all Sockets created in this way will cease towork and all host name resolutions will fail.  This is by design so an application doesn't accidentally use Sockets it thinks are still bound to a particular  {@link Network}. To clear binding pass   {@code null} for {@code network}.  Using individually bound Sockets created by Network.getSocketFactory().createSocket() and performing network-specific host name resolutions via  {@link Network#getAllByName Network.getAllByName} is preferred to calling{@code setProcessDefaultNetwork}.
 * @param network The {@link Network} to bind the current process to, or {@code null} to clearthe current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 */
public static boolean setProcessDefaultNetwork(Network network){
  int netId=(network == null) ? NETID_UNSET : network.netId;
  if (netId == NetworkUtils.getNetworkBoundToProcess()) {
    return true;
  }
  if (NetworkUtils.bindProcessToNetwork(netId)) {
    InetAddress.clearDnsCache();
    NetworkEventDispatcher.getInstance().onNetworkConfigurationChanged();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Binds the current process to   {@code network}.  All Sockets created in the future (and not explicitly bound via a bound SocketFactory from  {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to  {@code network}.  All host name resolutions will be limited to   {@code network} as well.Note that if  {@code network} ever disconnects, all Sockets created in this way will cease towork and all host name resolutions will fail.  This is by design so an application doesn't accidentally use Sockets it thinks are still bound to a particular  {@link Network}. To clear binding pass   {@code null} for {@code network}.  Using individually bound Sockets created by Network.getSocketFactory().createSocket() and performing network-specific host name resolutions via  {@link Network#getAllByName Network.getAllByName} is preferred to calling{@code setProcessDefaultNetwork}.
 * @param network The {@link Network} to bind the current process to, or {@code null} to clearthe current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 */
public static boolean setProcessDefaultNetwork(Network network){
  int netId=(network == null) ? NETID_UNSET : network.netId;
  if (netId == NetworkUtils.getNetworkBoundToProcess()) {
    return true;
  }
  if (NetworkUtils.bindProcessToNetwork(netId)) {
    Proxy.setHttpProxySystemProperty(getInstance().getDefaultProxy());
    InetAddress.clearDnsCache();
    NetworkEventDispatcher.getInstance().onNetworkConfigurationChanged();
    return true;
  }
 else {
    return false;
  }
}",0.9772508811278436
195799,"/** 
 * {@hide}
 */
public ConnectivityManager(IConnectivityManager service){
  mService=checkNotNull(service,""String_Node_Str"");
}","/** 
 * {@hide}
 */
public ConnectivityManager(IConnectivityManager service){
  mService=checkNotNull(service,""String_Node_Str"");
  sInstance=this;
}",0.9357142857142856
195800,"/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    activity.mReferrer=intent.mReferrer;
    callActivityOnNewIntent(activity,new Intent(intent));
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}","/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    if (intent != null) {
      activity.mReferrer=intent.mReferrer;
    }
    callActivityOnNewIntent(activity,intent != null ? new Intent(intent) : null);
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}",0.9136904761904762
195801,"/** 
 * Create an intent from a URI.  This URI may encode the action, category, and other intent fields, if it was returned by  {@link #toUri}.  If the Intent was not generate by toUri(), its data will be the entire URI and its action will be ACTION_VIEW. <p>The URI given here must not be relative -- that is, it must include the scheme and full path.
 * @param uri The URI to turn into an Intent.
 * @param flags Additional processing flags.  Either 0,{@link #URI_INTENT_SCHEME}, or   {@link #URI_ANDROID_APP_SCHEME}.
 * @return Intent The newly created Intent object.
 * @throws URISyntaxException Throws URISyntaxError if the basic URI syntaxit bad (as parsed by the Uri class) or the Intent data within the URI is invalid.
 * @see #toUri
 */
public static Intent parseUri(String uri,int flags) throws URISyntaxException {
  int i=0;
  try {
    final boolean androidApp=uri.startsWith(""String_Node_Str"");
    if ((flags & (URI_INTENT_SCHEME | URI_ANDROID_APP_SCHEME)) != 0) {
      if (!uri.startsWith(""String_Node_Str"") && !androidApp) {
        Intent intent=new Intent(ACTION_VIEW);
        try {
          intent.setData(Uri.parse(uri));
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
        return intent;
      }
    }
    i=uri.lastIndexOf(""String_Node_Str"");
    if (i == -1) {
      if (!androidApp) {
        return new Intent(ACTION_VIEW,Uri.parse(uri));
      }
    }
 else     if (!uri.startsWith(""String_Node_Str"",i)) {
      if (!androidApp) {
        return getIntentOld(uri,flags);
      }
 else {
        i=-1;
      }
    }
    Intent intent=new Intent(ACTION_VIEW);
    Intent baseIntent=intent;
    boolean explicitAction=false;
    boolean inSelector=false;
    String scheme=null;
    String data;
    if (i >= 0) {
      data=uri.substring(0,i);
      i+=8;
    }
 else {
      data=uri;
    }
    while (i >= 0 && !uri.startsWith(""String_Node_Str"",i)) {
      int eq=uri.indexOf('=',i);
      if (eq < 0)       eq=i - 1;
      int semi=uri.indexOf(';',i);
      String value=eq < semi ? Uri.decode(uri.substring(eq + 1,semi)) : ""String_Node_Str"";
      if (uri.startsWith(""String_Node_Str"",i)) {
        intent.setAction(value);
        if (!inSelector) {
          explicitAction=true;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.addCategory(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mType=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mFlags=Integer.decode(value).intValue();
        if ((flags & URI_ALLOW_UNSAFE) == 0) {
          intent.mFlags&=~IMMUTABLE_FLAGS;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mPackage=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mComponent=ComponentName.unflattenFromString(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        if (inSelector) {
          intent.mData=Uri.parse(value);
        }
 else {
          scheme=value;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mSourceBounds=Rect.unflattenFromString(value);
      }
 else       if (semi == (i + 3) && uri.startsWith(""String_Node_Str"",i)) {
        intent=new Intent();
        inSelector=true;
      }
 else {
        String key=Uri.decode(uri.substring(i + 2,eq));
        if (intent.mExtras == null)         intent.mExtras=new Bundle();
        Bundle b=intent.mExtras;
        if (uri.startsWith(""String_Node_Str"",i))         b.putString(key,value);
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putBoolean(key,Boolean.parseBoolean(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putByte(key,Byte.parseByte(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putChar(key,value.charAt(0));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putDouble(key,Double.parseDouble(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putFloat(key,Float.parseFloat(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putInt(key,Integer.parseInt(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putLong(key,Long.parseLong(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putShort(key,Short.parseShort(value));
 else         throw new URISyntaxException(uri,""String_Node_Str"",i);
      }
      i=semi + 1;
    }
    if (inSelector) {
      if (baseIntent.mPackage == null) {
        baseIntent.setSelector(intent);
      }
      intent=baseIntent;
    }
    if (data != null) {
      if (data.startsWith(""String_Node_Str"")) {
        data=data.substring(7);
        if (scheme != null) {
          data=scheme + ':' + data;
        }
      }
 else       if (data.startsWith(""String_Node_Str"")) {
        if (data.charAt(12) == '/' && data.charAt(13) == '/') {
          int end=data.indexOf('/',14);
          if (end < 0) {
            intent.mPackage=data.substring(14);
            if (!explicitAction) {
              intent.setAction(ACTION_MAIN);
            }
            data=""String_Node_Str"";
          }
 else {
            String authority=null;
            intent.mPackage=data.substring(14,end);
            int newEnd;
            if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
              scheme=data.substring(end + 1,newEnd);
              end=newEnd;
              if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
                authority=data.substring(end + 1,newEnd);
                end=newEnd;
              }
            }
            if (scheme == null) {
              if (!explicitAction) {
                intent.setAction(ACTION_MAIN);
              }
              data=""String_Node_Str"";
            }
 else             if (authority == null) {
              data=scheme + ""String_Node_Str"";
            }
 else {
              data=scheme + ""String_Node_Str"" + authority+ data.substring(end);
            }
          }
        }
 else {
          data=""String_Node_Str"";
        }
      }
      if (data.length() > 0) {
        try {
          intent.mData=Uri.parse(data);
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
      }
    }
    return intent;
  }
 catch (  IndexOutOfBoundsException e) {
    throw new URISyntaxException(uri,""String_Node_Str"",i);
  }
}","/** 
 * Create an intent from a URI.  This URI may encode the action, category, and other intent fields, if it was returned by  {@link #toUri}.  If the Intent was not generate by toUri(), its data will be the entire URI and its action will be ACTION_VIEW. <p>The URI given here must not be relative -- that is, it must include the scheme and full path.
 * @param uri The URI to turn into an Intent.
 * @param flags Additional processing flags.  Either 0,{@link #URI_INTENT_SCHEME}, or   {@link #URI_ANDROID_APP_SCHEME}.
 * @return Intent The newly created Intent object.
 * @throws URISyntaxException Throws URISyntaxError if the basic URI syntaxit bad (as parsed by the Uri class) or the Intent data within the URI is invalid.
 * @see #toUri
 */
public static Intent parseUri(String uri,int flags) throws URISyntaxException {
  int i=0;
  try {
    final boolean androidApp=uri.startsWith(""String_Node_Str"");
    if ((flags & (URI_INTENT_SCHEME | URI_ANDROID_APP_SCHEME)) != 0) {
      if (!uri.startsWith(""String_Node_Str"") && !androidApp) {
        Intent intent=new Intent(ACTION_VIEW);
        try {
          intent.setData(Uri.parse(uri));
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
        return intent;
      }
    }
    i=uri.lastIndexOf(""String_Node_Str"");
    if (i == -1) {
      if (!androidApp) {
        return new Intent(ACTION_VIEW,Uri.parse(uri));
      }
    }
 else     if (!uri.startsWith(""String_Node_Str"",i)) {
      if (!androidApp) {
        return getIntentOld(uri,flags);
      }
 else {
        i=-1;
      }
    }
    Intent intent=new Intent(ACTION_VIEW);
    Intent baseIntent=intent;
    boolean explicitAction=false;
    boolean inSelector=false;
    String scheme=null;
    String data;
    if (i >= 0) {
      data=uri.substring(0,i);
      i+=8;
    }
 else {
      data=uri;
    }
    while (i >= 0 && !uri.startsWith(""String_Node_Str"",i)) {
      int eq=uri.indexOf('=',i);
      if (eq < 0)       eq=i - 1;
      int semi=uri.indexOf(';',i);
      String value=eq < semi ? Uri.decode(uri.substring(eq + 1,semi)) : ""String_Node_Str"";
      if (uri.startsWith(""String_Node_Str"",i)) {
        intent.setAction(value);
        if (!inSelector) {
          explicitAction=true;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.addCategory(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mType=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mFlags=Integer.decode(value).intValue();
        if ((flags & URI_ALLOW_UNSAFE) == 0) {
          intent.mFlags&=~IMMUTABLE_FLAGS;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mPackage=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mComponent=ComponentName.unflattenFromString(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        if (inSelector) {
          intent.mData=Uri.parse(value + ""String_Node_Str"");
        }
 else {
          scheme=value;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mSourceBounds=Rect.unflattenFromString(value);
      }
 else       if (semi == (i + 3) && uri.startsWith(""String_Node_Str"",i)) {
        intent=new Intent();
        inSelector=true;
      }
 else {
        String key=Uri.decode(uri.substring(i + 2,eq));
        if (intent.mExtras == null)         intent.mExtras=new Bundle();
        Bundle b=intent.mExtras;
        if (uri.startsWith(""String_Node_Str"",i))         b.putString(key,value);
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putBoolean(key,Boolean.parseBoolean(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putByte(key,Byte.parseByte(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putChar(key,value.charAt(0));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putDouble(key,Double.parseDouble(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putFloat(key,Float.parseFloat(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putInt(key,Integer.parseInt(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putLong(key,Long.parseLong(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putShort(key,Short.parseShort(value));
 else         throw new URISyntaxException(uri,""String_Node_Str"",i);
      }
      i=semi + 1;
    }
    if (inSelector) {
      if (baseIntent.mPackage == null) {
        baseIntent.setSelector(intent);
      }
      intent=baseIntent;
    }
    if (data != null) {
      if (data.startsWith(""String_Node_Str"")) {
        data=data.substring(7);
        if (scheme != null) {
          data=scheme + ':' + data;
        }
      }
 else       if (data.startsWith(""String_Node_Str"")) {
        if (data.charAt(12) == '/' && data.charAt(13) == '/') {
          int end=data.indexOf('/',14);
          if (end < 0) {
            intent.mPackage=data.substring(14);
            if (!explicitAction) {
              intent.setAction(ACTION_MAIN);
            }
            data=""String_Node_Str"";
          }
 else {
            String authority=null;
            intent.mPackage=data.substring(14,end);
            int newEnd;
            if ((end + 1) < data.length()) {
              if ((newEnd=data.indexOf('/',end + 1)) >= 0) {
                scheme=data.substring(end + 1,newEnd);
                end=newEnd;
                if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
                  authority=data.substring(end + 1,newEnd);
                  end=newEnd;
                }
              }
 else {
                scheme=data.substring(end + 1);
              }
            }
            if (scheme == null) {
              if (!explicitAction) {
                intent.setAction(ACTION_MAIN);
              }
              data=""String_Node_Str"";
            }
 else             if (authority == null) {
              data=scheme + ""String_Node_Str"";
            }
 else {
              data=scheme + ""String_Node_Str"" + authority+ data.substring(end);
            }
          }
        }
 else {
          data=""String_Node_Str"";
        }
      }
      if (data.length() > 0) {
        try {
          intent.mData=Uri.parse(data);
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
      }
    }
    return intent;
  }
 catch (  IndexOutOfBoundsException e) {
    throw new URISyntaxException(uri,""String_Node_Str"",i);
  }
}",0.988118514062265
195802,"private void toUriFragment(StringBuilder uri,String scheme,String defAction,String defPackage,int flags){
  StringBuilder frag=new StringBuilder(128);
  toUriInner(frag,scheme,defAction,defPackage,flags);
  if (mSelector != null) {
    uri.append(""String_Node_Str"");
    mSelector.toUriInner(frag,mSelector.mData != null ? mSelector.mData.getScheme() : null,null,null,flags);
  }
  if (frag.length() > 0) {
    uri.append(""String_Node_Str"");
    uri.append(frag);
    uri.append(""String_Node_Str"");
  }
}","private void toUriFragment(StringBuilder uri,String scheme,String defAction,String defPackage,int flags){
  StringBuilder frag=new StringBuilder(128);
  toUriInner(frag,scheme,defAction,defPackage,flags);
  if (mSelector != null) {
    frag.append(""String_Node_Str"");
    mSelector.toUriInner(frag,mSelector.mData != null ? mSelector.mData.getScheme() : null,null,null,flags);
  }
  if (frag.length() > 0) {
    uri.append(""String_Node_Str"");
    uri.append(frag);
    uri.append(""String_Node_Str"");
  }
}",0.9930624380574826
195803,"private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 8;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}","private void updateOomLevels(int displayWidth,int displayHeight,boolean write){
  float scaleMem=((float)(mTotalMemMb - 350)) / (700 - 350);
  int minSize=480 * 800;
  int maxSize=1280 * 800;
  float scaleDisp=((float)(displayWidth * displayHeight) - minSize) / (maxSize - minSize);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleMem);
    Slog.i(""String_Node_Str"",""String_Node_Str"" + scaleDisp + ""String_Node_Str""+ displayWidth+ ""String_Node_Str""+ displayHeight);
  }
  float scale=scaleMem > scaleDisp ? scaleMem : scaleDisp;
  if (scale < 0)   scale=0;
 else   if (scale > 1)   scale=1;
  int minfree_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAdjust);
  int minfree_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_lowMemoryKillerMinFreeKbytesAbsolute);
  if (false) {
    Slog.i(""String_Node_Str"",""String_Node_Str"" + minfree_adj + ""String_Node_Str""+ minfree_abs);
  }
  if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
    mOomMinFreeHigh[4]=(mOomMinFreeHigh[4] * 3) / 2;
    mOomMinFreeHigh[5]=(mOomMinFreeHigh[5] * 7) / 4;
  }
  for (int i=0; i < mOomAdj.length; i++) {
    int low=mOomMinFreeLow[i];
    int high=mOomMinFreeHigh[i];
    mOomMinFree[i]=(int)(low + ((high - low) * scale));
  }
  if (minfree_abs >= 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]=(int)((float)minfree_abs * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
    }
  }
  if (minfree_adj != 0) {
    for (int i=0; i < mOomAdj.length; i++) {
      mOomMinFree[i]+=(int)((float)minfree_adj * mOomMinFree[i] / mOomMinFree[mOomAdj.length - 1]);
      if (mOomMinFree[i] < 0) {
        mOomMinFree[i]=0;
      }
    }
  }
  mCachedRestoreLevel=(getMemLevel(ProcessList.CACHED_APP_MAX_ADJ) / 1024) / 3;
  int reserve=displayWidth * displayHeight * 4* 3 / 1024;
  int reserve_adj=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAdjust);
  int reserve_abs=Resources.getSystem().getInteger(com.android.internal.R.integer.config_extraFreeKbytesAbsolute);
  if (reserve_abs >= 0) {
    reserve=reserve_abs;
  }
  if (reserve_adj != 0) {
    reserve+=reserve_adj;
    if (reserve < 0) {
      reserve=0;
    }
  }
  if (write) {
    ByteBuffer buf=ByteBuffer.allocate(4 * (2 * mOomAdj.length + 1));
    buf.putInt(LMK_TARGET);
    for (int i=0; i < mOomAdj.length; i++) {
      buf.putInt((mOomMinFree[i] * 1024) / PAGE_SIZE);
      buf.putInt(mOomAdj[i]);
    }
    writeLmkd(buf);
    SystemProperties.set(""String_Node_Str"",Integer.toString(reserve));
  }
}",0.9996155324875048
195804,"/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    activity.mReferrer=intent.mReferrer;
    callActivityOnNewIntent(activity,new Intent(intent));
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}","/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    if (intent != null) {
      activity.mReferrer=intent.mReferrer;
    }
    callActivityOnNewIntent(activity,intent != null ? new Intent(intent) : null);
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}",0.9136904761904762
195805,"/** 
 * Create an intent from a URI.  This URI may encode the action, category, and other intent fields, if it was returned by  {@link #toUri}.  If the Intent was not generate by toUri(), its data will be the entire URI and its action will be ACTION_VIEW. <p>The URI given here must not be relative -- that is, it must include the scheme and full path.
 * @param uri The URI to turn into an Intent.
 * @param flags Additional processing flags.  Either 0,{@link #URI_INTENT_SCHEME}, or   {@link #URI_ANDROID_APP_SCHEME}.
 * @return Intent The newly created Intent object.
 * @throws URISyntaxException Throws URISyntaxError if the basic URI syntaxit bad (as parsed by the Uri class) or the Intent data within the URI is invalid.
 * @see #toUri
 */
public static Intent parseUri(String uri,int flags) throws URISyntaxException {
  int i=0;
  try {
    final boolean androidApp=uri.startsWith(""String_Node_Str"");
    if ((flags & (URI_INTENT_SCHEME | URI_ANDROID_APP_SCHEME)) != 0) {
      if (!uri.startsWith(""String_Node_Str"") && !androidApp) {
        Intent intent=new Intent(ACTION_VIEW);
        try {
          intent.setData(Uri.parse(uri));
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
        return intent;
      }
    }
    i=uri.lastIndexOf(""String_Node_Str"");
    if (i == -1) {
      if (!androidApp) {
        return new Intent(ACTION_VIEW,Uri.parse(uri));
      }
    }
 else     if (!uri.startsWith(""String_Node_Str"",i)) {
      if (!androidApp) {
        return getIntentOld(uri,flags);
      }
 else {
        i=-1;
      }
    }
    Intent intent=new Intent(ACTION_VIEW);
    Intent baseIntent=intent;
    boolean explicitAction=false;
    boolean inSelector=false;
    String scheme=null;
    String data;
    if (i >= 0) {
      data=uri.substring(0,i);
      i+=8;
    }
 else {
      data=uri;
    }
    while (i >= 0 && !uri.startsWith(""String_Node_Str"",i)) {
      int eq=uri.indexOf('=',i);
      if (eq < 0)       eq=i - 1;
      int semi=uri.indexOf(';',i);
      String value=eq < semi ? Uri.decode(uri.substring(eq + 1,semi)) : ""String_Node_Str"";
      if (uri.startsWith(""String_Node_Str"",i)) {
        intent.setAction(value);
        if (!inSelector) {
          explicitAction=true;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.addCategory(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mType=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mFlags=Integer.decode(value).intValue();
        if ((flags & URI_ALLOW_UNSAFE) == 0) {
          intent.mFlags&=~IMMUTABLE_FLAGS;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mPackage=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mComponent=ComponentName.unflattenFromString(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        if (inSelector) {
          intent.mData=Uri.parse(value);
        }
 else {
          scheme=value;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mSourceBounds=Rect.unflattenFromString(value);
      }
 else       if (semi == (i + 3) && uri.startsWith(""String_Node_Str"",i)) {
        intent=new Intent();
        inSelector=true;
      }
 else {
        String key=Uri.decode(uri.substring(i + 2,eq));
        if (intent.mExtras == null)         intent.mExtras=new Bundle();
        Bundle b=intent.mExtras;
        if (uri.startsWith(""String_Node_Str"",i))         b.putString(key,value);
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putBoolean(key,Boolean.parseBoolean(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putByte(key,Byte.parseByte(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putChar(key,value.charAt(0));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putDouble(key,Double.parseDouble(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putFloat(key,Float.parseFloat(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putInt(key,Integer.parseInt(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putLong(key,Long.parseLong(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putShort(key,Short.parseShort(value));
 else         throw new URISyntaxException(uri,""String_Node_Str"",i);
      }
      i=semi + 1;
    }
    if (inSelector) {
      if (baseIntent.mPackage == null) {
        baseIntent.setSelector(intent);
      }
      intent=baseIntent;
    }
    if (data != null) {
      if (data.startsWith(""String_Node_Str"")) {
        data=data.substring(7);
        if (scheme != null) {
          data=scheme + ':' + data;
        }
      }
 else       if (data.startsWith(""String_Node_Str"")) {
        if (data.charAt(12) == '/' && data.charAt(13) == '/') {
          int end=data.indexOf('/',14);
          if (end < 0) {
            intent.mPackage=data.substring(14);
            if (!explicitAction) {
              intent.setAction(ACTION_MAIN);
            }
            data=""String_Node_Str"";
          }
 else {
            String authority=null;
            intent.mPackage=data.substring(14,end);
            int newEnd;
            if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
              scheme=data.substring(end + 1,newEnd);
              end=newEnd;
              if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
                authority=data.substring(end + 1,newEnd);
                end=newEnd;
              }
            }
            if (scheme == null) {
              if (!explicitAction) {
                intent.setAction(ACTION_MAIN);
              }
              data=""String_Node_Str"";
            }
 else             if (authority == null) {
              data=scheme + ""String_Node_Str"";
            }
 else {
              data=scheme + ""String_Node_Str"" + authority+ data.substring(end);
            }
          }
        }
 else {
          data=""String_Node_Str"";
        }
      }
      if (data.length() > 0) {
        try {
          intent.mData=Uri.parse(data);
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
      }
    }
    return intent;
  }
 catch (  IndexOutOfBoundsException e) {
    throw new URISyntaxException(uri,""String_Node_Str"",i);
  }
}","/** 
 * Create an intent from a URI.  This URI may encode the action, category, and other intent fields, if it was returned by  {@link #toUri}.  If the Intent was not generate by toUri(), its data will be the entire URI and its action will be ACTION_VIEW. <p>The URI given here must not be relative -- that is, it must include the scheme and full path.
 * @param uri The URI to turn into an Intent.
 * @param flags Additional processing flags.  Either 0,{@link #URI_INTENT_SCHEME}, or   {@link #URI_ANDROID_APP_SCHEME}.
 * @return Intent The newly created Intent object.
 * @throws URISyntaxException Throws URISyntaxError if the basic URI syntaxit bad (as parsed by the Uri class) or the Intent data within the URI is invalid.
 * @see #toUri
 */
public static Intent parseUri(String uri,int flags) throws URISyntaxException {
  int i=0;
  try {
    final boolean androidApp=uri.startsWith(""String_Node_Str"");
    if ((flags & (URI_INTENT_SCHEME | URI_ANDROID_APP_SCHEME)) != 0) {
      if (!uri.startsWith(""String_Node_Str"") && !androidApp) {
        Intent intent=new Intent(ACTION_VIEW);
        try {
          intent.setData(Uri.parse(uri));
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
        return intent;
      }
    }
    i=uri.lastIndexOf(""String_Node_Str"");
    if (i == -1) {
      if (!androidApp) {
        return new Intent(ACTION_VIEW,Uri.parse(uri));
      }
    }
 else     if (!uri.startsWith(""String_Node_Str"",i)) {
      if (!androidApp) {
        return getIntentOld(uri,flags);
      }
 else {
        i=-1;
      }
    }
    Intent intent=new Intent(ACTION_VIEW);
    Intent baseIntent=intent;
    boolean explicitAction=false;
    boolean inSelector=false;
    String scheme=null;
    String data;
    if (i >= 0) {
      data=uri.substring(0,i);
      i+=8;
    }
 else {
      data=uri;
    }
    while (i >= 0 && !uri.startsWith(""String_Node_Str"",i)) {
      int eq=uri.indexOf('=',i);
      if (eq < 0)       eq=i - 1;
      int semi=uri.indexOf(';',i);
      String value=eq < semi ? Uri.decode(uri.substring(eq + 1,semi)) : ""String_Node_Str"";
      if (uri.startsWith(""String_Node_Str"",i)) {
        intent.setAction(value);
        if (!inSelector) {
          explicitAction=true;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.addCategory(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mType=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mFlags=Integer.decode(value).intValue();
        if ((flags & URI_ALLOW_UNSAFE) == 0) {
          intent.mFlags&=~IMMUTABLE_FLAGS;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mPackage=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mComponent=ComponentName.unflattenFromString(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        if (inSelector) {
          intent.mData=Uri.parse(value + ""String_Node_Str"");
        }
 else {
          scheme=value;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mSourceBounds=Rect.unflattenFromString(value);
      }
 else       if (semi == (i + 3) && uri.startsWith(""String_Node_Str"",i)) {
        intent=new Intent();
        inSelector=true;
      }
 else {
        String key=Uri.decode(uri.substring(i + 2,eq));
        if (intent.mExtras == null)         intent.mExtras=new Bundle();
        Bundle b=intent.mExtras;
        if (uri.startsWith(""String_Node_Str"",i))         b.putString(key,value);
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putBoolean(key,Boolean.parseBoolean(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putByte(key,Byte.parseByte(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putChar(key,value.charAt(0));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putDouble(key,Double.parseDouble(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putFloat(key,Float.parseFloat(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putInt(key,Integer.parseInt(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putLong(key,Long.parseLong(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putShort(key,Short.parseShort(value));
 else         throw new URISyntaxException(uri,""String_Node_Str"",i);
      }
      i=semi + 1;
    }
    if (inSelector) {
      if (baseIntent.mPackage == null) {
        baseIntent.setSelector(intent);
      }
      intent=baseIntent;
    }
    if (data != null) {
      if (data.startsWith(""String_Node_Str"")) {
        data=data.substring(7);
        if (scheme != null) {
          data=scheme + ':' + data;
        }
      }
 else       if (data.startsWith(""String_Node_Str"")) {
        if (data.charAt(12) == '/' && data.charAt(13) == '/') {
          int end=data.indexOf('/',14);
          if (end < 0) {
            intent.mPackage=data.substring(14);
            if (!explicitAction) {
              intent.setAction(ACTION_MAIN);
            }
            data=""String_Node_Str"";
          }
 else {
            String authority=null;
            intent.mPackage=data.substring(14,end);
            int newEnd;
            if ((end + 1) < data.length()) {
              if ((newEnd=data.indexOf('/',end + 1)) >= 0) {
                scheme=data.substring(end + 1,newEnd);
                end=newEnd;
                if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
                  authority=data.substring(end + 1,newEnd);
                  end=newEnd;
                }
              }
 else {
                scheme=data.substring(end + 1);
              }
            }
            if (scheme == null) {
              if (!explicitAction) {
                intent.setAction(ACTION_MAIN);
              }
              data=""String_Node_Str"";
            }
 else             if (authority == null) {
              data=scheme + ""String_Node_Str"";
            }
 else {
              data=scheme + ""String_Node_Str"" + authority+ data.substring(end);
            }
          }
        }
 else {
          data=""String_Node_Str"";
        }
      }
      if (data.length() > 0) {
        try {
          intent.mData=Uri.parse(data);
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
      }
    }
    return intent;
  }
 catch (  IndexOutOfBoundsException e) {
    throw new URISyntaxException(uri,""String_Node_Str"",i);
  }
}",0.988118514062265
195806,"private void toUriFragment(StringBuilder uri,String scheme,String defAction,String defPackage,int flags){
  StringBuilder frag=new StringBuilder(128);
  toUriInner(frag,scheme,defAction,defPackage,flags);
  if (mSelector != null) {
    uri.append(""String_Node_Str"");
    mSelector.toUriInner(frag,mSelector.mData != null ? mSelector.mData.getScheme() : null,null,null,flags);
  }
  if (frag.length() > 0) {
    uri.append(""String_Node_Str"");
    uri.append(frag);
    uri.append(""String_Node_Str"");
  }
}","private void toUriFragment(StringBuilder uri,String scheme,String defAction,String defPackage,int flags){
  StringBuilder frag=new StringBuilder(128);
  toUriInner(frag,scheme,defAction,defPackage,flags);
  if (mSelector != null) {
    frag.append(""String_Node_Str"");
    mSelector.toUriInner(frag,mSelector.mData != null ? mSelector.mData.getScheme() : null,null,null,flags);
  }
  if (frag.length() > 0) {
    uri.append(""String_Node_Str"");
    uri.append(frag);
    uri.append(""String_Node_Str"");
  }
}",0.9930624380574826
195807,"/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    activity.mReferrer=intent.mReferrer;
    callActivityOnNewIntent(activity,new Intent(intent));
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}","/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    if (intent != null) {
      activity.mReferrer=intent.mReferrer;
    }
    callActivityOnNewIntent(activity,intent != null ? new Intent(intent) : null);
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}",0.9136904761904762
195808,"/** 
 * Create an intent from a URI.  This URI may encode the action, category, and other intent fields, if it was returned by  {@link #toUri}.  If the Intent was not generate by toUri(), its data will be the entire URI and its action will be ACTION_VIEW. <p>The URI given here must not be relative -- that is, it must include the scheme and full path.
 * @param uri The URI to turn into an Intent.
 * @param flags Additional processing flags.  Either 0,{@link #URI_INTENT_SCHEME}, or   {@link #URI_ANDROID_APP_SCHEME}.
 * @return Intent The newly created Intent object.
 * @throws URISyntaxException Throws URISyntaxError if the basic URI syntaxit bad (as parsed by the Uri class) or the Intent data within the URI is invalid.
 * @see #toUri
 */
public static Intent parseUri(String uri,int flags) throws URISyntaxException {
  int i=0;
  try {
    final boolean androidApp=uri.startsWith(""String_Node_Str"");
    if ((flags & (URI_INTENT_SCHEME | URI_ANDROID_APP_SCHEME)) != 0) {
      if (!uri.startsWith(""String_Node_Str"") && !androidApp) {
        Intent intent=new Intent(ACTION_VIEW);
        try {
          intent.setData(Uri.parse(uri));
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
        return intent;
      }
    }
    i=uri.lastIndexOf(""String_Node_Str"");
    if (i == -1) {
      if (!androidApp) {
        return new Intent(ACTION_VIEW,Uri.parse(uri));
      }
    }
 else     if (!uri.startsWith(""String_Node_Str"",i)) {
      if (!androidApp) {
        return getIntentOld(uri,flags);
      }
 else {
        i=-1;
      }
    }
    Intent intent=new Intent(ACTION_VIEW);
    Intent baseIntent=intent;
    boolean explicitAction=false;
    boolean inSelector=false;
    String scheme=null;
    String data;
    if (i >= 0) {
      data=uri.substring(0,i);
      i+=8;
    }
 else {
      data=uri;
    }
    while (i >= 0 && !uri.startsWith(""String_Node_Str"",i)) {
      int eq=uri.indexOf('=',i);
      if (eq < 0)       eq=i - 1;
      int semi=uri.indexOf(';',i);
      String value=eq < semi ? Uri.decode(uri.substring(eq + 1,semi)) : ""String_Node_Str"";
      if (uri.startsWith(""String_Node_Str"",i)) {
        intent.setAction(value);
        if (!inSelector) {
          explicitAction=true;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.addCategory(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mType=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mFlags=Integer.decode(value).intValue();
        if ((flags & URI_ALLOW_UNSAFE) == 0) {
          intent.mFlags&=~IMMUTABLE_FLAGS;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mPackage=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mComponent=ComponentName.unflattenFromString(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        if (inSelector) {
          intent.mData=Uri.parse(value);
        }
 else {
          scheme=value;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mSourceBounds=Rect.unflattenFromString(value);
      }
 else       if (semi == (i + 3) && uri.startsWith(""String_Node_Str"",i)) {
        intent=new Intent();
        inSelector=true;
      }
 else {
        String key=Uri.decode(uri.substring(i + 2,eq));
        if (intent.mExtras == null)         intent.mExtras=new Bundle();
        Bundle b=intent.mExtras;
        if (uri.startsWith(""String_Node_Str"",i))         b.putString(key,value);
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putBoolean(key,Boolean.parseBoolean(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putByte(key,Byte.parseByte(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putChar(key,value.charAt(0));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putDouble(key,Double.parseDouble(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putFloat(key,Float.parseFloat(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putInt(key,Integer.parseInt(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putLong(key,Long.parseLong(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putShort(key,Short.parseShort(value));
 else         throw new URISyntaxException(uri,""String_Node_Str"",i);
      }
      i=semi + 1;
    }
    if (inSelector) {
      if (baseIntent.mPackage == null) {
        baseIntent.setSelector(intent);
      }
      intent=baseIntent;
    }
    if (data != null) {
      if (data.startsWith(""String_Node_Str"")) {
        data=data.substring(7);
        if (scheme != null) {
          data=scheme + ':' + data;
        }
      }
 else       if (data.startsWith(""String_Node_Str"")) {
        if (data.charAt(12) == '/' && data.charAt(13) == '/') {
          int end=data.indexOf('/',14);
          if (end < 0) {
            intent.mPackage=data.substring(14);
            if (!explicitAction) {
              intent.setAction(ACTION_MAIN);
            }
            data=""String_Node_Str"";
          }
 else {
            String authority=null;
            intent.mPackage=data.substring(14,end);
            int newEnd;
            if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
              scheme=data.substring(end + 1,newEnd);
              end=newEnd;
              if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
                authority=data.substring(end + 1,newEnd);
                end=newEnd;
              }
            }
            if (scheme == null) {
              if (!explicitAction) {
                intent.setAction(ACTION_MAIN);
              }
              data=""String_Node_Str"";
            }
 else             if (authority == null) {
              data=scheme + ""String_Node_Str"";
            }
 else {
              data=scheme + ""String_Node_Str"" + authority+ data.substring(end);
            }
          }
        }
 else {
          data=""String_Node_Str"";
        }
      }
      if (data.length() > 0) {
        try {
          intent.mData=Uri.parse(data);
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
      }
    }
    return intent;
  }
 catch (  IndexOutOfBoundsException e) {
    throw new URISyntaxException(uri,""String_Node_Str"",i);
  }
}","/** 
 * Create an intent from a URI.  This URI may encode the action, category, and other intent fields, if it was returned by  {@link #toUri}.  If the Intent was not generate by toUri(), its data will be the entire URI and its action will be ACTION_VIEW. <p>The URI given here must not be relative -- that is, it must include the scheme and full path.
 * @param uri The URI to turn into an Intent.
 * @param flags Additional processing flags.  Either 0,{@link #URI_INTENT_SCHEME}, or   {@link #URI_ANDROID_APP_SCHEME}.
 * @return Intent The newly created Intent object.
 * @throws URISyntaxException Throws URISyntaxError if the basic URI syntaxit bad (as parsed by the Uri class) or the Intent data within the URI is invalid.
 * @see #toUri
 */
public static Intent parseUri(String uri,int flags) throws URISyntaxException {
  int i=0;
  try {
    final boolean androidApp=uri.startsWith(""String_Node_Str"");
    if ((flags & (URI_INTENT_SCHEME | URI_ANDROID_APP_SCHEME)) != 0) {
      if (!uri.startsWith(""String_Node_Str"") && !androidApp) {
        Intent intent=new Intent(ACTION_VIEW);
        try {
          intent.setData(Uri.parse(uri));
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
        return intent;
      }
    }
    i=uri.lastIndexOf(""String_Node_Str"");
    if (i == -1) {
      if (!androidApp) {
        return new Intent(ACTION_VIEW,Uri.parse(uri));
      }
    }
 else     if (!uri.startsWith(""String_Node_Str"",i)) {
      if (!androidApp) {
        return getIntentOld(uri,flags);
      }
 else {
        i=-1;
      }
    }
    Intent intent=new Intent(ACTION_VIEW);
    Intent baseIntent=intent;
    boolean explicitAction=false;
    boolean inSelector=false;
    String scheme=null;
    String data;
    if (i >= 0) {
      data=uri.substring(0,i);
      i+=8;
    }
 else {
      data=uri;
    }
    while (i >= 0 && !uri.startsWith(""String_Node_Str"",i)) {
      int eq=uri.indexOf('=',i);
      if (eq < 0)       eq=i - 1;
      int semi=uri.indexOf(';',i);
      String value=eq < semi ? Uri.decode(uri.substring(eq + 1,semi)) : ""String_Node_Str"";
      if (uri.startsWith(""String_Node_Str"",i)) {
        intent.setAction(value);
        if (!inSelector) {
          explicitAction=true;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.addCategory(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mType=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mFlags=Integer.decode(value).intValue();
        if ((flags & URI_ALLOW_UNSAFE) == 0) {
          intent.mFlags&=~IMMUTABLE_FLAGS;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mPackage=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mComponent=ComponentName.unflattenFromString(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        if (inSelector) {
          intent.mData=Uri.parse(value + ""String_Node_Str"");
        }
 else {
          scheme=value;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mSourceBounds=Rect.unflattenFromString(value);
      }
 else       if (semi == (i + 3) && uri.startsWith(""String_Node_Str"",i)) {
        intent=new Intent();
        inSelector=true;
      }
 else {
        String key=Uri.decode(uri.substring(i + 2,eq));
        if (intent.mExtras == null)         intent.mExtras=new Bundle();
        Bundle b=intent.mExtras;
        if (uri.startsWith(""String_Node_Str"",i))         b.putString(key,value);
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putBoolean(key,Boolean.parseBoolean(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putByte(key,Byte.parseByte(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putChar(key,value.charAt(0));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putDouble(key,Double.parseDouble(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putFloat(key,Float.parseFloat(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putInt(key,Integer.parseInt(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putLong(key,Long.parseLong(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putShort(key,Short.parseShort(value));
 else         throw new URISyntaxException(uri,""String_Node_Str"",i);
      }
      i=semi + 1;
    }
    if (inSelector) {
      if (baseIntent.mPackage == null) {
        baseIntent.setSelector(intent);
      }
      intent=baseIntent;
    }
    if (data != null) {
      if (data.startsWith(""String_Node_Str"")) {
        data=data.substring(7);
        if (scheme != null) {
          data=scheme + ':' + data;
        }
      }
 else       if (data.startsWith(""String_Node_Str"")) {
        if (data.charAt(12) == '/' && data.charAt(13) == '/') {
          int end=data.indexOf('/',14);
          if (end < 0) {
            intent.mPackage=data.substring(14);
            if (!explicitAction) {
              intent.setAction(ACTION_MAIN);
            }
            data=""String_Node_Str"";
          }
 else {
            String authority=null;
            intent.mPackage=data.substring(14,end);
            int newEnd;
            if ((end + 1) < data.length()) {
              if ((newEnd=data.indexOf('/',end + 1)) >= 0) {
                scheme=data.substring(end + 1,newEnd);
                end=newEnd;
                if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
                  authority=data.substring(end + 1,newEnd);
                  end=newEnd;
                }
              }
 else {
                scheme=data.substring(end + 1);
              }
            }
            if (scheme == null) {
              if (!explicitAction) {
                intent.setAction(ACTION_MAIN);
              }
              data=""String_Node_Str"";
            }
 else             if (authority == null) {
              data=scheme + ""String_Node_Str"";
            }
 else {
              data=scheme + ""String_Node_Str"" + authority+ data.substring(end);
            }
          }
        }
 else {
          data=""String_Node_Str"";
        }
      }
      if (data.length() > 0) {
        try {
          intent.mData=Uri.parse(data);
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
      }
    }
    return intent;
  }
 catch (  IndexOutOfBoundsException e) {
    throw new URISyntaxException(uri,""String_Node_Str"",i);
  }
}",0.988118514062265
195809,"private void toUriFragment(StringBuilder uri,String scheme,String defAction,String defPackage,int flags){
  StringBuilder frag=new StringBuilder(128);
  toUriInner(frag,scheme,defAction,defPackage,flags);
  if (mSelector != null) {
    uri.append(""String_Node_Str"");
    mSelector.toUriInner(frag,mSelector.mData != null ? mSelector.mData.getScheme() : null,null,null,flags);
  }
  if (frag.length() > 0) {
    uri.append(""String_Node_Str"");
    uri.append(frag);
    uri.append(""String_Node_Str"");
  }
}","private void toUriFragment(StringBuilder uri,String scheme,String defAction,String defPackage,int flags){
  StringBuilder frag=new StringBuilder(128);
  toUriInner(frag,scheme,defAction,defPackage,flags);
  if (mSelector != null) {
    frag.append(""String_Node_Str"");
    mSelector.toUriInner(frag,mSelector.mData != null ? mSelector.mData.getScheme() : null,null,null,flags);
  }
  if (frag.length() > 0) {
    uri.append(""String_Node_Str"");
    uri.append(frag);
    uri.append(""String_Node_Str"");
  }
}",0.9930624380574826
195810,"public void updateDismissView(boolean visible){
  int oldVisibility=mDismissView.willBeGone() ? GONE : mDismissView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mDismissView.willBeGone()) {
        mDismissView.cancelAnimation();
      }
 else {
        mDismissView.setInvisible();
      }
      mDismissView.setVisibility(newVisibility);
      mDismissView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable dimissHideFinishRunnable=new Runnable(){
        @Override public void run(){
          mDismissView.setVisibility(GONE);
          mDismissView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mDismissView.isButtonVisible() && mIsExpanded) {
        mDismissView.setWillBeGone(true);
        mDismissView.performVisibilityAnimation(false,dimissHideFinishRunnable);
      }
 else {
        dimissHideFinishRunnable.run();
        mDismissView.showClearButton();
      }
    }
  }
}","public void updateDismissView(boolean visible){
  int oldVisibility=mDismissView.willBeGone() ? GONE : mDismissView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mDismissView.willBeGone()) {
        mDismissView.cancelAnimation();
      }
 else {
        mDismissView.setInvisible();
      }
      mDismissView.setVisibility(newVisibility);
      mDismissView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable dimissHideFinishRunnable=new Runnable(){
        @Override public void run(){
          mDismissView.setVisibility(GONE);
          mDismissView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mDismissView.isButtonVisible() && mIsExpanded && mAnimationsEnabled) {
        mDismissView.setWillBeGone(true);
        mDismissView.performVisibilityAnimation(false,dimissHideFinishRunnable);
      }
 else {
        dimissHideFinishRunnable.run();
        mDismissView.showClearButton();
      }
    }
  }
}",0.990582191780822
195811,"public void updateEmptyShadeView(boolean visible){
  int oldVisibility=mEmptyShadeView.willBeGone() ? GONE : mEmptyShadeView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mEmptyShadeView.willBeGone()) {
        mEmptyShadeView.cancelAnimation();
      }
 else {
        mEmptyShadeView.setInvisible();
      }
      mEmptyShadeView.setVisibility(newVisibility);
      mEmptyShadeView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      mEmptyShadeView.setWillBeGone(true);
      mEmptyShadeView.performVisibilityAnimation(false,new Runnable(){
        @Override public void run(){
          mEmptyShadeView.setVisibility(GONE);
          mEmptyShadeView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
);
    }
  }
}","public void updateEmptyShadeView(boolean visible){
  int oldVisibility=mEmptyShadeView.willBeGone() ? GONE : mEmptyShadeView.getVisibility();
  int newVisibility=visible ? VISIBLE : GONE;
  if (oldVisibility != newVisibility) {
    if (newVisibility != GONE) {
      if (mEmptyShadeView.willBeGone()) {
        mEmptyShadeView.cancelAnimation();
      }
 else {
        mEmptyShadeView.setInvisible();
      }
      mEmptyShadeView.setVisibility(newVisibility);
      mEmptyShadeView.setWillBeGone(false);
      updateContentHeight();
      notifyHeightChangeListener(mDismissView);
    }
 else {
      Runnable onFinishedRunnable=new Runnable(){
        @Override public void run(){
          mEmptyShadeView.setVisibility(GONE);
          mEmptyShadeView.setWillBeGone(false);
          updateContentHeight();
          notifyHeightChangeListener(mDismissView);
        }
      }
;
      if (mAnimationsEnabled) {
        mEmptyShadeView.setWillBeGone(true);
        mEmptyShadeView.performVisibilityAnimation(false,onFinishedRunnable);
      }
 else {
        mEmptyShadeView.setInvisible();
        onFinishedRunnable.run();
      }
    }
  }
}",0.8206831119544592
195812,"public void setDark(boolean dark,boolean fade,long delay){
  super.setDark(dark,fade,delay);
  if (mDark == dark) {
    return;
  }
  mDark=dark;
  if (!dark && fade) {
    if (mActivated) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
 else {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.INVISIBLE);
    }
    fadeDarkToDimmed(delay);
  }
 else {
    updateBackground();
  }
}","public void setDark(boolean dark,boolean fade,long delay){
  super.setDark(dark,fade,delay);
  if (mDark == dark) {
    return;
  }
  mDark=dark;
  if (!dark && fade) {
    if (mActivated) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
 else     if (mDimmed) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
      mBackgroundNormal.setVisibility(View.INVISIBLE);
    }
 else {
      mBackgroundDimmed.setVisibility(View.INVISIBLE);
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
    fadeInFromDark(delay);
  }
 else {
    updateBackground();
  }
}",0.8287488908606921
195813,"@Override public void createAnimation(final LockPatternView.CellState animatedCell,long delay,long duration,float translationY,final boolean appearing,Interpolator interpolator,final Runnable finishListener){
  if (appearing) {
    animatedCell.scale=0.0f;
  }
  animatedCell.translateY=appearing ? translationY : 0;
  ValueAnimator animator=ValueAnimator.ofFloat(animatedCell.translateY,appearing ? 0 : translationY);
  animator.setInterpolator(interpolator);
  animator.setDuration(duration);
  animator.setStartDelay(delay);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      float animatedFraction=animation.getAnimatedFraction();
      if (appearing) {
        animatedCell.scale=animatedFraction;
      }
 else {
        animatedCell.alpha=1 - animatedFraction;
      }
      animatedCell.translateY=(float)animation.getAnimatedValue();
      mLockPatternView.invalidate();
    }
  }
);
  if (finishListener != null) {
    animator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        finishListener.run();
      }
    }
);
    mAppearAnimationUtils.createAnimation(mEcaView,delay,duration,translationY,appearing,interpolator,null);
  }
  animator.start();
  mLockPatternView.invalidate();
}","@Override public void createAnimation(final LockPatternView.CellState animatedCell,long delay,long duration,float translationY,final boolean appearing,Interpolator interpolator,final Runnable finishListener){
  if (appearing) {
    animatedCell.scale=0.0f;
    animatedCell.alpha=1.0f;
  }
  animatedCell.translateY=appearing ? translationY : 0;
  ValueAnimator animator=ValueAnimator.ofFloat(animatedCell.translateY,appearing ? 0 : translationY);
  animator.setInterpolator(interpolator);
  animator.setDuration(duration);
  animator.setStartDelay(delay);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      float animatedFraction=animation.getAnimatedFraction();
      if (appearing) {
        animatedCell.scale=animatedFraction;
      }
 else {
        animatedCell.alpha=1 - animatedFraction;
      }
      animatedCell.translateY=(float)animation.getAnimatedValue();
      mLockPatternView.invalidate();
    }
  }
);
  if (finishListener != null) {
    animator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        finishListener.run();
      }
    }
);
    mAppearAnimationUtils.createAnimation(mEcaView,delay,duration,translationY,appearing,interpolator,null);
  }
  animator.start();
  mLockPatternView.invalidate();
}",0.9895041621425986
195814,"/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    activity.mReferrer=intent.mReferrer;
    callActivityOnNewIntent(activity,new Intent(intent));
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}","/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    if (intent != null) {
      activity.mReferrer=intent.mReferrer;
    }
    callActivityOnNewIntent(activity,intent != null ? new Intent(intent) : null);
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}",0.9136904761904762
195815,"/** 
 * Create an intent from a URI.  This URI may encode the action, category, and other intent fields, if it was returned by  {@link #toUri}.  If the Intent was not generate by toUri(), its data will be the entire URI and its action will be ACTION_VIEW. <p>The URI given here must not be relative -- that is, it must include the scheme and full path.
 * @param uri The URI to turn into an Intent.
 * @param flags Additional processing flags.  Either 0,{@link #URI_INTENT_SCHEME}, or   {@link #URI_ANDROID_APP_SCHEME}.
 * @return Intent The newly created Intent object.
 * @throws URISyntaxException Throws URISyntaxError if the basic URI syntaxit bad (as parsed by the Uri class) or the Intent data within the URI is invalid.
 * @see #toUri
 */
public static Intent parseUri(String uri,int flags) throws URISyntaxException {
  int i=0;
  try {
    final boolean androidApp=uri.startsWith(""String_Node_Str"");
    if ((flags & (URI_INTENT_SCHEME | URI_ANDROID_APP_SCHEME)) != 0) {
      if (!uri.startsWith(""String_Node_Str"") && !androidApp) {
        Intent intent=new Intent(ACTION_VIEW);
        try {
          intent.setData(Uri.parse(uri));
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
        return intent;
      }
    }
    i=uri.lastIndexOf(""String_Node_Str"");
    if (i == -1) {
      if (!androidApp) {
        return new Intent(ACTION_VIEW,Uri.parse(uri));
      }
    }
 else     if (!uri.startsWith(""String_Node_Str"",i)) {
      if (!androidApp) {
        return getIntentOld(uri,flags);
      }
 else {
        i=-1;
      }
    }
    Intent intent=new Intent(ACTION_VIEW);
    Intent baseIntent=intent;
    boolean explicitAction=false;
    boolean inSelector=false;
    String scheme=null;
    String data;
    if (i >= 0) {
      data=uri.substring(0,i);
      i+=8;
    }
 else {
      data=uri;
    }
    while (i >= 0 && !uri.startsWith(""String_Node_Str"",i)) {
      int eq=uri.indexOf('=',i);
      if (eq < 0)       eq=i - 1;
      int semi=uri.indexOf(';',i);
      String value=eq < semi ? Uri.decode(uri.substring(eq + 1,semi)) : ""String_Node_Str"";
      if (uri.startsWith(""String_Node_Str"",i)) {
        intent.setAction(value);
        if (!inSelector) {
          explicitAction=true;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.addCategory(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mType=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mFlags=Integer.decode(value).intValue();
        if ((flags & URI_ALLOW_UNSAFE) == 0) {
          intent.mFlags&=~IMMUTABLE_FLAGS;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mPackage=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mComponent=ComponentName.unflattenFromString(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        if (inSelector) {
          intent.mData=Uri.parse(value);
        }
 else {
          scheme=value;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mSourceBounds=Rect.unflattenFromString(value);
      }
 else       if (semi == (i + 3) && uri.startsWith(""String_Node_Str"",i)) {
        intent=new Intent();
        inSelector=true;
      }
 else {
        String key=Uri.decode(uri.substring(i + 2,eq));
        if (intent.mExtras == null)         intent.mExtras=new Bundle();
        Bundle b=intent.mExtras;
        if (uri.startsWith(""String_Node_Str"",i))         b.putString(key,value);
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putBoolean(key,Boolean.parseBoolean(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putByte(key,Byte.parseByte(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putChar(key,value.charAt(0));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putDouble(key,Double.parseDouble(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putFloat(key,Float.parseFloat(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putInt(key,Integer.parseInt(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putLong(key,Long.parseLong(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putShort(key,Short.parseShort(value));
 else         throw new URISyntaxException(uri,""String_Node_Str"",i);
      }
      i=semi + 1;
    }
    if (inSelector) {
      if (baseIntent.mPackage == null) {
        baseIntent.setSelector(intent);
      }
      intent=baseIntent;
    }
    if (data != null) {
      if (data.startsWith(""String_Node_Str"")) {
        data=data.substring(7);
        if (scheme != null) {
          data=scheme + ':' + data;
        }
      }
 else       if (data.startsWith(""String_Node_Str"")) {
        if (data.charAt(12) == '/' && data.charAt(13) == '/') {
          int end=data.indexOf('/',14);
          if (end < 0) {
            intent.mPackage=data.substring(14);
            if (!explicitAction) {
              intent.setAction(ACTION_MAIN);
            }
            data=""String_Node_Str"";
          }
 else {
            String authority=null;
            intent.mPackage=data.substring(14,end);
            int newEnd;
            if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
              scheme=data.substring(end + 1,newEnd);
              end=newEnd;
              if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
                authority=data.substring(end + 1,newEnd);
                end=newEnd;
              }
            }
            if (scheme == null) {
              if (!explicitAction) {
                intent.setAction(ACTION_MAIN);
              }
              data=""String_Node_Str"";
            }
 else             if (authority == null) {
              data=scheme + ""String_Node_Str"";
            }
 else {
              data=scheme + ""String_Node_Str"" + authority+ data.substring(end);
            }
          }
        }
 else {
          data=""String_Node_Str"";
        }
      }
      if (data.length() > 0) {
        try {
          intent.mData=Uri.parse(data);
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
      }
    }
    return intent;
  }
 catch (  IndexOutOfBoundsException e) {
    throw new URISyntaxException(uri,""String_Node_Str"",i);
  }
}","/** 
 * Create an intent from a URI.  This URI may encode the action, category, and other intent fields, if it was returned by  {@link #toUri}.  If the Intent was not generate by toUri(), its data will be the entire URI and its action will be ACTION_VIEW. <p>The URI given here must not be relative -- that is, it must include the scheme and full path.
 * @param uri The URI to turn into an Intent.
 * @param flags Additional processing flags.  Either 0,{@link #URI_INTENT_SCHEME}, or   {@link #URI_ANDROID_APP_SCHEME}.
 * @return Intent The newly created Intent object.
 * @throws URISyntaxException Throws URISyntaxError if the basic URI syntaxit bad (as parsed by the Uri class) or the Intent data within the URI is invalid.
 * @see #toUri
 */
public static Intent parseUri(String uri,int flags) throws URISyntaxException {
  int i=0;
  try {
    final boolean androidApp=uri.startsWith(""String_Node_Str"");
    if ((flags & (URI_INTENT_SCHEME | URI_ANDROID_APP_SCHEME)) != 0) {
      if (!uri.startsWith(""String_Node_Str"") && !androidApp) {
        Intent intent=new Intent(ACTION_VIEW);
        try {
          intent.setData(Uri.parse(uri));
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
        return intent;
      }
    }
    i=uri.lastIndexOf(""String_Node_Str"");
    if (i == -1) {
      if (!androidApp) {
        return new Intent(ACTION_VIEW,Uri.parse(uri));
      }
    }
 else     if (!uri.startsWith(""String_Node_Str"",i)) {
      if (!androidApp) {
        return getIntentOld(uri,flags);
      }
 else {
        i=-1;
      }
    }
    Intent intent=new Intent(ACTION_VIEW);
    Intent baseIntent=intent;
    boolean explicitAction=false;
    boolean inSelector=false;
    String scheme=null;
    String data;
    if (i >= 0) {
      data=uri.substring(0,i);
      i+=8;
    }
 else {
      data=uri;
    }
    while (i >= 0 && !uri.startsWith(""String_Node_Str"",i)) {
      int eq=uri.indexOf('=',i);
      if (eq < 0)       eq=i - 1;
      int semi=uri.indexOf(';',i);
      String value=eq < semi ? Uri.decode(uri.substring(eq + 1,semi)) : ""String_Node_Str"";
      if (uri.startsWith(""String_Node_Str"",i)) {
        intent.setAction(value);
        if (!inSelector) {
          explicitAction=true;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.addCategory(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mType=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mFlags=Integer.decode(value).intValue();
        if ((flags & URI_ALLOW_UNSAFE) == 0) {
          intent.mFlags&=~IMMUTABLE_FLAGS;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mPackage=value;
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mComponent=ComponentName.unflattenFromString(value);
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        if (inSelector) {
          intent.mData=Uri.parse(value + ""String_Node_Str"");
        }
 else {
          scheme=value;
        }
      }
 else       if (uri.startsWith(""String_Node_Str"",i)) {
        intent.mSourceBounds=Rect.unflattenFromString(value);
      }
 else       if (semi == (i + 3) && uri.startsWith(""String_Node_Str"",i)) {
        intent=new Intent();
        inSelector=true;
      }
 else {
        String key=Uri.decode(uri.substring(i + 2,eq));
        if (intent.mExtras == null)         intent.mExtras=new Bundle();
        Bundle b=intent.mExtras;
        if (uri.startsWith(""String_Node_Str"",i))         b.putString(key,value);
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putBoolean(key,Boolean.parseBoolean(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putByte(key,Byte.parseByte(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putChar(key,value.charAt(0));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putDouble(key,Double.parseDouble(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putFloat(key,Float.parseFloat(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putInt(key,Integer.parseInt(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putLong(key,Long.parseLong(value));
 else         if (uri.startsWith(""String_Node_Str"",i))         b.putShort(key,Short.parseShort(value));
 else         throw new URISyntaxException(uri,""String_Node_Str"",i);
      }
      i=semi + 1;
    }
    if (inSelector) {
      if (baseIntent.mPackage == null) {
        baseIntent.setSelector(intent);
      }
      intent=baseIntent;
    }
    if (data != null) {
      if (data.startsWith(""String_Node_Str"")) {
        data=data.substring(7);
        if (scheme != null) {
          data=scheme + ':' + data;
        }
      }
 else       if (data.startsWith(""String_Node_Str"")) {
        if (data.charAt(12) == '/' && data.charAt(13) == '/') {
          int end=data.indexOf('/',14);
          if (end < 0) {
            intent.mPackage=data.substring(14);
            if (!explicitAction) {
              intent.setAction(ACTION_MAIN);
            }
            data=""String_Node_Str"";
          }
 else {
            String authority=null;
            intent.mPackage=data.substring(14,end);
            int newEnd;
            if ((end + 1) < data.length()) {
              if ((newEnd=data.indexOf('/',end + 1)) >= 0) {
                scheme=data.substring(end + 1,newEnd);
                end=newEnd;
                if (end < data.length() && (newEnd=data.indexOf('/',end + 1)) >= 0) {
                  authority=data.substring(end + 1,newEnd);
                  end=newEnd;
                }
              }
 else {
                scheme=data.substring(end + 1);
              }
            }
            if (scheme == null) {
              if (!explicitAction) {
                intent.setAction(ACTION_MAIN);
              }
              data=""String_Node_Str"";
            }
 else             if (authority == null) {
              data=scheme + ""String_Node_Str"";
            }
 else {
              data=scheme + ""String_Node_Str"" + authority+ data.substring(end);
            }
          }
        }
 else {
          data=""String_Node_Str"";
        }
      }
      if (data.length() > 0) {
        try {
          intent.mData=Uri.parse(data);
        }
 catch (        IllegalArgumentException e) {
          throw new URISyntaxException(uri,e.getMessage());
        }
      }
    }
    return intent;
  }
 catch (  IndexOutOfBoundsException e) {
    throw new URISyntaxException(uri,""String_Node_Str"",i);
  }
}",0.988118514062265
195816,"private void toUriFragment(StringBuilder uri,String scheme,String defAction,String defPackage,int flags){
  StringBuilder frag=new StringBuilder(128);
  toUriInner(frag,scheme,defAction,defPackage,flags);
  if (mSelector != null) {
    uri.append(""String_Node_Str"");
    mSelector.toUriInner(frag,mSelector.mData != null ? mSelector.mData.getScheme() : null,null,null,flags);
  }
  if (frag.length() > 0) {
    uri.append(""String_Node_Str"");
    uri.append(frag);
    uri.append(""String_Node_Str"");
  }
}","private void toUriFragment(StringBuilder uri,String scheme,String defAction,String defPackage,int flags){
  StringBuilder frag=new StringBuilder(128);
  toUriInner(frag,scheme,defAction,defPackage,flags);
  if (mSelector != null) {
    frag.append(""String_Node_Str"");
    mSelector.toUriInner(frag,mSelector.mData != null ? mSelector.mData.getScheme() : null,null,null,flags);
  }
  if (frag.length() > 0) {
    uri.append(""String_Node_Str"");
    uri.append(frag);
    uri.append(""String_Node_Str"");
  }
}",0.9930624380574826
195817,"private void moveToRunningState(){
  mState=STATE_RUNNING;
  nStart(mNativePtr.get(),this);
  notifyStartListeners();
}","private void moveToRunningState(){
  mState=STATE_RUNNING;
  if (mNativePtr != null) {
    nStart(mNativePtr.get());
  }
  notifyStartListeners();
}",0.8539325842696629
195818,"@Override public void cancel(){
  if (mState != STATE_PREPARE && mState != STATE_FINISHED) {
    if (mState == STATE_DELAYED) {
      getHelper().removeDelayedAnimation(this);
      moveToRunningState();
    }
    nEnd(mNativePtr.get());
    final ArrayList<AnimatorListener> listeners=cloneListeners();
    final int numListeners=listeners == null ? 0 : listeners.size();
    for (int i=0; i < numListeners; i++) {
      listeners.get(i).onAnimationCancel(this);
    }
    if (mViewTarget != null) {
      mViewTarget.invalidateViewProperty(true,false);
    }
  }
}","@Override public void cancel(){
  if (mState != STATE_PREPARE && mState != STATE_FINISHED) {
    if (mState == STATE_DELAYED) {
      getHelper().removeDelayedAnimation(this);
      moveToRunningState();
    }
    final ArrayList<AnimatorListener> listeners=cloneListeners();
    final int numListeners=listeners == null ? 0 : listeners.size();
    for (int i=0; i < numListeners; i++) {
      listeners.get(i).onAnimationCancel(this);
    }
    end();
  }
}",0.48046875
195819,"protected void onFinished(){
  if (mState == STATE_DELAYED) {
    getHelper().removeDelayedAnimation(this);
    notifyStartListeners();
  }
  mState=STATE_FINISHED;
  final ArrayList<AnimatorListener> listeners=cloneListeners();
  final int numListeners=listeners == null ? 0 : listeners.size();
  for (int i=0; i < numListeners; i++) {
    listeners.get(i).onAnimationEnd(this);
  }
  mNativePtr.release();
  mNativePtr=null;
}","protected void onFinished(){
  if (mState == STATE_PREPARE) {
    releaseNativePtr();
    return;
  }
  if (mState == STATE_DELAYED) {
    getHelper().removeDelayedAnimation(this);
    notifyStartListeners();
  }
  mState=STATE_FINISHED;
  final ArrayList<AnimatorListener> listeners=cloneListeners();
  final int numListeners=listeners == null ? 0 : listeners.size();
  for (int i=0; i < numListeners; i++) {
    listeners.get(i).onAnimationEnd(this);
  }
  releaseNativePtr();
}",0.8766519823788547
195820,"private void setTarget(RenderNode node){
  if (mTarget != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mTarget=node;
  mTarget.addAnimator(this);
}","private void setTarget(RenderNode node){
  checkMutable();
  if (mTarget != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  nSetListener(mNativePtr.get(),this);
  mTarget=node;
  mTarget.addAnimator(this);
}",0.85785536159601
195821,"@Override public void end(){
  if (mState != STATE_FINISHED) {
    if (mState < STATE_RUNNING) {
      getHelper().removeDelayedAnimation(this);
      doStart();
    }
    nEnd(mNativePtr.get());
    if (mViewTarget != null) {
      mViewTarget.invalidateViewProperty(true,false);
    }
  }
}","@Override public void end(){
  if (mState != STATE_FINISHED) {
    if (mState < STATE_RUNNING) {
      getHelper().removeDelayedAnimation(this);
      doStart();
    }
    if (mNativePtr != null) {
      nEnd(mNativePtr.get());
      if (mViewTarget != null) {
        mViewTarget.invalidateViewProperty(true,false);
      }
    }
 else {
      onFinished();
    }
  }
}",0.8610271903323263
195822,"private void checkMutable(){
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","private void checkMutable(){
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mNativePtr == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.6949152542372882
195823,"@Override public void start(){
  if (mTarget == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mState=STATE_DELAYED;
  applyInterpolator();
  if (mStartDelay <= 0 || !mUiThreadHandlesDelay) {
    nSetStartDelay(mNativePtr.get(),mStartDelay);
    doStart();
  }
 else {
    getHelper().addDelayedAnimation(this);
  }
}","@Override public void start(){
  if (mTarget == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mState=STATE_DELAYED;
  applyInterpolator();
  if (mNativePtr == null) {
    cancel();
  }
 else   if (mStartDelay <= 0 || !mUiThreadHandlesDelay) {
    nSetStartDelay(mNativePtr.get(),mStartDelay);
    doStart();
  }
 else {
    getHelper().addDelayedAnimation(this);
  }
}",0.943355119825708
195824,"private static native void nStart(long animPtr,RenderNodeAnimator finishListener);",private static native void nStart(long animPtr);,0.7384615384615385
195825,"private void moveToRunningState(){
  mState=STATE_RUNNING;
  nStart(mNativePtr.get(),this);
  notifyStartListeners();
}","private void moveToRunningState(){
  mState=STATE_RUNNING;
  if (mNativePtr != null) {
    nStart(mNativePtr.get());
  }
  notifyStartListeners();
}",0.8539325842696629
195826,"@Override public void cancel(){
  if (mState != STATE_PREPARE && mState != STATE_FINISHED) {
    if (mState == STATE_DELAYED) {
      getHelper().removeDelayedAnimation(this);
      moveToRunningState();
    }
    nEnd(mNativePtr.get());
    final ArrayList<AnimatorListener> listeners=cloneListeners();
    final int numListeners=listeners == null ? 0 : listeners.size();
    for (int i=0; i < numListeners; i++) {
      listeners.get(i).onAnimationCancel(this);
    }
    if (mViewTarget != null) {
      mViewTarget.invalidateViewProperty(true,false);
    }
  }
}","@Override public void cancel(){
  if (mState != STATE_PREPARE && mState != STATE_FINISHED) {
    if (mState == STATE_DELAYED) {
      getHelper().removeDelayedAnimation(this);
      moveToRunningState();
    }
    final ArrayList<AnimatorListener> listeners=cloneListeners();
    final int numListeners=listeners == null ? 0 : listeners.size();
    for (int i=0; i < numListeners; i++) {
      listeners.get(i).onAnimationCancel(this);
    }
    end();
  }
}",0.48046875
195827,"protected void onFinished(){
  if (mState == STATE_DELAYED) {
    getHelper().removeDelayedAnimation(this);
    notifyStartListeners();
  }
  mState=STATE_FINISHED;
  final ArrayList<AnimatorListener> listeners=cloneListeners();
  final int numListeners=listeners == null ? 0 : listeners.size();
  for (int i=0; i < numListeners; i++) {
    listeners.get(i).onAnimationEnd(this);
  }
  mNativePtr.release();
  mNativePtr=null;
}","protected void onFinished(){
  if (mState == STATE_PREPARE) {
    releaseNativePtr();
    return;
  }
  if (mState == STATE_DELAYED) {
    getHelper().removeDelayedAnimation(this);
    notifyStartListeners();
  }
  mState=STATE_FINISHED;
  final ArrayList<AnimatorListener> listeners=cloneListeners();
  final int numListeners=listeners == null ? 0 : listeners.size();
  for (int i=0; i < numListeners; i++) {
    listeners.get(i).onAnimationEnd(this);
  }
  releaseNativePtr();
}",0.8766519823788547
195828,"private void setTarget(RenderNode node){
  if (mTarget != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mTarget=node;
  mTarget.addAnimator(this);
}","private void setTarget(RenderNode node){
  checkMutable();
  if (mTarget != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  nSetListener(mNativePtr.get(),this);
  mTarget=node;
  mTarget.addAnimator(this);
}",0.85785536159601
195829,"@Override public void end(){
  if (mState != STATE_FINISHED) {
    if (mState < STATE_RUNNING) {
      getHelper().removeDelayedAnimation(this);
      doStart();
    }
    nEnd(mNativePtr.get());
    if (mViewTarget != null) {
      mViewTarget.invalidateViewProperty(true,false);
    }
  }
}","@Override public void end(){
  if (mState != STATE_FINISHED) {
    if (mState < STATE_RUNNING) {
      getHelper().removeDelayedAnimation(this);
      doStart();
    }
    if (mNativePtr != null) {
      nEnd(mNativePtr.get());
      if (mViewTarget != null) {
        mViewTarget.invalidateViewProperty(true,false);
      }
    }
 else {
      onFinished();
    }
  }
}",0.8610271903323263
195830,"private void checkMutable(){
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","private void checkMutable(){
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mNativePtr == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.6949152542372882
195831,"@Override public void start(){
  if (mTarget == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mState=STATE_DELAYED;
  applyInterpolator();
  if (mStartDelay <= 0 || !mUiThreadHandlesDelay) {
    nSetStartDelay(mNativePtr.get(),mStartDelay);
    doStart();
  }
 else {
    getHelper().addDelayedAnimation(this);
  }
}","@Override public void start(){
  if (mTarget == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mState=STATE_DELAYED;
  applyInterpolator();
  if (mNativePtr == null) {
    cancel();
  }
 else   if (mStartDelay <= 0 || !mUiThreadHandlesDelay) {
    nSetStartDelay(mNativePtr.get(),mStartDelay);
    doStart();
  }
 else {
    getHelper().addDelayedAnimation(this);
  }
}",0.943355119825708
195832,"private static native void nStart(long animPtr,RenderNodeAnimator finishListener);",private static native void nStart(long animPtr);,0.7384615384615385
195833,"private void moveToRunningState(){
  mState=STATE_RUNNING;
  nStart(mNativePtr.get(),this);
  notifyStartListeners();
}","private void moveToRunningState(){
  mState=STATE_RUNNING;
  if (mNativePtr != null) {
    nStart(mNativePtr.get());
  }
  notifyStartListeners();
}",0.8539325842696629
195834,"@Override public void cancel(){
  if (mState != STATE_PREPARE && mState != STATE_FINISHED) {
    if (mState == STATE_DELAYED) {
      getHelper().removeDelayedAnimation(this);
      moveToRunningState();
    }
    nEnd(mNativePtr.get());
    final ArrayList<AnimatorListener> listeners=cloneListeners();
    final int numListeners=listeners == null ? 0 : listeners.size();
    for (int i=0; i < numListeners; i++) {
      listeners.get(i).onAnimationCancel(this);
    }
    if (mViewTarget != null) {
      mViewTarget.invalidateViewProperty(true,false);
    }
  }
}","@Override public void cancel(){
  if (mState != STATE_PREPARE && mState != STATE_FINISHED) {
    if (mState == STATE_DELAYED) {
      getHelper().removeDelayedAnimation(this);
      moveToRunningState();
    }
    final ArrayList<AnimatorListener> listeners=cloneListeners();
    final int numListeners=listeners == null ? 0 : listeners.size();
    for (int i=0; i < numListeners; i++) {
      listeners.get(i).onAnimationCancel(this);
    }
    end();
  }
}",0.48046875
195835,"protected void onFinished(){
  if (mState == STATE_DELAYED) {
    getHelper().removeDelayedAnimation(this);
    notifyStartListeners();
  }
  mState=STATE_FINISHED;
  final ArrayList<AnimatorListener> listeners=cloneListeners();
  final int numListeners=listeners == null ? 0 : listeners.size();
  for (int i=0; i < numListeners; i++) {
    listeners.get(i).onAnimationEnd(this);
  }
  mNativePtr.release();
  mNativePtr=null;
}","protected void onFinished(){
  if (mState == STATE_PREPARE) {
    releaseNativePtr();
    return;
  }
  if (mState == STATE_DELAYED) {
    getHelper().removeDelayedAnimation(this);
    notifyStartListeners();
  }
  mState=STATE_FINISHED;
  final ArrayList<AnimatorListener> listeners=cloneListeners();
  final int numListeners=listeners == null ? 0 : listeners.size();
  for (int i=0; i < numListeners; i++) {
    listeners.get(i).onAnimationEnd(this);
  }
  releaseNativePtr();
}",0.8766519823788547
195836,"private void setTarget(RenderNode node){
  if (mTarget != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mTarget=node;
  mTarget.addAnimator(this);
}","private void setTarget(RenderNode node){
  checkMutable();
  if (mTarget != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  nSetListener(mNativePtr.get(),this);
  mTarget=node;
  mTarget.addAnimator(this);
}",0.85785536159601
195837,"@Override public void end(){
  if (mState != STATE_FINISHED) {
    if (mState < STATE_RUNNING) {
      getHelper().removeDelayedAnimation(this);
      doStart();
    }
    nEnd(mNativePtr.get());
    if (mViewTarget != null) {
      mViewTarget.invalidateViewProperty(true,false);
    }
  }
}","@Override public void end(){
  if (mState != STATE_FINISHED) {
    if (mState < STATE_RUNNING) {
      getHelper().removeDelayedAnimation(this);
      doStart();
    }
    if (mNativePtr != null) {
      nEnd(mNativePtr.get());
      if (mViewTarget != null) {
        mViewTarget.invalidateViewProperty(true,false);
      }
    }
 else {
      onFinished();
    }
  }
}",0.8610271903323263
195838,"private void checkMutable(){
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","private void checkMutable(){
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mNativePtr == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.6949152542372882
195839,"@Override public void start(){
  if (mTarget == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mState=STATE_DELAYED;
  applyInterpolator();
  if (mStartDelay <= 0 || !mUiThreadHandlesDelay) {
    nSetStartDelay(mNativePtr.get(),mStartDelay);
    doStart();
  }
 else {
    getHelper().addDelayedAnimation(this);
  }
}","@Override public void start(){
  if (mTarget == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mState=STATE_DELAYED;
  applyInterpolator();
  if (mNativePtr == null) {
    cancel();
  }
 else   if (mStartDelay <= 0 || !mUiThreadHandlesDelay) {
    nSetStartDelay(mNativePtr.get(),mStartDelay);
    doStart();
  }
 else {
    getHelper().addDelayedAnimation(this);
  }
}",0.943355119825708
195840,"private static native void nStart(long animPtr,RenderNodeAnimator finishListener);",private static native void nStart(long animPtr);,0.7384615384615385
195841,"private void moveToRunningState(){
  mState=STATE_RUNNING;
  nStart(mNativePtr.get(),this);
  notifyStartListeners();
}","private void moveToRunningState(){
  mState=STATE_RUNNING;
  if (mNativePtr != null) {
    nStart(mNativePtr.get());
  }
  notifyStartListeners();
}",0.8539325842696629
195842,"@Override public void cancel(){
  if (mState != STATE_PREPARE && mState != STATE_FINISHED) {
    if (mState == STATE_DELAYED) {
      getHelper().removeDelayedAnimation(this);
      moveToRunningState();
    }
    nEnd(mNativePtr.get());
    final ArrayList<AnimatorListener> listeners=cloneListeners();
    final int numListeners=listeners == null ? 0 : listeners.size();
    for (int i=0; i < numListeners; i++) {
      listeners.get(i).onAnimationCancel(this);
    }
    if (mViewTarget != null) {
      mViewTarget.invalidateViewProperty(true,false);
    }
  }
}","@Override public void cancel(){
  if (mState != STATE_PREPARE && mState != STATE_FINISHED) {
    if (mState == STATE_DELAYED) {
      getHelper().removeDelayedAnimation(this);
      moveToRunningState();
    }
    final ArrayList<AnimatorListener> listeners=cloneListeners();
    final int numListeners=listeners == null ? 0 : listeners.size();
    for (int i=0; i < numListeners; i++) {
      listeners.get(i).onAnimationCancel(this);
    }
    end();
  }
}",0.48046875
195843,"protected void onFinished(){
  if (mState == STATE_DELAYED) {
    getHelper().removeDelayedAnimation(this);
    notifyStartListeners();
  }
  mState=STATE_FINISHED;
  final ArrayList<AnimatorListener> listeners=cloneListeners();
  final int numListeners=listeners == null ? 0 : listeners.size();
  for (int i=0; i < numListeners; i++) {
    listeners.get(i).onAnimationEnd(this);
  }
  mNativePtr.release();
  mNativePtr=null;
}","protected void onFinished(){
  if (mState == STATE_PREPARE) {
    releaseNativePtr();
    return;
  }
  if (mState == STATE_DELAYED) {
    getHelper().removeDelayedAnimation(this);
    notifyStartListeners();
  }
  mState=STATE_FINISHED;
  final ArrayList<AnimatorListener> listeners=cloneListeners();
  final int numListeners=listeners == null ? 0 : listeners.size();
  for (int i=0; i < numListeners; i++) {
    listeners.get(i).onAnimationEnd(this);
  }
  releaseNativePtr();
}",0.8766519823788547
195844,"private void setTarget(RenderNode node){
  if (mTarget != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mTarget=node;
  mTarget.addAnimator(this);
}","private void setTarget(RenderNode node){
  checkMutable();
  if (mTarget != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  nSetListener(mNativePtr.get(),this);
  mTarget=node;
  mTarget.addAnimator(this);
}",0.85785536159601
195845,"@Override public void end(){
  if (mState != STATE_FINISHED) {
    if (mState < STATE_RUNNING) {
      getHelper().removeDelayedAnimation(this);
      doStart();
    }
    nEnd(mNativePtr.get());
    if (mViewTarget != null) {
      mViewTarget.invalidateViewProperty(true,false);
    }
  }
}","@Override public void end(){
  if (mState != STATE_FINISHED) {
    if (mState < STATE_RUNNING) {
      getHelper().removeDelayedAnimation(this);
      doStart();
    }
    if (mNativePtr != null) {
      nEnd(mNativePtr.get());
      if (mViewTarget != null) {
        mViewTarget.invalidateViewProperty(true,false);
      }
    }
 else {
      onFinished();
    }
  }
}",0.8610271903323263
195846,"private void checkMutable(){
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","private void checkMutable(){
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mNativePtr == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.6949152542372882
195847,"@Override public void start(){
  if (mTarget == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mState=STATE_DELAYED;
  applyInterpolator();
  if (mStartDelay <= 0 || !mUiThreadHandlesDelay) {
    nSetStartDelay(mNativePtr.get(),mStartDelay);
    doStart();
  }
 else {
    getHelper().addDelayedAnimation(this);
  }
}","@Override public void start(){
  if (mTarget == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mState=STATE_DELAYED;
  applyInterpolator();
  if (mNativePtr == null) {
    cancel();
  }
 else   if (mStartDelay <= 0 || !mUiThreadHandlesDelay) {
    nSetStartDelay(mNativePtr.get(),mStartDelay);
    doStart();
  }
 else {
    getHelper().addDelayedAnimation(this);
  }
}",0.943355119825708
195848,"private static native void nStart(long animPtr,RenderNodeAnimator finishListener);",private static native void nStart(long animPtr);,0.7384615384615385
195849,"private void moveToRunningState(){
  mState=STATE_RUNNING;
  nStart(mNativePtr.get(),this);
  notifyStartListeners();
}","private void moveToRunningState(){
  mState=STATE_RUNNING;
  if (mNativePtr != null) {
    nStart(mNativePtr.get());
  }
  notifyStartListeners();
}",0.8539325842696629
195850,"@Override public void cancel(){
  if (mState != STATE_PREPARE && mState != STATE_FINISHED) {
    if (mState == STATE_DELAYED) {
      getHelper().removeDelayedAnimation(this);
      moveToRunningState();
    }
    nEnd(mNativePtr.get());
    final ArrayList<AnimatorListener> listeners=cloneListeners();
    final int numListeners=listeners == null ? 0 : listeners.size();
    for (int i=0; i < numListeners; i++) {
      listeners.get(i).onAnimationCancel(this);
    }
    if (mViewTarget != null) {
      mViewTarget.invalidateViewProperty(true,false);
    }
  }
}","@Override public void cancel(){
  if (mState != STATE_PREPARE && mState != STATE_FINISHED) {
    if (mState == STATE_DELAYED) {
      getHelper().removeDelayedAnimation(this);
      moveToRunningState();
    }
    final ArrayList<AnimatorListener> listeners=cloneListeners();
    final int numListeners=listeners == null ? 0 : listeners.size();
    for (int i=0; i < numListeners; i++) {
      listeners.get(i).onAnimationCancel(this);
    }
    end();
  }
}",0.48046875
195851,"protected void onFinished(){
  if (mState == STATE_DELAYED) {
    getHelper().removeDelayedAnimation(this);
    notifyStartListeners();
  }
  mState=STATE_FINISHED;
  final ArrayList<AnimatorListener> listeners=cloneListeners();
  final int numListeners=listeners == null ? 0 : listeners.size();
  for (int i=0; i < numListeners; i++) {
    listeners.get(i).onAnimationEnd(this);
  }
  mNativePtr.release();
  mNativePtr=null;
}","protected void onFinished(){
  if (mState == STATE_PREPARE) {
    releaseNativePtr();
    return;
  }
  if (mState == STATE_DELAYED) {
    getHelper().removeDelayedAnimation(this);
    notifyStartListeners();
  }
  mState=STATE_FINISHED;
  final ArrayList<AnimatorListener> listeners=cloneListeners();
  final int numListeners=listeners == null ? 0 : listeners.size();
  for (int i=0; i < numListeners; i++) {
    listeners.get(i).onAnimationEnd(this);
  }
  releaseNativePtr();
}",0.8766519823788547
195852,"private void setTarget(RenderNode node){
  if (mTarget != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mTarget=node;
  mTarget.addAnimator(this);
}","private void setTarget(RenderNode node){
  checkMutable();
  if (mTarget != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  nSetListener(mNativePtr.get(),this);
  mTarget=node;
  mTarget.addAnimator(this);
}",0.85785536159601
195853,"@Override public void end(){
  if (mState != STATE_FINISHED) {
    if (mState < STATE_RUNNING) {
      getHelper().removeDelayedAnimation(this);
      doStart();
    }
    nEnd(mNativePtr.get());
    if (mViewTarget != null) {
      mViewTarget.invalidateViewProperty(true,false);
    }
  }
}","@Override public void end(){
  if (mState != STATE_FINISHED) {
    if (mState < STATE_RUNNING) {
      getHelper().removeDelayedAnimation(this);
      doStart();
    }
    if (mNativePtr != null) {
      nEnd(mNativePtr.get());
      if (mViewTarget != null) {
        mViewTarget.invalidateViewProperty(true,false);
      }
    }
 else {
      onFinished();
    }
  }
}",0.8610271903323263
195854,"private void checkMutable(){
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","private void checkMutable(){
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mNativePtr == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.6949152542372882
195855,"@Override public void start(){
  if (mTarget == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mState=STATE_DELAYED;
  applyInterpolator();
  if (mStartDelay <= 0 || !mUiThreadHandlesDelay) {
    nSetStartDelay(mNativePtr.get(),mStartDelay);
    doStart();
  }
 else {
    getHelper().addDelayedAnimation(this);
  }
}","@Override public void start(){
  if (mTarget == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (mState != STATE_PREPARE) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mState=STATE_DELAYED;
  applyInterpolator();
  if (mNativePtr == null) {
    cancel();
  }
 else   if (mStartDelay <= 0 || !mUiThreadHandlesDelay) {
    nSetStartDelay(mNativePtr.get(),mStartDelay);
    doStart();
  }
 else {
    getHelper().addDelayedAnimation(this);
  }
}",0.943355119825708
195856,"private static native void nStart(long animPtr,RenderNodeAnimator finishListener);",private static native void nStart(long animPtr);,0.7384615384615385
195857,"private static Calendar tomorrowMidnight(){
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(System.currentTimeMillis());
  calendar.set(Calendar.HOUR_OF_DAY,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MILLISECOND,0);
  calendar.add(Calendar.DAY_OF_MONTH,1);
  return calendar;
}","private static Calendar tomorrowMidnight(){
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(System.currentTimeMillis());
  calendar.set(Calendar.HOUR_OF_DAY,3);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MILLISECOND,0);
  calendar.add(Calendar.DAY_OF_MONTH,1);
  return calendar;
}",0.9971830985915492
195858,"@Override public boolean onStartJob(JobParameters params){
  mJobParams=params;
  MountService ms=MountService.sSelf;
  if (ms != null) {
synchronized (mFinishCallback) {
      mStarted=true;
    }
    ms.runIdleMaintenance(mFinishCallback);
  }
  return ms != null;
}","@Override public boolean onStartJob(JobParameters params){
  try {
    ActivityManagerNative.getDefault().performIdleMaintenance();
  }
 catch (  RemoteException e) {
  }
  mJobParams=params;
  MountService ms=MountService.sSelf;
  if (ms != null) {
synchronized (mFinishCallback) {
      mStarted=true;
    }
    ms.runIdleMaintenance(mFinishCallback);
  }
  return ms != null;
}",0.8271604938271605
195859,"void dumpProcessesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  int numPers=0;
  pw.println(""String_Node_Str"");
  if (dumpAll) {
    final int NP=mProcessNames.getMap().size();
    for (int ip=0; ip < NP; ip++) {
      SparseArray<ProcessRecord> procs=mProcessNames.getMap().valueAt(ip);
      final int NA=procs.size();
      for (int ia=0; ia < NA; ia++) {
        ProcessRecord r=procs.valueAt(ia);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!needSep) {
          pw.println(""String_Node_Str"");
          needSep=true;
          printedAnything=true;
        }
        pw.print(r.persistent ? ""String_Node_Str"" : ""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(procs.keyAt(ia));
        pw.print(""String_Node_Str"");
        pw.println(r);
        r.dump(pw,""String_Node_Str"");
        if (r.persistent) {
          numPers++;
        }
      }
    }
  }
  if (mIsolatedProcesses.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mIsolatedProcesses.size(); i++) {
      ProcessRecord r=mIsolatedProcesses.valueAt(i);
      if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        pw.println(""String_Node_Str"");
        printedAnything=true;
        printed=true;
        needSep=true;
      }
      pw.println(String.format(""String_Node_Str"",""String_Node_Str"",i,r.toString()));
    }
  }
  if (mLruProcesses.size() > 0) {
    if (needSep) {
      pw.println();
    }
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size());
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessActivityStart);
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessServiceStart);
    pw.println(""String_Node_Str"");
    dumpProcessOomList(pw,this,mLruProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,dumpPackage);
    needSep=true;
    printedAnything=true;
  }
  if (dumpAll || dumpPackage != null) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mPidsSelfLocked.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.valueAt(i);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mPidsSelfLocked.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mPidsSelfLocked.valueAt(i));
      }
    }
  }
  if (mForegroundProcesses.size() > 0) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mForegroundProcesses.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.get(mForegroundProcesses.valueAt(i).pid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mForegroundProcesses.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mForegroundProcesses.valueAt(i));
      }
    }
  }
  if (mPersistentStartingProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mPersistentStartingProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mRemovedProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mRemovedProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mProcessesOnHold.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mProcessesOnHold,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  needSep=dumpProcessesToGc(fd,pw,args,opti,needSep,dumpAll,dumpPackage);
  if (mProcessCrashTimes.getMap().size() > 0) {
    boolean printed=false;
    long now=SystemClock.uptimeMillis();
    final ArrayMap<String,SparseArray<Long>> pmap=mProcessCrashTimes.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<Long> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        TimeUtils.formatDuration(now - uids.valueAt(i),pw);
        pw.println(""String_Node_Str"");
      }
    }
  }
  if (mBadProcesses.getMap().size() > 0) {
    boolean printed=false;
    final ArrayMap<String,SparseArray<BadProcessInfo>> pmap=mBadProcesses.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<BadProcessInfo> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printedAnything=true;
        }
        BadProcessInfo info=uids.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        pw.println(info.time);
        if (info.shortMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.shortMsg);
        }
        if (info.longMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.longMsg);
        }
        if (info.stack != null) {
          pw.println(""String_Node_Str"");
          int lastPos=0;
          for (int pos=0; pos < info.stack.length(); pos++) {
            if (info.stack.charAt(pos) == '\n') {
              pw.print(""String_Node_Str"");
              pw.write(info.stack,lastPos,pos - lastPos);
              pw.println();
              lastPos=pos + 1;
            }
          }
          if (lastPos < info.stack.length()) {
            pw.print(""String_Node_Str"");
            pw.write(info.stack,lastPos,info.stack.length() - lastPos);
            pw.println();
          }
        }
      }
    }
  }
  if (dumpPackage == null) {
    pw.println();
    needSep=false;
    pw.println(""String_Node_Str"");
    for (int i=0; i < mStartedUsers.size(); i++) {
      UserStartedState uss=mStartedUsers.valueAt(i);
      pw.print(""String_Node_Str"");
      pw.print(uss.mHandle.getIdentifier());
      pw.print(""String_Node_Str"");
      uss.dump(""String_Node_Str"",pw);
    }
    pw.print(""String_Node_Str"");
    for (int i=0; i < mStartedUserArray.length; i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mStartedUserArray[i]);
    }
    pw.println(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    for (int i=0; i < mUserLru.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mUserLru.get(i));
    }
    pw.println(""String_Node_Str"");
    if (dumpAll) {
      pw.print(""String_Node_Str"");
      pw.println(Arrays.toString(mStartedUserArray));
    }
synchronized (mUserProfileGroupIdsSelfLocked) {
      if (mUserProfileGroupIdsSelfLocked.size() > 0) {
        pw.println(""String_Node_Str"");
        for (int i=0; i < mUserProfileGroupIdsSelfLocked.size(); i++) {
          pw.print(""String_Node_Str"");
          pw.print(mUserProfileGroupIdsSelfLocked.keyAt(i));
          pw.print(""String_Node_Str"");
          pw.println(mUserProfileGroupIdsSelfLocked.valueAt(i));
        }
      }
    }
  }
  if (mHomeProcess != null && (dumpPackage == null || mHomeProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHomeProcess);
  }
  if (mPreviousProcess != null && (dumpPackage == null || mPreviousProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mPreviousProcess);
  }
  if (dumpAll) {
    StringBuilder sb=new StringBuilder(128);
    sb.append(""String_Node_Str"");
    TimeUtils.formatDuration(mPreviousProcessVisibleTime,sb);
    pw.println(sb);
  }
  if (mHeavyWeightProcess != null && (dumpPackage == null || mHeavyWeightProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHeavyWeightProcess);
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + mConfiguration);
  }
  if (dumpAll) {
    pw.println(""String_Node_Str"" + getFocusedStack().mConfigWillChange);
    if (mCompatModePackages.getPackages().size() > 0) {
      boolean printed=false;
      for (      Map.Entry<String,Integer> entry : mCompatModePackages.getPackages().entrySet()) {
        String pkg=entry.getKey();
        int mode=entry.getValue();
        if (dumpPackage != null && !dumpPackage.equals(pkg)) {
          continue;
        }
        if (!printed) {
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pkg);
        pw.print(""String_Node_Str"");
        pw.print(mode);
        pw.println();
      }
    }
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + PowerManagerInternal.wakefulnessToString(mWakefulness));
    pw.println(""String_Node_Str"" + mSleeping + ""String_Node_Str""+ lockScreenShownToString());
    pw.print(""String_Node_Str"" + mShuttingDown + ""String_Node_Str""+ mRunningVoice);
  }
  if (mDebugApp != null || mOrigDebugApp != null || mDebugTransient || mOrigWaitForDebugger) {
    if (dumpPackage == null || dumpPackage.equals(mDebugApp) || dumpPackage.equals(mOrigDebugApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mDebugApp + ""String_Node_Str""+ mOrigDebugApp+ ""String_Node_Str""+ mDebugTransient+ ""String_Node_Str""+ mOrigWaitForDebugger);
    }
  }
  if (mOpenGlTraceApp != null) {
    if (dumpPackage == null || dumpPackage.equals(mOpenGlTraceApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mOpenGlTraceApp);
    }
  }
  if (mProfileApp != null || mProfileProc != null || mProfileFile != null || mProfileFd != null) {
    if (dumpPackage == null || dumpPackage.equals(mProfileApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mProfileApp + ""String_Node_Str""+ mProfileProc);
      pw.println(""String_Node_Str"" + mProfileFile + ""String_Node_Str""+ mProfileFd);
      pw.println(""String_Node_Str"" + mSamplingInterval + ""String_Node_Str""+ mAutoStopProfiler);
      pw.println(""String_Node_Str"" + mProfileType);
    }
  }
  if (dumpPackage == null) {
    if (mAlwaysFinishActivities || mController != null) {
      pw.println(""String_Node_Str"" + mAlwaysFinishActivities + ""String_Node_Str""+ mController);
    }
    if (dumpAll) {
      pw.println(""String_Node_Str"" + numPers);
      pw.println(""String_Node_Str"" + mProcessesReady + ""String_Node_Str""+ mSystemReady+ ""String_Node_Str""+ mBooted+ ""String_Node_Str""+ mFactoryTest);
      pw.println(""String_Node_Str"" + mBooting + ""String_Node_Str""+ mCallFinishBooting+ ""String_Node_Str""+ mBootAnimationComplete);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckRealtime,pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckUptime,pw);
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"" + mStackSupervisor.mGoingToSleep);
      pw.println(""String_Node_Str"" + mStackSupervisor.mLaunchingActivity);
      pw.println(""String_Node_Str"" + mAdjSeq + ""String_Node_Str""+ mLruSeq);
      pw.println(""String_Node_Str"" + mNumNonCachedProcs + ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ ""String_Node_Str""+ mNumCachedHiddenProcs+ ""String_Node_Str""+ mNumServiceProcs+ ""String_Node_Str""+ mNewNumServiceProcs);
      pw.println(""String_Node_Str"" + mAllowLowerMemLevel + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mLastNumProcesses);
      long now=SystemClock.uptimeMillis();
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(now,mLastIdleTime,pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(getLowRamTimeSinceIdle(now),pw);
      pw.println();
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}","void dumpProcessesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  int numPers=0;
  pw.println(""String_Node_Str"");
  if (dumpAll) {
    final int NP=mProcessNames.getMap().size();
    for (int ip=0; ip < NP; ip++) {
      SparseArray<ProcessRecord> procs=mProcessNames.getMap().valueAt(ip);
      final int NA=procs.size();
      for (int ia=0; ia < NA; ia++) {
        ProcessRecord r=procs.valueAt(ia);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!needSep) {
          pw.println(""String_Node_Str"");
          needSep=true;
          printedAnything=true;
        }
        pw.print(r.persistent ? ""String_Node_Str"" : ""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(procs.keyAt(ia));
        pw.print(""String_Node_Str"");
        pw.println(r);
        r.dump(pw,""String_Node_Str"");
        if (r.persistent) {
          numPers++;
        }
      }
    }
  }
  if (mIsolatedProcesses.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mIsolatedProcesses.size(); i++) {
      ProcessRecord r=mIsolatedProcesses.valueAt(i);
      if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        pw.println(""String_Node_Str"");
        printedAnything=true;
        printed=true;
        needSep=true;
      }
      pw.println(String.format(""String_Node_Str"",""String_Node_Str"",i,r.toString()));
    }
  }
  if (mLruProcesses.size() > 0) {
    if (needSep) {
      pw.println();
    }
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size());
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessActivityStart);
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessServiceStart);
    pw.println(""String_Node_Str"");
    dumpProcessOomList(pw,this,mLruProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,dumpPackage);
    needSep=true;
    printedAnything=true;
  }
  if (dumpAll || dumpPackage != null) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mPidsSelfLocked.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.valueAt(i);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mPidsSelfLocked.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mPidsSelfLocked.valueAt(i));
      }
    }
  }
  if (mForegroundProcesses.size() > 0) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mForegroundProcesses.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.get(mForegroundProcesses.valueAt(i).pid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mForegroundProcesses.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mForegroundProcesses.valueAt(i));
      }
    }
  }
  if (mPersistentStartingProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mPersistentStartingProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mRemovedProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mRemovedProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mProcessesOnHold.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mProcessesOnHold,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  needSep=dumpProcessesToGc(fd,pw,args,opti,needSep,dumpAll,dumpPackage);
  if (mProcessCrashTimes.getMap().size() > 0) {
    boolean printed=false;
    long now=SystemClock.uptimeMillis();
    final ArrayMap<String,SparseArray<Long>> pmap=mProcessCrashTimes.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<Long> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        TimeUtils.formatDuration(now - uids.valueAt(i),pw);
        pw.println(""String_Node_Str"");
      }
    }
  }
  if (mBadProcesses.getMap().size() > 0) {
    boolean printed=false;
    final ArrayMap<String,SparseArray<BadProcessInfo>> pmap=mBadProcesses.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<BadProcessInfo> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printedAnything=true;
        }
        BadProcessInfo info=uids.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        pw.println(info.time);
        if (info.shortMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.shortMsg);
        }
        if (info.longMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.longMsg);
        }
        if (info.stack != null) {
          pw.println(""String_Node_Str"");
          int lastPos=0;
          for (int pos=0; pos < info.stack.length(); pos++) {
            if (info.stack.charAt(pos) == '\n') {
              pw.print(""String_Node_Str"");
              pw.write(info.stack,lastPos,pos - lastPos);
              pw.println();
              lastPos=pos + 1;
            }
          }
          if (lastPos < info.stack.length()) {
            pw.print(""String_Node_Str"");
            pw.write(info.stack,lastPos,info.stack.length() - lastPos);
            pw.println();
          }
        }
      }
    }
  }
  if (dumpPackage == null) {
    pw.println();
    needSep=false;
    pw.println(""String_Node_Str"");
    for (int i=0; i < mStartedUsers.size(); i++) {
      UserStartedState uss=mStartedUsers.valueAt(i);
      pw.print(""String_Node_Str"");
      pw.print(uss.mHandle.getIdentifier());
      pw.print(""String_Node_Str"");
      uss.dump(""String_Node_Str"",pw);
    }
    pw.print(""String_Node_Str"");
    for (int i=0; i < mStartedUserArray.length; i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mStartedUserArray[i]);
    }
    pw.println(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    for (int i=0; i < mUserLru.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mUserLru.get(i));
    }
    pw.println(""String_Node_Str"");
    if (dumpAll) {
      pw.print(""String_Node_Str"");
      pw.println(Arrays.toString(mStartedUserArray));
    }
synchronized (mUserProfileGroupIdsSelfLocked) {
      if (mUserProfileGroupIdsSelfLocked.size() > 0) {
        pw.println(""String_Node_Str"");
        for (int i=0; i < mUserProfileGroupIdsSelfLocked.size(); i++) {
          pw.print(""String_Node_Str"");
          pw.print(mUserProfileGroupIdsSelfLocked.keyAt(i));
          pw.print(""String_Node_Str"");
          pw.println(mUserProfileGroupIdsSelfLocked.valueAt(i));
        }
      }
    }
  }
  if (mHomeProcess != null && (dumpPackage == null || mHomeProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHomeProcess);
  }
  if (mPreviousProcess != null && (dumpPackage == null || mPreviousProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mPreviousProcess);
  }
  if (dumpAll) {
    StringBuilder sb=new StringBuilder(128);
    sb.append(""String_Node_Str"");
    TimeUtils.formatDuration(mPreviousProcessVisibleTime,sb);
    pw.println(sb);
  }
  if (mHeavyWeightProcess != null && (dumpPackage == null || mHeavyWeightProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHeavyWeightProcess);
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + mConfiguration);
  }
  if (dumpAll) {
    pw.println(""String_Node_Str"" + getFocusedStack().mConfigWillChange);
    if (mCompatModePackages.getPackages().size() > 0) {
      boolean printed=false;
      for (      Map.Entry<String,Integer> entry : mCompatModePackages.getPackages().entrySet()) {
        String pkg=entry.getKey();
        int mode=entry.getValue();
        if (dumpPackage != null && !dumpPackage.equals(pkg)) {
          continue;
        }
        if (!printed) {
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pkg);
        pw.print(""String_Node_Str"");
        pw.print(mode);
        pw.println();
      }
    }
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + PowerManagerInternal.wakefulnessToString(mWakefulness));
    pw.println(""String_Node_Str"" + mSleeping + ""String_Node_Str""+ lockScreenShownToString());
    pw.println(""String_Node_Str"" + mShuttingDown + ""String_Node_Str""+ mRunningVoice);
  }
  if (mDebugApp != null || mOrigDebugApp != null || mDebugTransient || mOrigWaitForDebugger) {
    if (dumpPackage == null || dumpPackage.equals(mDebugApp) || dumpPackage.equals(mOrigDebugApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mDebugApp + ""String_Node_Str""+ mOrigDebugApp+ ""String_Node_Str""+ mDebugTransient+ ""String_Node_Str""+ mOrigWaitForDebugger);
    }
  }
  if (mOpenGlTraceApp != null) {
    if (dumpPackage == null || dumpPackage.equals(mOpenGlTraceApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mOpenGlTraceApp);
    }
  }
  if (mProfileApp != null || mProfileProc != null || mProfileFile != null || mProfileFd != null) {
    if (dumpPackage == null || dumpPackage.equals(mProfileApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mProfileApp + ""String_Node_Str""+ mProfileProc);
      pw.println(""String_Node_Str"" + mProfileFile + ""String_Node_Str""+ mProfileFd);
      pw.println(""String_Node_Str"" + mSamplingInterval + ""String_Node_Str""+ mAutoStopProfiler);
      pw.println(""String_Node_Str"" + mProfileType);
    }
  }
  if (dumpPackage == null) {
    if (mAlwaysFinishActivities || mController != null) {
      pw.println(""String_Node_Str"" + mAlwaysFinishActivities + ""String_Node_Str""+ mController);
    }
    if (dumpAll) {
      pw.println(""String_Node_Str"" + numPers);
      pw.println(""String_Node_Str"" + mProcessesReady + ""String_Node_Str""+ mSystemReady+ ""String_Node_Str""+ mBooted+ ""String_Node_Str""+ mFactoryTest);
      pw.println(""String_Node_Str"" + mBooting + ""String_Node_Str""+ mCallFinishBooting+ ""String_Node_Str""+ mBootAnimationComplete);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckRealtime,pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckUptime,pw);
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"" + mStackSupervisor.mGoingToSleep);
      pw.println(""String_Node_Str"" + mStackSupervisor.mLaunchingActivity);
      pw.println(""String_Node_Str"" + mAdjSeq + ""String_Node_Str""+ mLruSeq);
      pw.println(""String_Node_Str"" + mNumNonCachedProcs + ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ ""String_Node_Str""+ mNumCachedHiddenProcs+ ""String_Node_Str""+ mNumServiceProcs+ ""String_Node_Str""+ mNewNumServiceProcs);
      pw.println(""String_Node_Str"" + mAllowLowerMemLevel + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mLastNumProcesses);
      long now=SystemClock.uptimeMillis();
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(now,mLastIdleTime,pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(getLowRamTimeSinceIdle(now),pw);
      pw.println();
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}",0.9999274784248314
195860,"void generate(CharSequence source,int bufStart,int bufEnd,TextPaint paint,int outerWidth,TextDirectionHeuristic textDir,float spacingmult,float spacingadd,boolean includepad,boolean trackpad,float ellipsizedWidth,TextUtils.TruncateAt ellipsize){
  int[] breakOpp=null;
  final String localeLanguageTag=paint.getTextLocale().toLanguageTag();
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=mMeasured;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineLimit=mLineCount + 1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          int lmsFirstLine=getLineForOffset(spanned.getSpanStart(lms2));
          firstWidthLineLimit=Math.max(firstWidthLineLimit,lmsFirstLine + lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length != 0) {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    breakOpp=nLineBreakOpportunities(localeLanguageTag,chs,paraEnd - paraStart,breakOpp);
    int breakOppIndex=0;
    int width=firstWidth;
    float w=0;
    int here=paraStart;
    int ok=paraStart;
    float okWidth=w;
    int okAscent=0, okDescent=0, okTop=0, okBottom=0;
    int fit=paraStart;
    float fitWidth=w;
    int fitAscent=0, fitDescent=0, fitTop=0, fitBottom=0;
    float fitWidthGraphing=w;
    boolean hasTabOrEmoji=false;
    boolean hasTab=false;
    TabStops tabStops=null;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      int fmTop=fm.top;
      int fmBottom=fm.bottom;
      int fmAscent=fm.ascent;
      int fmDescent=fm.descent;
      for (int j=spanStart; j < spanEnd; j++) {
        char c=chs[j - paraStart];
        if (c == CHAR_NEW_LINE) {
        }
 else         if (c == CHAR_TAB) {
          if (hasTab == false) {
            hasTab=true;
            hasTabOrEmoji=true;
            if (spanned != null) {
              TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
              if (spans.length > 0) {
                tabStops=new TabStops(TAB_INCREMENT,spans);
              }
            }
          }
          if (tabStops != null) {
            w=tabStops.nextTab(w);
          }
 else {
            w=TabStops.nextDefaultStop(w,TAB_INCREMENT);
          }
        }
 else         if (c >= CHAR_FIRST_HIGH_SURROGATE && c <= CHAR_LAST_LOW_SURROGATE && j + 1 < spanEnd) {
          int emoji=Character.codePointAt(chs,j - paraStart);
          if (emoji >= MIN_EMOJI && emoji <= MAX_EMOJI) {
            Bitmap bm=EMOJI_FACTORY.getBitmapFromAndroidPua(emoji);
            if (bm != null) {
              Paint whichPaint;
              if (spanned == null) {
                whichPaint=paint;
              }
 else {
                whichPaint=mWorkPaint;
              }
              float wid=bm.getWidth() * -whichPaint.ascent() / bm.getHeight();
              w+=wid;
              hasTabOrEmoji=true;
              j++;
            }
 else {
              w+=widths[j - paraStart];
            }
          }
 else {
            w+=widths[j - paraStart];
          }
        }
 else {
          w+=widths[j - paraStart];
        }
        boolean isSpaceOrTab=c == CHAR_SPACE || c == CHAR_TAB || c == CHAR_ZWSP;
        if (w <= width || isSpaceOrTab) {
          fitWidth=w;
          if (!isSpaceOrTab) {
            fitWidthGraphing=w;
          }
          fit=j + 1;
          if (fmTop < fitTop)           fitTop=fmTop;
          if (fmAscent < fitAscent)           fitAscent=fmAscent;
          if (fmDescent > fitDescent)           fitDescent=fmDescent;
          if (fmBottom > fitBottom)           fitBottom=fmBottom;
          while (breakOpp[breakOppIndex] != -1 && breakOpp[breakOppIndex] < j - paraStart + 1) {
            breakOppIndex++;
          }
          boolean isLineBreak=breakOppIndex < breakOpp.length && breakOpp[breakOppIndex] == j - paraStart + 1;
          if (isLineBreak) {
            okWidth=fitWidthGraphing;
            ok=j + 1;
            if (fitTop < okTop)             okTop=fitTop;
            if (fitAscent < okAscent)             okAscent=fitAscent;
            if (fitDescent > okDescent)             okDescent=fitDescent;
            if (fitBottom > okBottom)             okBottom=fitBottom;
          }
        }
 else {
          int endPos;
          int above, below, top, bottom;
          float currentTextWidth;
          if (ok != here) {
            endPos=ok;
            above=okAscent;
            below=okDescent;
            top=okTop;
            bottom=okBottom;
            currentTextWidth=okWidth;
          }
 else           if (fit != here) {
            endPos=fit;
            above=fitAscent;
            below=fitDescent;
            top=fitTop;
            bottom=fitBottom;
            currentTextWidth=fitWidth;
          }
 else {
            endPos=here + 1;
            while (endPos < spanEnd && widths[endPos - paraStart] == 0) {
              endPos++;
            }
            above=fmAscent;
            below=fmDescent;
            top=fmTop;
            bottom=fmBottom;
            currentTextWidth=widths[here - paraStart];
          }
          v=out(source,here,endPos,above,below,top,bottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,currentTextWidth,paint,true);
          here=endPos;
          j=here - 1;
          ok=fit=here;
          w=0;
          fitWidthGraphing=w;
          fitAscent=fitDescent=fitTop=fitBottom=0;
          okAscent=okDescent=okTop=okBottom=0;
          if (--firstWidthLineLimit <= 0) {
            width=restWidth;
          }
          if (here < spanStart) {
            measured.setPos(here);
            spanEnd=here;
            break;
          }
          if (mLineCount >= mMaximumVisibleLineCount) {
            return;
          }
        }
      }
    }
    if (paraEnd != here && mLineCount < mMaximumVisibleLineCount) {
      if ((fitTop | fitBottom | fitDescent| fitAscent) == 0) {
        paint.getFontMetricsInt(fm);
        fitTop=fm.top;
        fitBottom=fm.bottom;
        fitAscent=fm.ascent;
        fitDescent=fm.descent;
      }
      v=out(source,here,paraEnd,fitAscent,fitDescent,fitTop,fitBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,w,paint,paraEnd != bufEnd);
    }
    paraStart=paraEnd;
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufStart,bufEnd,textDir);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,false,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}","void generate(CharSequence source,int bufStart,int bufEnd,TextPaint paint,int outerWidth,TextDirectionHeuristic textDir,float spacingmult,float spacingadd,boolean includepad,boolean trackpad,float ellipsizedWidth,TextUtils.TruncateAt ellipsize){
  int[] breakOpp=null;
  final String localeLanguageTag=paint.getTextLocale().toLanguageTag();
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=mMeasured;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineLimit=mLineCount + 1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          int lmsFirstLine=getLineForOffset(spanned.getSpanStart(lms2));
          firstWidthLineLimit=Math.max(firstWidthLineLimit,lmsFirstLine + lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length != 0) {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    breakOpp=nLineBreakOpportunities(localeLanguageTag,chs,paraEnd - paraStart,breakOpp);
    int breakOppIndex=0;
    int width=firstWidth;
    float w=0;
    int here=paraStart;
    int ok=paraStart;
    float okWidth=w;
    int okAscent=0, okDescent=0, okTop=0, okBottom=0;
    int fit=paraStart;
    float fitWidth=w;
    int fitAscent=0, fitDescent=0, fitTop=0, fitBottom=0;
    float fitWidthGraphing=w;
    boolean hasTabOrEmoji=false;
    boolean hasTab=false;
    TabStops tabStops=null;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      int fmTop=fm.top;
      int fmBottom=fm.bottom;
      int fmAscent=fm.ascent;
      int fmDescent=fm.descent;
      for (int j=spanStart; j < spanEnd; j++) {
        char c=chs[j - paraStart];
        if (c == CHAR_NEW_LINE) {
        }
 else         if (c == CHAR_TAB) {
          if (hasTab == false) {
            hasTab=true;
            hasTabOrEmoji=true;
            if (spanned != null) {
              TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
              if (spans.length > 0) {
                tabStops=new TabStops(TAB_INCREMENT,spans);
              }
            }
          }
          if (tabStops != null) {
            w=tabStops.nextTab(w);
          }
 else {
            w=TabStops.nextDefaultStop(w,TAB_INCREMENT);
          }
        }
 else         if (c >= CHAR_FIRST_HIGH_SURROGATE && c <= CHAR_LAST_LOW_SURROGATE && j + 1 < spanEnd) {
          int emoji=Character.codePointAt(chs,j - paraStart);
          if (emoji >= MIN_EMOJI && emoji <= MAX_EMOJI) {
            Bitmap bm=EMOJI_FACTORY.getBitmapFromAndroidPua(emoji);
            if (bm != null) {
              Paint whichPaint;
              if (spanned == null) {
                whichPaint=paint;
              }
 else {
                whichPaint=mWorkPaint;
              }
              float wid=bm.getWidth() * -whichPaint.ascent() / bm.getHeight();
              w+=wid;
              hasTabOrEmoji=true;
              j++;
            }
 else {
              w+=widths[j - paraStart];
            }
          }
 else {
            w+=widths[j - paraStart];
          }
        }
 else {
          w+=widths[j - paraStart];
        }
        boolean isSpaceOrTab=c == CHAR_SPACE || c == CHAR_TAB || c == CHAR_ZWSP;
        if (w <= width || isSpaceOrTab) {
          fitWidth=w;
          if (!isSpaceOrTab) {
            fitWidthGraphing=w;
          }
          fit=j + 1;
          if (fmTop < fitTop)           fitTop=fmTop;
          if (fmAscent < fitAscent)           fitAscent=fmAscent;
          if (fmDescent > fitDescent)           fitDescent=fmDescent;
          if (fmBottom > fitBottom)           fitBottom=fmBottom;
          while (breakOpp[breakOppIndex] != -1 && breakOpp[breakOppIndex] < j - paraStart + 1) {
            breakOppIndex++;
          }
          boolean isLineBreak=breakOppIndex < breakOpp.length && breakOpp[breakOppIndex] == j - paraStart + 1;
          if (isLineBreak) {
            okWidth=fitWidthGraphing;
            ok=j + 1;
            if (fitTop < okTop)             okTop=fitTop;
            if (fitAscent < okAscent)             okAscent=fitAscent;
            if (fitDescent > okDescent)             okDescent=fitDescent;
            if (fitBottom > okBottom)             okBottom=fitBottom;
          }
        }
 else {
          int endPos;
          int above, below, top, bottom;
          float currentTextWidth;
          if (ok != here) {
            endPos=ok;
            above=okAscent;
            below=okDescent;
            top=okTop;
            bottom=okBottom;
            currentTextWidth=okWidth;
          }
 else           if (fit != here) {
            endPos=fit;
            above=fitAscent;
            below=fitDescent;
            top=fitTop;
            bottom=fitBottom;
            currentTextWidth=fitWidth;
          }
 else {
            endPos=here + 1;
            while (endPos < spanEnd && widths[endPos - paraStart] == 0) {
              endPos++;
            }
            above=fmAscent;
            below=fmDescent;
            top=fmTop;
            bottom=fmBottom;
            currentTextWidth=widths[here - paraStart];
          }
          int ellipseEnd=endPos;
          if (mMaximumVisibleLineCount == 1 && ellipsize == TextUtils.TruncateAt.MIDDLE) {
            ellipseEnd=paraEnd;
          }
          v=out(source,here,ellipseEnd,above,below,top,bottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,currentTextWidth,paint,true);
          here=endPos;
          j=here - 1;
          ok=fit=here;
          w=0;
          fitWidthGraphing=w;
          fitAscent=fitDescent=fitTop=fitBottom=0;
          okAscent=okDescent=okTop=okBottom=0;
          if (--firstWidthLineLimit <= 0) {
            width=restWidth;
          }
          if (here < spanStart) {
            measured.setPos(here);
            spanEnd=here;
            break;
          }
          if (mLineCount >= mMaximumVisibleLineCount) {
            return;
          }
        }
      }
    }
    if (paraEnd != here && mLineCount < mMaximumVisibleLineCount) {
      if ((fitTop | fitBottom | fitDescent| fitAscent) == 0) {
        paint.getFontMetricsInt(fm);
        fitTop=fm.top;
        fitBottom=fm.bottom;
        fitAscent=fm.ascent;
        fitDescent=fm.descent;
      }
      v=out(source,here,paraEnd,fitAscent,fitDescent,fitTop,fitBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,w,paint,paraEnd != bufEnd);
    }
    paraStart=paraEnd;
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufStart,bufEnd,textDir);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,false,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}",0.989995602462621
195861,"private void calculateEllipsis(int lineStart,int lineEnd,float[] widths,int widthStart,float avail,TextUtils.TruncateAt where,int line,float textWidth,TextPaint paint,boolean forceEllipsis){
  if (textWidth <= avail && !forceEllipsis) {
    mLines[mColumns * line + ELLIPSIS_START]=0;
    mLines[mColumns * line + ELLIPSIS_COUNT]=0;
    return;
  }
  float ellipsisWidth=paint.measureText((where == TextUtils.TruncateAt.END_SMALL) ? ELLIPSIS_TWO_DOTS : ELLIPSIS_NORMAL,0,1);
  int ellipsisStart=0;
  int ellipsisCount=0;
  int len=lineEnd - lineStart;
  if (where == TextUtils.TruncateAt.START) {
    if (mMaximumVisibleLineCount == 1) {
      float sum=0;
      int i;
      for (i=len; i >= 0; i--) {
        float w=widths[i - 1 + lineStart - widthStart];
        if (w + sum + ellipsisWidth > avail) {
          break;
        }
        sum+=w;
      }
      ellipsisStart=0;
      ellipsisCount=i;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
 else   if (where == TextUtils.TruncateAt.END || where == TextUtils.TruncateAt.MARQUEE || where == TextUtils.TruncateAt.END_SMALL) {
    float sum=0;
    int i;
    for (i=0; i < len; i++) {
      float w=widths[i + lineStart - widthStart];
      if (w + sum + ellipsisWidth > avail) {
        break;
      }
      sum+=w;
    }
    ellipsisStart=i;
    ellipsisCount=len - i;
    if (forceEllipsis && ellipsisCount == 0 && len > 0) {
      ellipsisStart=len - 1;
      ellipsisCount=1;
    }
  }
 else {
    if (mMaximumVisibleLineCount == 1) {
      float lsum=0, rsum=0;
      int left=0, right=len;
      float ravail=(avail - ellipsisWidth) / 2;
      for (right=len; right >= 0; right--) {
        float w=widths[right - 1 + lineStart - widthStart];
        if (w + rsum > ravail) {
          break;
        }
        rsum+=w;
      }
      float lavail=avail - ellipsisWidth - rsum;
      for (left=0; left < right; left++) {
        float w=widths[left + lineStart - widthStart];
        if (w + lsum > lavail) {
          break;
        }
        lsum+=w;
      }
      ellipsisStart=left;
      ellipsisCount=right - left;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
  mLines[mColumns * line + ELLIPSIS_START]=ellipsisStart;
  mLines[mColumns * line + ELLIPSIS_COUNT]=ellipsisCount;
}","private void calculateEllipsis(int lineStart,int lineEnd,float[] widths,int widthStart,float avail,TextUtils.TruncateAt where,int line,float textWidth,TextPaint paint,boolean forceEllipsis){
  if (textWidth <= avail && !forceEllipsis) {
    mLines[mColumns * line + ELLIPSIS_START]=0;
    mLines[mColumns * line + ELLIPSIS_COUNT]=0;
    return;
  }
  float ellipsisWidth=paint.measureText((where == TextUtils.TruncateAt.END_SMALL) ? ELLIPSIS_TWO_DOTS : ELLIPSIS_NORMAL,0,1);
  int ellipsisStart=0;
  int ellipsisCount=0;
  int len=lineEnd - lineStart;
  if (where == TextUtils.TruncateAt.START) {
    if (mMaximumVisibleLineCount == 1) {
      float sum=0;
      int i;
      for (i=len; i >= 0; i--) {
        float w=widths[i - 1 + lineStart - widthStart];
        if (w + sum + ellipsisWidth > avail) {
          break;
        }
        sum+=w;
      }
      ellipsisStart=0;
      ellipsisCount=i;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
 else   if (where == TextUtils.TruncateAt.END || where == TextUtils.TruncateAt.MARQUEE || where == TextUtils.TruncateAt.END_SMALL) {
    float sum=0;
    int i;
    for (i=0; i < len; i++) {
      float w=widths[i + lineStart - widthStart];
      if (w + sum + ellipsisWidth > avail) {
        break;
      }
      sum+=w;
    }
    ellipsisStart=i;
    ellipsisCount=len - i;
    if (forceEllipsis && ellipsisCount == 0 && len > 0) {
      ellipsisStart=len - 1;
      ellipsisCount=1;
    }
  }
 else {
    if (mMaximumVisibleLineCount == 1) {
      float lsum=0, rsum=0;
      int left=0, right=len;
      float ravail=(avail - ellipsisWidth) / 2;
      for (right=len; right > 0; right--) {
        float w=widths[right - 1 + lineStart - widthStart];
        if (w + rsum > ravail) {
          break;
        }
        rsum+=w;
      }
      float lavail=avail - ellipsisWidth - rsum;
      for (left=0; left < right; left++) {
        float w=widths[left + lineStart - widthStart];
        if (w + lsum > lavail) {
          break;
        }
        lsum+=w;
      }
      ellipsisStart=left;
      ellipsisCount=right - left;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
  mLines[mColumns * line + ELLIPSIS_START]=ellipsisStart;
  mLines[mColumns * line + ELLIPSIS_COUNT]=ellipsisCount;
}",0.9997896065642752
195862,"private static Calendar tomorrowMidnight(){
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(System.currentTimeMillis());
  calendar.set(Calendar.HOUR_OF_DAY,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MILLISECOND,0);
  calendar.add(Calendar.DAY_OF_MONTH,1);
  return calendar;
}","private static Calendar tomorrowMidnight(){
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(System.currentTimeMillis());
  calendar.set(Calendar.HOUR_OF_DAY,3);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MILLISECOND,0);
  calendar.add(Calendar.DAY_OF_MONTH,1);
  return calendar;
}",0.9971830985915492
195863,"@Override public boolean onStartJob(JobParameters params){
  mJobParams=params;
  MountService ms=MountService.sSelf;
  if (ms != null) {
synchronized (mFinishCallback) {
      mStarted=true;
    }
    ms.runIdleMaintenance(mFinishCallback);
  }
  return ms != null;
}","@Override public boolean onStartJob(JobParameters params){
  try {
    ActivityManagerNative.getDefault().performIdleMaintenance();
  }
 catch (  RemoteException e) {
  }
  mJobParams=params;
  MountService ms=MountService.sSelf;
  if (ms != null) {
synchronized (mFinishCallback) {
      mStarted=true;
    }
    ms.runIdleMaintenance(mFinishCallback);
  }
  return ms != null;
}",0.8271604938271605
195864,"void dumpProcessesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  int numPers=0;
  pw.println(""String_Node_Str"");
  if (dumpAll) {
    final int NP=mProcessNames.getMap().size();
    for (int ip=0; ip < NP; ip++) {
      SparseArray<ProcessRecord> procs=mProcessNames.getMap().valueAt(ip);
      final int NA=procs.size();
      for (int ia=0; ia < NA; ia++) {
        ProcessRecord r=procs.valueAt(ia);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!needSep) {
          pw.println(""String_Node_Str"");
          needSep=true;
          printedAnything=true;
        }
        pw.print(r.persistent ? ""String_Node_Str"" : ""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(procs.keyAt(ia));
        pw.print(""String_Node_Str"");
        pw.println(r);
        r.dump(pw,""String_Node_Str"");
        if (r.persistent) {
          numPers++;
        }
      }
    }
  }
  if (mIsolatedProcesses.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mIsolatedProcesses.size(); i++) {
      ProcessRecord r=mIsolatedProcesses.valueAt(i);
      if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        pw.println(""String_Node_Str"");
        printedAnything=true;
        printed=true;
        needSep=true;
      }
      pw.println(String.format(""String_Node_Str"",""String_Node_Str"",i,r.toString()));
    }
  }
  if (mLruProcesses.size() > 0) {
    if (needSep) {
      pw.println();
    }
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size());
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessActivityStart);
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessServiceStart);
    pw.println(""String_Node_Str"");
    dumpProcessOomList(pw,this,mLruProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,dumpPackage);
    needSep=true;
    printedAnything=true;
  }
  if (dumpAll || dumpPackage != null) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mPidsSelfLocked.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.valueAt(i);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mPidsSelfLocked.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mPidsSelfLocked.valueAt(i));
      }
    }
  }
  if (mForegroundProcesses.size() > 0) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mForegroundProcesses.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.get(mForegroundProcesses.valueAt(i).pid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mForegroundProcesses.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mForegroundProcesses.valueAt(i));
      }
    }
  }
  if (mPersistentStartingProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mPersistentStartingProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mRemovedProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mRemovedProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mProcessesOnHold.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mProcessesOnHold,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  needSep=dumpProcessesToGc(fd,pw,args,opti,needSep,dumpAll,dumpPackage);
  if (mProcessCrashTimes.getMap().size() > 0) {
    boolean printed=false;
    long now=SystemClock.uptimeMillis();
    final ArrayMap<String,SparseArray<Long>> pmap=mProcessCrashTimes.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<Long> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        TimeUtils.formatDuration(now - uids.valueAt(i),pw);
        pw.println(""String_Node_Str"");
      }
    }
  }
  if (mBadProcesses.getMap().size() > 0) {
    boolean printed=false;
    final ArrayMap<String,SparseArray<BadProcessInfo>> pmap=mBadProcesses.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<BadProcessInfo> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printedAnything=true;
        }
        BadProcessInfo info=uids.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        pw.println(info.time);
        if (info.shortMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.shortMsg);
        }
        if (info.longMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.longMsg);
        }
        if (info.stack != null) {
          pw.println(""String_Node_Str"");
          int lastPos=0;
          for (int pos=0; pos < info.stack.length(); pos++) {
            if (info.stack.charAt(pos) == '\n') {
              pw.print(""String_Node_Str"");
              pw.write(info.stack,lastPos,pos - lastPos);
              pw.println();
              lastPos=pos + 1;
            }
          }
          if (lastPos < info.stack.length()) {
            pw.print(""String_Node_Str"");
            pw.write(info.stack,lastPos,info.stack.length() - lastPos);
            pw.println();
          }
        }
      }
    }
  }
  if (dumpPackage == null) {
    pw.println();
    needSep=false;
    pw.println(""String_Node_Str"");
    for (int i=0; i < mStartedUsers.size(); i++) {
      UserStartedState uss=mStartedUsers.valueAt(i);
      pw.print(""String_Node_Str"");
      pw.print(uss.mHandle.getIdentifier());
      pw.print(""String_Node_Str"");
      uss.dump(""String_Node_Str"",pw);
    }
    pw.print(""String_Node_Str"");
    for (int i=0; i < mStartedUserArray.length; i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mStartedUserArray[i]);
    }
    pw.println(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    for (int i=0; i < mUserLru.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mUserLru.get(i));
    }
    pw.println(""String_Node_Str"");
    if (dumpAll) {
      pw.print(""String_Node_Str"");
      pw.println(Arrays.toString(mStartedUserArray));
    }
synchronized (mUserProfileGroupIdsSelfLocked) {
      if (mUserProfileGroupIdsSelfLocked.size() > 0) {
        pw.println(""String_Node_Str"");
        for (int i=0; i < mUserProfileGroupIdsSelfLocked.size(); i++) {
          pw.print(""String_Node_Str"");
          pw.print(mUserProfileGroupIdsSelfLocked.keyAt(i));
          pw.print(""String_Node_Str"");
          pw.println(mUserProfileGroupIdsSelfLocked.valueAt(i));
        }
      }
    }
  }
  if (mHomeProcess != null && (dumpPackage == null || mHomeProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHomeProcess);
  }
  if (mPreviousProcess != null && (dumpPackage == null || mPreviousProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mPreviousProcess);
  }
  if (dumpAll) {
    StringBuilder sb=new StringBuilder(128);
    sb.append(""String_Node_Str"");
    TimeUtils.formatDuration(mPreviousProcessVisibleTime,sb);
    pw.println(sb);
  }
  if (mHeavyWeightProcess != null && (dumpPackage == null || mHeavyWeightProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHeavyWeightProcess);
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + mConfiguration);
  }
  if (dumpAll) {
    pw.println(""String_Node_Str"" + getFocusedStack().mConfigWillChange);
    if (mCompatModePackages.getPackages().size() > 0) {
      boolean printed=false;
      for (      Map.Entry<String,Integer> entry : mCompatModePackages.getPackages().entrySet()) {
        String pkg=entry.getKey();
        int mode=entry.getValue();
        if (dumpPackage != null && !dumpPackage.equals(pkg)) {
          continue;
        }
        if (!printed) {
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pkg);
        pw.print(""String_Node_Str"");
        pw.print(mode);
        pw.println();
      }
    }
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + PowerManagerInternal.wakefulnessToString(mWakefulness));
    pw.println(""String_Node_Str"" + mSleeping + ""String_Node_Str""+ lockScreenShownToString());
    pw.print(""String_Node_Str"" + mShuttingDown + ""String_Node_Str""+ mRunningVoice);
  }
  if (mDebugApp != null || mOrigDebugApp != null || mDebugTransient || mOrigWaitForDebugger) {
    if (dumpPackage == null || dumpPackage.equals(mDebugApp) || dumpPackage.equals(mOrigDebugApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mDebugApp + ""String_Node_Str""+ mOrigDebugApp+ ""String_Node_Str""+ mDebugTransient+ ""String_Node_Str""+ mOrigWaitForDebugger);
    }
  }
  if (mOpenGlTraceApp != null) {
    if (dumpPackage == null || dumpPackage.equals(mOpenGlTraceApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mOpenGlTraceApp);
    }
  }
  if (mProfileApp != null || mProfileProc != null || mProfileFile != null || mProfileFd != null) {
    if (dumpPackage == null || dumpPackage.equals(mProfileApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mProfileApp + ""String_Node_Str""+ mProfileProc);
      pw.println(""String_Node_Str"" + mProfileFile + ""String_Node_Str""+ mProfileFd);
      pw.println(""String_Node_Str"" + mSamplingInterval + ""String_Node_Str""+ mAutoStopProfiler);
      pw.println(""String_Node_Str"" + mProfileType);
    }
  }
  if (dumpPackage == null) {
    if (mAlwaysFinishActivities || mController != null) {
      pw.println(""String_Node_Str"" + mAlwaysFinishActivities + ""String_Node_Str""+ mController);
    }
    if (dumpAll) {
      pw.println(""String_Node_Str"" + numPers);
      pw.println(""String_Node_Str"" + mProcessesReady + ""String_Node_Str""+ mSystemReady+ ""String_Node_Str""+ mBooted+ ""String_Node_Str""+ mFactoryTest);
      pw.println(""String_Node_Str"" + mBooting + ""String_Node_Str""+ mCallFinishBooting+ ""String_Node_Str""+ mBootAnimationComplete);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckRealtime,pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckUptime,pw);
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"" + mStackSupervisor.mGoingToSleep);
      pw.println(""String_Node_Str"" + mStackSupervisor.mLaunchingActivity);
      pw.println(""String_Node_Str"" + mAdjSeq + ""String_Node_Str""+ mLruSeq);
      pw.println(""String_Node_Str"" + mNumNonCachedProcs + ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ ""String_Node_Str""+ mNumCachedHiddenProcs+ ""String_Node_Str""+ mNumServiceProcs+ ""String_Node_Str""+ mNewNumServiceProcs);
      pw.println(""String_Node_Str"" + mAllowLowerMemLevel + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mLastNumProcesses);
      long now=SystemClock.uptimeMillis();
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(now,mLastIdleTime,pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(getLowRamTimeSinceIdle(now),pw);
      pw.println();
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}","void dumpProcessesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  int numPers=0;
  pw.println(""String_Node_Str"");
  if (dumpAll) {
    final int NP=mProcessNames.getMap().size();
    for (int ip=0; ip < NP; ip++) {
      SparseArray<ProcessRecord> procs=mProcessNames.getMap().valueAt(ip);
      final int NA=procs.size();
      for (int ia=0; ia < NA; ia++) {
        ProcessRecord r=procs.valueAt(ia);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!needSep) {
          pw.println(""String_Node_Str"");
          needSep=true;
          printedAnything=true;
        }
        pw.print(r.persistent ? ""String_Node_Str"" : ""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(procs.keyAt(ia));
        pw.print(""String_Node_Str"");
        pw.println(r);
        r.dump(pw,""String_Node_Str"");
        if (r.persistent) {
          numPers++;
        }
      }
    }
  }
  if (mIsolatedProcesses.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mIsolatedProcesses.size(); i++) {
      ProcessRecord r=mIsolatedProcesses.valueAt(i);
      if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        pw.println(""String_Node_Str"");
        printedAnything=true;
        printed=true;
        needSep=true;
      }
      pw.println(String.format(""String_Node_Str"",""String_Node_Str"",i,r.toString()));
    }
  }
  if (mLruProcesses.size() > 0) {
    if (needSep) {
      pw.println();
    }
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size());
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessActivityStart);
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessServiceStart);
    pw.println(""String_Node_Str"");
    dumpProcessOomList(pw,this,mLruProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,dumpPackage);
    needSep=true;
    printedAnything=true;
  }
  if (dumpAll || dumpPackage != null) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mPidsSelfLocked.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.valueAt(i);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mPidsSelfLocked.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mPidsSelfLocked.valueAt(i));
      }
    }
  }
  if (mForegroundProcesses.size() > 0) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mForegroundProcesses.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.get(mForegroundProcesses.valueAt(i).pid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mForegroundProcesses.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mForegroundProcesses.valueAt(i));
      }
    }
  }
  if (mPersistentStartingProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mPersistentStartingProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mRemovedProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mRemovedProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mProcessesOnHold.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mProcessesOnHold,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  needSep=dumpProcessesToGc(fd,pw,args,opti,needSep,dumpAll,dumpPackage);
  if (mProcessCrashTimes.getMap().size() > 0) {
    boolean printed=false;
    long now=SystemClock.uptimeMillis();
    final ArrayMap<String,SparseArray<Long>> pmap=mProcessCrashTimes.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<Long> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        TimeUtils.formatDuration(now - uids.valueAt(i),pw);
        pw.println(""String_Node_Str"");
      }
    }
  }
  if (mBadProcesses.getMap().size() > 0) {
    boolean printed=false;
    final ArrayMap<String,SparseArray<BadProcessInfo>> pmap=mBadProcesses.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<BadProcessInfo> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printedAnything=true;
        }
        BadProcessInfo info=uids.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        pw.println(info.time);
        if (info.shortMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.shortMsg);
        }
        if (info.longMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.longMsg);
        }
        if (info.stack != null) {
          pw.println(""String_Node_Str"");
          int lastPos=0;
          for (int pos=0; pos < info.stack.length(); pos++) {
            if (info.stack.charAt(pos) == '\n') {
              pw.print(""String_Node_Str"");
              pw.write(info.stack,lastPos,pos - lastPos);
              pw.println();
              lastPos=pos + 1;
            }
          }
          if (lastPos < info.stack.length()) {
            pw.print(""String_Node_Str"");
            pw.write(info.stack,lastPos,info.stack.length() - lastPos);
            pw.println();
          }
        }
      }
    }
  }
  if (dumpPackage == null) {
    pw.println();
    needSep=false;
    pw.println(""String_Node_Str"");
    for (int i=0; i < mStartedUsers.size(); i++) {
      UserStartedState uss=mStartedUsers.valueAt(i);
      pw.print(""String_Node_Str"");
      pw.print(uss.mHandle.getIdentifier());
      pw.print(""String_Node_Str"");
      uss.dump(""String_Node_Str"",pw);
    }
    pw.print(""String_Node_Str"");
    for (int i=0; i < mStartedUserArray.length; i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mStartedUserArray[i]);
    }
    pw.println(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    for (int i=0; i < mUserLru.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mUserLru.get(i));
    }
    pw.println(""String_Node_Str"");
    if (dumpAll) {
      pw.print(""String_Node_Str"");
      pw.println(Arrays.toString(mStartedUserArray));
    }
synchronized (mUserProfileGroupIdsSelfLocked) {
      if (mUserProfileGroupIdsSelfLocked.size() > 0) {
        pw.println(""String_Node_Str"");
        for (int i=0; i < mUserProfileGroupIdsSelfLocked.size(); i++) {
          pw.print(""String_Node_Str"");
          pw.print(mUserProfileGroupIdsSelfLocked.keyAt(i));
          pw.print(""String_Node_Str"");
          pw.println(mUserProfileGroupIdsSelfLocked.valueAt(i));
        }
      }
    }
  }
  if (mHomeProcess != null && (dumpPackage == null || mHomeProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHomeProcess);
  }
  if (mPreviousProcess != null && (dumpPackage == null || mPreviousProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mPreviousProcess);
  }
  if (dumpAll) {
    StringBuilder sb=new StringBuilder(128);
    sb.append(""String_Node_Str"");
    TimeUtils.formatDuration(mPreviousProcessVisibleTime,sb);
    pw.println(sb);
  }
  if (mHeavyWeightProcess != null && (dumpPackage == null || mHeavyWeightProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHeavyWeightProcess);
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + mConfiguration);
  }
  if (dumpAll) {
    pw.println(""String_Node_Str"" + getFocusedStack().mConfigWillChange);
    if (mCompatModePackages.getPackages().size() > 0) {
      boolean printed=false;
      for (      Map.Entry<String,Integer> entry : mCompatModePackages.getPackages().entrySet()) {
        String pkg=entry.getKey();
        int mode=entry.getValue();
        if (dumpPackage != null && !dumpPackage.equals(pkg)) {
          continue;
        }
        if (!printed) {
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pkg);
        pw.print(""String_Node_Str"");
        pw.print(mode);
        pw.println();
      }
    }
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + PowerManagerInternal.wakefulnessToString(mWakefulness));
    pw.println(""String_Node_Str"" + mSleeping + ""String_Node_Str""+ lockScreenShownToString());
    pw.println(""String_Node_Str"" + mShuttingDown + ""String_Node_Str""+ mRunningVoice);
  }
  if (mDebugApp != null || mOrigDebugApp != null || mDebugTransient || mOrigWaitForDebugger) {
    if (dumpPackage == null || dumpPackage.equals(mDebugApp) || dumpPackage.equals(mOrigDebugApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mDebugApp + ""String_Node_Str""+ mOrigDebugApp+ ""String_Node_Str""+ mDebugTransient+ ""String_Node_Str""+ mOrigWaitForDebugger);
    }
  }
  if (mOpenGlTraceApp != null) {
    if (dumpPackage == null || dumpPackage.equals(mOpenGlTraceApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mOpenGlTraceApp);
    }
  }
  if (mProfileApp != null || mProfileProc != null || mProfileFile != null || mProfileFd != null) {
    if (dumpPackage == null || dumpPackage.equals(mProfileApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mProfileApp + ""String_Node_Str""+ mProfileProc);
      pw.println(""String_Node_Str"" + mProfileFile + ""String_Node_Str""+ mProfileFd);
      pw.println(""String_Node_Str"" + mSamplingInterval + ""String_Node_Str""+ mAutoStopProfiler);
      pw.println(""String_Node_Str"" + mProfileType);
    }
  }
  if (dumpPackage == null) {
    if (mAlwaysFinishActivities || mController != null) {
      pw.println(""String_Node_Str"" + mAlwaysFinishActivities + ""String_Node_Str""+ mController);
    }
    if (dumpAll) {
      pw.println(""String_Node_Str"" + numPers);
      pw.println(""String_Node_Str"" + mProcessesReady + ""String_Node_Str""+ mSystemReady+ ""String_Node_Str""+ mBooted+ ""String_Node_Str""+ mFactoryTest);
      pw.println(""String_Node_Str"" + mBooting + ""String_Node_Str""+ mCallFinishBooting+ ""String_Node_Str""+ mBootAnimationComplete);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckRealtime,pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckUptime,pw);
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"" + mStackSupervisor.mGoingToSleep);
      pw.println(""String_Node_Str"" + mStackSupervisor.mLaunchingActivity);
      pw.println(""String_Node_Str"" + mAdjSeq + ""String_Node_Str""+ mLruSeq);
      pw.println(""String_Node_Str"" + mNumNonCachedProcs + ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ ""String_Node_Str""+ mNumCachedHiddenProcs+ ""String_Node_Str""+ mNumServiceProcs+ ""String_Node_Str""+ mNewNumServiceProcs);
      pw.println(""String_Node_Str"" + mAllowLowerMemLevel + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mLastNumProcesses);
      long now=SystemClock.uptimeMillis();
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(now,mLastIdleTime,pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(getLowRamTimeSinceIdle(now),pw);
      pw.println();
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}",0.9999274784248314
195865,"private static Calendar tomorrowMidnight(){
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(System.currentTimeMillis());
  calendar.set(Calendar.HOUR_OF_DAY,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MILLISECOND,0);
  calendar.add(Calendar.DAY_OF_MONTH,1);
  return calendar;
}","private static Calendar tomorrowMidnight(){
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(System.currentTimeMillis());
  calendar.set(Calendar.HOUR_OF_DAY,3);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MILLISECOND,0);
  calendar.add(Calendar.DAY_OF_MONTH,1);
  return calendar;
}",0.9971830985915492
195866,"@Override public boolean onStartJob(JobParameters params){
  mJobParams=params;
  MountService ms=MountService.sSelf;
  if (ms != null) {
synchronized (mFinishCallback) {
      mStarted=true;
    }
    ms.runIdleMaintenance(mFinishCallback);
  }
  return ms != null;
}","@Override public boolean onStartJob(JobParameters params){
  try {
    ActivityManagerNative.getDefault().performIdleMaintenance();
  }
 catch (  RemoteException e) {
  }
  mJobParams=params;
  MountService ms=MountService.sSelf;
  if (ms != null) {
synchronized (mFinishCallback) {
      mStarted=true;
    }
    ms.runIdleMaintenance(mFinishCallback);
  }
  return ms != null;
}",0.8271604938271605
195867,"void dumpProcessesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  int numPers=0;
  pw.println(""String_Node_Str"");
  if (dumpAll) {
    final int NP=mProcessNames.getMap().size();
    for (int ip=0; ip < NP; ip++) {
      SparseArray<ProcessRecord> procs=mProcessNames.getMap().valueAt(ip);
      final int NA=procs.size();
      for (int ia=0; ia < NA; ia++) {
        ProcessRecord r=procs.valueAt(ia);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!needSep) {
          pw.println(""String_Node_Str"");
          needSep=true;
          printedAnything=true;
        }
        pw.print(r.persistent ? ""String_Node_Str"" : ""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(procs.keyAt(ia));
        pw.print(""String_Node_Str"");
        pw.println(r);
        r.dump(pw,""String_Node_Str"");
        if (r.persistent) {
          numPers++;
        }
      }
    }
  }
  if (mIsolatedProcesses.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mIsolatedProcesses.size(); i++) {
      ProcessRecord r=mIsolatedProcesses.valueAt(i);
      if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        pw.println(""String_Node_Str"");
        printedAnything=true;
        printed=true;
        needSep=true;
      }
      pw.println(String.format(""String_Node_Str"",""String_Node_Str"",i,r.toString()));
    }
  }
  if (mLruProcesses.size() > 0) {
    if (needSep) {
      pw.println();
    }
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size());
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessActivityStart);
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessServiceStart);
    pw.println(""String_Node_Str"");
    dumpProcessOomList(pw,this,mLruProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,dumpPackage);
    needSep=true;
    printedAnything=true;
  }
  if (dumpAll || dumpPackage != null) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mPidsSelfLocked.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.valueAt(i);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mPidsSelfLocked.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mPidsSelfLocked.valueAt(i));
      }
    }
  }
  if (mForegroundProcesses.size() > 0) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mForegroundProcesses.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.get(mForegroundProcesses.valueAt(i).pid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mForegroundProcesses.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mForegroundProcesses.valueAt(i));
      }
    }
  }
  if (mPersistentStartingProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mPersistentStartingProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mRemovedProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mRemovedProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mProcessesOnHold.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mProcessesOnHold,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  needSep=dumpProcessesToGc(fd,pw,args,opti,needSep,dumpAll,dumpPackage);
  if (mProcessCrashTimes.getMap().size() > 0) {
    boolean printed=false;
    long now=SystemClock.uptimeMillis();
    final ArrayMap<String,SparseArray<Long>> pmap=mProcessCrashTimes.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<Long> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        TimeUtils.formatDuration(now - uids.valueAt(i),pw);
        pw.println(""String_Node_Str"");
      }
    }
  }
  if (mBadProcesses.getMap().size() > 0) {
    boolean printed=false;
    final ArrayMap<String,SparseArray<BadProcessInfo>> pmap=mBadProcesses.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<BadProcessInfo> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printedAnything=true;
        }
        BadProcessInfo info=uids.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        pw.println(info.time);
        if (info.shortMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.shortMsg);
        }
        if (info.longMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.longMsg);
        }
        if (info.stack != null) {
          pw.println(""String_Node_Str"");
          int lastPos=0;
          for (int pos=0; pos < info.stack.length(); pos++) {
            if (info.stack.charAt(pos) == '\n') {
              pw.print(""String_Node_Str"");
              pw.write(info.stack,lastPos,pos - lastPos);
              pw.println();
              lastPos=pos + 1;
            }
          }
          if (lastPos < info.stack.length()) {
            pw.print(""String_Node_Str"");
            pw.write(info.stack,lastPos,info.stack.length() - lastPos);
            pw.println();
          }
        }
      }
    }
  }
  if (dumpPackage == null) {
    pw.println();
    needSep=false;
    pw.println(""String_Node_Str"");
    for (int i=0; i < mStartedUsers.size(); i++) {
      UserStartedState uss=mStartedUsers.valueAt(i);
      pw.print(""String_Node_Str"");
      pw.print(uss.mHandle.getIdentifier());
      pw.print(""String_Node_Str"");
      uss.dump(""String_Node_Str"",pw);
    }
    pw.print(""String_Node_Str"");
    for (int i=0; i < mStartedUserArray.length; i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mStartedUserArray[i]);
    }
    pw.println(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    for (int i=0; i < mUserLru.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mUserLru.get(i));
    }
    pw.println(""String_Node_Str"");
    if (dumpAll) {
      pw.print(""String_Node_Str"");
      pw.println(Arrays.toString(mStartedUserArray));
    }
synchronized (mUserProfileGroupIdsSelfLocked) {
      if (mUserProfileGroupIdsSelfLocked.size() > 0) {
        pw.println(""String_Node_Str"");
        for (int i=0; i < mUserProfileGroupIdsSelfLocked.size(); i++) {
          pw.print(""String_Node_Str"");
          pw.print(mUserProfileGroupIdsSelfLocked.keyAt(i));
          pw.print(""String_Node_Str"");
          pw.println(mUserProfileGroupIdsSelfLocked.valueAt(i));
        }
      }
    }
  }
  if (mHomeProcess != null && (dumpPackage == null || mHomeProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHomeProcess);
  }
  if (mPreviousProcess != null && (dumpPackage == null || mPreviousProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mPreviousProcess);
  }
  if (dumpAll) {
    StringBuilder sb=new StringBuilder(128);
    sb.append(""String_Node_Str"");
    TimeUtils.formatDuration(mPreviousProcessVisibleTime,sb);
    pw.println(sb);
  }
  if (mHeavyWeightProcess != null && (dumpPackage == null || mHeavyWeightProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHeavyWeightProcess);
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + mConfiguration);
  }
  if (dumpAll) {
    pw.println(""String_Node_Str"" + getFocusedStack().mConfigWillChange);
    if (mCompatModePackages.getPackages().size() > 0) {
      boolean printed=false;
      for (      Map.Entry<String,Integer> entry : mCompatModePackages.getPackages().entrySet()) {
        String pkg=entry.getKey();
        int mode=entry.getValue();
        if (dumpPackage != null && !dumpPackage.equals(pkg)) {
          continue;
        }
        if (!printed) {
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pkg);
        pw.print(""String_Node_Str"");
        pw.print(mode);
        pw.println();
      }
    }
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + PowerManagerInternal.wakefulnessToString(mWakefulness));
    pw.println(""String_Node_Str"" + mSleeping + ""String_Node_Str""+ lockScreenShownToString());
    pw.print(""String_Node_Str"" + mShuttingDown + ""String_Node_Str""+ mRunningVoice);
  }
  if (mDebugApp != null || mOrigDebugApp != null || mDebugTransient || mOrigWaitForDebugger) {
    if (dumpPackage == null || dumpPackage.equals(mDebugApp) || dumpPackage.equals(mOrigDebugApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mDebugApp + ""String_Node_Str""+ mOrigDebugApp+ ""String_Node_Str""+ mDebugTransient+ ""String_Node_Str""+ mOrigWaitForDebugger);
    }
  }
  if (mOpenGlTraceApp != null) {
    if (dumpPackage == null || dumpPackage.equals(mOpenGlTraceApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mOpenGlTraceApp);
    }
  }
  if (mProfileApp != null || mProfileProc != null || mProfileFile != null || mProfileFd != null) {
    if (dumpPackage == null || dumpPackage.equals(mProfileApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mProfileApp + ""String_Node_Str""+ mProfileProc);
      pw.println(""String_Node_Str"" + mProfileFile + ""String_Node_Str""+ mProfileFd);
      pw.println(""String_Node_Str"" + mSamplingInterval + ""String_Node_Str""+ mAutoStopProfiler);
      pw.println(""String_Node_Str"" + mProfileType);
    }
  }
  if (dumpPackage == null) {
    if (mAlwaysFinishActivities || mController != null) {
      pw.println(""String_Node_Str"" + mAlwaysFinishActivities + ""String_Node_Str""+ mController);
    }
    if (dumpAll) {
      pw.println(""String_Node_Str"" + numPers);
      pw.println(""String_Node_Str"" + mProcessesReady + ""String_Node_Str""+ mSystemReady+ ""String_Node_Str""+ mBooted+ ""String_Node_Str""+ mFactoryTest);
      pw.println(""String_Node_Str"" + mBooting + ""String_Node_Str""+ mCallFinishBooting+ ""String_Node_Str""+ mBootAnimationComplete);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckRealtime,pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckUptime,pw);
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"" + mStackSupervisor.mGoingToSleep);
      pw.println(""String_Node_Str"" + mStackSupervisor.mLaunchingActivity);
      pw.println(""String_Node_Str"" + mAdjSeq + ""String_Node_Str""+ mLruSeq);
      pw.println(""String_Node_Str"" + mNumNonCachedProcs + ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ ""String_Node_Str""+ mNumCachedHiddenProcs+ ""String_Node_Str""+ mNumServiceProcs+ ""String_Node_Str""+ mNewNumServiceProcs);
      pw.println(""String_Node_Str"" + mAllowLowerMemLevel + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mLastNumProcesses);
      long now=SystemClock.uptimeMillis();
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(now,mLastIdleTime,pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(getLowRamTimeSinceIdle(now),pw);
      pw.println();
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}","void dumpProcessesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  int numPers=0;
  pw.println(""String_Node_Str"");
  if (dumpAll) {
    final int NP=mProcessNames.getMap().size();
    for (int ip=0; ip < NP; ip++) {
      SparseArray<ProcessRecord> procs=mProcessNames.getMap().valueAt(ip);
      final int NA=procs.size();
      for (int ia=0; ia < NA; ia++) {
        ProcessRecord r=procs.valueAt(ia);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!needSep) {
          pw.println(""String_Node_Str"");
          needSep=true;
          printedAnything=true;
        }
        pw.print(r.persistent ? ""String_Node_Str"" : ""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(procs.keyAt(ia));
        pw.print(""String_Node_Str"");
        pw.println(r);
        r.dump(pw,""String_Node_Str"");
        if (r.persistent) {
          numPers++;
        }
      }
    }
  }
  if (mIsolatedProcesses.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mIsolatedProcesses.size(); i++) {
      ProcessRecord r=mIsolatedProcesses.valueAt(i);
      if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        pw.println(""String_Node_Str"");
        printedAnything=true;
        printed=true;
        needSep=true;
      }
      pw.println(String.format(""String_Node_Str"",""String_Node_Str"",i,r.toString()));
    }
  }
  if (mLruProcesses.size() > 0) {
    if (needSep) {
      pw.println();
    }
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size());
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessActivityStart);
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessServiceStart);
    pw.println(""String_Node_Str"");
    dumpProcessOomList(pw,this,mLruProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,dumpPackage);
    needSep=true;
    printedAnything=true;
  }
  if (dumpAll || dumpPackage != null) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mPidsSelfLocked.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.valueAt(i);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mPidsSelfLocked.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mPidsSelfLocked.valueAt(i));
      }
    }
  }
  if (mForegroundProcesses.size() > 0) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mForegroundProcesses.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.get(mForegroundProcesses.valueAt(i).pid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mForegroundProcesses.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mForegroundProcesses.valueAt(i));
      }
    }
  }
  if (mPersistentStartingProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mPersistentStartingProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mRemovedProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mRemovedProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mProcessesOnHold.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mProcessesOnHold,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  needSep=dumpProcessesToGc(fd,pw,args,opti,needSep,dumpAll,dumpPackage);
  if (mProcessCrashTimes.getMap().size() > 0) {
    boolean printed=false;
    long now=SystemClock.uptimeMillis();
    final ArrayMap<String,SparseArray<Long>> pmap=mProcessCrashTimes.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<Long> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        TimeUtils.formatDuration(now - uids.valueAt(i),pw);
        pw.println(""String_Node_Str"");
      }
    }
  }
  if (mBadProcesses.getMap().size() > 0) {
    boolean printed=false;
    final ArrayMap<String,SparseArray<BadProcessInfo>> pmap=mBadProcesses.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<BadProcessInfo> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printedAnything=true;
        }
        BadProcessInfo info=uids.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        pw.println(info.time);
        if (info.shortMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.shortMsg);
        }
        if (info.longMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.longMsg);
        }
        if (info.stack != null) {
          pw.println(""String_Node_Str"");
          int lastPos=0;
          for (int pos=0; pos < info.stack.length(); pos++) {
            if (info.stack.charAt(pos) == '\n') {
              pw.print(""String_Node_Str"");
              pw.write(info.stack,lastPos,pos - lastPos);
              pw.println();
              lastPos=pos + 1;
            }
          }
          if (lastPos < info.stack.length()) {
            pw.print(""String_Node_Str"");
            pw.write(info.stack,lastPos,info.stack.length() - lastPos);
            pw.println();
          }
        }
      }
    }
  }
  if (dumpPackage == null) {
    pw.println();
    needSep=false;
    pw.println(""String_Node_Str"");
    for (int i=0; i < mStartedUsers.size(); i++) {
      UserStartedState uss=mStartedUsers.valueAt(i);
      pw.print(""String_Node_Str"");
      pw.print(uss.mHandle.getIdentifier());
      pw.print(""String_Node_Str"");
      uss.dump(""String_Node_Str"",pw);
    }
    pw.print(""String_Node_Str"");
    for (int i=0; i < mStartedUserArray.length; i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mStartedUserArray[i]);
    }
    pw.println(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    for (int i=0; i < mUserLru.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mUserLru.get(i));
    }
    pw.println(""String_Node_Str"");
    if (dumpAll) {
      pw.print(""String_Node_Str"");
      pw.println(Arrays.toString(mStartedUserArray));
    }
synchronized (mUserProfileGroupIdsSelfLocked) {
      if (mUserProfileGroupIdsSelfLocked.size() > 0) {
        pw.println(""String_Node_Str"");
        for (int i=0; i < mUserProfileGroupIdsSelfLocked.size(); i++) {
          pw.print(""String_Node_Str"");
          pw.print(mUserProfileGroupIdsSelfLocked.keyAt(i));
          pw.print(""String_Node_Str"");
          pw.println(mUserProfileGroupIdsSelfLocked.valueAt(i));
        }
      }
    }
  }
  if (mHomeProcess != null && (dumpPackage == null || mHomeProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHomeProcess);
  }
  if (mPreviousProcess != null && (dumpPackage == null || mPreviousProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mPreviousProcess);
  }
  if (dumpAll) {
    StringBuilder sb=new StringBuilder(128);
    sb.append(""String_Node_Str"");
    TimeUtils.formatDuration(mPreviousProcessVisibleTime,sb);
    pw.println(sb);
  }
  if (mHeavyWeightProcess != null && (dumpPackage == null || mHeavyWeightProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHeavyWeightProcess);
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + mConfiguration);
  }
  if (dumpAll) {
    pw.println(""String_Node_Str"" + getFocusedStack().mConfigWillChange);
    if (mCompatModePackages.getPackages().size() > 0) {
      boolean printed=false;
      for (      Map.Entry<String,Integer> entry : mCompatModePackages.getPackages().entrySet()) {
        String pkg=entry.getKey();
        int mode=entry.getValue();
        if (dumpPackage != null && !dumpPackage.equals(pkg)) {
          continue;
        }
        if (!printed) {
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pkg);
        pw.print(""String_Node_Str"");
        pw.print(mode);
        pw.println();
      }
    }
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + PowerManagerInternal.wakefulnessToString(mWakefulness));
    pw.println(""String_Node_Str"" + mSleeping + ""String_Node_Str""+ lockScreenShownToString());
    pw.println(""String_Node_Str"" + mShuttingDown + ""String_Node_Str""+ mRunningVoice);
  }
  if (mDebugApp != null || mOrigDebugApp != null || mDebugTransient || mOrigWaitForDebugger) {
    if (dumpPackage == null || dumpPackage.equals(mDebugApp) || dumpPackage.equals(mOrigDebugApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mDebugApp + ""String_Node_Str""+ mOrigDebugApp+ ""String_Node_Str""+ mDebugTransient+ ""String_Node_Str""+ mOrigWaitForDebugger);
    }
  }
  if (mOpenGlTraceApp != null) {
    if (dumpPackage == null || dumpPackage.equals(mOpenGlTraceApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mOpenGlTraceApp);
    }
  }
  if (mProfileApp != null || mProfileProc != null || mProfileFile != null || mProfileFd != null) {
    if (dumpPackage == null || dumpPackage.equals(mProfileApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mProfileApp + ""String_Node_Str""+ mProfileProc);
      pw.println(""String_Node_Str"" + mProfileFile + ""String_Node_Str""+ mProfileFd);
      pw.println(""String_Node_Str"" + mSamplingInterval + ""String_Node_Str""+ mAutoStopProfiler);
      pw.println(""String_Node_Str"" + mProfileType);
    }
  }
  if (dumpPackage == null) {
    if (mAlwaysFinishActivities || mController != null) {
      pw.println(""String_Node_Str"" + mAlwaysFinishActivities + ""String_Node_Str""+ mController);
    }
    if (dumpAll) {
      pw.println(""String_Node_Str"" + numPers);
      pw.println(""String_Node_Str"" + mProcessesReady + ""String_Node_Str""+ mSystemReady+ ""String_Node_Str""+ mBooted+ ""String_Node_Str""+ mFactoryTest);
      pw.println(""String_Node_Str"" + mBooting + ""String_Node_Str""+ mCallFinishBooting+ ""String_Node_Str""+ mBootAnimationComplete);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckRealtime,pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckUptime,pw);
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"" + mStackSupervisor.mGoingToSleep);
      pw.println(""String_Node_Str"" + mStackSupervisor.mLaunchingActivity);
      pw.println(""String_Node_Str"" + mAdjSeq + ""String_Node_Str""+ mLruSeq);
      pw.println(""String_Node_Str"" + mNumNonCachedProcs + ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ ""String_Node_Str""+ mNumCachedHiddenProcs+ ""String_Node_Str""+ mNumServiceProcs+ ""String_Node_Str""+ mNewNumServiceProcs);
      pw.println(""String_Node_Str"" + mAllowLowerMemLevel + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mLastNumProcesses);
      long now=SystemClock.uptimeMillis();
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(now,mLastIdleTime,pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(getLowRamTimeSinceIdle(now),pw);
      pw.println();
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}",0.9999274784248314
195868,"private static Calendar tomorrowMidnight(){
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(System.currentTimeMillis());
  calendar.set(Calendar.HOUR_OF_DAY,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MILLISECOND,0);
  calendar.add(Calendar.DAY_OF_MONTH,1);
  return calendar;
}","private static Calendar tomorrowMidnight(){
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(System.currentTimeMillis());
  calendar.set(Calendar.HOUR_OF_DAY,3);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MILLISECOND,0);
  calendar.add(Calendar.DAY_OF_MONTH,1);
  return calendar;
}",0.9971830985915492
195869,"@Override public boolean onStartJob(JobParameters params){
  mJobParams=params;
  MountService ms=MountService.sSelf;
  if (ms != null) {
synchronized (mFinishCallback) {
      mStarted=true;
    }
    ms.runIdleMaintenance(mFinishCallback);
  }
  return ms != null;
}","@Override public boolean onStartJob(JobParameters params){
  try {
    ActivityManagerNative.getDefault().performIdleMaintenance();
  }
 catch (  RemoteException e) {
  }
  mJobParams=params;
  MountService ms=MountService.sSelf;
  if (ms != null) {
synchronized (mFinishCallback) {
      mStarted=true;
    }
    ms.runIdleMaintenance(mFinishCallback);
  }
  return ms != null;
}",0.8271604938271605
195870,"void dumpProcessesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  int numPers=0;
  pw.println(""String_Node_Str"");
  if (dumpAll) {
    final int NP=mProcessNames.getMap().size();
    for (int ip=0; ip < NP; ip++) {
      SparseArray<ProcessRecord> procs=mProcessNames.getMap().valueAt(ip);
      final int NA=procs.size();
      for (int ia=0; ia < NA; ia++) {
        ProcessRecord r=procs.valueAt(ia);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!needSep) {
          pw.println(""String_Node_Str"");
          needSep=true;
          printedAnything=true;
        }
        pw.print(r.persistent ? ""String_Node_Str"" : ""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(procs.keyAt(ia));
        pw.print(""String_Node_Str"");
        pw.println(r);
        r.dump(pw,""String_Node_Str"");
        if (r.persistent) {
          numPers++;
        }
      }
    }
  }
  if (mIsolatedProcesses.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mIsolatedProcesses.size(); i++) {
      ProcessRecord r=mIsolatedProcesses.valueAt(i);
      if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        pw.println(""String_Node_Str"");
        printedAnything=true;
        printed=true;
        needSep=true;
      }
      pw.println(String.format(""String_Node_Str"",""String_Node_Str"",i,r.toString()));
    }
  }
  if (mLruProcesses.size() > 0) {
    if (needSep) {
      pw.println();
    }
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size());
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessActivityStart);
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessServiceStart);
    pw.println(""String_Node_Str"");
    dumpProcessOomList(pw,this,mLruProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,dumpPackage);
    needSep=true;
    printedAnything=true;
  }
  if (dumpAll || dumpPackage != null) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mPidsSelfLocked.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.valueAt(i);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mPidsSelfLocked.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mPidsSelfLocked.valueAt(i));
      }
    }
  }
  if (mForegroundProcesses.size() > 0) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mForegroundProcesses.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.get(mForegroundProcesses.valueAt(i).pid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mForegroundProcesses.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mForegroundProcesses.valueAt(i));
      }
    }
  }
  if (mPersistentStartingProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mPersistentStartingProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mRemovedProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mRemovedProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mProcessesOnHold.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mProcessesOnHold,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  needSep=dumpProcessesToGc(fd,pw,args,opti,needSep,dumpAll,dumpPackage);
  if (mProcessCrashTimes.getMap().size() > 0) {
    boolean printed=false;
    long now=SystemClock.uptimeMillis();
    final ArrayMap<String,SparseArray<Long>> pmap=mProcessCrashTimes.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<Long> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        TimeUtils.formatDuration(now - uids.valueAt(i),pw);
        pw.println(""String_Node_Str"");
      }
    }
  }
  if (mBadProcesses.getMap().size() > 0) {
    boolean printed=false;
    final ArrayMap<String,SparseArray<BadProcessInfo>> pmap=mBadProcesses.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<BadProcessInfo> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printedAnything=true;
        }
        BadProcessInfo info=uids.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        pw.println(info.time);
        if (info.shortMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.shortMsg);
        }
        if (info.longMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.longMsg);
        }
        if (info.stack != null) {
          pw.println(""String_Node_Str"");
          int lastPos=0;
          for (int pos=0; pos < info.stack.length(); pos++) {
            if (info.stack.charAt(pos) == '\n') {
              pw.print(""String_Node_Str"");
              pw.write(info.stack,lastPos,pos - lastPos);
              pw.println();
              lastPos=pos + 1;
            }
          }
          if (lastPos < info.stack.length()) {
            pw.print(""String_Node_Str"");
            pw.write(info.stack,lastPos,info.stack.length() - lastPos);
            pw.println();
          }
        }
      }
    }
  }
  if (dumpPackage == null) {
    pw.println();
    needSep=false;
    pw.println(""String_Node_Str"");
    for (int i=0; i < mStartedUsers.size(); i++) {
      UserStartedState uss=mStartedUsers.valueAt(i);
      pw.print(""String_Node_Str"");
      pw.print(uss.mHandle.getIdentifier());
      pw.print(""String_Node_Str"");
      uss.dump(""String_Node_Str"",pw);
    }
    pw.print(""String_Node_Str"");
    for (int i=0; i < mStartedUserArray.length; i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mStartedUserArray[i]);
    }
    pw.println(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    for (int i=0; i < mUserLru.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mUserLru.get(i));
    }
    pw.println(""String_Node_Str"");
    if (dumpAll) {
      pw.print(""String_Node_Str"");
      pw.println(Arrays.toString(mStartedUserArray));
    }
synchronized (mUserProfileGroupIdsSelfLocked) {
      if (mUserProfileGroupIdsSelfLocked.size() > 0) {
        pw.println(""String_Node_Str"");
        for (int i=0; i < mUserProfileGroupIdsSelfLocked.size(); i++) {
          pw.print(""String_Node_Str"");
          pw.print(mUserProfileGroupIdsSelfLocked.keyAt(i));
          pw.print(""String_Node_Str"");
          pw.println(mUserProfileGroupIdsSelfLocked.valueAt(i));
        }
      }
    }
  }
  if (mHomeProcess != null && (dumpPackage == null || mHomeProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHomeProcess);
  }
  if (mPreviousProcess != null && (dumpPackage == null || mPreviousProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mPreviousProcess);
  }
  if (dumpAll) {
    StringBuilder sb=new StringBuilder(128);
    sb.append(""String_Node_Str"");
    TimeUtils.formatDuration(mPreviousProcessVisibleTime,sb);
    pw.println(sb);
  }
  if (mHeavyWeightProcess != null && (dumpPackage == null || mHeavyWeightProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHeavyWeightProcess);
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + mConfiguration);
  }
  if (dumpAll) {
    pw.println(""String_Node_Str"" + getFocusedStack().mConfigWillChange);
    if (mCompatModePackages.getPackages().size() > 0) {
      boolean printed=false;
      for (      Map.Entry<String,Integer> entry : mCompatModePackages.getPackages().entrySet()) {
        String pkg=entry.getKey();
        int mode=entry.getValue();
        if (dumpPackage != null && !dumpPackage.equals(pkg)) {
          continue;
        }
        if (!printed) {
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pkg);
        pw.print(""String_Node_Str"");
        pw.print(mode);
        pw.println();
      }
    }
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + PowerManagerInternal.wakefulnessToString(mWakefulness));
    pw.println(""String_Node_Str"" + mSleeping + ""String_Node_Str""+ lockScreenShownToString());
    pw.print(""String_Node_Str"" + mShuttingDown + ""String_Node_Str""+ mRunningVoice);
  }
  if (mDebugApp != null || mOrigDebugApp != null || mDebugTransient || mOrigWaitForDebugger) {
    if (dumpPackage == null || dumpPackage.equals(mDebugApp) || dumpPackage.equals(mOrigDebugApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mDebugApp + ""String_Node_Str""+ mOrigDebugApp+ ""String_Node_Str""+ mDebugTransient+ ""String_Node_Str""+ mOrigWaitForDebugger);
    }
  }
  if (mOpenGlTraceApp != null) {
    if (dumpPackage == null || dumpPackage.equals(mOpenGlTraceApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mOpenGlTraceApp);
    }
  }
  if (mProfileApp != null || mProfileProc != null || mProfileFile != null || mProfileFd != null) {
    if (dumpPackage == null || dumpPackage.equals(mProfileApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mProfileApp + ""String_Node_Str""+ mProfileProc);
      pw.println(""String_Node_Str"" + mProfileFile + ""String_Node_Str""+ mProfileFd);
      pw.println(""String_Node_Str"" + mSamplingInterval + ""String_Node_Str""+ mAutoStopProfiler);
      pw.println(""String_Node_Str"" + mProfileType);
    }
  }
  if (dumpPackage == null) {
    if (mAlwaysFinishActivities || mController != null) {
      pw.println(""String_Node_Str"" + mAlwaysFinishActivities + ""String_Node_Str""+ mController);
    }
    if (dumpAll) {
      pw.println(""String_Node_Str"" + numPers);
      pw.println(""String_Node_Str"" + mProcessesReady + ""String_Node_Str""+ mSystemReady+ ""String_Node_Str""+ mBooted+ ""String_Node_Str""+ mFactoryTest);
      pw.println(""String_Node_Str"" + mBooting + ""String_Node_Str""+ mCallFinishBooting+ ""String_Node_Str""+ mBootAnimationComplete);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckRealtime,pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckUptime,pw);
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"" + mStackSupervisor.mGoingToSleep);
      pw.println(""String_Node_Str"" + mStackSupervisor.mLaunchingActivity);
      pw.println(""String_Node_Str"" + mAdjSeq + ""String_Node_Str""+ mLruSeq);
      pw.println(""String_Node_Str"" + mNumNonCachedProcs + ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ ""String_Node_Str""+ mNumCachedHiddenProcs+ ""String_Node_Str""+ mNumServiceProcs+ ""String_Node_Str""+ mNewNumServiceProcs);
      pw.println(""String_Node_Str"" + mAllowLowerMemLevel + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mLastNumProcesses);
      long now=SystemClock.uptimeMillis();
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(now,mLastIdleTime,pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(getLowRamTimeSinceIdle(now),pw);
      pw.println();
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}","void dumpProcessesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  int numPers=0;
  pw.println(""String_Node_Str"");
  if (dumpAll) {
    final int NP=mProcessNames.getMap().size();
    for (int ip=0; ip < NP; ip++) {
      SparseArray<ProcessRecord> procs=mProcessNames.getMap().valueAt(ip);
      final int NA=procs.size();
      for (int ia=0; ia < NA; ia++) {
        ProcessRecord r=procs.valueAt(ia);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!needSep) {
          pw.println(""String_Node_Str"");
          needSep=true;
          printedAnything=true;
        }
        pw.print(r.persistent ? ""String_Node_Str"" : ""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(procs.keyAt(ia));
        pw.print(""String_Node_Str"");
        pw.println(r);
        r.dump(pw,""String_Node_Str"");
        if (r.persistent) {
          numPers++;
        }
      }
    }
  }
  if (mIsolatedProcesses.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mIsolatedProcesses.size(); i++) {
      ProcessRecord r=mIsolatedProcesses.valueAt(i);
      if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        pw.println(""String_Node_Str"");
        printedAnything=true;
        printed=true;
        needSep=true;
      }
      pw.println(String.format(""String_Node_Str"",""String_Node_Str"",i,r.toString()));
    }
  }
  if (mLruProcesses.size() > 0) {
    if (needSep) {
      pw.println();
    }
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size());
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessActivityStart);
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessServiceStart);
    pw.println(""String_Node_Str"");
    dumpProcessOomList(pw,this,mLruProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,dumpPackage);
    needSep=true;
    printedAnything=true;
  }
  if (dumpAll || dumpPackage != null) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mPidsSelfLocked.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.valueAt(i);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mPidsSelfLocked.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mPidsSelfLocked.valueAt(i));
      }
    }
  }
  if (mForegroundProcesses.size() > 0) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mForegroundProcesses.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.get(mForegroundProcesses.valueAt(i).pid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mForegroundProcesses.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mForegroundProcesses.valueAt(i));
      }
    }
  }
  if (mPersistentStartingProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mPersistentStartingProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mRemovedProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mRemovedProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mProcessesOnHold.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mProcessesOnHold,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  needSep=dumpProcessesToGc(fd,pw,args,opti,needSep,dumpAll,dumpPackage);
  if (mProcessCrashTimes.getMap().size() > 0) {
    boolean printed=false;
    long now=SystemClock.uptimeMillis();
    final ArrayMap<String,SparseArray<Long>> pmap=mProcessCrashTimes.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<Long> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        TimeUtils.formatDuration(now - uids.valueAt(i),pw);
        pw.println(""String_Node_Str"");
      }
    }
  }
  if (mBadProcesses.getMap().size() > 0) {
    boolean printed=false;
    final ArrayMap<String,SparseArray<BadProcessInfo>> pmap=mBadProcesses.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<BadProcessInfo> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printedAnything=true;
        }
        BadProcessInfo info=uids.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        pw.println(info.time);
        if (info.shortMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.shortMsg);
        }
        if (info.longMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.longMsg);
        }
        if (info.stack != null) {
          pw.println(""String_Node_Str"");
          int lastPos=0;
          for (int pos=0; pos < info.stack.length(); pos++) {
            if (info.stack.charAt(pos) == '\n') {
              pw.print(""String_Node_Str"");
              pw.write(info.stack,lastPos,pos - lastPos);
              pw.println();
              lastPos=pos + 1;
            }
          }
          if (lastPos < info.stack.length()) {
            pw.print(""String_Node_Str"");
            pw.write(info.stack,lastPos,info.stack.length() - lastPos);
            pw.println();
          }
        }
      }
    }
  }
  if (dumpPackage == null) {
    pw.println();
    needSep=false;
    pw.println(""String_Node_Str"");
    for (int i=0; i < mStartedUsers.size(); i++) {
      UserStartedState uss=mStartedUsers.valueAt(i);
      pw.print(""String_Node_Str"");
      pw.print(uss.mHandle.getIdentifier());
      pw.print(""String_Node_Str"");
      uss.dump(""String_Node_Str"",pw);
    }
    pw.print(""String_Node_Str"");
    for (int i=0; i < mStartedUserArray.length; i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mStartedUserArray[i]);
    }
    pw.println(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    for (int i=0; i < mUserLru.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mUserLru.get(i));
    }
    pw.println(""String_Node_Str"");
    if (dumpAll) {
      pw.print(""String_Node_Str"");
      pw.println(Arrays.toString(mStartedUserArray));
    }
synchronized (mUserProfileGroupIdsSelfLocked) {
      if (mUserProfileGroupIdsSelfLocked.size() > 0) {
        pw.println(""String_Node_Str"");
        for (int i=0; i < mUserProfileGroupIdsSelfLocked.size(); i++) {
          pw.print(""String_Node_Str"");
          pw.print(mUserProfileGroupIdsSelfLocked.keyAt(i));
          pw.print(""String_Node_Str"");
          pw.println(mUserProfileGroupIdsSelfLocked.valueAt(i));
        }
      }
    }
  }
  if (mHomeProcess != null && (dumpPackage == null || mHomeProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHomeProcess);
  }
  if (mPreviousProcess != null && (dumpPackage == null || mPreviousProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mPreviousProcess);
  }
  if (dumpAll) {
    StringBuilder sb=new StringBuilder(128);
    sb.append(""String_Node_Str"");
    TimeUtils.formatDuration(mPreviousProcessVisibleTime,sb);
    pw.println(sb);
  }
  if (mHeavyWeightProcess != null && (dumpPackage == null || mHeavyWeightProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHeavyWeightProcess);
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + mConfiguration);
  }
  if (dumpAll) {
    pw.println(""String_Node_Str"" + getFocusedStack().mConfigWillChange);
    if (mCompatModePackages.getPackages().size() > 0) {
      boolean printed=false;
      for (      Map.Entry<String,Integer> entry : mCompatModePackages.getPackages().entrySet()) {
        String pkg=entry.getKey();
        int mode=entry.getValue();
        if (dumpPackage != null && !dumpPackage.equals(pkg)) {
          continue;
        }
        if (!printed) {
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pkg);
        pw.print(""String_Node_Str"");
        pw.print(mode);
        pw.println();
      }
    }
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + PowerManagerInternal.wakefulnessToString(mWakefulness));
    pw.println(""String_Node_Str"" + mSleeping + ""String_Node_Str""+ lockScreenShownToString());
    pw.println(""String_Node_Str"" + mShuttingDown + ""String_Node_Str""+ mRunningVoice);
  }
  if (mDebugApp != null || mOrigDebugApp != null || mDebugTransient || mOrigWaitForDebugger) {
    if (dumpPackage == null || dumpPackage.equals(mDebugApp) || dumpPackage.equals(mOrigDebugApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mDebugApp + ""String_Node_Str""+ mOrigDebugApp+ ""String_Node_Str""+ mDebugTransient+ ""String_Node_Str""+ mOrigWaitForDebugger);
    }
  }
  if (mOpenGlTraceApp != null) {
    if (dumpPackage == null || dumpPackage.equals(mOpenGlTraceApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mOpenGlTraceApp);
    }
  }
  if (mProfileApp != null || mProfileProc != null || mProfileFile != null || mProfileFd != null) {
    if (dumpPackage == null || dumpPackage.equals(mProfileApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mProfileApp + ""String_Node_Str""+ mProfileProc);
      pw.println(""String_Node_Str"" + mProfileFile + ""String_Node_Str""+ mProfileFd);
      pw.println(""String_Node_Str"" + mSamplingInterval + ""String_Node_Str""+ mAutoStopProfiler);
      pw.println(""String_Node_Str"" + mProfileType);
    }
  }
  if (dumpPackage == null) {
    if (mAlwaysFinishActivities || mController != null) {
      pw.println(""String_Node_Str"" + mAlwaysFinishActivities + ""String_Node_Str""+ mController);
    }
    if (dumpAll) {
      pw.println(""String_Node_Str"" + numPers);
      pw.println(""String_Node_Str"" + mProcessesReady + ""String_Node_Str""+ mSystemReady+ ""String_Node_Str""+ mBooted+ ""String_Node_Str""+ mFactoryTest);
      pw.println(""String_Node_Str"" + mBooting + ""String_Node_Str""+ mCallFinishBooting+ ""String_Node_Str""+ mBootAnimationComplete);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckRealtime,pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckUptime,pw);
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"" + mStackSupervisor.mGoingToSleep);
      pw.println(""String_Node_Str"" + mStackSupervisor.mLaunchingActivity);
      pw.println(""String_Node_Str"" + mAdjSeq + ""String_Node_Str""+ mLruSeq);
      pw.println(""String_Node_Str"" + mNumNonCachedProcs + ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ ""String_Node_Str""+ mNumCachedHiddenProcs+ ""String_Node_Str""+ mNumServiceProcs+ ""String_Node_Str""+ mNewNumServiceProcs);
      pw.println(""String_Node_Str"" + mAllowLowerMemLevel + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mLastNumProcesses);
      long now=SystemClock.uptimeMillis();
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(now,mLastIdleTime,pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(getLowRamTimeSinceIdle(now),pw);
      pw.println();
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}",0.9999274784248314
195871,"void generate(CharSequence source,int bufStart,int bufEnd,TextPaint paint,int outerWidth,TextDirectionHeuristic textDir,float spacingmult,float spacingadd,boolean includepad,boolean trackpad,float ellipsizedWidth,TextUtils.TruncateAt ellipsize){
  int[] breakOpp=null;
  final String localeLanguageTag=paint.getTextLocale().toLanguageTag();
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=mMeasured;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineLimit=mLineCount + 1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          int lmsFirstLine=getLineForOffset(spanned.getSpanStart(lms2));
          firstWidthLineLimit=Math.max(firstWidthLineLimit,lmsFirstLine + lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length != 0) {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    breakOpp=nLineBreakOpportunities(localeLanguageTag,chs,paraEnd - paraStart,breakOpp);
    int breakOppIndex=0;
    int width=firstWidth;
    float w=0;
    int here=paraStart;
    int ok=paraStart;
    float okWidth=w;
    int okAscent=0, okDescent=0, okTop=0, okBottom=0;
    int fit=paraStart;
    float fitWidth=w;
    int fitAscent=0, fitDescent=0, fitTop=0, fitBottom=0;
    float fitWidthGraphing=w;
    boolean hasTabOrEmoji=false;
    boolean hasTab=false;
    TabStops tabStops=null;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      int fmTop=fm.top;
      int fmBottom=fm.bottom;
      int fmAscent=fm.ascent;
      int fmDescent=fm.descent;
      for (int j=spanStart; j < spanEnd; j++) {
        char c=chs[j - paraStart];
        if (c == CHAR_NEW_LINE) {
        }
 else         if (c == CHAR_TAB) {
          if (hasTab == false) {
            hasTab=true;
            hasTabOrEmoji=true;
            if (spanned != null) {
              TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
              if (spans.length > 0) {
                tabStops=new TabStops(TAB_INCREMENT,spans);
              }
            }
          }
          if (tabStops != null) {
            w=tabStops.nextTab(w);
          }
 else {
            w=TabStops.nextDefaultStop(w,TAB_INCREMENT);
          }
        }
 else         if (c >= CHAR_FIRST_HIGH_SURROGATE && c <= CHAR_LAST_LOW_SURROGATE && j + 1 < spanEnd) {
          int emoji=Character.codePointAt(chs,j - paraStart);
          if (emoji >= MIN_EMOJI && emoji <= MAX_EMOJI) {
            Bitmap bm=EMOJI_FACTORY.getBitmapFromAndroidPua(emoji);
            if (bm != null) {
              Paint whichPaint;
              if (spanned == null) {
                whichPaint=paint;
              }
 else {
                whichPaint=mWorkPaint;
              }
              float wid=bm.getWidth() * -whichPaint.ascent() / bm.getHeight();
              w+=wid;
              hasTabOrEmoji=true;
              j++;
            }
 else {
              w+=widths[j - paraStart];
            }
          }
 else {
            w+=widths[j - paraStart];
          }
        }
 else {
          w+=widths[j - paraStart];
        }
        boolean isSpaceOrTab=c == CHAR_SPACE || c == CHAR_TAB || c == CHAR_ZWSP;
        if (w <= width || isSpaceOrTab) {
          fitWidth=w;
          if (!isSpaceOrTab) {
            fitWidthGraphing=w;
          }
          fit=j + 1;
          if (fmTop < fitTop)           fitTop=fmTop;
          if (fmAscent < fitAscent)           fitAscent=fmAscent;
          if (fmDescent > fitDescent)           fitDescent=fmDescent;
          if (fmBottom > fitBottom)           fitBottom=fmBottom;
          while (breakOpp[breakOppIndex] != -1 && breakOpp[breakOppIndex] < j - paraStart + 1) {
            breakOppIndex++;
          }
          boolean isLineBreak=breakOppIndex < breakOpp.length && breakOpp[breakOppIndex] == j - paraStart + 1;
          if (isLineBreak) {
            okWidth=fitWidthGraphing;
            ok=j + 1;
            if (fitTop < okTop)             okTop=fitTop;
            if (fitAscent < okAscent)             okAscent=fitAscent;
            if (fitDescent > okDescent)             okDescent=fitDescent;
            if (fitBottom > okBottom)             okBottom=fitBottom;
          }
        }
 else {
          int endPos;
          int above, below, top, bottom;
          float currentTextWidth;
          if (ok != here) {
            endPos=ok;
            above=okAscent;
            below=okDescent;
            top=okTop;
            bottom=okBottom;
            currentTextWidth=okWidth;
          }
 else           if (fit != here) {
            endPos=fit;
            above=fitAscent;
            below=fitDescent;
            top=fitTop;
            bottom=fitBottom;
            currentTextWidth=fitWidth;
          }
 else {
            endPos=here + 1;
            while (endPos < spanEnd && widths[endPos - paraStart] == 0) {
              endPos++;
            }
            above=fmAscent;
            below=fmDescent;
            top=fmTop;
            bottom=fmBottom;
            currentTextWidth=widths[here - paraStart];
          }
          v=out(source,here,endPos,above,below,top,bottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,currentTextWidth,paint,true);
          here=endPos;
          j=here - 1;
          ok=fit=here;
          w=0;
          fitWidthGraphing=w;
          fitAscent=fitDescent=fitTop=fitBottom=0;
          okAscent=okDescent=okTop=okBottom=0;
          if (--firstWidthLineLimit <= 0) {
            width=restWidth;
          }
          if (here < spanStart) {
            measured.setPos(here);
            spanEnd=here;
            break;
          }
          if (mLineCount >= mMaximumVisibleLineCount) {
            return;
          }
        }
      }
    }
    if (paraEnd != here && mLineCount < mMaximumVisibleLineCount) {
      if ((fitTop | fitBottom | fitDescent| fitAscent) == 0) {
        paint.getFontMetricsInt(fm);
        fitTop=fm.top;
        fitBottom=fm.bottom;
        fitAscent=fm.ascent;
        fitDescent=fm.descent;
      }
      v=out(source,here,paraEnd,fitAscent,fitDescent,fitTop,fitBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,w,paint,paraEnd != bufEnd);
    }
    paraStart=paraEnd;
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufStart,bufEnd,textDir);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,false,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}","void generate(CharSequence source,int bufStart,int bufEnd,TextPaint paint,int outerWidth,TextDirectionHeuristic textDir,float spacingmult,float spacingadd,boolean includepad,boolean trackpad,float ellipsizedWidth,TextUtils.TruncateAt ellipsize){
  int[] breakOpp=null;
  final String localeLanguageTag=paint.getTextLocale().toLanguageTag();
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=mMeasured;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineLimit=mLineCount + 1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          int lmsFirstLine=getLineForOffset(spanned.getSpanStart(lms2));
          firstWidthLineLimit=Math.max(firstWidthLineLimit,lmsFirstLine + lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length != 0) {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    breakOpp=nLineBreakOpportunities(localeLanguageTag,chs,paraEnd - paraStart,breakOpp);
    int breakOppIndex=0;
    int width=firstWidth;
    float w=0;
    int here=paraStart;
    int ok=paraStart;
    float okWidth=w;
    int okAscent=0, okDescent=0, okTop=0, okBottom=0;
    int fit=paraStart;
    float fitWidth=w;
    int fitAscent=0, fitDescent=0, fitTop=0, fitBottom=0;
    float fitWidthGraphing=w;
    boolean hasTabOrEmoji=false;
    boolean hasTab=false;
    TabStops tabStops=null;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      int fmTop=fm.top;
      int fmBottom=fm.bottom;
      int fmAscent=fm.ascent;
      int fmDescent=fm.descent;
      for (int j=spanStart; j < spanEnd; j++) {
        char c=chs[j - paraStart];
        if (c == CHAR_NEW_LINE) {
        }
 else         if (c == CHAR_TAB) {
          if (hasTab == false) {
            hasTab=true;
            hasTabOrEmoji=true;
            if (spanned != null) {
              TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
              if (spans.length > 0) {
                tabStops=new TabStops(TAB_INCREMENT,spans);
              }
            }
          }
          if (tabStops != null) {
            w=tabStops.nextTab(w);
          }
 else {
            w=TabStops.nextDefaultStop(w,TAB_INCREMENT);
          }
        }
 else         if (c >= CHAR_FIRST_HIGH_SURROGATE && c <= CHAR_LAST_LOW_SURROGATE && j + 1 < spanEnd) {
          int emoji=Character.codePointAt(chs,j - paraStart);
          if (emoji >= MIN_EMOJI && emoji <= MAX_EMOJI) {
            Bitmap bm=EMOJI_FACTORY.getBitmapFromAndroidPua(emoji);
            if (bm != null) {
              Paint whichPaint;
              if (spanned == null) {
                whichPaint=paint;
              }
 else {
                whichPaint=mWorkPaint;
              }
              float wid=bm.getWidth() * -whichPaint.ascent() / bm.getHeight();
              w+=wid;
              hasTabOrEmoji=true;
              j++;
            }
 else {
              w+=widths[j - paraStart];
            }
          }
 else {
            w+=widths[j - paraStart];
          }
        }
 else {
          w+=widths[j - paraStart];
        }
        boolean isSpaceOrTab=c == CHAR_SPACE || c == CHAR_TAB || c == CHAR_ZWSP;
        if (w <= width || isSpaceOrTab) {
          fitWidth=w;
          if (!isSpaceOrTab) {
            fitWidthGraphing=w;
          }
          fit=j + 1;
          if (fmTop < fitTop)           fitTop=fmTop;
          if (fmAscent < fitAscent)           fitAscent=fmAscent;
          if (fmDescent > fitDescent)           fitDescent=fmDescent;
          if (fmBottom > fitBottom)           fitBottom=fmBottom;
          while (breakOpp[breakOppIndex] != -1 && breakOpp[breakOppIndex] < j - paraStart + 1) {
            breakOppIndex++;
          }
          boolean isLineBreak=breakOppIndex < breakOpp.length && breakOpp[breakOppIndex] == j - paraStart + 1;
          if (isLineBreak) {
            okWidth=fitWidthGraphing;
            ok=j + 1;
            if (fitTop < okTop)             okTop=fitTop;
            if (fitAscent < okAscent)             okAscent=fitAscent;
            if (fitDescent > okDescent)             okDescent=fitDescent;
            if (fitBottom > okBottom)             okBottom=fitBottom;
          }
        }
 else {
          int endPos;
          int above, below, top, bottom;
          float currentTextWidth;
          if (ok != here) {
            endPos=ok;
            above=okAscent;
            below=okDescent;
            top=okTop;
            bottom=okBottom;
            currentTextWidth=okWidth;
          }
 else           if (fit != here) {
            endPos=fit;
            above=fitAscent;
            below=fitDescent;
            top=fitTop;
            bottom=fitBottom;
            currentTextWidth=fitWidth;
          }
 else {
            endPos=here + 1;
            while (endPos < spanEnd && widths[endPos - paraStart] == 0) {
              endPos++;
            }
            above=fmAscent;
            below=fmDescent;
            top=fmTop;
            bottom=fmBottom;
            currentTextWidth=widths[here - paraStart];
          }
          int ellipseEnd=endPos;
          if (mMaximumVisibleLineCount == 1 && ellipsize == TextUtils.TruncateAt.MIDDLE) {
            ellipseEnd=paraEnd;
          }
          v=out(source,here,ellipseEnd,above,below,top,bottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,currentTextWidth,paint,true);
          here=endPos;
          j=here - 1;
          ok=fit=here;
          w=0;
          fitWidthGraphing=w;
          fitAscent=fitDescent=fitTop=fitBottom=0;
          okAscent=okDescent=okTop=okBottom=0;
          if (--firstWidthLineLimit <= 0) {
            width=restWidth;
          }
          if (here < spanStart) {
            measured.setPos(here);
            spanEnd=here;
            break;
          }
          if (mLineCount >= mMaximumVisibleLineCount) {
            return;
          }
        }
      }
    }
    if (paraEnd != here && mLineCount < mMaximumVisibleLineCount) {
      if ((fitTop | fitBottom | fitDescent| fitAscent) == 0) {
        paint.getFontMetricsInt(fm);
        fitTop=fm.top;
        fitBottom=fm.bottom;
        fitAscent=fm.ascent;
        fitDescent=fm.descent;
      }
      v=out(source,here,paraEnd,fitAscent,fitDescent,fitTop,fitBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,w,paint,paraEnd != bufEnd);
    }
    paraStart=paraEnd;
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufStart,bufEnd,textDir);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,false,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}",0.989995602462621
195872,"private void calculateEllipsis(int lineStart,int lineEnd,float[] widths,int widthStart,float avail,TextUtils.TruncateAt where,int line,float textWidth,TextPaint paint,boolean forceEllipsis){
  if (textWidth <= avail && !forceEllipsis) {
    mLines[mColumns * line + ELLIPSIS_START]=0;
    mLines[mColumns * line + ELLIPSIS_COUNT]=0;
    return;
  }
  float ellipsisWidth=paint.measureText((where == TextUtils.TruncateAt.END_SMALL) ? ELLIPSIS_TWO_DOTS : ELLIPSIS_NORMAL,0,1);
  int ellipsisStart=0;
  int ellipsisCount=0;
  int len=lineEnd - lineStart;
  if (where == TextUtils.TruncateAt.START) {
    if (mMaximumVisibleLineCount == 1) {
      float sum=0;
      int i;
      for (i=len; i >= 0; i--) {
        float w=widths[i - 1 + lineStart - widthStart];
        if (w + sum + ellipsisWidth > avail) {
          break;
        }
        sum+=w;
      }
      ellipsisStart=0;
      ellipsisCount=i;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
 else   if (where == TextUtils.TruncateAt.END || where == TextUtils.TruncateAt.MARQUEE || where == TextUtils.TruncateAt.END_SMALL) {
    float sum=0;
    int i;
    for (i=0; i < len; i++) {
      float w=widths[i + lineStart - widthStart];
      if (w + sum + ellipsisWidth > avail) {
        break;
      }
      sum+=w;
    }
    ellipsisStart=i;
    ellipsisCount=len - i;
    if (forceEllipsis && ellipsisCount == 0 && len > 0) {
      ellipsisStart=len - 1;
      ellipsisCount=1;
    }
  }
 else {
    if (mMaximumVisibleLineCount == 1) {
      float lsum=0, rsum=0;
      int left=0, right=len;
      float ravail=(avail - ellipsisWidth) / 2;
      for (right=len; right >= 0; right--) {
        float w=widths[right - 1 + lineStart - widthStart];
        if (w + rsum > ravail) {
          break;
        }
        rsum+=w;
      }
      float lavail=avail - ellipsisWidth - rsum;
      for (left=0; left < right; left++) {
        float w=widths[left + lineStart - widthStart];
        if (w + lsum > lavail) {
          break;
        }
        lsum+=w;
      }
      ellipsisStart=left;
      ellipsisCount=right - left;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
  mLines[mColumns * line + ELLIPSIS_START]=ellipsisStart;
  mLines[mColumns * line + ELLIPSIS_COUNT]=ellipsisCount;
}","private void calculateEllipsis(int lineStart,int lineEnd,float[] widths,int widthStart,float avail,TextUtils.TruncateAt where,int line,float textWidth,TextPaint paint,boolean forceEllipsis){
  if (textWidth <= avail && !forceEllipsis) {
    mLines[mColumns * line + ELLIPSIS_START]=0;
    mLines[mColumns * line + ELLIPSIS_COUNT]=0;
    return;
  }
  float ellipsisWidth=paint.measureText((where == TextUtils.TruncateAt.END_SMALL) ? ELLIPSIS_TWO_DOTS : ELLIPSIS_NORMAL,0,1);
  int ellipsisStart=0;
  int ellipsisCount=0;
  int len=lineEnd - lineStart;
  if (where == TextUtils.TruncateAt.START) {
    if (mMaximumVisibleLineCount == 1) {
      float sum=0;
      int i;
      for (i=len; i >= 0; i--) {
        float w=widths[i - 1 + lineStart - widthStart];
        if (w + sum + ellipsisWidth > avail) {
          break;
        }
        sum+=w;
      }
      ellipsisStart=0;
      ellipsisCount=i;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
 else   if (where == TextUtils.TruncateAt.END || where == TextUtils.TruncateAt.MARQUEE || where == TextUtils.TruncateAt.END_SMALL) {
    float sum=0;
    int i;
    for (i=0; i < len; i++) {
      float w=widths[i + lineStart - widthStart];
      if (w + sum + ellipsisWidth > avail) {
        break;
      }
      sum+=w;
    }
    ellipsisStart=i;
    ellipsisCount=len - i;
    if (forceEllipsis && ellipsisCount == 0 && len > 0) {
      ellipsisStart=len - 1;
      ellipsisCount=1;
    }
  }
 else {
    if (mMaximumVisibleLineCount == 1) {
      float lsum=0, rsum=0;
      int left=0, right=len;
      float ravail=(avail - ellipsisWidth) / 2;
      for (right=len; right > 0; right--) {
        float w=widths[right - 1 + lineStart - widthStart];
        if (w + rsum > ravail) {
          break;
        }
        rsum+=w;
      }
      float lavail=avail - ellipsisWidth - rsum;
      for (left=0; left < right; left++) {
        float w=widths[left + lineStart - widthStart];
        if (w + lsum > lavail) {
          break;
        }
        lsum+=w;
      }
      ellipsisStart=left;
      ellipsisCount=right - left;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
  mLines[mColumns * line + ELLIPSIS_START]=ellipsisStart;
  mLines[mColumns * line + ELLIPSIS_COUNT]=ellipsisCount;
}",0.9997896065642752
195873,"void generate(CharSequence source,int bufStart,int bufEnd,TextPaint paint,int outerWidth,TextDirectionHeuristic textDir,float spacingmult,float spacingadd,boolean includepad,boolean trackpad,float ellipsizedWidth,TextUtils.TruncateAt ellipsize){
  int[] breakOpp=null;
  final String localeLanguageTag=paint.getTextLocale().toLanguageTag();
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=mMeasured;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineLimit=mLineCount + 1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          int lmsFirstLine=getLineForOffset(spanned.getSpanStart(lms2));
          firstWidthLineLimit=Math.max(firstWidthLineLimit,lmsFirstLine + lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length != 0) {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    breakOpp=nLineBreakOpportunities(localeLanguageTag,chs,paraEnd - paraStart,breakOpp);
    int breakOppIndex=0;
    int width=firstWidth;
    float w=0;
    int here=paraStart;
    int ok=paraStart;
    float okWidth=w;
    int okAscent=0, okDescent=0, okTop=0, okBottom=0;
    int fit=paraStart;
    float fitWidth=w;
    int fitAscent=0, fitDescent=0, fitTop=0, fitBottom=0;
    float fitWidthGraphing=w;
    boolean hasTabOrEmoji=false;
    boolean hasTab=false;
    TabStops tabStops=null;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      int fmTop=fm.top;
      int fmBottom=fm.bottom;
      int fmAscent=fm.ascent;
      int fmDescent=fm.descent;
      for (int j=spanStart; j < spanEnd; j++) {
        char c=chs[j - paraStart];
        if (c == CHAR_NEW_LINE) {
        }
 else         if (c == CHAR_TAB) {
          if (hasTab == false) {
            hasTab=true;
            hasTabOrEmoji=true;
            if (spanned != null) {
              TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
              if (spans.length > 0) {
                tabStops=new TabStops(TAB_INCREMENT,spans);
              }
            }
          }
          if (tabStops != null) {
            w=tabStops.nextTab(w);
          }
 else {
            w=TabStops.nextDefaultStop(w,TAB_INCREMENT);
          }
        }
 else         if (c >= CHAR_FIRST_HIGH_SURROGATE && c <= CHAR_LAST_LOW_SURROGATE && j + 1 < spanEnd) {
          int emoji=Character.codePointAt(chs,j - paraStart);
          if (emoji >= MIN_EMOJI && emoji <= MAX_EMOJI) {
            Bitmap bm=EMOJI_FACTORY.getBitmapFromAndroidPua(emoji);
            if (bm != null) {
              Paint whichPaint;
              if (spanned == null) {
                whichPaint=paint;
              }
 else {
                whichPaint=mWorkPaint;
              }
              float wid=bm.getWidth() * -whichPaint.ascent() / bm.getHeight();
              w+=wid;
              hasTabOrEmoji=true;
              j++;
            }
 else {
              w+=widths[j - paraStart];
            }
          }
 else {
            w+=widths[j - paraStart];
          }
        }
 else {
          w+=widths[j - paraStart];
        }
        boolean isSpaceOrTab=c == CHAR_SPACE || c == CHAR_TAB || c == CHAR_ZWSP;
        if (w <= width || isSpaceOrTab) {
          fitWidth=w;
          if (!isSpaceOrTab) {
            fitWidthGraphing=w;
          }
          fit=j + 1;
          if (fmTop < fitTop)           fitTop=fmTop;
          if (fmAscent < fitAscent)           fitAscent=fmAscent;
          if (fmDescent > fitDescent)           fitDescent=fmDescent;
          if (fmBottom > fitBottom)           fitBottom=fmBottom;
          while (breakOpp[breakOppIndex] != -1 && breakOpp[breakOppIndex] < j - paraStart + 1) {
            breakOppIndex++;
          }
          boolean isLineBreak=breakOppIndex < breakOpp.length && breakOpp[breakOppIndex] == j - paraStart + 1;
          if (isLineBreak) {
            okWidth=fitWidthGraphing;
            ok=j + 1;
            if (fitTop < okTop)             okTop=fitTop;
            if (fitAscent < okAscent)             okAscent=fitAscent;
            if (fitDescent > okDescent)             okDescent=fitDescent;
            if (fitBottom > okBottom)             okBottom=fitBottom;
          }
        }
 else {
          int endPos;
          int above, below, top, bottom;
          float currentTextWidth;
          if (ok != here) {
            endPos=ok;
            above=okAscent;
            below=okDescent;
            top=okTop;
            bottom=okBottom;
            currentTextWidth=okWidth;
          }
 else           if (fit != here) {
            endPos=fit;
            above=fitAscent;
            below=fitDescent;
            top=fitTop;
            bottom=fitBottom;
            currentTextWidth=fitWidth;
          }
 else {
            endPos=here + 1;
            while (endPos < spanEnd && widths[endPos - paraStart] == 0) {
              endPos++;
            }
            above=fmAscent;
            below=fmDescent;
            top=fmTop;
            bottom=fmBottom;
            currentTextWidth=widths[here - paraStart];
          }
          v=out(source,here,endPos,above,below,top,bottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,currentTextWidth,paint,true);
          here=endPos;
          j=here - 1;
          ok=fit=here;
          w=0;
          fitWidthGraphing=w;
          fitAscent=fitDescent=fitTop=fitBottom=0;
          okAscent=okDescent=okTop=okBottom=0;
          if (--firstWidthLineLimit <= 0) {
            width=restWidth;
          }
          if (here < spanStart) {
            measured.setPos(here);
            spanEnd=here;
            break;
          }
          if (mLineCount >= mMaximumVisibleLineCount) {
            return;
          }
        }
      }
    }
    if (paraEnd != here && mLineCount < mMaximumVisibleLineCount) {
      if ((fitTop | fitBottom | fitDescent| fitAscent) == 0) {
        paint.getFontMetricsInt(fm);
        fitTop=fm.top;
        fitBottom=fm.bottom;
        fitAscent=fm.ascent;
        fitDescent=fm.descent;
      }
      v=out(source,here,paraEnd,fitAscent,fitDescent,fitTop,fitBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,w,paint,paraEnd != bufEnd);
    }
    paraStart=paraEnd;
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufStart,bufEnd,textDir);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,false,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}","void generate(CharSequence source,int bufStart,int bufEnd,TextPaint paint,int outerWidth,TextDirectionHeuristic textDir,float spacingmult,float spacingadd,boolean includepad,boolean trackpad,float ellipsizedWidth,TextUtils.TruncateAt ellipsize){
  int[] breakOpp=null;
  final String localeLanguageTag=paint.getTextLocale().toLanguageTag();
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=mMeasured;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineLimit=mLineCount + 1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          int lmsFirstLine=getLineForOffset(spanned.getSpanStart(lms2));
          firstWidthLineLimit=Math.max(firstWidthLineLimit,lmsFirstLine + lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length != 0) {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    breakOpp=nLineBreakOpportunities(localeLanguageTag,chs,paraEnd - paraStart,breakOpp);
    int breakOppIndex=0;
    int width=firstWidth;
    float w=0;
    int here=paraStart;
    int ok=paraStart;
    float okWidth=w;
    int okAscent=0, okDescent=0, okTop=0, okBottom=0;
    int fit=paraStart;
    float fitWidth=w;
    int fitAscent=0, fitDescent=0, fitTop=0, fitBottom=0;
    float fitWidthGraphing=w;
    boolean hasTabOrEmoji=false;
    boolean hasTab=false;
    TabStops tabStops=null;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      int fmTop=fm.top;
      int fmBottom=fm.bottom;
      int fmAscent=fm.ascent;
      int fmDescent=fm.descent;
      for (int j=spanStart; j < spanEnd; j++) {
        char c=chs[j - paraStart];
        if (c == CHAR_NEW_LINE) {
        }
 else         if (c == CHAR_TAB) {
          if (hasTab == false) {
            hasTab=true;
            hasTabOrEmoji=true;
            if (spanned != null) {
              TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
              if (spans.length > 0) {
                tabStops=new TabStops(TAB_INCREMENT,spans);
              }
            }
          }
          if (tabStops != null) {
            w=tabStops.nextTab(w);
          }
 else {
            w=TabStops.nextDefaultStop(w,TAB_INCREMENT);
          }
        }
 else         if (c >= CHAR_FIRST_HIGH_SURROGATE && c <= CHAR_LAST_LOW_SURROGATE && j + 1 < spanEnd) {
          int emoji=Character.codePointAt(chs,j - paraStart);
          if (emoji >= MIN_EMOJI && emoji <= MAX_EMOJI) {
            Bitmap bm=EMOJI_FACTORY.getBitmapFromAndroidPua(emoji);
            if (bm != null) {
              Paint whichPaint;
              if (spanned == null) {
                whichPaint=paint;
              }
 else {
                whichPaint=mWorkPaint;
              }
              float wid=bm.getWidth() * -whichPaint.ascent() / bm.getHeight();
              w+=wid;
              hasTabOrEmoji=true;
              j++;
            }
 else {
              w+=widths[j - paraStart];
            }
          }
 else {
            w+=widths[j - paraStart];
          }
        }
 else {
          w+=widths[j - paraStart];
        }
        boolean isSpaceOrTab=c == CHAR_SPACE || c == CHAR_TAB || c == CHAR_ZWSP;
        if (w <= width || isSpaceOrTab) {
          fitWidth=w;
          if (!isSpaceOrTab) {
            fitWidthGraphing=w;
          }
          fit=j + 1;
          if (fmTop < fitTop)           fitTop=fmTop;
          if (fmAscent < fitAscent)           fitAscent=fmAscent;
          if (fmDescent > fitDescent)           fitDescent=fmDescent;
          if (fmBottom > fitBottom)           fitBottom=fmBottom;
          while (breakOpp[breakOppIndex] != -1 && breakOpp[breakOppIndex] < j - paraStart + 1) {
            breakOppIndex++;
          }
          boolean isLineBreak=breakOppIndex < breakOpp.length && breakOpp[breakOppIndex] == j - paraStart + 1;
          if (isLineBreak) {
            okWidth=fitWidthGraphing;
            ok=j + 1;
            if (fitTop < okTop)             okTop=fitTop;
            if (fitAscent < okAscent)             okAscent=fitAscent;
            if (fitDescent > okDescent)             okDescent=fitDescent;
            if (fitBottom > okBottom)             okBottom=fitBottom;
          }
        }
 else {
          int endPos;
          int above, below, top, bottom;
          float currentTextWidth;
          if (ok != here) {
            endPos=ok;
            above=okAscent;
            below=okDescent;
            top=okTop;
            bottom=okBottom;
            currentTextWidth=okWidth;
          }
 else           if (fit != here) {
            endPos=fit;
            above=fitAscent;
            below=fitDescent;
            top=fitTop;
            bottom=fitBottom;
            currentTextWidth=fitWidth;
          }
 else {
            endPos=here + 1;
            while (endPos < spanEnd && widths[endPos - paraStart] == 0) {
              endPos++;
            }
            above=fmAscent;
            below=fmDescent;
            top=fmTop;
            bottom=fmBottom;
            currentTextWidth=widths[here - paraStart];
          }
          int ellipseEnd=endPos;
          if (mMaximumVisibleLineCount == 1 && ellipsize == TextUtils.TruncateAt.MIDDLE) {
            ellipseEnd=paraEnd;
          }
          v=out(source,here,ellipseEnd,above,below,top,bottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,currentTextWidth,paint,true);
          here=endPos;
          j=here - 1;
          ok=fit=here;
          w=0;
          fitWidthGraphing=w;
          fitAscent=fitDescent=fitTop=fitBottom=0;
          okAscent=okDescent=okTop=okBottom=0;
          if (--firstWidthLineLimit <= 0) {
            width=restWidth;
          }
          if (here < spanStart) {
            measured.setPos(here);
            spanEnd=here;
            break;
          }
          if (mLineCount >= mMaximumVisibleLineCount) {
            return;
          }
        }
      }
    }
    if (paraEnd != here && mLineCount < mMaximumVisibleLineCount) {
      if ((fitTop | fitBottom | fitDescent| fitAscent) == 0) {
        paint.getFontMetricsInt(fm);
        fitTop=fm.top;
        fitBottom=fm.bottom;
        fitAscent=fm.ascent;
        fitDescent=fm.descent;
      }
      v=out(source,here,paraEnd,fitAscent,fitDescent,fitTop,fitBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,w,paint,paraEnd != bufEnd);
    }
    paraStart=paraEnd;
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufStart,bufEnd,textDir);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,false,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}",0.989995602462621
195874,"private void calculateEllipsis(int lineStart,int lineEnd,float[] widths,int widthStart,float avail,TextUtils.TruncateAt where,int line,float textWidth,TextPaint paint,boolean forceEllipsis){
  if (textWidth <= avail && !forceEllipsis) {
    mLines[mColumns * line + ELLIPSIS_START]=0;
    mLines[mColumns * line + ELLIPSIS_COUNT]=0;
    return;
  }
  float ellipsisWidth=paint.measureText((where == TextUtils.TruncateAt.END_SMALL) ? ELLIPSIS_TWO_DOTS : ELLIPSIS_NORMAL,0,1);
  int ellipsisStart=0;
  int ellipsisCount=0;
  int len=lineEnd - lineStart;
  if (where == TextUtils.TruncateAt.START) {
    if (mMaximumVisibleLineCount == 1) {
      float sum=0;
      int i;
      for (i=len; i >= 0; i--) {
        float w=widths[i - 1 + lineStart - widthStart];
        if (w + sum + ellipsisWidth > avail) {
          break;
        }
        sum+=w;
      }
      ellipsisStart=0;
      ellipsisCount=i;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
 else   if (where == TextUtils.TruncateAt.END || where == TextUtils.TruncateAt.MARQUEE || where == TextUtils.TruncateAt.END_SMALL) {
    float sum=0;
    int i;
    for (i=0; i < len; i++) {
      float w=widths[i + lineStart - widthStart];
      if (w + sum + ellipsisWidth > avail) {
        break;
      }
      sum+=w;
    }
    ellipsisStart=i;
    ellipsisCount=len - i;
    if (forceEllipsis && ellipsisCount == 0 && len > 0) {
      ellipsisStart=len - 1;
      ellipsisCount=1;
    }
  }
 else {
    if (mMaximumVisibleLineCount == 1) {
      float lsum=0, rsum=0;
      int left=0, right=len;
      float ravail=(avail - ellipsisWidth) / 2;
      for (right=len; right >= 0; right--) {
        float w=widths[right - 1 + lineStart - widthStart];
        if (w + rsum > ravail) {
          break;
        }
        rsum+=w;
      }
      float lavail=avail - ellipsisWidth - rsum;
      for (left=0; left < right; left++) {
        float w=widths[left + lineStart - widthStart];
        if (w + lsum > lavail) {
          break;
        }
        lsum+=w;
      }
      ellipsisStart=left;
      ellipsisCount=right - left;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
  mLines[mColumns * line + ELLIPSIS_START]=ellipsisStart;
  mLines[mColumns * line + ELLIPSIS_COUNT]=ellipsisCount;
}","private void calculateEllipsis(int lineStart,int lineEnd,float[] widths,int widthStart,float avail,TextUtils.TruncateAt where,int line,float textWidth,TextPaint paint,boolean forceEllipsis){
  if (textWidth <= avail && !forceEllipsis) {
    mLines[mColumns * line + ELLIPSIS_START]=0;
    mLines[mColumns * line + ELLIPSIS_COUNT]=0;
    return;
  }
  float ellipsisWidth=paint.measureText((where == TextUtils.TruncateAt.END_SMALL) ? ELLIPSIS_TWO_DOTS : ELLIPSIS_NORMAL,0,1);
  int ellipsisStart=0;
  int ellipsisCount=0;
  int len=lineEnd - lineStart;
  if (where == TextUtils.TruncateAt.START) {
    if (mMaximumVisibleLineCount == 1) {
      float sum=0;
      int i;
      for (i=len; i >= 0; i--) {
        float w=widths[i - 1 + lineStart - widthStart];
        if (w + sum + ellipsisWidth > avail) {
          break;
        }
        sum+=w;
      }
      ellipsisStart=0;
      ellipsisCount=i;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
 else   if (where == TextUtils.TruncateAt.END || where == TextUtils.TruncateAt.MARQUEE || where == TextUtils.TruncateAt.END_SMALL) {
    float sum=0;
    int i;
    for (i=0; i < len; i++) {
      float w=widths[i + lineStart - widthStart];
      if (w + sum + ellipsisWidth > avail) {
        break;
      }
      sum+=w;
    }
    ellipsisStart=i;
    ellipsisCount=len - i;
    if (forceEllipsis && ellipsisCount == 0 && len > 0) {
      ellipsisStart=len - 1;
      ellipsisCount=1;
    }
  }
 else {
    if (mMaximumVisibleLineCount == 1) {
      float lsum=0, rsum=0;
      int left=0, right=len;
      float ravail=(avail - ellipsisWidth) / 2;
      for (right=len; right > 0; right--) {
        float w=widths[right - 1 + lineStart - widthStart];
        if (w + rsum > ravail) {
          break;
        }
        rsum+=w;
      }
      float lavail=avail - ellipsisWidth - rsum;
      for (left=0; left < right; left++) {
        float w=widths[left + lineStart - widthStart];
        if (w + lsum > lavail) {
          break;
        }
        lsum+=w;
      }
      ellipsisStart=left;
      ellipsisCount=right - left;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
  mLines[mColumns * line + ELLIPSIS_START]=ellipsisStart;
  mLines[mColumns * line + ELLIPSIS_COUNT]=ellipsisCount;
}",0.9997896065642752
195875,"void generate(CharSequence source,int bufStart,int bufEnd,TextPaint paint,int outerWidth,TextDirectionHeuristic textDir,float spacingmult,float spacingadd,boolean includepad,boolean trackpad,float ellipsizedWidth,TextUtils.TruncateAt ellipsize){
  int[] breakOpp=null;
  final String localeLanguageTag=paint.getTextLocale().toLanguageTag();
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=mMeasured;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineLimit=mLineCount + 1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          int lmsFirstLine=getLineForOffset(spanned.getSpanStart(lms2));
          firstWidthLineLimit=Math.max(firstWidthLineLimit,lmsFirstLine + lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length != 0) {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    breakOpp=nLineBreakOpportunities(localeLanguageTag,chs,paraEnd - paraStart,breakOpp);
    int breakOppIndex=0;
    int width=firstWidth;
    float w=0;
    int here=paraStart;
    int ok=paraStart;
    float okWidth=w;
    int okAscent=0, okDescent=0, okTop=0, okBottom=0;
    int fit=paraStart;
    float fitWidth=w;
    int fitAscent=0, fitDescent=0, fitTop=0, fitBottom=0;
    float fitWidthGraphing=w;
    boolean hasTabOrEmoji=false;
    boolean hasTab=false;
    TabStops tabStops=null;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      int fmTop=fm.top;
      int fmBottom=fm.bottom;
      int fmAscent=fm.ascent;
      int fmDescent=fm.descent;
      for (int j=spanStart; j < spanEnd; j++) {
        char c=chs[j - paraStart];
        if (c == CHAR_NEW_LINE) {
        }
 else         if (c == CHAR_TAB) {
          if (hasTab == false) {
            hasTab=true;
            hasTabOrEmoji=true;
            if (spanned != null) {
              TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
              if (spans.length > 0) {
                tabStops=new TabStops(TAB_INCREMENT,spans);
              }
            }
          }
          if (tabStops != null) {
            w=tabStops.nextTab(w);
          }
 else {
            w=TabStops.nextDefaultStop(w,TAB_INCREMENT);
          }
        }
 else         if (c >= CHAR_FIRST_HIGH_SURROGATE && c <= CHAR_LAST_LOW_SURROGATE && j + 1 < spanEnd) {
          int emoji=Character.codePointAt(chs,j - paraStart);
          if (emoji >= MIN_EMOJI && emoji <= MAX_EMOJI) {
            Bitmap bm=EMOJI_FACTORY.getBitmapFromAndroidPua(emoji);
            if (bm != null) {
              Paint whichPaint;
              if (spanned == null) {
                whichPaint=paint;
              }
 else {
                whichPaint=mWorkPaint;
              }
              float wid=bm.getWidth() * -whichPaint.ascent() / bm.getHeight();
              w+=wid;
              hasTabOrEmoji=true;
              j++;
            }
 else {
              w+=widths[j - paraStart];
            }
          }
 else {
            w+=widths[j - paraStart];
          }
        }
 else {
          w+=widths[j - paraStart];
        }
        boolean isSpaceOrTab=c == CHAR_SPACE || c == CHAR_TAB || c == CHAR_ZWSP;
        if (w <= width || isSpaceOrTab) {
          fitWidth=w;
          if (!isSpaceOrTab) {
            fitWidthGraphing=w;
          }
          fit=j + 1;
          if (fmTop < fitTop)           fitTop=fmTop;
          if (fmAscent < fitAscent)           fitAscent=fmAscent;
          if (fmDescent > fitDescent)           fitDescent=fmDescent;
          if (fmBottom > fitBottom)           fitBottom=fmBottom;
          while (breakOpp[breakOppIndex] != -1 && breakOpp[breakOppIndex] < j - paraStart + 1) {
            breakOppIndex++;
          }
          boolean isLineBreak=breakOppIndex < breakOpp.length && breakOpp[breakOppIndex] == j - paraStart + 1;
          if (isLineBreak) {
            okWidth=fitWidthGraphing;
            ok=j + 1;
            if (fitTop < okTop)             okTop=fitTop;
            if (fitAscent < okAscent)             okAscent=fitAscent;
            if (fitDescent > okDescent)             okDescent=fitDescent;
            if (fitBottom > okBottom)             okBottom=fitBottom;
          }
        }
 else {
          int endPos;
          int above, below, top, bottom;
          float currentTextWidth;
          if (ok != here) {
            endPos=ok;
            above=okAscent;
            below=okDescent;
            top=okTop;
            bottom=okBottom;
            currentTextWidth=okWidth;
          }
 else           if (fit != here) {
            endPos=fit;
            above=fitAscent;
            below=fitDescent;
            top=fitTop;
            bottom=fitBottom;
            currentTextWidth=fitWidth;
          }
 else {
            endPos=here + 1;
            while (endPos < spanEnd && widths[endPos - paraStart] == 0) {
              endPos++;
            }
            above=fmAscent;
            below=fmDescent;
            top=fmTop;
            bottom=fmBottom;
            currentTextWidth=widths[here - paraStart];
          }
          v=out(source,here,endPos,above,below,top,bottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,currentTextWidth,paint,true);
          here=endPos;
          j=here - 1;
          ok=fit=here;
          w=0;
          fitWidthGraphing=w;
          fitAscent=fitDescent=fitTop=fitBottom=0;
          okAscent=okDescent=okTop=okBottom=0;
          if (--firstWidthLineLimit <= 0) {
            width=restWidth;
          }
          if (here < spanStart) {
            measured.setPos(here);
            spanEnd=here;
            break;
          }
          if (mLineCount >= mMaximumVisibleLineCount) {
            return;
          }
        }
      }
    }
    if (paraEnd != here && mLineCount < mMaximumVisibleLineCount) {
      if ((fitTop | fitBottom | fitDescent| fitAscent) == 0) {
        paint.getFontMetricsInt(fm);
        fitTop=fm.top;
        fitBottom=fm.bottom;
        fitAscent=fm.ascent;
        fitDescent=fm.descent;
      }
      v=out(source,here,paraEnd,fitAscent,fitDescent,fitTop,fitBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,w,paint,paraEnd != bufEnd);
    }
    paraStart=paraEnd;
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufStart,bufEnd,textDir);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,false,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}","void generate(CharSequence source,int bufStart,int bufEnd,TextPaint paint,int outerWidth,TextDirectionHeuristic textDir,float spacingmult,float spacingadd,boolean includepad,boolean trackpad,float ellipsizedWidth,TextUtils.TruncateAt ellipsize){
  int[] breakOpp=null;
  final String localeLanguageTag=paint.getTextLocale().toLanguageTag();
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=mMeasured;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineLimit=mLineCount + 1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          int lmsFirstLine=getLineForOffset(spanned.getSpanStart(lms2));
          firstWidthLineLimit=Math.max(firstWidthLineLimit,lmsFirstLine + lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length != 0) {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    breakOpp=nLineBreakOpportunities(localeLanguageTag,chs,paraEnd - paraStart,breakOpp);
    int breakOppIndex=0;
    int width=firstWidth;
    float w=0;
    int here=paraStart;
    int ok=paraStart;
    float okWidth=w;
    int okAscent=0, okDescent=0, okTop=0, okBottom=0;
    int fit=paraStart;
    float fitWidth=w;
    int fitAscent=0, fitDescent=0, fitTop=0, fitBottom=0;
    float fitWidthGraphing=w;
    boolean hasTabOrEmoji=false;
    boolean hasTab=false;
    TabStops tabStops=null;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      int fmTop=fm.top;
      int fmBottom=fm.bottom;
      int fmAscent=fm.ascent;
      int fmDescent=fm.descent;
      for (int j=spanStart; j < spanEnd; j++) {
        char c=chs[j - paraStart];
        if (c == CHAR_NEW_LINE) {
        }
 else         if (c == CHAR_TAB) {
          if (hasTab == false) {
            hasTab=true;
            hasTabOrEmoji=true;
            if (spanned != null) {
              TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
              if (spans.length > 0) {
                tabStops=new TabStops(TAB_INCREMENT,spans);
              }
            }
          }
          if (tabStops != null) {
            w=tabStops.nextTab(w);
          }
 else {
            w=TabStops.nextDefaultStop(w,TAB_INCREMENT);
          }
        }
 else         if (c >= CHAR_FIRST_HIGH_SURROGATE && c <= CHAR_LAST_LOW_SURROGATE && j + 1 < spanEnd) {
          int emoji=Character.codePointAt(chs,j - paraStart);
          if (emoji >= MIN_EMOJI && emoji <= MAX_EMOJI) {
            Bitmap bm=EMOJI_FACTORY.getBitmapFromAndroidPua(emoji);
            if (bm != null) {
              Paint whichPaint;
              if (spanned == null) {
                whichPaint=paint;
              }
 else {
                whichPaint=mWorkPaint;
              }
              float wid=bm.getWidth() * -whichPaint.ascent() / bm.getHeight();
              w+=wid;
              hasTabOrEmoji=true;
              j++;
            }
 else {
              w+=widths[j - paraStart];
            }
          }
 else {
            w+=widths[j - paraStart];
          }
        }
 else {
          w+=widths[j - paraStart];
        }
        boolean isSpaceOrTab=c == CHAR_SPACE || c == CHAR_TAB || c == CHAR_ZWSP;
        if (w <= width || isSpaceOrTab) {
          fitWidth=w;
          if (!isSpaceOrTab) {
            fitWidthGraphing=w;
          }
          fit=j + 1;
          if (fmTop < fitTop)           fitTop=fmTop;
          if (fmAscent < fitAscent)           fitAscent=fmAscent;
          if (fmDescent > fitDescent)           fitDescent=fmDescent;
          if (fmBottom > fitBottom)           fitBottom=fmBottom;
          while (breakOpp[breakOppIndex] != -1 && breakOpp[breakOppIndex] < j - paraStart + 1) {
            breakOppIndex++;
          }
          boolean isLineBreak=breakOppIndex < breakOpp.length && breakOpp[breakOppIndex] == j - paraStart + 1;
          if (isLineBreak) {
            okWidth=fitWidthGraphing;
            ok=j + 1;
            if (fitTop < okTop)             okTop=fitTop;
            if (fitAscent < okAscent)             okAscent=fitAscent;
            if (fitDescent > okDescent)             okDescent=fitDescent;
            if (fitBottom > okBottom)             okBottom=fitBottom;
          }
        }
 else {
          int endPos;
          int above, below, top, bottom;
          float currentTextWidth;
          if (ok != here) {
            endPos=ok;
            above=okAscent;
            below=okDescent;
            top=okTop;
            bottom=okBottom;
            currentTextWidth=okWidth;
          }
 else           if (fit != here) {
            endPos=fit;
            above=fitAscent;
            below=fitDescent;
            top=fitTop;
            bottom=fitBottom;
            currentTextWidth=fitWidth;
          }
 else {
            endPos=here + 1;
            while (endPos < spanEnd && widths[endPos - paraStart] == 0) {
              endPos++;
            }
            above=fmAscent;
            below=fmDescent;
            top=fmTop;
            bottom=fmBottom;
            currentTextWidth=widths[here - paraStart];
          }
          int ellipseEnd=endPos;
          if (mMaximumVisibleLineCount == 1 && ellipsize == TextUtils.TruncateAt.MIDDLE) {
            ellipseEnd=paraEnd;
          }
          v=out(source,here,ellipseEnd,above,below,top,bottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,currentTextWidth,paint,true);
          here=endPos;
          j=here - 1;
          ok=fit=here;
          w=0;
          fitWidthGraphing=w;
          fitAscent=fitDescent=fitTop=fitBottom=0;
          okAscent=okDescent=okTop=okBottom=0;
          if (--firstWidthLineLimit <= 0) {
            width=restWidth;
          }
          if (here < spanStart) {
            measured.setPos(here);
            spanEnd=here;
            break;
          }
          if (mLineCount >= mMaximumVisibleLineCount) {
            return;
          }
        }
      }
    }
    if (paraEnd != here && mLineCount < mMaximumVisibleLineCount) {
      if ((fitTop | fitBottom | fitDescent| fitAscent) == 0) {
        paint.getFontMetricsInt(fm);
        fitTop=fm.top;
        fitBottom=fm.bottom;
        fitAscent=fm.ascent;
        fitDescent=fm.descent;
      }
      v=out(source,here,paraEnd,fitAscent,fitDescent,fitTop,fitBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,hasTabOrEmoji,needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,w,paint,paraEnd != bufEnd);
    }
    paraStart=paraEnd;
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufStart,bufEnd,textDir);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,false,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}",0.989995602462621
195876,"private void calculateEllipsis(int lineStart,int lineEnd,float[] widths,int widthStart,float avail,TextUtils.TruncateAt where,int line,float textWidth,TextPaint paint,boolean forceEllipsis){
  if (textWidth <= avail && !forceEllipsis) {
    mLines[mColumns * line + ELLIPSIS_START]=0;
    mLines[mColumns * line + ELLIPSIS_COUNT]=0;
    return;
  }
  float ellipsisWidth=paint.measureText((where == TextUtils.TruncateAt.END_SMALL) ? ELLIPSIS_TWO_DOTS : ELLIPSIS_NORMAL,0,1);
  int ellipsisStart=0;
  int ellipsisCount=0;
  int len=lineEnd - lineStart;
  if (where == TextUtils.TruncateAt.START) {
    if (mMaximumVisibleLineCount == 1) {
      float sum=0;
      int i;
      for (i=len; i >= 0; i--) {
        float w=widths[i - 1 + lineStart - widthStart];
        if (w + sum + ellipsisWidth > avail) {
          break;
        }
        sum+=w;
      }
      ellipsisStart=0;
      ellipsisCount=i;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
 else   if (where == TextUtils.TruncateAt.END || where == TextUtils.TruncateAt.MARQUEE || where == TextUtils.TruncateAt.END_SMALL) {
    float sum=0;
    int i;
    for (i=0; i < len; i++) {
      float w=widths[i + lineStart - widthStart];
      if (w + sum + ellipsisWidth > avail) {
        break;
      }
      sum+=w;
    }
    ellipsisStart=i;
    ellipsisCount=len - i;
    if (forceEllipsis && ellipsisCount == 0 && len > 0) {
      ellipsisStart=len - 1;
      ellipsisCount=1;
    }
  }
 else {
    if (mMaximumVisibleLineCount == 1) {
      float lsum=0, rsum=0;
      int left=0, right=len;
      float ravail=(avail - ellipsisWidth) / 2;
      for (right=len; right >= 0; right--) {
        float w=widths[right - 1 + lineStart - widthStart];
        if (w + rsum > ravail) {
          break;
        }
        rsum+=w;
      }
      float lavail=avail - ellipsisWidth - rsum;
      for (left=0; left < right; left++) {
        float w=widths[left + lineStart - widthStart];
        if (w + lsum > lavail) {
          break;
        }
        lsum+=w;
      }
      ellipsisStart=left;
      ellipsisCount=right - left;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
  mLines[mColumns * line + ELLIPSIS_START]=ellipsisStart;
  mLines[mColumns * line + ELLIPSIS_COUNT]=ellipsisCount;
}","private void calculateEllipsis(int lineStart,int lineEnd,float[] widths,int widthStart,float avail,TextUtils.TruncateAt where,int line,float textWidth,TextPaint paint,boolean forceEllipsis){
  if (textWidth <= avail && !forceEllipsis) {
    mLines[mColumns * line + ELLIPSIS_START]=0;
    mLines[mColumns * line + ELLIPSIS_COUNT]=0;
    return;
  }
  float ellipsisWidth=paint.measureText((where == TextUtils.TruncateAt.END_SMALL) ? ELLIPSIS_TWO_DOTS : ELLIPSIS_NORMAL,0,1);
  int ellipsisStart=0;
  int ellipsisCount=0;
  int len=lineEnd - lineStart;
  if (where == TextUtils.TruncateAt.START) {
    if (mMaximumVisibleLineCount == 1) {
      float sum=0;
      int i;
      for (i=len; i >= 0; i--) {
        float w=widths[i - 1 + lineStart - widthStart];
        if (w + sum + ellipsisWidth > avail) {
          break;
        }
        sum+=w;
      }
      ellipsisStart=0;
      ellipsisCount=i;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
 else   if (where == TextUtils.TruncateAt.END || where == TextUtils.TruncateAt.MARQUEE || where == TextUtils.TruncateAt.END_SMALL) {
    float sum=0;
    int i;
    for (i=0; i < len; i++) {
      float w=widths[i + lineStart - widthStart];
      if (w + sum + ellipsisWidth > avail) {
        break;
      }
      sum+=w;
    }
    ellipsisStart=i;
    ellipsisCount=len - i;
    if (forceEllipsis && ellipsisCount == 0 && len > 0) {
      ellipsisStart=len - 1;
      ellipsisCount=1;
    }
  }
 else {
    if (mMaximumVisibleLineCount == 1) {
      float lsum=0, rsum=0;
      int left=0, right=len;
      float ravail=(avail - ellipsisWidth) / 2;
      for (right=len; right > 0; right--) {
        float w=widths[right - 1 + lineStart - widthStart];
        if (w + rsum > ravail) {
          break;
        }
        rsum+=w;
      }
      float lavail=avail - ellipsisWidth - rsum;
      for (left=0; left < right; left++) {
        float w=widths[left + lineStart - widthStart];
        if (w + lsum > lavail) {
          break;
        }
        lsum+=w;
      }
      ellipsisStart=left;
      ellipsisCount=right - left;
    }
 else {
      if (Log.isLoggable(TAG,Log.WARN)) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
  mLines[mColumns * line + ELLIPSIS_START]=ellipsisStart;
  mLines[mColumns * line + ELLIPSIS_COUNT]=ellipsisCount;
}",0.9997896065642752
195877,"private static Calendar tomorrowMidnight(){
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(System.currentTimeMillis());
  calendar.set(Calendar.HOUR_OF_DAY,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MILLISECOND,0);
  calendar.add(Calendar.DAY_OF_MONTH,1);
  return calendar;
}","private static Calendar tomorrowMidnight(){
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(System.currentTimeMillis());
  calendar.set(Calendar.HOUR_OF_DAY,3);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MILLISECOND,0);
  calendar.add(Calendar.DAY_OF_MONTH,1);
  return calendar;
}",0.9971830985915492
195878,"@Override public boolean onStartJob(JobParameters params){
  mJobParams=params;
  MountService ms=MountService.sSelf;
  if (ms != null) {
synchronized (mFinishCallback) {
      mStarted=true;
    }
    ms.runIdleMaintenance(mFinishCallback);
  }
  return ms != null;
}","@Override public boolean onStartJob(JobParameters params){
  try {
    ActivityManagerNative.getDefault().performIdleMaintenance();
  }
 catch (  RemoteException e) {
  }
  mJobParams=params;
  MountService ms=MountService.sSelf;
  if (ms != null) {
synchronized (mFinishCallback) {
      mStarted=true;
    }
    ms.runIdleMaintenance(mFinishCallback);
  }
  return ms != null;
}",0.8271604938271605
195879,"void dumpProcessesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  int numPers=0;
  pw.println(""String_Node_Str"");
  if (dumpAll) {
    final int NP=mProcessNames.getMap().size();
    for (int ip=0; ip < NP; ip++) {
      SparseArray<ProcessRecord> procs=mProcessNames.getMap().valueAt(ip);
      final int NA=procs.size();
      for (int ia=0; ia < NA; ia++) {
        ProcessRecord r=procs.valueAt(ia);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!needSep) {
          pw.println(""String_Node_Str"");
          needSep=true;
          printedAnything=true;
        }
        pw.print(r.persistent ? ""String_Node_Str"" : ""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(procs.keyAt(ia));
        pw.print(""String_Node_Str"");
        pw.println(r);
        r.dump(pw,""String_Node_Str"");
        if (r.persistent) {
          numPers++;
        }
      }
    }
  }
  if (mIsolatedProcesses.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mIsolatedProcesses.size(); i++) {
      ProcessRecord r=mIsolatedProcesses.valueAt(i);
      if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        pw.println(""String_Node_Str"");
        printedAnything=true;
        printed=true;
        needSep=true;
      }
      pw.println(String.format(""String_Node_Str"",""String_Node_Str"",i,r.toString()));
    }
  }
  if (mLruProcesses.size() > 0) {
    if (needSep) {
      pw.println();
    }
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size());
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessActivityStart);
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessServiceStart);
    pw.println(""String_Node_Str"");
    dumpProcessOomList(pw,this,mLruProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,dumpPackage);
    needSep=true;
    printedAnything=true;
  }
  if (dumpAll || dumpPackage != null) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mPidsSelfLocked.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.valueAt(i);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mPidsSelfLocked.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mPidsSelfLocked.valueAt(i));
      }
    }
  }
  if (mForegroundProcesses.size() > 0) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mForegroundProcesses.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.get(mForegroundProcesses.valueAt(i).pid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mForegroundProcesses.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mForegroundProcesses.valueAt(i));
      }
    }
  }
  if (mPersistentStartingProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mPersistentStartingProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mRemovedProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mRemovedProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mProcessesOnHold.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mProcessesOnHold,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  needSep=dumpProcessesToGc(fd,pw,args,opti,needSep,dumpAll,dumpPackage);
  if (mProcessCrashTimes.getMap().size() > 0) {
    boolean printed=false;
    long now=SystemClock.uptimeMillis();
    final ArrayMap<String,SparseArray<Long>> pmap=mProcessCrashTimes.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<Long> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        TimeUtils.formatDuration(now - uids.valueAt(i),pw);
        pw.println(""String_Node_Str"");
      }
    }
  }
  if (mBadProcesses.getMap().size() > 0) {
    boolean printed=false;
    final ArrayMap<String,SparseArray<BadProcessInfo>> pmap=mBadProcesses.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<BadProcessInfo> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printedAnything=true;
        }
        BadProcessInfo info=uids.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        pw.println(info.time);
        if (info.shortMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.shortMsg);
        }
        if (info.longMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.longMsg);
        }
        if (info.stack != null) {
          pw.println(""String_Node_Str"");
          int lastPos=0;
          for (int pos=0; pos < info.stack.length(); pos++) {
            if (info.stack.charAt(pos) == '\n') {
              pw.print(""String_Node_Str"");
              pw.write(info.stack,lastPos,pos - lastPos);
              pw.println();
              lastPos=pos + 1;
            }
          }
          if (lastPos < info.stack.length()) {
            pw.print(""String_Node_Str"");
            pw.write(info.stack,lastPos,info.stack.length() - lastPos);
            pw.println();
          }
        }
      }
    }
  }
  if (dumpPackage == null) {
    pw.println();
    needSep=false;
    pw.println(""String_Node_Str"");
    for (int i=0; i < mStartedUsers.size(); i++) {
      UserStartedState uss=mStartedUsers.valueAt(i);
      pw.print(""String_Node_Str"");
      pw.print(uss.mHandle.getIdentifier());
      pw.print(""String_Node_Str"");
      uss.dump(""String_Node_Str"",pw);
    }
    pw.print(""String_Node_Str"");
    for (int i=0; i < mStartedUserArray.length; i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mStartedUserArray[i]);
    }
    pw.println(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    for (int i=0; i < mUserLru.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mUserLru.get(i));
    }
    pw.println(""String_Node_Str"");
    if (dumpAll) {
      pw.print(""String_Node_Str"");
      pw.println(Arrays.toString(mStartedUserArray));
    }
synchronized (mUserProfileGroupIdsSelfLocked) {
      if (mUserProfileGroupIdsSelfLocked.size() > 0) {
        pw.println(""String_Node_Str"");
        for (int i=0; i < mUserProfileGroupIdsSelfLocked.size(); i++) {
          pw.print(""String_Node_Str"");
          pw.print(mUserProfileGroupIdsSelfLocked.keyAt(i));
          pw.print(""String_Node_Str"");
          pw.println(mUserProfileGroupIdsSelfLocked.valueAt(i));
        }
      }
    }
  }
  if (mHomeProcess != null && (dumpPackage == null || mHomeProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHomeProcess);
  }
  if (mPreviousProcess != null && (dumpPackage == null || mPreviousProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mPreviousProcess);
  }
  if (dumpAll) {
    StringBuilder sb=new StringBuilder(128);
    sb.append(""String_Node_Str"");
    TimeUtils.formatDuration(mPreviousProcessVisibleTime,sb);
    pw.println(sb);
  }
  if (mHeavyWeightProcess != null && (dumpPackage == null || mHeavyWeightProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHeavyWeightProcess);
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + mConfiguration);
  }
  if (dumpAll) {
    pw.println(""String_Node_Str"" + getFocusedStack().mConfigWillChange);
    if (mCompatModePackages.getPackages().size() > 0) {
      boolean printed=false;
      for (      Map.Entry<String,Integer> entry : mCompatModePackages.getPackages().entrySet()) {
        String pkg=entry.getKey();
        int mode=entry.getValue();
        if (dumpPackage != null && !dumpPackage.equals(pkg)) {
          continue;
        }
        if (!printed) {
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pkg);
        pw.print(""String_Node_Str"");
        pw.print(mode);
        pw.println();
      }
    }
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + PowerManagerInternal.wakefulnessToString(mWakefulness));
    pw.println(""String_Node_Str"" + mSleeping + ""String_Node_Str""+ lockScreenShownToString());
    pw.print(""String_Node_Str"" + mShuttingDown + ""String_Node_Str""+ mRunningVoice);
  }
  if (mDebugApp != null || mOrigDebugApp != null || mDebugTransient || mOrigWaitForDebugger) {
    if (dumpPackage == null || dumpPackage.equals(mDebugApp) || dumpPackage.equals(mOrigDebugApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mDebugApp + ""String_Node_Str""+ mOrigDebugApp+ ""String_Node_Str""+ mDebugTransient+ ""String_Node_Str""+ mOrigWaitForDebugger);
    }
  }
  if (mOpenGlTraceApp != null) {
    if (dumpPackage == null || dumpPackage.equals(mOpenGlTraceApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mOpenGlTraceApp);
    }
  }
  if (mProfileApp != null || mProfileProc != null || mProfileFile != null || mProfileFd != null) {
    if (dumpPackage == null || dumpPackage.equals(mProfileApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mProfileApp + ""String_Node_Str""+ mProfileProc);
      pw.println(""String_Node_Str"" + mProfileFile + ""String_Node_Str""+ mProfileFd);
      pw.println(""String_Node_Str"" + mSamplingInterval + ""String_Node_Str""+ mAutoStopProfiler);
      pw.println(""String_Node_Str"" + mProfileType);
    }
  }
  if (dumpPackage == null) {
    if (mAlwaysFinishActivities || mController != null) {
      pw.println(""String_Node_Str"" + mAlwaysFinishActivities + ""String_Node_Str""+ mController);
    }
    if (dumpAll) {
      pw.println(""String_Node_Str"" + numPers);
      pw.println(""String_Node_Str"" + mProcessesReady + ""String_Node_Str""+ mSystemReady+ ""String_Node_Str""+ mBooted+ ""String_Node_Str""+ mFactoryTest);
      pw.println(""String_Node_Str"" + mBooting + ""String_Node_Str""+ mCallFinishBooting+ ""String_Node_Str""+ mBootAnimationComplete);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckRealtime,pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckUptime,pw);
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"" + mStackSupervisor.mGoingToSleep);
      pw.println(""String_Node_Str"" + mStackSupervisor.mLaunchingActivity);
      pw.println(""String_Node_Str"" + mAdjSeq + ""String_Node_Str""+ mLruSeq);
      pw.println(""String_Node_Str"" + mNumNonCachedProcs + ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ ""String_Node_Str""+ mNumCachedHiddenProcs+ ""String_Node_Str""+ mNumServiceProcs+ ""String_Node_Str""+ mNewNumServiceProcs);
      pw.println(""String_Node_Str"" + mAllowLowerMemLevel + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mLastNumProcesses);
      long now=SystemClock.uptimeMillis();
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(now,mLastIdleTime,pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(getLowRamTimeSinceIdle(now),pw);
      pw.println();
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}","void dumpProcessesLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage){
  boolean needSep=false;
  boolean printedAnything=false;
  int numPers=0;
  pw.println(""String_Node_Str"");
  if (dumpAll) {
    final int NP=mProcessNames.getMap().size();
    for (int ip=0; ip < NP; ip++) {
      SparseArray<ProcessRecord> procs=mProcessNames.getMap().valueAt(ip);
      final int NA=procs.size();
      for (int ia=0; ia < NA; ia++) {
        ProcessRecord r=procs.valueAt(ia);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!needSep) {
          pw.println(""String_Node_Str"");
          needSep=true;
          printedAnything=true;
        }
        pw.print(r.persistent ? ""String_Node_Str"" : ""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(procs.keyAt(ia));
        pw.print(""String_Node_Str"");
        pw.println(r);
        r.dump(pw,""String_Node_Str"");
        if (r.persistent) {
          numPers++;
        }
      }
    }
  }
  if (mIsolatedProcesses.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mIsolatedProcesses.size(); i++) {
      ProcessRecord r=mIsolatedProcesses.valueAt(i);
      if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        pw.println(""String_Node_Str"");
        printedAnything=true;
        printed=true;
        needSep=true;
      }
      pw.println(String.format(""String_Node_Str"",""String_Node_Str"",i,r.toString()));
    }
  }
  if (mLruProcesses.size() > 0) {
    if (needSep) {
      pw.println();
    }
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size());
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessActivityStart);
    pw.print(""String_Node_Str"");
    pw.print(mLruProcesses.size() - mLruProcessServiceStart);
    pw.println(""String_Node_Str"");
    dumpProcessOomList(pw,this,mLruProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,dumpPackage);
    needSep=true;
    printedAnything=true;
  }
  if (dumpAll || dumpPackage != null) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mPidsSelfLocked.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.valueAt(i);
        if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mPidsSelfLocked.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mPidsSelfLocked.valueAt(i));
      }
    }
  }
  if (mForegroundProcesses.size() > 0) {
synchronized (mPidsSelfLocked) {
      boolean printed=false;
      for (int i=0; i < mForegroundProcesses.size(); i++) {
        ProcessRecord r=mPidsSelfLocked.get(mForegroundProcesses.valueAt(i).pid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(mForegroundProcesses.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mForegroundProcesses.valueAt(i));
      }
    }
  }
  if (mPersistentStartingProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mPersistentStartingProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mRemovedProcesses.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mRemovedProcesses,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  if (mProcessesOnHold.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    printedAnything=true;
    pw.println(""String_Node_Str"");
    dumpProcessList(pw,this,mProcessesOnHold,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dumpPackage);
  }
  needSep=dumpProcessesToGc(fd,pw,args,opti,needSep,dumpAll,dumpPackage);
  if (mProcessCrashTimes.getMap().size() > 0) {
    boolean printed=false;
    long now=SystemClock.uptimeMillis();
    final ArrayMap<String,SparseArray<Long>> pmap=mProcessCrashTimes.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<Long> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printed=true;
          printedAnything=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        TimeUtils.formatDuration(now - uids.valueAt(i),pw);
        pw.println(""String_Node_Str"");
      }
    }
  }
  if (mBadProcesses.getMap().size() > 0) {
    boolean printed=false;
    final ArrayMap<String,SparseArray<BadProcessInfo>> pmap=mBadProcesses.getMap();
    final int NP=pmap.size();
    for (int ip=0; ip < NP; ip++) {
      String pname=pmap.keyAt(ip);
      SparseArray<BadProcessInfo> uids=pmap.valueAt(ip);
      final int N=uids.size();
      for (int i=0; i < N; i++) {
        int puid=uids.keyAt(i);
        ProcessRecord r=mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println(""String_Node_Str"");
          printedAnything=true;
        }
        BadProcessInfo info=uids.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.print(pname);
        pw.print(""String_Node_Str"");
        pw.print(puid);
        pw.print(""String_Node_Str"");
        pw.println(info.time);
        if (info.shortMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.shortMsg);
        }
        if (info.longMsg != null) {
          pw.print(""String_Node_Str"");
          pw.println(info.longMsg);
        }
        if (info.stack != null) {
          pw.println(""String_Node_Str"");
          int lastPos=0;
          for (int pos=0; pos < info.stack.length(); pos++) {
            if (info.stack.charAt(pos) == '\n') {
              pw.print(""String_Node_Str"");
              pw.write(info.stack,lastPos,pos - lastPos);
              pw.println();
              lastPos=pos + 1;
            }
          }
          if (lastPos < info.stack.length()) {
            pw.print(""String_Node_Str"");
            pw.write(info.stack,lastPos,info.stack.length() - lastPos);
            pw.println();
          }
        }
      }
    }
  }
  if (dumpPackage == null) {
    pw.println();
    needSep=false;
    pw.println(""String_Node_Str"");
    for (int i=0; i < mStartedUsers.size(); i++) {
      UserStartedState uss=mStartedUsers.valueAt(i);
      pw.print(""String_Node_Str"");
      pw.print(uss.mHandle.getIdentifier());
      pw.print(""String_Node_Str"");
      uss.dump(""String_Node_Str"",pw);
    }
    pw.print(""String_Node_Str"");
    for (int i=0; i < mStartedUserArray.length; i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mStartedUserArray[i]);
    }
    pw.println(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    for (int i=0; i < mUserLru.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(mUserLru.get(i));
    }
    pw.println(""String_Node_Str"");
    if (dumpAll) {
      pw.print(""String_Node_Str"");
      pw.println(Arrays.toString(mStartedUserArray));
    }
synchronized (mUserProfileGroupIdsSelfLocked) {
      if (mUserProfileGroupIdsSelfLocked.size() > 0) {
        pw.println(""String_Node_Str"");
        for (int i=0; i < mUserProfileGroupIdsSelfLocked.size(); i++) {
          pw.print(""String_Node_Str"");
          pw.print(mUserProfileGroupIdsSelfLocked.keyAt(i));
          pw.print(""String_Node_Str"");
          pw.println(mUserProfileGroupIdsSelfLocked.valueAt(i));
        }
      }
    }
  }
  if (mHomeProcess != null && (dumpPackage == null || mHomeProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHomeProcess);
  }
  if (mPreviousProcess != null && (dumpPackage == null || mPreviousProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mPreviousProcess);
  }
  if (dumpAll) {
    StringBuilder sb=new StringBuilder(128);
    sb.append(""String_Node_Str"");
    TimeUtils.formatDuration(mPreviousProcessVisibleTime,sb);
    pw.println(sb);
  }
  if (mHeavyWeightProcess != null && (dumpPackage == null || mHeavyWeightProcess.pkgList.containsKey(dumpPackage))) {
    if (needSep) {
      pw.println();
      needSep=false;
    }
    pw.println(""String_Node_Str"" + mHeavyWeightProcess);
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + mConfiguration);
  }
  if (dumpAll) {
    pw.println(""String_Node_Str"" + getFocusedStack().mConfigWillChange);
    if (mCompatModePackages.getPackages().size() > 0) {
      boolean printed=false;
      for (      Map.Entry<String,Integer> entry : mCompatModePackages.getPackages().entrySet()) {
        String pkg=entry.getKey();
        int mode=entry.getValue();
        if (dumpPackage != null && !dumpPackage.equals(pkg)) {
          continue;
        }
        if (!printed) {
          pw.println(""String_Node_Str"");
          printed=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(pkg);
        pw.print(""String_Node_Str"");
        pw.print(mode);
        pw.println();
      }
    }
  }
  if (dumpPackage == null) {
    pw.println(""String_Node_Str"" + PowerManagerInternal.wakefulnessToString(mWakefulness));
    pw.println(""String_Node_Str"" + mSleeping + ""String_Node_Str""+ lockScreenShownToString());
    pw.println(""String_Node_Str"" + mShuttingDown + ""String_Node_Str""+ mRunningVoice);
  }
  if (mDebugApp != null || mOrigDebugApp != null || mDebugTransient || mOrigWaitForDebugger) {
    if (dumpPackage == null || dumpPackage.equals(mDebugApp) || dumpPackage.equals(mOrigDebugApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mDebugApp + ""String_Node_Str""+ mOrigDebugApp+ ""String_Node_Str""+ mDebugTransient+ ""String_Node_Str""+ mOrigWaitForDebugger);
    }
  }
  if (mOpenGlTraceApp != null) {
    if (dumpPackage == null || dumpPackage.equals(mOpenGlTraceApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mOpenGlTraceApp);
    }
  }
  if (mProfileApp != null || mProfileProc != null || mProfileFile != null || mProfileFd != null) {
    if (dumpPackage == null || dumpPackage.equals(mProfileApp)) {
      if (needSep) {
        pw.println();
        needSep=false;
      }
      pw.println(""String_Node_Str"" + mProfileApp + ""String_Node_Str""+ mProfileProc);
      pw.println(""String_Node_Str"" + mProfileFile + ""String_Node_Str""+ mProfileFd);
      pw.println(""String_Node_Str"" + mSamplingInterval + ""String_Node_Str""+ mAutoStopProfiler);
      pw.println(""String_Node_Str"" + mProfileType);
    }
  }
  if (dumpPackage == null) {
    if (mAlwaysFinishActivities || mController != null) {
      pw.println(""String_Node_Str"" + mAlwaysFinishActivities + ""String_Node_Str""+ mController);
    }
    if (dumpAll) {
      pw.println(""String_Node_Str"" + numPers);
      pw.println(""String_Node_Str"" + mProcessesReady + ""String_Node_Str""+ mSystemReady+ ""String_Node_Str""+ mBooted+ ""String_Node_Str""+ mFactoryTest);
      pw.println(""String_Node_Str"" + mBooting + ""String_Node_Str""+ mCallFinishBooting+ ""String_Node_Str""+ mBootAnimationComplete);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckRealtime,pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mLastPowerCheckUptime,pw);
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"" + mStackSupervisor.mGoingToSleep);
      pw.println(""String_Node_Str"" + mStackSupervisor.mLaunchingActivity);
      pw.println(""String_Node_Str"" + mAdjSeq + ""String_Node_Str""+ mLruSeq);
      pw.println(""String_Node_Str"" + mNumNonCachedProcs + ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ ""String_Node_Str""+ mNumCachedHiddenProcs+ ""String_Node_Str""+ mNumServiceProcs+ ""String_Node_Str""+ mNewNumServiceProcs);
      pw.println(""String_Node_Str"" + mAllowLowerMemLevel + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mLastNumProcesses);
      long now=SystemClock.uptimeMillis();
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(now,mLastIdleTime,pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(getLowRamTimeSinceIdle(now),pw);
      pw.println();
    }
  }
  if (!printedAnything) {
    pw.println(""String_Node_Str"");
  }
}",0.9999274784248314
195880,"private Provider parseProvider(Package owner,Resources res,XmlPullParser parser,AttributeSet attrs,int flags,String[] outError) throws XmlPullParserException, IOException {
  TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.AndroidManifestProvider);
  if (mParseProviderArgs == null) {
    mParseProviderArgs=new ParseComponentArgs(owner,outError,com.android.internal.R.styleable.AndroidManifestProvider_name,com.android.internal.R.styleable.AndroidManifestProvider_label,com.android.internal.R.styleable.AndroidManifestProvider_icon,com.android.internal.R.styleable.AndroidManifestProvider_logo,com.android.internal.R.styleable.AndroidManifestProvider_banner,mSeparateProcesses,com.android.internal.R.styleable.AndroidManifestProvider_process,com.android.internal.R.styleable.AndroidManifestProvider_description,com.android.internal.R.styleable.AndroidManifestProvider_enabled);
    mParseProviderArgs.tag=""String_Node_Str"";
  }
  mParseProviderArgs.sa=sa;
  mParseProviderArgs.flags=flags;
  Provider p=new Provider(mParseProviderArgs,new ProviderInfo());
  if (outError[0] != null) {
    sa.recycle();
    return null;
  }
  boolean providerExportedDefault=false;
  if (owner.applicationInfo.targetSdkVersion < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    providerExportedDefault=true;
  }
  p.info.exported=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_exported,providerExportedDefault);
  String cpname=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_authorities,0);
  p.info.isSyncable=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_syncable,false);
  String permission=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_permission,0);
  String str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_readPermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.readPermission=owner.applicationInfo.permission;
  }
 else {
    p.info.readPermission=str.length() > 0 ? str.toString().intern() : null;
  }
  str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_writePermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.writePermission=owner.applicationInfo.permission;
  }
 else {
    p.info.writePermission=str.length() > 0 ? str.toString().intern() : null;
  }
  p.info.grantUriPermissions=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_grantUriPermissions,false);
  p.info.multiprocess=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_multiprocess,false);
  p.info.initOrder=sa.getInt(com.android.internal.R.styleable.AndroidManifestProvider_initOrder,0);
  p.info.flags=0;
  if (sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_singleUser,false)) {
    p.info.flags|=ProviderInfo.FLAG_SINGLE_USER;
    if (p.info.exported && (flags & PARSE_IS_PRIVILEGED) == 0) {
      Slog.w(TAG,""String_Node_Str"" + p.className + ""String_Node_Str""+ mArchiveSourcePath+ ""String_Node_Str""+ parser.getPositionDescription());
      p.info.exported=false;
    }
  }
  sa.recycle();
  if ((owner.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
    if (p.info.processName == owner.packageName) {
      outError[0]=""String_Node_Str"";
      return null;
    }
  }
  if (cpname == null) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  p.info.authority=cpname.intern();
  if (!parseProviderTags(res,parser,attrs,p,outError)) {
    return null;
  }
  return p;
}","private Provider parseProvider(Package owner,Resources res,XmlPullParser parser,AttributeSet attrs,int flags,String[] outError) throws XmlPullParserException, IOException {
  TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.AndroidManifestProvider);
  if (mParseProviderArgs == null) {
    mParseProviderArgs=new ParseComponentArgs(owner,outError,com.android.internal.R.styleable.AndroidManifestProvider_name,com.android.internal.R.styleable.AndroidManifestProvider_label,com.android.internal.R.styleable.AndroidManifestProvider_icon,com.android.internal.R.styleable.AndroidManifestProvider_logo,com.android.internal.R.styleable.AndroidManifestProvider_banner,mSeparateProcesses,com.android.internal.R.styleable.AndroidManifestProvider_process,com.android.internal.R.styleable.AndroidManifestProvider_description,com.android.internal.R.styleable.AndroidManifestProvider_enabled);
    mParseProviderArgs.tag=""String_Node_Str"";
  }
  mParseProviderArgs.sa=sa;
  mParseProviderArgs.flags=flags;
  Provider p=new Provider(mParseProviderArgs,new ProviderInfo());
  if (outError[0] != null) {
    sa.recycle();
    return null;
  }
  boolean providerExportedDefault=false;
  if (owner.applicationInfo.targetSdkVersion < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    providerExportedDefault=true;
  }
  p.info.exported=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_exported,providerExportedDefault);
  String cpname=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_authorities,0);
  p.info.isSyncable=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_syncable,false);
  String permission=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_permission,0);
  String str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_readPermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.readPermission=owner.applicationInfo.permission;
  }
 else {
    p.info.readPermission=str.length() > 0 ? str.toString().intern() : null;
  }
  str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_writePermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.writePermission=owner.applicationInfo.permission;
  }
 else {
    p.info.writePermission=str.length() > 0 ? str.toString().intern() : null;
  }
  p.info.grantUriPermissions=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_grantUriPermissions,false);
  p.info.multiprocess=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_multiprocess,false);
  p.info.initOrder=sa.getInt(com.android.internal.R.styleable.AndroidManifestProvider_initOrder,0);
  p.info.flags=0;
  if (sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_singleUser,false)) {
    p.info.flags|=ProviderInfo.FLAG_SINGLE_USER;
    if (p.info.exported && (flags & PARSE_IS_PRIVILEGED) == 0) {
      Slog.w(TAG,""String_Node_Str"" + p.className + ""String_Node_Str""+ mArchiveSourcePath+ ""String_Node_Str""+ parser.getPositionDescription());
      p.info.exported=false;
    }
  }
  sa.recycle();
  if ((owner.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
    if (p.info.processName == owner.packageName) {
      outError[0]=""String_Node_Str"";
      return null;
    }
  }
  if (cpname == null) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  if (cpname.length() <= 0) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  p.info.authority=cpname.intern();
  if (!parseProviderTags(res,parser,attrs,p,outError)) {
    return null;
  }
  return p;
}",0.985854189336235
195881,"private Provider parseProvider(Package owner,Resources res,XmlPullParser parser,AttributeSet attrs,int flags,String[] outError) throws XmlPullParserException, IOException {
  TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.AndroidManifestProvider);
  if (mParseProviderArgs == null) {
    mParseProviderArgs=new ParseComponentArgs(owner,outError,com.android.internal.R.styleable.AndroidManifestProvider_name,com.android.internal.R.styleable.AndroidManifestProvider_label,com.android.internal.R.styleable.AndroidManifestProvider_icon,com.android.internal.R.styleable.AndroidManifestProvider_logo,com.android.internal.R.styleable.AndroidManifestProvider_banner,mSeparateProcesses,com.android.internal.R.styleable.AndroidManifestProvider_process,com.android.internal.R.styleable.AndroidManifestProvider_description,com.android.internal.R.styleable.AndroidManifestProvider_enabled);
    mParseProviderArgs.tag=""String_Node_Str"";
  }
  mParseProviderArgs.sa=sa;
  mParseProviderArgs.flags=flags;
  Provider p=new Provider(mParseProviderArgs,new ProviderInfo());
  if (outError[0] != null) {
    sa.recycle();
    return null;
  }
  boolean providerExportedDefault=false;
  if (owner.applicationInfo.targetSdkVersion < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    providerExportedDefault=true;
  }
  p.info.exported=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_exported,providerExportedDefault);
  String cpname=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_authorities,0);
  p.info.isSyncable=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_syncable,false);
  String permission=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_permission,0);
  String str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_readPermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.readPermission=owner.applicationInfo.permission;
  }
 else {
    p.info.readPermission=str.length() > 0 ? str.toString().intern() : null;
  }
  str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_writePermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.writePermission=owner.applicationInfo.permission;
  }
 else {
    p.info.writePermission=str.length() > 0 ? str.toString().intern() : null;
  }
  p.info.grantUriPermissions=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_grantUriPermissions,false);
  p.info.multiprocess=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_multiprocess,false);
  p.info.initOrder=sa.getInt(com.android.internal.R.styleable.AndroidManifestProvider_initOrder,0);
  p.info.flags=0;
  if (sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_singleUser,false)) {
    p.info.flags|=ProviderInfo.FLAG_SINGLE_USER;
    if (p.info.exported && (flags & PARSE_IS_PRIVILEGED) == 0) {
      Slog.w(TAG,""String_Node_Str"" + p.className + ""String_Node_Str""+ mArchiveSourcePath+ ""String_Node_Str""+ parser.getPositionDescription());
      p.info.exported=false;
    }
  }
  sa.recycle();
  if ((owner.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
    if (p.info.processName == owner.packageName) {
      outError[0]=""String_Node_Str"";
      return null;
    }
  }
  if (cpname == null) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  p.info.authority=cpname.intern();
  if (!parseProviderTags(res,parser,attrs,p,outError)) {
    return null;
  }
  return p;
}","private Provider parseProvider(Package owner,Resources res,XmlPullParser parser,AttributeSet attrs,int flags,String[] outError) throws XmlPullParserException, IOException {
  TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.AndroidManifestProvider);
  if (mParseProviderArgs == null) {
    mParseProviderArgs=new ParseComponentArgs(owner,outError,com.android.internal.R.styleable.AndroidManifestProvider_name,com.android.internal.R.styleable.AndroidManifestProvider_label,com.android.internal.R.styleable.AndroidManifestProvider_icon,com.android.internal.R.styleable.AndroidManifestProvider_logo,com.android.internal.R.styleable.AndroidManifestProvider_banner,mSeparateProcesses,com.android.internal.R.styleable.AndroidManifestProvider_process,com.android.internal.R.styleable.AndroidManifestProvider_description,com.android.internal.R.styleable.AndroidManifestProvider_enabled);
    mParseProviderArgs.tag=""String_Node_Str"";
  }
  mParseProviderArgs.sa=sa;
  mParseProviderArgs.flags=flags;
  Provider p=new Provider(mParseProviderArgs,new ProviderInfo());
  if (outError[0] != null) {
    sa.recycle();
    return null;
  }
  boolean providerExportedDefault=false;
  if (owner.applicationInfo.targetSdkVersion < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    providerExportedDefault=true;
  }
  p.info.exported=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_exported,providerExportedDefault);
  String cpname=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_authorities,0);
  p.info.isSyncable=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_syncable,false);
  String permission=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_permission,0);
  String str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_readPermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.readPermission=owner.applicationInfo.permission;
  }
 else {
    p.info.readPermission=str.length() > 0 ? str.toString().intern() : null;
  }
  str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_writePermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.writePermission=owner.applicationInfo.permission;
  }
 else {
    p.info.writePermission=str.length() > 0 ? str.toString().intern() : null;
  }
  p.info.grantUriPermissions=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_grantUriPermissions,false);
  p.info.multiprocess=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_multiprocess,false);
  p.info.initOrder=sa.getInt(com.android.internal.R.styleable.AndroidManifestProvider_initOrder,0);
  p.info.flags=0;
  if (sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_singleUser,false)) {
    p.info.flags|=ProviderInfo.FLAG_SINGLE_USER;
    if (p.info.exported && (flags & PARSE_IS_PRIVILEGED) == 0) {
      Slog.w(TAG,""String_Node_Str"" + p.className + ""String_Node_Str""+ mArchiveSourcePath+ ""String_Node_Str""+ parser.getPositionDescription());
      p.info.exported=false;
    }
  }
  sa.recycle();
  if ((owner.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
    if (p.info.processName == owner.packageName) {
      outError[0]=""String_Node_Str"";
      return null;
    }
  }
  if (cpname == null) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  if (cpname.length() <= 0) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  p.info.authority=cpname.intern();
  if (!parseProviderTags(res,parser,attrs,p,outError)) {
    return null;
  }
  return p;
}",0.985854189336235
195882,"@LayoutlibDelegate static int getAmOrPmKeyCode(int amOrPm){
}","@LayoutlibDelegate static int getAmOrPmKeyCode(TimePickerSpinnerDelegate tpsd,int amOrPm){
}",0.7973856209150327
195883,"private Provider parseProvider(Package owner,Resources res,XmlPullParser parser,AttributeSet attrs,int flags,String[] outError) throws XmlPullParserException, IOException {
  TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.AndroidManifestProvider);
  if (mParseProviderArgs == null) {
    mParseProviderArgs=new ParseComponentArgs(owner,outError,com.android.internal.R.styleable.AndroidManifestProvider_name,com.android.internal.R.styleable.AndroidManifestProvider_label,com.android.internal.R.styleable.AndroidManifestProvider_icon,com.android.internal.R.styleable.AndroidManifestProvider_logo,com.android.internal.R.styleable.AndroidManifestProvider_banner,mSeparateProcesses,com.android.internal.R.styleable.AndroidManifestProvider_process,com.android.internal.R.styleable.AndroidManifestProvider_description,com.android.internal.R.styleable.AndroidManifestProvider_enabled);
    mParseProviderArgs.tag=""String_Node_Str"";
  }
  mParseProviderArgs.sa=sa;
  mParseProviderArgs.flags=flags;
  Provider p=new Provider(mParseProviderArgs,new ProviderInfo());
  if (outError[0] != null) {
    sa.recycle();
    return null;
  }
  boolean providerExportedDefault=false;
  if (owner.applicationInfo.targetSdkVersion < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    providerExportedDefault=true;
  }
  p.info.exported=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_exported,providerExportedDefault);
  String cpname=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_authorities,0);
  p.info.isSyncable=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_syncable,false);
  String permission=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_permission,0);
  String str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_readPermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.readPermission=owner.applicationInfo.permission;
  }
 else {
    p.info.readPermission=str.length() > 0 ? str.toString().intern() : null;
  }
  str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_writePermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.writePermission=owner.applicationInfo.permission;
  }
 else {
    p.info.writePermission=str.length() > 0 ? str.toString().intern() : null;
  }
  p.info.grantUriPermissions=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_grantUriPermissions,false);
  p.info.multiprocess=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_multiprocess,false);
  p.info.initOrder=sa.getInt(com.android.internal.R.styleable.AndroidManifestProvider_initOrder,0);
  p.info.flags=0;
  if (sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_singleUser,false)) {
    p.info.flags|=ProviderInfo.FLAG_SINGLE_USER;
    if (p.info.exported && (flags & PARSE_IS_PRIVILEGED) == 0) {
      Slog.w(TAG,""String_Node_Str"" + p.className + ""String_Node_Str""+ mArchiveSourcePath+ ""String_Node_Str""+ parser.getPositionDescription());
      p.info.exported=false;
    }
  }
  sa.recycle();
  if ((owner.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
    if (p.info.processName == owner.packageName) {
      outError[0]=""String_Node_Str"";
      return null;
    }
  }
  if (cpname == null) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  p.info.authority=cpname.intern();
  if (!parseProviderTags(res,parser,attrs,p,outError)) {
    return null;
  }
  return p;
}","private Provider parseProvider(Package owner,Resources res,XmlPullParser parser,AttributeSet attrs,int flags,String[] outError) throws XmlPullParserException, IOException {
  TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.AndroidManifestProvider);
  if (mParseProviderArgs == null) {
    mParseProviderArgs=new ParseComponentArgs(owner,outError,com.android.internal.R.styleable.AndroidManifestProvider_name,com.android.internal.R.styleable.AndroidManifestProvider_label,com.android.internal.R.styleable.AndroidManifestProvider_icon,com.android.internal.R.styleable.AndroidManifestProvider_logo,com.android.internal.R.styleable.AndroidManifestProvider_banner,mSeparateProcesses,com.android.internal.R.styleable.AndroidManifestProvider_process,com.android.internal.R.styleable.AndroidManifestProvider_description,com.android.internal.R.styleable.AndroidManifestProvider_enabled);
    mParseProviderArgs.tag=""String_Node_Str"";
  }
  mParseProviderArgs.sa=sa;
  mParseProviderArgs.flags=flags;
  Provider p=new Provider(mParseProviderArgs,new ProviderInfo());
  if (outError[0] != null) {
    sa.recycle();
    return null;
  }
  boolean providerExportedDefault=false;
  if (owner.applicationInfo.targetSdkVersion < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    providerExportedDefault=true;
  }
  p.info.exported=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_exported,providerExportedDefault);
  String cpname=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_authorities,0);
  p.info.isSyncable=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_syncable,false);
  String permission=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_permission,0);
  String str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_readPermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.readPermission=owner.applicationInfo.permission;
  }
 else {
    p.info.readPermission=str.length() > 0 ? str.toString().intern() : null;
  }
  str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_writePermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.writePermission=owner.applicationInfo.permission;
  }
 else {
    p.info.writePermission=str.length() > 0 ? str.toString().intern() : null;
  }
  p.info.grantUriPermissions=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_grantUriPermissions,false);
  p.info.multiprocess=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_multiprocess,false);
  p.info.initOrder=sa.getInt(com.android.internal.R.styleable.AndroidManifestProvider_initOrder,0);
  p.info.flags=0;
  if (sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_singleUser,false)) {
    p.info.flags|=ProviderInfo.FLAG_SINGLE_USER;
    if (p.info.exported && (flags & PARSE_IS_PRIVILEGED) == 0) {
      Slog.w(TAG,""String_Node_Str"" + p.className + ""String_Node_Str""+ mArchiveSourcePath+ ""String_Node_Str""+ parser.getPositionDescription());
      p.info.exported=false;
    }
  }
  sa.recycle();
  if ((owner.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
    if (p.info.processName == owner.packageName) {
      outError[0]=""String_Node_Str"";
      return null;
    }
  }
  if (cpname == null) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  if (cpname.length() <= 0) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  p.info.authority=cpname.intern();
  if (!parseProviderTags(res,parser,attrs,p,outError)) {
    return null;
  }
  return p;
}",0.985854189336235
195884,"private Provider parseProvider(Package owner,Resources res,XmlPullParser parser,AttributeSet attrs,int flags,String[] outError) throws XmlPullParserException, IOException {
  TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.AndroidManifestProvider);
  if (mParseProviderArgs == null) {
    mParseProviderArgs=new ParseComponentArgs(owner,outError,com.android.internal.R.styleable.AndroidManifestProvider_name,com.android.internal.R.styleable.AndroidManifestProvider_label,com.android.internal.R.styleable.AndroidManifestProvider_icon,com.android.internal.R.styleable.AndroidManifestProvider_logo,com.android.internal.R.styleable.AndroidManifestProvider_banner,mSeparateProcesses,com.android.internal.R.styleable.AndroidManifestProvider_process,com.android.internal.R.styleable.AndroidManifestProvider_description,com.android.internal.R.styleable.AndroidManifestProvider_enabled);
    mParseProviderArgs.tag=""String_Node_Str"";
  }
  mParseProviderArgs.sa=sa;
  mParseProviderArgs.flags=flags;
  Provider p=new Provider(mParseProviderArgs,new ProviderInfo());
  if (outError[0] != null) {
    sa.recycle();
    return null;
  }
  boolean providerExportedDefault=false;
  if (owner.applicationInfo.targetSdkVersion < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    providerExportedDefault=true;
  }
  p.info.exported=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_exported,providerExportedDefault);
  String cpname=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_authorities,0);
  p.info.isSyncable=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_syncable,false);
  String permission=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_permission,0);
  String str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_readPermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.readPermission=owner.applicationInfo.permission;
  }
 else {
    p.info.readPermission=str.length() > 0 ? str.toString().intern() : null;
  }
  str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_writePermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.writePermission=owner.applicationInfo.permission;
  }
 else {
    p.info.writePermission=str.length() > 0 ? str.toString().intern() : null;
  }
  p.info.grantUriPermissions=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_grantUriPermissions,false);
  p.info.multiprocess=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_multiprocess,false);
  p.info.initOrder=sa.getInt(com.android.internal.R.styleable.AndroidManifestProvider_initOrder,0);
  p.info.flags=0;
  if (sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_singleUser,false)) {
    p.info.flags|=ProviderInfo.FLAG_SINGLE_USER;
    if (p.info.exported && (flags & PARSE_IS_PRIVILEGED) == 0) {
      Slog.w(TAG,""String_Node_Str"" + p.className + ""String_Node_Str""+ mArchiveSourcePath+ ""String_Node_Str""+ parser.getPositionDescription());
      p.info.exported=false;
    }
  }
  sa.recycle();
  if ((owner.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
    if (p.info.processName == owner.packageName) {
      outError[0]=""String_Node_Str"";
      return null;
    }
  }
  if (cpname == null) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  p.info.authority=cpname.intern();
  if (!parseProviderTags(res,parser,attrs,p,outError)) {
    return null;
  }
  return p;
}","private Provider parseProvider(Package owner,Resources res,XmlPullParser parser,AttributeSet attrs,int flags,String[] outError) throws XmlPullParserException, IOException {
  TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.AndroidManifestProvider);
  if (mParseProviderArgs == null) {
    mParseProviderArgs=new ParseComponentArgs(owner,outError,com.android.internal.R.styleable.AndroidManifestProvider_name,com.android.internal.R.styleable.AndroidManifestProvider_label,com.android.internal.R.styleable.AndroidManifestProvider_icon,com.android.internal.R.styleable.AndroidManifestProvider_logo,com.android.internal.R.styleable.AndroidManifestProvider_banner,mSeparateProcesses,com.android.internal.R.styleable.AndroidManifestProvider_process,com.android.internal.R.styleable.AndroidManifestProvider_description,com.android.internal.R.styleable.AndroidManifestProvider_enabled);
    mParseProviderArgs.tag=""String_Node_Str"";
  }
  mParseProviderArgs.sa=sa;
  mParseProviderArgs.flags=flags;
  Provider p=new Provider(mParseProviderArgs,new ProviderInfo());
  if (outError[0] != null) {
    sa.recycle();
    return null;
  }
  boolean providerExportedDefault=false;
  if (owner.applicationInfo.targetSdkVersion < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    providerExportedDefault=true;
  }
  p.info.exported=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_exported,providerExportedDefault);
  String cpname=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_authorities,0);
  p.info.isSyncable=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_syncable,false);
  String permission=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_permission,0);
  String str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_readPermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.readPermission=owner.applicationInfo.permission;
  }
 else {
    p.info.readPermission=str.length() > 0 ? str.toString().intern() : null;
  }
  str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_writePermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.writePermission=owner.applicationInfo.permission;
  }
 else {
    p.info.writePermission=str.length() > 0 ? str.toString().intern() : null;
  }
  p.info.grantUriPermissions=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_grantUriPermissions,false);
  p.info.multiprocess=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_multiprocess,false);
  p.info.initOrder=sa.getInt(com.android.internal.R.styleable.AndroidManifestProvider_initOrder,0);
  p.info.flags=0;
  if (sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_singleUser,false)) {
    p.info.flags|=ProviderInfo.FLAG_SINGLE_USER;
    if (p.info.exported && (flags & PARSE_IS_PRIVILEGED) == 0) {
      Slog.w(TAG,""String_Node_Str"" + p.className + ""String_Node_Str""+ mArchiveSourcePath+ ""String_Node_Str""+ parser.getPositionDescription());
      p.info.exported=false;
    }
  }
  sa.recycle();
  if ((owner.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
    if (p.info.processName == owner.packageName) {
      outError[0]=""String_Node_Str"";
      return null;
    }
  }
  if (cpname == null) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  if (cpname.length() <= 0) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  p.info.authority=cpname.intern();
  if (!parseProviderTags(res,parser,attrs,p,outError)) {
    return null;
  }
  return p;
}",0.985854189336235
195885,"@LayoutlibDelegate static int getAmOrPmKeyCode(int amOrPm){
}","@LayoutlibDelegate static int getAmOrPmKeyCode(TimePickerSpinnerDelegate tpsd,int amOrPm){
}",0.7973856209150327
195886,"private Provider parseProvider(Package owner,Resources res,XmlPullParser parser,AttributeSet attrs,int flags,String[] outError) throws XmlPullParserException, IOException {
  TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.AndroidManifestProvider);
  if (mParseProviderArgs == null) {
    mParseProviderArgs=new ParseComponentArgs(owner,outError,com.android.internal.R.styleable.AndroidManifestProvider_name,com.android.internal.R.styleable.AndroidManifestProvider_label,com.android.internal.R.styleable.AndroidManifestProvider_icon,com.android.internal.R.styleable.AndroidManifestProvider_logo,com.android.internal.R.styleable.AndroidManifestProvider_banner,mSeparateProcesses,com.android.internal.R.styleable.AndroidManifestProvider_process,com.android.internal.R.styleable.AndroidManifestProvider_description,com.android.internal.R.styleable.AndroidManifestProvider_enabled);
    mParseProviderArgs.tag=""String_Node_Str"";
  }
  mParseProviderArgs.sa=sa;
  mParseProviderArgs.flags=flags;
  Provider p=new Provider(mParseProviderArgs,new ProviderInfo());
  if (outError[0] != null) {
    sa.recycle();
    return null;
  }
  boolean providerExportedDefault=false;
  if (owner.applicationInfo.targetSdkVersion < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    providerExportedDefault=true;
  }
  p.info.exported=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_exported,providerExportedDefault);
  String cpname=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_authorities,0);
  p.info.isSyncable=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_syncable,false);
  String permission=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_permission,0);
  String str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_readPermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.readPermission=owner.applicationInfo.permission;
  }
 else {
    p.info.readPermission=str.length() > 0 ? str.toString().intern() : null;
  }
  str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_writePermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.writePermission=owner.applicationInfo.permission;
  }
 else {
    p.info.writePermission=str.length() > 0 ? str.toString().intern() : null;
  }
  p.info.grantUriPermissions=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_grantUriPermissions,false);
  p.info.multiprocess=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_multiprocess,false);
  p.info.initOrder=sa.getInt(com.android.internal.R.styleable.AndroidManifestProvider_initOrder,0);
  p.info.flags=0;
  if (sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_singleUser,false)) {
    p.info.flags|=ProviderInfo.FLAG_SINGLE_USER;
    if (p.info.exported && (flags & PARSE_IS_PRIVILEGED) == 0) {
      Slog.w(TAG,""String_Node_Str"" + p.className + ""String_Node_Str""+ mArchiveSourcePath+ ""String_Node_Str""+ parser.getPositionDescription());
      p.info.exported=false;
    }
  }
  sa.recycle();
  if ((owner.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
    if (p.info.processName == owner.packageName) {
      outError[0]=""String_Node_Str"";
      return null;
    }
  }
  if (cpname == null) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  p.info.authority=cpname.intern();
  if (!parseProviderTags(res,parser,attrs,p,outError)) {
    return null;
  }
  return p;
}","private Provider parseProvider(Package owner,Resources res,XmlPullParser parser,AttributeSet attrs,int flags,String[] outError) throws XmlPullParserException, IOException {
  TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.AndroidManifestProvider);
  if (mParseProviderArgs == null) {
    mParseProviderArgs=new ParseComponentArgs(owner,outError,com.android.internal.R.styleable.AndroidManifestProvider_name,com.android.internal.R.styleable.AndroidManifestProvider_label,com.android.internal.R.styleable.AndroidManifestProvider_icon,com.android.internal.R.styleable.AndroidManifestProvider_logo,com.android.internal.R.styleable.AndroidManifestProvider_banner,mSeparateProcesses,com.android.internal.R.styleable.AndroidManifestProvider_process,com.android.internal.R.styleable.AndroidManifestProvider_description,com.android.internal.R.styleable.AndroidManifestProvider_enabled);
    mParseProviderArgs.tag=""String_Node_Str"";
  }
  mParseProviderArgs.sa=sa;
  mParseProviderArgs.flags=flags;
  Provider p=new Provider(mParseProviderArgs,new ProviderInfo());
  if (outError[0] != null) {
    sa.recycle();
    return null;
  }
  boolean providerExportedDefault=false;
  if (owner.applicationInfo.targetSdkVersion < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    providerExportedDefault=true;
  }
  p.info.exported=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_exported,providerExportedDefault);
  String cpname=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_authorities,0);
  p.info.isSyncable=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_syncable,false);
  String permission=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_permission,0);
  String str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_readPermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.readPermission=owner.applicationInfo.permission;
  }
 else {
    p.info.readPermission=str.length() > 0 ? str.toString().intern() : null;
  }
  str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestProvider_writePermission,0);
  if (str == null) {
    str=permission;
  }
  if (str == null) {
    p.info.writePermission=owner.applicationInfo.permission;
  }
 else {
    p.info.writePermission=str.length() > 0 ? str.toString().intern() : null;
  }
  p.info.grantUriPermissions=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_grantUriPermissions,false);
  p.info.multiprocess=sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_multiprocess,false);
  p.info.initOrder=sa.getInt(com.android.internal.R.styleable.AndroidManifestProvider_initOrder,0);
  p.info.flags=0;
  if (sa.getBoolean(com.android.internal.R.styleable.AndroidManifestProvider_singleUser,false)) {
    p.info.flags|=ProviderInfo.FLAG_SINGLE_USER;
    if (p.info.exported && (flags & PARSE_IS_PRIVILEGED) == 0) {
      Slog.w(TAG,""String_Node_Str"" + p.className + ""String_Node_Str""+ mArchiveSourcePath+ ""String_Node_Str""+ parser.getPositionDescription());
      p.info.exported=false;
    }
  }
  sa.recycle();
  if ((owner.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
    if (p.info.processName == owner.packageName) {
      outError[0]=""String_Node_Str"";
      return null;
    }
  }
  if (cpname == null) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  if (cpname.length() <= 0) {
    outError[0]=""String_Node_Str"";
    return null;
  }
  p.info.authority=cpname.intern();
  if (!parseProviderTags(res,parser,attrs,p,outError)) {
    return null;
  }
  return p;
}",0.985854189336235
195887,"private void deliverNewIntents(ActivityClientRecord r,List<ReferrerIntent> intents){
  final int N=intents.size();
  for (int i=0; i < N; i++) {
    Intent intent=intents.get(i);
    intent.setExtrasClassLoader(r.activity.getClassLoader());
    intent.prepareToEnterProcess();
    r.activity.mFragments.noteStateNotSaved();
    mInstrumentation.callActivityOnNewIntent(r.activity,intent);
  }
}","private void deliverNewIntents(ActivityClientRecord r,List<ReferrerIntent> intents){
  final int N=intents.size();
  for (int i=0; i < N; i++) {
    ReferrerIntent intent=intents.get(i);
    intent.setExtrasClassLoader(r.activity.getClassLoader());
    intent.prepareToEnterProcess();
    r.activity.mFragments.noteStateNotSaved();
    mInstrumentation.callActivityOnNewIntent(r.activity,intent);
  }
}",0.9899497487437184
195888,"/** 
 * Perform calling of an activity's   {@link Activity#onNewIntent}method.  The default implementation simply calls through to that method.
 * @param activity The activity receiving a new Intent.
 * @param intent The new intent being received.
 */
public void callActivityOnNewIntent(Activity activity,Intent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    try {
      activity.mReferrer=((ReferrerIntent)intent).mReferrer;
    }
 catch (    ClassCastException e) {
      activity.mReferrer=null;
    }
    activity.onNewIntent(intent);
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}","/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    activity.mReferrer=intent.mReferrer;
    callActivityOnNewIntent(activity,new Intent(intent));
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}",0.467027027027027
195889,"private void deliverNewIntents(ActivityClientRecord r,List<ReferrerIntent> intents){
  final int N=intents.size();
  for (int i=0; i < N; i++) {
    Intent intent=intents.get(i);
    intent.setExtrasClassLoader(r.activity.getClassLoader());
    intent.prepareToEnterProcess();
    r.activity.mFragments.noteStateNotSaved();
    mInstrumentation.callActivityOnNewIntent(r.activity,intent);
  }
}","private void deliverNewIntents(ActivityClientRecord r,List<ReferrerIntent> intents){
  final int N=intents.size();
  for (int i=0; i < N; i++) {
    ReferrerIntent intent=intents.get(i);
    intent.setExtrasClassLoader(r.activity.getClassLoader());
    intent.prepareToEnterProcess();
    r.activity.mFragments.noteStateNotSaved();
    mInstrumentation.callActivityOnNewIntent(r.activity,intent);
  }
}",0.9899497487437184
195890,"/** 
 * Perform calling of an activity's   {@link Activity#onNewIntent}method.  The default implementation simply calls through to that method.
 * @param activity The activity receiving a new Intent.
 * @param intent The new intent being received.
 */
public void callActivityOnNewIntent(Activity activity,Intent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    try {
      activity.mReferrer=((ReferrerIntent)intent).mReferrer;
    }
 catch (    ClassCastException e) {
      activity.mReferrer=null;
    }
    activity.onNewIntent(intent);
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}","/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    activity.mReferrer=intent.mReferrer;
    callActivityOnNewIntent(activity,new Intent(intent));
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}",0.467027027027027
195891,"private void deliverNewIntents(ActivityClientRecord r,List<ReferrerIntent> intents){
  final int N=intents.size();
  for (int i=0; i < N; i++) {
    Intent intent=intents.get(i);
    intent.setExtrasClassLoader(r.activity.getClassLoader());
    intent.prepareToEnterProcess();
    r.activity.mFragments.noteStateNotSaved();
    mInstrumentation.callActivityOnNewIntent(r.activity,intent);
  }
}","private void deliverNewIntents(ActivityClientRecord r,List<ReferrerIntent> intents){
  final int N=intents.size();
  for (int i=0; i < N; i++) {
    ReferrerIntent intent=intents.get(i);
    intent.setExtrasClassLoader(r.activity.getClassLoader());
    intent.prepareToEnterProcess();
    r.activity.mFragments.noteStateNotSaved();
    mInstrumentation.callActivityOnNewIntent(r.activity,intent);
  }
}",0.9899497487437184
195892,"/** 
 * Perform calling of an activity's   {@link Activity#onNewIntent}method.  The default implementation simply calls through to that method.
 * @param activity The activity receiving a new Intent.
 * @param intent The new intent being received.
 */
public void callActivityOnNewIntent(Activity activity,Intent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    try {
      activity.mReferrer=((ReferrerIntent)intent).mReferrer;
    }
 catch (    ClassCastException e) {
      activity.mReferrer=null;
    }
    activity.onNewIntent(intent);
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}","/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    activity.mReferrer=intent.mReferrer;
    callActivityOnNewIntent(activity,new Intent(intent));
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}",0.467027027027027
195893,"private void deliverNewIntents(ActivityClientRecord r,List<ReferrerIntent> intents){
  final int N=intents.size();
  for (int i=0; i < N; i++) {
    Intent intent=intents.get(i);
    intent.setExtrasClassLoader(r.activity.getClassLoader());
    intent.prepareToEnterProcess();
    r.activity.mFragments.noteStateNotSaved();
    mInstrumentation.callActivityOnNewIntent(r.activity,intent);
  }
}","private void deliverNewIntents(ActivityClientRecord r,List<ReferrerIntent> intents){
  final int N=intents.size();
  for (int i=0; i < N; i++) {
    ReferrerIntent intent=intents.get(i);
    intent.setExtrasClassLoader(r.activity.getClassLoader());
    intent.prepareToEnterProcess();
    r.activity.mFragments.noteStateNotSaved();
    mInstrumentation.callActivityOnNewIntent(r.activity,intent);
  }
}",0.9899497487437184
195894,"/** 
 * Perform calling of an activity's   {@link Activity#onNewIntent}method.  The default implementation simply calls through to that method.
 * @param activity The activity receiving a new Intent.
 * @param intent The new intent being received.
 */
public void callActivityOnNewIntent(Activity activity,Intent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    try {
      activity.mReferrer=((ReferrerIntent)intent).mReferrer;
    }
 catch (    ClassCastException e) {
      activity.mReferrer=null;
    }
    activity.onNewIntent(intent);
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}","/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    activity.mReferrer=intent.mReferrer;
    callActivityOnNewIntent(activity,new Intent(intent));
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}",0.467027027027027
195895,"private void deliverNewIntents(ActivityClientRecord r,List<ReferrerIntent> intents){
  final int N=intents.size();
  for (int i=0; i < N; i++) {
    Intent intent=intents.get(i);
    intent.setExtrasClassLoader(r.activity.getClassLoader());
    intent.prepareToEnterProcess();
    r.activity.mFragments.noteStateNotSaved();
    mInstrumentation.callActivityOnNewIntent(r.activity,intent);
  }
}","private void deliverNewIntents(ActivityClientRecord r,List<ReferrerIntent> intents){
  final int N=intents.size();
  for (int i=0; i < N; i++) {
    ReferrerIntent intent=intents.get(i);
    intent.setExtrasClassLoader(r.activity.getClassLoader());
    intent.prepareToEnterProcess();
    r.activity.mFragments.noteStateNotSaved();
    mInstrumentation.callActivityOnNewIntent(r.activity,intent);
  }
}",0.9899497487437184
195896,"/** 
 * Perform calling of an activity's   {@link Activity#onNewIntent}method.  The default implementation simply calls through to that method.
 * @param activity The activity receiving a new Intent.
 * @param intent The new intent being received.
 */
public void callActivityOnNewIntent(Activity activity,Intent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    try {
      activity.mReferrer=((ReferrerIntent)intent).mReferrer;
    }
 catch (    ClassCastException e) {
      activity.mReferrer=null;
    }
    activity.onNewIntent(intent);
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}","/** 
 * @hide
 */
public void callActivityOnNewIntent(Activity activity,ReferrerIntent intent){
  final String oldReferrer=activity.mReferrer;
  try {
    activity.mReferrer=intent.mReferrer;
    callActivityOnNewIntent(activity,new Intent(intent));
  }
  finally {
    activity.mReferrer=oldReferrer;
  }
}",0.467027027027027
195897,"public FailureSignalingConnection(DisconnectCause disconnectCause){
  setDisconnected(disconnectCause);
}","public FailureSignalingConnection(DisconnectCause disconnectCause){
  setDisconnected(disconnectCause);
  mImmutable=true;
}",0.9170305676855895
195898,"public FailureSignalingConnection(DisconnectCause disconnectCause){
  setDisconnected(disconnectCause);
}","public FailureSignalingConnection(DisconnectCause disconnectCause){
  setDisconnected(disconnectCause);
  mImmutable=true;
}",0.9170305676855895
195899,"public FailureSignalingConnection(DisconnectCause disconnectCause){
  setDisconnected(disconnectCause);
}","public FailureSignalingConnection(DisconnectCause disconnectCause){
  setDisconnected(disconnectCause);
  mImmutable=true;
}",0.9170305676855895
195900,"public FailureSignalingConnection(DisconnectCause disconnectCause){
  setDisconnected(disconnectCause);
}","public FailureSignalingConnection(DisconnectCause disconnectCause){
  setDisconnected(disconnectCause);
  mImmutable=true;
}",0.9170305676855895
195901,"public FailureSignalingConnection(DisconnectCause disconnectCause){
  setDisconnected(disconnectCause);
}","public FailureSignalingConnection(DisconnectCause disconnectCause){
  setDisconnected(disconnectCause);
  mImmutable=true;
}",0.9170305676855895
195902,"private void readUserListLocked(){
  if (!mUserListFile.exists()) {
    fallbackToSingleUserLocked();
    return;
  }
  FileInputStream fis=null;
  AtomicFile userListFile=new AtomicFile(mUserListFile);
  try {
    fis=userListFile.openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      Slog.e(LOG_TAG,""String_Node_Str"");
      fallbackToSingleUserLocked();
      return;
    }
    mNextSerialNumber=-1;
    if (parser.getName().equals(TAG_USERS)) {
      String lastSerialNumber=parser.getAttributeValue(null,ATTR_NEXT_SERIAL_NO);
      if (lastSerialNumber != null) {
        mNextSerialNumber=Integer.parseInt(lastSerialNumber);
      }
      String versionNumber=parser.getAttributeValue(null,ATTR_USER_VERSION);
      if (versionNumber != null) {
        mUserVersion=Integer.parseInt(versionNumber);
      }
    }
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (type == XmlPullParser.START_TAG) {
        final String name=parser.getName();
        if (name.equals(TAG_USER)) {
          String id=parser.getAttributeValue(null,ATTR_ID);
          UserInfo user=readUserLocked(Integer.parseInt(id));
          if (user != null) {
            mUsers.put(user.id,user);
            if (mNextSerialNumber < 0 || mNextSerialNumber <= user.id) {
              mNextSerialNumber=user.id + 1;
            }
          }
        }
 else         if (name.equals(TAG_GUEST_RESTRICTIONS)) {
          mGuestRestrictions.clear();
          readRestrictionsLocked(parser,mGuestRestrictions);
        }
      }
    }
    updateUserIdsLocked();
    upgradeIfNecessaryLocked();
  }
 catch (  IOException ioe) {
    fallbackToSingleUserLocked();
  }
catch (  XmlPullParserException pe) {
    fallbackToSingleUserLocked();
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","private void readUserListLocked(){
  if (!mUserListFile.exists()) {
    fallbackToSingleUserLocked();
    return;
  }
  FileInputStream fis=null;
  AtomicFile userListFile=new AtomicFile(mUserListFile);
  try {
    fis=userListFile.openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      Slog.e(LOG_TAG,""String_Node_Str"");
      fallbackToSingleUserLocked();
      return;
    }
    mNextSerialNumber=-1;
    if (parser.getName().equals(TAG_USERS)) {
      String lastSerialNumber=parser.getAttributeValue(null,ATTR_NEXT_SERIAL_NO);
      if (lastSerialNumber != null) {
        mNextSerialNumber=Integer.parseInt(lastSerialNumber);
      }
      String versionNumber=parser.getAttributeValue(null,ATTR_USER_VERSION);
      if (versionNumber != null) {
        mUserVersion=Integer.parseInt(versionNumber);
      }
    }
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (type == XmlPullParser.START_TAG) {
        final String name=parser.getName();
        if (name.equals(TAG_USER)) {
          String id=parser.getAttributeValue(null,ATTR_ID);
          UserInfo user=readUserLocked(Integer.parseInt(id));
          if (user != null) {
            mUsers.put(user.id,user);
            if (mNextSerialNumber < 0 || mNextSerialNumber <= user.id) {
              mNextSerialNumber=user.id + 1;
            }
          }
        }
 else         if (name.equals(TAG_GUEST_RESTRICTIONS)) {
          while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.END_TAG) {
            if (type == XmlPullParser.START_TAG) {
              if (parser.getName().equals(TAG_RESTRICTIONS)) {
                readRestrictionsLocked(parser,mGuestRestrictions);
              }
              break;
            }
          }
        }
      }
    }
    updateUserIdsLocked();
    upgradeIfNecessaryLocked();
  }
 catch (  IOException ioe) {
    fallbackToSingleUserLocked();
  }
catch (  XmlPullParserException pe) {
    fallbackToSingleUserLocked();
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.931637519872814
195903,"/** 
 * Available for testing purposes.
 */
private UserManagerService(Context context,PackageManagerService pm,Object installLock,Object packagesLock,File dataDir,File baseUserPath){
  mContext=context;
  mPm=pm;
  mInstallLock=installLock;
  mPackagesLock=packagesLock;
  mHandler=new Handler();
synchronized (mInstallLock) {
synchronized (mPackagesLock) {
      mUsersDir=new File(dataDir,USER_INFO_DIR);
      mUsersDir.mkdirs();
      File userZeroDir=new File(mUsersDir,""String_Node_Str"");
      userZeroDir.mkdirs();
      mBaseUserPath=baseUserPath;
      FileUtils.setPermissions(mUsersDir.toString(),FileUtils.S_IRWXU | FileUtils.S_IRWXG | FileUtils.S_IROTH| FileUtils.S_IXOTH,-1,-1);
      mUserListFile=new File(mUsersDir,USER_LIST_FILENAME);
      readUserListLocked();
      ArrayList<UserInfo> partials=new ArrayList<UserInfo>();
      for (int i=0; i < mUsers.size(); i++) {
        UserInfo ui=mUsers.valueAt(i);
        if ((ui.partial || ui.guestToRemove) && i != 0) {
          partials.add(ui);
        }
      }
      for (int i=0; i < partials.size(); i++) {
        UserInfo ui=partials.get(i);
        Slog.w(LOG_TAG,""String_Node_Str"" + i + ""String_Node_Str""+ ui.name+ ""String_Node_Str"");
        removeUserStateLocked(ui.id);
      }
      sInstance=this;
    }
  }
}","/** 
 * Available for testing purposes.
 */
private UserManagerService(Context context,PackageManagerService pm,Object installLock,Object packagesLock,File dataDir,File baseUserPath){
  mContext=context;
  mPm=pm;
  mInstallLock=installLock;
  mPackagesLock=packagesLock;
  mHandler=new Handler();
synchronized (mInstallLock) {
synchronized (mPackagesLock) {
      mUsersDir=new File(dataDir,USER_INFO_DIR);
      mUsersDir.mkdirs();
      File userZeroDir=new File(mUsersDir,""String_Node_Str"");
      userZeroDir.mkdirs();
      mBaseUserPath=baseUserPath;
      FileUtils.setPermissions(mUsersDir.toString(),FileUtils.S_IRWXU | FileUtils.S_IRWXG | FileUtils.S_IROTH| FileUtils.S_IXOTH,-1,-1);
      mUserListFile=new File(mUsersDir,USER_LIST_FILENAME);
      initDefaultGuestRestrictions();
      readUserListLocked();
      ArrayList<UserInfo> partials=new ArrayList<UserInfo>();
      for (int i=0; i < mUsers.size(); i++) {
        UserInfo ui=mUsers.valueAt(i);
        if ((ui.partial || ui.guestToRemove) && i != 0) {
          partials.add(ui);
        }
      }
      for (int i=0; i < partials.size(); i++) {
        UserInfo ui=partials.get(i);
        Slog.w(LOG_TAG,""String_Node_Str"" + i + ""String_Node_Str""+ ui.name+ ""String_Node_Str"");
        removeUserStateLocked(ui.id);
      }
      sInstance=this;
    }
  }
}",0.9855182926829268
195904,"/** 
 * If default guest restrictions haven't been initialized yet, add the basic restrictions.
 */
private void initDefaultGuestRestrictions(){
  if (mGuestRestrictions.isEmpty()) {
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_OUTGOING_CALLS,true);
    writeUserListLocked();
  }
}","/** 
 * If default guest restrictions haven't been initialized yet, add the basic restrictions.
 */
private void initDefaultGuestRestrictions(){
  if (mGuestRestrictions.isEmpty()) {
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_OUTGOING_CALLS,true);
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_SMS,true);
  }
}",0.8860353130016051
195905,"private void readUserListLocked(){
  if (!mUserListFile.exists()) {
    fallbackToSingleUserLocked();
    return;
  }
  FileInputStream fis=null;
  AtomicFile userListFile=new AtomicFile(mUserListFile);
  try {
    fis=userListFile.openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      Slog.e(LOG_TAG,""String_Node_Str"");
      fallbackToSingleUserLocked();
      return;
    }
    mNextSerialNumber=-1;
    if (parser.getName().equals(TAG_USERS)) {
      String lastSerialNumber=parser.getAttributeValue(null,ATTR_NEXT_SERIAL_NO);
      if (lastSerialNumber != null) {
        mNextSerialNumber=Integer.parseInt(lastSerialNumber);
      }
      String versionNumber=parser.getAttributeValue(null,ATTR_USER_VERSION);
      if (versionNumber != null) {
        mUserVersion=Integer.parseInt(versionNumber);
      }
    }
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (type == XmlPullParser.START_TAG) {
        final String name=parser.getName();
        if (name.equals(TAG_USER)) {
          String id=parser.getAttributeValue(null,ATTR_ID);
          UserInfo user=readUserLocked(Integer.parseInt(id));
          if (user != null) {
            mUsers.put(user.id,user);
            if (mNextSerialNumber < 0 || mNextSerialNumber <= user.id) {
              mNextSerialNumber=user.id + 1;
            }
          }
        }
 else         if (name.equals(TAG_GUEST_RESTRICTIONS)) {
          mGuestRestrictions.clear();
          readRestrictionsLocked(parser,mGuestRestrictions);
        }
      }
    }
    updateUserIdsLocked();
    upgradeIfNecessaryLocked();
  }
 catch (  IOException ioe) {
    fallbackToSingleUserLocked();
  }
catch (  XmlPullParserException pe) {
    fallbackToSingleUserLocked();
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","private void readUserListLocked(){
  if (!mUserListFile.exists()) {
    fallbackToSingleUserLocked();
    return;
  }
  FileInputStream fis=null;
  AtomicFile userListFile=new AtomicFile(mUserListFile);
  try {
    fis=userListFile.openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      Slog.e(LOG_TAG,""String_Node_Str"");
      fallbackToSingleUserLocked();
      return;
    }
    mNextSerialNumber=-1;
    if (parser.getName().equals(TAG_USERS)) {
      String lastSerialNumber=parser.getAttributeValue(null,ATTR_NEXT_SERIAL_NO);
      if (lastSerialNumber != null) {
        mNextSerialNumber=Integer.parseInt(lastSerialNumber);
      }
      String versionNumber=parser.getAttributeValue(null,ATTR_USER_VERSION);
      if (versionNumber != null) {
        mUserVersion=Integer.parseInt(versionNumber);
      }
    }
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (type == XmlPullParser.START_TAG) {
        final String name=parser.getName();
        if (name.equals(TAG_USER)) {
          String id=parser.getAttributeValue(null,ATTR_ID);
          UserInfo user=readUserLocked(Integer.parseInt(id));
          if (user != null) {
            mUsers.put(user.id,user);
            if (mNextSerialNumber < 0 || mNextSerialNumber <= user.id) {
              mNextSerialNumber=user.id + 1;
            }
          }
        }
 else         if (name.equals(TAG_GUEST_RESTRICTIONS)) {
          while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.END_TAG) {
            if (type == XmlPullParser.START_TAG) {
              if (parser.getName().equals(TAG_RESTRICTIONS)) {
                readRestrictionsLocked(parser,mGuestRestrictions);
              }
              break;
            }
          }
        }
      }
    }
    updateUserIdsLocked();
    upgradeIfNecessaryLocked();
  }
 catch (  IOException ioe) {
    fallbackToSingleUserLocked();
  }
catch (  XmlPullParserException pe) {
    fallbackToSingleUserLocked();
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.931637519872814
195906,"/** 
 * Available for testing purposes.
 */
private UserManagerService(Context context,PackageManagerService pm,Object installLock,Object packagesLock,File dataDir,File baseUserPath){
  mContext=context;
  mPm=pm;
  mInstallLock=installLock;
  mPackagesLock=packagesLock;
  mHandler=new Handler();
synchronized (mInstallLock) {
synchronized (mPackagesLock) {
      mUsersDir=new File(dataDir,USER_INFO_DIR);
      mUsersDir.mkdirs();
      File userZeroDir=new File(mUsersDir,""String_Node_Str"");
      userZeroDir.mkdirs();
      mBaseUserPath=baseUserPath;
      FileUtils.setPermissions(mUsersDir.toString(),FileUtils.S_IRWXU | FileUtils.S_IRWXG | FileUtils.S_IROTH| FileUtils.S_IXOTH,-1,-1);
      mUserListFile=new File(mUsersDir,USER_LIST_FILENAME);
      readUserListLocked();
      ArrayList<UserInfo> partials=new ArrayList<UserInfo>();
      for (int i=0; i < mUsers.size(); i++) {
        UserInfo ui=mUsers.valueAt(i);
        if ((ui.partial || ui.guestToRemove) && i != 0) {
          partials.add(ui);
        }
      }
      for (int i=0; i < partials.size(); i++) {
        UserInfo ui=partials.get(i);
        Slog.w(LOG_TAG,""String_Node_Str"" + i + ""String_Node_Str""+ ui.name+ ""String_Node_Str"");
        removeUserStateLocked(ui.id);
      }
      sInstance=this;
    }
  }
}","/** 
 * Available for testing purposes.
 */
private UserManagerService(Context context,PackageManagerService pm,Object installLock,Object packagesLock,File dataDir,File baseUserPath){
  mContext=context;
  mPm=pm;
  mInstallLock=installLock;
  mPackagesLock=packagesLock;
  mHandler=new Handler();
synchronized (mInstallLock) {
synchronized (mPackagesLock) {
      mUsersDir=new File(dataDir,USER_INFO_DIR);
      mUsersDir.mkdirs();
      File userZeroDir=new File(mUsersDir,""String_Node_Str"");
      userZeroDir.mkdirs();
      mBaseUserPath=baseUserPath;
      FileUtils.setPermissions(mUsersDir.toString(),FileUtils.S_IRWXU | FileUtils.S_IRWXG | FileUtils.S_IROTH| FileUtils.S_IXOTH,-1,-1);
      mUserListFile=new File(mUsersDir,USER_LIST_FILENAME);
      initDefaultGuestRestrictions();
      readUserListLocked();
      ArrayList<UserInfo> partials=new ArrayList<UserInfo>();
      for (int i=0; i < mUsers.size(); i++) {
        UserInfo ui=mUsers.valueAt(i);
        if ((ui.partial || ui.guestToRemove) && i != 0) {
          partials.add(ui);
        }
      }
      for (int i=0; i < partials.size(); i++) {
        UserInfo ui=partials.get(i);
        Slog.w(LOG_TAG,""String_Node_Str"" + i + ""String_Node_Str""+ ui.name+ ""String_Node_Str"");
        removeUserStateLocked(ui.id);
      }
      sInstance=this;
    }
  }
}",0.9855182926829268
195907,"/** 
 * If default guest restrictions haven't been initialized yet, add the basic restrictions.
 */
private void initDefaultGuestRestrictions(){
  if (mGuestRestrictions.isEmpty()) {
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_OUTGOING_CALLS,true);
    writeUserListLocked();
  }
}","/** 
 * If default guest restrictions haven't been initialized yet, add the basic restrictions.
 */
private void initDefaultGuestRestrictions(){
  if (mGuestRestrictions.isEmpty()) {
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_OUTGOING_CALLS,true);
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_SMS,true);
  }
}",0.8860353130016051
195908,"private void readUserListLocked(){
  if (!mUserListFile.exists()) {
    fallbackToSingleUserLocked();
    return;
  }
  FileInputStream fis=null;
  AtomicFile userListFile=new AtomicFile(mUserListFile);
  try {
    fis=userListFile.openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      Slog.e(LOG_TAG,""String_Node_Str"");
      fallbackToSingleUserLocked();
      return;
    }
    mNextSerialNumber=-1;
    if (parser.getName().equals(TAG_USERS)) {
      String lastSerialNumber=parser.getAttributeValue(null,ATTR_NEXT_SERIAL_NO);
      if (lastSerialNumber != null) {
        mNextSerialNumber=Integer.parseInt(lastSerialNumber);
      }
      String versionNumber=parser.getAttributeValue(null,ATTR_USER_VERSION);
      if (versionNumber != null) {
        mUserVersion=Integer.parseInt(versionNumber);
      }
    }
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (type == XmlPullParser.START_TAG) {
        final String name=parser.getName();
        if (name.equals(TAG_USER)) {
          String id=parser.getAttributeValue(null,ATTR_ID);
          UserInfo user=readUserLocked(Integer.parseInt(id));
          if (user != null) {
            mUsers.put(user.id,user);
            if (mNextSerialNumber < 0 || mNextSerialNumber <= user.id) {
              mNextSerialNumber=user.id + 1;
            }
          }
        }
 else         if (name.equals(TAG_GUEST_RESTRICTIONS)) {
          mGuestRestrictions.clear();
          readRestrictionsLocked(parser,mGuestRestrictions);
        }
      }
    }
    updateUserIdsLocked();
    upgradeIfNecessaryLocked();
  }
 catch (  IOException ioe) {
    fallbackToSingleUserLocked();
  }
catch (  XmlPullParserException pe) {
    fallbackToSingleUserLocked();
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","private void readUserListLocked(){
  if (!mUserListFile.exists()) {
    fallbackToSingleUserLocked();
    return;
  }
  FileInputStream fis=null;
  AtomicFile userListFile=new AtomicFile(mUserListFile);
  try {
    fis=userListFile.openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      Slog.e(LOG_TAG,""String_Node_Str"");
      fallbackToSingleUserLocked();
      return;
    }
    mNextSerialNumber=-1;
    if (parser.getName().equals(TAG_USERS)) {
      String lastSerialNumber=parser.getAttributeValue(null,ATTR_NEXT_SERIAL_NO);
      if (lastSerialNumber != null) {
        mNextSerialNumber=Integer.parseInt(lastSerialNumber);
      }
      String versionNumber=parser.getAttributeValue(null,ATTR_USER_VERSION);
      if (versionNumber != null) {
        mUserVersion=Integer.parseInt(versionNumber);
      }
    }
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (type == XmlPullParser.START_TAG) {
        final String name=parser.getName();
        if (name.equals(TAG_USER)) {
          String id=parser.getAttributeValue(null,ATTR_ID);
          UserInfo user=readUserLocked(Integer.parseInt(id));
          if (user != null) {
            mUsers.put(user.id,user);
            if (mNextSerialNumber < 0 || mNextSerialNumber <= user.id) {
              mNextSerialNumber=user.id + 1;
            }
          }
        }
 else         if (name.equals(TAG_GUEST_RESTRICTIONS)) {
          while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.END_TAG) {
            if (type == XmlPullParser.START_TAG) {
              if (parser.getName().equals(TAG_RESTRICTIONS)) {
                readRestrictionsLocked(parser,mGuestRestrictions);
              }
              break;
            }
          }
        }
      }
    }
    updateUserIdsLocked();
    upgradeIfNecessaryLocked();
  }
 catch (  IOException ioe) {
    fallbackToSingleUserLocked();
  }
catch (  XmlPullParserException pe) {
    fallbackToSingleUserLocked();
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.931637519872814
195909,"/** 
 * Available for testing purposes.
 */
private UserManagerService(Context context,PackageManagerService pm,Object installLock,Object packagesLock,File dataDir,File baseUserPath){
  mContext=context;
  mPm=pm;
  mInstallLock=installLock;
  mPackagesLock=packagesLock;
  mHandler=new Handler();
synchronized (mInstallLock) {
synchronized (mPackagesLock) {
      mUsersDir=new File(dataDir,USER_INFO_DIR);
      mUsersDir.mkdirs();
      File userZeroDir=new File(mUsersDir,""String_Node_Str"");
      userZeroDir.mkdirs();
      mBaseUserPath=baseUserPath;
      FileUtils.setPermissions(mUsersDir.toString(),FileUtils.S_IRWXU | FileUtils.S_IRWXG | FileUtils.S_IROTH| FileUtils.S_IXOTH,-1,-1);
      mUserListFile=new File(mUsersDir,USER_LIST_FILENAME);
      readUserListLocked();
      ArrayList<UserInfo> partials=new ArrayList<UserInfo>();
      for (int i=0; i < mUsers.size(); i++) {
        UserInfo ui=mUsers.valueAt(i);
        if ((ui.partial || ui.guestToRemove) && i != 0) {
          partials.add(ui);
        }
      }
      for (int i=0; i < partials.size(); i++) {
        UserInfo ui=partials.get(i);
        Slog.w(LOG_TAG,""String_Node_Str"" + i + ""String_Node_Str""+ ui.name+ ""String_Node_Str"");
        removeUserStateLocked(ui.id);
      }
      sInstance=this;
    }
  }
}","/** 
 * Available for testing purposes.
 */
private UserManagerService(Context context,PackageManagerService pm,Object installLock,Object packagesLock,File dataDir,File baseUserPath){
  mContext=context;
  mPm=pm;
  mInstallLock=installLock;
  mPackagesLock=packagesLock;
  mHandler=new Handler();
synchronized (mInstallLock) {
synchronized (mPackagesLock) {
      mUsersDir=new File(dataDir,USER_INFO_DIR);
      mUsersDir.mkdirs();
      File userZeroDir=new File(mUsersDir,""String_Node_Str"");
      userZeroDir.mkdirs();
      mBaseUserPath=baseUserPath;
      FileUtils.setPermissions(mUsersDir.toString(),FileUtils.S_IRWXU | FileUtils.S_IRWXG | FileUtils.S_IROTH| FileUtils.S_IXOTH,-1,-1);
      mUserListFile=new File(mUsersDir,USER_LIST_FILENAME);
      initDefaultGuestRestrictions();
      readUserListLocked();
      ArrayList<UserInfo> partials=new ArrayList<UserInfo>();
      for (int i=0; i < mUsers.size(); i++) {
        UserInfo ui=mUsers.valueAt(i);
        if ((ui.partial || ui.guestToRemove) && i != 0) {
          partials.add(ui);
        }
      }
      for (int i=0; i < partials.size(); i++) {
        UserInfo ui=partials.get(i);
        Slog.w(LOG_TAG,""String_Node_Str"" + i + ""String_Node_Str""+ ui.name+ ""String_Node_Str"");
        removeUserStateLocked(ui.id);
      }
      sInstance=this;
    }
  }
}",0.9855182926829268
195910,"/** 
 * If default guest restrictions haven't been initialized yet, add the basic restrictions.
 */
private void initDefaultGuestRestrictions(){
  if (mGuestRestrictions.isEmpty()) {
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_OUTGOING_CALLS,true);
    writeUserListLocked();
  }
}","/** 
 * If default guest restrictions haven't been initialized yet, add the basic restrictions.
 */
private void initDefaultGuestRestrictions(){
  if (mGuestRestrictions.isEmpty()) {
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_OUTGOING_CALLS,true);
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_SMS,true);
  }
}",0.8860353130016051
195911,"private void readUserListLocked(){
  if (!mUserListFile.exists()) {
    fallbackToSingleUserLocked();
    return;
  }
  FileInputStream fis=null;
  AtomicFile userListFile=new AtomicFile(mUserListFile);
  try {
    fis=userListFile.openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      Slog.e(LOG_TAG,""String_Node_Str"");
      fallbackToSingleUserLocked();
      return;
    }
    mNextSerialNumber=-1;
    if (parser.getName().equals(TAG_USERS)) {
      String lastSerialNumber=parser.getAttributeValue(null,ATTR_NEXT_SERIAL_NO);
      if (lastSerialNumber != null) {
        mNextSerialNumber=Integer.parseInt(lastSerialNumber);
      }
      String versionNumber=parser.getAttributeValue(null,ATTR_USER_VERSION);
      if (versionNumber != null) {
        mUserVersion=Integer.parseInt(versionNumber);
      }
    }
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (type == XmlPullParser.START_TAG) {
        final String name=parser.getName();
        if (name.equals(TAG_USER)) {
          String id=parser.getAttributeValue(null,ATTR_ID);
          UserInfo user=readUserLocked(Integer.parseInt(id));
          if (user != null) {
            mUsers.put(user.id,user);
            if (mNextSerialNumber < 0 || mNextSerialNumber <= user.id) {
              mNextSerialNumber=user.id + 1;
            }
          }
        }
 else         if (name.equals(TAG_GUEST_RESTRICTIONS)) {
          mGuestRestrictions.clear();
          readRestrictionsLocked(parser,mGuestRestrictions);
        }
      }
    }
    updateUserIdsLocked();
    upgradeIfNecessaryLocked();
  }
 catch (  IOException ioe) {
    fallbackToSingleUserLocked();
  }
catch (  XmlPullParserException pe) {
    fallbackToSingleUserLocked();
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","private void readUserListLocked(){
  if (!mUserListFile.exists()) {
    fallbackToSingleUserLocked();
    return;
  }
  FileInputStream fis=null;
  AtomicFile userListFile=new AtomicFile(mUserListFile);
  try {
    fis=userListFile.openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      Slog.e(LOG_TAG,""String_Node_Str"");
      fallbackToSingleUserLocked();
      return;
    }
    mNextSerialNumber=-1;
    if (parser.getName().equals(TAG_USERS)) {
      String lastSerialNumber=parser.getAttributeValue(null,ATTR_NEXT_SERIAL_NO);
      if (lastSerialNumber != null) {
        mNextSerialNumber=Integer.parseInt(lastSerialNumber);
      }
      String versionNumber=parser.getAttributeValue(null,ATTR_USER_VERSION);
      if (versionNumber != null) {
        mUserVersion=Integer.parseInt(versionNumber);
      }
    }
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (type == XmlPullParser.START_TAG) {
        final String name=parser.getName();
        if (name.equals(TAG_USER)) {
          String id=parser.getAttributeValue(null,ATTR_ID);
          UserInfo user=readUserLocked(Integer.parseInt(id));
          if (user != null) {
            mUsers.put(user.id,user);
            if (mNextSerialNumber < 0 || mNextSerialNumber <= user.id) {
              mNextSerialNumber=user.id + 1;
            }
          }
        }
 else         if (name.equals(TAG_GUEST_RESTRICTIONS)) {
          while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.END_TAG) {
            if (type == XmlPullParser.START_TAG) {
              if (parser.getName().equals(TAG_RESTRICTIONS)) {
                readRestrictionsLocked(parser,mGuestRestrictions);
              }
              break;
            }
          }
        }
      }
    }
    updateUserIdsLocked();
    upgradeIfNecessaryLocked();
  }
 catch (  IOException ioe) {
    fallbackToSingleUserLocked();
  }
catch (  XmlPullParserException pe) {
    fallbackToSingleUserLocked();
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.931637519872814
195912,"/** 
 * Available for testing purposes.
 */
private UserManagerService(Context context,PackageManagerService pm,Object installLock,Object packagesLock,File dataDir,File baseUserPath){
  mContext=context;
  mPm=pm;
  mInstallLock=installLock;
  mPackagesLock=packagesLock;
  mHandler=new Handler();
synchronized (mInstallLock) {
synchronized (mPackagesLock) {
      mUsersDir=new File(dataDir,USER_INFO_DIR);
      mUsersDir.mkdirs();
      File userZeroDir=new File(mUsersDir,""String_Node_Str"");
      userZeroDir.mkdirs();
      mBaseUserPath=baseUserPath;
      FileUtils.setPermissions(mUsersDir.toString(),FileUtils.S_IRWXU | FileUtils.S_IRWXG | FileUtils.S_IROTH| FileUtils.S_IXOTH,-1,-1);
      mUserListFile=new File(mUsersDir,USER_LIST_FILENAME);
      readUserListLocked();
      ArrayList<UserInfo> partials=new ArrayList<UserInfo>();
      for (int i=0; i < mUsers.size(); i++) {
        UserInfo ui=mUsers.valueAt(i);
        if ((ui.partial || ui.guestToRemove) && i != 0) {
          partials.add(ui);
        }
      }
      for (int i=0; i < partials.size(); i++) {
        UserInfo ui=partials.get(i);
        Slog.w(LOG_TAG,""String_Node_Str"" + i + ""String_Node_Str""+ ui.name+ ""String_Node_Str"");
        removeUserStateLocked(ui.id);
      }
      sInstance=this;
    }
  }
}","/** 
 * Available for testing purposes.
 */
private UserManagerService(Context context,PackageManagerService pm,Object installLock,Object packagesLock,File dataDir,File baseUserPath){
  mContext=context;
  mPm=pm;
  mInstallLock=installLock;
  mPackagesLock=packagesLock;
  mHandler=new Handler();
synchronized (mInstallLock) {
synchronized (mPackagesLock) {
      mUsersDir=new File(dataDir,USER_INFO_DIR);
      mUsersDir.mkdirs();
      File userZeroDir=new File(mUsersDir,""String_Node_Str"");
      userZeroDir.mkdirs();
      mBaseUserPath=baseUserPath;
      FileUtils.setPermissions(mUsersDir.toString(),FileUtils.S_IRWXU | FileUtils.S_IRWXG | FileUtils.S_IROTH| FileUtils.S_IXOTH,-1,-1);
      mUserListFile=new File(mUsersDir,USER_LIST_FILENAME);
      initDefaultGuestRestrictions();
      readUserListLocked();
      ArrayList<UserInfo> partials=new ArrayList<UserInfo>();
      for (int i=0; i < mUsers.size(); i++) {
        UserInfo ui=mUsers.valueAt(i);
        if ((ui.partial || ui.guestToRemove) && i != 0) {
          partials.add(ui);
        }
      }
      for (int i=0; i < partials.size(); i++) {
        UserInfo ui=partials.get(i);
        Slog.w(LOG_TAG,""String_Node_Str"" + i + ""String_Node_Str""+ ui.name+ ""String_Node_Str"");
        removeUserStateLocked(ui.id);
      }
      sInstance=this;
    }
  }
}",0.9855182926829268
195913,"/** 
 * If default guest restrictions haven't been initialized yet, add the basic restrictions.
 */
private void initDefaultGuestRestrictions(){
  if (mGuestRestrictions.isEmpty()) {
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_OUTGOING_CALLS,true);
    writeUserListLocked();
  }
}","/** 
 * If default guest restrictions haven't been initialized yet, add the basic restrictions.
 */
private void initDefaultGuestRestrictions(){
  if (mGuestRestrictions.isEmpty()) {
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_OUTGOING_CALLS,true);
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_SMS,true);
  }
}",0.8860353130016051
195914,"private void readUserListLocked(){
  if (!mUserListFile.exists()) {
    fallbackToSingleUserLocked();
    return;
  }
  FileInputStream fis=null;
  AtomicFile userListFile=new AtomicFile(mUserListFile);
  try {
    fis=userListFile.openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      Slog.e(LOG_TAG,""String_Node_Str"");
      fallbackToSingleUserLocked();
      return;
    }
    mNextSerialNumber=-1;
    if (parser.getName().equals(TAG_USERS)) {
      String lastSerialNumber=parser.getAttributeValue(null,ATTR_NEXT_SERIAL_NO);
      if (lastSerialNumber != null) {
        mNextSerialNumber=Integer.parseInt(lastSerialNumber);
      }
      String versionNumber=parser.getAttributeValue(null,ATTR_USER_VERSION);
      if (versionNumber != null) {
        mUserVersion=Integer.parseInt(versionNumber);
      }
    }
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (type == XmlPullParser.START_TAG) {
        final String name=parser.getName();
        if (name.equals(TAG_USER)) {
          String id=parser.getAttributeValue(null,ATTR_ID);
          UserInfo user=readUserLocked(Integer.parseInt(id));
          if (user != null) {
            mUsers.put(user.id,user);
            if (mNextSerialNumber < 0 || mNextSerialNumber <= user.id) {
              mNextSerialNumber=user.id + 1;
            }
          }
        }
 else         if (name.equals(TAG_GUEST_RESTRICTIONS)) {
          mGuestRestrictions.clear();
          readRestrictionsLocked(parser,mGuestRestrictions);
        }
      }
    }
    updateUserIdsLocked();
    upgradeIfNecessaryLocked();
  }
 catch (  IOException ioe) {
    fallbackToSingleUserLocked();
  }
catch (  XmlPullParserException pe) {
    fallbackToSingleUserLocked();
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","private void readUserListLocked(){
  if (!mUserListFile.exists()) {
    fallbackToSingleUserLocked();
    return;
  }
  FileInputStream fis=null;
  AtomicFile userListFile=new AtomicFile(mUserListFile);
  try {
    fis=userListFile.openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      Slog.e(LOG_TAG,""String_Node_Str"");
      fallbackToSingleUserLocked();
      return;
    }
    mNextSerialNumber=-1;
    if (parser.getName().equals(TAG_USERS)) {
      String lastSerialNumber=parser.getAttributeValue(null,ATTR_NEXT_SERIAL_NO);
      if (lastSerialNumber != null) {
        mNextSerialNumber=Integer.parseInt(lastSerialNumber);
      }
      String versionNumber=parser.getAttributeValue(null,ATTR_USER_VERSION);
      if (versionNumber != null) {
        mUserVersion=Integer.parseInt(versionNumber);
      }
    }
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (type == XmlPullParser.START_TAG) {
        final String name=parser.getName();
        if (name.equals(TAG_USER)) {
          String id=parser.getAttributeValue(null,ATTR_ID);
          UserInfo user=readUserLocked(Integer.parseInt(id));
          if (user != null) {
            mUsers.put(user.id,user);
            if (mNextSerialNumber < 0 || mNextSerialNumber <= user.id) {
              mNextSerialNumber=user.id + 1;
            }
          }
        }
 else         if (name.equals(TAG_GUEST_RESTRICTIONS)) {
          while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.END_TAG) {
            if (type == XmlPullParser.START_TAG) {
              if (parser.getName().equals(TAG_RESTRICTIONS)) {
                readRestrictionsLocked(parser,mGuestRestrictions);
              }
              break;
            }
          }
        }
      }
    }
    updateUserIdsLocked();
    upgradeIfNecessaryLocked();
  }
 catch (  IOException ioe) {
    fallbackToSingleUserLocked();
  }
catch (  XmlPullParserException pe) {
    fallbackToSingleUserLocked();
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.931637519872814
195915,"/** 
 * Available for testing purposes.
 */
private UserManagerService(Context context,PackageManagerService pm,Object installLock,Object packagesLock,File dataDir,File baseUserPath){
  mContext=context;
  mPm=pm;
  mInstallLock=installLock;
  mPackagesLock=packagesLock;
  mHandler=new Handler();
synchronized (mInstallLock) {
synchronized (mPackagesLock) {
      mUsersDir=new File(dataDir,USER_INFO_DIR);
      mUsersDir.mkdirs();
      File userZeroDir=new File(mUsersDir,""String_Node_Str"");
      userZeroDir.mkdirs();
      mBaseUserPath=baseUserPath;
      FileUtils.setPermissions(mUsersDir.toString(),FileUtils.S_IRWXU | FileUtils.S_IRWXG | FileUtils.S_IROTH| FileUtils.S_IXOTH,-1,-1);
      mUserListFile=new File(mUsersDir,USER_LIST_FILENAME);
      readUserListLocked();
      ArrayList<UserInfo> partials=new ArrayList<UserInfo>();
      for (int i=0; i < mUsers.size(); i++) {
        UserInfo ui=mUsers.valueAt(i);
        if ((ui.partial || ui.guestToRemove) && i != 0) {
          partials.add(ui);
        }
      }
      for (int i=0; i < partials.size(); i++) {
        UserInfo ui=partials.get(i);
        Slog.w(LOG_TAG,""String_Node_Str"" + i + ""String_Node_Str""+ ui.name+ ""String_Node_Str"");
        removeUserStateLocked(ui.id);
      }
      sInstance=this;
    }
  }
}","/** 
 * Available for testing purposes.
 */
private UserManagerService(Context context,PackageManagerService pm,Object installLock,Object packagesLock,File dataDir,File baseUserPath){
  mContext=context;
  mPm=pm;
  mInstallLock=installLock;
  mPackagesLock=packagesLock;
  mHandler=new Handler();
synchronized (mInstallLock) {
synchronized (mPackagesLock) {
      mUsersDir=new File(dataDir,USER_INFO_DIR);
      mUsersDir.mkdirs();
      File userZeroDir=new File(mUsersDir,""String_Node_Str"");
      userZeroDir.mkdirs();
      mBaseUserPath=baseUserPath;
      FileUtils.setPermissions(mUsersDir.toString(),FileUtils.S_IRWXU | FileUtils.S_IRWXG | FileUtils.S_IROTH| FileUtils.S_IXOTH,-1,-1);
      mUserListFile=new File(mUsersDir,USER_LIST_FILENAME);
      initDefaultGuestRestrictions();
      readUserListLocked();
      ArrayList<UserInfo> partials=new ArrayList<UserInfo>();
      for (int i=0; i < mUsers.size(); i++) {
        UserInfo ui=mUsers.valueAt(i);
        if ((ui.partial || ui.guestToRemove) && i != 0) {
          partials.add(ui);
        }
      }
      for (int i=0; i < partials.size(); i++) {
        UserInfo ui=partials.get(i);
        Slog.w(LOG_TAG,""String_Node_Str"" + i + ""String_Node_Str""+ ui.name+ ""String_Node_Str"");
        removeUserStateLocked(ui.id);
      }
      sInstance=this;
    }
  }
}",0.9855182926829268
195916,"/** 
 * If default guest restrictions haven't been initialized yet, add the basic restrictions.
 */
private void initDefaultGuestRestrictions(){
  if (mGuestRestrictions.isEmpty()) {
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_OUTGOING_CALLS,true);
    writeUserListLocked();
  }
}","/** 
 * If default guest restrictions haven't been initialized yet, add the basic restrictions.
 */
private void initDefaultGuestRestrictions(){
  if (mGuestRestrictions.isEmpty()) {
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_OUTGOING_CALLS,true);
    mGuestRestrictions.putBoolean(UserManager.DISALLOW_SMS,true);
  }
}",0.8860353130016051
195917,"@Override public void onRestoreInstanceState(Parcelable state){
  if (!(state instanceof SavedState)) {
    super.onRestoreInstanceState(state);
    return;
  }
  SavedState ss=(SavedState)state;
  super.onRestoreInstanceState(ss.getSuperState());
  if (ss.text != null) {
    setText(ss.text);
  }
  if (ss.selStart >= 0 && ss.selEnd >= 0) {
    if (mText instanceof Spannable) {
      int len=mText.length();
      if (ss.selStart > len || ss.selEnd > len) {
        String restored=""String_Node_Str"";
        if (ss.text != null) {
          restored=""String_Node_Str"";
        }
        Log.e(LOG_TAG,""String_Node_Str"" + ss.selStart + ""String_Node_Str""+ ss.selEnd+ ""String_Node_Str""+ restored+ ""String_Node_Str""+ mText);
      }
 else {
        Selection.setSelection((Spannable)mText,ss.selStart,ss.selEnd);
        if (ss.frozenWithFocus) {
          createEditorIfNeeded();
          mEditor.mFrozenWithFocus=true;
        }
      }
    }
  }
  if (ss.error != null) {
    final CharSequence error=ss.error;
    post(new Runnable(){
      public void run(){
        setError(error);
      }
    }
);
  }
}","@Override public void onRestoreInstanceState(Parcelable state){
  if (!(state instanceof SavedState)) {
    super.onRestoreInstanceState(state);
    return;
  }
  SavedState ss=(SavedState)state;
  super.onRestoreInstanceState(ss.getSuperState());
  if (ss.text != null) {
    setText(ss.text);
  }
  if (ss.selStart >= 0 && ss.selEnd >= 0) {
    if (mText instanceof Spannable) {
      int len=mText.length();
      if (ss.selStart > len || ss.selEnd > len) {
        String restored=""String_Node_Str"";
        if (ss.text != null) {
          restored=""String_Node_Str"";
        }
        Log.e(LOG_TAG,""String_Node_Str"" + ss.selStart + ""String_Node_Str""+ ss.selEnd+ ""String_Node_Str""+ restored+ ""String_Node_Str""+ mText);
      }
 else {
        Selection.setSelection((Spannable)mText,ss.selStart,ss.selEnd);
        if (ss.frozenWithFocus) {
          createEditorIfNeeded();
          mEditor.mFrozenWithFocus=true;
        }
      }
    }
  }
  if (ss.error != null) {
    final CharSequence error=ss.error;
    post(new Runnable(){
      public void run(){
        if (mEditor == null || !mEditor.mErrorWasChanged) {
          setError(error);
        }
      }
    }
);
  }
}",0.9355400696864112
195918,"@Override public void onRestoreInstanceState(Parcelable state){
  if (!(state instanceof SavedState)) {
    super.onRestoreInstanceState(state);
    return;
  }
  SavedState ss=(SavedState)state;
  super.onRestoreInstanceState(ss.getSuperState());
  if (ss.text != null) {
    setText(ss.text);
  }
  if (ss.selStart >= 0 && ss.selEnd >= 0) {
    if (mText instanceof Spannable) {
      int len=mText.length();
      if (ss.selStart > len || ss.selEnd > len) {
        String restored=""String_Node_Str"";
        if (ss.text != null) {
          restored=""String_Node_Str"";
        }
        Log.e(LOG_TAG,""String_Node_Str"" + ss.selStart + ""String_Node_Str""+ ss.selEnd+ ""String_Node_Str""+ restored+ ""String_Node_Str""+ mText);
      }
 else {
        Selection.setSelection((Spannable)mText,ss.selStart,ss.selEnd);
        if (ss.frozenWithFocus) {
          createEditorIfNeeded();
          mEditor.mFrozenWithFocus=true;
        }
      }
    }
  }
  if (ss.error != null) {
    final CharSequence error=ss.error;
    post(new Runnable(){
      public void run(){
        setError(error);
      }
    }
);
  }
}","@Override public void onRestoreInstanceState(Parcelable state){
  if (!(state instanceof SavedState)) {
    super.onRestoreInstanceState(state);
    return;
  }
  SavedState ss=(SavedState)state;
  super.onRestoreInstanceState(ss.getSuperState());
  if (ss.text != null) {
    setText(ss.text);
  }
  if (ss.selStart >= 0 && ss.selEnd >= 0) {
    if (mText instanceof Spannable) {
      int len=mText.length();
      if (ss.selStart > len || ss.selEnd > len) {
        String restored=""String_Node_Str"";
        if (ss.text != null) {
          restored=""String_Node_Str"";
        }
        Log.e(LOG_TAG,""String_Node_Str"" + ss.selStart + ""String_Node_Str""+ ss.selEnd+ ""String_Node_Str""+ restored+ ""String_Node_Str""+ mText);
      }
 else {
        Selection.setSelection((Spannable)mText,ss.selStart,ss.selEnd);
        if (ss.frozenWithFocus) {
          createEditorIfNeeded();
          mEditor.mFrozenWithFocus=true;
        }
      }
    }
  }
  if (ss.error != null) {
    final CharSequence error=ss.error;
    post(new Runnable(){
      public void run(){
        if (mEditor == null || !mEditor.mErrorWasChanged) {
          setError(error);
        }
      }
    }
);
  }
}",0.9355400696864112
195919,"@Override public void onRestoreInstanceState(Parcelable state){
  if (!(state instanceof SavedState)) {
    super.onRestoreInstanceState(state);
    return;
  }
  SavedState ss=(SavedState)state;
  super.onRestoreInstanceState(ss.getSuperState());
  if (ss.text != null) {
    setText(ss.text);
  }
  if (ss.selStart >= 0 && ss.selEnd >= 0) {
    if (mText instanceof Spannable) {
      int len=mText.length();
      if (ss.selStart > len || ss.selEnd > len) {
        String restored=""String_Node_Str"";
        if (ss.text != null) {
          restored=""String_Node_Str"";
        }
        Log.e(LOG_TAG,""String_Node_Str"" + ss.selStart + ""String_Node_Str""+ ss.selEnd+ ""String_Node_Str""+ restored+ ""String_Node_Str""+ mText);
      }
 else {
        Selection.setSelection((Spannable)mText,ss.selStart,ss.selEnd);
        if (ss.frozenWithFocus) {
          createEditorIfNeeded();
          mEditor.mFrozenWithFocus=true;
        }
      }
    }
  }
  if (ss.error != null) {
    final CharSequence error=ss.error;
    post(new Runnable(){
      public void run(){
        setError(error);
      }
    }
);
  }
}","@Override public void onRestoreInstanceState(Parcelable state){
  if (!(state instanceof SavedState)) {
    super.onRestoreInstanceState(state);
    return;
  }
  SavedState ss=(SavedState)state;
  super.onRestoreInstanceState(ss.getSuperState());
  if (ss.text != null) {
    setText(ss.text);
  }
  if (ss.selStart >= 0 && ss.selEnd >= 0) {
    if (mText instanceof Spannable) {
      int len=mText.length();
      if (ss.selStart > len || ss.selEnd > len) {
        String restored=""String_Node_Str"";
        if (ss.text != null) {
          restored=""String_Node_Str"";
        }
        Log.e(LOG_TAG,""String_Node_Str"" + ss.selStart + ""String_Node_Str""+ ss.selEnd+ ""String_Node_Str""+ restored+ ""String_Node_Str""+ mText);
      }
 else {
        Selection.setSelection((Spannable)mText,ss.selStart,ss.selEnd);
        if (ss.frozenWithFocus) {
          createEditorIfNeeded();
          mEditor.mFrozenWithFocus=true;
        }
      }
    }
  }
  if (ss.error != null) {
    final CharSequence error=ss.error;
    post(new Runnable(){
      public void run(){
        if (mEditor == null || !mEditor.mErrorWasChanged) {
          setError(error);
        }
      }
    }
);
  }
}",0.9355400696864112
195920,"@Override public void onRestoreInstanceState(Parcelable state){
  if (!(state instanceof SavedState)) {
    super.onRestoreInstanceState(state);
    return;
  }
  SavedState ss=(SavedState)state;
  super.onRestoreInstanceState(ss.getSuperState());
  if (ss.text != null) {
    setText(ss.text);
  }
  if (ss.selStart >= 0 && ss.selEnd >= 0) {
    if (mText instanceof Spannable) {
      int len=mText.length();
      if (ss.selStart > len || ss.selEnd > len) {
        String restored=""String_Node_Str"";
        if (ss.text != null) {
          restored=""String_Node_Str"";
        }
        Log.e(LOG_TAG,""String_Node_Str"" + ss.selStart + ""String_Node_Str""+ ss.selEnd+ ""String_Node_Str""+ restored+ ""String_Node_Str""+ mText);
      }
 else {
        Selection.setSelection((Spannable)mText,ss.selStart,ss.selEnd);
        if (ss.frozenWithFocus) {
          createEditorIfNeeded();
          mEditor.mFrozenWithFocus=true;
        }
      }
    }
  }
  if (ss.error != null) {
    final CharSequence error=ss.error;
    post(new Runnable(){
      public void run(){
        setError(error);
      }
    }
);
  }
}","@Override public void onRestoreInstanceState(Parcelable state){
  if (!(state instanceof SavedState)) {
    super.onRestoreInstanceState(state);
    return;
  }
  SavedState ss=(SavedState)state;
  super.onRestoreInstanceState(ss.getSuperState());
  if (ss.text != null) {
    setText(ss.text);
  }
  if (ss.selStart >= 0 && ss.selEnd >= 0) {
    if (mText instanceof Spannable) {
      int len=mText.length();
      if (ss.selStart > len || ss.selEnd > len) {
        String restored=""String_Node_Str"";
        if (ss.text != null) {
          restored=""String_Node_Str"";
        }
        Log.e(LOG_TAG,""String_Node_Str"" + ss.selStart + ""String_Node_Str""+ ss.selEnd+ ""String_Node_Str""+ restored+ ""String_Node_Str""+ mText);
      }
 else {
        Selection.setSelection((Spannable)mText,ss.selStart,ss.selEnd);
        if (ss.frozenWithFocus) {
          createEditorIfNeeded();
          mEditor.mFrozenWithFocus=true;
        }
      }
    }
  }
  if (ss.error != null) {
    final CharSequence error=ss.error;
    post(new Runnable(){
      public void run(){
        if (mEditor == null || !mEditor.mErrorWasChanged) {
          setError(error);
        }
      }
    }
);
  }
}",0.9355400696864112
195921,"@Override public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      String callingPackage=data.readString();
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      int startFlags=data.readInt();
      ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
      Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
      int result=startActivity(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_ACTIVITY_AS_USER_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder b=data.readStrongBinder();
    IApplicationThread app=ApplicationThreadNative.asInterface(b);
    String callingPackage=data.readString();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    String resolvedType=data.readString();
    IBinder resultTo=data.readStrongBinder();
    String resultWho=data.readString();
    int requestCode=data.readInt();
    int startFlags=data.readInt();
    ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
    Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
    int userId=data.readInt();
    int result=startActivityAsUser(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
    reply.writeNoException();
    reply.writeInt(result);
    return true;
  }
case START_ACTIVITY_AS_CALLER_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder b=data.readStrongBinder();
  IApplicationThread app=ApplicationThreadNative.asInterface(b);
  String callingPackage=data.readString();
  Intent intent=Intent.CREATOR.createFromParcel(data);
  String resolvedType=data.readString();
  IBinder resultTo=data.readStrongBinder();
  String resultWho=data.readString();
  int requestCode=data.readInt();
  int startFlags=data.readInt();
  ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
  Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
  int userId=data.readInt();
  int result=startActivityAsCaller(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
  reply.writeNoException();
  reply.writeInt(result);
  return true;
}
case START_ACTIVITY_AND_WAIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
WaitResult result=startActivityAndWait(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
reply.writeNoException();
result.writeToParcel(reply,0);
return true;
}
case START_ACTIVITY_WITH_CONFIG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
Configuration config=Configuration.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivityWithConfig(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,config,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_ACTIVITY_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IntentSender intent=IntentSender.CREATOR.createFromParcel(data);
Intent fillInIntent=null;
if (data.readInt() != 0) {
fillInIntent=Intent.CREATOR.createFromParcel(data);
}
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int flagsMask=data.readInt();
int flagsValues=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int result=startActivityIntentSender(app,intent,fillInIntent,resolvedType,resultTo,resultWho,requestCode,flagsMask,flagsValues,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_VOICE_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
int callingPid=data.readInt();
int callingUid=data.readInt();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
IVoiceInteractor interactor=IVoiceInteractor.Stub.asInterface(data.readStrongBinder());
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startVoiceActivity(callingPackage,callingPid,callingUid,intent,resolvedType,session,interactor,startFlags,profilerInfo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder callingActivity=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
boolean result=startNextMatchingActivity(callingActivity,intent,options);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_ACTIVITY_FROM_RECENTS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
Bundle options=data.readInt() == 0 ? null : Bundle.CREATOR.createFromParcel(data);
int result=startActivityFromRecents(taskId,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent resultData=null;
int resultCode=data.readInt();
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean finishTask=(data.readInt() != 0);
boolean res=finishActivity(token,resultCode,resultData,finishTask);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case FINISH_ACTIVITY_AFFINITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=finishActivityAffinity(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_VOICE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
finishVoiceTask(session);
reply.writeNoException();
return true;
}
case RELEASE_ACTIVITY_INSTANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=releaseActivityInstance(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case RELEASE_SOME_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
releaseSomeActivities(app);
reply.writeNoException();
return true;
}
case WILL_ACTIVITY_BE_VISIBLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=willActivityBeVisible(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
String packageName=data.readString();
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
int userId=data.readInt();
Intent intent=registerReceiver(app,packageName,rec,filter,perm,userId);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
int appOp=data.readInt();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int userId=data.readInt();
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,appOp,serialized,sticky,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
int userId=data.readInt();
unbroadcastIntent(app,intent,userId);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Configuration config=null;
if (data.readInt() != 0) {
config=Configuration.CREATOR.createFromParcel(data);
}
boolean stopProfiling=data.readInt() != 0;
if (token != null) {
activityIdle(token,config,stopProfiling);
}
reply.writeNoException();
return true;
}
case ACTIVITY_RESUMED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityResumed(token);
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityPaused(token);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
PersistableBundle persistentState=data.readPersistableBundle();
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,map,persistentState,description);
reply.writeNoException();
return true;
}
case ACTIVITY_SLEPT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activitySlept(token);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_APP_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
List<IAppTask> list=getAppTasks(callingPackage);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
IAppTask task=list.get(i);
reply.writeStrongBinder(task.asBinder());
}
return true;
}
case ADD_APP_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
ActivityManager.TaskDescription descr=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
Bitmap thumbnail=Bitmap.CREATOR.createFromParcel(data);
int res=addAppTask(activityToken,intent,descr,thumbnail);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_APP_TASK_THUMBNAIL_SIZE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Point size=getAppTaskThumbnailSize();
reply.writeNoException();
size.writeToParcel(reply,0);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningTaskInfo> list=getTasks(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
int userId=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl,userId);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_TASK_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int id=data.readInt();
ActivityManager.TaskThumbnail taskThumbnail=getTaskThumbnail(id);
reply.writeNoException();
if (taskThumbnail != null) {
reply.writeInt(1);
taskThumbnail.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningServiceInfo> list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ApplicationInfo> list=getRunningExternalApplications();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
moveTaskToFront(task,fl,options);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
int stackId=data.readInt();
boolean toTop=data.readInt() != 0;
moveTaskToStack(taskId,stackId,toTop);
reply.writeNoException();
return true;
}
case RESIZE_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
float weight=data.readFloat();
Rect r=Rect.CREATOR.createFromParcel(data);
resizeStack(stackId,r);
reply.writeNoException();
return true;
}
case GET_ALL_STACK_INFOS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<StackInfo> list=getAllStackInfos();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_STACK_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
StackInfo info=getStackInfo(stackId);
reply.writeNoException();
if (info != null) {
reply.writeInt(1);
info.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case IS_IN_HOME_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean isInHomeStack=isInHomeStack(taskId);
reply.writeNoException();
reply.writeInt(isInHomeStack ? 1 : 0);
return true;
}
case SET_FOCUSED_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
setFocusedStack(stackId);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
int userId=data.readInt();
boolean stable=data.readInt() != 0;
ContentProviderHolder cph=getContentProvider(app,name,userId,stable);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
int userId=data.readInt();
IBinder token=data.readStrongBinder();
ContentProviderHolder cph=getContentProviderExternal(name,userId,token);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REF_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
int stable=data.readInt();
int unstable=data.readInt();
boolean res=refContentProvider(b,stable,unstable);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case UNSTABLE_PROVIDER_DIED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
unstableProviderDied(b);
reply.writeNoException();
return true;
}
case APP_NOT_RESPONDING_VIA_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
appNotRespondingViaProvider(b);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
boolean stable=data.readInt() != 0;
removeContentProvider(b,stable);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder token=data.readStrongBinder();
removeContentProviderExternal(name,token);
reply.writeNoException();
return true;
}
case GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName comp=ComponentName.CREATOR.createFromParcel(data);
PendingIntent pi=getRunningServiceControlPanel(comp);
reply.writeNoException();
PendingIntent.writePendingIntentOrNullToParcel(pi,reply);
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
ComponentName cn=startService(app,service,resolvedType,userId);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
int res=stopService(app,service,resolvedType,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int id=data.readInt();
Notification notification=null;
if (data.readInt() != 0) {
notification=Notification.CREATOR.createFromParcel(data);
}
boolean removeNotification=data.readInt() != 0;
setServiceForeground(className,token,id,notification,removeNotification);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
int userId=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int type=data.readInt();
int startId=data.readInt();
int res=data.readInt();
serviceDoneExecuting(token,type,startId,res);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
b=data.readStrongBinder();
IUiAutomationConnection c=IUiAutomationConnection.Stub.asInterface(b);
int userId=data.readInt();
String abiOverride=data.readString();
boolean res=startInstrumentation(className,profileFile,fl,arguments,w,c,userId,abiOverride);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent[] requestIntents;
String[] requestResolvedTypes;
if (data.readInt() != 0) {
requestIntents=data.createTypedArray(Intent.CREATOR);
requestResolvedTypes=data.createStringArray();
}
 else {
requestIntents=null;
requestResolvedTypes=null;
}
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntents,requestResolvedTypes,fl,options,userId);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_UID_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
int res=getUidForIntentSender(r);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case HANDLE_INCOMING_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingPid=data.readInt();
int callingUid=data.readInt();
int userId=data.readInt();
boolean allowAll=data.readInt() != 0;
boolean requireFull=data.readInt() != 0;
String name=data.readString();
String callerPackage=data.readString();
int res=handleIncomingUser(callingPid,callingUid,userId,allowAll,requireFull,name,callerPackage);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int userId=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
int userId=data.readInt();
boolean res=clearApplicationUserData(packageName,observer,userId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
grantUriPermission(app,targetPkg,uri,mode,userId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermission(app,uri,mode,userId);
reply.writeNoException();
return true;
}
case TAKE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
takePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case RELEASE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
releasePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case GET_PERSISTED_URI_PERMISSIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final String packageName=data.readString();
final boolean incoming=data.readInt() != 0;
final ParceledListSlice<UriPermission> perms=getPersistedUriPermissions(packageName,incoming);
reply.writeNoException();
perms.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case SET_LOCK_SCREEN_SHOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
setLockScreenShown(data.readInt() != 0);
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_CONTROLLER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityController watcher=IActivityController.Stub.asInterface(data.readStrongBinder());
setActivityController(watcher);
reply.writeNoException();
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
int sourceUid=data.readInt();
String sourcePkg=data.readString();
noteWakeupAlarm(is,sourceUid,sourcePkg);
reply.writeNoException();
return true;
}
case KILL_PIDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
String reason=data.readString();
boolean secure=data.readInt() != 0;
boolean res=killPids(pids,reason,secure);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_PROCESSES_BELOW_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
boolean res=killProcessesBelowForeground(reason);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_CRASH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
handleApplicationCrash(app,ci);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_WTF_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
String tag=data.readString();
boolean system=data.readInt() != 0;
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
boolean res=handleApplicationWtf(app,tag,system,ci);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int violationMask=data.readInt();
StrictMode.ViolationInfo info=new StrictMode.ViolationInfo(data);
handleApplicationStrictModeViolation(app,violationMask,info);
reply.writeNoException();
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case KILL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
killBackgroundProcesses(packageName,userId);
reply.writeNoException();
return true;
}
case KILL_ALL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
killAllBackgroundProcesses();
reply.writeNoException();
return true;
}
case FORCE_STOP_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
forceStopPackage(packageName,userId);
reply.writeNoException();
return true;
}
case GET_MY_MEMORY_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.RunningAppProcessInfo info=new ActivityManager.RunningAppProcessInfo();
getMyMemoryState(info);
reply.writeNoException();
info.writeToParcel(reply,0);
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean start=data.readInt() != 0;
int profileType=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
boolean res=profileControl(process,userId,start,profilerInfo,profileType);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
case ADD_PACKAGE_DEPENDENCY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
addPackageDependency(packageName);
reply.writeNoException();
return true;
}
case KILL_APPLICATION_WITH_APPID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int appid=data.readInt();
String reason=data.readString();
killApplicationWithAppId(pkg,appid,reason);
reply.writeNoException();
return true;
}
case CLOSE_SYSTEM_DIALOGS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
closeSystemDialogs(reason);
reply.writeNoException();
return true;
}
case GET_PROCESS_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
Debug.MemoryInfo[] res=getProcessMemoryInfo(pids);
reply.writeNoException();
reply.writeTypedArray(res,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case KILL_APPLICATION_PROCESS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String processName=data.readString();
int uid=data.readInt();
killApplicationProcess(processName,uid);
reply.writeNoException();
return true;
}
case OVERRIDE_PENDING_TRANSITION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String packageName=data.readString();
int enterAnim=data.readInt();
int exitAnim=data.readInt();
overridePendingTransition(token,packageName,enterAnim,exitAnim);
reply.writeNoException();
return true;
}
case IS_USER_A_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean areThey=isUserAMonkey();
reply.writeNoException();
reply.writeInt(areThey ? 1 : 0);
return true;
}
case SET_USER_IS_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean monkey=(data.readInt() == 1);
setUserIsMonkey(monkey);
reply.writeNoException();
return true;
}
case FINISH_HEAVY_WEIGHT_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
finishHeavyWeightApp();
reply.writeNoException();
return true;
}
case IS_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isit=isImmersive(token);
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case IS_TOP_OF_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean isTopOfTask=isTopOfTask(token);
reply.writeNoException();
reply.writeInt(isTopOfTask ? 1 : 0);
return true;
}
case CONVERT_FROM_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean converted=convertFromTranslucent(token);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case CONVERT_TO_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
boolean converted=convertToTranslucent(token,options);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case GET_ACTIVITY_OPTIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final ActivityOptions options=getActivityOptions(token);
reply.writeNoException();
reply.writeBundle(options == null ? null : options.toBundle());
return true;
}
case SET_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean imm=data.readInt() == 1;
setImmersive(token,imm);
reply.writeNoException();
return true;
}
case IS_TOP_ACTIVITY_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean isit=isTopActivityImmersive();
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case CRASH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
int initialPid=data.readInt();
String packageName=data.readString();
String message=data.readString();
crashApplication(uid,initialPid,packageName,message);
reply.writeNoException();
return true;
}
case GET_PROVIDER_MIME_TYPE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int userId=data.readInt();
String type=getProviderMimeType(uri,userId);
reply.writeNoException();
reply.writeString(type);
return true;
}
case NEW_URI_PERMISSION_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder perm=newUriPermissionOwner(name);
reply.writeNoException();
reply.writeStrongBinder(perm);
return true;
}
case GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
int fromUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int sourceUserId=data.readInt();
int targetUserId=data.readInt();
grantUriPermissionFromOwner(owner,fromUid,targetPkg,uri,mode,sourceUserId,targetUserId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
Uri uri=null;
if (data.readInt() != 0) {
uri=Uri.CREATOR.createFromParcel(data);
}
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermissionFromOwner(owner,uri,mode,userId);
reply.writeNoException();
return true;
}
case CHECK_GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int modeFlags=data.readInt();
int userId=data.readInt();
int res=checkGrantUriPermission(callingUid,targetPkg,uri,modeFlags,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case DUMP_HEAP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean managed=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? ParcelFileDescriptor.CREATOR.createFromParcel(data) : null;
boolean res=dumpHeap(process,userId,managed,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case START_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent[] intents=data.createTypedArray(Intent.CREATOR);
String[] resolvedTypes=data.createStringArray();
IBinder resultTo=data.readStrongBinder();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivities(app,callingPackage,intents,resolvedTypes,resultTo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=getFrontActivityScreenCompatMode();
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=data.readInt();
setFrontActivityScreenCompatMode(mode);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case GET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=getPackageScreenCompatMode(pkg);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=data.readInt();
setPackageScreenCompatMode(pkg,mode);
reply.writeNoException();
return true;
}
case SWITCH_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=switchUser(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_USER_IN_BACKGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=startUserInBackground(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case STOP_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
IStopUserCallback callback=IStopUserCallback.Stub.asInterface(data.readStrongBinder());
int result=stopUser(userid,callback);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_CURRENT_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
UserInfo userInfo=getCurrentUser();
reply.writeNoException();
userInfo.writeToParcel(reply,0);
return true;
}
case IS_USER_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean orStopping=data.readInt() != 0;
boolean result=isUserRunning(userid,orStopping);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case GET_RUNNING_USER_IDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] result=getRunningUserIds();
reply.writeNoException();
reply.writeIntArray(result);
return true;
}
case REMOVE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean result=removeTask(taskId);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case REGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
registerProcessObserver(observer);
return true;
}
case UNREGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
unregisterProcessObserver(observer);
return true;
}
case GET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=getPackageAskScreenCompat(pkg);
reply.writeNoException();
reply.writeInt(ask ? 1 : 0);
return true;
}
case SET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=data.readInt() != 0;
setPackageAskScreenCompat(pkg,ask);
reply.writeNoException();
return true;
}
case IS_INTENT_SENDER_TARGETED_TO_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderTargetedToPackage(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case IS_INTENT_SENDER_AN_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderAnActivity(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_INTENT_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
Intent intent=getIntentForIntentSender(r);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_TAG_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String prefix=data.readString();
String tag=getTagForIntentSender(r,prefix);
reply.writeNoException();
reply.writeString(tag);
return true;
}
case UPDATE_PERSISTENT_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updatePersistentConfiguration(config);
reply.writeNoException();
return true;
}
case GET_PROCESS_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
long[] pss=getProcessPss(pids);
reply.writeNoException();
reply.writeLongArray(pss);
return true;
}
case SHOW_BOOT_MESSAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
CharSequence msg=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
boolean always=data.readInt() != 0;
showBootMessage(msg,always);
reply.writeNoException();
return true;
}
case KEYGUARD_WAITING_FOR_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
keyguardWaitingForActivityDrawn();
reply.writeNoException();
return true;
}
case SHOULD_UP_RECREATE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String destAffinity=data.readString();
boolean res=shouldUpRecreateTask(token,destAffinity);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case NAVIGATE_UP_TO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent target=Intent.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
Intent resultData=null;
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean res=navigateUpTo(token,target,resultCode,resultData);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_LAUNCHED_FROM_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int res=getLaunchedFromUid(token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_LAUNCHED_FROM_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=getLaunchedFromPackage(token);
reply.writeNoException();
reply.writeString(res);
return true;
}
case REGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
registerUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case UNREGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
unregisterUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case REQUEST_BUG_REPORT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
requestBugReport();
reply.writeNoException();
return true;
}
case INPUT_DISPATCHING_TIMED_OUT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int pid=data.readInt();
boolean aboveSystem=data.readInt() != 0;
String reason=data.readString();
long res=inputDispatchingTimedOut(pid,aboveSystem,reason);
reply.writeNoException();
reply.writeLong(res);
return true;
}
case GET_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int requestType=data.readInt();
Bundle res=getAssistContextExtras(requestType);
reply.writeNoException();
reply.writeBundle(res);
return true;
}
case REPORT_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle extras=data.readBundle();
reportAssistContextExtras(token,extras);
reply.writeNoException();
return true;
}
case LAUNCH_ASSIST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
int requestType=data.readInt();
String hint=data.readString();
int userHandle=data.readInt();
boolean res=launchAssistIntent(intent,requestType,hint,userHandle);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
String reason=data.readString();
killUid(uid,reason);
reply.writeNoException();
return true;
}
case HANG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
boolean allowRestart=data.readInt() != 0;
hang(who,allowRestart);
reply.writeNoException();
return true;
}
case REPORT_ACTIVITY_FULLY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reportActivityFullyDrawn(token);
reply.writeNoException();
return true;
}
case NOTIFY_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyActivityDrawn(token);
reply.writeNoException();
return true;
}
case RESTART_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
restart();
reply.writeNoException();
return true;
}
case PERFORM_IDLE_MAINTENANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
performIdleMaintenance();
reply.writeNoException();
return true;
}
case CREATE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder parentActivityToken=data.readStrongBinder();
IActivityContainerCallback callback=IActivityContainerCallback.Stub.asInterface(data.readStrongBinder());
IActivityContainer activityContainer=createActivityContainer(parentActivityToken,callback);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case DELETE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityContainer activityContainer=IActivityContainer.Stub.asInterface(data.readStrongBinder());
deleteActivityContainer(activityContainer);
reply.writeNoException();
return true;
}
case GET_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
IActivityContainer activityContainer=getEnclosingActivityContainer(activityToken);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_HOME_ACTIVITY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder homeActivityToken=getHomeActivityToken();
reply.writeNoException();
reply.writeStrongBinder(homeActivityToken);
return true;
}
case START_LOCK_TASK_BY_TASK_ID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final int taskId=data.readInt();
startLockTaskMode(taskId);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
startLockTaskMode(token);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
startLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskMode();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case IS_IN_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean isInLockTaskMode=isInLockTaskMode();
reply.writeNoException();
reply.writeInt(isInLockTaskMode ? 1 : 0);
return true;
}
case SET_TASK_DESCRIPTION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ActivityManager.TaskDescription values=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
setTaskDescription(token,values);
reply.writeNoException();
return true;
}
case GET_TASK_DESCRIPTION_ICON_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String filename=data.readString();
Bitmap icon=getTaskDescriptionIcon(filename);
reply.writeNoException();
if (icon == null) {
reply.writeInt(0);
}
 else {
reply.writeInt(1);
icon.writeToParcel(reply,0);
}
return true;
}
case START_IN_PLACE_ANIMATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
startInPlaceAnimationOnFrontMostApplication(options);
reply.writeNoException();
return true;
}
case REQUEST_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean enable=data.readInt() > 0;
boolean success=requestVisibleBehind(token,enable);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case IS_BACKGROUND_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean enabled=isBackgroundVisibleBehind(token);
reply.writeNoException();
reply.writeInt(enabled ? 1 : 0);
return true;
}
case BACKGROUND_RESOURCES_RELEASED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
backgroundResourcesReleased(token);
reply.writeNoException();
return true;
}
case NOTIFY_LAUNCH_TASK_BEHIND_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyLaunchTaskBehindComplete(token);
reply.writeNoException();
return true;
}
case NOTIFY_ENTER_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyEnterAnimationComplete(token);
reply.writeNoException();
return true;
}
case BOOT_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
bootAnimationComplete();
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}","@Override public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      String callingPackage=data.readString();
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      int startFlags=data.readInt();
      ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
      Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
      int result=startActivity(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_ACTIVITY_AS_USER_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder b=data.readStrongBinder();
    IApplicationThread app=ApplicationThreadNative.asInterface(b);
    String callingPackage=data.readString();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    String resolvedType=data.readString();
    IBinder resultTo=data.readStrongBinder();
    String resultWho=data.readString();
    int requestCode=data.readInt();
    int startFlags=data.readInt();
    ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
    Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
    int userId=data.readInt();
    int result=startActivityAsUser(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
    reply.writeNoException();
    reply.writeInt(result);
    return true;
  }
case START_ACTIVITY_AS_CALLER_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder b=data.readStrongBinder();
  IApplicationThread app=ApplicationThreadNative.asInterface(b);
  String callingPackage=data.readString();
  Intent intent=Intent.CREATOR.createFromParcel(data);
  String resolvedType=data.readString();
  IBinder resultTo=data.readStrongBinder();
  String resultWho=data.readString();
  int requestCode=data.readInt();
  int startFlags=data.readInt();
  ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
  Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
  int userId=data.readInt();
  int result=startActivityAsCaller(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
  reply.writeNoException();
  reply.writeInt(result);
  return true;
}
case START_ACTIVITY_AND_WAIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
WaitResult result=startActivityAndWait(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
reply.writeNoException();
result.writeToParcel(reply,0);
return true;
}
case START_ACTIVITY_WITH_CONFIG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
Configuration config=Configuration.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivityWithConfig(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,config,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_ACTIVITY_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IntentSender intent=IntentSender.CREATOR.createFromParcel(data);
Intent fillInIntent=null;
if (data.readInt() != 0) {
fillInIntent=Intent.CREATOR.createFromParcel(data);
}
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int flagsMask=data.readInt();
int flagsValues=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int result=startActivityIntentSender(app,intent,fillInIntent,resolvedType,resultTo,resultWho,requestCode,flagsMask,flagsValues,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_VOICE_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
int callingPid=data.readInt();
int callingUid=data.readInt();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
IVoiceInteractor interactor=IVoiceInteractor.Stub.asInterface(data.readStrongBinder());
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startVoiceActivity(callingPackage,callingPid,callingUid,intent,resolvedType,session,interactor,startFlags,profilerInfo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder callingActivity=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
boolean result=startNextMatchingActivity(callingActivity,intent,options);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_ACTIVITY_FROM_RECENTS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
Bundle options=data.readInt() == 0 ? null : Bundle.CREATOR.createFromParcel(data);
int result=startActivityFromRecents(taskId,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent resultData=null;
int resultCode=data.readInt();
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean finishTask=(data.readInt() != 0);
boolean res=finishActivity(token,resultCode,resultData,finishTask);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case FINISH_ACTIVITY_AFFINITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=finishActivityAffinity(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_VOICE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
finishVoiceTask(session);
reply.writeNoException();
return true;
}
case RELEASE_ACTIVITY_INSTANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=releaseActivityInstance(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case RELEASE_SOME_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
releaseSomeActivities(app);
reply.writeNoException();
return true;
}
case WILL_ACTIVITY_BE_VISIBLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=willActivityBeVisible(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
String packageName=data.readString();
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
int userId=data.readInt();
Intent intent=registerReceiver(app,packageName,rec,filter,perm,userId);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
int appOp=data.readInt();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int userId=data.readInt();
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,appOp,serialized,sticky,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
int userId=data.readInt();
unbroadcastIntent(app,intent,userId);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Configuration config=null;
if (data.readInt() != 0) {
config=Configuration.CREATOR.createFromParcel(data);
}
boolean stopProfiling=data.readInt() != 0;
if (token != null) {
activityIdle(token,config,stopProfiling);
}
reply.writeNoException();
return true;
}
case ACTIVITY_RESUMED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityResumed(token);
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityPaused(token);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
PersistableBundle persistentState=data.readPersistableBundle();
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,map,persistentState,description);
reply.writeNoException();
return true;
}
case ACTIVITY_SLEPT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activitySlept(token);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_APP_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
List<IAppTask> list=getAppTasks(callingPackage);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
IAppTask task=list.get(i);
reply.writeStrongBinder(task.asBinder());
}
return true;
}
case ADD_APP_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
ActivityManager.TaskDescription descr=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
Bitmap thumbnail=Bitmap.CREATOR.createFromParcel(data);
int res=addAppTask(activityToken,intent,descr,thumbnail);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_APP_TASK_THUMBNAIL_SIZE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Point size=getAppTaskThumbnailSize();
reply.writeNoException();
size.writeToParcel(reply,0);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningTaskInfo> list=getTasks(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
int userId=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl,userId);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_TASK_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int id=data.readInt();
ActivityManager.TaskThumbnail taskThumbnail=getTaskThumbnail(id);
reply.writeNoException();
if (taskThumbnail != null) {
reply.writeInt(1);
taskThumbnail.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningServiceInfo> list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ApplicationInfo> list=getRunningExternalApplications();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
moveTaskToFront(task,fl,options);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
int stackId=data.readInt();
boolean toTop=data.readInt() != 0;
moveTaskToStack(taskId,stackId,toTop);
reply.writeNoException();
return true;
}
case RESIZE_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
float weight=data.readFloat();
Rect r=Rect.CREATOR.createFromParcel(data);
resizeStack(stackId,r);
reply.writeNoException();
return true;
}
case GET_ALL_STACK_INFOS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<StackInfo> list=getAllStackInfos();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_STACK_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
StackInfo info=getStackInfo(stackId);
reply.writeNoException();
if (info != null) {
reply.writeInt(1);
info.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case IS_IN_HOME_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean isInHomeStack=isInHomeStack(taskId);
reply.writeNoException();
reply.writeInt(isInHomeStack ? 1 : 0);
return true;
}
case SET_FOCUSED_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
setFocusedStack(stackId);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
int userId=data.readInt();
boolean stable=data.readInt() != 0;
ContentProviderHolder cph=getContentProvider(app,name,userId,stable);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
int userId=data.readInt();
IBinder token=data.readStrongBinder();
ContentProviderHolder cph=getContentProviderExternal(name,userId,token);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REF_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
int stable=data.readInt();
int unstable=data.readInt();
boolean res=refContentProvider(b,stable,unstable);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case UNSTABLE_PROVIDER_DIED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
unstableProviderDied(b);
reply.writeNoException();
return true;
}
case APP_NOT_RESPONDING_VIA_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
appNotRespondingViaProvider(b);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
boolean stable=data.readInt() != 0;
removeContentProvider(b,stable);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder token=data.readStrongBinder();
removeContentProviderExternal(name,token);
reply.writeNoException();
return true;
}
case GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName comp=ComponentName.CREATOR.createFromParcel(data);
PendingIntent pi=getRunningServiceControlPanel(comp);
reply.writeNoException();
PendingIntent.writePendingIntentOrNullToParcel(pi,reply);
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
ComponentName cn=startService(app,service,resolvedType,userId);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
int res=stopService(app,service,resolvedType,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int id=data.readInt();
Notification notification=null;
if (data.readInt() != 0) {
notification=Notification.CREATOR.createFromParcel(data);
}
boolean removeNotification=data.readInt() != 0;
setServiceForeground(className,token,id,notification,removeNotification);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
int userId=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int type=data.readInt();
int startId=data.readInt();
int res=data.readInt();
serviceDoneExecuting(token,type,startId,res);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
b=data.readStrongBinder();
IUiAutomationConnection c=IUiAutomationConnection.Stub.asInterface(b);
int userId=data.readInt();
String abiOverride=data.readString();
boolean res=startInstrumentation(className,profileFile,fl,arguments,w,c,userId,abiOverride);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent[] requestIntents;
String[] requestResolvedTypes;
if (data.readInt() != 0) {
requestIntents=data.createTypedArray(Intent.CREATOR);
requestResolvedTypes=data.createStringArray();
}
 else {
requestIntents=null;
requestResolvedTypes=null;
}
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntents,requestResolvedTypes,fl,options,userId);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_UID_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
int res=getUidForIntentSender(r);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case HANDLE_INCOMING_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingPid=data.readInt();
int callingUid=data.readInt();
int userId=data.readInt();
boolean allowAll=data.readInt() != 0;
boolean requireFull=data.readInt() != 0;
String name=data.readString();
String callerPackage=data.readString();
int res=handleIncomingUser(callingPid,callingUid,userId,allowAll,requireFull,name,callerPackage);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_PERMISSION_WITH_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
IBinder token=data.readStrongBinder();
int res=checkPermissionWithToken(perm,pid,uid,token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int userId=data.readInt();
IBinder callerToken=data.readStrongBinder();
int res=checkUriPermission(uri,pid,uid,mode,userId,callerToken);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
int userId=data.readInt();
boolean res=clearApplicationUserData(packageName,observer,userId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
grantUriPermission(app,targetPkg,uri,mode,userId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermission(app,uri,mode,userId);
reply.writeNoException();
return true;
}
case TAKE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
takePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case RELEASE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
releasePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case GET_PERSISTED_URI_PERMISSIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final String packageName=data.readString();
final boolean incoming=data.readInt() != 0;
final ParceledListSlice<UriPermission> perms=getPersistedUriPermissions(packageName,incoming);
reply.writeNoException();
perms.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case SET_LOCK_SCREEN_SHOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
setLockScreenShown(data.readInt() != 0);
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_CONTROLLER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityController watcher=IActivityController.Stub.asInterface(data.readStrongBinder());
setActivityController(watcher);
reply.writeNoException();
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
int sourceUid=data.readInt();
String sourcePkg=data.readString();
noteWakeupAlarm(is,sourceUid,sourcePkg);
reply.writeNoException();
return true;
}
case KILL_PIDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
String reason=data.readString();
boolean secure=data.readInt() != 0;
boolean res=killPids(pids,reason,secure);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_PROCESSES_BELOW_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
boolean res=killProcessesBelowForeground(reason);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_CRASH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
handleApplicationCrash(app,ci);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_WTF_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
String tag=data.readString();
boolean system=data.readInt() != 0;
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
boolean res=handleApplicationWtf(app,tag,system,ci);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int violationMask=data.readInt();
StrictMode.ViolationInfo info=new StrictMode.ViolationInfo(data);
handleApplicationStrictModeViolation(app,violationMask,info);
reply.writeNoException();
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case KILL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
killBackgroundProcesses(packageName,userId);
reply.writeNoException();
return true;
}
case KILL_ALL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
killAllBackgroundProcesses();
reply.writeNoException();
return true;
}
case FORCE_STOP_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
forceStopPackage(packageName,userId);
reply.writeNoException();
return true;
}
case GET_MY_MEMORY_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.RunningAppProcessInfo info=new ActivityManager.RunningAppProcessInfo();
getMyMemoryState(info);
reply.writeNoException();
info.writeToParcel(reply,0);
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean start=data.readInt() != 0;
int profileType=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
boolean res=profileControl(process,userId,start,profilerInfo,profileType);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
case ADD_PACKAGE_DEPENDENCY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
addPackageDependency(packageName);
reply.writeNoException();
return true;
}
case KILL_APPLICATION_WITH_APPID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int appid=data.readInt();
String reason=data.readString();
killApplicationWithAppId(pkg,appid,reason);
reply.writeNoException();
return true;
}
case CLOSE_SYSTEM_DIALOGS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
closeSystemDialogs(reason);
reply.writeNoException();
return true;
}
case GET_PROCESS_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
Debug.MemoryInfo[] res=getProcessMemoryInfo(pids);
reply.writeNoException();
reply.writeTypedArray(res,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case KILL_APPLICATION_PROCESS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String processName=data.readString();
int uid=data.readInt();
killApplicationProcess(processName,uid);
reply.writeNoException();
return true;
}
case OVERRIDE_PENDING_TRANSITION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String packageName=data.readString();
int enterAnim=data.readInt();
int exitAnim=data.readInt();
overridePendingTransition(token,packageName,enterAnim,exitAnim);
reply.writeNoException();
return true;
}
case IS_USER_A_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean areThey=isUserAMonkey();
reply.writeNoException();
reply.writeInt(areThey ? 1 : 0);
return true;
}
case SET_USER_IS_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean monkey=(data.readInt() == 1);
setUserIsMonkey(monkey);
reply.writeNoException();
return true;
}
case FINISH_HEAVY_WEIGHT_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
finishHeavyWeightApp();
reply.writeNoException();
return true;
}
case IS_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isit=isImmersive(token);
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case IS_TOP_OF_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean isTopOfTask=isTopOfTask(token);
reply.writeNoException();
reply.writeInt(isTopOfTask ? 1 : 0);
return true;
}
case CONVERT_FROM_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean converted=convertFromTranslucent(token);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case CONVERT_TO_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
boolean converted=convertToTranslucent(token,options);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case GET_ACTIVITY_OPTIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final ActivityOptions options=getActivityOptions(token);
reply.writeNoException();
reply.writeBundle(options == null ? null : options.toBundle());
return true;
}
case SET_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean imm=data.readInt() == 1;
setImmersive(token,imm);
reply.writeNoException();
return true;
}
case IS_TOP_ACTIVITY_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean isit=isTopActivityImmersive();
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case CRASH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
int initialPid=data.readInt();
String packageName=data.readString();
String message=data.readString();
crashApplication(uid,initialPid,packageName,message);
reply.writeNoException();
return true;
}
case GET_PROVIDER_MIME_TYPE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int userId=data.readInt();
String type=getProviderMimeType(uri,userId);
reply.writeNoException();
reply.writeString(type);
return true;
}
case NEW_URI_PERMISSION_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder perm=newUriPermissionOwner(name);
reply.writeNoException();
reply.writeStrongBinder(perm);
return true;
}
case GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
int fromUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int sourceUserId=data.readInt();
int targetUserId=data.readInt();
grantUriPermissionFromOwner(owner,fromUid,targetPkg,uri,mode,sourceUserId,targetUserId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
Uri uri=null;
if (data.readInt() != 0) {
uri=Uri.CREATOR.createFromParcel(data);
}
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermissionFromOwner(owner,uri,mode,userId);
reply.writeNoException();
return true;
}
case CHECK_GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int modeFlags=data.readInt();
int userId=data.readInt();
int res=checkGrantUriPermission(callingUid,targetPkg,uri,modeFlags,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case DUMP_HEAP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean managed=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? ParcelFileDescriptor.CREATOR.createFromParcel(data) : null;
boolean res=dumpHeap(process,userId,managed,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case START_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent[] intents=data.createTypedArray(Intent.CREATOR);
String[] resolvedTypes=data.createStringArray();
IBinder resultTo=data.readStrongBinder();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivities(app,callingPackage,intents,resolvedTypes,resultTo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=getFrontActivityScreenCompatMode();
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=data.readInt();
setFrontActivityScreenCompatMode(mode);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case GET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=getPackageScreenCompatMode(pkg);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=data.readInt();
setPackageScreenCompatMode(pkg,mode);
reply.writeNoException();
return true;
}
case SWITCH_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=switchUser(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_USER_IN_BACKGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=startUserInBackground(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case STOP_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
IStopUserCallback callback=IStopUserCallback.Stub.asInterface(data.readStrongBinder());
int result=stopUser(userid,callback);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_CURRENT_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
UserInfo userInfo=getCurrentUser();
reply.writeNoException();
userInfo.writeToParcel(reply,0);
return true;
}
case IS_USER_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean orStopping=data.readInt() != 0;
boolean result=isUserRunning(userid,orStopping);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case GET_RUNNING_USER_IDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] result=getRunningUserIds();
reply.writeNoException();
reply.writeIntArray(result);
return true;
}
case REMOVE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean result=removeTask(taskId);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case REGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
registerProcessObserver(observer);
return true;
}
case UNREGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
unregisterProcessObserver(observer);
return true;
}
case GET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=getPackageAskScreenCompat(pkg);
reply.writeNoException();
reply.writeInt(ask ? 1 : 0);
return true;
}
case SET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=data.readInt() != 0;
setPackageAskScreenCompat(pkg,ask);
reply.writeNoException();
return true;
}
case IS_INTENT_SENDER_TARGETED_TO_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderTargetedToPackage(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case IS_INTENT_SENDER_AN_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderAnActivity(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_INTENT_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
Intent intent=getIntentForIntentSender(r);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_TAG_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String prefix=data.readString();
String tag=getTagForIntentSender(r,prefix);
reply.writeNoException();
reply.writeString(tag);
return true;
}
case UPDATE_PERSISTENT_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updatePersistentConfiguration(config);
reply.writeNoException();
return true;
}
case GET_PROCESS_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
long[] pss=getProcessPss(pids);
reply.writeNoException();
reply.writeLongArray(pss);
return true;
}
case SHOW_BOOT_MESSAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
CharSequence msg=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
boolean always=data.readInt() != 0;
showBootMessage(msg,always);
reply.writeNoException();
return true;
}
case KEYGUARD_WAITING_FOR_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
keyguardWaitingForActivityDrawn();
reply.writeNoException();
return true;
}
case SHOULD_UP_RECREATE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String destAffinity=data.readString();
boolean res=shouldUpRecreateTask(token,destAffinity);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case NAVIGATE_UP_TO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent target=Intent.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
Intent resultData=null;
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean res=navigateUpTo(token,target,resultCode,resultData);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_LAUNCHED_FROM_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int res=getLaunchedFromUid(token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_LAUNCHED_FROM_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=getLaunchedFromPackage(token);
reply.writeNoException();
reply.writeString(res);
return true;
}
case REGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
registerUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case UNREGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
unregisterUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case REQUEST_BUG_REPORT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
requestBugReport();
reply.writeNoException();
return true;
}
case INPUT_DISPATCHING_TIMED_OUT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int pid=data.readInt();
boolean aboveSystem=data.readInt() != 0;
String reason=data.readString();
long res=inputDispatchingTimedOut(pid,aboveSystem,reason);
reply.writeNoException();
reply.writeLong(res);
return true;
}
case GET_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int requestType=data.readInt();
Bundle res=getAssistContextExtras(requestType);
reply.writeNoException();
reply.writeBundle(res);
return true;
}
case REPORT_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle extras=data.readBundle();
reportAssistContextExtras(token,extras);
reply.writeNoException();
return true;
}
case LAUNCH_ASSIST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
int requestType=data.readInt();
String hint=data.readString();
int userHandle=data.readInt();
boolean res=launchAssistIntent(intent,requestType,hint,userHandle);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
String reason=data.readString();
killUid(uid,reason);
reply.writeNoException();
return true;
}
case HANG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
boolean allowRestart=data.readInt() != 0;
hang(who,allowRestart);
reply.writeNoException();
return true;
}
case REPORT_ACTIVITY_FULLY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reportActivityFullyDrawn(token);
reply.writeNoException();
return true;
}
case NOTIFY_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyActivityDrawn(token);
reply.writeNoException();
return true;
}
case RESTART_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
restart();
reply.writeNoException();
return true;
}
case PERFORM_IDLE_MAINTENANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
performIdleMaintenance();
reply.writeNoException();
return true;
}
case CREATE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder parentActivityToken=data.readStrongBinder();
IActivityContainerCallback callback=IActivityContainerCallback.Stub.asInterface(data.readStrongBinder());
IActivityContainer activityContainer=createActivityContainer(parentActivityToken,callback);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case DELETE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityContainer activityContainer=IActivityContainer.Stub.asInterface(data.readStrongBinder());
deleteActivityContainer(activityContainer);
reply.writeNoException();
return true;
}
case GET_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
IActivityContainer activityContainer=getEnclosingActivityContainer(activityToken);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_HOME_ACTIVITY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder homeActivityToken=getHomeActivityToken();
reply.writeNoException();
reply.writeStrongBinder(homeActivityToken);
return true;
}
case START_LOCK_TASK_BY_TASK_ID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final int taskId=data.readInt();
startLockTaskMode(taskId);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
startLockTaskMode(token);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
startLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskMode();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case IS_IN_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean isInLockTaskMode=isInLockTaskMode();
reply.writeNoException();
reply.writeInt(isInLockTaskMode ? 1 : 0);
return true;
}
case SET_TASK_DESCRIPTION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ActivityManager.TaskDescription values=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
setTaskDescription(token,values);
reply.writeNoException();
return true;
}
case GET_TASK_DESCRIPTION_ICON_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String filename=data.readString();
Bitmap icon=getTaskDescriptionIcon(filename);
reply.writeNoException();
if (icon == null) {
reply.writeInt(0);
}
 else {
reply.writeInt(1);
icon.writeToParcel(reply,0);
}
return true;
}
case START_IN_PLACE_ANIMATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
startInPlaceAnimationOnFrontMostApplication(options);
reply.writeNoException();
return true;
}
case REQUEST_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean enable=data.readInt() > 0;
boolean success=requestVisibleBehind(token,enable);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case IS_BACKGROUND_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean enabled=isBackgroundVisibleBehind(token);
reply.writeNoException();
reply.writeInt(enabled ? 1 : 0);
return true;
}
case BACKGROUND_RESOURCES_RELEASED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
backgroundResourcesReleased(token);
reply.writeNoException();
return true;
}
case NOTIFY_LAUNCH_TASK_BEHIND_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyLaunchTaskBehindComplete(token);
reply.writeNoException();
return true;
}
case NOTIFY_ENTER_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyEnterAnimationComplete(token);
reply.writeNoException();
return true;
}
case BOOT_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
bootAnimationComplete();
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}",0.9969574588945692
195922,"public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId) throws RemoteException {
  Parcel data=Parcel.obtain();
  Parcel reply=Parcel.obtain();
  data.writeInterfaceToken(IActivityManager.descriptor);
  uri.writeToParcel(data,0);
  data.writeInt(pid);
  data.writeInt(uid);
  data.writeInt(mode);
  data.writeInt(userId);
  mRemote.transact(CHECK_URI_PERMISSION_TRANSACTION,data,reply,0);
  reply.readException();
  int res=reply.readInt();
  data.recycle();
  reply.recycle();
  return res;
}","public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId,IBinder callerToken) throws RemoteException {
  Parcel data=Parcel.obtain();
  Parcel reply=Parcel.obtain();
  data.writeInterfaceToken(IActivityManager.descriptor);
  uri.writeToParcel(data,0);
  data.writeInt(pid);
  data.writeInt(uid);
  data.writeInt(mode);
  data.writeInt(userId);
  data.writeStrongBinder(callerToken);
  mRemote.transact(CHECK_URI_PERMISSION_TRANSACTION,data,reply,0);
  reply.readException();
  int res=reply.readInt();
  data.recycle();
  reply.recycle();
  return res;
}",0.9455216989843028
195923,"@Override public int checkPermission(String permission,int pid,int uid){
  if (permission == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return ActivityManagerNative.getDefault().checkPermission(permission,pid,uid);
  }
 catch (  RemoteException e) {
    return PackageManager.PERMISSION_DENIED;
  }
}","/** 
 * @hide 
 */
@Override public int checkPermission(String permission,int pid,int uid,IBinder callerToken){
  if (permission == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return ActivityManagerNative.getDefault().checkPermissionWithToken(permission,pid,uid,callerToken);
  }
 catch (  RemoteException e) {
    return PackageManager.PERMISSION_DENIED;
  }
}",0.8675675675675676
195924,"public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId) throws RemoteException ;","public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId,IBinder callerToken) throws RemoteException ;",0.908256880733945
195925,"@Override public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      String callingPackage=data.readString();
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      int startFlags=data.readInt();
      ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
      Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
      int result=startActivity(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_ACTIVITY_AS_USER_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder b=data.readStrongBinder();
    IApplicationThread app=ApplicationThreadNative.asInterface(b);
    String callingPackage=data.readString();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    String resolvedType=data.readString();
    IBinder resultTo=data.readStrongBinder();
    String resultWho=data.readString();
    int requestCode=data.readInt();
    int startFlags=data.readInt();
    ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
    Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
    int userId=data.readInt();
    int result=startActivityAsUser(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
    reply.writeNoException();
    reply.writeInt(result);
    return true;
  }
case START_ACTIVITY_AS_CALLER_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder b=data.readStrongBinder();
  IApplicationThread app=ApplicationThreadNative.asInterface(b);
  String callingPackage=data.readString();
  Intent intent=Intent.CREATOR.createFromParcel(data);
  String resolvedType=data.readString();
  IBinder resultTo=data.readStrongBinder();
  String resultWho=data.readString();
  int requestCode=data.readInt();
  int startFlags=data.readInt();
  ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
  Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
  int userId=data.readInt();
  int result=startActivityAsCaller(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
  reply.writeNoException();
  reply.writeInt(result);
  return true;
}
case START_ACTIVITY_AND_WAIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
WaitResult result=startActivityAndWait(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
reply.writeNoException();
result.writeToParcel(reply,0);
return true;
}
case START_ACTIVITY_WITH_CONFIG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
Configuration config=Configuration.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivityWithConfig(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,config,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_ACTIVITY_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IntentSender intent=IntentSender.CREATOR.createFromParcel(data);
Intent fillInIntent=null;
if (data.readInt() != 0) {
fillInIntent=Intent.CREATOR.createFromParcel(data);
}
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int flagsMask=data.readInt();
int flagsValues=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int result=startActivityIntentSender(app,intent,fillInIntent,resolvedType,resultTo,resultWho,requestCode,flagsMask,flagsValues,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_VOICE_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
int callingPid=data.readInt();
int callingUid=data.readInt();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
IVoiceInteractor interactor=IVoiceInteractor.Stub.asInterface(data.readStrongBinder());
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startVoiceActivity(callingPackage,callingPid,callingUid,intent,resolvedType,session,interactor,startFlags,profilerInfo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder callingActivity=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
boolean result=startNextMatchingActivity(callingActivity,intent,options);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_ACTIVITY_FROM_RECENTS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
Bundle options=data.readInt() == 0 ? null : Bundle.CREATOR.createFromParcel(data);
int result=startActivityFromRecents(taskId,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent resultData=null;
int resultCode=data.readInt();
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean finishTask=(data.readInt() != 0);
boolean res=finishActivity(token,resultCode,resultData,finishTask);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case FINISH_ACTIVITY_AFFINITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=finishActivityAffinity(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_VOICE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
finishVoiceTask(session);
reply.writeNoException();
return true;
}
case RELEASE_ACTIVITY_INSTANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=releaseActivityInstance(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case RELEASE_SOME_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
releaseSomeActivities(app);
reply.writeNoException();
return true;
}
case WILL_ACTIVITY_BE_VISIBLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=willActivityBeVisible(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
String packageName=data.readString();
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
int userId=data.readInt();
Intent intent=registerReceiver(app,packageName,rec,filter,perm,userId);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
int appOp=data.readInt();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int userId=data.readInt();
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,appOp,serialized,sticky,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
int userId=data.readInt();
unbroadcastIntent(app,intent,userId);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Configuration config=null;
if (data.readInt() != 0) {
config=Configuration.CREATOR.createFromParcel(data);
}
boolean stopProfiling=data.readInt() != 0;
if (token != null) {
activityIdle(token,config,stopProfiling);
}
reply.writeNoException();
return true;
}
case ACTIVITY_RESUMED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityResumed(token);
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityPaused(token);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
PersistableBundle persistentState=data.readPersistableBundle();
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,map,persistentState,description);
reply.writeNoException();
return true;
}
case ACTIVITY_SLEPT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activitySlept(token);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_APP_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
List<IAppTask> list=getAppTasks(callingPackage);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
IAppTask task=list.get(i);
reply.writeStrongBinder(task.asBinder());
}
return true;
}
case ADD_APP_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
ActivityManager.TaskDescription descr=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
Bitmap thumbnail=Bitmap.CREATOR.createFromParcel(data);
int res=addAppTask(activityToken,intent,descr,thumbnail);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_APP_TASK_THUMBNAIL_SIZE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Point size=getAppTaskThumbnailSize();
reply.writeNoException();
size.writeToParcel(reply,0);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningTaskInfo> list=getTasks(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
int userId=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl,userId);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_TASK_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int id=data.readInt();
ActivityManager.TaskThumbnail taskThumbnail=getTaskThumbnail(id);
reply.writeNoException();
if (taskThumbnail != null) {
reply.writeInt(1);
taskThumbnail.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningServiceInfo> list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ApplicationInfo> list=getRunningExternalApplications();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
moveTaskToFront(task,fl,options);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
int stackId=data.readInt();
boolean toTop=data.readInt() != 0;
moveTaskToStack(taskId,stackId,toTop);
reply.writeNoException();
return true;
}
case RESIZE_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
float weight=data.readFloat();
Rect r=Rect.CREATOR.createFromParcel(data);
resizeStack(stackId,r);
reply.writeNoException();
return true;
}
case GET_ALL_STACK_INFOS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<StackInfo> list=getAllStackInfos();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_STACK_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
StackInfo info=getStackInfo(stackId);
reply.writeNoException();
if (info != null) {
reply.writeInt(1);
info.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case IS_IN_HOME_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean isInHomeStack=isInHomeStack(taskId);
reply.writeNoException();
reply.writeInt(isInHomeStack ? 1 : 0);
return true;
}
case SET_FOCUSED_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
setFocusedStack(stackId);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
int userId=data.readInt();
boolean stable=data.readInt() != 0;
ContentProviderHolder cph=getContentProvider(app,name,userId,stable);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
int userId=data.readInt();
IBinder token=data.readStrongBinder();
ContentProviderHolder cph=getContentProviderExternal(name,userId,token);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REF_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
int stable=data.readInt();
int unstable=data.readInt();
boolean res=refContentProvider(b,stable,unstable);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case UNSTABLE_PROVIDER_DIED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
unstableProviderDied(b);
reply.writeNoException();
return true;
}
case APP_NOT_RESPONDING_VIA_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
appNotRespondingViaProvider(b);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
boolean stable=data.readInt() != 0;
removeContentProvider(b,stable);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder token=data.readStrongBinder();
removeContentProviderExternal(name,token);
reply.writeNoException();
return true;
}
case GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName comp=ComponentName.CREATOR.createFromParcel(data);
PendingIntent pi=getRunningServiceControlPanel(comp);
reply.writeNoException();
PendingIntent.writePendingIntentOrNullToParcel(pi,reply);
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
ComponentName cn=startService(app,service,resolvedType,userId);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
int res=stopService(app,service,resolvedType,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int id=data.readInt();
Notification notification=null;
if (data.readInt() != 0) {
notification=Notification.CREATOR.createFromParcel(data);
}
boolean removeNotification=data.readInt() != 0;
setServiceForeground(className,token,id,notification,removeNotification);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
int userId=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int type=data.readInt();
int startId=data.readInt();
int res=data.readInt();
serviceDoneExecuting(token,type,startId,res);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
b=data.readStrongBinder();
IUiAutomationConnection c=IUiAutomationConnection.Stub.asInterface(b);
int userId=data.readInt();
String abiOverride=data.readString();
boolean res=startInstrumentation(className,profileFile,fl,arguments,w,c,userId,abiOverride);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent[] requestIntents;
String[] requestResolvedTypes;
if (data.readInt() != 0) {
requestIntents=data.createTypedArray(Intent.CREATOR);
requestResolvedTypes=data.createStringArray();
}
 else {
requestIntents=null;
requestResolvedTypes=null;
}
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntents,requestResolvedTypes,fl,options,userId);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_UID_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
int res=getUidForIntentSender(r);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case HANDLE_INCOMING_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingPid=data.readInt();
int callingUid=data.readInt();
int userId=data.readInt();
boolean allowAll=data.readInt() != 0;
boolean requireFull=data.readInt() != 0;
String name=data.readString();
String callerPackage=data.readString();
int res=handleIncomingUser(callingPid,callingUid,userId,allowAll,requireFull,name,callerPackage);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int userId=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
int userId=data.readInt();
boolean res=clearApplicationUserData(packageName,observer,userId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
grantUriPermission(app,targetPkg,uri,mode,userId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermission(app,uri,mode,userId);
reply.writeNoException();
return true;
}
case TAKE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
takePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case RELEASE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
releasePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case GET_PERSISTED_URI_PERMISSIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final String packageName=data.readString();
final boolean incoming=data.readInt() != 0;
final ParceledListSlice<UriPermission> perms=getPersistedUriPermissions(packageName,incoming);
reply.writeNoException();
perms.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case SET_LOCK_SCREEN_SHOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
setLockScreenShown(data.readInt() != 0);
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_CONTROLLER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityController watcher=IActivityController.Stub.asInterface(data.readStrongBinder());
setActivityController(watcher);
reply.writeNoException();
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
int sourceUid=data.readInt();
String sourcePkg=data.readString();
noteWakeupAlarm(is,sourceUid,sourcePkg);
reply.writeNoException();
return true;
}
case KILL_PIDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
String reason=data.readString();
boolean secure=data.readInt() != 0;
boolean res=killPids(pids,reason,secure);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_PROCESSES_BELOW_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
boolean res=killProcessesBelowForeground(reason);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_CRASH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
handleApplicationCrash(app,ci);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_WTF_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
String tag=data.readString();
boolean system=data.readInt() != 0;
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
boolean res=handleApplicationWtf(app,tag,system,ci);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int violationMask=data.readInt();
StrictMode.ViolationInfo info=new StrictMode.ViolationInfo(data);
handleApplicationStrictModeViolation(app,violationMask,info);
reply.writeNoException();
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case KILL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
killBackgroundProcesses(packageName,userId);
reply.writeNoException();
return true;
}
case KILL_ALL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
killAllBackgroundProcesses();
reply.writeNoException();
return true;
}
case FORCE_STOP_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
forceStopPackage(packageName,userId);
reply.writeNoException();
return true;
}
case GET_MY_MEMORY_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.RunningAppProcessInfo info=new ActivityManager.RunningAppProcessInfo();
getMyMemoryState(info);
reply.writeNoException();
info.writeToParcel(reply,0);
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean start=data.readInt() != 0;
int profileType=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
boolean res=profileControl(process,userId,start,profilerInfo,profileType);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
case ADD_PACKAGE_DEPENDENCY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
addPackageDependency(packageName);
reply.writeNoException();
return true;
}
case KILL_APPLICATION_WITH_APPID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int appid=data.readInt();
String reason=data.readString();
killApplicationWithAppId(pkg,appid,reason);
reply.writeNoException();
return true;
}
case CLOSE_SYSTEM_DIALOGS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
closeSystemDialogs(reason);
reply.writeNoException();
return true;
}
case GET_PROCESS_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
Debug.MemoryInfo[] res=getProcessMemoryInfo(pids);
reply.writeNoException();
reply.writeTypedArray(res,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case KILL_APPLICATION_PROCESS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String processName=data.readString();
int uid=data.readInt();
killApplicationProcess(processName,uid);
reply.writeNoException();
return true;
}
case OVERRIDE_PENDING_TRANSITION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String packageName=data.readString();
int enterAnim=data.readInt();
int exitAnim=data.readInt();
overridePendingTransition(token,packageName,enterAnim,exitAnim);
reply.writeNoException();
return true;
}
case IS_USER_A_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean areThey=isUserAMonkey();
reply.writeNoException();
reply.writeInt(areThey ? 1 : 0);
return true;
}
case SET_USER_IS_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean monkey=(data.readInt() == 1);
setUserIsMonkey(monkey);
reply.writeNoException();
return true;
}
case FINISH_HEAVY_WEIGHT_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
finishHeavyWeightApp();
reply.writeNoException();
return true;
}
case IS_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isit=isImmersive(token);
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case IS_TOP_OF_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean isTopOfTask=isTopOfTask(token);
reply.writeNoException();
reply.writeInt(isTopOfTask ? 1 : 0);
return true;
}
case CONVERT_FROM_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean converted=convertFromTranslucent(token);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case CONVERT_TO_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
boolean converted=convertToTranslucent(token,options);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case GET_ACTIVITY_OPTIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final ActivityOptions options=getActivityOptions(token);
reply.writeNoException();
reply.writeBundle(options == null ? null : options.toBundle());
return true;
}
case SET_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean imm=data.readInt() == 1;
setImmersive(token,imm);
reply.writeNoException();
return true;
}
case IS_TOP_ACTIVITY_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean isit=isTopActivityImmersive();
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case CRASH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
int initialPid=data.readInt();
String packageName=data.readString();
String message=data.readString();
crashApplication(uid,initialPid,packageName,message);
reply.writeNoException();
return true;
}
case GET_PROVIDER_MIME_TYPE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int userId=data.readInt();
String type=getProviderMimeType(uri,userId);
reply.writeNoException();
reply.writeString(type);
return true;
}
case NEW_URI_PERMISSION_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder perm=newUriPermissionOwner(name);
reply.writeNoException();
reply.writeStrongBinder(perm);
return true;
}
case GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
int fromUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int sourceUserId=data.readInt();
int targetUserId=data.readInt();
grantUriPermissionFromOwner(owner,fromUid,targetPkg,uri,mode,sourceUserId,targetUserId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
Uri uri=null;
if (data.readInt() != 0) {
uri=Uri.CREATOR.createFromParcel(data);
}
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermissionFromOwner(owner,uri,mode,userId);
reply.writeNoException();
return true;
}
case CHECK_GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int modeFlags=data.readInt();
int userId=data.readInt();
int res=checkGrantUriPermission(callingUid,targetPkg,uri,modeFlags,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case DUMP_HEAP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean managed=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? ParcelFileDescriptor.CREATOR.createFromParcel(data) : null;
boolean res=dumpHeap(process,userId,managed,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case START_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent[] intents=data.createTypedArray(Intent.CREATOR);
String[] resolvedTypes=data.createStringArray();
IBinder resultTo=data.readStrongBinder();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivities(app,callingPackage,intents,resolvedTypes,resultTo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=getFrontActivityScreenCompatMode();
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=data.readInt();
setFrontActivityScreenCompatMode(mode);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case GET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=getPackageScreenCompatMode(pkg);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=data.readInt();
setPackageScreenCompatMode(pkg,mode);
reply.writeNoException();
return true;
}
case SWITCH_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=switchUser(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_USER_IN_BACKGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=startUserInBackground(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case STOP_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
IStopUserCallback callback=IStopUserCallback.Stub.asInterface(data.readStrongBinder());
int result=stopUser(userid,callback);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_CURRENT_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
UserInfo userInfo=getCurrentUser();
reply.writeNoException();
userInfo.writeToParcel(reply,0);
return true;
}
case IS_USER_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean orStopping=data.readInt() != 0;
boolean result=isUserRunning(userid,orStopping);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case GET_RUNNING_USER_IDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] result=getRunningUserIds();
reply.writeNoException();
reply.writeIntArray(result);
return true;
}
case REMOVE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean result=removeTask(taskId);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case REGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
registerProcessObserver(observer);
return true;
}
case UNREGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
unregisterProcessObserver(observer);
return true;
}
case GET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=getPackageAskScreenCompat(pkg);
reply.writeNoException();
reply.writeInt(ask ? 1 : 0);
return true;
}
case SET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=data.readInt() != 0;
setPackageAskScreenCompat(pkg,ask);
reply.writeNoException();
return true;
}
case IS_INTENT_SENDER_TARGETED_TO_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderTargetedToPackage(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case IS_INTENT_SENDER_AN_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderAnActivity(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_INTENT_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
Intent intent=getIntentForIntentSender(r);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_TAG_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String prefix=data.readString();
String tag=getTagForIntentSender(r,prefix);
reply.writeNoException();
reply.writeString(tag);
return true;
}
case UPDATE_PERSISTENT_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updatePersistentConfiguration(config);
reply.writeNoException();
return true;
}
case GET_PROCESS_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
long[] pss=getProcessPss(pids);
reply.writeNoException();
reply.writeLongArray(pss);
return true;
}
case SHOW_BOOT_MESSAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
CharSequence msg=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
boolean always=data.readInt() != 0;
showBootMessage(msg,always);
reply.writeNoException();
return true;
}
case KEYGUARD_WAITING_FOR_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
keyguardWaitingForActivityDrawn();
reply.writeNoException();
return true;
}
case SHOULD_UP_RECREATE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String destAffinity=data.readString();
boolean res=shouldUpRecreateTask(token,destAffinity);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case NAVIGATE_UP_TO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent target=Intent.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
Intent resultData=null;
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean res=navigateUpTo(token,target,resultCode,resultData);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_LAUNCHED_FROM_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int res=getLaunchedFromUid(token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_LAUNCHED_FROM_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=getLaunchedFromPackage(token);
reply.writeNoException();
reply.writeString(res);
return true;
}
case REGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
registerUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case UNREGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
unregisterUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case REQUEST_BUG_REPORT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
requestBugReport();
reply.writeNoException();
return true;
}
case INPUT_DISPATCHING_TIMED_OUT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int pid=data.readInt();
boolean aboveSystem=data.readInt() != 0;
String reason=data.readString();
long res=inputDispatchingTimedOut(pid,aboveSystem,reason);
reply.writeNoException();
reply.writeLong(res);
return true;
}
case GET_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int requestType=data.readInt();
Bundle res=getAssistContextExtras(requestType);
reply.writeNoException();
reply.writeBundle(res);
return true;
}
case REPORT_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle extras=data.readBundle();
reportAssistContextExtras(token,extras);
reply.writeNoException();
return true;
}
case LAUNCH_ASSIST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
int requestType=data.readInt();
String hint=data.readString();
int userHandle=data.readInt();
boolean res=launchAssistIntent(intent,requestType,hint,userHandle);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
String reason=data.readString();
killUid(uid,reason);
reply.writeNoException();
return true;
}
case HANG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
boolean allowRestart=data.readInt() != 0;
hang(who,allowRestart);
reply.writeNoException();
return true;
}
case REPORT_ACTIVITY_FULLY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reportActivityFullyDrawn(token);
reply.writeNoException();
return true;
}
case NOTIFY_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyActivityDrawn(token);
reply.writeNoException();
return true;
}
case RESTART_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
restart();
reply.writeNoException();
return true;
}
case PERFORM_IDLE_MAINTENANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
performIdleMaintenance();
reply.writeNoException();
return true;
}
case CREATE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder parentActivityToken=data.readStrongBinder();
IActivityContainerCallback callback=IActivityContainerCallback.Stub.asInterface(data.readStrongBinder());
IActivityContainer activityContainer=createActivityContainer(parentActivityToken,callback);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case DELETE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityContainer activityContainer=IActivityContainer.Stub.asInterface(data.readStrongBinder());
deleteActivityContainer(activityContainer);
reply.writeNoException();
return true;
}
case GET_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
IActivityContainer activityContainer=getEnclosingActivityContainer(activityToken);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_HOME_ACTIVITY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder homeActivityToken=getHomeActivityToken();
reply.writeNoException();
reply.writeStrongBinder(homeActivityToken);
return true;
}
case START_LOCK_TASK_BY_TASK_ID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final int taskId=data.readInt();
startLockTaskMode(taskId);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
startLockTaskMode(token);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
startLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskMode();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case IS_IN_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean isInLockTaskMode=isInLockTaskMode();
reply.writeNoException();
reply.writeInt(isInLockTaskMode ? 1 : 0);
return true;
}
case SET_TASK_DESCRIPTION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ActivityManager.TaskDescription values=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
setTaskDescription(token,values);
reply.writeNoException();
return true;
}
case GET_TASK_DESCRIPTION_ICON_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String filename=data.readString();
Bitmap icon=getTaskDescriptionIcon(filename);
reply.writeNoException();
if (icon == null) {
reply.writeInt(0);
}
 else {
reply.writeInt(1);
icon.writeToParcel(reply,0);
}
return true;
}
case START_IN_PLACE_ANIMATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
startInPlaceAnimationOnFrontMostApplication(options);
reply.writeNoException();
return true;
}
case REQUEST_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean enable=data.readInt() > 0;
boolean success=requestVisibleBehind(token,enable);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case IS_BACKGROUND_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean enabled=isBackgroundVisibleBehind(token);
reply.writeNoException();
reply.writeInt(enabled ? 1 : 0);
return true;
}
case BACKGROUND_RESOURCES_RELEASED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
backgroundResourcesReleased(token);
reply.writeNoException();
return true;
}
case NOTIFY_LAUNCH_TASK_BEHIND_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyLaunchTaskBehindComplete(token);
reply.writeNoException();
return true;
}
case NOTIFY_ENTER_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyEnterAnimationComplete(token);
reply.writeNoException();
return true;
}
case BOOT_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
bootAnimationComplete();
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}","@Override public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      String callingPackage=data.readString();
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      int startFlags=data.readInt();
      ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
      Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
      int result=startActivity(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_ACTIVITY_AS_USER_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder b=data.readStrongBinder();
    IApplicationThread app=ApplicationThreadNative.asInterface(b);
    String callingPackage=data.readString();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    String resolvedType=data.readString();
    IBinder resultTo=data.readStrongBinder();
    String resultWho=data.readString();
    int requestCode=data.readInt();
    int startFlags=data.readInt();
    ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
    Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
    int userId=data.readInt();
    int result=startActivityAsUser(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
    reply.writeNoException();
    reply.writeInt(result);
    return true;
  }
case START_ACTIVITY_AS_CALLER_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder b=data.readStrongBinder();
  IApplicationThread app=ApplicationThreadNative.asInterface(b);
  String callingPackage=data.readString();
  Intent intent=Intent.CREATOR.createFromParcel(data);
  String resolvedType=data.readString();
  IBinder resultTo=data.readStrongBinder();
  String resultWho=data.readString();
  int requestCode=data.readInt();
  int startFlags=data.readInt();
  ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
  Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
  int userId=data.readInt();
  int result=startActivityAsCaller(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
  reply.writeNoException();
  reply.writeInt(result);
  return true;
}
case START_ACTIVITY_AND_WAIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
WaitResult result=startActivityAndWait(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
reply.writeNoException();
result.writeToParcel(reply,0);
return true;
}
case START_ACTIVITY_WITH_CONFIG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
Configuration config=Configuration.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivityWithConfig(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,config,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_ACTIVITY_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IntentSender intent=IntentSender.CREATOR.createFromParcel(data);
Intent fillInIntent=null;
if (data.readInt() != 0) {
fillInIntent=Intent.CREATOR.createFromParcel(data);
}
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int flagsMask=data.readInt();
int flagsValues=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int result=startActivityIntentSender(app,intent,fillInIntent,resolvedType,resultTo,resultWho,requestCode,flagsMask,flagsValues,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_VOICE_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
int callingPid=data.readInt();
int callingUid=data.readInt();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
IVoiceInteractor interactor=IVoiceInteractor.Stub.asInterface(data.readStrongBinder());
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startVoiceActivity(callingPackage,callingPid,callingUid,intent,resolvedType,session,interactor,startFlags,profilerInfo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder callingActivity=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
boolean result=startNextMatchingActivity(callingActivity,intent,options);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_ACTIVITY_FROM_RECENTS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
Bundle options=data.readInt() == 0 ? null : Bundle.CREATOR.createFromParcel(data);
int result=startActivityFromRecents(taskId,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent resultData=null;
int resultCode=data.readInt();
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean finishTask=(data.readInt() != 0);
boolean res=finishActivity(token,resultCode,resultData,finishTask);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case FINISH_ACTIVITY_AFFINITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=finishActivityAffinity(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_VOICE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
finishVoiceTask(session);
reply.writeNoException();
return true;
}
case RELEASE_ACTIVITY_INSTANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=releaseActivityInstance(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case RELEASE_SOME_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
releaseSomeActivities(app);
reply.writeNoException();
return true;
}
case WILL_ACTIVITY_BE_VISIBLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=willActivityBeVisible(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
String packageName=data.readString();
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
int userId=data.readInt();
Intent intent=registerReceiver(app,packageName,rec,filter,perm,userId);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
int appOp=data.readInt();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int userId=data.readInt();
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,appOp,serialized,sticky,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
int userId=data.readInt();
unbroadcastIntent(app,intent,userId);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Configuration config=null;
if (data.readInt() != 0) {
config=Configuration.CREATOR.createFromParcel(data);
}
boolean stopProfiling=data.readInt() != 0;
if (token != null) {
activityIdle(token,config,stopProfiling);
}
reply.writeNoException();
return true;
}
case ACTIVITY_RESUMED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityResumed(token);
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityPaused(token);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
PersistableBundle persistentState=data.readPersistableBundle();
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,map,persistentState,description);
reply.writeNoException();
return true;
}
case ACTIVITY_SLEPT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activitySlept(token);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_APP_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
List<IAppTask> list=getAppTasks(callingPackage);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
IAppTask task=list.get(i);
reply.writeStrongBinder(task.asBinder());
}
return true;
}
case ADD_APP_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
ActivityManager.TaskDescription descr=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
Bitmap thumbnail=Bitmap.CREATOR.createFromParcel(data);
int res=addAppTask(activityToken,intent,descr,thumbnail);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_APP_TASK_THUMBNAIL_SIZE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Point size=getAppTaskThumbnailSize();
reply.writeNoException();
size.writeToParcel(reply,0);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningTaskInfo> list=getTasks(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
int userId=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl,userId);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_TASK_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int id=data.readInt();
ActivityManager.TaskThumbnail taskThumbnail=getTaskThumbnail(id);
reply.writeNoException();
if (taskThumbnail != null) {
reply.writeInt(1);
taskThumbnail.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningServiceInfo> list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ApplicationInfo> list=getRunningExternalApplications();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
moveTaskToFront(task,fl,options);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
int stackId=data.readInt();
boolean toTop=data.readInt() != 0;
moveTaskToStack(taskId,stackId,toTop);
reply.writeNoException();
return true;
}
case RESIZE_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
float weight=data.readFloat();
Rect r=Rect.CREATOR.createFromParcel(data);
resizeStack(stackId,r);
reply.writeNoException();
return true;
}
case GET_ALL_STACK_INFOS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<StackInfo> list=getAllStackInfos();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_STACK_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
StackInfo info=getStackInfo(stackId);
reply.writeNoException();
if (info != null) {
reply.writeInt(1);
info.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case IS_IN_HOME_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean isInHomeStack=isInHomeStack(taskId);
reply.writeNoException();
reply.writeInt(isInHomeStack ? 1 : 0);
return true;
}
case SET_FOCUSED_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
setFocusedStack(stackId);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
int userId=data.readInt();
boolean stable=data.readInt() != 0;
ContentProviderHolder cph=getContentProvider(app,name,userId,stable);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
int userId=data.readInt();
IBinder token=data.readStrongBinder();
ContentProviderHolder cph=getContentProviderExternal(name,userId,token);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REF_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
int stable=data.readInt();
int unstable=data.readInt();
boolean res=refContentProvider(b,stable,unstable);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case UNSTABLE_PROVIDER_DIED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
unstableProviderDied(b);
reply.writeNoException();
return true;
}
case APP_NOT_RESPONDING_VIA_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
appNotRespondingViaProvider(b);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
boolean stable=data.readInt() != 0;
removeContentProvider(b,stable);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder token=data.readStrongBinder();
removeContentProviderExternal(name,token);
reply.writeNoException();
return true;
}
case GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName comp=ComponentName.CREATOR.createFromParcel(data);
PendingIntent pi=getRunningServiceControlPanel(comp);
reply.writeNoException();
PendingIntent.writePendingIntentOrNullToParcel(pi,reply);
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
ComponentName cn=startService(app,service,resolvedType,userId);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
int res=stopService(app,service,resolvedType,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int id=data.readInt();
Notification notification=null;
if (data.readInt() != 0) {
notification=Notification.CREATOR.createFromParcel(data);
}
boolean removeNotification=data.readInt() != 0;
setServiceForeground(className,token,id,notification,removeNotification);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
int userId=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int type=data.readInt();
int startId=data.readInt();
int res=data.readInt();
serviceDoneExecuting(token,type,startId,res);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
b=data.readStrongBinder();
IUiAutomationConnection c=IUiAutomationConnection.Stub.asInterface(b);
int userId=data.readInt();
String abiOverride=data.readString();
boolean res=startInstrumentation(className,profileFile,fl,arguments,w,c,userId,abiOverride);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent[] requestIntents;
String[] requestResolvedTypes;
if (data.readInt() != 0) {
requestIntents=data.createTypedArray(Intent.CREATOR);
requestResolvedTypes=data.createStringArray();
}
 else {
requestIntents=null;
requestResolvedTypes=null;
}
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntents,requestResolvedTypes,fl,options,userId);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_UID_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
int res=getUidForIntentSender(r);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case HANDLE_INCOMING_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingPid=data.readInt();
int callingUid=data.readInt();
int userId=data.readInt();
boolean allowAll=data.readInt() != 0;
boolean requireFull=data.readInt() != 0;
String name=data.readString();
String callerPackage=data.readString();
int res=handleIncomingUser(callingPid,callingUid,userId,allowAll,requireFull,name,callerPackage);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_PERMISSION_WITH_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
IBinder token=data.readStrongBinder();
int res=checkPermissionWithToken(perm,pid,uid,token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int userId=data.readInt();
IBinder callerToken=data.readStrongBinder();
int res=checkUriPermission(uri,pid,uid,mode,userId,callerToken);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
int userId=data.readInt();
boolean res=clearApplicationUserData(packageName,observer,userId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
grantUriPermission(app,targetPkg,uri,mode,userId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermission(app,uri,mode,userId);
reply.writeNoException();
return true;
}
case TAKE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
takePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case RELEASE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
releasePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case GET_PERSISTED_URI_PERMISSIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final String packageName=data.readString();
final boolean incoming=data.readInt() != 0;
final ParceledListSlice<UriPermission> perms=getPersistedUriPermissions(packageName,incoming);
reply.writeNoException();
perms.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case SET_LOCK_SCREEN_SHOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
setLockScreenShown(data.readInt() != 0);
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_CONTROLLER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityController watcher=IActivityController.Stub.asInterface(data.readStrongBinder());
setActivityController(watcher);
reply.writeNoException();
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
int sourceUid=data.readInt();
String sourcePkg=data.readString();
noteWakeupAlarm(is,sourceUid,sourcePkg);
reply.writeNoException();
return true;
}
case KILL_PIDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
String reason=data.readString();
boolean secure=data.readInt() != 0;
boolean res=killPids(pids,reason,secure);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_PROCESSES_BELOW_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
boolean res=killProcessesBelowForeground(reason);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_CRASH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
handleApplicationCrash(app,ci);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_WTF_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
String tag=data.readString();
boolean system=data.readInt() != 0;
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
boolean res=handleApplicationWtf(app,tag,system,ci);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int violationMask=data.readInt();
StrictMode.ViolationInfo info=new StrictMode.ViolationInfo(data);
handleApplicationStrictModeViolation(app,violationMask,info);
reply.writeNoException();
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case KILL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
killBackgroundProcesses(packageName,userId);
reply.writeNoException();
return true;
}
case KILL_ALL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
killAllBackgroundProcesses();
reply.writeNoException();
return true;
}
case FORCE_STOP_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
forceStopPackage(packageName,userId);
reply.writeNoException();
return true;
}
case GET_MY_MEMORY_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.RunningAppProcessInfo info=new ActivityManager.RunningAppProcessInfo();
getMyMemoryState(info);
reply.writeNoException();
info.writeToParcel(reply,0);
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean start=data.readInt() != 0;
int profileType=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
boolean res=profileControl(process,userId,start,profilerInfo,profileType);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
case ADD_PACKAGE_DEPENDENCY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
addPackageDependency(packageName);
reply.writeNoException();
return true;
}
case KILL_APPLICATION_WITH_APPID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int appid=data.readInt();
String reason=data.readString();
killApplicationWithAppId(pkg,appid,reason);
reply.writeNoException();
return true;
}
case CLOSE_SYSTEM_DIALOGS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
closeSystemDialogs(reason);
reply.writeNoException();
return true;
}
case GET_PROCESS_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
Debug.MemoryInfo[] res=getProcessMemoryInfo(pids);
reply.writeNoException();
reply.writeTypedArray(res,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case KILL_APPLICATION_PROCESS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String processName=data.readString();
int uid=data.readInt();
killApplicationProcess(processName,uid);
reply.writeNoException();
return true;
}
case OVERRIDE_PENDING_TRANSITION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String packageName=data.readString();
int enterAnim=data.readInt();
int exitAnim=data.readInt();
overridePendingTransition(token,packageName,enterAnim,exitAnim);
reply.writeNoException();
return true;
}
case IS_USER_A_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean areThey=isUserAMonkey();
reply.writeNoException();
reply.writeInt(areThey ? 1 : 0);
return true;
}
case SET_USER_IS_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean monkey=(data.readInt() == 1);
setUserIsMonkey(monkey);
reply.writeNoException();
return true;
}
case FINISH_HEAVY_WEIGHT_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
finishHeavyWeightApp();
reply.writeNoException();
return true;
}
case IS_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isit=isImmersive(token);
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case IS_TOP_OF_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean isTopOfTask=isTopOfTask(token);
reply.writeNoException();
reply.writeInt(isTopOfTask ? 1 : 0);
return true;
}
case CONVERT_FROM_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean converted=convertFromTranslucent(token);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case CONVERT_TO_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
boolean converted=convertToTranslucent(token,options);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case GET_ACTIVITY_OPTIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final ActivityOptions options=getActivityOptions(token);
reply.writeNoException();
reply.writeBundle(options == null ? null : options.toBundle());
return true;
}
case SET_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean imm=data.readInt() == 1;
setImmersive(token,imm);
reply.writeNoException();
return true;
}
case IS_TOP_ACTIVITY_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean isit=isTopActivityImmersive();
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case CRASH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
int initialPid=data.readInt();
String packageName=data.readString();
String message=data.readString();
crashApplication(uid,initialPid,packageName,message);
reply.writeNoException();
return true;
}
case GET_PROVIDER_MIME_TYPE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int userId=data.readInt();
String type=getProviderMimeType(uri,userId);
reply.writeNoException();
reply.writeString(type);
return true;
}
case NEW_URI_PERMISSION_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder perm=newUriPermissionOwner(name);
reply.writeNoException();
reply.writeStrongBinder(perm);
return true;
}
case GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
int fromUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int sourceUserId=data.readInt();
int targetUserId=data.readInt();
grantUriPermissionFromOwner(owner,fromUid,targetPkg,uri,mode,sourceUserId,targetUserId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
Uri uri=null;
if (data.readInt() != 0) {
uri=Uri.CREATOR.createFromParcel(data);
}
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermissionFromOwner(owner,uri,mode,userId);
reply.writeNoException();
return true;
}
case CHECK_GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int modeFlags=data.readInt();
int userId=data.readInt();
int res=checkGrantUriPermission(callingUid,targetPkg,uri,modeFlags,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case DUMP_HEAP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean managed=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? ParcelFileDescriptor.CREATOR.createFromParcel(data) : null;
boolean res=dumpHeap(process,userId,managed,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case START_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent[] intents=data.createTypedArray(Intent.CREATOR);
String[] resolvedTypes=data.createStringArray();
IBinder resultTo=data.readStrongBinder();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivities(app,callingPackage,intents,resolvedTypes,resultTo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=getFrontActivityScreenCompatMode();
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=data.readInt();
setFrontActivityScreenCompatMode(mode);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case GET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=getPackageScreenCompatMode(pkg);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=data.readInt();
setPackageScreenCompatMode(pkg,mode);
reply.writeNoException();
return true;
}
case SWITCH_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=switchUser(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_USER_IN_BACKGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=startUserInBackground(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case STOP_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
IStopUserCallback callback=IStopUserCallback.Stub.asInterface(data.readStrongBinder());
int result=stopUser(userid,callback);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_CURRENT_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
UserInfo userInfo=getCurrentUser();
reply.writeNoException();
userInfo.writeToParcel(reply,0);
return true;
}
case IS_USER_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean orStopping=data.readInt() != 0;
boolean result=isUserRunning(userid,orStopping);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case GET_RUNNING_USER_IDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] result=getRunningUserIds();
reply.writeNoException();
reply.writeIntArray(result);
return true;
}
case REMOVE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean result=removeTask(taskId);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case REGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
registerProcessObserver(observer);
return true;
}
case UNREGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
unregisterProcessObserver(observer);
return true;
}
case GET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=getPackageAskScreenCompat(pkg);
reply.writeNoException();
reply.writeInt(ask ? 1 : 0);
return true;
}
case SET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=data.readInt() != 0;
setPackageAskScreenCompat(pkg,ask);
reply.writeNoException();
return true;
}
case IS_INTENT_SENDER_TARGETED_TO_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderTargetedToPackage(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case IS_INTENT_SENDER_AN_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderAnActivity(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_INTENT_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
Intent intent=getIntentForIntentSender(r);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_TAG_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String prefix=data.readString();
String tag=getTagForIntentSender(r,prefix);
reply.writeNoException();
reply.writeString(tag);
return true;
}
case UPDATE_PERSISTENT_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updatePersistentConfiguration(config);
reply.writeNoException();
return true;
}
case GET_PROCESS_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
long[] pss=getProcessPss(pids);
reply.writeNoException();
reply.writeLongArray(pss);
return true;
}
case SHOW_BOOT_MESSAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
CharSequence msg=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
boolean always=data.readInt() != 0;
showBootMessage(msg,always);
reply.writeNoException();
return true;
}
case KEYGUARD_WAITING_FOR_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
keyguardWaitingForActivityDrawn();
reply.writeNoException();
return true;
}
case SHOULD_UP_RECREATE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String destAffinity=data.readString();
boolean res=shouldUpRecreateTask(token,destAffinity);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case NAVIGATE_UP_TO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent target=Intent.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
Intent resultData=null;
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean res=navigateUpTo(token,target,resultCode,resultData);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_LAUNCHED_FROM_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int res=getLaunchedFromUid(token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_LAUNCHED_FROM_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=getLaunchedFromPackage(token);
reply.writeNoException();
reply.writeString(res);
return true;
}
case REGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
registerUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case UNREGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
unregisterUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case REQUEST_BUG_REPORT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
requestBugReport();
reply.writeNoException();
return true;
}
case INPUT_DISPATCHING_TIMED_OUT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int pid=data.readInt();
boolean aboveSystem=data.readInt() != 0;
String reason=data.readString();
long res=inputDispatchingTimedOut(pid,aboveSystem,reason);
reply.writeNoException();
reply.writeLong(res);
return true;
}
case GET_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int requestType=data.readInt();
Bundle res=getAssistContextExtras(requestType);
reply.writeNoException();
reply.writeBundle(res);
return true;
}
case REPORT_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle extras=data.readBundle();
reportAssistContextExtras(token,extras);
reply.writeNoException();
return true;
}
case LAUNCH_ASSIST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
int requestType=data.readInt();
String hint=data.readString();
int userHandle=data.readInt();
boolean res=launchAssistIntent(intent,requestType,hint,userHandle);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
String reason=data.readString();
killUid(uid,reason);
reply.writeNoException();
return true;
}
case HANG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
boolean allowRestart=data.readInt() != 0;
hang(who,allowRestart);
reply.writeNoException();
return true;
}
case REPORT_ACTIVITY_FULLY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reportActivityFullyDrawn(token);
reply.writeNoException();
return true;
}
case NOTIFY_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyActivityDrawn(token);
reply.writeNoException();
return true;
}
case RESTART_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
restart();
reply.writeNoException();
return true;
}
case PERFORM_IDLE_MAINTENANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
performIdleMaintenance();
reply.writeNoException();
return true;
}
case CREATE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder parentActivityToken=data.readStrongBinder();
IActivityContainerCallback callback=IActivityContainerCallback.Stub.asInterface(data.readStrongBinder());
IActivityContainer activityContainer=createActivityContainer(parentActivityToken,callback);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case DELETE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityContainer activityContainer=IActivityContainer.Stub.asInterface(data.readStrongBinder());
deleteActivityContainer(activityContainer);
reply.writeNoException();
return true;
}
case GET_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
IActivityContainer activityContainer=getEnclosingActivityContainer(activityToken);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_HOME_ACTIVITY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder homeActivityToken=getHomeActivityToken();
reply.writeNoException();
reply.writeStrongBinder(homeActivityToken);
return true;
}
case START_LOCK_TASK_BY_TASK_ID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final int taskId=data.readInt();
startLockTaskMode(taskId);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
startLockTaskMode(token);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
startLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskMode();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case IS_IN_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean isInLockTaskMode=isInLockTaskMode();
reply.writeNoException();
reply.writeInt(isInLockTaskMode ? 1 : 0);
return true;
}
case SET_TASK_DESCRIPTION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ActivityManager.TaskDescription values=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
setTaskDescription(token,values);
reply.writeNoException();
return true;
}
case GET_TASK_DESCRIPTION_ICON_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String filename=data.readString();
Bitmap icon=getTaskDescriptionIcon(filename);
reply.writeNoException();
if (icon == null) {
reply.writeInt(0);
}
 else {
reply.writeInt(1);
icon.writeToParcel(reply,0);
}
return true;
}
case START_IN_PLACE_ANIMATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
startInPlaceAnimationOnFrontMostApplication(options);
reply.writeNoException();
return true;
}
case REQUEST_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean enable=data.readInt() > 0;
boolean success=requestVisibleBehind(token,enable);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case IS_BACKGROUND_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean enabled=isBackgroundVisibleBehind(token);
reply.writeNoException();
reply.writeInt(enabled ? 1 : 0);
return true;
}
case BACKGROUND_RESOURCES_RELEASED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
backgroundResourcesReleased(token);
reply.writeNoException();
return true;
}
case NOTIFY_LAUNCH_TASK_BEHIND_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyLaunchTaskBehindComplete(token);
reply.writeNoException();
return true;
}
case NOTIFY_ENTER_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyEnterAnimationComplete(token);
reply.writeNoException();
return true;
}
case BOOT_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
bootAnimationComplete();
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}",0.9969574588945692
195926,"public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId) throws RemoteException {
  Parcel data=Parcel.obtain();
  Parcel reply=Parcel.obtain();
  data.writeInterfaceToken(IActivityManager.descriptor);
  uri.writeToParcel(data,0);
  data.writeInt(pid);
  data.writeInt(uid);
  data.writeInt(mode);
  data.writeInt(userId);
  mRemote.transact(CHECK_URI_PERMISSION_TRANSACTION,data,reply,0);
  reply.readException();
  int res=reply.readInt();
  data.recycle();
  reply.recycle();
  return res;
}","public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId,IBinder callerToken) throws RemoteException {
  Parcel data=Parcel.obtain();
  Parcel reply=Parcel.obtain();
  data.writeInterfaceToken(IActivityManager.descriptor);
  uri.writeToParcel(data,0);
  data.writeInt(pid);
  data.writeInt(uid);
  data.writeInt(mode);
  data.writeInt(userId);
  data.writeStrongBinder(callerToken);
  mRemote.transact(CHECK_URI_PERMISSION_TRANSACTION,data,reply,0);
  reply.readException();
  int res=reply.readInt();
  data.recycle();
  reply.recycle();
  return res;
}",0.9455216989843028
195927,"@Override public int checkPermission(String permission,int pid,int uid){
  if (permission == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return ActivityManagerNative.getDefault().checkPermission(permission,pid,uid);
  }
 catch (  RemoteException e) {
    return PackageManager.PERMISSION_DENIED;
  }
}","/** 
 * @hide 
 */
@Override public int checkPermission(String permission,int pid,int uid,IBinder callerToken){
  if (permission == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return ActivityManagerNative.getDefault().checkPermissionWithToken(permission,pid,uid,callerToken);
  }
 catch (  RemoteException e) {
    return PackageManager.PERMISSION_DENIED;
  }
}",0.8675675675675676
195928,"public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId) throws RemoteException ;","public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId,IBinder callerToken) throws RemoteException ;",0.908256880733945
195929,"@Override public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      String callingPackage=data.readString();
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      int startFlags=data.readInt();
      ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
      Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
      int result=startActivity(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_ACTIVITY_AS_USER_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder b=data.readStrongBinder();
    IApplicationThread app=ApplicationThreadNative.asInterface(b);
    String callingPackage=data.readString();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    String resolvedType=data.readString();
    IBinder resultTo=data.readStrongBinder();
    String resultWho=data.readString();
    int requestCode=data.readInt();
    int startFlags=data.readInt();
    ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
    Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
    int userId=data.readInt();
    int result=startActivityAsUser(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
    reply.writeNoException();
    reply.writeInt(result);
    return true;
  }
case START_ACTIVITY_AS_CALLER_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder b=data.readStrongBinder();
  IApplicationThread app=ApplicationThreadNative.asInterface(b);
  String callingPackage=data.readString();
  Intent intent=Intent.CREATOR.createFromParcel(data);
  String resolvedType=data.readString();
  IBinder resultTo=data.readStrongBinder();
  String resultWho=data.readString();
  int requestCode=data.readInt();
  int startFlags=data.readInt();
  ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
  Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
  int userId=data.readInt();
  int result=startActivityAsCaller(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
  reply.writeNoException();
  reply.writeInt(result);
  return true;
}
case START_ACTIVITY_AND_WAIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
WaitResult result=startActivityAndWait(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
reply.writeNoException();
result.writeToParcel(reply,0);
return true;
}
case START_ACTIVITY_WITH_CONFIG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
Configuration config=Configuration.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivityWithConfig(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,config,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_ACTIVITY_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IntentSender intent=IntentSender.CREATOR.createFromParcel(data);
Intent fillInIntent=null;
if (data.readInt() != 0) {
fillInIntent=Intent.CREATOR.createFromParcel(data);
}
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int flagsMask=data.readInt();
int flagsValues=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int result=startActivityIntentSender(app,intent,fillInIntent,resolvedType,resultTo,resultWho,requestCode,flagsMask,flagsValues,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_VOICE_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
int callingPid=data.readInt();
int callingUid=data.readInt();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
IVoiceInteractor interactor=IVoiceInteractor.Stub.asInterface(data.readStrongBinder());
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startVoiceActivity(callingPackage,callingPid,callingUid,intent,resolvedType,session,interactor,startFlags,profilerInfo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder callingActivity=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
boolean result=startNextMatchingActivity(callingActivity,intent,options);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_ACTIVITY_FROM_RECENTS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
Bundle options=data.readInt() == 0 ? null : Bundle.CREATOR.createFromParcel(data);
int result=startActivityFromRecents(taskId,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent resultData=null;
int resultCode=data.readInt();
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean finishTask=(data.readInt() != 0);
boolean res=finishActivity(token,resultCode,resultData,finishTask);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case FINISH_ACTIVITY_AFFINITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=finishActivityAffinity(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_VOICE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
finishVoiceTask(session);
reply.writeNoException();
return true;
}
case RELEASE_ACTIVITY_INSTANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=releaseActivityInstance(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case RELEASE_SOME_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
releaseSomeActivities(app);
reply.writeNoException();
return true;
}
case WILL_ACTIVITY_BE_VISIBLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=willActivityBeVisible(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
String packageName=data.readString();
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
int userId=data.readInt();
Intent intent=registerReceiver(app,packageName,rec,filter,perm,userId);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
int appOp=data.readInt();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int userId=data.readInt();
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,appOp,serialized,sticky,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
int userId=data.readInt();
unbroadcastIntent(app,intent,userId);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Configuration config=null;
if (data.readInt() != 0) {
config=Configuration.CREATOR.createFromParcel(data);
}
boolean stopProfiling=data.readInt() != 0;
if (token != null) {
activityIdle(token,config,stopProfiling);
}
reply.writeNoException();
return true;
}
case ACTIVITY_RESUMED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityResumed(token);
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityPaused(token);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
PersistableBundle persistentState=data.readPersistableBundle();
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,map,persistentState,description);
reply.writeNoException();
return true;
}
case ACTIVITY_SLEPT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activitySlept(token);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_APP_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
List<IAppTask> list=getAppTasks(callingPackage);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
IAppTask task=list.get(i);
reply.writeStrongBinder(task.asBinder());
}
return true;
}
case ADD_APP_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
ActivityManager.TaskDescription descr=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
Bitmap thumbnail=Bitmap.CREATOR.createFromParcel(data);
int res=addAppTask(activityToken,intent,descr,thumbnail);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_APP_TASK_THUMBNAIL_SIZE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Point size=getAppTaskThumbnailSize();
reply.writeNoException();
size.writeToParcel(reply,0);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningTaskInfo> list=getTasks(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
int userId=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl,userId);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_TASK_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int id=data.readInt();
ActivityManager.TaskThumbnail taskThumbnail=getTaskThumbnail(id);
reply.writeNoException();
if (taskThumbnail != null) {
reply.writeInt(1);
taskThumbnail.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningServiceInfo> list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ApplicationInfo> list=getRunningExternalApplications();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
moveTaskToFront(task,fl,options);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
int stackId=data.readInt();
boolean toTop=data.readInt() != 0;
moveTaskToStack(taskId,stackId,toTop);
reply.writeNoException();
return true;
}
case RESIZE_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
float weight=data.readFloat();
Rect r=Rect.CREATOR.createFromParcel(data);
resizeStack(stackId,r);
reply.writeNoException();
return true;
}
case GET_ALL_STACK_INFOS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<StackInfo> list=getAllStackInfos();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_STACK_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
StackInfo info=getStackInfo(stackId);
reply.writeNoException();
if (info != null) {
reply.writeInt(1);
info.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case IS_IN_HOME_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean isInHomeStack=isInHomeStack(taskId);
reply.writeNoException();
reply.writeInt(isInHomeStack ? 1 : 0);
return true;
}
case SET_FOCUSED_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
setFocusedStack(stackId);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
int userId=data.readInt();
boolean stable=data.readInt() != 0;
ContentProviderHolder cph=getContentProvider(app,name,userId,stable);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
int userId=data.readInt();
IBinder token=data.readStrongBinder();
ContentProviderHolder cph=getContentProviderExternal(name,userId,token);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REF_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
int stable=data.readInt();
int unstable=data.readInt();
boolean res=refContentProvider(b,stable,unstable);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case UNSTABLE_PROVIDER_DIED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
unstableProviderDied(b);
reply.writeNoException();
return true;
}
case APP_NOT_RESPONDING_VIA_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
appNotRespondingViaProvider(b);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
boolean stable=data.readInt() != 0;
removeContentProvider(b,stable);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder token=data.readStrongBinder();
removeContentProviderExternal(name,token);
reply.writeNoException();
return true;
}
case GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName comp=ComponentName.CREATOR.createFromParcel(data);
PendingIntent pi=getRunningServiceControlPanel(comp);
reply.writeNoException();
PendingIntent.writePendingIntentOrNullToParcel(pi,reply);
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
ComponentName cn=startService(app,service,resolvedType,userId);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
int res=stopService(app,service,resolvedType,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int id=data.readInt();
Notification notification=null;
if (data.readInt() != 0) {
notification=Notification.CREATOR.createFromParcel(data);
}
boolean removeNotification=data.readInt() != 0;
setServiceForeground(className,token,id,notification,removeNotification);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
int userId=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int type=data.readInt();
int startId=data.readInt();
int res=data.readInt();
serviceDoneExecuting(token,type,startId,res);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
b=data.readStrongBinder();
IUiAutomationConnection c=IUiAutomationConnection.Stub.asInterface(b);
int userId=data.readInt();
String abiOverride=data.readString();
boolean res=startInstrumentation(className,profileFile,fl,arguments,w,c,userId,abiOverride);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent[] requestIntents;
String[] requestResolvedTypes;
if (data.readInt() != 0) {
requestIntents=data.createTypedArray(Intent.CREATOR);
requestResolvedTypes=data.createStringArray();
}
 else {
requestIntents=null;
requestResolvedTypes=null;
}
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntents,requestResolvedTypes,fl,options,userId);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_UID_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
int res=getUidForIntentSender(r);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case HANDLE_INCOMING_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingPid=data.readInt();
int callingUid=data.readInt();
int userId=data.readInt();
boolean allowAll=data.readInt() != 0;
boolean requireFull=data.readInt() != 0;
String name=data.readString();
String callerPackage=data.readString();
int res=handleIncomingUser(callingPid,callingUid,userId,allowAll,requireFull,name,callerPackage);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int userId=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
int userId=data.readInt();
boolean res=clearApplicationUserData(packageName,observer,userId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
grantUriPermission(app,targetPkg,uri,mode,userId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermission(app,uri,mode,userId);
reply.writeNoException();
return true;
}
case TAKE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
takePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case RELEASE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
releasePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case GET_PERSISTED_URI_PERMISSIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final String packageName=data.readString();
final boolean incoming=data.readInt() != 0;
final ParceledListSlice<UriPermission> perms=getPersistedUriPermissions(packageName,incoming);
reply.writeNoException();
perms.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case SET_LOCK_SCREEN_SHOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
setLockScreenShown(data.readInt() != 0);
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_CONTROLLER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityController watcher=IActivityController.Stub.asInterface(data.readStrongBinder());
setActivityController(watcher);
reply.writeNoException();
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
int sourceUid=data.readInt();
String sourcePkg=data.readString();
noteWakeupAlarm(is,sourceUid,sourcePkg);
reply.writeNoException();
return true;
}
case KILL_PIDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
String reason=data.readString();
boolean secure=data.readInt() != 0;
boolean res=killPids(pids,reason,secure);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_PROCESSES_BELOW_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
boolean res=killProcessesBelowForeground(reason);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_CRASH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
handleApplicationCrash(app,ci);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_WTF_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
String tag=data.readString();
boolean system=data.readInt() != 0;
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
boolean res=handleApplicationWtf(app,tag,system,ci);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int violationMask=data.readInt();
StrictMode.ViolationInfo info=new StrictMode.ViolationInfo(data);
handleApplicationStrictModeViolation(app,violationMask,info);
reply.writeNoException();
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case KILL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
killBackgroundProcesses(packageName,userId);
reply.writeNoException();
return true;
}
case KILL_ALL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
killAllBackgroundProcesses();
reply.writeNoException();
return true;
}
case FORCE_STOP_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
forceStopPackage(packageName,userId);
reply.writeNoException();
return true;
}
case GET_MY_MEMORY_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.RunningAppProcessInfo info=new ActivityManager.RunningAppProcessInfo();
getMyMemoryState(info);
reply.writeNoException();
info.writeToParcel(reply,0);
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean start=data.readInt() != 0;
int profileType=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
boolean res=profileControl(process,userId,start,profilerInfo,profileType);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
case ADD_PACKAGE_DEPENDENCY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
addPackageDependency(packageName);
reply.writeNoException();
return true;
}
case KILL_APPLICATION_WITH_APPID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int appid=data.readInt();
String reason=data.readString();
killApplicationWithAppId(pkg,appid,reason);
reply.writeNoException();
return true;
}
case CLOSE_SYSTEM_DIALOGS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
closeSystemDialogs(reason);
reply.writeNoException();
return true;
}
case GET_PROCESS_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
Debug.MemoryInfo[] res=getProcessMemoryInfo(pids);
reply.writeNoException();
reply.writeTypedArray(res,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case KILL_APPLICATION_PROCESS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String processName=data.readString();
int uid=data.readInt();
killApplicationProcess(processName,uid);
reply.writeNoException();
return true;
}
case OVERRIDE_PENDING_TRANSITION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String packageName=data.readString();
int enterAnim=data.readInt();
int exitAnim=data.readInt();
overridePendingTransition(token,packageName,enterAnim,exitAnim);
reply.writeNoException();
return true;
}
case IS_USER_A_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean areThey=isUserAMonkey();
reply.writeNoException();
reply.writeInt(areThey ? 1 : 0);
return true;
}
case SET_USER_IS_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean monkey=(data.readInt() == 1);
setUserIsMonkey(monkey);
reply.writeNoException();
return true;
}
case FINISH_HEAVY_WEIGHT_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
finishHeavyWeightApp();
reply.writeNoException();
return true;
}
case IS_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isit=isImmersive(token);
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case IS_TOP_OF_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean isTopOfTask=isTopOfTask(token);
reply.writeNoException();
reply.writeInt(isTopOfTask ? 1 : 0);
return true;
}
case CONVERT_FROM_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean converted=convertFromTranslucent(token);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case CONVERT_TO_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
boolean converted=convertToTranslucent(token,options);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case GET_ACTIVITY_OPTIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final ActivityOptions options=getActivityOptions(token);
reply.writeNoException();
reply.writeBundle(options == null ? null : options.toBundle());
return true;
}
case SET_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean imm=data.readInt() == 1;
setImmersive(token,imm);
reply.writeNoException();
return true;
}
case IS_TOP_ACTIVITY_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean isit=isTopActivityImmersive();
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case CRASH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
int initialPid=data.readInt();
String packageName=data.readString();
String message=data.readString();
crashApplication(uid,initialPid,packageName,message);
reply.writeNoException();
return true;
}
case GET_PROVIDER_MIME_TYPE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int userId=data.readInt();
String type=getProviderMimeType(uri,userId);
reply.writeNoException();
reply.writeString(type);
return true;
}
case NEW_URI_PERMISSION_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder perm=newUriPermissionOwner(name);
reply.writeNoException();
reply.writeStrongBinder(perm);
return true;
}
case GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
int fromUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int sourceUserId=data.readInt();
int targetUserId=data.readInt();
grantUriPermissionFromOwner(owner,fromUid,targetPkg,uri,mode,sourceUserId,targetUserId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
Uri uri=null;
if (data.readInt() != 0) {
uri=Uri.CREATOR.createFromParcel(data);
}
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermissionFromOwner(owner,uri,mode,userId);
reply.writeNoException();
return true;
}
case CHECK_GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int modeFlags=data.readInt();
int userId=data.readInt();
int res=checkGrantUriPermission(callingUid,targetPkg,uri,modeFlags,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case DUMP_HEAP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean managed=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? ParcelFileDescriptor.CREATOR.createFromParcel(data) : null;
boolean res=dumpHeap(process,userId,managed,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case START_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent[] intents=data.createTypedArray(Intent.CREATOR);
String[] resolvedTypes=data.createStringArray();
IBinder resultTo=data.readStrongBinder();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivities(app,callingPackage,intents,resolvedTypes,resultTo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=getFrontActivityScreenCompatMode();
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=data.readInt();
setFrontActivityScreenCompatMode(mode);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case GET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=getPackageScreenCompatMode(pkg);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=data.readInt();
setPackageScreenCompatMode(pkg,mode);
reply.writeNoException();
return true;
}
case SWITCH_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=switchUser(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_USER_IN_BACKGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=startUserInBackground(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case STOP_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
IStopUserCallback callback=IStopUserCallback.Stub.asInterface(data.readStrongBinder());
int result=stopUser(userid,callback);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_CURRENT_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
UserInfo userInfo=getCurrentUser();
reply.writeNoException();
userInfo.writeToParcel(reply,0);
return true;
}
case IS_USER_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean orStopping=data.readInt() != 0;
boolean result=isUserRunning(userid,orStopping);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case GET_RUNNING_USER_IDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] result=getRunningUserIds();
reply.writeNoException();
reply.writeIntArray(result);
return true;
}
case REMOVE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean result=removeTask(taskId);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case REGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
registerProcessObserver(observer);
return true;
}
case UNREGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
unregisterProcessObserver(observer);
return true;
}
case GET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=getPackageAskScreenCompat(pkg);
reply.writeNoException();
reply.writeInt(ask ? 1 : 0);
return true;
}
case SET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=data.readInt() != 0;
setPackageAskScreenCompat(pkg,ask);
reply.writeNoException();
return true;
}
case IS_INTENT_SENDER_TARGETED_TO_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderTargetedToPackage(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case IS_INTENT_SENDER_AN_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderAnActivity(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_INTENT_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
Intent intent=getIntentForIntentSender(r);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_TAG_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String prefix=data.readString();
String tag=getTagForIntentSender(r,prefix);
reply.writeNoException();
reply.writeString(tag);
return true;
}
case UPDATE_PERSISTENT_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updatePersistentConfiguration(config);
reply.writeNoException();
return true;
}
case GET_PROCESS_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
long[] pss=getProcessPss(pids);
reply.writeNoException();
reply.writeLongArray(pss);
return true;
}
case SHOW_BOOT_MESSAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
CharSequence msg=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
boolean always=data.readInt() != 0;
showBootMessage(msg,always);
reply.writeNoException();
return true;
}
case KEYGUARD_WAITING_FOR_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
keyguardWaitingForActivityDrawn();
reply.writeNoException();
return true;
}
case SHOULD_UP_RECREATE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String destAffinity=data.readString();
boolean res=shouldUpRecreateTask(token,destAffinity);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case NAVIGATE_UP_TO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent target=Intent.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
Intent resultData=null;
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean res=navigateUpTo(token,target,resultCode,resultData);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_LAUNCHED_FROM_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int res=getLaunchedFromUid(token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_LAUNCHED_FROM_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=getLaunchedFromPackage(token);
reply.writeNoException();
reply.writeString(res);
return true;
}
case REGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
registerUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case UNREGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
unregisterUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case REQUEST_BUG_REPORT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
requestBugReport();
reply.writeNoException();
return true;
}
case INPUT_DISPATCHING_TIMED_OUT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int pid=data.readInt();
boolean aboveSystem=data.readInt() != 0;
String reason=data.readString();
long res=inputDispatchingTimedOut(pid,aboveSystem,reason);
reply.writeNoException();
reply.writeLong(res);
return true;
}
case GET_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int requestType=data.readInt();
Bundle res=getAssistContextExtras(requestType);
reply.writeNoException();
reply.writeBundle(res);
return true;
}
case REPORT_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle extras=data.readBundle();
reportAssistContextExtras(token,extras);
reply.writeNoException();
return true;
}
case LAUNCH_ASSIST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
int requestType=data.readInt();
String hint=data.readString();
int userHandle=data.readInt();
boolean res=launchAssistIntent(intent,requestType,hint,userHandle);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
String reason=data.readString();
killUid(uid,reason);
reply.writeNoException();
return true;
}
case HANG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
boolean allowRestart=data.readInt() != 0;
hang(who,allowRestart);
reply.writeNoException();
return true;
}
case REPORT_ACTIVITY_FULLY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reportActivityFullyDrawn(token);
reply.writeNoException();
return true;
}
case NOTIFY_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyActivityDrawn(token);
reply.writeNoException();
return true;
}
case RESTART_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
restart();
reply.writeNoException();
return true;
}
case PERFORM_IDLE_MAINTENANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
performIdleMaintenance();
reply.writeNoException();
return true;
}
case CREATE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder parentActivityToken=data.readStrongBinder();
IActivityContainerCallback callback=IActivityContainerCallback.Stub.asInterface(data.readStrongBinder());
IActivityContainer activityContainer=createActivityContainer(parentActivityToken,callback);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case DELETE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityContainer activityContainer=IActivityContainer.Stub.asInterface(data.readStrongBinder());
deleteActivityContainer(activityContainer);
reply.writeNoException();
return true;
}
case GET_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
IActivityContainer activityContainer=getEnclosingActivityContainer(activityToken);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_HOME_ACTIVITY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder homeActivityToken=getHomeActivityToken();
reply.writeNoException();
reply.writeStrongBinder(homeActivityToken);
return true;
}
case START_LOCK_TASK_BY_TASK_ID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final int taskId=data.readInt();
startLockTaskMode(taskId);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
startLockTaskMode(token);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
startLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskMode();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case IS_IN_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean isInLockTaskMode=isInLockTaskMode();
reply.writeNoException();
reply.writeInt(isInLockTaskMode ? 1 : 0);
return true;
}
case SET_TASK_DESCRIPTION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ActivityManager.TaskDescription values=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
setTaskDescription(token,values);
reply.writeNoException();
return true;
}
case GET_TASK_DESCRIPTION_ICON_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String filename=data.readString();
Bitmap icon=getTaskDescriptionIcon(filename);
reply.writeNoException();
if (icon == null) {
reply.writeInt(0);
}
 else {
reply.writeInt(1);
icon.writeToParcel(reply,0);
}
return true;
}
case START_IN_PLACE_ANIMATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
startInPlaceAnimationOnFrontMostApplication(options);
reply.writeNoException();
return true;
}
case REQUEST_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean enable=data.readInt() > 0;
boolean success=requestVisibleBehind(token,enable);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case IS_BACKGROUND_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean enabled=isBackgroundVisibleBehind(token);
reply.writeNoException();
reply.writeInt(enabled ? 1 : 0);
return true;
}
case BACKGROUND_RESOURCES_RELEASED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
backgroundResourcesReleased(token);
reply.writeNoException();
return true;
}
case NOTIFY_LAUNCH_TASK_BEHIND_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyLaunchTaskBehindComplete(token);
reply.writeNoException();
return true;
}
case NOTIFY_ENTER_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyEnterAnimationComplete(token);
reply.writeNoException();
return true;
}
case BOOT_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
bootAnimationComplete();
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}","@Override public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      String callingPackage=data.readString();
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      int startFlags=data.readInt();
      ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
      Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
      int result=startActivity(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_ACTIVITY_AS_USER_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder b=data.readStrongBinder();
    IApplicationThread app=ApplicationThreadNative.asInterface(b);
    String callingPackage=data.readString();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    String resolvedType=data.readString();
    IBinder resultTo=data.readStrongBinder();
    String resultWho=data.readString();
    int requestCode=data.readInt();
    int startFlags=data.readInt();
    ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
    Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
    int userId=data.readInt();
    int result=startActivityAsUser(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
    reply.writeNoException();
    reply.writeInt(result);
    return true;
  }
case START_ACTIVITY_AS_CALLER_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder b=data.readStrongBinder();
  IApplicationThread app=ApplicationThreadNative.asInterface(b);
  String callingPackage=data.readString();
  Intent intent=Intent.CREATOR.createFromParcel(data);
  String resolvedType=data.readString();
  IBinder resultTo=data.readStrongBinder();
  String resultWho=data.readString();
  int requestCode=data.readInt();
  int startFlags=data.readInt();
  ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
  Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
  int userId=data.readInt();
  int result=startActivityAsCaller(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
  reply.writeNoException();
  reply.writeInt(result);
  return true;
}
case START_ACTIVITY_AND_WAIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
WaitResult result=startActivityAndWait(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
reply.writeNoException();
result.writeToParcel(reply,0);
return true;
}
case START_ACTIVITY_WITH_CONFIG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
Configuration config=Configuration.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivityWithConfig(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,config,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_ACTIVITY_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IntentSender intent=IntentSender.CREATOR.createFromParcel(data);
Intent fillInIntent=null;
if (data.readInt() != 0) {
fillInIntent=Intent.CREATOR.createFromParcel(data);
}
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int flagsMask=data.readInt();
int flagsValues=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int result=startActivityIntentSender(app,intent,fillInIntent,resolvedType,resultTo,resultWho,requestCode,flagsMask,flagsValues,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_VOICE_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
int callingPid=data.readInt();
int callingUid=data.readInt();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
IVoiceInteractor interactor=IVoiceInteractor.Stub.asInterface(data.readStrongBinder());
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startVoiceActivity(callingPackage,callingPid,callingUid,intent,resolvedType,session,interactor,startFlags,profilerInfo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder callingActivity=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
boolean result=startNextMatchingActivity(callingActivity,intent,options);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_ACTIVITY_FROM_RECENTS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
Bundle options=data.readInt() == 0 ? null : Bundle.CREATOR.createFromParcel(data);
int result=startActivityFromRecents(taskId,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent resultData=null;
int resultCode=data.readInt();
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean finishTask=(data.readInt() != 0);
boolean res=finishActivity(token,resultCode,resultData,finishTask);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case FINISH_ACTIVITY_AFFINITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=finishActivityAffinity(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_VOICE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
finishVoiceTask(session);
reply.writeNoException();
return true;
}
case RELEASE_ACTIVITY_INSTANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=releaseActivityInstance(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case RELEASE_SOME_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
releaseSomeActivities(app);
reply.writeNoException();
return true;
}
case WILL_ACTIVITY_BE_VISIBLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=willActivityBeVisible(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
String packageName=data.readString();
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
int userId=data.readInt();
Intent intent=registerReceiver(app,packageName,rec,filter,perm,userId);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
int appOp=data.readInt();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int userId=data.readInt();
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,appOp,serialized,sticky,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
int userId=data.readInt();
unbroadcastIntent(app,intent,userId);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Configuration config=null;
if (data.readInt() != 0) {
config=Configuration.CREATOR.createFromParcel(data);
}
boolean stopProfiling=data.readInt() != 0;
if (token != null) {
activityIdle(token,config,stopProfiling);
}
reply.writeNoException();
return true;
}
case ACTIVITY_RESUMED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityResumed(token);
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityPaused(token);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
PersistableBundle persistentState=data.readPersistableBundle();
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,map,persistentState,description);
reply.writeNoException();
return true;
}
case ACTIVITY_SLEPT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activitySlept(token);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_APP_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
List<IAppTask> list=getAppTasks(callingPackage);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
IAppTask task=list.get(i);
reply.writeStrongBinder(task.asBinder());
}
return true;
}
case ADD_APP_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
ActivityManager.TaskDescription descr=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
Bitmap thumbnail=Bitmap.CREATOR.createFromParcel(data);
int res=addAppTask(activityToken,intent,descr,thumbnail);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_APP_TASK_THUMBNAIL_SIZE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Point size=getAppTaskThumbnailSize();
reply.writeNoException();
size.writeToParcel(reply,0);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningTaskInfo> list=getTasks(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
int userId=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl,userId);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_TASK_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int id=data.readInt();
ActivityManager.TaskThumbnail taskThumbnail=getTaskThumbnail(id);
reply.writeNoException();
if (taskThumbnail != null) {
reply.writeInt(1);
taskThumbnail.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningServiceInfo> list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ApplicationInfo> list=getRunningExternalApplications();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
moveTaskToFront(task,fl,options);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
int stackId=data.readInt();
boolean toTop=data.readInt() != 0;
moveTaskToStack(taskId,stackId,toTop);
reply.writeNoException();
return true;
}
case RESIZE_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
float weight=data.readFloat();
Rect r=Rect.CREATOR.createFromParcel(data);
resizeStack(stackId,r);
reply.writeNoException();
return true;
}
case GET_ALL_STACK_INFOS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<StackInfo> list=getAllStackInfos();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_STACK_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
StackInfo info=getStackInfo(stackId);
reply.writeNoException();
if (info != null) {
reply.writeInt(1);
info.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case IS_IN_HOME_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean isInHomeStack=isInHomeStack(taskId);
reply.writeNoException();
reply.writeInt(isInHomeStack ? 1 : 0);
return true;
}
case SET_FOCUSED_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
setFocusedStack(stackId);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
int userId=data.readInt();
boolean stable=data.readInt() != 0;
ContentProviderHolder cph=getContentProvider(app,name,userId,stable);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
int userId=data.readInt();
IBinder token=data.readStrongBinder();
ContentProviderHolder cph=getContentProviderExternal(name,userId,token);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REF_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
int stable=data.readInt();
int unstable=data.readInt();
boolean res=refContentProvider(b,stable,unstable);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case UNSTABLE_PROVIDER_DIED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
unstableProviderDied(b);
reply.writeNoException();
return true;
}
case APP_NOT_RESPONDING_VIA_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
appNotRespondingViaProvider(b);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
boolean stable=data.readInt() != 0;
removeContentProvider(b,stable);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder token=data.readStrongBinder();
removeContentProviderExternal(name,token);
reply.writeNoException();
return true;
}
case GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName comp=ComponentName.CREATOR.createFromParcel(data);
PendingIntent pi=getRunningServiceControlPanel(comp);
reply.writeNoException();
PendingIntent.writePendingIntentOrNullToParcel(pi,reply);
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
ComponentName cn=startService(app,service,resolvedType,userId);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
int res=stopService(app,service,resolvedType,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int id=data.readInt();
Notification notification=null;
if (data.readInt() != 0) {
notification=Notification.CREATOR.createFromParcel(data);
}
boolean removeNotification=data.readInt() != 0;
setServiceForeground(className,token,id,notification,removeNotification);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
int userId=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int type=data.readInt();
int startId=data.readInt();
int res=data.readInt();
serviceDoneExecuting(token,type,startId,res);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
b=data.readStrongBinder();
IUiAutomationConnection c=IUiAutomationConnection.Stub.asInterface(b);
int userId=data.readInt();
String abiOverride=data.readString();
boolean res=startInstrumentation(className,profileFile,fl,arguments,w,c,userId,abiOverride);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent[] requestIntents;
String[] requestResolvedTypes;
if (data.readInt() != 0) {
requestIntents=data.createTypedArray(Intent.CREATOR);
requestResolvedTypes=data.createStringArray();
}
 else {
requestIntents=null;
requestResolvedTypes=null;
}
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntents,requestResolvedTypes,fl,options,userId);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_UID_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
int res=getUidForIntentSender(r);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case HANDLE_INCOMING_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingPid=data.readInt();
int callingUid=data.readInt();
int userId=data.readInt();
boolean allowAll=data.readInt() != 0;
boolean requireFull=data.readInt() != 0;
String name=data.readString();
String callerPackage=data.readString();
int res=handleIncomingUser(callingPid,callingUid,userId,allowAll,requireFull,name,callerPackage);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_PERMISSION_WITH_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
IBinder token=data.readStrongBinder();
int res=checkPermissionWithToken(perm,pid,uid,token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int userId=data.readInt();
IBinder callerToken=data.readStrongBinder();
int res=checkUriPermission(uri,pid,uid,mode,userId,callerToken);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
int userId=data.readInt();
boolean res=clearApplicationUserData(packageName,observer,userId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
grantUriPermission(app,targetPkg,uri,mode,userId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermission(app,uri,mode,userId);
reply.writeNoException();
return true;
}
case TAKE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
takePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case RELEASE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
releasePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case GET_PERSISTED_URI_PERMISSIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final String packageName=data.readString();
final boolean incoming=data.readInt() != 0;
final ParceledListSlice<UriPermission> perms=getPersistedUriPermissions(packageName,incoming);
reply.writeNoException();
perms.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case SET_LOCK_SCREEN_SHOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
setLockScreenShown(data.readInt() != 0);
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_CONTROLLER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityController watcher=IActivityController.Stub.asInterface(data.readStrongBinder());
setActivityController(watcher);
reply.writeNoException();
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
int sourceUid=data.readInt();
String sourcePkg=data.readString();
noteWakeupAlarm(is,sourceUid,sourcePkg);
reply.writeNoException();
return true;
}
case KILL_PIDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
String reason=data.readString();
boolean secure=data.readInt() != 0;
boolean res=killPids(pids,reason,secure);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_PROCESSES_BELOW_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
boolean res=killProcessesBelowForeground(reason);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_CRASH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
handleApplicationCrash(app,ci);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_WTF_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
String tag=data.readString();
boolean system=data.readInt() != 0;
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
boolean res=handleApplicationWtf(app,tag,system,ci);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int violationMask=data.readInt();
StrictMode.ViolationInfo info=new StrictMode.ViolationInfo(data);
handleApplicationStrictModeViolation(app,violationMask,info);
reply.writeNoException();
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case KILL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
killBackgroundProcesses(packageName,userId);
reply.writeNoException();
return true;
}
case KILL_ALL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
killAllBackgroundProcesses();
reply.writeNoException();
return true;
}
case FORCE_STOP_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
forceStopPackage(packageName,userId);
reply.writeNoException();
return true;
}
case GET_MY_MEMORY_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.RunningAppProcessInfo info=new ActivityManager.RunningAppProcessInfo();
getMyMemoryState(info);
reply.writeNoException();
info.writeToParcel(reply,0);
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean start=data.readInt() != 0;
int profileType=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
boolean res=profileControl(process,userId,start,profilerInfo,profileType);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
case ADD_PACKAGE_DEPENDENCY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
addPackageDependency(packageName);
reply.writeNoException();
return true;
}
case KILL_APPLICATION_WITH_APPID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int appid=data.readInt();
String reason=data.readString();
killApplicationWithAppId(pkg,appid,reason);
reply.writeNoException();
return true;
}
case CLOSE_SYSTEM_DIALOGS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
closeSystemDialogs(reason);
reply.writeNoException();
return true;
}
case GET_PROCESS_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
Debug.MemoryInfo[] res=getProcessMemoryInfo(pids);
reply.writeNoException();
reply.writeTypedArray(res,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case KILL_APPLICATION_PROCESS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String processName=data.readString();
int uid=data.readInt();
killApplicationProcess(processName,uid);
reply.writeNoException();
return true;
}
case OVERRIDE_PENDING_TRANSITION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String packageName=data.readString();
int enterAnim=data.readInt();
int exitAnim=data.readInt();
overridePendingTransition(token,packageName,enterAnim,exitAnim);
reply.writeNoException();
return true;
}
case IS_USER_A_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean areThey=isUserAMonkey();
reply.writeNoException();
reply.writeInt(areThey ? 1 : 0);
return true;
}
case SET_USER_IS_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean monkey=(data.readInt() == 1);
setUserIsMonkey(monkey);
reply.writeNoException();
return true;
}
case FINISH_HEAVY_WEIGHT_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
finishHeavyWeightApp();
reply.writeNoException();
return true;
}
case IS_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isit=isImmersive(token);
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case IS_TOP_OF_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean isTopOfTask=isTopOfTask(token);
reply.writeNoException();
reply.writeInt(isTopOfTask ? 1 : 0);
return true;
}
case CONVERT_FROM_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean converted=convertFromTranslucent(token);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case CONVERT_TO_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
boolean converted=convertToTranslucent(token,options);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case GET_ACTIVITY_OPTIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final ActivityOptions options=getActivityOptions(token);
reply.writeNoException();
reply.writeBundle(options == null ? null : options.toBundle());
return true;
}
case SET_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean imm=data.readInt() == 1;
setImmersive(token,imm);
reply.writeNoException();
return true;
}
case IS_TOP_ACTIVITY_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean isit=isTopActivityImmersive();
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case CRASH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
int initialPid=data.readInt();
String packageName=data.readString();
String message=data.readString();
crashApplication(uid,initialPid,packageName,message);
reply.writeNoException();
return true;
}
case GET_PROVIDER_MIME_TYPE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int userId=data.readInt();
String type=getProviderMimeType(uri,userId);
reply.writeNoException();
reply.writeString(type);
return true;
}
case NEW_URI_PERMISSION_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder perm=newUriPermissionOwner(name);
reply.writeNoException();
reply.writeStrongBinder(perm);
return true;
}
case GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
int fromUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int sourceUserId=data.readInt();
int targetUserId=data.readInt();
grantUriPermissionFromOwner(owner,fromUid,targetPkg,uri,mode,sourceUserId,targetUserId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
Uri uri=null;
if (data.readInt() != 0) {
uri=Uri.CREATOR.createFromParcel(data);
}
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermissionFromOwner(owner,uri,mode,userId);
reply.writeNoException();
return true;
}
case CHECK_GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int modeFlags=data.readInt();
int userId=data.readInt();
int res=checkGrantUriPermission(callingUid,targetPkg,uri,modeFlags,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case DUMP_HEAP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean managed=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? ParcelFileDescriptor.CREATOR.createFromParcel(data) : null;
boolean res=dumpHeap(process,userId,managed,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case START_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent[] intents=data.createTypedArray(Intent.CREATOR);
String[] resolvedTypes=data.createStringArray();
IBinder resultTo=data.readStrongBinder();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivities(app,callingPackage,intents,resolvedTypes,resultTo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=getFrontActivityScreenCompatMode();
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=data.readInt();
setFrontActivityScreenCompatMode(mode);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case GET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=getPackageScreenCompatMode(pkg);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=data.readInt();
setPackageScreenCompatMode(pkg,mode);
reply.writeNoException();
return true;
}
case SWITCH_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=switchUser(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_USER_IN_BACKGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=startUserInBackground(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case STOP_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
IStopUserCallback callback=IStopUserCallback.Stub.asInterface(data.readStrongBinder());
int result=stopUser(userid,callback);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_CURRENT_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
UserInfo userInfo=getCurrentUser();
reply.writeNoException();
userInfo.writeToParcel(reply,0);
return true;
}
case IS_USER_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean orStopping=data.readInt() != 0;
boolean result=isUserRunning(userid,orStopping);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case GET_RUNNING_USER_IDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] result=getRunningUserIds();
reply.writeNoException();
reply.writeIntArray(result);
return true;
}
case REMOVE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean result=removeTask(taskId);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case REGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
registerProcessObserver(observer);
return true;
}
case UNREGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
unregisterProcessObserver(observer);
return true;
}
case GET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=getPackageAskScreenCompat(pkg);
reply.writeNoException();
reply.writeInt(ask ? 1 : 0);
return true;
}
case SET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=data.readInt() != 0;
setPackageAskScreenCompat(pkg,ask);
reply.writeNoException();
return true;
}
case IS_INTENT_SENDER_TARGETED_TO_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderTargetedToPackage(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case IS_INTENT_SENDER_AN_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderAnActivity(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_INTENT_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
Intent intent=getIntentForIntentSender(r);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_TAG_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String prefix=data.readString();
String tag=getTagForIntentSender(r,prefix);
reply.writeNoException();
reply.writeString(tag);
return true;
}
case UPDATE_PERSISTENT_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updatePersistentConfiguration(config);
reply.writeNoException();
return true;
}
case GET_PROCESS_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
long[] pss=getProcessPss(pids);
reply.writeNoException();
reply.writeLongArray(pss);
return true;
}
case SHOW_BOOT_MESSAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
CharSequence msg=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
boolean always=data.readInt() != 0;
showBootMessage(msg,always);
reply.writeNoException();
return true;
}
case KEYGUARD_WAITING_FOR_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
keyguardWaitingForActivityDrawn();
reply.writeNoException();
return true;
}
case SHOULD_UP_RECREATE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String destAffinity=data.readString();
boolean res=shouldUpRecreateTask(token,destAffinity);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case NAVIGATE_UP_TO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent target=Intent.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
Intent resultData=null;
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean res=navigateUpTo(token,target,resultCode,resultData);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_LAUNCHED_FROM_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int res=getLaunchedFromUid(token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_LAUNCHED_FROM_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=getLaunchedFromPackage(token);
reply.writeNoException();
reply.writeString(res);
return true;
}
case REGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
registerUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case UNREGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
unregisterUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case REQUEST_BUG_REPORT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
requestBugReport();
reply.writeNoException();
return true;
}
case INPUT_DISPATCHING_TIMED_OUT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int pid=data.readInt();
boolean aboveSystem=data.readInt() != 0;
String reason=data.readString();
long res=inputDispatchingTimedOut(pid,aboveSystem,reason);
reply.writeNoException();
reply.writeLong(res);
return true;
}
case GET_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int requestType=data.readInt();
Bundle res=getAssistContextExtras(requestType);
reply.writeNoException();
reply.writeBundle(res);
return true;
}
case REPORT_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle extras=data.readBundle();
reportAssistContextExtras(token,extras);
reply.writeNoException();
return true;
}
case LAUNCH_ASSIST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
int requestType=data.readInt();
String hint=data.readString();
int userHandle=data.readInt();
boolean res=launchAssistIntent(intent,requestType,hint,userHandle);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
String reason=data.readString();
killUid(uid,reason);
reply.writeNoException();
return true;
}
case HANG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
boolean allowRestart=data.readInt() != 0;
hang(who,allowRestart);
reply.writeNoException();
return true;
}
case REPORT_ACTIVITY_FULLY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reportActivityFullyDrawn(token);
reply.writeNoException();
return true;
}
case NOTIFY_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyActivityDrawn(token);
reply.writeNoException();
return true;
}
case RESTART_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
restart();
reply.writeNoException();
return true;
}
case PERFORM_IDLE_MAINTENANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
performIdleMaintenance();
reply.writeNoException();
return true;
}
case CREATE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder parentActivityToken=data.readStrongBinder();
IActivityContainerCallback callback=IActivityContainerCallback.Stub.asInterface(data.readStrongBinder());
IActivityContainer activityContainer=createActivityContainer(parentActivityToken,callback);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case DELETE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityContainer activityContainer=IActivityContainer.Stub.asInterface(data.readStrongBinder());
deleteActivityContainer(activityContainer);
reply.writeNoException();
return true;
}
case GET_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
IActivityContainer activityContainer=getEnclosingActivityContainer(activityToken);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_HOME_ACTIVITY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder homeActivityToken=getHomeActivityToken();
reply.writeNoException();
reply.writeStrongBinder(homeActivityToken);
return true;
}
case START_LOCK_TASK_BY_TASK_ID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final int taskId=data.readInt();
startLockTaskMode(taskId);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
startLockTaskMode(token);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
startLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskMode();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case IS_IN_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean isInLockTaskMode=isInLockTaskMode();
reply.writeNoException();
reply.writeInt(isInLockTaskMode ? 1 : 0);
return true;
}
case SET_TASK_DESCRIPTION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ActivityManager.TaskDescription values=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
setTaskDescription(token,values);
reply.writeNoException();
return true;
}
case GET_TASK_DESCRIPTION_ICON_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String filename=data.readString();
Bitmap icon=getTaskDescriptionIcon(filename);
reply.writeNoException();
if (icon == null) {
reply.writeInt(0);
}
 else {
reply.writeInt(1);
icon.writeToParcel(reply,0);
}
return true;
}
case START_IN_PLACE_ANIMATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
startInPlaceAnimationOnFrontMostApplication(options);
reply.writeNoException();
return true;
}
case REQUEST_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean enable=data.readInt() > 0;
boolean success=requestVisibleBehind(token,enable);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case IS_BACKGROUND_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean enabled=isBackgroundVisibleBehind(token);
reply.writeNoException();
reply.writeInt(enabled ? 1 : 0);
return true;
}
case BACKGROUND_RESOURCES_RELEASED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
backgroundResourcesReleased(token);
reply.writeNoException();
return true;
}
case NOTIFY_LAUNCH_TASK_BEHIND_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyLaunchTaskBehindComplete(token);
reply.writeNoException();
return true;
}
case NOTIFY_ENTER_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyEnterAnimationComplete(token);
reply.writeNoException();
return true;
}
case BOOT_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
bootAnimationComplete();
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}",0.9969574588945692
195930,"public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId) throws RemoteException {
  Parcel data=Parcel.obtain();
  Parcel reply=Parcel.obtain();
  data.writeInterfaceToken(IActivityManager.descriptor);
  uri.writeToParcel(data,0);
  data.writeInt(pid);
  data.writeInt(uid);
  data.writeInt(mode);
  data.writeInt(userId);
  mRemote.transact(CHECK_URI_PERMISSION_TRANSACTION,data,reply,0);
  reply.readException();
  int res=reply.readInt();
  data.recycle();
  reply.recycle();
  return res;
}","public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId,IBinder callerToken) throws RemoteException {
  Parcel data=Parcel.obtain();
  Parcel reply=Parcel.obtain();
  data.writeInterfaceToken(IActivityManager.descriptor);
  uri.writeToParcel(data,0);
  data.writeInt(pid);
  data.writeInt(uid);
  data.writeInt(mode);
  data.writeInt(userId);
  data.writeStrongBinder(callerToken);
  mRemote.transact(CHECK_URI_PERMISSION_TRANSACTION,data,reply,0);
  reply.readException();
  int res=reply.readInt();
  data.recycle();
  reply.recycle();
  return res;
}",0.9455216989843028
195931,"@Override public int checkPermission(String permission,int pid,int uid){
  if (permission == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return ActivityManagerNative.getDefault().checkPermission(permission,pid,uid);
  }
 catch (  RemoteException e) {
    return PackageManager.PERMISSION_DENIED;
  }
}","/** 
 * @hide 
 */
@Override public int checkPermission(String permission,int pid,int uid,IBinder callerToken){
  if (permission == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return ActivityManagerNative.getDefault().checkPermissionWithToken(permission,pid,uid,callerToken);
  }
 catch (  RemoteException e) {
    return PackageManager.PERMISSION_DENIED;
  }
}",0.8675675675675676
195932,"public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId) throws RemoteException ;","public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId,IBinder callerToken) throws RemoteException ;",0.908256880733945
195933,"@Override public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      String callingPackage=data.readString();
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      int startFlags=data.readInt();
      ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
      Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
      int result=startActivity(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_ACTIVITY_AS_USER_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder b=data.readStrongBinder();
    IApplicationThread app=ApplicationThreadNative.asInterface(b);
    String callingPackage=data.readString();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    String resolvedType=data.readString();
    IBinder resultTo=data.readStrongBinder();
    String resultWho=data.readString();
    int requestCode=data.readInt();
    int startFlags=data.readInt();
    ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
    Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
    int userId=data.readInt();
    int result=startActivityAsUser(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
    reply.writeNoException();
    reply.writeInt(result);
    return true;
  }
case START_ACTIVITY_AS_CALLER_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder b=data.readStrongBinder();
  IApplicationThread app=ApplicationThreadNative.asInterface(b);
  String callingPackage=data.readString();
  Intent intent=Intent.CREATOR.createFromParcel(data);
  String resolvedType=data.readString();
  IBinder resultTo=data.readStrongBinder();
  String resultWho=data.readString();
  int requestCode=data.readInt();
  int startFlags=data.readInt();
  ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
  Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
  int userId=data.readInt();
  int result=startActivityAsCaller(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
  reply.writeNoException();
  reply.writeInt(result);
  return true;
}
case START_ACTIVITY_AND_WAIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
WaitResult result=startActivityAndWait(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
reply.writeNoException();
result.writeToParcel(reply,0);
return true;
}
case START_ACTIVITY_WITH_CONFIG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
Configuration config=Configuration.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivityWithConfig(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,config,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_ACTIVITY_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IntentSender intent=IntentSender.CREATOR.createFromParcel(data);
Intent fillInIntent=null;
if (data.readInt() != 0) {
fillInIntent=Intent.CREATOR.createFromParcel(data);
}
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int flagsMask=data.readInt();
int flagsValues=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int result=startActivityIntentSender(app,intent,fillInIntent,resolvedType,resultTo,resultWho,requestCode,flagsMask,flagsValues,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_VOICE_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
int callingPid=data.readInt();
int callingUid=data.readInt();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
IVoiceInteractor interactor=IVoiceInteractor.Stub.asInterface(data.readStrongBinder());
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startVoiceActivity(callingPackage,callingPid,callingUid,intent,resolvedType,session,interactor,startFlags,profilerInfo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder callingActivity=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
boolean result=startNextMatchingActivity(callingActivity,intent,options);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_ACTIVITY_FROM_RECENTS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
Bundle options=data.readInt() == 0 ? null : Bundle.CREATOR.createFromParcel(data);
int result=startActivityFromRecents(taskId,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent resultData=null;
int resultCode=data.readInt();
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean finishTask=(data.readInt() != 0);
boolean res=finishActivity(token,resultCode,resultData,finishTask);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case FINISH_ACTIVITY_AFFINITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=finishActivityAffinity(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_VOICE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
finishVoiceTask(session);
reply.writeNoException();
return true;
}
case RELEASE_ACTIVITY_INSTANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=releaseActivityInstance(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case RELEASE_SOME_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
releaseSomeActivities(app);
reply.writeNoException();
return true;
}
case WILL_ACTIVITY_BE_VISIBLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=willActivityBeVisible(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
String packageName=data.readString();
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
int userId=data.readInt();
Intent intent=registerReceiver(app,packageName,rec,filter,perm,userId);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
int appOp=data.readInt();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int userId=data.readInt();
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,appOp,serialized,sticky,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
int userId=data.readInt();
unbroadcastIntent(app,intent,userId);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Configuration config=null;
if (data.readInt() != 0) {
config=Configuration.CREATOR.createFromParcel(data);
}
boolean stopProfiling=data.readInt() != 0;
if (token != null) {
activityIdle(token,config,stopProfiling);
}
reply.writeNoException();
return true;
}
case ACTIVITY_RESUMED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityResumed(token);
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityPaused(token);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
PersistableBundle persistentState=data.readPersistableBundle();
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,map,persistentState,description);
reply.writeNoException();
return true;
}
case ACTIVITY_SLEPT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activitySlept(token);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_APP_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
List<IAppTask> list=getAppTasks(callingPackage);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
IAppTask task=list.get(i);
reply.writeStrongBinder(task.asBinder());
}
return true;
}
case ADD_APP_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
ActivityManager.TaskDescription descr=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
Bitmap thumbnail=Bitmap.CREATOR.createFromParcel(data);
int res=addAppTask(activityToken,intent,descr,thumbnail);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_APP_TASK_THUMBNAIL_SIZE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Point size=getAppTaskThumbnailSize();
reply.writeNoException();
size.writeToParcel(reply,0);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningTaskInfo> list=getTasks(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
int userId=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl,userId);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_TASK_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int id=data.readInt();
ActivityManager.TaskThumbnail taskThumbnail=getTaskThumbnail(id);
reply.writeNoException();
if (taskThumbnail != null) {
reply.writeInt(1);
taskThumbnail.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningServiceInfo> list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ApplicationInfo> list=getRunningExternalApplications();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
moveTaskToFront(task,fl,options);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
int stackId=data.readInt();
boolean toTop=data.readInt() != 0;
moveTaskToStack(taskId,stackId,toTop);
reply.writeNoException();
return true;
}
case RESIZE_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
float weight=data.readFloat();
Rect r=Rect.CREATOR.createFromParcel(data);
resizeStack(stackId,r);
reply.writeNoException();
return true;
}
case GET_ALL_STACK_INFOS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<StackInfo> list=getAllStackInfos();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_STACK_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
StackInfo info=getStackInfo(stackId);
reply.writeNoException();
if (info != null) {
reply.writeInt(1);
info.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case IS_IN_HOME_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean isInHomeStack=isInHomeStack(taskId);
reply.writeNoException();
reply.writeInt(isInHomeStack ? 1 : 0);
return true;
}
case SET_FOCUSED_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
setFocusedStack(stackId);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
int userId=data.readInt();
boolean stable=data.readInt() != 0;
ContentProviderHolder cph=getContentProvider(app,name,userId,stable);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
int userId=data.readInt();
IBinder token=data.readStrongBinder();
ContentProviderHolder cph=getContentProviderExternal(name,userId,token);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REF_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
int stable=data.readInt();
int unstable=data.readInt();
boolean res=refContentProvider(b,stable,unstable);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case UNSTABLE_PROVIDER_DIED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
unstableProviderDied(b);
reply.writeNoException();
return true;
}
case APP_NOT_RESPONDING_VIA_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
appNotRespondingViaProvider(b);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
boolean stable=data.readInt() != 0;
removeContentProvider(b,stable);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder token=data.readStrongBinder();
removeContentProviderExternal(name,token);
reply.writeNoException();
return true;
}
case GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName comp=ComponentName.CREATOR.createFromParcel(data);
PendingIntent pi=getRunningServiceControlPanel(comp);
reply.writeNoException();
PendingIntent.writePendingIntentOrNullToParcel(pi,reply);
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
ComponentName cn=startService(app,service,resolvedType,userId);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
int res=stopService(app,service,resolvedType,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int id=data.readInt();
Notification notification=null;
if (data.readInt() != 0) {
notification=Notification.CREATOR.createFromParcel(data);
}
boolean removeNotification=data.readInt() != 0;
setServiceForeground(className,token,id,notification,removeNotification);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
int userId=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int type=data.readInt();
int startId=data.readInt();
int res=data.readInt();
serviceDoneExecuting(token,type,startId,res);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
b=data.readStrongBinder();
IUiAutomationConnection c=IUiAutomationConnection.Stub.asInterface(b);
int userId=data.readInt();
String abiOverride=data.readString();
boolean res=startInstrumentation(className,profileFile,fl,arguments,w,c,userId,abiOverride);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent[] requestIntents;
String[] requestResolvedTypes;
if (data.readInt() != 0) {
requestIntents=data.createTypedArray(Intent.CREATOR);
requestResolvedTypes=data.createStringArray();
}
 else {
requestIntents=null;
requestResolvedTypes=null;
}
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntents,requestResolvedTypes,fl,options,userId);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_UID_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
int res=getUidForIntentSender(r);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case HANDLE_INCOMING_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingPid=data.readInt();
int callingUid=data.readInt();
int userId=data.readInt();
boolean allowAll=data.readInt() != 0;
boolean requireFull=data.readInt() != 0;
String name=data.readString();
String callerPackage=data.readString();
int res=handleIncomingUser(callingPid,callingUid,userId,allowAll,requireFull,name,callerPackage);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int userId=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
int userId=data.readInt();
boolean res=clearApplicationUserData(packageName,observer,userId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
grantUriPermission(app,targetPkg,uri,mode,userId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermission(app,uri,mode,userId);
reply.writeNoException();
return true;
}
case TAKE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
takePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case RELEASE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
releasePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case GET_PERSISTED_URI_PERMISSIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final String packageName=data.readString();
final boolean incoming=data.readInt() != 0;
final ParceledListSlice<UriPermission> perms=getPersistedUriPermissions(packageName,incoming);
reply.writeNoException();
perms.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case SET_LOCK_SCREEN_SHOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
setLockScreenShown(data.readInt() != 0);
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_CONTROLLER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityController watcher=IActivityController.Stub.asInterface(data.readStrongBinder());
setActivityController(watcher);
reply.writeNoException();
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
int sourceUid=data.readInt();
String sourcePkg=data.readString();
noteWakeupAlarm(is,sourceUid,sourcePkg);
reply.writeNoException();
return true;
}
case KILL_PIDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
String reason=data.readString();
boolean secure=data.readInt() != 0;
boolean res=killPids(pids,reason,secure);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_PROCESSES_BELOW_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
boolean res=killProcessesBelowForeground(reason);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_CRASH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
handleApplicationCrash(app,ci);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_WTF_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
String tag=data.readString();
boolean system=data.readInt() != 0;
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
boolean res=handleApplicationWtf(app,tag,system,ci);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int violationMask=data.readInt();
StrictMode.ViolationInfo info=new StrictMode.ViolationInfo(data);
handleApplicationStrictModeViolation(app,violationMask,info);
reply.writeNoException();
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case KILL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
killBackgroundProcesses(packageName,userId);
reply.writeNoException();
return true;
}
case KILL_ALL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
killAllBackgroundProcesses();
reply.writeNoException();
return true;
}
case FORCE_STOP_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
forceStopPackage(packageName,userId);
reply.writeNoException();
return true;
}
case GET_MY_MEMORY_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.RunningAppProcessInfo info=new ActivityManager.RunningAppProcessInfo();
getMyMemoryState(info);
reply.writeNoException();
info.writeToParcel(reply,0);
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean start=data.readInt() != 0;
int profileType=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
boolean res=profileControl(process,userId,start,profilerInfo,profileType);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
case ADD_PACKAGE_DEPENDENCY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
addPackageDependency(packageName);
reply.writeNoException();
return true;
}
case KILL_APPLICATION_WITH_APPID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int appid=data.readInt();
String reason=data.readString();
killApplicationWithAppId(pkg,appid,reason);
reply.writeNoException();
return true;
}
case CLOSE_SYSTEM_DIALOGS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
closeSystemDialogs(reason);
reply.writeNoException();
return true;
}
case GET_PROCESS_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
Debug.MemoryInfo[] res=getProcessMemoryInfo(pids);
reply.writeNoException();
reply.writeTypedArray(res,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case KILL_APPLICATION_PROCESS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String processName=data.readString();
int uid=data.readInt();
killApplicationProcess(processName,uid);
reply.writeNoException();
return true;
}
case OVERRIDE_PENDING_TRANSITION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String packageName=data.readString();
int enterAnim=data.readInt();
int exitAnim=data.readInt();
overridePendingTransition(token,packageName,enterAnim,exitAnim);
reply.writeNoException();
return true;
}
case IS_USER_A_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean areThey=isUserAMonkey();
reply.writeNoException();
reply.writeInt(areThey ? 1 : 0);
return true;
}
case SET_USER_IS_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean monkey=(data.readInt() == 1);
setUserIsMonkey(monkey);
reply.writeNoException();
return true;
}
case FINISH_HEAVY_WEIGHT_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
finishHeavyWeightApp();
reply.writeNoException();
return true;
}
case IS_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isit=isImmersive(token);
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case IS_TOP_OF_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean isTopOfTask=isTopOfTask(token);
reply.writeNoException();
reply.writeInt(isTopOfTask ? 1 : 0);
return true;
}
case CONVERT_FROM_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean converted=convertFromTranslucent(token);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case CONVERT_TO_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
boolean converted=convertToTranslucent(token,options);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case GET_ACTIVITY_OPTIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final ActivityOptions options=getActivityOptions(token);
reply.writeNoException();
reply.writeBundle(options == null ? null : options.toBundle());
return true;
}
case SET_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean imm=data.readInt() == 1;
setImmersive(token,imm);
reply.writeNoException();
return true;
}
case IS_TOP_ACTIVITY_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean isit=isTopActivityImmersive();
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case CRASH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
int initialPid=data.readInt();
String packageName=data.readString();
String message=data.readString();
crashApplication(uid,initialPid,packageName,message);
reply.writeNoException();
return true;
}
case GET_PROVIDER_MIME_TYPE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int userId=data.readInt();
String type=getProviderMimeType(uri,userId);
reply.writeNoException();
reply.writeString(type);
return true;
}
case NEW_URI_PERMISSION_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder perm=newUriPermissionOwner(name);
reply.writeNoException();
reply.writeStrongBinder(perm);
return true;
}
case GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
int fromUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int sourceUserId=data.readInt();
int targetUserId=data.readInt();
grantUriPermissionFromOwner(owner,fromUid,targetPkg,uri,mode,sourceUserId,targetUserId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
Uri uri=null;
if (data.readInt() != 0) {
uri=Uri.CREATOR.createFromParcel(data);
}
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermissionFromOwner(owner,uri,mode,userId);
reply.writeNoException();
return true;
}
case CHECK_GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int modeFlags=data.readInt();
int userId=data.readInt();
int res=checkGrantUriPermission(callingUid,targetPkg,uri,modeFlags,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case DUMP_HEAP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean managed=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? ParcelFileDescriptor.CREATOR.createFromParcel(data) : null;
boolean res=dumpHeap(process,userId,managed,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case START_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent[] intents=data.createTypedArray(Intent.CREATOR);
String[] resolvedTypes=data.createStringArray();
IBinder resultTo=data.readStrongBinder();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivities(app,callingPackage,intents,resolvedTypes,resultTo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=getFrontActivityScreenCompatMode();
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=data.readInt();
setFrontActivityScreenCompatMode(mode);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case GET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=getPackageScreenCompatMode(pkg);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=data.readInt();
setPackageScreenCompatMode(pkg,mode);
reply.writeNoException();
return true;
}
case SWITCH_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=switchUser(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_USER_IN_BACKGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=startUserInBackground(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case STOP_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
IStopUserCallback callback=IStopUserCallback.Stub.asInterface(data.readStrongBinder());
int result=stopUser(userid,callback);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_CURRENT_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
UserInfo userInfo=getCurrentUser();
reply.writeNoException();
userInfo.writeToParcel(reply,0);
return true;
}
case IS_USER_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean orStopping=data.readInt() != 0;
boolean result=isUserRunning(userid,orStopping);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case GET_RUNNING_USER_IDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] result=getRunningUserIds();
reply.writeNoException();
reply.writeIntArray(result);
return true;
}
case REMOVE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean result=removeTask(taskId);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case REGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
registerProcessObserver(observer);
return true;
}
case UNREGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
unregisterProcessObserver(observer);
return true;
}
case GET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=getPackageAskScreenCompat(pkg);
reply.writeNoException();
reply.writeInt(ask ? 1 : 0);
return true;
}
case SET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=data.readInt() != 0;
setPackageAskScreenCompat(pkg,ask);
reply.writeNoException();
return true;
}
case IS_INTENT_SENDER_TARGETED_TO_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderTargetedToPackage(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case IS_INTENT_SENDER_AN_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderAnActivity(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_INTENT_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
Intent intent=getIntentForIntentSender(r);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_TAG_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String prefix=data.readString();
String tag=getTagForIntentSender(r,prefix);
reply.writeNoException();
reply.writeString(tag);
return true;
}
case UPDATE_PERSISTENT_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updatePersistentConfiguration(config);
reply.writeNoException();
return true;
}
case GET_PROCESS_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
long[] pss=getProcessPss(pids);
reply.writeNoException();
reply.writeLongArray(pss);
return true;
}
case SHOW_BOOT_MESSAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
CharSequence msg=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
boolean always=data.readInt() != 0;
showBootMessage(msg,always);
reply.writeNoException();
return true;
}
case KEYGUARD_WAITING_FOR_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
keyguardWaitingForActivityDrawn();
reply.writeNoException();
return true;
}
case SHOULD_UP_RECREATE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String destAffinity=data.readString();
boolean res=shouldUpRecreateTask(token,destAffinity);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case NAVIGATE_UP_TO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent target=Intent.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
Intent resultData=null;
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean res=navigateUpTo(token,target,resultCode,resultData);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_LAUNCHED_FROM_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int res=getLaunchedFromUid(token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_LAUNCHED_FROM_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=getLaunchedFromPackage(token);
reply.writeNoException();
reply.writeString(res);
return true;
}
case REGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
registerUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case UNREGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
unregisterUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case REQUEST_BUG_REPORT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
requestBugReport();
reply.writeNoException();
return true;
}
case INPUT_DISPATCHING_TIMED_OUT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int pid=data.readInt();
boolean aboveSystem=data.readInt() != 0;
String reason=data.readString();
long res=inputDispatchingTimedOut(pid,aboveSystem,reason);
reply.writeNoException();
reply.writeLong(res);
return true;
}
case GET_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int requestType=data.readInt();
Bundle res=getAssistContextExtras(requestType);
reply.writeNoException();
reply.writeBundle(res);
return true;
}
case REPORT_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle extras=data.readBundle();
reportAssistContextExtras(token,extras);
reply.writeNoException();
return true;
}
case LAUNCH_ASSIST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
int requestType=data.readInt();
String hint=data.readString();
int userHandle=data.readInt();
boolean res=launchAssistIntent(intent,requestType,hint,userHandle);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
String reason=data.readString();
killUid(uid,reason);
reply.writeNoException();
return true;
}
case HANG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
boolean allowRestart=data.readInt() != 0;
hang(who,allowRestart);
reply.writeNoException();
return true;
}
case REPORT_ACTIVITY_FULLY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reportActivityFullyDrawn(token);
reply.writeNoException();
return true;
}
case NOTIFY_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyActivityDrawn(token);
reply.writeNoException();
return true;
}
case RESTART_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
restart();
reply.writeNoException();
return true;
}
case PERFORM_IDLE_MAINTENANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
performIdleMaintenance();
reply.writeNoException();
return true;
}
case CREATE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder parentActivityToken=data.readStrongBinder();
IActivityContainerCallback callback=IActivityContainerCallback.Stub.asInterface(data.readStrongBinder());
IActivityContainer activityContainer=createActivityContainer(parentActivityToken,callback);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case DELETE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityContainer activityContainer=IActivityContainer.Stub.asInterface(data.readStrongBinder());
deleteActivityContainer(activityContainer);
reply.writeNoException();
return true;
}
case GET_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
IActivityContainer activityContainer=getEnclosingActivityContainer(activityToken);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_HOME_ACTIVITY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder homeActivityToken=getHomeActivityToken();
reply.writeNoException();
reply.writeStrongBinder(homeActivityToken);
return true;
}
case START_LOCK_TASK_BY_TASK_ID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final int taskId=data.readInt();
startLockTaskMode(taskId);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
startLockTaskMode(token);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
startLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskMode();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case IS_IN_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean isInLockTaskMode=isInLockTaskMode();
reply.writeNoException();
reply.writeInt(isInLockTaskMode ? 1 : 0);
return true;
}
case SET_TASK_DESCRIPTION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ActivityManager.TaskDescription values=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
setTaskDescription(token,values);
reply.writeNoException();
return true;
}
case GET_TASK_DESCRIPTION_ICON_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String filename=data.readString();
Bitmap icon=getTaskDescriptionIcon(filename);
reply.writeNoException();
if (icon == null) {
reply.writeInt(0);
}
 else {
reply.writeInt(1);
icon.writeToParcel(reply,0);
}
return true;
}
case START_IN_PLACE_ANIMATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
startInPlaceAnimationOnFrontMostApplication(options);
reply.writeNoException();
return true;
}
case REQUEST_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean enable=data.readInt() > 0;
boolean success=requestVisibleBehind(token,enable);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case IS_BACKGROUND_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean enabled=isBackgroundVisibleBehind(token);
reply.writeNoException();
reply.writeInt(enabled ? 1 : 0);
return true;
}
case BACKGROUND_RESOURCES_RELEASED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
backgroundResourcesReleased(token);
reply.writeNoException();
return true;
}
case NOTIFY_LAUNCH_TASK_BEHIND_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyLaunchTaskBehindComplete(token);
reply.writeNoException();
return true;
}
case NOTIFY_ENTER_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyEnterAnimationComplete(token);
reply.writeNoException();
return true;
}
case BOOT_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
bootAnimationComplete();
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}","@Override public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      String callingPackage=data.readString();
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      int startFlags=data.readInt();
      ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
      Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
      int result=startActivity(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_ACTIVITY_AS_USER_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder b=data.readStrongBinder();
    IApplicationThread app=ApplicationThreadNative.asInterface(b);
    String callingPackage=data.readString();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    String resolvedType=data.readString();
    IBinder resultTo=data.readStrongBinder();
    String resultWho=data.readString();
    int requestCode=data.readInt();
    int startFlags=data.readInt();
    ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
    Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
    int userId=data.readInt();
    int result=startActivityAsUser(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
    reply.writeNoException();
    reply.writeInt(result);
    return true;
  }
case START_ACTIVITY_AS_CALLER_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder b=data.readStrongBinder();
  IApplicationThread app=ApplicationThreadNative.asInterface(b);
  String callingPackage=data.readString();
  Intent intent=Intent.CREATOR.createFromParcel(data);
  String resolvedType=data.readString();
  IBinder resultTo=data.readStrongBinder();
  String resultWho=data.readString();
  int requestCode=data.readInt();
  int startFlags=data.readInt();
  ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
  Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
  int userId=data.readInt();
  int result=startActivityAsCaller(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
  reply.writeNoException();
  reply.writeInt(result);
  return true;
}
case START_ACTIVITY_AND_WAIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
WaitResult result=startActivityAndWait(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
reply.writeNoException();
result.writeToParcel(reply,0);
return true;
}
case START_ACTIVITY_WITH_CONFIG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
Configuration config=Configuration.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivityWithConfig(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,config,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_ACTIVITY_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IntentSender intent=IntentSender.CREATOR.createFromParcel(data);
Intent fillInIntent=null;
if (data.readInt() != 0) {
fillInIntent=Intent.CREATOR.createFromParcel(data);
}
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int flagsMask=data.readInt();
int flagsValues=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int result=startActivityIntentSender(app,intent,fillInIntent,resolvedType,resultTo,resultWho,requestCode,flagsMask,flagsValues,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_VOICE_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
int callingPid=data.readInt();
int callingUid=data.readInt();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
IVoiceInteractor interactor=IVoiceInteractor.Stub.asInterface(data.readStrongBinder());
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startVoiceActivity(callingPackage,callingPid,callingUid,intent,resolvedType,session,interactor,startFlags,profilerInfo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder callingActivity=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
boolean result=startNextMatchingActivity(callingActivity,intent,options);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_ACTIVITY_FROM_RECENTS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
Bundle options=data.readInt() == 0 ? null : Bundle.CREATOR.createFromParcel(data);
int result=startActivityFromRecents(taskId,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent resultData=null;
int resultCode=data.readInt();
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean finishTask=(data.readInt() != 0);
boolean res=finishActivity(token,resultCode,resultData,finishTask);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case FINISH_ACTIVITY_AFFINITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=finishActivityAffinity(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_VOICE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
finishVoiceTask(session);
reply.writeNoException();
return true;
}
case RELEASE_ACTIVITY_INSTANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=releaseActivityInstance(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case RELEASE_SOME_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
releaseSomeActivities(app);
reply.writeNoException();
return true;
}
case WILL_ACTIVITY_BE_VISIBLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=willActivityBeVisible(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
String packageName=data.readString();
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
int userId=data.readInt();
Intent intent=registerReceiver(app,packageName,rec,filter,perm,userId);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
int appOp=data.readInt();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int userId=data.readInt();
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,appOp,serialized,sticky,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
int userId=data.readInt();
unbroadcastIntent(app,intent,userId);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Configuration config=null;
if (data.readInt() != 0) {
config=Configuration.CREATOR.createFromParcel(data);
}
boolean stopProfiling=data.readInt() != 0;
if (token != null) {
activityIdle(token,config,stopProfiling);
}
reply.writeNoException();
return true;
}
case ACTIVITY_RESUMED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityResumed(token);
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityPaused(token);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
PersistableBundle persistentState=data.readPersistableBundle();
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,map,persistentState,description);
reply.writeNoException();
return true;
}
case ACTIVITY_SLEPT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activitySlept(token);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_APP_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
List<IAppTask> list=getAppTasks(callingPackage);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
IAppTask task=list.get(i);
reply.writeStrongBinder(task.asBinder());
}
return true;
}
case ADD_APP_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
ActivityManager.TaskDescription descr=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
Bitmap thumbnail=Bitmap.CREATOR.createFromParcel(data);
int res=addAppTask(activityToken,intent,descr,thumbnail);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_APP_TASK_THUMBNAIL_SIZE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Point size=getAppTaskThumbnailSize();
reply.writeNoException();
size.writeToParcel(reply,0);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningTaskInfo> list=getTasks(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
int userId=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl,userId);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_TASK_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int id=data.readInt();
ActivityManager.TaskThumbnail taskThumbnail=getTaskThumbnail(id);
reply.writeNoException();
if (taskThumbnail != null) {
reply.writeInt(1);
taskThumbnail.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningServiceInfo> list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ApplicationInfo> list=getRunningExternalApplications();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
moveTaskToFront(task,fl,options);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
int stackId=data.readInt();
boolean toTop=data.readInt() != 0;
moveTaskToStack(taskId,stackId,toTop);
reply.writeNoException();
return true;
}
case RESIZE_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
float weight=data.readFloat();
Rect r=Rect.CREATOR.createFromParcel(data);
resizeStack(stackId,r);
reply.writeNoException();
return true;
}
case GET_ALL_STACK_INFOS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<StackInfo> list=getAllStackInfos();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_STACK_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
StackInfo info=getStackInfo(stackId);
reply.writeNoException();
if (info != null) {
reply.writeInt(1);
info.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case IS_IN_HOME_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean isInHomeStack=isInHomeStack(taskId);
reply.writeNoException();
reply.writeInt(isInHomeStack ? 1 : 0);
return true;
}
case SET_FOCUSED_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
setFocusedStack(stackId);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
int userId=data.readInt();
boolean stable=data.readInt() != 0;
ContentProviderHolder cph=getContentProvider(app,name,userId,stable);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
int userId=data.readInt();
IBinder token=data.readStrongBinder();
ContentProviderHolder cph=getContentProviderExternal(name,userId,token);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REF_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
int stable=data.readInt();
int unstable=data.readInt();
boolean res=refContentProvider(b,stable,unstable);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case UNSTABLE_PROVIDER_DIED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
unstableProviderDied(b);
reply.writeNoException();
return true;
}
case APP_NOT_RESPONDING_VIA_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
appNotRespondingViaProvider(b);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
boolean stable=data.readInt() != 0;
removeContentProvider(b,stable);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder token=data.readStrongBinder();
removeContentProviderExternal(name,token);
reply.writeNoException();
return true;
}
case GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName comp=ComponentName.CREATOR.createFromParcel(data);
PendingIntent pi=getRunningServiceControlPanel(comp);
reply.writeNoException();
PendingIntent.writePendingIntentOrNullToParcel(pi,reply);
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
ComponentName cn=startService(app,service,resolvedType,userId);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
int res=stopService(app,service,resolvedType,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int id=data.readInt();
Notification notification=null;
if (data.readInt() != 0) {
notification=Notification.CREATOR.createFromParcel(data);
}
boolean removeNotification=data.readInt() != 0;
setServiceForeground(className,token,id,notification,removeNotification);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
int userId=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int type=data.readInt();
int startId=data.readInt();
int res=data.readInt();
serviceDoneExecuting(token,type,startId,res);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
b=data.readStrongBinder();
IUiAutomationConnection c=IUiAutomationConnection.Stub.asInterface(b);
int userId=data.readInt();
String abiOverride=data.readString();
boolean res=startInstrumentation(className,profileFile,fl,arguments,w,c,userId,abiOverride);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent[] requestIntents;
String[] requestResolvedTypes;
if (data.readInt() != 0) {
requestIntents=data.createTypedArray(Intent.CREATOR);
requestResolvedTypes=data.createStringArray();
}
 else {
requestIntents=null;
requestResolvedTypes=null;
}
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntents,requestResolvedTypes,fl,options,userId);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_UID_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
int res=getUidForIntentSender(r);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case HANDLE_INCOMING_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingPid=data.readInt();
int callingUid=data.readInt();
int userId=data.readInt();
boolean allowAll=data.readInt() != 0;
boolean requireFull=data.readInt() != 0;
String name=data.readString();
String callerPackage=data.readString();
int res=handleIncomingUser(callingPid,callingUid,userId,allowAll,requireFull,name,callerPackage);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_PERMISSION_WITH_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
IBinder token=data.readStrongBinder();
int res=checkPermissionWithToken(perm,pid,uid,token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int userId=data.readInt();
IBinder callerToken=data.readStrongBinder();
int res=checkUriPermission(uri,pid,uid,mode,userId,callerToken);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
int userId=data.readInt();
boolean res=clearApplicationUserData(packageName,observer,userId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
grantUriPermission(app,targetPkg,uri,mode,userId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermission(app,uri,mode,userId);
reply.writeNoException();
return true;
}
case TAKE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
takePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case RELEASE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
releasePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case GET_PERSISTED_URI_PERMISSIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final String packageName=data.readString();
final boolean incoming=data.readInt() != 0;
final ParceledListSlice<UriPermission> perms=getPersistedUriPermissions(packageName,incoming);
reply.writeNoException();
perms.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case SET_LOCK_SCREEN_SHOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
setLockScreenShown(data.readInt() != 0);
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_CONTROLLER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityController watcher=IActivityController.Stub.asInterface(data.readStrongBinder());
setActivityController(watcher);
reply.writeNoException();
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
int sourceUid=data.readInt();
String sourcePkg=data.readString();
noteWakeupAlarm(is,sourceUid,sourcePkg);
reply.writeNoException();
return true;
}
case KILL_PIDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
String reason=data.readString();
boolean secure=data.readInt() != 0;
boolean res=killPids(pids,reason,secure);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_PROCESSES_BELOW_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
boolean res=killProcessesBelowForeground(reason);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_CRASH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
handleApplicationCrash(app,ci);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_WTF_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
String tag=data.readString();
boolean system=data.readInt() != 0;
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
boolean res=handleApplicationWtf(app,tag,system,ci);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int violationMask=data.readInt();
StrictMode.ViolationInfo info=new StrictMode.ViolationInfo(data);
handleApplicationStrictModeViolation(app,violationMask,info);
reply.writeNoException();
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case KILL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
killBackgroundProcesses(packageName,userId);
reply.writeNoException();
return true;
}
case KILL_ALL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
killAllBackgroundProcesses();
reply.writeNoException();
return true;
}
case FORCE_STOP_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
forceStopPackage(packageName,userId);
reply.writeNoException();
return true;
}
case GET_MY_MEMORY_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.RunningAppProcessInfo info=new ActivityManager.RunningAppProcessInfo();
getMyMemoryState(info);
reply.writeNoException();
info.writeToParcel(reply,0);
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean start=data.readInt() != 0;
int profileType=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
boolean res=profileControl(process,userId,start,profilerInfo,profileType);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
case ADD_PACKAGE_DEPENDENCY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
addPackageDependency(packageName);
reply.writeNoException();
return true;
}
case KILL_APPLICATION_WITH_APPID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int appid=data.readInt();
String reason=data.readString();
killApplicationWithAppId(pkg,appid,reason);
reply.writeNoException();
return true;
}
case CLOSE_SYSTEM_DIALOGS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
closeSystemDialogs(reason);
reply.writeNoException();
return true;
}
case GET_PROCESS_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
Debug.MemoryInfo[] res=getProcessMemoryInfo(pids);
reply.writeNoException();
reply.writeTypedArray(res,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case KILL_APPLICATION_PROCESS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String processName=data.readString();
int uid=data.readInt();
killApplicationProcess(processName,uid);
reply.writeNoException();
return true;
}
case OVERRIDE_PENDING_TRANSITION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String packageName=data.readString();
int enterAnim=data.readInt();
int exitAnim=data.readInt();
overridePendingTransition(token,packageName,enterAnim,exitAnim);
reply.writeNoException();
return true;
}
case IS_USER_A_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean areThey=isUserAMonkey();
reply.writeNoException();
reply.writeInt(areThey ? 1 : 0);
return true;
}
case SET_USER_IS_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean monkey=(data.readInt() == 1);
setUserIsMonkey(monkey);
reply.writeNoException();
return true;
}
case FINISH_HEAVY_WEIGHT_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
finishHeavyWeightApp();
reply.writeNoException();
return true;
}
case IS_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isit=isImmersive(token);
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case IS_TOP_OF_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean isTopOfTask=isTopOfTask(token);
reply.writeNoException();
reply.writeInt(isTopOfTask ? 1 : 0);
return true;
}
case CONVERT_FROM_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean converted=convertFromTranslucent(token);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case CONVERT_TO_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
boolean converted=convertToTranslucent(token,options);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case GET_ACTIVITY_OPTIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final ActivityOptions options=getActivityOptions(token);
reply.writeNoException();
reply.writeBundle(options == null ? null : options.toBundle());
return true;
}
case SET_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean imm=data.readInt() == 1;
setImmersive(token,imm);
reply.writeNoException();
return true;
}
case IS_TOP_ACTIVITY_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean isit=isTopActivityImmersive();
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case CRASH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
int initialPid=data.readInt();
String packageName=data.readString();
String message=data.readString();
crashApplication(uid,initialPid,packageName,message);
reply.writeNoException();
return true;
}
case GET_PROVIDER_MIME_TYPE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int userId=data.readInt();
String type=getProviderMimeType(uri,userId);
reply.writeNoException();
reply.writeString(type);
return true;
}
case NEW_URI_PERMISSION_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder perm=newUriPermissionOwner(name);
reply.writeNoException();
reply.writeStrongBinder(perm);
return true;
}
case GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
int fromUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int sourceUserId=data.readInt();
int targetUserId=data.readInt();
grantUriPermissionFromOwner(owner,fromUid,targetPkg,uri,mode,sourceUserId,targetUserId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
Uri uri=null;
if (data.readInt() != 0) {
uri=Uri.CREATOR.createFromParcel(data);
}
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermissionFromOwner(owner,uri,mode,userId);
reply.writeNoException();
return true;
}
case CHECK_GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int modeFlags=data.readInt();
int userId=data.readInt();
int res=checkGrantUriPermission(callingUid,targetPkg,uri,modeFlags,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case DUMP_HEAP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean managed=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? ParcelFileDescriptor.CREATOR.createFromParcel(data) : null;
boolean res=dumpHeap(process,userId,managed,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case START_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent[] intents=data.createTypedArray(Intent.CREATOR);
String[] resolvedTypes=data.createStringArray();
IBinder resultTo=data.readStrongBinder();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivities(app,callingPackage,intents,resolvedTypes,resultTo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=getFrontActivityScreenCompatMode();
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=data.readInt();
setFrontActivityScreenCompatMode(mode);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case GET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=getPackageScreenCompatMode(pkg);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=data.readInt();
setPackageScreenCompatMode(pkg,mode);
reply.writeNoException();
return true;
}
case SWITCH_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=switchUser(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_USER_IN_BACKGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=startUserInBackground(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case STOP_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
IStopUserCallback callback=IStopUserCallback.Stub.asInterface(data.readStrongBinder());
int result=stopUser(userid,callback);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_CURRENT_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
UserInfo userInfo=getCurrentUser();
reply.writeNoException();
userInfo.writeToParcel(reply,0);
return true;
}
case IS_USER_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean orStopping=data.readInt() != 0;
boolean result=isUserRunning(userid,orStopping);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case GET_RUNNING_USER_IDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] result=getRunningUserIds();
reply.writeNoException();
reply.writeIntArray(result);
return true;
}
case REMOVE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean result=removeTask(taskId);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case REGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
registerProcessObserver(observer);
return true;
}
case UNREGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
unregisterProcessObserver(observer);
return true;
}
case GET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=getPackageAskScreenCompat(pkg);
reply.writeNoException();
reply.writeInt(ask ? 1 : 0);
return true;
}
case SET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=data.readInt() != 0;
setPackageAskScreenCompat(pkg,ask);
reply.writeNoException();
return true;
}
case IS_INTENT_SENDER_TARGETED_TO_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderTargetedToPackage(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case IS_INTENT_SENDER_AN_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderAnActivity(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_INTENT_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
Intent intent=getIntentForIntentSender(r);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_TAG_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String prefix=data.readString();
String tag=getTagForIntentSender(r,prefix);
reply.writeNoException();
reply.writeString(tag);
return true;
}
case UPDATE_PERSISTENT_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updatePersistentConfiguration(config);
reply.writeNoException();
return true;
}
case GET_PROCESS_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
long[] pss=getProcessPss(pids);
reply.writeNoException();
reply.writeLongArray(pss);
return true;
}
case SHOW_BOOT_MESSAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
CharSequence msg=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
boolean always=data.readInt() != 0;
showBootMessage(msg,always);
reply.writeNoException();
return true;
}
case KEYGUARD_WAITING_FOR_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
keyguardWaitingForActivityDrawn();
reply.writeNoException();
return true;
}
case SHOULD_UP_RECREATE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String destAffinity=data.readString();
boolean res=shouldUpRecreateTask(token,destAffinity);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case NAVIGATE_UP_TO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent target=Intent.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
Intent resultData=null;
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean res=navigateUpTo(token,target,resultCode,resultData);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_LAUNCHED_FROM_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int res=getLaunchedFromUid(token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_LAUNCHED_FROM_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=getLaunchedFromPackage(token);
reply.writeNoException();
reply.writeString(res);
return true;
}
case REGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
registerUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case UNREGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
unregisterUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case REQUEST_BUG_REPORT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
requestBugReport();
reply.writeNoException();
return true;
}
case INPUT_DISPATCHING_TIMED_OUT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int pid=data.readInt();
boolean aboveSystem=data.readInt() != 0;
String reason=data.readString();
long res=inputDispatchingTimedOut(pid,aboveSystem,reason);
reply.writeNoException();
reply.writeLong(res);
return true;
}
case GET_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int requestType=data.readInt();
Bundle res=getAssistContextExtras(requestType);
reply.writeNoException();
reply.writeBundle(res);
return true;
}
case REPORT_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle extras=data.readBundle();
reportAssistContextExtras(token,extras);
reply.writeNoException();
return true;
}
case LAUNCH_ASSIST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
int requestType=data.readInt();
String hint=data.readString();
int userHandle=data.readInt();
boolean res=launchAssistIntent(intent,requestType,hint,userHandle);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
String reason=data.readString();
killUid(uid,reason);
reply.writeNoException();
return true;
}
case HANG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
boolean allowRestart=data.readInt() != 0;
hang(who,allowRestart);
reply.writeNoException();
return true;
}
case REPORT_ACTIVITY_FULLY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reportActivityFullyDrawn(token);
reply.writeNoException();
return true;
}
case NOTIFY_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyActivityDrawn(token);
reply.writeNoException();
return true;
}
case RESTART_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
restart();
reply.writeNoException();
return true;
}
case PERFORM_IDLE_MAINTENANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
performIdleMaintenance();
reply.writeNoException();
return true;
}
case CREATE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder parentActivityToken=data.readStrongBinder();
IActivityContainerCallback callback=IActivityContainerCallback.Stub.asInterface(data.readStrongBinder());
IActivityContainer activityContainer=createActivityContainer(parentActivityToken,callback);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case DELETE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityContainer activityContainer=IActivityContainer.Stub.asInterface(data.readStrongBinder());
deleteActivityContainer(activityContainer);
reply.writeNoException();
return true;
}
case GET_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
IActivityContainer activityContainer=getEnclosingActivityContainer(activityToken);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_HOME_ACTIVITY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder homeActivityToken=getHomeActivityToken();
reply.writeNoException();
reply.writeStrongBinder(homeActivityToken);
return true;
}
case START_LOCK_TASK_BY_TASK_ID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final int taskId=data.readInt();
startLockTaskMode(taskId);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
startLockTaskMode(token);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
startLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskMode();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case IS_IN_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean isInLockTaskMode=isInLockTaskMode();
reply.writeNoException();
reply.writeInt(isInLockTaskMode ? 1 : 0);
return true;
}
case SET_TASK_DESCRIPTION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ActivityManager.TaskDescription values=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
setTaskDescription(token,values);
reply.writeNoException();
return true;
}
case GET_TASK_DESCRIPTION_ICON_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String filename=data.readString();
Bitmap icon=getTaskDescriptionIcon(filename);
reply.writeNoException();
if (icon == null) {
reply.writeInt(0);
}
 else {
reply.writeInt(1);
icon.writeToParcel(reply,0);
}
return true;
}
case START_IN_PLACE_ANIMATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
startInPlaceAnimationOnFrontMostApplication(options);
reply.writeNoException();
return true;
}
case REQUEST_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean enable=data.readInt() > 0;
boolean success=requestVisibleBehind(token,enable);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case IS_BACKGROUND_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean enabled=isBackgroundVisibleBehind(token);
reply.writeNoException();
reply.writeInt(enabled ? 1 : 0);
return true;
}
case BACKGROUND_RESOURCES_RELEASED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
backgroundResourcesReleased(token);
reply.writeNoException();
return true;
}
case NOTIFY_LAUNCH_TASK_BEHIND_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyLaunchTaskBehindComplete(token);
reply.writeNoException();
return true;
}
case NOTIFY_ENTER_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyEnterAnimationComplete(token);
reply.writeNoException();
return true;
}
case BOOT_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
bootAnimationComplete();
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}",0.9969574588945692
195934,"public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId) throws RemoteException {
  Parcel data=Parcel.obtain();
  Parcel reply=Parcel.obtain();
  data.writeInterfaceToken(IActivityManager.descriptor);
  uri.writeToParcel(data,0);
  data.writeInt(pid);
  data.writeInt(uid);
  data.writeInt(mode);
  data.writeInt(userId);
  mRemote.transact(CHECK_URI_PERMISSION_TRANSACTION,data,reply,0);
  reply.readException();
  int res=reply.readInt();
  data.recycle();
  reply.recycle();
  return res;
}","public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId,IBinder callerToken) throws RemoteException {
  Parcel data=Parcel.obtain();
  Parcel reply=Parcel.obtain();
  data.writeInterfaceToken(IActivityManager.descriptor);
  uri.writeToParcel(data,0);
  data.writeInt(pid);
  data.writeInt(uid);
  data.writeInt(mode);
  data.writeInt(userId);
  data.writeStrongBinder(callerToken);
  mRemote.transact(CHECK_URI_PERMISSION_TRANSACTION,data,reply,0);
  reply.readException();
  int res=reply.readInt();
  data.recycle();
  reply.recycle();
  return res;
}",0.9455216989843028
195935,"@Override public int checkPermission(String permission,int pid,int uid){
  if (permission == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return ActivityManagerNative.getDefault().checkPermission(permission,pid,uid);
  }
 catch (  RemoteException e) {
    return PackageManager.PERMISSION_DENIED;
  }
}","/** 
 * @hide 
 */
@Override public int checkPermission(String permission,int pid,int uid,IBinder callerToken){
  if (permission == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return ActivityManagerNative.getDefault().checkPermissionWithToken(permission,pid,uid,callerToken);
  }
 catch (  RemoteException e) {
    return PackageManager.PERMISSION_DENIED;
  }
}",0.8675675675675676
195936,"public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId) throws RemoteException ;","public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId,IBinder callerToken) throws RemoteException ;",0.908256880733945
195937,"@LayoutlibDelegate static int getAmOrPmKeyCode(int amOrPm){
}","@LayoutlibDelegate static int getAmOrPmKeyCode(TimePickerSpinnerDelegate tpsd,int amOrPm){
}",0.7973856209150327
195938,"@Override public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      String callingPackage=data.readString();
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      int startFlags=data.readInt();
      ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
      Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
      int result=startActivity(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_ACTIVITY_AS_USER_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder b=data.readStrongBinder();
    IApplicationThread app=ApplicationThreadNative.asInterface(b);
    String callingPackage=data.readString();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    String resolvedType=data.readString();
    IBinder resultTo=data.readStrongBinder();
    String resultWho=data.readString();
    int requestCode=data.readInt();
    int startFlags=data.readInt();
    ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
    Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
    int userId=data.readInt();
    int result=startActivityAsUser(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
    reply.writeNoException();
    reply.writeInt(result);
    return true;
  }
case START_ACTIVITY_AS_CALLER_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder b=data.readStrongBinder();
  IApplicationThread app=ApplicationThreadNative.asInterface(b);
  String callingPackage=data.readString();
  Intent intent=Intent.CREATOR.createFromParcel(data);
  String resolvedType=data.readString();
  IBinder resultTo=data.readStrongBinder();
  String resultWho=data.readString();
  int requestCode=data.readInt();
  int startFlags=data.readInt();
  ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
  Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
  int userId=data.readInt();
  int result=startActivityAsCaller(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
  reply.writeNoException();
  reply.writeInt(result);
  return true;
}
case START_ACTIVITY_AND_WAIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
WaitResult result=startActivityAndWait(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
reply.writeNoException();
result.writeToParcel(reply,0);
return true;
}
case START_ACTIVITY_WITH_CONFIG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
Configuration config=Configuration.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivityWithConfig(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,config,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_ACTIVITY_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IntentSender intent=IntentSender.CREATOR.createFromParcel(data);
Intent fillInIntent=null;
if (data.readInt() != 0) {
fillInIntent=Intent.CREATOR.createFromParcel(data);
}
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int flagsMask=data.readInt();
int flagsValues=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int result=startActivityIntentSender(app,intent,fillInIntent,resolvedType,resultTo,resultWho,requestCode,flagsMask,flagsValues,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_VOICE_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
int callingPid=data.readInt();
int callingUid=data.readInt();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
IVoiceInteractor interactor=IVoiceInteractor.Stub.asInterface(data.readStrongBinder());
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startVoiceActivity(callingPackage,callingPid,callingUid,intent,resolvedType,session,interactor,startFlags,profilerInfo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder callingActivity=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
boolean result=startNextMatchingActivity(callingActivity,intent,options);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_ACTIVITY_FROM_RECENTS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
Bundle options=data.readInt() == 0 ? null : Bundle.CREATOR.createFromParcel(data);
int result=startActivityFromRecents(taskId,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent resultData=null;
int resultCode=data.readInt();
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean finishTask=(data.readInt() != 0);
boolean res=finishActivity(token,resultCode,resultData,finishTask);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case FINISH_ACTIVITY_AFFINITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=finishActivityAffinity(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_VOICE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
finishVoiceTask(session);
reply.writeNoException();
return true;
}
case RELEASE_ACTIVITY_INSTANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=releaseActivityInstance(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case RELEASE_SOME_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
releaseSomeActivities(app);
reply.writeNoException();
return true;
}
case WILL_ACTIVITY_BE_VISIBLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=willActivityBeVisible(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
String packageName=data.readString();
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
int userId=data.readInt();
Intent intent=registerReceiver(app,packageName,rec,filter,perm,userId);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
int appOp=data.readInt();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int userId=data.readInt();
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,appOp,serialized,sticky,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
int userId=data.readInt();
unbroadcastIntent(app,intent,userId);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Configuration config=null;
if (data.readInt() != 0) {
config=Configuration.CREATOR.createFromParcel(data);
}
boolean stopProfiling=data.readInt() != 0;
if (token != null) {
activityIdle(token,config,stopProfiling);
}
reply.writeNoException();
return true;
}
case ACTIVITY_RESUMED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityResumed(token);
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityPaused(token);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
PersistableBundle persistentState=data.readPersistableBundle();
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,map,persistentState,description);
reply.writeNoException();
return true;
}
case ACTIVITY_SLEPT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activitySlept(token);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_APP_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
List<IAppTask> list=getAppTasks(callingPackage);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
IAppTask task=list.get(i);
reply.writeStrongBinder(task.asBinder());
}
return true;
}
case ADD_APP_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
ActivityManager.TaskDescription descr=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
Bitmap thumbnail=Bitmap.CREATOR.createFromParcel(data);
int res=addAppTask(activityToken,intent,descr,thumbnail);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_APP_TASK_THUMBNAIL_SIZE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Point size=getAppTaskThumbnailSize();
reply.writeNoException();
size.writeToParcel(reply,0);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningTaskInfo> list=getTasks(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
int userId=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl,userId);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_TASK_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int id=data.readInt();
ActivityManager.TaskThumbnail taskThumbnail=getTaskThumbnail(id);
reply.writeNoException();
if (taskThumbnail != null) {
reply.writeInt(1);
taskThumbnail.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningServiceInfo> list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ApplicationInfo> list=getRunningExternalApplications();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
moveTaskToFront(task,fl,options);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
int stackId=data.readInt();
boolean toTop=data.readInt() != 0;
moveTaskToStack(taskId,stackId,toTop);
reply.writeNoException();
return true;
}
case RESIZE_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
float weight=data.readFloat();
Rect r=Rect.CREATOR.createFromParcel(data);
resizeStack(stackId,r);
reply.writeNoException();
return true;
}
case GET_ALL_STACK_INFOS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<StackInfo> list=getAllStackInfos();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_STACK_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
StackInfo info=getStackInfo(stackId);
reply.writeNoException();
if (info != null) {
reply.writeInt(1);
info.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case IS_IN_HOME_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean isInHomeStack=isInHomeStack(taskId);
reply.writeNoException();
reply.writeInt(isInHomeStack ? 1 : 0);
return true;
}
case SET_FOCUSED_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
setFocusedStack(stackId);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
int userId=data.readInt();
boolean stable=data.readInt() != 0;
ContentProviderHolder cph=getContentProvider(app,name,userId,stable);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
int userId=data.readInt();
IBinder token=data.readStrongBinder();
ContentProviderHolder cph=getContentProviderExternal(name,userId,token);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REF_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
int stable=data.readInt();
int unstable=data.readInt();
boolean res=refContentProvider(b,stable,unstable);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case UNSTABLE_PROVIDER_DIED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
unstableProviderDied(b);
reply.writeNoException();
return true;
}
case APP_NOT_RESPONDING_VIA_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
appNotRespondingViaProvider(b);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
boolean stable=data.readInt() != 0;
removeContentProvider(b,stable);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder token=data.readStrongBinder();
removeContentProviderExternal(name,token);
reply.writeNoException();
return true;
}
case GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName comp=ComponentName.CREATOR.createFromParcel(data);
PendingIntent pi=getRunningServiceControlPanel(comp);
reply.writeNoException();
PendingIntent.writePendingIntentOrNullToParcel(pi,reply);
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
ComponentName cn=startService(app,service,resolvedType,userId);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
int res=stopService(app,service,resolvedType,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int id=data.readInt();
Notification notification=null;
if (data.readInt() != 0) {
notification=Notification.CREATOR.createFromParcel(data);
}
boolean removeNotification=data.readInt() != 0;
setServiceForeground(className,token,id,notification,removeNotification);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
int userId=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int type=data.readInt();
int startId=data.readInt();
int res=data.readInt();
serviceDoneExecuting(token,type,startId,res);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
b=data.readStrongBinder();
IUiAutomationConnection c=IUiAutomationConnection.Stub.asInterface(b);
int userId=data.readInt();
String abiOverride=data.readString();
boolean res=startInstrumentation(className,profileFile,fl,arguments,w,c,userId,abiOverride);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent[] requestIntents;
String[] requestResolvedTypes;
if (data.readInt() != 0) {
requestIntents=data.createTypedArray(Intent.CREATOR);
requestResolvedTypes=data.createStringArray();
}
 else {
requestIntents=null;
requestResolvedTypes=null;
}
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntents,requestResolvedTypes,fl,options,userId);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_UID_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
int res=getUidForIntentSender(r);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case HANDLE_INCOMING_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingPid=data.readInt();
int callingUid=data.readInt();
int userId=data.readInt();
boolean allowAll=data.readInt() != 0;
boolean requireFull=data.readInt() != 0;
String name=data.readString();
String callerPackage=data.readString();
int res=handleIncomingUser(callingPid,callingUid,userId,allowAll,requireFull,name,callerPackage);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int userId=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
int userId=data.readInt();
boolean res=clearApplicationUserData(packageName,observer,userId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
grantUriPermission(app,targetPkg,uri,mode,userId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermission(app,uri,mode,userId);
reply.writeNoException();
return true;
}
case TAKE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
takePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case RELEASE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
releasePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case GET_PERSISTED_URI_PERMISSIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final String packageName=data.readString();
final boolean incoming=data.readInt() != 0;
final ParceledListSlice<UriPermission> perms=getPersistedUriPermissions(packageName,incoming);
reply.writeNoException();
perms.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case SET_LOCK_SCREEN_SHOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
setLockScreenShown(data.readInt() != 0);
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_CONTROLLER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityController watcher=IActivityController.Stub.asInterface(data.readStrongBinder());
setActivityController(watcher);
reply.writeNoException();
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
int sourceUid=data.readInt();
String sourcePkg=data.readString();
noteWakeupAlarm(is,sourceUid,sourcePkg);
reply.writeNoException();
return true;
}
case KILL_PIDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
String reason=data.readString();
boolean secure=data.readInt() != 0;
boolean res=killPids(pids,reason,secure);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_PROCESSES_BELOW_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
boolean res=killProcessesBelowForeground(reason);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_CRASH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
handleApplicationCrash(app,ci);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_WTF_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
String tag=data.readString();
boolean system=data.readInt() != 0;
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
boolean res=handleApplicationWtf(app,tag,system,ci);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int violationMask=data.readInt();
StrictMode.ViolationInfo info=new StrictMode.ViolationInfo(data);
handleApplicationStrictModeViolation(app,violationMask,info);
reply.writeNoException();
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case KILL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
killBackgroundProcesses(packageName,userId);
reply.writeNoException();
return true;
}
case KILL_ALL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
killAllBackgroundProcesses();
reply.writeNoException();
return true;
}
case FORCE_STOP_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
forceStopPackage(packageName,userId);
reply.writeNoException();
return true;
}
case GET_MY_MEMORY_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.RunningAppProcessInfo info=new ActivityManager.RunningAppProcessInfo();
getMyMemoryState(info);
reply.writeNoException();
info.writeToParcel(reply,0);
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean start=data.readInt() != 0;
int profileType=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
boolean res=profileControl(process,userId,start,profilerInfo,profileType);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
case ADD_PACKAGE_DEPENDENCY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
addPackageDependency(packageName);
reply.writeNoException();
return true;
}
case KILL_APPLICATION_WITH_APPID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int appid=data.readInt();
String reason=data.readString();
killApplicationWithAppId(pkg,appid,reason);
reply.writeNoException();
return true;
}
case CLOSE_SYSTEM_DIALOGS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
closeSystemDialogs(reason);
reply.writeNoException();
return true;
}
case GET_PROCESS_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
Debug.MemoryInfo[] res=getProcessMemoryInfo(pids);
reply.writeNoException();
reply.writeTypedArray(res,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case KILL_APPLICATION_PROCESS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String processName=data.readString();
int uid=data.readInt();
killApplicationProcess(processName,uid);
reply.writeNoException();
return true;
}
case OVERRIDE_PENDING_TRANSITION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String packageName=data.readString();
int enterAnim=data.readInt();
int exitAnim=data.readInt();
overridePendingTransition(token,packageName,enterAnim,exitAnim);
reply.writeNoException();
return true;
}
case IS_USER_A_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean areThey=isUserAMonkey();
reply.writeNoException();
reply.writeInt(areThey ? 1 : 0);
return true;
}
case SET_USER_IS_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean monkey=(data.readInt() == 1);
setUserIsMonkey(monkey);
reply.writeNoException();
return true;
}
case FINISH_HEAVY_WEIGHT_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
finishHeavyWeightApp();
reply.writeNoException();
return true;
}
case IS_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isit=isImmersive(token);
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case IS_TOP_OF_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean isTopOfTask=isTopOfTask(token);
reply.writeNoException();
reply.writeInt(isTopOfTask ? 1 : 0);
return true;
}
case CONVERT_FROM_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean converted=convertFromTranslucent(token);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case CONVERT_TO_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
boolean converted=convertToTranslucent(token,options);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case GET_ACTIVITY_OPTIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final ActivityOptions options=getActivityOptions(token);
reply.writeNoException();
reply.writeBundle(options == null ? null : options.toBundle());
return true;
}
case SET_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean imm=data.readInt() == 1;
setImmersive(token,imm);
reply.writeNoException();
return true;
}
case IS_TOP_ACTIVITY_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean isit=isTopActivityImmersive();
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case CRASH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
int initialPid=data.readInt();
String packageName=data.readString();
String message=data.readString();
crashApplication(uid,initialPid,packageName,message);
reply.writeNoException();
return true;
}
case GET_PROVIDER_MIME_TYPE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int userId=data.readInt();
String type=getProviderMimeType(uri,userId);
reply.writeNoException();
reply.writeString(type);
return true;
}
case NEW_URI_PERMISSION_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder perm=newUriPermissionOwner(name);
reply.writeNoException();
reply.writeStrongBinder(perm);
return true;
}
case GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
int fromUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int sourceUserId=data.readInt();
int targetUserId=data.readInt();
grantUriPermissionFromOwner(owner,fromUid,targetPkg,uri,mode,sourceUserId,targetUserId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
Uri uri=null;
if (data.readInt() != 0) {
uri=Uri.CREATOR.createFromParcel(data);
}
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermissionFromOwner(owner,uri,mode,userId);
reply.writeNoException();
return true;
}
case CHECK_GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int modeFlags=data.readInt();
int userId=data.readInt();
int res=checkGrantUriPermission(callingUid,targetPkg,uri,modeFlags,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case DUMP_HEAP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean managed=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? ParcelFileDescriptor.CREATOR.createFromParcel(data) : null;
boolean res=dumpHeap(process,userId,managed,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case START_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent[] intents=data.createTypedArray(Intent.CREATOR);
String[] resolvedTypes=data.createStringArray();
IBinder resultTo=data.readStrongBinder();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivities(app,callingPackage,intents,resolvedTypes,resultTo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=getFrontActivityScreenCompatMode();
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=data.readInt();
setFrontActivityScreenCompatMode(mode);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case GET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=getPackageScreenCompatMode(pkg);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=data.readInt();
setPackageScreenCompatMode(pkg,mode);
reply.writeNoException();
return true;
}
case SWITCH_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=switchUser(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_USER_IN_BACKGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=startUserInBackground(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case STOP_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
IStopUserCallback callback=IStopUserCallback.Stub.asInterface(data.readStrongBinder());
int result=stopUser(userid,callback);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_CURRENT_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
UserInfo userInfo=getCurrentUser();
reply.writeNoException();
userInfo.writeToParcel(reply,0);
return true;
}
case IS_USER_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean orStopping=data.readInt() != 0;
boolean result=isUserRunning(userid,orStopping);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case GET_RUNNING_USER_IDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] result=getRunningUserIds();
reply.writeNoException();
reply.writeIntArray(result);
return true;
}
case REMOVE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean result=removeTask(taskId);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case REGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
registerProcessObserver(observer);
return true;
}
case UNREGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
unregisterProcessObserver(observer);
return true;
}
case GET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=getPackageAskScreenCompat(pkg);
reply.writeNoException();
reply.writeInt(ask ? 1 : 0);
return true;
}
case SET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=data.readInt() != 0;
setPackageAskScreenCompat(pkg,ask);
reply.writeNoException();
return true;
}
case IS_INTENT_SENDER_TARGETED_TO_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderTargetedToPackage(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case IS_INTENT_SENDER_AN_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderAnActivity(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_INTENT_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
Intent intent=getIntentForIntentSender(r);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_TAG_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String prefix=data.readString();
String tag=getTagForIntentSender(r,prefix);
reply.writeNoException();
reply.writeString(tag);
return true;
}
case UPDATE_PERSISTENT_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updatePersistentConfiguration(config);
reply.writeNoException();
return true;
}
case GET_PROCESS_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
long[] pss=getProcessPss(pids);
reply.writeNoException();
reply.writeLongArray(pss);
return true;
}
case SHOW_BOOT_MESSAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
CharSequence msg=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
boolean always=data.readInt() != 0;
showBootMessage(msg,always);
reply.writeNoException();
return true;
}
case KEYGUARD_WAITING_FOR_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
keyguardWaitingForActivityDrawn();
reply.writeNoException();
return true;
}
case SHOULD_UP_RECREATE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String destAffinity=data.readString();
boolean res=shouldUpRecreateTask(token,destAffinity);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case NAVIGATE_UP_TO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent target=Intent.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
Intent resultData=null;
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean res=navigateUpTo(token,target,resultCode,resultData);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_LAUNCHED_FROM_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int res=getLaunchedFromUid(token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_LAUNCHED_FROM_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=getLaunchedFromPackage(token);
reply.writeNoException();
reply.writeString(res);
return true;
}
case REGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
registerUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case UNREGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
unregisterUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case REQUEST_BUG_REPORT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
requestBugReport();
reply.writeNoException();
return true;
}
case INPUT_DISPATCHING_TIMED_OUT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int pid=data.readInt();
boolean aboveSystem=data.readInt() != 0;
String reason=data.readString();
long res=inputDispatchingTimedOut(pid,aboveSystem,reason);
reply.writeNoException();
reply.writeLong(res);
return true;
}
case GET_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int requestType=data.readInt();
Bundle res=getAssistContextExtras(requestType);
reply.writeNoException();
reply.writeBundle(res);
return true;
}
case REPORT_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle extras=data.readBundle();
reportAssistContextExtras(token,extras);
reply.writeNoException();
return true;
}
case LAUNCH_ASSIST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
int requestType=data.readInt();
String hint=data.readString();
int userHandle=data.readInt();
boolean res=launchAssistIntent(intent,requestType,hint,userHandle);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
String reason=data.readString();
killUid(uid,reason);
reply.writeNoException();
return true;
}
case HANG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
boolean allowRestart=data.readInt() != 0;
hang(who,allowRestart);
reply.writeNoException();
return true;
}
case REPORT_ACTIVITY_FULLY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reportActivityFullyDrawn(token);
reply.writeNoException();
return true;
}
case NOTIFY_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyActivityDrawn(token);
reply.writeNoException();
return true;
}
case RESTART_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
restart();
reply.writeNoException();
return true;
}
case PERFORM_IDLE_MAINTENANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
performIdleMaintenance();
reply.writeNoException();
return true;
}
case CREATE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder parentActivityToken=data.readStrongBinder();
IActivityContainerCallback callback=IActivityContainerCallback.Stub.asInterface(data.readStrongBinder());
IActivityContainer activityContainer=createActivityContainer(parentActivityToken,callback);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case DELETE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityContainer activityContainer=IActivityContainer.Stub.asInterface(data.readStrongBinder());
deleteActivityContainer(activityContainer);
reply.writeNoException();
return true;
}
case GET_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
IActivityContainer activityContainer=getEnclosingActivityContainer(activityToken);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_HOME_ACTIVITY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder homeActivityToken=getHomeActivityToken();
reply.writeNoException();
reply.writeStrongBinder(homeActivityToken);
return true;
}
case START_LOCK_TASK_BY_TASK_ID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final int taskId=data.readInt();
startLockTaskMode(taskId);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
startLockTaskMode(token);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
startLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskMode();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case IS_IN_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean isInLockTaskMode=isInLockTaskMode();
reply.writeNoException();
reply.writeInt(isInLockTaskMode ? 1 : 0);
return true;
}
case SET_TASK_DESCRIPTION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ActivityManager.TaskDescription values=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
setTaskDescription(token,values);
reply.writeNoException();
return true;
}
case GET_TASK_DESCRIPTION_ICON_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String filename=data.readString();
Bitmap icon=getTaskDescriptionIcon(filename);
reply.writeNoException();
if (icon == null) {
reply.writeInt(0);
}
 else {
reply.writeInt(1);
icon.writeToParcel(reply,0);
}
return true;
}
case START_IN_PLACE_ANIMATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
startInPlaceAnimationOnFrontMostApplication(options);
reply.writeNoException();
return true;
}
case REQUEST_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean enable=data.readInt() > 0;
boolean success=requestVisibleBehind(token,enable);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case IS_BACKGROUND_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean enabled=isBackgroundVisibleBehind(token);
reply.writeNoException();
reply.writeInt(enabled ? 1 : 0);
return true;
}
case BACKGROUND_RESOURCES_RELEASED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
backgroundResourcesReleased(token);
reply.writeNoException();
return true;
}
case NOTIFY_LAUNCH_TASK_BEHIND_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyLaunchTaskBehindComplete(token);
reply.writeNoException();
return true;
}
case NOTIFY_ENTER_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyEnterAnimationComplete(token);
reply.writeNoException();
return true;
}
case BOOT_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
bootAnimationComplete();
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}","@Override public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      String callingPackage=data.readString();
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      int startFlags=data.readInt();
      ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
      Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
      int result=startActivity(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_ACTIVITY_AS_USER_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder b=data.readStrongBinder();
    IApplicationThread app=ApplicationThreadNative.asInterface(b);
    String callingPackage=data.readString();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    String resolvedType=data.readString();
    IBinder resultTo=data.readStrongBinder();
    String resultWho=data.readString();
    int requestCode=data.readInt();
    int startFlags=data.readInt();
    ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
    Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
    int userId=data.readInt();
    int result=startActivityAsUser(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
    reply.writeNoException();
    reply.writeInt(result);
    return true;
  }
case START_ACTIVITY_AS_CALLER_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder b=data.readStrongBinder();
  IApplicationThread app=ApplicationThreadNative.asInterface(b);
  String callingPackage=data.readString();
  Intent intent=Intent.CREATOR.createFromParcel(data);
  String resolvedType=data.readString();
  IBinder resultTo=data.readStrongBinder();
  String resultWho=data.readString();
  int requestCode=data.readInt();
  int startFlags=data.readInt();
  ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
  Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
  int userId=data.readInt();
  int result=startActivityAsCaller(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
  reply.writeNoException();
  reply.writeInt(result);
  return true;
}
case START_ACTIVITY_AND_WAIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
WaitResult result=startActivityAndWait(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,profilerInfo,options,userId);
reply.writeNoException();
result.writeToParcel(reply,0);
return true;
}
case START_ACTIVITY_WITH_CONFIG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int startFlags=data.readInt();
Configuration config=Configuration.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivityWithConfig(app,callingPackage,intent,resolvedType,resultTo,resultWho,requestCode,startFlags,config,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_ACTIVITY_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IntentSender intent=IntentSender.CREATOR.createFromParcel(data);
Intent fillInIntent=null;
if (data.readInt() != 0) {
fillInIntent=Intent.CREATOR.createFromParcel(data);
}
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int flagsMask=data.readInt();
int flagsValues=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int result=startActivityIntentSender(app,intent,fillInIntent,resolvedType,resultTo,resultWho,requestCode,flagsMask,flagsValues,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_VOICE_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
int callingPid=data.readInt();
int callingUid=data.readInt();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
IVoiceInteractor interactor=IVoiceInteractor.Stub.asInterface(data.readStrongBinder());
int startFlags=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startVoiceActivity(callingPackage,callingPid,callingUid,intent,resolvedType,session,interactor,startFlags,profilerInfo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder callingActivity=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
boolean result=startNextMatchingActivity(callingActivity,intent,options);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_ACTIVITY_FROM_RECENTS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
Bundle options=data.readInt() == 0 ? null : Bundle.CREATOR.createFromParcel(data);
int result=startActivityFromRecents(taskId,options);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent resultData=null;
int resultCode=data.readInt();
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean finishTask=(data.readInt() != 0);
boolean res=finishActivity(token,resultCode,resultData,finishTask);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case FINISH_ACTIVITY_AFFINITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=finishActivityAffinity(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_VOICE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IVoiceInteractionSession session=IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
finishVoiceTask(session);
reply.writeNoException();
return true;
}
case RELEASE_ACTIVITY_INSTANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=releaseActivityInstance(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case RELEASE_SOME_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
releaseSomeActivities(app);
reply.writeNoException();
return true;
}
case WILL_ACTIVITY_BE_VISIBLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=willActivityBeVisible(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
String packageName=data.readString();
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
int userId=data.readInt();
Intent intent=registerReceiver(app,packageName,rec,filter,perm,userId);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
int appOp=data.readInt();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int userId=data.readInt();
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,appOp,serialized,sticky,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
int userId=data.readInt();
unbroadcastIntent(app,intent,userId);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Configuration config=null;
if (data.readInt() != 0) {
config=Configuration.CREATOR.createFromParcel(data);
}
boolean stopProfiling=data.readInt() != 0;
if (token != null) {
activityIdle(token,config,stopProfiling);
}
reply.writeNoException();
return true;
}
case ACTIVITY_RESUMED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityResumed(token);
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityPaused(token);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
PersistableBundle persistentState=data.readPersistableBundle();
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,map,persistentState,description);
reply.writeNoException();
return true;
}
case ACTIVITY_SLEPT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activitySlept(token);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_APP_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String callingPackage=data.readString();
List<IAppTask> list=getAppTasks(callingPackage);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
IAppTask task=list.get(i);
reply.writeStrongBinder(task.asBinder());
}
return true;
}
case ADD_APP_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
ActivityManager.TaskDescription descr=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
Bitmap thumbnail=Bitmap.CREATOR.createFromParcel(data);
int res=addAppTask(activityToken,intent,descr,thumbnail);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_APP_TASK_THUMBNAIL_SIZE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Point size=getAppTaskThumbnailSize();
reply.writeNoException();
size.writeToParcel(reply,0);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningTaskInfo> list=getTasks(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
int userId=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl,userId);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_TASK_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int id=data.readInt();
ActivityManager.TaskThumbnail taskThumbnail=getTaskThumbnail(id);
reply.writeNoException();
if (taskThumbnail != null) {
reply.writeInt(1);
taskThumbnail.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RunningServiceInfo> list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ApplicationInfo> list=getRunningExternalApplications();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
moveTaskToFront(task,fl,options);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
int stackId=data.readInt();
boolean toTop=data.readInt() != 0;
moveTaskToStack(taskId,stackId,toTop);
reply.writeNoException();
return true;
}
case RESIZE_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
float weight=data.readFloat();
Rect r=Rect.CREATOR.createFromParcel(data);
resizeStack(stackId,r);
reply.writeNoException();
return true;
}
case GET_ALL_STACK_INFOS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<StackInfo> list=getAllStackInfos();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_STACK_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
StackInfo info=getStackInfo(stackId);
reply.writeNoException();
if (info != null) {
reply.writeInt(1);
info.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case IS_IN_HOME_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean isInHomeStack=isInHomeStack(taskId);
reply.writeNoException();
reply.writeInt(isInHomeStack ? 1 : 0);
return true;
}
case SET_FOCUSED_STACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int stackId=data.readInt();
setFocusedStack(stackId);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
int userId=data.readInt();
boolean stable=data.readInt() != 0;
ContentProviderHolder cph=getContentProvider(app,name,userId,stable);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
int userId=data.readInt();
IBinder token=data.readStrongBinder();
ContentProviderHolder cph=getContentProviderExternal(name,userId,token);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REF_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
int stable=data.readInt();
int unstable=data.readInt();
boolean res=refContentProvider(b,stable,unstable);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case UNSTABLE_PROVIDER_DIED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
unstableProviderDied(b);
reply.writeNoException();
return true;
}
case APP_NOT_RESPONDING_VIA_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
appNotRespondingViaProvider(b);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
boolean stable=data.readInt() != 0;
removeContentProvider(b,stable);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_EXTERNAL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder token=data.readStrongBinder();
removeContentProviderExternal(name,token);
reply.writeNoException();
return true;
}
case GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName comp=ComponentName.CREATOR.createFromParcel(data);
PendingIntent pi=getRunningServiceControlPanel(comp);
reply.writeNoException();
PendingIntent.writePendingIntentOrNullToParcel(pi,reply);
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
ComponentName cn=startService(app,service,resolvedType,userId);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int userId=data.readInt();
int res=stopService(app,service,resolvedType,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int id=data.readInt();
Notification notification=null;
if (data.readInt() != 0) {
notification=Notification.CREATOR.createFromParcel(data);
}
boolean removeNotification=data.readInt() != 0;
setServiceForeground(className,token,id,notification,removeNotification);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
int userId=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int type=data.readInt();
int startId=data.readInt();
int res=data.readInt();
serviceDoneExecuting(token,type,startId,res);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
b=data.readStrongBinder();
IUiAutomationConnection c=IUiAutomationConnection.Stub.asInterface(b);
int userId=data.readInt();
String abiOverride=data.readString();
boolean res=startInstrumentation(className,profileFile,fl,arguments,w,c,userId,abiOverride);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent[] requestIntents;
String[] requestResolvedTypes;
if (data.readInt() != 0) {
requestIntents=data.createTypedArray(Intent.CREATOR);
requestResolvedTypes=data.createStringArray();
}
 else {
requestIntents=null;
requestResolvedTypes=null;
}
int fl=data.readInt();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntents,requestResolvedTypes,fl,options,userId);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_UID_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
int res=getUidForIntentSender(r);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case HANDLE_INCOMING_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingPid=data.readInt();
int callingUid=data.readInt();
int userId=data.readInt();
boolean allowAll=data.readInt() != 0;
boolean requireFull=data.readInt() != 0;
String name=data.readString();
String callerPackage=data.readString();
int res=handleIncomingUser(callingPid,callingUid,userId,allowAll,requireFull,name,callerPackage);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_PERMISSION_WITH_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
IBinder token=data.readStrongBinder();
int res=checkPermissionWithToken(perm,pid,uid,token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int userId=data.readInt();
IBinder callerToken=data.readStrongBinder();
int res=checkUriPermission(uri,pid,uid,mode,userId,callerToken);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
int userId=data.readInt();
boolean res=clearApplicationUserData(packageName,observer,userId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
grantUriPermission(app,targetPkg,uri,mode,userId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermission(app,uri,mode,userId);
reply.writeNoException();
return true;
}
case TAKE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
takePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case RELEASE_PERSISTABLE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int userId=data.readInt();
releasePersistableUriPermission(uri,mode,userId);
reply.writeNoException();
return true;
}
case GET_PERSISTED_URI_PERMISSIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final String packageName=data.readString();
final boolean incoming=data.readInt() != 0;
final ParceledListSlice<UriPermission> perms=getPersistedUriPermissions(packageName,incoming);
reply.writeNoException();
perms.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case SET_LOCK_SCREEN_SHOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
setLockScreenShown(data.readInt() != 0);
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_CONTROLLER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityController watcher=IActivityController.Stub.asInterface(data.readStrongBinder());
setActivityController(watcher);
reply.writeNoException();
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
int sourceUid=data.readInt();
String sourcePkg=data.readString();
noteWakeupAlarm(is,sourceUid,sourcePkg);
reply.writeNoException();
return true;
}
case KILL_PIDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
String reason=data.readString();
boolean secure=data.readInt() != 0;
boolean res=killPids(pids,reason,secure);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_PROCESSES_BELOW_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
boolean res=killProcessesBelowForeground(reason);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_CRASH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
handleApplicationCrash(app,ci);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_WTF_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
String tag=data.readString();
boolean system=data.readInt() != 0;
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
boolean res=handleApplicationWtf(app,tag,system,ci);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int violationMask=data.readInt();
StrictMode.ViolationInfo info=new StrictMode.ViolationInfo(data);
handleApplicationStrictModeViolation(app,violationMask,info);
reply.writeNoException();
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case KILL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
killBackgroundProcesses(packageName,userId);
reply.writeNoException();
return true;
}
case KILL_ALL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
killAllBackgroundProcesses();
reply.writeNoException();
return true;
}
case FORCE_STOP_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
int userId=data.readInt();
forceStopPackage(packageName,userId);
reply.writeNoException();
return true;
}
case GET_MY_MEMORY_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.RunningAppProcessInfo info=new ActivityManager.RunningAppProcessInfo();
getMyMemoryState(info);
reply.writeNoException();
info.writeToParcel(reply,0);
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean start=data.readInt() != 0;
int profileType=data.readInt();
ProfilerInfo profilerInfo=data.readInt() != 0 ? ProfilerInfo.CREATOR.createFromParcel(data) : null;
boolean res=profileControl(process,userId,start,profilerInfo,profileType);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
case ADD_PACKAGE_DEPENDENCY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
addPackageDependency(packageName);
reply.writeNoException();
return true;
}
case KILL_APPLICATION_WITH_APPID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int appid=data.readInt();
String reason=data.readString();
killApplicationWithAppId(pkg,appid,reason);
reply.writeNoException();
return true;
}
case CLOSE_SYSTEM_DIALOGS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
closeSystemDialogs(reason);
reply.writeNoException();
return true;
}
case GET_PROCESS_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
Debug.MemoryInfo[] res=getProcessMemoryInfo(pids);
reply.writeNoException();
reply.writeTypedArray(res,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case KILL_APPLICATION_PROCESS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String processName=data.readString();
int uid=data.readInt();
killApplicationProcess(processName,uid);
reply.writeNoException();
return true;
}
case OVERRIDE_PENDING_TRANSITION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String packageName=data.readString();
int enterAnim=data.readInt();
int exitAnim=data.readInt();
overridePendingTransition(token,packageName,enterAnim,exitAnim);
reply.writeNoException();
return true;
}
case IS_USER_A_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean areThey=isUserAMonkey();
reply.writeNoException();
reply.writeInt(areThey ? 1 : 0);
return true;
}
case SET_USER_IS_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean monkey=(data.readInt() == 1);
setUserIsMonkey(monkey);
reply.writeNoException();
return true;
}
case FINISH_HEAVY_WEIGHT_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
finishHeavyWeightApp();
reply.writeNoException();
return true;
}
case IS_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isit=isImmersive(token);
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case IS_TOP_OF_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean isTopOfTask=isTopOfTask(token);
reply.writeNoException();
reply.writeInt(isTopOfTask ? 1 : 0);
return true;
}
case CONVERT_FROM_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean converted=convertFromTranslucent(token);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case CONVERT_TO_TRANSLUCENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
boolean converted=convertToTranslucent(token,options);
reply.writeNoException();
reply.writeInt(converted ? 1 : 0);
return true;
}
case GET_ACTIVITY_OPTIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final ActivityOptions options=getActivityOptions(token);
reply.writeNoException();
reply.writeBundle(options == null ? null : options.toBundle());
return true;
}
case SET_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean imm=data.readInt() == 1;
setImmersive(token,imm);
reply.writeNoException();
return true;
}
case IS_TOP_ACTIVITY_IMMERSIVE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean isit=isTopActivityImmersive();
reply.writeNoException();
reply.writeInt(isit ? 1 : 0);
return true;
}
case CRASH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
int initialPid=data.readInt();
String packageName=data.readString();
String message=data.readString();
crashApplication(uid,initialPid,packageName,message);
reply.writeNoException();
return true;
}
case GET_PROVIDER_MIME_TYPE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int userId=data.readInt();
String type=getProviderMimeType(uri,userId);
reply.writeNoException();
reply.writeString(type);
return true;
}
case NEW_URI_PERMISSION_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder perm=newUriPermissionOwner(name);
reply.writeNoException();
reply.writeStrongBinder(perm);
return true;
}
case GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
int fromUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
int sourceUserId=data.readInt();
int targetUserId=data.readInt();
grantUriPermissionFromOwner(owner,fromUid,targetPkg,uri,mode,sourceUserId,targetUserId);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
Uri uri=null;
if (data.readInt() != 0) {
uri=Uri.CREATOR.createFromParcel(data);
}
int mode=data.readInt();
int userId=data.readInt();
revokeUriPermissionFromOwner(owner,uri,mode,userId);
reply.writeNoException();
return true;
}
case CHECK_GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int callingUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int modeFlags=data.readInt();
int userId=data.readInt();
int res=checkGrantUriPermission(callingUid,targetPkg,uri,modeFlags,userId);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case DUMP_HEAP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
int userId=data.readInt();
boolean managed=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? ParcelFileDescriptor.CREATOR.createFromParcel(data) : null;
boolean res=dumpHeap(process,userId,managed,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case START_ACTIVITIES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String callingPackage=data.readString();
Intent[] intents=data.createTypedArray(Intent.CREATOR);
String[] resolvedTypes=data.createStringArray();
IBinder resultTo=data.readStrongBinder();
Bundle options=data.readInt() != 0 ? Bundle.CREATOR.createFromParcel(data) : null;
int userId=data.readInt();
int result=startActivities(app,callingPackage,intents,resolvedTypes,resultTo,options,userId);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=getFrontActivityScreenCompatMode();
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_FRONT_ACTIVITY_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int mode=data.readInt();
setFrontActivityScreenCompatMode(mode);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case GET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=getPackageScreenCompatMode(pkg);
reply.writeNoException();
reply.writeInt(mode);
return true;
}
case SET_PACKAGE_SCREEN_COMPAT_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int mode=data.readInt();
setPackageScreenCompatMode(pkg,mode);
reply.writeNoException();
return true;
}
case SWITCH_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=switchUser(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case START_USER_IN_BACKGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean result=startUserInBackground(userid);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case STOP_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
IStopUserCallback callback=IStopUserCallback.Stub.asInterface(data.readStrongBinder());
int result=stopUser(userid,callback);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case GET_CURRENT_USER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
UserInfo userInfo=getCurrentUser();
reply.writeNoException();
userInfo.writeToParcel(reply,0);
return true;
}
case IS_USER_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int userid=data.readInt();
boolean orStopping=data.readInt() != 0;
boolean result=isUserRunning(userid,orStopping);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case GET_RUNNING_USER_IDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] result=getRunningUserIds();
reply.writeNoException();
reply.writeIntArray(result);
return true;
}
case REMOVE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int taskId=data.readInt();
boolean result=removeTask(taskId);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case REGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
registerProcessObserver(observer);
return true;
}
case UNREGISTER_PROCESS_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IProcessObserver observer=IProcessObserver.Stub.asInterface(data.readStrongBinder());
unregisterProcessObserver(observer);
return true;
}
case GET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=getPackageAskScreenCompat(pkg);
reply.writeNoException();
reply.writeInt(ask ? 1 : 0);
return true;
}
case SET_PACKAGE_ASK_SCREEN_COMPAT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
boolean ask=data.readInt() != 0;
setPackageAskScreenCompat(pkg,ask);
reply.writeNoException();
return true;
}
case IS_INTENT_SENDER_TARGETED_TO_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderTargetedToPackage(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case IS_INTENT_SENDER_AN_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
boolean res=isIntentSenderAnActivity(r);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_INTENT_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
Intent intent=getIntentForIntentSender(r);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_TAG_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String prefix=data.readString();
String tag=getTagForIntentSender(r,prefix);
reply.writeNoException();
reply.writeString(tag);
return true;
}
case UPDATE_PERSISTENT_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updatePersistentConfiguration(config);
reply.writeNoException();
return true;
}
case GET_PROCESS_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
long[] pss=getProcessPss(pids);
reply.writeNoException();
reply.writeLongArray(pss);
return true;
}
case SHOW_BOOT_MESSAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
CharSequence msg=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
boolean always=data.readInt() != 0;
showBootMessage(msg,always);
reply.writeNoException();
return true;
}
case KEYGUARD_WAITING_FOR_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
keyguardWaitingForActivityDrawn();
reply.writeNoException();
return true;
}
case SHOULD_UP_RECREATE_TASK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String destAffinity=data.readString();
boolean res=shouldUpRecreateTask(token,destAffinity);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case NAVIGATE_UP_TO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent target=Intent.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
Intent resultData=null;
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean res=navigateUpTo(token,target,resultCode,resultData);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GET_LAUNCHED_FROM_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int res=getLaunchedFromUid(token);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case GET_LAUNCHED_FROM_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=getLaunchedFromPackage(token);
reply.writeNoException();
reply.writeString(res);
return true;
}
case REGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
registerUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case UNREGISTER_USER_SWITCH_OBSERVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IUserSwitchObserver observer=IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
unregisterUserSwitchObserver(observer);
reply.writeNoException();
return true;
}
case REQUEST_BUG_REPORT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
requestBugReport();
reply.writeNoException();
return true;
}
case INPUT_DISPATCHING_TIMED_OUT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int pid=data.readInt();
boolean aboveSystem=data.readInt() != 0;
String reason=data.readString();
long res=inputDispatchingTimedOut(pid,aboveSystem,reason);
reply.writeNoException();
reply.writeLong(res);
return true;
}
case GET_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int requestType=data.readInt();
Bundle res=getAssistContextExtras(requestType);
reply.writeNoException();
reply.writeBundle(res);
return true;
}
case REPORT_ASSIST_CONTEXT_EXTRAS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle extras=data.readBundle();
reportAssistContextExtras(token,extras);
reply.writeNoException();
return true;
}
case LAUNCH_ASSIST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
int requestType=data.readInt();
String hint=data.readString();
int userHandle=data.readInt();
boolean res=launchAssistIntent(intent,requestType,hint,userHandle);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case KILL_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
String reason=data.readString();
killUid(uid,reason);
reply.writeNoException();
return true;
}
case HANG_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
boolean allowRestart=data.readInt() != 0;
hang(who,allowRestart);
reply.writeNoException();
return true;
}
case REPORT_ACTIVITY_FULLY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reportActivityFullyDrawn(token);
reply.writeNoException();
return true;
}
case NOTIFY_ACTIVITY_DRAWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyActivityDrawn(token);
reply.writeNoException();
return true;
}
case RESTART_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
restart();
reply.writeNoException();
return true;
}
case PERFORM_IDLE_MAINTENANCE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
performIdleMaintenance();
reply.writeNoException();
return true;
}
case CREATE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder parentActivityToken=data.readStrongBinder();
IActivityContainerCallback callback=IActivityContainerCallback.Stub.asInterface(data.readStrongBinder());
IActivityContainer activityContainer=createActivityContainer(parentActivityToken,callback);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case DELETE_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityContainer activityContainer=IActivityContainer.Stub.asInterface(data.readStrongBinder());
deleteActivityContainer(activityContainer);
reply.writeNoException();
return true;
}
case GET_ACTIVITY_CONTAINER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder activityToken=data.readStrongBinder();
IActivityContainer activityContainer=getEnclosingActivityContainer(activityToken);
reply.writeNoException();
if (activityContainer != null) {
reply.writeInt(1);
reply.writeStrongBinder(activityContainer.asBinder());
}
 else {
reply.writeInt(0);
}
return true;
}
case GET_HOME_ACTIVITY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder homeActivityToken=getHomeActivityToken();
reply.writeNoException();
reply.writeStrongBinder(homeActivityToken);
return true;
}
case START_LOCK_TASK_BY_TASK_ID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final int taskId=data.readInt();
startLockTaskMode(taskId);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
startLockTaskMode(token);
reply.writeNoException();
return true;
}
case START_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
startLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskMode();
reply.writeNoException();
return true;
}
case STOP_LOCK_TASK_BY_CURRENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopLockTaskModeOnCurrent();
reply.writeNoException();
return true;
}
case IS_IN_LOCK_TASK_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final boolean isInLockTaskMode=isInLockTaskMode();
reply.writeNoException();
reply.writeInt(isInLockTaskMode ? 1 : 0);
return true;
}
case SET_TASK_DESCRIPTION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ActivityManager.TaskDescription values=ActivityManager.TaskDescription.CREATOR.createFromParcel(data);
setTaskDescription(token,values);
reply.writeNoException();
return true;
}
case GET_TASK_DESCRIPTION_ICON_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String filename=data.readString();
Bitmap icon=getTaskDescriptionIcon(filename);
reply.writeNoException();
if (icon == null) {
reply.writeInt(0);
}
 else {
reply.writeInt(1);
icon.writeToParcel(reply,0);
}
return true;
}
case START_IN_PLACE_ANIMATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
final Bundle bundle;
if (data.readInt() == 0) {
bundle=null;
}
 else {
bundle=data.readBundle();
}
final ActivityOptions options=bundle == null ? null : new ActivityOptions(bundle);
startInPlaceAnimationOnFrontMostApplication(options);
reply.writeNoException();
return true;
}
case REQUEST_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean enable=data.readInt() > 0;
boolean success=requestVisibleBehind(token,enable);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case IS_BACKGROUND_VISIBLE_BEHIND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
final boolean enabled=isBackgroundVisibleBehind(token);
reply.writeNoException();
reply.writeInt(enabled ? 1 : 0);
return true;
}
case BACKGROUND_RESOURCES_RELEASED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
backgroundResourcesReleased(token);
reply.writeNoException();
return true;
}
case NOTIFY_LAUNCH_TASK_BEHIND_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyLaunchTaskBehindComplete(token);
reply.writeNoException();
return true;
}
case NOTIFY_ENTER_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
notifyEnterAnimationComplete(token);
reply.writeNoException();
return true;
}
case BOOT_ANIMATION_COMPLETE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
bootAnimationComplete();
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}",0.9969574588945692
195939,"public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId) throws RemoteException {
  Parcel data=Parcel.obtain();
  Parcel reply=Parcel.obtain();
  data.writeInterfaceToken(IActivityManager.descriptor);
  uri.writeToParcel(data,0);
  data.writeInt(pid);
  data.writeInt(uid);
  data.writeInt(mode);
  data.writeInt(userId);
  mRemote.transact(CHECK_URI_PERMISSION_TRANSACTION,data,reply,0);
  reply.readException();
  int res=reply.readInt();
  data.recycle();
  reply.recycle();
  return res;
}","public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId,IBinder callerToken) throws RemoteException {
  Parcel data=Parcel.obtain();
  Parcel reply=Parcel.obtain();
  data.writeInterfaceToken(IActivityManager.descriptor);
  uri.writeToParcel(data,0);
  data.writeInt(pid);
  data.writeInt(uid);
  data.writeInt(mode);
  data.writeInt(userId);
  data.writeStrongBinder(callerToken);
  mRemote.transact(CHECK_URI_PERMISSION_TRANSACTION,data,reply,0);
  reply.readException();
  int res=reply.readInt();
  data.recycle();
  reply.recycle();
  return res;
}",0.9455216989843028
195940,"@Override public int checkPermission(String permission,int pid,int uid){
  if (permission == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return ActivityManagerNative.getDefault().checkPermission(permission,pid,uid);
  }
 catch (  RemoteException e) {
    return PackageManager.PERMISSION_DENIED;
  }
}","/** 
 * @hide 
 */
@Override public int checkPermission(String permission,int pid,int uid,IBinder callerToken){
  if (permission == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return ActivityManagerNative.getDefault().checkPermissionWithToken(permission,pid,uid,callerToken);
  }
 catch (  RemoteException e) {
    return PackageManager.PERMISSION_DENIED;
  }
}",0.8675675675675676
195941,"public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId) throws RemoteException ;","public int checkUriPermission(Uri uri,int pid,int uid,int mode,int userId,IBinder callerToken) throws RemoteException ;",0.908256880733945
195942,"@Override public HdmiPortInfo createFromParcel(Parcel source){
  int id=source.readInt();
  int type=source.readInt();
  int address=source.readInt();
  boolean cec=(source.readInt() == 1);
  boolean arc=(source.readInt() == 1);
  boolean mhl=(source.readInt() == 1);
  return new HdmiPortInfo(id,type,address,cec,arc,mhl);
}","@Override public HdmiPortInfo createFromParcel(Parcel source){
  int id=source.readInt();
  int type=source.readInt();
  int address=source.readInt();
  boolean cec=(source.readInt() == 1);
  boolean arc=(source.readInt() == 1);
  boolean mhl=(source.readInt() == 1);
  return new HdmiPortInfo(id,type,address,cec,mhl,arc);
}",0.9876923076923076
195943,"/** 
 * Resets this view's properties 
 */
void resetViewProperties(){
  setDim(0);
  setLayerType(View.LAYER_TYPE_NONE,null);
  TaskViewTransform.reset(this);
}","/** 
 * Resets this view's properties 
 */
void resetViewProperties(){
  setDim(0);
  setLayerType(View.LAYER_TYPE_NONE,null);
  TaskViewTransform.reset(this);
  if (mActionButtonView != null) {
    mActionButtonView.setScaleX(1f);
    mActionButtonView.setScaleY(1f);
    mActionButtonView.setAlpha(1f);
    mActionButtonView.setTranslationZ(mActionButtonTranslationZ);
  }
}",0.5996275605214153
195944,"@Override protected void onFinishInflate(){
  mContent=findViewById(R.id.task_view_content);
  mHeaderView=(TaskViewHeader)findViewById(R.id.task_view_bar);
  mThumbnailView=(TaskViewThumbnail)findViewById(R.id.task_view_thumbnail);
  mThumbnailView.updateClipToTaskBar(mHeaderView);
  mActionButtonView=findViewById(R.id.lock_to_app_fab);
  mActionButtonView.setOutlineProvider(new ViewOutlineProvider(){
    @Override public void getOutline(    View view,    Outline outline){
      outline.setOval(0,0,mActionButtonView.getWidth(),mActionButtonView.getHeight());
    }
  }
);
}","@Override protected void onFinishInflate(){
  mContent=findViewById(R.id.task_view_content);
  mHeaderView=(TaskViewHeader)findViewById(R.id.task_view_bar);
  mThumbnailView=(TaskViewThumbnail)findViewById(R.id.task_view_thumbnail);
  mThumbnailView.updateClipToTaskBar(mHeaderView);
  mActionButtonView=findViewById(R.id.lock_to_app_fab);
  mActionButtonView.setOutlineProvider(new ViewOutlineProvider(){
    @Override public void getOutline(    View view,    Outline outline){
      outline.setOval(0,0,mActionButtonView.getWidth(),mActionButtonView.getHeight());
    }
  }
);
  mActionButtonTranslationZ=mActionButtonView.getTranslationZ();
}",0.946938775510204
195945,"void moveTaskToFrontLocked(int taskId,int flags,Bundle options){
  if (!checkAppSwitchAllowedLocked(Binder.getCallingPid(),Binder.getCallingUid(),-1,-1,""String_Node_Str"")) {
    ActivityOptions.abort(options);
    return;
  }
  final long origId=Binder.clearCallingIdentity();
  try {
    final TaskRecord task=mStackSupervisor.anyTaskForIdLocked(taskId);
    if (task == null) {
      return;
    }
    if (mStackSupervisor.isLockTaskModeViolation(task)) {
      mStackSupervisor.showLockTaskToast();
      Slog.e(TAG,""String_Node_Str"");
      return;
    }
    final ActivityRecord prev=mStackSupervisor.topRunningActivityLocked();
    if (prev != null && prev.isRecentsActivity()) {
      task.setTaskToReturnTo(ActivityRecord.RECENTS_ACTIVITY_TYPE);
    }
    mStackSupervisor.findTaskToMoveToFrontLocked(task,flags,options);
  }
  finally {
    Binder.restoreCallingIdentity(origId);
  }
  ActivityOptions.abort(options);
}","void moveTaskToFrontLocked(int taskId,int flags,Bundle options){
  if (!checkAppSwitchAllowedLocked(Binder.getCallingPid(),Binder.getCallingUid(),-1,-1,""String_Node_Str"")) {
    ActivityOptions.abort(options);
    return;
  }
  final long origId=Binder.clearCallingIdentity();
  try {
    final TaskRecord task=mStackSupervisor.anyTaskForIdLocked(taskId);
    if (task == null) {
      Slog.d(TAG,""String_Node_Str"" + taskId);
      return;
    }
    if (mStackSupervisor.isLockTaskModeViolation(task)) {
      mStackSupervisor.showLockTaskToast();
      Slog.e(TAG,""String_Node_Str"");
      return;
    }
    final ActivityRecord prev=mStackSupervisor.topRunningActivityLocked();
    if (prev != null && prev.isRecentsActivity()) {
      task.setTaskToReturnTo(ActivityRecord.RECENTS_ACTIVITY_TYPE);
    }
    mStackSupervisor.findTaskToMoveToFrontLocked(task,flags,options);
  }
  finally {
    Binder.restoreCallingIdentity(origId);
  }
  ActivityOptions.abort(options);
}",0.9758149316508938
195946,"@Override public HdmiPortInfo createFromParcel(Parcel source){
  int id=source.readInt();
  int type=source.readInt();
  int address=source.readInt();
  boolean cec=(source.readInt() == 1);
  boolean arc=(source.readInt() == 1);
  boolean mhl=(source.readInt() == 1);
  return new HdmiPortInfo(id,type,address,cec,arc,mhl);
}","@Override public HdmiPortInfo createFromParcel(Parcel source){
  int id=source.readInt();
  int type=source.readInt();
  int address=source.readInt();
  boolean cec=(source.readInt() == 1);
  boolean arc=(source.readInt() == 1);
  boolean mhl=(source.readInt() == 1);
  return new HdmiPortInfo(id,type,address,cec,mhl,arc);
}",0.9876923076923076
195947,"@Override public HdmiPortInfo createFromParcel(Parcel source){
  int id=source.readInt();
  int type=source.readInt();
  int address=source.readInt();
  boolean cec=(source.readInt() == 1);
  boolean arc=(source.readInt() == 1);
  boolean mhl=(source.readInt() == 1);
  return new HdmiPortInfo(id,type,address,cec,arc,mhl);
}","@Override public HdmiPortInfo createFromParcel(Parcel source){
  int id=source.readInt();
  int type=source.readInt();
  int address=source.readInt();
  boolean cec=(source.readInt() == 1);
  boolean arc=(source.readInt() == 1);
  boolean mhl=(source.readInt() == 1);
  return new HdmiPortInfo(id,type,address,cec,mhl,arc);
}",0.9876923076923076
195948,"@Override public HdmiPortInfo createFromParcel(Parcel source){
  int id=source.readInt();
  int type=source.readInt();
  int address=source.readInt();
  boolean cec=(source.readInt() == 1);
  boolean arc=(source.readInt() == 1);
  boolean mhl=(source.readInt() == 1);
  return new HdmiPortInfo(id,type,address,cec,arc,mhl);
}","@Override public HdmiPortInfo createFromParcel(Parcel source){
  int id=source.readInt();
  int type=source.readInt();
  int address=source.readInt();
  boolean cec=(source.readInt() == 1);
  boolean arc=(source.readInt() == 1);
  boolean mhl=(source.readInt() == 1);
  return new HdmiPortInfo(id,type,address,cec,mhl,arc);
}",0.9876923076923076
195949,"/** 
 * Resets this view's properties 
 */
void resetViewProperties(){
  setDim(0);
  setLayerType(View.LAYER_TYPE_NONE,null);
  TaskViewTransform.reset(this);
}","/** 
 * Resets this view's properties 
 */
void resetViewProperties(){
  setDim(0);
  setLayerType(View.LAYER_TYPE_NONE,null);
  TaskViewTransform.reset(this);
  if (mActionButtonView != null) {
    mActionButtonView.setScaleX(1f);
    mActionButtonView.setScaleY(1f);
    mActionButtonView.setAlpha(1f);
    mActionButtonView.setTranslationZ(mActionButtonTranslationZ);
  }
}",0.5996275605214153
195950,"@Override protected void onFinishInflate(){
  mContent=findViewById(R.id.task_view_content);
  mHeaderView=(TaskViewHeader)findViewById(R.id.task_view_bar);
  mThumbnailView=(TaskViewThumbnail)findViewById(R.id.task_view_thumbnail);
  mThumbnailView.updateClipToTaskBar(mHeaderView);
  mActionButtonView=findViewById(R.id.lock_to_app_fab);
  mActionButtonView.setOutlineProvider(new ViewOutlineProvider(){
    @Override public void getOutline(    View view,    Outline outline){
      outline.setOval(0,0,mActionButtonView.getWidth(),mActionButtonView.getHeight());
    }
  }
);
}","@Override protected void onFinishInflate(){
  mContent=findViewById(R.id.task_view_content);
  mHeaderView=(TaskViewHeader)findViewById(R.id.task_view_bar);
  mThumbnailView=(TaskViewThumbnail)findViewById(R.id.task_view_thumbnail);
  mThumbnailView.updateClipToTaskBar(mHeaderView);
  mActionButtonView=findViewById(R.id.lock_to_app_fab);
  mActionButtonView.setOutlineProvider(new ViewOutlineProvider(){
    @Override public void getOutline(    View view,    Outline outline){
      outline.setOval(0,0,mActionButtonView.getWidth(),mActionButtonView.getHeight());
    }
  }
);
  mActionButtonTranslationZ=mActionButtonView.getTranslationZ();
}",0.946938775510204
195951,"void moveTaskToFrontLocked(int taskId,int flags,Bundle options){
  if (!checkAppSwitchAllowedLocked(Binder.getCallingPid(),Binder.getCallingUid(),-1,-1,""String_Node_Str"")) {
    ActivityOptions.abort(options);
    return;
  }
  final long origId=Binder.clearCallingIdentity();
  try {
    final TaskRecord task=mStackSupervisor.anyTaskForIdLocked(taskId);
    if (task == null) {
      return;
    }
    if (mStackSupervisor.isLockTaskModeViolation(task)) {
      mStackSupervisor.showLockTaskToast();
      Slog.e(TAG,""String_Node_Str"");
      return;
    }
    final ActivityRecord prev=mStackSupervisor.topRunningActivityLocked();
    if (prev != null && prev.isRecentsActivity()) {
      task.setTaskToReturnTo(ActivityRecord.RECENTS_ACTIVITY_TYPE);
    }
    mStackSupervisor.findTaskToMoveToFrontLocked(task,flags,options);
  }
  finally {
    Binder.restoreCallingIdentity(origId);
  }
  ActivityOptions.abort(options);
}","void moveTaskToFrontLocked(int taskId,int flags,Bundle options){
  if (!checkAppSwitchAllowedLocked(Binder.getCallingPid(),Binder.getCallingUid(),-1,-1,""String_Node_Str"")) {
    ActivityOptions.abort(options);
    return;
  }
  final long origId=Binder.clearCallingIdentity();
  try {
    final TaskRecord task=mStackSupervisor.anyTaskForIdLocked(taskId);
    if (task == null) {
      Slog.d(TAG,""String_Node_Str"" + taskId);
      return;
    }
    if (mStackSupervisor.isLockTaskModeViolation(task)) {
      mStackSupervisor.showLockTaskToast();
      Slog.e(TAG,""String_Node_Str"");
      return;
    }
    final ActivityRecord prev=mStackSupervisor.topRunningActivityLocked();
    if (prev != null && prev.isRecentsActivity()) {
      task.setTaskToReturnTo(ActivityRecord.RECENTS_ACTIVITY_TYPE);
    }
    mStackSupervisor.findTaskToMoveToFrontLocked(task,flags,options);
  }
  finally {
    Binder.restoreCallingIdentity(origId);
  }
  ActivityOptions.abort(options);
}",0.9758149316508938
195952,"/** 
 * Starts the recents activity 
 */
void startRecentsActivity(ActivityManager.RunningTaskInfo topTask,boolean isTopTaskHome){
  if (sInstanceLoadPlan == null) {
    RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
    sInstanceLoadPlan=loader.createLoadPlan(mContext);
  }
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  loader.preloadTasks(sInstanceLoadPlan,isTopTaskHome);
  TaskStack stack=sInstanceLoadPlan.getTaskStack();
  mDummyStackView.updateMinMaxScrollForStack(stack,mTriggeredFromAltTab,isTopTaskHome);
  TaskStackViewLayoutAlgorithm.VisibilityReport stackVr=mDummyStackView.computeStackVisibilityReport();
  boolean hasRecentTasks=stack.getTaskCount() > 0;
  boolean useThumbnailTransition=!isTopTaskHome && hasRecentTasks;
  if (useThumbnailTransition) {
    RecentsTaskLoadPlan.Options launchOpts=new RecentsTaskLoadPlan.Options();
    launchOpts.runningTaskId=topTask.id;
    launchOpts.loadThumbnails=false;
    loader.loadTasks(mContext,sInstanceLoadPlan,launchOpts);
    ActivityOptions opts=getThumbnailTransitionActivityOptions(topTask,stack,mDummyStackView);
    if (opts != null) {
      startAlternateRecentsActivity(topTask,opts,EXTRA_FROM_APP_THUMBNAIL,stackVr);
    }
 else {
      useThumbnailTransition=false;
    }
  }
  if (!useThumbnailTransition) {
    if (hasRecentTasks) {
      String homeActivityPackage=mSystemServicesProxy.getHomeActivityPackageName();
      AppWidgetProviderInfo searchWidget=null;
      String searchWidgetPackage=null;
      if (mConfig.hasSearchBarAppWidget()) {
        searchWidget=mSystemServicesProxy.getAppWidgetInfo(mConfig.searchBarAppWidgetId);
      }
 else {
        searchWidget=mSystemServicesProxy.resolveSearchAppWidget();
      }
      if (searchWidget != null && searchWidget.provider != null) {
        searchWidgetPackage=searchWidget.provider.getPackageName();
      }
      boolean fromSearchHome=false;
      if (homeActivityPackage != null && searchWidgetPackage != null && homeActivityPackage.equals(searchWidgetPackage)) {
        fromSearchHome=true;
      }
      ActivityOptions opts=getHomeTransitionActivityOptions(fromSearchHome);
      startAlternateRecentsActivity(topTask,opts,fromSearchHome ? EXTRA_FROM_SEARCH_HOME : EXTRA_FROM_HOME,stackVr);
    }
 else {
      ActivityOptions opts=getUnknownTransitionActivityOptions();
      startAlternateRecentsActivity(topTask,opts,EXTRA_FROM_HOME,stackVr);
    }
  }
  mLastToggleTime=System.currentTimeMillis();
}","/** 
 * Starts the recents activity 
 */
void startRecentsActivity(ActivityManager.RunningTaskInfo topTask,boolean isTopTaskHome){
  if (sInstanceLoadPlan == null) {
    RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
    sInstanceLoadPlan=loader.createLoadPlan(mContext);
  }
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  loader.preloadTasks(sInstanceLoadPlan,isTopTaskHome);
  TaskStack stack=sInstanceLoadPlan.getTaskStack();
  mDummyStackView.updateMinMaxScrollForStack(stack,mTriggeredFromAltTab,isTopTaskHome);
  TaskStackViewLayoutAlgorithm.VisibilityReport stackVr=mDummyStackView.computeStackVisibilityReport();
  boolean hasRecentTasks=stack.getTaskCount() > 0;
  boolean useThumbnailTransition=!isTopTaskHome && hasRecentTasks;
  if (useThumbnailTransition) {
    RecentsTaskLoadPlan.Options launchOpts=new RecentsTaskLoadPlan.Options();
    launchOpts.runningTaskId=topTask.id;
    launchOpts.loadThumbnails=false;
    launchOpts.onlyLoadForCache=true;
    loader.loadTasks(mContext,sInstanceLoadPlan,launchOpts);
    ActivityOptions opts=getThumbnailTransitionActivityOptions(topTask,stack,mDummyStackView);
    if (opts != null) {
      startAlternateRecentsActivity(topTask,opts,EXTRA_FROM_APP_THUMBNAIL,stackVr);
    }
 else {
      useThumbnailTransition=false;
    }
  }
  if (!useThumbnailTransition) {
    if (hasRecentTasks) {
      String homeActivityPackage=mSystemServicesProxy.getHomeActivityPackageName();
      AppWidgetProviderInfo searchWidget=null;
      String searchWidgetPackage=null;
      if (mConfig.hasSearchBarAppWidget()) {
        searchWidget=mSystemServicesProxy.getAppWidgetInfo(mConfig.searchBarAppWidgetId);
      }
 else {
        searchWidget=mSystemServicesProxy.resolveSearchAppWidget();
      }
      if (searchWidget != null && searchWidget.provider != null) {
        searchWidgetPackage=searchWidget.provider.getPackageName();
      }
      boolean fromSearchHome=false;
      if (homeActivityPackage != null && searchWidgetPackage != null && homeActivityPackage.equals(searchWidgetPackage)) {
        fromSearchHome=true;
      }
      ActivityOptions opts=getHomeTransitionActivityOptions(fromSearchHome);
      startAlternateRecentsActivity(topTask,opts,fromSearchHome ? EXTRA_FROM_SEARCH_HOME : EXTRA_FROM_HOME,stackVr);
    }
 else {
      ActivityOptions opts=getUnknownTransitionActivityOptions();
      startAlternateRecentsActivity(topTask,opts,EXTRA_FROM_HOME,stackVr);
    }
  }
  mLastToggleTime=System.currentTimeMillis();
}",0.9923908690428516
195953,"public void onStart(){
  TaskStackViewLayoutAlgorithm.initializeCurve();
  reloadHeaderBarLayout();
  if (Constants.DebugFlags.App.EnableSearchLayout) {
    if (mConfig.searchBarAppWidgetId < 0) {
      AppWidgetHost host=new RecentsAppWidgetHost(mContext,Constants.Values.App.AppWidgetHostId);
      Pair<Integer,AppWidgetProviderInfo> widgetInfo=mSystemServicesProxy.bindSearchAppWidget(host);
      if (widgetInfo != null) {
        mConfig.updateSearchBarAppWidgetId(mContext,widgetInfo.first);
      }
    }
  }
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  RecentsTaskLoadPlan plan=loader.createLoadPlan(mContext);
  loader.preloadTasks(plan,true);
  RecentsTaskLoadPlan.Options launchOpts=new RecentsTaskLoadPlan.Options();
  launchOpts.numVisibleTasks=loader.getApplicationIconCacheSize();
  launchOpts.loadThumbnails=false;
  loader.loadTasks(mContext,plan,launchOpts);
}","public void onStart(){
  TaskStackViewLayoutAlgorithm.initializeCurve();
  reloadHeaderBarLayout();
  if (Constants.DebugFlags.App.EnableSearchLayout) {
    if (mConfig.searchBarAppWidgetId < 0) {
      AppWidgetHost host=new RecentsAppWidgetHost(mContext,Constants.Values.App.AppWidgetHostId);
      Pair<Integer,AppWidgetProviderInfo> widgetInfo=mSystemServicesProxy.bindSearchAppWidget(host);
      if (widgetInfo != null) {
        mConfig.updateSearchBarAppWidgetId(mContext,widgetInfo.first);
      }
    }
  }
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  RecentsTaskLoadPlan plan=loader.createLoadPlan(mContext);
  loader.preloadTasks(plan,true);
  RecentsTaskLoadPlan.Options launchOpts=new RecentsTaskLoadPlan.Options();
  launchOpts.numVisibleTasks=loader.getApplicationIconCacheSize();
  launchOpts.numVisibleTaskThumbnails=loader.getThumbnailCacheSize();
  launchOpts.onlyLoadForCache=true;
  loader.loadTasks(mContext,plan,launchOpts);
}",0.9490069779924852
195954,"/** 
 * Updates the set of recent tasks 
 */
void updateRecentsTasks(Intent launchIntent){
  boolean fromSearchHome=launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_FROM_SEARCH_HOME,false);
  int numVisibleTasks=launchIntent.getIntExtra(AlternateRecentsComponent.EXTRA_NUM_VISIBLE_TASKS,0);
  int numVisibleThumbnails=launchIntent.getIntExtra(AlternateRecentsComponent.EXTRA_NUM_VISIBLE_THUMBNAILS,0);
  mConfig.launchedFromHome=fromSearchHome || launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_FROM_HOME,false);
  mConfig.launchedFromAppWithThumbnail=launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_FROM_APP_THUMBNAIL,false);
  mConfig.launchedToTaskId=launchIntent.getIntExtra(AlternateRecentsComponent.EXTRA_FROM_TASK_ID,-1);
  mConfig.launchedWithAltTab=launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_TRIGGERED_FROM_ALT_TAB,false);
  mConfig.launchedReuseTaskStackViews=launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_REUSE_TASK_STACK_VIEWS,false);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  RecentsTaskLoadPlan plan=AlternateRecentsComponent.consumeInstanceLoadPlan();
  if (plan == null) {
    plan=loader.createLoadPlan(this);
    loader.preloadTasks(plan,mConfig.launchedFromHome);
  }
  RecentsTaskLoadPlan.Options loadOpts=new RecentsTaskLoadPlan.Options();
  loadOpts.runningTaskId=mConfig.launchedToTaskId;
  loadOpts.numVisibleTasks=numVisibleTasks;
  loadOpts.numVisibleTaskThumbnails=numVisibleThumbnails;
  loader.loadTasks(this,plan,loadOpts);
  SpaceNode root=plan.getSpaceNode();
  ArrayList<TaskStack> stacks=root.getStacks();
  boolean hasTasks=root.hasTasks();
  if (hasTasks) {
    mRecentsView.setTaskStacks(stacks);
  }
  mConfig.launchedWithNoRecentTasks=!hasTasks;
  Intent homeIntent=new Intent(Intent.ACTION_MAIN,null);
  homeIntent.addCategory(Intent.CATEGORY_HOME);
  homeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
  mFinishLaunchHomeRunnable=new FinishRecentsRunnable(homeIntent,ActivityOptions.makeCustomAnimation(this,fromSearchHome ? R.anim.recents_to_search_launcher_enter : R.anim.recents_to_launcher_enter,fromSearchHome ? R.anim.recents_to_search_launcher_exit : R.anim.recents_to_launcher_exit));
  int taskStackCount=stacks.size();
  if (mConfig.launchedToTaskId != -1) {
    for (int i=0; i < taskStackCount; i++) {
      TaskStack stack=stacks.get(i);
      ArrayList<Task> tasks=stack.getTasks();
      int taskCount=tasks.size();
      for (int j=0; j < taskCount; j++) {
        Task t=tasks.get(j);
        if (t.key.id == mConfig.launchedToTaskId) {
          t.isLaunchTarget=true;
          break;
        }
      }
    }
  }
  if (mConfig.launchedWithNoRecentTasks) {
    if (mEmptyView == null) {
      mEmptyView=mEmptyViewStub.inflate();
    }
    mEmptyView.setVisibility(View.VISIBLE);
    mRecentsView.setSearchBarVisibility(View.GONE);
  }
 else {
    if (mEmptyView != null) {
      mEmptyView.setVisibility(View.GONE);
    }
    if (mRecentsView.hasSearchBar()) {
      mRecentsView.setSearchBarVisibility(View.VISIBLE);
    }
 else {
      addSearchBarAppWidgetView();
    }
  }
  mScrimViews.prepareEnterRecentsAnimation();
}","/** 
 * Updates the set of recent tasks 
 */
void updateRecentsTasks(Intent launchIntent){
  boolean fromSearchHome=launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_FROM_SEARCH_HOME,false);
  int numVisibleTasks=launchIntent.getIntExtra(AlternateRecentsComponent.EXTRA_NUM_VISIBLE_TASKS,0);
  int numVisibleThumbnails=launchIntent.getIntExtra(AlternateRecentsComponent.EXTRA_NUM_VISIBLE_THUMBNAILS,0);
  mConfig.launchedFromHome=fromSearchHome || launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_FROM_HOME,false);
  mConfig.launchedFromAppWithThumbnail=launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_FROM_APP_THUMBNAIL,false);
  mConfig.launchedToTaskId=launchIntent.getIntExtra(AlternateRecentsComponent.EXTRA_FROM_TASK_ID,-1);
  mConfig.launchedWithAltTab=launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_TRIGGERED_FROM_ALT_TAB,false);
  mConfig.launchedReuseTaskStackViews=launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_REUSE_TASK_STACK_VIEWS,false);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  RecentsTaskLoadPlan plan=AlternateRecentsComponent.consumeInstanceLoadPlan();
  if (plan == null) {
    plan=loader.createLoadPlan(this);
  }
  if (plan.getTaskStack() == null) {
    loader.preloadTasks(plan,mConfig.launchedFromHome);
  }
  RecentsTaskLoadPlan.Options loadOpts=new RecentsTaskLoadPlan.Options();
  loadOpts.runningTaskId=mConfig.launchedToTaskId;
  loadOpts.numVisibleTasks=numVisibleTasks;
  loadOpts.numVisibleTaskThumbnails=numVisibleThumbnails;
  loader.loadTasks(this,plan,loadOpts);
  SpaceNode root=plan.getSpaceNode();
  ArrayList<TaskStack> stacks=root.getStacks();
  boolean hasTasks=root.hasTasks();
  if (hasTasks) {
    mRecentsView.setTaskStacks(stacks);
  }
  mConfig.launchedWithNoRecentTasks=!hasTasks;
  Intent homeIntent=new Intent(Intent.ACTION_MAIN,null);
  homeIntent.addCategory(Intent.CATEGORY_HOME);
  homeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
  mFinishLaunchHomeRunnable=new FinishRecentsRunnable(homeIntent,ActivityOptions.makeCustomAnimation(this,fromSearchHome ? R.anim.recents_to_search_launcher_enter : R.anim.recents_to_launcher_enter,fromSearchHome ? R.anim.recents_to_search_launcher_exit : R.anim.recents_to_launcher_exit));
  int taskStackCount=stacks.size();
  if (mConfig.launchedToTaskId != -1) {
    for (int i=0; i < taskStackCount; i++) {
      TaskStack stack=stacks.get(i);
      ArrayList<Task> tasks=stack.getTasks();
      int taskCount=tasks.size();
      for (int j=0; j < taskCount; j++) {
        Task t=tasks.get(j);
        if (t.key.id == mConfig.launchedToTaskId) {
          t.isLaunchTarget=true;
          break;
        }
      }
    }
  }
  if (mConfig.launchedWithNoRecentTasks) {
    if (mEmptyView == null) {
      mEmptyView=mEmptyViewStub.inflate();
    }
    mEmptyView.setVisibility(View.VISIBLE);
    mRecentsView.setSearchBarVisibility(View.GONE);
  }
 else {
    if (mEmptyView != null) {
      mEmptyView.setVisibility(View.GONE);
    }
    if (mRecentsView.hasSearchBar()) {
      mRecentsView.setSearchBarVisibility(View.VISIBLE);
    }
 else {
      addSearchBarAppWidgetView();
    }
  }
  mScrimViews.prepareEnterRecentsAnimation();
}",0.9936738157691716
195955,"public void loadTasks(Context context,RecentsTaskLoadPlan plan,RecentsTaskLoadPlan.Options opts){
  if (opts == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  plan.executePlan(opts,this);
  if (opts.numVisibleTasks > 0) {
    mNumVisibleTasksLoaded=opts.numVisibleTasks;
  }
  mLoader.start(context);
}","/** 
 * Begins loading the heavy task data according to the specified options. 
 */
public void loadTasks(Context context,RecentsTaskLoadPlan plan,RecentsTaskLoadPlan.Options opts){
  if (opts == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  plan.executePlan(opts,this);
  if (!opts.onlyLoadForCache) {
    mNumVisibleTasksLoaded=opts.numVisibleTasks;
    mLoader.start(context);
  }
}",0.7486187845303868
195956,"public RecentsTaskLoadPlan createLoadPlan(Context context){
  RecentsConfiguration config=RecentsConfiguration.getInstance();
  RecentsTaskLoadPlan plan=new RecentsTaskLoadPlan(context,config,mSystemServicesProxy);
  return plan;
}","/** 
 * Creates a new plan for loading the recent tasks. 
 */
public RecentsTaskLoadPlan createLoadPlan(Context context){
  RecentsConfiguration config=RecentsConfiguration.getInstance();
  RecentsTaskLoadPlan plan=new RecentsTaskLoadPlan(context,config,mSystemServicesProxy);
  return plan;
}",0.8816793893129771
195957,"public void preloadTasks(RecentsTaskLoadPlan plan,boolean isTopTaskHome){
  plan.preloadPlan(this,isTopTaskHome);
}","/** 
 * Preloads recents tasks using the specified plan to store the output. 
 */
public void preloadTasks(RecentsTaskLoadPlan plan,boolean isTopTaskHome){
  plan.preloadPlan(this,isTopTaskHome);
}",0.7371794871794872
195958,"@Override public HdmiPortInfo createFromParcel(Parcel source){
  int id=source.readInt();
  int type=source.readInt();
  int address=source.readInt();
  boolean cec=(source.readInt() == 1);
  boolean arc=(source.readInt() == 1);
  boolean mhl=(source.readInt() == 1);
  return new HdmiPortInfo(id,type,address,cec,arc,mhl);
}","@Override public HdmiPortInfo createFromParcel(Parcel source){
  int id=source.readInt();
  int type=source.readInt();
  int address=source.readInt();
  boolean cec=(source.readInt() == 1);
  boolean arc=(source.readInt() == 1);
  boolean mhl=(source.readInt() == 1);
  return new HdmiPortInfo(id,type,address,cec,mhl,arc);
}",0.9876923076923076
195959,"public void onExpansionStopped(){
  mIsExpansionChanging=false;
  mStackScrollAlgorithm.onExpansionStopped();
  if (!mIsExpanded) {
    mOwnScrollY=0;
  }
}","public void onExpansionStopped(){
  mIsExpansionChanging=false;
  mStackScrollAlgorithm.onExpansionStopped();
  if (!mIsExpanded) {
    mOwnScrollY=0;
    getOverlay().clear();
  }
}",0.9230769230769232
195960,"/** 
 * Process the animationEvents for a new animation
 * @param animationEvents the animation events for the animation to perform
 * @param finalState the final state to animate to
 */
private void processAnimationEvents(ArrayList<NotificationStackScrollLayout.AnimationEvent> animationEvents,StackScrollState finalState){
  for (  NotificationStackScrollLayout.AnimationEvent event : animationEvents) {
    final ExpandableView changingView=(ExpandableView)event.changingView;
    if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_ADD) {
      StackScrollState.ViewState viewState=finalState.getViewStateForView(changingView);
      if (viewState == null) {
        continue;
      }
      if (changingView.getVisibility() == View.GONE) {
        finalState.removeViewStateForView(changingView);
        continue;
      }
      changingView.setAlpha(viewState.alpha);
      changingView.setTranslationY(viewState.yTranslation);
      changingView.setTranslationZ(viewState.zTranslation);
      changingView.setActualHeight(viewState.height,false);
      mNewAddChildren.add(changingView);
    }
 else     if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_REMOVE) {
      if (changingView.getVisibility() == View.GONE) {
        mHostLayout.getOverlay().remove(changingView);
        continue;
      }
      StackScrollState.ViewState viewState=finalState.getViewStateForView(event.viewAfterChangingView);
      int actualHeight=changingView.getActualHeight();
      float translationDirection=-1.0f;
      if (viewState != null) {
        translationDirection=((viewState.yTranslation - (changingView.getTranslationY() + actualHeight / 2.0f)) * 2 / actualHeight);
        translationDirection=Math.max(Math.min(translationDirection,1.0f),-1.0f);
      }
      changingView.performRemoveAnimation(ANIMATION_DURATION_APPEAR_DISAPPEAR,translationDirection,new Runnable(){
        @Override public void run(){
          mHostLayout.getOverlay().remove(changingView);
        }
      }
);
    }
    mNewEvents.add(event);
  }
}","/** 
 * Process the animationEvents for a new animation
 * @param animationEvents the animation events for the animation to perform
 * @param finalState the final state to animate to
 */
private void processAnimationEvents(ArrayList<NotificationStackScrollLayout.AnimationEvent> animationEvents,StackScrollState finalState){
  for (  NotificationStackScrollLayout.AnimationEvent event : animationEvents) {
    final ExpandableView changingView=(ExpandableView)event.changingView;
    if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_ADD) {
      StackScrollState.ViewState viewState=finalState.getViewStateForView(changingView);
      if (viewState == null) {
        continue;
      }
      if (changingView.getVisibility() == View.GONE) {
        finalState.removeViewStateForView(changingView);
        continue;
      }
      changingView.setAlpha(viewState.alpha);
      changingView.setTranslationY(viewState.yTranslation);
      changingView.setTranslationZ(viewState.zTranslation);
      changingView.setActualHeight(viewState.height,false);
      mNewAddChildren.add(changingView);
    }
 else     if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_REMOVE) {
      if (changingView.getVisibility() == View.GONE) {
        mHostLayout.getOverlay().remove(changingView);
        continue;
      }
      StackScrollState.ViewState viewState=finalState.getViewStateForView(event.viewAfterChangingView);
      int actualHeight=changingView.getActualHeight();
      float translationDirection=-1.0f;
      if (viewState != null) {
        translationDirection=((viewState.yTranslation - (changingView.getTranslationY() + actualHeight / 2.0f)) * 2 / actualHeight);
        translationDirection=Math.max(Math.min(translationDirection,1.0f),-1.0f);
      }
      changingView.performRemoveAnimation(ANIMATION_DURATION_APPEAR_DISAPPEAR,translationDirection,new Runnable(){
        @Override public void run(){
          mHostLayout.getOverlay().remove(changingView);
        }
      }
);
    }
 else     if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_REMOVE_SWIPED_OUT) {
      mHostLayout.getOverlay().remove(changingView);
    }
    mNewEvents.add(event);
  }
}",0.9595428571428573
195961,"private boolean inflateViews(NotificationData.Entry entry,ViewGroup parent,boolean isHeadsUp){
  PackageManager pmUser=getPackageManagerForUser(entry.notification.getUser().getIdentifier());
  int maxHeight=mRowMaxHeight;
  final StatusBarNotification sbn=entry.notification;
  RemoteViews contentView=sbn.getNotification().contentView;
  RemoteViews bigContentView=sbn.getNotification().bigContentView;
  if (isHeadsUp) {
    maxHeight=mContext.getResources().getDimensionPixelSize(R.dimen.notification_mid_height);
    bigContentView=sbn.getNotification().headsUpContentView;
  }
  if (contentView == null) {
    return false;
  }
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + sbn.getNotification().publicVersion);
  }
  Notification publicNotification=sbn.getNotification().publicVersion;
  ExpandableNotificationRow row;
  boolean hasUserChangedExpansion=false;
  boolean userExpanded=false;
  boolean userLocked=false;
  if (entry.row != null) {
    row=entry.row;
    hasUserChangedExpansion=row.hasUserChangedExpansion();
    userExpanded=row.isUserExpanded();
    userLocked=row.isUserLocked();
    entry.reset();
    if (hasUserChangedExpansion) {
      row.setUserExpanded(userExpanded);
    }
  }
 else {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    row=(ExpandableNotificationRow)inflater.inflate(R.layout.status_bar_notification_row,parent,false);
    row.setExpansionLogger(this,entry.notification.getKey());
  }
  workAroundBadLayerDrawableOpacity(row);
  View vetoButton=updateNotificationVetoButton(row,sbn);
  vetoButton.setContentDescription(mContext.getString(R.string.accessibility_remove_notification));
  NotificationContentView expanded=(NotificationContentView)row.findViewById(R.id.expanded);
  NotificationContentView expandedPublic=(NotificationContentView)row.findViewById(R.id.expandedPublic);
  row.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
  PendingIntent contentIntent=sbn.getNotification().contentIntent;
  if (contentIntent != null) {
    final View.OnClickListener listener=makeClicker(contentIntent,sbn.getKey(),isHeadsUp);
    row.setOnClickListener(listener);
  }
 else {
    row.setOnClickListener(null);
  }
  View contentViewLocal=null;
  View bigContentViewLocal=null;
  try {
    contentViewLocal=contentView.apply(mContext,expanded,mOnClickHandler);
    if (bigContentView != null) {
      bigContentViewLocal=bigContentView.apply(mContext,expanded,mOnClickHandler);
    }
  }
 catch (  RuntimeException e) {
    final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
    Log.e(TAG,""String_Node_Str"" + ident,e);
    return false;
  }
  if (contentViewLocal != null) {
    contentViewLocal.setIsRootNamespace(true);
    expanded.setContractedChild(contentViewLocal);
  }
  if (bigContentViewLocal != null) {
    bigContentViewLocal.setIsRootNamespace(true);
    expanded.setExpandedChild(bigContentViewLocal);
  }
  View publicViewLocal=null;
  if (publicNotification != null) {
    try {
      publicViewLocal=publicNotification.contentView.apply(mContext,expandedPublic,mOnClickHandler);
      if (publicViewLocal != null) {
        publicViewLocal.setIsRootNamespace(true);
        expandedPublic.setContractedChild(publicViewLocal);
      }
    }
 catch (    RuntimeException e) {
      final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
      Log.e(TAG,""String_Node_Str"" + ident,e);
      publicViewLocal=null;
    }
  }
  try {
    ApplicationInfo info=pmUser.getApplicationInfo(sbn.getPackageName(),0);
    entry.targetSdk=info.targetSdkVersion;
  }
 catch (  NameNotFoundException ex) {
    Log.e(TAG,""String_Node_Str"" + sbn.getPackageName(),ex);
  }
  if (publicViewLocal == null) {
    publicViewLocal=LayoutInflater.from(mContext).inflate(R.layout.notification_public_default,expandedPublic,false);
    publicViewLocal.setIsRootNamespace(true);
    expandedPublic.setContractedChild(publicViewLocal);
    final TextView title=(TextView)publicViewLocal.findViewById(R.id.title);
    try {
      title.setText(pmUser.getApplicationLabel(pmUser.getApplicationInfo(entry.notification.getPackageName(),0)));
    }
 catch (    NameNotFoundException e) {
      title.setText(entry.notification.getPackageName());
    }
    final ImageView icon=(ImageView)publicViewLocal.findViewById(R.id.icon);
    final ImageView profileBadge=(ImageView)publicViewLocal.findViewById(R.id.profile_badge_line3);
    final StatusBarIcon ic=new StatusBarIcon(entry.notification.getPackageName(),entry.notification.getUser(),entry.notification.getNotification().icon,entry.notification.getNotification().iconLevel,entry.notification.getNotification().number,entry.notification.getNotification().tickerText);
    Drawable iconDrawable=StatusBarIconView.getIcon(mContext,ic);
    icon.setImageDrawable(iconDrawable);
    if (entry.targetSdk >= Build.VERSION_CODES.LOLLIPOP || mNotificationColorUtil.isGrayscaleIcon(iconDrawable)) {
      icon.setBackgroundResource(com.android.internal.R.drawable.notification_icon_legacy_bg);
      int padding=mContext.getResources().getDimensionPixelSize(com.android.internal.R.dimen.notification_large_icon_circle_padding);
      icon.setPadding(padding,padding,padding,padding);
      if (sbn.getNotification().color != Notification.COLOR_DEFAULT) {
        icon.getBackground().setColorFilter(sbn.getNotification().color,PorterDuff.Mode.SRC_ATOP);
      }
    }
    if (profileBadge != null) {
      Drawable profileDrawable=mContext.getPackageManager().getUserBadgeForDensity(entry.notification.getUser(),0);
      if (profileDrawable != null) {
        profileBadge.setImageDrawable(profileDrawable);
        profileBadge.setVisibility(View.VISIBLE);
      }
 else {
        profileBadge.setVisibility(View.GONE);
      }
    }
    final View privateTime=contentViewLocal.findViewById(com.android.internal.R.id.time);
    final DateTimeView time=(DateTimeView)publicViewLocal.findViewById(R.id.time);
    if (privateTime != null && privateTime.getVisibility() == View.VISIBLE) {
      time.setVisibility(View.VISIBLE);
      time.setTime(entry.notification.getNotification().when);
    }
    final TextView text=(TextView)publicViewLocal.findViewById(R.id.text);
    if (text != null) {
      text.setText(R.string.notification_hidden_text);
      text.setTextAppearance(mContext,R.style.TextAppearance_Material_Notification_Parenthetical);
    }
    int topPadding=Notification.Builder.calculateTopPadding(mContext,false,mContext.getResources().getConfiguration().fontScale);
    title.setPadding(0,topPadding,0,0);
    entry.autoRedacted=true;
  }
  row.setClearable(sbn.isClearable());
  if (MULTIUSER_DEBUG) {
    TextView debug=(TextView)row.findViewById(R.id.debug_info);
    if (debug != null) {
      debug.setVisibility(View.VISIBLE);
      debug.setText(""String_Node_Str"" + mCurrentUserId + ""String_Node_Str""+ entry.notification.getUserId());
    }
  }
  entry.row=row;
  entry.row.setHeightRange(mRowMinHeight,maxHeight);
  entry.row.setOnActivatedListener(this);
  entry.expanded=contentViewLocal;
  entry.expandedPublic=publicViewLocal;
  entry.setBigContentView(bigContentViewLocal);
  applyColorsAndBackgrounds(sbn,entry);
  if (hasUserChangedExpansion) {
    row.setUserExpanded(userExpanded);
  }
  row.setUserLocked(userLocked);
  row.setStatusBarNotification(entry.notification);
  return true;
}","private boolean inflateViews(NotificationData.Entry entry,ViewGroup parent,boolean isHeadsUp){
  PackageManager pmUser=getPackageManagerForUser(entry.notification.getUser().getIdentifier());
  int maxHeight=mRowMaxHeight;
  final StatusBarNotification sbn=entry.notification;
  RemoteViews contentView=sbn.getNotification().contentView;
  RemoteViews bigContentView=sbn.getNotification().bigContentView;
  if (isHeadsUp) {
    maxHeight=mContext.getResources().getDimensionPixelSize(R.dimen.notification_mid_height);
    bigContentView=sbn.getNotification().headsUpContentView;
  }
  if (contentView == null) {
    return false;
  }
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + sbn.getNotification().publicVersion);
  }
  Notification publicNotification=sbn.getNotification().publicVersion;
  ExpandableNotificationRow row;
  boolean hasUserChangedExpansion=false;
  boolean userExpanded=false;
  boolean userLocked=false;
  if (entry.row != null) {
    row=entry.row;
    hasUserChangedExpansion=row.hasUserChangedExpansion();
    userExpanded=row.isUserExpanded();
    userLocked=row.isUserLocked();
    entry.reset();
    if (hasUserChangedExpansion) {
      row.setUserExpanded(userExpanded);
    }
  }
 else {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    row=(ExpandableNotificationRow)inflater.inflate(R.layout.status_bar_notification_row,parent,false);
    row.setExpansionLogger(this,entry.notification.getKey());
  }
  workAroundBadLayerDrawableOpacity(row);
  View vetoButton=updateNotificationVetoButton(row,sbn);
  vetoButton.setContentDescription(mContext.getString(R.string.accessibility_remove_notification));
  NotificationContentView expanded=(NotificationContentView)row.findViewById(R.id.expanded);
  NotificationContentView expandedPublic=(NotificationContentView)row.findViewById(R.id.expandedPublic);
  row.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
  PendingIntent contentIntent=sbn.getNotification().contentIntent;
  if (contentIntent != null) {
    final View.OnClickListener listener=makeClicker(contentIntent,sbn.getKey(),isHeadsUp);
    row.setOnClickListener(listener);
  }
 else {
    row.setOnClickListener(null);
  }
  View contentViewLocal=null;
  View bigContentViewLocal=null;
  try {
    contentViewLocal=contentView.apply(mContext,expanded,mOnClickHandler);
    if (bigContentView != null) {
      bigContentViewLocal=bigContentView.apply(mContext,expanded,mOnClickHandler);
    }
  }
 catch (  RuntimeException e) {
    final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
    Log.e(TAG,""String_Node_Str"" + ident,e);
    return false;
  }
  if (contentViewLocal != null) {
    contentViewLocal.setIsRootNamespace(true);
    expanded.setContractedChild(contentViewLocal);
  }
  if (bigContentViewLocal != null) {
    bigContentViewLocal.setIsRootNamespace(true);
    expanded.setExpandedChild(bigContentViewLocal);
  }
  View publicViewLocal=null;
  if (publicNotification != null) {
    try {
      publicViewLocal=publicNotification.contentView.apply(mContext,expandedPublic,mOnClickHandler);
      if (publicViewLocal != null) {
        publicViewLocal.setIsRootNamespace(true);
        expandedPublic.setContractedChild(publicViewLocal);
      }
    }
 catch (    RuntimeException e) {
      final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
      Log.e(TAG,""String_Node_Str"" + ident,e);
      publicViewLocal=null;
    }
  }
  try {
    ApplicationInfo info=pmUser.getApplicationInfo(sbn.getPackageName(),0);
    entry.targetSdk=info.targetSdkVersion;
  }
 catch (  NameNotFoundException ex) {
    Log.e(TAG,""String_Node_Str"" + sbn.getPackageName(),ex);
  }
  if (publicViewLocal == null) {
    publicViewLocal=LayoutInflater.from(mContext).inflate(R.layout.notification_public_default,expandedPublic,false);
    publicViewLocal.setIsRootNamespace(true);
    expandedPublic.setContractedChild(publicViewLocal);
    final TextView title=(TextView)publicViewLocal.findViewById(R.id.title);
    try {
      title.setText(pmUser.getApplicationLabel(pmUser.getApplicationInfo(entry.notification.getPackageName(),0)));
    }
 catch (    NameNotFoundException e) {
      title.setText(entry.notification.getPackageName());
    }
    final ImageView icon=(ImageView)publicViewLocal.findViewById(R.id.icon);
    final ImageView profileBadge=(ImageView)publicViewLocal.findViewById(R.id.profile_badge_line3);
    final StatusBarIcon ic=new StatusBarIcon(entry.notification.getPackageName(),entry.notification.getUser(),entry.notification.getNotification().icon,entry.notification.getNotification().iconLevel,entry.notification.getNotification().number,entry.notification.getNotification().tickerText);
    Drawable iconDrawable=StatusBarIconView.getIcon(mContext,ic);
    icon.setImageDrawable(iconDrawable);
    if (entry.targetSdk >= Build.VERSION_CODES.LOLLIPOP || mNotificationColorUtil.isGrayscaleIcon(iconDrawable)) {
      icon.setBackgroundResource(com.android.internal.R.drawable.notification_icon_legacy_bg);
      int padding=mContext.getResources().getDimensionPixelSize(com.android.internal.R.dimen.notification_large_icon_circle_padding);
      icon.setPadding(padding,padding,padding,padding);
      if (sbn.getNotification().color != Notification.COLOR_DEFAULT) {
        icon.getBackground().setColorFilter(sbn.getNotification().color,PorterDuff.Mode.SRC_ATOP);
      }
    }
    if (profileBadge != null) {
      Drawable profileDrawable=mContext.getPackageManager().getUserBadgeForDensity(entry.notification.getUser(),0);
      if (profileDrawable != null) {
        profileBadge.setImageDrawable(profileDrawable);
        profileBadge.setVisibility(View.VISIBLE);
      }
 else {
        profileBadge.setVisibility(View.GONE);
      }
    }
    final View privateTime=contentViewLocal.findViewById(com.android.internal.R.id.time);
    final DateTimeView time=(DateTimeView)publicViewLocal.findViewById(R.id.time);
    if (privateTime != null && privateTime.getVisibility() == View.VISIBLE) {
      time.setVisibility(View.VISIBLE);
      time.setTime(entry.notification.getNotification().when);
    }
    final TextView text=(TextView)publicViewLocal.findViewById(R.id.text);
    if (text != null) {
      text.setText(R.string.notification_hidden_text);
      text.setTextAppearance(mContext,R.style.TextAppearance_Material_Notification_Parenthetical);
    }
    int topPadding=Notification.Builder.calculateTopPadding(mContext,false,mContext.getResources().getConfiguration().fontScale);
    title.setPadding(0,topPadding,0,0);
    entry.autoRedacted=true;
  }
  if (MULTIUSER_DEBUG) {
    TextView debug=(TextView)row.findViewById(R.id.debug_info);
    if (debug != null) {
      debug.setVisibility(View.VISIBLE);
      debug.setText(""String_Node_Str"" + mCurrentUserId + ""String_Node_Str""+ entry.notification.getUserId());
    }
  }
  entry.row=row;
  entry.row.setHeightRange(mRowMinHeight,maxHeight);
  entry.row.setOnActivatedListener(this);
  entry.expanded=contentViewLocal;
  entry.expandedPublic=publicViewLocal;
  entry.setBigContentView(bigContentViewLocal);
  applyColorsAndBackgrounds(sbn,entry);
  if (hasUserChangedExpansion) {
    row.setUserExpanded(userExpanded);
  }
  row.setUserLocked(userLocked);
  row.setStatusBarNotification(entry.notification);
  return true;
}",0.9973774460359088
195962,"/** 
 * @return Can the underlying notification be cleared?
 */
public boolean isClearable(){
  return mClearable;
}","/** 
 * @return Can the underlying notification be cleared?
 */
public boolean isClearable(){
  return mStatusBarNotification != null && mStatusBarNotification.isClearable();
}",0.7945205479452054
195963,"public void setStatusBarNotification(StatusBarNotification statusBarNotification){
  mStatusBarNotification=statusBarNotification;
}","public void setStatusBarNotification(StatusBarNotification statusBarNotification){
  mStatusBarNotification=statusBarNotification;
  updateVetoButton();
}",0.9230769230769232
195964,"public void onExpansionStopped(){
  mIsExpansionChanging=false;
  mStackScrollAlgorithm.onExpansionStopped();
  if (!mIsExpanded) {
    mOwnScrollY=0;
  }
}","public void onExpansionStopped(){
  mIsExpansionChanging=false;
  mStackScrollAlgorithm.onExpansionStopped();
  if (!mIsExpanded) {
    mOwnScrollY=0;
    getOverlay().clear();
  }
}",0.9230769230769232
195965,"/** 
 * Process the animationEvents for a new animation
 * @param animationEvents the animation events for the animation to perform
 * @param finalState the final state to animate to
 */
private void processAnimationEvents(ArrayList<NotificationStackScrollLayout.AnimationEvent> animationEvents,StackScrollState finalState){
  for (  NotificationStackScrollLayout.AnimationEvent event : animationEvents) {
    final ExpandableView changingView=(ExpandableView)event.changingView;
    if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_ADD) {
      StackScrollState.ViewState viewState=finalState.getViewStateForView(changingView);
      if (viewState == null) {
        continue;
      }
      if (changingView.getVisibility() == View.GONE) {
        finalState.removeViewStateForView(changingView);
        continue;
      }
      changingView.setAlpha(viewState.alpha);
      changingView.setTranslationY(viewState.yTranslation);
      changingView.setTranslationZ(viewState.zTranslation);
      changingView.setActualHeight(viewState.height,false);
      mNewAddChildren.add(changingView);
    }
 else     if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_REMOVE) {
      if (changingView.getVisibility() == View.GONE) {
        mHostLayout.getOverlay().remove(changingView);
        continue;
      }
      StackScrollState.ViewState viewState=finalState.getViewStateForView(event.viewAfterChangingView);
      int actualHeight=changingView.getActualHeight();
      float translationDirection=-1.0f;
      if (viewState != null) {
        translationDirection=((viewState.yTranslation - (changingView.getTranslationY() + actualHeight / 2.0f)) * 2 / actualHeight);
        translationDirection=Math.max(Math.min(translationDirection,1.0f),-1.0f);
      }
      changingView.performRemoveAnimation(ANIMATION_DURATION_APPEAR_DISAPPEAR,translationDirection,new Runnable(){
        @Override public void run(){
          mHostLayout.getOverlay().remove(changingView);
        }
      }
);
    }
    mNewEvents.add(event);
  }
}","/** 
 * Process the animationEvents for a new animation
 * @param animationEvents the animation events for the animation to perform
 * @param finalState the final state to animate to
 */
private void processAnimationEvents(ArrayList<NotificationStackScrollLayout.AnimationEvent> animationEvents,StackScrollState finalState){
  for (  NotificationStackScrollLayout.AnimationEvent event : animationEvents) {
    final ExpandableView changingView=(ExpandableView)event.changingView;
    if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_ADD) {
      StackScrollState.ViewState viewState=finalState.getViewStateForView(changingView);
      if (viewState == null) {
        continue;
      }
      if (changingView.getVisibility() == View.GONE) {
        finalState.removeViewStateForView(changingView);
        continue;
      }
      changingView.setAlpha(viewState.alpha);
      changingView.setTranslationY(viewState.yTranslation);
      changingView.setTranslationZ(viewState.zTranslation);
      changingView.setActualHeight(viewState.height,false);
      mNewAddChildren.add(changingView);
    }
 else     if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_REMOVE) {
      if (changingView.getVisibility() == View.GONE) {
        mHostLayout.getOverlay().remove(changingView);
        continue;
      }
      StackScrollState.ViewState viewState=finalState.getViewStateForView(event.viewAfterChangingView);
      int actualHeight=changingView.getActualHeight();
      float translationDirection=-1.0f;
      if (viewState != null) {
        translationDirection=((viewState.yTranslation - (changingView.getTranslationY() + actualHeight / 2.0f)) * 2 / actualHeight);
        translationDirection=Math.max(Math.min(translationDirection,1.0f),-1.0f);
      }
      changingView.performRemoveAnimation(ANIMATION_DURATION_APPEAR_DISAPPEAR,translationDirection,new Runnable(){
        @Override public void run(){
          mHostLayout.getOverlay().remove(changingView);
        }
      }
);
    }
 else     if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_REMOVE_SWIPED_OUT) {
      mHostLayout.getOverlay().remove(changingView);
    }
    mNewEvents.add(event);
  }
}",0.9595428571428573
195966,"private boolean inflateViews(NotificationData.Entry entry,ViewGroup parent,boolean isHeadsUp){
  PackageManager pmUser=getPackageManagerForUser(entry.notification.getUser().getIdentifier());
  int maxHeight=mRowMaxHeight;
  final StatusBarNotification sbn=entry.notification;
  RemoteViews contentView=sbn.getNotification().contentView;
  RemoteViews bigContentView=sbn.getNotification().bigContentView;
  if (isHeadsUp) {
    maxHeight=mContext.getResources().getDimensionPixelSize(R.dimen.notification_mid_height);
    bigContentView=sbn.getNotification().headsUpContentView;
  }
  if (contentView == null) {
    return false;
  }
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + sbn.getNotification().publicVersion);
  }
  Notification publicNotification=sbn.getNotification().publicVersion;
  ExpandableNotificationRow row;
  boolean hasUserChangedExpansion=false;
  boolean userExpanded=false;
  boolean userLocked=false;
  if (entry.row != null) {
    row=entry.row;
    hasUserChangedExpansion=row.hasUserChangedExpansion();
    userExpanded=row.isUserExpanded();
    userLocked=row.isUserLocked();
    entry.reset();
    if (hasUserChangedExpansion) {
      row.setUserExpanded(userExpanded);
    }
  }
 else {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    row=(ExpandableNotificationRow)inflater.inflate(R.layout.status_bar_notification_row,parent,false);
    row.setExpansionLogger(this,entry.notification.getKey());
  }
  workAroundBadLayerDrawableOpacity(row);
  View vetoButton=updateNotificationVetoButton(row,sbn);
  vetoButton.setContentDescription(mContext.getString(R.string.accessibility_remove_notification));
  NotificationContentView expanded=(NotificationContentView)row.findViewById(R.id.expanded);
  NotificationContentView expandedPublic=(NotificationContentView)row.findViewById(R.id.expandedPublic);
  row.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
  PendingIntent contentIntent=sbn.getNotification().contentIntent;
  if (contentIntent != null) {
    final View.OnClickListener listener=makeClicker(contentIntent,sbn.getKey(),isHeadsUp);
    row.setOnClickListener(listener);
  }
 else {
    row.setOnClickListener(null);
  }
  View contentViewLocal=null;
  View bigContentViewLocal=null;
  try {
    contentViewLocal=contentView.apply(mContext,expanded,mOnClickHandler);
    if (bigContentView != null) {
      bigContentViewLocal=bigContentView.apply(mContext,expanded,mOnClickHandler);
    }
  }
 catch (  RuntimeException e) {
    final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
    Log.e(TAG,""String_Node_Str"" + ident,e);
    return false;
  }
  if (contentViewLocal != null) {
    contentViewLocal.setIsRootNamespace(true);
    expanded.setContractedChild(contentViewLocal);
  }
  if (bigContentViewLocal != null) {
    bigContentViewLocal.setIsRootNamespace(true);
    expanded.setExpandedChild(bigContentViewLocal);
  }
  View publicViewLocal=null;
  if (publicNotification != null) {
    try {
      publicViewLocal=publicNotification.contentView.apply(mContext,expandedPublic,mOnClickHandler);
      if (publicViewLocal != null) {
        publicViewLocal.setIsRootNamespace(true);
        expandedPublic.setContractedChild(publicViewLocal);
      }
    }
 catch (    RuntimeException e) {
      final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
      Log.e(TAG,""String_Node_Str"" + ident,e);
      publicViewLocal=null;
    }
  }
  try {
    ApplicationInfo info=pmUser.getApplicationInfo(sbn.getPackageName(),0);
    entry.targetSdk=info.targetSdkVersion;
  }
 catch (  NameNotFoundException ex) {
    Log.e(TAG,""String_Node_Str"" + sbn.getPackageName(),ex);
  }
  if (publicViewLocal == null) {
    publicViewLocal=LayoutInflater.from(mContext).inflate(R.layout.notification_public_default,expandedPublic,false);
    publicViewLocal.setIsRootNamespace(true);
    expandedPublic.setContractedChild(publicViewLocal);
    final TextView title=(TextView)publicViewLocal.findViewById(R.id.title);
    try {
      title.setText(pmUser.getApplicationLabel(pmUser.getApplicationInfo(entry.notification.getPackageName(),0)));
    }
 catch (    NameNotFoundException e) {
      title.setText(entry.notification.getPackageName());
    }
    final ImageView icon=(ImageView)publicViewLocal.findViewById(R.id.icon);
    final ImageView profileBadge=(ImageView)publicViewLocal.findViewById(R.id.profile_badge_line3);
    final StatusBarIcon ic=new StatusBarIcon(entry.notification.getPackageName(),entry.notification.getUser(),entry.notification.getNotification().icon,entry.notification.getNotification().iconLevel,entry.notification.getNotification().number,entry.notification.getNotification().tickerText);
    Drawable iconDrawable=StatusBarIconView.getIcon(mContext,ic);
    icon.setImageDrawable(iconDrawable);
    if (entry.targetSdk >= Build.VERSION_CODES.LOLLIPOP || mNotificationColorUtil.isGrayscaleIcon(iconDrawable)) {
      icon.setBackgroundResource(com.android.internal.R.drawable.notification_icon_legacy_bg);
      int padding=mContext.getResources().getDimensionPixelSize(com.android.internal.R.dimen.notification_large_icon_circle_padding);
      icon.setPadding(padding,padding,padding,padding);
      if (sbn.getNotification().color != Notification.COLOR_DEFAULT) {
        icon.getBackground().setColorFilter(sbn.getNotification().color,PorterDuff.Mode.SRC_ATOP);
      }
    }
    if (profileBadge != null) {
      Drawable profileDrawable=mContext.getPackageManager().getUserBadgeForDensity(entry.notification.getUser(),0);
      if (profileDrawable != null) {
        profileBadge.setImageDrawable(profileDrawable);
        profileBadge.setVisibility(View.VISIBLE);
      }
 else {
        profileBadge.setVisibility(View.GONE);
      }
    }
    final View privateTime=contentViewLocal.findViewById(com.android.internal.R.id.time);
    final DateTimeView time=(DateTimeView)publicViewLocal.findViewById(R.id.time);
    if (privateTime != null && privateTime.getVisibility() == View.VISIBLE) {
      time.setVisibility(View.VISIBLE);
      time.setTime(entry.notification.getNotification().when);
    }
    final TextView text=(TextView)publicViewLocal.findViewById(R.id.text);
    if (text != null) {
      text.setText(R.string.notification_hidden_text);
      text.setTextAppearance(mContext,R.style.TextAppearance_Material_Notification_Parenthetical);
    }
    int topPadding=Notification.Builder.calculateTopPadding(mContext,false,mContext.getResources().getConfiguration().fontScale);
    title.setPadding(0,topPadding,0,0);
    entry.autoRedacted=true;
  }
  row.setClearable(sbn.isClearable());
  if (MULTIUSER_DEBUG) {
    TextView debug=(TextView)row.findViewById(R.id.debug_info);
    if (debug != null) {
      debug.setVisibility(View.VISIBLE);
      debug.setText(""String_Node_Str"" + mCurrentUserId + ""String_Node_Str""+ entry.notification.getUserId());
    }
  }
  entry.row=row;
  entry.row.setHeightRange(mRowMinHeight,maxHeight);
  entry.row.setOnActivatedListener(this);
  entry.expanded=contentViewLocal;
  entry.expandedPublic=publicViewLocal;
  entry.setBigContentView(bigContentViewLocal);
  applyColorsAndBackgrounds(sbn,entry);
  if (hasUserChangedExpansion) {
    row.setUserExpanded(userExpanded);
  }
  row.setUserLocked(userLocked);
  row.setStatusBarNotification(entry.notification);
  return true;
}","private boolean inflateViews(NotificationData.Entry entry,ViewGroup parent,boolean isHeadsUp){
  PackageManager pmUser=getPackageManagerForUser(entry.notification.getUser().getIdentifier());
  int maxHeight=mRowMaxHeight;
  final StatusBarNotification sbn=entry.notification;
  RemoteViews contentView=sbn.getNotification().contentView;
  RemoteViews bigContentView=sbn.getNotification().bigContentView;
  if (isHeadsUp) {
    maxHeight=mContext.getResources().getDimensionPixelSize(R.dimen.notification_mid_height);
    bigContentView=sbn.getNotification().headsUpContentView;
  }
  if (contentView == null) {
    return false;
  }
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + sbn.getNotification().publicVersion);
  }
  Notification publicNotification=sbn.getNotification().publicVersion;
  ExpandableNotificationRow row;
  boolean hasUserChangedExpansion=false;
  boolean userExpanded=false;
  boolean userLocked=false;
  if (entry.row != null) {
    row=entry.row;
    hasUserChangedExpansion=row.hasUserChangedExpansion();
    userExpanded=row.isUserExpanded();
    userLocked=row.isUserLocked();
    entry.reset();
    if (hasUserChangedExpansion) {
      row.setUserExpanded(userExpanded);
    }
  }
 else {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    row=(ExpandableNotificationRow)inflater.inflate(R.layout.status_bar_notification_row,parent,false);
    row.setExpansionLogger(this,entry.notification.getKey());
  }
  workAroundBadLayerDrawableOpacity(row);
  View vetoButton=updateNotificationVetoButton(row,sbn);
  vetoButton.setContentDescription(mContext.getString(R.string.accessibility_remove_notification));
  NotificationContentView expanded=(NotificationContentView)row.findViewById(R.id.expanded);
  NotificationContentView expandedPublic=(NotificationContentView)row.findViewById(R.id.expandedPublic);
  row.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
  PendingIntent contentIntent=sbn.getNotification().contentIntent;
  if (contentIntent != null) {
    final View.OnClickListener listener=makeClicker(contentIntent,sbn.getKey(),isHeadsUp);
    row.setOnClickListener(listener);
  }
 else {
    row.setOnClickListener(null);
  }
  View contentViewLocal=null;
  View bigContentViewLocal=null;
  try {
    contentViewLocal=contentView.apply(mContext,expanded,mOnClickHandler);
    if (bigContentView != null) {
      bigContentViewLocal=bigContentView.apply(mContext,expanded,mOnClickHandler);
    }
  }
 catch (  RuntimeException e) {
    final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
    Log.e(TAG,""String_Node_Str"" + ident,e);
    return false;
  }
  if (contentViewLocal != null) {
    contentViewLocal.setIsRootNamespace(true);
    expanded.setContractedChild(contentViewLocal);
  }
  if (bigContentViewLocal != null) {
    bigContentViewLocal.setIsRootNamespace(true);
    expanded.setExpandedChild(bigContentViewLocal);
  }
  View publicViewLocal=null;
  if (publicNotification != null) {
    try {
      publicViewLocal=publicNotification.contentView.apply(mContext,expandedPublic,mOnClickHandler);
      if (publicViewLocal != null) {
        publicViewLocal.setIsRootNamespace(true);
        expandedPublic.setContractedChild(publicViewLocal);
      }
    }
 catch (    RuntimeException e) {
      final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
      Log.e(TAG,""String_Node_Str"" + ident,e);
      publicViewLocal=null;
    }
  }
  try {
    ApplicationInfo info=pmUser.getApplicationInfo(sbn.getPackageName(),0);
    entry.targetSdk=info.targetSdkVersion;
  }
 catch (  NameNotFoundException ex) {
    Log.e(TAG,""String_Node_Str"" + sbn.getPackageName(),ex);
  }
  if (publicViewLocal == null) {
    publicViewLocal=LayoutInflater.from(mContext).inflate(R.layout.notification_public_default,expandedPublic,false);
    publicViewLocal.setIsRootNamespace(true);
    expandedPublic.setContractedChild(publicViewLocal);
    final TextView title=(TextView)publicViewLocal.findViewById(R.id.title);
    try {
      title.setText(pmUser.getApplicationLabel(pmUser.getApplicationInfo(entry.notification.getPackageName(),0)));
    }
 catch (    NameNotFoundException e) {
      title.setText(entry.notification.getPackageName());
    }
    final ImageView icon=(ImageView)publicViewLocal.findViewById(R.id.icon);
    final ImageView profileBadge=(ImageView)publicViewLocal.findViewById(R.id.profile_badge_line3);
    final StatusBarIcon ic=new StatusBarIcon(entry.notification.getPackageName(),entry.notification.getUser(),entry.notification.getNotification().icon,entry.notification.getNotification().iconLevel,entry.notification.getNotification().number,entry.notification.getNotification().tickerText);
    Drawable iconDrawable=StatusBarIconView.getIcon(mContext,ic);
    icon.setImageDrawable(iconDrawable);
    if (entry.targetSdk >= Build.VERSION_CODES.LOLLIPOP || mNotificationColorUtil.isGrayscaleIcon(iconDrawable)) {
      icon.setBackgroundResource(com.android.internal.R.drawable.notification_icon_legacy_bg);
      int padding=mContext.getResources().getDimensionPixelSize(com.android.internal.R.dimen.notification_large_icon_circle_padding);
      icon.setPadding(padding,padding,padding,padding);
      if (sbn.getNotification().color != Notification.COLOR_DEFAULT) {
        icon.getBackground().setColorFilter(sbn.getNotification().color,PorterDuff.Mode.SRC_ATOP);
      }
    }
    if (profileBadge != null) {
      Drawable profileDrawable=mContext.getPackageManager().getUserBadgeForDensity(entry.notification.getUser(),0);
      if (profileDrawable != null) {
        profileBadge.setImageDrawable(profileDrawable);
        profileBadge.setVisibility(View.VISIBLE);
      }
 else {
        profileBadge.setVisibility(View.GONE);
      }
    }
    final View privateTime=contentViewLocal.findViewById(com.android.internal.R.id.time);
    final DateTimeView time=(DateTimeView)publicViewLocal.findViewById(R.id.time);
    if (privateTime != null && privateTime.getVisibility() == View.VISIBLE) {
      time.setVisibility(View.VISIBLE);
      time.setTime(entry.notification.getNotification().when);
    }
    final TextView text=(TextView)publicViewLocal.findViewById(R.id.text);
    if (text != null) {
      text.setText(R.string.notification_hidden_text);
      text.setTextAppearance(mContext,R.style.TextAppearance_Material_Notification_Parenthetical);
    }
    int topPadding=Notification.Builder.calculateTopPadding(mContext,false,mContext.getResources().getConfiguration().fontScale);
    title.setPadding(0,topPadding,0,0);
    entry.autoRedacted=true;
  }
  if (MULTIUSER_DEBUG) {
    TextView debug=(TextView)row.findViewById(R.id.debug_info);
    if (debug != null) {
      debug.setVisibility(View.VISIBLE);
      debug.setText(""String_Node_Str"" + mCurrentUserId + ""String_Node_Str""+ entry.notification.getUserId());
    }
  }
  entry.row=row;
  entry.row.setHeightRange(mRowMinHeight,maxHeight);
  entry.row.setOnActivatedListener(this);
  entry.expanded=contentViewLocal;
  entry.expandedPublic=publicViewLocal;
  entry.setBigContentView(bigContentViewLocal);
  applyColorsAndBackgrounds(sbn,entry);
  if (hasUserChangedExpansion) {
    row.setUserExpanded(userExpanded);
  }
  row.setUserLocked(userLocked);
  row.setStatusBarNotification(entry.notification);
  return true;
}",0.9973774460359088
195967,"/** 
 * @return Can the underlying notification be cleared?
 */
public boolean isClearable(){
  return mClearable;
}","/** 
 * @return Can the underlying notification be cleared?
 */
public boolean isClearable(){
  return mStatusBarNotification != null && mStatusBarNotification.isClearable();
}",0.7945205479452054
195968,"public void setStatusBarNotification(StatusBarNotification statusBarNotification){
  mStatusBarNotification=statusBarNotification;
}","public void setStatusBarNotification(StatusBarNotification statusBarNotification){
  mStatusBarNotification=statusBarNotification;
  updateVetoButton();
}",0.9230769230769232
195969,"private boolean inflateViews(NotificationData.Entry entry,ViewGroup parent,boolean isHeadsUp){
  PackageManager pmUser=getPackageManagerForUser(entry.notification.getUser().getIdentifier());
  int maxHeight=mRowMaxHeight;
  final StatusBarNotification sbn=entry.notification;
  RemoteViews contentView=sbn.getNotification().contentView;
  RemoteViews bigContentView=sbn.getNotification().bigContentView;
  if (isHeadsUp) {
    maxHeight=mContext.getResources().getDimensionPixelSize(R.dimen.notification_mid_height);
    bigContentView=sbn.getNotification().headsUpContentView;
  }
  if (contentView == null) {
    return false;
  }
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + sbn.getNotification().publicVersion);
  }
  Notification publicNotification=sbn.getNotification().publicVersion;
  ExpandableNotificationRow row;
  boolean hasUserChangedExpansion=false;
  boolean userExpanded=false;
  boolean userLocked=false;
  if (entry.row != null) {
    row=entry.row;
    hasUserChangedExpansion=row.hasUserChangedExpansion();
    userExpanded=row.isUserExpanded();
    userLocked=row.isUserLocked();
    entry.reset();
    if (hasUserChangedExpansion) {
      row.setUserExpanded(userExpanded);
    }
  }
 else {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    row=(ExpandableNotificationRow)inflater.inflate(R.layout.status_bar_notification_row,parent,false);
    row.setExpansionLogger(this,entry.notification.getKey());
  }
  workAroundBadLayerDrawableOpacity(row);
  View vetoButton=updateNotificationVetoButton(row,sbn);
  vetoButton.setContentDescription(mContext.getString(R.string.accessibility_remove_notification));
  NotificationContentView expanded=(NotificationContentView)row.findViewById(R.id.expanded);
  NotificationContentView expandedPublic=(NotificationContentView)row.findViewById(R.id.expandedPublic);
  row.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
  PendingIntent contentIntent=sbn.getNotification().contentIntent;
  if (contentIntent != null) {
    final View.OnClickListener listener=makeClicker(contentIntent,sbn.getKey(),isHeadsUp);
    row.setOnClickListener(listener);
  }
 else {
    row.setOnClickListener(null);
  }
  View contentViewLocal=null;
  View bigContentViewLocal=null;
  try {
    contentViewLocal=contentView.apply(mContext,expanded,mOnClickHandler);
    if (bigContentView != null) {
      bigContentViewLocal=bigContentView.apply(mContext,expanded,mOnClickHandler);
    }
  }
 catch (  RuntimeException e) {
    final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
    Log.e(TAG,""String_Node_Str"" + ident,e);
    return false;
  }
  if (contentViewLocal != null) {
    contentViewLocal.setIsRootNamespace(true);
    expanded.setContractedChild(contentViewLocal);
  }
  if (bigContentViewLocal != null) {
    bigContentViewLocal.setIsRootNamespace(true);
    expanded.setExpandedChild(bigContentViewLocal);
  }
  View publicViewLocal=null;
  if (publicNotification != null) {
    try {
      publicViewLocal=publicNotification.contentView.apply(mContext,expandedPublic,mOnClickHandler);
      if (publicViewLocal != null) {
        publicViewLocal.setIsRootNamespace(true);
        expandedPublic.setContractedChild(publicViewLocal);
      }
    }
 catch (    RuntimeException e) {
      final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
      Log.e(TAG,""String_Node_Str"" + ident,e);
      publicViewLocal=null;
    }
  }
  try {
    ApplicationInfo info=pmUser.getApplicationInfo(sbn.getPackageName(),0);
    entry.targetSdk=info.targetSdkVersion;
  }
 catch (  NameNotFoundException ex) {
    Log.e(TAG,""String_Node_Str"" + sbn.getPackageName(),ex);
  }
  if (publicViewLocal == null) {
    publicViewLocal=LayoutInflater.from(mContext).inflate(R.layout.notification_public_default,expandedPublic,false);
    publicViewLocal.setIsRootNamespace(true);
    expandedPublic.setContractedChild(publicViewLocal);
    final TextView title=(TextView)publicViewLocal.findViewById(R.id.title);
    try {
      title.setText(pmUser.getApplicationLabel(pmUser.getApplicationInfo(entry.notification.getPackageName(),0)));
    }
 catch (    NameNotFoundException e) {
      title.setText(entry.notification.getPackageName());
    }
    final ImageView icon=(ImageView)publicViewLocal.findViewById(R.id.icon);
    final ImageView profileBadge=(ImageView)publicViewLocal.findViewById(R.id.profile_badge_line3);
    final StatusBarIcon ic=new StatusBarIcon(entry.notification.getPackageName(),entry.notification.getUser(),entry.notification.getNotification().icon,entry.notification.getNotification().iconLevel,entry.notification.getNotification().number,entry.notification.getNotification().tickerText);
    Drawable iconDrawable=StatusBarIconView.getIcon(mContext,ic);
    icon.setImageDrawable(iconDrawable);
    if (entry.targetSdk >= Build.VERSION_CODES.LOLLIPOP || mNotificationColorUtil.isGrayscaleIcon(iconDrawable)) {
      icon.setBackgroundResource(com.android.internal.R.drawable.notification_icon_legacy_bg);
      int padding=mContext.getResources().getDimensionPixelSize(com.android.internal.R.dimen.notification_large_icon_circle_padding);
      icon.setPadding(padding,padding,padding,padding);
      if (sbn.getNotification().color != Notification.COLOR_DEFAULT) {
        icon.getBackground().setColorFilter(sbn.getNotification().color,PorterDuff.Mode.SRC_ATOP);
      }
    }
    if (profileBadge != null) {
      Drawable profileDrawable=mContext.getPackageManager().getUserBadgeForDensity(entry.notification.getUser(),0);
      if (profileDrawable != null) {
        profileBadge.setImageDrawable(profileDrawable);
        profileBadge.setVisibility(View.VISIBLE);
      }
 else {
        profileBadge.setVisibility(View.GONE);
      }
    }
    final View privateTime=contentViewLocal.findViewById(com.android.internal.R.id.time);
    final DateTimeView time=(DateTimeView)publicViewLocal.findViewById(R.id.time);
    if (privateTime != null && privateTime.getVisibility() == View.VISIBLE) {
      time.setVisibility(View.VISIBLE);
      time.setTime(entry.notification.getNotification().when);
    }
    final TextView text=(TextView)publicViewLocal.findViewById(R.id.text);
    if (text != null) {
      text.setText(R.string.notification_hidden_text);
      text.setTextAppearance(mContext,R.style.TextAppearance_Material_Notification_Parenthetical);
    }
    int topPadding=Notification.Builder.calculateTopPadding(mContext,false,mContext.getResources().getConfiguration().fontScale);
    title.setPadding(0,topPadding,0,0);
    entry.autoRedacted=true;
  }
  row.setClearable(sbn.isClearable());
  if (MULTIUSER_DEBUG) {
    TextView debug=(TextView)row.findViewById(R.id.debug_info);
    if (debug != null) {
      debug.setVisibility(View.VISIBLE);
      debug.setText(""String_Node_Str"" + mCurrentUserId + ""String_Node_Str""+ entry.notification.getUserId());
    }
  }
  entry.row=row;
  entry.row.setHeightRange(mRowMinHeight,maxHeight);
  entry.row.setOnActivatedListener(this);
  entry.expanded=contentViewLocal;
  entry.expandedPublic=publicViewLocal;
  entry.setBigContentView(bigContentViewLocal);
  applyColorsAndBackgrounds(sbn,entry);
  if (hasUserChangedExpansion) {
    row.setUserExpanded(userExpanded);
  }
  row.setUserLocked(userLocked);
  row.setStatusBarNotification(entry.notification);
  return true;
}","private boolean inflateViews(NotificationData.Entry entry,ViewGroup parent,boolean isHeadsUp){
  PackageManager pmUser=getPackageManagerForUser(entry.notification.getUser().getIdentifier());
  int maxHeight=mRowMaxHeight;
  final StatusBarNotification sbn=entry.notification;
  RemoteViews contentView=sbn.getNotification().contentView;
  RemoteViews bigContentView=sbn.getNotification().bigContentView;
  if (isHeadsUp) {
    maxHeight=mContext.getResources().getDimensionPixelSize(R.dimen.notification_mid_height);
    bigContentView=sbn.getNotification().headsUpContentView;
  }
  if (contentView == null) {
    return false;
  }
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + sbn.getNotification().publicVersion);
  }
  Notification publicNotification=sbn.getNotification().publicVersion;
  ExpandableNotificationRow row;
  boolean hasUserChangedExpansion=false;
  boolean userExpanded=false;
  boolean userLocked=false;
  if (entry.row != null) {
    row=entry.row;
    hasUserChangedExpansion=row.hasUserChangedExpansion();
    userExpanded=row.isUserExpanded();
    userLocked=row.isUserLocked();
    entry.reset();
    if (hasUserChangedExpansion) {
      row.setUserExpanded(userExpanded);
    }
  }
 else {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    row=(ExpandableNotificationRow)inflater.inflate(R.layout.status_bar_notification_row,parent,false);
    row.setExpansionLogger(this,entry.notification.getKey());
  }
  workAroundBadLayerDrawableOpacity(row);
  View vetoButton=updateNotificationVetoButton(row,sbn);
  vetoButton.setContentDescription(mContext.getString(R.string.accessibility_remove_notification));
  NotificationContentView expanded=(NotificationContentView)row.findViewById(R.id.expanded);
  NotificationContentView expandedPublic=(NotificationContentView)row.findViewById(R.id.expandedPublic);
  row.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
  PendingIntent contentIntent=sbn.getNotification().contentIntent;
  if (contentIntent != null) {
    final View.OnClickListener listener=makeClicker(contentIntent,sbn.getKey(),isHeadsUp);
    row.setOnClickListener(listener);
  }
 else {
    row.setOnClickListener(null);
  }
  View contentViewLocal=null;
  View bigContentViewLocal=null;
  try {
    contentViewLocal=contentView.apply(mContext,expanded,mOnClickHandler);
    if (bigContentView != null) {
      bigContentViewLocal=bigContentView.apply(mContext,expanded,mOnClickHandler);
    }
  }
 catch (  RuntimeException e) {
    final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
    Log.e(TAG,""String_Node_Str"" + ident,e);
    return false;
  }
  if (contentViewLocal != null) {
    contentViewLocal.setIsRootNamespace(true);
    expanded.setContractedChild(contentViewLocal);
  }
  if (bigContentViewLocal != null) {
    bigContentViewLocal.setIsRootNamespace(true);
    expanded.setExpandedChild(bigContentViewLocal);
  }
  View publicViewLocal=null;
  if (publicNotification != null) {
    try {
      publicViewLocal=publicNotification.contentView.apply(mContext,expandedPublic,mOnClickHandler);
      if (publicViewLocal != null) {
        publicViewLocal.setIsRootNamespace(true);
        expandedPublic.setContractedChild(publicViewLocal);
      }
    }
 catch (    RuntimeException e) {
      final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
      Log.e(TAG,""String_Node_Str"" + ident,e);
      publicViewLocal=null;
    }
  }
  try {
    ApplicationInfo info=pmUser.getApplicationInfo(sbn.getPackageName(),0);
    entry.targetSdk=info.targetSdkVersion;
  }
 catch (  NameNotFoundException ex) {
    Log.e(TAG,""String_Node_Str"" + sbn.getPackageName(),ex);
  }
  if (publicViewLocal == null) {
    publicViewLocal=LayoutInflater.from(mContext).inflate(R.layout.notification_public_default,expandedPublic,false);
    publicViewLocal.setIsRootNamespace(true);
    expandedPublic.setContractedChild(publicViewLocal);
    final TextView title=(TextView)publicViewLocal.findViewById(R.id.title);
    try {
      title.setText(pmUser.getApplicationLabel(pmUser.getApplicationInfo(entry.notification.getPackageName(),0)));
    }
 catch (    NameNotFoundException e) {
      title.setText(entry.notification.getPackageName());
    }
    final ImageView icon=(ImageView)publicViewLocal.findViewById(R.id.icon);
    final ImageView profileBadge=(ImageView)publicViewLocal.findViewById(R.id.profile_badge_line3);
    final StatusBarIcon ic=new StatusBarIcon(entry.notification.getPackageName(),entry.notification.getUser(),entry.notification.getNotification().icon,entry.notification.getNotification().iconLevel,entry.notification.getNotification().number,entry.notification.getNotification().tickerText);
    Drawable iconDrawable=StatusBarIconView.getIcon(mContext,ic);
    icon.setImageDrawable(iconDrawable);
    if (entry.targetSdk >= Build.VERSION_CODES.LOLLIPOP || mNotificationColorUtil.isGrayscaleIcon(iconDrawable)) {
      icon.setBackgroundResource(com.android.internal.R.drawable.notification_icon_legacy_bg);
      int padding=mContext.getResources().getDimensionPixelSize(com.android.internal.R.dimen.notification_large_icon_circle_padding);
      icon.setPadding(padding,padding,padding,padding);
      if (sbn.getNotification().color != Notification.COLOR_DEFAULT) {
        icon.getBackground().setColorFilter(sbn.getNotification().color,PorterDuff.Mode.SRC_ATOP);
      }
    }
    if (profileBadge != null) {
      Drawable profileDrawable=mContext.getPackageManager().getUserBadgeForDensity(entry.notification.getUser(),0);
      if (profileDrawable != null) {
        profileBadge.setImageDrawable(profileDrawable);
        profileBadge.setVisibility(View.VISIBLE);
      }
 else {
        profileBadge.setVisibility(View.GONE);
      }
    }
    final View privateTime=contentViewLocal.findViewById(com.android.internal.R.id.time);
    final DateTimeView time=(DateTimeView)publicViewLocal.findViewById(R.id.time);
    if (privateTime != null && privateTime.getVisibility() == View.VISIBLE) {
      time.setVisibility(View.VISIBLE);
      time.setTime(entry.notification.getNotification().when);
    }
    final TextView text=(TextView)publicViewLocal.findViewById(R.id.text);
    if (text != null) {
      text.setText(R.string.notification_hidden_text);
      text.setTextAppearance(mContext,R.style.TextAppearance_Material_Notification_Parenthetical);
    }
    int topPadding=Notification.Builder.calculateTopPadding(mContext,false,mContext.getResources().getConfiguration().fontScale);
    title.setPadding(0,topPadding,0,0);
    entry.autoRedacted=true;
  }
  if (MULTIUSER_DEBUG) {
    TextView debug=(TextView)row.findViewById(R.id.debug_info);
    if (debug != null) {
      debug.setVisibility(View.VISIBLE);
      debug.setText(""String_Node_Str"" + mCurrentUserId + ""String_Node_Str""+ entry.notification.getUserId());
    }
  }
  entry.row=row;
  entry.row.setHeightRange(mRowMinHeight,maxHeight);
  entry.row.setOnActivatedListener(this);
  entry.expanded=contentViewLocal;
  entry.expandedPublic=publicViewLocal;
  entry.setBigContentView(bigContentViewLocal);
  applyColorsAndBackgrounds(sbn,entry);
  if (hasUserChangedExpansion) {
    row.setUserExpanded(userExpanded);
  }
  row.setUserLocked(userLocked);
  row.setStatusBarNotification(entry.notification);
  return true;
}",0.9973774460359088
195970,"/** 
 * @return Can the underlying notification be cleared?
 */
public boolean isClearable(){
  return mClearable;
}","/** 
 * @return Can the underlying notification be cleared?
 */
public boolean isClearable(){
  return mStatusBarNotification != null && mStatusBarNotification.isClearable();
}",0.7945205479452054
195971,"public void setStatusBarNotification(StatusBarNotification statusBarNotification){
  mStatusBarNotification=statusBarNotification;
}","public void setStatusBarNotification(StatusBarNotification statusBarNotification){
  mStatusBarNotification=statusBarNotification;
  updateVetoButton();
}",0.9230769230769232
195972,"public void onExpansionStopped(){
  mIsExpansionChanging=false;
  mStackScrollAlgorithm.onExpansionStopped();
  if (!mIsExpanded) {
    mOwnScrollY=0;
  }
}","public void onExpansionStopped(){
  mIsExpansionChanging=false;
  mStackScrollAlgorithm.onExpansionStopped();
  if (!mIsExpanded) {
    mOwnScrollY=0;
    getOverlay().clear();
  }
}",0.9230769230769232
195973,"/** 
 * Process the animationEvents for a new animation
 * @param animationEvents the animation events for the animation to perform
 * @param finalState the final state to animate to
 */
private void processAnimationEvents(ArrayList<NotificationStackScrollLayout.AnimationEvent> animationEvents,StackScrollState finalState){
  for (  NotificationStackScrollLayout.AnimationEvent event : animationEvents) {
    final ExpandableView changingView=(ExpandableView)event.changingView;
    if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_ADD) {
      StackScrollState.ViewState viewState=finalState.getViewStateForView(changingView);
      if (viewState == null) {
        continue;
      }
      if (changingView.getVisibility() == View.GONE) {
        finalState.removeViewStateForView(changingView);
        continue;
      }
      changingView.setAlpha(viewState.alpha);
      changingView.setTranslationY(viewState.yTranslation);
      changingView.setTranslationZ(viewState.zTranslation);
      changingView.setActualHeight(viewState.height,false);
      mNewAddChildren.add(changingView);
    }
 else     if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_REMOVE) {
      if (changingView.getVisibility() == View.GONE) {
        mHostLayout.getOverlay().remove(changingView);
        continue;
      }
      StackScrollState.ViewState viewState=finalState.getViewStateForView(event.viewAfterChangingView);
      int actualHeight=changingView.getActualHeight();
      float translationDirection=-1.0f;
      if (viewState != null) {
        translationDirection=((viewState.yTranslation - (changingView.getTranslationY() + actualHeight / 2.0f)) * 2 / actualHeight);
        translationDirection=Math.max(Math.min(translationDirection,1.0f),-1.0f);
      }
      changingView.performRemoveAnimation(ANIMATION_DURATION_APPEAR_DISAPPEAR,translationDirection,new Runnable(){
        @Override public void run(){
          mHostLayout.getOverlay().remove(changingView);
        }
      }
);
    }
    mNewEvents.add(event);
  }
}","/** 
 * Process the animationEvents for a new animation
 * @param animationEvents the animation events for the animation to perform
 * @param finalState the final state to animate to
 */
private void processAnimationEvents(ArrayList<NotificationStackScrollLayout.AnimationEvent> animationEvents,StackScrollState finalState){
  for (  NotificationStackScrollLayout.AnimationEvent event : animationEvents) {
    final ExpandableView changingView=(ExpandableView)event.changingView;
    if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_ADD) {
      StackScrollState.ViewState viewState=finalState.getViewStateForView(changingView);
      if (viewState == null) {
        continue;
      }
      if (changingView.getVisibility() == View.GONE) {
        finalState.removeViewStateForView(changingView);
        continue;
      }
      changingView.setAlpha(viewState.alpha);
      changingView.setTranslationY(viewState.yTranslation);
      changingView.setTranslationZ(viewState.zTranslation);
      changingView.setActualHeight(viewState.height,false);
      mNewAddChildren.add(changingView);
    }
 else     if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_REMOVE) {
      if (changingView.getVisibility() == View.GONE) {
        mHostLayout.getOverlay().remove(changingView);
        continue;
      }
      StackScrollState.ViewState viewState=finalState.getViewStateForView(event.viewAfterChangingView);
      int actualHeight=changingView.getActualHeight();
      float translationDirection=-1.0f;
      if (viewState != null) {
        translationDirection=((viewState.yTranslation - (changingView.getTranslationY() + actualHeight / 2.0f)) * 2 / actualHeight);
        translationDirection=Math.max(Math.min(translationDirection,1.0f),-1.0f);
      }
      changingView.performRemoveAnimation(ANIMATION_DURATION_APPEAR_DISAPPEAR,translationDirection,new Runnable(){
        @Override public void run(){
          mHostLayout.getOverlay().remove(changingView);
        }
      }
);
    }
 else     if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_REMOVE_SWIPED_OUT) {
      mHostLayout.getOverlay().remove(changingView);
    }
    mNewEvents.add(event);
  }
}",0.9595428571428573
195974,"private boolean inflateViews(NotificationData.Entry entry,ViewGroup parent,boolean isHeadsUp){
  PackageManager pmUser=getPackageManagerForUser(entry.notification.getUser().getIdentifier());
  int maxHeight=mRowMaxHeight;
  final StatusBarNotification sbn=entry.notification;
  RemoteViews contentView=sbn.getNotification().contentView;
  RemoteViews bigContentView=sbn.getNotification().bigContentView;
  if (isHeadsUp) {
    maxHeight=mContext.getResources().getDimensionPixelSize(R.dimen.notification_mid_height);
    bigContentView=sbn.getNotification().headsUpContentView;
  }
  if (contentView == null) {
    return false;
  }
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + sbn.getNotification().publicVersion);
  }
  Notification publicNotification=sbn.getNotification().publicVersion;
  ExpandableNotificationRow row;
  boolean hasUserChangedExpansion=false;
  boolean userExpanded=false;
  boolean userLocked=false;
  if (entry.row != null) {
    row=entry.row;
    hasUserChangedExpansion=row.hasUserChangedExpansion();
    userExpanded=row.isUserExpanded();
    userLocked=row.isUserLocked();
    entry.reset();
    if (hasUserChangedExpansion) {
      row.setUserExpanded(userExpanded);
    }
  }
 else {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    row=(ExpandableNotificationRow)inflater.inflate(R.layout.status_bar_notification_row,parent,false);
    row.setExpansionLogger(this,entry.notification.getKey());
  }
  workAroundBadLayerDrawableOpacity(row);
  View vetoButton=updateNotificationVetoButton(row,sbn);
  vetoButton.setContentDescription(mContext.getString(R.string.accessibility_remove_notification));
  NotificationContentView expanded=(NotificationContentView)row.findViewById(R.id.expanded);
  NotificationContentView expandedPublic=(NotificationContentView)row.findViewById(R.id.expandedPublic);
  row.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
  PendingIntent contentIntent=sbn.getNotification().contentIntent;
  if (contentIntent != null) {
    final View.OnClickListener listener=makeClicker(contentIntent,sbn.getKey(),isHeadsUp);
    row.setOnClickListener(listener);
  }
 else {
    row.setOnClickListener(null);
  }
  View contentViewLocal=null;
  View bigContentViewLocal=null;
  try {
    contentViewLocal=contentView.apply(mContext,expanded,mOnClickHandler);
    if (bigContentView != null) {
      bigContentViewLocal=bigContentView.apply(mContext,expanded,mOnClickHandler);
    }
  }
 catch (  RuntimeException e) {
    final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
    Log.e(TAG,""String_Node_Str"" + ident,e);
    return false;
  }
  if (contentViewLocal != null) {
    contentViewLocal.setIsRootNamespace(true);
    expanded.setContractedChild(contentViewLocal);
  }
  if (bigContentViewLocal != null) {
    bigContentViewLocal.setIsRootNamespace(true);
    expanded.setExpandedChild(bigContentViewLocal);
  }
  View publicViewLocal=null;
  if (publicNotification != null) {
    try {
      publicViewLocal=publicNotification.contentView.apply(mContext,expandedPublic,mOnClickHandler);
      if (publicViewLocal != null) {
        publicViewLocal.setIsRootNamespace(true);
        expandedPublic.setContractedChild(publicViewLocal);
      }
    }
 catch (    RuntimeException e) {
      final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
      Log.e(TAG,""String_Node_Str"" + ident,e);
      publicViewLocal=null;
    }
  }
  try {
    ApplicationInfo info=pmUser.getApplicationInfo(sbn.getPackageName(),0);
    entry.targetSdk=info.targetSdkVersion;
  }
 catch (  NameNotFoundException ex) {
    Log.e(TAG,""String_Node_Str"" + sbn.getPackageName(),ex);
  }
  if (publicViewLocal == null) {
    publicViewLocal=LayoutInflater.from(mContext).inflate(R.layout.notification_public_default,expandedPublic,false);
    publicViewLocal.setIsRootNamespace(true);
    expandedPublic.setContractedChild(publicViewLocal);
    final TextView title=(TextView)publicViewLocal.findViewById(R.id.title);
    try {
      title.setText(pmUser.getApplicationLabel(pmUser.getApplicationInfo(entry.notification.getPackageName(),0)));
    }
 catch (    NameNotFoundException e) {
      title.setText(entry.notification.getPackageName());
    }
    final ImageView icon=(ImageView)publicViewLocal.findViewById(R.id.icon);
    final ImageView profileBadge=(ImageView)publicViewLocal.findViewById(R.id.profile_badge_line3);
    final StatusBarIcon ic=new StatusBarIcon(entry.notification.getPackageName(),entry.notification.getUser(),entry.notification.getNotification().icon,entry.notification.getNotification().iconLevel,entry.notification.getNotification().number,entry.notification.getNotification().tickerText);
    Drawable iconDrawable=StatusBarIconView.getIcon(mContext,ic);
    icon.setImageDrawable(iconDrawable);
    if (entry.targetSdk >= Build.VERSION_CODES.LOLLIPOP || mNotificationColorUtil.isGrayscaleIcon(iconDrawable)) {
      icon.setBackgroundResource(com.android.internal.R.drawable.notification_icon_legacy_bg);
      int padding=mContext.getResources().getDimensionPixelSize(com.android.internal.R.dimen.notification_large_icon_circle_padding);
      icon.setPadding(padding,padding,padding,padding);
      if (sbn.getNotification().color != Notification.COLOR_DEFAULT) {
        icon.getBackground().setColorFilter(sbn.getNotification().color,PorterDuff.Mode.SRC_ATOP);
      }
    }
    if (profileBadge != null) {
      Drawable profileDrawable=mContext.getPackageManager().getUserBadgeForDensity(entry.notification.getUser(),0);
      if (profileDrawable != null) {
        profileBadge.setImageDrawable(profileDrawable);
        profileBadge.setVisibility(View.VISIBLE);
      }
 else {
        profileBadge.setVisibility(View.GONE);
      }
    }
    final View privateTime=contentViewLocal.findViewById(com.android.internal.R.id.time);
    final DateTimeView time=(DateTimeView)publicViewLocal.findViewById(R.id.time);
    if (privateTime != null && privateTime.getVisibility() == View.VISIBLE) {
      time.setVisibility(View.VISIBLE);
      time.setTime(entry.notification.getNotification().when);
    }
    final TextView text=(TextView)publicViewLocal.findViewById(R.id.text);
    if (text != null) {
      text.setText(R.string.notification_hidden_text);
      text.setTextAppearance(mContext,R.style.TextAppearance_Material_Notification_Parenthetical);
    }
    int topPadding=Notification.Builder.calculateTopPadding(mContext,false,mContext.getResources().getConfiguration().fontScale);
    title.setPadding(0,topPadding,0,0);
    entry.autoRedacted=true;
  }
  row.setClearable(sbn.isClearable());
  if (MULTIUSER_DEBUG) {
    TextView debug=(TextView)row.findViewById(R.id.debug_info);
    if (debug != null) {
      debug.setVisibility(View.VISIBLE);
      debug.setText(""String_Node_Str"" + mCurrentUserId + ""String_Node_Str""+ entry.notification.getUserId());
    }
  }
  entry.row=row;
  entry.row.setHeightRange(mRowMinHeight,maxHeight);
  entry.row.setOnActivatedListener(this);
  entry.expanded=contentViewLocal;
  entry.expandedPublic=publicViewLocal;
  entry.setBigContentView(bigContentViewLocal);
  applyColorsAndBackgrounds(sbn,entry);
  if (hasUserChangedExpansion) {
    row.setUserExpanded(userExpanded);
  }
  row.setUserLocked(userLocked);
  row.setStatusBarNotification(entry.notification);
  return true;
}","private boolean inflateViews(NotificationData.Entry entry,ViewGroup parent,boolean isHeadsUp){
  PackageManager pmUser=getPackageManagerForUser(entry.notification.getUser().getIdentifier());
  int maxHeight=mRowMaxHeight;
  final StatusBarNotification sbn=entry.notification;
  RemoteViews contentView=sbn.getNotification().contentView;
  RemoteViews bigContentView=sbn.getNotification().bigContentView;
  if (isHeadsUp) {
    maxHeight=mContext.getResources().getDimensionPixelSize(R.dimen.notification_mid_height);
    bigContentView=sbn.getNotification().headsUpContentView;
  }
  if (contentView == null) {
    return false;
  }
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + sbn.getNotification().publicVersion);
  }
  Notification publicNotification=sbn.getNotification().publicVersion;
  ExpandableNotificationRow row;
  boolean hasUserChangedExpansion=false;
  boolean userExpanded=false;
  boolean userLocked=false;
  if (entry.row != null) {
    row=entry.row;
    hasUserChangedExpansion=row.hasUserChangedExpansion();
    userExpanded=row.isUserExpanded();
    userLocked=row.isUserLocked();
    entry.reset();
    if (hasUserChangedExpansion) {
      row.setUserExpanded(userExpanded);
    }
  }
 else {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    row=(ExpandableNotificationRow)inflater.inflate(R.layout.status_bar_notification_row,parent,false);
    row.setExpansionLogger(this,entry.notification.getKey());
  }
  workAroundBadLayerDrawableOpacity(row);
  View vetoButton=updateNotificationVetoButton(row,sbn);
  vetoButton.setContentDescription(mContext.getString(R.string.accessibility_remove_notification));
  NotificationContentView expanded=(NotificationContentView)row.findViewById(R.id.expanded);
  NotificationContentView expandedPublic=(NotificationContentView)row.findViewById(R.id.expandedPublic);
  row.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
  PendingIntent contentIntent=sbn.getNotification().contentIntent;
  if (contentIntent != null) {
    final View.OnClickListener listener=makeClicker(contentIntent,sbn.getKey(),isHeadsUp);
    row.setOnClickListener(listener);
  }
 else {
    row.setOnClickListener(null);
  }
  View contentViewLocal=null;
  View bigContentViewLocal=null;
  try {
    contentViewLocal=contentView.apply(mContext,expanded,mOnClickHandler);
    if (bigContentView != null) {
      bigContentViewLocal=bigContentView.apply(mContext,expanded,mOnClickHandler);
    }
  }
 catch (  RuntimeException e) {
    final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
    Log.e(TAG,""String_Node_Str"" + ident,e);
    return false;
  }
  if (contentViewLocal != null) {
    contentViewLocal.setIsRootNamespace(true);
    expanded.setContractedChild(contentViewLocal);
  }
  if (bigContentViewLocal != null) {
    bigContentViewLocal.setIsRootNamespace(true);
    expanded.setExpandedChild(bigContentViewLocal);
  }
  View publicViewLocal=null;
  if (publicNotification != null) {
    try {
      publicViewLocal=publicNotification.contentView.apply(mContext,expandedPublic,mOnClickHandler);
      if (publicViewLocal != null) {
        publicViewLocal.setIsRootNamespace(true);
        expandedPublic.setContractedChild(publicViewLocal);
      }
    }
 catch (    RuntimeException e) {
      final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
      Log.e(TAG,""String_Node_Str"" + ident,e);
      publicViewLocal=null;
    }
  }
  try {
    ApplicationInfo info=pmUser.getApplicationInfo(sbn.getPackageName(),0);
    entry.targetSdk=info.targetSdkVersion;
  }
 catch (  NameNotFoundException ex) {
    Log.e(TAG,""String_Node_Str"" + sbn.getPackageName(),ex);
  }
  if (publicViewLocal == null) {
    publicViewLocal=LayoutInflater.from(mContext).inflate(R.layout.notification_public_default,expandedPublic,false);
    publicViewLocal.setIsRootNamespace(true);
    expandedPublic.setContractedChild(publicViewLocal);
    final TextView title=(TextView)publicViewLocal.findViewById(R.id.title);
    try {
      title.setText(pmUser.getApplicationLabel(pmUser.getApplicationInfo(entry.notification.getPackageName(),0)));
    }
 catch (    NameNotFoundException e) {
      title.setText(entry.notification.getPackageName());
    }
    final ImageView icon=(ImageView)publicViewLocal.findViewById(R.id.icon);
    final ImageView profileBadge=(ImageView)publicViewLocal.findViewById(R.id.profile_badge_line3);
    final StatusBarIcon ic=new StatusBarIcon(entry.notification.getPackageName(),entry.notification.getUser(),entry.notification.getNotification().icon,entry.notification.getNotification().iconLevel,entry.notification.getNotification().number,entry.notification.getNotification().tickerText);
    Drawable iconDrawable=StatusBarIconView.getIcon(mContext,ic);
    icon.setImageDrawable(iconDrawable);
    if (entry.targetSdk >= Build.VERSION_CODES.LOLLIPOP || mNotificationColorUtil.isGrayscaleIcon(iconDrawable)) {
      icon.setBackgroundResource(com.android.internal.R.drawable.notification_icon_legacy_bg);
      int padding=mContext.getResources().getDimensionPixelSize(com.android.internal.R.dimen.notification_large_icon_circle_padding);
      icon.setPadding(padding,padding,padding,padding);
      if (sbn.getNotification().color != Notification.COLOR_DEFAULT) {
        icon.getBackground().setColorFilter(sbn.getNotification().color,PorterDuff.Mode.SRC_ATOP);
      }
    }
    if (profileBadge != null) {
      Drawable profileDrawable=mContext.getPackageManager().getUserBadgeForDensity(entry.notification.getUser(),0);
      if (profileDrawable != null) {
        profileBadge.setImageDrawable(profileDrawable);
        profileBadge.setVisibility(View.VISIBLE);
      }
 else {
        profileBadge.setVisibility(View.GONE);
      }
    }
    final View privateTime=contentViewLocal.findViewById(com.android.internal.R.id.time);
    final DateTimeView time=(DateTimeView)publicViewLocal.findViewById(R.id.time);
    if (privateTime != null && privateTime.getVisibility() == View.VISIBLE) {
      time.setVisibility(View.VISIBLE);
      time.setTime(entry.notification.getNotification().when);
    }
    final TextView text=(TextView)publicViewLocal.findViewById(R.id.text);
    if (text != null) {
      text.setText(R.string.notification_hidden_text);
      text.setTextAppearance(mContext,R.style.TextAppearance_Material_Notification_Parenthetical);
    }
    int topPadding=Notification.Builder.calculateTopPadding(mContext,false,mContext.getResources().getConfiguration().fontScale);
    title.setPadding(0,topPadding,0,0);
    entry.autoRedacted=true;
  }
  if (MULTIUSER_DEBUG) {
    TextView debug=(TextView)row.findViewById(R.id.debug_info);
    if (debug != null) {
      debug.setVisibility(View.VISIBLE);
      debug.setText(""String_Node_Str"" + mCurrentUserId + ""String_Node_Str""+ entry.notification.getUserId());
    }
  }
  entry.row=row;
  entry.row.setHeightRange(mRowMinHeight,maxHeight);
  entry.row.setOnActivatedListener(this);
  entry.expanded=contentViewLocal;
  entry.expandedPublic=publicViewLocal;
  entry.setBigContentView(bigContentViewLocal);
  applyColorsAndBackgrounds(sbn,entry);
  if (hasUserChangedExpansion) {
    row.setUserExpanded(userExpanded);
  }
  row.setUserLocked(userLocked);
  row.setStatusBarNotification(entry.notification);
  return true;
}",0.9973774460359088
195975,"/** 
 * @return Can the underlying notification be cleared?
 */
public boolean isClearable(){
  return mClearable;
}","/** 
 * @return Can the underlying notification be cleared?
 */
public boolean isClearable(){
  return mStatusBarNotification != null && mStatusBarNotification.isClearable();
}",0.7945205479452054
195976,"public void setStatusBarNotification(StatusBarNotification statusBarNotification){
  mStatusBarNotification=statusBarNotification;
}","public void setStatusBarNotification(StatusBarNotification statusBarNotification){
  mStatusBarNotification=statusBarNotification;
  updateVetoButton();
}",0.9230769230769232
195977,"public void onExpansionStopped(){
  mIsExpansionChanging=false;
  mStackScrollAlgorithm.onExpansionStopped();
  if (!mIsExpanded) {
    mOwnScrollY=0;
  }
}","public void onExpansionStopped(){
  mIsExpansionChanging=false;
  mStackScrollAlgorithm.onExpansionStopped();
  if (!mIsExpanded) {
    mOwnScrollY=0;
    getOverlay().clear();
  }
}",0.9230769230769232
195978,"/** 
 * Process the animationEvents for a new animation
 * @param animationEvents the animation events for the animation to perform
 * @param finalState the final state to animate to
 */
private void processAnimationEvents(ArrayList<NotificationStackScrollLayout.AnimationEvent> animationEvents,StackScrollState finalState){
  for (  NotificationStackScrollLayout.AnimationEvent event : animationEvents) {
    final ExpandableView changingView=(ExpandableView)event.changingView;
    if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_ADD) {
      StackScrollState.ViewState viewState=finalState.getViewStateForView(changingView);
      if (viewState == null) {
        continue;
      }
      if (changingView.getVisibility() == View.GONE) {
        finalState.removeViewStateForView(changingView);
        continue;
      }
      changingView.setAlpha(viewState.alpha);
      changingView.setTranslationY(viewState.yTranslation);
      changingView.setTranslationZ(viewState.zTranslation);
      changingView.setActualHeight(viewState.height,false);
      mNewAddChildren.add(changingView);
    }
 else     if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_REMOVE) {
      if (changingView.getVisibility() == View.GONE) {
        mHostLayout.getOverlay().remove(changingView);
        continue;
      }
      StackScrollState.ViewState viewState=finalState.getViewStateForView(event.viewAfterChangingView);
      int actualHeight=changingView.getActualHeight();
      float translationDirection=-1.0f;
      if (viewState != null) {
        translationDirection=((viewState.yTranslation - (changingView.getTranslationY() + actualHeight / 2.0f)) * 2 / actualHeight);
        translationDirection=Math.max(Math.min(translationDirection,1.0f),-1.0f);
      }
      changingView.performRemoveAnimation(ANIMATION_DURATION_APPEAR_DISAPPEAR,translationDirection,new Runnable(){
        @Override public void run(){
          mHostLayout.getOverlay().remove(changingView);
        }
      }
);
    }
    mNewEvents.add(event);
  }
}","/** 
 * Process the animationEvents for a new animation
 * @param animationEvents the animation events for the animation to perform
 * @param finalState the final state to animate to
 */
private void processAnimationEvents(ArrayList<NotificationStackScrollLayout.AnimationEvent> animationEvents,StackScrollState finalState){
  for (  NotificationStackScrollLayout.AnimationEvent event : animationEvents) {
    final ExpandableView changingView=(ExpandableView)event.changingView;
    if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_ADD) {
      StackScrollState.ViewState viewState=finalState.getViewStateForView(changingView);
      if (viewState == null) {
        continue;
      }
      if (changingView.getVisibility() == View.GONE) {
        finalState.removeViewStateForView(changingView);
        continue;
      }
      changingView.setAlpha(viewState.alpha);
      changingView.setTranslationY(viewState.yTranslation);
      changingView.setTranslationZ(viewState.zTranslation);
      changingView.setActualHeight(viewState.height,false);
      mNewAddChildren.add(changingView);
    }
 else     if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_REMOVE) {
      if (changingView.getVisibility() == View.GONE) {
        mHostLayout.getOverlay().remove(changingView);
        continue;
      }
      StackScrollState.ViewState viewState=finalState.getViewStateForView(event.viewAfterChangingView);
      int actualHeight=changingView.getActualHeight();
      float translationDirection=-1.0f;
      if (viewState != null) {
        translationDirection=((viewState.yTranslation - (changingView.getTranslationY() + actualHeight / 2.0f)) * 2 / actualHeight);
        translationDirection=Math.max(Math.min(translationDirection,1.0f),-1.0f);
      }
      changingView.performRemoveAnimation(ANIMATION_DURATION_APPEAR_DISAPPEAR,translationDirection,new Runnable(){
        @Override public void run(){
          mHostLayout.getOverlay().remove(changingView);
        }
      }
);
    }
 else     if (event.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_REMOVE_SWIPED_OUT) {
      mHostLayout.getOverlay().remove(changingView);
    }
    mNewEvents.add(event);
  }
}",0.9595428571428573
195979,"void removeAllWindows(){
  for (int winNdx=allAppWindows.size() - 1; winNdx >= 0; --winNdx) {
    WindowState win=allAppWindows.get(winNdx);
    if (WindowManagerService.DEBUG_WINDOW_MOVEMENT)     Slog.w(WindowManagerService.TAG,""String_Node_Str"" + win);
    win.mService.removeWindowLocked(win.mSession,win);
  }
}","@Override void removeAllWindows(){
  int winNdx;
  while ((winNdx=allAppWindows.size()) > 0) {
    WindowState win=allAppWindows.get(winNdx - 1);
    if (WindowManagerService.DEBUG_WINDOW_MOVEMENT) {
      Slog.w(WindowManagerService.TAG,""String_Node_Str"" + win);
    }
    win.mService.removeWindowLocked(win.mSession,win);
  }
}",0.8775193798449612
195980,"void removeAllWindows(){
  for (int winNdx=allAppWindows.size() - 1; winNdx >= 0; --winNdx) {
    WindowState win=allAppWindows.get(winNdx);
    if (WindowManagerService.DEBUG_WINDOW_MOVEMENT)     Slog.w(WindowManagerService.TAG,""String_Node_Str"" + win);
    win.mService.removeWindowLocked(win.mSession,win);
  }
}","@Override void removeAllWindows(){
  int winNdx;
  while ((winNdx=allAppWindows.size()) > 0) {
    WindowState win=allAppWindows.get(winNdx - 1);
    if (WindowManagerService.DEBUG_WINDOW_MOVEMENT) {
      Slog.w(WindowManagerService.TAG,""String_Node_Str"" + win);
    }
    win.mService.removeWindowLocked(win.mSession,win);
  }
}",0.8775193798449612
195981,"void removeAllWindows(){
  for (int winNdx=allAppWindows.size() - 1; winNdx >= 0; --winNdx) {
    WindowState win=allAppWindows.get(winNdx);
    if (WindowManagerService.DEBUG_WINDOW_MOVEMENT)     Slog.w(WindowManagerService.TAG,""String_Node_Str"" + win);
    win.mService.removeWindowLocked(win.mSession,win);
  }
}","@Override void removeAllWindows(){
  int winNdx;
  while ((winNdx=allAppWindows.size()) > 0) {
    WindowState win=allAppWindows.get(winNdx - 1);
    if (WindowManagerService.DEBUG_WINDOW_MOVEMENT) {
      Slog.w(WindowManagerService.TAG,""String_Node_Str"" + win);
    }
    win.mService.removeWindowLocked(win.mSession,win);
  }
}",0.8775193798449612
195982,"void removeAllWindows(){
  for (int winNdx=allAppWindows.size() - 1; winNdx >= 0; --winNdx) {
    WindowState win=allAppWindows.get(winNdx);
    if (WindowManagerService.DEBUG_WINDOW_MOVEMENT)     Slog.w(WindowManagerService.TAG,""String_Node_Str"" + win);
    win.mService.removeWindowLocked(win.mSession,win);
  }
}","@Override void removeAllWindows(){
  int winNdx;
  while ((winNdx=allAppWindows.size()) > 0) {
    WindowState win=allAppWindows.get(winNdx - 1);
    if (WindowManagerService.DEBUG_WINDOW_MOVEMENT) {
      Slog.w(WindowManagerService.TAG,""String_Node_Str"" + win);
    }
    win.mService.removeWindowLocked(win.mSession,win);
  }
}",0.8775193798449612
195983,"private boolean inflateViews(NotificationData.Entry entry,ViewGroup parent,boolean isHeadsUp){
  PackageManager pmUser=getPackageManagerForUser(entry.notification.getUser().getIdentifier());
  int maxHeight=mRowMaxHeight;
  final StatusBarNotification sbn=entry.notification;
  RemoteViews contentView=sbn.getNotification().contentView;
  RemoteViews bigContentView=sbn.getNotification().bigContentView;
  if (isHeadsUp) {
    maxHeight=mContext.getResources().getDimensionPixelSize(R.dimen.notification_mid_height);
    bigContentView=sbn.getNotification().headsUpContentView;
  }
  if (contentView == null) {
    return false;
  }
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + sbn.getNotification().publicVersion);
  }
  Notification publicNotification=sbn.getNotification().publicVersion;
  ExpandableNotificationRow row;
  boolean hasUserChangedExpansion=false;
  boolean userExpanded=false;
  boolean userLocked=false;
  if (entry.row != null) {
    row=entry.row;
    hasUserChangedExpansion=row.hasUserChangedExpansion();
    userExpanded=row.isUserExpanded();
    userLocked=row.isUserLocked();
    entry.reset();
    if (hasUserChangedExpansion) {
      row.setUserExpanded(userExpanded);
    }
  }
 else {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    row=(ExpandableNotificationRow)inflater.inflate(R.layout.status_bar_notification_row,parent,false);
    row.setExpansionLogger(this,entry.notification.getKey());
  }
  workAroundBadLayerDrawableOpacity(row);
  View vetoButton=updateNotificationVetoButton(row,sbn);
  vetoButton.setContentDescription(mContext.getString(R.string.accessibility_remove_notification));
  NotificationContentView expanded=(NotificationContentView)row.findViewById(R.id.expanded);
  NotificationContentView expandedPublic=(NotificationContentView)row.findViewById(R.id.expandedPublic);
  row.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
  PendingIntent contentIntent=sbn.getNotification().contentIntent;
  if (contentIntent != null) {
    final View.OnClickListener listener=makeClicker(contentIntent,sbn.getKey(),isHeadsUp);
    row.setOnClickListener(listener);
  }
 else {
    row.setOnClickListener(null);
  }
  View contentViewLocal=null;
  View bigContentViewLocal=null;
  try {
    contentViewLocal=contentView.apply(mContext,expanded,mOnClickHandler);
    if (bigContentView != null) {
      bigContentViewLocal=bigContentView.apply(mContext,expanded,mOnClickHandler);
    }
  }
 catch (  RuntimeException e) {
    final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
    Log.e(TAG,""String_Node_Str"" + ident,e);
    return false;
  }
  if (contentViewLocal != null) {
    contentViewLocal.setIsRootNamespace(true);
    expanded.setContractedChild(contentViewLocal);
  }
  if (bigContentViewLocal != null) {
    bigContentViewLocal.setIsRootNamespace(true);
    expanded.setExpandedChild(bigContentViewLocal);
  }
  View publicViewLocal=null;
  if (publicNotification != null) {
    try {
      publicViewLocal=publicNotification.contentView.apply(mContext,expandedPublic,mOnClickHandler);
      if (publicViewLocal != null) {
        publicViewLocal.setIsRootNamespace(true);
        expandedPublic.setContractedChild(publicViewLocal);
      }
    }
 catch (    RuntimeException e) {
      final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
      Log.e(TAG,""String_Node_Str"" + ident,e);
      publicViewLocal=null;
    }
  }
  try {
    ApplicationInfo info=pmUser.getApplicationInfo(sbn.getPackageName(),0);
    entry.targetSdk=info.targetSdkVersion;
  }
 catch (  NameNotFoundException ex) {
    Log.e(TAG,""String_Node_Str"" + sbn.getPackageName(),ex);
  }
  if (publicViewLocal == null) {
    publicViewLocal=LayoutInflater.from(mContext).inflate(R.layout.notification_public_default,expandedPublic,false);
    publicViewLocal.setIsRootNamespace(true);
    expandedPublic.setContractedChild(publicViewLocal);
    final TextView title=(TextView)publicViewLocal.findViewById(R.id.title);
    try {
      title.setText(pmUser.getApplicationLabel(pmUser.getApplicationInfo(entry.notification.getPackageName(),0)));
    }
 catch (    NameNotFoundException e) {
      title.setText(entry.notification.getPackageName());
    }
    final ImageView icon=(ImageView)publicViewLocal.findViewById(R.id.icon);
    final ImageView profileBadge=(ImageView)publicViewLocal.findViewById(R.id.profile_badge_line3);
    final StatusBarIcon ic=new StatusBarIcon(entry.notification.getPackageName(),entry.notification.getUser(),entry.notification.getNotification().icon,entry.notification.getNotification().iconLevel,entry.notification.getNotification().number,entry.notification.getNotification().tickerText);
    Drawable iconDrawable=StatusBarIconView.getIcon(mContext,ic);
    icon.setImageDrawable(iconDrawable);
    if (entry.targetSdk >= Build.VERSION_CODES.LOLLIPOP || mNotificationColorUtil.isGrayscaleIcon(iconDrawable)) {
      icon.setBackgroundResource(com.android.internal.R.drawable.notification_icon_legacy_bg);
      int padding=mContext.getResources().getDimensionPixelSize(com.android.internal.R.dimen.notification_large_icon_circle_padding);
      icon.setPadding(padding,padding,padding,padding);
      if (sbn.getNotification().color != Notification.COLOR_DEFAULT) {
        icon.getBackground().setColorFilter(sbn.getNotification().color,PorterDuff.Mode.SRC_ATOP);
      }
    }
    if (profileBadge != null) {
      Drawable profileDrawable=mContext.getPackageManager().getUserBadgeForDensity(entry.notification.getUser(),0);
      if (profileDrawable != null) {
        profileBadge.setImageDrawable(profileDrawable);
        profileBadge.setVisibility(View.VISIBLE);
      }
 else {
        profileBadge.setVisibility(View.GONE);
      }
    }
    final View privateTime=contentViewLocal.findViewById(com.android.internal.R.id.time);
    final DateTimeView time=(DateTimeView)publicViewLocal.findViewById(R.id.time);
    if (privateTime != null && privateTime.getVisibility() == View.VISIBLE) {
      time.setVisibility(View.VISIBLE);
      time.setTime(entry.notification.getNotification().when);
    }
    final TextView text=(TextView)publicViewLocal.findViewById(R.id.text);
    if (text != null) {
      text.setText(R.string.notification_hidden_text);
      text.setTextAppearance(mContext,R.style.TextAppearance_Material_Notification_Parenthetical);
    }
    int topPadding=Notification.Builder.calculateTopPadding(mContext,false,mContext.getResources().getConfiguration().fontScale);
    title.setPadding(0,topPadding,0,0);
    entry.autoRedacted=true;
  }
  row.setClearable(sbn.isClearable());
  if (MULTIUSER_DEBUG) {
    TextView debug=(TextView)row.findViewById(R.id.debug_info);
    if (debug != null) {
      debug.setVisibility(View.VISIBLE);
      debug.setText(""String_Node_Str"" + mCurrentUserId + ""String_Node_Str""+ entry.notification.getUserId());
    }
  }
  entry.row=row;
  entry.row.setHeightRange(mRowMinHeight,maxHeight);
  entry.row.setOnActivatedListener(this);
  entry.expanded=contentViewLocal;
  entry.expandedPublic=publicViewLocal;
  entry.setBigContentView(bigContentViewLocal);
  applyColorsAndBackgrounds(sbn,entry);
  if (hasUserChangedExpansion) {
    row.setUserExpanded(userExpanded);
  }
  row.setUserLocked(userLocked);
  row.setStatusBarNotification(entry.notification);
  return true;
}","private boolean inflateViews(NotificationData.Entry entry,ViewGroup parent,boolean isHeadsUp){
  PackageManager pmUser=getPackageManagerForUser(entry.notification.getUser().getIdentifier());
  int maxHeight=mRowMaxHeight;
  final StatusBarNotification sbn=entry.notification;
  RemoteViews contentView=sbn.getNotification().contentView;
  RemoteViews bigContentView=sbn.getNotification().bigContentView;
  if (isHeadsUp) {
    maxHeight=mContext.getResources().getDimensionPixelSize(R.dimen.notification_mid_height);
    bigContentView=sbn.getNotification().headsUpContentView;
  }
  if (contentView == null) {
    return false;
  }
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + sbn.getNotification().publicVersion);
  }
  Notification publicNotification=sbn.getNotification().publicVersion;
  ExpandableNotificationRow row;
  boolean hasUserChangedExpansion=false;
  boolean userExpanded=false;
  boolean userLocked=false;
  if (entry.row != null) {
    row=entry.row;
    hasUserChangedExpansion=row.hasUserChangedExpansion();
    userExpanded=row.isUserExpanded();
    userLocked=row.isUserLocked();
    entry.reset();
    if (hasUserChangedExpansion) {
      row.setUserExpanded(userExpanded);
    }
  }
 else {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    row=(ExpandableNotificationRow)inflater.inflate(R.layout.status_bar_notification_row,parent,false);
    row.setExpansionLogger(this,entry.notification.getKey());
  }
  workAroundBadLayerDrawableOpacity(row);
  View vetoButton=updateNotificationVetoButton(row,sbn);
  vetoButton.setContentDescription(mContext.getString(R.string.accessibility_remove_notification));
  NotificationContentView expanded=(NotificationContentView)row.findViewById(R.id.expanded);
  NotificationContentView expandedPublic=(NotificationContentView)row.findViewById(R.id.expandedPublic);
  row.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
  PendingIntent contentIntent=sbn.getNotification().contentIntent;
  if (contentIntent != null) {
    final View.OnClickListener listener=makeClicker(contentIntent,sbn.getKey(),isHeadsUp);
    row.setOnClickListener(listener);
  }
 else {
    row.setOnClickListener(null);
  }
  View contentViewLocal=null;
  View bigContentViewLocal=null;
  try {
    contentViewLocal=contentView.apply(mContext,expanded,mOnClickHandler);
    if (bigContentView != null) {
      bigContentViewLocal=bigContentView.apply(mContext,expanded,mOnClickHandler);
    }
  }
 catch (  RuntimeException e) {
    final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
    Log.e(TAG,""String_Node_Str"" + ident,e);
    return false;
  }
  if (contentViewLocal != null) {
    contentViewLocal.setIsRootNamespace(true);
    expanded.setContractedChild(contentViewLocal);
  }
  if (bigContentViewLocal != null) {
    bigContentViewLocal.setIsRootNamespace(true);
    expanded.setExpandedChild(bigContentViewLocal);
  }
  View publicViewLocal=null;
  if (publicNotification != null) {
    try {
      publicViewLocal=publicNotification.contentView.apply(mContext,expandedPublic,mOnClickHandler);
      if (publicViewLocal != null) {
        publicViewLocal.setIsRootNamespace(true);
        expandedPublic.setContractedChild(publicViewLocal);
      }
    }
 catch (    RuntimeException e) {
      final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
      Log.e(TAG,""String_Node_Str"" + ident,e);
      publicViewLocal=null;
    }
  }
  try {
    ApplicationInfo info=pmUser.getApplicationInfo(sbn.getPackageName(),0);
    entry.targetSdk=info.targetSdkVersion;
  }
 catch (  NameNotFoundException ex) {
    Log.e(TAG,""String_Node_Str"" + sbn.getPackageName(),ex);
  }
  if (publicViewLocal == null) {
    publicViewLocal=LayoutInflater.from(mContext).inflate(R.layout.notification_public_default,expandedPublic,false);
    publicViewLocal.setIsRootNamespace(true);
    expandedPublic.setContractedChild(publicViewLocal);
    final TextView title=(TextView)publicViewLocal.findViewById(R.id.title);
    try {
      title.setText(pmUser.getApplicationLabel(pmUser.getApplicationInfo(entry.notification.getPackageName(),0)));
    }
 catch (    NameNotFoundException e) {
      title.setText(entry.notification.getPackageName());
    }
    final ImageView icon=(ImageView)publicViewLocal.findViewById(R.id.icon);
    final ImageView profileBadge=(ImageView)publicViewLocal.findViewById(R.id.profile_badge_line3);
    final StatusBarIcon ic=new StatusBarIcon(entry.notification.getPackageName(),entry.notification.getUser(),entry.notification.getNotification().icon,entry.notification.getNotification().iconLevel,entry.notification.getNotification().number,entry.notification.getNotification().tickerText);
    Drawable iconDrawable=StatusBarIconView.getIcon(mContext,ic);
    icon.setImageDrawable(iconDrawable);
    if (entry.targetSdk >= Build.VERSION_CODES.LOLLIPOP || mNotificationColorUtil.isGrayscaleIcon(iconDrawable)) {
      icon.setBackgroundResource(com.android.internal.R.drawable.notification_icon_legacy_bg);
      int padding=mContext.getResources().getDimensionPixelSize(com.android.internal.R.dimen.notification_large_icon_circle_padding);
      icon.setPadding(padding,padding,padding,padding);
      if (sbn.getNotification().color != Notification.COLOR_DEFAULT) {
        icon.getBackground().setColorFilter(sbn.getNotification().color,PorterDuff.Mode.SRC_ATOP);
      }
    }
    if (profileBadge != null) {
      Drawable profileDrawable=mContext.getPackageManager().getUserBadgeForDensity(entry.notification.getUser(),0);
      if (profileDrawable != null) {
        profileBadge.setImageDrawable(profileDrawable);
        profileBadge.setVisibility(View.VISIBLE);
      }
 else {
        profileBadge.setVisibility(View.GONE);
      }
    }
    final View privateTime=contentViewLocal.findViewById(com.android.internal.R.id.time);
    final DateTimeView time=(DateTimeView)publicViewLocal.findViewById(R.id.time);
    if (privateTime != null && privateTime.getVisibility() == View.VISIBLE) {
      time.setVisibility(View.VISIBLE);
      time.setTime(entry.notification.getNotification().when);
    }
    final TextView text=(TextView)publicViewLocal.findViewById(R.id.text);
    if (text != null) {
      text.setText(R.string.notification_hidden_text);
      text.setTextAppearance(mContext,R.style.TextAppearance_Material_Notification_Parenthetical);
    }
    int topPadding=Notification.Builder.calculateTopPadding(mContext,false,mContext.getResources().getConfiguration().fontScale);
    title.setPadding(0,topPadding,0,0);
    entry.autoRedacted=true;
  }
  if (MULTIUSER_DEBUG) {
    TextView debug=(TextView)row.findViewById(R.id.debug_info);
    if (debug != null) {
      debug.setVisibility(View.VISIBLE);
      debug.setText(""String_Node_Str"" + mCurrentUserId + ""String_Node_Str""+ entry.notification.getUserId());
    }
  }
  entry.row=row;
  entry.row.setHeightRange(mRowMinHeight,maxHeight);
  entry.row.setOnActivatedListener(this);
  entry.expanded=contentViewLocal;
  entry.expandedPublic=publicViewLocal;
  entry.setBigContentView(bigContentViewLocal);
  applyColorsAndBackgrounds(sbn,entry);
  if (hasUserChangedExpansion) {
    row.setUserExpanded(userExpanded);
  }
  row.setUserLocked(userLocked);
  row.setStatusBarNotification(entry.notification);
  return true;
}",0.9973774460359088
195984,"/** 
 * @return Can the underlying notification be cleared?
 */
public boolean isClearable(){
  return mClearable;
}","/** 
 * @return Can the underlying notification be cleared?
 */
public boolean isClearable(){
  return mStatusBarNotification != null && mStatusBarNotification.isClearable();
}",0.7945205479452054
195985,"public void setStatusBarNotification(StatusBarNotification statusBarNotification){
  mStatusBarNotification=statusBarNotification;
}","public void setStatusBarNotification(StatusBarNotification statusBarNotification){
  mStatusBarNotification=statusBarNotification;
  updateVetoButton();
}",0.9230769230769232
195986,"void removeAllWindows(){
  for (int winNdx=allAppWindows.size() - 1; winNdx >= 0; --winNdx) {
    WindowState win=allAppWindows.get(winNdx);
    if (WindowManagerService.DEBUG_WINDOW_MOVEMENT)     Slog.w(WindowManagerService.TAG,""String_Node_Str"" + win);
    win.mService.removeWindowLocked(win.mSession,win);
  }
}","@Override void removeAllWindows(){
  int winNdx;
  while ((winNdx=allAppWindows.size()) > 0) {
    WindowState win=allAppWindows.get(winNdx - 1);
    if (WindowManagerService.DEBUG_WINDOW_MOVEMENT) {
      Slog.w(WindowManagerService.TAG,""String_Node_Str"" + win);
    }
    win.mService.removeWindowLocked(win.mSession,win);
  }
}",0.8775193798449612
195987,"@Override protected void finalize() throws Throwable {
  try {
    destroy();
  }
  finally {
    super.finalize();
  }
}","@Override protected void finalize() throws Throwable {
  try {
    if (mCloseGuard != null) {
      mCloseGuard.warnIfOpen();
    }
    release();
  }
  finally {
    super.finalize();
  }
}",0.752411575562701
195988,"@Override protected void finalize() throws Throwable {
  try {
    destroy();
  }
  finally {
    super.finalize();
  }
}","@Override protected void finalize() throws Throwable {
  try {
    if (mCloseGuard != null) {
      mCloseGuard.warnIfOpen();
    }
    release();
  }
  finally {
    super.finalize();
  }
}",0.752411575562701
195989,"@Override protected void finalize() throws Throwable {
  try {
    destroy();
  }
  finally {
    super.finalize();
  }
}","@Override protected void finalize() throws Throwable {
  try {
    if (mCloseGuard != null) {
      mCloseGuard.warnIfOpen();
    }
    release();
  }
  finally {
    super.finalize();
  }
}",0.752411575562701
195990,"@Override protected void finalize() throws Throwable {
  try {
    destroy();
  }
  finally {
    super.finalize();
  }
}","@Override protected void finalize() throws Throwable {
  try {
    if (mCloseGuard != null) {
      mCloseGuard.warnIfOpen();
    }
    release();
  }
  finally {
    super.finalize();
  }
}",0.752411575562701
195991,"void drawHardwareLayer(HardwareLayer layer,float x,float y,Paint paint){
  layer.setLayerPaint(paint);
  nDrawLayer(mRenderer,layer.getLayer(),x,y);
}","void drawHardwareLayer(HardwareLayer layer,float x,float y,Paint paint){
  layer.setLayerPaint(paint);
  nDrawLayer(mRenderer,layer.getLayerHandle(),x,y);
}",0.9803921568627452
195992,"void drawHardwareLayer(HardwareLayer layer,float x,float y,Paint paint){
  layer.setLayerPaint(paint);
  nDrawLayer(mRenderer,layer.getLayer(),x,y);
}","void drawHardwareLayer(HardwareLayer layer,float x,float y,Paint paint){
  layer.setLayerPaint(paint);
  nDrawLayer(mRenderer,layer.getLayerHandle(),x,y);
}",0.9803921568627452
195993,"void drawHardwareLayer(HardwareLayer layer,float x,float y,Paint paint){
  layer.setLayerPaint(paint);
  nDrawLayer(mRenderer,layer.getLayer(),x,y);
}","void drawHardwareLayer(HardwareLayer layer,float x,float y,Paint paint){
  layer.setLayerPaint(paint);
  nDrawLayer(mRenderer,layer.getLayerHandle(),x,y);
}",0.9803921568627452
195994,"void drawHardwareLayer(HardwareLayer layer,float x,float y,Paint paint){
  layer.setLayerPaint(paint);
  nDrawLayer(mRenderer,layer.getLayer(),x,y);
}","void drawHardwareLayer(HardwareLayer layer,float x,float y,Paint paint){
  layer.setLayerPaint(paint);
  nDrawLayer(mRenderer,layer.getLayerHandle(),x,y);
}",0.9803921568627452
195995,"@Override public void onRestoreInstanceState(Parcelable state){
  if (!(state instanceof SavedState)) {
    super.onRestoreInstanceState(state);
    return;
  }
  SavedState ss=(SavedState)state;
  super.onRestoreInstanceState(ss.getSuperState());
  if (ss.text != null) {
    setText(ss.text);
  }
  if (ss.selStart >= 0 && ss.selEnd >= 0) {
    if (mText instanceof Spannable) {
      int len=mText.length();
      if (ss.selStart > len || ss.selEnd > len) {
        String restored=""String_Node_Str"";
        if (ss.text != null) {
          restored=""String_Node_Str"";
        }
        Log.e(LOG_TAG,""String_Node_Str"" + ss.selStart + ""String_Node_Str""+ ss.selEnd+ ""String_Node_Str""+ restored+ ""String_Node_Str""+ mText);
      }
 else {
        Selection.setSelection((Spannable)mText,ss.selStart,ss.selEnd);
        if (ss.frozenWithFocus) {
          createEditorIfNeeded();
          mEditor.mFrozenWithFocus=true;
        }
      }
    }
  }
  if (ss.error != null) {
    final CharSequence error=ss.error;
    post(new Runnable(){
      public void run(){
        setError(error);
      }
    }
);
  }
}","@Override public void onRestoreInstanceState(Parcelable state){
  if (!(state instanceof SavedState)) {
    super.onRestoreInstanceState(state);
    return;
  }
  SavedState ss=(SavedState)state;
  super.onRestoreInstanceState(ss.getSuperState());
  if (ss.text != null) {
    setText(ss.text);
  }
  if (ss.selStart >= 0 && ss.selEnd >= 0) {
    if (mText instanceof Spannable) {
      int len=mText.length();
      if (ss.selStart > len || ss.selEnd > len) {
        String restored=""String_Node_Str"";
        if (ss.text != null) {
          restored=""String_Node_Str"";
        }
        Log.e(LOG_TAG,""String_Node_Str"" + ss.selStart + ""String_Node_Str""+ ss.selEnd+ ""String_Node_Str""+ restored+ ""String_Node_Str""+ mText);
      }
 else {
        Selection.setSelection((Spannable)mText,ss.selStart,ss.selEnd);
        if (ss.frozenWithFocus) {
          createEditorIfNeeded();
          mEditor.mFrozenWithFocus=true;
        }
      }
    }
  }
  if (ss.error != null) {
    final CharSequence error=ss.error;
    post(new Runnable(){
      public void run(){
        if (mEditor == null || !mEditor.mErrorWasChanged) {
          setError(error);
        }
      }
    }
);
  }
}",0.9355400696864112
195996,"public void resetHeight(){
  super.resetHeight();
  mMaxExpandHeight=0;
  mWasReset=true;
  onHeightReset();
  requestLayout();
}","public void resetHeight(){
  if (mIsHeadsUp) {
    resetActualHeight();
  }
  mMaxExpandHeight=0;
  mWasReset=true;
  onHeightReset();
  requestLayout();
}",0.8802816901408451
195997,"/** 
 * Resets this view so it can be re-used for an updated notification.
 */
@Override public void reset(){
  super.reset();
  mRowMinHeight=0;
  final boolean wasExpanded=isExpanded();
  mRowMaxHeight=0;
  mExpandable=false;
  mHasUserChangedExpansion=false;
  mUserLocked=false;
  mShowingPublic=false;
  mSensitive=false;
  mShowingPublicInitialized=false;
  mIsSystemExpanded=false;
  mExpansionDisabled=false;
  mPublicLayout.reset();
  mPrivateLayout.reset();
  resetHeight();
  logExpansionEvent(false,wasExpanded);
}","/** 
 * Resets this view so it can be re-used for an updated notification.
 */
@Override public void reset(){
  super.reset();
  mRowMinHeight=0;
  final boolean wasExpanded=isExpanded();
  mRowMaxHeight=0;
  mExpandable=false;
  mHasUserChangedExpansion=false;
  mUserLocked=false;
  mShowingPublic=false;
  mSensitive=false;
  mShowingPublicInitialized=false;
  mIsSystemExpanded=false;
  mExpansionDisabled=false;
  mPublicLayout.reset(mIsHeadsUp);
  mPrivateLayout.reset(mIsHeadsUp);
  resetHeight();
  logExpansionEvent(false,wasExpanded);
}",0.9626865671641792
195998,"private boolean filterMotionEvent(MotionEvent event){
  return event.getActionMasked() != MotionEvent.ACTION_DOWN || event.getY() > mClipTopAmount && event.getY() < mActualHeight;
}","protected boolean filterMotionEvent(MotionEvent event){
  return event.getActionMasked() != MotionEvent.ACTION_DOWN || event.getY() > mClipTopAmount && event.getY() < mActualHeight;
}",0.978021978021978
195999,"public NotificationContentView(Context context,AttributeSet attrs){
  super(context,attrs);
  mFadePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.ADD));
  reset();
}","public NotificationContentView(Context context,AttributeSet attrs){
  super(context,attrs);
  mFadePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.ADD));
  reset(true);
}",0.9887005649717514
196000,"public void reset(){
  if (mContractedChild != null) {
    mContractedChild.animate().cancel();
  }
  if (mExpandedChild != null) {
    mExpandedChild.animate().cancel();
  }
  removeAllViews();
  mContractedChild=null;
  mExpandedChild=null;
  mSmallHeight=getResources().getDimensionPixelSize(R.dimen.notification_min_height);
  mActualHeight=mSmallHeight;
  mContractedVisible=true;
}","public void reset(boolean resetActualHeight){
  if (mContractedChild != null) {
    mContractedChild.animate().cancel();
  }
  if (mExpandedChild != null) {
    mExpandedChild.animate().cancel();
  }
  removeAllViews();
  mContractedChild=null;
  mExpandedChild=null;
  mSmallHeight=getResources().getDimensionPixelSize(R.dimen.notification_min_height);
  mContractedVisible=true;
  if (resetActualHeight) {
    mActualHeight=mSmallHeight;
  }
}",0.8701923076923077
