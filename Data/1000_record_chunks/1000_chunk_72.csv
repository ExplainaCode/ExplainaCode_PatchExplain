record_number,buggy_code,fixed_code,code_similarity
71001,"private void writeReport(DataOutputStream dos,Report design) throws IOException {
  IOUtil.writeShort(dos,(short)4);
  IOUtil.writeShort(dos,FIELD_REPORT_STYLES);
  writeReportStyles(dos,design);
  IOUtil.writeShort(dos,FIELD_REPORT_NAMED_EXPRESSIONS);
  writeReportNamedExpressions(dos,design);
  IOUtil.writeShort(dos,FIELD_REPORT_MASTER_PAGES);
  ReportItemWriter writer=new ReportItemWriter(dos);
  writeReportPageSetup(dos,writer,design);
  IOUtil.writeShort(dos,FIELD_REPORT_BODY);
  writeReportBodyContent(dos,writer,design);
}","private void writeReport(DataOutputStream dos,Report design) throws IOException {
  IOUtil.writeShort(dos,(short)5);
  IOUtil.writeShort(dos,FIELD_REPORT_STYLES);
  writeReportStyles(dos,design);
  IOUtil.writeShort(dos,FIELD_ROOT_STYLE);
  design.getRootStyle().write(dos);
  IOUtil.writeShort(dos,FIELD_REPORT_NAMED_EXPRESSIONS);
  writeReportNamedExpressions(dos,design);
  IOUtil.writeShort(dos,FIELD_REPORT_MASTER_PAGES);
  ReportItemWriter writer=new ReportItemWriter(dos);
  writeReportPageSetup(dos,writer,design);
  IOUtil.writeShort(dos,FIELD_REPORT_BODY);
  writeReportBodyContent(dos,writer,design);
}",0.9293809938971228
71002,"protected void writeStyledElement(DataOutputStream out,StyledElementDesign design) throws IOException {
  writeReportElement(out,design);
  String styleClass=design.getStyleClass();
  if (styleClass != null) {
    IOUtil.writeShort(out,FIELD_STYLE_CLASS);
    IOUtil.writeString(out,styleClass);
  }
  MapDesign map=design.getMap();
  if (map != null) {
    IOUtil.writeShort(out,FIELD_MAP);
    writeMap(out,map);
  }
  HighlightDesign highlight=design.getHighlight();
  ;
  if (highlight != null) {
    IOUtil.writeShort(out,FIELD_HIGHLIGHT);
    writeHighlight(out,highlight);
  }
}","protected void writeStyledElement(DataOutputStream out,StyledElementDesign design) throws IOException {
  writeReportElement(out,design);
  String styleClass=design.getStyleClass();
  if (styleClass != null) {
    IOUtil.writeShort(out,FIELD_STYLE_CLASS);
    IOUtil.writeString(out,styleClass);
  }
  IStyle style=design.getStyle();
  if (style != null && !style.isEmpty()) {
    IOUtil.writeShort(out,FIELD_STYLE);
    style.write(out);
  }
  MapDesign map=design.getMap();
  if (map != null) {
    IOUtil.writeShort(out,FIELD_MAP);
    writeMap(out,map);
  }
  HighlightDesign highlight=design.getHighlight();
  ;
  if (highlight != null) {
    IOUtil.writeShort(out,FIELD_HIGHLIGHT);
    writeHighlight(out,highlight);
  }
}",0.8910891089108911
71003,"/** 
 * Save content to workspace file.
 * @param moduleHandle
 * @param file
 * @param monitor
 */
private void saveFile(final ModuleHandle moduleHandle,final IFile file,final IPath oldReportPath,IProgressMonitor monitor){
  if (file.exists() && file.isReadOnly()) {
    MessageDialog.openError(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{file.getFullPath()}));
    return;
  }
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public synchronized final void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      try {
        IWorkspaceRunnable workspaceRunnable=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor pm) throws CoreException {
            try {
              execute(pm);
            }
 catch (            CoreException e) {
              throw e;
            }
catch (            IOException e) {
              ExceptionHandler.handle(e);
            }
          }
        }
;
        ResourcesPlugin.getWorkspace().run(workspaceRunnable,ResourcesPlugin.getWorkspace().getRoot(),IResource.NONE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
catch (      OperationCanceledException e) {
        throw new InterruptedException(e.getMessage());
      }
    }
    public void execute(    final IProgressMonitor monitor) throws CoreException, IOException {
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      moduleHandle.serialize(out);
      byte[] bytes=out.toByteArray();
      out.close();
      ByteArrayInputStream is=new ByteArrayInputStream(bytes);
      IContainer container=file.getParent();
      if (!container.exists() && container instanceof IFolder) {
        UIUtil.createFolder((IFolder)container,monitor);
      }
      if (file.exists()) {
        file.setContents(is,true,true,monitor);
      }
 else {
        file.create(is,true,monitor);
      }
      if (oldReportPath != null) {
        FileReportProvider.copyReportConfigFile(file.getLocation(),oldReportPath);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(UIUtil.getDefaultShell()).run(false,true,op);
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  try {
    file.refreshLocal(0,monitor);
  }
 catch (  CoreException e) {
    ExceptionHandler.handle(e);
  }
}","/** 
 * Save content to workspace file.
 * @param moduleHandle
 * @param file
 * @param monitor
 */
private void saveFile(final ModuleHandle moduleHandle,final IFile file,final IPath oldReportPath,IProgressMonitor monitor){
  if (file.exists() && file.isReadOnly()) {
    MessageDialog.openError(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{file.getFullPath()}));
    return;
  }
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public synchronized final void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      try {
        IWorkspaceRunnable workspaceRunnable=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor pm) throws CoreException {
            try {
              execute(pm);
            }
 catch (            CoreException e) {
              throw e;
            }
catch (            IOException e) {
              ExceptionHandler.handle(e);
            }
          }
        }
;
        ResourcesPlugin.getWorkspace().run(workspaceRunnable,ResourcesPlugin.getWorkspace().getRoot(),IResource.NONE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
catch (      OperationCanceledException e) {
        throw new InterruptedException(e.getMessage());
      }
    }
    public void execute(    final IProgressMonitor monitor) throws CoreException, IOException {
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      moduleHandle.serialize(out);
      byte[] bytes=out.toByteArray();
      out.close();
      ByteArrayInputStream is=new ByteArrayInputStream(bytes);
      IContainer container=file.getParent();
      if (!container.exists() && container instanceof IFolder) {
        UIUtil.createFolder((IFolder)container,monitor);
      }
      if (file.exists()) {
        file.setContents(is,true,true,monitor);
      }
 else {
        file.create(is,true,monitor);
      }
      if (oldReportPath != null) {
        FileReportProvider.copyReportConfigFile(file.getLocation(),oldReportPath);
      }
    }
  }
;
  try {
    IRunnableContext runner=getOperationRunner(monitor);
    if (runner != null)     runner.run(false,false,op);
 else     new ProgressMonitorDialog(UIUtil.getDefaultShell()).run(false,true,op);
  }
 catch (  InterruptedException x) {
  }
catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  try {
    file.refreshLocal(0,monitor);
  }
 catch (  CoreException e) {
    ExceptionHandler.handle(e);
  }
}",0.9683239775461108
71004,"/** 
 * Creates Report default styles
 */
protected void createReportDefaultStyles(StyleHandle handle){
  nonInheritableReportStyle=new StyleDeclaration(cssEngine);
  inheritableReportStyle=new StyleDeclaration(cssEngine);
  addReportDefaultPropertyValue(Style.BACKGROUND_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BACKGROUND_IMAGE_PROP,handle);
  addReportDefaultPropertyValue(Style.BACKGROUND_POSITION_X_PROP,handle);
  addReportDefaultPropertyValue(Style.BACKGROUND_POSITION_Y_PROP,handle);
  addReportDefaultPropertyValue(Style.BACKGROUND_REPEAT_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_DIRECTION_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_ALIGN_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_INDENT_PROP,handle);
  addReportDefaultPropertyValue(Style.LETTER_SPACING_PROP,handle);
  addReportDefaultPropertyValue(Style.LINE_HEIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.ORPHANS_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_TRANSFORM_PROP,handle);
  addReportDefaultPropertyValue(Style.VERTICAL_ALIGN_PROP,handle);
  addReportDefaultPropertyValue(Style.WHITE_SPACE_PROP,handle);
  addReportDefaultPropertyValue(Style.WIDOWS_PROP,handle);
  addReportDefaultPropertyValue(Style.WORD_SPACING_PROP,handle);
  addReportDefaultPropertyValue(Style.DISPLAY_PROP,handle);
  addReportDefaultPropertyValue(Style.MASTER_PAGE_PROP,handle);
  addReportDefaultPropertyValue(Style.PAGE_BREAK_AFTER_PROP,handle);
  addReportDefaultPropertyValue(Style.PAGE_BREAK_BEFORE_PROP,handle);
  addReportDefaultPropertyValue(Style.PAGE_BREAK_INSIDE_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_FAMILY_PROP,handle);
  addReportDefaultPropertyValue(Style.COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.FONT_SIZE_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_WEIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_VARIANT_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_LINE_THROUGH_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_OVERLINE_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_UNDERLINE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_BOTTOM_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_BOTTOM_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_BOTTOM_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_LEFT_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_LEFT_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_LEFT_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_RIGHT_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_RIGHT_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_RIGHT_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_TOP_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_TOP_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_TOP_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_TOP_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_LEFT_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_BOTTOM_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_RIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_TOP_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_LEFT_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_BOTTOM_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_RIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.STRING_FORMAT_PROP,handle);
  addReportDefaultPropertyValue(Style.NUMBER_FORMAT_PROP,handle);
  addReportDefaultPropertyValue(Style.DATE_TIME_FORMAT_PROP,handle);
  report.setRootStyleName(assignStyleName(inheritableReportStyle));
}","/** 
 * Creates Report default styles
 */
protected void createReportDefaultStyles(StyleHandle handle){
  nonInheritableReportStyle=new StyleDeclaration(cssEngine);
  inheritableReportStyle=new StyleDeclaration(cssEngine);
  addReportDefaultPropertyValue(Style.BACKGROUND_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BACKGROUND_IMAGE_PROP,handle);
  addReportDefaultPropertyValue(Style.BACKGROUND_POSITION_X_PROP,handle);
  addReportDefaultPropertyValue(Style.BACKGROUND_POSITION_Y_PROP,handle);
  addReportDefaultPropertyValue(Style.BACKGROUND_REPEAT_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_DIRECTION_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_ALIGN_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_INDENT_PROP,handle);
  addReportDefaultPropertyValue(Style.LETTER_SPACING_PROP,handle);
  addReportDefaultPropertyValue(Style.LINE_HEIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.ORPHANS_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_TRANSFORM_PROP,handle);
  addReportDefaultPropertyValue(Style.VERTICAL_ALIGN_PROP,handle);
  addReportDefaultPropertyValue(Style.WHITE_SPACE_PROP,handle);
  addReportDefaultPropertyValue(Style.WIDOWS_PROP,handle);
  addReportDefaultPropertyValue(Style.WORD_SPACING_PROP,handle);
  addReportDefaultPropertyValue(Style.DISPLAY_PROP,handle);
  addReportDefaultPropertyValue(Style.MASTER_PAGE_PROP,handle);
  addReportDefaultPropertyValue(Style.PAGE_BREAK_AFTER_PROP,handle);
  addReportDefaultPropertyValue(Style.PAGE_BREAK_BEFORE_PROP,handle);
  addReportDefaultPropertyValue(Style.PAGE_BREAK_INSIDE_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_FAMILY_PROP,handle);
  addReportDefaultPropertyValue(Style.COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.FONT_SIZE_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_WEIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_VARIANT_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_LINE_THROUGH_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_OVERLINE_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_UNDERLINE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_BOTTOM_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_BOTTOM_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_BOTTOM_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_LEFT_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_LEFT_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_LEFT_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_RIGHT_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_RIGHT_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_RIGHT_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_TOP_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_TOP_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_TOP_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_TOP_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_LEFT_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_BOTTOM_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_RIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_TOP_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_LEFT_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_BOTTOM_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_RIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.STRING_FORMAT_PROP,handle);
  addReportDefaultPropertyValue(Style.NUMBER_FORMAT_PROP,handle);
  addReportDefaultPropertyValue(Style.DATE_TIME_FORMAT_PROP,handle);
  report.setRootStyleName(assignStyleName(inheritableReportStyle));
  report.setRootStyle(inheritableReportStyle);
}",0.9939549839228295
71005,"/** 
 */
public void applyContainerBottomStyle(){
  XlsContainer container=engine.getCurrentContainer();
  ContainerSizeInfo rule=container.getSizeInfo();
  StyleEntry entry=container.getStyle();
  int start=rule.getStartCoordinate();
  int col=engine.getAxis().getColumnIndexByCoordinate(start);
  int span=engine.getAxis().getColumnIndexByCoordinate(rule.getEndCoordinate()) - col;
  for (int i=0; i < span; i++) {
    SheetData data=engine.getColumnLastData(i);
    if (data == null) {
      continue;
    }
    StyleBuilder.applyBottomBorder(entry,data.style);
  }
}","/** 
 */
public void applyContainerBottomStyle(){
  XlsContainer container=engine.getCurrentContainer();
  ContainerSizeInfo rule=container.getSizeInfo();
  StyleEntry entry=container.getStyle();
  int start=rule.getStartCoordinate();
  int col=engine.getAxis().getColumnIndexByCoordinate(start);
  int span=engine.getAxis().getColumnIndexByCoordinate(rule.getEndCoordinate());
  for (int i=col; i < span; i++) {
    SheetData data=engine.getColumnLastData(i);
    if (data == null) {
      continue;
    }
    StyleBuilder.applyBottomBorder(entry,data.style);
  }
}",0.9911971830985916
71006,"public void run(){
  try {
    this.statement.execute();
    if (this.closeStatementAfterExecution)     this.statement.close();
  }
 catch (  DataException e) {
    this.exception=e;
  }
  this.close=true;
}","public void run(){
  try {
    this.statement.execute();
    if (this.closeStatementAfterExecution)     this.statement.close();
  }
 catch (  Exception e) {
    this.exception=new DataException(e.getLocalizedMessage());
  }
}",0.75
71007,"private void setupClassStyles(StyledElementDesign design,ReportElementHandle handle){
  List<StyleHandle> styles=handle.getFactoryElementHandle().getAllFactoryStyles();
  StringBuffer buffer=new StringBuffer();
  for (int i=styles.size() - 1; i >= 0; i--) {
    StyleHandle styleHandle=styles.get(i);
    StyleDeclaration style=createPrivateStyle(styleHandle);
    String name=styleHandle.getName();
    if (!report.getStyles().containsKey(name))     report.addStyle(name,style);
    appendStyleName(buffer,name);
  }
  StyleDeclaration style=createPrivateStyle(handle.getPrivateStyle());
  if (style != null && !style.isEmpty()) {
    appendStyleName(buffer,assignStyleName(style));
  }
  if (buffer.length() > 0)   design.setStyleClass(buffer.toString());
  design.setStyle(createPrivateStyle(handle));
}","private void setupClassStyles(StyledElementDesign design,ReportElementHandle handle){
  List<StyleHandle> styles=handle.getFactoryElementHandle().getAllFactoryStyles();
  StringBuffer buffer=new StringBuffer();
  for (int i=styles.size() - 1; i >= 0; i--) {
    StyleHandle styleHandle=styles.get(i);
    StyleDeclaration style=createPrivateStyle(styleHandle);
    String name=styleHandle.getName();
    if (!report.getStyles().containsKey(name))     report.addStyle(name,style);
    appendStyleName(buffer,name);
  }
  StyleHandle privateStyle=handle.getPrivateStyle();
  if (privateStyle != null) {
    StyleDeclaration style=createPrivateStyle(privateStyle);
    if (style != null && !style.isEmpty()) {
      appendStyleName(buffer,assignStyleName(style));
    }
  }
  if (buffer.length() > 0)   design.setStyleClass(buffer.toString());
  design.setStyle(createPrivateStyle(handle));
}",0.9321533923303836
71008,"@Override public void run(){
  try {
    this.statement.execute();
    if (this.closeStatementAfterExecution)     this.statement.close();
  }
 catch (  DataException e) {
    this.exception=e;
  }
  this.close=true;
}","public void run(){
  try {
    this.statement.execute();
    if (this.closeStatementAfterExecution)     this.statement.close();
  }
 catch (  DataException e) {
    this.exception=e;
  }
  this.close=true;
}",0.9764150943396226
71009,"private void setAntialiasProperties(Graphics2D g2d){
  g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
}","private void setAntialiasProperties(Graphics2D g2d){
  g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  adjustFractionalMetrics();
}",0.8096
71010,"public final int getDpiResolution(){
  if (iDpiResolution == 0) {
switch (getGraphicsContext().getDeviceConfiguration().getDevice().getType()) {
case GraphicsDevice.TYPE_RASTER_SCREEN:
      iDpiResolution=computeScreenDpi();
    break;
case GraphicsDevice.TYPE_PRINTER:
  iDpiResolution=72;
break;
case GraphicsDevice.TYPE_IMAGE_BUFFER:
if (userResolution == 0) {
iDpiResolution=computeScreenDpi();
}
 else {
iDpiResolution=userResolution;
}
break;
}
if (iDpiResolution >= 192) {
_g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
}
 else {
_g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_OFF);
}
}
return iDpiResolution;
}","public final int getDpiResolution(){
  if (iDpiResolution == 0) {
switch (getGraphicsContext().getDeviceConfiguration().getDevice().getType()) {
case GraphicsDevice.TYPE_RASTER_SCREEN:
      iDpiResolution=computeScreenDpi();
    break;
case GraphicsDevice.TYPE_PRINTER:
  iDpiResolution=72;
break;
case GraphicsDevice.TYPE_IMAGE_BUFFER:
if (userResolution == 0) {
iDpiResolution=computeScreenDpi();
}
 else {
iDpiResolution=userResolution;
}
break;
}
adjustFractionalMetrics();
}
return iDpiResolution;
}",0.752233956133225
71011,"/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 * @throws DataException 
 */
public IResultObject[] readData(InputStream bis,int length,StopSign stopSign) throws IOException, DataException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (stopSign != null && stopSign.isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (fieldType.isAssignableFrom(Date.class))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IClob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IBlob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=ObjectSecurity.createObjectInputStream(dis);
        try {
          obs[j]=ObjectSecurity.readObject(ois);
        }
 catch (        Exception e) {
        }
        ois.close();
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}","/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 * @throws DataException 
 */
public IResultObject[] readData(InputStream bis,int length,StopSign stopSign) throws IOException, DataException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (stopSign != null && stopSign.isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (fieldType.isAssignableFrom(Date.class))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=ObjectSecurity.createObjectInputStream(dis);
        try {
          obs[j]=ObjectSecurity.readObject(ois);
        }
 catch (        Exception e) {
        }
        ois.close();
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}",0.9881962375507192
71012,"/** 
 * @param bos
 * @param resultObject
 * @throws IOException
 * @throws DataException 
 */
public void writeData(OutputStream bos,IResultObject resultObject) throws IOException, DataException {
  byte[] rowsDataBytes;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  for (int j=0; j < columnCount; j++) {
    Object fieldValue=null;
    try {
      fieldValue=resultObject.getFieldValue(j + 1);
    }
 catch (    DataException e) {
    }
    if (fieldValue == null) {
      dos.writeByte(0);
      continue;
    }
 else {
      dos.writeByte(1);
    }
    Class fieldType=typeArray[j];
    if (fieldType.equals(Integer.class))     dos.writeInt(((Integer)fieldValue).intValue());
 else     if (fieldType.equals(Double.class))     dos.writeDouble(((Double)fieldValue).doubleValue());
 else     if (fieldType.equals(BigDecimal.class))     dos.writeUTF(((BigDecimal)fieldValue).toString());
 else     if (Date.class.isAssignableFrom(fieldType))     dos.writeLong(((Date)fieldValue).getTime());
 else     if (fieldType.equals(Boolean.class))     dos.writeBoolean(((Boolean)fieldValue).booleanValue());
 else     if (fieldType.equals(String.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IClob.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IBlob.class)) {
      byte[] bytes=(byte[])fieldValue;
      if (bytes == null || bytes.length == 0) {
        IOUtil.writeInt(dos,0);
      }
 else {
        IOUtil.writeInt(dos,bytes.length);
        dos.write((byte[])fieldValue);
      }
    }
 else     if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
      if (!(fieldValue instanceof Serializable))       fieldValue=fieldValue.toString();
      ObjectOutputStream oo=ObjectSecurity.createObjectOutputStream(dos);
      oo.writeObject(fieldValue);
      oo.close();
    }
  }
  dos.flush();
  rowsDataBytes=baos.toByteArray();
  IOUtil.writeInt(bos,rowsDataBytes.length);
  bos.write(rowsDataBytes);
  rowsDataBytes=null;
  dos=null;
  baos=null;
}","/** 
 * @param bos
 * @param resultObject
 * @throws IOException
 * @throws DataException 
 */
public void writeData(OutputStream bos,IResultObject resultObject) throws IOException, DataException {
  byte[] rowsDataBytes;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  for (int j=0; j < columnCount; j++) {
    Object fieldValue=null;
    try {
      fieldValue=resultObject.getFieldValue(j + 1);
    }
 catch (    DataException e) {
    }
    if (fieldValue == null) {
      dos.writeByte(0);
      continue;
    }
 else {
      dos.writeByte(1);
    }
    Class fieldType=typeArray[j];
    if (fieldType.equals(Integer.class))     dos.writeInt(((Integer)fieldValue).intValue());
 else     if (fieldType.equals(Double.class))     dos.writeDouble(((Double)fieldValue).doubleValue());
 else     if (fieldType.equals(BigDecimal.class))     dos.writeUTF(((BigDecimal)fieldValue).toString());
 else     if (Date.class.isAssignableFrom(fieldType))     dos.writeLong(((Date)fieldValue).getTime());
 else     if (fieldType.equals(Boolean.class))     dos.writeBoolean(((Boolean)fieldValue).booleanValue());
 else     if (fieldType.equals(String.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
      byte[] bytes=(byte[])fieldValue;
      if (bytes == null || bytes.length == 0) {
        IOUtil.writeInt(dos,0);
      }
 else {
        IOUtil.writeInt(dos,bytes.length);
        dos.write((byte[])fieldValue);
      }
    }
 else     if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
      if (!(fieldValue instanceof Serializable))       fieldValue=fieldValue.toString();
      ObjectOutputStream oo=ObjectSecurity.createObjectOutputStream(dos);
      oo.writeObject(fieldValue);
      oo.close();
    }
  }
  dos.flush();
  rowsDataBytes=baos.toByteArray();
  IOUtil.writeInt(bos,rowsDataBytes.length);
  bos.write(rowsDataBytes);
  rowsDataBytes=null;
  dos=null;
  baos=null;
}",0.9850117096018736
71013,"public boolean performOk(){
  ViewerPlugin.getDefault().getPluginPreferences().setValue(PREVIEW_MAXROW,txtMaxDataSetRow.getIntValue());
  ViewerPlugin.getDefault().getPluginPreferences().setValue(PREVIEW_MAX_ROW_LEVEL_MEMBER,txtMaxRowLevelMember.getIntValue());
  ViewerPlugin.getDefault().getPluginPreferences().setValue(PREVIEW_MAX_COLUMN_LEVEL_MEMBER,txtMaxColumnLevelMember.getIntValue());
  ViewerPlugin.getDefault().getPluginPreferences().setValue(PREVIEW_MAX_IN_MEMORY_CUBE_SIZE,txtMaxInMemoryCubeSize.getIntValue());
  ViewerPlugin.getDefault().savePluginPreferences();
  return super.performOk();
}","public boolean performOk(){
  int maxRowValue=noLimitBtn.getSelection() ? DATASET_DISPLAY_ALL_ROW : txtMaxDataSetRow.getIntValue();
  ViewerPlugin.getDefault().getPluginPreferences().setValue(PREVIEW_MAXROW,maxRowValue);
  ViewerPlugin.getDefault().getPluginPreferences().setValue(PREVIEW_MAX_ROW_LEVEL_MEMBER,txtMaxRowLevelMember.getIntValue());
  ViewerPlugin.getDefault().getPluginPreferences().setValue(PREVIEW_MAX_COLUMN_LEVEL_MEMBER,txtMaxColumnLevelMember.getIntValue());
  ViewerPlugin.getDefault().getPluginPreferences().setValue(PREVIEW_MAX_IN_MEMORY_CUBE_SIZE,txtMaxInMemoryCubeSize.getIntValue());
  ViewerPlugin.getDefault().savePluginPreferences();
  return super.performOk();
}",0.8883756735950731
71014,"private void initControlValues(){
  String defaultMaxRow=ViewerPlugin.getDefault().getPluginPreferences().getString(PREVIEW_MAXROW);
  if (defaultMaxRow == null || defaultMaxRow.trim().length() <= 0) {
    defaultMaxRow=String.valueOf(MAX_DATASET_ROW_DEFAULT);
  }
  txtMaxDataSetRow.setStringValue(defaultMaxRow);
  defaultMaxRow=ViewerPlugin.getDefault().getPluginPreferences().getString(PREVIEW_MAX_ROW_LEVEL_MEMBER);
  if (defaultMaxRow == null || defaultMaxRow.trim().length() <= 0) {
    defaultMaxRow=String.valueOf(MAX_CUBE_ROW_LEVEL_MEMBER_DEFAULT);
  }
  txtMaxRowLevelMember.setStringValue(defaultMaxRow);
  defaultMaxRow=ViewerPlugin.getDefault().getPluginPreferences().getString(PREVIEW_MAX_COLUMN_LEVEL_MEMBER);
  if (defaultMaxRow == null || defaultMaxRow.trim().length() <= 0) {
    defaultMaxRow=String.valueOf(MAX_CUBE_COLUMN_LEVEL_MEMBER_DEFAULT);
  }
  txtMaxColumnLevelMember.setStringValue(defaultMaxRow);
  defaultMaxRow=ViewerPlugin.getDefault().getPluginPreferences().getString(PREVIEW_MAX_IN_MEMORY_CUBE_SIZE);
  if (defaultMaxRow == null || defaultMaxRow.trim().length() <= 0) {
    defaultMaxRow=String.valueOf(MAX_IN_MEMORY_CUBE_SIZE_DEFAULT);
  }
  txtMaxInMemoryCubeSize.setStringValue(defaultMaxRow);
}","private void initControlValues(){
  String defaultMaxRow=ViewerPlugin.getDefault().getPluginPreferences().getString(PREVIEW_MAXROW);
  if (defaultMaxRow == null || defaultMaxRow.trim().length() <= 0) {
    defaultMaxRow=String.valueOf(MAX_DATASET_ROW_DEFAULT);
  }
  boolean previewAllRows=String.valueOf(DATASET_DISPLAY_ALL_ROW).equals(defaultMaxRow.trim());
  noLimitBtn.setSelection(previewAllRows);
  txtMaxDataSetRow.setEnabled(!previewAllRows,noLimitBtn.getParent());
  txtMaxDataSetRow.setStringValue(previewAllRows ? ""String_Node_Str"" : defaultMaxRow);
  defaultMaxRow=ViewerPlugin.getDefault().getPluginPreferences().getString(PREVIEW_MAX_ROW_LEVEL_MEMBER);
  if (defaultMaxRow == null || defaultMaxRow.trim().length() <= 0) {
    defaultMaxRow=String.valueOf(MAX_CUBE_ROW_LEVEL_MEMBER_DEFAULT);
  }
  txtMaxRowLevelMember.setStringValue(defaultMaxRow);
  defaultMaxRow=ViewerPlugin.getDefault().getPluginPreferences().getString(PREVIEW_MAX_COLUMN_LEVEL_MEMBER);
  if (defaultMaxRow == null || defaultMaxRow.trim().length() <= 0) {
    defaultMaxRow=String.valueOf(MAX_CUBE_COLUMN_LEVEL_MEMBER_DEFAULT);
  }
  txtMaxColumnLevelMember.setStringValue(defaultMaxRow);
  defaultMaxRow=ViewerPlugin.getDefault().getPluginPreferences().getString(PREVIEW_MAX_IN_MEMORY_CUBE_SIZE);
  if (defaultMaxRow == null || defaultMaxRow.trim().length() <= 0) {
    defaultMaxRow=String.valueOf(MAX_IN_MEMORY_CUBE_SIZE_DEFAULT);
  }
  txtMaxInMemoryCubeSize.setStringValue(defaultMaxRow);
}",0.8865143699336773
71015,"protected Control createContents(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.PREFERENCE_BIRT_PREVIEW_DATA_ID);
  Composite cmpTop=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  cmpTop.setLayout(layout);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  cmpTop.setLayoutData(gd);
  txtMaxDataSetRow=new IntegerFieldEditor(PREVIEW_MAXROW,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxDataSetRow.setPage(this);
  txtMaxDataSetRow.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxDataSetRow.setEmptyStringAllowed(false);
  txtMaxDataSetRow.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxDataSetRow.isValid());
    }
  }
);
  txtMaxRowLevelMember=new IntegerFieldEditor(PREVIEW_MAX_ROW_LEVEL_MEMBER,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxRowLevelMember.setPage(this);
  txtMaxRowLevelMember.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxRowLevelMember.setEmptyStringAllowed(false);
  txtMaxRowLevelMember.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxRowLevelMember.isValid());
    }
  }
);
  txtMaxColumnLevelMember=new IntegerFieldEditor(PREVIEW_MAX_COLUMN_LEVEL_MEMBER,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxColumnLevelMember.setPage(this);
  txtMaxColumnLevelMember.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxColumnLevelMember.setEmptyStringAllowed(false);
  txtMaxColumnLevelMember.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxColumnLevelMember.isValid());
    }
  }
);
  txtMaxInMemoryCubeSize=new IntegerFieldEditor(PREVIEW_MAX_IN_MEMORY_CUBE_SIZE,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxInMemoryCubeSize.setPage(this);
  txtMaxInMemoryCubeSize.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxInMemoryCubeSize.setEmptyStringAllowed(false);
  txtMaxInMemoryCubeSize.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxInMemoryCubeSize.isValid());
    }
  }
);
  initControlValues();
  return cmpTop;
}","protected Control createContents(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.PREFERENCE_BIRT_PREVIEW_DATA_ID);
  Composite cmpTop=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  cmpTop.setLayout(layout);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  cmpTop.setLayoutData(gd);
  noLimitBtn=new Button(cmpTop,SWT.CHECK);
  GridData noLimitBtnData=new GridData(GridData.FILL_HORIZONTAL);
  noLimitBtnData.horizontalSpan=2;
  noLimitBtn.setText(""String_Node_Str"");
  noLimitBtn.setLayoutData(noLimitBtnData);
  noLimitBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      txtMaxDataSetRow.setEnabled(!noLimitBtn.getSelection(),noLimitBtn.getParent());
      if (!noLimitBtn.getSelection()) {
        txtMaxDataSetRow.setFocus();
      }
      txtMaxDataSetRow.checkState();
    }
  }
);
  txtMaxDataSetRow=new DisplayNumberFieldEditor(PREVIEW_MAXROW,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxDataSetRow.setPage(this);
  txtMaxDataSetRow.setValidRange(1,Integer.MAX_VALUE);
  txtMaxDataSetRow.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxDataSetRow.setEmptyStringAllowed(false);
  txtMaxDataSetRow.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxDataSetRow.isValid());
    }
  }
);
  txtMaxRowLevelMember=new IntegerFieldEditor(PREVIEW_MAX_ROW_LEVEL_MEMBER,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxRowLevelMember.setPage(this);
  txtMaxRowLevelMember.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxRowLevelMember.setEmptyStringAllowed(false);
  txtMaxRowLevelMember.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxRowLevelMember.isValid());
    }
  }
);
  txtMaxColumnLevelMember=new IntegerFieldEditor(PREVIEW_MAX_COLUMN_LEVEL_MEMBER,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxColumnLevelMember.setPage(this);
  txtMaxColumnLevelMember.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxColumnLevelMember.setEmptyStringAllowed(false);
  txtMaxColumnLevelMember.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxColumnLevelMember.isValid());
    }
  }
);
  txtMaxInMemoryCubeSize=new IntegerFieldEditor(PREVIEW_MAX_IN_MEMORY_CUBE_SIZE,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxInMemoryCubeSize.setPage(this);
  txtMaxInMemoryCubeSize.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxInMemoryCubeSize.setEmptyStringAllowed(false);
  txtMaxInMemoryCubeSize.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxInMemoryCubeSize.isValid());
    }
  }
);
  initControlValues();
  return cmpTop;
}",0.8880940214614206
71016,"private void synchronize(){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
  }
  rowContainer.setRowIndex(maxRowIndex);
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    if (rowspan > 0) {
      SheetData data=null;
      SheetData upstair=cache.getColumnLastData(currentColumnIndex);
      if (upstair != null && canSpan(upstair,rowContainer)) {
        SheetData predata=upstair;
        int rs=predata.getRowSpan() + rowspan;
        predata.setRowSpan(rs);
        BlankData blankData=new BlankData(getRealData(predata));
        if (!isInContainer(predata,rowContainer)) {
          blankData.decreasRowSpanInDesign();
        }
        data=blankData;
        for (int p=0; p < rowspan; p++) {
          cache.addData(currentColumnIndex,data);
        }
      }
    }
  }
}","private void synchronize(){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
  }
  rowContainer.setRowIndex(maxRowIndex);
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    if (rowspan > 0) {
      SheetData upstair=cache.getColumnLastData(currentColumnIndex);
      if (upstair != null && canSpan(upstair,rowContainer)) {
        SheetData predata=upstair;
        int rs=predata.getRowSpan() + rowspan;
        predata.setRowSpan(rs);
        SheetData realData=getRealData(predata);
        BlankData blankData=new BlankData(realData);
        if (!isInContainer(predata,rowContainer)) {
          blankData.decreasRowSpanInDesign();
        }
        int rowIndex=predata.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(predata);
          blank.setRowIndex(rowIndex + p);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
  }
}",0.7069324605772092
71017,"public HashMap<String,String> getExpressions(){
  if (text == null) {
    return null;
  }
  if (exprs != null) {
    return exprs;
  }
  if (HTML_TEXT.equals(textType) || (AUTO_TEXT.equals(textType) && startsWithIgnoreCase(text,""String_Node_Str""))) {
    exprs=new HashMap<String,String>();
    TextTemplate template=new TemplateParser().parse(text);
    if (template != null && template.getNodes() != null) {
      Iterator itor=template.getNodes().iterator();
      Object obj;
      while (itor.hasNext()) {
        obj=itor.next();
        if (obj instanceof TextTemplate.ValueNode) {
          ValueNode valueNode=(TextTemplate.ValueNode)obj;
          addExpression(valueNode.getValue());
          addExpression(valueNode.getFormatExpression());
        }
 else         if (obj instanceof TextTemplate.ImageNode) {
          addExpression(((TextTemplate.ImageNode)obj).getExpr());
        }
      }
    }
  }
  return exprs;
}","public HashMap<String,String> getExpressions(){
  if (text == null) {
    return null;
  }
  if (exprs != null) {
    return exprs;
  }
  if (HTML_TEXT.equals(textType) || (AUTO_TEXT.equals(textType) && startsWithIgnoreCase(text,""String_Node_Str""))) {
    exprs=new HashMap<String,String>();
    TextTemplate template=null;
    try {
      template=new TemplateParser().parse(text);
    }
 catch (    Throwable ignored) {
    }
    if (template != null && template.getNodes() != null) {
      Iterator itor=template.getNodes().iterator();
      Object obj;
      while (itor.hasNext()) {
        obj=itor.next();
        if (obj instanceof TextTemplate.ValueNode) {
          ValueNode valueNode=(TextTemplate.ValueNode)obj;
          addExpression(valueNode.getValue());
          addExpression(valueNode.getFormatExpression());
        }
 else         if (obj instanceof TextTemplate.ImageNode) {
          addExpression(((TextTemplate.ImageNode)obj).getExpr());
        }
      }
    }
  }
  return exprs;
}",0.9609053497942388
71018,"protected TextTemplate parseTemplate(String text) throws BirtException {
  SoftReference templateRef=(SoftReference)templates.get(text);
  TextTemplate template=null;
  if (templateRef != null) {
    template=(TextTemplate)templateRef.get();
    if (template != null) {
      return template;
    }
  }
  try {
    template=new org.eclipse.birt.core.template.TemplateParser().parse(text);
    templateRef=new SoftReference(template);
    templates.put(text,templateRef);
  }
 catch (  Exception ex) {
    throw new EngineException(ex.getLocalizedMessage(),ex);
  }
  return template;
}","protected TextTemplate parseTemplate(String text) throws BirtException {
  SoftReference templateRef=(SoftReference)templates.get(text);
  TextTemplate template=null;
  if (templateRef != null) {
    template=(TextTemplate)templateRef.get();
    if (template != null) {
      return template;
    }
  }
  try {
    template=new org.eclipse.birt.core.template.TemplateParser().parse(text);
    templateRef=new SoftReference(template);
    templates.put(text,templateRef);
  }
 catch (  Throwable ex) {
    throw new EngineException(ex.getLocalizedMessage(),ex);
  }
  return template;
}",0.9846153846153848
71019,"/** 
 * @param dataSet
 * @param inputParamBindings
 * @param columnBindings
 * @param boundColumnName
 * @param requestInfo
 * @return
 * @throws BirtException
 */
private IColumnValueIterator getColumnValueIterator(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings != null && columnBindings.hasNext()) {
    temp.add(columnBindings.next());
  }
  if (referToAggregation(temp,boundColumnName))   return new ColumnValueIterator(null,null,null);
  IQueryResults queryResults=getQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  return new ColumnValueIterator(queryResults,boundColumnName,requestInfo);
}","/** 
 * @param dataSet
 * @param inputParamBindings
 * @param columnBindings
 * @param boundColumnName
 * @param requestInfo
 * @return
 * @throws BirtException
 */
private IColumnValueIterator getColumnValueIterator(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings != null && columnBindings.hasNext()) {
    temp.add(columnBindings.next());
  }
  IQueryResults queryResults=getQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  return new ColumnValueIterator(queryResults,boundColumnName,requestInfo);
}",0.9331514324693042
71020,"/** 
 * create a new context. Call close to finish using the execution context
 */
public ExecutionContext(EngineTask engineTask){
  if (engineTask != null) {
    task=engineTask;
    engine=(ReportEngine)task.getEngine();
    log=task.getLogger();
  }
 else {
    log=Logger.getLogger(ExecutionContext.class.getName());
  }
  locale=Locale.getDefault();
  timeZone=TimeZone.getDefault();
}","/** 
 * create a new context. Call close to finish using the execution context
 */
public ExecutionContext(EngineTask engineTask){
  if (engineTask != null) {
    task=engineTask;
    engine=(ReportEngine)task.getEngine();
    log=task.getLogger();
  }
 else {
    log=Logger.getLogger(ExecutionContext.class.getName());
  }
  locale=Locale.getDefault();
  timeZone=TimeZone.getDefault();
  eventHandlerManager=new EventHandlerManager();
}",0.9408926417370326
71021,"protected static Object getInstance(String className,ExecutionContext context) throws EngineException {
  if (className == null)   return null;
  Object o=null;
  Class c=null;
  try {
    ClassLoader classLoader=context.getApplicationClassLoader();
    c=classLoader.loadClass(className);
    o=c.newInstance();
  }
 catch (  ClassNotFoundException e) {
    throw new EngineException(MessageConstants.SCRIPT_CLASS_NOT_FOUND_ERROR,new Object[]{className},e);
  }
catch (  IllegalAccessException e) {
    throw new EngineException(MessageConstants.SCRIPT_CLASS_ILLEGAL_ACCESS_ERROR,new Object[]{className},e);
  }
catch (  InstantiationException e) {
    throw new EngineException(MessageConstants.SCRIPT_CLASS_INSTANTIATION_ERROR,new Object[]{className},e);
  }
  return o;
}","protected static Object getInstance(ReportItemDesign design,ExecutionContext context) throws EngineException {
  EventHandlerManager eventHandlerManager=context.getEventHandlerManager();
  return eventHandlerManager.getInstance(design,context);
}",0.2331047992164544
71022,"/** 
 * Sets the <code>'class'</code> property and stores the style to styleMap object.
 * @param styleName the style name
 */
protected void setStyleName(String styleName,IContent content){
  StringBuffer classBuffer=new StringBuffer();
  if (enableMetadata) {
    String metadataStyleClass=metadataEmitter.getMetadataStyleClass(content);
    if (null != metadataStyleClass) {
      classBuffer.append(metadataStyleClass);
    }
  }
  if (styleName != null) {
    if (outputtedStyles.contains(styleName)) {
      if (classBuffer.length() != 0) {
        classBuffer.append(""String_Node_Str"");
      }
      if (null != htmlIDNamespace) {
        classBuffer.append(htmlIDNamespace + styleName);
      }
 else {
        classBuffer.append(styleName);
      }
    }
  }
  if (hasCsslinks) {
    Object genBy=content.getGenerateBy();
    if (genBy instanceof StyledElementDesign) {
      DesignElementHandle handle=((StyledElementDesign)genBy).getHandle();
      if (handle != null) {
        String name=handle.getStringProperty(ReportItemHandle.STYLE_PROP);
        if (name != null) {
          if (classBuffer.length() != 0) {
            classBuffer.append(""String_Node_Str"" + name);
          }
 else {
            classBuffer.append(name);
          }
        }
      }
    }
  }
  if (classBuffer.length() != 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,classBuffer.toString());
  }
}","/** 
 * Sets the <code>'class'</code> property and stores the style to styleMap object.
 * @param styleClass the style name
 */
protected void setStyleName(String styleClass,IContent content){
  StringBuffer classBuffer=new StringBuffer();
  if (enableMetadata) {
    String metadataStyleClass=metadataEmitter.getMetadataStyleClass(content);
    if (null != metadataStyleClass) {
      classBuffer.append(metadataStyleClass);
    }
  }
  if (styleClass != null) {
    if (classBuffer.length() != 0) {
      classBuffer.append(""String_Node_Str"");
    }
    if (null != htmlIDNamespace) {
      classBuffer.append(getStyleClassWithNameSpace(styleClass));
    }
 else {
      classBuffer.append(styleClass);
    }
  }
  if (hasCsslinks) {
    Object genBy=content.getGenerateBy();
    if (genBy instanceof StyledElementDesign) {
      DesignElementHandle handle=((StyledElementDesign)genBy).getHandle();
      if (handle != null) {
        String name=handle.getStringProperty(ReportItemHandle.STYLE_PROP);
        if (name != null) {
          if (classBuffer.length() != 0) {
            classBuffer.append(""String_Node_Str"" + name);
          }
 else {
            classBuffer.append(name);
          }
        }
      }
    }
  }
  if (classBuffer.length() != 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,classBuffer.toString());
  }
}",0.9098240469208212
71023,"/** 
 * Output instance id and bookmark for a content.
 * @param content
 * @param tag
 * @param styleName
 */
private void startContent(IContent content,String tag){
  String bookmark=content.getBookmark();
  if (bookmark == null) {
    bookmark=idGenerator.generateUniqueID();
  }
  setActiveIDTypeIID(content,bookmark);
  HTMLEmitterUtil.setBookmark(writer,tag,htmlIDNamespace,bookmark);
}","/** 
 * Output instance id and bookmark for a content.
 * @param content
 * @param tag
 */
private void startContent(IContent content,String tag){
  String bookmark=content.getBookmark();
  if (bookmark == null) {
    bookmark=idGenerator.generateUniqueID();
  }
  setActiveIDTypeIID(content,bookmark);
  HTMLEmitterUtil.setBookmark(writer,tag,htmlIDNamespace,bookmark);
}",0.9738219895287958
71024,"/** 
 * Test get/setStyle methods set the style then get it to test if they work correctly
 */
public void testBaseStyle(){
  ((StyledElementDesign)element).setStyleName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",((StyledElementDesign)element).getStyleName());
}","/** 
 * Test get/setStyle methods set the style then get it to test if they work correctly
 */
public void testBaseStyle(){
  ((StyledElementDesign)element).setStyleClass(""String_Node_Str"");
  assertEquals(""String_Node_Str"",((StyledElementDesign)element).getStyleClass());
}",0.967032967032967
71025,"/** 
 * test if the shared style is same. Two element use the same shared style, so those two elements should have same style properties.
 */
public void testSharedStyle(){
  GridItemDesign grid=(GridItemDesign)report.getContent(0);
  IStyle style=report.findStyle(grid.getStyleName());
  assertEquals(style.getColor(),""String_Node_Str"");
  assertEquals(style.getBorderBottomStyle(),""String_Node_Str"");
  RowDesign row=grid.getRow(0);
  style=report.findStyle(row.getStyleName());
  assertEquals(style.getColor(),""String_Node_Str"");
  assertEquals(style.getBorderBottomStyle(),""String_Node_Str"");
  CellDesign cell=row.getCell(0);
  style=report.findStyle(cell.getStyleName());
  assertEquals(style.getColor(),""String_Node_Str"");
  assertEquals(style.getFontSize(),""String_Node_Str"");
  assertEquals(style.getBorderBottomStyle(),""String_Node_Str"");
  LabelItemDesign label=(LabelItemDesign)cell.getContent(0);
  assertTrue(label.getStyleName() == null);
}","/** 
 * test if the shared style is same. Two element use the same shared style, so those two elements should have same style properties.
 */
public void testSharedStyle(){
  GridItemDesign grid=(GridItemDesign)report.getContent(0);
  IStyle style=grid.getStyle();
  assertEquals(style.getColor(),""String_Node_Str"");
  assertEquals(style.getBorderBottomStyle(),""String_Node_Str"");
  RowDesign row=grid.getRow(0);
  style=row.getStyle();
  assertEquals(style.getColor(),""String_Node_Str"");
  assertEquals(style.getBorderBottomStyle(),""String_Node_Str"");
  CellDesign cell=row.getCell(0);
  style=cell.getStyle();
  assertEquals(style.getColor(),""String_Node_Str"");
  assertEquals(style.getFontSize(),""String_Node_Str"");
  assertEquals(style.getBorderBottomStyle(),""String_Node_Str"");
  LabelItemDesign label=(LabelItemDesign)cell.getContent(0);
  assertTrue(label.getStyleClass() == null);
}",0.9420054200542004
71026,"public String getStyleClass(){
  if (styleClass != null) {
    return styleClass;
  }
  if (generateBy instanceof StyledElementDesign) {
    return ((StyledElementDesign)generateBy).getStyleName();
  }
  return null;
}","public String getStyleClass(){
  if (styleClass != null) {
    return styleClass;
  }
  if (generateBy instanceof StyledElementDesign) {
    return ((StyledElementDesign)generateBy).getStyleClass();
  }
  return null;
}",0.9794050343249427
71027,"public IStyle getStyle(){
  if (style == null) {
    if (inlineStyle == null) {
      inlineStyle=report.createStyle();
    }
    String styleClass=getStyleClass();
    if (styleClass != null) {
      IStyle classStyle=report.findStyle(styleClass);
      style=new CompositeStyle(classStyle,inlineStyle);
    }
 else {
      style=inlineStyle;
    }
  }
  return new ContentStyle((AbstractStyle)style);
}","public IStyle getStyle(){
  if (style == null) {
    if (inlineStyle == null) {
      inlineStyle=report.createStyle();
    }
    IStyle classStyle=getClassStyle();
    if (classStyle != null) {
      style=new CompositeStyle(classStyle,inlineStyle);
    }
 else {
      style=inlineStyle;
    }
  }
  return new ContentStyle((AbstractStyle)style);
}",0.8355437665782494
71028,"public IStyle getStyle(){
  if (style == null) {
    if (inlineStyle == null) {
      inlineStyle=report.createStyle();
    }
    String styleClass=getStyleClass();
    IStyle classStyle=report.findStyle(styleClass);
    style=new CompositeStyle(classStyle,inlineStyle);
  }
  return style;
}","public IStyle getStyle(){
  if (style == null) {
    if (inlineStyle == null) {
      inlineStyle=report.createStyle();
    }
    IStyle classStyle=getClassStyle();
    style=new CompositeStyle(classStyle,inlineStyle);
  }
  return style;
}",0.8045112781954887
71029,"public String getStyleClass(){
  if (styleClass != null) {
    return styleClass;
  }
  if (generateBy instanceof ColumnDesign) {
    return ((ColumnDesign)generateBy).getStyleName();
  }
  return null;
}","public String getStyleClass(){
  if (styleClass != null) {
    return styleClass;
  }
  if (generateBy instanceof ColumnDesign) {
    return ((ColumnDesign)generateBy).getStyleClass();
  }
  return null;
}",0.9779951100244498
71030,"protected void setupPageBreak(PolicyNode node){
  ReportItemDesign item=node.design;
  String styleClass=item.getStyleName();
  if (styleClass != null) {
    IStyle style=report.findStyle(styleClass);
    CSSValue masterPage=style.getProperty(IStyle.STYLE_MASTER_PAGE);
    CSSValue pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    CSSValue pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    if (masterPage != null || (pageBreakBefore != null) && !pageBreakBefore.equals(IStyle.AUTO_VALUE)) {
      node.breakBefore=true;
      node.execute=true;
    }
    if (pageBreakAfter != null && !pageBreakAfter.equals(IStyle.AUTO_VALUE)) {
      node.breakAfter=true;
      node.execute=true;
    }
  }
  if (item.getJavaClass() != null || item.getOnCreate() != null || item.getOnPageBreak() != null) {
    node.breakBefore=true;
    node.breakAfter=true;
    node.execute=true;
  }
  if (node.breakBefore || node.breakAfter) {
    Iterator iter=rows.iterator();
    while (iter.hasNext()) {
      PolicyNode row=(PolicyNode)iter.next();
      row.executeAll=true;
    }
    return;
  }
  if (item.getHighlight() != null || item.getMap() != null) {
    node.execute=true;
  }
  if (item.getTOC() != null || item.getBookmark() != null || item.getAction() != null) {
    node.execute=true;
  }
  if (item.getQueries() != null) {
    node.execute=true;
  }
  if (item.getVisibility() != null) {
    node.execute=true;
  }
}","protected void setupPageBreak(PolicyNode node){
  ReportItemDesign item=node.design;
  IStyle style=item.getStyle();
  if (style != null) {
    CSSValue masterPage=style.getProperty(IStyle.STYLE_MASTER_PAGE);
    CSSValue pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    CSSValue pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    if (masterPage != null || (pageBreakBefore != null) && !pageBreakBefore.equals(IStyle.AUTO_VALUE)) {
      node.breakBefore=true;
      node.execute=true;
    }
    if (pageBreakAfter != null && !pageBreakAfter.equals(IStyle.AUTO_VALUE)) {
      node.breakAfter=true;
      node.execute=true;
    }
  }
  if (item.getJavaClass() != null || item.getOnCreate() != null || item.getOnPageBreak() != null) {
    node.breakBefore=true;
    node.breakAfter=true;
    node.execute=true;
  }
  if (node.breakBefore || node.breakAfter) {
    Iterator iter=rows.iterator();
    while (iter.hasNext()) {
      PolicyNode row=(PolicyNode)iter.next();
      row.executeAll=true;
    }
    return;
  }
  if (item.getHighlight() != null || item.getMap() != null) {
    node.execute=true;
  }
  if (item.getTOC() != null || item.getBookmark() != null || item.getAction() != null) {
    node.execute=true;
  }
  if (item.getQueries() != null) {
    node.execute=true;
  }
  if (item.getVisibility() != null) {
    node.execute=true;
  }
}",0.9497010200492436
71031,"protected void readStyledElementField(DataInputStream in,StyledElementDesign design,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_STYLE_NAME:
    String styleName=IOUtil.readString(in);
  design.setStyleName(styleName);
break;
case FIELD_MAP:
MapDesign map=readMap(in);
design.setMap(map);
break;
case FIELD_HIGHLIGHT:
HighlightDesign highlight=readHighlight(in);
design.setHighlight(highlight);
break;
default :
readReportElementField(in,design,fieldType);
}
}","protected void readStyledElementField(DataInputStream in,StyledElementDesign design,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_STYLE_CLASS:
    String styleClass=IOUtil.readString(in);
  design.setStyleClass(styleClass);
break;
case FIELD_MAP:
MapDesign map=readMap(in);
design.setMap(map);
break;
case FIELD_HIGHLIGHT:
HighlightDesign highlight=readHighlight(in);
design.setHighlight(highlight);
break;
default :
readReportElementField(in,design,fieldType);
}
}",0.9527720739219712
71032,"protected void writeStyledElement(DataOutputStream out,StyledElementDesign design) throws IOException {
  writeReportElement(out,design);
  String styleName=design.getStyleName();
  if (styleName != null) {
    IOUtil.writeShort(out,FIELD_STYLE_NAME);
    IOUtil.writeString(out,styleName);
  }
  MapDesign map=design.getMap();
  if (map != null) {
    IOUtil.writeShort(out,FIELD_MAP);
    writeMap(out,map);
  }
  HighlightDesign highlight=design.getHighlight();
  ;
  if (highlight != null) {
    IOUtil.writeShort(out,FIELD_HIGHLIGHT);
    writeHighlight(out,highlight);
  }
}","protected void writeStyledElement(DataOutputStream out,StyledElementDesign design) throws IOException {
  writeReportElement(out,design);
  String styleClass=design.getStyleClass();
  if (styleClass != null) {
    IOUtil.writeShort(out,FIELD_STYLE_CLASS);
    IOUtil.writeString(out,styleClass);
  }
  MapDesign map=design.getMap();
  if (map != null) {
    IOUtil.writeShort(out,FIELD_MAP);
    writeMap(out,map);
  }
  HighlightDesign highlight=design.getHighlight();
  ;
  if (highlight != null) {
    IOUtil.writeShort(out,FIELD_HIGHLIGHT);
    writeHighlight(out,highlight);
  }
}",0.9630901287553648
71033,"/** 
 * Gets the width
 * @return the width
 */
public int getWidth(){
  DimensionHandle handle=getColumnHandle().getWidth();
  if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(handle.getUnits())) {
    Object obj=getTableParent();
    if (obj instanceof GridHandle) {
      obj=HandleAdapterFactory.getInstance().getGridHandleAdapter(obj);
    }
 else {
      obj=HandleAdapterFactory.getInstance().getTableHandleAdapter(obj);
    }
    if (obj instanceof TableHandleAdapter) {
      int containerWidth=((TableHandleAdapter)obj).getClientAreaSize().width;
      return (int)(handle.getMeasure() * containerWidth / 100);
    }
  }
  int px=(int)DEUtil.convertoToPixel(handle);
  if (px <= 0) {
    TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
    return adapter.getDefaultWidth(getColumnNumber());
  }
  return px;
}","/** 
 * Gets the width
 * @return the width
 */
public int getWidth(){
  DimensionHandle handle=getColumnHandle().getWidth();
  if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(handle.getUnits())) {
    Object obj=getTableParent();
    if (obj instanceof GridHandle) {
      obj=HandleAdapterFactory.getInstance().getGridHandleAdapter(obj);
    }
 else {
      obj=HandleAdapterFactory.getInstance().getTableHandleAdapter(obj);
    }
    if (obj instanceof TableHandleAdapter) {
      int containerWidth=((TableHandleAdapter)obj).getClientAreaSize().width;
      return (int)(handle.getMeasure() * containerWidth / 100);
    }
  }
  int px=(int)DEUtil.convertoToPixel(handle);
  if (px <= 0) {
    if (handle.isSet()) {
      return 1;
    }
    TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
    return adapter.getDefaultWidth(getColumnNumber());
  }
  return px;
}",0.9733036707452726
71034,"/** 
 * Returns the raw column with, if it's a fix value, covert it to Pixel unit, if it's a relative value or none, retain it.
 * @return The raw width
 */
public String getRawWidth(){
  DimensionHandle handle=getColumnHandle().getWidth();
  String unit=handle.getUnits();
  if (unit == null || unit.length() == 0) {
    return ""String_Node_Str"";
  }
 else   if (unit.equals(DesignChoiceConstants.UNITS_PERCENTAGE)) {
    return String.valueOf(handle.getMeasure()) + unit;
  }
 else {
    int px=(int)DEUtil.convertoToPixel(handle);
    if (px <= 0) {
      TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
      return String.valueOf(adapter.getDefaultWidth(getColumnNumber()));
    }
    return String.valueOf(px);
  }
}","/** 
 * Returns the raw column with, if it's a fix value, covert it to Pixel unit, if it's a relative value or none, retain it.
 * @return The raw width
 */
public String getRawWidth(){
  DimensionHandle handle=getColumnHandle().getWidth();
  String unit=handle.getUnits();
  if (unit == null || unit.length() == 0) {
    return ""String_Node_Str"";
  }
 else   if (unit.equals(DesignChoiceConstants.UNITS_PERCENTAGE)) {
    return String.valueOf(handle.getMeasure()) + unit;
  }
 else {
    int px=(int)DEUtil.convertoToPixel(handle);
    if (handle.isSet()) {
      px=1;
    }
    if (px <= 0) {
      TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
      return String.valueOf(adapter.getDefaultWidth(getColumnNumber()));
    }
    return String.valueOf(px);
  }
}",0.9724655819774718
71035,"public Object visitValue(TextTemplate.ValueNode node,Object value){
  String text=""String_Node_Str"";
  Object result=null;
  if (values != null) {
    result=values.get(node.getValue());
  }
  String format=node.getFormat();
  String formatExpression=node.getFormatExpression();
  if (format == null && formatExpression != null) {
    format=values.get(formatExpression).toString();
  }
  if (""String_Node_Str"".equalsIgnoreCase(format)) {
    if (result != null) {
      text=result.toString();
    }
  }
 else {
    if (result != null) {
      if (result instanceof Number) {
        NumberFormatter fmt=context.getNumberFormatter(format);
        text=fmt.format((Number)result);
      }
 else       if (result instanceof String) {
        StringFormatter fmt=context.getStringFormatter(format);
        text=fmt.format((String)result);
      }
 else       if (result instanceof Date) {
        DateFormatter fmt=context.getDateFormatter(format);
        text=fmt.format((Date)result);
      }
 else {
        text=result.toString();
      }
    }
    text=encodeHtmlText(text);
  }
  buffer.append(text);
  return value;
}","public Object visitValue(TextTemplate.ValueNode node,Object value){
  String text=""String_Node_Str"";
  Object result=null;
  if (values != null) {
    result=values.get(node.getValue());
  }
  String format=node.getFormat();
  String formatExpression=node.getFormatExpression();
  if (format == null && formatExpression != null) {
    Object formatValue=values.get(formatExpression);
    if (formatValue != null) {
      format=formatValue.toString();
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(format)) {
    if (result != null) {
      text=result.toString();
    }
  }
 else {
    if (result != null) {
      if (result instanceof Number) {
        NumberFormatter fmt=context.getNumberFormatter(format);
        text=fmt.format((Number)result);
      }
 else       if (result instanceof String) {
        StringFormatter fmt=context.getStringFormatter(format);
        text=fmt.format((String)result);
      }
 else       if (result instanceof Date) {
        DateFormatter fmt=context.getDateFormatter(format);
        text=fmt.format((Date)result);
      }
 else {
        text=result.toString();
      }
    }
    text=encodeHtmlText(text);
  }
  buffer.append(text);
  return value;
}",0.952258064516129
71036,"public Object get(String name,Scriptable start){
  Object result=getScriptableParameter(name);
  if (result == null) {
    String errorMessage=""String_Node_Str"" + name + ""String_Node_Str"";
    throw new JavaScriptException(errorMessage,""String_Node_Str"",-1);
  }
  return result;
}","public Object get(int index,Scriptable start){
  return get(String.valueOf(index),start);
}",0.3172043010752688
71037,"/** 
 * @see EventDispatcher#dispatchKeyTraversed(TraverseEvent)
 */
public void dispatchKeyTraversed(TraverseEvent e){
  IFigure focusOwner=null;
  List list=getViewer().getSelectedEditParts();
  int size=list.size();
  IFigure nextFigure=null;
  if (e.detail == SWT.TRAVERSE_TAB_NEXT) {
    AbstractGraphicalEditPart part=size == 0 ? null : (AbstractGraphicalEditPart)list.get(list.size() - 1);
    IFigure figure=part == null ? null : part.getFigure();
    focusOwner=getFocusOwner(figure);
    if ((e.stateMask & SWT.CTRL) > 0) {
      nextFigure=focusManager.getNextFocusableFigure(getRoot(),focusOwner);
    }
 else {
      nextFigure=focusManager.getNextFocusableFigureInSameOrder(getRoot(),focusOwner);
    }
  }
 else   if (e.detail == SWT.TRAVERSE_TAB_PREVIOUS) {
    AbstractGraphicalEditPart part=size == 0 ? null : (AbstractGraphicalEditPart)list.get(0);
    IFigure figure=part == null ? null : part.getFigure();
    focusOwner=getFocusOwner(figure);
    if ((e.stateMask & SWT.CTRL) > 0) {
      nextFigure=focusManager.getPreviousFocusableFigure(getRoot(),focusOwner);
    }
 else {
      nextFigure=focusManager.getPreviousFocusableFigureInSameOrder(getRoot(),focusOwner);
    }
  }
  if (nextFigure != null) {
    e.doit=false;
    setFocus(nextFigure);
    Object obj=getViewer().getVisualPartMap().get(nextFigure);
    if (obj != null) {
      getViewer().setSelection(new StructuredSelection(obj));
    }
    if (obj instanceof EditPart) {
      getViewer().reveal((EditPart)obj);
    }
  }
}","/** 
 * @see EventDispatcher#dispatchKeyTraversed(TraverseEvent)
 */
public void dispatchKeyTraversed(TraverseEvent e){
  IFigure focusOwner=null;
  List list=((IStructuredSelection)getViewer().getSelection()).toList();
  int size=list.size();
  IFigure nextFigure=null;
  if (e.detail == SWT.TRAVERSE_TAB_NEXT) {
    AbstractGraphicalEditPart part=size == 0 ? null : (AbstractGraphicalEditPart)list.get(list.size() - 1);
    IFigure figure=part == null ? null : part.getFigure();
    focusOwner=getFocusOwner(figure);
    if ((e.stateMask & SWT.CTRL) > 0) {
      nextFigure=focusManager.getNextFocusableFigure(getRoot(),focusOwner);
    }
 else {
      nextFigure=focusManager.getNextFocusableFigureInSameOrder(getRoot(),focusOwner);
    }
  }
 else   if (e.detail == SWT.TRAVERSE_TAB_PREVIOUS) {
    AbstractGraphicalEditPart part=size == 0 ? null : (AbstractGraphicalEditPart)list.get(0);
    IFigure figure=part == null ? null : part.getFigure();
    focusOwner=getFocusOwner(figure);
    if ((e.stateMask & SWT.CTRL) > 0) {
      nextFigure=focusManager.getPreviousFocusableFigure(getRoot(),focusOwner);
    }
 else {
      nextFigure=focusManager.getPreviousFocusableFigureInSameOrder(getRoot(),focusOwner);
    }
  }
  if (nextFigure != null) {
    e.doit=false;
    setFocus(nextFigure);
    Object obj=getViewer().getVisualPartMap().get(nextFigure);
    if (obj != null) {
      getViewer().setSelection(new StructuredSelection(obj));
    }
    if (obj instanceof EditPart) {
      getViewer().reveal((EditPart)obj);
    }
  }
}",0.9845952146837104
71038,"public void activate(){
  super.activate();
  getFigure().setFocusTraversable(false);
  getViewer().addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (DeferredGraphicalViewer.PROPERTY_MARGIN_VISIBILITY.equals(evt.getPropertyName())) {
        showMargin=((Boolean)evt.getNewValue()).booleanValue();
        refresh();
        markDirty(true);
      }
    }
  }
);
  if (getModel() instanceof ReportDesignHandle) {
    getViewer().setProperty(IReportGraphicConstants.REPORT_LAYOUT_PROPERTY,((ReportDesignHandle)getModel()).getLayoutPreference());
    getViewer().setProperty(IReportGraphicConstants.REPORT_BIDIORIENTATION_PROPERTY,((ReportDesignHandle)getModel()).getBidiOrientation());
  }
}","public void activate(){
  super.activate();
  getViewer().addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (DeferredGraphicalViewer.PROPERTY_MARGIN_VISIBILITY.equals(evt.getPropertyName())) {
        showMargin=((Boolean)evt.getNewValue()).booleanValue();
        refresh();
        markDirty(true);
      }
    }
  }
);
  if (getModel() instanceof ReportDesignHandle) {
    getViewer().setProperty(IReportGraphicConstants.REPORT_LAYOUT_PROPERTY,((ReportDesignHandle)getModel()).getLayoutPreference());
    getViewer().setProperty(IReportGraphicConstants.REPORT_BIDIORIENTATION_PROPERTY,((ReportDesignHandle)getModel()).getBidiOrientation());
  }
}",0.9718498659517426
71039,"public void widgetSelected(SelectionEvent e){
  txtMaxDataSetRow.setEnabled(!noLimitBtn.getSelection(),noLimitBtn.getParent());
  if (!noLimitBtn.getSelection()) {
    txtMaxDataSetRow.setFocus();
  }
  txtMaxDataSetRow.checkState();
}","public void widgetSelected(SelectionEvent e){
  txtMaxDataSetRow.setEnabled(!noLimitBtn.getSelection(),noLimitBtn.getParent());
  if (!noLimitBtn.getSelection()) {
    txtMaxDataSetRow.setFocus();
  }
  if (txtMaxDataSetRow.checkState()) {
  }
}",0.9708333333333332
71040,"public boolean checkState(){
  if (noLimitBtn.getSelection()) {
    if (!super.checkState())     clearErrorMessage();
    return true;
  }
  return super.checkState();
}","public boolean checkState(){
  if (noLimitBtn.getSelection()) {
    setValid(true);
    if (!super.checkState())     clearErrorMessage();
    return true;
  }
 else {
    setValid(isValid());
  }
  return super.checkState();
}",0.8556962025316456
71041,"protected Control createContents(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.PREFERENCE_BIRT_PREVIEW_DATA_ID);
  Composite cmpTop=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  cmpTop.setLayout(layout);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  cmpTop.setLayoutData(gd);
  noLimitBtn=new Button(cmpTop,SWT.CHECK);
  GridData noLimitBtnData=new GridData(GridData.FILL_HORIZONTAL);
  noLimitBtnData.horizontalSpan=2;
  noLimitBtn.setText(""String_Node_Str"");
  noLimitBtn.setLayoutData(noLimitBtnData);
  noLimitBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      txtMaxDataSetRow.setEnabled(!noLimitBtn.getSelection(),noLimitBtn.getParent());
      if (!noLimitBtn.getSelection()) {
        txtMaxDataSetRow.setFocus();
      }
      txtMaxDataSetRow.checkState();
    }
  }
);
  txtMaxDataSetRow=new DisplayNumberFieldEditor(PREVIEW_MAXROW,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxDataSetRow.setPage(this);
  txtMaxDataSetRow.setValidRange(1,Integer.MAX_VALUE);
  txtMaxDataSetRow.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxDataSetRow.setEmptyStringAllowed(false);
  txtMaxDataSetRow.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxDataSetRow.isValid());
    }
  }
);
  txtMaxRowLevelMember=new IntegerFieldEditor(PREVIEW_MAX_ROW_LEVEL_MEMBER,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxRowLevelMember.setPage(this);
  txtMaxRowLevelMember.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxRowLevelMember.setEmptyStringAllowed(false);
  txtMaxRowLevelMember.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxRowLevelMember.isValid());
    }
  }
);
  txtMaxColumnLevelMember=new IntegerFieldEditor(PREVIEW_MAX_COLUMN_LEVEL_MEMBER,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxColumnLevelMember.setPage(this);
  txtMaxColumnLevelMember.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxColumnLevelMember.setEmptyStringAllowed(false);
  txtMaxColumnLevelMember.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxColumnLevelMember.isValid());
    }
  }
);
  txtMaxInMemoryCubeSize=new IntegerFieldEditor(PREVIEW_MAX_IN_MEMORY_CUBE_SIZE,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxInMemoryCubeSize.setPage(this);
  txtMaxInMemoryCubeSize.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxInMemoryCubeSize.setEmptyStringAllowed(false);
  txtMaxInMemoryCubeSize.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxInMemoryCubeSize.isValid());
    }
  }
);
  initControlValues();
  return cmpTop;
}","protected Control createContents(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.PREFERENCE_BIRT_PREVIEW_DATA_ID);
  Composite cmpTop=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  cmpTop.setLayout(layout);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  cmpTop.setLayoutData(gd);
  createDispalyRowLimitGroup(cmpTop);
  txtMaxRowLevelMember=new IntegerFieldEditor(PREVIEW_MAX_ROW_LEVEL_MEMBER,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxRowLevelMember.setPage(this);
  txtMaxRowLevelMember.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxRowLevelMember.setEmptyStringAllowed(false);
  txtMaxRowLevelMember.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxRowLevelMember.isValid());
    }
  }
);
  txtMaxColumnLevelMember=new IntegerFieldEditor(PREVIEW_MAX_COLUMN_LEVEL_MEMBER,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxColumnLevelMember.setPage(this);
  txtMaxColumnLevelMember.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxColumnLevelMember.setEmptyStringAllowed(false);
  txtMaxColumnLevelMember.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxColumnLevelMember.isValid());
    }
  }
);
  txtMaxInMemoryCubeSize=new IntegerFieldEditor(PREVIEW_MAX_IN_MEMORY_CUBE_SIZE,Messages.getString(""String_Node_Str""),cmpTop);
  txtMaxInMemoryCubeSize.setPage(this);
  txtMaxInMemoryCubeSize.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  txtMaxInMemoryCubeSize.setEmptyStringAllowed(false);
  txtMaxInMemoryCubeSize.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(txtMaxInMemoryCubeSize.isValid());
    }
  }
);
  initControlValues();
  return cmpTop;
}",0.6705052005943536
71042,"public void propertyChange(PropertyChangeEvent event){
  if (event.getProperty().equals(FieldEditor.IS_VALID))   setValid(txtMaxInMemoryCubeSize.isValid());
}","public void propertyChange(PropertyChangeEvent event){
  if (event.getProperty().equals(FieldEditor.IS_VALID))   setValid(txtMaxDataSetRow.isValid());
}",0.9290322580645162
71043,"/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 */
public IResultObject[] readData(InputStream bis,int length,StopSign stopSign) throws IOException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (stopSign != null && stopSign.isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (fieldType.isAssignableFrom(Date.class))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(Clob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(Blob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=new ObjectInputStream(dis);
        try {
          obs[j]=ois.readObject();
        }
 catch (        Exception e) {
        }
        ois.close();
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}","/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 */
public IResultObject[] readData(InputStream bis,int length,StopSign stopSign) throws IOException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (stopSign != null && stopSign.isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (fieldType.isAssignableFrom(Date.class))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IClob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IBlob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=new ObjectInputStream(dis);
        try {
          obs[j]=ois.readObject();
        }
 catch (        Exception e) {
        }
        ois.close();
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}",0.9996162701458172
71044,"/** 
 * @param bos
 * @param resultObject
 * @throws IOException
 */
public void writeData(OutputStream bos,IResultObject resultObject) throws IOException {
  byte[] rowsDataBytes;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  for (int j=0; j < columnCount; j++) {
    Object fieldValue=null;
    try {
      fieldValue=resultObject.getFieldValue(j + 1);
    }
 catch (    DataException e) {
    }
    if (fieldValue == null) {
      dos.writeByte(0);
      continue;
    }
 else {
      dos.writeByte(1);
    }
    Class fieldType=typeArray[j];
    if (fieldType.equals(Integer.class))     dos.writeInt(((Integer)fieldValue).intValue());
 else     if (fieldType.equals(Double.class))     dos.writeDouble(((Double)fieldValue).doubleValue());
 else     if (fieldType.equals(BigDecimal.class))     dos.writeUTF(((BigDecimal)fieldValue).toString());
 else     if (Date.class.isAssignableFrom(fieldType))     dos.writeLong(((Date)fieldValue).getTime());
 else     if (fieldType.equals(Boolean.class))     dos.writeBoolean(((Boolean)fieldValue).booleanValue());
 else     if (fieldType.equals(String.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(Clob.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(Blob.class)) {
      byte[] bytes=(byte[])fieldValue;
      if (bytes == null || bytes.length == 0) {
        IOUtil.writeInt(dos,0);
      }
 else {
        IOUtil.writeInt(dos,bytes.length);
        dos.write((byte[])fieldValue);
      }
    }
 else     if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
      if (!(fieldValue instanceof Serializable))       fieldValue=fieldValue.toString();
      ObjectOutputStream oo=new ObjectOutputStream(dos);
      oo.writeObject(fieldValue);
      oo.close();
    }
  }
  dos.flush();
  rowsDataBytes=baos.toByteArray();
  IOUtil.writeInt(bos,rowsDataBytes.length);
  bos.write(rowsDataBytes);
  rowsDataBytes=null;
  dos=null;
  baos=null;
}","/** 
 * @param bos
 * @param resultObject
 * @throws IOException
 */
public void writeData(OutputStream bos,IResultObject resultObject) throws IOException {
  byte[] rowsDataBytes;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  for (int j=0; j < columnCount; j++) {
    Object fieldValue=null;
    try {
      fieldValue=resultObject.getFieldValue(j + 1);
    }
 catch (    DataException e) {
    }
    if (fieldValue == null) {
      dos.writeByte(0);
      continue;
    }
 else {
      dos.writeByte(1);
    }
    Class fieldType=typeArray[j];
    if (fieldType.equals(Integer.class))     dos.writeInt(((Integer)fieldValue).intValue());
 else     if (fieldType.equals(Double.class))     dos.writeDouble(((Double)fieldValue).doubleValue());
 else     if (fieldType.equals(BigDecimal.class))     dos.writeUTF(((BigDecimal)fieldValue).toString());
 else     if (Date.class.isAssignableFrom(fieldType))     dos.writeLong(((Date)fieldValue).getTime());
 else     if (fieldType.equals(Boolean.class))     dos.writeBoolean(((Boolean)fieldValue).booleanValue());
 else     if (fieldType.equals(String.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IClob.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IBlob.class)) {
      byte[] bytes=(byte[])fieldValue;
      if (bytes == null || bytes.length == 0) {
        IOUtil.writeInt(dos,0);
      }
 else {
        IOUtil.writeInt(dos,bytes.length);
        dos.write((byte[])fieldValue);
      }
    }
 else     if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
      if (!(fieldValue instanceof Serializable))       fieldValue=fieldValue.toString();
      ObjectOutputStream oo=new ObjectOutputStream(dos);
      oo.writeObject(fieldValue);
      oo.close();
    }
  }
  dos.flush();
  rowsDataBytes=baos.toByteArray();
  IOUtil.writeInt(bos,rowsDataBytes.length);
  bos.write(rowsDataBytes);
  rowsDataBytes=null;
  dos=null;
  baos=null;
}",0.9995107632093934
71045,"public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontWeight(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getTextLineThrough(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getTextUnderline(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  entry.setProperty(StyleConstant.WHITE_SPACE,style.getWhiteSpace());
  return entry;
}","public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontWeight(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getTextLineThrough(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getTextUnderline(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign(),style.getDirection()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  entry.setProperty(StyleConstant.WHITE_SPACE,style.getWhiteSpace());
  return entry;
}",0.9969203695556532
71046,"public static String convertHAlign(String align){
  String ha=null;
  align=ExcelUtil.getValue(align);
  if (""String_Node_Str"".equalsIgnoreCase(align)) {
    ha=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(align)) {
    ha=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(align)) {
    ha=""String_Node_Str"";
  }
  return ha;
}","public static String convertHAlign(String align,String direction){
  String ha=null;
  align=ExcelUtil.getValue(align);
  if (""String_Node_Str"".equalsIgnoreCase(align)) {
    ha=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(align)) {
    ha=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(align)) {
    ha=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(direction))   ha=""String_Node_Str"";
 else   ha=""String_Node_Str"";
  return ha;
}",0.851258581235698
71047,"/** 
 * Add expression to query definition
 * @param queryDefn
 */
private void prepareExpression(QueryDefinition queryDefn){
  beName=new String[3];
  beArray=new ScriptExpression[3];
  beName[0]=""String_Node_Str"";
  ScriptExpression se=new ScriptExpression(""String_Node_Str"");
  beArray[0]=se;
  beName[1]=""String_Node_Str"";
  se=new ScriptExpression(""String_Node_Str"");
  beArray[1]=se;
  beName[2]=""String_Node_Str"";
  se=new ScriptExpression(""String_Node_Str"");
  beArray[2]=se;
  for (int i=0; i < beName.length; i++) {
    queryDefn.addResultSetExpression(beName[i],beArray[i]);
  }
}","/** 
 * Add expression to query definition
 * @param queryDefn
 * @throws DataException 
 */
private void prepareExpression(QueryDefinition queryDefn) throws DataException {
  beName=new String[3];
  beArray=new ScriptExpression[3];
  beName[0]=""String_Node_Str"";
  ScriptExpression se=new ScriptExpression(""String_Node_Str"");
  se.setDataType(DataType.INTEGER_TYPE);
  beArray[0]=se;
  beName[1]=""String_Node_Str"";
  se=new ScriptExpression(""String_Node_Str"");
  se.setDataType(DataType.STRING_TYPE);
  beArray[1]=se;
  beName[2]=""String_Node_Str"";
  se=new ScriptExpression(""String_Node_Str"");
  se.setDataType(DataType.BLOB_TYPE);
  beArray[2]=se;
  for (int i=0; i < beName.length; i++) {
    queryDefn.addBinding(new Binding(beName[i],beArray[i]));
  }
}",0.8474074074074074
71048,"/** 
 * Get test ReportQueryDefn
 * @return ReportQueryDefn
 * @throws BirtException
 */
private IQueryDefinition getReportQueryDefn(int testUnit,String dsetName) throws BirtException {
  QueryDefinition rqDefn=new QueryDefinition();
  rqDefn.setDataSetName(dsetName == null ? dataSetName : dsetName);
  for (int i=0; i < this.scriptExprs.length; i++) {
    rqDefn.addResultSetExpression(""String_Node_Str"" + scriptColumnNames[i],scriptExprs[i]);
  }
  if (this.ADD_ALIAS) {
    for (int i=0; i < this.aliasScriptExprs.length; i++) {
      rqDefn.addResultSetExpression(""String_Node_Str"" + scriptColumnAliasNames[i],aliasScriptExprs[i]);
    }
  }
  rqDefn.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  rqDefn.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  String[] filterStr=new String[]{""String_Node_Str""};
  rqDefn.addResultSetExpression(""String_Node_Str"",new ScriptExpression(filterStr[0]));
  for (int i=0; i < filterStr.length; i++) {
    rqDefn.addFilter(new FilterDefinition(new ScriptExpression(""String_Node_Str"")));
  }
  if (testUnit == TEST_SORT) {
    SortDefinition sort=new SortDefinition();
    sort.setExpression(""String_Node_Str"");
    sort.setSortDirection(ISortDefinition.SORT_ASC);
    rqDefn.addSort(sort);
  }
  if (testUnit == TEST_GROUP) {
    SortDefinition sort=new SortDefinition();
    sort.setExpression(""String_Node_Str"");
    sort.setSortDirection(ISortDefinition.SORT_ASC);
    rqDefn.addSort(sort);
    GroupDefinition group=new GroupDefinition(""String_Node_Str"");
    group.setKeyExpression(""String_Node_Str"");
    group.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
    group.setIntervalStart(new Double(3.0));
    group.setIntervalRange(3.0);
    group.setIntervalStart(new Integer(3));
    group.setSortDirection(IGroupDefinition.SORT_ASC);
    groupExpr.setGroupName(""String_Node_Str"");
    rqDefn.addResultSetExpression(groupName,groupExpr);
    rqDefn.addGroup(group);
  }
  if (testUnit == TEST_MAXROW) {
    IQueryDefinition queryDefinition=getReportQueryDefn(TEST_NONE);
    IPreparedQuery pq=dataEngine.prepare(queryDefinition);
    IQueryResults qr=pq.execute(jsScope);
    IResultIterator resultIterator=qr.getResultIterator();
    int realRows=0;
    while (resultIterator.next()) {
      realRows++;
    }
    rqDefn.setMaxRows(realRows / 2);
  }
  if (testUnit == TEST_TOPN_FILTER) {
    ConditionalExpression conditionExpr=new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_TOP_N,""String_Node_Str"");
    FilterDefinition exprFilter=new FilterDefinition(conditionExpr);
    rqDefn.addFilter(exprFilter);
  }
  rqDefn.addResultSetExpression(queryName,queryExpr);
  return rqDefn;
}","/** 
 * Get test ReportQueryDefn
 * @return ReportQueryDefn
 * @throws BirtException
 */
private IQueryDefinition getReportQueryDefn(int testUnit,String dsetName) throws BirtException {
  QueryDefinition rqDefn=new QueryDefinition();
  rqDefn.setDataSetName(dsetName == null ? dataSetName : dsetName);
  for (int i=0; i < this.scriptExprs.length; i++) {
    ((ScriptExpression)scriptExprs[i]).setDataType(scriptColumnTypes[i]);
    rqDefn.addResultSetExpression(""String_Node_Str"" + scriptColumnNames[i],scriptExprs[i]);
  }
  if (this.ADD_ALIAS) {
    for (int i=0; i < this.aliasScriptExprs.length; i++) {
      rqDefn.addResultSetExpression(""String_Node_Str"" + scriptColumnAliasNames[i],aliasScriptExprs[i]);
    }
  }
  rqDefn.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  rqDefn.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  String[] filterStr=new String[]{""String_Node_Str""};
  rqDefn.addResultSetExpression(""String_Node_Str"",new ScriptExpression(filterStr[0]));
  for (int i=0; i < filterStr.length; i++) {
    rqDefn.addFilter(new FilterDefinition(new ScriptExpression(""String_Node_Str"")));
  }
  if (testUnit == TEST_SORT) {
    SortDefinition sort=new SortDefinition();
    sort.setExpression(""String_Node_Str"");
    sort.setSortDirection(ISortDefinition.SORT_ASC);
    rqDefn.addSort(sort);
  }
  if (testUnit == TEST_GROUP) {
    SortDefinition sort=new SortDefinition();
    sort.setExpression(""String_Node_Str"");
    sort.setSortDirection(ISortDefinition.SORT_ASC);
    rqDefn.addSort(sort);
    GroupDefinition group=new GroupDefinition(""String_Node_Str"");
    group.setKeyExpression(""String_Node_Str"");
    group.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
    group.setIntervalStart(new Double(3.0));
    group.setIntervalRange(3.0);
    group.setIntervalStart(new Integer(3));
    group.setSortDirection(IGroupDefinition.SORT_ASC);
    groupExpr.setGroupName(""String_Node_Str"");
    rqDefn.addResultSetExpression(groupName,groupExpr);
    rqDefn.addGroup(group);
  }
  if (testUnit == TEST_MAXROW) {
    IQueryDefinition queryDefinition=getReportQueryDefn(TEST_NONE);
    IPreparedQuery pq=dataEngine.prepare(queryDefinition);
    IQueryResults qr=pq.execute(jsScope);
    IResultIterator resultIterator=qr.getResultIterator();
    int realRows=0;
    while (resultIterator.next()) {
      realRows++;
    }
    rqDefn.setMaxRows(realRows / 2);
  }
  if (testUnit == TEST_TOPN_FILTER) {
    ConditionalExpression conditionExpr=new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_TOP_N,""String_Node_Str"");
    FilterDefinition exprFilter=new FilterDefinition(conditionExpr);
    rqDefn.addFilter(exprFilter);
  }
  rqDefn.addResultSetExpression(queryName,queryExpr);
  return rqDefn;
}",0.9866087585957292
71049,"public void getMetadataTestImpl(boolean dynamicMetadata) throws Exception {
  init(dynamicMetadata);
  IQueryDefinition rqDefn=getReportQueryDefn(TEST_SORT);
  IPreparedQuery pq=dataEngine.prepare(rqDefn);
  IQueryResults qr=pq.execute(jsScope);
  IResultMetaData metaData=qr.getResultMetaData();
  int count=getNoneTempColumCount(metaData);
  for (int i=0; i < count; i++) {
    if (i < scriptColumnNames.length) {
      assertEquals(metaData.getColumnName(i + 1),scriptColumnNames[i]);
      assertEquals(metaData.getColumnType(i + 1),scriptColumnTypes[i]);
    }
 else     assertEquals(metaData.getColumnName(i + 1),computedColumnNames[i - scriptColumnNames.length]);
  }
}","public void getMetadataTestImpl(boolean dynamicMetadata) throws Exception {
  init(dynamicMetadata);
  IQueryDefinition rqDefn=getReportQueryDefn(TEST_SORT);
  IPreparedQuery pq=dataEngine.prepare(rqDefn);
  IQueryResults qr=pq.execute(jsScope);
  IResultMetaData metaData=qr.getResultMetaData();
  int count=getNoneTempColumCount(metaData);
  for (int i=0; i < count; i++) {
    if (i < scriptColumnNames.length) {
      assertEquals(metaData.getColumnName(i + 1),""String_Node_Str"" + scriptColumnNames[i]);
      assertEquals(metaData.getColumnType(i + 1),scriptColumnTypes[i]);
    }
 else     if (i < scriptColumnNames.length + scriptColumnAliasNames.length)     assertEquals(metaData.getColumnName(i + 1),""String_Node_Str"" + scriptColumnAliasNames[i - scriptColumnNames.length]);
  }
}",0.903754266211604
71050,"public void test4_ProjectedCol() throws Exception {
  OdaDataSetDesign dset=newDataSet(""String_Node_Str"",""String_Node_Str"" + this.getTestTableName());
  QueryDefinition query=this.newReportQuery(dset);
  ComputedColumn compCol=new ComputedColumn(""String_Node_Str"",""String_Node_Str"",DataType.ANY_TYPE);
  dset.addComputedColumn(compCol);
  ColumnDefinition coldef=new ColumnDefinition(""String_Node_Str"");
  coldef.setAlias(""String_Node_Str"");
  dset.addResultSetHint(coldef);
  query.setColumnProjection(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  IPreparedQuery pq=this.dataEngine.prepare(query);
  IQueryResults qr=pq.execute(null);
  IResultMetaData md=qr.getResultMetaData();
  this.testPrint(Util.getMetaDadataInfo(md));
  checkOutputFile();
  query.setColumnProjection(new String[]{});
  pq=this.dataEngine.prepare(query);
  qr=pq.execute(null);
  assertTrue(qr.getResultMetaData().getColumnCount() == 18);
  assertTrue(qr.getResultIterator().getResultMetaData().getColumnCount() == 18);
  query.setColumnProjection(new String[]{""String_Node_Str""});
  pq=this.dataEngine.prepare(query);
  try {
    qr=pq.execute(null);
  }
 catch (  DataException e) {
  }
}","public void test4_ProjectedCol() throws Exception {
  OdaDataSetDesign dset=newDataSet(""String_Node_Str"",""String_Node_Str"" + this.getTestTableName());
  QueryDefinition query=this.newReportQuery(dset);
  query.setAutoBinding(true);
  ComputedColumn compCol=new ComputedColumn(""String_Node_Str"",""String_Node_Str"",DataType.ANY_TYPE);
  dset.addComputedColumn(compCol);
  ColumnDefinition coldef=new ColumnDefinition(""String_Node_Str"");
  coldef.setAlias(""String_Node_Str"");
  dset.addResultSetHint(coldef);
  query.setColumnProjection(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  IPreparedQuery pq=this.dataEngine.prepare(query);
  IQueryResults qr=pq.execute(null);
  IResultMetaData md=qr.getResultMetaData();
  this.testPrint(Util.getMetaDadataInfo(md));
  checkOutputFile();
  query.setColumnProjection(new String[]{});
  pq=this.dataEngine.prepare(query);
  qr=pq.execute(null);
  assertTrue(qr.getResultMetaData().getColumnCount() == 18);
  assertTrue(qr.getResultIterator().getResultMetaData().getColumnCount() == 18);
  query.setColumnProjection(new String[]{""String_Node_Str""});
  pq=this.dataEngine.prepare(query);
  try {
    qr=pq.execute(null);
  }
 catch (  DataException e) {
  }
}",0.9877450980392156
71051,"public void test2_ResultHints() throws Exception {
  OdaDataSetDesign dset=newDataSet(""String_Node_Str"",""String_Node_Str"" + this.getTestTableName());
  QueryDefinition query=this.newReportQuery(dset);
  ColumnDefinition coldef=new ColumnDefinition(""String_Node_Str"");
  coldef.setColumnPosition(1);
  coldef.setAlias(""String_Node_Str"");
  coldef.setDataType(DataType.DOUBLE_TYPE);
  dset.addResultSetHint(coldef);
  coldef=new ColumnDefinition(""String_Node_Str"");
  coldef.setAlias(""String_Node_Str"");
  dset.addResultSetHint(coldef);
  coldef=new ColumnDefinition(""String_Node_Str"");
  coldef.setAlias(""String_Node_Str"");
  dset.addResultSetHint(coldef);
  coldef=new ColumnDefinition(""String_Node_Str"");
  coldef.setAlias(""String_Node_Str"");
  coldef.setColumnPosition(30);
  dset.addResultSetHint(coldef);
  IPreparedQuery pq=this.dataEngine.prepare(query);
  IQueryResults qr=pq.execute(null);
  IResultMetaData md=qr.getResultMetaData();
  this.testPrint(Util.getMetaDadataInfo(md));
  checkOutputFile();
}","public void test2_ResultHints() throws Exception {
  OdaDataSetDesign dset=newDataSet(""String_Node_Str"",""String_Node_Str"" + this.getTestTableName());
  QueryDefinition query=this.newReportQuery(dset);
  query.setAutoBinding(true);
  ColumnDefinition coldef=new ColumnDefinition(""String_Node_Str"");
  coldef.setColumnPosition(1);
  coldef.setAlias(""String_Node_Str"");
  coldef.setDataType(DataType.DOUBLE_TYPE);
  dset.addResultSetHint(coldef);
  coldef=new ColumnDefinition(""String_Node_Str"");
  coldef.setAlias(""String_Node_Str"");
  dset.addResultSetHint(coldef);
  coldef=new ColumnDefinition(""String_Node_Str"");
  coldef.setAlias(""String_Node_Str"");
  dset.addResultSetHint(coldef);
  coldef=new ColumnDefinition(""String_Node_Str"");
  coldef.setAlias(""String_Node_Str"");
  coldef.setColumnPosition(30);
  dset.addResultSetHint(coldef);
  IPreparedQuery pq=this.dataEngine.prepare(query);
  IQueryResults qr=pq.execute(null);
  IResultMetaData md=qr.getResultMetaData();
  this.testPrint(Util.getMetaDadataInfo(md));
  checkOutputFile();
}",0.9853801169590644
71052,"public void test1_SelectAll() throws Exception {
  OdaDataSetDesign dset=newDataSet(""String_Node_Str"",""String_Node_Str"" + this.getTestTableName());
  QueryDefinition query=this.newReportQuery(dset);
  IPreparedQuery pq=this.dataEngine.prepare(query);
  IQueryResults qr=pq.execute(null);
  IResultMetaData md=qr.getResultMetaData();
  this.testPrint(Util.getMetaDadataInfo(md));
  checkOutputFile();
  closeOutputFile();
  openOutputFile();
  md=qr.getResultIterator().getResultMetaData();
  this.testPrint(Util.getMetaDadataInfo(md));
  checkOutputFile();
  assertEquals(17,md.getColumnCount());
  try {
    md.getColumnName(-1);
    fail(""String_Node_Str"");
  }
 catch (  java.lang.ArrayIndexOutOfBoundsException e) {
  }
  try {
    md.getColumnName(18);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}","public void test1_SelectAll() throws Exception {
  OdaDataSetDesign dset=newDataSet(""String_Node_Str"",""String_Node_Str"" + this.getTestTableName());
  QueryDefinition query=this.newReportQuery(dset);
  query.setAutoBinding(true);
  IPreparedQuery pq=this.dataEngine.prepare(query);
  IQueryResults qr=pq.execute(null);
  IResultMetaData md=qr.getResultMetaData();
  this.testPrint(Util.getMetaDadataInfo(md));
  checkOutputFile();
  closeOutputFile();
  openOutputFile();
  md=qr.getResultIterator().getResultMetaData();
  this.testPrint(Util.getMetaDadataInfo(md));
  checkOutputFile();
  assertEquals(17,md.getColumnCount());
  try {
    md.getColumnName(-1);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
  try {
    md.getColumnName(18);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}",0.9606775559588628
71053,"public static String getMetaDadataInfo(IResultMetaData meta) throws BirtException {
  StringBuffer stringBuff=new StringBuffer();
  if (meta == null) {
    stringBuff.append(""String_Node_Str"");
    stringBuff.append(""String_Node_Str"");
  }
 else {
    int count=meta.getColumnCount();
    stringBuff.append(""String_Node_Str"");
    stringBuff.append(""String_Node_Str"");
    for (int i=1; i <= count; i++) {
      stringBuff.append(Integer.toString(i));
      stringBuff.append(""String_Node_Str"");
      try {
        stringBuff.append(meta.getColumnName(i));
      }
 catch (      DataException e) {
        stringBuff.append(""String_Node_Str"");
      }
      stringBuff.append(""String_Node_Str"");
      try {
        stringBuff.append(meta.getColumnAlias(i));
      }
 catch (      DataException e) {
        stringBuff.append(""String_Node_Str"");
      }
      stringBuff.append(""String_Node_Str"");
      try {
        stringBuff.append(meta.getColumnLabel(i));
      }
 catch (      DataException e) {
        stringBuff.append(""String_Node_Str"");
      }
      stringBuff.append(""String_Node_Str"");
      try {
        stringBuff.append(Integer.toString((meta.getColumnType(i))));
      }
 catch (      DataException e) {
        stringBuff.append(""String_Node_Str"");
      }
      stringBuff.append(""String_Node_Str"");
      try {
        stringBuff.append(meta.getColumnTypeName(i));
      }
 catch (      DataException e) {
        stringBuff.append(""String_Node_Str"");
      }
      stringBuff.append(""String_Node_Str"");
      stringBuff.append(""String_Node_Str"");
    }
  }
  return new String(stringBuff);
}","public static String getMetaDadataInfo(IResultMetaData meta) throws BirtException {
  StringBuffer stringBuff=new StringBuffer();
  if (meta == null || meta.getColumnCount() == 0) {
    stringBuff.append(""String_Node_Str"");
    stringBuff.append(""String_Node_Str"");
  }
 else {
    int count=meta.getColumnCount();
    stringBuff.append(""String_Node_Str"");
    stringBuff.append(""String_Node_Str"");
    for (int i=1; i <= count; i++) {
      stringBuff.append(Integer.toString(i));
      stringBuff.append(""String_Node_Str"");
      try {
        stringBuff.append(meta.getColumnName(i));
      }
 catch (      DataException e) {
        stringBuff.append(""String_Node_Str"");
      }
      stringBuff.append(""String_Node_Str"");
      try {
        stringBuff.append(meta.getColumnAlias(i));
      }
 catch (      DataException e) {
        stringBuff.append(""String_Node_Str"");
      }
      stringBuff.append(""String_Node_Str"");
      try {
        stringBuff.append(meta.getColumnLabel(i));
      }
 catch (      DataException e) {
        stringBuff.append(""String_Node_Str"");
      }
      stringBuff.append(""String_Node_Str"");
      try {
        stringBuff.append(Integer.toString((meta.getColumnType(i))));
      }
 catch (      DataException e) {
        stringBuff.append(""String_Node_Str"");
      }
      stringBuff.append(""String_Node_Str"");
      try {
        stringBuff.append(meta.getColumnTypeName(i));
      }
 catch (      DataException e) {
        stringBuff.append(""String_Node_Str"");
      }
      stringBuff.append(""String_Node_Str"");
      stringBuff.append(""String_Node_Str"");
    }
  }
  return new String(stringBuff);
}",0.99079754601227
71054,"/** 
 */
public int compare(Object o1,Object o2){
  Object[] sortKeys1=((GroupBoundaryInfo)o1).getSortKeys();
  Object[] sortKeys2=((GroupBoundaryInfo)o2).getSortKeys();
  boolean[] sortDirection=((GroupBoundaryInfo)o1).getSortDirection();
  Comparator[] comparator=((GroupBoundaryInfo)o1).getCollarComparator();
  int result=0;
  for (int i=0; i < sortKeys1.length; i++) {
    try {
      result=ScriptEvalUtil.compare(sortKeys1[i],sortKeys2[i],comparator[i]);
    }
 catch (    DataException e) {
      result=0;
    }
    if (result != 0) {
      if (sortDirection[i] == false) {
        result=result * -1;
        break;
      }
    }
  }
  return result;
}","/** 
 */
public int compare(Object o1,Object o2){
  Object[] sortKeys1=((GroupBoundaryInfo)o1).getSortKeys();
  Object[] sortKeys2=((GroupBoundaryInfo)o2).getSortKeys();
  boolean[] sortDirection=((GroupBoundaryInfo)o1).getSortDirection();
  Comparator[] comparator=((GroupBoundaryInfo)o1).getCollarComparator();
  int result=0;
  for (int i=0; i < sortKeys1.length; i++) {
    try {
      result=ScriptEvalUtil.compare(sortKeys1[i],sortKeys2[i],comparator[i]);
    }
 catch (    DataException e) {
      result=0;
    }
    if (result != 0) {
      if (sortDirection[i] == false) {
        result=result * -1;
      }
      break;
    }
  }
  return result;
}",0.9667170953101362
71055,"public static boolean containsYOptionalGrouping(Chart chart){
  boolean YOG=false;
  SeriesDefinition os=ChartUtil.getAllOrthogonalSeriesDefinitions(chart).get(0);
  if (os != null && os.getQuery() != null && os.getQuery().getDefinition() != null && os.getQuery().getDefinition().length() != 0) {
    YOG=true;
  }
  return YOG;
}","public static boolean containsYOptionalGrouping(Chart chart){
  boolean YOG=false;
  List<SeriesDefinition> sds=ChartUtil.getAllOrthogonalSeriesDefinitions(chart);
  if (sds.size() > 0) {
    SeriesDefinition os=sds.get(0);
    if (os != null && os.getQuery() != null && os.getQuery().getDefinition() != null && os.getQuery().getDefinition().length() != 0) {
      YOG=true;
    }
  }
  return YOG;
}",0.8849315068493151
71056,"public void testExecutor(){
  TextTemplate template=new TemplateParser().parse(input);
  ExecutionContext context=new ExecutionContext();
  TemplateExecutor executor=new TemplateExecutor(context);
  HashMap values=new HashMap();
  values.put(""String_Node_Str"",""String_Node_Str"");
  values.put(""String_Node_Str"",new byte[]{});
  String output=executor.execute(template,values);
  boolean matched=output.matches(""String_Node_Str"");
  assertTrue(matched);
}","public void testExecutor(){
  TextTemplate template=new TemplateParser().parse(input);
  ExecutionContext context=new ExecutionContext();
  TemplateExecutor executor=new TemplateExecutor(context);
  HashMap<String,Object> values=new HashMap<String,Object>();
  values.put(""String_Node_Str"",""String_Node_Str"");
  values.put(""String_Node_Str"",new byte[]{});
  String output=executor.execute(template,values);
  boolean matched=output.matches(""String_Node_Str"");
  assertTrue(matched);
}",0.9680170575692963
71057,"public Object visitValue(TextTemplate.ValueNode node,Object value){
  String text=""String_Node_Str"";
  String format=node.getFormat();
  Object result=null;
  if (values != null) {
    result=values.get(node.getValue());
  }
  if (""String_Node_Str"".equalsIgnoreCase(format)) {
    if (result != null) {
      text=result.toString();
    }
  }
 else {
    if (result != null) {
      if (result instanceof Number) {
        NumberFormatter fmt=context.getNumberFormatter(format);
        text=fmt.format((Number)result);
      }
 else       if (result instanceof String) {
        StringFormatter fmt=context.getStringFormatter(format);
        text=fmt.format((String)result);
      }
 else       if (result instanceof Date) {
        DateFormatter fmt=context.getDateFormatter(format);
        text=fmt.format((Date)result);
      }
 else {
        text=result.toString();
      }
    }
    text=encodeHtmlText(text);
  }
  buffer.append(text);
  return value;
}","public Object visitValue(TextTemplate.ValueNode node,Object value){
  String text=""String_Node_Str"";
  Object result=null;
  if (values != null) {
    result=values.get(node.getValue());
  }
  String format=node.getFormat();
  String formatExpression=node.getFormatExpression();
  if (format == null && formatExpression != null) {
    format=values.get(formatExpression).toString();
  }
  if (""String_Node_Str"".equalsIgnoreCase(format)) {
    if (result != null) {
      text=result.toString();
    }
  }
 else {
    if (result != null) {
      if (result instanceof Number) {
        NumberFormatter fmt=context.getNumberFormatter(format);
        text=fmt.format((Number)result);
      }
 else       if (result instanceof String) {
        StringFormatter fmt=context.getStringFormatter(format);
        text=fmt.format((String)result);
      }
 else       if (result instanceof Date) {
        DateFormatter fmt=context.getDateFormatter(format);
        text=fmt.format((Date)result);
      }
 else {
        text=result.toString();
      }
    }
    text=encodeHtmlText(text);
  }
  buffer.append(text);
  return value;
}",0.8898467432950191
71058,"public String execute(TextTemplate template,HashMap values){
  this.buffer=new StringBuffer();
  this.values=values;
  if (template == null) {
    return ""String_Node_Str"";
  }
  ArrayList nodes=template.getNodes();
  Iterator iter=nodes.iterator();
  while (iter.hasNext()) {
    TextTemplate.Node node=(TextTemplate.Node)iter.next();
    node.accept(this,null);
  }
  return buffer.toString();
}","public String execute(TextTemplate template,HashMap<String,Object> values){
  this.buffer=new StringBuffer();
  this.values=values;
  if (template == null) {
    return ""String_Node_Str"";
  }
  ArrayList nodes=template.getNodes();
  Iterator iter=nodes.iterator();
  while (iter.hasNext()) {
    TextTemplate.Node node=(TextTemplate.Node)iter.next();
    node.accept(this,null);
  }
  return buffer.toString();
}",0.9814585908529048
71059,"public HashMap getExpressions(){
  if (text == null) {
    return null;
  }
  if (exprs != null) {
    return exprs;
  }
  if (HTML_TEXT.equals(textType) || (AUTO_TEXT.equals(textType) && startsWithIgnoreCase(text,""String_Node_Str""))) {
    exprs=new HashMap();
    TextTemplate template=new TemplateParser().parse(text);
    if (template != null && template.getNodes() != null) {
      Iterator itor=template.getNodes().iterator();
      Object obj;
      String expression=null;
      while (itor.hasNext()) {
        obj=itor.next();
        if (obj instanceof TextTemplate.ValueNode) {
          expression=((TextTemplate.ValueNode)obj).getValue();
        }
 else         if (obj instanceof TextTemplate.ImageNode) {
          expression=((TextTemplate.ImageNode)obj).getExpr();
        }
        if (expression != null && !expression.trim().equals(""String_Node_Str"")) {
          exprs.put(expression,expression);
          expression=null;
        }
      }
    }
  }
  return exprs;
}","public HashMap<String,String> getExpressions(){
  if (text == null) {
    return null;
  }
  if (exprs != null) {
    return exprs;
  }
  if (HTML_TEXT.equals(textType) || (AUTO_TEXT.equals(textType) && startsWithIgnoreCase(text,""String_Node_Str""))) {
    exprs=new HashMap<String,String>();
    TextTemplate template=new TemplateParser().parse(text);
    if (template != null && template.getNodes() != null) {
      Iterator itor=template.getNodes().iterator();
      Object obj;
      while (itor.hasNext()) {
        obj=itor.next();
        if (obj instanceof TextTemplate.ValueNode) {
          ValueNode valueNode=(TextTemplate.ValueNode)obj;
          addExpression(valueNode.getValue());
          addExpression(valueNode.getFormatExpression());
        }
 else         if (obj instanceof TextTemplate.ImageNode) {
          addExpression(((TextTemplate.ImageNode)obj).getExpr());
        }
      }
    }
  }
  return exprs;
}",0.7912772585669782
71060,"/** 
 * Advance the leaf group with offset.
 * @param offset
 * @throws DataException 
 */
public void move() throws DataException {
  if (groups.length > 0) {
    for (int i=leafGroupIdx; i < this.getGroups()[groups.length - 1].size(); i++) {
      GroupInfo nextLeafGroup=findGroup(groups.length - 1,leafGroupIdx + 1);
      if (nextLeafGroup != null && cacheProvider.getCurrentIndex() >= nextLeafGroup.firstChild) {
        ++leafGroupIdx;
      }
 else {
        break;
      }
    }
  }
}","/** 
 * Advance the leaf group with offset.
 * @param offset
 * @throws DataException 
 */
public void move() throws DataException {
  if (groups.length > 0) {
    binaryMove();
  }
}",0.5295857988165681
71061,"public ReportletExecutorV4(ExecutionContext context,long offset) throws IOException {
  super(context);
  fragment=createFragment(offset);
  bodyExecutor=new ReportBodyExecutor(manager,fragment);
}","public ReportletExecutorV4(ExecutionContext context,long offset) throws IOException {
  super(context);
  fragment=createFragment(offset);
  bodyExecutor=new ReportletBodyExecutor(manager,fragment,offset);
}",0.9752475247524752
71062,"public IReportItemExecutor getNextChild(){
  return bodyExecutor.getNextChild();
}","public IReportItemExecutor getNextChild(){
  if (bodyExecutor != null) {
    IReportItemExecutor executor=bodyExecutor;
    bodyExecutor=null;
    return executor;
  }
  return null;
}",0.5413533834586466
71063,"public void close(){
  bodyExecutor.close();
  super.close();
}","public void close(){
  try {
    if (bodyExecutor != null) {
      try {
        bodyExecutor.close();
      }
 catch (      BirtException e) {
      }
    }
  }
  finally {
    bodyExecutor=null;
    super.close();
  }
}",0.4225352112676056
71064,"public IReportContent execute(){
  bodyExecutor.execute();
  return reportContent;
}","public IReportContent execute(){
  return reportContent;
}",0.8169014084507042
71065,"public boolean hasNextChild(){
  return bodyExecutor.hasNextChild();
}","public boolean hasNextChild(){
  return bodyExecutor != null;
}",0.8421052631578947
71066,"public BlankData(SheetData data){
  super(null,0,null);
  this.data=data;
}","public BlankData(SheetData data){
  super(data);
  this.data=data;
}",0.8951048951048951
71067,"private void clearCachedSheetData(){
  for (int i=0; i < getColumnCount(); i++) {
    columns.set(i,new ArrayList<SheetData>());
  }
  Set<Entry<Integer,Integer>> entrySets=columnId2StartRowId.entrySet();
  for (  Map.Entry<Integer,Integer> entry : entrySets) {
    entry.setValue(0);
  }
  bookmarks.clear();
}","public void clearCachedSheetData(){
  for (int i=0; i < getColumnCount(); i++) {
    columns.set(i,new ArrayList<SheetData>());
  }
  bookmarks.clear();
  maxRowIndex=1;
}",0.6224066390041494
71068,"protected boolean valid(int row,int col){
  if (col >= getColumnCount() || row > getStartRowId(col)) {
    return false;
  }
  int start=columnId2StartRowId.get(new Integer(col)).intValue();
  return (row >= start && row < getStartRowId(col) && col < getColumnCount());
}","protected boolean valid(int row,int col){
  if (col >= getColumnCount()) {
    return false;
  }
  return true;
}",0.578125
71069,"public void addData(int col,SheetData data){
  if ((getStartRowId(col) > height) || (col >= getColumnCount())) {
    emitter.outputSheet();
    clearCachedSheetData();
  }
  List<SheetData> column=columns.get(col);
  int size=column.size();
  if (size > 0) {
    column.get(size - 1).clearContainer();
  }
  column.add(data);
  BookmarkDef bookmark=data.getBookmark();
  if (bookmark == null) {
    return;
  }
  int rowNo=columnId2StartRowId.get(new Integer(col)).intValue() + getStartRowId(col);
  bookmark.setColumnNo(col + 1);
  bookmark.setRowNo(rowNo);
  bookmarks.add(bookmark);
}","public void addData(int col,SheetData data){
  int rowIndex=data.getRowIndex();
  columns.get(col).add(data);
  maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
  BookmarkDef bookmark=data.getBookmark();
  if (bookmark == null) {
    return;
  }
  bookmark.setColumnNo(col + 1);
  bookmark.setRowNo(rowIndex);
  bookmarks.add(bookmark);
}",0.1323372465314834
71070,"public void insertColumns(int col,int size){
  if (size == 0) {
    return;
  }
  int columnCount=getColumnCount();
  int m_start=col + 1;
  int m_size=columnCount - m_start;
  m_size=Math.max(0,m_size);
  ArrayList<SheetData>[] mcol=(ArrayList<SheetData>[])new ArrayList[m_size];
  Map<Integer,Integer> temp=new HashMap<Integer,Integer>();
  for (int i=m_start, j=0; j < m_size; i++, j++) {
    Integer column=new Integer(i);
    Integer row=columnId2StartRowId.get(column);
    int npos=i + size;
    if (npos < width) {
      temp.put(new Integer(npos),row);
      mcol[j]=columns.get(m_start);
    }
    columns.remove(m_start);
  }
  columnId2StartRowId.putAll(temp);
  int rowCount=getStartRowId(col);
  for (int i=m_start; i <= col + size; i++) {
    if (i < width) {
      if (i > columns.size()) {
        columns.add(new ArrayList<SheetData>());
        columnId2StartRowId.put(columns.size() - 1,rowCount);
      }
 else {
        columns.add(i,new ArrayList<SheetData>());
        columnId2StartRowId.put(i,rowCount);
      }
    }
  }
  for (int i=0; i < mcol.length; i++) {
    if (mcol[i] == null) {
      continue;
    }
    columns.add(mcol[i]);
  }
}","public void insertColumns(int startColumn,int columnCount){
  if (columnCount == 0) {
    return;
  }
  int startPosition=startColumn + 1;
  for (int i=startPosition; i <= startColumn + columnCount; i++) {
    if (i < width) {
      columns.add(i,new ArrayList<SheetData>());
    }
  }
}",0.1484536082474226
71071,"public int getMaxRow(){
  int max=0;
  for (int i=0; i < columns.size(); i++) {
    int size=getStartRowId(i);
    max=max >= size ? max : size;
  }
  return max;
}","public int getMaxRow(){
  return maxRowIndex;
}",0.3696682464454976
71072,"public DataCache(int width,int height,ExcelEmitter emitter){
  columns.add(new ArrayList<SheetData>());
  columnId2StartRowId.put(0,0);
  this.width=width;
  this.height=height;
  this.emitter=emitter;
}","public DataCache(int width,int height){
  columns.add(new ArrayList<SheetData>());
  this.width=width;
}",0.6775244299674267
71073,"/** 
 * Execute the Script Function with an array of arguments.
 * @param arguments
 * @return
 */
public Object execute(Object[] arguments) throws BirtException ;","/** 
 * Execute the Script Function with an array of arguments.
 * @param arguments
 * @return
 */
public Object execute(Object[] arguments,IScriptFunctionContext context) throws BirtException ;",0.9131652661064426
71074,"public Object execute(Object[] arguments) throws BirtException {
  if (this.executor != null)   return this.executor.execute(arguments);
  return null;
}","public Object execute(Object[] arguments,IScriptFunctionContext context) throws BirtException {
  if (this.executor != null)   return this.executor.execute(arguments,context);
  return null;
}",0.8869565217391304
71075,"public Object execute(Object[] arguments) throws BirtException {
  return this.executor.execute(arguments);
}","public Object execute(Object[] arguments,IScriptFunctionContext context) throws BirtException {
  return this.executor.execute(arguments,context);
}",0.8482490272373541
71076,"/** 
 * @return
 */
private static SimpleDateFormat getMonthFormat(){
  if (monthFormat != null)   return monthFormat;
  try {
    Locale defaultLocale=Context.enter().getLocale();
    monthFormat=new SimpleDateFormat(""String_Node_Str"",defaultLocale);
    return monthFormat;
  }
  finally {
    Context.exit();
  }
}","/** 
 * @return
 */
private static SimpleDateFormat getMonthFormat(){
  if (monthFormat == null)   monthFormat=new SimpleDateFormat(""String_Node_Str"",defaultLocale);
  return monthFormat;
}",0.7430830039525692
71077,"public Object execute(Object[] arguments) throws BirtException {
  return this.executor.execute(arguments);
}","public Object execute(Object[] arguments,IScriptFunctionContext context) throws BirtException {
  scriptContext=context;
  if (scriptContext != null) {
    ULocale locale=(ULocale)scriptContext.findProperty(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.LOCALE);
    if (defaultLocale != null && !defaultLocale.equals(locale)) {
      abbrMonthFormat=null;
      monthFormat=null;
      abbrWeekFormat=null;
      weekFormat=null;
      defaultLocale=locale;
    }
 else     defaultLocale=locale;
  }
  return this.executor.execute(arguments,context);
}",0.2986822840409956
71078,"/** 
 * @return
 */
private static SimpleDateFormat getWeekFormat(){
  if (weekFormat != null)   return weekFormat;
  try {
    Locale defaultLocale=Context.enter().getLocale();
    weekFormat=new SimpleDateFormat(""String_Node_Str"",defaultLocale);
    return weekFormat;
  }
  finally {
    Context.exit();
  }
}","/** 
 * @return
 */
private static SimpleDateFormat getWeekFormat(){
  if (weekFormat == null)   weekFormat=new SimpleDateFormat(""String_Node_Str"",defaultLocale);
  return weekFormat;
}",0.7404426559356136
71079,"/** 
 * @return
 */
private static SimpleDateFormat getAbbrWeekFormat(){
  if (abbrWeekFormat != null)   return abbrWeekFormat;
  try {
    Locale defaultLocale=Context.enter().getLocale();
    abbrWeekFormat=new SimpleDateFormat(""String_Node_Str"",defaultLocale);
    return abbrWeekFormat;
  }
  finally {
    Context.exit();
  }
}","/** 
 * @return
 */
private static SimpleDateFormat getAbbrWeekFormat(){
  if (abbrWeekFormat == null)   abbrWeekFormat=new SimpleDateFormat(""String_Node_Str"",defaultLocale);
  return abbrWeekFormat;
}",0.7504690431519699
71080,"/** 
 * @return
 */
private static SimpleDateFormat getAbbrMonthFormat(){
  if (abbrMonthFormat != null)   return abbrMonthFormat;
  try {
    Locale defaultLocale=Context.enter().getLocale();
    abbrMonthFormat=new SimpleDateFormat(""String_Node_Str"",defaultLocale);
    return abbrMonthFormat;
  }
  finally {
    Context.exit();
  }
}","/** 
 * @return
 */
private static SimpleDateFormat getAbbrMonthFormat(){
  if (abbrMonthFormat == null)   abbrMonthFormat=new SimpleDateFormat(""String_Node_Str"",defaultLocale);
  return abbrMonthFormat;
}",0.7527675276752768
71081,"public Object execute(Object[] arguments) throws BirtException {
  return this.executor.execute(arguments);
}","public Object execute(Object[] arguments,IScriptFunctionContext context) throws BirtException {
  return this.executor.execute(arguments,context);
}",0.8482490272373541
71082,"protected void prepareDesign(){
  ReportRunnable runnable=executionContext.getRunnable();
  if (!runnable.prepared) {
    ReportDesignHandle reportDesign=executionContext.getDesign();
    ScriptedDesignSearcher searcher=new ScriptedDesignSearcher(reportDesign);
    searcher.apply(reportDesign);
    boolean hasOnprepare=searcher.hasOnPrepareScript();
    if (hasOnprepare) {
      ReportRunnable newRunnable=executionContext.getRunnable().cloneRunnable();
      ReportDesignHandle newDesign=newRunnable.designHandle;
      ScriptedDesignVisitor visitor=new ScriptedDesignHandler(newDesign,executionContext);
      visitor.apply(newDesign.getRoot());
      newRunnable.setPrepared(true);
      executionContext.updateRunnable(newRunnable);
    }
  }
}","protected void prepareDesign(){
  ReportRunnable runnable=executionContext.getRunnable();
  if (!runnable.prepared) {
    ReportDesignHandle reportDesign=executionContext.getDesign();
    ScriptedDesignSearcher searcher=new ScriptedDesignSearcher(reportDesign);
    searcher.apply(reportDesign);
    boolean hasOnprepare=searcher.hasOnPrepareScript();
    if (hasOnprepare) {
      ReportRunnable newRunnable=executionContext.getRunnable().cloneRunnable();
      executionContext.updateRunnable(newRunnable);
      ReportDesignHandle newDesign=newRunnable.designHandle;
      ScriptedDesignVisitor visitor=new ScriptedDesignHandler(newDesign,executionContext);
      visitor.apply(newDesign.getRoot());
      newRunnable.setPrepared(true);
    }
  }
}",0.9307589880159788
71083,"public void startPage(IPageContent page){
  emitter.startPage(page);
}","public void startPage(IPageContent page) throws BirtException {
  emitter.startPage(page);
}",0.8641975308641975
71084,"public void startContent(IContent content){
  emitter.startContent(content);
}","public void startContent(IContent content) throws BirtException {
  emitter.startContent(content);
}",0.8764044943820225
71085,"public void endTable(ITableContent table){
  emitter.endTable(table);
}","public void endTable(ITableContent table) throws BirtException {
  emitter.endTable(table);
}",0.8658536585365854
71086,"public void startForeign(IForeignContent foreign){
  emitter.startForeign(foreign);
}","public void startForeign(IForeignContent foreign) throws BirtException {
  emitter.startForeign(foreign);
}",0.8854166666666666
71087,"public void endListGroup(IListGroupContent group){
  emitter.endListGroup(group);
}","public void endListGroup(IListGroupContent group) throws BirtException {
  emitter.endListGroup(group);
}",0.8829787234042553
71088,"public void startGroup(IGroupContent group){
  emitter.startGroup(group);
}","public void startGroup(IGroupContent group) throws BirtException {
  emitter.startGroup(group);
}",0.872093023255814
71089,"public void startLabel(ILabelContent label){
  emitter.startLabel(label);
}","public void startLabel(ILabelContent label) throws BirtException {
  emitter.startLabel(label);
}",0.872093023255814
71090,"public void startTableGroup(ITableGroupContent group){
  emitter.startTableGroup(group);
}","public void startTableGroup(ITableGroupContent group) throws BirtException {
  emitter.startTableGroup(group);
}",0.8910891089108911
71091,"public void endContainer(IContainerContent container){
  emitter.endContainer(container);
}","public void endContainer(IContainerContent container) throws BirtException {
  emitter.endContainer(container);
}",0.8921568627450981
71092,"public void endContent(IContent content){
  emitter.endContent(content);
}","public void endContent(IContent content) throws BirtException {
  emitter.endContent(content);
}",0.8705882352941177
71093,"public void end(IReportContent report){
  emitter.end(report);
}","public void end(IReportContent report) throws BirtException {
  emitter.end(report);
}",0.8533333333333334
71094,"public void startImage(IImageContent image){
  emitter.startImage(image);
}","public void startImage(IImageContent image) throws BirtException {
  emitter.startImage(image);
}",0.872093023255814
71095,"public void startTable(ITableContent table){
  emitter.startTable(table);
}","public void startTable(ITableContent table) throws BirtException {
  emitter.startTable(table);
}",0.872093023255814
71096,"public void startContainer(IContainerContent container){
  emitter.startContainer(container);
}","public void startContainer(IContainerContent container) throws BirtException {
  emitter.startContainer(container);
}",0.8962264150943396
71097,"public void endGroup(IGroupContent group){
  emitter.endGroup(group);
}","public void endGroup(IGroupContent group) throws BirtException {
  emitter.endGroup(group);
}",0.8658536585365854
71098,"public void startData(IDataContent data){
  emitter.startData(data);
}","public void startData(IDataContent data) throws BirtException {
  emitter.startData(data);
}",0.8641975308641975
71099,"public void endTableGroup(ITableGroupContent group){
  emitter.endTableGroup(group);
}","public void endTableGroup(ITableGroupContent group) throws BirtException {
  emitter.endTableGroup(group);
}",0.8865979381443299
71100,"public void startRow(IRowContent row){
  emitter.startRow(row);
}","public void startRow(IRowContent row) throws BirtException {
  emitter.startRow(row);
}",0.8552631578947368
71101,"public void endListBand(IListBandContent listBand){
  emitter.endListBand(listBand);
}","public void endListBand(IListBandContent listBand) throws BirtException {
  emitter.endListBand(listBand);
}",0.8865979381443299
71102,"public void endTableBand(ITableBandContent band){
  emitter.endTableBand(band);
}","public void endTableBand(ITableBandContent band) throws BirtException {
  emitter.endTableBand(band);
}",0.8804347826086957
71103,"public void startListGroup(IListGroupContent group){
  emitter.startListGroup(group);
}","public void startListGroup(IListGroupContent group) throws BirtException {
  emitter.startListGroup(group);
}",0.8877551020408163
71104,"public void start(IReportContent report){
  emitter.start(report);
}","public void start(IReportContent report) throws BirtException {
  emitter.start(report);
}",0.8607594936708861
71105,"public void endRow(IRowContent row){
  emitter.endRow(row);
}","public void endRow(IRowContent row) throws BirtException {
  emitter.endRow(row);
}",0.8472222222222222
71106,"public void startCell(ICellContent cell){
  emitter.startCell(cell);
}","public void startCell(ICellContent cell) throws BirtException {
  emitter.startCell(cell);
}",0.8641975308641975
71107,"public void startAutoText(IAutoTextContent autoText){
  emitter.startAutoText(autoText);
}","public void startAutoText(IAutoTextContent autoText) throws BirtException {
  emitter.startAutoText(autoText);
}",0.8910891089108911
71108,"public void startList(IListContent list){
  emitter.startList(list);
}","public void startList(IListContent list) throws BirtException {
  emitter.startList(list);
}",0.8641975308641975
71109,"public void startTableBand(ITableBandContent band){
  emitter.startTableBand(band);
}","public void startTableBand(ITableBandContent band) throws BirtException {
  emitter.startTableBand(band);
}",0.8854166666666666
71110,"public void startListBand(IListBandContent listBand){
  emitter.startListBand(listBand);
}","public void startListBand(IListBandContent listBand) throws BirtException {
  emitter.startListBand(listBand);
}",0.8910891089108911
71111,"public void endCell(ICellContent cell){
  emitter.endCell(cell);
}","public void endCell(ICellContent cell) throws BirtException {
  emitter.endCell(cell);
}",0.8571428571428571
71112,"public void endList(IListContent list){
  emitter.endList(list);
}","public void endList(IListContent list) throws BirtException {
  emitter.endList(list);
}",0.8571428571428571
71113,"public void startText(ITextContent text){
  emitter.startText(text);
}","public void startText(ITextContent text) throws BirtException {
  emitter.startText(text);
}",0.8641975308641975
71114,"public void endPage(IPageContent page){
  emitter.endPage(page);
}","public void endPage(IPageContent page) throws BirtException {
  emitter.endPage(page);
}",0.8571428571428571
71115,"/** 
 * @throws Exception
 */
public void testNewAggregationOnComputedColumnWithFilter() throws Exception {
  ccName=new String[]{""String_Node_Str""};
  ccExpr=new String[]{""String_Node_Str""};
  List argument=new ArrayList();
  argument.add(new ScriptExpression(""String_Node_Str""));
  ComputedColumn cc1=new ComputedColumn(""String_Node_Str"",""String_Node_Str"",DataType.INTEGER_TYPE,""String_Node_Str"",null,argument);
  ((BaseDataSetDesign)this.dataSet).addComputedColumn(cc1);
  String[] bindingNameRow=new String[5];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  ScriptExpression[] bindingExprRow=new ScriptExpression[]{new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ccName[0],DataType.INTEGER_TYPE)};
  FilterDefinition filter=new FilterDefinition(new ScriptExpression(""String_Node_Str""));
  this.dataSet.addFilter(filter);
  IResultIterator resultIt=this.executeQuery(this.createQuery(null,null,null,null,null,null,null,null,null,bindingNameRow,bindingExprRow));
  printResult(resultIt,bindingNameRow,bindingExprRow);
  checkOutputFile();
}","/** 
 * @throws Exception
 */
public void testNewAggregationOnComputedColumnWithFilter() throws Exception {
  ccName=new String[]{""String_Node_Str""};
  ccExpr=new String[]{""String_Node_Str""};
  List argument=new ArrayList();
  argument.add(new ScriptExpression(""String_Node_Str""));
  ComputedColumn cc1=new ComputedColumn(""String_Node_Str"",""String_Node_Str"",DataType.BOOLEAN_TYPE,""String_Node_Str"",null,argument);
  ((BaseDataSetDesign)this.dataSet).addComputedColumn(cc1);
  String[] bindingNameRow=new String[5];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  ScriptExpression[] bindingExprRow=new ScriptExpression[]{new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ccName[0],0)};
  FilterDefinition filter=new FilterDefinition(new ScriptExpression(""String_Node_Str""));
  this.dataSet.addFilter(filter);
  IResultIterator resultIt=this.executeQuery(this.createQuery(null,null,null,null,null,null,null,null,null,bindingNameRow,bindingExprRow));
  printResult(resultIt,bindingNameRow,bindingExprRow);
  checkOutputFile();
}",0.9873506676036542
71116,"/** 
 * print resultset iterator
 * @param resultIt
 * @param bindingNameRow
 * @param bindingExprRow
 * @throws Exception
 */
private void printResult(IResultIterator resultIt,String[] bindingNameRow,ScriptExpression[] bindingExprRow) throws Exception {
  String str=""String_Node_Str"";
  for (int i=0; i < bindingNameRow.length; i++) {
    str+=bindingExprRow[i].getText().replaceAll(""String_Node_Str"",""String_Node_Str"");
    str+=""String_Node_Str"";
  }
  testPrintln(str);
  while (resultIt.next()) {
    str=""String_Node_Str"";
    for (int i=0; i < bindingNameRow.length; i++) {
      str+=""String_Node_Str"";
      if (resultIt.getValue(bindingNameRow[i]) == null)       str+=""String_Node_Str"";
 else       str+=(int)Double.parseDouble(resultIt.getValue(bindingNameRow[i]).toString());
      str+=""String_Node_Str"";
    }
    testPrintln(str);
  }
}","/** 
 * print resultset iterator
 * @param resultIt
 * @param bindingNameRow
 * @param bindingExprRow
 * @throws Exception
 */
private void printResult(IResultIterator resultIt,String[] bindingNameRow,ScriptExpression[] bindingExprRow) throws Exception {
  String str=""String_Node_Str"";
  for (int i=0; i < bindingNameRow.length; i++) {
    str+=bindingExprRow[i].getText().replaceAll(""String_Node_Str"",""String_Node_Str"");
    str+=""String_Node_Str"";
  }
  testPrintln(str);
  while (resultIt.next()) {
    str=""String_Node_Str"";
    for (int i=0; i < bindingNameRow.length; i++) {
      str+=""String_Node_Str"";
      if (resultIt.getValue(bindingNameRow[i]) == null)       str+=""String_Node_Str"";
 else       str+=(resultIt.getValue(bindingNameRow[i]) instanceof Double) ? (int)Double.parseDouble(resultIt.getValue(bindingNameRow[i]).toString()) : resultIt.getValue(bindingNameRow[i]);
      str+=""String_Node_Str"";
    }
    testPrintln(str);
  }
}",0.9345172031076582
71117,"public boolean next() throws BirtException {
  checkStarted();
  if (this.columnValueMap == null)   return false;
  currRowIndex++;
  readCurrentRow();
  return this.columnValueMap != null && this.columnValueMap.size() > 0;
}","public boolean next() throws BirtException {
  checkStarted();
  if (this.columnValueMap == null)   return false;
  if (lastRowIndex < currRowIndex) {
    currRowIndex++;
    readCurrentRow();
  }
 else {
    lastRowIndex=currRowIndex - 1;
  }
  return this.columnValueMap != null && this.columnValueMap.size() > 0;
}",0.8302583025830258
71118,"/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CacheResultIterator(String tempDir,IQueryResults queryResults) throws DataException {
  Object[] params={tempDir,queryResults.getID()};
  logger.entering(CacheResultIterator.class.getName(),""String_Node_Str"",params);
  this.columnValueMap=new HashMap();
  this.currRowIndex=-1;
  this.queryResults=queryResults;
  try {
    createCacheInputStream(tempDir);
    resultClass=new ResultClass(this.metaInputStream);
    rowCount=IOUtil.readInt(rowInputStream);
    if (rowCount == -1)     rowCount=Integer.MAX_VALUE;
    int columnSize=IOUtil.readInt(rowInputStream);
    columnList=new ArrayList();
    for (int i=0; i < columnSize; i++) {
      columnList.add(IOUtil.readObject(rowInputStream,DataEngineSession.getCurrentClassLoader()));
    }
    logger.exiting(CacheResultIterator.class.getName(),""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    throw new DataException(ResourceConstants.OPEN_CACHE_TEMPFILE_ERROR);
  }
catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}","/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CacheResultIterator(String tempDir,IQueryResults queryResults) throws DataException {
  Object[] params={tempDir,queryResults.getID()};
  logger.entering(CacheResultIterator.class.getName(),""String_Node_Str"",params);
  this.columnValueMap=new HashMap();
  this.currRowIndex=-1;
  this.lastRowIndex=this.currRowIndex - 1;
  this.queryResults=queryResults;
  try {
    createCacheInputStream(tempDir);
    resultClass=new ResultClass(this.metaInputStream);
    rowCount=IOUtil.readInt(rowInputStream);
    if (rowCount == -1)     rowCount=Integer.MAX_VALUE;
    int columnSize=IOUtil.readInt(rowInputStream);
    columnList=new ArrayList();
    for (int i=0; i < columnSize; i++) {
      columnList.add(IOUtil.readObject(rowInputStream,DataEngineSession.getCurrentClassLoader()));
    }
    logger.exiting(CacheResultIterator.class.getName(),""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    throw new DataException(ResourceConstants.OPEN_CACHE_TEMPFILE_ERROR);
  }
catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}",0.981230903535574
71119,"public Object getValue(String name) throws BirtException {
  return columnValueMap.get(name);
}","public Object getValue(String name) throws BirtException {
  if (isBeforeFirst()) {
    this.next();
    this.lastRowIndex=this.currRowIndex;
  }
  return columnValueMap.get(name);
}",0.6859205776173285
71120,"protected void updateRtLFlag() throws EngineException {
  if (renderOptions == null)   return;
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null)   return;
  ReportDesignHandle handle=(ReportDesignHandle)runnable.getDesignHandle();
  if (handle != null) {
    Object bidiFlag=renderOptions.getOption(IRenderOption.RTL_FLAG);
    if (Boolean.TRUE.equals(bidiFlag)) {
      String bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
      try {
        handle.setBidiOrientation(bidiOrientation);
        updateBidiStyle(bidiOrientation);
      }
 catch (      SemanticException e) {
        log.log(Level.WARNING,""String_Node_Str"",e);
        throw new EngineException(""String_Node_Str"");
      }
    }
 else     if (handle.isDirectionRTL()) {
      renderOptions.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
      IRenderOption renderOptions2=executionContext.getRenderOption();
      if (renderOptions2 != null) {
        renderOptions2.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
        executionContext.setRenderOption(renderOptions2);
      }
    }
  }
}","protected void updateRtLFlag() throws EngineException {
  if (renderOptions == null)   return;
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null)   return;
  ReportDesignHandle handle=(ReportDesignHandle)runnable.getDesignHandle();
  if (handle != null) {
    Object bidiFlag=renderOptions.getOption(IRenderOption.RTL_FLAG);
    if (Boolean.TRUE.equals(bidiFlag)) {
      if (!handle.isDirectionRTL()) {
        updateBidiStyle(true);
      }
    }
 else     if (Boolean.FALSE.equals(bidiFlag)) {
      if (handle.isDirectionRTL()) {
        updateBidiStyle(false);
      }
    }
  }
}",0.561525129982669
71121,"protected void updateBidiStyle(String bidiOrientation){
}","private void updateBidiStyle(boolean isRtl){
  Report report=executionContext.getReport();
  AbstractStyle rootStyle=(AbstractStyle)report.getStyles().get(report.getRootStyleName());
  if (rootStyle != null) {
    rootStyle.setDirection(isRtl ? DesignChoiceConstants.BIDI_DIRECTION_RTL : DesignChoiceConstants.BIDI_DIRECTION_LTR);
  }
}",0.0458015267175572
71122,"void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  updateRtLFlag();
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    LayoutPageHandler layoutHandler=new LayoutPageHandler();
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      PDFLayoutEmitterProxy pdfLayoutEmitter=new PDFLayoutEmitterProxy(executor,emitter,renderOptions,executionContext.getLocale(),0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}","void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    LayoutPageHandler layoutHandler=new LayoutPageHandler();
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      PDFLayoutEmitterProxy pdfLayoutEmitter=new PDFLayoutEmitterProxy(executor,emitter,renderOptions,executionContext.getLocale(),0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}",0.9816481994459834
71123,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_TEXT_FORMAT);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  boolean isLabelEnabled=getAxisForProcessing().getLabel().isVisible();
  Group grpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    layout.marginWidth=0;
    layout.marginHeight=10;
    grpLabel.setLayout(layout);
    grpLabel.setText(Messages.getString(""String_Node_Str""));
    grpLabel.setEnabled(isLabelEnabled);
  }
  if (axisType == AngleType.Z) {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isPositionEnabled=false;
    attributesContext.isVisibilityEnabled=false;
    attributesContext.isFontEnabled=false;
    attributesContext.isFontAlignmentEnabled=false;
    lacLabel=new LabelAttributesComposite(grpLabel,SWT.NONE,getContext(),attributesContext,null,getAxisForProcessing().getLabelPosition(),getAxisForProcessing().getLabel(),getChart().getUnits());
  }
 else {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isVisibilityEnabled=false;
    attributesContext.isFontEnabled=false;
    attributesContext.isFontAlignmentEnabled=false;
    lacLabel=new LabelAttributesComposite(grpLabel,SWT.NONE,getContext(),attributesContext,null,getAxisForProcessing().getLabelPosition(),getAxisForProcessing().getLabel(),getChart().getUnits(),getPositionScope());
  }
  GridData gdLACLabel=new GridData(GridData.FILL_HORIZONTAL);
  gdLACLabel.horizontalSpan=2;
  lacLabel.setLayoutData(gdLACLabel);
  lacLabel.addListener(this);
  lacLabel.setEnabled(isLabelEnabled);
  Composite cmpOther=new Composite(grpLabel,SWT.NONE);
{
    GridLayout glCmpOther=new GridLayout();
    glCmpOther.numColumns=2;
    glCmpOther.marginWidth=0;
    glCmpOther.marginHeight=0;
    cmpOther.setLayout(glCmpOther);
  }
  Label lblInterval=new Label(cmpOther,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalIndent=10;
    lblInterval.setLayoutData(gd);
    lblInterval.setText(Messages.getString(""String_Node_Str""));
    lblInterval.setEnabled(isLabelEnabled);
  }
  iscInterval=new Spinner(cmpOther,SWT.BORDER);
{
    iscInterval.setMinimum(1);
    iscInterval.setSelection(getAxisForProcessing().getInterval());
    GridData gd=new GridData();
    gd.widthHint=135;
    iscInterval.setLayoutData(gd);
    iscInterval.addSelectionListener(this);
    iscInterval.setEnabled(isLabelEnabled);
  }
{
    Label lbEllipsis=new Label(cmpOther,SWT.NONE);
{
      GridData gd=new GridData();
      gd.horizontalIndent=10;
      lbEllipsis.setLayoutData(gd);
      lbEllipsis.setText(Messages.getString(""String_Node_Str""));
      lbEllipsis.setEnabled(true);
    }
    iscEllipsis=new Spinner(cmpOther,SWT.BORDER);
{
      iscEllipsis.setMinimum(0);
      GridData gd=new GridData(GridData.FILL_BOTH);
      iscEllipsis.setLayoutData(gd);
      iscEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
      iscEllipsis.addSelectionListener(this);
      iscEllipsis.setEnabled(getAxisForProcessing().getType() == AxisType.TEXT_LITERAL);
      iscEllipsis.setSelection(getAxisForProcessing().getLabel().getEllipsis());
    }
  }
  if (false) {
    chkWithinAxes=new Button(grpLabel,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      gd.horizontalIndent=10;
      chkWithinAxes.setLayoutData(gd);
      chkWithinAxes.setText(""String_Node_Str"");
      chkWithinAxes.addSelectionListener(this);
      chkWithinAxes.setEnabled(!(getAxisForProcessing().isCategoryAxis() || getAxisForProcessing().getType() == AxisType.TEXT_LITERAL));
      chkWithinAxes.setSelection(getAxisForProcessing().isLabelWithinAxes());
    }
  }
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_TEXT_FORMAT);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  boolean isLabelEnabled=getAxisForProcessing().getLabel().isVisible();
  Group grpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    layout.marginWidth=0;
    layout.marginHeight=10;
    grpLabel.setLayout(layout);
    grpLabel.setText(Messages.getString(""String_Node_Str""));
    grpLabel.setEnabled(isLabelEnabled);
  }
  if (axisType == AngleType.Z) {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isPositionEnabled=false;
    attributesContext.isVisibilityEnabled=false;
    attributesContext.isFontEnabled=false;
    attributesContext.isFontAlignmentEnabled=false;
    lacLabel=new LabelAttributesComposite(grpLabel,SWT.NONE,getContext(),attributesContext,null,getAxisForProcessing().getLabelPosition(),getAxisForProcessing().getLabel(),getChart().getUnits());
  }
 else {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isVisibilityEnabled=false;
    attributesContext.isFontEnabled=false;
    attributesContext.isFontAlignmentEnabled=false;
    lacLabel=new LabelAttributesComposite(grpLabel,SWT.NONE,getContext(),attributesContext,null,getAxisForProcessing().getLabelPosition(),getAxisForProcessing().getLabel(),getChart().getUnits(),getPositionScope());
  }
  GridData gdLACLabel=new GridData(GridData.FILL_HORIZONTAL);
  gdLACLabel.horizontalSpan=2;
  lacLabel.setLayoutData(gdLACLabel);
  lacLabel.addListener(this);
  lacLabel.setEnabled(isLabelEnabled);
  Composite cmpOther=new Composite(grpLabel,SWT.NONE);
{
    GridLayout glCmpOther=new GridLayout();
    glCmpOther.numColumns=2;
    glCmpOther.marginWidth=0;
    glCmpOther.marginHeight=0;
    cmpOther.setLayout(glCmpOther);
  }
  Label lblInterval=new Label(cmpOther,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalIndent=10;
    lblInterval.setLayoutData(gd);
    lblInterval.setText(Messages.getString(""String_Node_Str""));
    lblInterval.setEnabled(isLabelEnabled);
  }
  iscInterval=new Spinner(cmpOther,SWT.BORDER);
{
    iscInterval.setMinimum(1);
    iscInterval.setSelection(getAxisForProcessing().getInterval());
    GridData gd=new GridData();
    gd.widthHint=135;
    iscInterval.setLayoutData(gd);
    iscInterval.addSelectionListener(this);
    iscInterval.setEnabled(isLabelEnabled);
  }
{
    Label lbEllipsis=new Label(cmpOther,SWT.NONE);
{
      GridData gd=new GridData();
      gd.horizontalIndent=10;
      lbEllipsis.setLayoutData(gd);
      lbEllipsis.setText(Messages.getString(""String_Node_Str""));
      lbEllipsis.setEnabled(true);
    }
    iscEllipsis=new Spinner(cmpOther,SWT.BORDER);
{
      iscEllipsis.setMinimum(0);
      GridData gd=new GridData(GridData.FILL_BOTH);
      iscEllipsis.setLayoutData(gd);
      iscEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
      iscEllipsis.addSelectionListener(this);
      iscEllipsis.setEnabled(getAxisForProcessing().getType() == AxisType.TEXT_LITERAL || getAxisForProcessing().isCategoryAxis());
      iscEllipsis.setSelection(getAxisForProcessing().getLabel().getEllipsis());
    }
  }
  if (false) {
    chkWithinAxes=new Button(grpLabel,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      gd.horizontalIndent=10;
      chkWithinAxes.setLayoutData(gd);
      chkWithinAxes.setText(""String_Node_Str"");
      chkWithinAxes.addSelectionListener(this);
      chkWithinAxes.setEnabled(!(getAxisForProcessing().isCategoryAxis() || getAxisForProcessing().getType() == AxisType.TEXT_LITERAL));
      chkWithinAxes.setSelection(getAxisForProcessing().isLabelWithinAxes());
    }
  }
  return cmpContent;
}",0.9945438396142622
71124,"protected void propertyChange(Map info){
  boolean invalidate=false;
  if (info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP) instanceof ReportDesignHandle) {
    String newOrientation=((ReportDesignHandle)info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP)).getBidiOrientation();
    boolean mirrored=DesignChoiceConstants.BIDI_DIRECTION_RTL.equals(newOrientation);
    this.getViewer().flush();
    Composite parent=getViewer().getControl().getParent();
    BidiUIUtils.INSTANCE.applyOrientation(parent,mirrored);
    parent.layout(true);
    getViewer().setProperty(IReportGraphicConstants.REPORT_BIDIORIENTATION_PROPERTY,newOrientation);
    invalidate=true;
  }
  super.propertyChange(info);
  if (info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP) != null) {
    if (info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP) instanceof ReportDesignHandle) {
      getViewer().setProperty(IReportGraphicConstants.REPORT_LAYOUT_PROPERTY,((ReportDesignHandle)info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP)).getLayoutPreference());
      invalidate=true;
    }
  }
  if (invalidate) {
    getFigure().invalidateTree();
    getFigure().revalidate();
  }
  if (info.get(IMasterPageModel.TOP_MARGIN_PROP) != null || info.get(IMasterPageModel.BOTTOM_MARGIN_PROP) != null || info.get(IMasterPageModel.LEFT_MARGIN_PROP) != null || info.get(IMasterPageModel.RIGHT_MARGIN_PROP) != null || info.get(IMasterPageModel.TYPE_PROP) != null || info.get(IMasterPageModel.WIDTH_PROP) != null || info.get(IMasterPageModel.HEIGHT_PROP) != null || info.get(IMasterPageModel.ORIENTATION_PROP) != null) {
    SlotHandle slotHandle=((ModuleHandle)getModel()).getMasterPages();
    Iterator iter=slotHandle.iterator();
    SimpleMasterPageHandle masterPageHandle=(SimpleMasterPageHandle)iter.next();
    Dimension size=getMasterPageSize(masterPageHandle);
    Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
    ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
    figure.setBorder(new ReportDesignMarginBorder(getMasterPageInsets(masterPageHandle)));
    figure.setBounds(bounds.getCopy());
  }
}","protected void propertyChange(Map info){
  boolean invalidate=false;
  if (info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP) instanceof ReportDesignHandle) {
    String newOrientation=((ReportDesignHandle)info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP)).getBidiOrientation();
    boolean mirrored=DesignChoiceConstants.BIDI_DIRECTION_RTL.equals(newOrientation);
    this.getViewer().flush();
    Composite parent=getViewer().getControl().getParent();
    BidiUIUtils.INSTANCE.applyOrientation(parent,mirrored);
    parent.layout(true);
    getViewer().setProperty(IReportGraphicConstants.REPORT_BIDIORIENTATION_PROPERTY,newOrientation);
    invalidate=true;
  }
  super.propertyChange(info);
  if (info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP) != null) {
    if (info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP) instanceof ReportDesignHandle) {
      getViewer().setProperty(IReportGraphicConstants.REPORT_LAYOUT_PROPERTY,((ReportDesignHandle)info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP)).getLayoutPreference());
      invalidate=true;
    }
  }
  if (invalidate) {
    getFigure().invalidateTree();
    getFigure().revalidate();
  }
  if (getModel() instanceof ReportDesignHandle) {
    if (info.get(IMasterPageModel.TOP_MARGIN_PROP) != null || info.get(IMasterPageModel.BOTTOM_MARGIN_PROP) != null || info.get(IMasterPageModel.LEFT_MARGIN_PROP) != null || info.get(IMasterPageModel.RIGHT_MARGIN_PROP) != null || info.get(IMasterPageModel.TYPE_PROP) != null || info.get(IMasterPageModel.WIDTH_PROP) != null || info.get(IMasterPageModel.HEIGHT_PROP) != null || info.get(IMasterPageModel.ORIENTATION_PROP) != null) {
      SlotHandle slotHandle=((ModuleHandle)getModel()).getMasterPages();
      Iterator iter=slotHandle.iterator();
      SimpleMasterPageHandle masterPageHandle=(SimpleMasterPageHandle)iter.next();
      Dimension size=getMasterPageSize(masterPageHandle);
      Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
      ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
      figure.setBorder(new ReportDesignMarginBorder(getMasterPageInsets(masterPageHandle)));
      figure.setBounds(bounds.getCopy());
    }
  }
}",0.9828703703703704
71125,"public void testSourceQueryIV1withDistinct() throws Exception {
  this.genNotDistinctBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  QueryDefinition baseQuery=new QueryDefinition();
  baseQuery.setQueryResultsID(this.queryResultID);
  QueryDefinition query=new QueryDefinition();
  query.setSourceQuery(baseQuery);
  query.setDistinctValue(true);
  query.setStartingRow(1);
  ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
  query.addFilter(new FilterDefinition(filterExpr));
  SortDefinition sd=new SortDefinition();
  sd.setExpression(""String_Node_Str"");
  sd.setSortDirection(ISortDefinition.SORT_ASC);
  query.addSort(sd);
  _preBasicIV2(query);
  this.closeArchiveReader();
  this.checkOutputFile();
}","public void testSourceQueryIV1withDistinct() throws Exception {
  this.genNotDistinctBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  QueryDefinition baseQuery=new QueryDefinition();
  baseQuery.setQueryResultsID(this.queryResultID);
  QueryDefinition query=new QueryDefinition();
  query.setSourceQuery(baseQuery);
  query.setDistinctValue(true);
  query.setStartingRow(1);
  ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
  query.addFilter(new FilterDefinition(filterExpr));
  SortDefinition sd=new SortDefinition();
  sd.setExpression(""String_Node_Str"");
  sd.setSortDirection(ISortDefinition.SORT_ASC);
  query.addSort(sd);
  _preBasicIV3(query,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  this.closeArchiveReader();
  this.checkOutputFile();
}",0.9615384615384616
71126,"public void testSourceQueryIV1withDistinct1() throws Exception {
  this.genNotDistinctBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  QueryDefinition baseQuery=new QueryDefinition();
  baseQuery.setQueryResultsID(this.queryResultID);
  QueryDefinition query=new QueryDefinition();
  query.setSourceQuery(baseQuery);
  query.setDistinctValue(true);
  query.setMaxRows(3);
  ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
  query.addFilter(new FilterDefinition(filterExpr));
  SortDefinition sd=new SortDefinition();
  sd.setExpression(""String_Node_Str"");
  sd.setSortDirection(ISortDefinition.SORT_ASC);
  query.addSort(sd);
  _preBasicIV2(query);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  baseQuery=new QueryDefinition();
  baseQuery.setQueryResultsID(this.queryResultID);
  query=new QueryDefinition();
  query.setSourceQuery(baseQuery);
  query.setDistinctValue(false);
  query.setMaxRows(3);
  filterExpr=new ScriptExpression(""String_Node_Str"");
  query.addFilter(new FilterDefinition(filterExpr));
  sd=new SortDefinition();
  sd.setExpression(""String_Node_Str"");
  sd.setSortDirection(ISortDefinition.SORT_ASC);
  query.addSort(sd);
  _preBasicIV2(query);
  this.closeArchiveReader();
  this.checkOutputFile();
}","public void testSourceQueryIV1withDistinct1() throws Exception {
  this.genNotDistinctBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  QueryDefinition baseQuery=new QueryDefinition();
  baseQuery.setQueryResultsID(this.queryResultID);
  QueryDefinition query=new QueryDefinition();
  query.setSourceQuery(baseQuery);
  query.setDistinctValue(true);
  query.setMaxRows(3);
  ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
  query.addFilter(new FilterDefinition(filterExpr));
  SortDefinition sd=new SortDefinition();
  sd.setExpression(""String_Node_Str"");
  sd.setSortDirection(ISortDefinition.SORT_ASC);
  query.addSort(sd);
  _preBasicIV3(query,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  baseQuery=new QueryDefinition();
  baseQuery.setQueryResultsID(this.queryResultID);
  query=new QueryDefinition();
  query.setSourceQuery(baseQuery);
  query.setDistinctValue(false);
  query.setMaxRows(3);
  filterExpr=new ScriptExpression(""String_Node_Str"");
  query.addFilter(new FilterDefinition(filterExpr));
  sd=new SortDefinition();
  sd.setExpression(""String_Node_Str"");
  sd.setSortDirection(ISortDefinition.SORT_ASC);
  query.addSort(sd);
  _preBasicIV3(query,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  this.closeArchiveReader();
  this.checkOutputFile();
}",0.9524133242692048
71127,"public void testSourceQueryIV1withDistinct2() throws Exception {
  this.genNotDistinctBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  QueryDefinition baseQuery=new QueryDefinition();
  baseQuery.setQueryResultsID(this.queryResultID);
  QueryDefinition query=new QueryDefinition();
  query.setSourceQuery(baseQuery);
  query.setDistinctValue(true);
  query.setStartingRow(1);
  ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
  query.addFilter(new FilterDefinition(filterExpr));
  SortDefinition sd=new SortDefinition();
  sd.setExpression(""String_Node_Str"");
  sd.setSortDirection(ISortDefinition.SORT_ASC);
  query.addSort(sd);
  _preBasicIV2(query);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  baseQuery=new QueryDefinition();
  baseQuery.setQueryResultsID(this.queryResultID);
  query=new QueryDefinition();
  query.setSourceQuery(baseQuery);
  query.setDistinctValue(true);
  query.setStartingRow(1);
  query.setMaxRows(4);
  filterExpr=new ScriptExpression(""String_Node_Str"");
  query.addFilter(new FilterDefinition(filterExpr));
  sd=new SortDefinition();
  sd.setExpression(""String_Node_Str"");
  sd.setSortDirection(ISortDefinition.SORT_ASC);
  query.addSort(sd);
  _preBasicIV2(query);
  this.closeArchiveReader();
  this.checkOutputFile();
}","public void testSourceQueryIV1withDistinct2() throws Exception {
  this.genNotDistinctBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  QueryDefinition baseQuery=new QueryDefinition();
  baseQuery.setQueryResultsID(this.queryResultID);
  QueryDefinition query=new QueryDefinition();
  query.setSourceQuery(baseQuery);
  query.setDistinctValue(true);
  query.setStartingRow(1);
  ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
  query.addFilter(new FilterDefinition(filterExpr));
  SortDefinition sd=new SortDefinition();
  sd.setExpression(""String_Node_Str"");
  sd.setSortDirection(ISortDefinition.SORT_ASC);
  query.addSort(sd);
  _preBasicIV3(query,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  baseQuery=new QueryDefinition();
  baseQuery.setQueryResultsID(this.queryResultID);
  query=new QueryDefinition();
  query.setSourceQuery(baseQuery);
  query.setDistinctValue(true);
  query.setStartingRow(1);
  query.setMaxRows(4);
  filterExpr=new ScriptExpression(""String_Node_Str"");
  query.addFilter(new FilterDefinition(filterExpr));
  sd=new SortDefinition();
  sd.setExpression(""String_Node_Str"");
  sd.setSortDirection(ISortDefinition.SORT_ASC);
  query.addSort(sd);
  _preBasicIV3(query,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  this.closeArchiveReader();
  this.checkOutputFile();
}",0.9453697534976684
71128,"/** 
 */
public void test_regression_146787(){
  MetaDataDictionary instance=MetaDataDictionary.getInstance();
  PredefinedStyle dataStyle=instance.getPredefinedStyle(""String_Node_Str"");
  assertNotNull(dataStyle);
  boolean data=false;
  List list=instance.getPredefinedStyles();
  for (int i=0; i < list.size(); i++) {
    PredefinedStyle style=(PredefinedStyle)list.get(i);
    if (style.getName().equals(""String_Node_Str""))     data=true;
  }
  assertTrue(data);
}","/** 
 */
public void test_regression_146787(){
  MetaDataDictionary instance=MetaDataDictionary.getInstance();
  PredefinedStyle dataStyle=(PredefinedStyle)instance.getPredefinedStyle(""String_Node_Str"");
  assertNotNull(dataStyle);
  boolean data=false;
  List list=instance.getPredefinedStyles();
  for (int i=0; i < list.size(); i++) {
    PredefinedStyle style=(PredefinedStyle)list.get(i);
    if (style.getName().equals(""String_Node_Str""))     data=true;
  }
  assertTrue(data);
}",0.9821615949632738
71129,"public void startTableGroup(ITableGroupContent group){
  writeGroupToc(group);
}","public void startTableGroup(ITableGroupContent group){
  setGroupToc(group);
}",0.9620253164556962
71130,"public void startTable(ITableContent table){
  adjustInline();
  styles.push(table.getComputedStyle());
  writeBookmark(table);
  writeToc(table);
  increaseTOCLevel(table);
  String caption=table.getCaption();
  if (caption != null) {
    wordWriter.writeCaption(caption);
  }
  if (context.isLastTable()) {
    wordWriter.insertHiddenParagraph();
  }
  int width=WordUtil.convertTo(table.getWidth(),context.getCurrentWidth());
  width=Math.min(width,context.getCurrentWidth());
  wordWriter.startTable(table.getComputedStyle(),width);
  int[] cols=computeTblColumnWidths(table,width);
  wordWriter.writeColumn(cols);
  context.addTable(cols,table.getComputedStyle());
}","public void startTable(ITableContent table){
  adjustInline();
  styles.push(table.getComputedStyle());
  writeBookmark(table);
  Object tableToc=table.getTOC();
  if (tableToc != null) {
    tableTocs.add(new TocInfo(tableToc.toString(),tocLevel));
  }
  increaseTOCLevel(table);
  String caption=table.getCaption();
  if (caption != null) {
    wordWriter.writeCaption(caption);
  }
  if (context.isLastTable()) {
    wordWriter.insertHiddenParagraph();
  }
  int width=WordUtil.convertTo(table.getWidth(),context.getCurrentWidth());
  width=Math.min(width,context.getCurrentWidth());
  wordWriter.startTable(table.getComputedStyle(),width);
  int[] cols=computeTblColumnWidths(table,width);
  wordWriter.writeColumn(cols);
  context.addTable(cols,table.getComputedStyle());
}",0.8253968253968254
71131,"public void startListGroup(IListGroupContent group){
  writeGroupToc(group);
}","public void startListGroup(IListGroupContent group){
  setGroupToc(group);
}",0.961038961038961
71132,"public void startList(IListContent list){
  adjustInline();
  styles.push(list.getComputedStyle());
  writeBookmark(list);
  writeToc(list);
  increaseTOCLevel(list);
  if (context.isLastTable()) {
    wordWriter.insertHiddenParagraph();
  }
  wordWriter.startTable(list.getComputedStyle(),context.getCurrentWidth());
}","public void startList(IListContent list){
  adjustInline();
  styles.push(list.getComputedStyle());
  writeBookmark(list);
  Object listToc=list.getTOC();
  if (listToc != null) {
    tableTocs.add(new TocInfo(listToc.toString(),tocLevel));
  }
  increaseTOCLevel(list);
  if (context.isLastTable()) {
    wordWriter.insertHiddenParagraph();
  }
  wordWriter.startTable(list.getComputedStyle(),context.getCurrentWidth());
}",0.8221024258760108
71133,"public void startListBand(IListBandContent listBand){
  context.startCell();
  wordWriter.startTableRow(-1);
  IStyle style=computeStyle(listBand.getComputedStyle());
  wordWriter.startTableCell(context.getCurrentWidth(),style,null);
}","public void startListBand(IListBandContent listBand){
  context.startCell();
  wordWriter.startTableRow(-1);
  IStyle style=computeStyle(listBand.getComputedStyle());
  wordWriter.startTableCell(context.getCurrentWidth(),style,null);
  writeTableToc();
}",0.9611451942740288
71134,"public void startGroup(IGroupContent group){
  writeGroupToc(group);
}","public void startGroup(IGroupContent group){
  setGroupToc(group);
}",0.9565217391304348
71135,"public void startCell(ICellContent cell){
  rowFilledFlag=true;
  context.startCell();
  int columnId=cell.getColumn();
  List<SpanInfo> spans=context.getSpans(columnId);
  if (spans != null) {
    for (int i=0; i < spans.size(); i++) {
      wordWriter.writeSpanCell(spans.get(i));
    }
  }
  int columnSpan=cell.getColSpan();
  int rowSpan=cell.getRowSpan();
  int cellWidth=context.getCellWidth(columnId,columnSpan);
  IStyle style=computeStyle(cell.getComputedStyle());
  if (rowSpan > 1) {
    context.addSpan(columnId,columnSpan,cellWidth,rowSpan,style);
  }
  SpanInfo info=null;
  if (columnSpan > 1 || rowSpan > 1) {
    info=new SpanInfo(columnId,columnSpan,cellWidth,true,style);
  }
  wordWriter.startTableCell(cellWidth,style,info);
  context.addWidth(getCellWidth(cellWidth,style));
}","public void startCell(ICellContent cell){
  rowFilledFlag=true;
  context.startCell();
  int columnId=cell.getColumn();
  List<SpanInfo> spans=context.getSpans(columnId);
  if (spans != null) {
    for (int i=0; i < spans.size(); i++) {
      wordWriter.writeSpanCell(spans.get(i));
    }
  }
  int columnSpan=cell.getColSpan();
  int rowSpan=cell.getRowSpan();
  int cellWidth=context.getCellWidth(columnId,columnSpan);
  IStyle style=computeStyle(cell.getComputedStyle());
  if (rowSpan > 1) {
    context.addSpan(columnId,columnSpan,cellWidth,rowSpan,style);
  }
  SpanInfo info=null;
  if (columnSpan > 1 || rowSpan > 1) {
    info=new SpanInfo(columnId,columnSpan,cellWidth,true,style);
  }
  wordWriter.startTableCell(cellWidth,style,info);
  context.addWidth(getCellWidth(cellWidth,style));
  writeTableToc();
}",0.9882498453927026
71136,"public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    inForeign=true;
    boolean inlineBrother=!context.isFirstInline();
    context.endInline();
    writeToc(foreign);
    HTML2Content.html2Content(foreign);
    context.startCell();
    if (context.isLastTable()) {
      wordWriter.insertHiddenParagraph();
    }
    wordWriter.startTable(foreign.getComputedStyle(),context.getCurrentWidth());
    wordWriter.startTableRow(-1);
    wordWriter.startTableCell(context.getCurrentWidth(),foreign.getComputedStyle(),null);
    contentVisitor.visitChildren(foreign,null);
    adjustInline();
    wordWriter.endTableCell(context.needEmptyP());
    context.endCell();
    wordWriter.endTableRow();
    wordWriter.endTable();
    context.setLastIsTable(true);
    context.addContainer(true);
    hasPInside=false;
    if (inlineBrother) {
      context.startInline();
    }
    inForeign=false;
  }
 else {
    Object rawValue=foreign.getRawValue();
    String text=rawValue == null ? ""String_Node_Str"" : rawValue.toString();
    writeContent(DocEmitterImpl.NORMAL,text,foreign);
  }
}","public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    inForeign=true;
    boolean inlineBrother=!context.isFirstInline();
    context.endInline();
    HTML2Content.html2Content(foreign);
    context.startCell();
    if (context.isLastTable()) {
      wordWriter.insertHiddenParagraph();
    }
    wordWriter.startTable(foreign.getComputedStyle(),context.getCurrentWidth());
    wordWriter.startTableRow(-1);
    wordWriter.startTableCell(context.getCurrentWidth(),foreign.getComputedStyle(),null);
    writeToc(foreign);
    contentVisitor.visitChildren(foreign,null);
    adjustInline();
    wordWriter.endTableCell(context.needEmptyP());
    context.endCell();
    wordWriter.endTableRow();
    wordWriter.endTable();
    context.setLastIsTable(true);
    context.addContainer(true);
    hasPInside=false;
    if (inlineBrother) {
      context.startInline();
    }
    inForeign=false;
  }
 else {
    Object rawValue=foreign.getRawValue();
    String text=rawValue == null ? ""String_Node_Str"" : rawValue.toString();
    writeContent(DocEmitterImpl.NORMAL,text,foreign);
  }
}",0.9804421768707484
71137,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws IOException, BirtException, DataException {
  Map<?,?> candidateAppContext=new HashMap();
  if (appContext != null)   candidateAppContext.putAll(appContext);
  Map<ReportElementHandle,IQueryDefinition> queryMap=new HashMap<ReportElementHandle,IQueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,candidateAppContext,queryMap,metaMap);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),candidateAppContext),this.toStringArray(measureNames),stopSign);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws IOException, BirtException, DataException {
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  Map<ReportElementHandle,IQueryDefinition> queryMap=new HashMap<ReportElementHandle,IQueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,queryMap,metaMap);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),appContext),this.toStringArray(measureNames),stopSign);
  appContext.clear();
  appContext.putAll(backupAppContext);
}",0.9703260471364024
71138,"/** 
 * Test accept() method.
 */
public void testAccept(){
  Object value=new Object();
  IContentVisitor visitor=new ContentVisitorAdapter();
  Object value1=content.accept(visitor,value);
  assertEquals(value,value1);
  value1=content.accept(visitor,null);
  assertNull(value1);
}","/** 
 * Test accept() method.
 * @throws BirtException 
 */
public void testAccept() throws BirtException {
  Object value=new Object();
  IContentVisitor visitor=new ContentVisitorAdapter();
  Object value1=content.accept(visitor,value);
  assertEquals(value,value1);
  value1=content.accept(visitor,null);
  assertNull(value1);
}",0.9218241042345277
71139,"public Chart fromXml(ByteArrayInputStream byais,boolean bStripHeaders) throws IOException {
  ResourceSet rsChart=new ResourceSetImpl();
  rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put(""String_Node_Str"",new ModelResourceFactoryImpl());
  Resource rChart=rsChart.createResource(URI.createFileURI(""String_Node_Str""));
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  if (bStripHeaders) {
    options.put(XMLResource.OPTION_DECLARE_XML,Boolean.FALSE);
  }
  rChart.load(byais,options);
  return (Chart)rChart.getContents().get(0);
}","public Chart fromXml(ByteArrayInputStream byais,boolean bStripHeaders) throws IOException {
  ResourceSet rsChart=new ResourceSetImpl();
  rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put(""String_Node_Str"",new ModelResourceFactoryImpl());
  Resource rChart=rsChart.createResource(URI.createFileURI(""String_Node_Str""));
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  if (bStripHeaders) {
    options.put(XMLResource.OPTION_DECLARE_XML,Boolean.FALSE);
  }
  try {
    rChart.load(byais,options);
  }
 catch (  IOWrappedException e) {
    if (rChart.getContents() == null || rChart.getContents().isEmpty()) {
      throw e;
    }
  }
  return (Chart)rChart.getContents().get(0);
}",0.8947745168217609
71140,"public CompatibilityStatus checkCompatibility(){
  CrosstabReportItemHandle crosstab=getCrosstab();
  if (crosstab.compStatus < 0) {
    ExtendedItemHandle exhandle=(ExtendedItemHandle)getModelHandle();
    Map illegalContents=exhandle.getIllegalContents();
    if (illegalContents.containsKey(IMeasureViewConstants.DETAIL_PROP)) {
      List detailInfoList=(List)illegalContents.get(IMeasureViewConstants.DETAIL_PROP);
      if (detailInfoList.size() > 0) {
        IllegalContentInfo detailInfo=(IllegalContentInfo)detailInfoList.get(0);
        ExtendedItemHandle oldDetail=(ExtendedItemHandle)detailInfo.getContent();
        if (oldDetail != null) {
          CompatibilityStatus status=new CompatibilityStatus();
          try {
            status.setStatusType(CompatibilityStatus.CONVERT_COMPATIBILITY_TYPE);
            ExtendedItemHandle newDetail=CrosstabExtendedItemFactory.createAggregationCell(getModuleHandle());
            handle.getPropertyHandle(DETAIL_PROP).setValue(newDetail);
            LevelHandle rowLevel=getInnerestLevel(crosstab,ROW_AXIS_TYPE);
            LevelHandle columnLevel=getInnerestLevel(crosstab,COLUMN_AXIS_TYPE);
            if (rowLevel != null) {
              newDetail.setProperty(IAggregationCellConstants.AGGREGATION_ON_ROW_PROP,rowLevel);
            }
            if (columnLevel != null) {
              newDetail.setProperty(IAggregationCellConstants.AGGREGATION_ON_COLUMN_PROP,columnLevel);
            }
            List contents=oldDetail.getContents(ICrosstabCellConstants.CONTENT_PROP);
            for (int i=0; i < contents.size(); i++) {
              ((DesignElementHandle)contents.get(i)).moveTo(newDetail,IAggregationCellConstants.CONTENT_PROP);
            }
          }
 catch (          SemanticException e) {
            List errorList=new ArrayList(1);
            errorList.add(e);
            status.setErrors(errorList);
          }
          return status;
        }
      }
    }
  }
  return COMP_OK_STATUS;
}","public CompatibilityStatus checkCompatibility(){
  CrosstabReportItemHandle crosstab=getCrosstab();
  if (crosstab.compStatus < 0) {
    ExtendedItemHandle exhandle=(ExtendedItemHandle)getModelHandle();
    Map illegalContents=exhandle.getIllegalContents();
    if (illegalContents.containsKey(IMeasureViewConstants.DETAIL_PROP)) {
      List detailInfoList=(List)illegalContents.get(IMeasureViewConstants.DETAIL_PROP);
      if (detailInfoList.size() > 0) {
        IllegalContentInfo detailInfo=(IllegalContentInfo)detailInfoList.get(0);
        ExtendedItemHandle oldDetail=(ExtendedItemHandle)detailInfo.getContent();
        if (oldDetail != null) {
          CompatibilityStatus status=new CompatibilityStatus();
          try {
            status.setStatusType(CompatibilityStatus.CONVERT_COMPATIBILITY_TYPE);
            ExtendedItemHandle newDetail=CrosstabExtendedItemFactory.createAggregationCell(getModuleHandle());
            handle.getPropertyHandle(DETAIL_PROP).setValue(newDetail);
            for (Iterator itr=oldDetail.getPropertyIterator(); itr.hasNext(); ) {
              PropertyHandle propHandle=(PropertyHandle)itr.next();
              String propName=propHandle.getPropertyDefn().getName();
              if (!propHandle.isLocal() || IDesignElementModel.NAME_PROP.equals(propName) || IDesignElementModel.EXTENDS_PROP.equals(propName)|| IExtendedItemModel.EXTENSION_NAME_PROP.equals(propName)|| IExtendedItemModel.EXTENSION_VERSION_PROP.equals(propName)|| ICrosstabCellConstants.CONTENT_PROP.equals(propName)) {
                continue;
              }
              try {
                oldDetail.copyPropertyTo(propName,newDetail);
              }
 catch (              Exception e) {
                logger.log(Level.WARNING,""String_Node_Str"" + propName + ""String_Node_Str"");
              }
            }
            LevelHandle rowLevel=getInnerestLevel(crosstab,ROW_AXIS_TYPE);
            LevelHandle columnLevel=getInnerestLevel(crosstab,COLUMN_AXIS_TYPE);
            if (rowLevel != null) {
              newDetail.setProperty(IAggregationCellConstants.AGGREGATION_ON_ROW_PROP,rowLevel);
            }
            if (columnLevel != null) {
              newDetail.setProperty(IAggregationCellConstants.AGGREGATION_ON_COLUMN_PROP,columnLevel);
            }
            List contents=oldDetail.getContents(ICrosstabCellConstants.CONTENT_PROP);
            for (int i=0; i < contents.size(); i++) {
              ((DesignElementHandle)contents.get(i)).moveTo(newDetail,IAggregationCellConstants.CONTENT_PROP);
            }
          }
 catch (          SemanticException e) {
            List errorList=new ArrayList(1);
            errorList.add(e);
            status.setErrors(errorList);
          }
          return status;
        }
      }
    }
  }
  return COMP_OK_STATUS;
}",0.8253902185223725
71141,"/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 */
public IResultObject[] readData(InputStream bis,int length,StopSign stopSign) throws IOException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (stopSign != null && stopSign.isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (fieldType.isAssignableFrom(Date.class))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IClob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IBlob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=new ObjectInputStream(dis);
        try {
          obs[j]=ois.readObject();
        }
 catch (        Exception e) {
        }
        ois.close();
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}","/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 */
public IResultObject[] readData(InputStream bis,int length,StopSign stopSign) throws IOException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (stopSign != null && stopSign.isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (fieldType.isAssignableFrom(Date.class))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(Clob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(Blob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=new ObjectInputStream(dis);
        try {
          obs[j]=ois.readObject();
        }
 catch (        Exception e) {
        }
        ois.close();
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}",0.9996162701458172
71142,"/** 
 * @param bos
 * @param resultObject
 * @throws IOException
 */
public void writeData(OutputStream bos,IResultObject resultObject) throws IOException {
  byte[] rowsDataBytes;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  for (int j=0; j < columnCount; j++) {
    Object fieldValue=null;
    try {
      fieldValue=resultObject.getFieldValue(j + 1);
    }
 catch (    DataException e) {
    }
    if (fieldValue == null) {
      dos.writeByte(0);
      continue;
    }
 else {
      dos.writeByte(1);
    }
    Class fieldType=typeArray[j];
    if (fieldType.equals(Integer.class))     dos.writeInt(((Integer)fieldValue).intValue());
 else     if (fieldType.equals(Double.class))     dos.writeDouble(((Double)fieldValue).doubleValue());
 else     if (fieldType.equals(BigDecimal.class))     dos.writeUTF(((BigDecimal)fieldValue).toString());
 else     if (Date.class.isAssignableFrom(fieldType))     dos.writeLong(((Date)fieldValue).getTime());
 else     if (fieldType.equals(Boolean.class))     dos.writeBoolean(((Boolean)fieldValue).booleanValue());
 else     if (fieldType.equals(String.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IClob.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IBlob.class)) {
      byte[] bytes=(byte[])fieldValue;
      if (bytes == null || bytes.length == 0) {
        IOUtil.writeInt(dos,0);
      }
 else {
        IOUtil.writeInt(dos,bytes.length);
        dos.write((byte[])fieldValue);
      }
    }
 else     if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
      if (!(fieldValue instanceof Serializable))       fieldValue=fieldValue.toString();
      ObjectOutputStream oo=new ObjectOutputStream(dos);
      oo.writeObject(fieldValue);
      oo.close();
    }
  }
  dos.flush();
  rowsDataBytes=baos.toByteArray();
  IOUtil.writeInt(bos,rowsDataBytes.length);
  bos.write(rowsDataBytes);
  rowsDataBytes=null;
  dos=null;
  baos=null;
}","/** 
 * @param bos
 * @param resultObject
 * @throws IOException
 */
public void writeData(OutputStream bos,IResultObject resultObject) throws IOException {
  byte[] rowsDataBytes;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  for (int j=0; j < columnCount; j++) {
    Object fieldValue=null;
    try {
      fieldValue=resultObject.getFieldValue(j + 1);
    }
 catch (    DataException e) {
    }
    if (fieldValue == null) {
      dos.writeByte(0);
      continue;
    }
 else {
      dos.writeByte(1);
    }
    Class fieldType=typeArray[j];
    if (fieldType.equals(Integer.class))     dos.writeInt(((Integer)fieldValue).intValue());
 else     if (fieldType.equals(Double.class))     dos.writeDouble(((Double)fieldValue).doubleValue());
 else     if (fieldType.equals(BigDecimal.class))     dos.writeUTF(((BigDecimal)fieldValue).toString());
 else     if (Date.class.isAssignableFrom(fieldType))     dos.writeLong(((Date)fieldValue).getTime());
 else     if (fieldType.equals(Boolean.class))     dos.writeBoolean(((Boolean)fieldValue).booleanValue());
 else     if (fieldType.equals(String.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(Clob.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(Blob.class)) {
      byte[] bytes=(byte[])fieldValue;
      if (bytes == null || bytes.length == 0) {
        IOUtil.writeInt(dos,0);
      }
 else {
        IOUtil.writeInt(dos,bytes.length);
        dos.write((byte[])fieldValue);
      }
    }
 else     if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
      if (!(fieldValue instanceof Serializable))       fieldValue=fieldValue.toString();
      ObjectOutputStream oo=new ObjectOutputStream(dos);
      oo.writeObject(fieldValue);
      oo.close();
    }
  }
  dos.flush();
  rowsDataBytes=baos.toByteArray();
  IOUtil.writeInt(bos,rowsDataBytes.length);
  bos.write(rowsDataBytes);
  rowsDataBytes=null;
  dos=null;
  baos=null;
}",0.9911937377690804
71143,"private boolean checkGif() throws IOException {
  final byte[] GIF_MAGIC_87A={0x46,0x38,0x37,0x61};
  final byte[] GIF_MAGIC_89A={0x46,0x38,0x39,0x61};
  byte[] array=new byte[11];
  if (read(array) != array.length)   return false;
  if ((!equals(array,0,GIF_MAGIC_89A,0,4)) && (!equals(array,0,GIF_MAGIC_87A,0,4)))   return false;
  format=FORMAT_GIF;
  width=getShortLittleEndian(array,4);
  height=getShortLittleEndian(array,6);
  int flags=array[8] & 0xff;
  if ((flags & 0x80) != 0) {
    int tableSize=(1 << ((flags & 7) + 1)) * 3;
    skip(tableSize);
  }
  int blockType;
  do {
    blockType=read();
switch (blockType) {
case (0x2c):
      if (read(array,0,9) != 9) {
        return false;
      }
    flags=array[8] & 0xff;
  int localBitsPerPixel=(flags & 0x07) + 1;
if ((flags & 0x80) != 0) {
  skip((1 << localBitsPerPixel) * 3);
}
skip(1);
case (0x21):
int n;
do {
n=read();
if (n > 0) {
skip(n);
}
 else if (n == -1) {
return false;
}
}
 while (n > 0);
break;
case (0x3b):
break;
default :
return false;
}
}
 while (blockType != 0x3b);
return true;
}","private boolean checkGif() throws IOException {
  final byte[] GIF_MAGIC_87A={0x46,0x38,0x37,0x61};
  final byte[] GIF_MAGIC_89A={0x46,0x38,0x39,0x61};
  byte[] array=new byte[11];
  if (read(array) != array.length)   return false;
  if ((!equals(array,0,GIF_MAGIC_89A,0,4)) && (!equals(array,0,GIF_MAGIC_87A,0,4)))   return false;
  format=FORMAT_GIF;
  width=getShortLittleEndian(array,4);
  height=getShortLittleEndian(array,6);
  int flags=array[8] & 0xff;
  bitsPerPixel=((flags >> 4) & 0x07) + 1;
  if ((flags & 0x80) != 0) {
    int tableSize=(1 << ((flags & 7) + 1)) * 3;
    skip(tableSize);
  }
  int blockType;
  do {
    blockType=read();
switch (blockType) {
case (0x2c):
      if (read(array,0,9) != 9) {
        return false;
      }
    flags=array[8] & 0xff;
  progressive=(flags & 0x40) != 0;
int localBitsPerPixel=(flags & 0x07) + 1;
if (localBitsPerPixel > bitsPerPixel) {
bitsPerPixel=localBitsPerPixel;
}
if ((flags & 0x80) != 0) {
skip((1 << localBitsPerPixel) * 3);
}
skip(1);
int n;
do {
n=read();
if (n > 0) {
skip(n);
}
 else if (n == -1) {
return false;
}
}
 while (n > 0);
break;
case (0x21):
int extensionType=read();
if (collectComments && extensionType == 0xfe) {
StringBuffer sb=new StringBuffer();
int n1;
do {
n1=read();
if (n1 == -1) {
return false;
}
if (n1 > 0) {
for (int i=0; i < n1; i++) {
int ch=read();
if (ch == -1) {
return false;
}
sb.append((char)ch);
}
}
}
 while (n1 > 0);
}
 else {
int m;
do {
m=read();
if (m > 0) {
skip(m);
}
 else if (m == -1) {
return false;
}
}
 while (m > 0);
}
break;
case (0x3b):
break;
default :
return false;
}
}
 while (blockType != 0x3b);
return true;
}",0.757137560252132
71144,"private boolean checkBmp() throws IOException {
  byte[] array=new byte[44];
  if (read(array) != array.length)   return false;
  width=getIntLittleEndian(array,16);
  height=getIntLittleEndian(array,20);
  if (width < 1 || height < 1)   return false;
  int bitsPerPixel=getShortLittleEndian(array,26);
  if (bitsPerPixel != 1 && bitsPerPixel != 4 && bitsPerPixel != 8 && bitsPerPixel != 16 && bitsPerPixel != 24 && bitsPerPixel != 32)   return false;
  int physicalWidthDpi=(int)(getIntLittleEndian(array,36) * 0.0254);
  if (physicalWidthDpi > 0)   setPhysicalWidthDpi(physicalWidthDpi);
  int physicalHeightDpi=(int)(getIntLittleEndian(array,40) * 0.0254);
  if (physicalHeightDpi > 0)   setPhysicalHeightDpi(physicalHeightDpi);
  format=FORMAT_BMP;
  return true;
}","private boolean checkBmp() throws IOException {
  byte[] array=new byte[44];
  if (read(array) != array.length)   return false;
  width=getIntLittleEndian(array,16);
  height=getIntLittleEndian(array,20);
  if (width < 1 || height < 1)   return false;
  bitsPerPixel=getShortLittleEndian(array,26);
  if (bitsPerPixel != 1 && bitsPerPixel != 4 && bitsPerPixel != 8 && bitsPerPixel != 16 && bitsPerPixel != 24 && bitsPerPixel != 32)   return false;
  int physicalWidthDpi=(int)(getIntLittleEndian(array,36) * 0.0254);
  if (physicalWidthDpi > 0)   setPhysicalWidthDpi(physicalWidthDpi);
  int physicalHeightDpi=(int)(getIntLittleEndian(array,40) * 0.0254);
  if (physicalHeightDpi > 0)   setPhysicalHeightDpi(physicalHeightDpi);
  format=FORMAT_BMP;
  return true;
}",0.997392438070404
71145,"private boolean checkPng() throws IOException {
  final byte[] PNG_MAGIC={0x4e,0x47,0x0d,0x0a,0x1a,0x0a};
  byte[] array=new byte[27];
  if (read(array) != array.length) {
    return false;
  }
  if (!equals(array,0,PNG_MAGIC,0,6)) {
    return false;
  }
  format=FORMAT_PNG;
  width=getIntBigEndian(array,14);
  height=getIntBigEndian(array,18);
  return true;
}","private boolean checkPng() throws IOException {
  final byte[] PNG_MAGIC={0x4e,0x47,0x0d,0x0a,0x1a,0x0a};
  byte[] array=new byte[27];
  if (read(array) != array.length) {
    return false;
  }
  if (!equals(array,0,PNG_MAGIC,0,6)) {
    return false;
  }
  format=FORMAT_PNG;
  width=getIntBigEndian(array,14);
  height=getIntBigEndian(array,18);
  bitsPerPixel=array[22] & 0xff;
  int colorType=array[23] & 0xff;
  if (colorType == 2 || colorType == 6) {
    bitsPerPixel*=3;
  }
  progressive=(array[26] & 0xff) != 0;
  return true;
}",0.8079911209766926
71146,"public String getMimeType(){
  if (format >= 0 && format < MIME_TYPE_STRINGS.length) {
    return format == FORMAT_JPEG ? ""String_Node_Str"" : MIME_TYPE_STRINGS[format];
  }
  return null;
}","public String getMimeType(){
  if (format >= 0 && format < MIME_TYPE_STRINGS.length) {
    if (format == FORMAT_JPEG && progressive) {
      return ""String_Node_Str"";
    }
    return MIME_TYPE_STRINGS[format];
  }
 else {
    return null;
  }
}",0.8202764976958525
71147,"public boolean check(){
  format=-1;
  width=-1;
  height=-1;
  heightDpi=-1;
  widthDpi=-1;
  try {
    int byte1=read() & 0xff;
    int byte2=read() & 0xff;
    if (byte1 == 0x47 && byte2 == 0x49)     return checkGif();
 else     if (byte1 == 0x89 && byte2 == 0x50)     return checkPng();
 else     if (byte1 == 0xff && byte2 == 0xd8)     return checkJpeg();
 else     if (byte1 == 0x42 && byte2 == 0x4d)     return checkBmp();
 else     return false;
  }
 catch (  IOException ioe) {
    return false;
  }
}","public boolean check(){
  format=-1;
  width=-1;
  height=-1;
  bitsPerPixel=-1;
  heightDpi=-1;
  widthDpi=-1;
  try {
    int byte1=read() & 0xff;
    int byte2=read() & 0xff;
    if (byte1 == 0x47 && byte2 == 0x49)     return checkGif();
 else     if (byte1 == 0x89 && byte2 == 0x50)     return checkPng();
 else     if (byte1 == 0xff && byte2 == 0xd8)     return checkJpeg();
 else     if (byte1 == 0x42 && byte2 == 0x4d)     return checkBmp();
 else     return false;
  }
 catch (  IOException ioe) {
    return false;
  }
}",0.981713185755534
71148,"private boolean checkJpeg() throws IOException {
  byte[] array=new byte[12];
  while (true) {
    if (read(array,0,4) != 4) {
      return false;
    }
    int marker=getShortBigEndian(array,0);
    int size=getShortBigEndian(array,2);
    if ((marker & 0xff00) != 0xff00) {
      return false;
    }
    if (marker == 0xffe0) {
      if (size < 14) {
        skip(size - 2);
        continue;
      }
      if (read(array,0,12) != 12) {
        return false;
      }
      final byte[] APP0_ID={0x4a,0x46,0x49,0x46,0x00};
      if (equals(APP0_ID,0,array,0,5)) {
        int physicalWidthDpi=getShortBigEndian(array,8);
        int physicalHeightDpi=getShortBigEndian(array,10);
        if (array[7] == 1) {
          setPhysicalWidthDpi(physicalWidthDpi);
          setPhysicalHeightDpi(physicalHeightDpi);
        }
 else         if (array[7] == 2) {
          setPhysicalWidthDpi((int)(physicalWidthDpi * 2.54f));
          setPhysicalHeightDpi((int)(physicalHeightDpi * 2.54f));
        }
      }
      skip(size - 14);
    }
 else     if (marker >= 0xffc0 && marker <= 0xffcf && marker != 0xffc4 && marker != 0xffc8) {
      if (read(array,0,6) != 6) {
        return false;
      }
      format=FORMAT_JPEG;
      width=getShortBigEndian(array,3);
      height=getShortBigEndian(array,1);
      return true;
    }
 else {
      skip(size - 2);
    }
  }
}","private boolean checkJpeg() throws IOException {
  byte[] array=new byte[12];
  while (true) {
    if (read(array,0,4) != 4) {
      return false;
    }
    int marker=getShortBigEndian(array,0);
    int size=getShortBigEndian(array,2);
    if ((marker & 0xff00) != 0xff00) {
      return false;
    }
    if (marker == 0xffe0) {
      if (size < 14) {
        skip(size - 2);
        continue;
      }
      if (read(array,0,12) != 12) {
        return false;
      }
      final byte[] APP0_ID={0x4a,0x46,0x49,0x46,0x00};
      if (equals(APP0_ID,0,array,0,5)) {
        int physicalWidthDpi=getShortBigEndian(array,8);
        int physicalHeightDpi=getShortBigEndian(array,10);
        if (array[7] == 1) {
          setPhysicalWidthDpi(physicalWidthDpi);
          setPhysicalHeightDpi(physicalHeightDpi);
        }
 else         if (array[7] == 2) {
          setPhysicalWidthDpi((int)(physicalWidthDpi * 2.54f));
          setPhysicalHeightDpi((int)(physicalHeightDpi * 2.54f));
        }
      }
      skip(size - 14);
    }
 else     if (collectComments && size > 2 && marker == 0xfffe) {
      size-=2;
      byte[] chars=new byte[size];
      if (read(chars,0,size) != size) {
        return false;
      }
      String comment=new String(chars,""String_Node_Str"");
      comment=comment.trim();
    }
 else     if (marker >= 0xffc0 && marker <= 0xffcf && marker != 0xffc4 && marker != 0xffc8) {
      if (read(array,0,6) != 6) {
        return false;
      }
      format=FORMAT_JPEG;
      bitsPerPixel=(data[0] & 0xff) * (data[5] & 0xff);
      progressive=marker == 0xffc2 || marker == 0xffc6 || marker == 0xffca || marker == 0xffce;
      width=getShortBigEndian(array,3);
      height=getShortBigEndian(array,1);
      return true;
    }
 else {
      skip(size - 2);
    }
  }
}",0.863477985429205
71149,"/** 
 * The page layout is controlled by three render options: <ul> <li>OUTPUT-MASTER-PAGE</li> <li>OUTPUT-MARGIN</li> <li>FLOATING-FOOTER</li> </ul> The layout effect matrix are demostrate in following table: <table border=""all""> <tr> <th>PAGE</th> <th>MARGIN</th> <th>FOOTER</th> <th>effect</th> </tr> <tr valign=""top""> <td rowspan=""4"">TRUE</td> <td rowspan=""2"">TRUE</td> <td >FALSE</td> <td> <table border=""all"" style=""width:2in;height:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td>LM</td> <td valign=""top"">header</td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr> <td>LM</td> <td><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> <table> </td> </table> <tr valign=""top""> <td>TRUE</td> <td> <table border=""all"" style=""width:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td >LM</td> <td valign=""top""><div>header</div></td> <td >RM</td> </tr> <tr> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td valign=""top""><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> </table> </td> </tr> <tr valign=""top""> <td rowspan=""2"">FALSE</td> <td>TRUE</td> <td> <table border=""all"" style=""width:1.6in;height:1in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr style=""height:100%""> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td> <table border=""all"" style=""width:1.6in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td>ANY</td> <td>ANY</td> <td> <table border=""all"" style=""width:1.6in;""> <tr> <td>BODY</td> </tr> </table> </td> </tr> </table>
 */
public void startPage(IPageContent page){
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  if (pageNo > 1) {
    writer.writeCode(""String_Node_Str"");
  }
  boolean fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  StringBuffer styleBuffer=new StringBuffer();
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  styleBuffer.append(""String_Node_Str"");
  if (page != null && outputMasterPageContent) {
    htmlEmitter.buildPageStyle(page,styleBuffer);
    if (fixedReport) {
      DimensionType width=getPageWidth(page);
      if (width != null) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(width.toString());
        styleBuffer.append(""String_Node_Str"");
      }
    }
 else {
      styleBuffer.append(""String_Node_Str"");
    }
    if (!pageFooterFloatFlag) {
      DimensionType height=getPageHeight(page);
      if (height != null) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(height.toString());
        styleBuffer.append(""String_Node_Str"");
      }
    }
    if (fixedReport) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(""String_Node_Str"");
    }
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  if (page != null && outputMasterPageContent) {
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
    }
    writer.openTag(HTMLTags.TAG_COL);
    writer.closeTag(HTMLTags.TAG_COL);
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
      outputVMargin(page.getMarginTop());
    }
    if (showPageHeader(page)) {
      writer.openTag(HTMLTags.TAG_TR);
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginLeft());
      }
      outputPageBand(page,page.getPageHeader());
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginRight());
      }
      writer.closeTag(HTMLTags.TAG_TR);
    }
  }
  writer.openTag(HTMLTags.TAG_TR);
  if (!pageFooterFloatFlag) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null && outputMasterPageContent && outputMasterPageMargins) {
    outputHMargin(page.getMarginLeft());
  }
  writer.openTag(HTMLTags.TAG_TD);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeBidiFlag();
}","/** 
 * The page layout is controlled by three render options: <ul> <li>OUTPUT-MASTER-PAGE</li> <li>OUTPUT-MARGIN</li> <li>FLOATING-FOOTER</li> </ul> The layout effect matrix are demostrate in following table: <table border=""all""> <tr> <th>PAGE</th> <th>MARGIN</th> <th>FOOTER</th> <th>effect</th> </tr> <tr valign=""top""> <td rowspan=""4"">TRUE</td> <td rowspan=""2"">TRUE</td> <td >FALSE</td> <td> <table border=""all"" style=""width:2in;height:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td>LM</td> <td valign=""top"">header</td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr> <td>LM</td> <td><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> <table> </td> </table> <tr valign=""top""> <td>TRUE</td> <td> <table border=""all"" style=""width:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td >LM</td> <td valign=""top""><div>header</div></td> <td >RM</td> </tr> <tr> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td valign=""top""><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> </table> </td> </tr> <tr valign=""top""> <td rowspan=""2"">FALSE</td> <td>TRUE</td> <td> <table border=""all"" style=""width:1.6in;height:1in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr style=""height:100%""> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td> <table border=""all"" style=""width:1.6in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td>ANY</td> <td>ANY</td> <td> <table border=""all"" style=""width:1.6in;""> <tr> <td>BODY</td> </tr> </table> </td> </tr> </table>
 */
public void startPage(IPageContent page) throws BirtException {
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  if (pageNo > 1) {
    writer.writeCode(""String_Node_Str"");
  }
  boolean fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  StringBuffer styleBuffer=new StringBuffer();
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  styleBuffer.append(""String_Node_Str"");
  if (page != null && outputMasterPageContent) {
    htmlEmitter.buildPageStyle(page,styleBuffer);
    if (fixedReport) {
      DimensionType width=getPageWidth(page);
      if (width != null) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(width.toString());
        styleBuffer.append(""String_Node_Str"");
      }
    }
 else {
      styleBuffer.append(""String_Node_Str"");
    }
    if (!pageFooterFloatFlag) {
      DimensionType height=getPageHeight(page);
      if (height != null) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(height.toString());
        styleBuffer.append(""String_Node_Str"");
      }
    }
    if (fixedReport) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(""String_Node_Str"");
    }
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  if (page != null && outputMasterPageContent) {
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
    }
    writer.openTag(HTMLTags.TAG_COL);
    writer.closeTag(HTMLTags.TAG_COL);
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
      outputVMargin(page.getMarginTop());
    }
    if (showPageHeader(page)) {
      writer.openTag(HTMLTags.TAG_TR);
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginLeft());
      }
      outputPageBand(page,page.getPageHeader());
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginRight());
      }
      writer.closeTag(HTMLTags.TAG_TR);
    }
  }
  writer.openTag(HTMLTags.TAG_TR);
  if (!pageFooterFloatFlag) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null && outputMasterPageContent && outputMasterPageMargins) {
    outputHMargin(page.getMarginLeft());
  }
  writer.openTag(HTMLTags.TAG_TD);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeBidiFlag();
}",0.9975987775594848
71150,"public void endPage(IPageContent page){
  logger.log(Level.FINE,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_TD);
  if (page != null && outputMasterPageContent && outputMasterPageMargins) {
    outputHMargin(page.getMarginRight());
  }
  writer.closeTag(HTMLTags.TAG_TR);
  if (page != null && outputMasterPageContent) {
    if (showPageFooter(page)) {
      writer.openTag(HTMLTags.TAG_TR);
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginLeft());
      }
      outputPageBand(page,page.getPageFooter());
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginRight());
      }
      writer.closeTag(HTMLTags.TAG_TR);
    }
    if (outputMasterPageMargins) {
      outputVMargin(page.getMarginBottom());
    }
  }
  writer.closeTag(HTMLTags.TAG_TABLE);
}","public void endPage(IPageContent page) throws BirtException {
  logger.log(Level.FINE,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_TD);
  if (page != null && outputMasterPageContent && outputMasterPageMargins) {
    outputHMargin(page.getMarginRight());
  }
  writer.closeTag(HTMLTags.TAG_TR);
  if (page != null && outputMasterPageContent) {
    if (showPageFooter(page)) {
      writer.openTag(HTMLTags.TAG_TR);
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginLeft());
      }
      outputPageBand(page,page.getPageFooter());
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginRight());
      }
      writer.closeTag(HTMLTags.TAG_TR);
    }
    if (outputMasterPageMargins) {
      outputVMargin(page.getMarginBottom());
    }
  }
  writer.closeTag(HTMLTags.TAG_TABLE);
}",0.9865030674846624
71151,"private void outputPageBand(IPageContent page,IContent band){
  writer.openTag(HTMLTags.TAG_TD);
  writeBidiFlag();
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildPageBandStyle(styleBuffer,page.getStyle());
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  contentVisitor.visitChildren(band,null);
  writer.closeTag(HTMLTags.TAG_TD);
}","private void outputPageBand(IPageContent page,IContent band) throws BirtException {
  writer.openTag(HTMLTags.TAG_TD);
  writeBidiFlag();
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildPageBandStyle(styleBuffer,page.getStyle());
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  contentVisitor.visitChildren(band,null);
  writer.closeTag(HTMLTags.TAG_TD);
}",0.9711286089238844
71152,"public void initialize(IEmitterServices services){
  this.services=services;
  this.out=EmitterUtil.getOuputStream(services,REPORT_FILE);
  Object emitterConfig=services.getEmitterConfig().get(""String_Node_Str"");
  if (emitterConfig != null && emitterConfig instanceof HTMLEmitterConfig) {
    imageHandler=((HTMLEmitterConfig)emitterConfig).getImageHandler();
    actionHandler=((HTMLEmitterConfig)emitterConfig).getActionHandler();
  }
  Object im=services.getOption(HTMLRenderOption.IMAGE_HANDLER);
  if (im != null && im instanceof IHTMLImageHandler) {
    imageHandler=(IHTMLImageHandler)im;
  }
  Object ac=services.getOption(HTMLRenderOption.ACTION_HANDLER);
  if (ac != null && ac instanceof IHTMLActionHandler) {
    actionHandler=(IHTMLActionHandler)ac;
  }
  reportContext=services.getReportContext();
  renderOption=services.getRenderOption();
  runnable=services.getReportRunnable();
  writer=creatWriter();
  if (renderOption != null) {
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
    isEmbeddable=htmlOption.getEmbeddable();
    Map options=renderOption.getOutputSetting();
    if (options != null) {
      urlEncoding=(String)options.get(HTMLRenderOption.URL_ENCODING);
    }
    outputMasterPageContent=htmlOption.getMasterPageContent();
    IHTMLActionHandler actHandler=htmlOption.getActionHandle();
    if (ac != null) {
      actionHandler=actHandler;
    }
    pageFooterFloatFlag=htmlOption.getPageFooterFloatFlag();
    enableMetadata=htmlOption.getEnableMetadata();
    ouputInstanceIDs=htmlOption.getInstanceIDs();
    metadataEmitter=creatMetadataEmitter(writer,htmlOption);
    layoutPreference=htmlOption.getLayoutPreference();
    enableAgentStyleEngine=htmlOption.getEnableAgentStyleEngine();
    outputMasterPageMargins=htmlOption.getOutputMasterPageMargins();
    htmlIDNamespace=htmlOption.getHTMLIDNamespace();
    if (null != htmlIDNamespace) {
      if (htmlIDNamespace.length() > 0) {
        htmlIDNamespace+=""String_Node_Str"";
        metadataEmitter.setHTMLIDNamespace(htmlIDNamespace);
      }
 else {
        htmlIDNamespace=null;
      }
    }
  }
}","public void initialize(IEmitterServices services) throws EngineException {
  this.services=services;
  this.out=EmitterUtil.getOuputStream(services,REPORT_FILE);
  Object emitterConfig=services.getEmitterConfig().get(""String_Node_Str"");
  if (emitterConfig != null && emitterConfig instanceof HTMLEmitterConfig) {
    imageHandler=((HTMLEmitterConfig)emitterConfig).getImageHandler();
    actionHandler=((HTMLEmitterConfig)emitterConfig).getActionHandler();
  }
  Object im=services.getOption(HTMLRenderOption.IMAGE_HANDLER);
  if (im != null && im instanceof IHTMLImageHandler) {
    imageHandler=(IHTMLImageHandler)im;
  }
  Object ac=services.getOption(HTMLRenderOption.ACTION_HANDLER);
  if (ac != null && ac instanceof IHTMLActionHandler) {
    actionHandler=(IHTMLActionHandler)ac;
  }
  reportContext=services.getReportContext();
  renderOption=services.getRenderOption();
  runnable=services.getReportRunnable();
  writer=creatWriter();
  if (renderOption != null) {
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
    isEmbeddable=htmlOption.getEmbeddable();
    Map options=renderOption.getOutputSetting();
    if (options != null) {
      urlEncoding=(String)options.get(HTMLRenderOption.URL_ENCODING);
    }
    outputMasterPageContent=htmlOption.getMasterPageContent();
    IHTMLActionHandler actHandler=htmlOption.getActionHandle();
    if (ac != null) {
      actionHandler=actHandler;
    }
    pageFooterFloatFlag=htmlOption.getPageFooterFloatFlag();
    enableMetadata=htmlOption.getEnableMetadata();
    ouputInstanceIDs=htmlOption.getInstanceIDs();
    metadataEmitter=creatMetadataEmitter(writer,htmlOption);
    layoutPreference=htmlOption.getLayoutPreference();
    enableAgentStyleEngine=htmlOption.getEnableAgentStyleEngine();
    outputMasterPageMargins=htmlOption.getOutputMasterPageMargins();
    htmlIDNamespace=htmlOption.getHTMLIDNamespace();
    if (null != htmlIDNamespace) {
      if (htmlIDNamespace.length() > 0) {
        htmlIDNamespace+=""String_Node_Str"";
        metadataEmitter.setHTMLIDNamespace(htmlIDNamespace);
      }
 else {
        htmlIDNamespace=null;
      }
    }
  }
}",0.9943635509628934
71153,"public PageDeviceRender createRender(IEmitterServices services){
  return new PDFRender(services);
}","public PageDeviceRender createRender(IEmitterServices services) throws EngineException {
  return new PDFRender(services);
}",0.8928571428571429
71154,"/** 
 * Initializes the pdfEmitter.
 * @param services the emitter svervices object.
 */
private void initialize(IEmitterServices services){
  this.services=services;
  reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  this.output=EmitterUtil.getOuputStream(services,""String_Node_Str"");
}","/** 
 * Initializes the pdfEmitter.
 * @param services the emitter svervices object.
 * @throws EngineException 
 */
private void initialize(IEmitterServices services) throws EngineException {
  this.services=services;
  reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  this.output=EmitterUtil.getOuputStream(services,""String_Node_Str"");
}",0.9437229437229436
71155,"public PDFRender(IEmitterServices services){
  initialize(services);
}","public PDFRender(IEmitterServices services) throws EngineException {
  initialize(services);
}",0.8536585365853658
71156,"public PageDeviceRender createRender(IEmitterServices services){
  return new PostscriptRender(services);
}","public PageDeviceRender createRender(IEmitterServices services) throws EngineException {
  return new PostscriptRender(services);
}",0.8991596638655462
71157,"public PostscriptRender(IEmitterServices services){
  initialize(services);
}","public PostscriptRender(IEmitterServices services) throws EngineException {
  initialize(services);
}",0.8651685393258427
71158,"/** 
 * Initializes the pdfEmitter.
 * @param services the emitter svervices object.
 */
private void initialize(IEmitterServices services){
  this.services=services;
  IReportRunnable reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  this.output=EmitterUtil.getOuputStream(services,""String_Node_Str"");
}","/** 
 * Initializes the pdfEmitter.
 * @param services the emitter svervices object.
 * @throws EngineException 
 */
private void initialize(IEmitterServices services) throws EngineException {
  this.services=services;
  IReportRunnable reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  this.output=EmitterUtil.getOuputStream(services,""String_Node_Str"");
}",0.9456066945606696
71159,"public PageDeviceRender createRender(IEmitterServices service){
  return new PPTRender(service);
}","public PageDeviceRender createRender(IEmitterServices service) throws EngineException {
  return new PPTRender(service);
}",0.8909090909090909
71160,"public PPTRender(IEmitterServices services){
  initialize(services);
}","public PPTRender(IEmitterServices services) throws EngineException {
  initialize(services);
}",0.8536585365853658
71161,"/** 
 * Initializes the PPTEmitter.
 * @param services the emitter services object.
 */
public void initialize(IEmitterServices services){
  this.services=services;
  IReportRunnable reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  this.pptOutput=EmitterUtil.getOuputStream(services,REPORT_FILE);
}","/** 
 * Initializes the PPTEmitter.
 * @param services the emitter services object.
 * @throws EngineException 
 */
public void initialize(IEmitterServices services) throws EngineException {
  this.services=services;
  IReportRunnable reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  this.pptOutput=EmitterUtil.getOuputStream(services,REPORT_FILE);
}",0.945031712473573
71162,"public void startPage(IPageContent page){
  if (orientation == null) {
    orientation=capitalize(page.getOrientation());
  }
  if (needOutputInMasterPage(page.getPageHeader()) && needOutputInMasterPage(page.getPageFooter())) {
    outputInMasterPage=true;
    pageHeader=formatHeaderFooter(page.getPageHeader(),true);
    pageFooter=formatHeaderFooter(page.getPageFooter(),false);
  }
  if (!outputInMasterPage && page.getPageHeader() != null) {
    contentVisitor.visitChildren(page.getPageHeader(),null);
  }
}","public void startPage(IPageContent page) throws BirtException {
  if (orientation == null) {
    orientation=capitalize(page.getOrientation());
  }
  if (needOutputInMasterPage(page.getPageHeader()) && needOutputInMasterPage(page.getPageFooter())) {
    outputInMasterPage=true;
    pageHeader=formatHeaderFooter(page.getPageHeader(),true);
    pageFooter=formatHeaderFooter(page.getPageFooter(),false);
  }
  if (!outputInMasterPage && page.getPageHeader() != null) {
    contentVisitor.visitChildren(page.getPageHeader(),null);
  }
}",0.9790076335877864
71163,"public void startForeign(IForeignContent foreign){
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    HTML2Content.html2Content(foreign);
    HyperlinkDef link=parseHyperLink(foreign);
    engine.addContainer(foreign.getComputedStyle(),link);
    contentVisitor.visitChildren(foreign,null);
    engine.endContainer();
  }
}","public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    HTML2Content.html2Content(foreign);
    HyperlinkDef link=parseHyperLink(foreign);
    engine.addContainer(foreign.getComputedStyle(),link);
    contentVisitor.visitChildren(foreign,null);
    engine.endContainer();
  }
}",0.969529085872576
71164,"public void initialize(IEmitterServices service){
  this.service=service;
  if (service != null) {
    this.out=EmitterUtil.getOuputStream(service,""String_Node_Str"" + getOutputFormat());
  }
  context.setTempFileDir(service.getReportEngine().getConfig().getTempDir());
  IReportContext reportContext=service.getReportContext();
  if (reportContext != null) {
    Locale locale=reportContext.getLocale();
    if (locale != null)     context.setLocale(ULocale.forLocale(locale));
  }
}","public void initialize(IEmitterServices service) throws EngineException {
  this.service=service;
  if (service != null) {
    this.out=EmitterUtil.getOuputStream(service,""String_Node_Str"" + getOutputFormat());
  }
  context.setTempFileDir(service.getReportEngine().getConfig().getTempDir());
  IReportContext reportContext=service.getReportContext();
  if (reportContext != null) {
    Locale locale=reportContext.getLocale();
    if (locale != null)     context.setLocale(ULocale.forLocale(locale));
  }
}",0.9757575757575756
71165,"public void endPage(IPageContent page){
  if (!outputInMasterPage && page.getPageFooter() != null) {
    contentVisitor.visitChildren(page.getPageFooter(),null);
  }
}","public void endPage(IPageContent page) throws BirtException {
  if (!outputInMasterPage && page.getPageFooter() != null) {
    contentVisitor.visitChildren(page.getPageFooter(),null);
  }
}",0.9382022471910112
71166,"public void startPage(IPageContent page) throws IOException {
  if (previousPage != null) {
    outputPrePageProperties();
    previousPage=page;
    context.resetWidth();
  }
 else {
    previousPage=page;
    boolean isRtl=false;
    String creator=null;
    String title=null;
    String description=null;
    if (reportContent != null) {
      ReportDesignHandle designHandle=reportContent.getDesign().getReportDesign();
      creator=designHandle.getAuthor();
      title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
      description=designHandle.getDescription();
      IContent rootContent=reportContent.getRoot();
      isRtl=rootContent != null && rootContent.isRTL();
    }
    wordWriter.start(isRtl,creator,title,description);
    drawDocumentBackground();
  }
  computePageProperties(page);
  context.addWidth(contentWidth);
  wordWriter.startPage();
}","public void startPage(IPageContent page) throws IOException, BirtException {
  if (previousPage != null) {
    outputPrePageProperties();
    previousPage=page;
    context.resetWidth();
  }
 else {
    previousPage=page;
    boolean isRtl=false;
    String creator=null;
    String title=null;
    String description=null;
    if (reportContent != null) {
      ReportDesignHandle designHandle=reportContent.getDesign().getReportDesign();
      creator=designHandle.getAuthor();
      title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
      description=designHandle.getDescription();
      IContent rootContent=reportContent.getRoot();
      isRtl=rootContent != null && rootContent.isRTL();
    }
    wordWriter.start(isRtl,creator,title,description);
    drawDocumentBackground();
  }
  computePageProperties(page);
  context.addWidth(contentWidth);
  wordWriter.startPage();
}",0.9915302089215132
71167,"protected void writeSectionInP() throws IOException {
  wordWriter.startSectionInParagraph();
  writeHeaderFooter();
  wordWriter.writePageProperties(pageHeight,pageWidth,headerHeight,footerHeight,topMargin,bottomMargin,leftMargin,rightMargin,orientation);
  wordWriter.endSectionInParagraph();
}","protected void writeSectionInP() throws IOException, BirtException {
  wordWriter.startSectionInParagraph();
  writeHeaderFooter();
  wordWriter.writePageProperties(pageHeight,pageWidth,headerHeight,footerHeight,topMargin,bottomMargin,leftMargin,rightMargin,orientation);
  wordWriter.endSectionInParagraph();
}",0.9752883031301482
71168,public abstract void startForeign(IForeignContent foreign);,public abstract void startForeign(IForeignContent foreign) throws BirtException ;,0.8428571428571429
71169,"private void outputPrePageProperties() throws IOException {
  adjustInline();
  writeSectionInP();
  wordWriter.endPage();
}","private void outputPrePageProperties() throws IOException, BirtException {
  adjustInline();
  writeSectionInP();
  wordWriter.endPage();
}",0.9429657794676806
71170,"public void end(IReportContent report) throws IOException {
  adjustInline();
  writeSectionInBody();
  wordWriter.endPage();
  wordWriter.end();
}","public void end(IReportContent report) throws IOException, BirtException {
  adjustInline();
  writeSectionInBody();
  wordWriter.endPage();
  wordWriter.end();
}",0.9514563106796116
71171,"protected void writeSectionInBody() throws IOException {
  wordWriter.startSection();
  writeHeaderFooter();
  wordWriter.writePageProperties(pageHeight,pageWidth,headerHeight,footerHeight,topMargin,bottomMargin,leftMargin,rightMargin,orientation);
  wordWriter.endSection();
}","protected void writeSectionInBody() throws IOException, BirtException {
  wordWriter.startSection();
  writeHeaderFooter();
  wordWriter.writePageProperties(pageHeight,pageWidth,headerHeight,footerHeight,topMargin,bottomMargin,leftMargin,rightMargin,orientation);
  wordWriter.endSection();
}",0.9736379613356766
71172,"public void initialize(IEmitterServices service){
  if (service != null) {
    this.out=EmitterUtil.getOuputStream(service,""String_Node_Str"" + getOutputFormat());
    this.reportRunnable=service.getReportRunnable();
    this.actionHandler=(IHTMLActionHandler)service.getOption(RenderOption.ACTION_HANDLER);
    reportContext=service.getReportContext();
    ULocale locale=null;
    if (reportContext != null) {
      locale=ULocale.forLocale(reportContext.getLocale());
    }
    if (locale == null) {
      locale=ULocale.getDefault();
    }
    EngineResourceHandle resourceHandle=new EngineResourceHandle(locale);
    messageFlashObjectNotSupported=resourceHandle.getMessage(MessageConstants.FLASH_OBJECT_NOT_SUPPORTED_PROMPT);
  }
  context=new EmitterContext();
}","public void initialize(IEmitterServices service) throws EngineException {
  if (service != null) {
    this.out=EmitterUtil.getOuputStream(service,""String_Node_Str"" + getOutputFormat());
    this.reportRunnable=service.getReportRunnable();
    this.actionHandler=(IHTMLActionHandler)service.getOption(RenderOption.ACTION_HANDLER);
    reportContext=service.getReportContext();
    ULocale locale=null;
    if (reportContext != null) {
      locale=ULocale.forLocale(reportContext.getLocale());
    }
    if (locale == null) {
      locale=ULocale.getDefault();
    }
    EngineResourceHandle resourceHandle=new EngineResourceHandle(locale);
    messageFlashObjectNotSupported=resourceHandle.getMessage(MessageConstants.FLASH_OBJECT_NOT_SUPPORTED_PROMPT);
  }
  context=new EmitterContext();
}",0.9846153846153848
71173,"private void writeHeaderFooter() throws IOException {
  if (previousPage.getPageHeader() != null) {
    SimpleMasterPageDesign master=(SimpleMasterPageDesign)previousPage.getGenerateBy();
    wordWriter.startHeader(!master.isShowHeaderOnFirst());
    contentVisitor.visitChildren(previousPage.getPageHeader(),null);
    wordWriter.endHeader();
  }
  if (previousPage.getPageFooter() != null) {
    wordWriter.startFooter();
    contentVisitor.visitChildren(previousPage.getPageFooter(),null);
    wordWriter.endFooter();
  }
}","private void writeHeaderFooter() throws IOException, BirtException {
  if (previousPage.getPageHeader() != null) {
    SimpleMasterPageDesign master=(SimpleMasterPageDesign)previousPage.getGenerateBy();
    wordWriter.startHeader(!master.isShowHeaderOnFirst());
    contentVisitor.visitChildren(previousPage.getPageHeader(),null);
    wordWriter.endHeader();
  }
  if (previousPage.getPageFooter() != null) {
    wordWriter.startFooter();
    contentVisitor.visitChildren(previousPage.getPageFooter(),null);
    wordWriter.endFooter();
  }
}",0.985941893158388
71174,"public void startPage(IPageContent page){
  try {
    emitterImplement.startPage(page);
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
}","public void startPage(IPageContent page) throws BirtException {
  try {
    emitterImplement.startPage(page);
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
}",0.9424083769633508
71175,"public void startForeign(IForeignContent foreign){
  if (isClipped) {
    return;
  }
  emitterImplement.startForeign(foreign);
}","public void startForeign(IForeignContent foreign) throws BirtException {
  if (isClipped) {
    return;
  }
  emitterImplement.startForeign(foreign);
}",0.9214285714285714
71176,"public void end(IReportContent report){
  try {
    emitterImplement.end(report);
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
}","public void end(IReportContent report) throws BirtException {
  try {
    emitterImplement.end(report);
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
}",0.9405405405405406
71177,"public void initialize(IEmitterServices service){
  emitterImplement.initialize(service);
}","public void initialize(IEmitterServices service) throws EngineException {
  emitterImplement.initialize(service);
}",0.883495145631068
71178,"protected void updateRtLFlag() throws EngineException {
  if (renderOptions == null)   return;
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null)   return;
  ReportDesignHandle handle=(ReportDesignHandle)runnable.getDesignHandle();
  if (handle != null) {
    Object bidiFlag=renderOptions.getOption(IRenderOption.RTL_FLAG);
    String bidiOrientation=null;
    if (bidiFlag != null) {
      if (Boolean.TRUE.equals(bidiFlag)) {
        bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
      }
 else {
        bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
      }
      try {
        handle.setBidiOrientation(bidiOrientation);
        Report report=executionContext.getReport();
        AbstractStyle rootStyle=(AbstractStyle)report.getStyles().get(report.getRootStyleName());
        if (rootStyle != null) {
          rootStyle.setDirection(bidiOrientation);
        }
      }
 catch (      SemanticException e) {
        log.log(Level.WARNING,""String_Node_Str"",e);
        throw new EngineException(""String_Node_Str"");
      }
    }
 else     if (handle.isDirectionRTL()) {
      renderOptions.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
      IRenderOption renderOptions2=executionContext.getRenderOption();
      if (renderOptions2 != null) {
        renderOptions2.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
        executionContext.setRenderOption(renderOptions2);
      }
    }
  }
}","protected void updateRtLFlag() throws EngineException {
  if (renderOptions == null)   return;
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null)   return;
  ReportDesignHandle handle=(ReportDesignHandle)runnable.getDesignHandle();
  if (handle != null) {
    Object bidiFlag=renderOptions.getOption(IRenderOption.RTL_FLAG);
    if (Boolean.TRUE.equals(bidiFlag)) {
      String bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
      try {
        handle.setBidiOrientation(bidiOrientation);
        updateBidiStyle(bidiOrientation);
      }
 catch (      SemanticException e) {
        log.log(Level.WARNING,""String_Node_Str"",e);
        throw new EngineException(""String_Node_Str"");
      }
    }
 else     if (handle.isDirectionRTL()) {
      renderOptions.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
      IRenderOption renderOptions2=executionContext.getRenderOption();
      if (renderOptions2 != null) {
        renderOptions2.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
        executionContext.setRenderOption(renderOptions2);
      }
    }
  }
}",0.8184639255236618
71179,"/** 
 * @param expression
 * @return
 * @throws DataException
 */
private int getExpressionDataTypeOfSortKey(String expression) throws DataException {
  try {
    if (expression == null)     return DataType.ANY_TYPE;
    String bindingName=ExpressionUtil.getColumnBindingName(expression);
    if (bindingName == null)     return DataType.ANY_TYPE;
    Object binding=this.baseQueryDefn.getBindings().get(bindingName);
    if (binding == null)     return DataType.ANY_TYPE;
    int dataType=((IBinding)binding).getDataType();
    if (dataType != DataType.UNKNOWN_TYPE)     return dataType;
 else     return DataType.ANY_TYPE;
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * @param expression
 * @return
 * @throws DataException
 */
private int getExpressionDataTypeOfSortKey(String expression) throws DataException {
  try {
    if (expression == null)     return DataType.ANY_TYPE;
    String bindingName=ExpressionUtil.getColumnBindingName(expression);
    if (bindingName == null)     return DataType.ANY_TYPE;
    if (bindingName.equals(ScriptConstants.ROW_NUM_KEYWORD)) {
      return DataType.INTEGER_TYPE;
    }
    Object binding=this.baseQueryDefn.getBindings().get(bindingName);
    if (binding == null)     return DataType.ANY_TYPE;
    int dataType=((IBinding)binding).getDataType();
    if (dataType != DataType.UNKNOWN_TYPE)     return dataType;
 else     return DataType.ANY_TYPE;
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9298597194388778
71180,"/** 
 * get the data type of a expression
 * @param cx
 * @param expr
 * @return
 * @throws DataException 
 */
private int getColumnDataType(Context cx,String expr) throws DataException {
  String columnName=QueryExecutorUtil.getColInfoFromJSExpr(cx,expr).getColumnName();
  if (columnName == null) {
    return DataType.UNKNOWN_TYPE;
  }
  if (columnName.equals(ScriptConstants.ROW_NUM_KEYWORD)) {
    return DataType.INTEGER_TYPE;
  }
  Object baseExpr=(this.baseQueryDefn.getBindings().get(columnName));
  if (baseExpr == null) {
    return DataType.UNKNOWN_TYPE;
  }
  return ((IBinding)baseExpr).getExpression().getDataType();
}","/** 
 * get the data type of a expression
 * @param cx
 * @param expr
 * @return
 * @throws DataException 
 */
private int getColumnDataType(Context cx,String expr) throws DataException {
  String columnName=QueryExecutorUtil.getColInfoFromJSExpr(cx,expr).getColumnName();
  if (columnName == null) {
    return DataType.UNKNOWN_TYPE;
  }
  if (columnName.equals(ScriptConstants.ROW_NUM_KEYWORD)) {
    return DataType.INTEGER_TYPE;
  }
  Object baseExpr=(this.baseQueryDefn.getBindings().get(columnName));
  if (baseExpr == null) {
    return DataType.UNKNOWN_TYPE;
  }
  int dataType=((IBinding)baseExpr).getExpression().getDataType();
  if (dataType == DataType.UNKNOWN_TYPE)   return DataType.ANY_TYPE;
  return dataType;
}",0.9205882352941176
71181,"/** 
 * Build the background style string.
 * @param styleBuffer The <code>StringBuffer</code> to which the result is output.
 * @param style The style object.
 * @param emitter The <code>HTMLReportEmitter</code> object which provides resource manager and hyperlink builder objects.
 */
public static void buildBackground(StringBuffer styleBuffer,IStyle style,HTMLReportEmitter emitter){
  buildProperty(styleBuffer,HTMLTags.ATTR_BACKGROUND_COLOR,style.getBackgroundColor());
  String image=style.getBackgroundImage();
  if (image == null || ""String_Node_Str"".equalsIgnoreCase(image)) {
    return;
  }
  image=emitter.handleStyleImage(image);
  if (image != null && image.length() > 0) {
    buildURLProperty(styleBuffer,HTMLTags.ATTR_BACKGROUND_IMAGE,image);
    buildProperty(styleBuffer,HTMLTags.ATTR_BACKGROUND_REPEAT,style.getBackgroundRepeat());
    buildProperty(styleBuffer,HTMLTags.ATTR_BACKGROUND_ATTACHEMNT,style.getBackgroundAttachment());
    String x=style.getBackgroundPositionX();
    String y=style.getBackgroundPositionY();
    if (x != null || y != null) {
      if (x == null) {
        x=""String_Node_Str"";
      }
      if (y == null) {
        y=""String_Node_Str"";
      }
      addPropName(styleBuffer,HTMLTags.ATTR_BACKGROUND_POSITION);
      addPropValue(styleBuffer,x);
      addPropValue(styleBuffer,y);
      styleBuffer.append(';');
    }
  }
}","/** 
 * Build the background style string.
 * @param styleBuffer The <code>StringBuffer</code> to which the result is output.
 * @param style The style object.
 * @param emitter The <code>HTMLReportEmitter</code> object which provides resource manager and hyperlink builder objects.
 */
public static void buildBackground(StringBuffer styleBuffer,IStyle style,HTMLReportEmitter emitter){
  buildProperty(styleBuffer,HTMLTags.ATTR_BACKGROUND_COLOR,style.getBackgroundColor());
  String image=style.getBackgroundImage();
  if (image == null || ""String_Node_Str"".equalsIgnoreCase(image)) {
    return;
  }
  image=emitter.handleStyleImage(image,true);
  if (image != null && image.length() > 0) {
    buildURLProperty(styleBuffer,HTMLTags.ATTR_BACKGROUND_IMAGE,image);
    buildProperty(styleBuffer,HTMLTags.ATTR_BACKGROUND_REPEAT,style.getBackgroundRepeat());
    buildProperty(styleBuffer,HTMLTags.ATTR_BACKGROUND_ATTACHEMNT,style.getBackgroundAttachment());
    String x=style.getBackgroundPositionX();
    String y=style.getBackgroundPositionY();
    if (x != null || y != null) {
      if (x == null) {
        x=""String_Node_Str"";
      }
      if (y == null) {
        y=""String_Node_Str"";
      }
      addPropName(styleBuffer,HTMLTags.ATTR_BACKGROUND_POSITION);
      addPropValue(styleBuffer,x);
      addPropValue(styleBuffer,y);
      styleBuffer.append(';');
    }
  }
}",0.998185117967332
71182,"/** 
 * handle style image
 * @param uri uri in style image
 * @return
 */
public String handleStyleImage(String uri){
  ReportDesignHandle design=(ReportDesignHandle)runnable.getDesignHandle();
  URL url=design.findResource(uri,IResourceLocator.IMAGE);
  if (url == null) {
    return uri;
  }
  uri=url.toExternalForm();
  Image image=new Image(uri);
  image.setReportRunnable(runnable);
  image.setRenderOption(renderOption);
  String imgUri=null;
  if (imageHandler != null) {
switch (image.getSource()) {
case IImage.URL_IMAGE:
      imgUri=imageHandler.onURLImage(image,reportContext);
    break;
case IImage.FILE_IMAGE:
  imgUri=imageHandler.onFileImage(image,reportContext);
break;
case IImage.INVALID_IMAGE:
break;
default :
assert(false);
}
}
return imgUri;
}","/** 
 * handle style image
 * @param uri uri in style image
 * @param isBackground Is this image a used for a background?
 * @return
 */
public String handleStyleImage(String uri,boolean isBackground){
  ReportDesignHandle design=(ReportDesignHandle)runnable.getDesignHandle();
  URL url=design.findResource(uri,IResourceLocator.IMAGE);
  if (url == null) {
    return uri;
  }
  uri=url.toExternalForm();
  Image image=null;
  if (isBackground && SvgFile.isSvg(uri)) {
    try {
      byte[] buffer=SvgFile.transSvgToArray(uri);
      image=new Image(buffer,uri,""String_Node_Str"");
    }
 catch (    IOException e) {
      image=new Image(uri);
    }
  }
 else {
    image=new Image(uri);
  }
  image.setReportRunnable(runnable);
  image.setRenderOption(renderOption);
  String imgUri=null;
  if (imageHandler != null) {
switch (image.getSource()) {
case IImage.URL_IMAGE:
      imgUri=imageHandler.onURLImage(image,reportContext);
    break;
case IImage.FILE_IMAGE:
  imgUri=imageHandler.onFileImage(image,reportContext);
break;
case IImage.CUSTOM_IMAGE:
imgUri=imageHandler.onCustomImage(image,reportContext);
break;
case IImage.INVALID_IMAGE:
break;
default :
assert(false);
}
}
return imgUri;
}",0.7693089430894309
71183,"public void startNode(Node node,HashMap cssStyles){
  String nodeName=node.getNodeName();
  HashMap cssStyle=(HashMap)cssStyles.get(node);
  writer.openTag(nodeName);
  NamedNodeMap attributes=node.getAttributes();
  if (attributes != null) {
    for (int i=0; i < attributes.getLength(); i++) {
      Node attribute=attributes.item(i);
      String attrName=attribute.getNodeName();
      String attrValue=attribute.getNodeValue();
      if (attrValue != null) {
        if (""String_Node_Str"".equalsIgnoreCase(nodeName) && ""String_Node_Str"".equalsIgnoreCase(attrName)) {
          String attrValueTrue=handleStyleImage(attrValue);
          if (attrValueTrue != null) {
            attrValue=attrValueTrue;
          }
        }
        writer.attribute(attrName,attrValue);
      }
    }
  }
  if (cssStyle != null) {
    StringBuffer buffer=new StringBuffer();
    Iterator ite=cssStyle.entrySet().iterator();
    while (ite.hasNext()) {
      Map.Entry entry=(Map.Entry)ite.next();
      Object keyObj=entry.getKey();
      Object valueObj=entry.getValue();
      if (keyObj == null || valueObj == null) {
        continue;
      }
      String key=keyObj.toString();
      String value=valueObj.toString();
      buffer.append(key);
      buffer.append(""String_Node_Str"");
      if (""String_Node_Str"".equalsIgnoreCase(key)) {
        String valueTrue=handleStyleImage(value);
        if (valueTrue != null) {
          value=valueTrue;
        }
        buffer.append(""String_Node_Str"");
        buffer.append(value);
        buffer.append(""String_Node_Str"");
      }
 else {
        buffer.append(value);
      }
      buffer.append(""String_Node_Str"");
    }
    if (buffer.length() != 0) {
      writer.attribute(""String_Node_Str"",buffer.toString());
    }
  }
}","public void startNode(Node node,HashMap cssStyles){
  String nodeName=node.getNodeName();
  HashMap cssStyle=(HashMap)cssStyles.get(node);
  writer.openTag(nodeName);
  NamedNodeMap attributes=node.getAttributes();
  if (attributes != null) {
    for (int i=0; i < attributes.getLength(); i++) {
      Node attribute=attributes.item(i);
      String attrName=attribute.getNodeName();
      String attrValue=attribute.getNodeValue();
      if (attrValue != null) {
        if (""String_Node_Str"".equalsIgnoreCase(nodeName) && ""String_Node_Str"".equalsIgnoreCase(attrName)) {
          String attrValueTrue=handleStyleImage(attrValue);
          if (attrValueTrue != null) {
            attrValue=attrValueTrue;
          }
        }
        writer.attribute(attrName,attrValue);
      }
    }
  }
  if (cssStyle != null) {
    StringBuffer buffer=new StringBuffer();
    Iterator ite=cssStyle.entrySet().iterator();
    while (ite.hasNext()) {
      Map.Entry entry=(Map.Entry)ite.next();
      Object keyObj=entry.getKey();
      Object valueObj=entry.getValue();
      if (keyObj == null || valueObj == null) {
        continue;
      }
      String key=keyObj.toString();
      String value=valueObj.toString();
      buffer.append(key);
      buffer.append(""String_Node_Str"");
      if (""String_Node_Str"".equalsIgnoreCase(key)) {
        String valueTrue=handleStyleImage(value,true);
        if (valueTrue != null) {
          value=valueTrue;
        }
        buffer.append(""String_Node_Str"");
        buffer.append(value);
        buffer.append(""String_Node_Str"");
      }
 else {
        buffer.append(value);
      }
      buffer.append(""String_Node_Str"");
    }
    if (buffer.length() != 0) {
      writer.attribute(""String_Node_Str"",buffer.toString());
    }
  }
}",0.9985887665819928
71184,"public void initialize(IEmitterServices service){
  this.service=service;
  if (service != null) {
    this.out=EmitterUtil.getOuputStream(service,""String_Node_Str"" + getOutputFormat());
  }
  context.setTempFileDir(service.getReportEngine().getConfig().getTempDir());
}","public void initialize(IEmitterServices service){
  this.service=service;
  if (service != null) {
    this.out=EmitterUtil.getOuputStream(service,""String_Node_Str"" + getOutputFormat());
  }
  context.setTempFileDir(service.getReportEngine().getConfig().getTempDir());
  IReportContext reportContext=service.getReportContext();
  if (reportContext != null) {
    Locale locale=reportContext.getLocale();
    if (locale != null)     context.setLocale(ULocale.forLocale(locale));
  }
}",0.7171314741035857
71185,"private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(type));
  byte[] imageData=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
  if (imageData != null) {
    return new ImageData(image,entry,type,imageData,container);
  }
 else {
    return createData(image.getAltText(),entry);
  }
}","private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(type));
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    return createData(altText,entry);
  }
  byte[] imageData=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
  if (imageData != null) {
    return new ImageData(image,entry,type,imageData,container);
  }
 else {
    return createData(image.getAltText(),entry);
  }
}",0.7527216174183515
71186,"public ExcelLayoutEngine(PageDef page,ExcelContext context,ExcelEmitter emitter){
  this.context=context;
  this.emitter=emitter;
  initalize(page);
}","public ExcelLayoutEngine(PageDef page,ExcelContext context,ExcelEmitter emitter){
  this.context=context;
  this.emitter=emitter;
  ULocale locale=context.getLocale();
  if (locale == null) {
    locale=ULocale.getDefault();
  }
  EngineResourceHandle resourceHandle=new EngineResourceHandle(locale);
  messageFlashObjectNotSupported=resourceHandle.getMessage(MessageConstants.FLASH_OBJECT_NOT_SUPPORTED_PROMPT);
  initalize(page);
}",0.5145797598627787
71187,"public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  InlineFlag inlineFlag=getInlineFlag(style);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      if (null != reportContext) {
        ULocale locale=ULocale.forLocale(reportContext.getLocale());
        EngineResourceHandle handle=new EngineResourceHandle(locale);
        altText=handle.getMessage(MessageConstants.FLASH_OBJECT_NOT_SUPPORTED_PROMPT);
      }
    }
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  byte[] data=org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.parseImage(image,image.getImageSource(),uri,mimeType,extension);
  if (data == null || data.length == 0) {
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  int defaultW=0;
  int defaultH=0;
  try {
    Image imageData=javax.imageio.ImageIO.read(new ByteArrayInputStream(data));
    if (imageData != null) {
      defaultW=imageData.getWidth(null);
      defaultH=imageData.getHeight(null);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  double height=WordUtil.convertImageSize(image.getHeight(),defaultH);
  double width=WordUtil.convertImageSize(image.getWidth(),defaultW);
  writeBookmark(image);
  writeToc(image);
  HyperlinkInfo hyper=getHyperlink(image);
  wordWriter.drawImage(data,height,width,hyper,style,inlineFlag,altText,uri);
}","public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  InlineFlag inlineFlag=getInlineFlag(style);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (altText == null) {
      altText=messageFlashObjectNotSupported;
    }
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  byte[] data=org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.parseImage(image,image.getImageSource(),uri,mimeType,extension);
  if (data == null || data.length == 0) {
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  int defaultW=0;
  int defaultH=0;
  try {
    Image imageData=javax.imageio.ImageIO.read(new ByteArrayInputStream(data));
    if (imageData != null) {
      defaultW=imageData.getWidth(null);
      defaultH=imageData.getHeight(null);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  double height=WordUtil.convertImageSize(image.getHeight(),defaultH);
  double width=WordUtil.convertImageSize(image.getWidth(),defaultW);
  writeBookmark(image);
  writeToc(image);
  HyperlinkInfo hyper=getHyperlink(image);
  wordWriter.drawImage(data,height,width,hyper,style,inlineFlag,altText,uri);
}",0.8981081978094922
71188,"public void initialize(IEmitterServices service){
  if (service != null) {
    this.out=EmitterUtil.getOuputStream(service,""String_Node_Str"" + getOutputFormat());
    this.reportRunnable=service.getReportRunnable();
    this.actionHandler=(IHTMLActionHandler)service.getOption(RenderOption.ACTION_HANDLER);
    this.reportContext=service.getReportContext();
  }
  context=new EmitterContext();
}","public void initialize(IEmitterServices service){
  if (service != null) {
    this.out=EmitterUtil.getOuputStream(service,""String_Node_Str"" + getOutputFormat());
    this.reportRunnable=service.getReportRunnable();
    this.actionHandler=(IHTMLActionHandler)service.getOption(RenderOption.ACTION_HANDLER);
    reportContext=service.getReportContext();
    ULocale locale=null;
    if (reportContext != null) {
      locale=ULocale.forLocale(reportContext.getLocale());
    }
    if (locale == null) {
      locale=ULocale.getDefault();
    }
    EngineResourceHandle resourceHandle=new EngineResourceHandle(locale);
    messageFlashObjectNotSupported=resourceHandle.getMessage(MessageConstants.FLASH_OBJECT_NOT_SUPPORTED_PROMPT);
  }
  context=new EmitterContext();
}",0.6122098022355976
71189,"protected void updateRtLFlag() throws EngineException {
  if (renderOptions == null)   return;
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null)   return;
  Report report=executionContext.getReport();
  AbstractStyle rootStyle=(AbstractStyle)report.getStyles().get(report.getRootStyleName());
  ReportDesignHandle handle=(ReportDesignHandle)runnable.getDesignHandle();
  if (handle != null) {
    Object bidiFlag=renderOptions.getOption(IRenderOption.RTL_FLAG);
    String bidiOrientation=null;
    if (bidiFlag != null) {
      if (Boolean.TRUE.equals(bidiFlag)) {
        bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
      }
 else {
        bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
      }
      try {
        handle.setBidiOrientation(bidiOrientation);
        rootStyle.setDirection(bidiOrientation);
      }
 catch (      SemanticException e) {
        log.log(Level.WARNING,""String_Node_Str"",e);
        throw new EngineException(""String_Node_Str"");
      }
    }
 else     if (handle.isDirectionRTL()) {
      renderOptions.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
      IRenderOption renderOptions2=executionContext.getRenderOption();
      if (renderOptions2 != null) {
        renderOptions2.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
        executionContext.setRenderOption(renderOptions2);
      }
    }
  }
}","protected void updateRtLFlag() throws EngineException {
  if (renderOptions == null)   return;
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null)   return;
  ReportDesignHandle handle=(ReportDesignHandle)runnable.getDesignHandle();
  if (handle != null) {
    Object bidiFlag=renderOptions.getOption(IRenderOption.RTL_FLAG);
    String bidiOrientation=null;
    if (bidiFlag != null) {
      if (Boolean.TRUE.equals(bidiFlag)) {
        bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
      }
 else {
        bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
      }
      try {
        handle.setBidiOrientation(bidiOrientation);
        Report report=executionContext.getReport();
        AbstractStyle rootStyle=(AbstractStyle)report.getStyles().get(report.getRootStyleName());
{
          if (rootStyle != null) {
            rootStyle.setDirection(bidiOrientation);
          }
        }
      }
 catch (      SemanticException e) {
        log.log(Level.WARNING,""String_Node_Str"",e);
        throw new EngineException(""String_Node_Str"");
      }
    }
 else     if (handle.isDirectionRTL()) {
      renderOptions.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
      IRenderOption renderOptions2=executionContext.getRenderOption();
      if (renderOptions2 != null) {
        renderOptions2.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
        executionContext.setRenderOption(renderOptions2);
      }
    }
  }
}",0.8764278296988577
71190,"public static String convertColor(String value){
  if (value == null || ""String_Node_Str"".equalsIgnoreCase(value)) {
    return null;
  }
 else   return value.replace(""String_Node_Str"",""String_Node_Str"");
}","public static String convertColor(String value){
  if (value == null || ""String_Node_Str"".equalsIgnoreCase(value) || ""String_Node_Str"".equalsIgnoreCase(value)) {
    return null;
  }
 else   return value.replace(""String_Node_Str"",""String_Node_Str"");
}",0.901531728665208
71191,"protected void drawBackgroundImage(float x,float y,float width,float height,String repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  contentByte.saveState();
  Image img=null;
  try {
    img=Image.getInstance(new URL(imageUrl));
    if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,img.scaledWidth());
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,img.scaledHeight());
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=contentByte.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),translationX,translationY);
      contentByte.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > img.scaledWidth()) {
        if (height - absPosY > img.scaledHeight()) {
          template=contentByte.createTemplate(img.scaledWidth(),img.scaledHeight());
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
        }
 else {
          template=contentByte.createTemplate(img.scaledWidth(),height);
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height);
        }
      }
      while (remainX > 0) {
        if (remainX < img.scaledWidth()) {
          if (height - absPosY > img.scaledHeight()) {
            PdfTemplate templateX=contentByte.createTemplate(remainX,img.scaledHeight());
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - img.scaledHeight());
          }
 else {
            PdfTemplate templateX=contentByte.createTemplate(remainX,height);
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height - absPosY);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > img.scaledHeight())           contentByte.addTemplate(template,x + width - remainX,y - absPosY - img.scaledHeight());
 else           contentByte.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=img.scaledWidth();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > img.scaledHeight()) {
        template=contentByte.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        if (remainY < img.scaledHeight()) {
          PdfTemplate templateY=contentByte.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,remainY);
          templateY.addImage(img,width > img.scaledWidth() ? img.scaledWidth() : width - absPosX,0,0,img.scaledHeight(),0,-(img.scaledHeight() - remainY));
          contentByte.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          contentByte.addTemplate(template,x + absPosX,y - height + remainY - img.scaledHeight());
          remainY-=img.scaledHeight();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width > img.scaledWidth() && height > img.scaledHeight()) {
        template=contentByte.createTemplate(img.scaledWidth(),img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < img.scaledHeight()) {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateXY=contentByte.createTemplate(remainX,remainY);
              templateXY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              contentByte.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=contentByte.createTemplate(img.scaledWidth(),remainY);
              templateY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              contentByte.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=img.scaledWidth();
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateX=contentByte.createTemplate(remainX,img.scaledHeight());
              templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
              contentByte.addTemplate(templateX,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX=0;
            }
 else {
              contentByte.addTemplate(template,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX-=img.scaledWidth();
            }
          }
          remainY-=img.scaledHeight();
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  contentByte.restoreState();
}","protected void drawBackgroundImage(float x,float y,float width,float height,String repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  contentByte.saveState();
  Image img=null;
  try {
    try {
      img=Image.getInstance(new URL(imageUrl));
    }
 catch (    IOException e) {
      if (SvgFile.isSvg(imageUrl)) {
        try {
          img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
        }
 catch (        IOException ex) {
          throw ex;
        }
      }
 else {
        throw e;
      }
    }
    if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,img.scaledWidth());
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,img.scaledHeight());
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=contentByte.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),translationX,translationY);
      contentByte.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > img.scaledWidth()) {
        if (height - absPosY > img.scaledHeight()) {
          template=contentByte.createTemplate(img.scaledWidth(),img.scaledHeight());
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
        }
 else {
          template=contentByte.createTemplate(img.scaledWidth(),height);
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height);
        }
      }
      while (remainX > 0) {
        if (remainX < img.scaledWidth()) {
          if (height - absPosY > img.scaledHeight()) {
            PdfTemplate templateX=contentByte.createTemplate(remainX,img.scaledHeight());
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - img.scaledHeight());
          }
 else {
            PdfTemplate templateX=contentByte.createTemplate(remainX,height);
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height - absPosY);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > img.scaledHeight())           contentByte.addTemplate(template,x + width - remainX,y - absPosY - img.scaledHeight());
 else           contentByte.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=img.scaledWidth();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > img.scaledHeight()) {
        template=contentByte.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        if (remainY < img.scaledHeight()) {
          PdfTemplate templateY=contentByte.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,remainY);
          templateY.addImage(img,width > img.scaledWidth() ? img.scaledWidth() : width - absPosX,0,0,img.scaledHeight(),0,-(img.scaledHeight() - remainY));
          contentByte.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          contentByte.addTemplate(template,x + absPosX,y - height + remainY - img.scaledHeight());
          remainY-=img.scaledHeight();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width > img.scaledWidth() && height > img.scaledHeight()) {
        template=contentByte.createTemplate(img.scaledWidth(),img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < img.scaledHeight()) {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateXY=contentByte.createTemplate(remainX,remainY);
              templateXY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              contentByte.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=contentByte.createTemplate(img.scaledWidth(),remainY);
              templateY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              contentByte.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=img.scaledWidth();
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateX=contentByte.createTemplate(remainX,img.scaledHeight());
              templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
              contentByte.addTemplate(templateX,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX=0;
            }
 else {
              contentByte.addTemplate(template,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX-=img.scaledWidth();
            }
          }
          remainY-=img.scaledHeight();
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  contentByte.restoreState();
}",0.9767441860465116
71192,"/** 
 * Draws the background image at the contentByteUnder of the pdf with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PDF where the image is positioned
 * @param y the start Y coordinate at the PDF where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
private void drawBackgroundImage(String imageURI,int x,int y,int width,int height,float positionX,float positionY,String repeat,boolean xMode,boolean yMode){
  if (null == imageURI) {
    return;
  }
  if (imageURI == null || ""String_Node_Str"".equals(imageURI)) {
    return;
  }
  if (null == repeat) {
    repeat=""String_Node_Str"";
  }
  Image img=null;
  try {
    img=Image.getInstance(new URL(imageURI));
    int absPosX, absPosY;
    if (xMode) {
      absPosX=(int)((width - img.scaledWidth() * PDFConstants.LAYOUT_TO_PDF_RATIO) * positionX);
    }
 else {
      absPosX=(int)positionX;
    }
    if (yMode) {
      absPosY=(int)((height - img.scaledHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) * positionY);
    }
 else {
      absPosY=(int)positionY;
    }
    pageGraphic.drawBackgroundImage(x,y,width,height,repeat,imageURI,absPosX,absPosY);
  }
 catch (  Exception e) {
    log(e,Level.WARNING);
  }
}","/** 
 * Draws the background image at the contentByteUnder of the pdf with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PDF where the image is positioned
 * @param y the start Y coordinate at the PDF where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
private void drawBackgroundImage(String imageURI,int x,int y,int width,int height,float positionX,float positionY,String repeat,boolean xMode,boolean yMode){
  if (null == imageURI) {
    return;
  }
  if (imageURI == null || ""String_Node_Str"".equals(imageURI)) {
    return;
  }
  if (null == repeat) {
    repeat=""String_Node_Str"";
  }
  Image img=null;
  try {
    try {
      img=Image.getInstance(new URL(imageURI));
    }
 catch (    IOException e) {
      if (SvgFile.isSvg(imageURI)) {
        try {
          img=Image.getInstance(SvgFile.transSvgToArray(imageURI));
        }
 catch (        IOException ex) {
          throw ex;
        }
      }
 else {
        throw e;
      }
    }
    int absPosX, absPosY;
    if (xMode) {
      absPosX=(int)((width - img.scaledWidth() * PDFConstants.LAYOUT_TO_PDF_RATIO) * positionX);
    }
 else {
      absPosX=(int)positionX;
    }
    if (yMode) {
      absPosY=(int)((height - img.scaledHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) * positionY);
    }
 else {
      absPosY=(int)positionY;
    }
    pageGraphic.drawBackgroundImage(x,y,width,height,repeat,imageURI,absPosX,absPosY);
  }
 catch (  Exception e) {
    log(e,Level.WARNING);
  }
}",0.9198100027940764
71193,"public void saveReport(ModuleHandle moduleHandle,Object element,IPath origReportPath,IProgressMonitor monitor){
  if (element instanceof IFileEditorInput) {
    IFileEditorInput input=(IFileEditorInput)element;
    saveFile(moduleHandle,input.getFile(),origReportPath,monitor);
  }
 else   if (element instanceof IEditorInput) {
    IPath path=getInputPath((IEditorInput)element);
    if (path != null) {
      saveFile(moduleHandle,path.toFile(),origReportPath,monitor);
    }
  }
}","public void saveReport(ModuleHandle moduleHandle,Object element,IPath origReportPath,IProgressMonitor monitor){
  if (element instanceof IFileEditorInput) {
    IFileEditorInput input=(IFileEditorInput)element;
    IFile file=input.getFile();
    if (ResourcesPlugin.getWorkspace().validateEdit(new IFile[]{file},IWorkspace.VALIDATE_PROMPT).getSeverity() == IStatus.OK) {
      saveFile(moduleHandle,file,origReportPath,monitor);
    }
  }
 else   if (element instanceof IEditorInput) {
    IPath path=getInputPath((IEditorInput)element);
    if (path != null) {
      saveFile(moduleHandle,path.toFile(),origReportPath,monitor);
    }
  }
}",0.8291814946619217
71194,"/** 
 * Populate the sortings in a query.
 * @throws DataException
 */
private void populateSorting() throws DataException {
  List sorts=this.baseQueryDefn.getSorts();
  if (sorts != null && !sorts.isEmpty()) {
    IQuery.SortSpec[] sortSpecs=new IQuery.SortSpec[sorts.size()];
    Iterator it=sorts.iterator();
    for (int i=0; it.hasNext(); i++) {
      ISortDefinition src=(ISortDefinition)it.next();
      int sortIndex=-1;
      String sortKey=src.getColumn();
      if (sortKey == null)       sortKey=src.getExpression().getText();
 else {
        sortKey=getColumnRefExpression(sortKey);
      }
      temporaryComputedColumns.add(new ComputedColumn(""String_Node_Str"" + i + ""String_Node_Str"",sortKey,DataType.ANY_TYPE));
      sortIndex=-1;
      sortKey=String.valueOf(""String_Node_Str"" + i + ""String_Node_Str"");
      IQuery.SortSpec dest=new IQuery.SortSpec(sortIndex,sortKey,src.getSortDirection() == ISortDefinition.SORT_ASC,src.getSortStrength() == -1 ? null : Collator.getInstance());
      sortSpecs[i]=dest;
    }
    odiQuery.setOrdering(Arrays.asList(sortSpecs));
  }
}","/** 
 * Populate the sortings in a query.
 * @throws DataException
 */
private void populateSorting() throws DataException {
  List sorts=this.baseQueryDefn.getSorts();
  if (sorts != null && !sorts.isEmpty()) {
    IQuery.SortSpec[] sortSpecs=new IQuery.SortSpec[sorts.size()];
    Iterator it=sorts.iterator();
    for (int i=0; it.hasNext(); i++) {
      ISortDefinition src=(ISortDefinition)it.next();
      int sortIndex=-1;
      String sortKey=src.getColumn();
      if (sortKey == null)       sortKey=src.getExpression().getText();
 else {
        sortKey=getColumnRefExpression(sortKey);
      }
      temporaryComputedColumns.add(new ComputedColumn(""String_Node_Str"" + i + ""String_Node_Str"",sortKey,getExpressionDataTypeOfSortKey(sortKey)));
      sortIndex=-1;
      sortKey=String.valueOf(""String_Node_Str"" + i + ""String_Node_Str"");
      IQuery.SortSpec dest=new IQuery.SortSpec(sortIndex,sortKey,src.getSortDirection() == ISortDefinition.SORT_ASC,src.getSortStrength() == -1 ? null : Collator.getInstance());
      sortSpecs[i]=dest;
    }
    odiQuery.setOrdering(Arrays.asList(sortSpecs));
  }
}",0.9818181818181818
71195,"/** 
 * Based on current dimensionCursor position, get current edge info for certain dimensionAxis.
 * @param dimensionAxis
 * @return
 */
private EdgeInfo findCurrentEdgeInfo(int dimensionAxis){
  if (dimensionAxis < 0 || dimensionAxis > this.dimAxis.length) {
    return null;
  }
  EdgeInfo tempEdgeInfo1=null, tempEdgeInfo2=null, edgeInfo=null;
  int endPosition=0;
  for (int index=0; index <= dimensionAxis; index++) {
    if (dimensionAxis == index) {
      if (this.relationMap.currentRelation[index].size() > endPosition && this.dimensionCursorPosition[index] > -1 && this.dimensionCursorPosition[index] + endPosition < this.relationMap.currentRelation[index].size() && (tempEdgeInfo2 == null || this.dimensionCursorPosition[index] + endPosition < tempEdgeInfo2.firstChild)) {
        edgeInfo=(EdgeInfo)this.relationMap.currentRelation[index].get(this.dimensionCursorPosition[index] + endPosition);
      }
 else       if (this.dimensionCursorPosition[index] == -1)       return null;
      break;
    }
 else {
      if (this.dimensionCursorPosition[index] + endPosition < this.relationMap.currentRelation[index].size() && this.dimensionCursorPosition[index] > -1 && this.relationMap.currentRelation[index].size() > endPosition) {
        tempEdgeInfo1=(EdgeInfo)this.relationMap.currentRelation[index].get(this.dimensionCursorPosition[index] + endPosition);
        if (this.dimensionCursorPosition[index] + endPosition + 1 < this.relationMap.currentRelation[index].size()) {
          tempEdgeInfo2=(EdgeInfo)this.relationMap.currentRelation[index].get(this.dimensionCursorPosition[index] + endPosition + 1);
        }
      }
 else       return null;
      if (tempEdgeInfo1 != null) {
        endPosition=tempEdgeInfo1.firstChild;
      }
    }
  }
  return edgeInfo;
}","/** 
 * Based on current dimensionCursor position, get current edge info for certain dimensionAxis.
 * @param dimensionAxis
 * @return
 */
EdgeInfo findCurrentEdgeInfo(int dimensionAxis){
  if (dimensionAxis < 0 || dimensionAxis > this.dimAxis.length) {
    return null;
  }
  EdgeInfo tempEdgeInfo1=null, tempEdgeInfo2=null, edgeInfo=null;
  int endPosition=0;
  for (int index=0; index <= dimensionAxis; index++) {
    if (dimensionAxis == index) {
      if (this.relationMap.currentRelation[index].size() > endPosition && this.dimensionCursorPosition[index] > -1 && this.dimensionCursorPosition[index] + endPosition < this.relationMap.currentRelation[index].size() && (tempEdgeInfo2 == null || this.dimensionCursorPosition[index] + endPosition < tempEdgeInfo2.firstChild)) {
        edgeInfo=(EdgeInfo)this.relationMap.currentRelation[index].get(this.dimensionCursorPosition[index] + endPosition);
      }
 else       if (this.dimensionCursorPosition[index] == -1)       return null;
      break;
    }
 else {
      if (this.dimensionCursorPosition[index] + endPosition < this.relationMap.currentRelation[index].size() && this.dimensionCursorPosition[index] > -1 && this.relationMap.currentRelation[index].size() > endPosition) {
        tempEdgeInfo1=(EdgeInfo)this.relationMap.currentRelation[index].get(this.dimensionCursorPosition[index] + endPosition);
        if (this.dimensionCursorPosition[index] + endPosition + 1 < this.relationMap.currentRelation[index].size()) {
          tempEdgeInfo2=(EdgeInfo)this.relationMap.currentRelation[index].get(this.dimensionCursorPosition[index] + endPosition + 1);
        }
      }
 else       return null;
      if (tempEdgeInfo1 != null) {
        endPosition=tempEdgeInfo1.firstChild;
      }
    }
  }
  return edgeInfo;
}",0.997752808988764
71196,"/** 
 * @param dimAxisIndex
 * @param sortType
 * @return
 * @throws OLAPException
 */
protected Object fetchValueFromMirror(int dimAxisIndex,int sortType) throws OLAPException {
  if (this.dimTraverse.dimensionCursorPosition[dimAxisIndex] < 0 || this.dimTraverse.dimensionCursorPosition[dimAxisIndex] >= edgeDimensRelation.mirrorLength[dimAxisIndex])   throw new OLAPException(ResourceConstants.RD_EXPR_RESULT_SET_NOT_START);
  if (sortType == IDimensionSortDefn.SORT_UNDEFINED) {
    return this.dimAxis[dimAxisIndex].getDisctinctValue().get(this.dimTraverse.dimensionCursorPosition[dimAxisIndex]);
  }
  Collection collection=null;
  try {
    collection=fetchValueCollectionInEdgeInfo(dimAxisIndex);
  }
 catch (  IOException e) {
  }
  Vector v=this.dimAxis[dimAxisIndex].getDisctinctValue();
  v.removeAll(collection);
  if (sortType == IDimensionSortDefn.SORT_ASC) {
    for (int i=0, startSize=v.size(); i < collection.size(); i++) {
      v.insertElementAt(collection.iterator().next(),startSize);
      startSize++;
    }
  }
 else {
    Iterator iter=collection.iterator();
    int index=0;
    while (iter.hasNext()) {
      v.insertElementAt(iter.next(),index);
      index++;
    }
  }
  return v.get(this.dimTraverse.dimensionCursorPosition[dimAxisIndex]);
}","/** 
 * @param dimAxisIndex
 * @param sortType
 * @return
 * @throws OLAPException
 */
protected Object fetchValueFromMirror(int dimAxisIndex,int sortType) throws OLAPException {
  if (this.dimTraverse.dimensionCursorPosition[dimAxisIndex] < 0 || this.dimTraverse.dimensionCursorPosition[dimAxisIndex] >= edgeDimensRelation.mirrorLength[dimAxisIndex])   throw new OLAPException(ResourceConstants.RD_EXPR_RESULT_SET_NOT_START);
  if (sortType == IDimensionSortDefn.SORT_UNDEFINED) {
    return this.dimAxis[dimAxisIndex].getDisctinctValue().get(this.dimTraverse.dimensionCursorPosition[dimAxisIndex]);
  }
  Collection collection=null;
  try {
    collection=fetchValueCollectionInEdgeInfo(dimAxisIndex);
  }
 catch (  IOException e) {
  }
  Vector v=this.dimAxis[dimAxisIndex].getDisctinctValue();
  v.removeAll(collection);
  Iterator iter=collection.iterator();
  if (sortType == IDimensionSortDefn.SORT_ASC) {
    for (int i=0, startSize=v.size(); i < collection.size(); i++) {
      v.insertElementAt(iter.next(),startSize);
      startSize++;
    }
  }
 else {
    int index=0;
    while (iter.hasNext()) {
      v.insertElementAt(iter.next(),index);
      index++;
    }
  }
  return v.get(this.dimTraverse.dimensionCursorPosition[dimAxisIndex]);
}",0.9584487534626038
71197,"/** 
 * @param dimAxisIndex
 * @return
 * @throws IOException
 */
private Collection fetchValueCollectionInEdgeInfo(int dimAxisIndex) throws IOException {
  Set value=new HashSet();
  int edgeStart=this.getEdgeStart(this.mirrorStartPosition - 1);
  int edgeEnd=this.getEdgeEnd(this.mirrorStartPosition - 1);
  while (edgeStart <= edgeEnd) {
    this.rs.seek(edgeStart);
    value.add(this.rs.getLevelKeyValue(dimAxisIndex)[this.rs.getLevelKeyColCount(dimAxisIndex) - 1]);
    edgeStart++;
  }
  return value;
}","/** 
 * @param dimAxisIndex
 * @return
 * @throws IOException
 */
private Collection fetchValueCollectionInEdgeInfo(int dimAxisIndex) throws IOException {
  Set value=new LinkedHashSet();
  EdgeInfo info=this.dimTraverse.findCurrentEdgeInfo(this.mirrorStartPosition - 1);
  int index=this.edgeDimensRelation.currentRelation[this.mirrorStartPosition - 1].indexOf(info);
  EdgeInfo nextEdgeInfo=null;
  if (index < this.edgeDimensRelation.currentRelation[this.mirrorStartPosition - 1].size() - 1) {
    nextEdgeInfo=(EdgeInfo)this.edgeDimensRelation.currentRelation[this.mirrorStartPosition - 1].get(index + 1);
  }
  int edgeStart=info == null ? this.rs.length() - 1 : info.firstChild;
  int edgeEnd=nextEdgeInfo == null ? this.rs.length() - 1 : nextEdgeInfo.firstChild;
  if (edgeStart >= 0) {
    while (edgeStart <= edgeEnd) {
      this.rs.seek(edgeStart);
      value.add(this.rs.getLevelKeyValue(dimAxisIndex)[this.rs.getLevelKeyColCount(dimAxisIndex) - 1]);
      edgeStart++;
    }
  }
  return value;
}",0.5789473684210527
71198,"public ImageData(IImageContent image,StyleEntry style,int datatype,XlsContainer currentContainer){
  super();
  this.style=style;
  this.datatype=datatype;
  height=ExcelUtil.convertImageSize(image.getHeight(),0);
  width=minWidth(currentContainer.getSizeInfo().getWidth(),image.getWidth());
  altText=image.getAltText();
  imageUrl=image.getURI();
  imageData=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
  container=currentContainer;
  rowSpanInDesign=0;
}","public ImageData(IImageContent image,StyleEntry style,int datatype,byte[] imageData,XlsContainer currentContainer){
  super();
  this.style=style;
  this.datatype=datatype;
  height=ExcelUtil.convertImageSize(image.getHeight(),0);
  width=minWidth(currentContainer.getSizeInfo().getWidth(),image.getWidth());
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageData;
  container=currentContainer;
  rowSpanInDesign=0;
}",0.8565531475748194
71199,"private ImageData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(type));
  return new ImageData(image,entry,type,container);
}","private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(type));
  byte[] imageData=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
  if (imageData != null) {
    return new ImageData(image,entry,type,imageData,container);
  }
 else {
    return createData(image.getAltText(),entry);
  }
}",0.6612244897959184
71200,"public void addImageData(IImageContent image,IStyle style,HyperlinkDef link){
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo rule=container.getSizeInfo();
  StyleEntry entry=engine.getStyle(style,rule);
  ImageData data=createImageData(image,entry,container);
  data.setHyperlinkDef(link);
  data.setSizeInfo(rule);
  addData(data);
}","public void addImageData(IImageContent image,IStyle style,HyperlinkDef link){
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo rule=container.getSizeInfo();
  StyleEntry entry=engine.getStyle(style,rule);
  SheetData data=createImageData(image,entry,container);
  data.setHyperlinkDef(link);
  data.setSizeInfo(rule);
  addData(data);
}",0.9859154929577464
71201,"/** 
 * Get the evaluated result by the ScriptExpression
 * @param aggrIndex
 * @param aggrInfo
 * @param i
 * @throws DataException
 */
private void evaluateArgsValue(int aggrIndex,IAggrInfo aggrInfo,int i,boolean isOptional) throws DataException {
  if (i >= aggrInfo.getArgument().length) {
    return;
  }
  IBaseExpression argExpr=aggrInfo.getArgument()[i];
  if (!isOptional) {
    checkExpression(aggrInfo,argExpr);
  }
 else   if (argExpr == null || ((IScriptExpression)argExpr).getText() == null || ((IScriptExpression)argExpr).getText().trim().length() == 0) {
    aggrArgs[aggrIndex][i]=null;
    return;
  }
  try {
    aggrArgs[aggrIndex][i]=ExprEvaluateUtil.evaluateValue(argExpr,this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope(),this.populator.getSession().getEngineContext().getScriptContext());
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * Get the evaluated result by the ScriptExpression
 * @param aggrIndex
 * @param aggrInfo
 * @param i
 * @throws DataException
 */
private void evaluateArgsValue(int aggrIndex,IAggrInfo aggrInfo,int i,IParameterDefn paramDefn) throws DataException {
  if (i >= aggrInfo.getArgument().length) {
    return;
  }
  IBaseExpression argExpr=aggrInfo.getArgument()[i];
  if (!paramDefn.isOptional()) {
    if (!isFunctionCount(aggrInfo) && isEmptyScriptExpression(argExpr)) {
      throw new DataException(ResourceConstants.AGGREGATION_ARGUMENT_CANNOT_BE_BLANK,new Object[]{paramDefn.getName(),aggrInfo.getName()});
    }
  }
 else   if (argExpr == null || ((IScriptExpression)argExpr).getText() == null || ((IScriptExpression)argExpr).getText().trim().length() == 0) {
    aggrArgs[aggrIndex][i]=null;
    return;
  }
  try {
    aggrArgs[aggrIndex][i]=ExprEvaluateUtil.evaluateValue(argExpr,this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope(),this.populator.getSession().getEngineContext().getScriptContext());
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.8621809744779583
71202,"/** 
 * Calculate the value by row
 * @param aggrIndex
 * @param startingGroupLevel
 * @param endingGroupLevel
 * @param context
 * @param scope
 * @throws DataException
 */
private boolean onRow(int aggrIndex,int startingGroupLevel,int endingGroupLevel,boolean populateValue) throws DataException {
  IAggrInfo aggrInfo=getAggrInfo(aggrIndex);
  Accumulator acc=null;
  boolean newGroup=false;
  IParameterDefn[] argDefs=aggrInfo.getAggregation().getParameterDefn();
  if (startingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc=accumulatorManagers[aggrIndex].next();
    acc.start();
    newGroup=true;
  }
 else {
    acc=accumulatorManagers[aggrIndex].getCurrentAccumulator();
  }
  boolean accepted=true;
  if (aggrInfo.getFilter() != null) {
    try {
      Object filterResult=ExprEvaluateUtil.evaluateValue(aggrInfo.getFilter(),this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope(),this.populator.getSession().getEngineContext().getScriptContext());
      if (filterResult == null)       accepted=true;
 else       accepted=DataTypeUtil.toBoolean(filterResult).booleanValue();
    }
 catch (    BirtException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  if (aggrInfo.getCalcualteLevel() > 0) {
    if (startingGroupLevel > aggrInfo.getCalcualteLevel())     accepted=false;
  }
  if (accepted) {
    final IBaseExpression[] arguments=aggrInfo.getArgument();
    if (!isFunctionCount(aggrInfo) && arguments == null) {
      DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
      wrapException(aggrIndex,e);
      return false;
    }
    try {
      int optionalAgrsNum=0;
      for (int i=0; i < argDefs.length; i++) {
        if (argDefs[i].isOptional()) {
          optionalAgrsNum++;
        }
        if (aggrInfo.getArgument() == null || i >= arguments.length + optionalAgrsNum) {
          throw new DataException(ResourceConstants.AGGREGATION_ARGUMENT_ERROR,new Object[]{argDefs[i].getName(),aggrInfo.getName()});
        }
        if (isEmptyAggrArgument(aggrInfo)) {
          aggrArgs[aggrIndex]=null;
        }
 else {
          evaluateArgsValue(aggrIndex,aggrInfo,i,argDefs[i].isOptional());
        }
      }
      if (aggrInfo.getArgument() == null || !isValidArgumentNumber(aggrInfo.getArgument().length,argDefs.length,optionalAgrsNum)) {
        DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
        wrapException(aggrIndex,e);
        return false;
      }
      acc.onRow(aggrArgs[aggrIndex]);
      newGroup=false;
    }
 catch (    DataException e) {
      wrapException(aggrIndex,e);
      return false;
    }
  }
  boolean isRunning=(aggrInfo.getAggregation().getType() == IAggrFunction.RUNNING_AGGR);
  if (isRunning && populateValue) {
    Object value=acc.getValue();
    currentRoundAggrValue[aggrIndex].add(value);
  }
  if (endingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc.finish();
    if ((!isRunning) && populateValue) {
      Object value=acc.getValue();
      currentRoundAggrValue[aggrIndex].add(value);
    }
  }
  return true;
}","/** 
 * Calculate the value by row
 * @param aggrIndex
 * @param startingGroupLevel
 * @param endingGroupLevel
 * @param context
 * @param scope
 * @throws DataException
 */
private boolean onRow(int aggrIndex,int startingGroupLevel,int endingGroupLevel,boolean populateValue) throws DataException {
  IAggrInfo aggrInfo=getAggrInfo(aggrIndex);
  Accumulator acc=null;
  boolean newGroup=false;
  IParameterDefn[] argDefs=aggrInfo.getAggregation().getParameterDefn();
  if (startingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc=accumulatorManagers[aggrIndex].next();
    acc.start();
    newGroup=true;
  }
 else {
    acc=accumulatorManagers[aggrIndex].getCurrentAccumulator();
  }
  boolean accepted=true;
  if (aggrInfo.getFilter() != null) {
    try {
      Object filterResult=ExprEvaluateUtil.evaluateValue(aggrInfo.getFilter(),this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope(),this.populator.getSession().getEngineContext().getScriptContext());
      if (filterResult == null)       accepted=true;
 else       accepted=DataTypeUtil.toBoolean(filterResult).booleanValue();
    }
 catch (    BirtException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  if (aggrInfo.getCalcualteLevel() > 0) {
    if (startingGroupLevel > aggrInfo.getCalcualteLevel())     accepted=false;
  }
  if (accepted) {
    final IBaseExpression[] arguments=aggrInfo.getArgument();
    if (!isFunctionCount(aggrInfo) && arguments == null) {
      DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
      wrapException(aggrIndex,e);
      return false;
    }
    try {
      int optionalAgrsNum=0;
      for (int i=0; i < argDefs.length; i++) {
        if (argDefs[i].isOptional()) {
          optionalAgrsNum++;
        }
        if (aggrInfo.getArgument() == null || i >= arguments.length + optionalAgrsNum) {
          throw new DataException(ResourceConstants.AGGREGATION_ARGUMENT_ERROR,new Object[]{argDefs[i].getName(),aggrInfo.getName()});
        }
        if (isEmptyAggrArgument(aggrInfo)) {
          aggrArgs[aggrIndex]=null;
        }
 else {
          evaluateArgsValue(aggrIndex,aggrInfo,i,argDefs[i]);
        }
      }
      if (aggrInfo.getArgument() == null || !isValidArgumentNumber(aggrInfo.getArgument().length,argDefs.length,optionalAgrsNum)) {
        DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
        wrapException(aggrIndex,e);
        return false;
      }
      acc.onRow(aggrArgs[aggrIndex]);
      newGroup=false;
    }
 catch (    DataException e) {
      wrapException(aggrIndex,e);
      return false;
    }
  }
  boolean isRunning=(aggrInfo.getAggregation().getType() == IAggrFunction.RUNNING_AGGR);
  if (isRunning && populateValue) {
    Object value=acc.getValue();
    currentRoundAggrValue[aggrIndex].add(value);
  }
  if (endingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc.finish();
    if ((!isRunning) && populateValue) {
      Object value=acc.getValue();
      currentRoundAggrValue[aggrIndex].add(value);
    }
  }
  return true;
}",0.9980155701419632
71203,"public Object visitListItem(ListItemDesign list,Object value){
  IDataQueryDefinition query;
  if (list.useCachedResult()) {
    query=getRefenceQuery(list);
    if (query == null) {
      registerUnresolvedQueryReference(list);
      return null;
    }
  }
 else {
    query=createQuery(list,(IDataQueryDefinition)value);
  }
  BaseQueryDefinition baseQuery=(BaseQueryDefinition)query;
  if (query == null) {
    handleListingBand(list.getHeader(),baseQuery,true,null);
    handleListingBand(list.getFooter(),baseQuery,true,null);
  }
 else {
    handleListingQuery(list,baseQuery);
    handleListingBand(list.getHeader(),baseQuery,true,null);
    SlotHandle groupsSlot=((ListHandle)list.getHandle()).getGroups();
    for (int i=0; i < list.getGroupCount(); i++) {
      handleListingGroup(list.getGroup(i),(GroupHandle)groupsSlot.get(i),query);
    }
    BandDesign detail=list.getDetail();
    if (!baseQuery.cacheQueryResults()) {
      if (detail == null || detail.getContentCount() == 0) {
        baseQuery.setUsesDetails(false);
      }
    }
    handleListingBand(detail,baseQuery,false,null);
    handleListingBand(list.getFooter(),baseQuery,true,null);
  }
  try {
    transformExpressions(list,baseQuery);
  }
 catch (  BirtException ex) {
    context.addException(list.getHandle(),ex);
  }
  return getResultQuery(query,value);
}","public Object visitListItem(ListItemDesign list,Object value){
  IDataQueryDefinition query;
  if (list.useCachedResult()) {
    query=getRefenceQuery(list);
    if (query == null) {
      registerUnresolvedQueryReference(list);
      return null;
    }
  }
 else {
    query=createQuery(list,(IDataQueryDefinition)value);
  }
  BaseQueryDefinition baseQuery=(BaseQueryDefinition)query;
  if (query == null) {
    handleListingBand(list.getHeader(),baseQuery,true,null);
    handleListingBand(list.getFooter(),baseQuery,true,null);
  }
 else {
    handleListingQuery(list,baseQuery);
    handleListingBand(list.getHeader(),baseQuery,true,null);
    SlotHandle groupsSlot=((ListHandle)list.getHandle()).getGroups();
    for (int i=0; i < list.getGroupCount(); i++) {
      handleListingGroup(list.getGroup(i),(GroupHandle)groupsSlot.get(i),query);
    }
    BandDesign detail=list.getDetail();
    setUsesDetails(detail,baseQuery);
    handleListingBand(detail,baseQuery,false,null);
    handleListingBand(list.getFooter(),baseQuery,true,null);
  }
  try {
    transformExpressions(list,baseQuery);
  }
 catch (  BirtException ex) {
    context.addException(list.getHandle(),ex);
  }
  return getResultQuery(query,value);
}",0.9344773790951638
71204,"public Object visitTableItem(TableItemDesign table,Object value){
  IDataQueryDefinition query;
  if (table.useCachedResult()) {
    query=getRefenceQuery(table);
    if (query == null) {
      registerUnresolvedQueryReference(table);
      return null;
    }
  }
 else {
    query=createQuery(table,(IDataQueryDefinition)value);
  }
  BaseQueryDefinition baseQuery=(BaseQueryDefinition)query;
  if (query == null) {
    handleListingBand(table.getHeader(),baseQuery,true,null);
    handleListingBand(table.getFooter(),baseQuery,true,null);
  }
 else {
    handleListingQuery(table,baseQuery);
    for (int i=0; i < table.getColumnCount(); i++) {
      handleColumn(table.getColumn(i),query);
    }
    handleListingBand(table.getHeader(),baseQuery,true,null);
    SlotHandle groupsSlot=((TableHandle)table.getHandle()).getGroups();
    for (int i=0; i < table.getGroupCount(); i++) {
      handleListingGroup(table.getGroup(i),(GroupHandle)groupsSlot.get(i),baseQuery);
    }
    BandDesign detail=table.getDetail();
    if (!baseQuery.cacheQueryResults()) {
      if (detail == null || detail.getContentCount() == 0) {
        baseQuery.setUsesDetails(false);
      }
    }
    handleListingBand(detail,baseQuery,false,null);
    handleListingBand(table.getFooter(),baseQuery,true,null);
  }
  try {
    transformExpressions(table,baseQuery);
  }
 catch (  BirtException ex) {
    context.addException(table.getHandle(),ex);
  }
  return getResultQuery(query,value);
}","public Object visitTableItem(TableItemDesign table,Object value){
  IDataQueryDefinition query;
  if (table.useCachedResult()) {
    query=getRefenceQuery(table);
    if (query == null) {
      registerUnresolvedQueryReference(table);
      return null;
    }
  }
 else {
    query=createQuery(table,(IDataQueryDefinition)value);
  }
  BaseQueryDefinition baseQuery=(BaseQueryDefinition)query;
  if (query == null) {
    handleListingBand(table.getHeader(),baseQuery,true,null);
    handleListingBand(table.getFooter(),baseQuery,true,null);
  }
 else {
    handleListingQuery(table,baseQuery);
    for (int i=0; i < table.getColumnCount(); i++) {
      handleColumn(table.getColumn(i),query);
    }
    handleListingBand(table.getHeader(),baseQuery,true,null);
    SlotHandle groupsSlot=((TableHandle)table.getHandle()).getGroups();
    for (int i=0; i < table.getGroupCount(); i++) {
      handleListingGroup(table.getGroup(i),(GroupHandle)groupsSlot.get(i),baseQuery);
    }
    BandDesign detail=table.getDetail();
    setUsesDetails(detail,baseQuery);
    handleListingBand(detail,baseQuery,false,null);
    handleListingBand(table.getFooter(),baseQuery,true,null);
  }
  try {
    transformExpressions(table,baseQuery);
  }
 catch (  BirtException ex) {
    context.addException(table.getHandle(),ex);
  }
  return getResultQuery(query,value);
}",0.9446808510638298
71205,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOrigin
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,AxisOrigin axisOrigin,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(dStep));
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(10));
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.bExpandMinMax=scModel.isAutoExpand();
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.setStep(new Integer(1));
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.iMinUnit=oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
        sc.oMinimumFixed=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
        sc.oMaximumFixed=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  sc.bLabelWithinAxes=ax.getModelAxis().isLabelWithinAxes();
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  sc.setData(dsi);
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOrigin
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,AxisOrigin axisOrigin,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(dStep));
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(10));
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.setStep(new Integer(1));
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.iMinUnit=oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
        sc.oMinimumFixed=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
        sc.oMaximumFixed=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  sc.bLabelWithinAxes=ax.getModelAxis().isLabelWithinAxes();
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  sc.setData(dsi);
  return sc;
}",0.9904315024381268
71206,"/** 
 * Computes min, max value, step size and step number of the Axis
 * @param oMinValue min value in data points. Double or CDateTime type.
 * @param oMaxValue max value in data points. Double or CDateTime type.
 */
public final void updateAxisMinMax(Object oMinValue,Object oMaxValue){
  if (rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
    updateContext(rtc.getSharedScale().getScaleContext());
    return;
  }
  ScaleContext sct;
  if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    if ((iType & PERCENT) == PERCENT) {
      oMaximum=new Double(100);
      oMinimum=new Double(1);
      setStep(new Double(10));
      bMaximumFixed=true;
      bMinimumFixed=true;
      bStepFixed=true;
      return;
    }
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int iUnit=asInteger(oUnit);
    sct=new ScaleContext(iMarginPercent,iType,iUnit,oMinValue,oMaxValue,oStep);
  }
 else {
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
  if ((iType & DATE_TIME) == DATE_TIME) {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimumFixed,oMaximumFixed);
  }
 else {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimum,oMaximum);
  }
  sct.setExpandMinmax(bExpandMinMax);
  sct.setFixedStep(bStepFixed,oStepNumber);
  sct.computeMinMax();
  updateContext(sct);
  tmpSC=sct;
  updateSharedScaleContext(rtc,iType,tmpSC);
}","/** 
 * Computes min, max value, step size and step number of the Axis
 * @param oMinValue min value in data points. Double or CDateTime type.
 * @param oMaxValue max value in data points. Double or CDateTime type.
 */
public final void updateAxisMinMax(Object oMinValue,Object oMaxValue){
  if (rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
    updateContext(rtc.getSharedScale().getScaleContext());
    return;
  }
  ScaleContext sct;
  if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    if ((iType & PERCENT) == PERCENT) {
      oMaximum=new Double(100);
      oMinimum=new Double(1);
      setStep(new Double(10));
      bMaximumFixed=true;
      bMinimumFixed=true;
      bStepFixed=true;
      return;
    }
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int iUnit=asInteger(oUnit);
    sct=new ScaleContext(iMarginPercent,iType,iUnit,oMinValue,oMaxValue,oStep);
  }
 else {
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
  if ((iType & DATE_TIME) == DATE_TIME) {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimumFixed,oMaximumFixed);
  }
 else {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimum,oMaximum);
  }
  sct.setExpandMinmax(bExpandMinMax);
  sct.setFixedStep(bStepFixed,oStepNumber);
  sct.computeMinMax(bAlignZero);
  updateContext(sct);
  tmpSC=sct;
  updateSharedScaleContext(rtc,iType,tmpSC);
}",0.9965729952021932
71207,"public final Object clone(){
  final AutoScale sc=new AutoScale(iType,oMinimum,oMaximum);
  sc.oStep=oStep;
  sc.oStepNumber=this.oStepNumber;
  sc.dStart=dStart;
  sc.dEnd=dEnd;
  sc.oMaximumWithMargin=oMaximumWithMargin;
  sc.oMinimumWithMargin=oMinimumWithMargin;
  sc.iMarginPercent=iMarginPercent;
  sc.atcTickCoordinates=atcTickCoordinates;
  sc.dStartShift=dStartShift;
  sc.dEndShift=dEndShift;
  sc.dsiData=dsiData;
  sc.oUnit=oUnit;
  sc.bMaximumFixed=bMaximumFixed;
  sc.bMinimumFixed=bMinimumFixed;
  sc.bStepFixed=bStepFixed;
  sc.fs=fs;
  sc.rtc=rtc;
  sc.bIntegralZoom=bIntegralZoom;
  sc.bCategoryScale=bCategoryScale;
  sc.labelVisHelper=labelVisHelper;
  sc.iScaleDirection=iScaleDirection;
  sc.staggeredHelper=staggeredHelper;
  sc.bAxisLabelStaggered=bAxisLabelStaggered;
  sc.iLabelShowingInterval=iLabelShowingInterval;
  sc.bTickBetweenCategories=bTickBetweenCategories;
  sc.bLabelWithinAxes=bLabelWithinAxes;
  sc.iMinUnit=iMinUnit;
  sc.hmComputedLabelText=sc.hmComputedLabelText;
  sc.tmpSC=tmpSC;
  sc.bExpandMinMax=bExpandMinMax;
  return sc;
}","public final Object clone(){
  final AutoScale sc=new AutoScale(iType,oMinimum,oMaximum);
  sc.oStep=oStep;
  sc.oStepNumber=this.oStepNumber;
  sc.dStart=dStart;
  sc.dEnd=dEnd;
  sc.oMaximumWithMargin=oMaximumWithMargin;
  sc.oMinimumWithMargin=oMinimumWithMargin;
  sc.iMarginPercent=iMarginPercent;
  sc.atcTickCoordinates=atcTickCoordinates;
  sc.dStartShift=dStartShift;
  sc.dEndShift=dEndShift;
  sc.dsiData=dsiData;
  sc.oUnit=oUnit;
  sc.bMaximumFixed=bMaximumFixed;
  sc.bMinimumFixed=bMinimumFixed;
  sc.bStepFixed=bStepFixed;
  sc.fs=fs;
  sc.rtc=rtc;
  sc.bIntegralZoom=bIntegralZoom;
  sc.bCategoryScale=bCategoryScale;
  sc.labelVisHelper=labelVisHelper;
  sc.iScaleDirection=iScaleDirection;
  sc.staggeredHelper=staggeredHelper;
  sc.bAxisLabelStaggered=bAxisLabelStaggered;
  sc.iLabelShowingInterval=iLabelShowingInterval;
  sc.bTickBetweenCategories=bTickBetweenCategories;
  sc.bLabelWithinAxes=bLabelWithinAxes;
  sc.iMinUnit=iMinUnit;
  sc.hmComputedLabelText=sc.hmComputedLabelText;
  sc.tmpSC=tmpSC;
  sc.bExpandMinMax=bExpandMinMax;
  sc.bAlignZero=bAlignZero;
  return sc;
}",0.9871323529411764
71208,"public void computeMinMax(){
  if ((iType & LINEAR) == LINEAR) {
    computeLinearMinMax();
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    computeDateTimeMinMax();
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    computeLogMinMax();
  }
}","public void computeMinMax(boolean bAlignZero){
  if ((iType & LINEAR) == LINEAR) {
    computeLinearMinMax(bAlignZero);
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    computeDateTimeMinMax();
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    computeLogMinMax();
  }
}",0.9485294117647058
71209,"private void computeLinearMinMax(){
  final double dMinReal, dMaxReal;
  final double dMinValue, dMaxValue;
  double dMargin=0;
  if (bMargin) {
    dMargin=Math.abs(asDouble(oMaxAuto).doubleValue() - asDouble(oMinAuto).doubleValue()) * iMarginPercent / 100;
  }
  dMinReal=asDouble(oMinAuto).doubleValue() - dMargin;
  dMaxReal=asDouble(oMaxAuto).doubleValue() + dMargin;
  dMinValue=bMinimumFixed ? asDouble(oMinFixed).doubleValue() : dMinReal;
  dMaxValue=bMaximumFixed ? asDouble(oMaxFixed).doubleValue() : dMaxReal;
  double dMinAxis=dMinValue;
  double dMaxAxis=dMaxValue;
  double dStep=0;
  if (bStepFixed && oStepNumber != null) {
    oStep=new Double(Math.abs(dMaxValue - dMinValue) / (oStepNumber.intValue()));
    dStep=asDouble(oStep).doubleValue();
  }
 else {
    dStep=asDouble(oStep).doubleValue();
    if (bMargin) {
      dMinAxis=((dStep >= 1) ? Math.floor(dMinAxis / dStep) : Math.round(dMinAxis / dStep)) * dStep;
      dMaxAxis=(((dStep >= 1) ? Math.floor(dMaxAxis / dStep) : Math.round(dMaxAxis / dStep)) + 1) * dStep;
      if (dMaxAxis - dMaxValue >= dStep) {
        dMaxAxis-=dStep;
      }
    }
 else     if (!bExpandMinmax) {
      double dMinAxis1=((dStep >= 1) ? Math.floor(dMinAxis / dStep) : Math.round(dMinAxis / dStep)) * dStep;
      dMinAxis=dMinAxis < dMinAxis1 ? dMinAxis1 - dStep : dMinAxis1;
      double dMaxAxis1=((dStep >= 1) ? Math.floor(dMaxAxis / dStep) : Math.round(dMaxAxis / dStep)) * dStep;
      dMaxAxis=dMaxAxis > dMaxAxis1 ? dMaxAxis1 + dStep : dMaxAxis1;
    }
 else {
      final double dAbsMax=Math.abs(dMaxValue);
      final double dAbsMin=Math.abs(dMinValue);
      dMinAxis=((dStep >= 1) ? Math.floor(dAbsMin / dStep) : Math.round(dAbsMin / dStep)) * dStep;
      dMaxAxis=((dStep >= 1) ? Math.floor(dAbsMax / dStep) : Math.round(dAbsMax / dStep)) * dStep;
      if (dMinAxis == dAbsMin) {
        dMinAxis+=dStep;
        if (dMinValue < 0) {
          dMinAxis=-dMinAxis;
        }
 else         if (dMinValue == 0) {
          dMinAxis=0;
        }
      }
 else {
        if (dMinValue < 0) {
          dMinAxis=-(dMinAxis + dStep);
        }
 else         if (dMinAxis >= dMinValue && dMinAxis != 0) {
          dMinAxis-=dStep;
        }
      }
      if (dMaxAxis == dAbsMax) {
        dMaxAxis+=dStep;
        if (dMaxValue < 0) {
          dMaxAxis=-dMaxAxis;
        }
 else         if (dMaxValue == 0) {
          dMaxAxis=0;
        }
      }
 else       if (dMinAxis != dMaxValue) {
        if (dMaxValue < 0) {
          dMaxAxis=-(dMaxAxis - dStep);
        }
 else         if (dMaxValue > 0) {
          if (dMaxAxis < dMaxValue) {
            dMaxAxis+=dStep;
          }
        }
      }
      if (dMinValue < 0 && dMaxValue < 0) {
        if (dMaxAxis <= dMaxValue - dStep) {
          dMaxAxis+=2 * dStep;
        }
      }
      if (dMinValue > 0 && dMaxValue > 0) {
        if (dMinAxis >= dMinValue + dStep) {
          dMinAxis-=2 * dStep;
        }
      }
    }
  }
  if (dMinValue == 0 && dMaxValue == 0) {
    if (dMinAxis >= 0) {
      dMinAxis=-1;
    }
    if (dMaxAxis <= 0) {
      dMaxAxis=1;
    }
  }
  if ((iType & PERCENT) == PERCENT) {
    if (dMaxAxis > 0) {
      dMaxAxis=100;
    }
    if (dMinAxis < 0) {
      dMinAxis=-100;
    }
  }
  if (!bMaximumFixed) {
    oMax=new Double(dMaxAxis);
  }
  if (!bMinimumFixed) {
    oMin=new Double(dMinAxis);
  }
  if (bMargin) {
    if (bMinimumFixed && dMinValue > dMinReal) {
      oMinAuto=new Double(dMinReal);
    }
 else {
      oMinAuto=null;
    }
    if (bMaximumFixed && dMaxValue < dMaxReal) {
      oMaxAuto=new Double(dMaxReal);
    }
 else {
      oMaxAuto=null;
    }
  }
 else {
    oMinAuto=null;
    oMaxAuto=null;
  }
}","private void computeLinearMinMax(boolean bAlignZero){
  final double dMinReal, dMaxReal;
  final double dMinValue, dMaxValue;
  double dMargin=0;
  if (bMargin) {
    dMargin=Math.abs(asDouble(oMaxAuto).doubleValue() - asDouble(oMinAuto).doubleValue()) * iMarginPercent / 100;
  }
  dMinReal=asDouble(oMinAuto).doubleValue() - dMargin;
  dMaxReal=asDouble(oMaxAuto).doubleValue() + dMargin;
  dMinValue=bMinimumFixed ? asDouble(oMinFixed).doubleValue() : dMinReal;
  dMaxValue=bMaximumFixed ? asDouble(oMaxFixed).doubleValue() : dMaxReal;
  double dMinAxis=dMinValue;
  double dMaxAxis=dMaxValue;
  double dStep=0;
  if (bStepFixed && oStepNumber != null) {
    oStep=new Double(Math.abs(dMaxValue - dMinValue) / (oStepNumber.intValue()));
    dStep=asDouble(oStep).doubleValue();
  }
 else {
    dStep=asDouble(oStep).doubleValue();
    if (bMargin) {
      dMinAxis=((dStep >= 1) ? Math.floor(dMinAxis / dStep) : Math.round(dMinAxis / dStep)) * dStep;
      dMaxAxis=(((dStep >= 1) ? Math.floor(dMaxAxis / dStep) : Math.round(dMaxAxis / dStep)) + 1) * dStep;
      if (dMaxAxis - dMaxValue >= dStep) {
        dMaxAxis-=dStep;
      }
    }
 else     if (!bExpandMinmax) {
      double dMinAxis1=((dStep >= 1) ? Math.floor(dMinAxis / dStep) : Math.round(dMinAxis / dStep)) * dStep;
      dMinAxis=dMinAxis < dMinAxis1 ? dMinAxis1 - dStep : dMinAxis1;
      double dMaxAxis1=((dStep >= 1) ? Math.floor(dMaxAxis / dStep) : Math.round(dMaxAxis / dStep)) * dStep;
      dMaxAxis=dMaxAxis > dMaxAxis1 ? dMaxAxis1 + dStep : dMaxAxis1;
    }
 else {
      final double dAbsMax=Math.abs(dMaxValue);
      final double dAbsMin=Math.abs(dMinValue);
      dMinAxis=((dStep >= 1) ? Math.floor(dAbsMin / dStep) : Math.round(dAbsMin / dStep)) * dStep;
      dMaxAxis=((dStep >= 1) ? Math.floor(dAbsMax / dStep) : Math.round(dAbsMax / dStep)) * dStep;
      if (dMinAxis == dAbsMin) {
        dMinAxis+=dStep;
        if (dMinValue < 0) {
          dMinAxis=-dMinAxis;
        }
 else         if (dMinValue == 0) {
          dMinAxis=0;
        }
      }
 else {
        if (dMinValue < 0) {
          dMinAxis=-(dMinAxis + dStep);
        }
 else         if (dMinAxis >= dMinValue && dMinAxis != 0) {
          dMinAxis-=dStep;
        }
      }
      if (dMaxAxis == dAbsMax) {
        dMaxAxis+=dStep;
        if (dMaxValue < 0) {
          dMaxAxis=-dMaxAxis;
        }
 else         if (dMaxValue == 0) {
          dMaxAxis=0;
        }
      }
 else       if (dMinAxis != dMaxValue) {
        if (dMaxValue < 0) {
          dMaxAxis=-(dMaxAxis - dStep);
        }
 else         if (dMaxValue > 0) {
          if (dMaxAxis < dMaxValue) {
            dMaxAxis+=dStep;
          }
        }
      }
      if (dMinValue < 0 && dMaxValue < 0) {
        if (dMaxAxis <= dMaxValue - dStep) {
          dMaxAxis+=2 * dStep;
        }
      }
      if (dMinValue > 0 && dMaxValue > 0) {
        if (dMinAxis >= dMinValue + dStep) {
          dMinAxis-=2 * dStep;
        }
      }
    }
  }
  if (dMinValue == 0 && dMaxValue == 0) {
    if (dMinAxis >= 0) {
      dMinAxis=-1;
    }
    if (dMaxAxis <= 0) {
      dMaxAxis=1;
    }
  }
  if ((iType & PERCENT) == PERCENT) {
    if (dMaxAxis > 0) {
      dMaxAxis=100;
    }
    if (dMinAxis < 0) {
      dMinAxis=-100;
    }
  }
  if (bAlignZero && dMinAxis < 0 && dMaxAxis > 0) {
    double abs=Math.max(Math.abs(dMinAxis),Math.abs(dMaxAxis));
    dMinAxis=-abs;
    dMaxAxis=abs;
  }
  if (!bMaximumFixed) {
    oMax=new Double(dMaxAxis);
  }
  if (!bMinimumFixed) {
    oMin=new Double(dMinAxis);
  }
  if (bMargin) {
    if (bMinimumFixed && dMinValue > dMinReal) {
      oMinAuto=new Double(dMinReal);
    }
 else {
      oMinAuto=null;
    }
    if (bMaximumFixed && dMaxValue < dMaxReal) {
      oMaxAuto=new Double(dMaxReal);
    }
 else {
      oMaxAuto=null;
    }
  }
 else {
    oMinAuto=null;
    oMaxAuto=null;
  }
}",0.9768303985171456
71210,"/** 
 * @param queryType
 * @param query
 * @param expr
 * @param seriesDefinition
 * @since 2.5
 */
protected void manageColorAndQuery(String queryType,Query query,String expr,SeriesDefinition seriesDefinition){
  if (DataDefinitionTextManager.getInstance().getNumberOfSameDataDefinition(query.getDefinition()) == 0) {
    ColorPalette.getInstance().retrieveColor(query.getDefinition());
  }
  updateQuery(queryType,query,expr,seriesDefinition);
  DataDefinitionTextManager.getInstance().updateText(query);
  refreshTableColor();
  DataDefinitionTextManager.getInstance().refreshAll();
}","/** 
 * @param queryType
 * @param query
 * @param expr
 * @param seriesDefinition
 * @since 2.5
 */
protected void manageColorAndQuery(String queryType,Query query,String expr,SeriesDefinition seriesDefinition){
  if (dataProvider.getNumberOfSameDataDefinition(query.getDefinition()) == 1) {
    ColorPalette.getInstance().retrieveColor(query.getDefinition());
  }
  updateQuery(queryType,query,expr,seriesDefinition);
  ColorPalette.getInstance().putColor(expr);
  DataDefinitionTextManager.getInstance().updateText(query);
  refreshTableColor();
  DataDefinitionTextManager.getInstance().refreshAll();
}",0.917922948073702
71211,"protected void addNewSeriesDefinition(){
  SeriesDefinition sdTmp=SeriesDefinitionImpl.create();
  ChartAdapter.beginIgnoreNotifications();
  if (!seriesDefns.isEmpty()) {
    Palette pa=((seriesDefns.get(0))).getSeriesPalette();
    for (int i=0; i < pa.getEntries().size(); i++) {
      int index=i + seriesDefns.size();
      int paletteSize=pa.getEntries().size();
      while (index >= pa.getEntries().size()) {
        index-=paletteSize;
      }
      sdTmp.getSeriesPalette().getEntries().add(i,ChartUtil.eCopy(pa.getEntries().get(index)));
    }
    sdTmp.getSeriesPalette().getEntries().remove(pa.getEntries().size());
    sdTmp.getSeries().add(ChartUtil.eCopy(seriesDefns.get(0).getDesignTimeSeries()));
    sdTmp.setQuery(ChartUtil.eCopy(seriesDefns.get(0).getQuery()));
    cleanDataDefinition(sdTmp);
    sdTmp.getDesignTimeSeries().setSeriesIdentifier(""String_Node_Str"");
    sdTmp.eAdapters().addAll(seriesDefns.get(0).eAdapters());
    int firstIndex=getFirstIndexOfSameAxis();
    EList list=getChart().getSampleData().getOrthogonalSampleData();
    OrthogonalSampleData sdOrthogonal=(OrthogonalSampleData)EcoreUtil.copy((EObject)list.get(firstIndex));
    if (axisIndex == -1) {
      sdOrthogonal.setSeriesDefinitionIndex(seriesDefns.size());
    }
 else {
      sdOrthogonal.setSeriesDefinitionIndex(ChartUIUtil.getLastSeriesIndexWithinAxis(getChart(),axisIndex) + 1);
    }
    sdOrthogonal.setDataSetRepresentation(convertDataSetRepresentation(sdOrthogonal.getDataSetRepresentation(),sdOrthogonal.getSeriesDefinitionIndex()));
    sdOrthogonal.eAdapters().addAll(getChart().getSampleData().eAdapters());
    int sdIndex=sdOrthogonal.getSeriesDefinitionIndex();
    ArrayList al=new ArrayList();
    if (sdIndex >= list.size()) {
      list.add(sdOrthogonal);
    }
 else {
      for (int i=sdIndex; i < list.size(); i++) {
        al.add(list.get(i));
      }
      list.set(sdIndex,sdOrthogonal);
      for (int i=1; i < al.size(); i++) {
        list.set(i + sdIndex,al.get(i - 1));
        ((OrthogonalSampleData)list.get(i + sdIndex)).setSeriesDefinitionIndex(i + sdIndex);
      }
      list.add(al.get(al.size() - 1));
      ((OrthogonalSampleData)list.get(list.size() - 1)).setSeriesDefinitionIndex(list.size() - 1);
    }
  }
 else {
    sdTmp.getSeries().add(BarSeriesImpl.create());
    OrthogonalSampleData sampleData=DataFactory.eINSTANCE.createOrthogonalSampleData();
    sampleData.setDataSetRepresentation(ChartUtil.getNewSampleData(AxisType.LINEAR_LITERAL,0));
    sampleData.setSeriesDefinitionIndex(0);
    getChart().getSampleData().getOrthogonalSampleData().add(getFirstIndexOfSameAxis(),sampleData);
  }
  seriesDefns.add(sdTmp);
  ChartAdapter.endIgnoreNotifications();
  ChartUIUtil.setSeriesName(wizardContext.getModel());
}","protected void addNewSeriesDefinition(){
  SeriesDefinition sdTmp=SeriesDefinitionImpl.create();
  ChartAdapter.beginIgnoreNotifications();
  if (!seriesDefns.isEmpty()) {
    Palette pa=((seriesDefns.get(0))).getSeriesPalette();
    for (int i=0; i < pa.getEntries().size(); i++) {
      int index=i + seriesDefns.size();
      int paletteSize=pa.getEntries().size();
      while (index >= pa.getEntries().size()) {
        index-=paletteSize;
      }
      sdTmp.getSeriesPalette().getEntries().add(i,ChartUtil.eCopy(pa.getEntries().get(index)));
    }
    sdTmp.getSeriesPalette().getEntries().remove(pa.getEntries().size());
    sdTmp.getSeries().add(ChartUtil.eCopy(seriesDefns.get(0).getDesignTimeSeries()));
    sdTmp.setQuery(ChartUtil.eCopy(seriesDefns.get(0).getQuery()));
    cleanDataDefinition(sdTmp);
    sdTmp.getDesignTimeSeries().setSeriesIdentifier(""String_Node_Str"");
    sdTmp.eAdapters().addAll(seriesDefns.get(0).eAdapters());
    int firstIndex=getFirstIndexOfSameAxis();
    EList<OrthogonalSampleData> list=getChart().getSampleData().getOrthogonalSampleData();
    OrthogonalSampleData sdOrthogonal=(OrthogonalSampleData)EcoreUtil.copy(list.get(firstIndex));
    if (axisIndex == -1) {
      sdOrthogonal.setSeriesDefinitionIndex(seriesDefns.size());
    }
 else {
      sdOrthogonal.setSeriesDefinitionIndex(ChartUIUtil.getLastSeriesIndexWithinAxis(getChart(),axisIndex) + 1);
    }
    sdOrthogonal.setDataSetRepresentation(convertDataSetRepresentation(sdOrthogonal.getDataSetRepresentation(),sdOrthogonal.getSeriesDefinitionIndex()));
    sdOrthogonal.eAdapters().addAll(getChart().getSampleData().eAdapters());
    int sdIndex=sdOrthogonal.getSeriesDefinitionIndex();
    ArrayList<OrthogonalSampleData> al=new ArrayList<OrthogonalSampleData>();
    if (sdIndex >= list.size()) {
      list.add(sdOrthogonal);
    }
 else {
      for (int i=sdIndex; i < list.size(); i++) {
        al.add(list.get(i));
      }
      list.set(sdIndex,sdOrthogonal);
      for (int i=1; i < al.size(); i++) {
        list.set(i + sdIndex,al.get(i - 1));
        list.get(i + sdIndex).setSeriesDefinitionIndex(i + sdIndex);
      }
      list.add(al.get(al.size() - 1));
      list.get(list.size() - 1).setSeriesDefinitionIndex(list.size() - 1);
    }
  }
 else {
    sdTmp.getSeries().add(BarSeriesImpl.create());
    OrthogonalSampleData sampleData=DataFactory.eINSTANCE.createOrthogonalSampleData();
    sampleData.setDataSetRepresentation(ChartUtil.getNewSampleData(AxisType.LINEAR_LITERAL,0));
    sampleData.setSeriesDefinitionIndex(0);
    getChart().getSampleData().getOrthogonalSampleData().add(getFirstIndexOfSameAxis(),sampleData);
  }
  seriesDefns.add(sdTmp);
  ChartAdapter.endIgnoreNotifications();
  ChartUIUtil.setSeriesName(wizardContext.getModel());
}",0.9778418303008468
71212,"private void cleanDataDefinition(SeriesDefinition sd){
  EList dds=sd.getDesignTimeSeries().getDataDefinition();
  for (int i=0; i < dds.size(); i++) {
    ((Query)dds.get(i)).setDefinition(""String_Node_Str"");
  }
}","private void cleanDataDefinition(SeriesDefinition sd){
  EList<Query> dds=sd.getDesignTimeSeries().getDataDefinition();
  for (int i=0; i < dds.size(); i++) {
    dds.get(i).setDefinition(""String_Node_Str"");
  }
}",0.9205607476635514
71213,"/** 
 * Updates the color registry and refresh all background color of the text field
 * @param seriesIndex -1 means all series under selected axis
 */
private void updateColorRegistry(int seriesIndex){
  List dataDefinitions=null;
  if (seriesIndex > -1) {
    dataDefinitions=((SeriesDefinition)seriesDefns.get(seriesIndex)).getDesignTimeSeries().getDataDefinition();
  }
 else {
    List allSeriesDefns=ChartUIUtil.getAllOrthogonalSeriesDefinitions(getChart());
    dataDefinitions=new ArrayList();
    for (int i=0; i < allSeriesDefns.size(); i++) {
      dataDefinitions.addAll(((SeriesDefinition)allSeriesDefns.get(i)).getDesignTimeSeries().getDataDefinition());
    }
  }
  Map queryMap=new HashMap();
  for (int i=0; i < dataDefinitions.size(); i++) {
    String expression=((Query)dataDefinitions.get(i)).getDefinition();
    if (queryMap.containsKey(expression)) {
      int expCount=((Integer)queryMap.get(expression)).intValue();
      queryMap.put(expression,new Integer(expCount++));
    }
 else {
      queryMap.put(expression,new Integer(1));
    }
  }
  for (Iterator iterator=queryMap.keySet().iterator(); iterator.hasNext(); ) {
    String expression=(String)iterator.next();
    if (DataDefinitionTextManager.getInstance().getNumberOfSameDataDefinition(expression) == ((Integer)queryMap.get(expression)).intValue()) {
      ColorPalette.getInstance().retrieveColor(expression);
    }
  }
}","/** 
 * Updates the color registry and refresh all background color of the text field
 * @param seriesIndex -1 means all series under selected axis
 */
private void updateColorRegistry(int seriesIndex){
  List<Query> dataDefinitions=null;
  if (seriesIndex > -1) {
    dataDefinitions=seriesDefns.get(seriesIndex).getDesignTimeSeries().getDataDefinition();
  }
 else {
    List<SeriesDefinition> allSeriesDefns=ChartUIUtil.getAllOrthogonalSeriesDefinitions(getChart());
    dataDefinitions=new ArrayList<Query>();
    for (int i=0; i < allSeriesDefns.size(); i++) {
      dataDefinitions.addAll(allSeriesDefns.get(i).getDesignTimeSeries().getDataDefinition());
    }
  }
  Map<String,Integer> queryMap=new HashMap<String,Integer>();
  for (int i=0; i < dataDefinitions.size(); i++) {
    String expression=dataDefinitions.get(i).getDefinition();
    if (queryMap.containsKey(expression)) {
      int expCount=queryMap.get(expression).intValue();
      queryMap.put(expression,new Integer(expCount++));
    }
 else {
      queryMap.put(expression,new Integer(1));
    }
  }
  for (Iterator<String> iterator=queryMap.keySet().iterator(); iterator.hasNext(); ) {
    String expression=iterator.next();
    if (DataDefinitionTextManager.getInstance().getNumberOfSameDataDefinition(expression) == queryMap.get(expression).intValue()) {
      ColorPalette.getInstance().retrieveColor(expression);
    }
  }
  final Event e=new Event();
  e.data=DataDefinitionSelector.this;
  e.type=IChartDataSheet.EVENT_QUERY;
  e.detail=IChartDataSheet.DETAIL_UPDATE_COLOR;
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      wizardContext.getDataSheet().notifyListeners(e);
    }
  }
);
}",0.7757731958762887
71214,"private SeriesDefinition getCurrentSeriesDefinition(){
  if (seriesDefns.isEmpty()) {
    addNewSeriesDefinition();
    refreshSeriesCombo();
    cmbSeriesSelect.select(0);
  }
  return (SeriesDefinition)seriesDefns.get(cmbSeriesSelect.getSelectionIndex());
}","private SeriesDefinition getCurrentSeriesDefinition(){
  if (seriesDefns.isEmpty()) {
    addNewSeriesDefinition();
    refreshSeriesCombo();
    cmbSeriesSelect.select(0);
  }
  return seriesDefns.get(cmbSeriesSelect.getSelectionIndex());
}",0.964
71215,"private void refreshAxisCombo(){
  ArrayList itemList=new ArrayList();
  int axisNum=ChartUIUtil.getOrthogonalAxisNumber(getChart());
  for (int i=1; i <= axisNum; i++) {
    itemList.add(Messages.getString(""String_Node_Str"") + i);
  }
  itemList.add(Messages.getString(""String_Node_Str""));
  cmbAxisSelect.removeAll();
  cmbAxisSelect.setItems((String[])itemList.toArray(new String[axisNum]));
}","private void refreshAxisCombo(){
  ArrayList<String> itemList=new ArrayList<String>();
  int axisNum=ChartUIUtil.getOrthogonalAxisNumber(getChart());
  for (int i=1; i <= axisNum; i++) {
    itemList.add(Messages.getString(""String_Node_Str"") + i);
  }
  itemList.add(Messages.getString(""String_Node_Str""));
  cmbAxisSelect.removeAll();
  cmbAxisSelect.setItems(itemList.toArray(new String[axisNum]));
}",0.8972431077694235
71216,"protected void removeSeriesDefinition(){
  boolean isNotificaionIgnored=ChartAdapter.isNotificationIgnored();
  ChartAdapter.ignoreNotifications(true);
  int firstIndex=getFirstIndexOfSameAxis();
  EList list=getChart().getSampleData().getOrthogonalSampleData();
  for (int i=0; i < list.size(); i++) {
    if (((OrthogonalSampleData)list.get(i)).getSeriesDefinitionIndex() == (firstIndex + cmbSeriesSelect.getSelectionIndex())) {
      list.remove(i);
      break;
    }
  }
  ChartUIUtil.reorderOrthogonalSampleDataIndex(getChart());
  updateSeriesPalette(cmbSeriesSelect.getSelectionIndex());
  ChartAdapter.ignoreNotifications(isNotificaionIgnored);
  seriesDefns.remove(cmbSeriesSelect.getSelectionIndex());
}","protected void removeSeriesDefinition(){
  boolean isNotificaionIgnored=ChartAdapter.isNotificationIgnored();
  ChartAdapter.ignoreNotifications(true);
  int firstIndex=getFirstIndexOfSameAxis();
  EList<OrthogonalSampleData> list=getChart().getSampleData().getOrthogonalSampleData();
  for (int i=0; i < list.size(); i++) {
    if (list.get(i).getSeriesDefinitionIndex() == (firstIndex + cmbSeriesSelect.getSelectionIndex())) {
      list.remove(i);
      break;
    }
  }
  ChartUIUtil.reorderOrthogonalSampleDataIndex(getChart());
  updateSeriesPalette(cmbSeriesSelect.getSelectionIndex());
  ChartAdapter.ignoreNotifications(isNotificaionIgnored);
  seriesDefns.remove(cmbSeriesSelect.getSelectionIndex());
}",0.9537166900420756
71217,"/** 
 * Updates series palette of series definition list without the series to be moved
 * @param removedIndex the index of the series to be removed
 */
private void updateSeriesPalette(int removedIndex){
  for (int i=0, j=0; i < seriesDefns.size(); i++) {
    if (i != removedIndex) {
      ((SeriesDefinition)seriesDefns.get(i)).getSeriesPalette().shift(-j++);
    }
  }
}","/** 
 * Updates series palette of series definition list without the series to be moved
 * @param removedIndex the index of the series to be removed
 */
private void updateSeriesPalette(int removedIndex){
  for (int i=0, j=0; i < seriesDefns.size(); i++) {
    if (i != removedIndex) {
      seriesDefns.get(i).getSeriesPalette().shift(-j++);
    }
  }
}",0.9725274725274724
71218,"private void refreshSeriesCombo(Combo cmbSeriesSelect){
  ArrayList itemList=new ArrayList();
  int seriesSize=seriesDefns.size();
  for (int i=1; i <= seriesSize; i++) {
    itemList.add(selectionName + ""String_Node_Str"" + i);
  }
  if (!isPartChart()) {
    itemList.add(Messages.getString(""String_Node_Str""));
  }
  cmbSeriesSelect.removeAll();
  cmbSeriesSelect.setItems((String[])itemList.toArray(new String[seriesSize]));
}","private void refreshSeriesCombo(Combo cmbSeriesSelect){
  ArrayList<String> itemList=new ArrayList<String>();
  int seriesSize=seriesDefns.size();
  for (int i=1; i <= seriesSize; i++) {
    itemList.add(selectionName + ""String_Node_Str"" + i);
  }
  if (!isPartChart()) {
    itemList.add(Messages.getString(""String_Node_Str""));
  }
  cmbSeriesSelect.removeAll();
  cmbSeriesSelect.setItems(itemList.toArray(new String[seriesSize]));
}",0.8981481481481481
71219,"/** 
 * The page layout is controlled by three render options: <ul> <li>OUTPUT-MASTER-PAGE</li> <li>OUTPUT-MARGIN</li> <li>FLOATING-FOOTER</li> </ul> The layout effect matrix are demostrate in following table: <table border=""all""> <tr> <th>PAGE</th> <th>MARGIN</th> <th>FOOTER</th> <th>effect</th> </tr> <tr valign=""top""> <td rowspan=""4"">TRUE</td> <td rowspan=""2"">TRUE</td> <td >FALSE</td> <td> <table border=""all"" style=""width:2in;height:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td>LM</td> <td valign=""top"">header</td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr> <td>LM</td> <td><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> <table> </td> </table> <tr valign=""top""> <td>TRUE</td> <td> <table border=""all"" style=""width:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td >LM</td> <td valign=""top""><div>header</div></td> <td >RM</td> </tr> <tr> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td valign=""top""><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> </table> </td> </tr> <tr valign=""top""> <td rowspan=""2"">FALSE</td> <td>TRUE</td> <td> <table border=""all"" style=""width:1.6in;height:1in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr style=""height:100%""> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td> <table border=""all"" style=""width:1.6in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td>ANY</td> <td>ANY</td> <td> <table border=""all"" style=""width:1.6in;""> <tr> <td>BODY</td> </tr> </table> </td> </tr> </table>
 */
public void startPage(IPageContent page){
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  if (pageNo > 1) {
    writer.writeCode(""String_Node_Str"");
  }
  boolean fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  StringBuffer styleBuffer=new StringBuffer();
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  styleBuffer.append(""String_Node_Str"");
  if (page != null && outputMasterPageContent) {
    htmlEmitter.buildPageStyle(page,styleBuffer);
    if (fixedReport) {
      DimensionType width=getPageWidth(page);
      if (width != null) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(width.toString());
        styleBuffer.append(""String_Node_Str"");
      }
    }
 else {
      styleBuffer.append(""String_Node_Str"");
    }
    if (!pageFooterFloatFlag) {
      DimensionType height=getPageHeight(page);
      if (height != null) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(height.toString());
        styleBuffer.append(""String_Node_Str"");
      }
    }
    if (fixedReport) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(""String_Node_Str"");
    }
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  if (page != null && outputMasterPageContent) {
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
    }
    writer.openTag(HTMLTags.TAG_COL);
    writer.closeTag(HTMLTags.TAG_COL);
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
      outputVMargin(page.getMarginTop());
    }
    if (showPageHeader(page)) {
      writer.openTag(HTMLTags.TAG_TR);
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginLeft());
      }
      outputPageBand(page,page.getPageHeader());
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginRight());
      }
      writer.closeTag(HTMLTags.TAG_TR);
    }
  }
  writer.openTag(HTMLTags.TAG_TR);
  if (!pageFooterFloatFlag) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null && outputMasterPageContent && outputMasterPageMargins) {
    outputHMargin(page.getMarginLeft());
  }
  writer.openTag(HTMLTags.TAG_TD);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  if (htmlRtLFlag) {
    writer.attribute(HTMLTags.ATTR_HTML_DIR,CSSConstants.CSS_RTL_VALUE);
  }
}","/** 
 * The page layout is controlled by three render options: <ul> <li>OUTPUT-MASTER-PAGE</li> <li>OUTPUT-MARGIN</li> <li>FLOATING-FOOTER</li> </ul> The layout effect matrix are demostrate in following table: <table border=""all""> <tr> <th>PAGE</th> <th>MARGIN</th> <th>FOOTER</th> <th>effect</th> </tr> <tr valign=""top""> <td rowspan=""4"">TRUE</td> <td rowspan=""2"">TRUE</td> <td >FALSE</td> <td> <table border=""all"" style=""width:2in;height:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td>LM</td> <td valign=""top"">header</td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr> <td>LM</td> <td><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> <table> </td> </table> <tr valign=""top""> <td>TRUE</td> <td> <table border=""all"" style=""width:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td >LM</td> <td valign=""top""><div>header</div></td> <td >RM</td> </tr> <tr> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td valign=""top""><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> </table> </td> </tr> <tr valign=""top""> <td rowspan=""2"">FALSE</td> <td>TRUE</td> <td> <table border=""all"" style=""width:1.6in;height:1in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr style=""height:100%""> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td> <table border=""all"" style=""width:1.6in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td>ANY</td> <td>ANY</td> <td> <table border=""all"" style=""width:1.6in;""> <tr> <td>BODY</td> </tr> </table> </td> </tr> </table>
 */
public void startPage(IPageContent page){
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  if (pageNo > 1) {
    writer.writeCode(""String_Node_Str"");
  }
  boolean fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  StringBuffer styleBuffer=new StringBuffer();
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  styleBuffer.append(""String_Node_Str"");
  if (page != null && outputMasterPageContent) {
    htmlEmitter.buildPageStyle(page,styleBuffer);
    if (fixedReport) {
      DimensionType width=getPageWidth(page);
      if (width != null) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(width.toString());
        styleBuffer.append(""String_Node_Str"");
      }
    }
 else {
      styleBuffer.append(""String_Node_Str"");
    }
    if (!pageFooterFloatFlag) {
      DimensionType height=getPageHeight(page);
      if (height != null) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(height.toString());
        styleBuffer.append(""String_Node_Str"");
      }
    }
    if (fixedReport) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(""String_Node_Str"");
    }
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  if (page != null && outputMasterPageContent) {
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
    }
    writer.openTag(HTMLTags.TAG_COL);
    writer.closeTag(HTMLTags.TAG_COL);
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
      outputVMargin(page.getMarginTop());
    }
    if (showPageHeader(page)) {
      writer.openTag(HTMLTags.TAG_TR);
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginLeft());
      }
      outputPageBand(page,page.getPageHeader());
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginRight());
      }
      writer.closeTag(HTMLTags.TAG_TR);
    }
  }
  writer.openTag(HTMLTags.TAG_TR);
  if (!pageFooterFloatFlag) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null && outputMasterPageContent && outputMasterPageMargins) {
    outputHMargin(page.getMarginLeft());
  }
  writer.openTag(HTMLTags.TAG_TD);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeBidiFlag();
}",0.9886104783599088
71220,"private void outputPageBand(IPageContent page,IContent band){
  writer.openTag(HTMLTags.TAG_TD);
  if (htmlRtLFlag) {
    writer.attribute(HTMLTags.ATTR_HTML_DIR,""String_Node_Str"");
  }
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildPageBandStyle(styleBuffer,page.getStyle());
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  contentVisitor.visitChildren(band,null);
  writer.closeTag(HTMLTags.TAG_TD);
}","private void outputPageBand(IPageContent page,IContent band){
  writer.openTag(HTMLTags.TAG_TD);
  writeBidiFlag();
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildPageBandStyle(styleBuffer,page.getStyle());
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  contentVisitor.visitChildren(band,null);
  writer.closeTag(HTMLTags.TAG_TD);
}",0.8839506172839506
71221,"public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
  }
  retrieveRtLFlag();
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,layoutPreference,htmlRtLFlag);
  }
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      htmlEmitter.buildDefaultStyle(defaultStyleBuffer,style);
    }
  }
  String defaultStyleName=""String_Node_Str"";
  if (isEmbeddable) {
    outputCSSStyles(defaultStyleName,defaultStyleBuffer,reportDesign,designHandle);
    fixTransparentPNG();
    fixRedirect();
    openRootTag();
    if (htmlRtLFlag) {
      writer.attribute(HTMLTags.ATTR_HTML_DIR,CSSConstants.CSS_RTL_VALUE);
    }
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
    return;
  }
  openRootTag();
  if (htmlRtLFlag) {
    writer.attribute(HTMLTags.ATTR_HTML_DIR,CSSConstants.CSS_RTL_VALUE);
  }
  writer.openTag(HTMLTags.TAG_HEAD);
  outputReportTitle(designHandle);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  outputCSSStyles(defaultStyleName,defaultStyleBuffer,reportDesign,designHandle);
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
  }
  if (outputMasterPageContent) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
}","public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
  }
  retrieveRtLFlag();
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,layoutPreference,htmlRtLFlag);
  }
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      htmlEmitter.buildDefaultStyle(defaultStyleBuffer,style);
    }
  }
  String defaultStyleName=""String_Node_Str"";
  if (isEmbeddable) {
    outputCSSStyles(defaultStyleName,defaultStyleBuffer,reportDesign,designHandle);
    fixTransparentPNG();
    fixRedirect();
    openRootTag();
    writeBidiFlag();
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
    return;
  }
  openRootTag();
  writeBidiFlag();
  writer.openTag(HTMLTags.TAG_HEAD);
  outputReportTitle(designHandle);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  outputCSSStyles(defaultStyleName,defaultStyleBuffer,reportDesign,designHandle);
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
  }
  if (outputMasterPageContent) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
}",0.9339774557165862
71222,"protected void updateRtLFlag() throws EngineException {
  if (renderOptions == null)   return;
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null)   return;
  ReportDesignHandle handle=(ReportDesignHandle)runnable.getDesignHandle();
  if (handle != null) {
    Object bidiFlag=renderOptions.getOption(IRenderOption.RTL_FLAG);
    if (Boolean.TRUE.equals(bidiFlag)) {
      try {
        handle.setBidiOrientation(DesignChoiceConstants.BIDI_DIRECTION_RTL);
      }
 catch (      SemanticException e) {
        log.log(Level.WARNING,""String_Node_Str"",e);
        throw new EngineException(""String_Node_Str"");
      }
    }
 else     if (handle.isDirectionRTL()) {
      renderOptions.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
      IRenderOption renderOptions2=executionContext.getRenderOption();
      if (renderOptions2 != null) {
        renderOptions2.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
        executionContext.setRenderOption(renderOptions2);
      }
    }
  }
}","protected void updateRtLFlag() throws EngineException {
  if (renderOptions == null)   return;
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null)   return;
  Report report=executionContext.getReport();
  AbstractStyle rootStyle=(AbstractStyle)report.getStyles().get(report.getRootStyleName());
  ReportDesignHandle handle=(ReportDesignHandle)runnable.getDesignHandle();
  if (handle != null) {
    Object bidiFlag=renderOptions.getOption(IRenderOption.RTL_FLAG);
    String bidiOrientation=null;
    if (bidiFlag != null) {
      if (Boolean.TRUE.equals(bidiFlag)) {
        bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
      }
 else {
        bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
      }
      try {
        handle.setBidiOrientation(bidiOrientation);
        rootStyle.setDirection(bidiOrientation);
      }
 catch (      SemanticException e) {
        log.log(Level.WARNING,""String_Node_Str"",e);
        throw new EngineException(""String_Node_Str"");
      }
    }
 else     if (handle.isDirectionRTL()) {
      renderOptions.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
      IRenderOption renderOptions2=executionContext.getRenderOption();
      if (renderOptions2 != null) {
        renderOptions2.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
        executionContext.setRenderOption(renderOptions2);
      }
    }
  }
}",0.8105219893136046
71223,"protected void writeRunProperties(IStyle style,String fontFamily,boolean ishyperlink){
  writeFont(fontFamily);
  writeFontSize(style);
  writeLetterSpacing(style);
  writeFontStyle(style);
  writeHyperlinkStyle(ishyperlink);
}","protected void writeRunProperties(IStyle style,String fontFamily,boolean ishyperlink){
  writeFont(fontFamily);
  writeFontSize(style);
  writeLetterSpacing(style);
  writeTextUnderline(style);
  writeTextLineThrough(style);
  writeFontStyle(style);
  writeFontWeight(style);
  writeTextColor(style);
  writeHyperlinkStyle(ishyperlink);
}",0.7716814159292036
71224,"private void writeFontStyle(IStyle style){
  String val=WordUtil.removeQuote(style.getTextUnderline());
  if (!""String_Node_Str"".equalsIgnoreCase(val)) {
    writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  }
  val=WordUtil.removeQuote(style.getTextLineThrough());
  if (!""String_Node_Str"".equalsIgnoreCase(val)) {
    writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  }
  val=WordUtil.removeQuote(style.getFontStyle());
  if (!""String_Node_Str"".equalsIgnoreCase(val)) {
    writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  }
  val=WordUtil.removeQuote(style.getFontWeight());
  if (!""String_Node_Str"".equalsIgnoreCase(val)) {
    writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  }
  val=WordUtil.parseColor(style.getColor());
  if (val != null) {
    writeAttrTag(""String_Node_Str"",val);
  }
}",protected abstract void writeFontStyle(IStyle style);,0.0904872389791183
71225,"/** 
 * intialize the render options used to render the report. the render options are load from: <li> engine level default options</li> <li> engine level format options</li> <li> engine level emitter options</li> <li> task level options </li>
 * @throws EngineException 
 */
protected void setupRenderOption() throws EngineException {
  ExtensionManager extManager=ExtensionManager.getInstance();
  if (renderOptions != null) {
    format=renderOptions.getOutputFormat();
    emitterID=renderOptions.getEmitterID();
    if (emitterID != null) {
      boolean validEmitterID=extManager.isValidEmitterID(emitterID);
      if (!validEmitterID) {
        log.log(Level.SEVERE,MessageConstants.INVALID_EMITTER_ID,emitterID);
        throw new EngineException(MessageConstants.INVALID_EMITTER_ID,emitterID);
      }
      String formatOfEmitter=extManager.getFormat(emitterID);
      if (null == format) {
        renderOptions.setOutputFormat(formatOfEmitter);
      }
 else       if (!format.equals(formatOfEmitter)) {
        throw new EngineException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
      }
    }
 else {
      if (format == null) {
        format=RenderOption.OUTPUT_FORMAT_HTML;
        renderOptions.setOutputFormat(format);
        emitterID=RenderOption.OUTPUT_EMITTERID_HTML;
      }
 else {
        boolean supportedFormat=extManager.isSupportedFormat(format);
        if (!supportedFormat) {
          log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
          throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
        }
 else {
          emitterID=extManager.getEmitterID(format);
        }
      }
    }
  }
  Map appContext=executionContext.getAppContext();
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext instanceof PDFRenderContext) {
      PDFRenderContext pdfContext=(PDFRenderContext)renderContext;
      mergeOption(renderOptions,PDFRenderOption.BASE_URL,pdfContext.getBaseURL());
      mergeOption(renderOptions,PDFRenderOption.FONT_DIRECTORY,pdfContext.getFontDirectory());
      mergeOption(renderOptions,PDFRenderOption.SUPPORTED_IMAGE_FORMATS,pdfContext.getSupportedImageFormats());
      mergeOption(renderOptions,PDFRenderOption.IS_EMBEDDED_FONT,new Boolean(pdfContext.isEmbededFont()));
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext instanceof HTMLRenderContext) {
      HTMLRenderContext htmlContext=(HTMLRenderContext)renderContext;
      mergeOption(renderOptions,HTMLRenderOption.BASE_IMAGE_URL,htmlContext.getBaseImageURL());
      mergeOption(renderOptions,HTMLRenderOption.BASE_URL,htmlContext.getBaseURL());
      mergeOption(renderOptions,HTMLRenderOption.IMAGE_DIRECTROY,htmlContext.getImageDirectory());
      mergeOption(renderOptions,HTMLRenderOption.SUPPORTED_IMAGE_FORMATS,htmlContext.getSupportedImageFormats());
    }
  }
  HashMap options=new HashMap();
  HashMap configs=engine.getConfig().getEmitterConfigs();
  IRenderOption defaultOptions=(IRenderOption)configs.get(IEngineConfig.DEFAULT_RENDER_OPTION);
  if (defaultOptions == null) {
    defaultOptions=(IRenderOption)configs.get(IRenderOption.OUTPUT_FORMAT_HTML);
  }
  if (defaultOptions != null) {
    options.putAll(defaultOptions.getOptions());
  }
  IRenderOption formatOptions=(IRenderOption)configs.get(format);
  if (formatOptions != null) {
    options.putAll(formatOptions.getOptions());
  }
  if (emitterID != null) {
    IRenderOption emitterOptions=(IRenderOption)configs.get(emitterID);
    if (emitterOptions != null) {
      options.putAll(emitterOptions.getOptions());
    }
  }
  if (renderOptions != null) {
    options.putAll(renderOptions.getOptions());
  }
  IRenderOption allOptions=new RenderOption(options);
  executionContext.setRenderOption(allOptions);
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext == null) {
      PDFRenderOption pdfOptions=new PDFRenderOption(allOptions);
      PDFRenderContext pdfContext=new PDFRenderContext();
      pdfContext.setBaseURL(pdfOptions.getBaseURL());
      pdfContext.setEmbededFont(pdfOptions.isEmbededFont());
      pdfContext.setFontDirectory(pdfOptions.getFontDirectory());
      pdfContext.setSupportedImageFormats(pdfOptions.getSupportedImageFormats());
      appContext.put(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT,pdfContext);
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext == null) {
      HTMLRenderContext htmlContext=new HTMLRenderContext();
      HTMLRenderOption htmlOptions=new HTMLRenderOption(allOptions);
      htmlContext.setBaseImageURL(htmlOptions.getBaseImageURL());
      htmlContext.setBaseURL(htmlOptions.getBaseURL());
      htmlContext.setImageDirectory(htmlOptions.getImageDirectory());
      htmlContext.setSupportedImageFormats(htmlOptions.getSupportedImageFormats());
      htmlContext.SetRenderOption(allOptions);
      appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,htmlContext);
    }
  }
}","/** 
 * intialize the render options used to render the report. the render options are load from: <li> engine level default options</li> <li> engine level format options</li> <li> engine level emitter options</li> <li> task level options </li>
 * @throws EngineException 
 */
protected void setupRenderOption() throws EngineException {
  ExtensionManager extManager=ExtensionManager.getInstance();
  if (renderOptions != null) {
    format=renderOptions.getOutputFormat();
    emitterID=renderOptions.getEmitterID();
    if (emitterID == null) {
      if (format == null) {
        format=RenderOption.OUTPUT_FORMAT_HTML;
        renderOptions.setOutputFormat(format);
      }
      emitterID=engine.getConfig().getDefualtEmitter(format);
    }
    if (emitterID != null) {
      if (!extManager.isValidEmitterID(emitterID)) {
        log.log(Level.SEVERE,MessageConstants.INVALID_EMITTER_ID,emitterID);
        throw new EngineException(MessageConstants.INVALID_EMITTER_ID,emitterID);
      }
      String formatOfEmitter=extManager.getFormat(emitterID);
      if (null == format) {
        renderOptions.setOutputFormat(formatOfEmitter);
      }
 else       if (!format.equals(formatOfEmitter)) {
        throw new EngineException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
      }
    }
 else {
      if (format == null) {
        format=RenderOption.OUTPUT_FORMAT_HTML;
        renderOptions.setOutputFormat(format);
        emitterID=RenderOption.OUTPUT_EMITTERID_HTML;
      }
 else {
        boolean supportedFormat=extManager.isSupportedFormat(format);
        if (!supportedFormat) {
          log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
          throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
        }
 else {
          emitterID=extManager.getEmitterID(format);
        }
      }
    }
  }
  Map appContext=executionContext.getAppContext();
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext instanceof PDFRenderContext) {
      PDFRenderContext pdfContext=(PDFRenderContext)renderContext;
      mergeOption(renderOptions,PDFRenderOption.BASE_URL,pdfContext.getBaseURL());
      mergeOption(renderOptions,PDFRenderOption.FONT_DIRECTORY,pdfContext.getFontDirectory());
      mergeOption(renderOptions,PDFRenderOption.SUPPORTED_IMAGE_FORMATS,pdfContext.getSupportedImageFormats());
      mergeOption(renderOptions,PDFRenderOption.IS_EMBEDDED_FONT,new Boolean(pdfContext.isEmbededFont()));
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext instanceof HTMLRenderContext) {
      HTMLRenderContext htmlContext=(HTMLRenderContext)renderContext;
      mergeOption(renderOptions,HTMLRenderOption.BASE_IMAGE_URL,htmlContext.getBaseImageURL());
      mergeOption(renderOptions,HTMLRenderOption.BASE_URL,htmlContext.getBaseURL());
      mergeOption(renderOptions,HTMLRenderOption.IMAGE_DIRECTROY,htmlContext.getImageDirectory());
      mergeOption(renderOptions,HTMLRenderOption.SUPPORTED_IMAGE_FORMATS,htmlContext.getSupportedImageFormats());
    }
  }
  HashMap options=new HashMap();
  HashMap configs=engine.getConfig().getEmitterConfigs();
  IRenderOption defaultOptions=(IRenderOption)configs.get(IEngineConfig.DEFAULT_RENDER_OPTION);
  if (defaultOptions == null) {
    defaultOptions=(IRenderOption)configs.get(IRenderOption.OUTPUT_FORMAT_HTML);
  }
  if (defaultOptions != null) {
    options.putAll(defaultOptions.getOptions());
  }
  IRenderOption formatOptions=(IRenderOption)configs.get(format);
  if (formatOptions != null) {
    options.putAll(formatOptions.getOptions());
  }
  if (emitterID != null) {
    IRenderOption emitterOptions=(IRenderOption)configs.get(emitterID);
    if (emitterOptions != null) {
      options.putAll(emitterOptions.getOptions());
    }
  }
  if (renderOptions != null) {
    options.putAll(renderOptions.getOptions());
  }
  IRenderOption allOptions=new RenderOption(options);
  executionContext.setRenderOption(allOptions);
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext == null) {
      PDFRenderOption pdfOptions=new PDFRenderOption(allOptions);
      PDFRenderContext pdfContext=new PDFRenderContext();
      pdfContext.setBaseURL(pdfOptions.getBaseURL());
      pdfContext.setEmbededFont(pdfOptions.isEmbededFont());
      pdfContext.setFontDirectory(pdfOptions.getFontDirectory());
      pdfContext.setSupportedImageFormats(pdfOptions.getSupportedImageFormats());
      appContext.put(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT,pdfContext);
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext == null) {
      HTMLRenderContext htmlContext=new HTMLRenderContext();
      HTMLRenderOption htmlOptions=new HTMLRenderOption(allOptions);
      htmlContext.setBaseImageURL(htmlOptions.getBaseImageURL());
      htmlContext.setBaseURL(htmlOptions.getBaseURL());
      htmlContext.setImageDirectory(htmlOptions.getImageDirectory());
      htmlContext.setSupportedImageFormats(htmlOptions.getSupportedImageFormats());
      htmlContext.SetRenderOption(allOptions);
      appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,htmlContext);
    }
  }
}",0.9738568129330254
71226,"protected void updateRtLFlag() throws EngineException {
  if (renderOptions == null)   return;
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null)   return;
  ReportDesignHandle handle=(ReportDesignHandle)runnable.getDesignHandle();
  if (handle != null) {
    Object bidiFlag=renderOptions.getOption(IRenderOption.RTL_FLAG);
    String bidiOrientation=null;
    if (bidiFlag != null) {
      if (Boolean.TRUE.equals(bidiFlag)) {
        bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
      }
 else {
        bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
      }
      try {
        handle.setBidiOrientation(bidiOrientation);
        Report report=executionContext.getReport();
        AbstractStyle rootStyle=(AbstractStyle)report.getStyles().get(report.getRootStyleName());
{
          if (rootStyle != null) {
            rootStyle.setDirection(bidiOrientation);
          }
        }
      }
 catch (      SemanticException e) {
        log.log(Level.WARNING,""String_Node_Str"",e);
        throw new EngineException(""String_Node_Str"");
      }
    }
 else     if (handle.isDirectionRTL()) {
      renderOptions.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
      IRenderOption renderOptions2=executionContext.getRenderOption();
      if (renderOptions2 != null) {
        renderOptions2.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
        executionContext.setRenderOption(renderOptions2);
      }
    }
  }
}","protected void updateRtLFlag() throws EngineException {
  if (renderOptions == null)   return;
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null)   return;
  ReportDesignHandle handle=(ReportDesignHandle)runnable.getDesignHandle();
  if (handle != null) {
    Object bidiFlag=renderOptions.getOption(IRenderOption.RTL_FLAG);
    String bidiOrientation=null;
    if (bidiFlag != null) {
      if (Boolean.TRUE.equals(bidiFlag)) {
        bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
      }
 else {
        bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
      }
      try {
        handle.setBidiOrientation(bidiOrientation);
        Report report=executionContext.getReport();
        AbstractStyle rootStyle=(AbstractStyle)report.getStyles().get(report.getRootStyleName());
        if (rootStyle != null) {
          rootStyle.setDirection(bidiOrientation);
        }
      }
 catch (      SemanticException e) {
        log.log(Level.WARNING,""String_Node_Str"",e);
        throw new EngineException(""String_Node_Str"");
      }
    }
 else     if (handle.isDirectionRTL()) {
      renderOptions.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
      IRenderOption renderOptions2=executionContext.getRenderOption();
      if (renderOptions2 != null) {
        renderOptions2.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
        executionContext.setRenderOption(renderOptions2);
      }
    }
  }
}",0.9728445349626612
71227,"protected void endCell(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  AbstractNode current=(AbstractNode)currentNode;
  if (!current.isFirst) {
    current.setFinished(false);
  }
 else {
    current.setFinished(finished);
  }
  if (currentNode.isStarted()) {
    currentNode.end();
  }
 else {
  }
  currentNode=currentNode.getParent();
}","protected void endCell(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  AbstractNode current=(AbstractNode)currentNode;
  if (!current.isFirst) {
    current.setFinished(false);
  }
 else {
    current.setFinished(finished);
  }
  if (currentNode.isStarted()) {
    currentNode.end();
  }
 else {
    if (finished) {
      currentNode.start();
      currentNode.end();
    }
  }
  currentNode=currentNode.getParent();
}",0.904645476772616
71228,"public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    INode[] nodeList=currentBuffer.getNodeStack();
  nestCount--;
if (currentTableIndex == nestCount + 1 && currentTableIndex > 0) {
  assert(buffers != null);
  for (int i=0; i < buffers.length - 1; i++) {
    buffers[i].closePage(nodeList);
    buffers[i]=null;
  }
  buffers[buffers.length - 1].endContainer(content,finished,emitter,visible);
  context.getBufferFactory().refresh();
  currentBuffer=buffers[buffers.length - 1];
  currentTableIndex=-1;
}
 else {
  currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
if (pageBreakIndexs.length - 1 != currentIndex) {
for (int i=currentIndex; i < pageBreakIndexs.length; i++) {
  currentIndex=i;
  currentBuffer=buffers[currentIndex];
  repeatCells(emitter);
}
}
endContainerInPages(content,finished,emitter,visible);
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
int pageIndex=needPageBreak((ICellContent)content);
if (pageIndex >= 0) {
currentBuffer.endContainer(content,false,emitter,visible);
for (int i=currentIndex + 1; i < pageIndex; i++) {
currentBuffer=buffers[i];
repeatCells(emitter);
currentBuffer.startContainer(content,false,emitter,visible);
currentBuffer.endContainer(content,finished,emitter,visible);
}
pageIndex=(pageIndex == pageBreakIndexs.length ? pageIndex - 1 : pageIndex);
currentBuffer=buffers[pageIndex];
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.END_CONTAINER_EVENT));
isRepeatStatus=false;
}
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.PAGE_CONTENT:
currentBuffer.endContainer(content,finished,emitter,visible);
context.getBufferFactory().refresh();
break;
default :
currentBuffer.endContainer(content,finished,emitter,visible);
break;
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.END_CONTAINER_EVENT));
}
}","public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    INode[] nodeList=currentBuffer.getNodeStack();
  nestCount--;
if (currentTableIndex == nestCount + 1 && currentTableIndex > 0) {
  assert(buffers != null);
  for (int i=0; i < buffers.length - 1; i++) {
    buffers[i].closePage(nodeList);
    buffers[i]=null;
  }
  buffers[buffers.length - 1].endContainer(content,finished,emitter,visible);
  context.getBufferFactory().refresh();
  currentBuffer=buffers[buffers.length - 1];
  currentTableIndex=-1;
}
 else {
  currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
if (pageBreakIndexs.length - 1 != currentIndex) {
for (int i=currentIndex; i < pageBreakIndexs.length; i++) {
  currentIndex=i;
  currentBuffer=buffers[currentIndex];
  repeatCells(emitter);
}
}
endContainerInPages(content,finished,emitter,visible);
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
int pageIndex=needPageBreak((ICellContent)content);
if (pageIndex >= 0) {
currentBuffer.endContainer(content,finished,emitter,visible);
for (int i=currentIndex + 1; i < pageIndex; i++) {
currentBuffer=buffers[i];
repeatCells(emitter);
currentBuffer.startContainer(content,false,emitter,visible);
currentBuffer.endContainer(content,finished,emitter,visible);
}
pageIndex=(pageIndex == pageBreakIndexs.length ? pageIndex - 1 : pageIndex);
currentBuffer=buffers[pageIndex];
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.END_CONTAINER_EVENT));
isRepeatStatus=false;
}
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.PAGE_CONTENT:
currentBuffer.endContainer(content,finished,emitter,visible);
context.getBufferFactory().refresh();
break;
default :
currentBuffer.endContainer(content,finished,emitter,visible);
break;
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.END_CONTAINER_EVENT));
}
}",0.9976758926684978
71229,"public TextCompositor(ITextContent textContent,FontMappingManager fontManager,boolean bidiProcessing,boolean fontSubstitution,boolean textWrapping,boolean hyphenation,Locale locale){
  this.textContent=textContent;
  this.fontManager=fontManager;
  this.bidiProcessing=bidiProcessing;
  this.fontSubstitution=fontSubstitution;
  this.hyphenation=hyphenation;
  this.textWrapping=textWrapping;
  this.locale=locale;
  IStyle style=textContent.getComputedStyle();
  letterSpacing=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_LETTER_SPACING));
  wordSpacing=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_WORD_SPACING));
  remainChunks=new ChunkGenerator(fontManager,textContent,bidiProcessing,fontSubstitution);
}","public TextCompositor(ITextContent textContent,FontMappingManager fontManager,boolean bidiProcessing,boolean fontSubstitution,boolean textWrapping,boolean hyphenation,Locale locale){
  this.textContent=textContent;
  this.fontManager=fontManager;
  this.bidiProcessing=bidiProcessing;
  this.fontSubstitution=fontSubstitution;
  this.hyphenation=hyphenation;
  this.locale=locale;
  IStyle style=textContent.getComputedStyle();
  letterSpacing=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_LETTER_SPACING));
  wordSpacing=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_WORD_SPACING));
  this.textWrapping=textWrapping && !PropertyUtil.isWhiteSpaceNoWrap(style.getProperty(StyleConstants.STYLE_WHITE_SPACE));
  remainChunks=new ChunkGenerator(fontManager,textContent,bidiProcessing,fontSubstitution);
}",0.9023024268823896
71230,"private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
    String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
    String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}","private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  String whiteSpace=style.getProperty(StyleConstant.WHITE_SPACE);
  if (CSSConstants.CSS_NOWRAP_VALUE.equals(whiteSpace)) {
    wrapText=false;
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
    String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
    String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}",0.9723467862481316
71231,"public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontWeight(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getTextLineThrough(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getTextUnderline(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign(),style.getDirection()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  return entry;
}","public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontWeight(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getTextLineThrough(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getTextUnderline(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign(),style.getDirection()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  entry.setProperty(StyleConstant.WHITE_SPACE,style.getWhiteSpace());
  return entry;
}",0.9896602658788776
71232,"/** 
 * If the cell properties is not set, then check the row properties and write those properties.
 * @param style this cell style
 */
private void writeCellProperties(IStyle style){
  if (style == null) {
    return;
  }
  writeBackgroundColor(style.getBackgroundColor());
  writeCellBorders(style);
  String verticalAlign=style.getVerticalAlign();
  if (verticalAlign != null) {
    writeAttrTag(""String_Node_Str"",WordUtil.parseVerticalAlign(verticalAlign));
  }
}","/** 
 * If the cell properties is not set, then check the row properties and write those properties.
 * @param style this cell style
 */
private void writeCellProperties(IStyle style){
  if (style == null) {
    return;
  }
  writeBackgroundColor(style.getBackgroundColor());
  writeCellBorders(style);
  String verticalAlign=style.getVerticalAlign();
  if (verticalAlign != null) {
    writeAttrTag(""String_Node_Str"",WordUtil.parseVerticalAlign(verticalAlign));
  }
  String noWrap=CSSConstants.CSS_NOWRAP_VALUE.equalsIgnoreCase(style.getWhiteSpace()) ? ""String_Node_Str"" : ""String_Node_Str"";
  writeAttrTag(""String_Node_Str"",noWrap);
}",0.8470588235294118
71233,"private void testFactTableSaveAndLoad5(CubeMaterializer cubeMaterializer) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IHierarchy hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs,new StopSign());
  dimensions[0]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs,new StopSign());
  dimensions[1]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs,new StopSign());
  dimensions[2]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  cubeMaterializer.createCube(""String_Node_Str"",CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",cubeMaterializer.getDocumentManager(),new StopSign()));
  ISelection[][] filter=new ISelection[1][2];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(2)},true,false);
  filter[0][1]=SelectionFactory.createRangeSelection(new Object[]{new Integer(2)},new Object[]{new Integer(3)},true,false);
  cubeQueryExcutorHelper.addSimpleLevelFilter(new SimpleLevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}","private void testFactTableSaveAndLoad5(CubeMaterializer cubeMaterializer) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IHierarchy hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs,new StopSign());
  dimensions[0]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs,new StopSign());
  dimensions[1]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs,new StopSign());
  dimensions[2]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  cubeMaterializer.createCube(""String_Node_Str"",CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",cubeMaterializer.getDocumentManager(),new StopSign()));
  ISelection[][] filter=new ISelection[1][2];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(2)},true,false);
  filter[0][1]=SelectionFactory.createRangeSelection(new Object[]{new Integer(2)},new Object[]{new Integer(3)},true,false);
  cubeQueryExcutorHelper.addSimpleLevelFilter(new SimpleLevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}",0.9985797696070696
71234,"public boolean equals(Object o){
  MemberForTest other=(MemberForTest)o;
  if (this.iField != other.iField) {
    return false;
  }
  if (!this.bigDecimalField.equals(other.bigDecimalField)) {
    return false;
  }
  if (this.booleanField != other.booleanField) {
    return false;
  }
  if (!this.dateField.equals(other.dateField)) {
    return false;
  }
  if (!this.stringField.equals(other.stringField)) {
    return false;
  }
  if (this.doubleField != other.doubleField) {
    return false;
  }
  return true;
}","public boolean equals(Object o){
  MemberForTest other=(MemberForTest)o;
  if (this.iField != other.iField) {
    return false;
  }
  if ((this.bigDecimalField != null && !this.bigDecimalField.equals(other.bigDecimalField)) || (this.bigDecimalField == null && other.bigDecimalField != null)) {
    return false;
  }
  if (this.booleanField != other.booleanField) {
    return false;
  }
  if ((this.dateField != null && !this.dateField.equals(other.dateField)) || (this.dateField == null && other.dateField != null)) {
    return false;
  }
  if ((this.stringField != null && !this.stringField.equals(other.stringField)) || (this.stringField == null && other.stringField != null)) {
    return false;
  }
  if (this.doubleField != other.doubleField) {
    return false;
  }
  return true;
}",0.7895944912012242
71235,"protected Object readObject() throws IOException {
  short fieldCount=randomAccessFile.readShort();
  if (fieldCount == NULL_VALUE) {
    return null;
  }
  Object[] objects=new Object[fieldCount];
  for (int i=0; i < objects.length; i++) {
    objects[i]=fieldReaders[i].read(randomAccessFile);
  }
  return creator.createInstance(objects);
}","protected Object readObject() throws IOException {
  short fieldCount=randomAccessFile.readShort();
  if (fieldCount == NULL_VALUE) {
    return null;
  }
  Object[] objects=new Object[fieldCount];
  for (int i=0; i < objects.length; i++) {
    if (fieldReaders[i].getDataType() != fieldWriters[i].getDataType())     fieldReaders[i].setDataType(fieldWriters[i].getDataType());
    objects[i]=fieldReaders[i].read(randomAccessFile);
  }
  return creator.createInstance(objects);
}",0.8345498783454988
71236,"/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display){
  IStyle style=text.getStyle();
  handleShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  AttributeBuilder.buildBidiDirection(styleBuffer,text.getComputedStyle());
  String textAlign=style.getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(text);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display){
  IStyle style=text.getStyle();
  handleTextShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  AttributeBuilder.buildBidiDirection(styleBuffer,text.getComputedStyle());
  String textAlign=style.getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(text);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.9979674796747968
71237,"public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  logger.log(Level.FINE,""String_Node_Str"");
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || ""String_Node_Str"".equals(textValue)) {
    textValue=""String_Node_Str"";
  }
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=getElementType(x,y,width,height,mergedStyle);
  }
 else {
    display=getElementType(x,y,null,null,mergedStyle);
  }
  String tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  boolean metadataOutput=false;
  if (enableMetadata) {
    metadataOutput=metadataEmitter.startText(text,tagName);
  }
  String styleClass=text.getStyleClass();
  setStyleName(styleClass,text);
  if (!metadataOutput) {
    outputBookmark(text,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildTextStyle(text,styleBuffer,display);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleVerticalAlignBegin(text);
  String url=validate(text.getHyperlinkAction());
  if (url != null) {
    outputAction(text.getHyperlinkAction(),url);
    String strColor=mergedStyle.getColor();
    if (null != strColor) {
      styleBuffer.setLength(0);
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(strColor);
      styleBuffer.append(""String_Node_Str"");
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_A);
  }
 else {
    writer.text(textValue);
  }
  htmlEmitter.handleVerticalAlignEnd(text);
  writer.closeTag(tagName);
}","public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  logger.log(Level.FINE,""String_Node_Str"");
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || ""String_Node_Str"".equals(textValue)) {
    textValue=""String_Node_Str"";
  }
  int display=htmlEmitter.getTextElementType(x,y,width,height,mergedStyle);
  String tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  boolean metadataOutput=false;
  if (enableMetadata) {
    metadataOutput=metadataEmitter.startText(text,tagName);
  }
  String styleClass=text.getStyleClass();
  setStyleName(styleClass,text);
  if (!metadataOutput) {
    outputBookmark(text,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildTextStyle(text,styleBuffer,display);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleVerticalAlignBegin(text);
  String url=validate(text.getHyperlinkAction());
  if (url != null) {
    outputAction(text.getHyperlinkAction(),url);
    String strColor=mergedStyle.getColor();
    if (null != strColor) {
      styleBuffer.setLength(0);
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(strColor);
      styleBuffer.append(""String_Node_Str"");
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_A);
  }
 else {
    writer.text(textValue);
  }
  htmlEmitter.handleVerticalAlignEnd(text);
  writer.closeTag(tagName);
}",0.9525452976704056
71238,"/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display){
  IStyle style=text.getStyle();
  handleShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  IStyle textComputedStyle=text.getComputedStyle();
  if (null != textComputedStyle) {
    AttributeBuilder.buildTextDecoration(styleBuffer,textComputedStyle);
    AttributeBuilder.buildBidiDirection(styleBuffer,textComputedStyle);
  }
  String textAlign=style.getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(text);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}","/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display){
  IStyle style=text.getStyle();
  handleTextShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  IStyle textComputedStyle=text.getComputedStyle();
  if (null != textComputedStyle) {
    AttributeBuilder.buildTextDecoration(styleBuffer,textComputedStyle);
    AttributeBuilder.buildBidiDirection(styleBuffer,textComputedStyle);
  }
  String textAlign=style.getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(text);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}",0.9981566820276496
71239,"/** 
 * @param levelIndex
 * @return
 */
private AggrSortDefinition findAggregationSort(int levelIndex){
  AggrSortDefinition aggrSortDefn=null;
  if (this.sortList != null) {
    DimLevel level=this.rs.getLevel(levelIndex);
    for (int i=0; i < this.sortList.size(); i++) {
      if (level.equals(aggrSortDefn.getTargetLevel())) {
        aggrSortDefn=(AggrSortDefinition)sortList.get(i);
        break;
      }
    }
  }
  return aggrSortDefn;
}","/** 
 * @param levelIndex
 * @return
 */
private AggrSortDefinition findAggregationSort(int levelIndex){
  AggrSortDefinition aggrSortDefn=null;
  if (this.sortList != null) {
    DimLevel level=this.rs.getLevel(levelIndex);
    for (int i=0; i < this.sortList.size(); i++) {
      AggrSortDefinition defn=(AggrSortDefinition)sortList.get(i);
      if (level.equals(defn.getTargetLevel())) {
        aggrSortDefn=defn;
        break;
      }
    }
  }
  return aggrSortDefn;
}",0.8744588744588745
71240,"protected void endCell(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  AbstractNode current=(AbstractNode)currentNode;
  if (!current.isFirst) {
    current.setFinished(false);
  }
 else {
    current.setFinished(finished);
  }
  if (currentNode.isStarted()) {
    currentNode.end();
  }
 else {
    if (finished) {
      currentNode.start();
      currentNode.end();
    }
  }
  currentNode=currentNode.getParent();
}","protected void endCell(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  AbstractNode current=(AbstractNode)currentNode;
  if (!current.isFirst) {
    current.setFinished(false);
  }
 else {
    current.setFinished(finished);
  }
  if (currentNode.isStarted()) {
    currentNode.end();
  }
 else {
    if (finished && !isRepeated) {
      currentNode.start();
      currentNode.end();
    }
  }
  currentNode=currentNode.getParent();
}",0.9835345773874864
71241,"public void handleOnFetch(IDataSetInstanceHandle dataSet,IDataRow row){
  if (reportContext == null)   return;
  try {
    if (!this.useOnFetchEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),ON_FETCH,dataSetHandle.getOnFetch());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.onFetch(new DataSetInstance(dataSet),new DataSetRow(row),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleOnFetch(IDataSetInstanceHandle dataSet,IDataRow row){
  if (reportContext == null)   return;
  try {
    if (!this.useOnFetchEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      JSScriptStatus status=handleJS(scope,dataSet.getName(),ON_FETCH,dataSetHandle.getOnFetch());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.onFetch(new DataSetInstance(dataSet),new DataSetRow(row),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9261744966442952
71242,"public void handleBeforeOpen(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeOpenEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),BEFORE_OPEN,dataSetHandle.getBeforeOpen());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeOpen(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleBeforeOpen(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeOpenEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      JSScriptStatus status=handleJS(scope,dataSet.getName(),BEFORE_OPEN,dataSetHandle.getBeforeOpen());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeOpen(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.923535253227408
71243,"public void handleBeforeClose(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeCloseEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),BEFORE_CLOSE,dataSetHandle.getBeforeClose());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeClose(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleBeforeClose(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeCloseEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      JSScriptStatus status=handleJS(scope,dataSet.getName(),BEFORE_CLOSE,dataSetHandle.getBeforeClose());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeClose(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9242871189773844
71244,"public void handleAfterClose(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterCloseEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),AFTER_CLOSE,dataSetHandle.getAfterClose());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterClose(reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleAfterClose(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterCloseEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      JSScriptStatus status=handleJS(scope,dataSet.getName(),AFTER_CLOSE,dataSetHandle.getAfterClose());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterClose(reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9188619599578504
71245,"public void handleAfterOpen(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterOpenEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),AFTER_OPEN,dataSetHandle.getAfterOpen());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterOpen(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleAfterOpen(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterOpenEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      JSScriptStatus status=handleJS(scope,dataSet.getName(),AFTER_OPEN,dataSetHandle.getAfterOpen());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterOpen(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9227683049147444
71246,"public static String formatDate(Object data){
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  Date date=getDate(data);
  if (date == null) {
    return null;
  }
  return dateFormat.format(date);
}","public static String formatDate(Object data){
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
  Date date=getDate(data);
  if (date == null) {
    return null;
  }
  return dateFormat.format(date);
}",0.9673202614379084
71247,"/** 
 * Prepares one expression
 * @param expr
 * @param groupLevel
 * @param cx
 * @param reg
 */
private void prepareExpression(IBaseExpression expr,int groupLevel,ScriptContext cx,AggregateRegistry reg){
}","/** 
 * Prepares one expression
 * @param expr
 * @param groupLevel
 * @param cx
 * @param reg
 */
private void prepareExpression(IBaseExpression expr,int groupLevel,ScriptContext cx,AggregateRegistry reg){
  ExpressionCompiler compiler=this.expressionCompiler;
  if (expr instanceof IScriptExpression) {
    String exprText=((IScriptExpression)expr).getText();
    CompiledExpression handle=compiler.compile(exprText,reg,cx.getContext());
    expr.setHandle(handle);
  }
 else   if (expr instanceof IConditionalExpression) {
    IConditionalExpression ce=(IConditionalExpression)expr;
    ce=transformConditionalExpression(ce);
    prepareExpression(ce.getExpression(),groupLevel,cx,reg);
    if (ce.getOperand1() != null)     prepareExpression(ce.getOperand1(),groupLevel,cx,reg);
    if (ce.getOperand2() != null)     prepareExpression(ce.getOperand2(),groupLevel,cx,reg);
    expr.setHandle(ce);
  }
 else   if (expr instanceof IExpressionCollection) {
    IExpressionCollection ce=(IExpressionCollection)expr;
    Object[] exprs=ce.getExpressions().toArray();
    for (int i=0; i < exprs.length; i++) {
      prepareExpression((IBaseExpression)exprs[i],groupLevel,cx,reg);
    }
  }
}",0.297780959198282
71248,"public void widgetSelected(SelectionEvent e){
  boolean needUpdateModel=false;
  Object oSelected=e.getSource();
  if (oSelected.getClass().equals(Button.class)) {
    needUpdateModel=true;
    if (oSelected.equals(cbOrientation)) {
      if (cbOrientation.getSelection()) {
        orientation=Orientation.HORIZONTAL_LITERAL;
      }
 else {
        orientation=Orientation.VERTICAL_LITERAL;
      }
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList();
      ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
    }
 else {
      Button btn=(Button)e.getSource();
      if (btn.getSelection()) {
        if (this.sSubType != null && !getSubtypeFromButton(btn).equals(sSubType)) {
          int iTypeIndex=vSubTypeNames.indexOf(sSubType);
          if (iTypeIndex >= 0) {
            ((Button)cmpTypeButtons.getChildren()[iTypeIndex]).setSelection(false);
            cmpTypeButtons.redraw();
          }
        }
        ChartUIUtil.saveLabelPositionIntoCache(getSeriesDefinitionForProcessing());
        sSubType=getSubtypeFromButton(btn);
        ChartCacheManager.getInstance().cacheSubtype(sType,sSubType);
      }
 else {
        if (this.sSubType != null && getSubtypeFromButton(btn).equals(sSubType)) {
          btn.setSelection(true);
        }
      }
    }
  }
 else   if (oSelected.getClass().equals(Table.class)) {
    sType=((String)((TableItem)e.item).getData()).trim();
    if (!sOldType.equals(sType)) {
      sOldType=sType;
      if (!getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
        if (chartModel != null && chartModel instanceof ChartWithAxes) {
          Orientation lastOrientation=ChartCacheManager.getInstance().findOrientation(sType);
          if (lastOrientation != null && this.orientation != lastOrientation) {
            this.orientation=lastOrientation;
            this.rotateAxisTitle((ChartWithAxes)chartModel);
          }
          if (lastOrientation == null) {
            this.orientation=htTypes.get(sType).getDefaultOrientation();
          }
        }
      }
      if (chartModel != null && chartModel instanceof ChartWithAxes && ChartCacheManager.getInstance().findCategory(sType) != null) {
        boolean bCategory=ChartCacheManager.getInstance().findCategory(sType).booleanValue();
        ((Axis)((ChartWithAxes)chartModel).getAxes().get(0)).setCategoryAxis(bCategory);
      }
      sSubType=null;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      cmpMisc.layout();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbMultipleY)) {
    needUpdateModel=true;
    lblSeriesType.setEnabled(isTwoAxesEnabled());
    Axis xAxis=((Axis)((ChartWithAxes)chartModel).getAxes().get(0));
    ((ChartWizardContext)getContext()).setMoreAxesSupported(cbMultipleY.getSelectionIndex() == 2);
    if (chartModel instanceof ChartWithoutAxes) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
    }
    ChartAdapter.beginIgnoreNotifications();
    int iAxisNumber=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
    if (cbMultipleY.getSelectionIndex() == 0) {
      ChartCacheManager.getInstance().cacheSeriesType(null);
      if (iAxisNumber > 1) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 1);
      }
    }
 else     if (cbMultipleY.getSelectionIndex() == 1) {
      if (iAxisNumber == 1) {
        ChartUIUtil.addAxis((ChartWithAxes)chartModel);
      }
 else       if (iAxisNumber > 2) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 2);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastSeriesType=ChartCacheManager.getInstance().findSeriesType();
      if (lastSeriesType != null) {
        cbSeriesType.setText(lastSeriesType);
      }
 else {
        Axis overlayAxis=(Axis)xAxis.getAssociatedAxes().get(1);
        String sDisplayName=((SeriesDefinition)overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries().getDisplayName();
        cbSeriesType.setText(sDisplayName);
      }
      changeOverlaySeriesType();
    }
    cbSeriesType.setEnabled(isTwoAxesEnabled());
    if (updateDimensionCombo(sType)) {
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
    }
    cmpMisc.layout();
  }
 else   if (oSelected.equals(cbDimension)) {
    String newDimension=cbDimension.getItem(cbDimension.getSelectionIndex());
    if (!newDimension.equals(sDimension)) {
      sDimension=newDimension;
      ChartCacheManager.getInstance().cacheDimension(sType,sDimension);
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbSeriesType)) {
    needUpdateModel=true;
    changeOverlaySeriesType();
  }
  if (needUpdateModel) {
    ChartAdapter.notifyUpdateApply();
    refreshChart();
    if (oSelected.getClass().equals(Table.class)) {
      populateSeriesTypesList();
    }
 else     if (oSelected.equals(cbOrientation)) {
      if (chartModel instanceof ChartWithAxes) {
        rotateAxisTitle((ChartWithAxes)chartModel);
      }
    }
    doPreview();
  }
}","public void widgetSelected(SelectionEvent e){
  boolean needUpdateModel=false;
  Object oSelected=e.getSource();
  if (oSelected.getClass().equals(Button.class)) {
    needUpdateModel=true;
    if (oSelected.equals(cbOrientation)) {
      if (cbOrientation.getSelection()) {
        orientation=Orientation.HORIZONTAL_LITERAL;
      }
 else {
        orientation=Orientation.VERTICAL_LITERAL;
      }
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList();
      ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
    }
 else {
      Button btn=(Button)e.getSource();
      if (btn.getSelection()) {
        if (this.sSubType != null && !getSubtypeFromButton(btn).equals(sSubType)) {
          int iTypeIndex=vSubTypeNames.indexOf(sSubType);
          if (iTypeIndex >= 0) {
            ((Button)cmpTypeButtons.getChildren()[iTypeIndex]).setSelection(false);
            cmpTypeButtons.redraw();
          }
        }
        ChartUIUtil.saveLabelPositionIntoCache(getSeriesDefinitionForProcessing());
        sSubType=getSubtypeFromButton(btn);
        ChartCacheManager.getInstance().cacheSubtype(sType,sSubType);
      }
 else {
        if (this.sSubType != null && getSubtypeFromButton(btn).equals(sSubType)) {
          btn.setSelection(true);
        }
      }
    }
  }
 else   if (oSelected.getClass().equals(Table.class)) {
    sType=((String)((TableItem)e.item).getData()).trim();
    if (!sOldType.equals(sType)) {
      sOldType=sType;
      if (!getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
        if (chartModel != null && chartModel instanceof ChartWithAxes) {
          Orientation lastOrientation=ChartCacheManager.getInstance().findOrientation(sType);
          if (lastOrientation != null && this.orientation != lastOrientation) {
            this.orientation=lastOrientation;
            this.rotateAxisTitle((ChartWithAxes)chartModel);
          }
          if (lastOrientation == null) {
            Orientation currentOrientation=this.orientation;
            this.orientation=htTypes.get(sType).getDefaultOrientation();
            if (currentOrientation != this.orientation) {
              this.rotateAxisTitle((ChartWithAxes)chartModel);
            }
          }
        }
      }
      if (chartModel != null && chartModel instanceof ChartWithAxes && ChartCacheManager.getInstance().findCategory(sType) != null) {
        boolean bCategory=ChartCacheManager.getInstance().findCategory(sType).booleanValue();
        ((Axis)((ChartWithAxes)chartModel).getAxes().get(0)).setCategoryAxis(bCategory);
      }
      sSubType=null;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      cmpMisc.layout();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbMultipleY)) {
    needUpdateModel=true;
    lblSeriesType.setEnabled(isTwoAxesEnabled());
    Axis xAxis=((Axis)((ChartWithAxes)chartModel).getAxes().get(0));
    ((ChartWizardContext)getContext()).setMoreAxesSupported(cbMultipleY.getSelectionIndex() == 2);
    if (chartModel instanceof ChartWithoutAxes) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
    }
    ChartAdapter.beginIgnoreNotifications();
    int iAxisNumber=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
    if (cbMultipleY.getSelectionIndex() == 0) {
      ChartCacheManager.getInstance().cacheSeriesType(null);
      if (iAxisNumber > 1) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 1);
      }
    }
 else     if (cbMultipleY.getSelectionIndex() == 1) {
      if (iAxisNumber == 1) {
        ChartUIUtil.addAxis((ChartWithAxes)chartModel);
      }
 else       if (iAxisNumber > 2) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 2);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastSeriesType=ChartCacheManager.getInstance().findSeriesType();
      if (lastSeriesType != null) {
        cbSeriesType.setText(lastSeriesType);
      }
 else {
        Axis overlayAxis=(Axis)xAxis.getAssociatedAxes().get(1);
        String sDisplayName=((SeriesDefinition)overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries().getDisplayName();
        cbSeriesType.setText(sDisplayName);
      }
      changeOverlaySeriesType();
    }
    cbSeriesType.setEnabled(isTwoAxesEnabled());
    if (updateDimensionCombo(sType)) {
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
    }
    cmpMisc.layout();
  }
 else   if (oSelected.equals(cbDimension)) {
    String newDimension=cbDimension.getItem(cbDimension.getSelectionIndex());
    if (!newDimension.equals(sDimension)) {
      sDimension=newDimension;
      ChartCacheManager.getInstance().cacheDimension(sType,sDimension);
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbSeriesType)) {
    needUpdateModel=true;
    changeOverlaySeriesType();
  }
  if (needUpdateModel) {
    ChartAdapter.notifyUpdateApply();
    refreshChart();
    if (oSelected.getClass().equals(Table.class)) {
      populateSeriesTypesList();
    }
 else     if (oSelected.equals(cbOrientation)) {
      if (chartModel instanceof ChartWithAxes) {
        rotateAxisTitle((ChartWithAxes)chartModel);
      }
    }
    doPreview();
  }
}",0.9805425631431244
71249,"/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineImpl engine){
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(engine.getContext().getScriptContext().getContext());
  }
  new CoreJavaScriptInitializer().initialize(engine.getContext().getScriptContext().getContext(),scope);
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  classLoaderHolder.set(engine.getContext().getClassLoader());
  engine.addShutdownListener(new IShutdownListener(){
    public void dataEngineShutdown(){
      classLoaderHolder.set(null);
    }
  }
);
  engine.addShutdownListener(new ReportDocumentShutdownListener(this));
  this.queryResultIDUtil=new QueryResultIDUtil();
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}","/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineImpl engine){
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(engine.getContext().getScriptContext().getContext());
  }
  new CoreJavaScriptInitializer().initialize(engine.getContext().getScriptContext().getContext(),scope);
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ ""String_Node_Str""+ getCount()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  classLoaderHolder.set(engine.getContext().getClassLoader());
  engine.addShutdownListener(new IShutdownListener(){
    public void dataEngineShutdown(){
      classLoaderHolder.set(null);
    }
  }
);
  engine.addShutdownListener(new ReportDocumentShutdownListener(this));
  this.queryResultIDUtil=new QueryResultIDUtil();
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}",0.9859282796187018
71250,"/** 
 * Convenient to use EcoreUtil.copy without explicit casting. But please note that EcoreUtil.copy is costly, in general we should only use it in ui code.
 * @param < T >
 * @param src
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public static <T extends EObject>T eCopy(T src){
  return (T)EcoreUtil.copy(src);
}","/** 
 * Convenient to use EcoreUtil.copy without explicit casting. But please note that EcoreUtil.copy is costly, in general we should only use it in ui code.
 * @param < T >
 * @param src
 * @since 2.5.0
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public static <T extends EObject>T eCopy(T src){
  return (T)EcoreUtil.copy(src);
}",0.9759036144578314
71251,"/** 
 * Returns all instances of <code>SeriesDefinition</code> on category of chart.
 * @param chart chart model object.
 * @return a list of instances of <code>SeriesDefinition</code>.
 * @since 2.3
 */
public static EList<SeriesDefinition> getBaseSeriesDefinitions(Chart chart){
  if (chart instanceof ChartWithAxes) {
    return ((Axis)((ChartWithAxes)chart).getAxes().get(0)).getSeriesDefinitions();
  }
 else   if (chart instanceof ChartWithoutAxes) {
    return ((ChartWithoutAxes)chart).getSeriesDefinitions();
  }
  return null;
}","/** 
 * Returns all instances of <code>SeriesDefinition</code> on category of chart.
 * @param chart chart model object.
 * @return a list of instances of <code>SeriesDefinition</code>.
 * @since 2.3
 */
public static EList<SeriesDefinition> getBaseSeriesDefinitions(Chart chart){
  if (chart instanceof ChartWithAxes) {
    return ((ChartWithAxes)chart).getAxes().get(0).getSeriesDefinitions();
  }
 else   if (chart instanceof ChartWithoutAxes) {
    return ((ChartWithoutAxes)chart).getSeriesDefinitions();
  }
  return null;
}",0.7808988764044944
71252,"private static String[] toStringNameArray(List objList){
  if (objList == null) {
    return null;
  }
  String[] rt=new String[objList.size()];
  int i=0;
  for (Iterator itr=objList.iterator(); itr.hasNext(); ) {
    Object obj=itr.next();
    if (obj instanceof AbstractEnumerator) {
      rt[i++]=((AbstractEnumerator)obj).getName();
    }
 else {
      rt[i++]=String.valueOf(obj);
    }
  }
  return rt;
}","private static String[] toStringNameArray(List objList){
  if (objList == null) {
    return null;
  }
  String[] rt=new String[objList.size()];
  int i=0;
  for (Iterator itr=objList.iterator(); itr.hasNext(); ) {
    Object obj=itr.next();
    if (obj instanceof Enumerator) {
      rt[i++]=((Enumerator)obj).getName();
    }
 else {
      rt[i++]=String.valueOf(obj);
    }
  }
  return rt;
}",0.98014888337469
71253,"private void selectItemInComboExpList(ISelection selection){
  ISelection sel=selection;
  if (sel.isEmpty() && cmbExpList.getItemCount() > 0) {
    IPropertyDefn propDefn=(IPropertyDefn)cmbExprListViewer.getElementAt(0);
    if (propDefn != null) {
      sel=new StructuredSelection(propDefn);
    }
  }
  cmbExprListViewer.setSelection(sel);
  return;
}","private void selectItemInComboExpList(ISelection selection){
  ISelection sel=selection;
  if (sel.isEmpty() && cmbExpList.getItemCount() > 0) {
    IPropertyDefn propDefn=(IPropertyDefn)cmbExprListViewer.getElementAt(0);
    if (propDefn != null) {
      sel=new StructuredSelection(propDefn);
    }
  }
  cmbExprListViewer.setSelection(getNewSelection(sel));
  return;
}",0.968363136176066
71254,"/** 
 * Returns report runnable from design file
 * @param request
 * @param path
 * @return
 * @throws EngineException
 */
public static IReportRunnable getRunnableFromDesignFile(HttpServletRequest request,String designFile,Map options) throws EngineException {
  IReportRunnable reportRunnable=null;
  File file=new File(designFile);
  if (file.exists()) {
    reportRunnable=ReportEngineService.getInstance().openReportDesign(designFile,options);
  }
 else {
    InputStream is=null;
    URL url=null;
    try {
      designFile=ParameterAccessor.workingFolder + ""String_Node_Str"" + ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
      if (!designFile.startsWith(""String_Node_Str""))       designFile=""String_Node_Str"" + designFile;
      url=request.getSession().getServletContext().getResource(designFile);
      if (url != null)       is=url.openStream();
      if (is != null)       reportRunnable=ReportEngineService.getInstance().openReportDesign(url.toString(),is,options);
    }
 catch (    Exception e) {
    }
  }
  return reportRunnable;
}","/** 
 * Returns report runnable from design file
 * @param request
 * @param path
 * @return
 * @throws EngineException
 */
public static IReportRunnable getRunnableFromDesignFile(HttpServletRequest request,String designFile,Map options) throws EngineException {
  IReportRunnable reportRunnable=null;
  File file=new File(designFile);
  if (file.exists()) {
    reportRunnable=ReportEngineService.getInstance().openReportDesign(designFile,options);
  }
 else {
    InputStream is=null;
    URL url=null;
    try {
      if (!ParameterAccessor.isUniversalPath(designFile)) {
        designFile=ParameterAccessor.workingFolder + ""String_Node_Str"" + ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
      }
      String resoureFile=designFile;
      if (!resoureFile.startsWith(""String_Node_Str"")) {
        resoureFile=""String_Node_Str"" + resoureFile;
      }
      url=request.getSession().getServletContext().getResource(resoureFile);
      if (url != null) {
        is=url.openStream();
      }
 else {
        url=new URL(designFile);
        is=url.openStream();
      }
      if (is != null) {
        reportRunnable=ReportEngineService.getInstance().openReportDesign(url.toString(),is,options);
      }
    }
 catch (    Exception e) {
    }
  }
  return reportRunnable;
}",0.6986128625472888
71255,"/** 
 * Checks if a given file name is a relative path.
 * @param fileName The file name.
 * @return A <code>boolean</code> value indicating if the file name is arelative path or not.
 */
public static boolean isRelativePath(String fileName){
  if (fileName == null) {
    return false;
  }
  return !new File(fileName).isAbsolute();
}","/** 
 * Checks if a given file name is a relative path. This will only check for local file path.
 * @param fileName The file name.
 * @return A <code>boolean</code> value indicating if the file name is arelative path or not.
 */
public static boolean isRelativePath(String fileName){
  if (fileName == null) {
    return false;
  }
  return !new File(fileName).isAbsolute();
}",0.9410112359550562
71256,"/** 
 * Process folder settings with absolute path. If path is a relative path, first relative to context. If set canWrite to true, then check the folder if writable.If not, relative to ${java.io.tmpdir} folder.
 * @param context
 * @param path
 * @param defaultPath
 * @param canWrite
 * @return
 */
public static String processRealPath(ServletContext context,String path,String defaultPath,boolean canWrite){
  String realPath=null;
  boolean isRelative=false;
  path=convertSystemPath(path);
  if (path == null || path.trim().length() <= 0) {
    path=DataUtil.trimString(defaultPath);
  }
  if (isRelativePath(path)) {
    isRelative=true;
    if (!path.startsWith(""String_Node_Str""))     path=""String_Node_Str"" + path;
    realPath=DataUtil.trimSepEnd(getRealPath(path,context));
  }
 else {
    realPath=DataUtil.trimSepEnd(path);
  }
  boolean flag=makeDir(realPath);
  if (!canWrite)   return realPath;
  if (flag) {
    try {
      if (canWrite && new File(realPath).canWrite())       return realPath;
    }
 catch (    Exception e) {
    }
  }
  if (isRelative) {
    realPath=DataUtil.trimSepEnd(System.getProperty(""String_Node_Str"")) + path;
  }
 else {
    if (defaultPath != null)     realPath=DataUtil.trimSepEnd(System.getProperty(""String_Node_Str"")) + File.separator + defaultPath;
  }
  makeDir(realPath);
  return realPath;
}","/** 
 * Process folder settings with absolute path. If path is a relative path, first relative to context. If set canWrite to true, then check the folder if writable.If not, relative to ${java.io.tmpdir} folder.
 * @param context
 * @param path
 * @param defaultPath
 * @param canWrite
 * @return
 */
private static String processRealPath(ServletContext context,String path,String defaultPath,boolean canWrite){
  String realPath=null;
  boolean isRelative=false;
  path=convertSystemPath(path);
  if (path == null || path.trim().length() <= 0) {
    path=DataUtil.trimString(defaultPath);
  }
  if (isRelativePath(path)) {
    isRelative=true;
    if (!path.startsWith(""String_Node_Str""))     path=""String_Node_Str"" + path;
    realPath=DataUtil.trimSepEnd(getRealPath(path,context));
  }
 else {
    realPath=DataUtil.trimSepEnd(path);
  }
  boolean flag=makeDir(realPath);
  if (!canWrite)   return realPath;
  if (flag) {
    try {
      if (canWrite && new File(realPath).canWrite())       return realPath;
    }
 catch (    Exception e) {
    }
  }
  if (isRelative) {
    realPath=DataUtil.trimSepEnd(System.getProperty(""String_Node_Str"")) + path;
  }
 else {
    if (defaultPath != null)     realPath=DataUtil.trimSepEnd(System.getProperty(""String_Node_Str"")) + File.separator + defaultPath;
  }
  makeDir(realPath);
  return realPath;
}",0.995909259947936
71257,"/** 
 * Returns the real path based on working folder. If file path is an absolute path, return it directly. Else, return the absolute path based on working folder.
 * @param filePath
 * @param request
 * @return
 */
public static String getRealPathOnWorkingFolder(String filePath,HttpServletRequest request){
  if (filePath == null || filePath.length() == 0) {
    return filePath;
  }
  if (!isRelativePath(filePath))   return filePath;
  if (isRelativePath(workingFolder)) {
    filePath=getRealPath(workingFolder + ""String_Node_Str"" + filePath,request.getSession().getServletContext());
  }
 else {
    filePath=workingFolder + File.separator + filePath;
  }
  return filePath;
}","/** 
 * Returns the real path based on working folder. If file path is an absolute path, return it directly. Else, return the absolute path based on working folder.
 * @param filePath
 * @param request
 * @return
 */
public static String getRealPathOnWorkingFolder(String filePath,HttpServletRequest request){
  if (filePath == null || filePath.length() == 0) {
    return filePath;
  }
  if (isUniversalPath(filePath)) {
    return filePath;
  }
  if (!isUniversalPath(workingFolder)) {
    filePath=getRealPath(workingFolder + ""String_Node_Str"" + filePath,request.getSession().getServletContext());
  }
 else {
    filePath=workingFolder + ""String_Node_Str"" + filePath;
  }
  return filePath;
}",0.889050036258158
71258,"/** 
 * Override implementation of doPostService.
 */
protected String doPostService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  request.setAttribute(""String_Node_Str"",request.getServletPath());
  String className=getClass().getName().substring(getClass().getName().lastIndexOf('.') + 1);
  return JSPRootPath + ""String_Node_Str"" + className+ ""String_Node_Str"";
}","/** 
 * Override implementation of doPostService.
 */
protected String doPostService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String className=getClass().getName().substring(getClass().getName().lastIndexOf('.') + 1);
  return JSPRootPath + ""String_Node_Str"" + className+ ""String_Node_Str"";
}",0.9112271540469974
71259,"/** 
 * @see javax.servlet.http.HttpServlet#service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)
 */
public void service(ServletRequest req,ServletResponse res) throws ServletException, IOException {
  if (req.getCharacterEncoding() == null)   req.setCharacterEncoding(IBirtConstants.DEFAULT_ENCODE);
  super.service(req,res);
}","/** 
 * @see javax.servlet.http.HttpServlet#service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)
 */
public void service(ServletRequest req,ServletResponse res) throws ServletException, IOException {
  if (req.getCharacterEncoding() == null)   req.setCharacterEncoding(IBirtConstants.DEFAULT_ENCODE);
  req.setAttribute(""String_Node_Str"",((HttpServletRequest)req).getServletPath());
  super.service(req,res);
}",0.8411458333333334
71260,"private void switchDataTable(){
  if (isCubeMode()) {
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      if (bIsGettingPreviewData) {
        return;
      }
      ColumnBindingInfo[] headers=null;
      List dataList=null;
      try {
        headers=getDataServiceProvider().getPreviewHeadersInfo();
        bIsGettingPreviewData=true;
        dataList=getDataServiceProvider().getPreviewData();
        bIsGettingPreviewData=false;
        getDataServiceProvider().setPredefinedExpressions(headers);
        final ColumnBindingInfo[] headerInfo=headers;
        final List data=dataList;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
          }
        }
);
      }
 catch (      Exception e) {
        final ColumnBindingInfo[] headerInfo=headers;
        final List data=dataList;
        final String msg=e.getMessage();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
            WizardBase.showException(msg);
          }
        }
);
      }
    }
  }
;
  new Thread(runnable).start();
}","private void switchDataTable(){
  if (isCubeMode()) {
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      ColumnBindingInfo[] headers=null;
      List<?> dataList=null;
      try {
        headers=getDataServiceProvider().getPreviewHeadersInfo();
        dataList=getPreviewData();
        getDataServiceProvider().setPredefinedExpressions(headers);
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
          }
        }
);
      }
 catch (      Exception e) {
        final ColumnBindingInfo[] headerInfo=headers;
        final List data=dataList;
        final String msg=e.getMessage();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
            WizardBase.showException(msg);
          }
        }
);
      }
    }
  }
;
  new Thread(runnable).start();
}",0.7855550601872492
71261,"/** 
 * This method is called upon plug-in activation
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
}","/** 
 * This method is called upon plug-in activation
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  ViewerPlugin dummy=ViewerPlugin.getDefault();
  String appRootPath=System.getProperty(ViewerPlugin.BIRT_VIEWER_ROOT_PATH);
  if (appRootPath != null) {
    ImageManager.getInstance().setURIRootPath(appRootPath);
  }
}",0.5674603174603174
71262,"/** 
 * Handle builder dialog action.
 */
private void handleBuilderAction(){
  try {
    String sExpr=context.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,getExpression(getInputControl()),context.getExtendedItem(),sTitle);
    boolean isSuccess=setUIText(getInputControl(),sExpr);
    query.setDefinition(sExpr);
    if (!isSuccess) {
      Event event=new Event();
      event.type=IChartDataSheet.EVENT_QUERY;
      event.data=queryType;
      context.getDataSheet().notifyListeners(event);
    }
  }
 catch (  ChartException e1) {
    WizardBase.displayException(e1);
  }
}","/** 
 * Handle builder dialog action.
 */
protected void handleBuilderAction(){
  try {
    String sExpr=context.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,getExpression(getInputControl()),context.getExtendedItem(),sTitle);
    boolean isSuccess=setUIText(getInputControl(),sExpr);
    query.setDefinition(sExpr);
    if (!isSuccess) {
      Event event=new Event();
      event.type=IChartDataSheet.EVENT_QUERY;
      event.data=queryType;
      context.getDataSheet().notifyListeners(event);
    }
  }
 catch (  ChartException e1) {
    WizardBase.displayException(e1);
  }
}",0.9902439024390244
71263,"/** 
 * @see javax.servlet.http.HttpServlet#service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)
 */
public void service(ServletRequest req,ServletResponse res) throws ServletException, IOException {
  if (req.getCharacterEncoding() == null)   req.setCharacterEncoding(IBirtConstants.DEFAULT_ENCODE);
  super.service(req,res);
}","/** 
 * @see javax.servlet.http.HttpServlet#service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)
 */
public void service(ServletRequest req,ServletResponse res) throws ServletException, IOException {
  if (req.getCharacterEncoding() == null)   req.setCharacterEncoding(IBirtConstants.DEFAULT_ENCODE);
  req.setAttribute(""String_Node_Str"",((HttpServletRequest)req).getServletPath());
  super.service(req,res);
}",0.8411458333333334
71264,"public final String[] validate(Chart cm,Object oContext){
  final ArrayList alProblems=new ArrayList(4);
  final ExtendedItemHandle eih=(ExtendedItemHandle)oContext;
  if (DEUtil.getDataSetList(eih).size() == 0 && ChartXTabUtil.getBindingCube(eih) == null) {
    alProblems.add(Messages.getString(""String_Node_Str""));
  }
  final QueryUIHelper.SeriesQueries[] qsqa=new QueryUIHelper().getSeriesQueryDefinitions(cm);
  Collection co;
  for (int i=0; i < qsqa.length; i++) {
    co=qsqa[i].validate();
    if (co != null) {
      alProblems.addAll(co);
    }
  }
  return (String[])alProblems.toArray(new String[alProblems.size()]);
}","public final String[] validate(Chart cm,Object oContext){
  final ArrayList<String> alProblems=new ArrayList<String>(4);
  final ExtendedItemHandle eih=(ExtendedItemHandle)oContext;
  if (DEUtil.getDataSetList(eih).size() == 0 && ChartXTabUtil.getBindingCube(eih) == null) {
    alProblems.add(Messages.getString(""String_Node_Str""));
  }
  final QueryUIHelper.SeriesQueries[] qsqa=new QueryUIHelper().getSeriesQueryDefinitions(cm);
  Collection<String> co;
  for (int i=0; i < qsqa.length; i++) {
    co=qsqa[i].validate();
    if (co != null) {
      alProblems.addAll(co);
    }
  }
  return alProblems.toArray(new String[alProblems.size()]);
}",0.9107981220657276
71265,"/** 
 * @param cwoa
 */
final SeriesQueries[] getSeriesQueryDefinitions(ChartWithoutAxes cwoa){
  final ArrayList alSeriesQueries=new ArrayList(4);
  EList elSD=cwoa.getSeriesDefinitions();
  if (elSD.size() != 1) {
    return (SeriesQueries[])alSeriesQueries.toArray(new SeriesQueries[alSeriesQueries.size()]);
  }
  SeriesDefinition sd=(SeriesDefinition)elSD.get(0);
  final Series seBase=sd.getDesignTimeSeries();
  EList elBaseSeries=seBase.getDataDefinition();
  int[] bDataIndex=getValidationIndex(seBase);
  Query[] qua=new Query[bDataIndex.length];
  SeriesQueries sqd=new SeriesQueries(BASE_SERIES,qua);
  for (int i=0; i < bDataIndex.length; i++) {
    if (i < elBaseSeries.size()) {
      qua[i]=(Query)elBaseSeries.get(bDataIndex[i]);
    }
 else {
      qua[i]=QueryImpl.create(""String_Node_Str"");
    }
  }
  alSeriesQueries.add(sqd);
  Series seOrthogonal;
  EList elOrthogonalSeries;
  elSD=sd.getSeriesDefinitions();
  for (int k=0; k < elSD.size(); k++) {
    sd=(SeriesDefinition)elSD.get(k);
    seOrthogonal=sd.getDesignTimeSeries();
    elOrthogonalSeries=seOrthogonal.getDataDefinition();
    int[] oDataIndex=getValidationIndex(seOrthogonal);
    qua=new Query[oDataIndex.length];
    sqd=new SeriesQueries(ORTHOGONAL_SERIES,qua);
    for (int i=0; i < oDataIndex.length; i++) {
      if (oDataIndex[i] < elOrthogonalSeries.size()) {
        qua[i]=(Query)elOrthogonalSeries.get(oDataIndex[i]);
      }
 else {
        qua[i]=QueryImpl.create(""String_Node_Str"");
      }
    }
    alSeriesQueries.add(sqd);
  }
  return (SeriesQueries[])alSeriesQueries.toArray(new SeriesQueries[alSeriesQueries.size()]);
}","/** 
 * @param cwoa
 */
final SeriesQueries[] getSeriesQueryDefinitions(ChartWithoutAxes cwoa){
  final ArrayList<SeriesQueries> alSeriesQueries=new ArrayList<SeriesQueries>(4);
  EList elSD=cwoa.getSeriesDefinitions();
  if (elSD.size() != 1) {
    return alSeriesQueries.toArray(new SeriesQueries[alSeriesQueries.size()]);
  }
  SeriesDefinition sd=(SeriesDefinition)elSD.get(0);
  final Series seBase=sd.getDesignTimeSeries();
  EList elBaseSeries=seBase.getDataDefinition();
  int[] bDataIndex=getValidationIndex(seBase);
  Query[] qua=new Query[bDataIndex.length];
  SeriesQueries sqd=new SeriesQueries(BASE_SERIES,qua);
  for (int i=0; i < bDataIndex.length; i++) {
    if (i < elBaseSeries.size()) {
      qua[i]=(Query)elBaseSeries.get(bDataIndex[i]);
    }
 else {
      qua[i]=QueryImpl.create(""String_Node_Str"");
    }
  }
  alSeriesQueries.add(sqd);
  Series seOrthogonal;
  EList elOrthogonalSeries;
  elSD=sd.getSeriesDefinitions();
  for (int k=0; k < elSD.size(); k++) {
    sd=(SeriesDefinition)elSD.get(k);
    seOrthogonal=sd.getDesignTimeSeries();
    elOrthogonalSeries=seOrthogonal.getDataDefinition();
    int[] oDataIndex=getValidationIndex(seOrthogonal);
    qua=new Query[oDataIndex.length];
    sqd=new SeriesQueries(ORTHOGONAL_SERIES,qua);
    for (int i=0; i < oDataIndex.length; i++) {
      if (oDataIndex[i] < elOrthogonalSeries.size()) {
        qua[i]=(Query)elOrthogonalSeries.get(oDataIndex[i]);
      }
 else {
        qua[i]=QueryImpl.create(""String_Node_Str"");
      }
    }
    alSeriesQueries.add(sqd);
  }
  return alSeriesQueries.toArray(new SeriesQueries[alSeriesQueries.size()]);
}",0.9496314496314496
71266,"public Collection validate(){
  ArrayList al=null;
  for (int i=0; i < qua.length; i++) {
    if (!qua[i].isDefined()) {
      if (al == null) {
        al=new ArrayList(qua.length);
      }
      al.add(Messages.getString(""String_Node_Str"",sSeriesType));
    }
  }
  if (qua.length == 0) {
    al=new ArrayList(qua.length);
    al.add(Messages.getString(""String_Node_Str"",sSeriesType));
  }
  return al;
}","public Collection<String> validate(){
  ArrayList<String> al=null;
  if (qua.length == 0) {
    al=new ArrayList<String>(qua.length);
    al.add(Messages.getString(""String_Node_Str"",sSeriesType));
  }
 else {
    Object seriesName=((Series)qua[0].eContainer()).getSeriesIdentifier();
    String nameExt=""String_Node_Str"";
    if (seriesName != null && seriesName.toString().length() > 0) {
      nameExt=""String_Node_Str"" + seriesName.toString() + ""String_Node_Str"";
    }
    for (int i=0; i < qua.length; i++) {
      if (!qua[i].isDefined()) {
        if (al == null) {
          al=new ArrayList<String>(qua.length);
        }
        al.add(Messages.getString(""String_Node_Str"",sSeriesType + nameExt));
      }
    }
  }
  return al;
}",0.4694589877835951
71267,"public void handleEvent(Event event){
  String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
  String text=cmbDefinition.getText();
  if (!isTableSharedBinding() && text.equals(oldQuery)) {
    return;
  }
  Object checkResult=context.getDataServiceProvider().checkData(queryType,text);
  if (checkResult != null && checkResult instanceof Boolean) {
    if (!((Boolean)checkResult).booleanValue()) {
      WizardBase.showException(Messages.getString(""String_Node_Str""));
      cmbDefinition.setText(oldQuery);
      return;
    }
 else {
      WizardBase.removeException();
    }
  }
  updateQuery(text);
  if (!oldQuery.equals(text) && queryType == ChartUIConstants.QUERY_VALUE) {
    if (context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE,text)) {
      Event e=new Event();
      e.data=BaseDataDefinitionComponent.this;
      e.widget=cmbDefinition;
      e.type=IChartDataSheet.EVENT_QUERY;
      context.getDataSheet().notifyListeners(e);
    }
  }
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
    ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
  }
  if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
    cmbDefinition.setEnabled(false);
  }
}","public void handleEvent(Event event){
  String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
  String text=cmbDefinition.getText();
  if (!isTableSharedBinding() && text.equals(oldQuery)) {
    return;
  }
  updateQuery(text);
  if (!oldQuery.equals(text) && queryType == ChartUIConstants.QUERY_VALUE) {
    if (context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE,text)) {
      Event e=new Event();
      e.data=BaseDataDefinitionComponent.this;
      e.widget=cmbDefinition;
      e.type=IChartDataSheet.EVENT_QUERY;
      context.getDataSheet().notifyListeners(e);
    }
  }
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
    ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
  }
  if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
    cmbDefinition.setEnabled(false);
  }
}",0.8524590163934426
71268,"/** 
 * Handle builder dialog action.
 */
protected void handleBuilderAction(){
  try {
    String sExpr=context.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,getExpression(getInputControl()),context.getExtendedItem(),sTitle);
    boolean isSuccess=setUIText(getInputControl(),sExpr);
    query.setDefinition(sExpr);
    if (!isSuccess) {
      Event event=new Event();
      event.type=IChartDataSheet.EVENT_QUERY;
      event.data=queryType;
      context.getDataSheet().notifyListeners(event);
    }
  }
 catch (  ChartException e1) {
    WizardBase.displayException(e1);
  }
}","/** 
 * Handle builder dialog action.
 */
protected void handleBuilderAction(){
  try {
    String sExpr=context.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,getExpression(getInputControl()),context.getExtendedItem(),sTitle);
    boolean isSuccess=setUIText(getInputControl(),sExpr);
    updateQuery(sExpr);
    if (!isSuccess) {
      Event event=new Event();
      event.type=IChartDataSheet.EVENT_QUERY;
      event.data=queryType;
      context.getDataSheet().notifyListeners(event);
    }
  }
 catch (  ChartException e1) {
    WizardBase.displayException(e1);
  }
}",0.9820261437908496
71269,"/** 
 * Update query by specified expression. <p> Under shared binding case, update grouping/aggregate attributes of chart model if the selected item is group/aggregate expression.
 */
public void updateQuery(String expression){
  if (!isTableSharedBinding()) {
    setQueryExpression(expression);
    return;
  }
  updateQueryForSharedBinding(expression);
  String regex=""String_Node_Str"";
  if (expression.matches(regex)) {
    DataDefinitionTextManager.getInstance().updateControlBackground(getInputControl(),expression);
    final Event e=new Event();
    e.data=BaseDataDefinitionComponent.this;
    e.widget=getInputControl();
    e.type=IChartDataSheet.EVENT_QUERY;
    e.detail=IChartDataSheet.DETAIL_UPDATE_COLOR;
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        context.getDataSheet().notifyListeners(e);
      }
    }
);
  }
 else {
    getInputControl().setBackground(null);
  }
}","/** 
 * Update query by specified expression. <p> Under shared binding case, update grouping/aggregate attributes of chart model if the selected item is group/aggregate expression.
 */
public void updateQuery(String expression){
  if (getInputControl() instanceof CCombo) {
    String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
    Object checkResult=context.getDataServiceProvider().checkData(queryType,expression);
    if (checkResult != null && checkResult instanceof Boolean) {
      if (!((Boolean)checkResult).booleanValue()) {
        WizardBase.showException(Messages.getString(""String_Node_Str""));
        setUIText(getInputControl(),oldQuery);
        return;
      }
 else {
        WizardBase.removeException();
      }
    }
  }
  if (!isTableSharedBinding()) {
    setQueryExpression(expression);
    return;
  }
  updateQueryForSharedBinding(expression);
  String regex=""String_Node_Str"";
  if (expression.matches(regex)) {
    DataDefinitionTextManager.getInstance().updateControlBackground(getInputControl(),expression);
    final Event e=new Event();
    e.data=BaseDataDefinitionComponent.this;
    e.widget=getInputControl();
    e.type=IChartDataSheet.EVENT_QUERY;
    e.detail=IChartDataSheet.DETAIL_UPDATE_COLOR;
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        context.getDataSheet().notifyListeners(e);
      }
    }
);
  }
 else {
    getInputControl().setBackground(null);
  }
}",0.7699335548172758
71270,"public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  if (description != null && description.length() > 0) {
    Label lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  final Object[] predefinedQuery=context.getPredefinedQuery(queryType);
  if (predefinedQuery != null) {
    cmbDefinition=new CCombo(cmpTop,context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) ? SWT.READ_ONLY | SWT.BORDER : SWT.BORDER);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=80;
    gd.grabExcessHorizontalSpace=true;
    cmbDefinition.setLayoutData(gd);
    if (predefinedQuery.length > 0) {
      populateExprComboItems(predefinedQuery);
    }
 else     if (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str"")) {
      cmbDefinition.setEnabled(false);
    }
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
        String text=cmbDefinition.getText();
        if (!isTableSharedBinding() && text.equals(oldQuery)) {
          return;
        }
        Object checkResult=context.getDataServiceProvider().checkData(queryType,text);
        if (checkResult != null && checkResult instanceof Boolean) {
          if (!((Boolean)checkResult).booleanValue()) {
            WizardBase.showException(Messages.getString(""String_Node_Str""));
            cmbDefinition.setText(oldQuery);
            return;
          }
 else {
            WizardBase.removeException();
          }
        }
        updateQuery(text);
        if (!oldQuery.equals(text) && queryType == ChartUIConstants.QUERY_VALUE) {
          if (context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE,text)) {
            Event e=new Event();
            e.data=BaseDataDefinitionComponent.this;
            e.widget=cmbDefinition;
            e.type=IChartDataSheet.EVENT_QUERY;
            context.getDataSheet().notifyListeners(e);
          }
        }
        if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
        if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
          cmbDefinition.setEnabled(false);
        }
      }
    }
);
    cmbDefinition.addModifyListener(this);
    cmbDefinition.addFocusListener(this);
    cmbDefinition.addKeyListener(this);
    initComboExprText();
  }
 else {
    txtDefinition=new Text(cmpTop,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    gdTXTDefinition.widthHint=80;
    gdTXTDefinition.grabExcessHorizontalSpace=true;
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (query != null && query.getDefinition() != null) {
      txtDefinition.setText(query.getDefinition());
      txtDefinition.setToolTipText(getTooltipForDataText(query.getDefinition()));
    }
    txtDefinition.addModifyListener(this);
    txtDefinition.addFocusListener(this);
    txtDefinition.addKeyListener(this);
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,this);
  btnBuilder=new Button(cmpTop,SWT.PUSH);
{
    GridData gdBTNBuilder=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNBuilder);
    btnBuilder.setLayoutData(gdBTNBuilder);
    btnBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnBuilder.addSelectionListener(this);
    btnBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnBuilder.getImage().setBackground(btnBuilder.getBackground());
    btnBuilder.setEnabled(context.getUIServiceProvider().isInvokingSupported());
    btnBuilder.setVisible(context.getUIServiceProvider().isEclipseModeSupported());
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  setColor();
  IDataServiceProvider provider=context.getDataServiceProvider();
  boolean isCubeNoMultiDimensions=(provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) && !provider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS);
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) || context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
    if (txtDefinition != null && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) {
      txtDefinition.setEnabled(false);
    }
    btnBuilder.setEnabled(false);
    if (btnGroup != null) {
      btnGroup.setEnabled(false);
    }
  }
  if (cmbDefinition != null && ChartUIConstants.QUERY_OPTIONAL.equals(queryType) && isCubeNoMultiDimensions) {
    cmbDefinition.setEnabled(false);
    btnBuilder.setEnabled(false);
  }
  setTooltipForInputControl();
  return cmpTop;
}","public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  if (description != null && description.length() > 0) {
    Label lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  final Object[] predefinedQuery=context.getPredefinedQuery(queryType);
  if (predefinedQuery != null) {
    cmbDefinition=new CCombo(cmpTop,context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) ? SWT.READ_ONLY | SWT.BORDER : SWT.BORDER);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=80;
    gd.grabExcessHorizontalSpace=true;
    cmbDefinition.setLayoutData(gd);
    if (predefinedQuery.length > 0) {
      populateExprComboItems(predefinedQuery);
    }
 else     if (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str"")) {
      cmbDefinition.setEnabled(false);
    }
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
        String text=cmbDefinition.getText();
        if (!isTableSharedBinding() && text.equals(oldQuery)) {
          return;
        }
        updateQuery(text);
        if (!oldQuery.equals(text) && queryType == ChartUIConstants.QUERY_VALUE) {
          if (context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE,text)) {
            Event e=new Event();
            e.data=BaseDataDefinitionComponent.this;
            e.widget=cmbDefinition;
            e.type=IChartDataSheet.EVENT_QUERY;
            context.getDataSheet().notifyListeners(e);
          }
        }
        if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
        if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
          cmbDefinition.setEnabled(false);
        }
      }
    }
);
    cmbDefinition.addModifyListener(this);
    cmbDefinition.addFocusListener(this);
    cmbDefinition.addKeyListener(this);
    initComboExprText();
  }
 else {
    txtDefinition=new Text(cmpTop,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    gdTXTDefinition.widthHint=80;
    gdTXTDefinition.grabExcessHorizontalSpace=true;
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (query != null && query.getDefinition() != null) {
      txtDefinition.setText(query.getDefinition());
      txtDefinition.setToolTipText(getTooltipForDataText(query.getDefinition()));
    }
    txtDefinition.addModifyListener(this);
    txtDefinition.addFocusListener(this);
    txtDefinition.addKeyListener(this);
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,this);
  btnBuilder=new Button(cmpTop,SWT.PUSH);
{
    GridData gdBTNBuilder=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNBuilder);
    btnBuilder.setLayoutData(gdBTNBuilder);
    btnBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnBuilder.addSelectionListener(this);
    btnBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnBuilder.getImage().setBackground(btnBuilder.getBackground());
    btnBuilder.setEnabled(context.getUIServiceProvider().isInvokingSupported());
    btnBuilder.setVisible(context.getUIServiceProvider().isEclipseModeSupported());
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  setColor();
  IDataServiceProvider provider=context.getDataServiceProvider();
  boolean isCubeNoMultiDimensions=(provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) && !provider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS);
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) || context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
    if (txtDefinition != null && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) {
      txtDefinition.setEnabled(false);
    }
    btnBuilder.setEnabled(false);
    if (btnGroup != null) {
      btnGroup.setEnabled(false);
    }
  }
  if (cmbDefinition != null && ChartUIConstants.QUERY_OPTIONAL.equals(queryType) && isCubeNoMultiDimensions) {
    cmbDefinition.setEnabled(false);
    btnBuilder.setEnabled(false);
  }
  setTooltipForInputControl();
  return cmpTop;
}",0.9647172547124214
71271,"public String getMessage(String key,Locale locale,Object[] params){
  String msg=context.getDesign().getMessage(key,locale);
  if (msg == null)   return ""String_Node_Str"";
  return MessageFormat.format(msg,params);
}","public String getMessage(String key,Locale locale,Object[] params){
  String msg=context.getDesign().getMessage(key,locale);
  if (msg == null)   return ""String_Node_Str"";
  MessageFormat formatter=new MessageFormat(msg,locale);
  return formatter.format(params,new StringBuffer(),null).toString();
}",0.7945736434108527
71272,"public static boolean needRemoveInvaildBindings(CrosstabReportItemHandle handle){
  String preferenceData=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).getString(CrosstabPlugin.PREFERENCE_AUTO_DEL_BINDINGS);
  if (preferenceData == null || preferenceData.length() == 0 || preferenceData.equals(MessageDialogWithToggle.PROMPT)) {
    MessageDialogWithToggle msgDlg=MessageDialogWithToggle.openYesNoQuestion(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),false,null,null);
    if (msgDlg.getReturnCode() == IDialogConstants.YES_ID) {
      return true;
    }
 else     if (msgDlg.getReturnCode() == IDialogConstants.NO_ID) {
      return false;
    }
    if (msgDlg.getToggleState()) {
      String value=""String_Node_Str"";
      if (msgDlg.getReturnCode() == IDialogConstants.YES_ID) {
        value=MessageDialogWithToggle.ALWAYS;
      }
 else       if (msgDlg.getReturnCode() == IDialogConstants.NO_ID) {
        value=MessageDialogWithToggle.NEVER;
      }
      PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).setValue(CrosstabPlugin.PREFERENCE_AUTO_DEL_BINDINGS,value);
    }
  }
 else   if (preferenceData != null && preferenceData.equals(MessageDialogWithToggle.ALWAYS)) {
    return true;
  }
  return false;
}","public static boolean needRemoveInvaildBindings(CrosstabReportItemHandle handle){
  String preferenceData=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).getString(CrosstabPlugin.PREFERENCE_AUTO_DEL_BINDINGS);
  if (preferenceData == null || preferenceData.length() == 0 || preferenceData.equals(MessageDialogWithToggle.PROMPT)) {
    MessageDialogWithToggle msgDlg=MessageDialogWithToggle.openYesNoQuestion(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),false,null,null);
    if (msgDlg.getToggleState()) {
      String value=""String_Node_Str"";
      if (msgDlg.getReturnCode() == IDialogConstants.YES_ID) {
        value=MessageDialogWithToggle.ALWAYS;
      }
 else       if (msgDlg.getReturnCode() == IDialogConstants.NO_ID) {
        value=MessageDialogWithToggle.NEVER;
      }
      PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).setValue(CrosstabPlugin.PREFERENCE_AUTO_DEL_BINDINGS,value);
    }
    if (msgDlg.getReturnCode() == IDialogConstants.YES_ID) {
      return true;
    }
 else     if (msgDlg.getReturnCode() == IDialogConstants.NO_ID) {
      return false;
    }
  }
 else   if (preferenceData != null && preferenceData.equals(MessageDialogWithToggle.ALWAYS)) {
    return true;
  }
  return false;
}",0.8698830409356725
71273,"public void writePageProperties(int pageHeight,int pageWidth,int headerHeight,int footerHeight,int topMargin,int bottomMargin,int leftMargin,int rightMargin,String orient){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",pageWidth);
  writer.attribute(""String_Node_Str"",pageHeight);
  writer.attribute(""String_Node_Str"",orient);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",topMargin);
  writer.attribute(""String_Node_Str"",bottomMargin);
  writer.attribute(""String_Node_Str"",leftMargin);
  writer.attribute(""String_Node_Str"",rightMargin);
  writer.closeTag(""String_Node_Str"");
}","public void writePageProperties(int pageHeight,int pageWidth,int headerHeight,int footerHeight,int topMargin,int bottomMargin,int leftMargin,int rightMargin,String orient){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",pageWidth);
  writer.attribute(""String_Node_Str"",pageHeight);
  writer.attribute(""String_Node_Str"",orient);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",topMargin);
  writer.attribute(""String_Node_Str"",bottomMargin);
  writer.attribute(""String_Node_Str"",leftMargin);
  writer.attribute(""String_Node_Str"",rightMargin);
  writer.attribute(""String_Node_Str"",topMargin);
  writer.attribute(""String_Node_Str"",bottomMargin);
  writer.closeTag(""String_Node_Str"");
}",0.93000693000693
71274,"/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @param parameterList Collection
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  if (this.displayTexts == null)   this.displayTexts=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=new DesignEngine(null).newSessionHandle(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null) {
          String varName=prepareConfigVarName(configVar.getName());
          Object varValue=configVar.getValue();
          if (varName == null || varValue == null)           continue;
          String tempName=varName;
          String paramName=null;
          if (varName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL)) {
            tempName=(String)varValue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(varName)) != null) {
            tempName=displayTextParam;
          }
          paramName=getParameterName(tempName,parameterList);
          ParameterDefinition parameter=BirtUtility.findParameterDefinition(parameterList,paramName);
          if (parameter != null) {
            String typeVarName=tempName + ""String_Node_Str"" + IBirtConstants.PROP_TYPE+ ""String_Node_Str"";
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
            String cachedDateType=null;
            if (typeVar != null)             cachedDateType=typeVar.getValue();
            if (cachedDateType == null || !cachedDateType.equalsIgnoreCase(dataType))             continue;
            String exprVarName=tempName + ""String_Node_Str"" + IBirtConstants.PROP_EXPR+ ""String_Node_Str"";
            ConfigVariable exprVar=handle.findConfigVariable(exprVarName);
            String cachedExpr=null;
            if (exprVar != null)             cachedExpr=exprVar.getValue();
            if (cachedExpr == null)             cachedExpr=""String_Node_Str"";
            String expr=parameter.getValueExpr();
            if (expr == null)             expr=""String_Node_Str"";
            if (!cachedExpr.equals(expr))             continue;
            List values=null;
            if (parameter.isMultiValue()) {
              values=(List)this.configMap.get(paramName);
              if (values == null) {
                values=new ArrayList();
                this.configMap.put(paramName,values);
              }
            }
            if (varName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL)) {
              if (parameter.isMultiValue())               values.add(null);
 else               this.configMap.put(paramName,null);
            }
 else             if ((displayTextParam=ParameterAccessor.isDisplayText(varName)) != null) {
              this.displayTexts.put(paramName,varValue);
            }
 else {
              Object varObj=null;
              try {
                varObj=DataUtil.convert(varValue,parameter.getDataType());
              }
 catch (              Exception e) {
                varObj=varValue;
              }
              if (parameter.isMultiValue())               values.add(varObj);
 else               this.configMap.put(paramName,varObj);
            }
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
  }
}","/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @param parameterList Collection
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  if (this.displayTexts == null)   this.displayTexts=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  File configFile=new File(reportConfigName);
  if (!configFile.exists() || !configFile.isFile()) {
    return;
  }
  SessionHandle sessionHandle=new DesignEngine(null).newSessionHandle(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null) {
          String varName=prepareConfigVarName(configVar.getName());
          Object varValue=configVar.getValue();
          if (varName == null || varValue == null)           continue;
          String tempName=varName;
          String paramName=null;
          if (varName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL)) {
            tempName=(String)varValue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(varName)) != null) {
            tempName=displayTextParam;
          }
          paramName=getParameterName(tempName,parameterList);
          ParameterDefinition parameter=BirtUtility.findParameterDefinition(parameterList,paramName);
          if (parameter != null) {
            String typeVarName=tempName + ""String_Node_Str"" + IBirtConstants.PROP_TYPE+ ""String_Node_Str"";
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
            String cachedDateType=null;
            if (typeVar != null)             cachedDateType=typeVar.getValue();
            if (cachedDateType == null || !cachedDateType.equalsIgnoreCase(dataType))             continue;
            String exprVarName=tempName + ""String_Node_Str"" + IBirtConstants.PROP_EXPR+ ""String_Node_Str"";
            ConfigVariable exprVar=handle.findConfigVariable(exprVarName);
            String cachedExpr=null;
            if (exprVar != null)             cachedExpr=exprVar.getValue();
            if (cachedExpr == null)             cachedExpr=""String_Node_Str"";
            String expr=parameter.getValueExpr();
            if (expr == null)             expr=""String_Node_Str"";
            if (!cachedExpr.equals(expr))             continue;
            List values=null;
            if (parameter.isMultiValue()) {
              values=(List)this.configMap.get(paramName);
              if (values == null) {
                values=new ArrayList();
                this.configMap.put(paramName,values);
              }
            }
            if (varName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL)) {
              if (parameter.isMultiValue())               values.add(null);
 else               this.configMap.put(paramName,null);
            }
 else             if ((displayTextParam=ParameterAccessor.isDisplayText(varName)) != null) {
              this.displayTexts.put(paramName,varValue);
            }
 else {
              Object varObj=null;
              try {
                varObj=DataUtil.convert(varValue,parameter.getDataType());
              }
 catch (              Exception e) {
                varObj=varValue;
              }
              if (parameter.isMultiValue())               values.add(varObj);
 else               this.configMap.put(paramName,varObj);
            }
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
  }
}",0.985245484609514
71275,"private void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  int type=d.getDatatype();
  if (type == SheetData.NUMBER) {
    if (d.getText().equals(NAN_STRING) || d.isBigNumber() || d.isInfility()) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (type == SheetData.DATE) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  d.formatTxt();
  String txt=d.getText().toString();
  if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(d.getStyle().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=capitalize(txt);
  }
 else   if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(d.getStyle().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toUpperCase();
  }
 else   if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(d.getStyle().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toLowerCase();
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}","private void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  int type=d.getDatatype();
  if (type == SheetData.NUMBER) {
    if (d.getText().equals(NaN) || d.isBigNumber() || d.isInfility()) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (type == SheetData.DATE) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  d.formatTxt();
  String txt=d.getText().toString();
  if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(d.getStyle().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=capitalize(txt);
  }
 else   if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(d.getStyle().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toUpperCase();
  }
 else   if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(d.getStyle().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toLowerCase();
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}",0.9949378739070408
71276,"private void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  int type=d.getDatatype();
  if (type == SheetData.NUMBER) {
    if (d.getText().equals(NaN) || d.isBigNumber() || d.isInfility()) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (type == SheetData.DATE) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  d.formatTxt();
  String txt=d.getText().toString();
  if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(d.getStyle().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=capitalize(txt);
  }
 else   if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(d.getStyle().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toUpperCase();
  }
 else   if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(d.getStyle().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toLowerCase();
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}","private void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  int type=d.getDatatype();
  if (type == SheetData.NUMBER) {
    if (d.isNaN() || d.isBigNumber() || d.isInfility()) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (type == SheetData.DATE) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  d.formatTxt();
  String txt=d.getText().toString();
  if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(d.getStyle().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=capitalize(txt);
  }
 else   if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(d.getStyle().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toUpperCase();
  }
 else   if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(d.getStyle().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toLowerCase();
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}",0.9879182156133828
71277,"public void refreshFigure(){
  ReportRootFigure figure=(ReportRootFigure)getFigure();
  figure.setShowMargin(showMargin);
  Dimension size=DEFAULTSIZE;
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
}","public void refreshFigure(){
  ReportRootFigure figure=(ReportRootFigure)getFigure();
  figure.setShowMargin(showMargin);
  Dimension size=DEFAULTSIZE;
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitInsets(INSETS);
}",0.8808139534883721
71278,"protected IFigure createFigure(){
  ReportRootFigure figure=new ReportRootFigure();
  figure.setOpaque(true);
  figure.setShowMargin(showMargin);
  LibraryReportDesignLayout layout=new LibraryReportDesignLayout(this);
  Dimension size=DEFAULTSIZE;
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  layout.setInitSize(bounds);
  figure.setLayoutManager(layout);
  figure.setBorder(new ReportDesignMarginBorder(INSETS));
  figure.setBounds(bounds.getCopy());
  return figure;
}","protected IFigure createFigure(){
  ReportRootFigure figure=new ReportRootFigure();
  figure.setOpaque(true);
  figure.setShowMargin(showMargin);
  ReportDesignLayout layout=new ReportDesignLayout(this);
  Dimension size=DEFAULTSIZE;
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  layout.setInitSize(bounds);
  figure.setLayoutManager(layout);
  figure.setBorder(new ReportDesignMarginBorder(INSETS));
  figure.setBounds(bounds.getCopy());
  return figure;
}",0.9612244897959183
71279,"public HyperlinkDef parseHyperLink(IContent content){
  IHyperlinkAction linkaction=content.getHyperlinkAction();
  if (linkaction != null) {
    String toolTip=linkaction.getTooltip();
    if (linkaction.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      String bookmark=linkaction.getBookmark();
      if (ExcelUtil.isValidBookmarkName(bookmark)) {
        return new HyperlinkDef(linkaction.getBookmark(),IHyperlinkAction.ACTION_BOOKMARK,null,toolTip);
      }
 else {
        return null;
      }
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_HYPERLINK) {
      return new HyperlinkDef(linkaction.getHyperlink(),IHyperlinkAction.ACTION_HYPERLINK,null,toolTip);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_DRILLTHROUGH) {
      Action act=new Action(linkaction);
      IHTMLActionHandler actionHandler=null;
      Object ac=service.getOption(IRenderOption.ACTION_HANDLER);
      if (ac != null && ac instanceof IHTMLActionHandler) {
        actionHandler=(IHTMLActionHandler)ac;
        String url=actionHandler.getURL(act,service.getReportContext());
        if (null != url && url.length() > 0) {
          return new HyperlinkDef(url,IHyperlinkAction.ACTION_DRILLTHROUGH,null,toolTip);
        }
 else {
          return null;
        }
      }
    }
  }
  return null;
}","public HyperlinkDef parseHyperLink(IContent content){
  HyperlinkDef hyperlink=null;
  IHyperlinkAction linkAction=content.getHyperlinkAction();
  if (linkAction != null) {
    String tooltip=linkAction.getTooltip();
    String bookmark=linkAction.getBookmark();
    IReportRunnable reportRunnable=service.getReportRunnable();
    IReportContext reportContext=service.getReportContext();
    IHTMLActionHandler actionHandler=(IHTMLActionHandler)service.getOption(RenderOption.ACTION_HANDLER);
switch (linkAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
      if (ExcelUtil.isValidBookmarkName(bookmark)) {
        hyperlink=new HyperlinkDef(bookmark,IHyperlinkAction.ACTION_BOOKMARK,null,tooltip);
      }
    break;
case IHyperlinkAction.ACTION_HYPERLINK:
  String url=org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkDef(url,IHyperlinkAction.ACTION_HYPERLINK,null,tooltip);
break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
url=org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkDef(url,IHyperlinkAction.ACTION_DRILLTHROUGH,null,tooltip);
break;
}
}
return hyperlink;
}",0.2164435946462715
71280,"public Object getParent(Object model){
  ExtendedItemHandle element=(ExtendedItemHandle)model;
  try {
    CrosstabCellHandle cell=(CrosstabCellHandle)element.getReportItem();
    if (cell.getContainer() != null) {
      if (cell.getContainer() instanceof MeasureViewHandle) {
        MeasureViewHandle measure=(MeasureViewHandle)cell.getContainer();
        PropertyHandle property=cell.getModelHandle().getContainerPropertyHandle();
        return measure.getModelHandle().getPropertyHandle(property.getPropertyDefn().getName());
      }
 else       if (cell.getContainer() instanceof LevelViewHandle || cell.getContainer() instanceof CrosstabViewHandle) {
        return cell.getContainer().getModelHandle();
      }
    }
  }
 catch (  ExtendedElementException e) {
  }
  return null;
}","public Object getParent(Object model){
  ExtendedItemHandle element=(ExtendedItemHandle)model;
  try {
    CrosstabCellHandle cell=(CrosstabCellHandle)element.getReportItem();
    if (cell.getContainer() != null) {
      if (cell.getContainer() instanceof MeasureViewHandle) {
        MeasureViewHandle measure=(MeasureViewHandle)cell.getContainer();
        PropertyHandle property=cell.getModelHandle().getContainerPropertyHandle();
        return measure.getModelHandle().getPropertyHandle(property.getPropertyDefn().getName());
      }
 else       if (cell.getContainer() instanceof LevelViewHandle || cell.getContainer() instanceof CrosstabViewHandle || cell.getContainer() instanceof CrosstabReportItemHandle) {
        return cell.getContainer().getModelHandle();
      }
    }
  }
 catch (  ExtendedElementException e) {
  }
  return null;
}",0.9640024405125076
71281,"protected boolean performInsert(Object model,PropertyHandle propertyHandle,String type,String position,Map extendData) throws Exception {
  if (type == null) {
    if (propertyHandle == null) {
      DesignElementHandle handle=((CrosstabCellHandle)((ExtendedItemHandle)model).getReportItem()).getModelHandle();
      propertyHandle=((ExtendedItemHandle)model).getPropertyHandle(DEUtil.getDefaultContentName(handle));
    }
    List supportList=UIUtil.getUIElementSupportList(propertyHandle);
    if (supportList.size() == 0) {
      ExceptionHandler.openMessageBox(WARNING_DIALOG_TITLE,WARNING_DIALOG_MESSAGE_EMPTY_LIST,SWT.ICON_WARNING);
      return false;
    }
 else     if (supportList.size() == 1) {
      type=((IElementDefn)supportList.get(0)).getName();
    }
 else {
      NewSectionDialog dialog=new NewSectionDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),supportList);
      if (dialog.open() == Dialog.CANCEL) {
        return false;
      }
      type=(String)dialog.getResult()[0];
    }
  }
  PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
  for (int i=0; i < entries.length; i++) {
    if (entries[i].getItemName().equals(type)) {
      extendData.put(IRequestConstants.REQUEST_KEY_RESULT,entries[i].executeCreate());
      return true;
    }
  }
  DesignElementHandle elementHandle=createElement(type);
  if (extendData != null) {
    extendData.put(IRequestConstants.REQUEST_KEY_RESULT,elementHandle);
  }
  if (elementHandle == null) {
    return false;
  }
 else {
    int pos=DNDUtil.calculateNextPosition(model,DNDUtil.handleValidateTargetCanContain(model,elementHandle,true));
    if (pos > 0 && position == InsertAction.ABOVE) {
      pos--;
    }
    if (pos == -1) {
      propertyHandle.add(elementHandle);
    }
 else {
      propertyHandle.add(elementHandle,pos);
    }
  }
  if (elementHandle instanceof ExtendedItemHandle) {
    if (ElementProcessorFactory.createProcessor(elementHandle) != null && !ElementProcessorFactory.createProcessor(elementHandle).editElement(elementHandle)) {
      return false;
    }
  }
  return true;
}","protected boolean performInsert(Object model,PropertyHandle propertyHandle,String type,String position,Map extendData) throws Exception {
  if (type == null) {
    if (propertyHandle == null) {
      DesignElementHandle handle=((CrosstabCellHandle)((ExtendedItemHandle)model).getReportItem()).getModelHandle();
      propertyHandle=((ExtendedItemHandle)model).getPropertyHandle(DEUtil.getDefaultContentName(handle));
    }
    List supportList=UIUtil.getUIElementSupportList(propertyHandle);
    if (supportList.size() == 0) {
      ExceptionUtil.openMessage(WARNING_DIALOG_TITLE,WARNING_DIALOG_MESSAGE_EMPTY_LIST,SWT.ICON_WARNING);
      return false;
    }
 else     if (supportList.size() == 1) {
      type=((IElementDefn)supportList.get(0)).getName();
    }
 else {
      NewSectionDialog dialog=new NewSectionDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),supportList);
      if (dialog.open() == Dialog.CANCEL) {
        return false;
      }
      type=(String)dialog.getResult()[0];
    }
  }
  PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
  for (int i=0; i < entries.length; i++) {
    if (entries[i].getItemName().equals(type)) {
      extendData.put(IRequestConstants.REQUEST_KEY_RESULT,entries[i].executeCreate());
      return true;
    }
  }
  DesignElementHandle elementHandle=createElement(type);
  if (extendData != null) {
    extendData.put(IRequestConstants.REQUEST_KEY_RESULT,elementHandle);
  }
  if (elementHandle == null) {
    return false;
  }
 else {
    int pos=DNDUtil.calculateNextPosition(model,DNDUtil.handleValidateTargetCanContain(model,elementHandle,true));
    if (pos > 0 && position == InsertAction.ABOVE) {
      pos--;
    }
    if (pos == -1) {
      propertyHandle.add(elementHandle);
    }
 else {
      propertyHandle.add(elementHandle,pos);
    }
  }
  if (elementHandle instanceof ExtendedItemHandle) {
    if (ElementProcessorFactory.createProcessor(elementHandle) != null && !ElementProcessorFactory.createProcessor(elementHandle).editElement(elementHandle)) {
      return false;
    }
  }
  return true;
}",0.9966793168880456
71282,"/** 
 * Renders the chart block.
 * @param ipr
 * @param b
 * @throws ChartException
 */
protected void renderChartBlock(IPrimitiveRenderer ipr,Block b,Object oSource) throws ChartException {
  final double dScale=getDeviceScale();
  final RectangleRenderEvent rre=(RectangleRenderEvent)((EventObjectCache)ipr).getEventObject(oSource,RectangleRenderEvent.class);
  rre.updateFrom(b,dScale);
  ipr.fillRectangle(rre);
  ipr.drawRectangle(rre);
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList elTriggers=b.getTriggers();
    Location[] loaHotspot=new Location[4];
    Bounds bo=b.getBounds().scaledInstance(dScale);
    double dLeft=bo.getLeft();
    double dTop=bo.getTop();
    double dWidth=bo.getWidth();
    double dHeight=bo.getHeight();
    loaHotspot[0]=LocationImpl.create(dLeft,dTop);
    loaHotspot[1]=LocationImpl.create(dLeft + dWidth,dTop);
    loaHotspot[2]=LocationImpl.create(dLeft + dWidth,dTop + dHeight);
    loaHotspot[3]=LocationImpl.create(dLeft,dTop + dHeight);
    if (!elTriggers.isEmpty()) {
      final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createChartBlock(b),InteractionEvent.class);
      for (int t=0; t < elTriggers.size(); t++) {
        tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
        processTrigger(tg,StructureSource.createChartBlock(b));
        iev.addTrigger(tg);
      }
      final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createChartBlock(b),PolygonRenderEvent.class);
      pre.setPoints(loaHotspot);
      iev.setHotSpot(pre);
      ipr.enableInteraction(iev);
    }
  }
}","/** 
 * Renders the chart block.
 * @param ipr
 * @param b
 * @throws ChartException
 */
protected void renderChartBlock(IPrimitiveRenderer ipr,Block b,Object oSource) throws ChartException {
  final double dScale=getDeviceScale();
  final RectangleRenderEvent rre=(RectangleRenderEvent)((EventObjectCache)ipr).getEventObject(oSource,RectangleRenderEvent.class);
  rre.updateFrom(b,dScale);
  try {
    ipr.fillRectangle(rre);
  }
 catch (  Exception e) {
    logger.log(e);
  }
  ipr.drawRectangle(rre);
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList elTriggers=b.getTriggers();
    Location[] loaHotspot=new Location[4];
    Bounds bo=b.getBounds().scaledInstance(dScale);
    double dLeft=bo.getLeft();
    double dTop=bo.getTop();
    double dWidth=bo.getWidth();
    double dHeight=bo.getHeight();
    loaHotspot[0]=LocationImpl.create(dLeft,dTop);
    loaHotspot[1]=LocationImpl.create(dLeft + dWidth,dTop);
    loaHotspot[2]=LocationImpl.create(dLeft + dWidth,dTop + dHeight);
    loaHotspot[3]=LocationImpl.create(dLeft,dTop + dHeight);
    if (!elTriggers.isEmpty()) {
      final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createChartBlock(b),InteractionEvent.class);
      for (int t=0; t < elTriggers.size(); t++) {
        tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
        processTrigger(tg,StructureSource.createChartBlock(b));
        iev.addTrigger(tg);
      }
      final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createChartBlock(b),PolygonRenderEvent.class);
      pre.setPoints(loaHotspot);
      iev.setHotSpot(pre);
      ipr.enableInteraction(iev);
    }
  }
}",0.9816350710900474
71283,"protected HyperlinkInfo getHyperlink(IContent content){
  IHyperlinkAction linkaction=content.getHyperlinkAction();
  HyperlinkInfo hyperlink=null;
  if (linkaction != null) {
    String toolTip=linkaction.getTooltip();
    if (linkaction.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      String bookmark=linkaction.getBookmark().replaceAll(""String_Node_Str"",""String_Node_Str"");
      hyperlink=new HyperlinkInfo(HyperlinkInfo.BOOKMARK,bookmark,toolTip);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_HYPERLINK) {
      hyperlink=new HyperlinkInfo(HyperlinkInfo.HYPERLINK,linkaction.getHyperlink(),toolTip);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_DRILLTHROUGH) {
      String systemId=null;
      if (null != reportRunnable) {
        systemId=reportRunnable.getReportName();
      }
      Action action=new Action(systemId,linkaction);
      if (actionHandler != null) {
        String url=actionHandler.getURL(action,reportContext);
        if (action.getBookmark() == null) {
          hyperlink=new HyperlinkInfo(HyperlinkInfo.HYPERLINK,url,toolTip);
        }
 else {
          hyperlink=new HyperlinkInfo(HyperlinkInfo.HYPERLINK,url,action.getBookmark());
        }
      }
    }
  }
  return hyperlink;
}","protected HyperlinkInfo getHyperlink(IContent content){
  HyperlinkInfo hyperlink=null;
  IHyperlinkAction linkAction=content.getHyperlinkAction();
  if (linkAction != null) {
    String tooltip=linkAction.getTooltip();
    String bookmark=linkAction.getBookmark();
switch (linkAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
      bookmark=bookmark.replaceAll(""String_Node_Str"",""String_Node_Str"");
    hyperlink=new HyperlinkInfo(HyperlinkInfo.BOOKMARK,bookmark,tooltip);
  break;
case IHyperlinkAction.ACTION_HYPERLINK:
case IHyperlinkAction.ACTION_DRILLTHROUGH:
String url=org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkInfo(HyperlinkInfo.HYPERLINK,url,tooltip);
break;
}
}
return hyperlink;
}",0.3586538461538461
71284,"private void checkValueLabel(LegendItemHints lih){
  if (sed != lih.getSeriesDefinition()) {
    if (laiValue != null) {
      laiValue.dispose();
    }
    Label laValue=LabelImpl.copyInstance(lih.getSeriesDefinition().getDesignTimeSeries().getLabel());
    laValue.setEllipsis(1);
    this.laiValue=new LabelItem(lgData.xs,lgData.rtc,laValue,lgData.maxWrappingSize);
  }
}","private void checkValueLabel(LegendItemHints lih){
  if (sed != lih.getSeriesDefinition()) {
    if (laiValue != null) {
      laiValue.dispose();
    }
    Series series=(Series)lih.getSeriesDefinition().getSeries().get(0);
    Label laValue=LabelImpl.copyInstance(series.getLabel());
    laValue.setEllipsis(1);
    this.laiValue=new LabelItem(lgData.xs,lgData.rtc,laValue,lgData.maxWrappingSize);
  }
}",0.8395378690629012
71285,"/** 
 * Get the foreground color.
 * @param handle The handle of design element.
 * @return fore ground color
 */
public int getForegroundColor(DesignElementHandle handle){
  Object obj=handle.getProperty(StyleHandle.COLOR_PROP);
  int color=handle.getPropertyHandle(StyleHandle.COLOR_PROP).getIntValue();
  if (obj == null) {
    return SWT.COLOR_LIST_FOREGROUND;
  }
  return color;
}","/** 
 * Get the foreground color.
 * @param handle The handle of design element.
 * @return fore ground color
 */
public int getForegroundColor(DesignElementHandle handle){
  Object obj=handle.getProperty(StyleHandle.COLOR_PROP);
  if (obj == null) {
    return SWT.COLOR_LIST_FOREGROUND;
  }
  int color=handle.getPropertyHandle(StyleHandle.COLOR_PROP).getIntValue();
  return color;
}",0.772020725388601
71286,"/** 
 * Get the background color.
 * @param handle The handle of design element.
 * @return back ground color
 */
public int getBackgroundColor(DesignElementHandle handle){
  Object obj=handle.getProperty(StyleHandle.BACKGROUND_COLOR_PROP);
  int color=handle.getPropertyHandle(StyleHandle.BACKGROUND_COLOR_PROP).getIntValue();
  if (obj == null) {
    return SWT.COLOR_LIST_BACKGROUND;
  }
  return color;
}","/** 
 * Get the background color.
 * @param handle The handle of design element.
 * @return back ground color
 */
public int getBackgroundColor(DesignElementHandle handle){
  Object obj=handle.getProperty(StyleHandle.BACKGROUND_COLOR_PROP);
  if (obj == null) {
    return SWT.COLOR_LIST_BACKGROUND;
  }
  int color=handle.getPropertyHandle(StyleHandle.BACKGROUND_COLOR_PROP).getIntValue();
  return color;
}",0.7573529411764706
71287,"/** 
 * Map GUI defined property key to DE defined property key
 * @param key
 * @return DE defined property key
 */
public static String getGUIPropertyKey(String key){
  if (key != null) {
    return (String)propertiesMap.get(key);
  }
  return null;
}","/** 
 * Map GUI defined property key to DE defined property key
 * @param key
 * @return DE defined property key
 */
public static String getGUIPropertyKey(String key){
  if (key != null) {
    return propertiesMap.get(key);
  }
  return null;
}",0.9839357429718876
71288,"protected void refreshBackgroundImage(DesignElementHandle handle){
  IReportElementFigure figure=(IReportElementFigure)getFigure();
  String backGroundImage=getBackgroundImage(handle);
  Object[] backGroundPosition=getBackgroundPosition(handle);
  int backGroundRepeat=getBackgroundRepeat(handle);
  if (backGroundImage == null) {
    figure.setImage(null);
  }
 else {
    Image image=null;
    try {
      image=ImageManager.getInstance().getImage(getModelAdapter().getModuleHandle(),backGroundImage);
    }
 catch (    SWTException e) {
      image=null;
    }
    if (image == null) {
      figure.setImage(null);
      return;
    }
    figure.setImage(image);
    figure.setRepeat(backGroundRepeat);
    Object xPosition=backGroundPosition[0];
    Object yPosition=backGroundPosition[1];
    Rectangle area=getFigure().getClientArea();
    org.eclipse.swt.graphics.Rectangle imageArea=image.getBounds();
    Point position=new Point(-1,-1);
    int alignment=0;
    if (xPosition instanceof Integer) {
      position.x=((Integer)xPosition).intValue();
    }
 else     if (xPosition instanceof DimensionValue) {
      int percentX=(int)((DimensionValue)xPosition).getMeasure();
      position.x=(area.width - imageArea.width) * percentX / 100;
    }
 else     if (xPosition instanceof String) {
      alignment|=DesignElementHandleAdapter.getPosition((String)xPosition);
    }
    if (yPosition instanceof Integer) {
      position.y=((Integer)yPosition).intValue();
    }
 else     if (yPosition instanceof DimensionValue) {
      int percentY=(int)((DimensionValue)yPosition).getMeasure();
      position.y=(area.width - imageArea.width) * percentY / 100;
    }
 else     if (yPosition instanceof String) {
      alignment|=DesignElementHandleAdapter.getPosition((String)yPosition);
    }
    figure.setAlignment(alignment);
    figure.setPosition(position);
  }
}","protected void refreshBackgroundImage(DesignElementHandle handle){
  IReportElementFigure figure=(IReportElementFigure)getFigure();
  String backGroundImage=getBackgroundImage(handle);
  if (backGroundImage == null) {
    figure.setImage(null);
  }
 else {
    Image image=null;
    try {
      image=ImageManager.getInstance().getImage(getModelAdapter().getModuleHandle(),backGroundImage);
    }
 catch (    SWTException e) {
      image=null;
    }
    if (image == null) {
      figure.setImage(null);
      return;
    }
    figure.setImage(image);
    Object[] backGroundPosition=getBackgroundPosition(handle);
    int backGroundRepeat=getBackgroundRepeat(handle);
    figure.setRepeat(backGroundRepeat);
    Object xPosition=backGroundPosition[0];
    Object yPosition=backGroundPosition[1];
    Rectangle area=getFigure().getClientArea();
    org.eclipse.swt.graphics.Rectangle imageArea=image.getBounds();
    Point position=new Point(-1,-1);
    int alignment=0;
    if (xPosition instanceof Integer) {
      position.x=((Integer)xPosition).intValue();
    }
 else     if (xPosition instanceof DimensionValue) {
      int percentX=(int)((DimensionValue)xPosition).getMeasure();
      position.x=(area.width - imageArea.width) * percentX / 100;
    }
 else     if (xPosition instanceof String) {
      alignment|=DesignElementHandleAdapter.getPosition((String)xPosition);
    }
    if (yPosition instanceof Integer) {
      position.y=((Integer)yPosition).intValue();
    }
 else     if (yPosition instanceof DimensionValue) {
      int percentY=(int)((DimensionValue)yPosition).getMeasure();
      position.y=(area.width - imageArea.width) * percentY / 100;
    }
 else     if (yPosition instanceof String) {
      alignment|=DesignElementHandleAdapter.getPosition((String)yPosition);
    }
    figure.setAlignment(alignment);
    figure.setPosition(position);
  }
}",0.9386011745862252
71289,"public ICategoryProvider getCategoryProvider(Object input){
  CategoryProvider provider=new CategoryProvider(new String[]{CategoryProviderFactory.CATEGORY_KEY_GENERAL,CategoryProviderFactory.CATEGORY_KEY_COMMENTS,CategoryProviderFactory.CATEGORY_KEY_ADVANCEPROPERTY},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Class[]{CubePage.class,CommentsPage.class,AdvancePropertyPage.class});
  return provider;
}","public ICategoryProvider getCategoryProvider(Object input){
  return AttributesUtil.createCategoryProvider(new String[]{null,CATEGORY_KEY_COMMENTS,CATEGORY_KEY_ADVANCEPROPERTY},new String[]{CATEGORY_KEY_GENERAL},new String[]{Messages.getString(""String_Node_Str"")},new Class[]{CubePage.class});
}",0.5186206896551724
71290,"protected boolean canContain(Object target,Object transfer){
  if (transfer instanceof DataSetHandle || transfer instanceof DataSourceHandle || transfer instanceof ParameterHandle|| transfer instanceof ParameterGroupHandle|| transfer instanceof CascadingParameterGroupHandle|| transfer instanceof CubeHandle)   return true;
  if (DNDUtil.handleValidateTargetCanContainMore(target,DNDUtil.getObjectLength(transfer))) {
    canContain=DNDUtil.handleValidateTargetCanContain(target,transfer,true);
    return canContain == DNDUtil.CONTAIN_THIS;
  }
  return false;
}","protected boolean canContain(Object target,Object transfer){
  if (transfer instanceof DataSetHandle || transfer instanceof DataSourceHandle || transfer instanceof ParameterHandle|| transfer instanceof ParameterGroupHandle|| transfer instanceof CascadingParameterGroupHandle|| transfer instanceof CubeHandle|| transfer instanceof MasterPageHandle)   return true;
  if (DNDUtil.handleValidateTargetCanContainMore(target,DNDUtil.getObjectLength(transfer))) {
    canContain=DNDUtil.handleValidateTargetCanContain(target,transfer,true);
    return canContain == DNDUtil.CONTAIN_THIS;
  }
  return false;
}",0.9665236051502146
71291,"protected boolean copyData(Object target,Object transfer){
  ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (transfer instanceof DataSetHandle) {
    target=moduleHandle.getDataSets();
  }
 else   if (transfer instanceof DataSourceHandle) {
    target=moduleHandle.getDataSources();
  }
 else   if (transfer instanceof ParameterHandle || transfer instanceof ParameterGroupHandle || transfer instanceof CascadingParameterGroupHandle) {
    target=moduleHandle.getParameters();
  }
 else   if (transfer instanceof CubeHandle) {
    target=moduleHandle.getCubes();
  }
  int position=getPosition(target);
  boolean result=false;
  if (transfer != null && transfer instanceof DesignElementHandle) {
    DesignElementHandle sourceHandle;
    if ((sourceHandle=(DesignElementHandle)transfer).getRoot() instanceof LibraryHandle) {
      LibraryHandle library=(LibraryHandle)sourceHandle.getRoot();
      try {
        if (moduleHandle != library) {
          if (UIUtil.includeLibrary(moduleHandle,library)) {
            DNDUtil.addElementHandle(target,moduleHandle.getElementFactory().newElementFrom(sourceHandle,sourceHandle.getName()));
            result=true;
          }
        }
 else {
          result=DNDUtil.copyHandles(transfer,target,position);
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
 else {
      result=DNDUtil.copyHandles(transfer,target,position);
    }
  }
 else   if (transfer != null && transfer instanceof EmbeddedImageHandle) {
    result=DNDUtil.copyHandles(transfer,target,position);
  }
  if (result) {
    viewer.reveal(target);
  }
  return result;
}","protected boolean copyData(Object target,Object transfer){
  ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (transfer instanceof DataSetHandle) {
    target=moduleHandle.getDataSets();
  }
 else   if (transfer instanceof DataSourceHandle) {
    target=moduleHandle.getDataSources();
  }
 else   if (transfer instanceof ParameterHandle || transfer instanceof ParameterGroupHandle || transfer instanceof CascadingParameterGroupHandle) {
    target=moduleHandle.getParameters();
  }
 else   if (transfer instanceof CubeHandle) {
    target=moduleHandle.getCubes();
  }
 else   if (transfer instanceof MasterPageHandle) {
    target=moduleHandle.getMasterPages();
  }
  int position=getPosition(target);
  boolean result=false;
  if (transfer != null && transfer instanceof DesignElementHandle) {
    DesignElementHandle sourceHandle;
    if ((sourceHandle=(DesignElementHandle)transfer).getRoot() instanceof LibraryHandle) {
      LibraryHandle library=(LibraryHandle)sourceHandle.getRoot();
      try {
        if (moduleHandle != library) {
          if (UIUtil.includeLibrary(moduleHandle,library)) {
            DNDUtil.addElementHandle(target,moduleHandle.getElementFactory().newElementFrom(sourceHandle,sourceHandle.getName()));
            result=true;
          }
        }
 else {
          result=DNDUtil.copyHandles(transfer,target,position);
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
 else {
      result=DNDUtil.copyHandles(transfer,target,position);
    }
  }
 else   if (transfer != null && transfer instanceof EmbeddedImageHandle) {
    result=DNDUtil.copyHandles(transfer,target,position);
  }
  if (result) {
    viewer.reveal(target);
  }
  return result;
}",0.971561230412072
71292,"public void run(){
  SetCurrentEditModelCommand c=new SetCurrentEditModelCommand(getNewObject(),LibraryHandleAdapter.CREATE_ELEMENT);
  c.execute();
}","public void run(){
  Object model=evt.getNewValue();
  Object editpart=getViewer().getEditPartRegistry().get(model);
  if (editpart instanceof EditPart) {
    getViewer().flush();
    if (!(editpart instanceof EmptyEditPart)) {
      getViewer().select((EditPart)editpart);
    }
  }
  if (editpart != null) {
    getViewer().reveal((EditPart)editpart);
    if (LibraryHandleAdapter.CREATE_ELEMENT.equals(evt.getPropertyName())) {
      Request request=new Request(ReportRequest.CREATE_ELEMENT);
      if (((EditPart)editpart).understandsRequest(request)) {
        ((EditPart)editpart).performRequest(request);
      }
    }
  }
}",0.1818181818181818
71293,"protected void createEditPolicies(){
  installEditPolicy(EditPolicy.LAYOUT_ROLE,new ReportFlowLayoutEditPolicy(){
    protected org.eclipse.gef.commands.Command getCreateCommand(    CreateRequest request){
      CreateCommand command=new CreateCommand(request.getExtendedData()){
        public void execute(){
          super.execute();
          Display.getCurrent().asyncExec(new Runnable(){
            public void run(){
              SetCurrentEditModelCommand c=new SetCurrentEditModelCommand(getNewObject(),LibraryHandleAdapter.CREATE_ELEMENT);
              c.execute();
            }
          }
);
        }
      }
;
      Object model=this.getHost().getModel();
      if (model instanceof SlotHandle) {
        command.setParent(model);
      }
 else       if (model instanceof ListBandProxy) {
        command.setParent(((ListBandProxy)model).getSlotHandle());
      }
 else {
        command.setParent(model);
      }
      return command;
    }
  }
);
  installEditPolicy(EditPolicy.CONTAINER_ROLE,new ReportContainerEditPolicy());
}","protected void createEditPolicies(){
  installEditPolicy(EditPolicy.LAYOUT_ROLE,new ReportFlowLayoutEditPolicy(){
    protected org.eclipse.gef.commands.Command getCreateCommand(    CreateRequest request){
      CreateCommand command=new CreateCommand(request.getExtendedData());
      Object model=this.getHost().getModel();
      if (model instanceof SlotHandle) {
        command.setParent(model);
      }
 else       if (model instanceof ListBandProxy) {
        command.setParent(((ListBandProxy)model).getSlotHandle());
      }
 else {
        command.setParent(model);
      }
      return command;
    }
  }
);
  installEditPolicy(EditPolicy.CONTAINER_ROLE,new ReportContainerEditPolicy());
}",0.8004574042309891
71294,"protected org.eclipse.gef.commands.Command getCreateCommand(CreateRequest request){
  CreateCommand command=new CreateCommand(request.getExtendedData()){
    public void execute(){
      super.execute();
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          SetCurrentEditModelCommand c=new SetCurrentEditModelCommand(getNewObject(),LibraryHandleAdapter.CREATE_ELEMENT);
          c.execute();
        }
      }
);
    }
  }
;
  Object model=this.getHost().getModel();
  if (model instanceof SlotHandle) {
    command.setParent(model);
  }
 else   if (model instanceof ListBandProxy) {
    command.setParent(((ListBandProxy)model).getSlotHandle());
  }
 else {
    command.setParent(model);
  }
  return command;
}","protected org.eclipse.gef.commands.Command getCreateCommand(CreateRequest request){
  CreateCommand command=new CreateCommand(request.getExtendedData());
  Object model=this.getHost().getModel();
  if (model instanceof SlotHandle) {
    command.setParent(model);
  }
 else   if (model instanceof ListBandProxy) {
    command.setParent(((ListBandProxy)model).getSlotHandle());
  }
 else {
    command.setParent(model);
  }
  return command;
}",0.7338371116708649
71295,"public void run(){
  Object editpart=viewer.getEditPartRegistry().get(model);
  if (editpart instanceof EditPart) {
    viewer.flush();
    viewer.select((EditPart)editpart);
  }
 else {
    return;
  }
  if (((EditPart)editpart).understandsRequest(request)) {
    ((EditPart)editpart).performRequest(request);
  }
  if (editpart != null) {
    viewer.reveal((EditPart)editpart);
  }
}","public void run(){
  Object editpart=viewer.getEditPartRegistry().get(model);
  if (editpart instanceof EditPart) {
    viewer.flush();
    viewer.select((EditPart)editpart);
    if (edit && ((EditPart)editpart).understandsRequest(request)) {
      ((EditPart)editpart).performRequest(request);
    }
    viewer.reveal((EditPart)editpart);
  }
 else {
    List list=new ArrayList();
    list.add(model);
    ReportRequest r=new ReportRequest();
    r.setType(ReportRequest.CREATE_ELEMENT);
    r.setSelectionObject(list);
    SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
  }
}",0.4028484231943031
71296,"/** 
 * Selects or clicks added object
 * @param model new object, null will do nothing
 * @param viewer edit part viewer, null will do nothing
 * @param request the request sended to EditPart
 */
public static void selectAddedObject(final Object model,final EditPartViewer viewer,final Request request){
  if (model == null || viewer == null)   return;
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      Object editpart=viewer.getEditPartRegistry().get(model);
      if (editpart instanceof EditPart) {
        viewer.flush();
        viewer.select((EditPart)editpart);
      }
 else {
        return;
      }
      if (((EditPart)editpart).understandsRequest(request)) {
        ((EditPart)editpart).performRequest(request);
      }
      if (editpart != null) {
        viewer.reveal((EditPart)editpart);
      }
    }
  }
);
}","/** 
 * Selects or clicks added object
 * @param model new object, null will do nothing
 * @param viewer edit part viewer, null will do nothing
 * @param request the request sended to EditPart
 */
public static void selectAddedObject(final Object model,final EditPartViewer viewer,final Request request,final boolean edit){
  if (model == null || viewer == null)   return;
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      Object editpart=viewer.getEditPartRegistry().get(model);
      if (editpart instanceof EditPart) {
        viewer.flush();
        viewer.select((EditPart)editpart);
        if (edit && ((EditPart)editpart).understandsRequest(request)) {
          ((EditPart)editpart).performRequest(request);
        }
        viewer.reveal((EditPart)editpart);
      }
 else {
        List list=new ArrayList();
        list.add(model);
        ReportRequest r=new ReportRequest();
        r.setType(ReportRequest.CREATE_ELEMENT);
        r.setSelectionObject(list);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
      }
    }
  }
);
}",0.6567926455566905
71297,"protected void selectElement(final Object element,final boolean edit){
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (element instanceof ReportItemHandle) {
        IWorkbenchPart part=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().getActivePart();
        IEditorPart epart=null;
        if (part instanceof AbstractMultiPageEditor) {
          epart=((AbstractMultiPageEditor)part).getActivePageInstance();
        }
 else         if (part instanceof IReportEditor) {
          IEditorPart activeEditor=((IReportEditor)part).getEditorPart();
          if (activeEditor instanceof AbstractMultiPageEditor) {
            epart=((AbstractMultiPageEditor)activeEditor).getActivePageInstance();
          }
        }
        if (epart instanceof GraphicalEditorWithFlyoutPalette) {
          GraphicalViewer viewer=((GraphicalEditorWithFlyoutPalette)epart).getGraphicalViewer();
          Object cpart=viewer.getEditPartRegistry().get(element);
          if (cpart instanceof EditPart) {
            viewer.flush();
            viewer.select((EditPart)cpart);
          }
          if (edit && cpart instanceof LabelEditPart) {
            ((LabelEditPart)cpart).performDirectEdit();
          }
 else           if (edit && cpart instanceof ImageEditPart) {
            ((ImageEditPart)cpart).performDirectEdit();
          }
 else {
            List list=new ArrayList();
            list.add(element);
            ReportRequest r=new ReportRequest();
            r.setType(ReportRequest.CREATE_ELEMENT);
            r.setSelectionObject(list);
            SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
          }
        }
      }
    }
  }
);
}","protected void selectElement(final Object element,final boolean edit){
  if (element instanceof ReportItemHandle) {
    IWorkbenchPart part=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().getActivePart();
    IEditorPart epart=null;
    if (part instanceof AbstractMultiPageEditor) {
      epart=((AbstractMultiPageEditor)part).getActivePageInstance();
    }
 else     if (part instanceof IReportEditor) {
      IEditorPart activeEditor=((IReportEditor)part).getEditorPart();
      if (activeEditor instanceof AbstractMultiPageEditor) {
        epart=((AbstractMultiPageEditor)activeEditor).getActivePageInstance();
      }
    }
    if (epart instanceof GraphicalEditorWithFlyoutPalette) {
      GraphicalViewer viewer=((GraphicalEditorWithFlyoutPalette)epart).getGraphicalViewer();
      ReportCreationTool.selectAddedObject(element,viewer,edit);
    }
  }
}",0.6438986953184958
71298,"private void changeOverlaySeriesType(){
  if (getCurrentChartType().canCombine()) {
    ChartCacheManager.getInstance().cacheSeriesType(cbSeriesType.getText());
  }
  boolean bException=false;
  try {
    Axis XAxis=(Axis)((ChartWithAxes)chartModel).getAxes().get(0);
    int iSeriesDefinitionIndex=0 + ((Axis)XAxis.getAssociatedAxes().get(0)).getSeriesDefinitions().size();
    int iOverlaySeriesCount=((Axis)XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().size();
    ChartAdapter.beginIgnoreNotifications();
    for (int i=0; i < iOverlaySeriesCount; i++) {
      Series newSeries=(Series)EcoreUtil.copy(htSeriesNames.get(cbSeriesType.getText()));
      newSeries.translateFrom(((SeriesDefinition)((Axis)XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getDesignTimeSeries(),iSeriesDefinitionIndex,chartModel);
      newSeries.eAdapters().addAll(chartModel.eAdapters());
      ((SeriesDefinition)((Axis)XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getSeries().clear();
      ((SeriesDefinition)((Axis)XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getSeries().add(newSeries);
      ChartUIUtil.setSeriesName(chartModel);
    }
  }
 catch (  Exception e) {
    bException=true;
    WizardBase.showException(e.getLocalizedMessage());
  }
 finally {
    ChartAdapter.endIgnoreNotifications();
  }
  if (!bException) {
    WizardBase.removeException();
  }
}","private void changeOverlaySeriesType(){
  if (getCurrentChartType().canCombine()) {
    ChartCacheManager.getInstance().cacheSeriesType(cbSeriesType.getText());
  }
  boolean bException=false;
  try {
    Axis XAxis=(Axis)((ChartWithAxes)chartModel).getAxes().get(0);
    int iSeriesDefinitionIndex=0 + ((Axis)XAxis.getAssociatedAxes().get(0)).getSeriesDefinitions().size();
    int iOverlaySeriesCount=((Axis)XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().size();
    ChartAdapter.beginIgnoreNotifications();
    for (int i=0; i < iOverlaySeriesCount; i++) {
      Series lastSeries=((SeriesDefinition)((Axis)XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getDesignTimeSeries();
      if (!lastSeries.getDisplayName().equals(cbSeriesType.getText())) {
        Series newSeries=(Series)EcoreUtil.copy(htSeriesNames.get(cbSeriesType.getText()));
        newSeries.translateFrom(lastSeries,iSeriesDefinitionIndex,chartModel);
        newSeries.eAdapters().addAll(chartModel.eAdapters());
        ((SeriesDefinition)((Axis)XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getSeries().clear();
        ((SeriesDefinition)((Axis)XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getSeries().add(newSeries);
        ChartUIUtil.setSeriesName(chartModel);
      }
    }
  }
 catch (  Exception e) {
    bException=true;
    WizardBase.showException(e.getLocalizedMessage());
  }
 finally {
    ChartAdapter.endIgnoreNotifications();
  }
  if (!bException) {
    WizardBase.removeException();
  }
}",0.7025934658134052
71299,"public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
  }
  retrieveRtLFlag();
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,layoutPreference);
  }
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      htmlEmitter.buildDefaultStyle(defaultStyleBuffer,style);
    }
  }
  String defaultStyleName=""String_Node_Str"";
  if (isEmbeddable) {
    outputCSSStyles(defaultStyleName,defaultStyleBuffer,reportDesign,designHandle);
    fixTransparentPNG();
    fixRedirect();
    writer.openTag(HTMLTags.TAG_DIV);
    if (htmlRtLFlag) {
      writer.attribute(HTMLTags.ATTR_HTML_DIR,CSSConstants.CSS_RTL_VALUE);
    }
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  if (htmlRtLFlag) {
    writer.attribute(HTMLTags.ATTR_HTML_DIR,CSSConstants.CSS_RTL_VALUE);
  }
  writer.openTag(HTMLTags.TAG_HEAD);
  if (designHandle != null) {
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  outputCSSStyles(defaultStyleName,defaultStyleBuffer,reportDesign,designHandle);
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
  }
  if (outputMasterPageContent) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
}","public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
  }
  retrieveRtLFlag();
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,layoutPreference,htmlRtLFlag);
  }
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      htmlEmitter.buildDefaultStyle(defaultStyleBuffer,style);
    }
  }
  String defaultStyleName=""String_Node_Str"";
  if (isEmbeddable) {
    outputCSSStyles(defaultStyleName,defaultStyleBuffer,reportDesign,designHandle);
    fixTransparentPNG();
    fixRedirect();
    writer.openTag(HTMLTags.TAG_DIV);
    if (htmlRtLFlag) {
      writer.attribute(HTMLTags.ATTR_HTML_DIR,CSSConstants.CSS_RTL_VALUE);
    }
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  if (htmlRtLFlag) {
    writer.attribute(HTMLTags.ATTR_HTML_DIR,CSSConstants.CSS_RTL_VALUE);
  }
  writer.openTag(HTMLTags.TAG_HEAD);
  if (designHandle != null) {
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  outputCSSStyles(defaultStyleName,defaultStyleBuffer,reportDesign,designHandle);
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
  }
  if (outputMasterPageContent) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
}",0.99801521667218
71300,"/** 
 * Handles the alignment property of the row content.
 */
public void handleRowAlign(IRowContent row){
  IStyle rowComputedStyle=row.getComputedStyle();
  CSSValue vAlign=rowComputedStyle.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  if (null == vAlign || IStyle.BASELINE_VALUE == vAlign) {
    vAlign=IStyle.TOP_VALUE;
  }
  writer.attribute(HTMLTags.ATTR_VALIGN,vAlign.getCssText());
  CSSValue hAlign=rowComputedStyle.getProperty(IStyle.STYLE_TEXT_ALIGN);
  if (null != hAlign) {
    writer.attribute(HTMLTags.ATTR_ALIGN,hAlign.getCssText());
  }
}","/** 
 * Handles the alignment property of the row content.
 */
public void handleRowAlign(IRowContent row){
  IStyle rowComputedStyle=row.getComputedStyle();
  CSSValue vAlign=rowComputedStyle.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  if (null == vAlign || IStyle.BASELINE_VALUE == vAlign) {
    vAlign=IStyle.TOP_VALUE;
  }
  writer.attribute(HTMLTags.ATTR_VALIGN,vAlign.getCssText());
  String hAlignText=null;
  CSSValue hAlign=rowComputedStyle.getProperty(IStyle.STYLE_TEXT_ALIGN);
  if (null != hAlign) {
    hAlignText=hAlign.getCssText();
  }
  if (null == hAlignText) {
    if (htmlRtLFlag) {
      hAlignText=""String_Node_Str"";
    }
 else {
      hAlignText=""String_Node_Str"";
    }
  }
  writer.attribute(HTMLTags.ATTR_ALIGN,hAlignText);
}",0.8238897396630934
71301,"public HTMLVisionOptimize(HTMLReportEmitter reportEmitter,HTMLWriter writer,String layoutPreference){
  super(reportEmitter,writer,layoutPreference);
}","public HTMLVisionOptimize(HTMLReportEmitter reportEmitter,HTMLWriter writer,String layoutPreference,boolean htmlRtLFlag){
  super(reportEmitter,writer,layoutPreference);
  this.htmlRtLFlag=htmlRtLFlag;
}",0.8531073446327684
71302,"public ScriptContext(ScriptableObject root){
  try {
    this.context=Context.enter();
    global=new ImporterTopLevel();
    if (root != null) {
      global.exportAsJSClass(3,global,false);
      global.delete(""String_Node_Str"");
      global.setPrototype(root);
    }
 else {
      global.initStandardObjects(context,true);
    }
    this.scope=global;
    sharedScope=context.newObject(scope);
    sharedScope.setParentScope(scope);
  }
 catch (  Exception ex) {
    Context.exit();
    this.scope=null;
    this.context=null;
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,ex.getMessage());
    }
  }
}","public ScriptContext(ScriptableObject root){
  try {
    this.context=Context.enter();
    global=new ImporterTopLevel();
    if (root != null) {
      new LazilyLoadedCtor(global,""String_Node_Str"",""String_Node_Str"",false);
      global.exportAsJSClass(3,global,false);
      global.delete(""String_Node_Str"");
      global.setPrototype(root);
    }
 else {
      global.initStandardObjects(context,true);
    }
    this.scope=global;
    sharedScope=context.newObject(scope);
    sharedScope.setParentScope(scope);
  }
 catch (  Exception ex) {
    Context.exit();
    this.scope=null;
    this.context=null;
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,ex.getMessage());
    }
  }
}",0.9421364985163204
71303,"public void render() throws Exception {
  setupRenderOption();
  IContentEmitter emitter=createContentEmitter();
  String format=executionContext.getOutputFormat();
  IReportExecutor executor=new ReportletExecutor(executionContext,offset);
  executor=createRenderExtensionExecutor(executor);
  executor=new SuppressDuplciateReportExecutor(executor);
  executor=new LocalizedReportExecutor(executionContext,executor);
  executionContext.setExecutor(executor);
  initializeContentEmitter(emitter,executor);
  IReportLayoutEngine layoutEngine=createReportLayoutEngine(pagination,renderOptions);
  layoutEngine.setLocale(executionContext.getLocale());
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
    layoutEngine.setPageHandler(handle);
    CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
    outputEmitters.addEmitter(new PDFLayoutEmitterProxy(executor,emitter,renderOptions,executionContext.getLocale(),getTotalPage()));
    outputEmitters.addEmitter(handle.getEmitter());
    emitter=outputEmitters;
  }
  startRender();
  IReportContent report=executor.execute();
  emitter.start(report);
  layoutEngine.layout(executor,report,emitter,false);
  layoutEngine.close();
  emitter.end(report);
  closeRender();
  executor.close();
  outputPageCount=layoutEngine.getPageCount();
}","public void render() throws Exception {
  setupRenderOption();
  IContentEmitter emitter=createContentEmitter();
  String format=executionContext.getOutputFormat();
  IReportExecutor executor=new ReportletExecutor(executionContext,offset);
  executor=createRenderExtensionExecutor(executor);
  executor=new SuppressDuplciateReportExecutor(executor);
  executor=new LocalizedReportExecutor(executionContext,executor);
  executionContext.setExecutor(executor);
  initializeContentEmitter(emitter,executor);
  IReportLayoutEngine layoutEngine=createReportLayoutEngine(pagination,renderOptions);
  layoutEngine.setPageHandler(new LayoutPageHandler(((HTMLReportLayoutEngine)layoutEngine).getContext()));
  layoutEngine.setLocale(executionContext.getLocale());
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
    layoutEngine.setPageHandler(handle);
    CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
    outputEmitters.addEmitter(new PDFLayoutEmitterProxy(executor,emitter,renderOptions,executionContext.getLocale(),getTotalPage()));
    outputEmitters.addEmitter(handle.getEmitter());
    emitter=outputEmitters;
  }
  startRender();
  IReportContent report=executor.execute();
  emitter.start(report);
  layoutEngine.layout(executor,report,emitter,false);
  layoutEngine.close();
  emitter.end(report);
  closeRender();
  executor.close();
  outputPageCount=layoutEngine.getPageCount();
}",0.9635930588635592
71304,"void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  updateRtLFlag();
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      emitter=new PDFLayoutEmitterProxy(executor,emitter,renderOptions,executionContext.getLocale(),0l);
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      layoutPageHandler.addPageHandler(new LayoutPageHandler());
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}","void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  updateRtLFlag();
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    LayoutPageHandler layoutHandler=new LayoutPageHandler();
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      PDFLayoutEmitterProxy pdfLayoutEmitter=new PDFLayoutEmitterProxy(executor,emitter,renderOptions,executionContext.getLocale(),0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}",0.9439015562794064
71305,"public void close() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (jdbcConn == null) {
    return;
  }
  try {
    if ((jdbcConn instanceof java.sql.Connection)) {
      Object option=this.appContext.get(IConnectionFactory.CLOSE_PASS_IN_CONNECTION);
      boolean closePassInConnection=(option instanceof Boolean) ? ((Boolean)option).booleanValue() : true;
      if (!closePassInConnection)       return;
    }
    if (jdbcConn.isClosed() == false)     jdbcConn.close();
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.CONN_CANNOT_CLOSE,e);
  }
  jdbcConn=null;
}","public void close() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (jdbcConn == null) {
    return;
  }
  try {
    if (this.appContext != null && (jdbcConn instanceof java.sql.Connection)) {
      Object option=this.appContext.get(IConnectionFactory.CLOSE_PASS_IN_CONNECTION);
      boolean closePassInConnection=(option instanceof Boolean) ? ((Boolean)option).booleanValue() : true;
      if (!closePassInConnection)       return;
    }
    if (jdbcConn.isClosed() == false)     jdbcConn.close();
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.CONN_CANNOT_CLOSE,e);
  }
  jdbcConn=null;
}",0.98058950395399
71306,"protected CategoryContentProvider(LegendData lgData) throws ChartException {
  super(lgData);
  sdBase=ChartUtil.getBaseSeriesDefinitions(lgData.cm).get(0);
  seBase=sdBase.getRunTimeSeries().get(0);
  dsiBase=createDataSetIterator(seBase,lgData.cm);
  fs=lgData.cm.getLegend().getFormatSpecifier();
  if (fs == null && sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  boolean bDataReverse=bNeedInvert;
  if (lgData.cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)lgData.cm;
    bDataReverse=ChartUtil.XOR(bNeedInvert,cwa.isReverseCategory());
  }
  dsiBase.reverse(bDataReverse);
}","protected CategoryContentProvider(LegendData lgData) throws ChartException {
  super(lgData);
  sdBase=ChartUtil.getBaseSeriesDefinitions(lgData.cm).get(0);
  seBase=sdBase.getRunTimeSeries().get(0);
  dsiBase=createDataSetIterator(seBase,lgData.cm);
  fs=lgData.cm.getLegend().getFormatSpecifier();
  boolean bDataReverse=bNeedInvert;
  if (lgData.cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)lgData.cm;
    bDataReverse=ChartUtil.XOR(bNeedInvert,cwa.isReverseCategory());
  }
  dsiBase.reverse(bDataReverse);
}",0.93205574912892
71307,"public void deserialize(String propName,ByteArrayInputStream data) throws ExtendedElementException {
  if (propName != null && propName.equalsIgnoreCase(ChartReportItemUtil.PROPERTY_XMLPRESENTATION)) {
    try {
      cm=SerializerImpl.instance().fromXml(data,true);
      String reportVer=handle.getModuleHandle().getVersion();
      adjustNumberFormat(reportVer);
    }
 catch (    IOException e) {
      e.printStackTrace();
      cm=null;
    }
  }
}","public void deserialize(String propName,ByteArrayInputStream data) throws ExtendedElementException {
  if (propName != null && propName.equalsIgnoreCase(ChartReportItemUtil.PROPERTY_XMLPRESENTATION)) {
    try {
      cm=SerializerImpl.instance().fromXml(data,true);
      doCompatibility(cm);
      String reportVer=handle.getModuleHandle().getVersion();
      adjustNumberFormat(reportVer);
    }
 catch (    IOException e) {
      logger.log(e);
      cm=null;
    }
  }
}",0.9386437029063508
71308,"public void widgetSelected(SelectionEvent e){
  if (detachPopup(e.widget)) {
    return;
  }
  if (isRegistered(e.widget)) {
    attachPopup(((Button)e.widget).getData().toString());
  }
  if (e.widget.equals(cmbColorBy)) {
    if (!getChart().getLegend().getItemType().getName().equals(LiteralHelper.legendItemTypeSet.getNameByDisplayName(cmbColorBy.getText()))) {
      getChart().getLegend().setItemType(LegendItemType.getByName(LiteralHelper.legendItemTypeSet.getNameByDisplayName(cmbColorBy.getText())));
      getChart().getLegend().setFormatSpecifier(null);
      if ((getChart().getLegend().getItemType().getValue() == LegendItemType.CATEGORIES) && isGroupedSeries()) {
        ChartAdapter.beginIgnoreNotifications();
        SeriesDefinition[] osds=getValueSeriesDefinition();
        SeriesDefinition bsd=getCategorySeriesDefinition();
        bsd.getSeriesPalette().shift(0);
        for (int i=0; i < osds.length; i++) {
          bsd.getSeriesPalette().getEntries().set(i,EcoreUtil.copy((Fill)osds[i].getSeriesPalette().getEntries().get(0)));
        }
        ((SeriesPaletteSheet)popup).setCategorySeries(bsd);
        ChartAdapter.endIgnoreNotifications();
      }
      ((SeriesPaletteSheet)popup).setGroupedPalette(isGroupedSeries());
      refreshPopupSheet();
    }
  }
}","public void widgetSelected(SelectionEvent e){
  if (detachPopup(e.widget)) {
    return;
  }
  if (isRegistered(e.widget)) {
    attachPopup(((Button)e.widget).getData().toString());
  }
  if (e.widget.equals(cmbColorBy)) {
    if (!getChart().getLegend().getItemType().getName().equals(LiteralHelper.legendItemTypeSet.getNameByDisplayName(cmbColorBy.getText()))) {
      getChart().getLegend().setItemType(LegendItemType.getByName(LiteralHelper.legendItemTypeSet.getNameByDisplayName(cmbColorBy.getText())));
      if ((getChart().getLegend().getItemType().getValue() == LegendItemType.CATEGORIES) && isGroupedSeries()) {
        ChartAdapter.beginIgnoreNotifications();
        SeriesDefinition[] osds=getValueSeriesDefinition();
        SeriesDefinition bsd=getCategorySeriesDefinition();
        bsd.getSeriesPalette().shift(0);
        for (int i=0; i < osds.length; i++) {
          bsd.getSeriesPalette().getEntries().set(i,EcoreUtil.copy((Fill)osds[i].getSeriesPalette().getEntries().get(0)));
        }
        ((SeriesPaletteSheet)popup).setCategorySeries(bsd);
        ChartAdapter.endIgnoreNotifications();
      }
      ((SeriesPaletteSheet)popup).setGroupedPalette(isGroupedSeries());
      refreshPopupSheet();
    }
  }
}",0.9782522736259393
71309,"public void close(){
  if (tocReader != null) {
    try {
      tocReader.close();
    }
 catch (    IOException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
    }
    tocReader=null;
  }
  if (indexReader != null) {
    try {
      indexReader.close();
    }
 catch (    IOException ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    indexReader=null;
  }
  if (pageHintReader != null) {
    pageHintReader.close();
    pageHintReader=null;
  }
  if (archive != null) {
    if (!sharedArchive) {
      try {
        archive.close();
      }
 catch (      IOException ex) {
        logger.log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
    archive=null;
  }
  if (extensions != null) {
    for (    Map.Entry<String,IReportDocumentExtension> entry : extensions.entrySet()) {
      String name=entry.getKey();
      IReportDocumentExtension extension=entry.getValue();
      if (extension != null) {
        try {
          extension.close();
        }
 catch (        EngineException ex) {
          logger.log(Level.SEVERE,""String_Node_Str"" + name,ex);
        }
      }
    }
    extensions.clear();
    extensions=null;
  }
}","public void close(){
  if (tocReader != null) {
    try {
      tocReader.close();
    }
 catch (    IOException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
    }
    tocReader=null;
  }
  if (indexReader != null) {
    try {
      indexReader.close();
    }
 catch (    IOException ex) {
      logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    indexReader=null;
  }
  if (pageHintReader != null) {
    pageHintReader.close();
    pageHintReader=null;
  }
  if (archive != null) {
    if (!sharedArchive) {
      try {
        archive.close();
      }
 catch (      IOException ex) {
        logger.log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
    archive=null;
  }
  if (extensions != null) {
    for (    Map.Entry<String,IReportDocumentExtension> entry : extensions.entrySet()) {
      String name=entry.getKey();
      IReportDocumentExtension extension=entry.getValue();
      if (extension != null) {
        try {
          extension.close();
        }
 catch (        EngineException ex) {
          logger.log(Level.SEVERE,""String_Node_Str"" + name,ex);
        }
      }
    }
    extensions.clear();
    extensions=null;
  }
  if (engineCacheEntry != null) {
    LinkedObjectManager<ReportDocumentReader> manager=engineCacheEntry.getManager();
synchronized (manager) {
      manager.remove(engineCacheEntry);
    }
  }
}",0.9225296442687748
71310,"/** 
 * shuts down the report engine
 */
public void destroy(){
  logger.fine(""String_Node_Str"");
  rootScope=null;
  helper=null;
  if (config != null) {
    IStatusHandler handler=config.getStatusHandler();
    if (handler != null) {
      handler.finish();
    }
  }
  if (extensionManager != null) {
    extensionManager.close();
    extensionManager=null;
  }
  EngineLogger.stopEngineLogging();
}","/** 
 * shuts down the report engine
 */
public void destroy(){
  logger.fine(""String_Node_Str"");
  rootScope=null;
  helper=null;
synchronized (openedDocuments) {
    for (    ReportDocumentReader document : openedDocuments) {
      document.setEngineCacheEntry(null);
      document.close();
    }
    openedDocuments.clear();
  }
  if (config != null) {
    IStatusHandler handler=config.getStatusHandler();
    if (handler != null) {
      handler.finish();
    }
  }
  if (extensionManager != null) {
    extensionManager.close();
    extensionManager=null;
  }
  EngineLogger.stopEngineLogging();
}",0.7992047713717694
71311,"/** 
 * Constructor. If config is null, engine derives BIRT_HOME from the location of the engine jar file, and derives data driver directory as $BIRT_HOME/drivers. For a simple report with no images and links, engine will run without complaining. If the report has image/chart defined, the engine has to be configured with relevant image and chart handlers.
 * @param config an engine configuration object used to configure the engine
 */
public ReportEngine(EngineConfig config){
  this.config=config;
  mergeConfigToAppContext();
  intializeLogger();
  logger.log(Level.FINE,""String_Node_Str"",config);
  this.helper=new ReportEngineHelper(this);
  setupScriptScope();
}","/** 
 * Constructor. If config is null, engine derives BIRT_HOME from the location of the engine jar file, and derives data driver directory as $BIRT_HOME/drivers. For a simple report with no images and links, engine will run without complaining. If the report has image/chart defined, the engine has to be configured with relevant image and chart handlers.
 * @param config an engine configuration object used to configure the engine
 */
public ReportEngine(EngineConfig config){
  this.config=config;
  mergeConfigToAppContext();
  intializeLogger();
  logger.log(Level.FINE,""String_Node_Str"",config);
  this.helper=new ReportEngineHelper(this);
  openedDocuments=new LinkedObjectManager<ReportDocumentReader>();
  setupScriptScope();
}",0.9297374024130588
71312,"public IReportDocument openReportDocument(String systemId,IDocArchiveReader archive,Map options) throws EngineException {
  if (options == null) {
    options=new HashMap();
  }
  intializeModuleOptions(options);
  ReportDocumentReader reader=new ReportDocumentReader(systemId,engine,archive,options);
  return reader;
}","public IReportDocument openReportDocument(String systemId,IDocArchiveReader archive,Map options) throws EngineException {
  if (options == null) {
    options=new HashMap();
  }
  intializeModuleOptions(options);
  ReportDocumentReader reader=new ReportDocumentReader(systemId,engine,archive,options);
  engine.cacheOpenedDocument(reader);
  return reader;
}",0.943952802359882
71313,"public void test_regression_137174(){
  List infos=ModuleUtil.checkVersion(getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ filename);
  assertEquals(1,infos.size());
  IVersionInfo versionInfo=(IVersionInfo)infos.get(0);
  assertEquals(""String_Node_Str"",versionInfo.getDesignFileVersion());
  assertNotNull(versionInfo.getLocalizedMessage());
  infos=ModuleUtil.checkVersion(getClassFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ ""String_Node_Str"");
  assertEquals(1,infos.size());
}","public void test_regression_137174(){
  List infos=ModuleUtil.checkVersion(getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ filename);
  assertEquals(1,infos.size());
  IVersionInfo versionInfo=(IVersionInfo)infos.get(0);
  assertEquals(""String_Node_Str"",versionInfo.getDesignFileVersion());
  assertNotNull(versionInfo.getLocalizedMessage());
  infos=ModuleUtil.checkVersion(getClassFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ filename_lib);
  assertEquals(1,infos.size());
}",0.9721421709894332
71314,"/** 
 */
public void testLike(){
  String[] script=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] result=new boolean[]{true,true,true,true,true,false,false,false,true,false,true,false,false};
  for (int i=0; i < script.length; i++) {
    assertTrue(((Boolean)cx.evaluateString(scope,script[i],""String_Node_Str"",1,null)).booleanValue() == result[i]);
  }
}","/** 
 */
public void testLike(){
  String[] script=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] result=new boolean[]{true,true,true,true,true,false,false,false,true,false,true,false,true};
  for (int i=0; i < script.length; i++) {
    assertEquals(result[i],((Boolean)cx.evaluateString(scope,script[i],""String_Node_Str"",1,null)).booleanValue());
  }
}",0.9630281690140844
71315,"/** 
 */
public void testNotLike(){
  String[] script=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] result=new boolean[]{false,false,false,false,false,true,true,true,false,true,false,true};
  for (int i=0; i < script.length; i++) {
    assertTrue(((Boolean)cx.evaluateString(scope,script[i],""String_Node_Str"",1,null)).booleanValue() == result[i]);
  }
}","/** 
 */
public void testNotLike(){
  String[] script=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] result=new boolean[]{false,false,false,false,false,true,true,true,false,true,false,true,false};
  for (int i=0; i < script.length; i++) {
    assertEquals(result[i],((Boolean)cx.evaluateString(scope,script[i],""String_Node_Str"",1,null)).booleanValue());
  }
}",0.9474621549421192
71316,"/** 
 * Transfers the user-input string to the Pattern regular expression
 * @param regex
 * @return
 */
private static String toPatternString(String regex){
  String pattern=""String_Node_Str"";
  for (int i=0; i < regex.length(); i++) {
    char c=regex.charAt(i);
    if (c == '\\') {
      i++;
      if (i < regex.length()) {
        pattern+=regex.charAt(i);
      }
    }
 else     if (c == '%') {
      pattern+=""String_Node_Str"";
    }
 else     if (c == '_') {
      pattern+=""String_Node_Str"";
    }
 else {
      pattern+=c;
    }
  }
  return pattern;
}","/** 
 * Transfers the user-input string to the Pattern regular expression
 * @param regex
 * @return
 */
private static String toPatternString(String regex){
  String pattern=""String_Node_Str"";
  boolean preserveFlag=false;
  for (int i=0; i < regex.length(); i++) {
    char c=regex.charAt(i);
    if (c == '\\') {
      pattern=handlePreservedString(preserveFlag,pattern);
      preserveFlag=false;
      pattern+=c;
      i++;
      if (i < regex.length()) {
        pattern+=regex.charAt(i);
      }
    }
 else     if (c == '%') {
      pattern=handlePreservedString(preserveFlag,pattern);
      preserveFlag=false;
      pattern+=""String_Node_Str"";
    }
 else     if (c == '_') {
      pattern=handlePreservedString(preserveFlag,pattern);
      preserveFlag=false;
      pattern+=""String_Node_Str"";
    }
 else {
      if (preserveFlag) {
        pattern+=c;
      }
 else {
        pattern=pattern + ""String_Node_Str"" + c;
        preserveFlag=true;
      }
    }
  }
  if (preserveFlag) {
    pattern+=""String_Node_Str"";
  }
  return pattern;
}",0.6975881261595547
71317,"@Override public T next(){
  if (modCount != expectedModCount)   throw new ConcurrentModificationException();
  LinkedEntry<T> entry=next;
  if (entry == null)   throw new NoSuchElementException();
  T value=entry.getValue();
  current=entry;
  next=entry.getNext();
  return value;
}","public T next(){
  if (modCount != expectedModCount)   throw new ConcurrentModificationException();
  LinkedEntry<T> entry=next;
  if (entry == null)   throw new NoSuchElementException();
  T value=entry.getValue();
  current=entry;
  next=entry.getNext();
  return value;
}",0.982078853046595
71318,"public void clear(){
  LinkedEntry<T> entry=first;
  first=null;
  last=null;
  modCount=0;
}","public void clear(){
  first=null;
  last=null;
  modCount=0;
}",0.8076923076923077
71319,"@Override public boolean hasNext(){
  return next != null;
}","public boolean hasNext(){
  return next != null;
}",0.9090909090909092
71320,"@Override public void remove(){
  if (current == null)   throw new IllegalStateException();
  if (modCount != expectedModCount)   throw new ConcurrentModificationException();
  LinkedObjectManager.this.remove(current);
  current=null;
  expectedModCount=modCount;
}","public void remove(){
  if (current == null)   throw new IllegalStateException();
  if (modCount != expectedModCount)   throw new ConcurrentModificationException();
  LinkedObjectManager.this.remove(current);
  current=null;
  expectedModCount=modCount;
}",0.9807692307692308
71321,"@Override public Iterator<T> iterator(){
  return new InternalIterator();
}","public Iterator<T> iterator(){
  return new InternalIterator();
}",0.9285714285714286
71322,"/** 
 * @param s
 * @return
 */
private static String cleanDate(String s){
  s=s.trim();
  if (s.indexOf('T') < 12) {
    s=s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  int zoneIndex=s.indexOf(""String_Node_Str"");
  if (zoneIndex > 0) {
    return s.substring(0,zoneIndex).trim();
  }
  zoneIndex=s.indexOf('Z');
  if (zoneIndex == s.length() - 1) {
    return s.substring(0,zoneIndex).trim();
  }
  zoneIndex=getZoneIndex(s);
  if (zoneIndex > 0) {
    return s.substring(0,zoneIndex).trim();
  }
  return s;
}","/** 
 * @param s
 * @return
 */
private static String cleanDate(String s){
  s=s.trim();
  if (s.indexOf('T') < 12) {
    s=s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  int zoneIndex=s.indexOf('Z');
  if (zoneIndex == s.length() - 1) {
    return s.substring(0,zoneIndex).trim();
  }
  return s;
}",0.6922155688622754
71323,"public static final Chart createCurveFittingScript(){
  ChartWithAxes cwaBar=ChartWithAxesImpl.create();
  cwaBar.setType(""String_Node_Str"");
  cwaBar.setSubType(""String_Node_Str"");
  cwaBar.setScript(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  cwaBar.getTitle().getLabel().getCaption().setValue(""String_Node_Str"");
  cwaBar.getLegend().setVisible(false);
  Axis xAxisPrimary=cwaBar.getPrimaryBaseAxes()[0];
  xAxisPrimary.setType(AxisType.TEXT_LITERAL);
  xAxisPrimary.getOrigin().setType(IntersectionType.VALUE_LITERAL);
  Axis yAxisPrimary=cwaBar.getPrimaryOrthogonalAxis(xAxisPrimary);
  yAxisPrimary.getMajorGrid().setTickStyle(TickStyle.LEFT_LITERAL);
  yAxisPrimary.setType(AxisType.LINEAR_LITERAL);
  TextDataSet categoryValues=TextDataSetImpl.create(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  NumberDataSet orthoValues=NumberDataSetImpl.create(new double[]{8,18,-15,-8,10});
  SampleData sd=DataFactory.eINSTANCE.createSampleData();
  BaseSampleData sdBase=DataFactory.eINSTANCE.createBaseSampleData();
  sdBase.setDataSetRepresentation(""String_Node_Str"");
  sd.getBaseSampleData().add(sdBase);
  OrthogonalSampleData sdOrthogonal=DataFactory.eINSTANCE.createOrthogonalSampleData();
  sdOrthogonal.setDataSetRepresentation(""String_Node_Str"");
  sdOrthogonal.setSeriesDefinitionIndex(0);
  sd.getOrthogonalSampleData().add(sdOrthogonal);
  cwaBar.setSampleData(sd);
  Series seCategory=SeriesImpl.create();
  seCategory.setDataSet(categoryValues);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  xAxisPrimary.getSeriesDefinitions().add(sdX);
  sdX.getSeries().add(seCategory);
  BarSeries bs=(BarSeries)BarSeriesImpl.create();
  bs.setDataSet(orthoValues);
  bs.getLabel().setVisible(true);
  bs.setCurveFitting(CurveFittingImpl.create());
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  yAxisPrimary.getSeriesDefinitions().add(sdY);
  sdY.getSeries().add(bs);
  return cwaBar;
}","public static final Chart createCurveFittingScript(){
  ChartWithAxes cwaBar=ChartWithAxesImpl.create();
  cwaBar.setType(""String_Node_Str"");
  cwaBar.setSubType(""String_Node_Str"");
  cwaBar.setScript(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  cwaBar.getTitle().getLabel().getCaption().setValue(""String_Node_Str"");
  cwaBar.getLegend().setVisible(false);
  Axis xAxisPrimary=cwaBar.getPrimaryBaseAxes()[0];
  xAxisPrimary.setType(AxisType.TEXT_LITERAL);
  xAxisPrimary.getOrigin().setType(IntersectionType.VALUE_LITERAL);
  Axis yAxisPrimary=cwaBar.getPrimaryOrthogonalAxis(xAxisPrimary);
  yAxisPrimary.getMajorGrid().setTickStyle(TickStyle.LEFT_LITERAL);
  yAxisPrimary.setType(AxisType.LINEAR_LITERAL);
  yAxisPrimary.getScale().setMin(NumberDataElementImpl.create(-20.0));
  TextDataSet categoryValues=TextDataSetImpl.create(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  NumberDataSet orthoValues=NumberDataSetImpl.create(new double[]{8,18,-15,-8,10});
  SampleData sd=DataFactory.eINSTANCE.createSampleData();
  BaseSampleData sdBase=DataFactory.eINSTANCE.createBaseSampleData();
  sdBase.setDataSetRepresentation(""String_Node_Str"");
  sd.getBaseSampleData().add(sdBase);
  OrthogonalSampleData sdOrthogonal=DataFactory.eINSTANCE.createOrthogonalSampleData();
  sdOrthogonal.setDataSetRepresentation(""String_Node_Str"");
  sdOrthogonal.setSeriesDefinitionIndex(0);
  sd.getOrthogonalSampleData().add(sdOrthogonal);
  cwaBar.setSampleData(sd);
  Series seCategory=SeriesImpl.create();
  seCategory.setDataSet(categoryValues);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  xAxisPrimary.getSeriesDefinitions().add(sdX);
  sdX.getSeries().add(seCategory);
  BarSeries bs=(BarSeries)BarSeriesImpl.create();
  bs.setDataSet(orthoValues);
  bs.getLabel().setVisible(true);
  bs.setCurveFitting(CurveFittingImpl.create());
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  yAxisPrimary.getSeriesDefinitions().add(sdY);
  sdY.getSeries().add(bs);
  return cwaBar;
}",0.98243878308187
71324,"public void close() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (jdbcConn == null) {
    return;
  }
  try {
    if (jdbcConn.isClosed() == false)     jdbcConn.close();
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.CONN_CANNOT_CLOSE,e);
  }
  jdbcConn=null;
}","public void close() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (jdbcConn == null) {
    return;
  }
  try {
    if ((jdbcConn instanceof java.sql.Connection)) {
      Object option=this.appContext.get(IConnectionFactory.CLOSE_PASS_IN_CONNECTION);
      boolean closePassInConnection=(option instanceof Boolean) ? ((Boolean)option).booleanValue() : true;
      if (!closePassInConnection)       return;
    }
    if (jdbcConn.isClosed() == false)     jdbcConn.close();
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.CONN_CANNOT_CLOSE,e);
  }
  jdbcConn=null;
}",0.7180451127819549
71325,"/** 
 * Computes the size of the legend. Note the computation relies on the title size, so the title block must be layouted first before this.
 * @param lg
 * @param sea
 * @throws ChartException
 */
public final Size compute(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc) throws ChartException {
  final Legend lg=cm.getLegend();
  if (!lg.isSetOrientation()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  if (!lg.isSetDirection()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  LegendData legendData=new LegendData(xs,cm,seda,rtc);
  initAvailableSize(legendData);
  boolean bMinSliceDefined=false;
  if (cm instanceof ChartWithoutAxes) {
    bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
    legendData.sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
    if (legendData.sMinSliceLabel == null || legendData.sMinSliceLabel.length() == 0) {
      legendData.sMinSliceLabel=IConstants.UNDEFINED_STRING;
    }
 else {
      legendData.sMinSliceLabel=rtc.externalizedMessage(legendData.sMinSliceLabel);
    }
  }
  if (bMinSliceDefined && legendData.bPaletteByCategory && cm instanceof ChartWithoutAxes) {
    calculateExtraLegend(cm,rtc,legendData);
  }
  Label lgTitle=lg.getTitle();
  Size titleSize=null;
  BoundingBox titleBounding=null;
  int iTitlePos=-1;
  if (lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible()) {
    lgTitle=LabelImpl.copyInstance(lgTitle);
    final String sPreviousValue=lgTitle.getCaption().getValue();
    lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
    titleBounding=Methods.computeLabelSize(xs,lgTitle);
    iTitlePos=lg.getTitlePosition().getValue();
    if (rtc.isRightToLeft()) {
      if (iTitlePos == Position.LEFT) {
        iTitlePos=Position.RIGHT;
      }
 else       if (iTitlePos == Position.RIGHT) {
        iTitlePos=Position.LEFT;
      }
    }
    double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
      legendData.dAvailableHeight-=titleBounding.getHeight() + 2 * shadowness;
    break;
case Position.LEFT:
case Position.RIGHT:
  legendData.dAvailableWidth-=titleBounding.getWidth() + 2 * shadowness;
break;
}
titleSize=SizeImpl.create(titleBounding.getWidth() + 2 * shadowness,titleBounding.getHeight() + 2 * shadowness);
}
double[] size=null;
ContentProvider cProvider=ContentProvider.newInstance(legendData);
ContentPlacer cPlacer=ContentPlacer.newInstance(legendData);
LegendItemHints lih;
while ((lih=cProvider.nextContent()) != null) {
if (!cPlacer.placeContent(lih)) {
break;
}
}
cPlacer.finishPlacing();
size=cPlacer.getSize();
if (size == null) {
return SizeImpl.create(0,0);
}
double dWidth=size[0], dHeight=size[1];
if (iTitlePos != -1) {
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
dHeight+=titleBounding.getHeight() + 2 * shadowness;
dWidth=Math.max(dWidth,titleBounding.getWidth() + 2 * shadowness);
break;
case Position.LEFT:
case Position.RIGHT:
dWidth+=titleBounding.getWidth() + 2 * shadowness;
dHeight=Math.max(dHeight,titleBounding.getHeight() + 2 * shadowness);
break;
}
}
if (rtc != null) {
List<LegendItemHints> legendItems=legendData.legendItems;
LegendItemHints[] liha=legendItems.toArray(new LegendItemHints[legendItems.size()]);
LegendLayoutHints lilh=new LegendLayoutHints(SizeImpl.create(dWidth,dHeight),titleSize,legendData.bMinSliceApplied,legendData.sMinSliceLabel,liha);
rtc.setLegendLayoutHints(lilh);
}
sz=SizeImpl.create(dWidth,dHeight);
return sz;
}","/** 
 * Computes the size of the legend. Note the computation relies on the title size, so the title block must be layouted first before this.
 * @param lg
 * @param sea
 * @throws ChartException
 */
public final Size compute(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc) throws ChartException {
  final Legend lg=cm.getLegend();
  if (!lg.isSetOrientation()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  if (!lg.isSetDirection()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  LegendData legendData=new LegendData(xs,cm,seda,rtc);
  initAvailableSize(legendData);
  boolean bMinSliceDefined=false;
  if (cm instanceof ChartWithoutAxes) {
    bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
    legendData.sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
    if (legendData.sMinSliceLabel == null || legendData.sMinSliceLabel.length() == 0) {
      legendData.sMinSliceLabel=IConstants.UNDEFINED_STRING;
    }
 else {
      legendData.sMinSliceLabel=rtc.externalizedMessage(legendData.sMinSliceLabel);
    }
  }
  if (bMinSliceDefined && legendData.bPaletteByCategory && cm instanceof ChartWithoutAxes) {
    calculateExtraLegend(cm,rtc,legendData);
  }
  Label lgTitle=lg.getTitle();
  Size titleSize=null;
  BoundingBox titleBounding=null;
  int iTitlePos=-1;
  if (lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible()) {
    lgTitle=LabelImpl.copyInstance(lgTitle);
    final String sPreviousValue=lgTitle.getCaption().getValue();
    lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
    titleBounding=Methods.computeLabelSize(xs,lgTitle,0,null);
    iTitlePos=lg.getTitlePosition().getValue();
    if (rtc.isRightToLeft()) {
      if (iTitlePos == Position.LEFT) {
        iTitlePos=Position.RIGHT;
      }
 else       if (iTitlePos == Position.RIGHT) {
        iTitlePos=Position.LEFT;
      }
    }
    double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
      legendData.dAvailableHeight-=titleBounding.getHeight() + 2 * shadowness;
    break;
case Position.LEFT:
case Position.RIGHT:
  legendData.dAvailableWidth-=titleBounding.getWidth() + 2 * shadowness;
break;
}
titleSize=SizeImpl.create(titleBounding.getWidth() + 2 * shadowness,titleBounding.getHeight() + 2 * shadowness);
}
double[] size=null;
ContentProvider cProvider=ContentProvider.newInstance(legendData);
ContentPlacer cPlacer=ContentPlacer.newInstance(legendData);
LegendItemHints lih;
while ((lih=cProvider.nextContent()) != null) {
if (!cPlacer.placeContent(lih)) {
break;
}
}
cPlacer.finishPlacing();
size=cPlacer.getSize();
if (size == null) {
return SizeImpl.create(0,0);
}
double dWidth=size[0], dHeight=size[1];
if (iTitlePos != -1) {
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
dHeight+=titleBounding.getHeight() + 2 * shadowness;
dWidth=Math.max(dWidth,titleBounding.getWidth() + 2 * shadowness);
break;
case Position.LEFT:
case Position.RIGHT:
dWidth+=titleBounding.getWidth() + 2 * shadowness;
dHeight=Math.max(dHeight,titleBounding.getHeight() + 2 * shadowness);
break;
}
}
if (rtc != null) {
List<LegendItemHints> legendItems=legendData.legendItems;
LegendItemHints[] liha=legendItems.toArray(new LegendItemHints[legendItems.size()]);
LegendLayoutHints lilh=new LegendLayoutHints(SizeImpl.create(dWidth,dHeight),titleSize,legendData.bMinSliceApplied,legendData.sMinSliceLabel,liha);
rtc.setLegendLayoutHints(lilh);
}
sz=SizeImpl.create(dWidth,dHeight);
return sz;
}",0.9990642962170831
71326,"private void updateLabel(String strText) throws ChartException {
  la.getCaption().setValue(strText);
  itm.reuse(la,maxWrappingSize);
  bb=Methods.computeLabelSize(xs,la);
}","private void updateLabel(String strText) throws ChartException {
  la.getCaption().setValue(strText);
  bb=Methods.computeLabelSize(xs,la,maxWrappingSize,fontHeight);
}",0.8245614035087719
71327,"@Override public boolean placeContent(LegendItemHints lih) throws ChartException {
  if (lih.getType() == LegendItemHints.Type.LG_SEPERATOR) {
    if (bIsLeftRight) {
      flushColumnList();
      dX+=dSepThick;
      lih.left(dX - dSepThick * 0.5);
      lih.itemHeight(dMaxH);
    }
 else {
      dY+=dSepThick;
      lih.left(dX);
      lih.top(dY - dSepThick * 0.5);
      lih.width(dMaxW - lgData.dHorizontalSpacing);
    }
    lgData.legendItems.add(lih);
    return true;
  }
 else {
    Point size=computeContentSize(lih);
    return placeContentWithSize(lih,size);
  }
}","@Override public boolean placeContent(LegendItemHints lih) throws ChartException {
  if (lih.getType() == LegendItemHints.Type.LG_SEPERATOR) {
    if (bIsLeftRight) {
      flushColumnList();
      dX+=dSepThick;
      lih.left(dX - dSepThick * 0.5);
      lih.itemHeight(dMaxH);
    }
 else {
      dY+=dSepThick;
      lih.left(dX);
      lih.top(dY - dSepThick * 0.5);
      lih.width(dMaxW - lgData.dHorizontalSpacing);
    }
    columnList.add(lih);
    return true;
  }
 else {
    Point size=computeContentSize(lih);
    return placeContentWithSize(lih,size);
  }
}",0.9774305555555556
71328,"public LegendData(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc){
  this.xs=xs;
  this.cm=cm;
  this.lg=cm.getLegend();
  this.seda=seda;
  this.rtc=rtc;
  this.bPaletteByCategory=(lg.getItemType().getValue() == LegendItemType.CATEGORIES);
  this.la=LabelImpl.create();
  la.setEllipsis(1);
  la.setCaption(TextImpl.copyInstance(lg.getText()));
  la.getCaption().setValue(""String_Node_Str"");
  ITextMetrics itm=xs.getTextMetrics(la);
  this.dItemHeight=itm.getFullHeight();
  itm.dispose();
  ClientArea ca=lg.getClientArea();
  dSeparatorThickness=lg.getSeparator() != null ? lg.getSeparator().getThickness() : ca.getOutline().getThickness();
  dScale=xs.getDpiResolution() / 72d;
  insCa=ca.getInsets().scaledInstance(dScale);
  maxWrappingSize=lg.getWrappingSize() * dScale;
  dHorizontalSpacing=3 * dScale;
  dVerticalSpacing=3 * dScale;
  dSafeSpacing=3 * dScale;
  dHorizonalReservedSpace=insCa.getLeft() + insCa.getRight() + 1.5 * dItemHeight + dHorizontalSpacing;
}","public LegendData(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc){
  this.xs=xs;
  this.cm=cm;
  this.lg=cm.getLegend();
  this.seda=seda;
  this.rtc=rtc;
  this.bPaletteByCategory=(lg.getItemType().getValue() == LegendItemType.CATEGORIES);
  this.la=LabelImpl.create();
  la.setEllipsis(lg.isSetEllipsis() ? lg.getEllipsis() : 1);
  la.setCaption(TextImpl.copyInstance(lg.getText()));
  la.getCaption().setValue(""String_Node_Str"");
  ITextMetrics itm=xs.getTextMetrics(la);
  this.dItemHeight=itm.getFullHeight();
  itm.dispose();
  ClientArea ca=lg.getClientArea();
  dSeparatorThickness=lg.getSeparator() != null ? lg.getSeparator().getThickness() : ca.getOutline().getThickness();
  dScale=xs.getDpiResolution() / 72d;
  insCa=ca.getInsets().scaledInstance(dScale);
  maxWrappingSize=lg.getWrappingSize() * dScale;
  dHorizontalSpacing=3 * dScale;
  dVerticalSpacing=3 * dScale;
  dSafeSpacing=3 * dScale;
  dHorizonalReservedSpace=insCa.getLeft() + insCa.getRight() + 1.5 * dItemHeight + dHorizontalSpacing;
}",0.9803343166175024
71329,"private void updateEllipsisWidth(){
  la.getCaption().setValue(EllipsisHelper.ELLIPSIS_STRING);
  itm.reuse(la);
  dEllipsisWidth=itm.getFullWidth();
}","private void updateEllipsisWidth(ITextMetrics itm){
  la.getCaption().setValue(EllipsisHelper.ELLIPSIS_STRING);
  itm.reuse(la);
  dEllipsisWidth=itm.getFullWidth();
}",0.949685534591195
71330,"private String formatItemText(Object oText) throws ChartException {
  String str;
  if (snFormat != null) {
    str=snFormat.format(oText);
  }
 else {
    str=format(oText);
  }
  return lgData.rtc.externalizedMessage(str);
}","private String formatItemText(Object oText) throws ChartException {
  String str;
  if (snFormat != SeriesNameFormat.DEFAULT_FORMAT) {
    str=snFormat.format(oText);
  }
 else {
    str=format(oText);
  }
  return lgData.rtc.externalizedMessage(str);
}",0.9269311064718164
71331,"/** 
 * Compute the size of a label.
 * @param xs
 * @param la
 * @return
 * @throws ChartException
 */
public static final BoundingBox computeLabelSize(IDisplayServer xs,Label la) throws ChartException {
  try {
    return Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
  }
}","/** 
 * Compute the size of a label.
 * @param xs
 * @param la
 * @param dWrapping
 * @param fontHeight , pre-computed font height
 * @return
 * @throws ChartException
 */
public static final BoundingBox computeLabelSize(IDisplayServer xs,Label la,double dWrapping,Double fontHeight) throws ChartException {
  try {
    return computeBox(xs,IConstants.ABOVE,la,0,0,dWrapping,fontHeight);
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
  }
}",0.8577586206896551
71332,"public static SeriesNameFormat getSeriesNameFormat(SeriesDefinition sd,ULocale loc){
  if (sd != null && sd.getQuery() != null && sd.getQuery().getGrouping() != null) {
    SeriesGrouping sg=sd.getQuery().getGrouping();
    if (sg.getGroupType() == DataType.DATE_TIME_LITERAL) {
      return new SeriesNameDateFormat(sg.getGroupingUnit(),loc);
    }
  }
  return null;
}","public static SeriesNameFormat getSeriesNameFormat(SeriesDefinition sd,ULocale loc){
  if (sd != null && sd.getQuery() != null && sd.getQuery().getGrouping() != null) {
    SeriesGrouping sg=sd.getQuery().getGrouping();
    if (sg.getGroupType() == DataType.DATE_TIME_LITERAL) {
      return new SeriesNameDateFormat(sg.getGroupingUnit(),loc);
    }
  }
  return DEFAULT_FORMAT;
}",0.976
71333,"/** 
 * Internally provided to render a single legend entry
 * @param ipr
 * @param lg
 * @param la
 * @param dX
 * @param dY
 * @param dW
 * @param dItemHeight
 * @param dLeftInset
 * @param dHorizontalSpacing
 * @param se
 * @param fPaletteEntry
 * @param lirh
 * @param i data row index
 * @throws ChartException
 */
protected final void renderLegendItem(IPrimitiveRenderer ipr,Legend lg,Label la,Label valueLa,LegendItemHints lih,double dX,double dY,double dItemHeight,double dColumnWidth,double dLeftInset,double dHorizontalSpacing,Fill fPaletteEntry,LegendItemRenderingHints lirh,double dScale) throws ChartException {
  double dFullHeight=lih.getItemHeight();
  double dExtraHeight=lih.getValueHeight();
  Series se=lih.getSeries();
  int dataIndex=lih.getIndex();
  if (la != null && la.getCaption() != null && valueLa != null && valueLa.getCaption() != null) {
    valueLa.getCaption().setFont(la.getCaption().getFont());
    valueLa.getCaption().setColor(la.getCaption().getColor());
  }
  LegendEntryRenderingHints lerh=new LegendEntryRenderingHints(la,valueLa,dataIndex,fPaletteEntry);
  ScriptHandler sh=getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ENTRY,la);
  final Bounds bo=lirh.getLegendGraphicBounds();
  if (isRightToLeft()) {
    bo.setLeft((dX + dColumnWidth - dLeftInset - 1 - 3 * dItemHeight / 2) / dScale);
  }
 else {
    bo.setLeft((dX + dLeftInset + 1) / dScale);
  }
  bo.setTop((dY + 1 + (dFullHeight - dItemHeight) / 2) / dScale);
  bo.setWidth((3 * dItemHeight / 2) / dScale);
  bo.setHeight((dItemHeight - 2) / dScale);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ITEM,lerh);
  la.getCaption().setValue(EllipsisHelper.ellipsisString(lih.getItemText(),lih.getValidItemLen()));
  bo.setLeft(bo.getLeft() * dScale);
  bo.setTop(bo.getTop() * dScale);
  bo.setWidth(bo.getWidth() * dScale);
  bo.setHeight(bo.getHeight() * dScale);
  final BaseRenderer br=lirh.getRenderer();
  br.renderLegendGraphic(ipr,lg,fPaletteEntry,bo);
  final TextRenderEvent tre=(TextRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),TextRenderEvent.class);
  double dLaAngle=la.getCaption().getFont().getRotation();
  if (isRightToLeft()) {
    dLaAngle=-dLaAngle;
  }
  double dDeltaHeight=0;
  if (dLaAngle > 0 && dLaAngle < 90) {
    dDeltaHeight=(bo.getHeight() + dFullHeight - dItemHeight) / 2;
  }
 else   if (dLaAngle < 0 && dLaAngle > -90) {
    dDeltaHeight=(bo.getHeight() - dFullHeight + dItemHeight) / 2;
  }
 else   if (dLaAngle == 0 || dLaAngle == 90 || dLaAngle == -90) {
    dDeltaHeight=bo.getHeight() / 2;
  }
  if (isRightToLeft()) {
    tre.setLocation(LocationImpl.create(dX + dColumnWidth - dLeftInset - 3 * dItemHeight / 2 - dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.LEFT);
  }
 else {
    tre.setLocation(LocationImpl.create(dX + dLeftInset + (3 * dItemHeight / 2)+ dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.RIGHT);
  }
  if (la.isVisible()) {
    tre.setLabel(la);
    tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  if (valueLa != null) {
    final double dValueWidth=dColumnWidth - 2 * dLeftInset;
    Label tmpLa=LabelImpl.copyInstance(valueLa);
    TextAlignment ta=TextAlignmentImpl.create();
    ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    tre.setBlockAlignment(ta);
    tre.setBlockBounds(BoundsImpl.create(dX + dLeftInset + 1,dY + dFullHeight + 1,dValueWidth - 2,dExtraHeight - 1));
    tre.setLabel(tmpLa);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  la.getCaption().setValue(lih.getItemText());
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList elTriggers=lg.getTriggers();
    Location[] loaHotspot=new Location[4];
    loaHotspot[0]=LocationImpl.create(dX + 1,dY + 1);
    loaHotspot[1]=LocationImpl.create(dX + dColumnWidth - 1,dY + 1);
    loaHotspot[2]=LocationImpl.create(dX + dColumnWidth - 1,dY + dFullHeight + dExtraHeight - 1);
    loaHotspot[3]=LocationImpl.create(dX + 1,dY + dFullHeight + dExtraHeight - 1);
    Trigger buildinTg=null;
    if (cm.getInteractivity() != null) {
      boolean customed=false;
switch (cm.getInteractivity().getLegendBehavior().getValue()) {
case LegendBehaviorType.HIGHLIGHT_SERIE:
        for (Iterator itr=elTriggers.iterator(); itr.hasNext(); ) {
          tg=(Trigger)itr.next();
          if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.HIGHLIGHT_LITERAL) {
            customed=true;
          }
        }
      if (!customed) {
        buildinTg=TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL,ActionImpl.create(ActionType.HIGHLIGHT_LITERAL,SeriesValueImpl.create(String.valueOf(se.getSeriesIdentifier()))));
      }
    break;
case LegendBehaviorType.TOGGLE_SERIE_VISIBILITY:
  for (Iterator itr=elTriggers.iterator(); itr.hasNext(); ) {
    tg=(Trigger)itr.next();
    if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.TOGGLE_VISIBILITY_LITERAL) {
      customed=true;
    }
  }
if (!customed) {
  buildinTg=TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL,ActionImpl.create(ActionType.TOGGLE_VISIBILITY_LITERAL,SeriesValueImpl.create(String.valueOf(se.getSeriesIdentifier()))));
}
break;
case LegendBehaviorType.NONE:
break;
}
}
if (!elTriggers.isEmpty() || buildinTg != null) {
final StructureSource source;
if (this.cm.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL) {
final DataPointHints dph=new DataPointHints(la,null,null,null,null,null,null,null,null,dataIndex,null,0,null);
source=WrappedStructureSource.createSeriesDataPoint(se,dph);
}
 else {
source=StructureSource.createSeries(se);
}
final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(source,InteractionEvent.class);
for (int t=0; t < elTriggers.size(); t++) {
tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
processTrigger(tg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(tg);
}
if (buildinTg != null) {
processTrigger(buildinTg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(buildinTg);
}
final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(source,PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
ipr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ITEM,lerh);
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ENTRY,la);
}","/** 
 * Internally provided to render a single legend entry
 * @param ipr
 * @param lg
 * @param la
 * @param dX
 * @param dY
 * @param dW
 * @param dItemHeight
 * @param dLeftInset
 * @param dHorizontalSpacing
 * @param se
 * @param fPaletteEntry
 * @param lirh
 * @param i data row index
 * @throws ChartException
 */
protected final void renderLegendItem(IPrimitiveRenderer ipr,Legend lg,Label la,Label valueLa,LegendItemHints lih,double dX,double dY,double dItemHeight,double dColumnWidth,double dLeftInset,double dHorizontalSpacing,Fill fPaletteEntry,LegendItemRenderingHints lirh,double dScale) throws ChartException {
  double dFullHeight=lih.getItemHeight();
  double dExtraHeight=lih.getValueHeight();
  Series se=lih.getSeries();
  int dataIndex=lih.getIndex();
  if (la != null && la.getCaption() != null && valueLa != null && valueLa.getCaption() != null) {
    valueLa.getCaption().setFont(la.getCaption().getFont());
    valueLa.getCaption().setColor(la.getCaption().getColor());
  }
  LegendEntryRenderingHints lerh=new LegendEntryRenderingHints(la,valueLa,dataIndex,fPaletteEntry);
  ScriptHandler sh=getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ENTRY,la);
  final Bounds bo=lirh.getLegendGraphicBounds();
  if (isRightToLeft()) {
    bo.setLeft((dX + dColumnWidth - dLeftInset - 1 - 3 * dItemHeight / 2) / dScale);
  }
 else {
    bo.setLeft((dX + dLeftInset + 1) / dScale);
  }
  bo.setTop((dY + 1 + (dFullHeight - dItemHeight) / 2) / dScale);
  bo.setWidth((3 * dItemHeight / 2) / dScale);
  bo.setHeight((dItemHeight - 2) / dScale);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ITEM,lerh);
  la.getCaption().setValue(EllipsisHelper.ellipsisString(lih.getItemText(),lih.getValidItemLen()));
  ITextMetrics itm=xs.getTextMetrics(la);
  itm.reuse(la,lg.getWrappingSize());
  itm.dispose();
  bo.setLeft(bo.getLeft() * dScale);
  bo.setTop(bo.getTop() * dScale);
  bo.setWidth(bo.getWidth() * dScale);
  bo.setHeight(bo.getHeight() * dScale);
  final BaseRenderer br=lirh.getRenderer();
  br.renderLegendGraphic(ipr,lg,fPaletteEntry,bo);
  final TextRenderEvent tre=(TextRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),TextRenderEvent.class);
  double dLaAngle=la.getCaption().getFont().getRotation();
  if (isRightToLeft()) {
    dLaAngle=-dLaAngle;
  }
  double dDeltaHeight=0;
  if (dLaAngle > 0 && dLaAngle < 90) {
    dDeltaHeight=(bo.getHeight() + dFullHeight - dItemHeight) / 2;
  }
 else   if (dLaAngle < 0 && dLaAngle > -90) {
    dDeltaHeight=(bo.getHeight() - dFullHeight + dItemHeight) / 2;
  }
 else   if (dLaAngle == 0 || dLaAngle == 90 || dLaAngle == -90) {
    dDeltaHeight=bo.getHeight() / 2;
  }
  if (isRightToLeft()) {
    tre.setLocation(LocationImpl.create(dX + dColumnWidth - dLeftInset - 3 * dItemHeight / 2 - dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.LEFT);
  }
 else {
    tre.setLocation(LocationImpl.create(dX + dLeftInset + (3 * dItemHeight / 2)+ dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.RIGHT);
  }
  if (la.isVisible()) {
    tre.setLabel(la);
    tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  if (valueLa != null) {
    final double dValueWidth=dColumnWidth - 2 * dLeftInset;
    Label tmpLa=LabelImpl.copyInstance(valueLa);
    TextAlignment ta=TextAlignmentImpl.create();
    ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    tre.setBlockAlignment(ta);
    tre.setBlockBounds(BoundsImpl.create(dX + dLeftInset + 1,dY + dFullHeight + 1,dValueWidth - 2,dExtraHeight - 1));
    tre.setLabel(tmpLa);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  la.getCaption().setValue(lih.getItemText());
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList elTriggers=lg.getTriggers();
    Location[] loaHotspot=new Location[4];
    loaHotspot[0]=LocationImpl.create(dX + 1,dY + 1);
    loaHotspot[1]=LocationImpl.create(dX + dColumnWidth - 1,dY + 1);
    loaHotspot[2]=LocationImpl.create(dX + dColumnWidth - 1,dY + dFullHeight + dExtraHeight - 1);
    loaHotspot[3]=LocationImpl.create(dX + 1,dY + dFullHeight + dExtraHeight - 1);
    Trigger buildinTg=null;
    if (cm.getInteractivity() != null) {
      boolean customed=false;
switch (cm.getInteractivity().getLegendBehavior().getValue()) {
case LegendBehaviorType.HIGHLIGHT_SERIE:
        for (Iterator itr=elTriggers.iterator(); itr.hasNext(); ) {
          tg=(Trigger)itr.next();
          if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.HIGHLIGHT_LITERAL) {
            customed=true;
          }
        }
      if (!customed) {
        buildinTg=TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL,ActionImpl.create(ActionType.HIGHLIGHT_LITERAL,SeriesValueImpl.create(String.valueOf(se.getSeriesIdentifier()))));
      }
    break;
case LegendBehaviorType.TOGGLE_SERIE_VISIBILITY:
  for (Iterator itr=elTriggers.iterator(); itr.hasNext(); ) {
    tg=(Trigger)itr.next();
    if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.TOGGLE_VISIBILITY_LITERAL) {
      customed=true;
    }
  }
if (!customed) {
  buildinTg=TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL,ActionImpl.create(ActionType.TOGGLE_VISIBILITY_LITERAL,SeriesValueImpl.create(String.valueOf(se.getSeriesIdentifier()))));
}
break;
case LegendBehaviorType.NONE:
break;
}
}
if (!elTriggers.isEmpty() || buildinTg != null) {
final StructureSource source;
if (this.cm.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL) {
final DataPointHints dph=new DataPointHints(la,null,null,null,null,null,null,null,null,dataIndex,null,0,null);
source=WrappedStructureSource.createSeriesDataPoint(se,dph);
}
 else {
source=StructureSource.createSeries(se);
}
final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(source,InteractionEvent.class);
for (int t=0; t < elTriggers.size(); t++) {
tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
processTrigger(tg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(tg);
}
if (buildinTg != null) {
processTrigger(buildinTg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(buildinTg);
}
final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(source,PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
ipr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ITEM,lerh);
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ENTRY,la);
}",0.9934816208588132
71334,"public void handleEvent(Event event){
  if (event.widget.equals(fdcFont)) {
    getLegend().getText().setFont((FontDefinition)((Object[])event.data)[0]);
    getLegend().getText().setColor((ColorDefinition)((Object[])event.data)[1]);
  }
 else   if (event.widget.equals(fccShadow)) {
    getLegend().getClientArea().setShadowColor((ColorDefinition)event.data);
  }
 else   if (event.widget.equals(fccBackground)) {
    getLegend().getClientArea().setBackground((ColorDefinition)event.data);
  }
 else   if (event.widget.equals(icText)) {
    getLegend().getClientArea().setInsets((Insets)event.data);
  }
 else   if (event.widget.equals(outlineText)) {
switch (event.type) {
case LineAttributesComposite.STYLE_CHANGED_EVENT:
      getLegend().getClientArea().getOutline().setStyle((LineStyle)event.data);
    break;
case LineAttributesComposite.WIDTH_CHANGED_EVENT:
  getLegend().getClientArea().getOutline().setThickness(((Integer)event.data).intValue());
break;
case LineAttributesComposite.COLOR_CHANGED_EVENT:
getLegend().getClientArea().getOutline().setColor((ColorDefinition)event.data);
break;
case LineAttributesComposite.VISIBILITY_CHANGED_EVENT:
getLegend().getClientArea().getOutline().setVisible(((Boolean)event.data).booleanValue());
break;
}
}
 else if (event.widget.equals(lineSeparator)) {
switch (event.type) {
case LineAttributesComposite.STYLE_CHANGED_EVENT:
getLegend().getSeparator().setStyle((LineStyle)event.data);
break;
case LineAttributesComposite.WIDTH_CHANGED_EVENT:
getLegend().getSeparator().setThickness(((Integer)event.data).intValue());
break;
case LineAttributesComposite.COLOR_CHANGED_EVENT:
getLegend().getSeparator().setColor((ColorDefinition)event.data);
break;
case LineAttributesComposite.VISIBILITY_CHANGED_EVENT:
getLegend().getSeparator().setVisible(((Boolean)event.data).booleanValue());
break;
}
}
 else if (event.widget.equals(btnFormatSpecifier)) {
FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),getChart().getLegend().getFormatSpecifier(),Messages.getString(""String_Node_Str""));
if (editor.open() == Window.OK) {
getChart().getLegend().setFormatSpecifier(editor.getFormatSpecifier());
fsp.updatePreview(editor.getFormatSpecifier());
}
}
}","public void handleEvent(Event event){
  if (event.widget.equals(fdcFont)) {
    getLegend().getText().setFont((FontDefinition)((Object[])event.data)[0]);
    getLegend().getText().setColor((ColorDefinition)((Object[])event.data)[1]);
  }
 else   if (event.widget == spnEllipsis) {
    getLegend().setEllipsis(spnEllipsis.getSelection());
  }
 else   if (event.widget.equals(fccShadow)) {
    getLegend().getClientArea().setShadowColor((ColorDefinition)event.data);
  }
 else   if (event.widget.equals(fccBackground)) {
    getLegend().getClientArea().setBackground((ColorDefinition)event.data);
  }
 else   if (event.widget.equals(icText)) {
    getLegend().getClientArea().setInsets((Insets)event.data);
  }
 else   if (event.widget.equals(outlineText)) {
switch (event.type) {
case LineAttributesComposite.STYLE_CHANGED_EVENT:
      getLegend().getClientArea().getOutline().setStyle((LineStyle)event.data);
    break;
case LineAttributesComposite.WIDTH_CHANGED_EVENT:
  getLegend().getClientArea().getOutline().setThickness(((Integer)event.data).intValue());
break;
case LineAttributesComposite.COLOR_CHANGED_EVENT:
getLegend().getClientArea().getOutline().setColor((ColorDefinition)event.data);
break;
case LineAttributesComposite.VISIBILITY_CHANGED_EVENT:
getLegend().getClientArea().getOutline().setVisible(((Boolean)event.data).booleanValue());
break;
}
}
 else if (event.widget.equals(lineSeparator)) {
switch (event.type) {
case LineAttributesComposite.STYLE_CHANGED_EVENT:
getLegend().getSeparator().setStyle((LineStyle)event.data);
break;
case LineAttributesComposite.WIDTH_CHANGED_EVENT:
getLegend().getSeparator().setThickness(((Integer)event.data).intValue());
break;
case LineAttributesComposite.COLOR_CHANGED_EVENT:
getLegend().getSeparator().setColor((ColorDefinition)event.data);
break;
case LineAttributesComposite.VISIBILITY_CHANGED_EVENT:
getLegend().getSeparator().setVisible(((Boolean)event.data).booleanValue());
break;
}
}
 else if (event.widget.equals(btnFormatSpecifier)) {
FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),getChart().getLegend().getFormatSpecifier(),Messages.getString(""String_Node_Str""));
if (editor.open() == Window.OK) {
getChart().getLegend().setFormatSpecifier(editor.getFormatSpecifier());
fsp.updatePreview(editor.getFormatSpecifier());
}
}
}",0.9770723104056436
71335,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_BLOCK);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  Group grpTxtArea=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=7;
    layout.marginWidth=7;
    grpTxtArea.setLayout(layout);
    grpTxtArea.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpTxtArea.setText(Messages.getString(""String_Node_Str""));
  }
  boolean isByCategory=getChart().getLegend().getItemType() != LegendItemType.SERIES_LITERAL;
  boolean containsYOG=ChartUtil.containsYOptionalGrouping(getChart());
  Label lblFormat=new Label(grpTxtArea,SWT.NONE);
{
    lblFormat.setText(Messages.getString(""String_Node_Str""));
    lblFormat.setEnabled(isByCategory || containsYOG);
  }
  Composite cmpFormat=new Composite(grpTxtArea,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    cmpFormat.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    cmpFormat.setEnabled(isByCategory || containsYOG);
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getChart().getLegend().getFormatSpecifier());
    fsp.setEnabled(isByCategory || containsYOG);
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.widthHint=20;
    gd.heightHint=20;
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setImage(UIHelper.getImage(""String_Node_Str""));
    btnFormatSpecifier.getImage().setBackground(btnFormatSpecifier.getBackground());
    btnFormatSpecifier.addListener(SWT.Selection,this);
    btnFormatSpecifier.setEnabled(isByCategory || containsYOG);
  }
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getText().getFont(),getLegend().getText().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_HORIZONTAL);
  gdFDCFont.heightHint=fdcFont.getPreferredSize().y;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  Label lblShadow=new Label(grpTxtArea,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getClientArea().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Label lblBackground=new Label(grpTxtArea,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpTxtArea,SWT.DROP_DOWN | SWT.READ_ONLY,getContext(),getChart().getLegend().getClientArea().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    fccBackground.setLayoutData(gridData);
    fccBackground.addListener(this);
  }
  Group grpOutline=new Group(grpTxtArea,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.horizontalSpan=2;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getLegend().getClientArea().getOutline(),true,true,true);
  outlineText.addListener(this);
  outlineText.setAttributesEnabled(true);
  icText=new InsetsComposite(grpTxtArea,SWT.NONE,getLegend().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.horizontalSpan=2;
  icText.setLayoutData(gdInsets);
  icText.addListener(this);
  Group grpSeparator=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=5;
    grpSeparator.setLayout(layout);
    grpSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSeparator.setText(Messages.getString(""String_Node_Str""));
  }
  lineSeparator=new LineAttributesComposite(grpSeparator,SWT.NONE,getContext(),getLegend().getSeparator(),true,true,true);
{
    lineSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    lineSeparator.addListener(this);
    lineSeparator.setAttributesEnabled(true);
  }
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_BLOCK);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  Group grpTxtArea=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=7;
    layout.marginWidth=7;
    grpTxtArea.setLayout(layout);
    grpTxtArea.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpTxtArea.setText(Messages.getString(""String_Node_Str""));
  }
  boolean isByCategory=getChart().getLegend().getItemType() != LegendItemType.SERIES_LITERAL;
  boolean containsYOG=ChartUtil.containsYOptionalGrouping(getChart());
  Label lblFormat=new Label(grpTxtArea,SWT.NONE);
{
    lblFormat.setText(Messages.getString(""String_Node_Str""));
    lblFormat.setEnabled(isByCategory || containsYOG);
  }
  Composite cmpFormat=new Composite(grpTxtArea,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    cmpFormat.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    cmpFormat.setEnabled(isByCategory || containsYOG);
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getChart().getLegend().getFormatSpecifier());
    fsp.setEnabled(isByCategory || containsYOG);
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.widthHint=20;
    gd.heightHint=20;
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setImage(UIHelper.getImage(""String_Node_Str""));
    btnFormatSpecifier.getImage().setBackground(btnFormatSpecifier.getBackground());
    btnFormatSpecifier.addListener(SWT.Selection,this);
    btnFormatSpecifier.setEnabled(isByCategory || containsYOG);
  }
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getText().getFont(),getLegend().getText().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_HORIZONTAL);
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  spnEllipsis=new Spinner(grpTxtArea,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    spnEllipsis.setLayoutData(gd);
    spnEllipsis.setMinimum(0);
    spnEllipsis.setSelection(getLegend().getEllipsis());
    spnEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
    spnEllipsis.addListener(SWT.Selection,this);
  }
  Label lblShadow=new Label(grpTxtArea,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getClientArea().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Label lblBackground=new Label(grpTxtArea,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpTxtArea,SWT.DROP_DOWN | SWT.READ_ONLY,getContext(),getChart().getLegend().getClientArea().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    fccBackground.setLayoutData(gridData);
    fccBackground.addListener(this);
  }
  Group grpOutline=new Group(grpTxtArea,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.horizontalSpan=2;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getLegend().getClientArea().getOutline(),true,true,true);
  outlineText.addListener(this);
  outlineText.setAttributesEnabled(true);
  icText=new InsetsComposite(grpTxtArea,SWT.NONE,getLegend().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.horizontalSpan=2;
  icText.setLayoutData(gdInsets);
  icText.addListener(this);
  Group grpSeparator=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=5;
    grpSeparator.setLayout(layout);
    grpSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSeparator.setText(Messages.getString(""String_Node_Str""));
  }
  lineSeparator=new LineAttributesComposite(grpSeparator,SWT.NONE,getContext(),getLegend().getSeparator(),true,true,true);
{
    lineSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    lineSeparator.addListener(this);
    lineSeparator.setAttributesEnabled(true);
  }
  return cmpContent;
}",0.9535215283718278
71336,"public boolean add(Object o) throws IOException {
  writeObject(o);
  size++;
  if (size % bufferSize == 0) {
    segmentOffsets.add(new Integer(getOffset()));
  }
  return true;
}","public boolean add(Object o) throws IOException {
  if (size >= currentCacheStartIndex && size < (currentCacheStartIndex + bufferSize)) {
    buffer[size - currentCacheStartIndex]=o;
  }
  writeObject(o);
  size++;
  if (size % bufferSize == 0) {
    segmentOffsets.add(new Integer(getOffset()));
  }
  return true;
}",0.7243460764587525
71337,"/** 
 * @throws IOException
 */
public BaseDiskArray() throws IOException {
  this.currentCacheStartIndex=-1;
  this.size=0;
  this.buffer=new Object[bufferSize];
  this.segmentOffsets=new ArrayList();
  this.segmentOffsets.add(new Integer(0));
  createRandomAccessFile();
}","/** 
 * @throws IOException
 */
public BaseDiskArray() throws IOException {
  this.currentCacheStartIndex=0;
  this.size=0;
  this.buffer=new Object[bufferSize];
  this.segmentOffsets=new ArrayList();
  this.segmentOffsets.add(new Integer(0));
  createRandomAccessFile();
}",0.9945155393053016
71338,"public Object get(int index) throws IOException {
  RangeCheck(index);
  if (currentCacheStartIndex < 0 || index < currentCacheStartIndex || index > (currentCacheStartIndex + bufferSize - 1)) {
    int readSize=bufferSize;
    if ((index / bufferSize) == segmentOffsets.size() - 1) {
      readSize=size % bufferSize;
    }
    currentCacheStartIndex=(index / bufferSize) * bufferSize;
    readObjects(getSegmentOffset(index),readSize);
  }
  return buffer[index % bufferSize];
}","public Object get(int index) throws IOException {
  RangeCheck(index);
  if (index < currentCacheStartIndex || index > (currentCacheStartIndex + bufferSize - 1)) {
    int readSize=bufferSize;
    if ((index / bufferSize) == segmentOffsets.size() - 1) {
      readSize=size % bufferSize;
    }
    currentCacheStartIndex=(index / bufferSize) * bufferSize;
    readObjects(getSegmentOffset(index),readSize);
  }
  return buffer[index % bufferSize];
}",0.9504310344827588
71339,"public static Image getImage(IImageContent content){
  Image image=null;
  try {
    String uri=content.getURI();
    String mimeType=content.getMIMEType();
    String extension=content.getExtension();
    if (FlashFile.isFlash(mimeType,uri,extension)) {
      return null;
    }
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
      ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
    URL url=design.findResource(uri,IResourceLocator.IMAGE);
  InputStream in=url.openStream();
try {
  byte[] buffer;
  if (SvgFile.isSvg(content.getURI())) {
    buffer=SvgFile.transSvgToArray(in);
  }
 else {
    ArrayList<Byte> bytes=new ArrayList<Byte>();
    int data=in.read();
    while (data != -1) {
      bytes.add((byte)data);
      data=in.read();
    }
    buffer=new byte[bytes.size()];
    for (int i=0; i < buffer.length; i++) {
      buffer[i]=bytes.get(i);
    }
  }
  image=Image.getInstance(buffer);
}
 catch (Exception ex) {
  logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
  in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
byte[] data=content.getData();
in=new ByteArrayInputStream(data);
if (SvgFile.isSvg(mimeType,uri,extension)) data=SvgFile.transSvgToArray(in);
image=Image.getInstance(data);
break;
case IImageContent.IMAGE_URL:
if (SvgFile.isSvg(uri)) {
image=Image.getInstance(SvgFile.transSvgToArray(uri));
}
 else {
image=Image.getInstance(new URL(content.getURI()));
}
break;
default :
assert(false);
}
}
 catch (Exception e) {
logger.log(Level.SEVERE,e.getLocalizedMessage());
}
return image;
}","public static Image getImage(IImageContent content){
  Image image=null;
  try {
    String uri=content.getURI();
    String mimeType=content.getMIMEType();
    String extension=content.getExtension();
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
      ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
    URL url=design.findResource(uri,IResourceLocator.IMAGE);
  InputStream in=url.openStream();
try {
  byte[] buffer;
  if (SvgFile.isSvg(content.getURI())) {
    buffer=SvgFile.transSvgToArray(in);
  }
 else {
    ArrayList<Byte> bytes=new ArrayList<Byte>();
    int data=in.read();
    while (data != -1) {
      bytes.add((byte)data);
      data=in.read();
    }
    buffer=new byte[bytes.size()];
    for (int i=0; i < buffer.length; i++) {
      buffer[i]=bytes.get(i);
    }
  }
  image=Image.getInstance(buffer);
}
 catch (Exception ex) {
  logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
  in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
byte[] data=content.getData();
in=new ByteArrayInputStream(data);
if (SvgFile.isSvg(mimeType,uri,extension)) data=SvgFile.transSvgToArray(in);
image=Image.getInstance(data);
break;
case IImageContent.IMAGE_URL:
if (SvgFile.isSvg(uri)) {
image=Image.getInstance(SvgFile.transSvgToArray(uri));
}
 else {
image=Image.getInstance(new URL(content.getURI()));
}
break;
default :
assert(false);
}
}
 catch (Exception e) {
logger.log(Level.SEVERE,e.getLocalizedMessage());
}
return image;
}",0.97530082330589
71340,"/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.PARAMETER_IS_NULL_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    try {
      Object result=executionContext.evaluate(source);
      if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
        throw new ParameterValidationException(MessageConstants.PARAMETER_SCRIPT_VALIDATION_EXCEPTION,new String[]{paramName});
      }
    }
 catch (    ParameterValidationException pve) {
      throw pve;
    }
catch (    BirtException ex) {
      throw new ParameterValidationException(ex);
    }
  }
  String paramType=paramHandle.getParamType();
  if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
    if (paramValue instanceof Object[]) {
      boolean isValid=true;
      Object[] paramValueList=(Object[])paramValue;
      for (int i=0; i < paramValueList.length; i++) {
        if (paramValueList[i] != null) {
          if (!validateParameterValueType(paramName,paramValueList[i],type,paramHandle)) {
            isValid=false;
          }
        }
      }
      return isValid;
    }
    throw new ParameterValidationException(MessageConstants.PARAMETER_TYPE_IS_INVALID_EXCEPTION,new String[]{paramName,""String_Node_Str"",paramValue.getClass().getName()});
  }
 else {
    return validateParameterValueType(paramName,paramValue,type,paramHandle);
  }
}","/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.PARAMETER_IS_NULL_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    try {
      Object result=executionContext.evaluate(source);
      if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
        throw new ParameterValidationException(MessageConstants.PARAMETER_VALIDATION_SCRIPT_RESULT_ERROR,new String[]{paramName});
      }
    }
 catch (    ParameterValidationException pve) {
      throw pve;
    }
catch (    BirtException ex) {
      throw new ParameterValidationException(ex);
    }
  }
  String paramType=paramHandle.getParamType();
  if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
    if (paramValue instanceof Object[]) {
      boolean isValid=true;
      Object[] paramValueList=(Object[])paramValue;
      for (int i=0; i < paramValueList.length; i++) {
        if (paramValueList[i] != null) {
          if (!validateParameterValueType(paramName,paramValueList[i],type,paramHandle)) {
            isValid=false;
          }
        }
      }
      return isValid;
    }
    throw new ParameterValidationException(MessageConstants.PARAMETER_TYPE_IS_INVALID_EXCEPTION,new String[]{paramName,""String_Node_Str"",paramValue.getClass().getName()});
  }
 else {
    return validateParameterValueType(paramName,paramValue,type,paramHandle);
  }
}",0.9932885906040269
71341,"private void switchDataTable(){
  if (isCubeMode()) {
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      ColumnBindingInfo[] headers=null;
      List dataList=null;
      try {
        headers=getDataServiceProvider().getPreviewHeadersInfo();
        dataList=getDataServiceProvider().getPreviewData();
        getDataServiceProvider().setPredefinedExpressions(headers);
        final ColumnBindingInfo[] headerInfo=headers;
        final List data=dataList;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
          }
        }
);
      }
 catch (      Exception e) {
        final ColumnBindingInfo[] headerInfo=headers;
        final List data=dataList;
        final String msg=e.getMessage();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
            WizardBase.showException(msg);
          }
        }
);
      }
    }
  }
;
  new Thread(runnable).start();
}","private void switchDataTable(){
  if (isCubeMode()) {
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      if (bIsGettingPreviewData) {
        return;
      }
      ColumnBindingInfo[] headers=null;
      List dataList=null;
      try {
        headers=getDataServiceProvider().getPreviewHeadersInfo();
        bIsGettingPreviewData=true;
        dataList=getDataServiceProvider().getPreviewData();
        bIsGettingPreviewData=false;
        getDataServiceProvider().setPredefinedExpressions(headers);
        final ColumnBindingInfo[] headerInfo=headers;
        final List data=dataList;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
          }
        }
);
      }
 catch (      Exception e) {
        final ColumnBindingInfo[] headerInfo=headers;
        final List data=dataList;
        final String msg=e.getMessage();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
            WizardBase.showException(msg);
          }
        }
);
      }
    }
  }
;
  new Thread(runnable).start();
}",0.9416445623342176
71342,"/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.PARAMETER_IS_NULL_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    try {
      Object result=executionContext.evaluate(source);
      if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
        throw new ParameterValidationException(MessageConstants.PARAMETER_VALIDATION_SCRIPT_RESULT_ERROR,new String[]{paramName});
      }
    }
 catch (    ParameterValidationException pve) {
      throw pve;
    }
catch (    BirtException ex) {
      throw new ParameterValidationException(ex);
    }
  }
  String paramType=paramHandle.getParamType();
  if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
    if (paramValue instanceof Object[]) {
      boolean isValid=true;
      Object[] paramValueList=(Object[])paramValue;
      for (int i=0; i < paramValueList.length; i++) {
        if (paramValueList[i] != null) {
          if (!validateParameterValueType(paramName,paramValueList[i],type,paramHandle)) {
            isValid=false;
          }
        }
      }
      return isValid;
    }
    throw new ParameterValidationException(MessageConstants.PARAMETER_TYPE_IS_INVALID_EXCEPTION,new String[]{paramName,""String_Node_Str"",paramValue.getClass().getName()});
  }
 else {
    return validateParameterValueType(paramName,paramValue,type,paramHandle);
  }
}","/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.PARAMETER_IS_NULL_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    try {
      Object result=executionContext.evaluate(source);
      if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
        throw new ParameterValidationException(MessageConstants.PARAMETER_VALIDATION_FAILURE,new String[]{paramName});
      }
    }
 catch (    ParameterValidationException pve) {
      throw pve;
    }
catch (    BirtException ex) {
      throw new ParameterValidationException(ex);
    }
  }
  String paramType=paramHandle.getParamType();
  if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
    if (paramValue instanceof Object[]) {
      boolean isValid=true;
      Object[] paramValueList=(Object[])paramValue;
      for (int i=0; i < paramValueList.length; i++) {
        if (paramValueList[i] != null) {
          if (!validateParameterValueType(paramName,paramValueList[i],type,paramHandle)) {
            isValid=false;
          }
        }
      }
      return isValid;
    }
    throw new ParameterValidationException(MessageConstants.PARAMETER_TYPE_IS_INVALID_EXCEPTION,new String[]{paramName,""String_Node_Str"",paramValue.getClass().getName()});
  }
 else {
    return validateParameterValueType(paramName,paramValue,type,paramHandle);
  }
}",0.9950174389636272
71343,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOrigin
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,AxisOrigin axisOrigin,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(dStep));
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(10));
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.setStep(new Integer(1));
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.iMinUnit=oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
        sc.oMinimumFixed=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
        sc.oMaximumFixed=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  sc.bLabelWithinAxes=ax.getModelAxis().isLabelWithinAxes();
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed || rtc.getScale() != null && rtc.getScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  sc.setData(dsi);
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOrigin
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,AxisOrigin axisOrigin,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(dStep));
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(10));
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.setStep(new Integer(1));
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.iMinUnit=oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
        sc.oMinimumFixed=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
        sc.oMaximumFixed=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  sc.bLabelWithinAxes=ax.getModelAxis().isLabelWithinAxes();
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  sc.setData(dsi);
  return sc;
}",0.9994328386425938
71344,"/** 
 * Computes min, max value, step size and step number of the Axis
 * @param oMinValue min value in data points. Double or CDateTime type.
 * @param oMaxValue max value in data points. Double or CDateTime type.
 */
public final void updateAxisMinMax(Object oMinValue,Object oMaxValue){
  if (rtc.getScale() != null && rtc.getScale().isShared()) {
    updateContext(rtc.getScale());
    return;
  }
  ScaleContext sct;
  if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    if ((iType & PERCENT) == PERCENT) {
      oMaximum=new Double(100);
      oMinimum=new Double(1);
      setStep(new Double(10));
      bMaximumFixed=true;
      bMinimumFixed=true;
      bStepFixed=true;
      return;
    }
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int iUnit=asInteger(oUnit);
    sct=new ScaleContext(iMarginPercent,iType,iUnit,oMinValue,oMaxValue,oStep);
  }
 else {
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
  if ((iType & DATE_TIME) == DATE_TIME) {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimumFixed,oMaximumFixed);
  }
 else {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimum,oMaximum);
  }
  sct.setFixedStep(bStepFixed,oStepNumber);
  sct.computeMinMax();
  updateContext(sct);
  tmpSC=sct;
  updateSharedScaleContext(rtc,iType,tmpSC);
}","/** 
 * Computes min, max value, step size and step number of the Axis
 * @param oMinValue min value in data points. Double or CDateTime type.
 * @param oMaxValue max value in data points. Double or CDateTime type.
 */
public final void updateAxisMinMax(Object oMinValue,Object oMaxValue){
  if (rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
    updateContext(rtc.getSharedScale().getScaleContext());
    return;
  }
  ScaleContext sct;
  if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    if ((iType & PERCENT) == PERCENT) {
      oMaximum=new Double(100);
      oMinimum=new Double(1);
      setStep(new Double(10));
      bMaximumFixed=true;
      bMinimumFixed=true;
      bStepFixed=true;
      return;
    }
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int iUnit=asInteger(oUnit);
    sct=new ScaleContext(iMarginPercent,iType,iUnit,oMinValue,oMaxValue,oStep);
  }
 else {
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
  if ((iType & DATE_TIME) == DATE_TIME) {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimumFixed,oMaximumFixed);
  }
 else {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimum,oMaximum);
  }
  sct.setFixedStep(bStepFixed,oStepNumber);
  sct.computeMinMax();
  updateContext(sct);
  tmpSC=sct;
  updateSharedScaleContext(rtc,iType,tmpSC);
}",0.984263233190272
71345,"/** 
 * Calculates visibility for axis labels.
 * @param xs
 * @param la
 * @param iLabelLocation
 * @return
 * @throws ChartException
 */
final protected void checkTickLabelsVisibility(IDisplayServer xs,Label la,int iLabelLocation) throws ChartException {
  hmComputedLabelText=new HashMap<Integer,String>();
  boolean vis=la.isSetVisible() && la.isVisible();
  if (!vis && rtc.getScale() != null) {
    vis=true;
  }
  boolean staggerEnabled=isAxisLabelStaggered();
  this.staggeredHelper=StaggeredHelper.createInstance(staggerEnabled,atcTickCoordinates.size(),iLabelShowingInterval);
  this.labelVisHelper=LabelVisibleHelper.createInstance(vis,isCategoryScale(),atcTickCoordinates.size(),iLabelShowingInterval);
  if (!vis || !isCategoryScale()) {
    return;
  }
  DataSetIterator dsi=getData();
  dsi.reset();
  final int iDateTimeUnit=(iType == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
  dsi.reset();
  CateLabVisTester tester=this.createCateLabVisTester(xs,la,iLabelLocation);
  EllipsisHelper eHelper=new EllipsisHelper(tester,la.getEllipsis());
  int start_id=isTickBetweenCategories() ? 0 : 1;
  RotatedRectangle rrPrev[]=new RotatedRectangle[2];
  double dStep=Math.abs(atcTickCoordinates.getStep() * dZoomFactor);
  int indexStep=dStep > 1 ? 1 : (int)(1d / dStep);
  for (int i=start_id; i < atcTickCoordinates.size() - 1; i+=indexStep) {
    Object oValue=null;
    if (dsi.hasNext()) {
      oValue=dsi.next();
    }
    if (labelVisHelper.shouldTickLabelVisible(i)) {
      double x=0, y=0;
      String sText=formatCategoryValue(iType,oValue,iDateTimeUnit);
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      RotatedRectangle rrCurr=null;
      int arrayIndex=isAxisLabelStaggered() && isTickLabelStaggered(i) ? 1 : 0;
      boolean bVis;
      if (rrPrev[arrayIndex] == null) {
        rrCurr=computePolygon(xs,iLabelLocation,la,x,y);
        bVis=true;
      }
 else {
        tester.setFPara(rrPrev[arrayIndex],x,y);
        bVis=eHelper.checkLabelEllipsis(sText,null);
        rrCurr=tester.getCurrentRR();
      }
      if (bVis) {
        labelVisHelper.addVisible(i);
        rrPrev[arrayIndex]=rrCurr;
        hmComputedLabelText.put(i,la.getCaption().getValue());
      }
    }
  }
}","/** 
 * Calculates visibility for axis labels.
 * @param xs
 * @param la
 * @param iLabelLocation
 * @return
 * @throws ChartException
 */
final protected void checkTickLabelsVisibility(IDisplayServer xs,Label la,int iLabelLocation) throws ChartException {
  hmComputedLabelText=new HashMap<Integer,String>();
  boolean vis=la.isSetVisible() && la.isVisible();
  if (!vis && rtc.getSharedScale() != null) {
    vis=true;
  }
  boolean staggerEnabled=isAxisLabelStaggered();
  this.staggeredHelper=StaggeredHelper.createInstance(staggerEnabled,atcTickCoordinates.size(),iLabelShowingInterval);
  this.labelVisHelper=LabelVisibleHelper.createInstance(vis,isCategoryScale(),atcTickCoordinates.size(),iLabelShowingInterval);
  if (!vis || !isCategoryScale()) {
    return;
  }
  DataSetIterator dsi=getData();
  dsi.reset();
  final int iDateTimeUnit=(iType == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
  dsi.reset();
  CateLabVisTester tester=this.createCateLabVisTester(xs,la,iLabelLocation);
  EllipsisHelper eHelper=new EllipsisHelper(tester,la.getEllipsis());
  int start_id=isTickBetweenCategories() ? 0 : 1;
  RotatedRectangle rrPrev[]=new RotatedRectangle[2];
  double dStep=Math.abs(atcTickCoordinates.getStep() * dZoomFactor);
  int indexStep=dStep > 1 ? 1 : (int)(1d / dStep);
  for (int i=start_id; i < atcTickCoordinates.size() - 1; i+=indexStep) {
    Object oValue=null;
    if (dsi.hasNext()) {
      oValue=dsi.next();
    }
    if (labelVisHelper.shouldTickLabelVisible(i)) {
      double x=0, y=0;
      String sText=formatCategoryValue(iType,oValue,iDateTimeUnit);
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      RotatedRectangle rrCurr=null;
      int arrayIndex=isAxisLabelStaggered() && isTickLabelStaggered(i) ? 1 : 0;
      boolean bVis;
      if (rrPrev[arrayIndex] == null) {
        rrCurr=computePolygon(xs,iLabelLocation,la,x,y);
        bVis=true;
      }
 else {
        tester.setFPara(rrPrev[arrayIndex],x,y);
        bVis=eHelper.checkLabelEllipsis(sText,null);
        rrCurr=tester.getCurrentRR();
      }
      if (bVis) {
        labelVisHelper.addVisible(i);
        rrPrev[arrayIndex]=rrCurr;
        hmComputedLabelText.put(i,la.getCaption().getValue());
      }
    }
  }
}",0.9988095238095238
71346,"/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  dSeriesThickness=cwa.getPlot().getClientArea().isVisible() ? dSeriesThickness : 0;
  double dX=bo.getLeft() + insCA.getLeft();
  double dY=bo.getTop() + insCA.getTop();
  double dW=bo.getWidth() - insCA.getLeft() - insCA.getRight();
  double dH=bo.getHeight() - insCA.getTop() - insCA.getBottom();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    if (rtc.getScale() != null && rtc.getState(AutoScale.KEY_SHARED_MINMAX) != null) {
      dsi=new DataSetIterator(rtc.getState(AutoScale.KEY_SHARED_MINMAX),iAxisType);
    }
 else {
      dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
    }
    dsi.reverse(cwa.isReverseCategory());
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,BoundsImpl.create(dX,dY,dW,dH));
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=BoundsImpl.copyInstance(boPlotBackground);
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}","/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  dSeriesThickness=cwa.getPlot().getClientArea().isVisible() ? dSeriesThickness : 0;
  double dX=bo.getLeft() + insCA.getLeft();
  double dY=bo.getTop() + insCA.getTop();
  double dW=bo.getWidth() - insCA.getLeft() - insCA.getRight();
  double dH=bo.getHeight() - insCA.getTop() - insCA.getBottom();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    if (rtc.getSharedScale() != null) {
      dsi=rtc.getSharedScale().createDataSetIterator(iAxisType);
    }
 else {
      dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
    }
    dsi.reverse(cwa.isReverseCategory());
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,BoundsImpl.create(dX,dY,dW,dH));
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=BoundsImpl.copyInstance(boPlotBackground);
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}",0.98862039898848
71347,"private boolean isSharedScale(){
  return rtc.getScale() != null && rtc.getScale().isShared();
}","private boolean isSharedScale(){
  return rtc.getSharedScale() != null && rtc.getSharedScale().isShared();
}",0.9411764705882352
71348,"/** 
 * A default zero-arg public constructor used for object creation.
 */
public RunTimeContext(){
  stateStore=new HashMap();
}","/** 
 * A default zero-arg public constructor used for object creation.
 */
public RunTimeContext(){
  stateStore=new HashMap<Object,Object>(2);
}",0.9420289855072465
71349,"private ScaleContext createSharedScaleFromSampleData(){
  Double min=Double.MAX_VALUE, max=-Double.MAX_VALUE;
  SampleData sd=cm.getSampleData();
  if (sd == null || sd.getBaseSampleData().size() == 0 || sd.getOrthogonalSampleData().size() == 0) {
    return null;
  }
  OrthogonalSampleData osd=(OrthogonalSampleData)sd.getOrthogonalSampleData().get(0);
  String sData=osd.getDataSetRepresentation();
  List<Double> lData=parseSampleData(sData);
  if (lData == null) {
    return null;
  }
  for (int i=0; i < lData.size(); i++) {
    double v=lData.get(i);
    min=Math.min(min,v);
    max=Math.max(max,v);
  }
  return ScaleContext.createSimpleScale(min,max);
}","private SharedScaleContext createSharedScaleFromSampleData(){
  Double min=Double.MAX_VALUE, max=-Double.MAX_VALUE;
  SampleData sd=cm.getSampleData();
  if (sd == null || sd.getBaseSampleData().size() == 0 || sd.getOrthogonalSampleData().size() == 0) {
    return null;
  }
  OrthogonalSampleData osd=(OrthogonalSampleData)sd.getOrthogonalSampleData().get(0);
  String sData=osd.getDataSetRepresentation();
  List<Double> lData=parseSampleData(sData);
  if (lData == null) {
    return null;
  }
  for (int i=0; i < lData.size(); i++) {
    double v=lData.get(i);
    min=Math.min(min,v);
    max=Math.max(max,v);
  }
  return SharedScaleContext.createInstance(min,max);
}",0.9798055347793568
71350,"private void showChart(Dimension dSize){
  Bounds bo=BoundsImpl.create(0,0,dSize.width,dSize.height);
  bo.scale(72d / idr.getDisplayServer().getDpiResolution());
  idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
  Generator gr=Generator.instance();
  ChartAdapter.beginIgnoreNotifications();
  cm.clearSections(IConstants.RUN_TIME);
  cm.createSampleRuntimeSeries();
  ChartAdapter.endIgnoreNotifications();
  try {
    Chart cmRunTime=(Chart)EcoreUtil.copy(cm);
    removeScaleInfoForSample(cmRunTime);
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new BIRTDesignerMessageLookup(crii.getHandle()));
    rtc.setRightToLeft(crii.isLayoutDirectionRTL());
    rtc.setRightToLeftText(crii.getHandle().isDirectionRTL());
    rtc.setResourceFinder(crii);
    rtc.setExternalizer(crii);
    boolean bPlotChart=ChartXTabUtil.isPlotChart(crii.getHandle());
    if (bPlotChart) {
      rtc.setScale(createSharedScaleFromSampleData());
    }
    gr.render(idr,gr.build(idr.getDisplayServer(),cmRunTime,bo,null,rtc,new ChartReportStyleProcessor(crii.getHandle(),true)));
  }
 catch (  ChartException gex) {
    showException(gc,gex);
  }
}","private void showChart(Dimension dSize){
  Bounds bo=BoundsImpl.create(0,0,dSize.width,dSize.height);
  bo.scale(72d / idr.getDisplayServer().getDpiResolution());
  idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
  Generator gr=Generator.instance();
  ChartAdapter.beginIgnoreNotifications();
  cm.clearSections(IConstants.RUN_TIME);
  cm.createSampleRuntimeSeries();
  ChartAdapter.endIgnoreNotifications();
  try {
    Chart cmRunTime=(Chart)EcoreUtil.copy(cm);
    removeScaleInfoForSample(cmRunTime);
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new BIRTDesignerMessageLookup(crii.getHandle()));
    rtc.setRightToLeft(crii.isLayoutDirectionRTL());
    rtc.setRightToLeftText(crii.getHandle().isDirectionRTL());
    rtc.setResourceFinder(crii);
    rtc.setExternalizer(crii);
    boolean bPlotChart=ChartXTabUtil.isPlotChart(crii.getHandle());
    if (bPlotChart) {
      rtc.setSharedScale(createSharedScaleFromSampleData());
    }
    gr.render(idr,gr.build(idr.getDisplayServer(),cmRunTime,bo,null,rtc,new ChartReportStyleProcessor(crii.getHandle(),true)));
  }
 catch (  ChartException gex) {
    showException(gc,gex);
  }
}",0.9974937343358397
71351,"public void setModelObject(ExtendedItemHandle eih){
  handle=(ExtendedItemHandle)eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
  IReportItem item=getReportItem(handle);
  if (item == null) {
    return;
  }
  cm=(Chart)((ChartReportItemImpl)item).getProperty(ChartReportItemUtil.PROPERTY_CHART);
  setChartModelObject(item);
}","public void setModelObject(ExtendedItemHandle eih){
  handle=(ExtendedItemHandle)eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
  IReportItem item=getReportItem(handle);
  if (item == null) {
    return;
  }
  cm=(Chart)((ChartReportItemImpl)item).getProperty(ChartReportItemConstants.PROPERTY_CHART);
  setChartModelObject(item);
}",0.9628571428571427
71352,"@Override protected IDataRowExpressionEvaluator createEvaluator(IBaseResultSet set) throws ChartException {
  if (rtc.getScale() == null || !rtc.getScale().isShared()) {
    return super.createEvaluator(set);
  }
  final boolean bDatetypeAxis;
  if (cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)cm;
    Axis yAxis=cwa.getOrthogonalAxes(cwa.getBaseAxes()[0],true)[0];
    bDatetypeAxis=yAxis.getType() == AxisType.DATE_TIME_LITERAL;
  }
 else {
    bDatetypeAxis=false;
  }
  return new IDataRowExpressionEvaluator(){
    private int count=1;
    public void close(){
    }
    public Object evaluate(    String expression){
      return bDatetypeAxis ? Calendar.getInstance() : new Integer(1);
    }
    public Object evaluateGlobal(    String expression){
      return evaluate(expression);
    }
    public boolean first(){
      return true;
    }
    public boolean next(){
      return count-- > 0;
    }
  }
;
}","@Override protected IDataRowExpressionEvaluator createEvaluator(IBaseResultSet set) throws ChartException {
  if (rtc.getSharedScale() == null || !rtc.getSharedScale().isShared()) {
    return super.createEvaluator(set);
  }
  final boolean bDatetypeAxis;
  if (cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)cm;
    Axis yAxis=cwa.getOrthogonalAxes(cwa.getBaseAxes()[0],true)[0];
    bDatetypeAxis=yAxis.getType() == AxisType.DATE_TIME_LITERAL;
  }
 else {
    bDatetypeAxis=false;
  }
  return new IDataRowExpressionEvaluator(){
    private int count=1;
    public void close(){
    }
    public Object evaluate(    String expression){
      return bDatetypeAxis ? Calendar.getInstance() : new Integer(1);
    }
    public Object evaluateGlobal(    String expression){
      return evaluate(expression);
    }
    public boolean first(){
      return true;
    }
    public boolean next(){
      return count-- > 0;
    }
  }
;
}",0.9936575052854124
71353,"/** 
 * 1) Creates row wrapper. 2) For the null cell in the row wrapper, fills the responsible position with dummy cell or empty cell. 3) Updates the height of the row and the cells in the row.
 * @param rowArea current rowArea.
 */
private Row updateRow(RowArea rowArea,int specifiedHeight){
  int height=specifiedHeight;
  Row lastRow=(Row)rows.getCurrent();
  Row row=new Row(rowArea,startCol,endCol);
  for (int i=startCol; i <= endCol; i++) {
    CellArea upperCell=null;
    if (lastRow != null) {
      upperCell=lastRow.getCell(i);
    }
    if (upperCell != null && (upperCell.getRowSpan() > 1)) {
      DummyCell dummyCell=createDummyCell(upperCell);
      row.addArea(dummyCell);
      int delta=dummyCell.getDelta();
      if (dummyCell.getRowSpan() == 1) {
        height=Math.max(height,delta);
      }
      i=i + upperCell.getColSpan() - 1;
    }
 else {
      CellArea cell=row.getCell(i);
      if (cell == null) {
        if (unresolvedRow != null) {
          upperCell=unresolvedRow.getCell(i);
        }
        cell=createEmptyCell(upperCell,i,row,lastRow);
      }
      if (cell.getRowSpan() == 1) {
        height=Math.max(height,cell.getHeight());
      }
      i=i + cell.getColSpan() - 1;
    }
  }
  updateRowHeight(row,height);
  return row;
}","/** 
 * 1) Creates row wrapper. 2) For the null cell in the row wrapper, fills the relevant position with dummy cell or empty cell. 3) Updates the height of the row and the cells in the row.
 * @param rowArea current rowArea.
 */
private Row updateRow(RowArea rowArea,int specifiedHeight){
  int height=specifiedHeight;
  Row lastRow=(Row)rows.getCurrent();
  Row row=new Row(rowArea,startCol,endCol);
  boolean usedResolvedRow=false;
  for (int i=startCol; i <= endCol; i++) {
    CellArea upperCell=null;
    if (lastRow != null) {
      upperCell=lastRow.getCell(i);
    }
    if (upperCell != null && (upperCell.getRowSpan() > 1)) {
      DummyCell dummyCell=createDummyCell(upperCell);
      row.addArea(dummyCell);
      int delta=dummyCell.getDelta();
      if (dummyCell.getRowSpan() == 1) {
        height=Math.max(height,delta);
      }
      i=i + upperCell.getColSpan() - 1;
    }
 else {
      CellArea cell=row.getCell(i);
      if (cell == null) {
        if (unresolvedRow != null) {
          upperCell=unresolvedRow.getCell(i);
          usedResolvedRow=true;
        }
        cell=createEmptyCell(upperCell,i,row,lastRow);
      }
      if (cell.getRowSpan() == 1) {
        height=Math.max(height,cell.getHeight());
      }
      i=i + cell.getColSpan() - 1;
    }
  }
  if (usedResolvedRow) {
    unresolvedRow=null;
  }
  updateRowHeight(row,height);
  return row;
}",0.950056327450244
71354,"private CellArea createEmptyCell(CellArea upperCell,int columnId,Row row,Row lastRow){
  ICellContent cellContent=null;
  int rowSpan=1;
  if (upperCell != null) {
    cellContent=(ICellContent)upperCell.getContent();
    rowSpan=upperCell.getRowSpan();
  }
  if (cellContent == null) {
    cellContent=tableContent.getReportContent().createCellContent();
    cellContent.setColumn(columnId);
    cellContent.setColSpan(1);
    cellContent.setRowSpan(1);
    cellContent.setParent(row.getArea().getContent());
  }
  int emptyCellColID=cellContent.getColumn();
  int emptyCellColSpan=cellContent.getColSpan();
  CellArea emptyCell=AreaFactory.createCellArea(cellContent);
  emptyCell.setRowSpan(rowSpan);
  row.addArea(emptyCell);
  CellArea leftSideCellArea=null;
  if (emptyCellColID > startCol) {
    leftSideCellArea=row.getCell(emptyCellColID - 1);
    if (leftSideCellArea == null) {
      cellCache[1]=(ICellContent)lastRow.getCell(emptyCellColID - 1).getContent();
      int k=emptyCellColID - 1;
      while (leftSideCellArea == null && k > startCol) {
        k--;
        leftSideCellArea=row.getCell(k);
      }
    }
 else {
      cellCache[1]=(ICellContent)leftSideCellArea.getContent();
    }
  }
 else {
    leftSideCellArea=null;
  }
  resolveBorderConflict(emptyCell,true);
  IStyle areaStyle=emptyCell.getStyle();
  areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
  areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
  emptyCell.setWidth(getCellWidth(emptyCellColID,emptyCellColID + emptyCellColSpan));
  emptyCell.setPosition(layoutInfo.getXPosition(columnId),0);
  if (leftSideCellArea != null) {
    int index=row.getArea().indexOf(leftSideCellArea);
    row.getArea().addChild(index + 1,emptyCell);
  }
 else {
    row.getArea().addChild(0,emptyCell);
  }
  return emptyCell;
}","private CellArea createEmptyCell(CellArea upperCell,int columnId,Row row,Row lastRow){
  ICellContent cellContent=null;
  int rowSpan=1;
  if (upperCell != null) {
    cellContent=(ICellContent)upperCell.getContent();
    rowSpan=upperCell.getRowSpan();
  }
  if (cellContent == null) {
    cellContent=tableContent.getReportContent().createCellContent();
    cellContent.setColumn(columnId);
    cellContent.setColSpan(1);
    cellContent.setRowSpan(1);
    cellContent.setParent(row.getArea().getContent());
  }
  int emptyCellColID=cellContent.getColumn();
  int emptyCellColSpan=cellContent.getColSpan();
  CellArea emptyCell=AreaFactory.createCellArea(cellContent);
  emptyCell.setRowSpan(rowSpan);
  row.addArea(emptyCell);
  CellArea leftSideCellArea=null;
  if (emptyCellColID > startCol) {
    leftSideCellArea=row.getCell(emptyCellColID - 1);
    if (leftSideCellArea == null) {
      cellCache[0]=(ICellContent)lastRow.getCell(emptyCellColID - 1).getContent();
      int k=emptyCellColID - 1;
      while (leftSideCellArea == null && k > startCol) {
        k--;
        leftSideCellArea=row.getCell(k);
      }
    }
 else {
      cellCache[0]=(ICellContent)leftSideCellArea.getContent();
    }
  }
 else {
    leftSideCellArea=null;
  }
  resolveBorderConflict(emptyCell,true);
  IStyle areaStyle=emptyCell.getStyle();
  areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
  areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
  emptyCell.setWidth(getCellWidth(emptyCellColID,emptyCellColID + emptyCellColSpan));
  emptyCell.setPosition(layoutInfo.getXPosition(columnId),0);
  if (leftSideCellArea != null) {
    int index=row.getArea().indexOf(leftSideCellArea);
    row.getArea().addChild(index + 1,emptyCell);
  }
 else {
    row.getArea().addChild(0,emptyCell);
  }
  return emptyCell;
}",0.9989065062875888
71355,"protected void repeatHeader(){
  if (bandStatus == IBandContent.BAND_GROUP_HEADER) {
    return;
  }
  if (!((IGroupContent)content).isHeaderRepeat()) {
    return;
  }
  IBandContent header=context.getWrappedGroupHeader(content.getInstanceID());
  if (header == null || header.getChildren().isEmpty()) {
    return;
  }
  TableRegionLayout rLayout=tableLM.getTableRegionLayout();
  rLayout.initialize(header);
  rLayout.layout();
  TableArea tableRegion=(TableArea)header.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getAllocatedHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    TableContext tableContext=(TableContext)tableLM.contextList.getLast();
    while (iter.hasNext()) {
      ContainerArea area=(ContainerArea)iter.next();
      Iterator rowIter=area.getChildren();
      while (rowIter.hasNext()) {
        AbstractArea row=(AbstractArea)rowIter.next();
        if (row instanceof RowArea) {
          tableContext.layout.addRow((RowArea)row);
        }
      }
    }
    iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      addArea(area);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void repeatHeader(){
  if (bandStatus == IBandContent.BAND_GROUP_HEADER) {
    return;
  }
  if (!((IGroupContent)content).isHeaderRepeat()) {
    return;
  }
  IBandContent header=context.getWrappedGroupHeader(content.getInstanceID());
  if (header == null || header.getChildren().isEmpty()) {
    return;
  }
  TableRegionLayout rLayout=tableLM.getTableRegionLayout();
  rLayout.initialize(header);
  rLayout.layout();
  TableArea tableRegion=(TableArea)header.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getAllocatedHeight() < getCurrentMaxContentHeight()) {
    TableContext tableContext=(TableContext)tableLM.contextList.getLast();
    tableContext.layout.addRows(rLayout.getTableAreaLayout().getRows());
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      addArea(area);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.7371249440214958
71356,"protected void repeatHeader(){
  if (bandStatus == IBandContent.BAND_HEADER) {
    return;
  }
  ITableBandContent header=context.getWrappedTableHeader(content.getInstanceID());
  if (header == null || !tableContent.isHeaderRepeat()) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  TableRegionLayout rLayout=getTableRegionLayout();
  rLayout.initialize(header);
  rLayout.layout();
  TableArea tableRegion=(TableArea)header.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getAllocatedHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    TableContext tableContext=(TableContext)contextList.getLast();
    while (iter.hasNext()) {
      ContainerArea area=(ContainerArea)iter.next();
      Iterator rowIter=area.getChildren();
      while (rowIter.hasNext()) {
        AbstractArea row=(AbstractArea)rowIter.next();
        if (row instanceof RowArea) {
          tableContext.layout.addRow((RowArea)row);
        }
      }
    }
    iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      addArea(area);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void repeatHeader(){
  if (bandStatus == IBandContent.BAND_HEADER) {
    return;
  }
  ITableBandContent header=context.getWrappedTableHeader(content.getInstanceID());
  if (header == null || !tableContent.isHeaderRepeat()) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  TableRegionLayout rLayout=getTableRegionLayout();
  rLayout.initialize(header);
  rLayout.layout();
  TableArea tableRegion=(TableArea)header.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getAllocatedHeight() < getCurrentMaxContentHeight()) {
    TableContext tableContext=(TableContext)contextList.getLast();
    tableContext.layout.addRows(rLayout.getTableAreaLayout().getRows());
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      addArea(area);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.7374712643678161
71357,"public void startForeign(IForeignContent foreign){
  layoutEmitter.startForeign(foreign);
}","public void startForeign(IForeignContent foreign){
  layoutEmitter.startForeign(foreign);
  if (isInHeader()) {
    IContainerContent pContent=(IContainerContent)parentContents.peek();
    pContent.getChildren().add(foreign);
  }
}",0.5652173913043478
71358,"/** 
 * @param inputStream
 * @param queryDefn
 * @throws DataException
 */
private static void loadBaseQueryDefn(InputStream inputStream,BaseQueryDefinition queryDefn,int version) throws DataException {
  try {
    queryDefn.getBindings().putAll(loadBinding(inputStream,version));
    queryDefn.getFilters().addAll(FilterDefnUtil.loadFilterDefn(inputStream));
    queryDefn.getGroups().addAll(GroupDefnUtil.loadGroupDefn(inputStream,queryDefn,version));
    queryDefn.getSorts().addAll(loadSorts(inputStream,version));
    queryDefn.setMaxRows(IOUtil.readInt(inputStream));
    queryDefn.setUsesDetails(IOUtil.readBool(inputStream));
    queryDefn.getSubqueries().addAll(loadSubQuery(inputStream,queryDefn,version));
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e);
  }
}","/** 
 * @param inputStream
 * @param queryDefn
 * @throws DataException
 */
private static void loadBaseQueryDefn(InputStream inputStream,BaseQueryDefinition queryDefn,int version) throws DataException {
  try {
    queryDefn.getBindings().putAll(loadBinding(inputStream,version));
    queryDefn.getFilters().addAll(FilterDefnUtil.loadFilterDefn(inputStream));
    queryDefn.getGroups().addAll(GroupDefnUtil.loadGroupDefn(inputStream,queryDefn,version));
    queryDefn.getSorts().addAll(loadSorts(inputStream,version));
    queryDefn.setMaxRows(IOUtil.readInt(inputStream));
    queryDefn.setUsesDetails(IOUtil.readBool(inputStream));
    queryDefn.getSubqueries().addAll(loadSubQuery(inputStream,queryDefn,version));
    queryDefn.setQueryExecutionHints(loadQueryExecutionHints(inputStream,version));
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e);
  }
}",0.9511627906976744
71359,"/** 
 * @param outputStream
 * @param queryDefn
 * @throws DataException
 * @throws IOException
 */
static void saveBaseQueryDefn(OutputStream outputStream,IBaseQueryDefinition queryDefn,int version) throws DataException {
  try {
    saveBinding(outputStream,queryDefn.getBindings(),version);
    FilterDefnUtil.saveFilterDefn(outputStream,queryDefn.getFilters());
    GroupDefnUtil.saveGroupDefn(outputStream,queryDefn.getGroups(),version);
    saveSorts(outputStream,queryDefn.getSorts(),version);
    IOUtil.writeInt(outputStream,queryDefn.getMaxRows());
    IOUtil.writeBool(outputStream,queryDefn.usesDetails());
    saveSubQuery(outputStream,queryDefn.getSubqueries(),version);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * @param outputStream
 * @param queryDefn
 * @throws DataException
 * @throws IOException
 */
static void saveBaseQueryDefn(OutputStream outputStream,IBaseQueryDefinition queryDefn,int version) throws DataException {
  try {
    saveBinding(outputStream,queryDefn.getBindings(),version);
    FilterDefnUtil.saveFilterDefn(outputStream,queryDefn.getFilters());
    GroupDefnUtil.saveGroupDefn(outputStream,queryDefn.getGroups(),version);
    saveSorts(outputStream,queryDefn.getSorts(),version);
    IOUtil.writeInt(outputStream,queryDefn.getMaxRows());
    IOUtil.writeBool(outputStream,queryDefn.usesDetails());
    saveSubQuery(outputStream,queryDefn.getSubqueries(),version);
    saveQueryExecutionHints(outputStream,queryDefn.getQueryExecutionHints(),version);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9480676328502416
71360,"/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_2_3_2;
}","/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_2_3_2_1;
}",0.988095238095238
71361,"/** 
 * Computes min, max value, step size and step number of the Axis
 * @param oMinValue min value in data points. Double or CDateTime type.
 * @param oMaxValue max value in data points. Double or CDateTime type.
 */
public final void updateAxisMinMax(Object oMinValue,Object oMaxValue){
  if (rtc.getScale() != null && rtc.getScale().isShared()) {
    updateContext(rtc.getScale());
    return;
  }
  if (rtc.getScale() != null) {
    oMinValue=rtc.getScale().getMin();
    oMaxValue=rtc.getScale().getMax();
  }
  ScaleContext sct;
  if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    if ((iType & PERCENT) == PERCENT) {
      oMaximum=new Double(100);
      oMinimum=new Double(1);
      setStep(new Double(10));
      bMaximumFixed=true;
      bMinimumFixed=true;
      bStepFixed=true;
      return;
    }
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int iUnit=asInteger(oUnit);
    sct=new ScaleContext(iMarginPercent,iType,iUnit,oMinValue,oMaxValue,oStep);
  }
 else {
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
  if ((iType & DATE_TIME) == DATE_TIME) {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimumFixed,oMaximumFixed);
  }
 else {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimum,oMaximum);
  }
  sct.setFixedStep(bStepFixed,oStepNumber);
  sct.computeMinMax();
  updateContext(sct);
  tmpSC=sct;
  updateSharedScaleContext(rtc,iType,tmpSC);
}","/** 
 * Computes min, max value, step size and step number of the Axis
 * @param oMinValue min value in data points. Double or CDateTime type.
 * @param oMaxValue max value in data points. Double or CDateTime type.
 */
public final void updateAxisMinMax(Object oMinValue,Object oMaxValue){
  if (rtc.getScale() != null && rtc.getScale().isShared()) {
    updateContext(rtc.getScale());
    return;
  }
  ScaleContext sct;
  if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    if ((iType & PERCENT) == PERCENT) {
      oMaximum=new Double(100);
      oMinimum=new Double(1);
      setStep(new Double(10));
      bMaximumFixed=true;
      bMinimumFixed=true;
      bStepFixed=true;
      return;
    }
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int iUnit=asInteger(oUnit);
    sct=new ScaleContext(iMarginPercent,iType,iUnit,oMinValue,oMaxValue,oStep);
  }
 else {
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
  if ((iType & DATE_TIME) == DATE_TIME) {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimumFixed,oMaximumFixed);
  }
 else {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimum,oMaximum);
  }
  sct.setFixedStep(bStepFixed,oStepNumber);
  sct.computeMinMax();
  updateContext(sct);
  tmpSC=sct;
  updateSharedScaleContext(rtc,iType,tmpSC);
}",0.9603340292275574
71362,"/** 
 * Checks all labels for any overlap for a given axis' scale
 * @param la
 * @param iLabelLocation
 * @return
 */
public final boolean checkFit(IDisplayServer xs,Label la,int iLabelLocation) throws ChartException {
  if (isCategoryScale()) {
    return true;
  }
  final double dAngleInDegrees=la.getCaption().getFont().getRotation();
  double x=0, y=0;
  int iPointToCheck=0;
  if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
    if (iScaleDirection == BACKWARD) {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 1 : 2;
    }
 else {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 3 : 0;
    }
  }
 else   if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
    if (iScaleDirection == FORWARD) {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 0 : 1;
    }
 else {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 2 : 3;
    }
  }
  AxisTickCoordinates da=atcTickCoordinates;
  RotatedRectangle rrPrev=null, rrPrev2=null, rr;
  Double fontHeight=Methods.computeFontHeight(xs,la);
  if ((iType & (NUMERICAL | LINEAR)) == (NUMERICAL | LINEAR)) {
    double dAxisValue=asDouble(getMinimum()).doubleValue();
    final double dAxisStep=asDouble(getStep()).doubleValue();
    String sText;
    DecimalFormat df=null;
    if (fs == null) {
      df=computeDecimalFormat(dAxisValue,dAxisStep);
    }
    final NumberDataElement nde=NumberDataElementImpl.create(0);
    for (int i=0; i < da.size(); i++) {
      nde.setValue(dAxisValue);
      try {
        sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sText=NULL_STRING;
      }
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da.getCoordinate(i) * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da.getCoordinate(i) * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y,fontHeight);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (isAxisLabelStaggered() && isTickLabelStaggered(i)) {
        if (rrPrev2 != null && (rrPrev2.contains(p) || rrPrev2.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev2))) {
          return false;
        }
        rrPrev2=rr;
      }
 else {
        if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev))) {
          return false;
        }
        rrPrev=rr;
      }
      dAxisValue+=dAxisStep;
    }
  }
 else   if ((iType & (NUMERICAL | LOGARITHMIC)) == (NUMERICAL | LOGARITHMIC)) {
    double dAxisValue=asDouble(getMinimum()).doubleValue();
    final double dAxisStep=asDouble(getStep()).doubleValue();
    String sText;
    NumberDataElement nde=NumberDataElementImpl.create(0);
    DecimalFormat df=null;
    for (int i=0; i < da.size() - 1; i++) {
      nde.setValue(dAxisValue);
      if (fs == null) {
        df=computeDecimalFormat(dAxisValue,dAxisStep);
      }
      try {
        sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sText=NULL_STRING;
      }
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da.getCoordinate(i) * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da.getCoordinate(i) * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y,fontHeight);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (isAxisLabelStaggered() && isTickLabelStaggered(i)) {
        if (rrPrev2 != null && (rrPrev2.contains(p) || rrPrev2.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev2))) {
          return false;
        }
        rrPrev2=rr;
      }
 else {
        if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p))) {
          return false;
        }
        rrPrev=rr;
      }
      dAxisValue*=dAxisStep;
    }
  }
 else   if (iType == DATE_TIME) {
    CDateTime cdt, cdtAxisValue=asDateTime(oMinimum);
    final int iUnit=asInteger(oUnit);
    final int iStep=asInteger(oStep);
    final IDateFormatWrapper sdf=DateFormatWrapperFactory.getPreferredDateFormat(iUnit,rtc.getULocale());
    String sText;
    cdt=cdtAxisValue;
    for (int i=0; i < da.size() - 1; i++) {
      sText=ValueFormatter.format(cdt,fs,rtc.getULocale(),sdf);
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da.getCoordinate(i) * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da.getCoordinate(i) * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y,fontHeight);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (isAxisLabelStaggered() && isTickLabelStaggered(i)) {
        if (rrPrev2 != null && (rrPrev2.contains(p) || rrPrev2.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev2))) {
          return false;
        }
        rrPrev2=rr;
      }
 else {
        if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p))) {
          return false;
        }
        rrPrev=rr;
      }
      cdt=cdtAxisValue.forward(iUnit,iStep * (i + 1));
    }
  }
  return true;
}","/** 
 * Checks all labels for any overlap for a given axis' scale
 * @param la
 * @param iLabelLocation
 * @return
 */
public final boolean checkFit(IDisplayServer xs,Label la,int iLabelLocation) throws ChartException {
  if (isCategoryScale()) {
    return true;
  }
  final double dAngleInDegrees=la.getCaption().getFont().getRotation();
  double x=0, y=0;
  int iPointToCheck=0;
  if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
    if (iScaleDirection == BACKWARD) {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 1 : 2;
    }
 else {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 3 : 0;
    }
  }
 else   if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
    if (iScaleDirection == FORWARD) {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 0 : 1;
    }
 else {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 2 : 3;
    }
  }
  AxisTickCoordinates da=atcTickCoordinates;
  RotatedRectangle rrPrev=null, rrPrev2=null, rr;
  Double fontHeight=Methods.computeFontHeight(xs,la);
  if ((iType & (NUMERICAL | LINEAR)) == (NUMERICAL | LINEAR)) {
    double dAxisValue=asDouble(getMinimum()).doubleValue();
    final double dAxisStep=asDouble(getStep()).doubleValue();
    String sText;
    DecimalFormat df=null;
    if (fs == null) {
      df=computeDecimalFormat(dAxisValue,dAxisStep);
    }
    final NumberDataElement nde=NumberDataElementImpl.create(0);
    for (int i=0; i < da.size(); i++) {
      nde.setValue(dAxisValue);
      try {
        sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sText=NULL_STRING;
      }
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da.getCoordinate(i) * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da.getCoordinate(i) * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y,fontHeight);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
      }
      if (i == 0 && bLabelWithinAxes) {
        Rectangle rect=rr.getBounds();
        if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
          rr.shiftXVertices(rect.getWidth() / 2);
        }
 else {
          rr.shiftYVertices(-rect.getHeight() / 2);
        }
      }
      Point p=rr.getPoint(iPointToCheck);
      if (isAxisLabelStaggered() && isTickLabelStaggered(i)) {
        if (rrPrev2 != null && (rrPrev2.contains(p) || rrPrev2.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev2))) {
          return false;
        }
        rrPrev2=rr;
      }
 else {
        if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev))) {
          return false;
        }
        rrPrev=rr;
      }
      dAxisValue+=dAxisStep;
    }
  }
 else   if ((iType & (NUMERICAL | LOGARITHMIC)) == (NUMERICAL | LOGARITHMIC)) {
    double dAxisValue=asDouble(getMinimum()).doubleValue();
    final double dAxisStep=asDouble(getStep()).doubleValue();
    String sText;
    NumberDataElement nde=NumberDataElementImpl.create(0);
    DecimalFormat df=null;
    for (int i=0; i < da.size() - 1; i++) {
      nde.setValue(dAxisValue);
      if (fs == null) {
        df=computeDecimalFormat(dAxisValue,dAxisStep);
      }
      try {
        sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sText=NULL_STRING;
      }
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da.getCoordinate(i) * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da.getCoordinate(i) * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y,fontHeight);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (isAxisLabelStaggered() && isTickLabelStaggered(i)) {
        if (rrPrev2 != null && (rrPrev2.contains(p) || rrPrev2.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev2))) {
          return false;
        }
        rrPrev2=rr;
      }
 else {
        if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p))) {
          return false;
        }
        rrPrev=rr;
      }
      dAxisValue*=dAxisStep;
    }
  }
 else   if (iType == DATE_TIME) {
    CDateTime cdt, cdtAxisValue=asDateTime(oMinimum);
    final int iUnit=asInteger(oUnit);
    final int iStep=asInteger(oStep);
    final IDateFormatWrapper sdf=DateFormatWrapperFactory.getPreferredDateFormat(iUnit,rtc.getULocale());
    String sText;
    cdt=cdtAxisValue;
    for (int i=0; i < da.size() - 1; i++) {
      sText=ValueFormatter.format(cdt,fs,rtc.getULocale(),sdf);
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da.getCoordinate(i) * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da.getCoordinate(i) * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y,fontHeight);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
      }
      if (i == 0 && bLabelWithinAxes) {
        Rectangle rect=rr.getBounds();
        if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
          rr.shiftXVertices(rect.getWidth() / 2);
        }
 else {
          rr.shiftYVertices(-rect.getHeight() / 2);
        }
      }
      Point p=rr.getPoint(iPointToCheck);
      if (isAxisLabelStaggered() && isTickLabelStaggered(i)) {
        if (rrPrev2 != null && (rrPrev2.contains(p) || rrPrev2.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev2))) {
          return false;
        }
        rrPrev2=rr;
      }
 else {
        if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p))) {
          return false;
        }
        rrPrev=rr;
      }
      cdt=cdtAxisValue.forward(iUnit,iStep * (i + 1));
    }
  }
  return true;
}",0.9542737114234932
71363,"/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  dSeriesThickness=cwa.getPlot().getClientArea().isVisible() ? dSeriesThickness : 0;
  double dX=bo.getLeft() + insCA.getLeft();
  double dY=bo.getTop() + insCA.getTop();
  double dW=bo.getWidth() - insCA.getLeft() - insCA.getRight();
  double dH=bo.getHeight() - insCA.getTop() - insCA.getBottom();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
    dsi.reverse(cwa.isReverseCategory());
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,BoundsImpl.create(dX,dY,dW,dH));
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=BoundsImpl.copyInstance(boPlotBackground);
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}","/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  dSeriesThickness=cwa.getPlot().getClientArea().isVisible() ? dSeriesThickness : 0;
  double dX=bo.getLeft() + insCA.getLeft();
  double dY=bo.getTop() + insCA.getTop();
  double dW=bo.getWidth() - insCA.getLeft() - insCA.getRight();
  double dH=bo.getHeight() - insCA.getTop() - insCA.getBottom();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    if (rtc.getScale() != null && rtc.getState(AutoScale.KEY_SHARED_MINMAX) != null) {
      dsi=new DataSetIterator(rtc.getState(AutoScale.KEY_SHARED_MINMAX),iAxisType);
    }
 else {
      dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
    }
    dsi.reverse(cwa.isReverseCategory());
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,BoundsImpl.create(dX,dY,dW,dH));
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=BoundsImpl.copyInstance(boPlotBackground);
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}",0.9863207881494082
71364,"public void setModelObject(ExtendedItemHandle eih){
  IReportItem item=getReportItem(eih);
  if (item == null) {
    return;
  }
  cm=(Chart)((ChartReportItemImpl)item).getProperty(ChartReportItemUtil.PROPERTY_CHART);
  handle=eih;
  setChartModelObject(item);
}","public void setModelObject(ExtendedItemHandle eih){
  IReportItem item=getReportItem(eih);
  if (item == null) {
    return;
  }
  cm=(Chart)((ChartReportItemImpl)item).getProperty(ChartReportItemConstants.PROPERTY_CHART);
  handle=eih;
  setChartModelObject(item);
}",0.9754253308128544
71365,"protected ScaleContext createSharedScale(IBaseResultSet baseResultSet) throws BirtException {
  if (baseResultSet instanceof IQueryResultSet) {
    Object min=baseResultSet.evaluate(""String_Node_Str"" + ChartReportItemUtil.QUERY_MIN + ""String_Node_Str"");
    Object max=baseResultSet.evaluate(""String_Node_Str"" + ChartReportItemUtil.QUERY_MAX + ""String_Node_Str"");
    return ScaleContext.createSimpleScale(min,max);
  }
 else   if (baseResultSet instanceof CubeResultSet) {
    try {
      List<EdgeCursor> edgeCursors=((CubeResultSet)baseResultSet).getCubeCursor().getOrdinateEdge();
      for (      EdgeCursor edge : edgeCursors) {
        edge.first();
      }
      Axis xAxis=(Axis)((ChartWithAxes)cm).getAxes().get(0);
      SeriesDefinition sdValue=(SeriesDefinition)((ChartWithAxes)cm).getOrthogonalAxes(xAxis,true)[0].getSeriesDefinitions().get(0);
      Query queryValue=(Query)sdValue.getDesignTimeSeries().getDataDefinition().get(0);
      String bindingValue=ChartXTabUtil.getBindingName(queryValue.getDefinition(),false);
      String maxBindingName=ChartReportItemConstants.QUERY_MAX + bindingValue;
      String minBindingName=ChartReportItemConstants.QUERY_MIN + bindingValue;
      Object min=baseResultSet.evaluate(ExpressionUtil.createJSDataExpression(minBindingName));
      Object max=baseResultSet.evaluate(ExpressionUtil.createJSDataExpression(maxBindingName));
      if (min != null && max != null) {
        return ScaleContext.createSimpleScale(min,max);
      }
    }
 catch (    OLAPException e) {
      logger.log(e);
    }
catch (    BirtException e) {
    }
catch (    EvaluatorException e) {
    }
  }
  return null;
}","protected ScaleContext createSharedScale(IBaseResultSet baseResultSet) throws BirtException {
  if (baseResultSet instanceof IQueryResultSet) {
    Object min=baseResultSet.evaluate(""String_Node_Str"" + ChartReportItemConstants.QUERY_MIN + ""String_Node_Str"");
    Object max=baseResultSet.evaluate(""String_Node_Str"" + ChartReportItemConstants.QUERY_MAX + ""String_Node_Str"");
    return ScaleContext.createSimpleScale(min,max);
  }
 else   if (baseResultSet instanceof CubeResultSet) {
    try {
      List<EdgeCursor> edgeCursors=((CubeResultSet)baseResultSet).getCubeCursor().getOrdinateEdge();
      for (      EdgeCursor edge : edgeCursors) {
        edge.first();
      }
      Axis xAxis=(Axis)((ChartWithAxes)cm).getAxes().get(0);
      SeriesDefinition sdValue=(SeriesDefinition)((ChartWithAxes)cm).getOrthogonalAxes(xAxis,true)[0].getSeriesDefinitions().get(0);
      Query queryValue=(Query)sdValue.getDesignTimeSeries().getDataDefinition().get(0);
      String bindingValue=ChartXTabUtil.getBindingName(queryValue.getDefinition(),false);
      String maxBindingName=ChartReportItemConstants.QUERY_MAX + bindingValue;
      String minBindingName=ChartReportItemConstants.QUERY_MIN + bindingValue;
      Object min=baseResultSet.evaluate(ExpressionUtil.createJSDataExpression(minBindingName));
      Object max=baseResultSet.evaluate(ExpressionUtil.createJSDataExpression(maxBindingName));
      if (min != null && max != null) {
        return ScaleContext.createSimpleScale(min,max);
      }
    }
 catch (    OLAPException e) {
      logger.log(e);
    }
catch (    BirtException e) {
    }
catch (    EvaluatorException e) {
    }
  }
  return null;
}",0.992154496077248
71366,"public Object onRowSets(IBaseResultSet[] baseResultSet) throws BirtException {
  IBaseResultSet resultSet=getDataToRender(baseResultSet);
  if (resultSet == null) {
    return new Object[]{new byte[]{0}};
  }
 else   if (ChartReportItemUtil.isEmpty(resultSet)) {
    return null;
  }
  Bounds bo=cm.getBlock().getBounds();
  if (bo.getWidth() == 0 && bo.getHeight() == 0) {
    return null;
  }
  try {
    if (rtc.getScale() == null && ChartReportItemUtil.canScaleShared(handle,cm)) {
      rtc.setScale(createSharedScale(resultSet));
    }
    boolean isSharingQuery=false;
    if (handle.getDataBindingReference() != null || handle.getContainer() instanceof MultiViewsHandle) {
      isSharingQuery=true;
    }
    rtc.setSharingQuery(isSharingQuery);
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    if (rtc.getScriptContext() != null && rtc.getScriptContext() instanceof ChartScriptContext) {
      ((ChartScriptContext)rtc.getScriptContext()).setExternalContext(externalContext);
    }
    initializeScriptHandler(externalContext);
    IDataRowExpressionEvaluator rowAdapter=createEvaluator(resultSet);
    IActionEvaluator evaluator=new BIRTActionEvaluator();
    Generator.instance().bindData(rowAdapter,evaluator,cm,rtc);
    prepareDeviceRenderer();
    GeneratedChartState gcs=buildChart(rowAdapter,externalContext);
    renderToImageFile(gcs);
    rowAdapter.close();
    if (rtc.getScale() != null && !rtc.getScale().isShared()) {
      rtc.getScale().setShared(true);
      ((ChartReportItemImpl)getReportItem(handle)).setScale(rtc.getScale());
    }
    return getImageToDisplay();
  }
 catch (  BirtException birtException) {
    if (isNoDataException(birtException)) {
      return null;
    }
 else {
      throw birtException;
    }
  }
catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
}","public Object onRowSets(IBaseResultSet[] baseResultSet) throws BirtException {
  IBaseResultSet resultSet=getDataToRender(baseResultSet);
  if (resultSet == null) {
    return new Object[]{new byte[]{0}};
  }
 else   if (ChartReportItemUtil.isEmpty(resultSet)) {
    return null;
  }
  Bounds bo=cm.getBlock().getBounds();
  if (bo.getWidth() == 0 && bo.getHeight() == 0) {
    return null;
  }
  try {
    ScaleContext sharedScale=createSharedScale(resultSet);
    if (ChartReportItemUtil.canScaleShared(handle,cm)) {
      if (rtc.getScale() == null) {
        rtc.setScale(sharedScale);
      }
      if (sharedScale != null) {
        if (sharedScale.getMin() instanceof Double) {
          rtc.putState(AutoScale.KEY_SHARED_MINMAX,new double[]{(Double)sharedScale.getMin(),(Double)sharedScale.getMax()});
        }
 else         if (rtc.getScale().getMin() instanceof CDateTime) {
          rtc.putState(AutoScale.KEY_SHARED_MINMAX,new CDateTime[]{(CDateTime)sharedScale.getMin(),(CDateTime)sharedScale.getMax()});
        }
      }
    }
    boolean isSharingQuery=false;
    if (handle.getDataBindingReference() != null || handle.getContainer() instanceof MultiViewsHandle) {
      isSharingQuery=true;
    }
    rtc.setSharingQuery(isSharingQuery);
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    if (rtc.getScriptContext() != null && rtc.getScriptContext() instanceof ChartScriptContext) {
      ((ChartScriptContext)rtc.getScriptContext()).setExternalContext(externalContext);
    }
    initializeScriptHandler(externalContext);
    IDataRowExpressionEvaluator rowAdapter=createEvaluator(resultSet);
    IActionEvaluator evaluator=new BIRTActionEvaluator();
    Generator.instance().bindData(rowAdapter,evaluator,cm,rtc);
    prepareDeviceRenderer();
    GeneratedChartState gcs=buildChart(rowAdapter,externalContext);
    renderToImageFile(gcs);
    rowAdapter.close();
    if (rtc.getScale() != null && !rtc.getScale().isShared()) {
      rtc.getScale().setShared(true);
      ((ChartReportItemImpl)getReportItem(handle)).setScale(rtc.getScale());
    }
    return getImageToDisplay();
  }
 catch (  BirtException birtException) {
    if (isNoDataException(birtException)) {
      return null;
    }
 else {
      throw birtException;
    }
  }
catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
}",0.8455718736092568
71367,"protected void setChartModelObject(IReportItem item){
  Object of=handle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
  if (of instanceof String) {
    outputFormat=(String)of;
  }
  of=item.getProperty(ChartReportItemUtil.PROPERTY_SCALE);
  if (of instanceof ScaleContext) {
    if (rtc == null) {
      rtc=new RunTimeContext();
    }
    rtc.setScale((ScaleContext)of);
  }
}","protected void setChartModelObject(IReportItem item){
  Object of=handle.getProperty(ChartReportItemConstants.PROPERTY_OUTPUT);
  if (of instanceof String) {
    outputFormat=(String)of;
  }
  of=item.getProperty(ChartReportItemConstants.PROPERTY_SCALE);
  if (of instanceof ScaleContext) {
    if (rtc == null) {
      rtc=new RunTimeContext();
    }
    rtc.setScale((ScaleContext)of);
  }
}",0.9664948453608248
71368,"public void gotoFirstPage(){
  int size=contextList.size();
  if (size == 1) {
    return;
  }
 else {
    int index=contextList.indexOf(currentContext);
    if (index > 0) {
      currentContext=contextList.get(0);
      parent.step(0 - index);
    }
  }
}","public void gotoFirstPage(){
  int size=contextList.size();
  if (size == 1) {
    return;
  }
 else {
    int index=contextList.indexOf(currentContext);
    if (index > 0) {
      setCurrentContext(0);
      parent.step(0 - index);
    }
  }
}",0.9181636726546906
71369,"public void autoPageBreak(){
  if (parent != null) {
    parent.autoPageBreak();
  }
  int size=contextList.size();
  if (size == 0 || size > 0 && currentContext == contextList.getLast()) {
    initialize();
  }
 else {
    int index=contextList.indexOf(currentContext) + 1;
    if (index >= 0 && index < contextList.size()) {
      currentContext=contextList.get(index);
    }
  }
}","public void autoPageBreak(){
  if (parent != null) {
    parent.autoPageBreak();
  }
  int size=contextList.size();
  if (size == 0 || size > 0 && currentContext == contextList.getLast()) {
    initialize();
  }
 else {
    int index=contextList.indexOf(currentContext) + 1;
    if (index >= 0 && index < contextList.size()) {
      setCurrentContext(index);
    }
  }
}",0.8897742363877822
71370,"public void step(int step){
  if (currentContext != null) {
    int index=contextList.indexOf(currentContext) + step;
    if (index >= 0 && index < contextList.size()) {
      currentContext=contextList.get(index);
      if (parent != null) {
        parent.step(step);
      }
    }
  }
}","public void step(int step){
  if (currentContext != null) {
    int index=contextList.indexOf(currentContext) + step;
    if (index >= 0 && index < contextList.size()) {
      setCurrentContext(index);
      if (parent != null) {
        parent.step(step);
      }
    }
  }
}",0.6619469026548672
71371,"public void gotoLastPage(){
  int size=contextList.size();
  if (size == 1) {
    return;
  }
 else {
    int index=contextList.indexOf(currentContext);
    if (index != size - 1) {
      currentContext=contextList.get(size - 1);
      parent.step(size - 1 - index);
    }
  }
}","public void gotoLastPage(){
  int size=contextList.size();
  if (size == 1) {
    return;
  }
 else {
    int index=contextList.indexOf(currentContext);
    if (index != size - 1) {
      setCurrentContext(size - 1);
      parent.step(size - 1 - index);
    }
  }
}",0.9244935543278084
71372,"public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (this.cachedResultSet != null) {
    IResultSet ret=this.cachedResultSet;
    this.cachedResultSet=null;
    this.isExecuted=false;
    return ret;
  }
  if (!maxRowsUpToDate) {
    try {
      assertNotNull(callStat);
      callStat.setMaxRows(maxrows);
    }
 catch (    SQLException e1) {
    }
    maxRowsUpToDate=true;
  }
  registerOutputParameter();
  java.sql.ResultSet rs=null;
  try {
    this.callStat.execute();
    this.isExecuted=true;
    rs=this.callStat.getResultSet();
    if (rs == null && callStat.getUpdateCount() != -1) {
      while (true) {
        int rowCount=callStat.getUpdateCount();
        if (rowCount != -1) {
          if (callStat.getMoreResults() == false && callStat.getUpdateCount() == -1)           break;
          continue;
        }
 else {
          rs=callStat.getResultSet();
          break;
        }
      }
    }
    if (rs != null)     return new ResultSet(rs);
    this.populateOutputParamResultSet();
    java.sql.ResultSet resultSet=this.outputParameterResultSetsMap.size() == 0 ? null : this.outputParameterResultSetsMap.values().iterator().next();
    if (resultSet != null)     return new ResultSet(resultSet);
 else     return new SPResultSet(null);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}","public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (this.cachedResultSet != null) {
    IResultSet ret=this.cachedResultSet;
    this.cachedResultSet=null;
    return ret;
  }
  if (!maxRowsUpToDate) {
    try {
      assertNotNull(callStat);
      callStat.setMaxRows(maxrows);
    }
 catch (    SQLException e1) {
    }
    maxRowsUpToDate=true;
  }
  registerOutputParameter();
  java.sql.ResultSet rs=null;
  try {
    this.callStat.execute();
    this.isExecuted=true;
    rs=this.callStat.getResultSet();
    if (rs == null && callStat.getUpdateCount() != -1) {
      while (true) {
        int rowCount=callStat.getUpdateCount();
        if (rowCount != -1) {
          if (callStat.getMoreResults() == false && callStat.getUpdateCount() == -1)           break;
          continue;
        }
 else {
          rs=callStat.getResultSet();
          break;
        }
      }
    }
    if (rs != null)     return new ResultSet(rs);
    this.populateOutputParamResultSet();
    java.sql.ResultSet resultSet=this.outputParameterResultSetsMap.size() == 0 ? null : this.outputParameterResultSetsMap.values().iterator().next();
    if (resultSet != null)     return new ResultSet(resultSet);
 else     return new SPResultSet(null);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}",0.9908505591324974
71373,"/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
        if (defaultValueExpr != null)         paramBindingCandidates.put(modelParam.getName(),new ExpressionAdapter(defaultValueExpr,org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      if (modelParamBinding.getExpression() != null)       paramBindingCandidates.put(modelParamBinding.getParamName(),new ExpressionAdapter(modelParamBinding.getExpression(),DataType.ANY_TYPE));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ExpressionAdapter expression=(ExpressionAdapter)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null) {
          dteDataSet.addParameter(new ParameterAdapter(modelParam));
          paramBindingCandidates.put(modelParam.getName(),new ExpressionAdapter(defaultValueExpr,org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
        }
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      if (modelParamBinding.getExpression() != null)       paramBindingCandidates.put(modelParamBinding.getParamName(),new ExpressionAdapter(modelParamBinding.getExpression(),DataType.ANY_TYPE));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ExpressionAdapter expression=(ExpressionAdapter)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}",0.9634146341463414
71374,"private double[] computeHorizalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData,boolean bNeedInvert) throws ChartException {
  double dX=0, dY=0;
  double dW=0, dH=0;
  double dMaxW=0, dMaxH=0;
  ArrayList<LegendItemHints> columnList=new ArrayList<LegendItemHints>();
  LabelItem laiLegend=new LabelItem(xs,rtc,itm,la,legendData.maxWrappingSize);
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase=(Series)sdBase.getRunTimeSeries().get(0);
  DataSetIterator dsiBase=createDataSetIterator(seBase,cm);
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  dsiBase.reverse(bNeedInvert);
  boolean bHasMoreData=true;
  all:   while (bHasMoreData) {
    int categoryIndex;
    if (dsiBase.hasNext()) {
      Object obj=dsiBase.next();
      obj=getNonEmptyValue(obj,IConstants.ONE_SPACE);
      while (!isValidValue(obj) && dsiBase.hasNext()) {
        obj=dsiBase.next();
      }
      pos++;
      if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
        continue;
      }
      laiLegend.setText(obj,fs);
      categoryIndex=LEGEND_ENTRY;
    }
 else     if (legendData.bMinSliceApplied) {
      laiLegend.setText(legendData.sMinSliceLabel,null);
      categoryIndex=LEGEND_MINSLICE_ENTRY;
      bHasMoreData=false;
      pos++;
    }
 else {
      break;
    }
    boolean bRedo=true;
    for (int iLoopLimit=2; bRedo && iLoopLimit > 0; iLoopLimit--) {
      double[] dsize=getItemSizeCata(laiLegend,legendData,dX);
      dW=dsize[0];
      dH=dsize[1];
      if (!hasPlaceForOneItem(dW,dH,legendData)) {
        break all;
      }
      if (dY + dH > legendData.dAvailableHeight + legendData.dSafeSpacing) {
        columnList.clear();
        break all;
      }
 else {
        if (dX + dW > legendData.dAvailableWidth + legendData.dSafeSpacing) {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dY+=dMaxH;
          dMaxH=0;
          dMaxW=Math.max(dMaxW,dX);
          dX=0;
          laiLegend.restoreOriginalText(fs);
          bRedo=true;
        }
 else {
          dMaxH=Math.max(dH,dMaxH);
          dX+=dW;
          bRedo=false;
        }
      }
    }
    columnList.add(new LegendItemHints(categoryIndex,new Point(dX - dW,dY),dW - legendData.dHorizonalReservedSpace,laiLegend.getHeight(),laiLegend.getCaption(),bNeedInvert ? dsiBase.size() - 1 - pos : pos,sdBase,seBase));
  }
  legendData.legendItems.addAll(columnList);
  columnList.clear();
  double dHeight=dMaxH + dY;
  double dWidth=Math.max(dMaxW,dX);
  return new double[]{dWidth,dHeight};
}","private double[] computeHorizalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData,boolean bNeedInvert) throws ChartException {
  double dX=0, dY=0;
  double dW=0, dH=0;
  double dMaxW=0, dMaxH=0;
  ArrayList<LegendItemHints> columnList=new ArrayList<LegendItemHints>();
  LabelItem laiLegend=new LabelItem(xs,rtc,itm,la,legendData.maxWrappingSize);
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase=(Series)sdBase.getRunTimeSeries().get(0);
  DataSetIterator dsiBase=createDataSetIterator(seBase,cm);
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  boolean bDataReverse=bNeedInvert;
  if (cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)cm;
    bDataReverse=ChartUtil.XOR(bNeedInvert,cwa.isReverseCategory());
  }
  dsiBase.reverse(bDataReverse);
  boolean bHasMoreData=true;
  all:   while (bHasMoreData) {
    int categoryIndex;
    if (dsiBase.hasNext()) {
      Object obj=dsiBase.next();
      obj=getNonEmptyValue(obj,IConstants.ONE_SPACE);
      while (!isValidValue(obj) && dsiBase.hasNext()) {
        obj=dsiBase.next();
      }
      pos++;
      if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
        continue;
      }
      laiLegend.setText(obj,fs);
      categoryIndex=LEGEND_ENTRY;
    }
 else     if (legendData.bMinSliceApplied) {
      laiLegend.setText(legendData.sMinSliceLabel,null);
      categoryIndex=LEGEND_MINSLICE_ENTRY;
      bHasMoreData=false;
      pos++;
    }
 else {
      break;
    }
    boolean bRedo=true;
    for (int iLoopLimit=2; bRedo && iLoopLimit > 0; iLoopLimit--) {
      double[] dsize=getItemSizeCata(laiLegend,legendData,dX);
      dW=dsize[0];
      dH=dsize[1];
      if (!hasPlaceForOneItem(dW,dH,legendData)) {
        break all;
      }
      if (dY + dH > legendData.dAvailableHeight + legendData.dSafeSpacing) {
        columnList.clear();
        break all;
      }
 else {
        if (dX + dW > legendData.dAvailableWidth + legendData.dSafeSpacing) {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dY+=dMaxH;
          dMaxH=0;
          dMaxW=Math.max(dMaxW,dX);
          dX=0;
          laiLegend.restoreOriginalText(fs);
          bRedo=true;
        }
 else {
          dMaxH=Math.max(dH,dMaxH);
          dX+=dW;
          bRedo=false;
        }
      }
    }
    columnList.add(new LegendItemHints(categoryIndex,new Point(dX - dW,dY),dW - legendData.dHorizonalReservedSpace,laiLegend.getHeight(),laiLegend.getCaption(),bNeedInvert ? dsiBase.size() - 1 - pos : pos,sdBase,seBase));
  }
  legendData.legendItems.addAll(columnList);
  columnList.clear();
  double dHeight=dMaxH + dY;
  double dWidth=Math.max(dMaxW,dX);
  return new double[]{dWidth,dHeight};
}",0.9711098398169336
71375,"private double[] computeVerticalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData,boolean bNeedInvert) throws ChartException {
  double dX=0, dY=0;
  double dW=0, dH=0;
  double dMaxW=0, dMaxH=0;
  ArrayList<LegendItemHints> columnList=new ArrayList<LegendItemHints>();
  LabelItem laiLegend=new LabelItem(xs,rtc,itm,la,legendData.maxWrappingSize);
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase;
  if (sdBase.getRunTimeSeries().size() == 0) {
    return new double[]{0,0};
  }
 else {
    seBase=(Series)sdBase.getRunTimeSeries().get(0);
  }
  DataSetIterator dsiBase=createDataSetIterator(seBase,cm);
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  dsiBase.reverse(bNeedInvert);
  boolean bHasMoreData=true;
  all:   while (bHasMoreData) {
    int categoryIndex;
    if (dsiBase.hasNext()) {
      Object obj=dsiBase.next();
      obj=getNonEmptyValue(obj,IConstants.ONE_SPACE);
      while (!isValidValue(obj) && dsiBase.hasNext()) {
        obj=dsiBase.next();
      }
      pos++;
      if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
        continue;
      }
      laiLegend.setText(obj,fs);
      categoryIndex=LEGEND_ENTRY;
    }
 else     if (legendData.bMinSliceApplied) {
      laiLegend.setText(legendData.sMinSliceLabel,null);
      categoryIndex=LEGEND_MINSLICE_ENTRY;
      bHasMoreData=false;
      pos++;
    }
 else {
      break;
    }
    boolean bRedo=true;
    for (int iLoopLimit=2; bRedo && iLoopLimit > 0; iLoopLimit--) {
      double[] dsize=getItemSizeCata(laiLegend,legendData,dX);
      dW=dsize[0];
      dH=dsize[1];
      if (!hasPlaceForOneItem(dW,dH,legendData)) {
        break all;
      }
      if (dX + dW > legendData.dAvailableWidth + legendData.dSafeSpacing) {
        columnList.clear();
        break all;
      }
 else {
        if (dY + dH > legendData.dAvailableHeight + legendData.dSafeSpacing) {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dX+=dMaxW;
          dMaxH=Math.max(dMaxH,dY);
          dY=0;
          dMaxW=0;
          bRedo=true;
        }
 else {
          dMaxW=Math.max(dW,dMaxW);
          dY+=dH;
          bRedo=false;
        }
      }
    }
    columnList.add(new LegendItemHints(categoryIndex,new Point(dX,dY - dH),dW - legendData.dHorizonalReservedSpace,laiLegend.getHeight(),laiLegend.getCaption(),bNeedInvert ? dsiBase.size() - 1 - pos : pos,sdBase,seBase));
  }
  legendData.legendItems.addAll(columnList);
  columnList.clear();
  double dWidth=dX + dMaxW;
  double dHeight=Math.max(dMaxH,dY);
  return new double[]{dWidth,dHeight};
}","private double[] computeVerticalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData,boolean bNeedInvert) throws ChartException {
  double dX=0, dY=0;
  double dW=0, dH=0;
  double dMaxW=0, dMaxH=0;
  ArrayList<LegendItemHints> columnList=new ArrayList<LegendItemHints>();
  LabelItem laiLegend=new LabelItem(xs,rtc,itm,la,legendData.maxWrappingSize);
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase;
  if (sdBase.getRunTimeSeries().size() == 0) {
    return new double[]{0,0};
  }
 else {
    seBase=(Series)sdBase.getRunTimeSeries().get(0);
  }
  DataSetIterator dsiBase=createDataSetIterator(seBase,cm);
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  boolean bDataReverse=bNeedInvert;
  if (cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)cm;
    bDataReverse=ChartUtil.XOR(bNeedInvert,cwa.isReverseCategory());
  }
  dsiBase.reverse(bDataReverse);
  boolean bHasMoreData=true;
  all:   while (bHasMoreData) {
    int categoryIndex;
    if (dsiBase.hasNext()) {
      Object obj=dsiBase.next();
      obj=getNonEmptyValue(obj,IConstants.ONE_SPACE);
      while (!isValidValue(obj) && dsiBase.hasNext()) {
        obj=dsiBase.next();
      }
      pos++;
      if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
        continue;
      }
      laiLegend.setText(obj,fs);
      categoryIndex=LEGEND_ENTRY;
    }
 else     if (legendData.bMinSliceApplied) {
      laiLegend.setText(legendData.sMinSliceLabel,null);
      categoryIndex=LEGEND_MINSLICE_ENTRY;
      bHasMoreData=false;
      pos++;
    }
 else {
      break;
    }
    boolean bRedo=true;
    for (int iLoopLimit=2; bRedo && iLoopLimit > 0; iLoopLimit--) {
      double[] dsize=getItemSizeCata(laiLegend,legendData,dX);
      dW=dsize[0];
      dH=dsize[1];
      if (!hasPlaceForOneItem(dW,dH,legendData)) {
        break all;
      }
      if (dX + dW > legendData.dAvailableWidth + legendData.dSafeSpacing) {
        columnList.clear();
        break all;
      }
 else {
        if (dY + dH > legendData.dAvailableHeight + legendData.dSafeSpacing) {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dX+=dMaxW;
          dMaxH=Math.max(dMaxH,dY);
          dY=0;
          dMaxW=0;
          bRedo=true;
        }
 else {
          dMaxW=Math.max(dW,dMaxW);
          dY+=dH;
          bRedo=false;
        }
      }
    }
    columnList.add(new LegendItemHints(categoryIndex,new Point(dX,dY - dH),dW - legendData.dHorizonalReservedSpace,laiLegend.getHeight(),laiLegend.getCaption(),bNeedInvert ? dsiBase.size() - 1 - pos : pos,sdBase,seBase));
  }
  legendData.legendItems.addAll(columnList);
  columnList.clear();
  double dWidth=dX + dMaxW;
  double dHeight=Math.max(dMaxH,dY);
  return new double[]{dWidth,dHeight};
}",0.9694956206584112
71376,"/** 
 * Reset grouping units items.
 * @param grouping
 * @param isGroupingEnableUI
 * @since BIRT 2.3
 */
private void resetGroupingUnitsCombo(boolean isGroupingEnableUI){
  NameSet ns;
  ns=LiteralHelper.getGroupingUnitTypeSet(fGrouping.getGroupType());
  if (ns != null) {
    cmbUnit.setItems(ns.getDisplayNames());
    if (isGroupingEnableUI && fGrouping.getGroupType() != null && (fGrouping.getGroupType() == DataType.DATE_TIME_LITERAL || fGrouping.getGroupType() == DataType.TEXT_LITERAL) && fGrouping.getGroupingUnit() != null) {
      String name=ChartUtil.getGroupingUnitName(fGrouping);
      if (name != null) {
        String displayName=ns.getDisplayNameByName(name);
        if (displayName == null) {
          cmbUnit.select(0);
        }
 else {
          cmbUnit.setText(name);
        }
      }
 else {
        cmbUnit.select(0);
      }
    }
  }
 else {
    cmbUnit.removeAll();
  }
  lblUnit.setEnabled(isGroupingEnableUI && (isDateTimeGrouping(cmbType.getText()) || isTextGrouping(cmbType.getText())));
  cmbUnit.setEnabled(lblUnit.getEnabled());
}","/** 
 * Reset grouping units items.
 * @param grouping
 * @param isGroupingEnableUI
 * @since BIRT 2.3
 */
private void resetGroupingUnitsCombo(boolean isGroupingEnableUI){
  NameSet ns;
  ns=LiteralHelper.getGroupingUnitTypeSet(fGrouping.getGroupType());
  if (ns != null) {
    cmbUnit.setItems(ns.getDisplayNames());
    if (isGroupingEnableUI && fGrouping.getGroupType() != null && (fGrouping.getGroupType() == DataType.DATE_TIME_LITERAL || fGrouping.getGroupType() == DataType.TEXT_LITERAL) && fGrouping.getGroupingUnit() != null) {
      String name=ChartUtil.getGroupingUnitName(fGrouping);
      if (name != null) {
        String displayName=ns.getDisplayNameByName(name);
        if (displayName == null) {
          cmbUnit.select(0);
        }
 else {
          cmbUnit.setText(displayName);
        }
      }
 else {
        cmbUnit.select(0);
      }
    }
  }
 else {
    cmbUnit.removeAll();
  }
  lblUnit.setEnabled(isGroupingEnableUI && (isDateTimeGrouping(cmbType.getText()) || isTextGrouping(cmbType.getText())));
  cmbUnit.setEnabled(lblUnit.getEnabled());
}",0.99581589958159
71377,"/** 
 * @param s
 * @return
 */
private String[] splitOnBreaks(String s,double maxSize,Font ft){
  List al=new ArrayList();
  int i=0, j;
  do {
    j=s.indexOf('\n',i);
    if (j == -1) {
      j=s.length();
    }
    String ss=s.substring(i,j);
    if (ss != null && ss.length() > 0) {
      al.add(ss);
    }
    i=j + 1;
  }
 while (j != -1 && j < s.length());
  if (maxSize > 0) {
    List nal=new ArrayList();
    for (Iterator itr=al.iterator(); itr.hasNext(); ) {
      String ns=(String)itr.next();
      AttributedString as=new AttributedString(ns,ft.getAttributes());
      LineBreakMeasurer lbm=new LineBreakMeasurer(as.getIterator(),g2d.getFontRenderContext());
      while (lbm.getPosition() < ns.length()) {
        int next=lbm.nextOffset((float)maxSize);
        String ss=ns.substring(lbm.getPosition(),next);
        lbm.setPosition(next);
        nal.add(ss);
      }
    }
    al=nal;
  }
  final int n=al.size();
  if (n == 1 || n == 0) {
    return null;
  }
  final String[] sa=new String[n];
  for (i=0; i < al.size(); i++) {
    sa[i]=(String)al.get(i);
  }
  return sa;
}","/** 
 * @param s
 * @return
 */
private String[] splitOnBreaks(String s,double maxSize,Font ft){
  List<String> al=new ArrayList<String>();
  int i=0, j;
  do {
    j=s.indexOf('\n',i);
    if (j == -1) {
      j=s.length();
    }
    String ss=s.substring(i,j);
    if (ss != null && ss.length() > 0) {
      al.add(ss);
    }
    i=j + 1;
  }
 while (j != -1 && j < s.length());
  if (maxSize > 0) {
    List<String> nal=new ArrayList<String>();
    for (Iterator<String> itr=al.iterator(); itr.hasNext(); ) {
      String ns=(String)itr.next();
      AttributedString as=new AttributedString(ns,ft.getAttributes());
      LineBreakMeasurer lbm=new LineBreakMeasurer(as.getIterator(),g2d.getFontRenderContext());
      while (lbm.getPosition() < ns.length()) {
        int next=lbm.nextOffset((float)maxSize);
        String ss=ns.substring(lbm.getPosition(),next);
        lbm.setPosition(next);
        nal.add(ss);
      }
    }
    al=nal;
  }
  final int n=al.size();
  if (n == 1 || n == 0) {
    return null;
  }
  final String[] sa=new String[n];
  for (i=0; i < al.size(); i++) {
    sa[i]=(String)al.get(i);
  }
  return sa;
}",0.9821109123434704
71378,"/** 
 * @param s
 * @return
 */
private String[] splitOnBreaks(String s,double maxSize){
  List al=new ArrayList();
  int i=0, j;
  do {
    j=s.indexOf('\n',i);
    if (j == -1) {
      j=s.length();
    }
    String ss=s.substring(i,j);
    if (ss != null && ss.length() > 0) {
      al.add(ss);
    }
    i=j + 1;
  }
 while (j != -1 && j < s.length());
  if (maxSize > 0) {
    List nal=new ArrayList();
    for (Iterator itr=al.iterator(); itr.hasNext(); ) {
      String ns=(String)itr.next();
      AttributedString as=new AttributedString(ns,fm.getFont().getAttributes());
      LineBreakMeasurer lbm=new LineBreakMeasurer(as.getIterator(),g2d.getFontRenderContext());
      while (lbm.getPosition() < ns.length()) {
        int next=lbm.nextOffset((float)maxSize);
        String ss=ns.substring(lbm.getPosition(),next);
        lbm.setPosition(next);
        nal.add(ss);
      }
    }
    al=nal;
  }
  final int n=al.size();
  if (n == 1 || n == 0) {
    return null;
  }
  final String[] sa=new String[n];
  for (i=0; i < al.size(); i++) {
    sa[i]=(String)al.get(i);
  }
  return sa;
}","/** 
 * @param s
 * @return
 */
private String[] splitOnBreaks(String s,double maxSize){
  List<String> al=new ArrayList<String>();
  int i=0, j;
  do {
    j=s.indexOf('\n',i);
    if (j == -1) {
      j=s.length();
    }
    String ss=s.substring(i,j);
    if (ss != null && ss.length() > 0) {
      al.add(ss);
    }
    i=j + 1;
  }
 while (j != -1 && j < s.length());
  if (maxSize > 0) {
    List<String> nal=new ArrayList<String>();
    for (Iterator<String> itr=al.iterator(); itr.hasNext(); ) {
      String ns=(String)itr.next();
      AttributedString as=new AttributedString(ns,fm.getFont().getAttributes());
      LineBreakMeasurer lbm=new LineBreakMeasurer(as.getIterator(),g2d.getFontRenderContext());
      while (lbm.getPosition() < ns.length()) {
        int next=lbm.nextOffset((float)maxSize);
        String ss=ns.substring(lbm.getPosition(),next);
        lbm.setPosition(next);
        nal.add(ss);
      }
    }
    al=nal;
  }
  final int n=al.size();
  if (n == 1 || n == 0) {
    return null;
  }
  final String[] sa=new String[n];
  for (i=0; i < al.size(); i++) {
    sa[i]=(String)al.get(i);
  }
  return sa;
}",0.9821428571428572
71379,"public void enableInteraction(InteractionEvent iev) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  final Trigger[] tga=iev.getTriggers();
  if (tga == null) {
    return;
  }
  Region clipping=new Region();
  _gc.getClipping(clipping);
  TriggerCondition tc;
  ArrayList al;
  final PrimitiveRenderEvent pre=iev.getHotSpot();
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),loa,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds bo=((RectangleRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),boEllipse,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    final Bounds boEllipse=are.getEllipseBounds();
    double dStart=are.getStartAngle();
    double dExtent=are.getAngleExtent();
    int iArcType=are.getStyle();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),boEllipse,dStart,dExtent,iArcType == ArcRenderEvent.SECTOR,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof AreaRenderEvent) {
    final Bounds bo=((AreaRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
  clipping.dispose();
}","public void enableInteraction(InteractionEvent iev) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  final Trigger[] tga=iev.getTriggers();
  if (tga == null) {
    return;
  }
  Region clipping=new Region();
  _gc.getClipping(clipping);
  TriggerCondition tc;
  List<RegionAction> al;
  final PrimitiveRenderEvent pre=iev.getHotSpot();
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),loa,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds bo=((RectangleRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),boEllipse,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    final Bounds boEllipse=are.getEllipseBounds();
    double dStart=are.getStartAngle();
    double dExtent=are.getAngleExtent();
    int iArcType=are.getStyle();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),boEllipse,dStart,dExtent,iArcType == ArcRenderEvent.SECTOR,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof AreaRenderEvent) {
    final Bounds bo=((AreaRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList<RegionAction>(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
  clipping.dispose();
}",0.3627717391304347
71380,"private void cleanUpTriggers(){
  for (Iterator itr=_lhmAllTriggers.values().iterator(); itr.hasNext(); ) {
    List ralist=(List)itr.next();
    if (ralist != null) {
      for (Iterator sitr=ralist.iterator(); sitr.hasNext(); ) {
        RegionAction ra=(RegionAction)sitr.next();
        ra.dispose();
      }
    }
  }
  _lhmAllTriggers.clear();
}","private void cleanUpTriggers(){
  for (Iterator<List<RegionAction>> itr=_lhmAllTriggers.values().iterator(); itr.hasNext(); ) {
    List<RegionAction> ralist=itr.next();
    if (ralist != null) {
      for (Iterator<RegionAction> sitr=ralist.iterator(); sitr.hasNext(); ) {
        RegionAction ra=(RegionAction)sitr.next();
        ra.dispose();
      }
    }
  }
  _lhmAllTriggers.clear();
}",0.9059139784946236
71381,"/** 
 * @param s
 * @return
 */
private String[] splitOnBreaks(String s,double maxSize){
  List al=new ArrayList();
  int i=0, j;
  do {
    j=s.indexOf('\n',i);
    if (j == -1) {
      j=s.length();
    }
    String ss=s.substring(i,j);
    if (ss != null && ss.length() > 0) {
      al.add(ss);
    }
    i=j + 1;
  }
 while (j != -1 && j < s.length());
  if (maxSize > 0) {
    TextLayout tl=new TextLayout(((SwtDisplayServer)ids).getDevice());
    tl.setFont(getFont());
    tl.setWidth((int)maxSize);
    List nal=new ArrayList();
    for (Iterator itr=al.iterator(); itr.hasNext(); ) {
      String ns=(String)itr.next();
      tl.setText(ns);
      int[] offsets=tl.getLineOffsets();
      String ss;
      for (i=1; i < offsets.length; i++) {
        ss=ns.substring(offsets[i - 1],offsets[i]);
        nal.add(ss);
      }
    }
    tl.dispose();
    al=nal;
  }
  final int n=al.size();
  if (n == 1 || n == 0) {
    return null;
  }
  final String[] sa=new String[n];
  for (i=0; i < al.size(); i++) {
    sa[i]=(String)al.get(i);
  }
  return sa;
}","/** 
 * @param s
 * @return
 */
private String[] splitOnBreaks(String s,double maxSize){
  List<String> al=new ArrayList<String>();
  int i=0, j;
  do {
    j=s.indexOf('\n',i);
    if (j == -1) {
      j=s.length();
    }
    String ss=s.substring(i,j);
    if (ss != null && ss.length() > 0) {
      al.add(ss);
    }
    i=j + 1;
  }
 while (j != -1 && j < s.length());
  if (maxSize > 0) {
    TextLayout tl=new TextLayout(((SwtDisplayServer)ids).getDevice());
    tl.setFont(getFont());
    tl.setWidth((int)maxSize);
    List<String> nal=new ArrayList<String>();
    for (Iterator<String> itr=al.iterator(); itr.hasNext(); ) {
      String ns=(String)itr.next();
      tl.setText(ns);
      int[] offsets=tl.getLineOffsets();
      String ss;
      for (i=1; i < offsets.length; i++) {
        ss=ns.substring(offsets[i - 1],offsets[i]);
        nal.add(ss);
      }
    }
    tl.dispose();
    al=nal;
  }
  final int n=al.size();
  if (n == 1 || n == 0) {
    return null;
  }
  final String[] sa=new String[n];
  for (i=0; i < al.size(); i++) {
    sa[i]=(String)al.get(i);
  }
  return sa;
}",0.9814986123959296
71382,"private boolean translate3DEvent_clip_opt(Object obj,Matrix transMatrix,double xOffset,double yOffset,boolean bClip){
  if (obj instanceof Polygon3DRenderEvent) {
    Polygon3DRenderEvent p3dre=(Polygon3DRenderEvent)obj;
    Object3D object3D=p3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    boolean behind=checkBehindFace(p3dre);
    p3dre.setBehind(behind);
    if (p3dre.isBehind()) {
      return false;
    }
    double cosValue=object3D.getNormal().cosineValue(LDR);
    if (p3dre.isDoubleSided()) {
      cosValue=-Math.abs(cosValue);
    }
    double brightnessRatio=(1 - cosValue) / 2d;
    p3dre.setBrightness(brightnessRatio);
    if (bClip) {
      object3D.clip(this);
    }
    if (object3D.getVectors().length < 3) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    p3dre.prepare2D(xOffset,yOffset);
    return true;
  }
 else   if (obj instanceof Line3DRenderEvent) {
    Line3DRenderEvent l3dre=(Line3DRenderEvent)obj;
    if (l3dre.getLineAttributes() == null || !l3dre.getLineAttributes().isSetVisible() || !l3dre.getLineAttributes().isVisible()) {
      return false;
    }
    Object3D object3D=l3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    if (bClip) {
      object3D.clip(this);
    }
    if (object3D.getVectors().length < 2) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    l3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Text3DRenderEvent) {
    Text3DRenderEvent t3dre=(Text3DRenderEvent)obj;
    Object3D object3D=t3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    if (bClip) {
      object3D.clip(this);
    }
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    t3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Oval3DRenderEvent) {
    Oval3DRenderEvent o3dre=(Oval3DRenderEvent)obj;
    Object3D object3D=o3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    if (bClip) {
      object3D.clip(this);
    }
    if (object3D.getVectors().length < 3) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    o3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Image3DRenderEvent) {
    Image3DRenderEvent i3dre=(Image3DRenderEvent)obj;
    Object3D object3D=i3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    if (bClip) {
      object3D.clip(this);
    }
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    i3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Arc3DRenderEvent) {
    Arc3DRenderEvent a3dre=(Arc3DRenderEvent)obj;
    Object3D object3D=a3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    if (bClip) {
      object3D.clip(this);
    }
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    a3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Area3DRenderEvent) {
    Area3DRenderEvent a3dre=(Area3DRenderEvent)obj;
    for (Iterator itr=a3dre.iterator(); itr.hasNext(); ) {
      PrimitiveRenderEvent pre=(PrimitiveRenderEvent)itr.next();
      if (pre instanceof I3DRenderEvent) {
        Object3D object3D=((I3DRenderEvent)pre).getObject3D();
        object3D.transform(transMatrix);
        object3D.transform(M2V_MATRIX);
        object3D.prepareZSort();
        if (bClip) {
          object3D.clip(this);
        }
        if (object3D.getVectors().length < 1) {
          itr.remove();
          continue;
        }
        object3D.perspective(PERSPECTIVE_VALUE);
        object3D.transform(V2C_MATRIX);
      }
    }
    a3dre.prepare2D(xOffset,yOffset);
  }
  return true;
}","private boolean translate3DEvent_clip_opt(Object obj,Matrix transMatrix,double xOffset,double yOffset,boolean bClip){
  if (obj instanceof Polygon3DRenderEvent) {
    Polygon3DRenderEvent p3dre=(Polygon3DRenderEvent)obj;
    Object3D object3D=p3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    boolean behind=checkBehindFace(p3dre);
    p3dre.setBehind(behind);
    if (p3dre.isBehind()) {
      return false;
    }
    double cosValue=object3D.getNormal().cosineValue(LDR);
    if (p3dre.isDoubleSided()) {
      cosValue=-Math.abs(cosValue);
    }
    double brightnessRatio=(1 - cosValue) / 2d;
    p3dre.setBrightness(brightnessRatio);
    if (bClip) {
      object3D.clip(this);
    }
    if (object3D.getVectors().length < 3) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    p3dre.prepare2D(xOffset,yOffset);
    return true;
  }
 else   if (obj instanceof Line3DRenderEvent) {
    Line3DRenderEvent l3dre=(Line3DRenderEvent)obj;
    if (l3dre.getLineAttributes() == null || !l3dre.getLineAttributes().isSetVisible() || !l3dre.getLineAttributes().isVisible()) {
      return false;
    }
    Object3D object3D=l3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    if (bClip) {
      object3D.clip(this);
    }
    if (object3D.getVectors().length < 2) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    l3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Text3DRenderEvent) {
    Text3DRenderEvent t3dre=(Text3DRenderEvent)obj;
    Object3D object3D=t3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    if (bClip) {
      object3D.clip(this);
    }
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    t3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Oval3DRenderEvent) {
    Oval3DRenderEvent o3dre=(Oval3DRenderEvent)obj;
    Object3D object3D=o3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    if (bClip) {
      object3D.clip(this);
    }
    if (object3D.getVectors().length < 3) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    o3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Image3DRenderEvent) {
    Image3DRenderEvent i3dre=(Image3DRenderEvent)obj;
    Object3D object3D=i3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    if (bClip) {
      object3D.clip(this);
    }
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    i3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Arc3DRenderEvent) {
    Arc3DRenderEvent a3dre=(Arc3DRenderEvent)obj;
    Object3D object3D=a3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    if (bClip) {
      object3D.clip(this);
    }
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    a3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Area3DRenderEvent) {
    Area3DRenderEvent a3dre=(Area3DRenderEvent)obj;
    for (Iterator<PrimitiveRenderEvent> itr=a3dre.iterator(); itr.hasNext(); ) {
      PrimitiveRenderEvent pre=(PrimitiveRenderEvent)itr.next();
      if (pre instanceof I3DRenderEvent) {
        Object3D object3D=((I3DRenderEvent)pre).getObject3D();
        object3D.transform(transMatrix);
        object3D.transform(M2V_MATRIX);
        object3D.prepareZSort();
        if (bClip) {
          object3D.clip(this);
        }
        if (object3D.getVectors().length < 1) {
          itr.remove();
          continue;
        }
        object3D.perspective(PERSPECTIVE_VALUE);
        object3D.transform(V2C_MATRIX);
      }
    }
    a3dre.prepare2D(xOffset,yOffset);
  }
  return true;
}",0.997473587505742
71383,"public Point getPoint(int index){
  return (Point)points.get(index);
}","public Point getPoint(int index){
  return points.get(index);
}",0.9473684210526316
71384,"public boolean intersects(Polygon poly){
  if (poly == null) {
    return false;
  }
  if (points.size() > 2 && poly.points.size() > 2) {
    boolean started=false;
    boolean diff=false, oldDiff=false;
    int count=points.size();
    double[] xa=new double[count];
    double[] ya=new double[count];
    for (int i=0; i < count; i++) {
      Point pt=getPoint(i);
      xa[i]=pt.getX();
      ya[i]=pt.getY();
    }
    for (Iterator itr=poly.getPoints().iterator(); itr.hasNext(); ) {
      Point pt=(Point)itr.next();
      diff=testInside(count,xa,ya,pt.getX(),pt.getY());
      if (!started) {
        started=true;
        oldDiff=diff;
      }
      if (diff != oldDiff) {
        return true;
      }
      oldDiff=diff;
    }
    if (diff) {
      return true;
    }
    if (getPoints().size() > 0) {
      count=poly.getPoints().size();
      xa=new double[count];
      ya=new double[count];
      for (int i=0; i < count; i++) {
        Point pt=poly.getPoint(i);
        xa[i]=pt.getX();
        ya[i]=pt.getY();
      }
      for (Iterator itr=points.iterator(); itr.hasNext(); ) {
        Point pt=(Point)itr.next();
        if (testInside(count,xa,ya,pt.getX(),pt.getY())) {
          return true;
        }
      }
    }
  }
 else   if (points.size() == 2 || poly.points.size() == 2) {
    List line=points;
    List pg=poly.points;
    if (line.size() > 2) {
      line=poly.points;
      pg=points;
    }
    Point lp1=(Point)line.get(0);
    Point lp2=(Point)line.get(1);
    for (int i=0; i < pg.size(); i++) {
      if (i == pg.size() - 1) {
        if (testLineIntersect(lp1,lp2,(Point)pg.get(i),(Point)pg.get(0))) {
          return true;
        }
      }
 else {
        if (testLineIntersect(lp1,lp2,(Point)pg.get(i),(Point)pg.get(i + 1))) {
          return true;
        }
      }
    }
  }
  return false;
}","public boolean intersects(Polygon poly){
  if (poly == null) {
    return false;
  }
  if (points.size() > 2 && poly.points.size() > 2) {
    boolean started=false;
    boolean diff=false, oldDiff=false;
    int count=points.size();
    double[] xa=new double[count];
    double[] ya=new double[count];
    for (int i=0; i < count; i++) {
      Point pt=getPoint(i);
      xa[i]=pt.getX();
      ya[i]=pt.getY();
    }
    for (Iterator<Point> itr=poly.getPoints().iterator(); itr.hasNext(); ) {
      Point pt=itr.next();
      diff=testInside(count,xa,ya,pt.getX(),pt.getY());
      if (!started) {
        started=true;
        oldDiff=diff;
      }
      if (diff != oldDiff) {
        return true;
      }
      oldDiff=diff;
    }
    if (diff) {
      return true;
    }
    if (getPoints().size() > 0) {
      count=poly.getPoints().size();
      xa=new double[count];
      ya=new double[count];
      for (int i=0; i < count; i++) {
        Point pt=poly.getPoint(i);
        xa[i]=pt.getX();
        ya[i]=pt.getY();
      }
      for (Iterator<Point> itr=points.iterator(); itr.hasNext(); ) {
        Point pt=itr.next();
        if (testInside(count,xa,ya,pt.getX(),pt.getY())) {
          return true;
        }
      }
    }
  }
 else   if (points.size() == 2 || poly.points.size() == 2) {
    List<Point> line=points;
    List<Point> pg=poly.points;
    if (line.size() > 2) {
      line=poly.points;
      pg=points;
    }
    Point lp1=line.get(0);
    Point lp2=line.get(1);
    for (int i=0; i < pg.size(); i++) {
      if (i == pg.size() - 1) {
        if (testLineIntersect(lp1,lp2,pg.get(i),pg.get(0))) {
          return true;
        }
      }
 else {
        if (testLineIntersect(lp1,lp2,pg.get(i),pg.get(i + 1))) {
          return true;
        }
      }
    }
  }
  return false;
}",0.9676712328767124
71385,"public List getPoints(){
  return points;
}","public List<Point> getPoints(){
  return points;
}",0.9247311827956988
71386,"public Polygon(){
  points=new ArrayList();
}","public Polygon(){
  points=new ArrayList<Point>();
}",0.9278350515463918
71387,"/** 
 * Returns points as Point objects.
 * @return
 */
public final Point[] asPoints(){
  List pts=getPoints();
  return (Point[])pts.toArray(new Point[pts.size()]);
}","/** 
 * Returns points as Point objects.
 * @return
 */
public final Point[] asPoints(){
  List<Point> pts=getPoints();
  return pts.toArray(new Point[pts.size()]);
}",0.9520958083832336
71388,"public PrimitiveRenderEvent copy() throws ChartException {
  Area3DRenderEvent are=new Area3DRenderEvent(source);
  if (fill != null) {
    are.setBackground(FillUtil.copyOf(fill));
  }
  if (lia != null) {
    are.setOutline(LineAttributesImpl.copyInstance(lia));
  }
  for (Iterator itr=alLinesAndArcs.iterator(); itr.hasNext(); ) {
    are.add(((PrimitiveRenderEvent)itr.next()).copy());
  }
  return are;
}","public PrimitiveRenderEvent copy() throws ChartException {
  Area3DRenderEvent are=new Area3DRenderEvent(source);
  if (fill != null) {
    are.setBackground(FillUtil.copyOf(fill));
  }
  if (lia != null) {
    are.setOutline(LineAttributesImpl.copyInstance(lia));
  }
  for (Iterator<PrimitiveRenderEvent> itr=alLinesAndArcs.iterator(); itr.hasNext(); ) {
    are.add(((PrimitiveRenderEvent)itr.next()).copy());
  }
  return are;
}",0.973871733966746
71389,"/** 
 * Draws a container's border, and its background color/image if there is any.
 * @param container the containerArea whose border and background need to be drew
 */
protected void drawContainer(IContainerArea container){
  IStyle style=container.getStyle();
  if (null == style) {
    return;
  }
  if (container.getContent() != null) {
    int startX=currentX + getX(container);
    int startY=currentY + getY(container);
    int width=getWidth(container);
    int height=getHeight(container);
    Color bc=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
    pageGraphic.drawBackgroundColor(bc,startX,startY,width,height);
    drawBackgroundImage(style,startX,startY,width,height);
  }
}","/** 
 * Draws a container's border, and its background color/image if there is any.
 * @param container the containerArea whose border and background need to be drew
 */
protected void drawContainer(IContainerArea container){
  IStyle style=container.getStyle();
  if (null == style) {
    return;
  }
  if (container.getContent() != null) {
    Color bc=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
    String imageUrl=getBackgroundImageUrl(style);
    if (bc != null || imageUrl != null) {
      int startX=currentX + getX(container);
      int startY=currentY + getY(container);
      int width=getWidth(container);
      int height=getHeight(container);
      if (bc != null) {
        pageGraphic.drawBackgroundColor(bc,startX,startY,width,height);
      }
      if (imageUrl != null) {
        drawBackgroundImage(style,imageUrl,startX,startY,width,height);
      }
    }
  }
}",0.6905775075987842
71390,"/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  currentX-=getX(container);
  currentY-=getY(container);
  if (container instanceof PageArea) {
    pageGraphic.dispose();
  }
 else {
    if (container instanceof TableArea) {
      drawTableBorder((TableArea)container);
    }
 else     if (!(container instanceof CellArea)) {
      BorderInfo[] borders=cacheBorderInfo(container);
      drawBorder(borders);
    }
    if (container.needClip()) {
      endClip();
    }
  }
}","/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  currentX-=getX(container);
  currentY-=getY(container);
  if (container instanceof PageArea) {
    pageGraphic.dispose();
  }
 else {
    if (container instanceof RowArea) {
      rowStyleStack.pop();
    }
    if (container instanceof TableArea) {
      drawTableBorder((TableArea)container);
    }
 else     if (!(container instanceof CellArea)) {
      BorderInfo[] borders=cacheBorderInfo(container);
      drawBorder(borders);
    }
    if (container.needClip()) {
      endClip();
    }
  }
}",0.9435421500386698
71391,"/** 
 * The container may be a TableArea, RowArea, etc. Or just the border of textArea/imageArea. This method draws the border and background of the given container.
 * @param container the ContainerArea specified from layout
 */
protected void startContainer(IContainerArea container){
  if (container.needClip()) {
    startClip(container);
  }
  drawContainer(container);
  currentX+=getX(container);
  currentY+=getY(container);
}","/** 
 * The container may be a TableArea, RowArea, etc. Or just the border of textArea/imageArea. This method draws the border and background of the given container.
 * @param container the ContainerArea specified from layout
 */
protected void startContainer(IContainerArea container){
  if (container.needClip()) {
    startClip(container);
  }
  if (container instanceof RowArea) {
    rowStyleStack.push(container.getStyle());
  }
 else   if (container instanceof CellArea) {
    drawCell(container);
  }
 else {
    drawContainer(container);
  }
  currentX+=getX(container);
  currentY+=getY(container);
}",0.789272030651341
71392,"/** 
 * Creates a new PDF page
 * @param page the PageArea specified from layout
 */
protected void newPage(IContainerArea page){
  int pageHeight=getHeight(page);
  int pageWidth=getWidth(page);
  Color backgroundColor=PropertyUtil.getColor(page.getStyle().getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
  pageGraphic=pageDevice.newPage(pageWidth,pageHeight,backgroundColor);
  drawBackgroundImage(page.getStyle(),0,0,pageWidth,pageHeight);
}","/** 
 * Creates a new PDF page
 * @param page the PageArea specified from layout
 */
protected void newPage(IContainerArea page){
  int pageHeight=getHeight(page);
  int pageWidth=getWidth(page);
  Color backgroundColor=PropertyUtil.getColor(page.getStyle().getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
  pageGraphic=pageDevice.newPage(pageWidth,pageHeight,backgroundColor);
  IStyle style=page.getStyle();
  String imageUrl=getBackgroundImageUrl(style);
  if (imageUrl != null) {
    drawBackgroundImage(style,imageUrl,0,0,pageWidth,pageHeight);
  }
}",0.8602576808721506
71393,"/** 
 */
public void testLike(){
  String[] script=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] result=new boolean[]{true,true,true,true,true,false,false,false,true,false,true,false};
  for (int i=0; i < script.length; i++) {
    assertTrue(((Boolean)cx.evaluateString(scope,script[i],""String_Node_Str"",1,null)).booleanValue() == result[i]);
  }
}","/** 
 */
public void testLike(){
  String[] script=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] result=new boolean[]{true,true,true,true,true,false,false,false,true,false,true,false,false};
  for (int i=0; i < script.length; i++) {
    assertTrue(((Boolean)cx.evaluateString(scope,script[i],""String_Node_Str"",1,null)).booleanValue() == result[i]);
  }
}",0.9946996466431096
71394,"public final double getFullHeight(){
  return getHeight() * getLineCount() + (ins.getTop() + ins.getBottom());
}","@Override public final double getFullHeight(double fontHeight){
  return fontHeight * getLineCount() + ins.getTop() + ins.getBottom();
}",0.8548387096774194
71395,"public final double getFullHeight(){
  return getHeight() * getLineCount() + (ins.getTop() + ins.getBottom());
}","@Override public final double getFullHeight(double fontHeight){
  return fontHeight * getLineCount() + ins.getTop() + ins.getBottom();
}",0.8548387096774194
71396,"public void drawText(TextRenderEvent tre) throws ChartException {
  String fontName=convertFont(tre.getLabel().getCaption().getFont().getName());
  if (fontName != null) {
    tre.getLabel().getCaption().getFont().setName(fontName);
  }
  iv.modifyEvent(tre);
  if (!tre.getLabel().isVisible())   return;
switch (tre.getAction()) {
case TextRenderEvent.UNDEFINED:
    throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
case TextRenderEvent.RENDER_SHADOW_AT_LOCATION:
  Location lo=(Location)EcoreUtil.copy(tre.getLocation());
lo.translate(dTranslateX,dTranslateY);
lo.scale(dScale);
_tr.renderShadowAtLocation(this,tre.getTextPosition(),lo,tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_AT_LOCATION:
lo=(Location)EcoreUtil.copy(tre.getLocation());
lo.translate(dTranslateX,dTranslateY);
lo.scale(dScale);
_tr.renderTextAtLocation(this,tre.getTextPosition(),lo,tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_IN_BLOCK:
final Bounds bo=BoundsImpl.copyInstance(tre.getBlockBounds());
bo.translate(dTranslateX,dTranslateY);
bo.scale(dScale);
_tr.renderTextInBlock(this,bo,tre.getBlockAlignment(),tre.getLabel());
break;
}
}","public void drawText(TextRenderEvent tre) throws ChartException {
  String fontName=convertFont(tre.getLabel().getCaption().getFont().getName());
  if (fontName != null) {
    tre.getLabel().getCaption().getFont().setName(fontName);
  }
  iv.modifyEvent(tre);
  if (!tre.getLabel().isVisible())   return;
switch (tre.getAction()) {
case TextRenderEvent.UNDEFINED:
    throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
case TextRenderEvent.RENDER_SHADOW_AT_LOCATION:
  Location lo=LocationImpl.copyInstance(tre.getLocation());
lo.translate(dTranslateX,dTranslateY);
lo.scale(dScale);
_tr.renderShadowAtLocation(this,tre.getTextPosition(),lo,tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_AT_LOCATION:
lo=LocationImpl.copyInstance(tre.getLocation());
lo.translate(dTranslateX,dTranslateY);
lo.scale(dScale);
_tr.renderTextAtLocation(this,tre.getTextPosition(),lo,tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_IN_BLOCK:
final Bounds bo=BoundsImpl.copyInstance(tre.getBlockBounds());
bo.translate(dTranslateX,dTranslateY);
bo.scale(dScale);
_tr.renderTextInBlock(this,bo,tre.getBlockAlignment(),tre.getLabel());
break;
}
}",0.969820554649266
71397,"public final double getFullHeight(){
  return getHeight() * getLineCount() + ins.getTop() + ins.getBottom();
}","@Override public final double getFullHeight(double fontHeight){
  return fontHeight * getLineCount() + ins.getTop() + ins.getBottom();
}",0.8617886178861789
71398,"public boolean testLabelVisible(String strNew,Object oPara) throws ChartException ;","public boolean testLabelVisible(String strNew,Object para) throws ChartException {
  la.getCaption().setValue(strNew);
  itm.reuse(la,maxWrappingSize);
  try {
    BoundingBox bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    return bb.getWidth() <= maxWidth && bb.getHeight() <= maxHeight;
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
  }
}",0.2144249512670565
71399,"public WrappedInstruction getSharedEdge(I3DRenderEvent event1,I3DRenderEvent event2,double xOffset,double yOffset){
  PrimitiveRenderEvent primEvent=(PrimitiveRenderEvent)event2;
  Fill background=primEvent.getBackground();
  if (!(background instanceof ColorDefinition))   return null;
  ColorDefinition backgroundColor=(ColorDefinition)background;
  Polygon3DRenderEvent sharedPolygonEdge=null;
  WrappedInstruction wi=null;
  Object3D sharedEdgeObject=event1.getObject3D().getSharedEdge(event2.getObject3D());
  if (sharedEdgeObject != null) {
    sharedPolygonEdge=new Polygon3DRenderEvent(primEvent.getSource());
    ColorDefinition sharedBackgroundColor=(ColorDefinition)EcoreUtil.copy(backgroundColor);
    sharedPolygonEdge.setBackground(sharedBackgroundColor);
    if (backgroundColor.isSetTransparency() && backgroundColor.getTransparency() < 255) {
      int t=backgroundColor.getTransparency();
      sharedBackgroundColor.setTransparency(t * t * t / (255 * 255));
    }
    Location[] locations=sharedEdgeObject.getPoints2D(xOffset,yOffset);
    sharedPolygonEdge.setPoints(locations);
    wi=new WrappedInstruction(null,sharedPolygonEdge,PrimitiveRenderEvent.FILL);
  }
  return wi;
}","public WrappedInstruction getSharedEdge(I3DRenderEvent event1,I3DRenderEvent event2,double xOffset,double yOffset){
  PrimitiveRenderEvent primEvent=(PrimitiveRenderEvent)event2;
  Fill background=primEvent.getBackground();
  if (!(background instanceof ColorDefinition))   return null;
  ColorDefinition backgroundColor=(ColorDefinition)background;
  Polygon3DRenderEvent sharedPolygonEdge=null;
  WrappedInstruction wi=null;
  Object3D sharedEdgeObject=event1.getObject3D().getSharedEdge(event2.getObject3D());
  if (sharedEdgeObject != null) {
    sharedPolygonEdge=new Polygon3DRenderEvent(primEvent.getSource());
    ColorDefinition sharedBackgroundColor=(ColorDefinition)FillUtil.copyOf(backgroundColor);
    sharedPolygonEdge.setBackground(sharedBackgroundColor);
    if (backgroundColor.isSetTransparency() && backgroundColor.getTransparency() < 255) {
      int t=backgroundColor.getTransparency();
      sharedBackgroundColor.setTransparency(t * t * t / (255 * 255));
    }
    Location[] locations=sharedEdgeObject.getPoints2D(xOffset,yOffset);
    sharedPolygonEdge.setPoints(locations);
    wi=new WrappedInstruction(null,sharedPolygonEdge,PrimitiveRenderEvent.FILL);
  }
  return wi;
}",0.9954109303295786
71400,"/** 
 * @param xs
 * @param iLabelLocation
 * @param la
 * @param dX
 * @param dY
 * @param dWrapping the max size for wrapping by pixels
 * @return
 * @throws IllegalArgumentException
 */
public static final BoundingBox computeBox(IDisplayServer xs,int iLabelLocation,Label la,double dX,double dY,double dWrapping) throws IllegalArgumentException {
  double dAngleInDegrees=la.getCaption().getFont().getRotation();
  if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
    throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(xs.getULocale()).getString(""String_Node_Str""),new Object[]{la}));
  }
  final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
  final double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
  final ITextMetrics itm=xs.getTextMetrics(la);
  try {
    if (dWrapping > 0) {
      itm.reuse(la,dWrapping);
    }
    double dW=itm.getFullWidth();
    double dH=itm.getFullHeight();
    BoundingBox bb=null;
    if ((iLabelLocation & LEFT) == LEFT) {
      if (dAngleInDegrees == 0) {
        bb=new BoundingBox(LEFT,dX - dW,dY - dH / 2,dW,dH,dH / 2);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        bb=new BoundingBox(LEFT,dX - (dH * dSineTheta + dW * dCosTheta),dY - dH * dCosTheta,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dH * dCosTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        bb=new BoundingBox(LEFT,dX - (dH * dSineTheta + dW * dCosTheta),dY - dW * dSineTheta,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dW * dSineTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        bb=new BoundingBox(LEFT,dX - dH,dY - dW / 2,dH,dW,dW / 2);
      }
    }
 else     if ((iLabelLocation & RIGHT) == RIGHT) {
      if (dAngleInDegrees == 0) {
        bb=new BoundingBox(RIGHT,dX,dY - dH / 2,dW,dH,dH / 2);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        bb=new BoundingBox(RIGHT,dX,dY - dW * dSineTheta,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dW * dSineTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        bb=new BoundingBox(RIGHT,dX,dY - dH * dCosTheta,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dH * dCosTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        bb=new BoundingBox(RIGHT,dX,dY - dW / 2,dH,dW,dW / 2);
      }
    }
 else     if ((iLabelLocation & BOTTOM) == BOTTOM) {
      if (dAngleInDegrees == 0) {
        bb=new BoundingBox(BOTTOM,dX - dW / 2,dY,dW,dH,dW / 2);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        bb=new BoundingBox(BOTTOM,dX - dW * dCosTheta,dY,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dW * dCosTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        bb=new BoundingBox(BOTTOM,dX - dH * dSineTheta,dY,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dH * dSineTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        bb=new BoundingBox(BOTTOM,dX - dH / 2,dY,dH,dW,dH / 2);
      }
    }
 else     if ((iLabelLocation & TOP) == TOP) {
      if (dAngleInDegrees == 0) {
        bb=new BoundingBox(TOP,dX - dW / 2,dY - dH,dW,dH,dW / 2);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        bb=new BoundingBox(TOP,dX - dH * dSineTheta,dY - (dH * dCosTheta + dW * dSineTheta),dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dH * dSineTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        bb=new BoundingBox(TOP,dX - dW * dCosTheta,dY - (dH * dCosTheta + dW * dSineTheta),dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dW * dCosTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        bb=new BoundingBox(TOP,dX - dH / 2,dY - dW,dH,dW,dH / 2);
      }
    }
 else     if ((iLabelLocation & INSIDE) == INSIDE) {
      if (dAngleInDegrees == 0) {
        bb=new BoundingBox(INSIDE,dX - dW / 2,dY - dH / 2,dW,dH,0);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        bb=new BoundingBox(INSIDE,dX - (dH * dSineTheta + dW * dCosTheta) / 2,dY - (dH * dCosTheta + dW * dSineTheta) / 2,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,0);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        bb=new BoundingBox(INSIDE,dX - (dW * dCosTheta + dH * dSineTheta) / 2,dY - (dH * dCosTheta + dW * dSineTheta) / 2,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,0);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        bb=new BoundingBox(INSIDE,dX - dH / 2,dY - dW / 2,dH,dW,0);
      }
    }
    return bb;
  }
  finally {
    itm.dispose();
  }
}","public static final BoundingBox computeBox(IDisplayServer xs,int iLabelLocation,Label la,double dX,double dY,double dWrapping,Double fontHeight) throws IllegalArgumentException {
  double dAngleInDegrees=la.getCaption().getFont().getRotation();
  if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
    throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(xs.getULocale()).getString(""String_Node_Str""),new Object[]{la}));
  }
  final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
  final double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
  final ITextMetrics itm=xs.getTextMetrics(la);
  try {
    if (dWrapping > 0) {
      itm.reuse(la,dWrapping);
    }
    double dW=itm.getFullWidth();
    double dH=fontHeight == null ? itm.getFullHeight() : itm.getFullHeight(fontHeight);
    BoundingBox bb=null;
    if ((iLabelLocation & LEFT) == LEFT) {
      if (dAngleInDegrees == 0) {
        bb=new BoundingBox(LEFT,dX - dW,dY - dH / 2,dW,dH,dH / 2);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        bb=new BoundingBox(LEFT,dX - (dH * dSineTheta + dW * dCosTheta),dY - dH * dCosTheta,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dH * dCosTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        bb=new BoundingBox(LEFT,dX - (dH * dSineTheta + dW * dCosTheta),dY - dW * dSineTheta,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dW * dSineTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        bb=new BoundingBox(LEFT,dX - dH,dY - dW / 2,dH,dW,dW / 2);
      }
    }
 else     if ((iLabelLocation & RIGHT) == RIGHT) {
      if (dAngleInDegrees == 0) {
        bb=new BoundingBox(RIGHT,dX,dY - dH / 2,dW,dH,dH / 2);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        bb=new BoundingBox(RIGHT,dX,dY - dW * dSineTheta,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dW * dSineTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        bb=new BoundingBox(RIGHT,dX,dY - dH * dCosTheta,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dH * dCosTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        bb=new BoundingBox(RIGHT,dX,dY - dW / 2,dH,dW,dW / 2);
      }
    }
 else     if ((iLabelLocation & BOTTOM) == BOTTOM) {
      if (dAngleInDegrees == 0) {
        bb=new BoundingBox(BOTTOM,dX - dW / 2,dY,dW,dH,dW / 2);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        bb=new BoundingBox(BOTTOM,dX - dW * dCosTheta,dY,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dW * dCosTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        bb=new BoundingBox(BOTTOM,dX - dH * dSineTheta,dY,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dH * dSineTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        bb=new BoundingBox(BOTTOM,dX - dH / 2,dY,dH,dW,dH / 2);
      }
    }
 else     if ((iLabelLocation & TOP) == TOP) {
      if (dAngleInDegrees == 0) {
        bb=new BoundingBox(TOP,dX - dW / 2,dY - dH,dW,dH,dW / 2);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        bb=new BoundingBox(TOP,dX - dH * dSineTheta,dY - (dH * dCosTheta + dW * dSineTheta),dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dH * dSineTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        bb=new BoundingBox(TOP,dX - dW * dCosTheta,dY - (dH * dCosTheta + dW * dSineTheta),dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,dW * dCosTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        bb=new BoundingBox(TOP,dX - dH / 2,dY - dW,dH,dW,dH / 2);
      }
    }
 else     if ((iLabelLocation & INSIDE) == INSIDE) {
      if (dAngleInDegrees == 0) {
        bb=new BoundingBox(INSIDE,dX - dW / 2,dY - dH / 2,dW,dH,0);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        bb=new BoundingBox(INSIDE,dX - (dH * dSineTheta + dW * dCosTheta) / 2,dY - (dH * dCosTheta + dW * dSineTheta) / 2,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,0);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        bb=new BoundingBox(INSIDE,dX - (dW * dCosTheta + dH * dSineTheta) / 2,dY - (dH * dCosTheta + dW * dSineTheta) / 2,dH * dSineTheta + dW * dCosTheta,dH * dCosTheta + dW * dSineTheta,0);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        bb=new BoundingBox(INSIDE,dX - dH / 2,dY - dW / 2,dH,dW,0);
      }
    }
    return bb;
  }
  finally {
    itm.dispose();
  }
}",0.973539588845919
71401,"/** 
 * @param iLabelLocation
 * @param g2d
 * @param fm
 * @param sText
 * @param dAngleInDegrees
 * @param dX
 * @param dY
 * @return
 */
public static final RotatedRectangle computePolygon(IDisplayServer xs,int iLabelLocation,Label la,double dX,double dY) throws IllegalArgumentException {
  double dAngleInDegrees=la.getCaption().getFont().getRotation();
  final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
  final double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
  final ITextMetrics itm=xs.getTextMetrics(la);
  try {
    double dW=itm.getFullWidth();
    double dH=itm.getFullHeight();
    RotatedRectangle rr=null;
    if ((iLabelLocation & LEFT) == LEFT) {
      if (dAngleInDegrees == 0) {
        rr=new RotatedRectangle(dX - dW,dY - dH / 2,dX,dY - dH / 2,dX,dY + dH / 2,dX - dW,dY + dH / 2);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        rr=new RotatedRectangle(dX - dH * dSineTheta - dW * dCosTheta,dY - dH * dCosTheta + dW * dSineTheta,dX - dH * dSineTheta,dY - dH * dCosTheta,dX,dY,dX - dW * dCosTheta,dY + dW * dSineTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        rr=new RotatedRectangle(dX - dW * dCosTheta,dY - dW * dSineTheta,dX,dY,dX - dH * dSineTheta,dY + dH * dCosTheta,dX - dH * dSineTheta - dW * dCosTheta,dY + dH * dCosTheta - dW * dSineTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        rr=new RotatedRectangle(dX - dH,dY - dW / 2,dX,dY - dW / 2,dX,dY + dW / 2,dX - dH,dY + dW / 2);
      }
    }
 else     if ((iLabelLocation & RIGHT) == RIGHT) {
      if (dAngleInDegrees == 0) {
        rr=new RotatedRectangle(dX,dY - dH / 2,dX + dW,dY - dH / 2,dX + dW,dY + dH / 2,dX,dY + dH / 2);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        rr=new RotatedRectangle(dX,dY,dX + dW * dCosTheta,dY - dW * dSineTheta,dX + dW * dCosTheta + dH * dSineTheta,dY - dW * dSineTheta + dH * dCosTheta,dX + dH * dSineTheta,dY + dH * dCosTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        rr=new RotatedRectangle(dX + dH * dSineTheta,dY - dH * dCosTheta,dX + dH * dSineTheta + dW * dCosTheta,dY - dH * dCosTheta + dW * dSineTheta,dX + dW * dCosTheta,dY + dW * dSineTheta,dX,dY);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        rr=new RotatedRectangle(dX,dY - dW / 2,dX + dH,dY - dW / 2,dX + dH,dY + dW / 2,dX,dY + dW / 2);
      }
    }
 else     if ((iLabelLocation & BOTTOM) == BOTTOM) {
      if (dAngleInDegrees == 0) {
        rr=new RotatedRectangle(dX - dW / 2,dY,dX + dW / 2,dY,dX + dW / 2,dY + dH,dX - dW / 2,dY + dH);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        rr=new RotatedRectangle(dX - dW * dCosTheta,dY + dW * dSineTheta,dX,dY,dX + dH * dSineTheta,dY + dH * dCosTheta,dX + dH * dSineTheta - dW * dCosTheta,dY + dH * dCosTheta + dW * dSineTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        rr=new RotatedRectangle(dX,dY,dX + dW * dCosTheta,dY + dW * dSineTheta,dX + dW * dCosTheta - dH * dSineTheta,dY + dW * dSineTheta + dH * dCosTheta,dX - dH * dSineTheta,dY + dH * dCosTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        rr=new RotatedRectangle(dX - dH / 2,dY,dX + dH / 2,dY,dX + dH / 2,dY + dW,dX - dH / 2,dY + dW);
      }
    }
 else     if ((iLabelLocation & TOP) == TOP) {
      if (dAngleInDegrees == 0) {
        rr=new RotatedRectangle(dX - dW / 2,dY - dH,dX + dW / 2,dY - dH,dX + dW / 2,dY,dX - dW / 2,dY);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        rr=new RotatedRectangle(dX - dH * dSineTheta,dY - dH * dCosTheta,dX - dH * dSineTheta + dW * dCosTheta,dY - dH * dCosTheta - dW * dSineTheta,dX + dW * dCosTheta,dY - dW * dSineTheta,dX,dY);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        rr=new RotatedRectangle(dX - dW * dCosTheta + dH * dSineTheta,dY - dW * dSineTheta - dH * dCosTheta,dX + dH * dSineTheta,dY - dH * dCosTheta,dX,dY,dX - dW * dCosTheta,dY - dW * dSineTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        rr=new RotatedRectangle(dX - dH / 2,dY - dW,dX + dH / 2,dY - dW,dX + dH / 2,dY,dX - dH / 2,dY);
      }
    }
 else     if ((iLabelLocation & INSIDE) == INSIDE) {
      if (dAngleInDegrees == 0) {
        rr=new RotatedRectangle(dX - dW / 2,dY - dH / 2,dX + dW / 2,dY - dH / 2,dX + dW / 2,dY + dH / 2,dX - dW / 2,dY + dH / 2);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        rr=new RotatedRectangle(dX - dH / 2 * dSineTheta - dW / 2 * dCosTheta,dY - dH / 2 * dCosTheta + dW / 2 * dSineTheta,dX - dH / 2 * dSineTheta + dW / 2 * dCosTheta,dY - dH / 2 * dCosTheta - dW / 2 * dSineTheta,dX + dH / 2 * dSineTheta + dW / 2 * dCosTheta,dY + dH / 2 * dCosTheta - dW / 2 * dSineTheta,dX + dH / 2 * dSineTheta - dW / 2 * dCosTheta,dY + dH / 2 * dCosTheta + dW / 2 * dSineTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        rr=new RotatedRectangle(dX - dW / 2 * dCosTheta + dH / 2 * dSineTheta,dY - dW / 2 * dSineTheta - dH / 2 * dCosTheta,dX + dH / 2 * dSineTheta + dW / 2 * dCosTheta,dY - dH / 2 * dCosTheta + dW / 2 * dSineTheta,dX + dW / 2 * dCosTheta - dH / 2 * dSineTheta,dY + dH / 2 * dCosTheta + dW / 2 * dSineTheta,dX - dW / 2 * dCosTheta - dH / 2 * dSineTheta,dY - dW / 2 * dSineTheta + dH / 2 * dCosTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        rr=new RotatedRectangle(dX - dH / 2,dY - dW / 2,dX + dH / 2,dY - dW / 2,dX + dH / 2,dY + dW / 2,dX - dH / 2,dY + dW / 2);
      }
    }
    return rr;
  }
  finally {
    itm.dispose();
  }
}","/** 
 * @param xs
 * @param iLabelLocation
 * @param la
 * @param dX
 * @param dY
 * @param fontHeight , see also: computeFontHeight
 * @return
 * @throws IllegalArgumentException
 */
public static final RotatedRectangle computePolygon(IDisplayServer xs,int iLabelLocation,Label la,double dX,double dY,Double fontHeight) throws IllegalArgumentException {
  double dAngleInDegrees=la.getCaption().getFont().getRotation();
  final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
  final double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
  final ITextMetrics itm=xs.getTextMetrics(la);
  try {
    double dW=itm.getFullWidth();
    double dH=fontHeight == null ? itm.getFullHeight() : itm.getFullHeight(fontHeight);
    RotatedRectangle rr=null;
    if ((iLabelLocation & LEFT) == LEFT) {
      if (dAngleInDegrees == 0) {
        rr=new RotatedRectangle(dX - dW,dY - dH / 2,dX,dY - dH / 2,dX,dY + dH / 2,dX - dW,dY + dH / 2);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        rr=new RotatedRectangle(dX - dH * dSineTheta - dW * dCosTheta,dY - dH * dCosTheta + dW * dSineTheta,dX - dH * dSineTheta,dY - dH * dCosTheta,dX,dY,dX - dW * dCosTheta,dY + dW * dSineTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        rr=new RotatedRectangle(dX - dW * dCosTheta,dY - dW * dSineTheta,dX,dY,dX - dH * dSineTheta,dY + dH * dCosTheta,dX - dH * dSineTheta - dW * dCosTheta,dY + dH * dCosTheta - dW * dSineTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        rr=new RotatedRectangle(dX - dH,dY - dW / 2,dX,dY - dW / 2,dX,dY + dW / 2,dX - dH,dY + dW / 2);
      }
    }
 else     if ((iLabelLocation & RIGHT) == RIGHT) {
      if (dAngleInDegrees == 0) {
        rr=new RotatedRectangle(dX,dY - dH / 2,dX + dW,dY - dH / 2,dX + dW,dY + dH / 2,dX,dY + dH / 2);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        rr=new RotatedRectangle(dX,dY,dX + dW * dCosTheta,dY - dW * dSineTheta,dX + dW * dCosTheta + dH * dSineTheta,dY - dW * dSineTheta + dH * dCosTheta,dX + dH * dSineTheta,dY + dH * dCosTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        rr=new RotatedRectangle(dX + dH * dSineTheta,dY - dH * dCosTheta,dX + dH * dSineTheta + dW * dCosTheta,dY - dH * dCosTheta + dW * dSineTheta,dX + dW * dCosTheta,dY + dW * dSineTheta,dX,dY);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        rr=new RotatedRectangle(dX,dY - dW / 2,dX + dH,dY - dW / 2,dX + dH,dY + dW / 2,dX,dY + dW / 2);
      }
    }
 else     if ((iLabelLocation & BOTTOM) == BOTTOM) {
      if (dAngleInDegrees == 0) {
        rr=new RotatedRectangle(dX - dW / 2,dY,dX + dW / 2,dY,dX + dW / 2,dY + dH,dX - dW / 2,dY + dH);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        rr=new RotatedRectangle(dX - dW * dCosTheta,dY + dW * dSineTheta,dX,dY,dX + dH * dSineTheta,dY + dH * dCosTheta,dX + dH * dSineTheta - dW * dCosTheta,dY + dH * dCosTheta + dW * dSineTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        rr=new RotatedRectangle(dX,dY,dX + dW * dCosTheta,dY + dW * dSineTheta,dX + dW * dCosTheta - dH * dSineTheta,dY + dW * dSineTheta + dH * dCosTheta,dX - dH * dSineTheta,dY + dH * dCosTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        rr=new RotatedRectangle(dX - dH / 2,dY,dX + dH / 2,dY,dX + dH / 2,dY + dW,dX - dH / 2,dY + dW);
      }
    }
 else     if ((iLabelLocation & TOP) == TOP) {
      if (dAngleInDegrees == 0) {
        rr=new RotatedRectangle(dX - dW / 2,dY - dH,dX + dW / 2,dY - dH,dX + dW / 2,dY,dX - dW / 2,dY);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        rr=new RotatedRectangle(dX - dH * dSineTheta,dY - dH * dCosTheta,dX - dH * dSineTheta + dW * dCosTheta,dY - dH * dCosTheta - dW * dSineTheta,dX + dW * dCosTheta,dY - dW * dSineTheta,dX,dY);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        rr=new RotatedRectangle(dX - dW * dCosTheta + dH * dSineTheta,dY - dW * dSineTheta - dH * dCosTheta,dX + dH * dSineTheta,dY - dH * dCosTheta,dX,dY,dX - dW * dCosTheta,dY - dW * dSineTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        rr=new RotatedRectangle(dX - dH / 2,dY - dW,dX + dH / 2,dY - dW,dX + dH / 2,dY,dX - dH / 2,dY);
      }
    }
 else     if ((iLabelLocation & INSIDE) == INSIDE) {
      if (dAngleInDegrees == 0) {
        rr=new RotatedRectangle(dX - dW / 2,dY - dH / 2,dX + dW / 2,dY - dH / 2,dX + dW / 2,dY + dH / 2,dX - dW / 2,dY + dH / 2);
      }
 else       if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
        rr=new RotatedRectangle(dX - dH / 2 * dSineTheta - dW / 2 * dCosTheta,dY - dH / 2 * dCosTheta + dW / 2 * dSineTheta,dX - dH / 2 * dSineTheta + dW / 2 * dCosTheta,dY - dH / 2 * dCosTheta - dW / 2 * dSineTheta,dX + dH / 2 * dSineTheta + dW / 2 * dCosTheta,dY + dH / 2 * dCosTheta - dW / 2 * dSineTheta,dX + dH / 2 * dSineTheta - dW / 2 * dCosTheta,dY + dH / 2 * dCosTheta + dW / 2 * dSineTheta);
      }
 else       if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
        rr=new RotatedRectangle(dX - dW / 2 * dCosTheta + dH / 2 * dSineTheta,dY - dW / 2 * dSineTheta - dH / 2 * dCosTheta,dX + dH / 2 * dSineTheta + dW / 2 * dCosTheta,dY - dH / 2 * dCosTheta + dW / 2 * dSineTheta,dX + dW / 2 * dCosTheta - dH / 2 * dSineTheta,dY + dH / 2 * dCosTheta + dW / 2 * dSineTheta,dX - dW / 2 * dCosTheta - dH / 2 * dSineTheta,dY - dW / 2 * dSineTheta + dH / 2 * dCosTheta);
      }
 else       if (dAngleInDegrees == 90 || dAngleInDegrees == -90) {
        rr=new RotatedRectangle(dX - dH / 2,dY - dW / 2,dX + dH / 2,dY - dW / 2,dX + dH / 2,dY + dW / 2,dX - dH / 2,dY + dW / 2);
      }
    }
    return rr;
  }
  finally {
    itm.dispose();
  }
}",0.9805255548941236
71402,"/** 
 * Check whether the input aggregation script expression is empty
 * @param aggrInfo
 * @return
 */
private boolean isEmptyAggrArgument(IAggrInfo aggrInfo){
  return aggrInfo.getArgument().length == 0 || aggrInfo.getArgument()[0] == null;
}","/** 
 * Check whether the input aggregation script expression is empty
 * @param aggrInfo
 * @return
 */
private boolean isEmptyAggrArgument(IAggrInfo aggrInfo){
  return aggrInfo.getArgument().length == 0 || aggrInfo.getArgument()[0] == null || ((IScriptExpression)aggrInfo.getArgument()[0]).getText() == null || ((IScriptExpression)aggrInfo.getArgument()[0]).getText().trim().length() == 0;
}",0.7668231611893583
71403,"private StyleEntry initStyle(IStyle style,ContainerSizeInfo rule){
  StyleEntry entry=StyleBuilder.createStyleEntry(style);
  if (engine.getContainers().size() > 0) {
    XlsContainer container=engine.getCurrentContainer();
    StyleEntry cEntry=container.getStyle();
    StyleBuilder.mergeInheritableProp(cEntry,entry);
    applyHBorders(cEntry,entry,container.getSizeInfo(),rule);
  }
  return entry;
}","private StyleEntry initStyle(IStyle style,ContainerSizeInfo rule){
  StyleEntry entry=StyleBuilder.createStyleEntry(style);
  ;
  if (!containerStyles.isEmpty()) {
    StyleEntry centry=containerStyles.peek();
    StyleBuilder.mergeInheritableProp(centry,entry);
  }
  if (engine.getContainers().size() > 0) {
    XlsContainer container=engine.getCurrentContainer();
    StyleEntry cEntry=container.getStyle();
    StyleBuilder.mergeInheritableProp(cEntry,entry);
    applyHBorders(cEntry,entry,container.getSizeInfo(),rule);
  }
  return entry;
}",0.8496319663512093
71404,"/** 
 * @param queryResults
 * @param queryScope
 * @throws BirtException 
 */
private ResultIterator(QueryResults queryResults,ExprManager exprManager,Scriptable queryScope,Scriptable parentScope) throws BirtException {
  this.queryResults=queryResults;
  this.exprManager=exprManager;
  this.queryScope=queryScope;
  this.jsDummyRowObject=new JSDummyRowObject(exprManager,queryScope,parentScope,session.getEngineContext().getScriptContext());
  queryScope.put(""String_Node_Str"",queryScope,jsDummyRowObject);
  this.getRdSaveUtil().doSaveStart();
  exprValueMap=new HashMap();
  Map exprMap=getBindingMap(exprManager.getBindingExprs());
  Iterator it=exprMap.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Entry)it.next();
    String exprName=(String)entry.getKey();
    IBaseExpression baseExpr=(IBaseExpression)entry.getValue();
    Object exprValue=ExprEvaluateUtil.evaluateRawExpression(baseExpr,queryScope,session.getEngineContext().getScriptContext());
    exprValueMap.put(exprName,exprValue);
  }
  this.getRdSaveUtil().doSaveExpr(exprValueMap);
}","/** 
 * @param queryResults
 * @param queryScope
 * @throws BirtException 
 */
private ResultIterator(QueryResults queryResults,ExprManager exprManager,Scriptable queryScope,Scriptable parentScope) throws BirtException {
  this.queryResults=queryResults;
  this.exprManager=exprManager;
  this.queryScope=queryScope;
  this.jsDummyRowObject=new JSDummyRowObject(exprManager,queryScope,parentScope,session.getEngineContext().getScriptContext());
  queryScope.put(""String_Node_Str"",queryScope,jsDummyRowObject);
  this.getRdSaveUtil().doSaveStart();
  exprValueMap=new HashMap();
  Map exprMap=getBindingMap(exprManager.getBindingExprs());
  Iterator it=exprMap.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Entry)it.next();
    String exprName=(String)entry.getKey();
    IBaseExpression baseExpr=(IBaseExpression)entry.getValue();
    Object exprValue=ExprEvaluateUtil.evaluateRawExpression(baseExpr,queryScope,session.getEngineContext().getScriptContext());
    exprValueMap.put(exprName,exprValue);
  }
  this.getRdSaveUtil().doSaveExpr(exprValueMap);
  if (needCache()) {
    try {
      createCacheOutputStream();
      saveMetaData();
      IOUtil.writeInt(this.rowOutputStream,1);
      cacheRow();
    }
 catch (    IOException e) {
      throw new DataException(ResourceConstants.CREATE_CACHE_TEMPFILE_ERROR);
    }
  }
}",0.8872427983539095
71405,"public boolean supportsBreakpoint(IBreakpoint breakpoint){
  return breakpoint instanceof ScriptLineBreakpoint && ((ScriptLineBreakpoint)breakpoint).getFileName().equals(getFileName());
}","public boolean supportsBreakpoint(IBreakpoint breakpoint){
  if (!(breakpoint instanceof ScriptLineBreakpoint)) {
    return false;
  }
  String str=((ScriptLineBreakpoint)breakpoint).getFileName();
  if (str == null || str.length() == 0) {
    return false;
  }
  return str.equals(getFileName());
}",0.7227926078028748
71406,"/** 
 * Gets the file name.
 * @return
 */
public String getFileName(){
  try {
    return (String)getMarker().getAttribute(FILENAME);
  }
 catch (  CoreException e) {
    logger.warning(e.getMessage());
    throw new Error(""String_Node_Str"");
  }
}","/** 
 * Gets the file name.
 * @return
 */
public String getFileName(){
  try {
    return (String)getMarker().getAttribute(FILENAME);
  }
 catch (  CoreException e) {
    return ""String_Node_Str"";
  }
}",0.8672566371681416
71407,"public ConcreteImageLayout(LayoutEngineContext context,ContainerLayout parentContext,IContent content){
  super(context,parentContext,content);
}","public ConcreteImageLayout(LayoutEngineContext context,ContainerLayout parentContext,IContent content,Image imageObject){
  super(context,parentContext,content);
  this.imageObject=imageObject;
}",0.8529411764705882
71408,"/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content) throws BadElementException, MalformedURLException, IOException {
  Image image=null;
  String uri=content.getURI();
  String mimeType=content.getMIMEType();
  String extension=content.getExtension();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    return null;
  }
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
  URL url=design.findResource(uri,IResourceLocator.IMAGE);
InputStream in=url.openStream();
try {
byte[] buffer;
if (SvgFile.isSvg(content.getURI())) {
  buffer=SvgFile.transSvgToArray(in);
}
 else {
  ArrayList<Byte> bytes=new ArrayList<Byte>();
  int data=in.read();
  while (data != -1) {
    bytes.add((byte)data);
    data=in.read();
  }
  buffer=new byte[bytes.size()];
  for (int i=0; i < buffer.length; i++) {
    buffer[i]=bytes.get(i);
  }
}
image=Image.getInstance(buffer);
}
 catch (Exception ex) {
logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
byte[] data=content.getData();
in=new ByteArrayInputStream(data);
if (SvgFile.isSvg(mimeType,uri,extension)) data=SvgFile.transSvgToArray(in);
image=Image.getInstance(data);
break;
case IImageContent.IMAGE_URL:
if (SvgFile.isSvg(uri)) {
image=Image.getInstance(SvgFile.transSvgToArray(uri));
}
 else {
image=Image.getInstance(new URL(content.getURI()));
}
break;
default :
assert(false);
}
if (image != null) {
int contentResolution=content.getResolution();
if (contentResolution != 0) {
resolutionX=contentResolution;
resolutionY=contentResolution;
}
 else {
if (0 == resolutionX || 0 == resolutionY) {
resolutionX=context.getDpi();
resolutionY=context.getDpi();
}
if (0 == resolutionX || 0 == resolutionY) {
resolutionX=96;
resolutionY=96;
}
}
return new Dimension((int)(image.plainWidth() * 1000 / resolutionX * 72),(int)(image.plainHeight() * 1000 / resolutionY * 72));
}
return null;
}","/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content,Image image) throws BadElementException, MalformedURLException, IOException {
  if (image != null) {
    int contentResolution=content.getResolution();
    if (contentResolution != 0) {
      resolutionX=contentResolution;
      resolutionY=contentResolution;
    }
 else {
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=context.getDpi();
        resolutionY=context.getDpi();
      }
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
    }
    return new Dimension((int)(image.plainWidth() * 1000 / resolutionX * 72),(int)(image.plainHeight() * 1000 / resolutionY * 72));
  }
  return null;
}",0.4307692307692308
71409,"protected Dimension getSpecifiedDimension(IImageContent content,int pWidth,boolean scale){
  Dimension dim=new Dimension(DEFAULT_WIDHT,DEFAULT_HEIGHT);
  try {
    intrinsic=getIntrinsicDimension(content);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage());
  }
  int specifiedWidth=getDimensionValue(content.getWidth(),pWidth);
  int specifiedHeight=getDimensionValue(content.getHeight());
  if (intrinsic == null) {
    dim.setDimension(specifiedWidth == 0 ? DEFAULT_WIDHT : specifiedWidth,specifiedHeight == 0 ? DEFAULT_HEIGHT : specifiedHeight);
    return dim;
  }
  if (scale) {
    double ratio=intrinsic.getRatio();
    if (specifiedWidth > 0) {
      if (specifiedHeight > 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,(int)(specifiedWidth / ratio));
      }
    }
 else {
      if (specifiedHeight > 0) {
        dim.setDimension((int)(specifiedHeight * ratio),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
 else {
    if (specifiedWidth > 0) {
      if (specifiedHeight > 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,intrinsic.getHeight());
      }
    }
 else {
      if (specifiedHeight > 0) {
        dim.setDimension(intrinsic.getWidth(),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
  return dim;
}","protected Dimension getSpecifiedDimension(IImageContent content,int pWidth,boolean scale){
  Dimension dim=new Dimension(DEFAULT_WIDHT,DEFAULT_HEIGHT);
  try {
    intrinsic=getIntrinsicDimension(content,imageObject);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage());
  }
  int specifiedWidth=getDimensionValue(content.getWidth(),pWidth);
  int specifiedHeight=getDimensionValue(content.getHeight());
  if (intrinsic == null) {
    dim.setDimension(specifiedWidth == 0 ? DEFAULT_WIDHT : specifiedWidth,specifiedHeight == 0 ? DEFAULT_HEIGHT : specifiedHeight);
    return dim;
  }
  if (scale) {
    double ratio=intrinsic.getRatio();
    if (specifiedWidth > 0) {
      if (specifiedHeight > 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,(int)(specifiedWidth / ratio));
      }
    }
 else {
      if (specifiedHeight > 0) {
        dim.setDimension((int)(specifiedHeight * ratio),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
 else {
    if (specifiedWidth > 0) {
      if (specifiedHeight > 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,intrinsic.getHeight());
      }
    }
 else {
      if (specifiedHeight > 0) {
        dim.setDimension(intrinsic.getWidth(),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
  return dim;
}",0.9961290322580644
71410,"protected void createActions(){
  super.createActions();
  IAction contentAssistAction=new TextOperationAction(Messages.getReportResourceBundle(),""String_Node_Str"",this,ISourceViewer.CONTENTASSIST_PROPOSALS,true);
  IAction expandAll=new TextOperationAction(Messages.getReportResourceBundle(),""String_Node_Str"",this,ProjectionViewer.EXPAND_ALL,true);
  IAction collapseAll=new TextOperationAction(Messages.getReportResourceBundle(),""String_Node_Str"",this,ProjectionViewer.COLLAPSE_ALL,true);
  IAction collapseComments=new ResourceAction(Messages.getReportResourceBundle(),""String_Node_Str""){
    public void run(){
      collapseStyle(ScriptProjectionAnnotation.SCRIPT_COMMENT);
    }
  }
;
  IAction collapseMethods=new ResourceAction(Messages.getReportResourceBundle(),""String_Node_Str""){
    public void run(){
      collapseStyle(ScriptProjectionAnnotation.SCRIPT_METHOD);
    }
  }
;
  contentAssistAction.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);
  expandAll.setActionDefinitionId(IFoldingCommandIds.FOLDING_EXPAND_ALL);
  collapseAll.setActionDefinitionId(IFoldingCommandIds.FOLDING_COLLAPSE_ALL);
  setAction(""String_Node_Str"",contentAssistAction);
  setAction(""String_Node_Str"",expandAll);
  setAction(""String_Node_Str"",collapseAll);
  setAction(""String_Node_Str"",collapseComments);
  setAction(""String_Node_Str"",collapseMethods);
}","protected void createActions(){
  super.createActions();
  IAction contentAssistAction=new TextOperationAction(Messages.getReportResourceBundle(),""String_Node_Str"",this,ISourceViewer.CONTENTASSIST_PROPOSALS,true);
  IAction expandAll=new TextOperationAction(Messages.getReportResourceBundle(),""String_Node_Str"",this,ProjectionViewer.EXPAND_ALL,true);
  IAction collapseAll=new TextOperationAction(Messages.getReportResourceBundle(),""String_Node_Str"",this,ProjectionViewer.COLLAPSE_ALL,true);
  IAction collapseComments=new ResourceAction(Messages.getReportResourceBundle(),""String_Node_Str""){
    public void run(){
      collapseStyle(ScriptProjectionAnnotation.SCRIPT_COMMENT);
    }
  }
;
  IAction collapseMethods=new ResourceAction(Messages.getReportResourceBundle(),""String_Node_Str""){
    public void run(){
      collapseStyle(ScriptProjectionAnnotation.SCRIPT_METHOD);
    }
  }
;
  contentAssistAction.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);
  expandAll.setActionDefinitionId(IFoldingCommandIds.FOLDING_EXPAND_ALL);
  collapseAll.setActionDefinitionId(IFoldingCommandIds.FOLDING_COLLAPSE_ALL);
  setAction(""String_Node_Str"",contentAssistAction);
  setAction(""String_Node_Str"",expandAll);
  setAction(""String_Node_Str"",collapseAll);
  setAction(""String_Node_Str"",collapseComments);
  setAction(""String_Node_Str"",collapseMethods);
  setAction(ITextEditorActionConstants.SAVE,new TextSaveAction(this));
}",0.9749205227834687
71411,"public void init(IEditorSite site,final IEditorInput input) throws PartInitException {
  super.init(site,input);
  try {
    reportXMLEditor=new StructuredTextEditor(){
      @Override public void doSave(      IProgressMonitor progressMonitor){
        super.doSave(progressMonitor);
        clearDirtyFlag();
        try {
          getReportEditor().refreshMarkers(input);
        }
 catch (        CoreException e) {
        }
      }
    }
;
    reportXMLEditor.init(site,input);
  }
 catch (  Exception e) {
  }
}","public void init(IEditorSite site,final IEditorInput input) throws PartInitException {
  super.init(site,input);
  try {
    reportXMLEditor=new StructuredTextEditor(){
      @Override protected void createActions(){
        super.createActions();
        setAction(ITextEditorActionConstants.SAVE,new TextSaveAction(this));
      }
      @Override public void doSave(      IProgressMonitor progressMonitor){
        super.doSave(progressMonitor);
        clearDirtyFlag();
        try {
          getReportEditor().refreshMarkers(input);
        }
 catch (        CoreException e) {
        }
      }
    }
;
    reportXMLEditor.init(site,input);
  }
 catch (  Exception e) {
  }
}",0.8633333333333333
71412,"protected void createActions(){
  super.createActions();
  IAction contentAssistAction=new TextOperationAction(Messages.getReportResourceBundle(),""String_Node_Str"",this,ISourceViewer.CONTENTASSIST_PROPOSALS,true);
  contentAssistAction.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);
  setAction(""String_Node_Str"",contentAssistAction);
}","protected void createActions(){
  super.createActions();
  IAction contentAssistAction=new TextOperationAction(Messages.getReportResourceBundle(),""String_Node_Str"",this,ISourceViewer.CONTENTASSIST_PROPOSALS,true);
  contentAssistAction.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);
  setAction(""String_Node_Str"",contentAssistAction);
  setAction(ITextEditorActionConstants.SAVE,new TextSaveAction(this));
}",0.9122373300370828
71413,"/** 
 * Since this query is running based on the data set, the old things stored in report document is no more use, and it will be safter if they are all removed.
 * @throws DataException
 */
private void cleanUpOldRD() throws DataException {
  if (true)   return;
  String basedID=this.queryDefn.getQueryResultsID();
  String _1partID=QueryResultIDUtil.get1PartID(basedID);
  if (_1partID != null)   basedID=_1partID;
  StreamManager streamManager=new StreamManager(engine.getContext(),new QueryResultInfo(queryDefn.getQueryResultsID(),null,0));
  streamManager.dropStream1(DataEngineContext.EXPR_VALUE_STREAM);
  streamManager.dropStream1(DataEngineContext.EXPR_ROWLEN_STREAM);
  QueryResultIDManager.cleanChildOfRoot(streamManager);
  streamManager.dropStream1(DataEngineContext.META_STREAM);
  streamManager.dropStream1(DataEngineContext.META_INDEX_STREAM);
}","/** 
 * Since this query is running based on the data set, the old things stored in report document is no more use, and it will be safter if they are all removed.
 * @throws DataException
 */
private void cleanUpOldRD() throws DataException {
  String basedID=this.queryDefn.getQueryResultsID();
  String _1partID=QueryResultIDUtil.get1PartID(basedID);
  if (_1partID != null)   basedID=_1partID;
  StreamManager streamManager=new StreamManager(engine.getContext(),new QueryResultInfo(queryDefn.getQueryResultsID(),null,0));
  streamManager.dropStream1(DataEngineContext.EXPR_VALUE_STREAM);
  streamManager.dropStream1(DataEngineContext.EXPR_ROWLEN_STREAM);
  QueryResultIDManager.cleanChildOfRoot(streamManager);
  streamManager.dropStream1(DataEngineContext.META_STREAM);
  streamManager.dropStream1(DataEngineContext.META_INDEX_STREAM);
}",0.9870892018779344
71414,"protected void prepareQuery() throws DataException {
  try {
    IBinding[] bindings=null;
    if (this.queryDefn.getSourceQuery() instanceof SubqueryLocator) {
      this.queryResults=engine.getQueryResults(getParentQueryResultsID((SubqueryLocator)(queryDefn.getSourceQuery())));
      IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
      if (queryDefn.getSourceQuery() instanceof SubqueryLocator) {
        ArrayList<IBinding> bindingList=new ArrayList<IBinding>();
        getSubQueryBindings(queryDefinition,((SubqueryLocator)queryDefn.getSourceQuery()).getName(),bindingList);
        addQueryBindings(bindingList,queryDefinition.getBindings().values());
        bindings=bindingList.toArray(new IBinding[0]);
      }
 else {
        bindings=(IBinding[])(queryDefinition.getBindings().values().toArray(new IBinding[0]));
      }
    }
 else {
      this.queryResults=PreparedQueryUtil.newInstance(dataEngine,(IQueryDefinition)queryDefn.getSourceQuery(),null).execute(null);
      if (queryResults != null && queryResults.getPreparedQuery() != null) {
        IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
        bindings=(IBinding[])queryDefinition.getBindings().values().toArray(new IBinding[0]);
      }
 else {
        bindings=new IBinding[0];
      }
    }
    for (int i=0; i < bindings.length; i++) {
      IBinding binding=bindings[i];
      this.queryDefn.addBinding(new Binding(binding.getBindingName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(binding.getBindingName()),binding.getDataType())));
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","protected void prepareQuery() throws DataException {
  try {
    IBinding[] bindings=null;
    if (this.queryDefn.getSourceQuery() instanceof SubqueryLocator) {
      this.queryResults=engine.getQueryResults(getParentQueryResultsID((SubqueryLocator)(queryDefn.getSourceQuery())));
      IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
      if (queryDefn.getSourceQuery() instanceof SubqueryLocator) {
        ArrayList<IBinding> bindingList=new ArrayList<IBinding>();
        getSubQueryBindings(queryDefinition,((SubqueryLocator)queryDefn.getSourceQuery()).getName(),bindingList);
        addQueryBindings(bindingList,queryDefinition.getBindings().values());
        bindings=bindingList.toArray(new IBinding[0]);
      }
 else {
        bindings=(IBinding[])(queryDefinition.getBindings().values().toArray(new IBinding[0]));
      }
    }
 else {
      this.queryResults=PreparedQueryUtil.newInstance(dataEngine,(IQueryDefinition)queryDefn.getSourceQuery(),null).execute(null);
      if (queryResults != null && queryResults.getPreparedQuery() != null) {
        IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
        bindings=(IBinding[])queryDefinition.getBindings().values().toArray(new IBinding[0]);
      }
 else {
        bindings=new IBinding[0];
      }
    }
    for (int i=0; i < bindings.length; i++) {
      IBinding binding=bindings[i];
      if (!this.queryDefn.getBindings().containsKey(binding.getBindingName()))       this.queryDefn.addBinding(new Binding(binding.getBindingName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(binding.getBindingName()),binding.getDataType())));
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.977226866532142
71415,"/** 
 * @param imageName
 * @param imageTitle
 * @param width
 * @param height
 * @param x
 * @param y
 */
private void exportImageDefn(String imageName,String imageTitle,double width,double height,double x,double y){
  println(""String_Node_Str"" + (shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + imageName + ""String_Node_Str""+ imageTitle+ ""String_Node_Str"");
  println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * @param imageName
 * @param imageTitle
 * @param width
 * @param height
 * @param x
 * @param y
 */
private void exportImageDefn(String imageName,String imageTitle,double width,double height,double x,double y,String link){
  println(""String_Node_Str"" + (shapeCount) + ""String_Node_Str"");
  if (link != null) {
    print(""String_Node_Str"" + link + ""String_Node_Str"");
  }
  println(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + imageName + ""String_Node_Str""+ imageTitle+ ""String_Node_Str"");
  println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9323843416370108
71416,"/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,String link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    println(""String_Node_Str"" + link + ""String_Node_Str""+ link+ ""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.947800586510264
71417,"/** 
 * Draws the background image at the contentByteUnder of the PPT with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PPT where the image is positioned
 * @param y the start Y coordinate at the PPT where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float positionX,float positionY,String repeat){
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  float imageWidth=0;
  float imageHeight=0;
  byte[] imageData=null;
  InputStream imageStream=null;
  try {
    URL url=new URL(imageURI);
    imageStream=url.openStream();
    imageData=getImageData(imageStream);
    imageStream.close();
    imageStream=url.openStream();
    Image image=ImageIO.read(imageStream);
    ImageIcon imageIcon=new ImageIcon(image);
    imageWidth=imageIcon.getIconWidth();
    imageHeight=imageIcon.getIconHeight();
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
 finally {
    if (imageStream != null) {
      try {
        imageStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  String extension=getImageExtension(imageURI);
  ImageInfo imageInfo=getImageInfo(imageURI,imageData,extension);
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  Position imageSize=new Position(imageWidth,imageHeight);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    exportImageDefn(imageInfo.imageName,imageInfo.imageId,imageWidth,imageHeight,position.getX(),position.getY());
  }
}","/** 
 * Draws the background image at the contentByteUnder of the PPT with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PPT where the image is positioned
 * @param y the start Y coordinate at the PPT where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float positionX,float positionY,String repeat){
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  float imageWidth=0;
  float imageHeight=0;
  byte[] imageData=null;
  InputStream imageStream=null;
  try {
    URL url=new URL(imageURI);
    imageStream=url.openStream();
    imageData=getImageData(imageStream);
    imageStream.close();
    imageStream=url.openStream();
    Image image=ImageIO.read(imageStream);
    ImageIcon imageIcon=new ImageIcon(image);
    imageWidth=imageIcon.getIconWidth();
    imageHeight=imageIcon.getIconHeight();
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
 finally {
    if (imageStream != null) {
      try {
        imageStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  String extension=getImageExtension(imageURI);
  ImageInfo imageInfo=getImageInfo(imageURI,imageData,extension);
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  Position imageSize=new Position(imageWidth,imageHeight);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    exportImageDefn(imageInfo.imageName,imageInfo.imageId,imageWidth,imageHeight,position.getX(),position.getY(),null);
  }
}",0.9989377522838326
71418,"public void drawImage(String imageId,byte[] imageData,String extension,float imageX,float imageY,float height,float width,String helpText) throws Exception {
  ImageInfo imageInfo=getImageInfo(imageId,imageData,extension);
  exportImageDefn(imageInfo.imageName,imageInfo.imageId,width,height,imageX,imageY);
}","public void drawImage(String imageId,byte[] imageData,String extension,float imageX,float imageY,float height,float width,String helpText,String link) throws Exception {
  ImageInfo imageInfo=getImageInfo(imageId,imageData,extension);
  exportImageDefn(imageInfo.imageName,imageInfo.imageId,width,height,imageX,imageY,link);
}",0.9732283464566928
71419,"protected void drawText(String text,float textX,float textY,float baseline,float width,float height,TextStyle textStyle){
  writer.drawText(text,textX,textY,width + 1f,height,textStyle.getFontInfo(),textStyle.getColor(),textStyle.isRtl());
}","protected void drawText(String text,float textX,float textY,float baseline,float width,float height,TextStyle textStyle){
  writer.drawText(text,textX,textY,width + 1f,height,textStyle.getFontInfo(),textStyle.getColor(),textStyle.isRtl(),link);
}",0.9897330595482546
71420,"public Object getSummaryValue(){
  if (values == null) {
    return null;
  }
  StringBuffer buffer=new StringBuffer();
  Iterator<String> valueIterator=values.iterator();
  while (valueIterator.hasNext()) {
    String currentValue=valueIterator.next();
    if (buffer.length() > this.maxLength - currentValue.length()) {
      break;
    }
    if (currentValue != null && currentValue.trim().length() > 0) {
      buffer.append(currentValue).append(separator);
    }
  }
  if (buffer.length() > 0) {
    buffer.deleteCharAt(buffer.length() - 1);
  }
  return buffer.toString();
}","public Object getSummaryValue(){
  if (values == null) {
    return null;
  }
  StringBuffer buffer=new StringBuffer();
  Iterator<String> valueIterator=values.iterator();
  while (valueIterator.hasNext()) {
    String currentValue=valueIterator.next();
    if (buffer.length() > this.maxLength - currentValue.length()) {
      break;
    }
    if (currentValue != null && currentValue.trim().length() > 0) {
      buffer.append(currentValue).append(separator);
    }
  }
  if (buffer.length() > 0) {
    return buffer.toString().substring(0,buffer.length() - separator.length());
  }
  return buffer.toString();
}",0.9363484087102176
71421,"public void testTotalConcatenate() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_CONCATENATE_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(4,ag.getParameterDefn().length);
  String separator=""String_Node_Str"";
  String result=""String_Node_Str"";
  ac.start();
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,null,null});
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  for (int i=0; i < str4.length; i++) {
    ac.onRow(new Object[]{str4[i],separator,null,null});
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  boolean exceedsMaxLength=false;
  for (int i=0; i < str4.length; i++) {
    ac.onRow(new Object[]{str4[i],separator,50,true});
    if (exceedsMaxLength || result.getBytes().length > 50 - str4[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str4[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  LinkedHashSet<String> objects=new LinkedHashSet<String>();
  for (int i=0; i < anyObjectArray2.length; i++) {
    if (anyObjectArray2[i] != null) {
      objects.add(anyObjectArray2[i].toString());
    }
  }
  Iterator<String> iterator=objects.iterator();
  while (iterator.hasNext()) {
    String value=iterator.next();
    ac.onRow(new Object[]{value,separator,30,false});
    if (value != null) {
      if (exceedsMaxLength || result.getBytes().length > 30 - value.length()) {
        exceedsMaxLength=true;
        continue;
      }
      result+=value;
      result+=separator;
    }
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
}","public void testTotalConcatenate() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_CONCATENATE_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(4,ag.getParameterDefn().length);
  String separator=""String_Node_Str"";
  String result=""String_Node_Str"";
  ac.start();
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,null,null});
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - separator.length());
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  for (int i=0; i < str4.length; i++) {
    ac.onRow(new Object[]{str4[i],separator,null,null});
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  boolean exceedsMaxLength=false;
  for (int i=0; i < str4.length; i++) {
    ac.onRow(new Object[]{str4[i],separator,50,true});
    if (exceedsMaxLength || result.getBytes().length > 50 - str4[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str4[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - separator.length());
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - separator.length());
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - separator.length());
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - separator.length());
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - separator.length());
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - separator.length());
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - separator.length());
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  LinkedHashSet<String> objects=new LinkedHashSet<String>();
  for (int i=0; i < anyObjectArray2.length; i++) {
    if (anyObjectArray2[i] != null) {
      objects.add(anyObjectArray2[i].toString());
    }
  }
  Iterator<String> iterator=objects.iterator();
  while (iterator.hasNext()) {
    String value=iterator.next();
    ac.onRow(new Object[]{value,separator,30,false});
    if (value != null) {
      if (exceedsMaxLength || result.getBytes().length > 30 - value.length()) {
        exceedsMaxLength=true;
        continue;
      }
      result+=value;
      result+=separator;
    }
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - separator.length());
  }
  ac.finish();
  assertEquals(result,ac.getValue());
}",0.983908911263762
71422,"public void startData(IDataContent data){
  super.startData(data);
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  if (((StyledElementDesign)data.getGenerateBy()).getMap() != null && ((StyledElementDesign)data.getGenerateBy()).getMap().getRuleCount() > 0 && data.getLabelText() != null) {
    engine.addData(data.getLabelText().trim(),data.getComputedStyle(),url,bookmark);
  }
 else   if (ExcelUtil.getType(data.getValue()).equals(Data.STRING)) {
    engine.addData(data.getText(),data.getComputedStyle(),url,bookmark);
  }
 else   if (!ExcelUtil.getType(data.getValue()).equals(Data.NUMBER)) {
    engine.addDateTime(data,data.getComputedStyle(),url,bookmark);
  }
 else {
    engine.addData(data.getValue(),data.getComputedStyle(),url,bookmark);
  }
}","public void startData(IDataContent data){
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  if (((StyledElementDesign)data.getGenerateBy()).getMap() != null && ((StyledElementDesign)data.getGenerateBy()).getMap().getRuleCount() > 0 && data.getLabelText() != null) {
    engine.addData(data.getLabelText().trim(),data.getComputedStyle(),url,bookmark);
  }
 else   if (ExcelUtil.getType(data.getValue()).equals(Data.STRING)) {
    engine.addData(data.getText(),data.getComputedStyle(),url,bookmark);
  }
 else   if (!ExcelUtil.getType(data.getValue()).equals(Data.NUMBER)) {
    engine.addDateTime(data,data.getComputedStyle(),url,bookmark);
  }
 else {
    engine.addData(data.getValue(),data.getComputedStyle(),url,bookmark);
  }
}",0.9839434810533076
71423,"/** 
 * When pagination happens, if drop cells should be finished by force, we need to end these cells and vertical align for them.
 */
public int resolveAll(){
  if (rows.size() == 0) {
    return 0;
  }
  Row row=(Row)rows.getCurrent();
  int originalRowHeight=row.getArea().getHeight();
  int height=originalRowHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (null == cell) {
      continue;
    }
    if (cell instanceof DummyCell) {
      DummyCell dummyCell=(DummyCell)cell;
      int delta=dummyCell.getDelta();
      height=Math.max(height,delta);
    }
 else {
      height=Math.max(height,cell.getHeight());
    }
    i=i + cell.getColSpan() - 1;
  }
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell == null) {
      continue;
    }
    if (cell instanceof DummyCell) {
      if (cell.getRowSpan() == 1) {
        CellArea refCell=((DummyCell)cell).getCell();
        refCell.setHeight(refCell.getHeight() + height - originalRowHeight);
        verticalAlign(refCell);
      }
 else {
        CellArea refCell=((DummyCell)cell).getCell();
        int delta=((DummyCell)cell).getDelta();
        if (delta < height) {
          refCell.setHeight(refCell.getHeight() - delta + height);
        }
        verticalAlign(refCell);
      }
    }
 else {
      cell.setHeight(height);
      verticalAlign(cell);
    }
    i=i + cell.getColSpan() - 1;
  }
  row.getArea().setHeight(height);
  return height - originalRowHeight;
}","/** 
 * When pagination happens, if drop cells should be finished by force, we need to end these cells and vertical align for them.
 */
public int resolveAll(){
  if (rows.size() == 0) {
    return 0;
  }
  Row row=(Row)rows.getCurrent();
  int originalRowHeight=row.getArea().getHeight();
  int height=originalRowHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (null == cell) {
      continue;
    }
    if (cell instanceof DummyCell) {
      DummyCell dummyCell=(DummyCell)cell;
      int delta=dummyCell.getDelta();
      height=Math.max(height,delta);
    }
 else {
      height=Math.max(height,cell.getHeight());
    }
    i=i + cell.getColSpan() - 1;
  }
  int dValue=height - originalRowHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell == null) {
      continue;
    }
    if (cell instanceof DummyCell) {
      if (cell.getRowSpan() == 1) {
        if (dValue != 0) {
          CellArea refCell=((DummyCell)cell).getCell();
          refCell.setHeight(refCell.getHeight() + height - originalRowHeight);
          verticalAlign(refCell);
        }
      }
 else {
        CellArea refCell=((DummyCell)cell).getCell();
        int delta=((DummyCell)cell).getDelta();
        if (delta < height) {
          refCell.setHeight(refCell.getHeight() - delta + height);
        }
        verticalAlign(refCell);
      }
    }
 else {
      if (dValue != 0) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    i=i + cell.getColSpan() - 1;
  }
  row.getArea().setHeight(height);
  return dValue;
}",0.951165017555059
71424,"public void startText(ITextContent text){
}","public void startText(ITextContent text){
  HyperlinkDef url=parseHyperLink(text);
  BookmarkDef bookmark=getBookmark(text);
  engine.addData(text.getText(),text.getComputedStyle(),url,bookmark);
}",0.3583333333333333
71425,"/** 
 * Get the evaluated result by the ScriptExpression
 * @param aggrIndex
 * @param aggrInfo
 * @param i
 * @throws DataException
 */
private void evaluateArgsValue(int aggrIndex,IAggrInfo aggrInfo,int i) throws DataException {
  if (i >= aggrInfo.getArgument().length) {
    return;
  }
  IBaseExpression argExpr=aggrInfo.getArgument()[i];
  checkExpression(aggrInfo,argExpr);
  try {
    aggrArgs[aggrIndex][i]=ExprEvaluateUtil.evaluateValue(argExpr,this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope(),this.populator.getSession().getEngineContext().getScriptContext());
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * Get the evaluated result by the ScriptExpression
 * @param aggrIndex
 * @param aggrInfo
 * @param i
 * @throws DataException
 */
private void evaluateArgsValue(int aggrIndex,IAggrInfo aggrInfo,int i,boolean isOptional) throws DataException {
  if (i >= aggrInfo.getArgument().length) {
    return;
  }
  IBaseExpression argExpr=aggrInfo.getArgument()[i];
  if (!isOptional) {
    checkExpression(aggrInfo,argExpr);
  }
 else   if (argExpr == null || ((IScriptExpression)argExpr).getText() == null || ((IScriptExpression)argExpr).getText().trim().length() == 0) {
    aggrArgs[aggrIndex][i]=null;
    return;
  }
  try {
    aggrArgs[aggrIndex][i]=ExprEvaluateUtil.evaluateValue(argExpr,this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope(),this.populator.getSession().getEngineContext().getScriptContext());
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.8573092603377985
71426,"/** 
 * Check whether the input aggregation script expression is empty
 * @param aggrInfo
 * @return
 */
private boolean isEmptyScriptExpression(IAggrInfo aggrInfo){
  return aggrInfo.getArgument().length == 0 || aggrInfo.getArgument()[0] == null || ((IScriptExpression)aggrInfo.getArgument()[0]).getText() == null;
}","/** 
 * Checks whether the ScriptExpression has empty expression text
 * @param argExpr
 * @return
 */
private boolean isEmptyScriptExpression(IBaseExpression argExpr){
  IScriptExpression expr=(IScriptExpression)argExpr;
  return expr == null || expr.getText() == null || expr.getText().trim().length() == 0;
}",0.4585987261146497
71427,"/** 
 * Calculate the value by row
 * @param aggrIndex
 * @param startingGroupLevel
 * @param endingGroupLevel
 * @param context
 * @param scope
 * @throws DataException
 */
private boolean onRow(int aggrIndex,int startingGroupLevel,int endingGroupLevel,boolean populateValue) throws DataException {
  IAggrInfo aggrInfo=getAggrInfo(aggrIndex);
  Accumulator acc=null;
  boolean newGroup=false;
  IParameterDefn[] argDefs=aggrInfo.getAggregation().getParameterDefn();
  if (startingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc=accumulatorManagers[aggrIndex].next();
    acc.start();
    newGroup=true;
  }
 else {
    acc=accumulatorManagers[aggrIndex].getCurrentAccumulator();
  }
  boolean accepted=true;
  if (aggrInfo.getFilter() != null) {
    try {
      Object filterResult=ExprEvaluateUtil.evaluateValue(aggrInfo.getFilter(),this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope(),this.populator.getSession().getEngineContext().getScriptContext());
      if (filterResult == null)       accepted=true;
 else       accepted=DataTypeUtil.toBoolean(filterResult).booleanValue();
    }
 catch (    BirtException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  if (aggrInfo.getCalcualteLevel() > 0) {
    if (startingGroupLevel > aggrInfo.getCalcualteLevel())     accepted=false;
  }
  if (accepted) {
    final IBaseExpression[] arguments=aggrInfo.getArgument();
    if (!isFunctionCount(aggrInfo) && arguments == null) {
      DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
      wrapException(aggrIndex,e);
      return false;
    }
    try {
      int optionalAgrsNum=0;
      for (int i=0; i < argDefs.length; i++) {
        if (argDefs[i].isOptional()) {
          optionalAgrsNum++;
        }
        if (aggrInfo.getArgument() == null || i >= arguments.length + optionalAgrsNum) {
          throw new DataException(ResourceConstants.AGGREGATION_ARGUMENT_ERROR,new Object[]{argDefs[i].getName(),aggrInfo.getName()});
        }
        if (isEmptyScriptExpression(aggrInfo)) {
          aggrArgs[aggrIndex]=null;
        }
 else {
          evaluateArgsValue(aggrIndex,aggrInfo,i);
        }
      }
      if (aggrInfo.getArgument() == null || ((aggrInfo.getArgument().length != argDefs.length) && !(aggrInfo.getArgument().length == (argDefs.length - optionalAgrsNum)))) {
        DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
        wrapException(aggrIndex,e);
        return false;
      }
      acc.onRow(aggrArgs[aggrIndex]);
      newGroup=false;
    }
 catch (    DataException e) {
      wrapException(aggrIndex,e);
      return false;
    }
  }
  boolean isRunning=(aggrInfo.getAggregation().getType() == IAggrFunction.RUNNING_AGGR);
  if (isRunning && populateValue) {
    Object value=acc.getValue();
    currentRoundAggrValue[aggrIndex].add(value);
  }
  if (endingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc.finish();
    if ((!isRunning) && populateValue) {
      Object value=acc.getValue();
      currentRoundAggrValue[aggrIndex].add(value);
    }
  }
  return true;
}","/** 
 * Calculate the value by row
 * @param aggrIndex
 * @param startingGroupLevel
 * @param endingGroupLevel
 * @param context
 * @param scope
 * @throws DataException
 */
private boolean onRow(int aggrIndex,int startingGroupLevel,int endingGroupLevel,boolean populateValue) throws DataException {
  IAggrInfo aggrInfo=getAggrInfo(aggrIndex);
  Accumulator acc=null;
  boolean newGroup=false;
  IParameterDefn[] argDefs=aggrInfo.getAggregation().getParameterDefn();
  if (startingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc=accumulatorManagers[aggrIndex].next();
    acc.start();
    newGroup=true;
  }
 else {
    acc=accumulatorManagers[aggrIndex].getCurrentAccumulator();
  }
  boolean accepted=true;
  if (aggrInfo.getFilter() != null) {
    try {
      Object filterResult=ExprEvaluateUtil.evaluateValue(aggrInfo.getFilter(),this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope(),this.populator.getSession().getEngineContext().getScriptContext());
      if (filterResult == null)       accepted=true;
 else       accepted=DataTypeUtil.toBoolean(filterResult).booleanValue();
    }
 catch (    BirtException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  if (aggrInfo.getCalcualteLevel() > 0) {
    if (startingGroupLevel > aggrInfo.getCalcualteLevel())     accepted=false;
  }
  if (accepted) {
    final IBaseExpression[] arguments=aggrInfo.getArgument();
    if (!isFunctionCount(aggrInfo) && arguments == null) {
      DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
      wrapException(aggrIndex,e);
      return false;
    }
    try {
      int optionalAgrsNum=0;
      for (int i=0; i < argDefs.length; i++) {
        if (argDefs[i].isOptional()) {
          optionalAgrsNum++;
        }
        if (aggrInfo.getArgument() == null || i >= arguments.length + optionalAgrsNum) {
          throw new DataException(ResourceConstants.AGGREGATION_ARGUMENT_ERROR,new Object[]{argDefs[i].getName(),aggrInfo.getName()});
        }
        if (isEmptyAggrArgument(aggrInfo)) {
          aggrArgs[aggrIndex]=null;
        }
 else {
          evaluateArgsValue(aggrIndex,aggrInfo,i,argDefs[i].isOptional());
        }
      }
      if (aggrInfo.getArgument() == null || !isValidArgumentNumber(aggrInfo.getArgument().length,argDefs.length,optionalAgrsNum)) {
        DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
        wrapException(aggrIndex,e);
        return false;
      }
      acc.onRow(aggrArgs[aggrIndex]);
      newGroup=false;
    }
 catch (    DataException e) {
      wrapException(aggrIndex,e);
      return false;
    }
  }
  boolean isRunning=(aggrInfo.getAggregation().getType() == IAggrFunction.RUNNING_AGGR);
  if (isRunning && populateValue) {
    Object value=acc.getValue();
    currentRoundAggrValue[aggrIndex].add(value);
  }
  if (endingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc.finish();
    if ((!isRunning) && populateValue) {
      Object value=acc.getValue();
      currentRoundAggrValue[aggrIndex].add(value);
    }
  }
  return true;
}",0.9706909643128322
71428,"/** 
 * @param aggrInfo
 * @param argExpr
 * @throws DataException
 */
private void checkExpression(IAggrInfo aggrInfo,IBaseExpression argExpr) throws DataException {
  if (!isFunctionCount(aggrInfo)) {
    IScriptExpression expr=(IScriptExpression)argExpr;
    if (expr == null || expr.getText() == null || ""String_Node_Str"".equals(expr.getText().trim())) {
      throw new DataException(ResourceConstants.EXPRESSION_CANNOT_BE_NULL_OR_BLANK);
    }
  }
}","/** 
 * @param aggrInfo
 * @param argExpr
 * @throws DataException
 */
private void checkExpression(IAggrInfo aggrInfo,IBaseExpression argExpr) throws DataException {
  if (!isFunctionCount(aggrInfo) && isEmptyScriptExpression(argExpr)) {
    throw new DataException(ResourceConstants.EXPRESSION_CANNOT_BE_NULL_OR_BLANK);
  }
}",0.7442455242966752
71429,"protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle columnBinding) throws BirtException {
  String name=columnBinding.getName();
  String expr=columnBinding.getExpression();
  String type=columnBinding.getDataType();
  String displayName=columnBinding.getDisplayName();
  String aggregateOn=columnBinding.getAggregateOn();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=null;
  if (expr != null) {
    dbExpr=new ScriptExpression(expr,dbType);
    if (aggregateOn != null) {
      dbExpr.setGroupName(aggregateOn);
    }
  }
  IBinding binding=new Binding(name,dbExpr);
  binding.setDisplayName(displayName);
  if (aggregateOn != null) {
    binding.addAggregateOn(aggregateOn);
  }
  if (columnBinding.getAggregateFunction() != null) {
    binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(columnBinding.getAggregateFunction()));
  }
  String filter=columnBinding.getFilterExpression();
  if (filter != null) {
    binding.setFilter(new ScriptExpression(filter));
  }
  Iterator arguments=columnBinding.argumentsIterator();
  if (arguments != null) {
    while (arguments.hasNext()) {
      AggregationArgumentHandle argumentHandle=(AggregationArgumentHandle)arguments.next();
      String argument=argumentHandle.getValue();
      if (argument != null) {
        binding.addArgument(DataAdapterUtil.adaptArgumentName(argumentHandle.getName()),new ScriptExpression(argument));
      }
    }
  }
  binding.setDataType(dbType);
  transfer.addBinding(binding);
}","protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle columnBinding) throws BirtException {
  String name=columnBinding.getName();
  String expr=columnBinding.getExpression();
  String type=columnBinding.getDataType();
  String displayName=columnBinding.getDisplayName();
  String aggregateOn=columnBinding.getAggregateOn();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=null;
  if (expr != null) {
    dbExpr=new ScriptExpression(expr,dbType);
    if (aggregateOn != null) {
      dbExpr.setGroupName(aggregateOn);
    }
  }
  IBinding binding=new Binding(name,dbExpr);
  binding.setDisplayName(displayName);
  if (aggregateOn != null) {
    binding.addAggregateOn(aggregateOn);
  }
  if (columnBinding.getAggregateFunction() != null) {
    binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(columnBinding.getAggregateFunction()));
  }
  String filter=columnBinding.getFilterExpression();
  if (filter != null) {
    binding.setFilter(new ScriptExpression(filter));
  }
  Iterator arguments=columnBinding.argumentsIterator();
  if (arguments != null) {
    while (arguments.hasNext()) {
      AggregationArgumentHandle argumentHandle=(AggregationArgumentHandle)arguments.next();
      String argument=argumentHandle.getValue();
      binding.addArgument(DataAdapterUtil.adaptArgumentName(argumentHandle.getName()),new ScriptExpression(argument));
    }
  }
  binding.setDataType(dbType);
  transfer.addBinding(binding);
}",0.98681608437706
71430,"/** 
 * @param resultBindingList
 * @param bindingCollection
 * @throws DataException 
 */
protected static void addQueryBindings(List<IBinding> resultBindingList,Collection bindingCollection) throws DataException {
  Iterator bindingIterator=bindingCollection.iterator();
  while (bindingIterator.hasNext()) {
    IBinding binding=(IBinding)(bindingIterator.next());
    IBaseExpression expr=binding.getExpression();
    if (expr instanceof IScriptExpression && !ExpressionUtil.hasAggregation(((IScriptExpression)expr).getText())) {
      resultBindingList.add(binding);
    }
  }
}","/** 
 * @param resultBindingList
 * @param bindingCollection
 * @throws DataException 
 */
protected static void addQueryBindings(List<IBinding> resultBindingList,Collection bindingCollection) throws DataException {
  Iterator bindingIterator=bindingCollection.iterator();
  while (bindingIterator.hasNext()) {
    IBinding binding=(IBinding)(bindingIterator.next());
    IBaseExpression expr=binding.getExpression();
    if (expr instanceof IScriptExpression && !ExpressionUtil.hasAggregation(((IScriptExpression)expr).getText())) {
      boolean exist=false;
      for (int i=0; i < resultBindingList.size(); i++) {
        if (resultBindingList.get(i) != null && resultBindingList.get(i).getBindingName().equals(binding.getBindingName())) {
          exist=true;
        }
      }
      if (!exist)       resultBindingList.add(binding);
    }
  }
}",0.796373779637378
71431,"protected IResultIterator executeOdiQuery(IEventHandler eventHandler,StopSign stopSign) throws DataException {
  try {
    RDLoad rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),engine.getContext(),new QueryResultInfo(realBasedQueryID,null,-1));
    DataSetResultSet dataSetResult=rdLoad.loadDataSetData();
    StreamManager manager=new StreamManager(engine.getContext(),new QueryResultInfo(queryDefn.getQueryResultsID(),null,0));
    if (PLSUtil.isPLSEnabled(queryDefn) && PLSUtil.needUpdateDataSet(queryDefn,manager)) {
      if (engine.getContext().getDocWriter() != null) {
        populatePLSDataSetData(eventHandler,stopSign,manager);
        dataSetResult.close();
        rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),engine.getContext(),new QueryResultInfo(realBasedQueryID,null,-1));
        dataSetResult=rdLoad.loadDataSetData();
      }
 else {
        org.eclipse.birt.data.engine.impl.document.ResultIterator docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator(engine.getSession().getTempDir(),engine.getContext(),null,queryDefn.getQueryResultsID());
        PLSEnabledDataSetPopulator populator=new PLSEnabledDataSetPopulator(queryDefn,queryDefn.getQueryExecutionHints().getTargetGroupInstances(),docIt);
        IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(populator.getResultClass()),populator,eventHandler,engine.getSession(),stopSign);
        dataSetResult.close();
        return resultIterator;
      }
    }
    IResultClass meta=dataSetResult.getResultClass();
    IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(meta),dataSetResult,eventHandler,engine.getSession(),stopSign);
    dataSetResult.close();
    return resultIterator;
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","protected IResultIterator executeOdiQuery(IEventHandler eventHandler,StopSign stopSign) throws DataException {
  try {
    RDLoad rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),engine.getContext(),new QueryResultInfo(realBasedQueryID,null,-1));
    DataSetResultSet dataSetResult=rdLoad.loadDataSetData();
    StreamManager manager=new StreamManager(engine.getContext(),new QueryResultInfo(queryDefn.getQueryResultsID(),null,0));
    if (PLSUtil.isPLSEnabled(queryDefn)) {
      if (PLSUtil.needUpdateDataSet(queryDefn,manager)) {
        if (engine.getContext().getDocWriter() != null) {
          populatePLSDataSetData(eventHandler,stopSign,manager);
          dataSetResult.close();
          rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),engine.getContext(),new QueryResultInfo(realBasedQueryID,null,-1));
          dataSetResult=rdLoad.loadDataSetData();
        }
 else {
          org.eclipse.birt.data.engine.impl.document.ResultIterator docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator(engine.getSession().getTempDir(),engine.getContext(),null,queryDefn.getQueryResultsID());
          PLSEnabledDataSetPopulator populator=new PLSEnabledDataSetPopulator(queryDefn,queryDefn.getQueryExecutionHints().getTargetGroupInstances(),docIt);
          IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(populator.getResultClass()),populator,eventHandler,engine.getSession(),stopSign);
          dataSetResult.close();
          cleanUpOldRD();
          return resultIterator;
        }
      }
 else {
        cleanUpOldRD();
      }
    }
    IResultClass meta=dataSetResult.getResultClass();
    IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(meta),dataSetResult,eventHandler,engine.getSession(),stopSign);
    dataSetResult.close();
    return resultIterator;
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.9582673005810882
71432,"/** 
 * @param dataEngine
 * @param queryDefn
 * @throws DataException
 */
PreparedIVDataSourceQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  super(dataEngine,PLSUtil.isPLSEnabled(queryDefn) ? PLSUtil.populateBindings(queryDefn) : queryDefn,null,null);
  Object[] params={dataEngine,queryDefn};
  logger.entering(PreparedIVDataSourceQuery.class.getName(),""String_Node_Str"",params);
  this.queryDefn=queryDefn;
  this.engine=dataEngine;
  logger.exiting(PreparedIVDataSourceQuery.class.getName(),""String_Node_Str"");
}","/** 
 * @param dataEngine
 * @param queryDefn
 * @throws DataException
 */
PreparedIVDataSourceQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  super(dataEngine,PLSUtil.isPLSEnabled(queryDefn) ? PLSUtil.populateBindings(queryDefn) : queryDefn,null,null);
  Object[] params={dataEngine,queryDefn};
  logger.entering(PreparedIVDataSourceQuery.class.getName(),""String_Node_Str"",params);
  this.queryDefn=queryDefn;
  this.engine=dataEngine;
  if (!PLSUtil.isPLSEnabled(queryDefn))   cleanUpOldRD();
  logger.exiting(PreparedIVDataSourceQuery.class.getName(),""String_Node_Str"");
}",0.9502572898799314
71433,"/** 
 * @param eventHandler
 * @param stopSign
 * @param manager
 * @throws DataException
 * @throws IOException
 */
private void populatePLSDataSetData(IEventHandler eventHandler,StopSign stopSign,StreamManager manager) throws DataException, IOException {
  org.eclipse.birt.data.engine.impl.document.ResultIterator docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator(engine.getSession().getTempDir(),engine.getContext(),null,queryDefn.getQueryResultsID());
  PLSEnabledDataSetPopulator populator=new PLSEnabledDataSetPopulator(queryDefn,queryDefn.getQueryExecutionHints().getTargetGroupInstances(),docIt);
  ResultClass processedRC=(ResultClass)populateResultClass(populator.getResultClass());
  SmartCache cache=new SmartCache(new CacheRequest(0,new ArrayList(),null,eventHandler),new OdiAdapter(populator),processedRC,engine.getSession(),stopSign);
  manager.dropStream1(DataEngineContext.DATASET_DATA_STREAM);
  manager.dropStream1(DataEngineContext.DATASET_DATA_LEN_STREAM);
  OutputStream resultClassStream=manager.getOutStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  processedRC.doSave(resultClassStream,new ArrayList(queryDefn.getBindings().values()));
  resultClassStream.close();
  DataOutputStream dataSetDataStream=new DataOutputStream(manager.getOutStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
  DataOutputStream rowLensStream=new DataOutputStream(manager.getOutStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
  cache.doSave(dataSetDataStream,rowLensStream,eventHandler.getAllColumnBindings());
  cache.close();
  DataOutputStream plsGroupLevelStream=new DataOutputStream(manager.getOutStream(DataEngineContext.PLS_GROUPLEVEL_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
  IOUtil.writeInt(plsGroupLevelStream,PLSUtil.getOutmostPlsGroupLevel(queryDefn));
  plsGroupLevelStream.close();
}","/** 
 * @param eventHandler
 * @param stopSign
 * @param manager
 * @throws DataException
 * @throws IOException
 */
private void populatePLSDataSetData(IEventHandler eventHandler,StopSign stopSign,StreamManager manager) throws DataException, IOException {
  org.eclipse.birt.data.engine.impl.document.ResultIterator docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator(engine.getSession().getTempDir(),engine.getContext(),null,queryDefn.getQueryResultsID());
  PLSEnabledDataSetPopulator populator=new PLSEnabledDataSetPopulator(queryDefn,queryDefn.getQueryExecutionHints().getTargetGroupInstances(),docIt);
  ResultClass processedRC=(ResultClass)populateResultClass(populator.getResultClass());
  SmartCache cache=new SmartCache(new CacheRequest(0,new ArrayList(),null,eventHandler),new OdiAdapter(populator),processedRC,engine.getSession(),stopSign);
  manager.dropStream1(DataEngineContext.DATASET_DATA_STREAM);
  manager.dropStream1(DataEngineContext.DATASET_DATA_LEN_STREAM);
  cleanUpOldRD();
  OutputStream resultClassStream=manager.getOutStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  processedRC.doSave(resultClassStream,new ArrayList(queryDefn.getBindings().values()));
  resultClassStream.close();
  DataOutputStream dataSetDataStream=new DataOutputStream(manager.getOutStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
  DataOutputStream rowLensStream=new DataOutputStream(manager.getOutStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
  cache.doSave(dataSetDataStream,rowLensStream,eventHandler.getAllColumnBindings());
  cache.close();
  DataOutputStream plsGroupLevelStream=new DataOutputStream(manager.getOutStream(DataEngineContext.PLS_GROUPLEVEL_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
  IOUtil.writeInt(plsGroupLevelStream,PLSUtil.getOutmostPlsGroupLevel(queryDefn));
  plsGroupLevelStream.close();
}",0.9955067398901648
71434,"/** 
 * Since this query is running based on the data set, the old things stored in report document is no more use, and it will be safter if they are all removed.
 * @throws DataException
 */
protected QueryExecutor newExecutor(){
  return new IVDataSourceExecutor(engine.getSession().getSharedScope(),queryDefn,this.preparedQuery.getAggrTable());
}","protected QueryExecutor newExecutor(){
  return new IVDataSourceExecutor(engine.getSession().getSharedScope(),queryDefn,this.preparedQuery.getAggrTable());
}",0.6205533596837944
71435,"/** 
 * @param streamType
 * @return
 */
private boolean useTempStream(int streamType){
  if (this.version < VersionManager.VERSION_2_2)   return false;
switch (streamType) {
case DataEngineContext.DATASET_DATA_STREAM:
    return false;
case DataEngineContext.DATASET_META_STREAM:
  return !(this.version < VersionManager.VERSION_2_2_0);
case DataEngineContext.DATASET_DATA_LEN_STREAM:
return false;
case DataEngineContext.EXPR_VALUE_STREAM:
return false;
case DataEngineContext.EXPR_ROWLEN_STREAM:
return this.version < VersionManager.VERSION_2_2_0;
case DataEngineContext.EXPR_META_STREAM:
return true;
case DataEngineContext.GROUP_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_INFO_STREAM:
return false;
case DataEngineContext.QUERY_DEFN_STREAM:
return true;
case DataEngineContext.ORIGINAL_QUERY_DEFN_STREAM:
return false;
case DataEngineContext.ROW_INDEX_STREAM:
return true;
case DataEngineContext.QUERYID_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_PARENTINDEX_STREAM:
return true;
case DataEngineContext.PLS_GROUPLEVEL_STREAM:
return true;
case DataEngineContext.META_STREAM:
return false;
case DataEngineContext.META_INDEX_STREAM:
return false;
default :
return false;
}
}","/** 
 * @param streamType
 * @return
 */
private boolean useTempStream(int streamType){
  if (this.version < VersionManager.VERSION_2_2)   return false;
switch (streamType) {
case DataEngineContext.DATASET_DATA_STREAM:
    return false;
case DataEngineContext.DATASET_META_STREAM:
  return !(this.version < VersionManager.VERSION_2_2_0);
case DataEngineContext.DATASET_DATA_LEN_STREAM:
return false;
case DataEngineContext.EXPR_VALUE_STREAM:
return false;
case DataEngineContext.EXPR_ROWLEN_STREAM:
return this.version < VersionManager.VERSION_2_2_0;
case DataEngineContext.EXPR_META_STREAM:
return true;
case DataEngineContext.GROUP_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_INFO_STREAM:
return false;
case DataEngineContext.QUERY_DEFN_STREAM:
return true;
case DataEngineContext.ORIGINAL_QUERY_DEFN_STREAM:
return false;
case DataEngineContext.ROW_INDEX_STREAM:
return true;
case DataEngineContext.QUERYID_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_PARENTINDEX_STREAM:
return true;
case DataEngineContext.PLS_GROUPLEVEL_STREAM:
return false;
case DataEngineContext.META_STREAM:
return false;
case DataEngineContext.META_INDEX_STREAM:
return false;
default :
return false;
}
}",0.9590062111801242
71436,"protected void paintChildren(Graphics graphics){
  IFigure child;
  for (int i=0; i < this.getChildren().size(); i++) {
    Rectangle clip=graphics.getClip(Rectangle.SINGLETON);
    child=(IFigure)this.getChildren().get(i);
    if (child.isVisible()) {
      Rectangle bounds=child.getBounds().getCopy();
      int extend=bounds.x + bounds.width - clip.x - clip.width;
      if (extend > 0) {
        clip.width=clip.width + extend;
      }
      if (child.intersects(clip)) {
        graphics.clipRect(bounds);
        child.paint(graphics);
        graphics.restoreState();
      }
    }
  }
}","protected void paintChildren(Graphics graphics){
  IFigure child;
  for (int i=0; i < this.getChildren().size(); i++) {
    Rectangle clip=graphics.getClip(Rectangle.SINGLETON);
    child=(IFigure)this.getChildren().get(i);
    if (child.isVisible()) {
      Rectangle bounds=child.getBounds().getCopy();
      int extend=bounds.x + bounds.width - clip.x - clip.width;
      if (extend > 0) {
        clip.width=clip.width + extend;
      }
      if (child.intersects(clip)) {
        graphics.setClip(clip.getCopy());
        graphics.clipRect(bounds);
        child.paint(graphics);
        graphics.restoreState();
      }
    }
  }
}",0.9659090909090908
71437,"public final void paintControl(PaintEvent e){
  Rectangle d=this.getClientArea();
  Image imgChart=new Image(this.getDisplay(),d);
  GC gcImage=new GC(imgChart);
  idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gcImage);
  Bounds bo=BoundsImpl.create(0,0,d.width,d.height);
  bo.scale(72d / idr.getDisplayServer().getDpiResolution());
  Generator gr=Generator.instance();
  try {
    gcs=gr.build(idr.getDisplayServer(),cm,bo,null,null,null);
  }
 catch (  ChartException ce) {
    ce.printStackTrace();
  }
  if (bFirstPaint) {
    bFirstPaint=false;
    new Thread(new Runnable(){
      public void run(){
        while (true) {
          try {
            Thread.sleep(500);
          }
 catch (          Exception e) {
          }
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              chartRefresh();
            }
          }
);
        }
      }
    }
).start();
  }
  try {
    gr.render(idr,gcs);
    GC gc=e.gc;
    gc.drawImage(imgChart,d.x,d.y);
  }
 catch (  ChartException ex) {
    ex.printStackTrace();
  }
}","public final void paintControl(PaintEvent e){
  Rectangle d=this.getClientArea();
  if (bFirstPaint) {
    imgChart=new Image(this.getDisplay(),d);
    gcImage=new GC(imgChart);
    idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gcImage);
    bo=BoundsImpl.create(0,0,d.width,d.height);
    bo.scale(72d / idr.getDisplayServer().getDpiResolution());
  }
  Generator gr=Generator.instance();
  try {
    gcs=gr.build(idr.getDisplayServer(),cm,bo,null,null,null);
    gr.render(idr,gcs);
    GC gc=e.gc;
    gc.drawImage(imgChart,d.x,d.y);
  }
 catch (  ChartException ce) {
    ce.printStackTrace();
  }
  bFirstPaint=false;
  Display.getDefault().timerExec(500,new Runnable(){
    public void run(){
      chartRefresh();
    }
  }
);
}",0.5267807840971839
71438,"private void chartRefresh(){
  final Generator gr=Generator.instance();
  scrollData((ChartWithAxes)cm);
  try {
    gr.refresh(gcs);
  }
 catch (  ChartException ex) {
    ex.printStackTrace();
  }
  redraw();
}","private void chartRefresh(){
  if (!isDisposed()) {
    final Generator gr=Generator.instance();
    scrollData((ChartWithAxes)cm);
    try {
      gr.refresh(gcs);
    }
 catch (    ChartException ex) {
      ex.printStackTrace();
    }
    redraw();
  }
}",0.8486140724946695
71439,"/** 
 * execute application
 * @param args
 */
public static void main(String[] args){
  Display display=Display.getDefault();
  Shell shell=new Shell(display);
  shell.setSize(600,400);
  shell.setLayout(new GridLayout());
  c3dViewer=new SwtLiveChartViewer(shell,SWT.NO_BACKGROUND);
  c3dViewer.setLayoutData(new GridData(GridData.FILL_BOTH));
  c3dViewer.addPaintListener(c3dViewer);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  display.dispose();
}","/** 
 * execute application
 * @param args
 */
public static void main(String[] args){
  Display display=Display.getDefault();
  Shell shell=new Shell(display,SWT.CLOSE);
  shell.setSize(600,400);
  shell.setLayout(new GridLayout());
  c3dViewer=new SwtLiveChartViewer(shell,SWT.NO_BACKGROUND);
  c3dViewer.setLayoutData(new GridData(GridData.FILL_BOTH));
  c3dViewer.addPaintListener(c3dViewer);
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  display.dispose();
}",0.9904397705544932
71440,"private void updateButtons(){
  boolean complete=uriEditor.getText() != null && uriEditor.getText().trim().length() > 0;
  previewButton.setEnabled(complete);
  getButton(IDialogConstants.OK_ID).setEnabled(complete);
  browseButton.setVisible(embedded.getSelection());
}","private void updateButtons(){
  boolean complete=uriEditor.getText() != null && uriEditor.getText().trim().length() > 0;
  URL url=null;
  try {
    url=new URL(uriEditor.getText().trim());
    if (selectedType == EMBEDDED_TYPE) {
      File file=new File(url.getPath());
      complete=file.exists() && file.isAbsolute();
    }
  }
 catch (  Exception e) {
    complete=false;
  }
  previewButton.setEnabled(complete);
  getButton(IDialogConstants.OK_ID).setEnabled(complete);
  browseButton.setVisible(embedded.getSelection());
}",0.6741573033707865
71441,"public String getCellValue(ICellContent cell){
  StringBuffer cellValue=new StringBuffer();
  Collection list=cell.getChildren();
  Iterator iter=list.iterator();
  while (iter.hasNext()) {
    Object child=iter.next();
    if (child instanceof ITextContent) {
      cellValue.append(((ITextContent)child).getText());
    }
    if (child instanceof IForeignContent) {
      cellValue.append(((IForeignContent)child).getRawValue());
    }
  }
  return cellValue.toString();
}","public String getCellValue(ICellContent cell){
  StringBuffer cellValue=new StringBuffer();
  Collection list=cell.getChildren();
  Iterator iter=list.iterator();
  while (iter.hasNext()) {
    processText(cellValue,iter.next());
  }
  return cellValue.toString();
}",0.5621621621621622
71442,"public String formatHeaderFooter(IContent headerFooter,boolean isHeader){
  StringBuffer headfoot=new StringBuffer();
  if (headerFooter != null) {
    Collection list=headerFooter.getChildren();
    Iterator iter=list.iterator();
    while (iter.hasNext()) {
      Object child=iter.next();
      if (child instanceof ITextContent) {
        headfoot.append(((ITextContent)child).getText());
      }
      if (child instanceof IForeignContent) {
        headfoot.append(((IForeignContent)child).getRawValue());
      }
      if (child instanceof ITableContent) {
        headfoot.append(getTableValue((ITableContent)child));
      }
    }
    return headfoot.toString();
  }
  return null;
}","public String formatHeaderFooter(IContent headerFooter,boolean isHeader){
  StringBuffer headfoot=new StringBuffer();
  if (headerFooter != null) {
    Collection list=headerFooter.getChildren();
    Iterator iter=list.iterator();
    while (iter.hasNext()) {
      Object child=iter.next();
      if (child instanceof ITableContent) {
        headfoot.append(getTableValue((ITableContent)child));
      }
 else       processText(headfoot,child);
    }
    return headfoot.toString();
  }
  return null;
}",0.6215538847117794
71443,"static boolean check(String source,int lineNumber){
  Context cx=Context.enter();
  Debugger oldDebugger=cx.getDebugger();
  Object oldContext=cx.getDebuggerContextData();
  boolean oldGenerate=cx.isGeneratingDebug();
  int oldLevel=cx.getOptimizationLevel();
  try {
    BreakableSourceChecker checker=new BreakableSourceChecker();
    checker.lineNumber=lineNumber + 1;
    cx.setDebugger(checker,null);
    cx.setGeneratingDebug(true);
    cx.setOptimizationLevel(-1);
    cx.compileString(source,""String_Node_Str"",1,null);
    return checker.breakable;
  }
 catch (  Exception e) {
    return false;
  }
 finally {
    cx.setDebugger(oldDebugger,oldContext);
    cx.setGeneratingDebug(oldGenerate);
    cx.setOptimizationLevel(oldLevel);
    Context.exit();
  }
}","static boolean check(String source,int lineNumber){
  Context cx=Context.enter();
  Debugger oldDebugger=cx.getDebugger();
  Object oldContext=cx.getDebuggerContextData();
  boolean oldGenerate=cx.isGeneratingDebug();
  int oldLevel=cx.getOptimizationLevel();
  try {
    BreakableSourceChecker checker=new BreakableSourceChecker();
    checker.lineNumber=lineNumber + 2;
    cx.setDebugger(checker,null);
    cx.setGeneratingDebug(true);
    cx.setOptimizationLevel(-1);
    cx.compileString(addHeader(source),""String_Node_Str"",1,null);
    return checker.breakable;
  }
 catch (  Exception e) {
    return false;
  }
 finally {
    cx.setDebugger(oldDebugger,oldContext);
    cx.setGeneratingDebug(oldGenerate);
    cx.setOptimizationLevel(oldLevel);
    Context.exit();
  }
}",0.9838187702265372
71444,"public void run(){
  transStar(NAME);
  try {
    LevelViewDialog dialog=new LevelViewDialog(UIUtil.getDefaultShell());
    List showLevels=new ArrayList();
    List nullLevelHandle=new ArrayList();
    int viewCount=viewHandle.getLevelCount();
    for (int i=0; i < viewCount; i++) {
      LevelViewHandle levelHandle=viewHandle.getLevel(i);
      if (levelHandle.getCubeLevel() == null) {
        nullLevelHandle.add(new Integer(levelHandle.getIndex()));
      }
 else {
        showLevels.add(levelHandle.getCubeLevel());
      }
    }
    dialog.setInput(viewHandle.getCubeDimension(),showLevels);
    if (dialog.open() == Window.OK) {
      CrosstabReportItemHandle reportHandle=viewHandle.getCrosstab();
      List result=(List)dialog.getResult();
      boolean isLevelRemoved=processor(showLevels,result,nullLevelHandle,false);
      if (isLevelRemoved) {
        boolean bool=CrosstabAdaptUtil.needRemoveInvaildBindings(reportHandle);
        processor(showLevels,result,nullLevelHandle,true);
        if (bool) {
          CrosstabAdaptUtil.removeInvalidBindings(reportHandle);
        }
      }
      AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper(reportHandle);
      providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}","public void run(){
  transStar(NAME);
  try {
    LevelViewDialog dialog=new LevelViewDialog(UIUtil.getDefaultShell());
    List showLevels=new ArrayList();
    List nullLevelHandle=new ArrayList();
    int viewCount=viewHandle.getLevelCount();
    for (int i=0; i < viewCount; i++) {
      LevelViewHandle levelHandle=viewHandle.getLevel(i);
      if (levelHandle.getCubeLevel() == null) {
        nullLevelHandle.add(new Integer(levelHandle.getIndex()));
      }
 else {
        showLevels.add(levelHandle.getCubeLevel());
      }
    }
    dialog.setInput(viewHandle.getCubeDimension(),showLevels);
    if (dialog.open() == Window.OK) {
      CrosstabReportItemHandle reportHandle=viewHandle.getCrosstab();
      List result=(List)dialog.getResult();
      boolean isLevelRemoved=processor(showLevels,result,nullLevelHandle,false);
      if (isLevelRemoved) {
        boolean bool=CrosstabAdaptUtil.needRemoveInvaildBindings(reportHandle);
        processor(showLevels,result,nullLevelHandle,true);
        if (bool) {
          CrosstabAdaptUtil.removeInvalidBindings(reportHandle);
        }
      }
 else {
        processor(showLevels,result,nullLevelHandle,true);
      }
      AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper(reportHandle);
      providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}",0.9743414300376324
71445,"public void run(){
  transStar(ACTION_MSG_MERGE);
  try {
    CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
    ShowSummaryFieldDialog dialog=new ShowSummaryFieldDialog(UIUtil.getDefaultShell(),reportHandle);
    List list=getDimensionHandles();
    List<MeasureInfo> input=new ArrayList<MeasureInfo>();
    for (int i=0; i < list.size(); i++) {
      MeasureHandle handle=(MeasureHandle)list.get(i);
      MeasureInfo info=new MeasureInfo();
      info.setMeasureName(handle.getQualifiedName());
      info.setMeasureDisplayName(handle.getName());
      info.setExpectedView(""String_Node_Str"");
      input.add(info);
    }
    int count=reportHandle.getMeasureCount();
    for (int i=0; i < count; i++) {
      MeasureViewHandle viewHandle=reportHandle.getMeasure(i);
      if (viewHandle == null) {
        continue;
      }
      if (viewHandle instanceof ComputedMeasureViewHandle) {
        MeasureInfo info=new MeasureInfo();
        info.setMeasureName(viewHandle.getCubeMeasureName());
        info.setMeasureDisplayName(viewHandle.getCubeMeasureName());
        info.setExpectedView(""String_Node_Str"");
        info.setShow(true);
        input.add(info);
      }
 else {
        checkStatus(viewHandle,input);
      }
    }
    dialog.setInput(copyInfo(input));
    if (dialog.open() == Window.OK) {
      List result=(List)dialog.getResult();
      boolean isRemove=processor(input,result,false);
      if (isRemove) {
        boolean bool=CrosstabAdaptUtil.needRemoveInvaildBindings(reportHandle);
        processor(input,result,true);
        if (bool) {
          CrosstabAdaptUtil.removeInvalidBindings(reportHandle);
        }
      }
      providerWrapper.switchViews();
      if (needUpdateView) {
        providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
      }
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}","public void run(){
  transStar(ACTION_MSG_MERGE);
  try {
    CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
    ShowSummaryFieldDialog dialog=new ShowSummaryFieldDialog(UIUtil.getDefaultShell(),reportHandle);
    List list=getDimensionHandles();
    List<MeasureInfo> input=new ArrayList<MeasureInfo>();
    for (int i=0; i < list.size(); i++) {
      MeasureHandle handle=(MeasureHandle)list.get(i);
      MeasureInfo info=new MeasureInfo();
      info.setMeasureName(handle.getQualifiedName());
      info.setMeasureDisplayName(handle.getName());
      info.setExpectedView(""String_Node_Str"");
      input.add(info);
    }
    int count=reportHandle.getMeasureCount();
    for (int i=0; i < count; i++) {
      MeasureViewHandle viewHandle=reportHandle.getMeasure(i);
      if (viewHandle == null) {
        continue;
      }
      if (viewHandle instanceof ComputedMeasureViewHandle) {
        MeasureInfo info=new MeasureInfo();
        info.setMeasureName(viewHandle.getCubeMeasureName());
        info.setMeasureDisplayName(viewHandle.getCubeMeasureName());
        info.setExpectedView(""String_Node_Str"");
        info.setShow(true);
        input.add(info);
      }
 else {
        checkStatus(viewHandle,input);
      }
    }
    dialog.setInput(copyInfo(input));
    if (dialog.open() == Window.OK) {
      List result=(List)dialog.getResult();
      boolean isRemove=processor(input,result,false);
      if (isRemove) {
        boolean bool=CrosstabAdaptUtil.needRemoveInvaildBindings(reportHandle);
        processor(input,result,true);
        if (bool) {
          CrosstabAdaptUtil.removeInvalidBindings(reportHandle);
        }
      }
 else {
        processor(input,result,true);
      }
      providerWrapper.switchViews();
      if (needUpdateView) {
        providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
      }
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}",0.9864661654135338
71446,"private boolean processor(List list,List result,boolean doChange) throws SemanticException {
  initializeProviders();
  boolean isRemove=false;
  List temp=new ArrayList(result);
  for (int i=0; i < result.size(); i++) {
    MeasureInfo resultOne=(MeasureInfo)result.get(i);
    MeasureInfo originalOne=getOriMeasureInfo(resultOne,list);
    if (resultOne.isShow() == originalOne.isShow()) {
      MeasureInfo info=(MeasureInfo)result.get(i);
      if (info.isShow() == true && info.getExpectedView() != null && info.getExpectedView().length() != 0) {
        SwitchCellInfo swtichCellInfo=new SwitchCellInfo(measureViewHandle.getCrosstab(),SwitchCellInfo.MEASURE);
        swtichCellInfo.setMeasureInfo(info);
        swtichCellInfo.setIsNew(false);
        providerWrapper.addSwitchInfo(swtichCellInfo);
        needUpdateView=true;
      }
      temp.remove(resultOne);
    }
  }
  CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
  for (int i=0; i < temp.size(); i++) {
    MeasureInfo info=(MeasureInfo)temp.get(i);
    if (info.isShow()) {
      MeasureHandle measure=reportHandle.getCube().getMeasure(info.getMeasureName());
      MeasureViewHandle measureViewHandle=reportHandle.insertMeasure(measure,reportHandle.getMeasureCount());
      measureViewHandle.addHeader();
      LabelHandle labelHandle=DesignElementFactory.getInstance().newLabel(null);
      labelHandle.setText(info.getMeasureDisplayName());
      needUpdateView=true;
      measureViewHandle.getHeader().addContent(labelHandle);
      if (info.getExpectedView() != null && info.getExpectedView().length() != 0) {
        SwitchCellInfo swtichCellInfo=new SwitchCellInfo(measureViewHandle.getCrosstab(),SwitchCellInfo.MEASURE);
        info.setMeasureName(measureViewHandle.getCubeMeasure().getQualifiedName());
        swtichCellInfo.setMeasureInfo(info);
        swtichCellInfo.setIsNew(true);
        providerWrapper.addSwitchInfo(swtichCellInfo);
      }
    }
 else {
      if (doChange) {
        reportHandle.removeMeasure(info.getMeasureName());
      }
      isRemove=true;
      needUpdateView=true;
    }
  }
  return isRemove;
}","private boolean processor(List list,List result,boolean doChange) throws SemanticException {
  initializeProviders();
  boolean isRemove=false;
  List temp=new ArrayList(result);
  for (int i=0; i < result.size(); i++) {
    MeasureInfo resultOne=(MeasureInfo)result.get(i);
    MeasureInfo originalOne=getOriMeasureInfo(resultOne,list);
    if (resultOne.isShow() == originalOne.isShow()) {
      MeasureInfo info=(MeasureInfo)result.get(i);
      if (info.isShow() == true && info.getExpectedView() != null && info.getExpectedView().length() != 0) {
        SwitchCellInfo swtichCellInfo=new SwitchCellInfo(measureViewHandle.getCrosstab(),SwitchCellInfo.MEASURE);
        swtichCellInfo.setMeasureInfo(info);
        swtichCellInfo.setIsNew(false);
        providerWrapper.addSwitchInfo(swtichCellInfo);
        needUpdateView=true;
      }
      temp.remove(resultOne);
    }
  }
  CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
  for (int i=0; i < temp.size(); i++) {
    MeasureInfo info=(MeasureInfo)temp.get(i);
    if (info.isShow()) {
      if (!doChange) {
        continue;
      }
      MeasureHandle measure=reportHandle.getCube().getMeasure(info.getMeasureName());
      MeasureViewHandle measureViewHandle=reportHandle.insertMeasure(measure,reportHandle.getMeasureCount());
      measureViewHandle.addHeader();
      LabelHandle labelHandle=DesignElementFactory.getInstance().newLabel(null);
      labelHandle.setText(info.getMeasureDisplayName());
      needUpdateView=true;
      measureViewHandle.getHeader().addContent(labelHandle);
      if (info.getExpectedView() != null && info.getExpectedView().length() != 0) {
        SwitchCellInfo swtichCellInfo=new SwitchCellInfo(measureViewHandle.getCrosstab(),SwitchCellInfo.MEASURE);
        info.setMeasureName(measureViewHandle.getCubeMeasure().getQualifiedName());
        swtichCellInfo.setMeasureInfo(info);
        swtichCellInfo.setIsNew(true);
        providerWrapper.addSwitchInfo(swtichCellInfo);
      }
    }
 else {
      if (doChange) {
        reportHandle.removeMeasure(info.getMeasureName());
      }
      isRemove=true;
      needUpdateView=true;
    }
  }
  return isRemove;
}",0.9886652787416146
71447,"public IParameterMetaData getParameterMetaData() throws OdaException {
  assertNotNull(callStat);
  if (this.cachedParameterMetaData != null)   return this.cachedParameterMetaData;
  int[] positionArray=paramUtil.getParameterPositions();
  List paramMetaList1=this.getCallableParamMetaData();
  List paramMetaList2=new ArrayList();
  int containsReturnValue=0;
  if (paramMetaList1.size() > 0) {
    if (((ParameterDefn)paramMetaList1.get(0)).getParamInOutType() == 5) {
      if (paramUtil.containsReturnValue())       paramMetaList2.add(((ParameterDefn)paramMetaList1.get(0)));
      containsReturnValue++;
    }
  }
  for (int i=0; i < positionArray.length; i++) {
    int index=positionArray[i];
    if (paramMetaList1.size() >= index)     paramMetaList2.add(paramMetaList1.get(index - 1 + containsReturnValue));
 else     throw new OdaException(ResourceConstants.PREPARESTATEMENT_PARAMETER_METADATA_CANNOT_GET);
  }
  cachedParameterMetaData=new SPParameterMetaData(paramMetaList2);
  return cachedParameterMetaData;
}","public IParameterMetaData getParameterMetaData() throws OdaException {
  assertNotNull(callStat);
  if (this.cachedParameterMetaData != null)   return this.cachedParameterMetaData;
  int[] positionArray=paramUtil.getParameterPositions();
  List paramMetaList1=this.getCallableParamMetaData();
  List paramMetaList2=new ArrayList();
  int containsReturnValue=0;
  if (paramMetaList1.size() > 0) {
    if (((ParameterDefn)paramMetaList1.get(0)).getParamInOutType() == 5) {
      if (paramUtil.containsReturnValue())       paramMetaList2.add(((ParameterDefn)paramMetaList1.get(0)));
      containsReturnValue++;
    }
  }
  for (int i=0; i < positionArray.length; i++) {
    int index=positionArray[i];
    if (paramMetaList1.size() >= index + containsReturnValue)     paramMetaList2.add(paramMetaList1.get(index - 1 + containsReturnValue));
 else     throw new OdaException(ResourceConstants.PREPARESTATEMENT_PARAMETER_METADATA_CANNOT_GET);
  }
  cachedParameterMetaData=new SPParameterMetaData(paramMetaList2);
  return cachedParameterMetaData;
}",0.9893617021276596
71448,"/** 
 * Zooms OUT 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomOut(){
  if (bStepFixed || this.getTickCordinates().size() < 3) {
    return false;
  }
  if (((Number)oStep).doubleValue() >= Double.MAX_VALUE) {
    return false;
  }
  if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(oStep).doubleValue();
      if ((Math.log(dStep) / LOG_10) >= 1) {
        oStep=new Double(dStep * 10);
      }
 else {
        final int n=iaLogarithmicDeltas.length;
        for (int i=0; i < n; i++) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            oStep=new Double(iaLogarithmicDeltas[i + 1]);
            return true;
          }
        }
        return false;
      }
    }
 else     if ((iType & LINEAR) == LINEAR) {
      double dStep=asDouble(oStep).doubleValue();
      if (bIntegralZoom) {
        double dPower=Math.log(dStep) / LOG_10;
        if (dPower < 0) {
          dPower=Math.floor(dPower);
        }
 else {
          dPower=ChartUtil.alignWithInt(dPower,false);
        }
        dPower=Math.pow(10,dPower);
        dStep/=dPower;
        dStep=Math.round(dStep);
        int n=iaLinearDeltas.length;
        int i=0;
        for (; i < n; i++) {
          if (dStep < iaLinearDeltas[i]) {
            dStep=iaLinearDeltas[i] * dPower;
            break;
          }
        }
        if (i == n) {
          dPower*=20;
          dStep=iaLinearDeltas[0] * dPower;
        }
        if (((Number)oStep).doubleValue() == dStep) {
          return false;
        }
      }
 else {
        dStep*=2;
      }
      dStep=ChartUtil.alignWithInt(dStep,false);
      oStep=new Double(dStep);
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(oStep);
    int iUnit=asInteger(oUnit);
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep++;
          oStep=new Integer(iStep);
        }
 else {
          int i=0, n=ia.length;
          for (; i < n; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == n - 1) {
            ia=iaCalendarDeltas[icu + 1];
            oUnit=new Integer(iaCalendarUnits[icu + 1]);
            if (ia == null) {
              oStep=new Integer(1);
              return true;
            }
            i=-1;
          }
          oStep=new Integer(ia[i + 1]);
          break;
        }
      }
    }
  }
  return true;
}","/** 
 * Zooms OUT 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomOut(){
  if (bStepFixed || this.getTickCordinates().size() < 3) {
    return false;
  }
  if (((Number)oStep).doubleValue() >= Double.MAX_VALUE) {
    return false;
  }
  if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(oStep).doubleValue();
      if ((Math.log(dStep) / LOG_10) >= 1) {
        setStep(new Double(dStep * 10));
      }
 else {
        final int n=iaLogarithmicDeltas.length;
        for (int i=0; i < n; i++) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            setStep(new Double(iaLogarithmicDeltas[i + 1]));
            return true;
          }
        }
        return false;
      }
    }
 else     if ((iType & LINEAR) == LINEAR) {
      double dStep=asDouble(oStep).doubleValue();
      if (bIntegralZoom) {
        double dPower=Math.log(dStep) / LOG_10;
        if (dPower < 0) {
          dPower=Math.floor(dPower);
          dPower=Math.pow(10,dPower);
        }
 else {
          dPower=dStep;
        }
        dStep/=dPower;
        dStep=Math.round(dStep);
        int n=iaLinearDeltas.length;
        int i=0;
        for (; i < n; i++) {
          if (dStep < iaLinearDeltas[i]) {
            dStep=iaLinearDeltas[i] * dPower;
            break;
          }
        }
        if (i == n) {
          dPower*=20;
          dStep=iaLinearDeltas[0] * dPower;
        }
        if (((Number)oStep).doubleValue() == dStep) {
          return false;
        }
      }
 else {
        dStep*=2;
      }
      dStep=ChartUtil.alignWithInt(dStep,false);
      setStep(new Double(dStep));
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(oStep);
    int iUnit=asInteger(oUnit);
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep++;
          setStep(new Integer(iStep));
        }
 else {
          int i=0, n=ia.length;
          for (; i < n; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == n - 1) {
            ia=iaCalendarDeltas[icu + 1];
            oUnit=new Integer(iaCalendarUnits[icu + 1]);
            if (ia == null) {
              setStep(new Integer(1));
              return true;
            }
            i=-1;
          }
          setStep(new Integer(ia[i + 1]));
          break;
        }
      }
    }
  }
  return true;
}",0.958090584476602
71449,"/** 
 * Updates AutoScale by checking step size and step number
 * @param sc
 * @param oStep
 * @param oStepNumber
 * @param rtc
 * @throws ChartException
 */
public static void setStepToScale(AutoScale sc,Object oStep,Integer oStepNumber,RunTimeContext rtc) throws ChartException {
  if (oStep != null) {
    sc.oStep=oStep;
    sc.bStepFixed=true;
    if (((Double)sc.oStep).doubleValue() <= 0) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oStep},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
  if (oStepNumber != null) {
    sc.oStepNumber=oStepNumber;
    sc.bStepFixed=true;
    if (sc.oStepNumber.intValue() < 1) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oStepNumber},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
}","/** 
 * Updates AutoScale by checking step size and step number
 * @param sc
 * @param oStep
 * @param oStepNumber
 * @param rtc
 * @throws ChartException
 */
public static void setStepToScale(AutoScale sc,Object oStep,Integer oStepNumber,RunTimeContext rtc) throws ChartException {
  if (oStep != null) {
    sc.setStep(oStep);
    sc.bStepFixed=true;
    if (((Double)sc.oStep).doubleValue() <= 0) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oStep},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
  if (oStepNumber != null) {
    sc.oStepNumber=oStepNumber;
    sc.bStepFixed=true;
    if (sc.oStepNumber.intValue() < 1) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oStepNumber},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
}",0.9857873791927232
71450,"/** 
 * Zooms IN 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomIn(){
  if (bStepFixed) {
    return false;
  }
  if (ChartUtil.mathEqual(0,((Number)oStep).doubleValue())) {
    return false;
  }
  if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(oStep).doubleValue();
      if ((Math.log(dStep) / LOG_10) > 1) {
        oStep=new Double(dStep / 10);
      }
 else {
        int n=iaLogarithmicDeltas.length;
        for (int i=n - 1; i >= 0; i--) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            if (i > 0) {
              oStep=new Double(iaLogarithmicDeltas[i - 1]);
              return true;
            }
 else {
              return false;
            }
          }
        }
        return false;
      }
    }
 else     if ((iType & LINEAR) == LINEAR) {
      double dStep=asDouble(oStep).doubleValue();
      final double oldStep=dStep;
      if (bIntegralZoom) {
        double dPower=(Math.log(dStep) / LOG_10);
        dPower=Math.floor(dPower);
        dPower=Math.pow(10.0,dPower);
        dStep/=dPower;
        dStep=Math.round(dStep);
        int n=iaLinearDeltas.length;
        for (int i=0; i < n; i++) {
          if ((int)dStep == iaLinearDeltas[i]) {
            if (i > 0) {
              dStep=iaLinearDeltas[i - 1] * dPower;
            }
 else {
              dPower/=10;
              dStep=iaLinearDeltas[n - 2] * dPower;
            }
            break;
          }
        }
        if (dStep == oldStep) {
          dStep/=2;
        }
        oStep=new Double(dStep);
      }
 else {
        dStep/=2;
        oStep=new Double(dStep);
      }
      if (((Number)oStep).doubleValue() < dPrecision) {
        oStep=new Double(oldStep);
        return false;
      }
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(oStep);
    int iUnit=asInteger(oUnit);
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep--;
          if (iStep == 0) {
            oStep=new Integer(iaMonthDeltas[iaMonthDeltas.length - 1]);
            oUnit=new Integer(Calendar.MONTH);
          }
        }
 else {
          int i=0;
          for (; i < ia.length; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == 0) {
            if (icu <= iMinUnit) {
              return false;
            }
            ia=iaCalendarDeltas[icu - 1];
            i=ia.length;
            oUnit=new Integer(iaCalendarUnits[icu - 1]);
          }
          oStep=new Integer(ia[i - 1]);
          break;
        }
      }
    }
  }
  return true;
}","/** 
 * Zooms IN 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomIn(){
  if (bStepFixed) {
    return false;
  }
  if (ChartUtil.mathEqual(0,((Number)oStep).doubleValue())) {
    return false;
  }
  if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(oStep).doubleValue();
      if ((Math.log(dStep) / LOG_10) > 1) {
        setStep(new Double(dStep / 10));
      }
 else {
        int n=iaLogarithmicDeltas.length;
        for (int i=n - 1; i >= 0; i--) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            if (i > 0) {
              setStep(new Double(iaLogarithmicDeltas[i - 1]));
              return true;
            }
 else {
              return false;
            }
          }
        }
        return false;
      }
    }
 else     if ((iType & LINEAR) == LINEAR) {
      double dStep=asDouble(oStep).doubleValue();
      final double oldStep=dStep;
      if (bIntegralZoom) {
        double dPower=(Math.log(dStep) / LOG_10);
        dPower=Math.floor(dPower);
        dPower=Math.pow(10.0,dPower);
        dStep/=dPower;
        dStep=Math.round(dStep);
        int n=iaLinearDeltas.length;
        for (int i=0; i < n; i++) {
          if ((int)dStep == iaLinearDeltas[i]) {
            if (i > 0) {
              dStep=iaLinearDeltas[i - 1] * dPower;
            }
 else {
              dPower/=10;
              dStep=iaLinearDeltas[n - 2] * dPower;
            }
            break;
          }
        }
        if (dStep == oldStep) {
          dStep/=2;
        }
        setStep(new Double(dStep));
      }
 else {
        dStep/=2;
        setStep(new Double(dStep));
      }
      if (((Number)oStep).doubleValue() < dPrecision) {
        setStep(new Double(oldStep));
        return false;
      }
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(oStep);
    int iUnit=asInteger(oUnit);
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep--;
          if (iStep == 0) {
            setStep(new Integer(iaMonthDeltas[iaMonthDeltas.length - 1]));
            oUnit=new Integer(Calendar.MONTH);
          }
        }
 else {
          int i=0;
          for (; i < ia.length; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == 0) {
            if (icu <= iMinUnit) {
              return false;
            }
            ia=iaCalendarDeltas[icu - 1];
            i=ia.length;
            oUnit=new Integer(iaCalendarUnits[icu - 1]);
          }
          setStep(new Integer(ia[i - 1]));
          break;
        }
      }
    }
  }
  return true;
}",0.9817168727146092
71451,"private final void updateContext(ScaleContext sct){
  this.oMaximum=sct.getMax();
  this.oMinimum=sct.getMin();
  this.oMaximumWithMargin=sct.getMaxWithMargin();
  this.oMinimumWithMargin=sct.getMinWithMargin();
  this.oStep=sct.getStep();
  this.oUnit=sct.getUnit();
}","private final void updateContext(ScaleContext sct){
  this.oMaximum=sct.getMax();
  this.oMinimum=sct.getMin();
  this.oMaximumWithMargin=sct.getMaxWithMargin();
  this.oMinimumWithMargin=sct.getMinWithMargin();
  setStep(sct.getStep());
  this.oUnit=sct.getUnit();
}",0.9776119402985076
71452,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOrigin
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,AxisOrigin axisOrigin,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(dStep);
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(10);
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.oStep=new Integer(1);
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.iMinUnit=oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
        sc.oMinimumFixed=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
        sc.oMaximumFixed=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  sc.bLabelWithinAxes=ax.getModelAxis().isLabelWithinAxes();
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed || rtc.getScale() != null && rtc.getScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  sc.setData(dsi);
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOrigin
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,AxisOrigin axisOrigin,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(dStep));
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(10));
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.setStep(new Integer(1));
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.iMinUnit=oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
        sc.oMinimumFixed=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
        sc.oMaximumFixed=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  sc.bLabelWithinAxes=ax.getModelAxis().isLabelWithinAxes();
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed || rtc.getScale() != null && rtc.getScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  sc.setData(dsi);
  return sc;
}",0.9990064815252874
71453,"/** 
 * Computes min, max value, step size and step number of the Axis
 * @param oMinValue min value in data points. Double or CDateTime type.
 * @param oMaxValue max value in data points. Double or CDateTime type.
 */
public final void updateAxisMinMax(Object oMinValue,Object oMaxValue){
  if (rtc.getScale() != null && rtc.getScale().isShared()) {
    updateContext(rtc.getScale());
    return;
  }
  if (rtc.getScale() != null) {
    oMinValue=rtc.getScale().getMin();
    oMaxValue=rtc.getScale().getMax();
  }
  ScaleContext sct;
  if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    if ((iType & PERCENT) == PERCENT) {
      oMaximum=new Double(100);
      oMinimum=new Double(1);
      oStep=new Double(10);
      bMaximumFixed=true;
      bMinimumFixed=true;
      bStepFixed=true;
      return;
    }
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int iUnit=asInteger(oUnit);
    sct=new ScaleContext(iMarginPercent,iType,iUnit,oMinValue,oMaxValue,oStep);
  }
 else {
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
  if ((iType & DATE_TIME) == DATE_TIME) {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimumFixed,oMaximumFixed);
  }
 else {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimum,oMaximum);
  }
  sct.setFixedStep(bStepFixed,oStepNumber);
  sct.computeMinMax();
  updateContext(sct);
  tmpSC=sct;
  updateSharedScaleContext(rtc,iType,tmpSC);
}","/** 
 * Computes min, max value, step size and step number of the Axis
 * @param oMinValue min value in data points. Double or CDateTime type.
 * @param oMaxValue max value in data points. Double or CDateTime type.
 */
public final void updateAxisMinMax(Object oMinValue,Object oMaxValue){
  if (rtc.getScale() != null && rtc.getScale().isShared()) {
    updateContext(rtc.getScale());
    return;
  }
  if (rtc.getScale() != null) {
    oMinValue=rtc.getScale().getMin();
    oMaxValue=rtc.getScale().getMax();
  }
  ScaleContext sct;
  if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    if ((iType & PERCENT) == PERCENT) {
      oMaximum=new Double(100);
      oMinimum=new Double(1);
      setStep(new Double(10));
      bMaximumFixed=true;
      bMinimumFixed=true;
      bStepFixed=true;
      return;
    }
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int iUnit=asInteger(oUnit);
    sct=new ScaleContext(iMarginPercent,iType,iUnit,oMinValue,oMaxValue,oStep);
  }
 else {
    sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
  }
  if ((iType & DATE_TIME) == DATE_TIME) {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimumFixed,oMaximumFixed);
  }
 else {
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimum,oMaximum);
  }
  sct.setFixedStep(bStepFixed,oStepNumber);
  sct.computeMinMax();
  updateContext(sct);
  tmpSC=sct;
  updateSharedScaleContext(rtc,iType,tmpSC);
}",0.9949748743718592
71454,"/** 
 * Computes tick count
 * @return tick count
 */
public final int getTickCount() throws ChartException {
  if (this.oStepNumber != null) {
    if (bCategoryScale || (iType & NUMERICAL) != NUMERICAL) {
      logger.log(new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale())));
    }
 else {
      return this.oStepNumber.intValue() + 1;
    }
  }
  int nTicks=2;
  if (isCategoryScale()) {
    if (dsiData != null) {
      nTicks=dsiData.size() + 1;
      if (!bTickBetweenCategories) {
        nTicks++;
      }
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LINEAR) == LINEAR) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      if (!ChartUtil.mathEqual(dMax,dMin)) {
        double lNTicks=Math.ceil((dMax - dMin) / dStep - 0.5) + 1;
        if ((lNTicks > TICKS_MAX) || (lNTicks < 2)) {
          if (lNTicks > TICKS_MAX) {
            nTicks=TICKS_MAX;
          }
 else {
            nTicks=2;
          }
          dStep=dMax / (nTicks - 1) - dMin / (nTicks - 1);
          checkValible(dStep,Messages.getString(""String_Node_Str""));
          dStep=ChartUtil.alignWithInt(dStep,true);
          oStep=new Double(dStep);
        }
 else {
          nTicks=(int)lNTicks;
        }
      }
 else       nTicks=5;
    }
 else     if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      double dMaxLog=(Math.log(dMax) / LOG_10);
      double dMinLog=(Math.log(dMin) / LOG_10);
      double dStepLog=(Math.log(dStep) / LOG_10);
      nTicks=(int)Math.ceil((dMaxLog - dMinLog) / dStepLog) + 1;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    final CDateTime cdt1=(CDateTime)oMinimum;
    final CDateTime cdt2=(CDateTime)oMaximum;
    double diff=CDateTime.computeDifference(cdt2,cdt1,asInteger(oUnit)) / asInteger(oStep);
    nTicks=(int)Math.round(diff) + 1;
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  if (nTicks < 2) {
    nTicks=2;
  }
  return nTicks;
}","/** 
 * Computes tick count
 * @return tick count
 */
public final int getTickCount() throws ChartException {
  if (this.oStepNumber != null) {
    if (bCategoryScale || (iType & NUMERICAL) != NUMERICAL) {
      logger.log(new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale())));
    }
 else {
      return this.oStepNumber.intValue() + 1;
    }
  }
  int nTicks=2;
  if (isCategoryScale()) {
    if (dsiData != null) {
      nTicks=dsiData.size() + 1;
      if (!bTickBetweenCategories) {
        nTicks++;
      }
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LINEAR) == LINEAR) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      if (!ChartUtil.mathEqual(dMax,dMin)) {
        double lNTicks=Math.ceil((dMax - dMin) / dStep - 0.5) + 1;
        if ((lNTicks > TICKS_MAX) || (lNTicks < 2)) {
          if (lNTicks > TICKS_MAX) {
            nTicks=TICKS_MAX;
          }
 else {
            nTicks=2;
          }
          dStep=dMax / (nTicks - 1) - dMin / (nTicks - 1);
          checkValible(dStep,Messages.getString(""String_Node_Str""));
          dStep=ChartUtil.alignWithInt(dStep,true);
          setStep(new Double(dStep));
        }
 else {
          nTicks=(int)lNTicks;
        }
      }
 else       nTicks=5;
    }
 else     if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      double dMaxLog=(Math.log(dMax) / LOG_10);
      double dMinLog=(Math.log(dMin) / LOG_10);
      double dStepLog=(Math.log(dStep) / LOG_10);
      nTicks=(int)Math.ceil((dMaxLog - dMinLog) / dStepLog) + 1;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    final CDateTime cdt1=(CDateTime)oMinimum;
    final CDateTime cdt2=(CDateTime)oMaximum;
    double diff=CDateTime.computeDifference(cdt2,cdt1,asInteger(oUnit)) / asInteger(oStep);
    nTicks=(int)Math.round(diff) + 1;
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  if (nTicks < 2) {
    nTicks=2;
  }
  return nTicks;
}",0.9968105464597066
71455,"/** 
 * @param url
 * @return
 * @throws ImageLoadingException
 */
final Image loadImage(URL url) throws ChartException {
  Image img=(Image)htCache.get(url);
  if (img != null) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{url},idsSWING.getULocale()));
  }
 else {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{url},idsSWING.getULocale()));
    img=(new ImageIcon(url)).getImage();
    try {
      final MediaTracker tracker=new MediaTracker(p);
      tracker.addImage(img,0);
      tracker.waitForAll();
      if ((tracker.statusAll(true) & MediaTracker.ERRORED) != 0) {
        StringBuffer sb=new StringBuffer();
        Object[] oa=tracker.getErrorsAny();
        sb.append('[');
        for (int i=0; i < oa.length; i++) {
          sb.append(oa[i]);
          if (i < oa.length - 1) {
            sb.append(""String_Node_Str"");
          }
        }
        sb.append(']');
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.IMAGE_LOADING,""String_Node_Str"",new Object[]{sb.toString()},Messages.getResourceBundle(idsSWING.getULocale()));
      }
    }
 catch (    InterruptedException ex) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.IMAGE_LOADING,ex);
    }
    htCache.put(url,img);
  }
  return img;
}","/** 
 * @param url
 * @return
 * @throws ChartException
 */
final Image loadImage(URL url) throws ChartException {
  Image img=(Image)htCache.get(url);
  if (img != null) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{url},idsSWING.getULocale()));
  }
 else {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{url},idsSWING.getULocale()));
    img=(new ImageIcon(url)).getImage();
    try {
      final MediaTracker tracker=new MediaTracker(p);
      tracker.addImage(img,0);
      tracker.waitForAll();
      if ((tracker.statusAll(true) & MediaTracker.ERRORED) != 0) {
        StringBuffer sb=new StringBuffer();
        Object[] oa=tracker.getErrorsAny();
        sb.append('[');
        for (int i=0; i < oa.length; i++) {
          sb.append(oa[i]);
          if (i < oa.length - 1) {
            sb.append(""String_Node_Str"");
          }
        }
        sb.append(']');
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.IMAGE_LOADING,""String_Node_Str"",new Object[]{sb.toString()},Messages.getResourceBundle(idsSWING.getULocale()));
      }
    }
 catch (    InterruptedException ex) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.IMAGE_LOADING,ex);
    }
    htCache.put(url,img);
  }
  return img;
}",0.9936826458565589
71456,"/** 
 * @param ipr
 * @param iLabelPosition IConstants. LEFT, RIGHT, ABOVE or BELOW
 * @param lo POINT WHERE THE CORNER OF THE ROTATED RECTANGLE (OR EDGE CENTERED) IS RENDERED
 * @param la
 * @throws RenderingException
 */
public final void renderTextAtLocation(IPrimitiveRenderer ipr,int iLabelPosition,Location lo,Label la) throws ChartException {
  final ColorDefinition cdText=la.getCaption().getColor();
  if (cdText == null) {
    throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(_sxs.getULocale()));
  }
  final Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  g2d.setFont((java.awt.Font)_sxs.createFont(la.getCaption().getFont()));
switch (iLabelPosition & POSITION_MASK) {
case ABOVE:
    if (ChartUtil.isShadowDefined(la)) {
      showTopValue(ipr,lo,la,iLabelPosition,true);
    }
  showTopValue(ipr,lo,la,iLabelPosition,false);
break;
case BELOW:
if (ChartUtil.isShadowDefined(la)) {
showBottomValue(ipr,lo,la,iLabelPosition,true);
}
showBottomValue(ipr,lo,la,iLabelPosition,false);
break;
case LEFT:
if (ChartUtil.isShadowDefined(la)) {
showLeftValue(ipr,lo,la,iLabelPosition,true);
}
showLeftValue(ipr,lo,la,iLabelPosition,false);
break;
case RIGHT:
if (ChartUtil.isShadowDefined(la)) {
showRightValue(ipr,lo,la,iLabelPosition,true);
}
showRightValue(ipr,lo,la,iLabelPosition,false);
break;
case INSIDE:
if (ChartUtil.isShadowDefined(la)) {
showCenterValue(ipr,lo,la,true);
}
showCenterValue(ipr,lo,la,false);
break;
}
}","/** 
 * @param ipr
 * @param iLabelPosition IConstants. LEFT, RIGHT, ABOVE or BELOW
 * @param lo POINT WHERE THE CORNER OF THE ROTATED RECTANGLE (OR EDGE CENTERED) IS RENDERED
 * @param la
 * @throws ChartException
 */
public final void renderTextAtLocation(IPrimitiveRenderer ipr,int iLabelPosition,Location lo,Label la) throws ChartException {
  final ColorDefinition cdText=la.getCaption().getColor();
  if (cdText == null) {
    throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(_sxs.getULocale()));
  }
  final Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  g2d.setFont((java.awt.Font)_sxs.createFont(la.getCaption().getFont()));
switch (iLabelPosition & POSITION_MASK) {
case ABOVE:
    if (ChartUtil.isShadowDefined(la)) {
      showTopValue(ipr,lo,la,iLabelPosition,true);
    }
  showTopValue(ipr,lo,la,iLabelPosition,false);
break;
case BELOW:
if (ChartUtil.isShadowDefined(la)) {
showBottomValue(ipr,lo,la,iLabelPosition,true);
}
showBottomValue(ipr,lo,la,iLabelPosition,false);
break;
case LEFT:
if (ChartUtil.isShadowDefined(la)) {
showLeftValue(ipr,lo,la,iLabelPosition,true);
}
showLeftValue(ipr,lo,la,iLabelPosition,false);
break;
case RIGHT:
if (ChartUtil.isShadowDefined(la)) {
showRightValue(ipr,lo,la,iLabelPosition,true);
}
showRightValue(ipr,lo,la,iLabelPosition,false);
break;
case INSIDE:
if (ChartUtil.isShadowDefined(la)) {
showCenterValue(ipr,lo,la,true);
}
showCenterValue(ipr,lo,la,false);
break;
}
}",0.9954337899543378
71457,"/** 
 * @param renderer
 * @param labelPosition IConstants. LEFT, RIGHT, ABOVE or BELOW
 * @param location POINT WHERE THE CORNER OF THE ROTATED RECTANGLE (OR EDGE CENTERED) IS RENDERED
 * @param label
 * @throws RenderingException
 */
public final void renderTextAtLocation(IPrimitiveRenderer renderer,int labelPosition,Location location,Label label) throws ChartException {
  final ColorDefinition colorDef=label.getCaption().getColor();
  if (colorDef == null) {
    throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(_sxs.getULocale()));
  }
  final Graphics2D g2d=(Graphics2D)((IDeviceRenderer)renderer).getGraphicsContext();
  g2d.setFont((java.awt.Font)_sxs.createFont(label.getCaption().getFont()));
switch (labelPosition & POSITION_MASK) {
case ABOVE:
    if (ChartUtil.isShadowDefined(label)) {
      showTopValue(renderer,location,label,labelPosition,true);
    }
  showTopValue(renderer,location,label,labelPosition,false);
break;
case BELOW:
if (ChartUtil.isShadowDefined(label)) {
showBottomValue(renderer,location,label,labelPosition,true);
}
showBottomValue(renderer,location,label,labelPosition,false);
break;
case LEFT:
if (ChartUtil.isShadowDefined(label)) {
showLeftValue(renderer,location,label,labelPosition,true);
}
showLeftValue(renderer,location,label,labelPosition,false);
break;
case RIGHT:
if (ChartUtil.isShadowDefined(label)) {
showRightValue(renderer,location,label,labelPosition,true);
}
showRightValue(renderer,location,label,labelPosition,false);
break;
case INSIDE:
if (ChartUtil.isShadowDefined(label)) {
showCenterValue(renderer,location,label,true);
}
showCenterValue(renderer,location,label,false);
break;
}
}","/** 
 * @param renderer
 * @param labelPosition IConstants. LEFT, RIGHT, ABOVE or BELOW
 * @param location POINT WHERE THE CORNER OF THE ROTATED RECTANGLE (OR EDGE CENTERED) IS RENDERED
 * @param label
 * @throws ChartException
 */
public final void renderTextAtLocation(IPrimitiveRenderer renderer,int labelPosition,Location location,Label label) throws ChartException {
  final ColorDefinition colorDef=label.getCaption().getColor();
  if (colorDef == null) {
    throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(_sxs.getULocale()));
  }
  final Graphics2D g2d=(Graphics2D)((IDeviceRenderer)renderer).getGraphicsContext();
  g2d.setFont((java.awt.Font)_sxs.createFont(label.getCaption().getFont()));
switch (labelPosition & POSITION_MASK) {
case ABOVE:
    if (ChartUtil.isShadowDefined(label)) {
      showTopValue(renderer,location,label,labelPosition,true);
    }
  showTopValue(renderer,location,label,labelPosition,false);
break;
case BELOW:
if (ChartUtil.isShadowDefined(label)) {
showBottomValue(renderer,location,label,labelPosition,true);
}
showBottomValue(renderer,location,label,labelPosition,false);
break;
case LEFT:
if (ChartUtil.isShadowDefined(label)) {
showLeftValue(renderer,location,label,labelPosition,true);
}
showLeftValue(renderer,location,label,labelPosition,false);
break;
case RIGHT:
if (ChartUtil.isShadowDefined(label)) {
showRightValue(renderer,location,label,labelPosition,true);
}
showRightValue(renderer,location,label,labelPosition,false);
break;
case INSIDE:
if (ChartUtil.isShadowDefined(label)) {
showCenterValue(renderer,location,label,true);
}
showCenterValue(renderer,location,label,false);
break;
}
}",0.9959302325581396
71458,"/** 
 * Serializes a <code>Document</code> object to a <code>String</code> in XML format.  This is a convevience method to save the output of the SVG generator to a string.
 * @param generatedDocument the generated graphic
 * @return String the XML-serialized form of the <code>Document</code>
 * @throws SVGGeneratorException If XML serialization failed
 */
protected String serializeGeneratedDocumentToString(Document generatedDocument) throws Exception {
  if (generatedDocument == null) {
    return null;
  }
  OutputStreamWriter writer=null;
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  writer=new OutputStreamWriter(stream,""String_Node_Str"");
  DOMSource source=new DOMSource(generatedDocument);
  StreamResult result=new StreamResult(writer);
  TransformerFactory transFactory=TransformerFactory.newInstance();
  Transformer transformer=transFactory.newTransformer();
  transformer.transform(source,result);
  return stream.toString();
}","/** 
 * Serializes a <code>Document</code> object to a <code>String</code> in XML format. This is a convevience method to save the output of the SVG generator to a string.
 * @param generatedDocument the generated graphic
 * @return String the XML-serialized form of the <code>Document</code>
 * @throws Exception If XML serialization failed
 */
protected String serializeGeneratedDocumentToString(Document generatedDocument) throws Exception {
  if (generatedDocument == null) {
    return null;
  }
  OutputStreamWriter writer=null;
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  writer=new OutputStreamWriter(stream,""String_Node_Str"");
  DOMSource source=new DOMSource(generatedDocument);
  StreamResult result=new StreamResult(writer);
  TransformerFactory transFactory=TransformerFactory.newInstance();
  Transformer transformer=transFactory.newTransformer();
  transformer.transform(source,result);
  return stream.toString();
}",0.9931972789115646
71459,"/** 
 * @param os
 * @throws RenderingException
 */
public void after() throws ChartException {
  super.after();
  ivRenderer.addInteractivity();
  addScripts();
  ((SVGGraphics2D)_g2d).flush();
  dom.getDocumentElement().appendChild(ivRenderer.getHotspotLayer());
  if (oOutputIdentifier instanceof OutputStream) {
    try {
      writeDocumentToOutputStream(dom,(OutputStream)oOutputIdentifier);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartDeviceSVGPlugin.ID,ChartException.RENDERING,ex);
    }
  }
 else   if (oOutputIdentifier instanceof String) {
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream((String)oOutputIdentifier);
      writeDocumentToOutputStream(dom,fos);
      fos.close();
    }
 catch (    Exception ex) {
      throw new ChartException(ChartDeviceSVGPlugin.ID,ChartException.RENDERING,ex);
    }
  }
 else {
    throw new ChartException(ChartDeviceSVGPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{oOutputIdentifier},null);
  }
  ivRenderer.clear();
}","/** 
 * @param os
 * @throws ChartException
 */
public void after() throws ChartException {
  super.after();
  ivRenderer.addInteractivity();
  addScripts();
  ((SVGGraphics2D)_g2d).flush();
  dom.getDocumentElement().appendChild(ivRenderer.getHotspotLayer());
  if (oOutputIdentifier instanceof OutputStream) {
    try {
      writeDocumentToOutputStream(dom,(OutputStream)oOutputIdentifier);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartDeviceSVGPlugin.ID,ChartException.RENDERING,ex);
    }
  }
 else   if (oOutputIdentifier instanceof String) {
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream((String)oOutputIdentifier);
      writeDocumentToOutputStream(dom,fos);
      fos.close();
    }
 catch (    Exception ex) {
      throw new ChartException(ChartDeviceSVGPlugin.ID,ChartException.RENDERING,ex);
    }
  }
 else {
    throw new ChartException(ChartDeviceSVGPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{oOutputIdentifier},null);
  }
  ivRenderer.clear();
}",0.9932562620423891
71460,"/** 
 * @param ipr
 * @param iLabelPosition
 * @param lo
 * @param la
 * @throws RenderingException
 */
public final void renderTextAtLocation(IPrimitiveRenderer idr,int iLabelPosition,Location lo,Label la) throws ChartException {
  final GC gc=(GC)((IDeviceRenderer)idr).getGraphicsContext();
  BoundingBox bb=null;
  try {
    bb=Methods.computeBox(_sxs,iLabelPosition,la,0,0);
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,uiex);
  }
switch (iLabelPosition & POSITION_MASK) {
case ABOVE:
    bb.setTop(lo.getY() - bb.getHeight());
  bb.setLeft(lo.getX() - bb.getHotPoint());
break;
case BELOW:
bb.setTop(lo.getY());
bb.setLeft(lo.getX() - bb.getHotPoint());
break;
case LEFT:
bb.setTop(lo.getY() - bb.getHotPoint());
bb.setLeft(lo.getX() - bb.getWidth());
break;
case RIGHT:
bb.setTop(lo.getY() - bb.getHotPoint());
bb.setLeft(lo.getX());
break;
case INSIDE:
bb.setTop(lo.getY() - bb.getHeight() / 2);
bb.setLeft(lo.getX() - bb.getWidth() / 2);
break;
}
adjustTextPosition(iLabelPosition,bb);
if (ChartUtil.isShadowDefined(la)) {
try {
final ITextMetrics itm=_sxs.getTextMetrics(la);
final double dFH=itm.getFullHeight();
Location tmpLoc=Methods.computeRotatedTopPoint(_sxs,bb,la,dFH);
renderShadowAtLocation(idr,IConstants.ABOVE,tmpLoc,la);
}
 catch (IllegalArgumentException uiex) {
throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,uiex);
}
}
if (la.getCaption().getFont().getRotation() == 0 || R31Enhance.isR31Available()) {
renderHorizontalText(gc,la,bb.getLeft(),bb.getTop());
}
 else {
final Image imgText=rotatedTextAsImage(la);
gc.drawImage(imgText,(int)bb.getLeft(),(int)bb.getTop());
imgText.dispose();
}
renderBorder(gc,la,iLabelPosition,lo);
}","/** 
 * @param ipr
 * @param iLabelPosition
 * @param lo
 * @param la
 * @throws ChartException
 */
public final void renderTextAtLocation(IPrimitiveRenderer idr,int iLabelPosition,Location lo,Label la) throws ChartException {
  final GC gc=(GC)((IDeviceRenderer)idr).getGraphicsContext();
  BoundingBox bb=null;
  try {
    bb=Methods.computeBox(_sxs,iLabelPosition,la,0,0);
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,uiex);
  }
switch (iLabelPosition & POSITION_MASK) {
case ABOVE:
    bb.setTop(lo.getY() - bb.getHeight());
  bb.setLeft(lo.getX() - bb.getHotPoint());
break;
case BELOW:
bb.setTop(lo.getY());
bb.setLeft(lo.getX() - bb.getHotPoint());
break;
case LEFT:
bb.setTop(lo.getY() - bb.getHotPoint());
bb.setLeft(lo.getX() - bb.getWidth());
break;
case RIGHT:
bb.setTop(lo.getY() - bb.getHotPoint());
bb.setLeft(lo.getX());
break;
case INSIDE:
bb.setTop(lo.getY() - bb.getHeight() / 2);
bb.setLeft(lo.getX() - bb.getWidth() / 2);
break;
}
adjustTextPosition(iLabelPosition,bb);
if (ChartUtil.isShadowDefined(la)) {
try {
final ITextMetrics itm=_sxs.getTextMetrics(la);
final double dFH=itm.getFullHeight();
Location tmpLoc=Methods.computeRotatedTopPoint(_sxs,bb,la,dFH);
renderShadowAtLocation(idr,IConstants.ABOVE,tmpLoc,la);
}
 catch (IllegalArgumentException uiex) {
throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,uiex);
}
}
if (la.getCaption().getFont().getRotation() == 0 || R31Enhance.isR31Available()) {
renderHorizontalText(gc,la,bb.getLeft(),bb.getTop());
}
 else {
final Image imgText=rotatedTextAsImage(la);
gc.drawImage(imgText,(int)bb.getLeft(),(int)bb.getTop());
imgText.dispose();
}
renderBorder(gc,la,iLabelPosition,lo);
}",0.9960362400906002
71461,"/** 
 * @param ds
 * @throws UnexpectedInputException
 */
public DataSetIterator(DataSet ds) throws IllegalArgumentException, ChartException {
  Object oContent=ds.getValues();
  if (ds instanceof NumberDataSet) {
    iDataType=IConstants.NUMERICAL;
    if (oContent instanceof Collection) {
      iContentType=IConstants.COLLECTION;
      co=(Collection)oContent;
    }
 else     if (oContent instanceof double[]) {
      iContentType=IConstants.PRIMITIVE_ARRAY;
      da=(double[])oContent;
    }
 else     if (oContent instanceof Double[]) {
      iContentType=IConstants.NON_PRIMITIVE_ARRAY;
      dda=(Double[])oContent;
    }
 else     if (oContent instanceof Number) {
      iContentType=IConstants.PRIMITIVE_ARRAY;
      da=new double[]{((Number)oContent).doubleValue()};
    }
  }
 else   if (ds instanceof DateTimeDataSet) {
    iDataType=IConstants.DATE_TIME;
    if (oContent instanceof Collection) {
      iContentType=IConstants.COLLECTION;
      co=(Collection)oContent;
    }
 else     if (oContent instanceof long[]) {
      iContentType=IConstants.PRIMITIVE_ARRAY;
      la=(long[])oContent;
      cReused=Calendar.getInstance();
    }
 else     if (oContent instanceof Calendar[]) {
      iContentType=IConstants.NON_PRIMITIVE_ARRAY;
      ca=(Calendar[])oContent;
    }
    updateDateTimeValues();
  }
 else   if (ds instanceof TextDataSet) {
    iDataType=IConstants.TEXT;
    if (oContent instanceof Collection) {
      iContentType=IConstants.COLLECTION;
      co=(Collection)oContent;
    }
 else     if (oContent instanceof String[]) {
      iContentType=IConstants.NON_PRIMITIVE_ARRAY;
      sa=(String[])oContent;
    }
  }
 else   if (ds instanceof NullDataSet) {
    iDataType=IConstants.OTHER;
    iContentType=IConstants.NON_PRIMITIVE_ARRAY;
    oa=(Object[])oContent;
  }
 else {
    iDataType=IConstants.OTHER;
    if (oContent instanceof Collection) {
      iContentType=IConstants.COLLECTION;
      co=(Collection)oContent;
    }
 else     if (oContent instanceof Object[]) {
      iContentType=IConstants.NON_PRIMITIVE_ARRAY;
      oa=(Object[])oContent;
    }
    iDataType=IConstants.UNDEFINED;
  }
  if (iContentType == IConstants.UNDEFINED) {
    throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle().getString(""String_Node_Str""),new Object[]{oContent,ds}));
  }
  if (co != null) {
    it=co.iterator();
  }
  iRowCount=getRowCountInternal();
}","/** 
 * @param ds
 * @throws IllegalArgumentException
 * @throws ChartException
 */
public DataSetIterator(DataSet ds) throws IllegalArgumentException, ChartException {
  Object oContent=ds.getValues();
  if (ds instanceof NumberDataSet) {
    iDataType=IConstants.NUMERICAL;
    if (oContent instanceof Collection) {
      iContentType=IConstants.COLLECTION;
      co=(Collection)oContent;
    }
 else     if (oContent instanceof double[]) {
      iContentType=IConstants.PRIMITIVE_ARRAY;
      da=(double[])oContent;
    }
 else     if (oContent instanceof Double[]) {
      iContentType=IConstants.NON_PRIMITIVE_ARRAY;
      dda=(Double[])oContent;
    }
 else     if (oContent instanceof Number) {
      iContentType=IConstants.PRIMITIVE_ARRAY;
      da=new double[]{((Number)oContent).doubleValue()};
    }
  }
 else   if (ds instanceof DateTimeDataSet) {
    iDataType=IConstants.DATE_TIME;
    if (oContent instanceof Collection) {
      iContentType=IConstants.COLLECTION;
      co=(Collection)oContent;
    }
 else     if (oContent instanceof long[]) {
      iContentType=IConstants.PRIMITIVE_ARRAY;
      la=(long[])oContent;
      cReused=Calendar.getInstance();
    }
 else     if (oContent instanceof Calendar[]) {
      iContentType=IConstants.NON_PRIMITIVE_ARRAY;
      ca=(Calendar[])oContent;
    }
    updateDateTimeValues();
  }
 else   if (ds instanceof TextDataSet) {
    iDataType=IConstants.TEXT;
    if (oContent instanceof Collection) {
      iContentType=IConstants.COLLECTION;
      co=(Collection)oContent;
    }
 else     if (oContent instanceof String[]) {
      iContentType=IConstants.NON_PRIMITIVE_ARRAY;
      sa=(String[])oContent;
    }
  }
 else   if (ds instanceof NullDataSet) {
    iDataType=IConstants.OTHER;
    iContentType=IConstants.NON_PRIMITIVE_ARRAY;
    oa=(Object[])oContent;
  }
 else {
    iDataType=IConstants.OTHER;
    if (oContent instanceof Collection) {
      iContentType=IConstants.COLLECTION;
      co=(Collection)oContent;
    }
 else     if (oContent instanceof Object[]) {
      iContentType=IConstants.NON_PRIMITIVE_ARRAY;
      oa=(Object[])oContent;
    }
    iDataType=IConstants.UNDEFINED;
  }
  if (iContentType == IConstants.UNDEFINED) {
    throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle().getString(""String_Node_Str""),new Object[]{oContent,ds}));
  }
  if (co != null) {
    it=co.iterator();
  }
  iRowCount=getRowCountInternal();
}",0.9892960065870728
71462,"/** 
 * Computes the size of the legend. Note the computation relies on the title size, so the title block must be layouted first before this.
 * @param lg
 * @param sea
 * @throws GenerationException
 */
public final Size compute(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc) throws ChartException {
  ITextMetrics itm=null;
  try {
    final Legend lg=cm.getLegend();
    LegendData legendData=new LegendData();
    if (!lg.isSetOrientation()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    if (!lg.isSetDirection()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    final Orientation orientation=lg.getOrientation();
    final Direction direction=lg.getDirection();
    final boolean bPaletteByCategory=(lg.getItemType().getValue() == LegendItemType.CATEGORIES);
    Label la=LabelImpl.create();
    la.setEllipsis(1);
    la.setCaption(TextImpl.copyInstance(lg.getText()));
    ClientArea ca=lg.getClientArea();
    LineAttributes lia=ca.getOutline();
    legendData.dSeparatorThickness=lia.getThickness();
    la.getCaption().setValue(""String_Node_Str"");
    itm=xs.getTextMetrics(la);
    legendData.dItemHeight=itm.getFullHeight();
    legendData.dScale=xs.getDpiResolution() / 72d;
    legendData.insCa=ca.getInsets().scaledInstance(legendData.dScale);
    legendData.maxWrappingSize=lg.getWrappingSize() * legendData.dScale;
    legendData.dHorizontalSpacing=3 * legendData.dScale;
    legendData.dVerticalSpacing=3 * legendData.dScale;
    legendData.dSafeSpacing=3 * legendData.dScale;
    legendData.dHorizonalReservedSpace=legendData.insCa.getLeft() + legendData.insCa.getRight() + (3 * legendData.dItemHeight) / 2 + legendData.dHorizontalSpacing;
    initAvailableSize(legendData,xs,cm);
    boolean bMinSliceDefined=false;
    if (cm instanceof ChartWithoutAxes) {
      bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
      legendData.sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
      if (legendData.sMinSliceLabel == null || legendData.sMinSliceLabel.length() == 0) {
        legendData.sMinSliceLabel=IConstants.UNDEFINED_STRING;
      }
 else {
        legendData.sMinSliceLabel=rtc.externalizedMessage(legendData.sMinSliceLabel);
      }
    }
    if (bMinSliceDefined && bPaletteByCategory && cm instanceof ChartWithoutAxes) {
      calculateExtraLegend(cm,rtc,legendData);
    }
    Label lgTitle=lg.getTitle();
    Size titleSize=null;
    BoundingBox titleBounding=null;
    int iTitlePos=-1;
    if (lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible()) {
      lgTitle=LabelImpl.copyInstance(lgTitle);
      final String sPreviousValue=lgTitle.getCaption().getValue();
      lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
      try {
        titleBounding=Methods.computeBox(xs,IConstants.ABOVE,lgTitle,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      iTitlePos=lg.getTitlePosition().getValue();
      if (rtc.isRightToLeft()) {
        if (iTitlePos == Position.LEFT) {
          iTitlePos=Position.RIGHT;
        }
 else         if (iTitlePos == Position.RIGHT) {
          iTitlePos=Position.LEFT;
        }
      }
      double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
        legendData.dAvailableHeight-=titleBounding.getHeight() + 2 * shadowness;
      break;
case Position.LEFT:
case Position.RIGHT:
    legendData.dAvailableWidth-=titleBounding.getWidth() + 2 * shadowness;
  break;
}
titleSize=SizeImpl.create(titleBounding.getWidth() + 2 * shadowness,titleBounding.getHeight() + 2 * shadowness);
}
double[] size=null;
boolean bNeedInvert=needInvert(bPaletteByCategory,cm,seda);
rtc.putState(""String_Node_Str"",Boolean.toString(bNeedInvert));
if (orientation.getValue() == Orientation.VERTICAL) {
if (bPaletteByCategory) {
size=computeVerticalByCategory(xs,cm,rtc,itm,la,legendData,bNeedInvert);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeVerticalByValue(xs,cm,seda,rtc,itm,la,legendData,bNeedInvert,false);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeVerticalByValue(xs,cm,seda,rtc,itm,la,legendData,bNeedInvert,true);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction.getName()},Messages.getResourceBundle(xs.getULocale()));
}
}
 else if (orientation.getValue() == Orientation.HORIZONTAL) {
if (bPaletteByCategory) {
size=computeHorizalByCategory(xs,cm,rtc,itm,la,legendData,bNeedInvert);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeHorizalByValue(xs,cm,seda,rtc,itm,la,legendData,bNeedInvert,false);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeHorizalByValue(xs,cm,seda,rtc,itm,la,legendData,bNeedInvert,true);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction},Messages.getResourceBundle(xs.getULocale()));
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{orientation},Messages.getResourceBundle(xs.getULocale()));
}
if (size == null) {
return SizeImpl.create(0,0);
}
double dWidth=size[0], dHeight=size[1];
if (iTitlePos != -1) {
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
dHeight+=titleBounding.getHeight() + 2 * shadowness;
dWidth=Math.max(dWidth,titleBounding.getWidth() + 2 * shadowness);
break;
case Position.LEFT:
case Position.RIGHT:
dWidth+=titleBounding.getWidth() + 2 * shadowness;
dHeight=Math.max(dHeight,titleBounding.getHeight() + 2 * shadowness);
break;
}
}
if (rtc != null) {
List<LegendItemHints> legendItems=legendData.legendItems;
LegendItemHints[] liha=legendItems.toArray(new LegendItemHints[legendItems.size()]);
LegendLayoutHints lilh=new LegendLayoutHints(SizeImpl.create(dWidth,dHeight),titleSize,legendData.bMinSliceApplied,legendData.sMinSliceLabel,liha);
rtc.setLegendLayoutHints(lilh);
}
sz=SizeImpl.create(dWidth,dHeight);
}
  finally {
itm.dispose();
}
return sz;
}","/** 
 * Computes the size of the legend. Note the computation relies on the title size, so the title block must be layouted first before this.
 * @param lg
 * @param sea
 * @throws ChartException
 */
public final Size compute(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc) throws ChartException {
  ITextMetrics itm=null;
  try {
    final Legend lg=cm.getLegend();
    LegendData legendData=new LegendData();
    if (!lg.isSetOrientation()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    if (!lg.isSetDirection()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    final Orientation orientation=lg.getOrientation();
    final Direction direction=lg.getDirection();
    final boolean bPaletteByCategory=(lg.getItemType().getValue() == LegendItemType.CATEGORIES);
    Label la=LabelImpl.create();
    la.setEllipsis(1);
    la.setCaption(TextImpl.copyInstance(lg.getText()));
    ClientArea ca=lg.getClientArea();
    LineAttributes lia=ca.getOutline();
    legendData.dSeparatorThickness=lia.getThickness();
    la.getCaption().setValue(""String_Node_Str"");
    itm=xs.getTextMetrics(la);
    legendData.dItemHeight=itm.getFullHeight();
    legendData.dScale=xs.getDpiResolution() / 72d;
    legendData.insCa=ca.getInsets().scaledInstance(legendData.dScale);
    legendData.maxWrappingSize=lg.getWrappingSize() * legendData.dScale;
    legendData.dHorizontalSpacing=3 * legendData.dScale;
    legendData.dVerticalSpacing=3 * legendData.dScale;
    legendData.dSafeSpacing=3 * legendData.dScale;
    legendData.dHorizonalReservedSpace=legendData.insCa.getLeft() + legendData.insCa.getRight() + (3 * legendData.dItemHeight) / 2 + legendData.dHorizontalSpacing;
    initAvailableSize(legendData,xs,cm);
    boolean bMinSliceDefined=false;
    if (cm instanceof ChartWithoutAxes) {
      bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
      legendData.sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
      if (legendData.sMinSliceLabel == null || legendData.sMinSliceLabel.length() == 0) {
        legendData.sMinSliceLabel=IConstants.UNDEFINED_STRING;
      }
 else {
        legendData.sMinSliceLabel=rtc.externalizedMessage(legendData.sMinSliceLabel);
      }
    }
    if (bMinSliceDefined && bPaletteByCategory && cm instanceof ChartWithoutAxes) {
      calculateExtraLegend(cm,rtc,legendData);
    }
    Label lgTitle=lg.getTitle();
    Size titleSize=null;
    BoundingBox titleBounding=null;
    int iTitlePos=-1;
    if (lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible()) {
      lgTitle=LabelImpl.copyInstance(lgTitle);
      final String sPreviousValue=lgTitle.getCaption().getValue();
      lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
      try {
        titleBounding=Methods.computeBox(xs,IConstants.ABOVE,lgTitle,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      iTitlePos=lg.getTitlePosition().getValue();
      if (rtc.isRightToLeft()) {
        if (iTitlePos == Position.LEFT) {
          iTitlePos=Position.RIGHT;
        }
 else         if (iTitlePos == Position.RIGHT) {
          iTitlePos=Position.LEFT;
        }
      }
      double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
        legendData.dAvailableHeight-=titleBounding.getHeight() + 2 * shadowness;
      break;
case Position.LEFT:
case Position.RIGHT:
    legendData.dAvailableWidth-=titleBounding.getWidth() + 2 * shadowness;
  break;
}
titleSize=SizeImpl.create(titleBounding.getWidth() + 2 * shadowness,titleBounding.getHeight() + 2 * shadowness);
}
double[] size=null;
boolean bNeedInvert=needInvert(bPaletteByCategory,cm,seda);
rtc.putState(""String_Node_Str"",Boolean.toString(bNeedInvert));
if (orientation.getValue() == Orientation.VERTICAL) {
if (bPaletteByCategory) {
size=computeVerticalByCategory(xs,cm,rtc,itm,la,legendData,bNeedInvert);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeVerticalByValue(xs,cm,seda,rtc,itm,la,legendData,bNeedInvert,false);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeVerticalByValue(xs,cm,seda,rtc,itm,la,legendData,bNeedInvert,true);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction.getName()},Messages.getResourceBundle(xs.getULocale()));
}
}
 else if (orientation.getValue() == Orientation.HORIZONTAL) {
if (bPaletteByCategory) {
size=computeHorizalByCategory(xs,cm,rtc,itm,la,legendData,bNeedInvert);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeHorizalByValue(xs,cm,seda,rtc,itm,la,legendData,bNeedInvert,false);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeHorizalByValue(xs,cm,seda,rtc,itm,la,legendData,bNeedInvert,true);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction},Messages.getResourceBundle(xs.getULocale()));
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{orientation},Messages.getResourceBundle(xs.getULocale()));
}
if (size == null) {
return SizeImpl.create(0,0);
}
double dWidth=size[0], dHeight=size[1];
if (iTitlePos != -1) {
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
dHeight+=titleBounding.getHeight() + 2 * shadowness;
dWidth=Math.max(dWidth,titleBounding.getWidth() + 2 * shadowness);
break;
case Position.LEFT:
case Position.RIGHT:
dWidth+=titleBounding.getWidth() + 2 * shadowness;
dHeight=Math.max(dHeight,titleBounding.getHeight() + 2 * shadowness);
break;
}
}
if (rtc != null) {
List<LegendItemHints> legendItems=legendData.legendItems;
LegendItemHints[] liha=legendItems.toArray(new LegendItemHints[legendItems.size()]);
LegendLayoutHints lilh=new LegendLayoutHints(SizeImpl.create(dWidth,dHeight),titleSize,legendData.bMinSliceApplied,legendData.sMinSliceLabel,liha);
rtc.setLegendLayoutHints(lilh);
}
sz=SizeImpl.create(dWidth,dHeight);
}
  finally {
itm.dispose();
}
return sz;
}",0.9988250959504974
71463,"/** 
 * @param aax
 * @param dAxisStart
 * @param dAxisEnd
 * @param dBlockStart
 * @param dBlockLength
 * @throws PluginException
 * @throws DataSetException
 * @throws GenerationException
 */
private final void updateOverlayScales(AllAxes aax,double dAxisStart,double dAxisEnd,double dBlockStart,double dBlockLength) throws ChartException, IllegalArgumentException {
  final Axis[] axa=((ChartWithAxesImpl)cwa).getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis[] axaOrthogonal=((ChartWithAxesImpl)cwa).getOrthogonalAxes(axPrimaryBase,false);
  IntersectionValue iv;
  AutoScale sc=null;
  OneAxis oaxOverlay=null;
  int iTickStyle, iAxisType, j, iTitleLocation;
  int iOverlayCount=aax.getOverlayCount();
  int iOrientation=aax.getOrientation();
  double dStart, dEnd, dAxisLabelsThickness;
  Label laAxisTitle;
  Scale scModel;
  Series[] sea=cwa.getSeries(IConstants.ORTHOGONAL);
  Map<?,?> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < iOverlayCount; i++) {
    j=iOverlayCount - i - 1;
    oaxOverlay=aax.getOverlay(j);
    iTickStyle=oaxOverlay.getCombinedTickStyle();
    iTitleLocation=oaxOverlay.getTitlePosition();
    laAxisTitle=oaxOverlay.getTitle();
    iAxisType=getAxisType(axaOrthogonal[j]);
    scModel=axaOrthogonal[j].getScale();
    sc=AutoScale.computeScale(ids,oaxOverlay,new DataSetIterator(getMinMax(axaOrthogonal[j],iAxisType),iAxisType),iAxisType,dAxisStart,dAxisEnd,scModel,axaOrthogonal[j].getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
    oaxOverlay.set(sc);
    iv=oaxOverlay.getIntersectionValue();
    dStart=sc.getStart();
    dEnd=sc.getEnd();
    sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
    if (!sc.isStepFixed()) {
      final Object[] oaMinMax=sc.getMinMax();
      while (!sc.checkFit(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition())) {
        if (!sc.zoomOut()) {
          break;
        }
        sc.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
      }
    }
    dAxisLabelsThickness=sc.computeAxisLabelThickness(ids,oaxOverlay.getLabel(),iOrientation);
    double[] dDecorationThickness={0,0};
    for (int t=0; t < sea.length; t++) {
      LegendItemRenderingHints lirh=(LegendItemRenderingHints)seriesRenderingHints.get(sea[t]);
      if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
        IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(oaxOverlay);
        if (iad != null) {
          double[] thickness=iad.computeDecorationThickness(ids,oaxOverlay);
          if (thickness[0] > dDecorationThickness[0]) {
            dDecorationThickness[0]=thickness[0];
          }
          if (thickness[1] > dDecorationThickness[1]) {
            dDecorationThickness[1]=thickness[1];
          }
        }
      }
    }
    double dAxisTitleThickness=0;
    sc.resetShifts();
    if (iOrientation == VERTICAL) {
      double dX=0, dX1=0, dX2=0;
      final boolean bTicksLeft=(iTickStyle & TICK_LEFT) == TICK_LEFT;
      final boolean bTicksRight=(iTickStyle & TICK_RIGHT) == TICK_RIGHT;
      final double dAppliedYAxisPlotSpacing=dYAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        dAxisTitleThickness=computeBox(ids,iTitleLocation,laAxisTitle,0,0,ChartUtil.computeHeightOfOrthogonalAxisTitle(cwa,getDisplayServer())).getWidth();
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (iv.getType() == IConstants.MIN) {
        dX=dBlockStart;
        dX-=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksLeft) {
          dX1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dX2+=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX1-=dDecorationThickness[0];
          dX2+=Math.max((bTicksRight ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX1 < dBlockStart) {
          final double dDelta=(dBlockStart - dX1);
          dX1=dBlockStart;
          dX+=dDelta;
          dX2+=dDelta;
        }
        dBlockStart+=(dX2 - dX1);
      }
 else       if (iv.getType() == IConstants.MAX) {
        dX=dBlockStart + dBlockLength;
        dX+=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksRight) {
          dX2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dX1-=Math.max(bTicksLeft ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max((bTicksLeft ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
          dX2+=dDecorationThickness[1];
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX2 > dBlockStart + dBlockLength) {
          final double dDelta=dX2 - (dBlockStart + dBlockLength);
          dX2=dBlockStart + dBlockLength;
          dX-=dDelta;
          dX1-=dDelta;
        }
      }
      dBlockLength-=dX2 - dX1;
      double dDelta=0;
      if (iv.getType() == IConstants.MIN) {
        dDelta=-insCA.getLeft();
      }
 else       if (iv.getType() == IConstants.MAX) {
        dDelta=insCA.getRight();
      }
      oaxOverlay.setAxisCoordinate(dX + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == LEFT) ? dX1 + dDelta - 1 : dX2 + 1 - dAxisTitleThickness + dDelta);
    }
 else     if (iOrientation == HORIZONTAL) {
      double dY=0, dY1=dY, dY2=dY;
      final boolean bTicksAbove=(iTickStyle & TICK_ABOVE) == TICK_ABOVE;
      final boolean bTicksBelow=(iTickStyle & TICK_BELOW) == TICK_BELOW;
      final double dAppliedXAxisPlotSpacing=dXAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        dAxisTitleThickness=computeBox(ids,iTitleLocation,laAxisTitle,0,0,ChartUtil.computeHeightOfOrthogonalAxisTitle(cwa,getDisplayServer())).getHeight();
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (iv.getType() == IConstants.MAX) {
        dY=dBlockStart;
        dY-=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksAbove) {
          dY1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dY2+=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == BELOW) {
          dY1-=dDecorationThickness[0];
          dY2+=Math.max((bTicksBelow ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY1 < dBlockStart) {
          final double dDelta=(dBlockStart - dY1);
          dY1=dBlockStart;
          dY+=dDelta;
          dY2+=dDelta;
        }
        dBlockStart+=(dY2 - dY1);
      }
 else       if (iv.getType() == IConstants.MIN) {
        dY=dBlockStart + dBlockLength;
        dY+=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksBelow) {
          dY2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == BELOW) {
          dY2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dY1-=Math.max(bTicksAbove ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max((bTicksAbove ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
          dY2+=dDecorationThickness[1];
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY2 > dBlockStart + dBlockLength) {
          final double dDelta=dY2 - (dBlockStart + dBlockLength);
          dY2=dBlockStart + dBlockLength;
          dY-=dDelta;
          dY1-=dDelta;
        }
      }
      double dDelta=0;
      if (iv.getType() == IConstants.MAX) {
        dDelta=-insCA.getTop();
      }
 else       if (iv.getType() == IConstants.MIN) {
        dDelta=insCA.getBottom();
      }
      oaxOverlay.setAxisCoordinate(dY + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == ABOVE) ? dY1 + dDelta - 1 : dY2 + 1 - dAxisTitleThickness + dDelta);
      dBlockLength-=(dY2 - dY1);
    }
  }
  aax.setBlockCordinates(dBlockStart,dBlockLength);
}","/** 
 * @param aax
 * @param dAxisStart
 * @param dAxisEnd
 * @param dBlockStart
 * @param dBlockLength
 * @throws ChartException
 * @throws IllegalArgumentException
 */
private final void updateOverlayScales(AllAxes aax,double dAxisStart,double dAxisEnd,double dBlockStart,double dBlockLength) throws ChartException, IllegalArgumentException {
  final Axis[] axa=((ChartWithAxesImpl)cwa).getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis[] axaOrthogonal=((ChartWithAxesImpl)cwa).getOrthogonalAxes(axPrimaryBase,false);
  IntersectionValue iv;
  AutoScale sc=null;
  OneAxis oaxOverlay=null;
  int iTickStyle, iAxisType, j, iTitleLocation;
  int iOverlayCount=aax.getOverlayCount();
  int iOrientation=aax.getOrientation();
  double dStart, dEnd, dAxisLabelsThickness;
  Label laAxisTitle;
  Scale scModel;
  Series[] sea=cwa.getSeries(IConstants.ORTHOGONAL);
  Map<?,?> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < iOverlayCount; i++) {
    j=iOverlayCount - i - 1;
    oaxOverlay=aax.getOverlay(j);
    iTickStyle=oaxOverlay.getCombinedTickStyle();
    iTitleLocation=oaxOverlay.getTitlePosition();
    laAxisTitle=oaxOverlay.getTitle();
    iAxisType=getAxisType(axaOrthogonal[j]);
    scModel=axaOrthogonal[j].getScale();
    sc=AutoScale.computeScale(ids,oaxOverlay,new DataSetIterator(getMinMax(axaOrthogonal[j],iAxisType),iAxisType),iAxisType,dAxisStart,dAxisEnd,scModel,axaOrthogonal[j].getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
    oaxOverlay.set(sc);
    iv=oaxOverlay.getIntersectionValue();
    dStart=sc.getStart();
    dEnd=sc.getEnd();
    sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
    if (!sc.isStepFixed()) {
      final Object[] oaMinMax=sc.getMinMax();
      while (!sc.checkFit(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition())) {
        if (!sc.zoomOut()) {
          break;
        }
        sc.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
      }
    }
    dAxisLabelsThickness=sc.computeAxisLabelThickness(ids,oaxOverlay.getLabel(),iOrientation);
    double[] dDecorationThickness={0,0};
    for (int t=0; t < sea.length; t++) {
      LegendItemRenderingHints lirh=(LegendItemRenderingHints)seriesRenderingHints.get(sea[t]);
      if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
        IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(oaxOverlay);
        if (iad != null) {
          double[] thickness=iad.computeDecorationThickness(ids,oaxOverlay);
          if (thickness[0] > dDecorationThickness[0]) {
            dDecorationThickness[0]=thickness[0];
          }
          if (thickness[1] > dDecorationThickness[1]) {
            dDecorationThickness[1]=thickness[1];
          }
        }
      }
    }
    double dAxisTitleThickness=0;
    sc.resetShifts();
    if (iOrientation == VERTICAL) {
      double dX=0, dX1=0, dX2=0;
      final boolean bTicksLeft=(iTickStyle & TICK_LEFT) == TICK_LEFT;
      final boolean bTicksRight=(iTickStyle & TICK_RIGHT) == TICK_RIGHT;
      final double dAppliedYAxisPlotSpacing=dYAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        dAxisTitleThickness=computeBox(ids,iTitleLocation,laAxisTitle,0,0,ChartUtil.computeHeightOfOrthogonalAxisTitle(cwa,getDisplayServer())).getWidth();
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (iv.getType() == IConstants.MIN) {
        dX=dBlockStart;
        dX-=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksLeft) {
          dX1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dX2+=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX1-=dDecorationThickness[0];
          dX2+=Math.max((bTicksRight ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX1 < dBlockStart) {
          final double dDelta=(dBlockStart - dX1);
          dX1=dBlockStart;
          dX+=dDelta;
          dX2+=dDelta;
        }
        dBlockStart+=(dX2 - dX1);
      }
 else       if (iv.getType() == IConstants.MAX) {
        dX=dBlockStart + dBlockLength;
        dX+=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksRight) {
          dX2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dX1-=Math.max(bTicksLeft ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max((bTicksLeft ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
          dX2+=dDecorationThickness[1];
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX2 > dBlockStart + dBlockLength) {
          final double dDelta=dX2 - (dBlockStart + dBlockLength);
          dX2=dBlockStart + dBlockLength;
          dX-=dDelta;
          dX1-=dDelta;
        }
      }
      dBlockLength-=dX2 - dX1;
      double dDelta=0;
      if (iv.getType() == IConstants.MIN) {
        dDelta=-insCA.getLeft();
      }
 else       if (iv.getType() == IConstants.MAX) {
        dDelta=insCA.getRight();
      }
      oaxOverlay.setAxisCoordinate(dX + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == LEFT) ? dX1 + dDelta - 1 : dX2 + 1 - dAxisTitleThickness + dDelta);
    }
 else     if (iOrientation == HORIZONTAL) {
      double dY=0, dY1=dY, dY2=dY;
      final boolean bTicksAbove=(iTickStyle & TICK_ABOVE) == TICK_ABOVE;
      final boolean bTicksBelow=(iTickStyle & TICK_BELOW) == TICK_BELOW;
      final double dAppliedXAxisPlotSpacing=dXAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        dAxisTitleThickness=computeBox(ids,iTitleLocation,laAxisTitle,0,0,ChartUtil.computeHeightOfOrthogonalAxisTitle(cwa,getDisplayServer())).getHeight();
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (iv.getType() == IConstants.MAX) {
        dY=dBlockStart;
        dY-=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksAbove) {
          dY1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dY2+=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == BELOW) {
          dY1-=dDecorationThickness[0];
          dY2+=Math.max((bTicksBelow ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY1 < dBlockStart) {
          final double dDelta=(dBlockStart - dY1);
          dY1=dBlockStart;
          dY+=dDelta;
          dY2+=dDelta;
        }
        dBlockStart+=(dY2 - dY1);
      }
 else       if (iv.getType() == IConstants.MIN) {
        dY=dBlockStart + dBlockLength;
        dY+=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksBelow) {
          dY2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == BELOW) {
          dY2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dY1-=Math.max(bTicksAbove ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max((bTicksAbove ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
          dY2+=dDecorationThickness[1];
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY2 > dBlockStart + dBlockLength) {
          final double dDelta=dY2 - (dBlockStart + dBlockLength);
          dY2=dBlockStart + dBlockLength;
          dY-=dDelta;
          dY1-=dDelta;
        }
      }
      double dDelta=0;
      if (iv.getType() == IConstants.MAX) {
        dDelta=-insCA.getTop();
      }
 else       if (iv.getType() == IConstants.MIN) {
        dDelta=insCA.getBottom();
      }
      oaxOverlay.setAxisCoordinate(dY + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == ABOVE) ? dY1 + dDelta - 1 : dY2 + 1 - dAxisTitleThickness + dDelta);
      dBlockLength-=(dY2 - dY1);
    }
  }
  aax.setBlockCordinates(dBlockStart,dBlockLength);
}",0.994476898566118
71464,"/** 
 * The default constructor
 * @param _ids The display server using which the chart is computed
 * @param _cwa An instance of the model (ChartWithAxes)
 * @throws ValidationException
 * @throws UndefinedValueException
 * @throws UnexpectedInputException
 */
public PlotWith2DAxes(IDisplayServer _ids,ChartWithAxes _cwa,RunTimeContext _rtc) throws IllegalArgumentException, ChartException {
  cwa=_cwa;
  ids=_ids;
  rtc=_rtc;
  ssl=new StackedSeriesLookup(_rtc);
  dPointToPixel=ids.getDpiResolution() / 72d;
  buildAxes();
  initAlignZeroHelper();
}","/** 
 * The default constructor
 * @param _ids The display server using which the chart is computed
 * @param _cwa An instance of the model (ChartWithAxes)
 * @throws IllegalArgumentException
 * @throws ChartException
 */
public PlotWith2DAxes(IDisplayServer _ids,ChartWithAxes _cwa,RunTimeContext _rtc) throws IllegalArgumentException, ChartException {
  cwa=_cwa;
  ids=_ids;
  rtc=_rtc;
  ssl=new StackedSeriesLookup(_rtc);
  dPointToPixel=ids.getDpiResolution() / 72d;
  buildAxes();
  initAlignZeroHelper();
}",0.9269662921348316
71465,"/** 
 * Returns a transposed or the original label position as requested depending on the plot's orientation
 * @param iBaseOrOrthogonal
 * @param iOriginalPosition
 * @return
 * @throws UnexpectedInputException
 */
public final int transposeLabelPosition(int iBaseOrOrthogonal,int iOriginalPosition) throws IllegalArgumentException {
  if (!cwa.isTransposed()) {
    return iOriginalPosition;
  }
  if (iBaseOrOrthogonal == IConstants.BASE) {
switch (iOriginalPosition) {
case IConstants.ABOVE:
      return IConstants.RIGHT;
case IConstants.BELOW:
    return IConstants.LEFT;
case IConstants.OUTSIDE:
case IConstants.INSIDE:
  return iOriginalPosition;
}
}
 else if (iBaseOrOrthogonal == IConstants.ORTHOGONAL) {
switch (iOriginalPosition) {
case IConstants.ABOVE:
return IConstants.RIGHT;
case IConstants.BELOW:
return IConstants.LEFT;
case IConstants.LEFT:
return IConstants.BELOW;
case IConstants.RIGHT:
return IConstants.ABOVE;
case IConstants.OUTSIDE:
case IConstants.INSIDE:
return iOriginalPosition;
}
}
throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{new Integer(iBaseOrOrthogonal),new Integer(iOriginalPosition)}));
}","/** 
 * Returns a transposed or the original label position as requested depending on the plot's orientation
 * @param iBaseOrOrthogonal
 * @param iOriginalPosition
 * @return
 * @throws IllegalArgumentException
 */
public final int transposeLabelPosition(int iBaseOrOrthogonal,int iOriginalPosition) throws IllegalArgumentException {
  if (!cwa.isTransposed()) {
    return iOriginalPosition;
  }
  if (iBaseOrOrthogonal == IConstants.BASE) {
switch (iOriginalPosition) {
case IConstants.ABOVE:
      return IConstants.RIGHT;
case IConstants.BELOW:
    return IConstants.LEFT;
case IConstants.OUTSIDE:
case IConstants.INSIDE:
  return iOriginalPosition;
}
}
 else if (iBaseOrOrthogonal == IConstants.ORTHOGONAL) {
switch (iOriginalPosition) {
case IConstants.ABOVE:
return IConstants.RIGHT;
case IConstants.BELOW:
return IConstants.LEFT;
case IConstants.LEFT:
return IConstants.BELOW;
case IConstants.RIGHT:
return IConstants.ABOVE;
case IConstants.OUTSIDE:
case IConstants.INSIDE:
return iOriginalPosition;
}
}
throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{new Integer(iBaseOrOrthogonal),new Integer(iOriginalPosition)}));
}",0.9885527391659852
71466,"/** 
 * Returns a transpose of the original angle
 * @param dOriginalAngle
 * @return
 * @throws UnexpectedInputException
 */
public final double getTransposedAngle(double dOriginalAngle) throws IllegalArgumentException {
  if (dOriginalAngle >= 0 && dOriginalAngle <= 90) {
    return -(90 - dOriginalAngle);
  }
 else   if (dOriginalAngle < 0 && dOriginalAngle >= -90) {
    return (dOriginalAngle + 90);
  }
  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{new Double(dOriginalAngle)}));
}","/** 
 * Returns a transpose of the original angle
 * @param dOriginalAngle
 * @return
 * @throws IllegalArgumentException
 */
public final double getTransposedAngle(double dOriginalAngle) throws IllegalArgumentException {
  if (dOriginalAngle >= 0 && dOriginalAngle <= 90) {
    return -(90 - dOriginalAngle);
  }
 else   if (dOriginalAngle < 0 && dOriginalAngle >= -90) {
    return (dOriginalAngle + 90);
  }
  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{new Double(dOriginalAngle)}));
}",0.9778911564625852
71467,"/** 
 * Returns a transposed or the original tick style as requested depending on the plot's orientation
 * @param iBaseOrOrthogonal
 * @param iOriginalStyle
 * @return
 * @throws UnexpectedInputException
 */
protected final int transposeTickStyle(int iBaseOrOrthogonal,int iOriginalStyle) throws IllegalArgumentException {
  if (!cwa.isTransposed() || iOriginalStyle == IConstants.TICK_ACROSS || iOriginalStyle == IConstants.TICK_NONE) {
    return iOriginalStyle;
  }
  if (iBaseOrOrthogonal == IConstants.BASE) {
switch (iOriginalStyle) {
case IConstants.TICK_BELOW:
      return IConstants.TICK_LEFT;
case IConstants.TICK_ABOVE:
    return IConstants.TICK_RIGHT;
}
}
 else if (iBaseOrOrthogonal == IConstants.ORTHOGONAL) {
switch (iOriginalStyle) {
case IConstants.TICK_LEFT:
  return IConstants.TICK_BELOW;
case IConstants.TICK_RIGHT:
return IConstants.TICK_ABOVE;
}
}
throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{new Integer(iBaseOrOrthogonal),new Integer(iOriginalStyle)}));
}","/** 
 * Returns a transposed or the original tick style as requested depending on the plot's orientation
 * @param iBaseOrOrthogonal
 * @param iOriginalStyle
 * @return
 * @throws IllegalArgumentException
 */
protected final int transposeTickStyle(int iBaseOrOrthogonal,int iOriginalStyle) throws IllegalArgumentException {
  if (!cwa.isTransposed() || iOriginalStyle == IConstants.TICK_ACROSS || iOriginalStyle == IConstants.TICK_NONE) {
    return iOriginalStyle;
  }
  if (iBaseOrOrthogonal == IConstants.BASE) {
switch (iOriginalStyle) {
case IConstants.TICK_BELOW:
      return IConstants.TICK_LEFT;
case IConstants.TICK_ABOVE:
    return IConstants.TICK_RIGHT;
}
}
 else if (iBaseOrOrthogonal == IConstants.ORTHOGONAL) {
switch (iOriginalStyle) {
case IConstants.TICK_LEFT:
  return IConstants.TICK_BELOW;
case IConstants.TICK_RIGHT:
return IConstants.TICK_ABOVE;
}
}
throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{new Integer(iBaseOrOrthogonal),new Integer(iOriginalStyle)}));
}",0.9870490286771508
71468,"/** 
 * This method validates several crucial properties for an axis associated with a Chart
 * @param ax The axis to validate
 * @throws ValidationException
 */
protected void validateAxis(Axis ax) throws ChartException {
  if (!ax.isSetType()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale())));
  }
  if (!ax.getLabel().isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale())));
  }
  if (!ax.getTitle().isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale())));
  }
  if (!ax.isSetLabelPosition() && ax.getLabel().isVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale())));
  }
  if (!ax.isSetTitlePosition() && ax.getTitle().isVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale())));
  }
  LineAttributes liaTicks=ax.getMajorGrid().getTickAttributes();
  if (!ax.getMajorGrid().isSetTickStyle() && liaTicks.isVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale())));
  }
  liaTicks=ax.getMinorGrid().getTickAttributes();
  if (!ax.getMinorGrid().isSetTickStyle() && liaTicks.isVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale())));
  }
  final int iOrientation=ax.getOrientation().getValue();
  if (iOrientation == Orientation.VERTICAL) {
    int iPosition=-1;
    if (ax.getLabel().isVisible()) {
      iPosition=ax.getLabelPosition().getValue();
      if (iPosition != Position.LEFT && iPosition != Position.RIGHT) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getLabelPosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    if (ax.getTitle().isVisible()) {
      iPosition=ax.getTitlePosition().getValue();
      if (iPosition != Position.LEFT && iPosition != Position.RIGHT) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getLabelPosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    int iTickStyle=ax.getMajorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.LEFT && iTickStyle != TickStyle.RIGHT) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMajorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
    iTickStyle=ax.getMinorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.LEFT && iTickStyle != TickStyle.RIGHT) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMinorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
 else   if (iOrientation == Orientation.HORIZONTAL) {
    int iPosition=-1;
    if (ax.getLabel().isVisible()) {
      iPosition=ax.getLabelPosition().getValue();
      if (iPosition != Position.ABOVE && iPosition != Position.BELOW) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getLabelPosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    if (ax.getTitle().isVisible()) {
      iPosition=ax.getTitlePosition().getValue();
      if (iPosition != Position.ABOVE && iPosition != Position.BELOW) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getTitlePosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    int iTickStyle=ax.getMajorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.ABOVE && iTickStyle != TickStyle.BELOW) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMajorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
    iTickStyle=ax.getMinorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.ABOVE && iTickStyle != TickStyle.BELOW) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMinorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
}","/** 
 * This method validates several crucial properties for an axis associated with a Chart
 * @param ax The axis to validate
 * @throws ChartException
 */
protected void validateAxis(Axis ax) throws ChartException {
  if (!ax.isSetType()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale())));
  }
  if (!ax.getLabel().isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale())));
  }
  if (!ax.getTitle().isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale())));
  }
  if (!ax.isSetLabelPosition() && ax.getLabel().isVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale())));
  }
  if (!ax.isSetTitlePosition() && ax.getTitle().isVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale())));
  }
  LineAttributes liaTicks=ax.getMajorGrid().getTickAttributes();
  if (!ax.getMajorGrid().isSetTickStyle() && liaTicks.isVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale())));
  }
  liaTicks=ax.getMinorGrid().getTickAttributes();
  if (!ax.getMinorGrid().isSetTickStyle() && liaTicks.isVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale())));
  }
  final int iOrientation=ax.getOrientation().getValue();
  if (iOrientation == Orientation.VERTICAL) {
    int iPosition=-1;
    if (ax.getLabel().isVisible()) {
      iPosition=ax.getLabelPosition().getValue();
      if (iPosition != Position.LEFT && iPosition != Position.RIGHT) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getLabelPosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    if (ax.getTitle().isVisible()) {
      iPosition=ax.getTitlePosition().getValue();
      if (iPosition != Position.LEFT && iPosition != Position.RIGHT) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getLabelPosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    int iTickStyle=ax.getMajorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.LEFT && iTickStyle != TickStyle.RIGHT) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMajorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
    iTickStyle=ax.getMinorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.LEFT && iTickStyle != TickStyle.RIGHT) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMinorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
 else   if (iOrientation == Orientation.HORIZONTAL) {
    int iPosition=-1;
    if (ax.getLabel().isVisible()) {
      iPosition=ax.getLabelPosition().getValue();
      if (iPosition != Position.ABOVE && iPosition != Position.BELOW) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getLabelPosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    if (ax.getTitle().isVisible()) {
      iPosition=ax.getTitlePosition().getValue();
      if (iPosition != Position.ABOVE && iPosition != Position.BELOW) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getTitlePosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    int iTickStyle=ax.getMajorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.ABOVE && iTickStyle != TickStyle.BELOW) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMajorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
    iTickStyle=ax.getMinorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.ABOVE && iTickStyle != TickStyle.BELOW) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMinorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
}",0.9986438839164632
71469,"/** 
 * @param se
 * @return
 * @throws UnexpectedInputException
 */
public final Label getLabelAttributes(Series se) throws IllegalArgumentException {
  return LabelImpl.copyInstance(se.getLabel());
}","/** 
 * @param se
 * @return
 * @throws IllegalArgumentException
 */
public final Label getLabelAttributes(Series se) throws IllegalArgumentException {
  return LabelImpl.copyInstance(se.getLabel());
}",0.9303482587064676
71470,"/** 
 * @param se
 * @return
 * @throws UndefinedValueException
 * @throws UnexpectedInputException
 */
public final Position getLabelPosition(Series se) throws ChartException, IllegalArgumentException {
  if (!se.isSetLabelPosition()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{se},Messages.getResourceBundle(pwa.getRunTimeContext().getULocale()));
  }
  final int iTransposed=pwa.transposeLabelPosition(IConstants.ORTHOGONAL,Methods.getLabelPosition(se.getLabelPosition()));
  Position p=null;
switch (iTransposed) {
case IConstants.LEFT:
    p=Position.LEFT_LITERAL;
  break;
case IConstants.RIGHT:
p=Position.RIGHT_LITERAL;
break;
case IConstants.ABOVE:
p=Position.ABOVE_LITERAL;
break;
case IConstants.BELOW:
p=Position.BELOW_LITERAL;
break;
case IConstants.OUTSIDE:
p=Position.OUTSIDE_LITERAL;
break;
case IConstants.INSIDE:
p=Position.INSIDE_LITERAL;
break;
}
return p;
}","/** 
 * @param se
 * @return
 * @throws ChartException
 * @throws IllegalArgumentException
 */
public final Position getLabelPosition(Series se) throws ChartException, IllegalArgumentException {
  if (!se.isSetLabelPosition()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{se},Messages.getResourceBundle(pwa.getRunTimeContext().getULocale()));
  }
  final int iTransposed=pwa.transposeLabelPosition(IConstants.ORTHOGONAL,Methods.getLabelPosition(se.getLabelPosition()));
  Position p=null;
switch (iTransposed) {
case IConstants.LEFT:
    p=Position.LEFT_LITERAL;
  break;
case IConstants.RIGHT:
p=Position.RIGHT_LITERAL;
break;
case IConstants.ABOVE:
p=Position.ABOVE_LITERAL;
break;
case IConstants.BELOW:
p=Position.BELOW_LITERAL;
break;
case IConstants.OUTSIDE:
p=Position.OUTSIDE_LITERAL;
break;
case IConstants.INSIDE:
p=Position.INSIDE_LITERAL;
break;
}
return p;
}",0.9539438856537852
71471,"/** 
 * @param se
 * @return
 * @throws UnexpectedInputException
 */
public final Label getLabelAttributes(Series se) throws IllegalArgumentException {
  return LabelImpl.copyInstance(se.getLabel());
}","/** 
 * @param se
 * @return
 * @throws IllegalArgumentException
 */
public final Label getLabelAttributes(Series se) throws IllegalArgumentException {
  return LabelImpl.copyInstance(se.getLabel());
}",0.9303482587064676
71472,"/** 
 * @param se
 * @return
 * @throws UndefinedValueException
 * @throws UnexpectedInputException
 */
public final Position getLabelPosition(Series se) throws ChartException, IllegalArgumentException {
  if (!se.isSetLabelPosition()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{se},Messages.getResourceBundle(pwa.getRunTimeContext().getULocale()));
  }
  final int iTransposed=pwa.transposeLabelPosition(IConstants.ORTHOGONAL,Methods.getLabelPosition(se.getLabelPosition()));
  Position p=null;
switch (iTransposed) {
case IConstants.LEFT:
    p=Position.LEFT_LITERAL;
  break;
case IConstants.RIGHT:
p=Position.RIGHT_LITERAL;
break;
case IConstants.ABOVE:
p=Position.ABOVE_LITERAL;
break;
case IConstants.BELOW:
p=Position.BELOW_LITERAL;
break;
case IConstants.OUTSIDE:
p=Position.OUTSIDE_LITERAL;
break;
case IConstants.INSIDE:
p=Position.INSIDE_LITERAL;
break;
}
return p;
}","/** 
 * @param se
 * @return
 * @throws ChartException
 * @throws IllegalArgumentException
 */
public final Position getLabelPosition(Series se) throws ChartException, IllegalArgumentException {
  if (!se.isSetLabelPosition()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{se},Messages.getResourceBundle(pwa.getRunTimeContext().getULocale()));
  }
  final int iTransposed=pwa.transposeLabelPosition(IConstants.ORTHOGONAL,Methods.getLabelPosition(se.getLabelPosition()));
  Position p=null;
switch (iTransposed) {
case IConstants.LEFT:
    p=Position.LEFT_LITERAL;
  break;
case IConstants.RIGHT:
p=Position.RIGHT_LITERAL;
break;
case IConstants.ABOVE:
p=Position.ABOVE_LITERAL;
break;
case IConstants.BELOW:
p=Position.BELOW_LITERAL;
break;
case IConstants.OUTSIDE:
p=Position.OUTSIDE_LITERAL;
break;
case IConstants.INSIDE:
p=Position.INSIDE_LITERAL;
break;
}
return p;
}",0.9539438856537852
71473,"/** 
 * @param cwa
 * @return
 * @throws UndefinedValueException
 * @throws UnexpectedInputException
 */
static final StackedSeriesLookup create(ChartWithAxes cwa,RunTimeContext rtc) throws ChartException, IllegalArgumentException {
  if (cwa == null) {
    return null;
  }
  final StackedSeriesLookup ssl=new StackedSeriesLookup(rtc);
  final Axis axBase=cwa.getBaseAxes()[0];
  final Axis[] axaOrthogonal=cwa.getOrthogonalAxes(axBase,true);
  EList<?> el;
  List<?> alSeries;
  int iSeriesCount;
  StackGroup sg, sgSingle;
  Series se;
  boolean bStackedSet;
  SeriesDefinition sd;
  int iSharedUnitIndex, iSharedUnitCount, iDataSetCount;
  ArrayList<StackGroup> alSGCopies;
  DataSetIterator dsi=null;
  for (int i=0; i < axaOrthogonal.length; i++) {
    iSharedUnitIndex=0;
    iSharedUnitCount=0;
    sgSingle=null;
    el=axaOrthogonal[i].getSeriesDefinitions();
    alSGCopies=new ArrayList<StackGroup>(4);
    iSharedUnitCount=0;
    for (int j=0; j < el.size(); j++) {
      sd=(SeriesDefinition)el.get(j);
      alSeries=sd.getRunTimeSeries();
      iSeriesCount=alSeries.size();
      if (iSeriesCount > 1) {
        bStackedSet=false;
        sg=null;
        for (int k=0; k < iSeriesCount; k++) {
          se=(Series)alSeries.get(k);
          dsi=new DataSetIterator(se.getDataSet());
          iDataSetCount=dsi.size();
          if (ssl.iCachedUnitCount == 0) {
            ssl.iCachedUnitCount=iDataSetCount;
          }
 else           if (ssl.iCachedUnitCount != iDataSetCount) {
            throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{new Integer(ssl.iCachedUnitCount),new Integer(iDataSetCount)}));
          }
          if (se.canBeStacked()) {
            if (!se.isSetStacked()) {
              throw new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{se},Messages.getResourceBundle(rtc.getULocale()));
            }
            if (se.canShareAxisUnit()) {
              if (se.isStacked()) {
                if (k > 0 && !bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                if (k == 0) {
                  sg=new StackGroup(iSharedUnitIndex++);
                  alSGCopies.add(sg);
                  iSharedUnitCount++;
                }
                bStackedSet=true;
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
 else {
                if (k > 0 && bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                sg=new StackGroup(iSharedUnitIndex++);
                alSGCopies.add(sg);
                iSharedUnitCount++;
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
            }
 else {
              if (se.isStacked()) {
                if (k > 0 && !bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                if (k == 0) {
                  sg=new StackGroup(-1);
                  alSGCopies.add(sg);
                }
                bStackedSet=true;
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
 else {
                if (k > 0 && bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                sg=new StackGroup(-1);
                alSGCopies.add(sg);
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
            }
          }
 else {
            sg=new StackGroup(-1);
            alSGCopies.add(sg);
            ssl.htSeriesToStackGroup.put(se,sg);
            sg.addSeries(se);
          }
        }
      }
 else {
        for (int k=0; k < iSeriesCount; k++) {
          se=(Series)alSeries.get(k);
          dsi=new DataSetIterator(se.getDataSet());
          iDataSetCount=dsi.size();
          if (ssl.iCachedUnitCount == 0) {
            ssl.iCachedUnitCount=iDataSetCount;
          }
 else           if (ssl.iCachedUnitCount != iDataSetCount) {
            throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{new Integer(ssl.iCachedUnitCount),new Integer(iDataSetCount)}));
          }
          if (se.canBeStacked()) {
            if (se.canShareAxisUnit()) {
              if (se.isStacked()) {
                if (sgSingle == null) {
                  sgSingle=new StackGroup(iSharedUnitIndex++);
                  alSGCopies.add(sgSingle);
                  iSharedUnitCount++;
                }
                ssl.htSeriesToStackGroup.put(se,sgSingle);
                sgSingle.addSeries(se);
              }
 else {
                sg=new StackGroup(iSharedUnitIndex++);
                iSharedUnitCount++;
                alSGCopies.add(sg);
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
            }
 else {
              sg=new StackGroup(-1);
              alSGCopies.add(sg);
              ssl.htSeriesToStackGroup.put(se,sg);
              sg.addSeries(se);
            }
          }
 else {
            sg=new StackGroup(-1);
            alSGCopies.add(sg);
            ssl.htSeriesToStackGroup.put(se,sg);
            sg.addSeries(se);
          }
        }
      }
    }
    if (iSharedUnitCount < 1)     iSharedUnitCount=1;
    for (int j=0; j < alSGCopies.size(); j++) {
      sg=alSGCopies.get(j);
{
        sg.updateCount(iSharedUnitCount);
      }
    }
    ssl.htAxisToStackGroups.put(axaOrthogonal[i],alSGCopies);
  }
  return ssl;
}","/** 
 * @param cwa
 * @return
 * @throws ChartException
 * @throws IllegalArgumentException
 */
static final StackedSeriesLookup create(ChartWithAxes cwa,RunTimeContext rtc) throws ChartException, IllegalArgumentException {
  if (cwa == null) {
    return null;
  }
  final StackedSeriesLookup ssl=new StackedSeriesLookup(rtc);
  final Axis axBase=cwa.getBaseAxes()[0];
  final Axis[] axaOrthogonal=cwa.getOrthogonalAxes(axBase,true);
  EList<?> el;
  List<?> alSeries;
  int iSeriesCount;
  StackGroup sg, sgSingle;
  Series se;
  boolean bStackedSet;
  SeriesDefinition sd;
  int iSharedUnitIndex, iSharedUnitCount, iDataSetCount;
  ArrayList<StackGroup> alSGCopies;
  DataSetIterator dsi=null;
  for (int i=0; i < axaOrthogonal.length; i++) {
    iSharedUnitIndex=0;
    iSharedUnitCount=0;
    sgSingle=null;
    el=axaOrthogonal[i].getSeriesDefinitions();
    alSGCopies=new ArrayList<StackGroup>(4);
    iSharedUnitCount=0;
    for (int j=0; j < el.size(); j++) {
      sd=(SeriesDefinition)el.get(j);
      alSeries=sd.getRunTimeSeries();
      iSeriesCount=alSeries.size();
      if (iSeriesCount > 1) {
        bStackedSet=false;
        sg=null;
        for (int k=0; k < iSeriesCount; k++) {
          se=(Series)alSeries.get(k);
          dsi=new DataSetIterator(se.getDataSet());
          iDataSetCount=dsi.size();
          if (ssl.iCachedUnitCount == 0) {
            ssl.iCachedUnitCount=iDataSetCount;
          }
 else           if (ssl.iCachedUnitCount != iDataSetCount) {
            throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{new Integer(ssl.iCachedUnitCount),new Integer(iDataSetCount)}));
          }
          if (se.canBeStacked()) {
            if (!se.isSetStacked()) {
              throw new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{se},Messages.getResourceBundle(rtc.getULocale()));
            }
            if (se.canShareAxisUnit()) {
              if (se.isStacked()) {
                if (k > 0 && !bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                if (k == 0) {
                  sg=new StackGroup(iSharedUnitIndex++);
                  alSGCopies.add(sg);
                  iSharedUnitCount++;
                }
                bStackedSet=true;
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
 else {
                if (k > 0 && bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                sg=new StackGroup(iSharedUnitIndex++);
                alSGCopies.add(sg);
                iSharedUnitCount++;
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
            }
 else {
              if (se.isStacked()) {
                if (k > 0 && !bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                if (k == 0) {
                  sg=new StackGroup(-1);
                  alSGCopies.add(sg);
                }
                bStackedSet=true;
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
 else {
                if (k > 0 && bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                sg=new StackGroup(-1);
                alSGCopies.add(sg);
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
            }
          }
 else {
            sg=new StackGroup(-1);
            alSGCopies.add(sg);
            ssl.htSeriesToStackGroup.put(se,sg);
            sg.addSeries(se);
          }
        }
      }
 else {
        for (int k=0; k < iSeriesCount; k++) {
          se=(Series)alSeries.get(k);
          dsi=new DataSetIterator(se.getDataSet());
          iDataSetCount=dsi.size();
          if (ssl.iCachedUnitCount == 0) {
            ssl.iCachedUnitCount=iDataSetCount;
          }
 else           if (ssl.iCachedUnitCount != iDataSetCount) {
            throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{new Integer(ssl.iCachedUnitCount),new Integer(iDataSetCount)}));
          }
          if (se.canBeStacked()) {
            if (se.canShareAxisUnit()) {
              if (se.isStacked()) {
                if (sgSingle == null) {
                  sgSingle=new StackGroup(iSharedUnitIndex++);
                  alSGCopies.add(sgSingle);
                  iSharedUnitCount++;
                }
                ssl.htSeriesToStackGroup.put(se,sgSingle);
                sgSingle.addSeries(se);
              }
 else {
                sg=new StackGroup(iSharedUnitIndex++);
                iSharedUnitCount++;
                alSGCopies.add(sg);
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
            }
 else {
              sg=new StackGroup(-1);
              alSGCopies.add(sg);
              ssl.htSeriesToStackGroup.put(se,sg);
              sg.addSeries(se);
            }
          }
 else {
            sg=new StackGroup(-1);
            alSGCopies.add(sg);
            ssl.htSeriesToStackGroup.put(se,sg);
            sg.addSeries(se);
          }
        }
      }
    }
    if (iSharedUnitCount < 1)     iSharedUnitCount=1;
    for (int j=0; j < alSGCopies.size(); j++) {
      sg=alSGCopies.get(j);
{
        sg.updateCount(iSharedUnitCount);
      }
    }
    ssl.htAxisToStackGroups.put(axaOrthogonal[i],alSGCopies);
  }
  return ssl;
}",0.9963524357623408
71474,"/** 
 * A notification sent to the device to initialize itself before rendering begins
 * @throws RenderingException
 */
void before() throws ChartException ;","/** 
 * A notification sent to the device to initialize itself before rendering begins
 * @throws ChartException
 */
void before() throws ChartException ;",0.9615384615384616
71475,"/** 
 * A notification sent to the device to cleanup after rendering is done
 * @throws RenderingException
 */
void after() throws ChartException ;","/** 
 * A notification sent to the device to cleanup after rendering is done
 * @throws ChartException
 */
void after() throws ChartException ;",0.9586206896551724
71476,"/** 
 * Attempts to use device specific libraries to load an image for use with the device renderer
 * @param url The URL associated with the image location
 * @return An instance of an image associated with the specified URL
 * @throws ImageLoadingException
 */
Object loadImage(URL url) throws ChartException ;","/** 
 * Attempts to use device specific libraries to load an image for use with the device renderer
 * @param url The URL associated with the image location
 * @return An instance of an image associated with the specified URL
 * @throws ChartException
 */
Object loadImage(URL url) throws ChartException ;",0.9724473257698542
71477,"protected void dropSourceElementHandle(DesignElementHandle handle) throws SemanticException {
  if (handle.getContainer() != null) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(handle));
    }
    if (handle instanceof ExtendedItemHandle && isExtendedCell((ExtendedItemHandle)handle)) {
      ExtendedItemHandle extendedHandle=(ExtendedItemHandle)handle;
      List list=extendedHandle.getContents(DEUtil.getDefaultContentName(handle));
      for (int i=0; i < list.size(); i++) {
        dropSourceElementHandle((DesignElementHandle)list.get(i));
      }
    }
 else     if (handle instanceof CellHandle) {
      dropSourceSlotHandle(((CellHandle)handle).getContent());
    }
 else     if (handle instanceof RowHandle) {
      new DeleteRowCommand(handle).execute();
    }
 else     if (handle instanceof ColumnHandle) {
      new DeleteColumnCommand(handle).execute();
    }
 else {
      handle.dropAndClear();
    }
  }
}","protected void dropSourceElementHandle(DesignElementHandle handle) throws SemanticException {
  if (handle.getContainer() != null) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(handle));
    }
    if (handle instanceof ExtendedItemHandle && isExtendedCell((ExtendedItemHandle)handle)) {
      ExtendedItemHandle extendedHandle=(ExtendedItemHandle)handle;
      List list=extendedHandle.getContents(DEUtil.getDefaultContentName(handle));
      for (int i=0; i < list.size(); i++) {
        dropSourceElementHandle((DesignElementHandle)list.get(i));
      }
    }
 else     if (handle instanceof CellHandle) {
      dropSourceSlotHandle(((CellHandle)handle).getContent());
    }
 else     if (handle instanceof RowHandle) {
      new DeleteRowCommand(handle).execute();
    }
 else     if (handle instanceof ColumnHandle) {
      new DeleteColumnCommand(handle).execute();
    }
 else {
      if (isClear()) {
        handle.dropAndClear();
      }
 else {
        handle.drop();
      }
    }
  }
}",0.965082444228904
71478,"public Command getOrphanChildrenCommand(GroupRequest request){
  List parts=request.getEditParts();
  CompoundCommand result=new CompoundCommand(""String_Node_Str"");
  for (int i=0; i < parts.size(); i++) {
    result.add(new DeleteCommand(((EditPart)parts.get(i)).getModel()));
  }
  return result.unwrap();
}","public Command getOrphanChildrenCommand(GroupRequest request){
  List parts=request.getEditParts();
  CompoundCommand result=new CompoundCommand(""String_Node_Str"");
  for (int i=0; i < parts.size(); i++) {
    DeleteCommand command=new DeleteCommand(((EditPart)parts.get(i)).getModel());
    command.setClear(false);
    result.add(command);
  }
  return result.unwrap();
}",0.873900293255132
71479,"protected void paintChildren(Graphics graphics){
  IFigure child;
  for (int i=0; i < this.getChildren().size(); i++) {
    Rectangle clip=graphics.getClip(Rectangle.SINGLETON);
    child=(IFigure)this.getChildren().get(i);
    if (child.isVisible()) {
      Rectangle bounds=child.getBounds().getCopy();
      int extend=bounds.x + bounds.width - clip.x - clip.width;
      if (extend > 0) {
        clip.width=clip.width + extend;
      }
      if (child.intersects(clip)) {
        graphics.setClip(clip.getCopy());
        child.paint(graphics);
      }
      graphics.restoreState();
    }
  }
}","protected void paintChildren(Graphics graphics){
  IFigure child;
  for (int i=0; i < this.getChildren().size(); i++) {
    Rectangle clip=graphics.getClip(Rectangle.SINGLETON);
    child=(IFigure)this.getChildren().get(i);
    if (child.isVisible()) {
      Rectangle bounds=child.getBounds().getCopy();
      int extend=bounds.x + bounds.width - clip.x - clip.width;
      if (extend > 0) {
        clip.width=clip.width + extend;
      }
      if (child.intersects(clip)) {
        graphics.clipRect(bounds);
        child.paint(graphics);
        graphics.restoreState();
      }
    }
  }
}",0.8635983263598327
71480,"public void layout(){
  boolean isInline=parent instanceof IInlineStackingLayout;
  if (isInline) {
    if (parent instanceof LineLayout) {
      ContainerLayout inlineContainer=new InlineContainerLayout(context,parent,content);
      inlineContainer.initialize();
      addTemplateArea(inlineContainer,true);
      inlineContainer.closeLayout();
    }
 else {
      addTemplateArea(parent,true);
    }
  }
 else {
    assert(parent instanceof BlockStackingLayout);
    if (content != null) {
      IStyle contentStyle=content.getComputedStyle();
      String align=contentStyle.getTextAlign();
      parent.content.getComputedStyle().setTextAlign(align);
    }
    LineLayout line=new LineLayout(context,parent);
    line.initialize();
    addTemplateArea(line,false);
    line.closeLayout();
  }
}","public void layout(){
  boolean isInline=parent instanceof IInlineStackingLayout;
  if (isInline) {
    if (parent instanceof LineLayout) {
      ContainerLayout inlineContainer=new InlineContainerLayout(context,parent,content);
      inlineContainer.initialize();
      addTemplateArea(inlineContainer,true);
      inlineContainer.closeLayout();
    }
 else {
      addTemplateArea(parent,true);
    }
  }
 else {
    assert(parent instanceof BlockStackingLayout);
    boolean inlineElement=PropertyUtil.isInlineElement(content);
    if (!inlineElement) {
      BlockTextLayout tLayout=new BlockTextLayout(context,parent,content);
      tLayout.initialize();
      LineLayout line=new LineLayout(context,tLayout);
      line.initialize();
      addTemplateArea(line,false);
      line.closeLayout();
      tLayout.closeLayout();
    }
  }
}",0.676829268292683
71481,"public void testDataItemWithoutBookmark() throws EngineException, IOException {
  String designFile=""String_Node_Str"";
  String[][] bookmarksWithMetadata={{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  String[][] bookmarksWithoutMetadata={};
  checkAllTask(designFile,bookmarksWithMetadata,bookmarksWithoutMetadata);
}","public void testDataItemWithoutBookmark() throws EngineException, IOException {
  String designFile=""String_Node_Str"";
  String[][] bookmarksWithMetadata={{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  String[][] bookmarksWithoutMetadata={};
  checkAllTask(designFile,bookmarksWithMetadata,bookmarksWithoutMetadata);
}",0.9561815336463224
71482,"/** 
 * Tests active ids output by HtmlReportEmitter. <br> <br> Ids of following items should be output: <li> label <li> table <li> list <li> chart <li> all template items
 * @throws EngineException 
 * @throws IOException 
 */
public void testAllItems() throws EngineException, IOException {
  String designFile=""String_Node_Str"";
  String[][] bookmarksWithMetadata={{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  String[][] bookmarksWithoutMetadata={{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  checkAllTask(designFile,bookmarksWithMetadata,bookmarksWithoutMetadata);
}","/** 
 * Tests active ids output by HtmlReportEmitter. <br> <br> Ids of following items should be output: <li> label <li> table <li> list <li> chart <li> all template items
 * @throws EngineException 
 * @throws IOException 
 */
public void testAllItems() throws EngineException, IOException {
  String designFile=""String_Node_Str"";
  String[][] bookmarksWithMetadata={{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  String[][] bookmarksWithoutMetadata={{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  checkAllTask(designFile,bookmarksWithMetadata,bookmarksWithoutMetadata);
}",0.9675491033304868
71483,"/** 
 * Tests meatadata of data items in table hader/footer or table group header/footer and using the dataset of the table will be output.
 * @throws EngineException 
 * @throws IOException 
 */
public void testDataItem() throws EngineException, IOException {
  String designFile=""String_Node_Str"";
  String[][] bookmarksWithMetadata={{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  String[][] bookmarksWithoutMetadata={{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  checkAllTask(designFile,bookmarksWithMetadata,bookmarksWithoutMetadata);
}","/** 
 * Tests meatadata of data items in table hader/footer or table group header/footer and using the dataset of the table will be output.
 * @throws EngineException 
 * @throws IOException 
 */
public void testDataItem() throws EngineException, IOException {
  String designFile=""String_Node_Str"";
  String[][] bookmarksWithMetadata={{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  String[][] bookmarksWithoutMetadata={{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  checkAllTask(designFile,bookmarksWithMetadata,bookmarksWithoutMetadata);
}",0.965296803652968
71484,"private StructureSource handleGraphicAction(StructureSource src,StructureSource previousSrc,ActionType actionType,boolean cleanState){
  if (previousSrc == null) {
    previousSrc=src;
    iv.registerAction(src,actionType);
    iun.repaintChart();
  }
 else   if (!iv.getSource(src).equals(iv.getSource(previousSrc))) {
    iv.unregisterAction(previousSrc,actionType);
    previousSrc=src;
    iv.registerAction(src,actionType);
    iun.repaintChart();
  }
 else {
    if (cleanState) {
      iv.unregisterAction(previousSrc,actionType);
      previousSrc=null;
      iun.repaintChart();
    }
  }
  return previousSrc;
}","private StructureSource handleGraphicAction(StructureSource src,StructureSource previousSrc,ActionType actionType,boolean cleanState){
  if (previousSrc == null) {
    previousSrc=src;
    iv.registerAction(src,actionType);
    iun.repaintChart();
  }
 else   if (!iv.getSource(src).equals(iv.getSource(previousSrc))) {
    if (actionType == ActionType.HIGHLIGHT_LITERAL) {
      iv.unregisterAction(previousSrc,actionType);
      previousSrc=src;
      iv.registerAction(src,actionType);
    }
 else {
      previousSrc=src;
      if (iv.isRegisteredAction(src,actionType)) {
        iv.unregisterAction(src,actionType);
      }
 else {
        iv.registerAction(src,actionType);
      }
    }
    iun.repaintChart();
  }
 else {
    if (cleanState) {
      iv.unregisterAction(previousSrc,actionType);
      previousSrc=null;
      iun.repaintChart();
    }
  }
  return previousSrc;
}",0.8236074270557029
71485,"private StructureSource handleGraphicAction(StructureSource src,StructureSource previousSrc,ActionType actionType,boolean cleanState){
  if (previousSrc == null) {
    previousSrc=src;
    iv.registerAction(src,actionType);
    iun.repaintChart();
  }
 else   if (!iv.getSource(src).equals(iv.getSource(previousSrc))) {
    iv.unregisterAction(previousSrc,actionType);
    previousSrc=src;
    iv.registerAction(src,actionType);
    iun.repaintChart();
  }
 else {
    if (cleanState) {
      iv.unregisterAction(previousSrc,actionType);
      previousSrc=null;
      iun.repaintChart();
    }
  }
  return previousSrc;
}","private StructureSource handleGraphicAction(StructureSource src,StructureSource previousSrc,ActionType actionType,boolean cleanState){
  if (previousSrc == null) {
    previousSrc=src;
    iv.registerAction(src,actionType);
    iun.repaintChart();
  }
 else   if (!iv.getSource(src).equals(iv.getSource(previousSrc))) {
    if (actionType == ActionType.HIGHLIGHT_LITERAL) {
      iv.unregisterAction(previousSrc,actionType);
      previousSrc=src;
      iv.registerAction(src,actionType);
    }
 else {
      previousSrc=src;
      if (iv.isRegisteredAction(src,actionType)) {
        iv.unregisterAction(src,actionType);
      }
 else {
        iv.registerAction(src,actionType);
      }
    }
    iun.repaintChart();
  }
 else {
    if (cleanState) {
      iv.unregisterAction(previousSrc,actionType);
      previousSrc=null;
      iun.repaintChart();
    }
  }
  return previousSrc;
}",0.8236074270557029
71486,"private void saveLine(LineAttributes line){
  if (!savedLines.containsKey(line))   savedLines.put(line,EcoreUtil.copy(line));
}","private void saveLine(LineAttributes line){
  if (!savedLines.containsKey(line))   savedLines.put(line,(LineAttributes)EcoreUtil.copy(line));
}",0.9407407407407408
71487,"public void modifyEvent(PrimitiveRenderEvent event){
  if (iun == null)   return;
  restoreEvent();
  String source=getSource((StructureSource)event.getSource());
  if (source == null)   return;
  Set typeSet=(Set)targets.get(source);
  if (typeSet != null) {
    for (Iterator iter=typeSet.iterator(); iter.hasNext(); ) {
      ActionType type=(ActionType)iter.next();
switch (type.getValue()) {
case ActionType.HIGHLIGHT:
        highlight(event);
      break;
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
    hideLabel(event);
  break;
case ActionType.TOGGLE_VISIBILITY:
hideElement(event);
break;
}
}
}
}","public void modifyEvent(PrimitiveRenderEvent event){
  if (iun == null)   return;
  restoreEvent();
  String source=getSource((StructureSource)event.getSource());
  if (source == null)   return;
  Set<ActionType> typeSet=targets.get(source);
  if (typeSet != null) {
    for (Iterator<ActionType> iter=typeSet.iterator(); iter.hasNext(); ) {
      ActionType type=iter.next();
switch (type.getValue()) {
case ActionType.HIGHLIGHT:
        highlight(event);
      break;
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
    hideLabel(event);
  break;
case ActionType.TOGGLE_VISIBILITY:
hideElement(event);
break;
}
}
}
}",0.9518367346938776
71488,"private void saveColor(ColorDefinition cd){
  if (!savedColors.containsKey(cd))   savedColors.put(cd,EcoreUtil.copy(cd));
}","private void saveColor(ColorDefinition cd){
  if (!savedColors.containsKey(cd))   savedColors.put(cd,(ColorDefinition)EcoreUtil.copy(cd));
}",0.935361216730038
71489,"public void unregisterAction(StructureSource target,ActionType type){
  if (iun == null)   return;
  Object source=getSource(target);
  Set set=(Set)targets.get(source);
  if (set != null && set.size() > 1) {
    set.remove(type);
  }
 else {
    targets.remove(source);
  }
}","public void unregisterAction(StructureSource target,ActionType type){
  if (iun == null)   return;
  Object source=getSource(target);
  Set<ActionType> set=targets.get(source);
  if (set != null && set.size() > 1) {
    set.remove(type);
  }
 else {
    targets.remove(source);
  }
}",0.9516994633273704
71490,"protected void restoreEvent(){
  if (iun == null)   return;
  for (Iterator iter=savedColors.keySet().iterator(); iter.hasNext(); ) {
    ColorDefinition original=(ColorDefinition)iter.next();
    ColorDefinition copy=(ColorDefinition)savedColors.get(original);
    original.setBlue(copy.getBlue());
    original.setRed(copy.getRed());
    original.setGreen(copy.getGreen());
    original.setTransparency(copy.getTransparency());
  }
  savedColors.clear();
  for (Iterator iter=savedLines.keySet().iterator(); iter.hasNext(); ) {
    LineAttributes original=(LineAttributes)iter.next();
    LineAttributes copy=(LineAttributes)savedLines.get(original);
    original.setVisible(copy.isVisible());
  }
  savedLines.clear();
  for (Iterator iter=savedLabels.keySet().iterator(); iter.hasNext(); ) {
    Label original=(Label)iter.next();
    Label copy=(Label)savedLabels.get(original);
    original.setVisible(copy.isVisible());
    original.getCaption().setFont(copy.getCaption().getFont());
  }
  savedLabels.clear();
}","protected void restoreEvent(){
  if (iun == null)   return;
  for (Iterator<ColorDefinition> iter=savedColors.keySet().iterator(); iter.hasNext(); ) {
    ColorDefinition original=iter.next();
    ColorDefinition copy=savedColors.get(original);
    original.setBlue(copy.getBlue());
    original.setRed(copy.getRed());
    original.setGreen(copy.getGreen());
    original.setTransparency(copy.getTransparency());
  }
  savedColors.clear();
  for (Iterator<LineAttributes> iter=savedLines.keySet().iterator(); iter.hasNext(); ) {
    LineAttributes original=iter.next();
    LineAttributes copy=savedLines.get(original);
    original.setVisible(copy.isVisible());
  }
  savedLines.clear();
  for (Iterator<Label> iter=savedLabels.keySet().iterator(); iter.hasNext(); ) {
    Label original=iter.next();
    Label copy=savedLabels.get(original);
    original.setVisible(copy.isVisible());
    original.getCaption().setFont(copy.getCaption().getFont());
  }
  savedLabels.clear();
}",0.1921921921921922
71491,"private void saveLabel(Label label){
  if (!savedLabels.containsKey(label))   savedLabels.put(label,EcoreUtil.copy(label));
}","private void saveLabel(Label label){
  if (!savedLabels.containsKey(label))   savedLabels.put(label,(Label)EcoreUtil.copy(label));
}",0.9727626459143968
71492,"/** 
 * Register a chart element with an interactive action
 * @param target
 * @param type
 */
public boolean registerAction(StructureSource target,ActionType type){
  if (iun == null)   return false;
  String source=getSource(target);
  Set set=(Set)targets.get(source);
  if (set != null) {
    return set.add(type);
  }
 else {
    set=new HashSet();
    set.add(type);
    targets.put(source,set);
    return true;
  }
}","/** 
 * Register a chart element with an interactive action
 * @param target
 * @param type
 */
public boolean registerAction(StructureSource target,ActionType type){
  if (iun == null)   return false;
  String source=getSource(target);
  Set<ActionType> set=targets.get(source);
  if (set != null) {
    return set.add(type);
  }
 else {
    set=new HashSet<ActionType>();
    set.add(type);
    targets.put(source,set);
    return true;
  }
}",0.95512082853855
71493,"private void placeComponents(){
  GridLayout glDropDown=new GridLayout();
  this.setLayout(glDropDown);
  btnMarkerVisible=new Button(this,SWT.CHECK);
{
    btnMarkerVisible.setText(Messages.getString(""String_Node_Str""));
    btnMarkerVisible.setSelection(getMarker().isVisible());
    btnMarkerVisible.addListener(SWT.Selection,this);
    btnMarkerVisible.addListener(SWT.FocusOut,this);
    btnMarkerVisible.addListener(SWT.KeyDown,this);
    btnMarkerVisible.addListener(SWT.Traverse,this);
    btnMarkerVisible.setFocus();
  }
  cmpType=new Composite(this,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.numColumns=MARKER_ROW_MAX_NUMBER;
    layout.marginHeight=0;
    layout.marginWidth=0;
    layout.horizontalSpacing=0;
    layout.verticalSpacing=0;
    cmpType.setLayout(layout);
    cmpType.setLayoutData(new GridData(GridData.FILL_BOTH));
    cmpType.addListener(SWT.Traverse,this);
    cmpType.addListener(SWT.KeyDown,this);
    cmpType.addListener(SWT.FocusOut,this);
  }
  int modifiedSize=(typeDisplayNameSet.length / MARKER_ROW_MAX_NUMBER + 1) * MARKER_ROW_MAX_NUMBER;
  for (int i=0; i < modifiedSize; i++) {
    Canvas cnvType=new Canvas(cmpType,SWT.NONE);
    GridData gd=new GridData();
    gd.heightHint=MARKER_BLOCK_HEIGHT;
    gd.widthHint=MARKER_BLOCK_WIDTH;
    cnvType.setLayoutData(gd);
    cnvType.setData(new Integer(i));
    cnvType.addPaintListener(this);
    if (i < typeDisplayNameSet.length) {
      cnvType.setToolTipText(typeDisplayNameSet[i]);
      cnvType.addListener(SWT.MouseDown,this);
    }
  }
  grpSize=new Group(this,SWT.NONE);
{
    grpSize.setLayout(new GridLayout());
    grpSize.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSize.setText(Messages.getString(""String_Node_Str""));
  }
  iscMarkerSize=new Spinner(grpSize,SWT.BORDER);
{
    iscMarkerSize.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    iscMarkerSize.setMinimum(0);
    iscMarkerSize.setMaximum(100);
    iscMarkerSize.addListener(SWT.Selection,this);
    iscMarkerSize.addListener(SWT.FocusOut,this);
    iscMarkerSize.addListener(SWT.Traverse,this);
    iscMarkerSize.setSelection(getMarker().getSize());
  }
  setEnabledState(btnMarkerVisible.getSelection());
}","private void placeComponents(){
  GridLayout glDropDown=new GridLayout();
  this.setLayout(glDropDown);
  btnMarkerVisible=new Button(this,SWT.CHECK);
{
    btnMarkerVisible.setText(Messages.getString(""String_Node_Str""));
    btnMarkerVisible.setSelection(getMarker().isVisible());
    btnMarkerVisible.addListener(SWT.Selection,this);
    btnMarkerVisible.addListener(SWT.FocusOut,this);
    btnMarkerVisible.addListener(SWT.KeyDown,this);
    btnMarkerVisible.addListener(SWT.Traverse,this);
    btnMarkerVisible.setFocus();
  }
  cmpType=new Composite(this,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.numColumns=MARKER_ROW_MAX_NUMBER;
    layout.marginHeight=0;
    layout.marginWidth=0;
    layout.horizontalSpacing=0;
    layout.verticalSpacing=0;
    cmpType.setLayout(layout);
    cmpType.setLayoutData(new GridData(GridData.FILL_BOTH));
    cmpType.addListener(SWT.Traverse,this);
    cmpType.addListener(SWT.KeyDown,this);
    cmpType.addListener(SWT.FocusOut,this);
  }
  int modifiedSize=(typeDisplayNameSet.length / MARKER_ROW_MAX_NUMBER + 1) * MARKER_ROW_MAX_NUMBER;
  for (int i=0; i < modifiedSize; i++) {
    Canvas cnvType=new Canvas(cmpType,SWT.DOUBLE_BUFFERED);
    GridData gd=new GridData();
    gd.heightHint=MARKER_BLOCK_HEIGHT;
    gd.widthHint=MARKER_BLOCK_WIDTH;
    cnvType.setLayoutData(gd);
    cnvType.setData(new Integer(i));
    cnvType.addPaintListener(this);
    if (i < typeDisplayNameSet.length) {
      cnvType.setToolTipText(typeDisplayNameSet[i]);
      cnvType.addListener(SWT.MouseDown,this);
    }
  }
  grpSize=new Group(this,SWT.NONE);
{
    grpSize.setLayout(new GridLayout());
    grpSize.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSize.setText(Messages.getString(""String_Node_Str""));
  }
  iscMarkerSize=new Spinner(grpSize,SWT.BORDER);
{
    iscMarkerSize.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    iscMarkerSize.setMinimum(0);
    iscMarkerSize.setMaximum(100);
    iscMarkerSize.addListener(SWT.Selection,this);
    iscMarkerSize.addListener(SWT.FocusOut,this);
    iscMarkerSize.addListener(SWT.Traverse,this);
    iscMarkerSize.setSelection(getMarker().getSize());
  }
  setEnabledState(btnMarkerVisible.getSelection());
}",0.996626939509782
71494,"protected void updateRtLFlag() throws EngineException {
  if (renderOptions == null)   return;
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null)   return;
  ReportDesignHandle handle=(ReportDesignHandle)runnable.getDesignHandle();
  if (handle != null) {
    Object bidiFlag=renderOptions.getOption(IRenderOption.RTL_FLAG);
    if (Boolean.TRUE.equals(bidiFlag)) {
      try {
        handle.setBidiOrientation(DesignChoiceConstants.BIDI_DIRECTION_RTL);
      }
 catch (      SemanticException e) {
        log.log(Level.WARNING,""String_Node_Str"",e);
        throw new EngineException(""String_Node_Str"");
      }
    }
  }
}","protected void updateRtLFlag() throws EngineException {
  if (renderOptions == null)   return;
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null)   return;
  ReportDesignHandle handle=(ReportDesignHandle)runnable.getDesignHandle();
  if (handle != null) {
    Object bidiFlag=renderOptions.getOption(IRenderOption.RTL_FLAG);
    if (Boolean.TRUE.equals(bidiFlag)) {
      try {
        handle.setBidiOrientation(DesignChoiceConstants.BIDI_DIRECTION_RTL);
      }
 catch (      SemanticException e) {
        log.log(Level.WARNING,""String_Node_Str"",e);
        throw new EngineException(""String_Node_Str"");
      }
    }
 else     if (handle.isDirectionRTL()) {
      renderOptions.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
      IRenderOption renderOptions2=executionContext.getRenderOption();
      if (renderOptions2 != null) {
        renderOptions2.setOption(IRenderOption.RTL_FLAG,new Boolean(true));
        executionContext.setRenderOption(renderOptions2);
      }
    }
  }
}",0.7807486631016043
71495,"protected void handleGroupAction(){
  SeriesDefinition sdBackup=(SeriesDefinition)EcoreUtil.copy(seriesdefinition);
  GroupSortingDialog groupDialog=createGroupSortingDialog(sdBackup);
  if (groupDialog.open() == Window.OK) {
    if (!sdBackup.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
    }
 else {
      seriesdefinition.setSorting(sdBackup.getSorting());
    }
    ChartAdapter.beginIgnoreNotifications();
    List sds=ChartUIUtil.getAllOrthogonalSeriesDefinitions(context.getModel());
    for (int i=0; i < sds.size(); i++) {
      if (i != 0) {
        SeriesDefinition sdf=(SeriesDefinition)sds.get(i);
        if (!sdBackup.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
          sdf.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
        }
 else {
          sdf.setSorting(sdBackup.getSorting());
        }
      }
    }
    ChartAdapter.endIgnoreNotifications();
    seriesdefinition.setSortKey(sdBackup.getSortKey());
    seriesdefinition.getSortKey().eAdapters().addAll(seriesdefinition.eAdapters());
    if (seriesdefinition.getQuery() != null) {
      if (sdBackup.getQuery().getGrouping() == null) {
        return;
      }
      seriesdefinition.getQuery().setGrouping(sdBackup.getQuery().getGrouping());
      seriesdefinition.getQuery().getGrouping().eAdapters().addAll(seriesdefinition.getQuery().eAdapters());
      ChartUIUtil.checkGroupType(context,context.getModel());
    }
  }
}","protected void handleGroupAction(){
  SeriesDefinition sdBackup=(SeriesDefinition)EcoreUtil.copy(seriesdefinition);
  GroupSortingDialog groupDialog=createGroupSortingDialog(sdBackup);
  if (groupDialog.open() == Window.OK) {
    if (!sdBackup.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
    }
 else {
      seriesdefinition.setSorting(sdBackup.getSorting());
    }
    ChartAdapter.beginIgnoreNotifications();
    List<?> sds=ChartUIUtil.getAllOrthogonalSeriesDefinitions(context.getModel());
    for (int i=0; i < sds.size(); i++) {
      if (i != 0) {
        SeriesDefinition sdf=(SeriesDefinition)sds.get(i);
        if (!sdBackup.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
          sdf.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
        }
 else {
          sdf.setSorting(sdBackup.getSorting());
        }
      }
    }
    ChartAdapter.endIgnoreNotifications();
    seriesdefinition.setSortKey(sdBackup.getSortKey());
    seriesdefinition.getSortKey().eAdapters().addAll(seriesdefinition.eAdapters());
    if (seriesdefinition.getQuery() != null) {
      if (sdBackup.getQuery().getGrouping() == null) {
        return;
      }
      seriesdefinition.getQuery().setGrouping(sdBackup.getQuery().getGrouping());
      seriesdefinition.getQuery().getGrouping().eAdapters().addAll(seriesdefinition.getQuery().eAdapters());
      ChartAdapter.beginIgnoreNotifications();
      for (int i=0; i < sds.size(); i++) {
        if (i != 0) {
          SeriesDefinition sdf=(SeriesDefinition)sds.get(i);
          sdf.getQuery().setGrouping((SeriesGrouping)EcoreUtil.copy(seriesdefinition.getQuery().getGrouping()));
          sdf.getQuery().getGrouping().eAdapters().addAll(sdf.getQuery().eAdapters());
        }
      }
      ChartAdapter.endIgnoreNotifications();
      ChartUIUtil.checkGroupType(context,context.getModel());
    }
  }
}",0.8751066856330014
71496,"/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9804416403785488
71497,"protected void drawText(String text,float textX,float textY,float baseline,float width,float height,TextStyle textStyle){
  writer.drawText(text,textX,textY,width + 1f,height,textStyle.getFontInfo(),textStyle.getColor());
}","protected void drawText(String text,float textX,float textY,float baseline,float width,float height,TextStyle textStyle){
  writer.drawText(text,textX,textY,width + 1f,height,textStyle.getFontInfo(),textStyle.getColor(),textStyle.isRtl());
}",0.961206896551724
71498,"public void createDummyTable(){
  setColumns(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new int[]{200,200,200});
  layout(true);
}","public void createDummyTable(){
  setColumns(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new int[]{200,200,200});
  layout(true);
  WizardBase.removeException();
}",0.9064327485380116
71499,"public void run(){
  transStar(NAME);
  try {
    LevelViewDialog dialog=new LevelViewDialog(UIUtil.getDefaultShell());
    List showLevels=new ArrayList();
    List nullLevelHandle=new ArrayList();
    int viewCount=viewHandle.getLevelCount();
    for (int i=0; i < viewCount; i++) {
      LevelViewHandle levelHandle=viewHandle.getLevel(i);
      if (levelHandle.getCubeLevel() == null) {
        nullLevelHandle.add(new Integer(levelHandle.getIndex()));
      }
 else {
        showLevels.add(levelHandle.getCubeLevel());
      }
    }
    dialog.setInput(viewHandle.getCubeDimension(),showLevels);
    if (dialog.open() == Window.OK) {
      CrosstabReportItemHandle reportHandle=viewHandle.getCrosstab();
      List result=(List)dialog.getResult();
      boolean isLevelRemoved=processor(showLevels,result,nullLevelHandle);
      if (isLevelRemoved) {
        CrosstabAdaptUtil.processInvaildBindings(reportHandle);
      }
      AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper(reportHandle);
      providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}","public void run(){
  transStar(NAME);
  try {
    LevelViewDialog dialog=new LevelViewDialog(UIUtil.getDefaultShell());
    List showLevels=new ArrayList();
    List nullLevelHandle=new ArrayList();
    int viewCount=viewHandle.getLevelCount();
    for (int i=0; i < viewCount; i++) {
      LevelViewHandle levelHandle=viewHandle.getLevel(i);
      if (levelHandle.getCubeLevel() == null) {
        nullLevelHandle.add(new Integer(levelHandle.getIndex()));
      }
 else {
        showLevels.add(levelHandle.getCubeLevel());
      }
    }
    dialog.setInput(viewHandle.getCubeDimension(),showLevels);
    if (dialog.open() == Window.OK) {
      CrosstabReportItemHandle reportHandle=viewHandle.getCrosstab();
      List result=(List)dialog.getResult();
      boolean isLevelRemoved=processor(showLevels,result,nullLevelHandle,false);
      if (isLevelRemoved) {
        boolean bool=CrosstabAdaptUtil.needRemoveInvaildBindings(reportHandle);
        processor(showLevels,result,nullLevelHandle,true);
        if (bool) {
          CrosstabAdaptUtil.removeInvalidBindings(reportHandle);
        }
      }
      AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper(reportHandle);
      providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}",0.9251497005988024
71500,"private boolean processor(List ori,List newList,List nullLevelHandle) throws SemanticException {
  boolean isLevelRemoved=false;
  for (int i=nullLevelHandle.size() - 1; i >= 0; i--) {
    int index=((Integer)nullLevelHandle.get(i)).intValue();
    viewHandle.removeLevel(index);
    isLevelRemoved=true;
  }
  for (int i=0; i < ori.size(); i++) {
    LevelHandle tempHandle=(LevelHandle)ori.get(i);
    if (!newList.contains(tempHandle)) {
      viewHandle.removeLevel(tempHandle.getQualifiedName());
      isLevelRemoved=true;
    }
  }
  Collections.sort(newList,new LevelComparator());
  for (int i=0; i < newList.size(); i++) {
    LevelHandle tempHandle=(LevelHandle)newList.get(i);
    if (viewHandle.getLevel(tempHandle.getQualifiedName()) == null) {
      insertLevelHandle(tempHandle,i);
    }
  }
  return isLevelRemoved;
}","private boolean processor(List ori,List newList,List nullLevelHandle,boolean doChange) throws SemanticException {
  boolean isLevelRemoved=false;
  for (int i=nullLevelHandle.size() - 1; i >= 0; i--) {
    int index=((Integer)nullLevelHandle.get(i)).intValue();
    if (doChange) {
      viewHandle.removeLevel(index);
    }
    isLevelRemoved=true;
  }
  for (int i=0; i < ori.size(); i++) {
    LevelHandle tempHandle=(LevelHandle)ori.get(i);
    if (!newList.contains(tempHandle)) {
      if (doChange) {
        viewHandle.removeLevel(tempHandle.getQualifiedName());
      }
      isLevelRemoved=true;
    }
  }
  Collections.sort(newList,new LevelComparator());
  if (doChange) {
    for (int i=0; i < newList.size(); i++) {
      LevelHandle tempHandle=(LevelHandle)newList.get(i);
      if (viewHandle.getLevel(tempHandle.getQualifiedName()) == null) {
        insertLevelHandle(tempHandle,i);
      }
    }
  }
  return isLevelRemoved;
}",0.9376053962900506
71501,"public void run(){
  transStar(ACTION_MSG_MERGE);
  try {
    CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
    ShowSummaryFieldDialog dialog=new ShowSummaryFieldDialog(UIUtil.getDefaultShell(),reportHandle);
    List list=getDimensionHandles();
    List<MeasureInfo> input=new ArrayList<MeasureInfo>();
    for (int i=0; i < list.size(); i++) {
      MeasureHandle handle=(MeasureHandle)list.get(i);
      MeasureInfo info=new MeasureInfo();
      info.setMeasureName(handle.getQualifiedName());
      info.setMeasureDisplayName(handle.getName());
      info.setExpectedView(""String_Node_Str"");
      input.add(info);
    }
    int count=reportHandle.getMeasureCount();
    for (int i=0; i < count; i++) {
      MeasureViewHandle viewHandle=reportHandle.getMeasure(i);
      if (viewHandle == null) {
        continue;
      }
      if (viewHandle instanceof ComputedMeasureViewHandle) {
        MeasureInfo info=new MeasureInfo();
        info.setMeasureName(viewHandle.getCubeMeasureName());
        info.setMeasureDisplayName(viewHandle.getCubeMeasureName());
        info.setExpectedView(""String_Node_Str"");
        info.setShow(true);
        input.add(info);
      }
 else {
        checkStatus(viewHandle,input);
      }
    }
    dialog.setInput(copyInfo(input));
    if (dialog.open() == Window.OK) {
      List result=(List)dialog.getResult();
      boolean isRemove=processor(input,result);
      if (isRemove) {
        CrosstabAdaptUtil.processInvaildBindings(reportHandle);
      }
      providerWrapper.switchViews();
      if (needUpdateView) {
        providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
      }
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}","public void run(){
  transStar(ACTION_MSG_MERGE);
  try {
    CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
    ShowSummaryFieldDialog dialog=new ShowSummaryFieldDialog(UIUtil.getDefaultShell(),reportHandle);
    List list=getDimensionHandles();
    List<MeasureInfo> input=new ArrayList<MeasureInfo>();
    for (int i=0; i < list.size(); i++) {
      MeasureHandle handle=(MeasureHandle)list.get(i);
      MeasureInfo info=new MeasureInfo();
      info.setMeasureName(handle.getQualifiedName());
      info.setMeasureDisplayName(handle.getName());
      info.setExpectedView(""String_Node_Str"");
      input.add(info);
    }
    int count=reportHandle.getMeasureCount();
    for (int i=0; i < count; i++) {
      MeasureViewHandle viewHandle=reportHandle.getMeasure(i);
      if (viewHandle == null) {
        continue;
      }
      if (viewHandle instanceof ComputedMeasureViewHandle) {
        MeasureInfo info=new MeasureInfo();
        info.setMeasureName(viewHandle.getCubeMeasureName());
        info.setMeasureDisplayName(viewHandle.getCubeMeasureName());
        info.setExpectedView(""String_Node_Str"");
        info.setShow(true);
        input.add(info);
      }
 else {
        checkStatus(viewHandle,input);
      }
    }
    dialog.setInput(copyInfo(input));
    if (dialog.open() == Window.OK) {
      List result=(List)dialog.getResult();
      boolean isRemove=processor(input,result,false);
      if (isRemove) {
        boolean bool=CrosstabAdaptUtil.needRemoveInvaildBindings(reportHandle);
        processor(input,result,true);
        if (bool) {
          CrosstabAdaptUtil.removeInvalidBindings(reportHandle);
        }
      }
      providerWrapper.switchViews();
      if (needUpdateView) {
        providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
      }
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}",0.9579476329013488
71502,"private boolean processor(List list,List result) throws SemanticException {
  initializeProviders();
  boolean isRemove=false;
  List temp=new ArrayList(result);
  for (int i=0; i < result.size(); i++) {
    MeasureInfo resultOne=(MeasureInfo)result.get(i);
    MeasureInfo originalOne=getOriMeasureInfo(resultOne,list);
    if (resultOne.isShow() == originalOne.isShow()) {
      MeasureInfo info=(MeasureInfo)result.get(i);
      if (info.isShow() == true && info.getExpectedView() != null && info.getExpectedView().length() != 0) {
        SwitchCellInfo swtichCellInfo=new SwitchCellInfo(measureViewHandle.getCrosstab(),SwitchCellInfo.MEASURE);
        swtichCellInfo.setMeasureInfo(info);
        swtichCellInfo.setIsNew(false);
        providerWrapper.addSwitchInfo(swtichCellInfo);
        needUpdateView=true;
      }
      temp.remove(resultOne);
    }
  }
  CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
  for (int i=0; i < temp.size(); i++) {
    MeasureInfo info=(MeasureInfo)temp.get(i);
    if (info.isShow()) {
      MeasureHandle measure=reportHandle.getCube().getMeasure(info.getMeasureName());
      MeasureViewHandle measureViewHandle=reportHandle.insertMeasure(measure,reportHandle.getMeasureCount());
      measureViewHandle.addHeader();
      LabelHandle labelHandle=DesignElementFactory.getInstance().newLabel(null);
      labelHandle.setText(info.getMeasureDisplayName());
      needUpdateView=true;
      measureViewHandle.getHeader().addContent(labelHandle);
      if (info.getExpectedView() != null && info.getExpectedView().length() != 0) {
        SwitchCellInfo swtichCellInfo=new SwitchCellInfo(measureViewHandle.getCrosstab(),SwitchCellInfo.MEASURE);
        info.setMeasureName(measureViewHandle.getCubeMeasure().getQualifiedName());
        swtichCellInfo.setMeasureInfo(info);
        swtichCellInfo.setIsNew(true);
        providerWrapper.addSwitchInfo(swtichCellInfo);
      }
    }
 else {
      reportHandle.removeMeasure(info.getMeasureName());
      isRemove=true;
      needUpdateView=true;
    }
  }
  return isRemove;
}","private boolean processor(List list,List result,boolean doChange) throws SemanticException {
  initializeProviders();
  boolean isRemove=false;
  List temp=new ArrayList(result);
  for (int i=0; i < result.size(); i++) {
    MeasureInfo resultOne=(MeasureInfo)result.get(i);
    MeasureInfo originalOne=getOriMeasureInfo(resultOne,list);
    if (resultOne.isShow() == originalOne.isShow()) {
      MeasureInfo info=(MeasureInfo)result.get(i);
      if (info.isShow() == true && info.getExpectedView() != null && info.getExpectedView().length() != 0) {
        SwitchCellInfo swtichCellInfo=new SwitchCellInfo(measureViewHandle.getCrosstab(),SwitchCellInfo.MEASURE);
        swtichCellInfo.setMeasureInfo(info);
        swtichCellInfo.setIsNew(false);
        providerWrapper.addSwitchInfo(swtichCellInfo);
        needUpdateView=true;
      }
      temp.remove(resultOne);
    }
  }
  CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
  for (int i=0; i < temp.size(); i++) {
    MeasureInfo info=(MeasureInfo)temp.get(i);
    if (info.isShow()) {
      MeasureHandle measure=reportHandle.getCube().getMeasure(info.getMeasureName());
      MeasureViewHandle measureViewHandle=reportHandle.insertMeasure(measure,reportHandle.getMeasureCount());
      measureViewHandle.addHeader();
      LabelHandle labelHandle=DesignElementFactory.getInstance().newLabel(null);
      labelHandle.setText(info.getMeasureDisplayName());
      needUpdateView=true;
      measureViewHandle.getHeader().addContent(labelHandle);
      if (info.getExpectedView() != null && info.getExpectedView().length() != 0) {
        SwitchCellInfo swtichCellInfo=new SwitchCellInfo(measureViewHandle.getCrosstab(),SwitchCellInfo.MEASURE);
        info.setMeasureName(measureViewHandle.getCubeMeasure().getQualifiedName());
        swtichCellInfo.setMeasureInfo(info);
        swtichCellInfo.setIsNew(true);
        providerWrapper.addSwitchInfo(swtichCellInfo);
      }
    }
 else {
      if (doChange) {
        reportHandle.removeMeasure(info.getMeasureName());
      }
      isRemove=true;
      needUpdateView=true;
    }
  }
  return isRemove;
}",0.9884023668639054
71503,"public void run(){
  if (dimensionHandle == null) {
    return;
  }
  transStar(NAME);
  try {
    CrosstabReportItemHandle handle=dimensionHandle.getCrosstab();
    dimensionHandle.getCrosstab().removeDimension(dimensionHandle.getAxisType(),dimensionHandle.getIndex());
    CrosstabAdaptUtil.processInvaildBindings(handle);
    AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper((ExtendedItemHandle)handle.getModelHandle());
    providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}","public void run(){
  if (dimensionHandle == null) {
    return;
  }
  transStar(NAME);
  try {
    CrosstabReportItemHandle handle=dimensionHandle.getCrosstab();
    boolean bool=CrosstabAdaptUtil.needRemoveInvaildBindings(handle);
    dimensionHandle.getCrosstab().removeDimension(dimensionHandle.getAxisType(),dimensionHandle.getIndex());
    if (bool) {
      CrosstabAdaptUtil.removeInvalidBindings(handle);
    }
    AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper((ExtendedItemHandle)handle.getModelHandle());
    providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}",0.921995783555868
71504,"public void run(){
  CrosstabReportItemHandle reportItem=getCrosstabReportItemHandle(getHandle());
  if (reportItem != null) {
    transStar(NAME);
    try {
      reportItem.removeMeasure(measureViewHandle.getIndex());
      CrosstabAdaptUtil.processInvaildBindings(reportItem);
      AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper((ExtendedItemHandle)reportItem.getModelHandle());
      providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
    }
 catch (    SemanticException e) {
      rollBack();
      ExceptionHandler.handle(e);
      return;
    }
    transEnd();
  }
}","public void run(){
  CrosstabReportItemHandle reportItem=getCrosstabReportItemHandle(getHandle());
  if (reportItem != null) {
    transStar(NAME);
    try {
      boolean bool=CrosstabAdaptUtil.needRemoveInvaildBindings(reportItem);
      reportItem.removeMeasure(measureViewHandle.getIndex());
      if (bool) {
        CrosstabAdaptUtil.removeInvalidBindings(reportItem);
      }
      AggregationCellProviderWrapper providerWrapper=new AggregationCellProviderWrapper((ExtendedItemHandle)reportItem.getModelHandle());
      providerWrapper.updateAllAggregationCells(AggregationCellViewAdapter.SWITCH_VIEW_TYPE);
    }
 catch (    SemanticException e) {
      rollBack();
      ExceptionHandler.handle(e);
      return;
    }
    transEnd();
  }
}",0.8974910394265233
71505,"public void execute(){
  transStart(NAME);
  CrosstabReportItemHandle reportHandle=childViewHandle.getCrosstab();
  try {
    reportHandle.pivotDimension(childViewHandle.getAxisType(),childViewHandle.getIndex(),getType(),findPosition());
    CrosstabAdaptUtil.processInvaildBindings(reportHandle);
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
  }
  transEnd();
}","public void execute(){
  transStart(NAME);
  CrosstabReportItemHandle reportHandle=childViewHandle.getCrosstab();
  try {
    boolean bool=CrosstabAdaptUtil.needRemoveInvaildBindings(reportHandle);
    reportHandle.pivotDimension(childViewHandle.getAxisType(),childViewHandle.getIndex(),getType(),findPosition());
    if (bool) {
      CrosstabAdaptUtil.removeInvalidBindings(reportHandle);
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
  }
  transEnd();
}",0.8704318936877077
71506,"/** 
 * Convert AWT shape to image map coordinates.
 * @param shape
 * @return
 */
private String shape2polyCoords(Shape shape){
  if (shape == null) {
    return null;
  }
  ArrayList al=new ArrayList();
  PathIterator pitr=shape.getPathIterator(null);
  double[] data=new double[6];
  while (!pitr.isDone()) {
    int type=pitr.currentSegment(data);
switch (type) {
case PathIterator.SEG_MOVETO:
      al.add(new Double(data[0]));
    al.add(new Double(data[1]));
  break;
case PathIterator.SEG_LINETO:
al.add(new Double(data[0]));
al.add(new Double(data[1]));
break;
case PathIterator.SEG_QUADTO:
al.add(new Double(data[0]));
al.add(new Double(data[1]));
al.add(new Double(data[2]));
al.add(new Double(data[3]));
break;
case PathIterator.SEG_CUBICTO:
al.add(new Double(data[0]));
al.add(new Double(data[1]));
al.add(new Double(data[2]));
al.add(new Double(data[3]));
al.add(new Double(data[4]));
al.add(new Double(data[5]));
break;
case PathIterator.SEG_CLOSE:
break;
}
pitr.next();
}
if (al.size() == 0) {
return null;
}
StringBuffer sb=new StringBuffer();
for (int i=0; i < al.size(); i++) {
Double db=(Double)al.get(i);
if (i > 0) {
sb.append(""String_Node_Str"");
}
sb.append((int)db.doubleValue());
}
return sb.toString();
}","/** 
 * Convert AWT shape to image map coordinates.
 * @param shape
 * @return
 */
private String shape2polyCoords(Shape shape){
  if (shape == null) {
    return null;
  }
  ArrayList al=new ArrayList();
  FlatteningPathIterator pitr=new FlatteningPathIterator(shape.getPathIterator(null),1);
  double[] data=new double[6];
  while (!pitr.isDone()) {
    int type=pitr.currentSegment(data);
switch (type) {
case PathIterator.SEG_MOVETO:
      al.add(new Double(data[0]));
    al.add(new Double(data[1]));
  break;
case PathIterator.SEG_LINETO:
al.add(new Double(data[0]));
al.add(new Double(data[1]));
break;
case PathIterator.SEG_QUADTO:
al.add(new Double(data[0]));
al.add(new Double(data[1]));
al.add(new Double(data[2]));
al.add(new Double(data[3]));
break;
case PathIterator.SEG_CUBICTO:
al.add(new Double(data[0]));
al.add(new Double(data[1]));
al.add(new Double(data[2]));
al.add(new Double(data[3]));
al.add(new Double(data[4]));
al.add(new Double(data[5]));
break;
case PathIterator.SEG_CLOSE:
break;
}
pitr.next();
}
if (al.size() == 0) {
return null;
}
StringBuffer sb=new StringBuffer();
for (int i=0; i < al.size(); i++) {
Double db=(Double)al.get(i);
if (i > 0) {
sb.append(""String_Node_Str"");
}
sb.append((int)db.doubleValue());
}
return sb.toString();
}",0.9744
71507,"protected void repeatHeader(){
  if (bandStatus == IBandContent.BAND_HEADER) {
    return;
  }
  ITableBandContent header=(ITableBandContent)tableContent.getHeader();
  if (!tableContent.isHeaderRepeat() || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  TableRegionLayout rLayout=getTableRegionLayout();
  rLayout.initialize(header);
  rLayout.layout();
  TableArea tableRegion=(TableArea)header.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getAllocatedHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    TableContext tableContext=(TableContext)contextList.getLast();
    while (iter.hasNext()) {
      ContainerArea area=(ContainerArea)iter.next();
      Iterator rowIter=area.getChildren();
      while (rowIter.hasNext()) {
        AbstractArea row=(AbstractArea)rowIter.next();
        if (row instanceof RowArea) {
          tableContext.layout.addRow((RowArea)row);
        }
      }
    }
    iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      addArea(area);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void repeatHeader(){
  if (bandStatus == IBandContent.BAND_HEADER) {
    return;
  }
  ITableBandContent header=context.getWrappedTableHeader(content.getInstanceID());
  if (header == null || !tableContent.isHeaderRepeat()) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  TableRegionLayout rLayout=getTableRegionLayout();
  rLayout.initialize(header);
  rLayout.layout();
  TableArea tableRegion=(TableArea)header.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getAllocatedHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    TableContext tableContext=(TableContext)contextList.getLast();
    while (iter.hasNext()) {
      ContainerArea area=(ContainerArea)iter.next();
      Iterator rowIter=area.getChildren();
      while (rowIter.hasNext()) {
        AbstractArea row=(AbstractArea)rowIter.next();
        if (row instanceof RowArea) {
          tableContext.layout.addRow((RowArea)row);
        }
      }
    }
    iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      addArea(area);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.9262729124236252
71508,"protected void prepareQuery() throws DataException {
  try {
    IBinding[] bindings=null;
    if (this.queryDefn.getSourceQuery() instanceof SubqueryLocator) {
      this.queryResults=engine.getQueryResults(getParentQueryResultsID((SubqueryLocator)(queryDefn.getSourceQuery())));
      IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
      bindings=getSubQueryBindings(queryDefinition,((SubqueryLocator)this.queryDefn.getSourceQuery()).getName());
    }
 else {
      this.queryResults=PreparedQueryUtil.newInstance(dataEngine,(IQueryDefinition)queryDefn.getSourceQuery(),null).execute(null);
      if (queryResults != null && queryResults.getPreparedQuery() != null) {
        IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
        bindings=(IBinding[])queryDefinition.getBindings().values().toArray(new IBinding[0]);
      }
 else {
        bindings=new IBinding[0];
      }
    }
    for (int i=0; i < bindings.length; i++) {
      IBinding binding=bindings[i];
      this.queryDefn.addBinding(new Binding(binding.getBindingName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(binding.getBindingName()),binding.getDataType())));
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","protected void prepareQuery() throws DataException {
  try {
    IBinding[] bindings=null;
    if (this.queryDefn.getSourceQuery() instanceof SubqueryLocator) {
      this.queryResults=engine.getQueryResults(getParentQueryResultsID((SubqueryLocator)(queryDefn.getSourceQuery())));
      IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
      if (queryDefn.getSourceQuery() instanceof SubqueryLocator) {
        ArrayList<IBinding> bindingList=new ArrayList<IBinding>();
        getSubQueryBindings(queryDefinition,((SubqueryLocator)queryDefn.getSourceQuery()).getName(),bindingList);
        addQueryBindings(bindingList,queryDefinition.getBindings().values());
        bindings=bindingList.toArray(new IBinding[0]);
      }
 else {
        bindings=(IBinding[])(queryDefinition.getBindings().values().toArray(new IBinding[0]));
      }
    }
 else {
      this.queryResults=PreparedQueryUtil.newInstance(dataEngine,(IQueryDefinition)queryDefn.getSourceQuery(),null).execute(null);
      if (queryResults != null && queryResults.getPreparedQuery() != null) {
        IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
        bindings=(IBinding[])queryDefinition.getBindings().values().toArray(new IBinding[0]);
      }
 else {
        bindings=new IBinding[0];
      }
    }
    for (int i=0; i < bindings.length; i++) {
      IBinding binding=bindings[i];
      this.queryDefn.addBinding(new Binding(binding.getBindingName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(binding.getBindingName()),binding.getDataType())));
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.8624708624708625
71509,"/** 
 * @param subqueryDefinitions
 * @param subQueryName
 * @return
 */
private static IBinding[] getSubQueryBindings(SubqueryDefinition[] subqueryDefinitions,String subQueryName){
  for (int j=0; j < subqueryDefinitions.length; j++) {
    if (subqueryDefinitions[j].getName() != null && subqueryDefinitions[j].getName().equals(subQueryName)) {
      return (IBinding[])subqueryDefinitions[j].getBindings().values().toArray(new IBinding[0]);
    }
    IBinding[] bindings=getSubQueryBindings(subqueryDefinitions[j],subQueryName);
    if (bindings != null) {
      return bindings;
    }
  }
  return null;
}","/** 
 * @param subqueryDefinitions
 * @param subQueryName
 * @return
 * @throws DataException 
 */
private static void getSubQueryBindings(SubqueryDefinition[] subqueryDefinitions,String subQueryName,List<IBinding> resultBindingList) throws DataException {
  for (int j=0; j < subqueryDefinitions.length; j++) {
    if (subqueryDefinitions[j].getName() != null && subqueryDefinitions[j].getName().equals(subQueryName)) {
      addQueryBindings(resultBindingList,subqueryDefinitions[j].getBindings().values());
      return;
    }
    getSubQueryBindings(subqueryDefinitions[j],subQueryName,resultBindingList);
    if (resultBindingList.size() > 0) {
      addQueryBindings(resultBindingList,subqueryDefinitions[j].getBindings().values());
      return;
    }
  }
  return;
}",0.6642547033285094
71510,"protected void closeFirstN(int size){
  for (int i=0; i < size; i++) {
    closeLayout(contextList.removeFirst(),i,size,false);
  }
  setCurrentContext(0);
  if (parent != null) {
    parent.closeFirstN(size);
  }
}","protected void closeFirstN(int size){
  int rowSize=contextList.size();
  for (int i=0; i < size; i++) {
    closeLayout(contextList.removeFirst(),i,rowSize,i,false);
  }
  setCurrentContext(0);
  if (parent != null) {
    parent.closeFirstN(size);
  }
}",0.8997867803837953
71511,"protected String getEscapedStr(String s,boolean whitespace){
  s=super.getEscapedStr(s,whitespace);
  StringBuffer result=null;
  char[] s2char=s.toCharArray();
  for (int i=0, max=s2char.length, delta=0; i < max; i++) {
    char c=s2char[i];
    String replacement=null;
    if (c == '\n') {
      replacement=""String_Node_Str"";
    }
    if (replacement != null) {
      if (result == null) {
        result=new StringBuffer(s);
      }
      result.replace(i + delta,i + delta + 1,replacement);
      delta+=(replacement.length() - 1);
    }
  }
  if (result == null) {
    return s;
  }
  return result.toString();
}","protected String getEscapedStr(String s,boolean whitespace){
  s=super.getEscapedStr(s,whitespace);
  StringBuffer buffer=new StringBuffer();
  for (int i=0, max=s.length(), delta=0; i < max; i++) {
    char c=s.charAt(i);
    if (c == '\n' || c == '\r') {
      buffer.append(""String_Node_Str"");
      if (c == '\r' && i + 1 < max && s.charAt(i + 1) == '\n') {
        i++;
      }
    }
 else {
      buffer.append(c);
    }
  }
  return buffer.toString();
}",0.4907407407407407
71512,"public void testTrimRight(){
  String script1=""String_Node_Str"" + str + ""String_Node_Str"";
  String script2=""String_Node_Str"" + null + ""String_Node_Str"";
  assertEquals(((String)cx.evaluateString(scope,script1,""String_Node_Str"",1,null)),""String_Node_Str"");
  assertEquals(((String)cx.evaluateString(scope,script2,""String_Node_Str"",1,null)),null);
}","public void testTrimRight(){
  String script1=""String_Node_Str"" + str + ""String_Node_Str"";
  String script2=""String_Node_Str"" + null + ""String_Node_Str"";
  String script3=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  assertEquals(((String)cx.evaluateString(scope,script1,""String_Node_Str"",1,null)),""String_Node_Str"");
  assertEquals(((String)cx.evaluateString(scope,script2,""String_Node_Str"",1,null)),null);
  assertEquals(((String)cx.evaluateString(scope,script3,""String_Node_Str"",1,null)),""String_Node_Str"");
}",0.7954285714285714
71513,"/** 
 * Removes all trailing blanks. Leading blanks and blanks between words are not removed.
 * @param str
 * @return
 */
private String trimRight(String str){
  if (str == null)   return null;
 else {
    byte[] value=str.getBytes();
    int end=str.length();
    while ((end < str.length()) && (value[str.length() - 1] <= ' ')) {
      end--;
    }
    return (end < str.length()) ? str.substring(0,end) : str;
  }
}","/** 
 * Removes all trailing blanks. Leading blanks and blanks between words are not removed.
 * @param str
 * @return
 */
private String trimRight(String str){
  if (str == null)   return null;
 else {
    byte[] value=str.getBytes();
    int end=str.length();
    while ((end > 0) && (value[end - 1] <= ' ')) {
      end--;
    }
    return (end < str.length()) ? str.substring(0,end) : str;
  }
}",0.960880195599022
71514,"protected void endContainerInPages(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  if (currentTableIndex == nestCount && currentTableIndex > 0) {
    for (int i=0; i < buffers.length - 1; i++) {
      buffers[i].endContainer(content,finished,emitter,visible);
    }
    buffers[buffers.length - 1].endContainer(content,finished,emitter,visible);
  }
 else {
    currentBuffer.endContainer(content,finished,emitter,visible);
  }
}","protected void endContainerInPages(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  if (currentTableIndex == nestCount && currentTableIndex > 0) {
    for (int i=0; i < buffers.length - 1; i++) {
      buffers[i].endContainer(content,false,emitter,visible);
    }
    buffers[buffers.length - 1].endContainer(content,finished,emitter,visible);
  }
 else {
    currentBuffer.endContainer(content,finished,emitter,visible);
  }
}",0.9879781420765028
71515,"/** 
 * Contructor
 * @param launch
 * @param vm
 * @param name
 * @param process
 * @param listenPort
 * @param eventPort
 * @param tempFolder
 */
public ScriptDebugTarget(ILaunch launch,ReportVMClient vm,String name,IProcess process,int listenPort,String tempFolder){
  super(null);
  this.launch=launch;
  this.reportVM=vm;
  this.name=name;
  this.process=process;
  this.tempFolder=tempFolder;
  this.listenPort=listenPort;
  launch.addDebugTarget(this);
  vm.addVMListener(this);
  setTerminating(false);
  setTerminated(false);
  thread=new ScriptDebugThread(this);
  threads=new IThread[]{thread};
  DebugPlugin.getDefault().getBreakpointManager().addBreakpointListener(this);
  while (!isTerminated()) {
    try {
      vm.connect(listenPort);
      break;
    }
 catch (    VMException e) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e1) {
      }
      continue;
    }
  }
}","/** 
 * Contructor
 * @param launch
 * @param vm
 * @param name
 * @param process
 * @param listenPort
 * @param eventPort
 * @param tempFolder
 */
public ScriptDebugTarget(ILaunch launch,ReportVMClient vm,String name,IProcess process,int listenPort,String tempFolder){
  super(null);
  this.launch=launch;
  this.reportVM=vm;
  this.name=name;
  this.process=process;
  this.tempFolder=tempFolder;
  this.listenPort=listenPort;
  launch.addDebugTarget(this);
  vm.addVMListener(this);
  setTerminating(false);
  setTerminated(false);
  thread=new ScriptDebugThread(this);
  threads=new IThread[]{thread};
  DebugPlugin.getDefault().getBreakpointManager().addBreakpointListener(this);
  DebugPlugin.getDefault().getBreakpointManager().addBreakpointManagerListener(this);
  while (!isTerminated()) {
    try {
      vm.connect(listenPort);
      break;
    }
 catch (    VMException e) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e1) {
      }
      continue;
    }
  }
}",0.9555325749741468
71516,"private void terminated(){
  DebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);
  setTerminating(false);
  if (!fTerminated) {
    setTerminated(true);
    reportVM.disconnect();
    fireTerminateEvent();
  }
  breakPoints.clear();
}","private void terminated(){
  DebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);
  DebugPlugin.getDefault().getBreakpointManager().removeBreakpointManagerListener(this);
  setTerminating(false);
  if (!fTerminated) {
    setTerminated(true);
    reportVM.disconnect();
    fireTerminateEvent();
  }
  breakPoints.clear();
}",0.8548123980424144
71517,"public void breakpointAdded(IBreakpoint breakpoint){
  if (!supportsBreakpoint(breakpoint)) {
    return;
  }
  try {
    if (!breakpoint.isEnabled()) {
      return;
    }
  }
 catch (  CoreException e1) {
    return;
  }
  JsLineBreakPoint point=createJsLineBreakPoint((ScriptLineBreakpoint)breakpoint);
  try {
    if (ScriptLineBreakpoint.RUNTOLINE.equals(((ScriptLineBreakpoint)breakpoint).getType())) {
      reportVM.addBreakPoint(point);
    }
 else     if ((!breakPoints.contains(point))) {
      breakPoints.add(point);
      reportVM.addBreakPoint(point);
    }
  }
 catch (  VMException e) {
    logger.warning(e.getMessage());
  }
}","public void breakpointAdded(IBreakpoint breakpoint){
  if (!supportsBreakpoint(breakpoint)) {
    return;
  }
  try {
    if (!breakpoint.isEnabled()) {
      return;
    }
  }
 catch (  CoreException e1) {
    return;
  }
  ScriptLineBreakpoint scriptPoint=(ScriptLineBreakpoint)breakpoint;
  try {
    if (scriptPoint.shouldSkipBreakpoint()) {
      return;
    }
  }
 catch (  CoreException e1) {
  }
  JsLineBreakPoint point=createJsLineBreakPoint(scriptPoint);
  try {
    if (ScriptLineBreakpoint.RUNTOLINE.equals(((ScriptLineBreakpoint)breakpoint).getType())) {
      reportVM.addBreakPoint(point);
    }
 else     if ((!breakPoints.contains(point))) {
      breakPoints.add(point);
      reportVM.addBreakPoint(point);
    }
  }
 catch (  VMException e) {
    logger.warning(e.getMessage());
  }
}",0.8510344827586207
71518,"static void handleElement(Element ele,Map cssStyles,IContent content,ActionContent action,int index){
  IStyle cssStyle=(IStyle)cssStyles.get(ele);
  if (cssStyle != null) {
    if (""String_Node_Str"".equals(cssStyle.getDisplay())) {
      return;
    }
  }
  String tagName=ele.getTagName();
  if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    outputImg(ele,cssStyles,content);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    outputEmbedContent(ele,cssStyles,content);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new Integer(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new String(new char[]{'\u2022'}));
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (tagName.toLowerCase().equals(""String_Node_Str"")) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action);
    }
 else {
      processNodes(ele,cssStyles,container,action);
    }
  }
 else   if (""String_Node_Str"".equals(tagName.toLowerCase())) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action);
  }
}","static void handleElement(Element ele,Map cssStyles,IContent content,ActionContent action,int index){
  IStyle cssStyle=(IStyle)cssStyles.get(ele);
  if (cssStyle != null) {
    if (""String_Node_Str"".equals(cssStyle.getDisplay())) {
      return;
    }
  }
  String lTagName=ele.getTagName().toLowerCase();
  if (lTagName.equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent);
  }
 else   if (lTagName.equals(""String_Node_Str"")) {
    outputImg(ele,cssStyles,content);
  }
 else   if (lTagName.equals(""String_Node_Str"")) {
    outputEmbedContent(ele,cssStyles,content);
  }
 else   if (lTagName.equals(""String_Node_Str"")) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (lTagName.equals(""String_Node_Str"") || lTagName.equals(""String_Node_Str"")) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action);
  }
 else   if (lTagName.equals(""String_Node_Str"") && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new Integer(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new String(new char[]{'\u2022'}));
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action);
  }
 else   if (lTagName.equals(""String_Node_Str"") || lTagName.equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (lTagName.equals(""String_Node_Str"")) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action);
    }
 else {
      processNodes(ele,cssStyles,container,action);
    }
  }
 else   if (""String_Node_Str"".equals(lTagName)) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else   if (htmlBlockDisplay.contains(lTagName) || htmlInlineDisplay.contains(lTagName)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action);
  }
 else {
    processNodes(ele,cssStyles,content,action);
  }
}",0.9645520482173868
71519,"public void setPageRange(String pageRange) throws EngineException {
  long totalVisiblePageCount=RenderTask.this.getTotalPage();
  List list=PageSequenceParse.parsePageSequence(pageRange,totalVisiblePageCount);
  if (list.size() == 1) {
    long[] range=(long[])list.get(0);
    if (range[0] == 1 && range[1] == totalVisiblePageCount) {
      innerRender=new AllPageRender(new long[]{1,totalVisiblePageCount});
      return;
    }
  }
  innerRender=new PageRangeRender(list);
}","public void setPageRange(String pageRange) throws EngineException {
  long totalVisiblePageCount=RenderTask.this.getTotalPage();
  List list=PageSequenceParse.parsePageSequence(pageRange,totalVisiblePageCount);
  if (list.size() == 1) {
    long[] range=(long[])list.get(0);
    long totalPageCount=reportDocument.getPageCount();
    if (range[0] == 1 && range[1] == totalPageCount) {
      innerRender=new AllPageRender(new long[]{1,totalPageCount});
      return;
    }
  }
  innerRender=new PageRangeRender(list);
}",0.9306532663316583
71520,"/** 
 * Set the ResourceIdentifiers instance to the data source handle
 * @param source
 */
private void setResourceIDtoDataSourceHandle(OdaDataSourceHandle source){
  if (dteSession.getDataSessionContext().getAppContext() == null) {
    dteSession.getDataSessionContext().setAppContext(new HashMap());
  }
  dteSession.getDataSessionContext().getAppContext().put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers(source.getModuleHandle()));
}","/** 
 * Set the ResourceIdentifiers instance to the data source handle
 * @param source
 */
private void setResourceIDtoDataSourceHandle(OdaDataSourceHandle source){
  if (dteSession.getDataSessionContext().getAppContext() == null) {
    dteSession.getDataSessionContext().setAppContext(new HashMap());
  }
  if (!dteSession.getDataSessionContext().getAppContext().containsKey(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS))   dteSession.getDataSessionContext().getAppContext().put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers(source.getModuleHandle()));
}",0.7791970802919708
71521,"public void resetRowHint(){
  hints.clear();
  hints.putAll(currentHints);
  currentHints.clear();
}","public void resetRowHint(){
  if (!emptyPage) {
    hints.clear();
    hints.putAll(currentHints);
    currentHints.clear();
  }
}",0.8695652173913043
71522,"protected void end(boolean finished){
  if (emitter != null) {
    context.getPageBufferManager().endContainer(pageContent,finished,emitter,true);
    context.getBufferFactory().close();
  }
  context.resetRowHint();
}","protected void end(boolean finished){
  if (emitter != null) {
    context.getPageBufferManager().endContainer(pageContent,finished,emitter,true);
    context.getBufferFactory().close();
  }
  context.resetRowHint();
  context.setEmptyPage(false);
}",0.9336188436830836
71523,"public void endPage(IContent content,boolean finished,IContentEmitter emitter){
  ((AbstractNode)currentNode).setFinished(finished);
  if (currentNode.isStarted()) {
    currentNode.end();
    pageBreakEvent();
    if (!finished) {
      context.setPageNumber(context.getPageNumber() + 1);
      context.setPageCount(context.getPageCount() + 1);
    }
  }
 else {
    if (finished) {
      if (context.getPageNumber() == 1) {
        currentNode.flush();
        pageBreakEvent();
      }
 else {
        context.setPageNumber(context.getPageNumber() - 1);
        context.setPageCount(context.getPageCount() - 1);
      }
    }
  }
  this.finished=true;
  generator.reset();
  context.clearPageHint();
  currentNode=null;
}","public void endPage(IContent content,boolean finished,IContentEmitter emitter){
  ((AbstractNode)currentNode).setFinished(finished);
  if (currentNode.isStarted()) {
    currentNode.end();
    pageBreakEvent();
    if (!finished) {
      context.setPageNumber(context.getPageNumber() + 1);
      context.setPageCount(context.getPageCount() + 1);
    }
  }
 else {
    context.setEmptyPage(true);
    if (finished) {
      if (context.getPageNumber() == 1) {
        currentNode.flush();
        pageBreakEvent();
      }
 else {
        context.setPageNumber(context.getPageNumber() - 1);
        context.setPageCount(context.getPageCount() - 1);
      }
    }
  }
  this.finished=true;
  generator.reset();
  context.clearPageHint();
  currentNode=null;
}",0.9783783783783784
71524,"public void defineCube(CubeHandle cubeHandle) throws BirtException {
  Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
  Iterator itr=involvedDataSets.iterator();
  while (itr.hasNext()) {
    DataSetHandle dsHandle=(DataSetHandle)itr.next();
    BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
    BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
    if (baseDataSource != null && this.dataEngine.getDataSourceRuntime(baseDataSource.getName()) == null)     this.defineDataSource(baseDataSource);
    if (this.dataEngine.getDataSetDesign(baseDataSet.getName()) == null)     this.defineDataSet(baseDataSet);
    this.defineDataSet(baseDataSet);
  }
  if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
    this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
  }
}","public void defineCube(CubeHandle cubeHandle) throws BirtException {
  Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
  Iterator itr=involvedDataSets.iterator();
  while (itr.hasNext()) {
    DataSetHandle dsHandle=(DataSetHandle)itr.next();
    BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
    BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
    if (baseDataSource != null && this.dataEngine.getDataSourceRuntime(baseDataSource.getName()) == null)     this.defineDataSource(baseDataSource);
    if (this.dataEngine.getDataSetDesign(baseDataSet.getName()) == null)     this.defineDataSet(baseDataSet);
  }
  if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
    this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
  }
}",0.823258491652274
71525,"private IResultClass createCustomDataSetMetaData(BaseQuery query,IResultClass meta) throws DataException {
  List projectedColumns=new ArrayList();
  if (query.getFetchEvents() != null) {
    for (int i=0; i < meta.getFieldCount(); i++) {
      projectedColumns.add(new ResultFieldMetadata(i,meta.getFieldName(i + 1),meta.getFieldLabel(i + 1),meta.getFieldValueClass(i + 1),meta.getFieldNativeTypeName(i + 1),false));
    }
    for (int j=0; j < query.getFetchEvents().size(); j++) {
      if (query.getFetchEvents().get(j) instanceof ComputedColumnHelper) {
        ComputedColumnHelper helper=(ComputedColumnHelper)query.getFetchEvents().get(j);
        helper.setModel(TransformationConstants.RESULT_SET_MODEL);
        for (int i=0; i < helper.getComputedColumnList().size(); i++) {
          projectedColumns.add(new ResultFieldMetadata(i + 1 + meta.getFieldCount(),((IComputedColumn)helper.getComputedColumnList().get(i)).getName(),((IComputedColumn)helper.getComputedColumnList().get(i)).getName(),DataType.getClass(((IComputedColumn)helper.getComputedColumnList().get(i)).getDataType()),null,true));
        }
      }
      meta=new ResultClass(projectedColumns);
    }
  }
  return meta;
}","private IResultClass createCustomDataSetMetaData(BaseQuery query,IResultClass meta) throws DataException {
  List projectedColumns=new ArrayList();
  if (query.getFetchEvents() != null) {
    for (int i=0; i < meta.getFieldCount(); i++) {
      ResultFieldMetadata rfMeta=new ResultFieldMetadata(i,meta.getFieldName(i + 1),meta.getFieldLabel(i + 1),meta.getFieldValueClass(i + 1),meta.getFieldNativeTypeName(i + 1),false);
      rfMeta.setAlias(meta.getFieldAlias(i + 1));
      projectedColumns.add(rfMeta);
    }
    for (int j=0; j < query.getFetchEvents().size(); j++) {
      if (query.getFetchEvents().get(j) instanceof ComputedColumnHelper) {
        ComputedColumnHelper helper=(ComputedColumnHelper)query.getFetchEvents().get(j);
        helper.setModel(TransformationConstants.RESULT_SET_MODEL);
        for (int i=0; i < helper.getComputedColumnList().size(); i++) {
          projectedColumns.add(new ResultFieldMetadata(i + 1 + meta.getFieldCount(),((IComputedColumn)helper.getComputedColumnList().get(i)).getName(),((IComputedColumn)helper.getComputedColumnList().get(i)).getName(),DataType.getClass(((IComputedColumn)helper.getComputedColumnList().get(i)).getDataType()),null,true));
        }
      }
      meta=new ResultClass(projectedColumns);
    }
  }
  return meta;
}",0.9465219139525533
71526,"/** 
 * This method pulls out the 'min' and 'max' value for all datasets associated with a single axis using the custom data source processor implementation
 * @param ax The orthogonal axis for which the min/max values are being computed
 * @param iType The renderer's axis data type
 * @return
 */
private final Object getMinMax(Axis ax,int iType) throws ChartException, IllegalArgumentException {
  final Series[] sea=ax.getRuntimeSeries();
  final int iSeriesCount=sea.length;
  Series se;
  DataSet ds;
  Object oV1, oV2, oMin=null, oMax=null;
  PluginSettings ps=PluginSettings.instance();
  IDataSetProcessor iDSP=null;
  boolean bAnyStacked=false;
  for (int i=0; i < iSeriesCount; i++) {
    if (sea[i].isStacked()) {
      if (sea[i].canBeStacked()) {
        bAnyStacked=true;
        continue;
      }
 else {
        throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sea[i]}));
      }
    }
    iDSP=ps.getDataSetProcessor(sea[i].getClass());
    ds=sea[i].getDataSet();
    oV1=iDSP.getMinimum(ds);
    oV2=iDSP.getMaximum(ds);
    if ((iType & NUMERICAL) == NUMERICAL) {
      try {
        if (oV1 != null) {
          if (oMin == null) {
            oMin=oV1;
          }
 else {
            final double dV1=asDouble(oV1).doubleValue();
            if (Math.min(asDouble(oMin).doubleValue(),dV1) == dV1) {
              oMin=oV1;
            }
          }
        }
        if (oV2 != null) {
          if (oMax == null) {
            oMax=oV2;
          }
 else {
            final double dV2=asDouble(oV2).doubleValue();
            if (Math.max(asDouble(oMax).doubleValue(),dV2) == dV2) {
              oMax=oV2;
            }
          }
        }
      }
 catch (      ClassCastException ex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
      }
    }
 else     if ((iType & DATE_TIME) == DATE_TIME) {
      try {
        if (oV1 != null) {
          if (oMin == null) {
            oMin=oV1;
          }
 else {
            final CDateTime cdtV1=asDateTime(oV1);
            final CDateTime cdtMin=asDateTime(oMin);
            if (cdtV1.before(cdtMin)) {
              oMin=cdtV1;
            }
          }
        }
        if (oV2 != null) {
          if (oMax == null) {
            oMax=oV2;
          }
 else {
            final CDateTime cdtV2=asDateTime(oV2);
            final CDateTime cdtMax=asDateTime(oMax);
            if (cdtV2.after(cdtMax)) {
              oMax=cdtV2;
            }
          }
        }
      }
 catch (      ClassCastException ex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
      }
    }
  }
  if (bAnyStacked || ax.isPercent()) {
    if (ax.getType().getValue() == AxisType.DATE_TIME) {
      throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{ax}));
    }
    Object oValue;
    int iSeriesPerGroup;
    double dPercentMax=0, dPercentMin=0;
    double dAxisMin=Double.MAX_VALUE, dAxisMax=-Double.MAX_VALUE;
    ArrayList<StackGroup> alSeriesGroupsPerAxis=ssl.getStackGroups(ax);
    ArrayList<Series> alSeriesPerGroup;
    StackGroup sg;
    DataSetIterator[] dsi=new DataSetIterator[ssl.getSeriesCount(ax)];
    if (alSeriesGroupsPerAxis == null) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale()));
    }
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{ax},rtc.getULocale()));
    int iSeriesIndex, iDataSetCount=ssl.getUnitCount();
    for (int k=0; k < iDataSetCount; k++) {
      iSeriesIndex=0;
      for (int i=0; i < alSeriesGroupsPerAxis.size(); i++) {
        sg=alSeriesGroupsPerAxis.get(i);
        alSeriesPerGroup=sg.getSeries();
        iSeriesPerGroup=alSeriesPerGroup.size();
        if (iSeriesPerGroup > 0) {
          se=alSeriesPerGroup.get(0);
          ds=se.getDataSet();
          if (ds instanceof NullDataSet) {
            continue;
          }
          if (dsi[iSeriesIndex] == null) {
            dsi[iSeriesIndex]=new DataSetIterator(ds);
            dsi[iSeriesIndex].reverse(cwa.isReverseCategory());
            if ((dsi[iSeriesIndex].getDataType() & IConstants.NUMERICAL) != IConstants.NUMERICAL) {
              throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
            }
          }
          iDataSetCount=dsi[iSeriesIndex].size();
          final AxisSubUnit au=ssl.getSubUnit(sg,k);
          for (int j=0; j < iSeriesPerGroup; j++) {
            se=alSeriesPerGroup.get(j);
            if (j > 0) {
              if (dsi[iSeriesIndex] == null) {
                ds=se.getDataSet();
                dsi[iSeriesIndex]=new DataSetIterator(ds);
                dsi[iSeriesIndex].reverse(cwa.isReverseCategory());
                if ((dsi[iSeriesIndex].getDataType() & IConstants.NUMERICAL) != IConstants.NUMERICAL) {
                  throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
                }
              }
            }
            oValue=dsi[iSeriesIndex].next();
            if (oValue != null) {
              double dValue=((Double)oValue).doubleValue();
              au.computeTotal(dValue);
            }
            iSeriesIndex++;
          }
          if (ax.isPercent()) {
            double dAbsTotal=au.getPositiveTotal() - au.getNegativeTotal();
            if (dAbsTotal != 0d) {
              dPercentMax=Math.max((au.getTotalMax() / dAbsTotal) * 100d,dPercentMax);
              dPercentMin=Math.min((au.getTotalMin() / dAbsTotal) * 100d,dPercentMin);
            }
          }
 else {
            dAxisMax=Math.max(au.getTotalMax(),dAxisMax);
            dAxisMin=Math.min(au.getTotalMin(),dAxisMin);
          }
        }
      }
    }
    if (ax.isPercent()) {
      if (dPercentMax > 100)       dPercentMax=100;
      if (dPercentMin < -100)       dPercentMin=-100;
      if (dPercentMax == 0 && dPercentMin == 0) {
        dPercentMax=100;
      }
      dAxisMin=dPercentMin;
      dAxisMax=dPercentMax;
    }
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      dAxisMin=1;
    }
    if (dAxisMin != Double.MAX_VALUE) {
      oMin=new Double(dAxisMin);
    }
    if (dAxisMax != -Double.MAX_VALUE) {
      oMax=new Double(dAxisMax);
    }
  }
  if (oMin == null && oMax == null) {
    if (iType == DATE_TIME) {
      int year=Calendar.getInstance().get(Calendar.YEAR);
      oMin=new CDateTime(year,1,1);
      oMax=new CDateTime(year,12,31);
    }
 else     if ((iType & NUMERICAL) == NUMERICAL) {
      if ((iType & PERCENT) == PERCENT) {
        oMin=new Double(0);
        oMax=new Double(100);
      }
 else       if ((iType & LOGARITHMIC) == LOGARITHMIC) {
        oMin=new Double(1);
        oMax=new Double(1000);
      }
 else {
        oMin=new Double(-1);
        oMax=new Double(1);
      }
    }
  }
  if (iType == DATE_TIME) {
    try {
      CDateTime dtMin=asDateTime(oMin);
      CDateTime dtMax=asDateTime(oMax);
      return new Calendar[]{dtMin,dtMax};
    }
 catch (    ClassCastException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    try {
      double dMin=asDouble(oMin).doubleValue();
      double dMax=asDouble(oMax).doubleValue();
      if (dMin == dMax) {
        if (dMin > 0) {
          dMin=0;
        }
        if (dMax < 0) {
          dMax=0;
        }
      }
      return new double[]{dMin,dMax};
    }
 catch (    ClassCastException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
    }
  }
  return null;
}","/** 
 * This method pulls out the 'min' and 'max' value for all datasets associated with a single axis using the custom data source processor implementation
 * @param ax The orthogonal axis for which the min/max values are being computed
 * @param iType The renderer's axis data type
 * @return
 */
private final Object getMinMax(Axis ax,int iType) throws ChartException, IllegalArgumentException {
  final Series[] sea=ax.getRuntimeSeries();
  final int iSeriesCount=sea.length;
  Series se;
  DataSet ds;
  Object oV1, oV2, oMin=null, oMax=null;
  PluginSettings ps=PluginSettings.instance();
  IDataSetProcessor iDSP=null;
  boolean bAnyStacked=false;
  for (int i=0; i < iSeriesCount; i++) {
    if (sea[i].isStacked()) {
      if (sea[i].canBeStacked()) {
        bAnyStacked=true;
        continue;
      }
 else {
        throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sea[i]}));
      }
    }
    iDSP=ps.getDataSetProcessor(sea[i].getClass());
    ds=sea[i].getDataSet();
    oV1=iDSP.getMinimum(ds);
    oV2=iDSP.getMaximum(ds);
    if ((iType & NUMERICAL) == NUMERICAL) {
      try {
        if (oV1 != null) {
          if (oMin == null) {
            oMin=oV1;
          }
 else {
            final double dV1=asDouble(oV1).doubleValue();
            if (Math.min(asDouble(oMin).doubleValue(),dV1) == dV1) {
              oMin=oV1;
            }
          }
        }
        if (oV2 != null) {
          if (oMax == null) {
            oMax=oV2;
          }
 else {
            final double dV2=asDouble(oV2).doubleValue();
            if (Math.max(asDouble(oMax).doubleValue(),dV2) == dV2) {
              oMax=oV2;
            }
          }
        }
      }
 catch (      ClassCastException ex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
      }
    }
 else     if ((iType & DATE_TIME) == DATE_TIME) {
      try {
        if (oV1 != null) {
          if (oMin == null) {
            oMin=oV1;
          }
 else {
            final CDateTime cdtV1=asDateTime(oV1);
            final CDateTime cdtMin=asDateTime(oMin);
            if (cdtV1.before(cdtMin)) {
              oMin=cdtV1;
            }
          }
        }
        if (oV2 != null) {
          if (oMax == null) {
            oMax=oV2;
          }
 else {
            final CDateTime cdtV2=asDateTime(oV2);
            final CDateTime cdtMax=asDateTime(oMax);
            if (cdtV2.after(cdtMax)) {
              oMax=cdtV2;
            }
          }
        }
      }
 catch (      ClassCastException ex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
      }
    }
  }
  if (bAnyStacked || ax.isPercent()) {
    if (ax.getType().getValue() == AxisType.DATE_TIME) {
      throw new IllegalArgumentException(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""));
    }
    Object oValue;
    int iSeriesPerGroup;
    double dPercentMax=0, dPercentMin=0;
    double dAxisMin=Double.MAX_VALUE, dAxisMax=-Double.MAX_VALUE;
    ArrayList<StackGroup> alSeriesGroupsPerAxis=ssl.getStackGroups(ax);
    ArrayList<Series> alSeriesPerGroup;
    StackGroup sg;
    DataSetIterator[] dsi=new DataSetIterator[ssl.getSeriesCount(ax)];
    if (alSeriesGroupsPerAxis == null) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale()));
    }
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{ax},rtc.getULocale()));
    int iSeriesIndex, iDataSetCount=ssl.getUnitCount();
    for (int k=0; k < iDataSetCount; k++) {
      iSeriesIndex=0;
      for (int i=0; i < alSeriesGroupsPerAxis.size(); i++) {
        sg=alSeriesGroupsPerAxis.get(i);
        alSeriesPerGroup=sg.getSeries();
        iSeriesPerGroup=alSeriesPerGroup.size();
        if (iSeriesPerGroup > 0) {
          se=alSeriesPerGroup.get(0);
          ds=se.getDataSet();
          if (ds instanceof NullDataSet) {
            continue;
          }
          if (dsi[iSeriesIndex] == null) {
            dsi[iSeriesIndex]=new DataSetIterator(ds);
            dsi[iSeriesIndex].reverse(cwa.isReverseCategory());
            if ((dsi[iSeriesIndex].getDataType() & IConstants.NUMERICAL) != IConstants.NUMERICAL) {
              throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
            }
          }
          iDataSetCount=dsi[iSeriesIndex].size();
          final AxisSubUnit au=ssl.getSubUnit(sg,k);
          for (int j=0; j < iSeriesPerGroup; j++) {
            se=alSeriesPerGroup.get(j);
            if (j > 0) {
              if (dsi[iSeriesIndex] == null) {
                ds=se.getDataSet();
                dsi[iSeriesIndex]=new DataSetIterator(ds);
                dsi[iSeriesIndex].reverse(cwa.isReverseCategory());
                if ((dsi[iSeriesIndex].getDataType() & IConstants.NUMERICAL) != IConstants.NUMERICAL) {
                  throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
                }
              }
            }
            oValue=dsi[iSeriesIndex].next();
            if (oValue != null) {
              double dValue=((Double)oValue).doubleValue();
              au.computeTotal(dValue);
            }
            iSeriesIndex++;
          }
          if (ax.isPercent()) {
            double dAbsTotal=au.getPositiveTotal() - au.getNegativeTotal();
            if (dAbsTotal != 0d) {
              dPercentMax=Math.max((au.getTotalMax() / dAbsTotal) * 100d,dPercentMax);
              dPercentMin=Math.min((au.getTotalMin() / dAbsTotal) * 100d,dPercentMin);
            }
          }
 else {
            dAxisMax=Math.max(au.getTotalMax(),dAxisMax);
            dAxisMin=Math.min(au.getTotalMin(),dAxisMin);
          }
        }
      }
    }
    if (ax.isPercent()) {
      if (dPercentMax > 100)       dPercentMax=100;
      if (dPercentMin < -100)       dPercentMin=-100;
      if (dPercentMax == 0 && dPercentMin == 0) {
        dPercentMax=100;
      }
      dAxisMin=dPercentMin;
      dAxisMax=dPercentMax;
    }
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      dAxisMin=1;
    }
    if (dAxisMin != Double.MAX_VALUE) {
      oMin=new Double(dAxisMin);
    }
    if (dAxisMax != -Double.MAX_VALUE) {
      oMax=new Double(dAxisMax);
    }
  }
  if (oMin == null && oMax == null) {
    if (iType == DATE_TIME) {
      int year=Calendar.getInstance().get(Calendar.YEAR);
      oMin=new CDateTime(year,1,1);
      oMax=new CDateTime(year,12,31);
    }
 else     if ((iType & NUMERICAL) == NUMERICAL) {
      if ((iType & PERCENT) == PERCENT) {
        oMin=new Double(0);
        oMax=new Double(100);
      }
 else       if ((iType & LOGARITHMIC) == LOGARITHMIC) {
        oMin=new Double(1);
        oMax=new Double(1000);
      }
 else {
        oMin=new Double(-1);
        oMax=new Double(1);
      }
    }
  }
  if (iType == DATE_TIME) {
    try {
      CDateTime dtMin=asDateTime(oMin);
      CDateTime dtMax=asDateTime(oMax);
      return new Calendar[]{dtMin,dtMax};
    }
 catch (    ClassCastException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    try {
      double dMin=asDouble(oMin).doubleValue();
      double dMax=asDouble(oMax).doubleValue();
      if (dMin == dMax) {
        if (dMin > 0) {
          dMin=0;
        }
        if (dMax < 0) {
          dMax=0;
        }
      }
      return new double[]{dMin,dMax};
    }
 catch (    ClassCastException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
    }
  }
  return null;
}",0.9976010334009964
71527,"/** 
 * @return
 */
private List getSelectValueList(){
  if (needRefreshList == false) {
    return selValueList;
  }
  CubeHandle cube=null;
  if (designHandle instanceof ExtendedItemHandle) {
    cube=((ExtendedItemHandle)designHandle).getCube();
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || expression.getText().length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  IBaseCubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    IReportItem item=((ExtendedItemHandle)designHandle).getReportItem();
    Chart cm=context.getModel();
    cubeQueryDefn=new ChartCubeQueryHelper((ExtendedItemHandle)designHandle,cm).createCubeQuery(null);
    iter=session.getCubeQueryUtil().getMemberValueIterator((TabularCubeHandle)cube,getExpression(expression.getText()),(ICubeQueryDefinition)cubeQueryDefn);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
  selValueList=new ArrayList();
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (selValueList.indexOf(obj) < 0) {
        selValueList.add(obj);
      }
    }
  }
  needRefreshList=false;
  return selValueList;
}","/** 
 * @return
 */
private List getSelectValueList(){
  if (needRefreshList == false) {
    return selValueList;
  }
  CubeHandle cube=null;
  if (designHandle instanceof ExtendedItemHandle) {
    cube=((ExtendedItemHandle)designHandle).getCube();
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || expression.getText().length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  IBaseCubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    IReportItem item=((ExtendedItemHandle)designHandle).getReportItem();
    Chart cm=null;
    if (context != null && context.getModel() != null) {
      cm=context.getModel();
    }
 else {
      cm=(Chart)((ChartReportItemImpl)item).getProperty(ChartReportItemUtil.PROPERTY_CHART);
    }
    cubeQueryDefn=new ChartCubeQueryHelper((ExtendedItemHandle)designHandle,cm).createCubeQuery(null);
    iter=session.getCubeQueryUtil().getMemberValueIterator((TabularCubeHandle)cube,getExpression(expression.getText()),(ICubeQueryDefinition)cubeQueryDefn);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
  selValueList=new ArrayList();
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (selValueList.indexOf(obj) < 0) {
        selValueList.add(obj);
      }
    }
  }
  needRefreshList=false;
  return selValueList;
}",0.9339922343805154
71528,"public void endRow(IRowContent rowContent){
  if (isRowHidden) {
    return;
  }
  if (rowHint != null && !formalized && !LayoutUtil.isRepeatableRow(rowContent)) {
    Row row=rows[rowCount - 1];
    Cell[] cells=row.cells;
    for (int cellId=0; cellId < realColCount; cellId++) {
      Cell cell=cells[cellId];
      if (cell != null) {
        if (cell.status == Cell.CELL_EMPTY || (cell.status == Cell.CELL_USED) && (rowHint.isDropColumn(cellId))) {
          IReportContent report=rowContent.getReportContent();
          ICellContent cellContent=report.createCellContent();
          rowHint.initUnresolvedCell(cellContent,rowContent.getInstanceID(),cellId);
          cellContent.setParent(rowContent);
          int rowSpan=cellContent.getRowSpan();
          int colSpan=cellContent.getColSpan();
          Cell newCell=Cell.createCell(row.rowId,cellId,rowSpan,colSpan,new CellContent(cellContent,null));
          row.cells[cellId]=newCell;
          for (int i=cellId + 1; i < cellId + colSpan; i++) {
            row.cells[i]=Cell.createSpanCell(row.rowId,i,newCell);
          }
        }
      }
    }
    formalized=true;
    rowHint=null;
  }
}","public void endRow(IRowContent rowContent){
  if (isRowHidden) {
    return;
  }
  if (rowHint != null && !formalized && !LayoutUtil.isRepeatableRow(rowContent)) {
    Row row=rows[rowCount - 1];
    Cell[] cells=row.cells;
    for (int cellId=0; cellId < realColCount; cellId++) {
      Cell cell=cells[cellId];
      if (cell != null) {
        if (cell.status == Cell.CELL_EMPTY || (cell.status == Cell.CELL_USED) && (rowHint.isDropColumn(cellId))) {
          IReportContent report=rowContent.getReportContent();
          ICellContent cellContent=report.createCellContent();
          rowHint.initUnresolvedCell(cellContent,rowContent.getInstanceID(),cellId);
          cellContent.setParent(rowContent);
          int rowSpan=cellContent.getRowSpan();
          int colSpan=cellContent.getColSpan();
          Cell newCell=Cell.createCell(row.rowId,cellId,rowSpan,colSpan,new CellContent(cellContent,null));
          row.cells[cellId]=newCell;
          int end=Math.min(realColCount,cellId + colSpan);
          for (int i=cellId + 1; i < end; i++) {
            row.cells[i]=Cell.createSpanCell(row.rowId,i,newCell);
          }
        }
      }
    }
    formalized=true;
    rowHint=null;
  }
}",0.967032967032967
71529,"/** 
 */
public void testLike(){
  String[] script=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] result=new boolean[]{true,true,true,true,true,false};
  for (int i=0; i < script.length; i++) {
    assertTrue(((Boolean)cx.evaluateString(scope,script[i],""String_Node_Str"",1,null)).booleanValue() == result[i]);
    System.out.println(i);
  }
}","/** 
 */
public void testLike(){
  String[] script=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] result=new boolean[]{true,true,true,true,true,false,false,false,true,false,true,false};
  for (int i=0; i < script.length; i++) {
    assertTrue(((Boolean)cx.evaluateString(scope,script[i],""String_Node_Str"",1,null)).booleanValue() == result[i]);
  }
}",0.8116817724068479
71530,"/** 
 */
public void testNotLike(){
  String[] script=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] result=new boolean[]{false,false,false,false,false,true};
  for (int i=0; i < script.length; i++) {
    assertTrue(((Boolean)cx.evaluateString(scope,script[i],""String_Node_Str"",1,null)).booleanValue() == result[i]);
    System.out.println(i);
  }
}","/** 
 */
public void testNotLike(){
  String[] script=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] result=new boolean[]{false,false,false,false,false,true,true,true,false,true,false,true};
  for (int i=0; i < script.length; i++) {
    assertTrue(((Boolean)cx.evaluateString(scope,script[i],""String_Node_Str"",1,null)).booleanValue() == result[i]);
  }
}",0.8308004052684904
71531,"/** 
 * @param obj1
 * @param obj2
 * @return true x matches SQL pattern y
 * @throws BirtException
 * @throws DataException
 */
private static boolean like(Object obj1,Object obj2){
  if (obj2 == null) {
    throw new java.lang.IllegalArgumentException(""String_Node_Str"");
  }
  if (obj1 == null) {
    return false;
  }
  String str=obj1.toString();
  String pattern=obj2.toString();
  pattern=pattern.replaceAll(""String_Node_Str"",""String_Node_Str"");
  pattern=pattern.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return str.matches(pattern);
}","/** 
 * @param obj1
 * @param obj2
 * @return true x matches SQL pattern y
 * @throws BirtException
 * @throws DataException
 */
private static boolean like(Object obj1,Object obj2){
  if (obj2 == null) {
    throw new java.lang.IllegalArgumentException(""String_Node_Str"");
  }
  if (obj1 == null) {
    return false;
  }
  String str=obj1.toString();
  String pattern=toPatternString(obj2.toString());
  return str.matches(pattern);
}",0.8490374873353597
71532,"public TableContentLayout(ITableContent tableContent,String format,HTMLLayoutContext context,String keyString){
  this.format=format;
  this.context=context;
  this.tableContent=tableContent;
  this.keyString=keyString;
  this.colCount=tableContent.getColumnCount();
  int start=0;
  int end=this.colCount;
  String tableId=tableContent.getInstanceID().toUniqueString();
  List hints=context.getTableColumnHint(tableId);
  this.adjustedColumnIds=new int[colCount];
  if (hints.size() > 0) {
    int current=0;
    Iterator iter=hints.iterator();
    int total=0;
    while (iter.hasNext()) {
      int[] hint=(int[])iter.next();
      for (int i=hint[0]; i < hint[1]; i++) {
        IColumn column=tableContent.getColumn(i);
        adjustedColumnIds[i]=current;
        if (!isColumnHidden(column)) {
          visibleColumns.add(column);
          current++;
        }
      }
      total=total + hint[1] - hint[0];
    }
    current=adjustedColumnIds[0];
    for (int i=1; i < colCount; i++) {
      if (adjustedColumnIds[i] < current) {
        adjustedColumnIds[i]=current;
      }
 else {
        current=adjustedColumnIds[i];
      }
      if (!hasHiddenColumns) {
        if (i != adjustedColumnIds[i]) {
          hasHiddenColumns=true;
          leastColumnIdToBeAjusted=i;
        }
      }
    }
  }
 else {
    int current=0;
    for (int i=0; i < colCount; i++) {
      IColumn column=tableContent.getColumn(i);
      adjustedColumnIds[i]=current;
      if (!isColumnHidden(column)) {
        visibleColumns.add(column);
        current++;
      }
 else {
        if (!hasHiddenColumns) {
          hasHiddenColumns=true;
          leastColumnIdToBeAjusted=i;
        }
      }
    }
  }
  if (hasHiddenColumns) {
    this.wrappedTable=new TableContentWrapper(tableContent,visibleColumns);
  }
  this.realColCount=visibleColumns.size();
}","public TableContentLayout(ITableContent tableContent,String format,HTMLLayoutContext context,String keyString){
  this.format=format;
  this.context=context;
  this.tableContent=tableContent;
  this.keyString=keyString;
  this.colCount=tableContent.getColumnCount();
  int start=0;
  int end=this.colCount;
  String tableId=tableContent.getInstanceID().toUniqueString();
  List hints=context.getTableColumnHint(tableId);
  this.adjustedColumnIds=new int[colCount];
  if (hints.size() > 0) {
    int current=-1;
    Iterator iter=hints.iterator();
    while (iter.hasNext()) {
      int[] hint=(int[])iter.next();
      for (int i=hint[0]; i < hint[1]; i++) {
        IColumn column=tableContent.getColumn(i);
        if (!isColumnHidden(column)) {
          visibleColumns.add(column);
          current++;
        }
        adjustedColumnIds[i]=(current >= 0 ? current : 0);
      }
    }
    current=adjustedColumnIds[0];
    for (int i=1; i < colCount; i++) {
      if (adjustedColumnIds[i] < current) {
        adjustedColumnIds[i]=current;
      }
 else {
        current=adjustedColumnIds[i];
      }
      if (!hasHiddenColumns) {
        if (i != adjustedColumnIds[i]) {
          hasHiddenColumns=true;
          leastColumnIdToBeAjusted=i;
        }
      }
    }
  }
 else {
    int current=-1;
    for (int i=0; i < colCount; i++) {
      IColumn column=tableContent.getColumn(i);
      if (!isColumnHidden(column)) {
        visibleColumns.add(column);
        current++;
      }
 else {
        if (!hasHiddenColumns) {
          hasHiddenColumns=true;
          leastColumnIdToBeAjusted=i;
        }
      }
      adjustedColumnIds[i]=(current >= 0 ? current : 0);
    }
  }
  if (hasHiddenColumns) {
    this.wrappedTable=new TableContentWrapper(tableContent,visibleColumns);
  }
  this.realColCount=visibleColumns.size();
}",0.9149512459371616
71533,"public int getCurrentResultIndex() throws DataException {
  return this.prototype.getCurrentResultIndex();
}","public int getCurrentResultIndex() throws DataException {
  return 0;
}",0.7821229050279329
71534,"/** 
 * Creates a new DtE API IParameterDefinition from a model's DataSetParameterHandle.
 */
IParameterDefinition newParam(DataSetParameterHandle modelParam){
  ParameterDefinition dteParam=new ParameterDefinition();
  dteParam.setName(modelParam.getName());
  if (modelParam.getPosition() != null)   dteParam.setPosition(modelParam.getPosition().intValue());
  if (modelParam.getNativeDataType() != null)   dteParam.setNativeType(modelParam.getNativeDataType().intValue());
  if (modelParam instanceof OdaDataSetParameterHandle) {
    dteParam.setNativeName(((OdaDataSetParameterHandle)modelParam).getNativeName());
  }
  dteParam.setType(DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType()));
  dteParam.setInputMode(modelParam.isInput());
  dteParam.setOutputMode(modelParam.isOutput());
  dteParam.setNullable(modelParam.allowNull());
  dteParam.setInputOptional(modelParam.isOptional());
  dteParam.setDefaultInputValue(modelParam.getDefaultValue());
  return dteParam;
}","/** 
 * Creates a new DtE API IParameterDefinition from a model's DataSetParameterHandle.
 */
IParameterDefinition newParam(DataSetParameterHandle modelParam){
  ParameterDefinition dteParam=new ParameterDefinition();
  dteParam.setName(modelParam.getName());
  if (modelParam.getPosition() != null)   dteParam.setPosition(modelParam.getPosition().intValue());
  if (modelParam.getNativeDataType() != null)   dteParam.setNativeType(modelParam.getNativeDataType().intValue());
  if (modelParam instanceof OdaDataSetParameterHandle) {
    dteParam.setNativeName(((OdaDataSetParameterHandle)modelParam).getNativeName());
  }
  dteParam.setType(DataAdapterUtil.adaptModelDataType(modelParam.getDataType()));
  dteParam.setInputMode(modelParam.isInput());
  dteParam.setOutputMode(modelParam.isOutput());
  dteParam.setNullable(modelParam.allowNull());
  dteParam.setInputOptional(modelParam.isOptional());
  dteParam.setDefaultInputValue(modelParam.getDefaultValue());
  return dteParam;
}",0.7316826680141486
71535,"/** 
 * @return
 */
private List getSelectValueList(){
  if (needRefreshList == false) {
    return selValueList;
  }
  CubeHandle cube=null;
  if (designHandle instanceof ExtendedItemHandle) {
    cube=((ExtendedItemHandle)designHandle).getCube();
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || expression.getText().length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  IBaseCubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    IReportItem item=((ExtendedItemHandle)designHandle).getReportItem();
    Chart cm=(Chart)((ChartReportItemImpl)item).getProperty(ChartReportItemUtil.PROPERTY_CHART);
    cubeQueryDefn=new ChartCubeQueryHelper((ExtendedItemHandle)designHandle,cm).createCubeQuery(null);
    iter=session.getCubeQueryUtil().getMemberValueIterator((TabularCubeHandle)cube,getExpression(expression.getText()),(ICubeQueryDefinition)cubeQueryDefn);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
  selValueList=new ArrayList();
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (selValueList.indexOf(obj) < 0) {
        selValueList.add(obj);
      }
    }
  }
  needRefreshList=false;
  return selValueList;
}","/** 
 * @return
 */
private List getSelectValueList(){
  if (needRefreshList == false) {
    return selValueList;
  }
  CubeHandle cube=null;
  if (designHandle instanceof ExtendedItemHandle) {
    cube=((ExtendedItemHandle)designHandle).getCube();
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || expression.getText().length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  IBaseCubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    IReportItem item=((ExtendedItemHandle)designHandle).getReportItem();
    Chart cm=context.getModel();
    cubeQueryDefn=new ChartCubeQueryHelper((ExtendedItemHandle)designHandle,cm).createCubeQuery(null);
    iter=session.getCubeQueryUtil().getMemberValueIterator((TabularCubeHandle)cube,getExpression(expression.getText()),(ICubeQueryDefinition)cubeQueryDefn);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
  selValueList=new ArrayList();
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (selValueList.indexOf(obj) < 0) {
        selValueList.add(obj);
      }
    }
  }
  needRefreshList=false;
  return selValueList;
}",0.9638643067846608
71536,"/** 
 * Create the list of all the images to be displayed.
 * @param x the x-cordinator of the base image.
 * @param y the y-cordinator of the base image.
 * @return the list of all the images to be displayed.
 */
private ArrayList createImageList(int x,int y){
  Rectangle area=getClientArea();
  ArrayList yList=new ArrayList();
  if ((repeat & ImageConstants.REPEAT_Y) == 0) {
    yList.add(new Point(x,y));
  }
 else {
    int i=0;
    while (y + size.height * i + size.height > area.y) {
      yList.add(new Point(x,y + size.height * i));
      i--;
    }
    i=1;
    while (y + size.height * i < area.y + area.height) {
      yList.add(new Point(x,y + size.height * i));
      i++;
    }
  }
  ArrayList xyList=new ArrayList();
  Iterator iter=yList.iterator();
  while (iter.hasNext()) {
    Point point=(Point)iter.next();
    if ((repeat & ImageConstants.REPEAT_X) == 0) {
      xyList.add(point);
    }
 else {
      int i=0;
      while (point.x + size.width * i + size.width > area.x) {
        xyList.add(new Point(point.x + size.width * i,point.y));
        i--;
      }
      i=1;
      while (point.x + size.width * i < area.x + area.width) {
        xyList.add(new Point(point.x + size.width * i,point.y));
        i++;
      }
    }
  }
  yList.clear();
  return xyList;
}","/** 
 * Create the list of all the images to be displayed.
 * @param x the x-cordinator of the base image.
 * @param y the y-cordinator of the base image.
 * @return the list of all the images to be displayed.
 */
private ArrayList createImageList(int x,int y){
  Rectangle area=getBounds();
  ArrayList yList=new ArrayList();
  if ((repeat & ImageConstants.REPEAT_Y) == 0) {
    yList.add(new Point(x,y));
  }
 else {
    int i=0;
    while (y + size.height * i + size.height > area.y) {
      yList.add(new Point(x,y + size.height * i));
      i--;
    }
    i=1;
    while (y + size.height * i < area.y + area.height) {
      yList.add(new Point(x,y + size.height * i));
      i++;
    }
  }
  ArrayList xyList=new ArrayList();
  Iterator iter=yList.iterator();
  while (iter.hasNext()) {
    Point point=(Point)iter.next();
    if ((repeat & ImageConstants.REPEAT_X) == 0) {
      xyList.add(point);
    }
 else {
      int i=0;
      while (point.x + size.width * i + size.width > area.x) {
        xyList.add(new Point(point.x + size.width * i,point.y));
        i--;
      }
      i=1;
      while (point.x + size.width * i < area.x + area.width) {
        xyList.add(new Point(point.x + size.width * i,point.y));
        i++;
      }
    }
  }
  yList.clear();
  return xyList;
}",0.9937936384794416
71537,"protected void paintChildren(Graphics graphics){
  IFigure child;
  for (int i=0; i < this.getChildren().size(); i++) {
    child=(IFigure)this.getChildren().get(i);
    if (child.isVisible()) {
      graphics.setClip(getBounds().getCopy().intersect(child.getBounds()));
      child.paint(graphics);
      graphics.restoreState();
    }
  }
}","protected void paintChildren(Graphics graphics){
  IFigure child;
  for (int i=0; i < this.getChildren().size(); i++) {
    Rectangle clip=graphics.getClip(Rectangle.SINGLETON);
    child=(IFigure)this.getChildren().get(i);
    if (child.isVisible()) {
      Rectangle bounds=child.getBounds().getCopy();
      int extend=bounds.x + bounds.width - clip.x - clip.width;
      if (extend > 0) {
        clip.width=clip.width + extend;
      }
      if (child.intersects(clip)) {
        graphics.setClip(clip.getCopy());
        child.paint(graphics);
      }
      graphics.restoreState();
    }
  }
}",0.5520169851380042
71538,"public void testWordRecognize(){
  String str=""String_Node_Str"";
  DefaultWordRecognizer wr=new DefaultWordRecognizer(str);
  Word word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  str=""String_Node_Str"";
  wr=new DefaultWordRecognizer(str);
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  str=""String_Node_Str"";
  wr=new DefaultWordRecognizer(str);
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
}","public void testWordRecognize(){
  String str=""String_Node_Str"";
  DefaultWordRecognizer wr=new DefaultWordRecognizer(str);
  Word word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  str=""String_Node_Str"";
  wr=new DefaultWordRecognizer(str);
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  str=""String_Node_Str"";
  wr=new DefaultWordRecognizer(str);
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  str=""String_Node_Str"";
  wr=new DefaultWordRecognizer(str);
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
  word=wr.getNextWord();
  assertTrue(""String_Node_Str"".equals(word.getValue()));
}",0.7752035065748278
71539,"private TextArea getNextTextArea(int maxLineWidth){
  if (null != wordVestige) {
    TextArea textArea=createTextArea(textContent,offset,lineBaseLevel,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,wordVestige);
    return textArea;
  }
  if (null != remainWord) {
    TextArea textArea=createTextArea(textContent,offset,lineBaseLevel,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,remainWord);
    remainWord=null;
    return textArea;
  }
  if (null == remainWords || !remainWords.hasWord()) {
    Chunk chunk=remainChunks.getNext();
    if (chunk == Chunk.HARD_LINE_BREAK) {
      FontHandler handler=new FontHandler(fontManager,textContent,false);
      TextArea textArea=(TextArea)AreaFactory.createTextArea(textContent,handler.getFontInfo(),true);
      textArea.setTextLength(1);
      hasLineBreak=true;
      return textArea;
    }
    fontInfo=chunk.getFontInfo();
    lineBaseLevel=chunk.getBaseLevel();
    runLevel=chunk.getRunLevel();
    remainWords=new WordRecognizerWrapper(chunk.getText(),locale);
  }
  TextArea textArea=createTextArea(textContent,offset,lineBaseLevel,runLevel,fontInfo);
  textArea.setMaxWidth(maxLineWidth);
  textArea.setWidth(0);
  addWordsIntoTextArea(textArea,remainWords);
  return textArea;
}","private TextArea getNextTextArea(int maxLineWidth){
  if (null != wordVestige) {
    TextArea textArea=createTextArea(textContent,offset,lineBaseLevel,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,wordVestige);
    return textArea;
  }
  if (null != remainWord) {
    TextArea textArea=createTextArea(textContent,offset,lineBaseLevel,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,remainWord);
    remainWord=null;
    return textArea;
  }
  if (null == remainWords || !remainWords.hasWord()) {
    Chunk chunk=remainChunks.getNext();
    if (chunk == Chunk.HARD_LINE_BREAK) {
      FontHandler handler=new FontHandler(fontManager,textContent,false);
      TextArea textArea=(TextArea)AreaFactory.createTextArea(textContent,handler.getFontInfo(),true);
      textArea.setTextLength(chunk.getLength());
      hasLineBreak=true;
      return textArea;
    }
    fontInfo=chunk.getFontInfo();
    lineBaseLevel=chunk.getBaseLevel();
    runLevel=chunk.getRunLevel();
    remainWords=new WordRecognizerWrapper(chunk.getText(),locale);
  }
  TextArea textArea=createTextArea(textContent,offset,lineBaseLevel,runLevel,fontInfo);
  textArea.setMaxWidth(maxLineWidth);
  textArea.setWidth(0);
  addWordsIntoTextArea(textArea,remainWords);
  return textArea;
}",0.9935158501440924
71540,"private Chunk buildChunk(){
  if (!fontSubstitution) {
    Chunk c=new Chunk(new String(chunkText),baseOffset,baseLevel,runLevel,fh.getFontInfo());
    chunkStartPos=chunkText.length;
    return c;
  }
  if (encounteredReturn) {
    encounteredReturn=false;
    chunkStartPos++;
    return Chunk.HARD_LINE_BREAK;
  }
  while (++currentPos < chunkText.length) {
    if (chunkText[currentPos] == '\n') {
      if (null == lastFontInfo) {
        chunkStartPos=currentPos + 1;
        return Chunk.HARD_LINE_BREAK;
      }
      encounteredReturn=true;
      Chunk c=new Chunk(new String(chunkText,chunkStartPos,currentPos - chunkStartPos),baseOffset + chunkStartPos,baseLevel,runLevel,lastFontInfo);
      chunkStartPos=currentPos;
      return c;
    }
    if (!fh.selectFont(chunkText[currentPos])) {
      chunkText[currentPos]=MISSING_CHAR;
    }
    if (fh.isFontChanged()) {
      if (null == lastFontInfo) {
        lastFontInfo=fh.getFontInfo();
        continue;
      }
      Chunk c=new Chunk(new String(chunkText,chunkStartPos,currentPos - chunkStartPos),baseOffset + chunkStartPos,baseLevel,runLevel,lastFontInfo);
      chunkStartPos=currentPos;
      lastFontInfo=fh.getFontInfo();
      return c;
    }
  }
  if (currentPos >= chunkText.length - 1) {
    Chunk c=new Chunk(new String(chunkText,chunkStartPos,chunkText.length - chunkStartPos),baseOffset + chunkStartPos,baseLevel,runLevel,lastFontInfo);
    chunkStartPos=currentPos + 1;
    return c;
  }
 else {
    return null;
  }
}","private Chunk buildChunk(){
  if (!fontSubstitution) {
    Chunk c=new Chunk(new String(chunkText),baseOffset,baseLevel,runLevel,fh.getFontInfo());
    chunkStartPos=chunkText.length;
    return c;
  }
  if (lineBreak != null) {
    Chunk result=lineBreak;
    lineBreak=null;
    chunkStartPos++;
    return result;
  }
  while (++currentPos < chunkText.length) {
    Chunk lineBreakChunk=processLineBreak();
    if (lineBreakChunk != null) {
      return lineBreakChunk;
    }
    if (!fh.selectFont(chunkText[currentPos])) {
      chunkText[currentPos]=MISSING_CHAR;
    }
    if (fh.isFontChanged()) {
      if (null == lastFontInfo) {
        lastFontInfo=fh.getFontInfo();
        continue;
      }
      Chunk c=new Chunk(new String(chunkText,chunkStartPos,currentPos - chunkStartPos),baseOffset + chunkStartPos,baseLevel,runLevel,lastFontInfo);
      chunkStartPos=currentPos;
      lastFontInfo=fh.getFontInfo();
      return c;
    }
  }
  if (currentPos >= chunkText.length - 1) {
    Chunk c=new Chunk(new String(chunkText,chunkStartPos,chunkText.length - chunkStartPos),baseOffset + chunkStartPos,baseLevel,runLevel,lastFontInfo);
    chunkStartPos=currentPos + 1;
    return c;
  }
 else {
    return null;
  }
}",0.7853211009174312
71541,"public Word getNextWord(){
  lastWord=currentWord;
  if (start > text.length() - 1) {
    return null;
  }
  for (int i=start; i < text.length(); i++) {
    Character c=new Character(text.charAt(i));
    if (excludedSplitChars.contains(c)) {
      currentWord=new Word(text,start,i + 1);
      start=i + 1;
      return currentWord;
    }
 else     if (includedSplitChars.contains(c)) {
      if (i == start) {
        currentWord=new Word(text,start,i + 1);
        start=i + 1;
        return currentWord;
      }
 else {
        currentWord=new Word(text,start,i);
        start=i;
        return currentWord;
      }
    }
  }
  currentWord=new Word(text,start,text.length());
  start=text.length();
  return currentWord;
}","public Word getNextWord(){
  lastWord=currentWord;
  if (start > text.length() - 1) {
    return null;
  }
  for (int i=start; i < text.length(); i++) {
    char c=text.charAt(i);
    if (c == SPACE) {
      currentWord=new Word(text,start,i + 1);
      start=i + 1;
      return currentWord;
    }
 else {
      int lineBreakLength=getLineBreakLength(text,i);
      if (lineBreakLength == 0)       continue;
      if (i == start) {
        currentWord=new Word(text,start,i + lineBreakLength);
        start=i + lineBreakLength;
        return currentWord;
      }
 else {
        currentWord=new Word(text,start,i);
        start=i;
        return currentWord;
      }
    }
  }
  currentWord=new Word(text,start,text.length());
  start=text.length();
  return currentWord;
}",0.226063829787234
71542,"public void defineCube(CubeHandle cubeHandle) throws BirtException {
  Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
  Iterator itr=involvedDataSets.iterator();
  while (itr.hasNext()) {
    DataSetHandle dsHandle=(DataSetHandle)itr.next();
    BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
    BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
    if (baseDataSource != null)     this.defineDataSource(baseDataSource);
    this.defineDataSet(baseDataSet);
  }
  if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
    this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
  }
}","public void defineCube(CubeHandle cubeHandle) throws BirtException {
  Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
  Iterator itr=involvedDataSets.iterator();
  while (itr.hasNext()) {
    DataSetHandle dsHandle=(DataSetHandle)itr.next();
    BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
    BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
    if (baseDataSource != null && this.dataEngine.getDataSourceRuntime(baseDataSource.getName()) == null)     this.defineDataSource(baseDataSource);
    if (this.dataEngine.getDataSetDesign(baseDataSet.getName()) == null)     this.defineDataSet(baseDataSet);
    this.defineDataSet(baseDataSet);
  }
  if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
    this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
  }
}",0.8754716981132076
71543,"private void gendoc(IAction action){
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  options.put(WebViewer.SERVLET_NAME_KEY,WebViewer.VIEWER_DOCUMENT);
  Object adapter=ElementAdapterManager.getAdapter(action,IPreviewAction.class);
  if (adapter instanceof IPreviewAction) {
    IPreviewAction delegate=(IPreviewAction)adapter;
    delegate.setProperty(IPreviewConstants.REPORT_PREVIEW_OPTIONS,options);
    delegate.setProperty(IPreviewConstants.REPORT_FILE_PATH,model.getFileName());
    delegate.run();
    return;
  }
  WebViewer.display(model.getFileName(),options);
}","private void gendoc(IAction action){
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  options.put(WebViewer.SERVLET_NAME_KEY,WebViewer.VIEWER_DOCUMENT);
  Object adapter=ElementAdapterManager.getAdapter(action,IPreviewAction.class);
  if (adapter instanceof IPreviewAction) {
    IPreviewAction delegate=(IPreviewAction)adapter;
    delegate.setProperty(IPreviewConstants.REPORT_PREVIEW_OPTIONS,options);
    delegate.setProperty(IPreviewConstants.REPORT_FILE_PATH,model.getFileName());
    delegate.run();
    return;
  }
  WebViewer.display(model.getFileName(),options);
}",0.9026275115919628
71544,"protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  return true;
}","protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  return true;
}",0.5013192612137203
71545,"protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  return true;
}","protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  return true;
}",0.5013192612137203
71546,"public void run(IAction action){
  IFile file=getSelectedFile();
  if (file != null) {
    String url=file.getLocation().toOSString();
    Map options=new HashMap();
    options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder(file.getProject()));
    options.put(WebViewer.SERVLET_NAME_KEY,WebViewer.VIEWER_DOCUMENT);
    Object adapter=ElementAdapterManager.getAdapter(action,IPreviewAction.class);
    if (adapter instanceof IPreviewAction) {
      IPreviewAction delegate=(IPreviewAction)adapter;
      delegate.setProperty(IPreviewConstants.REPORT_PREVIEW_OPTIONS,options);
      delegate.setProperty(IPreviewConstants.REPORT_FILE_PATH,url);
      delegate.run();
      return;
    }
    try {
      WebViewer.display(url,options);
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
      return;
    }
  }
 else {
    action.setEnabled(false);
  }
}","public void run(IAction action){
  if (!preGenerate()) {
    return;
  }
  IFile file=getSelectedFile();
  if (file != null) {
    String url=file.getLocation().toOSString();
    Map options=new HashMap();
    options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder(file.getProject()));
    options.put(WebViewer.SERVLET_NAME_KEY,WebViewer.VIEWER_DOCUMENT);
    Object adapter=ElementAdapterManager.getAdapter(action,IPreviewAction.class);
    if (adapter instanceof IPreviewAction) {
      IPreviewAction delegate=(IPreviewAction)adapter;
      delegate.setProperty(IPreviewConstants.REPORT_PREVIEW_OPTIONS,options);
      delegate.setProperty(IPreviewConstants.REPORT_FILE_PATH,url);
      delegate.run();
      return;
    }
    try {
      WebViewer.display(url,options);
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
      return;
    }
  }
 else {
    action.setEnabled(false);
  }
}",0.9782608695652174
71547,"protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  return true;
}","protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  return true;
}",0.5013192612137203
71548,"protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  return true;
}","protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  return true;
}",0.5013192612137203
71549,"/** 
 * Refresh swt browser
 */
public void display(){
  String uri=getFileUri();
  if (uri != null && uri.length() > 0) {
    if (this.options == null) {
      this.options=new HashMap<String,String>();
      this.options.put(WebViewer.SERVLET_NAME_KEY,InputParameterHtmlDialog.VIEWER_RUN);
      this.options.put(WebViewer.FORMAT_KEY,WebViewer.HTML);
    }
    this.options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
    this.options.put(WebViewer.MAX_ROWS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
    this.options.put(WebViewer.MAX_CUBE_ROW_LEVELS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBEROWLEVEL));
    this.options.put(WebViewer.MAX_CUBE_COLUMN_LEVELS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL));
    String extKey=ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.APPCONTEXT_EXTENSION_KEY);
    if (extKey != null && extKey.length() > 0)     this.options.put(WebViewer.APPCONTEXT_EXTENSION_KEY,extKey);
    if (browser != null && !browser.isDisposed()) {
      WebViewer.display(uri,browser,this.options);
    }
 else {
      WebViewer.display(uri,this.options);
    }
  }
}","/** 
 * Refresh swt browser
 */
public void display(){
  String uri=getFileUri();
  if (uri != null && uri.length() > 0) {
    if (this.options == null) {
      this.options=new HashMap<String,String>();
      this.options.put(WebViewer.SERVLET_NAME_KEY,InputParameterHtmlDialog.VIEWER_RUN);
      this.options.put(WebViewer.FORMAT_KEY,WebViewer.HTML);
    }
    this.options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
    this.options.put(WebViewer.MAX_ROWS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
    this.options.put(WebViewer.MAX_CUBE_ROW_LEVELS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBEROWLEVEL));
    this.options.put(WebViewer.MAX_CUBE_COLUMN_LEVELS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL));
    String extKey=ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.APPCONTEXT_EXTENSION_KEY);
    if (extKey != null && extKey.length() > 0) {
      this.options.put(WebViewer.APPCONTEXT_EXTENSION_KEY,extKey);
    }
    System.setProperty(IPreviewConstants.MAX_DATASET_ROWS,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
    System.setProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBEROWLEVEL));
    System.setProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL));
    if (browser != null && !browser.isDisposed()) {
      WebViewer.display(uri,browser,this.options);
    }
 else {
      WebViewer.display(uri,this.options);
    }
  }
}",0.8449232778321907
71550,"/** 
 * @see org.eclipse.draw2d.Figure#paintFigure(Graphics)
 */
protected void paintFigure(Graphics graphics){
  if (isOpaque()) {
    if (getBorder() instanceof BaseBorder) {
      graphics.fillRectangle(getBounds().getCopy().crop(((BaseBorder)getBorder()).getBorderInsets()));
    }
 else {
      graphics.fillRectangle(getBounds());
    }
  }
  Image image=getImage();
  if (image == null) {
    return;
  }
  int x, y;
  Rectangle area=getClientArea();
  graphics.getClip(PRIVATE_RECT);
  if (position != null && position.x != -1) {
    x=area.x + position.x;
  }
 else {
switch (alignment & PositionConstants.EAST_WEST) {
case PositionConstants.EAST:
      x=area.x + area.width - size.width;
    break;
case PositionConstants.WEST:
  x=area.x;
break;
default :
x=(area.width - size.width) / 2 + area.x;
break;
}
}
if (position != null && position.y != -1) {
y=area.y + position.y;
}
 else {
switch (alignment & PositionConstants.NORTH_SOUTH) {
case PositionConstants.NORTH:
y=area.y;
break;
case PositionConstants.SOUTH:
y=area.y + area.height - size.height;
break;
default :
y=(area.height - size.height) / 2 + area.y;
break;
}
}
ArrayList xyList=createImageList(x,y);
Iterator iter=xyList.iterator();
while (iter.hasNext()) {
Point point=(Point)iter.next();
graphics.drawImage(image,point);
}
xyList.clear();
graphics.setClip(PRIVATE_RECT);
}","/** 
 * @see org.eclipse.draw2d.Figure#paintFigure(Graphics)
 */
protected void paintFigure(Graphics graphics){
  if (isOpaque()) {
    if (getBorder() instanceof BaseBorder) {
      graphics.fillRectangle(getBounds().getCopy().crop(((BaseBorder)getBorder()).getBorderInsets()));
    }
 else {
      graphics.fillRectangle(getBounds());
    }
  }
  Image image=getImage();
  if (image == null) {
    return;
  }
  int x, y;
  Rectangle area=getBounds();
  graphics.getClip(PRIVATE_RECT);
  if (position != null && position.x != -1) {
    x=area.x + position.x;
  }
 else {
switch (alignment & PositionConstants.EAST_WEST) {
case PositionConstants.EAST:
      x=area.x + area.width - size.width;
    break;
case PositionConstants.WEST:
  x=area.x;
break;
default :
x=(area.width - size.width) / 2 + area.x;
break;
}
}
if (position != null && position.y != -1) {
y=area.y + position.y;
}
 else {
switch (alignment & PositionConstants.NORTH_SOUTH) {
case PositionConstants.NORTH:
y=area.y;
break;
case PositionConstants.SOUTH:
y=area.y + area.height - size.height;
break;
default :
y=(area.height - size.height) / 2 + area.y;
break;
}
}
ArrayList xyList=createImageList(x,y);
Iterator iter=xyList.iterator();
while (iter.hasNext()) {
Point point=(Point)iter.next();
graphics.drawImage(image,point);
}
xyList.clear();
graphics.setClip(PRIVATE_RECT);
}",0.994069681245367
71551,"/** 
 * Returns iterator of all filters.
 * @return
 */
private Iterator<FilterConditionHandle> getFiltersIterator(){
  List<FilterConditionHandle> filterList=new ArrayList<FilterConditionHandle>();
  PropertyHandle ph=null;
  if (this.getBoundDataSet() == null && this.getReportItemReference() == null) {
    ph=ChartReportItemUtil.getBindingHolder(itemHandle).getPropertyHandle(ExtendedItemHandle.FILTER_PROP);
    if (ph != null) {
      Iterator<FilterConditionHandle> filterIterator=ph.iterator();
      if (filterIterator != null) {
        while (filterIterator.hasNext()) {
          FilterConditionHandle filter=filterIterator.next();
          if (filter.getValue1().indexOf(""String_Node_Str"") < 0 && filter.getValue2().indexOf(""String_Node_Str"") < 0) {
            filterList.add(filter);
          }
        }
      }
    }
  }
  ph=itemHandle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP);
  if (ph != null) {
    Iterator<FilterConditionHandle> filterIterator=ph.iterator();
    if (filterIterator != null) {
      while (filterIterator.hasNext()) {
        FilterConditionHandle filter=filterIterator.next();
        if (filter.getValue1().indexOf(""String_Node_Str"") < 0 && filter.getValue2().indexOf(""String_Node_Str"") < 0) {
          filterList.add(filter);
        }
      }
    }
  }
  return filterList.isEmpty() ? null : filterList.iterator();
}","/** 
 * Returns iterator of all filters.
 * @return
 */
private Iterator<FilterConditionHandle> getFiltersIterator(){
  List<FilterConditionHandle> filterList=new ArrayList<FilterConditionHandle>();
  PropertyHandle ph=null;
  if (this.getBoundDataSet() == null && this.getReportItemReference() == null) {
    ph=ChartReportItemUtil.getBindingHolder(itemHandle).getPropertyHandle(ExtendedItemHandle.FILTER_PROP);
    if (ph != null) {
      Iterator<FilterConditionHandle> filterIterator=ph.iterator();
      if (filterIterator != null) {
        while (filterIterator.hasNext()) {
          FilterConditionHandle filter=filterIterator.next();
          if ((filter.getValue1() == null || filter.getValue1().indexOf(""String_Node_Str"") < 0) && (filter.getValue2() == null || filter.getValue2().indexOf(""String_Node_Str"") < 0)) {
            filterList.add(filter);
          }
        }
      }
    }
  }
  ph=itemHandle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP);
  if (ph != null) {
    Iterator<FilterConditionHandle> filterIterator=ph.iterator();
    if (filterIterator != null) {
      while (filterIterator.hasNext()) {
        FilterConditionHandle filter=filterIterator.next();
        if ((filter.getValue1() == null || filter.getValue1().indexOf(""String_Node_Str"") < 0) && (filter.getValue2() == null || filter.getValue2().indexOf(""String_Node_Str"") < 0)) {
          filterList.add(filter);
        }
      }
    }
  }
  return filterList.isEmpty() ? null : filterList.iterator();
}",0.9554006968641114
71552,"protected AbstractGuideHandle createGuideHandle(){
  TableGuideHandle handle=new TableGuideHandle(this);
  handle.setIndicatorLabel(getGuideLabel());
  handle.setIndicatorIcon(ProviderFactory.createProvider(getModel()).getNodeIcon(getModel()));
  return handle;
}","protected AbstractGuideHandle createGuideHandle(){
  TableGuideHandle handle=new TableGuideHandle(this);
  handle.setIndicatorLabel(getGuideLabel());
  INodeProvider provider=ProviderFactory.createProvider(getModel());
  handle.setIndicatorIcon(provider.getNodeIcon(getModel()));
  handle.setToolTip(ReportFigureUtilities.createToolTipFigure(provider.getNodeTooltip(getModel()),DesignChoiceConstants.BIDI_DIRECTION_LTR,DesignChoiceConstants.TEXT_ALIGN_LEFT));
  return handle;
}",0.6450742240215924
71553,"/** 
 * Returns the border style.
 * @param obj
 * @return
 */
protected int getBorderStyle(Object obj){
  Integer retValue=(Integer)(styleMap.get(obj));
  if (retValue == null) {
    return SWT.LINE_SOLID;
  }
  return retValue.intValue();
}","/** 
 * Returns the border style.
 * @param obj
 * @return
 */
protected int getBorderStyle(Object obj){
  Integer retValue=styleMap.get(obj);
  if (retValue == null) {
    return SWT.LINE_SOLID;
  }
  return retValue.intValue();
}",0.9175475687103594
71554,"/** 
 * Returns the border width as pixel.
 * @param obj
 * @return
 */
protected int getBorderWidth(Object obj){
  if (obj instanceof String) {
    String[] rt=DEUtil.splitString((String)obj);
    if (rt[0] != null && DEUtil.isValidNumber(rt[0])) {
      double w=DEUtil.convertoToPixel(new DimensionValue(Double.parseDouble(rt[0]),rt[1]));
      if (w <= EPS) {
        return 0;
      }
      return Math.max(1,(int)w);
    }
  }
  Integer retValue=(Integer)(widthMap.get(obj));
  if (retValue == null) {
    return 1;
  }
  return retValue.intValue();
}","/** 
 * Returns the border width as pixel.
 * @param obj
 * @return
 */
protected int getBorderWidth(Object obj){
  Integer retValue=widthMap.get(obj);
  if (retValue != null) {
    return retValue.intValue();
  }
  retValue=commonCacheWidthMap.get(obj);
  if (retValue != null) {
    return retValue.intValue();
  }
  if (obj instanceof String) {
    String[] rt=DEUtil.splitString((String)obj);
    if (rt[0] != null && DEUtil.isValidNumber(rt[0])) {
      double w=DEUtil.convertoToPixel(new DimensionValue(Double.parseDouble(rt[0]),rt[1]));
      if (w <= EPS) {
        return 0;
      }
      int cw=Math.max(1,(int)w);
      commonCacheWidthMap.put((String)obj,cw);
      return cw;
    }
  }
  return 1;
}",0.6913385826771653
71555,"protected Control createDialogArea(Composite parent){
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  cmpContent.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout glGeneral=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  cmpGeneral=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_BOTH);
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  Label lblStartColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLStartColor=new GridData();
  lblStartColor.setLayoutData(gdLBLStartColor);
  lblStartColor.setText(Messages.getString(""String_Node_Str""));
  fccStartColor=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,gCurrent.getStartColor(),false,false);
  GridData gdFCCStartColor=new GridData(GridData.FILL_HORIZONTAL);
  fccStartColor.setLayoutData(gdFCCStartColor);
  fccStartColor.addListener(this);
  Label lblEndColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLEndColor=new GridData();
  lblEndColor.setLayoutData(gdLBLEndColor);
  lblEndColor.setText(Messages.getString(""String_Node_Str""));
  fccEndColor=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,gCurrent.getEndColor(),false,false);
  GridData gdFCCEndColor=new GridData(GridData.FILL_HORIZONTAL);
  fccEndColor.setLayoutData(gdFCCEndColor);
  fccEndColor.addListener(this);
  Label lblDummy=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLDummy=new GridData(GridData.FILL_BOTH);
  lblDummy.setLayoutData(gdLBLDummy);
  if (bSupportAngle) {
    createRotationPanel();
  }
  Group grpPreview=new Group(cmpContent,SWT.NONE);
  GridData gdGRPPreview=new GridData(GridData.FILL_BOTH);
  gdGRPPreview.horizontalSpan=2;
  grpPreview.setLayoutData(gdGRPPreview);
  grpPreview.setLayout(new FillLayout());
  grpPreview.setText(Messages.getString(""String_Node_Str""));
  cnvPreview=new FillCanvas(grpPreview,SWT.NO_FOCUS);
  cnvPreview.setFill(gCurrent);
  return cmpContent;
}","protected Control createDialogArea(Composite parent){
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  cmpContent.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout glGeneral=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  cmpGeneral=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_BOTH);
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  Label lblStartColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLStartColor=new GridData();
  lblStartColor.setLayoutData(gdLBLStartColor);
  lblStartColor.setText(Messages.getString(""String_Node_Str""));
  fccStartColor=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,gCurrent.getStartColor(),false,false);
  GridData gdFCCStartColor=new GridData(GridData.FILL_HORIZONTAL);
  fccStartColor.setLayoutData(gdFCCStartColor);
  fccStartColor.addListener(this);
  Label lblEndColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLEndColor=new GridData();
  lblEndColor.setLayoutData(gdLBLEndColor);
  lblEndColor.setText(Messages.getString(""String_Node_Str""));
  fccEndColor=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,gCurrent.getEndColor(),false,false);
  GridData gdFCCEndColor=new GridData(GridData.FILL_HORIZONTAL);
  fccEndColor.setLayoutData(gdFCCEndColor);
  fccEndColor.addListener(this);
  if (bSupportAngle) {
    createRotationPanel();
  }
  Group grpPreview=new Group(cmpGeneral,SWT.NONE);
  GridData gdGRPPreview=new GridData(GridData.FILL_BOTH);
  gdGRPPreview.horizontalSpan=2;
  grpPreview.setLayoutData(gdGRPPreview);
  grpPreview.setLayout(new FillLayout());
  grpPreview.setText(Messages.getString(""String_Node_Str""));
  cnvPreview=new FillCanvas(grpPreview,SWT.NO_FOCUS);
  cnvPreview.setFill(gCurrent);
  return cmpContent;
}",0.9230769230769232
71556,"protected Control createContents(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_COLOR_GRADIENT);
  getShell().setText(Messages.getString(""String_Node_Str""));
  getShell().setSize(420,320);
  UIHelper.centerOnScreen(getShell());
  return super.createContents(parent);
}","protected Control createContents(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_COLOR_GRADIENT);
  getShell().setText(Messages.getString(""String_Node_Str""));
  getShell().setSize(300,350);
  UIHelper.centerOnScreen(getShell());
  return super.createContents(parent);
}",0.98989898989899
71557,"private void createRotationPanel(){
  GridLayout glRotation=new GridLayout();
  glRotation.verticalSpacing=2;
  glRotation.marginHeight=2;
  glRotation.marginWidth=2;
  glRotation.numColumns=3;
  Group grpRotation=new Group(cmpContent,SWT.NONE);
  GridData gdGRPRotation=new GridData(GridData.FILL_BOTH);
  gdGRPRotation.heightHint=180;
  grpRotation.setLayoutData(gdGRPRotation);
  grpRotation.setLayout(glRotation);
  grpRotation.setText(Messages.getString(""String_Node_Str""));
  ascRotation=new AngleSelectorComposite(grpRotation,SWT.BORDER,(int)gCurrent.getDirection(),Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));
  GridData gdASCRotation=new GridData(GridData.FILL_BOTH);
  gdASCRotation.horizontalSpan=1;
  gdASCRotation.verticalSpan=3;
  ascRotation.setLayoutData(gdASCRotation);
  ascRotation.setAngleChangeListener(this);
  iscRotation=new IntegerSpinControl(grpRotation,SWT.NONE,(int)gCurrent.getDirection());
  GridData gdISCRotation=new GridData(GridData.FILL_HORIZONTAL);
  gdISCRotation.horizontalSpan=2;
  iscRotation.setLayoutData(gdISCRotation);
  iscRotation.setMinimum(-90);
  iscRotation.setMaximum(90);
  iscRotation.setIncrement(1);
  iscRotation.addListener(this);
}","private void createRotationPanel(){
  GridLayout glRotation=new GridLayout();
  glRotation.verticalSpacing=2;
  glRotation.marginHeight=2;
  glRotation.marginWidth=2;
  Group grpRotation=new Group(cmpContent,SWT.NONE);
  GridData gdGRPRotation=new GridData(GridData.FILL_BOTH);
  gdGRPRotation.heightHint=180;
  grpRotation.setLayoutData(gdGRPRotation);
  grpRotation.setLayout(glRotation);
  grpRotation.setText(Messages.getString(""String_Node_Str""));
  iscRotation=new IntegerSpinControl(grpRotation,SWT.NONE,(int)gCurrent.getDirection());
  GridData gdISCRotation=new GridData(GridData.FILL_HORIZONTAL);
  iscRotation.setLayoutData(gdISCRotation);
  iscRotation.setMinimum(-90);
  iscRotation.setMaximum(90);
  iscRotation.setIncrement(1);
  iscRotation.addListener(this);
  ascRotation=new AngleSelectorComposite(grpRotation,SWT.BORDER,(int)gCurrent.getDirection(),Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));
  GridData gdASCRotation=new GridData(GridData.FILL_BOTH);
  gdASCRotation.verticalSpan=3;
  ascRotation.setLayoutData(gdASCRotation);
  ascRotation.setAngleChangeListener(this);
}",0.678245766391663
71558,"public ParameterHelper(ScalarParameterHandle parameter,Locale locale,TimeZone timezone){
  this.distinct=parameter.distinct();
  this.labelColumnName=getLabelColumnName(parameter);
  this.valueColumnName=getValueColumnName(parameter);
  this.valueType=parameter.getDataType();
  this.fixedOrder=parameter.isFixedOrder();
  this.alreadySorted=parameter.getSortByColumn() != null;
  String pattern=parameter.getPattern();
  this.converter=new ReportParameterConverter(pattern,ULocale.forLocale(locale),timezone);
  if (!fixedOrder && !alreadySorted) {
    boolean sortDirectionValue=""String_Node_Str"".equalsIgnoreCase(parameter.getSortDirection());
    boolean sortByLabel=""String_Node_Str"".equalsIgnoreCase(parameter.getSortBy());
    Comparator choiceComparator=new SelectionChoiceComparator(sortByLabel,pattern,sortDirectionValue,ULocale.forLocale(locale));
    this.comparator=new DistinctComparatorDecorator(choiceComparator,distinct);
  }
}","public ParameterHelper(ScalarParameterHandle parameter,Locale locale,TimeZone timezone){
  this.distinct=parameter.distinct();
  this.labelColumnName=getLabelColumnName(parameter);
  this.valueColumnName=getValueColumnName(parameter);
  this.valueType=parameter.getDataType();
  this.fixedOrder=parameter.isFixedOrder();
  this.alreadySorted=parameter.getSortByColumn() != null;
  String pattern=parameter.getPattern();
  this.converter=new ReportParameterConverter(null,ULocale.forLocale(locale),timezone);
  if (!fixedOrder && !alreadySorted) {
    boolean sortDirectionValue=""String_Node_Str"".equalsIgnoreCase(parameter.getSortDirection());
    boolean sortByLabel=""String_Node_Str"".equalsIgnoreCase(parameter.getSortBy());
    Comparator choiceComparator=new SelectionChoiceComparator(sortByLabel,pattern,sortDirectionValue,ULocale.forLocale(locale));
    this.comparator=new DistinctComparatorDecorator(choiceComparator,distinct);
  }
}",0.9941644562334218
71559,"/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  try {
    EngineConfig ec=new EngineConfig();
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)dataSetHandle.getModuleHandle()),dataSetHandle.getModuleHandle());
    DataRequestSession session=engineTask.getDataSession();
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(dataSetHandle.getRowFetchLimit()));
    engineTask.setAppContext(appContext);
    engineTask.run();
    session.refreshMetaData(dataSetHandle,holdEvent);
    engineTask.close();
    engine.destroy();
  }
 catch (  BirtException ex) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{ex});
  }
}","/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  try {
    if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
      EngineConfig ec=new EngineConfig();
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)dataSetHandle.getModuleHandle()),dataSetHandle.getModuleHandle());
      DataRequestSession session=engineTask.getDataSession();
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(dataSetHandle.getRowFetchLimit()));
      engineTask.setAppContext(appContext);
      engineTask.run();
      session.refreshMetaData(dataSetHandle,holdEvent);
      engineTask.close();
      engine.destroy();
    }
 else {
      DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
      DataRequestSession drSession=DataRequestSession.newSession(context);
      drSession.refreshMetaData(dataSetHandle,holdEvent);
      drSession.shutdown();
    }
  }
 catch (  BirtException ex) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{ex});
  }
}",0.8329862557267805
71560,"/** 
 * Prepare the binding for a query definition.
 * @param queryDefn
 * @return
 * @throws DataException
 */
public static IQueryDefinition populateBindings(IQueryDefinition queryDefn) throws DataException {
  try {
    List<String> reCalGroupNames=getReCalGroupNames(queryDefn,queryDefn.getQueryExecutionHints().getTargetGroupInstances());
    Iterator<IBinding> bindingIt=queryDefn.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=bindingIt.next();
      if (binding.getAggregatOns().size() == 0 || !reCalGroupNames.contains(binding.getAggregatOns().get(0))) {
        if (binding.getExpression() instanceof IScriptExpression && binding.getAggrFunction() == null) {
          String text=((IScriptExpression)binding.getExpression()).getText();
          if (ExpressionUtil.getColumnName(text) != null || ExpressionUtil.getColumnBindingName(text) != null)           continue;
          if (referToRecAggrBinding(queryDefn,reCalGroupNames,text))           continue;
        }
        String expr=ExpressionUtil.createJSDataSetRowExpression(constructNonReCalBindingDataSetName(binding.getBindingName()));
        binding.setExpression(new ScriptExpression(expr));
        binding.getAggregatOns().clear();
        binding.setAggrFunction(null);
      }
    }
    return queryDefn;
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * Prepare the binding for a query definition.
 * @param queryDefn
 * @return
 * @throws DataException
 */
public static IQueryDefinition populateBindings(IQueryDefinition queryDefn) throws DataException {
  try {
    List<String> reCalGroupNames=getReCalGroupNames(queryDefn,queryDefn.getQueryExecutionHints().getTargetGroupInstances());
    Iterator<IBinding> bindingIt=queryDefn.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=bindingIt.next();
      if (binding.getAggregatOns().size() == 0 || !reCalGroupNames.contains(binding.getAggregatOns().get(0))) {
        if (binding.getExpression() instanceof IScriptExpression && binding.getAggrFunction() == null) {
          String text=((IScriptExpression)binding.getExpression()).getText();
          if (ExpressionUtil.getColumnName(text) != null || ExpressionUtil.getColumnBindingName(text) == null)           continue;
          if (!referToRecAggrBinding(queryDefn,reCalGroupNames,text))           continue;
        }
        String expr=ExpressionUtil.createJSDataSetRowExpression(constructNonReCalBindingDataSetName(binding.getBindingName()));
        binding.setExpression(new ScriptExpression(expr));
        binding.getAggregatOns().clear();
        binding.setAggrFunction(null);
      }
    }
    return queryDefn;
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9695885509838998
71561,"protected IResultIterator executeOdiQuery(IEventHandler eventHandler,StopSign stopSign) throws DataException {
  try {
    RDLoad rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),engine.getContext(),new QueryResultInfo(realBasedQueryID,null,-1));
    DataSetResultSet dataSetResult=rdLoad.loadDataSetData();
    StreamManager manager=new StreamManager(engine.getContext(),new QueryResultInfo(queryDefn.getQueryResultsID(),null,0));
    if (PLSUtil.isPLSEnabled(queryDefn) && PLSUtil.needUpdateDataSet(queryDefn,manager)) {
      populatePLSDataSetData(eventHandler,stopSign,manager);
      dataSetResult.close();
      rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),engine.getContext(),new QueryResultInfo(realBasedQueryID,null,-1));
      dataSetResult=rdLoad.loadDataSetData();
    }
    IResultClass meta=dataSetResult.getResultClass();
    IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(meta),dataSetResult,eventHandler,engine.getSession(),stopSign);
    dataSetResult.close();
    return resultIterator;
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","protected IResultIterator executeOdiQuery(IEventHandler eventHandler,StopSign stopSign) throws DataException {
  try {
    RDLoad rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),engine.getContext(),new QueryResultInfo(realBasedQueryID,null,-1));
    DataSetResultSet dataSetResult=rdLoad.loadDataSetData();
    StreamManager manager=new StreamManager(engine.getContext(),new QueryResultInfo(queryDefn.getQueryResultsID(),null,0));
    if (PLSUtil.isPLSEnabled(queryDefn) && PLSUtil.needUpdateDataSet(queryDefn,manager)) {
      if (engine.getContext().getDocWriter() != null) {
        populatePLSDataSetData(eventHandler,stopSign,manager);
        dataSetResult.close();
        rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),engine.getContext(),new QueryResultInfo(realBasedQueryID,null,-1));
        dataSetResult=rdLoad.loadDataSetData();
      }
 else {
        org.eclipse.birt.data.engine.impl.document.ResultIterator docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator(engine.getSession().getTempDir(),engine.getContext(),null,queryDefn.getQueryResultsID());
        PLSEnabledDataSetPopulator populator=new PLSEnabledDataSetPopulator(queryDefn,queryDefn.getQueryExecutionHints().getTargetGroupInstances(),docIt);
        IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(populator.getResultClass()),populator,eventHandler,engine.getSession(),stopSign);
        dataSetResult.close();
        return resultIterator;
      }
    }
    IResultClass meta=dataSetResult.getResultClass();
    IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(meta),dataSetResult,eventHandler,engine.getSession(),stopSign);
    dataSetResult.close();
    return resultIterator;
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.7665995975855131
71562,"/** 
 * Directly drop stream
 * @param streamPath
 */
public void dropStream(String streamPath){
  if (writer != null)   writer.dropStream(streamPath);
}","/** 
 * Directly drop stream
 * @param streamPath
 */
public void dropStream(String streamPath){
  if (writer != null) {
    try {
      OutputStream stream=writer.createRandomAccessStream(streamPath);
      stream.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.6488888888888888
71563,"protected IResultIterator executeOdiQuery(IEventHandler eventHandler,StopSign stopSign) throws DataException {
  RDLoad rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),engine.getContext(),new QueryResultInfo(realBasedQueryID,null,-1));
  DataSetResultSet dataSetResult=rdLoad.loadDataSetData();
  IResultClass meta=dataSetResult.getResultClass();
  IResultIterator resultIterator=null;
  if (PLSUtil.isPLSEnabled(queryDefn)) {
    org.eclipse.birt.data.engine.impl.document.ResultIterator docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator(engine.getSession().getTempDir(),engine.getContext(),null,queryDefn.getQueryResultsID());
    PLSEnabledDataSetPopulator populator=new PLSEnabledDataSetPopulator(queryDefn,queryDefn.getQueryExecutionHints().getTargetGroupInstances(),docIt);
    resultIterator=new CachedResultSet(query,populateResultClass(populator.getResultClass()),populator,eventHandler,engine.getSession(),stopSign);
  }
 else {
    resultIterator=new CachedResultSet(query,populateResultClass(meta),dataSetResult,eventHandler,engine.getSession(),stopSign);
  }
  dataSetResult.close();
  return resultIterator;
}","protected IResultIterator executeOdiQuery(IEventHandler eventHandler,StopSign stopSign) throws DataException {
  try {
    RDLoad rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),engine.getContext(),new QueryResultInfo(realBasedQueryID,null,-1));
    DataSetResultSet dataSetResult=rdLoad.loadDataSetData();
    StreamManager manager=new StreamManager(engine.getContext(),new QueryResultInfo(queryDefn.getQueryResultsID(),null,0));
    if (PLSUtil.isPLSEnabled(queryDefn) && PLSUtil.needUpdateDataSet(queryDefn,manager)) {
      populatePLSDataSetData(eventHandler,stopSign,manager);
      dataSetResult.close();
      rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),engine.getContext(),new QueryResultInfo(realBasedQueryID,null,-1));
      dataSetResult=rdLoad.loadDataSetData();
    }
    IResultClass meta=dataSetResult.getResultClass();
    IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(meta),dataSetResult,eventHandler,engine.getSession(),stopSign);
    dataSetResult.close();
    return resultIterator;
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.3282409428197294
71564,"public void handleEvent(Event event){
switch (event.type) {
case SWT.Selection:
    cnvCells.selectColumn(btnHeaders.indexOf(event.widget));
  break;
case SWT.KeyDown:
if (event.keyCode == SWT.ARROW_LEFT || event.keyCode == SWT.ARROW_RIGHT) {
  scrollTable(cnvCells.getHorizontalBar(),event);
}
 else if (event.keyCode == SWT.ARROW_UP || event.keyCode == SWT.ARROW_DOWN) {
  scrollTable(cnvCells.getVerticalBar(),event);
}
break;
case SWT.FocusIn:
iColumnIndex=btnHeaders.indexOf(event.widget);
Event newEvent=new Event();
newEvent.widget=event.widget;
newEvent.type=FOCUS_IN;
newEvent.data=new Integer(iColumnIndex);
fireEvent(newEvent);
break;
}
}","public void handleEvent(Event event){
switch (event.type) {
case SWT.Selection:
    cnvCells.selectColumn(btnHeaders.indexOf(event.widget));
  break;
case SWT.FocusIn:
iColumnIndex=btnHeaders.indexOf(event.widget);
Event newEvent=new Event();
newEvent.widget=event.widget;
newEvent.type=FOCUS_IN;
newEvent.data=new Integer(iColumnIndex);
fireEvent(newEvent);
break;
}
}",0.724950884086444
71565,"private void addHeaderButton(int style,ColumnBindingInfo columnHeader,int iWidth,int index){
  Button btnHeader=new Button(cmpHeaders,style);
  btnHeader.setText(columnHeader.getName());
  if (columnHeader.getImageName() != null) {
    btnHeader.setImage(UIHelper.getImage(columnHeader.getImageName()));
  }
  if (columnHeader.getTooltip() != null) {
    btnHeader.setToolTipText(columnHeader.getTooltip());
  }
  FormData fd=new FormData();
  fd.top=new FormAttachment(2);
  int i=btnHeaders.size();
  if (i == 0) {
    fd.left=new FormAttachment(0);
  }
 else {
    Button btnNeighbor=btnHeaders.get(i - 1);
    fd.left=new FormAttachment(btnNeighbor,SPLITTER_WIDTH);
  }
  int defaultWidth=iWidth - SPLITTER_WIDTH;
  int preferWidth=btnHeader.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
  if (preferWidth > defaultWidth) {
    fd.width=preferWidth;
    columnWidths.remove(index);
    columnWidths.add(index,new Integer(preferWidth + SPLITTER_WIDTH));
  }
 else {
    fd.width=defaultWidth;
  }
  int h=ChartUIUtil.getImageButtonDefaultHeightByPlatform();
  if (h > 0) {
    fd.height=h;
  }
  btnHeader.setLayoutData(fd);
  btnHeader.setVisible(true);
  btnHeader.addListener(SWT.Selection,headerButtonListener);
  btnHeader.addListener(SWT.KeyDown,headerButtonListener);
  btnHeader.addListener(SWT.FocusIn,headerButtonListener);
  btnHeader.addMouseListener(this);
  btnHeader.addMouseMoveListener(this);
  addDragListenerToHeaderButton(btnHeader);
  btnHeaders.add(btnHeader);
  addHeaderSplitter();
}","private void addHeaderButton(int style,ColumnBindingInfo columnHeader,int iWidth,int index){
  Button btnHeader=new Button(cmpHeaders,style);
  btnHeader.setText(columnHeader.getName());
  if (columnHeader.getImageName() != null) {
    btnHeader.setImage(UIHelper.getImage(columnHeader.getImageName()));
  }
  if (columnHeader.getTooltip() != null) {
    btnHeader.setToolTipText(columnHeader.getTooltip());
  }
  FormData fd=new FormData();
  fd.top=new FormAttachment(2);
  int i=btnHeaders.size();
  if (i == 0) {
    fd.left=new FormAttachment(0);
  }
 else {
    Button btnNeighbor=btnHeaders.get(i - 1);
    fd.left=new FormAttachment(btnNeighbor,SPLITTER_WIDTH);
  }
  int defaultWidth=iWidth - SPLITTER_WIDTH;
  int preferWidth=btnHeader.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
  if (preferWidth > defaultWidth) {
    fd.width=preferWidth;
    columnWidths.remove(index);
    columnWidths.add(index,new Integer(preferWidth + SPLITTER_WIDTH));
  }
 else {
    fd.width=defaultWidth;
  }
  int h=ChartUIUtil.getImageButtonDefaultHeightByPlatform();
  if (h > 0) {
    fd.height=h;
  }
  btnHeader.setLayoutData(fd);
  btnHeader.setVisible(true);
  btnHeader.addListener(SWT.Selection,headerButtonListener);
  btnHeader.addKeyListener(this);
  btnHeader.addTraverseListener(traverseListener);
  btnHeader.addListener(SWT.FocusIn,headerButtonListener);
  btnHeader.addMouseListener(this);
  btnHeader.addMouseMoveListener(this);
  addDragListenerToHeaderButton(btnHeader);
  btnHeaders.add(btnHeader);
  addHeaderSplitter();
}",0.975609756097561
71566,"private void scrollTable(ScrollBar widget,Event event){
  int newSelectionValue=widget.getSelection();
  if (event.keyCode == SWT.ARROW_LEFT) {
    newSelectionValue-=TableCanvas.SCROLL_HORIZONTAL_STEP;
  }
 else   if (event.keyCode == SWT.ARROW_RIGHT) {
    newSelectionValue+=TableCanvas.SCROLL_HORIZONTAL_STEP;
  }
 else   if (event.keyCode == SWT.ARROW_UP) {
    newSelectionValue-=1;
  }
 else   if (event.keyCode == SWT.ARROW_DOWN) {
    newSelectionValue+=1;
  }
  if (newSelectionValue < widget.getMinimum()) {
    newSelectionValue=widget.getMinimum();
  }
 else   if (newSelectionValue > widget.getMaximum()) {
    newSelectionValue=widget.getMaximum();
  }
  widget.setSelection(newSelectionValue);
  Event newEvent=new Event();
  newEvent.widget=widget;
  newEvent.type=SWT.Selection;
  newEvent.data=event.data;
  widget.notifyListeners(SWT.Selection,newEvent);
}","private void scrollTable(ScrollBar widget,KeyEvent event){
  int newSelectionValue=widget.getSelection();
  if (event.keyCode == SWT.ARROW_LEFT) {
    newSelectionValue-=TableCanvas.SCROLL_HORIZONTAL_STEP;
  }
 else   if (event.keyCode == SWT.ARROW_RIGHT) {
    newSelectionValue+=TableCanvas.SCROLL_HORIZONTAL_STEP;
  }
 else   if (event.keyCode == SWT.PAGE_UP || event.keyCode == SWT.ARROW_UP) {
    newSelectionValue-=1;
  }
 else   if (event.keyCode == SWT.PAGE_DOWN || event.keyCode == SWT.ARROW_DOWN) {
    newSelectionValue+=1;
  }
  if (newSelectionValue < widget.getMinimum()) {
    newSelectionValue=widget.getMinimum();
  }
 else   if (newSelectionValue > widget.getMaximum()) {
    newSelectionValue=widget.getMaximum();
  }
  widget.setSelection(newSelectionValue);
  Event newEvent=new Event();
  newEvent.widget=widget;
  newEvent.type=SWT.Selection;
  newEvent.data=event.data;
  widget.notifyListeners(SWT.Selection,newEvent);
}",0.9577155409115872
71567,"public IResultObject next() throws DataException {
  if (!this.populator.next())   return null;
  Object[] field=new Object[this.resultClass.getFieldCount()];
  int proceedField=this.originalBindingNames.size();
  for (int i=0; i < this.resultClass.getFieldCount() - proceedField; i++) {
    try {
      field[i]=this.populator.getDocumentIterator().getValue(datasetColumnNameBindingNameMapping.get(this.resultClass.getFieldName(i + 1)));
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
  for (int i=this.resultClass.getFieldCount() - proceedField; i < field.length; i++) {
    try {
      field[i]=this.populator.getDocumentIterator().getValue(this.originalBindingNames.get(i + proceedField - this.resultClass.getFieldCount()));
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
  return new ResultObject(this.resultClass,field);
}","public IResultObject next() throws DataException {
  if (!this.populator.next())   return null;
  Object[] field=new Object[this.resultClass.getFieldCount()];
  int proceedField=this.originalBindingNames.size();
  for (int i=0; i < this.resultClass.getFieldCount() - proceedField; i++) {
    try {
      field[i]=this.populator.getDocumentIterator().getValue(datasetColumnNameBindingNameMapping.get(this.resultClass.getFieldName(i + 1)));
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
  for (int i=this.resultClass.getFieldCount() - proceedField; i < field.length; i++) {
    try {
      String name=this.originalBindingNames.get(i + proceedField - this.resultClass.getFieldCount());
      if (name != null)       field[i]=this.populator.getDocumentIterator().getValue(name);
    }
 catch (    BirtException e) {
      this.originalBindingNames.set(i + proceedField - this.resultClass.getFieldCount(),null);
    }
  }
  return new ResultObject(this.resultClass,field);
}",0.8319327731092437
71568,"private String getSystemBirtHome(){
  return AccessController.doPrivileged(new PrivilegedAction<String>(){
    public String run(){
      String home=System.getProperty(IPlatformConfig.BIRT_HOME);
      if (home == null || home.isEmpty()) {
        return ""String_Node_Str"";
      }
      return home;
    }
  }
);
}","private String getSystemBirtHome(){
  return AccessController.doPrivileged(new PrivilegedAction<String>(){
    public String run(){
      String home=System.getProperty(IPlatformConfig.BIRT_HOME);
      if (home == null || ""String_Node_Str"".equals(home)) {
        return ""String_Node_Str"";
      }
      return home;
    }
  }
);
}",0.9475308641975309
71569,"public String run(){
  String home=System.getProperty(IPlatformConfig.BIRT_HOME);
  if (home == null || home.isEmpty()) {
    return ""String_Node_Str"";
  }
  return home;
}","public String run(){
  String home=System.getProperty(IPlatformConfig.BIRT_HOME);
  if (home == null || ""String_Node_Str"".equals(home)) {
    return ""String_Node_Str"";
  }
  return home;
}",0.9055555555555556
71570,"/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param items
 * @throws SemanticException
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws SemanticException {
  DataSessionContext context=null;
  try {
    context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
    DataRequestSession drSession=DataRequestSession.newSession(context);
    drSession.refreshMetaData(dataSetHandle,holdEvent);
    drSession.shutdown();
  }
 catch (  BirtException e) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{e});
  }
}","/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  try {
    EngineConfig ec=new EngineConfig();
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)dataSetHandle.getModuleHandle()),dataSetHandle.getModuleHandle());
    DataRequestSession session=engineTask.getDataSession();
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(dataSetHandle.getRowFetchLimit()));
    engineTask.setAppContext(appContext);
    engineTask.run();
    session.refreshMetaData(dataSetHandle,holdEvent);
    engineTask.close();
    engine.destroy();
  }
 catch (  BirtException ex) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{ex});
  }
}",0.4314903846153846
71571,"/** 
 * Testcase for test createTabItems() method
 */
public void testCreateTabItems(){
  Shell shell=new Shell();
  TabPageGenerator generator=new TabPageGenerator();
  generator.createControl(shell,new ArrayList());
  Control control=generator.getControl();
  if (control instanceof CTabFolder)   assertEquals(0,((CTabFolder)control).getItemCount());
}","/** 
 * Testcase for test createTabItems() method
 */
public void testCreateTabItems(){
  Shell shell=new Shell();
  TabPageGenerator generator=new TabPageGenerator();
  generator.createControl(shell,new ArrayList());
  Control control=generator.getControl();
  if (control instanceof CTabFolder)   assertEquals(0,((CTabFolder)control).getItemCount());
  shell.dispose();
}",0.9738651994497936
71572,"/** 
 * @return
 */
public String getFinderClassName(){
  IProject[] projects=getWorkspaceRoot().getProjects();
  if (projects == null || projects.length == 0) {
    return null;
  }
  IType[] types=new IType[0];
  try {
    types=findClasses(projects);
  }
 catch (  InterruptedException e) {
    return null;
  }
catch (  InvocationTargetException e) {
    return null;
  }
 finally {
  }
  Shell shell=getDefaultShell();
  SelectionDialog dialog=new HandlerClassSelectionDialog(shell,types);
  dialog.setTitle(DIALOG_TITLE);
  dialog.setMessage(DIALOG_MESSAGE);
  if (dialog.open() == Window.CANCEL) {
    return null;
  }
  Object[] results=dialog.getResult();
  if ((results == null) || (results.length < 1)) {
    return null;
  }
  IType type=(IType)results[0];
  if (type != null) {
    return type.getFullyQualifiedName('.');
  }
  return null;
}","/** 
 * @return
 */
public String getFinderClassName(){
  IProject[] projects=getWorkspaceRoot().getProjects();
  if (projects == null || projects.length == 0) {
    return null;
  }
  IType[] types=new IType[0];
  try {
    types=findClasses(projects);
  }
 catch (  InterruptedException e) {
    return null;
  }
catch (  InvocationTargetException e) {
    return null;
  }
 finally {
  }
  Shell shell=UIUtil.getDefaultShell();
  SelectionDialog dialog=new HandlerClassSelectionDialog(shell,types);
  dialog.setTitle(DIALOG_TITLE);
  dialog.setMessage(DIALOG_MESSAGE);
  if (dialog.open() == Window.CANCEL) {
    return null;
  }
  Object[] results=dialog.getResult();
  if ((results == null) || (results.length < 1)) {
    return null;
  }
  IType type=(IType)results[0];
  if (type != null) {
    return type.getFullyQualifiedName('.');
  }
  return null;
}",0.9959231217239372
71573,"private void createMainBrowser(){
  if (BrowserManager.getInstance().isEmbeddedBrowserPresent()) {
    if (browser != null && !browser.isDisposed()) {
      browser.dispose();
    }
    browser=new Browser(mainPane,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=1;
    browser.setLayoutData(gd);
    browser.addProgressListener(new ProgressListener(){
      public void changed(      ProgressEvent event){
      }
      public void completed(      ProgressEvent event){
        progressBar.setVisible(false);
      }
    }
);
    browser.addOpenWindowListener(new OpenWindowListener(){
      public void open(      final WindowEvent event){
        final Shell shell=new Shell();
        shell.setLayout(new FillLayout());
        Browser browser=new Browser(shell,SWT.NONE);
        initialize(Display.getCurrent(),browser);
        event.browser=browser;
        shell.open();
      }
    }
);
    browser.addCloseWindowListener(new CloseWindowListener(){
      public void close(      WindowEvent event){
        Display.getCurrent().asyncExec(new Runnable(){
          public void run(){
            createMainBrowser();
            mainPane.layout(true);
          }
        }
);
      }
    }
);
  }
 else {
    Composite control=new Composite(mainPane,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=1;
    control.setLayoutData(gd);
    bParameter.setEnabled(false);
    progressBar.setVisible(false);
    control.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    control.setLayout(new GridLayout());
    Label message=new Label(control,SWT.NONE);
    message.setText(Messages.getString(""String_Node_Str""));
    message.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  }
}","private void createMainBrowser(){
  if (BrowserManager.getInstance().isEmbeddedBrowserPresent()) {
    if (browser != null && !browser.isDisposed()) {
      browser.dispose();
    }
    browser=new Browser(mainPane,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=1;
    browser.setLayoutData(gd);
    browser.addProgressListener(new ProgressListener(){
      public void changed(      ProgressEvent event){
      }
      public void completed(      ProgressEvent event){
        progressBar.setVisible(false);
      }
    }
);
    browser.addOpenWindowListener(new OpenWindowListener(){
      public void open(      final WindowEvent event){
        final Shell shell=UIUtil.createDefaultShell();
        shell.setLayout(new FillLayout());
        Browser browser=new Browser(shell,SWT.NONE);
        initialize(Display.getCurrent(),browser);
        event.browser=browser;
        shell.open();
      }
    }
);
    browser.addCloseWindowListener(new CloseWindowListener(){
      public void close(      WindowEvent event){
        Display.getCurrent().asyncExec(new Runnable(){
          public void run(){
            createMainBrowser();
            mainPane.layout(true);
          }
        }
);
      }
    }
);
  }
 else {
    Composite control=new Composite(mainPane,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=1;
    control.setLayoutData(gd);
    bParameter.setEnabled(false);
    progressBar.setVisible(false);
    control.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    control.setLayout(new GridLayout());
    Label message=new Label(control,SWT.NONE);
    message.setText(Messages.getString(""String_Node_Str""));
    message.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  }
}",0.9933481152993348
71574,"/** 
 * initialize browser.
 * @param display Display
 * @param browser Browser
 * @return
 */
private static void initialize(final Display display,Browser browser){
  browser.addOpenWindowListener(new OpenWindowListener(){
    public void open(    final WindowEvent event){
      final Shell shell=new Shell();
      shell.setLayout(new FillLayout());
      Browser browser=new Browser(shell,SWT.NONE);
      initialize(display,browser);
      event.browser=browser;
      shell.open();
    }
  }
);
  browser.addTitleListener(new TitleListener(){
    public void changed(    TitleEvent event){
      if (event.title != null && event.title.length() > 0) {
        Browser browser=(Browser)event.widget;
        Shell shell=browser.getShell();
        shell.setText(event.title);
      }
    }
  }
);
}","/** 
 * initialize browser.
 * @param display Display
 * @param browser Browser
 * @return
 */
private static void initialize(final Display display,Browser browser){
  browser.addOpenWindowListener(new OpenWindowListener(){
    public void open(    final WindowEvent event){
      final Shell shell=UIUtil.createDefaultShell();
      shell.setLayout(new FillLayout());
      Browser browser=new Browser(shell,SWT.NONE);
      initialize(display,browser);
      event.browser=browser;
      shell.open();
    }
  }
);
  browser.addTitleListener(new TitleListener(){
    public void changed(    TitleEvent event){
      if (event.title != null && event.title.length() > 0) {
        Browser browser=(Browser)event.widget;
        Shell shell=browser.getShell();
        shell.setText(event.title);
      }
    }
  }
);
}",0.9851851851851852
71575,"public void open(final WindowEvent event){
  final Shell shell=new Shell();
  shell.setLayout(new FillLayout());
  Browser browser=new Browser(shell,SWT.NONE);
  initialize(display,browser);
  event.browser=browser;
  shell.open();
}","public void open(final WindowEvent event){
  final Shell shell=UIUtil.createDefaultShell();
  shell.setLayout(new FillLayout());
  Browser browser=new Browser(shell,SWT.NONE);
  initialize(display,browser);
  event.browser=browser;
  shell.open();
}",0.950207468879668
71576,"public SampleReportCanvas(Composite parent,int style){
  super(parent,style);
  addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent pe){
      SampleReportCanvas.this.paintControl(pe);
    }
  }
);
  addControlListener(new ControlListener(){
    public void controlMoved(    ControlEvent e){
    }
    public void controlResized(    ControlEvent e){
      SampleReportCanvas.this.controlResized(e);
    }
  }
);
}","public SampleReportCanvas(Composite parent,int style){
  super(parent,style);
  addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent pe){
      SampleReportCanvas.this.paintControl(pe);
    }
  }
);
  addControlListener(new ControlListener(){
    public void controlMoved(    ControlEvent e){
    }
    public void controlResized(    ControlEvent e){
      SampleReportCanvas.this.controlResized(e);
    }
  }
);
  addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      if (sampleImage != null && !sampleImage.isDisposed()) {
        sampleImage.dispose();
      }
    }
  }
);
}",0.8065693430656934
71577,"public void setValue(String name,boolean value){
  try {
    ((StyleHandle)model).setProperty(name,Boolean.valueOf(value));
  }
 catch (  SemanticException e) {
    hasError=true;
    WidgetUtil.processError(new Shell(),e);
  }
}","public void setValue(String name,boolean value){
  try {
    ((StyleHandle)model).setProperty(name,Boolean.valueOf(value));
  }
 catch (  SemanticException e) {
    hasError=true;
    WidgetUtil.processError(e);
  }
}",0.9730941704035876
71578,"private void createAggregateSection(Composite composite){
  new Label(composite,SWT.NONE).setText(FUNCTION);
  cmbFunction=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  cmbFunction.setLayoutData(gd);
  cmbFunction.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleFunctionSelectEvent();
      validate();
    }
  }
);
  paramsComposite=new Composite(composite,SWT.NONE);
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalIndent=0;
  gridData.horizontalSpan=3;
  gridData.exclude=true;
  paramsComposite.setLayoutData(gridData);
  GridLayout layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  layout.numColumns=3;
  paramsComposite.setLayout(layout);
  new Label(composite,SWT.NONE).setText(FILTER_CONDITION);
  txtFilter=new Text(composite,SWT.BORDER);
  txtFilter.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  createExpressionButton(composite,txtFilter);
  txtFilter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
    }
  }
);
  Label lblAggOn=new Label(composite,SWT.NONE);
  lblAggOn.setText(AGGREGATE_ON);
  gridData=new GridData();
  gridData.verticalAlignment=GridData.BEGINNING;
  lblAggOn.setLayoutData(gridData);
  Composite aggOnComposite=new Composite(composite,SWT.NONE);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=2;
  aggOnComposite.setLayoutData(gridData);
  layout=new GridLayout();
  layout.horizontalSpacing=layout.verticalSpacing=0;
  layout.marginWidth=layout.marginHeight=0;
  layout.numColumns=2;
  aggOnComposite.setLayout(layout);
  btnTable=new Button(aggOnComposite,SWT.RADIO);
  if (getBindingHolder() instanceof TableHandle)   btnTable.setText(TABLE);
 else   if (getBindingHolder() instanceof ListHandle)   btnTable.setText(LIST);
 else   if (getBindingHolder() instanceof GridHandle)   btnTable.setText(GRID);
  btnTable.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      cmbGroup.setEnabled(false);
    }
  }
);
  WidgetUtil.createGridPlaceholder(aggOnComposite,1,false);
  btnGroup=new Button(aggOnComposite,SWT.RADIO);
  btnGroup.setText(GROUP);
  btnGroup.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      cmbGroup.setEnabled(true);
    }
  }
);
  cmbGroup=new Combo(aggOnComposite,SWT.BORDER | SWT.READ_ONLY);
  cmbGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (isRef) {
    txtDisplayName.setEnabled(false);
    cmbType.setEnabled(false);
    cmbFunction.setEnabled(false);
    txtFilter.setEnabled(false);
    paramsComposite.setEnabled(false);
    cmbGroup.setEnabled(false);
    btnTable.setEnabled(false);
    btnGroup.setEnabled(false);
  }
}","protected void createAggregateSection(Composite composite){
  new Label(composite,SWT.NONE).setText(FUNCTION);
  cmbFunction=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  cmbFunction.setLayoutData(gd);
  cmbFunction.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleFunctionSelectEvent();
      validate();
    }
  }
);
  paramsComposite=new Composite(composite,SWT.NONE);
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalIndent=0;
  gridData.horizontalSpan=3;
  gridData.exclude=true;
  paramsComposite.setLayoutData(gridData);
  GridLayout layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  layout.numColumns=3;
  paramsComposite.setLayout(layout);
  new Label(composite,SWT.NONE).setText(FILTER_CONDITION);
  txtFilter=new Text(composite,SWT.BORDER);
  txtFilter.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  createExpressionButton(composite,txtFilter);
  txtFilter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
    }
  }
);
  Label lblAggOn=new Label(composite,SWT.NONE);
  lblAggOn.setText(AGGREGATE_ON);
  gridData=new GridData();
  gridData.verticalAlignment=GridData.BEGINNING;
  lblAggOn.setLayoutData(gridData);
  Composite aggOnComposite=new Composite(composite,SWT.NONE);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=2;
  aggOnComposite.setLayoutData(gridData);
  layout=new GridLayout();
  layout.horizontalSpacing=layout.verticalSpacing=0;
  layout.marginWidth=layout.marginHeight=0;
  layout.numColumns=2;
  aggOnComposite.setLayout(layout);
  btnTable=new Button(aggOnComposite,SWT.RADIO);
  if (getBindingHolder() instanceof TableHandle)   btnTable.setText(TABLE);
 else   if (getBindingHolder() instanceof ListHandle)   btnTable.setText(LIST);
 else   if (getBindingHolder() instanceof GridHandle)   btnTable.setText(GRID);
  btnTable.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      cmbGroup.setEnabled(false);
    }
  }
);
  WidgetUtil.createGridPlaceholder(aggOnComposite,1,false);
  btnGroup=new Button(aggOnComposite,SWT.RADIO);
  btnGroup.setText(GROUP);
  btnGroup.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      cmbGroup.setEnabled(true);
    }
  }
);
  cmbGroup=new Combo(aggOnComposite,SWT.BORDER | SWT.READ_ONLY);
  cmbGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (isRef) {
    txtDisplayName.setEnabled(false);
    cmbType.setEnabled(false);
    cmbFunction.setEnabled(false);
    txtFilter.setEnabled(false);
    paramsComposite.setEnabled(false);
    cmbGroup.setEnabled(false);
    btnTable.setEnabled(false);
    btnGroup.setEnabled(false);
  }
}",0.9980360065466448
71579,"public Object getAdapter(Object adaptableObject,Class adapterType){
  if (adapterType == IBindingDialogHelper.class && ChartReportItemUtil.isChartHandle(adaptableObject)) {
    if (ChartXTabUtil.getBindingCube((ExtendedItemHandle)adaptableObject) != null) {
      return new ChartCubeBindingDialogHelper();
    }
 else {
      return new BindingDialogHelper();
    }
  }
  return null;
}","public Object getAdapter(Object adaptableObject,Class adapterType){
  if (adapterType == IBindingDialogHelper.class && ChartReportItemUtil.isChartHandle(adaptableObject)) {
    if (ChartXTabUtil.getBindingCube((ExtendedItemHandle)adaptableObject) != null) {
      return new ChartCubeBindingDialogHelper();
    }
 else {
      return new ChartDataSetBindingDialogHelper();
    }
  }
  return null;
}",0.9847328244274808
71580,"public boolean hasNextArea(){
  if (textWrapping) {
    return offset < textContent.getText().length();
  }
 else {
    return !hasLineBreak;
  }
}","public boolean hasNextArea(){
  if (!textWrapping && hasLineBreak) {
    return false;
  }
  return offset < textContent.getText().length();
}",0.726643598615917
71581,"public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  if (description != null && description.length() > 0) {
    Label lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  Object[] predefinedQuery=context.getPredefinedQuery(queryType);
  if (predefinedQuery != null) {
    cmbDefinition=new CCombo(cmpTop,context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) ? SWT.READ_ONLY | SWT.BORDER : SWT.BORDER);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=80;
    gd.grabExcessHorizontalSpace=true;
    cmbDefinition.setLayoutData(gd);
    if (predefinedQuery.length > 0) {
      populateExprComboItems(predefinedQuery);
    }
 else     if (context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
      cmbDefinition.setEnabled(false);
    }
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
        if (cmbDefinition.getText().equals(oldQuery)) {
          return;
        }
        Object checkResult=context.getDataServiceProvider().checkData(queryType,cmbDefinition.getText());
        if (checkResult != null && checkResult instanceof Boolean) {
          if (!((Boolean)checkResult).booleanValue()) {
            WizardBase.showException(Messages.getString(""String_Node_Str""));
            cmbDefinition.setText(oldQuery);
            return;
          }
 else {
            WizardBase.removeException();
          }
        }
        updateQuery(cmbDefinition.getText());
        if (!oldQuery.equals(cmbDefinition.getText()) && queryType == ChartUIConstants.QUERY_VALUE) {
          if (context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE,cmbDefinition.getText())) {
            Event e=new Event();
            e.data=BaseDataDefinitionComponent.this;
            e.widget=cmbDefinition;
            e.type=IChartDataSheet.EVENT_QUERY;
            context.getDataSheet().notifyListeners(e);
          }
        }
        if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
      }
    }
);
    cmbDefinition.addModifyListener(this);
    cmbDefinition.addFocusListener(this);
    cmbDefinition.addKeyListener(this);
    initComboExprText();
  }
 else {
    txtDefinition=new Text(cmpTop,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    gdTXTDefinition.widthHint=80;
    gdTXTDefinition.grabExcessHorizontalSpace=true;
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (query != null && query.getDefinition() != null) {
      txtDefinition.setText(query.getDefinition());
      txtDefinition.setToolTipText(getTooltipForDataText(query.getDefinition()));
    }
    txtDefinition.addModifyListener(this);
    txtDefinition.addFocusListener(this);
    txtDefinition.addKeyListener(this);
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,this);
  btnBuilder=new Button(cmpTop,SWT.PUSH);
{
    GridData gdBTNBuilder=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNBuilder);
    btnBuilder.setLayoutData(gdBTNBuilder);
    btnBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnBuilder.addSelectionListener(this);
    btnBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnBuilder.getImage().setBackground(btnBuilder.getBackground());
    btnBuilder.setEnabled(context.getUIServiceProvider().isInvokingSupported());
    btnBuilder.setVisible(context.getUIServiceProvider().isEclipseModeSupported());
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  setColor();
  IDataServiceProvider provider=context.getDataServiceProvider();
  boolean isCubeNoMultiDimensions=(provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) && !provider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS);
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) || context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
    if (txtDefinition != null && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) {
      txtDefinition.setEnabled(false);
    }
    btnBuilder.setEnabled(false);
    if (btnGroup != null) {
      btnGroup.setEnabled(false);
    }
  }
  if (cmbDefinition != null && ChartUIConstants.QUERY_OPTIONAL.equals(queryType) && isCubeNoMultiDimensions) {
    cmbDefinition.setEnabled(false);
  }
  setTooltipForInputControl();
  return cmpTop;
}","public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  if (description != null && description.length() > 0) {
    Label lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  Object[] predefinedQuery=context.getPredefinedQuery(queryType);
  if (predefinedQuery != null) {
    cmbDefinition=new CCombo(cmpTop,context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) ? SWT.READ_ONLY | SWT.BORDER : SWT.BORDER);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=80;
    gd.grabExcessHorizontalSpace=true;
    cmbDefinition.setLayoutData(gd);
    if (predefinedQuery.length > 0) {
      populateExprComboItems(predefinedQuery);
    }
 else     if (context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
      cmbDefinition.setEnabled(false);
    }
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
        if (cmbDefinition.getText().equals(oldQuery)) {
          return;
        }
        Object checkResult=context.getDataServiceProvider().checkData(queryType,cmbDefinition.getText());
        if (checkResult != null && checkResult instanceof Boolean) {
          if (!((Boolean)checkResult).booleanValue()) {
            WizardBase.showException(Messages.getString(""String_Node_Str""));
            cmbDefinition.setText(oldQuery);
            return;
          }
 else {
            WizardBase.removeException();
          }
        }
        updateQuery(cmbDefinition.getText());
        if (!oldQuery.equals(cmbDefinition.getText()) && queryType == ChartUIConstants.QUERY_VALUE) {
          if (context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE,cmbDefinition.getText())) {
            Event e=new Event();
            e.data=BaseDataDefinitionComponent.this;
            e.widget=cmbDefinition;
            e.type=IChartDataSheet.EVENT_QUERY;
            context.getDataSheet().notifyListeners(e);
          }
        }
        if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
      }
    }
);
    cmbDefinition.addModifyListener(this);
    cmbDefinition.addFocusListener(this);
    cmbDefinition.addKeyListener(this);
    initComboExprText();
  }
 else {
    txtDefinition=new Text(cmpTop,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    gdTXTDefinition.widthHint=80;
    gdTXTDefinition.grabExcessHorizontalSpace=true;
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (query != null && query.getDefinition() != null) {
      txtDefinition.setText(query.getDefinition());
      txtDefinition.setToolTipText(getTooltipForDataText(query.getDefinition()));
    }
    txtDefinition.addModifyListener(this);
    txtDefinition.addFocusListener(this);
    txtDefinition.addKeyListener(this);
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,this);
  btnBuilder=new Button(cmpTop,SWT.PUSH);
{
    GridData gdBTNBuilder=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNBuilder);
    btnBuilder.setLayoutData(gdBTNBuilder);
    btnBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnBuilder.addSelectionListener(this);
    btnBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnBuilder.getImage().setBackground(btnBuilder.getBackground());
    btnBuilder.setEnabled(context.getUIServiceProvider().isInvokingSupported());
    btnBuilder.setVisible(context.getUIServiceProvider().isEclipseModeSupported());
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  setColor();
  IDataServiceProvider provider=context.getDataServiceProvider();
  boolean isCubeNoMultiDimensions=(provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) && !provider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS);
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) || context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
    if (txtDefinition != null && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) {
      txtDefinition.setEnabled(false);
    }
    btnBuilder.setEnabled(false);
    if (btnGroup != null) {
      btnGroup.setEnabled(false);
    }
  }
  if (cmbDefinition != null && ChartUIConstants.QUERY_OPTIONAL.equals(queryType) && isCubeNoMultiDimensions) {
    cmbDefinition.setEnabled(false);
    btnBuilder.setEnabled(false);
  }
  setTooltipForInputControl();
  return cmpTop;
}",0.9972673203665006
71582,"/** 
 * @param GEN_add_filter
 * @param GEN_add_group
 * @param qd
 * @throws BirtException
 */
private void _preBasicIV1(QueryDefinition qd) throws BirtException {
  IQueryResults qr=myPreDataEngine.prepare(qd).execute(null);
  IResultIterator ri=qr.getResultIterator();
  ri.moveTo(0);
  String abc=""String_Node_Str"";
  for (int i=0; i < rowExprName.length; i++)   abc+=rowExprName[i] + ""String_Node_Str"";
  for (int i=0; i < totalExprName.length; i++)   abc+=totalExprName[i] + ""String_Node_Str"";
  if (qd.getGroups().size() > 0) {
    abc+=""String_Node_Str"" + ""String_Node_Str"";
  }
  this.testPrintln(abc);
  do {
    abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    abc+=ri.getRowId();
    if (qd.getGroups().size() > 0) {
      abc+=""String_Node_Str"" + ri.getStartingGroupLevel() + ""String_Node_Str""+ ri.getEndingGroupLevel();
    }
    this.testPrintln(abc);
  }
 while (ri.next());
  ri.close();
  myPreDataEngine.shutdown();
}","/** 
 * @param GEN_add_filter
 * @param GEN_add_group
 * @param qd
 * @throws BirtException
 */
private void _preBasicIV1(QueryDefinition qd) throws BirtException {
  HashMap appContext=new HashMap();
  appContext.put(DataEngine.MEMORY_BUFFER_SIZE,10);
  IQueryResults qr=myPreDataEngine.prepare(qd,appContext).execute(null);
  IResultIterator ri=qr.getResultIterator();
  ri.moveTo(0);
  String abc=""String_Node_Str"";
  for (int i=0; i < rowExprName.length; i++)   abc+=rowExprName[i] + ""String_Node_Str"";
  for (int i=0; i < totalExprName.length; i++)   abc+=totalExprName[i] + ""String_Node_Str"";
  if (qd.getGroups().size() > 0) {
    abc+=""String_Node_Str"" + ""String_Node_Str"";
  }
  this.testPrintln(abc);
  do {
    abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    abc+=ri.getRowId();
    if (qd.getGroups().size() > 0) {
      abc+=""String_Node_Str"" + ri.getStartingGroupLevel() + ""String_Node_Str""+ ri.getEndingGroupLevel();
    }
    this.testPrintln(abc);
  }
 while (ri.next());
  ri.close();
  myPreDataEngine.shutdown();
}",0.9579617834394905
71583,"public IResultObject next() throws DataException {
}","public IResultObject next() throws DataException {
  if (!this.populator.next())   return null;
  Object[] field=new Object[this.resultClass.getFieldCount()];
  int proceedField=this.originalBindingNames.size();
  for (int i=0; i < this.resultClass.getFieldCount() - proceedField; i++) {
    try {
      field[i]=this.populator.getDocumentIterator().getValue(datasetColumnNameBindingNameMapping.get(this.resultClass.getFieldName(i + 1)));
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
  for (int i=this.resultClass.getFieldCount() - proceedField; i < field.length; i++) {
    try {
      field[i]=this.populator.getDocumentIterator().getValue(this.originalBindingNames.get(i + proceedField - this.resultClass.getFieldCount()));
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
  return new ResultObject(this.resultClass,field);
}",0.1094736842105263
71584,"/** 
 * @param query
 * @param targetGroups
 * @param original
 * @return
 * @throws BirtException
 */
private IResultClass populateResultClass(IQueryDefinition query,List<IGroupInstanceInfo> targetGroups,IResultClass original) throws BirtException {
  List<ResultFieldMetadata> list=new ArrayList<ResultFieldMetadata>();
  for (int i=1; i <= original.getFieldCount(); i++) {
    list.add(original.getFieldMetaData(i));
  }
  this.originalBindingNames=new ArrayList<String>();
  Iterator<IBinding> bindings=query.getBindings().values().iterator();
  while (bindings.hasNext()) {
    IBinding binding=bindings.next();
    if (PLSUtil.isPLSProcessedBinding(binding)) {
      ResultFieldMetadata rfmeta=new ResultFieldMetadata(-1,PLSUtil.constructNonReCalBindingDataSetName(binding.getBindingName()),null,DataType.getClass(binding.getDataType()),null,false);
      list.add(rfmeta);
      this.originalBindingNames.add(binding.getBindingName());
    }
  }
  return new ResultClass(list);
}","/** 
 * @param query
 * @param targetGroups
 * @param original
 * @return
 * @throws BirtException
 */
private IResultClass populateResultClass(IQueryDefinition query,List<IGroupInstanceInfo> targetGroups,IResultClass original) throws BirtException {
  List<ResultFieldMetadata> list=new ArrayList<ResultFieldMetadata>();
  for (int i=1; i <= original.getFieldCount(); i++) {
    list.add(original.getFieldMetaData(i));
  }
  this.originalBindingNames=new ArrayList<String>();
  this.datasetColumnNameBindingNameMapping=new HashMap<String,String>();
  Iterator<IBinding> bindings=query.getBindings().values().iterator();
  while (bindings.hasNext()) {
    IBinding binding=bindings.next();
    if (PLSUtil.isPLSProcessedBinding(binding)) {
      ResultFieldMetadata rfmeta=new ResultFieldMetadata(-1,PLSUtil.constructNonReCalBindingDataSetName(binding.getBindingName()),null,DataType.getClass(binding.getDataType()),null,false);
      list.add(rfmeta);
      this.originalBindingNames.add(binding.getBindingName());
    }
 else     if (binding.getExpression() instanceof IScriptExpression && (IScriptExpression)binding.getExpression() != null && binding.getAggrFunction() == null) {
      String name=ExpressionUtil.getColumnName(((IScriptExpression)binding.getExpression()).getText());
      if (name != null)       this.datasetColumnNameBindingNameMapping.put(name,binding.getBindingName());
    }
  }
  return new ResultClass(list);
}",0.8138671068922823
71585,"private void populateSeriesTypesList(){
  if (cbSeriesType == null) {
    return;
  }
  cbSeriesType.removeAll();
  Series series=getSeriesDefinitionForProcessing().getDesignTimeSeries();
  if (getCurrentChartType().canCombine()) {
    populateSeriesTypes(ChartUIExtensionsImpl.instance().getUIChartTypeExtensions(getContext().getClass().getSimpleName()),series,this.orientation);
  }
 else {
    String seriesName=series.getDisplayName();
    cbSeriesType.add(seriesName);
    cbSeriesType.select(0);
  }
  if (this.chartModel instanceof ChartWithAxes) {
    Axis xAxis=((Axis)((ChartWithAxes)chartModel).getAxes().get(0));
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastType=ChartCacheManager.getInstance().findSeriesType();
      if (lastType != null) {
        cbSeriesType.setText(lastType);
      }
 else {
        Axis overlayAxis=(Axis)xAxis.getAssociatedAxes().get(1);
        if (!overlayAxis.getSeriesDefinitions().isEmpty()) {
          String sDisplayName=((SeriesDefinition)overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries().getDisplayName();
          cbSeriesType.setText(sDisplayName);
        }
      }
      changeOverlaySeriesType();
    }
  }
}","private void populateSeriesTypesList(){
  if (cbSeriesType == null) {
    return;
  }
  cbSeriesType.removeAll();
  Series series=getSeriesDefinitionForProcessing().getDesignTimeSeries();
  if (getCurrentChartType().canCombine()) {
    populateSeriesTypes(ChartUIExtensionsImpl.instance().getUIChartTypeExtensions(getContext().getClass().getSimpleName()),series,this.orientation);
  }
 else {
    String seriesName=series.getDisplayName();
    cbSeriesType.add(seriesName);
    cbSeriesType.select(0);
  }
  if (this.chartModel instanceof ChartWithAxes) {
    Axis xAxis=((Axis)((ChartWithAxes)chartModel).getAxes().get(0));
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastType=ChartCacheManager.getInstance().findSeriesType();
      Axis overlayAxis=(Axis)xAxis.getAssociatedAxes().get(1);
      if (!overlayAxis.getSeriesDefinitions().isEmpty()) {
        Series oseries=((SeriesDefinition)overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries();
        String sDisplayName=oseries.getDisplayName();
        if (lastType != null) {
          cbSeriesType.setText(lastType);
        }
 else {
          cbSeriesType.setText(sDisplayName);
        }
        String seriesName=oseries.getSeriesIdentifier().toString();
        if (seriesName.trim().length() != 0) {
          Iterator<Entry<String,Series>> itr=htSeriesNames.entrySet().iterator();
          while (itr.hasNext()) {
            Entry<String,Series> entry=itr.next();
            entry.getValue().setSeriesIdentifier(seriesName);
          }
        }
      }
      changeOverlaySeriesType();
    }
  }
}",0.6540114613180515
71586,"public void addPages(){
  newReportFileWizardPage=new WizardNewReportCreationPage(WIZARDPAGE,selection,fileExtension);
  addPage(newReportFileWizardPage);
  templateChoicePage=new WizardTemplateChoicePage(TEMPLATECHOICEPAGE);
  addPage(templateChoicePage);
  newReportFileWizardPage.setTitle(REPORT);
  newReportFileWizardPage.setDescription(CREATE_A_NEW_REPORT);
  templateChoicePage.setTitle(REPORT);
  templateChoicePage.setDescription(SELECT_A_REPORT_TEMPLATE);
  resetUniqueCount();
  newReportFileWizardPage.setFileName(getUniqueReportName(NEW_REPORT_FILE_NAME_PREFIX,NEW_REPORT_FILE_EXTENSION));
  newReportFileWizardPage.setContainerFullPath(getDefaultContainerPath());
  newReportFileWizardPage.setTemplateChoicePage(templateChoicePage);
  templateChoicePage.setLTRDirection(ReportPlugin.getDefault().getLTRReportDirection(ResourcesPlugin.getWorkspace().getRoot().getProject(getDefaultContainerPath().lastSegment())));
}","public void addPages(){
  newReportFileWizardPage=new WizardNewReportCreationPage(WIZARDPAGE,selection,fileExtension);
  addPage(newReportFileWizardPage);
  templateChoicePage=new WizardTemplateChoicePage(TEMPLATECHOICEPAGE);
  addPage(templateChoicePage);
  newReportFileWizardPage.setTitle(REPORT);
  newReportFileWizardPage.setDescription(CREATE_A_NEW_REPORT);
  templateChoicePage.setTitle(REPORT);
  templateChoicePage.setDescription(SELECT_A_REPORT_TEMPLATE);
  resetUniqueCount();
  newReportFileWizardPage.setFileName(getUniqueReportName(NEW_REPORT_FILE_NAME_PREFIX,NEW_REPORT_FILE_EXTENSION));
  newReportFileWizardPage.setContainerFullPath(getDefaultContainerPath());
  newReportFileWizardPage.setTemplateChoicePage(templateChoicePage);
}",0.8920691711389386
71587,"public static String formatDateTime(String format,Locale locale){
  return locale2Code.get(locale) + format;
}","public static String formatDateTime(String format,Locale locale){
  String language=locale.getLanguage();
  String code=locale2Code.get(locale);
  if (code == null) {
    code=locale2Code.get(new Locale(language));
  }
  return code + format;
}",0.5819209039548022
71588,"/** 
 * Fill gradient.
 * @param gc
 */
protected void fillGradient(GC gc){
  if (((Gradient)fCurrent).getStartColor() == null && ((Gradient)fCurrent).getEndColor() == null) {
    return;
  }
  Color clrStart=null;
  Color clrEnd=null;
  if (((Gradient)fCurrent).getStartColor() != null) {
    clrStart=new Color(Display.getDefault(),((Gradient)fCurrent).getStartColor().getRed(),((Gradient)fCurrent).getStartColor().getGreen(),((Gradient)fCurrent).getStartColor().getBlue());
    gc.setForeground(clrStart);
  }
  if (((Gradient)fCurrent).getEndColor() != null) {
    clrEnd=new Color(Display.getDefault(),((Gradient)fCurrent).getEndColor().getRed(),((Gradient)fCurrent).getEndColor().getGreen(),((Gradient)fCurrent).getEndColor().getBlue());
    gc.setBackground(clrEnd);
  }
  gc.fillGradientRectangle(2,2,this.getSize().x - 4,this.getSize().y - 4,false);
}","/** 
 * Fill gradient.
 * @param gc
 */
protected void fillGradient(GC gc){
  idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
  PolygonRenderEvent event=new PolygonRenderEvent(this);
  Location[] la=LocationImpl.create(new double[]{2,2,this.getSize().x - 2,this.getSize().x - 2},new double[]{2,this.getSize().y - 2,this.getSize().y - 2,2});
  event.setPoints(la);
  event.setBackground(fCurrent);
  try {
    idr.fillPolygon(event);
  }
 catch (  ChartException e) {
  }
}",0.1509715994020926
71589,"public void angleChanged(int iNewAngle){
  iscRotation.setValue(iNewAngle);
  gCurrent.setDirection(iNewAngle);
}","public void angleChanged(int iNewAngle){
  iscRotation.setValue(iNewAngle);
  gCurrent.setDirection(iNewAngle);
  cnvPreview.redraw();
}",0.9076305220883534
71590,"private void showChart(Dimension dSize){
  Bounds bo=BoundsImpl.create(0,0,dSize.width,dSize.height);
  bo.scale(72d / idr.getDisplayServer().getDpiResolution());
  idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
  Generator gr=Generator.instance();
  ChartAdapter.beginIgnoreNotifications();
  cm.clearSections(IConstants.RUN_TIME);
  cm.createSampleRuntimeSeries();
  ChartAdapter.endIgnoreNotifications();
  try {
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new BIRTDesignerMessageLookup(crii.getHandle()));
    rtc.setRightToLeft(crii.isLayoutDirectionRTL());
    rtc.setRightToLeftText(crii.getHandle().isDirectionRTL());
    rtc.setResourceFinder(crii);
    rtc.setExternalizer(crii);
    boolean bPlotChart=ChartXTabUtil.isPlotChart(crii.getHandle());
    if (bPlotChart) {
      rtc.setScale(createSharedScaleFromSampleData());
    }
    gr.render(idr,gr.build(idr.getDisplayServer(),cm,bo,null,rtc,new ChartReportStyleProcessor(crii.getHandle(),true)));
  }
 catch (  ChartException gex) {
    showException(gc,gex);
  }
}","private void showChart(Dimension dSize){
  Bounds bo=BoundsImpl.create(0,0,dSize.width,dSize.height);
  bo.scale(72d / idr.getDisplayServer().getDpiResolution());
  idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
  Generator gr=Generator.instance();
  ChartAdapter.beginIgnoreNotifications();
  cm.clearSections(IConstants.RUN_TIME);
  cm.createSampleRuntimeSeries();
  ChartAdapter.endIgnoreNotifications();
  try {
    Chart cmRunTime=(Chart)EcoreUtil.copy(cm);
    removeStepInfoForSample(cmRunTime);
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new BIRTDesignerMessageLookup(crii.getHandle()));
    rtc.setRightToLeft(crii.isLayoutDirectionRTL());
    rtc.setRightToLeftText(crii.getHandle().isDirectionRTL());
    rtc.setResourceFinder(crii);
    rtc.setExternalizer(crii);
    boolean bPlotChart=ChartXTabUtil.isPlotChart(crii.getHandle());
    if (bPlotChart) {
      rtc.setScale(createSharedScaleFromSampleData());
    }
    gr.render(idr,gr.build(idr.getDisplayServer(),cmRunTime,bo,null,rtc,new ChartReportStyleProcessor(crii.getHandle(),true)));
  }
 catch (  ChartException gex) {
    showException(gc,gex);
  }
}",0.9589877835951134
71591,"/** 
 * @param s
 * @return
 */
private String[] splitOnBreaks(String s,double maxSize){
  final ArrayList<String> al=new ArrayList<String>();
  int i=0, j;
  do {
    j=s.indexOf('\n',i);
    if (j == -1) {
      j=s.length();
    }
    String ss=s.substring(i,j);
    if (ss != null && ss.length() > 0) {
      if (maxSize > 0) {
        Rectangle2D size=fm.getStringBounds(ss,g2d);
        if (size.getWidth() > maxSize) {
          int estCount=(int)(maxSize / size.getWidth()) * ss.length();
          if (estCount < 1) {
            estCount=ss.length();
          }
          String fs;
          Rectangle2D fsize;
          int curPos=0;
          while (ss.length() > 0) {
            fs=ss.substring(0,Math.min(estCount,ss.length()));
            fsize=fm.getStringBounds(fs,g2d);
            if (fsize.getWidth() <= maxSize) {
              al.add(fs);
              curPos=fs.length();
            }
 else {
              boolean matched=false;
              int curCount=Math.min(estCount - 1,ss.length());
              while (curCount > 1) {
                fs=ss.substring(0,curCount);
                fsize=fm.getStringBounds(fs,g2d);
                if (fsize.getWidth() <= maxSize) {
                  al.add(fs);
                  curPos=fs.length();
                  matched=true;
                  break;
                }
 else {
                  curCount--;
                }
              }
              if (!matched) {
                al.add(fs);
                curPos=fs.length();
              }
            }
            ss=ss.substring(curPos);
            curPos=0;
          }
        }
 else {
          al.add(ss);
        }
      }
 else {
        al.add(ss);
      }
    }
    i=j + 1;
  }
 while (j != -1 && j < s.length());
  final int n=al.size();
  if (n == 1 || n == 0) {
    return null;
  }
  final String[] sa=new String[n];
  for (i=0; i < al.size(); i++) {
    sa[i]=al.get(i);
  }
  return sa;
}","/** 
 * @param s
 * @return
 */
private String[] splitOnBreaks(String s,double maxSize){
  List al=new ArrayList();
  int i=0, j;
  do {
    j=s.indexOf('\n',i);
    if (j == -1) {
      j=s.length();
    }
    String ss=s.substring(i,j);
    if (ss != null && ss.length() > 0) {
      al.add(ss);
    }
    i=j + 1;
  }
 while (j != -1 && j < s.length());
  if (maxSize > 0) {
    List nal=new ArrayList();
    for (Iterator itr=al.iterator(); itr.hasNext(); ) {
      String ns=(String)itr.next();
      AttributedString as=new AttributedString(ns,fm.getFont().getAttributes());
      LineBreakMeasurer lbm=new LineBreakMeasurer(as.getIterator(),g2d.getFontRenderContext());
      while (lbm.getPosition() < ns.length()) {
        int next=lbm.nextOffset((float)maxSize);
        String ss=ns.substring(lbm.getPosition(),next);
        lbm.setPosition(next);
        nal.add(ss);
      }
    }
    al=nal;
  }
  final int n=al.size();
  if (n == 1 || n == 0) {
    return null;
  }
  final String[] sa=new String[n];
  for (i=0; i < al.size(); i++) {
    sa[i]=(String)al.get(i);
  }
  return sa;
}",0.2461437479488021
71592,"public void widgetSelected(SelectionEvent e){
  boolean needUpdateModel=false;
  Object oSelected=e.getSource();
  if (oSelected.getClass().equals(Button.class)) {
    needUpdateModel=true;
    if (oSelected.equals(cbOrientation)) {
      if (cbOrientation.getSelection()) {
        orientation=Orientation.HORIZONTAL_LITERAL;
      }
 else {
        orientation=Orientation.VERTICAL_LITERAL;
      }
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList();
      ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
    }
 else {
      Button btn=(Button)e.getSource();
      if (btn.getSelection()) {
        if (this.sSubType != null && !getSubtypeFromButton(btn).equals(sSubType)) {
          int iTypeIndex=vSubTypeNames.indexOf(sSubType);
          if (iTypeIndex >= 0) {
            ((Button)cmpTypeButtons.getChildren()[iTypeIndex]).setSelection(false);
            cmpTypeButtons.redraw();
          }
        }
        ChartUIUtil.saveLabelPositionIntoCache(getSeriesDefinitionForProcessing());
        sSubType=getSubtypeFromButton(btn);
        ChartCacheManager.getInstance().cacheSubtype(sType,sSubType);
      }
 else {
        if (this.sSubType != null && getSubtypeFromButton(btn).equals(sSubType)) {
          btn.setSelection(true);
        }
      }
    }
  }
 else   if (oSelected.getClass().equals(Table.class)) {
    sType=((String)((TableItem)e.item).getData()).trim();
    if (!sOldType.equals(sType)) {
      sOldType=sType;
      if (!getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
        if (chartModel != null && chartModel instanceof ChartWithAxes) {
          Orientation lastOrientation=ChartCacheManager.getInstance().findOrientation(sType);
          if (lastOrientation != null && this.orientation != lastOrientation) {
            this.orientation=lastOrientation;
            this.rotateAxisTitle((ChartWithAxes)chartModel);
          }
          if (lastOrientation == null) {
            this.orientation=htTypes.get(sType).getDefaultOrientation();
          }
        }
      }
      if (chartModel != null && chartModel instanceof ChartWithAxes && ChartCacheManager.getInstance().findCategory(sType) != null) {
        boolean bCategory=ChartCacheManager.getInstance().findCategory(sType).booleanValue();
        ((Axis)((ChartWithAxes)chartModel).getAxes().get(0)).setCategoryAxis(bCategory);
      }
      sSubType=null;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      cmpMisc.layout();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbMultipleY)) {
    needUpdateModel=true;
    lblSeriesType.setEnabled(isTwoAxesEnabled());
    Axis xAxis=((Axis)((ChartWithAxes)chartModel).getAxes().get(0));
    ((ChartWizardContext)getContext()).setMoreAxesSupported(cbMultipleY.getSelectionIndex() == 2);
    if (chartModel instanceof ChartWithoutAxes) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
    }
    ChartAdapter.beginIgnoreNotifications();
    int iAxisNumber=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
    if (cbMultipleY.getSelectionIndex() == 0) {
      ChartCacheManager.getInstance().cacheSeriesType(null);
      if (iAxisNumber > 1) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 1);
      }
    }
 else     if (cbMultipleY.getSelectionIndex() == 1) {
      if (iAxisNumber == 1) {
        ChartUIUtil.addAxis((ChartWithAxes)chartModel);
      }
 else       if (iAxisNumber > 2) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 2);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastSeriesType=ChartCacheManager.getInstance().findSeriesType();
      if (lastSeriesType != null) {
        cbSeriesType.setText(lastSeriesType);
      }
 else {
        Axis overlayAxis=(Axis)xAxis.getAssociatedAxes().get(1);
        String sDisplayName=((SeriesDefinition)overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries().getDisplayName();
        cbSeriesType.setText(sDisplayName);
      }
      changeOverlaySeriesType();
    }
    cbSeriesType.setEnabled(isTwoAxesEnabled());
    if (updateDimensionCombo(sType)) {
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
    }
    cmpMisc.layout();
  }
 else   if (oSelected.equals(cbDimension)) {
    String newDimension=cbDimension.getItem(cbDimension.getSelectionIndex());
    if (!newDimension.equals(sDimension)) {
      sDimension=newDimension;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbSeriesType)) {
    needUpdateModel=true;
    changeOverlaySeriesType();
  }
  if (needUpdateModel) {
    ChartAdapter.notifyUpdateApply();
    refreshChart();
    if (oSelected.getClass().equals(Table.class)) {
      populateSeriesTypesList();
    }
 else     if (oSelected.equals(cbOrientation)) {
      if (chartModel instanceof ChartWithAxes) {
        rotateAxisTitle((ChartWithAxes)chartModel);
      }
    }
    doPreview();
  }
}","public void widgetSelected(SelectionEvent e){
  boolean needUpdateModel=false;
  Object oSelected=e.getSource();
  if (oSelected.getClass().equals(Button.class)) {
    needUpdateModel=true;
    if (oSelected.equals(cbOrientation)) {
      if (cbOrientation.getSelection()) {
        orientation=Orientation.HORIZONTAL_LITERAL;
      }
 else {
        orientation=Orientation.VERTICAL_LITERAL;
      }
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList();
      ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
    }
 else {
      Button btn=(Button)e.getSource();
      if (btn.getSelection()) {
        if (this.sSubType != null && !getSubtypeFromButton(btn).equals(sSubType)) {
          int iTypeIndex=vSubTypeNames.indexOf(sSubType);
          if (iTypeIndex >= 0) {
            ((Button)cmpTypeButtons.getChildren()[iTypeIndex]).setSelection(false);
            cmpTypeButtons.redraw();
          }
        }
        ChartUIUtil.saveLabelPositionIntoCache(getSeriesDefinitionForProcessing());
        sSubType=getSubtypeFromButton(btn);
        ChartCacheManager.getInstance().cacheSubtype(sType,sSubType);
      }
 else {
        if (this.sSubType != null && getSubtypeFromButton(btn).equals(sSubType)) {
          btn.setSelection(true);
        }
      }
    }
  }
 else   if (oSelected.getClass().equals(Table.class)) {
    sType=((String)((TableItem)e.item).getData()).trim();
    if (!sOldType.equals(sType)) {
      sOldType=sType;
      if (!getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
        if (chartModel != null && chartModel instanceof ChartWithAxes) {
          Orientation lastOrientation=ChartCacheManager.getInstance().findOrientation(sType);
          if (lastOrientation != null && this.orientation != lastOrientation) {
            this.orientation=lastOrientation;
            this.rotateAxisTitle((ChartWithAxes)chartModel);
          }
          if (lastOrientation == null) {
            this.orientation=htTypes.get(sType).getDefaultOrientation();
          }
        }
      }
      if (chartModel != null && chartModel instanceof ChartWithAxes && ChartCacheManager.getInstance().findCategory(sType) != null) {
        boolean bCategory=ChartCacheManager.getInstance().findCategory(sType).booleanValue();
        ((Axis)((ChartWithAxes)chartModel).getAxes().get(0)).setCategoryAxis(bCategory);
      }
      sSubType=null;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      cmpMisc.layout();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbMultipleY)) {
    needUpdateModel=true;
    lblSeriesType.setEnabled(isTwoAxesEnabled());
    Axis xAxis=((Axis)((ChartWithAxes)chartModel).getAxes().get(0));
    ((ChartWizardContext)getContext()).setMoreAxesSupported(cbMultipleY.getSelectionIndex() == 2);
    if (chartModel instanceof ChartWithoutAxes) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
    }
    ChartAdapter.beginIgnoreNotifications();
    int iAxisNumber=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
    if (cbMultipleY.getSelectionIndex() == 0) {
      ChartCacheManager.getInstance().cacheSeriesType(null);
      if (iAxisNumber > 1) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 1);
      }
    }
 else     if (cbMultipleY.getSelectionIndex() == 1) {
      if (iAxisNumber == 1) {
        ChartUIUtil.addAxis((ChartWithAxes)chartModel);
      }
 else       if (iAxisNumber > 2) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 2);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastSeriesType=ChartCacheManager.getInstance().findSeriesType();
      if (lastSeriesType != null) {
        cbSeriesType.setText(lastSeriesType);
      }
 else {
        Axis overlayAxis=(Axis)xAxis.getAssociatedAxes().get(1);
        String sDisplayName=((SeriesDefinition)overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries().getDisplayName();
        cbSeriesType.setText(sDisplayName);
      }
      changeOverlaySeriesType();
    }
    cbSeriesType.setEnabled(isTwoAxesEnabled());
    if (updateDimensionCombo(sType)) {
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
    }
    cmpMisc.layout();
  }
 else   if (oSelected.equals(cbDimension)) {
    String newDimension=cbDimension.getItem(cbDimension.getSelectionIndex());
    if (!newDimension.equals(sDimension)) {
      sDimension=newDimension;
      ChartCacheManager.getInstance().cacheDimension(sType,sDimension);
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbSeriesType)) {
    needUpdateModel=true;
    changeOverlaySeriesType();
  }
  if (needUpdateModel) {
    ChartAdapter.notifyUpdateApply();
    refreshChart();
    if (oSelected.getClass().equals(Table.class)) {
      populateSeriesTypesList();
    }
 else     if (oSelected.equals(cbOrientation)) {
      if (chartModel instanceof ChartWithAxes) {
        rotateAxisTitle((ChartWithAxes)chartModel);
      }
    }
    doPreview();
  }
}",0.993091537132988
71593,"/** 
 * Updates the dimension combo according to chart type and axes number
 * @param sSelectedType Chart type
 * @return whether the dimension is changed after updating
 */
private boolean updateDimensionCombo(String sSelectedType){
  boolean isOldExist=false;
  IChartType chartType=htTypes.get(sSelectedType);
  String[] dimensionArray=chartType.getSupportedDimensions();
  int axesNum=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
  if (sDimension == null) {
    sDimension=chartType.getDefaultDimension();
    isOldExist=true;
  }
  cbDimension.removeAll();
  for (int i=0; i < dimensionArray.length; i++) {
    boolean isSupported=chartType.isDimensionSupported(dimensionArray[i],(ChartWizardContext)context,axesNum,0);
    if (isSupported) {
      cbDimension.add(dimensionArray[i]);
    }
    if (!isOldExist && sDimension.equals(dimensionArray[i])) {
      isOldExist=isSupported;
    }
  }
  if (!isOldExist) {
    sDimension=chartType.getDefaultDimension();
  }
  cbDimension.setText(sDimension);
  return !isOldExist;
}","/** 
 * Updates the dimension combo according to chart type and axes number
 * @param sSelectedType Chart type
 * @return whether the dimension is changed after updating
 */
private boolean updateDimensionCombo(String sSelectedType){
  boolean isOldExist=false;
  IChartType chartType=htTypes.get(sSelectedType);
  String[] dimensionArray=chartType.getSupportedDimensions();
  int axesNum=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
  if (sDimension == null) {
    sDimension=chartType.getDefaultDimension();
    isOldExist=true;
  }
  cbDimension.removeAll();
  for (int i=0; i < dimensionArray.length; i++) {
    boolean isSupported=chartType.isDimensionSupported(dimensionArray[i],(ChartWizardContext)context,axesNum,0);
    if (isSupported) {
      cbDimension.add(dimensionArray[i]);
    }
    if (!isOldExist && sDimension.equals(dimensionArray[i])) {
      isOldExist=isSupported;
    }
  }
  String cache=ChartCacheManager.getInstance().getDimension(sSelectedType);
  if (cache != null) {
    sDimension=cache;
    isOldExist=true;
  }
  if (!isOldExist) {
    sDimension=chartType.getDefaultDimension();
  }
  cbDimension.setText(sDimension);
  return !isOldExist;
}",0.934056007226739
71594,"public void before() throws ChartException {
  super.before();
  _bImageExternallySpecified=(_img != null);
  if (!_bImageExternallySpecified) {
    if (_bo == null) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
    }
    if ((int)_bo.getWidth() < 0 || (int)_bo.getHeight() < 0) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.INVALID_IMAGE_SIZE,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
    }
    if ((int)_bo.getWidth() == 0 || (int)_bo.getHeight() == 0) {
      _bo.setWidth(1);
      _bo.setHeight(1);
    }
    _img=new BufferedImage((int)_bo.getWidth(),(int)_bo.getHeight(),getImageType());
  }
  super.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,_img.getGraphics());
  if (!supportsTransparency()) {
    _g2d.setPaint(Color.WHITE);
    _g2d.fillRect(0,0,_img.getWidth(null),_img.getHeight(null));
  }
}","public void before() throws ChartException {
  super.before();
  _bImageExternallySpecified=(_img != null);
  if (!_bImageExternallySpecified) {
    if (_bo == null) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
    }
    if ((int)_bo.getWidth() < 0 || (int)_bo.getHeight() < 0) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.INVALID_IMAGE_SIZE,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
    }
    if ((int)_bo.getWidth() == 0 || (int)_bo.getHeight() == 0) {
      _bo.setWidth(1);
      _bo.setHeight(1);
    }
    _img=new BufferedImage((int)Math.round(_bo.getWidth()),(int)Math.round(_bo.getHeight()),getImageType());
  }
  super.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,_img.getGraphics());
  if (!supportsTransparency()) {
    _g2d.setPaint(Color.WHITE);
    _g2d.fillRect(0,0,_img.getWidth(null),_img.getHeight(null));
  }
}",0.9815195071868584
71595,"protected int addButtons(Composite cmp,final Table table){
  btnAddAgg=new Button(cmp,SWT.PUSH);
  btnAddAgg.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData();
  data.widthHint=Math.max(60,btnAddAgg.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnAddAgg.setLayoutData(data);
  btnAddAgg.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      DataColumnBindingDialog dialog=new DataColumnBindingDialog(true);
      dialog.setInput(inputElement,null,context);
      dialog.setExpressionProvider(expressionProvider);
      dialog.setAggreate(true);
      if (dialog.open() == Dialog.OK) {
        if (bindingTable != null) {
          refreshBindingTable();
          bindingTable.getTable().setSelection(bindingTable.getTable().getItemCount() - 1);
        }
      }
      refreshBindingTable();
      if (table.getItemCount() > 0)       setSelectionInTable(table.getItemCount() - 1);
      updateButtons();
    }
  }
);
  btnRefresh=new Button(cmp,SWT.PUSH);
  btnRefresh.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  data.widthHint=Math.max(60,btnRefresh.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnRefresh.setLayoutData(data);
  btnRefresh.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      try {
        List<ComputedColumn> columnList=new ArrayList<ComputedColumn>();
        CubeHandle cubeHandle=ChartXTabUtil.getBindingCube(inputElement);
        if (cubeHandle != null) {
          if (inputElement.getCube() == null) {
            refreshBindingTable();
          }
 else {
            List<LevelHandle> levels=ChartXTabUtil.getAllLevels(cubeHandle);
            for (Iterator<LevelHandle> iter=levels.iterator(); iter.hasNext(); ) {
              LevelHandle levelHandle=iter.next();
              ComputedColumn column=StructureFactory.newComputedColumn(inputElement,ChartXTabUtil.createLevelBindingName(levelHandle));
              column.setDataType(levelHandle.getDataType());
              column.setExpression(ChartXTabUtil.createDimensionExpression(levelHandle));
              columnList.add(column);
            }
            List<MeasureHandle> measures=ChartXTabUtil.getAllMeasures(cubeHandle);
            for (Iterator<MeasureHandle> iter=measures.iterator(); iter.hasNext(); ) {
              MeasureHandle measureHandle=iter.next();
              ComputedColumn column=StructureFactory.newComputedColumn(inputElement,ChartXTabUtil.createMeasureBindingName(measureHandle));
              column.setDataType(measureHandle.getDataType());
              column.setExpression(ExpressionUtil.createJSMeasureExpression(measureHandle.getName()));
              column.setAggregateFunction(measureHandle.getFunction());
              columnList.add(column);
            }
            if (columnList.size() > 0) {
              for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
                DEUtil.addColumn(inputElement,iter.next(),false);
              }
            }
          }
        }
 else {
          DataSetHandle dataSetHandle=inputElement.getDataSet();
          if (dataSetHandle == null) {
            refreshBindingTable();
          }
 else {
            List resultSetColumnList=DataUtil.getColumnList(dataSetHandle);
            for (Iterator iterator=resultSetColumnList.iterator(); iterator.hasNext(); ) {
              ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)iterator.next();
              ComputedColumn column=StructureFactory.newComputedColumn(inputElement,resultSetColumn.getColumnName());
              column.setDataType(resultSetColumn.getDataType());
              column.setExpression(DEUtil.getExpression(resultSetColumn));
              columnList.add(column);
            }
            if (columnList.size() > 0) {
              for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
                DEUtil.addColumn(inputElement,iter.next(),false);
              }
            }
          }
        }
        bindingTable.setInput(inputElement);
      }
 catch (      SemanticException e) {
        WizardBase.displayException(e);
      }
    }
  }
);
  return 2;
}","protected int addButtons(Composite cmp,final Table table){
  Listener[] listeners=getAggregationButton().getListeners(SWT.Selection);
  if (listeners.length > 0) {
    getAggregationButton().removeListener(SWT.Selection,listeners[0]);
  }
  getAggregationButton().addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      DataColumnBindingDialog dialog=new DataColumnBindingDialog(true);
      dialog.setInput(inputElement,null,context);
      dialog.setExpressionProvider(expressionProvider);
      dialog.setAggreate(true);
      if (dialog.open() == Dialog.OK) {
        if (bindingTable != null) {
          refreshBindingTable();
          bindingTable.getTable().setSelection(bindingTable.getTable().getItemCount() - 1);
        }
      }
      refreshBindingTable();
      if (table.getItemCount() > 0)       setSelectionInTable(table.getItemCount() - 1);
      updateButtons();
    }
  }
);
  btnRefresh=new Button(cmp,SWT.PUSH);
  btnRefresh.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  data.widthHint=Math.max(60,btnRefresh.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnRefresh.setLayoutData(data);
  btnRefresh.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      try {
        List<ComputedColumn> columnList=new ArrayList<ComputedColumn>();
        CubeHandle cubeHandle=ChartXTabUtil.getBindingCube(inputElement);
        if (cubeHandle != null) {
          if (inputElement.getCube() == null) {
            refreshBindingTable();
          }
 else {
            List<LevelHandle> levels=ChartXTabUtil.getAllLevels(cubeHandle);
            for (Iterator<LevelHandle> iter=levels.iterator(); iter.hasNext(); ) {
              LevelHandle levelHandle=iter.next();
              ComputedColumn column=StructureFactory.newComputedColumn(inputElement,ChartXTabUtil.createLevelBindingName(levelHandle));
              column.setDataType(levelHandle.getDataType());
              column.setExpression(ChartXTabUtil.createDimensionExpression(levelHandle));
              columnList.add(column);
            }
            List<MeasureHandle> measures=ChartXTabUtil.getAllMeasures(cubeHandle);
            for (Iterator<MeasureHandle> iter=measures.iterator(); iter.hasNext(); ) {
              MeasureHandle measureHandle=iter.next();
              ComputedColumn column=StructureFactory.newComputedColumn(inputElement,ChartXTabUtil.createMeasureBindingName(measureHandle));
              column.setDataType(measureHandle.getDataType());
              column.setExpression(ExpressionUtil.createJSMeasureExpression(measureHandle.getName()));
              column.setAggregateFunction(measureHandle.getFunction());
              columnList.add(column);
            }
            if (columnList.size() > 0) {
              for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
                DEUtil.addColumn(inputElement,iter.next(),false);
              }
            }
          }
        }
 else {
          DataSetHandle dataSetHandle=inputElement.getDataSet();
          if (dataSetHandle == null) {
            refreshBindingTable();
          }
 else {
            List resultSetColumnList=DataUtil.getColumnList(dataSetHandle);
            for (Iterator iterator=resultSetColumnList.iterator(); iterator.hasNext(); ) {
              ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)iterator.next();
              ComputedColumn column=StructureFactory.newComputedColumn(inputElement,resultSetColumn.getColumnName());
              column.setDataType(resultSetColumn.getDataType());
              column.setExpression(DEUtil.getExpression(resultSetColumn));
              columnList.add(column);
            }
            if (columnList.size() > 0) {
              for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
                DEUtil.addColumn(inputElement,iter.next(),false);
              }
            }
          }
        }
        bindingTable.setInput(inputElement);
      }
 catch (      SemanticException e) {
        WizardBase.displayException(e);
      }
    }
  }
);
  return 2;
}",0.784789263009183
71596,"protected void updateButtons(){
  super.updateButtons();
  btnAddAgg.setEnabled(btnAdd.isEnabled());
  updateButtonStatusForReadOnly();
}","protected void updateButtons(){
  super.updateButtons();
  getAggregationButton().setEnabled(btnAdd.isEnabled());
  updateButtonStatusForReadOnly();
}",0.9198606271777005
71597,"public ChartColumnBindingDialog(ReportItemHandle input,Shell parent,ChartWizardContext context){
  super(input,parent,false,false);
  this.context=context;
}","public ChartColumnBindingDialog(ReportItemHandle input,Shell parent,ChartWizardContext context){
  super(input,parent,false,true);
  this.context=context;
}",0.977635782747604
71598,"/** 
 * Disable/enable button to make all items in the dialog read-only.
 * @since 2.3
 */
private void updateButtonStatusForReadOnly(){
  if (fIsReadOnly) {
    btnAdd.setEnabled(false);
    btnEdit.setEnabled(false);
    btnDel.setEnabled(false);
    btnAddAgg.setEnabled(false);
    btnRefresh.setEnabled(false);
  }
}","/** 
 * Disable/enable button to make all items in the dialog read-only.
 * @since 2.3
 */
private void updateButtonStatusForReadOnly(){
  if (fIsReadOnly) {
    btnAdd.setEnabled(false);
    btnEdit.setEnabled(false);
    btnDel.setEnabled(false);
    getAggregationButton().setEnabled(false);
    btnRefresh.setEnabled(false);
  }
}",0.9557251908396946
71599,"private void deleteRow(ComputedColumnHandle handle){
  try {
    if (handle.getName().equals(selectedColumnName)) {
      selectedColumnName=null;
    }
    handle.drop();
  }
 catch (  PropertyValueException e) {
    ExceptionHandler.handle(e);
  }
}","protected void deleteRow(ComputedColumnHandle handle){
  try {
    if (handle.getName().equals(selectedColumnName)) {
      selectedColumnName=null;
    }
    handle.drop();
  }
 catch (  PropertyValueException e) {
    ExceptionHandler.handle(e);
  }
}",0.9761904761904762
71600,"protected void updateButtons(){
  super.updateButtons();
  getAggregationButton().setEnabled(btnAdd.isEnabled());
  updateButtonStatusForReadOnly();
}","protected void updateButtons(){
  super.updateButtons();
  getAggregationButton().setEnabled(btnAdd.isEnabled());
  if (!isOwnColumnBinding(bindingTable.getTable().getSelectionIndex())) {
    btnDel.setEnabled(false);
    btnEdit.setEnabled(false);
  }
  updateButtonStatusForReadOnly();
}",0.6287015945330297
71601,"protected void handleEditEvent(){
  ComputedColumnHandle bindingHandle=null;
  int pos=bindingTable.getTable().getSelectionIndex();
  if (pos > -1) {
    bindingHandle=(ComputedColumnHandle)(DEUtil.getBindingHolder(inputElement)).getColumnBindings().getAt(pos);
  }
  if (bindingHandle == null)   return;
  DataColumnBindingDialog dialog=new DataColumnBindingDialog(false);
  dialog.setInput(inputElement,bindingHandle,context);
  dialog.setExpressionProvider(expressionProvider);
  if (dialog.open() == Dialog.OK) {
    if (bindingTable != null)     bindingTable.getTable().setSelection(pos);
  }
}","protected void handleEditEvent(){
  ComputedColumnHandle bindingHandle=null;
  int pos=getColumnBindingIndexFromTableSelection();
  if (pos > -1) {
    bindingHandle=(ComputedColumnHandle)(DEUtil.getBindingHolder(inputElement)).getColumnBindings().getAt(pos);
  }
  if (bindingHandle == null)   return;
  DataColumnBindingDialog dialog=new DataColumnBindingDialog(false);
  dialog.setInput(inputElement,bindingHandle,context);
  dialog.setExpressionProvider(expressionProvider);
  if (dialog.open() == Dialog.OK) {
    if (bindingTable != null)     bindingTable.getTable().setSelection(pos);
  }
}",0.9565217391304348
71602,"protected List getBindingList(DesignElementHandle inputElement){
  Iterator iterator=ChartReportItemUtil.getColumnDataBindings((ReportItemHandle)inputElement);
  List list=new ArrayList();
  while (iterator.hasNext()) {
    list.add(iterator.next());
  }
  return list;
}","protected List<ComputedColumnHandle> getBindingList(DesignElementHandle inputElement){
  Iterator iterator=ChartReportItemUtil.getColumnDataBindings((ReportItemHandle)inputElement);
  List<ComputedColumnHandle> list=new ArrayList<ComputedColumnHandle>();
  while (iterator.hasNext()) {
    list.add((ComputedColumnHandle)iterator.next());
  }
  return list;
}",0.8603174603174604
71603,"public boolean layout(){
  if (context.getCancelFlag()) {
    close();
    isLastPage=true;
    return false;
  }
  start(isFirstPage);
  boolean hasNextPage=layoutNodes();
  if (isChildrenFinished()) {
    isLastPage=true;
  }
  if (hasNextPage && !isLastPage) {
    context.addLayoutHint(pageContent,false);
  }
 else {
    context.removeLayoutHint(pageContent);
  }
  isFirstPage=false;
  end(isLastPage);
  context.initilizePage();
  return hasNextPage;
}","public boolean layout(){
  if (context.getCancelFlag()) {
    close();
    isLastPage=true;
    return false;
  }
  start(isFirstPage);
  boolean hasNextPage=layoutNodes();
  if (isChildrenFinished()) {
    isLastPage=true;
  }
  isFirstPage=false;
  end(isLastPage);
  context.initilizePage();
  return hasNextPage;
}",0.8185328185328186
71604,"protected void initialize(){
  currentContext=new ContainerContext();
  contextList.add(currentContext);
  calculateSpecifiedHeight();
  createRoot();
  currentContext.maxAvaWidth=parent.getCurrentMaxContentWidth();
  currentContext.root.setWidth(getCurrentMaxContentWidth());
  currentContext.root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  currentContext.maxAvaHeight=currentContext.root.getContentHeight();
}","protected void initialize(){
  calculateSpecifiedHeight();
  if (specifiedHeight > parent.getCurrentMaxContentHeight()) {
    if (!parent.isPageEmpty()) {
      parent.autoPageBreak();
      if (isInBlockStacking) {
        parent.flushFinishedPage();
      }
    }
  }
  currentContext=new ContainerContext();
  contextList.add(currentContext);
  createRoot();
  currentContext.maxAvaWidth=parent.getCurrentMaxContentWidth();
  currentContext.root.setWidth(getCurrentMaxContentWidth());
  currentContext.root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  currentContext.maxAvaHeight=currentContext.root.getContentHeight();
}",0.7455399061032864
71605,"protected void closeLayout(){
}","protected void closeLayout(){
  if (!PropertyUtil.isInlineElement(image))   parent.align(root);
}",0.484375
71606,"public static boolean isRightAligned(IContent content,CSSValue align,boolean lastLine){
  return IStyle.RIGHT_VALUE.equals(align) || (content != null && content.isDirectionRTL() && (null == align || lastLine && IStyle.JUSTIFY_VALUE.equals(align)));
}","public static boolean isRightAligned(IContent content,CSSValue align,boolean lastLine){
  return align != null && isRightAligned(content,align.getCssText(),lastLine);
}",0.6602870813397129
71607,"/** 
 * Updates values in InputElementAttributes to the given report parameter.
 * @param dataAttrs the latest input element attributes
 * @param cachedDataAttrs the cached input element attributes
 * @param reportParam the report parameter
 * @param setHandle the ROM data set that has the corresponding data set parameter
 * @throws SemanticException
 */
private void updateInputElementAttrsToReportParam(InputElementAttributes elementAttrs,InputElementAttributes cachedElementAttrs,ScalarParameterHandle reportParam,OdaDataSetHandle setHandle) throws SemanticException {
  if (elementAttrs == null)   return;
  String defaultValue=elementAttrs.getDefaultScalarValue();
  String cachedDefaultValue=cachedElementAttrs == null ? null : cachedElementAttrs.getDefaultScalarValue();
  if (!CompareUtil.isEquals(cachedDefaultValue,defaultValue)) {
    if (!DataSetParameterAdapter.BIRT_JS_EXPR.equals(defaultValue))     reportParam.setDefaultValue(defaultValue);
  }
  Boolean isOptional=Boolean.valueOf(elementAttrs.isOptional());
  Boolean cachedIsOptional=cachedElementAttrs == null ? null : Boolean.valueOf(cachedElementAttrs.isOptional());
  if (!CompareUtil.isEquals(cachedIsOptional,isOptional))   setReportParamIsRequired(reportParam,ALLOW_BLANK_PROP_NAME,isOptional.booleanValue());
  Boolean masksValue=Boolean.valueOf(elementAttrs.isMasksValue());
  Boolean cachedMasksValues=cachedElementAttrs == null ? null : Boolean.valueOf(cachedElementAttrs.isMasksValue());
  if (!CompareUtil.isEquals(cachedMasksValues,masksValue))   reportParam.setConcealValue(masksValue.booleanValue());
  updateROMSelectionList(elementAttrs.getStaticValueChoices(),cachedElementAttrs == null ? null : cachedElementAttrs.getStaticValueChoices(),reportParam);
  updateROMDyanmicList(elementAttrs.getDynamicValueChoices(),cachedElementAttrs == null ? null : cachedElementAttrs.getDynamicValueChoices(),reportParam,setHandle);
  InputElementUIHints uiHints=elementAttrs.getUiHints();
  if (uiHints != null) {
    InputElementUIHints cachedUiHints=cachedElementAttrs == null ? null : cachedElementAttrs.getUiHints();
    InputPromptControlStyle style=uiHints.getPromptStyle();
    InputPromptControlStyle cachedStyle=cachedUiHints == null ? null : cachedUiHints.getPromptStyle();
    if (cachedStyle == null || (style != null && cachedStyle.getValue() != style.getValue()))     reportParam.setControlType(style == null ? null : newROMControlType(style.getValue()));
  }
}","/** 
 * Updates values in InputElementAttributes to the given report parameter.
 * @param dataAttrs the latest input element attributes
 * @param cachedDataAttrs the cached input element attributes
 * @param reportParam the report parameter
 * @param setHandle the ROM data set that has the corresponding data set parameter
 * @throws SemanticException
 */
private void updateInputElementAttrsToReportParam(InputElementAttributes elementAttrs,InputElementAttributes cachedElementAttrs,ScalarParameterHandle reportParam,OdaDataSetHandle setHandle) throws SemanticException {
  if (elementAttrs == null)   return;
  String defaultValue=elementAttrs.getDefaultScalarValue();
  String cachedDefaultValue=cachedElementAttrs == null ? null : cachedElementAttrs.getDefaultScalarValue();
  if (!CompareUtil.isEquals(cachedDefaultValue,defaultValue)) {
    if (!DataSetParameterAdapter.BIRT_JS_EXPR.equals(defaultValue))     reportParam.setDefaultValue(defaultValue);
  }
  Boolean isOptional=Boolean.valueOf(elementAttrs.isOptional());
  Boolean cachedIsOptional=cachedElementAttrs == null ? null : Boolean.valueOf(cachedElementAttrs.isOptional());
  if (!CompareUtil.isEquals(cachedIsOptional,isOptional))   setReportParamIsRequired(reportParam,ALLOW_BLANK_PROP_NAME,isOptional.booleanValue());
  Boolean masksValue=Boolean.valueOf(elementAttrs.isMasksValue());
  Boolean cachedMasksValues=cachedElementAttrs == null ? null : Boolean.valueOf(cachedElementAttrs.isMasksValue());
  if (!CompareUtil.isEquals(cachedMasksValues,masksValue))   reportParam.setConcealValue(masksValue.booleanValue());
  updateROMSelectionList(elementAttrs.getStaticValueChoices(),cachedElementAttrs == null ? null : cachedElementAttrs.getStaticValueChoices(),reportParam);
  DynamicValuesQuery valueQuery=elementAttrs.getDynamicValueChoices();
  updateROMDyanmicList(valueQuery,cachedElementAttrs == null ? null : cachedElementAttrs.getDynamicValueChoices(),reportParam,setHandle);
  if (valueQuery == null)   valueQuery=designFactory.createDynamicValuesQuery();
  DynamicValuesQuery cachedValueQuery=cachedElementAttrs == null ? null : cachedElementAttrs.getDynamicValueChoices();
  boolean isEnabled=valueQuery.isEnabled();
  boolean cachedIsEnabled=cachedValueQuery == null ? false : cachedValueQuery.isEnabled();
  if ((cachedValueQuery == null || cachedIsEnabled != isEnabled) && isEnabled)   reportParam.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
 else   if ((cachedValueQuery == null || cachedIsEnabled != isEnabled) && !isEnabled)   reportParam.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
  InputElementUIHints uiHints=elementAttrs.getUiHints();
  if (uiHints != null) {
    InputElementUIHints cachedUiHints=cachedElementAttrs == null ? null : cachedElementAttrs.getUiHints();
    InputPromptControlStyle style=uiHints.getPromptStyle();
    InputPromptControlStyle cachedStyle=cachedUiHints == null ? null : cachedUiHints.getPromptStyle();
    if (cachedStyle == null || (style != null && cachedStyle.getValue() != style.getValue()))     reportParam.setControlType(style == null ? null : newROMControlType(style.getValue()));
  }
}",0.8715383241021976
71608,"/** 
 * Updates values in DynamicValuesQuery to the given report parameter.
 * @param dataAttrs the latest dynamic values
 * @param cachedDataAttrs the cached dynamic values
 * @param reportParam the report parameter
 * @throws SemanticException
 */
private void updateROMDyanmicList(DynamicValuesQuery valueQuery,DynamicValuesQuery cachedValueQuery,ScalarParameterHandle reportParam,OdaDataSetHandle setHandle) throws SemanticException {
  if (valueQuery == null)   return;
  String value=valueQuery.getDataSetDesign().getName();
  String cachedValue=cachedValueQuery == null ? null : cachedValueQuery.getDataSetDesign().getName();
  if (cachedValue == null || !cachedValue.equals(value)) {
    reportParam.setDataSetName(value);
    ModuleHandle module=setHandle.getModuleHandle();
    DataSetHandle target=module.findDataSet(value);
    if (target instanceof OdaDataSetHandle && target != setHandle)     new ModelOdaAdapter().updateDataSetHandle(valueQuery.getDataSetDesign(),(OdaDataSetHandle)target,false);
    if (target == null) {
      OdaDataSetHandle nestedDataSet=new ModelOdaAdapter().createDataSetHandle(valueQuery.getDataSetDesign(),module);
      module.getDataSets().add(nestedDataSet);
    }
  }
  value=valueQuery.getValueColumn();
  cachedValue=cachedValueQuery == null ? null : cachedValueQuery.getValueColumn();
  if (cachedValue == null || !cachedValue.equals(value))   reportParam.setValueExpr(value);
  value=valueQuery.getDisplayNameColumn();
  cachedValue=cachedValueQuery == null ? null : cachedValueQuery.getDisplayNameColumn();
  if (cachedValue == null || !cachedValue.equals(value))   reportParam.setLabelExpr(value);
  boolean isEnabled=valueQuery.isEnabled();
  boolean cachedIsEnabled=cachedValueQuery == null ? false : cachedValueQuery.isEnabled();
  if (cachedValueQuery == null || (cachedIsEnabled != isEnabled && isEnabled))   reportParam.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
}","/** 
 * Updates values in DynamicValuesQuery to the given report parameter.
 * @param dataAttrs the latest dynamic values
 * @param cachedDataAttrs the cached dynamic values
 * @param reportParam the report parameter
 * @throws SemanticException
 */
private void updateROMDyanmicList(DynamicValuesQuery valueQuery,DynamicValuesQuery cachedValueQuery,ScalarParameterHandle reportParam,OdaDataSetHandle setHandle) throws SemanticException {
  if (valueQuery == null)   return;
  String value=valueQuery.getDataSetDesign().getName();
  String cachedValue=cachedValueQuery == null ? null : cachedValueQuery.getDataSetDesign().getName();
  if (cachedValue == null || !cachedValue.equals(value)) {
    reportParam.setDataSetName(value);
    ModuleHandle module=setHandle.getModuleHandle();
    DataSetHandle target=module.findDataSet(value);
    if (target instanceof OdaDataSetHandle && target != setHandle)     new ModelOdaAdapter().updateDataSetHandle(valueQuery.getDataSetDesign(),(OdaDataSetHandle)target,false);
    if (target == null) {
      OdaDataSetHandle nestedDataSet=new ModelOdaAdapter().createDataSetHandle(valueQuery.getDataSetDesign(),module);
      module.getDataSets().add(nestedDataSet);
    }
  }
  value=valueQuery.getValueColumn();
  cachedValue=cachedValueQuery == null ? null : cachedValueQuery.getValueColumn();
  if (cachedValue == null || !cachedValue.equals(value))   reportParam.setValueExpr(value);
  value=valueQuery.getDisplayNameColumn();
  cachedValue=cachedValueQuery == null ? null : cachedValueQuery.getDisplayNameColumn();
  if (cachedValue == null || !cachedValue.equals(value))   reportParam.setLabelExpr(value);
}",0.9192200557103064
71609,"private void setEnabledForButtons(){
  if (isCubeMode()) {
    boolean disabled=getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) || getDataServiceProvider().isInXTabAggrCell() || getDataServiceProvider().isInXTabMeasureCell();
    btnFilters.setEnabled(!disabled);
    btnBinding.setEnabled(getDataServiceProvider().isInvokingSupported() || getDataServiceProvider().isSharedBinding());
    btnParameters.setEnabled(false);
  }
 else {
    btnFilters.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
    btnParameters.setEnabled(getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().isInvokingSupported());
    btnBinding.setEnabled(hasDataSet() && (getDataServiceProvider().isInvokingSupported() || getDataServiceProvider().isSharedBinding()));
  }
}","private void setEnabledForButtons(){
  if (isCubeMode()) {
    boolean disabled=getDataServiceProvider().isInXTabAggrCell() || getDataServiceProvider().isInXTabMeasureCell();
    btnFilters.setEnabled(!disabled);
    btnBinding.setEnabled(getDataServiceProvider().isInvokingSupported() || getDataServiceProvider().isSharedBinding());
    btnParameters.setEnabled(false);
  }
 else {
    btnFilters.setEnabled(hasDataSet());
    btnParameters.setEnabled(getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().isInvokingSupported());
    btnBinding.setEnabled(hasDataSet() && (getDataServiceProvider().isInvokingSupported() || getDataServiceProvider().isSharedBinding()));
  }
}",0.7852921864740644
71610,"int invokeEditFilter(){
  ExtendedItemHandle handle=getItemHandle();
  handle.getModuleHandle().getCommandStack().startTrans(null);
  ExtendedItemFilterDialog page=new ExtendedItemFilterDialog(handle);
  if (handle.getCube() != null && getDataServiceProvider().isInvokingSupported()) {
    try {
      if (handle.getReportItem() instanceof ChartReportItemImpl) {
        ((ChartReportItemImpl)handle.getReportItem()).setModel(getContext().getModel());
      }
    }
 catch (    ExtendedElementException e) {
      WizardBase.displayException(e);
      return Window.CANCEL;
    }
    page.setFilterHandleProvider(new ChartCubeUIFilterHandleProvider());
  }
  int openStatus=page.open();
  if (openStatus == Window.OK) {
    handle.getModuleHandle().getCommandStack().commit();
  }
 else {
    handle.getModuleHandle().getCommandStack().rollback();
  }
  return openStatus;
}","int invokeEditFilter(){
  ExtendedItemHandle handle=getItemHandle();
  handle.getModuleHandle().getCommandStack().startTrans(null);
  ExtendedItemFilterDialog page=new ExtendedItemFilterDialog(handle);
  AbstractFilterHandleProvider provider=ChartFilterProviderDelegate.createFilterProvider(handle,handle);
  if (provider instanceof ChartCubeFilterHandleProvider) {
    ((ChartCubeFilterHandleProvider)provider).setContext(getContext());
  }
  page.setFilterHandleProvider(provider);
  int openStatus=page.open();
  if (openStatus == Window.OK) {
    handle.getModuleHandle().getCommandStack().commit();
  }
 else {
    handle.getModuleHandle().getCommandStack().rollback();
  }
  return openStatus;
}",0.626031746031746
71611,"public boolean next() throws BirtException {
  if (it.getQueryResults().getPreparedQuery().getReportQueryDefn().getGroups().size() == 0)   return it.next();
  if (!started) {
    started=true;
    return it.next();
  }
 else {
    it.skipToEnd(it.getQueryResults().getPreparedQuery().getReportQueryDefn().getGroups().size());
    return it.next();
  }
}","public boolean next() throws BirtException {
  boolean hasNext=false;
  if (it.getQueryResults().getPreparedQuery().getReportQueryDefn().getGroups().size() == 0) {
    hasNext=it.next();
  }
 else   if (!started) {
    started=true;
    hasNext=it.next();
  }
 else {
    it.skipToEnd(it.getQueryResults().getPreparedQuery().getReportQueryDefn().getGroups().size());
    hasNext=it.next();
  }
  if (!hasNext) {
    it.close();
  }
  return hasNext;
}",0.7935323383084577
71612,"PreparedIVDataExtractionQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  super(dataEngine,queryDefn);
}","PreparedIVDataExtractionQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn,Map appContext) throws DataException {
  super(dataEngine,queryDefn,appContext);
}",0.9144736842105264
71613,"/** 
 * @param dataEngine
 * @param queryDefn
 * @throws DataException
 */
PreparedIVQuerySourceQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  super(dataEngine,queryDefn,null,null);
  Object[] params={dataEngine,queryDefn};
  logger.entering(PreparedIVDataSourceQuery.class.getName(),""String_Node_Str"",params);
  this.queryDefn=queryDefn;
  this.engine=dataEngine;
  prepareQuery();
  preparedQuery=new PreparedQuery(dataEngine.getSession(),dataEngine.getContext(),this.queryDefn,this,appContext);
  logger.exiting(PreparedIVDataSourceQuery.class.getName(),""String_Node_Str"");
}","/** 
 * @param dataEngine
 * @param queryDefn
 * @throws DataException
 */
PreparedIVQuerySourceQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn,Map appContext) throws DataException {
  super(dataEngine,queryDefn,null,appContext);
  Object[] params={dataEngine,queryDefn};
  logger.entering(PreparedIVDataSourceQuery.class.getName(),""String_Node_Str"",params);
  this.queryDefn=queryDefn;
  this.engine=dataEngine;
  prepareQuery();
  preparedQuery=new PreparedQuery(dataEngine.getSession(),dataEngine.getContext(),this.queryDefn,this,appContext);
  logger.exiting(PreparedIVDataSourceQuery.class.getName(),""String_Node_Str"");
}",0.9768555466879488
71614,"public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartXTabUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=org.eclipse.birt.chart.reportitem.i18n.Messages.getString(""String_Node_Str"");
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : (Chart)EcoreUtil.copy(cm);
    final Object[] applyData=new Object[2];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    ReportDataServiceProvider dataProvider=new ReportDataServiceProvider(extendedHandle);
    IChartDataSheet dataSheet=new StandardChartDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=new ChartWizardContext(cmClone,this,dataProvider,dataSheet);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
      context.setEnabled(ChartUIConstants.TYPE_PIE,false);
      context.setEnabled(ChartUIConstants.TYPE_METER,false);
      context.setEnabled(ChartUIConstants.TYPE_STOCK,false);
      context.setEnabled(ChartUIConstants.TYPE_BUBBLE,false);
      context.setEnabled(ChartUIConstants.TYPE_DIFFERENCE,false);
      context.setEnabled(ChartUIConstants.TYPE_GANTT,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=EcoreUtil.copy(context.getModel());
        applyData[1]=context.getOutputFormat();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(crii.isLayoutDirectionRTL());
    context.setTextRtL(extendedHandle.isDirectionRTL());
    context.setResourceFinder(crii);
    context.setExternalizer(crii);
    Object of=extendedHandle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else       context.setOutputFormat((String)of);
    }
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    if (contextResult != null && contextResult.getModel() != null) {
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)contextResult.getModel());
      }
      commandStack.commit();
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1]);
      if (dataProvider.isPartChart()) {
        commandStack.startTrans(TRANS_NAME);
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)applyData[0]);
        commandStack.commit();
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
  }
}","public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartXTabUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=org.eclipse.birt.chart.reportitem.i18n.Messages.getString(""String_Node_Str"");
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : (Chart)EcoreUtil.copy(cm);
    final Object[] applyData=new Object[2];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    ReportDataServiceProvider dataProvider=new ReportDataServiceProvider(extendedHandle);
    IChartDataSheet dataSheet=new StandardChartDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=new ChartWizardContext(cmClone,this,dataProvider,dataSheet);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
      context.setEnabled(ChartUIConstants.TYPE_PIE,false);
      context.setEnabled(ChartUIConstants.TYPE_METER,false);
      context.setEnabled(ChartUIConstants.TYPE_STOCK,false);
      context.setEnabled(ChartUIConstants.TYPE_BUBBLE,false);
      context.setEnabled(ChartUIConstants.TYPE_DIFFERENCE,false);
      context.setEnabled(ChartUIConstants.TYPE_GANTT,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=EcoreUtil.copy(context.getModel());
        applyData[1]=context.getOutputFormat();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(crii.isLayoutDirectionRTL());
    context.setTextRtL(extendedHandle.isDirectionRTL());
    context.setResourceFinder(crii);
    context.setExternalizer(crii);
    Object of=extendedHandle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else       context.setOutputFormat((String)of);
    }
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    isChartWizardOpen=true;
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    isChartWizardOpen=false;
    if (contextResult != null && contextResult.getModel() != null) {
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)contextResult.getModel());
      }
      commandStack.commit();
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1]);
      if (dataProvider.isPartChart()) {
        commandStack.startTrans(TRANS_NAME);
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)applyData[0]);
        commandStack.commit();
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
    isChartWizardOpen=false;
  }
}",0.991146798435248
71615,"public Image getNodeIcon(Object model){
  DesignElementHandle handle=(DesignElementHandle)model;
  String iconPath=ChartUIConstants.IMAGE_OUTLINE;
  if (DEUtil.isLinkedElement(handle)) {
    iconPath=ChartUIConstants.IMAGE_OUTLINE_LIB;
  }
  if (ChartReportItemUtil.getChartFromHandle((ExtendedItemHandle)handle) == null) {
    iconPath=ChartUIConstants.IMAGE_OUTLINE_ERROR;
  }
  return UIHelper.getImage(iconPath);
}","public Image getNodeIcon(Object model){
  DesignElementHandle handle=(DesignElementHandle)model;
  String iconPath=ChartUIConstants.IMAGE_OUTLINE;
  if (DEUtil.isLinkedElement(handle)) {
    iconPath=ChartUIConstants.IMAGE_OUTLINE_LIB;
  }
  if (ChartReportItemUtil.getChartFromHandle((ExtendedItemHandle)handle) == null && !ChartReportItemBuilderImpl.isChartWizardOpen()) {
    iconPath=ChartUIConstants.IMAGE_OUTLINE_ERROR;
  }
  return UIHelper.getImage(iconPath);
}",0.9425028184892896
71616,"/** 
 * Constructor 
 * @param resource
 * @param name
 * @param subName
 * @param lineNumber
 * @throws CoreException
 */
public ScriptLineBreakpoint(final IResource resource,final String name,final String subName,final int lineNumber) throws CoreException {
}","/** 
 * Constructor 
 * @param resource
 * @param name
 * @param subName
 * @param lineNumber
 * @throws CoreException
 */
public ScriptLineBreakpoint(final IResource resource,final String name,final String subName,final int lineNumber,final String displayName) throws CoreException {
}",0.9542961608775136
71617,"public void toggleLineBreakpoints(IWorkbenchPart part,ISelection selection) throws CoreException {
  DecoratedScriptEditor textEditor=getEditor(part);
  if (textEditor != null) {
    ITextSelection textSelection=(ITextSelection)selection;
    IReportScriptLocation location=(IReportScriptLocation)textEditor.getAdapter(IReportScriptLocation.class);
    if (location == null) {
      return;
    }
    int lineNumber=textSelection.getStartLine();
    if (location.getLineNumber() > 0) {
      lineNumber=location.getLineNumber();
    }
    IResource resource=(IResource)textEditor.getEditorInput().getAdapter(IResource.class);
    if (resource == null) {
      resource=ScriptDebugUtil.getDefaultResource();
    }
    IBreakpoint[] breakpoints=DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(IScriptConstants.SCRIPT_DEBUG_MODEL);
    for (int i=0; i < breakpoints.length; i++) {
      IBreakpoint breakpoint=breakpoints[i];
      if (resource.equals(breakpoint.getMarker().getResource())) {
        if (((ScriptLineBreakpoint)breakpoint).getLineNumber() == (lineNumber + 1) && ((ScriptLineBreakpoint)breakpoint).getFileName().equals(location.getReportFileName()) && ((ScriptLineBreakpoint)breakpoint).getSubName().equals(location.getID())) {
          breakpoint.delete();
          return;
        }
      }
    }
    ScriptLineBreakpoint lineBreakpoint=new ScriptLineBreakpoint(resource,location.getReportFileName(),location.getID(),lineNumber + 1);
    lineBreakpoint.setDisplayName(location.getDisplayName());
    DebugPlugin.getDefault().getBreakpointManager().addBreakpoint(lineBreakpoint);
  }
}","public void toggleLineBreakpoints(IWorkbenchPart part,ISelection selection) throws CoreException {
  DecoratedScriptEditor textEditor=getEditor(part);
  if (textEditor != null) {
    ITextSelection textSelection=(ITextSelection)selection;
    IReportScriptLocation location=(IReportScriptLocation)textEditor.getAdapter(IReportScriptLocation.class);
    if (location == null) {
      return;
    }
    int lineNumber=textSelection.getStartLine();
    if (location.getLineNumber() > 0) {
      lineNumber=location.getLineNumber();
    }
    IResource resource=(IResource)textEditor.getEditorInput().getAdapter(IResource.class);
    if (resource == null) {
      resource=ScriptDebugUtil.getDefaultResource();
    }
    IBreakpoint[] breakpoints=DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(IScriptConstants.SCRIPT_DEBUG_MODEL);
    for (int i=0; i < breakpoints.length; i++) {
      IBreakpoint breakpoint=breakpoints[i];
      if (resource.equals(breakpoint.getMarker().getResource())) {
        if (((ScriptLineBreakpoint)breakpoint).getLineNumber() == (lineNumber + 1) && ((ScriptLineBreakpoint)breakpoint).getFileName().equals(location.getReportFileName()) && ((ScriptLineBreakpoint)breakpoint).getSubName().equals(location.getID())) {
          breakpoint.delete();
          return;
        }
      }
    }
    ScriptLineBreakpoint lineBreakpoint=new ScriptLineBreakpoint(resource,location.getReportFileName(),location.getID(),lineNumber + 1,location.getDisplayName());
    DebugPlugin.getDefault().getBreakpointManager().addBreakpoint(lineBreakpoint);
  }
}",0.98811013767209
71618,"/** 
 * Returns if all objects are in the same column
 * @param objs the array of the object
 */
static boolean isInSameColumn(Object[] objs){
}","/** 
 * Returns if all objects are in the same column
 * @param objs the array of the object
 */
public static boolean isInSameColumn(Object[] objs){
}",0.976271186440678
71619,"/** 
 * create a row in the table model
 * @param content row content
 */
public Row createRow(Object rowContent,boolean isHidden){
  if (!isHidden) {
    isRowHidden=false;
    ensureSize(rowCount + 1,realColCount);
    Row row=rows[rowCount];
    row.rowId=rowCount;
    row.content=rowContent;
    if (rowCount > 0) {
      Cell[] cells=row.cells;
      Cell[] lastCells=rows[rowCount - 1].cells;
      ;
      for (int cellId=0; cellId < realColCount; cellId++) {
        Cell lastCell=lastCells[cellId];
        if (lastCell.status == Cell.CELL_SPANED) {
          lastCell=lastCell.getCell();
        }
        if (lastCell.status == Cell.CELL_USED) {
          if (lastCell.rowSpan < 0 || lastCell.rowId + lastCell.rowSpan > rowCount) {
            cells[cellId]=Cell.createSpanCell(rowCount,cellId,lastCell);
          }
        }
      }
    }
    rowCount++;
    return row;
  }
  isRowHidden=true;
  if (rowCount > 0) {
    Cell[] lastCells=rows[rowCount - 1].cells;
    ;
    for (int cellId=0; cellId < realColCount; cellId++) {
      Cell lastCell=lastCells[cellId];
      if (lastCell.status == Cell.CELL_SPANED) {
        lastCell=lastCell.getCell();
      }
      if (lastCell.status == Cell.CELL_USED) {
        if (lastCell.rowId + lastCell.rowSpan >= rowCount + 1) {
          lastCell.rowSpan--;
        }
      }
    }
  }
  return null;
}","/** 
 * create a row in the table model
 * @param content row content
 */
public Row createRow(Object rowContent,boolean isHidden){
  if (!isHidden) {
    isRowHidden=false;
    ensureSize(rowCount + 1,realColCount);
    Row row=rows[rowCount];
    row.rowId=rowCount;
    row.content=rowContent;
    if (rowCount > 0) {
      Cell[] cells=row.cells;
      Cell[] lastCells=rows[rowCount - 1].cells;
      ;
      for (int cellId=0; cellId < realColCount; cellId++) {
        Cell lastCell=lastCells[cellId];
        if (lastCell.status == Cell.CELL_SPANED) {
          lastCell=lastCell.getCell();
        }
        if (lastCell.status == Cell.CELL_USED) {
          if (lastCell.rowSpan < 0 || lastCell.rowId + lastCell.rowSpan > rowCount) {
            cells[cellId]=Cell.createSpanCell(rowCount,cellId,lastCell);
          }
        }
      }
    }
    rowCount++;
    return row;
  }
  isRowHidden=true;
  if (rowCount > 0) {
    Cell[] lastCells=rows[rowCount - 1].cells;
    for (int cellId=0; cellId < realColCount; cellId++) {
      Cell lastCell=lastCells[cellId];
      if (lastCell.status == Cell.CELL_SPANED) {
        lastCell=lastCell.getCell();
      }
      if (lastCell.status == Cell.CELL_USED) {
        if (lastCell.rowId + lastCell.rowSpan >= rowCount + 1) {
          lastCell.rowSpan--;
        }
      }
    }
  }
  return null;
}",0.9977908689248896
71620,"/** 
 * Returns the element handle which can save binding columns the given element
 * @param handle the handle of the element which needs binding columns
 * @return the holder for the element,or itself if no holder available
 */
public static ReportItemHandle getBindingHolder(DesignElementHandle handle){
  if (handle instanceof ReportElementHandle) {
    if (handle instanceof ListingHandle) {
      return (ReportItemHandle)handle;
    }
    if (handle instanceof ReportItemHandle) {
      if (((ReportItemHandle)handle).getDataBindingReference() != null || ((ReportItemHandle)handle).getCube() != null || ((ReportItemHandle)handle).getDataSet() != null) {
        return (ReportItemHandle)handle;
      }
    }
    return getBindingHolder(handle.getContainer());
  }
  return null;
}","/** 
 * Returns the element handle which can save binding columns the given element
 * @param handle the handle of the element which needs binding columns
 * @return the holder for the element,or itself if no holder available
 */
public static ReportItemHandle getBindingHolder(DesignElementHandle handle){
  if (handle instanceof ReportElementHandle) {
    if (handle instanceof ReportItemHandle) {
      if (((ReportItemHandle)handle).getDataBindingReference() != null || ((ReportItemHandle)handle).getCube() != null || ((ReportItemHandle)handle).getDataSet() != null) {
        return (ReportItemHandle)handle;
      }
    }
    return getBindingHolder(handle.getContainer());
  }
  return null;
}",0.9408602150537636
71621,"public static String formatNumberPattern(String givenValue,Locale locale){
  String returnStr=""String_Node_Str"";
  if (givenValue == null) {
    return ""String_Node_Str"";
  }
  if (givenValue.length() == 1) {
    char ch=givenValue.charAt(0);
    if (ch == 'G' || ch == 'g' || ch == 'd' || ch == 'D') {
      return ""String_Node_Str"";
    }
    if (ch == 'C' || ch == 'c') {
      return getCurrencySymbol(locale) + ""String_Node_Str"";
    }
    if (ch == 'f' || ch == 'F') {
      return ""String_Node_Str"";
    }
    if (ch == 'N' || ch == 'n') {
      return ""String_Node_Str"";
    }
    if (ch == 'p' || ch == 'P') {
      return ""String_Node_Str"";
    }
    if (ch == 'e' || ch == 'E') {
      return ""String_Node_Str"";
    }
    if (ch == 'x' || ch == 'X') {
      return ""String_Node_Str"";
    }
  }
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (validType(givenValue)) {
    return givenValue;
  }
  int count=givenValue.length();
  boolean flag=false;
  for (int num=0; num < count; num++) {
    char temp=givenValue.charAt(num);
    if (temp == '\'') {
      if (flag) {
        flag=false;
      }
 else {
        char nextChar=givenValue.charAt(num + 1);
        if (nextChar == '\'') {
          returnStr=returnStr + '\'';
          num++;
          flag=false;
        }
 else {
          flag=true;
        }
      }
    }
 else {
      if (flag) {
        returnStr=returnStr + ""String_Node_Str"" + temp;
      }
 else {
        if (specialStr.indexOf(temp) != -1) {
          returnStr=returnStr + ""String_Node_Str"" + temp;
        }
 else         if (temp == '¤') {
          String symbol=getCurrencySymbol(locale);
          returnStr=returnStr + symbol;
        }
 else {
          returnStr=returnStr + temp;
        }
      }
    }
  }
  if (returnStr.indexOf(""String_Node_Str"") == -1 && returnStr.indexOf(""String_Node_Str"") == -1) {
    returnStr+=""String_Node_Str"";
  }
  return returnStr;
}","public static String formatNumberPattern(String givenValue,Locale locale){
  String returnStr=""String_Node_Str"";
  if (givenValue == null) {
    return ""String_Node_Str"";
  }
  if (givenValue.length() == 1) {
    char ch=givenValue.charAt(0);
    if (ch == 'G' || ch == 'g' || ch == 'd' || ch == 'D') {
      return ""String_Node_Str"";
    }
    if (ch == 'C' || ch == 'c') {
      return getCurrencySymbol(locale) + ""String_Node_Str"";
    }
    if (ch == 'f' || ch == 'F') {
      return ""String_Node_Str"";
    }
    if (ch == 'N' || ch == 'n') {
      return ""String_Node_Str"";
    }
    if (ch == 'p' || ch == 'P') {
      return ""String_Node_Str"";
    }
    if (ch == 'e' || ch == 'E') {
      return ""String_Node_Str"";
    }
    if (ch == 'x' || ch == 'X') {
      return ""String_Node_Str"";
    }
  }
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (validType(givenValue)) {
    return givenValue;
  }
  int count=givenValue.length();
  boolean flag=false;
  for (int num=0; num < count; num++) {
    char temp=givenValue.charAt(num);
    if (temp == '\'') {
      if (flag) {
        flag=false;
      }
 else {
        char nextChar=givenValue.charAt(num + 1);
        if (nextChar == '\'') {
          returnStr=returnStr + '\'';
          num++;
          flag=false;
        }
 else {
          flag=true;
        }
      }
    }
 else {
      if (flag) {
        returnStr=returnStr + ""String_Node_Str"" + temp;
      }
 else {
        if (specialStr.indexOf(temp) != -1) {
          returnStr=returnStr + ""String_Node_Str"" + temp;
        }
 else         if (temp == '¤') {
          String symbol=getCurrencySymbol(locale);
          returnStr=returnStr + ""String_Node_Str"" + symbol+ ""String_Node_Str"";
        }
 else         if (currencySymbol.indexOf(temp) != -1) {
          returnStr=returnStr + ""String_Node_Str"" + temp+ ""String_Node_Str"";
        }
 else {
          returnStr=returnStr + temp;
        }
      }
    }
  }
  if (returnStr.indexOf(""String_Node_Str"") == -1 && returnStr.indexOf(""String_Node_Str"") == -1) {
    returnStr+=""String_Node_Str"";
  }
  return returnStr;
}",0.9462134251290878
71622,"protected void addBorderSegment(Border border,int start,int end,String style,int width,Color color){
  if (style == null || color == null || width == 0 || border == null) {
    return;
  }
  ArrayList segments=border.segments;
  BorderSegment last=null;
  if (!segments.isEmpty()) {
    last=(BorderSegment)segments.get(segments.size() - 1);
    if (last.end == start && last.width == width && last.color.equals(color) && last.style.equals(style)) {
      last.end=end;
      return;
    }
  }
  segments.add(new BorderSegment(start,end,style,width,color));
  if (border.width < width) {
    border.width=width;
  }
}","protected void addBorderSegment(Border border,int start,int end,String style,int width,Color color){
  if (style == null || color == null || width == 0 || border == null) {
    return;
  }
  ArrayList segments=border.segments;
  BorderSegment last=null;
  if (!segments.isEmpty()) {
    last=(BorderSegment)segments.get(segments.size() - 1);
    if (last.width == width && last.color.equals(color) && last.style.equals(style)) {
      if (last.end == start) {
        last.end=end;
        return;
      }
      if (last.start == end) {
        last.start=start;
        return;
      }
    }
  }
  segments.add(new BorderSegment(start,end,style,width,color));
  if (border.width < width) {
    border.width=width;
  }
}",0.5848915482423336
71623,"public TableLayoutInfo(int[] colWidth){
  this.colWidth=colWidth;
  this.columnNumber=colWidth.length;
  this.xPositions=new int[columnNumber];
  this.tableWidth=0;
  if (tableContent.isRTL()) {
    for (int i=0; i < columnNumber; i++) {
      xPositions[i]=parent.getCurrentMaxContentWidth() - tableWidth - colWidth[i];
      tableWidth+=colWidth[i];
    }
  }
 else {
    for (int i=0; i < columnNumber; i++) {
      xPositions[i]=tableWidth;
      tableWidth+=colWidth[i];
    }
  }
}","public TableLayoutInfo(int[] colWidth){
  this.colWidth=colWidth;
  this.columnNumber=colWidth.length;
  this.xPositions=new int[columnNumber];
  this.tableWidth=0;
  if (tableContent.isRTL()) {
    int parentMaxWidth=parent != null ? parent.getCurrentMaxContentWidth() : context.getMaxWidth();
    for (int i=0; i < columnNumber; i++) {
      xPositions[i]=parentMaxWidth - tableWidth - colWidth[i];
      tableWidth+=colWidth[i];
    }
    if (xPositions[columnNumber - 1] != 0) {
      addDummyColumnForRTL(colWidth);
    }
  }
 else {
    for (int i=0; i < columnNumber; i++) {
      xPositions[i]=tableWidth;
      tableWidth+=colWidth[i];
    }
  }
}",0.7034120734908137
71624,"protected void initialize(){
  checkInlineBlock();
  currentContext=new TableContext();
  contextList.add(currentContext);
  tableContext=(TableContext)currentContext;
  createRoot();
  buildTableLayoutInfo();
  currentContext.root.setWidth(layoutInfo.getTableWidth());
  currentContext.maxAvaWidth=layoutInfo.getTableWidth();
  if (parent != null) {
    currentContext.root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  }
 else {
    currentContext.root.setAllocatedHeight(context.getMaxHeight());
  }
  if (tableContext.layout == null) {
    int start=0;
    int end=tableContent.getColumnCount() - 1;
    tableContext.layout=new TableAreaLayout(tableContent,layoutInfo,start,end);
  }
  currentContext.maxAvaHeight=currentContext.root.getContentHeight() - getBottomBorderWidth();
  addCaption(tableContent.getCaption());
  repeatHeader();
}","protected void initialize(){
  checkInlineBlock();
  currentContext=new TableContext();
  contextList.add(currentContext);
  tableContext=(TableContext)currentContext;
  createRoot();
  buildTableLayoutInfo();
  currentContext.root.setWidth(layoutInfo.getTableWidth());
  currentContext.maxAvaWidth=layoutInfo.getTableWidth();
  if (this.columnNumber < layoutInfo.columnNumber) {
    addDummyColumnForRTL();
  }
  if (parent != null) {
    currentContext.root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  }
 else {
    currentContext.root.setAllocatedHeight(context.getMaxHeight());
  }
  if (tableContext.layout == null) {
    int start=0;
    int end=tableContent.getColumnCount() - 1;
    tableContext.layout=new TableAreaLayout(tableContent,layoutInfo,start,end);
  }
  currentContext.maxAvaHeight=currentContext.root.getContentHeight() - getBottomBorderWidth();
  addCaption(tableContent.getCaption());
  repeatHeader();
}",0.9526989426822482
71625,"/** 
 * constructor
 * @param page the viewer
 * @param registry the registry
 */
public LibraryExplorerContextMenuProvider(LibraryExplorerTreeViewPage page){
  super(page.getTreeViewer());
  this.page=page;
  clipboard=new Clipboard(page.getSite().getShell().getDisplay());
  filterAction=new FilterResourceAction(page);
  refreshExplorerAction=new RefreshResourceExplorerAction(page);
  useCSSAction=new UseCSSAction(page);
  useLibraryAction=new AddSelectedLibToCurrentReportDesignAction(page.getTreeViewer());
  deleteResourceAction=new DeleteResourceAction(page);
  addResourceAction=new AddResourceAction(page);
  renameResourceAction=new RenameResourceAction(page);
  newFolderAction=new NewFolderAction(page);
  moveResourceAction=new MoveResourceAction(page);
  newLibraryAction=new NewLibraryAction(page);
  copyResourceAction=new CopyResourceAction(page,clipboard);
  pasteResourceAction=new PasteResourceAction(page,clipboard);
  newMenuGroup.add(newFolderAction);
  newMenuGroup.add(newLibraryAction);
  handleGlobalAction();
  page.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      resetActionStatus();
      updateActionBars();
    }
  }
);
}","/** 
 * constructor
 * @param page the viewer
 * @param registry the registry
 */
public LibraryExplorerContextMenuProvider(LibraryExplorerTreeViewPage page){
  super(page.getTreeViewer());
  this.page=page;
  clipboard=new Clipboard(page.getSite().getShell().getDisplay());
  filterAction=new FilterResourceAction(page);
  refreshExplorerAction=new RefreshResourceExplorerAction(page);
  useCSSAction=new UseCSSAction(page);
  useLibraryAction=new AddSelectedLibToCurrentReportDesignAction(page.getTreeViewer());
  deleteResourceAction=new DeleteResourceAction(page);
  addResourceAction=new AddResourceAction(page);
  renameResourceAction=new RenameResourceAction(page);
  newFolderAction=new NewFolderAction(page);
  moveResourceAction=new MoveResourceAction(page);
  newLibraryAction=new NewLibraryAction(page);
  copyResourceAction=new CopyResourceAction(page,clipboard);
  pasteResourceAction=new PasteResourceAction(page,clipboard);
  handleGlobalAction();
  page.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      resetActionStatus();
      updateActionBars();
    }
  }
);
}",0.9688408807644372
71626,"/** 
 * Builds the context menu. Single selection menu and multiple selection menu are created while selecting just single element or multiple elements
 * @param menu the menu
 */
public void buildContextMenu(IMenuManager menu){
  if (Policy.TRACING_MENU_SHOW) {
    System.out.println(""String_Node_Str"");
  }
  resetActionStatus();
  menu.removeAll();
  menu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
  menu.add(new Separator());
  IStructuredSelection selection=(IStructuredSelection)page.getSelection();
  if (selection != null && selection.getFirstElement() != null) {
    Object selected=selection.getFirstElement();
    if (selected instanceof ReportResourceEntry) {
      selected=((ReportResourceEntry)selected).getReportElement();
    }
    if (selected instanceof ResourceEntryWrapper) {
      int type=((ResourceEntryWrapper)selected).getType();
      if (type == ResourceEntryWrapper.LIBRARY) {
        menu.add(useLibraryAction);
      }
 else       if (type == ResourceEntryWrapper.CSS_STYLE_SHEET) {
        menu.add(useCSSAction);
      }
      if (((ResourceEntryWrapper)selected).getParent() instanceof PathResourceEntry) {
        menu.add(new Separator());
        menu.add(newMenuGroup);
        menu.add(addResourceAction);
      }
      menu.add(new Separator());
      menu.add(copyResourceAction);
      if (((ResourceEntryWrapper)selected).getParent() instanceof PathResourceEntry) {
        menu.add(pasteResourceAction);
        menu.add(deleteResourceAction);
        menu.add(moveResourceAction);
        menu.add(renameResourceAction);
        menu.add(new Separator());
      }
    }
 else     if (selected instanceof LibraryHandle) {
      menu.add(useLibraryAction);
      menu.add(new Separator());
    }
 else     if (selected instanceof CssStyleSheetHandle) {
      menu.add(useCSSAction);
      menu.add(new Separator());
    }
 else     if (selected instanceof PathResourceEntry) {
      menu.add(newMenuGroup);
      menu.add(addResourceAction);
      menu.add(new Separator());
      menu.add(copyResourceAction);
      menu.add(pasteResourceAction);
      menu.add(deleteResourceAction);
      menu.add(moveResourceAction);
      menu.add(renameResourceAction);
      menu.add(new Separator());
    }
 else     if (selected instanceof FragmentResourceEntry) {
      if (copyResourceAction.isEnabled()) {
        menu.add(copyResourceAction);
        menu.add(new Separator());
      }
    }
    if (canAddtoReport(selected)) {
      if (selection.size() == 1) {
        AddElementtoReport addElementAction=new AddElementtoReport((StructuredViewer)getViewer());
        addElementAction.setSelectedElement(selected);
        menu.add(addElementAction);
        menu.add(new Separator());
      }
    }
    menu.add(new Separator());
    menu.add(refreshExplorerAction);
  }
 else {
    menu.add(addResourceAction);
    menu.add(new Separator());
    menu.add(refreshExplorerAction);
  }
}","/** 
 * Builds the context menu. Single selection menu and multiple selection menu are created while selecting just single element or multiple elements
 * @param menu the menu
 */
public void buildContextMenu(IMenuManager menu){
  if (Policy.TRACING_MENU_SHOW) {
    System.out.println(""String_Node_Str"");
  }
  resetActionStatus();
  menu.removeAll();
  menu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
  menu.add(new Separator());
  IStructuredSelection selection=(IStructuredSelection)page.getSelection();
  IMenuManager newMenuGroup=new MenuManager(Messages.getString(""String_Node_Str""));
  newMenuGroup.add(newFolderAction);
  newMenuGroup.add(newLibraryAction);
  if (selection != null && selection.getFirstElement() != null) {
    Object selected=selection.getFirstElement();
    if (selected instanceof ReportResourceEntry) {
      selected=((ReportResourceEntry)selected).getReportElement();
    }
    if (selected instanceof ResourceEntryWrapper) {
      int type=((ResourceEntryWrapper)selected).getType();
      if (type == ResourceEntryWrapper.LIBRARY) {
        menu.add(useLibraryAction);
      }
 else       if (type == ResourceEntryWrapper.CSS_STYLE_SHEET) {
        menu.add(useCSSAction);
      }
      if (((ResourceEntryWrapper)selected).getParent() instanceof PathResourceEntry) {
        menu.add(new Separator());
        menu.add(newMenuGroup);
        menu.add(addResourceAction);
      }
      menu.add(new Separator());
      menu.add(copyResourceAction);
      if (((ResourceEntryWrapper)selected).getParent() instanceof PathResourceEntry) {
        menu.add(pasteResourceAction);
        menu.add(deleteResourceAction);
        menu.add(moveResourceAction);
        menu.add(renameResourceAction);
        menu.add(new Separator());
      }
    }
 else     if (selected instanceof LibraryHandle) {
      menu.add(useLibraryAction);
      menu.add(new Separator());
    }
 else     if (selected instanceof CssStyleSheetHandle) {
      menu.add(useCSSAction);
      menu.add(new Separator());
    }
 else     if (selected instanceof PathResourceEntry) {
      menu.add(newMenuGroup);
      menu.add(addResourceAction);
      menu.add(new Separator());
      menu.add(copyResourceAction);
      menu.add(pasteResourceAction);
      menu.add(deleteResourceAction);
      menu.add(moveResourceAction);
      menu.add(renameResourceAction);
      menu.add(new Separator());
    }
 else     if (selected instanceof FragmentResourceEntry) {
      if (copyResourceAction.isEnabled()) {
        menu.add(copyResourceAction);
        menu.add(new Separator());
      }
    }
    if (canAddtoReport(selected)) {
      if (selection.size() == 1) {
        AddElementtoReport addElementAction=new AddElementtoReport((StructuredViewer)getViewer());
        addElementAction.setSelectedElement(selected);
        menu.add(addElementAction);
        menu.add(new Separator());
      }
    }
    menu.add(new Separator());
    menu.add(refreshExplorerAction);
  }
 else {
    menu.add(addResourceAction);
    menu.add(new Separator());
    menu.add(refreshExplorerAction);
  }
}",0.9737320337022964
71627,"/** 
 * Update query expression for sharing query with table.
 * @param expression
 */
private void updateQueryForSharedBinding(String expression){
  Object[] data=(Object[])cmbDefinition.getData();
  if (data != null && data.length > 0) {
    String expr=expression;
    if (ChartUIConstants.QUERY_CATEGORY.equals(queryType) || ChartUIConstants.QUERY_OPTIONAL.equals(queryType)) {
      boolean isGroupExpr=false;
      for (int i=0; i < data.length; i++) {
        ColumnBindingInfo chi=(ColumnBindingInfo)data[i];
        int type=chi.getColumnType();
        if (type == ColumnBindingInfo.GROUP_COLUMN) {
          String groupRegex=ChartUtil.createRegularRowExpression(chi.getName(),false);
          String regex=ChartUtil.createRegularRowExpression(chi.getName(),true);
          if (expression.matches(regex)) {
            isGroupExpr=true;
            expr=expression.replaceAll(groupRegex,chi.getExpression());
            break;
          }
        }
      }
      if (ChartUIConstants.QUERY_CATEGORY.equals(queryType)) {
        if (isGroupExpr) {
          seriesdefinition.getGrouping().setAggregateExpression(null);
          seriesdefinition.getGrouping().setEnabled(true);
        }
 else {
          seriesdefinition.getGrouping().setEnabled(false);
        }
      }
    }
 else     if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
      boolean isAggregationExpr=false;
      ColumnBindingInfo chi=null;
      for (int i=0; i < data.length; i++) {
        chi=(ColumnBindingInfo)data[i];
        int type=chi.getColumnType();
        if (type == ColumnBindingInfo.AGGREGATE_COLUMN) {
          String aggRegex=ChartUtil.createRegularRowExpression(chi.getName(),false);
          String regex=ChartUtil.createRegularRowExpression(chi.getName(),true);
          if (expression.matches(regex)) {
            isAggregationExpr=true;
            expr=expression.replaceAll(aggRegex,chi.getExpression());
            break;
          }
        }
      }
      if (isAggregationExpr) {
        seriesdefinition.getGrouping().setEnabled(true);
        seriesdefinition.getGrouping().setAggregateExpression(chi.getChartAggExpression());
      }
 else {
        seriesdefinition.getGrouping().setEnabled(false);
        seriesdefinition.getGrouping().setAggregateExpression(null);
      }
    }
    setQueryExpression(expr);
  }
 else {
    setQueryExpression(expression);
  }
}","/** 
 * Update query expression for sharing query with table.
 * @param expression
 */
private void updateQueryForSharedBinding(String expression){
  Object[] data=(Object[])cmbDefinition.getData();
  if (data != null && data.length > 0) {
    String expr=expression;
    if (ChartUIConstants.QUERY_CATEGORY.equals(queryType) || ChartUIConstants.QUERY_OPTIONAL.equals(queryType)) {
      boolean isGroupExpr=false;
      for (int i=0; i < data.length; i++) {
        ColumnBindingInfo chi=(ColumnBindingInfo)data[i];
        int type=chi.getColumnType();
        if (type == ColumnBindingInfo.GROUP_COLUMN) {
          String groupRegex=ChartUtil.createRegularRowExpression(chi.getName(),false);
          String regex=ChartUtil.createRegularRowExpression(chi.getName(),true);
          if (expression.matches(regex)) {
            isGroupExpr=true;
            expr=expression.replaceAll(groupRegex,chi.getExpression());
            break;
          }
        }
      }
      if (ChartUIConstants.QUERY_CATEGORY.equals(queryType)) {
        if (isGroupExpr) {
          seriesdefinition.getGrouping().setEnabled(true);
        }
 else {
          seriesdefinition.getGrouping().setEnabled(false);
        }
      }
    }
 else     if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
      boolean isAggregationExpr=false;
      ColumnBindingInfo chi=null;
      for (int i=0; i < data.length; i++) {
        chi=(ColumnBindingInfo)data[i];
        int type=chi.getColumnType();
        if (type == ColumnBindingInfo.AGGREGATE_COLUMN) {
          String aggRegex=ChartUtil.createRegularRowExpression(chi.getName(),false);
          String regex=ChartUtil.createRegularRowExpression(chi.getName(),true);
          if (expression.matches(regex)) {
            isAggregationExpr=true;
            expr=expression.replaceAll(aggRegex,chi.getExpression());
            break;
          }
        }
      }
      if (isAggregationExpr) {
        seriesdefinition.getGrouping().setEnabled(true);
        seriesdefinition.getGrouping().setAggregateExpression(chi.getChartAggExpression());
      }
 else {
        seriesdefinition.getGrouping().setEnabled(false);
        seriesdefinition.getGrouping().setAggregateExpression(null);
      }
    }
    setQueryExpression(expr);
  }
 else {
    setQueryExpression(expression);
  }
}",0.9849480602077592
71628,"/** 
 * set ReportDesignHandle properties.
 * @param fileName
 * @throws DesignFileException
 * @throws SemanticException
 * @throws IOException
 */
private void setDesignFile(String fileName) throws DesignFileException, SemanticException, IOException {
  ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(fileName);
  if (!page.getDisplayName().equals(""String_Node_Str""))   handle.setDisplayName(page.getDisplayName());
  handle.setProperty(ModuleHandle.DESCRIPTION_PROP,page.getDescription());
  if (!page.getPreviewImagePath().equals(""String_Node_Str"")) {
    handle.setIconFile(page.getPreviewImagePath());
  }
 else {
    handle.setIconFile(""String_Node_Str"");
  }
  handle.save();
  handle.close();
}","/** 
 * set ReportDesignHandle properties.
 * @param fileName
 * @throws DesignFileException
 * @throws SemanticException
 * @throws IOException
 */
private void setDesignFile(String fileName) throws DesignFileException, SemanticException, IOException {
  ReportDesignHandle newHandle=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(fileName);
  if (!page.getDisplayName().equals(""String_Node_Str""))   newHandle.setDisplayName(page.getDisplayName());
  newHandle.setProperty(ModuleHandle.DESCRIPTION_PROP,page.getDescription());
  if (!page.getPreviewImagePath().equals(""String_Node_Str"")) {
    newHandle.setIconFile(page.getPreviewImagePath());
  }
 else {
    newHandle.setIconFile(""String_Node_Str"");
  }
  if (!newHandle.getIconFile().equals(handle.getIconFile())) {
    newHandle.deleteThumbnail();
  }
  newHandle.save();
  newHandle.close();
}",0.7764705882352941
71629,"public IDataRowExpressionEvaluator prepareRowExpressionEvaluator(Chart cm,List columnExpression,int rowCount,boolean isStringType) throws ChartException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,itemHandle.getModuleHandle());
  Thread.currentThread().setContextClassLoader(newContextLoader);
  IDataRowExpressionEvaluator evaluator=null;
  DataRequestSession session=null;
  ReportEngine engine=null;
  DummyEngineTask engineTask=null;
  try {
    if (isReportDesignHandle()) {
      engine=(ReportEngine)new ReportEngineFactory().createReportEngine(new EngineConfig());
      engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)itemHandle.getModuleHandle()));
    }
    CubeHandle cube=ChartXTabUtil.getBindingCube(itemHandle);
    if (cube != null) {
      if (isReportDesignHandle()) {
        session=prepareDataRequestSession(engineTask,getMaxRow(),true);
        engineTask.run();
      }
 else {
        session=prepareDataRequestSession(getMaxRow(),true);
      }
      evaluator=createCubeEvaluator(cube,session,engineTask);
    }
 else {
      if (isReportDesignHandle()) {
        session=prepareDataRequestSession(engineTask,getMaxRow(),false);
        engineTask.run();
      }
 else {
        session=prepareDataRequestSession(getMaxRow(),false);
      }
      if (isSharedBinding()) {
        evaluator=fShareBindingQueryHelper.createShareBindingEvaluator(cm,session,engineTask);
      }
 else {
        evaluator=createBaseEvaluator(itemHandle,cm,columnExpression,session,engineTask);
      }
    }
    return evaluator;
  }
 catch (  BirtException e) {
    if (engine == null && session != null) {
      session.shutdown();
    }
    if (engineTask != null) {
      engineTask.close();
    }
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
catch (  RuntimeException e) {
    if (engine == null && session != null) {
      session.shutdown();
    }
    if (engineTask != null) {
      engineTask.close();
    }
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
 finally {
    if (engine != null) {
      engine.destroy();
    }
    Thread.currentThread().setContextClassLoader(oldContextLoader);
  }
}","public IDataRowExpressionEvaluator prepareRowExpressionEvaluator(Chart cm,List columnExpression,int rowCount,boolean isStringType) throws ChartException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,itemHandle.getModuleHandle());
  Thread.currentThread().setContextClassLoader(newContextLoader);
  IDataRowExpressionEvaluator evaluator=null;
  DataRequestSession session=null;
  ReportEngine engine=null;
  DummyEngineTask engineTask=null;
  try {
    if (isReportDesignHandle()) {
      engine=(ReportEngine)new ReportEngineFactory().createReportEngine(new EngineConfig());
      engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)itemHandle.getModuleHandle()),itemHandle.getModuleHandle());
    }
    CubeHandle cube=ChartXTabUtil.getBindingCube(itemHandle);
    if (cube != null) {
      if (isReportDesignHandle()) {
        session=prepareDataRequestSession(engineTask,getMaxRow(),true);
        engineTask.run();
      }
 else {
        session=prepareDataRequestSession(getMaxRow(),true);
      }
      evaluator=createCubeEvaluator(cube,session,engineTask);
    }
 else {
      if (isReportDesignHandle()) {
        session=prepareDataRequestSession(engineTask,getMaxRow(),false);
        engineTask.run();
      }
 else {
        session=prepareDataRequestSession(getMaxRow(),false);
      }
      if (isSharedBinding()) {
        evaluator=fShareBindingQueryHelper.createShareBindingEvaluator(cm,session,engineTask);
      }
 else {
        evaluator=createBaseEvaluator(itemHandle,cm,columnExpression,session,engineTask);
      }
    }
    return evaluator;
  }
 catch (  BirtException e) {
    if (engine == null && session != null) {
      session.shutdown();
    }
    if (engineTask != null) {
      engineTask.close();
    }
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
catch (  RuntimeException e) {
    if (engine == null && session != null) {
      session.shutdown();
    }
    if (engineTask != null) {
      engineTask.close();
    }
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
 finally {
    if (engine != null) {
      engine.destroy();
    }
    Thread.currentThread().setContextClassLoader(oldContextLoader);
  }
}",0.9942585626608592
71630,"/** 
 * Returns preview row data for table shared binding, it will share table's bindings and get them data.
 * @param headers
 * @param rowCount
 * @param isStringType
 * @return
 * @throws ChartException
 * @since 2.3
 */
private List getPreviewRowData(ColumnBindingInfo[] headers,int rowCount,boolean isStringType) throws ChartException {
  ArrayList dataList=new ArrayList();
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,itemHandle.getModuleHandle());
  Thread.currentThread().setContextClassLoader(newContextLoader);
  ReportEngine engine=null;
  DummyEngineTask engineTask=null;
  DataRequestSession session=null;
  try {
    int maxRow=getMaxRow();
    if (isReportDesignHandle()) {
      engine=(ReportEngine)new ReportEngineFactory().createReportEngine(new EngineConfig());
      engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)itemHandle.getModuleHandle()));
      session=prepareDataRequestSession(engineTask,maxRow,false);
      engineTask.run();
    }
 else {
      session=prepareDataRequestSession(maxRow,false);
    }
    QueryDefinition queryDefn=new QueryDefinition();
    queryDefn.setMaxRows(maxRow);
    List columns=generateShareBindingsWithTable(headers,queryDefn,session,new HashMap());
    IQueryResults actualResultSet=session.executeQuery(queryDefn,null,getPropertyIterator(itemHandle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP)),null);
    if (actualResultSet != null) {
      int columnCount=columns.size();
      IResultIterator iter=actualResultSet.getResultIterator();
      while (iter.next()) {
        if (isStringType) {
          String[] record=new String[columnCount];
          for (int n=0; n < columnCount; n++) {
            record[n]=DataTypeUtil.toString(iter.getValue((String)columns.get(n)));
          }
          dataList.add(record);
        }
 else {
          Object[] record=new Object[columnCount];
          for (int n=0; n < columnCount; n++) {
            record[n]=iter.getValue((String)columns.get(n));
          }
          dataList.add(record);
        }
      }
      actualResultSet.close();
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldContextLoader);
    if (engine == null && session != null) {
      session.shutdown();
    }
    if (engineTask != null) {
      engineTask.close();
    }
    if (engine != null) {
      engine.destroy();
    }
  }
  return dataList;
}","/** 
 * Returns preview row data for table shared binding, it will share table's bindings and get them data.
 * @param headers
 * @param rowCount
 * @param isStringType
 * @return
 * @throws ChartException
 * @since 2.3
 */
private List getPreviewRowData(ColumnBindingInfo[] headers,int rowCount,boolean isStringType) throws ChartException {
  ArrayList dataList=new ArrayList();
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,itemHandle.getModuleHandle());
  Thread.currentThread().setContextClassLoader(newContextLoader);
  ReportEngine engine=null;
  DummyEngineTask engineTask=null;
  DataRequestSession session=null;
  try {
    int maxRow=getMaxRow();
    if (isReportDesignHandle()) {
      engine=(ReportEngine)new ReportEngineFactory().createReportEngine(new EngineConfig());
      engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)itemHandle.getModuleHandle()),itemHandle.getModuleHandle());
      session=prepareDataRequestSession(engineTask,maxRow,false);
      engineTask.run();
    }
 else {
      session=prepareDataRequestSession(maxRow,false);
    }
    QueryDefinition queryDefn=new QueryDefinition();
    queryDefn.setMaxRows(maxRow);
    List columns=generateShareBindingsWithTable(headers,queryDefn,session,new HashMap());
    IQueryResults actualResultSet=session.executeQuery(queryDefn,null,getPropertyIterator(itemHandle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP)),null);
    if (actualResultSet != null) {
      int columnCount=columns.size();
      IResultIterator iter=actualResultSet.getResultIterator();
      while (iter.next()) {
        if (isStringType) {
          String[] record=new String[columnCount];
          for (int n=0; n < columnCount; n++) {
            record[n]=DataTypeUtil.toString(iter.getValue((String)columns.get(n)));
          }
          dataList.add(record);
        }
 else {
          Object[] record=new Object[columnCount];
          for (int n=0; n < columnCount; n++) {
            record[n]=iter.getValue((String)columns.get(n));
          }
          dataList.add(record);
        }
      }
      actualResultSet.close();
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldContextLoader);
    if (engine == null && session != null) {
      session.shutdown();
    }
    if (engineTask != null) {
      engineTask.close();
    }
    if (engine != null) {
      engine.destroy();
    }
  }
  return dataList;
}",0.994837101655688
71631,"public HashMap getExpressions(){
  if (text == null) {
    return null;
  }
  if (exprs != null) {
    return exprs;
  }
  if (HTML_TEXT.equals(textType) || (AUTO_TEXT.equals(textType) && (text.substring(0,6).equalsIgnoreCase(""String_Node_Str"")))) {
    exprs=new HashMap();
    TextTemplate template=new TemplateParser().parse(text);
    if (template != null && template.getNodes() != null) {
      Iterator itor=template.getNodes().iterator();
      Object obj;
      String expression=null;
      while (itor.hasNext()) {
        obj=itor.next();
        if (obj instanceof TextTemplate.ValueNode) {
          expression=((TextTemplate.ValueNode)obj).getValue();
        }
 else         if (obj instanceof TextTemplate.ImageNode) {
          expression=((TextTemplate.ImageNode)obj).getExpr();
        }
        if (expression != null && !expression.trim().equals(""String_Node_Str"")) {
          exprs.put(expression,expression);
          expression=null;
        }
      }
    }
  }
  return exprs;
}","public HashMap getExpressions(){
  if (text == null) {
    return null;
  }
  if (exprs != null) {
    return exprs;
  }
  if (HTML_TEXT.equals(textType) || (AUTO_TEXT.equals(textType) && startsWithIgnoreCase(text,""String_Node_Str""))) {
    exprs=new HashMap();
    TextTemplate template=new TemplateParser().parse(text);
    if (template != null && template.getNodes() != null) {
      Iterator itor=template.getNodes().iterator();
      Object obj;
      String expression=null;
      while (itor.hasNext()) {
        obj=itor.next();
        if (obj instanceof TextTemplate.ValueNode) {
          expression=((TextTemplate.ValueNode)obj).getValue();
        }
 else         if (obj instanceof TextTemplate.ImageNode) {
          expression=((TextTemplate.ImageNode)obj).getExpr();
        }
        if (expression != null && !expression.trim().equals(""String_Node_Str"")) {
          exprs.put(expression,expression);
          expression=null;
        }
      }
    }
  }
  return exprs;
}",0.9684526790185278
71632,"/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content) throws BadElementException, MalformedURLException, IOException {
  Image image=null;
  String uri=content.getURI();
  String mimeType=content.getMIMEType();
  String extension=content.getExtension();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    return null;
  }
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
  URL url=design.findResource(uri,IResourceLocator.IMAGE);
InputStream in=url.openStream();
try {
byte[] buffer;
if (SvgFile.isSvg(content.getURI())) {
  buffer=SvgFile.transSvgToArray(in);
}
 else {
  ArrayList<Byte> bytes=new ArrayList<Byte>();
  int data=in.read();
  while (data != -1) {
    bytes.add((byte)data);
    data=in.read();
  }
  buffer=new byte[bytes.size()];
  for (int i=0; i < buffer.length; i++) {
    buffer[i]=bytes.get(i);
  }
}
image=Image.getInstance(buffer);
}
 catch (Exception ex) {
logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
byte[] data=content.getData();
in=new ByteArrayInputStream(data);
if (SvgFile.isSvg(mimeType,uri,extension)) data=SvgFile.transSvgToArray(in);
image=Image.getInstance(data);
break;
case IImageContent.IMAGE_URL:
if (SvgFile.isSvg(uri)) {
image=Image.getInstance(SvgFile.transSvgToArray(uri));
}
 else {
image=Image.getInstance(new URL(content.getURI()));
}
break;
default :
assert(false);
}
if (image != null) {
int resolutionX=0;
int resolutionY=0;
int contentResolution=content.getResolution();
if (contentResolution != 0) {
resolutionX=contentResolution;
resolutionY=contentResolution;
}
 else {
if (0 == resolutionX || 0 == resolutionY) {
resolutionX=context.getDpi();
resolutionY=context.getDpi();
}
if (0 == resolutionX || 0 == resolutionY) {
resolutionX=96;
resolutionY=96;
}
}
return new Dimension((int)(image.plainWidth() * 1000 / resolutionX * 72),(int)(image.plainHeight() * 1000 / resolutionY * 72));
}
return null;
}","/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content) throws BadElementException, MalformedURLException, IOException {
  Image image=null;
  String uri=content.getURI();
  String mimeType=content.getMIMEType();
  String extension=content.getExtension();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    return null;
  }
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
  URL url=design.findResource(uri,IResourceLocator.IMAGE);
InputStream in=url.openStream();
try {
byte[] buffer;
if (SvgFile.isSvg(content.getURI())) {
  buffer=SvgFile.transSvgToArray(in);
}
 else {
  ArrayList<Byte> bytes=new ArrayList<Byte>();
  int data=in.read();
  while (data != -1) {
    bytes.add((byte)data);
    data=in.read();
  }
  buffer=new byte[bytes.size()];
  for (int i=0; i < buffer.length; i++) {
    buffer[i]=bytes.get(i);
  }
}
image=Image.getInstance(buffer);
}
 catch (Exception ex) {
logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
byte[] data=content.getData();
in=new ByteArrayInputStream(data);
if (SvgFile.isSvg(mimeType,uri,extension)) data=SvgFile.transSvgToArray(in);
image=Image.getInstance(data);
break;
case IImageContent.IMAGE_URL:
if (SvgFile.isSvg(uri)) {
image=Image.getInstance(SvgFile.transSvgToArray(uri));
}
 else {
image=Image.getInstance(new URL(content.getURI()));
}
break;
default :
assert(false);
}
if (image != null) {
int contentResolution=content.getResolution();
if (contentResolution != 0) {
resolutionX=contentResolution;
resolutionY=contentResolution;
}
 else {
if (0 == resolutionX || 0 == resolutionY) {
resolutionX=context.getDpi();
resolutionY=context.getDpi();
}
if (0 == resolutionX || 0 == resolutionY) {
resolutionX=96;
resolutionY=96;
}
}
return new Dimension((int)(image.plainWidth() * 1000 / resolutionX * 72),(int)(image.plainHeight() * 1000 / resolutionY * 72));
}
return null;
}",0.9916077738515902
71633,"/** 
 * Calculates the absolute positions of image map when given the position of image. The image map position is relative to the left up corner of the image. The argument and returned value are both 4 length integer area, the four value of which are x, y of up left corner, width and height respectively.
 * @param area rectangle area of a image map.
 * @param imageArea image area of the image in which the image map is.
 * @return absolute position of the image map.
 */
private int[] getAbsoluteArea(int[] area,IImageArea imageArea){
  assert(intrinsic != null);
  for (int i=0; i < 4; i++) {
    area[i]=getTranslatedLength(area[i]);
  }
  int[] result=new int[4];
  int imageX=imageArea.getX();
  int imageY=imageArea.getY();
  int imageHeight=imageArea.getHeight();
  int imageWidth=imageArea.getWidth();
  int intrinsicWidth=intrinsic.getWidth();
  int intrinsicHeight=intrinsic.getHeight();
  float ratio=(float)imageWidth / (float)intrinsicWidth;
  result[0]=imageX + (int)(area[0] * ratio);
  result[2]=(int)(area[2] * ratio);
  ratio=(float)imageHeight / (float)intrinsicHeight;
  result[1]=imageY + (int)(area[1] * ratio);
  result[3]=(int)(area[3] * ratio);
  return result;
}","/** 
 * Calculates the absolute positions of image map when given the position of image. The image map position is relative to the left up corner of the image. The argument and returned value are both 4 length integer area, the four value of which are x, y of up left corner, width and height respectively.
 * @param area rectangle area of a image map.
 * @param imageArea image area of the image in which the image map is.
 * @return absolute position of the image map.
 */
private int[] getAbsoluteArea(int[] area,IImageArea imageArea){
  assert(intrinsic != null);
  for (int i=0; i < 4; ) {
    area[i]=getTranslatedLengthX(area[i]);
    i++;
    area[i]=getTranslatedLengthY(area[i]);
    i++;
  }
  int[] result=new int[4];
  int imageX=imageArea.getX();
  int imageY=imageArea.getY();
  int imageHeight=imageArea.getHeight();
  int imageWidth=imageArea.getWidth();
  int intrinsicWidth=intrinsic.getWidth();
  int intrinsicHeight=intrinsic.getHeight();
  float ratio=(float)imageWidth / (float)intrinsicWidth;
  result[0]=imageX + (int)(area[0] * ratio);
  result[2]=(int)(area[2] * ratio);
  ratio=(float)imageHeight / (float)intrinsicHeight;
  result[1]=imageY + (int)(area[1] * ratio);
  result[3]=(int)(area[3] * ratio);
  return result;
}",0.9659975419909872
71634,"public void dataEngineShutdown(){
  Map<ConnectionProp,Set<CacheConnection>> odaConnectionsMap=DataSource.dataEngineLevelConnectionPool.remove(this.session);
  if (odaConnectionsMap == null)   return;
  ConnectionProp connProp=new ConnectionProp(DataSource.this.driverName,DataSource.this.connectionProps,DataSource.this.appContext);
  Set<CacheConnection> odaConnections=odaConnectionsMap.get(connProp);
  if (odaConnections == null)   return;
  for (  CacheConnection conn : odaConnections) {
    try {
      conn.odaConn.close();
    }
 catch (    DataException e) {
      e.printStackTrace();
    }
  }
}","public void dataEngineShutdown(){
  Map<ConnectionProp,Set<CacheConnection>> odaConnectionsMap=DataSource.dataEngineLevelConnectionPool.remove(this.session);
  if (odaConnectionsMap == null)   return;
  for (  Set<CacheConnection> set : odaConnectionsMap.values()) {
    for (    CacheConnection conn : set) {
      try {
        conn.odaConn.close();
      }
 catch (      DataException e) {
        e.printStackTrace();
      }
    }
  }
}",0.5433746425166825
71635,"/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createDBMetaDataSelectionComposite(Composite parent){
  boolean supportsSchema=JdbcMetaDataProvider.getInstance().isSupportSchema();
  boolean supportsProcedure=JdbcMetaDataProvider.getInstance().isSupportProcedure();
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_VERTICAL);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    data.heightHint=150;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      String text=getTextToInsert();
      if (text.length() > 0) {
        insertText(text);
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
  GridLayout groupLayout=new GridLayout();
  groupLayout.numColumns=3;
  groupLayout.verticalSpacing=10;
  selectTableGroup.setLayout(groupLayout);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  selectTableGroup.setLayoutData(data);
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,prefetchSchema ? SWT.READ_ONLY : SWT.DROP_DOWN);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
  GridData searchTxtData=new GridData(GridData.FILL_HORIZONTAL);
  searchTxtData.horizontalSpan=2;
  searchTxt.setLayoutData(searchTxtData);
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer,supportsProcedure);
  GridData filterData=new GridData(GridData.FILL_HORIZONTAL);
  filterData.horizontalSpan=2;
  filterComboViewer.getControl().setLayoutData(filterData);
  setupShowSystemTableCheckBox(selectTableGroup);
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  GridData btnData=new GridData(GridData.HORIZONTAL_ALIGN_CENTER);
  btnData.horizontalSpan=3;
  findButton.setLayoutData(btnData);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          fc=populateFilterConfig();
          DBNodeUtil.createTreeRoot(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName()),fc);
        }
      }
);
    }
  }
);
  Group sqlOptionGroup=new Group(tablescomposite,SWT.FILL);
  GridLayout sqlOptionGroupLayout=new GridLayout();
  sqlOptionGroupLayout.verticalSpacing=10;
  sqlOptionGroup.setLayout(sqlOptionGroupLayout);
  GridData sqlOptionGroupData=new GridData(GridData.FILL_HORIZONTAL);
  sqlOptionGroup.setLayoutData(sqlOptionGroupData);
  setupIdentifierQuoteStringCheckBox(sqlOptionGroup);
  setupIncludeSchemaCheckBox(sqlOptionGroup);
  String[] allSchemaNames=null;
  if (supportsSchema) {
    String allFlag=JdbcPlugin.getResourceString(""String_Node_Str"");
    schemaCombo.add(allFlag);
    if (prefetchSchema) {
      allSchemaNames=JdbcMetaDataProvider.getInstance().getAllSchemaNames();
      for (      String name : allSchemaNames) {
        schemaCombo.add(name);
      }
    }
    schemaCombo.select(0);
  }
 else {
    schemaCombo.removeAll();
    schemaCombo.setEnabled(false);
    schemaLabel.setEnabled(false);
  }
  if (prefetchSchema) {
    fc=populateFilterConfig();
    DBNodeUtil.createTreeRoot(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName(),allSchemaNames),fc);
  }
 else {
    DBNodeUtil.createRootTip(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName()));
  }
  addDragSupportToTree();
  addFetchDbObjectListener();
  return tablescomposite;
}","/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createDBMetaDataSelectionComposite(Composite parent){
  boolean supportsSchema=JdbcMetaDataProvider.getInstance().isSupportSchema();
  boolean supportsProcedure=JdbcMetaDataProvider.getInstance().isSupportProcedure();
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
  GridData data=new GridData(GridData.FILL_VERTICAL);
  data.grabExcessVerticalSpace=true;
  tablescomposite.setLayoutData(data);
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  GridData labelData=new GridData();
  dataSourceLabel.setLayoutData(labelData);
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
  GridData treeData=new GridData(GridData.FILL_BOTH);
  treeData.grabExcessHorizontalSpace=true;
  treeData.grabExcessVerticalSpace=true;
  treeData.heightHint=150;
  availableDbObjectsTree.setLayoutData(treeData);
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      String text=getTextToInsert();
      if (text.length() > 0) {
        insertText(text);
      }
    }
  }
);
  createSchemaFilterComposite(supportsSchema,supportsProcedure,tablescomposite);
  createSQLOptionGroup(tablescomposite);
  addDragSupportToTree();
  addFetchDbObjectListener();
  return tablescomposite;
}",0.413836877181847
71636,"protected void checkVersion(DataInputStream di) throws IOException {
  String tag=IOUtil.readString(di);
  String docVersion=IOUtil.readString(di);
  if (CORE_VERSION_0.equals(docVersion)) {
    coreVersion=0;
    docVersion=IOUtil.readString(di);
  }
 else   if (CORE_VERSION_1.equals(docVersion)) {
    coreVersion=0;
    docVersion=IOUtil.readString(di);
    properties=IOUtil.readMap(di);
  }
  String[] supportedVersions=new String[]{REPORT_DOCUMENT_VERSION_1_2_1,REPORT_DOCUMENT_VERSION_2_1_0,REPORT_DOCUMENT_VERSION_2_1_3};
  boolean supportedVersion=false;
  if (REPORT_DOCUMENT_TAG.equals(tag)) {
    for (int i=0; i < supportedVersions.length; i++) {
      if (supportedVersions[i].equals(docVersion)) {
        supportedVersion=true;
        break;
      }
    }
  }
  if (supportedVersion == false) {
    throw new IOException(""String_Node_Str"" + tag + ""String_Node_Str""+ docVersion);
  }
  String extensions=(String)properties.get(BIRT_ENGINE_EXTENSIONS);
  if (extensions != null) {
    String[] extIds=extensions.split(""String_Node_Str"");
    for (    String extId : extIds) {
      IReportEngineExtension ext=engine.getEngineExtension(extId);
      if (ext == null) {
        throw new IOException(""String_Node_Str"" + extId);
      }
    }
  }
  if (properties.get(BIRT_ENGINE_VERSION_KEY) == null) {
    if (REPORT_DOCUMENT_VERSION_1_2_1.equals(docVersion)) {
      properties.put(BIRT_ENGINE_VERSION_KEY,BIRT_ENGINE_VERSION_2_1);
    }
 else     if (REPORT_DOCUMENT_VERSION_2_1_0.equals(docVersion)) {
      properties.put(BIRT_ENGINE_VERSION_KEY,BIRT_ENGINE_VERSION_2_1_RC5);
    }
 else     if (REPORT_DOCUMENT_VERSION_2_1_3.equals(docVersion)) {
      properties.put(BIRT_ENGINE_VERSION_KEY,BIRT_ENGINE_VERSION_2_1_3);
    }
  }
  String version=getVersion();
  if (properties.get(DATA_EXTRACTION_TASK_VERSION_KEY) == null) {
    if (BIRT_ENGINE_VERSION_2_1.equals(docVersion) || BIRT_ENGINE_VERSION_2_1_RC5.equals(version)) {
      properties.put(DATA_EXTRACTION_TASK_VERSION_KEY,DATA_EXTRACTION_TASK_VERSION_0);
    }
 else {
      properties.put(DATA_EXTRACTION_TASK_VERSION_KEY,DATA_EXTRACTION_TASK_VERSION_1);
    }
  }
  if (properties.get(PAGE_HINT_VERSION_KEY) == null) {
    properties.put(PAGE_HINT_VERSION_KEY,PAGE_HINT_VERSION_2);
  }
}","protected void checkVersion(DataInputStream di) throws IOException {
  String tag=IOUtil.readString(di);
  String docVersion=IOUtil.readString(di);
  if (CORE_VERSION_0.equals(docVersion)) {
    coreVersion=0;
    docVersion=IOUtil.readString(di);
  }
 else   if (CORE_VERSION_1.equals(docVersion)) {
    coreVersion=0;
    docVersion=IOUtil.readString(di);
    properties=IOUtil.readMap(di);
  }
  String[] supportedVersions=new String[]{REPORT_DOCUMENT_VERSION_1_2_1,REPORT_DOCUMENT_VERSION_2_1_0,REPORT_DOCUMENT_VERSION_2_1_3};
  boolean supportedVersion=false;
  if (REPORT_DOCUMENT_TAG.equals(tag)) {
    for (int i=0; i < supportedVersions.length; i++) {
      if (supportedVersions[i].equals(docVersion)) {
        supportedVersion=true;
        break;
      }
    }
  }
  if (supportedVersion == false) {
    throw new IOException(""String_Node_Str"" + tag + ""String_Node_Str""+ docVersion);
  }
  String extensions=(String)properties.get(BIRT_ENGINE_EXTENSIONS);
  if (extensions != null && extensions.length() > 0) {
    String[] extIds=extensions.split(""String_Node_Str"");
    for (    String extId : extIds) {
      IReportEngineExtension ext=engine.getEngineExtension(extId);
      if (ext == null) {
        throw new IOException(""String_Node_Str"" + extId);
      }
    }
  }
  if (properties.get(BIRT_ENGINE_VERSION_KEY) == null) {
    if (REPORT_DOCUMENT_VERSION_1_2_1.equals(docVersion)) {
      properties.put(BIRT_ENGINE_VERSION_KEY,BIRT_ENGINE_VERSION_2_1);
    }
 else     if (REPORT_DOCUMENT_VERSION_2_1_0.equals(docVersion)) {
      properties.put(BIRT_ENGINE_VERSION_KEY,BIRT_ENGINE_VERSION_2_1_RC5);
    }
 else     if (REPORT_DOCUMENT_VERSION_2_1_3.equals(docVersion)) {
      properties.put(BIRT_ENGINE_VERSION_KEY,BIRT_ENGINE_VERSION_2_1_3);
    }
  }
  String version=getVersion();
  if (properties.get(DATA_EXTRACTION_TASK_VERSION_KEY) == null) {
    if (BIRT_ENGINE_VERSION_2_1.equals(docVersion) || BIRT_ENGINE_VERSION_2_1_RC5.equals(version)) {
      properties.put(DATA_EXTRACTION_TASK_VERSION_KEY,DATA_EXTRACTION_TASK_VERSION_0);
    }
 else {
      properties.put(DATA_EXTRACTION_TASK_VERSION_KEY,DATA_EXTRACTION_TASK_VERSION_1);
    }
  }
  if (properties.get(PAGE_HINT_VERSION_KEY) == null) {
    properties.put(PAGE_HINT_VERSION_KEY,PAGE_HINT_VERSION_2);
  }
}",0.9940854326396495
71637,"public ReportDocumentWriter(IReportEngine engine,IDocArchiveWriter archive,String[] extensions) throws EngineException {
  this.engine=engine;
  this.archive=archive;
  if (extensions != null) {
    StringBuilder sb=new StringBuilder();
    for (    String ext : extensions) {
      sb.append(ext);
      sb.append(""String_Node_Str"");
    }
    if (sb.length() > 0) {
      sb.setLength(sb.length() - 1);
    }
    this.extensions=sb.toString();
  }
  try {
    archive.initialize();
    saveCoreStreams();
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
}","public ReportDocumentWriter(IReportEngine engine,IDocArchiveWriter archive,String[] extensions) throws EngineException {
  this.engine=engine;
  this.archive=archive;
  if (extensions != null && extensions.length > 0) {
    StringBuilder sb=new StringBuilder();
    for (    String ext : extensions) {
      sb.append(ext);
      sb.append(""String_Node_Str"");
    }
    if (sb.length() > 0) {
      sb.setLength(sb.length() - 1);
    }
    this.extensions=sb.toString();
  }
  try {
    archive.initialize();
    saveCoreStreams();
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
}",0.9792874896437448
71638,"public DummyEngineTask(ReportEngine engine,IReportRunnable runnable){
  super(engine,runnable);
}","public DummyEngineTask(ReportEngine engine,IReportRunnable runnable,ModuleHandle moduleHandle){
  super(engine,runnable);
  setEngineTaskParameters(this,moduleHandle);
}",0.7293233082706767
71639,"private java.sql.Date doValidateSqlDateTimeByPattern(String value) throws ValidationValueException {
  try {
    long time=Long.parseLong(value);
    return new java.sql.Date(time);
  }
 catch (  Exception e) {
    throw new ValidationValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
}","private java.sql.Date doValidateSqlDateTimeByPattern(String value,String dataType) throws ValidationValueException {
  try {
    long time=Long.parseLong(value);
    return new java.sql.Date(time);
  }
 catch (  Exception e) {
    Object obj=null;
    try {
      obj=convert(value,dataType);
    }
 catch (    BirtException e1) {
    }
    if (obj instanceof java.sql.Date) {
      return (java.sql.Date)obj;
    }
    throw new ValidationValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
}",0.7778981581798483
71640,"private Object getParameterObject(String key,String value){
  ParameterHandle temp=findParameter(key);
  if (temp instanceof ScalarParameterHandle) {
    ScalarParameterHandle handle=(ScalarParameterHandle)temp;
    String formate=handle.getPattern();
    String dataType=handle.getDataType();
    try {
      if (DesignChoiceConstants.PARAM_TYPE_DATE.equalsIgnoreCase(dataType)) {
        return doValidateSqlDateTimeByPattern(value);
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_TIME.equalsIgnoreCase(dataType)) {
        return doValidateTimeDateTimeByPattern(value);
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
        return doValidateDateTimeByPattern(value);
      }
    }
 catch (    ValidationValueException e) {
      return value;
    }
    try {
      return convert(value,dataType);
    }
 catch (    BirtException e) {
      return value;
    }
  }
 else {
    return value;
  }
}","private Object getParameterObject(String key,String value){
  ParameterHandle temp=findParameter(key);
  if (temp instanceof ScalarParameterHandle) {
    ScalarParameterHandle handle=(ScalarParameterHandle)temp;
    String formate=handle.getPattern();
    String dataType=handle.getDataType();
    try {
      if (DesignChoiceConstants.PARAM_TYPE_DATE.equalsIgnoreCase(dataType)) {
        return doValidateSqlDateTimeByPattern(value,dataType);
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_TIME.equalsIgnoreCase(dataType)) {
        return doValidateTimeDateTimeByPattern(value,dataType);
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
        return doValidateDateTimeByPattern(value,dataType);
      }
    }
 catch (    ValidationValueException e) {
      return value;
    }
    try {
      return convert(value,dataType);
    }
 catch (    BirtException e) {
      return value;
    }
  }
 else {
    return value;
  }
}",0.9861039629439012
71641,"static private java.sql.Time doValidateTimeDateTimeByPattern(String value) throws ValidationValueException {
  try {
    long time=Long.parseLong(value);
    return new java.sql.Time(time);
  }
 catch (  Exception e) {
    throw new ValidationValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
}","static private java.sql.Time doValidateTimeDateTimeByPattern(String value,String dataType) throws ValidationValueException {
  try {
    long time=Long.parseLong(value);
    return new java.sql.Time(time);
  }
 catch (  Exception e) {
    Object obj=null;
    try {
      obj=convert(value,dataType);
    }
 catch (    BirtException e1) {
    }
    if (obj instanceof java.sql.Time) {
      return (java.sql.Time)obj;
    }
    throw new ValidationValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
}",0.7816826411075612
71642,"private Date doValidateDateTimeByPattern(String value) throws ValidationValueException {
  try {
    long time=Long.parseLong(value);
    return new Date(time);
  }
 catch (  Exception e) {
    throw new ValidationValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
}","private Date doValidateDateTimeByPattern(String value,String dataType) throws ValidationValueException {
  try {
    long time=Long.parseLong(value);
    return new Date(time);
  }
 catch (  Exception e) {
    Object obj=null;
    try {
      obj=convert(value,dataType);
    }
 catch (    BirtException e1) {
    }
    if (obj instanceof Date) {
      return (Date)obj;
    }
    throw new ValidationValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
}",0.7833140208574739
71643,"public HashMap getExpressions(){
  if (text == null) {
    return null;
  }
  if (exprs != null) {
    return exprs;
  }
  if (HTML_TEXT.equals(textType) || (AUTO_TEXT.equals(textType) && text.startsWith(""String_Node_Str""))) {
    exprs=new HashMap();
    TextTemplate template=new TemplateParser().parse(text);
    if (template != null && template.getNodes() != null) {
      Iterator itor=template.getNodes().iterator();
      Object obj;
      String expression=null;
      while (itor.hasNext()) {
        obj=itor.next();
        if (obj instanceof TextTemplate.ValueNode) {
          expression=((TextTemplate.ValueNode)obj).getValue();
        }
 else         if (obj instanceof TextTemplate.ImageNode) {
          expression=((TextTemplate.ImageNode)obj).getExpr();
        }
        if (expression != null && !expression.trim().equals(""String_Node_Str"")) {
          exprs.put(expression,expression);
          expression=null;
        }
      }
    }
  }
  return exprs;
}","public HashMap getExpressions(){
  if (text == null) {
    return null;
  }
  if (exprs != null) {
    return exprs;
  }
  if (HTML_TEXT.equals(textType) || (AUTO_TEXT.equals(textType) && (text.substring(0,6).equalsIgnoreCase(""String_Node_Str"")))) {
    exprs=new HashMap();
    TextTemplate template=new TemplateParser().parse(text);
    if (template != null && template.getNodes() != null) {
      Iterator itor=template.getNodes().iterator();
      Object obj;
      String expression=null;
      while (itor.hasNext()) {
        obj=itor.next();
        if (obj instanceof TextTemplate.ValueNode) {
          expression=((TextTemplate.ValueNode)obj).getValue();
        }
 else         if (obj instanceof TextTemplate.ImageNode) {
          expression=((TextTemplate.ImageNode)obj).getExpr();
        }
        if (expression != null && !expression.trim().equals(""String_Node_Str"")) {
          exprs.put(expression,expression);
          expression=null;
        }
      }
    }
  }
  return exprs;
}",0.973326623049824
71644,"/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createDBMetaDataSelectionComposite(Composite parent){
  boolean supportsSchema=JdbcMetaDataProvider.getInstance().isSupportSchema();
  boolean supportsProcedure=JdbcMetaDataProvider.getInstance().isSupportProcedure();
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_VERTICAL);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    data.heightHint=150;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      String text=getTextToInsert();
      if (text.length() > 0) {
        insertText(text);
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,prefetchSchema ? SWT.READ_ONLY : SWT.DROP_DOWN);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer,supportsProcedure);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    filterComboViewer.getControl().setLayoutData(data);
  }
  new Label(selectTableGroup,SWT.LEFT);
  setupShowSystemTableCheckBox(selectTableGroup);
  Button findButton=new Button(selectTableGroup,SWT.NONE);
{
    GridData data=new GridData(GridData.HORIZONTAL_ALIGN_END);
    data.horizontalSpan=3;
    findButton.setLayoutData(data);
  }
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          fc=populateFilterConfig();
          DBNodeUtil.createTreeRoot(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName()),fc);
        }
      }
);
    }
  }
);
  setupIdentifierQuoteStringCheckBox(selectTableGroup);
  String[] allSchemaNames=null;
  if (supportsSchema) {
    String allFlag=JdbcPlugin.getResourceString(""String_Node_Str"");
    schemaCombo.add(allFlag);
    if (prefetchSchema) {
      allSchemaNames=JdbcMetaDataProvider.getInstance().getAllSchemaNames();
      for (      String name : allSchemaNames) {
        schemaCombo.add(name);
      }
    }
    schemaCombo.select(0);
  }
 else {
    schemaCombo.removeAll();
    schemaCombo.setEnabled(false);
    schemaLabel.setEnabled(false);
  }
  if (prefetchSchema) {
    fc=populateFilterConfig();
    DBNodeUtil.createTreeRoot(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName(),allSchemaNames),fc);
  }
 else {
    DBNodeUtil.createRootTip(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName()));
  }
  addDragSupportToTree();
  addFetchDbObjectListener();
  return tablescomposite;
}","/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createDBMetaDataSelectionComposite(Composite parent){
  boolean supportsSchema=JdbcMetaDataProvider.getInstance().isSupportSchema();
  boolean supportsProcedure=JdbcMetaDataProvider.getInstance().isSupportProcedure();
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_VERTICAL);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    data.heightHint=150;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      String text=getTextToInsert();
      if (text.length() > 0) {
        insertText(text);
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
  GridLayout groupLayout=new GridLayout();
  groupLayout.numColumns=3;
  groupLayout.verticalSpacing=10;
  selectTableGroup.setLayout(groupLayout);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  selectTableGroup.setLayoutData(data);
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,prefetchSchema ? SWT.READ_ONLY : SWT.DROP_DOWN);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
  GridData searchTxtData=new GridData(GridData.FILL_HORIZONTAL);
  searchTxtData.horizontalSpan=2;
  searchTxt.setLayoutData(searchTxtData);
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer,supportsProcedure);
  GridData filterData=new GridData(GridData.FILL_HORIZONTAL);
  filterData.horizontalSpan=2;
  filterComboViewer.getControl().setLayoutData(filterData);
  setupShowSystemTableCheckBox(selectTableGroup);
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  GridData btnData=new GridData(GridData.HORIZONTAL_ALIGN_CENTER);
  btnData.horizontalSpan=3;
  findButton.setLayoutData(btnData);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          fc=populateFilterConfig();
          DBNodeUtil.createTreeRoot(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName()),fc);
        }
      }
);
    }
  }
);
  Group sqlOptionGroup=new Group(tablescomposite,SWT.FILL);
  GridLayout sqlOptionGroupLayout=new GridLayout();
  sqlOptionGroupLayout.verticalSpacing=10;
  sqlOptionGroup.setLayout(sqlOptionGroupLayout);
  GridData sqlOptionGroupData=new GridData(GridData.FILL_HORIZONTAL);
  sqlOptionGroup.setLayoutData(sqlOptionGroupData);
  setupIdentifierQuoteStringCheckBox(sqlOptionGroup);
  setupIncludeSchemaCheckBox(sqlOptionGroup);
  String[] allSchemaNames=null;
  if (supportsSchema) {
    String allFlag=JdbcPlugin.getResourceString(""String_Node_Str"");
    schemaCombo.add(allFlag);
    if (prefetchSchema) {
      allSchemaNames=JdbcMetaDataProvider.getInstance().getAllSchemaNames();
      for (      String name : allSchemaNames) {
        schemaCombo.add(name);
      }
    }
    schemaCombo.select(0);
  }
 else {
    schemaCombo.removeAll();
    schemaCombo.setEnabled(false);
    schemaLabel.setEnabled(false);
  }
  if (prefetchSchema) {
    fc=populateFilterConfig();
    DBNodeUtil.createTreeRoot(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName(),allSchemaNames),fc);
  }
 else {
    DBNodeUtil.createRootTip(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName()));
  }
  addDragSupportToTree();
  addFetchDbObjectListener();
  return tablescomposite;
}",0.9277318241184154
71645,"private String getTextToInsert(){
  TreeItem[] selection=availableDbObjectsTree.getSelection();
  StringBuffer data=new StringBuffer();
  if (selection != null && selection.length > 0) {
    for (int i=0; i < selection.length; i++) {
      IDBNode dbNode=(IDBNode)selection[i].getData();
      String sql=dbNode.getQualifiedNameInSQL(identifierQuoteStringCheckBox.getSelection());
      if (sql != null) {
        data.append(sql).append(""String_Node_Str"");
      }
    }
  }
  String result=data.toString();
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  return result;
}","private String getTextToInsert(){
  TreeItem[] selection=availableDbObjectsTree.getSelection();
  StringBuffer data=new StringBuffer();
  if (selection != null && selection.length > 0) {
    for (int i=0; i < selection.length; i++) {
      IDBNode dbNode=(IDBNode)selection[i].getData();
      String sql=dbNode.getQualifiedNameInSQL(identifierQuoteStringCheckBox.getSelection(),includeSchemaCheckBox.getSelection());
      if (sql != null) {
        data.append(sql).append(""String_Node_Str"");
      }
    }
  }
  String result=data.toString();
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  return result;
}",0.9706582077716098
71646,"/** 
 * @param useIdentifierQuoteString: whether use identifier quote string when populating qualified name
 * @return the full qualified name in a SQL text.<p>null if it can't be a part of SQL text.
 */
String getQualifiedNameInSQL(boolean useIdentifierQuoteString);","/** 
 * @param useIdentifierQuoteString: whether use identifier quote string when populating qualified name
 * @return the full qualified name in a SQL text.<p>null if it can't be a part of SQL text.
 */
String getQualifiedNameInSQL(boolean useIdentifierQuoteString,boolean includeSchema);",0.960431654676259
71647,"/** 
 * can't be part of a SQL text
 */
public String getQualifiedNameInSQL(boolean useIdentifierQuoteString){
  return null;
}","/** 
 * can't be part of a SQL text
 */
public String getQualifiedNameInSQL(boolean useIdentifierQuoteString,boolean includeSchema){
  return null;
}",0.9202898550724636
71648,"/** 
 * Just a flag node, can't be part of a SQL text
 */
public String getQualifiedNameInSQL(boolean useIdentifierQuoteString){
  return null;
}","/** 
 * Just a flag node, can't be part of a SQL text
 */
public String getQualifiedNameInSQL(boolean useIdentifierQuoteString,boolean includeSchema){
  return null;
}",0.9294871794871796
71649,"public String getQualifiedNameInSQL(boolean useIdentifierQuoteString){
  StringBuffer sb=new StringBuffer();
  String quoteFlag=""String_Node_Str"";
  if (useIdentifierQuoteString) {
    quoteFlag=JdbcMetaDataProvider.getInstance().getIdentifierQuoteString();
  }
  if (schemaName != null) {
    sb.append(Utility.quoteString(schemaName,quoteFlag)).append(""String_Node_Str"");
  }
  sb.append(Utility.quoteString(procedureName,quoteFlag));
  return sb.toString();
}","public String getQualifiedNameInSQL(boolean useIdentifierQuoteString,boolean includeSchema){
  StringBuffer sb=new StringBuffer();
  String quoteFlag=""String_Node_Str"";
  if (useIdentifierQuoteString) {
    quoteFlag=JdbcMetaDataProvider.getInstance().getIdentifierQuoteString();
  }
  if (includeSchema && schemaName != null) {
    sb.append(Utility.quoteString(schemaName,quoteFlag)).append(""String_Node_Str"");
  }
  sb.append(Utility.quoteString(procedureName,quoteFlag));
  return sb.toString();
}",0.9595015576323987
71650,"/** 
 * Can't be a part of SQL text
 */
public String getQualifiedNameInSQL(boolean useIdentifierQuoteString){
  return null;
}","/** 
 * Can't be a part of SQL text
 */
public String getQualifiedNameInSQL(boolean useIdentifierQuoteString,boolean includeSchema){
  return null;
}",0.9202898550724636
71651,"public String getQualifiedNameInSQL(boolean useIdentifierQuoteString){
  String quoteFlag=""String_Node_Str"";
  if (useIdentifierQuoteString) {
    quoteFlag=JdbcMetaDataProvider.getInstance().getIdentifierQuoteString();
  }
  return Utility.quoteString(schemaName,quoteFlag);
}","public String getQualifiedNameInSQL(boolean useIdentifierQuoteString,boolean includeSchema){
  String quoteFlag=""String_Node_Str"";
  if (useIdentifierQuoteString) {
    quoteFlag=JdbcMetaDataProvider.getInstance().getIdentifierQuoteString();
  }
  return Utility.quoteString(schemaName,quoteFlag);
}",0.9618055555555556
71652,"public String getQualifiedNameInSQL(boolean useIdentifierQuoteString){
  StringBuffer sb=new StringBuffer();
  String quoteFlag=""String_Node_Str"";
  if (useIdentifierQuoteString) {
    quoteFlag=JdbcMetaDataProvider.getInstance().getIdentifierQuoteString();
  }
  if (schemaName != null) {
    sb.append(Utility.quoteString(schemaName,quoteFlag)).append(""String_Node_Str"");
  }
  sb.append(Utility.quoteString(tableName,quoteFlag));
  return sb.toString();
}","public String getQualifiedNameInSQL(boolean useIdentifierQuoteString,boolean includeSchema){
  StringBuffer sb=new StringBuffer();
  String quoteFlag=""String_Node_Str"";
  if (useIdentifierQuoteString) {
    quoteFlag=JdbcMetaDataProvider.getInstance().getIdentifierQuoteString();
  }
  if (includeSchema && schemaName != null) {
    sb.append(Utility.quoteString(schemaName,quoteFlag)).append(""String_Node_Str"");
  }
  sb.append(Utility.quoteString(tableName,quoteFlag));
  return sb.toString();
}",0.9591623036649216
71653,"public void openPage(INode[] nodeList){
  currentBuffer.openPage(nodeList);
}","public void openPage(INode[] nodeList){
  currentBuffer.openPage(nodeList);
  nestCount++;
}",0.9112426035502958
71654,"public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    INode[] nodeList=currentBuffer.getNodeStack();
  nestCount--;
if (currentTableIndex == nestCount + 1 && currentTableIndex > 0) {
  assert(buffers != null);
  for (int i=0; i < buffers.length - 1; i++) {
    buffers[i].closePage(nodeList);
  }
  buffers[buffers.length - 1].endContainer(content,finished,emitter,visible);
  context.getBufferFactory().refresh();
  currentBuffer=buffers[buffers.length - 1];
  buffers=null;
  currentTableIndex=-1;
}
 else {
  currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount) {
if (pageBreakIndexs.length - 1 != currentIndex) {
for (int i=currentIndex; i < pageBreakIndexs.length; i++) {
  currentIndex=i;
  currentBuffer=buffers[currentIndex];
  repeatCells(emitter);
}
}
endContainerInPages(content,finished,emitter,visible);
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
int pageIndex=needPageBreak((ICellContent)content);
if (pageIndex >= 0) {
currentBuffer.endContainer(content,false,emitter,visible);
for (int i=currentIndex + 1; i < pageIndex; i++) {
currentBuffer=buffers[i];
repeatCells(emitter);
currentBuffer.startContainer(content,false,emitter,visible);
currentBuffer.endContainer(content,finished,emitter,visible);
}
pageIndex=(pageIndex == pageBreakIndexs.length ? pageIndex - 1 : pageIndex);
currentBuffer=buffers[pageIndex];
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.END_CONTAINER_EVENT));
isRepeatStatus=false;
}
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.PAGE_CONTENT:
currentBuffer.endContainer(content,finished,emitter,visible);
context.getBufferFactory().refresh();
break;
default :
currentBuffer.endContainer(content,finished,emitter,visible);
break;
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.END_CONTAINER_EVENT));
}
}","public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    INode[] nodeList=currentBuffer.getNodeStack();
  nestCount--;
if (currentTableIndex == nestCount + 1 && currentTableIndex > 0) {
  assert(buffers != null);
  for (int i=0; i < buffers.length - 1; i++) {
    buffers[i].closePage(nodeList);
    buffers[i]=null;
  }
  buffers[buffers.length - 1].endContainer(content,finished,emitter,visible);
  context.getBufferFactory().refresh();
  currentBuffer=buffers[buffers.length - 1];
  currentTableIndex=-1;
}
 else {
  currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
if (pageBreakIndexs.length - 1 != currentIndex) {
for (int i=currentIndex; i < pageBreakIndexs.length; i++) {
  currentIndex=i;
  currentBuffer=buffers[currentIndex];
  repeatCells(emitter);
}
}
endContainerInPages(content,finished,emitter,visible);
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
int pageIndex=needPageBreak((ICellContent)content);
if (pageIndex >= 0) {
currentBuffer.endContainer(content,false,emitter,visible);
for (int i=currentIndex + 1; i < pageIndex; i++) {
currentBuffer=buffers[i];
repeatCells(emitter);
currentBuffer.startContainer(content,false,emitter,visible);
currentBuffer.endContainer(content,finished,emitter,visible);
}
pageIndex=(pageIndex == pageBreakIndexs.length ? pageIndex - 1 : pageIndex);
currentBuffer=buffers[pageIndex];
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.END_CONTAINER_EVENT));
isRepeatStatus=false;
}
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.PAGE_CONTENT:
currentBuffer.endContainer(content,finished,emitter,visible);
context.getBufferFactory().refresh();
break;
default :
currentBuffer.endContainer(content,finished,emitter,visible);
break;
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.END_CONTAINER_EVENT));
}
}",0.986808510638298
71655,"public void closePage(INode[] nodeList){
  currentBuffer.closePage(nodeList);
}","public void closePage(INode[] nodeList){
  currentBuffer.closePage(nodeList);
  nestCount--;
}",0.9132947976878611
71656,"public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible){
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    nestCount++;
  ITableContent table=(ITableContent)content;
boolean hasPageBreak=hasPageBreak(table);
if (hasPageBreak) {
if (currentTableIndex < 0) {
  INode[] nodeList=currentBuffer.getNodeStack();
  pageBreakIndexs=getPageBreakIndex(table);
  repeatEnd=getRepeatEnd(table);
  currentBuffer.startContainer(createTable(table,pageBreakIndexs,0),isFirst,emitter,visible);
  currentTableIndex=nestCount;
  buffers=new IPageBuffer[pageBreakIndexs.length];
  buffers[0]=currentBuffer;
  String tableId=table.getInstanceID().toUniqueString();
  currentBuffer.addTableColumnHint(new TableColumnHint(tableId,0,pageBreakIndexs[0] + 1));
  for (int i=1; i < pageBreakIndexs.length; i++) {
    buffers[i]=new TableBreakBuffer(null,context);
    INode[] list=new INode[nodeList.length + 1];
    ITableContent newTable=createTable(table,pageBreakIndexs,i);
    list[0]=new ContainerBufferNode(newTable,emitter,null,true);
    for (int j=0; j < nodeList.length; j++) {
      list[j + 1]=nodeList[j];
    }
    buffers[i].openPage(list);
    if (hasRepeatedColumn) {
      buffers[i].addTableColumnHint(new TableColumnHint(tableId,repeatStart,repeatEnd - repeatStart));
    }
    buffers[i].addTableColumnHint(new TableColumnHint(tableId,pageBreakIndexs[i - 1] + 1,pageBreakIndexs[i] - pageBreakIndexs[i - 1]));
  }
}
 else {
  currentBuffer.startContainer(content,isFirst,emitter,visible);
}
}
 else {
currentBuffer.startContainer(content,isFirst,emitter,visible);
}
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
currentIndex=0;
currentBuffer=buffers[0];
startContainerInPages(content,isFirst,emitter,visible);
if (hasRepeatedColumn) {
repeatEvent.clear();
}
}
 else {
currentBuffer.startContainer(content,isFirst,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
if (hasRepeatedColumn && isRepeatedCell((ICellContent)content)) {
isRepeatStatus=true;
}
int index=getPageIndex((ICellContent)content);
if (index != currentIndex) {
currentIndex=index;
repeatCells(emitter);
}
currentBuffer=buffers[currentIndex];
}
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
default :
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.START_CONTAINER_EVENT));
}
}","public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible){
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    nestCount++;
  if (buffers == null) {
    ITableContent table=(ITableContent)content;
    boolean hasPageBreak=hasPageBreak(table);
    if (hasPageBreak) {
      if (currentTableIndex < 0) {
        INode[] nodeList=currentBuffer.getNodeStack();
        pageBreakIndexs=getPageBreakIndex(table);
        repeatEnd=getRepeatEnd(table);
        currentBuffer.startContainer(createTable(table,pageBreakIndexs,0),isFirst,emitter,visible);
        currentTableIndex=nestCount;
        buffers=new IPageBuffer[pageBreakIndexs.length];
        buffers[0]=currentBuffer;
        String tableId=table.getInstanceID().toUniqueString();
        currentBuffer.addTableColumnHint(new TableColumnHint(tableId,0,pageBreakIndexs[0] + 1));
        for (int i=1; i < pageBreakIndexs.length; i++) {
          buffers[i]=new TableBreakBuffer(null,context);
          INode[] list=new INode[nodeList.length + 1];
          ITableContent newTable=createTable(table,pageBreakIndexs,i);
          list[0]=new ContainerBufferNode(newTable,emitter,null,true);
          for (int j=0; j < nodeList.length; j++) {
            list[j + 1]=nodeList[j];
          }
          buffers[i].openPage(list);
          if (hasRepeatedColumn) {
            buffers[i].addTableColumnHint(new TableColumnHint(tableId,repeatStart,repeatEnd - repeatStart));
          }
          buffers[i].addTableColumnHint(new TableColumnHint(tableId,pageBreakIndexs[i - 1] + 1,pageBreakIndexs[i] - pageBreakIndexs[i - 1]));
        }
      }
    }
 else {
      currentBuffer.startContainer(content,isFirst,emitter,visible);
    }
  }
 else {
    currentBuffer.startContainer(content,isFirst,emitter,visible);
  }
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
currentIndex=0;
currentBuffer=buffers[0];
startContainerInPages(content,isFirst,emitter,visible);
if (hasRepeatedColumn) {
  repeatEvent.clear();
}
}
 else {
currentBuffer.startContainer(content,isFirst,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
if (hasRepeatedColumn && isRepeatedCell((ICellContent)content)) {
isRepeatStatus=true;
}
int index=getPageIndex((ICellContent)content);
if (index != currentIndex) {
currentIndex=index;
repeatCells(emitter);
}
currentBuffer=buffers[currentIndex];
}
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
default :
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.START_CONTAINER_EVENT));
}
}",0.9458814896349294
71657,"/** 
 * @param session
 * @param queryDefn
 * @param queryResults
 */
public static void merge(DataEngineSession session,IBaseQueryDefinition queryDefn,IQueryResults queryResults){
  try {
    if (session == null || queryResults.getResultMetaData() == null || queryResults.getResultMetaData().getColumnCount() == 0 || queryDefn instanceof ISubqueryDefinition)     return;
  }
 catch (  BirtException e) {
    return;
  }
  String elementId=queryDefn.getName();
  String bookmark=queryResults.getName();
  String rsId=queryResults.getID();
  NamingRelation relation=session.getNamingRelation();
  if (relation == null) {
    relation=new NamingRelation();
    session.setNamingRelation(relation);
  }
  Map bookmarkMap=relation.getBookmarkMap();
  Map elementIdMap=relation.getElementIdMap();
  if (bookmark != null) {
    if (bookmarkMap.get(bookmark) == null) {
      bookmarkMap.put(bookmark,rsId);
    }
 else {
      Object value=bookmarkMap.get(bookmark);
      if (value instanceof String) {
        Map subMap=new HashMap();
        subMap.put(getSubKey(subMap),value);
        bookmarkMap.put(bookmark,subMap);
      }
 else       if (value instanceof Map) {
        Map subMap=(Map)value;
        subMap.put(getSubKey(subMap),rsId);
      }
    }
  }
  if (elementId != null) {
    if (elementIdMap.get(elementId) == null) {
      elementIdMap.put(elementId,rsId);
    }
 else {
      Object value=elementIdMap.get(elementId);
      if (value instanceof String) {
        Map subMap=new HashMap();
        subMap.put(getSubKey(subMap),value);
        elementIdMap.put(elementId,subMap);
      }
 else       if (value instanceof Map) {
        Map subMap=(Map)value;
        subMap.put(getSubKey(subMap),rsId);
      }
    }
  }
}","/** 
 * @param session
 * @param queryDefn
 * @param queryResults
 */
public static void merge(DataEngineSession session,IBaseQueryDefinition queryDefn,IQueryResults queryResults){
  if (session == null || queryResults.getPreparedQuery() == null || queryResults.getPreparedQuery().getReportQueryDefn() == null || queryResults.getPreparedQuery().getReportQueryDefn().getBindings().size() == 0 || queryDefn instanceof ISubqueryDefinition)   return;
  String elementId=queryDefn.getName();
  String bookmark=queryResults.getName();
  String rsId=queryResults.getID();
  NamingRelation relation=session.getNamingRelation();
  if (relation == null) {
    relation=new NamingRelation();
    session.setNamingRelation(relation);
  }
  Map bookmarkMap=relation.getBookmarkMap();
  Map elementIdMap=relation.getElementIdMap();
  if (bookmark != null) {
    if (bookmarkMap.get(bookmark) == null) {
      bookmarkMap.put(bookmark,rsId);
    }
 else {
      Object value=bookmarkMap.get(bookmark);
      if (value instanceof String) {
        Map subMap=new HashMap();
        subMap.put(getSubKey(subMap),value);
        bookmarkMap.put(bookmark,subMap);
      }
 else       if (value instanceof Map) {
        Map subMap=(Map)value;
        subMap.put(getSubKey(subMap),rsId);
      }
    }
  }
  if (elementId != null) {
    if (elementIdMap.get(elementId) == null) {
      elementIdMap.put(elementId,rsId);
    }
 else {
      Object value=elementIdMap.get(elementId);
      if (value instanceof String) {
        Map subMap=new HashMap();
        subMap.put(getSubKey(subMap),value);
        elementIdMap.put(elementId,subMap);
      }
 else       if (value instanceof Map) {
        Map subMap=(Map)value;
        subMap.put(getSubKey(subMap),rsId);
      }
    }
  }
}",0.9257567104511708
71658,"/** 
 * Set the separator of the concatenated string
 * @param source
 * @throws BirtException
 */
private void setSeparator(Object source) throws BirtException {
  String value=DataTypeUtil.toString(source);
  if (value == null || value.trim().length() > 1) {
    throw new DataException(Messages.getString(""String_Node_Str"") + getName());
  }
  separator=value.trim();
}","/** 
 * Set the separator of the concatenated string
 * @param source
 * @throws BirtException
 */
private void setSeparator(Object source) throws BirtException {
  String value=DataTypeUtil.toString(source);
  if (value == null || value.length() == 0) {
    throw new DataException(Messages.getString(""String_Node_Str"") + getName());
  }
  separator=value;
}",0.9466484268125857
71659,"public void testTotalConcatenate() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_CONCATENATE_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(4,ag.getParameterDefn().length);
  String separator=""String_Node_Str"";
  String result=""String_Node_Str"";
  ac.start();
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,null,null});
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  for (int i=0; i < str4.length; i++) {
    ac.onRow(new Object[]{str4[i],separator,null,null});
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  boolean exceedsMaxLength=false;
  for (int i=0; i < str4.length; i++) {
    ac.onRow(new Object[]{str4[i],separator,50,true});
    if (exceedsMaxLength || result.getBytes().length > 50 - str4[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str4[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  LinkedHashSet<String> objects=new LinkedHashSet<String>();
  for (int i=0; i < anyObjectArray2.length; i++) {
    if (anyObjectArray2[i] != null) {
      objects.add(anyObjectArray2[i].toString());
    }
  }
  Iterator<String> iterator=objects.iterator();
  while (iterator.hasNext()) {
    String value=iterator.next();
    ac.onRow(new Object[]{value,separator,30,false});
    if (value != null) {
      if (exceedsMaxLength || result.getBytes().length > 30 - value.length()) {
        exceedsMaxLength=true;
        continue;
      }
      result+=value;
      result+=separator;
    }
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
}","public void testTotalConcatenate() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_CONCATENATE_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(4,ag.getParameterDefn().length);
  String separator=""String_Node_Str"";
  String result=""String_Node_Str"";
  ac.start();
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,null,null});
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  for (int i=0; i < str4.length; i++) {
    ac.onRow(new Object[]{str4[i],separator,null,null});
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  boolean exceedsMaxLength=false;
  for (int i=0; i < str4.length; i++) {
    ac.onRow(new Object[]{str4[i],separator,50,true});
    if (exceedsMaxLength || result.getBytes().length > 50 - str4[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str4[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  for (int i=0; i < str2.length; i++) {
    ac.onRow(new Object[]{str2[i],separator,20,null});
    if (exceedsMaxLength || result.getBytes().length > 20 - str2[i].length()) {
      exceedsMaxLength=true;
      continue;
    }
    result+=str2[i];
    result+=separator;
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
  ac.start();
  result=""String_Node_Str"";
  separator=""String_Node_Str"";
  exceedsMaxLength=false;
  LinkedHashSet<String> objects=new LinkedHashSet<String>();
  for (int i=0; i < anyObjectArray2.length; i++) {
    if (anyObjectArray2[i] != null) {
      objects.add(anyObjectArray2[i].toString());
    }
  }
  Iterator<String> iterator=objects.iterator();
  while (iterator.hasNext()) {
    String value=iterator.next();
    ac.onRow(new Object[]{value,separator,30,false});
    if (value != null) {
      if (exceedsMaxLength || result.getBytes().length > 30 - value.length()) {
        exceedsMaxLength=true;
        continue;
      }
      result+=value;
      result+=separator;
    }
  }
  if (result.length() > 0) {
    result=result.substring(0,result.length() - 1);
  }
  ac.finish();
  assertEquals(result,ac.getValue());
}",0.6773582523045839
71660,"protected void adjustGridLayout(){
  super.adjustGridLayout();
  ((GridData)verticalAlign.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=167;
  ((GridData)textAlign.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=167;
  ((GridData)textTrans.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=167;
  ((GridData)whiteSpace.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=167;
  ((GridData)display.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=167;
  if (direction != null)   ((GridData)direction.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=167;
}","protected void adjustGridLayout(){
  super.adjustGridLayout();
  ((GridData)verticalAlign.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=167;
  ((GridData)textAlign.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=167;
  ((GridData)textTrans.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=167;
  ((GridData)whiteSpace.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=167;
  ((GridData)display.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=167;
  ((GridData)direction.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=167;
}",0.9812734082397004
71661,"/** 
 * Calculates the spacing by given container width, text width and horizontal alignment style.
 * @param compWidth Container width.
 * @param textWidth Text width.
 * @return
 * @author bidi_hcg
 */
protected int calculateSpacing(int compWidth,int textWidth){
  int rlt=0;
  String align=BidiAlignmentResolver.resolveAlignment(textAlign,isMirrored());
  if (align == null) {
    if (getDirection() != null) {
      if (getDirection().equals(DesignChoiceConstants.BIDI_DIRECTION_LTR) && isMirrored()) {
        align=DesignChoiceConstants.TEXT_ALIGN_RIGHT;
      }
 else       if (getDirection().equals(DesignChoiceConstants.BIDI_DIRECTION_RTL) && !isMirrored()) {
        align=DesignChoiceConstants.TEXT_ALIGN_RIGHT;
      }
    }
 else {
      if (isMirrored()) {
        align=DesignChoiceConstants.TEXT_ALIGN_RIGHT;
      }
 else {
        align=DesignChoiceConstants.TEXT_ALIGN_LEFT;
      }
    }
  }
  if (DesignChoiceConstants.TEXT_ALIGN_LEFT.equals(align) || DesignChoiceConstants.TEXT_ALIGN_JUSTIFY.equals(align)) {
    rlt=0;
  }
 else   if (DesignChoiceConstants.TEXT_ALIGN_CENTER.equals(align)) {
    rlt=(compWidth - textWidth) / 2;
  }
 else   if (DesignChoiceConstants.TEXT_ALIGN_RIGHT.equals(align)) {
    rlt=(compWidth - textWidth);
  }
  return rlt;
}","/** 
 * Calculates the spacing by given container width, text width and horizontal alignment style.
 * @param compWidth Container width.
 * @param textWidth Text width.
 * @return
 * @author bidi_hcg
 */
protected int calculateSpacing(int compWidth,int textWidth){
  int rlt=0;
  String align=BidiAlignmentResolver.resolveAlignmentForDesigner(textAlign,getDirection(),isMirrored());
  if (DesignChoiceConstants.TEXT_ALIGN_LEFT.equals(align)) {
    rlt=0;
  }
 else   if (DesignChoiceConstants.TEXT_ALIGN_CENTER.equals(align)) {
    rlt=(compWidth - textWidth) / 2;
  }
 else   if (DesignChoiceConstants.TEXT_ALIGN_RIGHT.equals(align)) {
    rlt=(compWidth - textWidth);
  }
  return rlt;
}",0.4346055979643766
71662,"/** 
 * @param style
 * @return A new CellEditor style
 * @author bidi_hcg
 */
private int applyBidiStyle(int style){
  boolean rtl=DesignChoiceConstants.BIDI_DIRECTION_RTL.equals(((LabelFigure)getEditPart().getFigure()).getDirection());
  style|=(rtl ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT);
  String align=((LabelFigure)getEditPart().getFigure()).getTextAlign();
  if (align == null) {
    String direction=((LabelFigure)getEditPart().getFigure()).getDirection();
    boolean isMirrored=getEditPart().getFigure().isMirrored();
    if (direction != null) {
      if (direction.equals(DesignChoiceConstants.BIDI_DIRECTION_LTR) && isMirrored) {
        align=DesignChoiceConstants.TEXT_ALIGN_LEFT;
      }
 else       if (direction.equals(DesignChoiceConstants.BIDI_DIRECTION_RTL) && !isMirrored) {
        align=DesignChoiceConstants.TEXT_ALIGN_RIGHT;
      }
    }
 else {
      if (isMirrored) {
        align=DesignChoiceConstants.TEXT_ALIGN_RIGHT;
      }
 else {
        align=DesignChoiceConstants.TEXT_ALIGN_LEFT;
      }
    }
  }
  if (IStyle.CSS_CENTER_VALUE.equals(align))   style|=SWT.CENTER;
 else   if (IStyle.CSS_RIGHT_VALUE.equals(align))   style|=(rtl ? SWT.LEFT : SWT.RIGHT);
 else   if (IStyle.CSS_LEFT_VALUE.equals(align))   style|=(rtl ? SWT.RIGHT : SWT.LEFT);
 else {
    boolean mirrored=getEditPart().getFigure().isMirrored();
    style|=(mirrored ^ rtl ? SWT.RIGHT : SWT.LEFT);
  }
  return style;
}","/** 
 * @param style
 * @return A new CellEditor style
 * @author bidi_hcg
 */
private int applyBidiStyle(int style){
  LabelFigure figure=(LabelFigure)getEditPart().getFigure();
  boolean rtl=DesignChoiceConstants.BIDI_DIRECTION_RTL.equals(figure.getDirection());
  style|=(rtl ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT);
  String align=figure.getTextAlign();
  if (IStyle.CSS_CENTER_VALUE.equals(align))   style|=SWT.CENTER;
 else   if (IStyle.CSS_RIGHT_VALUE.equals(align))   style|=(rtl ? SWT.LEFT : SWT.RIGHT);
 else   if (IStyle.CSS_LEFT_VALUE.equals(align))   style|=(rtl ? SWT.RIGHT : SWT.LEFT);
 else   style|=SWT.LEFT;
  return style;
}",0.3634606089898501
71663,"public Image loadImage(URL url,boolean refresh) throws IOException {
  String key=url.toString();
  Image image=null;
  if (refresh) {
    image=getImageRegistry().get(key);
    if (image != null) {
      return image;
    }
  }
  InputStream in=null;
  try {
    if (url.toString().toLowerCase().endsWith(""String_Node_Str"")) {
      JPEGTranscoder transcoder=new JPEGTranscoder();
      transcoder.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,new Float(.8));
      String svgURI=url.toString();
      TranscoderInput input=new TranscoderInput(svgURI);
      ByteArrayOutputStream ostream=new ByteArrayOutputStream();
      TranscoderOutput output=new TranscoderOutput(ostream);
      try {
        transcoder.transcode(input,output);
      }
 catch (      TranscoderException e) {
      }
      ostream.flush();
      in=new ByteArrayInputStream(ostream.toByteArray());
    }
 else {
      in=url.openStream();
    }
    image=new Image(null,in);
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    if (in != null) {
      in.close();
    }
  }
  if (image != null) {
    getImageRegistry().remove(key);
    getImageRegistry().put(key,image);
  }
  return image;
}","public Image loadImage(URL url,boolean refresh) throws IOException {
  String key=url.toString();
  Image image=null;
  if (!refresh) {
    image=getImageRegistry().get(key);
    if (image != null) {
      return image;
    }
  }
  InputStream in=null;
  try {
    if (url.toString().toLowerCase().endsWith(""String_Node_Str"")) {
      JPEGTranscoder transcoder=new JPEGTranscoder();
      transcoder.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,new Float(.8));
      String svgURI=url.toString();
      TranscoderInput input=new TranscoderInput(svgURI);
      ByteArrayOutputStream ostream=new ByteArrayOutputStream();
      TranscoderOutput output=new TranscoderOutput(ostream);
      try {
        transcoder.transcode(input,output);
      }
 catch (      TranscoderException e) {
      }
      ostream.flush();
      in=new ByteArrayInputStream(ostream.toByteArray());
    }
 else {
      in=url.openStream();
    }
    image=new Image(null,in);
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    if (in != null) {
      in.close();
    }
  }
  if (image != null) {
    getImageRegistry().remove(key);
    getImageRegistry().put(key,image);
  }
  return image;
}",0.9995753715498938
71664,"protected void closeLayout(ContainerContext currentContext,int index,boolean finished){
  if (currentContext.root != null) {
    boolean added=false;
    if (unresolvedRow != null) {
      TableContext tc=(TableContext)(tbl.contextList.get(index));
      tc.layout.setUnresolvedRow(unresolvedRow);
    }
    tbl.updateRow((RowArea)currentContext.root,specifiedHeight,index);
    if (finished || !isRowEmpty(currentContext)) {
      tbl.addRow((RowArea)currentContext.root,index);
      parent.addToRoot(currentContext.root,index);
      added=true;
    }
    if (!finished && unresolvedRow == null) {
      TableContext tc=(TableContext)(tbl.contextList.get(index));
      if (added) {
        unresolvedRow=tc.layout.getUnresolvedRow();
      }
 else {
        unresolvedRow=tc.layout.getUnresolvedRow((RowArea)currentContext.root);
      }
    }
  }
}","protected void closeLayout(ContainerContext currentContext,int index,boolean finished){
  if (currentContext.root != null) {
    if (unresolvedRow != null) {
      TableContext tc=(TableContext)(tbl.contextList.get(index));
      tc.layout.setUnresolvedRow(unresolvedRow);
    }
    tbl.updateRow((RowArea)currentContext.root,specifiedHeight,index);
    if (finished || !isRowEmpty(currentContext)) {
      tbl.addRow((RowArea)currentContext.root,index);
      parent.addToRoot(currentContext.root,index);
    }
    if (!finished && unresolvedRow == null) {
      TableContext tc=(TableContext)(tbl.contextList.get(index));
      unresolvedRow=tc.layout.getUnresolvedRow();
    }
  }
}",0.8907672301690507
71665,"/** 
 * Judge needing implement the align table or not. The align table should be align according to the page box.
 * @param table
 * @return
 */
protected boolean needImplementAlignTable(ITableContent table){
  if (report.getRoot() == table.getParent()) {
    DimensionType width=table.getWidth();
    if (null != width && !""String_Node_Str"".equals(width.toString())) {
      IStyle style=table.getStyle();
      CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
      if (null == display || IStyle.BLOCK_VALUE == display) {
        CSSValue align=style.getProperty(IStyle.STYLE_TEXT_ALIGN);
        if (IStyle.CENTER_VALUE.equals(align)) {
          return true;
        }
        CSSValue direction=style.getProperty(IStyle.STYLE_DIRECTION);
        if (IStyle.RTL_VALUE.equals(direction)) {
          if (IStyle.LEFT_VALUE.equals(align)) {
            return true;
          }
        }
 else         if (IStyle.RIGHT_VALUE == align) {
          return true;
        }
      }
    }
  }
  return false;
}","/** 
 * Judge needing implement the align table or not. The align table should be align according to the page box.
 * @param table
 * @return
 */
protected boolean needImplementAlignTable(ITableContent table){
  if (report.getRoot() == table.getParent()) {
    DimensionType width=table.getWidth();
    if (null != width && !""String_Node_Str"".equals(width.toString())) {
      IStyle style=table.getStyle();
      CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
      if (null == display || IStyle.BLOCK_VALUE == display) {
        CSSValue align=style.getProperty(IStyle.STYLE_TEXT_ALIGN);
        if (IStyle.CENTER_VALUE.equals(align)) {
          return true;
        }
        CSSValue direction=style.getProperty(IStyle.STYLE_DIRECTION);
        if (IStyle.RTL_VALUE.equals(direction)) {
          if (!IStyle.RIGHT_VALUE.equals(align)) {
            return true;
          }
        }
 else         if (IStyle.RIGHT_VALUE == align) {
          return true;
        }
      }
    }
  }
  return false;
}",0.9891838741396264
71666,"public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (htmlRtLFlag) {
    String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      if (null != style) {
        style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.RIGHT_VALUE);
        style.setProperty(IStyle.STYLE_DIRECTION,IStyle.RTL_VALUE);
      }
    }
  }
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
  }
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,layoutPreference);
  }
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      htmlEmitter.buildDefaultStyle(defaultStyleBuffer,style);
    }
  }
  String defaultStyleName=""String_Node_Str"";
  if (isEmbeddable) {
    outputCSSStyles(defaultStyleName,defaultStyleBuffer,reportDesign,designHandle);
    fixTransparentPNG();
    fixRedirect();
    writer.openTag(HTMLTags.TAG_DIV);
    if (htmlRtLFlag) {
      writer.attribute(HTMLTags.ATTR_HTML_DIR,CSSConstants.CSS_RTL_VALUE);
    }
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  if (htmlRtLFlag) {
    writer.attribute(HTMLTags.ATTR_HTML_DIR,CSSConstants.CSS_RTL_VALUE);
  }
  writer.openTag(HTMLTags.TAG_HEAD);
  if (designHandle != null) {
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  outputCSSStyles(defaultStyleName,defaultStyleBuffer,reportDesign,designHandle);
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
  }
  if (outputMasterPageContent) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
}","public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
  }
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,layoutPreference);
  }
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      htmlEmitter.buildDefaultStyle(defaultStyleBuffer,style);
    }
  }
  String defaultStyleName=""String_Node_Str"";
  if (isEmbeddable) {
    outputCSSStyles(defaultStyleName,defaultStyleBuffer,reportDesign,designHandle);
    fixTransparentPNG();
    fixRedirect();
    writer.openTag(HTMLTags.TAG_DIV);
    if (htmlRtLFlag) {
      writer.attribute(HTMLTags.ATTR_HTML_DIR,CSSConstants.CSS_RTL_VALUE);
    }
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  if (htmlRtLFlag) {
    writer.attribute(HTMLTags.ATTR_HTML_DIR,CSSConstants.CSS_RTL_VALUE);
  }
  writer.openTag(HTMLTags.TAG_HEAD);
  if (designHandle != null) {
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  outputCSSStyles(defaultStyleName,defaultStyleBuffer,reportDesign,designHandle);
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
  }
  if (outputMasterPageContent) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
}",0.9397741530740276
71667,"public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontWeight(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getTextLineThrough(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getTextUnderline(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  return entry;
}","public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontWeight(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getTextLineThrough(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getTextUnderline(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign(),style.getDirection()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  return entry;
}",0.9968558167390328
71668,"public static String convertHAlign(String align){
  String ha=""String_Node_Str"";
  align=ExcelUtil.getValue(align);
  if (""String_Node_Str"".equalsIgnoreCase(align)) {
    ha=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(align)) {
    ha=""String_Node_Str"";
  }
  return ha;
}","public static String convertHAlign(String align,String direction){
  String ha=null;
  align=ExcelUtil.getValue(align);
  if (""String_Node_Str"".equalsIgnoreCase(align)) {
    ha=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(align)) {
    ha=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(align)) {
    ha=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(direction))   ha=""String_Node_Str"";
 else   ha=""String_Node_Str"";
  return ha;
}",0.6725
71669,"protected void align(boolean lastLine){
  if (root == null) {
    return;
  }
  assert(parent instanceof PDFBlockStackingLM);
  String align=((PDFBlockStackingLM)parent).getTextAlign();
  if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align) || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
    int spacing=root.getContentWidth() - getCurrentIP();
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (spacing > 0) {
        if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
 else   if (CSSConstants.CSS_JUSTIFY_VALUE.equalsIgnoreCase(align) && !lastLine) {
    justify();
  }
  verticalAlign();
}","protected void align(boolean lastLine){
  if (root == null) {
    return;
  }
  assert(parent instanceof PDFBlockStackingLM);
  String align=((PDFBlockStackingLM)parent).getTextAlign();
  boolean isRightAligned=BidiAlignmentResolver.isRightAligned(root.getContent(),align,lastLine);
  if (isRightAligned || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
    int spacing=root.getContentWidth() - getCurrentIP();
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (spacing > 0) {
        if (isRightAligned) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
 else   if (CSSConstants.CSS_JUSTIFY_VALUE.equalsIgnoreCase(align) && !lastLine) {
    justify();
  }
  verticalAlign();
}",0.8868958644743398
71670,"protected void verticalAlign(CellArea c){
  CellArea cell;
  if (c instanceof DummyCell) {
    cell=((DummyCell)c).getCell();
  }
 else {
    cell=c;
  }
  IContent content=cell.getContent();
  if (content == null) {
    return;
  }
  CSSValue verticalAlign=content.getComputedStyle().getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  if (IStyle.BOTTOM_VALUE.equals(verticalAlign) || IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
    int totalHeight=0;
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      totalHeight+=child.getAllocatedHeight();
    }
    int offset=cell.getContentHeight() - totalHeight;
    if (offset > 0) {
      if (IStyle.BOTTOM_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset);
        }
      }
 else       if (IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset / 2);
        }
      }
    }
  }
  CSSValue align=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
  boolean isRightAligned=IStyle.RIGHT_VALUE.equals(align) || IStyle.JUSTIFY_VALUE.equals(align) && content.isRTL();
  if ((isRightAligned || IStyle.CENTER_VALUE.equals(align))) {
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      int spacing=cell.getContentWidth() - area.getAllocatedWidth();
      if (spacing > 0) {
        if (isRightAligned) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (IStyle.CENTER_VALUE.equals(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
}","protected void verticalAlign(CellArea c){
  CellArea cell;
  if (c instanceof DummyCell) {
    cell=((DummyCell)c).getCell();
  }
 else {
    cell=c;
  }
  IContent content=cell.getContent();
  if (content == null) {
    return;
  }
  CSSValue verticalAlign=content.getComputedStyle().getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  if (IStyle.BOTTOM_VALUE.equals(verticalAlign) || IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
    int totalHeight=0;
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      totalHeight+=child.getAllocatedHeight();
    }
    int offset=cell.getContentHeight() - totalHeight;
    if (offset > 0) {
      if (IStyle.BOTTOM_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset);
        }
      }
 else       if (IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset / 2);
        }
      }
    }
  }
  CSSValue align=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
  boolean isRightAligned=BidiAlignmentResolver.isRightAligned(content,align,false);
  if ((isRightAligned || IStyle.CENTER_VALUE.equals(align))) {
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      int spacing=cell.getContentWidth() - area.getAllocatedWidth();
      if (spacing > 0) {
        if (isRightAligned) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (IStyle.CENTER_VALUE.equals(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
}",0.9673648319532392
71671,"protected void align(ContainerContext currentContext,boolean lastLine){
  assert(parent instanceof BlockStackingLayout);
  String align=((BlockStackingLayout)parent).getTextAlign();
  if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align) || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
    int spacing=currentContext.root.getWidth() - currentContext.currentIP;
    Iterator iter=currentContext.root.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (spacing > 0) {
        if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
 else   if (CSSConstants.CSS_JUSTIFY_VALUE.equalsIgnoreCase(align) && !lastLine) {
    justify(currentContext);
  }
  if (context.getBidiProcessing())   reorderVisually();
  verticalAlign();
}","protected void align(ContainerContext currentContext,boolean lastLine){
  assert(parent instanceof BlockStackingLayout);
  String align=((BlockStackingLayout)parent).getTextAlign();
  boolean isRightAligned=BidiAlignmentResolver.isRightAligned(((BlockStackingLayout)parent).content,align,lastLine);
  if ((isRightAligned || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
    int spacing=currentContext.root.getWidth() - currentContext.currentIP;
    Iterator iter=currentContext.root.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (spacing > 0) {
        if (isRightAligned) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
 else   if (CSSConstants.CSS_JUSTIFY_VALUE.equalsIgnoreCase(align) && !lastLine) {
    justify(currentContext);
  }
  if (context.getBidiProcessing())   reorderVisually();
  verticalAlign();
}",0.8899865289627301
71672,"protected void resolveTotalPage(IContentEmitter emitter){
  IContent con=context.getUnresolvedContent();
  if (!(con instanceof IAutoTextContent)) {
    return;
  }
  IAutoTextContent totalPageContent=(IAutoTextContent)con;
  if (null != totalPageContent) {
    NumberFormatter nf=new NumberFormatter();
    String patternStr=totalPageContent.getComputedStyle().getNumberFormat();
    nf.applyPattern(patternStr);
    long totalPageCount=0;
    if (context.autoPageBreak) {
      totalPageCount=context.pageCount;
    }
 else {
      totalPageCount=context.totalPage > 0 ? context.totalPage : context.pageCount;
    }
    totalPageContent.setText(nf.format(totalPageCount));
    AbstractArea totalPageArea=null;
    ChunkGenerator cg=new ChunkGenerator(context.getFontManager(),totalPageContent,true,true);
    if (cg.hasMore()) {
      Chunk c=cg.getNext();
      Dimension d=new Dimension((int)(c.getFontInfo().getWordWidth(c.getText()) * PDFConstants.LAYOUT_TO_PDF_RATIO),(int)(c.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      totalPageArea=(AbstractArea)AreaFactory.createTextArea(totalPageContent,c.getFontInfo(),false);
      totalPageArea.setWidth(Math.min(context.getMaxWidth(),d.getWidth()));
      totalPageArea.setHeight(Math.min(context.getMaxHeight(),d.getHeight()));
    }
    String align=totalPageContent.getComputedStyle().getTextAlign();
    if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align) || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
      int spacing=context.getTotalPageTemplateWidth() - totalPageArea.getWidth();
      if (spacing > 0) {
        if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) {
          totalPageArea.setAllocatedPosition(spacing + totalPageArea.getAllocatedX(),totalPageArea.getAllocatedY());
        }
 else         if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
          totalPageArea.setAllocatedPosition(spacing / 2 + totalPageArea.getAllocatedX(),totalPageArea.getAllocatedY());
        }
      }
    }
    totalPageContent.setExtension(IContent.LAYOUT_EXTENSION,totalPageArea);
    emitter.startAutoText(totalPageContent);
  }
}","protected void resolveTotalPage(IContentEmitter emitter){
  IContent con=context.getUnresolvedContent();
  if (!(con instanceof IAutoTextContent)) {
    return;
  }
  IAutoTextContent totalPageContent=(IAutoTextContent)con;
  if (null != totalPageContent) {
    NumberFormatter nf=new NumberFormatter();
    String patternStr=totalPageContent.getComputedStyle().getNumberFormat();
    nf.applyPattern(patternStr);
    long totalPageCount=0;
    if (context.autoPageBreak) {
      totalPageCount=context.pageCount;
    }
 else {
      totalPageCount=context.totalPage > 0 ? context.totalPage : context.pageCount;
    }
    totalPageContent.setText(nf.format(totalPageCount));
    AbstractArea totalPageArea=null;
    ChunkGenerator cg=new ChunkGenerator(context.getFontManager(),totalPageContent,true,true);
    if (cg.hasMore()) {
      Chunk c=cg.getNext();
      Dimension d=new Dimension((int)(c.getFontInfo().getWordWidth(c.getText()) * PDFConstants.LAYOUT_TO_PDF_RATIO),(int)(c.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      totalPageArea=(AbstractArea)AreaFactory.createTextArea(totalPageContent,c.getFontInfo(),false);
      totalPageArea.setWidth(Math.min(context.getMaxWidth(),d.getWidth()));
      totalPageArea.setHeight(Math.min(context.getMaxHeight(),d.getHeight()));
    }
    String align=totalPageContent.getComputedStyle().getTextAlign();
    boolean isRightAligned=BidiAlignmentResolver.isRightAligned(totalPageContent,align,false);
    if ((isRightAligned || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
      int spacing=context.getTotalPageTemplateWidth() - totalPageArea.getWidth();
      if (spacing > 0) {
        if (isRightAligned) {
          totalPageArea.setAllocatedPosition(spacing + totalPageArea.getAllocatedX(),totalPageArea.getAllocatedY());
        }
 else         if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
          totalPageArea.setAllocatedPosition(spacing / 2 + totalPageArea.getAllocatedX(),totalPageArea.getAllocatedY());
        }
      }
    }
    totalPageContent.setExtension(IContent.LAYOUT_EXTENSION,totalPageArea);
    emitter.startAutoText(totalPageContent);
  }
}",0.9466142824127572
71673,"protected void verticalAlign(CellArea c){
  CellArea cell;
  if (c instanceof DummyCell) {
    cell=((DummyCell)c).getCell();
  }
 else {
    cell=c;
  }
  IContent content=cell.getContent();
  if (content == null) {
    return;
  }
  CSSValue verticalAlign=content.getComputedStyle().getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  if (IStyle.BOTTOM_VALUE.equals(verticalAlign) || IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
    int totalHeight=0;
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      totalHeight+=child.getAllocatedHeight();
    }
    int offset=cell.getContentHeight() - totalHeight;
    if (offset > 0) {
      if (IStyle.BOTTOM_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset);
        }
      }
 else       if (IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset / 2);
        }
      }
    }
  }
  CSSValue align=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
  if ((IStyle.RIGHT_VALUE.equals(align) || IStyle.CENTER_VALUE.equals(align))) {
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      int spacing=cell.getContentWidth() - area.getAllocatedWidth();
      if (spacing > 0) {
        if (IStyle.RIGHT_VALUE.equals(align)) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (IStyle.CENTER_VALUE.equals(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
}","protected void verticalAlign(CellArea c){
  CellArea cell;
  if (c instanceof DummyCell) {
    cell=((DummyCell)c).getCell();
  }
 else {
    cell=c;
  }
  IContent content=cell.getContent();
  if (content == null) {
    return;
  }
  CSSValue verticalAlign=content.getComputedStyle().getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  if (IStyle.BOTTOM_VALUE.equals(verticalAlign) || IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
    int totalHeight=0;
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      totalHeight+=child.getAllocatedHeight();
    }
    int offset=cell.getContentHeight() - totalHeight;
    if (offset > 0) {
      if (IStyle.BOTTOM_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset);
        }
      }
 else       if (IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset / 2);
        }
      }
    }
  }
  CSSValue align=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
  boolean isRightAligned=BidiAlignmentResolver.isRightAligned(content,align,false);
  if (isRightAligned || IStyle.CENTER_VALUE.equals(align)) {
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      int spacing=cell.getContentWidth() - area.getAllocatedWidth();
      if (spacing > 0) {
        if (isRightAligned) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (IStyle.CENTER_VALUE.equals(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
}",0.955268389662028
71674,"private String getFontName(BaseFont baseFont){
  String[][] familyFontNames=baseFont.getFamilyFontName();
  String[] family=familyFontNames[0];
  String fontName=family[family.length - 1];
  return fontName;
}","private String getFontName(BaseFont baseFont){
  String[][] familyFontNames=baseFont.getFamilyFontName();
  String[] family=familyFontNames[familyFontNames.length - 1];
  return family[family.length - 1];
}",0.8337349397590361
71675,"private void outputCSSStyles(String defaultStyleName,StringBuffer defaultStyleBuffer,Report reportDesign,ReportDesignHandle designHandle){
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    String styleNamePrefix;
    if (null != htmlIDNamespace) {
      styleNamePrefix=""String_Node_Str"" + htmlIDNamespace;
    }
 else {
      styleNamePrefix=""String_Node_Str"";
    }
    writer.style(styleNamePrefix + defaultStyleName,defaultStyleBuffer.toString());
    Map styles=reportDesign.getStyles();
    Iterator iter=styles.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String styleName=(String)entry.getKey();
      style=(IStyle)entry.getValue();
      styleBuffer.setLength(0);
      htmlEmitter.buildStyle(styleBuffer,style);
      if (styleBuffer.length() > 0) {
        writer.style(styleNamePrefix + styleName,styleBuffer.toString());
        outputtedStyles.add(styleName);
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  hasCsslinks=false;
  if (designHandle != null) {
    Iterator iter=designHandle.includeCssesIterator();
    while (iter.hasNext()) {
      IncludedCssStyleSheetHandle cssStyleSheetHandle=(IncludedCssStyleSheetHandle)iter.next();
      String href=cssStyleSheetHandle.getExternalCssURI();
      if (href != null) {
        hasCsslinks=true;
        writer.openTag(HTMLTags.TAG_LINK);
        writer.attribute(HTMLTags.ATTR_REL,""String_Node_Str"");
        writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
        writer.attribute(HTMLTags.ATTR_HREF,href);
        writer.closeTag(HTMLTags.TAG_LINK);
      }
    }
  }
}","private void outputCSSStyles(String defaultStyleName,StringBuffer defaultStyleBuffer,Report reportDesign,ReportDesignHandle designHandle){
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    String styleNamePrefix;
    if (null != htmlIDNamespace) {
      styleNamePrefix=""String_Node_Str"" + htmlIDNamespace;
    }
 else {
      styleNamePrefix=""String_Node_Str"";
    }
    writer.style(styleNamePrefix + defaultStyleName,defaultStyleBuffer.toString());
    Map styles=reportDesign.getStyles();
    Iterator iter=styles.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String styleName=(String)entry.getKey();
      style=(IStyle)entry.getValue();
      styleBuffer.setLength(0);
      htmlEmitter.buildStyle(styleBuffer,style);
      if (styleBuffer.length() > 0) {
        writer.style(styleNamePrefix + styleName,styleBuffer.toString());
        outputtedStyles.add(styleName);
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  hasCsslinks=false;
  if (designHandle != null) {
    List externalCsses=designHandle.getAllExternalIncludedCsses();
    if (null != externalCsses) {
      Iterator iter=externalCsses.iterator();
      while (iter.hasNext()) {
        IncludedCssStyleSheetHandle cssStyleSheetHandle=(IncludedCssStyleSheetHandle)iter.next();
        String href=cssStyleSheetHandle.getExternalCssURI();
        if (href != null) {
          hasCsslinks=true;
          writer.openTag(HTMLTags.TAG_LINK);
          writer.attribute(HTMLTags.ATTR_REL,""String_Node_Str"");
          writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
          writer.attribute(HTMLTags.ATTR_HREF,href);
          writer.closeTag(HTMLTags.TAG_LINK);
        }
      }
    }
  }
}",0.9485470541189016
71676,"public static String formatNumberPattern(String givenValue,Locale locale){
  String returnStr=""String_Node_Str"";
  if (givenValue == null) {
    return ""String_Node_Str"";
  }
  if (givenValue.length() == 1) {
    char ch=givenValue.charAt(0);
    if (ch == 'G' || ch == 'g' || ch == 'd' || ch == 'D') {
      return ""String_Node_Str"";
    }
    if (ch == 'C' || ch == 'c') {
      return getCurrencySymbol(locale) + ""String_Node_Str"";
    }
    if (ch == 'f' || ch == 'F') {
      return ""String_Node_Str"";
    }
    if (ch == 'N' || ch == 'n') {
      return ""String_Node_Str"";
    }
    if (ch == 'p' || ch == 'P') {
      return ""String_Node_Str"";
    }
    if (ch == 'e' || ch == 'E') {
      return ""String_Node_Str"";
    }
    if (ch == 'x' || ch == 'X') {
      return ""String_Node_Str"";
    }
  }
 else {
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (validType(givenValue)) {
      return givenValue;
    }
    int count=givenValue.length();
    boolean flag=false;
    for (int num=0; num < count; num++) {
      char temp=givenValue.charAt(num);
      if (temp == '\'') {
        if (flag) {
          flag=false;
        }
 else {
          char nextChar=givenValue.charAt(num + 1);
          if (nextChar == '\'') {
            returnStr=returnStr + '\'';
            num++;
            flag=false;
          }
 else {
            flag=true;
          }
        }
      }
 else {
        if (flag) {
          returnStr=returnStr + ""String_Node_Str"" + temp;
        }
 else {
          if (specialStr.indexOf(temp) != -1) {
            returnStr=returnStr + ""String_Node_Str"" + temp;
          }
 else           if (temp == '¤') {
            String symbol=getCurrencySymbol(locale);
            returnStr=returnStr + symbol;
          }
 else {
            returnStr=returnStr + temp;
          }
        }
      }
    }
  }
  return returnStr;
}","public static String formatNumberPattern(String givenValue,Locale locale){
  String returnStr=""String_Node_Str"";
  if (givenValue == null) {
    return ""String_Node_Str"";
  }
  if (givenValue.length() == 1) {
    char ch=givenValue.charAt(0);
    if (ch == 'G' || ch == 'g' || ch == 'd' || ch == 'D') {
      return ""String_Node_Str"";
    }
    if (ch == 'C' || ch == 'c') {
      return getCurrencySymbol(locale) + ""String_Node_Str"";
    }
    if (ch == 'f' || ch == 'F') {
      return ""String_Node_Str"";
    }
    if (ch == 'N' || ch == 'n') {
      return ""String_Node_Str"";
    }
    if (ch == 'p' || ch == 'P') {
      return ""String_Node_Str"";
    }
    if (ch == 'e' || ch == 'E') {
      return ""String_Node_Str"";
    }
    if (ch == 'x' || ch == 'X') {
      return ""String_Node_Str"";
    }
  }
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (validType(givenValue)) {
    return givenValue;
  }
  int count=givenValue.length();
  boolean flag=false;
  for (int num=0; num < count; num++) {
    char temp=givenValue.charAt(num);
    if (temp == '\'') {
      if (flag) {
        flag=false;
      }
 else {
        char nextChar=givenValue.charAt(num + 1);
        if (nextChar == '\'') {
          returnStr=returnStr + '\'';
          num++;
          flag=false;
        }
 else {
          flag=true;
        }
      }
    }
 else {
      if (flag) {
        returnStr=returnStr + ""String_Node_Str"" + temp;
      }
 else {
        if (specialStr.indexOf(temp) != -1) {
          returnStr=returnStr + ""String_Node_Str"" + temp;
        }
 else         if (temp == '¤') {
          String symbol=getCurrencySymbol(locale);
          returnStr=returnStr + symbol;
        }
 else {
          returnStr=returnStr + temp;
        }
      }
    }
  }
  if (returnStr.indexOf(""String_Node_Str"") == -1 && returnStr.indexOf(""String_Node_Str"") == -1) {
    returnStr+=""String_Node_Str"";
  }
  return returnStr;
}",0.8245376635092467
71677,"/** 
 * @throws BirtException
 */
public void testUseAppContextCacheRowLimit3() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(100);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  dec.setTmpdir(this.getTempDir());
  myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(4));
  this.testUseCache1();
}","/** 
 * @throws BirtException
 */
public void testUseAppContextCacheRowLimit3() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(100);
  this.dataSet.setBeforeOpenScript(""String_Node_Str"");
  this.dataSet.setOnFetchScript(""String_Node_Str"");
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  dec.setTmpdir(this.getTempDir());
  myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(4));
  this.testUseCache1();
}",0.9122231337161608
71678,"/** 
 * Executes the onFetch script associated with the data source 
 */
public void onFetch() throws DataException {
  if (getEventHandler() != null) {
    Mode temp=this.getMode();
    this.setMode(Mode.DataSet);
    try {
      getEventHandler().handleOnFetch(this,getDataRow());
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
 finally {
      this.setMode(temp);
    }
  }
}","/** 
 * Executes the onFetch script associated with the data source 
 */
public void onFetch() throws DataException {
  if (fromCache)   return;
  if (getEventHandler() != null) {
    Mode temp=this.getMode();
    this.setMode(Mode.DataSet);
    try {
      getEventHandler().handleOnFetch(this,getDataRow());
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
 finally {
      this.setMode(temp);
    }
  }
}",0.9680473372781064
71679,"/** 
 * Executes the beforeOpen script associated with the data source 
 */
public void beforeOpen() throws DataException {
  if (getEventHandler() != null) {
    try {
      getEventHandler().handleBeforeOpen(this);
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
}","/** 
 * Executes the beforeOpen script associated with the data source 
 */
public void beforeOpen() throws DataException {
  if (fromCache)   return;
  if (getEventHandler() != null) {
    try {
      getEventHandler().handleBeforeOpen(this);
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
}",0.9569377990430622
71680,"/** 
 * Executes the beforeClose script associated with the data source 
 */
public void beforeClose() throws DataException {
  if (getEventHandler() != null) {
    try {
      getEventHandler().handleBeforeClose(this);
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
}","/** 
 * Executes the beforeClose script associated with the data source 
 */
public void beforeClose() throws DataException {
  if (fromCache)   return;
  if (getEventHandler() != null) {
    try {
      getEventHandler().handleBeforeClose(this);
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
}",0.957345971563981
71681,"/** 
 * Executes the afterClose script associated with the data source 
 */
public void afterClose() throws DataException {
  if (getEventHandler() != null) {
    try {
      getEventHandler().handleAfterClose(this);
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
}","/** 
 * Executes the afterClose script associated with the data source 
 */
public void afterClose() throws DataException {
  if (fromCache)   return;
  if (getEventHandler() != null) {
    try {
      getEventHandler().handleAfterClose(this);
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
}",0.9569377990430622
71682,"/** 
 * Executes the afterOpen script associated with the data source 
 */
public void afterOpen() throws DataException {
  if (getEventHandler() != null) {
    try {
      getEventHandler().handleAfterOpen(this);
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
}","/** 
 * Executes the afterOpen script associated with the data source 
 */
public void afterOpen() throws DataException {
  if (fromCache)   return;
  if (getEventHandler() != null) {
    try {
      getEventHandler().handleAfterOpen(this);
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
}",0.9565217391304348
71683,"/** 
 * Test case: 1. When including a library which includes another library, getAllImages method can return all the images in these libraries. 2. Above condition, the imagesIterator method returns null while there is no embedded images in report design.
 * @throws Exception
 */
public void testGetImage() throws Exception {
  openDesign(""String_Node_Str"");
  assertEquals(1,designHandle.getLibraries().size());
  assertTrue(!designHandle.imagesIterator().hasNext());
  assertNotNull(designHandle.findImage(""String_Node_Str""));
  assertNotNull(designHandle.findImage(""String_Node_Str""));
  assertNotNull(designHandle.findImage(""String_Node_Str""));
  assertNotNull(designHandle.findImage(""String_Node_Str""));
  LibraryHandle lib1=designHandle.getLibrary(""String_Node_Str"");
  assertNotNull(lib1);
  Iterator imageIter=lib1.imagesIterator();
  assertTrue(imageIter.hasNext());
  EmbeddedImageHandle image=(EmbeddedImageHandle)imageIter.next();
  assertEquals(""String_Node_Str"",image.getName());
  assertEquals(""String_Node_Str"",image.getQualifiedName());
  assertTrue(image.getModule() instanceof Library);
  image=(EmbeddedImageHandle)imageIter.next();
  assertEquals(""String_Node_Str"",image.getName());
  assertEquals(""String_Node_Str"",image.getQualifiedName());
  assertTrue(image.getModule() instanceof Library);
  LibraryHandle lib2=designHandle.getLibrary(""String_Node_Str"");
  assertNull(lib2);
  assertEquals(2,designHandle.getAllImages().size());
  assertEquals(4,lib1.getAllImages().size());
}","/** 
 * Test case: 1. When including a library which includes another library, getAllImages method can return all the images in these libraries. 2. Above condition, the imagesIterator method returns null while there is no embedded images in report design.
 * @throws Exception
 */
public void testGetImage() throws Exception {
  openDesign(""String_Node_Str"");
  assertEquals(1,designHandle.getLibraries().size());
  assertTrue(!designHandle.imagesIterator().hasNext());
  assertNotNull(designHandle.findImage(""String_Node_Str""));
  assertNotNull(designHandle.findImage(""String_Node_Str""));
  assertNotNull(designHandle.findImage(""String_Node_Str""));
  assertNotNull(designHandle.findImage(""String_Node_Str""));
  LibraryHandle lib1=designHandle.getLibrary(""String_Node_Str"");
  assertNotNull(lib1);
  Iterator imageIter=lib1.imagesIterator();
  assertTrue(imageIter.hasNext());
  EmbeddedImageHandle image=(EmbeddedImageHandle)imageIter.next();
  assertEquals(""String_Node_Str"",image.getName());
  assertEquals(""String_Node_Str"",image.getQualifiedName());
  assertTrue(image.getModule() instanceof Library);
  image=(EmbeddedImageHandle)imageIter.next();
  assertEquals(""String_Node_Str"",image.getName());
  assertEquals(""String_Node_Str"",image.getQualifiedName());
  assertTrue(image.getModule() instanceof Library);
  LibraryHandle lib2=designHandle.getLibrary(""String_Node_Str"");
  assertNull(lib2);
  assertEquals(4,designHandle.getAllImages().size());
  assertEquals(4,lib1.getAllImages().size());
}",0.9993346640053228
71684,"public void startRow(IRowContent row){
  if (cellEmitter != null) {
    cellEmitter.startRow(row);
  }
 else {
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    int rowId=row.getRowID();
    if (lastRowId >= 0 && rowId > lastRowId + 1) {
      for (int i=lastRowId + 1; i < rowId; i++) {
        IRowContent newRow=(IRowContent)row.cloneContent(false);
        newRow.setParent(row.getParent());
        newRow.setRowID(i);
        startRow(newRow);
        endRow(newRow);
      }
    }
    if (!isNestTable()) {
      layout.createRow(row,isHidden);
      if (!isHidden) {
        if (hasDropCell()) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          return;
        }
 else         if (layout.hasUnResolvedRow() && !LayoutUtil.isRepeatableRow(row)) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          hasDropCell=true;
          return;
        }
      }
    }
    if (!isHidden) {
      emitter.startRow(row);
    }
  }
}","public void startRow(IRowContent row){
  if (cellEmitter != null) {
    cellEmitter.startRow(row);
  }
 else {
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    if (!isNestTable()) {
      int rowId=row.getRowID();
      if (lastRowId >= 0 && rowId > lastRowId + 1) {
        for (int i=lastRowId + 1; i < rowId; i++) {
          IRowContent newRow=(IRowContent)row.cloneContent(false);
          newRow.setParent(row.getParent());
          newRow.setRowID(i);
          startRow(newRow);
          endRow(newRow);
        }
      }
      layout.createRow(row,isHidden);
      if (!isHidden) {
        if (hasDropCell()) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          return;
        }
 else         if (layout.hasUnResolvedRow() && !LayoutUtil.isRepeatableRow(row)) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          hasDropCell=true;
          return;
        }
      }
    }
    if (!isHidden) {
      emitter.startRow(row);
    }
  }
}",0.9309734513274336
71685,"public void startRow(IRowContent row){
  if (cellEmitter != null) {
    cellEmitter.startRow(row);
  }
 else {
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    if (!LayoutUtil.isRepeatableRow(row)) {
      int rowId=row.getRowID();
      if (lastRowId >= 0 && rowId > lastRowId - 1) {
        for (int i=lastRowId + 1; i < rowId; i++) {
          IRowContent newRow=(IRowContent)row.cloneContent(false);
          newRow.setParent(row.getParent());
          newRow.setRowID(i);
          startRow(newRow);
          endRow(newRow);
        }
      }
    }
    if (!isNestTable()) {
      layout.createRow(row,isHidden);
      if (!isHidden) {
        if (hasDropCell()) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          return;
        }
 else         if (layout.hasUnResolvedRow() && !LayoutUtil.isRepeatableRow(row)) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          hasDropCell=true;
          return;
        }
      }
    }
    if (!isHidden) {
      emitter.startRow(row);
    }
  }
}","public void startRow(IRowContent row){
  if (cellEmitter != null) {
    cellEmitter.startRow(row);
  }
 else {
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    int rowId=row.getRowID();
    if (lastRowId >= 0 && rowId > lastRowId + 1) {
      for (int i=lastRowId + 1; i < rowId; i++) {
        IRowContent newRow=(IRowContent)row.cloneContent(false);
        newRow.setParent(row.getParent());
        newRow.setRowID(i);
        startRow(newRow);
        endRow(newRow);
      }
    }
    if (!isNestTable()) {
      layout.createRow(row,isHidden);
      if (!isHidden) {
        if (hasDropCell()) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          return;
        }
 else         if (layout.hasUnResolvedRow() && !LayoutUtil.isRepeatableRow(row)) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          hasDropCell=true;
          return;
        }
      }
    }
    if (!isHidden) {
      emitter.startRow(row);
    }
  }
}",0.9333333333333332
71686,"public void endTableBand(ITableBandContent band){
  if (cellEmitter != null) {
    cellEmitter.endTableBand(band);
  }
 else {
    if (!isNestTable()) {
      if (band.getBandType() == IBandContent.BAND_GROUP_FOOTER) {
        int groupLevel=getGroupLevel();
        resolveCellsOfDrop(groupLevel,true,isContentFinished(band));
      }
      if (hasDropCell()) {
        layoutEvents.push(new LayoutEvent(LayoutEvent.END_BAND,band));
        return;
      }
      flush();
    }
    emitter.endTableBand(band);
  }
}","public void endTableBand(ITableBandContent band){
  if (cellEmitter != null) {
    cellEmitter.endTableBand(band);
  }
 else {
    if (!isNestTable()) {
      if (LayoutUtil.isRepeatableBand(band)) {
        lastRowId=-1;
      }
      if (band.getBandType() == IBandContent.BAND_GROUP_FOOTER) {
        int groupLevel=getGroupLevel();
        resolveCellsOfDrop(groupLevel,true,isContentFinished(band));
      }
      if (hasDropCell()) {
        layoutEvents.push(new LayoutEvent(LayoutEvent.END_BAND,band));
        return;
      }
      flush();
    }
    emitter.endTableBand(band);
  }
}",0.9305680793507664
71687,"public void endRow(IRowContent row){
  if (cellEmitter != null) {
    cellEmitter.endRow(row);
  }
 else {
    if (!isNestTable()) {
      layout.endRow(row);
      if (!LayoutUtil.isRepeatableRow(row)) {
        lastRowId=row.getRowID();
      }
      hasDropCell=layout.hasDropCell();
      if (hasDropCell()) {
        return;
      }
      if (layoutEvents.size() > 0) {
        flush();
        return;
      }
    }
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    if (!isHidden) {
      emitter.endRow(row);
    }
  }
}","public void endRow(IRowContent row){
  if (cellEmitter != null) {
    cellEmitter.endRow(row);
  }
 else {
    if (!isNestTable()) {
      layout.endRow(row);
      lastRowId=row.getRowID();
      hasDropCell=layout.hasDropCell();
      if (hasDropCell()) {
        return;
      }
      if (layoutEvents.size() > 0) {
        flush();
        return;
      }
    }
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    if (!isHidden) {
      emitter.endRow(row);
    }
  }
}",0.9497307001795332
71688,"/** 
 * Constructs the data request session with the provided session context information.
 * @param context
 * @throws BirtException
 */
public DataRequestSessionImpl(DataSessionContext context) throws BirtException {
  if (context == null)   throw new AdapterException(ResourceConstants.CONEXT_NULL_ERROR);
  dataEngine=(DataEngineImpl)DataEngine.newDataEngine(context.getDataEngineContext());
  modelAdaptor=new ModelAdapter(context);
  sessionContext=context;
  cubeHandleMap=new HashMap();
  stopSign=new StopSign();
}","/** 
 * Constructs the data request session with the provided session context information.
 * @param context
 * @throws BirtException
 */
public DataRequestSessionImpl(DataSessionContext context) throws BirtException {
  if (context == null)   throw new AdapterException(ResourceConstants.CONEXT_NULL_ERROR);
  dataEngine=(DataEngineImpl)DataEngine.newDataEngine(context.getDataEngineContext());
  modelAdaptor=new ModelAdapter(context);
  sessionContext=context;
  cubeHandleMap=new HashMap();
  stopSign=new StopSign();
  if (sessionContext != null) {
    this.setModuleHandleToAppContext();
  }
}",0.9322638146167558
71689,"public IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  setModuleHandleToAppContext();
  return new DataSetMetaDataHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).refreshMetaData(dataSetHandle,holdEvent);
}","public IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  return new DataSetMetaDataHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).refreshMetaData(dataSetHandle,holdEvent);
}",0.9361702127659576
71690,"public IBaseQueryResults execute(IBasePreparedQuery query,IBaseQueryResults outerResults,Scriptable scope) throws AdapterException {
  try {
    setModuleHandleToAppContext();
    if (query instanceof IPreparedQuery) {
      return ((IPreparedQuery)query).execute(outerResults,scope);
    }
 else     if (query instanceof IPreparedCubeQuery) {
      return ((IPreparedCubeQuery)query).execute(outerResults,scope);
    }
    return null;
  }
 catch (  BirtException e) {
    throw new AdapterException(ResourceConstants.EXCEPTION_ERROR,e);
  }
}","public IBaseQueryResults execute(IBasePreparedQuery query,IBaseQueryResults outerResults,Scriptable scope) throws AdapterException {
  try {
    if (query instanceof IPreparedQuery) {
      return ((IPreparedQuery)query).execute(outerResults,scope);
    }
 else     if (query instanceof IPreparedCubeQuery) {
      return ((IPreparedCubeQuery)query).execute(outerResults,scope);
    }
    return null;
  }
 catch (  BirtException e) {
    throw new AdapterException(ResourceConstants.EXCEPTION_ERROR,e);
  }
}",0.9667616334283
71691,"public IQueryResults executeQuery(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt) throws BirtException {
  setModuleHandleToAppContext();
  return new QueryExecutionHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).executeQuery(queryDefn,paramBindingIt,filterIt,bindingIt,this.sessionContext.getTopScope());
}","public IQueryResults executeQuery(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt) throws BirtException {
  return new QueryExecutionHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).executeQuery(queryDefn,paramBindingIt,filterIt,bindingIt,this.sessionContext.getTopScope());
}",0.9522431259044862
71692,"/** 
 * Create web viewer url to run the report.
 * @param servletName servlet name to viewer report
 * @param report report file name
 * @param format report format
 * @param resourceFolder the resource folder
 * @param maxrows max rows limited
 * @param maxlevels max level member limited
 * @return valid web viewer url
 */
private static String createURL(String webappName,String servletName,String report,String format,String resourceFolder,String maxrows,String maxrowlevels,String maxcolumnlevels){
  String encodedReportName=null;
  try {
    encodedReportName=URLEncoder.encode(report,UTF_8);
  }
 catch (  UnsupportedEncodingException e) {
    LogUtil.logWarning(e.getLocalizedMessage(),e);
  }
  String locale=ViewerPlugin.getDefault().getPluginPreferences().getString(USER_LOCALE);
  if (LocaleTable.containsKey(locale)) {
    locale=(String)LocaleTable.get(locale);
  }
 else {
    if (""String_Node_Str"".equals(locale)) {
      locale=null;
    }
 else {
      try {
        locale=URLEncoder.encode(locale,UTF_8);
      }
 catch (      UnsupportedEncodingException e) {
        locale=null;
        LogUtil.logWarning(e.getLocalizedMessage(),e);
      }
    }
  }
  String svgFlag=ViewerPlugin.getDefault().getPluginPreferences().getString(SVG_FLAG);
  boolean bSVGFlag=false;
  String cubeMemorySize=ViewerPlugin.getDefault().getPluginPreferences().getString(PREVIEW_MAXINMEMORYCUBESIZE);
  boolean rtl=false;
  String bidiOrientation=ViewerPlugin.getDefault().getPluginPreferences().getString(BIDI_ORIENTATION);
  if (bidiOrientation == null) {
    bidiOrientation=BIDI_ORIENTATION_AUTO;
  }
  if (BIDI_ORIENTATION_LTR.equals(bidiOrientation)) {
    rtl=false;
  }
 else   if (BIDI_ORIENTATION_RTL.equals(bidiOrientation)) {
    rtl=true;
  }
 else {
    rtl=(Window.getDefaultOrientation() == SWT.RIGHT_TO_LEFT);
  }
  if (""String_Node_Str"".equalsIgnoreCase(svgFlag)) {
    bSVGFlag=true;
  }
  String masterPageContent=ViewerPlugin.getDefault().getPluginPreferences().getString(MASTER_PAGE_CONTENT);
  boolean bMasterPageContent=true;
  if (""String_Node_Str"".equalsIgnoreCase(masterPageContent)) {
    bMasterPageContent=false;
  }
  String encodedResourceFolder=null;
  try {
    if (resourceFolder != null)     encodedResourceFolder=URLEncoder.encode(resourceFolder,UTF_8);
  }
 catch (  UnsupportedEncodingException e) {
    LogUtil.logWarning(e.getLocalizedMessage(),e);
  }
  if (encodedResourceFolder == null)   encodedResourceFolder=""String_Node_Str"";
  String reportParam=""String_Node_Str"";
  if (isReportDocument(encodedReportName))   reportParam=""String_Node_Str"";
  reportParam+=""String_Node_Str"" + encodedReportName;
  String asattachment=null;
  if (POSTSCRIPT.equalsIgnoreCase(format))   asattachment=""String_Node_Str"";
  int dpi=Toolkit.getDefaultToolkit().getScreenResolution();
  return getBaseURL(webappName) + servletName + ""String_Node_Str""+ reportParam+ ""String_Node_Str""+ format+ ""String_Node_Str""+ String.valueOf(bSVGFlag)+ (locale != null ? ""String_Node_Str"" + locale : ""String_Node_Str"")+ ""String_Node_Str""+ String.valueOf(bMasterPageContent)+ ""String_Node_Str""+ String.valueOf(rtl)+ (maxrows != null && maxrows.trim().length() > 0 ? ""String_Node_Str"" + maxrows : ""String_Node_Str"")+ (maxrowlevels != null && maxrowlevels.trim().length() > 0 ? ""String_Node_Str"" + maxrowlevels : ""String_Node_Str"")+ (maxcolumnlevels != null && maxcolumnlevels.trim().length() > 0 ? ""String_Node_Str"" + maxcolumnlevels : ""String_Node_Str"")+ (cubeMemorySize != null && cubeMemorySize.trim().length() > 0 ? ""String_Node_Str"" + cubeMemorySize : ""String_Node_Str"")+ ""String_Node_Str""+ encodedResourceFolder+ (asattachment != null ? asattachment : ""String_Node_Str"")+ ""String_Node_Str""+ dpi;
}","private static String createURL(String webappName,String servletName,String report,Map<String,String> urlParams){
  String encodedReportName=null;
  try {
    encodedReportName=URLEncoder.encode(report,UTF_8);
  }
 catch (  UnsupportedEncodingException e) {
    LogUtil.logWarning(e.getLocalizedMessage(),e);
  }
  String reportParam=ParameterAccessor.PARAM_REPORT;
  if (isReportDocument(encodedReportName)) {
    reportParam=ParameterAccessor.PARAM_REPORT_DOCUMENT;
  }
  reportParam+=""String_Node_Str"" + encodedReportName;
  return getBaseURL(webappName) + servletName + ""String_Node_Str""+ reportParam+ convertParams(urlParams);
}",0.1725724804417855
71693,"public TableContentLayout(ITableContent tableContent,String format,HTMLLayoutContext context){
  this.format=format;
  this.context=context;
  this.tableContent=tableContent;
  this.colCount=tableContent.getColumnCount();
  int start=0;
  int end=this.colCount;
  String tableId=tableContent.getInstanceID().toUniqueString();
  List hints=context.getTableColumnHint(tableId);
  this.adjustedColumnIds=new int[colCount];
  if (hints.size() > 0) {
    int current=0;
    Iterator iter=hints.iterator();
    int total=0;
    while (iter.hasNext()) {
      int[] hint=(int[])iter.next();
      for (int i=hint[0]; i < hint[1]; i++) {
        IColumn column=tableContent.getColumn(i);
        adjustedColumnIds[i]=current;
        if (!isColumnHidden(column)) {
          visibleColumns.add(column);
          current++;
        }
      }
      total=total + hint[1] - hint[0];
    }
    current=adjustedColumnIds[0];
    for (int i=1; i < colCount; i++) {
      if (adjustedColumnIds[i] < current) {
        adjustedColumnIds[i]=current;
      }
 else {
        current=adjustedColumnIds[i];
      }
      if (!hasHiddenColumns) {
        if (i != adjustedColumnIds[i]) {
          hasHiddenColumns=true;
          leastColumnIdToBeAjusted=i;
        }
      }
    }
  }
 else {
    int current=0;
    for (int i=0; i < colCount; i++) {
      IColumn column=tableContent.getColumn(i);
      adjustedColumnIds[i]=current;
      if (!isColumnHidden(column)) {
        visibleColumns.add(column);
        current++;
      }
 else {
        if (!hasHiddenColumns) {
          hasHiddenColumns=true;
          leastColumnIdToBeAjusted=i;
        }
      }
    }
  }
  if (hasHiddenColumns) {
    this.wrappedTable=new TableContentWrapper(tableContent,visibleColumns);
  }
  this.realColCount=visibleColumns.size();
}","public TableContentLayout(ITableContent tableContent,String format,HTMLLayoutContext context,String keyString){
  this.format=format;
  this.context=context;
  this.tableContent=tableContent;
  this.keyString=keyString;
  this.colCount=tableContent.getColumnCount();
  int start=0;
  int end=this.colCount;
  String tableId=tableContent.getInstanceID().toUniqueString();
  List hints=context.getTableColumnHint(tableId);
  this.adjustedColumnIds=new int[colCount];
  if (hints.size() > 0) {
    int current=0;
    Iterator iter=hints.iterator();
    int total=0;
    while (iter.hasNext()) {
      int[] hint=(int[])iter.next();
      for (int i=hint[0]; i < hint[1]; i++) {
        IColumn column=tableContent.getColumn(i);
        adjustedColumnIds[i]=current;
        if (!isColumnHidden(column)) {
          visibleColumns.add(column);
          current++;
        }
      }
      total=total + hint[1] - hint[0];
    }
    current=adjustedColumnIds[0];
    for (int i=1; i < colCount; i++) {
      if (adjustedColumnIds[i] < current) {
        adjustedColumnIds[i]=current;
      }
 else {
        current=adjustedColumnIds[i];
      }
      if (!hasHiddenColumns) {
        if (i != adjustedColumnIds[i]) {
          hasHiddenColumns=true;
          leastColumnIdToBeAjusted=i;
        }
      }
    }
  }
 else {
    int current=0;
    for (int i=0; i < colCount; i++) {
      IColumn column=tableContent.getColumn(i);
      adjustedColumnIds[i]=current;
      if (!isColumnHidden(column)) {
        visibleColumns.add(column);
        current++;
      }
 else {
        if (!hasHiddenColumns) {
          hasHiddenColumns=true;
          leastColumnIdToBeAjusted=i;
        }
      }
    }
  }
  if (hasHiddenColumns) {
    this.wrappedTable=new TableContentWrapper(tableContent,visibleColumns);
  }
  this.realColCount=visibleColumns.size();
}",0.9877015578026784
71694,"public List getUnresolvedRowHints(){
  return hints;
}","public List<UnresolvedRowHint> getUnresolvedRowHints(){
  return pageRowHints;
}",0.7910447761194029
71695,"public UnresolvedRowHint getUnresolvedRowHint(ITableContent table){
  if (hints.size() > 0) {
    String idStr=table.getInstanceID().toUniqueString();
    Iterator iter=hints.iterator();
    while (iter.hasNext()) {
      UnresolvedRowHint rowHint=(UnresolvedRowHint)iter.next();
      if (idStr.equals(rowHint.getTableId())) {
        return rowHint;
      }
    }
  }
  return null;
}","public UnresolvedRowHint getUnresolvedRowHint(String key){
  if (hints.size() > 0) {
    return hints.get(key);
  }
  return null;
}",0.4324324324324324
71696,"public void setLayoutPageHint(IPageHint pageHint){
  if (pageHint != null) {
    pageNumber=pageHint.getPageNumber();
    masterPage=pageHint.getMasterPage();
    int count=pageHint.getUnresolvedRowCount();
    for (int i=0; i < count; i++) {
      hints.add(pageHint.getUnresolvedRowHint(i));
    }
    count=pageHint.getTableColumnHintCount();
    for (int i=0; i < count; i++) {
      columnHints.add(pageHint.getTableColumnHint(i));
    }
  }
}","public void setLayoutPageHint(IPageHint pageHint){
  if (pageHint != null) {
    pageNumber=pageHint.getPageNumber();
    masterPage=pageHint.getMasterPage();
    int count=pageHint.getTableColumnHintCount();
    for (int i=0; i < count; i++) {
      columnHints.add(pageHint.getTableColumnHint(i));
    }
    count=pageHint.getUnresolvedRowCount();
    if (count > 0) {
      for (int i=0; i < count; i++) {
        UnresolvedRowHint hint=pageHint.getUnresolvedRowHint(i);
        String key=getHintMapKey(hint.getTableId());
        hints.put(key,hint);
      }
    }
  }
}",0.5904203323558163
71697,"public void clearPageHint(){
  columnHints.clear();
  pageHints.clear();
  hints.clear();
  hints.addAll(currentHints);
  currentHints.clear();
}","public void clearPageHint(){
  columnHints.clear();
  pageHints.clear();
}",0.6757990867579908
71698,"public void addUnresolvedRowHint(UnresolvedRowHint hint){
  currentHints.add(hint);
}","public void addUnresolvedRowHint(String key,UnresolvedRowHint hint){
  currentHints.put(key,hint);
}",0.8864864864864865
71699,"protected void end(boolean finished){
  if (emitter != null) {
    context.getPageBufferManager().endContainer(pageContent,finished,emitter,true);
    context.getBufferFactory().close();
  }
}","protected void end(boolean finished){
  if (emitter != null) {
    context.getPageBufferManager().endContainer(pageContent,finished,emitter,true);
    context.getBufferFactory().close();
  }
  context.resetRowHint();
}",0.9365853658536586
71700,"public boolean layout(){
  if (context.getCancelFlag()) {
    close();
    isLastPage=true;
    return false;
  }
  start(isFirstPage);
  boolean hasNextPage=layoutNodes();
  if (isChildrenFinished()) {
    isLastPage=true;
  }
  if (hasNextPage && !isLastPage) {
    context.addLayoutHint(pageContent,false);
  }
  isFirstPage=false;
  end(isLastPage);
  context.initilizePage();
  return hasNextPage;
}","public boolean layout(){
  if (context.getCancelFlag()) {
    close();
    isLastPage=true;
    return false;
  }
  start(isFirstPage);
  boolean hasNextPage=layoutNodes();
  if (isChildrenFinished()) {
    isLastPage=true;
  }
  if (hasNextPage && !isLastPage) {
    context.addLayoutHint(pageContent,false);
  }
 else {
    context.removeLayoutHint(pageContent);
  }
  isFirstPage=false;
  end(isLastPage);
  context.initilizePage();
  return hasNextPage;
}",0.936268829663963
71701,"protected boolean layoutChildren(){
  boolean hasNext=layoutNodes();
  if (hasNext) {
    context.addLayoutHint(content,false);
  }
  return hasNext;
}","protected boolean layoutChildren(){
  boolean hasNext=layoutNodes();
  if (hasNext) {
    context.addLayoutHint(content,false);
  }
 else {
    context.removeLayoutHint(content);
  }
  return hasNext;
}",0.7592067988668555
71702,"protected boolean layoutChildren(){
  boolean hasNext=super.layoutChildren();
  if (hasNext) {
    context.addLayoutHint(content,!hasNext);
  }
  if (!hasNext) {
  }
  return hasNext;
}","protected boolean layoutChildren(){
  boolean hasNext=super.layoutChildren();
  if (!hasNext) {
  }
  return hasNext;
}",0.7828947368421053
71703,"public void startTable(ITableContent table){
  nestTableCount++;
  if (cellEmitter != null) {
    cellEmitter.startTable(table);
  }
 else {
    if (!isNestTable()) {
      initLayout(table);
      if (isFirst) {
        if (context != null) {
          hint=context.getUnresolvedRowHint(table);
          isFirst=false;
        }
      }
      layout.setUnresolvedRowHint(hint);
      emitter.startTable(layout.getWrappedTableContent());
    }
 else {
      emitter.startTable(table);
    }
  }
}","public void startTable(ITableContent table){
  nestTableCount++;
  if (cellEmitter != null) {
    cellEmitter.startTable(table);
  }
 else {
    if (!isNestTable()) {
      UnresolvedRowHint hint=null;
      initLayout(table);
      emitter.startTable(layout.getWrappedTableContent());
      this.lastRowId=-1;
    }
 else {
      emitter.startTable(table);
    }
  }
}",0.7321016166281755
71704,"public void startRow(IRowContent row){
  if (cellEmitter != null) {
    cellEmitter.startRow(row);
  }
 else {
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    if (!isNestTable()) {
      layout.createRow(row,isHidden);
      if (!isHidden) {
        if (hasDropCell()) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          return;
        }
 else         if (layout.hasUnResolvedRow() && !LayoutUtil.isRepeatableRow(row)) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          hasDropCell=true;
          return;
        }
      }
    }
    if (!isHidden) {
      emitter.startRow(row);
    }
  }
}","public void startRow(IRowContent row){
  if (cellEmitter != null) {
    cellEmitter.startRow(row);
  }
 else {
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    if (!LayoutUtil.isRepeatableRow(row)) {
      int rowId=row.getRowID();
      if (lastRowId >= 0 && rowId > lastRowId - 1) {
        for (int i=lastRowId + 1; i < rowId; i++) {
          IRowContent newRow=(IRowContent)row.cloneContent(false);
          newRow.setParent(row.getParent());
          newRow.setRowID(i);
          startRow(newRow);
          endRow(newRow);
        }
      }
    }
    if (!isNestTable()) {
      layout.createRow(row,isHidden);
      if (!isHidden) {
        if (hasDropCell()) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          return;
        }
 else         if (layout.hasUnResolvedRow() && !LayoutUtil.isRepeatableRow(row)) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          hasDropCell=true;
          return;
        }
      }
    }
    if (!isHidden) {
      emitter.startRow(row);
    }
  }
}",0.7973724103082365
71705,"public void endRow(IRowContent row){
  if (cellEmitter != null) {
    cellEmitter.endRow(row);
  }
 else {
    if (!isNestTable()) {
      layout.endRow(row);
      hasDropCell=layout.hasDropCell();
      if (hasDropCell()) {
        return;
      }
      if (layoutEvents.size() > 0) {
        flush();
        return;
      }
    }
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    if (!isHidden) {
      emitter.endRow(row);
    }
  }
}","public void endRow(IRowContent row){
  if (cellEmitter != null) {
    cellEmitter.endRow(row);
  }
 else {
    if (!isNestTable()) {
      layout.endRow(row);
      if (!LayoutUtil.isRepeatableRow(row)) {
        lastRowId=row.getRowID();
      }
      hasDropCell=layout.hasDropCell();
      if (hasDropCell()) {
        return;
      }
      if (layoutEvents.size() > 0) {
        flush();
        return;
      }
    }
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    if (!isHidden) {
      emitter.endRow(row);
    }
  }
}",0.9186691312384472
71706,"public void initLayout(ITableContent table){
  this.layout=new TableContentLayout(table,getOutputFormat(),context);
  this.layoutEvents=new Stack();
}","public void initLayout(ITableContent table){
  String keyString=context.getHintMapKey(table.getInstanceID().toUniqueString());
  this.layout=new TableContentLayout(table,getOutputFormat(),context,keyString);
  this.layoutEvents=new Stack();
  UnresolvedRowHint hint=null;
  if (isFirst) {
    if (context != null) {
      hint=context.getUnresolvedRowHint(keyString);
      isFirst=false;
    }
  }
  if (hint == null) {
    hint=hintMap.get(keyString);
  }
  layout.setUnresolvedRowHint(hint);
}",0.4643962848297213
71707,"public void resolveAll(boolean finished){
  layout.resolveDropCells(finished);
  hint=layout.getUnresolvedRow();
  if (context != null && hint != null) {
    context.addUnresolvedRowHint(hint);
  }
  hasDropCell=layout.hasDropCell();
}","public void resolveAll(boolean finished){
  layout.resolveDropCells(finished);
  UnresolvedRowHint hint=layout.getUnresolvedRow();
  if (hint != null) {
    hintMap.put(layout.getKeyString(),hint);
    if (context != null) {
      context.addUnresolvedRowHint(layout.getKeyString(),hint);
    }
  }
  hasDropCell=layout.hasDropCell();
}",0.7530647985989493
71708,"public void flush(){
  if (page != null) {
    context.addTableColumnHints(columnHints);
    page.flush();
    pageBreakEvent();
    if (!page.finished) {
      context.setPageNumber(context.getPageNumber() + 1);
      context.setPageCount(context.getPageCount() + 1);
    }
    generator.reset();
    context.removeLayoutHint();
    context.clearPageHint();
    currentNode=null;
  }
}","public void flush(){
  if (page != null) {
    context.addTableColumnHints(columnHints);
    context.generatePageRowHints(getTableKeys());
    page.flush();
    pageBreakEvent();
    if (!page.finished) {
      context.setPageNumber(context.getPageNumber() + 1);
      context.setPageCount(context.getPageCount() + 1);
    }
    generator.reset();
    context.clearPageHint();
    currentNode=null;
  }
}",0.8734177215189873
71709,"public Data(final Object txt,final StyleEntry s,final String datatype,XlsContainer container){
  this.txt=txt;
  this.style=s;
  this.datatype=datatype;
  id=ID++;
  this.container=container;
}","public Data(final Object txt,final StyleEntry s,final String datatype,XlsContainer container,int rowSpanOfDesign){
  this.txt=txt;
  this.style=s;
  this.datatype=datatype;
  id=ID++;
  this.container=container;
  this.rowSpanInDesign=0;
}",0.8935185185185185
71710,"public void startCell(ICellContent cell){
  IStyle style=cell.getComputedStyle();
  engine.addCell(cell.getColumn(),cell.getColSpan(),style);
}","public void startCell(ICellContent cell){
  IStyle style=cell.getComputedStyle();
  engine.addCell(cell.getColumn(),cell.getColSpan(),cell.getRowSpan(),style);
}",0.9407894736842104
71711,"public void startListBand(IListBandContent listBand){
  engine.addCell(0,1,listBand.getComputedStyle());
}","public void startListBand(IListBandContent listBand){
  engine.addCell(0,1,0,listBand.getComputedStyle());
}",0.9906542056074766
71712,"private void applyContainerTopBorder(ContainerSizeInfo rule,int pos){
  if (engine.getContainers().size() == 0) {
    return;
  }
  XlsContainer container=engine.getCurrentContainer();
  StyleEntry entry=container.getStyle();
  int col=engine.getAxis().getColumnIndexByCoordinate(rule.getStartCoordinate());
  int span=engine.getAxis().getColumnIndexByCoordinate(rule.getEndCoordinate()) - col;
  for (int i=col; i < span + col; i++) {
    Data data=engine.getData(i,pos);
    if (data == null || data == Data.WASTE) {
      continue;
    }
    StyleBuilder.applyTopBorder(entry,data.style);
  }
}","private void applyContainerTopBorder(ContainerSizeInfo rule,int pos){
  if (engine.getContainers().size() == 0) {
    return;
  }
  XlsContainer container=engine.getCurrentContainer();
  StyleEntry entry=container.getStyle();
  int col=engine.getAxis().getColumnIndexByCoordinate(rule.getStartCoordinate());
  int span=engine.getAxis().getColumnIndexByCoordinate(rule.getEndCoordinate()) - col;
  for (int i=col; i < span + col; i++) {
    Data data=engine.getData(i,pos);
    if (data == null || data.isBlank()) {
      continue;
    }
    StyleBuilder.applyTopBorder(entry,data.style);
  }
}",0.853781512605042
71713,"public Data getData(int col,int row){
  Object object=cache.getData(col,row);
  return object == Data.WASTE ? null : (Data)object;
}","public Data getData(int col,int row){
  Object object=cache.getData(col,row);
  Data data=(Data)object;
  if (data == null || data.isBlank()) {
    return null;
  }
  return data;
}",0.6389776357827476
71714,"private void synchronize(){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int max=0;
  int len[]=new int[endColumnIndex - startColumnIndex];
  for (int i=startColumnIndex; i < endColumnIndex; i++) {
    int columnsize=cache.getStartRowId(i);
    len[i - startColumnIndex]=columnsize;
    max=max > columnsize ? max : columnsize;
  }
  for (int i=startColumnIndex; i < endColumnIndex; i++) {
    int rowspan=max - len[i - startColumnIndex];
    int last=len[i - startColumnIndex] - 1;
    if (rowspan > 0) {
      Data data=null;
      Data upstair=cache.getData(i,last);
      if (upstair != null && upstair != Data.WASTE && isInContainer(upstair,rowContainer)) {
        Data predata=upstair;
        int rs=predata.getRowSpan() + rowspan;
        predata.setRowSpan(rs);
        data=predata;
      }
 else {
        data=Data.WASTE;
      }
      for (int p=0; p < rowspan; p++) {
        cache.addData(i,Data.WASTE);
      }
    }
  }
}","private void synchronize(){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int max=0;
  int len[]=new int[endColumnIndex - startColumnIndex];
  for (int i=startColumnIndex; i < endColumnIndex; i++) {
    int columnsize=cache.getStartRowId(i);
    len[i - startColumnIndex]=columnsize;
    max=max > columnsize ? max : columnsize;
  }
  for (int i=startColumnIndex; i < endColumnIndex; i++) {
    int rowspan=max - len[i - startColumnIndex];
    int last=len[i - startColumnIndex] - 1;
    if (rowspan > 0) {
      Data data=null;
      Data upstair=cache.getData(i,last);
      if (upstair != null && canSpan(upstair,rowContainer)) {
        Data predata=upstair;
        int rs=predata.getRowSpan() + rowspan;
        predata.setRowSpan(rs);
        BlankData blankData=new BlankData(getRealData(predata));
        if (!isInContainer(predata,rowContainer)) {
          blankData.decreasRowSpanInDesign();
        }
        data=blankData;
      }
 else {
        data=new BlankData(null);
      }
      for (int p=0; p < rowspan; p++) {
        cache.addData(i,data);
      }
    }
  }
}",0.8944006012777151
71715,"public void addCell(int col,int span,IStyle style){
  XlsTable table=tables.peek();
  ContainerSizeInfo cellSizeInfo=table.getColumnSizeInfo(col,span);
  addContainer(createContainer(cellSizeInfo,style,getCurrentContainer()));
}","public void addCell(int col,int colSpan,int rowSpan,IStyle style){
  XlsTable table=tables.peek();
  ContainerSizeInfo cellSizeInfo=table.getColumnSizeInfo(col,colSpan);
  addContainer(createCellContainer(cellSizeInfo,style,getCurrentContainer(),rowSpan));
}",0.9300411522633744
71716,"private void addData(Data data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getRule().getStartCoordinate());
  int span=axis.getColumnIndexByCoordinate(data.getRule().getEndCoordinate()) - col;
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    addDatatoCache(i,Data.WASTE);
  }
}","private void addData(Data data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getRule().getStartCoordinate());
  int span=axis.getColumnIndexByCoordinate(data.getRule().getEndCoordinate()) - col;
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    addDatatoCache(i,BlankData.BLANK);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
}",0.843956043956044
71717,"public Data[] getRow(int rownum){
  Data[] row=cache.getRowData(rownum);
  List<Data> data=new ArrayList<Data>();
  int width=Math.min(row.length,MAX_COLUMN - 1);
  for (int i=0; i < width; i++) {
    if (Data.WASTE == row[i]) {
      continue;
    }
    Data d=(Data)row[i];
    if (d.isProcessed()) {
      continue;
    }
    d.setProcessed(true);
    data.add(row[i]);
  }
  Data[] rowdata=new Data[data.size()];
  data.toArray(rowdata);
  return rowdata;
}","public Data[] getRow(int rownum){
  Data[] row=cache.getRowData(rownum);
  List<Data> data=new ArrayList<Data>();
  int width=Math.min(row.length,MAX_COLUMN - 1);
  for (int i=0; i < width; i++) {
    Data d=(Data)row[i];
    if (d.isBlank()) {
      continue;
    }
    if (d.isProcessed()) {
      continue;
    }
    d.setProcessed(true);
    data.add(row[i]);
  }
  Data[] rowdata=new Data[data.size()];
  data.toArray(rowdata);
  return rowdata;
}",0.4534501642935378
71718,"public void complete(){
  int rowcount=cache.getMaxRow();
  for (int i=0; i < rowcount; i++) {
    Object[] row=cache.getRowData(i);
    for (int j=0; j < row.length; j++) {
      if (row[j] == Data.WASTE) {
        continue;
      }
      Data d=(Data)row[j];
      int styleid=engine.getStyleID(d.getStyleEntry());
      d.setStyleId(styleid);
      ContainerSizeInfo rule=d.getRule();
      int start=axis.getColumnIndexByCoordinate(rule.getStartCoordinate()) + 1;
      int end=axis.getColumnIndexByCoordinate(rule.getEndCoordinate()) + 1;
      end=Math.min(end,MAX_COLUMN);
      int scount=Math.max(0,end - start - 1);
      Span span=new Span(start,scount);
      HyperlinkDef link=d.getHyperlinkDef();
      if (link != null && link.getBookmark() != null) {
        links.put(link.getBookmark(),getCellName(i + 1,start + 1));
      }
      d.setSpan(span);
    }
  }
}","public void complete(){
  int rowcount=cache.getMaxRow();
  for (int i=0; i < rowcount; i++) {
    Object[] row=cache.getRowData(i);
    for (int j=0; j < row.length; j++) {
      Data d=(Data)row[j];
      if (d.isBlank()) {
        continue;
      }
      int styleid=engine.getStyleID(d.getStyleEntry());
      d.setStyleId(styleid);
      ContainerSizeInfo rule=d.getRule();
      int start=axis.getColumnIndexByCoordinate(rule.getStartCoordinate()) + 1;
      int end=axis.getColumnIndexByCoordinate(rule.getEndCoordinate()) + 1;
      end=Math.min(end,MAX_COLUMN);
      int scount=Math.max(0,end - start - 1);
      Span span=new Span(start,scount);
      HyperlinkDef link=d.getHyperlinkDef();
      if (link != null && link.getBookmark() != null) {
        links.put(link.getBookmark(),getCellName(i + 1,start + 1));
      }
      d.setSpan(span);
    }
  }
}",0.9535816618911176
71719,"public IStyle getStyle(Chart model,StyledComponent name){
  SimpleStyle ss=null;
  if (cache == null || !useCache) {
    StyleHandle style=handle.getPrivateStyle();
    ss=new SimpleStyle();
    String fname=style.getFontFamilyHandle().getStringValue();
    int fsize=getFontSizeIntValue(handle);
    boolean fbold=getFontWeight(style.getFontWeight()) >= 700;
    boolean fitalic=DesignChoiceConstants.FONT_STYLE_ITALIC.equals(style.getFontStyle());
    boolean funder=DesignChoiceConstants.TEXT_UNDERLINE_UNDERLINE.equals(style.getTextUnderline());
    boolean fstrike=DesignChoiceConstants.TEXT_LINE_THROUGH_LINE_THROUGH.equals(style.getTextLineThrough());
    if (dstyle != null) {
      CSSValueList valueList=(CSSValueList)dstyle.getProperty(StyleConstants.STYLE_FONT_FAMILY);
      if (valueList.getLength() > 0) {
        fname=valueList.item(0).getCssText();
      }
      fsize=getSize(dstyle.getProperty(StyleConstants.STYLE_FONT_SIZE));
      fbold=isBoldFont(dstyle.getProperty(StyleConstants.STYLE_FONT_WEIGHT));
      fitalic=isItalicFont(dstyle.getFontStyle());
      funder=CSSConstants.CSS_UNDERLINE_VALUE.equals(dstyle.getTextUnderline());
      fstrike=CSSConstants.CSS_LINE_THROUGH_VALUE.equals(dstyle.getTextLineThrough());
    }
    HorizontalAlignment ha=HorizontalAlignment.LEFT_LITERAL;
    if (DesignChoiceConstants.TEXT_ALIGN_CENTER.equals(style.getTextAlign())) {
      ha=HorizontalAlignment.CENTER_LITERAL;
    }
 else     if (DesignChoiceConstants.TEXT_ALIGN_RIGHT.equals(style.getTextAlign())) {
      ha=HorizontalAlignment.RIGHT_LITERAL;
    }
    VerticalAlignment va=VerticalAlignment.TOP_LITERAL;
    if (DesignChoiceConstants.VERTICAL_ALIGN_MIDDLE.equals(style.getVerticalAlign())) {
      va=VerticalAlignment.CENTER_LITERAL;
    }
 else     if (DesignChoiceConstants.VERTICAL_ALIGN_BOTTOM.equals(style.getVerticalAlign())) {
      va=VerticalAlignment.BOTTOM_LITERAL;
    }
    TextAlignment ta=TextAlignmentImpl.create();
    ta.setHorizontalAlignment(ha);
    ta.setVerticalAlignment(va);
    FontDefinition fd=FontDefinitionImpl.create(fname,fsize,fbold,fitalic,funder,fstrike,true,0,ta);
    ss.setFont(fd);
    ColorHandle ch=style.getColor();
    if (dstyle != null) {
      ss.setColor(getColor(dstyle.getProperty(StyleConstants.STYLE_COLOR)));
    }
 else     if (ch != null && ch.getRGB() != -1) {
      int rgbValue=ch.getRGB();
      ColorDefinition cd=ColorDefinitionImpl.create((rgbValue >> 16) & 0xff,(rgbValue >> 8) & 0xff,rgbValue & 0xff);
      ss.setColor(cd);
    }
 else {
      ss.setColor(ColorDefinitionImpl.BLACK());
    }
    ch=style.getBackgroundColor();
    if (dstyle != null) {
      ss.setBackgroundColor(getColor(dstyle.getProperty(StyleConstants.STYLE_BACKGROUND_COLOR)));
    }
 else     if (ch != null && ch.getRGB() != -1) {
      int rgbValue=ch.getRGB();
      ColorDefinition cd=ColorDefinitionImpl.create((rgbValue >> 16) & 0xff,(rgbValue >> 8) & 0xff,rgbValue & 0xff);
      ss.setBackgroundColor(cd);
    }
    if (style.getBackgroundImage() != null && style.getBackgroundImage().length() > 0) {
      String urlString=style.getBackgroundImage();
      try {
        new URL(urlString);
        ss.setBackgroundImage(ImageImpl.create(urlString));
      }
 catch (      Exception _) {
        urlString=""String_Node_Str"" + urlString;
        try {
          new URL(urlString);
          ss.setBackgroundImage(ImageImpl.create(urlString));
        }
 catch (        Exception __) {
          logger.log(_);
        }
      }
    }
    double pt=convertToPixel(style.getPaddingTop());
    double pb=convertToPixel(style.getPaddingBottom());
    double pl=convertToPixel(style.getPaddingLeft());
    double pr=convertToPixel(style.getPaddingRight());
    ss.setPadding(InsetsImpl.create(pt,pl,pb,pr));
    if (useCache) {
      cache=ss;
    }
  }
  if (useCache) {
    ss=cache.copy();
  }
  return ss;
}","public IStyle getStyle(Chart model,StyledComponent name){
  SimpleStyle ss=null;
  if (cache == null || !useCache) {
    StyleHandle style=handle.getPrivateStyle();
    ss=new SimpleStyle();
    String fname=style.getFontFamilyHandle().getStringValue();
    int fsize=getFontSizeIntValue(handle);
    boolean fbold=getFontWeight(style.getFontWeight()) >= 700;
    boolean fitalic=DesignChoiceConstants.FONT_STYLE_ITALIC.equals(style.getFontStyle());
    boolean funder=DesignChoiceConstants.TEXT_UNDERLINE_UNDERLINE.equals(style.getTextUnderline());
    boolean fstrike=DesignChoiceConstants.TEXT_LINE_THROUGH_LINE_THROUGH.equals(style.getTextLineThrough());
    if (dstyle != null) {
      CSSValueList valueList=(CSSValueList)dstyle.getProperty(StyleConstants.STYLE_FONT_FAMILY);
      if (valueList.getLength() > 0) {
        fname=valueList.item(0).getCssText();
      }
      fsize=getSize(dstyle.getProperty(StyleConstants.STYLE_FONT_SIZE));
      fbold=isBoldFont(dstyle.getProperty(StyleConstants.STYLE_FONT_WEIGHT));
      fitalic=isItalicFont(dstyle.getFontStyle());
      funder=CSSConstants.CSS_UNDERLINE_VALUE.equals(dstyle.getTextUnderline());
      fstrike=CSSConstants.CSS_LINE_THROUGH_VALUE.equals(dstyle.getTextLineThrough());
    }
    HorizontalAlignment ha=HorizontalAlignment.LEFT_LITERAL;
    if (DesignChoiceConstants.TEXT_ALIGN_CENTER.equals(style.getTextAlign())) {
      ha=HorizontalAlignment.CENTER_LITERAL;
    }
 else     if (DesignChoiceConstants.TEXT_ALIGN_RIGHT.equals(style.getTextAlign())) {
      ha=HorizontalAlignment.RIGHT_LITERAL;
    }
    VerticalAlignment va=VerticalAlignment.TOP_LITERAL;
    if (DesignChoiceConstants.VERTICAL_ALIGN_MIDDLE.equals(style.getVerticalAlign())) {
      va=VerticalAlignment.CENTER_LITERAL;
    }
 else     if (DesignChoiceConstants.VERTICAL_ALIGN_BOTTOM.equals(style.getVerticalAlign())) {
      va=VerticalAlignment.BOTTOM_LITERAL;
    }
    TextAlignment ta=TextAlignmentImpl.create();
    ta.setHorizontalAlignment(ha);
    ta.setVerticalAlignment(va);
    FontDefinition fd=FontDefinitionImpl.create(fname,fsize,fbold,fitalic,funder,fstrike,true,0,ta);
    ss.setFont(fd);
    ColorHandle ch=style.getColor();
    if (dstyle != null) {
      ss.setColor(getColor(dstyle.getProperty(StyleConstants.STYLE_COLOR)));
    }
 else     if (ch != null && ch.getRGB() != -1) {
      int rgbValue=ch.getRGB();
      ColorDefinition cd=ColorDefinitionImpl.create((rgbValue >> 16) & 0xff,(rgbValue >> 8) & 0xff,rgbValue & 0xff);
      ss.setColor(cd);
    }
 else {
      ss.setColor(ColorDefinitionImpl.BLACK());
    }
    ch=style.getBackgroundColor();
    if (dstyle != null) {
      ss.setBackgroundColor(getColor(dstyle.getProperty(StyleConstants.STYLE_BACKGROUND_COLOR)));
    }
 else     if (ch != null && ch.getRGB() != -1) {
      int rgbValue=ch.getRGB();
      ColorDefinition cd=ColorDefinitionImpl.create((rgbValue >> 16) & 0xff,(rgbValue >> 8) & 0xff,rgbValue & 0xff);
      ss.setBackgroundColor(cd);
    }
    if (style.getBackgroundImage() != null && style.getBackgroundImage().length() > 0) {
      String urlString=style.getBackgroundImage();
      try {
        new URL(urlString);
        ss.setBackgroundImage(ImageImpl.create(urlString));
      }
 catch (      Exception _) {
        if (urlString != null && urlString.startsWith(""String_Node_Str"")) {
          urlString=""String_Node_Str"" + urlString;
        }
 else {
          urlString=""String_Node_Str"" + urlString;
        }
        try {
          new URL(urlString);
          ss.setBackgroundImage(ImageImpl.create(urlString));
        }
 catch (        Exception __) {
          logger.log(_);
        }
      }
    }
    double pt=convertToPixel(style.getPaddingTop());
    double pb=convertToPixel(style.getPaddingBottom());
    double pl=convertToPixel(style.getPaddingLeft());
    double pr=convertToPixel(style.getPaddingRight());
    ss.setPadding(InsetsImpl.create(pt,pl,pb,pr));
    if (useCache) {
      cache=ss;
    }
  }
  if (useCache) {
    ss=cache.copy();
  }
  return ss;
}",0.9776656151419558
71720,"protected DimensionType createDimension(DimensionHandle handle,boolean useDefault){
  if (handle == null || !useDefault && !handle.isSet()) {
    return null;
  }
  if (handle.isKeyword()) {
    return new DimensionType(handle.getStringValue());
  }
  double measure=handle.getMeasure();
  String unit=handle.getUnits();
  return new DimensionType(measure,unit);
}","protected DimensionType createDimension(DimensionHandle handle,boolean useDefault){
  if (handle == null || !useDefault && !handle.isSet()) {
    return null;
  }
  if (handle.isKeyword()) {
    return new DimensionType(handle.getStringValue());
  }
  double measure=handle.getMeasure();
  String unit=handle.getUnits();
  if (unit == null || unit.length() == 0) {
    unit=handle.getDefaultUnit();
  }
  return new DimensionType(measure,unit);
}",0.8987654320987655
71721,"public void setWidth(String width){
  content.setWidth(DimensionType.parserUnit(width));
}","public void setWidth(String width){
  String unit=content.getReportContent().getDesign().getReportDesign().getDefaultUnits();
  content.setWidth(DimensionType.parserUnit(width,unit));
}",0.6545454545454545
71722,"public void close() throws BirtException {
  if (state == CLOSED)   return;
  if (this.getRdSaveHelper().needsSaveToDoc()) {
    while (this.next())     ;
    this.getRdSaveHelper().doSaveFinish();
  }
  if (needCache()) {
    while (this.next()) {
    }
    closeCacheOutputStream();
  }
  if (odiResult != null)   odiResult.close();
  odiResult=null;
  resultService=null;
  state=CLOSED;
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
}","public void close() throws BirtException {
  if (state == CLOSED)   return;
  this.resultService.getSession().getEngine().removeListener(listener);
  if (this.getRdSaveHelper().needsSaveToDoc()) {
    while (this.next())     ;
    this.getRdSaveHelper().doSaveFinish();
  }
  if (needCache()) {
    while (this.next()) {
    }
    closeCacheOutputStream();
  }
  if (odiResult != null)   odiResult.close();
  odiResult=null;
  resultService=null;
  state=CLOSED;
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
}",0.9310344827586208
71723,"/** 
 * Evaluate parameter values.
 * @param runnable
 * @return
 */
private HashMap evaluateParameterValues(IReportRunnable runnable){
  HashMap inputValues=new HashMap();
  IGetParameterDefinitionTask task=engine.createGetParameterDefinitionTask(runnable);
  Collection paramDefns=task.getParameterDefns(false);
  Iterator iter=paramDefns.iterator();
  while (iter.hasNext()) {
    IParameterDefnBase pBase=(IParameterDefnBase)iter.next();
    if (pBase instanceof IScalarParameterDefn) {
      IScalarParameterDefn paramDefn=(IScalarParameterDefn)pBase;
      String paramName=paramDefn.getName();
      String inputValue=(String)params.get(paramName);
      int paramType=paramDefn.getDataType();
      try {
        Object paramValue=stringToObject(paramType,inputValue);
        if (paramValue != null) {
          inputValues.put(paramName,paramValue);
        }
      }
 catch (      BirtException ex) {
        logger.log(Level.SEVERE,""String_Node_Str"" + paramName + ""String_Node_Str"",ex);
      }
    }
  }
  return inputValues;
}","/** 
 * Evaluate parameter values.
 * @param runnable
 * @return
 */
private HashMap evaluateParameterValues(IReportRunnable runnable){
  HashMap inputValues=new HashMap();
  IGetParameterDefinitionTask task=engine.createGetParameterDefinitionTask(runnable);
  Collection paramDefns=task.getParameterDefns(false);
  Iterator iter=paramDefns.iterator();
  while (iter.hasNext()) {
    IParameterDefnBase pBase=(IParameterDefnBase)iter.next();
    if (pBase instanceof IScalarParameterDefn) {
      IScalarParameterDefn paramDefn=(IScalarParameterDefn)pBase;
      String paramName=paramDefn.getName();
      String inputValue=(String)params.get(paramName);
      int paramDataType=paramDefn.getDataType();
      String paramType=paramDefn.getScalarParameterType();
      try {
        Object paramValue=null;
        if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
          paramValue=stringToObjectArray(paramDataType,inputValue);
        }
 else {
          paramValue=stringToObject(paramDataType,inputValue);
        }
        if (paramValue != null) {
          inputValues.put(paramName,paramValue);
        }
      }
 catch (      BirtException ex) {
        logger.log(Level.SEVERE,""String_Node_Str"" + paramName + ""String_Node_Str"",ex);
      }
    }
  }
  return inputValues;
}",0.8781316348195329
71724,"private void addQueryColumnBindings(IBaseQueryDefinition query,ITotalExprBindings totalExpressionBindings) throws BirtException {
  IBinding[] bindings=totalExpressionBindings.getColumnBindings();
  if (bindings != null) {
    for (int i=0; i < bindings.length; i++) {
      query.addBinding(bindings[i]);
    }
  }
}","private void addQueryColumnBindings(IBaseQueryDefinition query,ITotalExprBindings totalExpressionBindings) throws BirtException {
  IBinding[] bindings=totalExpressionBindings.getColumnBindings();
  if (bindings != null) {
    for (int i=0; i < bindings.length; i++) {
      bindings[i].setExportable(false);
      query.addBinding(bindings[i]);
    }
  }
}",0.940652818991098
71725,"public static TableInfo createTable(ITableContent table,int width){
  width=getElementWidth(table,width);
  int colcount=table.getColumnCount();
  if (colcount == 0) {
    return null;
  }
  int[] index=new int[colcount];
  int know=0;
  List unmount=new ArrayList();
  for (int i=0; i < colcount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      unmount.add(new Integer(i));
    }
 else {
      try {
        index[i]=ExcelUtil.covertDimensionType(value,width);
        know+=index[i];
      }
 catch (      IllegalArgumentException ex) {
        unmount.add(new Integer(i));
      }
    }
  }
  int left=width - know;
  if (left > 0 && unmount.size() == 0) {
    index[index.length - 1]=index[index.length - 1] + left;
    return new DefaultTableInfo(index);
  }
 else   if (left > 0 && unmount.size() > 0) {
    int[] size=split(left,unmount.size());
    Iterator iter=unmount.iterator();
    int i=0;
    while (iter.hasNext()) {
      int pos=((Integer)iter.next()).intValue();
      index[pos]=size[i];
      i++;
    }
    return new DefaultTableInfo(index);
  }
 else {
    return new DefaultTableInfo(index);
  }
}","public static TableInfo createTable(ITableContent table,int width){
  width=getElementWidth(table,width);
  int colcount=table.getColumnCount();
  if (colcount == 0) {
    return null;
  }
  int[] index=new int[colcount];
  int know=0;
  List unmount=new ArrayList();
  for (int i=0; i < colcount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      unmount.add(new Integer(i));
    }
 else {
      try {
        index[i]=ExcelUtil.covertDimensionType(value,width);
        know+=index[i];
      }
 catch (      IllegalArgumentException ex) {
        unmount.add(new Integer(i));
      }
    }
  }
  int left=width - know;
  if (left > 0 && unmount.size() == 0) {
    index[index.length - 1]=index[index.length - 1] + left;
    return new DefaultTableInfo(index);
  }
 else   if (left < 0) {
    return new DefaultTableInfo(split(width,colcount));
  }
 else   if (left > 0 && unmount.size() > 0) {
    int[] size=split(left,unmount.size());
    Iterator iter=unmount.iterator();
    int i=0;
    while (iter.hasNext()) {
      int pos=((Integer)iter.next()).intValue();
      index[pos]=size[i];
      i++;
    }
    return new DefaultTableInfo(index);
  }
 else {
    return new DefaultTableInfo(index);
  }
}",0.9652605459057072
71726,"public String getHyperlink(){
  return content.getHyperlinkAction().getHyperlink();
}","public String getHyperlink(){
  IHyperlinkAction hyperlinkAction=content.getHyperlinkAction();
  return hyperlinkAction == null ? null : hyperlinkAction.getHyperlink();
}",0.6431372549019608
71727,"private static double getDouble(Object o) throws BirtException {
  if (o == null)   return 0;
  return DataTypeUtil.toDouble(o);
}","private static double getDouble(Object o) throws BirtException {
  if (o == null)   return Double.NaN;
  return DataTypeUtil.toDouble(o);
}",0.9591078066914498
71728,"public Object evaluate(ScriptContext context,Scriptable scope) throws DataException {
  Object temp=this.script.exec(context.getContext(),scope);
  temp=JavascriptEvalUtil.convertJavascriptValue(temp);
  if (temp instanceof ScriptableObject) {
    return ((ScriptableObject)temp).getDefaultValue(null);
  }
  return temp;
}","public Object evaluate(ScriptContext context,Scriptable scope) throws DataException {
  Object temp=null;
  try {
    temp=this.script.exec(context.getContext(),scope);
    temp=JavascriptEvalUtil.convertJavascriptValue(temp);
    if (temp instanceof ScriptableObject) {
      return ((ScriptableObject)temp).getDefaultValue(null);
    }
  }
 catch (  EvaluatorException e) {
    throw new DataException(e.details(),e);
  }
  return temp;
}",0.8125819134993447
71729,"public ComputedColumnAdapter(ComputedColumnHandle modelCmptdColumn) throws AdapterException {
  super(modelCmptdColumn.getName(),modelCmptdColumn.getExpression(),org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(modelCmptdColumn.getDataType()),org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(modelCmptdColumn.getAggregateFunction()),modelCmptdColumn.getFilterExpression() == null ? null : new ScriptExpression(modelCmptdColumn.getFilterExpression()),populateArgument(modelCmptdColumn));
}","public ComputedColumnAdapter(ComputedColumnHandle modelCmptdColumn) throws AdapterException {
  super(modelCmptdColumn.getName(),modelCmptdColumn.getExpression(),org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(modelCmptdColumn.getDataType()),modelCmptdColumn.getAggregateFunction(),modelCmptdColumn.getFilterExpression() == null ? null : new ScriptExpression(modelCmptdColumn.getFilterExpression()),populateArgument(modelCmptdColumn));
}",0.8441814595660749
71730,"private static List populateArgument(ComputedColumnHandle modelCmptdColumn){
  List argument=new ArrayList();
  Iterator it=modelCmptdColumn.argumentsIterator();
  while (it != null && it.hasNext()) {
    AggregationArgumentHandle arg=(AggregationArgumentHandle)it.next();
    if (arg.getValue() != null)     argument.add(new ScriptExpression(arg.getValue()));
 else     argument.add(new ScriptExpression(null));
  }
  return argument;
}","/** 
 * Populate the arguments to a List by the order of the IAggrFunction saved
 * @param modelCmptdColumn
 * @return
 */
private static List populateArgument(ComputedColumnHandle modelCmptdColumn){
  Map argumentList=new HashMap();
  Iterator argumentIter=modelCmptdColumn.argumentsIterator();
  while (argumentIter.hasNext()) {
    AggregationArgumentHandle handle=(AggregationArgumentHandle)argumentIter.next();
    argumentList.put(handle.getName(),new ScriptExpression(handle.getValue()));
  }
  List orderedArgument=new ArrayList();
  if (modelCmptdColumn.getAggregateFunction() != null) {
    IAggrFunction info=null;
    try {
      info=AggregationManager.getInstance().getAggregation(modelCmptdColumn.getAggregateFunction());
    }
 catch (    DataException e) {
      e.printStackTrace();
    }
    if (info != null) {
      IParameterDefn[] parameters=info.getParameterDefn();
      if (parameters != null) {
        for (int i=0; i < parameters.length; i++) {
          IParameterDefn pInfo=parameters[i];
          if (argumentList.get(pInfo.getName()) != null) {
            orderedArgument.add(argumentList.get(pInfo.getName()));
          }
        }
      }
    }
  }
  return orderedArgument;
}",0.1926105390672319
71731,"/** 
 * @param design
 * @param odaStatement
 * @return
 * @throws DataException
 */
private IResultClass getMetaData(IOdaDataSetDesign design,PreparedStatement odaStatement) throws DataException {
  IResultClass result=null;
  if (design != null) {
    if (canAccessResultSetByName(design)) {
      result=odaStatement.getMetaData(design.getPrimaryResultSetName());
    }
 else     if (canAccessResultSetByNumber(design)) {
      result=odaStatement.getMetaData(design.getPrimaryResultSetNumber());
    }
  }
  if (result == null)   result=odaStatement.getMetaData();
  return result;
}","/** 
 * @param design
 * @param odaStatement
 * @return
 * @throws DataException
 */
private IResultClass getMetaData(IOdaDataSetDesign design,PreparedStatement odaStatement) throws DataException {
  IResultClass result=null;
  if (design != null) {
    if (canAccessResultSetByName(design)) {
      try {
        result=odaStatement.getMetaData(design.getPrimaryResultSetName());
      }
 catch (      DataException e) {
        throw new DataException(ResourceConstants.ERROR_HAPPEN_WHEN_RETRIEVE_RESULTSET,design.getPrimaryResultSetName());
      }
    }
 else     if (canAccessResultSetByNumber(design)) {
      try {
        result=odaStatement.getMetaData(design.getPrimaryResultSetNumber());
      }
 catch (      DataException e) {
        throw new DataException(ResourceConstants.ERROR_HAPPEN_WHEN_RETRIEVE_RESULTSET,design.getPrimaryResultSetNumber());
      }
    }
  }
  if (result == null)   result=odaStatement.getMetaData();
  return result;
}",0.759379042690815
71732,"public Object get(String name,Scriptable start){
  if (ScriptConstants.OUTER_RESULT_KEYWORD.equalsIgnoreCase(name)) {
    if (this.helper.getParent() != null)     return helper.getParent().getScriptable();
 else     throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.NO_OUTER_RESULTS_EXIST));
  }
  int rowIndex=-1;
  try {
    rowIndex=odiResult.getCurrentResultIndex();
  }
 catch (  BirtException e1) {
  }
  if (ScriptConstants.ROW_NUM_KEYWORD.equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    return new Integer(rowIndex);
  }
  if (rowIndex == currRowIndex && valueCacheMap.containsKey(name)) {
    return valueCacheMap.get(name);
  }
 else {
    Object value=null;
    try {
      IBinding binding=this.exprManager.getBinding(name);
      if (binding == null) {
        throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.INVALID_BOUND_COLUMN_NAME,new String[]{name}));
      }
      if (binding.getAggrFunction() != null)       return this.odiResult.getAggrValue(name);
      IBaseExpression dataExpr=this.exprManager.getExpr(name);
      if (dataExpr == null) {
        throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.INVALID_BOUND_COLUMN_NAME,new String[]{name}));
      }
      value=ExprEvaluateUtil.evaluateValue(dataExpr,this.odiResult.getCurrentResultIndex(),this.odiResult.getCurrentResult(),this.scope,this.cx);
      value=JavascriptEvalUtil.convertToJavascriptValue(DataTypeUtil.convert(value,binding.getDataType()),this.scope);
    }
 catch (    BirtException e) {
      value=null;
    }
    if (this.currRowIndex != rowIndex) {
      this.valueCacheMap.clear();
      this.currRowIndex=rowIndex;
    }
    valueCacheMap.put(name,value);
    return value;
  }
}","public Object get(String name,Scriptable start){
  if (ScriptConstants.OUTER_RESULT_KEYWORD.equalsIgnoreCase(name)) {
    if (this.helper.getParent() != null)     return helper.getParent().getScriptable();
 else     throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.NO_OUTER_RESULTS_EXIST));
  }
  int rowIndex=-1;
  try {
    rowIndex=odiResult.getCurrentResultIndex();
  }
 catch (  BirtException e1) {
  }
  if (ScriptConstants.ROW_NUM_KEYWORD.equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    return new Integer(rowIndex);
  }
  if (rowIndex == currRowIndex && valueCacheMap.containsKey(name)) {
    return valueCacheMap.get(name);
  }
 else {
    Object value=null;
    try {
      IBinding binding=this.exprManager.getBinding(name);
      if (binding == null) {
        throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.INVALID_BOUND_COLUMN_NAME,new String[]{name}));
      }
      if (binding.getAggrFunction() != null)       return this.odiResult.getAggrValue(name);
      IBaseExpression dataExpr=this.exprManager.getExpr(name);
      if (dataExpr == null) {
        throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.INVALID_BOUND_COLUMN_NAME,new String[]{name}));
      }
      value=ExprEvaluateUtil.evaluateValue(dataExpr,this.odiResult.getCurrentResultIndex(),this.odiResult.getCurrentResult(),this.scope,this.cx);
      value=JavascriptEvalUtil.convertToJavascriptValue(DataTypeUtil.convert(value,binding.getDataType()),this.scope);
    }
 catch (    BirtException e) {
      throw Context.reportRuntimeError(e.getLocalizedMessage());
    }
    if (this.currRowIndex != rowIndex) {
      this.valueCacheMap.clear();
      this.currRowIndex=rowIndex;
    }
    valueCacheMap.put(name,value);
    return value;
  }
}",0.982023074859136
71733,"/** 
 * Return the category map.
 * @return
 */
private static Map<String,Category> getCategoryMap(){
  if (categories != null)   return categories;
  categories=new HashMap<String,Category>();
  IExtensionRegistry extReg=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=extReg.getExtensionPoint(EXTENSION_POINT);
  if (extPoint == null)   return categories;
  IExtension[] exts=extPoint.getExtensions();
  if (exts == null) {
    return categories;
  }
  for (int e=0; e < exts.length; e++) {
    IConfigurationElement[] configElems=exts[e].getConfigurationElements();
    if (configElems == null)     continue;
    for (int i=0; i < configElems.length; i++) {
      if (configElems[i].getName().equals(ELEMENT_CATEGORY)) {
        Category category=new Category(configElems[i].getAttribute(ATTRIBUTE_NAME),configElems[i].getAttribute(ATTRIBUTE_DESC));
        categories.put(category.getName(),category);
        IScriptFunctionFactory factory;
        try {
          factory=(IScriptFunctionFactory)configElems[i].createExecutableExtension(ATTRIBUTE_FACTORYCLASS);
          IConfigurationElement[] functions=configElems[i].getChildren(ELEMENT_FUNCTION);
          for (int j=0; j < functions.length; j++) {
            IScriptFunction function=getScriptFunction(category,factory,functions[j]);
            if (function != null)             category.addFunction(function);
          }
        }
 catch (        FrameworkException e1) {
        }
      }
 else       if (configElems[i].getName().equals(ELEMENT_FUNCTION)) {
        if (categories.get(DEFAULT_CATEGORYNAME) == null) {
          categories.put(DEFAULT_CATEGORYNAME,new Category(DEFAULT_CATEGORYNAME,null));
        }
        IScriptFunction function=getScriptFunction(categories.get(DEFAULT_CATEGORYNAME),null,configElems[i]);
        if (function != null)         categories.get(DEFAULT_CATEGORYNAME).addFunction(function);
      }
 else       if (configElems[i].getName().equals(ELEMENT_JSLIB)) {
        populateResources(jsLibs,""String_Node_Str"",configElems[i]);
      }
    }
  }
  return categories;
}","/** 
 * Return the category map.
 * @return
 */
private static Map<String,Category> getCategoryMap(){
  if (categories != null)   return categories;
  categories=new HashMap<String,Category>();
  IExtensionRegistry extReg=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=extReg.getExtensionPoint(EXTENSION_POINT);
  if (extPoint == null)   return categories;
  IExtension[] exts=extPoint.getExtensions();
  if (exts == null) {
    return categories;
  }
  for (int e=0; e < exts.length; e++) {
    IConfigurationElement[] configElems=exts[e].getConfigurationElements();
    if (configElems == null)     continue;
    for (int i=0; i < configElems.length; i++) {
      if (configElems[i].getName().equals(ELEMENT_CATEGORY)) {
        Category category=new Category(configElems[i].getAttribute(ATTRIBUTE_NAME),configElems[i].getAttribute(ATTRIBUTE_DESC));
        categories.put(category.getName(),category);
        IScriptFunctionFactory factory=null;
        try {
          if (configElems[i].getAttribute(ATTRIBUTE_FACTORYCLASS) != null)           factory=(IScriptFunctionFactory)configElems[i].createExecutableExtension(ATTRIBUTE_FACTORYCLASS);
          IConfigurationElement[] functions=configElems[i].getChildren(ELEMENT_FUNCTION);
          for (int j=0; j < functions.length; j++) {
            IScriptFunction function=getScriptFunction(category,factory,functions[j]);
            if (function != null)             category.addFunction(function);
          }
        }
 catch (        FrameworkException e1) {
        }
      }
 else       if (configElems[i].getName().equals(ELEMENT_FUNCTION)) {
        if (categories.get(DEFAULT_CATEGORYNAME) == null) {
          categories.put(DEFAULT_CATEGORYNAME,new Category(DEFAULT_CATEGORYNAME,null));
        }
        IScriptFunction function=getScriptFunction(categories.get(DEFAULT_CATEGORYNAME),null,configElems[i]);
        if (function != null)         categories.get(DEFAULT_CATEGORYNAME).addFunction(function);
      }
 else       if (configElems[i].getName().equals(ELEMENT_JSLIB)) {
        populateResources(jsLibs,""String_Node_Str"",configElems[i]);
      }
    }
  }
  return categories;
}",0.9811853245531514
71734,"/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  CSSContext ctx=engine.getCSSContext();
  float fs=ctx.getMediumFontSize();
  if (value == CSSValueConstants.XX_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f/ 1.2f);
  }
  if (value == CSSValueConstants.X_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f);
  }
  if (value == CSSValueConstants.SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f);
  }
  if (value == CSSValueConstants.MEDIUM_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs);
  }
  if (value == CSSValueConstants.LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f);
  }
  if (value == CSSValueConstants.X_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f);
  }
  if (value == CSSValueConstants.XX_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f* 1.2f);
  }
  float scale=1.0f;
  boolean doParentRelative=false;
  if (value == CSSValueConstants.SMALLER_VALUE) {
    doParentRelative=true;
    scale=1.0f / 1.2f;
  }
 else   if (value == CSSValueConstants.LARGER_VALUE) {
    doParentRelative=true;
    scale=1.2f;
  }
 else   if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
switch (value.getPrimitiveType()) {
case CSSPrimitiveValue.CSS_EMS:
      doParentRelative=true;
    scale=value.getFloatValue();
  break;
case CSSPrimitiveValue.CSS_EXS:
doParentRelative=true;
scale=value.getFloatValue() * 0.5f;
break;
case CSSPrimitiveValue.CSS_PERCENTAGE:
doParentRelative=true;
scale=value.getFloatValue() * 0.01f;
break;
}
}
if (doParentRelative) {
CSSStylableElement parent=(CSSStylableElement)elt.getParent();
if (parent != null) {
IStyle style=parent.getComputedStyle();
if (style != null) {
Value fontSize=(Value)style.getProperty(IStyle.STYLE_FONT_SIZE);
if (fontSize != null) {
fs=fontSize.getFloatValue();
}
}
}
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * scale);
}
return super.computeValue(elt,engine,idx,value);
}","/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  CSSContext ctx=engine.getCSSContext();
  float fs=ctx.getMediumFontSize();
  if (value == CSSValueConstants.XX_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f/ 1.2f);
  }
  if (value == CSSValueConstants.X_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f);
  }
  if (value == CSSValueConstants.SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f);
  }
  if (value == CSSValueConstants.MEDIUM_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs);
  }
  if (value == CSSValueConstants.LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f);
  }
  if (value == CSSValueConstants.X_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f);
  }
  if (value == CSSValueConstants.XX_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f* 1.2f);
  }
  float scale=1.0f;
  boolean doParentRelative=false;
  if (value == CSSValueConstants.SMALLER_VALUE) {
    doParentRelative=true;
    scale=1.0f / 1.2f;
  }
 else   if (value == CSSValueConstants.LARGER_VALUE) {
    doParentRelative=true;
    scale=1.2f;
  }
 else   if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
switch (value.getPrimitiveType()) {
case CSSPrimitiveValue.CSS_EMS:
      doParentRelative=true;
    scale=value.getFloatValue();
  break;
case CSSPrimitiveValue.CSS_EXS:
doParentRelative=true;
scale=value.getFloatValue() * 0.5f;
break;
case CSSPrimitiveValue.CSS_PERCENTAGE:
doParentRelative=true;
scale=value.getFloatValue() * 0.01f;
break;
}
}
if (doParentRelative) {
CSSStylableElement parent=(CSSStylableElement)elt.getParent();
if (parent != null) {
IStyle style=parent.getComputedStyle();
if (style != null) {
Value fontSize=(Value)style.getProperty(IStyle.STYLE_FONT_SIZE);
if (fontSize != null) {
fs=fontSize.getFloatValue();
}
}
}
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * scale);
}
if (value.getPrimitiveType() == CSSPrimitiveValue.CSS_NUMBER) {
return super.computeValue(elt,engine,idx,new FloatValue(CSSPrimitiveValue.CSS_PT,value.getFloatValue()));
}
return super.computeValue(elt,engine,idx,value);
}",0.9609777015437392
71735,"public ComputedColumnAdapter(ComputedColumnHandle modelCmptdColumn) throws AdapterException {
  super(modelCmptdColumn.getName(),modelCmptdColumn.getExpression(),org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(modelCmptdColumn.getDataType()),modelCmptdColumn.getAggregateFunction(),modelCmptdColumn.getFilterExpression() == null ? null : new ScriptExpression(modelCmptdColumn.getFilterExpression()),populateArgument(modelCmptdColumn));
}","public ComputedColumnAdapter(ComputedColumnHandle modelCmptdColumn) throws AdapterException {
  super(modelCmptdColumn.getName(),modelCmptdColumn.getExpression(),org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(modelCmptdColumn.getDataType()),org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(modelCmptdColumn.getAggregateFunction()),modelCmptdColumn.getFilterExpression() == null ? null : new ScriptExpression(modelCmptdColumn.getFilterExpression()),populateArgument(modelCmptdColumn));
}",0.9171597633136096
71736,"/** 
 * Populate the arguments to a List by the order of the IAggrFunction saved
 * @param modelCmptdColumn
 * @return
 */
private static List populateArgument(ComputedColumnHandle modelCmptdColumn){
  Map argumentList=new HashMap();
  Iterator argumentIter=modelCmptdColumn.argumentsIterator();
  while (argumentIter.hasNext()) {
    AggregationArgumentHandle handle=(AggregationArgumentHandle)argumentIter.next();
    argumentList.put(handle.getName(),new ScriptExpression(handle.getValue()));
  }
  List orderedArgument=new ArrayList();
  if (modelCmptdColumn.getAggregateFunction() != null) {
    IAggrFunction info=null;
    try {
      info=AggregationManager.getInstance().getAggregation(modelCmptdColumn.getAggregateFunction());
    }
 catch (    DataException e) {
      e.printStackTrace();
    }
    if (info != null) {
      IParameterDefn[] parameters=info.getParameterDefn();
      if (parameters != null) {
        for (int i=0; i < parameters.length; i++) {
          IParameterDefn pInfo=parameters[i];
          if (argumentList.get(pInfo.getName()) != null) {
            orderedArgument.add(argumentList.get(pInfo.getName()));
          }
        }
      }
    }
  }
  return orderedArgument;
}","private static List populateArgument(ComputedColumnHandle modelCmptdColumn){
  List argument=new ArrayList();
  Iterator it=modelCmptdColumn.argumentsIterator();
  while (it != null && it.hasNext()) {
    AggregationArgumentHandle arg=(AggregationArgumentHandle)it.next();
    if (arg.getValue() != null)     argument.add(new ScriptExpression(arg.getValue()));
 else     argument.add(new ScriptExpression(null));
  }
  return argument;
}",0.2337976983646275
71737,"public final void paintClientArea(Graphics g){
  if (bPainting) {
    return;
  }
  final Rectangle r=getClientArea().getCopy();
  if (r.width <= 0 || r.height <= 0) {
    return;
  }
  bPainting=true;
  if (bDirty) {
    bDirty=false;
    if (cm == null) {
      bPainting=false;
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return;
    }
    final Display d=Display.getCurrent();
    Dimension dSize=r.getSize();
    if (imgChart == null || imgChart.getImageData().width != dSize.width || imgChart.getImageData().height != dSize.height) {
      if (gc != null) {
        gc.dispose();
      }
      if (imgChart != null) {
        imgChart.dispose();
      }
      bDirty=true;
      final ImageData ida=new ImageData(dSize.width,dSize.height,32,PALETTE_DATA);
      ida.transparentPixel=TRANSPARENT_COLOR;
      imgChart=new Image(d,ida);
      gc=new GC(imgChart);
    }
    final Color clrPreviousBG=gc.getBackground();
    gc.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    gc.fillRectangle(0,0,imgChart.getImageData().width,imgChart.getImageData().height);
    gc.setBackground(clrPreviousBG);
    Bounds bo=BoundsImpl.create(0,0,dSize.width,dSize.height);
    bo.scale(72d / idr.getDisplayServer().getDpiResolution());
    idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
    Generator gr=Generator.instance();
    ChartAdapter.beginIgnoreNotifications();
    cm.clearSections(IConstants.RUN_TIME);
    cm.createSampleRuntimeSeries();
    ChartAdapter.endIgnoreNotifications();
    try {
      RunTimeContext rtc=new RunTimeContext();
      rtc.setScriptingEnabled(false);
      rtc.setMessageLookup(new BIRTDesignerMessageLookup(crii.getHandle()));
      rtc.setRightToLeft(crii.getHandle().isDirectionRTL());
      rtc.setRightToLeftText(DesignChoiceConstants.BIDI_DIRECTION_RTL.equals(crii.getHandle().getPrivateStyle().getTextDirection()));
      rtc.setResourceFinder(crii);
      rtc.setExternalizer(crii);
      boolean bPlotChart=ChartXTabUtil.isPlotChart(crii.getHandle());
      if (bPlotChart) {
        rtc.setScale(createSharedScaleFromSampleData());
      }
      gr.render(idr,gr.build(idr.getDisplayServer(),cm,bo,null,rtc,new ChartReportStyleProcessor(crii.getHandle(),true)));
    }
 catch (    ChartException gex) {
      showException(gc,gex);
    }
  }
  if (imgChart != null) {
    g.drawImage(imgChart,r.x,r.y);
  }
  bPainting=false;
}","public final void paintClientArea(Graphics g){
  if (bPainting) {
    return;
  }
  final Rectangle r=getClientArea().getCopy();
  if (r.width <= 0 || r.height <= 0) {
    return;
  }
  bPainting=true;
  if (bDirty) {
    bDirty=false;
    final Display d=Display.getCurrent();
    Dimension dSize=r.getSize();
    if (imgChart == null || imgChart.getImageData().width != dSize.width || imgChart.getImageData().height != dSize.height) {
      if (gc != null) {
        gc.dispose();
      }
      if (imgChart != null) {
        imgChart.dispose();
      }
      bDirty=true;
      final ImageData ida=new ImageData(dSize.width,dSize.height,32,PALETTE_DATA);
      ida.transparentPixel=TRANSPARENT_COLOR;
      imgChart=new Image(d,ida);
      gc=new GC(imgChart);
    }
    final Color clrPreviousBG=gc.getBackground();
    gc.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    gc.fillRectangle(0,0,imgChart.getImageData().width,imgChart.getImageData().height);
    gc.setBackground(clrPreviousBG);
    if (cm == null) {
      showNullChart(dSize);
    }
 else {
      showChart(dSize);
    }
  }
  if (imgChart != null) {
    g.drawImage(imgChart,r.x,r.y);
  }
  bPainting=false;
}",0.571975916803503
71738,"public ComputedColumnAdapter(ComputedColumnHandle modelCmptdColumn) throws AdapterException {
  super(modelCmptdColumn.getName(),modelCmptdColumn.getExpression(),org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(modelCmptdColumn.getDataType()),org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(modelCmptdColumn.getAggregateFunction()),modelCmptdColumn.getFilterExpression() == null ? null : new ScriptExpression(modelCmptdColumn.getFilterExpression()),populateArgument(modelCmptdColumn));
}","public ComputedColumnAdapter(ComputedColumnHandle modelCmptdColumn) throws AdapterException {
  super(modelCmptdColumn.getName(),modelCmptdColumn.getExpression(),org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(modelCmptdColumn.getDataType()),modelCmptdColumn.getAggregateFunction(),modelCmptdColumn.getFilterExpression() == null ? null : new ScriptExpression(modelCmptdColumn.getFilterExpression()),populateArgument(modelCmptdColumn));
}",0.8441814595660749
71739,"private static List populateArgument(ComputedColumnHandle modelCmptdColumn){
  List argument=new ArrayList();
  Iterator it=modelCmptdColumn.argumentsIterator();
  while (it != null && it.hasNext()) {
    AggregationArgumentHandle arg=(AggregationArgumentHandle)it.next();
    if (arg.getValue() != null)     argument.add(new ScriptExpression(arg.getValue()));
 else     argument.add(new ScriptExpression(null));
  }
  return argument;
}","/** 
 * Populate the arguments to a List by the order of the IAggrFunction saved
 * @param modelCmptdColumn
 * @return
 */
private static List populateArgument(ComputedColumnHandle modelCmptdColumn){
  Map argumentList=new HashMap();
  Iterator argumentIter=modelCmptdColumn.argumentsIterator();
  while (argumentIter.hasNext()) {
    AggregationArgumentHandle handle=(AggregationArgumentHandle)argumentIter.next();
    argumentList.put(handle.getName(),new ScriptExpression(handle.getValue()));
  }
  List orderedArgument=new ArrayList();
  if (modelCmptdColumn.getAggregateFunction() != null) {
    IAggrFunction info=null;
    try {
      info=AggregationManager.getInstance().getAggregation(modelCmptdColumn.getAggregateFunction());
    }
 catch (    DataException e) {
      e.printStackTrace();
    }
    if (info != null) {
      IParameterDefn[] parameters=info.getParameterDefn();
      if (parameters != null) {
        for (int i=0; i < parameters.length; i++) {
          IParameterDefn pInfo=parameters[i];
          if (argumentList.get(pInfo.getName()) != null) {
            orderedArgument.add(argumentList.get(pInfo.getName()));
          }
        }
      }
    }
  }
  return orderedArgument;
}",0.1926105390672319
71740,"private void initializeRuntimeContext(IDataRowExpressionEvaluator rowAdapter){
  rtc.setActionRenderer(new BIRTActionRenderer(this.handle,this.ah,rowAdapter,this.context));
  rtc.setMessageLookup(new BIRTMessageLookup(context));
  rtc.setRightToLeft(handle.isDirectionRTL());
  rtc.setRightToLeftText(DesignChoiceConstants.BIDI_DIRECTION_RTL.equals(handle.getPrivateStyle().getTextDirection()));
  rtc.setResourceFinder((ChartReportItemImpl)getReportItem(handle));
  rtc.setExternalizer((ChartReportItemImpl)getReportItem(handle));
}","private void initializeRuntimeContext(IDataRowExpressionEvaluator rowAdapter){
  rtc.setActionRenderer(new BIRTActionRenderer(this.handle,this.ah,rowAdapter,this.context));
  rtc.setMessageLookup(new BIRTMessageLookup(context));
  rtc.setRightToLeft(handle.isDirectionRTL());
  ChartReportItemImpl crii=(ChartReportItemImpl)getReportItem(handle);
  rtc.setRightToLeftText(crii.isBIDIDirectionRTL());
  rtc.setResourceFinder(crii);
  rtc.setExternalizer(crii);
}",0.6277665995975855
71741,"public Object onRowSets(IBaseResultSet[] baseResultSet) throws BirtException {
  IBaseResultSet resultSet=getDataToRender(baseResultSet);
  if (resultSet == null) {
    return new Object[]{new byte[]{0}};
  }
 else   if (ChartReportItemUtil.isEmpty(resultSet)) {
    return null;
  }
  Bounds bo=cm.getBlock().getBounds();
  if (bo.getWidth() == 0 && bo.getHeight() == 0) {
    return null;
  }
  try {
    if (rtc.getScale() == null && ChartReportItemUtil.canScaleShared(handle,cm)) {
      rtc.setScale(createSharedScale(resultSet));
    }
    boolean isSharingQuery=false;
    if (handle.getDataBindingReference() != null || handle.getContainer() instanceof MultiViewsHandle) {
      isSharingQuery=true;
    }
    rtc.setSharingQuery(isSharingQuery);
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    initializeScriptHandler(externalContext);
    IDataRowExpressionEvaluator rowAdapter=createEvaluator(resultSet);
    IActionEvaluator evaluator=new BIRTActionEvaluator();
    Generator.instance().bindData(rowAdapter,evaluator,cm,rtc);
    prepareDeviceRenderer();
    GeneratedChartState gcs=buildChart(rowAdapter,externalContext);
    renderToImageFile(gcs);
    rowAdapter.close();
    if (rtc.getScale() != null && !rtc.getScale().isShared()) {
      rtc.getScale().setShared(true);
      ((ChartReportItemImpl)getReportItem(handle)).setScale(rtc.getScale());
    }
    return getImageToDisplay();
  }
 catch (  BirtException birtException) {
    if (isNoDataException(birtException)) {
      return null;
    }
 else {
      throw birtException;
    }
  }
catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
}","public Object onRowSets(IBaseResultSet[] baseResultSet) throws BirtException {
  IBaseResultSet resultSet=getDataToRender(baseResultSet);
  if (resultSet == null) {
    return new Object[]{new byte[]{0}};
  }
 else   if (ChartReportItemUtil.isEmpty(resultSet)) {
    return null;
  }
  Bounds bo=cm.getBlock().getBounds();
  if (bo.getWidth() == 0 && bo.getHeight() == 0) {
    return null;
  }
  try {
    if (rtc.getScale() == null && ChartReportItemUtil.canScaleShared(handle,cm)) {
      rtc.setScale(createSharedScale(resultSet));
    }
    boolean isSharingQuery=false;
    if (handle.getDataBindingReference() != null || handle.getContainer() instanceof MultiViewsHandle) {
      isSharingQuery=true;
    }
    rtc.setSharingQuery(isSharingQuery);
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    if (rtc.getScriptContext() != null && rtc.getScriptContext() instanceof ChartScriptContext) {
      ((ChartScriptContext)rtc.getScriptContext()).setExternalContext(externalContext);
    }
    initializeScriptHandler(externalContext);
    IDataRowExpressionEvaluator rowAdapter=createEvaluator(resultSet);
    IActionEvaluator evaluator=new BIRTActionEvaluator();
    Generator.instance().bindData(rowAdapter,evaluator,cm,rtc);
    prepareDeviceRenderer();
    GeneratedChartState gcs=buildChart(rowAdapter,externalContext);
    renderToImageFile(gcs);
    rowAdapter.close();
    if (rtc.getScale() != null && !rtc.getScale().isShared()) {
      rtc.getScale().setShared(true);
      ((ChartReportItemImpl)getReportItem(handle)).setScale(rtc.getScale());
    }
    return getImageToDisplay();
  }
 catch (  BirtException birtException) {
    if (isNoDataException(birtException)) {
      return null;
    }
 else {
      throw birtException;
    }
  }
catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
}",0.9494736842105264
71742,"/** 
 * This method create a ResourceIdentifiers instance which is in turn being passed to appContext. The consumer of appContext, especially those Oda drivers, can then use it for acquire Resource info.
 * @param handle
 * @return
 */
private static ResourceIdentifiers createResourceIdentifiers(ModuleHandle handle){
  if (handle == null)   return null;
  try {
    ResourceIdentifiers identifiers=new ResourceIdentifiers();
    identifiers.setDesignResourceBaseURI(handle.getSystemId().toURI());
    identifiers.setApplResourceBaseURI(new File(handle.getResourceFolder()).toURI());
    return identifiers;
  }
 catch (  URISyntaxException e) {
    return null;
  }
}","/** 
 * This method create a ResourceIdentifiers instance which is in turn being passed to appContext. The consumer of appContext, especially those Oda drivers, can then use it for acquire Resource info.
 * @param handle
 * @return
 */
private static ResourceIdentifiers createResourceIdentifiers(ModuleHandle handle){
  if (handle == null)   return null;
  try {
    ResourceIdentifiers identifiers=new ResourceIdentifiers();
    if (handle.getSystemId() != null) {
      identifiers.setDesignResourceBaseURI(handle.getSystemId().toURI());
    }
    if (handle.getResourceFolder() != null) {
      identifiers.setApplResourceBaseURI(new File(handle.getResourceFolder()).toURI());
    }
    return identifiers;
  }
 catch (  URISyntaxException e) {
    return null;
  }
}",0.8763888888888889
71743,"IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  if (dteSession.getDataSessionContext().getAppContext() == null) {
    dteSession.getDataSessionContext().setAppContext(new HashMap());
  }
  dteSession.getDataSessionContext().getAppContext().put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers(source.getModuleHandle()));
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(MessageConstants.EXTENTION_ID_MISSING_ERROR,source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}","IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  setResourceIDtoDataSourceHandle(source);
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(MessageConstants.EXTENTION_ID_MISSING_ERROR,source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}",0.9081659973226238
71744,"/** 
 * This method create a ResourceIdentifiers instance which is in turn being passed to appContext. The consumer of appContext, especially those Oda drivers, can then use it for acquire Resource info.
 * @param handle
 * @return
 */
private static ResourceIdentifiers createResourceIdentifiers(ModuleHandle handle){
  if (handle == null)   return null;
  try {
    ResourceIdentifiers identifiers=new ResourceIdentifiers();
    identifiers.setDesignResourceBaseURI(handle.getSystemId().toURI());
    identifiers.setApplResourceBaseURI(new File(handle.getResourceFolder()).toURI());
    return identifiers;
  }
 catch (  URISyntaxException e) {
    return null;
  }
}","/** 
 * This method create a ResourceIdentifiers instance which is in turn being passed to appContext. The consumer of appContext, especially those Oda drivers, can then use it for acquire Resource info.
 * @param handle
 * @return
 */
private static ResourceIdentifiers createResourceIdentifiers(ModuleHandle handle){
  if (handle == null)   return null;
  try {
    ResourceIdentifiers identifiers=new ResourceIdentifiers();
    if (handle.getSystemId() != null) {
      identifiers.setDesignResourceBaseURI(handle.getSystemId().toURI());
    }
    if (handle.getResourceFolder() != null) {
      identifiers.setApplResourceBaseURI(new File(handle.getResourceFolder()).toURI());
    }
    return identifiers;
  }
 catch (  URISyntaxException e) {
    return null;
  }
}",0.8763888888888889
71745,"public void testReterive() throws BirtException {
  try {
    context.eval(""String_Node_Str"");
    fail();
  }
 catch (  JavaScriptException e) {
    assertTrue(true);
  }
  assertEquals(""String_Node_Str"",context.eval(""String_Node_Str""));
  assertEquals(""String_Node_Str"",context.eval(""String_Node_Str""));
  assertEquals(""String_Node_Str"",context.eval(""String_Node_Str""));
  assertEquals(""String_Node_Str"",context.eval(""String_Node_Str""));
  assertEquals(""String_Node_Str"",context.eval(""String_Node_Str"" + ""String_Node_Str""));
}","public void testReterive() throws BirtException {
  try {
    context.eval(""String_Node_Str"");
    fail();
  }
 catch (  BirtException e) {
    assertTrue(true);
  }
  assertEquals(""String_Node_Str"",context.eval(""String_Node_Str""));
  assertEquals(""String_Node_Str"",context.eval(""String_Node_Str""));
  assertEquals(""String_Node_Str"",context.eval(""String_Node_Str""));
  assertEquals(""String_Node_Str"",context.eval(""String_Node_Str""));
  assertEquals(""String_Node_Str"",context.eval(""String_Node_Str"" + ""String_Node_Str""));
}",0.979047619047619
71746,"/** 
 * Convert String without specified locale to java.util.Date Try to format the given String for JRE default Locale, if it fails, try to format the String for Locale.US 
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDate(String source) throws BirtException {
  try {
    return toDateISO8601(source);
  }
 catch (  BirtException e) {
    try {
      return toDate(source,JRE_DEFAULT_LOCALE);
    }
 catch (    BirtException use) {
      return toDate(source,DEFAULT_LOCALE);
    }
  }
}","/** 
 * Convert String without specified locale to java.util.Date Try to format the given String for JRE default Locale, if it fails, try to format the String for Locale.US 
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDate(String source) throws BirtException {
  try {
    return toDateISO8601(source,null);
  }
 catch (  BirtException e) {
    try {
      return toDate(source,JRE_DEFAULT_LOCALE);
    }
 catch (    BirtException use) {
      return toDate(source,DEFAULT_LOCALE);
    }
  }
}",0.9956859361518552
71747,"/** 
 * convert String with ISO8601 date format to java.util.Date
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDateISO8601(String source) throws BirtException {
  Date resultDate=null;
  try {
    resultDate=DateFormatISO8601.parse(source);
    return resultDate;
  }
 catch (  ParseException e1) {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}","/** 
 * convert String with ISO8601 date format to java.util.Date
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDateISO8601(String source,TimeZone timeZone) throws BirtException {
  Date resultDate=null;
  try {
    resultDate=DateFormatISO8601.parse(source,timeZone);
    return resultDate;
  }
 catch (  ParseException e1) {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}",0.9739130434782608
71748,"/** 
 * Parse a date/time string.
 * @param source
 * @return
 * @throws ParseException
 */
public static Date parse(String source) throws BirtException, ParseException {
  if (source == null || source.trim().length() == 0) {
    return null;
  }
  Date resultDate=null;
  source=cleanDate(source);
  Object simpleDateFormatter=DateFormatFactory.getPatternInstance(PatternKey.getPatterKey(source));
  if (simpleDateFormatter != null) {
    try {
      resultDate=((SimpleDateFormat)simpleDateFormatter).parse(source);
      return resultDate;
    }
 catch (    ParseException e1) {
    }
  }
  if (resultDate == null) {
    throw new ParseException(""String_Node_Str"" + source,0);
  }
  return resultDate;
}","/** 
 * Parse a date/time string.
 * @param source
 * @return
 * @throws ParseException
 */
public static Date parse(String source,TimeZone timeZone) throws BirtException, ParseException {
  if (source == null || source.trim().length() == 0) {
    return null;
  }
  Date resultDate=null;
  source=cleanDate(source);
  Object simpleDateFormatter=DateFormatFactory.getPatternInstance(PatternKey.getPatterKey(source));
  if (simpleDateFormatter != null) {
    SimpleDateFormat dateFormat=(SimpleDateFormat)simpleDateFormatter;
    TimeZone savedTimeZone=null;
    try {
      if (timeZone != null) {
        savedTimeZone=dateFormat.getTimeZone();
        dateFormat.setTimeZone(timeZone);
      }
      resultDate=dateFormat.parse(source);
      return resultDate;
    }
 catch (    ParseException e1) {
    }
 finally {
      if (savedTimeZone != null)       dateFormat.setTimeZone(savedTimeZone);
    }
  }
  if (resultDate == null) {
    throw new ParseException(""String_Node_Str"" + source,0);
  }
  return resultDate;
}",0.7592592592592593
71749,"/** 
 * Creates a DataEngine context in the provided mode, using the provided top level scope. Also sets the handle of the report design being executed. 
 * @param mode Data Session mode. Can be MODE_GENERATION, MODE_PRESENTATION or MODE_DIRECT_PRESENTATION
 * @param moduleHandle If not null, this report module is used to look up data setand data source definition when executing queries.
 * @param scriptContext
 * @param classLoader
 * @throws AdapterException
 */
public DataSessionContext(int mode,ModuleHandle moduleHandle,ScriptContext scriptContext,ClassLoader classLoader) throws AdapterException {
  if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == MODE_DIRECT_PRESENTATION || mode == MODE_UPDATE))   throw new AdapterException(ResourceConstants.ADAPTER_INVALID_MODE,new Integer(mode));
  this.mode=mode;
  this.hasExternalScope=topScope != null;
  this.moduleHandle=moduleHandle;
  this.appClassLoader=classLoader;
  this.sContext=scriptContext;
  this.topScope=scriptContext.getScope();
}","/** 
 * Creates a DataEngine context in the provided mode, using the provided top level scope. Also sets the handle of the report design being executed. 
 * @param mode Data Session mode. Can be MODE_GENERATION, MODE_PRESENTATION or MODE_DIRECT_PRESENTATION
 * @param moduleHandle If not null, this report module is used to look up data setand data source definition when executing queries.
 * @param scriptContext
 * @param classLoader
 * @throws AdapterException
 */
public DataSessionContext(int mode,ModuleHandle moduleHandle,ScriptContext scriptContext,ClassLoader classLoader) throws AdapterException {
  if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == MODE_DIRECT_PRESENTATION || mode == MODE_UPDATE))   throw new AdapterException(ResourceConstants.ADAPTER_INVALID_MODE,new Integer(mode));
  this.mode=mode;
  this.hasExternalScope=topScope != null;
  this.moduleHandle=moduleHandle;
  this.appClassLoader=classLoader;
  if (scriptContext == null) {
    scriptContext=new ScriptContext();
    scriptContext.enterScope(this.getTopScope());
  }
  this.sContext=scriptContext;
  this.topScope=scriptContext.getScope();
}",0.8809963099630996
71750,"/** 
 * Edits the selected binding of table.
 * @param bindingIndex
 */
private void editSelectedBinding(int bindingIndex){
  if (!btnEdit.isEnabled())   return;
  ComputedColumnHandle bindingHandle=null;
  if (bindingIndex > -1) {
    bindingHandle=(ComputedColumnHandle)(DEUtil.getBindingHolder(inputElement)).getColumnBindings().getAt(bindingIndex);
  }
  if (bindingHandle == null)   return;
  String bindingName=bindingHandle.getName();
  DataColumnBindingDialog dialog=new DataColumnBindingDialog(false);
  dialog.setInput(inputElement,bindingHandle);
  dialog.setExpressionProvider(expressionProvider);
  if (dialog.open() == Dialog.OK) {
    if (bindingTable != null)     bindingTable.getTable().setSelection(bindingIndex);
    if (selectedColumnName != null && selectedColumnName.equals(bindingName))     selectedColumnName=bindingHandle.getName();
  }
}","/** 
 * Edits the selected binding of table.
 * @param bindingIndex
 */
private void editSelectedBinding(int bindingIndex){
  if (!btnEdit.isEnabled())   return;
  ComputedColumnHandle bindingHandle=null;
  if (bindingIndex > -1) {
    bindingHandle=(ComputedColumnHandle)(DEUtil.getBindingHolder(inputElement)).getColumnBindings().getAt(bindingIndex);
  }
  if (bindingHandle == null)   return;
  String bindingName=bindingHandle.getName();
  DataColumnBindingDialog dialog=new DataColumnBindingDialog(false);
  setDialogInput(dialog,bindingHandle);
  dialog.setExpressionProvider(expressionProvider);
  if (dialog.open() == Dialog.OK) {
    if (bindingTable != null)     bindingTable.getTable().setSelection(bindingIndex);
    if (selectedColumnName != null && selectedColumnName.equals(bindingName))     selectedColumnName=bindingHandle.getName();
  }
}",0.97847585805701
71751,"/** 
 * @param session
 * @param queryDefn
 * @param queryResults
 */
public static void merge(DataEngineSession session,IBaseQueryDefinition queryDefn,IQueryResults queryResults){
  try {
    if (session == null || queryResults.getResultMetaData() == null || queryResults.getResultMetaData().getColumnCount() == 0)     return;
  }
 catch (  BirtException e) {
    return;
  }
  String elementId=queryDefn.getName();
  String bookmark=queryResults.getName();
  String rsId=queryResults.getID();
  NamingRelation relation=session.getNamingRelation();
  if (relation == null) {
    relation=new NamingRelation();
    session.setNamingRelation(relation);
  }
  Map bookmarkMap=relation.getBookmarkMap();
  Map elementIdMap=relation.getElementIdMap();
  if (bookmark != null) {
    if (bookmarkMap.get(bookmark) == null) {
      bookmarkMap.put(bookmark,rsId);
    }
 else {
      Object value=bookmarkMap.get(bookmark);
      if (value instanceof String) {
        Map subMap=new HashMap();
        subMap.put(getSubKey(subMap),value);
        bookmarkMap.put(bookmark,subMap);
      }
 else       if (value instanceof Map) {
        Map subMap=(Map)value;
        subMap.put(getSubKey(subMap),rsId);
      }
    }
  }
  if (elementId != null) {
    if (elementIdMap.get(elementId) == null) {
      elementIdMap.put(elementId,rsId);
    }
 else {
      Object value=elementIdMap.get(elementId);
      if (value instanceof String) {
        Map subMap=new HashMap();
        subMap.put(getSubKey(subMap),value);
        elementIdMap.put(elementId,subMap);
      }
 else       if (value instanceof Map) {
        Map subMap=(Map)value;
        subMap.put(getSubKey(subMap),rsId);
      }
    }
  }
}","/** 
 * @param session
 * @param queryDefn
 * @param queryResults
 */
public static void merge(DataEngineSession session,IBaseQueryDefinition queryDefn,IQueryResults queryResults){
  try {
    if (session == null || queryResults.getResultMetaData() == null || queryResults.getResultMetaData().getColumnCount() == 0 || queryDefn instanceof ISubqueryDefinition)     return;
  }
 catch (  BirtException e) {
    return;
  }
  String elementId=queryDefn.getName();
  String bookmark=queryResults.getName();
  String rsId=queryResults.getID();
  NamingRelation relation=session.getNamingRelation();
  if (relation == null) {
    relation=new NamingRelation();
    session.setNamingRelation(relation);
  }
  Map bookmarkMap=relation.getBookmarkMap();
  Map elementIdMap=relation.getElementIdMap();
  if (bookmark != null) {
    if (bookmarkMap.get(bookmark) == null) {
      bookmarkMap.put(bookmark,rsId);
    }
 else {
      Object value=bookmarkMap.get(bookmark);
      if (value instanceof String) {
        Map subMap=new HashMap();
        subMap.put(getSubKey(subMap),value);
        bookmarkMap.put(bookmark,subMap);
      }
 else       if (value instanceof Map) {
        Map subMap=(Map)value;
        subMap.put(getSubKey(subMap),rsId);
      }
    }
  }
  if (elementId != null) {
    if (elementIdMap.get(elementId) == null) {
      elementIdMap.put(elementId,rsId);
    }
 else {
      Object value=elementIdMap.get(elementId);
      if (value instanceof String) {
        Map subMap=new HashMap();
        subMap.put(getSubKey(subMap),value);
        elementIdMap.put(elementId,subMap);
      }
 else       if (value instanceof Map) {
        Map subMap=(Map)value;
        subMap.put(getSubKey(subMap),rsId);
      }
    }
  }
}",0.9871794871794872
71752,"public ExtensionClassMethod(IMethodInfo method){
  this.method=method;
}","public ExtensionClassMethod(IMethodInfo method){
  this.method=method;
  IClassInfo typeInfo=method.getClassReturnType();
  if (typeInfo != null) {
    returnType=new ExtensionClassJSObject(typeInfo);
  }
}",0.5179856115107914
71753,"public JSObjectMetaData getReturn(){
  IClassInfo rtInfo=method.getClassReturnType();
  if (rtInfo != null) {
    return new ExtensionClassJSObject(method.getClassReturnType());
  }
  return null;
}","public JSObjectMetaData getReturn(){
  return returnType;
}",0.4202334630350194
71754,"public ExtensionClassField(IMemberInfo field){
  this.field=field;
  this.typeName=field.getDataType();
  try {
    this.type=JSSyntaxContext.getJavaClassMeta(field.getDataType());
  }
 catch (  ClassNotFoundException e) {
  }
}","public ExtensionClassField(IMemberInfo field){
  this.field=field;
  this.typeName=field.getDataType();
  IClassInfo typeInfo=field.getClassType();
  if (typeInfo != null) {
    type=new ExtensionClassJSObject(typeInfo);
  }
}",0.5462555066079295
71755,"protected void initializeScriptContext(Context cx,Scriptable scope){
  WrapFactory factory=new WrapFactory(){
    protected IJavascriptWrapper coreWrapper=new CoreJavaScriptWrapper();
    /** 
 * wrapper an java object to javascript object.
 */
    public Object wrap(    Context cx,    Scriptable scope,    Object obj,    Class staticType){
      Object object=coreWrapper.wrap(cx,scope,obj,staticType);
      if (object != obj) {
        return object;
      }
      return super.wrap(cx,scope,obj,staticType);
    }
  }
;
  factory.setJavaPrimitiveWrap(false);
  scriptContext.getContext().setWrapFactory(factory);
  new CoreJavaScriptInitializer().initialize(cx,scope);
}","protected void initializeScriptContext(Context cx,Scriptable scope){
  WrapFactory factory=new WrapFactory(){
    protected IJavascriptWrapper coreWrapper=new CoreJavaScriptWrapper();
    /** 
 * wrapper an java object to javascript object.
 */
    public Object wrap(    Context cx,    Scriptable scope,    Object obj,    Class staticType){
      Object object=coreWrapper.wrap(cx,scope,obj,staticType);
      if (object != obj) {
        return object;
      }
      return super.wrap(cx,scope,obj,staticType);
    }
  }
;
  scriptContext.getContext().setWrapFactory(factory);
  new CoreJavaScriptInitializer().initialize(cx,scope);
}",0.9702517162471396
71756,"public boolean isEmpty() throws BirtException {
  return exprManager.getBindingExprs().isEmpty();
}","public boolean isEmpty() throws BirtException {
  return false;
}",0.7439024390243902
71757,"public boolean isEmpty() throws BirtException {
  return false;
}","public boolean isEmpty() throws BirtException {
  return exprManager.getBindingExprs().isEmpty();
}",0.7560975609756098
71758,"/** 
 * Calculates the spacing by given container width, text width and horizontal alignment style.
 * @param compWidth Container width.
 * @param textWidth Text width.
 * @return
 * @author bidi_hcg
 */
protected int calculateSpacing(int compWidth,int textWidth){
  int rlt=0;
  String align=BidiAlignmentResolver.resolveAlignment(textAlign,isMirrored());
  if (DesignChoiceConstants.TEXT_ALIGN_LEFT.equals(align) || DesignChoiceConstants.TEXT_ALIGN_JUSTIFY.equals(align)) {
    rlt=0;
  }
 else   if (DesignChoiceConstants.TEXT_ALIGN_CENTER.equals(align)) {
    rlt=(compWidth - textWidth) / 2;
  }
 else   if (DesignChoiceConstants.TEXT_ALIGN_RIGHT.equals(align)) {
    rlt=(compWidth - textWidth);
  }
  return rlt;
}","/** 
 * Calculates the spacing by given container width, text width and horizontal alignment style.
 * @param compWidth Container width.
 * @param textWidth Text width.
 * @return
 * @author bidi_hcg
 */
protected int calculateSpacing(int compWidth,int textWidth){
  int rlt=0;
  String align=BidiAlignmentResolver.resolveAlignment(textAlign,isMirrored());
  if (align == null) {
    if (getDirection() != null) {
      if (getDirection().equals(DesignChoiceConstants.BIDI_DIRECTION_LTR) && isMirrored()) {
        align=DesignChoiceConstants.TEXT_ALIGN_RIGHT;
      }
 else       if (getDirection().equals(DesignChoiceConstants.BIDI_DIRECTION_RTL) && !isMirrored()) {
        align=DesignChoiceConstants.TEXT_ALIGN_RIGHT;
      }
    }
 else {
      if (isMirrored()) {
        align=DesignChoiceConstants.TEXT_ALIGN_RIGHT;
      }
 else {
        align=DesignChoiceConstants.TEXT_ALIGN_LEFT;
      }
    }
  }
  if (DesignChoiceConstants.TEXT_ALIGN_LEFT.equals(align) || DesignChoiceConstants.TEXT_ALIGN_JUSTIFY.equals(align)) {
    rlt=0;
  }
 else   if (DesignChoiceConstants.TEXT_ALIGN_CENTER.equals(align)) {
    rlt=(compWidth - textWidth) / 2;
  }
 else   if (DesignChoiceConstants.TEXT_ALIGN_RIGHT.equals(align)) {
    rlt=(compWidth - textWidth);
  }
  return rlt;
}",0.7220831246870305
71759,"/** 
 * @param style
 * @return A new CellEditor style
 * @author bidi_hcg
 */
private int applyBidiStyle(int style){
  boolean rtl=DesignChoiceConstants.BIDI_DIRECTION_RTL.equals(((LabelFigure)getEditPart().getFigure()).getDirection());
  style|=(rtl ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT);
  String align=((LabelFigure)getEditPart().getFigure()).getTextAlign();
  if (IStyle.CSS_CENTER_VALUE.equals(align))   style|=SWT.CENTER;
 else   if (IStyle.CSS_RIGHT_VALUE.equals(align))   style|=(rtl ? SWT.LEFT : SWT.RIGHT);
 else   if (IStyle.CSS_LEFT_VALUE.equals(align))   style|=(rtl ? SWT.RIGHT : SWT.LEFT);
 else {
    boolean mirrored=getEditPart().getFigure().isMirrored();
    style|=(mirrored ^ rtl ? SWT.RIGHT : SWT.LEFT);
  }
  return style;
}","/** 
 * @param style
 * @return A new CellEditor style
 * @author bidi_hcg
 */
private int applyBidiStyle(int style){
  boolean rtl=DesignChoiceConstants.BIDI_DIRECTION_RTL.equals(((LabelFigure)getEditPart().getFigure()).getDirection());
  style|=(rtl ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT);
  String align=((LabelFigure)getEditPart().getFigure()).getTextAlign();
  if (align == null) {
    String direction=((LabelFigure)getEditPart().getFigure()).getDirection();
    boolean isMirrored=getEditPart().getFigure().isMirrored();
    if (direction != null) {
      if (direction.equals(DesignChoiceConstants.BIDI_DIRECTION_LTR) && isMirrored) {
        align=DesignChoiceConstants.TEXT_ALIGN_LEFT;
      }
 else       if (direction.equals(DesignChoiceConstants.BIDI_DIRECTION_RTL) && !isMirrored) {
        align=DesignChoiceConstants.TEXT_ALIGN_RIGHT;
      }
    }
 else {
      if (isMirrored) {
        align=DesignChoiceConstants.TEXT_ALIGN_RIGHT;
      }
 else {
        align=DesignChoiceConstants.TEXT_ALIGN_LEFT;
      }
    }
  }
  if (IStyle.CSS_CENTER_VALUE.equals(align))   style|=SWT.CENTER;
 else   if (IStyle.CSS_RIGHT_VALUE.equals(align))   style|=(rtl ? SWT.LEFT : SWT.RIGHT);
 else   if (IStyle.CSS_LEFT_VALUE.equals(align))   style|=(rtl ? SWT.RIGHT : SWT.LEFT);
 else {
    boolean mirrored=getEditPart().getFigure().isMirrored();
    style|=(mirrored ^ rtl ? SWT.RIGHT : SWT.LEFT);
  }
  return style;
}",0.6902573529411765
71760,"private void updateScriptContext(DesignElementHandle handle,String method){
  List args=DEUtil.getDesignElementMethodArgumentsInfo(handle,method);
  JSSyntaxContext context=scriptEditor.getContext();
  context.clear();
  for (Iterator iter=args.iterator(); iter.hasNext(); ) {
    IArgumentInfo element=(IArgumentInfo)iter.next();
    String name=element.getName();
    String type=element.getType();
    if (!context.setVariable(name,type)) {
      context.setVariable(name,element.getClassType());
    }
  }
  if (handle instanceof ExtendedItemHandle) {
    ExtendedItemHandle exHandle=(ExtendedItemHandle)handle;
    List mtds=exHandle.getMethods(method);
    if (mtds != null && mtds.size() > 0) {
      for (int i=0; i < mtds.size(); i++) {
        IMethodInfo mi=(IMethodInfo)mtds.get(i);
        for (Iterator itr=mi.argumentListIterator(); itr.hasNext(); ) {
          IArgumentInfoList ailist=(IArgumentInfoList)itr.next();
          for (Iterator argItr=ailist.argumentsIterator(); argItr.hasNext(); ) {
            IArgumentInfo aiinfo=(IArgumentInfo)argItr.next();
            String argName=aiinfo.getName();
            IClassInfo ci=aiinfo.getClassType();
            if (argName == null || argName.length() == 0) {
              argName=convertToParameterName(ci.getName());
            }
            context.setVariable(argName,ci);
          }
        }
      }
    }
  }
}","private void updateScriptContext(DesignElementHandle handle,String method){
  List args=DEUtil.getDesignElementMethodArgumentsInfo(handle,method);
  JSSyntaxContext context=scriptEditor.getContext();
  context.clear();
  for (Iterator iter=args.iterator(); iter.hasNext(); ) {
    IArgumentInfo element=(IArgumentInfo)iter.next();
    String name=element.getName();
    String type=element.getType();
    if (!context.setVariable(name,type)) {
      context.setVariable(name,element.getClassType());
    }
  }
  Object[] adapters=ElementAdapterManager.getAdapters(handle,IScriptContextProvider.class);
  updateExtensionScriptContext(adapters,context,method,null);
  if (handle instanceof ExtendedItemHandle) {
    ExtendedItemHandle exHandle=(ExtendedItemHandle)handle;
    List mtds=exHandle.getMethods(method);
    if (mtds != null && mtds.size() > 0) {
      for (int i=0; i < mtds.size(); i++) {
        IMethodInfo mi=(IMethodInfo)mtds.get(i);
        for (Iterator itr=mi.argumentListIterator(); itr.hasNext(); ) {
          IArgumentInfoList ailist=(IArgumentInfoList)itr.next();
          for (Iterator argItr=ailist.argumentsIterator(); argItr.hasNext(); ) {
            IArgumentInfo aiinfo=(IArgumentInfo)argItr.next();
            String argName=aiinfo.getName();
            IClassInfo ci=aiinfo.getClassType();
            if (argName == null || argName.length() == 0) {
              argName=convertToParameterName(ci.getName());
            }
            context.setVariable(argName,ci);
          }
        }
        if (mi.getName() != null) {
          updateExtensionScriptContext(adapters,context,method,mi.getName());
        }
      }
    }
  }
}",0.9091503267973856
71761,"private double[] computeVerticalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData,boolean bNeedInvert) throws ChartException {
  double dX=0, dY=0;
  double dW=0, dH=0;
  double dMaxW=0, dMaxH=0;
  ArrayList columnList=new ArrayList();
  LabelItem laiLegend=new LabelItem(xs,rtc,itm,la,legendData.maxWrappingSize);
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase=(Series)sdBase.getRunTimeSeries().get(0);
  DataSetIterator dsiBase=createDataSetIterator(seBase,cm);
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  dsiBase.reverse(bNeedInvert);
  boolean bHasMoreData=true;
  all:   while (bHasMoreData) {
    int categoryIndex;
    if (dsiBase.hasNext()) {
      Object obj=dsiBase.next();
      obj=getNonEmptyValue(obj,IConstants.ONE_SPACE);
      while (!isValidValue(obj) && dsiBase.hasNext()) {
        obj=dsiBase.next();
      }
      pos++;
      if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
        continue;
      }
      laiLegend.setText(obj,fs);
      categoryIndex=LEGEND_ENTRY;
    }
 else     if (legendData.bMinSliceApplied) {
      laiLegend.setText(legendData.sMinSliceLabel,null);
      categoryIndex=LEGEND_MINSLICE_ENTRY;
      bHasMoreData=false;
      pos++;
    }
 else {
      break;
    }
    boolean bRedo=true;
    for (int iLoopLimit=2; bRedo && iLoopLimit > 0; iLoopLimit--) {
      double[] dsize=getItemSizeCata(laiLegend,legendData,dX);
      dW=dsize[0];
      dH=dsize[1];
      if (!hasPlaceForOneItem(dW,dH,legendData)) {
        break all;
      }
      if (dX + dW > legendData.dAvailableWidth + legendData.dSafeSpacing) {
        columnList.clear();
        break all;
      }
 else {
        if (dY + dH > legendData.dAvailableHeight + legendData.dSafeSpacing) {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dX+=dMaxW;
          dMaxH=Math.max(dMaxH,dY);
          dY=0;
          dMaxW=0;
          bRedo=true;
        }
 else {
          dMaxW=Math.max(dW,dMaxW);
          dY+=dH;
          bRedo=false;
        }
      }
    }
    columnList.add(new LegendItemHints(categoryIndex,new Point(dX,dY - dH),dW - legendData.dHorizonalReservedSpace,laiLegend.getHeight(),laiLegend.getCaption(),bNeedInvert ? dsiBase.size() - 1 - pos : pos));
  }
  legendData.legendItems.addAll(columnList);
  columnList.clear();
  double dWidth=dX + dMaxW;
  double dHeight=Math.max(dMaxH,dY);
  return new double[]{dWidth,dHeight};
}","private double[] computeVerticalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData,boolean bNeedInvert) throws ChartException {
  double dX=0, dY=0;
  double dW=0, dH=0;
  double dMaxW=0, dMaxH=0;
  ArrayList columnList=new ArrayList();
  LabelItem laiLegend=new LabelItem(xs,rtc,itm,la,legendData.maxWrappingSize);
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase;
  if (sdBase.getRunTimeSeries().size() == 0) {
    return new double[]{0,0};
  }
 else {
    seBase=(Series)sdBase.getRunTimeSeries().get(0);
  }
  DataSetIterator dsiBase=createDataSetIterator(seBase,cm);
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  dsiBase.reverse(bNeedInvert);
  boolean bHasMoreData=true;
  all:   while (bHasMoreData) {
    int categoryIndex;
    if (dsiBase.hasNext()) {
      Object obj=dsiBase.next();
      obj=getNonEmptyValue(obj,IConstants.ONE_SPACE);
      while (!isValidValue(obj) && dsiBase.hasNext()) {
        obj=dsiBase.next();
      }
      pos++;
      if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
        continue;
      }
      laiLegend.setText(obj,fs);
      categoryIndex=LEGEND_ENTRY;
    }
 else     if (legendData.bMinSliceApplied) {
      laiLegend.setText(legendData.sMinSliceLabel,null);
      categoryIndex=LEGEND_MINSLICE_ENTRY;
      bHasMoreData=false;
      pos++;
    }
 else {
      break;
    }
    boolean bRedo=true;
    for (int iLoopLimit=2; bRedo && iLoopLimit > 0; iLoopLimit--) {
      double[] dsize=getItemSizeCata(laiLegend,legendData,dX);
      dW=dsize[0];
      dH=dsize[1];
      if (!hasPlaceForOneItem(dW,dH,legendData)) {
        break all;
      }
      if (dX + dW > legendData.dAvailableWidth + legendData.dSafeSpacing) {
        columnList.clear();
        break all;
      }
 else {
        if (dY + dH > legendData.dAvailableHeight + legendData.dSafeSpacing) {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dX+=dMaxW;
          dMaxH=Math.max(dMaxH,dY);
          dY=0;
          dMaxW=0;
          bRedo=true;
        }
 else {
          dMaxW=Math.max(dW,dMaxW);
          dY+=dH;
          bRedo=false;
        }
      }
    }
    columnList.add(new LegendItemHints(categoryIndex,new Point(dX,dY - dH),dW - legendData.dHorizonalReservedSpace,laiLegend.getHeight(),laiLegend.getCaption(),bNeedInvert ? dsiBase.size() - 1 - pos : pos));
  }
  legendData.legendItems.addAll(columnList);
  columnList.clear();
  double dWidth=dX + dMaxW;
  double dHeight=Math.max(dMaxH,dY);
  return new double[]{dWidth,dHeight};
}",0.981549815498155
71762,"/** 
 * Renders the legend block based on the legend rendering rules.
 * @param ipr
 * @param lg
 * @param htRenderers
 * @throws ChartException
 */
public void renderLegend(IPrimitiveRenderer ipr,Legend lg,Map htRenderers) throws ChartException {
  if (!lg.isVisible()) {
    return;
  }
  renderBlock(ipr,lg,StructureSource.createLegend(lg));
  final IDisplayServer xs=getDevice().getDisplayServer();
  final double dScale=getDeviceScale();
  Bounds bo=lg.getBounds().scaledInstance(dScale);
  Size sz=null;
  double dX, dY;
  if (lg.getPosition() != Position.INSIDE_LITERAL) {
    try {
      sz=lg.getPreferredSize(xs,cm,rtc);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
    sz.scale(dScale);
    dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
    dY=0;
    if (lg.isSetAnchor()) {
      int iAnchor=lg.getAnchor().getValue();
      if (isRightToLeft()) {
        if (iAnchor == Anchor.EAST) {
          iAnchor=Anchor.WEST;
        }
 else         if (iAnchor == Anchor.NORTH_EAST) {
          iAnchor=Anchor.NORTH_WEST;
        }
 else         if (iAnchor == Anchor.SOUTH_EAST) {
          iAnchor=Anchor.SOUTH_WEST;
        }
 else         if (iAnchor == Anchor.WEST) {
          iAnchor=Anchor.EAST;
        }
 else         if (iAnchor == Anchor.NORTH_WEST) {
          iAnchor=Anchor.NORTH_EAST;
        }
 else         if (iAnchor == Anchor.SOUTH_WEST) {
          iAnchor=Anchor.SOUTH_EAST;
        }
      }
switch (iAnchor) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
        dY=bo.getTop();
      break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
    dY=bo.getTop() + bo.getHeight() - sz.getHeight();
  break;
default :
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
break;
}
switch (iAnchor) {
case Anchor.WEST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
dX=bo.getLeft();
break;
case Anchor.EAST:
case Anchor.SOUTH_EAST:
case Anchor.NORTH_EAST:
dX=bo.getLeft() + bo.getWidth() - sz.getWidth();
break;
default :
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
break;
}
}
 else {
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
}
}
 else {
dX=bo.getLeft();
dY=bo.getTop();
sz=SizeImpl.create(bo.getWidth(),bo.getHeight());
}
final LegendLayoutHints lilh=rtc.getLegendLayoutHints();
if (lilh == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
Label lgTitle=lg.getTitle();
double lgTitleWidth=0, lgTitleHeight=0;
double yOffset=0, xOffset=0, wOffset=0, hOffset=0;
final boolean bRenderLegendTitle=lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible();
int iTitlePos=Position.ABOVE;
if (bRenderLegendTitle) {
lgTitle=LabelImpl.copyInstance(lgTitle);
final String sPreviousValue=lgTitle.getCaption().getValue();
lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
Size titleSize=lilh.getTitleSize();
lgTitleWidth=titleSize.getWidth();
lgTitleHeight=titleSize.getHeight();
iTitlePos=lg.getTitlePosition().getValue();
if (isRightToLeft()) {
if (iTitlePos == Position.LEFT) {
iTitlePos=Position.RIGHT;
}
 else if (iTitlePos == Position.RIGHT) {
iTitlePos=Position.LEFT;
}
}
switch (iTitlePos) {
case Position.ABOVE:
yOffset=lgTitleHeight;
hOffset=-yOffset;
break;
case Position.BELOW:
hOffset=-lgTitleHeight;
break;
case Position.LEFT:
xOffset=lgTitleWidth;
wOffset=-xOffset;
break;
case Position.RIGHT:
wOffset=-lgTitleWidth;
break;
}
}
final ClientArea ca=lg.getClientArea();
final Insets lgIns=lg.getInsets().scaledInstance(dScale);
LineAttributes lia=ca.getOutline();
bo=BoundsImpl.create(dX,dY,sz.getWidth(),sz.getHeight());
bo=bo.adjustedInstance(lgIns);
dX=bo.getLeft();
dY=bo.getTop();
bo.delta(xOffset,yOffset,wOffset,hOffset);
dX=bo.getLeft();
dY=bo.getTop();
final double dBaseX=dX;
final double dBaseY=dY;
final RectangleRenderEvent rre=(RectangleRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),RectangleRenderEvent.class);
if (ca.getShadowColor() != null) {
rre.setBounds(bo.translateInstance(3,3));
rre.setBackground(ca.getShadowColor());
ipr.fillRectangle(rre);
}
rre.setBounds(bo);
rre.setOutline(lia);
rre.setBackground(ca.getBackground());
ipr.fillRectangle(rre);
ipr.drawRectangle(rre);
lia=LineAttributesImpl.copyInstance(lia);
lia.setVisible(true);
LineAttributes liSep=lg.getSeparator() == null ? lia : lg.getSeparator();
final SeriesDefinition[] seda=cm.getSeriesForLegend();
final Orientation o=lg.getOrientation();
final Direction d=lg.getDirection();
final Label la=LabelImpl.create();
la.setCaption(TextImpl.copyInstance(lg.getText()));
la.getCaption().setValue(""String_Node_Str"");
final ITextMetrics itm=xs.getTextMetrics(la);
try {
final double dItemHeight=itm.getFullHeight();
final double dHorizontalSpacing=4;
Insets insCA=ca.getInsets().scaledInstance(dScale);
Series seBase;
List al;
LegendItemRenderingHints lirh;
Palette pa;
int iPaletteCount;
EList elPaletteEntries;
Fill fPaletteEntry;
final boolean bPaletteByCategory=(cm.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
String strNeedInvert=(String)rtc.getState(""String_Node_Str"");
boolean bNeedInvert=Boolean.valueOf(strNeedInvert).booleanValue();
if (o.getValue() == Orientation.VERTICAL) {
if (bPaletteByCategory) {
SeriesDefinition sdBase=null;
if (cm instanceof ChartWithAxes) {
final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
}
 else if (cm instanceof ChartWithoutAxes) {
if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
}
seBase=(Series)sdBase.getRunTimeSeries().get(0);
pa=sdBase.getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
Map columnCache=searchMaxColumnWidth(liha);
for (int i=0; i < liha.length; i++) {
lih=liha[i];
if ((lih.getType() & IConstants.LEGEND_ENTRY) == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,null,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),0,columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,lih.getCategoryIndex(),dScale);
}
}
}
 else if (d.getValue() == Direction.TOP_BOTTOM) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
Map columnCache=searchMaxColumnWidth(liha);
for (int j=0; j < seda.length; j++) {
int iSedaId=bNeedInvert ? seda.length - 1 - j : j;
al=seda[iSedaId].getRunTimeSeries();
pa=seda[iSedaId].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
int iSeId=bNeedInvert ? al.size() - 1 - i : i;
seBase=(Series)al.get(iSeId);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),lih.getWidth(),Orientation.HORIZONTAL_LITERAL);
}
}
}
}
 else if (d.getValue() == Direction.LEFT_RIGHT) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
Map columnCache=searchMaxColumnWidth(liha);
for (int j=0; j < seda.length; j++) {
int iSedaId=bNeedInvert ? seda.length - 1 - j : j;
al=seda[iSedaId].getRunTimeSeries();
pa=seda[iSedaId].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
int iSeId=bNeedInvert ? al.size() - 1 - i : i;
seBase=(Series)al.get(iSeId);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),bo.getHeight(),Orientation.VERTICAL_LITERAL);
}
}
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{d.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
}
 else if (o.getValue() == Orientation.HORIZONTAL) {
if (bPaletteByCategory) {
SeriesDefinition sdBase=null;
if (cm instanceof ChartWithAxes) {
final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
}
 else if (cm instanceof ChartWithoutAxes) {
if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
}
seBase=(Series)sdBase.getRunTimeSeries().get(0);
pa=sdBase.getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
for (int i=0; i < liha.length; i++) {
lih=liha[i];
if ((lih.getType() & IConstants.LEGEND_ENTRY) == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
renderLegendItem(ipr,lg,la,null,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),0,lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,lih.getCategoryIndex(),dScale);
}
}
}
 else if (d.getValue() == Direction.TOP_BOTTOM) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
for (int j=0; j < seda.length; j++) {
int iSedaId=bNeedInvert ? seda.length - 1 - j : j;
al=seda[iSedaId].getRunTimeSeries();
pa=seda[iSedaId].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
int iSeId=bNeedInvert ? al.size() - 1 - i : i;
seBase=(Series)al.get(iSeId);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),bo.getWidth(),Orientation.HORIZONTAL_LITERAL);
}
}
}
}
 else if (d.getValue() == Direction.LEFT_RIGHT) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
for (int j=0; j < seda.length; j++) {
int iSedaId=bNeedInvert ? seda.length - 1 - j : j;
al=seda[iSedaId].getRunTimeSeries();
pa=seda[iSedaId].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
int iSeId=bNeedInvert ? al.size() - 1 - i : i;
seBase=(Series)al.get(iSeId);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),lih.getHeight(),Orientation.VERTICAL_LITERAL);
}
}
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{d.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{o.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
if (bRenderLegendTitle) {
double lX=bo.getLeft();
double lY=bo.getTop();
switch (iTitlePos) {
case Position.ABOVE:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() - lgTitleHeight;
break;
case Position.BELOW:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() + bo.getHeight();
break;
case Position.LEFT:
lX=bo.getLeft() - lgTitleWidth;
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
case Position.RIGHT:
lX=bo.getLeft() + bo.getWidth();
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
}
final TextRenderEvent tre=(TextRenderEvent)((EventObjectCache)ir).getEventObject(WrappedStructureSource.createLegendTitle(lg,lgTitle),TextRenderEvent.class);
tre.setBlockBounds(BoundsImpl.create(lX,lY,lgTitleWidth,lgTitleHeight));
TextAlignment ta=TextAlignmentImpl.create();
ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
tre.setBlockAlignment(ta);
tre.setLabel(lgTitle);
tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
if (rtc.isRightToLeftText()) {
tre.setRtlCaption();
}
ipr.drawText(tre);
}
}
  finally {
itm.dispose();
}
}","/** 
 * Renders the legend block based on the legend rendering rules.
 * @param ipr
 * @param lg
 * @param htRenderers
 * @throws ChartException
 */
public void renderLegend(IPrimitiveRenderer ipr,Legend lg,Map htRenderers) throws ChartException {
  if (!lg.isVisible()) {
    return;
  }
  renderBlock(ipr,lg,StructureSource.createLegend(lg));
  final IDisplayServer xs=getDevice().getDisplayServer();
  final double dScale=getDeviceScale();
  Bounds bo=lg.getBounds().scaledInstance(dScale);
  Size sz=null;
  double dX, dY;
  if (lg.getPosition() != Position.INSIDE_LITERAL) {
    try {
      sz=lg.getPreferredSize(xs,cm,rtc);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
    sz.scale(dScale);
    dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
    dY=0;
    if (lg.isSetAnchor()) {
      int iAnchor=lg.getAnchor().getValue();
      if (isRightToLeft()) {
        if (iAnchor == Anchor.EAST) {
          iAnchor=Anchor.WEST;
        }
 else         if (iAnchor == Anchor.NORTH_EAST) {
          iAnchor=Anchor.NORTH_WEST;
        }
 else         if (iAnchor == Anchor.SOUTH_EAST) {
          iAnchor=Anchor.SOUTH_WEST;
        }
 else         if (iAnchor == Anchor.WEST) {
          iAnchor=Anchor.EAST;
        }
 else         if (iAnchor == Anchor.NORTH_WEST) {
          iAnchor=Anchor.NORTH_EAST;
        }
 else         if (iAnchor == Anchor.SOUTH_WEST) {
          iAnchor=Anchor.SOUTH_EAST;
        }
      }
switch (iAnchor) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
        dY=bo.getTop();
      break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
    dY=bo.getTop() + bo.getHeight() - sz.getHeight();
  break;
default :
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
break;
}
switch (iAnchor) {
case Anchor.WEST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
dX=bo.getLeft();
break;
case Anchor.EAST:
case Anchor.SOUTH_EAST:
case Anchor.NORTH_EAST:
dX=bo.getLeft() + bo.getWidth() - sz.getWidth();
break;
default :
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
break;
}
}
 else {
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
}
}
 else {
dX=bo.getLeft();
dY=bo.getTop();
sz=SizeImpl.create(bo.getWidth(),bo.getHeight());
}
final LegendLayoutHints lilh=rtc.getLegendLayoutHints();
if (lilh == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
Label lgTitle=lg.getTitle();
double lgTitleWidth=0, lgTitleHeight=0;
double yOffset=0, xOffset=0, wOffset=0, hOffset=0;
final boolean bRenderLegendTitle=lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible();
int iTitlePos=Position.ABOVE;
if (bRenderLegendTitle) {
lgTitle=LabelImpl.copyInstance(lgTitle);
final String sPreviousValue=lgTitle.getCaption().getValue();
lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
Size titleSize=lilh.getTitleSize();
lgTitleWidth=titleSize.getWidth();
lgTitleHeight=titleSize.getHeight();
iTitlePos=lg.getTitlePosition().getValue();
if (isRightToLeft()) {
if (iTitlePos == Position.LEFT) {
iTitlePos=Position.RIGHT;
}
 else if (iTitlePos == Position.RIGHT) {
iTitlePos=Position.LEFT;
}
}
switch (iTitlePos) {
case Position.ABOVE:
yOffset=lgTitleHeight;
hOffset=-yOffset;
break;
case Position.BELOW:
hOffset=-lgTitleHeight;
break;
case Position.LEFT:
xOffset=lgTitleWidth;
wOffset=-xOffset;
break;
case Position.RIGHT:
wOffset=-lgTitleWidth;
break;
}
}
final ClientArea ca=lg.getClientArea();
final Insets lgIns=lg.getInsets().scaledInstance(dScale);
LineAttributes lia=ca.getOutline();
bo=BoundsImpl.create(dX,dY,sz.getWidth(),sz.getHeight());
bo=bo.adjustedInstance(lgIns);
dX=bo.getLeft();
dY=bo.getTop();
bo.delta(xOffset,yOffset,wOffset,hOffset);
dX=bo.getLeft();
dY=bo.getTop();
final double dBaseX=dX;
final double dBaseY=dY;
final RectangleRenderEvent rre=(RectangleRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),RectangleRenderEvent.class);
if (ca.getShadowColor() != null) {
rre.setBounds(bo.translateInstance(3,3));
rre.setBackground(ca.getShadowColor());
ipr.fillRectangle(rre);
}
rre.setBounds(bo);
rre.setOutline(lia);
rre.setBackground(ca.getBackground());
ipr.fillRectangle(rre);
ipr.drawRectangle(rre);
lia=LineAttributesImpl.copyInstance(lia);
lia.setVisible(true);
LineAttributes liSep=lg.getSeparator() == null ? lia : lg.getSeparator();
final SeriesDefinition[] seda=cm.getSeriesForLegend();
final Orientation o=lg.getOrientation();
final Direction d=lg.getDirection();
final Label la=LabelImpl.create();
la.setCaption(TextImpl.copyInstance(lg.getText()));
la.getCaption().setValue(""String_Node_Str"");
final ITextMetrics itm=xs.getTextMetrics(la);
try {
final double dItemHeight=itm.getFullHeight();
final double dHorizontalSpacing=4;
Insets insCA=ca.getInsets().scaledInstance(dScale);
Series seBase;
List al;
LegendItemRenderingHints lirh;
Palette pa;
int iPaletteCount;
EList elPaletteEntries;
Fill fPaletteEntry;
final boolean bPaletteByCategory=(cm.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
String strNeedInvert=(String)rtc.getState(""String_Node_Str"");
boolean bNeedInvert=Boolean.valueOf(strNeedInvert).booleanValue();
if (o.getValue() == Orientation.VERTICAL) {
if (bPaletteByCategory) {
SeriesDefinition sdBase=null;
if (cm instanceof ChartWithAxes) {
final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
}
 else if (cm instanceof ChartWithoutAxes) {
if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
}
if (sdBase.getRunTimeSeries().size() == 0) {
return;
}
 else {
seBase=(Series)sdBase.getRunTimeSeries().get(0);
}
pa=sdBase.getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
Map columnCache=searchMaxColumnWidth(liha);
for (int i=0; i < liha.length; i++) {
lih=liha[i];
if ((lih.getType() & IConstants.LEGEND_ENTRY) == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,null,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),0,columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,lih.getCategoryIndex(),dScale);
}
}
}
 else if (d.getValue() == Direction.TOP_BOTTOM) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
Map columnCache=searchMaxColumnWidth(liha);
for (int j=0; j < seda.length; j++) {
int iSedaId=bNeedInvert ? seda.length - 1 - j : j;
al=seda[iSedaId].getRunTimeSeries();
pa=seda[iSedaId].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
int iSeId=bNeedInvert ? al.size() - 1 - i : i;
seBase=(Series)al.get(iSeId);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),lih.getWidth(),Orientation.HORIZONTAL_LITERAL);
}
}
}
}
 else if (d.getValue() == Direction.LEFT_RIGHT) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
Map columnCache=searchMaxColumnWidth(liha);
for (int j=0; j < seda.length; j++) {
int iSedaId=bNeedInvert ? seda.length - 1 - j : j;
al=seda[iSedaId].getRunTimeSeries();
pa=seda[iSedaId].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
int iSeId=bNeedInvert ? al.size() - 1 - i : i;
seBase=(Series)al.get(iSeId);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),bo.getHeight(),Orientation.VERTICAL_LITERAL);
}
}
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{d.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
}
 else if (o.getValue() == Orientation.HORIZONTAL) {
if (bPaletteByCategory) {
SeriesDefinition sdBase=null;
if (cm instanceof ChartWithAxes) {
final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
}
 else if (cm instanceof ChartWithoutAxes) {
if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
}
seBase=(Series)sdBase.getRunTimeSeries().get(0);
pa=sdBase.getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
for (int i=0; i < liha.length; i++) {
lih=liha[i];
if ((lih.getType() & IConstants.LEGEND_ENTRY) == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
renderLegendItem(ipr,lg,la,null,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),0,lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,lih.getCategoryIndex(),dScale);
}
}
}
 else if (d.getValue() == Direction.TOP_BOTTOM) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
for (int j=0; j < seda.length; j++) {
int iSedaId=bNeedInvert ? seda.length - 1 - j : j;
al=seda[iSedaId].getRunTimeSeries();
pa=seda[iSedaId].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
int iSeId=bNeedInvert ? al.size() - 1 - i : i;
seBase=(Series)al.get(iSeId);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),bo.getWidth(),Orientation.HORIZONTAL_LITERAL);
}
}
}
}
 else if (d.getValue() == Direction.LEFT_RIGHT) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
for (int j=0; j < seda.length; j++) {
int iSedaId=bNeedInvert ? seda.length - 1 - j : j;
al=seda[iSedaId].getRunTimeSeries();
pa=seda[iSedaId].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
int iSeId=bNeedInvert ? al.size() - 1 - i : i;
seBase=(Series)al.get(iSeId);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),lih.getHeight(),Orientation.VERTICAL_LITERAL);
}
}
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{d.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{o.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
if (bRenderLegendTitle) {
double lX=bo.getLeft();
double lY=bo.getTop();
switch (iTitlePos) {
case Position.ABOVE:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() - lgTitleHeight;
break;
case Position.BELOW:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() + bo.getHeight();
break;
case Position.LEFT:
lX=bo.getLeft() - lgTitleWidth;
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
case Position.RIGHT:
lX=bo.getLeft() + bo.getWidth();
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
}
final TextRenderEvent tre=(TextRenderEvent)((EventObjectCache)ir).getEventObject(WrappedStructureSource.createLegendTitle(lg,lgTitle),TextRenderEvent.class);
tre.setBlockBounds(BoundsImpl.create(lX,lY,lgTitleWidth,lgTitleHeight));
TextAlignment ta=TextAlignmentImpl.create();
ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
tre.setBlockAlignment(ta);
tre.setLabel(lgTitle);
tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
if (rtc.isRightToLeftText()) {
tre.setRtlCaption();
}
ipr.drawText(tre);
}
}
  finally {
itm.dispose();
}
}",0.997735156675554
71763,"protected void flushRow(int rowId,int colId,boolean withStart){
  int colCount=layout.getColCount();
  Row row=layout.getRow(rowId);
  IRowContent rowContent=(IRowContent)row.getContent();
  if (withStart) {
    emitter.startRow(rowContent);
  }
  for (int j=colId; j < colCount; j++) {
    Cell cell=row.getCell(j);
    if (cell.getStatus() == Cell.CELL_USED) {
      CellContent content=(CellContent)cell.getContent();
      CellContentWrapper tempCell=new CellContentWrapper(content.cell);
      tempCell.setColumn(cell.getColId());
      tempCell.setRowSpan(cell.getRowSpan());
      tempCell.setColSpan(cell.getColSpan());
      emitter.startCell(tempCell);
      if (content.buffer != null) {
        content.buffer.flush();
      }
      emitter.endCell(tempCell);
    }
    if (cell.getStatus() == Cell.CELL_EMPTY) {
      IReportContent report=rowContent.getReportContent();
      ICellContent cellContent=report.createCellContent();
      cellContent.setParent(rowContent);
      cellContent.setColumn(cell.getColId() + 1);
      cellContent.setRowSpan(cell.getRowSpan());
      cellContent.setColSpan(cell.getColSpan());
      emitter.startCell(cellContent);
      emitter.endCell(cellContent);
    }
  }
  emitter.endRow(rowContent);
}","protected void flushRow(int rowId,int colId,boolean withStart){
  int colCount=layout.getColCount();
  int columnId=layout.getColumnId(colId);
  Row row=layout.getRow(rowId);
  IRowContent rowContent=(IRowContent)row.getContent();
  if (withStart) {
    emitter.startRow(rowContent);
  }
  for (int j=columnId; j < colCount; j++) {
    Cell cell=row.getCell(j);
    if (cell.getStatus() == Cell.CELL_USED) {
      CellContent content=(CellContent)cell.getContent();
      CellContentWrapper tempCell=new CellContentWrapper(content.cell);
      tempCell.setColumn(cell.getColId());
      tempCell.setRowSpan(cell.getRowSpan());
      tempCell.setColSpan(cell.getColSpan());
      emitter.startCell(tempCell);
      if (content.buffer != null) {
        content.buffer.flush();
      }
      emitter.endCell(tempCell);
    }
    if (cell.getStatus() == Cell.CELL_EMPTY) {
      IReportContent report=rowContent.getReportContent();
      ICellContent cellContent=report.createCellContent();
      cellContent.setParent(rowContent);
      cellContent.setColumn(cell.getColId() + 1);
      cellContent.setRowSpan(cell.getRowSpan());
      cellContent.setColSpan(cell.getColSpan());
      emitter.startCell(cellContent);
      emitter.endCell(cellContent);
    }
  }
  emitter.endRow(rowContent);
}",0.982276486805829
71764,"/** 
 * Tests dataType property for column binding
 * @throws Exception
 */
public void testDataTypeInComputedColumn() throws Exception {
  openDesign(""String_Node_Str"");
  OdaDataSetHandle dataSet=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  List columns=(List)dataSet.getProperty(SimpleDataSet.COMPUTED_COLUMNS_PROP);
  ComputedColumn computedColumn=(ComputedColumn)columns.get(0);
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY,computedColumn.getDataType());
  computedColumn=(ComputedColumn)columns.get(1);
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,computedColumn.getDataType());
  TableHandle table=(TableHandle)designHandle.findElement(""String_Node_Str"");
  columns=(List)table.getProperty(IReportItemModel.BOUND_DATA_COLUMNS_PROP);
  computedColumn=(ComputedColumn)columns.get(0);
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY,computedColumn.getDataType());
  computedColumn=(ComputedColumn)columns.get(1);
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,computedColumn.getDataType());
  ScalarParameterHandle param1=(ScalarParameterHandle)designHandle.findParameter(""String_Node_Str"");
  columns=(List)param1.getProperty(IScalarParameterModel.BOUND_DATA_COLUMNS_PROP);
  computedColumn=(ComputedColumn)columns.get(0);
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY,computedColumn.getDataType());
  computedColumn=(ComputedColumn)columns.get(1);
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING,computedColumn.getDataType());
}","/** 
 * Tests dataType property for column binding
 * @throws Exception
 */
public void testDataTypeInComputedColumn() throws Exception {
  openDesign(""String_Node_Str"");
  OdaDataSetHandle dataSet=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  List columns=(List)dataSet.getProperty(SimpleDataSet.COMPUTED_COLUMNS_PROP);
  ComputedColumn computedColumn=(ComputedColumn)columns.get(0);
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY,computedColumn.getDataType());
  computedColumn=(ComputedColumn)columns.get(1);
  assertNull(computedColumn.getDataType());
  TableHandle table=(TableHandle)designHandle.findElement(""String_Node_Str"");
  columns=(List)table.getProperty(IReportItemModel.BOUND_DATA_COLUMNS_PROP);
  computedColumn=(ComputedColumn)columns.get(0);
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY,computedColumn.getDataType());
  computedColumn=(ComputedColumn)columns.get(1);
  assertNull(computedColumn.getDataType());
  ScalarParameterHandle param1=(ScalarParameterHandle)designHandle.findParameter(""String_Node_Str"");
  columns=(List)param1.getProperty(IScalarParameterModel.BOUND_DATA_COLUMNS_PROP);
  computedColumn=(ComputedColumn)columns.get(0);
  assertEquals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY,computedColumn.getDataType());
  computedColumn=(ComputedColumn)columns.get(1);
  assertNull(computedColumn.getDataType());
}",0.547945205479452
71765,"public void refreshFigure(){
  refreshBorder(getTableAdapter().getHandle(),(BaseBorder)getFigure().getBorder());
  ((SectionBorder)(getFigure().getBorder())).setPaddingInsets(getTableAdapter().getPadding(getFigure().getInsets()));
  refreshBackground((DesignElementHandle)getModel());
  refreshMargin();
  for (Iterator itr=getChildren().iterator(); itr.hasNext(); ) {
    TableCellEditPart fg=(TableCellEditPart)itr.next();
    if (!fg.isDelete()) {
      fg.updateBlankString();
    }
  }
  layoutManagerLayout();
}","public void refreshFigure(){
  checkHelper();
  refreshBorder(getTableAdapter().getHandle(),(BaseBorder)getFigure().getBorder());
  ((SectionBorder)(getFigure().getBorder())).setPaddingInsets(getTableAdapter().getPadding(getFigure().getInsets()));
  refreshBackground((DesignElementHandle)getModel());
  refreshMargin();
  for (Iterator itr=getChildren().iterator(); itr.hasNext(); ) {
    TableCellEditPart fg=(TableCellEditPart)itr.next();
    if (!fg.isDelete()) {
      fg.updateBlankString();
    }
  }
  layoutManagerLayout();
}",0.5842055185537584
71766,"private void refreshWorkspace(IReportResourceChangeEvent event){
  if (event != null) {
    Object data=event.getData();
    if (data instanceof IPath) {
      IResource[] res=ResourcesPlugin.getWorkspace().getRoot().findFilesForLocation((IPath)data);
      if (res.length == 0) {
        res=ResourcesPlugin.getWorkspace().getRoot().findContainersForLocation((IPath)data);
        if (res.length == 0) {
          return;
        }
      }
      try {
        final IResource[] targes=res;
        new WorkspaceModifyOperation(){
          protected void execute(          IProgressMonitor monitor) throws CoreException {
            for (            IResource rc : targes) {
              rc.refreshLocal(IResource.DEPTH_INFINITE,null);
            }
          }
        }
.run(null);
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
}","private void refreshWorkspace(IReportResourceChangeEvent event){
  if (event != null) {
    Object data=event.getData();
    if (data instanceof IPath) {
      refreshResource((IPath)data);
    }
 else     if (data instanceof IPath[]) {
      for (      IPath path : (IPath[])data) {
        refreshResource(path);
      }
    }
  }
}",0.2967848309975268
71767,"public synchronized final void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(null,IProgressMonitor.UNKNOWN);
  try {
    if (srcFile != null && targetFile != null && srcFile.exists() && !targetFile.exists()) {
      if (renameFile(srcFile,targetFile)) {
        fireResourceChanged(targetFile.getAbsolutePath());
        fireResourceChanged(srcFile.getAbsolutePath());
      }
    }
  }
  finally {
    monitor.done();
  }
}","public synchronized final void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(null,IProgressMonitor.UNKNOWN);
  try {
    if (srcFile != null && targetFile != null && srcFile.exists() && !targetFile.exists()) {
      if (renameFile(srcFile,targetFile)) {
        fireResourceChanged(targetFile.getAbsolutePath(),srcFile.getAbsolutePath());
      }
    }
  }
  finally {
    monitor.done();
  }
}",0.9659574468085106
71768,"/** 
 * Notifies model for the reource chang.
 * @param fileName the resource's file name.
 */
protected void fireResourceChanged(String fileName){
  IReportResourceSynchronizer synchronizer=ReportPlugin.getDefault().getResourceSynchronizerService();
  if (synchronizer != null) {
    synchronizer.notifyResourceChanged(new ReportResourceChangeEvent(viewerPage,Path.fromOSString(fileName),IReportResourceChangeEvent.NewResource));
  }
}","/** 
 * Notifies model for the reource chang.
 * @param fileNames the resource's file name.
 */
protected void fireResourceChanged(String... fileNames){
  if (fileNames == null || fileNames.length == 0) {
    return;
  }
  refreshAll();
  IReportResourceSynchronizer synchronizer=ReportPlugin.getDefault().getResourceSynchronizerService();
  if (synchronizer != null) {
    if (fileNames.length == 1) {
      synchronizer.notifyResourceChanged(new ReportResourceChangeEvent(viewerPage,Path.fromOSString(fileNames[0]),IReportResourceChangeEvent.NewResource));
    }
 else {
      IPath[] paths=new IPath[fileNames.length];
      for (int i=0; i < fileNames.length; i++) {
        paths[i]=Path.fromOSString(fileNames[i]);
      }
      synchronizer.notifyResourceChanged(new ReportResourceChangeEvent(viewerPage,paths,IReportResourceChangeEvent.NewResource));
    }
  }
}",0.6539050535987749
71769,"/** 
 * Creates an instance of <copy>IRunnableWithProgress</copy> for renaming the specified source file to the specified target file.
 * @param srcFile the specified source file.
 * @param targetFile the specified target file.
 * @return the instance of <code>IRunnableWithProgress</code>.
 */
protected IRunnableWithProgress createRenameFileRunnable(final File srcFile,final File targetFile){
  return new IRunnableWithProgress(){
    public synchronized final void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(null,IProgressMonitor.UNKNOWN);
      try {
        if (srcFile != null && targetFile != null && srcFile.exists() && !targetFile.exists()) {
          if (renameFile(srcFile,targetFile)) {
            fireResourceChanged(targetFile.getAbsolutePath());
            fireResourceChanged(srcFile.getAbsolutePath());
          }
        }
      }
  finally {
        monitor.done();
      }
    }
  }
;
}","/** 
 * Creates an instance of <copy>IRunnableWithProgress</copy> for renaming the specified source file to the specified target file.
 * @param srcFile the specified source file.
 * @param targetFile the specified target file.
 * @return the instance of <code>IRunnableWithProgress</code>.
 */
protected IRunnableWithProgress createRenameFileRunnable(final File srcFile,final File targetFile){
  return new IRunnableWithProgress(){
    public synchronized final void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(null,IProgressMonitor.UNKNOWN);
      try {
        if (srcFile != null && targetFile != null && srcFile.exists() && !targetFile.exists()) {
          if (renameFile(srcFile,targetFile)) {
            fireResourceChanged(targetFile.getAbsolutePath(),srcFile.getAbsolutePath());
          }
        }
      }
  finally {
        monitor.done();
      }
    }
  }
;
}",0.9813471502590674
71770,"protected void initializeScriptContext(Context cx,Scriptable scope){
  scriptContext.getContext().setWrapFactory(new WrapFactory(){
    protected IJavascriptWrapper coreWrapper=new CoreJavaScriptWrapper();
    /** 
 * wrapper an java object to javascript object.
 */
    public Object wrap(    Context cx,    Scriptable scope,    Object obj,    Class staticType){
      Object object=coreWrapper.wrap(cx,scope,obj,staticType);
      if (object != obj) {
        return object;
      }
      return super.wrap(cx,scope,obj,staticType);
    }
  }
);
  new CoreJavaScriptInitializer().initialize(cx,scope);
}","protected void initializeScriptContext(Context cx,Scriptable scope){
  WrapFactory factory=new WrapFactory(){
    protected IJavascriptWrapper coreWrapper=new CoreJavaScriptWrapper();
    /** 
 * wrapper an java object to javascript object.
 */
    public Object wrap(    Context cx,    Scriptable scope,    Object obj,    Class staticType){
      Object object=coreWrapper.wrap(cx,scope,obj,staticType);
      if (object != obj) {
        return object;
      }
      return super.wrap(cx,scope,obj,staticType);
    }
  }
;
  factory.setJavaPrimitiveWrap(false);
  scriptContext.getContext().setWrapFactory(factory);
  new CoreJavaScriptInitializer().initialize(cx,scope);
}",0.896875
71771,"/** 
 * Build the style of foreign content.
 */
public void buildForeignStyle(IForeignContent foreign,StringBuffer styleBuffer,int display){
  IStyle style=foreign.getStyle();
  handleShrink(display,style,foreign.getHeight(),foreign.getWidth(),styleBuffer);
  setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  IStyle textComputedStyle=foreign.getComputedStyle();
  if (null != textComputedStyle) {
    AttributeBuilder.buildTextDecoration(styleBuffer,textComputedStyle);
  }
  style=getElementStyle(foreign);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildBidiDirection(styleBuffer,textComputedStyle);
  String textAlign=style.getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
}","/** 
 * Build the style of foreign content.
 */
public void buildForeignStyle(IForeignContent foreign,StringBuffer styleBuffer,int display){
  IStyle style=foreign.getStyle();
  handleShrink(display,style,foreign.getHeight(),foreign.getWidth(),styleBuffer);
  setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  IStyle textComputedStyle=foreign.getComputedStyle();
  if (null != textComputedStyle) {
    AttributeBuilder.buildTextDecoration(styleBuffer,textComputedStyle);
  }
  String textAlign=style.getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(foreign);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildBidiDirection(styleBuffer,textComputedStyle);
}",0.825812274368231
71772,"/** 
 * Use a new scope in the script context. The following script is evaluated in the new scope. You must call exitScope to return to the parent scope. The new scope is created automatically if the newScope is null.
 * @param newScope,scope used for following evaluation. null means create a scope automatically.
 * @return the scope used for following evaluation.
 */
public Scriptable enterScope(Scriptable newScope){
  if (newScope == null) {
    newScope=context.newObject(scope);
  }
  newScope.setParentScope(scope);
  scope=newScope;
  sharedScope.setPrototype(scope);
  return newScope;
}","/** 
 * Use a new scope in the script context. The following script is evaluated in the new scope. You must call exitScope to return to the parent scope. The new scope is created automatically if the newScope is null.
 * @param newScope,scope used for following evaluation. null means create a scope automatically.
 * @return the scope used for following evaluation.
 */
public Scriptable enterScope(Scriptable newScope){
  if (newScope == null) {
    newScope=context.newObject(scope);
  }
  newScope.setParentScope(scope);
  scope=newScope;
  sharedScope.setParentScope(scope);
  return newScope;
}",0.988313856427379
71773,"/** 
 * exits from the current scripting scope. Must couple with the enterScope.
 */
public void exitScope(){
  Scriptable protoScope=scope.getParentScope();
  if (protoScope != null)   scope=protoScope;
  sharedScope.setPrototype(scope);
}","/** 
 * exits from the current scripting scope. Must couple with the enterScope.
 */
public void exitScope(){
  Scriptable protoScope=scope.getParentScope();
  if (protoScope != null)   scope=protoScope;
  sharedScope.setParentScope(scope);
}",0.970954356846473
71774,"public DataGenerationEngine(ExecutionContext context,IDocArchiveWriter writer) throws Exception {
  super(context,writer);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_GENERATION,null,context.getSharedScope());
  dteSessionContext.setDocumentWriter(writer);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setClassLoader(context.getApplicationClassLoader());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  dos=new DataOutputStream(writer.createRandomAccessStream(ReportDocumentConstants.DATA_META_STREAM));
  DteMetaInfoIOUtil.startMetaInfo(dos);
}","public DataGenerationEngine(ExecutionContext context,IDocArchiveWriter writer) throws Exception {
  super(context,writer);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_GENERATION,null,context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentWriter(writer);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  dos=new DataOutputStream(writer.createRandomAccessStream(ReportDocumentConstants.DATA_META_STREAM));
  DteMetaInfoIOUtil.startMetaInfo(dos);
}",0.918648310387985
71775,"public DataInteractiveEngine(ExecutionContext context,IDocArchiveReader reader,IDocArchiveWriter writer) throws Exception {
  super(context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_UPDATE,null,context.getSharedScope());
  dteSessionContext.setDocumentReader(reader);
  dteSessionContext.setDocumentWriter(writer);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setClassLoader(context.getApplicationClassLoader());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
  if (writer != null && dos == null) {
    dos=new DataOutputStream(writer.createRandomAccessStream(ReportDocumentConstants.DATA_SNAP_META_STREAM));
    DteMetaInfoIOUtil.startMetaInfo(dos);
  }
}","public DataInteractiveEngine(ExecutionContext context,IDocArchiveReader reader,IDocArchiveWriter writer) throws Exception {
  super(context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_UPDATE,null,context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentReader(reader);
  dteSessionContext.setDocumentWriter(writer);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
  if (writer != null && dos == null) {
    dos=new DataOutputStream(writer.createRandomAccessStream(ReportDocumentConstants.DATA_SNAP_META_STREAM));
    DteMetaInfoIOUtil.startMetaInfo(dos);
  }
}",0.9308510638297872
71776,"public DataPresentationEngine(ExecutionContext context,IDocArchiveReader reader) throws Exception {
  super(context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_PRESENTATION,null,context.getSharedScope());
  dteSessionContext.setDocumentReader(reader);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setClassLoader(context.getApplicationClassLoader());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
}","public DataPresentationEngine(ExecutionContext context,IDocArchiveReader reader) throws Exception {
  super(context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_PRESENTATION,null,context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentReader(reader);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
}",0.9044117647058824
71777,"ScriptContext getScriptContext(){
  if (scriptContext == null) {
    initializeScriptContext();
  }
  return this.scriptContext;
}","public ScriptContext getScriptContext(){
  if (scriptContext == null) {
    initializeScriptContext();
  }
  return this.scriptContext;
}",0.9737827715355806
71778,"/** 
 * evaluate conditional expression. A conditional expression can have an operator, one LHS expression, and up to two expressions on RHS, i.e., testExpr operator operand1 operand2 or testExpr between 1 20 Now only support comparison between the same data type
 * @param expr the conditional expression to be evaluated
 * @return a boolean value (as an Object)
 */
public Object evaluateCondExpr(IConditionalExpression expr) throws BirtException {
  IScriptExpression testExpr=expr.getExpression();
  ScriptContext scriptContext=getScriptContext();
  if (testExpr == null)   return Boolean.FALSE;
  try {
    return ScriptEvalUtil.evalExpr(expr,scriptContext.getContext(),scriptContext.getScope(),ScriptExpression.defaultID,0);
  }
 catch (  Throwable e) {
    throw new EngineException(MessageConstants.INVALID_EXPRESSION_ERROR,testExpr.getText(),e);
  }
}","/** 
 * evaluate conditional expression. A conditional expression can have an operator, one LHS expression, and up to two expressions on RHS, i.e., testExpr operator operand1 operand2 or testExpr between 1 20 Now only support comparison between the same data type
 * @param expr the conditional expression to be evaluated
 * @return a boolean value (as an Object)
 */
public Object evaluateCondExpr(IConditionalExpression expr) throws BirtException {
  IScriptExpression testExpr=expr.getExpression();
  ScriptContext scriptContext=getScriptContext();
  if (testExpr == null)   return Boolean.FALSE;
  try {
    return ScriptEvalUtil.evalExpr(expr,scriptContext,scriptContext.getScope(),ScriptExpression.defaultID,0);
  }
 catch (  Throwable e) {
    throw new EngineException(MessageConstants.INVALID_EXPRESSION_ERROR,testExpr.getText(),e);
  }
}",0.9923842999414176
71779,"/** 
 * create a new scope, use the object to create the curren scope.
 * @param object the ""this"" object in the new scope
 */
public void newScope(Object object){
  ScriptContext scriptContext=getScriptContext();
  Object jsObject=scriptContext.javaToJs(object);
  if (jsObject instanceof Scriptable) {
    scriptContext.enterScope((Scriptable)jsObject);
  }
 else {
    scriptContext.enterScope();
  }
}","/** 
 * create a new scope, use the object to create the curren scope.
 * @param object the ""this"" object in the new scope
 */
public void newScope(Object object){
  ScriptContext scriptContext=getScriptContext();
  Object jsObject=scriptContext.javaToJs(object);
  if (jsObject instanceof Scriptable) {
    NativeObject nativeObj=new NativeObject();
    nativeObj.setPrototype((Scriptable)jsObject);
    scriptContext.enterScope(nativeObj);
  }
 else {
    scriptContext.enterScope();
  }
}",0.8571428571428571
71780,"protected JSMethodRunner getRunner(Scriptable scope,String type,String name){
  String scopeName=type + ""String_Node_Str"" + name+ ""String_Node_Str"";
  runner=new JSMethodRunner(scope,scopeName);
  return runner;
}","protected JSMethodRunner getRunner(Scriptable scope,String type,String name){
  String scopeName=type + ""String_Node_Str"" + name+ ""String_Node_Str"";
  runner=new JSMethodRunner(context.getScriptContext(),scope,scopeName);
  return runner;
}",0.9403973509933776
71781,"/** 
 * test if the enterScope & exitScope is correct.
 */
public void testScope(){
  context.registerBean(""String_Node_Str"",new Integer(10));
  context.enterScope();
  context.registerBean(""String_Node_Str"",new Integer(20));
  Object result=context.eval(""String_Node_Str"");
  assertEquals(((Number)result).doubleValue(),30.0,Double.MIN_VALUE);
  context.exitScope();
  boolean hasException=false;
  try {
    result=context.eval(""String_Node_Str"");
  }
 catch (  Exception ex) {
    hasException=true;
  }
  assertTrue(hasException);
  result=context.eval(""String_Node_Str"");
  assertEquals(((Number)result).doubleValue(),10.0,Double.MIN_VALUE);
}","/** 
 * test if the enterScope & exitScope is correct.
 */
public void testScope(){
  context.registerBean(""String_Node_Str"",new Integer(10));
  context.enterScope();
  context.registerBean(""String_Node_Str"",new Integer(20));
  Object result=context.eval(""String_Node_Str"");
  assertEquals(((Number)result).doubleValue(),30.0,Double.MIN_VALUE);
  context.exitScope();
  boolean hasException=false;
  try {
    result=context.eval(""String_Node_Str"");
  }
 catch (  Exception ex) {
    hasException=true;
  }
  assertTrue(!hasException);
  result=context.eval(""String_Node_Str"");
  assertEquals(((Number)result).doubleValue(),10.0,Double.MIN_VALUE);
}",0.9992289899768696
71782,"public void activate(){
  super.activate();
  getFigure().setFocusTraversable(false);
}","public void activate(){
  super.activate();
  getFigure().setFocusTraversable(false);
  if (getModel() instanceof ReportDesignHandle) {
    getViewer().setProperty(IReportGraphicConstants.REPORT_BIDIORIENTATION_PROPERTY,((ReportDesignHandle)getModel()).getBidiOrientation());
  }
}",0.4728260869565217
71783,"private void locateGroupIcon(TableGroupDesign group){
  GroupHandle groupHandle=(GroupHandle)group.getHandle();
  TableHandle tableHandle=(TableHandle)groupHandle.getContainer();
  String keyExpression=groupHandle.getKeyExpr();
  if (keyExpression == null) {
    return;
  }
  keyExpression=keyExpression.trim();
  BandDesign groupHeader=group.getHeader();
  if (group.getHeader() == null) {
    return;
  }
  String columnBindingExpression=getColumnBinding(tableHandle,keyExpression);
  for (int i=0; i < groupHeader.getContentCount(); i++) {
    RowDesign row=(RowDesign)groupHeader.getContent(i);
    for (int j=0; j < row.getCellCount(); j++) {
      CellDesign cell=row.getCell(j);
      for (int k=0; k < cell.getContentCount(); k++) {
        ReportItemDesign item=cell.getContent(k);
        if (hasExpression(tableHandle,item,keyExpression,columnBindingExpression)) {
          cell.setDisplayGroupIcon(true);
          return;
        }
      }
    }
  }
  RowDesign row=(RowDesign)groupHeader.getContent(0);
  if (null != row) {
    CellDesign cell=row.getCell(0);
    if (null != cell) {
      cell.setDisplayGroupIcon(true);
    }
  }
}","private void locateGroupIcon(TableGroupDesign group){
  GroupHandle groupHandle=(GroupHandle)group.getHandle();
  TableHandle tableHandle=(TableHandle)groupHandle.getContainer();
  String keyExpression=groupHandle.getKeyExpr();
  if (keyExpression == null) {
    return;
  }
  keyExpression=keyExpression.trim();
  BandDesign groupHeader=group.getHeader();
  if (group.getHeader() == null) {
    return;
  }
  CellDesign firstStuffedCell=null;
  String columnBindingExpression=getColumnBinding(tableHandle,keyExpression);
  for (int i=0; i < groupHeader.getContentCount(); i++) {
    RowDesign row=(RowDesign)groupHeader.getContent(i);
    for (int j=0; j < row.getCellCount(); j++) {
      CellDesign cell=row.getCell(j);
      for (int k=0; k < cell.getContentCount(); k++) {
        ReportItemDesign item=cell.getContent(k);
        if (hasExpression(tableHandle,item,keyExpression,columnBindingExpression)) {
          cell.setDisplayGroupIcon(true);
          return;
        }
      }
      if (cell.getContentCount() > 0 && null == firstStuffedCell) {
        firstStuffedCell=cell;
      }
    }
  }
  if (null != firstStuffedCell) {
    firstStuffedCell.setDisplayGroupIcon(true);
  }
 else {
    RowDesign row=(RowDesign)groupHeader.getContent(0);
    if (null != row) {
      CellDesign cell=row.getCell(0);
      if (null != cell) {
        cell.setDisplayGroupIcon(true);
      }
    }
  }
}",0.900117508813161
71784,"/** 
 * In javascript, the ""this"" always point to the  current scope.
 */
public void testThisObject(){
  context.registerBean(""String_Node_Str"",""String_Node_Str"");
  Context cx=context.getContext();
  Scriptable scope=context.getScope();
  Scriptable obj=cx.newObject(scope);
  obj.put(""String_Node_Str"",obj,""String_Node_Str"");
  context.enterScope(obj);
  Object result=context.eval(""String_Node_Str"");
  assertEquals(obj,result);
  result=context.eval(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result);
  result=context.eval(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result);
  result=context.eval(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result);
  result=context.eval(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result);
  context.exit();
}","/** 
 * In javascript, the ""this"" always point to the  current scope.
 */
public void testThisObject(){
  context.registerBean(""String_Node_Str"",""String_Node_Str"");
  Context cx=context.getContext();
  Scriptable scope=context.getScope();
  Scriptable obj=cx.newObject(scope);
  obj.put(""String_Node_Str"",obj,""String_Node_Str"");
  context.enterScope(obj);
  Object result=context.eval(""String_Node_Str"");
  assertEquals(obj,result);
  result=context.eval(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result);
  result=context.eval(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result);
  result=context.eval(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result);
  result=context.eval(""String_Node_Str"");
  assertEquals(null,result);
  context.exit();
}",0.9865642994241842
71785,"/** 
 * @param name the name of a property
 * @param value the value of a property
 */
public void registerBean(String name,Object value){
  assert(this.context != null);
  Object sObj=Context.javaToJS(value,scope);
  scope.put(name,scope,sObj);
}","/** 
 * @param name the name of a property
 * @param value the value of a property
 */
public void registerBean(String name,Object value){
  Object sObj=Context.javaToJS(value,global);
  global.put(name,global,sObj);
}",0.8602150537634409
71786,"/** 
 * register globally available script functions
 */
private void setupScriptScope(){
  if (config != null) {
    Context cx=Context.enter();
    try {
      cx.setSecurityController(ScriptUtil.createSecurityController());
    }
 catch (    Throwable throwable) {
    }
    try {
      rootScope=cx.initStandardObjects();
      registerBeans(rootScope,config.getConfigMap());
      registerBeans(rootScope,config.getScriptObjects());
      IStatusHandler handler=config.getStatusHandler();
      if (handler != null) {
        handler.initialize();
        rootScope.put(""String_Node_Str"",rootScope,handler);
        cx.evaluateString(rootScope,""String_Node_Str"",""String_Node_Str"",0,null);
      }
    }
 catch (    Exception ex) {
      rootScope=null;
      logger.log(Level.INFO,""String_Node_Str"",ex);
    }
 finally {
      Context.exit();
    }
  }
}","/** 
 * register globally available script functions
 */
private void setupScriptScope(){
  if (config != null) {
    Context cx=Context.enter();
    try {
      cx.setSecurityController(ScriptUtil.createSecurityController());
    }
 catch (    Throwable throwable) {
    }
    try {
      rootScope=cx.initStandardObjects();
      cx.evaluateString(rootScope,""String_Node_Str"",""String_Node_Str"",0,null);
      cx.evaluateString(rootScope,""String_Node_Str"",""String_Node_Str"",0,null);
      registerBeans(rootScope,config.getConfigMap());
      registerBeans(rootScope,config.getScriptObjects());
      IStatusHandler handler=config.getStatusHandler();
      if (handler != null) {
        handler.initialize();
        rootScope.put(""String_Node_Str"",rootScope,handler);
        cx.evaluateString(rootScope,""String_Node_Str"",""String_Node_Str"",0,null);
      }
    }
 catch (    Exception ex) {
      rootScope=null;
      logger.log(Level.INFO,""String_Node_Str"",ex);
    }
 finally {
      Context.exit();
    }
  }
}",0.9157782515991472
71787,"public Object execute(Object[] arguments) throws BirtException {
  if (arguments == null || arguments.length != 2 && arguments.length != 3)   throw new BirtException(""String_Node_Str"",null,Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
  if (arguments[0] instanceof Object[]) {
    Object[] array=(Object[])arguments[0];
    double[] arg=new double[array.length];
    for (int i=0; i < arg.length; i++) {
      arg[i]=DataTypeUtil.toDouble(array[i]);
    }
    return mirr(arg,DataTypeUtil.toDouble(arguments[1]),arguments.length == 3 ? DataTypeUtil.toDouble(arguments[2]) : 0);
  }
 else   if (arguments[0].getClass().isAssignableFrom(double[].class)) {
    return mirr((double[])arguments[0],DataTypeUtil.toDouble(arguments[1]),arguments.length == 3 ? DataTypeUtil.toDouble(arguments[2]) : 0);
  }
  throw new BirtException(""String_Node_Str"",null,Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
}","public Object execute(Object[] arguments) throws BirtException {
  if (arguments == null || arguments.length != 2 && arguments.length != 3)   throw new BirtException(""String_Node_Str"",null,Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
  if (arguments[0] instanceof Object[]) {
    Object[] array=(Object[])arguments[0];
    double[] arg=new double[array.length];
    for (int i=0; i < arg.length; i++) {
      arg[i]=getDouble(array[i]);
    }
    return mirr(arg,getDouble(arguments[1]),arguments.length == 3 ? getDouble(arguments[2]) : 0);
  }
 else   if (arguments[0].getClass().isAssignableFrom(double[].class)) {
    return mirr((double[])arguments[0],getDouble(arguments[1]),arguments.length == 3 ? getDouble(arguments[2]) : 0);
  }
  throw new BirtException(""String_Node_Str"",null,Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
}",0.7133258678611423
71788,"public final void paintClientArea(Graphics g){
  if (bPainting) {
    return;
  }
  final Rectangle r=getClientArea().getCopy();
  if (r.width <= 0 || r.height <= 0) {
    return;
  }
  bPainting=true;
  if (bDirty) {
    bDirty=false;
    if (cm == null) {
      bPainting=false;
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return;
    }
    final Display d=Display.getCurrent();
    Dimension dSize=r.getSize();
    if (imgChart == null || imgChart.getImageData().width != dSize.width || imgChart.getImageData().height != dSize.height) {
      if (gc != null) {
        gc.dispose();
      }
      if (imgChart != null) {
        imgChart.dispose();
      }
      bDirty=true;
      final ImageData ida=new ImageData(dSize.width,dSize.height,32,PALETTE_DATA);
      ida.transparentPixel=TRANSPARENT_COLOR;
      imgChart=new Image(d,ida);
      gc=new GC(imgChart);
    }
    final Color clrPreviousBG=gc.getBackground();
    gc.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    gc.fillRectangle(0,0,imgChart.getImageData().width,imgChart.getImageData().height);
    gc.setBackground(clrPreviousBG);
    Bounds bo=BoundsImpl.create(0,0,dSize.width,dSize.height);
    bo.scale(72d / idr.getDisplayServer().getDpiResolution());
    idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
    Generator gr=Generator.instance();
    ChartAdapter.beginIgnoreNotifications();
    cm.clearSections(IConstants.RUN_TIME);
    cm.createSampleRuntimeSeries();
    ChartAdapter.endIgnoreNotifications();
    try {
      RunTimeContext rtc=new RunTimeContext();
      rtc.setScriptingEnabled(false);
      rtc.setMessageLookup(new BIRTDesignerMessageLookup(crii.getHandle()));
      rtc.setRightToLeft(crii.getHandle().isDirectionRTL());
      rtc.setRightToLeftText(DesignChoiceConstants.BIDI_DIRECTION_RTL.equals(crii.getHandle().getPrivateStyle().getTextDirection()));
      rtc.setResourceFinder(crii);
      rtc.setExternalizer(crii);
      boolean bPlotChart=ChartXTabUtil.isPlotChart(crii.getHandle());
      if (bPlotChart) {
        rtc.setScale(createSharedScaleFromSampleData());
      }
      gr.render(idr,gr.build(idr.getDisplayServer(),cm,bo,null,rtc,new ChartReportStyleProcessor(crii.getHandle(),true)));
    }
 catch (    ChartException gex) {
      showException(gc,gex);
    }
  }
  if (imgChart != null) {
    g.drawImage(imgChart,r.x,r.y);
  }
  bPainting=false;
}","public final void paintClientArea(Graphics g){
  if (bPainting) {
    return;
  }
  final Rectangle r=getClientArea().getCopy();
  if (r.width <= 0 || r.height <= 0) {
    return;
  }
  bPainting=true;
  if (bDirty) {
    bDirty=false;
    if (cm == null) {
      bPainting=false;
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return;
    }
    final Display d=Display.getCurrent();
    Dimension dSize=r.getSize();
    if (imgChart == null || imgChart.getImageData().width != dSize.width || imgChart.getImageData().height != dSize.height) {
      if (gc != null) {
        gc.dispose();
      }
      if (imgChart != null) {
        imgChart.dispose();
      }
      bDirty=true;
      final ImageData ida=new ImageData(dSize.width,dSize.height,32,PALETTE_DATA);
      ida.transparentPixel=TRANSPARENT_COLOR;
      imgChart=new Image(d,ida);
      gc=new GC(imgChart);
    }
    final Color clrPreviousBG=gc.getBackground();
    gc.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    gc.fillRectangle(0,0,imgChart.getImageData().width,imgChart.getImageData().height);
    gc.setBackground(clrPreviousBG);
    Bounds bo=BoundsImpl.create(0,0,dSize.width,dSize.height);
    bo.scale(72d / idr.getDisplayServer().getDpiResolution());
    idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
    Generator gr=Generator.instance();
    ChartAdapter.beginIgnoreNotifications();
    cm.clearSections(IConstants.RUN_TIME);
    cm.createSampleRuntimeSeries();
    ChartAdapter.endIgnoreNotifications();
    try {
      RunTimeContext rtc=new RunTimeContext();
      rtc.setScriptingEnabled(false);
      rtc.setMessageLookup(new BIRTDesignerMessageLookup(crii.getHandle()));
      rtc.setRightToLeft(crii.getHandle().isDirectionRTL());
      rtc.setRightToLeftText(DesignChoiceConstants.BIDI_DIRECTION_RTL.equals(crii.getHandle().getPrivateStyle().getTextDirection()));
      rtc.setResourceFinder(crii);
      rtc.setExternalizer(crii);
      boolean bPlotChart=ChartXTabUtil.isPlotChart(crii.getHandle());
      if (bPlotChart) {
        rtc.setScale(createSharedScaleFromSampleData());
      }
      gr.render(idr,gr.build(idr.getDisplayServer(),cm,bo,null,rtc,new ChartReportStyleProcessor(crii.getHandle(),true)));
    }
 catch (    ChartException gex) {
      showException(gc,gex);
    }
  }
  if (imgChart != null) {
    g.drawImage(imgChart,r.x,r.y);
  }
  bPainting=false;
}",0.9967132292522596
71789,"public void paintControl(PaintEvent pe){
  Color cBackground=null;
  try {
    Color clrTransparencyBackground=Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
    GC gc=pe.gc;
    if (!this.isEnabled()) {
      gc.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
      Color cFore=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
      gc.setForeground(cFore);
      if (fCurrent == null || fCurrent instanceof ColorDefinition && ((ColorDefinition)fCurrent).getTransparency() == 0) {
        gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
        if (!isAutoEnabled || fCurrent != null) {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
 else {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
      }
 else {
        gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
        gc.setBackground(cFore);
        gc.fillRectangle(2,2,this.getSize().x - 4,this.getSize().y - 4);
      }
    }
 else {
      if (fCurrent == null || fCurrent instanceof ColorDefinition && ((ColorDefinition)fCurrent).getTransparency() == 0) {
        gc.setBackground(clrTransparencyBackground);
        gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
        Color cText=new Color(this.getDisplay(),0,0,0);
        gc.setForeground(cText);
        if (!isAutoEnabled || fCurrent != null) {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
 else {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
        cText.dispose();
      }
 else {
        if (fCurrent instanceof ColorDefinition) {
          cBackground=new Color(Display.getDefault(),((ColorDefinition)fCurrent).getRed(),((ColorDefinition)fCurrent).getGreen(),((ColorDefinition)fCurrent).getBlue());
          gc.setBackground(cBackground);
          gc.fillRectangle(2,2,this.getSize().x - 4,this.getSize().y - 4);
        }
 else         if (fCurrent instanceof Image) {
          gc.fillRectangle(2,2,getSize().x - 4,this.getSize().y - 4);
          gc.drawImage(getSWTImage((Image)fCurrent),2,2);
        }
 else         if (fCurrent instanceof Gradient) {
          fillGradient(gc);
        }
 else         if (fCurrent instanceof MultipleFill) {
          if (((MultipleFill)fCurrent).getFills() == null) {
            return;
          }
          Color clr1=null;
          Color clr2=null;
          if (((MultipleFill)fCurrent).getFills().get(0) != null) {
            ColorDefinition cd1=(ColorDefinition)((MultipleFill)fCurrent).getFills().get(0);
            clr1=new Color(Display.getDefault(),cd1.getRed(),cd1.getGreen(),cd1.getBlue());
            gc.setBackground(clr1);
            gc.fillRectangle(2,2,(this.getSize().x) / 2 - 2,this.getSize().y - 4);
          }
          if (((MultipleFill)fCurrent).getFills().get(1) != null) {
            ColorDefinition cd2=(ColorDefinition)((MultipleFill)fCurrent).getFills().get(1);
            clr2=new Color(Display.getDefault(),cd2.getRed(),cd2.getGreen(),cd2.getBlue());
            gc.setBackground(clr2);
            gc.fillRectangle((this.getSize().x) / 2,2,this.getSize().x / 2 - 2,this.getSize().y - 4);
          }
        }
      }
      if (isFocusControl()) {
        gc.setLineStyle(SWT.LINE_DOT);
        gc.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));
        gc.drawRectangle(1,1,getSize().x - 3,this.getSize().y - 3);
      }
    }
  }
 catch (  Exception ex) {
    logger.log(ex);
  }
 finally {
    if (cBackground != null) {
      cBackground.dispose();
    }
  }
}","public void paintControl(PaintEvent pe){
  Color cBackground=null;
  try {
    Color clrTransparencyBackground=Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
    GC gc=pe.gc;
    if (!this.isEnabled()) {
      gc.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
      Color cFore=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
      gc.setForeground(cFore);
      if (fCurrent == null || fCurrent instanceof ColorDefinition && ((ColorDefinition)fCurrent).getTransparency() == 0) {
        gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
        if (!isAutoEnabled || fCurrent != null) {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
 else {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
      }
 else {
        gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
        gc.setBackground(cFore);
        gc.fillRectangle(2,2,this.getSize().x - 4,this.getSize().y - 4);
      }
    }
 else {
      if (fCurrent == null || fCurrent instanceof ColorDefinition && ((ColorDefinition)fCurrent).getTransparency() == 0) {
        gc.setBackground(clrTransparencyBackground);
        gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
        Color cText=Display.getDefault().getSystemColor(SWT.COLOR_LIST_FOREGROUND);
        gc.setForeground(cText);
        if (!isAutoEnabled || fCurrent != null) {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
 else {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
        cText.dispose();
      }
 else {
        if (fCurrent instanceof ColorDefinition) {
          cBackground=new Color(Display.getDefault(),((ColorDefinition)fCurrent).getRed(),((ColorDefinition)fCurrent).getGreen(),((ColorDefinition)fCurrent).getBlue());
          gc.setBackground(cBackground);
          gc.fillRectangle(2,2,this.getSize().x - 4,this.getSize().y - 4);
        }
 else         if (fCurrent instanceof Image) {
          gc.fillRectangle(2,2,getSize().x - 4,this.getSize().y - 4);
          gc.drawImage(getSWTImage((Image)fCurrent),2,2);
        }
 else         if (fCurrent instanceof Gradient) {
          fillGradient(gc);
        }
 else         if (fCurrent instanceof MultipleFill) {
          if (((MultipleFill)fCurrent).getFills() == null) {
            return;
          }
          Color clr1=null;
          Color clr2=null;
          if (((MultipleFill)fCurrent).getFills().get(0) != null) {
            ColorDefinition cd1=(ColorDefinition)((MultipleFill)fCurrent).getFills().get(0);
            clr1=new Color(Display.getDefault(),cd1.getRed(),cd1.getGreen(),cd1.getBlue());
            gc.setBackground(clr1);
            gc.fillRectangle(2,2,(this.getSize().x) / 2 - 2,this.getSize().y - 4);
          }
          if (((MultipleFill)fCurrent).getFills().get(1) != null) {
            ColorDefinition cd2=(ColorDefinition)((MultipleFill)fCurrent).getFills().get(1);
            clr2=new Color(Display.getDefault(),cd2.getRed(),cd2.getGreen(),cd2.getBlue());
            gc.setBackground(clr2);
            gc.fillRectangle((this.getSize().x) / 2,2,this.getSize().x / 2 - 2,this.getSize().y - 4);
          }
        }
      }
      if (isFocusControl()) {
        gc.setLineStyle(SWT.LINE_DOT);
        gc.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));
        gc.drawRectangle(1,1,getSize().x - 3,this.getSize().y - 3);
      }
    }
  }
 catch (  Exception ex) {
    logger.log(ex);
  }
 finally {
    if (cBackground != null) {
      cBackground.dispose();
    }
  }
}",0.9889258028792912
71790,"protected Composite createTitleArea(Composite parent){
  Composite cmpTitle=super.createTitleArea(parent);
  previewCanvas=new Canvas(cmpTitle,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=2;
    previewCanvas.setLayoutData(gd);
    previewCanvas.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  }
  return cmpTitle;
}","protected Composite createTitleArea(Composite parent){
  Composite cmpTitle=super.createTitleArea(parent);
  previewCanvas=new Canvas(cmpTitle,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=2;
    previewCanvas.setLayoutData(gd);
    previewCanvas.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  }
  return cmpTitle;
}",0.979328165374677
71791,"private void createPreviewArea(Composite parent){
  Composite cmpPreview=ChartUIUtil.createCompositeWrapper(parent);
{
    GridData gridData=new GridData(GridData.FILL_BOTH);
    gridData.widthHint=CENTER_WIDTH_HINT;
    gridData.heightHint=200;
    cmpPreview.setLayoutData(gridData);
  }
  Label label=new Label(cmpPreview,SWT.NONE);
{
    label.setFont(JFaceResources.getBannerFont());
    label.setText(Messages.getString(""String_Node_Str""));
  }
  previewCanvas=new Canvas(cmpPreview,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_BOTH);
    previewCanvas.setLayoutData(gd);
    previewCanvas.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  }
}","private void createPreviewArea(Composite parent){
  Composite cmpPreview=ChartUIUtil.createCompositeWrapper(parent);
{
    GridData gridData=new GridData(GridData.FILL_BOTH);
    gridData.widthHint=CENTER_WIDTH_HINT;
    gridData.heightHint=200;
    cmpPreview.setLayoutData(gridData);
  }
  Label label=new Label(cmpPreview,SWT.NONE);
{
    label.setFont(JFaceResources.getBannerFont());
    label.setText(Messages.getString(""String_Node_Str""));
  }
  previewCanvas=new Canvas(cmpPreview,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_BOTH);
    previewCanvas.setLayoutData(gd);
    previewCanvas.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  }
}",0.988388969521045
71792,"private void createPreviewArea(){
  Composite cmpPreview=new Composite(foSashForm,SWT.NONE);
  cmpPreview.setLayout(new GridLayout());
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.horizontalSpan=2;
  gridData.heightHint=270;
  cmpPreview.setLayoutData(gridData);
  Label label=new Label(cmpPreview,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  previewCanvas=new Canvas(cmpPreview,SWT.BORDER);
  previewCanvas.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewCanvas.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  previewPainter=createPreviewPainter();
}","private void createPreviewArea(){
  Composite cmpPreview=new Composite(foSashForm,SWT.NONE);
  cmpPreview.setLayout(new GridLayout());
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.horizontalSpan=2;
  gridData.heightHint=270;
  cmpPreview.setLayoutData(gridData);
  Label label=new Label(cmpPreview,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  previewCanvas=new Canvas(cmpPreview,SWT.BORDER);
  previewCanvas.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewCanvas.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  previewPainter=createPreviewPainter();
}",0.9884559884559884
71793,"public void placeComponents(Composite parent){
  linkAxis=new Link(parent,SWT.NONE);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    linkAxis.setLayoutData(gd);
    linkAxis.setText(""String_Node_Str"" + axisName + ""String_Node_Str"");
    linkAxis.addSelectionListener(this);
  }
  btnVisible=new Button(parent,SWT.CHECK);
{
    GridData gd=new GridData();
    gd.horizontalAlignment=SWT.CENTER;
    btnVisible.setLayoutData(gd);
    btnVisible.addSelectionListener(this);
    btnVisible.setSelection(axis.getLineAttributes().isVisible());
  }
  cmbTypes=new Combo(parent,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalAlignment=SWT.CENTER;
    cmbTypes.setLayoutData(gd);
    NameSet ns=ChartUIUtil.getCompatibleAxisType(((SeriesDefinition)axis.getSeriesDefinitions().get(0)).getDesignTimeSeries());
    cmbTypes.setItems(ns.getDisplayNames());
    cmbTypes.select(ns.getSafeNameIndex(axis.getType().getName()));
    cmbTypes.addSelectionListener(this);
  }
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  cmbColor=new FillChooserComposite(parent,SWT.DROP_DOWN | SWT.READ_ONLY,getContext(),clrCurrent,false,false);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmbColor.setLayoutData(gd);
    cmbColor.addListener(this);
  }
}","public void placeComponents(Composite parent){
  linkAxis=new Link(parent,SWT.NONE);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    linkAxis.setLayoutData(gd);
    linkAxis.setText(""String_Node_Str"" + axisName + ""String_Node_Str"");
    linkAxis.addSelectionListener(this);
  }
  btnVisible=new Button(parent,SWT.CHECK);
{
    GridData gd=new GridData();
    gd.horizontalAlignment=SWT.CENTER;
    btnVisible.setLayoutData(gd);
    btnVisible.addSelectionListener(this);
    btnVisible.setSelection(axis.getLineAttributes().isVisible());
  }
  cmbTypes=new Combo(parent,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalAlignment=SWT.CENTER;
    cmbTypes.setLayoutData(gd);
    NameSet ns=ChartUIUtil.getCompatibleAxisType(((SeriesDefinition)axis.getSeriesDefinitions().get(0)).getDesignTimeSeries());
    cmbTypes.setItems(ns.getDisplayNames());
    cmbTypes.select(ns.getSafeNameIndex(axis.getType().getName()));
    cmbTypes.addSelectionListener(this);
  }
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  cmbColor=new FillChooserComposite(parent,SWT.DROP_DOWN | SWT.READ_ONLY,getContext(),clrCurrent,false,false,true,true);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmbColor.setLayoutData(gd);
    cmbColor.addListener(this);
  }
}",0.9965253648366922
71794,"/** 
 * Clear preview canvas area with white color.
 */
protected void clearPreviewCanvas(){
  if (isDisposedPreviewCanvas()) {
    return;
  }
  Rectangle re=preview.getClientArea();
  Rectangle adjustedRe=new Rectangle(0,0,re.width,re.height);
  Image oldBuffer=null;
  if (buffer == null) {
    if (adjustedRe.width <= 0 || adjustedRe.height <= 0) {
      return;
    }
    buffer=new Image(Display.getDefault(),adjustedRe);
  }
 else {
    Rectangle ore=buffer.getBounds();
    oldBuffer=buffer;
    if (!adjustedRe.equals(ore)) {
      if (adjustedRe.width <= 0 || adjustedRe.height <= 0) {
        return;
      }
      buffer=new Image(Display.getDefault(),adjustedRe);
    }
  }
  GC gc=new GC(buffer);
  gc.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  gc.fillRectangle(buffer.getBounds());
  gc.dispose();
  if (oldBuffer != null && oldBuffer != buffer) {
    oldBuffer.dispose();
  }
  if (isDisposedPreviewCanvas()) {
    return;
  }
  preview.redraw();
}","/** 
 * Clear preview canvas area with white color.
 */
protected void clearPreviewCanvas(){
  if (isDisposedPreviewCanvas()) {
    return;
  }
  Rectangle re=preview.getClientArea();
  Rectangle adjustedRe=new Rectangle(0,0,re.width,re.height);
  Image oldBuffer=null;
  if (buffer == null) {
    if (adjustedRe.width <= 0 || adjustedRe.height <= 0) {
      return;
    }
    buffer=new Image(Display.getDefault(),adjustedRe);
  }
 else {
    Rectangle ore=buffer.getBounds();
    oldBuffer=buffer;
    if (!adjustedRe.equals(ore)) {
      if (adjustedRe.width <= 0 || adjustedRe.height <= 0) {
        return;
      }
      buffer=new Image(Display.getDefault(),adjustedRe);
    }
  }
  GC gc=new GC(buffer);
  gc.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  gc.fillRectangle(buffer.getBounds());
  gc.dispose();
  if (oldBuffer != null && oldBuffer != buffer) {
    oldBuffer.dispose();
  }
  if (isDisposedPreviewCanvas()) {
    return;
  }
  preview.redraw();
}",0.9879638916750252
71795,"private void updateBuffer(){
  if (bIsPainting) {
    return;
  }
  Throwable paintError=null;
  if (chart == null) {
    return;
  }
  if (isDisposedPreviewCanvas()) {
    return;
  }
  Rectangle re=preview.getClientArea();
  final Rectangle adjustedRe=new Rectangle(0,0,re.width,re.height);
  if (adjustedRe.width - 2 * X_OFFSET <= 0 || adjustedRe.height - 2 * Y_OFFSET <= 0) {
    if (buffer != null && !buffer.isDisposed()) {
      buffer.dispose();
      buffer=null;
    }
    return;
  }
  bIsPainting=true;
  Image oldBuffer=null;
  if (buffer == null) {
    buffer=new Image(Display.getDefault(),adjustedRe);
  }
 else {
    Rectangle ore=buffer.getBounds();
    oldBuffer=buffer;
    if (!adjustedRe.equals(ore)) {
      buffer=new Image(Display.getDefault(),adjustedRe);
    }
  }
  GC gc=new GC(buffer);
  gc.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  gc.fillRectangle(buffer.getBounds());
  final Bounds bo=BoundsImpl.create(X_OFFSET,Y_OFFSET,adjustedRe.width - 2 * X_OFFSET,adjustedRe.height - 2 * Y_OFFSET);
  IDeviceRenderer deviceRenderer=null;
  try {
    deviceRenderer=ChartEngine.instance().getRenderer(""String_Node_Str"");
    deviceRenderer.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
    bo.scale(72d / deviceRenderer.getDisplayServer().getDpiResolution());
    final Generator gr=Generator.instance();
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new ChartBuilderMessageLookup(this.wizardContext.getUIServiceProvider()));
    rtc.setRightToLeft(wizardContext.isRtL());
    rtc.setRightToLeftText(wizardContext.isTextRtL());
    rtc.setResourceFinder(wizardContext.getResourceFinder());
    rtc.setExternalizer(wizardContext.getExternalizer());
    gcs=gr.build(deviceRenderer.getDisplayServer(),chart,bo,null,rtc,isProcessorEnabled() ? wizardContext.getProcessor() : null);
    gr.render(deviceRenderer,gcs);
  }
 catch (  Exception ex) {
    paintError=ex;
  }
 finally {
    gc.dispose();
    if (deviceRenderer != null) {
      deviceRenderer.dispose();
    }
  }
  boolean bException=false;
  if (paintError != null) {
    buffer=oldBuffer;
    bException=true;
    if (WizardBase.getErrors() == null) {
      errorMessage=paintError.getLocalizedMessage();
      WizardBase.showException(errorMessage);
    }
  }
  if (!bException && ((WizardBase.getErrors() == null) || (WizardBase.getErrors().equals(errorMessage)))) {
    WizardBase.removeException();
  }
  if (oldBuffer != null && oldBuffer != buffer) {
    oldBuffer.dispose();
  }
  bIsPainting=false;
}","private void updateBuffer(){
  if (bIsPainting) {
    return;
  }
  Throwable paintError=null;
  if (chart == null) {
    return;
  }
  if (isDisposedPreviewCanvas()) {
    return;
  }
  Rectangle re=preview.getClientArea();
  final Rectangle adjustedRe=new Rectangle(0,0,re.width,re.height);
  if (adjustedRe.width - 2 * X_OFFSET <= 0 || adjustedRe.height - 2 * Y_OFFSET <= 0) {
    if (buffer != null && !buffer.isDisposed()) {
      buffer.dispose();
      buffer=null;
    }
    return;
  }
  bIsPainting=true;
  Image oldBuffer=null;
  if (buffer == null) {
    buffer=new Image(Display.getDefault(),adjustedRe);
  }
 else {
    Rectangle ore=buffer.getBounds();
    oldBuffer=buffer;
    if (!adjustedRe.equals(ore)) {
      buffer=new Image(Display.getDefault(),adjustedRe);
    }
  }
  GC gc=new GC(buffer);
  gc.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  gc.fillRectangle(buffer.getBounds());
  final Bounds bo=BoundsImpl.create(X_OFFSET,Y_OFFSET,adjustedRe.width - 2 * X_OFFSET,adjustedRe.height - 2 * Y_OFFSET);
  IDeviceRenderer deviceRenderer=null;
  try {
    deviceRenderer=ChartEngine.instance().getRenderer(""String_Node_Str"");
    deviceRenderer.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
    bo.scale(72d / deviceRenderer.getDisplayServer().getDpiResolution());
    final Generator gr=Generator.instance();
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new ChartBuilderMessageLookup(this.wizardContext.getUIServiceProvider()));
    rtc.setRightToLeft(wizardContext.isRtL());
    rtc.setRightToLeftText(wizardContext.isTextRtL());
    rtc.setResourceFinder(wizardContext.getResourceFinder());
    rtc.setExternalizer(wizardContext.getExternalizer());
    gcs=gr.build(deviceRenderer.getDisplayServer(),chart,bo,null,rtc,isProcessorEnabled() ? wizardContext.getProcessor() : null);
    gr.render(deviceRenderer,gcs);
  }
 catch (  Exception ex) {
    paintError=ex;
  }
 finally {
    gc.dispose();
    if (deviceRenderer != null) {
      deviceRenderer.dispose();
    }
  }
  boolean bException=false;
  if (paintError != null) {
    buffer=oldBuffer;
    bException=true;
    if (WizardBase.getErrors() == null) {
      errorMessage=paintError.getLocalizedMessage();
      WizardBase.showException(errorMessage);
    }
  }
  if (!bException && ((WizardBase.getErrors() == null) || (WizardBase.getErrors().equals(errorMessage)))) {
    WizardBase.removeException();
  }
  if (oldBuffer != null && oldBuffer != buffer) {
    oldBuffer.dispose();
  }
  bIsPainting=false;
}",0.9953632148377124
71796,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffDay(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffDay((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffDay((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}","public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffDay(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffDay((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffDay((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}",0.8975124378109453
71797,"/** 
 * @param interval
 * @param dataType
 * @return
 * @throws DataException
 */
private static void validateInterval(int interval,int dataType) throws DataException {
  if (interval != IGroupDefinition.NO_INTERVAL && interval != IGroupDefinition.NUMERIC_INTERVAL && interval != IGroupDefinition.STRING_PREFIX_INTERVAL && interval != IGroupDefinition.SECOND_INTERVAL && interval != IGroupDefinition.MINUTE_INTERVAL && interval != IGroupDefinition.HOUR_INTERVAL && interval != IGroupDefinition.DAY_INTERVAL && interval != IGroupDefinition.WEEK_INTERVAL && interval != IGroupDefinition.MONTH_INTERVAL && interval != IGroupDefinition.QUARTER_INTERVAL && interval != IGroupDefinition.YEAR_INTERVAL) {
    throw new DataException(ResourceConstants.BAD_GROUP_INTERVAL_INVALID);
  }
  if (dataType == DataType.ANY_TYPE || dataType == DataType.UNKNOWN_TYPE) {
    return;
  }
switch (interval) {
case IGroupDefinition.NO_INTERVAL:
    return;
case IGroupDefinition.NUMERIC_INTERVAL:
  if (isNumber(dataType))   return;
 else   throw new DataException(ResourceConstants.BAD_GROUP_INTERVAL_TYPE,new Object[]{""String_Node_Str"",DataType.getName(dataType)});
case IGroupDefinition.STRING_PREFIX_INTERVAL:
if (isString(dataType)) return;
 else throw new DataException(ResourceConstants.BAD_GROUP_INTERVAL_TYPE,new Object[]{""String_Node_Str"",DataType.getName(dataType)});
default :
if (isDate(dataType)) return;
 else throw new DataException(ResourceConstants.BAD_GROUP_INTERVAL_TYPE,new Object[]{""String_Node_Str"",DataType.getName(dataType)});
}
}","/** 
 * @param interval
 * @param dataType
 * @return
 * @throws DataException
 */
private static void validateInterval(int interval,int dataType) throws DataException {
  if (interval != IGroupDefinition.NO_INTERVAL && interval != IGroupDefinition.NUMERIC_INTERVAL && interval != IGroupDefinition.STRING_PREFIX_INTERVAL && interval != IGroupDefinition.SECOND_INTERVAL && interval != IGroupDefinition.MINUTE_INTERVAL && interval != IGroupDefinition.HOUR_INTERVAL && interval != IGroupDefinition.DAY_INTERVAL && interval != IGroupDefinition.WEEK_INTERVAL && interval != IGroupDefinition.MONTH_INTERVAL && interval != IGroupDefinition.QUARTER_INTERVAL && interval != IGroupDefinition.YEAR_INTERVAL) {
    throw new DataException(ResourceConstants.BAD_GROUP_INTERVAL_INVALID);
  }
  if (dataType == DataType.ANY_TYPE || dataType == DataType.UNKNOWN_TYPE) {
    return;
  }
switch (interval) {
case IGroupDefinition.NO_INTERVAL:
    return;
case IGroupDefinition.NUMERIC_INTERVAL:
  if (isNumber(dataType))   return;
 else   throw new DataException(ResourceConstants.BAD_GROUP_INTERVAL_TYPE,new Object[]{""String_Node_Str"",DataType.getName(dataType)});
case IGroupDefinition.STRING_PREFIX_INTERVAL:
if (isString(dataType)) return;
 else throw new DataException(ResourceConstants.BAD_GROUP_INTERVAL_TYPE,new Object[]{""String_Node_Str"",DataType.getName(dataType)});
default :
if (canBeConvertToDate(dataType)) return;
 else throw new DataException(ResourceConstants.BAD_GROUP_INTERVAL_TYPE,new Object[]{""String_Node_Str"",DataType.getName(dataType)});
}
}",0.9948085658663206
71798,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffHour(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffHour((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffHour((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}","public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffHour(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffHour((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffHour((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}",0.8981206726013847
71799,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffMinute(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffMinute((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffMinute((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}","public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffMinute(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffMinute((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffMinute((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}",0.8993157380254154
71800,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffMonth(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffMonth((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffMonth((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}","public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffMonth(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffMonth((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffMonth((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}",0.8987217305801377
71801,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffQuarter(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffQuarter((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffQuarter((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}","public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffQuarter(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffQuarter((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffQuarter((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}",0.8999028182701652
71802,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffSecond(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffSecond((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffSecond((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}","public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffSecond(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffSecond((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffSecond((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}",0.8993157380254154
71803,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffWeek(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffWeek((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffWeek((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}","public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffWeek(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffWeek((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffWeek((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}",0.8981206726013847
71804,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffYear(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffYear((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffYear((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}","public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffYear(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffYear((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffYear((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}",0.8981206726013847
71805,"protected void createContentsVirtically(){
  content.setLayout(UIUtil.createGridLayoutWithoutMargin());
  Composite topContainer=new Composite(content,SWT.NONE);
  topContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  topContainer.setLayout(new GridLayout(2,false));
  FormWidgetFactory.getInstance().createLabel(topContainer,isFormStyle()).setText(LABEL_FORMAT_DATE_TIME_PAGE);
  if (!isFormStyle())   typeChoicer=new CCombo(topContainer,SWT.READ_ONLY);
 else   typeChoicer=FormWidgetFactory.getInstance().createCCombo(topContainer,true);
  typeChoicer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  typeChoicer.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      reLayoutSubPages();
      updatePreview();
      notifyFormatChange();
    }
  }
);
  typeChoicer.setItems(provider.getFormatTypes());
  typeChoicer.select(0);
  infoComp=new Composite(content,SWT.NONE);
  infoComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  infoComp.setLayout(new StackLayout());
  createCategoryPages(infoComp);
  setInput(null,null);
  setPreviewText(defaultDateTime);
}","protected void createContentsVirtically(){
  content.setLayout(UIUtil.createGridLayoutWithoutMargin());
  Composite topContainer=new Composite(content,SWT.NONE);
  topContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  topContainer.setLayout(new GridLayout(2,false));
  FormWidgetFactory.getInstance().createLabel(topContainer,isFormStyle()).setText(LABEL_FORMAT_DATE_TIME_PAGE);
  if (!isFormStyle())   typeChoicer=new CCombo(topContainer,SWT.READ_ONLY | SWT.BORDER);
 else   typeChoicer=FormWidgetFactory.getInstance().createCCombo(topContainer,true);
  typeChoicer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  typeChoicer.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      reLayoutSubPages();
      updatePreview();
      notifyFormatChange();
    }
  }
);
  typeChoicer.setItems(provider.getFormatTypes());
  typeChoicer.select(0);
  infoComp=new Composite(content,SWT.NONE);
  infoComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  infoComp.setLayout(new StackLayout());
  createCategoryPages(infoComp);
  setInput(null,null);
  setPreviewText(defaultDateTime);
}",0.9943649761595144
71806,"protected void createContentsVirtically(){
  content.setLayout(UIUtil.createGridLayoutWithoutMargin());
  Composite topContainer=new Composite(content,SWT.NONE);
  topContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  topContainer.setLayout(new GridLayout(2,false));
  FormWidgetFactory.getInstance().createLabel(topContainer,isFormStyle()).setText(LABEL_FORMAT_NUMBER_PAGE);
  if (!isFormStyle())   typeChoicer=new CCombo(topContainer,SWT.READ_ONLY);
 else   typeChoicer=FormWidgetFactory.getInstance().createCCombo(topContainer,true);
  typeChoicer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  typeChoicer.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      reLayoutSubPages();
      updatePreview();
      notifyFormatChange();
    }
  }
);
  typeChoicer.setItems(provider.getFormatTypes());
  infoComp=new Composite(content,SWT.NONE);
  infoComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  infoComp.setLayout(new StackLayout());
  createCategoryPages(infoComp);
  createCategoryPatterns();
  setInput(null,null);
  setPreviewText(DEFAULT_PREVIEW_TEXT);
}","protected void createContentsVirtically(){
  content.setLayout(UIUtil.createGridLayoutWithoutMargin());
  Composite topContainer=new Composite(content,SWT.NONE);
  topContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  topContainer.setLayout(new GridLayout(2,false));
  FormWidgetFactory.getInstance().createLabel(topContainer,isFormStyle()).setText(LABEL_FORMAT_NUMBER_PAGE);
  if (!isFormStyle())   typeChoicer=new CCombo(topContainer,SWT.READ_ONLY | SWT.BORDER);
 else   typeChoicer=FormWidgetFactory.getInstance().createCCombo(topContainer,true);
  typeChoicer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  typeChoicer.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      reLayoutSubPages();
      updatePreview();
      notifyFormatChange();
    }
  }
);
  typeChoicer.setItems(provider.getFormatTypes());
  infoComp=new Composite(content,SWT.NONE);
  infoComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  infoComp.setLayout(new StackLayout());
  createCategoryPages(infoComp);
  createCategoryPatterns();
  setInput(null,null);
  setPreviewText(DEFAULT_PREVIEW_TEXT);
}",0.9943892965041
71807,"protected void createContentsVirtically(){
  content.setLayout(UIUtil.createGridLayoutWithoutMargin());
  Composite topContainer=new Composite(content,SWT.NONE);
  topContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  topContainer.setLayout(new GridLayout(2,false));
  FormWidgetFactory.getInstance().createLabel(topContainer,isFormStyle()).setText(LABEL_FORMAT_STRING_PAGE);
  if (!isFormStyle())   typeChoicer=new CCombo(topContainer,SWT.READ_ONLY);
 else   typeChoicer=FormWidgetFactory.getInstance().createCCombo(topContainer,true);
  typeChoicer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  typeChoicer.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      reLayoutSubPages();
      updatePreview();
      notifyFormatChange();
    }
  }
);
  typeChoicer.setItems(provider.getFormatTypes());
  infoComp=new Composite(content,SWT.NONE);
  infoComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  infoComp.setLayout(new StackLayout());
  createCategoryPages(infoComp);
  setInput(null,null);
  setPreviewText(DEFAULT_PREVIEW_TEXT);
}","protected void createContentsVirtically(){
  content.setLayout(UIUtil.createGridLayoutWithoutMargin());
  Composite topContainer=new Composite(content,SWT.NONE);
  topContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  topContainer.setLayout(new GridLayout(2,false));
  FormWidgetFactory.getInstance().createLabel(topContainer,isFormStyle()).setText(LABEL_FORMAT_STRING_PAGE);
  if (!isFormStyle())   typeChoicer=new CCombo(topContainer,SWT.READ_ONLY | SWT.BORDER);
 else   typeChoicer=FormWidgetFactory.getInstance().createCCombo(topContainer,true);
  typeChoicer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  typeChoicer.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      reLayoutSubPages();
      updatePreview();
      notifyFormatChange();
    }
  }
);
  typeChoicer.setItems(provider.getFormatTypes());
  infoComp=new Composite(content,SWT.NONE);
  infoComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  infoComp.setLayout(new StackLayout());
  createCategoryPages(infoComp);
  setInput(null,null);
  setPreviewText(DEFAULT_PREVIEW_TEXT);
}",0.994250331711632
71808,"private static String findParameterExp(String script,int fromIndex){
  int iStart=script.indexOf(ExpressionUtil.PARAMETER_INDICATOR + '[',fromIndex);
  if (iStart < fromIndex) {
    return null;
  }
  int iEnd=script.indexOf(']',iStart);
  if (iEnd < iStart + ExpressionUtil.PARAMETER_INDICATOR.length()) {
    return null;
  }
  return script.substring(iStart,iEnd + 1);
}","private static String findParameterExp(String script,int fromIndex){
  int iStart=script.indexOf(ExpressionUtil.PARAMETER_INDICATOR + '[',fromIndex);
  if (iStart < fromIndex) {
    return null;
  }
  int iEnd=script.indexOf(']',iStart);
  if (iEnd < iStart + ExpressionUtil.PARAMETER_INDICATOR.length()) {
    return null;
  }
  return script.substring(iStart,iEnd + 1 + ExpressionUtil.EXPRESSION_VALUE_SUFFIX.length());
}",0.9371859296482412
71809,"/** 
 * Calculates the column width for the table. the return value should be each column width in point.
 * @param columns The column width specified in report design.
 * @param tableWidth The suggested table width. If isTableWidthDefined is true, this value is user defined table width; otherwise, it is the max possible width for the table.
 * @param isTableWidthDefined The flag to indicate whether the table width has been defined explicitly.
 * @return each column width in point.
 */
protected int[] formalize(DimensionType[] columns,int tableWidth,boolean isTableWidthDefined){
  ArrayList percentageList=new ArrayList();
  ArrayList unsetList=new ArrayList();
  ArrayList preFixedList=new ArrayList();
  int[] resolvedColumnWidth=new int[columns.length];
  double total=0.0f;
  int fixedLength=0;
  for (int i=0; i < columns.length; i++) {
    if (columns[i] == null) {
      unsetList.add(new Integer(i));
    }
 else     if (EngineIRConstants.UNITS_PERCENTAGE.equals(columns[i].getUnits())) {
      percentageList.add(new Integer(i));
      total+=columns[i].getMeasure();
    }
 else     if (EngineIRConstants.UNITS_EM.equals(columns[i].getUnits()) || EngineIRConstants.UNITS_EX.equals(columns[i].getUnits())) {
      int len=TableLayout.this.getDimensionValue(columns[i],PropertyUtil.getDimensionValue(table.getComputedStyle().getProperty(StyleConstants.STYLE_FONT_SIZE)));
      resolvedColumnWidth[i]=len;
      fixedLength+=len;
    }
 else {
      int len=TableLayout.this.getDimensionValue(columns[i],tableWidth);
      resolvedColumnWidth[i]=len;
      preFixedList.add(new Integer(i));
      fixedLength+=len;
    }
  }
  if (!isTableWidthDefined && unsetList.isEmpty() && percentageList.isEmpty()) {
    return resolvedColumnWidth;
  }
  if (fixedLength >= tableWidth) {
    for (int i=0; i < unsetList.size(); i++) {
      Integer index=(Integer)unsetList.get(i);
      resolvedColumnWidth[index.intValue()]=0;
    }
    for (int i=0; i < percentageList.size(); i++) {
      Integer index=(Integer)percentageList.get(i);
      resolvedColumnWidth[index.intValue()]=0;
    }
    return resolvedColumnWidth;
  }
  if (unsetList.isEmpty()) {
    if (percentageList.isEmpty()) {
      int left=tableWidth - fixedLength;
      int delta=left / preFixedList.size();
      for (int i=0; i < preFixedList.size(); i++) {
        Integer index=(Integer)preFixedList.get(i);
        resolvedColumnWidth[index.intValue()]+=delta;
      }
    }
 else {
      float leftPercentage=(((float)(tableWidth - fixedLength)) / tableWidth) * 100.0f;
      double ratio=leftPercentage / total;
      for (int i=0; i < percentageList.size(); i++) {
        Integer index=(Integer)percentageList.get(i);
        columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
        resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
      }
    }
  }
 else {
    if (percentageList.isEmpty()) {
      int left=tableWidth - fixedLength;
      int eachWidth=left / unsetList.size();
      for (int i=0; i < unsetList.size(); i++) {
        Integer index=(Integer)unsetList.get(i);
        resolvedColumnWidth[index.intValue()]=eachWidth;
      }
    }
 else {
      float leftPercentage=(((float)(tableWidth - fixedLength)) / tableWidth) * 100.0f;
      if (leftPercentage <= total) {
        double ratio=leftPercentage / total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          resolvedColumnWidth[index.intValue()]=0;
        }
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
        }
      }
 else {
        int usedLength=fixedLength;
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          int width=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
          usedLength+=width;
          resolvedColumnWidth[index.intValue()]=width;
        }
        int left=tableWidth - usedLength;
        int eachWidth=left / unsetList.size();
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          resolvedColumnWidth[index.intValue()]=eachWidth;
        }
      }
    }
  }
  return resolvedColumnWidth;
}","/** 
 * Calculates the column width for the table. the return value should be each column width in point.
 * @param columns The column width specified in report design.
 * @param tableWidth The suggested table width. If isTableWidthDefined is true, this value is user defined table width; otherwise, it is the max possible width for the table.
 * @param isTableWidthDefined The flag to indicate whether the table width has been defined explicitly.
 * @return each column width in point.
 */
protected int[] formalize(DimensionType[] columns,int tableWidth,boolean isTableWidthDefined){
  ArrayList percentageList=new ArrayList();
  ArrayList unsetList=new ArrayList();
  ArrayList preFixedList=new ArrayList();
  int[] resolvedColumnWidth=new int[columns.length];
  double total=0.0f;
  int fixedLength=0;
  for (int i=0; i < columns.length; i++) {
    if (columns[i] == null) {
      unsetList.add(new Integer(i));
    }
 else     if (EngineIRConstants.UNITS_PERCENTAGE.equals(columns[i].getUnits())) {
      percentageList.add(new Integer(i));
      total+=columns[i].getMeasure();
    }
 else     if (EngineIRConstants.UNITS_EM.equals(columns[i].getUnits()) || EngineIRConstants.UNITS_EX.equals(columns[i].getUnits())) {
      int len=TableLayout.this.getDimensionValue(columns[i],PropertyUtil.getDimensionValue(table.getComputedStyle().getProperty(StyleConstants.STYLE_FONT_SIZE)));
      resolvedColumnWidth[i]=len;
      fixedLength+=len;
    }
 else {
      int len=TableLayout.this.getDimensionValue(columns[i],tableWidth);
      resolvedColumnWidth[i]=len;
      preFixedList.add(new Integer(i));
      fixedLength+=len;
    }
  }
  if (!isTableWidthDefined && unsetList.isEmpty() && percentageList.isEmpty()) {
    return resolvedColumnWidth;
  }
  if (fixedLength >= tableWidth) {
    for (int i=0; i < unsetList.size(); i++) {
      Integer index=(Integer)unsetList.get(i);
      resolvedColumnWidth[index.intValue()]=0;
    }
    for (int i=0; i < percentageList.size(); i++) {
      Integer index=(Integer)percentageList.get(i);
      resolvedColumnWidth[index.intValue()]=0;
    }
    return resolvedColumnWidth;
  }
  if (unsetList.isEmpty()) {
    if (percentageList.isEmpty()) {
      int left=tableWidth - fixedLength;
      if (!preFixedList.isEmpty()) {
        int delta=left / preFixedList.size();
        for (int i=0; i < preFixedList.size(); i++) {
          Integer index=(Integer)preFixedList.get(i);
          resolvedColumnWidth[index.intValue()]+=delta;
        }
      }
    }
 else {
      float leftPercentage=(((float)(tableWidth - fixedLength)) / tableWidth) * 100.0f;
      double ratio=leftPercentage / total;
      for (int i=0; i < percentageList.size(); i++) {
        Integer index=(Integer)percentageList.get(i);
        columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
        resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
      }
    }
  }
 else {
    if (percentageList.isEmpty()) {
      int left=tableWidth - fixedLength;
      int eachWidth=left / unsetList.size();
      for (int i=0; i < unsetList.size(); i++) {
        Integer index=(Integer)unsetList.get(i);
        resolvedColumnWidth[index.intValue()]=eachWidth;
      }
    }
 else {
      float leftPercentage=(((float)(tableWidth - fixedLength)) / tableWidth) * 100.0f;
      if (leftPercentage <= total) {
        double ratio=leftPercentage / total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          resolvedColumnWidth[index.intValue()]=0;
        }
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
        }
      }
 else {
        int usedLength=fixedLength;
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          int width=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
          usedLength+=width;
          resolvedColumnWidth[index.intValue()]=width;
        }
        int left=tableWidth - usedLength;
        int eachWidth=left / unsetList.size();
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          resolvedColumnWidth[index.intValue()]=eachWidth;
        }
      }
    }
  }
  return resolvedColumnWidth;
}",0.994135835376906
71810,"public JSObjectMetaData getReturn(){
  return new ExtensionClassJSObject(method.getClassReturnType());
}","public JSObjectMetaData getReturn(){
  IClassInfo rtInfo=method.getClassReturnType();
  if (rtInfo != null) {
    return new ExtensionClassJSObject(method.getClassReturnType());
  }
  return null;
}",0.6887417218543046
71811,"protected Control createDialogArea(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.COLUMNBINDING_DIALOG_ID);
  Composite parentComposite=(Composite)super.createDialogArea(parent);
  if (this.canSelect) {
    composite=new Composite(parentComposite,SWT.NONE);
    composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    composite.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
    warnLabel=new CLabel(composite,SWT.NONE);
    warnLabel.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_WARN_TSK));
    warnLabel.setText(WARN_COLUMN_BINDINGS);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    warnLabel.setLayoutData(gd);
    datasetRadio=new Button(composite,SWT.RADIO);
    datasetRadio.setText(LABEL_COLUMN_BINDINGS);
    datasetRadio.setLayoutData(new GridData(GridData.BEGINNING));
    datasetRadio.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        refreshBinding();
        if (datasetRadio.getSelection() && inputElement.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF && (DEUtil.getBindingHolder(inputElement,true) == null || DEUtil.getBindingHolder(inputElement,true).getDataBindingType() != ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF))         saveBinding();
      }
    }
);
    datasetCombo=new Combo(composite,SWT.READ_ONLY | SWT.BORDER);
    datasetCombo.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    String[] dataSets=ChoiceSetFactory.getDataSets();
    String[] newList=new String[dataSets.length + 1];
    newList[0]=NullDatasetChoice;
    System.arraycopy(dataSets,0,newList,1,dataSets.length);
    datasetCombo.setItems(newList);
    String dataSetName=getDataSetName();
    datasetCombo.deselectAll();
    if (dataSetName != null) {
      datasetCombo.setText(dataSetName);
    }
 else {
      datasetCombo.select(0);
    }
    gd=new GridData();
    gd.widthHint=250;
    datasetCombo.setLayoutData(gd);
    datasetCombo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        saveBinding();
      }
    }
);
    reportItemRadio=new Button(composite,SWT.RADIO);
    reportItemRadio.setText(Messages.getString(""String_Node_Str""));
    reportItemRadio.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        refreshBinding();
        if (reportItemRadio.getSelection() && inputElement.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_DATA && (DEUtil.getBindingHolder(inputElement,true) == null || DEUtil.getBindingHolder(inputElement,true).getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF))         saveBinding();
      }
    }
);
    reportItemCombo=new Combo(composite,SWT.READ_ONLY | SWT.BORDER);
    reportItemCombo.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    gd=new GridData();
    gd.widthHint=250;
    reportItemCombo.setLayoutData(gd);
    reportItemCombo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        saveBinding();
      }
    }
);
  }
  Composite contentComposite=new Composite(parentComposite,SWT.NONE);
  contentComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  contentComposite.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  final Table table=new Table(contentComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER| (canSelect ? SWT.CHECK : 0));
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=200;
  gd.verticalSpan=5;
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.keyCode == SWT.DEL && (DEUtil.getBindingHolder(inputElement).getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_DATA || (DEUtil.getBindingHolder(inputElement).getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_NONE && (DEUtil.getBindingHolder(inputElement,true) == null || DEUtil.getBindingHolder(inputElement,true).getDataBindingType() != ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF)))) {
        int itemCount=table.getItemCount();
        if (selectIndex == itemCount) {
          return;
        }
        if (selectIndex == itemCount - 1) {
          selectIndex--;
        }
        try {
          handleDelEvent();
        }
 catch (        Exception e1) {
          WidgetUtil.processError(getShell(),e1);
        }
        refreshBindingTable();
      }
    }
  }
);
  table.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      selectIndex=table.getSelectionIndex();
      updateButtons();
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    /** 
 * @param e
 */
    public void mouseDoubleClick(    MouseEvent e){
      editSelectedBinding(table.getSelectionIndex());
    }
  }
);
  String[] columns=null;
  int[] columnWidth=null;
  groups=new String[groupList.size() + 1];
  groups[0]=ALL;
  for (int i=0; i < groupList.size(); i++) {
    groups[i + 1]=((GroupHandle)groupList.get(i)).getName();
  }
  if (canAggregate) {
    columns=new String[]{null,COLUMN_NAME,COLUMN_DISPLAYNAME,COLUMN_DATATYPE,COLUMN_EXPRESSION,COLUMN_FUNCTION,COLUMN_FILTER,COLUMN_AGGREGATEON};
    columnWidth=new int[]{canSelect ? 25 : 20,100,100,70,100,100,100,100};
  }
 else {
    columns=new String[]{null,COLUMN_NAME,COLUMN_DISPLAYNAME,COLUMN_DATATYPE,COLUMN_EXPRESSION};
    columnWidth=new int[]{canSelect ? 25 : 20,150,150,70,150};
  }
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  if (canSelect) {
    bindingTable=new CheckboxTableViewer(table);
    ((CheckboxTableViewer)bindingTable).addCheckStateListener(new ICheckStateListener(){
      public void checkStateChanged(      CheckStateChangedEvent event){
        if (event.getElement() instanceof ComputedColumnHandle) {
          ComputedColumnHandle handle=(ComputedColumnHandle)event.getElement();
          if (handle.getName().equals(selectedColumnName)) {
            selectedColumnName=null;
          }
 else {
            selectedColumnName=handle.getName();
          }
          updateSelection();
          updateButtons();
        }
 else {
          ((CheckboxTableViewer)bindingTable).setChecked(dummyChoice,false);
        }
      }
    }
);
  }
 else {
    bindingTable=new TableViewer(table);
  }
  bindingTable.setColumnProperties(columns);
  bindingTable.setContentProvider(contentProvider);
  bindingTable.setLabelProvider(labelProvider);
  bindingTable.setInput(inputElement);
  bindingTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateButtons();
    }
  }
);
  btnAdd=new Button(contentComposite,SWT.PUSH);
  btnAdd.setText(MSG_ADD);
  GridData data=new GridData();
  data.widthHint=Math.max(60,btnAdd.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnAdd.setLayoutData(data);
  btnAdd.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleAddEvent();
      refreshBindingTable();
      if (table.getItemCount() > 0)       selectIndex=(table.getItemCount() - 1);
      updateButtons();
    }
  }
);
  if (canAggregate) {
    btnAddAggr=new Button(contentComposite,SWT.PUSH);
    btnAddAggr.setText(MSG_ADDAGGREGATEON);
    data=new GridData();
    data.widthHint=Math.max(60,btnAddAggr.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
    btnAddAggr.setLayoutData(data);
    btnAddAggr.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        DataColumnBindingDialog dialog=new DataColumnBindingDialog(true);
        dialog.setInput(inputElement);
        dialog.setExpressionProvider(expressionProvider);
        dialog.setAggreate(true);
        if (dialog.open() == Dialog.OK) {
          if (bindingTable != null) {
            refreshBindingTable();
            bindingTable.getTable().setSelection(bindingTable.getTable().getItemCount() - 1);
          }
        }
        refreshBindingTable();
        if (table.getItemCount() > 0)         setSelectionInTable(table.getItemCount() - 1);
        updateButtons();
      }
    }
);
  }
  btnEdit=new Button(contentComposite,SWT.PUSH);
  btnEdit.setText(MSG_EDIT);
  data=new GridData();
  data.widthHint=Math.max(60,btnEdit.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnEdit.setLayoutData(data);
  btnEdit.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleEditEvent();
      refreshBindingTable();
    }
  }
);
  btnDel=new Button(contentComposite,SWT.PUSH);
  btnDel.setText(MSG_DELETE);
  data=new GridData();
  data.widthHint=Math.max(60,btnDel.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnDel.setLayoutData(data);
  btnDel.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (bindingTable.isCellEditorActive()) {
        bindingTable.cancelEditing();
      }
      int pos=bindingTable.getTable().getSelectionIndex();
      if (pos == -1) {
        bindingTable.getTable().setFocus();
        return;
      }
      selectIndex=pos;
      int itemCount=bindingTable.getTable().getItemCount();
      if (selectIndex == itemCount - 1) {
        selectIndex--;
      }
      try {
        handleDelEvent();
      }
 catch (      Exception e1) {
        WidgetUtil.processError(getShell(),e1);
      }
      refreshBindingTable();
    }
  }
);
  int buttonsNumber=addButtons(contentComposite,table);
  if (buttonsNumber > 0) {
    if (table.getLayoutData() instanceof GridData) {
      ((GridData)table.getLayoutData()).verticalSpan+=buttonsNumber;
    }
  }
  if (!isDataSetVisible) {
    if (composite != null)     ((GridData)composite.getLayoutData()).exclude=true;
  }
  return parentComposite;
}","protected Control createDialogArea(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.COLUMNBINDING_DIALOG_ID);
  Composite parentComposite=(Composite)super.createDialogArea(parent);
  if (this.canSelect) {
    composite=new Composite(parentComposite,SWT.NONE);
    composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    composite.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
    warnLabel=new CLabel(composite,SWT.NONE);
    warnLabel.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_WARN_TSK));
    warnLabel.setText(WARN_COLUMN_BINDINGS);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    warnLabel.setLayoutData(gd);
    datasetRadio=new Button(composite,SWT.RADIO);
    datasetRadio.setText(LABEL_COLUMN_BINDINGS);
    datasetRadio.setLayoutData(new GridData(GridData.BEGINNING));
    datasetRadio.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        refreshBinding();
        if (datasetRadio.getSelection() && inputElement.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF && (DEUtil.getBindingHolder(inputElement,true) == null || DEUtil.getBindingHolder(inputElement,true).getDataBindingType() != ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF))         saveBinding();
      }
    }
);
    datasetCombo=new Combo(composite,SWT.READ_ONLY | SWT.BORDER);
    datasetCombo.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    String[] dataSets=ChoiceSetFactory.getDataSets();
    String[] newList=new String[dataSets.length + 1];
    newList[0]=NullDatasetChoice;
    System.arraycopy(dataSets,0,newList,1,dataSets.length);
    datasetCombo.setItems(newList);
    String dataSetName=getDataSetName();
    datasetCombo.deselectAll();
    if (dataSetName != null) {
      datasetCombo.setText(dataSetName);
    }
 else {
      datasetCombo.select(0);
    }
    gd=new GridData();
    gd.widthHint=250;
    datasetCombo.setLayoutData(gd);
    datasetCombo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        saveBinding();
      }
    }
);
    reportItemRadio=new Button(composite,SWT.RADIO);
    reportItemRadio.setText(Messages.getString(""String_Node_Str""));
    reportItemRadio.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        refreshBinding();
        if (reportItemRadio.getSelection() && inputElement.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_DATA && (DEUtil.getBindingHolder(inputElement,true) == null || DEUtil.getBindingHolder(inputElement,true).getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF))         saveBinding();
      }
    }
);
    reportItemCombo=new Combo(composite,SWT.READ_ONLY | SWT.BORDER);
    reportItemCombo.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    gd=new GridData();
    gd.widthHint=250;
    reportItemCombo.setLayoutData(gd);
    reportItemCombo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        saveBinding();
      }
    }
);
  }
  Composite contentComposite=new Composite(parentComposite,SWT.NONE);
  contentComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  contentComposite.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  final Table table=new Table(contentComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER| (canSelect ? SWT.CHECK : 0));
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=200;
  gd.verticalSpan=5;
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.keyCode == SWT.DEL && (DEUtil.getBindingHolder(inputElement).getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_DATA || (DEUtil.getBindingHolder(inputElement).getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_NONE && (DEUtil.getBindingHolder(inputElement,true) == null || DEUtil.getBindingHolder(inputElement,true).getDataBindingType() != ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF)))) {
        int itemCount=table.getItemCount();
        if (selectIndex == itemCount) {
          return;
        }
        if (selectIndex == itemCount - 1) {
          selectIndex--;
        }
        try {
          handleDelEvent();
        }
 catch (        Exception e1) {
          WidgetUtil.processError(getShell(),e1);
        }
        refreshBindingTable();
      }
    }
  }
);
  table.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      selectIndex=table.getSelectionIndex();
      updateButtons();
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    /** 
 * @param e
 */
    public void mouseDoubleClick(    MouseEvent e){
      editSelectedBinding(table.getSelectionIndex());
      refreshBindingTable();
    }
  }
);
  String[] columns=null;
  int[] columnWidth=null;
  groups=new String[groupList.size() + 1];
  groups[0]=ALL;
  for (int i=0; i < groupList.size(); i++) {
    groups[i + 1]=((GroupHandle)groupList.get(i)).getName();
  }
  if (canAggregate) {
    columns=new String[]{null,COLUMN_NAME,COLUMN_DISPLAYNAME,COLUMN_DATATYPE,COLUMN_EXPRESSION,COLUMN_FUNCTION,COLUMN_FILTER,COLUMN_AGGREGATEON};
    columnWidth=new int[]{canSelect ? 25 : 20,100,100,70,100,100,100,100};
  }
 else {
    columns=new String[]{null,COLUMN_NAME,COLUMN_DISPLAYNAME,COLUMN_DATATYPE,COLUMN_EXPRESSION};
    columnWidth=new int[]{canSelect ? 25 : 20,150,150,70,150};
  }
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  if (canSelect) {
    bindingTable=new CheckboxTableViewer(table);
    ((CheckboxTableViewer)bindingTable).addCheckStateListener(new ICheckStateListener(){
      public void checkStateChanged(      CheckStateChangedEvent event){
        if (event.getElement() instanceof ComputedColumnHandle) {
          ComputedColumnHandle handle=(ComputedColumnHandle)event.getElement();
          if (handle.getName().equals(selectedColumnName)) {
            selectedColumnName=null;
          }
 else {
            selectedColumnName=handle.getName();
          }
          updateSelection();
          updateButtons();
        }
 else {
          ((CheckboxTableViewer)bindingTable).setChecked(dummyChoice,false);
        }
      }
    }
);
  }
 else {
    bindingTable=new TableViewer(table);
  }
  bindingTable.setColumnProperties(columns);
  bindingTable.setContentProvider(contentProvider);
  bindingTable.setLabelProvider(labelProvider);
  bindingTable.setInput(inputElement);
  bindingTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateButtons();
    }
  }
);
  btnAdd=new Button(contentComposite,SWT.PUSH);
  btnAdd.setText(MSG_ADD);
  GridData data=new GridData();
  data.widthHint=Math.max(60,btnAdd.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnAdd.setLayoutData(data);
  btnAdd.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleAddEvent();
      refreshBindingTable();
      if (table.getItemCount() > 0)       selectIndex=(table.getItemCount() - 1);
      updateButtons();
    }
  }
);
  if (canAggregate) {
    btnAddAggr=new Button(contentComposite,SWT.PUSH);
    btnAddAggr.setText(MSG_ADDAGGREGATEON);
    data=new GridData();
    data.widthHint=Math.max(60,btnAddAggr.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
    btnAddAggr.setLayoutData(data);
    btnAddAggr.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        DataColumnBindingDialog dialog=new DataColumnBindingDialog(true);
        dialog.setInput(inputElement);
        dialog.setExpressionProvider(expressionProvider);
        dialog.setAggreate(true);
        if (dialog.open() == Dialog.OK) {
          if (bindingTable != null) {
            refreshBindingTable();
            bindingTable.getTable().setSelection(bindingTable.getTable().getItemCount() - 1);
          }
        }
        refreshBindingTable();
        if (table.getItemCount() > 0)         setSelectionInTable(table.getItemCount() - 1);
        updateButtons();
      }
    }
);
  }
  btnEdit=new Button(contentComposite,SWT.PUSH);
  btnEdit.setText(MSG_EDIT);
  data=new GridData();
  data.widthHint=Math.max(60,btnEdit.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnEdit.setLayoutData(data);
  btnEdit.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleEditEvent();
      refreshBindingTable();
    }
  }
);
  btnDel=new Button(contentComposite,SWT.PUSH);
  btnDel.setText(MSG_DELETE);
  data=new GridData();
  data.widthHint=Math.max(60,btnDel.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnDel.setLayoutData(data);
  btnDel.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (bindingTable.isCellEditorActive()) {
        bindingTable.cancelEditing();
      }
      int pos=bindingTable.getTable().getSelectionIndex();
      if (pos == -1) {
        bindingTable.getTable().setFocus();
        return;
      }
      selectIndex=pos;
      int itemCount=bindingTable.getTable().getItemCount();
      if (selectIndex == itemCount - 1) {
        selectIndex--;
      }
      try {
        handleDelEvent();
      }
 catch (      Exception e1) {
        WidgetUtil.processError(getShell(),e1);
      }
      refreshBindingTable();
    }
  }
);
  int buttonsNumber=addButtons(contentComposite,table);
  if (buttonsNumber > 0) {
    if (table.getLayoutData() instanceof GridData) {
      ((GridData)table.getLayoutData()).verticalSpan+=buttonsNumber;
    }
  }
  if (!isDataSetVisible) {
    if (composite != null)     ((GridData)composite.getLayoutData()).exclude=true;
  }
  return parentComposite;
}",0.9985870889159562
71812,"/** 
 * @param e
 */
public void mouseDoubleClick(MouseEvent e){
  editSelectedBinding(table.getSelectionIndex());
}","/** 
 * @param e
 */
public void mouseDoubleClick(MouseEvent e){
  editSelectedBinding(table.getSelectionIndex());
  refreshBindingTable();
}",0.9027237354085604
71813,"public void partActivated(IWorkbenchPart part){
  fActivePart=part;
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    confirmSava();
    final ModuleHandle oldHandle=getModel();
    if (needReset) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        getProvider().getReportModuleHandle(getEditorInput(),true);
      }
 else {
        needReset=false;
      }
      needReload=false;
    }
    if (needReload) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        UIUtil.reloadModuleHandleLibraries(getModel());
      }
 else {
        needReload=false;
      }
    }
    if (getEditorInput().exists()) {
      handleActivation();
      SessionHandleAdapter.getInstance().setReportDesignHandle(getModel());
    }
    if (getActivePageInstance() instanceof IReportEditorPage) {
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          IReportEditorPage curPage=(IReportEditorPage)getActivePageInstance();
          if (needReload || needReset) {
            curPage.markPageStale(IPageStaleType.MODEL_RELOAD);
          }
          if (getActivePageInstance() != null) {
            curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
          }
          if (needReload || needReset) {
            updateRelatedViews();
            curPage.markPageStale(IPageStaleType.NONE);
          }
          if (needReset) {
            SessionHandleAdapter.getInstance().resetReportDesign(oldHandle,getModel());
            oldHandle.close();
          }
          needReload=false;
          needReset=false;
        }
      }
);
    }
  }
}","public void partActivated(IWorkbenchPart part){
  fActivePart=part;
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    confirmSava();
    final ModuleHandle oldHandle=getModel();
    if (needReset) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        getProvider().getReportModuleHandle(getEditorInput(),true);
      }
 else {
        needReset=false;
      }
      needReload=false;
    }
    if (needReload) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        UIUtil.reloadModuleHandleLibraries(getModel());
      }
 else {
        needReload=false;
      }
    }
    if (getEditorInput().exists()) {
      handleActivation();
      SessionHandleAdapter.getInstance().setReportDesignHandle(getModel());
    }
    if (getActivePageInstance() instanceof IReportEditorPage) {
      boolean isDispatch=false;
      if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        isDispatch=true;
      }
 else       if (needReload || needReset) {
        isDispatch=true;
      }
      final boolean tempDispatch=isDispatch;
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          if (!tempDispatch) {
            return;
          }
          IReportEditorPage curPage=(IReportEditorPage)getActivePageInstance();
          if (needReload || needReset) {
            curPage.markPageStale(IPageStaleType.MODEL_RELOAD);
          }
          if (getActivePageInstance() != null) {
            curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
          }
          if (needReload || needReset) {
            updateRelatedViews();
            curPage.markPageStale(IPageStaleType.NONE);
          }
          if (needReset) {
            SessionHandleAdapter.getInstance().resetReportDesign(oldHandle,getModel());
            oldHandle.close();
          }
          needReload=false;
          needReset=false;
        }
      }
);
    }
  }
}",0.9475524475524476
71814,"public void open(Properties connProperties) throws OdaException {
  if (connProperties == null) {
    IllegalArgumentException e=new IllegalArgumentException(""String_Node_Str"");
    logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",e.getMessage(),e);
    throw e;
  }
  if (logger.isLoggable(Level.FINE)) {
    String logMsg=""String_Node_Str"";
    for (Enumeration enumeration=connProperties.propertyNames(); enumeration.hasMoreElements(); ) {
      String propName=(String)enumeration.nextElement();
      String lcPropName=propName.toLowerCase();
      String propVal;
      if (lcPropName.indexOf(""String_Node_Str"") >= 0 || lcPropName.indexOf(""String_Node_Str"") >= 0)       propVal=""String_Node_Str"";
 else {
        propVal=connProperties.getProperty(propName);
        if (lcPropName.equals(""String_Node_Str"")) {
          propVal=LogUtil.encryptURL(propVal);
        }
      }
      logMsg+=propName + ""String_Node_Str"" + propVal+ ""String_Node_Str"";
    }
    logger.logp(Level.FINE,Connection.class.getName(),""String_Node_Str"",logMsg);
  }
  close();
  String dataSource=connProperties.getProperty(Constants.ODADataSource);
  if (dataSource != null) {
    UnsupportedOperationException e=new UnsupportedOperationException(""String_Node_Str"");
    logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",e.getMessage(),e);
    throw e;
  }
 else {
    String url=connProperties.getProperty(Constants.ODAURL);
    String jndiName=connProperties.getProperty(Constants.ODAJndiName);
    if ((url == null || url.length() == 0) && (jndiName == null || jndiName.length() == 0)) {
      throw new JDBCException(ResourceConstants.DRIVER_MISSING_PROPERTIES,ResourceConstants.ERROR_MISSING_PROPERTIES);
    }
    connectByUrl(url,connProperties);
  }
}","public void open(Properties connProperties) throws OdaException {
  if (this.appContext != null) {
    Object value=this.appContext.get(IConnectionFactory.PASS_IN_CONNECTION);
    if (value != null && (value instanceof java.sql.Connection)) {
      jdbcConn=(java.sql.Connection)value;
      logger.logp(Level.FINE,Connection.class.getName(),""String_Node_Str"",jdbcConn.toString());
      return;
    }
  }
  if (connProperties == null) {
    IllegalArgumentException e=new IllegalArgumentException(""String_Node_Str"");
    logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",e.getMessage(),e);
    throw e;
  }
  if (logger.isLoggable(Level.FINE)) {
    String logMsg=""String_Node_Str"";
    for (Enumeration enumeration=connProperties.propertyNames(); enumeration.hasMoreElements(); ) {
      String propName=(String)enumeration.nextElement();
      String lcPropName=propName.toLowerCase();
      String propVal;
      if (lcPropName.indexOf(""String_Node_Str"") >= 0 || lcPropName.indexOf(""String_Node_Str"") >= 0)       propVal=""String_Node_Str"";
 else {
        propVal=connProperties.getProperty(propName);
        if (lcPropName.equals(""String_Node_Str"")) {
          propVal=LogUtil.encryptURL(propVal);
        }
      }
      logMsg+=propName + ""String_Node_Str"" + propVal+ ""String_Node_Str"";
    }
    logger.logp(Level.FINE,Connection.class.getName(),""String_Node_Str"",logMsg);
  }
  close();
  String dataSource=connProperties.getProperty(Constants.ODADataSource);
  if (dataSource != null) {
    UnsupportedOperationException e=new UnsupportedOperationException(""String_Node_Str"");
    logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",e.getMessage(),e);
    throw e;
  }
 else {
    String url=connProperties.getProperty(Constants.ODAURL);
    String jndiName=connProperties.getProperty(Constants.ODAJndiName);
    if ((url == null || url.length() == 0) && (jndiName == null || jndiName.length() == 0)) {
      throw new JDBCException(ResourceConstants.DRIVER_MISSING_PROPERTIES,ResourceConstants.ERROR_MISSING_PROPERTIES);
    }
    connectByUrl(url,connProperties);
  }
}",0.914271306101866
71815,"public void testResultSet(){
  ResultSetIndex index=new ResultSetIndex();
  setupIndex(index);
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",null,""String_Node_Str""));
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",null,""String_Node_Str""));
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
}","public void testResultSet(){
  ResultSetIndex index=new ResultSetIndex();
  setupIndex(index);
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",null,""String_Node_Str""));
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",null,""String_Node_Str""));
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",index.getResultSet(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
}",0.9385915492957746
71816,"private String getIntRowId(int rowId){
  if (entries == null) {
    entries=rsets.toArray(new ResultSetEntry[rsets.size()]);
    Arrays.sort(entries,comparator);
  }
  int index=Arrays.binarySearch(entries,new ResultSetEntry(rowId,""String_Node_Str""),comparator);
  if (index < 0) {
    index=-(index + 1) - 1;
  }
  if (index >= 0 && index < entries.length) {
    return entries[index].rset;
  }
  return null;
}","private String getIntRowId(int rowId){
  if (entries == null) {
    entries=rsets.toArray(new ResultSetEntry[rsets.size()]);
    Arrays.sort(entries,comparator);
  }
  int index=Arrays.binarySearch(entries,new ResultSetEntry(rowId,""String_Node_Str""),comparator);
  if (index < 0) {
    index=-(index + 1) - 1;
  }
  if (index < 0) {
    index=0;
  }
  if (index >= 0 && index < entries.length) {
    return entries[index].rset;
  }
  return null;
}",0.958139534883721
71817,"/** 
 * Creates an instance of the resource factory. <!-- begin-user-doc --> <!-- end-user-doc -->
 */
public ModelResourceFactoryImpl(){
  super();
  ExtendedMetaData extendedMetaData=ExtendedMetaData.INSTANCE;
  extendedMetaData.putPackage(""String_Node_Str"",ModelPackage.eINSTANCE);
  extendedMetaData.putPackage(""String_Node_Str"",AttributePackage.eINSTANCE);
  extendedMetaData.putPackage(""String_Node_Str"",ComponentPackage.eINSTANCE);
  extendedMetaData.putPackage(""String_Node_Str"",DataPackage.eINSTANCE);
  extendedMetaData.putPackage(""String_Node_Str"",LayoutPackage.eINSTANCE);
  extendedMetaData.putPackage(""String_Node_Str"",TypePackage.eINSTANCE);
}","/** 
 * Creates an instance of the resource factory. <!-- begin-user-doc --> <!-- end-user-doc -->
 */
public ModelResourceFactoryImpl(){
  super();
}",0.3712871287128713
71818,"public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  odaStatement=dataSource.prepareStatement(queryText,queryType);
  addProperties();
  addParameterDefns();
  IOdaDataSetDesign design=null;
  if (session.getDataSetCacheManager().getCurrentDataSetDesign() instanceof IOdaDataSetDesign)   design=(IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign();
  if (design != null) {
    if (supportNameResults(design)) {
      addCustomFields(design.getPrimaryResultSetName(),odaStatement);
      addColumnHints(design.getPrimaryResultSetName(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetName(),this.projectedFields);
    }
 else     if (design.getPrimaryResultSetNumber() > 0) {
      addCustomFields(design.getPrimaryResultSetNumber(),odaStatement);
      addColumnHints(design.getPrimaryResultSetNumber(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetNumber(),this.projectedFields);
    }
 else {
      prepareColumns();
    }
  }
 else {
    prepareColumns();
  }
  odaStatement.setMaxRows(this.getRowFetchLimit());
  try {
    resultMetadata=getMetaData((IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign(),odaStatement);
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}","public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  odaStatement=dataSource.prepareStatement(queryText,queryType);
  addProperties();
  addParameterDefns();
  IOdaDataSetDesign design=null;
  if (session.getDataSetCacheManager().getCurrentDataSetDesign() instanceof IOdaDataSetDesign)   design=(IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign();
  if (design != null) {
    if (canAccessResultSetByName(design)) {
      addCustomFields(design.getPrimaryResultSetName(),odaStatement);
      addColumnHints(design.getPrimaryResultSetName(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetName(),this.projectedFields);
    }
 else     if (canAccessResultSetByNumber(design)) {
      addCustomFields(design.getPrimaryResultSetNumber(),odaStatement);
      addColumnHints(design.getPrimaryResultSetNumber(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetNumber(),this.projectedFields);
    }
 else {
      prepareColumns();
    }
  }
 else {
    prepareColumns();
  }
  odaStatement.setMaxRows(this.getRowFetchLimit());
  try {
    resultMetadata=getMetaData((IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign(),odaStatement);
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}",0.8865153538050734
71819,"/** 
 * @param design
 * @param odaStatement
 * @return
 * @throws DataException
 */
private IResultClass getMetaData(IOdaDataSetDesign design,PreparedStatement odaStatement) throws DataException {
  IResultClass result=null;
  if (design != null) {
    if (odaStatement.supportsNamedResults() && design.getPrimaryResultSetName() != null) {
      result=odaStatement.getMetaData(design.getPrimaryResultSetName());
    }
 else     if (design.getPrimaryResultSetNumber() > 0) {
      result=odaStatement.getMetaData(design.getPrimaryResultSetNumber());
    }
  }
  if (result == null)   result=odaStatement.getMetaData();
  return result;
}","/** 
 * @param design
 * @param odaStatement
 * @return
 * @throws DataException
 */
private IResultClass getMetaData(IOdaDataSetDesign design,PreparedStatement odaStatement) throws DataException {
  IResultClass result=null;
  if (design != null) {
    if (canAccessResultSetByName(design)) {
      result=odaStatement.getMetaData(design.getPrimaryResultSetName());
    }
 else     if (canAccessResultSetByNumber(design)) {
      result=odaStatement.getMetaData(design.getPrimaryResultSetNumber());
    }
  }
  if (result == null)   result=odaStatement.getMetaData();
  return result;
}",0.6677551020408163
71820,"public void setDataElement(DataElement data){
  if (!(data == null || data instanceof DateTimeDataElement)) {
    return;
  }
  btnCheck.setSelection(data != null);
  Calendar calendar=null;
  if (data == null) {
    calendar=Calendar.getInstance();
    calendar.set(Calendar.HOUR,0);
    calendar.set(Calendar.MINUTE,0);
    calendar.set(Calendar.SECOND,0);
  }
 else {
    calendar=((DateTimeDataElement)data).getValueAsCalendar();
  }
  pickerDate.setYear(calendar.get(Calendar.YEAR));
  pickerDate.setMonth(calendar.get(Calendar.MONTH));
  pickerDate.setDay(calendar.get(Calendar.DATE));
  pickerTime.setHours(calendar.get(Calendar.HOUR));
  pickerTime.setMinutes(calendar.get(Calendar.MINUTE));
  pickerTime.setSeconds(calendar.get(Calendar.SECOND));
  setEnabled(data != null);
}","public void setDataElement(DataElement data){
  if (!(data == null || data instanceof DateTimeDataElement)) {
    return;
  }
  btnCheck.setSelection(data != null);
  Calendar calendar=null;
  if (data == null) {
    calendar=Calendar.getInstance();
    calendar.set(Calendar.HOUR,0);
    calendar.set(Calendar.MINUTE,0);
    calendar.set(Calendar.SECOND,0);
  }
 else {
    calendar=((DateTimeDataElement)data).getValueAsCalendar();
  }
  pickerDate.setYear(calendar.get(Calendar.YEAR));
  pickerDate.setMonth(calendar.get(Calendar.MONTH));
  pickerDate.setDay(calendar.get(Calendar.DATE));
  pickerTime.setHours(calendar.get(Calendar.HOUR_OF_DAY));
  pickerTime.setMinutes(calendar.get(Calendar.MINUTE));
  pickerTime.setSeconds(calendar.get(Calendar.SECOND));
  setEnabled(data != null);
}",0.9955611921369688
71821,"public IDataRowExpressionEvaluator prepareRowExpressionEvaluator(Chart cm,List columnExpression,int rowCount,boolean isStringType) throws ChartException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=getCustomScriptClassLoader(parentLoader);
  Thread.currentThread().setContextClassLoader(newContextLoader);
  IDataRowExpressionEvaluator evaluator=null;
  DataRequestSession session=null;
  try {
    CubeHandle cube=ChartXTabUtil.getBindingCube(itemHandle);
    if (cube != null) {
      session=prepareDataRequestSession(getMaxRow(),true);
      if (!isSharedBinding()) {
        evaluator=createCubeEvaluator(cube,session);
      }
 else {
        evaluator=createCubeEvaluatorForSharingQuery(session,cube);
      }
    }
 else {
      session=prepareDataRequestSession(getMaxRow(),false);
      if (isSharedBinding()) {
        evaluator=fShareBindingQueryHelper.createShareBindingEvaluator(cm,session);
      }
 else {
        evaluator=createBaseEvaluator(itemHandle,cm,columnExpression,session);
      }
    }
    session.shutdown();
    session=null;
    return evaluator;
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
catch (  RuntimeException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldContextLoader);
    if (session != null) {
      session.shutdown();
    }
  }
}","public IDataRowExpressionEvaluator prepareRowExpressionEvaluator(Chart cm,List columnExpression,int rowCount,boolean isStringType) throws ChartException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=getCustomScriptClassLoader(parentLoader);
  Thread.currentThread().setContextClassLoader(newContextLoader);
  IDataRowExpressionEvaluator evaluator=null;
  DataRequestSession session=null;
  try {
    CubeHandle cube=ChartXTabUtil.getBindingCube(itemHandle);
    if (cube != null) {
      session=prepareDataRequestSession(getMaxRow(),true);
      if (!isSharedBinding()) {
        evaluator=createCubeEvaluator(cube,session);
      }
 else {
        evaluator=createCubeEvaluatorForSharingQuery(session,cube);
      }
    }
 else {
      session=prepareDataRequestSession(getMaxRow(),false);
      if (isSharedBinding()) {
        evaluator=fShareBindingQueryHelper.createShareBindingEvaluator(cm,session);
      }
 else {
        evaluator=createBaseEvaluator(itemHandle,cm,columnExpression,session);
      }
    }
    return evaluator;
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
catch (  RuntimeException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldContextLoader);
  }
}",0.968720966243419
71822,"/** 
 * Create base evaluator for chart using data set.
 * @param handle
 * @param cm
 * @param columnExpression
 * @param session
 * @return
 * @throws ChartException
 */
private IDataRowExpressionEvaluator createBaseEvaluator(ExtendedItemHandle handle,Chart cm,List columnExpression,DataRequestSession session) throws ChartException {
  IQueryResults actualResultSet;
  BaseQueryHelper cbqh=new BaseQueryHelper(handle,cm);
  QueryDefinition queryDefn=(QueryDefinition)cbqh.createBaseQuery(columnExpression);
  resetParametersForDataPreview(getDataSetFromHandle(),queryDefn);
  handleGroup(queryDefn,handle);
  try {
    actualResultSet=session.executeQuery(queryDefn,null,getPropertyIterator(handle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP)),ChartReportItemUtil.getColumnDataBindings(handle));
    if (actualResultSet != null) {
      return new BaseGroupedQueryResultSetEvaluator(actualResultSet.getResultIterator(),ChartReportItemUtil.hasAggregation(cm),cm);
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
  return null;
}","/** 
 * Create base evaluator for chart using data set.
 * @param handle
 * @param cm
 * @param columnExpression
 * @param session
 * @return
 * @throws ChartException
 */
private IDataRowExpressionEvaluator createBaseEvaluator(ExtendedItemHandle handle,Chart cm,List columnExpression,final DataRequestSession session) throws ChartException {
  IQueryResults actualResultSet;
  BaseQueryHelper cbqh=new BaseQueryHelper(handle,cm);
  QueryDefinition queryDefn=(QueryDefinition)cbqh.createBaseQuery(columnExpression);
  resetParametersForDataPreview(getDataSetFromHandle(),queryDefn);
  handleGroup(queryDefn,handle);
  try {
    actualResultSet=session.executeQuery(queryDefn,null,getPropertyIterator(handle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP)),ChartReportItemUtil.getColumnDataBindings(handle));
    if (actualResultSet != null) {
      return new BaseGroupedQueryResultSetEvaluator(actualResultSet.getResultIterator(),ChartReportItemUtil.hasAggregation(cm),cm){
        @Override public void close(){
          super.close();
          session.shutdown();
        }
      }
;
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
  return null;
}",0.9491955969517358
71823,"/** 
 * Prepare data expression evaluator for query share with table.
 * @param cm
 * @param session
 * @return
 * @throws BirtException
 * @throws AdapterException
 * @throws DataException
 * @throws ChartException
 */
private IDataRowExpressionEvaluator createShareBindingEvaluator(Chart cm,DataRequestSession session) throws BirtException, AdapterException, DataException, ChartException {
  IQueryResults actualResultSet;
  QueryDefinition queryDefn=new QueryDefinition();
  int maxRow=getMaxRow();
  queryDefn.setMaxRows(maxRow);
  final Map bindingExprsMap=new HashMap();
  Iterator iterator=ChartReportItemUtil.getColumnDataBindings(itemHandle);
  ArrayList columnList=new ArrayList();
  while (iterator.hasNext()) {
    columnList.add(iterator.next());
  }
  generateShareBindingsWithTable(getPreviewHeadersInfo(columnList),queryDefn,session,bindingExprsMap);
  addCustomExpressions(queryDefn,cm,bindingExprsMap);
  actualResultSet=session.executeQuery(queryDefn,null,getPropertyIterator(itemHandle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP)),null);
  if (actualResultSet != null) {
    return new BaseGroupedQueryResultSetEvaluator(actualResultSet.getResultIterator(),ChartReportItemUtil.hasAggregation(cm),cm){
      public Object evaluate(      String expression){
        try {
          String newExpr=(String)bindingExprsMap.get(expression);
          if (newExpr != null) {
            return fResultIterator.getValue(newExpr);
          }
 else {
            return fResultIterator.getValue(expression);
          }
        }
 catch (        BirtException e) {
          sLogger.log(e);
        }
        return null;
      }
    }
;
  }
  return null;
}","/** 
 * Prepare data expression evaluator for query share with table.
 * @param cm
 * @param session
 * @return
 * @throws BirtException
 * @throws AdapterException
 * @throws DataException
 * @throws ChartException
 */
private IDataRowExpressionEvaluator createShareBindingEvaluator(Chart cm,final DataRequestSession session) throws BirtException, AdapterException, DataException, ChartException {
  IQueryResults actualResultSet;
  QueryDefinition queryDefn=new QueryDefinition();
  int maxRow=getMaxRow();
  queryDefn.setMaxRows(maxRow);
  final Map bindingExprsMap=new HashMap();
  Iterator iterator=ChartReportItemUtil.getColumnDataBindings(itemHandle);
  ArrayList columnList=new ArrayList();
  while (iterator.hasNext()) {
    columnList.add(iterator.next());
  }
  generateShareBindingsWithTable(getPreviewHeadersInfo(columnList),queryDefn,session,bindingExprsMap);
  addCustomExpressions(queryDefn,cm,bindingExprsMap);
  actualResultSet=session.executeQuery(queryDefn,null,getPropertyIterator(itemHandle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP)),null);
  if (actualResultSet != null) {
    return new BaseGroupedQueryResultSetEvaluator(actualResultSet.getResultIterator(),ChartReportItemUtil.hasAggregation(cm),cm){
      public Object evaluate(      String expression){
        try {
          String newExpr=(String)bindingExprsMap.get(expression);
          if (newExpr != null) {
            return fResultIterator.getValue(newExpr);
          }
 else {
            return fResultIterator.getValue(expression);
          }
        }
 catch (        BirtException e) {
          sLogger.log(e);
        }
        return null;
      }
      @Override public void close(){
        super.close();
        session.shutdown();
      }
    }
;
  }
  return null;
}",0.960648148148148
71824,"/** 
 * Creates the evaluator for Cube Live preview.
 * @param cube
 * @param session
 * @return
 * @throws BirtException
 */
private IDataRowExpressionEvaluator createCubeEvaluator(CubeHandle cube,DataRequestSession session) throws BirtException {
  IBaseCubeQueryDefinition qd=new ChartCubeQueryHelper(itemHandle,context.getModel()).createCubeQuery(null);
  session.defineCube(cube);
  IPreparedCubeQuery ipcq=session.prepare((ICubeQueryDefinition)qd);
  return new BIRTCubeResultSetEvaluator(ipcq.execute(null,null));
}","/** 
 * Creates the evaluator for Cube Live preview.
 * @param cube
 * @param session
 * @return
 * @throws BirtException
 */
private IDataRowExpressionEvaluator createCubeEvaluator(CubeHandle cube,final DataRequestSession session) throws BirtException {
  IBaseCubeQueryDefinition qd=new ChartCubeQueryHelper(itemHandle,context.getModel()).createCubeQuery(null);
  session.defineCube(cube);
  IPreparedCubeQuery ipcq=session.prepare((ICubeQueryDefinition)qd);
  return new BIRTCubeResultSetEvaluator(ipcq.execute(null,null)){
    @Override public void close(){
      super.close();
      session.shutdown();
    }
  }
;
}",0.9125874125874126
71825,"/** 
 * Create evaluator for data cube under sharing crosstab query.
 * @param session
 * @param cube
 * @return
 * @throws ExtendedElementException
 * @throws BirtException
 * @throws DataException
 * @since 2.3
 */
private IDataRowExpressionEvaluator createCubeEvaluatorForSharingQuery(DataRequestSession session,CubeHandle cube) throws ExtendedElementException, BirtException, DataException {
  CrosstabReportItemHandle crosstabItem=null;
  if (isInMultiView()) {
    crosstabItem=(CrosstabReportItemHandle)((ExtendedItemHandle)itemHandle.getContainer().getContainer()).getReportItem();
  }
 else {
    IReportItem reportItem=((ExtendedItemHandle)itemHandle.getDataBindingReference()).getReportItem();
    if (reportItem instanceof CrosstabReportItemHandle) {
      crosstabItem=(CrosstabReportItemHandle)reportItem;
    }
 else {
      return createCubeEvaluator(cube,session);
    }
  }
  ICubeQueryDefinition qd=CrosstabQueryUtil.createCubeQuery(crosstabItem,null,false,true,true,true,true,true);
  session.defineCube(cube);
  IPreparedCubeQuery ipcq=session.prepare(qd);
  return new BIRTCubeResultSetEvaluator(ipcq.execute(null,null));
}","/** 
 * Create evaluator for data cube under sharing crosstab query.
 * @param session
 * @param cube
 * @return
 * @throws ExtendedElementException
 * @throws BirtException
 * @throws DataException
 * @since 2.3
 */
private IDataRowExpressionEvaluator createCubeEvaluatorForSharingQuery(final DataRequestSession session,CubeHandle cube) throws ExtendedElementException, BirtException, DataException {
  CrosstabReportItemHandle crosstabItem=null;
  if (isInMultiView()) {
    crosstabItem=(CrosstabReportItemHandle)((ExtendedItemHandle)itemHandle.getContainer().getContainer()).getReportItem();
  }
 else {
    IReportItem reportItem=((ExtendedItemHandle)itemHandle.getDataBindingReference()).getReportItem();
    if (reportItem instanceof CrosstabReportItemHandle) {
      crosstabItem=(CrosstabReportItemHandle)reportItem;
    }
 else {
      return createCubeEvaluator(cube,session);
    }
  }
  ICubeQueryDefinition qd=CrosstabQueryUtil.createCubeQuery(crosstabItem,null,false,true,true,true,true,true);
  session.defineCube(cube);
  IPreparedCubeQuery ipcq=session.prepare(qd);
  return new BIRTCubeResultSetEvaluator(ipcq.execute(null,null)){
    @Override public void close(){
      super.close();
      session.shutdown();
    }
  }
;
}",0.9581589958158996
71826,"/** 
 * Does Live Preview. Need to check all series data binding complete before invoking
 * @param chart chart model
 * @param dataProvider data service provider
 * @throws ChartException
 */
public static void doLivePreview(Chart chart,IDataServiceProvider dataProvider) throws ChartException {
  boolean isSharingQuery=dataProvider.checkState(IDataServiceProvider.SHARE_QUERY);
  final List expressions=Generator.instance().getRowExpressions(chart,null,!isSharingQuery);
  IDataRowExpressionEvaluator evaluator=dataProvider.prepareRowExpressionEvaluator(chart,expressions,-1,false);
  RunTimeContext context=new RunTimeContext();
  context.setULocale(ULocale.getDefault());
  context.setSharingQuery(isSharingQuery);
  Generator.instance().bindData(evaluator,chart,context);
}","/** 
 * Does Live Preview. Need to check all series data binding complete before invoking
 * @param chart chart model
 * @param dataProvider data service provider
 * @throws ChartException
 */
public static void doLivePreview(Chart chart,IDataServiceProvider dataProvider) throws ChartException {
  boolean isSharingQuery=dataProvider.checkState(IDataServiceProvider.SHARE_QUERY);
  final List expressions=Generator.instance().getRowExpressions(chart,null,!isSharingQuery);
  IDataRowExpressionEvaluator evaluator=dataProvider.prepareRowExpressionEvaluator(chart,expressions,-1,false);
  RunTimeContext context=new RunTimeContext();
  context.setULocale(ULocale.getDefault());
  context.setSharingQuery(isSharingQuery);
  Generator.instance().bindData(evaluator,chart,context);
  if (evaluator != null) {
    evaluator.close();
  }
}",0.966501240694789
71827,"public void testSupportsMultipleResultSets() throws Exception {
  assertFalse(dbMeta1.supportsMultipleResultSets());
  assertFalse(dbMeta2.supportsMultipleResultSets());
}","public void testSupportsMultipleResultSets() throws Exception {
  assertTrue(dbMeta1.supportsMultipleResultSets());
  assertTrue(dbMeta2.supportsMultipleResultSets());
}",0.9588235294117649
71828,"public void testSupportsNamedResultSets() throws Exception {
  assertFalse(dbMeta1.supportsNamedResultSets());
  assertFalse(dbMeta2.supportsNamedResultSets());
}","public void testSupportsNamedResultSets() throws Exception {
  assertTrue(dbMeta1.supportsNamedResultSets());
  assertTrue(dbMeta2.supportsNamedResultSets());
}",0.9565217391304348
71829,"protected void initialize(){
  PageContext pageContext=new PageContext();
  if (context.autoPageBreak) {
    pageContext.pageContent=createPageContent();
  }
 else {
    pageContext.pageContent=pageContent;
  }
  currentContext=pageContext;
  contextList.add(currentContext);
  createRoot();
  PageArea page=(PageArea)currentContext.root;
  context.setMaxHeight(page.getRoot().getHeight());
  context.setMaxWidth(page.getRoot().getWidth());
  layoutHeader(page);
  layoutFooter(page);
  updateBodySize(page);
  context.setMaxHeight(page.getBody().getHeight());
  context.setMaxWidth(page.getBody().getWidth());
  currentContext.maxAvaWidth=context.getMaxWidth();
  if (context.autoPageBreak) {
    currentContext.maxAvaHeight=context.getMaxHeight();
  }
 else {
    currentContext.maxAvaHeight=Integer.MAX_VALUE;
  }
}","protected void initialize(){
  PageContext pageContext=new PageContext();
  if (context.autoPageBreak) {
    pageContext.pageContent=createPageContent(pageContent);
  }
 else {
    pageContext.pageContent=pageContent;
  }
  currentContext=pageContext;
  contextList.add(currentContext);
  createRoot();
  PageArea page=(PageArea)currentContext.root;
  context.setMaxHeight(page.getRoot().getHeight());
  context.setMaxWidth(page.getRoot().getWidth());
  layoutHeader(page);
  layoutFooter(page);
  updateBodySize(page);
  context.setMaxHeight(page.getBody().getHeight());
  context.setMaxWidth(page.getBody().getWidth());
  currentContext.maxAvaWidth=context.getMaxWidth();
  if (context.autoPageBreak) {
    currentContext.maxAvaHeight=context.getMaxHeight();
  }
 else {
    currentContext.maxAvaHeight=Integer.MAX_VALUE;
  }
}",0.9933211900425016
71830,"protected IPageContent createPageContent(){
  MasterPageDesign pageDesign=getMasterPage(report);
  return ReportExecutorUtil.executeMasterPage(reportExecutor,context.pageNumber++,pageDesign);
}","protected IPageContent createPageContent(IPageContent pageContent,long pageNumber,long totalPageNumber){
  return (IPageContent)cloneContent(pageContent,pageNumber,totalPageNumber);
}",0.5425531914893617
71831,"public void addData(int col,Data data){
  if ((getStartRowId(col) > height) || (col >= getColumnCount())) {
    emitter.outputSheet();
    clearCachedSheetData();
  }
  List<Data> column=columns.get(col);
  column.add(data);
  if (data instanceof Data) {
    BookmarkDef bookmark=((Data)data).getBookmark();
    if (null == bookmark) {
      return;
    }
    int rowNo=columnId2StartRowId.get(new Integer(col)).intValue() + getStartRowId(col);
    bookmark.setColumnNo(col + 1);
    bookmark.setRowNo(rowNo);
    bookmarks.add(bookmark);
  }
}","public void addData(int col,Data data){
  if ((getStartRowId(col) > height) || (col >= getColumnCount())) {
    emitter.outputSheet();
    clearCachedSheetData();
  }
  List<Data> column=columns.get(col);
  int size=column.size();
  if (size > 0) {
    column.get(size - 1).clearContainer();
  }
  column.add(data);
  if (data instanceof Data) {
    BookmarkDef bookmark=((Data)data).getBookmark();
    if (null == bookmark) {
      return;
    }
    int rowNo=columnId2StartRowId.get(new Integer(col)).intValue() + getStartRowId(col);
    bookmark.setColumnNo(col + 1);
    bookmark.setRowNo(rowNo);
    bookmarks.add(bookmark);
  }
}",0.9228159457167092
71832,"/** 
 * Build the style of image content.
 */
public void buildImageStyle(IImageContent image,StringBuffer styleBuffer,int display){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,image.getWidth());
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,image.getHeight());
  setDisplayProperty(display,0,styleBuffer);
  IStyle style=getElementStyle(image);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of image content.
 */
public void buildImageStyle(IImageContent image,StringBuffer styleBuffer,int display){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,image.getWidth());
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,image.getHeight());
  setDisplayProperty(display,0,styleBuffer);
  IStyle style=image.getStyle();
  String verticalAlign=style.getVerticalAlign();
  if (verticalAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(verticalAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(image);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.8580060422960725
71833,"/** 
 * Build the style of image content.
 */
public void buildImageStyle(IImageContent image,StringBuffer styleBuffer,int display){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,image.getWidth());
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,image.getHeight());
  setDisplayProperty(display,0,styleBuffer);
  IStyle imageComputedStyle=image.getComputedStyle();
  if (null != imageComputedStyle) {
    AttributeBuilder.buildTextDecoration(styleBuffer,imageComputedStyle);
  }
  IStyle style=getElementStyle(image);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}","/** 
 * Build the style of image content.
 */
public void buildImageStyle(IImageContent image,StringBuffer styleBuffer,int display){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,image.getWidth());
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,image.getHeight());
  setDisplayProperty(display,0,styleBuffer);
  IStyle imageComputedStyle=image.getComputedStyle();
  if (null != imageComputedStyle) {
    AttributeBuilder.buildTextDecoration(styleBuffer,imageComputedStyle);
  }
  IStyle style=image.getStyle();
  String verticalAlign=style.getVerticalAlign();
  if (verticalAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(verticalAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(image);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}",0.8745328350240257
71834,"/** 
 * Parses a dimension string in locale-dependent way. The input can be in localized value. The measure part use the decimal separator from the locale. e,g. ""123,456.78"" for English ; ""123.456,78"" for German. <p> The string must match the following: <ul> <li>null</li> <li>[1-9][0-9]*[.[0-9]*[ ]*[u]], u is the one of the allowed units</li> </ul> <p>
 * @param value the string to parse
 * @return a dimension object
 * @throws PropertyValueException if the string is not valid
 */
public static DimensionValue parseInput(String value,ULocale locale) throws PropertyValueException {
  return DimensionValueUtil.doParse(value,true,ThreadResources.getLocale());
}","/** 
 * Parses a dimension string in locale-dependent way. The input can be in localized value. The measure part use the decimal separator from the locale. e,g. ""123,456.78"" for English ; ""123.456,78"" for German. <p> The string must match the following: <ul> <li>null</li> <li>[1-9][0-9]*[.[0-9]*[ ]*[u]], u is the one of the allowed units</li> </ul> <p>
 * @param value the string to parse
 * @param locale the locale where the input string resides
 * @return a dimension object
 * @throws PropertyValueException if the string is not valid
 */
public static DimensionValue parseInput(String value,ULocale locale) throws PropertyValueException {
  return DimensionValueUtil.doParse(value,true,locale);
}",0.932748538011696
71835,"public int[] resolveFixedLayout(int maxWidth){
  int columnNumber=table.getColumnCount();
  DimensionType[] columns=new DimensionType[columnNumber];
  for (int i=0; i < columnNumber; i++) {
    IColumn column=table.getColumn(i);
    DimensionType w=column.getWidth();
    if (startCol < 0) {
      startCol=i;
    }
    endCol=i;
    if (w == null) {
      columns[i]=null;
    }
 else {
      columns[i]=new DimensionType(w.getMeasure(),w.getUnits());
    }
  }
  if (startCol < 0)   startCol=0;
  if (endCol < 0)   endCol=0;
  int specifiedWidth=getDimensionValue(tableContent.getWidth(),maxWidth);
  int tableWidth;
  if (specifiedWidth > 0) {
    tableWidth=specifiedWidth;
  }
 else {
    tableWidth=maxWidth;
  }
  return formalize(columns,tableWidth);
}","public int[] resolveFixedLayout(int maxWidth){
  int columnNumber=table.getColumnCount();
  DimensionType[] columns=new DimensionType[columnNumber];
  for (int i=0; i < columnNumber; i++) {
    IColumn column=table.getColumn(i);
    DimensionType w=column.getWidth();
    if (startCol < 0) {
      startCol=i;
    }
    endCol=i;
    if (w == null) {
      columns[i]=null;
    }
 else {
      columns[i]=new DimensionType(w.getMeasure(),w.getUnits());
    }
  }
  if (startCol < 0)   startCol=0;
  if (endCol < 0)   endCol=0;
  boolean isTableWidthDefined=false;
  int specifiedWidth=getDimensionValue(tableContent.getWidth(),maxWidth);
  int tableWidth;
  if (specifiedWidth > 0) {
    tableWidth=specifiedWidth;
    isTableWidthDefined=true;
  }
 else {
    tableWidth=maxWidth;
    isTableWidthDefined=false;
  }
  return formalize(columns,tableWidth,isTableWidthDefined);
}",0.927960927960928
71836,"protected int[] formalize(DimensionType[] columns,int tableWidth){
  ArrayList percentageList=new ArrayList();
  ArrayList unsetList=new ArrayList();
  int[] resolvedColumnWidth=new int[columns.length];
  double total=0.0f;
  int fixedLength=0;
  for (int i=0; i < columns.length; i++) {
    if (columns[i] == null) {
      unsetList.add(new Integer(i));
    }
 else     if (EngineIRConstants.UNITS_PERCENTAGE.equals(columns[i].getUnits())) {
      percentageList.add(new Integer(i));
      total+=columns[i].getMeasure();
    }
 else     if (EngineIRConstants.UNITS_EM.equals(columns[i].getUnits()) || EngineIRConstants.UNITS_EX.equals(columns[i].getUnits())) {
      int len=TableLayout.this.getDimensionValue(columns[i],PropertyUtil.getDimensionValue(table.getComputedStyle().getProperty(StyleConstants.STYLE_FONT_SIZE)));
      resolvedColumnWidth[i]=len;
      fixedLength+=len;
    }
 else {
      int len=TableLayout.this.getDimensionValue(columns[i],tableWidth);
      resolvedColumnWidth[i]=len;
      fixedLength+=len;
    }
  }
  if (unsetList.isEmpty() && percentageList.isEmpty()) {
    return resolvedColumnWidth;
  }
  if (fixedLength >= tableWidth) {
    for (int i=0; i < unsetList.size(); i++) {
      Integer index=(Integer)unsetList.get(i);
      columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
      resolvedColumnWidth[index.intValue()]=0;
    }
    for (int i=0; i < percentageList.size(); i++) {
      Integer index=(Integer)percentageList.get(i);
      columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
      resolvedColumnWidth[index.intValue()]=0;
    }
  }
 else {
    float leftPercentage=(((float)(tableWidth - fixedLength)) / tableWidth) * 100.0f;
    if (unsetList.isEmpty()) {
      double ratio=leftPercentage / total;
      for (int i=0; i < percentageList.size(); i++) {
        Integer index=(Integer)percentageList.get(i);
        columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
        resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
      }
    }
 else {
      if (total < leftPercentage) {
        double delta=leftPercentage - total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          columns[index.intValue()]=new DimensionType(delta / (double)unsetList.size(),EngineIRConstants.UNITS_PERCENTAGE);
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
        }
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure(),columns[index.intValue()].getUnits());
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
        }
      }
 else {
        double ratio=leftPercentage / total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
          resolvedColumnWidth[index.intValue()]=0;
        }
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
        }
      }
    }
  }
  return resolvedColumnWidth;
}","/** 
 * Calculates the column width for the table. the return value should be each column width in point.
 * @param columns The column width specified in report design.
 * @param tableWidth The suggested table width. If isTableWidthDefined is true, this value is user defined table width; otherwise, it is the max possible width for the table.
 * @param isTableWidthDefined The flag to indicate whether the table width has been defined explicitly.
 * @return each column width in point.
 */
protected int[] formalize(DimensionType[] columns,int tableWidth,boolean isTableWidthDefined){
  ArrayList percentageList=new ArrayList();
  ArrayList unsetList=new ArrayList();
  ArrayList preFixedList=new ArrayList();
  int[] resolvedColumnWidth=new int[columns.length];
  double total=0.0f;
  int fixedLength=0;
  for (int i=0; i < columns.length; i++) {
    if (columns[i] == null) {
      unsetList.add(new Integer(i));
    }
 else     if (EngineIRConstants.UNITS_PERCENTAGE.equals(columns[i].getUnits())) {
      percentageList.add(new Integer(i));
      total+=columns[i].getMeasure();
    }
 else     if (EngineIRConstants.UNITS_EM.equals(columns[i].getUnits()) || EngineIRConstants.UNITS_EX.equals(columns[i].getUnits())) {
      int len=TableLayout.this.getDimensionValue(columns[i],PropertyUtil.getDimensionValue(table.getComputedStyle().getProperty(StyleConstants.STYLE_FONT_SIZE)));
      resolvedColumnWidth[i]=len;
      fixedLength+=len;
    }
 else {
      int len=TableLayout.this.getDimensionValue(columns[i],tableWidth);
      resolvedColumnWidth[i]=len;
      preFixedList.add(new Integer(i));
      fixedLength+=len;
    }
  }
  if (!isTableWidthDefined && unsetList.isEmpty() && percentageList.isEmpty()) {
    return resolvedColumnWidth;
  }
  if (fixedLength >= tableWidth) {
    for (int i=0; i < unsetList.size(); i++) {
      Integer index=(Integer)unsetList.get(i);
      resolvedColumnWidth[index.intValue()]=0;
    }
    for (int i=0; i < percentageList.size(); i++) {
      Integer index=(Integer)percentageList.get(i);
      resolvedColumnWidth[index.intValue()]=0;
    }
    return resolvedColumnWidth;
  }
  if (unsetList.isEmpty()) {
    if (percentageList.isEmpty()) {
      int left=tableWidth - fixedLength;
      int delta=left / preFixedList.size();
      for (int i=0; i < preFixedList.size(); i++) {
        Integer index=(Integer)preFixedList.get(i);
        resolvedColumnWidth[index.intValue()]+=delta;
      }
    }
 else {
      float leftPercentage=(((float)(tableWidth - fixedLength)) / tableWidth) * 100.0f;
      double ratio=leftPercentage / total;
      for (int i=0; i < percentageList.size(); i++) {
        Integer index=(Integer)percentageList.get(i);
        columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
        resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
      }
    }
  }
 else {
    if (percentageList.isEmpty()) {
      int left=tableWidth - fixedLength;
      int eachWidth=left / unsetList.size();
      for (int i=0; i < unsetList.size(); i++) {
        Integer index=(Integer)unsetList.get(i);
        resolvedColumnWidth[index.intValue()]=eachWidth;
      }
    }
 else {
      float leftPercentage=(((float)(tableWidth - fixedLength)) / tableWidth) * 100.0f;
      if (leftPercentage <= total) {
        double ratio=leftPercentage / total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          resolvedColumnWidth[index.intValue()]=0;
        }
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
        }
      }
 else {
        int usedLength=fixedLength;
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          int width=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
          usedLength+=width;
          resolvedColumnWidth[index.intValue()]=width;
        }
        int left=tableWidth - usedLength;
        int eachWidth=left / unsetList.size();
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          resolvedColumnWidth[index.intValue()]=eachWidth;
        }
      }
    }
  }
  return resolvedColumnWidth;
}",0.4223410576351752
71837,"protected void repeatHeader(){
  if (bandStatus == IBandContent.BAND_HEADER || !tableContent.isHeaderRepeat()) {
    return;
  }
  ITableBandContent header=context.getWrappedTableHeader(content.getInstanceID());
  if (header == null || header.getChildren().isEmpty()) {
    return;
  }
  TableRegionLayout rLayout=getTableRegionLayout();
  rLayout.initialize(header);
  rLayout.layout();
  TableArea tableRegion=(TableArea)header.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getAllocatedHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    TableContext tableContext=(TableContext)contextList.getLast();
    while (iter.hasNext()) {
      ContainerArea area=(ContainerArea)iter.next();
      Iterator rowIter=area.getChildren();
      while (rowIter.hasNext()) {
        AbstractArea row=(AbstractArea)rowIter.next();
        if (row instanceof RowArea) {
          tableContext.layout.addRow((RowArea)row);
        }
      }
    }
    iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      addArea(area);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void repeatHeader(){
  if (bandStatus == IBandContent.BAND_HEADER) {
    return;
  }
  ITableBandContent header=(ITableBandContent)tableContent.getHeader();
  if (!tableContent.isHeaderRepeat() || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  TableRegionLayout rLayout=getTableRegionLayout();
  rLayout.initialize(header);
  rLayout.layout();
  TableArea tableRegion=(TableArea)header.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getAllocatedHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    TableContext tableContext=(TableContext)contextList.getLast();
    while (iter.hasNext()) {
      ContainerArea area=(ContainerArea)iter.next();
      Iterator rowIter=area.getChildren();
      while (rowIter.hasNext()) {
        AbstractArea row=(AbstractArea)rowIter.next();
        if (row instanceof RowArea) {
          tableContext.layout.addRow((RowArea)row);
        }
      }
    }
    iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      addArea(area);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.8877928483353884
71838,"protected void resolveTotalPage(IContentEmitter emitter){
  IContent con=context.getUnresolvedContent();
  if (!(con instanceof IAutoTextContent)) {
    return;
  }
  IAutoTextContent totalPageContent=(IAutoTextContent)con;
  if (null != totalPageContent) {
    NumberFormatter nf=new NumberFormatter();
    String patternStr=totalPageContent.getComputedStyle().getNumberFormat();
    nf.applyPattern(patternStr);
    long totalPageCount=0;
    if (context.autoPageBreak) {
      totalPageCount=context.pageCount;
    }
 else {
      totalPageCount=context.totalPage > 0 ? context.totalPage : context.pageCount;
    }
    totalPageContent.setText(nf.format(totalPageCount));
    AbstractArea totalPageArea=null;
    ChunkGenerator cg=new ChunkGenerator(context.getFontManager(),totalPageContent,true,true);
    if (cg.hasMore()) {
      Chunk c=cg.getNext();
      Dimension d=new Dimension((int)(c.getFontInfo().getWordWidth(c.getText()) * PDFConstants.LAYOUT_TO_PDF_RATIO),(int)(c.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      totalPageArea=(AbstractArea)AreaFactory.createTextArea(totalPageContent,c.getFontInfo(),false);
      totalPageArea.setWidth(Math.min(context.getMaxWidth(),d.getWidth()));
      totalPageArea.setHeight(Math.min(context.getMaxHeight(),d.getHeight()));
    }
    totalPageContent.setExtension(IContent.LAYOUT_EXTENSION,totalPageArea);
    emitter.startAutoText(totalPageContent);
  }
}","protected void resolveTotalPage(IContentEmitter emitter){
  IContent con=context.getUnresolvedContent();
  if (!(con instanceof IAutoTextContent)) {
    return;
  }
  IAutoTextContent totalPageContent=(IAutoTextContent)con;
  if (null != totalPageContent) {
    NumberFormatter nf=new NumberFormatter();
    String patternStr=totalPageContent.getComputedStyle().getNumberFormat();
    nf.applyPattern(patternStr);
    long totalPageCount=0;
    if (context.autoPageBreak) {
      totalPageCount=context.pageCount;
    }
 else {
      totalPageCount=context.totalPage > 0 ? context.totalPage : context.pageCount;
    }
    totalPageContent.setText(nf.format(totalPageCount));
    AbstractArea totalPageArea=null;
    ChunkGenerator cg=new ChunkGenerator(context.getFontManager(),totalPageContent,true,true);
    if (cg.hasMore()) {
      Chunk c=cg.getNext();
      Dimension d=new Dimension((int)(c.getFontInfo().getWordWidth(c.getText()) * PDFConstants.LAYOUT_TO_PDF_RATIO),(int)(c.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      totalPageArea=(AbstractArea)AreaFactory.createTextArea(totalPageContent,c.getFontInfo(),false);
      totalPageArea.setWidth(Math.min(context.getMaxWidth(),d.getWidth()));
      totalPageArea.setHeight(Math.min(context.getMaxHeight(),d.getHeight()));
    }
    String align=totalPageContent.getComputedStyle().getTextAlign();
    if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align) || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
      int spacing=context.getTotalPageTemplateWidth() - totalPageArea.getWidth();
      if (spacing > 0) {
        if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) {
          totalPageArea.setAllocatedPosition(spacing + totalPageArea.getAllocatedX(),totalPageArea.getAllocatedY());
        }
 else         if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
          totalPageArea.setAllocatedPosition(spacing / 2 + totalPageArea.getAllocatedX(),totalPageArea.getAllocatedY());
        }
      }
    }
    totalPageContent.setExtension(IContent.LAYOUT_EXTENSION,totalPageArea);
    emitter.startAutoText(totalPageContent);
  }
}",0.8013355592654424
71839,"public void layout(){
  IAutoTextContent autoText=(IAutoTextContent)content;
  FontHandler handler=new FontHandler(context.getFontManager(),autoText,false);
  FontInfo fontInfo=handler.getFontInfo();
  ContainerArea templateContainer=(ContainerArea)AreaFactory.createInlineContainer(autoText,true,true);
  IStyle areaStyle=templateContainer.getStyle();
  int maxWidth=parent.getCurrentMaxContentWidth();
  int width=getDimensionValue(autoText.getWidth(),maxWidth);
  templateContainer.setAllocatedWidth(maxWidth - parent.currentContext.currentIP);
  int minContentWidth=getDimensionValue(areaStyle.getFontSize()) * 4;
  int maxContentWidth=templateContainer.getWidth();
  int preWidth=0;
  if (width >= maxContentWidth) {
    preWidth=Math.max(maxContentWidth,minContentWidth);
  }
 else {
    preWidth=Math.max(minContentWidth,width);
  }
  templateContainer.setWidth(preWidth);
  templateContainer.setBaseLine(handler.getFontInfo().getBaseline());
  int height=getDimensionValue(autoText.getHeight(),maxWidth);
  templateContainer.setContentHeight(Math.max((int)(fontInfo.getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO),height));
  Dimension templateDimension=new Dimension();
  templateDimension.setDimension(templateContainer.getContentWidth(),templateContainer.getContentHeight());
  AbstractArea templateArea=createTemplateArea(autoText,templateDimension);
  templateContainer.addChild(templateArea);
  templateArea.setBaseLine(handler.getFontInfo().getBaseline());
  templateArea.setPosition(templateContainer.getContentX(),templateContainer.getContentY());
  parent.addArea(templateContainer);
}","public void layout(){
  boolean isInline=parent instanceof IInlineStackingLayout;
  if (isInline) {
    if (parent instanceof LineLayout) {
      ContainerLayout inlineContainer=new InlineContainerLayout(context,parent,content);
      inlineContainer.initialize();
      addTemplateArea(inlineContainer,true);
      inlineContainer.closeLayout();
    }
 else {
      addTemplateArea(parent,true);
    }
  }
 else {
    assert(parent instanceof BlockStackingLayout);
    if (content != null) {
      IStyle contentStyle=content.getComputedStyle();
      String align=contentStyle.getTextAlign();
      parent.content.getComputedStyle().setTextAlign(align);
    }
    LineLayout line=new LineLayout(context,parent);
    line.initialize();
    addTemplateArea(line,false);
    line.closeLayout();
  }
}",0.0473815461346633
71840,"public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  odaStatement=dataSource.prepareStatement(queryText,queryType);
  addProperties();
  addParameterDefns();
  IOdaDataSetDesign design=null;
  if (session.getDataSetCacheManager().getCurrentDataSetDesign() instanceof IOdaDataSetDesign)   design=(IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign();
  if (design != null) {
    if (design.getPrimaryResultSetName() != null) {
      addCustomFields(design.getPrimaryResultSetName(),odaStatement);
      addColumnHints(design.getPrimaryResultSetName(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetName(),this.projectedFields);
    }
 else     if (design.getPrimaryResultSetNumber() > 0) {
      addCustomFields(design.getPrimaryResultSetNumber(),odaStatement);
      addColumnHints(design.getPrimaryResultSetNumber(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetNumber(),this.projectedFields);
    }
 else {
      prepareColumns();
    }
  }
 else {
    prepareColumns();
  }
  odaStatement.setMaxRows(this.getRowFetchLimit());
  try {
    resultMetadata=getMetaData((IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign(),odaStatement);
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}","public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  odaStatement=dataSource.prepareStatement(queryText,queryType);
  addProperties();
  addParameterDefns();
  IOdaDataSetDesign design=null;
  if (session.getDataSetCacheManager().getCurrentDataSetDesign() instanceof IOdaDataSetDesign)   design=(IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign();
  if (design != null) {
    if (supportNameResults(design)) {
      addCustomFields(design.getPrimaryResultSetName(),odaStatement);
      addColumnHints(design.getPrimaryResultSetName(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetName(),this.projectedFields);
    }
 else     if (design.getPrimaryResultSetNumber() > 0) {
      addCustomFields(design.getPrimaryResultSetNumber(),odaStatement);
      addColumnHints(design.getPrimaryResultSetNumber(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetNumber(),this.projectedFields);
    }
 else {
      prepareColumns();
    }
  }
 else {
    prepareColumns();
  }
  odaStatement.setMaxRows(this.getRowFetchLimit());
  try {
    resultMetadata=getMetaData((IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign(),odaStatement);
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}",0.738031914893617
71841,"/** 
 * @param design
 * @param odaStatement
 * @return
 * @throws DataException
 */
private IResultClass getMetaData(IOdaDataSetDesign design,PreparedStatement odaStatement) throws DataException {
  IResultClass result=null;
  if (design != null) {
    if (design.getPrimaryResultSetName() != null) {
      result=odaStatement.getMetaData(design.getPrimaryResultSetName());
    }
 else     if (design.getPrimaryResultSetNumber() > 0) {
      result=odaStatement.getMetaData(design.getPrimaryResultSetNumber());
    }
  }
  if (result == null)   result=odaStatement.getMetaData();
  return result;
}","/** 
 * @param design
 * @param odaStatement
 * @return
 * @throws DataException
 */
private IResultClass getMetaData(IOdaDataSetDesign design,PreparedStatement odaStatement) throws DataException {
  IResultClass result=null;
  if (design != null) {
    if (odaStatement.supportsNamedResults() && design.getPrimaryResultSetName() != null) {
      result=odaStatement.getMetaData(design.getPrimaryResultSetName());
    }
 else     if (design.getPrimaryResultSetNumber() > 0) {
      result=odaStatement.getMetaData(design.getPrimaryResultSetNumber());
    }
  }
  if (result == null)   result=odaStatement.getMetaData();
  return result;
}",0.9684721099434116
71842,"public int needPageBreak(ICellContent cell){
  int current=currentIndex;
  int end=cell.getColumn() + cell.getColSpan();
  if (end > pageBreakIndexs[current]) {
    while (pageBreakIndexs[current] < end) {
      current++;
      if (current == pageBreakIndexs.length) {
        current=0;
        break;
      }
    }
    return current;
  }
  return -1;
}","public int needPageBreak(ICellContent cell){
  int current=currentIndex;
  int end=cell.getColumn() + cell.getColSpan();
  if (end > pageBreakIndexs[current]) {
    while (pageBreakIndexs[current] < end) {
      current++;
      if (current == pageBreakIndexs.length) {
        current=pageBreakIndexs.length;
        break;
      }
    }
    return current;
  }
  return -1;
}",0.9686221009549796
71843,"public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    INode[] nodeList=currentBuffer.getNodeStack();
  nestCount--;
if (currentTableIndex == nestCount + 1 && currentTableIndex > 0) {
  assert(buffers != null);
  for (int i=0; i < buffers.length - 1; i++) {
    buffers[i].closePage(nodeList);
  }
  buffers[buffers.length - 1].endContainer(content,finished,emitter,visible);
  context.getBufferFactory().refresh();
  currentBuffer=buffers[buffers.length - 1];
  buffers=null;
  currentTableIndex=-1;
}
 else {
  currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount) {
endContainerInPages(content,finished,emitter,visible);
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
int pageIndex=needPageBreak((ICellContent)content);
if (pageIndex >= 0) {
currentBuffer.endContainer(content,false,emitter,visible);
currentBuffer=buffers[pageIndex];
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.END_CONTAINER_EVENT));
isRepeatStatus=false;
}
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.PAGE_CONTENT:
currentBuffer.endContainer(content,finished,emitter,visible);
context.getBufferFactory().refresh();
break;
default :
currentBuffer.endContainer(content,finished,emitter,visible);
break;
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.END_CONTAINER_EVENT));
}
}","public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    INode[] nodeList=currentBuffer.getNodeStack();
  nestCount--;
if (currentTableIndex == nestCount + 1 && currentTableIndex > 0) {
  assert(buffers != null);
  for (int i=0; i < buffers.length - 1; i++) {
    buffers[i].closePage(nodeList);
  }
  buffers[buffers.length - 1].endContainer(content,finished,emitter,visible);
  context.getBufferFactory().refresh();
  currentBuffer=buffers[buffers.length - 1];
  buffers=null;
  currentTableIndex=-1;
}
 else {
  currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount) {
endContainerInPages(content,finished,emitter,visible);
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
int pageIndex=needPageBreak((ICellContent)content);
if (pageIndex >= 0) {
currentBuffer.endContainer(content,false,emitter,visible);
for (int i=currentIndex + 1; i < pageIndex; i++) {
currentBuffer=buffers[i];
repeatCells(emitter);
currentBuffer.startContainer(content,false,emitter,visible);
currentBuffer.endContainer(content,finished,emitter,visible);
}
pageIndex=(pageIndex == pageBreakIndexs.length ? pageIndex - 1 : pageIndex);
currentBuffer=buffers[pageIndex];
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.END_CONTAINER_EVENT));
isRepeatStatus=false;
}
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.PAGE_CONTENT:
currentBuffer.endContainer(content,finished,emitter,visible);
context.getBufferFactory().refresh();
break;
default :
currentBuffer.endContainer(content,finished,emitter,visible);
break;
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.END_CONTAINER_EVENT));
}
}",0.9243528524754964
71844,"void setReportItemReference(String referenceName){
  try {
    itemHandle.setDataSet(null);
    itemHandle.setCube(null);
    if (referenceName == null) {
      itemHandle.setDataBindingReference(null);
    }
 else {
      if (!referenceName.equals(getReportItemReference())) {
        itemHandle.setDataBindingReference((ReportItemHandle)getReportDesignHandle().findElement(referenceName));
      }
    }
  }
 catch (  SemanticException e) {
    WizardBase.showException(e.getLocalizedMessage());
  }
}","void setReportItemReference(String referenceName){
  try {
    if (referenceName == null) {
      itemHandle.setDataBindingReference(null);
    }
 else {
      itemHandle.setDataSet(null);
      itemHandle.setCube(null);
      if (!referenceName.equals(getReportItemReference())) {
        itemHandle.setDataBindingReference((ReportItemHandle)getReportDesignHandle().findElement(referenceName));
      }
    }
  }
 catch (  SemanticException e) {
    WizardBase.showException(e.getLocalizedMessage());
  }
}",0.807920792079208
71845,"void setDataSet(String datasetName){
  try {
    boolean isPreviousDataBindingReference=false;
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      isPreviousDataBindingReference=true;
      itemHandle.setDataBindingReference(null);
    }
    itemHandle.setCube(null);
    if (datasetName == null) {
      clearBindings();
      itemHandle.setDataSet(null);
    }
 else {
      DataSetHandle dataset=getReportDesignHandle().findDataSet(datasetName);
      if (isPreviousDataBindingReference || itemHandle.getDataSet() != dataset) {
        itemHandle.setDataSet(dataset);
        clearBindings();
        generateBindings(generateComputedColumns(dataset));
      }
    }
  }
 catch (  SemanticException e) {
    WizardBase.showException(e.getLocalizedMessage());
  }
}","void setDataSet(String datasetName){
  try {
    boolean isPreviousDataBindingReference=false;
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      isPreviousDataBindingReference=true;
      itemHandle.setDataBindingReference(null);
    }
    itemHandle.setCube(null);
    if (datasetName == null) {
      if (getBoundDataSet() != null) {
        clearBindings();
      }
      itemHandle.setDataSet(null);
    }
 else {
      DataSetHandle dataset=getReportDesignHandle().findDataSet(datasetName);
      if (isPreviousDataBindingReference || itemHandle.getDataSet() != dataset) {
        itemHandle.setDataSet(dataset);
        clearBindings();
        generateBindings(generateComputedColumns(dataset));
      }
    }
  }
 catch (  SemanticException e) {
    WizardBase.showException(e.getLocalizedMessage());
  }
}",0.9518716577540108
71846,"public void handleEvent(Event event){
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        if (header.getMenu() == null) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        header.getMenu().setVisible(true);
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
}
}
 catch (ChartException e1) {
WizardBase.showException(e1.getLocalizedMessage());
}
}
}","public void handleEvent(Event event){
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        if (header.getMenu() == null) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        header.getMenu().setVisible(true);
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
}
}
 catch (ChartException e1) {
WizardBase.showException(e1.getLocalizedMessage());
}
}
}",0.9948354430379748
71847,"@Override protected void setModel(ModuleHandle model){
  super.setModel(model);
  rulerComp.resetReportDesignHandle(model);
}","@Override protected void setModel(ModuleHandle model){
  super.setModel(model);
  if (model != null) {
    rulerComp.resetReportDesignHandle(model);
  }
}",0.8960573476702509
71848,"/** 
 */
public void resetText(){
  if (editObject instanceof DesignElementHandle) {
    DesignElementHandle desHdl=(DesignElementHandle)editObject;
    String name=cmbItemLastSelected.getName();
    setEditorText(desHdl.getStringProperty(name));
  }
}","/** 
 */
public void resetText(){
  if (editObject instanceof DesignElementHandle && cmbItemLastSelected != null) {
    DesignElementHandle desHdl=(DesignElementHandle)editObject;
    String name=cmbItemLastSelected.getName();
    setEditorText(desHdl.getStringProperty(name));
  }
}",0.9420560747663552
71849,"public void partActivated(IWorkbenchPart part){
  fActivePart=part;
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    confirmSava();
    if (needReset) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        getProvider().getReportModuleHandle(getEditorInput(),true);
      }
 else {
        needReset=false;
      }
      needReload=false;
    }
    if (needReload) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        UIUtil.reloadModuleHandleLibraries(getModel());
      }
 else {
        needReload=false;
      }
    }
    if (getEditorInput().exists()) {
      handleActivation();
      SessionHandleAdapter.getInstance().setReportDesignHandle(getModel());
    }
    if (getActivePageInstance() instanceof IReportEditorPage) {
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          IReportEditorPage curPage=(IReportEditorPage)getActivePageInstance();
          if (needReload || needReset) {
            curPage.markPageStale(IPageStaleType.MODEL_RELOAD);
          }
          if (getActivePageInstance() != null) {
            curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
          }
          if (needReload || needReset) {
            updateRelatedViews();
            curPage.markPageStale(IPageStaleType.NONE);
          }
          needReload=false;
          needReset=false;
        }
      }
);
    }
  }
}","public void partActivated(IWorkbenchPart part){
  fActivePart=part;
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    confirmSava();
    final ModuleHandle oldHandle=getModel();
    if (needReset) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        getProvider().getReportModuleHandle(getEditorInput(),true);
      }
 else {
        needReset=false;
      }
      needReload=false;
    }
    if (needReload) {
      if (MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        UIUtil.reloadModuleHandleLibraries(getModel());
      }
 else {
        needReload=false;
      }
    }
    if (getEditorInput().exists()) {
      handleActivation();
      SessionHandleAdapter.getInstance().setReportDesignHandle(getModel());
    }
    if (getActivePageInstance() instanceof IReportEditorPage) {
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          IReportEditorPage curPage=(IReportEditorPage)getActivePageInstance();
          if (needReload || needReset) {
            curPage.markPageStale(IPageStaleType.MODEL_RELOAD);
          }
          if (getActivePageInstance() != null) {
            curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
          }
          if (needReload || needReset) {
            updateRelatedViews();
            curPage.markPageStale(IPageStaleType.NONE);
          }
          if (needReset) {
            SessionHandleAdapter.getInstance().resetReportDesign(oldHandle,getModel());
            oldHandle.close();
          }
          needReload=false;
          needReset=false;
        }
      }
);
    }
  }
}",0.9647508247959716
71850,"public boolean onBroughtToTop(IReportEditorPage page){
  if (!hasWarning && ReportPlugin.getDefault().getPreferenceStore().getString(ReportPlugin.LIBRARY_WARNING_PREFERENCE).equals(MessageDialogWithToggle.PROMPT)) {
    MessageDialogWithToggle.openInformation(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),false,ReportPlugin.getDefault().getPreferenceStore(),ReportPlugin.LIBRARY_WARNING_PREFERENCE);
    hasWarning=true;
  }
  ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput());
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    doSave(null);
  }
  if (model != null && getModel() != model) {
    Object oldModel=getModel();
    setModel(model);
    rebuildReportDesign(oldModel);
    if (getModel() != null) {
      this.getGraphicalViewer().setContents(getModel());
      hookModelEventManager(getModel());
      markPageStale(IPageStaleType.NONE);
    }
    updateStackActions();
  }
  GraphicalViewer view=getGraphicalViewer();
  if (view != null) {
    UIUtil.resetViewSelection(view,true);
  }
  return true;
}","public boolean onBroughtToTop(IReportEditorPage page){
  if (!hasWarning && ReportPlugin.getDefault().getPreferenceStore().getString(ReportPlugin.LIBRARY_WARNING_PREFERENCE).equals(MessageDialogWithToggle.PROMPT)) {
    MessageDialogWithToggle.openInformation(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),false,ReportPlugin.getDefault().getPreferenceStore(),ReportPlugin.LIBRARY_WARNING_PREFERENCE);
    hasWarning=true;
  }
  ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput());
  boolean reload=false;
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    setModel(null);
    doSave(null);
    reload=true;
  }
  if ((model != null && getModel() != model) || reload) {
    Object oldModel=getModel();
    setModel(model);
    rebuildReportDesign(oldModel);
    if (getModel() != null) {
      this.getGraphicalViewer().setContents(getModel());
      hookModelEventManager(getModel());
      markPageStale(IPageStaleType.NONE);
    }
    updateStackActions();
  }
  GraphicalViewer view=getGraphicalViewer();
  if (view != null) {
    UIUtil.resetViewSelection(view,true);
  }
  return true;
}",0.9690021231422504
71851,"/** 
 * Handles the selection request
 * @param request
 */
protected void handleSelectionChange(ReportRequest request){
  if (request.getSource() == this) {
    return;
  }
  final List list=request.getSelectionModelList();
  if (canSetSelection(list)) {
    setSelection(new StructuredSelection(list));
  }
}","/** 
 * Handles the selection request
 * @param request
 */
protected void handleSelectionChange(ReportRequest request){
  if (request.getSource() == this) {
    return;
  }
  if (getTreeViewer() == null) {
    return;
  }
  final List list=request.getSelectionModelList();
  if (canSetSelection(list)) {
    setSelection(new StructuredSelection(list));
  }
}",0.9267563527653214
71852,"/** 
 * Gets the embedded image
 * @param embeddedImage the embedded image data
 * @return Returns the image,or null if the embedded image doesn't exist.
 */
public Image getEmbeddedImage(ModuleHandle handle,String name){
  String key=generateKey(handle,name);
  EmbeddedImage embeddedImage=handle.findImage(name);
  if (embeddedImage == null) {
    removeCachedImage(key);
    return null;
  }
  Image image=getImageRegistry().get(key);
  if (image != null) {
    return image;
  }
  InputStream in=null;
  try {
    if (key.toLowerCase().endsWith(""String_Node_Str"")) {
      JPEGTranscoder transcoder=new JPEGTranscoder();
      transcoder.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,new Float(.8));
      TranscoderInput input=new TranscoderInput(new ByteArrayInputStream(embeddedImage.getData(handle.getModule())));
      input.setURI(generateURL(handle,handle.getFileName()).toString());
      ByteArrayOutputStream ostream=new ByteArrayOutputStream();
      TranscoderOutput output=new TranscoderOutput(ostream);
      try {
        transcoder.transcode(input,output);
      }
 catch (      TranscoderException e) {
      }
      ostream.flush();
      in=new ByteArrayInputStream(ostream.toByteArray());
    }
 else {
      in=new ByteArrayInputStream(embeddedImage.getData(handle.getModule()));
    }
    image=new Image(null,in);
  }
 catch (  Exception e) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
      }
    }
  }
  if (image != null) {
    getImageRegistry().put(key,image);
    if (DesignerConstants.TRACING_IMAGE_MANAGER_IMAGE_ADD) {
      System.out.println(""String_Node_Str"" + key + ""String_Node_Str"");
    }
  }
  return image;
}","/** 
 * Gets the embedded image
 * @param embeddedImage the embedded image data
 * @return Returns the image,or null if the embedded image doesn't exist.
 */
public Image getEmbeddedImage(ModuleHandle handle,String name){
  String key=generateKey(handle,name);
  EmbeddedImage embeddedImage=handle.findImage(name);
  if (embeddedImage == null) {
    removeCachedImage(key);
    return null;
  }
  Image image=getImageRegistry().get(key);
  if (image != null) {
    return image;
  }
  InputStream in=null;
  try {
    if (key.toLowerCase().endsWith(""String_Node_Str"")) {
      JPEGTranscoder transcoder=new JPEGTranscoder();
      transcoder.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,new Float(.8));
      TranscoderInput input=new TranscoderInput(new ByteArrayInputStream(embeddedImage.getData(handle.getModule())));
      input.setURI(generateURL(handle,handle.getFileName()).toString());
      ByteArrayOutputStream ostream=new ByteArrayOutputStream();
      TranscoderOutput output=new TranscoderOutput(ostream);
      try {
        transcoder.transcode(input,output);
      }
 catch (      TranscoderException e) {
      }
      ostream.flush();
      in=new ByteArrayInputStream(ostream.toByteArray());
    }
 else {
      in=new ByteArrayInputStream(embeddedImage.getData(handle.getModule()));
    }
    image=new Image(null,in);
  }
 catch (  Exception e) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
      }
    }
  }
  if (image != null) {
    getImageRegistry().remove(key);
    getImageRegistry().put(key,image);
    if (DesignerConstants.TRACING_IMAGE_MANAGER_IMAGE_ADD) {
      System.out.println(""String_Node_Str"" + key + ""String_Node_Str"");
    }
  }
  return image;
}",0.9896253602305476
71853,"/** 
 * @see org.eclipse.draw2d.Figure#paintFigure(Graphics)
 */
protected void paintFigure(Graphics graphics){
  if (isOpaque()) {
    if (getBorder() instanceof BaseBorder) {
      graphics.fillRectangle(getBounds().getCopy().crop(((BaseBorder)getBorder()).getBorderInsets()));
    }
 else {
      graphics.fillRectangle(getBounds());
    }
  }
  if (getImage() == null) {
    return;
  }
  if (stretch) {
    paintStretched(graphics);
    return;
  }
  int x, y;
  Rectangle area=getClientArea();
switch (alignment & PositionConstants.NORTH_SOUTH) {
case PositionConstants.NORTH:
    y=area.y;
  break;
case PositionConstants.SOUTH:
y=area.y + area.height - size.height;
break;
default :
y=(area.height - size.height) / 2 + area.y;
break;
}
switch (alignment & PositionConstants.EAST_WEST) {
case PositionConstants.EAST:
x=area.x + area.width - size.width;
break;
case PositionConstants.WEST:
x=area.x;
break;
default :
x=(area.width - size.width) / 2 + area.x;
break;
}
graphics.drawImage(getImage(),x,y);
}","/** 
 * @see org.eclipse.draw2d.Figure#paintFigure(Graphics)
 */
protected void paintFigure(Graphics graphics){
  if (isOpaque()) {
    if (getBorder() instanceof BaseBorder) {
      graphics.fillRectangle(getBounds().getCopy().crop(((BaseBorder)getBorder()).getBorderInsets()));
    }
 else {
      graphics.fillRectangle(getBounds());
    }
  }
  if (getImage() == null || getImage().isDisposed()) {
    return;
  }
  if (stretch) {
    paintStretched(graphics);
    return;
  }
  int x, y;
  Rectangle area=getClientArea();
switch (alignment & PositionConstants.NORTH_SOUTH) {
case PositionConstants.NORTH:
    y=area.y;
  break;
case PositionConstants.SOUTH:
y=area.y + area.height - size.height;
break;
default :
y=(area.height - size.height) / 2 + area.y;
break;
}
switch (alignment & PositionConstants.EAST_WEST) {
case PositionConstants.EAST:
x=area.x + area.width - size.width;
break;
case PositionConstants.WEST:
x=area.x;
break;
default :
x=(area.width - size.width) / 2 + area.x;
break;
}
graphics.drawImage(getImage(),x,y);
}",0.986822840409956
71854,"/** 
 * Creates provider's array for font style controls.
 * @return the provider's array(elements are instances of<code>IDescriptorProvider</code>).
 */
private IDescriptorProvider[] createFontStyleProviders(){
  return new IDescriptorProvider[]{new FontStylePropertyDescriptorProvider(StyleHandle.FONT_WEIGHT_PROP,ReportDesignConstants.STYLE_ELEMENT),new FontStylePropertyDescriptorProvider(StyleHandle.FONT_STYLE_PROP,ReportDesignConstants.STYLE_ELEMENT),new FontStylePropertyDescriptorProvider(StyleHandle.TEXT_UNDERLINE_PROP,ReportDesignConstants.STYLE_ELEMENT),new FontStylePropertyDescriptorProvider(StyleHandle.TEXT_LINE_THROUGH_PROP,ReportDesignConstants.STYLE_ELEMENT),new PropertyDescriptorProvider(StyleHandle.TEXT_DIRECTION_PROP,ReportDesignConstants.STYLE_ELEMENT)};
}","/** 
 * Creates provider's array for font style controls.
 * @return the provider's array(elements are instances of<code>IDescriptorProvider</code>).
 */
private IDescriptorProvider[] createFontStyleProviders(){
  return new IDescriptorProvider[]{new FontStylePropertyDescriptorProvider(StyleHandle.FONT_WEIGHT_PROP,ReportDesignConstants.STYLE_ELEMENT),new FontStylePropertyDescriptorProvider(StyleHandle.FONT_STYLE_PROP,ReportDesignConstants.STYLE_ELEMENT),new FontStylePropertyDescriptorProvider(StyleHandle.TEXT_UNDERLINE_PROP,ReportDesignConstants.STYLE_ELEMENT),new FontStylePropertyDescriptorProvider(StyleHandle.TEXT_LINE_THROUGH_PROP,ReportDesignConstants.STYLE_ELEMENT),new PropertyDescriptorProvider(StyleHandle.TEXT_ALIGN_PROP,ReportDesignConstants.STYLE_ELEMENT)};
}",0.9935897435897436
71855,"public void testSafeDivide(){
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  double values[]=new double[]{0,-1.05,10.05,-1};
  for (int i=0; i < values.length; i++) {
    assertEquals(((Number)cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null)).doubleValue(),values[i],0);
  }
}","public void testSafeDivide(){
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  double values[]=new double[]{0,-1.05,10.05,-1,-2};
  for (int i=0; i < values.length; i++) {
    assertEquals(((Number)cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null)).doubleValue(),values[i],0);
  }
}",0.9707927677329624
71856,"/** 
 * @param dividend
 * @param divisor
 * @param ifZero
 * @return
 * @throws BirtException
 */
public static final Object safeDivide(Object dividend,Object divisor,Object ifZero) throws BirtException {
  try {
    Object ret=divide(dividend,divisor);
    if (ret instanceof Double) {
      Double d=(Double)ret;
      return Double.isInfinite(d) ? ifZero : ret;
    }
    return ret;
  }
 catch (  ArithmeticException e) {
    return ifZero;
  }
}","/** 
 * @param dividend
 * @param divisor
 * @param ifZero
 * @return
 * @throws BirtException
 */
public static final Object safeDivide(Object dividend,Object divisor,Object ifZero) throws BirtException {
  try {
    Object ret=divide(dividend,divisor);
    if (ret instanceof Double) {
      Double d=(Double)ret;
      return Double.isNaN(d) || Double.isInfinite(d) ? ifZero : ret;
    }
    return ret;
  }
 catch (  ArithmeticException e) {
    return ifZero;
  }
}",0.979370249728556
71857,"public static String formatNumberPattern(String givenValue){
  String returnStr=""String_Node_Str"";
  if (givenValue.length() == 1) {
    char ch=givenValue.charAt(0);
    if (ch == 'G' || ch == 'g' || ch == 'd' || ch == 'D') {
      returnStr=givenValue + ""String_Node_Str"";
    }
    if (ch == 'C' || ch == 'c') {
      return ""String_Node_Str"";
    }
    if (ch == 'f' || ch == 'F') {
      return ""String_Node_Str"";
    }
    if (ch == 'N' || ch == 'n') {
      return ""String_Node_Str"";
    }
    if (ch == 'p' || ch == 'P') {
      return ""String_Node_Str"";
    }
    if (ch == 'e' || ch == 'E') {
      return ""String_Node_Str"";
    }
    if (ch == 'x' || ch == 'X') {
      returnStr=""String_Node_Str"";
    }
    returnStr=returnStr + givenValue + ""String_Node_Str"";
  }
 else {
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (validType(givenValue)) {
      return givenValue + ""String_Node_Str"";
    }
    int count=givenValue.length();
    boolean flag=false;
    for (int num=0; num < count; num++) {
      char temp=givenValue.charAt(num);
      if (temp == '\'') {
        if (flag) {
          flag=false;
        }
 else {
          char nextChar=givenValue.charAt(num + 1);
          if (nextChar == '\'') {
            returnStr=returnStr + '\'';
            num++;
            flag=false;
          }
 else {
            flag=true;
          }
        }
      }
 else {
        if (flag) {
          returnStr=returnStr + ""String_Node_Str"" + temp;
        }
 else {
          if (specialStr.indexOf(temp) != -1) {
            returnStr=returnStr + ""String_Node_Str"" + temp;
          }
 else {
            returnStr=returnStr + temp;
          }
        }
      }
    }
    returnStr=returnStr + ""String_Node_Str"";
  }
  return returnStr;
}","public static String formatNumberPattern(String givenValue,Locale locale){
  String returnStr=""String_Node_Str"";
  if (givenValue == null) {
    return ""String_Node_Str"";
  }
  if (givenValue.length() == 1) {
    char ch=givenValue.charAt(0);
    if (ch == 'G' || ch == 'g' || ch == 'd' || ch == 'D') {
      return ""String_Node_Str"";
    }
    if (ch == 'C' || ch == 'c') {
      return getCurrencySymbol(locale) + ""String_Node_Str"";
    }
    if (ch == 'f' || ch == 'F') {
      return ""String_Node_Str"";
    }
    if (ch == 'N' || ch == 'n') {
      return ""String_Node_Str"";
    }
    if (ch == 'p' || ch == 'P') {
      return ""String_Node_Str"";
    }
    if (ch == 'e' || ch == 'E') {
      return ""String_Node_Str"";
    }
    if (ch == 'x' || ch == 'X') {
      return ""String_Node_Str"";
    }
  }
 else {
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (givenValue.equals(""String_Node_Str""))     return ""String_Node_Str"";
    if (validType(givenValue)) {
      return givenValue;
    }
    int count=givenValue.length();
    boolean flag=false;
    for (int num=0; num < count; num++) {
      char temp=givenValue.charAt(num);
      if (temp == '\'') {
        if (flag) {
          flag=false;
        }
 else {
          char nextChar=givenValue.charAt(num + 1);
          if (nextChar == '\'') {
            returnStr=returnStr + '\'';
            num++;
            flag=false;
          }
 else {
            flag=true;
          }
        }
      }
 else {
        if (flag) {
          returnStr=returnStr + ""String_Node_Str"" + temp;
        }
 else {
          if (specialStr.indexOf(temp) != -1) {
            returnStr=returnStr + ""String_Node_Str"" + temp;
          }
 else           if (temp == '¤') {
            String symbol=getCurrencySymbol(locale);
            returnStr=returnStr + symbol;
          }
 else {
            returnStr=returnStr + temp;
          }
        }
      }
    }
  }
  return returnStr;
}",0.8752908329455561
71858,"public void writeDataFormat(StyleEntry style){
  if (style.getProperty(StyleConstant.DATA_TYPE_PROP) == Data.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
  if (style.getProperty(StyleConstant.DATA_TYPE_PROP) == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    String numberStyle=style.getProperty(StyleConstant.NUMBER_FORMAT_PROP);
    numberStyle=ExcelUtil.formatNumberPattern(numberStyle);
    writer.attribute(""String_Node_Str"",numberStyle);
    writer.closeTag(""String_Node_Str"");
  }
}","public void writeDataFormat(StyleEntry style){
  if (style.getProperty(StyleConstant.DATA_TYPE_PROP) == Data.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
  if (style.getProperty(StyleConstant.DATA_TYPE_PROP) == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    String numberStyle=style.getProperty(StyleConstant.NUMBER_FORMAT_PROP);
    writer.attribute(""String_Node_Str"",numberStyle);
    writer.closeTag(""String_Node_Str"");
  }
}",0.8575342465753425
71859,"public Data createData(Object txt,StyleEntry entry){
  String type=Data.STRING;
  if (Data.NUMBER.equals(ExcelUtil.getType(txt))) {
    String format=ExcelUtil.getPattern(txt,entry.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
    entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,format);
    type=Data.NUMBER;
  }
 else   if (Data.DATE.equals(ExcelUtil.getType(txt))) {
    String format=ExcelUtil.getPattern(txt,entry.getProperty(StyleConstant.DATE_FORMAT_PROP));
    entry.setProperty(StyleConstant.DATE_FORMAT_PROP,format);
    type=Data.DATE;
  }
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,type);
  return new Data(txt,entry,type,getCurrentContainer());
}","public Data createData(Object txt,StyleEntry entry){
  String type=Data.STRING;
  Locale locale=emitter.getLocale();
  if (Data.NUMBER.equals(ExcelUtil.getType(txt))) {
    String format=ExcelUtil.getPattern(txt,entry.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
    format=ExcelUtil.formatNumberPattern(format,locale);
    entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,format);
    type=Data.NUMBER;
  }
 else   if (Data.DATE.equals(ExcelUtil.getType(txt))) {
    String format=ExcelUtil.getPattern(txt,entry.getProperty(StyleConstant.DATE_FORMAT_PROP));
    entry.setProperty(StyleConstant.DATE_FORMAT_PROP,format);
    type=Data.DATE;
  }
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,type);
  return new Data(txt,entry,type,getCurrentContainer());
}",0.9344490934449092
71860,"/** 
 * @param queryResults
 * @param queryScope
 * @throws DataException 
 */
private ResultIterator(QueryResults queryResults,ExprManager exprManager,Scriptable queryScope,Scriptable parentScope) throws DataException {
  this.queryResults=queryResults;
  this.exprManager=exprManager;
  this.queryScope=queryScope;
  this.jsDummyRowObject=new JSDummyRowObject(exprManager,queryScope,parentScope);
  queryScope.put(""String_Node_Str"",queryScope,jsDummyRowObject);
  this.getRdSaveUtil().doSaveStart();
}","/** 
 * @param queryResults
 * @param queryScope
 * @throws BirtException 
 */
private ResultIterator(QueryResults queryResults,ExprManager exprManager,Scriptable queryScope,Scriptable parentScope) throws BirtException {
  this.queryResults=queryResults;
  this.exprManager=exprManager;
  this.queryScope=queryScope;
  this.jsDummyRowObject=new JSDummyRowObject(exprManager,queryScope,parentScope);
  queryScope.put(""String_Node_Str"",queryScope,jsDummyRowObject);
  this.getRdSaveUtil().doSaveStart();
  exprValueMap=new HashMap();
  Map exprMap=getBindingMap(exprManager.getBindingExprs());
  Iterator it=exprMap.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Entry)it.next();
    String exprName=(String)entry.getKey();
    IBaseExpression baseExpr=(IBaseExpression)entry.getValue();
    Object exprValue=ExprEvaluateUtil.evaluateRawExpression(baseExpr,queryScope);
    exprValueMap.put(exprName,exprValue);
  }
  this.getRdSaveUtil().doSaveExpr(exprValueMap);
}",0.6648757555406313
71861,"public Object getValue(String name) throws BirtException {
  checkOpened();
  if (exprManager.getExpr(name) == null)   throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name);
  if (exprValueMap == null) {
    exprValueMap=new HashMap();
    Map realValueMap=new HashMap();
    Map exprMap=getBindingMap(exprManager.getBindingExprs());
    Iterator it=exprMap.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry=(Entry)it.next();
      String exprName=(String)entry.getKey();
      IBaseExpression baseExpr=(IBaseExpression)entry.getValue();
      Object exprValue=ExprEvaluateUtil.evaluateRawExpression(baseExpr,queryScope);
      exprValueMap.put(exprName,exprValue);
      if (exprValue instanceof BirtException == false)       realValueMap.put(exprName,exprValue);
    }
    this.getRdSaveUtil().doSaveExpr(exprValueMap);
  }
  return exprValueMap.get(name);
}","public Object getValue(String name) throws BirtException {
  checkOpened();
  if (exprManager.getExpr(name) == null)   throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name);
  return exprValueMap.get(name);
}",0.3752212389380531
71862,"/** 
 * This method is invoked when the find button is clicked It populates the Available Data Base obecets ( in the Tree control )
 */
protected void populateAvailableDbObjects(){
  DataSetDesign dataSetDesign=getDataSetDesign();
  DataSourceDesign curDataSourceDesign=dataSetDesign.getDataSourceDesign();
  if (curDataSourceDesign == prevDataSourceDesign) {
    if ((cachedSearchTxt == searchTxt.getText() || (cachedSearchTxt != null && cachedSearchTxt.equals(searchTxt.getText()))) && (cachedDbType == getSelectedDbType() || (cachedDbType != null && cachedDbType.equals(getSelectedDbType())))) {
      if (schemaList != null && schemaList.size() > 0) {
        if (cachedSchemaComboIndex == schemaCombo.getSelectionIndex()) {
          return;
        }
      }
 else       return;
    }
  }
  removeAllAvailableDbObjects();
  setRootElement();
  setRefreshInfo();
  if (isSchemaSupported) {
    populateSchemaList();
  }
 else {
    populateTableList();
  }
  addFetchDbObjectListener();
  if (rootNode != null) {
    selectNode(rootNode);
  }
}","/** 
 * This method is invoked when the find button is clicked It populates the Available Data Base obecets ( in the Tree control )
 */
protected void populateAvailableDbObjects(boolean applyFilter){
  DataSetDesign dataSetDesign=getDataSetDesign();
  DataSourceDesign curDataSourceDesign=dataSetDesign.getDataSourceDesign();
  if (curDataSourceDesign == prevDataSourceDesign) {
    if ((cachedSearchTxt == searchTxt.getText() || (cachedSearchTxt != null && cachedSearchTxt.equals(searchTxt.getText()))) && (cachedDbType == getSelectedDbType() || (cachedDbType != null && cachedDbType.equals(getSelectedDbType()))) && cachedShowSystemTable == (showSystemTableCheckBox.getEnabled() && showSystemTableCheckBox.getSelection()) && cachedUseQuoteString == (identifierQuoteStringCheckBox.getEnabled() && identifierQuoteStringCheckBox.getSelection())) {
      if (schemaList != null && schemaList.size() > 0) {
        if (cachedSchemaComboIndex == schemaCombo.getSelectionIndex()) {
          return;
        }
      }
 else       return;
    }
  }
  removeAllAvailableDbObjects();
  cachedDbType=this.getSelectedDbType();
  cachedShowSystemTable=showSystemTableCheckBox.getEnabled() && showSystemTableCheckBox.getSelection();
  cachedUseQuoteString=identifierQuoteStringCheckBox.getEnabled() && identifierQuoteStringCheckBox.getSelection();
  setRootElement();
  setRefreshInfo();
  if (isSchemaSupported) {
    populateSchemaList(applyFilter);
  }
 else {
    populateTableList();
  }
  addFetchDbObjectListener();
  if (rootNode != null) {
    selectNode(rootNode);
  }
}",0.8016813144822316
71863,"/** 
 * set the page's layout
 */
private void setPageLayout(){
  removeAllAvailableDbObjects();
  enableSchemaComponent(isSchemaSupported);
  setRootElement();
  sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(this.getDataSetDesign().getDataSourceDesign());
  populateAvailableDbObjects();
  try {
    if (metaDataProvider.getConnection() == null || this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)     return;
    MetaDataRetriever retriever=new MetaDataRetriever(this.odaConnectionProvider,this.getDataSetDesign().getQueryText(),this.getDataSetDesign().getOdaExtensionDataSetId());
    IResultSetMetaData rsMeta=retriever.getResultSetMetaData();
    if (rsMeta == null) {
      retriever.close();
      return;
    }
    if (this.getDataSetDesign().getPrimaryResultSet() == null) {
      this.shouldUpdateDataSetDesign=true;
      retriever.close();
      return;
    }
    ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
    if (rsMeta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
      this.shouldUpdateDataSetDesign=true;
      retriever.close();
      return;
    }
    for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
      ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
      if (!(cd.getAttributes().getName().equals(rsMeta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == rsMeta.getColumnType(i + 1))) {
        this.shouldUpdateDataSetDesign=true;
        retriever.close();
        return;
      }
    }
    retriever.close();
  }
 catch (  OdaException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
}","/** 
 * set the page's layout
 */
private void setPageLayout(){
  removeAllAvailableDbObjects();
  enableSchemaComponent(isSchemaSupported);
  setRootElement();
  sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(this.getDataSetDesign().getDataSourceDesign());
  populateAvailableDbObjects(false);
  try {
    if (metaDataProvider.getConnection() == null || this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)     return;
    MetaDataRetriever retriever=new MetaDataRetriever(this.odaConnectionProvider,this.getDataSetDesign().getQueryText(),this.getDataSetDesign().getOdaExtensionDataSetId());
    IResultSetMetaData rsMeta=retriever.getResultSetMetaData();
    if (rsMeta == null) {
      retriever.close();
      return;
    }
    if (this.getDataSetDesign().getPrimaryResultSet() == null) {
      this.shouldUpdateDataSetDesign=true;
      retriever.close();
      return;
    }
    ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
    if (rsMeta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
      this.shouldUpdateDataSetDesign=true;
      retriever.close();
      return;
    }
    for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
      ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
      if (!(cd.getAttributes().getName().equals(rsMeta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == rsMeta.getColumnType(i + 1))) {
        this.shouldUpdateDataSetDesign=true;
        retriever.close();
        return;
      }
    }
    retriever.close();
  }
 catch (  OdaException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
}",0.998566102667049
71864,"/** 
 * @param schemaName
 */
private void getSpecificSchema(String schemaName){
  if (!isPageInitialization) {
    if (schemaName.equals(JdbcPlugin.getResourceString(""String_Node_Str"")) || schemaName.trim().length() == 0) {
      getAvailableSchema();
      setMessage(DEFAULT_MESSAGE);
      return;
    }
    if (containsTableInSchema(schemaName,false)) {
      schemaList=new ArrayList();
      schemaList.add(schemaName);
      setMessage(DEFAULT_MESSAGE);
    }
 else {
      schemaList=null;
      setMessage(JdbcPlugin.getResourceString(""String_Node_Str""),WARNING);
    }
  }
 else {
    isPageInitialization=!isPageInitialization;
  }
}","/** 
 * @param schemaName
 */
private void getSpecificSchema(String schemaName,boolean checkEmptySchema){
  if (!isPageInitialization) {
    if (schemaName.equals(JdbcPlugin.getResourceString(""String_Node_Str"")) || schemaName.trim().length() == 0) {
      getAvailableSchema();
      setMessage(DEFAULT_MESSAGE);
      return;
    }
    boolean showSystemTable=showSystemTableCheckBox.isEnabled() && showSystemTableCheckBox.getSelection();
    if (!checkEmptySchema || containsTableInSchema(schemaName,showSystemTable)) {
      schemaList=new ArrayList();
      schemaList.add(schemaName);
      setMessage(DEFAULT_MESSAGE);
    }
 else {
      schemaList=null;
      setMessage(JdbcPlugin.getResourceString(""String_Node_Str""),WARNING);
    }
  }
 else {
    isPageInitialization=!isPageInitialization;
  }
}",0.8823124569855472
71865,"/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createTableSelectionComposite(Composite parent){
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_VERTICAL);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    data.heightHint=150;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      populateEventData(e);
      insertText((String)e.data);
    }
  }
);
  availableDbObjectsTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (event.widget.getClass() != null)       handleAvailabeTreeSelection();
    }
    private void handleAvailabeTreeSelection(){
      TreeItem items[]=availableDbObjectsTree.getSelection();
      for (int i=0; i < items.length; i++) {
        if (items[i].getGrayed()) {
          availableDbObjectsTree.setRedraw(false);
          availableDbObjectsTree.deselectAll();
          availableDbObjectsTree.setRedraw(true);
          availableDbObjectsTree.redraw();
        }
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,(JdbcPlugin.getDefault().getPluginPreferences().getString(DateSetPreferencePage.SCHEMAS_PREFETCH_CONFIG).equals(ENABLED)) ? SWT.READ_ONLY : SWT.DROP_DOWN);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  enableSchemaComponent(isSchemaSupported);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer);
  filterComboViewer.getControl().setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          populateAvailableDbObjects();
        }
      }
);
    }
  }
);
  setupIdentifierQuoteStringCheckBox(selectTableGroup);
  setupShowSystemTableCheckBox(selectTableGroup);
  setRootElement();
  addDragSupportToTree();
  return tablescomposite;
}","/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createTableSelectionComposite(Composite parent){
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_VERTICAL);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    data.heightHint=150;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      populateEventData(e);
      insertText((String)e.data);
    }
  }
);
  availableDbObjectsTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (event.widget.getClass() != null)       handleAvailabeTreeSelection();
    }
    private void handleAvailabeTreeSelection(){
      TreeItem items[]=availableDbObjectsTree.getSelection();
      for (int i=0; i < items.length; i++) {
        if (items[i].getGrayed()) {
          availableDbObjectsTree.setRedraw(false);
          availableDbObjectsTree.deselectAll();
          availableDbObjectsTree.setRedraw(true);
          availableDbObjectsTree.redraw();
        }
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,(JdbcPlugin.getDefault().getPluginPreferences().getString(DateSetPreferencePage.SCHEMAS_PREFETCH_CONFIG).equals(ENABLED)) ? SWT.READ_ONLY : SWT.DROP_DOWN);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  enableSchemaComponent(isSchemaSupported);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer);
  filterComboViewer.getControl().setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          populateAvailableDbObjects(true);
        }
      }
);
    }
  }
);
  setupIdentifierQuoteStringCheckBox(selectTableGroup);
  setupShowSystemTableCheckBox(selectTableGroup);
  setRootElement();
  addDragSupportToTree();
  return tablescomposite;
}",0.9994747899159664
71866,"/** 
 * populate shema list if the schema is supported
 */
protected void populateSchemaList(){
  if (rootNode != null) {
    removeTreeItem(rootNode);
  }
  if (JdbcPlugin.getDefault().getPluginPreferences().getString(DateSetPreferencePage.SCHEMAS_PREFETCH_CONFIG).equals(ENABLED)) {
    getAvailableSchema();
  }
 else {
    getSpecificSchema(schemaCombo.getText().trim());
  }
  if (schemaCombo.getItemCount() < 1) {
    schemaCombo.add(JdbcPlugin.getResourceString(""String_Node_Str""));
    schemaCombo.select(0);
    if (schemaList != null) {
      Iterator it=schemaList.iterator();
      while (it.hasNext())       schemaCombo.add(it.next().toString());
    }
  }
  ArrayList schemaObjectList=new ArrayList();
  if (schemaList != null) {
    int numberOfSchema=0;
    Preferences preferences=JdbcPlugin.getDefault().getPluginPreferences();
    if (preferences.contains(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA)) {
      numberOfSchema=preferences.getInt(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA);
    }
 else {
      numberOfSchema=DateSetPreferencePage.DEFAULT_MAX_NUM_OF_SCHEMA;
      preferences.setValue(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA,numberOfSchema);
    }
    cachedSchemaComboIndex=schemaCombo.getSelectionIndex();
    if (schemaCombo.getSelectionIndex() < 0) {
      String schemaName=schemaCombo.getText().trim();
      if (schemaName.length() != 0) {
        DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
        schemaObjectList.add(schemaObj);
      }
 else       schemaCombo.select(0);
    }
    if (schemaCombo.getSelectionIndex() == 0) {
      for (int i=0, count=0; i < schemaList.size() && count < numberOfSchema; i++) {
        String schemaName=(String)schemaList.get(i);
        if (showSystemTableCheckBox.isEnabled() && showSystemTableCheckBox.getSelection()) {
          if (containsTableInSchema(schemaName,true)) {
            DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
            schemaObjectList.add(schemaObj);
            count++;
          }
        }
 else         if (containsTableInSchema(schemaName,false)) {
          DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
          schemaObjectList.add(schemaObj);
          count++;
        }
      }
    }
 else     if (schemaCombo.getSelectionIndex() > 0) {
      String schemaName=schemaCombo.getItem(schemaCombo.getSelectionIndex());
      DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
      schemaObjectList.add(schemaObj);
    }
  }
  TreeItem[] items=Utility.createTreeItems(rootNode,schemaObjectList,SWT.NONE,schemaImage);
  if (items != null && items.length > 0) {
    availableDbObjectsTree.showItem(items[0]);
  }
}","/** 
 * populate shema list if the schema is supported
 */
protected void populateSchemaList(boolean checkEmptySchema){
  if (rootNode != null) {
    removeTreeItem(rootNode);
  }
  if (JdbcPlugin.getDefault().getPluginPreferences().getString(DateSetPreferencePage.SCHEMAS_PREFETCH_CONFIG).equals(ENABLED)) {
    getAvailableSchema();
  }
 else {
    getSpecificSchema(schemaCombo.getText().trim(),checkEmptySchema);
  }
  if (schemaCombo.getItemCount() < 1) {
    schemaCombo.add(JdbcPlugin.getResourceString(""String_Node_Str""));
    schemaCombo.select(0);
    if (schemaList != null) {
      Iterator it=schemaList.iterator();
      while (it.hasNext())       schemaCombo.add(it.next().toString());
    }
  }
  ArrayList schemaObjectList=new ArrayList();
  if (schemaList != null) {
    int numberOfSchema=0;
    Preferences preferences=JdbcPlugin.getDefault().getPluginPreferences();
    if (preferences.contains(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA)) {
      numberOfSchema=preferences.getInt(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA);
    }
 else {
      numberOfSchema=DateSetPreferencePage.DEFAULT_MAX_NUM_OF_SCHEMA;
      preferences.setValue(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA,numberOfSchema);
    }
    cachedSchemaComboIndex=schemaCombo.getSelectionIndex();
    if (schemaCombo.getSelectionIndex() < 0) {
      String schemaName=schemaCombo.getText().trim();
      if (schemaName.length() != 0) {
        DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
        schemaObjectList.add(schemaObj);
      }
 else       schemaCombo.select(0);
    }
    if (schemaCombo.getSelectionIndex() == 0) {
      for (int i=0, count=0; i < schemaList.size() && count < numberOfSchema; i++) {
        String schemaName=(String)schemaList.get(i);
        if (!checkEmptySchema) {
          DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
          schemaObjectList.add(schemaObj);
          count++;
        }
 else {
          boolean showSystemTable=showSystemTableCheckBox.isEnabled() && showSystemTableCheckBox.getSelection();
          if (containsTableInSchema(schemaName,showSystemTable)) {
            DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
            schemaObjectList.add(schemaObj);
            count++;
          }
        }
      }
    }
 else     if (schemaCombo.getSelectionIndex() > 0) {
      String schemaName=schemaCombo.getItem(schemaCombo.getSelectionIndex());
      DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
      schemaObjectList.add(schemaObj);
    }
  }
  TreeItem[] items=Utility.createTreeItems(rootNode,schemaObjectList,SWT.NONE,schemaImage);
  if (items != null && items.length > 0) {
    availableDbObjectsTree.showItem(items[0]);
  }
}",0.927664079040226
71867,"/** 
 * Sets up the thread context class loader to make sure that Derby works with our class loader
 */
private void initClassLoaders(){
  if (derbyClassLoader == null) {
    derbyClassLoader=new DerbyClassLoader();
  }
  if (derbyClassLoader.isGood()) {
    ClassLoader contextLoader=Thread.currentThread().getContextClassLoader();
    if (contextLoader != null && !(contextLoader instanceof ContextClassLoaderDelegator)) {
      Thread.currentThread().setContextClassLoader(new ContextClassLoaderDelegator(contextLoader,derbyClassLoader));
    }
  }
}","/** 
 * Sets up the thread context class loader to make sure that Derby works with our class loader
 */
private void initClassLoaders(){
  if (derbyClassLoader == null) {
    derbyClassLoader=new DerbyClassLoader();
  }
}",0.5710594315245479
71868,"public int[] getColumnWidths(){
  int length=columnCoordinates.size() - 1;
  int[] columnWidths=new int[length];
  for (int i=0; i < length - 1; i++) {
    columnWidths[i]=columnCoordinates.get(i + 1) - columnCoordinates.get(i);
  }
  return columnWidths;
}","public int[] getColumnWidths(){
  int length=columnCoordinates.size();
  int[] columnWidths=new int[length];
  for (int i=0; i < length - 1; i++) {
    columnWidths[i]=columnCoordinates.get(i + 1) - columnCoordinates.get(i);
  }
  return columnWidths;
}",0.992156862745098
71869,"public Data(final Object txt,final StyleEntry s,final String datatype){
  this.txt=txt;
  this.style=s;
  this.datatype=datatype;
  id=ID++;
}","public Data(final Object txt,final StyleEntry s,final String datatype,XlsContainer container){
  this.txt=txt;
  this.style=s;
  this.datatype=datatype;
  id=ID++;
  this.container=container;
}",0.8477611940298507
71870,"/** 
 * Gets a subset of naxis.
 * @param start
 * @param end
 * @return
 */
public int[] getColumnCoordinatesInRange(int start,int end){
  int startColumnIndex=getColumnIndexByCoordinate(start);
  int endColumnIndex=getColumnIndexByCoordinate(end);
  List<Integer> list=columnCoordinates.subList(startColumnIndex,endColumnIndex + 1);
  Integer[] integerColumnCoordinates=new Integer[list.size()];
  integerColumnCoordinates=list.toArray(integerColumnCoordinates);
  int[] columnCoordinates=new int[integerColumnCoordinates.length];
  for (int i=0; i < columnCoordinates.length; i++) {
    columnCoordinates[i]=integerColumnCoordinates[i].intValue();
  }
  return columnCoordinates;
}","/** 
 * Gets a subset of naxis.
 * @param start
 * @param end
 * @return
 */
public int[] getColumnCoordinatesInRange(int start,int end){
  int startColumnIndex=getColumnIndexByCoordinate(start);
  int endColumnIndex=getColumnIndexByCoordinate(end);
  List<Integer> list=columnCoordinates.subList(startColumnIndex,endColumnIndex + 1);
  int length=list.size();
  int[] columnCoordinates=new int[length];
  for (int i=0; i <= length; i++) {
    columnCoordinates[i]=list.get(i);
  }
  return columnCoordinates;
}",0.7815899581589958
71871,"private void initalize(PageDef page){
  axis=new AxisProcessor();
  axis.addCoordinate(page.contentwidth);
  setCacheSize();
  ContainerSizeInfo rule=new ContainerSizeInfo(0,page.contentwidth);
  cache=new DataCache(MAX_COLUMN,MAX_ROW,emitter);
  engine=new StyleEngine(this);
  containers.push(createContainer(rule,page.style));
}","private void initalize(PageDef page){
  axis=new AxisProcessor();
  axis.addCoordinate(page.contentwidth);
  setCacheSize();
  ContainerSizeInfo rule=new ContainerSizeInfo(0,page.contentwidth);
  cache=new DataCache(MAX_COLUMN,MAX_ROW,emitter);
  engine=new StyleEngine(this);
  containers.push(createContainer(rule,page.style,null));
}",0.992503748125937
71872,"private Data createDateData(Object txt,StyleEntry entry,String timeFormat){
  Locale locale=emitter.getLocale();
  timeFormat=ExcelUtil.parse(timeFormat,locale);
  if (timeFormat.equals(""String_Node_Str"")) {
    if (txt instanceof java.sql.Date) {
      timeFormat=DateTimeUtil.formatDateTime(""String_Node_Str"",locale);
    }
 else     if (txt instanceof java.sql.Time) {
      timeFormat=DateTimeUtil.formatDateTime(""String_Node_Str"",locale);
    }
 else {
      timeFormat=DateTimeUtil.formatDateTime(""String_Node_Str"",locale);
    }
  }
 else {
    timeFormat=DateTimeUtil.formatDateTime(timeFormat,locale);
  }
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,timeFormat);
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.DATE);
  return new Data(txt,entry,Data.DATE);
}","private Data createDateData(Object txt,StyleEntry entry,String timeFormat){
  Locale locale=emitter.getLocale();
  timeFormat=ExcelUtil.parse(timeFormat,locale);
  if (timeFormat.equals(""String_Node_Str"")) {
    if (txt instanceof java.sql.Date) {
      timeFormat=DateTimeUtil.formatDateTime(""String_Node_Str"",locale);
    }
 else     if (txt instanceof java.sql.Time) {
      timeFormat=DateTimeUtil.formatDateTime(""String_Node_Str"",locale);
    }
 else {
      timeFormat=DateTimeUtil.formatDateTime(""String_Node_Str"",locale);
    }
  }
 else {
    timeFormat=DateTimeUtil.formatDateTime(timeFormat,locale);
  }
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,timeFormat);
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.DATE);
  return new Data(txt,entry,Data.DATE,getCurrentContainer());
}",0.9861111111111112
71873,"public XlsContainer createContainer(ContainerSizeInfo sizeInfo,IStyle style){
  return new XlsContainer(engine.createEntry(sizeInfo,style),sizeInfo);
}","public XlsContainer createContainer(ContainerSizeInfo sizeInfo,IStyle style,XlsContainer parent){
  return new XlsContainer(engine.createEntry(sizeInfo,style),sizeInfo,parent);
}",0.917933130699088
71874,"public void addRow(IStyle style){
  XlsTable table=(XlsTable)containers.peek();
  XlsContainer container=createContainer(table.getSizeInfo(),style);
  container.setEmpty(false);
  addContainer(container);
}","public void addRow(IStyle style){
  XlsTable table=(XlsTable)containers.peek();
  XlsContainer container=createContainer(table.getSizeInfo(),style,table);
  container.setEmpty(false);
  addContainer(container);
}",0.985645933014354
71875,"public Data createData(Object txt,StyleEntry entry){
  String type=Data.STRING;
  if (Data.NUMBER.equals(ExcelUtil.getType(txt))) {
    String format=ExcelUtil.getPattern(txt,entry.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
    entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,format);
    type=Data.NUMBER;
  }
 else   if (Data.DATE.equals(ExcelUtil.getType(txt))) {
    String format=ExcelUtil.getPattern(txt,entry.getProperty(StyleConstant.DATE_FORMAT_PROP));
    entry.setProperty(StyleConstant.DATE_FORMAT_PROP,format);
    type=Data.DATE;
  }
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,type);
  return new Data(txt,entry,type);
}","public Data createData(Object txt,StyleEntry entry){
  String type=Data.STRING;
  if (Data.NUMBER.equals(ExcelUtil.getType(txt))) {
    String format=ExcelUtil.getPattern(txt,entry.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
    entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,format);
    type=Data.NUMBER;
  }
 else   if (Data.DATE.equals(ExcelUtil.getType(txt))) {
    String format=ExcelUtil.getPattern(txt,entry.getProperty(StyleConstant.DATE_FORMAT_PROP));
    entry.setProperty(StyleConstant.DATE_FORMAT_PROP,format);
    type=Data.DATE;
  }
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,type);
  return new Data(txt,entry,type,getCurrentContainer());
}",0.9833080424886192
71876,"public void endContainer(){
  XlsContainer container=getCurrentContainer();
  if (container.isEmpty()) {
    Data data=new Data(EMPTY,container.getStyle(),Data.STRING);
    data.setSizeInfo(container.getSizeInfo());
    addData(data);
  }
  engine.removeContainerStyle();
  containers.pop();
}","public void endContainer(){
  XlsContainer container=getCurrentContainer();
  if (container.isEmpty()) {
    Data data=new Data(EMPTY,container.getStyle(),Data.STRING,container);
    data.setSizeInfo(container.getSizeInfo());
    addData(data);
  }
  engine.removeContainerStyle();
  containers.pop();
}",0.9832214765100672
71877,"public void addTable(TableInfo table,IStyle style){
  ContainerSizeInfo parentSizeInfo=getCurrentContainer().getSizeInfo();
  int startCoordinate=parentSizeInfo.getStartCoordinate();
  int[] columnStartCoordinates=new int[table.getColumnCount() + 1];
  columnStartCoordinates[0]=startCoordinate;
  for (int i=1; i <= table.getColumnCount(); i++) {
    columnStartCoordinates[i]=columnStartCoordinates[i - 1] + table.getColumnWidth(i - 1);
  }
  int endCoordinate=parentSizeInfo.getEndCoordinate();
  int[] scale=axis.getColumnCoordinatesInRange(startCoordinate,endCoordinate);
  for (int i=0; i < scale.length - 1; i++) {
    int startPosition=scale[i];
    int endPostion=scale[i + 1];
    int[] range=inRange(startPosition,endPostion,columnStartCoordinates);
    if (range.length > 0) {
      int pos=axis.getColumnIndexByCoordinate(startPosition);
      cache.insertColumns(pos,range.length);
      for (int j=0; j < range.length; j++) {
        axis.addCoordinate(range[j]);
      }
    }
  }
  XlsContainer container=createContainer(parentSizeInfo,style);
  XlsTable tcontainer=new XlsTable(table,container);
  addContainer(tcontainer);
  tables.push(tcontainer);
}","public void addTable(TableInfo table,IStyle style){
  XlsContainer currentContainer=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=currentContainer.getSizeInfo();
  int startCoordinate=parentSizeInfo.getStartCoordinate();
  int endCoordinate=parentSizeInfo.getEndCoordinate();
  int[] columnStartCoordinates=calculateColumnCoordinates(table,startCoordinate,endCoordinate);
  splitColumns(startCoordinate,endCoordinate,columnStartCoordinates);
  createTable(table,style,currentContainer,columnStartCoordinates);
}",0.2634376845835794
71878,"public void addCell(int col,int span,IStyle style){
  XlsTable table=tables.peek();
  ContainerSizeInfo cellSizeInfo=table.getColumnSizeInfo(col,span);
  addContainer(createContainer(cellSizeInfo,style));
}","public void addCell(int col,int span,IStyle style){
  XlsTable table=tables.peek();
  ContainerSizeInfo cellSizeInfo=table.getColumnSizeInfo(col,span);
  addContainer(createContainer(cellSizeInfo,style,getCurrentContainer()));
}",0.9493087557603688
71879,"public void endRow(){
  synchronous();
  endContainer();
}","public void endRow(){
  synchronize();
  endContainer();
}",0.9482758620689656
71880,"private void addData(Data data){
  getCurrentContainer().setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getRule().getStartCoordinate());
  int span=axis.getColumnIndexByCoordinate(data.getRule().getEndCoordinate()) - col;
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    addDatatoCache(i,Data.WASTE);
  }
}","private void addData(Data data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getRule().getStartCoordinate());
  int span=axis.getColumnIndexByCoordinate(data.getRule().getEndCoordinate()) - col;
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    addDatatoCache(i,Data.WASTE);
  }
}",0.8943089430894309
71881,"public static TableInfo createTable(ITableContent table,int width){
  width=getElementWidth(table,width);
  int colcount=table.getColumnCount();
  if (colcount == 0) {
    return null;
  }
  int[] index=new int[colcount];
  int know=0;
  List unmount=new ArrayList();
  for (int i=0; i < colcount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      unmount.add(new Integer(i));
    }
 else {
      try {
        index[i]=ExcelUtil.covertDimensionType(value,width);
        know+=index[i];
      }
 catch (      IllegalArgumentException ex) {
        unmount.add(new Integer(i));
      }
    }
  }
  int left=width - know;
  if (left > 0 && unmount.size() == 0) {
    index[index.length - 1]=index[index.length - 1] + left;
    return new DefaultTableInfo(index);
  }
 else   if (left < 0) {
    return new DefaultTableInfo(split(width,colcount));
  }
 else   if (left > 0 && unmount.size() > 0) {
    int[] size=split(left,unmount.size());
    Iterator iter=unmount.iterator();
    int i=0;
    while (iter.hasNext()) {
      int pos=((Integer)iter.next()).intValue();
      index[pos]=size[i];
      i++;
    }
    return new DefaultTableInfo(index);
  }
 else {
    return new DefaultTableInfo(index);
  }
}","public static TableInfo createTable(ITableContent table,int width){
  width=getElementWidth(table,width);
  int colcount=table.getColumnCount();
  if (colcount == 0) {
    return null;
  }
  int[] index=new int[colcount];
  int know=0;
  List unmount=new ArrayList();
  for (int i=0; i < colcount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      unmount.add(new Integer(i));
    }
 else {
      try {
        index[i]=ExcelUtil.covertDimensionType(value,width);
        know+=index[i];
      }
 catch (      IllegalArgumentException ex) {
        unmount.add(new Integer(i));
      }
    }
  }
  int left=width - know;
  if (left > 0 && unmount.size() == 0) {
    index[index.length - 1]=index[index.length - 1] + left;
    return new DefaultTableInfo(index);
  }
 else   if (left > 0 && unmount.size() > 0) {
    int[] size=split(left,unmount.size());
    Iterator iter=unmount.iterator();
    int i=0;
    while (iter.hasNext()) {
      int pos=((Integer)iter.next()).intValue();
      index[pos]=size[i];
      i++;
    }
    return new DefaultTableInfo(index);
  }
 else {
    return new DefaultTableInfo(index);
  }
}",0.9652605459057072
71882,"public XlsContainer(StyleEntry style,ContainerSizeInfo sizeInfo){
  this.style=style;
  this.sizeInfo=sizeInfo;
  empty=true;
}","public XlsContainer(StyleEntry style,ContainerSizeInfo sizeInfo,XlsContainer parent){
  this.style=style;
  this.sizeInfo=sizeInfo;
  this.parent=parent;
  empty=true;
}",0.8581081081081081
71883,"private int getParameterType(int i) throws OdaException {
  if (parameterDefn.getParameterType(i) != Types.CHAR)   return parameterDefn.getParameterType(i);
  IParameterMetaData paramMetaData=getParameterMetaData();
  if (paramMetaData != null && paramMetaData.getParameterCount() >= i)   return paramMetaData.getParameterType(i);
 else   return parameterDefn.getParameterType(i);
}","private int getParameterType(int i) throws OdaException {
  if (parameterDefn.getParameterType(i) != Types.CHAR)   return parameterDefn.getParameterType(i);
  try {
    IParameterMetaData paramMetaData=getParameterMetaData();
    if (paramMetaData != null && paramMetaData.getParameterCount() >= i)     return paramMetaData.getParameterType(i);
 else     return parameterDefn.getParameterType(i);
  }
 catch (  OdaException ex) {
    return parameterDefn.getParameterType(i);
  }
}",0.8852838933951332
71884,"/** 
 * Specifies the name of the primary result set.
 * @param resultSetName
 */
public void setPrimaryResultSetName(String resultSetName){
  primaryResultSetName=resultSetName;
}","/** 
 * Specifies the name of the primary result set.
 * @param resultSetName
 */
public void setPrimaryResultSetName(String resultSetName){
  primaryResultSetName=resultSetName == null ? null : (resultSetName.trim().length() == 0 ? null : resultSetName);
}",0.8237986270022883
71885,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),false,false,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.99009900990099
71886,"public void testTotalPercentile() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_PERCENTILE_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(2,ag.getParameterDefn().length);
  assertTrue(!ag.getParameterDefn()[0].isOptional());
  assertFalse(!ag.getParameterDefn()[1].isOptional());
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(0.1)});
  }
  ac.finish();
  Object value=ac.getValue();
  assertEquals(value,new Double(10.0));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(0)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(10));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(1)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(300));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(0.7)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(70));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(0.35)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(17.5));
  try {
    ac.start();
    for (int i=0; i < doubleArray3.length; i++) {
      ac.onRow(new Object[]{doubleArray3[i],new Double(-1)});
    }
    ac.finish();
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    try {
      ac.onRow(new Object[]{doubleArray3[i],new Double(-0.9)});
      fail();
    }
 catch (    DataException e) {
    }
    try {
      ac.onRow(new Object[]{doubleArray3[i],new Double(4.1)});
      fail();
    }
 catch (    DataException e) {
    }
  }
  ac.finish();
  ac=ag.newAccumulator();
  ac.start();
  for (int i=0; i < bigDecimalArray.length; i++) {
    ac.onRow(new Object[]{bigDecimalArray[i],new Double(0.1)});
  }
  ac.finish();
  Object ret=ac.getValue();
  assertTrue(ret instanceof BigDecimal);
  assertTrue(new BigDecimal(""String_Node_Str"").compareTo((BigDecimal)ret) == 0);
}","public void testTotalPercentile() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_PERCENTILE_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(2,ag.getParameterDefn().length);
  assertTrue(!ag.getParameterDefn()[0].isOptional());
  assertFalse(ag.getParameterDefn()[1].isOptional());
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(0.1)});
  }
  ac.finish();
  Object value=ac.getValue();
  assertEquals(value,new Double(10.0));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(0)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(10));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(1)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(300));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(0.7)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(70));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(0.35)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(17.5));
  try {
    ac.start();
    for (int i=0; i < doubleArray3.length; i++) {
      ac.onRow(new Object[]{doubleArray3[i],new Double(-1)});
    }
    ac.finish();
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    try {
      ac.onRow(new Object[]{doubleArray3[i],new Double(-0.9)});
      fail();
    }
 catch (    DataException e) {
    }
    try {
      ac.onRow(new Object[]{doubleArray3[i],new Double(4.1)});
      fail();
    }
 catch (    DataException e) {
    }
  }
  ac.finish();
  ac=ag.newAccumulator();
  ac.start();
  for (int i=0; i < bigDecimalArray.length; i++) {
    ac.onRow(new Object[]{bigDecimalArray[i],new Double(0.1)});
  }
  ac.finish();
  Object ret=ac.getValue();
  assertTrue(ret instanceof BigDecimal);
  assertTrue(new BigDecimal(""String_Node_Str"").compareTo((BigDecimal)ret) == 0);
}",0.9997886281969984
71887,"/** 
 * Get the evaluated result by the ScriptExpression
 * @param aggrIndex
 * @param aggrInfo
 * @param i
 * @throws DataException
 */
private void evaluateArgsValue(int aggrIndex,IAggrInfo aggrInfo,int i) throws DataException {
  IBaseExpression argExpr=aggrInfo.getArgument()[i];
  checkExpression(aggrInfo,argExpr);
  try {
    aggrArgs[aggrIndex][i]=ExprEvaluateUtil.evaluateValue(argExpr,this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * Get the evaluated result by the ScriptExpression
 * @param aggrIndex
 * @param aggrInfo
 * @param i
 * @throws DataException
 */
private void evaluateArgsValue(int aggrIndex,IAggrInfo aggrInfo,int i) throws DataException {
  if (i >= aggrInfo.getArgument().length) {
    return;
  }
  IBaseExpression argExpr=aggrInfo.getArgument()[i];
  checkExpression(aggrInfo,argExpr);
  try {
    aggrArgs[aggrIndex][i]=ExprEvaluateUtil.evaluateValue(argExpr,this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9533437013996888
71888,"/** 
 * It is not going to get the coordinate, but the colId relative to this coordinate. Gets the colId of the given coordinate point
 * @param value	 the coordinate point
 * @return the colId
 */
public int getColumnIndexByCoordinate(int value){
  int index=columnCoordinates.indexOf(new Integer(value));
  return (index == -1) ? 0 : index;
}","/** 
 * It is not going to get the coordinate, but the colId relative to this coordinate. Gets the colId of the given coordinate point
 * @param value	 the coordinate point
 * @return the colId
 */
public int getColumnIndexByCoordinate(int value){
  int index=columnCoordinates.indexOf(value);
  return (index == -1) ? 0 : index;
}",0.965925925925926
71889,"/** 
 * Gets a subset of naxis.
 * @param start
 * @param end
 * @return
 */
public int[] getColumnCoordinatesInRange(int start,int end){
  int startColumnIndex=getColumnIndexByCoordinate(start);
  int endColumnIndex=getColumnIndexByCoordinate(end);
  List<Integer> list=columnCoordinates.subList(startColumnIndex,endColumnIndex + 1);
  int length=list.size();
  int[] columnCoordinates=new int[length];
  for (int i=0; i <= length; i++) {
    columnCoordinates[i]=list.get(i);
  }
  return columnCoordinates;
}","/** 
 * Gets a subset of naxis.
 * @param start
 * @param end
 * @return
 */
public int[] getColumnCoordinatesInRange(int start,int end){
  int startColumnIndex=getColumnIndexByCoordinate(start);
  int endColumnIndex=getColumnIndexByCoordinate(end);
  List<Integer> list=columnCoordinates.subList(startColumnIndex,endColumnIndex + 1);
  int length=list.size();
  int[] columnCoordinates=new int[length];
  for (int i=0; i < length; i++) {
    columnCoordinates[i]=list.get(i);
  }
  return columnCoordinates;
}",0.9990205680705192
71890,"public void addDateTime(Object txt,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  ContainerSizeInfo rule=getCurrentContainer().getSizeInfo();
  StyleEntry entry=engine.getStyle(style,rule);
  Data data=null;
  IDataContent dataContent=(IDataContent)txt;
  Object value=dataContent.getValue();
  Date date=ExcelUtil.getDate(value);
  if (date != null && date.getYear() >= 0) {
    data=createDateData(value,entry,style.getDateTimeFormat());
    data.setHyperlinkDef(link);
    data.setBookmark(bookmark);
    data.setSizeInfo(rule);
    addData(data);
  }
 else {
    addData(dataContent.getText(),style,link,bookmark);
  }
}","public void addDateTime(Object txt,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  ContainerSizeInfo rule=getCurrentContainer().getSizeInfo();
  StyleEntry entry=engine.getStyle(style,rule);
  Data data=null;
  IDataContent dataContent=(IDataContent)txt;
  Object value=dataContent.getValue();
  Date date=ExcelUtil.getDate(value);
  if (date != null && ((date instanceof Time) || date.getYear() >= 0)) {
    data=createDateData(value,entry,style.getDateTimeFormat());
    data.setHyperlinkDef(link);
    data.setBookmark(bookmark);
    data.setSizeInfo(rule);
    addData(data);
  }
 else {
    addData(dataContent.getText(),style,link,bookmark);
  }
}",0.9783616692426584
71891,"public static void addParameterSortBy(QueryDefinition queryDefn,ScalarParameterHandle parameter){
  String sortBy=parameter.getSortByColumn();
  if (sortBy != null) {
    SortDefinition sort=new SortDefinition();
    sort.setColumn(sortBy);
    boolean direction=""String_Node_Str"".equalsIgnoreCase(parameter.getSortDirection());
    sort.setSortDirection(direction ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
    queryDefn.addSort(sort);
  }
}","public static void addParameterSortBy(QueryDefinition queryDefn,ScalarParameterHandle parameter){
  String sortBy=parameter.getSortByColumn();
  if (sortBy != null) {
    SortDefinition sort=new SortDefinition();
    sort.setExpression(sortBy);
    boolean direction=""String_Node_Str"".equalsIgnoreCase(parameter.getSortDirection());
    sort.setSortDirection(direction ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
    queryDefn.addSort(sort);
  }
}",0.9847161572052402
71892,"/** 
 * Get current preview browser.
 * @param forceExternal forece using external browser or not
 * @return browser instance
 */
public static synchronized IBrowser getPreviewBrowser(boolean forceExternal){
  if (!forceExternal && BrowserManager.getInstance().isEmbeddedBrowserPresent()) {
    if (internalBrowser == null) {
      internalBrowser=BrowserManager.getInstance().createBrowser(false);
    }
    return internalBrowser;
  }
  if (browser == null) {
    browser=BrowserManager.getInstance().createBrowser(true);
  }
  return browser;
}","/** 
 * Get current preview browser.
 * @param forceExternal forece using external browser or not
 * @return browser instance
 */
public static synchronized IBrowser getPreviewBrowser(boolean forceExternal){
  if (!forceExternal && BrowserManager.getInstance().isEmbeddedBrowserPresent()) {
    if (internalBrowser == null) {
      internalBrowser=BrowserManager.getInstance().createBrowser(false);
    }
    return internalBrowser;
  }
  if (browser == null) {
    browser=new ExternalWorkbenchBrowser();
  }
  if (browser == null) {
    browser=BrowserManager.getInstance().createBrowser(true);
  }
  return browser;
}",0.9374464438731792
71893,"public static void display(String webappName,String report,Map params){
  startWebApp(webappName);
  try {
    BrowserAccessor.getPreviewBrowser(false).displayURL(createURL(webappName,report,params) + ""String_Node_Str"" + new Random().nextInt());
  }
 catch (  Exception e) {
    LogUtil.logError(e.getLocalizedMessage(),e);
  }
}","public static void display(String webappName,String report,Map params){
  startWebApp(webappName);
  try {
    boolean useExternal=ViewerPlugin.getDefault().getPluginPreferences().getBoolean(BrowserManager.ALWAYS_EXTERNAL_BROWSER_KEY);
    BrowserAccessor.getPreviewBrowser(useExternal).displayURL(createURL(webappName,report,params) + ""String_Node_Str"" + new Random().nextInt());
  }
 catch (  Exception e) {
    LogUtil.logError(e.getLocalizedMessage(),e);
  }
}",0.8020176544766708
71894,"public void render() throws Exception {
  setupRenderOption();
  IContentEmitter emitter=createContentEmitter();
  String format=executionContext.getOutputFormat();
  IReportExecutor executor=new ReportletExecutor(executionContext,offset);
  executor=new SuppressDuplciateReportExecutor(executor);
  executor=new LocalizedReportExecutor(executionContext,executor);
  executionContext.setExecutor(executor);
  initializeContentEmitter(emitter,executor);
  IReportLayoutEngine layoutEngine=createReportLayoutEngine(pagination,renderOptions);
  layoutEngine.setLocale(executionContext.getLocale());
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
    layoutEngine.setPageHandler(handle);
    CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
    outputEmitters.addEmitter(new PDFLayoutEmitter(executor,emitter,renderOptions,executionContext.getLocale(),getTotalPage()));
    outputEmitters.addEmitter(handle.getEmitter());
    emitter=outputEmitters;
  }
  startRender();
  IReportContent report=executor.execute();
  emitter.start(report);
  layoutEngine.layout(executor,report,emitter,false);
  layoutEngine.close();
  emitter.end(report);
  closeRender();
  executor.close();
  outputPageCount=layoutEngine.getPageCount();
}","public void render() throws Exception {
  setupRenderOption();
  IContentEmitter emitter=createContentEmitter();
  String format=executionContext.getOutputFormat();
  IReportExecutor executor=new ReportletExecutor(executionContext,offset);
  executor=new SuppressDuplciateReportExecutor(executor);
  executor=new LocalizedReportExecutor(executionContext,executor);
  executionContext.setExecutor(executor);
  initializeContentEmitter(emitter,executor);
  IReportLayoutEngine layoutEngine=createReportLayoutEngine(pagination,renderOptions);
  layoutEngine.setLocale(executionContext.getLocale());
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
    layoutEngine.setPageHandler(handle);
    CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
    outputEmitters.addEmitter(new PDFLayoutEmitterProxy(executor,emitter,renderOptions,executionContext.getLocale(),getTotalPage()));
    outputEmitters.addEmitter(handle.getEmitter());
    emitter=outputEmitters;
  }
  startRender();
  IReportContent report=executor.execute();
  emitter.start(report);
  layoutEngine.layout(executor,report,emitter,false);
  layoutEngine.close();
  emitter.end(report);
  closeRender();
  executor.close();
  outputPageCount=layoutEngine.getPageCount();
}",0.9981637899375688
71895,"void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  updateRtLFlag();
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      emitter=new PDFLayoutEmitter(executor,emitter,renderOptions,executionContext.getLocale(),0l);
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      layoutPageHandler.addPageHandler(new LayoutPageHandler());
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}","void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  updateRtLFlag();
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      emitter=new PDFLayoutEmitterProxy(executor,emitter,renderOptions,executionContext.getLocale(),0l);
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      layoutPageHandler.addPageHandler(new LayoutPageHandler());
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}",0.9990514133940428
71896,"/** 
 * constructor
 * @param item the table deign
 */
public TableContentWrapper(ITableContent content,List columns){
  super(content);
  this.tableContent=content;
  this.columns=columns;
}","public TableContentWrapper(TableContentWrapper content){
  super(content);
  this.tableContent=content;
  this.columns=content.columns;
}",0.7439024390243902
71897,"protected void repeatHeader(){
  if (!isFirstLayout) {
    IGroupContent group=(IGroupContent)content;
    IBandContent header=group.getHeader();
    if (group.isHeaderRepeat() && header != null) {
      boolean pageBreak=context.allowPageBreak();
      context.setAllowPageBreak(false);
      IPageBuffer buffer=context.getPageBufferManager();
      boolean isRepeated=buffer.isRepeated();
      buffer.setRepeated(true);
      engine.layout(this,header,emitter);
      buffer.setRepeated(isRepeated);
      context.setAllowPageBreak(pageBreak);
    }
  }
  isFirstLayout=false;
}","protected void repeatHeader(){
  if (!isFirstLayout) {
    IGroupContent group=(IGroupContent)content;
    IBandContent header=group.getHeader();
    if (group.isHeaderRepeat() && header != null && !isHeaderBand()) {
      boolean pageBreak=context.allowPageBreak();
      context.setAllowPageBreak(false);
      IPageBuffer buffer=context.getPageBufferManager();
      boolean isRepeated=buffer.isRepeated();
      buffer.setRepeated(true);
      engine.layout(this,header,emitter);
      buffer.setRepeated(isRepeated);
      context.setAllowPageBreak(pageBreak);
    }
  }
  isFirstLayout=false;
}",0.9839119390347164
71898,"public void setEmitter(PDFLayoutEmitter emitter){
  this.emitter=emitter;
}","public void setEmitter(LayoutEmitterAdapter emitter){
  this.emitter=emitter;
}",0.935064935064935
71899,"public void run(){
  TreeViewer treeViewer=getTreeViewer();
  boolean needSelect=false;
  refreshRoot();
  for (  String path : paths) {
    File file=new File(path);
    if (!file.exists()) {
      continue;
    }
    needSelect=true;
    String parent=file.getParent();
    List<String> folders=new ArrayList<String>();
    while (parent != null) {
      folders.add(parent);
      parent=new File(parent).getParent();
    }
    for (int i=folders.size() - 1; i >= 0; i--) {
      treeViewer.expandToLevel(folders.get(i),1);
    }
  }
  if (needSelect) {
    treeViewer.setSelection(new StructuredSelection(paths));
    treeViewer.reveal(paths[0]);
  }
}","public void run(){
  TreeViewer treeViewer=getTreeViewer();
  boolean needSelect=false;
  if (forceRefresh) {
    refreshRoot();
  }
  for (  String path : paths) {
    File file=new File(path);
    if (!file.exists()) {
      continue;
    }
    needSelect=true;
    String parent=file.getParent();
    List<String> folders=new ArrayList<String>();
    while (parent != null) {
      folders.add(parent);
      parent=new File(parent).getParent();
    }
    for (int i=folders.size() - 1; i >= 0; i--) {
      treeViewer.expandToLevel(folders.get(i),1);
    }
  }
  if (needSelect) {
    treeViewer.setSelection(new StructuredSelection(paths));
    treeViewer.reveal(paths[0]);
  }
}",0.9597014925373134
71900,"/** 
 * Sets selections for the specified tree viewer and optionally makes it visible.
 * @param treeViewer the specified tree viewer to select.
 * @param paths the specified paths to select.
 */
public void selectPath(final String[] paths){
  if (paths == null || paths.length <= 0) {
    return;
  }
  Display display=getSite().getShell().getDisplay();
  display.asyncExec(new Runnable(){
    public void run(){
      TreeViewer treeViewer=getTreeViewer();
      boolean needSelect=false;
      refreshRoot();
      for (      String path : paths) {
        File file=new File(path);
        if (!file.exists()) {
          continue;
        }
        needSelect=true;
        String parent=file.getParent();
        List<String> folders=new ArrayList<String>();
        while (parent != null) {
          folders.add(parent);
          parent=new File(parent).getParent();
        }
        for (int i=folders.size() - 1; i >= 0; i--) {
          treeViewer.expandToLevel(folders.get(i),1);
        }
      }
      if (needSelect) {
        treeViewer.setSelection(new StructuredSelection(paths));
        treeViewer.reveal(paths[0]);
      }
    }
  }
);
}","/** 
 * Sets selections for the specified tree viewer and optionally makes it visible.
 * @param treeViewer the specified tree viewer to select.
 * @param paths the specified paths to select.
 */
public void selectPath(final String[] paths,final boolean forceRefresh){
  if (paths == null || paths.length <= 0) {
    return;
  }
  Display display=getSite().getShell().getDisplay();
  display.asyncExec(new Runnable(){
    public void run(){
      TreeViewer treeViewer=getTreeViewer();
      boolean needSelect=false;
      if (forceRefresh) {
        refreshRoot();
      }
      for (      String path : paths) {
        File file=new File(path);
        if (!file.exists()) {
          continue;
        }
        needSelect=true;
        String parent=file.getParent();
        List<String> folders=new ArrayList<String>();
        while (parent != null) {
          folders.add(parent);
          parent=new File(parent).getParent();
        }
        for (int i=folders.size() - 1; i >= 0; i--) {
          treeViewer.expandToLevel(folders.get(i),1);
        }
      }
      if (needSelect) {
        treeViewer.setSelection(new StructuredSelection(paths));
        treeViewer.reveal(paths[0]);
      }
    }
  }
);
}",0.9626521191775074
71901,"public void resourceChanged(ModuleHandle module,ResourceChangeEvent event){
  if (isDisposed()) {
    return;
  }
  String path=event.getChangedResourcePath();
  if (path == null) {
    refreshRoot();
  }
 else {
    selectPath(new String[]{path});
  }
}","public void resourceChanged(ModuleHandle module,ResourceChangeEvent event){
  if (isDisposed()) {
    return;
  }
  String path=event.getChangedResourcePath();
  if (path != null) {
    File file=new File(path);
    String resourcePath=ReportPlugin.getDefault().getResourceFolder();
    File resource=new File(resourcePath);
    if (file.exists() && resource.exists() && file.toURI().toString().indexOf(resource.toURI().toString()) > -1) {
      refreshRoot();
    }
  }
}",0.5179063360881543
71902,"/** 
 * Handles an open event from the viewer. Opens an editor on the selected library.
 * @param event the open event
 * @throws IOException if an I/O error occurs.
 */
protected void handleOpen(OpenEvent event) throws IOException {
  IStructuredSelection selection=(IStructuredSelection)event.getSelection();
  Object element=selection.getFirstElement();
  if (element instanceof ResourceEntryWrapper && ((ResourceEntryWrapper)element).isFile()) {
switch (((ResourceEntryWrapper)element).getType()) {
case ResourceEntryWrapper.LIBRARY:
      File file=null;
    URL url=((ResourceEntryWrapper)element).getURL();
  if (((ResourceEntryWrapper)element).getEntry() instanceof FragmentResourceEntry) {
    file=ResourceAction.convertToFile(Platform.getBundle(IResourceLocator.FRAGMENT_RESOURCE_HOST).getEntry(url.getPath()));
  }
 else {
    file=ResourceAction.convertToFile(url);
  }
if (file != null && file.exists() && file.isFile()) {
  ResourceAction.openLibrary(this,file);
}
 else {
  if (MessageDialog.openConfirm(getSite().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
    refreshRoot();
  }
}
break;
case ResourceEntryWrapper.CSS_STYLE_SHEET:
default :
break;
}
}
}","/** 
 * Handles an open event from the viewer. Opens an editor on the selected library.
 * @param event the open event
 * @throws IOException if an I/O error occurs.
 */
protected void handleOpen(OpenEvent event) throws IOException {
  IStructuredSelection selection=(IStructuredSelection)event.getSelection();
  Object element=selection.getFirstElement();
  if (element instanceof ResourceEntryWrapper && ((ResourceEntryWrapper)element).isFile()) {
switch (((ResourceEntryWrapper)element).getType()) {
case ResourceEntryWrapper.LIBRARY:
      File file=null;
    URL url=((ResourceEntryWrapper)element).getURL();
  if (((ResourceEntryWrapper)element).getEntry() instanceof FragmentResourceEntry) {
    file=ResourceAction.convertToFile(Platform.getBundle(IResourceLocator.FRAGMENT_RESOURCE_HOST).getEntry(url.getPath()));
  }
 else {
    file=ResourceAction.convertToFile(url);
  }
if (file != null && file.exists() && file.isFile()) {
  ResourceAction.openLibrary(this,file,false);
}
 else {
  if (MessageDialog.openConfirm(getSite().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
    refreshRoot();
  }
}
break;
case ResourceEntryWrapper.CSS_STYLE_SHEET:
default :
break;
}
}
}",0.9975429975429976
71903,"/** 
 * Finishes the work.
 * @param libraryName the library's file name.
 * @param templateName the library template's file name.
 * @param monitor the progress monitor to use to display progress and receive requests for cancelation.
 * @throws DesignFileException If the library template is not found, or it contains fatal errors.
 * @throws SemanticException if the value of a property is incorrect.
 * @throws IOException if the file cannot be saved.
 */
private void doFinish(final String libraryName,String templateName,IProgressMonitor monitor) throws DesignFileException, SemanticException, IOException {
  monitor.beginTask(null,IProgressMonitor.UNKNOWN);
  try {
    makeLibrary(libraryName,templateName);
    openLibrary(new File(libraryName));
    fireResourceChanged(libraryName);
  }
  finally {
    monitor.done();
  }
}","/** 
 * Finishes the work.
 * @param libraryName the library's file name.
 * @param templateName the library template's file name.
 * @param monitor the progress monitor to use to display progress and receive requests for cancelation.
 * @throws DesignFileException If the library template is not found, or it contains fatal errors.
 * @throws SemanticException if the value of a property is incorrect.
 * @throws IOException if the file cannot be saved.
 */
private void doFinish(final String libraryName,String templateName,IProgressMonitor monitor) throws DesignFileException, SemanticException, IOException {
  monitor.beginTask(null,IProgressMonitor.UNKNOWN);
  try {
    makeLibrary(libraryName,templateName);
    openLibrary(new File(libraryName),true);
  }
  finally {
    monitor.done();
  }
}",0.9761759315821624
71904,"public synchronized final void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(null,IProgressMonitor.UNKNOWN);
  try {
    if (srcFile != null && targetFile != null && srcFile.exists() && !targetFile.exists()) {
      if (renameFile(srcFile,targetFile)) {
        fireResourceChanged(targetFile.getAbsolutePath());
        refreshWorkspace(srcFile.getAbsolutePath());
      }
    }
  }
  finally {
    monitor.done();
  }
}","public synchronized final void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(null,IProgressMonitor.UNKNOWN);
  try {
    if (srcFile != null && targetFile != null && srcFile.exists() && !targetFile.exists()) {
      if (renameFile(srcFile,targetFile)) {
        fireResourceChanged(targetFile.getAbsolutePath());
        fireResourceChanged(srcFile.getAbsolutePath());
      }
    }
  }
  finally {
    monitor.done();
  }
}",0.9638055842812824
71905,"/** 
 * Notifies model for the reource chang.
 * @param fileName the resource's file name.
 */
protected void fireResourceChanged(String fileName){
  SessionHandleAdapter.getInstance().getSessionHandle().fireResourceChange(new LibraryChangeEvent(fileName));
  refreshWorkspace(fileName);
}","/** 
 * Notifies model for the reource chang.
 * @param fileName the resource's file name.
 */
protected void fireResourceChanged(String fileName){
  IReportResourceSynchronizer synchronizer=ReportPlugin.getDefault().getResourceSynchronizerService();
  if (synchronizer != null) {
    synchronizer.notifyResourceChanged(new ReportResourceChangeEvent(viewerPage,Path.fromOSString(fileName),IReportResourceChangeEvent.NewResource));
  }
}",0.5048275862068966
71906,"/** 
 * Opens an editor on the specified library file, and refresh the specified library explorer page.
 * @param viewer the library explorer page
 * @param file the specified library to open.
 */
public static void openLibrary(final LibraryExplorerTreeViewPage viewer,final File file){
  if (file == null || !file.exists() || !file.isFile()) {
    return;
  }
  Display display;
  if (viewer != null) {
    display=viewer.getSite().getShell().getDisplay();
  }
 else {
    display=Display.getCurrent();
  }
  display.asyncExec(new Runnable(){
    public void run(){
      try {
        IWorkbench workbench=PlatformUI.getWorkbench();
        IWorkbenchWindow window=workbench == null ? null : workbench.getActiveWorkbenchWindow();
        IWorkbenchPage page=window == null ? null : window.getActivePage();
        if (page != null) {
          IEditorInput input=null;
          Object adapter=Platform.getAdapterManager().getAdapter(viewer,IPathEditorInputFactory.class);
          if (adapter instanceof IPathEditorInputFactory) {
            input=((IPathEditorInputFactory)adapter).create(new Path(file.getAbsolutePath()));
          }
          if (input == null) {
            input=new ReportEditorInput(file);
          }
          page.openEditor(input,IReportEditorContants.LIBRARY_EDITOR_ID,true);
        }
      }
 catch (      PartInitException e) {
        ExceptionHandler.handle(e);
      }
 finally {
        viewer.selectPath(new String[]{file.getAbsolutePath()});
      }
    }
  }
);
}","/** 
 * Opens an editor on the specified library file, and refresh the specified library explorer page.
 * @param viewer the library explorer page
 * @param file the specified library to open.
 */
public static void openLibrary(final LibraryExplorerTreeViewPage viewer,final File file,final boolean forceRefresh){
  if (file == null || !file.exists() || !file.isFile()) {
    return;
  }
  Display display;
  if (viewer != null) {
    display=viewer.getSite().getShell().getDisplay();
  }
 else {
    display=Display.getCurrent();
  }
  display.asyncExec(new Runnable(){
    public void run(){
      try {
        IWorkbench workbench=PlatformUI.getWorkbench();
        IWorkbenchWindow window=workbench == null ? null : workbench.getActiveWorkbenchWindow();
        IWorkbenchPage page=window == null ? null : window.getActivePage();
        if (page != null) {
          IEditorInput input=null;
          Object adapter=Platform.getAdapterManager().getAdapter(viewer,IPathEditorInputFactory.class);
          if (adapter instanceof IPathEditorInputFactory) {
            input=((IPathEditorInputFactory)adapter).create(new Path(file.getAbsolutePath()));
          }
          if (input == null) {
            input=new ReportEditorInput(file);
          }
          page.openEditor(input,IReportEditorContants.LIBRARY_EDITOR_ID,true);
        }
      }
 catch (      PartInitException e) {
        ExceptionHandler.handle(e);
      }
 finally {
        viewer.selectPath(new String[]{file.getAbsolutePath()},forceRefresh);
      }
    }
  }
);
}",0.986910994764398
71907,"/** 
 * Creates an instance of <copy>IRunnableWithProgress</copy> for renaming the specified source file to the specified target file.
 * @param srcFile the specified source file.
 * @param targetFile the specified target file.
 * @return the instance of <code>IRunnableWithProgress</code>.
 */
protected IRunnableWithProgress createRenameFileRunnable(final File srcFile,final File targetFile){
  return new IRunnableWithProgress(){
    public synchronized final void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(null,IProgressMonitor.UNKNOWN);
      try {
        if (srcFile != null && targetFile != null && srcFile.exists() && !targetFile.exists()) {
          if (renameFile(srcFile,targetFile)) {
            fireResourceChanged(targetFile.getAbsolutePath());
            refreshWorkspace(srcFile.getAbsolutePath());
          }
        }
      }
  finally {
        monitor.done();
      }
    }
  }
;
}","/** 
 * Creates an instance of <copy>IRunnableWithProgress</copy> for renaming the specified source file to the specified target file.
 * @param srcFile the specified source file.
 * @param targetFile the specified target file.
 * @return the instance of <code>IRunnableWithProgress</code>.
 */
protected IRunnableWithProgress createRenameFileRunnable(final File srcFile,final File targetFile){
  return new IRunnableWithProgress(){
    public synchronized final void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(null,IProgressMonitor.UNKNOWN);
      try {
        if (srcFile != null && targetFile != null && srcFile.exists() && !targetFile.exists()) {
          if (renameFile(srcFile,targetFile)) {
            fireResourceChanged(targetFile.getAbsolutePath());
            fireResourceChanged(srcFile.getAbsolutePath());
          }
        }
      }
  finally {
        monitor.done();
      }
    }
  }
;
}",0.9821519632840388
71908,"/** 
 * @param context
 * @param format
 * @param emitterId
 * @return
 */
public static String getExportFilename(IContext context,String format,String emitterId){
  IFilenameGenerator gen=ParameterAccessor.getFilenameGenerator();
  Map options=ParameterAccessor.makeFilenameGeneratorOptions(context);
  EmitterInfo emitterInfo=ParameterAccessor.getEmitterInfo(emitterId);
  if (emitterInfo != null) {
    options.put(IFilenameGenerator.OPTIONS_EMITTER_INFO,emitterInfo);
  }
  String extensionName=ParameterAccessor.getExtensionName(format);
  if (extensionName != null) {
    options.put(IFilenameGenerator.OPTIONS_TARGET_FILE_EXTENSION,extensionName);
  }
  String baseName=(String)options.get(IFilenameGenerator.OPTIONS_REPORT_DESIGN);
  if (baseName == null || baseName.length() == 0) {
    baseName=(String)options.get(IFilenameGenerator.OPTIONS_REPORT_DOCUMENT);
  }
  baseName=stripFileExtension(baseName);
  return gen.getFilename(baseName,extensionName,IFilenameGenerator.OUTPUT_TYPE_EXPORT,options);
}","/** 
 * @param context
 * @param format
 * @param emitterId
 * @return
 */
public static String getExportFilename(IContext context,String format,String emitterId){
  IFilenameGenerator gen=ParameterAccessor.getFilenameGenerator();
  Map options=ParameterAccessor.makeFilenameGeneratorOptions(context);
  if (emitterId != null) {
    EmitterInfo emitterInfo=ParameterAccessor.getEmitterInfo(emitterId);
    if (emitterInfo != null) {
      options.put(IFilenameGenerator.OPTIONS_EMITTER_INFO,emitterInfo);
    }
  }
  String extensionName=ParameterAccessor.getExtensionName(format);
  if (extensionName != null) {
    options.put(IFilenameGenerator.OPTIONS_TARGET_FILE_EXTENSION,extensionName);
  }
  String baseName=(String)options.get(IFilenameGenerator.OPTIONS_REPORT_DESIGN);
  if (baseName == null || baseName.length() == 0) {
    baseName=(String)options.get(IFilenameGenerator.OPTIONS_REPORT_DOCUMENT);
  }
  baseName=stripFileExtension(baseName);
  return gen.getFilename(baseName,extensionName,IFilenameGenerator.OUTPUT_TYPE_EXPORT,options);
}",0.9810954920019388
71909,"public void writeDataFormat(StyleEntry style){
  if (style.getProperty(StyleConstant.DATA_TYPE_PROP) == Data.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
  if (style.getProperty(StyleConstant.DATA_TYPE_PROP) == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    String numberStyle=style.getProperty(StyleConstant.NUMBER_FORMAT_PROP);
    numberStyle=format(numberStyle);
    writer.attribute(""String_Node_Str"",numberStyle);
    writer.closeTag(""String_Node_Str"");
  }
}","public void writeDataFormat(StyleEntry style){
  if (style.getProperty(StyleConstant.DATA_TYPE_PROP) == Data.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
  if (style.getProperty(StyleConstant.DATA_TYPE_PROP) == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    String numberStyle=style.getProperty(StyleConstant.NUMBER_FORMAT_PROP);
    numberStyle=ExcelUtil.formatNumberPattern(numberStyle);
    writer.attribute(""String_Node_Str"",numberStyle);
    writer.closeTag(""String_Node_Str"");
  }
}",0.9191716766867069
71910,"/** 
 * Returns appropriate expressions if current has aggregations defined in chart.
 * @param helper
 * @param isSharingQuery
 * @return
 */
public List getExpressions(GroupingLookupHelper helper,boolean isSharingQuery){
  if (isSharingQuery) {
    return helper.getExpressions();
  }
  return helper.getExpressionsForAggregate();
}","/** 
 * Returns appropriate expressions if current has aggregations defined in chart.
 * @param helper
 * @param isSharingQuery
 * @return expressions list
 */
public List<String> getExpressions(GroupingLookupHelper helper,boolean isSharingQuery){
  if (isSharingQuery) {
    return helper.getExpressions();
  }
  return helper.getExpressionsForAggregate();
}",0.963924963924964
71911,"/** 
 * Returns the group breaks of specified group level. <code>null</code> means no group breaks.
 * @param groupExp
 * @return group breaks
 */
public int[] getGroupBreaks(int groupLevel);","/** 
 * Returns the group breaks of specified group level. <code>null</code> means no group breaks.
 * @param groupExp
 * @return group breaks
 */
int[] getGroupBreaks(int groupLevel);",0.9813333333333332
71912,"/** 
 * Uses IDataRowExpressionEvaluator to create a ResultSetWrapper
 * @return A wrapper of the chart resultset
 * @throws ChartException
 */
protected ResultSetWrapper mapToChartResultSet(IDataRowExpressionEvaluator idre,Chart cm) throws ChartException {
  ResultSetWrapper rsw=null;
  GroupingLookupHelper lhmLookup=new GroupingLookupHelper(cm,iae,rtc.getULocale());
  List liResultSet=null;
  List co=null;
  if (idre instanceof AbstractGroupedDataRowExpressionEvaluator) {
    co=((AbstractGroupedDataRowExpressionEvaluator)idre).getExpressions(lhmLookup,rtc.isSharingQuery());
  }
 else {
    co=lhmLookup.getExpressions();
  }
  try {
    liResultSet=evaluateRowSet(idre,co.toArray());
  }
 catch (  Exception e) {
    if (e instanceof ChartException) {
      throw (ChartException)e;
    }
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
  }
  final GroupKey[] orthogonalGroupKeys=findGroupKeys(cm,lhmLookup);
  if (idre instanceof IGroupedDataRowExpressionEvaluator && ((IGroupedDataRowExpressionEvaluator)idre).getGroupBreaks(0) != null) {
    int[] groupBreaks=new int[]{};
    if (orthogonalGroupKeys != null && orthogonalGroupKeys.length > 0) {
      groupBreaks=((IGroupedDataRowExpressionEvaluator)idre).getGroupBreaks(0);
    }
    formatBaseSeriesData(cm,lhmLookup,liResultSet);
    rsw=new ResultSetWrapper(lhmLookup,liResultSet,orthogonalGroupKeys,groupBreaks);
  }
 else {
    rsw=new ResultSetWrapper(lhmLookup,liResultSet,orthogonalGroupKeys);
    SeriesDefinition sdBase=null;
    SeriesDefinition sdValue=null;
    boolean bBaseGrouping=false;
    AggregationExpressionHelper aggHelper=new AggregationExpressionHelper();
    if (cm instanceof ChartWithAxes) {
      ChartWithAxes cwa=(ChartWithAxes)cm;
      Axis[] axaBase=cwa.getBaseAxes();
      Axis[] axaOrthogonal=null;
      for (int j=0; j < axaBase.length; j++) {
        sdBase=(SeriesDefinition)axaBase[j].getSeriesDefinitions().get(0);
        axaOrthogonal=cwa.getOrthogonalAxes(axaBase[j],true);
        bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
        for (int i=0; i < axaOrthogonal.length; i++) {
          aggHelper.addSeriesDefinitions(axaOrthogonal[i].getSeriesDefinitions(),lhmLookup);
        }
      }
      sdValue=(SeriesDefinition)cwa.getOrthogonalAxes(axaBase[0],true)[0].getSeriesDefinitions().get(0);
    }
 else     if (cm instanceof ChartWithoutAxes) {
      ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
      sdBase=(SeriesDefinition)cwoa.getSeriesDefinitions().get(0);
      bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
      aggHelper.addSeriesDefinitions(sdBase.getSeriesDefinitions(),lhmLookup);
      sdValue=(SeriesDefinition)sdBase.getSeriesDefinitions().get(0);
    }
    if (bBaseGrouping && aggHelper.getDataDefinitionsForBaseGrouping().size() > 0) {
      aggHelper.addAggregation(sdBase.getGrouping().getAggregateExpression(),aggHelper.getDataDefinitionsForBaseGrouping());
    }
    rsw.applyWholeSeriesSortingNGrouping(sdBase,sdValue,aggHelper.getAggregations(),aggHelper.getDataDefinitions());
    aggHelper.dispose();
  }
  return rsw;
}","/** 
 * Uses IDataRowExpressionEvaluator to create a ResultSetWrapper
 * @return A wrapper of the chart resultset
 * @throws ChartException
 */
protected ResultSetWrapper mapToChartResultSet(IDataRowExpressionEvaluator idre,Chart cm) throws ChartException {
  ResultSetWrapper rsw=null;
  GroupingLookupHelper lhmLookup=new GroupingLookupHelper(cm,iae,rtc.getULocale());
  List liResultSet=null;
  List co=null;
  if (idre instanceof AbstractGroupedDataRowExpressionEvaluator) {
    co=((AbstractGroupedDataRowExpressionEvaluator)idre).getExpressions(lhmLookup,rtc.isSharingQuery());
  }
 else {
    co=lhmLookup.getExpressions();
  }
  try {
    liResultSet=evaluateRowSet(idre,co.toArray());
  }
 catch (  Exception e) {
    if (e instanceof ChartException) {
      throw (ChartException)e;
    }
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
  }
  final GroupKey[] orthogonalGroupKeys=findGroupKeys(cm,lhmLookup);
  if (idre instanceof IGroupedDataRowExpressionEvaluator && ((IGroupedDataRowExpressionEvaluator)idre).getGroupBreaks(0) != null) {
    int[] groupBreaks=new int[]{};
    if (orthogonalGroupKeys != null && orthogonalGroupKeys.length > 0) {
      groupBreaks=((IGroupedDataRowExpressionEvaluator)idre).getGroupBreaks(0);
    }
    formatBaseSeriesData(cm,lhmLookup,liResultSet);
    rsw=new ResultSetWrapper(lhmLookup,liResultSet,orthogonalGroupKeys,groupBreaks);
  }
 else {
    rsw=new ResultSetWrapper(lhmLookup,liResultSet,orthogonalGroupKeys);
    SeriesDefinition sdBase=null;
    SeriesDefinition sdValue=null;
    boolean bBaseGrouping=false;
    AggregationExpressionHelper aggHelper=new AggregationExpressionHelper();
    if (cm instanceof ChartWithAxes) {
      ChartWithAxes cwa=(ChartWithAxes)cm;
      Axis[] axaBase=cwa.getBaseAxes();
      Axis[] axaOrthogonal=null;
      for (int j=0; j < axaBase.length; j++) {
        sdBase=(SeriesDefinition)axaBase[j].getSeriesDefinitions().get(0);
        axaOrthogonal=cwa.getOrthogonalAxes(axaBase[j],true);
        bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
        for (int i=0; i < axaOrthogonal.length; i++) {
          aggHelper.addSeriesDefinitions(axaOrthogonal[i].getSeriesDefinitions(),lhmLookup);
        }
      }
      sdValue=(SeriesDefinition)cwa.getOrthogonalAxes(axaBase[0],true)[0].getSeriesDefinitions().get(0);
    }
 else     if (cm instanceof ChartWithoutAxes) {
      ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
      sdBase=(SeriesDefinition)cwoa.getSeriesDefinitions().get(0);
      bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
      aggHelper.addSeriesDefinitions(sdBase.getSeriesDefinitions(),lhmLookup);
      sdValue=(SeriesDefinition)sdBase.getSeriesDefinitions().get(0);
    }
    if (bBaseGrouping && aggHelper.getDataDefinitionsForBaseGrouping().size() > 0) {
      aggHelper.addAggregation(sdBase.getGrouping().getAggregateExpression(),aggHelper.getDataDefinitionsForBaseGrouping());
    }
    String[] aggregationExp=aggHelper.getAggregations();
    String[] saExpressionKeys=aggHelper.getDataDefinitions();
    if (idre instanceof IGroupedDataRowExpressionEvaluator) {
      if (((IGroupedDataRowExpressionEvaluator)idre).needOptionalGrouping()) {
        rsw.applyValueSeriesGroupingNSorting(sdValue,aggregationExp,saExpressionKeys);
      }
      if (((IGroupedDataRowExpressionEvaluator)idre).needCategoryGrouping()) {
        rsw.applyBaseSeriesSortingAndGrouping(sdBase,aggregationExp,saExpressionKeys);
      }
    }
 else {
      rsw.applyValueSeriesGroupingNSorting(sdValue,aggregationExp,saExpressionKeys);
      rsw.applyBaseSeriesSortingAndGrouping(sdBase,aggregationExp,saExpressionKeys);
    }
    aggHelper.dispose();
  }
  return rsw;
}",0.8905005688282139
71913,"public int[] getGroupBreaks(int groupLevel){
  if (lstBreaks.size() <= 1) {
    if (bWithoutSub && iIndex > 0) {
      int[] breaks=new int[iIndex - 1];
      for (int i=0; i < breaks.length; i++) {
        breaks[i]=i + 1;
      }
      return breaks;
    }
    return new int[0];
  }
  int[] breaks=new int[lstBreaks.size() - 1];
  for (int i=0; i < breaks.length; i++) {
    breaks[i]=((Integer)lstBreaks.get(i)).intValue();
  }
  return breaks;
}","public int[] getGroupBreaks(int groupLevel){
  if (lstBreaks.size() <= 1) {
    if (bWithoutSub && iIndex > 0) {
      int[] breaks=new int[iIndex - 1];
      for (int i=0; i < breaks.length; i++) {
        breaks[i]=i + 1;
      }
      return breaks;
    }
    return new int[0];
  }
  int[] breaks=new int[lstBreaks.size() - 1];
  for (int i=0; i < breaks.length; i++) {
    breaks[i]=lstBreaks.get(i);
  }
  return breaks;
}",0.9749430523917996
71914,"protected void initCubeCursor() throws OLAPException, BirtException {
  if (cubeCursor == null) {
    if (rs != null) {
      cubeCursor=(ICubeCursor)rs.getCubeCursor();
    }
 else {
      cubeCursor=qr.getCubeCursor();
    }
    List edges=cubeCursor.getOrdinateEdge();
    if (edges.size() == 0) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,Messages.getString(""String_Node_Str""));
    }
 else     if (edges.size() == 1) {
      this.mainEdgeCursor=(EdgeCursor)edges.get(0);
      this.subEdgeCursor=null;
    }
 else {
      this.mainEdgeCursor=(EdgeCursor)edges.get(0);
      this.subEdgeCursor=(EdgeCursor)edges.get(1);
      ;
    }
  }
}","protected void initCubeCursor() throws OLAPException, BirtException {
  if (cubeCursor == null) {
    if (rs != null) {
      cubeCursor=(ICubeCursor)rs.getCubeCursor();
    }
 else {
      cubeCursor=qr.getCubeCursor();
    }
    List<EdgeCursor> edges=cubeCursor.getOrdinateEdge();
    if (edges.size() == 0) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,Messages.getString(""String_Node_Str""));
    }
 else     if (edges.size() == 1) {
      this.mainEdgeCursor=edges.get(0);
      this.subEdgeCursor=null;
    }
 else {
      this.mainEdgeCursor=edges.get(0);
      this.subEdgeCursor=edges.get(1);
      ;
    }
  }
}",0.9643387815750372
71915,"/** 
 * Returns format code according to format type and current locale
 */
public String getFormatCode(){
  String formatCode=null;
  if (formatPattern.equals(""String_Node_Str"")) {
    SimpleDateFormat dateFormat=(SimpleDateFormat)SimpleDateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.LONG,com.ibm.icu.text.DateFormat.LONG,locale);
    formatCode=dateFormat.toPattern();
  }
  if (formatPattern.equals(""String_Node_Str"")) {
    SimpleDateFormat dateFormat=(SimpleDateFormat)SimpleDateFormat.getDateInstance(com.ibm.icu.text.DateFormat.LONG,locale);
    formatCode=dateFormat.toPattern();
  }
  if (formatPattern.equals(""String_Node_Str"")) {
    SimpleDateFormat dateFormat=(SimpleDateFormat)SimpleDateFormat.getDateInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
    formatCode=dateFormat.toPattern();
  }
  if (formatPattern.equals(""String_Node_Str"")) {
    SimpleDateFormat dateFormat=(SimpleDateFormat)SimpleDateFormat.getDateInstance(com.ibm.icu.text.DateFormat.SHORT,locale);
    formatCode=dateFormat.toPattern();
  }
  if (formatPattern.equals(""String_Node_Str"")) {
    SimpleDateFormat dateFormat=(SimpleDateFormat)SimpleDateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.LONG,locale);
    formatCode=dateFormat.toPattern();
  }
  if (formatPattern.equals(""String_Node_Str"")) {
    SimpleDateFormat dateFormat=(SimpleDateFormat)SimpleDateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
    formatCode=dateFormat.toPattern();
  }
  if (formatPattern.equals(""String_Node_Str"")) {
    SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
    formatCode=dateFormat.toPattern();
  }
  if (UNFORMATTED.equals(formatPattern) || DATETIME_UNFORMATTED.equals(formatPattern) || DATE_UNFORMATTED.equals(formatPattern)|| TIME_UNFORMATTED.equals(formatPattern)) {
    formatCode=""String_Node_Str"";
  }
  return formatCode;
}","/** 
 * Returns format code according to format type and current locale
 */
public String getFormatCode(){
  if (UNFORMATTED.equals(formatPattern) || DATETIME_UNFORMATTED.equals(formatPattern) || DATE_UNFORMATTED.equals(formatPattern)|| TIME_UNFORMATTED.equals(formatPattern)) {
    return ""String_Node_Str"";
  }
  SimpleDateFormat dateFormat=getFormatter();
  return dateFormat.toPattern();
}",0.1706244503078276
71916,"protected AbstractParseState versionConditionalJumpTo(){
  if (element instanceof OdaDataSource) {
    if (PRIVATE_DRIVER_PROPERTIES_PROP == nameValue || PUBLIC_DRIVER_PROPERTIES_PROP == nameValue) {
      if (handler.isVersion(VersionUtil.VERSION_0)) {
        CompatibleOdaDriverPropertyStructureListState state=new CompatibleOdaDriverPropertyStructureListState(handler,element);
        state.setName(name);
        return state;
      }
    }
  }
 else   if (handler.versionNumber < VersionUtil.VERSION_3_2_0 && BOUND_DATA_COLUMNS_PROP == nameValue && element instanceof ReportItem) {
    CompatibleBoundColumnState state=new CompatibleBoundColumnState(handler,element);
    state.setName(name);
    return state;
  }
  if (handler.versionNumber > VersionUtil.VERSION_3_0_0 && handler.versionNumber <= VersionUtil.VERSION_3_2_1 && (""String_Node_Str"".equals(name)) && (element instanceof GroupElement)) {
    CompatibleGroupBoundColumnsState state=new CompatibleGroupBoundColumnsState(handler,element.getContainer(),(GroupElement)element);
    state.setName(name);
    return state;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_2_4 && element instanceof ScriptDataSet && RESULT_SET_PROP == nameValue) {
    CompatibleRenameListPropertyState state=new CompatibleRenameListPropertyState(handler,element,name);
    state.setName(IDataSetModel.RESULT_SET_HINTS_PROP);
    return state;
  }
  return super.versionConditionalJumpTo();
}","protected AbstractParseState versionConditionalJumpTo(){
  if (element instanceof OdaDataSource) {
    if (PRIVATE_DRIVER_PROPERTIES_PROP == nameValue || PUBLIC_DRIVER_PROPERTIES_PROP == nameValue) {
      if (handler.isVersion(VersionUtil.VERSION_0)) {
        CompatibleOdaDriverPropertyStructureListState state=new CompatibleOdaDriverPropertyStructureListState(handler,element);
        state.setName(name);
        return state;
      }
    }
  }
 else   if (handler.versionNumber < VersionUtil.VERSION_3_2_0 && BOUND_DATA_COLUMNS_PROP == nameValue && element instanceof ReportItem) {
    CompatibleBoundColumnState state=new CompatibleBoundColumnState(handler,element);
    state.setName(name);
    return state;
  }
  if (handler.versionNumber > VersionUtil.VERSION_3_0_0 && handler.versionNumber <= VersionUtil.VERSION_3_2_1 && (""String_Node_Str"".equals(name)) && (element instanceof GroupElement)) {
    CompatibleGroupBoundColumnsState state=new CompatibleGroupBoundColumnsState(handler,element.getContainer(),(GroupElement)element);
    state.setName(name);
    return state;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_2_4 && element instanceof ScriptDataSet && RESULT_SET_PROP == nameValue && struct == null) {
    CompatibleRenameListPropertyState state=new CompatibleRenameListPropertyState(handler,element,name);
    state.setName(IDataSetModel.RESULT_SET_HINTS_PROP);
    return state;
  }
  return super.versionConditionalJumpTo();
}",0.993805918788713
71917,"public Composite createDataDragSource(Composite parent){
  cmpStack=new Composite(parent,SWT.NONE);
  cmpStack.setLayoutData(new GridData(GridData.FILL_BOTH));
  stackLayout=new StackLayout();
  stackLayout.marginHeight=0;
  stackLayout.marginWidth=0;
  cmpStack.setLayout(stackLayout);
  cmpCubeTree=ChartUIUtil.createCompositeWrapper(cmpStack);
  cmpDataPreview=ChartUIUtil.createCompositeWrapper(cmpStack);
  Label label=new Label(cmpCubeTree,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    Label description=new Label(cmpCubeTree,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      description.setLayoutData(gd);
      description.setText(Messages.getString(""String_Node_Str""));
    }
  }
  cubeTreeViewer=new TreeViewer(cmpCubeTree,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  cubeTreeViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)cubeTreeViewer.getTree().getLayoutData()).heightHint=120;
  ViewsTreeProvider provider=new ViewsTreeProvider();
  cubeTreeViewer.setLabelProvider(provider);
  cubeTreeViewer.setContentProvider(provider);
  cubeTreeViewer.setInput(getCube());
  final DragSource dragSource=new DragSource(cubeTreeViewer.getTree(),DND.DROP_COPY);
  dragSource.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  dragSource.addDragListener(new DragSourceListener(){
    private String text=null;
    public void dragFinished(    DragSourceEvent event){
    }
    public void dragSetData(    DragSourceEvent event){
      event.data=text;
    }
    public void dragStart(    DragSourceEvent event){
      text=createCubeExpression();
      if (text == null) {
        event.doit=false;
      }
    }
  }
);
  cubeTreeViewer.getTree().addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      if (event.button == 3 && event.widget instanceof Tree) {
        Tree tree=(Tree)event.widget;
        TreeItem treeItem=tree.getSelection()[0];
        if (treeItem.getData() instanceof LevelHandle || treeItem.getData() instanceof MeasureHandle) {
          tree.setMenu(createMenuManager(treeItem.getData()).createContextMenu(tree));
          tree.getMenu().setVisible(true);
        }
 else {
          tree.setMenu(null);
        }
      }
    }
  }
);
  label=new Label(cmpDataPreview,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    Label description=new Label(cmpDataPreview,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      description.setLayoutData(gd);
      description.setText(Messages.getString(""String_Node_Str""));
    }
  }
  tablePreview=new CustomPreviewTable(cmpDataPreview,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.FULL_SELECTION);
{
    GridData gridData=new GridData(GridData.FILL_BOTH);
    gridData.widthHint=400;
    gridData.heightHint=120;
    tablePreview.setLayoutData(gridData);
    tablePreview.setHeaderAlignment(SWT.LEFT);
    tablePreview.addListener(CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE,this);
  }
  updateDragDataSource();
  return cmpStack;
}","public Composite createDataDragSource(Composite parent){
  cmpStack=new Composite(parent,SWT.NONE);
  cmpStack.setLayoutData(new GridData(GridData.FILL_BOTH));
  stackLayout=new StackLayout();
  stackLayout.marginHeight=0;
  stackLayout.marginWidth=0;
  cmpStack.setLayout(stackLayout);
  cmpCubeTree=ChartUIUtil.createCompositeWrapper(cmpStack);
  cmpDataPreview=ChartUIUtil.createCompositeWrapper(cmpStack);
  Label label=new Label(cmpCubeTree,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    Label description=new Label(cmpCubeTree,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      description.setLayoutData(gd);
      description.setText(Messages.getString(""String_Node_Str""));
    }
  }
  cubeTreeViewer=new TreeViewer(cmpCubeTree,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  cubeTreeViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)cubeTreeViewer.getTree().getLayoutData()).heightHint=120;
  ViewsTreeProvider provider=new ViewsTreeProvider();
  cubeTreeViewer.setLabelProvider(provider);
  cubeTreeViewer.setContentProvider(provider);
  cubeTreeViewer.setInput(getCube());
  final DragSource dragSource=new DragSource(cubeTreeViewer.getTree(),DND.DROP_COPY);
  dragSource.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  dragSource.addDragListener(new DragSourceListener(){
    private String text=null;
    public void dragFinished(    DragSourceEvent event){
    }
    public void dragSetData(    DragSourceEvent event){
      event.data=text;
    }
    public void dragStart(    DragSourceEvent event){
      text=createCubeExpression();
      if (text == null) {
        event.doit=false;
      }
    }
  }
);
  cubeTreeViewer.getTree().addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      if (event.button == 3 && event.widget instanceof Tree) {
        Tree tree=(Tree)event.widget;
        TreeItem treeItem=tree.getSelection()[0];
        if (treeItem.getData() instanceof LevelHandle || treeItem.getData() instanceof MeasureHandle) {
          tree.setMenu(createMenuManager(treeItem.getData()).createContextMenu(tree));
        }
 else {
          tree.setMenu(null);
        }
      }
    }
  }
);
  label=new Label(cmpDataPreview,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    Label description=new Label(cmpDataPreview,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      description.setLayoutData(gd);
      description.setText(Messages.getString(""String_Node_Str""));
    }
  }
  tablePreview=new CustomPreviewTable(cmpDataPreview,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.FULL_SELECTION);
{
    GridData gridData=new GridData(GridData.FILL_BOTH);
    gridData.widthHint=400;
    gridData.heightHint=120;
    tablePreview.setLayoutData(gridData);
    tablePreview.setHeaderAlignment(SWT.LEFT);
    tablePreview.addListener(CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE,this);
  }
  updateDragDataSource();
  return cmpStack;
}",0.9935599820278568
71918,"public void testImportExternalCssStyleSheet() throws Exception {
  designHandle.setBase(PLUGIN_PATH);
  CssStyleSheetHandle stylesheet=loadStyleSheet(getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ fileName);
  assertNotNull(stylesheet);
  SharedStyleHandle style1=stylesheet.findStyle(""String_Node_Str"");
  SharedStyleHandle style2=stylesheet.findStyle(""String_Node_Str"");
  SharedStyleHandle style3=stylesheet.findStyle(""String_Node_Str"");
  assertNotNull(style1);
  assertNull(style2);
  assertNotNull(style3);
  ArrayList styleList=new ArrayList();
  styleList.add(0,style1);
  styleList.add(1,style3);
  assertEquals(2,styleList.size());
  designHandle.importCssStyles(stylesheet,styleList);
  assertEquals(2,designHandle.getStyles().getCount());
}","public void testImportExternalCssStyleSheet() throws Exception {
  designHandle.setBase(PLUGIN_PATH);
  CssStyleSheetHandle stylesheet=loadStyleSheet(getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ fileName);
  assertNotNull(stylesheet);
  SharedStyleHandle style1=stylesheet.findStyle(""String_Node_Str"");
  SharedStyleHandle style2=stylesheet.findStyle(""String_Node_Str"");
  SharedStyleHandle style3=stylesheet.findStyle(""String_Node_Str"");
  assertNotNull(style1);
  assertNull(style2);
  assertNotNull(style3);
  ArrayList styleList=new ArrayList();
  styleList.add(0,style1);
  styleList.add(1,style3);
  assertEquals(2,styleList.size());
  designHandle.importCssStyles(stylesheet,styleList);
  assertEquals(4,designHandle.getStyles().getCount());
}",0.9987113402061856
71919,"public void test_regression_162718() throws Exception {
  createDesign();
  ElementFactory factory=designHandle.getElementFactory();
  TableGroupHandle group=factory.newTableGroup();
  group.setPageBreakAfter(DesignChoiceConstants.PAGE_BREAK_AFTER_AVOID);
  assertEquals(DesignChoiceConstants.PAGE_BREAK_AFTER_AVOID,group.getPageBreakAfter());
  group.setPageBreakBefore(DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS);
  assertEquals(DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS,group.getPageBreakBefore());
  group.setPageBreakInside(DesignChoiceConstants.PAGE_BREAK_INSIDE_AVOID);
  assertEquals(DesignChoiceConstants.PAGE_BREAK_INSIDE_AVOID,group.getPageBreakInside());
}","public void test_regression_162718() throws Exception {
}",0.1553133514986376
71920,"@Override public void run(){
  Collection<File> files=null;
  try {
    files=getSelectedFiles();
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
  }
  if (files == null || files.isEmpty()) {
    return;
  }
  SelectionDialog dialog=new MoveResourceDialog();
  if (dialog.open() == Window.OK) {
    Object[] selected=dialog.getResult();
    if (selected != null && selected.length == 1) {
      ResourceEntry entry=(ResourceEntry)selected[0];
      IPath targetPath=null;
      try {
        targetPath=new Path(convertToFile(entry.getURL()).getAbsolutePath());
      }
 catch (      IOException e) {
        ExceptionHandler.handle(e);
      }
      for (      File file : files) {
        File srcFile=file;
        File targetFile=targetPath.append(file.getName()).toFile();
        if (targetFile.exists()) {
          if (!MessageDialog.openQuestion(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
            return;
          }
          try {
            new ProgressMonitorDialog(getShell()).run(true,true,createDeleteRunnable(Arrays.asList(new File[]{targetFile})));
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.handle(e);
          }
catch (          InterruptedException e) {
            ExceptionHandler.handle(e);
          }
        }
        if (srcFile.renameTo(targetFile)) {
          fireResourceChanged(targetFile.getAbsolutePath());
        }
      }
    }
  }
}","@Override public void run(){
  Collection<File> files=null;
  try {
    files=getSelectedFiles();
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
  }
  if (files == null || files.isEmpty()) {
    return;
  }
  SelectionDialog dialog=new MoveResourceDialog();
  if (dialog.open() == Window.OK) {
    Object[] selected=dialog.getResult();
    if (selected != null && selected.length == 1) {
      ResourceEntry entry=(ResourceEntry)selected[0];
      IPath targetPath=null;
      try {
        targetPath=new Path(convertToFile(entry.getURL()).getAbsolutePath());
      }
 catch (      IOException e) {
        ExceptionHandler.handle(e);
      }
      for (      File file : files) {
        File srcFile=file;
        File targetFile=targetPath.append(file.getName()).toFile();
        if (targetFile.exists()) {
          if (!MessageDialog.openQuestion(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
            return;
          }
          try {
            new ProgressMonitorDialog(getShell()).run(true,true,createDeleteRunnable(Arrays.asList(new File[]{targetFile})));
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.handle(e);
          }
catch (          InterruptedException e) {
            ExceptionHandler.handle(e);
          }
        }
        if (srcFile.renameTo(targetFile)) {
          fireResourceChanged(targetFile.getAbsolutePath());
          refreshWorkspace(srcFile.getAbsolutePath());
        }
      }
    }
  }
}",0.9818421921426214
71921,"@Override public void run(){
  Collection<File> files=null;
  try {
    files=getSelectedFiles();
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
    return;
  }
  if (files == null || files.size() != 1) {
    return;
  }
  File file=files.iterator().next();
  String newName=queryNewResourceName(file);
  if (newName == null || newName.length() <= 0) {
    return;
  }
  File newFile=new Path(file.getAbsolutePath()).removeLastSegments(1).append(newName).toFile();
  if (file.renameTo(newFile)) {
    fireResourceChanged(newFile.getAbsolutePath());
  }
}","@Override public void run(){
  Collection<File> files=null;
  try {
    files=getSelectedFiles();
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
    return;
  }
  if (files == null || files.size() != 1) {
    return;
  }
  File file=files.iterator().next();
  String newName=queryNewResourceName(file);
  if (newName == null || newName.length() <= 0) {
    return;
  }
  File newFile=new Path(file.getAbsolutePath()).removeLastSegments(1).append(newName).toFile();
  if (file.renameTo(newFile)) {
    fireResourceChanged(newFile.getAbsolutePath());
    refreshWorkspace(file.getAbsolutePath());
  }
}",0.9612141652613828
71922,"/** 
 * Notifies model for the reource chang.
 * @param fileName the resource's file name.
 */
protected void fireResourceChanged(String fileName){
  SessionHandleAdapter.getInstance().getSessionHandle().fireResourceChange(new LibraryChangeEvent(fileName));
}","/** 
 * Notifies model for the reource chang.
 * @param fileName the resource's file name.
 */
protected void fireResourceChanged(String fileName){
  SessionHandleAdapter.getInstance().getSessionHandle().fireResourceChange(new LibraryChangeEvent(fileName));
  refreshWorkspace(fileName);
}",0.9452554744525548
71923,"private Time getTime(int hour,int minute,int second){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.set(Calendar.HOUR_OF_DAY,hour);
  calendar.set(Calendar.MINUTE,minute);
  calendar.set(Calendar.SECOND,second);
  return new java.sql.Time(calendar.getTimeInMillis());
}","private Time getTime(int hour,int minute,int second,int millis){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.set(Calendar.HOUR_OF_DAY,hour);
  calendar.set(Calendar.MINUTE,minute);
  calendar.set(Calendar.SECOND,second);
  return new java.sql.Time(calendar.getTimeInMillis());
}",0.9818780889621088
71924,"public void testToSqlTime() throws BirtException {
  Time temp=getTime(11,11,25);
  Time time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time.toString(),temp.toString());
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time.toString(),temp.toString());
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time.toString(),temp.toString());
  temp=getTime(18,11,25);
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time.toString(),temp.toString());
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time,temp);
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time,temp);
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
}","public void testToSqlTime() throws BirtException {
  Time temp=getTime(11,11,25,0);
  Time time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time.toString(),temp.toString());
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time.toString(),temp.toString());
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time.toString(),temp.toString());
  temp=getTime(18,11,25,0);
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time.toString(),temp.toString());
  temp=getTime(18,11,25,12);
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time.toString(),temp.toString());
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time,temp);
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time,temp);
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
}",0.9268041237113402
71925,"/** 
 */
public void testCompare(){
  String[] script=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] result=new boolean[]{true,true,true,true,true,false,false,false,false,false,false,true,true,false,false,false,true,false,true,true,false,false,true,false,true,false,true,true,false,true,false,true,true,true,false,true};
  for (int i=0; i < script.length; i++) {
    assertTrue(((Boolean)cx.evaluateString(scope,script[i],""String_Node_Str"",1,null)).booleanValue() == result[i]);
  }
}","/** 
 */
public void testCompare(){
  String[] script=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] result=new boolean[]{true,true,true,true,true,false,true,false,false,false,false,false,true,true,false,false,false,true,false,true,true,false,false,true,false,true,false,true,true,false,true,false,true,true,true,false,true};
  for (int i=0; i < script.length; i++) {
    assertTrue(((Boolean)cx.evaluateString(scope,script[i],""String_Node_Str"",1,null)).booleanValue() == result[i]);
  }
}",0.9897641299510458
71926,"/** 
 * @param date
 * @return
 */
private static java.sql.Time toSqlTime(Date date){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(date.getTime());
  calendar.set(Calendar.YEAR,1970);
  calendar.set(Calendar.MONTH,0);
  calendar.set(Calendar.DAY_OF_MONTH,1);
  calendar.set(Calendar.MILLISECOND,0);
  return new java.sql.Time(calendar.getTimeInMillis());
}","/** 
 * @param date
 * @return
 */
private static java.sql.Time toSqlTime(Date date){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(date.getTime());
  calendar.set(Calendar.YEAR,1970);
  calendar.set(Calendar.MONTH,0);
  calendar.set(Calendar.DAY_OF_MONTH,1);
  return new java.sql.Time(calendar.getTimeInMillis());
}",0.8350785340314136
71927,"protected Object initialValue(){
  HashMap value=new HashMap();
  String[] dateFormatPattern={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  SimpleDateFormat simpleDateFormatter=null;
  PatternKey patterKey=null;
  for (int i=0; i < dateFormatPattern.length; i++) {
    patterKey=PatternKey.getPatterKey(dateFormatPattern[i]);
    simpleDateFormatter=new SimpleDateFormat(dateFormatPattern[i]);
    simpleDateFormatter.setLenient(false);
    value.put(patterKey,simpleDateFormatter);
  }
  return value;
}","protected Object initialValue(){
  HashMap value=new HashMap();
  String[] dateFormatPattern={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  SimpleDateFormat simpleDateFormatter=null;
  PatternKey patterKey=null;
  for (int i=0; i < dateFormatPattern.length; i++) {
    patterKey=PatternKey.getPatterKey(dateFormatPattern[i]);
    simpleDateFormatter=new SimpleDateFormat(dateFormatPattern[i]);
    simpleDateFormatter.setLenient(false);
    value.put(patterKey,simpleDateFormatter);
  }
  return value;
}",0.9886792452830188
71928,"private boolean isDeprecatedEntry(Map.Entry entry){
  Object key=entry.getKey();
  if (EngineConstants.APPCONTEXT_CLASSLOADER_KEY.equals(key) || EngineConstants.WEBAPP_CLASSPATH_KEY.equals(key) || EngineConstants.PROJECT_CLASSPATH_KEY.equals(key)|| EngineConstants.WORKSPACE_CLASSPATH_KEY.equals(key)) {
    log.log(Level.WARNING,key + ""String_Node_Str"");
    return true;
  }
  return false;
}","private boolean isDeprecatedEntry(Map.Entry entry){
  Object key=entry.getKey();
  if (EngineConstants.APPCONTEXT_CLASSLOADER_KEY.equals(key) || EngineConstants.WEBAPP_CLASSPATH_KEY.equals(key) || EngineConstants.PROJECT_CLASSPATH_KEY.equals(key)|| EngineConstants.WORKSPACE_CLASSPATH_KEY.equals(key)) {
    if (entry.getValue() != getAppContext().get(key)) {
      log.log(Level.WARNING,key + ""String_Node_Str"");
      return true;
    }
  }
  return false;
}",0.9227166276346604
71929,"/** 
 * This map stores font name - Font pairs, used to quickly lookup a Font of a predefined font.
 */
public static Font getFont(String family,int size,int style){
  Font font=null;
  if (size < 0) {
    size=0;
  }
  String key=family + Integer.toString(size) + Integer.toString(style);
  if (JFaceResources.getFontRegistry().hasValueFor(key)) {
    font=JFaceResources.getFontRegistry().get(key);
  }
 else {
    JFaceResources.getFontRegistry().put(key,new FontData[]{new FontData(family,size,style)});
    font=JFaceResources.getFontRegistry().get(key);
  }
  return font;
}","/** 
 * Gets font by FontData, the font will be cached and disposed automatically.
 */
public static Font getFont(FontData fd){
  if (fd == null) {
    return null;
  }
  Font font=null;
  String key=fd.toString();
  if (JFaceResources.getFontRegistry().hasValueFor(key)) {
    font=JFaceResources.getFontRegistry().get(key);
  }
 else {
    JFaceResources.getFontRegistry().put(key,new FontData[]{fd});
    font=JFaceResources.getFontRegistry().get(key);
  }
  return font;
}",0.6041666666666666
71930,"/** 
 * Sets the background and foreground color when the  Column is  deselected.
 */
public void setDeselectedColors(){
  this.setBackgroundColor(Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  this.setForegroundColor(Display.getCurrent().getSystemColor(SWT.COLOR_LIST_FOREGROUND));
}","/** 
 * Sets the background and foreground color when the Column is deselected.
 */
public void setDeselectedColors(){
  this.setBackgroundColor(Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  this.setForegroundColor(Display.getCurrent().getSystemColor(SWT.COLOR_LIST_FOREGROUND));
}",0.9966996699669968
71931,"/** 
 * Sets the background and foreground color when the  Column is selected.
 */
public void setSelectedColors(){
  this.setForegroundColor(Display.getCurrent().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
  this.setBackgroundColor(Display.getCurrent().getSystemColor(SWT.COLOR_LIST_SELECTION));
}","/** 
 * Sets the background and foreground color when the Column is selected.
 */
public void setSelectedColors(){
  this.setForegroundColor(Display.getCurrent().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
  this.setBackgroundColor(Display.getCurrent().getSystemColor(SWT.COLOR_LIST_SELECTION));
}",0.9983416252072967
71932,"/** 
 * Creates the dialog area.
 * @param parent The parent
 */
protected Control createDialogArea(Composite parent){
  parent.setBackground(new Color(null,219,228,238));
  Composite composite=(Composite)super.createDialogArea(parent);
  GridData gd=new GridData();
  gd.widthHint=520;
  gd.heightHint=395;
  composite.setLayoutData(gd);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  layout.verticalSpacing=0;
  layout.horizontalSpacing=0;
  layout.marginHeight=0;
  layout.marginWidth=0;
  composite.setLayout(layout);
  browser=new Browser(composite,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.horizontalSpan=1;
  browser.setLayoutData(gd);
  browser.addCloseWindowListener(new CloseWindowListener(){
    public void close(    final WindowEvent event){
      ((Browser)event.widget).getShell().close();
      List parameters=SessionHandleAdapter.getInstance().getReportDesignHandle().getParameters().getContents();
      if (parameters != null && parameters.size() > 0) {
        setReturnCode(RETURN_CODE_BROWSER_CLOSED);
      }
    }
  }
);
  browser.addStatusTextListener(new StatusTextListener(){
    public void changed(    StatusTextEvent event){
      if (STATUS_CLOSE.equalsIgnoreCase(event.text)) {
        ((Browser)event.widget).getShell().close();
        List parameters=SessionHandleAdapter.getInstance().getReportDesignHandle().getParameters().getContents();
        if (parameters != null && parameters.size() > 0) {
          setReturnCode(RETURN_CODE_BROWSER_CLOSED);
        }
      }
 else       if (STATUS_CANCEL.equalsIgnoreCase(event.text)) {
        ((Browser)event.widget).getShell().close();
      }
    }
  }
);
  display();
  return composite;
}","/** 
 * Creates the dialog area.
 * @param parent The parent
 */
protected Control createDialogArea(Composite parent){
  parent.setBackground(ColorManager.getColor(219,228,238));
  Composite composite=(Composite)super.createDialogArea(parent);
  GridData gd=new GridData();
  gd.widthHint=520;
  gd.heightHint=395;
  composite.setLayoutData(gd);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  layout.verticalSpacing=0;
  layout.horizontalSpacing=0;
  layout.marginHeight=0;
  layout.marginWidth=0;
  composite.setLayout(layout);
  browser=new Browser(composite,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.horizontalSpan=1;
  browser.setLayoutData(gd);
  browser.addCloseWindowListener(new CloseWindowListener(){
    public void close(    final WindowEvent event){
      ((Browser)event.widget).getShell().close();
      List parameters=SessionHandleAdapter.getInstance().getReportDesignHandle().getParameters().getContents();
      if (parameters != null && parameters.size() > 0) {
        setReturnCode(RETURN_CODE_BROWSER_CLOSED);
      }
    }
  }
);
  browser.addStatusTextListener(new StatusTextListener(){
    public void changed(    StatusTextEvent event){
      if (STATUS_CLOSE.equalsIgnoreCase(event.text)) {
        ((Browser)event.widget).getShell().close();
        List parameters=SessionHandleAdapter.getInstance().getReportDesignHandle().getParameters().getContents();
        if (parameters != null && parameters.size() > 0) {
          setReturnCode(RETURN_CODE_BROWSER_CLOSED);
        }
      }
 else       if (STATUS_CANCEL.equalsIgnoreCase(event.text)) {
        ((Browser)event.widget).getShell().close();
      }
    }
  }
);
  display();
  return composite;
}",0.9891717881182324
71933,"private void createCustomPreviewPart(Composite parent){
  Group group;
  if (!isFormStyle())   group=new Group(parent,SWT.NONE);
 else   group=FormWidgetFactory.getInstance().createGroup(parent,""String_Node_Str"");
  group.setText(LABEL_PREVIEW_GROUP);
  if (pageAlignment == PAGE_ALIGN_HORIZONTAL) {
    group.setLayoutData(new GridData(GridData.FILL_BOTH));
    group.setLayout(new GridLayout(1,false));
  }
 else {
    group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    group.setLayout(new GridLayout(2,false));
  }
  FormWidgetFactory.getInstance().createLabel(group,isFormStyle()).setText(LABEL_PREVIEW_DATETIME);
  if (!isFormStyle())   previewTextBox=new Text(group,SWT.SINGLE | SWT.BORDER);
 else   previewTextBox=FormWidgetFactory.getInstance().createText(group,""String_Node_Str"",SWT.SINGLE);
  previewTextBox.setText(defaultDateTime == null ? ""String_Node_Str"" : defaultDateTime);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  if (pageAlignment == PAGE_ALIGN_HORIZONTAL) {
    data.horizontalIndent=10;
  }
  previewTextBox.setLayoutData(data);
  previewTextBox.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDefaultPreviewText(previewTextBox.getText());
      if (hasLoaded) {
        updatePreview();
      }
      if (StringUtil.isBlank(previewTextBox.getText())) {
        guideLabel.setText(""String_Node_Str"");
      }
 else {
        guideLabel.setText(ENTER_DATE_TIME_GUIDE_TEXT);
      }
    }
  }
);
  if (pageAlignment == PAGE_ALIGN_VIRTICAL) {
    FormWidgetFactory.getInstance().createLabel(group,isFormStyle());
  }
  guideLabel=FormWidgetFactory.getInstance().createLabel(group,isFormStyle());
  guideLabel.setText(""String_Node_Str"");
  Font font=JFaceResources.getDialogFont();
  FontData fData=font.getFontData()[0];
  fData.setHeight(fData.getHeight() - 1);
  guideLabel.setFont(new Font(Display.getCurrent(),fData));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalIndent=10;
  guideLabel.setLayoutData(data);
  Label label=FormWidgetFactory.getInstance().createLabel(group,isFormStyle());
  label.setText(LABEL_PREVIEW_LABEL);
  label.setLayoutData(new GridData());
  cusPreviewLabel=FormWidgetFactory.getInstance().createLabel(group,SWT.CENTER | SWT.HORIZONTAL | SWT.VIRTUAL,isFormStyle());
  cusPreviewLabel.setText(""String_Node_Str"");
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=1;
  cusPreviewLabel.setLayoutData(data);
}","private void createCustomPreviewPart(Composite parent){
  Group group;
  if (!isFormStyle())   group=new Group(parent,SWT.NONE);
 else   group=FormWidgetFactory.getInstance().createGroup(parent,""String_Node_Str"");
  group.setText(LABEL_PREVIEW_GROUP);
  if (pageAlignment == PAGE_ALIGN_HORIZONTAL) {
    group.setLayoutData(new GridData(GridData.FILL_BOTH));
    group.setLayout(new GridLayout(1,false));
  }
 else {
    group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    group.setLayout(new GridLayout(2,false));
  }
  FormWidgetFactory.getInstance().createLabel(group,isFormStyle()).setText(LABEL_PREVIEW_DATETIME);
  if (!isFormStyle())   previewTextBox=new Text(group,SWT.SINGLE | SWT.BORDER);
 else   previewTextBox=FormWidgetFactory.getInstance().createText(group,""String_Node_Str"",SWT.SINGLE);
  previewTextBox.setText(defaultDateTime == null ? ""String_Node_Str"" : defaultDateTime);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  if (pageAlignment == PAGE_ALIGN_HORIZONTAL) {
    data.horizontalIndent=10;
  }
  previewTextBox.setLayoutData(data);
  previewTextBox.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDefaultPreviewText(previewTextBox.getText());
      if (hasLoaded) {
        updatePreview();
      }
      if (StringUtil.isBlank(previewTextBox.getText())) {
        guideLabel.setText(""String_Node_Str"");
      }
 else {
        guideLabel.setText(ENTER_DATE_TIME_GUIDE_TEXT);
      }
    }
  }
);
  if (pageAlignment == PAGE_ALIGN_VIRTICAL) {
    FormWidgetFactory.getInstance().createLabel(group,isFormStyle());
  }
  guideLabel=FormWidgetFactory.getInstance().createLabel(group,isFormStyle());
  guideLabel.setText(""String_Node_Str"");
  Font font=JFaceResources.getDialogFont();
  FontData fData=font.getFontData()[0];
  fData.setHeight(fData.getHeight() - 1);
  guideLabel.setFont(FontManager.getFont(fData));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalIndent=10;
  guideLabel.setLayoutData(data);
  Label label=FormWidgetFactory.getInstance().createLabel(group,isFormStyle());
  label.setText(LABEL_PREVIEW_LABEL);
  label.setLayoutData(new GridData());
  cusPreviewLabel=FormWidgetFactory.getInstance().createLabel(group,SWT.CENTER | SWT.HORIZONTAL | SWT.VIRTUAL,isFormStyle());
  cusPreviewLabel.setText(""String_Node_Str"");
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=1;
  cusPreviewLabel.setLayoutData(data);
}",0.9898291293734744
71934,"private void createCustomPreviewPart(Composite parent){
  Group group=new Group(parent,SWT.NONE);
  group.setText(LABEL_PREVIEW_GROUP);
  if (pageAlignment == PAGE_ALIGN_HORIZONTAL) {
    group.setLayoutData(new GridData(GridData.FILL_BOTH));
    group.setLayout(new GridLayout(1,false));
  }
 else {
    group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    group.setLayout(new GridLayout(2,false));
  }
  new Label(group,SWT.NONE).setText(LABEL_PREVIEW_DATETIME);
  previewTextBox=new Text(group,SWT.SINGLE | SWT.BORDER);
  previewTextBox.setText(defaultDateTime);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  if (pageAlignment == PAGE_ALIGN_HORIZONTAL) {
    data.horizontalIndent=10;
  }
  previewTextBox.setLayoutData(data);
  previewTextBox.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDefaultPreviewText(previewTextBox.getText());
      if (hasLoaded) {
        updatePreview();
      }
      if (StringUtil.isBlank(previewTextBox.getText())) {
        guideLabel.setText(""String_Node_Str"");
      }
 else {
        guideLabel.setText(ENTER_DATE_TIME_GUIDE_TEXT);
      }
    }
  }
);
  if (pageAlignment == PAGE_ALIGN_VIRTICAL) {
    new Label(group,SWT.NONE);
  }
  guideLabel=new Label(group,SWT.NONE);
  guideLabel.setText(""String_Node_Str"");
  Font font=JFaceResources.getDialogFont();
  FontData fData=font.getFontData()[0];
  fData.setHeight(fData.getHeight() - 1);
  guideLabel.setFont(new Font(Display.getCurrent(),fData));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalIndent=10;
  guideLabel.setLayoutData(data);
  Label label=new Label(group,SWT.NONE);
  label.setText(LABEL_PREVIEW_LABEL);
  label.setLayoutData(new GridData());
  cusPreviewLabel=new Label(group,SWT.CENTER | SWT.HORIZONTAL | SWT.VIRTUAL);
  cusPreviewLabel.setText(""String_Node_Str"");
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=1;
  cusPreviewLabel.setLayoutData(data);
}","private void createCustomPreviewPart(Composite parent){
  Group group=new Group(parent,SWT.NONE);
  group.setText(LABEL_PREVIEW_GROUP);
  if (pageAlignment == PAGE_ALIGN_HORIZONTAL) {
    group.setLayoutData(new GridData(GridData.FILL_BOTH));
    group.setLayout(new GridLayout(1,false));
  }
 else {
    group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    group.setLayout(new GridLayout(2,false));
  }
  new Label(group,SWT.NONE).setText(LABEL_PREVIEW_DATETIME);
  previewTextBox=new Text(group,SWT.SINGLE | SWT.BORDER);
  previewTextBox.setText(defaultDateTime);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  if (pageAlignment == PAGE_ALIGN_HORIZONTAL) {
    data.horizontalIndent=10;
  }
  previewTextBox.setLayoutData(data);
  previewTextBox.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDefaultPreviewText(previewTextBox.getText());
      if (hasLoaded) {
        updatePreview();
      }
      if (StringUtil.isBlank(previewTextBox.getText())) {
        guideLabel.setText(""String_Node_Str"");
      }
 else {
        guideLabel.setText(ENTER_DATE_TIME_GUIDE_TEXT);
      }
    }
  }
);
  if (pageAlignment == PAGE_ALIGN_VIRTICAL) {
    new Label(group,SWT.NONE);
  }
  guideLabel=new Label(group,SWT.NONE);
  guideLabel.setText(""String_Node_Str"");
  Font font=JFaceResources.getDialogFont();
  FontData fData=font.getFontData()[0];
  fData.setHeight(fData.getHeight() - 1);
  guideLabel.setFont(FontManager.getFont(fData));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalIndent=10;
  guideLabel.setLayoutData(data);
  Label label=new Label(group,SWT.NONE);
  label.setText(LABEL_PREVIEW_LABEL);
  label.setLayoutData(new GridData());
  cusPreviewLabel=new Label(group,SWT.CENTER | SWT.HORIZONTAL | SWT.VIRTUAL);
  cusPreviewLabel.setText(""String_Node_Str"");
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=1;
  cusPreviewLabel.setLayoutData(data);
}",0.98932384341637
71935,"/** 
 * Initializes the list. Sets the list data.
 */
private void initList(){
  list.setFont(new Font(Display.getCurrent(),""String_Node_Str"",8,SWT.NORMAL));
  for (Iterator itor=contents.iterator(); itor.hasNext(); ) {
    IElementDefn defn=(IElementDefn)itor.next();
    list.add(defn.getDisplayName());
  }
}","/** 
 * Initializes the list. Sets the list data.
 */
private void initList(){
  list.setFont(FontManager.getFont(""String_Node_Str"",8,SWT.NORMAL));
  for (Iterator itor=contents.iterator(); itor.hasNext(); ) {
    IElementDefn defn=(IElementDefn)itor.next();
    list.add(defn.getDisplayName());
  }
}",0.937908496732026
71936,"/** 
 * Draws a 3D style line with the specified side, style & width.
 * @param g The graphics object used for drawing
 * @param side the side to draw.
 * @param style the style to draw.
 * @param width the border width array, arranged by {top, bottom, left, right};
 * @param r the rectangle for drawing.
 */
public static void draw3DLine(Graphics g,int side,int style,int[] width,Rectangle r){
  if (width.length <= side || width[side] <= 0) {
    return;
  }
  Color foreColor=g.getForegroundColor();
  Color inSideColor=foreColor;
  Color outSideColor=foreColor;
  Color darkColor=ColorManager.darker(foreColor);
  Color brightColor=ColorManager.brighter(foreColor,new Color(null,255,255,255));
switch (style) {
case BaseBorder.LINE_STYLE_RIDGE:
    if (side == TOP || side == LEFT) {
      inSideColor=darkColor;
      outSideColor=brightColor;
    }
 else     if (side == BOTTOM || side == RIGHT) {
      inSideColor=brightColor;
      outSideColor=darkColor;
    }
  break;
case BaseBorder.LINE_STYLE_GROOVE:
if (side == TOP || side == LEFT) {
  inSideColor=brightColor;
  outSideColor=darkColor;
}
 else if (side == BOTTOM || side == RIGHT) {
  inSideColor=darkColor;
  outSideColor=brightColor;
}
break;
case BaseBorder.LINE_STYLE_INSET:
if (side == TOP || side == LEFT) {
inSideColor=darkColor;
outSideColor=darkColor;
}
 else if (side == BOTTOM || side == RIGHT) {
inSideColor=brightColor;
outSideColor=brightColor;
}
break;
case BaseBorder.LINE_STYLE_OUTSET:
if (side == TOP || side == LEFT) {
inSideColor=brightColor;
outSideColor=brightColor;
}
 else if (side == BOTTOM || side == RIGHT) {
inSideColor=darkColor;
outSideColor=darkColor;
}
break;
}
int inSideWidth=(width[side] + 1) / 2;
int outSideWidth=width[side] - inSideWidth;
g.setForegroundColor(outSideColor);
drawSingleLine(g,side,SWT.LINE_SOLID,width,outSideWidth,0,r);
g.setForegroundColor(inSideColor);
drawSingleLine(g,side,SWT.LINE_SOLID,width,inSideWidth,outSideWidth,r);
}","/** 
 * Draws a 3D style line with the specified side, style & width.
 * @param g The graphics object used for drawing
 * @param side the side to draw.
 * @param style the style to draw.
 * @param width the border width array, arranged by {top, bottom, left, right};
 * @param r the rectangle for drawing.
 */
public static void draw3DLine(Graphics g,int side,int style,int[] width,Rectangle r){
  if (width.length <= side || width[side] <= 0) {
    return;
  }
  Color foreColor=g.getForegroundColor();
  Color inSideColor=foreColor;
  Color outSideColor=foreColor;
  Color darkColor=ColorManager.darker(foreColor);
  Color brightColor=ColorManager.brighter(foreColor,ColorConstants.white);
switch (style) {
case BaseBorder.LINE_STYLE_RIDGE:
    if (side == TOP || side == LEFT) {
      inSideColor=darkColor;
      outSideColor=brightColor;
    }
 else     if (side == BOTTOM || side == RIGHT) {
      inSideColor=brightColor;
      outSideColor=darkColor;
    }
  break;
case BaseBorder.LINE_STYLE_GROOVE:
if (side == TOP || side == LEFT) {
  inSideColor=brightColor;
  outSideColor=darkColor;
}
 else if (side == BOTTOM || side == RIGHT) {
  inSideColor=darkColor;
  outSideColor=brightColor;
}
break;
case BaseBorder.LINE_STYLE_INSET:
if (side == TOP || side == LEFT) {
inSideColor=darkColor;
outSideColor=darkColor;
}
 else if (side == BOTTOM || side == RIGHT) {
inSideColor=brightColor;
outSideColor=brightColor;
}
break;
case BaseBorder.LINE_STYLE_OUTSET:
if (side == TOP || side == LEFT) {
inSideColor=brightColor;
outSideColor=brightColor;
}
 else if (side == BOTTOM || side == RIGHT) {
inSideColor=darkColor;
outSideColor=darkColor;
}
break;
}
int inSideWidth=(width[side] + 1) / 2;
int outSideWidth=width[side] - inSideWidth;
g.setForegroundColor(outSideColor);
drawSingleLine(g,side,SWT.LINE_SOLID,width,outSideWidth,0,r);
g.setForegroundColor(inSideColor);
drawSingleLine(g,side,SWT.LINE_SOLID,width,inSideWidth,outSideWidth,r);
}",0.9879332477535302
71937,"/** 
 */
public void testCompare(){
  String[] script=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] result=new boolean[]{true,true,true,true,true,false,true,false,false,false,false,false,true,true,false,false,false,true,false,true,true,false,false,true,false,true,false,true,true,false,true,false,true,true,true,false,true};
  for (int i=0; i < script.length; i++) {
    assertTrue(((Boolean)cx.evaluateString(scope,script[i],""String_Node_Str"",1,null)).booleanValue() == result[i]);
  }
}","/** 
 */
public void testCompare(){
  String[] script=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] result=new boolean[]{true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,false,false,true,false,true,true,false,false,true,false,true,false,true,true,false,true,false,true,true,true,false,true};
  for (int i=0; i < script.length; i++) {
    assertTrue(((Boolean)cx.evaluateString(scope,script[i],""String_Node_Str"",1,null)).booleanValue() == result[i]);
  }
}",0.9899694723070214
71938,"/** 
 * @param obj1
 * @param obj2
 * @return -1,0 and 1 standing for <,= and > respectively
 * @throws BirtException
 * @throws DataException
 */
private static int compare(Object obj1,Object obj2) throws BirtException {
  if (obj1 == null || obj2 == null) {
    if (obj1 == null && obj2 != null)     return -1;
 else     if (obj1 != null && obj2 == null)     return 1;
 else     return 0;
  }
  if (isSameType(obj1,obj2)) {
    if (obj1 instanceof Boolean) {
      if (obj1.equals(obj2))       return 0;
      Boolean bool=(Boolean)obj1;
      if (bool.equals(Boolean.TRUE))       return 1;
 else       return -1;
    }
 else     if (obj1 instanceof Comparable) {
      if (obj1 instanceof String) {
        return myCollator.compare(obj1,obj2);
      }
 else {
        return ((Comparable)obj1).compareTo(obj2);
      }
    }
 else {
      return myCollator.compare(obj1.toString(),obj2.toString());
    }
  }
 else   if (obj1 instanceof BigDecimal || obj2 instanceof BigDecimal) {
    BigDecimal a=DataTypeUtil.toBigDecimal(obj1);
    BigDecimal b=DataTypeUtil.toBigDecimal(obj2);
    return a.compareTo(b);
  }
 else   if (isNumericOrString(obj1) && isNumericOrString(obj2)) {
    return DataTypeUtil.toDouble(obj1).compareTo(DataTypeUtil.toDouble(obj2));
  }
 else   if (isTimeOrString(obj1) && isTimeOrString(obj2)) {
    return DataTypeUtil.toSqlTime(obj1).compareTo(DataTypeUtil.toSqlTime(obj2));
  }
 else   if (isDateOrString(obj1) && isDateOrString(obj2)) {
    return DataTypeUtil.toDate(obj1).compareTo(DataTypeUtil.toDate(obj2));
  }
 else   throw new IllegalArgumentException();
}","/** 
 * @param obj1
 * @param obj2
 * @return -1,0 and 1 standing for <,= and > respectively
 * @throws BirtException
 * @throws DataException
 */
private static int compare(Object obj1,Object obj2) throws BirtException {
  if (obj1 == null || obj2 == null) {
    if (obj1 == null && obj2 != null)     return -1;
 else     if (obj1 != null && obj2 == null)     return 1;
 else     return 0;
  }
  if (isSameType(obj1,obj2)) {
    if (obj1 instanceof Boolean) {
      if (obj1.equals(obj2))       return 0;
      Boolean bool=(Boolean)obj1;
      if (bool.equals(Boolean.TRUE))       return 1;
 else       return -1;
    }
 else     if (obj1 instanceof Comparable) {
      if (obj1 instanceof String) {
        return myCollator.compare(obj1,obj2);
      }
 else {
        return ((Comparable)obj1).compareTo(obj2);
      }
    }
 else {
      return myCollator.compare(obj1.toString(),obj2.toString());
    }
  }
 else   if (obj1 instanceof BigDecimal || obj2 instanceof BigDecimal) {
    BigDecimal a=DataTypeUtil.toBigDecimal(obj1);
    BigDecimal b=DataTypeUtil.toBigDecimal(obj2);
    return a.compareTo(b);
  }
 else   if (isNumericOrString(obj1) && isNumericOrString(obj2)) {
    return DataTypeUtil.toDouble(obj1).compareTo(DataTypeUtil.toDouble(obj2));
  }
 else   if (isTimeOrString(obj1) && isTimeOrString(obj2)) {
    return DataTypeUtil.toSqlTime(obj1).compareTo(DataTypeUtil.toSqlTime(obj2));
  }
 else   if (isSQLDateOrString(obj1) && isSQLDateOrString(obj2)) {
    return DataTypeUtil.toSqlDate(obj1).compareTo(DataTypeUtil.toSqlDate(obj2));
  }
 else   if (isDateOrString(obj1) && isDateOrString(obj2)) {
    return DataTypeUtil.toDate(obj1).compareTo(DataTypeUtil.toDate(obj2));
  }
 else   throw new IllegalArgumentException();
}",0.9548309901286268
71939,"/** 
 * Create <code>IFilterCondition</code>
 * @return instance
 */
public static IFilterCondition createFilterCondition(){
  FilterCondition c=new FilterCondition();
  IFilterCondition condition=new FilterConditionImpl(c);
  return condition;
}","/** 
 * Create <code>IFilterCondition</code>
 * @return instance
 */
public static IFilterCondition createFilterCondition(){
  return ScriptAPIFactory.getInstance().createFilterCondition();
}",0.6864988558352403
71940,"/** 
 * Create <code>IHighLightRule</code>
 * @return instance
 */
public static IHighlightRule createHighLightRule(){
  HighlightRule h=new HighlightRule();
  IHighlightRule rule=new HighlightRuleImpl(h);
  return rule;
}","/** 
 * Create <code>IHighLightRule</code>
 * @return instance
 */
public static IHighlightRule createHighLightRule(){
  return ScriptAPIFactory.getInstance().createHighLightRule();
}",0.6814814814814815
71941,"/** 
 * Create <code>IHideRule</code> instance
 * @return IHideRule
 */
public static IHideRule createHideRule(){
  HideRule r=new HideRule();
  IHideRule rule=new HideRuleImpl(r);
  return rule;
}","/** 
 * Create <code>IHideRule</code> instance
 * @return IHideRule
 */
public static IHideRule createHideRule(){
  return ScriptAPIFactory.getInstance().createHideRule();
}",0.7243243243243244
71942,"/** 
 * Create <code>ISortCondition</code>
 * @return instance
 */
public static ISortCondition createSortCondition(){
  SortKey s=new SortKey();
  ISortCondition sort=new SortConditionImpl(s);
  return sort;
}","/** 
 * Create <code>ISortCondition</code>
 * @return instance
 */
public static ISortCondition createSortCondition(){
  return ScriptAPIFactory.getInstance().createSortCondition();
}",0.7430025445292621
71943,"/** 
 * Create <code>IDataBinding</code>
 * @return instance
 */
public static IDataBinding createDataBinding(){
  ComputedColumn c=new ComputedColumn();
  IDataBinding binding=new DataBindingImpl(c);
  return binding;
}","/** 
 * Create <code>IDataBinding</code>
 * @return instance
 */
public static IDataBinding createDataBinding(){
  return ScriptAPIFactory.getInstance().createDataBinding();
}",0.6784810126582278
71944,"public void start(BundleContext context) throws Exception {
  super.start(context);
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  ScriptAPIFactory.initeTheFactory(new ScriptAPIBaseFactory());
}",0.7264957264957265
71945,"/** 
 * Write a list to an output stream
 * @param dos
 * @param dataMap
 * @throws IOException
 * @throws BirtException
 */
public final static void writeList(DataOutputStream dos,List list) throws IOException {
  if (list == null) {
    writeInt(dos,TYPE_NULL);
    return;
  }
 else {
    writeInt(dos,TYPE_MAP);
  }
  int size=list.size();
  writeInt(dos,size);
  if (size == 0)   return;
  for (int i=0; i < size; i++)   writeObject(dos,list.get(i));
}","/** 
 * Write a list to an output stream
 * @param dos
 * @param dataMap
 * @throws IOException
 * @throws BirtException
 */
public final static void writeList(DataOutputStream dos,List list) throws IOException {
  if (list == null) {
    writeInt(dos,TYPE_NULL);
    return;
  }
 else {
    writeInt(dos,TYPE_LIST);
  }
  int size=list.size();
  writeInt(dos,size);
  if (size == 0)   return;
  for (int i=0; i < size; i++)   writeObject(dos,list.get(i));
}",0.9923497267759562
71946,"/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CachedQueryResults(String tempDir,String queryResultID,IPreparedQuery preparedQuery) throws DataException {
  Object[] params={tempDir,queryResultID};
  logger.entering(CachedQueryResults.class.getName(),""String_Node_Str"",params);
  this.queryResultID=queryResultID;
  this.resultIterator=new CacheResultIterator(tempDir,this);
  this.pQuery=preparedQuery;
  logger.exiting(CachedQueryResults.class.getName(),""String_Node_Str"");
}","/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CachedQueryResults(DataEngineSession session,String queryResultID,IPreparedQuery preparedQuery) throws DataException {
  this.session=session;
  String tempDir=session.getTempDir();
  Object[] params={tempDir,queryResultID};
  logger.entering(CachedQueryResults.class.getName(),""String_Node_Str"",params);
  this.queryResultID=queryResultID;
  this.resultIterator=new CacheResultIterator(tempDir,this);
  this.pQuery=preparedQuery;
  logger.exiting(CachedQueryResults.class.getName(),""String_Node_Str"");
}",0.9072727272727272
71947,"public void close() throws BirtException {
  if (resultIterator != null)   resultIterator.close();
}","public void close() throws BirtException {
  if (resultIterator != null)   resultIterator.close();
  NamingRelationUtil.merge(this.session,this.getPreparedQuery().getReportQueryDefn(),this);
}",0.684931506849315
71948,"public IQueryResults getQueryResults(String queryResultID) throws DataException {
  if (context.getMode() == DataEngineContext.MODE_PRESENTATION || (context.getMode() == DataEngineContext.MODE_UPDATE && context.getDocWriter() == null)) {
    return new QueryResults(this.session.getTempDir(),this.context,queryResultID);
  }
  if (context.getMode() == DataEngineContext.MODE_GENERATION || context.getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    return new CachedQueryResults(session.getTempDir(),queryResultID,null);
  }
  return null;
}","public IQueryResults getQueryResults(String queryResultID) throws DataException {
  if (context.getMode() == DataEngineContext.MODE_PRESENTATION || (context.getMode() == DataEngineContext.MODE_UPDATE && context.getDocWriter() == null)) {
    return new QueryResults(this.session.getTempDir(),this.context,queryResultID);
  }
  if (context.getMode() == DataEngineContext.MODE_GENERATION || context.getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    return new CachedQueryResults(session,queryResultID,null);
  }
  return null;
}",0.9879740980573544
71949,"/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineImpl engine){
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  try {
    Context cx=Context.enter();
    if (this.scope == null) {
      this.scope=new ImporterTopLevel(cx);
    }
    new CoreJavaScriptInitializer().initialize(cx,scope);
  }
  finally {
    Context.exit();
  }
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  classLoaderHolder.set(engine.getContext().getClassLoader());
  engine.addShutdownListener(new IShutdownListener(){
    public void dataEngineShutdown(){
      classLoaderHolder.set(null);
    }
  }
);
  this.queryResultIDUtil=new QueryResultIDUtil();
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}","/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineImpl engine){
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  try {
    Context cx=Context.enter();
    if (this.scope == null) {
      this.scope=new ImporterTopLevel(cx);
    }
    new CoreJavaScriptInitializer().initialize(cx,scope);
  }
  finally {
    Context.exit();
  }
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  classLoaderHolder.set(engine.getContext().getClassLoader());
  engine.addShutdownListener(new IShutdownListener(){
    public void dataEngineShutdown(){
      classLoaderHolder.set(null);
    }
  }
);
  engine.addShutdownListener(new ReportDocumentShutdownListener(this));
  this.queryResultIDUtil=new QueryResultIDUtil();
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}",0.9653846153846154
71950,"public void dataEngineShutdown(){
  classLoaderHolder.set(null);
}","public void dataEngineShutdown(){
  if (session.getNamingRelation() == null) {
    return;
  }
  final int mode=session.getEngineContext().getMode();
  if (mode == DataEngineContext.MODE_GENERATION || mode == DataEngineContext.MODE_UPDATE) {
    try {
      saveNamingRelation(session.getNamingRelation());
    }
 catch (    DataException e1) {
      e1.printStackTrace();
    }
  }
}",0.1911111111111111
71951,"public Object getAdapter(Object adaptableObject,Class adapterType){
  if (IPathEditorInputFactory.class.equals(adapterType)) {
    return new IPathEditorInputFactory(){
      public IEditorInput create(      IPath path){
        IFileStore fileStore=EFS.getLocalFileSystem().getStore(path);
        return new FileStoreEditorInput(fileStore);
      }
    }
;
  }
  return null;
}","public Object getAdapter(Object adaptableObject,Class adapterType){
  if (IPathEditorInputFactory.class.equals(adapterType)) {
    return new IPathEditorInputFactory(){
      public IEditorInput create(      IPath path){
        return new PathEditorInput(path);
      }
    }
;
  }
  return null;
}",0.7345132743362832
71952,"public IEditorInput create(IPath path){
  IFileStore fileStore=EFS.getLocalFileSystem().getStore(path);
  return new FileStoreEditorInput(fileStore);
}","public IEditorInput create(IPath path){
  return new PathEditorInput(path);
}",0.6228070175438597
71953,"@Override public void run(){
  Collection<File> files=null;
  try {
    files=getSelectedFiles();
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
  }
  if (files == null || files.isEmpty()) {
    return;
  }
  SelectionDialog dialog=new MoveResourceDialog();
  if (dialog.open() == Window.OK) {
    Object[] selected=dialog.getResult();
    if (selected != null && selected.length == 1) {
      ResourceEntry entry=(ResourceEntry)selected[0];
      IPath targetPath=null;
      try {
        targetPath=new Path(convertToFile(entry.getURL()).getAbsolutePath());
      }
 catch (      IOException e) {
        ExceptionHandler.handle(e);
      }
      for (      File file : files) {
        File srcFile=file;
        File targetFile=targetPath.append(file.getName()).toFile();
        if (targetFile.exists()) {
          if (!MessageDialog.openQuestion(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
            return;
          }
          try {
            new ProgressMonitorDialog(getShell()).run(true,true,createDeleteRunnable(Arrays.asList(new File[]{targetFile})));
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.handle(e);
          }
catch (          InterruptedException e) {
            ExceptionHandler.handle(e);
          }
        }
        if (srcFile.renameTo(targetFile)) {
          fireResourceChanged(targetFile.getAbsolutePath());
          refreshWorkspace(srcFile.getAbsolutePath());
        }
      }
    }
  }
}","@Override public void run(){
  Collection<File> files=null;
  try {
    files=getSelectedFiles();
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
  }
  if (files == null || files.isEmpty()) {
    return;
  }
  SelectionDialog dialog=new MoveResourceDialog();
  if (dialog.open() == Window.OK) {
    Object[] selected=dialog.getResult();
    if (selected != null && selected.length == 1) {
      try {
        ResourceEntry entry=(ResourceEntry)selected[0];
        IPath targetPath=new Path(convertToFile(entry.getURL()).getAbsolutePath());
        for (        File file : files) {
          moveFile(file,targetPath.append(file.getName()).toFile());
        }
      }
 catch (      IOException e) {
        ExceptionHandler.handle(e);
      }
catch (      InvocationTargetException e) {
        ExceptionHandler.handle(e);
      }
catch (      InterruptedException e) {
        ExceptionHandler.handle(e);
      }
    }
  }
}",0.5547504025764896
71954,"@Override public void run(){
  Collection<File> files=null;
  try {
    files=getSelectedFiles();
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
    return;
  }
  if (files == null || files.size() != 1) {
    return;
  }
  File file=files.iterator().next();
  String newName=queryNewResourceName(file);
  if (newName == null || newName.length() <= 0) {
    return;
  }
  File newFile=new Path(file.getAbsolutePath()).removeLastSegments(1).append(newName).toFile();
  if (file.renameTo(newFile)) {
    fireResourceChanged(newFile.getAbsolutePath());
    refreshWorkspace(file.getAbsolutePath());
  }
}","@Override public void run(){
  Collection<File> files=null;
  try {
    files=getSelectedFiles();
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
    return;
  }
  if (files == null || files.size() != 1) {
    return;
  }
  File file=files.iterator().next();
  String newName=queryNewResourceName(file);
  if (newName == null || newName.length() <= 0) {
    return;
  }
  File newFile=new Path(file.getAbsolutePath()).removeLastSegments(1).append(newName).toFile();
  try {
    new ProgressMonitorDialog(getShell()).run(true,true,createRenameFileRunnable(file,newFile));
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.handle(e);
  }
catch (  InterruptedException e) {
    ExceptionHandler.handle(e);
  }
}",0.7453874538745388
71955,"/** 
 * Refresh swt browser
 */
public void display(){
  if (browser != null) {
    String uri=getFileUri();
    if (uri != null && uri.length() > 0) {
      if (this.options == null) {
        this.options=new HashMap<String,String>();
        this.options.put(WebViewer.SERVLET_NAME_KEY,InputParameterHtmlDialog.VIEWER_RUN);
        this.options.put(WebViewer.FORMAT_KEY,WebViewer.HTML);
      }
      this.options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
      this.options.put(WebViewer.MAX_ROWS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
      this.options.put(WebViewer.MAX_CUBE_ROW_LEVELS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBEROWLEVEL));
      this.options.put(WebViewer.MAX_CUBE_COLUMN_LEVELS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL));
      String extKey=ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.APPCONTEXT_EXTENSION_KEY);
      if (extKey != null && extKey.length() > 0)       this.options.put(WebViewer.APPCONTEXT_EXTENSION_KEY,extKey);
      WebViewer.display(uri,browser,this.options);
    }
  }
}","/** 
 * Refresh swt browser
 */
public void display(){
  if (browser != null && !browser.isDisposed()) {
    String uri=getFileUri();
    if (uri != null && uri.length() > 0) {
      if (this.options == null) {
        this.options=new HashMap<String,String>();
        this.options.put(WebViewer.SERVLET_NAME_KEY,InputParameterHtmlDialog.VIEWER_RUN);
        this.options.put(WebViewer.FORMAT_KEY,WebViewer.HTML);
      }
      this.options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
      this.options.put(WebViewer.MAX_ROWS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
      this.options.put(WebViewer.MAX_CUBE_ROW_LEVELS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBEROWLEVEL));
      this.options.put(WebViewer.MAX_CUBE_COLUMN_LEVELS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL));
      String extKey=ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.APPCONTEXT_EXTENSION_KEY);
      if (extKey != null && extKey.length() > 0)       this.options.put(WebViewer.APPCONTEXT_EXTENSION_KEY,extKey);
      WebViewer.display(uri,browser,this.options);
    }
  }
}",0.9900039984006398
71956,"/** 
 * Create controls in the preview editor.
 * @param parent parent composite
 */
public void createPartControl(Composite parent){
  Composite mainPane=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  layout.verticalSpacing=0;
  mainPane.setLayout(layout);
  mainPane.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Composite buttonTray=new Composite(mainPane,SWT.NONE);
  buttonTray.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  layout=new GridLayout();
  layout.marginWidth=5;
  layout.numColumns=7;
  layout.horizontalSpacing=0;
  buttonTray.setLayout(layout);
  IWebAppInfo webapp=WebViewer.getCurrentWebApp();
  if (webapp == null || !webapp.useCustomParamHandling()) {
    bParameter=new Button(buttonTray,SWT.PUSH);
    bParameter.setToolTipText(Messages.getString(""String_Node_Str""));
    bParameter.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData();
    bParameter.setLayoutData(gd);
  }
  FormText note=new FormText(buttonTray,SWT.NONE);
  note.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"",true,false);
  GridData gd=new GridData();
  gd.horizontalIndent=20;
  note.setLayoutData(gd);
  new Label(buttonTray,SWT.NONE).setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
  final Label maxRoxLabel=new Label(buttonTray,SWT.NONE);
  maxRoxLabel.setText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
  ViewerPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (maxRoxLabel == null || maxRoxLabel.isDisposed()) {
        ViewerPlugin.getDefault().getPluginPreferences().removePropertyChangeListener(this);
        return;
      }
      if (WebViewer.PREVIEW_MAXROW.equals(event.getProperty())) {
        if (!maxRoxLabel.getText().equals(event.getNewValue())) {
          maxRoxLabel.setText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
          buttonTray.layout();
        }
      }
    }
  }
);
  new Label(buttonTray,SWT.NONE).setText(""String_Node_Str"");
  Hyperlink changeLink=new Hyperlink(buttonTray,SWT.NONE);
  changeLink.setForeground(JFaceColors.getHyperlinkText(Display.getDefault()));
  changeLink.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      if (PreferencesUtil.createPreferenceDialogOn(UIUtil.getDefaultShell(),""String_Node_Str"",new String[]{""String_Node_Str""},null).open() == Window.OK) {
        boolean ret=MessageDialog.openQuestion(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (ret == true) {
          refresh();
        }
      }
    }
  }
);
  changeLink.setText(Messages.getString(""String_Node_Str""));
  new Label(buttonTray,SWT.NONE).setText(""String_Node_Str"");
  progressBar=new ProgressBar(mainPane,SWT.INDETERMINATE);
  gd=new GridData(GridData.END,GridData.CENTER,false,false);
  gd.heightHint=10;
  gd.widthHint=100;
  progressBar.setLayoutData(gd);
  progressBar.setVisible(true);
  browser=new Browser(mainPane,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.horizontalSpan=1;
  browser.setLayoutData(gd);
  browser.addProgressListener(new ProgressListener(){
    public void changed(    ProgressEvent event){
    }
    public void completed(    ProgressEvent event){
      progressBar.setVisible(false);
    }
  }
);
  parameterDialog=new InputParameterHtmlDialog(Display.getCurrent().getActiveShell(),InputParameterHtmlDialog.TITLE,getFileUri(),browser);
  if (bParameter != null) {
    bParameter.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        parameterDialog.open();
        if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
          refresh();
        }
      }
    }
);
  }
  browser.addOpenWindowListener(new OpenWindowListener(){
    public void open(    final WindowEvent event){
      final Shell shell=new Shell();
      shell.setLayout(new FillLayout());
      Browser browser=new Browser(shell,SWT.NONE);
      initialize(Display.getCurrent(),browser);
      event.browser=browser;
      shell.open();
    }
  }
);
}","/** 
 * Create controls in the preview editor.
 * @param parent parent composite
 */
public void createPartControl(Composite parent){
  mainPane=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  layout.verticalSpacing=0;
  mainPane.setLayout(layout);
  mainPane.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Composite buttonTray=new Composite(mainPane,SWT.NONE);
  buttonTray.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  layout=new GridLayout();
  layout.marginWidth=5;
  layout.numColumns=7;
  layout.horizontalSpacing=0;
  buttonTray.setLayout(layout);
  IWebAppInfo webapp=WebViewer.getCurrentWebApp();
  if (webapp == null || !webapp.useCustomParamHandling()) {
    bParameter=new Button(buttonTray,SWT.PUSH);
    bParameter.setToolTipText(Messages.getString(""String_Node_Str""));
    bParameter.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData();
    bParameter.setLayoutData(gd);
  }
  FormText note=new FormText(buttonTray,SWT.NONE);
  note.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"",true,false);
  GridData gd=new GridData();
  gd.horizontalIndent=20;
  note.setLayoutData(gd);
  new Label(buttonTray,SWT.NONE).setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
  final Label maxRoxLabel=new Label(buttonTray,SWT.NONE);
  maxRoxLabel.setText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
  ViewerPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (maxRoxLabel == null || maxRoxLabel.isDisposed()) {
        ViewerPlugin.getDefault().getPluginPreferences().removePropertyChangeListener(this);
        return;
      }
      if (WebViewer.PREVIEW_MAXROW.equals(event.getProperty())) {
        if (!maxRoxLabel.getText().equals(event.getNewValue())) {
          maxRoxLabel.setText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
          buttonTray.layout();
        }
      }
    }
  }
);
  new Label(buttonTray,SWT.NONE).setText(""String_Node_Str"");
  Hyperlink changeLink=new Hyperlink(buttonTray,SWT.NONE);
  changeLink.setForeground(JFaceColors.getHyperlinkText(Display.getDefault()));
  changeLink.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      if (PreferencesUtil.createPreferenceDialogOn(UIUtil.getDefaultShell(),""String_Node_Str"",new String[]{""String_Node_Str""},null).open() == Window.OK) {
        boolean ret=MessageDialog.openQuestion(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (ret == true) {
          refresh();
        }
      }
    }
  }
);
  changeLink.setText(Messages.getString(""String_Node_Str""));
  new Label(buttonTray,SWT.NONE).setText(""String_Node_Str"");
  progressBar=new ProgressBar(mainPane,SWT.INDETERMINATE);
  gd=new GridData(GridData.END,GridData.CENTER,false,false);
  gd.heightHint=10;
  gd.widthHint=100;
  progressBar.setLayoutData(gd);
  progressBar.setVisible(true);
  createMainBrowser();
  parameterDialog=new InputParameterHtmlDialog(Display.getCurrent().getActiveShell(),InputParameterHtmlDialog.TITLE,getFileUri(),browser);
  if (bParameter != null) {
    bParameter.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        parameterDialog.open();
        if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
          refresh();
        }
      }
    }
);
  }
}",0.9133448873483536
71957,"private String getFullPath(IPath path,IResource project){
  String curPath=path.toOSString();
  String directPath=project.getLocation().toOSString();
  int index=directPath.lastIndexOf(File.separator);
  String absPath=directPath.substring(0,index) + curPath;
  return absPath;
}","private String getFullPath(IPath path,IProject project){
  String directPath;
  try {
    directPath=project.getDescription().getLocationURI().toURL().getPath();
  }
 catch (  Exception e) {
    directPath=project.getLocation().toOSString();
  }
  String curPath=path.toOSString();
  int index=curPath.substring(1).indexOf(File.separator);
  String absPath=directPath + curPath.substring(index + 1);
  return absPath;
}",0.5358166189111748
71958,"/** 
 * @param dataEngine
 * @param queryDefn
 * @throws DataException
 */
PreparedIVQuerySourceQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  super(dataEngine,queryDefn,null,null);
  Object[] params={dataEngine,queryDefn};
  logger.entering(PreparedIVDataSourceQuery.class.getName(),""String_Node_Str"",params);
  this.queryDefn=queryDefn;
  this.engine=dataEngine;
  IBinding[] bindings=null;
  if (this.queryDefn.getSourceQuery() instanceof SubqueryLocator) {
    this.queryResults=engine.getQueryResults(getParentQueryResultsID((SubqueryLocator)(queryDefn.getSourceQuery())));
    IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
    bindings=getSubQueryBindings(queryDefinition,((SubqueryLocator)queryDefn.getSourceQuery()).getName());
  }
 else {
    this.queryResults=engine.getQueryResults(((IQueryDefinition)queryDefn.getSourceQuery()).getQueryResultsID());
    IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
    bindings=(IBinding[])queryDefinition.getBindings().values().toArray(new IBinding[0]);
  }
  for (int i=0; i < bindings.length; i++) {
    IBinding binding=bindings[i];
    this.queryDefn.addBinding(new Binding(binding.getBindingName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(binding.getBindingName()),binding.getDataType())));
  }
  preparedQuery=new PreparedQuery(dataEngine.getSession(),dataEngine.getContext(),this.queryDefn,this,appContext);
  logger.exiting(PreparedIVDataSourceQuery.class.getName(),""String_Node_Str"");
}","/** 
 * @param dataEngine
 * @param queryDefn
 * @throws DataException
 */
PreparedIVQuerySourceQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  super(dataEngine,queryDefn,null,null);
  Object[] params={dataEngine,queryDefn};
  logger.entering(PreparedIVDataSourceQuery.class.getName(),""String_Node_Str"",params);
  this.queryDefn=queryDefn;
  this.engine=dataEngine;
  IBinding[] bindings=null;
  if (this.queryDefn.getSourceQuery() instanceof SubqueryLocator) {
    this.queryResults=engine.getQueryResults(getParentQueryResultsID((SubqueryLocator)(queryDefn.getSourceQuery())));
    IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
    bindings=getSubQueryBindings(queryDefinition,((SubqueryLocator)queryDefn.getSourceQuery()).getName());
  }
 else {
    this.queryResults=engine.getQueryResults(((IQueryDefinition)queryDefn.getSourceQuery()).getQueryResultsID());
    if (queryResults != null && queryResults.getPreparedQuery() != null) {
      IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
      bindings=(IBinding[])queryDefinition.getBindings().values().toArray(new IBinding[0]);
    }
 else {
      bindings=new IBinding[0];
    }
  }
  for (int i=0; i < bindings.length; i++) {
    IBinding binding=bindings[i];
    this.queryDefn.addBinding(new Binding(binding.getBindingName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(binding.getBindingName()),binding.getDataType())));
  }
  preparedQuery=new PreparedQuery(dataEngine.getSession(),dataEngine.getContext(),this.queryDefn,this,appContext);
  logger.exiting(PreparedIVDataSourceQuery.class.getName(),""String_Node_Str"");
}",0.9603630862329804
71959,"public void createControl(Composite parent,Object input){
  setCategoryProvider(CubeCategoryProviderFactory.getInstance().getCategoryProvider(input));
  super.createControl(parent,input);
  createTabItems((List)input);
}","public void createControl(Composite parent,Object input){
  setCategoryProvider(CubeCategoryProviderFactory.getInstance().getCategoryProvider(input));
  super.createControl(parent,input);
}",0.9242053789731052
71960,"/** 
 * Notifies this listener that the selection has changed. <p> This method is called when the selection changes from one to a <code>non-null</code> value, but not when the selection changes to <code>null</code>. If there is a requirement to be notified in the latter scenario, implement <code>INullSelectionListener</code>. The event will be posted through this method. </p>
 * @param part the workbench part containing the selection
 * @param selection the current selection. This may be <code>null</code> if <code>INullSelectionListener</code> is implemented.
 */
public void handleSelectionChanged(ISelection selection){
  List modelList=getModelList(selection);
  if (modelList == null || modelList.size() == 0)   return;
  pageGenerator=builder.getPageGenerator(modelList);
  if (container != null && !container.isDisposed())   pageGenerator.createControl(container,modelList);
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() != null) {
    restoreLibraryPropertiesAction.setEnabled(hasLocalProperties(selection));
    handleGlobalAction();
    setPartName();
  }
  this.selection=selection;
}","/** 
 * Notifies this listener that the selection has changed. <p> This method is called when the selection changes from one to a <code>non-null</code> value, but not when the selection changes to <code>null</code>. If there is a requirement to be notified in the latter scenario, implement <code>INullSelectionListener</code>. The event will be posted through this method. </p>
 * @param part the workbench part containing the selection
 * @param selection the current selection. This may be <code>null</code> if <code>INullSelectionListener</code> is implemented.
 */
public void handleSelectionChanged(ISelection selection){
  List modelList=getModelList(selection);
  if (modelList == null || modelList.size() == 0)   return;
  pageGenerator=builder.getPageGenerator(modelList);
  if (container != null && !container.isDisposed()) {
    pageGenerator.createControl(container,modelList);
    pageGenerator.refresh();
  }
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() != null) {
    restoreLibraryPropertiesAction.setEnabled(hasLocalProperties(selection));
    handleGlobalAction();
    setPartName();
  }
  this.selection=selection;
}",0.9837362637362638
71961,"public void createTabItems(List input){
  if (basicPage == null || basicPage.getControl().isDisposed()) {
    super.createTabItems(input);
    tabFolder.setLayout(new FillLayout());
    basicPage=new BaseAttributePage();
    basicPage.buildUI(tabFolder);
    CTabItem tabItem=new CTabItem(tabFolder,SWT.NONE);
    tabItem.setText(ATTRIBUTESTITLE);
    tabItem.setControl(basicPage.getControl());
    if (customProvider != null)     basicPage.setCategoryProvider(customProvider);
 else     basicPage.setCategoryProvider(factory.getCategoryProvider(input));
  }
  basicPage.setInput(input);
  addSelectionListener(this);
  basicPage.refresh();
}","public void createTabItems(List input){
  if (basicPage == null || basicPage.getControl().isDisposed()) {
    super.createTabItems(input);
    tabFolder.setLayout(new FillLayout());
    basicPage=new BaseAttributePage();
    basicPage.buildUI(tabFolder);
    CTabItem tabItem=new CTabItem(tabFolder,SWT.NONE);
    tabItem.setText(ATTRIBUTESTITLE);
    tabItem.setControl(basicPage.getControl());
    if (customProvider != null)     basicPage.setCategoryProvider(customProvider);
 else     basicPage.setCategoryProvider(factory.getCategoryProvider(input));
  }
}",0.9318936877076412
71962,"public void refresh(){
  createTabItems(input);
}","public void refresh(){
  createTabItems(input);
  basicPage.setInput(input);
  addSelectionListener(this);
  basicPage.refresh();
}",0.5444444444444444
71963,"public void createControl(Composite parent,Object input){
  super.createControl(parent,input);
  createTabItems((List)input);
}","public void createControl(Composite parent,Object input){
  super.createControl(parent,input);
}",0.8609865470852018
71964,"public void createControl(Composite parent,Object input){
  super.createControl(parent,input);
  createTabItems((List)input);
}","public void createControl(Composite parent,Object input){
  super.createControl(parent,input);
}",0.8609865470852018
71965,"public void createControl(Composite parent,Object input){
  super.createControl(parent,input);
  createTabItems((List)input);
}","public void createControl(Composite parent,Object input){
  super.createControl(parent,input);
}",0.8609865470852018
71966,"public void createControl(Composite parent,Object input){
  super.createControl(parent,input);
  createTabItems((List)input);
}","public void createControl(Composite parent,Object input){
  super.createControl(parent,input);
}",0.8609865470852018
71967,"public void createControl(Composite parent,Object input){
  super.createControl(parent,input);
  createTabItems((List)input);
}","public void createControl(Composite parent,Object input){
  super.createControl(parent,input);
}",0.8609865470852018
71968,"public void createControl(Composite parent,Object input){
  super.createControl(parent,input);
  createTabItems((List)input);
}","public void createControl(Composite parent,Object input){
  super.createControl(parent,input);
}",0.8609865470852018
71969,"private ColumnHandleAdapter getColumnAdapter(DesignElementHandle handle){
  return (ColumnHandleAdapter)HandleAdapterFactory.getInstance().getColumnHandleAdapter(handle);
}","private ColumnHandleAdapter getColumnAdapter(DesignElementHandle handle){
  return HandleAdapterFactory.getInstance().getColumnHandleAdapter(handle);
}",0.934984520123839
71970,"private void drawBackgroudImage(DesignElementHandle handle,Graphics g,Rectangle rectangle){
  String backGroundImage=getBackgroundImage(handle);
  Object[] backGroundPosition=getBackgroundPosition(handle);
  int backGroundRepeat=getBackgroundRepeat(handle);
  if (backGroundImage != null) {
    Image image=null;
    try {
      image=ImageManager.getInstance().getImage(this.source.getTableAdapter().getModuleHandle(),backGroundImage);
    }
 catch (    SWTException e) {
      image=null;
    }
    if (image != null) {
      Rectangle area=rectangle;
      int repeat=backGroundRepeat;
      int alignment=0;
      Point position=new Point(-1,-1);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      org.eclipse.swt.graphics.Rectangle imageArea=image.getBounds();
      if (xPosition instanceof Integer) {
        position.x=((Integer)xPosition).intValue();
      }
 else       if (xPosition instanceof DimensionValue) {
        int percentX=(int)((DimensionValue)xPosition).getMeasure();
        position.x=(area.width - imageArea.width) * percentX / 100;
      }
 else       if (xPosition instanceof String) {
        alignment|=DesignElementHandleAdapter.getPosition((String)xPosition);
      }
      if (yPosition instanceof Integer) {
        position.y=((Integer)yPosition).intValue();
      }
 else       if (yPosition instanceof DimensionValue) {
        int percentY=(int)((DimensionValue)yPosition).getMeasure();
        position.y=(area.height - imageArea.height) * percentY / 100;
      }
 else       if (yPosition instanceof String) {
        alignment|=DesignElementHandleAdapter.getPosition((String)yPosition);
      }
      int x, y;
      Dimension size=new Rectangle(image.getBounds()).getSize();
      if (position != null && position.x != -1) {
        x=area.x + position.x;
      }
 else {
switch (alignment & PositionConstants.EAST_WEST) {
case PositionConstants.EAST:
          x=area.x + area.width - size.width;
        break;
case PositionConstants.WEST:
      x=area.x;
    break;
default :
  x=(area.width - size.width) / 2 + area.x;
break;
}
}
if (position != null && position.y != -1) {
y=area.y + position.y;
}
 else {
switch (alignment & PositionConstants.NORTH_SOUTH) {
case PositionConstants.NORTH:
y=area.y;
break;
case PositionConstants.SOUTH:
y=area.y + area.height - size.height;
break;
default :
y=(area.height - size.height) / 2 + area.y;
break;
}
}
ArrayList xyList=createImageList(x,y,size,repeat,rectangle);
Iterator iter=xyList.iterator();
Rectangle rect=new Rectangle();
g.getClip(rect);
g.setClip(rectangle);
while (iter.hasNext()) {
Point point=(Point)iter.next();
g.drawImage(image,point);
}
g.setClip(rect);
xyList.clear();
}
}
}","private void drawBackgroudImage(DesignElementHandle handle,Graphics g,Rectangle rectangle){
  String backGroundImage=getBackgroundImage(handle);
  if (backGroundImage != null) {
    Image image=null;
    try {
      image=ImageManager.getInstance().getImage(this.source.getTableAdapter().getModuleHandle(),backGroundImage);
    }
 catch (    SWTException e) {
      image=null;
    }
    if (image != null) {
      Object[] backGroundPosition=getBackgroundPosition(handle);
      int backGroundRepeat=getBackgroundRepeat(handle);
      Rectangle area=rectangle;
      int repeat=backGroundRepeat;
      int alignment=0;
      Point position=new Point(-1,-1);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      org.eclipse.swt.graphics.Rectangle imageArea=image.getBounds();
      if (xPosition instanceof Integer) {
        position.x=((Integer)xPosition).intValue();
      }
 else       if (xPosition instanceof DimensionValue) {
        int percentX=(int)((DimensionValue)xPosition).getMeasure();
        position.x=(area.width - imageArea.width) * percentX / 100;
      }
 else       if (xPosition instanceof String) {
        alignment|=DesignElementHandleAdapter.getPosition((String)xPosition);
      }
      if (yPosition instanceof Integer) {
        position.y=((Integer)yPosition).intValue();
      }
 else       if (yPosition instanceof DimensionValue) {
        int percentY=(int)((DimensionValue)yPosition).getMeasure();
        position.y=(area.height - imageArea.height) * percentY / 100;
      }
 else       if (yPosition instanceof String) {
        alignment|=DesignElementHandleAdapter.getPosition((String)yPosition);
      }
      int x, y;
      Dimension size=new Rectangle(image.getBounds()).getSize();
      if (position != null && position.x != -1) {
        x=area.x + position.x;
      }
 else {
switch (alignment & PositionConstants.EAST_WEST) {
case PositionConstants.EAST:
          x=area.x + area.width - size.width;
        break;
case PositionConstants.WEST:
      x=area.x;
    break;
default :
  x=(area.width - size.width) / 2 + area.x;
break;
}
}
if (position != null && position.y != -1) {
y=area.y + position.y;
}
 else {
switch (alignment & PositionConstants.NORTH_SOUTH) {
case PositionConstants.NORTH:
y=area.y;
break;
case PositionConstants.SOUTH:
y=area.y + area.height - size.height;
break;
default :
y=(area.height - size.height) / 2 + area.y;
break;
}
}
ArrayList xyList=createImageList(x,y,size,repeat,rectangle);
Iterator iter=xyList.iterator();
Rectangle rect=new Rectangle();
g.getClip(rect);
g.setClip(rectangle);
while (iter.hasNext()) {
Point point=(Point)iter.next();
g.drawImage(image,point);
}
g.setClip(rect);
xyList.clear();
}
}
}",0.9571742313323572
71971,"private RowHandleAdapter getRowAdapter(DesignElementHandle handle){
  return (RowHandleAdapter)HandleAdapterFactory.getInstance().getRowHandleAdapter(handle);
}","private RowHandleAdapter getRowAdapter(DesignElementHandle handle){
  return HandleAdapterFactory.getInstance().getRowHandleAdapter(handle);
}",0.9403973509933776
71972,"public void createControl(Composite parent,Object input){
  setCategoryProvider(ChartCategoryProviderFactory.getInstance().getCategoryProvider(input));
  super.createControl(parent,input);
  createTabItems((List)input);
}","public void createControl(Composite parent,Object input){
  setCategoryProvider(ChartCategoryProviderFactory.getInstance().getCategoryProvider(input));
  super.createControl(parent,input);
}",0.924574209245742
71973,"public void createControl(Composite parent,Object input){
  setCategoryProvider(CrosstabCellCategoryProviderFactory.getInstance().getCategoryProvider(input));
  super.createControl(parent,input);
  createTabItems((List)input);
}","public void createControl(Composite parent,Object input){
  setCategoryProvider(CrosstabCellCategoryProviderFactory.getInstance().getCategoryProvider(input));
  super.createControl(parent,input);
}",0.9270588235294116
71974,"public void createControl(Composite parent,Object input){
  setCategoryProvider(CrosstabCategoryProviderFactory.getInstance().getCategoryProvider(input));
  super.createControl(parent,input);
  createTabItems((List)input);
}","public void createControl(Composite parent,Object input){
  setCategoryProvider(CrosstabCategoryProviderFactory.getInstance().getCategoryProvider(input));
  super.createControl(parent,input);
}",0.9256594724220624
71975,"public static String formatNumberAsScienceNotation(Number data){
  DecimalFormat numberFormat=new DecimalFormat(""String_Node_Str"");
  return numberFormat.format(data);
}","public static String formatNumberAsScienceNotation(Number data){
}",0.5617021276595745
71976,"public static String formatNumberAsDecimal(Number data){
  DecimalFormat numberFormat=new DecimalFormat(""String_Node_Str"");
  return numberFormat.format(data);
}","public static String formatNumberAsDecimal(Object data){
  Number number=(Number)data;
  DecimalFormat numberFormat=new DecimalFormat(""String_Node_Str"");
  return numberFormat.format(number);
}",0.8757062146892656
71977,"public static boolean isBigNumber(Number number){
  try {
    BigDecimal num=null;
    if (number instanceof BigDecimal) {
      num=(BigDecimal)number;
    }
 else {
      num=new BigDecimal(number.toString());
    }
    return num.compareTo(MAX_DOUBLE) == 1;
  }
 catch (  Exception e) {
    return false;
  }
}","public static boolean isBigNumber(Object number){
  try {
    BigDecimal num=null;
    if (number instanceof BigDecimal) {
      num=(BigDecimal)number;
    }
 else {
      num=new BigDecimal(number.toString());
    }
    return num.compareTo(MAX_DOUBLE) == 1;
  }
 catch (  Exception e) {
    return false;
  }
}",0.9808306709265175
71978,"public void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  if (d.getDatatype().equals(Data.NUMBER)) {
    if (d.getText().equals((NAN_STRING))) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (d.getDatatype().equals(Data.DATE)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  d.formatTxt();
  String txt=d.getText();
  if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=capitalize(txt);
  }
 else   if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toUpperCase();
  }
 else   if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toLowerCase();
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}","public void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  if (d.getDatatype().equals(Data.NUMBER)) {
    if (d.getText().equals(NAN_STRING) || d.isBigNumber()) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (d.getDatatype().equals(Data.DATE)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  d.formatTxt();
  String txt=d.getText();
  if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=capitalize(txt);
  }
 else   if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toUpperCase();
  }
 else   if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toLowerCase();
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}",0.991041961338991
71979,"public void setUp() throws Exception {
  cx=Context.enter();
  scope=cx.initStandardObjects();
  ScriptableObject.putProperty(scope,""String_Node_Str"",new BirtComp());
}","public void setUp() throws Exception {
  cx=Context.enter();
  scope=cx.initStandardObjects();
  new CoreJavaScriptInitializer().initialize(cx,scope);
}",0.7375
71980,"public void setUp() throws Exception {
  cx=Context.enter();
  scope=cx.initStandardObjects();
  ScriptableObject.putProperty(scope,""String_Node_Str"",new BirtDateTime());
}","public void setUp() throws Exception {
  cx=Context.enter();
  scope=cx.initStandardObjects();
  new CoreJavaScriptInitializer().initialize(cx,scope);
}",0.7283950617283951
71981,"public void setUp() throws Exception {
  cx=Context.enter();
  scope=cx.initStandardObjects();
  ScriptableObject.putProperty(scope,""String_Node_Str"",new BirtMath());
}","public void setUp() throws Exception {
  cx=Context.enter();
  scope=cx.initStandardObjects();
  new CoreJavaScriptInitializer().initialize(cx,scope);
}",0.7375
71982,"public void setUp() throws Exception {
  cx=Context.enter();
  scope=cx.initStandardObjects();
  ScriptableObject.putProperty(scope,""String_Node_Str"",new BirtStr());
}","public void setUp() throws Exception {
  cx=Context.enter();
  scope=cx.initStandardObjects();
  new CoreJavaScriptInitializer().initialize(cx,scope);
}",0.7398119122257053
71983,"public void savePreferences(ChartPreferences preferences,OutputStream os) throws IOException {
  ResourceSet rsChart=new ResourceSetImpl();
  rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put(""String_Node_Str"",new ModelResourceFactoryImpl());
  Resource rChart=rsChart.createResource(URI.createFileURI(""String_Node_Str""));
  rChart.getContents().add(preferences);
  Map options=new HashMap();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  rChart.save(os,options);
}","public void savePreferences(ChartPreferences preferences,OutputStream os) throws IOException {
  ResourceSet rsChart=new ResourceSetImpl();
  rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put(""String_Node_Str"",new ModelResourceFactoryImpl());
  Resource rChart=rsChart.createResource(URI.createFileURI(""String_Node_Str""));
  rChart.getContents().add(preferences);
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  rChart.save(os,options);
}",0.9709302325581396
71984,"public Chart read(URI uri) throws IOException {
  ResourceSet rsChart=new ResourceSetImpl();
  rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put(""String_Node_Str"",new ModelResourceFactoryImpl());
  Resource rChart=null;
  rChart=rsChart.createResource(uri);
  Map options=new HashMap();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  rChart.load(options);
  return (Chart)rChart.getContents().get(0);
}","public Chart read(URI uri) throws IOException {
  ResourceSet rsChart=new ResourceSetImpl();
  rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put(""String_Node_Str"",new ModelResourceFactoryImpl());
  Resource rChart=null;
  rChart=rsChart.createResource(uri);
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  rChart.load(options);
  return (Chart)rChart.getContents().get(0);
}",0.9668141592920354
71985,"public ByteArrayOutputStream asXml(Chart cModel,boolean bStripHeaders) throws IOException {
  cModel.clearSections(IConstants.RUN_TIME);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ResourceSet rsChart=new ResourceSetImpl();
  rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put(""String_Node_Str"",new ModelResourceFactoryImpl());
  Resource rChart=rsChart.createResource(URI.createFileURI(""String_Node_Str""));
  rChart.getContents().add(cModel);
  Map options=new HashMap();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  if (bStripHeaders) {
    options.put(XMLResource.OPTION_DECLARE_XML,Boolean.FALSE);
  }
  rChart.save(baos,options);
  return baos;
}","public ByteArrayOutputStream asXml(Chart cModel,boolean bStripHeaders) throws IOException {
  cModel.clearSections(IConstants.RUN_TIME);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ResourceSet rsChart=new ResourceSetImpl();
  rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put(""String_Node_Str"",new ModelResourceFactoryImpl());
  Resource rChart=rsChart.createResource(URI.createFileURI(""String_Node_Str""));
  rChart.getContents().add(cModel);
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  if (bStripHeaders) {
    options.put(XMLResource.OPTION_DECLARE_XML,Boolean.FALSE);
  }
  rChart.save(baos,options);
  return baos;
}",0.979108635097493
71986,"public ChartPreferences loadPreferences(InputStream is) throws IOException {
  ResourceSet rsChart=new ResourceSetImpl();
  rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put(""String_Node_Str"",new ModelResourceFactoryImpl());
  Resource rChart=rsChart.createResource(URI.createFileURI(""String_Node_Str""));
  Map options=new HashMap();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  rChart.load(is,options);
  return (ChartPreferences)rChart.getContents().get(0);
}","public ChartPreferences loadPreferences(InputStream is) throws IOException {
  ResourceSet rsChart=new ResourceSetImpl();
  rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put(""String_Node_Str"",new ModelResourceFactoryImpl());
  Resource rChart=rsChart.createResource(URI.createFileURI(""String_Node_Str""));
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  rChart.load(is,options);
  return (ChartPreferences)rChart.getContents().get(0);
}",0.9707602339181286
71987,"public void write(Chart cModel,URI uri) throws IOException {
  cModel.clearSections(IConstants.RUN_TIME);
  ResourceSet rsChart=new ResourceSetImpl();
  rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put(""String_Node_Str"",new ModelResourceFactoryImpl());
  Resource rChart=null;
  rChart=rsChart.createResource(uri);
  rChart.getContents().add(cModel);
  Map options=new HashMap();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  rChart.save(options);
}","public void write(Chart cModel,URI uri) throws IOException {
  cModel.clearSections(IConstants.RUN_TIME);
  ResourceSet rsChart=new ResourceSetImpl();
  rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put(""String_Node_Str"",new ModelResourceFactoryImpl());
  Resource rChart=null;
  rChart=rsChart.createResource(uri);
  rChart.getContents().add(cModel);
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  rChart.save(options);
}",0.9700598802395208
71988,"public Chart fromXml(ByteArrayInputStream byais,boolean bStripHeaders) throws IOException {
  ResourceSet rsChart=new ResourceSetImpl();
  rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put(""String_Node_Str"",new ModelResourceFactoryImpl());
  Resource rChart=rsChart.createResource(URI.createFileURI(""String_Node_Str""));
  Map options=new HashMap();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  if (bStripHeaders) {
    options.put(XMLResource.OPTION_DECLARE_XML,Boolean.FALSE);
  }
  rChart.load(byais,options);
  return (Chart)rChart.getContents().get(0);
}","public Chart fromXml(ByteArrayInputStream byais,boolean bStripHeaders) throws IOException {
  ResourceSet rsChart=new ResourceSetImpl();
  rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put(""String_Node_Str"",new ModelResourceFactoryImpl());
  Resource rChart=rsChart.createResource(URI.createFileURI(""String_Node_Str""));
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  if (bStripHeaders) {
    options.put(XMLResource.OPTION_DECLARE_XML,Boolean.FALSE);
  }
  rChart.load(byais,options);
  return (Chart)rChart.getContents().get(0);
}",0.9754098360655736
71989,"/** 
 * Get the method definition given the method name.
 * @param name the name of the method to get
 * @return the definition of the method to get
 */
public IMethodInfo getMethod(String name){
  return (MethodInfo)findInfo(methods,name);
}","/** 
 * Get the method definition given the method name.
 * @param name the name of the method to get
 * @return the definition of the method to get
 */
public IMethodInfo getMethod(String name){
  return (IMethodInfo)findInfo(methods,name);
}",0.9979381443298968
71990,"/** 
 * Finds out the member/method information of a <code>ClassInfo</code>.
 * @param objs the colllection contains member/method information
 * @param name the name of a member/method
 * @return a <code>MemberInfo</code> or a <code>MethodInfo</code>corresponding to <code>objs</code>
 */
private Object findInfo(LinkedHashMap objs,String name){
  if (objs == null || name == null)   return null;
  return objs.get(name.toLowerCase());
}","/** 
 * Finds out the member/method information of a <code>ClassInfo</code>.
 * @param objs the colllection contains member/method information
 * @param name the name of a member/method
 * @return a <code>MemberInfo</code> or a <code>MethodInfo</code>corresponding to <code>objs</code>
 */
private Object findInfo(LinkedHashMap objs,String name){
  if (objs == null || name == null)   return null;
  return objs.get(name);
}",0.9837587006960556
71991,"/** 
 * Adds one member definition to this class definition.
 * @param memberDefn the definition of the member to add
 * @throws MetaDataException if the duplicate member name exists.
 */
public void addMemberDefn(IMemberInfo memberDefn) throws MetaDataException {
  if (members == null)   members=new LinkedHashMap();
  if (StringUtil.isBlank(memberDefn.getName()))   throw new MetaDataException(new String[]{memberDefn.getName()},MetaDataException.DESIGN_EXCEPTION_MISSING_MEMBER_NAME);
  if (findMember(memberDefn.getName()) != null) {
    throw new MetaDataException(new String[]{memberDefn.getName(),name},MetaDataException.DESIGN_EXCEPTION_DUPLICATE_MEMBER_NAME);
  }
  members.put(memberDefn.getName().toLowerCase(),memberDefn);
}","/** 
 * Adds one member definition to this class definition.
 * @param memberDefn the definition of the member to add
 * @throws MetaDataException if the duplicate member name exists.
 */
public void addMemberDefn(IMemberInfo memberDefn) throws MetaDataException {
  if (members == null)   members=new LinkedHashMap();
  if (StringUtil.isBlank(memberDefn.getName()))   throw new MetaDataException(new String[]{memberDefn.getName()},MetaDataException.DESIGN_EXCEPTION_MISSING_MEMBER_NAME);
  if (findMember(memberDefn.getName()) != null) {
    throw new MetaDataException(new String[]{memberDefn.getName(),name},MetaDataException.DESIGN_EXCEPTION_DUPLICATE_MEMBER_NAME);
  }
  members.put(memberDefn.getName(),memberDefn);
}",0.9904109589041096
71992,"/** 
 * Adds one method definition to this class definition.
 * @param methodInfo the definition of the method to add
 * @throws MetaDataException if the duplicate method name exists.
 */
public void addMethod(IMethodInfo methodInfo) throws MetaDataException {
  if (methods == null)   methods=new LinkedHashMap();
  if (StringUtil.isBlank(methodInfo.getName()))   throw new MetaDataException(new String[]{methodInfo.getName()},MetaDataException.DESIGN_EXCEPTION_MISSING_METHOD_NAME);
  methods.put(methodInfo.getName().toLowerCase(),methodInfo);
}","/** 
 * Adds one method definition to this class definition.
 * @param methodInfo the definition of the method to add
 * @throws MetaDataException if the duplicate method name exists.
 */
public void addMethod(IMethodInfo methodInfo) throws MetaDataException {
  if (methods == null)   methods=new LinkedHashMap();
  if (StringUtil.isBlank(methodInfo.getName()))   throw new MetaDataException(new String[]{methodInfo.getName()},MetaDataException.DESIGN_EXCEPTION_MISSING_METHOD_NAME);
  methods.put(methodInfo.getName(),methodInfo);
}",0.9870609981515712
71993,"/** 
 * Adds an optional argument list to the method information.
 * @param argumentList an optional argument list
 */
public void addArgumentList(IArgumentInfoList argumentList){
  if (arguments == null)   arguments=new ArrayList();
  ((ArrayList)arguments).add(argumentList);
}","/** 
 * Adds an optional argument list to the method information.
 * @param argumentList an optional argument list
 */
public void addArgumentList(IArgumentInfoList argumentList){
  if (arguments == null)   arguments=new ArrayList();
  arguments.add(argumentList);
}",0.943119266055046
71994,"protected void preview(String format,boolean allowPage){
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.FORMAT_KEY,format);
  options.put(WebViewer.ALLOW_PAGE_KEY,Boolean.valueOf(allowPage));
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  WebViewer.display(model.getFileName(),options);
}","protected void preview(String format,boolean allowPage){
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.FORMAT_KEY,format);
  options.put(WebViewer.ALLOW_PAGE_KEY,Boolean.valueOf(allowPage));
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  Map viewerOptions=getViewerOptions();
  if (viewerOptions != null) {
    options.putAll(viewerOptions);
  }
  WebViewer.display(model.getFileName(),options);
}",0.9118589743589745
71995,"protected void preview(String format,boolean allowPage){
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.FORMAT_KEY,format);
  options.put(WebViewer.ALLOW_PAGE_KEY,Boolean.valueOf(allowPage));
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  WebViewer.display(model.getFileName(),options);
}","protected void preview(String format,boolean allowPage){
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.FORMAT_KEY,format);
  options.put(WebViewer.ALLOW_PAGE_KEY,Boolean.valueOf(allowPage));
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  Map viewerOptions=getViewerOptions();
  if (viewerOptions != null) {
    options.putAll(viewerOptions);
  }
  WebViewer.display(model.getFileName(),options);
}",0.9118589743589745
71996,"/** 
 * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)
 */
public void run(IAction action){
  IFile file=getSelectedFile();
  if (file != null) {
    String url=file.getLocation().toOSString();
    try {
      ModuleHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(url);
      Map options=new HashMap();
      options.put(WebViewer.FORMAT_KEY,WebViewer.HTML);
      options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder(file.getProject()));
      WebViewer.display(url,options);
      handle.close();
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
      return;
    }
  }
 else {
    action.setEnabled(false);
  }
}","/** 
 * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)
 */
public void run(IAction action){
  IFile file=getSelectedFile();
  if (file != null) {
    String url=file.getLocation().toOSString();
    try {
      ModuleHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(url);
      Map options=new HashMap();
      options.put(WebViewer.FORMAT_KEY,WebViewer.HTML);
      options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder(file.getProject()));
      Map viewerOptions=getViewerOptions();
      if (viewerOptions != null) {
        options.putAll(viewerOptions);
      }
      WebViewer.display(url,options);
      handle.close();
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
      return;
    }
  }
 else {
    action.setEnabled(false);
  }
}",0.9199491740787802
71997,"/** 
 * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)
 */
public void run(IAction action){
  IFile file=getSelectedFile();
  if (file != null) {
    String url=file.getLocation().toString();
    Map options=new HashMap();
    options.put(WebViewer.FORMAT_KEY,WebViewer.HTML);
    options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder(file.getProject()));
    WebViewer.display(url,options);
  }
 else {
    action.setEnabled(false);
  }
}","/** 
 * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)
 */
public void run(IAction action){
  IFile file=getSelectedFile();
  if (file != null) {
    String url=file.getLocation().toString();
    Map options=new HashMap();
    options.put(WebViewer.FORMAT_KEY,WebViewer.HTML);
    options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder(file.getProject()));
    Map viewerOptions=getViewerOptions();
    if (viewerOptions != null) {
      options.putAll(viewerOptions);
    }
    WebViewer.display(url,options);
  }
 else {
    action.setEnabled(false);
  }
}",0.8940754039497307
71998,"public void testArchiveFile() throws IOException {
  ArchiveFile archive=new ArchiveFile(ARCHIVE_FILE,""String_Node_Str"");
  archive.setCacheSize(64 * 1024);
  createArchive(archive);
  checkArchive(archive);
  assertTrue(archive.getUsedCache() > 0);
  assertTrue(archive.getUsedCache() <= 64 * 1024);
  archive.close();
  assertTrue(archive.getUsedCache() == 0);
  archive=new ArchiveFile(ARCHIVE_FILE,""String_Node_Str"");
  checkArchive(archive);
  archive.close();
}","public void testArchiveFile() throws IOException {
  ArchiveFile archive=new ArchiveFile(ARCHIVE_FILE,""String_Node_Str"");
  archive.setCacheSize(0);
  archive.setCacheSize(64 * 1024);
  createArchive(archive);
  checkArchive(archive);
  assertTrue(archive.getUsedCache() > 0);
  assertTrue(archive.getUsedCache() <= 64 * 1024);
  archive.close();
  assertTrue(archive.getUsedCache() == 0);
  archive=new ArchiveFile(ARCHIVE_FILE,""String_Node_Str"");
  checkArchive(archive);
  archive.close();
}",0.971904266389178
71999,"/** 
 * close the archive. all changed data will be flushed into disk if the file is opened for write. the file will be removed if it is opend as transient. after close, the instance can't be used any more.
 * @throws IOException
 */
public synchronized void close() throws IOException {
  if (isWritable) {
    head.setStatus(FILE_STATUS_FINISHED);
    if (!isTransient) {
      flush();
    }
  }
  if (rf != null) {
    rf.close();
    rf=null;
  }
  if (isTransient) {
    new File(archiveName).delete();
  }
  caches.reset();
  isClosed=true;
}","/** 
 * close the archive. all changed data will be flushed into disk if the file is opened for write. the file will be removed if it is opend as transient. after close, the instance can't be used any more.
 * @throws IOException
 */
public synchronized void close() throws IOException {
  if (isWritable) {
    head.setStatus(FILE_STATUS_FINISHED);
    if (!isTransient) {
      flush();
    }
  }
  if (rf != null) {
    rf.close();
    rf=null;
  }
  if (isTransient) {
    new File(archiveName).delete();
  }
  if (caches != null) {
    caches.reset();
  }
  isClosed=true;
}",0.946808510638298
72000,"/** 
 * set up the cache size. the actually cache size is round to block size.
 * @param cacheSize cache size in bytes
 */
public void setCacheSize(int cacheSize){
  caches.setCacheSize(cacheSize);
}","/** 
 * set up the cache size. the actually cache size is round to block size.
 * @param cacheSize cache size in bytes
 */
public void setCacheSize(int cacheSize){
  if (cacheSize <= 0) {
    enableCache=false;
    caches=null;
  }
 else {
    enableCache=true;
    if (caches == null) {
      caches=new BlockManager(new CacheEventAdapter(),BLOCK_SIZE);
    }
    caches.setCacheSize(cacheSize);
  }
}",0.6622296173044925
