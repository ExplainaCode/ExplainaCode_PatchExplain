record_number,buggy_code,fixed_code,code_similarity
17001,"/** 
 * @param a
 * @param ca1
 * @param ca2
 * @return
 * @throws StructureException if an error occured during superposition
 */
private static AFPChain splitBlocksByTopology(AFPChain a,Atom[] ca1,Atom[] ca2) throws StructureException {
  int[][][] optAln=a.getOptAln();
  int blockNum=a.getBlockNum();
  int[] optLen=a.getOptLen();
  List<Integer> newBlkLen=new ArrayList<Integer>();
  boolean blockChanged=false;
  for (int blk=0; blk < blockNum; blk++) {
    int currLen=1;
    for (int pos=1; pos < optLen[blk]; pos++) {
      if (optAln[blk][0][pos] <= optAln[blk][0][pos - 1] || optAln[blk][1][pos] <= optAln[blk][1][pos - 1]) {
        newBlkLen.add(currLen);
        currLen=0;
        blockChanged=true;
      }
      currLen++;
    }
    if (optLen[blk] < 2) {
      newBlkLen.add(optLen[blk]);
    }
 else {
      newBlkLen.add(currLen);
    }
  }
  if (!blockChanged) {
    return a;
  }
  List<int[][]> blocks=new ArrayList<int[][]>(newBlkLen.size());
  int oldBlk=0;
  int pos=0;
  for (  int blkLen : newBlkLen) {
    if (blkLen == optLen[oldBlk]) {
      assert(pos == 0);
      blocks.add(optAln[oldBlk]);
    }
 else {
      int[][] newBlock=new int[2][blkLen];
      assert(pos + blkLen <= optLen[oldBlk]);
      for (int i=0; i < blkLen; i++) {
        newBlock[0][i]=optAln[oldBlk][0][pos + i];
        newBlock[1][i]=optAln[oldBlk][1][pos + i];
      }
      pos+=blkLen;
      blocks.add(newBlock);
      if (pos == blkLen) {
        oldBlk++;
        pos=0;
      }
    }
  }
  int[][][] newOptAln=blocks.toArray((int[][][])null);
  int[] newBlockLens=new int[newBlkLen.size()];
  for (int i=0; i < newBlkLen.size(); i++) {
    newBlockLens[i]=newBlkLen.get(i);
  }
  return replaceOptAln(a,ca1,ca2,blocks.size(),newBlockLens,newOptAln);
}","/** 
 * @param a
 * @param ca1
 * @param ca2
 * @return
 * @throws StructureException if an error occured during superposition
 */
private static AFPChain splitBlocksByTopology(AFPChain a,Atom[] ca1,Atom[] ca2) throws StructureException {
  int[][][] optAln=a.getOptAln();
  int blockNum=a.getBlockNum();
  int[] optLen=a.getOptLen();
  List<Integer> newBlkLen=new ArrayList<Integer>();
  boolean blockChanged=false;
  for (int blk=0; blk < blockNum; blk++) {
    int currLen=1;
    for (int pos=1; pos < optLen[blk]; pos++) {
      if (optAln[blk][0][pos] <= optAln[blk][0][pos - 1] || optAln[blk][1][pos] <= optAln[blk][1][pos - 1]) {
        newBlkLen.add(currLen);
        currLen=0;
        blockChanged=true;
      }
      currLen++;
    }
    if (optLen[blk] < 2) {
      newBlkLen.add(optLen[blk]);
    }
 else {
      newBlkLen.add(currLen);
    }
  }
  if (!blockChanged) {
    return a;
  }
  List<int[][]> blocks=new ArrayList<int[][]>(newBlkLen.size());
  int oldBlk=0;
  int pos=0;
  for (  int blkLen : newBlkLen) {
    if (blkLen == optLen[oldBlk]) {
      assert(pos == 0);
      blocks.add(optAln[oldBlk]);
    }
 else {
      int[][] newBlock=new int[2][blkLen];
      assert(pos + blkLen <= optLen[oldBlk]);
      for (int i=0; i < blkLen; i++) {
        newBlock[0][i]=optAln[oldBlk][0][pos + i];
        newBlock[1][i]=optAln[oldBlk][1][pos + i];
      }
      pos+=blkLen;
      blocks.add(newBlock);
      if (pos == optLen[oldBlk]) {
        oldBlk++;
        pos=0;
      }
    }
  }
  int[][][] newOptAln=blocks.toArray(new int[0][][]);
  int[] newBlockLens=new int[newBlkLen.size()];
  for (int i=0; i < newBlkLen.size(); i++) {
    newBlockLens[i]=newBlkLen.get(i);
  }
  return replaceOptAln(a,ca1,ca2,blocks.size(),newBlockLens,newOptAln);
}",0.9861464517953068
17002,"/** 
 * @param afpChain
 * @param ca1
 * @param ca2
 * @param optLength
 * @param optLens
 * @param optAln
 * @return
 * @throws StructureException if an error occured during superposition
 */
public static AFPChain replaceOptAln(AFPChain afpChain,Atom[] ca1,Atom[] ca2,int blockNum,int[] optLens,int[][][] optAln) throws StructureException {
  int optLength=0;
  for (int blk=0; blk < blockNum; blk++) {
    optLength+=optLens[blk];
  }
  AFPChain refinedAFP=(AFPChain)afpChain.clone();
  refinedAFP.setOptLength(optLength);
  refinedAFP.setOptLen(optLens);
  refinedAFP.setOptAln(optAln);
  refinedAFP.setBlockNum(blockNum);
  Atom[] ca2clone=StructureTools.cloneCAArray(ca2);
  AlignmentTools.updateSuperposition(refinedAFP,ca1,ca2clone);
  AFPAlignmentDisplay.getAlign(refinedAFP,ca1,ca2clone);
  return refinedAFP;
}","/** 
 * @param afpChain
 * @param ca1
 * @param ca2
 * @param optLength
 * @param optLens
 * @param optAln
 * @return
 * @throws StructureException if an error occured during superposition
 */
public static AFPChain replaceOptAln(AFPChain afpChain,Atom[] ca1,Atom[] ca2,int blockNum,int[] optLens,int[][][] optAln) throws StructureException {
  int optLength=0;
  for (int blk=0; blk < blockNum; blk++) {
    optLength+=optLens[blk];
  }
  AFPChain refinedAFP=(AFPChain)afpChain.clone();
  refinedAFP.setOptLength(optLength);
  refinedAFP.setBlockSize(optLens);
  refinedAFP.setOptLen(optLens);
  refinedAFP.setOptAln(optAln);
  refinedAFP.setBlockNum(blockNum);
  Atom[] ca2clone=StructureTools.cloneCAArray(ca2);
  AlignmentTools.updateSuperposition(refinedAFP,ca1,ca2clone);
  AFPAlignmentDisplay.getAlign(refinedAFP,ca1,ca2clone);
  return refinedAFP;
}",0.9785458879618594
17003,"public void testOldSecOutput() throws Exception {
  String fileName=""String_Node_Str"";
  InputStream inStream=this.getClass().getResourceAsStream(fileName);
  assertNotNull(""String_Node_Str"" + fileName + ""String_Node_Str"",inStream);
  String xml=StringManipulationHelper.convertStreamToString(inStream);
  AtomCache cache=new AtomCache();
  String name1=""String_Node_Str"";
  String name2=""String_Node_Str"";
  Atom[] ca1=cache.getAtoms(name1);
  Atom[] ca2=cache.getAtoms(name2);
  AFPChain afpChainOrig=AFPChainXMLParser.fromXML(xml,ca1,ca2);
  afpChainOrig.setCalculationTime(-1);
  String xmlComp=AFPChainXMLConverter.toXML(afpChainOrig,ca1,ca2);
  StringManipulationTestsHelper.assertEqualsIgnoreEndline(xml,xmlComp);
  StructureAlignment ce=StructureAlignmentFactory.getAlgorithm(CeMain.algorithmName);
  AFPChain afpChainNew=ce.align(ca1,ca2);
  afpChainNew.setCalculationTime(-1);
  afpChainNew.setName1(name1);
  afpChainNew.setName2(name2);
  String xmlNew=AFPChainXMLConverter.toXML(afpChainNew,ca1,ca2);
  StringManipulationTestsHelper.assertEqualsIgnoreEndline(xml,xmlNew);
}","public void testOldSecOutput() throws Exception {
  ChemCompProvider ccprovorig=ChemCompGroupFactory.getChemCompProvider();
  if (!(ccprovorig instanceof DownloadChemCompProvider)) {
    ChemCompProvider ccprov=new DownloadChemCompProvider();
    ChemCompGroupFactory.setChemCompProvider(ccprov);
  }
  String fileName=""String_Node_Str"";
  InputStream inStream=this.getClass().getResourceAsStream(fileName);
  assertNotNull(""String_Node_Str"" + fileName + ""String_Node_Str"",inStream);
  String xml=StringManipulationHelper.convertStreamToString(inStream);
  AtomCache cache=new AtomCache();
  String name1=""String_Node_Str"";
  String name2=""String_Node_Str"";
  Atom[] ca1=cache.getAtoms(name1);
  Atom[] ca2=cache.getAtoms(name2);
  assertEquals(715,ca1.length);
  assertEquals(697,ca2.length);
  System.out.println(""String_Node_Str"");
  AFPChain afpChainOrig=AFPChainXMLParser.fromXML(xml,ca1,ca2);
  assertEquals(""String_Node_Str"",new String(afpChainOrig.getAlnseq1()));
  assertEquals(""String_Node_Str"",new String(afpChainOrig.getAlnseq2()));
  afpChainOrig.setCalculationTime(-1);
  assertEquals(720,afpChainOrig.getAlnLength());
  assertEquals(28,afpChainOrig.getGapLen());
  assertTrue(afpChainOrig.getIdentity() > 0.99);
  assertTrue(afpChainOrig.getIdentity() < 1.0);
  System.out.println(""String_Node_Str"");
  String xmlComp=AFPChainXMLConverter.toXML(afpChainOrig,ca1,ca2);
  StringManipulationTestsHelper.assertEqualsIgnoreEndline(xml,xmlComp);
  StructureAlignment ce=StructureAlignmentFactory.getAlgorithm(CeMain.algorithmName);
  System.out.println(""String_Node_Str"");
  AFPChain afpChainNew=ce.align(ca1,ca2);
  afpChainNew.setCalculationTime(-1);
  afpChainNew.setName1(name1);
  afpChainNew.setName2(name2);
  String xmlNew=AFPChainXMLConverter.toXML(afpChainNew,ca1,ca2);
  StringManipulationTestsHelper.assertEqualsIgnoreEndline(xml,xmlNew);
  ChemCompGroupFactory.setChemCompProvider(ccprovorig);
}",0.7232767232767233
17004,"/** 
 * Calculate the TM-Score for the superposition. <p>Citation:<br/> <i>Zhang Y and Skolnick J (2004). ""Scoring function for automated assessment  of protein structure template quality"". Proteins 57: 702 - 710.</i>
 * @param atomSet1 atom array 1
 * @param atomSet2 atom array 2
 * @param len1 The full length of the protein supplying atomSet1
 * @param len2 The full length of the protein supplying atomSet2
 * @return The TM-Score 
 * @throws StructureException
 */
public static double getTMScore(Atom[] atomSet1,Atom[] atomSet2,int len1,int len2) throws StructureException {
  if (atomSet1.length != atomSet2.length) {
    throw new StructureException(""String_Node_Str"");
  }
  if (atomSet1.length > len1) {
    throw new StructureException(""String_Node_Str"");
  }
  if (atomSet2.length > len2) {
    throw new StructureException(""String_Node_Str"");
  }
  int Lmin=Math.min(len1,len2);
  int Laln=atomSet1.length;
  double d0=1.24 * Math.cbrt(Lmin - 15.) - 1.8;
  double d0sq=d0 * d0;
  double sum=0;
  for (int i=0; i < Laln; i++) {
    double d=Calc.getDistance(atomSet1[i],atomSet2[i]);
    sum+=1. / (1 + d * d / d0sq);
  }
  return sum / Lmin;
}","/** 
 * Calculate the TM-Score for the superposition. Atom sets must be pre-rotated. <p>Citation:<br/> <i>Zhang Y and Skolnick J (2004). ""Scoring function for automated assessment  of protein structure template quality"". Proteins 57: 702 - 710.</i>
 * @param atomSet1 atom array 1
 * @param atomSet2 atom array 2
 * @param len1 The full length of the protein supplying atomSet1
 * @param len2 The full length of the protein supplying atomSet2
 * @return The TM-Score 
 * @throws StructureException
 */
public static double getTMScore(Atom[] atomSet1,Atom[] atomSet2,int len1,int len2) throws StructureException {
  if (atomSet1.length != atomSet2.length) {
    throw new StructureException(""String_Node_Str"");
  }
  if (atomSet1.length > len1) {
    throw new StructureException(""String_Node_Str"");
  }
  if (atomSet2.length > len2) {
    throw new StructureException(""String_Node_Str"");
  }
  int Lmin=Math.min(len1,len2);
  int Laln=atomSet1.length;
  double d0=1.24 * Math.cbrt(Lmin - 15.) - 1.8;
  double d0sq=d0 * d0;
  double sum=0;
  for (int i=0; i < Laln; i++) {
    double d=Calc.getDistance(atomSet1[i],atomSet2[i]);
    sum+=1. / (1 + d * d / d0sq);
  }
  return sum / Lmin;
}",0.9867803837953092
17005,"/** 
 * Calculate the RMS (root mean square) deviation of two sets of atoms.
 * @param atomSet1 atom array 1
 * @param atomSet2 atom array 2
 * @return the RMS of two atom sets
 * @throws StructureException
 */
public static double getRMS(Atom[] atomSet1,Atom[] atomSet2) throws StructureException {
  if (atomSet1.length != atomSet2.length) {
    throw new StructureException(""String_Node_Str"");
  }
  double sum=0.0;
  for (int i=0; i < atomSet1.length; i++) {
    double d=Calc.getDistance(atomSet1[i],atomSet2[i]);
    sum+=(d * d);
  }
  double avd=(sum / atomSet1.length);
  return Math.sqrt(avd);
}","/** 
 * Calculate the RMS (root mean square) deviation of two sets of atoms. Atom sets must be pre-rotated.
 * @param atomSet1 atom array 1
 * @param atomSet2 atom array 2
 * @return the RMS of two atom sets
 * @throws StructureException
 */
public static double getRMS(Atom[] atomSet1,Atom[] atomSet2) throws StructureException {
  if (atomSet1.length != atomSet2.length) {
    throw new StructureException(""String_Node_Str"");
  }
  double sum=0.0;
  for (int i=0; i < atomSet1.length; i++) {
    double d=Calc.getDistance(atomSet1[i],atomSet2[i]);
    sum+=(d * d);
  }
  double avd=(sum / atomSet1.length);
  return Math.sqrt(avd);
}",0.9750201450443192
17006,"public static AFPChain filterDuplicateAFPs(AFPChain afpChain,CECalculator ceCalc,Atom[] ca1,Atom[] ca2duplicated,int minCPlength) throws StructureException {
  AFPChain newAFPChain=new AFPChain(afpChain);
  int ca2len=afpChain.getCa2Length() / 2;
  newAFPChain.setCa2Length(ca2len);
  int[][][] optAln=afpChain.getOptAln();
  int[] optLen=afpChain.getOptLen();
  int alignLen=afpChain.getOptLength();
  if (alignLen < 1)   return newAFPChain;
  assert(afpChain.getBlockNum() == 1);
  int nStart=optAln[0][1][0];
  int cEnd=optAln[0][1][alignLen - 1];
  int firstRes=nStart;
  int lastRes=nStart + ca2len;
  if (nStart >= ca2len || cEnd < ca2len) {
    firstRes=nStart;
    lastRes=cEnd;
  }
 else {
    int overlapLength=cEnd + 1 - nStart - ca2len;
    if (overlapLength <= 0) {
      CPRange minCP=calculateMinCP(optAln[0][1],alignLen,ca2len,minCPlength);
      firstRes=nStart;
      lastRes=cEnd;
      if (firstRes > minCP.n) {
        firstRes=ca2len;
        if (debug) {
          System.out.format(""String_Node_Str"" + ""String_Node_Str"",minCP.mid,minCPlength);
        }
      }
      if (lastRes < minCP.c) {
        lastRes=ca2len - 1;
        if (debug) {
          System.out.format(""String_Node_Str"" + ""String_Node_Str"",optLen[0] - minCP.mid,minCPlength);
        }
      }
    }
 else {
      CutPoint cp=calculateCutPoint(optAln[0][1],nStart,cEnd,overlapLength,alignLen,minCPlength,ca2len,firstRes);
      firstRes=cp.firstRes;
      lastRes=cp.lastRes;
    }
  }
  List<ResiduePair> left=new ArrayList<ResiduePair>();
  List<ResiduePair> right=new ArrayList<ResiduePair>();
  for (int i=0; i < optLen[0]; i++) {
    if (optAln[0][1][i] >= firstRes && optAln[0][1][i] <= lastRes) {
      if (optAln[0][1][i] < ca2len) {
        left.add(new ResiduePair(optAln[0][0][i],optAln[0][1][i]));
      }
 else {
        right.add(new ResiduePair(optAln[0][0][i],optAln[0][1][i] - ca2len));
      }
    }
  }
  alignLen=0;
  List<List<ResiduePair>> blocks=new ArrayList<List<ResiduePair>>(2);
  if (!left.isEmpty()) {
    blocks.add(left);
    alignLen+=left.size();
  }
  if (!right.isEmpty()) {
    blocks.add(right);
    alignLen+=right.size();
  }
  left=null;
  right=null;
  int[][][] newAlign=new int[blocks.size()][][];
  int[] blockLengths=new int[blocks.size()];
  for (int blockNum=0; blockNum < blocks.size(); blockNum++) {
    List<ResiduePair> block=blocks.get(blockNum);
    newAlign[blockNum]=new int[2][block.size()];
    for (int i=0; i < block.size(); i++) {
      ResiduePair pair=block.get(i);
      newAlign[blockNum][0][i]=pair.a;
      newAlign[blockNum][1][i]=pair.b;
    }
    blockLengths[blockNum]=block.size();
  }
  newAFPChain.setOptAln(newAlign);
  newAFPChain.setOptLen(blockLengths);
  newAFPChain.setOptLength(alignLen);
  newAFPChain.setBlockNum(blocks.size());
  newAFPChain.setBlockResSize(blockLengths.clone());
  newAFPChain.setSequentialAlignment(blocks.size() == 1);
  Atom[] atoms1=new Atom[alignLen];
  Atom[] atoms2=new Atom[alignLen];
  int pos=0;
  for (  List<ResiduePair> block : blocks) {
    for (    ResiduePair pair : block) {
      atoms1[pos]=ca1[pair.a];
      atoms2[pos]=ca2duplicated[pair.b];
      pos++;
    }
  }
  assert(pos == alignLen);
  double rmsd;
  double[] blockRMSDs=new double[blocks.size()];
  Matrix[] blockRotationMatrices=new Matrix[blocks.size()];
  Atom[] blockShifts=new Atom[blocks.size()];
  if (alignLen > 0) {
    rmsd=ceCalc.calc_rmsd(atoms1,atoms2,alignLen,true,false);
    blockRMSDs[0]=rmsd;
    blockRotationMatrices[0]=ceCalc.getRotationMatrix();
    blockShifts[0]=ceCalc.getShift();
    for (int i=1; i < blocks.size(); i++) {
      blockRMSDs[i]=rmsd;
      blockRotationMatrices[i]=(Matrix)blockRotationMatrices[0].clone();
      blockShifts[i]=(Atom)blockShifts[0].clone();
    }
  }
  newAFPChain.setOptRmsd(blockRMSDs);
  newAFPChain.setBlockRmsd(blockRMSDs);
  newAFPChain.setBlockRotationMatrix(blockRotationMatrices);
  newAFPChain.setBlockShiftVector(blockShifts);
  Atom[] ca2=new Atom[ca2len];
  for (int i=0; i < ca2len; i++) {
    ca2[i]=ca2duplicated[i];
  }
  AFPAlignmentDisplay.getAlign(newAFPChain,ca1,ca2duplicated);
  return newAFPChain;
}","public static AFPChain filterDuplicateAFPs(AFPChain afpChain,CECalculator ceCalc,Atom[] ca1,Atom[] ca2duplicated,int minCPlength) throws StructureException {
  AFPChain newAFPChain=new AFPChain(afpChain);
  int ca2len=afpChain.getCa2Length() / 2;
  newAFPChain.setCa2Length(ca2len);
  int[][][] optAln=afpChain.getOptAln();
  int[] optLen=afpChain.getOptLen();
  int alignLen=afpChain.getOptLength();
  if (alignLen < 1)   return newAFPChain;
  assert(afpChain.getBlockNum() == 1);
  int nStart=optAln[0][1][0];
  int cEnd=optAln[0][1][alignLen - 1];
  int firstRes=nStart;
  int lastRes=nStart + ca2len;
  if (nStart >= ca2len || cEnd < ca2len) {
    firstRes=nStart;
    lastRes=cEnd;
  }
 else {
    int overlapLength=cEnd + 1 - nStart - ca2len;
    if (overlapLength <= 0) {
      CPRange minCP=calculateMinCP(optAln[0][1],alignLen,ca2len,minCPlength);
      firstRes=nStart;
      lastRes=cEnd;
      if (firstRes > minCP.n) {
        firstRes=ca2len;
        if (debug) {
          System.out.format(""String_Node_Str"" + ""String_Node_Str"",minCP.mid,minCPlength);
        }
      }
      if (lastRes < minCP.c) {
        lastRes=ca2len - 1;
        if (debug) {
          System.out.format(""String_Node_Str"" + ""String_Node_Str"",optLen[0] - minCP.mid,minCPlength);
        }
      }
    }
 else {
      CutPoint cp=calculateCutPoint(optAln[0][1],nStart,cEnd,overlapLength,alignLen,minCPlength,ca2len,firstRes);
      firstRes=cp.firstRes;
      lastRes=cp.lastRes;
    }
  }
  List<ResiduePair> left=new ArrayList<ResiduePair>();
  List<ResiduePair> right=new ArrayList<ResiduePair>();
  for (int i=0; i < optLen[0]; i++) {
    if (optAln[0][1][i] >= firstRes && optAln[0][1][i] <= lastRes) {
      if (optAln[0][1][i] < ca2len) {
        left.add(new ResiduePair(optAln[0][0][i],optAln[0][1][i]));
      }
 else {
        right.add(new ResiduePair(optAln[0][0][i],optAln[0][1][i] - ca2len));
      }
    }
  }
  alignLen=0;
  List<List<ResiduePair>> blocks=new ArrayList<List<ResiduePair>>(2);
  if (!left.isEmpty()) {
    blocks.add(left);
    alignLen+=left.size();
  }
  if (!right.isEmpty()) {
    blocks.add(right);
    alignLen+=right.size();
  }
  left=null;
  right=null;
  int[][][] newAlign=new int[blocks.size()][][];
  int[] blockLengths=new int[blocks.size()];
  for (int blockNum=0; blockNum < blocks.size(); blockNum++) {
    List<ResiduePair> block=blocks.get(blockNum);
    newAlign[blockNum]=new int[2][block.size()];
    for (int i=0; i < block.size(); i++) {
      ResiduePair pair=block.get(i);
      newAlign[blockNum][0][i]=pair.a;
      newAlign[blockNum][1][i]=pair.b;
    }
    blockLengths[blockNum]=block.size();
  }
  newAFPChain.setOptAln(newAlign);
  newAFPChain.setOptLen(blockLengths);
  newAFPChain.setOptLength(alignLen);
  newAFPChain.setBlockNum(blocks.size());
  newAFPChain.setBlockResSize(blockLengths.clone());
  newAFPChain.setSequentialAlignment(blocks.size() == 1);
  Atom[] atoms1=new Atom[alignLen];
  Atom[] atoms2=new Atom[alignLen];
  int pos=0;
  for (  List<ResiduePair> block : blocks) {
    for (    ResiduePair pair : block) {
      atoms1[pos]=ca1[pair.a];
      atoms2[pos]=ca2duplicated[pair.b];
      pos++;
    }
  }
  assert(pos == alignLen);
  double rmsd=-1;
  double[] blockRMSDs=new double[blocks.size()];
  Matrix[] blockRotationMatrices=new Matrix[blocks.size()];
  Atom[] blockShifts=new Atom[blocks.size()];
  if (alignLen > 0) {
    rmsd=ceCalc.calc_rmsd(atoms1,atoms2,alignLen,true,false);
    blockRMSDs[0]=rmsd;
    blockRotationMatrices[0]=ceCalc.getRotationMatrix();
    blockShifts[0]=ceCalc.getShift();
    for (int i=1; i < blocks.size(); i++) {
      blockRMSDs[i]=rmsd;
      blockRotationMatrices[i]=(Matrix)blockRotationMatrices[0].clone();
      blockShifts[i]=(Atom)blockShifts[0].clone();
    }
  }
  newAFPChain.setOptRmsd(blockRMSDs);
  newAFPChain.setBlockRmsd(blockRMSDs);
  newAFPChain.setBlockRotationMatrix(blockRotationMatrices);
  newAFPChain.setBlockShiftVector(blockShifts);
  newAFPChain.setTotalRmsdOpt(rmsd);
  Atom[] ca2=new Atom[ca2len];
  for (int i=0; i < ca2len; i++) {
    ca2[i]=ca2duplicated[i];
  }
  AFPAlignmentDisplay.getAlign(newAFPChain,ca1,ca2duplicated);
  return newAFPChain;
}",0.9952107279693486
17007,"/** 
 * After the alignment changes (optAln, optLen, blockNum, at a minimum), many other properties which depend on the superposition will be invalid. This method re-runs a rigid superposition over the whole alignment and repopulates the required properties, including RMSD (TotalRMSD) and TM-Score.
 * @param afpChain
 * @param ca1
 * @param ca2
 * @throws StructureException
 * @see {@link CECalculator#calc_rmsd(Atom[],Atom[],int,boolean,boolean)}contains much of the same code, but stores results in a CECalculator instance rather than an AFPChain 
 */
public static void updateSuperposition(AFPChain afpChain,Atom[] ca1,Atom[] ca2) throws StructureException {
  int optLength=afpChain.getOptLength();
  int alnPos=0;
  Atom[] aln1=new Atom[optLength];
  Atom[] aln2=new Atom[optLength];
  int[] optLen=afpChain.getOptLen();
  int[][][] optAln=afpChain.getOptAln();
  int blockNum=afpChain.getBlockNum();
  for (int blk=0; blk < blockNum; blk++) {
    for (int pos=0; pos < optLen[blk]; pos++) {
      int res1=optAln[blk][0][pos];
      int res2=optAln[blk][1][pos];
      aln1[alnPos]=ca1[res1];
      aln2[alnPos]=ca2[res2];
      alnPos++;
    }
  }
  SVDSuperimposer svd=new SVDSuperimposer(aln1,aln2);
  Matrix matrix=svd.getRotation();
  Atom shift=svd.getTranslation();
  for (  Atom a : ca2) {
    Calc.rotate(a.getGroup(),matrix);
    Calc.shift(a.getGroup(),shift);
  }
  double rmsd=svd.getRMS(ca1,ca2);
  double tm=svd.getTMScore(aln1,aln2,ca1.length,ca2.length);
  afpChain.setTotalRmsdOpt(rmsd);
  afpChain.setOptRmsd(null);
  afpChain.setBlockRmsd(null);
}","/** 
 * After the alignment changes (optAln, optLen, blockNum, at a minimum), many other properties which depend on the superposition will be invalid. This method re-runs a rigid superposition over the whole alignment and repopulates the required properties, including RMSD (TotalRMSD) and TM-Score.
 * @param afpChain
 * @param ca1
 * @param ca2 Second set of ca atoms. Will be modified based on the superposition
 * @throws StructureException
 * @see {@link CECalculator#calc_rmsd(Atom[],Atom[],int,boolean,boolean)}contains much of the same code, but stores results in a CECalculator instance rather than an AFPChain 
 */
public static void updateSuperposition(AFPChain afpChain,Atom[] ca1,Atom[] ca2) throws StructureException {
  int optLength=afpChain.getOptLength();
  int alnPos=0;
  Atom[] aln1=new Atom[optLength];
  Atom[] aln2=new Atom[optLength];
  int[] optLen=afpChain.getOptLen();
  int[][][] optAln=afpChain.getOptAln();
  int blockNum=afpChain.getBlockNum();
  for (int blk=0; blk < blockNum; blk++) {
    for (int pos=0; pos < optLen[blk]; pos++) {
      int res1=optAln[blk][0][pos];
      int res2=optAln[blk][1][pos];
      aln1[alnPos]=ca1[res1];
      aln2[alnPos]=ca2[res2];
      alnPos++;
    }
  }
  SVDSuperimposer svd=new SVDSuperimposer(aln1,aln2);
  Matrix matrix=svd.getRotation();
  Atom shift=svd.getTranslation();
  if (ca2.length > 0 && ca2[0].getGroup() != null && ca2[0].getGroup().getChain() != null && ca2[0].getGroup().getChain().getParent() != null) {
    Structure struct=ca2[0].getGroup().getChain().getParent();
    Calc.rotate(struct,matrix);
    Calc.shift(struct,shift);
  }
 else {
    for (    Atom a : ca2) {
      Calc.rotate(a.getGroup(),matrix);
      Calc.shift(a.getGroup(),shift);
    }
  }
  double rms=SVDSuperimposer.getRMS(ca1,ca2);
  double tm=SVDSuperimposer.getTMScore(aln1,aln2,ca1.length,ca2.length);
  afpChain.setTotalRmsdOpt(Math.sqrt(rms));
  afpChain.setTMScore(tm);
  double[] dummy=new double[blockNum];
  Arrays.fill(dummy,-1.);
  afpChain.setOptRmsd(dummy);
  afpChain.setBlockRmsd(dummy);
}",0.8514960197639309
17008,"public Structure getAsymUnit(String pdbId){
  if (s == null || (!s.getPDBCode().equalsIgnoreCase(pdbId))) {
    loadPDB(pdbId);
  }
  if (s.nrModels() > 1)   s=StructureTools.removeModels(s);
  return s;
}","public Structure getAsymUnit(String pdbId){
  if (s == null || (!s.getPDBCode().equalsIgnoreCase(pdbId))) {
    loadPDB(pdbId);
  }
  if (s.nrModels() > 1) {
    boolean isNMR=s.isNmr();
    s.setNmr(true);
    s=StructureTools.removeModels(s);
    s.setNmr(isNMR);
  }
  return s;
}",0.7991803278688525
17009,"/** 
 * Calculate the rotation axis for the normal case, where there is a significant rotation angle
 * @param rotation
 * @param translation
 * @param c
 */
private void calculateRotationalAxis(Matrix rotation,Atom translation,double c){
  double sum=0;
  double[] rotAx=new double[3];
  for (int i=0; i < 3; i++) {
    rotAx[i]=Math.sqrt(rotation.get(i,i) - c);
    sum+=rotAx[i] * rotAx[i];
  }
  for (int i=0; i < 3; i++) {
    rotAx[i]/=Math.sqrt(sum);
  }
  double d0=rotation.get(2,1) - rotation.get(1,2);
  double d1=rotation.get(0,2) - rotation.get(2,0);
  double d2=rotation.get(1,0) - rotation.get(0,1);
  double s12=rotation.get(2,1) + rotation.get(1,2);
  double s02=rotation.get(0,2) + rotation.get(2,0);
  double s01=rotation.get(1,0) + rotation.get(0,1);
  if (Math.abs(d0) < Math.abs(d1)) {
    if (Math.abs(d1) < Math.abs(d2)) {
      if (d2 >= 0) {
        if (s02 < 0)         rotAx[0]=-rotAx[0];
        if (s12 < 0)         rotAx[1]=-rotAx[1];
      }
 else {
        rotAx[2]=-rotAx[2];
        if (s02 >= 0)         rotAx[0]=-rotAx[0];
        if (s12 >= 0)         rotAx[1]=-rotAx[1];
      }
    }
 else {
      if (d1 >= 0) {
        if (s01 < 0)         rotAx[0]=-rotAx[0];
        if (s12 < 0)         rotAx[2]=-rotAx[2];
      }
 else {
        rotAx[1]=-rotAx[1];
        if (s01 >= 0)         rotAx[0]=-rotAx[0];
        if (s12 >= 0)         rotAx[2]=-rotAx[2];
      }
    }
  }
 else {
    if (d0 >= 0) {
      if (s01 < 0)       rotAx[0]=-rotAx[0];
      if (s02 < 0)       rotAx[2]=-rotAx[2];
    }
 else {
      rotAx[0]=-rotAx[0];
      if (s01 >= 0)       rotAx[0]=-rotAx[0];
      if (s02 >= 0)       rotAx[2]=-rotAx[2];
    }
  }
  rotationAxis=new AtomImpl();
  rotationAxis.setCoords(rotAx);
  double dotProduct=Calc.skalarProduct(rotationAxis,translation);
  screwTranslation=Calc.scale(rotationAxis,dotProduct);
  otherTranslation=Calc.subtract(translation,screwTranslation);
  Atom hypot=Calc.vectorProduct(otherTranslation,rotationAxis);
  Calc.scaleEquals(hypot,.5 / Math.tan(theta / 2.0));
  rotationPos=Calc.scaleAdd(.5,otherTranslation,hypot);
}","/** 
 * Calculate the rotation axis for the normal case, where there is a significant rotation angle
 * @param rotation
 * @param translation
 * @param c
 */
private void calculateRotationalAxis(Matrix rotation,Atom translation,double c){
  double sum=0;
  double[] rotAx=new double[3];
  for (int i=0; i < 3; i++) {
    rotAx[i]=Math.sqrt(rotation.get(i,i) - c);
    sum+=rotAx[i] * rotAx[i];
  }
  for (int i=0; i < 3; i++) {
    rotAx[i]/=Math.sqrt(sum);
  }
  double d0=rotation.get(2,1) - rotation.get(1,2);
  double d1=rotation.get(0,2) - rotation.get(2,0);
  double d2=rotation.get(1,0) - rotation.get(0,1);
  double s12=rotation.get(2,1) + rotation.get(1,2);
  double s02=rotation.get(0,2) + rotation.get(2,0);
  double s01=rotation.get(1,0) + rotation.get(0,1);
  if (Math.abs(d0) < Math.abs(d1)) {
    if (Math.abs(d1) < Math.abs(d2)) {
      if (d2 >= 0) {
        if (s02 < 0)         rotAx[0]=-rotAx[0];
        if (s12 < 0)         rotAx[1]=-rotAx[1];
      }
 else {
        rotAx[2]=-rotAx[2];
        if (s02 >= 0)         rotAx[0]=-rotAx[0];
        if (s12 >= 0)         rotAx[1]=-rotAx[1];
      }
    }
 else {
      if (d1 >= 0) {
        if (s01 < 0)         rotAx[0]=-rotAx[0];
        if (s12 < 0)         rotAx[2]=-rotAx[2];
      }
 else {
        rotAx[1]=-rotAx[1];
        if (s01 >= 0)         rotAx[0]=-rotAx[0];
        if (s12 >= 0)         rotAx[2]=-rotAx[2];
      }
    }
  }
 else {
    if (Math.abs(d0) < Math.abs(d2)) {
      if (d2 >= 0) {
        if (s02 < 0)         rotAx[0]=-rotAx[0];
        if (s12 < 0)         rotAx[1]=-rotAx[1];
      }
 else {
        rotAx[2]=-rotAx[2];
        if (s02 >= 0)         rotAx[0]=-rotAx[0];
        if (s12 >= 0)         rotAx[1]=-rotAx[1];
      }
    }
 else {
      if (d0 >= 0) {
        if (s01 < 0)         rotAx[1]=-rotAx[1];
        if (s02 < 0)         rotAx[2]=-rotAx[2];
      }
 else {
        rotAx[0]=-rotAx[0];
        if (s01 >= 0)         rotAx[1]=-rotAx[1];
        if (s02 >= 0)         rotAx[2]=-rotAx[2];
      }
    }
  }
  rotationAxis=new AtomImpl();
  rotationAxis.setCoords(rotAx);
  double dotProduct=Calc.skalarProduct(rotationAxis,translation);
  screwTranslation=Calc.scale(rotationAxis,dotProduct);
  otherTranslation=Calc.subtract(translation,screwTranslation);
  Atom hypot=Calc.vectorProduct(otherTranslation,rotationAxis);
  Calc.scaleEquals(hypot,.5 / Math.tan(theta / 2.0));
  rotationPos=Calc.scaleAdd(.5,otherTranslation,hypot);
}",0.8931398416886543
17010,"/** 
 * Calculate the rotation axis for the normal case, where there is a significant rotation angle
 * @param rotation
 * @param translation
 * @param c
 */
private void calculateRotationalAxis(Matrix rotation,Atom translation,double c){
  double sum=0;
  double[] rotAx=new double[3];
  for (int i=0; i < 3; i++) {
    rotAx[i]=Math.sqrt(rotation.get(i,i) - c);
    sum+=rotAx[i] * rotAx[i];
  }
  for (int i=0; i < 3; i++) {
    rotAx[i]/=Math.sqrt(sum);
  }
  double d0=rotation.get(2,1) - rotation.get(1,2);
  double d1=rotation.get(0,2) - rotation.get(2,0);
  double d2=rotation.get(1,0) - rotation.get(0,1);
  double s12=rotation.get(2,1) + rotation.get(1,2);
  double s02=rotation.get(0,2) + rotation.get(2,0);
  double s01=rotation.get(1,0) + rotation.get(0,1);
  if (Math.abs(d0) < Math.abs(d1)) {
    if (Math.abs(d1) < Math.abs(d2)) {
      if (d2 >= 0) {
        if (s02 < 0)         rotAx[0]=-rotAx[0];
        if (s12 < 0)         rotAx[1]=-rotAx[1];
      }
 else {
        rotAx[2]=-rotAx[2];
        if (s02 >= 0)         rotAx[0]=-rotAx[0];
        if (s12 >= 0)         rotAx[1]=-rotAx[1];
      }
    }
 else {
      if (d1 >= 0) {
        if (s01 < 0)         rotAx[0]=-rotAx[0];
        if (s12 < 0)         rotAx[2]=-rotAx[2];
      }
 else {
        rotAx[1]=-rotAx[1];
        if (s01 >= 0)         rotAx[0]=-rotAx[0];
        if (s12 >= 0)         rotAx[2]=-rotAx[2];
      }
    }
  }
 else {
    if (d0 >= 0) {
      if (s01 < 0)       rotAx[0]=-rotAx[0];
      if (s02 < 0)       rotAx[2]=-rotAx[2];
    }
 else {
      rotAx[0]=-rotAx[0];
      if (s01 >= 0)       rotAx[0]=-rotAx[0];
      if (s02 >= 0)       rotAx[2]=-rotAx[2];
    }
  }
  rotationAxis=new AtomImpl();
  rotationAxis.setCoords(rotAx);
  double dotProduct=Calc.skalarProduct(rotationAxis,translation);
  screwTranslation=Calc.scale(rotationAxis,dotProduct);
  otherTranslation=Calc.subtract(translation,screwTranslation);
  Atom hypot=Calc.vectorProduct(rotationAxis,otherTranslation);
  Calc.scaleEquals(hypot,.5 / Math.tan(theta / 2.0));
  rotationPos=Calc.scaleAdd(.5,otherTranslation,hypot);
}","/** 
 * Calculate the rotation axis for the normal case, where there is a significant rotation angle
 * @param rotation
 * @param translation
 * @param c
 */
private void calculateRotationalAxis(Matrix rotation,Atom translation,double c){
  double sum=0;
  double[] rotAx=new double[3];
  for (int i=0; i < 3; i++) {
    rotAx[i]=Math.sqrt(rotation.get(i,i) - c);
    sum+=rotAx[i] * rotAx[i];
  }
  for (int i=0; i < 3; i++) {
    rotAx[i]/=Math.sqrt(sum);
  }
  double d0=rotation.get(2,1) - rotation.get(1,2);
  double d1=rotation.get(0,2) - rotation.get(2,0);
  double d2=rotation.get(1,0) - rotation.get(0,1);
  double s12=rotation.get(2,1) + rotation.get(1,2);
  double s02=rotation.get(0,2) + rotation.get(2,0);
  double s01=rotation.get(1,0) + rotation.get(0,1);
  if (Math.abs(d0) < Math.abs(d1)) {
    if (Math.abs(d1) < Math.abs(d2)) {
      if (d2 >= 0) {
        if (s02 < 0)         rotAx[0]=-rotAx[0];
        if (s12 < 0)         rotAx[1]=-rotAx[1];
      }
 else {
        rotAx[2]=-rotAx[2];
        if (s02 >= 0)         rotAx[0]=-rotAx[0];
        if (s12 >= 0)         rotAx[1]=-rotAx[1];
      }
    }
 else {
      if (d1 >= 0) {
        if (s01 < 0)         rotAx[0]=-rotAx[0];
        if (s12 < 0)         rotAx[2]=-rotAx[2];
      }
 else {
        rotAx[1]=-rotAx[1];
        if (s01 >= 0)         rotAx[0]=-rotAx[0];
        if (s12 >= 0)         rotAx[2]=-rotAx[2];
      }
    }
  }
 else {
    if (d0 >= 0) {
      if (s01 < 0)       rotAx[0]=-rotAx[0];
      if (s02 < 0)       rotAx[2]=-rotAx[2];
    }
 else {
      rotAx[0]=-rotAx[0];
      if (s01 >= 0)       rotAx[0]=-rotAx[0];
      if (s02 >= 0)       rotAx[2]=-rotAx[2];
    }
  }
  rotationAxis=new AtomImpl();
  rotationAxis.setCoords(rotAx);
  double dotProduct=Calc.skalarProduct(rotationAxis,translation);
  screwTranslation=Calc.scale(rotationAxis,dotProduct);
  otherTranslation=Calc.subtract(translation,screwTranslation);
  Atom hypot=Calc.vectorProduct(otherTranslation,rotationAxis);
  Calc.scaleEquals(hypot,.5 / Math.tan(theta / 2.0));
  rotationPos=Calc.scaleAdd(.5,otherTranslation,hypot);
}",0.99380066762041
17011,"/** 
 * Returns a Jmol script which will display the axis of rotation. This consists of a cyan arrow along the axis, plus an arc showing the angle of rotation. <p>As the rotation angle gets smaller, the axis of rotation becomes poorly defined and would need to get farther and farther away from the protein. This is not particularly useful, so we arbitrarily draw it parallel to the translation and omit the arc.
 * @param atoms Some atoms from the protein, used for determining the boundsof the axis.
 * @return The Jmol script, suitable for calls to{@link org.biojava.bio.structure.align.gui.jmol.StructureAlignmentJmol#evalString() jmol.evalString()}
 */
public String getJmolScript(Atom[] atoms){
  final double width=.5;
  double min, max;
  min=max=Calc.skalarProduct(rotationAxis,atoms[0]);
  for (int i=1; i < atoms.length; i++) {
    double prod=Calc.skalarProduct(rotationAxis,atoms[i]);
    if (prod < min)     min=prod;
    if (prod > max)     max=prod;
  }
  double uLen=Calc.skalarProduct(rotationAxis,rotationAxis);
  min/=uLen;
  max/=uLen;
  Atom axialPt;
  if (rotationPos == null) {
    Atom center=Calc.centerOfMass(atoms);
    Atom centerOnAxis=Calc.scale(rotationAxis,Calc.skalarProduct(center,rotationAxis));
    axialPt=Calc.subtract(center,centerOnAxis);
  }
 else {
    axialPt=rotationPos;
  }
  Atom axisMin=(Atom)axialPt.clone();
  Calc.scaleAdd(min,rotationAxis,axisMin);
  Atom axisMax=(Atom)axialPt.clone();
  Calc.scaleAdd(max,rotationAxis,axisMax);
  StringWriter result=new StringWriter();
  result.append(""String_Node_Str"");
  result.append(String.format(""String_Node_Str"",axisMin.getX(),axisMin.getY(),axisMin.getZ(),axisMax.getX(),axisMax.getY(),axisMax.getZ(),width));
  if (rotationPos != null) {
    result.append(System.getProperty(""String_Node_Str""));
    result.append(String.format(""String_Node_Str"",axisMin.getX(),axisMin.getY(),axisMin.getZ(),axisMax.getX(),axisMax.getY(),axisMax.getZ(),Math.toDegrees(theta),width));
  }
  return result.toString();
}","/** 
 * Returns a Jmol script which will display the axis of rotation. This consists of a cyan arrow along the axis, plus an arc showing the angle of rotation. <p>As the rotation angle gets smaller, the axis of rotation becomes poorly defined and would need to get farther and farther away from the protein. This is not particularly useful, so we arbitrarily draw it parallel to the translation and omit the arc.
 * @param atoms Some atoms from the protein, used for determining the boundsof the axis.
 * @return The Jmol script, suitable for calls to{@link org.biojava.bio.structure.align.gui.jmol.StructureAlignmentJmol#evalString() jmol.evalString()}
 */
public String getJmolScript(Atom[] atoms){
  final double width=.5;
  final double extraAxis=5.;
  final String color=""String_Node_Str"";
  double min, max;
  min=max=Calc.skalarProduct(rotationAxis,atoms[0]);
  for (int i=1; i < atoms.length; i++) {
    double prod=Calc.skalarProduct(rotationAxis,atoms[i]);
    if (prod < min)     min=prod;
    if (prod > max)     max=prod;
  }
  double uLen=Calc.skalarProduct(rotationAxis,rotationAxis);
  min/=uLen;
  max/=uLen;
  Atom axialPt;
  if (rotationPos == null) {
    Atom center=Calc.centerOfMass(atoms);
    Atom centerOnAxis=Calc.scale(rotationAxis,Calc.skalarProduct(center,rotationAxis));
    axialPt=Calc.subtract(center,centerOnAxis);
  }
 else {
    axialPt=rotationPos;
  }
  Atom axisMin=(Atom)axialPt.clone();
  Calc.scaleAdd(min - extraAxis,rotationAxis,axisMin);
  Atom axisMax=(Atom)axialPt.clone();
  Calc.scaleAdd(max + extraAxis,rotationAxis,axisMax);
  StringWriter result=new StringWriter();
  result.append(""String_Node_Str"");
  result.append(String.format(""String_Node_Str"",axisMin.getX(),axisMin.getY(),axisMin.getZ(),axisMax.getX(),axisMax.getY(),axisMax.getZ(),width,color));
  if (rotationPos != null) {
    result.append(System.getProperty(""String_Node_Str""));
    result.append(String.format(""String_Node_Str"",axisMin.getX(),axisMin.getY(),axisMin.getZ(),axisMax.getX(),axisMax.getY(),axisMax.getZ(),Math.toDegrees(theta),width,color));
  }
  return result.toString();
}",0.9744089690470388
17012,"public void run(){
  StructureAlignment algorithm=null;
  if (parent != null)   algorithm=parent.getStructureAlignment();
 else {
    algorithm=customAlgorithm;
  }
  job=new MultiThreadedDBSearch(name1,structure1,outFile,algorithm,nrCPUs,domainSplit);
  AtomCache cache=new AtomCache(config);
  System.out.println(""String_Node_Str"" + cache.getPath());
  job.setAtomCache(cache);
  if (name1.equals(""String_Node_Str"")) {
    job.setCustomFile1(parent.getDBSearch().getPDBUploadPanel().getFilePath1());
    job.setCustomChain1(parent.getDBSearch().getPDBUploadPanel().getChain1());
  }
  job.run();
  File resultList=job.getResultFile();
  if (parent != null) {
    parent.notifyCalcFinished();
    if (resultList != null) {
      DBResultTable table=new DBResultTable();
      table.show(resultList,config);
    }
  }
}","public void run(){
  StructureAlignment algorithm=null;
  if (parent != null)   algorithm=parent.getStructureAlignment();
 else {
    algorithm=customAlgorithm;
  }
  if (name1.startsWith(""String_Node_Str""))   name1=""String_Node_Str"";
  job=new MultiThreadedDBSearch(name1,structure1,outFile,algorithm,nrCPUs,domainSplit);
  AtomCache cache=new AtomCache(config);
  System.out.println(""String_Node_Str"" + cache.getPath());
  System.out.println(""String_Node_Str"" + name1);
  System.out.println(""String_Node_Str"" + structure1.getName());
  job.setAtomCache(cache);
  if (name1.equals(""String_Node_Str"")) {
    job.setCustomFile1(parent.getDBSearch().getPDBUploadPanel().getFilePath1());
    job.setCustomChain1(parent.getDBSearch().getPDBUploadPanel().getChain1());
  }
  job.run();
  File resultList=job.getResultFile();
  if (parent != null) {
    parent.notifyCalcFinished();
    if (resultList != null) {
      DBResultTable table=new DBResultTable();
      table.show(resultList,config);
    }
  }
}",0.899505766062603
17013,"/** 
 * #=GF <feature> <Generic per-File annotation, free text>
 * @param featureName 
 * @param value the line to be parsed
 */
private void handleFileAnnotation(String featureName,String value){
  if (featureName.equals(GF_ACCESSION_NUMBER)) {
    stockholmStructure.getFileAnnotation().setGFAccessionNumber(value);
  }
 else   if (featureName.equals(GF_IDENTIFICATION)) {
    stockholmStructure.getFileAnnotation().setGFIdentification(value);
  }
 else   if (featureName.equals(GF_DB_REFERENCE)) {
    stockholmStructure.getFileAnnotation().addDBReference(value);
  }
 else   if (featureName.equals(GF_DEFINITION)) {
    stockholmStructure.getFileAnnotation().setGFDefinition(value);
  }
 else   if (featureName.equals(GF_AUTHOR)) {
    stockholmStructure.getFileAnnotation().setGFAuthors(value);
  }
 else   if (featureName.equals(GF_ALIGNMENT_METHOD)) {
    stockholmStructure.getFileAnnotation().setAlignmentMethod(value);
  }
 else   if (featureName.equals(GF_BUILD_METHOD)) {
    stockholmStructure.getFileAnnotation().addGFBuildMethod(value);
  }
 else   if (featureName.equals(GF_SEARCH_METHOD)) {
    stockholmStructure.getFileAnnotation().setGFSearchMethod(value);
  }
 else   if (featureName.equals(GF_SOURCE_SEED)) {
    stockholmStructure.getFileAnnotation().setGFSourceSeed(value);
  }
 else   if (featureName.equals(GF_SOURCE_STRUCTURE)) {
    stockholmStructure.getFileAnnotation().setGFSourceStructure(value);
  }
 else   if (featureName.equals(GF_GATHERING_THRESHOLD)) {
    stockholmStructure.getFileAnnotation().setGFGatheringThreshs(value);
  }
 else   if (featureName.equals(GF_TRUSTED_CUTOFF)) {
    stockholmStructure.getFileAnnotation().setGFTrustedCutoffs(value);
  }
 else   if (featureName.equals(GF_NOISE_CUTOFF)) {
    stockholmStructure.getFileAnnotation().setGFNoiseCutoffs(value);
  }
 else   if (featureName.equals(GF_TYPE_FIELD)) {
    stockholmStructure.getFileAnnotation().setGFTypeField(value);
  }
 else   if (featureName.equals(GF_PREVIOUS_IDS)) {
    stockholmStructure.getFileAnnotation().setGFPreviousIDs(value);
  }
 else   if (featureName.equals(GF_SEQUENCE)) {
    status=STATUS_IN_SEQUENCE;
    stockholmStructure.getFileAnnotation().setGFNumSequences(value);
  }
 else   if (featureName.equals(GF_DB_COMMENT)) {
    stockholmStructure.getFileAnnotation().setGFDBComment(value);
  }
 else   if (featureName.equals(GF_REFERENCE_COMMENT)) {
    stockholmStructure.getFileAnnotation().setGFRefComment(value);
  }
 else   if (featureName.equals(GF_REFERENCE_NUMBER)) {
    StockholmFileAnnotationReference reference=new StockholmFileAnnotationReference();
    stockholmStructure.getFileAnnotation().getReferences().add(reference);
  }
 else   if (featureName.equals(GF_REFERENCE_MEDLINE)) {
    stockholmStructure.getFileAnnotation().getReferences().lastElement().setRefMedline(value);
  }
 else   if (featureName.equals(GF_REFERENCE_TITLE)) {
    stockholmStructure.getFileAnnotation().getReferences().lastElement().addToRefTitle(value);
  }
 else   if (featureName.equals(GF_REFERENCE_AUTHOR)) {
    stockholmStructure.getFileAnnotation().getReferences().lastElement().addToRefAuthor(value);
  }
 else   if (featureName.equals(GF_REFERENCE_LOCALTION)) {
    stockholmStructure.getFileAnnotation().getReferences().lastElement().setRefLocation(value);
  }
 else   if (featureName.equals(GF_KEYWORDS)) {
    stockholmStructure.getFileAnnotation().setGFKeywords(value);
  }
 else   if (featureName.equals(GF_COMMENT)) {
    stockholmStructure.getFileAnnotation().addToGFComment(value);
  }
 else   if (featureName.equals(GF_PFAM_ACCESSION)) {
    stockholmStructure.getFileAnnotation().setGFPfamAccession(value);
  }
 else   if (featureName.equals(GF_LOCATION)) {
    stockholmStructure.getFileAnnotation().setGFLocation(value);
  }
 else   if (featureName.equals(GF_WIKIPEDIA_LINK)) {
    stockholmStructure.getFileAnnotation().setGFWikipediaLink(value);
  }
 else   if (featureName.equals(GF_CLAN)) {
    stockholmStructure.getFileAnnotation().setGFClan(value);
  }
 else   if (featureName.equals(GF_MEMBERSHIP)) {
    stockholmStructure.getFileAnnotation().setGFMembership(value);
  }
 else   if (featureName.equals(GF_NEW_HAMPSHIRE)) {
    stockholmStructure.getFileAnnotation().addGFNewHampshire(value);
  }
 else   if (featureName.equals(GF_TREE_ID)) {
    stockholmStructure.getFileAnnotation().addGFTreeID(value);
  }
 else   if (featureName.equals(GF_FALSE_DISCOVERY_RATE)) {
    stockholmStructure.getFileAnnotation().addGFFalseDiscoveryRate(value);
  }
 else {
    System.err.println(""String_Node_Str"" + featureName + ""String_Node_Str"");
  }
}","/** 
 * #=GF &lt;feature&gt; &lt;Generic per-File annotation, free text&gt;
 * @param featureName 
 * @param value the line to be parsed
 */
private void handleFileAnnotation(String featureName,String value){
  if (featureName.equals(GF_ACCESSION_NUMBER)) {
    stockholmStructure.getFileAnnotation().setGFAccessionNumber(value);
  }
 else   if (featureName.equals(GF_IDENTIFICATION)) {
    stockholmStructure.getFileAnnotation().setGFIdentification(value);
  }
 else   if (featureName.equals(GF_DB_REFERENCE)) {
    stockholmStructure.getFileAnnotation().addDBReference(value);
  }
 else   if (featureName.equals(GF_DEFINITION)) {
    stockholmStructure.getFileAnnotation().setGFDefinition(value);
  }
 else   if (featureName.equals(GF_AUTHOR)) {
    stockholmStructure.getFileAnnotation().setGFAuthors(value);
  }
 else   if (featureName.equals(GF_ALIGNMENT_METHOD)) {
    stockholmStructure.getFileAnnotation().setAlignmentMethod(value);
  }
 else   if (featureName.equals(GF_BUILD_METHOD)) {
    stockholmStructure.getFileAnnotation().addGFBuildMethod(value);
  }
 else   if (featureName.equals(GF_SEARCH_METHOD)) {
    stockholmStructure.getFileAnnotation().setGFSearchMethod(value);
  }
 else   if (featureName.equals(GF_SOURCE_SEED)) {
    stockholmStructure.getFileAnnotation().setGFSourceSeed(value);
  }
 else   if (featureName.equals(GF_SOURCE_STRUCTURE)) {
    stockholmStructure.getFileAnnotation().setGFSourceStructure(value);
  }
 else   if (featureName.equals(GF_GATHERING_THRESHOLD)) {
    stockholmStructure.getFileAnnotation().setGFGatheringThreshs(value);
  }
 else   if (featureName.equals(GF_TRUSTED_CUTOFF)) {
    stockholmStructure.getFileAnnotation().setGFTrustedCutoffs(value);
  }
 else   if (featureName.equals(GF_NOISE_CUTOFF)) {
    stockholmStructure.getFileAnnotation().setGFNoiseCutoffs(value);
  }
 else   if (featureName.equals(GF_TYPE_FIELD)) {
    stockholmStructure.getFileAnnotation().setGFTypeField(value);
  }
 else   if (featureName.equals(GF_PREVIOUS_IDS)) {
    stockholmStructure.getFileAnnotation().setGFPreviousIDs(value);
  }
 else   if (featureName.equals(GF_SEQUENCE)) {
    status=STATUS_IN_SEQUENCE;
    stockholmStructure.getFileAnnotation().setGFNumSequences(value);
  }
 else   if (featureName.equals(GF_DB_COMMENT)) {
    stockholmStructure.getFileAnnotation().setGFDBComment(value);
  }
 else   if (featureName.equals(GF_REFERENCE_COMMENT)) {
    stockholmStructure.getFileAnnotation().setGFRefComment(value);
  }
 else   if (featureName.equals(GF_REFERENCE_NUMBER)) {
    StockholmFileAnnotationReference reference=new StockholmFileAnnotationReference();
    stockholmStructure.getFileAnnotation().getReferences().add(reference);
  }
 else   if (featureName.equals(GF_REFERENCE_MEDLINE)) {
    stockholmStructure.getFileAnnotation().getReferences().lastElement().setRefMedline(value);
  }
 else   if (featureName.equals(GF_REFERENCE_TITLE)) {
    stockholmStructure.getFileAnnotation().getReferences().lastElement().addToRefTitle(value);
  }
 else   if (featureName.equals(GF_REFERENCE_AUTHOR)) {
    stockholmStructure.getFileAnnotation().getReferences().lastElement().addToRefAuthor(value);
  }
 else   if (featureName.equals(GF_REFERENCE_LOCALTION)) {
    stockholmStructure.getFileAnnotation().getReferences().lastElement().setRefLocation(value);
  }
 else   if (featureName.equals(GF_KEYWORDS)) {
    stockholmStructure.getFileAnnotation().setGFKeywords(value);
  }
 else   if (featureName.equals(GF_COMMENT)) {
    stockholmStructure.getFileAnnotation().addToGFComment(value);
  }
 else   if (featureName.equals(GF_PFAM_ACCESSION)) {
    stockholmStructure.getFileAnnotation().setGFPfamAccession(value);
  }
 else   if (featureName.equals(GF_LOCATION)) {
    stockholmStructure.getFileAnnotation().setGFLocation(value);
  }
 else   if (featureName.equals(GF_WIKIPEDIA_LINK)) {
    stockholmStructure.getFileAnnotation().setGFWikipediaLink(value);
  }
 else   if (featureName.equals(GF_CLAN)) {
    stockholmStructure.getFileAnnotation().setGFClan(value);
  }
 else   if (featureName.equals(GF_MEMBERSHIP)) {
    stockholmStructure.getFileAnnotation().setGFMembership(value);
  }
 else   if (featureName.equals(GF_NEW_HAMPSHIRE)) {
    stockholmStructure.getFileAnnotation().addGFNewHampshire(value);
  }
 else   if (featureName.equals(GF_TREE_ID)) {
    stockholmStructure.getFileAnnotation().addGFTreeID(value);
  }
 else   if (featureName.equals(GF_FALSE_DISCOVERY_RATE)) {
    stockholmStructure.getFileAnnotation().addGFFalseDiscoveryRate(value);
  }
 else {
    System.err.println(""String_Node_Str"" + featureName + ""String_Node_Str"");
  }
}",0.9960895068433632
17014,"/** 
 * Parses a Stockholm file and returns a   {@link StockholmStructure} object with its content.This method returns just after reaching the end of structure delimiter line (""//""), leaving any remaining empty lines unconsumed.
 * @param scanner from where to read the file content
 * @return Stockholm file content
 * @throws IOException 
 * @throws Exception
 */
StockholmStructure parse(Scanner scanner) throws ParserException, IOException {
  if (scanner == null) {
    if (internalScanner != null) {
      scanner=internalScanner;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  this.stockholmStructure=new StockholmStructure();
  String line=null;
  int linesCount=0;
  try {
    do {
      line=scanner.nextLine();
      if (linesCount == 0 && line == null) {
        throw new IOException(""String_Node_Str"");
      }
      if ((line == null) || line.trim().length() == 0) {
        continue;
      }
      if (line.startsWith(""String_Node_Str"")) {
        if (line.startsWith(GENERIC_PER_FILE_ANNOTATION,2)) {
          int firstSpaceIndex=line.indexOf(' ',5);
          String featureName=line.substring(5,firstSpaceIndex);
          String value=line.substring(firstSpaceIndex).trim();
          handleFileAnnotation(featureName,value);
        }
 else         if (line.startsWith(GENERIC_PER_CONSENSUS_ANNOTATION,2)) {
          this.status=STATUS_INSIDE_FILE;
          int firstSpaceIndex=line.indexOf(' ',5);
          String featureName=line.substring(5,firstSpaceIndex);
          String value=line.substring(firstSpaceIndex).trim();
          handleConsensusAnnotation(featureName,value);
        }
 else         if (line.startsWith(GENERIC_PER_SEQUENCE_ANNOTATION,2)) {
          int index1=line.indexOf(' ',5);
          String seqName=line.substring(5,index1);
          while (line.charAt(++index1) <= ' ')           ;
          int index2=line.indexOf(' ',index1);
          String featureName=line.substring(index1,index2);
          String value=line.substring(index2).trim();
          handleSequenceAnnotation(seqName,featureName,value);
        }
 else         if (line.startsWith(GENERIC_PER_RESIDUE_ANNOTATION,2)) {
          int index1=line.indexOf(' ',5);
          String seqName=line.substring(5,index1);
          while (line.charAt(++index1) == ' ')           ;
          int index2=line.indexOf(' ',index1);
          String featureName=line.substring(index1,index2);
          String value=line.substring(index2).trim();
          handleResidueAnnotation(seqName,featureName,value);
        }
      }
 else       if (line.startsWith(""String_Node_Str"")) {
        if (status == STATUS_OUTSIDE_FILE) {
          status=STATUS_INSIDE_FILE;
          String[] header=line.split(""String_Node_Str"");
          stockholmStructure.getFileAnnotation().setFormat(header[1]);
          stockholmStructure.getFileAnnotation().setVersion(header[2]);
        }
 else {
          throw new ParserException(""String_Node_Str"" + line + ""String_Node_Str"");
        }
      }
 else       if (line.trim().equals(""String_Node_Str"")) {
        status=STATUS_OUTSIDE_FILE;
        break;
      }
 else {
        if (status == STATUS_IN_SEQUENCE) {
          handleSequenceLine(line);
        }
 else {
          System.err.println(""String_Node_Str"" + line + ""String_Node_Str"");
          throw new ParserException(""String_Node_Str"" + line + ""String_Node_Str"");
        }
      }
      linesCount++;
    }
 while (scanner.hasNextLine());
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw new IOException(""String_Node_Str"");
  }
  int length=-1;
  Map<String,StringBuffer> sequences=stockholmStructure.getSequences();
  for (  String sequencename : sequences.keySet()) {
    StringBuffer sequence=sequences.get(sequencename);
    if (length == -1) {
      length=sequence.length();
    }
 else     if (length != sequence.length()) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  return this.stockholmStructure;
}","/** 
 * Parses a Stockholm file and returns a   {@link StockholmStructure} object with its content.This method returns just after reaching the end of structure delimiter line (""//""), leaving any remaining empty lines unconsumed.
 * @param scanner from where to read the file content
 * @return Stockholm file content, <code>null</code> if couldn't or no more structures.
 * @throws IOException 
 * @throws Exception
 */
StockholmStructure parse(Scanner scanner) throws ParserException, IOException {
  if (scanner == null) {
    if (internalScanner != null) {
      scanner=internalScanner;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  String line=null;
  int linesCount=0;
  try {
    while (scanner.hasNextLine()) {
      line=scanner.nextLine();
      if (linesCount == 0 && line == null) {
        throw new IOException(""String_Node_Str"");
      }
      if ((line == null) || line.trim().length() == 0) {
        continue;
      }
      if (line.startsWith(""String_Node_Str"")) {
        if (line.startsWith(GENERIC_PER_FILE_ANNOTATION,2)) {
          int firstSpaceIndex=line.indexOf(' ',5);
          String featureName=line.substring(5,firstSpaceIndex);
          String value=line.substring(firstSpaceIndex).trim();
          handleFileAnnotation(featureName,value);
        }
 else         if (line.startsWith(GENERIC_PER_CONSENSUS_ANNOTATION,2)) {
          this.status=STATUS_INSIDE_FILE;
          int firstSpaceIndex=line.indexOf(' ',5);
          String featureName=line.substring(5,firstSpaceIndex);
          String value=line.substring(firstSpaceIndex).trim();
          handleConsensusAnnotation(featureName,value);
        }
 else         if (line.startsWith(GENERIC_PER_SEQUENCE_ANNOTATION,2)) {
          int index1=line.indexOf(' ',5);
          String seqName=line.substring(5,index1);
          while (line.charAt(++index1) <= ' ')           ;
          int index2=line.indexOf(' ',index1);
          String featureName=line.substring(index1,index2);
          String value=line.substring(index2).trim();
          handleSequenceAnnotation(seqName,featureName,value);
        }
 else         if (line.startsWith(GENERIC_PER_RESIDUE_ANNOTATION,2)) {
          int index1=line.indexOf(' ',5);
          String seqName=line.substring(5,index1);
          while (line.charAt(++index1) == ' ')           ;
          int index2=line.indexOf(' ',index1);
          String featureName=line.substring(index1,index2);
          String value=line.substring(index2).trim();
          handleResidueAnnotation(seqName,featureName,value);
        }
      }
 else       if (line.startsWith(""String_Node_Str"")) {
        if (status == STATUS_OUTSIDE_FILE) {
          status=STATUS_INSIDE_FILE;
          String[] header=line.split(""String_Node_Str"");
          this.stockholmStructure=new StockholmStructure();
          this.stockholmStructure.getFileAnnotation().setFormat(header[1]);
          this.stockholmStructure.getFileAnnotation().setVersion(header[2]);
        }
 else {
          throw new ParserException(""String_Node_Str"" + line + ""String_Node_Str"");
        }
      }
 else       if (line.trim().equals(""String_Node_Str"")) {
        status=STATUS_OUTSIDE_FILE;
        break;
      }
 else {
        if (status == STATUS_IN_SEQUENCE) {
          handleSequenceLine(line);
        }
 else {
          System.err.println(""String_Node_Str"" + line + ""String_Node_Str"");
          throw new ParserException(""String_Node_Str"" + line + ""String_Node_Str"");
        }
      }
      linesCount++;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw new IOException(""String_Node_Str"");
  }
  StockholmStructure structure=this.stockholmStructure;
  this.stockholmStructure=null;
  if (structure != null) {
    int length=-1;
    Map<String,StringBuffer> sequences=structure.getSequences();
    for (    String sequencename : sequences.keySet()) {
      StringBuffer sequence=sequences.get(sequencename);
      if (length == -1) {
        length=sequence.length();
      }
 else       if (length != sequence.length()) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  return structure;
}",0.907735549309544
17015,"/** 
 * #=GR <seqname> <feature> <Generic per-Residue annotation, exactly 1 char per residue>
 * @param line the line to be parsed
 */
private void handleResidueAnnotation(String seqName,String featureName,String value){
  if (featureName.equals(GR_SURFACE_ACCESSIBILITY)) {
    stockholmStructure.addSurfaceAccessibility(seqName,value);
  }
 else   if (featureName.equals(GR_TRANS_MEMBRANE)) {
    stockholmStructure.addTransMembrane(seqName,value);
  }
 else   if (featureName.equals(GR_POSTERIOR_PROBABILITY)) {
    stockholmStructure.addPosteriorProbability(seqName,value);
  }
 else   if (featureName.equals(GR_LIGAND_BINDING)) {
    stockholmStructure.addLigandBinding(seqName,value);
  }
 else   if (featureName.equals(GR_ACTIVE_SITE)) {
    stockholmStructure.addActiveSite(seqName,value);
  }
 else   if (featureName.equals(GR_AS_PFAM_PREDICTED)) {
    stockholmStructure.addASPFamPredicted(seqName,value);
  }
 else   if (featureName.equals(GR_AS_SWISSPROT)) {
    stockholmStructure.addASSwissProt(seqName,value);
  }
 else   if (featureName.equals(GR_INTRON)) {
    stockholmStructure.addIntron(seqName,value);
  }
 else   if (featureName.equals(GR_SECONDARY_STRUCTURE)) {
    stockholmStructure.addSecondaryStructure(seqName,value);
  }
 else {
    System.err.println(""String_Node_Str"" + featureName + ""String_Node_Str"");
  }
}","/** 
 * #=GR &lt;seqname&gt; &lt;feature&gt; &lt;Generic per-Residue annotation, exactly 1 char per residue&gt;
 * @param line the line to be parsed
 */
private void handleResidueAnnotation(String seqName,String featureName,String value){
  if (featureName.equals(GR_SURFACE_ACCESSIBILITY)) {
    stockholmStructure.addSurfaceAccessibility(seqName,value);
  }
 else   if (featureName.equals(GR_TRANS_MEMBRANE)) {
    stockholmStructure.addTransMembrane(seqName,value);
  }
 else   if (featureName.equals(GR_POSTERIOR_PROBABILITY)) {
    stockholmStructure.addPosteriorProbability(seqName,value);
  }
 else   if (featureName.equals(GR_LIGAND_BINDING)) {
    stockholmStructure.addLigandBinding(seqName,value);
  }
 else   if (featureName.equals(GR_ACTIVE_SITE)) {
    stockholmStructure.addActiveSite(seqName,value);
  }
 else   if (featureName.equals(GR_AS_PFAM_PREDICTED)) {
    stockholmStructure.addASPFamPredicted(seqName,value);
  }
 else   if (featureName.equals(GR_AS_SWISSPROT)) {
    stockholmStructure.addASSwissProt(seqName,value);
  }
 else   if (featureName.equals(GR_INTRON)) {
    stockholmStructure.addIntron(seqName,value);
  }
 else   if (featureName.equals(GR_SECONDARY_STRUCTURE)) {
    stockholmStructure.addSecondaryStructure(seqName,value);
  }
 else {
    System.err.println(""String_Node_Str"" + featureName + ""String_Node_Str"");
  }
}",0.9770200148257968
17016,"/** 
 * Handles a line that corresponds to a sequence. <br> e.g.: COATB_BPIKE/30-81 AEPNAATNYATEAMDSLKTQAIDLISQTWPVVTTVVVAGLVIRLFKKFSSKA <b>Warning: This function seems to fail when dealing with sequence with intrinsic space</b>
 * @param line the line to be parsed
 * @throws Exception
 */
private void handleSequenceLine(String line) throws ParserException {
  String[] lineContent=line.split(""String_Node_Str"");
  if (lineContent.length != 2) {
    throw new ParserException(""String_Node_Str"" + line);
  }
  stockholmStructure.addSequence(lineContent[0],lineContent[1]);
}","/** 
 * Handles a line that corresponds to a sequence. <br> e.g.: COATB_BPIKE/30-81 AEPNAATNYATEAMDSLKTQAIDLISQTWPVVTTVVVAGLVIRLFKKFSSKA<br> N.B.: This function can't tolerate sequences with intrinsic white space.
 * @param line the line to be parsed
 * @throws Exception
 */
private void handleSequenceLine(String line) throws ParserException {
  String[] lineContent=line.split(""String_Node_Str"");
  if (lineContent.length != 2) {
    throw new ParserException(""String_Node_Str"" + line);
  }
  stockholmStructure.addSequence(lineContent[0],lineContent[1]);
}",0.8916299559471366
17017,"/** 
 * Get HashMap of user data. Each Feature object has a Java HashMap object which can be used to annotate the Feature. JavaGene does not use or interpret the keys or values. The values can be any subtype of the Java Object class. <br><br> If a Feature is constructed from data fields, the initial HashMap has no mappings (is empty). If a Feature is constructed from another Feature, a copy of the mappings is made. Note that the Objects in the copied mapping are shared, even though the mapping itself is copied (not shared). Thus removing or adding a mapping to one Feature will not affect the other, but changing an Object which is part of an established mapping may affect both Features.
 * @return The user HashMap.
 */
public HashMap<String,Object> userData(){
  return mUserMap;
}","/** 
 * Get HashMap of user data. Each Feature object has a Java HashMap object which can be used to annotate the Feature. JavaGene does not use or interpret the keys or values. The values can be any subtype of the Java Object class. <br><br> If a Feature is constructed from data fields, the initial HashMap has no mappings (is empty). If a Feature is constructed from another Feature, a copy of the mappings is made. Note that the Objects in the copied mapping are shared, even though the mapping itself is copied (not shared). Thus removing or adding a mapping to one Feature will not affect the other, but changing an Object which is part of an established mapping may affect both Features.
 * @return The user HashMap.
 */
public HashMap<String,String> userData(){
  return mUserMap;
}",0.9924050632911392
17018,"/** 
 * Construct a new Feature from raw data (usually a GFF row).
 * @param seqname The sequence name field (field 1).
 * @param source The source or method field (field 2).
 * @param type The type of feature field (field 3).
 * @param location The location of the feature. (calculated from GFF start, end and strand fields).
 * @param score The score field (field 7).
 * @param frame The frame or phase field (field 8).
 * @param attributes A string of key/value pairs separated by semicolons (field 9).
 */
public Feature(String seqname,String source,String type,Location location,Double score,int frame,String attributes){
  mSeqname=seqname;
  mSource=source;
  mType=type;
  mLocation=location;
  mScore=score;
  mFrame=frame;
  mAttributes=attributes;
  initAttributeHashMap();
  mUserMap=new HashMap<String,Object>();
}","/** 
 * Construct a new Feature from raw data (usually a GFF row).
 * @param seqname The sequence name field (field 1).
 * @param source The source or method field (field 2).
 * @param type The type of feature field (field 3).
 * @param location The location of the feature. (calculated from GFF start, end and strand fields).
 * @param score The score field (field 7).
 * @param frame The frame or phase field (field 8).
 * @param attributes A string of key/value pairs separated by semicolons (field 9).
 */
public Feature(String seqname,String source,String type,Location location,Double score,int frame,String attributes){
  mSeqname=seqname;
  mSource=source;
  mType=type;
  mLocation=location;
  mScore=score;
  mFrame=frame;
  mAttributes=attributes;
  initAttributeHashMap();
  mUserMap=new HashMap<String,String>();
}",0.992744860943168
17019,"/** 
 * Get HashMap of user data.
 * @return The user HashMap.
 */
public HashMap<String,Object> userData();","/** 
 * Get HashMap of user data.
 * @return The user HashMap.
 */
public HashMap<String,String> userData();",0.9537037037037036
17020,"private void readMatrix(String line){
  String pos=line.substring(18,19);
  int i=Integer.parseInt(pos);
  String index=line.substring(21,24 + correct).trim();
  int id=Integer.parseInt(index);
  if (id != currentIndex) {
    addNewMatrix();
    currentIndex=id;
    currentMatrix=Matrix.identity(3,3);
    shift=new double[3];
  }
  String x=line.substring(24 + correct,33 + correct);
  String y=line.substring(34 + correct,43 + correct);
  String z=line.substring(44 + correct,53 + correct);
  String vec=line.substring(58 + correct,line.length()).trim();
  currentMatrix.set(0,(i - 1),Float.parseFloat(x));
  currentMatrix.set(1,(i - 1),Float.parseFloat(y));
  currentMatrix.set(2,(i - 1),Float.parseFloat(z));
  shift[i - 1]=Float.parseFloat(vec);
}","private void readMatrix(String line){
  System.out.println(line);
  String pos=line.substring(18,19);
  int i=Integer.parseInt(pos);
  String index=line.substring(21,24 + correct).trim();
  int id=Integer.parseInt(index);
  if (id != currentIndex) {
    addNewMatrix();
    currentIndex=id;
    currentMatrix=Matrix.identity(3,3);
    shift=new double[3];
  }
  String x=line.substring(24 + correct,33 + correct);
  String y=line.substring(34 + correct,43 + correct);
  String z=line.substring(44 + correct,53 + correct);
  String vec=line.substring(58 + correct,line.length()).trim();
  currentMatrix.set(0,(i - 1),Float.parseFloat(x));
  currentMatrix.set(1,(i - 1),Float.parseFloat(y));
  currentMatrix.set(2,(i - 1),Float.parseFloat(z));
  shift[i - 1]=Float.parseFloat(vec);
}",0.9817470664928292
17021,"/** 
 * See here for the current spec: http://www.wwpdb.org/documentation/format33/remarks2.html
 * @param line
 */
public void pdb_REMARK_350_Handler(String line){
  if (line.startsWith(""String_Node_Str"")) {
    String nr=line.substring(24,line.length()).trim();
    if (currentBioMolecule != null) {
      finalizeCurrentBioMolecule();
    }
    currentBioMolecule=Integer.parseInt(nr);
    currentIndex=1;
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    addToCurrentChainList(line);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    addToCurrentChainList(line);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    readMatrix(line);
  }
}","/** 
 * See here for the current spec: http://www.wwpdb.org/documentation/format33/remarks2.html
 * @param line
 */
public void pdb_REMARK_350_Handler(String line){
  if (line.startsWith(""String_Node_Str"")) {
    String nr=line.substring(24,line.length()).trim();
    if (currentBioMolecule != null) {
      finalizeCurrentBioMolecule();
    }
    currentBioMolecule=Integer.parseInt(nr);
    currentIndex=1;
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + currentChainIDs.size() + ""String_Node_Str""+ line);
    if (currentChainIDs.size() > 0) {
      addNewMatrix();
      currentChainIDs.clear();
      currentIndex++;
    }
    addToCurrentChainList(line);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    addToCurrentChainList(line);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    readMatrix(line);
  }
}",0.8617780661907852
17022,"private void addNewMatrix(){
  ModelTransformationMatrix max=new ModelTransformationMatrix();
  max.setMatrix(currentMatrix);
  max.setVector(shift);
  max.id=currentIndex + ""String_Node_Str"";
  for (  String chainId : currentChainIDs) {
    ModelTransformationMatrix m=(ModelTransformationMatrix)max.clone();
    m.setNdbChainId(chainId);
    transformations.add(m);
  }
  currentMatrix=new Matrix(3,3);
  shift=new double[3];
  if (currentIndex == 999) {
    correct+=1;
  }
}","private void addNewMatrix(){
  System.out.println(""String_Node_Str"" + currentIndex + ""String_Node_Str""+ currentChainIDs);
  ModelTransformationMatrix max=new ModelTransformationMatrix();
  max.setMatrix(currentMatrix);
  max.setVector(shift);
  max.id=currentIndex + ""String_Node_Str"";
  for (  String chainId : currentChainIDs) {
    ModelTransformationMatrix m=(ModelTransformationMatrix)max.clone();
    m.setNdbChainId(chainId);
    transformations.add(m);
  }
  currentMatrix=new Matrix(3,3);
  shift=new double[3];
  if (currentIndex == 999) {
    correct+=1;
  }
}",0.6387035271687321
17023,"public void finalizeCurrentBioMolecule(){
  addNewMatrix();
  transformationMap.put(currentBioMolecule,transformations);
  transformations=new ArrayList<ModelTransformationMatrix>();
  currentChainIDs.clear();
}","public void finalizeCurrentBioMolecule(){
  System.out.println(""String_Node_Str"" + currentBioMolecule);
  addNewMatrix();
  transformationMap.put(currentBioMolecule,transformations);
  transformations=new ArrayList<ModelTransformationMatrix>();
  System.out.println(""String_Node_Str"" + currentBioMolecule + ""String_Node_Str""+ currentChainIDs);
  currentChainIDs.clear();
}",0.7238421955403087
17024,"private void init(){
  operatorResolver=new OperatorResolver();
  modelTransformations=new ArrayList<ModelTransformationMatrix>(1);
  asymIds=new ArrayList<String>();
}","private void init(){
  operatorResolver=new OperatorResolver();
  modelTransformations=new ArrayList<ModelTransformationMatrix>(1);
}",0.8837209302325582
17025,"public Structure rebuildQuaternaryStructure(Structure asymUnit,List<ModelTransformationMatrix> transformations){
  Structure s=asymUnit.clone();
  List<Chain> transformedChains=new ArrayList<Chain>();
  System.out.print(""String_Node_Str"" + s.getPDBCode() + ""String_Node_Str"");
  for (  Chain c : s.getChains()) {
    System.out.print(c.getChainID());
    if (c.getInternalChainID() != null) {
      System.out.print(""String_Node_Str"" + c.getInternalChainID() + ""String_Node_Str"");
    }
  }
  for (  ModelTransformationMatrix max : transformations) {
    boolean foundChain=false;
    for (    Chain c : s.getChains()) {
      String intChainID=c.getInternalChainID();
      if (intChainID == null) {
        System.err.println(""String_Node_Str"" + c.getChainID() + ""String_Node_Str""+ max.ndbChainId+ ""String_Node_Str"");
        intChainID=c.getChainID();
      }
      if (max.ndbChainId.equals(intChainID)) {
        foundChain=true;
        Chain newChain=(Chain)c.clone();
        Matrix m=max.getMatrix();
        double[] vector=max.getVector();
        Atom v=new AtomImpl();
        v.setCoords(vector);
        for (        Group g : newChain.getAtomGroups()) {
          for (          Atom a : g.getAtoms()) {
            Calc.rotate(a,m);
            Calc.shift(a,v);
          }
        }
        transformedChains.add(newChain);
      }
    }
    if (!foundChain) {
      System.err.println(""String_Node_Str"" + max.ndbChainId);
    }
  }
  s.setChains(transformedChains);
  return s;
}","public Structure rebuildQuaternaryStructure(Structure asymUnit,List<ModelTransformationMatrix> transformations){
  Structure s=asymUnit.clone();
  List<Chain> transformedChains=new ArrayList<Chain>();
  for (  ModelTransformationMatrix max : transformations) {
    boolean foundChain=false;
    for (    Chain c : s.getChains()) {
      String intChainID=c.getInternalChainID();
      if (intChainID == null) {
        System.err.println(""String_Node_Str"" + c.getChainID() + ""String_Node_Str""+ max.ndbChainId+ ""String_Node_Str"");
        intChainID=c.getChainID();
      }
      if (max.ndbChainId.equals(intChainID)) {
        foundChain=true;
        Chain newChain=(Chain)c.clone();
        Matrix m=max.getMatrix();
        double[] vector=max.getVector();
        Atom v=new AtomImpl();
        v.setCoords(vector);
        for (        Group g : newChain.getAtomGroups()) {
          for (          Atom a : g.getAtoms()) {
            Calc.rotate(a,m);
            Calc.shift(a,v);
          }
        }
        transformedChains.add(newChain);
      }
    }
    if (!foundChain) {
      System.err.println(""String_Node_Str"" + max.ndbChainId);
    }
  }
  s.setChains(transformedChains);
  return s;
}",0.8928307464892831
17026,"private ArrayList<ModelTransformationMatrix> getBioUnitTransformationsListUnaryOperators(){
  ArrayList<ModelTransformationMatrix> transformations=new ArrayList<ModelTransformationMatrix>();
  List<String> operators=operatorResolver.getUnaryOperators();
  for (  String chainId : asymIds) {
    for (    String operator : operators) {
      ModelTransformationMatrix original=getModelTransformationMatrix(operator);
      ModelTransformationMatrix transform=new ModelTransformationMatrix(original);
      transform.ndbChainId=chainId;
      transform.id=operator;
      transformations.add(transform);
    }
  }
  return transformations;
}","private ArrayList<ModelTransformationMatrix> getBioUnitTransformationsListUnaryOperators(String assemblyId){
  ArrayList<ModelTransformationMatrix> transformations=new ArrayList<ModelTransformationMatrix>();
  for (  PdbxStructAssemblyGen psag : psags) {
    if (psag.getAssembly_id().equals(assemblyId)) {
      operatorResolver.parseOperatorExpressionString(psag.getOper_expression());
      List<String> operators=operatorResolver.getUnaryOperators();
      List<String> asymIds=Arrays.asList(psag.getAsym_id_list().split(""String_Node_Str""));
      for (      String chainId : asymIds) {
        for (        String operator : operators) {
          ModelTransformationMatrix original=getModelTransformationMatrix(operator);
          ModelTransformationMatrix transform=new ModelTransformationMatrix(original);
          transform.ndbChainId=chainId;
          transform.id=operator;
          transformations.add(transform);
        }
      }
    }
  }
  System.out.println(""String_Node_Str"" + assemblyId + ""String_Node_Str""+ transformations.size());
  return transformations;
}",0.7061556329849012
17027,"/** 
 * Returns a list of transformation matrices for the generation of a macromolecular assembly for the specified assembly Id. 
 * @param assemblyId Id of the macromolecular assembly to be generated
 * @return list of transformation matrices to generate macromolecular assembly
 */
public ArrayList<ModelTransformationMatrix> getBioUnitTransformationList(PdbxStructAssembly psa,PdbxStructAssemblyGen psag,List<PdbxStructOperList> operators){
  System.out.println(""String_Node_Str"" + psa.getDetails() + ""String_Node_Str""+ psa.getOligomeric_details()+ ""String_Node_Str""+ psa.getOligomeric_count());
  init();
  this.psa=psa;
  this.psag=psag;
  asymIds=Arrays.asList(psag.getAsym_id_list().split(""String_Node_Str""));
  operatorResolver.parseOperatorExpressionString(psag.getOper_expression());
  asymId=psa.getId();
  for (  PdbxStructOperList oper : operators) {
    ModelTransformationMatrix transform=new ModelTransformationMatrix();
    transform.id=oper.getId();
    transform.setTransformationMatrix(oper.getMatrix(),oper.getVector());
    modelTransformations.add(transform);
  }
  ArrayList<ModelTransformationMatrix> transformations=getBioUnitTransformationsListUnaryOperators();
  transformations.addAll(getBioUnitTransformationsListBinaryOperators());
  transformations.trimToSize();
  return transformations;
}","/** 
 * Returns a list of transformation matrices for the generation of a macromolecular assembly for the specified assembly Id. 
 * @param assemblyId Id of the macromolecular assembly to be generated
 * @return list of transformation matrices to generate macromolecular assembly
 */
public ArrayList<ModelTransformationMatrix> getBioUnitTransformationList(PdbxStructAssembly psa,List<PdbxStructAssemblyGen> psags,List<PdbxStructOperList> operators){
  init();
  this.psa=psa;
  this.psags=psags;
  asymId=psa.getId();
  for (  PdbxStructOperList oper : operators) {
    ModelTransformationMatrix transform=new ModelTransformationMatrix();
    transform.id=oper.getId();
    transform.setTransformationMatrix(oper.getMatrix(),oper.getVector());
    modelTransformations.add(transform);
  }
  ArrayList<ModelTransformationMatrix> transformations=getBioUnitTransformationsListUnaryOperators(psa.getId());
  transformations.addAll(getBioUnitTransformationsListBinaryOperators(psa.getId()));
  transformations.trimToSize();
  return transformations;
}",0.8535246939636978
17028,"private ArrayList<ModelTransformationMatrix> getBioUnitTransformationsListBinaryOperators(){
  ArrayList<ModelTransformationMatrix> transformations=new ArrayList<ModelTransformationMatrix>();
  List<OrderedPair<String>> operators=operatorResolver.getBinaryOperators();
  for (  String chainId : asymIds) {
    for (    OrderedPair<String> operator : operators) {
      ModelTransformationMatrix original1=getModelTransformationMatrix(operator.getElement1());
      ModelTransformationMatrix original2=getModelTransformationMatrix(operator.getElement2());
      ModelTransformationMatrix transform=ModelTransformationMatrix.multiply4square_x_4square2(original1,original2);
      transform.ndbChainId=chainId;
      transform.id=original1.id + ""String_Node_Str"" + original2.id;
      transformations.add(transform);
    }
  }
  return transformations;
}","private ArrayList<ModelTransformationMatrix> getBioUnitTransformationsListBinaryOperators(String assemblyId){
  ArrayList<ModelTransformationMatrix> transformations=new ArrayList<ModelTransformationMatrix>();
  List<OrderedPair<String>> operators=operatorResolver.getBinaryOperators();
  for (  PdbxStructAssemblyGen psag : psags) {
    if (psag.getAssembly_id().equals(assemblyId)) {
      List<String> asymIds=Arrays.asList(psag.getAsym_id_list().split(""String_Node_Str""));
      operatorResolver.parseOperatorExpressionString(psag.getOper_expression());
      for (      String chainId : asymIds) {
        for (        OrderedPair<String> operator : operators) {
          ModelTransformationMatrix original1=getModelTransformationMatrix(operator.getElement1());
          ModelTransformationMatrix original2=getModelTransformationMatrix(operator.getElement2());
          ModelTransformationMatrix transform=ModelTransformationMatrix.multiply4square_x_4square2(original1,original2);
          transform.ndbChainId=chainId;
          transform.id=original1.id + ""String_Node_Str"" + original2.id;
          transformations.add(transform);
        }
      }
    }
  }
  System.out.println(""String_Node_Str"" + assemblyId + ""String_Node_Str""+ transformations.size());
  return transformations;
}",0.7688723205964585
17029,"public Structure getBiolAssembly(String pdbId,int biolAssemblyNr) throws IOException, StructureException {
  provider.setPdbId(pdbId);
  if (!provider.hasBiolAssembly()) {
    return null;
  }
  if (provider.getNrBiolAssemblies() <= biolAssemblyNr) {
    return null;
  }
  PdbxStructAssembly psa=provider.getPdbxStructAssembly(biolAssemblyNr);
  PdbxStructAssemblyGen psag=provider.getPdbxStructAssemblyGen(biolAssemblyNr);
  List<PdbxStructOperList> operators=provider.getPdbxStructOperList();
  BiologicalAssemblyBuilder builder=new BiologicalAssemblyBuilder();
  ArrayList<ModelTransformationMatrix> transformations=builder.getBioUnitTransformationList(psa,psag,operators);
  Structure asymUnit=null;
  if (provider instanceof MmCifPDBBiolAssemblyProvider) {
    MmCifPDBBiolAssemblyProvider mmcifprov=(MmCifPDBBiolAssemblyProvider)provider;
    asymUnit=mmcifprov.getAsymUnit();
  }
 else {
    asymUnit=StructureIO.getStructure(pdbId);
  }
  return builder.rebuildQuaternaryStructure(asymUnit,transformations);
}","public Structure getBiolAssembly(String pdbId,int biolAssemblyNr) throws IOException, StructureException {
  provider.setPdbId(pdbId);
  if (!provider.hasBiolAssembly()) {
    return null;
  }
  if (provider.getNrBiolAssemblies() <= biolAssemblyNr) {
    return null;
  }
  PdbxStructAssembly psa=provider.getPdbxStructAssembly(biolAssemblyNr);
  List<PdbxStructAssemblyGen> psags=provider.getPdbxStructAssemblyGen(biolAssemblyNr);
  List<PdbxStructOperList> operators=provider.getPdbxStructOperList();
  BiologicalAssemblyBuilder builder=new BiologicalAssemblyBuilder();
  ArrayList<ModelTransformationMatrix> transformations=builder.getBioUnitTransformationList(psa,psags,operators);
  Structure asymUnit=null;
  if (provider instanceof MmCifPDBBiolAssemblyProvider) {
    MmCifPDBBiolAssemblyProvider mmcifprov=(MmCifPDBBiolAssemblyProvider)provider;
    asymUnit=mmcifprov.getAsymUnit();
  }
 else {
    asymUnit=StructureIO.getStructure(pdbId);
  }
  return builder.rebuildQuaternaryStructure(asymUnit,transformations);
}",0.9911937377690804
17030,"@Override public List<ModelTransformationMatrix> getBioUnitTransformationList(String pdbId,int biolAssemblyNr){
  provider.setPdbId(pdbId);
  PdbxStructAssembly psa=provider.getPdbxStructAssembly(biolAssemblyNr - 1);
  PdbxStructAssemblyGen psag=provider.getPdbxStructAssemblyGen(biolAssemblyNr - 1);
  if (psa == null || psag == null) {
    return null;
  }
  List<PdbxStructOperList> operators=provider.getPdbxStructOperList();
  BiologicalAssemblyBuilder builder=new BiologicalAssemblyBuilder();
  List<ModelTransformationMatrix> transformations=builder.getBioUnitTransformationList(psa,psag,operators);
  return transformations;
}","@Override public List<ModelTransformationMatrix> getBioUnitTransformationList(String pdbId,int biolAssemblyNr){
  provider.setPdbId(pdbId);
  PdbxStructAssembly psa=provider.getPdbxStructAssembly(biolAssemblyNr - 1);
  List<PdbxStructAssemblyGen> psags=provider.getPdbxStructAssemblyGen(biolAssemblyNr - 1);
  if (psa == null || psags == null) {
    return null;
  }
  List<PdbxStructOperList> operators=provider.getPdbxStructOperList();
  BiologicalAssemblyBuilder builder=new BiologicalAssemblyBuilder();
  List<ModelTransformationMatrix> transformations=builder.getBioUnitTransformationList(psa,psags,operators);
  return transformations;
}",0.985121378230227
17031,"private void readMatrix(String line){
  String pos=line.substring(18,19);
  int i=Integer.parseInt(pos);
  String index=line.substring(21,24 + correct).trim();
  int id=Integer.parseInt(index);
  if (id != currentIndex) {
    addNewMatrix();
    currentIndex=id;
    currentMatrix=new Matrix(3,3);
    shift=new double[3];
  }
  String x=line.substring(24 + correct,33 + correct);
  String y=line.substring(34 + correct,43 + correct);
  String z=line.substring(44 + correct,53 + correct);
  String vec=line.substring(58 + correct,line.length()).trim();
  currentMatrix.set(0,(i - 1),Float.parseFloat(x));
  currentMatrix.set(1,(i - 1),Float.parseFloat(y));
  currentMatrix.set(2,(i - 1),Float.parseFloat(z));
  shift[i - 1]=Float.parseFloat(vec);
}","private void readMatrix(String line){
  String pos=line.substring(18,19);
  int i=Integer.parseInt(pos);
  String index=line.substring(21,24 + correct).trim();
  int id=Integer.parseInt(index);
  if (id != currentIndex) {
    addNewMatrix();
    currentIndex=id;
    currentMatrix=Matrix.identity(3,3);
    shift=new double[3];
  }
  String x=line.substring(24 + correct,33 + correct);
  String y=line.substring(34 + correct,43 + correct);
  String z=line.substring(44 + correct,53 + correct);
  String vec=line.substring(58 + correct,line.length()).trim();
  currentMatrix.set(0,(i - 1),Float.parseFloat(x));
  currentMatrix.set(1,(i - 1),Float.parseFloat(y));
  currentMatrix.set(2,(i - 1),Float.parseFloat(z));
  shift[i - 1]=Float.parseFloat(vec);
}",0.9913391072618256
17032,"/** 
 * See here for the current spec: http://www.wwpdb.org/documentation/format33/remarks2.html
 * @param line
 */
public void pdb_REMARK_350_Handler(String line){
  if (line.startsWith(""String_Node_Str"")) {
    String nr=line.substring(24,line.length()).trim();
    if (currentBioMolecule != null) {
      finalizeCurrentBioMolecule();
    }
    currentBioMolecule=Integer.parseInt(nr);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    addToCurrentChainList(line);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    addToCurrentChainList(line);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    readMatrix(line);
  }
}","/** 
 * See here for the current spec: http://www.wwpdb.org/documentation/format33/remarks2.html
 * @param line
 */
public void pdb_REMARK_350_Handler(String line){
  if (line.startsWith(""String_Node_Str"")) {
    String nr=line.substring(24,line.length()).trim();
    if (currentBioMolecule != null) {
      finalizeCurrentBioMolecule();
    }
    currentBioMolecule=Integer.parseInt(nr);
    currentIndex=1;
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    addToCurrentChainList(line);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    addToCurrentChainList(line);
  }
 else   if (line.startsWith(""String_Node_Str"")) {
    readMatrix(line);
  }
}",0.9847094801223242
17033,"public PDBBioAssemblyParser(){
  currentChainIDs=new ArrayList<String>();
  currentIndex=1;
  transformations=new ArrayList<ModelTransformationMatrix>();
  currentMatrix=new Matrix(3,3);
  shift=new double[3];
  correct=0;
}","public PDBBioAssemblyParser(){
  currentChainIDs=new ArrayList<String>();
  currentIndex=1;
  transformations=new ArrayList<ModelTransformationMatrix>();
  currentMatrix=Matrix.identity(3,3);
  currentBioMolecule=null;
  shift=new double[3];
  correct=0;
}",0.8916666666666667
17034,"public void documentEnd(){
  if (current_chain != null) {
    current_chain.addGroup(current_group);
    if (isKnownChain(current_chain.getChainID(),current_model) == null) {
      current_model.add(current_chain);
    }
  }
 else {
    if (DEBUG) {
      System.err.println(""String_Node_Str"");
    }
  }
  structure.addModel(current_model);
  for (  StructAsym asym : structAsyms) {
    if (DEBUG)     System.out.println(""String_Node_Str"" + asym.getEntity_id() + ""String_Node_Str""+ asym.getId());
    Chain s=getEntityChain(asym.getEntity_id());
    Chain seqres=(Chain)s.clone();
    seqres.setChainID(asym.getId());
    seqResChains.add(seqres);
    if (DEBUG)     System.out.println(""String_Node_Str"" + asym.getId() + ""String_Node_Str""+ seqres+ ""String_Node_Str"");
  }
  if (params.isAlignSeqRes()) {
    SeqRes2AtomAligner aligner=new SeqRes2AtomAligner();
    aligner.align(structure,seqResChains);
  }
  Set<String> asymIds=asymStrandId.keySet();
  for (int i=0; i < structure.nrModels(); i++) {
    List<Chain> model=structure.getModel(i);
    List<Chain> pdbChains=new ArrayList<Chain>();
    for (    Chain chain : model) {
      for (      String asym : asymIds) {
        if (chain.getChainID().equals(asym)) {
          if (DEBUG)           System.out.println(""String_Node_Str"" + asym + ""String_Node_Str""+ asymStrandId.get(asym));
          chain.setChainID(asymStrandId.get(asym));
          chain.setInternalChainID(asym);
          Chain known=isKnownChain(chain.getChainID(),pdbChains);
          if (known == null) {
            pdbChains.add(chain);
          }
 else {
            for (            Group g : chain.getAtomGroups()) {
              known.addGroup(g);
            }
          }
          break;
        }
      }
    }
    structure.setModel(i,pdbChains);
  }
  PDBHeader header=structure.getPDBHeader();
  header.setNrBioAssemblies(strucAssemblies.size());
  Map<Integer,List<ModelTransformationMatrix>> transformationMap=new HashMap<Integer,List<ModelTransformationMatrix>>();
  int total=strucAssemblies.size();
  for (int i=0; i < total; i++) {
    PdbxStructAssembly psa=strucAssemblies.get(i);
    PdbxStructAssemblyGen psag=strucAssemblyGens.get(i);
    BiologicalAssemblyBuilder builder=new BiologicalAssemblyBuilder();
    List<ModelTransformationMatrix> transformations=builder.getBioUnitTransformationList(psa,psag,structOpers);
    transformationMap.put(i + 1,transformations);
  }
  structure.getPDBHeader().setBioUnitTranformationMap(transformationMap);
}","public void documentEnd(){
  if (current_chain != null) {
    current_chain.addGroup(current_group);
    if (isKnownChain(current_chain.getChainID(),current_model) == null) {
      current_model.add(current_chain);
    }
  }
 else {
    if (DEBUG) {
      System.err.println(""String_Node_Str"");
    }
  }
  structure.addModel(current_model);
  for (  StructAsym asym : structAsyms) {
    if (DEBUG)     System.out.println(""String_Node_Str"" + asym.getEntity_id() + ""String_Node_Str""+ asym.getId());
    Chain s=getEntityChain(asym.getEntity_id());
    Chain seqres=(Chain)s.clone();
    seqres.setChainID(asym.getId());
    seqResChains.add(seqres);
    if (DEBUG)     System.out.println(""String_Node_Str"" + asym.getId() + ""String_Node_Str""+ seqres+ ""String_Node_Str"");
  }
  if (params.isAlignSeqRes()) {
    SeqRes2AtomAligner aligner=new SeqRes2AtomAligner();
    aligner.align(structure,seqResChains);
  }
  Set<String> asymIds=asymStrandId.keySet();
  for (int i=0; i < structure.nrModels(); i++) {
    List<Chain> model=structure.getModel(i);
    List<Chain> pdbChains=new ArrayList<Chain>();
    for (    Chain chain : model) {
      for (      String asym : asymIds) {
        if (chain.getChainID().equals(asym)) {
          if (DEBUG)           System.out.println(""String_Node_Str"" + asym + ""String_Node_Str""+ asymStrandId.get(asym));
          chain.setChainID(asymStrandId.get(asym));
          chain.setInternalChainID(asym);
          Chain known=isKnownChain(chain.getChainID(),pdbChains);
          if (known == null) {
            pdbChains.add(chain);
          }
 else {
            for (            Group g : chain.getAtomGroups()) {
              known.addGroup(g);
            }
          }
          break;
        }
      }
    }
    structure.setModel(i,pdbChains);
  }
  PDBHeader header=structure.getPDBHeader();
  header.setNrBioAssemblies(strucAssemblies.size());
  Map<Integer,List<ModelTransformationMatrix>> transformationMap=new HashMap<Integer,List<ModelTransformationMatrix>>();
  int total=strucAssemblies.size();
  System.out.println(total + ""String_Node_Str"");
  for (int defaultBioAssembly=1; defaultBioAssembly <= total; defaultBioAssembly++) {
    PdbxStructAssembly psa=strucAssemblies.get(defaultBioAssembly - 1);
    List<PdbxStructAssemblyGen> psags=new ArrayList<PdbxStructAssemblyGen>(1);
    for (    PdbxStructAssemblyGen psag : strucAssemblyGens) {
      if (psag.getAssembly_id().equals(defaultBioAssembly + ""String_Node_Str"")) {
        psags.add(psag);
      }
    }
    BiologicalAssemblyBuilder builder=new BiologicalAssemblyBuilder();
    List<ModelTransformationMatrix> transformations=builder.getBioUnitTransformationList(psa,psags,structOpers);
    transformationMap.put(defaultBioAssembly,transformations);
  }
  structure.getPDBHeader().setBioUnitTranformationMap(transformationMap);
}",0.9154824233358264
17035,"public Structure rebuildQuaternaryStructure(Structure asymUnit,ArrayList<ModelTransformationMatrix> transformations){
  Structure s=asymUnit.clone();
  List<Chain> transformedChains=new ArrayList<Chain>();
  for (  ModelTransformationMatrix max : transformations) {
    boolean foundChain=false;
    for (    Chain c : asymUnit.getChains()) {
      if (max.ndbChainId.equals(c.getInternalChainID())) {
        foundChain=true;
        Chain newChain=(Chain)c.clone();
        Matrix m=max.getMatrix();
        double[] vector=max.getVector();
        Atom v=new AtomImpl();
        v.setCoords(vector);
        for (        Group a : newChain.getAtomGroups()) {
          Calc.rotate(a,m);
          Calc.shift(a,v);
        }
        transformedChains.add(newChain);
      }
    }
    if (!foundChain) {
      System.err.println(""String_Node_Str"" + max.ndbChainId);
    }
  }
  s.setChains(transformedChains);
  return s;
}","public Structure rebuildQuaternaryStructure(Structure asymUnit,ArrayList<ModelTransformationMatrix> transformations){
  Structure s=asymUnit.clone();
  List<Chain> transformedChains=new ArrayList<Chain>();
  System.out.print(""String_Node_Str"" + s.getPDBCode() + ""String_Node_Str"");
  for (  Chain c : s.getChains()) {
    System.out.print(c.getChainID());
    if (c.getInternalChainID() != null) {
      System.out.print(""String_Node_Str"" + c.getInternalChainID() + ""String_Node_Str"");
    }
  }
  for (  ModelTransformationMatrix max : transformations) {
    boolean foundChain=false;
    for (    Chain c : s.getChains()) {
      String intChainID=c.getInternalChainID();
      if (intChainID == null) {
        System.err.println(""String_Node_Str"" + c.getChainID() + ""String_Node_Str""+ max.ndbChainId+ ""String_Node_Str"");
        intChainID=c.getChainID();
      }
      if (max.ndbChainId.equals(intChainID)) {
        foundChain=true;
        Chain newChain=(Chain)c.clone();
        Matrix m=max.getMatrix();
        double[] vector=max.getVector();
        Atom v=new AtomImpl();
        v.setCoords(vector);
        for (        Group g : newChain.getAtomGroups()) {
          for (          Atom a : g.getAtoms()) {
            Calc.rotate(a,m);
            Calc.shift(a,v);
          }
        }
        transformedChains.add(newChain);
      }
    }
    if (!foundChain) {
      System.err.println(""String_Node_Str"" + max.ndbChainId);
    }
  }
  s.setChains(transformedChains);
  return s;
}",0.7210548001648125
17036,"/** 
 * Returns a list of transformation matrices for the generation of a macromolecular assembly for the specified assembly Id. 
 * @param assemblyId Id of the macromolecular assembly to be generated
 * @return list of transformation matrices to generate macromolecular assembly
 */
public ArrayList<ModelTransformationMatrix> getBioUnitTransformationList(PdbxStructAssembly psa,PdbxStructAssemblyGen psag,List<PdbxStructOperList> operators){
  System.out.println(""String_Node_Str"" + psa.getDetails() + ""String_Node_Str""+ psa.getOligomeric_details()+ ""String_Node_Str""+ psa.getOligomeric_count());
  System.out.println(psag);
  init();
  this.psa=psa;
  this.psag=psag;
  asymIds=Arrays.asList(psag.getAsym_id_list().split(""String_Node_Str""));
  operatorResolver.parseOperatorExpressionString(psag.getOper_expression());
  asymId=psa.getId();
  for (  PdbxStructOperList oper : operators) {
    ModelTransformationMatrix transform=new ModelTransformationMatrix();
    transform.id=oper.getId();
    transform.setTransformationMatrix(oper.getMatrix(),oper.getVector());
    modelTransformations.add(transform);
  }
  ArrayList<ModelTransformationMatrix> transformations=getBioUnitTransformationsListUnaryOperators();
  transformations.addAll(getBioUnitTransformationsListBinaryOperators());
  transformations.trimToSize();
  return transformations;
}","/** 
 * Returns a list of transformation matrices for the generation of a macromolecular assembly for the specified assembly Id. 
 * @param assemblyId Id of the macromolecular assembly to be generated
 * @return list of transformation matrices to generate macromolecular assembly
 */
public ArrayList<ModelTransformationMatrix> getBioUnitTransformationList(PdbxStructAssembly psa,PdbxStructAssemblyGen psag,List<PdbxStructOperList> operators){
  System.out.println(""String_Node_Str"" + psa.getDetails() + ""String_Node_Str""+ psa.getOligomeric_details()+ ""String_Node_Str""+ psa.getOligomeric_count());
  init();
  this.psa=psa;
  this.psag=psag;
  asymIds=Arrays.asList(psag.getAsym_id_list().split(""String_Node_Str""));
  operatorResolver.parseOperatorExpressionString(psag.getOper_expression());
  asymId=psa.getId();
  for (  PdbxStructOperList oper : operators) {
    ModelTransformationMatrix transform=new ModelTransformationMatrix();
    transform.id=oper.getId();
    transform.setTransformationMatrix(oper.getMatrix(),oper.getVector());
    modelTransformations.add(transform);
  }
  ArrayList<ModelTransformationMatrix> transformations=getBioUnitTransformationsListUnaryOperators();
  transformations.addAll(getBioUnitTransformationsListBinaryOperators());
  transformations.trimToSize();
  return transformations;
}",0.9895209580838324
17037,"public ChemComp getChemComp(){
  if (chemComp == null) {
    chemComp=ChemCompGroupFactory.getChemComp(pdb_name);
  }
  return chemComp;
}","public ChemComp getChemComp(){
  if (chemComp == null) {
    chemComp=ChemCompGroupFactory.getChemComp(pdb_name);
    if (chemComp == null)     System.out.println(""String_Node_Str"" + pdb_name);
  }
  return chemComp;
}",0.7752808988764045
17038,"/** 
 * set three character name of Group .
 * @param s  a String specifying the PDBName value
 * @see #getPDBName
 * @throws PDBParseException ...
 */
public void setPDBName(String s) throws PDBParseException {
  pdb_name=s;
}","/** 
 * set three character name of Group .
 * @param s  a String specifying the PDBName value
 * @see #getPDBName
 * @throws PDBParseException ...
 */
public void setPDBName(String s) throws PDBParseException {
  if (s.equals(""String_Node_Str""))   System.out.println(""String_Node_Str"");
  pdb_name=s;
}",0.8566037735849057
17039,"/** 
 * a simple matching approach that tries to do a 1:1 mapping between SEQRES and ATOM records returns true if this simple matching approach worked fine
 * @param seqRes
 * @param atomList
 * @return
 */
private boolean trySimpleMatch(Chain seqRes,Chain atomRes){
  List<Group> seqResGroups=seqRes.getAtomGroups();
  List<Group> atmResGroups=atomRes.getAtomGroups();
  if (DEBUG) {
    System.err.println(""String_Node_Str"" + atomRes.getChainID() + ""String_Node_Str""+ seqRes.getChainID());
  }
  boolean startAt1=true;
  for (int atomResPos=0; atomResPos < atmResGroups.size(); atomResPos++) {
    Group atomResGroup=atmResGroups.get(atomResPos);
    String threeLetterCode=atomResGroup.getPDBName();
    if (excludeTypes.contains(threeLetterCode)) {
      continue;
    }
    ResidueNumber atomResNum=atomResGroup.getResidueNumber();
    int seqResPos=atomResNum.getSeqNum();
    if (seqResPos < 0) {
      if (DEBUG)       System.err.println(""String_Node_Str"");
      return false;
    }
    if (seqResPos == 0) {
      Group seqResGroup=seqResGroups.get(0);
      if (seqResGroup.getPDBName().equals(atomResGroup.getPDBName())) {
        startAt1=false;
      }
 else {
        if (DEBUG) {
          System.err.println(""String_Node_Str"" + seqResGroup.getPDBName() + ""String_Node_Str""+ atomResGroup.getPDBName()+ ""String_Node_Str"");
        }
        return false;
      }
    }
    if (startAt1)     seqResPos--;
    if (startAt1 && seqResPos >= seqResGroups.size()) {
      if (atomResGroup instanceof AminoAcid) {
        if (DEBUG)         System.err.println(""String_Node_Str"" + seqResPos + ""String_Node_Str""+ seqResGroups.size()+ ""String_Node_Str""+ atomResGroup);
        return false;
      }
 else {
        continue;
      }
    }
    if (seqResPos < 0) {
      System.err.println(""String_Node_Str"" + atomRes.getChainID() + ""String_Node_Str""+ atomResGroup);
    }
    if (seqResPos >= seqResGroups.size()) {
      if (atomResGroup instanceof AminoAcid)       return false;
 else       continue;
    }
    Group seqResGroup=seqResGroups.get(seqResPos);
    if (!seqResGroup.getPDBName().trim().equals(atomResGroup.getPDBName().trim())) {
      if (DEBUG)       System.err.println(""String_Node_Str"" + seqResPos + ""String_Node_Str""+ atomResGroup+ ""String_Node_Str""+ seqResGroup);
      return false;
    }
    seqResGroups.set(seqResPos,atomResGroup);
  }
  return true;
}","/** 
 * a simple matching approach that tries to do a 1:1 mapping between SEQRES and ATOM records returns true if this simple matching approach worked fine
 * @param seqRes
 * @param atomList
 * @return
 */
private boolean trySimpleMatch(Chain seqRes,Chain atomRes){
  List<Group> seqResGroups=seqRes.getAtomGroups();
  List<Group> atmResGroups=atomRes.getAtomGroups();
  if (DEBUG) {
    System.err.println(""String_Node_Str"" + atomRes.getChainID() + ""String_Node_Str""+ atmResGroups.size()+ ""String_Node_Str""+ seqRes.getChainID()+ ""String_Node_Str""+ seqResGroups.size()+ ""String_Node_Str"");
  }
  boolean startAt1=true;
  for (int atomResPos=0; atomResPos < atmResGroups.size(); atomResPos++) {
    Group atomResGroup=atmResGroups.get(atomResPos);
    String threeLetterCode=atomResGroup.getPDBName();
    if (excludeTypes.contains(threeLetterCode)) {
      continue;
    }
    ResidueNumber atomResNum=atomResGroup.getResidueNumber();
    int seqResPos=atomResNum.getSeqNum();
    if (seqResPos < 0) {
      if (DEBUG)       System.err.println(""String_Node_Str"");
      return false;
    }
    if (seqResPos == 0) {
      Group seqResGroup=seqResGroups.get(0);
      if (seqResGroup.getPDBName().equals(atomResGroup.getPDBName())) {
        startAt1=false;
      }
 else {
        if (DEBUG) {
          System.err.println(""String_Node_Str"" + seqResGroup.getPDBName() + ""String_Node_Str""+ atomResGroup.getPDBName()+ ""String_Node_Str"");
        }
        return false;
      }
    }
    if (startAt1)     seqResPos--;
    if (startAt1 && seqResPos >= seqResGroups.size()) {
      if (atomResGroup instanceof AminoAcid) {
        if (DEBUG)         System.err.println(""String_Node_Str"" + seqResPos + ""String_Node_Str""+ seqResGroups.size()+ ""String_Node_Str""+ atomResGroup);
        return false;
      }
 else       if (atomResGroup instanceof NucleotideImpl) {
        if (DEBUG)         System.err.println(""String_Node_Str"" + seqResPos + ""String_Node_Str""+ seqResGroups.size()+ ""String_Node_Str""+ atomResGroup);
        return false;
      }
 else {
        continue;
      }
    }
    if (seqResPos < 0) {
      System.err.println(""String_Node_Str"" + atomRes.getChainID() + ""String_Node_Str""+ atomResGroup);
    }
    if (seqResPos >= seqResGroups.size()) {
      if (DEBUG)       System.err.println(""String_Node_Str"" + seqResPos);
      if (atomResGroup instanceof AminoAcid)       return false;
 else       continue;
    }
    Group seqResGroup=seqResGroups.get(seqResPos);
    if (!seqResGroup.getPDBName().trim().equals(atomResGroup.getPDBName().trim())) {
      if (DEBUG)       System.err.println(""String_Node_Str"" + seqResPos + ""String_Node_Str""+ atomResGroup+ ""String_Node_Str""+ seqResGroup);
      return false;
    }
    if (DEBUG)     System.err.println(""String_Node_Str"" + seqResPos + ""String_Node_Str""+ atomResGroup);
    seqResGroups.set(seqResPos,atomResGroup);
  }
  return true;
}",0.7044120431736414
17040,"public static final double getNetCharge(String sequence){
  return getIsoelectricPoint(sequence,true);
}","public static final double getNetCharge(String sequence){
  return getNetCharge(sequence,true);
}",0.8955223880597015
17041,"@Test public void testNetCharge(){
  assertEquals(2.0,Utils.roundToDecimals(PeptideProperties.getNetCharge(sequence,false),1));
  assertEquals(0.0,Utils.roundToDecimals(PeptideProperties.getNetCharge(fullInvalidSequence,false),1));
  assertEquals(-3.2,Utils.roundToDecimals(PeptideProperties.getNetCharge(""String_Node_Str"",false),1));
}","@Test public void testNetCharge(){
  assertEquals(2.9,Utils.roundToDecimals(PeptideProperties.getNetCharge(sequence,false),1));
  assertEquals(0.0,Utils.roundToDecimals(PeptideProperties.getNetCharge(fullInvalidSequence,false),1));
  assertEquals(-3.2,Utils.roundToDecimals(PeptideProperties.getNetCharge(""String_Node_Str"",false),1));
}",0.9970238095238096
17042,"public static AFPChain filterDuplicateAFPs(AFPChain afpChain,CECalculator ceCalc,Atom[] ca1,Atom[] ca2duplicated,int minCPlength) throws StructureException {
  AFPChain newAFPChain=new AFPChain(afpChain);
  int ca2len=afpChain.getCa2Length() / 2;
  newAFPChain.setCa2Length(ca2len);
  int[][][] optAln=afpChain.getOptAln();
  int[] optLen=afpChain.getOptLen();
  int alignLen=afpChain.getOptLength();
  assert(afpChain.getBlockNum() == 1);
  int nStart=optAln[0][1][0];
  int cEnd=optAln[0][1][alignLen - 1];
  int firstRes=nStart;
  int lastRes=nStart + ca2len;
  if (nStart >= ca2len || cEnd < ca2len) {
    firstRes=nStart;
    lastRes=cEnd;
  }
 else {
    int overlapLength=cEnd + 1 - nStart - ca2len;
    if (overlapLength <= 0) {
      firstRes=nStart;
      lastRes=cEnd;
    }
 else {
      CutPoint cp=calculateCutPoint(optAln[0][1],nStart,cEnd,overlapLength,alignLen,minCPlength,ca2len,firstRes);
      firstRes=cp.firstRes;
      lastRes=cp.lastRes;
    }
  }
  List<ResiduePair> left=new ArrayList<ResiduePair>();
  List<ResiduePair> right=new ArrayList<ResiduePair>();
  for (int i=0; i < optLen[0]; i++) {
    if (optAln[0][1][i] >= firstRes && optAln[0][1][i] <= lastRes) {
      if (optAln[0][1][i] < ca2len) {
        left.add(new ResiduePair(optAln[0][0][i],optAln[0][1][i]));
      }
 else {
        right.add(new ResiduePair(optAln[0][0][i],optAln[0][1][i] - ca2len));
      }
    }
  }
  alignLen=left.size() + right.size();
  List<List<ResiduePair>> blocks=new ArrayList<List<ResiduePair>>(2);
  if (!left.isEmpty()) {
    blocks.add(left);
  }
  if (!right.isEmpty()) {
    blocks.add(right);
  }
  left=null;
  right=null;
  int[][][] newAlign=new int[blocks.size()][][];
  int[] blockLengths=new int[blocks.size()];
  for (int blockNum=0; blockNum < blocks.size(); blockNum++) {
    List<ResiduePair> block=blocks.get(blockNum);
    newAlign[blockNum]=new int[2][block.size()];
    for (int i=0; i < block.size(); i++) {
      ResiduePair pair=block.get(i);
      newAlign[blockNum][0][i]=pair.a;
      newAlign[blockNum][1][i]=pair.b;
    }
    blockLengths[blockNum]=block.size();
  }
  newAFPChain.setOptAln(newAlign);
  newAFPChain.setOptLen(blockLengths);
  newAFPChain.setOptLength(alignLen);
  newAFPChain.setBlockNum(blocks.size());
  newAFPChain.setBlockResSize(blockLengths.clone());
  newAFPChain.setSequentialAlignment(blocks.size() == 1);
  Atom[] atoms1=new Atom[alignLen];
  Atom[] atoms2=new Atom[alignLen];
  int pos=0;
  for (  List<ResiduePair> block : blocks) {
    for (    ResiduePair pair : block) {
      atoms1[pos]=ca1[pair.a];
      atoms2[pos]=ca2duplicated[pair.b];
      pos++;
    }
  }
  assert(pos == alignLen);
  double rmsd;
  double[] blockRMSDs=new double[blocks.size()];
  Matrix[] blockRotationMatrices=new Matrix[blocks.size()];
  Atom[] blockShifts=new Atom[blocks.size()];
  if (alignLen > 0) {
    rmsd=ceCalc.calc_rmsd(atoms1,atoms2,alignLen,true,false);
    blockRMSDs[0]=rmsd;
    blockRotationMatrices[0]=ceCalc.getRotationMatrix();
    blockShifts[0]=ceCalc.getShift();
    for (int i=1; i < blocks.size(); i++) {
      blockRMSDs[i]=rmsd;
      blockRotationMatrices[i]=(Matrix)blockRotationMatrices[0].clone();
      blockShifts[i]=(Atom)blockShifts[0].clone();
    }
  }
  newAFPChain.setOptRmsd(blockRMSDs);
  newAFPChain.setBlockRmsd(blockRMSDs);
  newAFPChain.setBlockRotationMatrix(blockRotationMatrices);
  newAFPChain.setBlockShiftVector(blockShifts);
  Atom[] ca2=new Atom[ca2len];
  for (int i=0; i < ca2len; i++) {
    ca2[i]=ca2duplicated[i];
  }
  AFPAlignmentDisplay.getAlign(newAFPChain,ca1,ca2duplicated);
  return newAFPChain;
}","public static AFPChain filterDuplicateAFPs(AFPChain afpChain,CECalculator ceCalc,Atom[] ca1,Atom[] ca2duplicated,int minCPlength) throws StructureException {
  AFPChain newAFPChain=new AFPChain(afpChain);
  int ca2len=afpChain.getCa2Length() / 2;
  newAFPChain.setCa2Length(ca2len);
  int[][][] optAln=afpChain.getOptAln();
  int[] optLen=afpChain.getOptLen();
  int alignLen=afpChain.getOptLength();
  assert(afpChain.getBlockNum() == 1);
  int nStart=optAln[0][1][0];
  int cEnd=optAln[0][1][alignLen - 1];
  int firstRes=nStart;
  int lastRes=nStart + ca2len;
  if (nStart >= ca2len || cEnd < ca2len) {
    firstRes=nStart;
    lastRes=cEnd;
  }
 else {
    int overlapLength=cEnd + 1 - nStart - ca2len;
    if (overlapLength <= 0) {
      CPRange minCP=calculateMinCP(optAln[0][1],alignLen,ca2len,minCPlength);
      firstRes=nStart;
      lastRes=cEnd;
      if (firstRes > minCP.n) {
        firstRes=ca2len;
        if (debug) {
          System.out.format(""String_Node_Str"" + ""String_Node_Str"",minCP.mid,minCPlength);
        }
      }
      if (lastRes < minCP.c) {
        lastRes=ca2len - 1;
        if (debug) {
          System.out.format(""String_Node_Str"" + ""String_Node_Str"",optLen[0] - minCP.mid,minCPlength);
        }
      }
    }
 else {
      CutPoint cp=calculateCutPoint(optAln[0][1],nStart,cEnd,overlapLength,alignLen,minCPlength,ca2len,firstRes);
      firstRes=cp.firstRes;
      lastRes=cp.lastRes;
    }
  }
  List<ResiduePair> left=new ArrayList<ResiduePair>();
  List<ResiduePair> right=new ArrayList<ResiduePair>();
  for (int i=0; i < optLen[0]; i++) {
    if (optAln[0][1][i] >= firstRes && optAln[0][1][i] <= lastRes) {
      if (optAln[0][1][i] < ca2len) {
        left.add(new ResiduePair(optAln[0][0][i],optAln[0][1][i]));
      }
 else {
        right.add(new ResiduePair(optAln[0][0][i],optAln[0][1][i] - ca2len));
      }
    }
  }
  alignLen=0;
  List<List<ResiduePair>> blocks=new ArrayList<List<ResiduePair>>(2);
  if (!left.isEmpty()) {
    blocks.add(left);
    alignLen+=left.size();
  }
  if (!right.isEmpty()) {
    blocks.add(right);
    alignLen+=right.size();
  }
  left=null;
  right=null;
  int[][][] newAlign=new int[blocks.size()][][];
  int[] blockLengths=new int[blocks.size()];
  for (int blockNum=0; blockNum < blocks.size(); blockNum++) {
    List<ResiduePair> block=blocks.get(blockNum);
    newAlign[blockNum]=new int[2][block.size()];
    for (int i=0; i < block.size(); i++) {
      ResiduePair pair=block.get(i);
      newAlign[blockNum][0][i]=pair.a;
      newAlign[blockNum][1][i]=pair.b;
    }
    blockLengths[blockNum]=block.size();
  }
  newAFPChain.setOptAln(newAlign);
  newAFPChain.setOptLen(blockLengths);
  newAFPChain.setOptLength(alignLen);
  newAFPChain.setBlockNum(blocks.size());
  newAFPChain.setBlockResSize(blockLengths.clone());
  newAFPChain.setSequentialAlignment(blocks.size() == 1);
  Atom[] atoms1=new Atom[alignLen];
  Atom[] atoms2=new Atom[alignLen];
  int pos=0;
  for (  List<ResiduePair> block : blocks) {
    for (    ResiduePair pair : block) {
      atoms1[pos]=ca1[pair.a];
      atoms2[pos]=ca2duplicated[pair.b];
      pos++;
    }
  }
  assert(pos == alignLen);
  double rmsd;
  double[] blockRMSDs=new double[blocks.size()];
  Matrix[] blockRotationMatrices=new Matrix[blocks.size()];
  Atom[] blockShifts=new Atom[blocks.size()];
  if (alignLen > 0) {
    rmsd=ceCalc.calc_rmsd(atoms1,atoms2,alignLen,true,false);
    blockRMSDs[0]=rmsd;
    blockRotationMatrices[0]=ceCalc.getRotationMatrix();
    blockShifts[0]=ceCalc.getShift();
    for (int i=1; i < blocks.size(); i++) {
      blockRMSDs[i]=rmsd;
      blockRotationMatrices[i]=(Matrix)blockRotationMatrices[0].clone();
      blockShifts[i]=(Atom)blockShifts[0].clone();
    }
  }
  newAFPChain.setOptRmsd(blockRMSDs);
  newAFPChain.setBlockRmsd(blockRMSDs);
  newAFPChain.setBlockRotationMatrix(blockRotationMatrices);
  newAFPChain.setBlockShiftVector(blockShifts);
  Atom[] ca2=new Atom[ca2len];
  for (int i=0; i < ca2len; i++) {
    ca2[i]=ca2duplicated[i];
  }
  AFPAlignmentDisplay.getAlign(newAFPChain,ca1,ca2duplicated);
  return newAFPChain;
}",0.9294026377036464
17043,"public static void main(String[] args){
  try {
    String name1, name2;
    name1=""String_Node_Str"";
    name2=""String_Node_Str"";
    name1=""String_Node_Str"";
    name2=""String_Node_Str"";
    name1=""String_Node_Str"";
    name2=""String_Node_Str"";
    CeCPMain ce=(CeCPMain)StructureAlignmentFactory.getAlgorithm(CeCPMain.algorithmName);
    CeParameters params=(CeParameters)ce.getParameters();
    ce.setParameters(params);
    AtomCache cache=new AtomCache();
    Atom[] ca1=cache.getAtoms(name1);
    Atom[] ca2=cache.getAtoms(name2);
    if (debug) {
      System.out.format(""String_Node_Str"",ca1[0].getGroup().getChain().getParent().getName(),ca2[0].getGroup().getChain().getParent().getName());
    }
    AFPChain afpChain=ce.align(ca1,ca2);
    if (debug) {
      System.out.format(""String_Node_Str"",afpChain.getName1(),afpChain.getName2());
      System.out.format(""String_Node_Str"",afpChain.getAlignScore());
    }
    int cp=afpChain.getOptAln()[0][1][0];
    System.out.println(""String_Node_Str"" + cp);
    displayAlignment(afpChain,ca1,ca2);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    String name1, name2;
    name1=""String_Node_Str"";
    name2=""String_Node_Str"";
    name1=""String_Node_Str"";
    name2=""String_Node_Str"";
    name1=""String_Node_Str"";
    name2=""String_Node_Str"";
    name1=""String_Node_Str"";
    name2=""String_Node_Str"";
    name1=""String_Node_Str"";
    name2=""String_Node_Str"";
    CeCPMain ce=(CeCPMain)StructureAlignmentFactory.getAlgorithm(CeCPMain.algorithmName);
    CeParameters params=(CeParameters)ce.getParameters();
    ce.setParameters(params);
    AtomCache cache=new AtomCache();
    Atom[] ca1=cache.getAtoms(name1);
    Atom[] ca2=cache.getAtoms(name2);
    if (debug) {
      System.out.format(""String_Node_Str"",ca1[0].getGroup().getChain().getParent().getName(),ca2[0].getGroup().getChain().getParent().getName());
    }
    AFPChain afpChain=ce.align(ca1,ca2);
    if (debug) {
      System.out.format(""String_Node_Str"",afpChain.getName1(),afpChain.getName2());
      System.out.format(""String_Node_Str"",afpChain.getAlignScore());
    }
    int cp=afpChain.getOptAln()[0][1][0];
    System.out.println(""String_Node_Str"" + cp);
    displayAlignment(afpChain,ca1,ca2);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.950469684030743
17044,"/** 
 * Finds the index of the last residue which could be a valid n-terminus. A residue i is valid if at least minCPlength residues are present in block in the interval [i,ca2len).
 * @param block
 * @param blockLen
 * @param ca2len
 * @param minCPlength
 * @return
 */
protected static CPRange calculateMinCP(int[] block,int blockLen,int ca2len,int minCPlength){
  CPRange range=new CPRange();
  int middle=Arrays.binarySearch(block,ca2len);
  if (middle < 0) {
    middle=-middle - 1;
  }
  range.mid=middle;
  int minCPntermIndex=middle - minCPlength;
  if (minCPntermIndex >= 0) {
    range.n=block[minCPntermIndex];
  }
 else {
    range.n=-1;
  }
  int minCPctermIndex=middle + minCPlength - 1;
  if (minCPctermIndex < blockLen) {
    range.c=block[minCPctermIndex];
  }
 else {
    range.c=ca2len * 2;
  }
  return range;
}","/** 
 * Finds the alignment index of the residues minCPlength before and after the duplication.
 * @param block The permuted block being considered, generally optAln[0][1]
 * @param blockLen The length of the block (in case extra memory was allocated in block)
 * @param ca2len The length, in residues, of the protein specified by block
 * @param minCPlength The minimum number of residues allowed for a CP
 * @return a CPRange with the following components:<dl><dt>n</dt><dd>Index into <code>block</code> of the residue such that <code>minCPlength</code> residues remain to the end of <code>ca2len</code>, or -1 if no residue fits that criterium.</dd> <dt>mid</dt><dd>Index of the first residue higher than <code>ca2len</code>.</dd> <dt>c</dt><dd>Index of <code>minCPlength</code>-th residue after ca2len, or ca2len*2 if no residue fits that criterium.</dd> </dl>
 */
protected static CPRange calculateMinCP(int[] block,int blockLen,int ca2len,int minCPlength){
  CPRange range=new CPRange();
  int middle=Arrays.binarySearch(block,ca2len);
  if (middle < 0) {
    middle=-middle - 1;
  }
  range.mid=middle;
  int minCPntermIndex=middle - minCPlength;
  if (minCPntermIndex >= 0) {
    range.n=block[minCPntermIndex];
  }
 else {
    range.n=-1;
  }
  int minCPctermIndex=middle + minCPlength - 1;
  if (minCPctermIndex < blockLen) {
    range.c=block[minCPctermIndex];
  }
 else {
    range.c=ca2len * 2;
  }
  return range;
}",0.6044247787610619
17045,"public void testOldSecOutput(){
  InputStream inStream=this.getClass().getResourceAsStream(""String_Node_Str"");
  assertNotNull(inStream);
  String xml=StringManipulationHelper.convertStreamToString(inStream);
  AtomCache cache=new AtomCache();
  try {
    String name1=""String_Node_Str"";
    String name2=""String_Node_Str"";
    Atom[] ca1=cache.getAtoms(name1);
    Atom[] ca2=cache.getAtoms(name2);
    AFPChain afpChainOrig=AFPChainXMLParser.fromXML(xml,ca1,ca2);
    afpChainOrig.setCalculationTime(-1);
    String xmlComp=AFPChainXMLConverter.toXML(afpChainOrig,ca1,ca2);
    StringManipulationTestsHelper.assertEqualsIgnoreEndline(xml,xmlComp);
    StructureAlignment ce=StructureAlignmentFactory.getAlgorithm(CeMain.algorithmName);
    AFPChain afpChainNew=ce.align(ca1,ca2);
    afpChainNew.setCalculationTime(-1);
    afpChainNew.setName1(name1);
    afpChainNew.setName2(name2);
    String xmlNew=AFPChainXMLConverter.toXML(afpChainNew,ca1,ca2);
    StringManipulationTestsHelper.assertEqualsIgnoreEndline(xml,xmlNew);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","public void testOldSecOutput() throws Exception {
  InputStream inStream=this.getClass().getResourceAsStream(""String_Node_Str"");
  assertNotNull(inStream);
  String xml=StringManipulationHelper.convertStreamToString(inStream);
  AtomCache cache=new AtomCache();
  String name1=""String_Node_Str"";
  String name2=""String_Node_Str"";
  Atom[] ca1=cache.getAtoms(name1);
  Atom[] ca2=cache.getAtoms(name2);
  AFPChain afpChainOrig=AFPChainXMLParser.fromXML(xml,ca1,ca2);
  afpChainOrig.setCalculationTime(-1);
  String xmlComp=AFPChainXMLConverter.toXML(afpChainOrig,ca1,ca2);
  StringManipulationTestsHelper.assertEqualsIgnoreEndline(xml,xmlComp);
  StructureAlignment ce=StructureAlignmentFactory.getAlgorithm(CeMain.algorithmName);
  AFPChain afpChainNew=ce.align(ca1,ca2);
  afpChainNew.setCalculationTime(-1);
  afpChainNew.setName1(name1);
  afpChainNew.setName2(name2);
  String xmlNew=AFPChainXMLConverter.toXML(afpChainNew,ca1,ca2);
  StringManipulationTestsHelper.assertEqualsIgnoreEndline(xml,xmlNew);
}",0.9340245051837888
17046,"@Test public void testFilterDuplicateAFPsMinLenCTerm() throws PDBParseException, StructureException {
  int[][][] startAln, filteredAln;
  int ca2len;
  ca2len=10;
  startAln=new int[][][]{new int[][]{new int[]{0,1,2,3,4,5,6,7,8,9,10},new int[]{0,3,5,6,7,8,9,0 + ca2len,1 + ca2len,2 + ca2len,3 + ca2len}}};
  filteredAln=new int[][][]{new int[][]{new int[]{1,2,3,4,5,6},new int[]{3,5,6,7,8,9}},new int[][]{new int[]{7,8,9},new int[]{0,1,2}}};
  int[] filteredLen=new int[]{filteredAln[0][0].length,filteredAln[1][0].length};
  Atom[] ca1, ca2;
  AFPChain afpChain, result;
  ca1=makeDummyCA(startAln[0][0].length);
  ca2=makeDummyCA(ca2len);
  ca2=StructureTools.duplicateCA2(ca2);
  afpChain=makeDummyAFPChain(startAln,ca1,ca2);
  int minCPlength;
  for (minCPlength=0; minCPlength < 4; minCPlength++) {
    result=CeCPMain.filterDuplicateAFPs(afpChain,new CECalculator(null),ca1,ca2,minCPlength);
    assertTrue(""String_Node_Str"" + minCPlength,Arrays.deepEquals(filteredAln,result.getOptAln()));
    assertTrue(""String_Node_Str"" + minCPlength,Arrays.equals(filteredLen,result.getOptLen()));
  }
  minCPlength=4;
  filteredAln=new int[][][]{new int[][]{new int[]{2,3,4,5,6},new int[]{5,6,7,8,9}},new int[][]{new int[]{7,8,9,10},new int[]{0,1,2,3}}};
  filteredLen=new int[]{filteredAln[0][0].length,filteredAln[1][0].length};
  result=CeCPMain.filterDuplicateAFPs(afpChain,new CECalculator(null),ca1,ca2,minCPlength);
  assertTrue(""String_Node_Str"" + minCPlength,Arrays.deepEquals(filteredAln,result.getOptAln()));
  assertTrue(""String_Node_Str"" + minCPlength,Arrays.equals(filteredLen,result.getOptLen()));
  minCPlength=5;
  filteredAln=new int[][][]{new int[][]{new int[]{0,1,2,3,4,5,6},new int[]{0,3,5,6,7,8,9}}};
  filteredLen=new int[]{filteredAln[0][0].length};
  result=CeCPMain.filterDuplicateAFPs(afpChain,new CECalculator(null),ca1,ca2,minCPlength);
  assertTrue(""String_Node_Str"" + minCPlength,Arrays.deepEquals(filteredAln,result.getOptAln()));
  assertTrue(""String_Node_Str"" + minCPlength,Arrays.equals(filteredLen,result.getOptLen()));
  minCPlength=7;
  result=CeCPMain.filterDuplicateAFPs(afpChain,new CECalculator(null),ca1,ca2,minCPlength);
  assertTrue(""String_Node_Str"" + minCPlength,Arrays.deepEquals(filteredAln,result.getOptAln()));
  assertTrue(""String_Node_Str"" + minCPlength,Arrays.equals(filteredLen,result.getOptLen()));
}","@Test public void testFilterDuplicateAFPsMinLenCTerm() throws PDBParseException, StructureException {
  int[][][] startAln, filteredAln;
  int[] filteredLen;
  int ca2len;
  ca2len=10;
  startAln=new int[][][]{new int[][]{new int[]{0,1,2,3,4,5,6,7,8,9,10},new int[]{0,3,5,6,7,8,9,0 + ca2len,1 + ca2len,2 + ca2len,3 + ca2len}}};
  Atom[] ca1, ca2;
  AFPChain afpChain, result;
  ca1=makeDummyCA(startAln[0][0].length);
  ca2=makeDummyCA(ca2len);
  ca2=StructureTools.duplicateCA2(ca2);
  afpChain=makeDummyAFPChain(startAln,ca1,ca2);
  filteredAln=new int[][][]{new int[][]{new int[]{1,2,3,4,5,6},new int[]{3,5,6,7,8,9}},new int[][]{new int[]{7,8,9},new int[]{0,1,2}}};
  filteredLen=new int[]{filteredAln[0][0].length,filteredAln[1][0].length};
  int minCPlength;
  for (minCPlength=0; minCPlength < 4; minCPlength++) {
    result=CeCPMain.filterDuplicateAFPs(afpChain,new CECalculator(null),ca1,ca2,minCPlength);
    assertTrue(""String_Node_Str"" + minCPlength,Arrays.deepEquals(filteredAln,result.getOptAln()));
    assertTrue(""String_Node_Str"" + minCPlength,Arrays.equals(filteredLen,result.getOptLen()));
  }
  minCPlength=4;
  filteredAln=new int[][][]{new int[][]{new int[]{2,3,4,5,6},new int[]{5,6,7,8,9}},new int[][]{new int[]{7,8,9,10},new int[]{0,1,2,3}}};
  filteredLen=new int[]{filteredAln[0][0].length,filteredAln[1][0].length};
  result=CeCPMain.filterDuplicateAFPs(afpChain,new CECalculator(null),ca1,ca2,minCPlength);
  assertTrue(""String_Node_Str"" + minCPlength,Arrays.deepEquals(filteredAln,result.getOptAln()));
  assertTrue(""String_Node_Str"" + minCPlength,Arrays.equals(filteredLen,result.getOptLen()));
  minCPlength=5;
  filteredAln=new int[][][]{new int[][]{new int[]{0,1,2,3,4,5,6},new int[]{0,3,5,6,7,8,9}}};
  filteredLen=new int[]{filteredAln[0][0].length};
  result=CeCPMain.filterDuplicateAFPs(afpChain,new CECalculator(null),ca1,ca2,minCPlength);
  assertTrue(""String_Node_Str"" + minCPlength,Arrays.deepEquals(filteredAln,result.getOptAln()));
  assertTrue(""String_Node_Str"" + minCPlength,Arrays.equals(filteredLen,result.getOptLen()));
  minCPlength=7;
  result=CeCPMain.filterDuplicateAFPs(afpChain,new CECalculator(null),ca1,ca2,minCPlength);
  assertTrue(""String_Node_Str"" + minCPlength,Arrays.deepEquals(filteredAln,result.getOptAln()));
  assertTrue(""String_Node_Str"" + minCPlength,Arrays.equals(filteredLen,result.getOptLen()));
}",0.9044289044289044
17047,"private AFPChain makeDummyAFPChain(int[][][] dupAlign,Atom[] ca1,Atom[] ca2){
  AFPChain afp=new AFPChain();
  afp.setOptAln(dupAlign);
  afp.setOptLength(dupAlign[0][1].length);
  afp.setCa1Length(ca1.length);
  afp.setCa2Length(ca2.length);
  afp.setBlockNum(1);
  afp.setOptLen(new int[]{dupAlign[0][1].length});
  return afp;
}","/** 
 * Creates a minimal AFPChain from the specified alignment and proteins
 * @param dupAlign
 * @param ca1
 * @param ca2
 * @return
 */
private AFPChain makeDummyAFPChain(int[][][] dupAlign,Atom[] ca1,Atom[] ca2){
  AFPChain afp=new AFPChain();
  afp.setOptAln(dupAlign);
  afp.setOptLength(dupAlign[0][1].length);
  afp.setCa1Length(ca1.length);
  afp.setCa2Length(ca2.length);
  afp.setBlockNum(1);
  afp.setOptLen(new int[]{dupAlign[0][1].length});
  return afp;
}",0.651685393258427
17048,"public Structure getDomain(String pdbDomainName,AtomCache cache){
  SortedSet<String> domainRanges=null;
  if (serializedCache != null) {
    if (serializedCache.containsKey(pdbDomainName)) {
      domainRanges=serializedCache.get(pdbDomainName);
    }
  }
  Structure s=null;
  try {
    if (domainRanges == null || domainRanges.size() == 0) {
      URL u=new URL(server + ""String_Node_Str"" + pdbDomainName);
      System.out.println(u);
      InputStream response=HTTPConnectionTools.getInputStream(u);
      String xml=JFatCatClient.convertStreamToString(response);
      domainRanges=XMLUtil.getDomainRangesFromXML(xml);
      if (domainRanges != null)       cache(pdbDomainName,domainRanges);
    }
    int i=0;
    StringBuffer r=new StringBuffer();
    for (    String domainRange : domainRanges) {
      if (!domainRange.contains(""String_Node_Str""))       r.append(domainRange);
 else {
        String[] spl=domainRange.split(""String_Node_Str"");
        if (spl.length > 1)         r.append(spl[1]);
 else {
          System.out.println(""String_Node_Str"" + domainRange);
        }
      }
      i++;
      if (i < domainRanges.size()) {
        r.append(""String_Node_Str"");
      }
    }
    String ranges=r.toString();
    StructureName sname=new StructureName(pdbDomainName);
    Structure tmp=cache.getStructure(sname.getPdbId());
    s=StructureTools.getSubRanges(tmp,ranges);
    s.setName(pdbDomainName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return s;
}","public Structure getDomain(String pdbDomainName,AtomCache cache){
  SortedSet<String> domainRanges=null;
  if (serializedCache != null) {
    if (serializedCache.containsKey(pdbDomainName)) {
      domainRanges=serializedCache.get(pdbDomainName);
    }
  }
  Structure s=null;
  try {
    boolean shouldRequestDomainRanges=checkDomainRanges(domainRanges);
    if (shouldRequestDomainRanges) {
      URL u=new URL(server + ""String_Node_Str"" + pdbDomainName);
      System.out.println(u);
      InputStream response=HTTPConnectionTools.getInputStream(u);
      String xml=JFatCatClient.convertStreamToString(response);
      domainRanges=XMLUtil.getDomainRangesFromXML(xml);
      if (domainRanges != null)       cache(pdbDomainName,domainRanges);
    }
    int i=0;
    StringBuffer r=new StringBuffer();
    for (    String domainRange : domainRanges) {
      if (!domainRange.contains(""String_Node_Str""))       r.append(domainRange);
 else {
        String[] spl=domainRange.split(""String_Node_Str"");
        if (spl.length > 1)         r.append(spl[1]);
 else {
          System.out.println(""String_Node_Str"" + domainRange);
        }
      }
      i++;
      if (i < domainRanges.size()) {
        r.append(""String_Node_Str"");
      }
    }
    String ranges=r.toString();
    System.out.println(ranges);
    StructureName sname=new StructureName(pdbDomainName);
    Structure tmp=cache.getStructure(sname.getPdbId());
    s=StructureTools.getSubRanges(tmp,ranges);
    s.setName(pdbDomainName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return s;
}",0.9424836601307188
17049,"public RemotePDPProvider(boolean useCache){
  super(CACHE_FILE_NAME);
  if (!useCache)   disableCache();
 else   if (serializedCache.keySet().size() < 10000) {
    loadRepresentativeDomains();
  }
}","public RemotePDPProvider(boolean useCache){
  super(CACHE_FILE_NAME);
  if (!useCache) {
    disableCache();
  }
 else {
    loadRepresentativeDomains();
  }
}",0.84593837535014
17050,"public Structure getDomain(String pdbDomainName,AtomCache cache){
  SortedSet<String> domainRanges=null;
  if (serializedCache != null) {
    if (serializedCache.containsKey(pdbDomainName)) {
      domainRanges=serializedCache.get(pdbDomainName);
    }
  }
  Structure s=null;
  try {
    if (domainRanges == null || domainRanges.size() == 0) {
      URL u=new URL(server + ""String_Node_Str"" + pdbDomainName);
      System.out.println(u);
      InputStream response=HTTPConnectionTools.getInputStream(u);
      String xml=JFatCatClient.convertStreamToString(response);
      domainRanges=XMLUtil.getDomainRangesFromXML(xml);
      if (domainRanges != null)       cache(pdbDomainName,domainRanges);
    }
    if (domainRanges.size() > 0) {
      String domainRange=domainRanges.first();
      s=cache.getStructure(domainRange);
      s.setName(pdbDomainName);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return s;
}","public Structure getDomain(String pdbDomainName,AtomCache cache){
  SortedSet<String> domainRanges=null;
  if (serializedCache != null) {
    if (serializedCache.containsKey(pdbDomainName)) {
      domainRanges=serializedCache.get(pdbDomainName);
    }
  }
  Structure s=null;
  try {
    if (domainRanges == null || domainRanges.size() == 0) {
      URL u=new URL(server + ""String_Node_Str"" + pdbDomainName);
      System.out.println(u);
      InputStream response=HTTPConnectionTools.getInputStream(u);
      String xml=JFatCatClient.convertStreamToString(response);
      domainRanges=XMLUtil.getDomainRangesFromXML(xml);
      if (domainRanges != null)       cache(pdbDomainName,domainRanges);
    }
    int i=0;
    StringBuffer r=new StringBuffer();
    for (    String domainRange : domainRanges) {
      if (!domainRange.contains(""String_Node_Str""))       r.append(domainRange);
 else {
        String[] spl=domainRange.split(""String_Node_Str"");
        if (spl.length > 1)         r.append(spl[1]);
 else {
          System.out.println(""String_Node_Str"" + domainRange);
        }
      }
      i++;
      if (i < domainRanges.size()) {
        r.append(""String_Node_Str"");
      }
    }
    String ranges=r.toString();
    StructureName sname=new StructureName(pdbDomainName);
    Structure tmp=cache.getStructure(sname.getPdbId());
    s=StructureTools.getSubRanges(tmp,ranges);
    s.setName(pdbDomainName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return s;
}",0.6892003297609234
17051,"public RemotePDPProvider(boolean useCache){
  super(CACHE_FILE_NAME);
  if (!useCache)   disableCache();
}","public RemotePDPProvider(boolean useCache){
  super(CACHE_FILE_NAME);
  if (!useCache)   disableCache();
 else   if (serializedCache.keySet().size() < 10000) {
    loadRepresentativeDomains();
  }
}",0.6973684210526315
17052,"public static void main(String[] args){
  try {
    String name1, name2;
    int cp=0;
    name1=""String_Node_Str"";
    name2=""String_Node_Str"";
    cp=122;
    OptimalCECPMain ce=(OptimalCECPMain)StructureAlignmentFactory.getAlgorithm(OptimalCECPMain.algorithmName);
    CeParameters params=(CeParameters)ce.getParameters();
    ce.setParameters(params);
    AtomCache cache=new AtomCache();
    Atom[] ca1=cache.getAtoms(name1);
    Atom[] ca2=cache.getAtoms(name2);
    AFPChain afpChain;
    Atom[] ca2clone=cache.getAtoms(name2);
    afpChain=ce.alignPermuted(ca1,ca2clone,params,cp);
    displayAlignment(afpChain,ca1,ca2);
    AFPChain[] alignments=new AFPChain[ca2.length];
    afpChain=ce.alignOptimal(ca1,ca2,params,alignments);
    System.out.format(""String_Node_Str"",afpChain.getAlignScore());
    System.out.println(""String_Node_Str"");
    for (int i=0; i < alignments.length; i++) {
      double tm=AFPChainScorer.getTMScore(alignments[i],ca1,ca2);
      System.out.format(""String_Node_Str"",i,alignments[i].getAlignScore(),tm,alignments[i].getOptLength(),alignments[i].getTotalRmsdOpt(),alignments[i].getBlockNum());
    }
    displayAlignment(afpChain,ca1,ca2);
    for (int cpPos=0; cpPos < alignments.length; cpPos++) {
      AFPChain curr=alignments[cpPos];
      if ((!curr.isSequentialAlignment()) || curr.getBlockNum() > 1) {
        System.out.format(""String_Node_Str"",cpPos,curr.isSequentialAlignment(),curr.getBlockNum());
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    String name1, name2;
    int[] cps=new int[]{};
    name1=""String_Node_Str"";
    name2=""String_Node_Str"";
    cps=new int[]{122,0,3};
    OptimalCECPMain ce=(OptimalCECPMain)StructureAlignmentFactory.getAlgorithm(OptimalCECPMain.algorithmName);
    CeParameters params=(CeParameters)ce.getParameters();
    ce.setParameters(params);
    AtomCache cache=new AtomCache();
    Atom[] ca1=cache.getAtoms(name1);
    Atom[] ca2=cache.getAtoms(name2);
    AFPChain afpChain;
    AFPChain[] alignments=new AFPChain[ca2.length];
    afpChain=ce.alignOptimal(ca1,ca2,params,alignments);
    System.out.format(""String_Node_Str"",afpChain.getAlignScore());
    System.out.println(""String_Node_Str"");
    for (int i=0; i < alignments.length; i++) {
      double tm=AFPChainScorer.getTMScore(alignments[i],ca1,ca2);
      System.out.format(""String_Node_Str"",i,alignments[i].getAlignScore(),tm,alignments[i].getOptLength(),alignments[i].getTotalRmsdOpt(),alignments[i].getBlockNum());
    }
    for (    int cp : cps) {
      displayAlignment(alignments[cp],ca1,ca2);
    }
    CeCPMain cecp=new CeCPMain();
    afpChain=cecp.align(ca1,ca2);
    displayAlignment(afpChain,ca1,ca2);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.7848463187991422
17053,"/** 
 * Permutes <i>mat</i> by moving the rows of the matrix upwards by <i>cp</i> rows.
 * @param mat The original matrix
 * @param cpRows Number of rows upward to move entries
 * @param cpCols Number of columns leftward to move entries
 * @return The permuted matrix
 */
private static Matrix permuteMatrix(Matrix mat,int cpRows,int cpCols){
  if (cpRows == 0 && cpCols == 0) {
    return mat.copy();
  }
  if (cpRows < 0) {
    cpRows=mat.getRowDimension() + cpRows;
  }
  if (cpRows < 0 || cpRows >= mat.getRowDimension()) {
    throw new ArrayIndexOutOfBoundsException(String.format(""String_Node_Str"",cpRows,mat.getRowDimension()));
  }
  if (cpCols < 0) {
    cpCols=mat.getColumnDimension() + cpCols;
  }
  if (cpCols < 0 || cpCols >= mat.getColumnDimension()) {
    throw new ArrayIndexOutOfBoundsException(String.format(""String_Node_Str"",cpCols,mat.getColumnDimension()));
  }
  int[] rows=new int[mat.getRowDimension()];
  for (int i=0; i < rows.length; i++) {
    rows[i]=(i + cpRows) % rows.length;
  }
  int[] cols=new int[mat.getColumnDimension()];
  for (int i=0; i < cols.length; i++) {
    cols[i]=(i + cpCols) % cols.length;
  }
  Matrix newMat=mat.getMatrix(rows,cols);
  assert(newMat.getRowDimension() == mat.getRowDimension());
  assert(newMat.getColumnDimension() == mat.getColumnDimension());
  assert(newMat.get(0,0) == mat.get(cpRows % mat.getRowDimension(),cpCols % mat.getColumnDimension()));
  newMat.set(0,0,-1);
  newMat.set(10,20,-1);
  return newMat;
}","/** 
 * Permutes <i>mat</i> by moving the rows of the matrix upwards by <i>cp</i> rows.
 * @param mat The original matrix
 * @param cpRows Number of rows upward to move entries
 * @param cpCols Number of columns leftward to move entries
 * @return The permuted matrix
 */
private static Matrix permuteMatrix(Matrix mat,int cpRows,int cpCols){
  if (cpRows == 0 && cpCols == 0) {
    return mat.copy();
  }
  if (cpRows < 0) {
    cpRows=mat.getRowDimension() + cpRows;
  }
  if (cpRows < 0 || cpRows >= mat.getRowDimension()) {
    throw new ArrayIndexOutOfBoundsException(String.format(""String_Node_Str"",cpRows,mat.getRowDimension()));
  }
  if (cpCols < 0) {
    cpCols=mat.getColumnDimension() + cpCols;
  }
  if (cpCols < 0 || cpCols >= mat.getColumnDimension()) {
    throw new ArrayIndexOutOfBoundsException(String.format(""String_Node_Str"",cpCols,mat.getColumnDimension()));
  }
  int[] rows=new int[mat.getRowDimension()];
  for (int i=0; i < rows.length; i++) {
    rows[i]=(i + cpRows) % rows.length;
  }
  int[] cols=new int[mat.getColumnDimension()];
  for (int i=0; i < cols.length; i++) {
    cols[i]=(i + cpCols) % cols.length;
  }
  Matrix newMat=mat.getMatrix(rows,cols);
  assert(newMat.getRowDimension() == mat.getRowDimension());
  assert(newMat.getColumnDimension() == mat.getColumnDimension());
  assert(newMat.get(0,0) == mat.get(cpRows % mat.getRowDimension(),cpCols % mat.getColumnDimension()));
  return newMat;
}",0.9794661190965092
17054,"/** 
 * Finds the optimal alignment between two proteins allowing for a circular permutation (CP). This algorithm performs a CE alignment for each possible CP site. This is quite slow. Use   {@link #alignHeuristic(Atom[],Atom[],Object)} for afaster algorithm.
 * @param ca1 CA atoms of the first protein
 * @param ca2 CA atoms of the second protein
 * @param param {@link CeParameters} object
 * @param alignments If not null, should be an empty array of the same length asca2. This will be filled with the alignments from permuting ca2 by  0 to n-1 residues.
 * @return The best-scoring alignment
 * @throws StructureException
 */
public AFPChain alignOptimal(Atom[] ca1,Atom[] ca2,Object param,AFPChain[] alignments) throws StructureException {
  long startTime=System.currentTimeMillis();
  if (alignments.length != ca2.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Atom[] ca2p=StructureTools.cloneCAArray(ca2);
  AFPChain unaligned=super.align(ca1,ca2,param);
  AFPChain bestAlignment=unaligned;
  if (debug) {
    System.out.print(""String_Node_Str"");
  }
  if (alignments != null) {
    alignments[0]=unaligned;
  }
  for (int cp=1; cp < ca2.length; cp++) {
    AFPChain currentAlignment=alignPermuted(ca1,ca2p,param,1);
    if (debug)     System.out.print(""String_Node_Str"");
    try {
      currentAlignment.setName2(ca2[0].getGroup().getChain().getParent().getName() + ""String_Node_Str"" + cp);
    }
 catch (    Exception e) {
    }
    double currentScore=currentAlignment.getAlignScore();
    if (alignments != null) {
      alignments[cp]=currentAlignment;
    }
    if (currentScore > bestAlignment.getAlignScore()) {
      bestAlignment=currentAlignment;
    }
  }
  if (debug) {
    long elapsedTime=System.currentTimeMillis() - startTime;
    System.out.println();
    System.out.format(""String_Node_Str"",ca2.length,elapsedTime / 1000.,(double)elapsedTime / ca2.length);
  }
  return bestAlignment;
}","/** 
 * Finds the optimal alignment between two proteins allowing for a circular permutation (CP). This algorithm performs a CE alignment for each possible CP site. This is quite slow. Use   {@link #alignHeuristic(Atom[],Atom[],Object)} for afaster algorithm.
 * @param ca1 CA atoms of the first protein
 * @param ca2 CA atoms of the second protein
 * @param param {@link CeParameters} object
 * @param alignments If not null, should be an empty array of the same length asca2. This will be filled with the alignments from permuting ca2 by  0 to n-1 residues.
 * @return The best-scoring alignment
 * @throws StructureException
 */
public AFPChain alignOptimal(Atom[] ca1,Atom[] ca2,Object param,AFPChain[] alignments) throws StructureException {
  long startTime=System.currentTimeMillis();
  if (alignments.length != ca2.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  AFPChain unaligned=super.align(ca1,ca2,param);
  AFPChain bestAlignment=unaligned;
  if (debug) {
    System.out.print(""String_Node_Str"");
    for (int cp=1; cp < ca2.length - 1; cp++) {
      System.out.print(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    System.out.print(""String_Node_Str"");
  }
  if (alignments != null) {
    alignments[0]=unaligned;
  }
  for (int cp=1; cp < ca2.length; cp++) {
    Atom[] ca2p=StructureTools.cloneCAArray(ca2);
    AFPChain currentAlignment=alignPermuted(ca1,ca2p,param,cp);
    if (debug)     System.out.print(""String_Node_Str"");
    try {
      currentAlignment.setName2(ca2[0].getGroup().getChain().getParent().getName() + ""String_Node_Str"" + cp);
    }
 catch (    Exception e) {
    }
    double currentScore=currentAlignment.getAlignScore();
    if (alignments != null) {
      alignments[cp]=currentAlignment;
    }
    if (currentScore > bestAlignment.getAlignScore()) {
      bestAlignment=currentAlignment;
    }
  }
  if (debug) {
    long elapsedTime=System.currentTimeMillis() - startTime;
    System.out.println();
    System.out.format(""String_Node_Str"",ca2.length,elapsedTime / 1000.,(double)elapsedTime / ca2.length);
  }
  return bestAlignment;
}",0.9307465618860512
17055,"/** 
 * A week equality metric. Checks if the optAlign is the same, and if the objects being compared seem to be the same (same names, lengths). Does not check properties of the alignment such as scores or superposition matrices.
 * @see java.lang.Object#equals(java.lang.Object)
 */
@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  AFPChain other=(AFPChain)obj;
  if (algorithmName == null) {
    if (other.algorithmName != null)     return false;
  }
 else   if (!algorithmName.equals(other.algorithmName))   return false;
  if (blockNum != other.blockNum)   return false;
  if (ca1Length != other.ca1Length)   return false;
  if (ca2Length != other.ca2Length)   return false;
  if (name1 == null) {
    if (other.name1 != null)     return false;
  }
 else   if (!name1.equals(other.name1))   return false;
  if (name2 == null) {
    if (other.name2 != null)     return false;
  }
 else   if (!name2.equals(other.name2))   return false;
  if (!Arrays.deepEquals(optAln,other.optAln))   return false;
  if (!Arrays.equals(optLen,other.optLen))   return false;
  if (optLength != other.optLength)   return false;
  if (version == null) {
    if (other.version != null)     return false;
  }
 else   if (!version.equals(other.version))   return false;
  return true;
}","/** 
 * A week equality metric. Checks if the optAlign is the same, and if the objects being compared seem to be the same (same names, lengths). Does not check properties of the alignment such as scores or superposition matrices.
 * @see java.lang.Object#equals(java.lang.Object)
 */
@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  AFPChain other=(AFPChain)obj;
  if (blockNum != other.blockNum)   return false;
  if (ca1Length != other.ca1Length)   return false;
  if (ca2Length != other.ca2Length)   return false;
  if (!Arrays.deepEquals(optAln,other.optAln))   return false;
  if (!Arrays.equals(optLen,other.optLen))   return false;
  if (optLength != other.optLength)   return false;
  return true;
}",0.7350813743218807
17056,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((algorithmName == null) ? 0 : algorithmName.hashCode());
  result=prime * result + blockNum;
  result=prime * result + ca1Length;
  result=prime * result + ca2Length;
  result=prime * result + ((name1 == null) ? 0 : name1.hashCode());
  result=prime * result + ((name2 == null) ? 0 : name2.hashCode());
  result=prime * result + Arrays.hashCode(optAln);
  result=prime * result + Arrays.hashCode(optLen);
  result=prime * result + optLength;
  result=prime * result + ((version == null) ? 0 : version.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + blockNum;
  result=prime * result + ca1Length;
  result=prime * result + ca2Length;
  result=prime * result + Arrays.hashCode(optAln);
  result=prime * result + Arrays.hashCode(optLen);
  result=prime * result + optLength;
  return result;
}",0.493801652892562
17057,"/** 
 * Tests private   {@link OptimalCECPMain#permuteArray(Object[],int)}
 * @throws Exception
 */
public void testPermuteArray() throws Exception {
  Method permuteArray=OptimalCECPMain.class.getDeclaredMethod(""String_Node_Str"",Object[].class,int.class);
  permuteArray.setAccessible(true);
  String[] arr0=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] arr1=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] arr5=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] arrP;
  arrP=Arrays.copyOf(arr0,arr0.length);
  assertTrue(""String_Node_Str"",Arrays.deepEquals(arr0,arrP));
  permuteArray.invoke(null,arrP,1);
  assertTrue(String.format(""String_Node_Str"",(Object[])arrP),Arrays.deepEquals(arr1,arrP));
  arrP=Arrays.copyOf(arr0,arr0.length);
  permuteArray.invoke(null,arrP,5);
  assertTrue(String.format(""String_Node_Str"",(Object[])arrP),Arrays.deepEquals(arr5,arrP));
  arrP=Arrays.copyOf(arr0,arr0.length);
  permuteArray.invoke(null,arrP,-1);
  assertTrue(String.format(""String_Node_Str"",(Object[])arrP),Arrays.deepEquals(arr5,arrP));
  try {
    arrP=Arrays.copyOf(arr0,arr0.length);
    permuteArray.invoke(null,arrP,6);
    fail(""String_Node_Str"");
  }
 catch (  InvocationTargetException e) {
    if (!(e.getCause() instanceof ArrayIndexOutOfBoundsException)) {
      throw e;
    }
  }
}","/** 
 * Tests private   {@link OptimalCECPMain#permuteArray(Object[],int)}
 * @throws Exception
 */
public void testPermuteArray() throws Exception {
  Method permuteArray=OptimalCECPMain.class.getDeclaredMethod(""String_Node_Str"",Object[].class,int.class);
  permuteArray.setAccessible(true);
  String[] arr0=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] arr1=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] arr5=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] arrP;
  arrP=Arrays.copyOf(arr0,arr0.length);
  assertTrue(""String_Node_Str"",Arrays.deepEquals(arr0,arrP));
  permuteArray.invoke(null,arrP,0);
  assertTrue(String.format(""String_Node_Str"",(Object[])arrP),Arrays.deepEquals(arr0,arrP));
  arrP=Arrays.copyOf(arr0,arr0.length);
  permuteArray.invoke(null,arrP,1);
  assertTrue(String.format(""String_Node_Str"",(Object[])arrP),Arrays.deepEquals(arr1,arrP));
  arrP=Arrays.copyOf(arr0,arr0.length);
  permuteArray.invoke(null,arrP,5);
  assertTrue(String.format(""String_Node_Str"",(Object[])arrP),Arrays.deepEquals(arr5,arrP));
  arrP=Arrays.copyOf(arr0,arr0.length);
  permuteArray.invoke(null,arrP,-1);
  assertTrue(String.format(""String_Node_Str"",(Object[])arrP),Arrays.deepEquals(arr5,arrP));
  try {
    arrP=Arrays.copyOf(arr0,arr0.length);
    permuteArray.invoke(null,arrP,6);
    fail(""String_Node_Str"");
  }
 catch (  InvocationTargetException e) {
    if (!(e.getCause() instanceof ArrayIndexOutOfBoundsException)) {
      throw e;
    }
  }
}",0.944954128440367
17058,"/** 
 * Load the sequence
 * @return
 */
private boolean init(){
  try {
    RandomAccessFile randomAccessFile=new RandomAccessFile(file,""String_Node_Str"");
    randomAccessFile.seek(sequenceStartIndex);
    String sequence=sequenceParser.getSequence(randomAccessFile,sequenceLength);
    setContents(sequence);
  }
 catch (  Exception e) {
    throw new FileAccessError(""String_Node_Str"" + file + ""String_Node_Str""+ sequenceStartIndex+ ""String_Node_Str""+ sequenceLength+ ""String_Node_Str""+ e.toString());
  }
  return true;
}","/** 
 * Load the sequence
 * @return
 */
private boolean init(){
  try {
    RandomAccessFile randomAccessFile=new RandomAccessFile(file,""String_Node_Str"");
    randomAccessFile.seek(sequenceStartIndex);
    String sequence=sequenceParser.getSequence(randomAccessFile,sequenceLength);
    setContents(sequence);
    randomAccessFile.close();
  }
 catch (  Exception e) {
    throw new FileAccessError(""String_Node_Str"" + file + ""String_Node_Str""+ sequenceStartIndex+ ""String_Node_Str""+ sequenceLength+ ""String_Node_Str""+ e.toString());
  }
  return true;
}",0.9722735674676524
17059,"/** 
 * Request a Structure based on a <i>name</i>. <pre> Formal specification for how to specify the <i>name</i>: name     := pdbID | pdbID '.' chainID | pdbID '.' range | scopID range         := '('? range (',' range)? ')'? | chainID | chainID '_' resNum '-' resNum pdbID         := [0-9][a-zA-Z0-9]{3} chainID       := [a-zA-Z0-9] scopID        := 'd' pdbID [a-z_][0-9_] resNum        := [-+]?[0-9]+[A-Za-z]? Example structures: 1TIM     #whole structure 4HHB.C     #single chain 4GCR.A_1-83     #one domain, by residue number 3AA0.A,B     #two chains treated as one structure d2bq6a1     #scop domain </pre> With the additional set of rules: <ul> <li>If only a PDB code is provided, the whole structure will be return including ligands, but the first model only (for NMR). <li>Chain IDs are case sensitive, PDB ids are not. To specify a particular chain write as: 4hhb.A or 4HHB.A </li> <li>To specify a SCOP domain write a scopId e.g. d2bq6a1. Some flexibility can be allowed in SCOP domain names, see   {@link #setStrictSCOP(boolean)}</li> <li>URLs are accepted as well</li> </ul>
 * @param name
 * @return a Structure object, or null if name appears improperly formated (eg too short, etc)
 * @throws IOException The PDB file cannot be cached due to IO errors
 * @throws StructureException The name appeared valid but did not correspond to a structure.Also thrown by some submethods upon errors, eg for poorly formatted subranges.
 */
public Structure getStructure(String name) throws IOException, StructureException {
  if (name.length() < 4)   throw new IllegalArgumentException(""String_Node_Str"");
  Structure n=null;
  boolean useChainNr=false;
  boolean useDomainInfo=false;
  String range=null;
  int chainNr=-1;
  try {
    String pdbId=null;
    String chainId=null;
    if (name.length() == 4) {
      pdbId=name;
    }
 else     if (name.startsWith(""String_Node_Str"")) {
      return getStructureFromSCOPDomain(name);
    }
 else     if (name.length() == 6) {
      pdbId=name.substring(0,4);
      if (name.substring(4,5).equals(CHAIN_SPLIT_SYMBOL)) {
        chainId=name.substring(5,6);
      }
 else       if (name.substring(4,5).equals(CHAIN_NR_SYMBOL)) {
        useChainNr=true;
        chainNr=Integer.parseInt(name.substring(5,6));
      }
    }
 else     if ((name.length() > 6) && (name.contains(CHAIN_NR_SYMBOL) || name.contains(UNDERSCORE)) && (!(name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str"")))) {
      pdbId=name.substring(0,4);
      useDomainInfo=true;
      range=name.substring(5);
    }
 else     if (name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str"")) {
      try {
        URL url=new URL(name);
        return getStructureFromURL(url);
      }
 catch (      Exception e) {
        e.printStackTrace();
        return null;
      }
    }
 else     if (name.startsWith(PDP_DOMAIN_IDENTIFIER)) {
      try {
        return getPDPStructure(name);
      }
 catch (      Exception e) {
        e.printStackTrace();
        return null;
      }
    }
    if (pdbId == null) {
      return null;
    }
    while (checkLoading(pdbId)) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        System.err.println(e.getMessage());
      }
    }
    Structure s;
    flagLoading(pdbId);
    try {
      PDBFileReader reader=new PDBFileReader();
      reader.setPath(path);
      reader.setPdbDirectorySplit(isSplit);
      reader.setAutoFetch(autoFetch);
      reader.setFetchFileEvenIfObsolete(fetchFileEvenIfObsolete);
      reader.setFetchCurrent(fetchCurrent);
      reader.setFileParsingParameters(params);
      s=reader.getStructureById(pdbId.toLowerCase());
    }
 catch (    Exception e) {
      flagLoadingFinished(pdbId);
      throw new StructureException(e.getMessage() + ""String_Node_Str"" + pdbId,e);
    }
    flagLoadingFinished(pdbId);
    if (chainId == null && chainNr < 0 && range == null) {
      n=StructureTools.getReducedStructure(s,-1);
    }
 else {
      if (useChainNr) {
        n=StructureTools.getReducedStructure(s,chainNr);
      }
 else       if (useDomainInfo) {
        n=StructureTools.getSubRanges(s,range);
      }
 else {
        n=StructureTools.getReducedStructure(s,chainId);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new StructureException(e.getMessage() + ""String_Node_Str"" + name,e);
  }
  n.setName(name);
  return n;
}","/** 
 * Request a Structure based on a <i>name</i>. <pre> Formal specification for how to specify the <i>name</i>: name     := pdbID | pdbID '.' chainID | pdbID '.' range | scopID range         := '('? range (',' range)? ')'? | chainID | chainID '_' resNum '-' resNum pdbID         := [0-9][a-zA-Z0-9]{3} chainID       := [a-zA-Z0-9] scopID        := 'd' pdbID [a-z_][0-9_] resNum        := [-+]?[0-9]+[A-Za-z]? Example structures: 1TIM     #whole structure 4HHB.C     #single chain 4GCR.A_1-83     #one domain, by residue number 3AA0.A,B     #two chains treated as one structure d2bq6a1     #scop domain </pre> With the additional set of rules: <ul> <li>If only a PDB code is provided, the whole structure will be return including ligands, but the first model only (for NMR). <li>Chain IDs are case sensitive, PDB ids are not. To specify a particular chain write as: 4hhb.A or 4HHB.A </li> <li>To specify a SCOP domain write a scopId e.g. d2bq6a1. Some flexibility can be allowed in SCOP domain names, see   {@link #setStrictSCOP(boolean)}</li> <li>URLs are accepted as well</li> </ul>
 * @param name
 * @return a Structure object, or null if name appears improperly formated (eg too short, etc)
 * @throws IOException The PDB file cannot be cached due to IO errors
 * @throws StructureException The name appeared valid but did not correspond to a structure.Also thrown by some submethods upon errors, eg for poorly formatted subranges.
 */
public Structure getStructure(String name) throws IOException, StructureException {
  if (name.length() < 4)   throw new IllegalArgumentException(""String_Node_Str"");
  Structure n=null;
  boolean useChainNr=false;
  boolean useDomainInfo=false;
  String range=null;
  int chainNr=-1;
  try {
    String pdbId=null;
    String chainId=null;
    if (name.length() == 4) {
      pdbId=name;
    }
 else     if (name.startsWith(""String_Node_Str"")) {
      return getStructureFromSCOPDomain(name);
    }
 else     if (name.length() == 6) {
      pdbId=name.substring(0,4);
      if (name.substring(4,5).equals(CHAIN_SPLIT_SYMBOL)) {
        chainId=name.substring(5,6);
      }
 else       if (name.substring(4,5).equals(CHAIN_NR_SYMBOL)) {
        useChainNr=true;
        chainNr=Integer.parseInt(name.substring(5,6));
      }
    }
 else     if ((name.length() > 6) && (!name.startsWith(PDP_DOMAIN_IDENTIFIER)) && (name.contains(CHAIN_NR_SYMBOL) || name.contains(UNDERSCORE))&& (!(name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str"")))) {
      pdbId=name.substring(0,4);
      useDomainInfo=true;
      range=name.substring(5);
    }
 else     if (name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str"")) {
      try {
        URL url=new URL(name);
        return getStructureFromURL(url);
      }
 catch (      Exception e) {
        e.printStackTrace();
        return null;
      }
    }
 else     if (name.startsWith(PDP_DOMAIN_IDENTIFIER)) {
      try {
        return getPDPStructure(name);
      }
 catch (      Exception e) {
        e.printStackTrace();
        return null;
      }
    }
    if (pdbId == null) {
      return null;
    }
    while (checkLoading(pdbId)) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        System.err.println(e.getMessage());
      }
    }
    Structure s;
    flagLoading(pdbId);
    try {
      PDBFileReader reader=new PDBFileReader();
      reader.setPath(path);
      reader.setPdbDirectorySplit(isSplit);
      reader.setAutoFetch(autoFetch);
      reader.setFetchFileEvenIfObsolete(fetchFileEvenIfObsolete);
      reader.setFetchCurrent(fetchCurrent);
      reader.setFileParsingParameters(params);
      s=reader.getStructureById(pdbId.toLowerCase());
    }
 catch (    Exception e) {
      flagLoadingFinished(pdbId);
      throw new StructureException(e.getMessage() + ""String_Node_Str"" + pdbId,e);
    }
    flagLoadingFinished(pdbId);
    if (chainId == null && chainNr < 0 && range == null) {
      n=StructureTools.getReducedStructure(s,-1);
    }
 else {
      if (useChainNr) {
        n=StructureTools.getReducedStructure(s,chainNr);
      }
 else       if (useDomainInfo) {
        n=StructureTools.getSubRanges(s,range);
      }
 else {
        n=StructureTools.getReducedStructure(s,chainId);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new StructureException(e.getMessage() + ""String_Node_Str"" + name,e);
  }
  n.setName(name);
  return n;
}",0.8759009009009009
17060,"private void calcDBSearch(){
  JTabbedPane tabPane=dbsearch.getTabPane();
  System.out.println(""String_Node_Str"" + tabPane.getSelectedIndex());
  Structure s=null;
  StructurePairSelector tab=null;
  int pos=tabPane.getSelectedIndex();
  if (pos == 0) {
    tab=dbsearch.getSelectPDBPanel();
  }
 else   if (pos == 1) {
    tab=dbsearch.getPDBUploadPanel();
  }
  try {
    s=tab.getStructure1();
    if (s == null) {
      System.err.println(""String_Node_Str"");
      return;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  String name1=""String_Node_Str"";
  if (pos == 0) {
    name1=dbsearch.getSelectPDBPanel().getName1();
  }
 else {
    name1=s.getPDBCode();
  }
  System.out.println(""String_Node_Str"" + name1);
  String file=dbsearch.getOutFileLocation();
  if (file == null || file.equals(""String_Node_Str"")) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
  UserConfiguration config=WebStartMain.getWebStartConfig();
  int totalNrCPUs=Runtime.getRuntime().availableProcessors();
  int useNrCPUs=1;
  if (totalNrCPUs > 1) {
    Object[] options=new Integer[totalNrCPUs];
    int posX=0;
    for (int i=totalNrCPUs; i > 0; i--) {
      options[posX]=i;
      posX++;
    }
    int n=JOptionPane.showOptionDialog(null,""String_Node_Str"",""String_Node_Str"" + totalNrCPUs + ""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
    if (n < 0)     return;
    useNrCPUs=(Integer)options[n];
    System.out.println(""String_Node_Str"" + useNrCPUs + ""String_Node_Str"");
  }
  alicalc=new AlignmentCalcDB(this,s,name1,config,file);
  alicalc.setNrCPUs(useNrCPUs);
  abortB.setEnabled(true);
  progress.setIndeterminate(true);
  ProgressThreadDrawer drawer=new ProgressThreadDrawer(progress);
  drawer.start();
  Thread t=new Thread(alicalc);
  t.start();
}","private void calcDBSearch(){
  JTabbedPane tabPane=dbsearch.getTabPane();
  System.out.println(""String_Node_Str"" + tabPane.getSelectedIndex());
  Structure s=null;
  StructurePairSelector tab=null;
  int pos=tabPane.getSelectedIndex();
  if (pos == 0) {
    tab=dbsearch.getSelectPDBPanel();
  }
 else   if (pos == 1) {
    tab=dbsearch.getPDBUploadPanel();
  }
  try {
    s=tab.getStructure1();
    if (s == null) {
      System.err.println(""String_Node_Str"");
      return;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  String name1=""String_Node_Str"";
  if (pos == 0) {
    name1=s.getName();
  }
 else {
    name1=s.getPDBCode();
  }
  System.out.println(""String_Node_Str"" + name1);
  String file=dbsearch.getOutFileLocation();
  if (file == null || file.equals(""String_Node_Str"")) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    return;
  }
  UserConfiguration config=WebStartMain.getWebStartConfig();
  int totalNrCPUs=Runtime.getRuntime().availableProcessors();
  int useNrCPUs=1;
  if (totalNrCPUs > 1) {
    Object[] options=new Integer[totalNrCPUs];
    int posX=0;
    for (int i=totalNrCPUs; i > 0; i--) {
      options[posX]=i;
      posX++;
    }
    int n=JOptionPane.showOptionDialog(null,""String_Node_Str"",""String_Node_Str"" + totalNrCPUs + ""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
    if (n < 0)     return;
    useNrCPUs=(Integer)options[n];
    System.out.println(""String_Node_Str"" + useNrCPUs + ""String_Node_Str"");
  }
  alicalc=new AlignmentCalcDB(this,s,name1,config,file);
  alicalc.setNrCPUs(useNrCPUs);
  abortB.setEnabled(true);
  progress.setIndeterminate(true);
  ProgressThreadDrawer drawer=new ProgressThreadDrawer(progress);
  drawer.start();
  Thread t=new Thread(alicalc);
  t.start();
}",0.9918122270742358
17061,"/** 
 * Circular permutation specific code to be run after the standard CE alignment
 * @param afpChain
 * @param ca1
 * @param ca2m
 * @param calculator
 * @throws StructureException
 */
public static void postProcessAlignment(AFPChain afpChain,Atom[] ca1,Atom[] ca2m,CECalculator calculator) throws StructureException {
  Matrix doubledMatrix=afpChain.getDistanceMatrix();
  assert(doubledMatrix.getRowDimension() == ca1.length);
  assert(doubledMatrix.getColumnDimension() == ca2m.length);
  Matrix singleMatrix=doubledMatrix.getMatrix(0,ca1.length - 1,0,(ca2m.length / 2) - 1);
  assert(singleMatrix.getRowDimension() == ca1.length);
  assert(singleMatrix.getColumnDimension() == (ca2m.length / 2));
  afpChain.setDistanceMatrix(singleMatrix);
  afpChain=filterDuplicateAFPs(afpChain,calculator,ca1,ca2m);
}","/** 
 * Circular permutation specific code to be run after the standard CE alignment
 * @param afpChain
 * @param ca1
 * @param ca2m
 * @param calculator
 * @throws StructureException
 */
public static AFPChain postProcessAlignment(AFPChain afpChain,Atom[] ca1,Atom[] ca2m,CECalculator calculator) throws StructureException {
  Matrix doubledMatrix=afpChain.getDistanceMatrix();
  assert(doubledMatrix.getRowDimension() == ca1.length);
  assert(doubledMatrix.getColumnDimension() == ca2m.length);
  Matrix singleMatrix=doubledMatrix.getMatrix(0,ca1.length - 1,0,(ca2m.length / 2) - 1);
  assert(singleMatrix.getRowDimension() == ca1.length);
  assert(singleMatrix.getColumnDimension() == (ca2m.length / 2) - 1);
  afpChain.setDistanceMatrix(singleMatrix);
  afpChain=filterDuplicateAFPs(afpChain,calculator,ca1,ca2m);
  return afpChain;
}",0.9787750151607034
17062,"@Override public AFPChain align(Atom[] ca1,Atom[] ca2,Object param) throws StructureException {
  long startTime=System.currentTimeMillis();
  Atom[] ca2m=prepareAtomsForAlign(ca2);
  if (debug) {
    System.out.format(""String_Node_Str"",System.currentTimeMillis() - startTime);
    startTime=System.currentTimeMillis();
  }
  AFPChain afpChain=super.align(ca1,ca2m,params);
  if (debug) {
    System.out.format(""String_Node_Str"",System.currentTimeMillis() - startTime);
    startTime=System.currentTimeMillis();
  }
  postProcessAlignment(afpChain,ca1,ca2m,calculator);
  if (debug) {
    System.out.format(""String_Node_Str"",System.currentTimeMillis() - startTime);
    startTime=System.currentTimeMillis();
  }
  return afpChain;
}","@Override public AFPChain align(Atom[] ca1,Atom[] ca2,Object param) throws StructureException {
  long startTime=System.currentTimeMillis();
  Atom[] ca2m=prepareAtomsForAlign(ca2);
  if (debug) {
    System.out.format(""String_Node_Str"",System.currentTimeMillis() - startTime);
    startTime=System.currentTimeMillis();
  }
  AFPChain afpChain=super.align(ca1,ca2m,params);
  if (debug) {
    System.out.format(""String_Node_Str"",System.currentTimeMillis() - startTime);
    startTime=System.currentTimeMillis();
  }
  afpChain=postProcessAlignment(afpChain,ca1,ca2m,calculator);
  if (debug) {
    System.out.format(""String_Node_Str"",System.currentTimeMillis() - startTime);
    startTime=System.currentTimeMillis();
  }
  return afpChain;
}",0.9653767820773932
17063,"private Structure getStructureFromURL(URL url) throws IOException, StructureException {
  System.out.println(""String_Node_Str"" + url);
  String queryS=url.getQuery();
  String chainId=null;
  if (queryS != null && (queryS.startsWith(""String_Node_Str""))) {
    chainId=queryS.substring(8);
  }
  PDBFileReader reader=new PDBFileReader();
  reader.setPath(path);
  reader.setPdbDirectorySplit(isSplit);
  reader.setAutoFetch(autoFetch);
  reader.setFetchFileEvenIfObsolete(fetchFileEvenIfObsolete);
  reader.setFetchCurrent(fetchCurrent);
  reader.setFileParsingParameters(params);
  Structure s=reader.getStructure(url);
  if (chainId == null)   return StructureTools.getReducedStructure(s,-1);
 else   return StructureTools.getReducedStructure(s,chainId);
}","private Structure getStructureFromURL(URL url) throws IOException, StructureException {
  System.out.println(""String_Node_Str"" + url);
  String queryS=url.getQuery();
  String chainId=null;
  if (queryS != null && (queryS.startsWith(""String_Node_Str""))) {
    chainId=queryS.substring(8);
    String fullu=url.toString();
    if (fullu.startsWith(""String_Node_Str"") && fullu.endsWith(""String_Node_Str"" + queryS)) {
      String newu=fullu.substring(0,(fullu.length() - ((""String_Node_Str"" + queryS).length())));
      url=new URL(newu);
    }
  }
  PDBFileReader reader=new PDBFileReader();
  reader.setPath(path);
  reader.setPdbDirectorySplit(isSplit);
  reader.setAutoFetch(autoFetch);
  reader.setFetchFileEvenIfObsolete(fetchFileEvenIfObsolete);
  reader.setFetchCurrent(fetchCurrent);
  reader.setFileParsingParameters(params);
  Structure s=reader.getStructure(url);
  if (chainId == null)   return StructureTools.getReducedStructure(s,-1);
 else   return StructureTools.getReducedStructure(s,chainId);
}",0.8563348416289592
17064,"private ScopDomain getScopDomain(String scopId){
  if (scopInstallation == null) {
    scopInstallation=new ScopInstallation(path);
  }
  return scopInstallation.getDomainByScopID(scopId);
}","private ScopDomain getScopDomain(String scopId){
  if (scopInstallation == null) {
    scopInstallation=ScopFactory.getSCOP();
  }
  return scopInstallation.getDomainByScopID(scopId);
}",0.9173333333333332
17065,"public ScopInstallation getScopInstallation(){
  if (scopInstallation == null) {
    scopInstallation=new ScopInstallation(path);
  }
  return scopInstallation;
}","public ScopDatabase getScopInstallation(){
  if (scopInstallation == null) {
    scopInstallation=ScopFactory.getSCOP();
  }
  return scopInstallation;
}",0.8571428571428571
17066,"public static String toFatCatCore(AFPChain afpChain,Atom[] ca1,Atom[] ca2,boolean printLegend,boolean longHeader,boolean showHTML){
  if (!afpChain.isSequentialAlignment()) {
    return ""String_Node_Str"";
  }
  String name1=afpChain.getName1();
  String name2=afpChain.getName2();
  int ca1Length=afpChain.getCa1Length();
  int ca2Length=afpChain.getCa2Length();
  int blockNum=afpChain.getBlockNum();
  int totalLenIni=afpChain.getTotalLenIni();
  double totalRmsdIni=afpChain.getTotalRmsdIni();
  int optLength=afpChain.getOptLength();
  double totalRmsdOpt=afpChain.getTotalRmsdOpt();
  double chainRmsd=afpChain.getChainRmsd();
  double alignScore=afpChain.getAlignScore();
  int alnLength=afpChain.getAlnLength();
  int gapLen=afpChain.getGapLen();
  List<AFP> afpSet=afpChain.getAfpSet();
  double similarity=afpChain.getSimilarity();
  double identity=afpChain.getIdentity();
  if (similarity < 0 || identity < 0) {
    afpChain.calcSimilarity();
    similarity=afpChain.getSimilarity();
    identity=afpChain.getIdentity();
  }
  String algorithmName=afpChain.getAlgorithmName();
  double probability=afpChain.getProbability();
  int afpNum=afpSet.size();
  int[] blockGap=afpChain.getBlockGap();
  double[] blockScore=afpChain.getBlockScore();
  double[] blockRmsd=afpChain.getBlockRmsd();
  int[] blockSize=afpChain.getBlockSize();
  int alnbeg1=afpChain.getAlnbeg1();
  int alnbeg2=afpChain.getAlnbeg2();
  char[] alnseq1=afpChain.getAlnseq1();
  char[] alnseq2=afpChain.getAlnseq2();
  char[] alnsymb=afpChain.getAlnsymb();
  StringBuffer txt=new StringBuffer();
  if (longHeader) {
    txt.append(String.format(""String_Node_Str"",name1,ca1Length,name2,ca2Length));
  }
 else {
    txt.append(String.format(""String_Node_Str"",name1,ca1Length,name2,ca2Length));
  }
  txt.append(newline);
  if (afpChain.isShortAlign()) {
    txt.append(""String_Node_Str"");
    return txt.toString();
  }
  if (longHeader) {
    txt.append(String.format(""String_Node_Str"",blockNum - 1,totalLenIni,totalRmsdIni,optLength,totalRmsdOpt,chainRmsd,alignScore,alnLength,gapLen,(100.0 * (double)gapLen / (double)alnLength)));
    txt.append(newline);
  }
 else {
    if (!longHeader)     printScore(txt,algorithmName,probability,longHeader);
    printScoresInLines(afpChain,blockNum,optLength,totalRmsdOpt,alignScore,alnLength,gapLen,identity,similarity,txt);
  }
  if (longHeader) {
    printScore(txt,algorithmName,probability,longHeader);
    txt.append(String.format(""String_Node_Str"",afpNum,identity * 100,similarity * 100));
    txt.append(newline);
  }
  int i;
  double gap;
  if (longHeader) {
    int fragLen=8;
    for (i=0; i < blockNum; i++) {
      gap=(double)blockGap[i] / ((double)blockGap[i] + fragLen * blockSize[i]);
      txt.append(String.format(""String_Node_Str"",i,blockSize[i],blockScore[i],blockRmsd[i],blockGap[i],gap));
      txt.append(newline);
    }
  }
  int linelen=70;
  String a;
  String b;
  String c;
  int t=0;
  int ap=alnbeg1;
  int bp=alnbeg2;
  int k, len;
  while ((alnLength - t) > 0) {
    if (alnLength - t > linelen)     len=linelen;
 else     len=alnLength - t;
    String lseq1=new String(alnseq1).substring(t,t + len);
    String lseq2=new String(alnseq2).substring(t,t + len);
    String lsymb=new String(alnsymb).substring(t,t + len);
    if (showHTML) {
      a=""String_Node_Str"";
      b=""String_Node_Str"";
      c=""String_Node_Str"";
      for (int pos=0; pos < lseq1.length(); pos++) {
        char c1=lseq1.charAt(pos);
        char c2=lseq2.charAt(pos);
        char cl=lsymb.charAt(pos);
        if (cl != ' ') {
          a+=""String_Node_Str"" + c1 + ""String_Node_Str"";
          b+=""String_Node_Str"" + c2 + ""String_Node_Str"";
          c+=""String_Node_Str"" + cl + ""String_Node_Str"";
        }
 else         if (c1 != '-' && c2 != '-') {
          a+=""String_Node_Str"" + c1 + ""String_Node_Str"";
          b+=""String_Node_Str"" + c2 + ""String_Node_Str"";
          c+=""String_Node_Str"" + cl + ""String_Node_Str"";
        }
 else {
          a+=""String_Node_Str"" + c1 + ""String_Node_Str"";
          b+=""String_Node_Str"" + c2 + ""String_Node_Str"";
          c+=""String_Node_Str"" + cl + ""String_Node_Str"";
        }
        if (c1 != '-')         ap++;
        if (c2 != '-')         bp++;
      }
    }
 else {
      a=lseq1;
      b=lseq2;
      c=lsymb;
    }
    txt.append(newline);
    if (longHeader)     txt.append(String.format(""String_Node_Str"",""String_Node_Str""));
 else     txt.append(String.format(""String_Node_Str"",""String_Node_Str""));
    if (longHeader) {
      for (k=10; k <= len; k+=10)       txt.append(""String_Node_Str"");
      if (k <= len + 5)       txt.append(""String_Node_Str"");
    }
 else {
      for (k=10; k <= len; k+=10)       txt.append(""String_Node_Str"");
      if (k <= len + 5)       txt.append(""String_Node_Str"");
    }
    if (ap >= ca1.length)     break;
    if (bp >= ca2.length)     break;
    String pdb1=ca1[ap].getGroup().getResidueNumber().toString();
    String pdb2=ca2[bp].getGroup().getResidueNumber().toString();
    txt.append(newline);
    txt.append(String.format(""String_Node_Str"" + newline + ""String_Node_Str""+ newline+ ""String_Node_Str"",pdb1,a,""String_Node_Str"",c,pdb2,b));
    txt.append(newline);
    if (!showHTML) {
      for (k=0; k < len; k++) {
        if (a.charAt(k) != '-')         ap++;
        if (b.charAt(k) != '-')         bp++;
      }
    }
    t+=len;
  }
  txt.append(newline);
  if (printLegend) {
    if (algorithmName.equalsIgnoreCase(CeMain.algorithmName) || algorithmName.equalsIgnoreCase(SmithWaterman3Daligner.algorithmName)) {
      txt.append(""String_Node_Str"");
    }
 else {
      txt.append(""String_Node_Str"");
    }
    txt.append(newline);
  }
  return txt.toString();
}","public static String toFatCatCore(AFPChain afpChain,Atom[] ca1,Atom[] ca2,boolean printLegend,boolean longHeader,boolean showHTML){
  if (!afpChain.isSequentialAlignment()) {
    return ""String_Node_Str"";
  }
  String name1=afpChain.getName1();
  String name2=afpChain.getName2();
  int ca1Length=afpChain.getCa1Length();
  int ca2Length=afpChain.getCa2Length();
  int blockNum=afpChain.getBlockNum();
  int totalLenIni=afpChain.getTotalLenIni();
  double totalRmsdIni=afpChain.getTotalRmsdIni();
  int optLength=afpChain.getOptLength();
  double totalRmsdOpt=afpChain.getTotalRmsdOpt();
  double chainRmsd=afpChain.getChainRmsd();
  double alignScore=afpChain.getAlignScore();
  int alnLength=afpChain.getAlnLength();
  int gapLen=afpChain.getGapLen();
  List<AFP> afpSet=afpChain.getAfpSet();
  double similarity=afpChain.getSimilarity();
  double identity=afpChain.getIdentity();
  if (similarity < 0 || identity < 0) {
    afpChain.calcSimilarity();
    similarity=afpChain.getSimilarity();
    identity=afpChain.getIdentity();
  }
  String algorithmName=afpChain.getAlgorithmName();
  double probability=afpChain.getProbability();
  int afpNum=afpSet.size();
  int[] blockGap=afpChain.getBlockGap();
  double[] blockScore=afpChain.getBlockScore();
  double[] blockRmsd=afpChain.getBlockRmsd();
  int[] blockSize=afpChain.getBlockSize();
  int alnbeg1=afpChain.getAlnbeg1();
  int alnbeg2=afpChain.getAlnbeg2();
  char[] alnseq1=afpChain.getAlnseq1();
  char[] alnseq2=afpChain.getAlnseq2();
  char[] alnsymb=afpChain.getAlnsymb();
  StringBuffer txt=new StringBuffer();
  if (longHeader) {
    txt.append(String.format(""String_Node_Str"",name1,ca1Length,name2,ca2Length));
  }
 else {
    txt.append(String.format(""String_Node_Str"",name1,ca1Length,name2,ca2Length));
  }
  txt.append(newline);
  if (afpChain.isShortAlign()) {
    txt.append(""String_Node_Str"");
    return txt.toString();
  }
  if (longHeader) {
    txt.append(String.format(""String_Node_Str"",blockNum - 1,totalLenIni,totalRmsdIni,optLength,totalRmsdOpt,chainRmsd,alignScore,alnLength,gapLen,(100.0 * (double)gapLen / (double)alnLength)));
    txt.append(newline);
  }
 else {
    if (!longHeader)     printScore(txt,algorithmName,probability,longHeader);
    printScoresInLines(afpChain,blockNum,optLength,totalRmsdOpt,alignScore,alnLength,gapLen,identity,similarity,txt);
  }
  if (longHeader) {
    printScore(txt,algorithmName,probability,longHeader);
    txt.append(String.format(""String_Node_Str"",afpNum,identity * 100,similarity * 100));
    txt.append(newline);
  }
  int i;
  double gap;
  if (longHeader) {
    int fragLen=8;
    for (i=0; i < blockNum; i++) {
      gap=(double)blockGap[i] / ((double)blockGap[i] + fragLen * blockSize[i]);
      txt.append(String.format(""String_Node_Str"",i,blockSize[i],blockScore[i],blockRmsd[i],blockGap[i],gap));
      txt.append(newline);
    }
  }
  int linelen=70;
  String a;
  String b;
  String c;
  int t=0;
  int ap=alnbeg1;
  int bp=alnbeg2;
  int k, len;
  System.out.println(alnseq1.length + ""String_Node_Str"" + alnseq1.toString());
  while ((alnLength - t) > 0) {
    if (alnLength - t > linelen)     len=linelen;
 else     len=alnLength - t;
    if (ap >= ca1.length)     break;
    if (bp >= ca2.length)     break;
    String pdb1=ca1[ap].getGroup().getResidueNumber().toString();
    String pdb2=ca2[bp].getGroup().getResidueNumber().toString();
    String lseq1=new String(alnseq1).substring(t,t + len);
    String lseq2=new String(alnseq2).substring(t,t + len);
    String lsymb=new String(alnsymb).substring(t,t + len);
    if (showHTML) {
      a=""String_Node_Str"";
      b=""String_Node_Str"";
      c=""String_Node_Str"";
      for (int pos=0; pos < lseq1.length(); pos++) {
        char c1=lseq1.charAt(pos);
        char c2=lseq2.charAt(pos);
        char cl=lsymb.charAt(pos);
        int block=-1;
        if (cl != ' ') {
          try {
            block=Integer.parseInt(cl + ""String_Node_Str"");
          }
 catch (          Exception e) {
          }
        }
        if (cl != ' ') {
          if (block > -1) {
            a+=""String_Node_Str"" + block + ""String_Node_Str""+ c1+ ""String_Node_Str"";
            b+=""String_Node_Str"" + block + ""String_Node_Str""+ c2+ ""String_Node_Str"";
            c+=""String_Node_Str"" + cl + ""String_Node_Str"";
          }
 else {
            a+=""String_Node_Str"" + c1 + ""String_Node_Str"";
            b+=""String_Node_Str"" + c2 + ""String_Node_Str"";
            c+=""String_Node_Str"" + cl + ""String_Node_Str"";
          }
        }
 else         if (c1 != '-' && c2 != '-') {
          a+=""String_Node_Str"" + c1 + ""String_Node_Str"";
          b+=""String_Node_Str"" + c2 + ""String_Node_Str"";
          c+=""String_Node_Str"" + cl + ""String_Node_Str"";
        }
 else {
          a+=""String_Node_Str"" + c1 + ""String_Node_Str"";
          b+=""String_Node_Str"" + c2 + ""String_Node_Str"";
          c+=""String_Node_Str"" + cl + ""String_Node_Str"";
        }
        if (c1 != '-')         ap++;
        if (c2 != '-')         bp++;
      }
    }
 else {
      a=lseq1;
      b=lseq2;
      c=lsymb;
    }
    txt.append(newline);
    if (longHeader)     txt.append(String.format(""String_Node_Str"",""String_Node_Str""));
 else     txt.append(String.format(""String_Node_Str"",""String_Node_Str""));
    if (longHeader) {
      for (k=10; k <= len; k+=10)       txt.append(""String_Node_Str"");
      if (k <= len + 5)       txt.append(""String_Node_Str"");
    }
 else {
      for (k=10; k <= len; k+=10)       txt.append(""String_Node_Str"");
      if (k <= len + 5)       txt.append(""String_Node_Str"");
    }
    txt.append(newline);
    txt.append(String.format(""String_Node_Str"" + newline + ""String_Node_Str""+ newline+ ""String_Node_Str"",pdb1,a,""String_Node_Str"",c,pdb2,b));
    txt.append(newline);
    if (!showHTML) {
      for (k=0; k < len; k++) {
        if (a.charAt(k) != '-')         ap++;
        if (b.charAt(k) != '-')         bp++;
      }
    }
    t+=len;
  }
  txt.append(newline);
  if (printLegend) {
    if (algorithmName.equalsIgnoreCase(CeMain.algorithmName) || algorithmName.equalsIgnoreCase(SmithWaterman3Daligner.algorithmName)) {
      txt.append(""String_Node_Str"");
    }
 else {
      txt.append(""String_Node_Str"");
    }
    txt.append(newline);
  }
  return txt.toString();
}",0.8923849372384938
17067,"public NCBIQBlastAlignmentProperties(){
  this.param.put(""String_Node_Str"",""String_Node_Str"");
  this.param.put(""String_Node_Str"",""String_Node_Str"");
  this.param.put(""String_Node_Str"",""String_Node_Str"");
  this.param.put(""String_Node_Str"",""String_Node_Str"");
  this.param.put(""String_Node_Str"",""String_Node_Str"");
}","public NCBIQBlastAlignmentProperties(){
  this.param.put(""String_Node_Str"",""String_Node_Str"");
  this.param.put(""String_Node_Str"",""String_Node_Str"");
  this.param.put(""String_Node_Str"",""String_Node_Str"");
  this.param.put(""String_Node_Str"",""String_Node_Str"");
  this.param.put(""String_Node_Str"",""String_Node_Str"");
  this.param.put(""String_Node_Str"",""String_Node_Str"");
  this.param.put(""String_Node_Str"",""String_Node_Str"");
}",0.8517520215633423
17068,"/** 
 * <p> This method extracts the actual Blast report for this request ID. It uses an object implementing the RemotePairwiseAlignmentOutputProperties interface which will specify output formatting options. </p>
 * @param id :a valid request ID
 * @param rb : a <code>RemotePairwiseAlignmentOutputProperties</code> thatwill specify specific output formatting commands
 * @return an <code>InputStream</code> that can be use any way one mightdesire
 * @throws Exception if it is not possible to recover the results.
 */
public InputStream getAlignmentResults(String id,RemotePairwiseAlignmentOutputProperties rb) throws Exception {
  if (holder.containsKey(id)) {
    String srid=""String_Node_Str"" + id + ""String_Node_Str""+ rb.getOutputOption(""String_Node_Str"")+ ""String_Node_Str""+ rb.getOutputOption(""String_Node_Str"")+ ""String_Node_Str""+ rb.getOutputOption(""String_Node_Str"")+ ""String_Node_Str""+ rb.getOutputOption(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ getTool()+ ""String_Node_Str""+ getEmail();
    try {
      uConn=setQBlastServiceProperties(aUrl.openConnection());
      fromQBlast=new OutputStreamWriter(uConn.getOutputStream());
      fromQBlast.write(srid);
      fromQBlast.flush();
      return uConn.getInputStream();
    }
 catch (    IOException ioe) {
      throw new Exception(""String_Node_Str"");
    }
  }
 else {
    throw new Exception(""String_Node_Str"" + id + ""String_Node_Str"");
  }
}","/** 
 * <p> This method extracts the actual Blast report for this request ID. It uses an object implementing the RemotePairwiseAlignmentOutputProperties interface which will specify output formatting options. </p>
 * @param id :a valid request ID
 * @param rb : a <code>RemotePairwiseAlignmentOutputProperties</code> thatwill specify specific output formatting commands
 * @return an <code>InputStream</code> that can be use any way one mightdesire
 * @throws Exception if it is not possible to recover the results.
 */
public InputStream getAlignmentResults(String id,RemotePairwiseAlignmentOutputProperties rb) throws Exception {
  if (holder.containsKey(id)) {
    String srid=""String_Node_Str"" + id + ""String_Node_Str""+ rb.getOutputOption(""String_Node_Str"")+ ""String_Node_Str""+ rb.getOutputOption(""String_Node_Str"")+ ""String_Node_Str""+ rb.getOutputOption(""String_Node_Str"")+ ""String_Node_Str""+ rb.getOutputOption(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ getTool()+ ""String_Node_Str""+ getEmail();
    try {
      uConn=setQBlastServiceProperties(aUrl.openConnection());
      fromQBlast=new OutputStreamWriter(uConn.getOutputStream());
      fromQBlast.write(srid);
      fromQBlast.flush();
      return uConn.getInputStream();
    }
 catch (    IOException ioe) {
      throw new Exception(""String_Node_Str"");
    }
  }
 else {
    throw new Exception(""String_Node_Str"" + id + ""String_Node_Str"");
  }
}",0.9933728636205092
17069,"private void colorBySCOP(){
  if (structure == null)   return;
  String pdbId=structure.getPDBCode();
  if (pdbId == null)   return;
  String pdbLocation=System.getProperty(AbstractUserArgumentProcessor.PDB_DIR);
  ScopInstallation scop=new ScopInstallation(pdbLocation);
  List<ScopDomain> domains=scop.getDomainsForPDB(pdbId);
  int i=-1;
  for (  ScopDomain domain : domains) {
    i++;
    if (i >= ColorUtils.colorWheel.length)     i=0;
    Color c1=ColorUtils.colorWheel[i];
    List<String> ranges=domain.getRanges();
    for (    String range : ranges) {
      System.out.println(range);
      String[] spl=range.split(""String_Node_Str"");
      String script=""String_Node_Str"";
      if (spl.length > 1)       script+=spl[1] + ""String_Node_Str"" + spl[0]+ ""String_Node_Str"";
 else       script+=""String_Node_Str"" + spl[0] + ""String_Node_Str"";
      script+=""String_Node_Str"" + c1.getRed() + ""String_Node_Str""+ c1.getGreen()+ ""String_Node_Str""+ c1.getBlue()+ ""String_Node_Str"";
      script+=""String_Node_Str"" + c1.getRed() + ""String_Node_Str""+ c1.getGreen()+ ""String_Node_Str""+ c1.getBlue()+ ""String_Node_Str"";
      System.out.println(script);
      evalString(script);
    }
  }
}","private void colorBySCOP(){
  if (structure == null)   return;
  String pdbId=structure.getPDBCode();
  if (pdbId == null)   return;
  String pdbLocation=System.getProperty(AbstractUserArgumentProcessor.PDB_DIR);
  ScopInstallation scop=new ScopInstallation(pdbLocation);
  List<ScopDomain> domains=scop.getDomainsForPDB(pdbId);
  if (domains == null) {
    System.err.println(""String_Node_Str"" + pdbId);
    return;
  }
  int i=-1;
  for (  ScopDomain domain : domains) {
    i++;
    if (i >= ColorUtils.colorWheel.length)     i=0;
    Color c1=ColorUtils.colorWheel[i];
    List<String> ranges=domain.getRanges();
    for (    String range : ranges) {
      System.out.println(range);
      String[] spl=range.split(""String_Node_Str"");
      String script=""String_Node_Str"";
      if (spl.length > 1)       script+=spl[1] + ""String_Node_Str"" + spl[0]+ ""String_Node_Str"";
 else       script+=""String_Node_Str"" + spl[0] + ""String_Node_Str"";
      script+=""String_Node_Str"" + c1.getRed() + ""String_Node_Str""+ c1.getGreen()+ ""String_Node_Str""+ c1.getBlue()+ ""String_Node_Str"";
      script+=""String_Node_Str"" + c1.getRed() + ""String_Node_Str""+ c1.getGreen()+ ""String_Node_Str""+ c1.getBlue()+ ""String_Node_Str"";
      System.out.println(script);
      evalString(script);
    }
  }
}",0.962753036437247
17070,"/** 
 * a simple matching approach that tries to do a 1:1 mapping between SEQRES and ATOM records returns true if this simple matching approach worked fine
 * @param seqRes
 * @param atomList
 * @return
 */
private boolean trySimpleMatch(Chain seqRes,Chain atomRes){
  List<Group> seqResGroups=seqRes.getAtomGroups();
  List<Group> atmResGroups=atomRes.getAtomGroups();
  boolean startAt1=true;
  for (int atomResPos=0; atomResPos < atmResGroups.size(); atomResPos++) {
    Group atomResGroup=atmResGroups.get(atomResPos);
    String threeLetterCode=atomResGroup.getPDBName();
    if (excludeTypes.contains(threeLetterCode)) {
      continue;
    }
    ResidueNumber atomResNum=atomResGroup.getResidueNumber();
    if (atomResNum.getSeqNum() < 0) {
      if (DEBUG)       System.err.println(""String_Node_Str"");
      return false;
    }
    if (atomResNum.getSeqNum() == 0) {
      Group seqResGroup=seqResGroups.get(0);
      if (seqResGroup.getPDBName().equals(atomResGroup.getPDBName())) {
        startAt1=false;
      }
    }
    int seqResPos=atomResNum.getSeqNum();
    if (startAt1)     seqResPos--;
    if (startAt1 && seqResPos >= seqResGroups.size()) {
      if (atomResGroup instanceof AminoAcid) {
        if (DEBUG)         System.err.println(""String_Node_Str"" + seqResPos + ""String_Node_Str""+ seqResGroups.size()+ ""String_Node_Str""+ atomResGroup);
        return false;
      }
 else {
        continue;
      }
    }
    Group seqResGroup=seqResGroups.get(seqResPos);
    if (!seqResGroup.getPDBName().trim().equals(atomResGroup.getPDBName().trim())) {
      if (DEBUG)       System.err.println(""String_Node_Str"" + seqResPos + ""String_Node_Str""+ atomResGroup+ ""String_Node_Str""+ seqResGroup);
      return false;
    }
    seqResGroups.set(seqResPos,atomResGroup);
  }
  return true;
}","/** 
 * a simple matching approach that tries to do a 1:1 mapping between SEQRES and ATOM records returns true if this simple matching approach worked fine
 * @param seqRes
 * @param atomList
 * @return
 */
private boolean trySimpleMatch(Chain seqRes,Chain atomRes){
  List<Group> seqResGroups=seqRes.getAtomGroups();
  List<Group> atmResGroups=atomRes.getAtomGroups();
  if (DEBUG) {
    System.err.println(""String_Node_Str"" + atomRes.getChainID() + ""String_Node_Str""+ seqRes.getChainID());
  }
  boolean startAt1=true;
  for (int atomResPos=0; atomResPos < atmResGroups.size(); atomResPos++) {
    Group atomResGroup=atmResGroups.get(atomResPos);
    String threeLetterCode=atomResGroup.getPDBName();
    if (excludeTypes.contains(threeLetterCode)) {
      continue;
    }
    ResidueNumber atomResNum=atomResGroup.getResidueNumber();
    int seqResPos=atomResNum.getSeqNum();
    if (seqResPos < 0) {
      if (DEBUG)       System.err.println(""String_Node_Str"");
      return false;
    }
    if (seqResPos == 0) {
      Group seqResGroup=seqResGroups.get(0);
      if (seqResGroup.getPDBName().equals(atomResGroup.getPDBName())) {
        startAt1=false;
      }
 else {
        if (DEBUG) {
          System.err.println(""String_Node_Str"" + seqResGroup.getPDBName() + ""String_Node_Str""+ atomResGroup.getPDBName()+ ""String_Node_Str"");
          return false;
        }
      }
    }
    if (startAt1)     seqResPos--;
    if (startAt1 && seqResPos >= seqResGroups.size()) {
      if (atomResGroup instanceof AminoAcid) {
        if (DEBUG)         System.err.println(""String_Node_Str"" + seqResPos + ""String_Node_Str""+ seqResGroups.size()+ ""String_Node_Str""+ atomResGroup);
        return false;
      }
 else {
        continue;
      }
    }
    if (seqResPos < 0) {
      System.err.println(""String_Node_Str"" + atomRes.getChainID() + ""String_Node_Str""+ atomResGroup);
    }
    Group seqResGroup=seqResGroups.get(seqResPos);
    if (!seqResGroup.getPDBName().trim().equals(atomResGroup.getPDBName().trim())) {
      if (DEBUG)       System.err.println(""String_Node_Str"" + seqResPos + ""String_Node_Str""+ atomResGroup+ ""String_Node_Str""+ seqResGroup);
      return false;
    }
    seqResGroups.set(seqResPos,atomResGroup);
  }
  return true;
}",0.3903162055335968
17071,"/** 
 * Imperfect code. Checks the last amino acid to see if a codon could have translated a stop for it. Left in for the moment
 */
protected void trimStop(List<AminoAcidCompound> sequence){
  AminoAcidCompound stop=sequence.get(sequence.size() - 1);
  boolean isStop=false;
  for (  Codon c : aminoAcidToCodon.get(stop)) {
    if (c.isStop()) {
      isStop=true;
      break;
    }
  }
  if (isStop) {
    sequence.remove(sequence.size() - 1);
  }
}","/** 
 * Imperfect code. Checks the last amino acid to see if a codon could have translated a stop for it. Left in for the moment
 */
protected void trimStop(List<AminoAcidCompound> sequence){
  AminoAcidCompound stop=sequence.get(sequence.size() - 1);
  boolean isStop=false;
  if (aminoAcidToCodon.containsKey(stop)) {
    for (    Codon c : aminoAcidToCodon.get(stop)) {
      if (c.isStop()) {
        isStop=true;
        break;
      }
    }
  }
  if (isStop) {
    sequence.remove(sequence.size() - 1);
  }
}",0.9213250517598344
17072,"/** 
 * Performs the core conversion of RNA to Peptide. It does this by walking a windowed version of the given sequence. Any trailing DNA base pairs are ignored according to the specification of   {@link WindowedSequence}.
 */
public List<Sequence<AminoAcidCompound>> createSequences(Sequence<NucleotideCompound> originalSequence){
  List<List<AminoAcidCompound>> workingList=new ArrayList<List<AminoAcidCompound>>();
  Iterable<SequenceView<NucleotideCompound>> iter=new WindowedSequence<NucleotideCompound>(originalSequence,3);
  for (  SequenceView<NucleotideCompound> element : iter) {
    AminoAcidCompound aminoAcid;
    int i=1;
    Table.CaseInsensitiveTriplet triplet=new Table.CaseInsensitiveTriplet(element.getCompoundAt(i++),element.getCompoundAt(i++),element.getCompoundAt(i++));
    Codon target;
    int arrayIndex=triplet.intValue();
    if (arrayIndex > -1 && arrayIndex < codonArray.length) {
      target=codonArray[arrayIndex];
      aminoAcid=target.getAminoAcid();
    }
 else {
      target=quickLookup.get(triplet);
      aminoAcid=target.getAminoAcid();
    }
    if (aminoAcid == null && translateNCodons()) {
      aminoAcid=unknownAminoAcidCompound;
    }
    addCompoundsToList(Arrays.asList(aminoAcid),workingList);
  }
  postProcessCompoundLists(workingList);
  return workingListToSequences(workingList);
}","/** 
 * Performs the core conversion of RNA to Peptide. It does this by walking a windowed version of the given sequence. Any trailing DNA base pairs are ignored according to the specification of   {@link WindowedSequence}.
 */
public List<Sequence<AminoAcidCompound>> createSequences(Sequence<NucleotideCompound> originalSequence){
  List<List<AminoAcidCompound>> workingList=new ArrayList<List<AminoAcidCompound>>();
  Iterable<SequenceView<NucleotideCompound>> iter=new WindowedSequence<NucleotideCompound>(originalSequence,3);
  for (  SequenceView<NucleotideCompound> element : iter) {
    AminoAcidCompound aminoAcid=null;
    int i=1;
    Table.CaseInsensitiveTriplet triplet=new Table.CaseInsensitiveTriplet(element.getCompoundAt(i++),element.getCompoundAt(i++),element.getCompoundAt(i++));
    Codon target=null;
    int arrayIndex=triplet.intValue();
    if (arrayIndex > -1 && arrayIndex < codonArray.length) {
      target=codonArray[arrayIndex];
      if (target != null) {
        aminoAcid=target.getAminoAcid();
      }
    }
 else {
      target=quickLookup.get(triplet);
      aminoAcid=target.getAminoAcid();
    }
    if (aminoAcid == null && translateNCodons()) {
      aminoAcid=unknownAminoAcidCompound;
    }
    addCompoundsToList(Arrays.asList(aminoAcid),workingList);
  }
  postProcessCompoundLists(workingList);
  return workingListToSequences(workingList);
}",0.9823917828319882
17073,"private void initMet(List<AminoAcidCompound> sequence){
  AminoAcidCompound initMet=getToCompoundSet().getCompoundForString(""String_Node_Str"");
  AminoAcidCompound start=sequence.get(0);
  boolean isStart=false;
  for (  Codon c : aminoAcidToCodon.get(start)) {
    if (c.isStart()) {
      isStart=true;
      break;
    }
  }
  if (isStart) {
    sequence.set(0,initMet);
  }
}","private void initMet(List<AminoAcidCompound> sequence){
  AminoAcidCompound initMet=getToCompoundSet().getCompoundForString(""String_Node_Str"");
  AminoAcidCompound start=sequence.get(0);
  boolean isStart=false;
  if (aminoAcidToCodon.containsKey(start)) {
    for (    Codon c : aminoAcidToCodon.get(start)) {
      if (c.isStart()) {
        isStart=true;
        break;
      }
    }
  }
  if (isStart) {
    sequence.set(0,initMet);
  }
}",0.9135200974421436
17074,"public FileParsingParameters getFileParsingParameters(){
  return null;
}","public FileParsingParameters getFileParsingParameters(){
  return params;
}",0.9324324324324323
17075,"private void downloadBiolUnit(String pdbId,File localFile){
  String u=""String_Node_Str"";
  String ur=String.format(u,pdbId);
  System.out.println(""String_Node_Str"" + ur);
  System.out.println(""String_Node_Str"" + localFile);
  try {
    URL url=new URL(ur);
    InputStream uStream=url.openStream();
    InputStream conn=new GZIPInputStream(uStream);
    FileOutputStream outPut=new FileOutputStream(localFile);
    GZIPOutputStream gzOutPut=new GZIPOutputStream(outPut);
    PrintWriter pw=new PrintWriter(gzOutPut);
    BufferedReader fileBuffer=new BufferedReader(new InputStreamReader(conn));
    String line;
    while ((line=fileBuffer.readLine()) != null) {
      pw.println(line);
    }
    pw.flush();
    pw.close();
    outPut.flush();
    outPut.close();
    conn.close();
    uStream.close();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + pdbId + ""String_Node_Str"");
    e.printStackTrace();
  }
}","/** 
 * Download the biological unit file
 * @param pdbId the PDB ID
 * @param localFile where to store the file locally
 */
private void downloadBiolUnit(String pdbId,File localFile){
  String u=""String_Node_Str"";
  String ur=String.format(u,pdbId);
  System.out.println(""String_Node_Str"" + ur);
  System.out.println(""String_Node_Str"" + localFile);
  try {
    URL url=new URL(ur);
    InputStream uStream=url.openStream();
    InputStream conn=new GZIPInputStream(uStream);
    FileOutputStream outPut=new FileOutputStream(localFile);
    GZIPOutputStream gzOutPut=new GZIPOutputStream(outPut);
    PrintWriter pw=new PrintWriter(gzOutPut);
    BufferedReader fileBuffer=new BufferedReader(new InputStreamReader(conn));
    String line;
    while ((line=fileBuffer.readLine()) != null) {
      pw.println(line);
    }
    pw.flush();
    pw.close();
    outPut.flush();
    outPut.close();
    conn.close();
    uStream.close();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + pdbId + ""String_Node_Str"");
    e.printStackTrace();
  }
}",0.9374061091637456
17076,"public void setFileParsingParameters(FileParsingParameters params){
}","public void setFileParsingParameters(FileParsingParameters params){
  this.params=params;
}",0.8625
17077,"/** 
 * returns the first available biological unit for the PDB ID
 * @throws IOException 
 */
public Structure getBiologicalUnit(String pdbId) throws StructureException, IOException {
  if (pdbId == null || pdbId.length() < 4)   throw new StructureException(""String_Node_Str"" + pdbId + ""String_Node_Str"");
  String middle=pdbId.substring(1,3).toLowerCase();
  String dir=path + BIOL_DIR;
  File tmp1=new File(dir);
  if (!tmp1.exists()) {
    tmp1.mkdir();
  }
  dir=dir + lineSplit + middle;
  File directoryCheck=new File(dir);
  if (!directoryCheck.exists()) {
    directoryCheck.mkdir();
  }
  File tempFile=new File(dir + lineSplit + ""String_Node_Str""+ pdbId.toLowerCase()+ ""String_Node_Str"");
  if (!tempFile.exists()) {
    downloadBiolUnit(pdbId.toLowerCase(),tempFile);
  }
  PDBFileReader reader=getPdbFilereader();
  return reader.getStructure(tempFile);
}","/** 
 * Returns the first available biological unit for the PDB ID. Note: the biological units are represented using multiple models. You need to work with all models to get the full set of atoms.
 * @throws IOException 
 */
public Structure getBiologicalUnit(String pdbId) throws StructureException, IOException {
  if (pdbId == null || pdbId.length() < 4)   throw new StructureException(""String_Node_Str"" + pdbId + ""String_Node_Str"");
  String middle=pdbId.substring(1,3).toLowerCase();
  String dir=path + BIOL_DIR;
  File tmp1=new File(dir);
  if (!tmp1.exists()) {
    tmp1.mkdir();
  }
  dir=dir + lineSplit + middle;
  File directoryCheck=new File(dir);
  if (!directoryCheck.exists()) {
    directoryCheck.mkdir();
  }
  File tempFile=new File(dir + lineSplit + ""String_Node_Str""+ pdbId.toLowerCase()+ ""String_Node_Str"");
  if (!tempFile.exists()) {
    downloadBiolUnit(pdbId.toLowerCase(),tempFile);
  }
  PDBFileReader reader=getPdbFilereader();
  return reader.getStructure(tempFile);
}",0.9292604501607716
17078,"/** 
 * Get all amino acids in a chain.
 * @param chain
 * @return
 */
public static List<Group> getAminoAcids(Chain chain){
  List<Group> residues=new ArrayList<Group>(chain.getSeqResGroups());
  residues.retainAll(chain.getAtomGroups());
  return residues;
}","/** 
 * Get all amino acids in a chain.
 * @param chain
 * @return
 */
public static List<Group> getAminoAcids(Chain chain){
  List<Group> residues=new ArrayList<Group>(chain.getAtomGroups());
  residues.retainAll(chain.getSeqResGroups());
  List<Group> otherGroups=new ArrayList<Group>(chain.getAtomGroups());
  otherGroups.removeAll(chain.getSeqResGroups());
  for (  Group g : otherGroups) {
    if (g.hasAminoAtoms()) {
      residues.add(g);
    }
  }
  return residues;
}",0.5373134328358209
17079,"public static String[][] setUpLongTest(){
  String[][] strucs=new String[][]{{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",null}};
  return strucs;
}","public static String[][] setUpLongTest(){
  String[][] strucs=new String[][]{{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",null}};
  return strucs;
}",0.2625570776255708
17080,"public static double getTMScore(AFPChain align,Atom[] ca1,Atom[] ca2) throws StructureException {
  if (align.getNrEQR() == 0)   return -1;
  Atom[] ca1aligned=new Atom[align.getOptLength()];
  Atom[] ca2aligned=new Atom[align.getOptLength()];
  int pos=0;
  int[] blockLens=align.getOptLen();
  int[][][] optAln=align.getOptAln();
  assert(align.getBlockNum() <= optAln.length);
  for (int block=0; block < align.getBlockNum(); block++) {
    assert(blockLens[block] <= optAln[block][0].length);
    for (int i=0; i < blockLens[block]; i++) {
      ca1aligned[pos]=ca1[optAln[block][0][i]];
      ca2aligned[pos]=(Atom)ca2[optAln[block][1][i]].clone();
      pos++;
    }
  }
  assert(pos == align.getOptLength());
  SVDSuperimposer svd=new SVDSuperimposer(ca1aligned,ca2aligned);
  Matrix matrix=svd.getRotation();
  Atom shift=svd.getTranslation();
  for (  Atom a : ca2aligned) {
    Calc.rotate(a,matrix);
    Calc.shift(a,shift);
  }
  return SVDSuperimposer.getTMScore(ca1aligned,ca2aligned,ca1.length,ca2.length);
}","public static double getTMScore(AFPChain align,Atom[] ca1,Atom[] ca2) throws StructureException {
  if (align.getNrEQR() == 0)   return -1;
  Atom[] ca1aligned=new Atom[align.getOptLength()];
  Atom[] ca2aligned=new Atom[align.getOptLength()];
  int pos=0;
  int[] blockLens=align.getOptLen();
  int[][][] optAln=align.getOptAln();
  assert(align.getBlockNum() <= optAln.length);
  for (int block=0; block < align.getBlockNum(); block++) {
    if (!(blockLens[block] <= optAln[block][0].length)) {
      System.err.println(""String_Node_Str"" + block + ""String_Node_Str""+ blockLens[block]+ ""String_Node_Str""+ optAln[block][0].length);
    }
    for (int i=0; i < blockLens[block]; i++) {
      Atom a1=ca1[optAln[block][0][i]];
      Atom a2=(Atom)ca2[optAln[block][1][i]].clone();
      ca1aligned[pos]=a1;
      ca2aligned[pos]=a2;
      pos++;
    }
  }
  if (pos != align.getOptLength()) {
    System.err.println(""String_Node_Str"" + pos + ""String_Node_Str""+ align.getOptLength());
    ca1aligned=(Atom[])resizeArray(ca1aligned,pos);
    ca2aligned=(Atom[])resizeArray(ca2aligned,pos);
  }
  SVDSuperimposer svd=new SVDSuperimposer(ca1aligned,ca2aligned);
  Matrix matrix=svd.getRotation();
  Atom shift=svd.getTranslation();
  for (  Atom a : ca2aligned) {
    Calc.rotate(a,matrix);
    Calc.shift(a,shift);
  }
  return SVDSuperimposer.getTMScore(ca1aligned,ca2aligned,ca1.length,ca2.length);
}",0.8071045022717885
17081,"/** 
 * This class is the actual worker doing all the dirty stuff related to sending the Blast request to the CGI_BIN interface. It should never be used as is but any method wanting to send a Blast request should manage to use it by feeding it the right parameters.
 * @param str : a <code>String</code> representation of a sequence from either of thethree wrapper methods
 * @param rpa :a <code>RemotePairwiseAlignmentProperties</code> object
 * @return rid : the ID of this request on the NCBI QBlast server
 * @throws Exception if unable to connect to the NCBI QBlast service
 */
private String sendActualAlignementRequest(String str,RemotePairwiseAlignmentProperties rpa) throws Exception {
  seq=""String_Node_Str"" + str;
  prog=""String_Node_Str"" + rpa.getAlignmentOption(""String_Node_Str"");
  db=""String_Node_Str"" + rpa.getAlignmentOption(""String_Node_Str"");
  if (prog == null || db == null || str == null || str.length() == 0) {
    throw new Exception(""String_Node_Str"");
  }
  String cmd=""String_Node_Str"" + seq + ""String_Node_Str""+ prog+ ""String_Node_Str""+ db+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ getTool()+ ""String_Node_Str""+ getEmail();
  if (rpa.getAlignmentOption(""String_Node_Str"") != ""String_Node_Str"") {
    cmd+=cmd + ""String_Node_Str"" + rpa.getAlignmentOption(""String_Node_Str"");
  }
  try {
    uConn=setQBlastServiceProperties(aUrl.openConnection());
    fromQBlast=new OutputStreamWriter(uConn.getOutputStream());
    fromQBlast.write(cmd);
    fromQBlast.flush();
    rd=new BufferedReader(new InputStreamReader(uConn.getInputStream()));
    String line=""String_Node_Str"";
    while ((line=rd.readLine()) != null) {
      if (line.contains(""String_Node_Str"")) {
        String[] arr=line.split(""String_Node_Str"");
        rid=arr[1].trim();
      }
 else       if (line.contains(""String_Node_Str"")) {
        String[] arr=line.split(""String_Node_Str"");
        step=Long.parseLong(arr[1].trim()) * 1000;
        start=System.currentTimeMillis() + step;
      }
      holder.put(rid,start);
    }
  }
 catch (  IOException e) {
    throw new Exception(""String_Node_Str"");
  }
  return rid;
}","/** 
 * This class is the actual worker doing all the dirty stuff related to sending the Blast request to the CGI_BIN interface. It should never be used as is but any method wanting to send a Blast request should manage to use it by feeding it the right parameters.
 * @param str : a <code>String</code> representation of a sequence from either of thethree wrapper methods
 * @param rpa :a <code>RemotePairwiseAlignmentProperties</code> object
 * @return rid : the ID of this request on the NCBI QBlast server
 * @throws Exception if unable to connect to the NCBI QBlast service
 */
private String sendActualAlignementRequest(String str,RemotePairwiseAlignmentProperties rpa) throws Exception {
  if (rpa.getAlignmentOption(""String_Node_Str"") == ""String_Node_Str"" || rpa.getAlignmentOption(""String_Node_Str"") == ""String_Node_Str"") {
    throw new Exception(""String_Node_Str"");
  }
 else {
    seq=""String_Node_Str"" + str;
    prog=""String_Node_Str"" + rpa.getAlignmentOption(""String_Node_Str"");
    db=""String_Node_Str"" + rpa.getAlignmentOption(""String_Node_Str"");
    cmd=""String_Node_Str"" + seq + ""String_Node_Str""+ prog+ ""String_Node_Str""+ db+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ getTool()+ ""String_Node_Str""+ getEmail();
  }
  if (rpa.getAlignmentOption(""String_Node_Str"") != ""String_Node_Str"") {
    cmd+=cmd + ""String_Node_Str"" + rpa.getAlignmentOption(""String_Node_Str"");
  }
  try {
    uConn=setQBlastServiceProperties(aUrl.openConnection());
    fromQBlast=new OutputStreamWriter(uConn.getOutputStream());
    fromQBlast.write(cmd);
    fromQBlast.flush();
    rd=new BufferedReader(new InputStreamReader(uConn.getInputStream()));
    String line=""String_Node_Str"";
    while ((line=rd.readLine()) != null) {
      if (line.contains(""String_Node_Str"")) {
        String[] arr=line.split(""String_Node_Str"");
        rid=arr[1].trim();
      }
 else       if (line.contains(""String_Node_Str"")) {
        String[] arr=line.split(""String_Node_Str"");
        step=Long.parseLong(arr[1].trim()) * 1000;
        start=System.currentTimeMillis() + step;
      }
      holder.put(rid,start);
    }
  }
 catch (  IOException e) {
    throw new Exception(""String_Node_Str"");
  }
  return rid;
}",0.9238555325511848
17082,"public void NCBIQBlastAlignmentProperties(){
  this.param.put(""String_Node_Str"",""String_Node_Str"");
  this.param.put(""String_Node_Str"",""String_Node_Str"");
  this.param.put(""String_Node_Str"",""String_Node_Str"");
}","public NCBIQBlastAlignmentProperties(){
  this.param.put(""String_Node_Str"",""String_Node_Str"");
  this.param.put(""String_Node_Str"",""String_Node_Str"");
  this.param.put(""String_Node_Str"",""String_Node_Str"");
}",0.988009592326139
17083,"/** 
 * This method set the program to be use with blastall. This method does a validation before running on the valid blastall programs: blastn / blastp / blastx / tblastn / tblastx
 * @param program : one of blastall programs
 * @exception Exception if the named program is not a valid blastall options
 */
public void setBlastProgram(String program) throws Exception {
  boolean isValid=false;
  String[] blastPr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  if (Arrays.binarySearch(blastPr,program) >= 0) {
    isValid=true;
  }
  if (!isValid) {
    throw new Exception(""String_Node_Str"");
  }
}","/** 
 * This method set the program to be use with blastall. This method does a validation before running on the valid blastall programs: blastn / blastp / blastx / tblastn / tblastx
 * @param program : one of blastall programs
 * @exception Exception if the named program is not a valid blastall options
 */
public void setBlastProgram(String program) throws Exception {
  boolean isValid=false;
  String[] blastPr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  if (Arrays.binarySearch(blastPr,program) >= 0) {
    this.param.put(""String_Node_Str"",program);
    isValid=true;
  }
  if (!isValid) {
    throw new Exception(""String_Node_Str"");
  }
}",0.9656683710737765
17084,"/** 
 * The constructor for a QBlast service request.
 * @throws Exception if the NCBI URL is unresponsive
 */
public void NCBIQBlastService() throws Exception {
  try {
    aUrl=new URL(baseurl);
    uConn=setQBlastServiceProperties(aUrl.openConnection());
  }
 catch (  MalformedURLException e) {
    throw new Exception(""String_Node_Str"");
  }
catch (  IOException e) {
    throw new Exception(""String_Node_Str"");
  }
}","/** 
 * The constructor for a QBlast service request.
 * @throws Exception if the NCBI URL is unresponsive
 */
public NCBIQBlastService() throws Exception {
  try {
    aUrl=new URL(baseurl);
    uConn=setQBlastServiceProperties(aUrl.openConnection());
  }
 catch (  MalformedURLException e) {
    throw new Exception(""String_Node_Str"");
  }
catch (  IOException e) {
    throw new Exception(""String_Node_Str"");
  }
}",0.9940405244338498
17085,"/** 
 * This method is a wrapper that executes the Blast request via the Put command of the CGI-BIN interface with the specified parameters and a GenBank GID. It gets the estimated time of completion by capturing the value of the RTOE variable and sets a loop that will check for completion of analysis at intervals specified by RTOE. <p> It also capture the value for the RID variable, necessary for fetching the actual results after completion. </p>
 * @param gid :an integer with a Genbank GID
 * @param rpa :a <code>RemotePairwiseAlignmentProperties</code> object
 * @return rid : a String with the request ID for this sequence
 * @throws Exception if it is not possible to sent the BLAST command
 */
public String sendAlignmentRequest(int gid,RemotePairwiseAlignmentProperties rpa) throws Exception {
  seq=Integer.toString(gid);
  return rid=sendActualAlignementRequest(seq,rpa);
}","/** 
 * This method is a wrapper that executes the Blast request via the Put command of the CGI-BIN interface with the specified parameters and a GenBank GID. It gets the estimated time of completion by capturing the value of the RTOE variable and sets a loop that will check for completion of analysis at intervals specified by RTOE. <p> It also capture the value for the RID variable, necessary for fetching the actual results after completion. </p>
 * @param gid :an integer with a Genbank GID
 * @param rpa :a <code>RemotePairwiseAlignmentProperties</code> object
 * @return rid : a String with the request ID for this sequence
 * @throws Exception if it is not possible to sent the BLAST command
 */
public String sendAlignmentRequest(int gid,RemotePairwiseAlignmentProperties rpa) throws Exception {
  tmp=Integer.toString(gid);
  return rid=sendActualAlignementRequest(tmp,rpa);
}",0.9932356257046224
17086,"/** 
 * This class is the actual worker doing all the dirty stuff related to sending the Blast request to the CGI_BIN interface. It should never be used as is but any method wanting to send a Blast request should manage to use it by feeding it the right parameters.
 * @param str : a <code>String</code> representation of a sequence from either of thethree wrapper methods
 * @param rpa :a <code>RemotePairwiseAlignmentProperties</code> object
 * @return rid : the ID of this request on the NCBI QBlast server
 * @throws Exception if unable to connect to the NCBI QBlast service
 */
private String sendActualAlignementRequest(String str,RemotePairwiseAlignmentProperties rpa) throws Exception {
  seq=""String_Node_Str"" + str;
  prog=""String_Node_Str"" + rpa.getAlignmentOption(""String_Node_Str"");
  db=""String_Node_Str"" + rpa.getAlignmentOption(""String_Node_Str"");
  if (prog == null || db == null || str == null || str.length() == 0) {
    throw new Exception(""String_Node_Str"");
  }
  String cmd=""String_Node_Str"" + seq + ""String_Node_Str""+ prog+ ""String_Node_Str""+ db+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ getTool()+ ""String_Node_Str""+ getEmail();
  if (rpa.getAlignmentOption(""String_Node_Str"") != null) {
    cmd+=cmd + ""String_Node_Str"" + rpa.getAlignmentOption(""String_Node_Str"");
  }
  try {
    uConn=setQBlastServiceProperties(aUrl.openConnection());
    fromQBlast=new OutputStreamWriter(uConn.getOutputStream());
    fromQBlast.write(cmd);
    fromQBlast.flush();
    rd=new BufferedReader(new InputStreamReader(uConn.getInputStream()));
    String line=""String_Node_Str"";
    while ((line=rd.readLine()) != null) {
      if (line.contains(""String_Node_Str"")) {
        String[] arr=line.split(""String_Node_Str"");
        rid=arr[1].trim();
      }
 else       if (line.contains(""String_Node_Str"")) {
        String[] arr=line.split(""String_Node_Str"");
        step=Long.parseLong(arr[1].trim()) * 1000;
        start=System.currentTimeMillis() + step;
      }
      holder.put(rid,start);
    }
  }
 catch (  IOException e) {
    throw new Exception(""String_Node_Str"");
  }
  return rid;
}","/** 
 * This class is the actual worker doing all the dirty stuff related to sending the Blast request to the CGI_BIN interface. It should never be used as is but any method wanting to send a Blast request should manage to use it by feeding it the right parameters.
 * @param str : a <code>String</code> representation of a sequence from either of thethree wrapper methods
 * @param rpa :a <code>RemotePairwiseAlignmentProperties</code> object
 * @return rid : the ID of this request on the NCBI QBlast server
 * @throws Exception if unable to connect to the NCBI QBlast service
 */
private String sendActualAlignementRequest(String str,RemotePairwiseAlignmentProperties rpa) throws Exception {
  seq=""String_Node_Str"" + str;
  prog=""String_Node_Str"" + rpa.getAlignmentOption(""String_Node_Str"");
  db=""String_Node_Str"" + rpa.getAlignmentOption(""String_Node_Str"");
  if (prog == null || db == null || str == null || str.length() == 0) {
    throw new Exception(""String_Node_Str"");
  }
  String cmd=""String_Node_Str"" + seq + ""String_Node_Str""+ prog+ ""String_Node_Str""+ db+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ getTool()+ ""String_Node_Str""+ getEmail();
  if (rpa.getAlignmentOption(""String_Node_Str"") != ""String_Node_Str"") {
    cmd+=cmd + ""String_Node_Str"" + rpa.getAlignmentOption(""String_Node_Str"");
  }
  try {
    uConn=setQBlastServiceProperties(aUrl.openConnection());
    fromQBlast=new OutputStreamWriter(uConn.getOutputStream());
    fromQBlast.write(cmd);
    fromQBlast.flush();
    rd=new BufferedReader(new InputStreamReader(uConn.getInputStream()));
    String line=""String_Node_Str"";
    while ((line=rd.readLine()) != null) {
      if (line.contains(""String_Node_Str"")) {
        String[] arr=line.split(""String_Node_Str"");
        rid=arr[1].trim();
      }
 else       if (line.contains(""String_Node_Str"")) {
        String[] arr=line.split(""String_Node_Str"");
        step=Long.parseLong(arr[1].trim()) * 1000;
        start=System.currentTimeMillis() + step;
      }
      holder.put(rid,start);
    }
  }
 catch (  IOException e) {
    throw new Exception(""String_Node_Str"");
  }
  return rid;
}",0.9950646298472384
17087,"/** 
 * Set the tool identifier for QBlast. Defaults to 'biojavax'.
 * @param tool the new identifier.
 */
public void setTool(String tool){
  this.tool=tool;
}","/** 
 * Set the tool identifier for QBlast. Defaults to 'biojava3'.
 * @param tool the new identifier.
 */
public void setTool(String tool){
  this.tool=tool;
}",0.99375
17088,"/** 
 * Get the tool identifier for QBlast. Defaults to 'biojavax'.
 * @return the identifier.
 */
public String getTool(){
  return this.tool;
}","/** 
 * Get the tool identifier for QBlast. Defaults to 'biojava3'.
 * @return the identifier.
 */
public String getTool(){
  return this.tool;
}",0.993103448275862
17089,"/** 
 * The constructor for a QBlast service request.
 * @throws Exception if the NCBI URL is unresponsive
 */
public NCBIQBlastService() throws Exception {
  try {
    aUrl=new URL(baseurl);
    uConn=setQBlastServiceProperties(aUrl.openConnection());
  }
 catch (  MalformedURLException e) {
    throw new Exception(""String_Node_Str"");
  }
catch (  IOException e) {
    throw new Exception(""String_Node_Str"");
  }
}","/** 
 * The constructor for a QBlast service request.
 * @throws Exception if the NCBI URL is unresponsive
 */
public NCBIQBlastService() throws Exception {
  try {
    aUrl=new URL(baseurl);
    uConn=setQBlastServiceProperties(aUrl.openConnection());
    holder=new HashMap<String,Long>();
  }
 catch (  MalformedURLException e) {
    throw new Exception(""String_Node_Str"");
  }
catch (  IOException e) {
    throw new Exception(""String_Node_Str"");
  }
}",0.9553264604810996
17090,"private boolean mapChains(List<Group> seqRes,List<Group> atomRes,SequencePair<ProteinSequence,AminoAcidCompound> pair) throws StructureException {
  List<Group> seqResGroups=seqRes;
  int aligLength=pair.getLength();
  boolean noMatchFound=true;
  Compound gapSymbol=AminoAcidCompoundSet.getAminoAcidCompoundSet().getCompoundForString(""String_Node_Str"");
  for (int i=1; i <= aligLength; i++) {
    Compound s=pair.getCompoundAt(1,i);
    Compound a=pair.getCompoundAt(2,i);
    int posSeq=pair.getIndexInQueryAt(i) - 1;
    int posAtom=pair.getIndexInTargetAt(i) - 1;
    if (s.equals(gapSymbol) || a.equals(gapSymbol)) {
      continue;
    }
    if (s.equals(a)) {
      Group s1=seqRes.get(posSeq);
      Group a1=atomRes.get(posAtom);
      String pdbNameS=s1.getPDBName();
      String pdbNameA=a1.getPDBName();
      if (pdbNameS == null || pdbNameA == null) {
        System.err.println(""String_Node_Str"" + posSeq + ""String_Node_Str""+ s1+ ""String_Node_Str""+ a1+ ""String_Node_Str""+ posAtom);
        throw new StructureException(""String_Node_Str"");
      }
      if (!pdbNameA.equals(pdbNameS)) {
        if (!pdbNameA.trim().equals(pdbNameS.trim())) {
          System.err.println(s1 + ""String_Node_Str"" + posSeq+ ""String_Node_Str""+ a1+ ""String_Node_Str""+ posAtom+ ""String_Node_Str""+ s+ ""String_Node_Str""+ a);
          if (s1.getType().equals(HetatomImpl.type) && a1.getType().equals(HetatomImpl.type)) {
            System.err.println(""String_Node_Str"");
          }
 else {
            System.err.println(""String_Node_Str"" + s1 + ""String_Node_Str""+ a1);
          }
        }
      }
      seqResGroups.set(posSeq,a1);
      noMatchFound=false;
    }
  }
  if (noMatchFound) {
    if (DEBUG)     System.out.println(""String_Node_Str"");
  }
  return noMatchFound;
}","private boolean mapChains(List<Group> seqResGroups,List<Group> atomRes,SequencePair<ProteinSequence,AminoAcidCompound> pair,Map<Integer,Integer> seqresIndexPosition,Map<Integer,Integer> atomIndexPosition) throws StructureException {
  int aligLength=pair.getLength();
  boolean noMatchFound=true;
  Compound gapSymbol=AminoAcidCompoundSet.getAminoAcidCompoundSet().getCompoundForString(""String_Node_Str"");
  mainLoop:   for (int i=1; i <= aligLength; i++) {
    Compound s=pair.getCompoundAt(1,i);
    Compound a=pair.getCompoundAt(2,i);
    int posSeq=pair.getIndexInQueryAt(i) - 1;
    int posAtom=pair.getIndexInTargetAt(i) - 1;
    if (s.equals(gapSymbol) || a.equals(gapSymbol)) {
      continue;
    }
    if (s.equals(a)) {
      Group s1=seqResGroups.get(seqresIndexPosition.get(posSeq));
      Group a1=atomRes.get(atomIndexPosition.get(posAtom));
      if (s1 == null || a1 == null) {
        System.err.println(""String_Node_Str"" + i + ""String_Node_Str""+ s+ ""String_Node_Str""+ posSeq+ ""String_Node_Str""+ s1+ ""String_Node_Str""+ posAtom+ ""String_Node_Str""+ a1);
        continue mainLoop;
      }
      String pdbNameS=s1.getPDBName();
      String pdbNameA=a1.getPDBName();
      if (pdbNameS == null || pdbNameA == null) {
        System.err.println(""String_Node_Str"" + posSeq + ""String_Node_Str""+ s1+ ""String_Node_Str""+ a1+ ""String_Node_Str""+ posAtom);
        throw new StructureException(""String_Node_Str"");
      }
      if (!pdbNameA.equals(pdbNameS)) {
        if (!pdbNameA.trim().equals(pdbNameS.trim())) {
          System.err.println(s1 + ""String_Node_Str"" + posSeq+ ""String_Node_Str""+ a1+ ""String_Node_Str""+ posAtom+ ""String_Node_Str""+ s+ ""String_Node_Str""+ a);
          if (s1.getType().equals(HetatomImpl.type) && a1.getType().equals(HetatomImpl.type)) {
            System.err.println(""String_Node_Str"");
          }
 else {
            System.err.println(""String_Node_Str"" + s1 + ""String_Node_Str""+ a1);
          }
        }
      }
      seqResGroups.set(seqresIndexPosition.get(posSeq),a1);
      noMatchFound=false;
    }
  }
  if (noMatchFound) {
    if (DEBUG)     System.out.println(""String_Node_Str"");
  }
  return noMatchFound;
}",0.8760792280345353
17091,"/** 
 * aligns two chains of groups, where the first parent is representing the list of amino acids as obtained from the SEQRES records, and the second parent represents the groups obtained from the ATOM records (and containing the actual ATOM information). This does the actual alignment and if a group can be mapped to a position in the SEQRES then the corresponding position is repplaced with the group that contains the atoms.
 * @param seqRes
 * @param atomRes
 * @return true if no match has bee found
 * @throws StructureException
 */
public boolean align(List<Group> seqRes,List<Group> atomRes) throws StructureException {
  String seq1=getFullAtomSequence(seqRes);
  String seq2=getFullAtomSequence(atomRes);
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + seq1);
    System.out.println(""String_Node_Str"" + seq2);
  }
  ProteinSequence s1=new ProteinSequence(seq1);
  ProteinSequence s2=new ProteinSequence(seq2);
  SubstitutionMatrix<AminoAcidCompound> matrix=SubstitutionMatrixHelper.getBlosum65();
  GapPenalty penalty=new SimpleGapPenalty();
  short gop=8;
  short extend=1;
  penalty.setOpenPenalty(gop);
  penalty.setExtensionPenalty(extend);
  PairwiseSequenceAligner<ProteinSequence,AminoAcidCompound> smithWaterman=Alignments.getPairwiseAligner(s1,s2,PairwiseSequenceAlignerType.LOCAL,penalty,matrix);
  SequencePair<ProteinSequence,AminoAcidCompound> pair=smithWaterman.getPair();
  if (pair == null)   throw new StructureException(""String_Node_Str"");
  if (DEBUG) {
    System.out.println(pair.toString(60));
  }
  boolean noMatchFound=mapChains(seqRes,atomRes,pair);
  return noMatchFound;
}","/** 
 * aligns two chains of groups, where the first parent is representing the list of amino acids as obtained from the SEQRES records, and the second parent represents the groups obtained from the ATOM records (and containing the actual ATOM information). This does the actual alignment and if a group can be mapped to a position in the SEQRES then the corresponding position is repplaced with the group that contains the atoms.
 * @param seqRes
 * @param atomRes
 * @return true if no match has bee found
 * @throws StructureException
 */
public boolean align(List<Group> seqRes,List<Group> atomRes) throws StructureException {
  Map<Integer,Integer> seqresIndexPosition=new HashMap<Integer,Integer>();
  Map<Integer,Integer> atomIndexPosition=new HashMap<Integer,Integer>();
  String seq1=getFullAtomSequence(seqRes,seqresIndexPosition);
  String seq2=getFullAtomSequence(atomRes,atomIndexPosition);
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + seq1.length() + ""String_Node_Str""+ seq1);
    System.out.println(""String_Node_Str"" + seq2.length() + ""String_Node_Str""+ seq2);
  }
  ProteinSequence s1=new ProteinSequence(seq1);
  ProteinSequence s2=new ProteinSequence(seq2);
  SubstitutionMatrix<AminoAcidCompound> matrix=SubstitutionMatrixHelper.getBlosum65();
  GapPenalty penalty=new SimpleGapPenalty();
  short gop=8;
  short extend=1;
  penalty.setOpenPenalty(gop);
  penalty.setExtensionPenalty(extend);
  PairwiseSequenceAligner<ProteinSequence,AminoAcidCompound> smithWaterman=Alignments.getPairwiseAligner(s1,s2,PairwiseSequenceAlignerType.LOCAL,penalty,matrix);
  SequencePair<ProteinSequence,AminoAcidCompound> pair=smithWaterman.getPair();
  if (pair == null)   throw new StructureException(""String_Node_Str"");
  if (DEBUG) {
    System.out.println(pair.toString(60));
  }
  boolean noMatchFound=mapChains(seqRes,atomRes,pair,seqresIndexPosition,atomIndexPosition);
  return noMatchFound;
}",0.9022046353872244
17092,"/** 
 * returns the full sequence of the Atom records of a parent with X instead of HETATMSs. The advantage of this is that it allows us to also align HETATM groups back to the SEQRES.
 * @param groups the list of groups in a parent
 * @return string representations
 */
public String getFullAtomSequence(List<Group> groups){
  StringBuffer sequence=new StringBuffer();
  for (int i=0; i < groups.size(); i++) {
    Group g=(Group)groups.get(i);
    if (g instanceof AminoAcid) {
      AminoAcid a=(AminoAcid)g;
      char oneLetter=a.getAminoType();
      if (oneLetter == '?')       oneLetter='X';
      sequence.append(oneLetter);
    }
 else {
      if (excludeTypes.contains(g.getPDBName()))       continue;
      if (g.size() == 1) {
        try {
          Atom a=g.getAtom(0);
          if (a.getElement().isMetal())           continue;
          continue;
        }
 catch (        StructureException e) {
          e.printStackTrace();
          continue;
        }
      }
      ChemComp cc=g.getChemComp();
      if (ResidueType.lPeptideLinking.equals(cc.getResidueType()) || PolymerType.PROTEIN_ONLY.contains(cc.getPolymerType()) || PolymerType.POLYNUCLEOTIDE_ONLY.contains(cc.getPolymerType())) {
        String c=cc.getOne_letter_code();
        if (c.equals(""String_Node_Str""))         c=""String_Node_Str"";
        sequence.append(c);
      }
 else {
        continue;
      }
    }
  }
  return sequence.toString();
}","/** 
 * returns the full sequence of the Atom records of a parent with X instead of HETATMSs. The advantage of this is that it allows us to also align HETATM groups back to the SEQRES.
 * @param groups the list of groups in a parent
 * @param positionIndex a Map to keep track of which group is at which sequence position
 * @return string representations
 */
public String getFullAtomSequence(List<Group> groups,Map<Integer,Integer> positionIndex){
  StringBuffer sequence=new StringBuffer();
  int seqIndex=0;
  for (int i=0; i < groups.size(); i++) {
    Group g=(Group)groups.get(i);
    if (g instanceof AminoAcid) {
      AminoAcid a=(AminoAcid)g;
      char oneLetter=a.getAminoType();
      if (oneLetter == '?')       oneLetter='X';
      positionIndex.put(seqIndex,i);
      sequence.append(oneLetter);
      seqIndex++;
    }
 else {
      if (excludeTypes.contains(g.getPDBName()))       continue;
      if (g.size() == 1) {
        try {
          Atom a=g.getAtom(0);
          if (a.getElement().isMetal())           continue;
          continue;
        }
 catch (        StructureException e) {
          e.printStackTrace();
          continue;
        }
      }
      ChemComp cc=g.getChemComp();
      if (ResidueType.lPeptideLinking.equals(cc.getResidueType()) || PolymerType.PROTEIN_ONLY.contains(cc.getPolymerType()) || PolymerType.POLYNUCLEOTIDE_ONLY.contains(cc.getPolymerType())) {
        String c=cc.getOne_letter_code();
        if (c.equals(""String_Node_Str""))         c=""String_Node_Str"";
        positionIndex.put(seqIndex,i);
        sequence.append(c);
        seqIndex++;
      }
 else {
        continue;
      }
    }
  }
  return sequence.toString();
}",0.908450704225352
17093,"private void colorByPDP(){
  System.out.println(""String_Node_Str"");
  if (structure == null)   return;
  try {
    Atom[] ca=StructureTools.getAtomCAArray(structure);
    List<Domain> domains=ProteinDomainParser.suggestDomains(ca);
    int i=-1;
    for (    Domain dom : domains) {
      i++;
      if (i > ColorUtils.colorWheel.length)       i=0;
      List<Segment> segments=dom.getSegments();
      Color c1=ColorUtils.colorWheel[i];
      float fraction=0f;
      for (      Segment s : segments) {
        fraction+=1.0 / (float)segments.size();
        int start=s.from;
        int end=s.to;
        Group startG=ca[start].getGroup();
        Group endG=ca[end].getGroup();
        System.out.println(""String_Node_Str"" + startG.getResidueNumber() + ""String_Node_Str""+ startG.getChainId()+ ""String_Node_Str""+ endG.getResidueNumber()+ ""String_Node_Str""+ endG.getChainId()+ ""String_Node_Str""+ s);
        String j1=startG.getResidueNumber() + ""String_Node_Str"";
        String j2=endG.getResidueNumber() + ""String_Node_Str"" + endG.getChainId();
        String script=""String_Node_Str"" + j1 + ""String_Node_Str""+ j2+ ""String_Node_Str"";
        script+=""String_Node_Str"" + c1.getRed() + ""String_Node_Str""+ c1.getGreen()+ ""String_Node_Str""+ c1.getBlue()+ ""String_Node_Str"";
        evalString(script);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void colorByPDP(){
  System.out.println(""String_Node_Str"");
  if (structure == null)   return;
  try {
    Atom[] ca=StructureTools.getAtomCAArray(structure);
    List<Domain> domains=ProteinDomainParser.suggestDomains(ca);
    int i=-1;
    for (    Domain dom : domains) {
      i++;
      if (i > ColorUtils.colorWheel.length)       i=0;
      List<Segment> segments=dom.getSegments();
      Color c1=ColorUtils.colorWheel[i];
      float fraction=0f;
      for (      Segment s : segments) {
        fraction+=1.0 / (float)segments.size();
        int start=s.from;
        int end=s.to;
        Group startG=ca[start].getGroup();
        Group endG=ca[end].getGroup();
        System.out.println(""String_Node_Str"" + startG.getResidueNumber() + ""String_Node_Str""+ startG.getChainId()+ ""String_Node_Str""+ endG.getResidueNumber()+ ""String_Node_Str""+ endG.getChainId()+ ""String_Node_Str""+ s);
        String j1=startG.getResidueNumber() + ""String_Node_Str"";
        String j2=endG.getResidueNumber() + ""String_Node_Str"" + endG.getChainId();
        String script=""String_Node_Str"" + j1 + ""String_Node_Str""+ j2+ ""String_Node_Str"";
        script+=""String_Node_Str"" + c1.getRed() + ""String_Node_Str""+ c1.getGreen()+ ""String_Node_Str""+ c1.getBlue()+ ""String_Node_Str"";
        script+=""String_Node_Str"" + c1.getRed() + ""String_Node_Str""+ c1.getGreen()+ ""String_Node_Str""+ c1.getBlue()+ ""String_Node_Str"";
        evalString(script);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9529085872576176
17094,"private void colorBySCOP(){
  if (structure == null)   return;
  String pdbId=structure.getPDBCode();
  if (pdbId == null)   return;
  String pdbLocation=System.getProperty(AbstractUserArgumentProcessor.PDB_DIR);
  ScopInstallation scop=new ScopInstallation(pdbLocation);
  List<ScopDomain> domains=scop.getDomainsForPDB(pdbId);
  int i=-1;
  for (  ScopDomain domain : domains) {
    i++;
    if (i > ColorUtils.colorWheel.length)     i=0;
    Color c1=ColorUtils.colorWheel[i];
    List<String> ranges=domain.getRanges();
    for (    String range : ranges) {
      String[] spl=range.split(""String_Node_Str"");
      String script=""String_Node_Str"" + spl[1] + ""String_Node_Str""+ spl[0]+ ""String_Node_Str"";
      script+=""String_Node_Str"" + c1.getRed() + ""String_Node_Str""+ c1.getGreen()+ ""String_Node_Str""+ c1.getBlue()+ ""String_Node_Str"";
      System.out.println(script);
      evalString(script);
    }
  }
}","private void colorBySCOP(){
  if (structure == null)   return;
  String pdbId=structure.getPDBCode();
  if (pdbId == null)   return;
  String pdbLocation=System.getProperty(AbstractUserArgumentProcessor.PDB_DIR);
  ScopInstallation scop=new ScopInstallation(pdbLocation);
  List<ScopDomain> domains=scop.getDomainsForPDB(pdbId);
  int i=-1;
  for (  ScopDomain domain : domains) {
    i++;
    if (i > ColorUtils.colorWheel.length)     i=0;
    Color c1=ColorUtils.colorWheel[i];
    List<String> ranges=domain.getRanges();
    for (    String range : ranges) {
      System.out.println(range);
      String[] spl=range.split(""String_Node_Str"");
      String script=""String_Node_Str"";
      if (spl.length > 1)       script+=spl[1] + ""String_Node_Str"" + spl[0]+ ""String_Node_Str"";
 else       script+=""String_Node_Str"" + spl[0] + ""String_Node_Str"";
      script+=""String_Node_Str"" + c1.getRed() + ""String_Node_Str""+ c1.getGreen()+ ""String_Node_Str""+ c1.getBlue()+ ""String_Node_Str"";
      script+=""String_Node_Str"" + c1.getRed() + ""String_Node_Str""+ c1.getGreen()+ ""String_Node_Str""+ c1.getBlue()+ ""String_Node_Str"";
      System.out.println(script);
      evalString(script);
    }
  }
}",0.866254164683484
17095,"private List<String> processSingleLine(String line){
  List<String> data=new ArrayList<String>();
  if (line.trim().length() == 1) {
    if (line.startsWith(STRING_LIMIT))     return data;
  }
  boolean inString=false;
  boolean inS1=false;
  boolean inS2=false;
  String word=""String_Node_Str"";
  for (int i=0; i < line.length(); i++) {
    Character c=line.charAt(i);
    Character nextC=null;
    if (i < line.length() - 1)     nextC=line.charAt(i + 1);
    if (c == ' ') {
      if (!inString) {
        if (!word.equals(""String_Node_Str""))         data.add(word);
        word=""String_Node_Str"";
      }
 else {
        word+=c;
      }
    }
 else     if (c == s1) {
      if (inString) {
        boolean wordEnd=false;
        if (!inS2) {
          if (nextC != null) {
            if (Character.isWhitespace(nextC)) {
              i++;
              wordEnd=true;
            }
          }
        }
        if (wordEnd) {
          if (!word.equals(""String_Node_Str""))           data.add(word);
          word=""String_Node_Str"";
          inString=false;
          inS1=false;
        }
 else {
          word+=c;
        }
      }
 else {
        inString=true;
        inS1=true;
      }
    }
 else     if (c == s2) {
      if (inString) {
        boolean wordEnd=false;
        if (!inS1) {
          if (nextC != null) {
            if (Character.isWhitespace(nextC)) {
              i++;
              wordEnd=true;
            }
          }
        }
        if (wordEnd) {
          if (!word.equals(""String_Node_Str""))           data.add(word);
          word=""String_Node_Str"";
          inString=false;
          inS2=false;
        }
 else {
          word+=c;
        }
      }
 else {
        inString=true;
        inS2=true;
      }
    }
 else {
      word+=c;
    }
  }
  if (!word.trim().equals(""String_Node_Str""))   data.add(word);
  return data;
}","private List<String> processSingleLine(String line){
  List<String> data=new ArrayList<String>();
  if (line.trim().length() == 1) {
    if (line.startsWith(STRING_LIMIT))     return data;
  }
  boolean inString=false;
  boolean inS1=false;
  boolean inS2=false;
  String word=""String_Node_Str"";
  for (int i=0; i < line.length(); i++) {
    Character c=line.charAt(i);
    Character nextC=null;
    if (i < line.length() - 1)     nextC=line.charAt(i + 1);
    if (c == ' ') {
      if (!inString) {
        if (!word.equals(""String_Node_Str""))         data.add(word.trim());
        word=""String_Node_Str"";
      }
 else {
        word+=c;
      }
    }
 else     if (c == s1) {
      if (inString) {
        boolean wordEnd=false;
        if (!inS2) {
          if (nextC != null) {
            if (Character.isWhitespace(nextC)) {
              i++;
              wordEnd=true;
            }
          }
        }
        if (wordEnd) {
          if (!word.equals(""String_Node_Str""))           data.add(word.trim());
          word=""String_Node_Str"";
          inString=false;
          inS1=false;
        }
 else {
          word+=c;
        }
      }
 else {
        inString=true;
        inS1=true;
      }
    }
 else     if (c == s2) {
      if (inString) {
        boolean wordEnd=false;
        if (!inS1) {
          if (nextC != null) {
            if (Character.isWhitespace(nextC)) {
              i++;
              wordEnd=true;
            }
          }
        }
        if (wordEnd) {
          if (!word.equals(""String_Node_Str""))           data.add(word.trim());
          word=""String_Node_Str"";
          inString=false;
          inS2=false;
        }
 else {
          word+=c;
        }
      }
 else {
        inString=true;
        inS2=true;
      }
    }
 else {
      word+=c;
    }
  }
  if (!word.trim().equals(""String_Node_Str""))   data.add(word);
  return data;
}",0.9944429743318338
17096,"static public void addGmodGFF3GeneFeatures(LinkedHashMap<String,ChromosomeSequence> chromosomeSequenceList,FeatureList listGenes) throws Exception {
  FeatureList mRNAFeatures=listGenes.selectByType(""String_Node_Str"");
  for (  FeatureI f : mRNAFeatures) {
    Feature mRNAFeature=(Feature)f;
    String geneid=mRNAFeature.getAttribute(""String_Node_Str"");
    String source=mRNAFeature.source();
    FeatureList gene=listGenes.selectByAttribute(""String_Node_Str"",geneid);
    FeatureI geneFeature=gene.get(0);
    ChromosomeSequence seq=chromosomeSequenceList.get(geneFeature.seqname());
    AccessionID geneAccessionID=new AccessionID(geneid);
    GeneSequence geneSequence=null;
    FeatureList cdsFeatures=gene.selectByType(""String_Node_Str"");
    FeatureI feature=cdsFeatures.get(0);
    Strand strand=Strand.POSITIVE;
    if (feature.location().isNegative()) {
      strand=strand.NEGATIVE;
    }
    cdsFeatures=cdsFeatures.sortByStart();
    String seqName=feature.seqname();
    FeatureI startCodon=null;
    FeatureI stopCodon=null;
    Integer startCodonBegin=null;
    Integer stopCodonEnd=null;
    String startCodonName=""String_Node_Str"";
    String stopCodonName=""String_Node_Str"";
    FeatureList startCodonList=gene.selectByAttribute(""String_Node_Str"",""String_Node_Str"");
    if (startCodonList != null && startCodonList.size() > 0) {
      startCodon=startCodonList.get(0);
      if (strand == Strand.NEGATIVE) {
        startCodonBegin=startCodon.location().bioEnd();
      }
 else {
        startCodonBegin=startCodon.location().bioStart();
      }
      startCodonName=startCodon.getAttribute(""String_Node_Str"");
    }
    FeatureList stopCodonList=gene.selectByAttribute(""String_Node_Str"",""String_Node_Str"");
    if (stopCodonList != null && stopCodonList.size() > 0) {
      stopCodon=stopCodonList.get(0);
      if (strand == Strand.NEGATIVE) {
        stopCodonEnd=stopCodon.location().bioStart();
      }
 else {
        stopCodonEnd=stopCodon.location().bioEnd();
      }
      stopCodonName=stopCodon.getAttribute(""String_Node_Str"");
    }
    if (startCodonBegin == null) {
      if (strand == Strand.NEGATIVE) {
        FeatureI firstFeature=cdsFeatures.get(0);
        startCodonBegin=firstFeature.location().bioEnd();
      }
 else {
        FeatureI firstFeature=cdsFeatures.get(0);
        startCodonBegin=firstFeature.location().bioStart();
      }
    }
    if (stopCodonEnd == null) {
      if (strand == Strand.NEGATIVE) {
        FeatureI lastFeature=cdsFeatures.get(cdsFeatures.size() - 1);
        stopCodonEnd=lastFeature.location().bioStart();
      }
 else {
        FeatureI lastFeature=cdsFeatures.get(cdsFeatures.size() - 1);
        stopCodonEnd=lastFeature.location().bioEnd();
      }
    }
    if (startCodonBegin > stopCodonEnd) {
      int temp=startCodonBegin;
      startCodonBegin=stopCodonEnd;
      stopCodonEnd=temp;
    }
    AccessionID transcriptAccessionID=new AccessionID(geneid);
    if (geneSequence == null) {
      geneSequence=seq.addGene(geneAccessionID,startCodonBegin,stopCodonEnd,strand);
      geneSequence.setSource(source);
    }
 else {
      if (startCodonBegin < geneSequence.getBioBegin()) {
        geneSequence.setBioBegin(startCodonBegin);
      }
      if (stopCodonEnd > geneSequence.getBioBegin()) {
        geneSequence.setBioEnd(stopCodonEnd);
      }
    }
    TranscriptSequence transcriptSequence=geneSequence.addTranscript(transcriptAccessionID,startCodonBegin,stopCodonEnd);
    if (startCodon != null) {
      if (startCodonName == null || startCodonName.length() == 0) {
        startCodonName=geneid + ""String_Node_Str"" + startCodon.location().bioStart()+ ""String_Node_Str""+ startCodon.location().bioEnd();
      }
      transcriptSequence.addStartCodonSequence(new AccessionID(startCodonName),startCodon.location().bioStart(),startCodon.location().bioEnd());
    }
    if (stopCodon != null) {
      if (stopCodonName == null || stopCodonName.length() == 0) {
        stopCodonName=geneid + ""String_Node_Str"" + stopCodon.location().bioStart()+ ""String_Node_Str""+ stopCodon.location().bioEnd();
      }
      transcriptSequence.addStopCodonSequence(new AccessionID(stopCodonName),stopCodon.location().bioStart(),stopCodon.location().bioEnd());
    }
    for (    FeatureI cdsFeature : cdsFeatures) {
      Feature cds=(Feature)cdsFeature;
      String cdsName=cds.getAttribute(""String_Node_Str"");
      if (cdsName == null || cdsName.length() == 0) {
        cdsName=geneid + ""String_Node_Str"" + cds.location().bioStart()+ ""String_Node_Str""+ cds.location().bioEnd();
      }
      AccessionID cdsAccessionID=new AccessionID(cdsName);
      ExonSequence exonSequence=geneSequence.addExon(cdsAccessionID,cdsFeature.location().bioStart(),cdsFeature.location().bioEnd());
      transcriptSequence.addCDS(cdsAccessionID,cdsFeature.location().bioStart(),cdsFeature.location().bioEnd(),cds.frame());
    }
  }
}","static public void addGmodGFF3GeneFeatures(LinkedHashMap<String,ChromosomeSequence> chromosomeSequenceList,FeatureList listGenes) throws Exception {
  FeatureList mRNAFeatures=listGenes.selectByType(""String_Node_Str"");
  for (  FeatureI f : mRNAFeatures) {
    Feature mRNAFeature=(Feature)f;
    String geneid=mRNAFeature.getAttribute(""String_Node_Str"");
    String source=mRNAFeature.source();
    FeatureList gene=listGenes.selectByAttribute(""String_Node_Str"",geneid);
    FeatureI geneFeature=gene.get(0);
    ChromosomeSequence seq=chromosomeSequenceList.get(geneFeature.seqname());
    AccessionID geneAccessionID=new AccessionID(geneid);
    GeneSequence geneSequence=null;
    FeatureList cdsFeatures=gene.selectByType(""String_Node_Str"");
    FeatureI feature=cdsFeatures.get(0);
    Strand strand=Strand.POSITIVE;
    if (feature.location().isNegative()) {
      strand=strand.NEGATIVE;
    }
    cdsFeatures=cdsFeatures.sortByStart();
    String seqName=feature.seqname();
    FeatureI startCodon=null;
    FeatureI stopCodon=null;
    Integer startCodonBegin=null;
    Integer stopCodonEnd=null;
    String startCodonName=""String_Node_Str"";
    String stopCodonName=""String_Node_Str"";
    FeatureList startCodonList=gene.selectByType(""String_Node_Str"");
    if (startCodonList != null && startCodonList.size() > 0) {
      startCodon=startCodonList.get(0);
      if (strand == Strand.NEGATIVE) {
        startCodonBegin=startCodon.location().bioEnd();
      }
 else {
        startCodonBegin=startCodon.location().bioStart();
      }
      startCodonName=startCodon.getAttribute(""String_Node_Str"");
    }
    FeatureList stopCodonList=gene.selectByType(""String_Node_Str"");
    if (stopCodonList != null && stopCodonList.size() > 0) {
      stopCodon=stopCodonList.get(0);
      if (strand == Strand.NEGATIVE) {
        stopCodonEnd=stopCodon.location().bioStart();
      }
 else {
        stopCodonEnd=stopCodon.location().bioEnd();
      }
      stopCodonName=stopCodon.getAttribute(""String_Node_Str"");
    }
    if (startCodonBegin == null) {
      if (strand == Strand.NEGATIVE) {
        FeatureI firstFeature=cdsFeatures.get(0);
        startCodonBegin=firstFeature.location().bioEnd();
      }
 else {
        FeatureI firstFeature=cdsFeatures.get(0);
        startCodonBegin=firstFeature.location().bioStart();
      }
    }
    if (stopCodonEnd == null) {
      if (strand == Strand.NEGATIVE) {
        FeatureI lastFeature=cdsFeatures.get(cdsFeatures.size() - 1);
        stopCodonEnd=lastFeature.location().bioStart();
      }
 else {
        FeatureI lastFeature=cdsFeatures.get(cdsFeatures.size() - 1);
        stopCodonEnd=lastFeature.location().bioEnd();
      }
    }
    if (startCodonBegin > stopCodonEnd) {
      int temp=startCodonBegin;
      startCodonBegin=stopCodonEnd;
      stopCodonEnd=temp;
    }
    AccessionID transcriptAccessionID=new AccessionID(geneid);
    if (geneSequence == null) {
      geneSequence=seq.addGene(geneAccessionID,startCodonBegin,stopCodonEnd,strand);
      geneSequence.setSource(source);
    }
 else {
      if (startCodonBegin < geneSequence.getBioBegin()) {
        geneSequence.setBioBegin(startCodonBegin);
      }
      if (stopCodonEnd > geneSequence.getBioBegin()) {
        geneSequence.setBioEnd(stopCodonEnd);
      }
    }
    TranscriptSequence transcriptSequence=geneSequence.addTranscript(transcriptAccessionID,startCodonBegin,stopCodonEnd);
    if (startCodon != null) {
      if (startCodonName == null || startCodonName.length() == 0) {
        startCodonName=geneid + ""String_Node_Str"" + startCodon.location().bioStart()+ ""String_Node_Str""+ startCodon.location().bioEnd();
      }
      transcriptSequence.addStartCodonSequence(new AccessionID(startCodonName),startCodon.location().bioStart(),startCodon.location().bioEnd());
    }
    if (stopCodon != null) {
      if (stopCodonName == null || stopCodonName.length() == 0) {
        stopCodonName=geneid + ""String_Node_Str"" + stopCodon.location().bioStart()+ ""String_Node_Str""+ stopCodon.location().bioEnd();
      }
      transcriptSequence.addStopCodonSequence(new AccessionID(stopCodonName),stopCodon.location().bioStart(),stopCodon.location().bioEnd());
    }
    for (    FeatureI cdsFeature : cdsFeatures) {
      Feature cds=(Feature)cdsFeature;
      String cdsName=cds.getAttribute(""String_Node_Str"");
      if (cdsName == null || cdsName.length() == 0) {
        cdsName=geneid + ""String_Node_Str"" + cds.location().bioStart()+ ""String_Node_Str""+ cds.location().bioEnd();
      }
      AccessionID cdsAccessionID=new AccessionID(cdsName);
      ExonSequence exonSequence=geneSequence.addExon(cdsAccessionID,cdsFeature.location().bioStart(),cdsFeature.location().bioEnd());
      transcriptSequence.addCDS(cdsAccessionID,cdsFeature.location().bioStart(),cdsFeature.location().bioEnd(),cds.frame());
    }
  }
}",0.9932321575061526
17097,"static public LinkedHashMap<String,ChromosomeSequence> loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile(File fastaSequenceFile,File uppercaseFastaFile,boolean throwExceptionGeneNotFound) throws Exception {
  LinkedHashMap<String,ChromosomeSequence> chromosomeSequenceList=new LinkedHashMap<String,ChromosomeSequence>();
  LinkedHashMap<String,DNASequence> dnaSequenceList=FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);
  for (  String accession : dnaSequenceList.keySet()) {
    DNASequence contigSequence=dnaSequenceList.get(accession);
    ChromosomeSequence chromsomeSequence=new ChromosomeSequence(contigSequence.getSequenceAsString());
    chromsomeSequence.setAccession(contigSequence.getAccession());
    chromosomeSequenceList.put(accession,chromsomeSequence);
  }
  LinkedHashMap<String,DNASequence> geneSequenceList=FastaReaderHelper.readFastaDNASequence(uppercaseFastaFile);
  for (  DNASequence dnaSequence : geneSequenceList.values()) {
    String geneSequence=dnaSequence.getSequenceAsString();
    String lcGeneSequence=geneSequence.toLowerCase();
    String reverseGeneSequence=dnaSequence.getReverse().getSequenceAsString();
    String lcReverseGeneSequence=reverseGeneSequence.toLowerCase();
    Integer bioStart=null;
    Integer bioEnd=null;
    Strand strand=Strand.POSITIVE;
    boolean geneFound=false;
    String accession=""String_Node_Str"";
    for (    String id : dnaSequenceList.keySet()) {
      accession=id;
      DNASequence contigDNASequence=dnaSequenceList.get(id);
      String contigSequence=contigDNASequence.getSequenceAsString().toLowerCase();
      bioStart=contigSequence.indexOf(lcGeneSequence);
      if (bioStart != -1) {
        bioStart=bioStart + 1;
        bioEnd=bioStart + geneSequence.length();
        geneFound=true;
        break;
      }
 else {
        bioStart=contigSequence.indexOf(lcReverseGeneSequence);
        if (bioStart != -1) {
          bioStart=bioStart + 1;
          bioEnd=bioStart - geneSequence.length();
          strand=Strand.NEGATIVE;
          geneFound=true;
          break;
        }
      }
    }
    if (geneFound) {
      System.out.println(""String_Node_Str"" + bioStart + ""String_Node_Str""+ bioEnd);
      ChromosomeSequence chromosomeSequence=chromosomeSequenceList.get(accession);
      GeneSequence geneSeq=chromosomeSequence.addGene(dnaSequence.getAccession(),bioStart,bioEnd,strand);
      geneSeq.setSource(uppercaseFastaFile.getName());
      String transcriptName=dnaSequence.getAccession().getID() + ""String_Node_Str"";
      TranscriptSequence transcriptSequence=geneSeq.addTranscript(new AccessionID(transcriptName),bioStart,bioEnd);
      ArrayList<Integer> exonBoundries=new ArrayList<Integer>();
      for (int i=0; i < geneSequence.length(); i++) {
        if (i == 0 && Character.isUpperCase(geneSequence.charAt(i))) {
          exonBoundries.add(i);
        }
 else         if (i == geneSequence.length() - 1) {
          exonBoundries.add(i);
        }
 else         if (Character.isUpperCase(geneSequence.charAt(i)) && Character.isLowerCase(geneSequence.charAt(i - 1))) {
          exonBoundries.add(i);
        }
 else         if (Character.isUpperCase(geneSequence.charAt(i)) && Character.isLowerCase(geneSequence.charAt(i + 1))) {
          exonBoundries.add(i);
        }
      }
      if (strand == Strand.NEGATIVE) {
        Collections.reverse(exonBoundries);
      }
      int runningFrameLength=0;
      for (int i=0; i < exonBoundries.size(); i=i + 2) {
        int cdsBioStart=exonBoundries.get(i) + bioStart;
        int cdsBioEnd=exonBoundries.get(i + 1) + bioStart;
        runningFrameLength=runningFrameLength + Math.abs(cdsBioEnd - cdsBioStart) + 1;
        String cdsName=transcriptName + ""String_Node_Str"" + cdsBioStart+ ""String_Node_Str""+ cdsBioEnd;
        AccessionID cdsAccessionID=new AccessionID(cdsName);
        ExonSequence exonSequence=geneSeq.addExon(cdsAccessionID,cdsBioStart,cdsBioEnd);
        int remainder=runningFrameLength % 3;
        int frame=0;
        if (remainder == 1) {
          frame=2;
        }
 else         if (remainder == 2) {
          frame=1;
        }
        CDSSequence cdsSequence=transcriptSequence.addCDS(cdsAccessionID,cdsBioStart,cdsBioEnd,frame);
      }
    }
 else {
      if (throwExceptionGeneNotFound) {
        throw new Exception(dnaSequence.getAccession().toString() + ""String_Node_Str"");
      }
    }
  }
  return chromosomeSequenceList;
}","static public LinkedHashMap<String,ChromosomeSequence> loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile(File fastaSequenceFile,File uppercaseFastaFile,boolean throwExceptionGeneNotFound) throws Exception {
  LinkedHashMap<String,ChromosomeSequence> chromosomeSequenceList=new LinkedHashMap<String,ChromosomeSequence>();
  LinkedHashMap<String,DNASequence> dnaSequenceList=FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);
  for (  String accession : dnaSequenceList.keySet()) {
    DNASequence contigSequence=dnaSequenceList.get(accession);
    ChromosomeSequence chromsomeSequence=new ChromosomeSequence(contigSequence.getSequenceAsString());
    chromsomeSequence.setAccession(contigSequence.getAccession());
    chromosomeSequenceList.put(accession,chromsomeSequence);
  }
  LinkedHashMap<String,DNASequence> geneSequenceList=FastaReaderHelper.readFastaDNASequence(uppercaseFastaFile);
  for (  DNASequence dnaSequence : geneSequenceList.values()) {
    String geneSequence=dnaSequence.getSequenceAsString();
    String lcGeneSequence=geneSequence.toLowerCase();
    String reverseGeneSequence=dnaSequence.getReverse().getSequenceAsString();
    String lcReverseGeneSequence=reverseGeneSequence.toLowerCase();
    Integer bioStart=null;
    Integer bioEnd=null;
    Strand strand=Strand.POSITIVE;
    boolean geneFound=false;
    String accession=""String_Node_Str"";
    for (    String id : dnaSequenceList.keySet()) {
      accession=id;
      DNASequence contigDNASequence=dnaSequenceList.get(id);
      String contigSequence=contigDNASequence.getSequenceAsString().toLowerCase();
      bioStart=contigSequence.indexOf(lcGeneSequence);
      if (bioStart != -1) {
        bioStart=bioStart + 1;
        bioEnd=bioStart + geneSequence.length() - 1;
        geneFound=true;
        break;
      }
 else {
        bioStart=contigSequence.indexOf(lcReverseGeneSequence);
        if (bioStart != -1) {
          bioStart=bioStart + 1;
          bioEnd=bioStart - geneSequence.length() - 1;
          strand=Strand.NEGATIVE;
          geneFound=true;
          break;
        }
      }
    }
    if (geneFound) {
      System.out.println(""String_Node_Str"" + bioStart + ""String_Node_Str""+ bioEnd);
      ChromosomeSequence chromosomeSequence=chromosomeSequenceList.get(accession);
      ArrayList<Integer> exonBoundries=new ArrayList<Integer>();
      for (int i=0; i < geneSequence.length(); i++) {
        if (i == 0 && Character.isUpperCase(geneSequence.charAt(i))) {
          exonBoundries.add(i);
        }
 else         if (i == geneSequence.length() - 1) {
          exonBoundries.add(i);
        }
 else         if (Character.isUpperCase(geneSequence.charAt(i)) && Character.isLowerCase(geneSequence.charAt(i - 1))) {
          exonBoundries.add(i);
        }
 else         if (Character.isUpperCase(geneSequence.charAt(i)) && Character.isLowerCase(geneSequence.charAt(i + 1))) {
          exonBoundries.add(i);
        }
      }
      if (strand == Strand.NEGATIVE) {
        Collections.reverse(exonBoundries);
      }
      GeneSequence geneSeq=chromosomeSequence.addGene(dnaSequence.getAccession(),bioStart,bioEnd,strand);
      geneSeq.setSource(uppercaseFastaFile.getName());
      String transcriptName=dnaSequence.getAccession().getID() + ""String_Node_Str"";
      TranscriptSequence transcriptSequence=geneSeq.addTranscript(new AccessionID(transcriptName),bioStart,bioEnd);
      int runningFrameLength=0;
      for (int i=0; i < exonBoundries.size() - 1; i=i + 2) {
        int cdsBioStart=exonBoundries.get(i) + bioStart;
        int cdsBioEnd=exonBoundries.get(i + 1) + bioStart;
        runningFrameLength=runningFrameLength + Math.abs(cdsBioEnd - cdsBioStart) + 1;
        String cdsName=transcriptName + ""String_Node_Str"" + cdsBioStart+ ""String_Node_Str""+ cdsBioEnd;
        AccessionID cdsAccessionID=new AccessionID(cdsName);
        ExonSequence exonSequence=geneSeq.addExon(cdsAccessionID,cdsBioStart,cdsBioEnd);
        int remainder=runningFrameLength % 3;
        int frame=0;
        if (remainder == 1) {
          frame=2;
        }
 else         if (remainder == 2) {
          frame=1;
        }
        CDSSequence cdsSequence=transcriptSequence.addCDS(cdsAccessionID,cdsBioStart,cdsBioEnd,frame);
      }
    }
 else {
      if (throwExceptionGeneNotFound) {
        throw new Exception(dnaSequence.getAccession().toString() + ""String_Node_Str"");
      }
    }
  }
  return chromosomeSequenceList;
}",0.9148456859653076
17098,"/** 
 * Record unidentifiable atom linkages in a chain. Only linkages between two residues or one residue and one ligand will be recorded.
 */
private void recordUnidentifiableAtomLinkages(List<ModifiedCompound> modComps,List<Group> residues,List<Group> ligands){
  Set<StructureAtomLinkage> identifiedLinkages=new HashSet<StructureAtomLinkage>();
  for (  ModifiedCompound mc : modComps) {
    identifiedLinkages.addAll(mc.getAtomLinkages());
  }
  int nRes=residues.size();
  for (int i=0; i < nRes - 1; i++) {
    Group group1=residues.get(i);
    for (int j=i + 1; j < nRes; j++) {
      Group group2=residues.get(j);
      List<Atom[]> linkages=StructureUtil.findNonNCAtomLinkages(group1,true,group2,true,bondLengthTolerance);
      for (      Atom[] atoms : linkages) {
        StructureAtomLinkage link=StructureUtil.getStructureAtomLinkage(atoms[0],ComponentType.LIGAND,atoms[1],ComponentType.LIGAND);
        if (!identifiedLinkages.contains(link)) {
          unidentifiableAtomLinkages.add(link);
        }
      }
    }
  }
  int nLig=ligands.size();
  for (int i=0; i < nRes; i++) {
    Group group1=residues.get(i);
    for (int j=0; j < nLig; j++) {
      Group group2=ligands.get(j);
      if (group1 == group2) {
        continue;
      }
      List<Atom[]> linkages=StructureUtil.findNonNCAtomLinkages(group1,true,group2,false,bondLengthTolerance);
      for (      Atom[] atoms : linkages) {
        StructureAtomLinkage link=StructureUtil.getStructureAtomLinkage(atoms[0],ComponentType.LIGAND,atoms[1],ComponentType.LIGAND);
        if (!identifiedLinkages.contains(link)) {
          unidentifiableAtomLinkages.add(link);
        }
      }
    }
  }
}","/** 
 * Record unidentifiable atom linkages in a chain. Only linkages between two residues or one residue and one ligand will be recorded.
 */
private void recordUnidentifiableAtomLinkages(List<ModifiedCompound> modComps,List<Group> residues,List<Group> ligands){
  Set<StructureAtomLinkage> identifiedLinkages=new HashSet<StructureAtomLinkage>();
  for (  ModifiedCompound mc : modComps) {
    identifiedLinkages.addAll(mc.getAtomLinkages());
  }
  int nRes=residues.size();
  for (int i=0; i < nRes - 1; i++) {
    Group group1=residues.get(i);
    for (int j=i + 1; j < nRes; j++) {
      Group group2=residues.get(j);
      List<Atom[]> linkages=StructureUtil.findNonNCAtomLinkages(group1,true,group2,true,bondLengthTolerance);
      for (      Atom[] atoms : linkages) {
        StructureAtomLinkage link=StructureUtil.getStructureAtomLinkage(atoms[0],ComponentType.AMINOACID,atoms[1],ComponentType.AMINOACID);
        if (!identifiedLinkages.contains(link)) {
          unidentifiableAtomLinkages.add(link);
        }
      }
    }
  }
  int nLig=ligands.size();
  for (int i=0; i < nRes; i++) {
    Group group1=residues.get(i);
    for (int j=0; j < nLig; j++) {
      Group group2=ligands.get(j);
      if (group1 == group2) {
        continue;
      }
      List<Atom[]> linkages=StructureUtil.findNonNCAtomLinkages(group1,true,group2,false,bondLengthTolerance);
      for (      Atom[] atoms : linkages) {
        StructureAtomLinkage link=StructureUtil.getStructureAtomLinkage(atoms[0],ComponentType.AMINOACID,atoms[1],ComponentType.LIGAND);
        if (!identifiedLinkages.contains(link)) {
          unidentifiableAtomLinkages.add(link);
        }
      }
    }
  }
}",0.9919475096928124
17099,"/** 
 * Configure a JavaBean based on a set of command line arguments.   For a command line construct such as ""-foo 42"", this method will use available <code>BeanInfo</code> (usually obtained by introspection) to find a property named ""foo"".  The argument will be interpreted according to the type of the ""foo"" property, then the appropriate mutator method (generally named setFoo) will be called to configure the property on the bean. <p> Currently supported property types are <code>int, double, boolean, String, File, Reader, Writer, InputStream, OutputStream</code>, plus arrays of all the above types.  In the case of arrays, the option may appear multiple times on the command line, otherwise recurrance of the same option is an error. </p> <p> For stream types, the parameter is interpreted as a filename unless it is equal to ""-"" in which case standard input or standard output are used as appropriate.  Each of the standard streams may only be used one. </p> <p> In the future, this method will probably be extended to handle multiple parameter occurances, and use Annotations to generate more useful help messages when something goes wrong. </p>
 * @param bean 
 * @param args
 * @return A string array which contains any 'anonymous' arguments (may be empty)
 * @throws ConfigurationException
 */
public static String[] configureBean(Object bean,String[] args) throws ConfigurationException {
  BeanInfo bi;
  try {
    bi=Introspector.getBeanInfo(bean.getClass());
  }
 catch (  Exception ex) {
    throw new ConfigurationException(""String_Node_Str"" + ex.getMessage());
  }
  Map<String,PropertyDescriptor> propertiesByName=new HashMap<String,PropertyDescriptor>();
  for (Iterator<PropertyDescriptor> pi=Arrays.asList(bi.getPropertyDescriptors()).iterator(); pi.hasNext(); ) {
    PropertyDescriptor pd=pi.next();
    propertiesByName.put(pd.getName(),pd);
  }
  List<String> anonArgs=new ArrayList<String>();
  Map<PropertyDescriptor,List<String>> arrayProps=new HashMap<PropertyDescriptor,List<String>>();
  Set<PropertyDescriptor> usedProps=new HashSet<PropertyDescriptor>();
  boolean stdInUsed=false;
  boolean stdOutUsed=false;
  for (int i=0; i < args.length; ++i) {
    String arg=args[i];
    if (arg == null)     continue;
    if ((arg.length() > 0) && arg.charAt(0) == '-') {
      PropertyDescriptor pd=(PropertyDescriptor)propertiesByName.get(arg.substring(1));
      boolean arrayMode=false;
      Object propVal=null;
      Class propType=null;
      if (pd == null) {
        if (arg.startsWith(""String_Node_Str"")) {
          String altPropName=Introspector.decapitalize(arg.substring(3));
          pd=(PropertyDescriptor)propertiesByName.get(altPropName);
          if (pd == null) {
            throw new ConfigurationException(""String_Node_Str"" + arg.substring(1) + ""String_Node_Str""+ altPropName);
          }
          propType=pd.getPropertyType();
          if (propType == Boolean.TYPE) {
            propVal=Boolean.FALSE;
          }
 else {
            throw new ConfigurationException(""String_Node_Str"" + arg + ""String_Node_Str"");
          }
        }
 else {
          throw new ConfigurationException(""String_Node_Str"" + arg.substring(1));
        }
      }
 else {
        propType=pd.getPropertyType();
        if (propType.isArray()) {
          arrayMode=true;
          propType=propType.getComponentType();
        }
        if (propType == Integer.TYPE) {
          try {
            propVal=new Integer(args[++i]);
          }
 catch (          Exception ex) {
            throw new ConfigurationException(""String_Node_Str"" + arg + ""String_Node_Str"");
          }
        }
 else         if (propType == Double.TYPE) {
          try {
            propVal=new Double(args[++i]);
          }
 catch (          Exception ex) {
            throw new ConfigurationException(""String_Node_Str"" + arg + ""String_Node_Str"");
          }
        }
 else         if (propType == String.class) {
          propVal=args[++i];
        }
 else         if (propType == Boolean.TYPE) {
          String val=args[++i];
          if (val == null)           propVal=Boolean.TRUE;
 else {
            if (val.equalsIgnoreCase(""String_Node_Str""))             propVal=Boolean.TRUE;
 else             propVal=Boolean.FALSE;
          }
        }
 else         if (File.class.isAssignableFrom(propType)) {
          propVal=new File(args[++i]);
        }
 else         if (Reader.class.isAssignableFrom(propType)) {
          String name=args[++i];
          if (""String_Node_Str"".equals(name)) {
            if (stdInUsed) {
              throw new ConfigurationException(""String_Node_Str"");
            }
            propVal=new InputStreamReader(System.in);
            stdInUsed=true;
          }
 else {
            try {
              propVal=new FileReader(new File(name));
            }
 catch (            Exception ex) {
              throw new ConfigurationException(""String_Node_Str"" + name + ""String_Node_Str"");
            }
          }
        }
 else         if (InputStream.class.isAssignableFrom(propType)) {
          String name=args[++i];
          if (""String_Node_Str"".equals(name)) {
            if (stdInUsed) {
              throw new ConfigurationException(""String_Node_Str"");
            }
            propVal=System.in;
            stdInUsed=true;
          }
 else {
            try {
              propVal=new FileInputStream(new File(name));
            }
 catch (            Exception ex) {
              throw new ConfigurationException(""String_Node_Str"" + name + ""String_Node_Str"");
            }
          }
        }
 else         if (Writer.class.isAssignableFrom(propType)) {
          String name=args[++i];
          if (""String_Node_Str"".equals(name)) {
            if (stdOutUsed) {
              throw new ConfigurationException(""String_Node_Str"");
            }
            propVal=new OutputStreamWriter(System.out);
            stdOutUsed=true;
          }
 else {
            try {
              propVal=new FileWriter(new File(name));
            }
 catch (            Exception ex) {
              throw new ConfigurationException(""String_Node_Str"" + name + ""String_Node_Str"");
            }
          }
        }
 else         if (OutputStream.class.isAssignableFrom(propType)) {
          String name=args[++i];
          if (""String_Node_Str"".equals(name)) {
            if (stdOutUsed) {
              throw new ConfigurationException(""String_Node_Str"");
            }
            propVal=System.out;
            stdOutUsed=true;
          }
 else {
            try {
              propVal=new FileOutputStream(new File(name));
            }
 catch (            Exception ex) {
              throw new ConfigurationException(""String_Node_Str"" + name + ""String_Node_Str"");
            }
          }
        }
 else {
          System.err.println(""String_Node_Str"" + arg + ""String_Node_Str""+ propType);
          System.exit(1);
        }
      }
      if (arrayMode) {
        List valList=(List)arrayProps.get(pd);
        if (valList == null) {
          valList=new ArrayList();
          arrayProps.put(pd,valList);
        }
        valList.add(propVal);
      }
 else {
        if (usedProps.contains(pd)) {
          throw new ConfigurationException(""String_Node_Str"" + pd.getName());
        }
        try {
          pd.getWriteMethod().invoke(bean,new Object[]{propVal});
        }
 catch (        InvocationTargetException ex) {
          throw new ConfigurationException(""String_Node_Str"" + pd.getName() + ""String_Node_Str"");
        }
catch (        Exception ex) {
          throw new ConfigurationException(""String_Node_Str"" + pd.getName() + ""String_Node_Str"");
        }
        usedProps.add(pd);
      }
    }
 else {
      anonArgs.add(arg);
    }
  }
  for (Iterator api=arrayProps.entrySet().iterator(); api.hasNext(); ) {
    Map.Entry me=(Map.Entry)api.next();
    PropertyDescriptor pd=(PropertyDescriptor)me.getKey();
    List vals=(List)me.getValue();
    Class compType=pd.getPropertyType().getComponentType();
    Object valArray;
    if (compType.isPrimitive()) {
      if (compType == Integer.TYPE) {
        valArray=CollectionTools.toIntArray(vals);
      }
 else       if (compType == Double.TYPE) {
        valArray=CollectionTools.toDoubleArray(vals);
      }
 else {
        throw new ConfigurationException(""String_Node_Str"" + compType.getName() + ""String_Node_Str"");
      }
    }
 else {
      valArray=vals.toArray((Object[])Array.newInstance(compType,vals.size()));
    }
    try {
      pd.getWriteMethod().invoke(bean,new Object[]{valArray});
    }
 catch (    InvocationTargetException ex) {
      throw new ConfigurationException(""String_Node_Str"" + pd.getName() + ""String_Node_Str"");
    }
catch (    Exception ex) {
      throw new ConfigurationException(""String_Node_Str"" + pd.getName() + ""String_Node_Str"");
    }
  }
  return (String[])anonArgs.toArray(new String[anonArgs.size()]);
}","/** 
 * Configure a JavaBean based on a set of command line arguments.   For a command line construct such as ""-foo 42"", this method will use available <code>BeanInfo</code> (usually obtained by introspection) to find a property named ""foo"".  The argument will be interpreted according to the type of the ""foo"" property, then the appropriate mutator method (generally named setFoo) will be called to configure the property on the bean. <p> Currently supported property types are <code>int, double, boolean, String, File, Reader, Writer, InputStream, OutputStream</code>, plus arrays of all the above types.  In the case of arrays, the option may appear multiple times on the command line, otherwise recurrance of the same option is an error. </p> <p> For stream types, the parameter is interpreted as a filename unless it is equal to ""-"" in which case standard input or standard output are used as appropriate.  Each of the standard streams may only be used one. </p> <p> In the future, this method will probably be extended to handle multiple parameter occurances, and use Annotations to generate more useful help messages when something goes wrong. </p>
 * @param bean 
 * @param args
 * @return A string array which contains any 'anonymous' arguments (may be empty)
 * @throws ConfigurationException
 */
public static String[] configureBean(Object bean,String[] args) throws ConfigurationException {
  BeanInfo bi;
  try {
    bi=Introspector.getBeanInfo(bean.getClass());
  }
 catch (  Exception ex) {
    throw new ConfigurationException(""String_Node_Str"" + ex.getMessage());
  }
  Map<String,PropertyDescriptor> propertiesByName=new HashMap<String,PropertyDescriptor>();
  for (Iterator<PropertyDescriptor> pi=Arrays.asList(bi.getPropertyDescriptors()).iterator(); pi.hasNext(); ) {
    PropertyDescriptor pd=pi.next();
    propertiesByName.put(pd.getName(),pd);
  }
  List<String> anonArgs=new ArrayList<String>();
  Map<PropertyDescriptor,List<String>> arrayProps=new HashMap<PropertyDescriptor,List<String>>();
  Set<PropertyDescriptor> usedProps=new HashSet<PropertyDescriptor>();
  boolean stdInUsed=false;
  boolean stdOutUsed=false;
  for (int i=0; i < args.length; ++i) {
    String arg=args[i];
    if (arg == null)     continue;
    if ((arg.length() > 0) && arg.charAt(0) == '-') {
      PropertyDescriptor pd=(PropertyDescriptor)propertiesByName.get(arg.substring(1));
      boolean arrayMode=false;
      Object propVal=null;
      Class propType=null;
      if (pd == null) {
        if (arg.startsWith(""String_Node_Str"")) {
          String altPropName=Introspector.decapitalize(arg.substring(3));
          pd=(PropertyDescriptor)propertiesByName.get(altPropName);
          if (pd == null) {
            throw new ConfigurationException(""String_Node_Str"" + arg.substring(1) + ""String_Node_Str""+ altPropName);
          }
          propType=pd.getPropertyType();
          if (propType == Boolean.TYPE) {
            propVal=Boolean.FALSE;
          }
 else {
            throw new ConfigurationException(""String_Node_Str"" + arg + ""String_Node_Str"");
          }
        }
 else {
          throw new ConfigurationException(""String_Node_Str"" + arg.substring(1));
        }
      }
 else {
        propType=pd.getPropertyType();
        if (propType.isArray()) {
          arrayMode=true;
          propType=propType.getComponentType();
        }
        if (propType == Integer.TYPE) {
          try {
            propVal=new Integer(args[++i]);
          }
 catch (          Exception ex) {
            throw new ConfigurationException(""String_Node_Str"" + arg + ""String_Node_Str"");
          }
        }
 else         if (propType == Double.TYPE || propType == Double.class) {
          try {
            propVal=new Double(args[++i]);
          }
 catch (          Exception ex) {
            throw new ConfigurationException(""String_Node_Str"" + arg + ""String_Node_Str"");
          }
        }
 else         if (propType == String.class) {
          propVal=args[++i];
        }
 else         if (propType == Boolean.TYPE) {
          String val=args[++i];
          if (val == null)           propVal=Boolean.TRUE;
 else {
            if (val.equalsIgnoreCase(""String_Node_Str""))             propVal=Boolean.TRUE;
 else             propVal=Boolean.FALSE;
          }
        }
 else         if (File.class.isAssignableFrom(propType)) {
          propVal=new File(args[++i]);
        }
 else         if (Reader.class.isAssignableFrom(propType)) {
          String name=args[++i];
          if (""String_Node_Str"".equals(name)) {
            if (stdInUsed) {
              throw new ConfigurationException(""String_Node_Str"");
            }
            propVal=new InputStreamReader(System.in);
            stdInUsed=true;
          }
 else {
            try {
              propVal=new FileReader(new File(name));
            }
 catch (            Exception ex) {
              throw new ConfigurationException(""String_Node_Str"" + name + ""String_Node_Str"");
            }
          }
        }
 else         if (InputStream.class.isAssignableFrom(propType)) {
          String name=args[++i];
          if (""String_Node_Str"".equals(name)) {
            if (stdInUsed) {
              throw new ConfigurationException(""String_Node_Str"");
            }
            propVal=System.in;
            stdInUsed=true;
          }
 else {
            try {
              propVal=new FileInputStream(new File(name));
            }
 catch (            Exception ex) {
              throw new ConfigurationException(""String_Node_Str"" + name + ""String_Node_Str"");
            }
          }
        }
 else         if (Writer.class.isAssignableFrom(propType)) {
          String name=args[++i];
          if (""String_Node_Str"".equals(name)) {
            if (stdOutUsed) {
              throw new ConfigurationException(""String_Node_Str"");
            }
            propVal=new OutputStreamWriter(System.out);
            stdOutUsed=true;
          }
 else {
            try {
              propVal=new FileWriter(new File(name));
            }
 catch (            Exception ex) {
              throw new ConfigurationException(""String_Node_Str"" + name + ""String_Node_Str"");
            }
          }
        }
 else         if (OutputStream.class.isAssignableFrom(propType)) {
          String name=args[++i];
          if (""String_Node_Str"".equals(name)) {
            if (stdOutUsed) {
              throw new ConfigurationException(""String_Node_Str"");
            }
            propVal=System.out;
            stdOutUsed=true;
          }
 else {
            try {
              propVal=new FileOutputStream(new File(name));
            }
 catch (            Exception ex) {
              throw new ConfigurationException(""String_Node_Str"" + name + ""String_Node_Str"");
            }
          }
        }
 else {
          System.err.println(""String_Node_Str"" + arg + ""String_Node_Str""+ propType);
          System.exit(1);
        }
      }
      if (arrayMode) {
        List valList=(List)arrayProps.get(pd);
        if (valList == null) {
          valList=new ArrayList();
          arrayProps.put(pd,valList);
        }
        valList.add(propVal);
      }
 else {
        if (usedProps.contains(pd)) {
          throw new ConfigurationException(""String_Node_Str"" + pd.getName());
        }
        try {
          pd.getWriteMethod().invoke(bean,new Object[]{propVal});
        }
 catch (        InvocationTargetException ex) {
          throw new ConfigurationException(""String_Node_Str"" + pd.getName() + ""String_Node_Str"");
        }
catch (        Exception ex) {
          throw new ConfigurationException(""String_Node_Str"" + pd.getName() + ""String_Node_Str"");
        }
        usedProps.add(pd);
      }
    }
 else {
      anonArgs.add(arg);
    }
  }
  for (Iterator api=arrayProps.entrySet().iterator(); api.hasNext(); ) {
    Map.Entry me=(Map.Entry)api.next();
    PropertyDescriptor pd=(PropertyDescriptor)me.getKey();
    List vals=(List)me.getValue();
    Class compType=pd.getPropertyType().getComponentType();
    Object valArray;
    if (compType.isPrimitive()) {
      if (compType == Integer.TYPE) {
        valArray=CollectionTools.toIntArray(vals);
      }
 else       if (compType == Double.TYPE) {
        valArray=CollectionTools.toDoubleArray(vals);
      }
 else {
        throw new ConfigurationException(""String_Node_Str"" + compType.getName() + ""String_Node_Str"");
      }
    }
 else {
      valArray=vals.toArray((Object[])Array.newInstance(compType,vals.size()));
    }
    try {
      pd.getWriteMethod().invoke(bean,new Object[]{valArray});
    }
 catch (    InvocationTargetException ex) {
      throw new ConfigurationException(""String_Node_Str"" + pd.getName() + ""String_Node_Str"");
    }
catch (    Exception ex) {
      throw new ConfigurationException(""String_Node_Str"" + pd.getName() + ""String_Node_Str"");
    }
  }
  return (String[])anonArgs.toArray(new String[anonArgs.size()]);
}",0.9984318996415772
17100,"private void runPairwise(){
  String name1=params.getPdb1();
  String file1=params.getFile1();
  if (name1 == null && file1 == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (file1 == null) {
    if (name1.length() < 4) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  String name2=params.getPdb2();
  String file2=params.getFile2();
  if (name2 == null && file2 == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (file2 == null) {
    if (name2.length() < 4) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  Structure structure1=null;
  Structure structure2=null;
  String path=params.getPdbFilePath();
  if (file1 == null || file2 == null) {
    if (path == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    AtomCache cache=new AtomCache(path,params.isPdbDirSplit());
    cache.setAutoFetch(params.isAutoFetch());
    structure1=getStructure(cache,name1,file1);
    structure2=getStructure(cache,name2,file2);
  }
 else {
    structure1=getStructure(null,name1,file1);
    structure2=getStructure(null,name2,file2);
  }
  if (structure1 == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  if (structure2 == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  try {
    Atom[] ca1;
    Atom[] ca2;
    List<Group> hetatms1=new ArrayList<Group>();
    List<Group> nucs1=new ArrayList<Group>();
    List<Group> hetatms2=new ArrayList<Group>();
    List<Group> nucs2=new ArrayList<Group>();
    ca1=StructureTools.getAtomCAArray(structure1);
    ca2=StructureTools.getAtomCAArray(structure2);
    if (params.isShow3d()) {
      hetatms1=structure1.getChain(0).getAtomGroups(""String_Node_Str"");
      nucs1=structure1.getChain(0).getAtomGroups(""String_Node_Str"");
    }
    StructureAlignment algorithm=getAlgorithm();
    Object jparams=getParameters();
    AFPChain afpChain;
    afpChain=algorithm.align(ca1,ca2,jparams);
    afpChain.setName1(name1);
    afpChain.setName2(name2);
    if (params.isShow3d()) {
      if ((afpChain.getBlockNum() - 1) == 0) {
        hetatms2=structure2.getChain(0).getAtomGroups(""String_Node_Str"");
        nucs2=structure2.getChain(0).getAtomGroups(""String_Node_Str"");
      }
      if (!GuiWrapper.isGuiModuleInstalled()) {
        System.err.println(""String_Node_Str"");
      }
 else {
        try {
          Object jmol=GuiWrapper.display(afpChain,ca1,ca2,hetatms1,nucs1,hetatms2,nucs2);
          GuiWrapper.showAlignmentImage(afpChain,ca1,ca2,jmol);
        }
 catch (        Exception e) {
          System.err.println(e.getMessage());
          e.printStackTrace();
        }
      }
    }
    if (params.getOutFile() != null) {
      String output=null;
      if (params.isOutputPDB()) {
        if (!GuiWrapper.isGuiModuleInstalled()) {
          System.err.println(""String_Node_Str"");
          output=AFPChainXMLConverter.toXML(afpChain,ca1,ca2);
        }
 else {
          Structure tmp=AFPAlignmentDisplay.createArtificalStructure(afpChain,ca1,ca2);
          output=""String_Node_Str"" + afpChain.getAlgorithmName() + ""String_Node_Str""+ afpChain.getVersion()+ ""String_Node_Str"";
          output+=afpChain.getName1() + ""String_Node_Str"" + afpChain.getName2();
          output+=newline;
          output+=tmp.toPDB();
        }
      }
 else {
        output=AFPChainXMLConverter.toXML(afpChain,ca1,ca2);
      }
      FileOutputStream out;
      PrintStream p;
      try {
        out=new FileOutputStream(params.getOutFile());
        p=new PrintStream(out);
        p.println(output);
        p.close();
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + params.getOutFile());
      }
    }
    if (params.isPrintXML()) {
      String fatcatXML=AFPChainXMLConverter.toXML(afpChain,ca1,ca2);
      System.out.println(fatcatXML);
    }
    if (params.isPrintFatCat()) {
      System.out.println(afpChain.toFatcat(ca1,ca2));
    }
    if (params.isPrintCE()) {
      System.out.println(afpChain.toCE(ca1,ca2));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
}","private void runPairwise(){
  String name1=params.getPdb1();
  String file1=params.getFile1();
  if (name1 == null && file1 == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (file1 == null) {
    if (name1.length() < 4) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  String name2=params.getPdb2();
  String file2=params.getFile2();
  if (name2 == null && file2 == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (file2 == null) {
    if (name2.length() < 4) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  Structure structure1=null;
  Structure structure2=null;
  String path=params.getPdbFilePath();
  if (file1 == null || file2 == null) {
    if (path == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    AtomCache cache=new AtomCache(path,params.isPdbDirSplit());
    cache.setAutoFetch(params.isAutoFetch());
    structure1=getStructure(cache,name1,file1);
    structure2=getStructure(cache,name2,file2);
  }
 else {
    structure1=getStructure(null,name1,file1);
    structure2=getStructure(null,name2,file2);
  }
  if (structure1 == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  if (structure2 == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  try {
    Atom[] ca1;
    Atom[] ca2;
    List<Group> hetatms1=new ArrayList<Group>();
    List<Group> nucs1=new ArrayList<Group>();
    List<Group> hetatms2=new ArrayList<Group>();
    List<Group> nucs2=new ArrayList<Group>();
    ca1=StructureTools.getAtomCAArray(structure1);
    ca2=StructureTools.getAtomCAArray(structure2);
    if (params.isShow3d()) {
      hetatms1=structure1.getChain(0).getAtomGroups(""String_Node_Str"");
      nucs1=structure1.getChain(0).getAtomGroups(""String_Node_Str"");
    }
    StructureAlignment algorithm=getAlgorithm();
    Object jparams=getParameters();
    AFPChain afpChain;
    afpChain=algorithm.align(ca1,ca2,jparams);
    afpChain.setName1(name1);
    afpChain.setName2(name2);
    if (params.isShow3d()) {
      if (!GuiWrapper.isGuiModuleInstalled()) {
        System.err.println(""String_Node_Str"");
      }
 else {
        try {
          Object jmol=GuiWrapper.display(afpChain,ca1,ca2);
          GuiWrapper.showAlignmentImage(afpChain,ca1,ca2,jmol);
        }
 catch (        Exception e) {
          System.err.println(e.getMessage());
          e.printStackTrace();
        }
      }
    }
    if (params.getOutFile() != null) {
      String output=null;
      if (params.isOutputPDB()) {
        if (!GuiWrapper.isGuiModuleInstalled()) {
          System.err.println(""String_Node_Str"");
          output=AFPChainXMLConverter.toXML(afpChain,ca1,ca2);
        }
 else {
          Structure tmp=AFPAlignmentDisplay.createArtificalStructure(afpChain,ca1,ca2);
          output=""String_Node_Str"" + afpChain.getAlgorithmName() + ""String_Node_Str""+ afpChain.getVersion()+ ""String_Node_Str"";
          output+=afpChain.getName1() + ""String_Node_Str"" + afpChain.getName2();
          output+=newline;
          output+=tmp.toPDB();
        }
      }
 else {
        output=AFPChainXMLConverter.toXML(afpChain,ca1,ca2);
      }
      FileOutputStream out;
      PrintStream p;
      try {
        out=new FileOutputStream(params.getOutFile());
        p=new PrintStream(out);
        p.println(output);
        p.close();
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + params.getOutFile());
      }
    }
    if (params.isPrintXML()) {
      String fatcatXML=AFPChainXMLConverter.toXML(afpChain,ca1,ca2);
      System.out.println(fatcatXML);
    }
    if (params.isPrintFatCat()) {
      System.out.println(afpChain.toFatcat(ca1,ca2));
    }
    if (params.isPrintCE()) {
      System.out.println(afpChain.toCE(ca1,ca2));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
}",0.971170719478566
17101,"@SuppressWarnings(""String_Node_Str"") public static Object display(AFPChain afpChain,Atom[] ca1,Atom[] ca2,List<Group> hetatms1,List<Group> nucs1,List<Group> hetatms2,List<Group> nucs2) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
  Class c=Class.forName(strucAlignmentDisplay);
  Method display=c.getMethod(""String_Node_Str"",new Class[]{AFPChain.class,Atom[].class,Atom[].class,List.class,List.class,List.class,List.class});
  Object structureAlignmentJmol=display.invoke(null,afpChain,ca1,ca2,hetatms1,nucs1,hetatms2,nucs2);
  return structureAlignmentJmol;
}","@SuppressWarnings(""String_Node_Str"") public static Object display(AFPChain afpChain,Atom[] ca1,Atom[] ca2) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
  Class c=Class.forName(strucAlignmentDisplay);
  Method display=c.getMethod(""String_Node_Str"",new Class[]{AFPChain.class,Atom[].class,Atom[].class});
  Object structureAlignmentJmol=display.invoke(null,afpChain,ca1,ca2);
  return structureAlignmentJmol;
}",0.8605504587155963
17102,"/** 
 * Creates an   {@link AlignedSequence} for the given {@link Sequence} in a local alignment.
 * @param original the original {@link Sequence} before alignment
 * @param steps lists whether the sequence aligns a {@link Compound} or gap at each index of the alignment
 * @param numBefore number of {@link Compound}s before a local alignment
 * @param numAfter number of {@link Compound}s after a local alignment
 * @throws IllegalArgumentException if given sequence does not fit in alignment
 */
public SimpleAlignedSequence(Sequence<C> original,List<Step> steps,int numBefore,int numAfter){
  this.original=original;
  this.numBefore=numBefore;
  this.numAfter=numAfter;
  length=steps.size();
  SimpleAlignedSequence<C> prev=null;
  if (original instanceof SimpleAlignedSequence<?>) {
    prev=(SimpleAlignedSequence<C>)original;
    this.original=prev.getOriginalSequence();
    this.numBefore+=prev.numBefore;
    this.numAfter+=prev.numAfter;
  }
  List<Location> sublocations=new ArrayList<Location>();
  int start=0, step=0, oStep=numBefore + numAfter, oMax=this.original.getLength(), pStep=0, pMax=(prev == null) ? 0 : prev.getLength();
  boolean inGap=true;
  for (; step < length; step++) {
    boolean isGapStep=(steps.get(step) == Step.GAP), isGapPrev=(prev != null && pStep < pMax && prev.isGap(pStep + 1));
    if (!inGap && (isGapStep || isGapPrev)) {
      inGap=true;
      sublocations.add(new SimpleLocation(start,step,Strand.UNDEFINED));
    }
 else     if (!isGapStep && !isGapPrev) {
      oStep++;
      if (inGap) {
        inGap=false;
        start=step + 1;
      }
    }
    if (!isGapStep) {
      pStep+=(prev == null) ? 0 : 1;
    }
  }
  if (!inGap) {
    sublocations.add(new SimpleLocation(start,step,Strand.UNDEFINED));
  }
  location=(sublocations.size() == 1) ? sublocations.get(0) : new SimpleLocation(sublocations.get(0).getStart(),sublocations.get(sublocations.size() - 1).getEnd(),Strand.UNDEFINED,false,sublocations);
  if (step != length || oStep != oMax || pStep != pMax) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * Creates an   {@link AlignedSequence} for the given {@link Sequence} in a local alignment.
 * @param original the original {@link Sequence} before alignment
 * @param steps lists whether the sequence aligns a {@link Compound} or gap at each index of the alignment
 * @param numBefore number of {@link Compound}s before a local alignment
 * @param numAfter number of {@link Compound}s after a local alignment
 * @throws IllegalArgumentException if given sequence does not fit in alignment
 */
public SimpleAlignedSequence(Sequence<C> original,List<Step> steps,int numBefore,int numAfter){
  this.original=original;
  this.numBefore=numBefore;
  this.numAfter=numAfter;
  length=steps.size();
  SimpleAlignedSequence<C> prev=null;
  if (original instanceof SimpleAlignedSequence<?>) {
    prev=(SimpleAlignedSequence<C>)original;
    this.original=prev.getOriginalSequence();
    this.numBefore+=prev.numBefore;
    this.numAfter+=prev.numAfter;
  }
  List<Location> sublocations=new ArrayList<Location>();
  int start=0, step=0, oStep=numBefore + numAfter, oMax=this.original.getLength(), pStep=0, pMax=(prev == null) ? 0 : prev.getLength();
  boolean inGap=true;
  for (; step < length; step++) {
    boolean isGapStep=(steps.get(step) == Step.GAP), isGapPrev=(pStep < pMax && prev.isGap(pStep + 1));
    if (!isGapStep && !isGapPrev) {
      oStep++;
      if (inGap) {
        inGap=false;
        start=step + 1;
      }
    }
 else     if (!inGap) {
      inGap=true;
      sublocations.add(new SimpleLocation(start,step,Strand.UNDEFINED));
    }
    if (prev != null && !isGapStep) {
      pStep++;
    }
  }
  if (!inGap) {
    sublocations.add(new SimpleLocation(start,step,Strand.UNDEFINED));
  }
  location=(sublocations.size() == 1) ? sublocations.get(0) : new SimpleLocation(sublocations.get(0).getStart(),sublocations.get(sublocations.size() - 1).getEnd(),Strand.UNDEFINED,false,sublocations);
  if (step != length || oStep != oMax || pStep != pMax) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.9029126213592232
17103,"@Override public int getSequenceIndexAt(int alignmentIndex){
  if (sequenceFromAlignment == null) {
    sequenceFromAlignment=new int[length];
    int a=1, s=numBefore + 1;
    for (int i=0; i < getStart().getPosition(); i++, a++) {
      sequenceFromAlignment[a - 1]=s;
    }
    for (; a <= length; a++) {
      if (s < getEnd().getPosition() && !isGap(a)) {
        s++;
      }
      sequenceFromAlignment[a - 1]=s;
    }
  }
  return sequenceFromAlignment[alignmentIndex - 1];
}","@Override public int getSequenceIndexAt(int alignmentIndex){
  if (sequenceFromAlignment == null) {
    sequenceFromAlignment=new int[length];
    int a=1, s=numBefore + 1;
    for (int i=0; i < getStart().getPosition(); i++, a++) {
      sequenceFromAlignment[a - 1]=s;
    }
    for (; a <= length; a++) {
      if (!isGap(a)) {
        s++;
      }
      sequenceFromAlignment[a - 1]=s;
    }
  }
  return sequenceFromAlignment[alignmentIndex - 1];
}",0.967948717948718
17104,"@Test public void testGetSequenceAsString(){
  assertEquals(global.getSequenceAsString(),""String_Node_Str"");
  assertEquals(local.getSequenceAsString(),""String_Node_Str"");
}","@Test public void testGetSequenceAsString(){
  assertEquals(global.getSequenceAsString(),""String_Node_Str"");
  assertEquals(local.getSequenceAsString(),""String_Node_Str"");
  assertEquals(local2.getSequenceAsString(),""String_Node_Str"");
}",0.8439024390243902
17105,"@Test public void testGetAlignmentIndexAt(){
  assertEquals(global.getAlignmentIndexAt(1),2);
  assertEquals(global.getAlignmentIndexAt(2),3);
  assertEquals(global.getAlignmentIndexAt(3),5);
  assertEquals(global.getAlignmentIndexAt(4),6);
  assertEquals(local.getAlignmentIndexAt(1),1);
  assertEquals(local.getAlignmentIndexAt(2),1);
  assertEquals(local.getAlignmentIndexAt(3),2);
  assertEquals(local.getAlignmentIndexAt(4),5);
  assertEquals(local.getAlignmentIndexAt(5),7);
  assertEquals(local.getAlignmentIndexAt(6),8);
  assertEquals(local.getAlignmentIndexAt(7),8);
  assertEquals(local.getAlignmentIndexAt(8),8);
  assertEquals(local.getAlignmentIndexAt(9),8);
}","@Test public void testGetAlignmentIndexAt(){
  assertEquals(global.getAlignmentIndexAt(1),2);
  assertEquals(global.getAlignmentIndexAt(2),3);
  assertEquals(global.getAlignmentIndexAt(3),5);
  assertEquals(global.getAlignmentIndexAt(4),6);
  assertEquals(local.getAlignmentIndexAt(1),1);
  assertEquals(local.getAlignmentIndexAt(2),1);
  assertEquals(local.getAlignmentIndexAt(3),2);
  assertEquals(local.getAlignmentIndexAt(4),5);
  assertEquals(local.getAlignmentIndexAt(5),7);
  assertEquals(local.getAlignmentIndexAt(6),8);
  assertEquals(local.getAlignmentIndexAt(7),8);
  assertEquals(local.getAlignmentIndexAt(8),8);
  assertEquals(local.getAlignmentIndexAt(9),8);
  assertEquals(local2.getAlignmentIndexAt(1),1);
  assertEquals(local2.getAlignmentIndexAt(2),1);
  assertEquals(local2.getAlignmentIndexAt(3),2);
  assertEquals(local2.getAlignmentIndexAt(4),3);
}",0.8730569948186528
17106,"@Test public void testIsCircular(){
  assertFalse(global.isCircular());
  assertFalse(local.isCircular());
}","@Test public void testIsCircular(){
  assertFalse(global.isCircular());
  assertFalse(local.isCircular());
  assertFalse(local2.isCircular());
}",0.8571428571428571
17107,"@Test public void testGetNumGaps(){
  assertEquals(global.getNumGaps(),3);
  assertEquals(local.getNumGaps(),2);
}","@Test public void testGetNumGaps(){
  assertEquals(global.getNumGaps(),3);
  assertEquals(local.getNumGaps(),2);
  assertEquals(local2.getNumGaps(),0);
}",0.8539325842696629
17108,"@Test public void testGetIndexOf(){
  assertEquals(global.getIndexOf(cs.getCompoundForString(""String_Node_Str"")),3);
  assertEquals(global.getIndexOf(cs.getCompoundForString(""String_Node_Str"")),1);
  assertEquals(local.getIndexOf(cs.getCompoundForString(""String_Node_Str"")),5);
  assertEquals(local.getIndexOf(cs.getCompoundForString(""String_Node_Str"")),3);
}","@Test public void testGetIndexOf(){
  assertEquals(global.getIndexOf(cs.getCompoundForString(""String_Node_Str"")),3);
  assertEquals(global.getIndexOf(cs.getCompoundForString(""String_Node_Str"")),1);
  assertEquals(local.getIndexOf(cs.getCompoundForString(""String_Node_Str"")),5);
  assertEquals(local.getIndexOf(cs.getCompoundForString(""String_Node_Str"")),3);
  assertEquals(local2.getIndexOf(cs.getCompoundForString(""String_Node_Str"")),2);
  assertEquals(local2.getIndexOf(cs.getCompoundForString(""String_Node_Str"")),-1);
}",0.8149829738933031
17109,"@Test public void testGetSequenceIndexAt(){
  assertEquals(global.getSequenceIndexAt(1),1);
  assertEquals(global.getSequenceIndexAt(2),1);
  assertEquals(global.getSequenceIndexAt(3),2);
  assertEquals(global.getSequenceIndexAt(4),2);
  assertEquals(global.getSequenceIndexAt(5),3);
  assertEquals(global.getSequenceIndexAt(6),4);
  assertEquals(global.getSequenceIndexAt(7),4);
  assertEquals(local.getSequenceIndexAt(1),2);
  assertEquals(local.getSequenceIndexAt(2),3);
  assertEquals(local.getSequenceIndexAt(3),3);
  assertEquals(local.getSequenceIndexAt(4),3);
  assertEquals(local.getSequenceIndexAt(5),4);
  assertEquals(local.getSequenceIndexAt(6),4);
  assertEquals(local.getSequenceIndexAt(7),5);
  assertEquals(local.getSequenceIndexAt(8),6);
}","@Test public void testGetSequenceIndexAt(){
  assertEquals(global.getSequenceIndexAt(1),1);
  assertEquals(global.getSequenceIndexAt(2),1);
  assertEquals(global.getSequenceIndexAt(3),2);
  assertEquals(global.getSequenceIndexAt(4),2);
  assertEquals(global.getSequenceIndexAt(5),3);
  assertEquals(global.getSequenceIndexAt(6),4);
  assertEquals(global.getSequenceIndexAt(7),4);
  assertEquals(local.getSequenceIndexAt(1),2);
  assertEquals(local.getSequenceIndexAt(2),3);
  assertEquals(local.getSequenceIndexAt(3),3);
  assertEquals(local.getSequenceIndexAt(4),3);
  assertEquals(local.getSequenceIndexAt(5),4);
  assertEquals(local.getSequenceIndexAt(6),4);
  assertEquals(local.getSequenceIndexAt(7),5);
  assertEquals(local.getSequenceIndexAt(8),6);
  assertEquals(local2.getSequenceIndexAt(1),2);
  assertEquals(local2.getSequenceIndexAt(2),3);
  assertEquals(local2.getSequenceIndexAt(3),4);
}",0.9131483715319664
17110,"@Test public void testGetOverlapCount(){
  assertEquals(global.getOverlapCount(),1);
  assertEquals(local.getOverlapCount(),1);
}","@Test public void testGetOverlapCount(){
  assertEquals(global.getOverlapCount(),1);
  assertEquals(local.getOverlapCount(),1);
  assertEquals(local2.getOverlapCount(),1);
}",0.8543046357615894
17111,"@Test public void testGetLastIndexOf(){
  assertEquals(global.getLastIndexOf(cs.getCompoundForString(""String_Node_Str"")),3);
  assertEquals(global.getLastIndexOf(cs.getCompoundForString(""String_Node_Str"")),7);
  assertEquals(local.getLastIndexOf(cs.getCompoundForString(""String_Node_Str"")),5);
  assertEquals(local.getLastIndexOf(cs.getCompoundForString(""String_Node_Str"")),6);
}","@Test public void testGetLastIndexOf(){
  assertEquals(global.getLastIndexOf(cs.getCompoundForString(""String_Node_Str"")),3);
  assertEquals(global.getLastIndexOf(cs.getCompoundForString(""String_Node_Str"")),7);
  assertEquals(local.getLastIndexOf(cs.getCompoundForString(""String_Node_Str"")),5);
  assertEquals(local.getLastIndexOf(cs.getCompoundForString(""String_Node_Str"")),6);
  assertEquals(local2.getLastIndexOf(cs.getCompoundForString(""String_Node_Str"")),2);
  assertEquals(local2.getLastIndexOf(cs.getCompoundForString(""String_Node_Str"")),-1);
}",0.8159311087190527
17112,"@Test public void testGetLocationInAlignment(){
  assertEquals(global.getLocationInAlignment(),new SimpleLocation(2,6,Strand.UNDEFINED,new SimpleLocation(2,3,Strand.UNDEFINED),new SimpleLocation(5,6,Strand.UNDEFINED)));
  assertEquals(local.getLocationInAlignment(),new SimpleLocation(1,8,Strand.UNDEFINED,new SimpleLocation(1,2,Strand.UNDEFINED),new SimpleLocation(5,5,Strand.UNDEFINED),new SimpleLocation(7,8,Strand.UNDEFINED)));
}","@Test public void testGetLocationInAlignment(){
  assertEquals(global.getLocationInAlignment(),new SimpleLocation(2,6,Strand.UNDEFINED,new SimpleLocation(2,3,Strand.UNDEFINED),new SimpleLocation(5,6,Strand.UNDEFINED)));
  assertEquals(local.getLocationInAlignment(),new SimpleLocation(1,8,Strand.UNDEFINED,new SimpleLocation(1,2,Strand.UNDEFINED),new SimpleLocation(5,5,Strand.UNDEFINED),new SimpleLocation(7,8,Strand.UNDEFINED)));
  assertEquals(local2.getLocationInAlignment(),new SimpleLocation(1,3,Strand.UNDEFINED));
}",0.905857740585774
17113,"@Test public void testGetOriginalSequence(){
  assertEquals(global.getOriginalSequence(),go);
  assertEquals(local.getOriginalSequence(),lo);
}","@Test public void testGetOriginalSequence(){
  assertEquals(global.getOriginalSequence(),go);
  assertEquals(local.getOriginalSequence(),lo);
  assertEquals(local2.getOriginalSequence(),go);
}",0.8537313432835821
17114,"@Test public void testGetStart(){
  assertEquals(global.getStart().getPosition(),new Integer(2));
  assertEquals(local.getStart().getPosition(),new Integer(1));
}","@Test public void testGetStart(){
  assertEquals(global.getStart().getPosition(),new Integer(2));
  assertEquals(local.getStart().getPosition(),new Integer(1));
  assertEquals(local2.getStart().getPosition(),new Integer(1));
}",0.8350515463917526
17115,"@Test public void testGetSequenceAsStringIntegerIntegerStrand(){
  assertEquals(global.getSequenceAsString(2,5,Strand.UNDEFINED),""String_Node_Str"");
  assertEquals(local.getSequenceAsString(2,6,Strand.UNDEFINED),""String_Node_Str"");
}","@Test public void testGetSequenceAsStringIntegerIntegerStrand(){
  assertEquals(global.getSequenceAsString(2,5,Strand.UNDEFINED),""String_Node_Str"");
  assertEquals(local.getSequenceAsString(2,6,Strand.UNDEFINED),""String_Node_Str"");
  assertEquals(local2.getSequenceAsString(2,3,Strand.UNDEFINED),""String_Node_Str"");
}",0.8472727272727273
17116,"@Test public void testCountCompounds(){
  assertEquals(global.countCompounds(cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str"")),3);
  assertEquals(local.countCompounds(cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str"")),1);
}","@Test public void testCountCompounds(){
  assertEquals(global.countCompounds(cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str"")),3);
  assertEquals(local.countCompounds(cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str"")),1);
  assertEquals(local2.countCompounds(cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str"")),2);
}",0.8117216117216117
17117,"@Test public void testGetCompoundSet(){
  assertEquals(global.getCompoundSet(),cs);
  assertEquals(local.getCompoundSet(),cs);
}","@Test public void testGetCompoundSet(){
  assertEquals(global.getCompoundSet(),cs);
  assertEquals(local.getCompoundSet(),cs);
  assertEquals(local2.getCompoundSet(),cs);
}",0.8533333333333334
17118,"@Test public void testIterator(){
  for (  AminoAcidCompound c : global) {
    assertNotNull(cs.getStringForCompound(c));
  }
}","@Test public void testIterator(){
  for (  AminoAcidCompound c : global) {
    assertNotNull(cs.getStringForCompound(c));
  }
  for (  AminoAcidCompound c : local) {
    assertNotNull(cs.getStringForCompound(c));
  }
  for (  AminoAcidCompound c : local2) {
    assertNotNull(cs.getStringForCompound(c));
  }
}",0.5812356979405034
17119,"@Test public void testGetAccession(){
  assertNull(global.getAccession());
  assertNull(local.getAccession());
}","@Test public void testGetAccession(){
  assertNull(global.getAccession());
  assertNull(local.getAccession());
  assertNull(local2.getAccession());
}",0.8582375478927203
17120,"@Test public void testGetCompoundAt(){
  assertEquals(global.getCompoundAt(1),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(global.getCompoundAt(2),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(global.getCompoundAt(3),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(global.getCompoundAt(4),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(global.getCompoundAt(5),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(global.getCompoundAt(6),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(global.getCompoundAt(7),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(global.getCompoundAt(1),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(1),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(2),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(3),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(4),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(5),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(6),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(7),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(8),cs.getCompoundForString(""String_Node_Str""));
}","@Test public void testGetCompoundAt(){
  assertEquals(global.getCompoundAt(1),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(global.getCompoundAt(2),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(global.getCompoundAt(3),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(global.getCompoundAt(4),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(global.getCompoundAt(5),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(global.getCompoundAt(6),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(global.getCompoundAt(7),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(global.getCompoundAt(1),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(1),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(2),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(3),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(4),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(5),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(6),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(7),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local.getCompoundAt(8),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local2.getCompoundAt(1),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local2.getCompoundAt(2),cs.getCompoundForString(""String_Node_Str""));
  assertEquals(local2.getCompoundAt(3),cs.getCompoundForString(""String_Node_Str""));
}",0.9161118508655126
17121,"@Test public void testGetAsList(){
  assertArrayEquals(global.getAsList().toArray(new AminoAcidCompound[7]),new AminoAcidCompound[]{cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str"")});
  assertArrayEquals(local.getAsList().toArray(new AminoAcidCompound[8]),new AminoAcidCompound[]{cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str"")});
}","@Test public void testGetAsList(){
  assertArrayEquals(global.getAsList().toArray(new AminoAcidCompound[7]),new AminoAcidCompound[]{cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str"")});
  assertArrayEquals(local.getAsList().toArray(new AminoAcidCompound[8]),new AminoAcidCompound[]{cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str"")});
  assertArrayEquals(local2.getAsList().toArray(new AminoAcidCompound[3]),new AminoAcidCompound[]{cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str""),cs.getCompoundForString(""String_Node_Str"")});
}",0.8848667672197084
17122,"@Test public void testToString(){
  assertEquals(global.toString(),""String_Node_Str"");
  assertEquals(local.toString(),""String_Node_Str"");
}","@Test public void testToString(){
  assertEquals(global.toString(),""String_Node_Str"");
  assertEquals(local.toString(),""String_Node_Str"");
  assertEquals(local2.toString(),""String_Node_Str"");
}",0.8408408408408409
17123,"@Before public void setup(){
  go=new ProteinSequence(""String_Node_Str"");
  lo=new ProteinSequence(""String_Node_Str"");
  global=new SimpleAlignedSequence<AminoAcidCompound>(go,Arrays.asList(new Step[]{Step.GAP,Step.COMPOUND,Step.COMPOUND,Step.GAP,Step.COMPOUND,Step.COMPOUND,Step.GAP}));
  local=new SimpleAlignedSequence<AminoAcidCompound>(lo,Arrays.asList(new Step[]{Step.COMPOUND,Step.COMPOUND,Step.GAP,Step.GAP,Step.COMPOUND,Step.GAP,Step.COMPOUND,Step.COMPOUND}),1,3);
  cs=AminoAcidCompoundSet.getAminoAcidCompoundSet();
}","@Before public void setup(){
  go=new ProteinSequence(""String_Node_Str"");
  lo=new ProteinSequence(""String_Node_Str"");
  global=new SimpleAlignedSequence<AminoAcidCompound>(go,Arrays.asList(new Step[]{Step.GAP,Step.COMPOUND,Step.COMPOUND,Step.GAP,Step.COMPOUND,Step.COMPOUND,Step.GAP}));
  local=new SimpleAlignedSequence<AminoAcidCompound>(lo,Arrays.asList(new Step[]{Step.COMPOUND,Step.COMPOUND,Step.GAP,Step.GAP,Step.COMPOUND,Step.GAP,Step.COMPOUND,Step.COMPOUND}),1,3);
  local2=new SimpleAlignedSequence<AminoAcidCompound>(go,Arrays.asList(new Step[]{Step.COMPOUND,Step.COMPOUND,Step.COMPOUND}),1,0);
  cs=AminoAcidCompoundSet.getAminoAcidCompoundSet();
}",0.8888888888888888
17124,"@Test public void testGetEnd(){
  assertEquals(global.getEnd().getPosition(),new Integer(6));
  assertEquals(local.getEnd().getPosition(),new Integer(8));
}","@Test public void testGetEnd(){
  assertEquals(global.getEnd().getPosition(),new Integer(6));
  assertEquals(local.getEnd().getPosition(),new Integer(8));
  assertEquals(local2.getEnd().getPosition(),new Integer(3));
}",0.8342245989304813
17125,"@Test public void testGetLength(){
  assertEquals(global.getLength(),7);
  assertEquals(local.getLength(),8);
}","@Test public void testGetLength(){
  assertEquals(global.getLength(),7);
  assertEquals(local.getLength(),8);
  assertEquals(local2.getLength(),3);
}",0.8538461538461538
17126,"/** 
 * Parse chemically modified residues in a structure.
 * @param structure query {@link Structure}.
 * @param potentialModifications query {@link ProteinModification}s.
 * @param modelnr model number.
 * @return an list of {@link ModifiedCompound}s, or null if the nodelnr is larger than the number of models in the structure.
 * @throws IllegalArgumentException if null structure, or null or empty potentialModifications, or potentialModifications contain  modifications other than ModifiedResidues.
 */
@Override public List<ModifiedCompound> parse(final Structure structure,final Set<ProteinModification> potentialModifications,final int modelnr){
  if (structure == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (potentialModifications == null || potentialModifications.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (  ProteinModification mod : potentialModifications) {
    if (mod.getCategory() != ModificationCategory.CHEMICAL_MODIFICATION) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  if (modelnr >= structure.nrModels())   return null;
  List<ModifiedCompound> ret=new ArrayList<ModifiedCompound>();
  List<Chain> chains=structure.getChains(modelnr);
  for (  Chain chain : chains) {
    List<Group> residues=chain.getSeqResGroups();
    int sizeRes=residues.size();
    for (int iRes=0; iRes < sizeRes; iRes++) {
      Group residue=residues.get(iRes);
      String pdbccId=residue.getPDBName();
      ProteinModification mod=ProteinModification.getByPdbccId(pdbccId);
      if (mod == null || !potentialModifications.contains(mod)) {
        continue;
      }
      ModificationCondition condition=mod.getCondition();
      Component comp=condition.getComponents().get(0);
      if ((comp.isNTerminal() && iRes == 0) || (comp.isCTerminal() && iRes == sizeRes - 1)) {
        continue;
      }
      ModifiedCompound modRes=ModifiedCompoundFactory.createModifiedResidue(mod,residue);
      ret.add(modRes);
    }
  }
  return ret;
}","/** 
 * Parse chemically modified residues in a structure.
 * @param structure query {@link Structure}.
 * @param potentialModifications query {@link ProteinModification}s.
 * @param modelnr model number.
 * @return an list of {@link ModifiedCompound}s, or null if the nodelnr is larger than the number of models in the structure.
 * @throws IllegalArgumentException if null structure, or null or empty potentialModifications, or potentialModifications contain  modifications other than ModifiedResidues.
 */
@Override public List<ModifiedCompound> parse(final Structure structure,final Set<ProteinModification> potentialModifications,final int modelnr){
  if (structure == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (potentialModifications == null || potentialModifications.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (  ProteinModification mod : potentialModifications) {
    if (mod.getCategory() != ModificationCategory.CHEMICAL_MODIFICATION) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  if (modelnr >= structure.nrModels())   return null;
  List<ModifiedCompound> ret=new ArrayList<ModifiedCompound>();
  List<Chain> chains=structure.getChains(modelnr);
  for (  Chain chain : chains) {
    List<Group> residues=chain.getSeqResGroups();
    int sizeRes=residues.size();
    for (int iRes=0; iRes < sizeRes; iRes++) {
      Group residue=residues.get(iRes);
      String pdbccId=residue.getPDBName();
      ProteinModification mod=ProteinModification.getByPdbccId(pdbccId);
      if (mod == null || !potentialModifications.contains(mod)) {
        continue;
      }
      ModificationCondition condition=mod.getCondition();
      Component comp=condition.getComponents().get(0);
      if ((comp.isNTerminal() && iRes != 0) || (comp.isCTerminal() && iRes != sizeRes - 1)) {
        continue;
      }
      ModifiedCompound modRes=ModifiedCompoundFactory.createModifiedResidue(mod,residue);
      ret.add(modRes);
    }
  }
  return ret;
}",0.919686581782566
17127,"/** 
 * convert a das2 source to a das 1 source. This only will work if is passes the Das2Source.isDas1Source() test  i.e. this is really a das1 server there
 * @param das2source a DAS2Source to be converted
 * @return a Das1Source 
 * @throws DASException
 */
public static Das1Source toDas1Source(Das2Source das2source) throws DASException {
  if (!das2source.hasDas1Capabilities())   throw new DASException(""String_Node_Str"");
  Das1Source ds=new Das1Source();
  ds.setAdminemail(das2source.getAdminemail());
  ds.setDescription(das2source.getDescription());
  ds.setHelperurl(das2source.getHelperurl());
  ds.setRegisterDate(das2source.getRegisterDate());
  ds.setLeaseDate(das2source.getLeaseDate());
  ds.setLabels(das2source.getLabels());
  ds.setCoordinateSystem(das2source.getCoordinateSystem());
  ds.setNickname(das2source.getNickname());
  ds.setId(das2source.getId());
  ds.setLabels(das2source.getLabels());
  Das2Capability[] caps=das2source.getDas2Capabilities();
  List<Capabilities> das1capabilitites=new ArrayList();
  int DASPREFIXLENGTH=Das2CapabilityImpl.DAS1_CAPABILITY_PREFIX.length();
  for (int i=0; i < caps.length; i++) {
    Das2Capability cap=caps[i];
    String c=cap.getCapability();
    das1capabilitites.add(Capabilities.valueOf((c.substring(DASPREFIXLENGTH,c.length())).toUpperCase()));
    String query_uri=cap.getQueryUri();
    if (query_uri.endsWith(""String_Node_Str"") || query_uri.endsWith(""String_Node_Str"")) {
    }
 else {
      String url=query_uri.substring(0,(query_uri.length() - c.length() + DASPREFIXLENGTH));
      ds.setUrl(url);
    }
  }
  ds.setCapabilities(das1capabilitites);
  List validCaps=das2source.getValidCapabilities();
  ds.setValidCapabilities(validCaps);
  return ds;
}","/** 
 * convert a das2 source to a das 1 source. This only will work if is passes the Das2Source.isDas1Source() test  i.e. this is really a das1 server there
 * @param das2source a DAS2Source to be converted
 * @return a Das1Source 
 * @throws DASException
 */
public static Das1Source toDas1Source(Das2Source das2source) throws DASException {
  if (!das2source.hasDas1Capabilities())   throw new DASException(""String_Node_Str"");
  Das1Source ds=new Das1Source();
  ds.setAdminemail(das2source.getAdminemail());
  ds.setDescription(das2source.getDescription());
  ds.setHelperurl(das2source.getHelperurl());
  ds.setRegisterDate(das2source.getRegisterDate());
  ds.setLeaseDate(das2source.getLeaseDate());
  ds.setLabels(das2source.getLabels());
  ds.setCoordinateSystem(das2source.getCoordinateSystem());
  ds.setNickname(das2source.getNickname());
  ds.setId(das2source.getId());
  ds.setLabels(das2source.getLabels());
  Das2Capability[] caps=das2source.getDas2Capabilities();
  List<Capabilities> das1capabilitites=new ArrayList();
  int DASPREFIXLENGTH=Das2CapabilityImpl.DAS1_CAPABILITY_PREFIX.length();
  for (int i=0; i < caps.length; i++) {
    Das2Capability cap=caps[i];
    String c=cap.getCapability();
    try {
      das1capabilitites.add(Capabilities.valueOf((c.substring(DASPREFIXLENGTH,c.length())).toUpperCase()));
    }
 catch (    IllegalArgumentException ex) {
      System.err.println(""String_Node_Str"" + c);
    }
    String query_uri=cap.getQueryUri();
    if (query_uri.endsWith(""String_Node_Str"") || query_uri.endsWith(""String_Node_Str"")) {
    }
 else {
      String url=query_uri.substring(0,(query_uri.length() - c.length() + DASPREFIXLENGTH));
      ds.setUrl(url);
    }
  }
  ds.setCapabilities(das1capabilitites);
  List validCaps=das2source.getValidCapabilities();
  ds.setValidCapabilities(validCaps);
  return ds;
}",0.967670011148272
17128,"/** 
 * Flip the position of name1 and name2 (as well as all underlying data) in an AFPChain. This is a utility function for AFPChainXMLParser. You will have to call AFPCHainXMLParser.rebuildAFPChain in order to get twisted groups...
 * @param orig
 * @return a cloned AFPCHain which the positions of name1 and name2 flipped.
 */
public static AFPChain flipChain(AFPChain o) throws StructureException {
  AFPChain n=new AFPChain();
  n.setAlgorithmName(o.getAlgorithmName());
  n.setVersion(o.getVersion());
  n.setName2(o.getName1());
  n.setName1(o.getName2());
  n.setCa1Length(o.getCa2Length());
  n.setCa2Length(o.getCa1Length());
  int[] optLen=o.getOptLen();
  n.setOptLen(optLen);
  int blockNum=o.getBlockNum();
  n.setBlockNum(blockNum);
  n.setBlockSize(o.getBlockSize());
  n.setBlockScore(o.getBlockScore());
  n.setBlockRmsd(o.getBlockRmsd());
  n.setBlockGap(o.getBlockGap());
  int minLength=Math.min(n.getCa1Length(),n.getCa2Length());
  int[][][] optAlnN=new int[blockNum][2][minLength];
  int[][][] optAlnO=o.getOptAln();
  String[][][] pdbAlnN=new String[blockNum][2][minLength];
  String[][][] pdbAlnO=o.getPdbAln();
  if ((optAlnO == null) && (pdbAlnO == null)) {
    System.err.println(""String_Node_Str"");
  }
  for (int blockNr=0; blockNr < blockNum; blockNr++) {
    for (int eqrNr=0; eqrNr < optLen[blockNr]; eqrNr++) {
      if (optAlnO != null) {
        optAlnN[blockNr][0][eqrNr]=optAlnO[blockNr][1][eqrNr];
        optAlnN[blockNr][1][eqrNr]=optAlnO[blockNr][0][eqrNr];
      }
      if (pdbAlnO != null) {
        pdbAlnN[blockNr][0][eqrNr]=pdbAlnO[blockNr][1][eqrNr];
        pdbAlnN[blockNr][1][eqrNr]=pdbAlnO[blockNr][0][eqrNr];
      }
    }
  }
  n.setOptAln(optAlnN);
  if (pdbAlnO != null) {
    n.setPdbAln(pdbAlnN);
  }
  n.setAlnLength(o.getAlnLength());
  n.setAlignScore(o.getAlignScore());
  n.setAlignScoreUpdate(o.getAlignScoreUpdate());
  n.setAfpSet(o.getAfpSet());
  n.setChainRmsd(o.getChainRmsd());
  n.setFocusRes1(o.getFocusRes2());
  n.setFocusRes2(o.getFocusRes1());
  n.setFocusResn(o.getFocusResn());
  n.setGapLen(o.getGapLen());
  n.setIdentity(o.getIdentity());
  n.setNormAlignScore(o.getNormAlignScore());
  n.setOptLength(o.getOptLength());
  n.setProbability(o.getProbability());
  n.setSimilarity(o.getSimilarity());
  n.setTotalLenIni(o.getTotalLenIni());
  n.setTotalRmsdIni(o.getTotalRmsdIni());
  n.setTotalRmsdOpt(o.getTotalRmsdOpt());
  Matrix[] maxO=o.getBlockRotationMatrix();
  Matrix[] maxN=new Matrix[maxO.length];
  int i=-1;
  Atom[] shiftO=o.getBlockShiftVector();
  Atom[] shiftN=new Atom[shiftO.length];
  for (  Matrix m : maxO) {
    i++;
    try {
      Matrix mnew=m;
      Atom a=shiftO[i];
      maxN[i]=mnew.transpose();
      shiftN[i]=Calc.invert(a);
      Calc.rotate(shiftN[i],maxN[i]);
    }
 catch (    StructureException e) {
      e.printStackTrace();
    }
  }
  n.setBlockRotationMatrix(maxN);
  n.setBlockShiftVector(shiftN);
  return n;
}","/** 
 * Flip the position of name1 and name2 (as well as all underlying data) in an AFPChain. This is a utility function for AFPChainXMLParser. You will have to call AFPCHainXMLParser.rebuildAFPChain in order to get twisted groups...
 * @param orig
 * @return a cloned AFPCHain which the positions of name1 and name2 flipped.
 */
public static AFPChain flipChain(AFPChain o) throws StructureException {
  AFPChain n=new AFPChain();
  n.setAlgorithmName(o.getAlgorithmName());
  n.setVersion(o.getVersion());
  n.setName2(o.getName1());
  n.setName1(o.getName2());
  n.setCa1Length(o.getCa2Length());
  n.setCa2Length(o.getCa1Length());
  int[] optLen=o.getOptLen();
  n.setOptLen(optLen);
  int blockNum=o.getBlockNum();
  n.setBlockNum(blockNum);
  n.setBlockSize(o.getBlockSize());
  n.setBlockScore(o.getBlockScore());
  n.setBlockRmsd(o.getBlockRmsd());
  n.setBlockGap(o.getBlockGap());
  int minLength=Math.min(n.getCa1Length(),n.getCa2Length());
  int[][][] optAlnN=new int[blockNum][2][minLength];
  int[][][] optAlnO=o.getOptAln();
  String[][][] pdbAlnN=new String[blockNum][2][minLength];
  String[][][] pdbAlnO=o.getPdbAln();
  if ((optAlnO == null) && (pdbAlnO == null)) {
    System.err.println(""String_Node_Str"");
  }
  for (int blockNr=0; blockNr < blockNum; blockNr++) {
    for (int eqrNr=0; eqrNr < optLen[blockNr]; eqrNr++) {
      if (optAlnO != null) {
        optAlnN[blockNr][0][eqrNr]=optAlnO[blockNr][1][eqrNr];
        optAlnN[blockNr][1][eqrNr]=optAlnO[blockNr][0][eqrNr];
      }
      if (pdbAlnO != null) {
        pdbAlnN[blockNr][0][eqrNr]=pdbAlnO[blockNr][1][eqrNr];
        pdbAlnN[blockNr][1][eqrNr]=pdbAlnO[blockNr][0][eqrNr];
      }
    }
  }
  n.setOptAln(optAlnN);
  if (pdbAlnO != null) {
    n.setPdbAln(pdbAlnN);
  }
  n.setAlnLength(o.getAlnLength());
  n.setAlignScore(o.getAlignScore());
  n.setAlignScoreUpdate(o.getAlignScoreUpdate());
  n.setAfpSet(o.getAfpSet());
  n.setChainRmsd(o.getChainRmsd());
  n.setFocusRes1(o.getFocusRes2());
  n.setFocusRes2(o.getFocusRes1());
  n.setFocusResn(o.getFocusResn());
  n.setGapLen(o.getGapLen());
  n.setIdentity(o.getIdentity());
  n.setNormAlignScore(o.getNormAlignScore());
  n.setOptLength(o.getOptLength());
  n.setProbability(o.getProbability());
  n.setSimilarity(o.getSimilarity());
  n.setTotalLenIni(o.getTotalLenIni());
  n.setTotalRmsdIni(o.getTotalRmsdIni());
  n.setTotalRmsdOpt(o.getTotalRmsdOpt());
  Matrix[] maxO=o.getBlockRotationMatrix();
  Matrix[] maxN=new Matrix[maxO.length];
  int i=-1;
  Atom[] shiftO=o.getBlockShiftVector();
  Atom[] shiftN=new Atom[shiftO.length];
  for (  Matrix m : maxO) {
    i++;
    if (m == null) {
      continue;
    }
    try {
      Matrix mnew=m;
      Atom a=shiftO[i];
      maxN[i]=mnew.transpose();
      shiftN[i]=Calc.invert(a);
      Calc.rotate(shiftN[i],maxN[i]);
    }
 catch (    StructureException e) {
      e.printStackTrace();
    }
  }
  n.setBlockRotationMatrix(maxN);
  n.setBlockShiftVector(shiftN);
  return n;
}",0.9927377132241176
17129,"private static void printXMLMatrixShift(PrettyXMLWriter xml,AFPChain afpChain,int blockNr) throws IOException {
  xml.openTag(""String_Node_Str"");
  Matrix[] ms=afpChain.getBlockRotationMatrix();
  if (ms == null || ms.length == 0)   return;
  Matrix matrix=ms[blockNr];
  for (int x=0; x < 3; x++) {
    for (int y=0; y < 3; y++) {
      String key=""String_Node_Str"" + (x + 1) + (y + 1);
      xml.attribute(key,matrix.get(x,y) + ""String_Node_Str"");
    }
  }
  xml.closeTag(""String_Node_Str"");
  Atom[] shifts=afpChain.getBlockShiftVector();
  Atom shift=shifts[blockNr];
  xml.openTag(""String_Node_Str"");
  xml.attribute(""String_Node_Str"",shift.getX() + ""String_Node_Str"");
  xml.attribute(""String_Node_Str"",shift.getY() + ""String_Node_Str"");
  xml.attribute(""String_Node_Str"",shift.getZ() + ""String_Node_Str"");
  xml.closeTag(""String_Node_Str"");
}","private static void printXMLMatrixShift(PrettyXMLWriter xml,AFPChain afpChain,int blockNr) throws IOException {
  Matrix[] ms=afpChain.getBlockRotationMatrix();
  if (ms == null || ms.length == 0)   return;
  xml.openTag(""String_Node_Str"");
  Matrix matrix=ms[blockNr];
  for (int x=0; x < 3; x++) {
    for (int y=0; y < 3; y++) {
      String key=""String_Node_Str"" + (x + 1) + (y + 1);
      xml.attribute(key,matrix.get(x,y) + ""String_Node_Str"");
    }
  }
  xml.closeTag(""String_Node_Str"");
  Atom[] shifts=afpChain.getBlockShiftVector();
  Atom shift=shifts[blockNr];
  xml.openTag(""String_Node_Str"");
  xml.attribute(""String_Node_Str"",shift.getX() + ""String_Node_Str"");
  xml.attribute(""String_Node_Str"",shift.getY() + ""String_Node_Str"");
  xml.attribute(""String_Node_Str"",shift.getZ() + ""String_Node_Str"");
  xml.closeTag(""String_Node_Str"");
}",0.96
17130,"public static double getTMScore(AFPChain align,Atom[] ca1,Atom[] ca2) throws StructureException {
  Atom[] ca1aligned=new Atom[align.getOptLength()];
  Atom[] ca2aligned=new Atom[align.getOptLength()];
  int pos=0;
  int[] blockLens=align.getOptLen();
  int[][][] optAln=align.getOptAln();
  assert(align.getBlockNum() <= optAln.length);
  for (int block=0; block < align.getBlockNum(); block++) {
    assert(blockLens[block] <= optAln[block][0].length);
    for (int i=0; i < blockLens[block]; i++) {
      ca1aligned[pos]=ca1[optAln[block][0][i]];
      ca2aligned[pos]=(Atom)ca2[optAln[block][1][i]].clone();
      pos++;
    }
  }
  assert(pos == align.getOptLength());
  SVDSuperimposer svd=new SVDSuperimposer(ca1aligned,ca2aligned);
  Matrix matrix=svd.getRotation();
  Atom shift=svd.getTranslation();
  for (  Atom a : ca2aligned) {
    Calc.rotate(a,matrix);
    Calc.shift(a,shift);
  }
  return SVDSuperimposer.getTMScore(ca1aligned,ca2aligned,ca1.length,ca2.length);
}","public static double getTMScore(AFPChain align,Atom[] ca1,Atom[] ca2) throws StructureException {
  if (align.getNrEQR() == 0)   return -1;
  Atom[] ca1aligned=new Atom[align.getOptLength()];
  Atom[] ca2aligned=new Atom[align.getOptLength()];
  int pos=0;
  int[] blockLens=align.getOptLen();
  int[][][] optAln=align.getOptAln();
  assert(align.getBlockNum() <= optAln.length);
  for (int block=0; block < align.getBlockNum(); block++) {
    assert(blockLens[block] <= optAln[block][0].length);
    for (int i=0; i < blockLens[block]; i++) {
      ca1aligned[pos]=ca1[optAln[block][0][i]];
      ca2aligned[pos]=(Atom)ca2[optAln[block][1][i]].clone();
      pos++;
    }
  }
  assert(pos == align.getOptLength());
  SVDSuperimposer svd=new SVDSuperimposer(ca1aligned,ca2aligned);
  Matrix matrix=svd.getRotation();
  Atom shift=svd.getTranslation();
  for (  Atom a : ca2aligned) {
    Calc.rotate(a,matrix);
    Calc.shift(a,shift);
  }
  return SVDSuperimposer.getTMScore(ca1aligned,ca2aligned,ca1.length,ca2.length);
}",0.9790419161676648
17131,"/** 
 * Rotate the Atoms/Groups so they are aligned for the 3D visualisation
 * @param afpChain
 * @param ca1
 * @param ca2
 * @return
 * @throws StructureException
 */
public static Group[] prepareGroupsForDisplay(AFPChain afpChain,Atom[] ca1,Atom[] ca2) throws StructureException {
  if (afpChain.getBlockRotationMatrix().length == 0) {
    throw new StructureException(""String_Node_Str"");
  }
  Group[] twistedGroups=new Group[ca2.length];
  int blockNum=afpChain.getBlockNum();
  int i=-1;
  List<Group> hetatms2=new ArrayList<Group>();
  List<Group> nucs2=new ArrayList<Group>();
  Group g2=ca2[0].getParent();
  Chain c2=null;
  if (g2 != null) {
    c2=g2.getParent();
    if (c2 != null) {
      hetatms2=c2.getAtomGroups(""String_Node_Str"");
      nucs2=c2.getAtomGroups(""String_Node_Str"");
    }
  }
  if ((afpChain.getAlgorithmName().equals(FatCatRigid.algorithmName)) || (afpChain.getAlgorithmName().equals(FatCatFlexible.algorithmName))) {
    for (    Atom a : ca2) {
      i++;
      twistedGroups[i]=a.getParent();
    }
    twistedGroups=AFPTwister.twistOptimized(afpChain,ca1,ca2);
  }
 else {
    Matrix m=afpChain.getBlockRotationMatrix()[0];
    Atom shift=afpChain.getBlockShiftVector()[0];
    shiftCA2(afpChain,ca2,hetatms2,nucs2,m,shift,twistedGroups);
  }
  if (afpChain.getBlockNum() > 0) {
    if ((hetatms2.size() > 0) || (nucs2.size() > 0)) {
      if (afpChain.getBlockRotationMatrix().length > 0) {
        Matrix m1=afpChain.getBlockRotationMatrix()[0];
        Atom vector1=afpChain.getBlockShiftVector()[0];
        for (        Group g : hetatms2) {
          Calc.rotate(g,m1);
          Calc.shift(g,vector1);
        }
        for (        Group g : nucs2) {
          Calc.rotate(g,m1);
          Calc.shift(g,vector1);
        }
      }
    }
  }
  return twistedGroups;
}","/** 
 * Rotate the Atoms/Groups so they are aligned for the 3D visualisation
 * @param afpChain
 * @param ca1
 * @param ca2
 * @return
 * @throws StructureException
 */
public static Group[] prepareGroupsForDisplay(AFPChain afpChain,Atom[] ca1,Atom[] ca2) throws StructureException {
  if (afpChain.getBlockRotationMatrix().length == 0) {
    System.err.println(""String_Node_Str"");
    afpChain.setBlockRotationMatrix(new Matrix[]{Matrix.identity(3,3)});
    afpChain.setBlockShiftVector(new Atom[]{new AtomImpl()});
  }
  Group[] twistedGroups=new Group[ca2.length];
  int i=-1;
  List<Group> hetatms2=new ArrayList<Group>();
  List<Group> nucs2=new ArrayList<Group>();
  Group g2=ca2[0].getParent();
  Chain c2=null;
  if (g2 != null) {
    c2=g2.getParent();
    if (c2 != null) {
      hetatms2=c2.getAtomGroups(""String_Node_Str"");
      nucs2=c2.getAtomGroups(""String_Node_Str"");
    }
  }
  if ((afpChain.getAlgorithmName().equals(FatCatRigid.algorithmName)) || (afpChain.getAlgorithmName().equals(FatCatFlexible.algorithmName))) {
    for (    Atom a : ca2) {
      i++;
      twistedGroups[i]=a.getParent();
    }
    twistedGroups=AFPTwister.twistOptimized(afpChain,ca1,ca2);
  }
 else {
    Matrix m=afpChain.getBlockRotationMatrix()[0];
    Atom shift=afpChain.getBlockShiftVector()[0];
    shiftCA2(afpChain,ca2,hetatms2,nucs2,m,shift,twistedGroups);
  }
  if (afpChain.getBlockNum() > 0) {
    if ((hetatms2.size() > 0) || (nucs2.size() > 0)) {
      if (afpChain.getBlockRotationMatrix().length > 0) {
        Matrix m1=afpChain.getBlockRotationMatrix()[0];
        Atom vector1=afpChain.getBlockShiftVector()[0];
        for (        Group g : hetatms2) {
          Calc.rotate(g,m1);
          Calc.shift(g,vector1);
        }
        for (        Group g : nucs2) {
          Calc.rotate(g,m1);
          Calc.shift(g,vector1);
        }
      }
    }
  }
  return twistedGroups;
}",0.9369272237196764
17132,"private File downloadPDB(String pdbId){
  if ((path == null) || (path.equals(""String_Node_Str""))) {
    String property=""String_Node_Str"";
    String tempdir=System.getProperty(property);
    if (!(tempdir.endsWith(lineSplit)))     tempdir=tempdir + lineSplit;
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + tempdir);
    path=tempdir;
  }
  File tempFile;
  if (pdbDirectorySplit) {
    String middle=pdbId.substring(1,3).toLowerCase();
    String dir=path + lineSplit + middle;
    File directoryCheck=new File(dir);
    if (!directoryCheck.exists()) {
      directoryCheck.mkdir();
    }
    tempFile=new File(dir + lineSplit + ""String_Node_Str""+ pdbId.toLowerCase()+ ""String_Node_Str"");
  }
 else {
    tempFile=new File(path + lineSplit + ""String_Node_Str""+ pdbId.toLowerCase()+ ""String_Node_Str"");
  }
  String serverName=System.getProperty(PDB_FILE_SERVER_PROPERTY);
  if (serverName == null)   serverName=DEFAULT_PDB_FILE_SERVER;
  String ftp=String.format(""String_Node_Str"",serverName,pdbId.toLowerCase());
  System.out.println(""String_Node_Str"" + ftp);
  System.out.println(""String_Node_Str"" + tempFile);
  try {
    URL url=new URL(ftp);
    InputStream conn=new GZIPInputStream(url.openStream());
    FileOutputStream outPut=new FileOutputStream(tempFile);
    GZIPOutputStream gzOutPut=new GZIPOutputStream(outPut);
    PrintWriter pw=new PrintWriter(gzOutPut);
    BufferedReader fileBuffer=new BufferedReader(new InputStreamReader(conn));
    String line;
    while ((line=fileBuffer.readLine()) != null) {
      pw.println(line);
    }
    pw.flush();
    pw.close();
    outPut.close();
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return tempFile;
}","private File downloadPDB(String pdbId){
  if ((path == null) || (path.equals(""String_Node_Str""))) {
    String property=""String_Node_Str"";
    String tempdir=System.getProperty(property);
    if (!(tempdir.endsWith(lineSplit)))     tempdir=tempdir + lineSplit;
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + tempdir);
    path=tempdir;
  }
  File tempFile;
  if (pdbDirectorySplit) {
    String middle=pdbId.substring(1,3).toLowerCase();
    String dir=path + lineSplit + middle;
    File directoryCheck=new File(dir);
    if (!directoryCheck.exists()) {
      directoryCheck.mkdir();
    }
    tempFile=new File(dir + lineSplit + ""String_Node_Str""+ pdbId.toLowerCase()+ ""String_Node_Str"");
  }
 else {
    tempFile=new File(path + lineSplit + ""String_Node_Str""+ pdbId.toLowerCase()+ ""String_Node_Str"");
  }
  String serverName=System.getProperty(PDB_FILE_SERVER_PROPERTY);
  if (serverName == null)   serverName=DEFAULT_PDB_FILE_SERVER;
  String ftp=String.format(""String_Node_Str"",serverName,pdbId.toLowerCase());
  System.out.println(""String_Node_Str"" + ftp);
  System.out.println(""String_Node_Str"" + tempFile);
  try {
    URL url=new URL(ftp);
    InputStream uStream=url.openStream();
    InputStream conn=new GZIPInputStream(uStream);
    FileOutputStream outPut=new FileOutputStream(tempFile);
    GZIPOutputStream gzOutPut=new GZIPOutputStream(outPut);
    PrintWriter pw=new PrintWriter(gzOutPut);
    BufferedReader fileBuffer=new BufferedReader(new InputStreamReader(conn));
    String line;
    while ((line=fileBuffer.readLine()) != null) {
      pw.println(line);
    }
    pw.flush();
    pw.close();
    outPut.close();
    conn.close();
    uStream.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return tempFile;
}",0.9764441951766686
17133,"public void run(){
  StructureAlignment algorithm=parent.getStructureAlignment();
  try {
    Atom[] ca1=StructureTools.getAtomCAArray(structure1);
    Atom[] ca2=StructureTools.getAtomCAArray(structure2);
    AFPChain afpChain=algorithm.align(ca1,ca2);
    afpChain.setName1(name1);
    afpChain.setName2(name2);
    List<Group> hetatms=structure1.getChain(0).getAtomGroups(""String_Node_Str"");
    List<Group> nucs=structure1.getChain(0).getAtomGroups(""String_Node_Str"");
    List<Group> hetatms2=structure2.getChain(0).getAtomGroups(""String_Node_Str"");
    List<Group> nucs2=structure2.getChain(0).getAtomGroups(""String_Node_Str"");
    StructureAlignmentJmol jmol;
    jmol=StructureAlignmentDisplay.display(afpChain,ca1,ca2,hetatms,nucs,hetatms2,nucs2);
    String title=jmol.getTitle();
    ConfigStrucAligParams params=algorithm.getParameters();
    if (params != null)     title+=""String_Node_Str"" + algorithm.getParameters().toString();
    jmol.setTitle(title);
    DisplayAFP.showAlignmentImage(afpChain,ca1,ca2,jmol);
    System.out.println(afpChain.toCE(ca1,ca2));
  }
 catch (  StructureException e) {
    e.printStackTrace();
    logger.warning(e.getMessage());
  }
  parent.notifyCalcFinished();
}","public void run(){
  StructureAlignment algorithm=parent.getStructureAlignment();
  try {
    Atom[] ca1=StructureTools.getAtomCAArray(structure1);
    Atom[] ca2=StructureTools.getAtomCAArray(structure2);
    AFPChain afpChain=algorithm.align(ca1,ca2);
    afpChain.setName1(name1);
    afpChain.setName2(name2);
    StructureAlignmentJmol jmol=StructureAlignmentDisplay.display(afpChain,ca1,ca2);
    String title=jmol.getTitle();
    ConfigStrucAligParams params=algorithm.getParameters();
    if (params != null)     title+=""String_Node_Str"" + algorithm.getParameters().toString();
    jmol.setTitle(title);
    DisplayAFP.showAlignmentImage(afpChain,ca1,ca2,jmol);
    System.out.println(afpChain.toCE(ca1,ca2));
  }
 catch (  StructureException e) {
    e.printStackTrace();
    logger.warning(e.getMessage());
  }
  parent.notifyCalcFinished();
}",0.8265503875968992
17134,"private void showAlignment(String name1,String name2){
  StructureAlignment algorithm;
  try {
    algorithm=StructureAlignmentFactory.getAlgorithm(algorithmName);
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.err.println(""String_Node_Str"");
    try {
      algorithm=StructureAlignmentFactory.getAlgorithm(CeMain.algorithmName);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      return;
    }
  }
  try {
    Structure structure1=cache.getStructure(name1);
    Structure structure2=cache.getStructure(name2);
    Atom[] ca1;
    Atom[] ca2;
    List<Group> hetatms1=structure1.getChain(0).getAtomGroups(""String_Node_Str"");
    List<Group> nucs1=structure1.getChain(0).getAtomGroups(""String_Node_Str"");
    List<Group> hetatms2=new ArrayList<Group>();
    List<Group> nucs2=new ArrayList<Group>();
    ca1=StructureTools.getAtomCAArray(structure1);
    ca2=StructureTools.getAtomCAArray(structure2);
    AFPChain afpChain;
    afpChain=algorithm.align(ca1,ca2);
    afpChain.setName1(name1);
    afpChain.setName2(name2);
    if ((afpChain.getBlockNum() - 1) == 0) {
      hetatms2=structure2.getChain(0).getAtomGroups(""String_Node_Str"");
      nucs2=structure2.getChain(0).getAtomGroups(""String_Node_Str"");
    }
    StructureAlignmentJmol jmol=StructureAlignmentDisplay.display(afpChain,ca1,ca2,hetatms1,nucs1,hetatms2,nucs2);
    DisplayAFP.showAlignmentImage(afpChain,ca1,ca2,jmol);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void showAlignment(String name1,String name2){
  StructureAlignment algorithm;
  try {
    algorithm=StructureAlignmentFactory.getAlgorithm(algorithmName);
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.err.println(""String_Node_Str"");
    try {
      algorithm=StructureAlignmentFactory.getAlgorithm(CeMain.algorithmName);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      return;
    }
  }
  try {
    Structure structure1=cache.getStructure(name1);
    Structure structure2=cache.getStructure(name2);
    Atom[] ca1;
    Atom[] ca2;
    ca1=StructureTools.getAtomCAArray(structure1);
    ca2=StructureTools.getAtomCAArray(structure2);
    AFPChain afpChain;
    afpChain=algorithm.align(ca1,ca2);
    afpChain.setName1(name1);
    afpChain.setName2(name2);
    StructureAlignmentJmol jmol=StructureAlignmentDisplay.display(afpChain,ca1,ca2);
    DisplayAFP.showAlignmentImage(afpChain,ca1,ca2,jmol);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8078778135048231
17135,"/** 
 * Note: ca2, hetatoms2 and nucleotides2 should not be rotated. This will be done here...
 */
public static final StructureAlignmentJmol display(AFPChain afpChain,Group[] twistedGroups,Atom[] ca1,Atom[] ca2,List<Group> hetatms,List<Group> nucleotides,List<Group> hetatms2,List<Group> nucleotides2) throws StructureException {
  List<Atom> twistedAs=new ArrayList<Atom>();
  for (  Group g : twistedGroups) {
    if (g == null)     continue;
    if (g.size() < 1)     continue;
    Atom a=g.getAtom(0);
    twistedAs.add(a);
  }
  Atom[] twistedAtoms=(Atom[])twistedAs.toArray(new Atom[twistedAs.size()]);
  Atom[] arr1=getAtomArray(ca1,hetatms,nucleotides);
  Atom[] arr2=getAtomArray(twistedAtoms,hetatms2,nucleotides2);
  if (afpChain.getBlockNum() == 1) {
    if ((hetatms2.size() > 0) || (nucleotides2.size() > 0)) {
      if (afpChain.getBlockRotationMatrix().length > 0) {
        Matrix m1=afpChain.getBlockRotationMatrix()[0];
        Atom vector1=afpChain.getBlockShiftVector()[0];
        for (        Group g : hetatms2) {
          Calc.rotate(g,m1);
          Calc.shift(g,vector1);
        }
        for (        Group g : nucleotides2) {
          Calc.rotate(g,m1);
          Calc.shift(g,vector1);
        }
      }
    }
  }
  String title=afpChain.getAlgorithmName() + ""String_Node_Str"" + afpChain.getVersion()+ ""String_Node_Str""+ afpChain.getName1()+ ""String_Node_Str""+ afpChain.getName2();
  StructureAlignmentJmol jmol=new StructureAlignmentJmol(afpChain,arr1,arr2);
  jmol.setTitle(title);
  return jmol;
}","/** 
 * Note: ca2, hetatoms2 and nucleotides2 should not be rotated. This will be done here...
 */
public static final StructureAlignmentJmol display(AFPChain afpChain,Group[] twistedGroups,Atom[] ca1,Atom[] ca2,List<Group> hetatms,List<Group> nucleotides,List<Group> hetatms2,List<Group> nucleotides2) throws StructureException {
  List<Atom> twistedAs=new ArrayList<Atom>();
  for (  Group g : twistedGroups) {
    if (g == null)     continue;
    if (g.size() < 1)     continue;
    Atom a=g.getAtom(0);
    twistedAs.add(a);
  }
  Atom[] twistedAtoms=(Atom[])twistedAs.toArray(new Atom[twistedAs.size()]);
  Atom[] arr1=getAtomArray(ca1,hetatms,nucleotides);
  Atom[] arr2=getAtomArray(twistedAtoms,hetatms2,nucleotides2);
  if (afpChain.getBlockNum() > 0) {
    if ((hetatms2.size() > 0) || (nucleotides2.size() > 0)) {
      if (afpChain.getBlockRotationMatrix().length > 0) {
        Matrix m1=afpChain.getBlockRotationMatrix()[0];
        Atom vector1=afpChain.getBlockShiftVector()[0];
        for (        Group g : hetatms2) {
          Calc.rotate(g,m1);
          Calc.shift(g,vector1);
        }
        for (        Group g : nucleotides2) {
          Calc.rotate(g,m1);
          Calc.shift(g,vector1);
        }
      }
    }
  }
  String title=afpChain.getAlgorithmName() + ""String_Node_Str"" + afpChain.getVersion()+ ""String_Node_Str""+ afpChain.getName1()+ ""String_Node_Str""+ afpChain.getName2();
  StructureAlignmentJmol jmol=new StructureAlignmentJmol(afpChain,arr1,arr2);
  jmol.setTitle(title);
  return jmol;
}",0.9977176393870232
17136,"public void actionPerformed(ActionEvent evt){
  final JFileChooser fc=new JFileChooser();
  int returnVal=fc.showOpenDialog(null);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    File file=fc.getSelectedFile();
    try {
      InputStreamProvider ip=new InputStreamProvider();
      InputStream stream=ip.getInputStream(file);
      BufferedReader in=new BufferedReader(new InputStreamReader(stream));
      StringBuffer xml=new StringBuffer();
      String str;
      while ((str=in.readLine()) != null) {
        xml.append(str);
      }
      in.close();
      AFPChain[] afps=AFPChainXMLParser.parseMultiXML(xml.toString());
      AFPChain afpChain=afps[0];
      UserConfiguration config=WebStartMain.getWebStartConfig();
      AtomCache cache=new AtomCache(config.getPdbFilePath(),config.isSplit());
      Atom[] ca1=cache.getAtoms(afpChain.getName1());
      Atom[] ca2=cache.getAtoms(afpChain.getName2());
      AFPChainXMLParser.rebuildAFPChain(afpChain,ca1,ca2);
      Chain c1=ca1[0].getParent().getParent();
      Chain c2=ca2[0].getParent().getParent();
      List<Group> hetatms=c1.getAtomGroups(""String_Node_Str"");
      List<Group> nucs1=c1.getAtomGroups(""String_Node_Str"");
      List<Group> hetatms2=new ArrayList<Group>();
      List<Group> nucs2=new ArrayList<Group>();
      if ((afpChain.getBlockNum() - 1) == 0) {
        hetatms2=c2.getAtomGroups(""String_Node_Str"");
        nucs2=c2.getAtomGroups(""String_Node_Str"");
      }
      StructureAlignmentJmol jmol=StructureAlignmentDisplay.display(afpChain,ca1,ca2,hetatms,nucs1,hetatms2,nucs2);
      DisplayAFP.showAlignmentImage(afpChain,ca1,ca2,jmol);
    }
 catch (    Exception e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + e.getMessage());
    }
  }
}","public void actionPerformed(ActionEvent evt){
  final JFileChooser fc=new JFileChooser();
  int returnVal=fc.showOpenDialog(null);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    File file=fc.getSelectedFile();
    try {
      InputStreamProvider ip=new InputStreamProvider();
      InputStream stream=ip.getInputStream(file);
      BufferedReader in=new BufferedReader(new InputStreamReader(stream));
      StringBuffer xml=new StringBuffer();
      String str;
      while ((str=in.readLine()) != null) {
        xml.append(str);
      }
      in.close();
      AFPChain[] afps=AFPChainXMLParser.parseMultiXML(xml.toString());
      AFPChain afpChain=afps[0];
      UserConfiguration config=WebStartMain.getWebStartConfig();
      AtomCache cache=new AtomCache(config.getPdbFilePath(),config.isSplit());
      Atom[] ca1=cache.getAtoms(afpChain.getName1());
      Atom[] ca2=cache.getAtoms(afpChain.getName2());
      AFPChainXMLParser.rebuildAFPChain(afpChain,ca1,ca2);
      Chain c1=ca1[0].getParent().getParent();
      Chain c2=ca2[0].getParent().getParent();
      StructureAlignmentJmol jmol=StructureAlignmentDisplay.display(afpChain,ca1,ca2);
      DisplayAFP.showAlignmentImage(afpChain,ca1,ca2,jmol);
    }
 catch (    Exception e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + e.getMessage());
    }
  }
}",0.8692063492063492
17137,"public static StructureAlignmentJmol display(AFPChain afpChain,Atom[] ca1,Atom[] ca2,List<Group> hetatms,List<Group> nucs1,List<Group> hetatms2,List<Group> nucs2) throws StructureException {
  Group[] twistedGroups=new Group[ca2.length];
  if (afpChain.getBlockRotationMatrix().length == 0) {
    throw new StructureException(""String_Node_Str"");
  }
  int blockNum=afpChain.getBlockNum();
  int i=-1;
  if (blockNum == 1) {
    Matrix m=afpChain.getBlockRotationMatrix()[0];
    Atom shift=afpChain.getBlockShiftVector()[0];
    shiftAll(afpChain,ca2,hetatms2,nucs2,m,shift,twistedGroups);
  }
 else {
    for (    Atom a : ca2) {
      i++;
      twistedGroups[i]=a.getParent();
    }
    twistedGroups=AFPTwister.twistOptimized(afpChain,ca1,ca2);
    Matrix m=afpChain.getBlockRotationMatrix()[0];
    Atom shift=afpChain.getBlockShiftVector()[0];
    for (    Group g : hetatms2) {
      Calc.rotate(g,m);
      Calc.shift(g,shift);
    }
    for (    Group g : nucs2) {
      Calc.rotate(g,m);
      Calc.shift(g,shift);
    }
  }
  return DisplayAFP.display(afpChain,twistedGroups,ca1,ca2,hetatms,nucs1,hetatms2,nucs2);
}","private static StructureAlignmentJmol display(AFPChain afpChain,Atom[] ca1,Atom[] ca2,List<Group> hetatms,List<Group> nucs1,List<Group> hetatms2,List<Group> nucs2) throws StructureException {
  Group[] twistedGroups=new Group[ca2.length];
  if (afpChain.getBlockRotationMatrix().length == 0) {
    throw new StructureException(""String_Node_Str"");
  }
  int blockNum=afpChain.getBlockNum();
  int i=-1;
  if ((blockNum == 1) || (afpChain.getAlgorithmName().equals(CeCPMain.algorithmName))) {
    Matrix m=afpChain.getBlockRotationMatrix()[0];
    Atom shift=afpChain.getBlockShiftVector()[0];
    shiftAll(afpChain,ca2,hetatms2,nucs2,m,shift,twistedGroups);
  }
 else {
    for (    Atom a : ca2) {
      i++;
      twistedGroups[i]=a.getParent();
    }
    twistedGroups=AFPTwister.twistOptimized(afpChain,ca1,ca2);
  }
  return DisplayAFP.display(afpChain,twistedGroups,ca1,ca2,hetatms,nucs1,hetatms2,nucs2);
}",0.8237604320078546
17138,"/** 
 * Note: ca2, hetatoms2 and nucleotides2 should not be rotated. This will be done here...
 */
public static final StructureAlignmentJmol display(AFPChain afpChain,Group[] twistedGroups,Atom[] ca1,Atom[] ca2,List<Group> hetatms,List<Group> nucleotides,List<Group> hetatms2,List<Group> nucleotides2) throws StructureException {
  List<Atom> twistedAs=new ArrayList<Atom>();
  for (  Group g : twistedGroups) {
    if (g == null)     continue;
    if (g.size() < 1)     continue;
    Atom a=g.getAtom(0);
    twistedAs.add(a);
  }
  Atom[] twistedAtoms=(Atom[])twistedAs.toArray(new Atom[twistedAs.size()]);
  Atom[] arr1=getAtomArray(ca1,hetatms,nucleotides);
  Atom[] arr2=getAtomArray(twistedAtoms,hetatms2,nucleotides2);
  if (afpChain.getBlockNum() > 0) {
    if ((hetatms2.size() > 0) || (nucleotides2.size() > 0)) {
      if (afpChain.getBlockRotationMatrix().length > 0) {
        Matrix m1=afpChain.getBlockRotationMatrix()[0];
        Atom vector1=afpChain.getBlockShiftVector()[0];
        for (        Group g : hetatms2) {
          Calc.rotate(g,m1);
          Calc.shift(g,vector1);
        }
        for (        Group g : nucleotides2) {
          Calc.rotate(g,m1);
          Calc.shift(g,vector1);
        }
      }
    }
  }
  String title=afpChain.getAlgorithmName() + ""String_Node_Str"" + afpChain.getVersion()+ ""String_Node_Str""+ afpChain.getName1()+ ""String_Node_Str""+ afpChain.getName2();
  StructureAlignmentJmol jmol=new StructureAlignmentJmol(afpChain,arr1,arr2);
  jmol.setTitle(title);
  return jmol;
}","/** 
 * Note: ca2, hetatoms2 and nucleotides2 should not be rotated. This will be done here...
 */
public static final StructureAlignmentJmol display(AFPChain afpChain,Group[] twistedGroups,Atom[] ca1,Atom[] ca2,List<Group> hetatms,List<Group> nucleotides,List<Group> hetatms2,List<Group> nucleotides2) throws StructureException {
  List<Atom> twistedAs=new ArrayList<Atom>();
  for (  Group g : twistedGroups) {
    if (g == null)     continue;
    if (g.size() < 1)     continue;
    Atom a=g.getAtom(0);
    twistedAs.add(a);
  }
  Atom[] twistedAtoms=(Atom[])twistedAs.toArray(new Atom[twistedAs.size()]);
  Atom[] arr1=getAtomArray(ca1,hetatms,nucleotides);
  Atom[] arr2=getAtomArray(twistedAtoms,hetatms2,nucleotides2);
  String title=afpChain.getAlgorithmName() + ""String_Node_Str"" + afpChain.getVersion()+ ""String_Node_Str""+ afpChain.getName1()+ ""String_Node_Str""+ afpChain.getName2();
  StructureAlignmentJmol jmol=new StructureAlignmentJmol(afpChain,arr1,arr2);
  jmol.setTitle(title);
  return jmol;
}",0.795758051846033
17139,"private static final List<Chain> getAlignedModel(Atom[] ca){
  List<Chain> model=new ArrayList<Chain>();
  for (  Atom a : ca) {
    Group g=a.getParent();
    Chain parentC=g.getParent();
    Chain newChain=null;
    for (    Chain c : model) {
      if (c.getName().equals(parentC.getName())) {
        newChain=c;
        break;
      }
    }
    if (newChain == null) {
      newChain=new ChainImpl();
      newChain.setName(parentC.getName());
      model.add(newChain);
    }
    newChain.addGroup(g);
  }
  return model;
}","/** 
 * get an artifical List of chains containing the Atoms and groups. Does NOT rotate anything.
 * @param ca1
 * @param ca2
 * @return
 * @throws StructureException
 */
private static final List<Chain> getAlignedModel(Atom[] ca){
  List<Chain> model=new ArrayList<Chain>();
  for (  Atom a : ca) {
    Group g=a.getParent();
    Chain parentC=g.getParent();
    Chain newChain=null;
    for (    Chain c : model) {
      if (c.getName().equals(parentC.getName())) {
        newChain=c;
        break;
      }
    }
    if (newChain == null) {
      newChain=new ChainImpl();
      newChain.setName(parentC.getName());
      model.add(newChain);
    }
    newChain.addGroup(g);
  }
  return model;
}",0.8601626016260162
17140,"public static final Structure getAlignedStructure(Atom[] ca1,Atom[] ca2) throws StructureException {
  Structure s=new StructureImpl();
  s.setNmr(true);
  List<Chain> model1=getAlignedModel(ca1);
  List<Chain> model2=getAlignedModel(ca2);
  s.addModel(model1);
  s.addModel(model2);
  return s;
}","/** 
 * get an artifical Structure containing both chains. Does NOT rotate anything
 * @param ca1
 * @param ca2
 * @return
 * @throws StructureException
 */
public static final Structure getAlignedStructure(Atom[] ca1,Atom[] ca2) throws StructureException {
  Structure s=new StructureImpl();
  s.setNmr(true);
  List<Chain> model1=getAlignedModel(ca1);
  List<Chain> model2=getAlignedModel(ca2);
  s.addModel(model1);
  s.addModel(model2);
  return s;
}",0.7909454061251664
17141,"private static StructureAlignmentJmol display(AFPChain afpChain,Atom[] ca1,Atom[] ca2,List<Group> hetatms,List<Group> nucs1,List<Group> hetatms2,List<Group> nucs2) throws StructureException {
  Group[] twistedGroups=new Group[ca2.length];
  if (afpChain.getBlockRotationMatrix().length == 0) {
    throw new StructureException(""String_Node_Str"");
  }
  int blockNum=afpChain.getBlockNum();
  int i=-1;
  if ((blockNum == 1) || (afpChain.getAlgorithmName().equals(CeCPMain.algorithmName))) {
    Matrix m=afpChain.getBlockRotationMatrix()[0];
    Atom shift=afpChain.getBlockShiftVector()[0];
    shiftAll(afpChain,ca2,hetatms2,nucs2,m,shift,twistedGroups);
  }
 else {
    for (    Atom a : ca2) {
      i++;
      twistedGroups[i]=a.getParent();
    }
    twistedGroups=AFPTwister.twistOptimized(afpChain,ca1,ca2);
  }
  return DisplayAFP.display(afpChain,twistedGroups,ca1,ca2,hetatms,nucs1,hetatms2,nucs2);
}","/** 
 * Display the alignment
 * @param afpChain
 * @param ca1
 * @param ca2
 * @return
 * @throws StructureException
 */
public static StructureAlignmentJmol display(AFPChain afpChain,Atom[] ca1,Atom[] ca2) throws StructureException {
  if (ca1.length < 1 || ca2.length < 1) {
    throw new StructureException(""String_Node_Str"" + ca1.length + ""String_Node_Str""+ ca2.length);
  }
  Group[] twistedGroups=prepareGroupsForDisplay(afpChain,ca1,ca2);
  List<Group> hetatms=new ArrayList<Group>();
  List<Group> nucs1=new ArrayList<Group>();
  Group g1=ca1[0].getParent();
  Chain c1=null;
  if (g1 != null) {
    c1=g1.getParent();
    if (c1 != null) {
      hetatms=c1.getAtomGroups(""String_Node_Str"");
      ;
      nucs1=c1.getAtomGroups(""String_Node_Str"");
    }
  }
  List<Group> hetatms2=new ArrayList<Group>();
  List<Group> nucs2=new ArrayList<Group>();
  Group g2=ca2[0].getParent();
  Chain c2=null;
  if (g2 != null) {
    c2=g2.getParent();
    if (c2 != null) {
      hetatms2=c2.getAtomGroups(""String_Node_Str"");
      nucs2=c2.getAtomGroups(""String_Node_Str"");
    }
  }
  return DisplayAFP.display(afpChain,twistedGroups,ca1,ca2,hetatms,nucs1,hetatms2,nucs2);
}",0.1717026378896882
17142,"private AFPChain convert(AlignmentAlgorithm aligner,Atom[] ca1,Atom[] ca2,AlignmentPair aligPair) throws StructureException {
  AFPChain afpChain=new AFPChain();
  int ca1Length=ca1.length;
  int ca2Length=ca2.length;
  afpChain.setAlignScore(aligPair.getScore());
  int nAtom=0;
  int nGaps=0;
  List<String> labels=aligPair.getLabels();
  if (!(labels.size() == 2)) {
    throw new StructureException(""String_Node_Str"" + labels.size());
  }
  SymbolList symb1=aligPair.symbolListForLabel(labels.get(0));
  SymbolList symb2=aligPair.symbolListForLabel(labels.get(1));
  int queryEnd=aligPair.getQueryEnd();
  int queryStart=aligPair.getQueryStart();
  int subjectEnd=aligPair.getSubjectEnd();
  int subjectStart=aligPair.getSubjectStart();
  List<Alphabet> alphas=new ArrayList<Alphabet>();
  alphas.add(symb1.getAlphabet());
  Symbol gapSymbol=AlphabetManager.getGapSymbol(alphas);
  int lcmp=aligPair.getQueryLength() - 1;
  Atom[] strBuf1=new Atom[lcmp];
  Atom[] strBuf2=new Atom[lcmp];
  int pos1=queryStart - 2;
  int pos2=subjectStart - 2;
  char[] alnseq1=new char[ca1Length + ca2Length + 1];
  char[] alnseq2=new char[ca1Length + ca2Length + 1];
  char[] alnsymb=new char[ca1Length + ca2Length + 1];
  int nrIdent=0;
  int nrSim=0;
  int pos=0;
  int[] align_se1=new int[lcmp];
  int[] align_se2=new int[lcmp];
  int aligLength=0;
  for (int ia=0; ia < Math.min(queryEnd - queryStart,subjectEnd - subjectStart) + 1; ia++) {
    aligLength++;
    Symbol s1=symb1.symbolAt(ia + queryStart);
    Symbol s2=symb2.symbolAt(ia + subjectStart);
    if (!s1.equals(gapSymbol))     pos1++;
    if (!s2.equals(gapSymbol))     pos2++;
    if ((!s1.equals(gapSymbol)) && (!s2.equals(gapSymbol))) {
      strBuf1[nAtom]=ca1[pos1];
      strBuf2[nAtom]=ca2[pos2];
      char l1=getOneLetter(ca1[pos1].getParent());
      char l2=getOneLetter(ca2[pos2].getParent());
      alnseq1[ia]=Character.toUpperCase(l1);
      alnseq2[ia]=Character.toUpperCase(l2);
      alnsymb[ia]=' ';
      if (l1 == l2) {
        nrIdent++;
        nrSim++;
        alnsymb[ia]='|';
      }
 else       if (AFPAlignmentDisplay.aaScore(l1,l2) > 0) {
        nrSim++;
        alnsymb[ia]=':';
      }
      align_se1[ia]=pos1;
      align_se2[ia]=pos2;
      pos++;
      nAtom++;
    }
 else {
      nGaps++;
      alnsymb[ia]=' ';
      align_se1[ia]=-1;
      align_se2[ia]=-1;
      if (s1.equals(gapSymbol)) {
        alnseq1[ia]='-';
      }
 else {
        char l1=getOneLetter(ca1[pos1].getParent());
        alnseq1[ia]=Character.toUpperCase(l1);
        align_se1[ia]=pos1;
      }
      if (s2.equals(gapSymbol)) {
        alnseq2[ia]='-';
      }
 else {
        char l2=getOneLetter(ca2[pos2].getParent());
        alnseq2[ia]=Character.toUpperCase(l2);
        align_se2[ia]=pos2;
      }
    }
  }
  afpChain.setGapLen(nGaps);
  afpChain.setAlnseq1(alnseq1);
  afpChain.setAlnseq2(alnseq2);
  afpChain.setAlnsymb(alnsymb);
  afpChain.setIdentity(nrIdent * 1.0 / pos);
  afpChain.setSimilarity(nrSim * 1.0 / pos);
  afpChain.setAlnLength(aligLength);
  afpChain.setOptLength(aligLength);
  int[] optLen=new int[]{nAtom};
  afpChain.setOptLen(optLen);
  if (nAtom < 4)   return afpChain;
  CeParameters params=new CeParameters();
  CECalculator cecalc=new CECalculator(params);
  double rmsd=cecalc.calc_rmsd(strBuf1,strBuf2,nAtom,true,false);
  afpChain.setBlockRmsd(new double[]{rmsd});
  afpChain.setOptRmsd(new double[]{rmsd});
  afpChain.setTotalRmsdOpt(rmsd);
  afpChain.setChainRmsd(rmsd);
  cecalc.setnAtom(nAtom);
  afpChain.setAlnbeg1(queryStart - 1);
  afpChain.setAlnbeg2(subjectStart - 1);
  cecalc.setAlign_se1(align_se1);
  cecalc.setAlign_se2(align_se2);
  cecalc.setLcmp(aligLength);
  cecalc.convertAfpChain(afpChain,ca1,ca2);
  afpChain.setAlgorithmName(algorithmName);
  afpChain.setVersion(version);
  return afpChain;
}","private AFPChain convert(AlignmentAlgorithm aligner,Atom[] ca1,Atom[] ca2,AlignmentPair aligPair) throws StructureException {
  AFPChain afpChain=new AFPChain();
  int ca1Length=ca1.length;
  int ca2Length=ca2.length;
  afpChain.setAlignScore(aligPair.getScore());
  int nAtom=0;
  int nGaps=0;
  List<String> labels=aligPair.getLabels();
  if (!(labels.size() == 2)) {
    throw new StructureException(""String_Node_Str"" + labels.size());
  }
  SymbolList symb1=aligPair.symbolListForLabel(labels.get(0));
  SymbolList symb2=aligPair.symbolListForLabel(labels.get(1));
  int queryEnd=aligPair.getQueryEnd();
  int queryStart=aligPair.getQueryStart();
  int subjectEnd=aligPair.getSubjectEnd();
  int subjectStart=aligPair.getSubjectStart();
  List<Alphabet> alphas=new ArrayList<Alphabet>();
  alphas.add(symb1.getAlphabet());
  Symbol gapSymbol=AlphabetManager.getGapSymbol(alphas);
  int lcmp=aligPair.getQueryLength() - 1;
  Atom[] strBuf1=new Atom[lcmp];
  Atom[] strBuf2=new Atom[lcmp];
  int pos1=queryStart - 2;
  int pos2=subjectStart - 2;
  char[] alnseq1=new char[ca1Length + ca2Length + 1];
  char[] alnseq2=new char[ca1Length + ca2Length + 1];
  char[] alnsymb=new char[ca1Length + ca2Length + 1];
  int nrIdent=0;
  int nrSim=0;
  int pos=0;
  int[] align_se1=new int[lcmp];
  int[] align_se2=new int[lcmp];
  int aligLength=0;
  for (int ia=0; ia < Math.min(queryEnd - queryStart,subjectEnd - subjectStart); ia++) {
    aligLength++;
    Symbol s1=symb1.symbolAt(ia + queryStart);
    Symbol s2=symb2.symbolAt(ia + subjectStart);
    if (!s1.equals(gapSymbol))     pos1++;
    if (!s2.equals(gapSymbol))     pos2++;
    if ((!s1.equals(gapSymbol)) && (!s2.equals(gapSymbol))) {
      System.out.println(ia + ""String_Node_Str"" + queryStart+ ""String_Node_Str""+ subjectStart+ ""String_Node_Str""+ s1.getName()+ ""String_Node_Str""+ s2.getName()+ pos1+ ""String_Node_Str""+ ca1.length);
      strBuf1[nAtom]=ca1[pos1];
      strBuf2[nAtom]=ca2[pos2];
      char l1=getOneLetter(ca1[pos1].getParent());
      char l2=getOneLetter(ca2[pos2].getParent());
      alnseq1[ia]=Character.toUpperCase(l1);
      alnseq2[ia]=Character.toUpperCase(l2);
      alnsymb[ia]=' ';
      if (l1 == l2) {
        nrIdent++;
        nrSim++;
        alnsymb[ia]='|';
      }
 else       if (AFPAlignmentDisplay.aaScore(l1,l2) > 0) {
        nrSim++;
        alnsymb[ia]=':';
      }
      align_se1[ia]=pos1;
      align_se2[ia]=pos2;
      pos++;
      nAtom++;
    }
 else {
      nGaps++;
      alnsymb[ia]=' ';
      align_se1[ia]=-1;
      align_se2[ia]=-1;
      if (s1.equals(gapSymbol)) {
        alnseq1[ia]='-';
      }
 else {
        char l1=getOneLetter(ca1[pos1].getParent());
        alnseq1[ia]=Character.toUpperCase(l1);
        align_se1[ia]=pos1;
      }
      if (s2.equals(gapSymbol)) {
        alnseq2[ia]='-';
      }
 else {
        char l2=getOneLetter(ca2[pos2].getParent());
        alnseq2[ia]=Character.toUpperCase(l2);
        align_se2[ia]=pos2;
      }
    }
  }
  afpChain.setGapLen(nGaps);
  afpChain.setAlnseq1(alnseq1);
  afpChain.setAlnseq2(alnseq2);
  afpChain.setAlnsymb(alnsymb);
  afpChain.setIdentity(nrIdent * 1.0 / pos);
  afpChain.setSimilarity(nrSim * 1.0 / pos);
  afpChain.setAlnLength(aligLength);
  afpChain.setOptLength(aligLength);
  int[] optLen=new int[]{nAtom};
  afpChain.setOptLen(optLen);
  if (nAtom < 4)   return afpChain;
  CeParameters params=new CeParameters();
  CECalculator cecalc=new CECalculator(params);
  double rmsd=cecalc.calc_rmsd(strBuf1,strBuf2,nAtom,true,false);
  afpChain.setBlockRmsd(new double[]{rmsd});
  afpChain.setOptRmsd(new double[]{rmsd});
  afpChain.setTotalRmsdOpt(rmsd);
  afpChain.setChainRmsd(rmsd);
  cecalc.setnAtom(nAtom);
  afpChain.setAlnbeg1(queryStart - 1);
  afpChain.setAlnbeg2(subjectStart - 1);
  cecalc.setAlign_se1(align_se1);
  cecalc.setAlign_se2(align_se2);
  cecalc.setLcmp(aligLength);
  cecalc.convertAfpChain(afpChain,ca1,ca2);
  afpChain.setAlgorithmName(algorithmName);
  afpChain.setVersion(version);
  return afpChain;
}",0.9741368327175436
17143,"public void run(){
  StructureAlignment algorithm=parent.getStructureAlignment();
  try {
    Atom[] ca1=StructureTools.getAtomCAArray(structure1);
    Atom[] ca2=StructureTools.getAtomCAArray(structure2);
    AFPChain afpChain=algorithm.align(ca1,ca2);
    afpChain.setName1(name1);
    afpChain.setName2(name2);
    List<Group> hetatms=structure1.getChain(0).getAtomGroups(""String_Node_Str"");
    List<Group> nucs=structure1.getChain(0).getAtomGroups(""String_Node_Str"");
    List<Group> hetatms2=structure2.getChain(0).getAtomGroups(""String_Node_Str"");
    List<Group> nucs2=structure2.getChain(0).getAtomGroups(""String_Node_Str"");
    StructureAlignmentJmol jmol;
    if (afpChain.getAlgorithmName().startsWith(""String_Node_Str"")) {
      Matrix m=afpChain.getBlockRotationMatrix()[0];
      Atom s=afpChain.getBlockShiftVector()[0];
      Group[] twistedGroups=new Group[ca2.length];
      int i=-1;
      for (      Atom a : ca2) {
        i++;
        Group g=a.getParent();
        twistedGroups[i]=g;
        Calc.rotate(g,m);
        Calc.shift(g,s);
      }
      jmol=DisplayAFP.display(afpChain,twistedGroups,ca1,ca2,hetatms,nucs,hetatms2,nucs2);
    }
 else {
      jmol=StructureAlignmentDisplay.display(afpChain,ca1,ca2,hetatms,nucs,hetatms2,nucs2);
    }
    String title=jmol.getTitle();
    ConfigStrucAligParams params=algorithm.getParameters();
    if (params != null)     title+=""String_Node_Str"" + algorithm.getParameters().toString();
    jmol.setTitle(title);
    DisplayAFP.showAlignmentImage(afpChain,ca1,ca2,jmol);
    System.out.println(afpChain.toCE(ca1,ca2));
  }
 catch (  StructureException e) {
    e.printStackTrace();
    logger.warning(e.getMessage());
  }
  parent.notifyCalcFinished();
}","public void run(){
  StructureAlignment algorithm=parent.getStructureAlignment();
  try {
    Atom[] ca1=StructureTools.getAtomCAArray(structure1);
    Atom[] ca2=StructureTools.getAtomCAArray(structure2);
    AFPChain afpChain=algorithm.align(ca1,ca2);
    afpChain.setName1(name1);
    afpChain.setName2(name2);
    List<Group> hetatms=structure1.getChain(0).getAtomGroups(""String_Node_Str"");
    List<Group> nucs=structure1.getChain(0).getAtomGroups(""String_Node_Str"");
    List<Group> hetatms2=structure2.getChain(0).getAtomGroups(""String_Node_Str"");
    List<Group> nucs2=structure2.getChain(0).getAtomGroups(""String_Node_Str"");
    StructureAlignmentJmol jmol;
    jmol=StructureAlignmentDisplay.display(afpChain,ca1,ca2,hetatms,nucs,hetatms2,nucs2);
    String title=jmol.getTitle();
    ConfigStrucAligParams params=algorithm.getParameters();
    if (params != null)     title+=""String_Node_Str"" + algorithm.getParameters().toString();
    jmol.setTitle(title);
    DisplayAFP.showAlignmentImage(afpChain,ca1,ca2,jmol);
    System.out.println(afpChain.toCE(ca1,ca2));
  }
 catch (  StructureException e) {
    e.printStackTrace();
    logger.warning(e.getMessage());
  }
  parent.notifyCalcFinished();
}",0.7935967302452316
17144,"/** 
 * Get the Version information for this Algorithm.
 * @return
 */
public String getVersion();","/** 
 * Get the Version information for this Algorithm.
 * @return the version of the algorithm
 */
public String getVersion();",0.8711111111111111
17145,"/** 
 * Returns some documentation on the command line arguments for this algorithm.
 * @return
 */
public String printHelp();","/** 
 * Returns some documentation on the command line arguments for this algorithm.
 * @return the help string
 */
public String printHelp();",0.9402985074626866
17146,"/** 
 * Get the name of the Algorithm
 * @return
 */
public String getAlgorithmName();","/** 
 * Get the name of the Algorithm
 * @return the name of the algorithm
 */
public String getAlgorithmName();",0.8686868686868687
17147,"/** 
 * run an alignment and also send a bean containing the parameters.
 * @param ca1
 * @param ca2
 * @param params
 * @return
 * @throws StructureException
 */
public AFPChain align(Atom[] ca1,Atom[] ca2,Object params) throws StructureException ;","/** 
 * run an alignment and also send a bean containing the parameters.
 * @param ca1
 * @param ca2
 * @param params
 * @return the afpChain object that contains the alignment.
 * @throws StructureException
 */
public AFPChain align(Atom[] ca1,Atom[] ca2,Object params) throws StructureException ;",0.9104204753199268
17148,"public static double getTMScore(AFPChain align,Atom[] ca1,Atom[] ca2) throws StructureException {
  Atom[] ca1aligned=new Atom[align.getOptLength()];
  Atom[] ca2aligned=new Atom[align.getOptLength()];
  int pos=0;
  int[] blockLens=align.getOptLen();
  int[][][] optAln=align.getOptAln();
  assert(align.getBlockNum() == optAln.length);
  for (int block=0; block < optAln.length; block++) {
    assert(blockLens[block] == optAln[block][0].length);
    for (int i=0; i < optAln[block][0].length; i++) {
      ca1aligned[pos]=ca1[optAln[block][0][i]];
      ca2aligned[pos]=(Atom)ca2[optAln[block][1][i]].clone();
      pos++;
    }
  }
  SVDSuperimposer svd=new SVDSuperimposer(ca1aligned,ca2aligned);
  Matrix matrix=svd.getRotation();
  Atom shift=svd.getTranslation();
  for (  Atom a : ca2aligned) {
    Calc.rotate(a,matrix);
    Calc.shift(a,shift);
  }
  return SVDSuperimposer.getTMScore(ca1aligned,ca2aligned,ca1.length,ca2.length);
}","public static double getTMScore(AFPChain align,Atom[] ca1,Atom[] ca2) throws StructureException {
  Atom[] ca1aligned=new Atom[align.getOptLength()];
  Atom[] ca2aligned=new Atom[align.getOptLength()];
  int pos=0;
  int[] blockLens=align.getOptLen();
  int[][][] optAln=align.getOptAln();
  assert(align.getBlockNum() <= optAln.length);
  for (int block=0; block < align.getBlockNum(); block++) {
    assert(blockLens[block] <= optAln[block][0].length);
    for (int i=0; i < blockLens[block]; i++) {
      ca1aligned[pos]=ca1[optAln[block][0][i]];
      ca2aligned[pos]=(Atom)ca2[optAln[block][1][i]].clone();
      pos++;
    }
  }
  SVDSuperimposer svd=new SVDSuperimposer(ca1aligned,ca2aligned);
  Matrix matrix=svd.getRotation();
  Atom shift=svd.getTranslation();
  for (  Atom a : ca2aligned) {
    Calc.rotate(a,matrix);
    Calc.shift(a,shift);
  }
  return SVDSuperimposer.getTMScore(ca1aligned,ca2aligned,ca1.length,ca2.length);
}",0.960212201591512
17149,"public static void main(String[] args){
  int maxLength=1000;
  String inFile=null;
  String outFile=null;
  MultipleAlignmentParser parser;
  StructureAlignment aligner;
  String usage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  if (args.length < 2) {
    System.err.println(""String_Node_Str"");
    System.err.println(usage);
    System.exit(1);
    return;
  }
  int arg=1;
  String alignerName=args[arg];
  if (alignerName.matches(""String_Node_Str"")) {
    CeMain ceMain;
    try {
      ceMain=(CeMain)StructureAlignmentFactory.getAlgorithm(CeMain.algorithmName);
      if (alignerName.matches(""String_Node_Str"")) {
        ((CeParameters)ceMain.getParameters()).setCheckCircular(true);
      }
      ((CeParameters)ceMain.getParameters()).setMaxGapSize(0);
    }
 catch (    StructureException e) {
      e.printStackTrace();
      System.exit(1);
      return;
    }
    aligner=ceMain;
  }
 else {
    System.err.println(""String_Node_Str"" + alignerName + ""String_Node_Str"");
    System.err.println(usage);
    System.exit(1);
    return;
  }
  arg++;
  if (args.length > arg && !args[arg].equals(""String_Node_Str"")) {
    inFile=args[arg];
  }
  arg++;
  if (args.length > arg && !args[arg].equals(""String_Node_Str"")) {
    outFile=args[arg];
  }
  arg++;
  if (args.length > arg) {
    try {
      maxLength=Integer.parseInt(args[arg]);
    }
 catch (    NumberFormatException e) {
      System.err.println(""String_Node_Str"" + args[arg] + ""String_Node_Str"");
      System.err.println(usage);
      System.exit(1);
      return;
    }
  }
  arg++;
  if (args.length > arg) {
    System.err.println(""String_Node_Str"");
    System.err.println(usage);
    System.exit(1);
    return;
  }
  arg++;
  String fileType=args[0];
  if (fileType.equalsIgnoreCase(""String_Node_Str"")) {
    if (inFile == null)     inFile=""String_Node_Str"";
    parser=new RIPCParser(inFile);
  }
 else   if (fileType.equalsIgnoreCase(""String_Node_Str"")) {
    if (inFile == null)     inFile=""String_Node_Str"";
    parser=new CPDBParser(inFile);
  }
 else {
    System.err.println(""String_Node_Str"");
    System.err.println(usage);
    System.exit(1);
    return;
  }
  Writer out;
  out=new BufferedWriter(new OutputStreamWriter(System.out));
  if (outFile != null && !(outFile.equals(""String_Node_Str"") || outFile.equals(""String_Node_Str""))) {
    try {
      out=new BufferedWriter(new FileWriter(outFile));
    }
 catch (    IOException e1) {
      e1.printStackTrace();
      System.err.println(""String_Node_Str"" + outFile);
      System.exit(1);
      return;
    }
  }
  AlignBenchmark bm=new AlignBenchmark(""String_Node_Str"",aligner,maxLength);
  bm.runBenchmark(out,parser);
}","public static void main(String[] args){
  int maxLength=1000;
  String inFile=null;
  String outFile=null;
  MultipleAlignmentParser parser;
  StructureAlignment aligner;
  String usage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  if (args.length < 2) {
    System.err.println(""String_Node_Str"");
    System.err.println(usage);
    System.exit(1);
    return;
  }
  int arg=1;
  String alignerName=args[arg].toUpperCase();
  if (alignerName.substring(0,2).equals(""String_Node_Str"")) {
    CeMain ceMain;
    try {
      ceMain=(CeMain)StructureAlignmentFactory.getAlgorithm(CeMain.algorithmName);
      CeParameters param=(CeParameters)ceMain.getParameters();
      if (alignerName.equals(""String_Node_Str"")) {
        param.setMaxGapSize(0);
      }
 else       if (alignerName.matches(""String_Node_Str"")) {
        param.setMaxGapSize(0);
        param.setCheckCircular(true);
      }
    }
 catch (    StructureException e) {
      e.printStackTrace();
      System.exit(1);
      return;
    }
    aligner=ceMain;
  }
 else   if (alignerName.equals(""String_Node_Str"")) {
    try {
      aligner=StructureAlignmentFactory.getAlgorithm(SmithWaterman3Daligner.algorithmName);
    }
 catch (    StructureException e) {
      e.printStackTrace();
      System.exit(1);
      return;
    }
  }
 else   if (alignerName.matches(""String_Node_Str"")) {
    try {
      aligner=StructureAlignmentFactory.getAlgorithm(FatCatRigid.algorithmName);
    }
 catch (    StructureException e) {
      e.printStackTrace();
      System.exit(1);
      return;
    }
  }
 else   if (alignerName.matches(""String_Node_Str"")) {
    try {
      aligner=StructureAlignmentFactory.getAlgorithm(FatCatFlexible.algorithmName);
    }
 catch (    StructureException e) {
      e.printStackTrace();
      System.exit(1);
      return;
    }
  }
 else {
    try {
      aligner=StructureAlignmentFactory.getAlgorithm(args[arg]);
    }
 catch (    StructureException e) {
      e.printStackTrace();
      System.exit(1);
      return;
    }
  }
  arg++;
  if (args.length > arg && !args[arg].equals(""String_Node_Str"")) {
    inFile=args[arg];
  }
  arg++;
  if (args.length > arg && !args[arg].equals(""String_Node_Str"")) {
    outFile=args[arg];
  }
  arg++;
  if (args.length > arg) {
    try {
      maxLength=Integer.parseInt(args[arg]);
    }
 catch (    NumberFormatException e) {
      System.err.println(""String_Node_Str"" + args[arg] + ""String_Node_Str"");
      System.err.println(usage);
      System.exit(1);
      return;
    }
  }
  arg++;
  if (args.length > arg) {
    System.err.println(""String_Node_Str"");
    System.err.println(usage);
    System.exit(1);
    return;
  }
  arg++;
  String fileType=args[0];
  if (fileType.equalsIgnoreCase(""String_Node_Str"")) {
    if (inFile == null)     inFile=""String_Node_Str"";
    parser=new RIPCParser(inFile);
  }
 else   if (fileType.equalsIgnoreCase(""String_Node_Str"")) {
    if (inFile == null)     inFile=""String_Node_Str"";
    parser=new CPDBParser(inFile);
  }
 else {
    System.err.println(""String_Node_Str"");
    System.err.println(usage);
    System.exit(1);
    return;
  }
  Writer out;
  out=new BufferedWriter(new OutputStreamWriter(System.out));
  if (outFile != null && !(outFile.equals(""String_Node_Str"") || outFile.equals(""String_Node_Str""))) {
    try {
      out=new BufferedWriter(new FileWriter(outFile));
    }
 catch (    IOException e1) {
      e1.printStackTrace();
      System.err.println(""String_Node_Str"" + outFile);
      System.exit(1);
      return;
    }
  }
  AlignBenchmark bm=new AlignBenchmark(""String_Node_Str"",aligner,maxLength);
  bm.runBenchmark(out,parser);
}",0.7388535031847133
17150,"/** 
 * Converts the PDB coordinates stored locally (accessible via   {@link #getAlignmentMatrix()}) into internal residue numbers. <p> The conversion can be run for just a subset of the MultipleAlignment by  specifying the appropriate protein indices.
 * @param structures A list of structures for proteins in this MultipleAlignment.Used to map PDB residue numbers to internal coordinates.
 * @param proteinIndices For each entry in structures, specifies what alignmentprotein each structure corresponds to. This should be the same length as structures, and should specify the row index of each structure into the  {@link #getAlignmentResidues()} matrix.
 * @return A matrix with a row for each item in structures. Columns correspondto aligned residues between the specified proteins.
 * @throws StructureException If a pdb number does not appear in the corresponding Structure.
 */
public int[][] getAlignmentMatrix(int[] proteinIndices,List<Atom[]> structures) throws StructureException {
  if (proteinIndices.length != structures.size()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int[][] alignMat=new int[proteinIndices.length][];
  for (int prot=0; prot < proteinIndices.length; prot++) {
    int protIndex=proteinIndices[prot];
    alignMat[prot]=new int[residues[protIndex].length];
    Atom[] struct=structures.get(protIndex);
    int atomIndexGuess=0;
    for (int res=0; res < residues[protIndex].length; res++) {
      int groupNr=findGroup(struct,residues[protIndex][res],atomIndexGuess);
      if (groupNr < 0) {
        throw new StructureException(String.format(""String_Node_Str"",residues[protIndex][res].toString(),protIndex));
      }
      alignMat[prot][res]=groupNr;
    }
  }
  return alignMat;
}","/** 
 * Converts the PDB coordinates stored locally (accessible via   {@link #getAlignmentMatrix()}) into internal residue numbers. <p> The conversion can be run for just a subset of the MultipleAlignment by  specifying the appropriate protein indices.
 * @param structures A list of structures for proteins in this MultipleAlignment.Used to map PDB residue numbers to internal coordinates.
 * @param proteinIndices For each entry in structures, specifies what alignmentprotein each structure corresponds to. This should be the same length as structures, and should specify the row index of each structure into the  {@link #getAlignmentResidues()} matrix.
 * @return A matrix with a row for each item in structures. Columns correspondto aligned residues between the specified proteins.
 * @throws StructureException If a pdb number does not appear in the corresponding Structure.
 */
public int[][] getAlignmentMatrix(int[] proteinIndices,List<Atom[]> structures) throws StructureException {
  if (proteinIndices.length != structures.size()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int[][] alignMat=new int[proteinIndices.length][];
  for (int prot=0; prot < proteinIndices.length; prot++) {
    int protIndex=proteinIndices[prot];
    alignMat[prot]=new int[residues[protIndex].length];
    Atom[] struct=structures.get(protIndex);
    int atomIndexGuess=0;
    for (int res=0; res < residues[protIndex].length; res++) {
      int groupNr=findGroup(struct,residues[protIndex][res],atomIndexGuess);
      if (groupNr < 0) {
        throw new StructureException(String.format(""String_Node_Str"",residues[protIndex][res].toString(),struct[0].getParent().getParent().getParent().getPDBCode()));
      }
      alignMat[prot][res]=groupNr;
    }
  }
  return alignMat;
}",0.9810359467874328
17151,"@Override public double calculate(MultipleAlignment reference,AFPChain align,Atom[] ca1,Atom[] ca2){
  List<Atom[]> structures=new ArrayList<Atom[]>(2);
  structures.add(ca1);
  structures.add(ca2);
  int[][] refAln;
  try {
    refAln=reference.getAlignmentMatrix(structures);
  }
 catch (  StructureException e) {
    e.printStackTrace();
    return Double.NaN;
  }
  int[][][] optAln=align.getOptAln();
  HashMap<Integer,Integer> optAlnMap1=new HashMap<Integer,Integer>();
  HashMap<Integer,Integer> optAlnMap2=new HashMap<Integer,Integer>();
  for (int block=0; block < align.getBlockNum(); block++) {
    for (int i=0; i < optAln[block][0].length; i++) {
      optAlnMap1.put(optAln[block][0][i],optAln[block][1][i]);
      optAlnMap2.put(optAln[block][1][i],optAln[block][0][i]);
    }
  }
  int correct=0;
  for (int i=0; i < reference.size(); i++) {
    int ca1ref=refAln[0][i];
    int ca2ref=refAln[1][i];
    if (optAlnMap1.containsKey(ca1ref)) {
      if (Math.abs(optAlnMap1.get(ca1ref).intValue() - ca2ref) <= shift) {
        correct++;
      }
    }
 else     if (optAlnMap2.containsKey(ca2ref)) {
      if (Math.abs(optAlnMap2.get(ca2ref).intValue() - ca1ref) <= shift) {
        correct++;
      }
    }
  }
  return (double)correct / reference.size();
}","@Override public double calculate(MultipleAlignment reference,AFPChain align,Atom[] ca1,Atom[] ca2){
  List<Atom[]> structures=new ArrayList<Atom[]>(2);
  structures.add(ca1);
  structures.add(ca2);
  int[][] refAln;
  try {
    refAln=reference.getAlignmentMatrix(structures);
  }
 catch (  StructureException e) {
    e.printStackTrace();
    return Double.NaN;
  }
  int[][][] optAln=align.getOptAln();
  int[] blockLens=align.getOptLen();
  HashMap<Integer,Integer> optAlnMap1=new HashMap<Integer,Integer>();
  HashMap<Integer,Integer> optAlnMap2=new HashMap<Integer,Integer>();
  for (int block=0; block < align.getBlockNum(); block++) {
    for (int i=0; i < blockLens[block]; i++) {
      optAlnMap1.put(optAln[block][0][i],optAln[block][1][i]);
      optAlnMap2.put(optAln[block][1][i],optAln[block][0][i]);
    }
  }
  int correct=0;
  for (int i=0; i < reference.size(); i++) {
    int ca1ref=refAln[0][i];
    int ca2ref=refAln[1][i];
    if (optAlnMap1.containsKey(ca1ref)) {
      if (Math.abs(optAlnMap1.get(ca1ref).intValue() - ca2ref) <= shift) {
        correct++;
      }
    }
 else     if (optAlnMap2.containsKey(ca2ref)) {
      if (Math.abs(optAlnMap2.get(ca2ref).intValue() - ca1ref) <= shift) {
        correct++;
      }
    }
  }
  return (double)correct / reference.size();
}",0.9743589743589745
17152,"@Override public double calculate(MultipleAlignment reference,AFPChain align,Atom[] ca1,Atom[] ca2){
  List<Atom[]> structures=new ArrayList<Atom[]>(2);
  structures.add(ca1);
  structures.add(ca2);
  int[][] refAln;
  try {
    refAln=reference.getAlignmentMatrix(structures);
  }
 catch (  StructureException e) {
    e.printStackTrace();
    return Double.NaN;
  }
  int[][][] optAln=align.getOptAln();
  HashMap<Integer,Integer> optAlnMap=new HashMap<Integer,Integer>();
  for (int block=0; block < align.getBlockNum(); block++) {
    for (int i=0; i < optAln[block][0].length; i++) {
      optAlnMap.put(optAln[block][0][i],optAln[block][1][i]);
    }
  }
  int correct=0;
  for (int i=0; i < reference.size(); i++) {
    if (optAlnMap.containsKey(refAln[0][i])) {
      if (optAlnMap.get(refAln[0][i]).equals(refAln[1][i])) {
        correct++;
      }
    }
  }
  return 100. * correct / reference.size();
}","@Override public double calculate(MultipleAlignment reference,AFPChain align,Atom[] ca1,Atom[] ca2){
  List<Atom[]> structures=new ArrayList<Atom[]>(2);
  structures.add(ca1);
  structures.add(ca2);
  int[][] refAln;
  try {
    refAln=reference.getAlignmentMatrix(structures);
  }
 catch (  StructureException e) {
    e.printStackTrace();
    return Double.NaN;
  }
  int[][][] optAln=align.getOptAln();
  int[] blockLens=align.getOptLen();
  HashMap<Integer,Integer> optAlnMap=new HashMap<Integer,Integer>();
  for (int block=0; block < align.getBlockNum(); block++) {
    for (int i=0; i < blockLens[block]; i++) {
      optAlnMap.put(optAln[block][0][i],optAln[block][1][i]);
    }
  }
  int correct=0;
  for (int i=0; i < reference.size(); i++) {
    if (optAlnMap.containsKey(refAln[0][i])) {
      if (optAlnMap.get(refAln[0][i]).equals(refAln[1][i])) {
        correct++;
      }
    }
  }
  return 100. * correct / reference.size();
}",0.9644779332615716
17153,"public static void main(String[] args){
  String pdb1=""String_Node_Str"";
  String pdb2=""String_Node_Str"";
  try {
    AtomCache cache=new AtomCache(""String_Node_Str"",true);
    Atom[] ca1=cache.getAtoms(pdb1);
    Atom[] ca2=cache.getAtoms(pdb2);
    CeMain ceMain;
    ceMain=(CeMain)StructureAlignmentFactory.getAlgorithm(CeMain.algorithmName);
    ((CeParameters)ceMain.getParameters()).setMaxGapSize(0);
    AFPChain align=ceMain.align(ca1,ca2);
    System.out.println(align.toCE(ca1,ca2));
    Atom[] ca1aligned=new Atom[align.getOptLength()];
    Atom[] ca2aligned=new Atom[align.getOptLength()];
    int pos=0;
    int[] blockLens=align.getOptLen();
    int[][][] optAln=align.getOptAln();
    for (int block=0; block < optAln.length; block++) {
      assert(blockLens[block] == optAln[block][0].length);
      for (int i=0; i < optAln[block][0].length; i++) {
        ca1aligned[pos]=ca1[optAln[block][0][i]];
        ca2aligned[pos]=(Atom)ca2[optAln[block][1][i]].clone();
        pos++;
      }
    }
    SVDSuperimposer svd=new SVDSuperimposer(ca1aligned,ca2aligned);
    Matrix matrix=svd.getRotation();
    Atom shift=svd.getTranslation();
    for (    Atom a : ca2aligned) {
      Calc.rotate(a,matrix);
      Calc.shift(a,shift);
    }
    System.out.println(SVDSuperimposer.getRMS(ca1aligned,ca2aligned));
    System.out.println(matrix.toString());
    System.out.println(shift.toString());
    PrintWriter pw1=new PrintWriter(new FileWriter(""String_Node_Str""));
    Structure s1=ca1[0].getParent().getParent().getParent();
    pw1.println(s1.toPDB());
    pw1.close();
    PrintWriter pw2=new PrintWriter(new FileWriter(""String_Node_Str""));
    Structure s2=ca2[0].getParent().getParent().getParent();
    pw2.println(s2.toPDB());
    pw2.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  String pdb1=""String_Node_Str"";
  String pdb2=""String_Node_Str"";
  try {
    AtomCache cache=new AtomCache(""String_Node_Str"",true);
    Atom[] ca1=cache.getAtoms(pdb1);
    Atom[] ca2=cache.getAtoms(pdb2);
    CeMain ceMain;
    ceMain=(CeMain)StructureAlignmentFactory.getAlgorithm(CeMain.algorithmName);
    ((CeParameters)ceMain.getParameters()).setMaxGapSize(0);
    AFPChain align=ceMain.align(ca1,ca2);
    System.out.println(align.toCE(ca1,ca2));
    Atom[] ca1aligned=new Atom[align.getOptLength()];
    Atom[] ca2aligned=new Atom[align.getOptLength()];
    int pos=0;
    int[] blockLens=align.getOptLen();
    int[][][] optAln=align.getOptAln();
    for (int block=0; block < optAln.length; block++) {
      assert(blockLens[block] <= optAln[block][0].length);
      for (int i=0; i < blockLens[block]; i++) {
        ca1aligned[pos]=ca1[optAln[block][0][i]];
        ca2aligned[pos]=(Atom)ca2[optAln[block][1][i]].clone();
        pos++;
      }
    }
    SVDSuperimposer svd=new SVDSuperimposer(ca1aligned,ca2aligned);
    Matrix matrix=svd.getRotation();
    Atom shift=svd.getTranslation();
    for (    Atom a : ca2aligned) {
      Calc.rotate(a,matrix);
      Calc.shift(a,shift);
    }
    System.out.println(SVDSuperimposer.getRMS(ca1aligned,ca2aligned));
    System.out.println(matrix.toString());
    System.out.println(shift.toString());
    PrintWriter pw1=new PrintWriter(new FileWriter(""String_Node_Str""));
    Structure s1=ca1[0].getParent().getParent().getParent();
    pw1.println(s1.toPDB());
    pw1.close();
    PrintWriter pw2=new PrintWriter(new FileWriter(""String_Node_Str""));
    Structure s2=ca2[0].getParent().getParent().getParent();
    pw2.println(s2.toPDB());
    pw2.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.991485855534194
17154,"@Override public double calculate(MultipleAlignment reference,AFPChain align,Atom[] ca1,Atom[] ca2){
  Atom[] ca1aligned=new Atom[align.getOptLength()];
  Atom[] ca2aligned=new Atom[align.getOptLength()];
  int pos=0;
  int[] blockLens=align.getOptLen();
  int[][][] optAln=align.getOptAln();
  assert(align.getBlockNum() == optAln.length);
  for (int block=0; block < optAln.length; block++) {
    assert(blockLens[block] == optAln[block][0].length);
    for (int i=0; i < optAln[block][0].length; i++) {
      ca1aligned[pos]=ca1[optAln[block][0][i]];
      ca2aligned[pos]=(Atom)ca2[optAln[block][1][i]].clone();
      pos++;
    }
  }
  try {
    SVDSuperimposer svd=new SVDSuperimposer(ca1aligned,ca2aligned);
    Matrix matrix=svd.getRotation();
    Atom shift=svd.getTranslation();
    for (    Atom a : ca2aligned) {
      Calc.rotate(a,matrix);
      Calc.shift(a,shift);
    }
    return SVDSuperimposer.getRMS(ca1aligned,ca2aligned);
  }
 catch (  StructureException e) {
    e.printStackTrace();
    return Double.NaN;
  }
}","@Override public double calculate(MultipleAlignment reference,AFPChain align,Atom[] ca1,Atom[] ca2){
  Atom[] ca1aligned=new Atom[align.getOptLength()];
  Atom[] ca2aligned=new Atom[align.getOptLength()];
  int pos=0;
  int[] blockLens=align.getOptLen();
  int[][][] optAln=align.getOptAln();
  assert(align.getBlockNum() <= optAln.length);
  for (int block=0; block < align.getBlockNum(); block++) {
    assert(blockLens[block] <= optAln[block][0].length);
    for (int i=0; i < blockLens[block]; i++) {
      ca1aligned[pos]=ca1[optAln[block][0][i]];
      ca2aligned[pos]=(Atom)ca2[optAln[block][1][i]].clone();
      pos++;
    }
  }
  try {
    SVDSuperimposer svd=new SVDSuperimposer(ca1aligned,ca2aligned);
    Matrix matrix=svd.getRotation();
    Atom shift=svd.getTranslation();
    for (    Atom a : ca2aligned) {
      Calc.rotate(a,matrix);
      Calc.shift(a,shift);
    }
    return SVDSuperimposer.getRMS(ca1aligned,ca2aligned);
  }
 catch (  StructureException e) {
    e.printStackTrace();
    return Double.NaN;
  }
}",0.9637856108160308
17155,"/** 
 * @throws BioException
 */
private void init() throws BioException {
  similars=0;
  identicals=0;
  nGapsQ=0;
  nGapsS=0;
  for (int i=0; i < Math.min(queryEnd - queryStart,subjectEnd - subjectStart) + 1; i++) {
    Symbol a=query.symbolAt(i + queryStart);
    Symbol b=subject.symbolAt(i + subjectStart);
    boolean gap=false;
    if (a.equals(b))     identicals++;
    if (a.equals(query.getAlphabet().getGapSymbol())) {
      nGapsQ++;
      gap=true;
    }
    if (b.equals(subject.getAlphabet().getGapSymbol())) {
      nGapsS++;
      gap=true;
    }
    if (!gap && subMatrix != null && subMatrix.getValueAt(a,b) > 0)     similars++;
  }
}","/** 
 * @throws BioException
 */
private void init() throws BioException {
  similars=0;
  identicals=0;
  nGapsQ=0;
  nGapsS=0;
  for (int i=0; i < Math.min(queryEnd - queryStart,subjectEnd - subjectStart); i++) {
    Symbol a=query.symbolAt(i + queryStart);
    Symbol b=subject.symbolAt(i + subjectStart);
    boolean gap=false;
    if (a.equals(b))     identicals++;
    if (a.equals(query.getAlphabet().getGapSymbol())) {
      nGapsQ++;
      gap=true;
    }
    if (b.equals(subject.getAlphabet().getGapSymbol())) {
      nGapsS++;
      gap=true;
    }
    if (!gap && subMatrix != null && subMatrix.getValueAt(a,b) > 0)     similars++;
  }
}",0.9969325153374232
17156,"@BeforeClass public static void parseSequences(){
  InputStream cdsIs=new ClasspathResource(""String_Node_Str"").getInputStream();
  InputStream pepIs=new ClasspathResource(""String_Node_Str"").getInputStream();
  try {
    FastaReader<DNASequence,NucleotideCompound> dnaReader=new FastaReader<DNASequence,NucleotideCompound>(cdsIs,new GenericFastaHeaderParser<DNASequence,NucleotideCompound>(),new DNASequenceCreator(dnaCs));
    brca2Dna=dnaReader.process().iterator().next();
    FastaReader<ProteinSequence,AminoAcidCompound> pReader=new FastaReader<ProteinSequence,AminoAcidCompound>(pepIs,new GenericFastaHeaderParser<ProteinSequence,AminoAcidCompound>(),new ProteinSequenceCreator(aaCs));
    brca2Pep=pReader.process().iterator().next();
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(""String_Node_Str"");
  }
 finally {
    close(cdsIs);
    close(pepIs);
  }
}","@BeforeClass public static void parseSequences(){
  InputStream cdsIs=new ClasspathResource(""String_Node_Str"").getInputStream();
  InputStream pepIs=new ClasspathResource(""String_Node_Str"").getInputStream();
  try {
    FastaReader<DNASequence,NucleotideCompound> dnaReader=new FastaReader<DNASequence,NucleotideCompound>(cdsIs,new GenericFastaHeaderParser<DNASequence,NucleotideCompound>(),new DNASequenceCreator(dnaCs));
    brca2Dna=dnaReader.process().values().iterator().next();
    FastaReader<ProteinSequence,AminoAcidCompound> pReader=new FastaReader<ProteinSequence,AminoAcidCompound>(pepIs,new GenericFastaHeaderParser<ProteinSequence,AminoAcidCompound>(),new ProteinSequenceCreator(aaCs));
    brca2Pep=pReader.process().values().iterator().next();
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(""String_Node_Str"");
  }
 finally {
    close(cdsIs);
    close(pepIs);
  }
}",0.9899665551839464
17157,"/** 
 * Test of process method, of class FastaReader.
 */
@Test public void testProcess() throws Exception {
  System.out.println(""String_Node_Str"");
  InputStream inStream=this.getClass().getResourceAsStream(""String_Node_Str"");
  assertNotNull(inStream);
  FastaReader<ProteinSequence,AminoAcidCompound> fastaReader=new FastaReader<ProteinSequence,AminoAcidCompound>(inStream,new GenericFastaHeaderParser<ProteinSequence,AminoAcidCompound>(),new ProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet()));
  List<ProteinSequence> proteinSequences=fastaReader.process();
  inStream.close();
  System.out.println(""String_Node_Str"" + proteinSequences.size());
  assertEquals(proteinSequences.size(),283);
  ProteinSequence proteinSequence=proteinSequences.get(0);
  assertEquals(proteinSequence.getAccession().getID(),""String_Node_Str"");
  assertEquals(proteinSequence.getSequenceAsString(),""String_Node_Str"");
  proteinSequence=proteinSequences.get(281);
  System.out.println(proteinSequence.getAccession());
  System.out.println(proteinSequence.getSequenceAsString());
  assertEquals(proteinSequence.getAccession().getID(),""String_Node_Str"");
  assertEquals(proteinSequence.getSequenceAsString(),""String_Node_Str"");
  proteinSequence=proteinSequences.get(282);
  assertEquals(proteinSequence.getAccession().getID(),""String_Node_Str"");
  assertEquals(proteinSequence.getSequenceAsString(),""String_Node_Str"");
}","/** 
 * Test of process method, of class FastaReader.
 */
@Test public void testProcess() throws Exception {
  System.out.println(""String_Node_Str"");
  InputStream inStream=this.getClass().getResourceAsStream(""String_Node_Str"");
  assertNotNull(inStream);
  FastaReader<ProteinSequence,AminoAcidCompound> fastaReader=new FastaReader<ProteinSequence,AminoAcidCompound>(inStream,new GenericFastaHeaderParser<ProteinSequence,AminoAcidCompound>(),new ProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet()));
  LinkedHashMap<String,ProteinSequence> proteinSequences=fastaReader.process();
  inStream.close();
  assertEquals(proteinSequences.size(),283);
  int seqNum=0;
  for (  String id : proteinSequences.keySet()) {
    ProteinSequence proteinSequence=proteinSequences.get(id);
switch (seqNum) {
case 0:
      assertEquals(proteinSequence.getAccession().getID(),""String_Node_Str"");
    assertEquals(proteinSequence.getSequenceAsString(),""String_Node_Str"");
  break;
case 281:
assertEquals(proteinSequence.getAccession().getID(),""String_Node_Str"");
assertEquals(proteinSequence.getSequenceAsString(),""String_Node_Str"");
break;
case 282:
assertEquals(proteinSequence.getAccession().getID(),""String_Node_Str"");
assertEquals(proteinSequence.getSequenceAsString(),""String_Node_Str"");
break;
}
seqNum++;
}
assertEquals(seqNum,283);
}",0.8285094066570188
17158,"public Alignment subAlignment(Set labels,Location loc) throws NoSuchElementException {
  return new RelabeledAlignment(delegate.subAlignment(map(labels),loc));
}","public Alignment subAlignment(Set<String> labels,Location loc) throws NoSuchElementException {
  return new RelabeledAlignment(delegate.subAlignment(map(labels),loc));
}",0.9757575757575756
17159,"public RelabeledAlignment(Alignment delegate){
  this.delegate=delegate;
  for (Iterator i=delegate.getLabels().iterator(); i.hasNext(); ) {
    Object label=i.next();
    labelMap.put(label,label);
  }
}","public RelabeledAlignment(Alignment delegate){
  this.delegate=delegate;
  for (Iterator<String> i=delegate.getLabels().iterator(); i.hasNext(); ) {
    String label=i.next();
    labelMap.put(label,label);
  }
}",0.9519230769230768
17160,"public List getLabels(){
  return new ArrayList(labelMap.keySet());
}","public List<String> getLabels(){
  return new ArrayList<String>(labelMap.keySet());
}",0.8961038961038961
17161,"public SymbolList symbolListForLabel(Object label) throws NoSuchElementException {
  return delegate.symbolListForLabel(map(label));
}","public SymbolList symbolListForLabel(String label) throws NoSuchElementException {
  return delegate.symbolListForLabel(map(label));
}",0.9626865671641792
17162,"protected Object map(Object label){
  return labelMap.get(label);
}","protected String map(Object label){
  return labelMap.get(label);
}",0.9253731343283582
17163,"protected void setUp(){
  try {
    sa=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    map=new HashMap(sa.length);
    for (int i=0; i < sa.length; i++) {
      map.put(new Integer(i),DNATools.createDNA(sa[i]));
    }
    a=new SimpleAlignment(map);
    random=new SimpleDistribution(DNATools.getDNA());
    DistributionTools.randomizeDistribution(random);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","protected void setUp(){
  try {
    sa=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    map=new HashMap<String,SymbolList>(sa.length);
    for (int i=0; i < sa.length; i++) {
      map.put(i + ""String_Node_Str"",DNATools.createDNA(sa[i]));
    }
    a=new SimpleAlignment(map);
    random=new SimpleDistribution(DNATools.getDNA());
    DistributionTools.randomizeDistribution(random);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9534482758620688
17164,"public SymListAsAlignment(List labels,SymbolList symList){
  if (labels.size() != symList.getAlphabet().getAlphabets().size()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.labels=Collections.unmodifiableList(new ArrayList(labels));
  this.symList=symList;
}","public SymListAsAlignment(List<String> labels,SymbolList symList){
  if (labels.size() != symList.getAlphabet().getAlphabets().size()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.labels=Collections.unmodifiableList(new ArrayList<String>(labels));
  this.symList=symList;
}",0.9726027397260274
17165,"public List getLabels(){
  return labels;
}","public List<String> getLabels(){
  return labels;
}",0.9148936170212766
17166,"public SymbolList symbolListForLabel(Object label){
  return new IndexedSymbolList(symList,labels.indexOf(label));
}","public SymbolList symbolListForLabel(String label){
  return new IndexedSymbolList(symList,labels.indexOf(label));
}",0.956896551724138
17167,"public PDBFileParser(){
  structure=null;
  current_model=new ArrayList<Chain>();
  current_chain=null;
  current_group=null;
  header=init_header();
  pdbHeader=new PDBHeader();
  connects=new ArrayList<Map<String,Integer>>();
  parseSecStruc=false;
  alignSeqRes=true;
  helixList=new ArrayList<Map<String,String>>();
  strandList=new ArrayList<Map<String,String>>();
  turnList=new ArrayList<Map<String,String>>();
  current_compound=new Compound();
  dbrefs=new ArrayList<DBRef>();
  dateFormat=new SimpleDateFormat(""String_Node_Str"");
  atomCount=0;
  atomOverflow=false;
  parseCAOnly=false;
}","public PDBFileParser(){
  structure=null;
  current_model=new ArrayList<Chain>();
  current_chain=null;
  current_group=null;
  header=init_header();
  pdbHeader=new PDBHeader();
  connects=new ArrayList<Map<String,Integer>>();
  parseSecStruc=false;
  alignSeqRes=true;
  helixList=new ArrayList<Map<String,String>>();
  strandList=new ArrayList<Map<String,String>>();
  turnList=new ArrayList<Map<String,String>>();
  current_compound=new Compound();
  dbrefs=new ArrayList<DBRef>();
  dateFormat=new SimpleDateFormat(""String_Node_Str"",java.util.Locale.ENGLISH);
  atomCount=0;
  atomOverflow=false;
  parseCAOnly=false;
}",0.9795584627964022
17168,"private static void showFatcat(String serverLocation,Chain c1,Chain c2,String name1,String name2) throws StructureException {
  JFrame tmpFrame=new JFrame();
  tmpFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  showProgressBar(tmpFrame,""String_Node_Str"",""String_Node_Str"");
  StructureAlignment fatCatRigid=StructureAlignmentFactory.getAlgorithm(""String_Node_Str"");
  Atom[] ca1=StructureTools.getAtomCAArray(c1);
  Atom[] ca2=StructureTools.getAtomCAArray(c2);
  AFPChain afpChain=null;
  try {
    afpChain=JFatCatClient.getAFPChainFromServer(serverLocation,name1,name2,ca1,ca2);
    if (afpChain != null) {
      System.out.println(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"");
      afpChain=fatCatRigid.align(ca1,ca2);
      afpChain.setName1(name1);
      afpChain.setName2(name2);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (afpChain == null) {
    afpChain=fatCatRigid.align(ca1,ca2);
    afpChain.setName1(name1);
    afpChain.setName2(name2);
  }
  tmpFrame.dispose();
  List<Group> hetatms=c1.getAtomGroups(""String_Node_Str"");
  List<Group> nucs=c1.getAtomGroups(""String_Node_Str"");
  List<Group> hetatms2=new ArrayList<Group>();
  List<Group> nucs2=new ArrayList<Group>();
  System.out.println(""String_Node_Str"" + afpChain.getAlgorithmName() + ""String_Node_Str""+ afpChain.getVersion());
  if ((afpChain.getBlockNum() - 1) == 0) {
    hetatms2=c2.getAtomGroups(""String_Node_Str"");
    nucs2=c2.getAtomGroups(""String_Node_Str"");
  }
  StructureAlignmentJmol jmol=StructureAlignmentDisplay.display(afpChain,ca1,ca2,hetatms,nucs,hetatms2,nucs2);
  DisplayAFP.showAlignmentImage(afpChain,ca1,ca2,jmol);
}","private static void showFatcat(String serverLocation,Chain c1,Chain c2,String name1,String name2) throws StructureException {
  JFrame tmpFrame=new JFrame();
  tmpFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  showProgressBar(tmpFrame,""String_Node_Str"",""String_Node_Str"");
  StructureAlignment fatCatRigid=StructureAlignmentFactory.getAlgorithm(""String_Node_Str"");
  Atom[] ca1=StructureTools.getAtomCAArray(c1);
  Atom[] ca2=StructureTools.getAtomCAArray(c2);
  AFPChain afpChain=null;
  try {
    afpChain=JFatCatClient.getAFPChainFromServer(serverLocation,name1,name2,ca1,ca2);
    if (afpChain != null) {
    }
 else {
      System.out.println(""String_Node_Str"");
      afpChain=fatCatRigid.align(ca1,ca2);
      afpChain.setName1(name1);
      afpChain.setName2(name2);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (afpChain == null) {
    afpChain=fatCatRigid.align(ca1,ca2);
    afpChain.setName1(name1);
    afpChain.setName2(name2);
  }
  tmpFrame.dispose();
  JFatCatProxy proxy=new JFatCatProxy();
  proxy.setStructureAlignment(fatCatRigid);
  Group[] twistedGroups=proxy.twistGroups(afpChain,ca1,ca2);
  List<Group> hetatms=ca1[0].getParent().getParent().getAtomGroups(""String_Node_Str"");
  List<Group> nucs=ca1[0].getParent().getParent().getAtomGroups(""String_Node_Str"");
  List<Group> hetatms2=new ArrayList<Group>();
  List<Group> nucs2=new ArrayList<Group>();
  if ((afpChain.getBlockNum() - 1) == 0) {
    hetatms2=ca2[0].getParent().getParent().getAtomGroups(""String_Node_Str"");
    nucs2=ca2[0].getParent().getParent().getAtomGroups(""String_Node_Str"");
  }
  StructureAlignmentJmol jmol=DisplayAFP.display(afpChain,twistedGroups,ca1,ca2,hetatms,nucs,hetatms2,nucs2);
  DisplayAFP.showAlignmentImage(afpChain,ca1,ca2,jmol);
}",0.5286624203821656
17169,"public StructureAlignmentJmol(AFPChain afpChain,Atom[] ca1,Atom[] ca2){
  jmolPanel=new JmolPanel();
  frame=new JFrame();
  JMenuBar menu=MenuCreator.initMenu(frame,this,afpChain);
  frame.setJMenuBar(menu);
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  this.afpChain=afpChain;
  this.ca1=ca1;
  this.ca2=ca2;
  Container contentPane=frame.getContentPane();
  Box vBox=Box.createVerticalBox();
  jmolPanel.addMouseMotionListener(this);
  jmolPanel.addMouseListener(this);
  jmolPanel.setPreferredSize(new Dimension(500,500));
  vBox.add(jmolPanel);
  JTextField field=new JTextField();
  field.setMaximumSize(new Dimension(Short.MAX_VALUE,30));
  field.setText(COMMAND_LINE_HELP);
  RasmolCommandListener listener=new RasmolCommandListener(jmolPanel,field);
  field.addActionListener(listener);
  field.addMouseListener(listener);
  field.addKeyListener(listener);
  vBox.add(field);
  Box hBox=Box.createHorizontalBox();
  status=new JTextField();
  status.setBackground(Color.white);
  status.setEditable(false);
  status.setMaximumSize(new Dimension(Short.MAX_VALUE,30));
  hBox.add(status);
  text=new JTextField();
  text.setBackground(Color.white);
  text.setMaximumSize(new Dimension(220,30));
  text.setSize(new Dimension(220,30));
  text.setMinimumSize(new Dimension(220,30));
  text.setText(""String_Node_Str"");
  text.setEditable(false);
  hBox.add(text);
  vBox.add(hBox);
  contentPane.add(vBox);
  MyJmolStatusListener li=(MyJmolStatusListener)jmolPanel.getStatusListener();
  li.setTextField(status);
  frame.pack();
  frame.setVisible(true);
  initCoords();
  resetDisplay();
}","public StructureAlignmentJmol(AFPChain afpChain,Atom[] ca1,Atom[] ca2){
  jmolPanel=new JmolPanel();
  frame=new JFrame();
  JMenuBar menu=MenuCreator.initMenu(frame,this,afpChain);
  frame.setJMenuBar(menu);
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  this.afpChain=afpChain;
  this.ca1=ca1;
  this.ca2=ca2;
  Container contentPane=frame.getContentPane();
  Box vBox=Box.createVerticalBox();
  jmolPanel.addMouseMotionListener(this);
  jmolPanel.addMouseListener(this);
  jmolPanel.setPreferredSize(new Dimension(500,500));
  vBox.add(jmolPanel);
  JTextField field=new JTextField();
  field.setMaximumSize(new Dimension(Short.MAX_VALUE,30));
  field.setText(COMMAND_LINE_HELP);
  RasmolCommandListener listener=new RasmolCommandListener(jmolPanel,field);
  field.addActionListener(listener);
  field.addMouseListener(listener);
  field.addKeyListener(listener);
  vBox.add(field);
  Box hBox=Box.createHorizontalBox();
  status=new JTextField();
  status.setBackground(Color.white);
  status.setEditable(false);
  status.setMaximumSize(new Dimension(Short.MAX_VALUE,30));
  hBox.add(status);
  text=new JTextField();
  text.setBackground(Color.white);
  text.setMaximumSize(new Dimension(Short.MAX_VALUE,30));
  text.setText(""String_Node_Str"");
  text.setEditable(false);
  hBox.add(text);
  vBox.add(hBox);
  contentPane.add(vBox);
  MyJmolStatusListener li=(MyJmolStatusListener)jmolPanel.getStatusListener();
  li.setTextField(status);
  frame.pack();
  frame.setVisible(true);
  initCoords();
  resetDisplay();
}",0.9671660822441824
17170,"/** 
 * Handler for ATOM Record Format <pre> COLUMNS        DATA TYPE       FIELD         DEFINITION --------------------------------------------------------------------------------- 1 -  6        Record name     ""ATOM  "" 7 - 11        Integer         serial        Atom serial number. 13 - 16        Atom            name          Atom name. 17             Character       altLoc        Alternate location indicator. 18 - 20        Residue name    resName       Residue name. 22             Character       chainID       Chain identifier. 23 - 26        Integer         resSeq        Residue sequence number. 27             AChar           iCode         Code for insertion of residues. 31 - 38        Real(8.3)       x             Orthogonal coordinates for X in Angstroms. 39 - 46        Real(8.3)       y             Orthogonal coordinates for Y in Angstroms. 47 - 54        Real(8.3)       z             Orthogonal coordinates for Z in Angstroms. 55 - 60        Real(6.2)       occupancy     Occupancy. 61 - 66        Real(6.2)       tempFactor    Temperature factor. 73 - 76        LString(4)      segID         Segment identifier, left-justified. 77 - 78        LString(2)      element       Element symbol, right-justified. 79 - 80        LString(2)      charge        Charge on the atom. </pre>
 */
private void pdb_ATOM_Handler(String line) throws PDBParseException {
  boolean startOfNewChain=false;
  String chain_id=line.substring(21,22);
  if (current_chain == null) {
    current_chain=new ChainImpl();
    current_chain.setName(chain_id);
    startOfNewChain=true;
    current_model.add(current_chain);
  }
  if (!chain_id.equals(current_chain.getName())) {
    startOfNewChain=true;
    current_chain.addGroup(current_group);
    Chain testchain;
    testchain=isKnownChain(current_chain.getName(),current_model);
    if (testchain != null && testchain.getName().equals(chain_id)) {
    }
 else {
      testchain=isKnownChain(chain_id,current_model);
    }
    if (testchain == null) {
      current_chain=new ChainImpl();
      current_chain.setName(chain_id);
    }
 else {
      current_chain=testchain;
    }
    if (!current_model.contains(current_chain))     current_model.add(current_chain);
  }
  String recordName=line.substring(0,6).trim();
  String residueNumber=line.substring(22,27).trim();
  String groupCode3=line.substring(17,20);
  Character aminoCode1=null;
  if (recordName.equals(""String_Node_Str"")) {
    aminoCode1=StructureTools.get1LetterCode(groupCode3);
  }
  if (current_group == null) {
    current_group=getNewGroup(recordName,aminoCode1);
    current_group.setPDBCode(residueNumber);
    current_group.setPDBName(groupCode3);
  }
  if (startOfNewChain) {
    current_group=getNewGroup(recordName,aminoCode1);
    current_group.setPDBCode(residueNumber);
    current_group.setPDBName(groupCode3);
  }
  if (!residueNumber.equals(current_group.getPDBCode())) {
    current_chain.addGroup(current_group);
    current_group=getNewGroup(recordName,aminoCode1);
    current_group.setPDBCode(residueNumber);
    current_group.setPDBName(groupCode3);
  }
  if (headerOnly)   return;
  atomCount++;
  if (atomCount == ATOM_CA_THRESHOLD) {
    System.err.println(""String_Node_Str"" + ATOM_CA_THRESHOLD + ""String_Node_Str"");
    seqResChains.clear();
    switchCAOnly();
  }
  if (atomCount == MAX_ATOMS) {
    System.err.println(""String_Node_Str"" + MAX_ATOMS + ""String_Node_Str"");
    System.err.println(""String_Node_Str"" + line);
    return;
  }
  if (atomCount > MAX_ATOMS) {
    return;
  }
  String fullname=line.substring(12,16);
  if (parseCAOnly) {
    if (!fullname.equals(""String_Node_Str"")) {
      atomCount--;
      return;
    }
  }
  int pdbnumber=Integer.parseInt(line.substring(6,11).trim());
  AtomImpl atom=new AtomImpl();
  atom.setPDBserial(pdbnumber);
  Character altLoc=new Character(line.substring(16,17).charAt(0));
  atom.setAltLoc(altLoc);
  atom.setFullName(fullname);
  atom.setName(fullname.trim());
  double x=Double.parseDouble(line.substring(30,38).trim());
  double y=Double.parseDouble(line.substring(38,46).trim());
  double z=Double.parseDouble(line.substring(46,54).trim());
  double[] coords=new double[3];
  coords[0]=x;
  coords[1]=y;
  coords[2]=z;
  atom.setCoords(coords);
  double occu=1.0;
  if (line.length() > 59) {
    try {
      occu=Double.parseDouble(line.substring(54,60).trim());
    }
 catch (    NumberFormatException e) {
    }
  }
  double tempf=0.0;
  if (line.length() > 65)   try {
    tempf=Double.parseDouble(line.substring(60,66).trim());
  }
 catch (  NumberFormatException e) {
  }
  atom.setOccupancy(occu);
  atom.setTempFactor(tempf);
  current_group.addAtom(atom);
}","/** 
 * Handler for ATOM Record Format <pre> COLUMNS        DATA TYPE       FIELD         DEFINITION --------------------------------------------------------------------------------- 1 -  6        Record name     ""ATOM  "" 7 - 11        Integer         serial        Atom serial number. 13 - 16        Atom            name          Atom name. 17             Character       altLoc        Alternate location indicator. 18 - 20        Residue name    resName       Residue name. 22             Character       chainID       Chain identifier. 23 - 26        Integer         resSeq        Residue sequence number. 27             AChar           iCode         Code for insertion of residues. 31 - 38        Real(8.3)       x             Orthogonal coordinates for X in Angstroms. 39 - 46        Real(8.3)       y             Orthogonal coordinates for Y in Angstroms. 47 - 54        Real(8.3)       z             Orthogonal coordinates for Z in Angstroms. 55 - 60        Real(6.2)       occupancy     Occupancy. 61 - 66        Real(6.2)       tempFactor    Temperature factor. 73 - 76        LString(4)      segID         Segment identifier, left-justified. 77 - 78        LString(2)      element       Element symbol, right-justified. 79 - 80        LString(2)      charge        Charge on the atom. </pre>
 */
private void pdb_ATOM_Handler(String line) throws PDBParseException {
  boolean startOfNewChain=false;
  String chain_id=line.substring(21,22);
  if (current_chain == null) {
    current_chain=new ChainImpl();
    current_chain.setName(chain_id);
    startOfNewChain=true;
    current_model.add(current_chain);
  }
  if (!chain_id.equals(current_chain.getName())) {
    startOfNewChain=true;
    current_chain.addGroup(current_group);
    Chain testchain;
    testchain=isKnownChain(current_chain.getName(),current_model);
    if (testchain != null && testchain.getName().equals(chain_id)) {
    }
 else {
      testchain=isKnownChain(chain_id,current_model);
    }
    if (testchain == null) {
      current_chain=new ChainImpl();
      current_chain.setName(chain_id);
    }
 else {
      current_chain=testchain;
    }
    if (!current_model.contains(current_chain))     current_model.add(current_chain);
  }
  String recordName=line.substring(0,6).trim();
  String residueNumber=line.substring(22,27).trim();
  String groupCode3=line.substring(17,20);
  Character aminoCode1=null;
  if (recordName.equals(""String_Node_Str"")) {
    aminoCode1=StructureTools.get1LetterCode(groupCode3);
  }
 else {
    aminoCode1=StructureTools.get1LetterCode(groupCode3);
    if (aminoCode1.equals(StructureTools.UNKNOWN_GROUP_LABEL))     aminoCode1=null;
  }
  if (current_group == null) {
    current_group=getNewGroup(recordName,aminoCode1);
    current_group.setPDBCode(residueNumber);
    current_group.setPDBName(groupCode3);
  }
  if (startOfNewChain) {
    current_group=getNewGroup(recordName,aminoCode1);
    current_group.setPDBCode(residueNumber);
    current_group.setPDBName(groupCode3);
  }
  if (!residueNumber.equals(current_group.getPDBCode())) {
    current_chain.addGroup(current_group);
    current_group=getNewGroup(recordName,aminoCode1);
    current_group.setPDBCode(residueNumber);
    current_group.setPDBName(groupCode3);
  }
  if (headerOnly)   return;
  atomCount++;
  if (atomCount == ATOM_CA_THRESHOLD) {
    System.err.println(""String_Node_Str"" + ATOM_CA_THRESHOLD + ""String_Node_Str"");
    seqResChains.clear();
    switchCAOnly();
  }
  if (atomCount == MAX_ATOMS) {
    System.err.println(""String_Node_Str"" + MAX_ATOMS + ""String_Node_Str"");
    System.err.println(""String_Node_Str"" + line);
    return;
  }
  if (atomCount > MAX_ATOMS) {
    return;
  }
  String fullname=line.substring(12,16);
  if (parseCAOnly) {
    if (!fullname.equals(""String_Node_Str"")) {
      atomCount--;
      return;
    }
  }
  int pdbnumber=Integer.parseInt(line.substring(6,11).trim());
  AtomImpl atom=new AtomImpl();
  atom.setPDBserial(pdbnumber);
  Character altLoc=new Character(line.substring(16,17).charAt(0));
  atom.setAltLoc(altLoc);
  atom.setFullName(fullname);
  atom.setName(fullname.trim());
  double x=Double.parseDouble(line.substring(30,38).trim());
  double y=Double.parseDouble(line.substring(38,46).trim());
  double z=Double.parseDouble(line.substring(46,54).trim());
  double[] coords=new double[3];
  coords[0]=x;
  coords[1]=y;
  coords[2]=z;
  atom.setCoords(coords);
  double occu=1.0;
  if (line.length() > 59) {
    try {
      occu=Double.parseDouble(line.substring(54,60).trim());
    }
 catch (    NumberFormatException e) {
    }
  }
  double tempf=0.0;
  if (line.length() > 65)   try {
    tempf=Double.parseDouble(line.substring(60,66).trim());
  }
 catch (  NumberFormatException e) {
  }
  atom.setOccupancy(occu);
  atom.setTempFactor(tempf);
  current_group.addAtom(atom);
}",0.9837792289867284
17171,"public void parse(BufferedReader buf) throws IOException {
  triggerDocumentStart();
  struct=new Struct();
  String line=null;
  boolean inLoop=false;
  List<String> loopFields=new ArrayList<String>();
  List<String> lineData=new ArrayList<String>();
  String category=null;
  line=buf.readLine();
  if (!line.startsWith(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"" + line);
    triggerDocumentEnd();
    return;
  }
  while ((line=buf.readLine()) != null) {
    if (inLoop) {
      if (line.startsWith(LOOP_END)) {
        inLoop=false;
        lineData.clear();
        category=null;
        loopFields.clear();
        continue;
      }
      if (line.startsWith(FIELD_LINE)) {
        String txt=line.trim();
        if (txt.indexOf('.') > -1) {
          String[] spl=txt.split(""String_Node_Str"");
          category=spl[0];
          String attribute=spl[1];
          loopFields.add(attribute);
          if (spl.length > 2) {
            System.err.println(""String_Node_Str"");
          }
        }
 else {
          category=txt;
        }
      }
 else {
        lineData=processLine(line,buf,loopFields.size());
        if (lineData.size() != loopFields.size()) {
          System.err.println(""String_Node_Str"");
        }
        endLineChecks(category,loopFields,lineData);
        lineData.clear();
      }
    }
 else {
      if (line.startsWith(LOOP_START)) {
        loopFields.clear();
        inLoop=true;
        category=null;
        lineData.clear();
        continue;
      }
 else       if (line.startsWith(LOOP_END)) {
        inLoop=false;
        if (category != null)         endLineChecks(category,loopFields,lineData);
        category=null;
        loopFields.clear();
        lineData.clear();
      }
 else {
        List<String> data=processLine(line,buf,2);
        String key=data.get(0);
        int pos=key.indexOf(""String_Node_Str"");
        if (pos < 0) {
          if (!line.startsWith(""String_Node_Str"")) {
            System.err.println(""String_Node_Str"" + line);
            triggerDocumentEnd();
            return;
          }
          category=null;
          lineData.clear();
          continue;
        }
        category=key.substring(0,pos);
        String value=data.get(1);
        loopFields.add(key.substring(pos + 1,key.length()));
        lineData.add(value);
      }
    }
  }
  if (struct != null) {
    triggerStructData(struct);
  }
  triggerDocumentEnd();
}","public void parse(BufferedReader buf) throws IOException {
  triggerDocumentStart();
  struct=new Struct();
  String line=null;
  boolean inLoop=false;
  List<String> loopFields=new ArrayList<String>();
  List<String> lineData=new ArrayList<String>();
  String category=null;
  line=buf.readLine();
  if (!line.startsWith(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"" + line);
    triggerDocumentEnd();
    return;
  }
  while ((line=buf.readLine()) != null) {
    if (inLoop) {
      if (line.startsWith(LOOP_END)) {
        inLoop=false;
        lineData.clear();
        category=null;
        loopFields.clear();
        continue;
      }
      if (line.startsWith(FIELD_LINE)) {
        String txt=line.trim();
        if (txt.indexOf('.') > -1) {
          String[] spl=txt.split(""String_Node_Str"");
          category=spl[0];
          String attribute=spl[1];
          loopFields.add(attribute);
          if (spl.length > 2) {
            System.err.println(""String_Node_Str"");
          }
        }
 else {
          category=txt;
        }
      }
 else {
        lineData=processLine(line,buf,loopFields.size());
        if (lineData.size() != loopFields.size()) {
          System.err.println(""String_Node_Str"");
        }
        endLineChecks(category,loopFields,lineData);
        lineData.clear();
      }
    }
 else {
      if (line.startsWith(LOOP_START)) {
        loopFields.clear();
        inLoop=true;
        category=null;
        lineData.clear();
        continue;
      }
 else       if (line.startsWith(LOOP_END)) {
        inLoop=false;
        if (category != null)         endLineChecks(category,loopFields,lineData);
        category=null;
        loopFields.clear();
        lineData.clear();
      }
 else {
        List<String> data=processLine(line,buf,2);
        if (data.size() < 1) {
          lineData.clear();
          continue;
        }
        String key=data.get(0);
        int pos=key.indexOf(""String_Node_Str"");
        if (pos < 0) {
          if (!line.startsWith(""String_Node_Str"")) {
            System.err.println(""String_Node_Str"" + line);
            triggerDocumentEnd();
            return;
          }
          category=null;
          lineData.clear();
          continue;
        }
        category=key.substring(0,pos);
        String value=data.get(1);
        loopFields.add(key.substring(pos + 1,key.length()));
        lineData.add(value);
      }
    }
  }
  if (struct != null) {
    triggerStructData(struct);
  }
  triggerDocumentEnd();
}",0.9821033581339232
17172,"public static StructureAlignment[] getAllAlgorithms(){
  StructureAlignment[] algorithms=new StructureAlignment[5];
  algorithms[0]=new CeMain();
  algorithms[1]=new CeSideChainMain();
  algorithms[2]=new SmithWaterman3Daligner();
  return algorithms;
}","public static StructureAlignment[] getAllAlgorithms(){
  StructureAlignment[] algorithms=new StructureAlignment[3];
  algorithms[0]=new CeMain();
  algorithms[1]=new CeSideChainMain();
  algorithms[2]=new SmithWaterman3Daligner();
  return algorithms;
}",0.9960474308300395
17173,"public File downloadPDB(String pdbId){
  if ((path == null) || (path.equals(""String_Node_Str""))) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    path=""String_Node_Str"";
  }
  File tempFile;
  if (pdbDirectorySplit) {
    String middle=pdbId.substring(1,3).toLowerCase();
    String dir=path + lineSplit + middle;
    File directoryCheck=new File(dir);
    if (!directoryCheck.exists()) {
      directoryCheck.mkdir();
    }
    tempFile=new File(dir + lineSplit + pdbId.toLowerCase()+ ""String_Node_Str"");
  }
 else {
    tempFile=new File(path + lineSplit + pdbId.toLowerCase()+ ""String_Node_Str"");
  }
  File pdbHome=new File(path);
  if (!pdbHome.canWrite()) {
    System.err.println(""String_Node_Str"" + pdbHome);
    return null;
  }
  String ftp=String.format(""String_Node_Str"",pdbId.toLowerCase());
  System.out.println(""String_Node_Str"" + ftp);
  try {
    URL url=new URL(ftp);
    InputStream conn=url.openStream();
    System.out.println(""String_Node_Str"" + tempFile);
    FileOutputStream outPut=new FileOutputStream(tempFile);
    GZIPOutputStream gzOutPut=new GZIPOutputStream(outPut);
    PrintWriter pw=new PrintWriter(gzOutPut);
    BufferedReader fileBuffer=new BufferedReader(new InputStreamReader(new GZIPInputStream(conn)));
    String line;
    while ((line=fileBuffer.readLine()) != null) {
      pw.println(line);
    }
    pw.flush();
    pw.close();
    outPut.close();
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return tempFile;
}","public File downloadPDB(String pdbId){
  if ((path == null) || (path.equals(""String_Node_Str""))) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    path=""String_Node_Str"";
  }
  File tempFile;
  if (pdbDirectorySplit) {
    String middle=pdbId.substring(1,3).toLowerCase();
    String dir=path + lineSplit + middle;
    File directoryCheck=new File(dir);
    if (!directoryCheck.exists()) {
      directoryCheck.mkdir();
    }
    tempFile=new File(dir + lineSplit + pdbId.toLowerCase()+ ""String_Node_Str"");
  }
 else {
    tempFile=new File(path + lineSplit + pdbId.toLowerCase()+ ""String_Node_Str"");
  }
  String ftp=String.format(""String_Node_Str"",pdbId.toLowerCase());
  System.out.println(""String_Node_Str"" + ftp);
  try {
    URL url=new URL(ftp);
    InputStream conn=url.openStream();
    System.out.println(""String_Node_Str"" + tempFile);
    FileOutputStream outPut=new FileOutputStream(tempFile);
    GZIPOutputStream gzOutPut=new GZIPOutputStream(outPut);
    PrintWriter pw=new PrintWriter(gzOutPut);
    BufferedReader fileBuffer=new BufferedReader(new InputStreamReader(new GZIPInputStream(conn)));
    String line;
    while ((line=fileBuffer.readLine()) != null) {
      pw.println(line);
    }
    pw.flush();
    pw.close();
    outPut.close();
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return tempFile;
}",0.9548517520215634
17174,"public static void main(String[] args){
  String filename=""String_Node_Str"";
  StructureIOFile reader=new MMCIFFileReader();
  reader.setAutoFetch(true);
  try {
    Structure struc=reader.getStructure(filename);
    System.out.println(struc);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  StructureIOFile reader=new MMCIFFileReader();
  reader.setPath(""String_Node_Str"");
  reader.setAutoFetch(true);
  try {
    Structure struc=reader.getStructureById(""String_Node_Str"");
    System.out.println(struc);
    System.out.println(struc.toPDB());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.78419452887538
17175,"private File downloadPDB(String pdbId){
  if ((path == null) || (path.equals(""String_Node_Str""))) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    path=""String_Node_Str"";
  }
  File tempFile;
  if (pdbDirectorySplit) {
    String middle=pdbId.substring(1,3).toLowerCase();
    String dir=path + lineSplit + middle;
    File directoryCheck=new File(dir);
    if (!directoryCheck.exists()) {
      directoryCheck.mkdir();
    }
    tempFile=new File(dir + lineSplit + ""String_Node_Str""+ pdbId.toLowerCase()+ ""String_Node_Str"");
  }
 else {
    tempFile=new File(path + lineSplit + ""String_Node_Str""+ pdbId.toLowerCase()+ ""String_Node_Str"");
  }
  File pdbHome=new File(path);
  if (!pdbHome.canWrite()) {
    System.err.println(""String_Node_Str"" + pdbHome);
    return null;
  }
  String ftp=String.format(""String_Node_Str"",pdbId.toLowerCase());
  System.out.println(""String_Node_Str"" + ftp);
  try {
    URL url=new URL(ftp);
    InputStream conn=new GZIPInputStream(url.openStream());
    System.out.println(""String_Node_Str"" + tempFile);
    FileOutputStream outPut=new FileOutputStream(tempFile);
    GZIPOutputStream gzOutPut=new GZIPOutputStream(outPut);
    PrintWriter pw=new PrintWriter(gzOutPut);
    BufferedReader fileBuffer=new BufferedReader(new InputStreamReader(conn));
    String line;
    while ((line=fileBuffer.readLine()) != null) {
      pw.println(line);
    }
    pw.flush();
    pw.close();
    outPut.close();
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return tempFile;
}","private File downloadPDB(String pdbId){
  if ((path == null) || (path.equals(""String_Node_Str""))) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    path=""String_Node_Str"";
  }
  File tempFile;
  if (pdbDirectorySplit) {
    String middle=pdbId.substring(1,3).toLowerCase();
    String dir=path + lineSplit + middle;
    File directoryCheck=new File(dir);
    if (!directoryCheck.exists()) {
      directoryCheck.mkdir();
    }
    tempFile=new File(dir + lineSplit + ""String_Node_Str""+ pdbId.toLowerCase()+ ""String_Node_Str"");
  }
 else {
    tempFile=new File(path + lineSplit + ""String_Node_Str""+ pdbId.toLowerCase()+ ""String_Node_Str"");
  }
  String ftp=String.format(""String_Node_Str"",pdbId.toLowerCase());
  System.out.println(""String_Node_Str"" + ftp);
  System.out.println(""String_Node_Str"" + tempFile);
  try {
    URL url=new URL(ftp);
    InputStream conn=new GZIPInputStream(url.openStream());
    FileOutputStream outPut=new FileOutputStream(tempFile);
    GZIPOutputStream gzOutPut=new GZIPOutputStream(outPut);
    PrintWriter pw=new PrintWriter(gzOutPut);
    BufferedReader fileBuffer=new BufferedReader(new InputStreamReader(conn));
    String line;
    while ((line=fileBuffer.readLine()) != null) {
      pw.println(line);
    }
    pw.flush();
    pw.close();
    outPut.close();
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return tempFile;
}",0.9211563731931668
17176,"/** 
 * Takes a set of locations and returns the set of all members. If any members are compound, it flattens them too.
 * @param members the locations to flatten
 * @return the flattened collection of members.
 */
public static Collection<Location> flatten(Collection<Location> members){
  List<Location> flattened=new ArrayList<Location>(members);
  for (int i=0; i < flattened.size(); i++) {
    RichLocation member=(RichLocation)flattened.get(i);
    if (!member.isContiguous()) {
      flattened.remove(i);
      int insertPos=i;
      for (Iterator<Location> j=member.blockIterator(); j.hasNext(); )       flattened.add(insertPos++,j.next());
      i--;
    }
  }
  return flattened;
}","/** 
 * Takes a set of locations and returns the set of all members. If any members are compound, it flattens them too.
 * @param members the locations to flatten
 * @return the flattened collection of members.
 */
public static Collection<Location> flatten(Collection<Location> members){
  List<Location> flattened=new ArrayList<Location>(members);
  for (int i=0; i < flattened.size(); i++) {
    Location member=flattened.get(i);
    if (!member.isContiguous()) {
      flattened.remove(i);
      int insertPos=i;
      for (Iterator<Location> j=member.blockIterator(); j.hasNext(); )       flattened.add(insertPos++,j.next());
      i--;
    }
  }
  return flattened;
}",0.9868035190615836
17177,"/** 
 * Takes a set of locations and tries to merge all pairs where the union operation results in a simple rich location, not a compound one.
 * @param members the members to merge
 * @return the resulting merged set, which may have only one location init.
 */
public static Collection<Location> merge(Collection<Location> members){
  List<Location> membersList=new ArrayList<Location>(flatten(members));
  if (membersList.size() > 1) {
    for (int p=0; p < (membersList.size() - 1); p++) {
      RichLocation parent=(RichLocation)membersList.get(p);
      for (int c=p + 1; c < membersList.size(); c++) {
        RichLocation child=(RichLocation)membersList.get(c);
        RichLocation union=(RichLocation)parent.union(child);
        if (union.isContiguous()) {
          membersList.set(p,union);
          membersList.remove(c);
          c=p + 1;
        }
      }
    }
  }
  return membersList;
}","/** 
 * Takes a set of locations and tries to merge all pairs where the union operation results in a simple rich location, not a compound one.
 * @param members the members to merge
 * @return the resulting merged set, which may have only one location init.
 */
public static Collection<Location> merge(Collection<Location> members){
  List<Location> membersList=new ArrayList<Location>(flatten(members));
  if (membersList.size() > 1) {
    for (int p=0; p < (membersList.size() - 1); p++) {
      Location parent=membersList.get(p);
      for (int c=p + 1; c < membersList.size(); c++) {
        Location child=membersList.get(c);
        Location union=parent.union(child);
        if (union.isContiguous()) {
          membersList.set(p,union);
          membersList.remove(c);
          p--;
          break;
        }
      }
    }
  }
  return membersList;
}",0.9542631281761716
17178,"/** 
 * Handler for ATOM Record Format <pre> COLUMNS        DATA TYPE       FIELD         DEFINITION --------------------------------------------------------------------------------- 1 -  6        Record name     ""ATOM  "" 7 - 11        Integer         serial        Atom serial number. 13 - 16        Atom            name          Atom name. 17             Character       altLoc        Alternate location indicator. 18 - 20        Residue name    resName       Residue name. 22             Character       chainID       Chain identifier. 23 - 26        Integer         resSeq        Residue sequence number. 27             AChar           iCode         Code for insertion of residues. 31 - 38        Real(8.3)       x             Orthogonal coordinates for X in Angstroms. 39 - 46        Real(8.3)       y             Orthogonal coordinates for Y in Angstroms. 47 - 54        Real(8.3)       z             Orthogonal coordinates for Z in Angstroms. 55 - 60        Real(6.2)       occupancy     Occupancy. 61 - 66        Real(6.2)       tempFactor    Temperature factor. 73 - 76        LString(4)      segID         Segment identifier, left-justified. 77 - 78        LString(2)      element       Element symbol, right-justified. 79 - 80        LString(2)      charge        Charge on the atom. </pre>
 */
private void pdb_ATOM_Handler(String line) throws PDBParseException {
  boolean startOfNewChain=false;
  String chain_id=line.substring(21,22);
  if (current_chain == null) {
    current_chain=new ChainImpl();
    current_chain.setName(chain_id);
    startOfNewChain=true;
  }
  if (!chain_id.equals(current_chain.getName())) {
    startOfNewChain=true;
    current_chain.addGroup(current_group);
    Chain testchain;
    testchain=isKnownChain(current_chain.getName(),current_model);
    if (testchain == null) {
      current_model.add(current_chain);
      current_chain=new ChainImpl();
      current_chain.setName(chain_id);
    }
 else {
      current_chain=testchain;
    }
  }
  String recordName=line.substring(0,6).trim();
  String residueNumber=line.substring(22,27).trim();
  String groupCode3=line.substring(17,20);
  Character aminoCode1=null;
  if (recordName.equals(""String_Node_Str"")) {
    aminoCode1=StructureTools.get1LetterCode(groupCode3);
  }
  if (current_group == null) {
    current_group=getNewGroup(recordName,aminoCode1);
    current_group.setPDBCode(residueNumber);
    current_group.setPDBName(groupCode3);
  }
  if (startOfNewChain) {
    current_group=getNewGroup(recordName,aminoCode1);
    current_group.setPDBCode(residueNumber);
    current_group.setPDBName(groupCode3);
  }
  if (!residueNumber.equals(current_group.getPDBCode())) {
    current_chain.addGroup(current_group);
    current_group=getNewGroup(recordName,aminoCode1);
    current_group.setPDBCode(residueNumber);
    current_group.setPDBName(groupCode3);
  }
  if (headerOnly)   return;
  atomCount++;
  if (atomCount == ATOM_CA_THRESHOLD) {
    System.err.println(""String_Node_Str"" + ATOM_CA_THRESHOLD + ""String_Node_Str"");
    seqResChains.clear();
    switchCAOnly();
  }
  if (atomCount == MAX_ATOMS) {
    System.err.println(""String_Node_Str"" + MAX_ATOMS + ""String_Node_Str"");
    System.err.println(""String_Node_Str"" + line);
    return;
  }
  if (atomCount > MAX_ATOMS) {
    return;
  }
  String fullname=line.substring(12,16);
  if (parseCAOnly) {
    if (!fullname.equals(""String_Node_Str"")) {
      atomCount--;
      return;
    }
  }
  int pdbnumber=Integer.parseInt(line.substring(6,11).trim());
  AtomImpl atom=new AtomImpl();
  atom.setPDBserial(pdbnumber);
  Character altLoc=new Character(line.substring(16,17).charAt(0));
  atom.setAltLoc(altLoc);
  atom.setFullName(fullname);
  atom.setName(fullname.trim());
  double x=Double.parseDouble(line.substring(30,38).trim());
  double y=Double.parseDouble(line.substring(38,46).trim());
  double z=Double.parseDouble(line.substring(46,54).trim());
  double[] coords=new double[3];
  coords[0]=x;
  coords[1]=y;
  coords[2]=z;
  atom.setCoords(coords);
  double occu=1.0;
  if (line.length() > 59) {
    try {
      occu=Double.parseDouble(line.substring(54,60).trim());
    }
 catch (    NumberFormatException e) {
    }
  }
  double tempf=0.0;
  if (line.length() > 65)   try {
    tempf=Double.parseDouble(line.substring(60,66).trim());
  }
 catch (  NumberFormatException e) {
  }
  atom.setOccupancy(occu);
  atom.setTempFactor(tempf);
  current_group.addAtom(atom);
}","/** 
 * Handler for ATOM Record Format <pre> COLUMNS        DATA TYPE       FIELD         DEFINITION --------------------------------------------------------------------------------- 1 -  6        Record name     ""ATOM  "" 7 - 11        Integer         serial        Atom serial number. 13 - 16        Atom            name          Atom name. 17             Character       altLoc        Alternate location indicator. 18 - 20        Residue name    resName       Residue name. 22             Character       chainID       Chain identifier. 23 - 26        Integer         resSeq        Residue sequence number. 27             AChar           iCode         Code for insertion of residues. 31 - 38        Real(8.3)       x             Orthogonal coordinates for X in Angstroms. 39 - 46        Real(8.3)       y             Orthogonal coordinates for Y in Angstroms. 47 - 54        Real(8.3)       z             Orthogonal coordinates for Z in Angstroms. 55 - 60        Real(6.2)       occupancy     Occupancy. 61 - 66        Real(6.2)       tempFactor    Temperature factor. 73 - 76        LString(4)      segID         Segment identifier, left-justified. 77 - 78        LString(2)      element       Element symbol, right-justified. 79 - 80        LString(2)      charge        Charge on the atom. </pre>
 */
private void pdb_ATOM_Handler(String line) throws PDBParseException {
  boolean startOfNewChain=false;
  String chain_id=line.substring(21,22);
  if (current_chain == null) {
    current_chain=new ChainImpl();
    current_chain.setName(chain_id);
    startOfNewChain=true;
    current_model.add(current_chain);
  }
  if (!chain_id.equals(current_chain.getName())) {
    startOfNewChain=true;
    current_chain.addGroup(current_group);
    Chain testchain;
    testchain=isKnownChain(current_chain.getName(),current_model);
    if (testchain != null && testchain.getName().equals(chain_id)) {
    }
 else {
      testchain=isKnownChain(chain_id,current_model);
    }
    if (testchain == null) {
      current_chain=new ChainImpl();
      current_chain.setName(chain_id);
    }
 else {
      current_chain=testchain;
    }
    if (!current_model.contains(current_chain))     current_model.add(current_chain);
  }
  String recordName=line.substring(0,6).trim();
  String residueNumber=line.substring(22,27).trim();
  String groupCode3=line.substring(17,20);
  Character aminoCode1=null;
  if (recordName.equals(""String_Node_Str"")) {
    aminoCode1=StructureTools.get1LetterCode(groupCode3);
  }
  if (current_group == null) {
    current_group=getNewGroup(recordName,aminoCode1);
    current_group.setPDBCode(residueNumber);
    current_group.setPDBName(groupCode3);
  }
  if (startOfNewChain) {
    current_group=getNewGroup(recordName,aminoCode1);
    current_group.setPDBCode(residueNumber);
    current_group.setPDBName(groupCode3);
  }
  if (!residueNumber.equals(current_group.getPDBCode())) {
    current_chain.addGroup(current_group);
    current_group=getNewGroup(recordName,aminoCode1);
    current_group.setPDBCode(residueNumber);
    current_group.setPDBName(groupCode3);
  }
  if (headerOnly)   return;
  atomCount++;
  if (atomCount == ATOM_CA_THRESHOLD) {
    System.err.println(""String_Node_Str"" + ATOM_CA_THRESHOLD + ""String_Node_Str"");
    seqResChains.clear();
    switchCAOnly();
  }
  if (atomCount == MAX_ATOMS) {
    System.err.println(""String_Node_Str"" + MAX_ATOMS + ""String_Node_Str"");
    System.err.println(""String_Node_Str"" + line);
    return;
  }
  if (atomCount > MAX_ATOMS) {
    return;
  }
  String fullname=line.substring(12,16);
  if (parseCAOnly) {
    if (!fullname.equals(""String_Node_Str"")) {
      atomCount--;
      return;
    }
  }
  int pdbnumber=Integer.parseInt(line.substring(6,11).trim());
  AtomImpl atom=new AtomImpl();
  atom.setPDBserial(pdbnumber);
  Character altLoc=new Character(line.substring(16,17).charAt(0));
  atom.setAltLoc(altLoc);
  atom.setFullName(fullname);
  atom.setName(fullname.trim());
  double x=Double.parseDouble(line.substring(30,38).trim());
  double y=Double.parseDouble(line.substring(38,46).trim());
  double z=Double.parseDouble(line.substring(46,54).trim());
  double[] coords=new double[3];
  coords[0]=x;
  coords[1]=y;
  coords[2]=z;
  atom.setCoords(coords);
  double occu=1.0;
  if (line.length() > 59) {
    try {
      occu=Double.parseDouble(line.substring(54,60).trim());
    }
 catch (    NumberFormatException e) {
    }
  }
  double tempf=0.0;
  if (line.length() > 65)   try {
    tempf=Double.parseDouble(line.substring(60,66).trim());
  }
 catch (  NumberFormatException e) {
  }
  atom.setOccupancy(occu);
  atom.setTempFactor(tempf);
  current_group.addAtom(atom);
}",0.9663118621749148
17179,"/** 
 * The EntityPolySeq object provide the amino acid sequence objects for the Entities. Later on the entities are mapped to the BioJava Chain and Compound objects.
 * @param epolseq the EntityPolySeq record for one amino acid
 */
public void newEntityPolySeq(EntityPolySeq epolseq){
  Entity e=getEntity(epolseq.getEntity_id());
  if (e == null) {
    System.err.println(""String_Node_Str"" + epolseq.getEntity_id() + ""String_Node_Str"");
    return;
  }
  Chain entityChain=getEntityChain(epolseq.getEntity_id());
  AminoAcid g=new AminoAcidImpl();
  g.setRecordType(AminoAcid.SEQRESRECORD);
  try {
    g.setPDBName(epolseq.getMon_id());
    Character code1=StructureTools.convert_3code_1code(epolseq.getMon_id());
    g.setAminoType(code1);
    g.setPDBCode(epolseq.getNum());
    entityChain.addGroup(g);
  }
 catch (  PDBParseException ex) {
    if (StructureTools.isNucleotide(epolseq.getMon_id())) {
      NucleotideImpl n=new NucleotideImpl();
      n.setPDBCode(epolseq.getNum());
      entityChain.addGroup(n);
    }
 else {
      logger.warning(ex.getMessage());
    }
  }
catch (  IllegalSymbolException ex) {
    logger.warning(ex.getMessage());
  }
}","/** 
 * The EntityPolySeq object provide the amino acid sequence objects for the Entities. Later on the entities are mapped to the BioJava Chain and Compound objects.
 * @param epolseq the EntityPolySeq record for one amino acid
 */
public void newEntityPolySeq(EntityPolySeq epolseq){
  if (DEBUG)   System.out.println(""String_Node_Str"" + epolseq);
  Entity e=getEntity(epolseq.getEntity_id());
  if (e == null) {
    System.err.println(""String_Node_Str"" + epolseq.getEntity_id() + ""String_Node_Str"");
    return;
  }
  Chain entityChain=getEntityChain(epolseq.getEntity_id());
  AminoAcid g=new AminoAcidImpl();
  g.setRecordType(AminoAcid.SEQRESRECORD);
  try {
    g.setPDBName(epolseq.getMon_id());
    Character code1=StructureTools.convert_3code_1code(epolseq.getMon_id());
    g.setAminoType(code1);
    g.setPDBCode(epolseq.getNum());
    entityChain.addGroup(g);
  }
 catch (  PDBParseException ex) {
    if (StructureTools.isNucleotide(epolseq.getMon_id())) {
      NucleotideImpl n=new NucleotideImpl();
      n.setPDBCode(epolseq.getNum());
      entityChain.addGroup(n);
    }
 else {
      logger.warning(ex.getMessage() + ""String_Node_Str"");
      HetatomImpl h=new HetatomImpl();
      try {
        h.setPDBName(epolseq.getMon_id());
        h.setPDBCode(epolseq.getNum());
        entityChain.addGroup(h);
      }
 catch (      PDBParseException exc) {
        System.err.println(""String_Node_Str"" + epolseq.getMon_id());
      }
    }
  }
catch (  IllegalSymbolException ex) {
    HetatomImpl h=new HetatomImpl();
    try {
      h.setPDBName(epolseq.getMon_id());
      h.setPDBCode(epolseq.getNum());
      entityChain.addGroup(h);
    }
 catch (    PDBParseException exc) {
      System.err.println(""String_Node_Str"" + epolseq.getMon_id() + ""String_Node_Str""+ ex.getMessage());
    }
  }
}",0.7459677419354839
17180,"public void newAtomSite(AtomSite atom){
  boolean startOfNewChain=false;
  String chain_id=atom.getLabel_asym_id();
  String fullname=fixFullAtomName(atom.getLabel_atom_id());
  String recordName=atom.getGroup_PDB();
  String residueNumber=atom.getAuth_seq_id();
  String groupCode3=atom.getLabel_comp_id();
  Character aminoCode1=null;
  if (recordName.equals(""String_Node_Str""))   aminoCode1=StructureTools.get1LetterCode(groupCode3);
  String insCode=atom.getPdbx_PDB_ins_code();
  if (!insCode.equals(""String_Node_Str"")) {
    residueNumber+=insCode;
  }
  long seq_id=-1;
  try {
    seq_id=Long.parseLong(atom.getLabel_seq_id());
  }
 catch (  NumberFormatException e) {
  }
  if (current_chain == null) {
    current_chain=new ChainImpl();
    current_chain.setName(chain_id);
    current_model.add(current_chain);
    startOfNewChain=true;
  }
  if (!chain_id.equals(current_chain.getName())) {
    startOfNewChain=true;
    current_chain.addGroup(current_group);
    Chain testchain;
    testchain=isKnownChain(current_chain.getName(),current_model);
    if (testchain == null) {
      current_model.add(current_chain);
    }
    testchain=isKnownChain(chain_id,current_model);
    if (testchain != null) {
      current_chain=(ChainImpl)testchain;
    }
 else {
      current_chain=new ChainImpl();
      current_chain.setName(chain_id);
    }
  }
  String nmrModel=atom.getPdbx_PDB_model_num();
  if (current_nmr_model == null) {
    current_nmr_model=nmrModel;
  }
  if (!current_nmr_model.equals(nmrModel)) {
    current_nmr_model=nmrModel;
    if (current_chain != null) {
      current_chain.addGroup(current_group);
    }
    structure.setNmr(true);
    structure.addModel(current_model);
    current_model=new ArrayList<Chain>();
    current_chain=null;
    current_group=null;
  }
  if (current_group == null) {
    current_group=getNewGroup(recordName,aminoCode1,seq_id);
    current_group.setPDBCode(residueNumber);
    try {
      current_group.setPDBName(groupCode3);
    }
 catch (    PDBParseException e) {
      System.err.println(e.getMessage());
    }
  }
  if (startOfNewChain) {
    current_group=getNewGroup(recordName,aminoCode1,seq_id);
    current_group.setPDBCode(residueNumber);
    try {
      current_group.setPDBName(groupCode3);
    }
 catch (    PDBParseException e) {
      e.printStackTrace();
    }
  }
  if (!residueNumber.equals(current_group.getPDBCode())) {
    current_chain.addGroup(current_group);
    current_group=getNewGroup(recordName,aminoCode1,seq_id);
    current_group.setPDBCode(residueNumber);
    try {
      current_group.setPDBName(groupCode3);
    }
 catch (    PDBParseException e) {
      e.printStackTrace();
    }
  }
  if (headerOnly)   return;
  atomCount++;
  if (parseCAOnly) {
    if (!fullname.equals(""String_Node_Str"")) {
      atomCount--;
      return;
    }
  }
  Atom a=convertAtom(atom);
  current_group.addAtom(a);
}","public void newAtomSite(AtomSite atom){
  boolean startOfNewChain=false;
  String chain_id=atom.getLabel_asym_id();
  String fullname=fixFullAtomName(atom.getLabel_atom_id());
  String recordName=atom.getGroup_PDB();
  String residueNumber=atom.getAuth_seq_id();
  String groupCode3=atom.getLabel_comp_id();
  Character aminoCode1=null;
  if (recordName.equals(""String_Node_Str""))   aminoCode1=StructureTools.get1LetterCode(groupCode3);
  String insCode=atom.getPdbx_PDB_ins_code();
  if (!insCode.equals(""String_Node_Str"")) {
    residueNumber+=insCode;
  }
  long seq_id=-1;
  try {
    seq_id=Long.parseLong(atom.getLabel_seq_id());
  }
 catch (  NumberFormatException e) {
  }
  String nmrModel=atom.getPdbx_PDB_model_num();
  if (current_nmr_model == null) {
    current_nmr_model=nmrModel;
  }
  if (!current_nmr_model.equals(nmrModel)) {
    current_nmr_model=nmrModel;
    if (current_chain != null) {
      current_chain.addGroup(current_group);
    }
    structure.setNmr(true);
    structure.addModel(current_model);
    current_model=new ArrayList<Chain>();
    current_chain=null;
    current_group=null;
  }
  if (current_chain == null) {
    current_chain=new ChainImpl();
    current_chain.setName(chain_id);
    current_model.add(current_chain);
    startOfNewChain=true;
  }
  if (!chain_id.equals(current_chain.getName())) {
    startOfNewChain=true;
    current_chain.addGroup(current_group);
    Chain testchain;
    testchain=isKnownChain(current_chain.getName(),current_model);
    if (testchain != null && testchain.getName().equals(chain_id)) {
    }
 else {
      testchain=isKnownChain(chain_id,current_model);
    }
    if (testchain == null) {
      current_chain=new ChainImpl();
      current_chain.setName(chain_id);
    }
 else {
      current_chain=testchain;
    }
    if (!current_model.contains(current_chain))     current_model.add(current_chain);
  }
  if (current_group == null) {
    current_group=getNewGroup(recordName,aminoCode1,seq_id);
    current_group.setPDBCode(residueNumber);
    try {
      current_group.setPDBName(groupCode3);
    }
 catch (    PDBParseException e) {
      System.err.println(e.getMessage());
    }
  }
  if (startOfNewChain) {
    current_group=getNewGroup(recordName,aminoCode1,seq_id);
    current_group.setPDBCode(residueNumber);
    try {
      current_group.setPDBName(groupCode3);
    }
 catch (    PDBParseException e) {
      e.printStackTrace();
    }
  }
  if (!residueNumber.equals(current_group.getPDBCode())) {
    current_chain.addGroup(current_group);
    current_group=getNewGroup(recordName,aminoCode1,seq_id);
    current_group.setPDBCode(residueNumber);
    try {
      current_group.setPDBName(groupCode3);
    }
 catch (    PDBParseException e) {
      e.printStackTrace();
    }
  }
  if (headerOnly)   return;
  atomCount++;
  if (parseCAOnly) {
    if (!fullname.equals(""String_Node_Str"")) {
      atomCount--;
      return;
    }
  }
  Atom a=convertAtom(atom);
  current_group.addAtom(a);
}",0.7544604927782498
17181,"public void documentEnd(){
  if (current_chain != null) {
    current_chain.addGroup(current_group);
    if (isKnownChain(current_chain.getName(),current_model) == null) {
      current_model.add(current_chain);
    }
  }
 else {
    if (DEBUG) {
      System.err.println(""String_Node_Str"");
    }
  }
  structure.addModel(current_model);
  for (  StructAsym asym : structAsyms) {
    if (DEBUG)     System.out.println(""String_Node_Str"" + asym.getEntity_id() + ""String_Node_Str""+ asym.getId());
    Chain s=getEntityChain(asym.getEntity_id());
    Chain seqres=(Chain)s.clone();
    seqres.setName(asym.getId());
    seqResChains.add(seqres);
  }
  if (alignSeqRes) {
    SeqRes2AtomAligner aligner=new SeqRes2AtomAligner();
    aligner.align(structure,seqResChains);
  }
  Set<String> asymIds=asymStrandId.keySet();
  for (int i=0; i < structure.nrModels(); i++) {
    List<Chain> model=structure.getModel(i);
    for (    Chain chain : model) {
      for (      String asym : asymIds) {
        if (chain.getName().equals(asym)) {
          if (DEBUG)           System.out.println(""String_Node_Str"" + asym + ""String_Node_Str""+ asymStrandId.get(asym));
          chain.setName(asymStrandId.get(asym));
          break;
        }
      }
    }
  }
}","public void documentEnd(){
  if (current_chain != null) {
    current_chain.addGroup(current_group);
    if (isKnownChain(current_chain.getName(),current_model) == null) {
      current_model.add(current_chain);
    }
  }
 else {
    if (DEBUG) {
      System.err.println(""String_Node_Str"");
    }
  }
  structure.addModel(current_model);
  for (  StructAsym asym : structAsyms) {
    if (DEBUG)     System.out.println(""String_Node_Str"" + asym.getEntity_id() + ""String_Node_Str""+ asym.getId());
    Chain s=getEntityChain(asym.getEntity_id());
    Chain seqres=(Chain)s.clone();
    seqres.setName(asym.getId());
    seqResChains.add(seqres);
    if (DEBUG)     System.out.println(""String_Node_Str"" + asym.getId() + ""String_Node_Str""+ seqres+ ""String_Node_Str"");
  }
  if (alignSeqRes) {
    SeqRes2AtomAligner aligner=new SeqRes2AtomAligner();
    aligner.align(structure,seqResChains);
  }
  Set<String> asymIds=asymStrandId.keySet();
  for (int i=0; i < structure.nrModels(); i++) {
    List<Chain> model=structure.getModel(i);
    List<Chain> pdbChains=new ArrayList<Chain>();
    for (    Chain chain : model) {
      for (      String asym : asymIds) {
        if (chain.getName().equals(asym)) {
          if (DEBUG)           System.out.println(""String_Node_Str"" + asym + ""String_Node_Str""+ asymStrandId.get(asym));
          chain.setName(asymStrandId.get(asym));
          Chain known=isKnownChain(chain.getName(),pdbChains);
          if (known == null) {
            pdbChains.add(chain);
          }
 else {
            for (            Group g : chain.getAtomGroups()) {
              known.addGroup(g);
            }
          }
          break;
        }
      }
    }
    structure.setModel(i,pdbChains);
  }
}",0.5389784946236559
17182,"private static Connection createPostConnection(HttpURLConnection connection) throws IOException {
  final OutputStream outputStream;
  String contentEncoding=connection.getRequestProperty(""String_Node_Str"");
  if (TextUtils.equals(""String_Node_Str"",contentEncoding)) {
    outputStream=new GZIPOutputStream(connection.getOutputStream());
  }
 else {
    outputStream=connection.getOutputStream();
  }
  return new Connection(connection,null,outputStream){
    @Override public void close() throws IOException {
      try {
        int responseCode=connection.getResponseCode();
        if (responseCode >= 300) {
          String responseBody;
          try {
            responseBody=readFully(connection.getInputStream());
          }
 catch (          IOException e) {
            responseBody=""String_Node_Str"" + e.toString();
          }
          throw new HTTPException(responseCode,connection.getResponseMessage(),responseBody);
        }
      }
  finally {
        super.close();
        os.close();
      }
    }
  }
;
}","private static Connection createPostConnection(HttpURLConnection connection) throws IOException {
  final OutputStream outputStream;
  String contentEncoding=connection.getRequestProperty(""String_Node_Str"");
  if (TextUtils.equals(""String_Node_Str"",contentEncoding)) {
    outputStream=new GZIPOutputStream(connection.getOutputStream());
  }
 else {
    outputStream=connection.getOutputStream();
  }
  return new Connection(connection,null,outputStream){
    @Override public void close() throws IOException {
      try {
        int responseCode=connection.getResponseCode();
        if (responseCode >= 300) {
          String responseBody;
          try {
            responseBody=readFully(getInputStream(connection));
          }
 catch (          IOException e) {
            responseBody=""String_Node_Str"" + e.toString();
          }
          throw new HTTPException(responseCode,connection.getResponseMessage(),responseBody);
        }
      }
  finally {
        super.close();
        os.close();
      }
    }
  }
;
}",0.9898107714701602
17183,"private static Connection createGetConnection(HttpURLConnection connection) throws IOException {
  return new Connection(connection,connection.getInputStream(),null){
    @Override public void close() throws IOException {
      super.close();
      is.close();
    }
  }
;
}","private static Connection createGetConnection(HttpURLConnection connection) throws IOException {
  return new Connection(connection,getInputStream(connection),null){
    @Override public void close() throws IOException {
      super.close();
      is.close();
    }
  }
;
}",0.9616087751371116
17184,"private static Connection createPostConnection(HttpURLConnection connection) throws IOException {
  final OutputStream outputStream;
  String contentEncoding=connection.getRequestProperty(""String_Node_Str"");
  if (TextUtils.equals(""String_Node_Str"",contentEncoding)) {
    outputStream=new GZIPOutputStream(connection.getOutputStream());
  }
 else {
    outputStream=connection.getOutputStream();
  }
  return new Connection(connection,null,outputStream){
    @Override public void close() throws IOException {
      try {
        int responseCode=connection.getResponseCode();
        if (responseCode >= 300) {
          String responseBody;
          try {
            responseBody=readFully(connection.getInputStream());
          }
 catch (          IOException e) {
            responseBody=""String_Node_Str"" + e.toString();
          }
          throw new HTTPException(responseCode,connection.getResponseMessage(),responseBody);
        }
      }
  finally {
        super.close();
        os.close();
      }
    }
  }
;
}","private static Connection createPostConnection(HttpURLConnection connection) throws IOException {
  final OutputStream outputStream;
  String contentEncoding=connection.getRequestProperty(""String_Node_Str"");
  if (TextUtils.equals(""String_Node_Str"",contentEncoding)) {
    outputStream=new GZIPOutputStream(connection.getOutputStream());
  }
 else {
    outputStream=connection.getOutputStream();
  }
  return new Connection(connection,null,outputStream){
    @Override public void close() throws IOException {
      try {
        int responseCode=connection.getResponseCode();
        if (responseCode >= 300) {
          String responseBody;
          try {
            responseBody=readFully(getInputStream(connection));
          }
 catch (          IOException e) {
            responseBody=""String_Node_Str"" + e.toString();
          }
          throw new HTTPException(responseCode,connection.getResponseMessage(),responseBody);
        }
      }
  finally {
        super.close();
        os.close();
      }
    }
  }
;
}",0.9898107714701602
17185,"private static Connection createGetConnection(HttpURLConnection connection) throws IOException {
  return new Connection(connection,connection.getInputStream(),null){
    @Override public void close() throws IOException {
      super.close();
      is.close();
    }
  }
;
}","private static Connection createGetConnection(HttpURLConnection connection) throws IOException {
  return new Connection(connection,getInputStream(connection),null){
    @Override public void close() throws IOException {
      super.close();
      is.close();
    }
  }
;
}",0.9616087751371116
17186,"@Test public void testDebugLogWithFormat() throws Exception {
  Logger logger=new Logger(true);
  logger.debug(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<ShadowLog.LogItem> logs=ShadowLog.getLogs();
  assertThat(logs).hasSize(1);
  assertThat(logs.get(0).msg).isEqualTo(""String_Node_Str"");
}","@Test public void testDebugLogWithFormat() throws Exception {
  Logger logger=new Logger(true);
  logger.debug(TEST_OWNER,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<ShadowLog.LogItem> logs=ShadowLog.getLogs();
  assertThat(logs).hasSize(1);
  assertThat(logs.get(0).msg).isEqualTo(""String_Node_Str"");
}",0.98355754857997
17187,"@Test public void disabledLogger() throws Exception {
  Logger logger=new Logger(false);
  logger.debug(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  logger.error(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  List<ShadowLog.LogItem> logs=ShadowLog.getLogs();
  assertThat(logs).isEmpty();
}","@Test public void disabledLogger() throws Exception {
  Logger logger=new Logger(false);
  logger.debug(TEST_OWNER,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  logger.error(TEST_OWNER,""String_Node_Str"",""String_Node_Str"",new Throwable(),""String_Node_Str"",""String_Node_Str"");
  List<ShadowLog.LogItem> logs=ShadowLog.getLogs();
  assertThat(logs).isEmpty();
}",0.5263157894736842
17188,"@Test public void testDebugLogWithNullFormat() throws Exception {
  Logger logger=new Logger(true);
  logger.debug(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  List<ShadowLog.LogItem> logs=ShadowLog.getLogs();
  assertThat(logs).hasSize(1);
  assertThat(logs.get(0).msg).isEqualTo(""String_Node_Str"");
}","@Test public void testDebugLogWithNullFormat() throws Exception {
  Logger logger=new Logger(true);
  logger.debug(TEST_OWNER,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"");
  List<ShadowLog.LogItem> logs=ShadowLog.getLogs();
  assertThat(logs).hasSize(1);
  assertThat(logs.get(0).msg).isEqualTo(""String_Node_Str"");
}",0.9308755760368664
17189,"/** 
 * Calculates the next visited state. Each state contains the information of the partial path explored. To check if the state is the goal state, just check the corresponding node of the state with   {@code currentNode.transition().to().equals(myGoalState)}
 * @return next visited state.
 */
public N next(){
  N current=queue.poll();
  S currentState=current.state();
  open.remove(currentState);
  for (  N successorNode : expander.expand(current)) {
    N successorOpen=open.get(successorNode.state());
    if (successorOpen != null) {
      if (successorOpen.getScore().compareTo(successorNode.getScore()) <= 0) {
        continue;
      }
    }
    N successorClose=closed.get(successorNode.state());
    if (successorClose != null) {
      if (successorClose.getScore().compareTo(successorNode.getScore()) <= 0) {
        continue;
      }
    }
    open.put(successorNode.state(),successorNode);
    queue.add(successorNode);
  }
  closed.put(currentState,current);
  return current;
}","/** 
 * Calculates the next visited state. Each state contains the information of the partial path explored. To check if the state is the goal state, just check the corresponding node of the state with   {@code currentNode.transition().to().equals(myGoalState)}
 * @return next visited state.
 */
public N next(){
  N current=takePromising();
  S currentState=current.state();
  open.remove(currentState);
  for (  N successorNode : expander.expand(current)) {
    N successorOpen=open.get(successorNode.state());
    if (successorOpen != null) {
      if (successorOpen.getScore().compareTo(successorNode.getScore()) <= 0) {
        continue;
      }
    }
    N successorClose=closed.get(successorNode.state());
    if (successorClose != null) {
      if (successorClose.getScore().compareTo(successorNode.getScore()) <= 0) {
        continue;
      }
    }
    open.put(successorNode.state(),successorNode);
    queue.add(successorNode);
  }
  closed.put(currentState,current);
  return current;
}",0.9884827240861292
17190,"@Test public void RomanianProblemAStarTest(){
  final HipsterGraph<City,Double> graph=RomanianProblem.graph();
  Hipster.SearchProblem p=GraphSearchProblem.startingFrom(City.Arad).in(graph).takeCostsFromEdges().useHeuristicFunction(RomanianProblem.heuristicFunction()).build();
  AStar.Iterator it=Hipster.createAStar(p).iterator();
  List<Double> expectedScore=Arrays.asList(366d,393d,413d,415d,417d,418d);
  int i=0;
  while (it.hasNext()) {
    HeuristicNode node=it.next();
    assertEquals(expectedScore.get(i),node.getScore());
    i++;
    if (node.state().equals(City.Bucharest)) {
      break;
    }
  }
}","@Test public void RomanianProblemAStarTest(){
  final HipsterGraph<City,Double> graph=RomanianProblem.graph();
  SearchProblem p=GraphSearchProblem.startingFrom(City.Arad).in(graph).takeCostsFromEdges().useHeuristicFunction(RomanianProblem.heuristicFunction()).build();
  AStar.Iterator it=Hipster.createAStar(p).iterator();
  List<Double> expectedScore=Arrays.asList(366d,393d,413d,415d,417d,418d);
  int i=0;
  while (it.hasNext()) {
    HeuristicNode node=it.next();
    assertEquals(expectedScore.get(i),node.getScore());
    i++;
    if (node.state().equals(City.Bucharest)) {
      break;
    }
  }
}",0.9934426229508196
17191,"@Test public void testWeightedShortestPathSearch(){
  Vertex origin=graph.query().has(""String_Node_Str"",""String_Node_Str"").vertices().iterator().next();
  Vertex dest=graph.query().has(""String_Node_Str"",""String_Node_Str"").vertices().iterator().next();
  HipsterDirectedGraph<Vertex,Edge> adaptedGraph=new JUNGHipsterDirectedGraphAdapter<Vertex,Edge>(new GraphJung(graph));
  Hipster.SearchProblem<Edge,Vertex,WeightedNode<Edge,Vertex,Double>> p=GraphSearchProblem.startingFrom(origin).in(adaptedGraph).extractCostFromEdges(new Function<Edge,Double>(){
    @Override public Double apply(    @Nullable Edge edge){
      return edge.getProperty(""String_Node_Str"");
    }
  }
).build();
  List<String> expectedPath=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<Vertex> shortestPath=Hipster.createAStar(p).search(dest).getOptimalPaths().get(0);
  for (int i=0; i < shortestPath.size(); i++) {
    assertEquals(expectedPath.get(i),shortestPath.get(i).getProperty(""String_Node_Str""));
  }
}","@Test public void testWeightedShortestPathSearch(){
  Vertex origin=graph.query().has(""String_Node_Str"",""String_Node_Str"").vertices().iterator().next();
  Vertex dest=graph.query().has(""String_Node_Str"",""String_Node_Str"").vertices().iterator().next();
  HipsterDirectedGraph<Vertex,Edge> adaptedGraph=new JUNGHipsterDirectedGraphAdapter<Vertex,Edge>(new GraphJung(graph));
  SearchProblem<Edge,Vertex,WeightedNode<Edge,Vertex,Double>> p=GraphSearchProblem.startingFrom(origin).in(adaptedGraph).extractCostFromEdges(new Function<Edge,Double>(){
    @Override public Double apply(    @Nullable Edge edge){
      return edge.getProperty(""String_Node_Str"");
    }
  }
).build();
  List<String> expectedPath=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<Vertex> shortestPath=Hipster.createAStar(p).search(dest).getOptimalPaths().get(0);
  for (int i=0; i < shortestPath.size(); i++) {
    assertEquals(expectedPath.get(i),shortestPath.get(i).getProperty(""String_Node_Str""));
  }
}",0.9961759082217974
17192,"@Test public void testUniformShortestPathSearch(){
  Vertex origin=graph.query().has(""String_Node_Str"",""String_Node_Str"").vertices().iterator().next();
  Vertex dest=graph.query().has(""String_Node_Str"",""String_Node_Str"").vertices().iterator().next();
  HipsterDirectedGraph<Vertex,Edge> adaptedGraph=new JUNGHipsterDirectedGraphAdapter<Vertex,Edge>(new GraphJung(graph));
  Hipster.SearchProblem<Edge,Vertex,WeightedNode<Edge,Vertex,Double>> p=GraphSearchProblem.startingFrom(origin).in(adaptedGraph).takeCostsFromEdges().build();
  List<String> expectedPath=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<Vertex> shortestPath=Hipster.createAStar(p).search(dest).getOptimalPaths().get(0);
  for (int i=0; i < shortestPath.size(); i++) {
    assertEquals(expectedPath.get(i),shortestPath.get(i).getProperty(""String_Node_Str""));
  }
}","@Test public void testUniformShortestPathSearch(){
  Vertex origin=graph.query().has(""String_Node_Str"",""String_Node_Str"").vertices().iterator().next();
  Vertex dest=graph.query().has(""String_Node_Str"",""String_Node_Str"").vertices().iterator().next();
  HipsterDirectedGraph<Vertex,Edge> adaptedGraph=new JUNGHipsterDirectedGraphAdapter<Vertex,Edge>(new GraphJung(graph));
  SearchProblem<Edge,Vertex,WeightedNode<Edge,Vertex,Double>> p=GraphSearchProblem.startingFrom(origin).in(adaptedGraph).takeCostsFromEdges().build();
  List<String> expectedPath=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<Vertex> shortestPath=Hipster.createAStar(p).search(dest).getOptimalPaths().get(0);
  for (int i=0; i < shortestPath.size(); i++) {
    assertEquals(expectedPath.get(i),shortestPath.get(i).getProperty(""String_Node_Str""));
  }
}",0.9954337899543378
17193,"@Override protected SearchResult search(Predicate<N> condition){
  int iteration=0;
  Iterator it=iterator();
  Stopwatch w=Stopwatch.createStarted();
  N currentNode=null;
  N goalNode=null;
  while (it.hasNext()) {
    iteration++;
    it.next();
    if (condition.apply(currentNode)) {
      goalNode=currentNode;
    }
  }
  w.stop();
  if (goalNode != null) {
    N goal=it.explored.get(goalNode.state());
    return new SearchResult(goal,iteration,w);
  }
  return new SearchResult(Collections.<N>emptyList(),iteration,w);
}","@Override public SearchResult search(Predicate<N> condition){
  int iteration=0;
  Iterator it=iterator();
  Stopwatch w=Stopwatch.createStarted();
  N currentNode=null;
  N goalNode=null;
  while (it.hasNext()) {
    iteration++;
    it.next();
    if (condition.apply(currentNode)) {
      goalNode=currentNode;
    }
  }
  w.stop();
  if (goalNode != null) {
    N goal=it.explored.get(goalNode.state());
    return new SearchResult(goal,iteration,w);
  }
  return new SearchResult(Collections.<N>emptyList(),iteration,w);
}",0.9877010406811731
17194,"@Override protected SearchResult search(Predicate<N> condition){
  int iteration=0;
  Iterator it=new Iterator();
  Stopwatch w=Stopwatch.createStarted();
  N currentNode;
  N goalNode=null;
  while (it.hasNext()) {
    iteration++;
    currentNode=it.next();
    if (condition.apply(currentNode)) {
      goalNode=currentNode;
    }
  }
  w.stop();
  if (goalNode != null) {
    Collection<N> solutions=it.nonDominated.get(goalNode.state());
    return new SearchResult(solutions,iteration,w);
  }
  return new SearchResult(Collections.<N>emptyList(),iteration,w);
}","@Override public SearchResult search(Predicate<N> condition){
  int iteration=0;
  Iterator it=new Iterator();
  Stopwatch w=Stopwatch.createStarted();
  N currentNode;
  N goalNode=null;
  while (it.hasNext()) {
    iteration++;
    currentNode=it.next();
    if (condition.apply(currentNode)) {
      goalNode=currentNode;
    }
  }
  w.stop();
  if (goalNode != null) {
    Collection<N> solutions=it.nonDominated.get(goalNode.state());
    return new SearchResult(solutions,iteration,w);
  }
  return new SearchResult(Collections.<N>emptyList(),iteration,w);
}",0.9885057471264368
17195,"public static void main(String[] args) throws InterruptedException {
  System.out.println(Hipster.createDijkstra(GraphSearchProblem.startingFrom(RomanianProblem.City.Arad).to(RomanianProblem.City.Bucharest).in(RomanianProblem.graph())).search());
}","public static void main(String[] args) throws InterruptedException {
  System.out.println(Hipster.createAStar(GraphSearchProblem.startingFrom(RomanianProblem.City.Arad).in(RomanianProblem.graph()).takeCostsFromEdges().build()).search(RomanianProblem.City.Bucharest));
}",0.5609284332688588
17196,"public static void main(String[] args){
  final Puzzle initialState=new Puzzle(new int[]{0,8,7,6,5,4,3,2,1});
  final Puzzle goalState=new Puzzle(new int[]{0,1,2,3,4,5,6,7,8});
  ActionFunction<PuzzleMove,Puzzle> af=new ActionFunction<PuzzleMove,Puzzle>(){
    @Override public Iterable<PuzzleMove> actionsFor(    Puzzle state){
      LinkedList<PuzzleMove> movements=new LinkedList<PuzzleMove>();
      Point gap=state.getTile(0);
      int boardSize=state.getMatrixBoard().length;
      if (gap.getX() > 0 && gap.getX() < boardSize) {
        movements.add(PuzzleMove.UP);
      }
      if (gap.getX() >= 0 && gap.getX() < boardSize - 1) {
        movements.add(PuzzleMove.DOWN);
      }
      if (gap.getY() >= 0 && gap.getY() < boardSize - 1) {
        movements.add(PuzzleMove.RIGHT);
      }
      if (gap.getY() > 0 && gap.getY() < boardSize) {
        movements.add(PuzzleMove.LEFT);
      }
      return movements;
    }
  }
;
  ActionStateTransitionFunction<PuzzleMove,Puzzle> atf=new ActionStateTransitionFunction<PuzzleMove,Puzzle>(){
    @Override public Puzzle apply(    PuzzleMove action,    Puzzle state){
      Point gap=state.getTile(0);
      int[][] board=state.copyBoard();
switch (action) {
case UP:
        board[gap.x][gap.y]=state.getMatrixBoard()[gap.x - 1][gap.y];
      board[gap.x - 1][gap.y]=0;
    break;
case DOWN:
  board[gap.x][gap.y]=state.getMatrixBoard()[gap.x + 1][gap.y];
board[gap.x + 1][gap.y]=0;
break;
case LEFT:
board[gap.x][gap.y]=state.getMatrixBoard()[gap.x][gap.y - 1];
board[gap.x][gap.y - 1]=0;
break;
case RIGHT:
board[gap.x][gap.y]=state.getMatrixBoard()[gap.x][gap.y + 1];
board[gap.x][gap.y + 1]=0;
break;
}
Puzzle successor=new Puzzle(board);
return successor;
}
}
;
CostFunction<PuzzleMove,Puzzle,Double> cf=new CostFunction<PuzzleMove,Puzzle,Double>(){
@Override public Double evaluate(Transition<PuzzleMove,Puzzle> transition){
return 1d;
}
}
;
HeuristicFunction<Puzzle,Double> hf=new HeuristicFunction<Puzzle,Double>(){
@Override public Double estimate(Puzzle state){
int mdistance=0;
int[][] board=state.getMatrixBoard();
int size=board.length;
for (int x=0; x < size; x++) for (int y=0; y < size; y++) {
int value=board[x][y];
Point goalTile=goalState.getTile(value);
if (value != 0) {
int dx=x - goalTile.x;
int dy=y - goalTile.y;
mdistance+=Math.abs(dx) + Math.abs(dy);
}
}
return (double)mdistance;
}
}
;
Hipster.SearchProblem<PuzzleMove,Puzzle,WeightedNode<PuzzleMove,Puzzle,Double>> p=ProblemBuilder.create().initialState(initialState).goalState(goalState).defineProblemWithExplicitActions().useActionFunction(af).useTransitionFunction(atf).useCostFunction(cf).useHeuristicFunction(hf).build();
System.out.println(Hipster.createAStar(p).search());
}","public static void main(String[] args){
  final Puzzle initialState=new Puzzle(new int[]{0,8,7,6,5,4,3,2,1});
  final Puzzle goalState=new Puzzle(new int[]{0,1,2,3,4,5,6,7,8});
  ActionFunction<PuzzleMove,Puzzle> af=new ActionFunction<PuzzleMove,Puzzle>(){
    @Override public Iterable<PuzzleMove> actionsFor(    Puzzle state){
      LinkedList<PuzzleMove> movements=new LinkedList<PuzzleMove>();
      Point gap=state.getTile(0);
      int boardSize=state.getMatrixBoard().length;
      if (gap.getX() > 0 && gap.getX() < boardSize) {
        movements.add(PuzzleMove.UP);
      }
      if (gap.getX() >= 0 && gap.getX() < boardSize - 1) {
        movements.add(PuzzleMove.DOWN);
      }
      if (gap.getY() >= 0 && gap.getY() < boardSize - 1) {
        movements.add(PuzzleMove.RIGHT);
      }
      if (gap.getY() > 0 && gap.getY() < boardSize) {
        movements.add(PuzzleMove.LEFT);
      }
      return movements;
    }
  }
;
  ActionStateTransitionFunction<PuzzleMove,Puzzle> atf=new ActionStateTransitionFunction<PuzzleMove,Puzzle>(){
    @Override public Puzzle apply(    PuzzleMove action,    Puzzle state){
      Point gap=state.getTile(0);
      int[][] board=state.copyBoard();
switch (action) {
case UP:
        board[gap.x][gap.y]=state.getMatrixBoard()[gap.x - 1][gap.y];
      board[gap.x - 1][gap.y]=0;
    break;
case DOWN:
  board[gap.x][gap.y]=state.getMatrixBoard()[gap.x + 1][gap.y];
board[gap.x + 1][gap.y]=0;
break;
case LEFT:
board[gap.x][gap.y]=state.getMatrixBoard()[gap.x][gap.y - 1];
board[gap.x][gap.y - 1]=0;
break;
case RIGHT:
board[gap.x][gap.y]=state.getMatrixBoard()[gap.x][gap.y + 1];
board[gap.x][gap.y + 1]=0;
break;
}
Puzzle successor=new Puzzle(board);
return successor;
}
}
;
CostFunction<PuzzleMove,Puzzle,Double> cf=new CostFunction<PuzzleMove,Puzzle,Double>(){
@Override public Double evaluate(Transition<PuzzleMove,Puzzle> transition){
return 1d;
}
}
;
HeuristicFunction<Puzzle,Double> hf=new HeuristicFunction<Puzzle,Double>(){
@Override public Double estimate(Puzzle state){
int mdistance=0;
int[][] board=state.getMatrixBoard();
int size=board.length;
for (int x=0; x < size; x++) for (int y=0; y < size; y++) {
int value=board[x][y];
Point goalTile=goalState.getTile(value);
if (value != 0) {
int dx=x - goalTile.x;
int dy=y - goalTile.y;
mdistance+=Math.abs(dx) + Math.abs(dy);
}
}
return (double)mdistance;
}
}
;
Hipster.SearchProblem<PuzzleMove,Puzzle,WeightedNode<PuzzleMove,Puzzle,Double>> p=ProblemBuilder.create().initialState(initialState).defineProblemWithExplicitActions().useActionFunction(af).useTransitionFunction(atf).useCostFunction(cf).useHeuristicFunction(hf).build();
System.out.println(Hipster.createAStar(p).search(goalState));
}",0.9944629014396456
17197,"public static void main(String[] args){
  final int size=8;
  HeuristicSearchProblem<Void,NQueens,Double> p=ProblemBuilder.create().initialState(new NQueens(size)).defineProblemWithoutActions().useTransitionFunction(new StateTransitionFunction<NQueens>(){
    @Override public Iterable<NQueens> successorsOf(    NQueens state){
      Set<NQueens> states=new HashSet<NQueens>();
      for (int i=0; i < size; i++) {
        for (int j=0; j < size; j++) {
          if (state.getQueens()[i] != j) {
            int[] queens=Arrays.copyOf(state.getQueens(),size);
            queens[i]=j;
            states.add(new NQueens(queens));
          }
        }
      }
      return states;
    }
  }
).useCostFunction(new CostFunction<Void,NQueens,Double>(){
    @Override public Double evaluate(    Transition<Void,NQueens> transition){
      return 0d;
    }
  }
).useHeuristicFunction(new HeuristicFunction<NQueens,Double>(){
    @Override public Double estimate(    NQueens state){
      return (double)state.attackedQueens();
    }
  }
).build();
  System.out.println(""String_Node_Str"" + p.getInitialState().attackedQueens() + ""String_Node_Str"");
  System.out.println(p.getInitialState());
  System.out.println(""String_Node_Str"");
  System.out.println(Hipster.createHillClimbing(p,true).search(new Predicate<WeightedNode<Void,NQueens,Double>>(){
    @Override public boolean apply(    WeightedNode<Void,NQueens,Double> node){
      return node.getScore().equals(0d);
    }
  }
));
  System.out.println(""String_Node_Str"");
  HillClimbing<Void,NQueens,Double,WeightedNode<Void,NQueens,Double>>.EHCIter it=Hipster.createHillClimbing(p,true).iterator();
  int iteration=0;
  Double best=it.getBestScore();
  while (it.hasNext()) {
    iteration++;
    WeightedNode<Void,NQueens,Double> node=it.next();
    if (node.getScore() < best) {
      best=node.getScore();
      System.out.println(""String_Node_Str"" + best + ""String_Node_Str""+ iteration);
    }
    int attacked=node.state().attackedQueens();
    if (attacked == 0) {
      System.out.println(""String_Node_Str"");
      System.out.println(node);
      break;
    }
  }
}","public static void main(String[] args){
  final int size=8;
  Hipster.SearchProblem<Void,NQueens,WeightedNode<Void,NQueens,Double>> p=ProblemBuilder.create().initialState(new NQueens(size)).defineProblemWithoutActions().useTransitionFunction(new StateTransitionFunction<NQueens>(){
    @Override public Iterable<NQueens> successorsOf(    NQueens state){
      Set<NQueens> states=new HashSet<NQueens>();
      for (int i=0; i < size; i++) {
        for (int j=0; j < size; j++) {
          if (state.getQueens()[i] != j) {
            int[] queens=Arrays.copyOf(state.getQueens(),size);
            queens[i]=j;
            states.add(new NQueens(queens));
          }
        }
      }
      return states;
    }
  }
).useCostFunction(new CostFunction<Void,NQueens,Double>(){
    @Override public Double evaluate(    Transition<Void,NQueens> transition){
      return 0d;
    }
  }
).useHeuristicFunction(new HeuristicFunction<NQueens,Double>(){
    @Override public Double estimate(    NQueens state){
      return (double)state.attackedQueens();
    }
  }
).build();
  System.out.println(""String_Node_Str"" + p.getInitialNode().state().attackedQueens() + ""String_Node_Str"");
  System.out.println(p.getInitialNode().state());
  System.out.println(""String_Node_Str"");
  System.out.println(Hipster.createHillClimbing(p,true).search(new Predicate<WeightedNode<Void,NQueens,Double>>(){
    @Override public boolean apply(    WeightedNode<Void,NQueens,Double> node){
      return node.getScore().equals(0d);
    }
  }
));
  System.out.println(""String_Node_Str"");
  HillClimbing<Void,NQueens,Double,WeightedNode<Void,NQueens,Double>>.EHCIter it=Hipster.createHillClimbing(p,true).iterator();
  int iteration=0;
  Double best=it.getBestScore();
  while (it.hasNext()) {
    iteration++;
    WeightedNode<Void,NQueens,Double> node=it.next();
    if (node.getScore() < best) {
      best=node.getScore();
      System.out.println(""String_Node_Str"" + best + ""String_Node_Str""+ iteration);
    }
    int attacked=node.state().attackedQueens();
    if (attacked == 0) {
      System.out.println(""String_Node_Str"");
      System.out.println(node);
      break;
    }
  }
}",0.985981308411215
17198,"public <E>GraphProblemBuilder<E> in(final HipsterGraph<V,E> graph){
  TransitionFunction<E,V> tf;
  if (graph instanceof HipsterDirectedGraph) {
    final HipsterDirectedGraph<V,E> dg=(HipsterDirectedGraph<V,E>)graph;
    tf=new TransitionFunction<E,V>(){
      @Override public Iterable<Transition<E,V>> transitionsFrom(      final V state){
        return Iterables.transform(dg.outgoingEdgesOf(state),new Function<GraphEdge<V,E>,Transition<E,V>>(){
          @Override public Transition<E,V> apply(          GraphEdge<V,E> edge){
            return Transition.create(state,edge.getEdgeValue(),edge.getVertex2());
          }
        }
);
      }
    }
;
  }
 else {
    tf=new TransitionFunction<E,V>(){
      @Override public Iterable<Transition<E,V>> transitionsFrom(      final V state){
        return Iterables.transform(graph.edgesOf(state),new Function<GraphEdge<V,E>,Transition<E,V>>(){
          @Override public Transition<E,V> apply(          GraphEdge<V,E> edge){
            V oppositeVertex=edge.getVertex1().equals(state) ? edge.getVertex2() : edge.getVertex1();
            return Transition.create(state,edge.getEdgeValue(),oppositeVertex);
          }
        }
);
      }
    }
;
  }
  return new GraphProblemBuilder<E>(tf,graph);
}","public <E>WeightType<E> in(final HipsterGraph<V,E> graph){
  TransitionFunction<E,V> tf;
  if (graph instanceof HipsterDirectedGraph) {
    final HipsterDirectedGraph<V,E> dg=(HipsterDirectedGraph<V,E>)graph;
    tf=new TransitionFunction<E,V>(){
      @Override public Iterable<Transition<E,V>> transitionsFrom(      final V state){
        return Iterables.transform(dg.outgoingEdgesOf(state),new Function<GraphEdge<V,E>,Transition<E,V>>(){
          @Override public Transition<E,V> apply(          GraphEdge<V,E> edge){
            return Transition.create(state,edge.getEdgeValue(),edge.getVertex2());
          }
        }
);
      }
    }
;
  }
 else {
    tf=new TransitionFunction<E,V>(){
      @Override public Iterable<Transition<E,V>> transitionsFrom(      final V state){
        return Iterables.transform(graph.edgesOf(state),new Function<GraphEdge<V,E>,Transition<E,V>>(){
          @Override public Transition<E,V> apply(          GraphEdge<V,E> edge){
            V oppositeVertex=edge.getVertex1().equals(state) ? edge.getVertex2() : edge.getVertex1();
            return Transition.create(state,edge.getEdgeValue(),oppositeVertex);
          }
        }
);
      }
    }
;
  }
  return new WeightType<E>(tf);
}",0.9694041867954912
17199,"@Test public void RomanianProblemAStarTest(){
  final HipsterGraph<City,Double> graph=RomanianProblem.graph();
  Hipster.SearchComponents<GraphEdge<City,Double>,City,WeightedNode<GraphEdge<City,Double>,City,Double>> p=ProblemBuilder.create().initialState(City.Arad).defineProblemWithExplicitActions().useTransitionFunction(new TransitionFunction<GraphEdge<City,Double>,City>(){
    @Override public Iterable<Transition<GraphEdge<City,Double>,City>> transitionsFrom(    City fromCity){
      Set<Transition<GraphEdge<City,Double>,City>> successors=new HashSet<Transition<GraphEdge<City,Double>,City>>();
      for (      GraphEdge<City,Double> edge : graph.edgesOf(fromCity)) {
        City toCity=edge.getVertex1().equals(fromCity) ? edge.getVertex2() : fromCity;
        successors.add(Transition.create(fromCity,edge,toCity));
      }
      return successors;
    }
  }
).useCostFunction(new CostFunction<GraphEdge<City,Double>,City,Double>(){
    @Override public Double evaluate(    Transition<GraphEdge<City,Double>,City> transition){
      return transition.getAction().getEdgeValue();
    }
  }
).useHeuristicFunction(new HeuristicFunction<City,Double>(){
    @Override public Double estimate(    City state){
      return RomanianProblem.heuristics().get(state);
    }
  }
).build();
  AStar<GraphEdge<City,Double>,City,Double,WeightedNode<GraphEdge<City,Double>,City,Double>>.AStarIter it=Hipster.createAStar(p).iterator();
  List<Double> expectedScore=Arrays.asList(366d,393d,413d,415d,417d,418d);
  int i=0;
  while (it.hasNext()) {
    WeightedNode<GraphEdge<City,Double>,City,Double> node=it.next();
    assertEquals(expectedScore.get(i),node.getScore());
    i++;
    if (node.state().equals(City.Bucharest)) {
      break;
    }
  }
}","@Test public void RomanianProblemAStarTest(){
  final HipsterGraph<City,Double> graph=RomanianProblem.graph();
  Hipster.SearchComponents<GraphEdge<City,Double>,City,WeightedNode<GraphEdge<City,Double>,City,Double>> p=ProblemBuilder.create().initialState(City.Arad).defineProblemWithExplicitActions().useTransitionFunction(new TransitionFunction<GraphEdge<City,Double>,City>(){
    @Override public Iterable<Transition<GraphEdge<City,Double>,City>> transitionsFrom(    City fromCity){
      Set<Transition<GraphEdge<City,Double>,City>> successors=new HashSet<Transition<GraphEdge<City,Double>,City>>();
      for (      GraphEdge<City,Double> edge : graph.edgesOf(fromCity)) {
        City toCity=edge.getVertexAdjacentTo(fromCity);
        successors.add(Transition.create(fromCity,edge,toCity));
      }
      return successors;
    }
  }
).useCostFunction(new CostFunction<GraphEdge<City,Double>,City,Double>(){
    @Override public Double evaluate(    Transition<GraphEdge<City,Double>,City> transition){
      return transition.getAction().getEdgeValue();
    }
  }
).useHeuristicFunction(new HeuristicFunction<City,Double>(){
    @Override public Double estimate(    City state){
      return RomanianProblem.heuristics().get(state);
    }
  }
).build();
  AStar<GraphEdge<City,Double>,City,Double,WeightedNode<GraphEdge<City,Double>,City,Double>>.AStarIter it=Hipster.createAStar(p).iterator();
  List<Double> expectedScore=Arrays.asList(366d,393d,413d,415d,417d,418d);
  int i=0;
  while (it.hasNext()) {
    WeightedNode<GraphEdge<City,Double>,City,Double> node=it.next();
    assertEquals(expectedScore.get(i),node.getScore());
    i++;
    if (node.state().equals(City.Bucharest)) {
      break;
    }
  }
}",0.985289875973464
17200,"@Override public Iterable<Transition<GraphEdge<City,Double>,City>> transitionsFrom(City fromCity){
  Set<Transition<GraphEdge<City,Double>,City>> successors=new HashSet<Transition<GraphEdge<City,Double>,City>>();
  for (  GraphEdge<City,Double> edge : graph.edgesOf(fromCity)) {
    City toCity=edge.getVertex1().equals(fromCity) ? edge.getVertex2() : fromCity;
    successors.add(Transition.create(fromCity,edge,toCity));
  }
  return successors;
}","@Override public Iterable<Transition<GraphEdge<City,Double>,City>> transitionsFrom(City fromCity){
  Set<Transition<GraphEdge<City,Double>,City>> successors=new HashSet<Transition<GraphEdge<City,Double>,City>>();
  for (  GraphEdge<City,Double> edge : graph.edgesOf(fromCity)) {
    City toCity=edge.getVertexAdjacentTo(fromCity);
    successors.add(Transition.create(fromCity,edge,toCity));
  }
  return successors;
}",0.7520184544405998
17201,"@BeforeClass public static void setUp() throws Exception {
  testGraph=GraphBuilder.newGraph().connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(4d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(2d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(5d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(10d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(3d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(11d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(4d).buildDirectedGraph();
}","@BeforeClass public static void setUp() throws Exception {
  testGraph=GraphBuilder.create().connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(4d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(2d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(5d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(10d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(3d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(11d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(4d).buildDirectedGraph();
}",0.9891500904159132
17202,"@Test public void negativeCycleTest(){
  HipsterDirectedGraph<String,Double> graph=GraphBuilder.newGraph().connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(1d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(1d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(-2d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(1d).buildDirectedGraph();
}","@Test public void negativeCycleTest(){
  HipsterDirectedGraph<String,Double> graph=GraphBuilder.create().connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(1d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(1d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(-2d).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(1d).buildDirectedGraph();
}",0.9814814814814816
17203,"@Test public void test(){
  HipsterDirectedGraph<String,String> graph=GraphBuilder.newGraph().connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").buildDirectedGraph();
  Hipster.createDepthFirstSearch(GraphSearchProblem.from(""String_Node_Str"").to(""String_Node_Str"").in(graph).withoutCosts()).search(new Algorithm.SearchListener<UnweightedNode<String,String>>(){
    @Override public void handle(    UnweightedNode<String,String> node){
      System.out.println(node);
    }
  }
);
}","@Test public void test(){
  HipsterDirectedGraph<String,String> graph=GraphBuilder.create().connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(""String_Node_Str"").buildDirectedGraph();
  Hipster.createDepthFirstSearch(GraphSearchProblem.from(""String_Node_Str"").to(""String_Node_Str"").in(graph).withoutCosts()).search(new Algorithm.SearchListener<UnweightedNode<String,String>>(){
    @Override public void handle(    UnweightedNode<String,String> node){
      System.out.println(node);
    }
  }
);
}",0.9960185799601858
17204,"@Test public void test(){
  final HipsterDirectedGraph<String,Cost> graph=GraphBuilder.newGraph().connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(7d,1d)).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(1d,7d)).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(8d,4d)).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(2d,1d)).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(2d,2d)).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(1d,1d)).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(6d,4d)).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(2d,2d)).buildDirectedGraph();
  BinaryFunction<Cost> f=new BinaryFunction<Cost>(){
    @Override public Cost apply(    Cost a,    Cost b){
      return new Cost(a.c1 + b.c1,a.c2 + b.c2);
    }
  }
;
  Cost identity=new Cost(0d,0d);
  Cost max=new Cost(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);
  BinaryOperation<Cost> bf=new BinaryOperation<Cost>(f,identity,max);
  System.out.println(Hipster.createMultiobjectiveLS(GraphSearchProblem.from(""String_Node_Str"").to(""String_Node_Str"").in(graph).withGenericCosts(bf)).search());
}","@Test public void test(){
  final HipsterDirectedGraph<String,Cost> graph=GraphBuilder.create().connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(7d,1d)).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(1d,7d)).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(8d,4d)).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(2d,1d)).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(2d,2d)).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(1d,1d)).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(6d,4d)).connect(""String_Node_Str"").to(""String_Node_Str"").withEdge(new Cost(2d,2d)).buildDirectedGraph();
  BinaryFunction<Cost> f=new BinaryFunction<Cost>(){
    @Override public Cost apply(    Cost a,    Cost b){
      return new Cost(a.c1 + b.c1,a.c2 + b.c2);
    }
  }
;
  Cost identity=new Cost(0d,0d);
  Cost max=new Cost(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);
  BinaryOperation<Cost> bf=new BinaryOperation<Cost>(f,identity,max);
  System.out.println(Hipster.createMultiobjectiveLS(GraphSearchProblem.from(""String_Node_Str"").to(""String_Node_Str"").in(graph).withGenericCosts(bf)).search());
}",0.994281045751634
17205,"private EHCIter(){
  N initial=factory.makeNode(null,Transition.<A,S>create(null,initialState));
  bestHeuristic=heuristicFunction.estimate(initialState);
  queue.add(initial);
}","private EHCIter(){
  N initial=factory.makeNode(null,new Transition<A,S>(null,null,initialState));
  bestHeuristic=heuristicFunction.estimate(initialState);
  queue.add(initial);
}",0.9553072625698324
17206,"public Transition(S fromState,A action,S state){
  this.fromState=fromState;
  this.action=action;
  this.state=state;
}","public Transition(S fromState,A action,S toState){
  this.fromState=fromState;
  this.action=action;
  this.state=toState;
}",0.9672131147540984
17207,"public static <A,S>Transition<A,S> create(A action,S state){
  return new Transition<A,S>(action,state);
}","public static <S>Transition<Void,S> create(S fromState,S toState){
  return new Transition<Void,S>(fromState,null,toState);
}",0.7878787878787878
17208,"/** 
 * Define a cost function. This immediately defines an InformedSearchProblem
 * @param cf
 */
public <C extends Comparable<C>>InformedSearchProblemBuilder<C> useCostFunction(CostFunction<A,S,C> cf){
  return new InformedSearchProblemBuilder<C>(cf);
}","/** 
 * Define a cost function. This immediately defines an InformedSearchProblem
 * @param cf
 */
public InformedSearchProblemBuilder useCostFunction(CostFunction<A,S,Double> cf){
  return new InformedSearchProblemBuilder(cf);
}",0.9214876033057852
17209,"public HeuristicSearchProblemBuilder useHeuristicFunction(HeuristicFunction<S,C> hf){
  return new HeuristicSearchProblemBuilder(hf);
}","public HeuristicSearchProblemBuilder useHeuristicFunction(HeuristicFunction<S,Double> hf){
  return new HeuristicSearchProblemBuilder(hf);
}",0.9745454545454544
17210,"@Override public CostFunction<A,S,C> getCostFunction(){
  return cf;
}","@Override public CostFunction<A,S,Double> getCostFunction(){
  return cf;
}",0.9517241379310344
17211,"public InformedSearchProblemBuilder(CostFunction<A,S,C> cf){
  this.cf=cf;
}","public InformedSearchProblemBuilder(CostFunction<A,S,Double> cf){
  this.cf=cf;
}",0.9554140127388536
17212,"public HeuristicSearchProblemBuilder(HeuristicFunction<S,C> hf){
  this.hf=hf;
}","public HeuristicSearchProblemBuilder(HeuristicFunction<S,Double> hf){
  this.hf=hf;
}",0.9575757575757576
17213,"public HeuristicSearchProblem<A,S,C> build(){
  return new HeuristicSearchProblem<A,S,C>(){
    @Override public HeuristicFunction<S,C> getHeuristicFunction(){
      return hf;
    }
    @Override public CostFunction<A,S,C> getCostFunction(){
      return cf;
    }
    @Override public TransitionFunction<A,S> getTransitionFunction(){
      return tf;
    }
    @Override public S getInitialState(){
      return initialState;
    }
    @Override public S getGoalState(){
      return optionalGoalState;
    }
  }
;
}","public HeuristicSearchProblem<A,S,Double> build(){
  return new HeuristicSearchProblem<A,S,Double>(){
    @Override public HeuristicFunction<S,Double> getHeuristicFunction(){
      return hf;
    }
    @Override public CostFunction<A,S,Double> getCostFunction(){
      return cf;
    }
    @Override public TransitionFunction<A,S> getTransitionFunction(){
      return tf;
    }
    @Override public S getInitialState(){
      return initialState;
    }
    @Override public S getGoalState(){
      return optionalGoalState;
    }
  }
;
}",0.9734848484848484
17214,"@Override public HeuristicFunction<S,C> getHeuristicFunction(){
  return hf;
}","@Override public HeuristicFunction<S,Double> getHeuristicFunction(){
  return hf;
}",0.9565217391304348
17215,"/** 
 * Heuristics definition for the Romania problem. Goal is considered Bucharest.
 * @return map with the heuristics definition for the Romania problem.
 */
public static Map<City,Double> heuristics(){
  Map<City,Double> map=new HashMap<City,Double>();
  map.put(City.Oradea,380d);
  map.put(City.Zerind,374d);
  map.put(City.Arad,366d);
  map.put(City.Timisoara,329d);
  map.put(City.Lugoj,244d);
  map.put(City.Mehadia,241d);
  map.put(City.Drobeta,242d);
  map.put(City.Craiova,160d);
  map.put(City.Rimnicu_Vilcea,193d);
  map.put(City.Pitesti,100d);
  map.put(City.Sibiu,253d);
  map.put(City.Fagaras,176d);
  map.put(City.Giurgiu,77d);
  map.put(City.Urziceni,80d);
  map.put(City.Hirsova,151d);
  map.put(City.Eforie,161d);
  map.put(City.Vaslui,199d);
  map.put(City.Iasi,226d);
  map.put(City.Neamt,234d);
  map.put(City.Bucharest,0d);
  return map;
}","/** 
 * Heuristics definition for the Romania problem. Goal is considered Bucharest.
 * @return map with the heuristics definition for the Romania problem.
 */
public static Map<City,Double> heuristics(){
  return heuristicMap;
}",0.3901098901098901
17216,"@Override public V sourceVertexOf(E edge){
  for (  Table.Cell<V,V,E> cell : graphTable.cellSet()) {
    if (cell.getValue().equals(edge)) {
      return cell.getRowKey();
    }
  }
  return null;
}","@Override public V sourceVertexOf(GraphEdge<V,E> edge){
  return edge.getVertex1();
}",0.4452296819787986
17217,"@Override public Set<E> outgoingEdgesFrom(V vertex){
  return Sets.newHashSet(graphTable.row(vertex).values());
}","@Override public Set<GraphEdge<V,E>> outgoingEdgesFrom(V vertex){
  return Sets.newHashSet(graphTable.row(vertex).values());
}",0.9456066945606696
17218,"public MutableHashBasedDirectedGraph<V,E> withEdge(E edge){
  graphTable.put(fromVertex,toVertex,edge);
  return MutableHashBasedDirectedGraph.this;
}","public MutableHashBasedDirectedGraph<V,E> withEdge(E edge){
  graphTable.put(fromVertex,toVertex,new GraphEdge<V,E>(fromVertex,toVertex,edge));
  return MutableHashBasedDirectedGraph.this;
}",0.8823529411764706
17219,"@Override public Set<E> edges(){
  return new HashSet<E>(graphTable.values());
}","@Override public Set<GraphEdge<V,E>> edges(){
  return new HashSet<GraphEdge<V,E>>(graphTable.values());
}",0.8602150537634409
17220,"@Override public Set<E> incomingEdgesFrom(V vertex){
  return Sets.newHashSet(graphTable.column(vertex).values());
}","@Override public Set<GraphEdge<V,E>> incomingEdgesFrom(V vertex){
  return Sets.newHashSet(graphTable.column(vertex).values());
}",0.946938775510204
17221,"@Override public V vertexConnectedTo(V vertex,E edge){
  for (  Map.Entry<V,E> entry : graphTable.row(vertex).entrySet()) {
    if (entry.getValue().equals(edge)) {
      return entry.getKey();
    }
  }
  for (  Map.Entry<V,E> entry : graphTable.column(vertex).entrySet()) {
    if (entry.getValue().equals(edge)) {
      return entry.getKey();
    }
  }
  return null;
}","@Override public V vertexConnectedTo(V vertex,GraphEdge<V,E> edge){
  if (edge.getVertex1().equals(vertex)) {
    return edge.getVertex2();
  }
 else   if (edge.getVertex2().equals(vertex)) {
    return edge.getVertex1();
  }
  return null;
}",0.254071661237785
17222,"@Override public V targetVertexOf(E edge){
  for (  Table.Cell<V,V,E> cell : graphTable.cellSet()) {
    if (cell.getValue().equals(edge)) {
      return cell.getColumnKey();
    }
  }
  return null;
}","@Override public V targetVertexOf(GraphEdge<V,E> edge){
  return edge.getVertex2();
}",0.4405594405594406
17223,"@Override public Set<E> edgesWithVertex(V vertex){
  return Sets.union(new HashSet<E>(graphTable.row(vertex).values()),new HashSet<E>(graphTable.column(vertex).values()));
}","@Override public Set<GraphEdge<V,E>> edgesWithVertex(V vertex){
  return Sets.union(new HashSet<GraphEdge<V,E>>(graphTable.row(vertex).values()),new HashSet<GraphEdge<V,E>>(graphTable.column(vertex).values()));
}",0.8831168831168831
17224,"/** 
 * Define a cost function. This immediately defines an InformedSearchProblem
 * @param cf
 */
public <C extends Comparable<C>>InformedSearchProblemBuilder useCostFunction(CostFunction<A,S,C> cf){
  return new InformedSearchProblemBuilder<C>(cf);
}","/** 
 * Define a cost function. This immediately defines an InformedSearchProblem
 * @param cf
 */
public <C extends Comparable<C>>InformedSearchProblemBuilder<C> useCostFunction(CostFunction<A,S,C> cf){
  return new InformedSearchProblemBuilder<C>(cf);
}",0.9940828402366864
17225,"/** 
 * Use a transition function that computes all the actions/states that are reachable from a given state. The function returns a set of ActionState with the action and the new resultant state. If you prefer to define actions separately, use useActionFunction instead.
 * @param transitionFunction
 */
public <A>GenericSearchProblemBuilder<A> useTransitionFunction(TransitionFunction<A,S> transitionFunction){
  return new GenericSearchProblemBuilder<A>(transitionFunction);
}","/** 
 * Use a transition function that computes all the actions/states that are reachable from a given state. The function returns a set of ActionState with the action and the new resultant state. If you prefer to define actions separately, use useActionFunction instead.
 * @param transitionFunction
 */
public GenericSearchProblemBuilder<A> useTransitionFunction(TransitionFunction<A,S> transitionFunction){
  return new GenericSearchProblemBuilder<A>(transitionFunction);
}",0.9968586387434556
17226,"/** 
 * Create a problem model that uses explicit actions. This forces you to implement functions to operate with actions, such as ActionFunction to obtain applicable actions for a given state, or ActionStateTransitionFunction to apply actions to states in order to obtain new states.
 */
public ExplicitActionProblemBuilder defineProblemWithExplicitActions(){
  return new ExplicitActionProblemBuilder();
}","/** 
 * Create a problem model that uses explicit actions. This forces you to implement functions to operate with actions, such as ActionFunction to obtain applicable actions for a given state, or ActionStateTransitionFunction to apply actions to states in order to obtain new states.
 */
public <A>ExplicitActionProblemBuilder<A> defineProblemWithExplicitActions(Class<A> type){
  return new ExplicitActionProblemBuilder<A>();
}",0.9736842105263158
17227,"public InformedSearchProblem<WeightedEdge,V,Double> in(final HipsterDirectedGraph<V,WeightedEdge> graph){
  return new InformedSearchProblem<WeightedEdge,V,Double>(){
    @Override public CostFunction<WeightedEdge,V,Double> getCostFunction(){
      return new CostFunction<WeightedEdge,V,Double>(){
        @Override public Double evaluate(        ActionState<WeightedEdge,V> actionState){
          return actionState.getAction().getValue();
        }
      }
;
    }
    @Override public TransitionFunction<WeightedEdge,V> getTransitionFunction(){
      return new TransitionFunction<WeightedEdge,V>(){
        @Override public Iterable<ActionState<WeightedEdge,V>> transitionsFrom(        V state){
          Set<ActionState<WeightedEdge,V>> as=new HashSet<ActionState<WeightedEdge,V>>();
          for (          WeightedEdge edge : graph.outgoingEdgesFrom(state)) {
            as.add(new ActionState<WeightedEdge,V>(edge,graph.targetVertexOf(edge)));
          }
          return as;
        }
      }
;
    }
    @Override public V getInitialState(){
      return fromVertex;
    }
    @Override public V getGoalState(){
      return toVertex;
    }
  }
;
}","public InformedSearchProblem<WeightedEdge,V,Double> in(final HipsterDirectedGraph<V,WeightedEdge> graph){
  return ProblemBuilder.create().initialState(fromVertex).goalState(toVertex).defineProblemWithExplicitActions(WeightedEdge.class).useTransitionFunction(new TransitionFunction<WeightedEdge,V>(){
    @Override public Iterable<ActionState<WeightedEdge,V>> transitionsFrom(    V state){
      Set<ActionState<WeightedEdge,V>> as=new HashSet<ActionState<WeightedEdge,V>>();
      for (      WeightedEdge edge : graph.outgoingEdgesFrom(state)) {
        as.add(new ActionState<WeightedEdge,V>(edge,graph.targetVertexOf(edge)));
      }
      return as;
    }
  }
).useCostFunction(new CostFunction<WeightedEdge,V,Double>(){
    @Override public Double evaluate(    ActionState<WeightedEdge,V> actionState){
      return actionState.getAction().getValue();
    }
  }
).build();
}",0.3220753793441018
17228,"@Override public List<N> path(){
  LinkedList<N> path=new LinkedList<N>();
  N currentNode=(N)this;
  while (this != null) {
    path.add(currentNode);
    currentNode=currentNode.previousNode;
  }
  return path;
}","@Override public List<N> path(){
  LinkedList<N> path=new LinkedList<N>();
  N currentNode=(N)this;
  while (currentNode != null) {
    path.add(currentNode);
    currentNode=currentNode.previousNode;
  }
  return path;
}",0.9655172413793104
17229,"public DefaultSearchProblem(S initialState,S goalState,TransitionFunction<S> transitionFunction,CostFunction<S,Double> costFunction){
  this.initialState=initialState;
  this.goalState=goalState;
  this.transitionFunction=transitionFunction;
  this.costFunction=costFunction;
  this.nodeFactory=new HeuristicNodeImplFactory<S,Double>(this.costFunction,this.heuristicFunction,BinaryOperation.doubleAdditionOp());
}","public DefaultSearchProblem(S initialState,S goalState,TransitionFunction<S> transitionFunction,CostFunction<S,Double> costFunction,HeuristicFunction<S,Double> hf){
  this.initialState=initialState;
  this.goalState=goalState;
  this.transitionFunction=transitionFunction;
  this.costFunction=costFunction;
  this.heuristicFunction=hf;
  this.nodeFactory=new HeuristicNodeImplFactory<S,Double>(this.costFunction,this.heuristicFunction,BinaryOperation.doubleAdditionOp());
}",0.9322799097065464
17230,"public Set<Point> diff(StringMaze to){
  char[][] maze1=this.toCharArray();
  char[][] maze2=this.toCharArray();
  Set<Point> differentLocations=new HashSet<Point>();
  for (int row=0; row < this.rows; row++) {
    for (int column=0; column < this.columns; column++) {
      if (maze1[row][column] != maze2[row][column]) {
        differentLocations.add(new Point(column,row));
      }
    }
  }
  return differentLocations;
}","public Set<Point> diff(StringMaze to){
  char[][] maze1=this.toCharArray();
  char[][] maze2=to.toCharArray();
  Set<Point> differentLocations=new HashSet<Point>();
  for (int row=0; row < this.rows; row++) {
    for (int column=0; column < this.columns; column++) {
      if (maze1[row][column] != maze2[row][column]) {
        differentLocations.add(new Point(column,row));
      }
    }
  }
  return differentLocations;
}",0.9952941176470588
17231,"public int updateGoodshotsale(final String[] goodsid,final String hotsale,final String creatorid){
  log.debug(""String_Node_Str"");
  try {
    final String queryString=""String_Node_Str"";
    this.getHibernateTemplate().execute(new HibernateCallback(){
      public Object doInHibernate(      Session session) throws HibernateException, SQLException {
        Query query=session.createQuery(queryString);
        int i=0;
        for (        String s : goodsid) {
          query.setParameter(""String_Node_Str"",s);
          query.setParameter(""String_Node_Str"",hotsale);
          query.setParameter(""String_Node_Str"",creatorid);
          i=query.executeUpdate();
          i++;
        }
        if (goodsid.length == i) {
          return i;
        }
 else {
          return 0;
        }
      }
    }
);
  }
 catch (  RuntimeException re) {
    log.error(""String_Node_Str"",re);
    throw re;
  }
  return 0;
}","@SuppressWarnings(""String_Node_Str"") public int updateGoodshotsale(final String[] goodsid,final String hotsale,final String creatorid){
  log.debug(""String_Node_Str"");
  try {
    final String queryString=""String_Node_Str"";
    Integer integer=(Integer)this.getHibernateTemplate().execute(new HibernateCallback(){
      public Object doInHibernate(      Session session) throws HibernateException, SQLException {
        Query query=session.createQuery(queryString);
        int i=0;
        for (        String s : goodsid) {
          query.setParameter(""String_Node_Str"",s);
          query.setParameter(""String_Node_Str"",hotsale);
          query.setParameter(""String_Node_Str"",creatorid);
          i=query.executeUpdate();
          i++;
        }
        if (goodsid.length == i) {
          return i;
        }
 else {
          return 0;
        }
      }
    }
);
  }
 catch (  RuntimeException re) {
    log.error(""String_Node_Str"",re);
    throw re;
  }
  return 0;
}",0.9672995780590716
17232,"public TaskCommunicatorManager(AppContext context,TaskHeartbeatHandler thh,ContainerHeartbeatHandler chh,List<NamedEntityDescriptor> taskCommunicatorDescriptors) throws TezException {
  super(TaskCommunicatorManager.class.getName());
  this.context=context;
  this.taskHeartbeatHandler=thh;
  this.containerHeartbeatHandler=chh;
  Preconditions.checkArgument(taskCommunicatorDescriptors != null && !taskCommunicatorDescriptors.isEmpty(),""String_Node_Str"");
  this.taskCommunicators=new TaskCommunicatorWrapper[taskCommunicatorDescriptors.size()];
  this.taskCommunicatorContexts=new TaskCommunicatorContext[taskCommunicatorDescriptors.size()];
  this.taskCommunicatorServiceWrappers=new ServicePluginLifecycleAbstractService[taskCommunicatorDescriptors.size()];
  for (int i=0; i < taskCommunicatorDescriptors.size(); i++) {
    UserPayload userPayload=taskCommunicatorDescriptors.get(i).getUserPayload();
    taskCommunicatorContexts[i]=new TaskCommunicatorContextImpl(context,this,userPayload,i);
    taskCommunicators[i]=new TaskCommunicatorWrapper(createTaskCommunicator(taskCommunicatorDescriptors.get(i),i));
    taskCommunicatorServiceWrappers[i]=new ServicePluginLifecycleAbstractService(taskCommunicators[i].getTaskCommunicator());
  }
}","public TaskCommunicatorManager(AppContext context,TaskHeartbeatHandler thh,ContainerHeartbeatHandler chh,List<NamedEntityDescriptor> taskCommunicatorDescriptors) throws TezException {
  super(TaskCommunicatorManager.class.getName());
  this.context=context;
  this.taskHeartbeatHandler=thh;
  this.containerHeartbeatHandler=chh;
  if (taskCommunicatorDescriptors == null || taskCommunicatorDescriptors.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.taskCommunicators=new TaskCommunicatorWrapper[taskCommunicatorDescriptors.size()];
  this.taskCommunicatorContexts=new TaskCommunicatorContext[taskCommunicatorDescriptors.size()];
  this.taskCommunicatorServiceWrappers=new ServicePluginLifecycleAbstractService[taskCommunicatorDescriptors.size()];
  for (int i=0; i < taskCommunicatorDescriptors.size(); i++) {
    UserPayload userPayload=taskCommunicatorDescriptors.get(i).getUserPayload();
    taskCommunicatorContexts[i]=new TaskCommunicatorContextImpl(context,this,userPayload,i);
    taskCommunicators[i]=new TaskCommunicatorWrapper(createTaskCommunicator(taskCommunicatorDescriptors.get(i),i));
    taskCommunicatorServiceWrappers[i]=new ServicePluginLifecycleAbstractService(taskCommunicators[i].getTaskCommunicator());
  }
}",0.9144448865897334
17233,"/** 
 * This method removes the map from the cache if index information for this map is loaded(size>0), index information entry in cache will not be removed if it is in the loading phrase(size=0), this prevents corruption of totalMemoryUsed. It should be called when a map output on this tracker is discarded.
 * @param mapId The taskID of this map.
 */
public void removeMap(String mapId){
  IndexInformation info=cache.get(mapId);
  if (info == null || ((info != null) && isUnderConstruction(info))) {
    return;
  }
  info=cache.remove(mapId);
  if (info != null) {
    totalMemoryUsed.addAndGet(-info.getSize());
    if (!queue.remove(mapId)) {
      LOG.warn(""String_Node_Str"" + mapId + ""String_Node_Str"");
    }
  }
 else {
    LOG.info(""String_Node_Str"" + mapId + ""String_Node_Str"");
  }
}","/** 
 * This method removes the map from the cache if index information for this map is loaded(size>0), index information entry in cache will not be removed if it is in the loading phrase(size=0), this prevents corruption of totalMemoryUsed. It should be called when a map output on this tracker is discarded.
 * @param mapId The taskID of this map.
 */
public void removeMap(String mapId){
  IndexInformation info=cache.get(mapId);
  if (info == null || isUnderConstruction(info)) {
    return;
  }
  info=cache.remove(mapId);
  if (info != null) {
    totalMemoryUsed.addAndGet(-info.getSize());
    if (!queue.remove(mapId)) {
      LOG.warn(""String_Node_Str"" + mapId + ""String_Node_Str"");
    }
  }
 else {
    LOG.info(""String_Node_Str"" + mapId + ""String_Node_Str"");
  }
}",0.9872935196950444
17234,"@Override public float getProgress(){
  if (isStopStarted.get()) {
    return 1;
  }
  if (totalResources.getMemory() == 0) {
    totalResources=Resources.clone(getAvailableResources());
    LOG.info(""String_Node_Str"" + totalResources.getMemory() + ""String_Node_Str""+ totalResources.getVirtualCores()+ ""String_Node_Str""+ taskAllocations.size());
  }
  numHeartbeats++;
  preemptIfNeeded();
  return getContext().getProgress();
}","@Override public float getProgress(){
  if (isStopStarted.get()) {
    return 1;
  }
  if (totalResources.getMemory() == 0) {
    totalResources=Resources.clone(getAvailableResources());
    LOG.info(""String_Node_Str"" + totalResources.getMemory() + ""String_Node_Str""+ totalResources.getVirtualCores()+ ""String_Node_Str""+ taskAllocations.size());
  }
synchronized (this) {
    numHeartbeats++;
    preemptIfNeeded();
  }
  return getContext().getProgress();
}",0.9661399548532732
17235,"/** 
 * read the next key - which may be the same as the current key.
 */
private void readNextKey() throws IOException {
  more=in.next();
  if (more) {
    DataInputBuffer nextKeyBytes=in.getKey();
    if (!in.isSameKey()) {
      keyIn.reset(nextKeyBytes.getData(),nextKeyBytes.getPosition(),nextKeyBytes.getLength() - nextKeyBytes.getPosition());
      nextKey=keyDeserializer.deserialize(nextKey);
      hasMoreValues=key != null && (comparator.compare(key,nextKey) == 0);
    }
 else {
      hasMoreValues=in.isSameKey();
    }
  }
 else {
    hasMoreValues=false;
  }
}","/** 
 * read the next key - which may be the same as the current key.
 */
private void readNextKey() throws IOException {
  more=in.next();
  if (more) {
    DataInputBuffer nextKeyBytes=in.getKey();
    if (!in.isSameKey()) {
      keyIn.reset(nextKeyBytes.getData(),nextKeyBytes.getPosition(),nextKeyBytes.getLength() - nextKeyBytes.getPosition());
      nextKey=keyDeserializer.deserialize(nextKey);
      hasMoreValues=(key == null) || (comparator.compare(key,nextKey) == 0);
      if (key == null || false == hasMoreValues) {
        inputKeyCounter.increment(1);
        ++keyCtr;
      }
    }
 else {
      hasMoreValues=in.isSameKey();
    }
  }
 else {
    hasMoreValues=false;
  }
}",0.8857368006304176
17236,"/** 
 * Move to the next K-Vs pair
 * @return true if another pair exists, otherwise false.
 * @throws IOException 
 */
public boolean moveToNext() throws IOException {
  if (isFirstRecord) {
    readNextKey();
    key=nextKey;
    nextKey=null;
    hasMoreValues=more;
    isFirstRecord=false;
  }
 else {
    nextKey();
  }
  return more;
}","/** 
 * Move to the next K-Vs pair
 * @return true if another pair exists, otherwise false.
 * @throws IOException 
 */
public boolean moveToNext() throws IOException {
  if (isFirstRecord) {
    readNextKey();
    key=nextKey;
    nextKey=null;
    isFirstRecord=false;
  }
 else {
    nextKey();
  }
  return more;
}",0.9636363636363636
17237,"/** 
 * Start processing next unique key. 
 */
private void nextKey() throws IOException {
  while (hasMoreValues) {
    readNextKey();
  }
  if (more) {
    inputKeyCounter.increment(1);
    ++keyCtr;
  }
  KEY tmpKey=key;
  key=nextKey;
  nextKey=tmpKey;
  hasMoreValues=more;
}","/** 
 * Start processing next unique key. 
 */
private void nextKey() throws IOException {
  while (hasMoreValues) {
    readNextKey();
  }
  KEY tmpKey=key;
  key=nextKey;
  nextKey=tmpKey;
  hasMoreValues=more;
}",0.8663967611336032
17238,"/** 
 * Tests whether data in valuesIterator matches with sorted input data set.
 * @param valuesIterator
 * @throws IOException
 */
private void verifyIteratorData(ValuesIterator valuesIterator) throws IOException {
  boolean result=true;
  ListMultimap<Writable,Writable> sortedMap=new ImmutableListMultimap.Builder<Writable,Writable>().orderKeysBy(this.correctComparator).putAll(originalData).build();
  Set<Map.Entry<Writable,Writable>> oriKeySet=Sets.newSet();
  oriKeySet.addAll(sortedMap.entries());
  for (  Map.Entry<Writable,Writable> entry : oriKeySet) {
    assertTrue(valuesIterator.moveToNext());
    Writable oriKey=entry.getKey();
    if (!oriKey.equals((Writable)valuesIterator.getKey())) {
      result=false;
      break;
    }
    Iterator<Writable> vItr=valuesIterator.getValues().iterator();
    for (    Writable val : sortedMap.get(oriKey)) {
      assertTrue(vItr.hasNext());
      if (!val.equals((Writable)vItr.next())) {
        result=false;
        break;
      }
    }
  }
  if (expectedTestResult) {
    assertTrue(result);
  }
 else {
    assertFalse(result);
  }
}","/** 
 * Tests whether data in valuesIterator matches with sorted input data set. Returns a list of value counts for each key.
 * @param valuesIterator
 * @return List
 * @throws IOException
 */
private List<Integer> verifyIteratorData(ValuesIterator valuesIterator) throws IOException {
  boolean result=true;
  ArrayList<Integer> sequence=new ArrayList<Integer>();
  ListMultimap<Writable,Writable> sortedMap=new ImmutableListMultimap.Builder<Writable,Writable>().orderKeysBy(this.correctComparator).putAll(originalData).build();
  Set<Map.Entry<Writable,Writable>> oriKeySet=Sets.newSet();
  oriKeySet.addAll(sortedMap.entries());
  for (  Map.Entry<Writable,Writable> entry : oriKeySet) {
    assertTrue(valuesIterator.moveToNext());
    Writable oriKey=entry.getKey();
    if (!oriKey.equals((Writable)valuesIterator.getKey())) {
      result=false;
      break;
    }
    int valueCount=0;
    Iterator<Writable> vItr=valuesIterator.getValues().iterator();
    for (    Writable val : sortedMap.get(oriKey)) {
      assertTrue(vItr.hasNext());
      if (!val.equals((Writable)vItr.next())) {
        result=false;
        break;
      }
      valueCount++;
    }
    sequence.add(valueCount);
    assertTrue(""String_Node_Str"",valueCount > 0);
  }
  if (expectedTestResult) {
    assertTrue(result);
  }
 else {
    assertFalse(result);
  }
  return sequence;
}",0.8883475436459602
17239,"@Override public void serviceStart(){
  try {
    Configuration conf=getConfig();
    InetSocketAddress addr=new InetSocketAddress(0);
    DAGClientAMProtocolBlockingPBServerImpl service=new DAGClientAMProtocolBlockingPBServerImpl(realInstance);
    BlockingService blockingService=DAGClientAMProtocol.newReflectiveBlockingService(service);
    int numHandlers=conf.getInt(TezConfiguration.TEZ_AM_CLIENT_THREAD_COUNT,TezConfiguration.TEZ_AM_CLIENT_THREAD_COUNT_DEFAULT);
    String portRange=conf.get(TezConfiguration.TEZ_AM_CLIENT_AM_PORT_RANGE);
    server=createServer(DAGClientAMProtocolBlockingPB.class,addr,conf,numHandlers,blockingService,portRange);
    if (conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,false)) {
      refreshServiceAcls(conf,new TezAMPolicyProvider());
    }
    server.start();
    bindAddress=NetUtils.getConnectAddress(server);
    LOG.info(""String_Node_Str"" + bindAddress);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new TezUncheckedException(e);
  }
}","@Override public void serviceStart(){
  try {
    Configuration conf=getConfig();
    InetSocketAddress addr=new InetSocketAddress(0);
    DAGClientAMProtocolBlockingPBServerImpl service=new DAGClientAMProtocolBlockingPBServerImpl(realInstance);
    BlockingService blockingService=DAGClientAMProtocol.newReflectiveBlockingService(service);
    int numHandlers=conf.getInt(TezConfiguration.TEZ_AM_CLIENT_THREAD_COUNT,TezConfiguration.TEZ_AM_CLIENT_THREAD_COUNT_DEFAULT);
    server=createServer(DAGClientAMProtocolBlockingPB.class,addr,conf,numHandlers,blockingService,TezConfiguration.TEZ_AM_CLIENT_AM_PORT_RANGE);
    if (conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,false)) {
      refreshServiceAcls(conf,new TezAMPolicyProvider());
    }
    server.start();
    bindAddress=NetUtils.getConnectAddress(server);
    LOG.info(""String_Node_Str"" + bindAddress);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new TezUncheckedException(e);
  }
}",0.9375
17240,"/** 
 * Compute expected size of input bytes to merges, will be used in calculating mergeProgress. This simulates the above merge() method and tries to obtain the number of bytes that are going to be merged in all merges(assuming that there is no combiner called while merging).
 * @param factor mapreduce.task.io.sort.factor
 * @param inMem  number of segments in memory to be merged
 */
long computeBytesInMerges(int factor,int inMem){
  int numSegments=segments.size();
  List<Long> segmentSizes=new ArrayList<Long>(numSegments);
  long totalBytes=0;
  int n=numSegments - inMem;
  int f=getPassFactor(factor,1,n) + inMem;
  n=numSegments;
  for (int i=0; i < numSegments; i++) {
    segmentSizes.add(segments.get(i).getLength());
  }
  boolean considerFinalMerge=considerFinalMergeForProgress;
  while (n > f || considerFinalMerge) {
    if (n <= f) {
      considerFinalMerge=false;
    }
    long mergedSize=0;
    f=Math.min(f,segmentSizes.size());
    for (int j=0; j < f; j++) {
      mergedSize+=segmentSizes.remove(0);
    }
    totalBytes+=mergedSize;
    int pos=Collections.binarySearch(segmentSizes,mergedSize);
    if (pos < 0) {
      pos=-pos - 1;
    }
    segmentSizes.add(pos,mergedSize);
  }
  return totalBytes;
}","/** 
 * Compute expected size of input bytes to merges, will be used in calculating mergeProgress. This simulates the above merge() method and tries to obtain the number of bytes that are going to be merged in all merges(assuming that there is no combiner called while merging).
 * @param factor mapreduce.task.io.sort.factor
 * @param inMem  number of segments in memory to be merged
 */
long computeBytesInMerges(int factor,int inMem){
  int numSegments=segments.size();
  List<Long> segmentSizes=new ArrayList<Long>(numSegments);
  long totalBytes=0;
  int n=numSegments - inMem;
  int f=getPassFactor(factor,1,n) + inMem;
  n=numSegments;
  for (int i=0; i < numSegments; i++) {
    segmentSizes.add(segments.get(i).getLength());
  }
  boolean considerFinalMerge=considerFinalMergeForProgress;
  while (n > f || considerFinalMerge) {
    if (n <= f) {
      considerFinalMerge=false;
    }
    long mergedSize=0;
    f=Math.min(f,segmentSizes.size());
    for (int j=0; j < f; j++) {
      mergedSize+=segmentSizes.remove(0);
    }
    totalBytes+=mergedSize;
    int pos=Collections.binarySearch(segmentSizes,mergedSize);
    if (pos < 0) {
      pos=-pos - 1;
    }
    segmentSizes.add(pos,mergedSize);
    n-=(f - 1);
    f=factor;
  }
  return totalBytes;
}",0.988009592326139
17241,"public static ByteString compressByteArrayToByteString(byte[] inBytes) throws IOException {
  ByteString.Output os=ByteString.newOutput();
  DeflaterOutputStream compressOs=new DeflaterOutputStream(os,new Deflater(Deflater.BEST_COMPRESSION));
  compressOs.write(inBytes);
  compressOs.finish();
  ByteString byteString=os.toByteString();
  return byteString;
}","@Private public static ByteString compressByteArrayToByteString(byte[] inBytes) throws IOException {
  ByteString.Output os=ByteString.newOutput();
  DeflaterOutputStream compressOs=new DeflaterOutputStream(os,new Deflater(Deflater.BEST_COMPRESSION));
  compressOs.write(inBytes);
  compressOs.finish();
  ByteString byteString=os.toByteString();
  return byteString;
}",0.9876543209876544
17242,"public static byte[] decompressByteStringToByteArray(ByteString byteString) throws IOException {
  InflaterInputStream in=new InflaterInputStream(byteString.newInput());
  byte[] bytes=IOUtils.toByteArray(in);
  return bytes;
}","@Private public static byte[] decompressByteStringToByteArray(ByteString byteString) throws IOException {
  InflaterInputStream in=new InflaterInputStream(byteString.newInput());
  byte[] bytes=IOUtils.toByteArray(in);
  return bytes;
}",0.980561555075594
17243,"public TezCountersDelegate(TezCounters original,String taskVertexName,String edgeVertexName,String type){
  this.original=original;
  this.groupModifier=cleanVertexName(taskVertexName) + ""String_Node_Str"" + type+ ""String_Node_Str""+ cleanVertexName(edgeVertexName);
}","public TezCountersDelegate(TezCounters original,String taskVertexName,String edgeVertexName,String type){
  this.original=original;
  this.groupModifier=TezUtils.cleanVertexName(taskVertexName) + ""String_Node_Str"" + type+ ""String_Node_Str""+ TezUtils.cleanVertexName(edgeVertexName);
}",0.9672727272727272
17244,"public FileBasedKVWriter(TezOutputContext outputContext,Configuration conf) throws IOException {
  this.conf=conf;
  this.outputRecordsCounter=outputContext.getCounters().findCounter(TaskCounter.OUTPUT_RECORDS);
  this.outputBytesCounter=outputContext.getCounters().findCounter(TaskCounter.OUTPUT_BYTES);
  this.outputBytesCounterWithOverhead=outputContext.getCounters().findCounter(TaskCounter.OUTPUT_BYTES_WITH_OVERHEAD);
  this.outputMaterializedBytesCounter=outputContext.getCounters().findCounter(TaskCounter.OUTPUT_BYTES_PHYSICAL);
  this.rfs=((LocalFileSystem)FileSystem.getLocal(this.conf)).getRaw();
  keyClass=ConfigUtils.getIntermediateOutputKeyClass(this.conf);
  valClass=ConfigUtils.getIntermediateOutputValueClass(this.conf);
  if (ConfigUtils.shouldCompressIntermediateOutput(this.conf)) {
    Class<? extends CompressionCodec> codecClass=ConfigUtils.getIntermediateOutputCompressorClass(this.conf,DefaultCodec.class);
    codec=ReflectionUtils.newInstance(codecClass,this.conf);
  }
 else {
    codec=null;
  }
  this.ouputFileManager=TezRuntimeUtils.instantiateTaskOutputManager(conf,outputContext);
  LOG.info(""String_Node_Str"" + ""String_Node_Str"" + (codec == null ? ""String_Node_Str"" : codec.getClass().getName()));
  initWriter();
}","public FileBasedKVWriter(TezOutputContext outputContext,Configuration conf) throws IOException {
  this.conf=conf;
  this.outputRecordsCounter=outputContext.getCounters().findCounter(TaskCounter.OUTPUT_RECORDS);
  this.outputBytesCounter=outputContext.getCounters().findCounter(TaskCounter.OUTPUT_BYTES);
  this.outputBytesCounterWithOverhead=outputContext.getCounters().findCounter(TaskCounter.OUTPUT_BYTES_WITH_OVERHEAD);
  this.outputMaterializedBytesCounter=outputContext.getCounters().findCounter(TaskCounter.OUTPUT_BYTES_PHYSICAL);
  this.rfs=((LocalFileSystem)FileSystem.getLocal(this.conf)).getRaw();
  keyClass=ConfigUtils.getIntermediateOutputKeyClass(this.conf);
  valClass=ConfigUtils.getIntermediateOutputValueClass(this.conf);
  if (ConfigUtils.shouldCompressIntermediateOutput(this.conf)) {
    Class<? extends CompressionCodec> codecClass=ConfigUtils.getIntermediateOutputCompressorClass(this.conf,DefaultCodec.class);
    codec=ReflectionUtils.newInstance(codecClass,this.conf);
  }
 else {
    codec=null;
  }
  this.ouputFileManager=TezRuntimeUtils.instantiateTaskOutputManager(conf,outputContext);
  LOG.info(""String_Node_Str"" + ""String_Node_Str"" + (codec == null ? ""String_Node_Str"" : codec.getClass().getName()));
  this.outputPath=ouputFileManager.getOutputFileForWrite();
  LOG.info(""String_Node_Str"" + outputPath);
  this.writer=new IFile.Writer(conf,rfs,outputPath,keyClass,valClass,codec,null,outputBytesCounter);
}",0.925417439703154
17245,"public Fetcher(Configuration job,ShuffleScheduler scheduler,MergeManager merger,ShuffleClientMetrics metrics,Shuffle shuffle,SecretKey jobTokenSecret,boolean ifileReadAhead,int ifileReadAheadLength,CompressionCodec codec,TezInputContext inputContext) throws IOException {
  this.scheduler=scheduler;
  this.merger=merger;
  this.metrics=metrics;
  this.shuffle=shuffle;
  this.id=++nextId;
  this.jobTokenSecret=jobTokenSecret;
  ioErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.IO_ERROR.toString());
  wrongLengthErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_LENGTH.toString());
  badIdErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.BAD_ID.toString());
  wrongMapErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_MAP.toString());
  connectionErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.CONNECTION.toString());
  wrongReduceErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_REDUCE.toString());
  this.ifileReadAhead=ifileReadAhead;
  this.ifileReadAheadLength=ifileReadAheadLength;
  if (codec != null) {
    this.codec=codec;
    this.decompressor=CodecPool.getDecompressor(codec);
  }
 else {
    this.codec=null;
    this.decompressor=null;
  }
  this.connectionTimeout=job.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_CONNECT_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_STALLED_COPY_TIMEOUT);
  this.readTimeout=job.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT);
  this.bufferSize=job.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_BUFFER_SIZE,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_BUFFER_SIZE);
  setName(""String_Node_Str"" + id);
  setDaemon(true);
synchronized (Fetcher.class) {
    sslShuffle=job.getBoolean(TezJobConfig.TEZ_RUNTIME_SHUFFLE_ENABLE_SSL,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_ENABLE_SSL);
    if (sslShuffle && sslFactory == null) {
      sslFactory=new SSLFactory(SSLFactory.Mode.CLIENT,job);
      try {
        sslFactory.init();
      }
 catch (      Exception ex) {
        sslFactory.destroy();
        throw new RuntimeException(ex);
      }
    }
  }
}","public Fetcher(Configuration job,ShuffleScheduler scheduler,MergeManager merger,ShuffleClientMetrics metrics,Shuffle shuffle,SecretKey jobTokenSecret,boolean ifileReadAhead,int ifileReadAheadLength,CompressionCodec codec,TezInputContext inputContext) throws IOException {
  this.scheduler=scheduler;
  this.merger=merger;
  this.metrics=metrics;
  this.shuffle=shuffle;
  this.id=++nextId;
  this.jobTokenSecret=jobTokenSecret;
  ioErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.IO_ERROR.toString());
  wrongLengthErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_LENGTH.toString());
  badIdErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.BAD_ID.toString());
  wrongMapErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_MAP.toString());
  connectionErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.CONNECTION.toString());
  wrongReduceErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_REDUCE.toString());
  this.ifileReadAhead=ifileReadAhead;
  this.ifileReadAheadLength=ifileReadAheadLength;
  if (codec != null) {
    this.codec=codec;
    this.decompressor=CodecPool.getDecompressor(codec);
  }
 else {
    this.codec=null;
    this.decompressor=null;
  }
  this.connectionTimeout=job.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_CONNECT_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_STALLED_COPY_TIMEOUT);
  this.readTimeout=job.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT);
  this.bufferSize=job.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_BUFFER_SIZE,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_BUFFER_SIZE);
  setName(""String_Node_Str"" + TezUtils.cleanVertexName(inputContext.getSourceVertexName()) + ""String_Node_Str""+ id);
  setDaemon(true);
synchronized (Fetcher.class) {
    sslShuffle=job.getBoolean(TezJobConfig.TEZ_RUNTIME_SHUFFLE_ENABLE_SSL,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_ENABLE_SSL);
    if (sslShuffle && sslFactory == null) {
      sslFactory=new SSLFactory(SSLFactory.Mode.CLIENT,job);
      try {
        sslFactory.init();
      }
 catch (      Exception ex) {
        sslFactory.destroy();
        throw new RuntimeException(ex);
      }
    }
  }
}",0.9821038847664776
17246,"@Override public void flush() throws IOException {
  final String uniqueIdentifier=outputContext.getUniqueIdentifier();
  Path finalOutputFile=mapOutputFile.getOutputFileForWrite(0);
  Path finalIndexFile=mapOutputFile.getOutputIndexFileForWrite(0);
  LOG.info(""String_Node_Str"");
  span.end();
  merger.add(span.sort(sorter,comparator));
  spill();
  sortmaster.shutdown();
  largeBuffer=null;
  if (numSpills == 1) {
    final Path filename=mapOutputFile.getSpillFile(0);
    Path indexFilename=mapOutputFile.getSpillIndexFile(0);
    sameVolRename(filename,mapOutputFile.getOutputFileForWriteInVolume(filename));
    sameVolRename(indexFilename,mapOutputFile.getOutputIndexFileForWriteInVolume(indexFilename));
    return;
  }
  FSDataOutputStream finalOut=rfs.create(finalOutputFile,true,4096);
  TezMerger.considerFinalMergeForProgress();
  final TezSpillRecord spillRec=new TezSpillRecord(partitions);
  final ArrayList<TezSpillRecord> indexCacheList=new ArrayList<TezSpillRecord>();
  for (int i=0; i < numSpills; i++) {
    Path indexFilename=mapOutputFile.getSpillIndexFile(i);
    TezSpillRecord spillIndex=new TezSpillRecord(indexFilename,conf);
    indexCacheList.add(spillIndex);
  }
  for (int parts=0; parts < partitions; parts++) {
    List<Segment> segmentList=new ArrayList<Segment>(numSpills);
    for (int i=0; i < numSpills; i++) {
      Path spillFilename=mapOutputFile.getSpillFile(i);
      TezIndexRecord indexRecord=indexCacheList.get(i).getIndex(parts);
      Segment s=new Segment(conf,rfs,spillFilename,indexRecord.getStartOffset(),indexRecord.getPartLength(),codec,ifileReadAhead,ifileReadAheadLength,ifileBufferSize,true);
      segmentList.add(i,s);
    }
    int mergeFactor=this.conf.getInt(TezJobConfig.TEZ_RUNTIME_IO_SORT_FACTOR,TezJobConfig.DEFAULT_TEZ_RUNTIME_IO_SORT_FACTOR);
    boolean sortSegments=segmentList.size() > mergeFactor;
    TezRawKeyValueIterator kvIter=TezMerger.merge(conf,rfs,keyClass,valClass,codec,segmentList,mergeFactor,new Path(uniqueIdentifier),(RawComparator)ConfigUtils.getIntermediateOutputKeyComparator(conf),nullProgressable,sortSegments,null,spilledRecordsCounter,null,null);
    long segmentStart=finalOut.getPos();
    Writer writer=new Writer(conf,finalOut,keyClass,valClass,codec,spilledRecordsCounter,null);
    writer.setRLE(merger.needsRLE());
    if (combiner == null || numSpills < minSpillsForCombine) {
      TezMerger.writeFile(kvIter,writer,nullProgressable,TezJobConfig.DEFAULT_RECORDS_BEFORE_PROGRESS);
    }
 else {
      runCombineProcessor(kvIter,writer);
    }
    writer.close();
    final TezIndexRecord rec=new TezIndexRecord(segmentStart,writer.getRawLength(),writer.getCompressedLength());
    spillRec.putIndex(rec,parts);
  }
  spillRec.writeToFile(finalIndexFile,conf);
  finalOut.close();
  for (int i=0; i < numSpills; i++) {
    Path indexFilename=mapOutputFile.getSpillIndexFile(i);
    Path spillFilename=mapOutputFile.getSpillFile(i);
    rfs.delete(indexFilename,true);
    rfs.delete(spillFilename,true);
  }
}","@Override public void flush() throws IOException {
  final String uniqueIdentifier=outputContext.getUniqueIdentifier();
  Path finalOutputFile=mapOutputFile.getOutputFileForWrite(0);
  Path finalIndexFile=mapOutputFile.getOutputIndexFileForWrite(0);
  LOG.info(""String_Node_Str"");
  span.end();
  merger.add(span.sort(sorter,comparator));
  spill();
  sortmaster.shutdown();
  largeBuffer=null;
  if (numSpills == 1) {
    final Path filename=mapOutputFile.getSpillFile(0);
    Path indexFilename=mapOutputFile.getSpillIndexFile(0);
    sameVolRename(filename,mapOutputFile.getOutputFileForWriteInVolume(filename));
    sameVolRename(indexFilename,mapOutputFile.getOutputIndexFileForWriteInVolume(indexFilename));
    return;
  }
  FSDataOutputStream finalOut=rfs.create(finalOutputFile,true,4096);
  final TezSpillRecord spillRec=new TezSpillRecord(partitions);
  final ArrayList<TezSpillRecord> indexCacheList=new ArrayList<TezSpillRecord>();
  for (int i=0; i < numSpills; i++) {
    Path indexFilename=mapOutputFile.getSpillIndexFile(i);
    TezSpillRecord spillIndex=new TezSpillRecord(indexFilename,conf);
    indexCacheList.add(spillIndex);
  }
  for (int parts=0; parts < partitions; parts++) {
    List<Segment> segmentList=new ArrayList<Segment>(numSpills);
    for (int i=0; i < numSpills; i++) {
      Path spillFilename=mapOutputFile.getSpillFile(i);
      TezIndexRecord indexRecord=indexCacheList.get(i).getIndex(parts);
      Segment s=new Segment(conf,rfs,spillFilename,indexRecord.getStartOffset(),indexRecord.getPartLength(),codec,ifileReadAhead,ifileReadAheadLength,ifileBufferSize,true);
      segmentList.add(i,s);
    }
    int mergeFactor=this.conf.getInt(TezJobConfig.TEZ_RUNTIME_IO_SORT_FACTOR,TezJobConfig.DEFAULT_TEZ_RUNTIME_IO_SORT_FACTOR);
    boolean sortSegments=segmentList.size() > mergeFactor;
    TezRawKeyValueIterator kvIter=TezMerger.merge(conf,rfs,keyClass,valClass,codec,segmentList,mergeFactor,new Path(uniqueIdentifier),(RawComparator)ConfigUtils.getIntermediateOutputKeyComparator(conf),nullProgressable,sortSegments,true,null,spilledRecordsCounter,null,null);
    long segmentStart=finalOut.getPos();
    Writer writer=new Writer(conf,finalOut,keyClass,valClass,codec,spilledRecordsCounter,null);
    writer.setRLE(merger.needsRLE());
    if (combiner == null || numSpills < minSpillsForCombine) {
      TezMerger.writeFile(kvIter,writer,nullProgressable,TezJobConfig.DEFAULT_RECORDS_BEFORE_PROGRESS);
    }
 else {
      runCombineProcessor(kvIter,writer);
    }
    writer.close();
    final TezIndexRecord rec=new TezIndexRecord(segmentStart,writer.getRawLength(),writer.getCompressedLength());
    spillRec.putIndex(rec,parts);
  }
  spillRec.writeToFile(finalIndexFile,conf);
  finalOut.close();
  for (int i=0; i < numSpills; i++) {
    Path indexFilename=mapOutputFile.getSpillIndexFile(i);
    Path spillFilename=mapOutputFile.getSpillFile(i);
    rfs.delete(indexFilename,true);
    rfs.delete(spillFilename,true);
  }
}",0.9916499665998664
17247,"public boolean next() throws IOException {
  if (size() == 0)   return false;
  if (minSegment != null) {
    adjustPriorityQueue(minSegment);
    if (size() == 0) {
      minSegment=null;
      return false;
    }
  }
  minSegment=top();
  if (!minSegment.inMemory()) {
    value.reset(diskIFileValue.getData(),diskIFileValue.getLength());
  }
  long startPos=minSegment.getPosition();
  key=minSegment.getKey();
  minSegment.getValue(value);
  long endPos=minSegment.getPosition();
  totalBytesProcessed+=endPos - startPos;
  mergeProgress.set(totalBytesProcessed * progPerByte);
  return true;
}","@Override public boolean next() throws IOException {
  return false;
}",0.1796407185628742
17248,"public Progress getProgress(){
  return mergeProgress;
}","@Override public Progress getProgress(){
  return progress;
}",0.8547008547008547
17249,"TezRawKeyValueIterator merge(Class keyClass,Class valueClass,int factor,int inMem,Path tmpDir,TezCounter readsCounter,TezCounter writesCounter,TezCounter bytesReadCounter,Progress mergePhase) throws IOException {
  LOG.info(""String_Node_Str"" + segments.size() + ""String_Node_Str"");
  int numSegments=segments.size();
  int origFactor=factor;
  int passNo=1;
  if (mergePhase != null) {
    mergeProgress=mergePhase;
  }
  long totalBytes=computeBytesInMerges(factor,inMem);
  if (totalBytes != 0) {
    progPerByte=1.0f / (float)totalBytes;
  }
  do {
    factor=getPassFactor(factor,passNo,numSegments - inMem);
    if (1 == passNo) {
      factor+=inMem;
    }
    List<Segment> segmentsToMerge=new ArrayList<Segment>();
    int segmentsConsidered=0;
    int numSegmentsToConsider=factor;
    long startBytes=0;
    while (true) {
      List<Segment> mStream=getSegmentDescriptors(numSegmentsToConsider);
      for (      Segment segment : mStream) {
        segment.init(readsCounter,bytesReadCounter);
        long startPos=segment.getPosition();
        boolean hasNext=segment.nextRawKey();
        long endPos=segment.getPosition();
        if (hasNext) {
          startBytes+=endPos - startPos;
          segmentsToMerge.add(segment);
          segmentsConsidered++;
        }
 else {
          segment.close();
          numSegments--;
        }
      }
      if (segmentsConsidered == factor || segments.size() == 0) {
        break;
      }
      numSegmentsToConsider=factor - segmentsConsidered;
    }
    initialize(segmentsToMerge.size());
    clear();
    for (    Segment segment : segmentsToMerge) {
      put(segment);
    }
    if (numSegments <= factor) {
      if (!includeFinalMerge) {
        totalBytesProcessed=0;
        totalBytes=0;
        for (int i=0; i < segmentsToMerge.size(); i++) {
          totalBytes+=segmentsToMerge.get(i).getLength();
        }
      }
      if (totalBytes != 0)       progPerByte=1.0f / (float)totalBytes;
      totalBytesProcessed+=startBytes;
      if (totalBytes != 0)       mergeProgress.set(totalBytesProcessed * progPerByte);
 else       mergeProgress.set(1.0f);
      LOG.info(""String_Node_Str"" + numSegments + ""String_Node_Str""+ (totalBytes - totalBytesProcessed)+ ""String_Node_Str"");
      return this;
    }
 else {
      LOG.info(""String_Node_Str"" + segmentsToMerge.size() + ""String_Node_Str""+ (segments.size() + segmentsToMerge.size()));
      long bytesProcessedInPrevMerges=totalBytesProcessed;
      totalBytesProcessed+=startBytes;
      long approxOutputSize=0;
      for (      Segment s : segmentsToMerge) {
        approxOutputSize+=s.getLength() + ChecksumFileSystem.getApproxChkSumLength(s.getLength());
      }
      Path tmpFilename=new Path(tmpDir,""String_Node_Str"").suffix(""String_Node_Str"" + passNo);
      Path outputFile=lDirAlloc.getLocalPathForWrite(tmpFilename.toString(),approxOutputSize,conf);
      Writer writer=new Writer(conf,fs,outputFile,keyClass,valueClass,codec,writesCounter,null);
      writeFile(this,writer,reporter,recordsBeforeProgress);
      writer.close();
      this.close();
      Segment tempSegment=new Segment(conf,fs,outputFile,codec,ifileReadAhead,ifileReadAheadLength,ifileBufferSize,false);
      int pos=Collections.binarySearch(segments,tempSegment,segmentComparator);
      if (pos < 0) {
        pos=-pos - 1;
      }
      segments.add(pos,tempSegment);
      numSegments=segments.size();
      long inputBytesOfThisMerge=totalBytesProcessed - bytesProcessedInPrevMerges;
      totalBytes-=inputBytesOfThisMerge - tempSegment.getLength();
      if (totalBytes != 0) {
        progPerByte=1.0f / (float)totalBytes;
      }
      passNo++;
    }
    factor=origFactor;
  }
 while (true);
}","TezRawKeyValueIterator merge(Class keyClass,Class valueClass,int factor,int inMem,Path tmpDir,TezCounter readsCounter,TezCounter writesCounter,TezCounter bytesReadCounter,Progress mergePhase) throws IOException {
  LOG.info(""String_Node_Str"" + segments.size() + ""String_Node_Str"");
  if (segments.size() == 0) {
    LOG.info(""String_Node_Str"");
    return new EmptyIterator();
  }
  int numSegments=segments.size();
  int origFactor=factor;
  int passNo=1;
  if (mergePhase != null) {
    mergeProgress=mergePhase;
  }
  long totalBytes=computeBytesInMerges(factor,inMem);
  if (totalBytes != 0) {
    progPerByte=1.0f / (float)totalBytes;
  }
  do {
    factor=getPassFactor(factor,passNo,numSegments - inMem);
    if (1 == passNo) {
      factor+=inMem;
    }
    List<Segment> segmentsToMerge=new ArrayList<Segment>();
    int segmentsConsidered=0;
    int numSegmentsToConsider=factor;
    long startBytes=0;
    while (true) {
      List<Segment> mStream=getSegmentDescriptors(numSegmentsToConsider);
      for (      Segment segment : mStream) {
        segment.init(readsCounter,bytesReadCounter);
        long startPos=segment.getPosition();
        boolean hasNext=segment.nextRawKey();
        long endPos=segment.getPosition();
        if (hasNext) {
          startBytes+=endPos - startPos;
          segmentsToMerge.add(segment);
          segmentsConsidered++;
        }
 else {
          segment.close();
          numSegments--;
        }
      }
      if (segmentsConsidered == factor || segments.size() == 0) {
        break;
      }
      numSegmentsToConsider=factor - segmentsConsidered;
    }
    initialize(segmentsToMerge.size());
    clear();
    for (    Segment segment : segmentsToMerge) {
      put(segment);
    }
    if (numSegments <= factor) {
      if (!considerFinalMergeForProgress) {
        totalBytesProcessed=0;
        totalBytes=0;
        for (int i=0; i < segmentsToMerge.size(); i++) {
          totalBytes+=segmentsToMerge.get(i).getLength();
        }
      }
      if (totalBytes != 0)       progPerByte=1.0f / (float)totalBytes;
      totalBytesProcessed+=startBytes;
      if (totalBytes != 0)       mergeProgress.set(totalBytesProcessed * progPerByte);
 else       mergeProgress.set(1.0f);
      LOG.info(""String_Node_Str"" + numSegments + ""String_Node_Str""+ (totalBytes - totalBytesProcessed)+ ""String_Node_Str"");
      return this;
    }
 else {
      LOG.info(""String_Node_Str"" + segmentsToMerge.size() + ""String_Node_Str""+ (segments.size() + segmentsToMerge.size()));
      long bytesProcessedInPrevMerges=totalBytesProcessed;
      totalBytesProcessed+=startBytes;
      long approxOutputSize=0;
      for (      Segment s : segmentsToMerge) {
        approxOutputSize+=s.getLength() + ChecksumFileSystem.getApproxChkSumLength(s.getLength());
      }
      Path tmpFilename=new Path(tmpDir,""String_Node_Str"").suffix(""String_Node_Str"" + passNo);
      Path outputFile=lDirAlloc.getLocalPathForWrite(tmpFilename.toString(),approxOutputSize,conf);
      Writer writer=new Writer(conf,fs,outputFile,keyClass,valueClass,codec,writesCounter,null);
      writeFile(this,writer,reporter,recordsBeforeProgress);
      writer.close();
      this.close();
      Segment tempSegment=new Segment(conf,fs,outputFile,codec,ifileReadAhead,ifileReadAheadLength,ifileBufferSize,false);
      int pos=Collections.binarySearch(segments,tempSegment,segmentComparator);
      if (pos < 0) {
        pos=-pos - 1;
      }
      segments.add(pos,tempSegment);
      numSegments=segments.size();
      long inputBytesOfThisMerge=totalBytesProcessed - bytesProcessedInPrevMerges;
      totalBytes-=inputBytesOfThisMerge - tempSegment.getLength();
      if (totalBytes != 0) {
        progPerByte=1.0f / (float)totalBytes;
      }
      passNo++;
    }
    factor=origFactor;
  }
 while (true);
}",0.4741939763831763
17250,"public void close() throws IOException {
  Segment segment;
  while ((segment=pop()) != null) {
    segment.close();
  }
}","@Override public void close() throws IOException {
}",0.4827586206896552
17251,"public MergeQueue(Configuration conf,FileSystem fs,List<Segment> segments,RawComparator comparator,Progressable reporter,boolean sortSegments,CompressionCodec codec){
  this(conf,fs,segments,comparator,reporter,sortSegments);
  this.codec=codec;
}","public MergeQueue(Configuration conf,FileSystem fs,List<Segment> segments,RawComparator comparator,Progressable reporter,boolean sortSegments,CompressionCodec codec,boolean considerFinalMergeForProgress){
  this(conf,fs,segments,comparator,reporter,sortSegments,considerFinalMergeForProgress);
  this.codec=codec;
}",0.8790035587188612
17252,"public DataInputBuffer getKey() throws IOException {
  return key;
}","@Override public DataInputBuffer getKey() throws IOException {
  throw new RuntimeException(""String_Node_Str"");
}",0.7071823204419889
17253,"public DataInputBuffer getValue() throws IOException {
  return value;
}","@Override public DataInputBuffer getValue() throws IOException {
  throw new RuntimeException(""String_Node_Str"");
}",0.7058823529411765
17254,"/** 
 * Compute expected size of input bytes to merges, will be used in calculating mergeProgress. This simulates the above merge() method and tries to obtain the number of bytes that are going to be merged in all merges(assuming that there is no combiner called while merging).
 * @param factor mapreduce.task.io.sort.factor
 * @param inMem  number of segments in memory to be merged
 */
long computeBytesInMerges(int factor,int inMem){
  int numSegments=segments.size();
  List<Long> segmentSizes=new ArrayList<Long>(numSegments);
  long totalBytes=0;
  int n=numSegments - inMem;
  int f=getPassFactor(factor,1,n) + inMem;
  n=numSegments;
  for (int i=0; i < numSegments; i++) {
    segmentSizes.add(segments.get(i).getLength());
  }
  boolean considerFinalMerge=includeFinalMerge;
  while (n > f || considerFinalMerge) {
    if (n <= f) {
      considerFinalMerge=false;
    }
    long mergedSize=0;
    f=Math.min(f,segmentSizes.size());
    for (int j=0; j < f; j++) {
      mergedSize+=segmentSizes.remove(0);
    }
    totalBytes+=mergedSize;
    int pos=Collections.binarySearch(segmentSizes,mergedSize);
    if (pos < 0) {
      pos=-pos - 1;
    }
    segmentSizes.add(pos,mergedSize);
    n-=(f - 1);
    f=factor;
  }
  return totalBytes;
}","/** 
 * Compute expected size of input bytes to merges, will be used in calculating mergeProgress. This simulates the above merge() method and tries to obtain the number of bytes that are going to be merged in all merges(assuming that there is no combiner called while merging).
 * @param factor mapreduce.task.io.sort.factor
 * @param inMem  number of segments in memory to be merged
 */
long computeBytesInMerges(int factor,int inMem){
  int numSegments=segments.size();
  List<Long> segmentSizes=new ArrayList<Long>(numSegments);
  long totalBytes=0;
  int n=numSegments - inMem;
  int f=getPassFactor(factor,1,n) + inMem;
  n=numSegments;
  for (int i=0; i < numSegments; i++) {
    segmentSizes.add(segments.get(i).getLength());
  }
  boolean considerFinalMerge=considerFinalMergeForProgress;
  while (n > f || considerFinalMerge) {
    if (n <= f) {
      considerFinalMerge=false;
    }
    long mergedSize=0;
    f=Math.min(f,segmentSizes.size());
    for (int j=0; j < f; j++) {
      mergedSize+=segmentSizes.remove(0);
    }
    totalBytes+=mergedSize;
    int pos=Collections.binarySearch(segmentSizes,mergedSize);
    if (pos < 0) {
      pos=-pos - 1;
    }
    segmentSizes.add(pos,mergedSize);
  }
  return totalBytes;
}",0.9775100401606426
17255,"private void mergeParts() throws IOException {
  long finalOutFileSize=0;
  long finalIndexFileSize=0;
  final Path[] filename=new Path[numSpills];
  final String taskIdentifier=outputContext.getUniqueIdentifier();
  for (int i=0; i < numSpills; i++) {
    filename[i]=mapOutputFile.getSpillFile(i);
    finalOutFileSize+=rfs.getFileStatus(filename[i]).getLen();
  }
  if (numSpills == 1) {
    sameVolRename(filename[0],mapOutputFile.getOutputFileForWriteInVolume(filename[0]));
    if (indexCacheList.size() == 0) {
      sameVolRename(mapOutputFile.getSpillIndexFile(0),mapOutputFile.getOutputIndexFileForWriteInVolume(filename[0]));
    }
 else {
      indexCacheList.get(0).writeToFile(mapOutputFile.getOutputIndexFileForWriteInVolume(filename[0]),conf);
    }
    return;
  }
  for (int i=indexCacheList.size(); i < numSpills; ++i) {
    Path indexFileName=mapOutputFile.getSpillIndexFile(i);
    indexCacheList.add(new TezSpillRecord(indexFileName,conf));
  }
  finalOutFileSize+=partitions * APPROX_HEADER_LENGTH;
  finalIndexFileSize=partitions * MAP_OUTPUT_INDEX_RECORD_LENGTH;
  Path finalOutputFile=mapOutputFile.getOutputFileForWrite(finalOutFileSize);
  Path finalIndexFile=mapOutputFile.getOutputIndexFileForWrite(finalIndexFileSize);
  FSDataOutputStream finalOut=rfs.create(finalOutputFile,true,4096);
  if (numSpills == 0) {
    TezSpillRecord sr=new TezSpillRecord(partitions);
    try {
      for (int i=0; i < partitions; i++) {
        long segmentStart=finalOut.getPos();
        Writer writer=new Writer(conf,finalOut,keyClass,valClass,codec,null,null);
        writer.close();
        TezIndexRecord rec=new TezIndexRecord(segmentStart,writer.getRawLength(),writer.getCompressedLength());
        outputBytesWithOverheadCounter.increment(writer.getRawLength());
        sr.putIndex(rec,i);
      }
      sr.writeToFile(finalIndexFile,conf);
    }
  finally {
      finalOut.close();
    }
    return;
  }
 else {
    TezMerger.considerFinalMergeForProgress();
    final TezSpillRecord spillRec=new TezSpillRecord(partitions);
    for (int parts=0; parts < partitions; parts++) {
      List<Segment> segmentList=new ArrayList<Segment>(numSpills);
      for (int i=0; i < numSpills; i++) {
        TezIndexRecord indexRecord=indexCacheList.get(i).getIndex(parts);
        Segment s=new Segment(conf,rfs,filename[i],indexRecord.getStartOffset(),indexRecord.getPartLength(),codec,ifileReadAhead,ifileReadAheadLength,ifileBufferSize,true);
        segmentList.add(i,s);
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"" + taskIdentifier + ""String_Node_Str""+ parts+ ""String_Node_Str""+ i+ ""String_Node_Str""+ indexRecord.getStartOffset()+ ""String_Node_Str""+ indexRecord.getRawLength()+ ""String_Node_Str""+ indexRecord.getPartLength()+ ""String_Node_Str"");
        }
      }
      int mergeFactor=this.conf.getInt(TezJobConfig.TEZ_RUNTIME_IO_SORT_FACTOR,TezJobConfig.DEFAULT_TEZ_RUNTIME_IO_SORT_FACTOR);
      boolean sortSegments=segmentList.size() > mergeFactor;
      TezRawKeyValueIterator kvIter=TezMerger.merge(conf,rfs,keyClass,valClass,codec,segmentList,mergeFactor,new Path(taskIdentifier),(RawComparator)ConfigUtils.getIntermediateOutputKeyComparator(conf),nullProgressable,sortSegments,null,spilledRecordsCounter,additionalSpillBytesRead,null);
      long segmentStart=finalOut.getPos();
      Writer writer=new Writer(conf,finalOut,keyClass,valClass,codec,spilledRecordsCounter,null);
      if (combiner == null || numSpills < minSpillsForCombine) {
        TezMerger.writeFile(kvIter,writer,nullProgressable,TezJobConfig.DEFAULT_RECORDS_BEFORE_PROGRESS);
      }
 else {
        runCombineProcessor(kvIter,writer);
      }
      writer.close();
      final TezIndexRecord rec=new TezIndexRecord(segmentStart,writer.getRawLength(),writer.getCompressedLength());
      spillRec.putIndex(rec,parts);
    }
    spillRec.writeToFile(finalIndexFile,conf);
    finalOut.close();
    for (int i=0; i < numSpills; i++) {
      rfs.delete(filename[i],true);
    }
  }
}","private void mergeParts() throws IOException {
  long finalOutFileSize=0;
  long finalIndexFileSize=0;
  final Path[] filename=new Path[numSpills];
  final String taskIdentifier=outputContext.getUniqueIdentifier();
  for (int i=0; i < numSpills; i++) {
    filename[i]=mapOutputFile.getSpillFile(i);
    finalOutFileSize+=rfs.getFileStatus(filename[i]).getLen();
  }
  if (numSpills == 1) {
    sameVolRename(filename[0],mapOutputFile.getOutputFileForWriteInVolume(filename[0]));
    if (indexCacheList.size() == 0) {
      sameVolRename(mapOutputFile.getSpillIndexFile(0),mapOutputFile.getOutputIndexFileForWriteInVolume(filename[0]));
    }
 else {
      indexCacheList.get(0).writeToFile(mapOutputFile.getOutputIndexFileForWriteInVolume(filename[0]),conf);
    }
    return;
  }
  for (int i=indexCacheList.size(); i < numSpills; ++i) {
    Path indexFileName=mapOutputFile.getSpillIndexFile(i);
    indexCacheList.add(new TezSpillRecord(indexFileName,conf));
  }
  finalOutFileSize+=partitions * APPROX_HEADER_LENGTH;
  finalIndexFileSize=partitions * MAP_OUTPUT_INDEX_RECORD_LENGTH;
  Path finalOutputFile=mapOutputFile.getOutputFileForWrite(finalOutFileSize);
  Path finalIndexFile=mapOutputFile.getOutputIndexFileForWrite(finalIndexFileSize);
  FSDataOutputStream finalOut=rfs.create(finalOutputFile,true,4096);
  if (numSpills == 0) {
    TezSpillRecord sr=new TezSpillRecord(partitions);
    try {
      for (int i=0; i < partitions; i++) {
        long segmentStart=finalOut.getPos();
        Writer writer=new Writer(conf,finalOut,keyClass,valClass,codec,null,null);
        writer.close();
        TezIndexRecord rec=new TezIndexRecord(segmentStart,writer.getRawLength(),writer.getCompressedLength());
        outputBytesWithOverheadCounter.increment(writer.getRawLength());
        sr.putIndex(rec,i);
      }
      sr.writeToFile(finalIndexFile,conf);
    }
  finally {
      finalOut.close();
    }
    return;
  }
 else {
    final TezSpillRecord spillRec=new TezSpillRecord(partitions);
    for (int parts=0; parts < partitions; parts++) {
      List<Segment> segmentList=new ArrayList<Segment>(numSpills);
      for (int i=0; i < numSpills; i++) {
        TezIndexRecord indexRecord=indexCacheList.get(i).getIndex(parts);
        Segment s=new Segment(conf,rfs,filename[i],indexRecord.getStartOffset(),indexRecord.getPartLength(),codec,ifileReadAhead,ifileReadAheadLength,ifileBufferSize,true);
        segmentList.add(i,s);
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"" + taskIdentifier + ""String_Node_Str""+ parts+ ""String_Node_Str""+ i+ ""String_Node_Str""+ indexRecord.getStartOffset()+ ""String_Node_Str""+ indexRecord.getRawLength()+ ""String_Node_Str""+ indexRecord.getPartLength()+ ""String_Node_Str"");
        }
      }
      int mergeFactor=this.conf.getInt(TezJobConfig.TEZ_RUNTIME_IO_SORT_FACTOR,TezJobConfig.DEFAULT_TEZ_RUNTIME_IO_SORT_FACTOR);
      boolean sortSegments=segmentList.size() > mergeFactor;
      TezRawKeyValueIterator kvIter=TezMerger.merge(conf,rfs,keyClass,valClass,codec,segmentList,mergeFactor,new Path(taskIdentifier),(RawComparator)ConfigUtils.getIntermediateOutputKeyComparator(conf),nullProgressable,sortSegments,true,null,spilledRecordsCounter,additionalSpillBytesRead,null);
      long segmentStart=finalOut.getPos();
      Writer writer=new Writer(conf,finalOut,keyClass,valClass,codec,spilledRecordsCounter,null);
      if (combiner == null || numSpills < minSpillsForCombine) {
        TezMerger.writeFile(kvIter,writer,nullProgressable,TezJobConfig.DEFAULT_RECORDS_BEFORE_PROGRESS);
      }
 else {
        runCombineProcessor(kvIter,writer);
      }
      writer.close();
      final TezIndexRecord rec=new TezIndexRecord(segmentStart,writer.getRawLength(),writer.getCompressedLength());
      spillRec.putIndex(rec,parts);
    }
    spillRec.writeToFile(finalIndexFile,conf);
    finalOut.close();
    for (int i=0; i < numSpills; i++) {
      rfs.delete(filename[i],true);
    }
  }
}",0.9934820757081976
17256,"@Override public boolean next() throws IOException {
  return vIter.moveToNext();
}","@Override public boolean next() throws IOException {
  return valuesIter.moveToNext();
}",0.9707602339181286
17257,"@SuppressWarnings(""String_Node_Str"") public Iterable<Object> getCurrentValues() throws IOException {
  return vIter.getValues();
}","@SuppressWarnings(""String_Node_Str"") public Iterable<Object> getCurrentValues() throws IOException {
  return valuesIter.getValues();
}",0.981132075471698
17258,"public Object getCurrentKey() throws IOException {
  return vIter.getKey();
}","public Object getCurrentKey() throws IOException {
  return valuesIter.getKey();
}",0.9685534591194968
17259,"/** 
 * Get a KVReader for the Input.</p> This method will block until the input is ready - i.e. the copy and merge stages are complete. Users can use the isInputReady method to check if the input is ready, which gives an indication of whether this method will block or not. NOTE: All values for the current K-V pair must be read prior to invoking moveToNext. Once moveToNext() is called, the valueIterator from the previous K-V pair will throw an Exception
 * @return a KVReader over the sorted input.
 */
@Override public synchronized KeyValuesReader getReader() throws IOException {
  if (this.numInputs == 0) {
    return new KeyValuesReader(){
      @Override public boolean next() throws IOException {
        return false;
      }
      @Override public Object getCurrentKey() throws IOException {
        throw new RuntimeException(""String_Node_Str"");
      }
      @Override public Iterable<Object> getCurrentValues() throws IOException {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
;
  }
  if (rawIter == null) {
    try {
      waitForInputReady();
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new IOException(""String_Node_Str"",e);
    }
  }
  return new KeyValuesReader(){
    @Override public boolean next() throws IOException {
      return vIter.moveToNext();
    }
    public Object getCurrentKey() throws IOException {
      return vIter.getKey();
    }
    @SuppressWarnings(""String_Node_Str"") public Iterable<Object> getCurrentValues() throws IOException {
      return vIter.getValues();
    }
  }
;
}","/** 
 * Get a KVReader for the Input.</p> This method will block until the input is ready - i.e. the copy and merge stages are complete. Users can use the isInputReady method to check if the input is ready, which gives an indication of whether this method will block or not. NOTE: All values for the current K-V pair must be read prior to invoking moveToNext. Once moveToNext() is called, the valueIterator from the previous K-V pair will throw an Exception
 * @return a KVReader over the sorted input.
 */
@Override public KeyValuesReader getReader() throws IOException {
  TezRawKeyValueIterator rawIterLocal;
synchronized (this) {
    rawIterLocal=rawIter;
    if (this.numInputs == 0) {
      return new KeyValuesReader(){
        @Override public boolean next() throws IOException {
          return false;
        }
        @Override public Object getCurrentKey() throws IOException {
          throw new RuntimeException(""String_Node_Str"");
        }
        @Override public Iterable<Object> getCurrentValues() throws IOException {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
;
    }
  }
  if (rawIterLocal == null) {
    try {
      waitForInputReady();
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new IOException(""String_Node_Str"",e);
    }
  }
  @SuppressWarnings(""String_Node_Str"") ValuesIterator valuesIter=null;
synchronized (this) {
    valuesIter=vIter;
  }
  return new ShuffledMergedKeyValuesReader(valuesIter);
}",0.8154093097913323
17260,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void createValuesIterator() throws IOException {
  vIter=new ValuesIterator(rawIter,(RawComparator)ConfigUtils.getIntermediateInputKeyComparator(conf),ConfigUtils.getIntermediateInputKeyClass(conf),ConfigUtils.getIntermediateInputValueClass(conf),conf,inputKeyCounter,inputValueCounter);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected synchronized void createValuesIterator() throws IOException {
  vIter=new ValuesIterator(rawIter,(RawComparator)ConfigUtils.getIntermediateInputKeyComparator(conf),ConfigUtils.getIntermediateInputKeyClass(conf),ConfigUtils.getIntermediateInputValueClass(conf),conf,inputKeyCounter,inputValueCounter);
}",0.9820689655172414
17261,"/** 
 * Waits for the input to become ready for consumption
 * @throws IOException
 * @throws InterruptedException
 */
public synchronized void waitForInputReady() throws IOException, InterruptedException {
  Preconditions.checkState(isStarted.get(),""String_Node_Str"");
  if (this.numInputs == 0) {
    return;
  }
  rawIter=shuffle.waitForInput();
  createValuesIterator();
}","/** 
 * Waits for the input to become ready for consumption
 * @throws IOException
 * @throws InterruptedException
 */
public void waitForInputReady() throws IOException, InterruptedException {
  Shuffle localShuffleCopy=null;
synchronized (this) {
    Preconditions.checkState(isStarted.get(),""String_Node_Str"");
    if (this.numInputs == 0) {
      return;
    }
    localShuffleCopy=shuffle;
  }
  TezRawKeyValueIterator localRawIter=localShuffleCopy.waitForInput();
synchronized (this) {
    rawIter=localRawIter;
    createValuesIterator();
  }
}",0.7508090614886731
17262,"@Override public synchronized void handleEvents(List<Event> inputEvents){
  if (numInputs == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (!isStarted.get()) {
    if (firstEventReceivedTime == -1) {
      firstEventReceivedTime=System.currentTimeMillis();
    }
    pendingEvents.addAll(inputEvents);
    return;
  }
  shuffle.handleEvents(inputEvents);
}","@Override public void handleEvents(List<Event> inputEvents){
synchronized (this) {
    if (numInputs == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    if (!isStarted.get()) {
      if (firstEventReceivedTime == -1) {
        firstEventReceivedTime=System.currentTimeMillis();
      }
      pendingEvents.addAll(inputEvents);
      return;
    }
  }
  shuffle.handleEvents(inputEvents);
}",0.8505747126436781
17263,"@Private public TezRawKeyValueIterator getIterator() throws IOException, InterruptedException {
  if (this.numInputs == 0) {
    return new TezRawKeyValueIterator(){
      @Override public DataInputBuffer getKey() throws IOException {
        throw new RuntimeException(""String_Node_Str"");
      }
      @Override public DataInputBuffer getValue() throws IOException {
        throw new RuntimeException(""String_Node_Str"");
      }
      @Override public boolean next() throws IOException {
        return false;
      }
      @Override public void close() throws IOException {
      }
      @Override public Progress getProgress(){
        progress.complete();
        return progress;
      }
    }
;
  }
  waitForInputReady();
  return rawIter;
}","@Private public TezRawKeyValueIterator getIterator() throws IOException, InterruptedException {
synchronized (this) {
    if (this.numInputs == 0) {
      return new TezRawKeyValueIterator(){
        @Override public DataInputBuffer getKey() throws IOException {
          throw new RuntimeException(""String_Node_Str"");
        }
        @Override public DataInputBuffer getValue() throws IOException {
          throw new RuntimeException(""String_Node_Str"");
        }
        @Override public boolean next() throws IOException {
          return false;
        }
        @Override public void close() throws IOException {
        }
        @Override public Progress getProgress(){
          progress.complete();
          return progress;
        }
      }
;
    }
  }
  waitForInputReady();
synchronized (this) {
    return rawIter;
  }
}",0.9283018867924528
17264,"@Override public synchronized void handleEvents(List<Event> inputEvents) throws IOException {
  if (numInputs == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (!isStarted.get()) {
    if (firstEventReceivedTime == -1) {
      firstEventReceivedTime=System.currentTimeMillis();
    }
    pendingEvents.addAll(inputEvents);
    return;
  }
  inputEventHandler.handleEvents(inputEvents);
}","@Override public void handleEvents(List<Event> inputEvents) throws IOException {
synchronized (this) {
    if (numInputs == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    if (!isStarted.get()) {
      if (firstEventReceivedTime == -1) {
        firstEventReceivedTime=System.currentTimeMillis();
      }
      pendingEvents.addAll(inputEvents);
      return;
    }
  }
  inputEventHandler.handleEvents(inputEvents);
}",0.930011862396204
17265,"@Override public void setNumPhysicalOutputs(int numOutputs){
  Preconditions.checkArgument(numOutputs == 1,""String_Node_Str"" + this.getClass().getName());
}","@Override public synchronized void setNumPhysicalOutputs(int numOutputs){
  Preconditions.checkArgument(numOutputs == 1,""String_Node_Str"" + this.getClass().getName());
}",0.96
17266,"@Override public KeyValueWriter getWriter() throws Exception {
  return kvWriter;
}","@Override public synchronized KeyValueWriter getWriter() throws Exception {
  return kvWriter;
}",0.9273743016759776
17267,"@Override public void start(){
}","@Override public synchronized void start(){
}",0.8311688311688312
17268,"@Override public List<Event> initialize(TezOutputContext outputContext) throws Exception {
  this.outputContext=outputContext;
  this.conf=TezUtils.createConfFromUserPayload(outputContext.getUserPayload());
  this.conf.setStrings(TezJobConfig.LOCAL_DIRS,outputContext.getWorkDirs());
  this.outputContext.requestInitialMemory(0l,null);
  this.dataViaEventsEnabled=conf.getBoolean(TezJobConfig.TEZ_RUNTIME_BROADCAST_DATA_VIA_EVENTS_ENABLED,TezJobConfig.TEZ_RUNTIME_BROADCAST_DATA_VIA_EVENTS_ENABLED_DEFAULT);
  this.dataViaEventsMaxSize=conf.getInt(TezJobConfig.TEZ_RUNTIME_BROADCAST_DATA_VIA_EVENTS_MAX_SIZE,TezJobConfig.TEZ_RUNTIME_BROADCAST_DATA_VIA_EVENTS_MAX_SIZE_DEFAULT);
  LOG.info(this.getClass().getSimpleName() + ""String_Node_Str"" + ""String_Node_Str""+ dataViaEventsEnabled+ ""String_Node_Str""+ dataViaEventsMaxSize);
  this.kvWriter=new FileBasedKVWriter(outputContext,conf);
  return Collections.emptyList();
}","@Override public synchronized List<Event> initialize(TezOutputContext outputContext) throws Exception {
  this.outputContext=outputContext;
  this.conf=TezUtils.createConfFromUserPayload(outputContext.getUserPayload());
  this.conf.setStrings(TezJobConfig.LOCAL_DIRS,outputContext.getWorkDirs());
  this.outputContext.requestInitialMemory(0l,null);
  this.dataViaEventsEnabled=conf.getBoolean(TezJobConfig.TEZ_RUNTIME_BROADCAST_DATA_VIA_EVENTS_ENABLED,TezJobConfig.TEZ_RUNTIME_BROADCAST_DATA_VIA_EVENTS_ENABLED_DEFAULT);
  this.dataViaEventsMaxSize=conf.getInt(TezJobConfig.TEZ_RUNTIME_BROADCAST_DATA_VIA_EVENTS_MAX_SIZE,TezJobConfig.TEZ_RUNTIME_BROADCAST_DATA_VIA_EVENTS_MAX_SIZE_DEFAULT);
  LOG.info(this.getClass().getSimpleName() + ""String_Node_Str"" + ""String_Node_Str""+ dataViaEventsEnabled+ ""String_Node_Str""+ dataViaEventsMaxSize);
  this.kvWriter=new FileBasedKVWriter(outputContext,conf);
  return Collections.emptyList();
}",0.992984349703184
17269,"@Override public void handleEvents(List<Event> outputEvents){
  throw new TezUncheckedException(""String_Node_Str"");
}","@Override public synchronized void handleEvents(List<Event> outputEvents){
  throw new TezUncheckedException(""String_Node_Str"");
}",0.9473684210526316
17270,"@Override public List<Event> close() throws Exception {
  boolean outputGenerated=this.kvWriter.close();
  DataMovementEventPayloadProto.Builder payloadBuilder=DataMovementEventPayloadProto.newBuilder();
  LOG.info(""String_Node_Str"" + this.kvWriter.getRawLength() + ""String_Node_Str""+ this.kvWriter.getCompressedLength());
  if (dataViaEventsEnabled && outputGenerated && this.kvWriter.getCompressedLength() <= dataViaEventsMaxSize) {
    LOG.info(""String_Node_Str"" + this.kvWriter.getCompressedLength());
    byte[] data=this.kvWriter.getData();
    DataProto.Builder dataProtoBuilder=DataProto.newBuilder();
    dataProtoBuilder.setData(ByteString.copyFrom(data));
    dataProtoBuilder.setRawLength((int)this.kvWriter.getRawLength());
    dataProtoBuilder.setCompressedLength((int)this.kvWriter.getCompressedLength());
    payloadBuilder.setData(dataProtoBuilder.build());
  }
  String host=getHost();
  ByteBuffer shuffleMetadata=outputContext.getServiceProviderMetaData(ShuffleUtils.SHUFFLE_HANDLER_SERVICE_ID);
  int shufflePort=ShuffleUtils.deserializeShuffleProviderMetaData(shuffleMetadata);
  if (!outputGenerated) {
    LOG.info(""String_Node_Str"");
    BitSet emptyPartitions=new BitSet();
    emptyPartitions.set(0);
    ByteString emptyPartitionsBytesString=TezUtils.compressByteArrayToByteString(TezUtils.toByteArray(emptyPartitions));
    payloadBuilder.setEmptyPartitions(emptyPartitionsBytesString);
  }
  if (outputGenerated) {
    payloadBuilder.setHost(host);
    payloadBuilder.setPort(shufflePort);
    payloadBuilder.setPathComponent(outputContext.getUniqueIdentifier());
  }
  DataMovementEventPayloadProto payloadProto=payloadBuilder.build();
  DataMovementEvent dmEvent=new DataMovementEvent(0,payloadProto.toByteArray());
  List<Event> events=Lists.newArrayListWithCapacity(1);
  events.add(dmEvent);
  return events;
}","@Override public synchronized List<Event> close() throws Exception {
  boolean outputGenerated=this.kvWriter.close();
  DataMovementEventPayloadProto.Builder payloadBuilder=DataMovementEventPayloadProto.newBuilder();
  LOG.info(""String_Node_Str"" + this.kvWriter.getRawLength() + ""String_Node_Str""+ this.kvWriter.getCompressedLength());
  if (dataViaEventsEnabled && outputGenerated && this.kvWriter.getCompressedLength() <= dataViaEventsMaxSize) {
    LOG.info(""String_Node_Str"" + this.kvWriter.getCompressedLength());
    byte[] data=this.kvWriter.getData();
    DataProto.Builder dataProtoBuilder=DataProto.newBuilder();
    dataProtoBuilder.setData(ByteString.copyFrom(data));
    dataProtoBuilder.setRawLength((int)this.kvWriter.getRawLength());
    dataProtoBuilder.setCompressedLength((int)this.kvWriter.getCompressedLength());
    payloadBuilder.setData(dataProtoBuilder.build());
  }
  String host=getHost();
  ByteBuffer shuffleMetadata=outputContext.getServiceProviderMetaData(ShuffleUtils.SHUFFLE_HANDLER_SERVICE_ID);
  int shufflePort=ShuffleUtils.deserializeShuffleProviderMetaData(shuffleMetadata);
  if (!outputGenerated) {
    LOG.info(""String_Node_Str"");
    BitSet emptyPartitions=new BitSet();
    emptyPartitions.set(0);
    ByteString emptyPartitionsBytesString=TezUtils.compressByteArrayToByteString(TezUtils.toByteArray(emptyPartitions));
    payloadBuilder.setEmptyPartitions(emptyPartitionsBytesString);
  }
  if (outputGenerated) {
    payloadBuilder.setHost(host);
    payloadBuilder.setPort(shufflePort);
    payloadBuilder.setPathComponent(outputContext.getUniqueIdentifier());
  }
  DataMovementEventPayloadProto payloadProto=payloadBuilder.build();
  DataMovementEvent dmEvent=new DataMovementEvent(0,payloadProto.toByteArray());
  List<Event> events=Lists.newArrayListWithCapacity(1);
  events.add(dmEvent);
  return events;
}",0.9964893329732648
17271,"private InputAttemptIdentifier[] copyMapOutput(MapHost host,DataInputStream input){
  MapOutput mapOutput=null;
  InputAttemptIdentifier srcAttemptId=null;
  long decompressedLength=-1;
  long compressedLength=-1;
  try {
    long startTime=System.currentTimeMillis();
    int forReduce=-1;
    try {
      ShuffleHeader header=new ShuffleHeader();
      header.readFields(input);
      if (!header.mapId.startsWith(InputAttemptIdentifier.PATH_PREFIX)) {
        throw new IllegalArgumentException(""String_Node_Str"" + header.mapId + ""String_Node_Str""+ header.forReduce);
      }
      srcAttemptId=scheduler.getIdentifierForFetchedOutput(header.mapId,header.forReduce);
      compressedLength=header.compressedLength;
      decompressedLength=header.uncompressedLength;
      forReduce=header.forReduce;
    }
 catch (    IllegalArgumentException e) {
      badIdErrs.increment(1);
      LOG.warn(""String_Node_Str"",e);
      return new InputAttemptIdentifier[]{srcAttemptId=getNextRemainingAttempt()};
    }
    if (!verifySanity(compressedLength,decompressedLength,forReduce,remaining,srcAttemptId)) {
      if (srcAttemptId == null) {
        LOG.warn(""String_Node_Str"" + getNextRemainingAttempt() + ""String_Node_Str"");
        srcAttemptId=getNextRemainingAttempt();
      }
      assert(srcAttemptId != null);
      return new InputAttemptIdentifier[]{srcAttemptId};
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + srcAttemptId + ""String_Node_Str""+ compressedLength+ ""String_Node_Str""+ decompressedLength);
    }
    mapOutput=merger.reserve(srcAttemptId,decompressedLength,id);
    if (mapOutput.getType() == Type.WAIT) {
      LOG.info(""String_Node_Str"" + id + ""String_Node_Str"");
      return EMPTY_ATTEMPT_ID_ARRAY;
    }
    LOG.info(""String_Node_Str"" + id + ""String_Node_Str""+ mapOutput.getAttemptIdentifier()+ ""String_Node_Str""+ decompressedLength+ ""String_Node_Str""+ compressedLength+ ""String_Node_Str""+ mapOutput.getType());
    if (mapOutput.getType() == Type.MEMORY) {
      shuffleToMemory(host,mapOutput,input,(int)decompressedLength,(int)compressedLength);
    }
 else {
      shuffleToDisk(host,mapOutput,input,compressedLength);
    }
    long endTime=System.currentTimeMillis();
    scheduler.copySucceeded(srcAttemptId,host,compressedLength,decompressedLength,endTime - startTime,mapOutput);
    remaining.remove(srcAttemptId);
    metrics.successFetch();
    return null;
  }
 catch (  IOException ioe) {
    ioErrs.increment(1);
    if (srcAttemptId == null || mapOutput == null) {
      LOG.info(""String_Node_Str"" + id + ""String_Node_Str""+ srcAttemptId+ ""String_Node_Str""+ decompressedLength+ ""String_Node_Str""+ compressedLength,ioe);
      if (srcAttemptId == null) {
        return remaining.toArray(new InputAttemptIdentifier[remaining.size()]);
      }
 else {
        return new InputAttemptIdentifier[]{srcAttemptId};
      }
    }
    LOG.warn(""String_Node_Str"" + srcAttemptId + ""String_Node_Str""+ host.getHostName(),ioe);
    mapOutput.abort();
    metrics.failedFetch();
    return new InputAttemptIdentifier[]{srcAttemptId};
  }
}","private InputAttemptIdentifier[] copyMapOutput(MapHost host,DataInputStream input){
  MapOutput mapOutput=null;
  InputAttemptIdentifier srcAttemptId=null;
  long decompressedLength=-1;
  long compressedLength=-1;
  try {
    long startTime=System.currentTimeMillis();
    int forReduce=-1;
    try {
      ShuffleHeader header=new ShuffleHeader();
      header.readFields(input);
      if (!header.mapId.startsWith(InputAttemptIdentifier.PATH_PREFIX)) {
        throw new IllegalArgumentException(""String_Node_Str"" + header.mapId + ""String_Node_Str""+ header.forReduce);
      }
      srcAttemptId=scheduler.getIdentifierForFetchedOutput(header.mapId,header.forReduce);
      compressedLength=header.compressedLength;
      decompressedLength=header.uncompressedLength;
      forReduce=header.forReduce;
    }
 catch (    IllegalArgumentException e) {
      badIdErrs.increment(1);
      LOG.warn(""String_Node_Str"",e);
      return new InputAttemptIdentifier[]{getNextRemainingAttempt()};
    }
    if (!verifySanity(compressedLength,decompressedLength,forReduce,remaining,srcAttemptId)) {
      if (srcAttemptId == null) {
        LOG.warn(""String_Node_Str"" + getNextRemainingAttempt() + ""String_Node_Str"");
        srcAttemptId=getNextRemainingAttempt();
      }
      assert(srcAttemptId != null);
      return new InputAttemptIdentifier[]{srcAttemptId};
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + srcAttemptId + ""String_Node_Str""+ compressedLength+ ""String_Node_Str""+ decompressedLength);
    }
    mapOutput=merger.reserve(srcAttemptId,decompressedLength,id);
    if (mapOutput.getType() == Type.WAIT) {
      LOG.info(""String_Node_Str"" + id + ""String_Node_Str"");
      return EMPTY_ATTEMPT_ID_ARRAY;
    }
    LOG.info(""String_Node_Str"" + id + ""String_Node_Str""+ mapOutput.getAttemptIdentifier()+ ""String_Node_Str""+ decompressedLength+ ""String_Node_Str""+ compressedLength+ ""String_Node_Str""+ mapOutput.getType());
    if (mapOutput.getType() == Type.MEMORY) {
      shuffleToMemory(host,mapOutput,input,(int)decompressedLength,(int)compressedLength);
    }
 else {
      shuffleToDisk(host,mapOutput,input,compressedLength);
    }
    long endTime=System.currentTimeMillis();
    scheduler.copySucceeded(srcAttemptId,host,compressedLength,decompressedLength,endTime - startTime,mapOutput);
    remaining.remove(srcAttemptId);
    metrics.successFetch();
    return null;
  }
 catch (  IOException ioe) {
    ioErrs.increment(1);
    if (srcAttemptId == null || mapOutput == null) {
      LOG.info(""String_Node_Str"" + id + ""String_Node_Str""+ srcAttemptId+ ""String_Node_Str""+ decompressedLength+ ""String_Node_Str""+ compressedLength,ioe);
      if (srcAttemptId == null) {
        return remaining.toArray(new InputAttemptIdentifier[remaining.size()]);
      }
 else {
        return new InputAttemptIdentifier[]{srcAttemptId};
      }
    }
    LOG.warn(""String_Node_Str"" + srcAttemptId + ""String_Node_Str""+ host.getHostName(),ioe);
    mapOutput.abort();
    metrics.failedFetch();
    return new InputAttemptIdentifier[]{srcAttemptId};
  }
}",0.9978926892527152
17272,"public Fetcher(Configuration job,ShuffleScheduler scheduler,MergeManager merger,ShuffleClientMetrics metrics,Shuffle shuffle,SecretKey jobTokenSecret,boolean ifileReadAhead,int ifileReadAheadLength,CompressionCodec codec,TezInputContext inputContext) throws IOException {
  this.job=job;
  this.scheduler=scheduler;
  this.merger=merger;
  this.metrics=metrics;
  this.shuffle=shuffle;
  this.id=++nextId;
  this.jobTokenSecret=jobTokenSecret;
  ioErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.IO_ERROR.toString());
  wrongLengthErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_LENGTH.toString());
  badIdErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.BAD_ID.toString());
  wrongMapErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_MAP.toString());
  connectionErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.CONNECTION.toString());
  wrongReduceErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_REDUCE.toString());
  this.ifileReadAhead=ifileReadAhead;
  this.ifileReadAheadLength=ifileReadAheadLength;
  if (codec != null) {
    this.codec=codec;
    this.decompressor=CodecPool.getDecompressor(codec);
  }
 else {
    this.codec=null;
    this.decompressor=null;
  }
  this.connectionTimeout=job.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_CONNECT_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_STALLED_COPY_TIMEOUT);
  this.readTimeout=job.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT);
  this.bufferSize=job.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_BUFFER_SIZE,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_BUFFER_SIZE);
  setName(""String_Node_Str"" + id);
  setDaemon(true);
synchronized (Fetcher.class) {
    sslShuffle=job.getBoolean(TezJobConfig.TEZ_RUNTIME_SHUFFLE_ENABLE_SSL,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_ENABLE_SSL);
    if (sslShuffle && sslFactory == null) {
      sslFactory=new SSLFactory(SSLFactory.Mode.CLIENT,job);
      try {
        sslFactory.init();
      }
 catch (      Exception ex) {
        sslFactory.destroy();
        throw new RuntimeException(ex);
      }
    }
  }
}","public Fetcher(Configuration job,ShuffleScheduler scheduler,MergeManager merger,ShuffleClientMetrics metrics,Shuffle shuffle,SecretKey jobTokenSecret,boolean ifileReadAhead,int ifileReadAheadLength,CompressionCodec codec,TezInputContext inputContext) throws IOException {
  this.scheduler=scheduler;
  this.merger=merger;
  this.metrics=metrics;
  this.shuffle=shuffle;
  this.id=++nextId;
  this.jobTokenSecret=jobTokenSecret;
  ioErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.IO_ERROR.toString());
  wrongLengthErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_LENGTH.toString());
  badIdErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.BAD_ID.toString());
  wrongMapErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_MAP.toString());
  connectionErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.CONNECTION.toString());
  wrongReduceErrs=inputContext.getCounters().findCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_REDUCE.toString());
  this.ifileReadAhead=ifileReadAhead;
  this.ifileReadAheadLength=ifileReadAheadLength;
  if (codec != null) {
    this.codec=codec;
    this.decompressor=CodecPool.getDecompressor(codec);
  }
 else {
    this.codec=null;
    this.decompressor=null;
  }
  this.connectionTimeout=job.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_CONNECT_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_STALLED_COPY_TIMEOUT);
  this.readTimeout=job.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT);
  this.bufferSize=job.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_BUFFER_SIZE,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_BUFFER_SIZE);
  setName(""String_Node_Str"" + id);
  setDaemon(true);
synchronized (Fetcher.class) {
    sslShuffle=job.getBoolean(TezJobConfig.TEZ_RUNTIME_SHUFFLE_ENABLE_SSL,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_ENABLE_SSL);
    if (sslShuffle && sslFactory == null) {
      sslFactory=new SSLFactory(SSLFactory.Mode.CLIENT,job);
      try {
        sslFactory.init();
      }
 catch (      Exception ex) {
        sslFactory.destroy();
        throw new RuntimeException(ex);
      }
    }
  }
}",0.9964570416297608
17273,"/** 
 * The crux of the matter...
 * @param host {@link MapHost} from which we need to  shuffle available map-outputs.
 */
@VisibleForTesting protected void copyFromHost(MapHost host) throws IOException {
  List<InputAttemptIdentifier> srcAttempts=scheduler.getMapsForHost(host);
  if (srcAttempts.size() == 0) {
    return;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + id + ""String_Node_Str""+ host+ ""String_Node_Str""+ srcAttempts);
  }
  remaining=new LinkedHashSet<InputAttemptIdentifier>(srcAttempts);
  DataInputStream input;
  boolean connectSucceeded=false;
  try {
    URL url=getMapOutputURL(host,srcAttempts);
    HttpURLConnection connection=openConnection(url);
    String msgToEncode=SecureShuffleUtils.buildMsgFrom(url);
    String encHash=SecureShuffleUtils.hashFromString(msgToEncode,jobTokenSecret);
    connection.addRequestProperty(SecureShuffleUtils.HTTP_HEADER_URL_HASH,encHash);
    connection.setReadTimeout(readTimeout);
    connection.addRequestProperty(ShuffleHeader.HTTP_HEADER_NAME,ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);
    connection.addRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);
    connect(connection,connectionTimeout);
    connectSucceeded=true;
    input=new DataInputStream(new BufferedInputStream(connection.getInputStream(),bufferSize));
    int rc=connection.getResponseCode();
    if (rc != HttpURLConnection.HTTP_OK) {
      throw new IOException(""String_Node_Str"" + rc + ""String_Node_Str""+ url+ ""String_Node_Str""+ connection.getResponseMessage());
    }
    if (!ShuffleHeader.DEFAULT_HTTP_HEADER_NAME.equals(connection.getHeaderField(ShuffleHeader.HTTP_HEADER_NAME)) || !ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION.equals(connection.getHeaderField(ShuffleHeader.HTTP_HEADER_VERSION))) {
      throw new IOException(""String_Node_Str"");
    }
    String replyHash=connection.getHeaderField(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH);
    if (replyHash == null) {
      throw new IOException(""String_Node_Str"");
    }
    LOG.debug(""String_Node_Str"" + msgToEncode + ""String_Node_Str""+ encHash+ ""String_Node_Str""+ replyHash);
    SecureShuffleUtils.verifyReply(replyHash,encHash,jobTokenSecret);
    LOG.info(""String_Node_Str"" + msgToEncode + ""String_Node_Str"");
  }
 catch (  IOException ie) {
    ioErrs.increment(1);
    LOG.warn(""String_Node_Str"" + host + ""String_Node_Str""+ remaining.size()+ ""String_Node_Str"",ie);
    if (!connectSucceeded) {
      for (      InputAttemptIdentifier left : remaining) {
        scheduler.copyFailed(left,host,connectSucceeded);
      }
      remaining.clear();
    }
 else {
      InputAttemptIdentifier firstMap=srcAttempts.get(0);
      scheduler.copyFailed(firstMap,host,connectSucceeded);
      remaining.remove(firstMap);
    }
    for (    InputAttemptIdentifier left : remaining) {
      scheduler.putBackKnownMapOutput(host,left);
    }
    return;
  }
  try {
    InputAttemptIdentifier[] failedTasks=null;
    while (!remaining.isEmpty() && failedTasks == null) {
      failedTasks=copyMapOutput(host,input);
    }
    if (failedTasks != null && failedTasks.length > 0) {
      LOG.warn(""String_Node_Str"" + Arrays.toString(failedTasks));
      for (      InputAttemptIdentifier left : failedTasks) {
        scheduler.copyFailed(left,host,true);
        remaining.remove(left);
      }
    }
    IOUtils.cleanup(LOG,input);
    if (failedTasks == null && !remaining.isEmpty()) {
      throw new IOException(""String_Node_Str"" + remaining.size() + ""String_Node_Str"");
    }
  }
  finally {
    for (    InputAttemptIdentifier left : remaining) {
      scheduler.putBackKnownMapOutput(host,left);
    }
  }
}","/** 
 * The crux of the matter...
 * @param host {@link MapHost} from which we need to  shuffle available map-outputs.
 */
@VisibleForTesting protected void copyFromHost(MapHost host) throws IOException {
  List<InputAttemptIdentifier> srcAttempts=scheduler.getMapsForHost(host);
  currentPartition=host.getPartitionId();
  if (srcAttempts.size() == 0) {
    return;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + id + ""String_Node_Str""+ host+ ""String_Node_Str""+ srcAttempts+ ""String_Node_Str""+ currentPartition);
  }
  remaining=new LinkedHashSet<InputAttemptIdentifier>(srcAttempts);
  DataInputStream input;
  boolean connectSucceeded=false;
  try {
    URL url=getMapOutputURL(host,srcAttempts);
    HttpURLConnection connection=openConnection(url);
    String msgToEncode=SecureShuffleUtils.buildMsgFrom(url);
    String encHash=SecureShuffleUtils.hashFromString(msgToEncode,jobTokenSecret);
    connection.addRequestProperty(SecureShuffleUtils.HTTP_HEADER_URL_HASH,encHash);
    connection.setReadTimeout(readTimeout);
    connection.addRequestProperty(ShuffleHeader.HTTP_HEADER_NAME,ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);
    connection.addRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);
    connect(connection,connectionTimeout);
    connectSucceeded=true;
    input=new DataInputStream(new BufferedInputStream(connection.getInputStream(),bufferSize));
    int rc=connection.getResponseCode();
    if (rc != HttpURLConnection.HTTP_OK) {
      throw new IOException(""String_Node_Str"" + rc + ""String_Node_Str""+ url+ ""String_Node_Str""+ connection.getResponseMessage());
    }
    if (!ShuffleHeader.DEFAULT_HTTP_HEADER_NAME.equals(connection.getHeaderField(ShuffleHeader.HTTP_HEADER_NAME)) || !ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION.equals(connection.getHeaderField(ShuffleHeader.HTTP_HEADER_VERSION))) {
      throw new IOException(""String_Node_Str"");
    }
    String replyHash=connection.getHeaderField(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH);
    if (replyHash == null) {
      throw new IOException(""String_Node_Str"");
    }
    LOG.debug(""String_Node_Str"" + msgToEncode + ""String_Node_Str""+ encHash+ ""String_Node_Str""+ replyHash);
    SecureShuffleUtils.verifyReply(replyHash,encHash,jobTokenSecret);
    LOG.info(""String_Node_Str"" + msgToEncode + ""String_Node_Str"");
  }
 catch (  IOException ie) {
    ioErrs.increment(1);
    if (!connectSucceeded) {
      LOG.warn(""String_Node_Str"" + host + ""String_Node_Str""+ remaining.size()+ ""String_Node_Str"",ie);
      connectionErrs.increment(1);
    }
 else {
      LOG.warn(""String_Node_Str"" + host + ""String_Node_Str""+ remaining.size()+ ""String_Node_Str"",ie);
    }
    for (    InputAttemptIdentifier left : remaining) {
      scheduler.copyFailed(left,host,!connectSucceeded);
    }
    putBackRemainingMapOutputs(host);
    return;
  }
  try {
    InputAttemptIdentifier[] failedTasks=null;
    while (!remaining.isEmpty() && failedTasks == null) {
      failedTasks=copyMapOutput(host,input);
    }
    if (failedTasks != null && failedTasks.length > 0) {
      LOG.warn(""String_Node_Str"" + Arrays.toString(failedTasks));
      for (      InputAttemptIdentifier left : failedTasks) {
        scheduler.copyFailed(left,host,true);
      }
    }
    IOUtils.cleanup(LOG,input);
    if (failedTasks == null && !remaining.isEmpty()) {
      throw new IOException(""String_Node_Str"" + remaining.size() + ""String_Node_Str"");
    }
  }
  finally {
    putBackRemainingMapOutputs(host);
  }
}",0.7737003058103975
17274,"/** 
 * Do some basic verification on the input received -- Being defensive
 * @param compressedLength
 * @param decompressedLength
 * @param forReduce
 * @param remaining
 * @param mapId
 * @return true/false, based on if the verification succeeded or not
 */
private boolean verifySanity(long compressedLength,long decompressedLength,int forReduce,Set<InputAttemptIdentifier> remaining,InputAttemptIdentifier srcAttemptId){
  if (compressedLength < 0 || decompressedLength < 0) {
    wrongLengthErrs.increment(1);
    LOG.warn(getName() + ""String_Node_Str"" + srcAttemptId+ ""String_Node_Str""+ compressedLength+ ""String_Node_Str""+ decompressedLength);
    return false;
  }
  if (!remaining.contains(srcAttemptId)) {
    wrongMapErrs.increment(1);
    LOG.warn(""String_Node_Str"" + srcAttemptId);
    return false;
  }
  return true;
}","/** 
 * Do some basic verification on the input received -- Being defensive
 * @param compressedLength
 * @param decompressedLength
 * @param forReduce
 * @param remaining
 * @param mapId
 * @return true/false, based on if the verification succeeded or not
 */
private boolean verifySanity(long compressedLength,long decompressedLength,int forReduce,Set<InputAttemptIdentifier> remaining,InputAttemptIdentifier srcAttemptId){
  if (compressedLength < 0 || decompressedLength < 0) {
    wrongLengthErrs.increment(1);
    LOG.warn(getName() + ""String_Node_Str"" + srcAttemptId+ ""String_Node_Str""+ compressedLength+ ""String_Node_Str""+ decompressedLength);
    return false;
  }
  if (forReduce != currentPartition) {
    wrongReduceErrs.increment(1);
    LOG.warn(getName() + ""String_Node_Str"" + srcAttemptId+ ""String_Node_Str""+ compressedLength+ ""String_Node_Str""+ decompressedLength+ ""String_Node_Str""+ forReduce+ ""String_Node_Str""+ currentPartition);
    return false;
  }
  if (!remaining.contains(srcAttemptId)) {
    wrongMapErrs.increment(1);
    LOG.warn(""String_Node_Str"" + srcAttemptId);
    return false;
  }
  return true;
}",0.7934893184130214
17275,"@Override public List<Event> initialize(TezRootInputInitializerContext rootInputContext) throws IOException {
  Stopwatch sw=null;
  if (LOG.isDebugEnabled()) {
    sw=new Stopwatch().start();
  }
  MRInputUserPayloadProto userPayloadProto=MRHelpers.parseMRInputPayload(rootInputContext.getUserPayload());
  if (LOG.isDebugEnabled()) {
    sw.stop();
    LOG.debug(""String_Node_Str"" + sw.elapsedMillis());
  }
  Configuration conf=MRHelpers.createConfFromByteString(userPayloadProto.getConfigurationBytes());
  JobConf jobConf=new JobConf(conf);
  boolean useNewApi=jobConf.getUseNewMapper();
  sendSerializedEvents=conf.getBoolean(MRJobConfig.MR_TEZ_INPUT_INITIALIZER_SERIALIZE_EVENT_PAYLAOD,MRJobConfig.MR_TEZ_INPUT_INITIALIZER_SERIALIZE_EVENT_PAYLAOD_DEFAULT);
  LOG.info(""String_Node_Str"" + sendSerializedEvents);
  this.splitsProto=userPayloadProto.getSplits();
  MRInputUserPayloadProto.Builder updatedPayloadBuilder=MRInputUserPayloadProto.newBuilder(userPayloadProto);
  updatedPayloadBuilder.clearSplits();
  List<Event> events=Lists.newArrayListWithCapacity(this.splitsProto.getSplitsCount() + 1);
  RootInputUpdatePayloadEvent updatePayloadEvent=new RootInputUpdatePayloadEvent(updatedPayloadBuilder.build().toByteArray());
  events.add(updatePayloadEvent);
  int count=0;
  for (  MRSplitProto mrSplit : this.splitsProto.getSplitsList()) {
    RootInputDataInformationEvent diEvent;
    if (sendSerializedEvents) {
      diEvent=new RootInputDataInformationEvent(count++,mrSplit.toByteArray());
    }
 else {
      if (useNewApi) {
        org.apache.hadoop.mapreduce.InputSplit newInputSplit=MRInput.getNewSplitDetailsFromEvent(mrSplit,conf);
        diEvent=new RootInputDataInformationEvent(count++,newInputSplit);
      }
 else {
        org.apache.hadoop.mapred.InputSplit oldInputSplit=MRInput.getOldSplitDetailsFromEvent(mrSplit,conf);
        diEvent=new RootInputDataInformationEvent(count++,oldInputSplit);
      }
      events.add(diEvent);
    }
  }
  return events;
}","@Override public List<Event> initialize(TezRootInputInitializerContext rootInputContext) throws IOException {
  Stopwatch sw=null;
  if (LOG.isDebugEnabled()) {
    sw=new Stopwatch().start();
  }
  MRInputUserPayloadProto userPayloadProto=MRHelpers.parseMRInputPayload(rootInputContext.getUserPayload());
  if (LOG.isDebugEnabled()) {
    sw.stop();
    LOG.debug(""String_Node_Str"" + sw.elapsedMillis());
  }
  Configuration conf=MRHelpers.createConfFromByteString(userPayloadProto.getConfigurationBytes());
  JobConf jobConf=new JobConf(conf);
  boolean useNewApi=jobConf.getUseNewMapper();
  sendSerializedEvents=conf.getBoolean(MRJobConfig.MR_TEZ_INPUT_INITIALIZER_SERIALIZE_EVENT_PAYLAOD,MRJobConfig.MR_TEZ_INPUT_INITIALIZER_SERIALIZE_EVENT_PAYLAOD_DEFAULT);
  LOG.info(""String_Node_Str"" + sendSerializedEvents);
  this.splitsProto=userPayloadProto.getSplits();
  MRInputUserPayloadProto.Builder updatedPayloadBuilder=MRInputUserPayloadProto.newBuilder(userPayloadProto);
  updatedPayloadBuilder.clearSplits();
  List<Event> events=Lists.newArrayListWithCapacity(this.splitsProto.getSplitsCount() + 1);
  RootInputUpdatePayloadEvent updatePayloadEvent=new RootInputUpdatePayloadEvent(updatedPayloadBuilder.build().toByteArray());
  events.add(updatePayloadEvent);
  int count=0;
  for (  MRSplitProto mrSplit : this.splitsProto.getSplitsList()) {
    RootInputDataInformationEvent diEvent;
    if (sendSerializedEvents) {
      diEvent=new RootInputDataInformationEvent(count++,mrSplit.toByteArray());
    }
 else {
      if (useNewApi) {
        org.apache.hadoop.mapreduce.InputSplit newInputSplit=MRInput.getNewSplitDetailsFromEvent(mrSplit,conf);
        diEvent=new RootInputDataInformationEvent(count++,newInputSplit);
      }
 else {
        org.apache.hadoop.mapred.InputSplit oldInputSplit=MRInput.getOldSplitDetailsFromEvent(mrSplit,conf);
        diEvent=new RootInputDataInformationEvent(count++,oldInputSplit);
      }
    }
    events.add(diEvent);
  }
  return events;
}",0.98694123556002
17276,"@Override public void memoryAssigned(long assignedSize){
  this.availableMemoryMb=(int)(assignedSize >> 20);
}","@Override public void memoryAssigned(long assignedSize){
  this.availableMemoryMb=(int)(assignedSize >> 20);
  if (this.availableMemoryMb == 0) {
    LOG.warn(""String_Node_Str"" + this.availableMemoryMb + ""String_Node_Str""+ initialMemRequestMb);
    this.availableMemoryMb=initialMemRequestMb;
  }
}",0.5392156862745098
17277,"@Private public void initialize(TezOutputContext outputContext,Configuration conf,int numOutputs) throws IOException {
  this.outputContext=outputContext;
  this.conf=conf;
  this.partitions=numOutputs;
  rfs=((LocalFileSystem)FileSystem.getLocal(this.conf)).getRaw();
  int reqMemory=this.conf.getInt(TezJobConfig.TEZ_RUNTIME_IO_SORT_MB,TezJobConfig.DEFAULT_TEZ_RUNTIME_IO_SORT_MB);
  long reqBytes=reqMemory << 20;
  outputContext.requestInitialMemory(reqBytes,this);
  LOG.info(""String_Node_Str"" + reqMemory);
  sorter=ReflectionUtils.newInstance(this.conf.getClass(TezJobConfig.TEZ_RUNTIME_INTERNAL_SORTER_CLASS,QuickSort.class,IndexedSorter.class),this.conf);
  comparator=ConfigUtils.getIntermediateOutputKeyComparator(this.conf);
  keyClass=ConfigUtils.getIntermediateOutputKeyClass(this.conf);
  valClass=ConfigUtils.getIntermediateOutputValueClass(this.conf);
  serializationFactory=new SerializationFactory(this.conf);
  keySerializer=serializationFactory.getSerializer(keyClass);
  valSerializer=serializationFactory.getSerializer(valClass);
  mapOutputByteCounter=outputContext.getCounters().findCounter(TaskCounter.MAP_OUTPUT_BYTES);
  mapOutputRecordCounter=outputContext.getCounters().findCounter(TaskCounter.MAP_OUTPUT_RECORDS);
  fileOutputByteCounter=outputContext.getCounters().findCounter(TaskCounter.MAP_OUTPUT_MATERIALIZED_BYTES);
  spilledRecordsCounter=outputContext.getCounters().findCounter(TaskCounter.SPILLED_RECORDS);
  if (ConfigUtils.shouldCompressIntermediateOutput(this.conf)) {
    Class<? extends CompressionCodec> codecClass=ConfigUtils.getIntermediateOutputCompressorClass(this.conf,DefaultCodec.class);
    codec=ReflectionUtils.newInstance(codecClass,this.conf);
  }
 else {
    codec=null;
  }
  this.ifileReadAhead=this.conf.getBoolean(TezJobConfig.TEZ_RUNTIME_IFILE_READAHEAD,TezJobConfig.TEZ_RUNTIME_IFILE_READAHEAD_DEFAULT);
  if (this.ifileReadAhead) {
    this.ifileReadAheadLength=conf.getInt(TezJobConfig.TEZ_RUNTIME_IFILE_READAHEAD_BYTES,TezJobConfig.TEZ_RUNTIME_IFILE_READAHEAD_BYTES_DEFAULT);
  }
 else {
    this.ifileReadAheadLength=0;
  }
  this.ifileBufferSize=conf.getInt(""String_Node_Str"",TezJobConfig.TEZ_RUNTIME_IFILE_BUFFER_SIZE_DEFAULT);
  mapOutputFile=TezRuntimeUtils.instantiateTaskOutputManager(conf,outputContext);
  LOG.info(""String_Node_Str"" + conf.get(TezJobConfig.TEZ_RUNTIME_PARTITIONER_CLASS) + ""String_Node_Str"");
  this.conf.setInt(TezJobConfig.TEZ_RUNTIME_NUM_EXPECTED_PARTITIONS,this.partitions);
  this.partitioner=TezRuntimeUtils.instantiatePartitioner(this.conf);
  this.combiner=TezRuntimeUtils.instantiateCombiner(this.conf,outputContext);
}","@Private public void initialize(TezOutputContext outputContext,Configuration conf,int numOutputs) throws IOException {
  this.outputContext=outputContext;
  this.conf=conf;
  this.partitions=numOutputs;
  rfs=((LocalFileSystem)FileSystem.getLocal(this.conf)).getRaw();
  initialMemRequestMb=this.conf.getInt(TezJobConfig.TEZ_RUNTIME_IO_SORT_MB,TezJobConfig.DEFAULT_TEZ_RUNTIME_IO_SORT_MB);
  Preconditions.checkArgument(initialMemRequestMb != 0,""String_Node_Str"");
  long reqBytes=initialMemRequestMb << 20;
  outputContext.requestInitialMemory(reqBytes,this);
  LOG.info(""String_Node_Str"" + initialMemRequestMb);
  sorter=ReflectionUtils.newInstance(this.conf.getClass(TezJobConfig.TEZ_RUNTIME_INTERNAL_SORTER_CLASS,QuickSort.class,IndexedSorter.class),this.conf);
  comparator=ConfigUtils.getIntermediateOutputKeyComparator(this.conf);
  keyClass=ConfigUtils.getIntermediateOutputKeyClass(this.conf);
  valClass=ConfigUtils.getIntermediateOutputValueClass(this.conf);
  serializationFactory=new SerializationFactory(this.conf);
  keySerializer=serializationFactory.getSerializer(keyClass);
  valSerializer=serializationFactory.getSerializer(valClass);
  mapOutputByteCounter=outputContext.getCounters().findCounter(TaskCounter.MAP_OUTPUT_BYTES);
  mapOutputRecordCounter=outputContext.getCounters().findCounter(TaskCounter.MAP_OUTPUT_RECORDS);
  fileOutputByteCounter=outputContext.getCounters().findCounter(TaskCounter.MAP_OUTPUT_MATERIALIZED_BYTES);
  spilledRecordsCounter=outputContext.getCounters().findCounter(TaskCounter.SPILLED_RECORDS);
  if (ConfigUtils.shouldCompressIntermediateOutput(this.conf)) {
    Class<? extends CompressionCodec> codecClass=ConfigUtils.getIntermediateOutputCompressorClass(this.conf,DefaultCodec.class);
    codec=ReflectionUtils.newInstance(codecClass,this.conf);
  }
 else {
    codec=null;
  }
  this.ifileReadAhead=this.conf.getBoolean(TezJobConfig.TEZ_RUNTIME_IFILE_READAHEAD,TezJobConfig.TEZ_RUNTIME_IFILE_READAHEAD_DEFAULT);
  if (this.ifileReadAhead) {
    this.ifileReadAheadLength=conf.getInt(TezJobConfig.TEZ_RUNTIME_IFILE_READAHEAD_BYTES,TezJobConfig.TEZ_RUNTIME_IFILE_READAHEAD_BYTES_DEFAULT);
  }
 else {
    this.ifileReadAheadLength=0;
  }
  this.ifileBufferSize=conf.getInt(""String_Node_Str"",TezJobConfig.TEZ_RUNTIME_IFILE_BUFFER_SIZE_DEFAULT);
  mapOutputFile=TezRuntimeUtils.instantiateTaskOutputManager(conf,outputContext);
  LOG.info(""String_Node_Str"" + conf.get(TezJobConfig.TEZ_RUNTIME_PARTITIONER_CLASS) + ""String_Node_Str"");
  this.conf.setInt(TezJobConfig.TEZ_RUNTIME_NUM_EXPECTED_PARTITIONS,this.partitions);
  this.partitioner=TezRuntimeUtils.instantiatePartitioner(this.conf);
  this.combiner=TezRuntimeUtils.instantiateCombiner(this.conf,outputContext);
}",0.9736202057998128
17278,"public BroadcastShuffleManager(TezInputContext inputContext,Configuration conf,int numInputs) throws IOException {
  this.inputContext=inputContext;
  this.conf=conf;
  this.numInputs=numInputs;
  this.inputEventHandler=new BroadcastShuffleInputEventHandler(inputContext,this);
  this.inputManager=new BroadcastInputManager(inputContext.getUniqueIdentifier(),conf);
  completedInputSet=Collections.newSetFromMap(new ConcurrentHashMap<InputIdentifier,Boolean>(numInputs));
  completedInputs=new LinkedBlockingQueue<FetchedInput>(numInputs);
  knownSrcHosts=new ConcurrentHashMap<String,InputHost>();
  pendingHosts=Collections.newSetFromMap(new ConcurrentHashMap<InputHost,Boolean>());
  obsoletedInputs=Collections.newSetFromMap(new ConcurrentHashMap<InputAttemptIdentifier,Boolean>());
  int maxConfiguredFetchers=conf.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_PARALLEL_COPIES,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_PARALLEL_COPIES);
  this.numFetchers=Math.min(maxConfiguredFetchers,numInputs);
  this.fetcherRawExecutor=Executors.newFixedThreadPool(numFetchers,new ThreadFactoryBuilder().setDaemon(true).setNameFormat(""String_Node_Str"").build());
  this.fetcherExecutor=MoreExecutors.listeningDecorator(fetcherRawExecutor);
  this.startTime=System.currentTimeMillis();
  this.lastProgressTime=startTime;
  this.shuffleSecret=ShuffleUtils.getJobTokenSecretFromTokenBytes(inputContext.getServiceConsumerMetaData(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID));
  this.connectionTimeout=conf.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_CONNECT_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_STALLED_COPY_TIMEOUT);
  this.readTimeout=conf.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT);
  if (ConfigUtils.isIntermediateInputCompressed(conf)) {
    Class<? extends CompressionCodec> codecClass=ConfigUtils.getIntermediateInputCompressorClass(conf,DefaultCodec.class);
    codec=ReflectionUtils.newInstance(codecClass,conf);
    decompressor=CodecPool.getDecompressor(codec);
  }
 else {
    codec=null;
    decompressor=null;
  }
  LOG.info(""String_Node_Str"" + numInputs + ""String_Node_Str""+ (codec == null ? null : codec.getClass().getName())+ ""String_Node_Str""+ numFetchers);
}","public BroadcastShuffleManager(TezInputContext inputContext,Configuration conf,int numInputs) throws IOException {
  this.inputContext=inputContext;
  this.conf=conf;
  this.numInputs=numInputs;
  this.inputEventHandler=new BroadcastShuffleInputEventHandler(inputContext,this);
  this.inputManager=new BroadcastInputManager(inputContext.getUniqueIdentifier(),conf);
  completedInputSet=Collections.newSetFromMap(new ConcurrentHashMap<InputIdentifier,Boolean>(numInputs));
  completedInputs=new LinkedBlockingQueue<FetchedInput>(numInputs);
  knownSrcHosts=new ConcurrentHashMap<String,InputHost>();
  pendingHosts=new LinkedBlockingQueue<InputHost>();
  obsoletedInputs=Collections.newSetFromMap(new ConcurrentHashMap<InputAttemptIdentifier,Boolean>());
  int maxConfiguredFetchers=conf.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_PARALLEL_COPIES,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_PARALLEL_COPIES);
  this.numFetchers=Math.min(maxConfiguredFetchers,numInputs);
  this.fetcherRawExecutor=Executors.newFixedThreadPool(numFetchers,new ThreadFactoryBuilder().setDaemon(true).setNameFormat(""String_Node_Str"").build());
  this.fetcherExecutor=MoreExecutors.listeningDecorator(fetcherRawExecutor);
  this.startTime=System.currentTimeMillis();
  this.lastProgressTime=startTime;
  this.shuffleSecret=ShuffleUtils.getJobTokenSecretFromTokenBytes(inputContext.getServiceConsumerMetaData(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID));
  this.connectionTimeout=conf.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_CONNECT_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_STALLED_COPY_TIMEOUT);
  this.readTimeout=conf.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT);
  if (ConfigUtils.isIntermediateInputCompressed(conf)) {
    Class<? extends CompressionCodec> codecClass=ConfigUtils.getIntermediateInputCompressorClass(conf,DefaultCodec.class);
    codec=ReflectionUtils.newInstance(codecClass,conf);
    decompressor=CodecPool.getDecompressor(codec);
  }
 else {
    codec=null;
    decompressor=null;
  }
  LOG.info(""String_Node_Str"" + numInputs + ""String_Node_Str""+ (codec == null ? null : codec.getClass().getName())+ ""String_Node_Str""+ numFetchers);
}",0.9799233025039475
17279,"public void addKnownInput(String hostName,int port,InputAttemptIdentifier srcAttemptIdentifier,int partition){
  InputHost host=knownSrcHosts.get(hostName);
  if (host == null) {
    host=new InputHost(hostName,port,inputContext.getApplicationId());
    InputHost old=knownSrcHosts.putIfAbsent(hostName,host);
    if (old != null) {
      host=old;
    }
  }
  host.addKnownInput(srcAttemptIdentifier);
  lock.lock();
  try {
    pendingHosts.add(host);
    wakeLoop.signal();
  }
  finally {
    lock.unlock();
  }
}","public void addKnownInput(String hostName,int port,InputAttemptIdentifier srcAttemptIdentifier,int partition){
  InputHost host=knownSrcHosts.get(hostName);
  if (host == null) {
    host=new InputHost(hostName,port,inputContext.getApplicationId());
    InputHost old=knownSrcHosts.putIfAbsent(hostName,host);
    if (old != null) {
      host=old;
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + srcAttemptIdentifier + ""String_Node_Str""+ host);
  }
  host.addKnownInput(srcAttemptIdentifier);
  lock.lock();
  try {
    boolean added=pendingHosts.offer(host);
    if (!added) {
      String errorMessage=""String_Node_Str"" + host.getHost() + ""String_Node_Str"";
      LOG.error(errorMessage);
      throw new TezUncheckedException(errorMessage);
    }
    wakeLoop.signal();
  }
  finally {
    lock.unlock();
  }
}",0.7383935151068534
17280,"@Override public Void call() throws Exception {
  while (numCompletedInputs.get() < numInputs) {
    if (numRunningFetchers.get() >= numFetchers || pendingHosts.size() == 0) {
      lock.lock();
      try {
        wakeLoop.await();
      }
  finally {
        lock.unlock();
      }
      if (shuffleError != null) {
        break;
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + numCompletedInputs);
      }
      if (numCompletedInputs.get() < numInputs) {
        lock.lock();
        try {
          int numFetchersToRun=Math.min(pendingHosts.size(),numFetchers - numRunningFetchers.get());
          int count=0;
          for (Iterator<InputHost> inputHostIter=pendingHosts.iterator(); inputHostIter.hasNext(); ) {
            InputHost inputHost=inputHostIter.next();
            inputHostIter.remove();
            if (inputHost.getNumPendingInputs() > 0) {
              Fetcher fetcher=constructFetcherForHost(inputHost);
              LOG.info(""String_Node_Str"" + inputHost);
              numRunningFetchers.incrementAndGet();
              ListenableFuture<FetchResult> future=fetcherExecutor.submit(fetcher);
              Futures.addCallback(future,fetchFutureCallback);
              if (++count >= numFetchersToRun) {
                break;
              }
            }
          }
        }
  finally {
          lock.unlock();
        }
      }
    }
  }
  if (!fetcherExecutor.isShutdown()) {
    fetcherExecutor.shutdownNow();
  }
  return null;
}","@Override public Void call() throws Exception {
  while (numCompletedInputs.get() < numInputs) {
    if (numRunningFetchers.get() >= numFetchers || pendingHosts.size() == 0) {
      lock.lock();
      try {
        wakeLoop.await();
      }
  finally {
        lock.unlock();
      }
    }
    if (shuffleError != null) {
      break;
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + numCompletedInputs);
    }
    if (numCompletedInputs.get() < numInputs) {
      lock.lock();
      try {
        int numFetchersToRun=Math.min(pendingHosts.size(),numFetchers - numRunningFetchers.get());
        int count=0;
        while (pendingHosts.peek() != null) {
          InputHost inputHost=pendingHosts.take();
          if (LOG.isDebugEnabled()) {
            LOG.debug(""String_Node_Str"" + inputHost);
          }
          if (inputHost.getNumPendingInputs() > 0) {
            LOG.info(""String_Node_Str"" + inputHost);
            Fetcher fetcher=constructFetcherForHost(inputHost);
            numRunningFetchers.incrementAndGet();
            ListenableFuture<FetchResult> future=fetcherExecutor.submit(fetcher);
            Futures.addCallback(future,fetchFutureCallback);
            if (++count >= numFetchersToRun) {
              break;
            }
          }
 else {
            if (LOG.isDebugEnabled()) {
              LOG.debug(""String_Node_Str"" + inputHost.getHost() + ""String_Node_Str"");
            }
          }
        }
      }
  finally {
        lock.unlock();
      }
    }
  }
  LOG.info(""String_Node_Str"");
  if (!fetcherExecutor.isShutdown()) {
    fetcherExecutor.shutdownNow();
  }
  return null;
}",0.7432561091716915
17281,"public void initWriter() throws IOException {
  Path outputFile=ouputFileManager.getOutputFileForWrite();
  this.writer=new IFile.Writer(conf,rfs,outputFile,keyClass,valClass,codec,null);
}","public void initWriter() throws IOException {
  Path outputFile=ouputFileManager.getOutputFileForWrite();
  LOG.info(""String_Node_Str"" + outputFile);
  this.writer=new IFile.Writer(conf,rfs,outputFile,keyClass,valClass,codec,null);
}",0.8957345971563981
17282,"/** 
 * @return true if any output was generated. false otherwise
 * @throws IOException
 */
public boolean close() throws IOException {
  this.writer.close();
  TezIndexRecord rec=new TezIndexRecord(0,writer.getRawLength(),writer.getCompressedLength());
  TezSpillRecord sr=new TezSpillRecord(1);
  sr.putIndex(rec,0);
  Path indexFile=ouputFileManager.getOutputIndexFileForWrite(INDEX_RECORD_LENGTH);
  sr.writeToFile(indexFile,conf);
  return numRecords > 0;
}","/** 
 * @return true if any output was generated. false otherwise
 * @throws IOException
 */
public boolean close() throws IOException {
  this.writer.close();
  TezIndexRecord rec=new TezIndexRecord(0,writer.getRawLength(),writer.getCompressedLength());
  TezSpillRecord sr=new TezSpillRecord(1);
  sr.putIndex(rec,0);
  Path indexFile=ouputFileManager.getOutputIndexFileForWrite(INDEX_RECORD_LENGTH);
  LOG.info(""String_Node_Str"" + indexFile);
  sr.writeToFile(indexFile,conf);
  return numRecords > 0;
}",0.95562435500516
17283,"private Fetcher constructFetcherForHost(InputHost inputHost){
  FetcherBuilder fetcherBuilder=new FetcherBuilder(BroadcastShuffleManager.this,inputManager,inputContext.getApplicationId(),shuffleSecret,conf);
  fetcherBuilder.setConnectionParameters(connectionTimeout,readTimeout);
  fetcherBuilder.setCompressionParameters(codec,decompressor);
  List<InputAttemptIdentifier> pendingInputsForHost=inputHost.clearAndGetPendingInputs();
  for (Iterator<InputAttemptIdentifier> inputIter=pendingInputsForHost.iterator(); inputIter.hasNext(); ) {
    InputAttemptIdentifier input=inputIter.next();
    if (completedInputSet.contains(input.getInputIdentifier())) {
      inputIter.remove();
    }
    if (obsoletedInputs.contains(input)) {
      inputIter.remove();
      obsoletedInputs.remove(input);
    }
  }
  fetcherBuilder.assignWork(inputHost.getHost(),inputHost.getPort(),0,pendingInputsForHost);
  return fetcherBuilder.build();
}","private Fetcher constructFetcherForHost(InputHost inputHost){
  FetcherBuilder fetcherBuilder=new FetcherBuilder(BroadcastShuffleManager.this,inputManager,inputContext.getApplicationId(),shuffleSecret,conf);
  fetcherBuilder.setConnectionParameters(connectionTimeout,readTimeout);
  fetcherBuilder.setCompressionParameters(codec,decompressor);
  List<InputAttemptIdentifier> pendingInputsForHost=inputHost.clearAndGetPendingInputs();
  for (Iterator<InputAttemptIdentifier> inputIter=pendingInputsForHost.iterator(); inputIter.hasNext(); ) {
    InputAttemptIdentifier input=inputIter.next();
    if (completedInputSet.contains(input.getInputIdentifier())) {
      inputIter.remove();
    }
    if (obsoletedInputs.contains(input)) {
      inputIter.remove();
      obsoletedInputs.remove(input);
    }
  }
  fetcherBuilder.assignWork(inputHost.getHost(),inputHost.getPort(),0,pendingInputsForHost);
  LOG.info(""String_Node_Str"" + inputHost.getHost() + ""String_Node_Str""+ pendingInputsForHost);
  return fetcherBuilder.build();
}",0.9516046867040244
17284,"public BroadcastShuffleManager(TezInputContext inputContext,Configuration conf,int numInputs) throws IOException {
  this.inputContext=inputContext;
  this.conf=conf;
  this.numInputs=numInputs;
  this.inputEventHandler=new BroadcastShuffleInputEventHandler(inputContext,this);
  this.inputManager=new BroadcastInputManager(inputContext.getUniqueIdentifier(),conf);
  completedInputSet=Collections.newSetFromMap(new ConcurrentHashMap<InputIdentifier,Boolean>(numInputs));
  completedInputs=new LinkedBlockingQueue<FetchedInput>(numInputs);
  knownSrcHosts=new ConcurrentHashMap<String,InputHost>();
  pendingHosts=new LinkedBlockingQueue<InputHost>();
  obsoletedInputs=Collections.newSetFromMap(new ConcurrentHashMap<InputAttemptIdentifier,Boolean>());
  int maxConfiguredFetchers=conf.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_PARALLEL_COPIES,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_PARALLEL_COPIES);
  this.numFetchers=Math.min(maxConfiguredFetchers,numInputs);
  this.fetcherRawExecutor=Executors.newFixedThreadPool(numFetchers,new ThreadFactoryBuilder().setDaemon(true).setNameFormat(""String_Node_Str"").build());
  this.fetcherExecutor=MoreExecutors.listeningDecorator(fetcherRawExecutor);
  this.startTime=System.currentTimeMillis();
  this.lastProgressTime=startTime;
  this.shuffleSecret=ShuffleUtils.getJobTokenSecretFromTokenBytes(inputContext.getServiceConsumerMetaData(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID));
  this.connectionTimeout=conf.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_CONNECT_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_STALLED_COPY_TIMEOUT);
  this.readTimeout=conf.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT);
  if (ConfigUtils.isIntermediateInputCompressed(conf)) {
    Class<? extends CompressionCodec> codecClass=ConfigUtils.getIntermediateInputCompressorClass(conf,DefaultCodec.class);
    codec=ReflectionUtils.newInstance(codecClass,conf);
    decompressor=CodecPool.getDecompressor(codec);
  }
 else {
    codec=null;
    decompressor=null;
  }
  LOG.info(""String_Node_Str"" + numInputs + ""String_Node_Str""+ (codec == null ? null : codec.getClass().getName())+ ""String_Node_Str""+ numFetchers);
}","public BroadcastShuffleManager(TezInputContext inputContext,Configuration conf,int numInputs) throws IOException {
  this.inputContext=inputContext;
  this.conf=conf;
  this.numInputs=numInputs;
  this.inputEventHandler=new BroadcastShuffleInputEventHandler(inputContext,this);
  this.inputManager=new BroadcastInputManager(inputContext.getUniqueIdentifier(),conf);
  completedInputSet=Collections.newSetFromMap(new ConcurrentHashMap<InputIdentifier,Boolean>(numInputs));
  completedInputs=new LinkedBlockingQueue<FetchedInput>(numInputs);
  knownSrcHosts=new ConcurrentHashMap<String,InputHost>();
  pendingHosts=new LinkedBlockingQueue<InputHost>();
  obsoletedInputs=Collections.newSetFromMap(new ConcurrentHashMap<InputAttemptIdentifier,Boolean>());
  int maxConfiguredFetchers=conf.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_PARALLEL_COPIES,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_PARALLEL_COPIES);
  this.numFetchers=Math.min(maxConfiguredFetchers,numInputs);
  this.fetcherRawExecutor=Executors.newFixedThreadPool(numFetchers,new ThreadFactoryBuilder().setDaemon(true).setNameFormat(""String_Node_Str"" + inputContext.getUniqueIdentifier() + ""String_Node_Str"").build());
  this.fetcherExecutor=MoreExecutors.listeningDecorator(fetcherRawExecutor);
  this.schedulerRawExecutor=Executors.newFixedThreadPool(1,new ThreadFactoryBuilder().setDaemon(true).setNameFormat(""String_Node_Str"" + inputContext.getUniqueIdentifier() + ""String_Node_Str"").build());
  this.schedulerExecutor=MoreExecutors.listeningDecorator(schedulerRawExecutor);
  this.startTime=System.currentTimeMillis();
  this.lastProgressTime=startTime;
  this.shuffleSecret=ShuffleUtils.getJobTokenSecretFromTokenBytes(inputContext.getServiceConsumerMetaData(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID));
  this.connectionTimeout=conf.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_CONNECT_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_STALLED_COPY_TIMEOUT);
  this.readTimeout=conf.getInt(TezJobConfig.TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT,TezJobConfig.DEFAULT_TEZ_RUNTIME_SHUFFLE_READ_TIMEOUT);
  if (ConfigUtils.isIntermediateInputCompressed(conf)) {
    Class<? extends CompressionCodec> codecClass=ConfigUtils.getIntermediateInputCompressorClass(conf,DefaultCodec.class);
    codec=ReflectionUtils.newInstance(codecClass,conf);
    decompressor=CodecPool.getDecompressor(codec);
  }
 else {
    codec=null;
    decompressor=null;
  }
  LOG.info(""String_Node_Str"" + numInputs + ""String_Node_Str""+ (codec == null ? null : codec.getClass().getName())+ ""String_Node_Str""+ numFetchers);
}",0.9282700421940928
17285,"public void run(){
  RunBroadcastShuffleCallable callable=new RunBroadcastShuffleCallable();
  runShuffleFuture=new FutureTask<Void>(callable);
  Thread runThread=new Thread(runShuffleFuture,""String_Node_Str"");
  runThread.setDaemon(true);
  runThread.start();
}","public void run(){
  RunBroadcastShuffleCallable callable=new RunBroadcastShuffleCallable();
  ListenableFuture<Void> runShuffleFuture=schedulerExecutor.submit(callable);
  Futures.addCallback(runShuffleFuture,new SchedulerFutureCallback());
  schedulerExecutor.shutdown();
}",0.4208566108007449
17286,"@Override public Void call() throws Exception {
  while (numCompletedInputs.get() < numInputs) {
    if (numRunningFetchers.get() >= numFetchers || pendingHosts.size() == 0) {
      lock.lock();
      try {
        wakeLoop.await();
      }
  finally {
        lock.unlock();
      }
    }
    if (shuffleError != null) {
      break;
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + numCompletedInputs);
    }
    if (numCompletedInputs.get() < numInputs) {
      lock.lock();
      try {
        int numFetchersToRun=Math.min(pendingHosts.size(),numFetchers - numRunningFetchers.get());
        int count=0;
        while (pendingHosts.peek() != null) {
          InputHost inputHost=pendingHosts.take();
          if (LOG.isDebugEnabled()) {
            LOG.debug(""String_Node_Str"" + inputHost);
          }
          if (inputHost.getNumPendingInputs() > 0) {
            LOG.info(""String_Node_Str"" + inputHost);
            Fetcher fetcher=constructFetcherForHost(inputHost);
            numRunningFetchers.incrementAndGet();
            ListenableFuture<FetchResult> future=fetcherExecutor.submit(fetcher);
            Futures.addCallback(future,fetchFutureCallback);
            if (++count >= numFetchersToRun) {
              break;
            }
          }
 else {
            if (LOG.isDebugEnabled()) {
              LOG.debug(""String_Node_Str"" + inputHost.getHost() + ""String_Node_Str"");
            }
          }
        }
      }
  finally {
        lock.unlock();
      }
    }
  }
  LOG.info(""String_Node_Str"");
  if (!fetcherExecutor.isShutdown()) {
    fetcherExecutor.shutdownNow();
  }
  return null;
}","@Override public Void call() throws Exception {
  while (numCompletedInputs.get() < numInputs) {
    if (numRunningFetchers.get() >= numFetchers || pendingHosts.size() == 0) {
      lock.lock();
      try {
        wakeLoop.await();
      }
  finally {
        lock.unlock();
      }
    }
    if (shuffleError != null) {
      break;
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + numCompletedInputs);
    }
    if (numCompletedInputs.get() < numInputs) {
      lock.lock();
      try {
        int maxFetchersToRun=numFetchers - numRunningFetchers.get();
        int count=0;
        while (pendingHosts.peek() != null) {
          InputHost inputHost=pendingHosts.take();
          if (LOG.isDebugEnabled()) {
            LOG.debug(""String_Node_Str"" + inputHost.toDetailedString());
          }
          if (inputHost.getNumPendingInputs() > 0) {
            LOG.info(""String_Node_Str"" + inputHost.getHost());
            Fetcher fetcher=constructFetcherForHost(inputHost);
            numRunningFetchers.incrementAndGet();
            ListenableFuture<FetchResult> future=fetcherExecutor.submit(fetcher);
            Futures.addCallback(future,fetchFutureCallback);
            if (++count >= maxFetchersToRun) {
              break;
            }
          }
 else {
            if (LOG.isDebugEnabled()) {
              LOG.debug(""String_Node_Str"" + inputHost.getHost() + ""String_Node_Str"");
            }
          }
        }
      }
  finally {
        lock.unlock();
      }
    }
  }
  LOG.info(""String_Node_Str"");
  if (!fetcherExecutor.isShutdown()) {
    fetcherExecutor.shutdownNow();
  }
  return null;
}",0.978465271458902
17287,"private void processDataMovementEvent(DataMovementEvent dmEvent){
  DataMovementEventPayloadProto shufflePayload;
  try {
    shufflePayload=DataMovementEventPayloadProto.parseFrom(dmEvent.getUserPayload());
  }
 catch (  InvalidProtocolBufferException e) {
    throw new TezUncheckedException(""String_Node_Str"",e);
  }
  int partitionId=dmEvent.getSourceIndex();
  URI baseUri=getBaseURI(shufflePayload.getHost(),shufflePayload.getPort(),partitionId);
  LOG.info(""String_Node_Str"" + baseUri);
  InputAttemptIdentifier srcAttemptIdentifier=new InputAttemptIdentifier(dmEvent.getTargetIndex(),dmEvent.getVersion(),shufflePayload.getPathComponent());
  scheduler.addKnownMapOutput(shufflePayload.getHost(),partitionId,baseUri.toString(),srcAttemptIdentifier);
  int duration=shufflePayload.getRunDuration();
  if (duration > maxMapRuntime) {
    maxMapRuntime=duration;
    scheduler.informMaxMapRunTime(maxMapRuntime);
  }
}","private void processDataMovementEvent(DataMovementEvent dmEvent){
  DataMovementEventPayloadProto shufflePayload;
  try {
    shufflePayload=DataMovementEventPayloadProto.parseFrom(dmEvent.getUserPayload());
  }
 catch (  InvalidProtocolBufferException e) {
    throw new TezUncheckedException(""String_Node_Str"",e);
  }
  int partitionId=dmEvent.getSourceIndex();
  URI baseUri=getBaseURI(shufflePayload.getHost(),shufflePayload.getPort(),partitionId);
  InputAttemptIdentifier srcAttemptIdentifier=new InputAttemptIdentifier(dmEvent.getTargetIndex(),dmEvent.getVersion(),shufflePayload.getPathComponent());
  LOG.info(""String_Node_Str"" + baseUri + ""String_Node_Str""+ srcAttemptIdentifier);
  scheduler.addKnownMapOutput(shufflePayload.getHost(),partitionId,baseUri.toString(),srcAttemptIdentifier);
  int duration=shufflePayload.getRunDuration();
  if (duration > maxMapRuntime) {
    maxMapRuntime=duration;
    scheduler.informMaxMapRunTime(maxMapRuntime);
  }
}",0.8315677966101694
17288,"public synchronized int getNumPendingInputs(){
  return inputs.size();
}","public int getNumPendingInputs(){
  return inputs.size();
}",0.900763358778626
17289,"public synchronized void addKnownInput(InputAttemptIdentifier srcAttempt){
  inputs.add(srcAttempt);
}","public void addKnownInput(InputAttemptIdentifier srcAttempt){
  inputs.add(srcAttempt);
}",0.9319371727748692
17290,"@Override public String toString(){
  return ""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ inputs+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str"";
}",0.896551724137931
17291,"public synchronized List<InputAttemptIdentifier> clearAndGetPendingInputs(){
  List<InputAttemptIdentifier> inputsCopy=new ArrayList<InputAttemptIdentifier>(inputs);
  inputs.clear();
  return inputsCopy;
}","public List<InputAttemptIdentifier> clearAndGetPendingInputs(){
  List<InputAttemptIdentifier> inputsCopy=new ArrayList<InputAttemptIdentifier>(inputs.size());
  inputs.drainTo(inputsCopy);
  return inputsCopy;
}",0.8995215311004785
17292,"@Override public void readFields(DataInput in) throws IOException {
  int procDescLength=in.readInt();
  byte[] procDescBytes=new byte[procDescLength];
  in.readFully(procDescBytes);
  processorDescriptor=DagTypeConverters.convertProcessorDescriptorFromDAGPlan(TezEntityDescriptorProto.parseFrom(procDescBytes));
  int numInputSpecs=in.readInt();
  inputSpecList=new ArrayList<InputSpec>(numInputSpecs);
  for (int i=0; i < numInputSpecs; i++) {
    InputSpec inputSpec=new InputSpec();
    inputSpec.readFields(in);
    inputSpecList.add(inputSpec);
  }
  int numOutputSpecs=in.readInt();
  outputSpecList=new ArrayList<OutputSpec>(numOutputSpecs);
  for (int i=0; i < numOutputSpecs; i++) {
    OutputSpec outputSpec=new OutputSpec();
    outputSpec.readFields(in);
    outputSpecList.add(outputSpec);
  }
}","@Override public void readFields(DataInput in) throws IOException {
  taskAttemptId=new TezTaskAttemptID();
  taskAttemptId.readFields(in);
  vertexName=in.readUTF();
  int procDescLength=in.readInt();
  byte[] procDescBytes=new byte[procDescLength];
  in.readFully(procDescBytes);
  processorDescriptor=DagTypeConverters.convertProcessorDescriptorFromDAGPlan(TezEntityDescriptorProto.parseFrom(procDescBytes));
  int numInputSpecs=in.readInt();
  inputSpecList=new ArrayList<InputSpec>(numInputSpecs);
  for (int i=0; i < numInputSpecs; i++) {
    InputSpec inputSpec=new InputSpec();
    inputSpec.readFields(in);
    inputSpecList.add(inputSpec);
  }
  int numOutputSpecs=in.readInt();
  outputSpecList=new ArrayList<OutputSpec>(numOutputSpecs);
  for (int i=0; i < numOutputSpecs; i++) {
    OutputSpec outputSpec=new OutputSpec();
    outputSpec.readFields(in);
    outputSpecList.add(outputSpec);
  }
}",0.9423412929528246
17293,"public TaskSpec(TezTaskAttemptID taskAttemptID,String user,String vertexName,ProcessorDescriptor processorDescriptor,List<InputSpec> inputSpecList,List<OutputSpec> outputSpecList){
  this.taskAttemptId=taskAttemptID;
  this.user=user;
  this.vertexName=vertexName;
  this.processorDescriptor=processorDescriptor;
  this.inputSpecList=inputSpecList;
  this.outputSpecList=outputSpecList;
}","public TaskSpec(TezTaskAttemptID taskAttemptID,String user,String vertexName,ProcessorDescriptor processorDescriptor,List<InputSpec> inputSpecList,List<OutputSpec> outputSpecList){
  this.taskAttemptId=taskAttemptID;
  this.vertexName=vertexName;
  this.user=user;
  this.processorDescriptor=processorDescriptor;
  this.inputSpecList=inputSpecList;
  this.outputSpecList=outputSpecList;
}",0.9536082474226804
17294,"@Override public String toString(){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"" + processorDescriptor.getClassName() + ""String_Node_Str""+ inputSpecList.size()+ ""String_Node_Str""+ outputSpecList.size());
  sb.append(""String_Node_Str"");
  for (  InputSpec i : inputSpecList) {
    sb.append(""String_Node_Str"" + i.toString() + ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  for (  OutputSpec i : outputSpecList) {
    sb.append(""String_Node_Str"" + i.toString() + ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","@Override public String toString(){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"" + taskAttemptId);
  sb.append(""String_Node_Str"" + processorDescriptor.getClassName() + ""String_Node_Str""+ inputSpecList.size()+ ""String_Node_Str""+ outputSpecList.size());
  sb.append(""String_Node_Str"");
  for (  InputSpec i : inputSpecList) {
    sb.append(""String_Node_Str"" + i.toString() + ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  for (  OutputSpec i : outputSpecList) {
    sb.append(""String_Node_Str"" + i.toString() + ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.96
17295,"@Override public void write(DataOutput out) throws IOException {
  byte[] procDesc=DagTypeConverters.convertToDAGPlan(processorDescriptor).toByteArray();
  out.writeInt(procDesc.length);
  out.write(procDesc);
  out.writeInt(inputSpecList.size());
  for (  InputSpec inputSpec : inputSpecList) {
    inputSpec.write(out);
  }
  out.writeInt(outputSpecList.size());
  for (  OutputSpec outputSpec : outputSpecList) {
    outputSpec.write(out);
  }
}","@Override public void write(DataOutput out) throws IOException {
  taskAttemptId.write(out);
  out.writeUTF(vertexName);
  byte[] procDesc=DagTypeConverters.convertToDAGPlan(processorDescriptor).toByteArray();
  out.writeInt(procDesc.length);
  out.write(procDesc);
  out.writeInt(inputSpecList.size());
  for (  InputSpec inputSpec : inputSpecList) {
    inputSpec.write(out);
  }
  out.writeInt(outputSpecList.size());
  for (  OutputSpec outputSpec : outputSpecList) {
    outputSpec.write(out);
  }
}",0.9411764705882352
17296,"public static TaskSplitMetaInfo[] readSplitMetaInfo(Configuration conf,FileSystem fs) throws IOException {
  long maxMetaInfoSize=conf.getLong(MRJobConfig.SPLIT_METAINFO_MAXSIZE,MRJobConfig.DEFAULT_SPLIT_METAINFO_MAXSIZE);
  Path metaSplitFile=new Path(conf.get(TezJobConfig.TASK_LOCAL_RESOURCE_DIR),MRJobConfig.JOB_SPLIT_METAINFO);
  String jobSplitFile=MRJobConfig.JOB_SPLIT;
  File file=new File(metaSplitFile.toUri().getPath()).getAbsoluteFile();
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ FileSystem.getDefaultUri(conf));
  }
  FileStatus fStatus=fs.getFileStatus(metaSplitFile);
  if (maxMetaInfoSize > 0 && fStatus.getLen() > maxMetaInfoSize) {
    throw new IOException(""String_Node_Str"" + maxMetaInfoSize + ""String_Node_Str"");
  }
  FSDataInputStream in=fs.open(metaSplitFile);
  byte[] header=new byte[JobSplit.META_SPLIT_FILE_HEADER.length];
  in.readFully(header);
  if (!Arrays.equals(JobSplit.META_SPLIT_FILE_HEADER,header)) {
    throw new IOException(""String_Node_Str"");
  }
  int vers=WritableUtils.readVInt(in);
  if (vers != JobSplit.META_SPLIT_VERSION) {
    in.close();
    throw new IOException(""String_Node_Str"" + vers);
  }
  int numSplits=WritableUtils.readVInt(in);
  JobSplit.TaskSplitMetaInfo[] allSplitMetaInfo=new JobSplit.TaskSplitMetaInfo[numSplits];
  for (int i=0; i < numSplits; i++) {
    JobSplit.SplitMetaInfo splitMetaInfo=new JobSplit.SplitMetaInfo();
    splitMetaInfo.readFields(in);
    JobSplit.TaskSplitIndex splitIndex=new JobSplit.TaskSplitIndex(new Path(conf.get(TezJobConfig.TASK_LOCAL_RESOURCE_DIR),jobSplitFile).toUri().toString(),splitMetaInfo.getStartOffset());
    allSplitMetaInfo[i]=new JobSplit.TaskSplitMetaInfo(splitIndex,splitMetaInfo.getLocations(),splitMetaInfo.getInputDataLength());
  }
  in.close();
  return allSplitMetaInfo;
}","public static TaskSplitMetaInfo[] readSplitMetaInfo(Configuration conf,FileSystem fs) throws IOException {
  long maxMetaInfoSize=conf.getLong(MRJobConfig.SPLIT_METAINFO_MAXSIZE,MRJobConfig.DEFAULT_SPLIT_METAINFO_MAXSIZE);
  String basePath=conf.get(TezJobConfig.TASK_LOCAL_RESOURCE_DIR,""String_Node_Str"");
  LOG.info(""String_Node_Str"" + basePath);
  Path metaSplitFile=new Path(basePath,MRJobConfig.JOB_SPLIT_METAINFO);
  String jobSplitFile=MRJobConfig.JOB_SPLIT;
  File file=new File(metaSplitFile.toUri().getPath()).getAbsoluteFile();
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ FileSystem.getDefaultUri(conf));
  }
  FileStatus fStatus=fs.getFileStatus(metaSplitFile);
  if (maxMetaInfoSize > 0 && fStatus.getLen() > maxMetaInfoSize) {
    throw new IOException(""String_Node_Str"" + maxMetaInfoSize + ""String_Node_Str"");
  }
  FSDataInputStream in=fs.open(metaSplitFile);
  byte[] header=new byte[JobSplit.META_SPLIT_FILE_HEADER.length];
  in.readFully(header);
  if (!Arrays.equals(JobSplit.META_SPLIT_FILE_HEADER,header)) {
    throw new IOException(""String_Node_Str"");
  }
  int vers=WritableUtils.readVInt(in);
  if (vers != JobSplit.META_SPLIT_VERSION) {
    in.close();
    throw new IOException(""String_Node_Str"" + vers);
  }
  int numSplits=WritableUtils.readVInt(in);
  JobSplit.TaskSplitMetaInfo[] allSplitMetaInfo=new JobSplit.TaskSplitMetaInfo[numSplits];
  for (int i=0; i < numSplits; i++) {
    JobSplit.SplitMetaInfo splitMetaInfo=new JobSplit.SplitMetaInfo();
    splitMetaInfo.readFields(in);
    JobSplit.TaskSplitIndex splitIndex=new JobSplit.TaskSplitIndex(new Path(basePath,jobSplitFile).toUri().toString(),splitMetaInfo.getStartOffset());
    allSplitMetaInfo[i]=new JobSplit.TaskSplitMetaInfo(splitIndex,splitMetaInfo.getLocations(),splitMetaInfo.getInputDataLength());
  }
  in.close();
  return allSplitMetaInfo;
}",0.9495485926712692
17297,"@Override public List<Event> initialize(TezInputContext inputContext) throws IOException {
  Configuration conf=TezUtils.createConfFromUserPayload(inputContext.getUserPayload());
  this.jobConf=new JobConf(conf);
  TaskSplitMetaInfo[] allMetaInfo=readSplits(conf);
  TaskSplitMetaInfo thisTaskMetaInfo=allMetaInfo[inputContext.getTaskIndex()];
  this.splitMetaInfo=new TaskSplitIndex(thisTaskMetaInfo.getSplitLocation(),thisTaskMetaInfo.getStartOffset());
  this.inputRecordCounter=inputContext.getCounters().findCounter(TaskCounter.MAP_INPUT_RECORDS);
  this.fileInputByteCounter=inputContext.getCounters().findCounter(FileInputFormatCounter.BYTES_READ);
  useNewApi=this.jobConf.getUseNewMapper();
  if (useNewApi) {
    TaskAttemptContext taskAttemptContext=createTaskAttemptContext();
    Class<? extends org.apache.hadoop.mapreduce.InputFormat<?,?>> inputFormatClazz;
    try {
      inputFormatClazz=taskAttemptContext.getInputFormatClass();
    }
 catch (    ClassNotFoundException e) {
      throw new IOException(""String_Node_Str"",e);
    }
    newInputFormat=ReflectionUtils.newInstance(inputFormatClazz,this.jobConf);
    newInputSplit=getNewSplitDetails(splitMetaInfo);
    List<Statistics> matchedStats=null;
    if (newInputSplit instanceof org.apache.hadoop.mapreduce.lib.input.FileSplit) {
      matchedStats=Utils.getFsStatistics(((org.apache.hadoop.mapreduce.lib.input.FileSplit)newInputSplit).getPath(),this.jobConf);
    }
    fsStats=matchedStats;
    try {
      newRecordReader=newInputFormat.createRecordReader(newInputSplit,taskAttemptContext);
      newRecordReader.initialize(newInputSplit,taskAttemptContext);
    }
 catch (    InterruptedException e) {
      throw new IOException(""String_Node_Str"",e);
    }
  }
 else {
    oldInputFormat=this.jobConf.getInputFormat();
    InputSplit oldInputSplit=getOldSplitDetails(splitMetaInfo);
    List<Statistics> matchedStats=null;
    if (oldInputSplit instanceof FileSplit) {
      matchedStats=Utils.getFsStatistics(((FileSplit)oldInputSplit).getPath(),this.jobConf);
    }
    fsStats=matchedStats;
    long bytesInPrev=getInputBytes();
    oldRecordReader=oldInputFormat.getRecordReader(oldInputSplit,this.jobConf,new MRReporter(inputContext,oldInputSplit));
    long bytesInCurr=getInputBytes();
    fileInputByteCounter.increment(bytesInCurr - bytesInPrev);
    setIncrementalConfigParams(oldInputSplit);
  }
  return null;
}","@Override public List<Event> initialize(TezInputContext inputContext) throws IOException {
  this.inputContext=inputContext;
  Configuration conf=TezUtils.createConfFromUserPayload(inputContext.getUserPayload());
  this.jobConf=new JobConf(conf);
  TaskSplitMetaInfo[] allMetaInfo=readSplits(conf);
  TaskSplitMetaInfo thisTaskMetaInfo=allMetaInfo[inputContext.getTaskIndex()];
  this.splitMetaInfo=new TaskSplitIndex(thisTaskMetaInfo.getSplitLocation(),thisTaskMetaInfo.getStartOffset());
  this.inputRecordCounter=inputContext.getCounters().findCounter(TaskCounter.MAP_INPUT_RECORDS);
  this.fileInputByteCounter=inputContext.getCounters().findCounter(FileInputFormatCounter.BYTES_READ);
  useNewApi=this.jobConf.getUseNewMapper();
  if (useNewApi) {
    TaskAttemptContext taskAttemptContext=createTaskAttemptContext();
    Class<? extends org.apache.hadoop.mapreduce.InputFormat<?,?>> inputFormatClazz;
    try {
      inputFormatClazz=taskAttemptContext.getInputFormatClass();
    }
 catch (    ClassNotFoundException e) {
      throw new IOException(""String_Node_Str"",e);
    }
    newInputFormat=ReflectionUtils.newInstance(inputFormatClazz,this.jobConf);
    newInputSplit=getNewSplitDetails(splitMetaInfo);
    List<Statistics> matchedStats=null;
    if (newInputSplit instanceof org.apache.hadoop.mapreduce.lib.input.FileSplit) {
      matchedStats=Utils.getFsStatistics(((org.apache.hadoop.mapreduce.lib.input.FileSplit)newInputSplit).getPath(),this.jobConf);
    }
    fsStats=matchedStats;
    try {
      newRecordReader=newInputFormat.createRecordReader(newInputSplit,taskAttemptContext);
      newRecordReader.initialize(newInputSplit,taskAttemptContext);
    }
 catch (    InterruptedException e) {
      throw new IOException(""String_Node_Str"",e);
    }
  }
 else {
    oldInputFormat=this.jobConf.getInputFormat();
    InputSplit oldInputSplit=getOldSplitDetails(splitMetaInfo);
    List<Statistics> matchedStats=null;
    if (oldInputSplit instanceof FileSplit) {
      matchedStats=Utils.getFsStatistics(((FileSplit)oldInputSplit).getPath(),this.jobConf);
    }
    fsStats=matchedStats;
    long bytesInPrev=getInputBytes();
    oldRecordReader=oldInputFormat.getRecordReader(oldInputSplit,this.jobConf,new MRReporter(inputContext,oldInputSplit));
    long bytesInCurr=getInputBytes();
    fileInputByteCounter.increment(bytesInCurr - bytesInPrev);
    setIncrementalConfigParams(oldInputSplit);
  }
  return null;
}",0.992978108219744
17298,"private void serializeEvent(DataOutput out) throws IOException {
  if (event == null) {
    out.writeBoolean(false);
    return;
  }
  out.writeBoolean(true);
  if (eventType.equals(EventType.TASK_STATUS_UPDATE_EVENT)) {
    TaskStatusUpdateEvent sEvt=(TaskStatusUpdateEvent)event;
    sEvt.write(out);
  }
 else {
    byte[] eventBytes=null;
switch (eventType) {
case DATA_MOVEMENT_EVENT:
      DataMovementEvent dmEvt=(DataMovementEvent)event;
    eventBytes=DataMovementEventProto.newBuilder().setSourceIndex(dmEvt.getSourceIndex()).setTargetIndex(dmEvt.getTargetIndex()).setUserPayload(ByteString.copyFrom(dmEvt.getUserPayload())).build().toByteArray();
  break;
case INPUT_READ_ERROR_EVENT:
InputReadErrorEvent ideEvt=(InputReadErrorEvent)event;
eventBytes=InputReadErrorEventProto.newBuilder().setIndex(ideEvt.getIndex()).setDiagnostics(ideEvt.getDiagnostics()).build().toByteArray();
break;
case TASK_ATTEMPT_FAILED_EVENT:
TaskAttemptFailedEvent tfEvt=(TaskAttemptFailedEvent)event;
eventBytes=TaskAttemptFailedEventProto.newBuilder().setDiagnostics(tfEvt.getDiagnostics()).build().toByteArray();
break;
case TASK_ATTEMPT_COMPLETED_EVENT:
eventBytes=TaskAttemptCompletedEventProto.newBuilder().build().toByteArray();
break;
case INPUT_FAILED_EVENT:
InputFailedEvent ifEvt=(InputFailedEvent)event;
eventBytes=InputFailedEventProto.newBuilder().setSourceIndex(ifEvt.getSourceIndex()).setTargetIndex(ifEvt.getTargetIndex()).setVersion(ifEvt.getVersion()).build().toByteArray();
case INTPUT_INFORMATION_EVENT:
InputInformationEvent iEvt=(InputInformationEvent)event;
eventBytes=InputInformationEventProto.newBuilder().setUserPayload(ByteString.copyFrom(iEvt.getUserPayload())).build().toByteArray();
default :
throw new TezUncheckedException(""String_Node_Str"" + ""String_Node_Str"" + eventType);
}
out.writeInt(eventType.ordinal());
out.writeInt(eventBytes.length);
out.write(eventBytes);
}
}","private void serializeEvent(DataOutput out) throws IOException {
  if (event == null) {
    out.writeBoolean(false);
    return;
  }
  out.writeBoolean(true);
  out.writeInt(eventType.ordinal());
  if (eventType.equals(EventType.TASK_STATUS_UPDATE_EVENT)) {
    TaskStatusUpdateEvent sEvt=(TaskStatusUpdateEvent)event;
    sEvt.write(out);
  }
 else {
    byte[] eventBytes=null;
switch (eventType) {
case DATA_MOVEMENT_EVENT:
      DataMovementEvent dmEvt=(DataMovementEvent)event;
    eventBytes=DataMovementEventProto.newBuilder().setSourceIndex(dmEvt.getSourceIndex()).setTargetIndex(dmEvt.getTargetIndex()).setUserPayload(ByteString.copyFrom(dmEvt.getUserPayload())).build().toByteArray();
  break;
case INPUT_READ_ERROR_EVENT:
InputReadErrorEvent ideEvt=(InputReadErrorEvent)event;
eventBytes=InputReadErrorEventProto.newBuilder().setIndex(ideEvt.getIndex()).setDiagnostics(ideEvt.getDiagnostics()).build().toByteArray();
break;
case TASK_ATTEMPT_FAILED_EVENT:
TaskAttemptFailedEvent tfEvt=(TaskAttemptFailedEvent)event;
eventBytes=TaskAttemptFailedEventProto.newBuilder().setDiagnostics(tfEvt.getDiagnostics()).build().toByteArray();
break;
case TASK_ATTEMPT_COMPLETED_EVENT:
eventBytes=TaskAttemptCompletedEventProto.newBuilder().build().toByteArray();
break;
case INPUT_FAILED_EVENT:
InputFailedEvent ifEvt=(InputFailedEvent)event;
eventBytes=InputFailedEventProto.newBuilder().setSourceIndex(ifEvt.getSourceIndex()).setTargetIndex(ifEvt.getTargetIndex()).setVersion(ifEvt.getVersion()).build().toByteArray();
case INTPUT_INFORMATION_EVENT:
InputInformationEvent iEvt=(InputInformationEvent)event;
eventBytes=InputInformationEventProto.newBuilder().setUserPayload(ByteString.copyFrom(iEvt.getUserPayload())).build().toByteArray();
default :
throw new TezUncheckedException(""String_Node_Str"" + ""String_Node_Str"" + eventType);
}
out.writeInt(eventBytes.length);
out.write(eventBytes);
}
}",0.9746568109820486
17299,"@Override public void initialize(Configuration conf,byte[] userPayload,Master master) throws IOException, InterruptedException {
  DeprecatedKeys.init();
  Configuration taskConf;
  if (userPayload != null) {
    taskConf=MRHelpers.createConfFromUserPayload(userPayload);
    if (LOG.isDebugEnabled()) {
      Iterator<Entry<String,String>> iter=taskConf.iterator();
      String taskIdStr=mrTask.getTaskAttemptId().getTaskID().toString();
      while (iter.hasNext()) {
        Entry<String,String> confEntry=iter.next();
        LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + taskIdStr + ""String_Node_Str""+ confEntry.getKey()+ ""String_Node_Str""+ confEntry.getValue());
      }
    }
  }
 else {
    taskConf=new Configuration(false);
  }
  copyTezConfigParameters(taskConf,conf);
  final JobConf job=new JobConf(taskConf);
  job.set(MRJobConfig.VERTEX_NAME,taskContext.getVertexName());
  MRTask mrTask=(MRTask)getProcessor();
  this.mrTask=mrTask;
  configureMRTask(job,mrTask);
  this.conf=job;
  this.master=master;
  processor.initialize(this.conf,this.master);
}","@Override public void initialize(Configuration conf,byte[] userPayload,Master master) throws IOException, InterruptedException {
  DeprecatedKeys.init();
  Configuration taskConf;
  if (userPayload != null) {
    taskConf=MRHelpers.createConfFromUserPayload(userPayload);
  }
 else {
    taskConf=new Configuration(false);
  }
  copyTezConfigParameters(taskConf,conf);
  final JobConf job=new JobConf(taskConf);
  job.set(MRJobConfig.VERTEX_NAME,taskContext.getVertexName());
  MRTask mrTask=(MRTask)getProcessor();
  this.mrTask=mrTask;
  if (LOG.isDebugEnabled() && userPayload != null) {
    Iterator<Entry<String,String>> iter=taskConf.iterator();
    String taskIdStr=mrTask.getTaskAttemptId().getTaskID().toString();
    while (iter.hasNext()) {
      Entry<String,String> confEntry=iter.next();
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + taskIdStr + ""String_Node_Str""+ confEntry.getKey()+ ""String_Node_Str""+ confEntry.getValue());
    }
  }
  configureMRTask(job,mrTask);
  this.conf=job;
  this.master=master;
  processor.initialize(this.conf,this.master);
}",0.6099488609948861
17300,"@VisibleForTesting public static ContainerLaunchContext createContainerLaunchContext(Map<ApplicationAccessType,String> acls,ContainerId containerId,TezConfiguration conf,TezVertexID vertexId,Token<JobTokenIdentifier> jobToken,Resource assignedCapability,Map<String,LocalResource> localResources,Map<String,String> vertexEnv,String javaOpts,TaskAttemptListener taskAttemptListener,Credentials credentials,boolean shouldProfile,AppContext appContext){
synchronized (commonContainerSpecLock) {
    if (commonContainerSpec == null) {
      commonContainerSpec=createCommonContainerLaunchContext(acls,conf,jobToken,vertexId,credentials,appContext);
    }
  }
  Map<String,LocalResource> lResources=new TreeMap<String,LocalResource>();
  lResources.putAll(commonContainerSpec.getLocalResources());
  lResources.putAll(localResources);
  Map<String,String> env=commonContainerSpec.getEnvironment();
  Map<String,String> myEnv=new HashMap<String,String>(env.size());
  myEnv.putAll(env);
  myEnv.putAll(vertexEnv);
  List<String> commands=TezEngineChildJVM.getVMCommand(taskAttemptListener.getAddress(),conf,vertexId,containerId,vertexId.getDAGId().getApplicationId(),shouldProfile,javaOpts);
  Map<String,ByteBuffer> myServiceData=new HashMap<String,ByteBuffer>();
  for (  Entry<String,ByteBuffer> entry : commonContainerSpec.getServiceData().entrySet()) {
    myServiceData.put(entry.getKey(),entry.getValue().duplicate());
  }
  ContainerLaunchContext container=ContainerLaunchContext.newInstance(lResources,myEnv,commands,myServiceData,commonContainerSpec.getTokens(),acls);
  return container;
}","@VisibleForTesting public static ContainerLaunchContext createContainerLaunchContext(Map<ApplicationAccessType,String> acls,ContainerId containerId,TezConfiguration conf,TezVertexID vertexId,Token<JobTokenIdentifier> jobToken,Resource assignedCapability,Map<String,LocalResource> localResources,Map<String,String> vertexEnv,String javaOpts,TaskAttemptListener taskAttemptListener,Credentials credentials,boolean shouldProfile,AppContext appContext){
synchronized (commonContainerSpecLock) {
    if (commonContainerSpec == null) {
      commonContainerSpec=createCommonContainerLaunchContext(acls,conf,jobToken,vertexId,credentials,appContext);
    }
  }
  Map<String,LocalResource> lResources=new TreeMap<String,LocalResource>();
  lResources.putAll(commonContainerSpec.getLocalResources());
  lResources.putAll(localResources);
  Map<String,String> env=commonContainerSpec.getEnvironment();
  Map<String,String> myEnv=new HashMap<String,String>(env.size());
  myEnv.putAll(env);
  myEnv.putAll(vertexEnv);
  List<String> commands=TezEngineChildJVM.getVMCommand(taskAttemptListener.getAddress(),conf,vertexId,containerId,vertexId.getDAGId().getApplicationId(),shouldProfile,javaOpts);
  Map<String,ByteBuffer> myServiceData=new HashMap<String,ByteBuffer>();
  for (  Entry<String,ByteBuffer> entry : commonContainerSpec.getServiceData().entrySet()) {
    myServiceData.put(entry.getKey(),entry.getValue().duplicate());
  }
  ContainerLaunchContext container=ContainerLaunchContext.newInstance(lResources,myEnv,commands,myServiceData,commonContainerSpec.getTokens().duplicate(),acls);
  return container;
}",0.9962476547842402
17301,"@Private public void setName(String name){
  setStrings(name,name);
}","@Private public void setName(String name){
  set(TEZ_DAG_NAME,name);
}",0.8345323741007195
17302,"@Public @Stable public String getName(){
}","@Public @Stable public String getName(){
  String name=get(TEZ_DAG_NAME);
  return name;
}",0.6363636363636364
17303,"public static void main(String[] args){
  try {
    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());
    String containerIdStr=System.getenv(Environment.CONTAINER_ID.name());
    String nodeHostString=System.getenv(Environment.NM_HOST.name());
    String nodePortString=System.getenv(Environment.NM_PORT.name());
    String nodeHttpPortString=System.getenv(Environment.NM_HTTP_PORT.name());
    String appSubmitTimeStr=System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);
    validateInputParam(appSubmitTimeStr,ApplicationConstants.APP_SUBMIT_TIME_ENV);
    ContainerId containerId=ConverterUtils.toContainerId(containerIdStr);
    ApplicationAttemptId applicationAttemptId=containerId.getApplicationAttemptId();
    long appSubmitTime=Long.parseLong(appSubmitTimeStr);
    Options opts=getCliOptions();
    CommandLine cliParser=new GnuParser().parse(opts,args);
    String type;
    DAGConfiguration dagPlan=null;
    TezConfiguration conf=new TezConfiguration(new YarnConfiguration());
    if (cliParser.hasOption(OPT_PREDEFINED)) {
      LOG.info(""String_Node_Str"");
      type=cliParser.getOptionValue(OPT_PREDEFINED,""String_Node_Str"");
      LOG.info(""String_Node_Str"" + type);
      if (type.equals(""String_Node_Str"")) {
        dagPlan=(DAGConfiguration)MRRExampleHelper.createDAGConfigurationForMR();
      }
 else       if (type.equals(""String_Node_Str"")) {
        dagPlan=(DAGConfiguration)MRRExampleHelper.createDAGConfigurationForMRR();
      }
    }
 else {
      dagPlan=new DAGConfiguration();
      dagPlan.addResource(TezConfiguration.DAG_AM_PLAN_CONFIG_XML);
    }
    LOG.info(""String_Node_Str"" + dagPlan.getVertices().length + ""String_Node_Str"");
    for (    String v : dagPlan.getVertices()) {
      LOG.info(""String_Node_Str"" + v);
    }
    String jobUserName=System.getenv(ApplicationConstants.Environment.USER.name());
    conf.setBoolean(""String_Node_Str"",false);
    conf.set(TezConfiguration.USER_NAME,jobUserName);
    Map<String,String> config=dagPlan.getConfig();
    for (    Entry<String,String> entry : config.entrySet()) {
      conf.set(entry.getKey(),entry.getValue());
    }
    DAGAppMaster appMaster=new DAGAppMaster(applicationAttemptId,containerId,nodeHostString,Integer.parseInt(nodePortString),Integer.parseInt(nodeHttpPortString),appSubmitTime,dagPlan);
    ShutdownHookManager.get().addShutdownHook(new DAGAppMasterShutdownHook(appMaster),SHUTDOWN_HOOK_PRIORITY);
    initAndStartAppMaster(appMaster,conf,jobUserName);
  }
 catch (  Throwable t) {
    LOG.fatal(""String_Node_Str"",t);
    System.exit(1);
  }
}","public static void main(String[] args){
  try {
    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());
    String containerIdStr=System.getenv(Environment.CONTAINER_ID.name());
    String nodeHostString=System.getenv(Environment.NM_HOST.name());
    String nodePortString=System.getenv(Environment.NM_PORT.name());
    String nodeHttpPortString=System.getenv(Environment.NM_HTTP_PORT.name());
    String appSubmitTimeStr=System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);
    validateInputParam(appSubmitTimeStr,ApplicationConstants.APP_SUBMIT_TIME_ENV);
    ContainerId containerId=ConverterUtils.toContainerId(containerIdStr);
    ApplicationAttemptId applicationAttemptId=containerId.getApplicationAttemptId();
    long appSubmitTime=Long.parseLong(appSubmitTimeStr);
    Options opts=getCliOptions();
    CommandLine cliParser=new GnuParser().parse(opts,args);
    String type;
    DAGConfiguration dagPlan=null;
    TezConfiguration conf=new TezConfiguration(new YarnConfiguration());
    if (cliParser.hasOption(OPT_PREDEFINED)) {
      LOG.info(""String_Node_Str"");
      type=cliParser.getOptionValue(OPT_PREDEFINED,""String_Node_Str"");
      LOG.info(""String_Node_Str"" + type);
      if (type.equals(""String_Node_Str"")) {
        dagPlan=(DAGConfiguration)MRRExampleHelper.createDAGConfigurationForMR();
      }
 else       if (type.equals(""String_Node_Str"")) {
        dagPlan=(DAGConfiguration)MRRExampleHelper.createDAGConfigurationForMRR();
      }
    }
 else {
      dagPlan=new DAGConfiguration();
      dagPlan.addResource(TezConfiguration.DAG_AM_PLAN_CONFIG_XML);
    }
    LOG.info(""String_Node_Str"" + dagPlan.getVertices().length + ""String_Node_Str"");
    for (    String v : dagPlan.getVertices()) {
      LOG.info(""String_Node_Str"" + v);
    }
    String jobUserName=System.getenv(ApplicationConstants.Environment.USER.name());
    conf.setBoolean(""String_Node_Str"",false);
    Map<String,String> config=dagPlan.getConfig();
    for (    Entry<String,String> entry : config.entrySet()) {
      conf.set(entry.getKey(),entry.getValue());
    }
    DAGAppMaster appMaster=new DAGAppMaster(applicationAttemptId,containerId,nodeHostString,Integer.parseInt(nodePortString),Integer.parseInt(nodeHttpPortString),appSubmitTime,dagPlan);
    ShutdownHookManager.get().addShutdownHook(new DAGAppMasterShutdownHook(appMaster),SHUTDOWN_HOOK_PRIORITY);
    initAndStartAppMaster(appMaster,conf,jobUserName);
  }
 catch (  Throwable t) {
    LOG.fatal(""String_Node_Str"",t);
    System.exit(1);
  }
}",0.989477786438036
17304,"/** 
 * Create and initialize (but don't start) a single dag. 
 */
protected DAG createDAG(DAGConfiguration dagPlan){
  DAG newDag=new DAGImpl(dagId,appAttemptID,conf,dagPlan,dispatcher.getEventHandler(),taskAttemptListener,jobTokenSecretManager,fsTokens,clock,currentUser.getUserName(),appSubmitTime,taskHeartbeatHandler,context,dagLocationHint);
  ((RunningAppContext)context).setDAG(newDag);
  dispatcher.register(DAGFinishEvent.Type.class,createDAGFinishEventHandler());
  return newDag;
}","/** 
 * Create and initialize (but don't start) a single dag. 
 */
protected DAG createDAG(DAGConfiguration dagPlan){
  DAG newDag=new DAGImpl(dagId,appAttemptID,conf,dagPlan,dispatcher.getEventHandler(),taskAttemptListener,jobTokenSecretManager,fsTokens,clock,currentUser.getShortUserName(),appSubmitTime,taskHeartbeatHandler,context,dagLocationHint);
  ((RunningAppContext)context).setDAG(newDag);
  dispatcher.register(DAGFinishEvent.Type.class,createDAGFinishEventHandler());
  return newDag;
}",0.9949545913218972
17305,"@Override public String getUser(){
  return this.conf.get(TezConfiguration.USER_NAME);
}","@Override public String getUser(){
  return dag.getUserName();
}",0.6973684210526315
17306,"public DAGImpl(TezDAGID dagId,ApplicationAttemptId applicationAttemptId,TezConfiguration conf,DAGConfiguration dagPlan,EventHandler eventHandler,TaskAttemptListener taskAttemptListener,JobTokenSecretManager jobTokenSecretManager,Credentials fsTokenCredentials,Clock clock,String userName,long appSubmitTime,TaskHeartbeatHandler thh,AppContext appContext,DAGLocationHint dagLocationHint){
  this.applicationAttemptId=applicationAttemptId;
  this.dagId=dagId;
  this.dagName=dagPlan.getName();
  this.conf=conf;
  this.dagPlan=dagPlan;
  this.clock=clock;
  this.appContext=appContext;
  this.userName=userName;
  this.queueName=conf.get(MRJobConfig.QUEUE_NAME,""String_Node_Str"");
  this.appSubmitTime=appSubmitTime;
  this.taskAttemptListener=taskAttemptListener;
  this.taskHeartbeatHandler=thh;
  this.eventHandler=eventHandler;
  ReadWriteLock readWriteLock=new ReentrantReadWriteLock();
  this.readLock=readWriteLock.readLock();
  this.writeLock=readWriteLock.writeLock();
  this.fsTokens=fsTokenCredentials;
  this.jobTokenSecretManager=jobTokenSecretManager;
  this.aclsManager=new ApplicationACLsManager(conf);
  this.username=System.getProperty(""String_Node_Str"");
  this.dagLocationHint=dagLocationHint;
  stateMachine=stateMachineFactory.make(this);
}","public DAGImpl(TezDAGID dagId,ApplicationAttemptId applicationAttemptId,TezConfiguration conf,DAGConfiguration dagPlan,EventHandler eventHandler,TaskAttemptListener taskAttemptListener,JobTokenSecretManager jobTokenSecretManager,Credentials fsTokenCredentials,Clock clock,String appUserName,long appSubmitTime,TaskHeartbeatHandler thh,AppContext appContext,DAGLocationHint dagLocationHint){
  this.applicationAttemptId=applicationAttemptId;
  this.dagId=dagId;
  this.dagPlan=dagPlan;
  this.conf=conf;
  this.dagName=(dagPlan.getName() != null) ? dagPlan.getName() : ""String_Node_Str"";
  this.userName=appUserName;
  this.clock=clock;
  this.appContext=appContext;
  this.queueName=conf.get(MRJobConfig.QUEUE_NAME,""String_Node_Str"");
  this.appSubmitTime=appSubmitTime;
  this.taskAttemptListener=taskAttemptListener;
  this.taskHeartbeatHandler=thh;
  this.eventHandler=eventHandler;
  ReadWriteLock readWriteLock=new ReentrantReadWriteLock();
  this.readLock=readWriteLock.readLock();
  this.writeLock=readWriteLock.writeLock();
  this.fsTokens=fsTokenCredentials;
  this.jobTokenSecretManager=jobTokenSecretManager;
  this.aclsManager=new ApplicationACLsManager(conf);
  this.dagLocationHint=dagLocationHint;
  stateMachine=stateMachineFactory.make(this);
}",0.8472828242760809
17307,"@VisibleForTesting public static ContainerLaunchContext createContainerLaunchContext(Map<ApplicationAccessType,String> acls,ContainerId containerId,TezConfiguration conf,TezVertexID vertexId,Token<JobTokenIdentifier> jobToken,Resource assignedCapability,Map<String,LocalResource> localResources,Map<String,String> vertexEnv,String javaOpts,TaskAttemptListener taskAttemptListener,Credentials credentials,boolean shouldProfile,AppContext appContext){
synchronized (commonContainerSpecLock) {
    if (commonContainerSpec == null) {
      commonContainerSpec=createCommonContainerLaunchContext(acls,conf,jobToken,vertexId,credentials);
    }
  }
  Map<String,LocalResource> lResources=new TreeMap<String,LocalResource>();
  lResources.putAll(commonContainerSpec.getLocalResources());
  lResources.putAll(localResources);
  Map<String,String> env=commonContainerSpec.getEnvironment();
  Map<String,String> myEnv=new HashMap<String,String>(env.size());
  myEnv.putAll(env);
  myEnv.putAll(vertexEnv);
  List<String> commands=TezEngineChildJVM.getVMCommand(taskAttemptListener.getAddress(),conf,vertexId,containerId,vertexId.getDAGId().getApplicationId(),shouldProfile,javaOpts);
  Map<String,ByteBuffer> myServiceData=new HashMap<String,ByteBuffer>();
  for (  Entry<String,ByteBuffer> entry : commonContainerSpec.getServiceData().entrySet()) {
    myServiceData.put(entry.getKey(),entry.getValue().duplicate());
  }
  ContainerLaunchContext container=BuilderUtils.newContainerLaunchContext(commonContainerSpec.getUser(),lResources,myEnv,commands,myServiceData,commonContainerSpec.getContainerTokens().duplicate(),acls);
  return container;
}","@VisibleForTesting public static ContainerLaunchContext createContainerLaunchContext(Map<ApplicationAccessType,String> acls,ContainerId containerId,TezConfiguration conf,TezVertexID vertexId,Token<JobTokenIdentifier> jobToken,Resource assignedCapability,Map<String,LocalResource> localResources,Map<String,String> vertexEnv,String javaOpts,TaskAttemptListener taskAttemptListener,Credentials credentials,boolean shouldProfile,AppContext appContext){
synchronized (commonContainerSpecLock) {
    if (commonContainerSpec == null) {
      commonContainerSpec=createCommonContainerLaunchContext(acls,conf,jobToken,vertexId,credentials,appContext);
    }
  }
  Map<String,LocalResource> lResources=new TreeMap<String,LocalResource>();
  lResources.putAll(commonContainerSpec.getLocalResources());
  lResources.putAll(localResources);
  Map<String,String> env=commonContainerSpec.getEnvironment();
  Map<String,String> myEnv=new HashMap<String,String>(env.size());
  myEnv.putAll(env);
  myEnv.putAll(vertexEnv);
  List<String> commands=TezEngineChildJVM.getVMCommand(taskAttemptListener.getAddress(),conf,vertexId,containerId,vertexId.getDAGId().getApplicationId(),shouldProfile,javaOpts);
  Map<String,ByteBuffer> myServiceData=new HashMap<String,ByteBuffer>();
  for (  Entry<String,ByteBuffer> entry : commonContainerSpec.getServiceData().entrySet()) {
    myServiceData.put(entry.getKey(),entry.getValue().duplicate());
  }
  ContainerLaunchContext container=BuilderUtils.newContainerLaunchContext(commonContainerSpec.getUser(),lResources,myEnv,commands,myServiceData,commonContainerSpec.getContainerTokens().duplicate(),acls);
  return container;
}",0.9966514459665144
17308,"/** 
 * Create the common   {@link ContainerLaunchContext} for all attempts.
 * @param applicationACLs
 */
private static ContainerLaunchContext createCommonContainerLaunchContext(Map<ApplicationAccessType,String> applicationACLs,TezConfiguration conf,Token<JobTokenIdentifier> jobToken,TezVertexID vertexId,Credentials credentials){
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  Map<String,String> environment=new HashMap<String,String>();
  Map<String,ByteBuffer> serviceData=new HashMap<String,ByteBuffer>();
  ByteBuffer taskCredentialsBuffer=ByteBuffer.wrap(new byte[]{});
  try {
    Credentials taskCredentials=new Credentials();
    if (UserGroupInformation.isSecurityEnabled()) {
      LOG.info(""String_Node_Str"" + credentials.numberOfTokens() + ""String_Node_Str""+ credentials.numberOfSecretKeys()+ ""String_Node_Str"");
      taskCredentials.addAll(credentials);
    }
    TokenCache.setJobToken(jobToken,taskCredentials);
    DataOutputBuffer containerTokens_dob=new DataOutputBuffer();
    LOG.info(""String_Node_Str"" + taskCredentials.numberOfTokens());
    taskCredentials.writeTokenStorageToStream(containerTokens_dob);
    taskCredentialsBuffer=ByteBuffer.wrap(containerTokens_dob.getData(),0,containerTokens_dob.getLength());
    LOG.info(""String_Node_Str"");
    serviceData.put(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID,ShuffleHandler.serializeServiceData(jobToken));
  }
 catch (  IOException e) {
    throw new YarnException(e);
  }
  ContainerLaunchContext container=BuilderUtils.newContainerLaunchContext(conf.get(TezConfiguration.USER_NAME),localResources,environment,null,serviceData,taskCredentialsBuffer,applicationACLs);
  return container;
}","/** 
 * Create the common   {@link ContainerLaunchContext} for all attempts.
 * @param applicationACLs
 */
private static ContainerLaunchContext createCommonContainerLaunchContext(Map<ApplicationAccessType,String> applicationACLs,TezConfiguration conf,Token<JobTokenIdentifier> jobToken,TezVertexID vertexId,Credentials credentials,AppContext appContext){
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  Map<String,String> environment=new HashMap<String,String>();
  Map<String,ByteBuffer> serviceData=new HashMap<String,ByteBuffer>();
  ByteBuffer taskCredentialsBuffer=ByteBuffer.wrap(new byte[]{});
  try {
    Credentials taskCredentials=new Credentials();
    if (UserGroupInformation.isSecurityEnabled()) {
      LOG.info(""String_Node_Str"" + credentials.numberOfTokens() + ""String_Node_Str""+ credentials.numberOfSecretKeys()+ ""String_Node_Str"");
      taskCredentials.addAll(credentials);
    }
    TokenCache.setJobToken(jobToken,taskCredentials);
    DataOutputBuffer containerTokens_dob=new DataOutputBuffer();
    LOG.info(""String_Node_Str"" + taskCredentials.numberOfTokens());
    taskCredentials.writeTokenStorageToStream(containerTokens_dob);
    taskCredentialsBuffer=ByteBuffer.wrap(containerTokens_dob.getData(),0,containerTokens_dob.getLength());
    LOG.info(""String_Node_Str"");
    serviceData.put(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID,ShuffleHandler.serializeServiceData(jobToken));
  }
 catch (  IOException e) {
    throw new YarnException(e);
  }
  ContainerLaunchContext container=BuilderUtils.newContainerLaunchContext(appContext.getDAG().getUserName(),localResources,environment,null,serviceData,taskCredentialsBuffer,applicationACLs);
  return container;
}",0.929051094890511
17309,"private static void populateMRToDagParamMap(){
  mrParamToDAGParamMap.put(MRJobConfig.JOB_SUBMIT_DIR,TezConfiguration.JOB_SUBMIT_DIR);
  mrParamToDAGParamMap.put(MRJobConfig.APPLICATION_TOKENS_FILE,TezConfiguration.APPLICATION_TOKENS_FILE);
  mrParamToDAGParamMap.put(MRJobConfig.JOB_NAME,TezConfiguration.JOB_NAME);
  mrParamToDAGParamMap.put(MRJobConfig.MR_AM_TASK_LISTENER_THREAD_COUNT,TezConfiguration.DAG_AM_TASK_LISTENER_THREAD_COUNT);
  mrParamToDAGParamMap.put(MRJobConfig.USER_NAME,TezConfiguration.USER_NAME);
  mrParamToDAGParamMap.put(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER,TezConfiguration.DAG_MAX_TASK_FAILURES_PER_NODE);
  mrParamToDAGParamMap.put(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE,TezConfiguration.DAG_NODE_BLACKLISTING_ENABLED);
  mrParamToDAGParamMap.put(MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT,TezConfiguration.DAG_NODE_BLACKLISTING_IGNORE_THRESHOLD);
}","private static void populateMRToDagParamMap(){
  mrParamToDAGParamMap.put(MRJobConfig.JOB_SUBMIT_DIR,TezConfiguration.JOB_SUBMIT_DIR);
  mrParamToDAGParamMap.put(MRJobConfig.APPLICATION_TOKENS_FILE,TezConfiguration.APPLICATION_TOKENS_FILE);
  mrParamToDAGParamMap.put(MRJobConfig.MR_AM_TASK_LISTENER_THREAD_COUNT,TezConfiguration.DAG_AM_TASK_LISTENER_THREAD_COUNT);
  mrParamToDAGParamMap.put(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER,TezConfiguration.DAG_MAX_TASK_FAILURES_PER_NODE);
  mrParamToDAGParamMap.put(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE,TezConfiguration.DAG_NODE_BLACKLISTING_ENABLED);
  mrParamToDAGParamMap.put(MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT,TezConfiguration.DAG_NODE_BLACKLISTING_IGNORE_THRESHOLD);
}",0.8658682634730539
17310,"private void setDAGParamsFromMRConf(DAG dag){
  Configuration mrConf=this.conf;
  Map<String,String> mrParamToDAGParamMap=DeprecatedKeys.getMRToDAGParamMap();
  for (  Entry<String,String> entry : mrParamToDAGParamMap.entrySet()) {
    if (mrConf.get(entry.getKey()) != null) {
      LOG.info(""String_Node_Str"" + entry.getValue());
      if (entry.getValue().equals(TezConfiguration.JOB_NAME)) {
        dag.setName(mrConf.get(entry.getKey()));
      }
 else {
        dag.addConfiguration(entry.getValue(),mrConf.get(entry.getKey()));
      }
    }
  }
}","private void setDAGParamsFromMRConf(DAG dag){
  Configuration mrConf=this.conf;
  Map<String,String> mrParamToDAGParamMap=DeprecatedKeys.getMRToDAGParamMap();
  for (  Entry<String,String> entry : mrParamToDAGParamMap.entrySet()) {
    if (mrConf.get(entry.getKey()) != null) {
      LOG.info(""String_Node_Str"" + entry.getValue());
      dag.addConfiguration(entry.getValue(),mrConf.get(entry.getKey()));
    }
  }
  String jobName=mrConf.get(MRJobConfig.JOB_NAME);
  if (jobName != null) {
    dag.setName(jobName);
  }
}",0.7298050139275766
17311,"/** 
 * Disconnect from Pusher. <p>Calls are ignored if the   {@link Pusher.getConnection().getState()} is not {@link com.pusher.client.connection.ConnectionState.CONNECTED}.</p>
 */
public void disconnect(){
  if (connection.getState() == ConnectionState.CONNECTED) {
    connection.disconnect();
  }
}","/** 
 * Disconnect from Pusher. <p>Calls are ignored if the   {@link Connection#getState()} is not {@link com.pusher.client.connection.ConnectionState#CONNECTED}.</p>
 */
public void disconnect(){
  if (connection.getState() == ConnectionState.CONNECTED) {
    connection.disconnect();
  }
}",0.7239057239057239
17312,"/** 
 * Subscribes to a   {@link com.pusher.client.channel.PrivateChannel} which requires authentication.
 * @param channelName The name of the channel to subscribe to.
 * @param listener A listener to be informed of both Pusher channel protocol events and subscription data events.
 * @param eventNames An optional list of names of events to be bound to on the channel. The equivalent of calling {@link com.pusher.client.channel.Channel.bind(String, SubscriptionListener)} on or more times.
 * @return A new {@link com.pusher.client.channel.PrivateChannel} representing the subscription.
 * @throws IllegalStateException if a {@link com.pusher.client.Authorizer} has not been set for the {@link Pusher} instance via {@link #Pusher(String,PusherOptions)}.
 */
public PrivateChannel subscribePrivate(String channelName,PrivateChannelEventListener listener,String... eventNames){
  throwExceptionIfNoAuthorizerHasBeenSet();
  PrivateChannelImpl channel=factory.newPrivateChannel(connection,channelName,pusherOptions.getAuthorizer());
  channelManager.subscribeTo(channel,listener,eventNames);
  return channel;
}","/** 
 * Subscribes to a   {@link com.pusher.client.channel.PrivateChannel} which requires authentication.
 * @param channelName The name of the channel to subscribe to.
 * @param listener A listener to be informed of both Pusher channel protocol events and subscription data events.
 * @param eventNames An optional list of names of events to be bound to on the channel. The equivalent of calling {@link com.pusher.client.channel.Channel#bind(String,SubscriptionEventListener)} on or more times.
 * @return A new {@link com.pusher.client.channel.PrivateChannel} representing the subscription.
 * @throws IllegalStateException if a {@link com.pusher.client.Authorizer} has not been set for the {@link Pusher} instance via {@link #Pusher(String,PusherOptions)}.
 */
public PrivateChannel subscribePrivate(String channelName,PrivateChannelEventListener listener,String... eventNames){
  throwExceptionIfNoAuthorizerHasBeenSet();
  PrivateChannelImpl channel=factory.newPrivateChannel(connection,channelName,pusherOptions.getAuthorizer());
  channelManager.subscribeTo(channel,listener,eventNames);
  return channel;
}",0.9964028776978416
17313,"/** 
 * Subscribes to a   {@link com.pusher.client.channel.PresenceChannel} which requires authentication.
 * @param channelName The name of the channel to subscribe to.
 * @param listener A listener to be informed of Pusher channel protocol, including presence-specific events, and subscription data events.
 * @param eventNames An optional list of names of events to be bound to on the channel. The equivalent of calling {@link com.pusher.client.channel.Channel.bind(String, SubscriptionListener)} on or more times.
 * @return A new {@link com.pusher.client.channel.PresenceChannel} representing the subscription.
 * @throws IllegalStateException if a {@link com.pusher.client.Authorizer} has not been set for the {@link Pusher} instance via {@link #Pusher(String,PusherOptions)}.
 */
public PresenceChannel subscribePresence(String channelName,PresenceChannelEventListener listener,String... eventNames){
  throwExceptionIfNoAuthorizerHasBeenSet();
  PresenceChannelImpl channel=factory.newPresenceChannel(connection,channelName,pusherOptions.getAuthorizer());
  channelManager.subscribeTo(channel,listener,eventNames);
  return channel;
}","/** 
 * Subscribes to a   {@link com.pusher.client.channel.PresenceChannel} which requires authentication.
 * @param channelName The name of the channel to subscribe to.
 * @param listener A listener to be informed of Pusher channel protocol, including presence-specific events, and subscription data events.
 * @param eventNames An optional list of names of events to be bound to on the channel. The equivalent of calling {@link com.pusher.client.channel.Channel#bind(String,SubscriptionEventListener)} on or more times.
 * @return A new {@link com.pusher.client.channel.PresenceChannel} representing the subscription.
 * @throws IllegalStateException if a {@link com.pusher.client.Authorizer} has not been set for the {@link Pusher} instance via {@link #Pusher(String,PusherOptions)}.
 */
public PresenceChannel subscribePresence(String channelName,PresenceChannelEventListener listener,String... eventNames){
  throwExceptionIfNoAuthorizerHasBeenSet();
  PresenceChannelImpl channel=factory.newPresenceChannel(connection,channelName,pusherOptions.getAuthorizer());
  channelManager.subscribeTo(channel,listener,eventNames);
  return channel;
}",0.9965034965034965
17314,"/** 
 * Binds a   {@link ConnectionEventListener} to the specified events and then connects to Pusher. This is equivalent to binding a {@link ConnectionEventListener} using the {@link Connection#bind(ConnectionState,ConnectionEventListener)} method before connecting.<p>Calls are ignored (a connection is not attempted) if the  {@link Pusher.getConnection().getState()} is not {@link com.pusher.client.connection.ConnectionState.DISCONNECTED}.</p>
 * @param eventListener A {@link ConnectionEventListener} that will receive connection events. This can be null if you are not interested in receiving connection events, in which case you should call {@link #connect()} instead of this method.
 * @param connectionStates An optional list of {@link ConnectionState}s to bind your   {@link ConnectionEventListener} to before connecting to Pusher. If you do not specify any {@link ConnectionState}s then your   {@link ConnectionEventListener} will be bound to all connection events. This is equivalent to calling {@link #connect(ConnectionEventListener,ConnectionState)} with {@link ConnectionState#ALL}.
 * @throws IllegalArgumentException If the {@link ConnectionEventListener} is null and at least one connection state has been specified.
 */
public void connect(ConnectionEventListener eventListener,ConnectionState... connectionStates){
  if (eventListener != null) {
    if (connectionStates.length == 0) {
      connectionStates=new ConnectionState[]{ConnectionState.ALL};
    }
    for (    ConnectionState state : connectionStates) {
      connection.bind(state,eventListener);
    }
  }
 else {
    if (connectionStates.length > 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  connection.connect();
}","/** 
 * Binds a   {@link ConnectionEventListener} to the specified events and then connects to Pusher. This is equivalent to binding a {@link ConnectionEventListener} using the {@link Connection#bind(ConnectionState,ConnectionEventListener)} method before connecting.<p>Calls are ignored (a connection is not attempted) if the  {@link Connection#getState()} is not {@link com.pusher.client.connection.ConnectionState#DISCONNECTED}.</p>
 * @param eventListener A {@link ConnectionEventListener} that will receive connection events. This can be null if you are not interested in receiving connection events, in which case you should call {@link #connect()} instead of this method.
 * @param connectionStates An optional list of {@link ConnectionState}s to bind your   {@link ConnectionEventListener} to before connecting to Pusher. If you do not specify any {@link ConnectionState}s then your   {@link ConnectionEventListener} will be bound to all connection events. This is equivalent to calling {@link #connect(ConnectionEventListener,ConnectionState)} with {@link ConnectionState#ALL}.
 * @throws IllegalArgumentException If the {@link ConnectionEventListener} is null and at least one connection state has been specified.
 */
public void connect(ConnectionEventListener eventListener,ConnectionState... connectionStates){
  if (eventListener != null) {
    if (connectionStates.length == 0) {
      connectionStates=new ConnectionState[]{ConnectionState.ALL};
    }
    for (    ConnectionState state : connectionStates) {
      connection.bind(state,eventListener);
    }
  }
 else {
    if (connectionStates.length > 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  connection.connect();
}",0.9866898148148148
17315,"/** 
 * The host to which connections will be made. Note that if you wish to connect to a standard Pusher cluster, the convenience method setCluster will set the host and ports correctly from a single argument.
 * @param hostname
 * @return this, for chaining
 */
public PusherOptions setHost(String host){
  this.host=host;
  return this;
}","/** 
 * The host to which connections will be made. Note that if you wish to connect to a standard Pusher cluster, the convenience method setCluster will set the host and ports correctly from a single argument.
 * @param host
 * @return this, for chaining
 */
public PusherOptions setHost(String host){
  this.host=host;
  return this;
}",0.9941002949852508
17316,"/** 
 * The port to which unencrypted connections will be made. Note that if you wish to connect to a standard Pusher cluster, the convenience method setCluster will set the host and ports correctly from a single argument.
 * @param non-SSL port number
 * @return this, for chaining
 */
public PusherOptions setWsPort(int wsPort){
  this.wsPort=wsPort;
  return this;
}","/** 
 * The port to which unencrypted connections will be made. Note that if you wish to connect to a standard Pusher cluster, the convenience method setCluster will set the host and ports correctly from a single argument.
 * @param wsPort port number
 * @return this, for chaining
 */
public PusherOptions setWsPort(int wsPort){
  this.wsPort=wsPort;
  return this;
}",0.98236092265943
17317,"/** 
 * The port to which encrypted connections will be made. Note that if you wish to connect to a standard Pusher cluster, the convenience method setCluster will set the host and ports correctly from a single argument.
 * @param SSL port number
 * @return this, for chaining
 */
public PusherOptions setWssPort(int wssPort){
  this.wssPort=wssPort;
  return this;
}","/** 
 * The port to which encrypted connections will be made. Note that if you wish to connect to a standard Pusher cluster, the convenience method setCluster will set the host and ports correctly from a single argument.
 * @param wssPort port number
 * @return this, for chaining
 */
public PusherOptions setWssPort(int wssPort){
  this.wssPort=wssPort;
  return this;
}",0.986449864498645
17318,"/** 
 * No need to call this via the API. Instead use   {@link com.pusher.client.Pusher.connect()}.
 */
void connect();","/** 
 * No need to call this via the API. Instead use   {@link com.pusher.client.Pusher#connect()}.
 */
void connect();",0.9915966386554622
17319,"/** 
 * <p>Callback that indicates either: <ul> <li>An error message has been received from Pusher, or</li> <li>An error has occurred in the client library.</li> </ul></p> <p>All   {@linkplain ConnectionEventListener}s that have been registered by calling   {@link Connection#bind(ConnectionState,ConnectionEventListener)}will receive this callback, even if the   {@linkplain ConnectionEventListener} is only bound to specificconnection status changes.</p>
 * @param message A message indicating the cause of the error.
 * @param code The error code for the message. Can be null.
 * @param e The exception that was thrown, if any. Can be null.
 */
void onError(String message,String code,Exception e);","/** 
 * Callback that indicates either: <ul> <li>An error message has been received from Pusher, or</li> <li>An error has occurred in the client library.</li> </ul> <p>All   {@linkplain ConnectionEventListener}s that have been registered by calling   {@link Connection#bind(ConnectionState,ConnectionEventListener)}will receive this callback, even if the   {@linkplain ConnectionEventListener} is only bound to specificconnection status changes.</p>
 * @param message A message indicating the cause of the error.
 * @param code The error code for the message. Can be null.
 * @param e The exception that was thrown, if any. Can be null.
 */
void onError(String message,String code,Exception e);",0.9949820788530466
17320,"/** 
 * The previous connections state. The state the connection has transitioned from.
 * @return
 */
public ConnectionState getPreviousState(){
  return previousState;
}","/** 
 * The previous connections state. The state the connection has transitioned from.
 * @return the previous connection state
 */
public ConnectionState getPreviousState(){
  return previousState;
}",0.9193548387096774
17321,"/** 
 * The current connection state. The state the connection has transitioned to.
 * @return
 */
public ConnectionState getCurrentState(){
  return currentState;
}","/** 
 * The current connection state. The state the connection has transitioned to.
 * @return the current connection state
 */
public ConnectionState getCurrentState(){
  return currentState;
}",0.9192200557103064
17322,"/** 
 * Identifies if the HTTP request will be sent over HTTPS.
 * @return
 */
public Boolean isSSL(){
  return this.endPoint.getProtocol().equals(""String_Node_Str"");
}","/** 
 * Identifies if the HTTP request will be sent over HTTPS.
 * @return true if the endpoint protocol is 'https'
 */
public Boolean isSSL(){
  return this.endPoint.getProtocol().equals(""String_Node_Str"");
}",0.8912466843501327
17323,"/** 
 * Disconnect from Pusher. <p> Calls are ignored if the   {@link Pusher.getConnection().getState()} is not{@link com.pusher.client.connection.ConnectionState.CONNECTED}. </p>
 */
public void disconnect(){
  if (connection.getState() == ConnectionState.CONNECTED) {
    connection.disconnect();
  }
}","/** 
 * Disconnect from Pusher. <p> Calls are ignored if the   {@link Connection#getState()}, retrieved from   {@link Pusher#getConnection}, is not  {@link com.pusher.client.connection.ConnectionState#CONNECTED}. </p>
 */
public void disconnect(){
  if (connection.getState() == ConnectionState.CONNECTED) {
    connection.disconnect();
  }
}",0.8699690402476781
17324,"/** 
 * Get a channel with the given name
 * @param channelName
 * @return The channel with the given name if it's present, otherwise <code>null</code>
 */
public Channel getChannel(String channelName){
  return channelManager.getChannel(channelName);
}","/** 
 * Get a channel with the given name
 * @param channelName The name of the channel
 * @return The channel with the given name if it's present, otherwise <code>null</code>
 */
public Channel getChannel(String channelName){
  return channelManager.getChannel(channelName);
}",0.9547169811320756
17325,"/** 
 * The host to which connections will be made. Note that if you wish to connect to a standard Pusher cluster, the convenience method setCluster will set the host and ports correctly from a single argument.
 * @param host
 * @return this, for chaining
 */
public PusherOptions setHost(final String host){
  this.host=host;
  return this;
}","/** 
 * The host to which connections will be made. Note that if you wish to connect to a standard Pusher cluster, the convenience method setCluster will set the host and ports correctly from a single argument.
 * @param host The host
 * @return this, for chaining
 */
public PusherOptions setHost(final String host){
  this.host=host;
  return this;
}",0.9870503597122302
17326,"/** 
 * Sets an encrypted (SSL) connection should be used when connecting to Pusher.
 * @param encrypted
 * @return this, for chaining
 */
public PusherOptions setEncrypted(final boolean encrypted){
  this.encrypted=encrypted;
  return this;
}","/** 
 * Sets whether an encrypted (SSL) connection should be used when connecting to Pusher.
 * @param encrypted Whether to use an SSL connection
 * @return this, for chaining
 */
public PusherOptions setEncrypted(final boolean encrypted){
  this.encrypted=encrypted;
  return this;
}",0.922201138519924
17327,"/** 
 * Construct the URL for the WebSocket connection based on the options previous set on this object and the provided API key
 * @param apiKey
 * @return the WebSocket URL
 */
public String buildUrl(final String apiKey){
  return String.format(""String_Node_Str"",encrypted ? WSS_SCHEME : WS_SCHEME,host,encrypted ? wssPort : wsPort,apiKey,URI_SUFFIX);
}","/** 
 * Construct the URL for the WebSocket connection based on the options previous set on this object and the provided API key
 * @param apiKey The API key
 * @return the WebSocket URL
 */
public String buildUrl(final String apiKey){
  return String.format(""String_Node_Str"",encrypted ? WSS_SCHEME : WS_SCHEME,host,encrypted ? wssPort : wsPort,apiKey,URI_SUFFIX);
}",0.9833795013850416
17328,"/** 
 * Create a new user. Users should not be created within an application. Users are created within the library and represent subscriptions to presence channels.
 * @param id
 * @param jsonData
 */
public User(final String id,final String jsonData){
  this.id=id;
  this.jsonData=jsonData;
}","/** 
 * Create a new user. Users should not be created within an application. Users are created within the library and represent subscriptions to presence channels.
 * @param id The user id
 * @param jsonData The user JSON data
 */
public User(final String id,final String jsonData){
  this.id=id;
  this.jsonData=jsonData;
}",0.9499192245557352
17329,"/** 
 * <p> Custom additional information about a user decoded as a new instance of the provided POJO bean type </p> <p> e.g. if   {@link #getInfo()} returns<code>{""name"":""Mr User"",""number"":9}</code> then you might implement as follows: </p> <pre> public class UserInfo { private String name; private Integer number; public String getName() { return name; } public void setName(String name) { this.name = name; } public Integer getNumber() { return number; } public void setNumber(Integer number) { this.number = number; } } UserInfo info = user.getInfo(UserInfo.class); info.getName() // returns ""Mr User"" info.getNumber() // returns 9 </pre>
 * @param clazz the class into which the user info JSON representation should be parsed.
 * @return An instance of clazz, populated with the user info
 */
public <V>V getInfo(final Class<V> clazz){
  return new Gson().fromJson(jsonData,clazz);
}","/** 
 * <p> Custom additional information about a user decoded as a new instance of the provided POJO bean type </p> <p> e.g. if   {@link #getInfo()} returns<code>{""name"":""Mr User"",""number"":9}</code> then you might implement as follows: </p> <pre> public class UserInfo { private String name; private Integer number; public String getName() { return name; } public void setName(String name) { this.name = name; } public Integer getNumber() { return number; } public void setNumber(Integer number) { this.number = number; } } UserInfo info = user.getInfo(UserInfo.class); info.getName() // returns ""Mr User"" info.getNumber() // returns 9 </pre>
 * @param < V > The class of the info
 * @param clazz the class into which the user info JSON representation should be parsed.
 * @return V An instance of clazz, populated with the user info
 */
public <V>V getInfo(final Class<V> clazz){
  return new Gson().fromJson(jsonData,clazz);
}",0.977997799779978
17330,"/** 
 * No need to call this via the API. Instead use   {@link
     * com.pusher.client.Pusher.connect()}.
 */
void connect();","/** 
 * No need to call this via the API. Instead use   {@link com.pusher.client.Pusher#connect}.
 */
void connect();",0.9547325102880658
17331,"/** 
 * <p> Callback that indicates either: <ul> <li>An error message has been received from Pusher, or</li> <li>An error has occurred in the client library.</li> </ul> </p> <p> All   {@linkplain ConnectionEventListener}s that have been registered by calling   {@link Connection#bind(ConnectionState,ConnectionEventListener)}will receive this callback, even if the  {@linkplain ConnectionEventListener} is only bound to specific connectionstatus changes. </p>
 * @param message A message indicating the cause of the error.
 * @param code The error code for the message. Can be null.
 * @param e The exception that was thrown, if any. Can be null.
 */
void onError(String message,String code,Exception e);","/** 
 * Callback that indicates either: <ul> <li>An error message has been received from Pusher, or</li> <li>An error has occurred in the client library.</li> </ul> <p> All   {@linkplain ConnectionEventListener}s that have been registered by calling   {@link Connection#bind(ConnectionState,ConnectionEventListener)}will receive this callback, even if the  {@linkplain ConnectionEventListener} is only bound to specific connectionstatus changes. </p>
 * @param message A message indicating the cause of the error.
 * @param code The error code for the message. Can be null.
 * @param e The exception that was thrown, if any. Can be null.
 */
void onError(String message,String code,Exception e);",0.993566833452466
17332,"/** 
 * <p> Callback that is fired whenever the   {@link ConnectionState} of the{@link Connection} changes. The state typically changes during connectionto Pusher and during disconnection and reconnection. </p> <p> This callback is only fired if the  {@linkplain ConnectionEventListener}has been bound to the new state by calling  {@link Connection#bind(ConnectionState,ConnectionEventListener)} witheither the new state or  {@link ConnectionState#ALL}. </p>
 * @param change An object that contains the previous state of the connection and the new state. The new state can be retrieved by calling {@link ConnectionStateChange#getCurrentState()}.
 */
void onConnectionStateChange(ConnectionStateChange change);","/** 
 * Callback that is fired whenever the   {@link ConnectionState} of the{@link Connection} changes. The state typically changes during connectionto Pusher and during disconnection and reconnection. <p> This callback is only fired if the  {@linkplain ConnectionEventListener}has been bound to the new state by calling  {@link Connection#bind(ConnectionState,ConnectionEventListener)} witheither the new state or  {@link ConnectionState#ALL}. </p>
 * @param change An object that contains the previous state of the connectionand the new state. The new state can be retrieved by calling {@link ConnectionStateChange#getCurrentState()}.
 */
void onConnectionStateChange(ConnectionStateChange change);",0.9929078014184396
17333,"/** 
 * The previous connections state. The state the connection has transitioned from.
 * @return
 */
public ConnectionState getPreviousState(){
  return previousState;
}","/** 
 * The previous connections state. The state the connection has transitioned from.
 * @return The previous connection state
 */
public ConnectionState getPreviousState(){
  return previousState;
}",0.9193548387096774
17334,"/** 
 * Used within the library to create a connection state change. Not be used used as part of the API.
 * @param previousState
 * @param currentState
 */
public ConnectionStateChange(final ConnectionState previousState,final ConnectionState currentState){
  if (previousState == currentState) {
    throw new IllegalArgumentException(""String_Node_Str"" + currentState);
  }
  this.previousState=previousState;
  this.currentState=currentState;
}","/** 
 * Used within the library to create a connection state change. Not be used used as part of the API.
 * @param previousState The previous connection state
 * @param currentState The current connection state
 */
public ConnectionStateChange(final ConnectionState previousState,final ConnectionState currentState){
  if (previousState == currentState) {
    throw new IllegalArgumentException(""String_Node_Str"" + currentState);
  }
  this.previousState=previousState;
  this.currentState=currentState;
}",0.938090241343127
17335,"/** 
 * The current connection state. The state the connection has transitioned to.
 * @return
 */
public ConnectionState getCurrentState(){
  return currentState;
}","/** 
 * The current connection state. The state the connection has transitioned to.
 * @return The current connection state
 */
public ConnectionState getCurrentState(){
  return currentState;
}",0.9192200557103064
17336,"/** 
 * Set additional headers to be sent as part of the request.
 * @param headers
 */
public void setHeaders(final HashMap<String,String> headers){
  mHeaders=headers;
}","/** 
 * Set additional headers to be sent as part of the request.
 * @param headers A map of headers
 */
public void setHeaders(final HashMap<String,String> headers){
  mHeaders=headers;
}",0.9526462395543176
17337,"public void clear(){
  channelNameToChannelMap.clear();
}","public void clear(){
  channelNameToChannelMap.clear();
  queuedChannels.clear();
}",0.8142857142857143
17338,"@Override public void onConnectionStateChange(ConnectionStateChange change){
  if (change.getCurrentState() == ConnectionState.CONNECTED) {
    for (    String message : queuedSubscribeMessages) {
      connection.sendMessage(message);
      queuedSubscribeMessages.remove(message);
    }
  }
}","@Override public void onConnectionStateChange(ConnectionStateChange change){
  if (change.getCurrentState() == ConnectionState.CONNECTED) {
    for (    InternalChannel channel : queuedChannels.keySet()) {
      String subscribeMessage=queuedChannels.get(channel);
      connection.sendMessage(subscribeMessage);
      queuedChannels.remove(channel);
      channel.updateState(ChannelState.SUBSCRIBE_SENT);
    }
  }
}",0.497191011235955
17339,"public void run(){
  if (connection.getState() == ConnectionState.CONNECTED) {
    connection.sendMessage(message);
    channel.updateState(ChannelState.SUBSCRIBE_SENT);
  }
 else {
    queuedSubscribeMessages.add(message);
  }
}","public void run(){
  if (connection.getState() == ConnectionState.CONNECTED) {
    connection.sendMessage(message);
    channel.updateState(ChannelState.SUBSCRIBE_SENT);
  }
 else {
    queuedChannels.put(channel,message);
  }
}",0.9059080962800876
17340,"private void sendSubscribe(final InternalChannel channel,final String message){
  channelNameToChannelMap.put(channel.getName(),channel);
  Factory.getEventQueue().execute(new Runnable(){
    public void run(){
      if (connection.getState() == ConnectionState.CONNECTED) {
        connection.sendMessage(message);
        channel.updateState(ChannelState.SUBSCRIBE_SENT);
      }
 else {
        queuedSubscribeMessages.add(message);
      }
    }
  }
);
}","private void sendSubscribe(final InternalChannel channel,final String message){
  channelNameToChannelMap.put(channel.getName(),channel);
  Factory.getEventQueue().execute(new Runnable(){
    public void run(){
      if (connection.getState() == ConnectionState.CONNECTED) {
        connection.sendMessage(message);
        channel.updateState(ChannelState.SUBSCRIBE_SENT);
      }
 else {
        queuedChannels.put(channel,message);
      }
    }
  }
);
}",0.9530054644808744
17341,void updateState(ChannelState subscribeSent);,void updateState(ChannelState state);,0.8292682926829268
17342,"public ExampleApp(String[] args){
  String apiKey=(args.length > 0) ? args[0] : ""String_Node_Str"";
  channelName=(args.length > 1) ? args[1] : ""String_Node_Str"";
  eventName=(args.length > 2) ? args[1] : ""String_Node_Str"";
  pusher=new Pusher(apiKey);
  pusher.connect(this);
}","public ExampleApp(String[] args){
  String apiKey=(args.length > 0) ? args[0] : ""String_Node_Str"";
  channelName=(args.length > 1) ? args[1] : ""String_Node_Str"";
  eventName=(args.length > 2) ? args[2] : ""String_Node_Str"";
  pusher=new Pusher(apiKey);
  pusher.connect(this);
}",0.9963898916967509
17343,"/** 
 * Parse JSON received from reddit into a list of new additional comment tree elements. This parser expects the JSON to be of a listing of comments and more's.<br> <br> <i>Note: this parsing can only be performed on listings of comments and more's, not on a comment tree of a submission.</i>
 * @param jsonText JSON Text
 * @return Parsed list of comments
 * @throws ParseException
 * @throws RedditRequestException
 */
public List<CommentTreeElement> parse(String jsonText) throws RedditParseException {
  try {
    JSONObject main=((JSONObject)((JSONObject)JSON_PARSER.parse(jsonText)).get(""String_Node_Str""));
    List<CommentTreeElement> elements=new LinkedList<CommentTreeElement>();
    if (main.get(""String_Node_Str"") != null) {
      List<Thing> things=this.parseGeneric(main.toJSONString(),""String_Node_Str"");
      for (      Thing t : things) {
        if (t instanceof Comment) {
          elements.add((Comment)t);
        }
 else         if (t instanceof More) {
          elements.add((More)t);
        }
 else {
          LOGGER.warn(""String_Node_Str"" + t.getKind().value() + ""String_Node_Str"");
        }
      }
    }
    return elements;
  }
 catch (  ParseException pe) {
    throw new RedditParseException(pe);
  }
}","/** 
 * Parse JSON received from reddit into a list of new additional comment tree elements. This parser expects the JSON to be of a listing of comments and more's.<br> <br> <i>Note: this parsing can only be performed on listings of comments and more's, not on a comment tree of a submission.</i>
 * @param jsonText JSON Text
 * @return Parsed list of comments
 * @throws ParseException
 * @throws RedditRequestException
 */
public List<CommentTreeElement> parse(String jsonText) throws RedditParseException {
  try {
    Object response=JSON_PARSER.parse(jsonText);
    this.validate(response);
    JSONObject main=(JSONObject)((JSONObject)response).get(""String_Node_Str"");
    List<CommentTreeElement> elements=new LinkedList<CommentTreeElement>();
    if (main.get(""String_Node_Str"") != null) {
      List<Thing> things=this.parseGeneric(main.toJSONString(),""String_Node_Str"");
      for (      Thing t : things) {
        if (t instanceof Comment) {
          elements.add((Comment)t);
        }
 else         if (t instanceof More) {
          elements.add((More)t);
        }
 else {
          LOGGER.warn(""String_Node_Str"" + t.getKind().value() + ""String_Node_Str"");
        }
      }
    }
    return elements;
  }
 catch (  ParseException pe) {
    throw new RedditParseException(pe);
  }
}",0.9500196772924046
17344,"/** 
 * Validate that it is indeed the starting of a listing of reddit things.
 * @param response Object returned by JSON parser
 * @throws RedditRequestException If the response is not valid listing of reddit things
 */
public void validate(Object response) throws RedditParseException {
  if (response == null) {
    throw new RedditParseException();
  }
  if (!(response instanceof JSONObject)) {
    throw new RedditParseException(""String_Node_Str"");
  }
  JSONObject jsonResponse=((JSONObject)response);
  if (jsonResponse.get(""String_Node_Str"") != null) {
    throw new RedditParseException(JsonUtils.safeJsonToInteger(jsonResponse.get(""String_Node_Str"")));
  }
  if (jsonResponse.get(""String_Node_Str"") == null) {
    System.out.println(jsonResponse.toJSONString());
    throw new RedditParseException(""String_Node_Str"");
  }
}","/** 
 * Validate that it is indeed the starting of a listing of reddit things.
 * @param response Object returned by JSON parser
 * @throws RedditRequestException If the response is not valid listing of reddit things
 */
public void validate(Object response) throws RedditParseException {
  if (response == null) {
    throw new RedditParseException();
  }
  if (!(response instanceof JSONObject)) {
    throw new RedditParseException(""String_Node_Str"");
  }
  JSONObject jsonResponse=((JSONObject)response);
  if (jsonResponse.get(""String_Node_Str"") != null) {
    throw new RedditParseException(JsonUtils.safeJsonToInteger(jsonResponse.get(""String_Node_Str"")));
  }
  if (jsonResponse.get(""String_Node_Str"") == null && jsonResponse.get(""String_Node_Str"") == null) {
    throw new RedditParseException(""String_Node_Str"");
  }
}",0.9398315282791816
17345,"/** 
 * Format a comma separated list of the given list.
 * @param list List of strings
 * @return Comma-separated list string (e.g. ""a,b,c,d"")
 */
public static String formatCommaSeparatedList(List<String> list){
  StringBuilder builder=new StringBuilder();
  for (  String s : list) {
    builder.append(s);
    builder.append(""String_Node_Str"");
  }
  if (builder.length() > 0) {
    builder.substring(0,builder.length() - 1);
  }
  return builder.toString();
}","/** 
 * Format a comma separated list of the given list.
 * @param list List of strings
 * @return Comma-separated list string (e.g. ""a,b,c,d"")
 */
public static String formatCommaSeparatedList(List<String> list){
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < list.size(); i++) {
    if (i != 0) {
      builder.append(""String_Node_Str"");
    }
    builder.append(list.get(i));
  }
  return builder.toString();
}",0.7955307262569833
17346,"/** 
 * Retrieve the counting number assigned by reddit (does not tell much in this case).
 * @return The counting number
 */
public int getCount(){
  return count;
}","/** 
 * Retrieve the counting number assigned by reddit (does not tell much in this case).
 * @return The counting number
 */
public Integer getCount(){
  return count;
}",0.9821428571428572
17347,"/** 
 * This function comments on a submission or comment with the given full name.
 * @param fullName Full name of the submission or comment
 * @param text The text to comment (can include markdown)
 */
public boolean comment(String fullname,String text) throws ActionFailedException {
  JSONObject object=(JSONObject)restClient.post(""String_Node_Str"" + fullname + ""String_Node_Str""+ text+ ""String_Node_Str""+ user.getModhash(),ApiEndpointUtils.COMMENT,user.getCookie()).getResponseObject();
  if (object.toJSONString().contains(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
    return false;
  }
 else {
    return true;
  }
}","/** 
 * This function comments on a submission or comment with the given full name.
 * @param fullName Full name of the submission or comment
 * @param text The text to comment (can include markdown)
 */
public boolean comment(String fullname,String text) throws ActionFailedException {
  JSONObject object=(JSONObject)restClient.post(""String_Node_Str"" + fullname + ""String_Node_Str""+ text+ ""String_Node_Str""+ user.getModhash(),ApiEndpointUtils.COMMENT,user.getCookie()).getResponseObject();
  if (object.toJSONString().contains(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
    return false;
  }
 else   if (object.toJSONString().contains(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
    return false;
  }
 else {
    return true;
  }
}",0.8931082981715893
17348,"@Override public boolean equals(Object other){
  return (other instanceof Submission && this.getFullName().equals(((Comment)other).getFullName()));
}","@Override public boolean equals(Object other){
  return (other instanceof Submission && this.getFullName().equals(((Submission)other).getFullName()));
}",0.956810631229236
17349,"/** 
 * Get the comment list of the given user (username).
 * @param user				(Optional, set null if not used) The user as whom to retrieve the comments
 * @param username	 		Username of the user you want to retrieve from.
 * @param sort	    		(Optional, set null if not used) Sorting method.
 * @param time		 		(Optional, set null is not used) Time window
 * @param amount        	(Optional, set -1 if not used) Integer representing the desired amount of comments to return
 * @param after				(Optional, set null if not used) After which comment to retrieve
 * @return Comments of a user.
 */
public List<Comment> ofUser(User user,String username,UserOverviewSort sort,SubmissionsSearchTime time,int amount,Comment after){
  if (amount < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  List<Comment> result=new LinkedList<Comment>();
  int counter=0;
  while (amount >= 0) {
    int limit=(amount < RedditConstants.MAX_LIMIT_LISTING) ? amount : RedditConstants.MAX_LIMIT_LISTING;
    amount-=limit;
    List<Comment> subresult=comments.ofUser(user,username,sort,time,counter,limit,after,null,true);
    result.addAll(subresult);
    counter+=limit;
    if (subresult.size() != limit) {
      System.out.println(""String_Node_Str"" + subresult.size() + ""String_Node_Str""+ limit+ ""String_Node_Str"");
      break;
    }
    if (amount <= 0) {
      break;
    }
    after=subresult.get(subresult.size() - 1);
  }
  return result;
}","/** 
 * Get the comment list of the given user (username).
 * @param user				(Optional, set null if not used) The user as whom to retrieve the comments
 * @param username	 		Username of the user you want to retrieve from.
 * @param sort	    		(Optional, set null if not used) Sorting method.
 * @param time		 		(Optional, set null is not used) Time window
 * @param amount        	(Optional, set -1 if not used) Integer representing the desired amount of comments to return
 * @param after				(Optional, set null if not used) After which comment to retrieve
 * @return Comments of a user.
 */
public List<Comment> ofUser(User user,String username,UserOverviewSort sort,SubmissionsSearchTime time,int amount,Comment after){
  if (amount < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  List<Comment> result=new LinkedList<Comment>();
  int counter=0;
  while (amount >= 0) {
    int limit=(amount < RedditConstants.MAX_LIMIT_LISTING) ? amount : RedditConstants.MAX_LIMIT_LISTING;
    amount-=limit;
    List<Comment> subresult=comments.ofUser(user,username,sort,time,counter,limit,after,null,true);
    if (subresult == null) {
      return null;
    }
    result.addAll(subresult);
    counter+=limit;
    if (subresult.size() != limit) {
      break;
    }
    if (amount <= 0) {
      break;
    }
    after=subresult.get(subresult.size() - 1);
  }
  return result;
}",0.9422535211267604
17350,"/** 
 * Parses a JSON feed received from Reddit (URL) into a nice list of Submission objects.
 * @param user 	User
 * @param url 	URL
 * @return 		Listing of submissions
 */
public List<Submission> parse(User user,String url){
  String cookie=(user == null) ? null : user.getCookie();
  List<Submission> submissions=new LinkedList<Submission>();
  Object response=restClient.get(url,cookie).getResponseObject();
  if (response instanceof JSONObject) {
    JSONObject object=(JSONObject)response;
    JSONArray array=(JSONArray)((JSONObject)object.get(""String_Node_Str"")).get(""String_Node_Str"");
    JSONObject data;
    Submission submission;
    for (    Object anArray : array) {
      data=(JSONObject)anArray;
      String kind=safeJsonToString(data.get(""String_Node_Str""));
      if (kind.equals(Kind.LINK.value())) {
        data=((JSONObject)data.get(""String_Node_Str""));
        submission=new Submission(data);
        submission.setUser(user);
        submissions.add(submission);
      }
    }
  }
 else {
    System.err.println(""String_Node_Str"" + response.toString() + ""String_Node_Str"");
  }
  return submissions;
}","/** 
 * Parses a JSON feed received from Reddit (URL) into a nice list of Submission objects.
 * @param user 	User
 * @param url 	URL
 * @return 		Listing of submissions
 */
public List<Submission> parse(User user,String url){
  String cookie=(user == null) ? null : user.getCookie();
  List<Submission> submissions=new LinkedList<Submission>();
  Response r=restClient.get(url,cookie);
  if (r == null) {
    System.err.println(""String_Node_Str"");
    return null;
  }
  Object response=r.getResponseObject();
  if (response instanceof JSONObject) {
    JSONObject object=(JSONObject)response;
    if (object.get(""String_Node_Str"") != null) {
      System.err.println(""String_Node_Str"" + object.get(""String_Node_Str""));
      return null;
    }
    JSONArray array=(JSONArray)((JSONObject)object.get(""String_Node_Str"")).get(""String_Node_Str"");
    JSONObject data;
    Submission submission;
    for (    Object anArray : array) {
      data=(JSONObject)anArray;
      String kind=safeJsonToString(data.get(""String_Node_Str""));
      if (kind.equals(Kind.LINK.value())) {
        data=((JSONObject)data.get(""String_Node_Str""));
        submission=new Submission(data);
        submission.setUser(user);
        submissions.add(submission);
      }
    }
  }
 else {
    System.err.println(""String_Node_Str"" + response.toString() + ""String_Node_Str"");
  }
  return submissions;
}",0.8939393939393939
17351,"public String toString(){
  StringBuilder result=new StringBuilder();
  String newLine=System.lineSeparator();
  result.append(""String_Node_Str"").append(id).append(newLine).append(""String_Node_Str"").append(name).append(newLine).append(""String_Node_Str"").append(modhash).append(newLine).append(""String_Node_Str"").append(commentKarma).append(newLine).append(""String_Node_Str"").append(id).append(newLine).append(""String_Node_Str"").append(isMod).append(newLine).append(""String_Node_Str"").append(hasModMail).append(newLine).append(""String_Node_Str"").append(hasMail).append(newLine).append(""String_Node_Str"").append(hasVerifiedEmail).append(newLine).append(""String_Node_Str"").append(isGold).append(newLine).append(""String_Node_Str"").append(created).append(newLine).append(""String_Node_Str"").append(createdUTC).append(newLine).append(""String_Node_Str"").append(isFriend).append(newLine).append(""String_Node_Str"").append(over18).append(newLine);
  return result.toString();
}","public String toString(){
  StringBuilder result=new StringBuilder();
  String newLine=System.lineSeparator();
  result.append(""String_Node_Str"").append(id).append(newLine).append(""String_Node_Str"").append(name).append(newLine).append(""String_Node_Str"").append(modhash).append(newLine).append(""String_Node_Str"").append(commentKarma).append(newLine).append(""String_Node_Str"").append(linkKarma).append(newLine).append(""String_Node_Str"").append(isMod).append(newLine).append(""String_Node_Str"").append(hasModMail).append(newLine).append(""String_Node_Str"").append(hasMail).append(newLine).append(""String_Node_Str"").append(hasVerifiedEmail).append(newLine).append(""String_Node_Str"").append(isGold).append(newLine).append(""String_Node_Str"").append(created).append(newLine).append(""String_Node_Str"").append(createdUTC).append(newLine).append(""String_Node_Str"").append(isFriend).append(newLine).append(""String_Node_Str"").append(over18);
  return result.toString();
}",0.9859594383775352
17352,"/** 
 * This function submits a GET request and returns a JSON object that corresponds to it.
 * @param apiParams HTTP arguments
 * @param url URL
 * @param cookie cookie
 */
public static Object get(String apiParams,URL url,String cookie) throws IOException, ParseException {
  HttpURLConnection connection=(HttpURLConnection)url.openConnection();
  connection.setUseCaches(false);
  connection.setRequestMethod(""String_Node_Str"");
  if (cookie != null) {
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + cookie);
  }
  connection.setRequestProperty(""String_Node_Str"",userAgent);
  InputStream is=null;
  Scanner s=null;
  String response=null;
  try {
    if (connection.getResponseCode() != 200) {
      s=new Scanner(connection.getErrorStream());
    }
 else {
      is=connection.getInputStream();
      s=new Scanner(is);
    }
    s.useDelimiter(""String_Node_Str"");
    response=s.next();
    System.out.println(""String_Node_Str"" + response + ""String_Node_Str"");
    s.close();
  }
 catch (  IOException e2) {
    e2.printStackTrace();
  }
  JSONParser parser=new JSONParser();
  return parser.parse(response);
}","/** 
 * This function submits a GET request and returns a JSON object that corresponds to it.
 * @param apiParams HTTP arguments
 * @param url URL
 * @param cookie cookie
 */
public static Object get(String apiParams,URL url,String cookie) throws IOException, ParseException {
  HttpURLConnection connection=(HttpURLConnection)url.openConnection();
  connection.setUseCaches(false);
  connection.setRequestMethod(""String_Node_Str"");
  if (cookie != null) {
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + cookie);
  }
  connection.setRequestProperty(""String_Node_Str"",userAgent);
  InputStream is=null;
  Scanner s=null;
  String response=null;
  try {
    if (connection.getResponseCode() != 200) {
      s=new Scanner(connection.getErrorStream());
    }
 else {
      is=connection.getInputStream();
      s=new Scanner(is);
    }
    s.useDelimiter(""String_Node_Str"");
    response=""String_Node_Str"";
    while (s.hasNext()) {
      response+=s.next();
    }
    System.out.println(""String_Node_Str"" + response + ""String_Node_Str"");
    s.close();
  }
 catch (  IOException e2) {
    e2.printStackTrace();
  }
  JSONParser parser=new JSONParser();
  return parser.parse(response);
}",0.968098681412165
17353,"ResourceConfig getResourceConfig(JsonObject config){
  JsonArray resources=config.getArray(CONFIG_RESOURCES,null);
  if (resources == null || resources.size() == 0) {
    throw new RuntimeException(""String_Node_Str"" + CONFIG_RESOURCES);
  }
  String[] resourceArr=new String[resources.size()];
  for (int i=0; i < resources.size(); i++) {
    resourceArr[i]=String.valueOf(resources.get(i));
  }
  ResourceConfig rc=new ResourceConfig();
  rc.packages(resourceArr);
  rc.registerInstances(new VertxBinder());
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  JsonArray features=config.getArray(CONFIG_FEATURES,null);
  if (features != null && features.size() > 0) {
    for (int i=0; i < features.size(); i++) {
      try {
        Class<?> clazz=cl.loadClass(String.valueOf(features.get(i)));
        rc.register(clazz);
      }
 catch (      ClassNotFoundException e) {
        throw new RuntimeException(e);
      }
    }
  }
  JsonArray binders=config.getArray(CONFIG_BINDERS,null);
  if (binders != null && binders.size() > 0) {
    for (int i=0; i < binders.size(); i++) {
      try {
        Class<?> clazz=cl.loadClass(String.valueOf(features.get(i)));
        rc.register(clazz.newInstance());
      }
 catch (      ClassNotFoundException e) {
        throw new RuntimeException(e);
      }
catch (      InstantiationException e) {
        throw new RuntimeException(e);
      }
catch (      IllegalAccessException e) {
        throw new RuntimeException(e);
      }
    }
  }
  return rc;
}","ResourceConfig getResourceConfig(JsonObject config){
  JsonArray resources=config.getArray(CONFIG_RESOURCES,null);
  if (resources == null || resources.size() == 0) {
    throw new RuntimeException(""String_Node_Str"" + CONFIG_RESOURCES);
  }
  String[] resourceArr=new String[resources.size()];
  for (int i=0; i < resources.size(); i++) {
    resourceArr[i]=String.valueOf(resources.get(i));
  }
  ResourceConfig rc=new ResourceConfig();
  rc.packages(resourceArr);
  rc.registerInstances(new VertxBinder());
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  JsonArray features=config.getArray(CONFIG_FEATURES,null);
  if (features != null && features.size() > 0) {
    for (int i=0; i < features.size(); i++) {
      try {
        Class<?> clazz=cl.loadClass(String.valueOf(features.get(i)));
        rc.register(clazz);
      }
 catch (      ClassNotFoundException e) {
        throw new RuntimeException(e);
      }
    }
  }
  JsonArray binders=config.getArray(CONFIG_BINDERS,null);
  if (binders != null && binders.size() > 0) {
    for (int i=0; i < binders.size(); i++) {
      try {
        Class<?> clazz=cl.loadClass(String.valueOf(binders.get(i)));
        rc.register(clazz.newInstance());
      }
 catch (      ClassNotFoundException e) {
        throw new RuntimeException(e);
      }
catch (      InstantiationException e) {
        throw new RuntimeException(e);
      }
catch (      IllegalAccessException e) {
        throw new RuntimeException(e);
      }
    }
  }
  return rc;
}",0.9957138147049126
17354,"public Map<String,Object> next(){
  if (!rowIt.hasNext() && wideRowCounterIt.hasNext()) {
    this.currentWideRowCounter=wideRowCounterIt.next();
    try {
      resetRowIt();
    }
 catch (    RhombusException re) {
      re.printStackTrace();
      return null;
    }
  }
  if (rowIt.hasNext()) {
    FakeIdRange.IdInRange lastIdInRange=rowIt.next();
    this.lastObjectId=lastIdInRange.getId();
    return makeObject(currentWideRowCounter,lastIdInRange);
  }
 else {
    return null;
  }
}","public Map<String,Object> next(){
  if (rowIt.hasNext()) {
    FakeIdRange.IdInRange lastIdInRange=rowIt.next();
    return makeObject(lastIdInRange.getCounterValue(),lastIdInRange);
  }
 else {
    return null;
  }
}",0.3779971791255289
17355,"public boolean hasNext(){
  return rowIt.hasNext() || wideRowCounterIt.hasNext();
}","public boolean hasNext(){
  return rowIt.hasNext();
}",0.7794117647058824
17356,"public IdInRange next(){
  try {
    Long counter=rangeIterator.next();
    Object ret=getIdAtCounter(counter,shardingStrategy);
    return new IdInRange(getIdAtCounter(counter,shardingStrategy),counter);
  }
 catch (  RhombusException re) {
    re.printStackTrace();
    return null;
  }
}","public IdInRange next(){
  try {
    Long counter=rangeIterator.next();
    return new IdInRange(getIdAtCounter(counter,shardingStrategy),counter);
  }
 catch (  RhombusException re) {
    re.printStackTrace();
    return null;
  }
}",0.8107074569789675
17357,"public FakeR(CKeyspaceDefinition keyspace,Long totalWideRowsPerIndex,Long totalObjectsPerWideRange,Long objectsPerShard) throws RhombusException {
  this.keyspace=keyspace;
  Map<String,CDefinition> definitions=keyspace.getDefinitions();
  this.fakeDefinitions=Lists.newArrayList();
  for (  String defKey : definitions.keySet()) {
    this.fakeDefinitions.add(new FakeCDefinition(definitions.get(defKey),totalWideRowsPerIndex,totalObjectsPerWideRange,objectsPerShard));
  }
}","/** 
 * @param keyspace
 * @param totalShardsPerIndex Ostensibly the number of wide rows to generate per index. Not currently used.
 * @param totalObjectsPerIndex The total number of objects in a wide range (each index has one wide range)
 * @param objectsPerShard The number of objects per shard/wide row in an index. Each index divides the objects in its wide range across its shards.
 * @throws RhombusException
 */
public FakeR(CKeyspaceDefinition keyspace,Long totalShardsPerIndex,Long totalObjectsPerIndex,Long objectsPerShard) throws RhombusException {
  this.keyspace=keyspace;
  Map<String,CDefinition> definitions=keyspace.getDefinitions();
  this.fakeDefinitions=Lists.newArrayList();
  for (  String defKey : definitions.keySet()) {
    this.fakeDefinitions.add(new FakeCDefinition(definitions.get(defKey),totalShardsPerIndex,totalObjectsPerIndex,objectsPerShard));
  }
}",0.6534216335540839
17358,"@Test public void getMasterIteratorTest() throws Exception {
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CDefinition def=CDefinition.fromJsonString(json);
  FakeCDefinition subject=new FakeCDefinition(def,100L,50L,10L);
  Iterator<Map<String,Object>> masterIt=subject.getMasterIterator(CObjectOrdering.DESCENDING);
  long counter=0;
  while (masterIt.hasNext()) {
    counter++;
    Map<String,Object> item=masterIt.next();
    System.out.println(item);
  }
  assertEquals(3L * 5000L,counter);
}","@Test public void getMasterIteratorTest() throws Exception {
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CDefinition def=CDefinition.fromJsonString(json);
  FakeCDefinition subject=new FakeCDefinition(def,100L,50L,10L);
  Iterator<Map<String,Object>> masterIt=subject.getMasterIterator(CObjectOrdering.DESCENDING);
  long counter=0;
  while (masterIt.hasNext()) {
    counter++;
    Map<String,Object> item=masterIt.next();
    System.out.println(item);
  }
  assertEquals(3L * 50L,counter);
}",0.9981167608286252
17359,"@Test public void getMasterIteratorTest() throws Exception {
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CDefinition def=CDefinition.fromJsonString(json);
  Long millistamp=System.currentTimeMillis();
  UUID startingUUID=UUIDs.startOf(millistamp);
  FakeCIndex subject=new FakeCIndex(def.getIndexes().get(""String_Node_Str""),def,startingUUID,100L,50L,10L);
  Iterator<Map<String,Object>> masterIt=subject.getMasterIterator(CObjectOrdering.DESCENDING);
  Set<String> idSet=Sets.newHashSet();
  long counter=0;
  while (masterIt.hasNext()) {
    counter++;
    Map<String,Object> item=masterIt.next();
    assertFalse(""String_Node_Str"",idSet.contains(item.get(""String_Node_Str"").toString()));
    idSet.add(item.get(""String_Node_Str"").toString());
    System.out.println(item);
  }
  assertEquals(5000L,counter);
}","@Test public void getMasterIteratorTest() throws Exception {
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CDefinition def=CDefinition.fromJsonString(json);
  Long millistamp=System.currentTimeMillis();
  UUID startingUUID=UUIDs.startOf(millistamp);
  FakeCIndex subject=new FakeCIndex(def.getIndexes().get(""String_Node_Str""),def,startingUUID,100L,50L,10L);
  Iterator<Map<String,Object>> masterIt=subject.getMasterIterator(CObjectOrdering.DESCENDING);
  Set<String> idSet=Sets.newHashSet();
  long counter=0;
  while (masterIt.hasNext()) {
    counter++;
    Map<String,Object> item=masterIt.next();
    assertFalse(""String_Node_Str"",idSet.contains(item.get(""String_Node_Str"").toString()));
    idSet.add(item.get(""String_Node_Str"").toString());
    System.out.println(item);
  }
  assertEquals(50L,counter);
}",0.998819362455726
17360,"@Test public void testGetMasterIteratorNoRange() throws Exception {
  Long wideRowsPerIndex=2L;
  Long totalObjectsPerWideRange=3L;
  Long totalObjectsPerShard=7L;
  CKeyspaceDefinition ckdef=CKeyspaceDefinition.fromJsonFile(""String_Node_Str"");
  Map<String,CDefinition> cdefs=ckdef.getDefinitions();
  Integer totalIndexCount=0;
  for (  String cdefKey : cdefs.keySet()) {
    totalIndexCount+=cdefs.get(cdefKey).getIndexes().size();
  }
  FakeR faker1=new FakeR(ckdef,wideRowsPerIndex,totalObjectsPerWideRange,totalObjectsPerShard);
  Iterator<Map<String,Object>> iterator=faker1.getMasterIterator(CObjectOrdering.ASCENDING,null,null);
  Map<String,Map<String,Object>> materializedObjects1=Maps.newHashMap();
  while (iterator.hasNext()) {
    Map<String,Object> next=iterator.next();
    assertTrue(next.containsKey(""String_Node_Str""));
    assertFalse(""String_Node_Str"",materializedObjects1.containsKey(next.get(""String_Node_Str"").toString()));
    materializedObjects1.put(next.get(""String_Node_Str"").toString(),next);
  }
  assertFalse(materializedObjects1.isEmpty());
  assertEquals((wideRowsPerIndex * totalObjectsPerWideRange) * totalIndexCount,materializedObjects1.size());
  System.out.printf(""String_Node_Str"",wideRowsPerIndex,totalObjectsPerWideRange,totalObjectsPerShard,materializedObjects1.size());
  Thread.sleep(500);
  FakeR faker2=new FakeR(ckdef,wideRowsPerIndex,totalObjectsPerWideRange,totalObjectsPerShard);
  iterator=faker2.getMasterIterator(CObjectOrdering.ASCENDING,null,null);
  Map<String,Map<String,Object>> materializedObjects2=Maps.newHashMap();
  while (iterator.hasNext()) {
    Map<String,Object> next=iterator.next();
    assertTrue(next.containsKey(""String_Node_Str""));
    assertFalse(""String_Node_Str"",materializedObjects2.containsKey(next.get(""String_Node_Str"").toString()));
    materializedObjects2.put(next.get(""String_Node_Str"").toString(),next);
  }
  assertFalse(materializedObjects2.isEmpty());
  assertEquals((wideRowsPerIndex * totalObjectsPerWideRange) * totalIndexCount,materializedObjects2.size());
  assertEquals(materializedObjects1,materializedObjects2);
}","@Test public void testGetMasterIteratorNoRange() throws Exception {
  Long wideRowsPerIndex=2L;
  Long totalObjectsPerWideRange=100L;
  Long totalObjectsPerShard=10L;
  CKeyspaceDefinition ckdef=CKeyspaceDefinition.fromJsonFile(""String_Node_Str"");
  Map<String,CDefinition> cdefs=ckdef.getDefinitions();
  Integer totalIndexCount=0;
  for (  String cdefKey : cdefs.keySet()) {
    totalIndexCount+=cdefs.get(cdefKey).getIndexes().size();
  }
  FakeR faker1=new FakeR(ckdef,wideRowsPerIndex,totalObjectsPerWideRange,totalObjectsPerShard);
  Iterator<Map<String,Object>> iterator=faker1.getMasterIterator(CObjectOrdering.ASCENDING,null,null);
  Map<String,Map<String,Object>> materializedObjects1=Maps.newHashMap();
  while (iterator.hasNext()) {
    Map<String,Object> next=iterator.next();
    assertTrue(next.containsKey(""String_Node_Str""));
    assertFalse(""String_Node_Str"",materializedObjects1.containsKey(next.get(""String_Node_Str"").toString()));
    materializedObjects1.put(next.get(""String_Node_Str"").toString(),next);
  }
  assertFalse(materializedObjects1.isEmpty());
  assertEquals(totalObjectsPerWideRange * totalIndexCount,materializedObjects1.size());
  System.out.printf(""String_Node_Str"",wideRowsPerIndex,totalObjectsPerWideRange,totalObjectsPerShard,materializedObjects1.size());
  Thread.sleep(500);
  FakeR faker2=new FakeR(ckdef,wideRowsPerIndex,totalObjectsPerWideRange,totalObjectsPerShard);
  iterator=faker2.getMasterIterator(CObjectOrdering.ASCENDING,null,null);
  Map<String,Map<String,Object>> materializedObjects2=Maps.newHashMap();
  while (iterator.hasNext()) {
    Map<String,Object> next=iterator.next();
    assertTrue(next.containsKey(""String_Node_Str""));
    assertFalse(""String_Node_Str"",materializedObjects2.containsKey(next.get(""String_Node_Str"").toString()));
    materializedObjects2.put(next.get(""String_Node_Str"").toString(),next);
  }
  assertFalse(materializedObjects2.isEmpty());
  assertEquals(totalObjectsPerWideRange * totalIndexCount,materializedObjects2.size());
  assertEquals(materializedObjects1,materializedObjects2);
}",0.9691756272401434
17361,"private Long mapCount(CQLStatementIterator statementIterator,CDefinition definition,Long limit) throws RhombusException {
  Long resultCount=0L;
  Map<String,Object> clientFilters=statementIterator.getClientFilters();
  if (clientFilters == null) {
    int statementNumber=0;
    while (statementIterator.hasNext()) {
      CQLStatement cql=statementIterator.next();
      ResultSet resultSet=cqlExecutor.executeSync(cql);
      resultCount+=resultSet.one().getLong(0);
      statementNumber++;
      if ((limit > 0 && resultCount >= limit)) {
        logger.debug(""String_Node_Str"");
        resultCount=limit;
        break;
      }
      if (statementNumber > reasonableStatementLimit) {
        throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
      }
      if (statementIterator.hasNext()) {
        statementIterator.nextShard();
      }
    }
  }
 else {
    CQLExecutorIterator cqlIterator=new CQLExecutorIterator(cqlExecutor,(BaseCQLStatementIterator)statementIterator);
    while (cqlIterator.hasNext()) {
      Row row=cqlIterator.next();
      if (row == null) {
        continue;
      }
      Map<String,Object> result=mapResult(row,definition);
      boolean resultMatchesFilters=this.resultMatchesFilters(result,clientFilters);
      if (resultMatchesFilters) {
        resultCount++;
      }
      if ((limit > 0 && resultCount >= limit)) {
        logger.debug(""String_Node_Str"");
        break;
      }
      if (cqlIterator.statementNumber > reasonableStatementLimit) {
        throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
      }
    }
  }
  return resultCount;
}","private Long mapCount(CQLStatementIterator statementIterator,CDefinition definition,Long limit) throws RhombusException {
  Long resultCount=0L;
  Map<String,Object> clientFilters=statementIterator.getClientFilters();
  if (clientFilters == null) {
    int statementNumber=0;
    while (statementIterator.hasNext()) {
      CQLStatement cql=statementIterator.next();
      ResultSet resultSet=cqlExecutor.executeSync(cql);
      resultCount+=resultSet.one().getLong(0);
      statementNumber++;
      if ((limit > 0 && resultCount >= limit)) {
        logger.debug(""String_Node_Str"");
        resultCount=limit;
        break;
      }
      if (statementNumber > reasonableStatementLimit) {
        throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
      }
      if (statementIterator.hasNext()) {
        statementIterator.nextShard();
      }
    }
  }
 else {
    CQLExecutorIterator cqlIterator=new CQLExecutorIterator(cqlExecutor,(BaseCQLStatementIterator)statementIterator);
    cqlIterator.setPageSize(limit);
    while (cqlIterator.hasNext()) {
      Row row=cqlIterator.next();
      if (row == null) {
        continue;
      }
      Map<String,Object> result=mapResult(row,definition);
      boolean resultMatchesFilters=this.resultMatchesFilters(result,clientFilters);
      if (resultMatchesFilters) {
        resultCount++;
      }
      if ((limit > 0 && resultCount >= limit)) {
        logger.debug(""String_Node_Str"");
        break;
      }
      if (cqlIterator.statementNumber > reasonableStatementLimit) {
        throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
      }
    }
  }
  return resultCount;
}",0.9893867924528302
17362,"/** 
 * Iterates through cql statements executing them in sequence and mapping the results until limit is reached
 * @param statementIterator Statement iterator to execute
 * @param definition definition to execute the statements against
 * @return Ordered resultset concatenating results from statements in statement iterator.
 */
private List<Map<String,Object>> mapResults(CQLStatementIterator statementIterator,CDefinition definition,Long limit) throws RhombusException {
  List<Map<String,Object>> results=Lists.newArrayList();
  int statementNumber=0;
  int resultNumber=0;
  Map<String,Object> clientFilters=statementIterator.getClientFilters();
  CQLExecutorIterator cqlIterator=new CQLExecutorIterator(cqlExecutor,(BaseCQLStatementIterator)statementIterator);
  long nonMatching=0;
  long matching=0;
  while (cqlIterator.hasNext()) {
    Row row=cqlIterator.next();
    if (row == null) {
      continue;
    }
    Map<String,Object> result=mapResult(row,definition);
    boolean resultMatchesFilters=true;
    if (clientFilters != null) {
      resultMatchesFilters=this.resultMatchesFilters(result,clientFilters);
    }
    if (resultMatchesFilters) {
      results.add(result);
      resultNumber++;
      matching++;
    }
 else {
      nonMatching++;
    }
    logger.debug(""String_Node_Str"",matching,nonMatching);
    if ((limit > 0 && resultNumber >= limit)) {
      logger.debug(""String_Node_Str"");
      break;
    }
    if (cqlIterator.statementNumber > reasonableStatementLimit) {
      throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
    }
  }
  return results;
}","/** 
 * Iterates through cql statements executing them in sequence and mapping the results until limit is reached
 * @param statementIterator Statement iterator to execute
 * @param definition definition to execute the statements against
 * @return Ordered resultset concatenating results from statements in statement iterator.
 */
private List<Map<String,Object>> mapResults(CQLStatementIterator statementIterator,CDefinition definition,Long limit) throws RhombusException {
  List<Map<String,Object>> results=Lists.newArrayList();
  int statementNumber=0;
  int resultNumber=0;
  Map<String,Object> clientFilters=statementIterator.getClientFilters();
  CQLExecutorIterator cqlIterator=new CQLExecutorIterator(cqlExecutor,(BaseCQLStatementIterator)statementIterator);
  cqlIterator.setPageSize(limit);
  long nonMatching=0;
  long matching=0;
  while (cqlIterator.hasNext()) {
    Row row=cqlIterator.next();
    if (row == null) {
      continue;
    }
    Map<String,Object> result=mapResult(row,definition);
    boolean resultMatchesFilters=true;
    if (clientFilters != null) {
      resultMatchesFilters=this.resultMatchesFilters(result,clientFilters);
    }
    if (resultMatchesFilters) {
      results.add(result);
      resultNumber++;
      matching++;
    }
 else {
      nonMatching++;
    }
    logger.debug(""String_Node_Str"",matching,nonMatching);
    if ((limit > 0 && resultNumber >= limit)) {
      logger.debug(""String_Node_Str"");
      break;
    }
    if (cqlIterator.statementNumber > reasonableStatementLimit) {
      throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
    }
  }
  return results;
}",0.9896844660194176
17363,"public void setLimit(int limit){
  this.limit=limit;
}","public void setLimit(long limit){
  this.limit=limit;
}",0.9541284403669724
17364,"@Override public void setLimit(int limit){
  this.numberRemaining=limit;
}","@Override public void setLimit(long limit){
  this.numberRemaining=limit;
}",0.9664429530201344
17365,"public int getPageSize(){
  return pageSize;
}","public long getPageSize(){
  return pageSize;
}",0.946236559139785
17366,"private void fetchIfNeeded(){
  if (currentPage == 0) {
    statementIterator.setLimit(pageSize + 1);
    CQLStatement cql=statementIterator.next();
    ResultSet resultSet=cqlExecutor.executeSync(cql);
    statementNumber++;
    populatePage(resultSet);
    if (page.size() > pageSize) {
      hasMore=true;
    }
 else {
      hasMore=false;
    }
    currentPage++;
  }
 else   if (hasMore && (nextItem == pageSize)) {
    Row row=page.get(nextItem);
    UUID uuid=row.getUUID(""String_Node_Str"");
    statementIterator.setNextUuid(uuid);
    CQLStatement cql=statementIterator.next();
    ResultSet resultSet=cqlExecutor.executeSync(cql);
    statementNumber++;
    populatePage(resultSet);
    if (page.size() > pageSize) {
      hasMore=true;
    }
 else {
      hasMore=false;
    }
    nextItem=0;
    currentPage++;
  }
}","private void fetchIfNeeded(){
  if (currentPage == 0) {
    statementIterator.setLimit(pageSize + 1);
    CQLStatement cql=statementIterator.next();
    ResultSet resultSet=cqlExecutor.executeSync(cql);
    statementNumber++;
    populatePage(resultSet);
    if (statementIterator.size() > currentPage + 1 && page.size() > pageSize) {
      hasMore=true;
    }
 else {
      hasMore=false;
    }
    currentPage++;
  }
 else   if (hasMore && (nextItem == pageSize)) {
    Row row=page.get(nextItem);
    UUID uuid=row.getUUID(""String_Node_Str"");
    statementIterator.setNextUuid(uuid);
    CQLStatement cql=statementIterator.next();
    ResultSet resultSet=cqlExecutor.executeSync(cql);
    statementNumber++;
    populatePage(resultSet);
    if (statementIterator.size() > currentPage + 1 && page.size() > pageSize) {
      hasMore=true;
    }
 else {
      hasMore=false;
    }
    nextItem=0;
    currentPage++;
  }
}",0.9371428571428572
17367,"public void setPageSize(int pageSize){
  this.pageSize=pageSize;
}","public void setPageSize(long pageSize){
  this.pageSize=pageSize;
}",0.962406015037594
17368,"@Override public void setLimit(int limit){
  this.numberRemaining=limit;
}","@Override public void setLimit(long limit){
  this.numberRemaining=limit;
}",0.9664429530201344
17369,"private List<Map<String,Object>> getNValues(int number,String index1Value,String index2Value){
  List<Map<String,Object>> values=new ArrayList<Map<String,Object>>();
  for (int i=0; i < number; i++) {
    Map<String,Object> value=Maps.newHashMap();
    value.put(""String_Node_Str"",index1Value);
    value.put(""String_Node_Str"",index2Value);
    value.put(""String_Node_Str"",String.valueOf(i));
    values.add(value);
  }
  return values;
}","private List<Map<String,Object>> getNValues(long number,String index1Value,String index2Value){
  List<Map<String,Object>> values=new ArrayList<Map<String,Object>>();
  for (int i=0; i < number; i++) {
    Map<String,Object> value=Maps.newHashMap();
    value.put(""String_Node_Str"",index1Value);
    value.put(""String_Node_Str"",index2Value);
    value.put(""String_Node_Str"",String.valueOf(i));
    values.add(value);
  }
  return values;
}",0.992018244013683
17370,"public Row next(){
  fetchIfNeeded();
  Row ret=null;
  if (page.size() > nextItem) {
    ret=page.get(nextItem);
    nextItem++;
  }
 else   if (statementIterator.hasNext()) {
    statementIterator.nextShard();
    currentPage=0;
    nextItem=0;
    fetchIfNeeded();
    if (page.size() > 0) {
      ret=page.get(nextItem);
    }
 else {
      ret=null;
    }
  }
  return ret;
}","public Row next(){
  fetchIfNeeded();
  Row ret=null;
  if (page.size() > nextItem) {
    ret=page.get(nextItem);
    nextItem++;
  }
 else   if (statementIterator.hasNext()) {
    statementIterator.nextShard();
    currentPage=0;
    nextItem=0;
    fetchIfNeeded();
    if (page.size() > 0) {
      ret=page.get(nextItem);
    }
  }
  return ret;
}",0.915068493150685
17371,"public CQLExecutorIterator(CQLExecutor cqlExecutor,BaseCQLStatementIterator statementIterator){
  this.cqlExecutor=cqlExecutor;
  this.statementIterator=statementIterator;
}","public CQLExecutorIterator(CQLExecutor cqlExecutor,CQLStatementIterator statementIterator){
  this.cqlExecutor=cqlExecutor;
  this.statementIterator=statementIterator;
}",0.9883040935672516
17372,"private void fetchIfNeeded(){
  if (currentPage == 0) {
    statementIterator.setLimit(pageSize + 1);
    CQLStatement cql=statementIterator.next();
    ResultSet resultSet=cqlExecutor.executeSync(cql);
    statementNumber++;
    populatePage(resultSet);
    if (page.size() > pageSize) {
      hasMore=true;
    }
 else {
      hasMore=false;
    }
    currentPage++;
    logger.info(""String_Node_Str"",currentPage);
  }
 else   if (hasMore && (nextItem == pageSize)) {
    Row row=page.get(nextItem);
    UUID uuid=row.getUUID(""String_Node_Str"");
    statementIterator.setNextUuid(uuid);
    CQLStatement cql=statementIterator.next();
    ResultSet resultSet=cqlExecutor.executeSync(cql);
    statementNumber++;
    populatePage(resultSet);
    if (page.size() > pageSize) {
      hasMore=true;
    }
 else {
      hasMore=false;
    }
    nextItem=0;
    currentPage++;
    logger.info(""String_Node_Str"",currentPage);
  }
}","private void fetchIfNeeded(){
  if (currentPage == 0 && statementIterator.hasNext()) {
    statementIterator.setLimit(pageSize + 1l);
    CQLStatement cql=statementIterator.next();
    ResultSet resultSet=cqlExecutor.executeSync(cql);
    statementNumber++;
    populatePage(resultSet);
    if (page.size() > pageSize) {
      hasMore=true;
    }
 else {
      hasMore=false;
    }
    currentPage++;
  }
 else   if (hasMore && (nextItem == pageSize)) {
    Row row=page.get(nextItem);
    UUID uuid=row.getUUID(""String_Node_Str"");
    statementIterator.setNextUuid(uuid);
    CQLStatement cql=statementIterator.next();
    ResultSet resultSet=cqlExecutor.executeSync(cql);
    statementNumber++;
    populatePage(resultSet);
    if (page.size() > pageSize) {
      hasMore=true;
    }
 else {
      hasMore=false;
    }
    nextItem=0;
    currentPage++;
  }
}",0.9283314669652856
17373,"public boolean hasNext(){
  fetchIfNeeded();
  if (page.size() > nextItem) {
    return true;
  }
 else   if (statementIterator.hasNext()) {
    statementIterator.nextShard();
    currentPage=0;
    nextItem=0;
    fetchIfNeeded();
    return true;
  }
 else {
    return false;
  }
}","public boolean hasNext(){
  fetchIfNeeded();
  if (page != null && page.size() > nextItem) {
    return true;
  }
 else   if (statementIterator.hasNext()) {
    statementIterator.nextShard();
    currentPage=0;
    nextItem=0;
    fetchIfNeeded();
    return true;
  }
 else {
    return false;
  }
}",0.9726027397260274
17374,"@Test public void testBigScan() throws Exception {
  String objectType=""String_Node_Str"";
  ConnectionManager cm=getConnectionManager();
  cm.setLogCql(true);
  CKeyspaceDefinition definition=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,this.getClass().getClassLoader(),""String_Node_Str"");
  cm.buildKeyspace(definition,true);
  logger.debug(""String_Node_Str"",definition.getName());
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  om.setLogCql(true);
  long insertNum=2000l;
  long batchSize=200;
  insertNObjects(om,insertNum,batchSize);
  VisitorFactoryTester visitorFactory=new VisitorFactoryTester();
  TableScanner scanner=new TableScanner(om,objectType,1,visitorFactory);
  scanner.scan();
  long totalCount=0;
  for (  VisitorTester visitor : visitorFactory.getInstances()) {
    totalCount+=visitor.getObjectCount();
  }
  assertEquals(insertNum,totalCount);
  cm.teardown();
}","@Test public void testBigScan() throws Exception {
  String objectType=""String_Node_Str"";
  ConnectionManager cm=getConnectionManager();
  cm.setLogCql(true);
  CKeyspaceDefinition definition=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,this.getClass().getClassLoader(),""String_Node_Str"");
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  om.setLogCql(true);
  long insertNum=2000l;
  long batchSize=200;
  insertNObjects(om,insertNum,batchSize);
  VisitorFactoryTester visitorFactory=new VisitorFactoryTester();
  TableScanner scanner=new TableScanner(om,objectType,1,visitorFactory);
  scanner.scan();
  long totalCount=0;
  for (  VisitorTester visitor : visitorFactory.getInstances()) {
    totalCount+=visitor.getObjectCount();
  }
  assertEquals(insertNum,totalCount);
  cm.teardown();
}",0.9689234184239732
17375,"private Long mapCount(CQLStatementIterator statementIterator,CDefinition definition,Long limit) throws RhombusException {
  Long resultCount=0L;
  Map<String,Object> clientFilters=statementIterator.getClientFilters();
  if (clientFilters == null) {
    int statementNumber=0;
    while (statementIterator.hasNext()) {
      CQLStatement cql=statementIterator.next();
      ResultSet resultSet=cqlExecutor.executeSync(cql);
      resultCount+=resultSet.one().getLong(0);
      statementNumber++;
      if ((limit > 0 && resultCount >= limit)) {
        logger.debug(""String_Node_Str"");
        resultCount=limit;
        break;
      }
      if (statementNumber > reasonableStatementLimit) {
        throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
      }
      if (statementIterator.hasNext()) {
        statementIterator.nextShard();
      }
    }
  }
 else {
    CQLExecutorIterator cqlIterator=new CQLExecutorIterator(cqlExecutor,(BaseCQLStatementIterator)statementIterator);
    if (limit <= 0) {
      limit=CObjectCQLGenerator.MAX_CQL_STATEMENT_LIMIT;
    }
    cqlIterator.setPageSize(limit);
    while (cqlIterator.hasNext()) {
      Row row=cqlIterator.next();
      if (row == null) {
        continue;
      }
      Map<String,Object> result=mapResult(row,definition);
      boolean resultMatchesFilters=this.resultMatchesFilters(result,clientFilters);
      if (resultMatchesFilters) {
        resultCount++;
      }
      if ((limit > 0 && resultCount >= limit)) {
        logger.debug(""String_Node_Str"");
        break;
      }
      if (cqlIterator.statementNumber > reasonableStatementLimit) {
        throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
      }
    }
  }
  return resultCount;
}","private Long mapCount(CQLStatementIterator statementIterator,CDefinition definition,Long limit) throws RhombusException {
  Long resultCount=0L;
  Map<String,Object> clientFilters=statementIterator.getClientFilters();
  if (clientFilters == null) {
    int statementNumber=0;
    while (statementIterator.hasNext()) {
      statementIterator.nextShard();
      CQLStatement cql=statementIterator.next();
      ResultSet resultSet=cqlExecutor.executeSync(cql);
      Long numResults=resultSet.one().getLong(0);
      resultCount+=numResults;
      statementNumber++;
      if ((limit > 0 && resultCount >= limit)) {
        logger.debug(""String_Node_Str"");
        resultCount=limit;
        break;
      }
      if (statementNumber > reasonableStatementLimit) {
        throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
      }
    }
  }
 else {
    CQLExecutorIterator cqlIterator=new CQLExecutorIterator(cqlExecutor,(BaseCQLStatementIterator)statementIterator);
    if (limit <= 0) {
      limit=CObjectCQLGenerator.MAX_CQL_STATEMENT_LIMIT;
    }
    cqlIterator.setPageSize(limit);
    while (cqlIterator.hasNext()) {
      Row row=cqlIterator.next();
      if (row == null) {
        continue;
      }
      Map<String,Object> result=mapResult(row,definition);
      boolean resultMatchesFilters=this.resultMatchesFilters(result,clientFilters);
      if (resultMatchesFilters) {
        resultCount++;
      }
      if ((limit > 0 && resultCount >= limit)) {
        logger.debug(""String_Node_Str"");
        break;
      }
      if (cqlIterator.statementNumber > reasonableStatementLimit) {
        throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
      }
    }
  }
  return resultCount;
}",0.9410779111979892
17376,"protected void processRow(IndexUpdateRow row){
  if (row.getIndexValues().size() == 0) {
    return;
  }
  if (row.getIndexValues().size() == 1) {
    Long consistencyHorizon=UUIDs.unixTimestamp(objectMapper.getTimeUUIDAtEndOfConsistencyHorizion());
    if (row.getTimeStampOfMostCurrentUpdate() > consistencyHorizon) {
      objectMapper.deleteObsoleteUpdateIndexColumn(row.getRowKey(),row.getIds().get(0));
    }
    return;
  }
  Map<String,Object> mostRecentUpdate=row.getIndexValues().get(0);
  row.getIndexValues().remove(0);
  row.getIds().remove(0);
  List<CIndex> listOfIndexesToDelete=Lists.newArrayList();
  List<Map<String,Object>> listOfValuesToDelete=Lists.newArrayList();
  for (  Map<String,Object> update : row.getIndexValues()) {
    if (!areIndexValuesEqual(mostRecentUpdate,update)) {
      listOfValuesToDelete.add(update);
      listOfIndexesToDelete.addAll(getListOfEffectedIndexes(objectMapper.getKeyspaceDefinition().getDefinitions().get(row.getObjectName()),mostRecentUpdate,update));
    }
  }
  for (  CIndex index : listOfIndexesToDelete) {
    for (    Map<String,Object> values : listOfValuesToDelete) {
      objectMapper.deleteObsoleteIndex(row,index,values);
    }
  }
  for (  UUID todelete : row.getIds()) {
    objectMapper.deleteObsoleteUpdateIndexColumn(row.getRowKey(),todelete);
  }
}","protected void processRow(IndexUpdateRow row){
  if (row.getIndexValues().size() == 0) {
    return;
  }
  if (row.getIndexValues().size() == 1) {
    Long consistencyHorizon=UUIDs.unixTimestamp(objectMapper.getTimeUUIDAtEndOfConsistencyHorizion());
    if (row.getTimeStampOfMostCurrentUpdate() > consistencyHorizon) {
      objectMapper.deleteObsoleteUpdateIndexColumn(row.getRowKey(),row.getIds().get(0));
    }
    return;
  }
  Map<String,Object> mostRecentUpdate=row.getIndexValues().get(0);
  row.getIndexValues().remove(0);
  row.getIds().remove(0);
  List<CIndex> listOfIndexesToDelete=Lists.newArrayList();
  List<Map<String,Object>> listOfValuesToDelete=Lists.newArrayList();
  for (  Map<String,Object> update : row.getIndexValues()) {
    if (!areIndexValuesEqual(mostRecentUpdate,update)) {
      listOfValuesToDelete.add(update);
      listOfIndexesToDelete.addAll(getListOfEffectedIndexes(objectMapper.getKeyspaceDefinition().getDefinitions().get(row.getObjectName()),mostRecentUpdate,update));
    }
  }
  for (  CIndex index : listOfIndexesToDelete) {
    for (    Map<String,Object> values : listOfValuesToDelete) {
      if (!areAnyValuesNull(values)) {
        objectMapper.deleteObsoleteIndex(row,index,values);
      }
    }
  }
  for (  UUID todelete : row.getIds()) {
    objectMapper.deleteObsoleteUpdateIndexColumn(row.getRowKey(),todelete);
  }
}",0.9818451278251203
17377,"@Test public void testUpdateProcessorWithNullUpdateData() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  String keyspace=definition.getName();
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  om.truncateTables();
  CDefinition def1=om.getKeyspaceDefinition_ONLY_FOR_TESTING().getDefinitions().get(""String_Node_Str"");
  Map<String,Object> testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",null);
  testObject.put(""String_Node_Str"",Integer.valueOf(101));
  testObject.put(""String_Node_Str"",Long.valueOf(102));
  testObject.put(""String_Node_Str"",Integer.valueOf(103));
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  UUID key=(UUID)om.insert(""String_Node_Str"",testObject);
  testObject.put(""String_Node_Str"",Long.valueOf(200));
  testObject.put(""String_Node_Str"",Integer.valueOf(201));
  testObject.put(""String_Node_Str"",Long.valueOf(202));
  testObject.put(""String_Node_Str"",Integer.valueOf(203));
  List<CQLStatement> insertStatements=Lists.newArrayList();
  for (  CIndex i : def1.getIndexes().values()) {
    om.getCqlGenerator_ONLY_FOR_TESTING().addCQLStatmentsForIndexInsert(keyspace,true,insertStatements,def1,testObject,i,key,om.getCqlGenerator_ONLY_FOR_TESTING().makeFieldAndValueList(def1,testObject),null,null);
  }
  for (  CQLStatement s : insertStatements) {
    om.getCqlExecutor().executeSync(s);
  }
  CQLStatement cql=om.getCqlGenerator_ONLY_FOR_TESTING().makeInsertUpdateIndexStatement(keyspace,def1,key,def1.makeIndexValues(testObject));
  om.getCqlExecutor().executeSync(cql);
  Map<String,Object> testObjectOriginal=Maps.newTreeMap();
  testObjectOriginal.put(""String_Node_Str"",Long.valueOf(100));
  testObjectOriginal.put(""String_Node_Str"",Integer.valueOf(101));
  testObjectOriginal.put(""String_Node_Str"",Long.valueOf(102));
  testObjectOriginal.put(""String_Node_Str"",Integer.valueOf(103));
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  cql=om.getCqlGenerator_ONLY_FOR_TESTING().makeInsertUpdateIndexStatement(definition.getName(),def1,key,def1.makeIndexValues(testObjectOriginal));
  om.getCqlExecutor().executeSync(cql);
  Map<String,Object> staticTableObject=om.getByKey(""String_Node_Str"",key);
  assertEquals(100L,staticTableObject.get(""String_Node_Str""));
  assertEquals(101,staticTableObject.get(""String_Node_Str""));
  assertEquals(103,staticTableObject.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",staticTableObject.get(""String_Node_Str""));
  Criteria criteria=new Criteria();
  SortedMap<String,Object> values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(200L));
  criteria.setIndexKeys(values);
  criteria.setLimit(0L);
  List<Map<String,Object>> indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,indexObjects.size());
  assertEquals(staticTableObject.get(""String_Node_Str""),indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(200L,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(201,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(203,indexObjects.get(0).get(""String_Node_Str""));
  Thread.sleep(3000);
  UpdateProcessor up=new UpdateProcessor(om);
  up.process();
  criteria=new Criteria();
  values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(200));
  criteria.setIndexKeys(values);
  criteria.setLimit(0L);
  indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(0,indexObjects.size());
  criteria=new Criteria();
  values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(100));
  criteria.setIndexKeys(values);
  indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,indexObjects.size());
  assertEquals(staticTableObject.get(""String_Node_Str""),indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(100L,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(101,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(103,indexObjects.get(0).get(""String_Node_Str""));
}","@Test public void testUpdateProcessorWithNullUpdateData() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  String keyspace=definition.getName();
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  om.truncateTables();
  Map<String,Object> testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",null);
  testObject.put(""String_Node_Str"",Integer.valueOf(101));
  testObject.put(""String_Node_Str"",Long.valueOf(102));
  testObject.put(""String_Node_Str"",Integer.valueOf(103));
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  UUID key=(UUID)om.insert(""String_Node_Str"",testObject);
  testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",77L);
  testObject.put(""String_Node_Str"",null);
  om.update(""String_Node_Str"",key,testObject);
  testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",null);
  testObject.put(""String_Node_Str"",77L);
  om.update(""String_Node_Str"",key,testObject);
  testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",77L);
  testObject.put(""String_Node_Str"",null);
  om.update(""String_Node_Str"",key,testObject);
  testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",77L);
  testObject.put(""String_Node_Str"",null);
  om.update(""String_Node_Str"",key,testObject);
  Thread.sleep(3500);
  UpdateProcessor up=new UpdateProcessor(om);
  up.process(9999L);
  Criteria criteria=new Criteria();
  SortedMap<String,Object> values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(77));
  criteria.setIndexKeys(values);
  List<Map<String,Object>> indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,indexObjects.size());
  assertEquals(null,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(77L,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(101,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(103,indexObjects.get(0).get(""String_Node_Str""));
}",0.3361569326794472
17378,"@Test public void testUpdateProcessorWithNonNullData() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  String keyspace=definition.getName();
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  om.truncateTables();
  CDefinition def1=om.getKeyspaceDefinition_ONLY_FOR_TESTING().getDefinitions().get(""String_Node_Str"");
  Map<String,Object> testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",Long.valueOf(100));
  testObject.put(""String_Node_Str"",Integer.valueOf(101));
  testObject.put(""String_Node_Str"",Long.valueOf(102));
  testObject.put(""String_Node_Str"",Integer.valueOf(103));
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  UUID key=(UUID)om.insert(""String_Node_Str"",testObject);
  testObject.put(""String_Node_Str"",Long.valueOf(200));
  testObject.put(""String_Node_Str"",Integer.valueOf(201));
  testObject.put(""String_Node_Str"",Long.valueOf(202));
  testObject.put(""String_Node_Str"",Integer.valueOf(203));
  List<CQLStatement> insertStatements=Lists.newArrayList();
  for (  CIndex i : def1.getIndexes().values()) {
    om.getCqlGenerator_ONLY_FOR_TESTING().addCQLStatmentsForIndexInsert(keyspace,true,insertStatements,def1,testObject,i,key,om.getCqlGenerator_ONLY_FOR_TESTING().makeFieldAndValueList(def1,testObject),null,null);
  }
  for (  CQLStatement s : insertStatements) {
    om.getCqlExecutor().executeSync(s);
  }
  CQLStatement cql=om.getCqlGenerator_ONLY_FOR_TESTING().makeInsertUpdateIndexStatement(keyspace,def1,key,def1.makeIndexValues(testObject));
  om.getCqlExecutor().executeSync(cql);
  Map<String,Object> testObjectOriginal=Maps.newTreeMap();
  testObjectOriginal.put(""String_Node_Str"",Long.valueOf(100));
  testObjectOriginal.put(""String_Node_Str"",Integer.valueOf(101));
  testObjectOriginal.put(""String_Node_Str"",Long.valueOf(102));
  testObjectOriginal.put(""String_Node_Str"",Integer.valueOf(103));
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  cql=om.getCqlGenerator_ONLY_FOR_TESTING().makeInsertUpdateIndexStatement(definition.getName(),def1,key,def1.makeIndexValues(testObjectOriginal));
  om.getCqlExecutor().executeSync(cql);
  Map<String,Object> staticTableObject=om.getByKey(""String_Node_Str"",key);
  assertEquals(100L,staticTableObject.get(""String_Node_Str""));
  assertEquals(101,staticTableObject.get(""String_Node_Str""));
  assertEquals(103,staticTableObject.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",staticTableObject.get(""String_Node_Str""));
  Criteria criteria=new Criteria();
  SortedMap<String,Object> values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(200L));
  criteria.setIndexKeys(values);
  criteria.setLimit(0L);
  List<Map<String,Object>> indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,indexObjects.size());
  assertEquals(staticTableObject.get(""String_Node_Str""),indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(200L,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(201,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(203,indexObjects.get(0).get(""String_Node_Str""));
  Thread.sleep(3000);
  UpdateProcessor up=new UpdateProcessor(om);
  up.process();
  criteria=new Criteria();
  values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(200));
  criteria.setIndexKeys(values);
  criteria.setLimit(0L);
  indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(0,indexObjects.size());
  criteria=new Criteria();
  values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(100));
  criteria.setIndexKeys(values);
  indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,indexObjects.size());
  assertEquals(staticTableObject.get(""String_Node_Str""),indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(100L,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(101,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(103,indexObjects.get(0).get(""String_Node_Str""));
}","@Test public void testUpdateProcessorWithNonNullData() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  String keyspace=definition.getName();
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  om.truncateTables();
  CDefinition def1=om.getKeyspaceDefinition_ONLY_FOR_TESTING().getDefinitions().get(""String_Node_Str"");
  Map<String,Object> testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",Long.valueOf(100));
  testObject.put(""String_Node_Str"",Integer.valueOf(101));
  testObject.put(""String_Node_Str"",Long.valueOf(102));
  testObject.put(""String_Node_Str"",Integer.valueOf(103));
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  UUID key=(UUID)om.insert(""String_Node_Str"",testObject);
  testObject.put(""String_Node_Str"",Long.valueOf(200));
  testObject.put(""String_Node_Str"",Integer.valueOf(201));
  testObject.put(""String_Node_Str"",Long.valueOf(202));
  testObject.put(""String_Node_Str"",Integer.valueOf(203));
  List<CQLStatement> insertStatements=Lists.newArrayList();
  for (  CIndex i : def1.getIndexes().values()) {
    om.getCqlGenerator_ONLY_FOR_TESTING().addCQLStatmentsForIndexInsert(keyspace,true,insertStatements,def1,testObject,i,key,om.getCqlGenerator_ONLY_FOR_TESTING().makeFieldAndValueList(def1,testObject),null,null);
  }
  for (  CQLStatement s : insertStatements) {
    om.getCqlExecutor().executeSync(s);
  }
  CQLStatement cql=om.getCqlGenerator_ONLY_FOR_TESTING().makeInsertUpdateIndexStatement(keyspace,def1,key,def1.makeIndexValues(testObject));
  om.getCqlExecutor().executeSync(cql);
  Map<String,Object> testObjectOriginal=Maps.newTreeMap();
  testObjectOriginal.put(""String_Node_Str"",Long.valueOf(100));
  testObjectOriginal.put(""String_Node_Str"",Integer.valueOf(101));
  testObjectOriginal.put(""String_Node_Str"",Long.valueOf(102));
  testObjectOriginal.put(""String_Node_Str"",Integer.valueOf(103));
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  cql=om.getCqlGenerator_ONLY_FOR_TESTING().makeInsertUpdateIndexStatement(definition.getName(),def1,key,def1.makeIndexValues(testObjectOriginal));
  om.getCqlExecutor().executeSync(cql);
  Map<String,Object> staticTableObject=om.getByKey(""String_Node_Str"",key);
  assertEquals(100L,staticTableObject.get(""String_Node_Str""));
  assertEquals(101,staticTableObject.get(""String_Node_Str""));
  assertEquals(103,staticTableObject.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",staticTableObject.get(""String_Node_Str""));
  Criteria criteria=new Criteria();
  SortedMap<String,Object> values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(200L));
  criteria.setIndexKeys(values);
  criteria.setLimit(0L);
  List<Map<String,Object>> indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,indexObjects.size());
  assertEquals(staticTableObject.get(""String_Node_Str""),indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(200L,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(201,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(203,indexObjects.get(0).get(""String_Node_Str""));
  Thread.sleep(3000);
  UpdateProcessor up=new UpdateProcessor(om);
  up.process(9999L);
  criteria=new Criteria();
  values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(200));
  criteria.setIndexKeys(values);
  criteria.setLimit(0L);
  indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(0,indexObjects.size());
  criteria=new Criteria();
  values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(100));
  criteria.setIndexKeys(values);
  indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,indexObjects.size());
  assertEquals(staticTableObject.get(""String_Node_Str""),indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(100L,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(101,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(103,indexObjects.get(0).get(""String_Node_Str""));
}",0.9994385176866928
17379,"private Long mapCount(CQLStatementIterator statementIterator,CDefinition definition,Long limit) throws RhombusException {
  Long resultCount=0L;
  Map<String,Object> clientFilters=statementIterator.getClientFilters();
  if (clientFilters == null) {
    int statementNumber=0;
    while (statementIterator.hasNext()) {
      CQLStatement cql=statementIterator.next();
      ResultSet resultSet=cqlExecutor.executeSync(cql);
      resultCount+=resultSet.one().getLong(0);
      statementNumber++;
      if ((limit > 0 && resultCount >= limit)) {
        logger.debug(""String_Node_Str"");
        resultCount=limit;
        break;
      }
      if (statementNumber > reasonableStatementLimit) {
        throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
      }
      if (statementIterator.hasNext()) {
        statementIterator.nextShard();
      }
    }
  }
 else {
    CQLExecutorIterator cqlIterator=new CQLExecutorIterator(cqlExecutor,(BaseCQLStatementIterator)statementIterator);
    while (cqlIterator.hasNext()) {
      Row row=cqlIterator.next();
      Map<String,Object> result=mapResult(row,definition);
      boolean resultMatchesFilters=this.resultMatchesFilters(result,clientFilters);
      if (resultMatchesFilters) {
        resultCount++;
      }
      if ((limit > 0 && resultCount >= limit)) {
        logger.debug(""String_Node_Str"");
        break;
      }
      if (cqlIterator.statementNumber > reasonableStatementLimit) {
        throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
      }
    }
  }
  return resultCount;
}","private Long mapCount(CQLStatementIterator statementIterator,CDefinition definition,Long limit) throws RhombusException {
  Long resultCount=0L;
  Map<String,Object> clientFilters=statementIterator.getClientFilters();
  if (clientFilters == null) {
    int statementNumber=0;
    while (statementIterator.hasNext()) {
      CQLStatement cql=statementIterator.next();
      ResultSet resultSet=cqlExecutor.executeSync(cql);
      resultCount+=resultSet.one().getLong(0);
      statementNumber++;
      if ((limit > 0 && resultCount >= limit)) {
        logger.debug(""String_Node_Str"");
        resultCount=limit;
        break;
      }
      if (statementNumber > reasonableStatementLimit) {
        throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
      }
      if (statementIterator.hasNext()) {
        statementIterator.nextShard();
      }
    }
  }
 else {
    CQLExecutorIterator cqlIterator=new CQLExecutorIterator(cqlExecutor,(BaseCQLStatementIterator)statementIterator);
    while (cqlIterator.hasNext()) {
      Row row=cqlIterator.next();
      if (row == null) {
        continue;
      }
      Map<String,Object> result=mapResult(row,definition);
      boolean resultMatchesFilters=this.resultMatchesFilters(result,clientFilters);
      if (resultMatchesFilters) {
        resultCount++;
      }
      if ((limit > 0 && resultCount >= limit)) {
        logger.debug(""String_Node_Str"");
        break;
      }
      if (cqlIterator.statementNumber > reasonableStatementLimit) {
        throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
      }
    }
  }
  return resultCount;
}",0.9845688350983358
17380,"/** 
 * Iterates through cql statements executing them in sequence and mapping the results until limit is reached
 * @param statementIterator Statement iterator to execute
 * @param definition definition to execute the statements against
 * @return Ordered resultset concatenating results from statements in statement iterator.
 */
private List<Map<String,Object>> mapResults(CQLStatementIterator statementIterator,CDefinition definition,Long limit) throws RhombusException {
  List<Map<String,Object>> results=Lists.newArrayList();
  int statementNumber=0;
  int resultNumber=0;
  Map<String,Object> clientFilters=statementIterator.getClientFilters();
  CQLExecutorIterator cqlIterator=new CQLExecutorIterator(cqlExecutor,(BaseCQLStatementIterator)statementIterator);
  long nonMatching=0;
  long matching=0;
  while (cqlIterator.hasNext()) {
    Row row=cqlIterator.next();
    Map<String,Object> result=mapResult(row,definition);
    boolean resultMatchesFilters=true;
    if (clientFilters != null) {
      resultMatchesFilters=this.resultMatchesFilters(result,clientFilters);
    }
    if (resultMatchesFilters) {
      results.add(result);
      resultNumber++;
      matching++;
    }
 else {
      nonMatching++;
    }
    logger.debug(""String_Node_Str"",matching,nonMatching);
    if ((limit > 0 && resultNumber >= limit)) {
      logger.debug(""String_Node_Str"");
      break;
    }
    if (cqlIterator.statementNumber > reasonableStatementLimit) {
      throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
    }
  }
  return results;
}","/** 
 * Iterates through cql statements executing them in sequence and mapping the results until limit is reached
 * @param statementIterator Statement iterator to execute
 * @param definition definition to execute the statements against
 * @return Ordered resultset concatenating results from statements in statement iterator.
 */
private List<Map<String,Object>> mapResults(CQLStatementIterator statementIterator,CDefinition definition,Long limit) throws RhombusException {
  List<Map<String,Object>> results=Lists.newArrayList();
  int statementNumber=0;
  int resultNumber=0;
  Map<String,Object> clientFilters=statementIterator.getClientFilters();
  CQLExecutorIterator cqlIterator=new CQLExecutorIterator(cqlExecutor,(BaseCQLStatementIterator)statementIterator);
  long nonMatching=0;
  long matching=0;
  while (cqlIterator.hasNext()) {
    Row row=cqlIterator.next();
    if (row == null) {
      continue;
    }
    Map<String,Object> result=mapResult(row,definition);
    boolean resultMatchesFilters=true;
    if (clientFilters != null) {
      resultMatchesFilters=this.resultMatchesFilters(result,clientFilters);
    }
    if (resultMatchesFilters) {
      results.add(result);
      resultNumber++;
      matching++;
    }
 else {
      nonMatching++;
    }
    logger.debug(""String_Node_Str"",matching,nonMatching);
    if ((limit > 0 && resultNumber >= limit)) {
      logger.debug(""String_Node_Str"");
      break;
    }
    if (cqlIterator.statementNumber > reasonableStatementLimit) {
      throw new RhombusException(""String_Node_Str"" + reasonableStatementLimit + ""String_Node_Str"");
    }
  }
  return results;
}",0.9860118122474356
17381,"public Row next(){
  fetchIfNeeded();
  Row ret=null;
  if (page.size() > nextItem) {
    ret=page.get(nextItem);
    nextItem++;
  }
 else   if (statementIterator.hasNext()) {
    statementIterator.nextShard();
    currentPage=0;
    nextItem=0;
    fetchIfNeeded();
    ret=page.get(nextItem);
  }
  return ret;
}","public Row next(){
  fetchIfNeeded();
  Row ret=null;
  if (page.size() > nextItem) {
    ret=page.get(nextItem);
    nextItem++;
  }
 else   if (statementIterator.hasNext()) {
    statementIterator.nextShard();
    currentPage=0;
    nextItem=0;
    fetchIfNeeded();
    if (page.size() > 0) {
      ret=page.get(nextItem);
    }
 else {
      ret=null;
    }
  }
  return ret;
}",0.7827338129496403
17382,"public boolean hasNext(){
  fetchIfNeeded();
  if (page.size() == 0) {
    return false;
  }
 else   if (page.size() > nextItem) {
    return true;
  }
 else   if (statementIterator.hasNext()) {
    statementIterator.nextShard();
    currentPage=0;
    nextItem=0;
    fetchIfNeeded();
    return true;
  }
 else {
    return false;
  }
}","public boolean hasNext(){
  fetchIfNeeded();
  if (page.size() > nextItem) {
    return true;
  }
 else   if (statementIterator.hasNext()) {
    statementIterator.nextShard();
    currentPage=0;
    nextItem=0;
    fetchIfNeeded();
    return true;
  }
 else {
    return false;
  }
}",0.9131832797427653
17383,"public static Date getDateFromUUID(UUID uuid){
  Long time=(uuid.timestamp() - NUMBER_OF_100NS_INTERVALS_SINCE_UUID_EPOCH) / 10000;
  return new Date(time);
}","public static DateTime getDateFromUUID(UUID uuid){
  return new DateTime(convertUUIDToJavaMillis(uuid),DateTimeZone.UTC);
}",0.505338078291815
17384,"public FakeIdRange(CField.CDataType idType,Object startAfterId,Long totalObjects,Long objectsPerShard,TimebasedShardingStrategy shardingStrategy){
  this.shardingStrategy=shardingStrategy;
  this.startingShardNumber=shardingStrategy.getShardKey(startAfterId) + 1;
  this.objectsPerShard=objectsPerShard;
  this.spacing=getSpacingForShardingStrategy(objectsPerShard);
  this.idType=idType;
  this.counterRange=Range.closed(1L,totalObjects);
}","public FakeIdRange(CField.CDataType idType,Object startAfterId,Long totalObjects,Long objectsPerShard,TimebasedShardingStrategy shardingStrategy){
  this.shardingStrategy=shardingStrategy;
  this.startingShardNumber=shardingStrategy.getShardKey(startAfterId);
  this.objectsPerShard=objectsPerShard;
  this.spacing=getSpacingForShardingStrategy(objectsPerShard);
  this.idType=idType;
  this.counterRange=Range.closed(1L,totalObjects);
}",0.9954441913439636
17385,"public Long getCounterAtId(Object id) throws RhombusException {
  if (idType.equals(CField.CDataType.TIMEUUID)) {
    UUID idUUID=(UUID)id;
    Long idMillis=getMillis(idUUID);
    Long indexOfShard=shardingStrategy.getShardKey(idMillis);
    Long shardMillis=PARDOT_EPOCH + (indexOfShard * getTimeUnitsPerShard(shardingStrategy));
    Long itemInShard=(idMillis - shardMillis) / spacing;
    return indexOfShard + itemInShard;
  }
  if (idType.equals(CField.CDataType.VARCHAR)) {
    return Long.valueOf(id.toString());
  }
  if (idType.equals(CField.CDataType.BIGINT)) {
    return (Long)id;
  }
  throw new RhombusException(""String_Node_Str"");
}","public Long getCounterAtId(Object id) throws RhombusException {
  if (idType.equals(CField.CDataType.TIMEUUID)) {
    UUID idUUID=(UUID)id;
    Long idMillis=UuidUtil.convertUUIDToJavaMillis(idUUID);
    System.out.println(""String_Node_Str"" + UuidUtil.getDateFromUUID(idUUID));
    Long indexOfShard=shardingStrategy.getShardKey(idMillis.longValue());
    System.out.println(indexOfShard);
    Long shardMillis=getMillisAtShardKey(indexOfShard,shardingStrategy);
    Long itemInShard=(idMillis - shardMillis) / spacing;
    return ((indexOfShard - startingShardNumber) * objectsPerShard) + itemInShard;
  }
  if (idType.equals(CField.CDataType.VARCHAR)) {
    return Long.valueOf(id.toString());
  }
  if (idType.equals(CField.CDataType.BIGINT)) {
    return (Long)id;
  }
  throw new RhombusException(""String_Node_Str"");
}",0.6974847042828008
17386,"public Object getIdAtCounter(Long counter,TimebasedShardingStrategy shardingStrategy) throws RhombusException {
  Long indexOfShard=startingShardNumber + (counter / objectsPerShard);
  Long itemInShard=counter % objectsPerShard;
  if (idType.equals(CField.CDataType.TIMEUUID)) {
    Long timestamp=PARDOT_EPOCH + (indexOfShard * getTimeUnitsPerShard(shardingStrategy));
    if (shardingStrategy.getClass().equals(ShardingStrategyMonthly.class)) {
      int years=(int)(indexOfShard / 12);
      int months=(int)((indexOfShard % 12)) + 1;
      DateTime dt=new DateTime(years + 2000,months,1,0,0,DateTimeZone.UTC);
      timestamp=dt.getMillis();
    }
    timestamp+=(spacing * itemInShard);
    return UUIDs.startOf(timestamp);
  }
  if (idType.equals(CField.CDataType.VARCHAR)) {
    return counter + ""String_Node_Str"";
  }
  if (idType.equals(CField.CDataType.BIGINT)) {
    return Long.valueOf(counter);
  }
  throw new RhombusException(""String_Node_Str"");
}","public Object getIdAtCounter(Long counter,TimebasedShardingStrategy shardingStrategy) throws RhombusException {
  Long indexOfShard=startingShardNumber + (counter / objectsPerShard);
  Long itemInShard=counter % objectsPerShard;
  if (idType.equals(CField.CDataType.TIMEUUID)) {
    Long timestamp=getMillisAtShardKey(indexOfShard,shardingStrategy);
    timestamp+=(spacing * itemInShard);
    return UUIDs.startOf(timestamp);
  }
  if (idType.equals(CField.CDataType.VARCHAR)) {
    return counter + ""String_Node_Str"";
  }
  if (idType.equals(CField.CDataType.BIGINT)) {
    return Long.valueOf(counter);
  }
  throw new RhombusException(""String_Node_Str"");
}",0.7694204685573366
17387,"public Long getSpacingForShardingStrategy(Long objectsPerShard,TimebasedShardingStrategy shardingStrategy){
  return getTimeUnitsPerShard(shardingStrategy) / objectsPerShard;
}","public Long getSpacingForShardingStrategy(Long objectsPerShard,TimebasedShardingStrategy shardingStrategy){
  return getTimeUnitsPerShard(shardingStrategy) / (objectsPerShard);
}",0.9943502824858758
17388,"@Test public void getIteratorTestMonthly() throws RhombusException {
  Long millistamp=946740000000L;
  millistamp=System.currentTimeMillis();
  System.out.println(millistamp);
  UUID startingUUID=UUIDs.startOf(millistamp);
  System.out.println(""String_Node_Str"" + startingUUID + ""String_Node_Str""+ UuidUtil.getDateFromUUID(startingUUID)+ ""String_Node_Str"");
  TimebasedShardingStrategy shardingStrategy=new ShardingStrategyMonthly();
  int numberPerShard=16;
  long totalNumberOfObjects=10000L;
  FakeIdRange subject=new FakeIdRange(CField.CDataType.TIMEUUID,startingUUID,totalNumberOfObjects,(long)numberPerShard,shardingStrategy);
  Iterator<FakeIdRange.IdInRange> it=subject.getIterator(CObjectOrdering.ASCENDING);
  long counter=0;
  int lastmonth=0;
  int countSinceChange=numberPerShard;
  while (it.hasNext()) {
    counter++;
    FakeIdRange.IdInRange id=it.next();
    Date dt=UuidUtil.getDateFromUUID((UUID)id.getId());
    if (dt.getMonth() == lastmonth) {
      assert(countSinceChange < numberPerShard);
      countSinceChange++;
    }
 else {
      assertEquals(numberPerShard,countSinceChange);
      countSinceChange=1;
    }
    ;
    lastmonth=dt.getMonth();
    System.out.println(""String_Node_Str"" + counter);
    System.out.println(""String_Node_Str"" + id.getCounterValue());
    System.out.println(""String_Node_Str"" + subject.getCounterAtId(id.getId()));
    System.out.println(counter + ""String_Node_Str"" + UuidUtil.getDateFromUUID((UUID)id.getId()).toString());
  }
  assertEquals(totalNumberOfObjects,counter);
}","@Test public void getIteratorTestMonthly() throws RhombusException {
  Long millistamp=946740000000L;
  millistamp=System.currentTimeMillis();
  System.out.println(millistamp);
  UUID startingUUID=UUIDs.startOf(millistamp);
  System.out.println(""String_Node_Str"" + startingUUID + ""String_Node_Str""+ UuidUtil.getDateFromUUID(startingUUID)+ ""String_Node_Str"");
  TimebasedShardingStrategy shardingStrategy=new ShardingStrategyMonthly();
  int numberPerShard=10;
  long totalNumberOfObjects=2000;
  FakeIdRange subject=new FakeIdRange(CField.CDataType.TIMEUUID,startingUUID,totalNumberOfObjects,(long)numberPerShard,shardingStrategy);
  Iterator<FakeIdRange.IdInRange> it=subject.getIterator(CObjectOrdering.ASCENDING);
  long counter=0;
  int lastmonth=-1;
  int countSinceChange=0;
  while (it.hasNext()) {
    System.out.println(""String_Node_Str"");
    counter++;
    FakeIdRange.IdInRange id=it.next();
    DateTime dt=UuidUtil.getDateFromUUID((UUID)id.getId());
    System.out.println(""String_Node_Str"" + dt.getMonthOfYear());
    System.out.println(""String_Node_Str"" + countSinceChange);
    if (lastmonth == -1) {
      countSinceChange=1;
      lastmonth=dt.getMonthOfYear();
    }
    if (dt.getMonthOfYear() == lastmonth) {
      countSinceChange++;
    }
 else {
      assertEquals(numberPerShard,countSinceChange);
      countSinceChange=1;
    }
    ;
    lastmonth=dt.getMonthOfYear();
    System.out.println(""String_Node_Str"" + counter);
    System.out.println(""String_Node_Str"" + id.getCounterValue());
    System.out.println(""String_Node_Str"" + subject.getCounterAtId(id.getId()));
    assertEquals(subject.getCounterAtId(id.getId()),id.getCounterValue());
    System.out.println(counter + ""String_Node_Str"" + UuidUtil.getDateFromUUID((UUID)id.getId()).toString());
  }
  assertEquals(totalNumberOfObjects,counter);
}",0.8562945368171021
17389,"public static CQLStatementIterator makeCQLforUpdate(String keyspace,CDefinition def,UUID key,Map<String,Object> oldValues,Map<String,Object> newValues) throws CQLGenerationException {
  List<CQLStatement> ret=Lists.newArrayList();
  List<CIndex> effectedIndexes=getEffectedIndexes(def,oldValues,newValues);
  List<CIndex> uneffectedIndexes=getUneffectedIndexes(def,oldValues,newValues);
  for (  CIndex i : effectedIndexes) {
    Map<String,Object> compositeKeyToDelete=i.getIndexKeyAndValues(oldValues);
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(compositeKeyToDelete)) {
        continue;
      }
    }
    ret.add(makeCQLforDeleteUUIDFromIndex(keyspace,def,i,key,compositeKeyToDelete,null));
  }
  Map<String,Object> completeValues=Maps.newHashMap(oldValues);
  for (  String k : newValues.keySet()) {
    completeValues.put(k,newValues.get(k));
  }
  Map<String,ArrayList> fieldsAndValues=makeFieldAndValueList(def,completeValues);
  Map<String,Object> newValuesAndIndexValues=Maps.newHashMap(newValues);
  for (  String s : def.getRequiredFields()) {
    if (!newValuesAndIndexValues.containsKey(s)) {
      newValuesAndIndexValues.put(s,completeValues.get(s));
    }
  }
  Map<String,ArrayList> fieldsAndValuesForNewValuesAndIndexValues=makeFieldAndValueList(def,newValuesAndIndexValues);
  for (  CIndex i : effectedIndexes) {
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(i.getIndexKeyAndValues(completeValues))) {
        continue;
      }
    }
    addCQLStatmentsForIndexInsert(keyspace,true,ret,def,completeValues,i,key,fieldsAndValues,null,null);
  }
  for (  CIndex i : uneffectedIndexes) {
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(i.getIndexKeyAndValues(newValuesAndIndexValues))) {
        continue;
      }
    }
    addCQLStatmentsForIndexInsert(keyspace,false,ret,def,newValuesAndIndexValues,i,key,fieldsAndValuesForNewValuesAndIndexValues,null,null);
  }
  Map<String,ArrayList> fieldsAndValuesOnlyForChanges=makeFieldAndValueList(def,newValues);
  ret.add(makeInsertStatementStatic(keyspace,makeTableName(def,null),(List<String>)fieldsAndValuesOnlyForChanges.get(""String_Node_Str"").clone(),(List<Object>)fieldsAndValuesOnlyForChanges.get(""String_Node_Str"").clone(),key,null,null));
  ret.add(makeInsertUpdateIndexStatement(keyspace,def,key,def.makeIndexValues(completeValues)));
  return new BoundedCQLStatementIterator(ret);
}","public static CQLStatementIterator makeCQLforUpdate(String keyspace,CDefinition def,UUID key,Map<String,Object> oldValues,Map<String,Object> newValues) throws CQLGenerationException {
  List<CQLStatement> ret=Lists.newArrayList();
  List<CIndex> affectedIndexes=getAffectedIndexes(def,oldValues,newValues);
  List<CIndex> unaffectedIndexes=getUnaffectedIndexes(def,oldValues,newValues);
  Map<String,Object> completeValues=Maps.newHashMap(oldValues);
  for (  String k : newValues.keySet()) {
    completeValues.put(k,newValues.get(k));
  }
  Map<String,ArrayList> fieldsAndValues=makeFieldAndValueList(def,completeValues);
  for (  CIndex i : affectedIndexes) {
    Map<String,Object> compositeKeyToDelete=i.getIndexKeyAndValues(oldValues);
    Map<String,Object> compositeKeyOfCompleteValues=i.getIndexKeyAndValues(completeValues);
    if (compositeKeyOfCompleteValues.equals(compositeKeyToDelete)) {
      continue;
    }
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(compositeKeyToDelete)) {
        continue;
      }
    }
    ret.add(makeCQLforDeleteUUIDFromIndex(keyspace,def,i,key,compositeKeyToDelete,null));
  }
  Map<String,Object> newValuesAndIndexValues=Maps.newHashMap(newValues);
  for (  String s : def.getRequiredFields()) {
    if (!newValuesAndIndexValues.containsKey(s)) {
      newValuesAndIndexValues.put(s,completeValues.get(s));
    }
  }
  Map<String,ArrayList> fieldsAndValuesForNewValuesAndIndexValues=makeFieldAndValueList(def,newValuesAndIndexValues);
  for (  CIndex i : affectedIndexes) {
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(i.getIndexKeyAndValues(completeValues))) {
        continue;
      }
    }
    addCQLStatmentsForIndexInsert(keyspace,true,ret,def,completeValues,i,key,fieldsAndValues,null,null);
  }
  for (  CIndex i : unaffectedIndexes) {
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(i.getIndexKeyAndValues(newValuesAndIndexValues))) {
        continue;
      }
    }
    addCQLStatmentsForIndexInsert(keyspace,false,ret,def,newValuesAndIndexValues,i,key,fieldsAndValuesForNewValuesAndIndexValues,null,null);
  }
  Map<String,ArrayList> fieldsAndValuesOnlyForChanges=makeFieldAndValueList(def,newValues);
  ret.add(makeInsertStatementStatic(keyspace,makeTableName(def,null),(List<String>)fieldsAndValuesOnlyForChanges.get(""String_Node_Str"").clone(),(List<Object>)fieldsAndValuesOnlyForChanges.get(""String_Node_Str"").clone(),key,null,null));
  ret.add(makeInsertUpdateIndexStatement(keyspace,def,key,def.makeIndexValues(completeValues)));
  return new BoundedCQLStatementIterator(ret);
}",0.7766187758315293
17390,"@Test public void testKeyspaceCreate() throws IOException {
  ConnectionManager cm=TestHelpers.getTestConnectionManager();
  cm.buildCluster();
  Session session=cm.getEmptySession();
  assertNotNull(session);
  try {
    session.execute(""String_Node_Str"");
  }
 catch (  InvalidQueryException e) {
  }
  session.execute(""String_Node_Str"");
  session.execute(""String_Node_Str"");
  try {
    session.execute(""String_Node_Str"");
  }
 catch (  InvalidQueryException e) {
  }
  session.shutdown();
  cm.teardown();
}","@Test public void testKeyspaceCreate() throws IOException {
  ConnectionManager cm=TestHelpers.getTestConnectionManager();
  cm.buildCluster();
  Session session=cm.getEmptySession();
  assertNotNull(session);
  try {
    session.execute(""String_Node_Str"");
  }
 catch (  InvalidQueryException e) {
  }
  session.execute(""String_Node_Str"");
  session.execute(""String_Node_Str"");
  try {
    session.execute(""String_Node_Str"");
  }
 catch (  InvalidQueryException e) {
  }
  session.close();
  cm.teardown();
}",0.9618021547502448
17391,"@Test public void testDropKeyspace() throws Exception {
  ConnectionManager cm=getConnectionManager();
  CKeyspaceDefinition definition=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,this.getClass().getClassLoader(),""String_Node_Str"");
  assertNotNull(definition);
  cm.buildKeyspace(definition,false);
  cm.dropKeyspace(definition.getName());
  Session session=cm.getEmptySession();
  boolean caught=false;
  try {
    session.execute(""String_Node_Str"" + definition.getName() + ""String_Node_Str"");
  }
 catch (  InvalidQueryException e) {
    caught=true;
  }
  session.shutdown();
  assertTrue(caught);
}","@Test public void testDropKeyspace() throws Exception {
  ConnectionManager cm=getConnectionManager();
  CKeyspaceDefinition definition=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,this.getClass().getClassLoader(),""String_Node_Str"");
  assertNotNull(definition);
  cm.buildKeyspace(definition,false);
  cm.dropKeyspace(definition.getName());
  Session session=cm.getEmptySession();
  boolean caught=false;
  try {
    session.execute(""String_Node_Str"" + definition.getName() + ""String_Node_Str"");
  }
 catch (  InvalidQueryException e) {
    caught=true;
  }
  session.close();
  assertTrue(caught);
}",0.9553208773354996
17392,"public ConnectionManager(CassandraConfiguration configuration){
  this.contactPoints=configuration.getContactPoints();
  this.localDatacenter=configuration.getLocalDatacenter();
  this.consistencyHorizon=configuration.getConsistencyHorizion();
  this.maxConnectionPerHostLocal=configuration.getMaxConnectionPerHostLocal() == null ? 16 : configuration.getMaxConnectionPerHostLocal();
  this.maxConnectionPerHostRemote=configuration.getMaxConnectionPerHostRemote() == null ? 4 : configuration.getMaxConnectionPerHostRemote();
  this.maxSimultaneousRequestsPerConnectionTreshold=configuration.getMaxSimultaneousRequestsPerConnectionTreshold() == null ? 128 : configuration.getMaxSimultaneousRequestsPerConnectionTreshold();
  if (configuration.getIndividualNodeConnectionTimeout() != null) {
    this.individualNodeConnectionTimeout=configuration.getIndividualNodeConnectionTimeout();
  }
  if (configuration.getDriverReadTimeoutMillis() != null) {
    this.driverReadTimeoutMillis=configuration.getDriverReadTimeoutMillis();
  }
  if (configuration.getBatchTimeout() != null) {
    this.batchTimeout=configuration.getBatchTimeout();
  }
  if (configuration.getRhombusKeyspaceName() != null) {
    this.rhombusKeyspaceName=configuration.getRhombusKeyspaceName();
  }
}","public ConnectionManager(CassandraConfiguration configuration){
  this.contactPoints=configuration.getContactPoints();
  this.localDatacenter=configuration.getLocalDatacenter();
  this.consistencyHorizon=configuration.getConsistencyHorizon();
  this.maxConnectionPerHostLocal=configuration.getMaxConnectionPerHostLocal() == null ? 16 : configuration.getMaxConnectionPerHostLocal();
  this.maxConnectionPerHostRemote=configuration.getMaxConnectionPerHostRemote() == null ? 4 : configuration.getMaxConnectionPerHostRemote();
  this.maxSimultaneousRequestsPerConnectionTreshold=configuration.getMaxSimultaneousRequestsPerConnectionTreshold() == null ? 128 : configuration.getMaxSimultaneousRequestsPerConnectionTreshold();
  if (configuration.getIndividualNodeConnectionTimeout() != null) {
    this.individualNodeConnectionTimeout=configuration.getIndividualNodeConnectionTimeout();
  }
  if (configuration.getDriverReadTimeoutMillis() != null) {
    this.driverReadTimeoutMillis=configuration.getDriverReadTimeoutMillis();
  }
  if (configuration.getBatchTimeout() != null) {
    this.batchTimeout=configuration.getBatchTimeout();
  }
  if (configuration.getRhombusKeyspaceName() != null) {
    this.rhombusKeyspaceName=configuration.getRhombusKeyspaceName();
  }
}",0.9996045867931987
17393,"@Test public void testUpdateRowLimit() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  String keyspace=definition.getName();
  assertNotNull(definition);
  cm.buildKeyspace(definition,false);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  om.truncateTables();
  Map<String,Object> testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",Long.valueOf(100));
  testObject.put(""String_Node_Str"",Integer.valueOf(101));
  testObject.put(""String_Node_Str"",Long.valueOf(102));
  testObject.put(""String_Node_Str"",Integer.valueOf(103));
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> testObject2=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",Long.valueOf(200));
  testObject.put(""String_Node_Str"",Integer.valueOf(201));
  testObject.put(""String_Node_Str"",Long.valueOf(202));
  testObject.put(""String_Node_Str"",Integer.valueOf(203));
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  UUID key=(UUID)om.insert(""String_Node_Str"",testObject);
  Map<String,Object> updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",1l);
  om.update(""String_Node_Str"",key,updateObj);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",2l);
  om.update(""String_Node_Str"",key,updateObj);
  UUID key2=(UUID)om.insert(""String_Node_Str"",testObject2);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",4l);
  om.update(""String_Node_Str"",key2,updateObj);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",5l);
  om.update(""String_Node_Str"",key2,updateObj);
  Thread.sleep(3000);
  UpdateProcessor up=new UpdateProcessor(om);
  assertEquals(1,up.getUpdatesThatHappenedWithinTimeframe(900000L,1).size());
  assertEquals(2,up.getUpdatesThatHappenedWithinTimeframe(900000L,2).size());
}","@Test public void testUpdateRowLimit() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  String keyspace=definition.getName();
  assertNotNull(definition);
  cm.buildKeyspace(definition,false);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  om.truncateTables();
  Map<String,Object> testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",Long.valueOf(100));
  testObject.put(""String_Node_Str"",Integer.valueOf(101));
  testObject.put(""String_Node_Str"",Long.valueOf(102));
  testObject.put(""String_Node_Str"",Integer.valueOf(103));
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> testObject2=Maps.newTreeMap();
  testObject2.put(""String_Node_Str"",Long.valueOf(200));
  testObject2.put(""String_Node_Str"",Integer.valueOf(201));
  testObject2.put(""String_Node_Str"",Long.valueOf(202));
  testObject2.put(""String_Node_Str"",Integer.valueOf(203));
  testObject2.put(""String_Node_Str"",""String_Node_Str"");
  testObject2.put(""String_Node_Str"",""String_Node_Str"");
  testObject2.put(""String_Node_Str"",""String_Node_Str"");
  UUID key=(UUID)om.insert(""String_Node_Str"",testObject);
  Map<String,Object> updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",1l);
  om.update(""String_Node_Str"",key,updateObj);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",2l);
  om.update(""String_Node_Str"",key,updateObj);
  UUID key2=(UUID)om.insert(""String_Node_Str"",testObject2);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",4l);
  om.update(""String_Node_Str"",key2,updateObj);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",5l);
  om.update(""String_Node_Str"",key2,updateObj);
  Thread.sleep(3000);
  UpdateProcessor up=new UpdateProcessor(om);
  assertEquals(1,up.getUpdatesThatHappenedWithinTimeframe(900000L,1).size());
  assertEquals(2,up.getUpdatesThatHappenedWithinTimeframe(900000L,2).size());
}",0.9488162344983088
17394,"public List<CQLStatement> runMigration(CKeyspaceDefinition newKeyspaceDefinition,boolean executeCql) throws CObjectMigrationException {
  List<CQLStatement> ret=Lists.newArrayList();
  try {
    CKeyspaceDefinition oldKeyspaceDefinition=hydrateLatestKeyspaceDefinitionFromCassandra(newKeyspaceDefinition);
    ObjectMapper om=getObjectMapper(newKeyspaceDefinition);
    om.runMigration(oldKeyspaceDefinition,newKeyspaceDefinition,executeCql);
    if (executeCql) {
      addKeyspaceDefinitionToCassandra(newKeyspaceDefinition);
      om.setKeyspaceDefinition(newKeyspaceDefinition);
    }
  }
 catch (  Exception e) {
    throw new CObjectMigrationException(e);
  }
  return ret;
}","public List<CQLStatement> runMigration(CKeyspaceDefinition newKeyspaceDefinition,boolean executeCql) throws CObjectMigrationException {
  List<CQLStatement> ret=Lists.newArrayList();
  try {
    CKeyspaceDefinition oldKeyspaceDefinition=hydrateLatestKeyspaceDefinitionFromCassandra(newKeyspaceDefinition);
    ObjectMapper om=getObjectMapper(newKeyspaceDefinition);
    boolean oldExecuteAsync=om.getExecuteAsync();
    om.runMigration(oldKeyspaceDefinition,newKeyspaceDefinition,executeCql);
    if (executeCql) {
      addKeyspaceDefinitionToCassandra(newKeyspaceDefinition);
      om.setKeyspaceDefinition(newKeyspaceDefinition);
    }
    om.setExecuteAsync(oldExecuteAsync);
  }
 catch (  Exception e) {
    throw new CObjectMigrationException(e);
  }
  return ret;
}",0.7226428079834825
17395,"protected static CQLStatementIterator makeCQLforTruncate(String keyspace,CDefinition def){
  List<CQLStatement> ret=Lists.newArrayList();
  ret.add(makeTableDrop(keyspace,def.getName()));
  if (def.getIndexes() != null) {
    for (    CIndex i : def.getIndexes().values()) {
      ret.add(makeTableTruncate(keyspace,makeTableName(def,i)));
    }
  }
  return new BoundedCQLStatementIterator(ret);
}","protected static CQLStatementIterator makeCQLforTruncate(String keyspace,CDefinition def){
  List<CQLStatement> ret=Lists.newArrayList();
  ret.add(makeTableTruncate(keyspace,def.getName()));
  if (def.getIndexes() != null) {
    for (    CIndex i : def.getIndexes().values()) {
      ret.add(makeTableTruncate(keyspace,makeTableName(def,i)));
    }
  }
  return new BoundedCQLStatementIterator(ret);
}",0.985
17396,"public static CQLStatementIterator makeCQLforInsertKeyspaceDefinition(@NotNull String keyspace,@NotNull String name,@NotNull String keyspaceDefinition,@NotNull UUID id) throws CQLGenerationException {
  ArrayList<CQLStatement> ret=Lists.newArrayList();
  ret.add(CQLStatement.make(String.format(TEMPLATE_INSERT_KEYSPACE,keyspace,name),Arrays.asList(name,keyspaceDefinition).toArray()));
  return new BoundedCQLStatementIterator(ret);
}","public static CQLStatementIterator makeCQLforInsertKeyspaceDefinition(@NotNull String keyspace,@NotNull String name,@NotNull String keyspaceDefinition,@NotNull UUID id) throws CQLGenerationException {
  ArrayList<CQLStatement> ret=Lists.newArrayList();
  ret.add(CQLStatement.make(String.format(TEMPLATE_INSERT_KEYSPACE,keyspace),Arrays.asList(id,name,keyspaceDefinition).toArray()));
  return new BoundedCQLStatementIterator(ret);
}",0.9539170506912442
17397,"private Object getFieldValue(Row row,CField field){
  Object fieldValue;
switch (field.getType()) {
case ASCII:
case VARCHAR:
case TEXT:
    fieldValue=row.getString(field.getName());
  break;
case BIGINT:
case COUNTER:
fieldValue=row.getLong(field.getName());
break;
case BLOB:
fieldValue=row.getBytes(field.getName());
break;
case BOOLEAN:
fieldValue=row.getBool(field.getName());
break;
case DECIMAL:
fieldValue=row.getDecimal(field.getName());
break;
case DOUBLE:
fieldValue=row.getDouble(field.getName());
break;
case FLOAT:
fieldValue=row.getFloat(field.getName());
break;
case INT:
fieldValue=row.getInt(field.getName());
break;
case TIMESTAMP:
fieldValue=row.getDate(field.getName());
break;
case UUID:
case TIMEUUID:
fieldValue=row.getUUID(field.getName());
break;
case VARINT:
fieldValue=row.getVarint(field.getName());
break;
default :
fieldValue=null;
}
return (fieldValue == null ? null : fieldValue);
}","private Object getFieldValue(Row row,CField field){
  if (row.isNull(field.getName())) {
    return null;
  }
  Object fieldValue;
switch (field.getType()) {
case ASCII:
case VARCHAR:
case TEXT:
    fieldValue=row.getString(field.getName());
  break;
case BIGINT:
case COUNTER:
fieldValue=row.getLong(field.getName());
break;
case BLOB:
fieldValue=row.getBytes(field.getName());
break;
case BOOLEAN:
fieldValue=row.getBool(field.getName());
break;
case DECIMAL:
fieldValue=row.getDecimal(field.getName());
break;
case DOUBLE:
fieldValue=row.getDouble(field.getName());
break;
case FLOAT:
fieldValue=row.getFloat(field.getName());
break;
case INT:
fieldValue=row.getInt(field.getName());
break;
case TIMESTAMP:
fieldValue=row.getDate(field.getName());
break;
case UUID:
case TIMEUUID:
fieldValue=row.getUUID(field.getName());
break;
case VARINT:
fieldValue=row.getVarint(field.getName());
break;
default :
fieldValue=null;
}
return (fieldValue == null ? null : fieldValue);
}",0.9693121693121692
17398,"public static Map<String,ArrayList> makeFieldAndValueList(CDefinition def,Map<String,Object> data){
  ArrayList fieldList=new ArrayList<String>(def.getFields().size());
  ArrayList valueList=new ArrayList<Object>(def.getFields().size());
  for (  CField f : def.getFields().values()) {
    if (data.containsKey(f.getName())) {
      fieldList.add(f.getName());
      valueList.add(data.get(f.getName()));
    }
  }
  Map<String,ArrayList> ret=Maps.newHashMap();
  ret.put(""String_Node_Str"",fieldList);
  ret.put(""String_Node_Str"",valueList);
  return ret;
}","public static Map<String,ArrayList> makeFieldAndValueList(CDefinition def,Map<String,Object> data) throws CQLGenerationException {
  ArrayList fieldList=Lists.newArrayList();
  ArrayList valueList=Lists.newArrayList();
  for (  CField f : def.getFields().values()) {
    if (data.containsKey(f.getName())) {
      fieldList.add(f.getName());
      valueList.add(data.get(f.getName()));
    }
  }
  Map<String,ArrayList> ret=Maps.newHashMap();
  ret.put(""String_Node_Str"",fieldList);
  ret.put(""String_Node_Str"",valueList);
  return ret;
}",0.867579908675799
17399,"@Test public void testNullIndexValues() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  CKeyspaceDefinition definition=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,this.getClass().getClassLoader(),""String_Node_Str"");
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  logger.debug(""String_Node_Str"",definition.getName());
  ObjectMapper om=cm.getObjectMapper(definition.getName());
  om.setLogCql(true);
  List<Map<String,Object>> values=JsonUtil.rhombusMapFromResource(this.getClass().getClassLoader(),""String_Node_Str"");
  Map<String,Object> object=values.get(0);
  Long createdAt=(Long)(object.get(""String_Node_Str""));
  logger.debug(""String_Node_Str"",createdAt);
  UUID id=om.insert(""String_Node_Str"",JsonUtil.rhombusMapFromJsonMap(object,definition.getDefinitions().get(""String_Node_Str"")),createdAt);
  Map<String,Object> result=om.getByKey(""String_Node_Str"",id);
  assertEquals(object.get(""String_Node_Str""),result.get(""String_Node_Str""));
  assertEquals(object.get(""String_Node_Str""),result.get(""String_Node_Str""));
  for (  String key : result.keySet()) {
    logger.debug(""String_Node_Str"",key,result.get(key),object.get(key));
  }
}","@Test public void testNullIndexValues() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  CKeyspaceDefinition definition=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,this.getClass().getClassLoader(),""String_Node_Str"");
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  logger.debug(""String_Node_Str"",definition.getName());
  ObjectMapper om=cm.getObjectMapper(definition.getName());
  om.setLogCql(true);
  List<Map<String,Object>> values=JsonUtil.rhombusMapFromResource(this.getClass().getClassLoader(),""String_Node_Str"");
  Map<String,Object> object=values.get(0);
  Long createdAt=(Long)(object.get(""String_Node_Str""));
  logger.debug(""String_Node_Str"",createdAt);
  UUID id=om.insert(""String_Node_Str"",JsonUtil.rhombusMapFromJsonMap(object,definition.getDefinitions().get(""String_Node_Str"")),createdAt);
  Map<String,Object> result=om.getByKey(""String_Node_Str"",id);
  assertEquals(object.get(""String_Node_Str""),result.get(""String_Node_Str""));
  assertEquals(object.get(""String_Node_Str""),result.get(""String_Node_Str""));
  for (  String key : result.keySet()) {
    if (!key.equals(""String_Node_Str"")) {
      if (key.equals(""String_Node_Str"") || key.equals(""String_Node_Str"")) {
        assertEquals(object.get(key).toString(),result.get(key).toString());
      }
 else       if (key.equals(""String_Node_Str"")) {
        assertEquals(object.get(key),((Date)result.get(key)).getTime());
      }
 else {
        assertEquals(object.get(key),result.get(key));
      }
    }
    logger.debug(""String_Node_Str"",key,result.get(key),object.get(key));
  }
}",0.8241451500348919
17400,"/** 
 * Build the tables contained in the keyspace definition. This method assumes that its keyspace exists and does not contain any tables.
 */
public void buildKeyspace(Boolean forceRebuild){
  cqlExecutor.clearStatementCache();
  CQLStatement cql=CObjectCQLGenerator.makeCQLforShardIndexTableCreate();
  try {
    cqlExecutor.executeSync(cql);
  }
 catch (  Exception e) {
    if (forceRebuild) {
      CQLStatement dropCql=CObjectCQLGenerator.makeCQLforShardIndexTableDrop();
      logger.debug(""String_Node_Str"",dropCql);
      cqlExecutor.executeSync(dropCql);
      cqlExecutor.executeSync(cql);
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
  cql=CObjectCQLGenerator.makeCQLforIndexUpdateTableCreate();
  try {
    cqlExecutor.executeSync(cql);
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"");
  }
  cql=cqlGenerator.makeCQLforCreateKeyspaceDefinitionsTable();
  try {
    cqlExecutor.executeSync(cql);
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"");
  }
  if (keyspaceDefinition.getDefinitions() != null) {
    for (    CDefinition definition : keyspaceDefinition.getDefinitions().values()) {
      CQLStatementIterator statementIterator=cqlGenerator.makeCQLforCreate(definition.getName());
      CQLStatementIterator dropStatementIterator=cqlGenerator.makeCQLforDrop(definition.getName());
      while (statementIterator.hasNext()) {
        cql=statementIterator.next();
        CQLStatement dropCql=dropStatementIterator.next();
        try {
          cqlExecutor.executeSync(cql);
        }
 catch (        AlreadyExistsException e) {
          if (forceRebuild) {
            logger.debug(""String_Node_Str"");
            cqlExecutor.executeSync(dropCql);
            cqlExecutor.executeSync(cql);
          }
 else {
            logger.warn(""String_Node_Str"");
          }
        }
      }
    }
  }
  try {
    com.fasterxml.jackson.databind.ObjectMapper om=new com.fasterxml.jackson.databind.ObjectMapper();
    String keyspaceDefinitionAsJson=om.writeValueAsString(keyspaceDefinition);
    CQLStatementIterator it=cqlGenerator.makeCQLforInsertKeyspaceDefinition(keyspaceDefinitionAsJson);
    executeStatements(it);
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"");
  }
}","/** 
 * Build the tables contained in the keyspace definition. This method assumes that its keyspace exists and does not contain any tables.
 */
public void buildKeyspace(Boolean forceRebuild){
  cqlExecutor.clearStatementCache();
  CQLStatement cql=CObjectCQLGenerator.makeCQLforShardIndexTableCreate();
  try {
    cqlExecutor.executeSync(cql);
  }
 catch (  Exception e) {
    if (forceRebuild) {
      CQLStatement dropCql=cqlGenerator.makeCQLforShardIndexTableDrop();
      logger.debug(""String_Node_Str"",dropCql);
      cqlExecutor.executeSync(dropCql);
      cqlExecutor.executeSync(cql);
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
  cql=CObjectCQLGenerator.makeCQLforIndexUpdateTableCreate();
  try {
    cqlExecutor.executeSync(cql);
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"");
  }
  cql=cqlGenerator.makeCQLforCreateKeyspaceDefinitionsTable();
  try {
    cqlExecutor.executeSync(cql);
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"");
  }
  if (keyspaceDefinition.getDefinitions() != null) {
    for (    CDefinition definition : keyspaceDefinition.getDefinitions().values()) {
      CQLStatementIterator statementIterator=cqlGenerator.makeCQLforCreate(definition.getName());
      CQLStatementIterator dropStatementIterator=cqlGenerator.makeCQLforDrop(definition.getName());
      while (statementIterator.hasNext()) {
        cql=statementIterator.next();
        CQLStatement dropCql=dropStatementIterator.next();
        try {
          cqlExecutor.executeSync(cql);
        }
 catch (        AlreadyExistsException e) {
          if (forceRebuild) {
            logger.debug(""String_Node_Str"");
            cqlExecutor.executeSync(dropCql);
            cqlExecutor.executeSync(cql);
          }
 else {
            logger.warn(""String_Node_Str"");
          }
        }
      }
    }
  }
  try {
    com.fasterxml.jackson.databind.ObjectMapper om=new com.fasterxml.jackson.databind.ObjectMapper();
    String keyspaceDefinitionAsJson=om.writeValueAsString(keyspaceDefinition);
    CQLStatementIterator it=cqlGenerator.makeCQLforInsertKeyspaceDefinition(keyspaceDefinitionAsJson);
    executeStatements(it);
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"");
  }
}",0.4023064981148813
17401,"public boolean runMigration(ObjectMapper om,CKeyspaceDefinition newKeyspaceDefinition,boolean printOnly) throws CObjectMigrationException {
  if (printOnly) {
    List<CQLStatement> torun=om.runMigration(newKeyspaceDefinition,true);
    for (    CQLStatement c : torun) {
      System.out.println(c.getQuery());
    }
  }
 else {
    om.runMigration(newKeyspaceDefinition,true);
  }
  return true;
}","public boolean runMigration(ObjectMapper om,CKeyspaceDefinition newKeyspaceDefinition,boolean printOnly) throws CObjectMigrationException {
  if (printOnly) {
    List<CQLStatement> torun=om.runMigration(newKeyspaceDefinition,false);
    for (    CQLStatement c : torun) {
      System.out.println(c.getQuery());
    }
  }
 else {
    om.runMigration(newKeyspaceDefinition,true);
  }
  return true;
}",0.9912390488110138
17402,"/** 
 * @return String of single CQL statement required to create the Shard Index Table
 */
public static CQLStatement makeCQLforShardIndexTableDrop(){
  return CQLStatement.make(String.format(TEMPLATE_DROP,CObjectShardList.SHARD_INDEX_TABLE_NAME));
}","/** 
 * @return String of single CQL statement required to create the Shard Index Table
 */
public CQLStatement makeCQLforShardIndexTableDrop(){
  return CQLStatement.make(String.format(TEMPLATE_DROP,this.keyspace,CObjectShardList.SHARD_INDEX_TABLE_NAME));
}",0.9587426326129664
17403,"protected static CQLStatementIterator makeCQLforDelete(String keyspace,CDefinition def,UUID key,Map<String,Object> data,Long timestamp){
  if (timestamp == null) {
    timestamp=Long.valueOf(System.currentTimeMillis());
  }
  List<CQLStatement> ret=Lists.newArrayList();
  ret.add(makeCQLforDeleteUUIDFromStaticTable(keyspace,def,key,timestamp));
  for (  CIndex i : def.getIndexes().values()) {
    ret.add(makeCQLforDeleteUUIDFromIndex(keyspace,def,i,key,i.getIndexKeyAndValues(data),timestamp));
  }
  return new BoundedCQLStatementIterator(ret);
}","protected static CQLStatementIterator makeCQLforDelete(String keyspace,CDefinition def,UUID key,Map<String,Object> data,Long timestamp){
  if (timestamp == null) {
    timestamp=Long.valueOf(System.currentTimeMillis());
  }
  List<CQLStatement> ret=Lists.newArrayList();
  ret.add(makeCQLforDeleteUUIDFromStaticTable(keyspace,def,key,timestamp));
  for (  CIndex i : def.getIndexes().values()) {
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(i.getIndexKeyAndValues(data))) {
        continue;
      }
    }
    ret.add(makeCQLforDeleteUUIDFromIndex(keyspace,def,i,key,i.getIndexKeyAndValues(data),timestamp));
  }
  return new BoundedCQLStatementIterator(ret);
}",0.8858520900321544
17404,"@Test public void testDelete() throws Exception {
  ConnectionManager cm=getConnectionManager();
  CKeyspaceDefinition definition=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,this.getClass().getClassLoader(),""String_Node_Str"");
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper(definition.getName());
  Map<String,Object> testObject=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(0),definition.getDefinitions().get(""String_Node_Str""));
  UUID key=om.insert(""String_Node_Str"",testObject);
  Map<String,Object> dbObject=om.getByKey(""String_Node_Str"",key);
  for (  String dbKey : dbObject.keySet()) {
    if (!dbKey.equals(""String_Node_Str"")) {
      assertEquals(testObject.get(dbKey),dbObject.get(dbKey));
    }
  }
  Criteria criteria=TestHelpers.getTestCriteria(0);
  long foreignKey=((Long)criteria.getIndexKeys().get(""String_Node_Str"")).longValue();
  criteria.getIndexKeys().put(""String_Node_Str"",foreignKey);
  List<Map<String,Object>> dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,dbObjects.size());
  for (  Map<String,Object> result : dbObjects) {
    assertEquals(foreignKey,result.get(""String_Node_Str""));
  }
  om.delete(""String_Node_Str"",key);
  assertEquals(null,om.getByKey(""String_Node_Str"",key));
  assertEquals(0,om.list(""String_Node_Str"",criteria).size());
  testObject.put(""String_Node_Str"",null);
  UUID key3=om.insert(""String_Node_Str"",testObject);
  dbObject=om.getByKey(""String_Node_Str"",key3);
  for (  String dbKey : dbObject.keySet()) {
    if (!dbKey.equals(""String_Node_Str"")) {
      assertEquals(testObject.get(dbKey),dbObject.get(dbKey));
    }
  }
}","@Test public void testDelete() throws Exception {
  ConnectionManager cm=getConnectionManager();
  CKeyspaceDefinition definition=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,this.getClass().getClassLoader(),""String_Node_Str"");
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper(definition.getName());
  Map<String,Object> testObject=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(0),definition.getDefinitions().get(""String_Node_Str""));
  UUID key=om.insert(""String_Node_Str"",testObject);
  Map<String,Object> dbObject=om.getByKey(""String_Node_Str"",key);
  for (  String dbKey : dbObject.keySet()) {
    if (!dbKey.equals(""String_Node_Str"")) {
      assertEquals(testObject.get(dbKey),dbObject.get(dbKey));
    }
  }
  Criteria criteria=TestHelpers.getTestCriteria(0);
  long foreignKey=((Long)criteria.getIndexKeys().get(""String_Node_Str"")).longValue();
  criteria.getIndexKeys().put(""String_Node_Str"",foreignKey);
  List<Map<String,Object>> dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,dbObjects.size());
  for (  Map<String,Object> result : dbObjects) {
    assertEquals(foreignKey,result.get(""String_Node_Str""));
  }
  om.delete(""String_Node_Str"",key);
  assertEquals(null,om.getByKey(""String_Node_Str"",key));
  assertEquals(0,om.list(""String_Node_Str"",criteria).size());
  testObject.put(""String_Node_Str"",null);
  UUID key3=om.insert(""String_Node_Str"",testObject);
  dbObject=om.getByKey(""String_Node_Str"",key3);
  for (  String dbKey : dbObject.keySet()) {
    if (!dbKey.equals(""String_Node_Str"")) {
      assertEquals(testObject.get(dbKey),dbObject.get(dbKey));
    }
  }
  om.delete(""String_Node_Str"",key3);
  assertEquals(null,om.getByKey(""String_Node_Str"",key3));
}",0.9730190286850326
17405,"public static String detailedMapToString(Map map){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  for (  Object key : map.keySet()) {
    sb.append(""String_Node_Str"");
    sb.append(String.valueOf(key));
    sb.append(""String_Node_Str"");
    Object value=map.get(key);
    sb.append(value.getClass().getName());
    sb.append(""String_Node_Str"");
    sb.append(String.valueOf(value));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","public static String detailedMapToString(Map map){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  for (  Object key : map.keySet()) {
    sb.append(""String_Node_Str"");
    sb.append(String.valueOf(key));
    sb.append(""String_Node_Str"");
    Object value=map.get(key);
    sb.append((value == null) ? ""String_Node_Str"" : value.getClass().getName());
    sb.append(""String_Node_Str"");
    sb.append((value == null) ? ""String_Node_Str"" : String.valueOf(value));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9301470588235294
17406,"public static String detailedListToString(List list){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  for (  Object value : list) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(value.getClass().getName());
    sb.append(""String_Node_Str"");
    sb.append(String.valueOf(value));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","public static String detailedListToString(List list){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  for (  Object value : list) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append((value == null) ? ""String_Node_Str"" : value.getClass().getName());
    sb.append(""String_Node_Str"");
    sb.append((value == null) ? ""String_Node_Str"" : String.valueOf(value));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.919831223628692
17407,"public static Map<String,ArrayList> makeFieldAndValueList(CDefinition def,Map<String,Object> data){
  ArrayList fieldList=new ArrayList<String>(def.getFields().size());
  ArrayList valueList=new ArrayList<Object>(def.getFields().size());
  for (  CField f : def.getFields().values()) {
    if (data.get(f.getName()) != null) {
      fieldList.add(f.getName());
      valueList.add(data.get(f.getName()));
    }
  }
  Map<String,ArrayList> ret=Maps.newHashMap();
  ret.put(""String_Node_Str"",fieldList);
  ret.put(""String_Node_Str"",valueList);
  return ret;
}","public static Map<String,ArrayList> makeFieldAndValueList(CDefinition def,Map<String,Object> data){
  ArrayList fieldList=new ArrayList<String>(def.getFields().size());
  ArrayList valueList=new ArrayList<Object>(def.getFields().size());
  for (  CField f : def.getFields().values()) {
    if (data.containsKey(f.getName())) {
      fieldList.add(f.getName());
      valueList.add(data.get(f.getName()));
    }
  }
  Map<String,ArrayList> ret=Maps.newHashMap();
  ret.put(""String_Node_Str"",fieldList);
  ret.put(""String_Node_Str"",valueList);
  return ret;
}",0.9802513464991024
17408,"public static CQLStatementIterator makeCQLforUpdate(String keyspace,CDefinition def,UUID key,Map<String,Object> oldValues,Map<String,Object> newValues) throws CQLGenerationException {
  List<CQLStatement> ret=Lists.newArrayList();
  List<CIndex> effectedIndexes=getEffectedIndexes(def,oldValues,newValues);
  List<CIndex> uneffectedIndexes=getUneffectedIndexes(def,oldValues,newValues);
  for (  CIndex i : effectedIndexes) {
    Map<String,Object> compositeKeyToDelete=i.getIndexKeyAndValues(oldValues);
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(compositeKeyToDelete)) {
        continue;
      }
    }
    ret.add(makeCQLforDeleteUUIDFromIndex(keyspace,def,i,key,compositeKeyToDelete,null));
  }
  Map<String,Object> completeValues=Maps.newHashMap(oldValues);
  for (  String k : newValues.keySet()) {
    completeValues.put(k,newValues.get(k));
  }
  Map<String,ArrayList> fieldsAndValues=makeFieldAndValueList(def,completeValues);
  Map<String,Object> newValuesAndIndexValues=Maps.newHashMap(newValues);
  for (  String s : def.getRequiredFields()) {
    if (newValuesAndIndexValues.get(s) == null) {
      newValuesAndIndexValues.put(s,completeValues.get(s));
    }
  }
  Map<String,ArrayList> fieldsAndValuesForNewValuesAndIndexValues=makeFieldAndValueList(def,newValuesAndIndexValues);
  for (  CIndex i : effectedIndexes) {
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(i.getIndexKeyAndValues(completeValues))) {
        continue;
      }
    }
    addCQLStatmentsForIndexInsert(keyspace,true,ret,def,completeValues,i,key,fieldsAndValues,null,null);
  }
  for (  CIndex i : uneffectedIndexes) {
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(i.getIndexKeyAndValues(newValuesAndIndexValues))) {
        continue;
      }
    }
    addCQLStatmentsForIndexInsert(keyspace,false,ret,def,newValuesAndIndexValues,i,key,fieldsAndValuesForNewValuesAndIndexValues,null,null);
  }
  Map<String,ArrayList> fieldsAndValuesOnlyForChanges=makeFieldAndValueList(def,newValues);
  ret.add(makeInsertStatementStatic(keyspace,makeTableName(def,null),(List<String>)fieldsAndValuesOnlyForChanges.get(""String_Node_Str"").clone(),(List<Object>)fieldsAndValuesOnlyForChanges.get(""String_Node_Str"").clone(),key,null,null));
  ret.add(makeInsertUpdateIndexStatement(keyspace,def,key,def.makeIndexValues(completeValues)));
  return new BoundedCQLStatementIterator(ret);
}","public static CQLStatementIterator makeCQLforUpdate(String keyspace,CDefinition def,UUID key,Map<String,Object> oldValues,Map<String,Object> newValues) throws CQLGenerationException {
  List<CQLStatement> ret=Lists.newArrayList();
  List<CIndex> effectedIndexes=getEffectedIndexes(def,oldValues,newValues);
  List<CIndex> uneffectedIndexes=getUneffectedIndexes(def,oldValues,newValues);
  for (  CIndex i : effectedIndexes) {
    Map<String,Object> compositeKeyToDelete=i.getIndexKeyAndValues(oldValues);
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(compositeKeyToDelete)) {
        continue;
      }
    }
    ret.add(makeCQLforDeleteUUIDFromIndex(keyspace,def,i,key,compositeKeyToDelete,null));
  }
  Map<String,Object> completeValues=Maps.newHashMap(oldValues);
  for (  String k : newValues.keySet()) {
    completeValues.put(k,newValues.get(k));
  }
  Map<String,ArrayList> fieldsAndValues=makeFieldAndValueList(def,completeValues);
  Map<String,Object> newValuesAndIndexValues=Maps.newHashMap(newValues);
  for (  String s : def.getRequiredFields()) {
    if (!newValuesAndIndexValues.containsKey(s)) {
      newValuesAndIndexValues.put(s,completeValues.get(s));
    }
  }
  Map<String,ArrayList> fieldsAndValuesForNewValuesAndIndexValues=makeFieldAndValueList(def,newValuesAndIndexValues);
  for (  CIndex i : effectedIndexes) {
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(i.getIndexKeyAndValues(completeValues))) {
        continue;
      }
    }
    addCQLStatmentsForIndexInsert(keyspace,true,ret,def,completeValues,i,key,fieldsAndValues,null,null);
  }
  for (  CIndex i : uneffectedIndexes) {
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(i.getIndexKeyAndValues(newValuesAndIndexValues))) {
        continue;
      }
    }
    addCQLStatmentsForIndexInsert(keyspace,false,ret,def,newValuesAndIndexValues,i,key,fieldsAndValuesForNewValuesAndIndexValues,null,null);
  }
  Map<String,ArrayList> fieldsAndValuesOnlyForChanges=makeFieldAndValueList(def,newValues);
  ret.add(makeInsertStatementStatic(keyspace,makeTableName(def,null),(List<String>)fieldsAndValuesOnlyForChanges.get(""String_Node_Str"").clone(),(List<Object>)fieldsAndValuesOnlyForChanges.get(""String_Node_Str"").clone(),key,null,null));
  ret.add(makeInsertUpdateIndexStatement(keyspace,def,key,def.makeIndexValues(completeValues)));
  return new BoundedCQLStatementIterator(ret);
}",0.9940780069430264
17409,"public static SortedMap<String,Object> rhombusMapFromJsonMap(Map<String,Object> jsonMap,CDefinition definition){
  SortedMap<String,Object> rhombusMap=Maps.newTreeMap();
  for (  CField field : definition.getFields().values()) {
    Object jsonValue=jsonMap.get(field.getName());
    if (jsonValue != null) {
      rhombusMap.put(field.getName(),typedObjectFromValueAndField(jsonValue,field));
    }
  }
  return rhombusMap;
}","public static SortedMap<String,Object> rhombusMapFromJsonMap(Map<String,Object> jsonMap,CDefinition definition){
  SortedMap<String,Object> rhombusMap=Maps.newTreeMap();
  for (  CField field : definition.getFields().values()) {
    if (jsonMap.containsKey(field.getName())) {
      rhombusMap.put(field.getName(),typedObjectFromValueAndField(jsonMap.get(field.getName()),field));
    }
  }
  return rhombusMap;
}",0.6960667461263409
17410,"public boolean areValuesAssociatedWithIndex(Map<String,Object> values){
  for (  String key : compositeKeyList) {
    if (values.get(key) != null) {
      return true;
    }
  }
  return false;
}","public boolean areValuesAssociatedWithIndex(Map<String,Object> values){
  for (  String key : compositeKeyList) {
    if (values.containsKey(key)) {
      return true;
    }
  }
  return false;
}",0.9487179487179488
17411,"public static CQLStatementIterator makeCQLforUpdate(String keyspace,CDefinition def,UUID key,Map<String,Object> oldValues,Map<String,Object> newValues) throws CQLGenerationException {
  List<CQLStatement> ret=Lists.newArrayList();
  List<CIndex> effectedIndexes=getEffectedIndexes(def,oldValues,newValues);
  List<CIndex> uneffectedIndexes=getUneffectedIndexes(def,oldValues,newValues);
  for (  CIndex i : effectedIndexes) {
    ret.add(makeCQLforDeleteUUIDFromIndex(keyspace,def,i,key,i.getIndexKeyAndValues(oldValues),null));
  }
  Map<String,Object> completeValues=Maps.newHashMap(oldValues);
  for (  String k : newValues.keySet()) {
    completeValues.put(k,newValues.get(k));
  }
  Map<String,ArrayList> fieldsAndValues=makeFieldAndValueList(def,completeValues);
  Map<String,Object> newValuesAndIndexValues=Maps.newHashMap(newValues);
  for (  String s : def.getRequiredFields()) {
    if (newValuesAndIndexValues.get(s) == null) {
      newValuesAndIndexValues.put(s,completeValues.get(s));
    }
  }
  Map<String,ArrayList> fieldsAndValuesForNewValuesAndIndexValues=makeFieldAndValueList(def,newValuesAndIndexValues);
  for (  CIndex i : effectedIndexes) {
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(i.getIndexKeyAndValues(completeValues))) {
        continue;
      }
    }
    addCQLStatmentsForIndexInsert(keyspace,true,ret,def,completeValues,i,key,fieldsAndValues,null,null);
  }
  for (  CIndex i : uneffectedIndexes) {
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(i.getIndexKeyAndValues(newValuesAndIndexValues))) {
        continue;
      }
    }
    addCQLStatmentsForIndexInsert(keyspace,false,ret,def,newValuesAndIndexValues,i,key,fieldsAndValuesForNewValuesAndIndexValues,null,null);
  }
  Map<String,ArrayList> fieldsAndValuesOnlyForChanges=makeFieldAndValueList(def,newValues);
  ret.add(makeInsertStatementStatic(keyspace,makeTableName(def,null),(List<String>)fieldsAndValuesOnlyForChanges.get(""String_Node_Str"").clone(),(List<Object>)fieldsAndValuesOnlyForChanges.get(""String_Node_Str"").clone(),key,null,null));
  ret.add(makeInsertUpdateIndexStatement(keyspace,def,key,def.makeIndexValues(completeValues)));
  return new BoundedCQLStatementIterator(ret);
}","public static CQLStatementIterator makeCQLforUpdate(String keyspace,CDefinition def,UUID key,Map<String,Object> oldValues,Map<String,Object> newValues) throws CQLGenerationException {
  List<CQLStatement> ret=Lists.newArrayList();
  List<CIndex> effectedIndexes=getEffectedIndexes(def,oldValues,newValues);
  List<CIndex> uneffectedIndexes=getUneffectedIndexes(def,oldValues,newValues);
  for (  CIndex i : effectedIndexes) {
    Map<String,Object> compositeKeyToDelete=i.getIndexKeyAndValues(oldValues);
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(compositeKeyToDelete)) {
        continue;
      }
    }
    ret.add(makeCQLforDeleteUUIDFromIndex(keyspace,def,i,key,compositeKeyToDelete,null));
  }
  Map<String,Object> completeValues=Maps.newHashMap(oldValues);
  for (  String k : newValues.keySet()) {
    completeValues.put(k,newValues.get(k));
  }
  Map<String,ArrayList> fieldsAndValues=makeFieldAndValueList(def,completeValues);
  Map<String,Object> newValuesAndIndexValues=Maps.newHashMap(newValues);
  for (  String s : def.getRequiredFields()) {
    if (newValuesAndIndexValues.get(s) == null) {
      newValuesAndIndexValues.put(s,completeValues.get(s));
    }
  }
  Map<String,ArrayList> fieldsAndValuesForNewValuesAndIndexValues=makeFieldAndValueList(def,newValuesAndIndexValues);
  for (  CIndex i : effectedIndexes) {
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(i.getIndexKeyAndValues(completeValues))) {
        continue;
      }
    }
    addCQLStatmentsForIndexInsert(keyspace,true,ret,def,completeValues,i,key,fieldsAndValues,null,null);
  }
  for (  CIndex i : uneffectedIndexes) {
    if (def.isAllowNullPrimaryKeyInserts()) {
      if (!i.validateIndexKeys(i.getIndexKeyAndValues(newValuesAndIndexValues))) {
        continue;
      }
    }
    addCQLStatmentsForIndexInsert(keyspace,false,ret,def,newValuesAndIndexValues,i,key,fieldsAndValuesForNewValuesAndIndexValues,null,null);
  }
  Map<String,ArrayList> fieldsAndValuesOnlyForChanges=makeFieldAndValueList(def,newValues);
  ret.add(makeInsertStatementStatic(keyspace,makeTableName(def,null),(List<String>)fieldsAndValuesOnlyForChanges.get(""String_Node_Str"").clone(),(List<Object>)fieldsAndValuesOnlyForChanges.get(""String_Node_Str"").clone(),key,null,null));
  ret.add(makeInsertUpdateIndexStatement(keyspace,def,key,def.makeIndexValues(completeValues)));
  return new BoundedCQLStatementIterator(ret);
}",0.944633730834753
17412,"@Test public void testSendingNullIndexValue() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  CKeyspaceDefinition definition=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,this.getClass().getClassLoader(),""String_Node_Str"");
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  logger.debug(""String_Node_Str"",definition.getName());
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  om.setLogCql(true);
  List<Map<String,Object>> values=JsonUtil.rhombusMapFromResource(this.getClass().getClassLoader(),""String_Node_Str"");
  Map<String,Object> object=values.get(0);
  Long createdAt=(Long)(object.get(""String_Node_Str""));
  logger.debug(""String_Node_Str"",createdAt);
  UUID id=om.insert(""String_Node_Str"",JsonUtil.rhombusMapFromJsonMap(object,definition.getDefinitions().get(""String_Node_Str"")),createdAt);
  object.put(""String_Node_Str"",UUID.fromString(""String_Node_Str""));
  om.update(""String_Node_Str"",id,object);
  Map<String,Object> result=om.getByKey(""String_Node_Str"",id);
  assertNotNull(result);
  assertEquals(null,result.get(""String_Node_Str""));
}","@Test public void testSendingNullIndexValue() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  CKeyspaceDefinition definition=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,this.getClass().getClassLoader(),""String_Node_Str"");
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  logger.debug(""String_Node_Str"",definition.getName());
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  om.setLogCql(true);
  List<Map<String,Object>> values=JsonUtil.rhombusMapFromResource(this.getClass().getClassLoader(),""String_Node_Str"");
  Map<String,Object> object=values.get(0);
  Long createdAt=(Long)(object.get(""String_Node_Str""));
  logger.debug(""String_Node_Str"",createdAt);
  UUID id=om.insert(""String_Node_Str"",JsonUtil.rhombusMapFromJsonMap(object,definition.getDefinitions().get(""String_Node_Str"")),createdAt);
  object.put(""String_Node_Str"",""String_Node_Str"");
  om.update(""String_Node_Str"",id,JsonUtil.rhombusMapFromJsonMap(object,definition.getDefinitions().get(""String_Node_Str"")));
  Map<String,Object> result=om.getByKey(""String_Node_Str"",id);
  assertNotNull(result);
  assertEquals(null,result.get(""String_Node_Str""));
}",0.9115929941618016
17413,"public void executeCommand(CommandLine cl){
  super.executeCommand(cl);
  try {
    getConnectionManager().setDefaultKeyspace(keyspaceDefinition);
    String strategy=cl.getOptionValue(""String_Node_Str"");
    UpdateProcessor up=new UpdateProcessor(getConnectionManager().getObjectMapper());
    if (cl.hasOption(""String_Node_Str"")) {
      String timestr=cl.getOptionValue(""String_Node_Str"");
      long time=Long.parseLong(timestr);
      displayListResults(up.getUpdatesThatHappenedWithinTimeframe(time));
    }
    if (cl.hasOption(""String_Node_Str"")) {
      up.process();
    }
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
}","public void executeCommand(CommandLine cl){
  super.executeCommand(cl);
  try {
    getConnectionManager().setDefaultKeyspace(keyspaceDefinition);
    String strategy=cl.getOptionValue(""String_Node_Str"");
    UpdateProcessor up=new UpdateProcessor(getConnectionManager().getObjectMapper());
    boolean didwork=false;
    if (cl.hasOption(""String_Node_Str"")) {
      String timestr=cl.getOptionValue(""String_Node_Str"");
      long time=Long.parseLong(timestr);
      displayListResults(up.getUpdatesThatHappenedWithinTimeframe(time));
      didwork=true;
    }
    if (cl.hasOption(""String_Node_Str"")) {
      up.process();
      didwork=true;
    }
    if (!didwork) {
      displayHelpMessageAndExit();
    }
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
}",0.9138627187079408
17414,"public void displayListResults(List<Map<String,Object>> results){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  for (  Map<String,Object> item : results) {
    String difference=((Long)item.get(""String_Node_Str"")).toString();
    String objName=((IndexUpdateRowKey)item.get(""String_Node_Str"")).getObjectName();
    String instanceId=((IndexUpdateRowKey)item.get(""String_Node_Str"")).getInstanceId().toString();
    String newValue=(String)item.get(""String_Node_Str"");
    String oldValue=(String)item.get(""String_Node_Str"");
    System.out.println(String.format(""String_Node_Str"",difference,objName,instanceId,newValue,oldValue));
  }
}","public void displayListResults(List<Map<String,Object>> results){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  for (  Map<String,Object> item : results) {
    String difference=item.get(""String_Node_Str"").toString();
    String objName=((IndexUpdateRowKey)item.get(""String_Node_Str"")).getObjectName();
    String instanceId=((IndexUpdateRowKey)item.get(""String_Node_Str"")).getInstanceId().toString();
    String newValue=item.get(""String_Node_Str"").toString();
    String oldValue=item.get(""String_Node_Str"").toString();
    System.out.println(String.format(""String_Node_Str"",difference,objName,instanceId,newValue,oldValue));
  }
}",0.8497023809523809
17415,"@Test public void testGetUpdatesThatHappenedWithinTimeframe() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  String keyspace=definition.getName();
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  CDefinition def1=om.getKeyspaceDefinition_ONLY_FOR_TESTING().getDefinitions().get(""String_Node_Str"");
  Map<String,Object> testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",Long.valueOf(100));
  testObject.put(""String_Node_Str"",Integer.valueOf(101));
  testObject.put(""String_Node_Str"",Long.valueOf(102));
  testObject.put(""String_Node_Str"",Integer.valueOf(103));
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  UUID key=om.insert(""String_Node_Str"",testObject);
  Map<String,Object> updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",Long.valueOf(1));
  om.update(""String_Node_Str"",key,updateObj);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",Long.valueOf(2));
  om.update(""String_Node_Str"",key,updateObj);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",Long.valueOf(3));
  om.update(""String_Node_Str"",key,updateObj);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",Long.valueOf(4));
  om.update(""String_Node_Str"",key,updateObj);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",Long.valueOf(5));
  om.update(""String_Node_Str"",key,updateObj);
  Thread.sleep(2000);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",Long.valueOf(6));
  om.update(""String_Node_Str"",key,updateObj);
  Thread.sleep(2000);
  UpdateProcessor up=new UpdateProcessor(om);
  assertEquals(4,up.getUpdatesThatHappenedWithinTimeframe(500000L).size());
  assertEquals(5,up.getUpdatesThatHappenedWithinTimeframe(300000L * 1000).size());
}","@Test public void testGetUpdatesThatHappenedWithinTimeframe() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  String keyspace=definition.getName();
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  CDefinition def1=om.getKeyspaceDefinition_ONLY_FOR_TESTING().getDefinitions().get(""String_Node_Str"");
  Map<String,Object> testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",Long.valueOf(100));
  testObject.put(""String_Node_Str"",Integer.valueOf(101));
  testObject.put(""String_Node_Str"",Long.valueOf(102));
  testObject.put(""String_Node_Str"",Integer.valueOf(103));
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  UUID key=om.insert(""String_Node_Str"",testObject);
  Map<String,Object> updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",Long.valueOf(1));
  om.update(""String_Node_Str"",key,updateObj);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",Long.valueOf(2));
  om.update(""String_Node_Str"",key,updateObj);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",Long.valueOf(3));
  om.update(""String_Node_Str"",key,updateObj);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",Long.valueOf(4));
  om.update(""String_Node_Str"",key,updateObj);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",Long.valueOf(5));
  om.update(""String_Node_Str"",key,updateObj);
  Thread.sleep(2000);
  updateObj=Maps.newTreeMap();
  updateObj.put(""String_Node_Str"",Long.valueOf(6));
  om.update(""String_Node_Str"",key,updateObj);
  Thread.sleep(2000);
  UpdateProcessor up=new UpdateProcessor(om);
  assertEquals(4,up.getUpdatesThatHappenedWithinTimeframe(900000L).size());
  assertEquals(5,up.getUpdatesThatHappenedWithinTimeframe(900000L * 1000).size());
}",0.9990658570761326
17416,"public static Options makeCommandLineOptions(){
  Options ret=new Options();
  Option help=new Option(""String_Node_Str"",""String_Node_Str"");
  Option command=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option cassConfig=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option keyspaceDef=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  ret.addOption(help);
  ret.addOption(command);
  ret.addOption(cassConfig);
  ret.addOption(keyspaceDef);
  return ret;
}","public static Options makeCommandLineOptions(){
  Options ret=new Options();
  Option help=new Option(""String_Node_Str"",""String_Node_Str"");
  Option command=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option cassConfig=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option keyspaceFile=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option keyspaceResource=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  ret.addOption(help);
  ret.addOption(command);
  ret.addOption(cassConfig);
  ret.addOption(keyspaceFile);
  ret.addOption(keyspaceResource);
  return ret;
}",0.8424522083058669
17417,"public static void main(String[] args){
  CommandLineParser parser=new org.apache.commons.cli.BasicParser();
  try {
    CommandLine line=parser.parse(makeCommandLineOptions(),args);
    if (!line.hasOption(""String_Node_Str"") || !line.hasOption(""String_Node_Str"")) {
      HelpFormatter formatter=new HelpFormatter();
      formatter.printHelp(""String_Node_Str"",makeCommandLineOptions());
      System.exit(1);
    }
    String keyspaceFileName=line.getOptionValue(""String_Node_Str"");
    CKeyspaceDefinition keyDef=null;
    try {
      keyDef=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,CKeyspaceDefinition.class.getClassLoader(),keyspaceFileName);
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"" + keyspaceFileName);
      System.exit(1);
    }
    if (keyDef == null) {
      System.out.println(""String_Node_Str"" + keyspaceFileName);
      System.exit(1);
    }
    String className=line.getOptionValue(""String_Node_Str"").toString();
    if (!className.contains(""String_Node_Str"")) {
      className=""String_Node_Str"" + className;
    }
    try {
      RhombusCommand cmd=(RhombusCommand)(Class.forName(className)).newInstance();
      Options commandOptions=cmd.getCommandOptions();
      for (      Object opt : makeCommandLineOptions().getOptions()) {
        commandOptions.addOption((Option)opt);
      }
      cmd.executeCommand(parser.parse(commandOptions,args));
    }
 catch (    ClassNotFoundException e) {
      System.out.println(""String_Node_Str"" + className);
    }
catch (    IllegalAccessException e) {
      System.out.println(""String_Node_Str"" + className);
    }
catch (    InstantiationException e) {
      System.out.println(""String_Node_Str"" + className);
    }
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
  }
}","public static void main(String[] args){
  CommandLineParser parser=new org.apache.commons.cli.BasicParser();
  try {
    CommandLine line=parser.parse(makeCommandLineOptions(),args);
    if (!line.hasOption(""String_Node_Str"") || !(line.hasOption(""String_Node_Str"") || line.hasOption(""String_Node_Str""))) {
      HelpFormatter formatter=new HelpFormatter();
      formatter.printHelp(""String_Node_Str"",makeCommandLineOptions());
      System.exit(1);
    }
    String keyspaceFileName=line.hasOption(""String_Node_Str"") ? line.getOptionValue(""String_Node_Str"") : line.getOptionValue(""String_Node_Str"");
    CKeyspaceDefinition keyDef=null;
    try {
      keyDef=line.hasOption(""String_Node_Str"") ? JsonUtil.objectFromJsonFile(CKeyspaceDefinition.class,CKeyspaceDefinition.class.getClassLoader(),keyspaceFileName) : JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,CKeyspaceDefinition.class.getClassLoader(),keyspaceFileName);
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"" + keyspaceFileName);
      System.exit(1);
    }
    if (keyDef == null) {
      System.out.println(""String_Node_Str"" + keyspaceFileName);
      System.exit(1);
    }
    String className=line.getOptionValue(""String_Node_Str"").toString();
    if (!className.contains(""String_Node_Str"")) {
      className=""String_Node_Str"" + className;
    }
    try {
      RhombusCommand cmd=(RhombusCommand)(Class.forName(className)).newInstance();
      Options commandOptions=cmd.getCommandOptions();
      for (      Object opt : makeCommandLineOptions().getOptions()) {
        commandOptions.addOption((Option)opt);
      }
      cmd.executeCommand(parser.parse(commandOptions,args));
    }
 catch (    ClassNotFoundException e) {
      System.out.println(""String_Node_Str"" + className);
    }
catch (    IllegalAccessException e) {
      System.out.println(""String_Node_Str"" + className);
    }
catch (    InstantiationException e) {
      System.out.println(""String_Node_Str"" + className);
    }
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
  }
}",0.9317085554709316
17418,"public void executeCommand(CommandLine cl){
  String cassConfigFileName=cl.getOptionValue(""String_Node_Str"");
  CassandraConfiguration cassConfig=null;
  try {
    cassConfig=JsonUtil.objectFromJsonFile(CassandraConfiguration.class,CassandraConfiguration.class.getClassLoader(),cassConfigFileName);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + cassConfigFileName);
    System.exit(1);
  }
  if (cassConfig == null) {
    System.out.println(""String_Node_Str"" + cassConfigFileName);
    System.exit(1);
  }
  connectionManager=new ConnectionManager(cassConfig);
  if (connectionManager == null) {
    System.out.println(""String_Node_Str"" + cassConfigFileName);
    System.exit(1);
  }
}","public void executeCommand(CommandLine cl){
  String cassConfigFileName=cl.getOptionValue(""String_Node_Str"");
  CassandraConfiguration cassConfig=null;
  try {
    cassConfig=JsonUtil.objectFromJsonFile(CassandraConfiguration.class,CassandraConfiguration.class.getClassLoader(),cassConfigFileName);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + cassConfigFileName);
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(""String_Node_Str"" + this.getClass().getName(),getCommandOptions());
    System.exit(1);
  }
  if (cassConfig == null) {
    System.out.println(""String_Node_Str"" + cassConfigFileName);
    System.exit(1);
  }
  connectionManager=new ConnectionManager(cassConfig);
  if (connectionManager == null) {
    System.out.println(""String_Node_Str"" + cassConfigFileName);
    System.exit(1);
  }
}",0.9086261980830672
17419,"private Session getSessionForNewKeyspace(CKeyspaceDefinition keyspace,Boolean forceRebuild) throws Exception {
  Session session=cluster.connect();
  if (forceRebuild) {
    try {
      session.execute(""String_Node_Str"" + keyspace.getName() + ""String_Node_Str"");
    }
 catch (    Exception e) {
    }
  }
  StringBuilder sb=new StringBuilder();
  sb.append(keyspace.getName());
  sb.append(""String_Node_Str"");
  sb.append(keyspace.getReplicationClass());
  for (  String key : keyspace.getReplicationFactors().keySet()) {
    sb.append(""String_Node_Str"");
    sb.append(key);
    sb.append(""String_Node_Str"");
    sb.append(keyspace.getReplicationFactors().get(key));
  }
  sb.append(""String_Node_Str"");
  try {
    session.execute(""String_Node_Str"" + sb.toString());
  }
 catch (  Exception e) {
    if (!forceRebuild) {
      session.execute(""String_Node_Str"" + sb.toString());
    }
 else {
      throw e;
    }
  }
  session.shutdown();
  session=cluster.connect(keyspace.getName());
  return session;
}","private Session getSessionForNewKeyspace(CKeyspaceDefinition keyspace,Boolean forceRebuild) throws Exception {
  Session session=cluster.connect();
  if (forceRebuild) {
    try {
      session.execute(""String_Node_Str"" + keyspace.getName() + ""String_Node_Str"");
    }
 catch (    Exception e) {
    }
  }
  StringBuilder sb=new StringBuilder();
  sb.append(keyspace.getName());
  sb.append(""String_Node_Str"");
  sb.append(keyspace.getReplicationClass());
  sb.append(""String_Node_Str"");
  for (  String key : keyspace.getReplicationFactors().keySet()) {
    sb.append(""String_Node_Str"");
    sb.append(key);
    sb.append(""String_Node_Str"");
    sb.append(keyspace.getReplicationFactors().get(key));
  }
  sb.append(""String_Node_Str"");
  try {
    String cql=""String_Node_Str"" + sb.toString();
    session.execute(cql);
  }
 catch (  Exception e) {
    if (!forceRebuild) {
      session.execute(""String_Node_Str"" + sb.toString());
    }
 else {
      throw e;
    }
  }
  session.shutdown();
  session=cluster.connect(keyspace.getName());
  return session;
}",0.9429400386847197
17420,"public void deleteObsoleteIndex(IndexUpdateRow row,Map<String,Object> indexValues){
  CQLStatement cql=cqlGenerator.makeCQLforDeleteUUIDFromIndex(keyspaceDefinition.getDefinitions().get(row.getObjectName()),row.getIndex(),row.getInstanceId(),indexValues,row.getTimeStampOfMostCurrentUpdate());
  cqlExecutor.executeSync(cql);
}","public void deleteObsoleteIndex(IndexUpdateRow row,CIndex index,Map<String,Object> indexValues){
  CQLStatement cql=cqlGenerator.makeCQLforDeleteUUIDFromIndex(keyspaceDefinition.getDefinitions().get(row.getObjectName()),index,row.getInstanceId(),index.getIndexKeyAndValues(indexValues),row.getTimeStampOfMostCurrentUpdate());
  cqlExecutor.executeSync(cql);
}",0.8367346938775511
17421,"public IndexUpdateRow getNextUpdateIndexRow(@Nullable IndexUpdateRowKey lastInstanceKey) throws IOException, JsonMappingException {
  CQLStatement cqlForNext=(lastInstanceKey == null) ? cqlGenerator.makeGetFirstEligibleIndexUpdate() : cqlGenerator.makeGetNextEligibleIndexUpdate(lastInstanceKey);
  ResultSet resultSet=cqlExecutor.executeSync(cqlForNext);
  if (resultSet.isExhausted()) {
    return null;
  }
  IndexUpdateRowKey nextInstanceKey=new IndexUpdateRowKey(resultSet.one());
  CQLStatement cqlForRow=cqlGenerator.makeGetRowIndexUpdate(nextInstanceKey);
  resultSet=cqlExecutor.executeSync(cqlForRow);
  List<Row> results=resultSet.all();
  if (results.size() == 0) {
    return null;
  }
  String objectName=results.get(0).getString(""String_Node_Str"");
  CDefinition def=keyspaceDefinition.getDefinitions().get(objectName);
  CIndex index=def.getIndex(unpackIndexValuesFromJson(def,results.get(0).getString(""String_Node_Str"")));
  List<SortedMap<String,Object>> indexValueList=Lists.newArrayList();
  List<UUID> ids=Lists.newArrayList();
  for (  Row row : results) {
    indexValueList.add(unpackIndexValuesFromJson(def,row.getString(""String_Node_Str"")));
    ids.add(row.getUUID(""String_Node_Str""));
  }
  return new IndexUpdateRow(objectName,results.get(0).getUUID(""String_Node_Str""),index,UUIDs.unixTimestamp(results.get(0).getUUID(""String_Node_Str"")),indexValueList,ids);
}","public IndexUpdateRow getNextUpdateIndexRow(@Nullable IndexUpdateRowKey lastInstanceKey) throws IOException, JsonMappingException {
  CQLStatement cqlForNext=(lastInstanceKey == null) ? cqlGenerator.makeGetFirstEligibleIndexUpdate() : cqlGenerator.makeGetNextEligibleIndexUpdate(lastInstanceKey);
  ResultSet resultSet=cqlExecutor.executeSync(cqlForNext);
  if (resultSet.isExhausted()) {
    return null;
  }
  IndexUpdateRowKey nextInstanceKey=new IndexUpdateRowKey(resultSet.one());
  CQLStatement cqlForRow=cqlGenerator.makeGetRowIndexUpdate(nextInstanceKey);
  resultSet=cqlExecutor.executeSync(cqlForRow);
  List<Row> results=resultSet.all();
  if (results.size() == 0) {
    return null;
  }
  String objectName=results.get(0).getString(""String_Node_Str"");
  CDefinition def=keyspaceDefinition.getDefinitions().get(objectName);
  List<SortedMap<String,Object>> indexValueList=Lists.newArrayList();
  List<UUID> ids=Lists.newArrayList();
  for (  Row row : results) {
    indexValueList.add(unpackIndexValuesFromJson(def,row.getString(""String_Node_Str"")));
    ids.add(row.getUUID(""String_Node_Str""));
  }
  return new IndexUpdateRow(objectName,results.get(0).getUUID(""String_Node_Str""),UUIDs.unixTimestamp(results.get(0).getUUID(""String_Node_Str"")),indexValueList,ids);
}",0.9583802024746908
17422,"protected void processRow(IndexUpdateRow row){
  if (row.getIndexValues().size() == 0) {
    return;
  }
  if (row.getIndexValues().size() == 1) {
    Long consistencyHorizon=UUIDs.unixTimestamp(objectMapper.getTimeUUIDAtEndOfConsistencyHorizion());
    if (row.getTimeStampOfMostCurrentUpdate() > consistencyHorizon) {
      objectMapper.deleteObsoleteUpdateIndexColumn(row.getRowKey(),row.getIds().get(0));
    }
    return;
  }
  Map<String,Object> mostRecentUpdate=row.getIndexValues().get(0);
  row.getIndexValues().remove(0);
  row.getIds().remove(0);
  List<Map<String,Object>> listToDelete=Lists.newArrayList();
  for (  Map<String,Object> update : row.getIndexValues()) {
    if (!areIndexValuesEqual(mostRecentUpdate,update)) {
      listToDelete.add(update);
    }
  }
  for (  Map<String,Object> iv : listToDelete) {
    objectMapper.deleteObsoleteIndex(row,iv);
  }
  for (  UUID todelete : row.getIds()) {
    objectMapper.deleteObsoleteUpdateIndexColumn(row.getRowKey(),todelete);
  }
}","protected void processRow(IndexUpdateRow row){
  if (row.getIndexValues().size() == 0) {
    return;
  }
  if (row.getIndexValues().size() == 1) {
    Long consistencyHorizon=UUIDs.unixTimestamp(objectMapper.getTimeUUIDAtEndOfConsistencyHorizion());
    if (row.getTimeStampOfMostCurrentUpdate() > consistencyHorizon) {
      objectMapper.deleteObsoleteUpdateIndexColumn(row.getRowKey(),row.getIds().get(0));
    }
    return;
  }
  Map<String,Object> mostRecentUpdate=row.getIndexValues().get(0);
  row.getIndexValues().remove(0);
  row.getIds().remove(0);
  List<CIndex> listOfIndexesToDelete=Lists.newArrayList();
  List<Map<String,Object>> listOfValuesToDelete=Lists.newArrayList();
  for (  Map<String,Object> update : row.getIndexValues()) {
    if (!areIndexValuesEqual(mostRecentUpdate,update)) {
      listOfValuesToDelete.add(update);
      listOfIndexesToDelete.addAll(getListOfEffectedIndexes(objectMapper.getKeyspaceDefinition().getDefinitions().get(row.getObjectName()),mostRecentUpdate,update));
    }
  }
  for (  CIndex index : listOfIndexesToDelete) {
    for (    Map<String,Object> values : listOfValuesToDelete) {
      objectMapper.deleteObsoleteIndex(row,index,values);
    }
  }
  for (  UUID todelete : row.getIds()) {
    objectMapper.deleteObsoleteUpdateIndexColumn(row.getRowKey(),todelete);
  }
}",0.8598452278589854
17423,"public IndexUpdateRow(String objectName,UUID instanceId,CIndex index,Long timeStampOfMostCurrentUpdate,List<SortedMap<String,Object>> indexValues,List<UUID> ids){
  this.rowKey=new IndexUpdateRowKey(objectName,instanceId);
  this.index=index;
  this.indexValues=indexValues;
  this.timeStampOfMostCurrentUpdate=timeStampOfMostCurrentUpdate;
  this.ids=ids;
}","public IndexUpdateRow(String objectName,UUID instanceId,Long timeStampOfMostCurrentUpdate,List<SortedMap<String,Object>> indexValues,List<UUID> ids){
  this.rowKey=new IndexUpdateRowKey(objectName,instanceId);
  this.indexValues=indexValues;
  this.timeStampOfMostCurrentUpdate=timeStampOfMostCurrentUpdate;
  this.ids=ids;
}",0.9516837481698388
17424,"@Test public void testObjectMapper() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  Map<String,Object> testObject=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(0),definition.getDefinitions().get(""String_Node_Str""));
  UUID key=om.insert(""String_Node_Str"",testObject);
  Map<String,Object> dbObject=om.getByKey(""String_Node_Str"",key);
  for (  String dbKey : dbObject.keySet()) {
    if (!dbKey.equals(""String_Node_Str"")) {
      assertEquals(testObject.get(dbKey),dbObject.get(dbKey));
    }
  }
  UUID key2=om.insert(""String_Node_Str"",JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(1),definition.getDefinitions().get(""String_Node_Str"")));
  Criteria criteria=TestHelpers.getTestCriteria(0);
  criteria.getIndexKeys().put(""String_Node_Str"",((Integer)criteria.getIndexKeys().get(""String_Node_Str"")).longValue());
  List<Map<String,Object>> dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(2,dbObjects.size());
  om.delete(""String_Node_Str"",key);
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,dbObjects.size());
  Map<String,Object> testObject2=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(2),definition.getDefinitions().get(""String_Node_Str""));
  UUID key3=om.update(""String_Node_Str"",key2,testObject2,null,null);
  Map<String,Object> dbObject2=om.getByKey(""String_Node_Str"",key3);
  testObject2.put(""String_Node_Str"",key2);
  for (  String dbKey : dbObject2.keySet()) {
    assertEquals(testObject2.get(dbKey),dbObject2.get(dbKey));
  }
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(0,dbObjects.size());
  Criteria criteria2=TestHelpers.getTestCriteria(1);
  criteria2.getIndexKeys().put(""String_Node_Str"",((Integer)criteria2.getIndexKeys().get(""String_Node_Str"")).longValue());
  dbObjects=om.list(""String_Node_Str"",criteria2);
  assertEquals(1,dbObjects.size());
  assertEquals(null,om.getNextUpdateIndexRow(null));
  Map<String,Object> testObject3=Maps.newHashMap();
  testObject3.put(""String_Node_Str"",Integer.valueOf(7));
  UUID key4=om.update(""String_Node_Str"",key2,testObject3,null,null);
  Thread.sleep(3000);
  IndexUpdateRow row=om.getNextUpdateIndexRow(null);
  assertEquals(""String_Node_Str"",row.getObjectName());
  assertEquals(""String_Node_Str"",row.getIndex().getKey());
  assertEquals(2,row.getIndexValues().size());
  assertEquals(7,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(5,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(778L,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(778L,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(333333L,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(333333L,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(null,om.getNextUpdateIndexRow(row.getRowKey()));
  cm.teardown();
}","@Test public void testObjectMapper() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  Map<String,Object> testObject=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(0),definition.getDefinitions().get(""String_Node_Str""));
  UUID key=om.insert(""String_Node_Str"",testObject);
  Map<String,Object> dbObject=om.getByKey(""String_Node_Str"",key);
  for (  String dbKey : dbObject.keySet()) {
    if (!dbKey.equals(""String_Node_Str"")) {
      assertEquals(testObject.get(dbKey),dbObject.get(dbKey));
    }
  }
  UUID key2=om.insert(""String_Node_Str"",JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(1),definition.getDefinitions().get(""String_Node_Str"")));
  Criteria criteria=TestHelpers.getTestCriteria(0);
  criteria.getIndexKeys().put(""String_Node_Str"",((Integer)criteria.getIndexKeys().get(""String_Node_Str"")).longValue());
  List<Map<String,Object>> dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(2,dbObjects.size());
  om.delete(""String_Node_Str"",key);
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,dbObjects.size());
  Map<String,Object> testObject2=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(2),definition.getDefinitions().get(""String_Node_Str""));
  UUID key3=om.update(""String_Node_Str"",key2,testObject2,null,null);
  Map<String,Object> dbObject2=om.getByKey(""String_Node_Str"",key3);
  testObject2.put(""String_Node_Str"",key2);
  for (  String dbKey : dbObject2.keySet()) {
    assertEquals(testObject2.get(dbKey),dbObject2.get(dbKey));
  }
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(0,dbObjects.size());
  Criteria criteria2=TestHelpers.getTestCriteria(1);
  criteria2.getIndexKeys().put(""String_Node_Str"",((Integer)criteria2.getIndexKeys().get(""String_Node_Str"")).longValue());
  dbObjects=om.list(""String_Node_Str"",criteria2);
  assertEquals(1,dbObjects.size());
  assertEquals(null,om.getNextUpdateIndexRow(null));
  Map<String,Object> testObject3=Maps.newHashMap();
  testObject3.put(""String_Node_Str"",Integer.valueOf(7));
  UUID key4=om.update(""String_Node_Str"",key2,testObject3,null,null);
  Thread.sleep(3000);
  IndexUpdateRow row=om.getNextUpdateIndexRow(null);
  assertEquals(""String_Node_Str"",row.getObjectName());
  assertEquals(2,row.getIndexValues().size());
  assertEquals(7,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(5,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(778L,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(778L,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(333333L,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(333333L,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(null,om.getNextUpdateIndexRow(row.getRowKey()));
  cm.teardown();
}",0.9906630796012028
17425,"@Test public void testUpdateProcessor() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  CDefinition def1=om.getKeyspaceDefinition_ONLY_FOR_TESTING().getDefinitions().get(""String_Node_Str"");
  Map<String,Object> testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",Long.valueOf(100));
  testObject.put(""String_Node_Str"",Integer.valueOf(101));
  testObject.put(""String_Node_Str"",Long.valueOf(102));
  testObject.put(""String_Node_Str"",Integer.valueOf(103));
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  UUID key=om.insert(""String_Node_Str"",testObject);
  testObject.put(""String_Node_Str"",Long.valueOf(200));
  testObject.put(""String_Node_Str"",Integer.valueOf(201));
  testObject.put(""String_Node_Str"",Long.valueOf(202));
  testObject.put(""String_Node_Str"",Integer.valueOf(203));
  List<CQLStatement> insertStatements=Lists.newArrayList();
  for (  CIndex i : def1.getIndexes().values()) {
    om.getCqlGenerator_ONLY_FOR_TESTING().addCQLStatmentsForIndexInsert(true,insertStatements,def1,testObject,i,key,om.getCqlGenerator_ONLY_FOR_TESTING().makeFieldAndValueList(def1,testObject),null,null);
  }
  for (  CQLStatement s : insertStatements) {
    om.getCqlExecutor().executeSync(s);
  }
  CQLStatement cql=om.getCqlGenerator_ONLY_FOR_TESTING().makeInsertUpdateIndexStatement(def1,key,def1.makeIndexValues(testObject));
  om.getCqlExecutor().executeSync(cql);
  Map<String,Object> testObjectOriginal=Maps.newTreeMap();
  testObjectOriginal.put(""String_Node_Str"",Long.valueOf(100));
  testObjectOriginal.put(""String_Node_Str"",Integer.valueOf(101));
  testObjectOriginal.put(""String_Node_Str"",Long.valueOf(102));
  testObjectOriginal.put(""String_Node_Str"",Integer.valueOf(103));
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  cql=om.getCqlGenerator_ONLY_FOR_TESTING().makeInsertUpdateIndexStatement(def1,key,def1.makeIndexValues(testObjectOriginal));
  om.getCqlExecutor().executeSync(cql);
  Map<String,Object> staticTableObject=om.getByKey(""String_Node_Str"",key);
  assertEquals(100L,staticTableObject.get(""String_Node_Str""));
  assertEquals(101,staticTableObject.get(""String_Node_Str""));
  assertEquals(103,staticTableObject.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",staticTableObject.get(""String_Node_Str""));
  Criteria criteria=new Criteria();
  SortedMap<String,Object> values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(200L));
  criteria.setIndexKeys(values);
  criteria.setLimit(0L);
  List<Map<String,Object>> indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,indexObjects.size());
  assertEquals(staticTableObject.get(""String_Node_Str""),indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(200L,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(201,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(203,indexObjects.get(0).get(""String_Node_Str""));
  Thread.sleep(3000);
  UpdateProcessor up=new UpdateProcessor(om);
  up.process();
}","@Test public void testUpdateProcessor() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  CDefinition def1=om.getKeyspaceDefinition_ONLY_FOR_TESTING().getDefinitions().get(""String_Node_Str"");
  Map<String,Object> testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",Long.valueOf(100));
  testObject.put(""String_Node_Str"",Integer.valueOf(101));
  testObject.put(""String_Node_Str"",Long.valueOf(102));
  testObject.put(""String_Node_Str"",Integer.valueOf(103));
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  UUID key=om.insert(""String_Node_Str"",testObject);
  testObject.put(""String_Node_Str"",Long.valueOf(200));
  testObject.put(""String_Node_Str"",Integer.valueOf(201));
  testObject.put(""String_Node_Str"",Long.valueOf(202));
  testObject.put(""String_Node_Str"",Integer.valueOf(203));
  List<CQLStatement> insertStatements=Lists.newArrayList();
  for (  CIndex i : def1.getIndexes().values()) {
    om.getCqlGenerator_ONLY_FOR_TESTING().addCQLStatmentsForIndexInsert(true,insertStatements,def1,testObject,i,key,om.getCqlGenerator_ONLY_FOR_TESTING().makeFieldAndValueList(def1,testObject),null,null);
  }
  for (  CQLStatement s : insertStatements) {
    om.getCqlExecutor().executeSync(s);
  }
  CQLStatement cql=om.getCqlGenerator_ONLY_FOR_TESTING().makeInsertUpdateIndexStatement(def1,key,def1.makeIndexValues(testObject));
  om.getCqlExecutor().executeSync(cql);
  Map<String,Object> testObjectOriginal=Maps.newTreeMap();
  testObjectOriginal.put(""String_Node_Str"",Long.valueOf(100));
  testObjectOriginal.put(""String_Node_Str"",Integer.valueOf(101));
  testObjectOriginal.put(""String_Node_Str"",Long.valueOf(102));
  testObjectOriginal.put(""String_Node_Str"",Integer.valueOf(103));
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  cql=om.getCqlGenerator_ONLY_FOR_TESTING().makeInsertUpdateIndexStatement(def1,key,def1.makeIndexValues(testObjectOriginal));
  om.getCqlExecutor().executeSync(cql);
  Map<String,Object> staticTableObject=om.getByKey(""String_Node_Str"",key);
  assertEquals(100L,staticTableObject.get(""String_Node_Str""));
  assertEquals(101,staticTableObject.get(""String_Node_Str""));
  assertEquals(103,staticTableObject.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",staticTableObject.get(""String_Node_Str""));
  Criteria criteria=new Criteria();
  SortedMap<String,Object> values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(200L));
  criteria.setIndexKeys(values);
  criteria.setLimit(0L);
  List<Map<String,Object>> indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,indexObjects.size());
  assertEquals(staticTableObject.get(""String_Node_Str""),indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(200L,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(201,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(203,indexObjects.get(0).get(""String_Node_Str""));
  Thread.sleep(3000);
  UpdateProcessor up=new UpdateProcessor(om);
  up.process();
  criteria=new Criteria();
  values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(200));
  criteria.setIndexKeys(values);
  criteria.setLimit(0L);
  indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(0,indexObjects.size());
  criteria=new Criteria();
  values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(100));
  criteria.setIndexKeys(values);
  indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,indexObjects.size());
  assertEquals(staticTableObject.get(""String_Node_Str""),indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(100L,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(101,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(103,indexObjects.get(0).get(""String_Node_Str""));
}",0.901079365079365
17426,"@Test public void testObjectMapper() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  Map<String,Object> testObject=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(0),definition.getDefinitions().get(""String_Node_Str""));
  UUID key=om.insert(""String_Node_Str"",testObject);
  Map<String,Object> dbObject=om.getByKey(""String_Node_Str"",key);
  for (  String dbKey : dbObject.keySet()) {
    if (!dbKey.equals(""String_Node_Str"")) {
      assertEquals(testObject.get(dbKey),dbObject.get(dbKey));
    }
  }
  UUID key2=om.insert(""String_Node_Str"",JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(1),definition.getDefinitions().get(""String_Node_Str"")));
  Criteria criteria=TestHelpers.getTestCriteria(0);
  criteria.getIndexKeys().put(""String_Node_Str"",((Integer)criteria.getIndexKeys().get(""String_Node_Str"")).longValue());
  List<Map<String,Object>> dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(2,dbObjects.size());
  om.delete(""String_Node_Str"",key);
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,dbObjects.size());
  Map<String,Object> testObject2=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(2),definition.getDefinitions().get(""String_Node_Str""));
  UUID key3=om.update(""String_Node_Str"",key2,testObject2,null,null);
  Map<String,Object> dbObject2=om.getByKey(""String_Node_Str"",key3);
  testObject2.put(""String_Node_Str"",key2);
  for (  String dbKey : dbObject2.keySet()) {
    assertEquals(testObject2.get(dbKey),dbObject2.get(dbKey));
  }
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(0,dbObjects.size());
  Criteria criteria2=TestHelpers.getTestCriteria(1);
  criteria2.getIndexKeys().put(""String_Node_Str"",((Integer)criteria2.getIndexKeys().get(""String_Node_Str"")).longValue());
  dbObjects=om.list(""String_Node_Str"",criteria2);
  assertEquals(1,dbObjects.size());
  assertEquals(null,om.getNextUpdateIndexRow(null));
  Map<String,Object> testObject3=Maps.newHashMap();
  testObject3.put(""String_Node_Str"",Integer.valueOf(7));
  UUID key4=om.update(""String_Node_Str"",key2,testObject3,null,null);
  Thread.sleep(3000);
  IndexUpdateRow row=om.getNextUpdateIndexRow(null);
  assertEquals(""String_Node_Str"",row.getObjectName());
  assertEquals(""String_Node_Str"",row.getIndex().getKey());
  assertEquals(2,row.getIndexValues().size());
  assertEquals(5,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(7,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(778L,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(778L,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(333333L,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(333333L,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(null,om.getNextUpdateIndexRow(row.getTimeStampOfMostCurrentUpdate()));
  cm.teardown();
}","@Test public void testObjectMapper() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  Map<String,Object> testObject=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(0),definition.getDefinitions().get(""String_Node_Str""));
  UUID key=om.insert(""String_Node_Str"",testObject);
  Map<String,Object> dbObject=om.getByKey(""String_Node_Str"",key);
  for (  String dbKey : dbObject.keySet()) {
    if (!dbKey.equals(""String_Node_Str"")) {
      assertEquals(testObject.get(dbKey),dbObject.get(dbKey));
    }
  }
  UUID key2=om.insert(""String_Node_Str"",JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(1),definition.getDefinitions().get(""String_Node_Str"")));
  Criteria criteria=TestHelpers.getTestCriteria(0);
  criteria.getIndexKeys().put(""String_Node_Str"",((Integer)criteria.getIndexKeys().get(""String_Node_Str"")).longValue());
  List<Map<String,Object>> dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(2,dbObjects.size());
  om.delete(""String_Node_Str"",key);
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,dbObjects.size());
  Map<String,Object> testObject2=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(2),definition.getDefinitions().get(""String_Node_Str""));
  UUID key3=om.update(""String_Node_Str"",key2,testObject2,null,null);
  Map<String,Object> dbObject2=om.getByKey(""String_Node_Str"",key3);
  testObject2.put(""String_Node_Str"",key2);
  for (  String dbKey : dbObject2.keySet()) {
    assertEquals(testObject2.get(dbKey),dbObject2.get(dbKey));
  }
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(0,dbObjects.size());
  Criteria criteria2=TestHelpers.getTestCriteria(1);
  criteria2.getIndexKeys().put(""String_Node_Str"",((Integer)criteria2.getIndexKeys().get(""String_Node_Str"")).longValue());
  dbObjects=om.list(""String_Node_Str"",criteria2);
  assertEquals(1,dbObjects.size());
  assertEquals(null,om.getNextUpdateIndexRow(null));
  Map<String,Object> testObject3=Maps.newHashMap();
  testObject3.put(""String_Node_Str"",Integer.valueOf(7));
  UUID key4=om.update(""String_Node_Str"",key2,testObject3,null,null);
  Thread.sleep(3000);
  IndexUpdateRow row=om.getNextUpdateIndexRow(null);
  assertEquals(""String_Node_Str"",row.getObjectName());
  assertEquals(""String_Node_Str"",row.getIndex().getKey());
  assertEquals(2,row.getIndexValues().size());
  assertEquals(5,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(7,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(778L,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(778L,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(333333L,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(333333L,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(null,om.getNextUpdateIndexRow(row.getRowKey()));
  cm.teardown();
}",0.991875
17427,"/** 
 * Get an object mapper for a keyspace
 * @return Object mapper for the specified keyspace
 */
public ObjectMapper getObjectMapper(String keyspace){
  ObjectMapper objectMapper=objectMappers.get(keyspace);
  if (objectMapper == null) {
    logger.debug(""String_Node_Str"",defaultKeyspace.getName());
    Session session=cluster.connect(defaultKeyspace.getName());
    objectMapper=new ObjectMapper(session,defaultKeyspace);
    objectMapper.setLogCql(logCql);
    objectMappers.put(keyspace,objectMapper);
  }
  return objectMapper;
}","/** 
 * Get an object mapper for a keyspace
 * @return Object mapper for the specified keyspace
 */
public ObjectMapper getObjectMapper(String keyspace){
  ObjectMapper objectMapper=objectMappers.get(keyspace);
  if (objectMapper == null) {
    logger.debug(""String_Node_Str"",defaultKeyspace.getName());
    Session session=cluster.connect(defaultKeyspace.getName());
    objectMapper=new ObjectMapper(session,defaultKeyspace,consistencyHorizon);
    objectMapper.setLogCql(logCql);
    objectMappers.put(keyspace,objectMapper);
  }
  return objectMapper;
}",0.982648401826484
17428,"public ConnectionManager(CassandraConfiguration configuration){
  this.contactPoints=configuration.getContactPoints();
  this.localDatacenter=configuration.getLocalDatacenter();
}","public ConnectionManager(CassandraConfiguration configuration){
  this.contactPoints=configuration.getContactPoints();
  this.localDatacenter=configuration.getLocalDatacenter();
  this.consistencyHorizon=configuration.getConsistencyHorizion();
}",0.8443396226415094
17429,"/** 
 * This method rebuilds a keyspace from a definition.  If forceRebuild is true, the process removes any existing keyspace with the same name.  This operation is immediate and irreversible.
 * @param keyspaceDefinition The definition to build the keyspace from
 * @param forceRebuild Force destruction and rebuild of keyspace
 */
public void buildKeyspace(CKeyspaceDefinition keyspaceDefinition,Boolean forceRebuild) throws Exception {
  if (keyspaceDefinition == null) {
    keyspaceDefinition=defaultKeyspace;
  }
  Session session=getSessionForNewKeyspace(keyspaceDefinition,forceRebuild);
  ObjectMapper mapper=new ObjectMapper(session,keyspaceDefinition);
  mapper.setLogCql(logCql);
  mapper.buildKeyspace(forceRebuild);
  objectMappers.put(keyspaceDefinition.getName(),mapper);
}","/** 
 * This method rebuilds a keyspace from a definition.  If forceRebuild is true, the process removes any existing keyspace with the same name.  This operation is immediate and irreversible.
 * @param keyspaceDefinition The definition to build the keyspace from
 * @param forceRebuild Force destruction and rebuild of keyspace
 */
public void buildKeyspace(CKeyspaceDefinition keyspaceDefinition,Boolean forceRebuild) throws Exception {
  if (keyspaceDefinition == null) {
    keyspaceDefinition=defaultKeyspace;
  }
  Session session=getSessionForNewKeyspace(keyspaceDefinition,forceRebuild);
  ObjectMapper mapper=new ObjectMapper(session,keyspaceDefinition,consistencyHorizon);
  mapper.setLogCql(logCql);
  mapper.buildKeyspace(forceRebuild);
  objectMappers.put(keyspaceDefinition.getName(),mapper);
}",0.9881175734834272
17430,"public ObjectMapper(Session session,CKeyspaceDefinition keyspaceDefinition){
  this.cqlExecutor=new CQLExecutor(session,logCql);
  this.session=session;
  this.keyspaceDefinition=keyspaceDefinition;
  this.cqlGenerator=new CObjectCQLGenerator(keyspaceDefinition.getDefinitions(),this);
}","public ObjectMapper(Session session,CKeyspaceDefinition keyspaceDefinition,Integer consistencyHorizon){
  this.cqlExecutor=new CQLExecutor(session,logCql);
  this.session=session;
  this.keyspaceDefinition=keyspaceDefinition;
  this.cqlGenerator=new CObjectCQLGenerator(keyspaceDefinition.getDefinitions(),this,consistencyHorizon);
}",0.9258064516129032
17431,"/** 
 * @param objectDefinitions - A map where the key is the CDefinition.name and the value is the CDefinition.This map should include a CDefinition for every object in the system.
 */
public CObjectCQLGenerator(Map<String,CDefinition> objectDefinitions,CObjectShardList shardList){
  this.definitions=objectDefinitions;
  setShardList(shardList);
}","/** 
 * @param objectDefinitions - A map where the key is the CDefinition.name and the value is the CDefinition.This map should include a CDefinition for every object in the system.
 */
public CObjectCQLGenerator(Map<String,CDefinition> objectDefinitions,CObjectShardList shardList,Integer consistencyHorizon){
  this.definitions=objectDefinitions;
  this.consistencyHorizon=consistencyHorizon;
  setShardList(shardList);
}",0.9055627425614488
17432,"protected static UUID getTimeUUIDAtEndOfConsistencyHorizion(){
  return UUIDs.startOf(DateTime.now().getMillis() + 5000);
}","protected UUID getTimeUUIDAtEndOfConsistencyHorizion(){
  UUID ret=UUIDs.startOf(DateTime.now().getMillis() - consistencyHorizon);
  return ret;
}",0.7955390334572491
17433,"/** 
 * @param lastInstanceToken - Long token representing the position of the previous row key
 * @return CQLStatement of the single CQL statement required to get the next update token
 */
public static CQLStatement makeGetNextEligibleIndexUpdate(Long lastInstanceToken){
  return CQLStatement.make(TEMPLATE_SELECT_NEXT_ELIGIBLE_INDEX_UPDATE,Arrays.asList(lastInstanceToken,getTimeUUIDAtEndOfConsistencyHorizion()).toArray());
}","/** 
 * @param lastInstanceToken - Long token representing the position of the previous row key
 * @return CQLStatement of the single CQL statement required to get the next update token
 */
public CQLStatement makeGetNextEligibleIndexUpdate(Long lastInstanceToken){
  return CQLStatement.make(TEMPLATE_SELECT_NEXT_ELIGIBLE_INDEX_UPDATE,Arrays.asList(lastInstanceToken,getTimeUUIDAtEndOfConsistencyHorizion()).toArray());
}",0.9917743830787308
17434,"/** 
 * @return CQLStatement of single CQL statement required to get the first update token
 */
public static CQLStatement makeGetFirstEligibleIndexUpdate(){
  return CQLStatement.make(TEMPLATE_SELECT_FIRST_ELIGIBLE_INDEX_UPDATE,Arrays.asList(getTimeUUIDAtEndOfConsistencyHorizion()).toArray());
}","/** 
 * @return CQLStatement of single CQL statement required to get the first update token
 */
public CQLStatement makeGetFirstEligibleIndexUpdate(){
  return CQLStatement.make(TEMPLATE_SELECT_FIRST_ELIGIBLE_INDEX_UPDATE,Arrays.asList(getTimeUUIDAtEndOfConsistencyHorizion()).toArray());
}",0.9880749574105622
17435,"public void testMakeWideTableCreate() throws CObjectParseException, IOException {
  Subject s=new Subject();
  s.testMakeWideTableCreate();
}","public void testMakeWideTableCreate() throws CObjectParseException, IOException {
  Subject s=new Subject(0);
  s.testMakeWideTableCreate();
}",0.9964664310954064
17436,"public void testMakeCQLforDelete() throws CQLGenerationException, CObjectParseException, IOException {
  Subject s=new Subject();
  s.testMakeCQLforDelete();
}","public void testMakeCQLforDelete() throws CQLGenerationException, CObjectParseException, IOException {
  Subject s=new Subject(0);
  s.testMakeCQLforDelete();
}",0.9968652037617556
17437,"public void testMakeCQLforInsert() throws CQLGenerationException, CObjectParseException, IOException {
  Subject s=new Subject();
  s.testMakeCQLforInsert();
}","public void testMakeCQLforInsert() throws CQLGenerationException, CObjectParseException, IOException {
  Subject s=new Subject(0);
  s.testMakeCQLforInsert();
}",0.9968652037617556
17438,"public void testMakeCQLforUpdate() throws CQLGenerationException, CObjectParseException, IOException {
  Subject s=new Subject();
  s.testMakeCQLforUpdate();
}","public void testMakeCQLforUpdate() throws CQLGenerationException, CObjectParseException, IOException {
  Subject s=new Subject(0);
  s.testMakeCQLforUpdate();
}",0.9968652037617556
17439,"public void testMakeCQLforCreate() throws CObjectParseException, IOException {
  Subject s=new Subject();
  s.testMakeCQLforCreate();
}","public void testMakeCQLforCreate() throws CObjectParseException, IOException {
  Subject s=new Subject(0);
  s.testMakeCQLforCreate();
}",0.996309963099631
17440,"public void testMakeStaticTableCreate() throws CObjectParseException, IOException {
  Subject s=new Subject();
  s.testMakeStaticTableCreate();
}","public void testMakeStaticTableCreate() throws CObjectParseException, IOException {
  Subject s=new Subject(0);
  s.testMakeStaticTableCreate();
}",0.9965635738831616
17441,"public void testMakeCQLforGet() throws CQLGenerationException, CObjectParseException, IOException {
  Subject s=new Subject();
  s.testMakeCQLforGet();
}","public void testMakeCQLforGet() throws CQLGenerationException, CObjectParseException, IOException {
  Subject s=new Subject(0);
  s.testMakeCQLforGet();
}",0.996742671009772
17442,"public void testMakeIndexTableName() throws CQLGenerationException, CObjectParseException, IOException {
  Subject s=new Subject();
  s.testMakeIndexTableName();
}","public void testMakeIndexTableName() throws CQLGenerationException, CObjectParseException, IOException {
  Subject s=new Subject(0);
  s.testMakeIndexTableName();
}",0.9969418960244648
17443,"@Test public void testObjectMapper() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  Map<String,Object> testObject=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(0),definition.getDefinitions().get(""String_Node_Str""));
  UUID key=om.insert(""String_Node_Str"",testObject);
  Map<String,Object> dbObject=om.getByKey(""String_Node_Str"",key);
  for (  String dbKey : dbObject.keySet()) {
    if (!dbKey.equals(""String_Node_Str"")) {
      assertEquals(testObject.get(dbKey),dbObject.get(dbKey));
    }
  }
  UUID key2=om.insert(""String_Node_Str"",JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(1),definition.getDefinitions().get(""String_Node_Str"")));
  Criteria criteria=TestHelpers.getTestCriteria(0);
  criteria.getIndexKeys().put(""String_Node_Str"",((Integer)criteria.getIndexKeys().get(""String_Node_Str"")).longValue());
  List<Map<String,Object>> dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(2,dbObjects.size());
  om.delete(""String_Node_Str"",key);
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,dbObjects.size());
  Map<String,Object> testObject2=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(2),definition.getDefinitions().get(""String_Node_Str""));
  UUID key3=om.update(""String_Node_Str"",key2,testObject2,null,null);
  Map<String,Object> dbObject2=om.getByKey(""String_Node_Str"",key3);
  testObject2.put(""String_Node_Str"",key2);
  for (  String dbKey : dbObject2.keySet()) {
    assertEquals(testObject2.get(dbKey),dbObject2.get(dbKey));
  }
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(0,dbObjects.size());
  Criteria criteria2=TestHelpers.getTestCriteria(1);
  criteria2.getIndexKeys().put(""String_Node_Str"",((Integer)criteria2.getIndexKeys().get(""String_Node_Str"")).longValue());
  dbObjects=om.list(""String_Node_Str"",criteria2);
  assertEquals(1,dbObjects.size());
  IndexUpdateRow row=om.getNextUpdateIndexRow(null);
  Thread.sleep(7000);
  assertEquals(""String_Node_Str"",row.getObjectName());
  assertEquals(""String_Node_Str"",row.getIndex().getKey());
  logger.info(""String_Node_Str"" + new DateTime(row.getTimeStampOfMostCurrentUpdate()));
  assertEquals(true,false);
  cm.teardown();
}","@Test public void testObjectMapper() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  Map<String,Object> testObject=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(0),definition.getDefinitions().get(""String_Node_Str""));
  UUID key=om.insert(""String_Node_Str"",testObject);
  Map<String,Object> dbObject=om.getByKey(""String_Node_Str"",key);
  for (  String dbKey : dbObject.keySet()) {
    if (!dbKey.equals(""String_Node_Str"")) {
      assertEquals(testObject.get(dbKey),dbObject.get(dbKey));
    }
  }
  UUID key2=om.insert(""String_Node_Str"",JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(1),definition.getDefinitions().get(""String_Node_Str"")));
  Criteria criteria=TestHelpers.getTestCriteria(0);
  criteria.getIndexKeys().put(""String_Node_Str"",((Integer)criteria.getIndexKeys().get(""String_Node_Str"")).longValue());
  List<Map<String,Object>> dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(2,dbObjects.size());
  om.delete(""String_Node_Str"",key);
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,dbObjects.size());
  Map<String,Object> testObject2=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(2),definition.getDefinitions().get(""String_Node_Str""));
  UUID key3=om.update(""String_Node_Str"",key2,testObject2,null,null);
  Map<String,Object> dbObject2=om.getByKey(""String_Node_Str"",key3);
  testObject2.put(""String_Node_Str"",key2);
  for (  String dbKey : dbObject2.keySet()) {
    assertEquals(testObject2.get(dbKey),dbObject2.get(dbKey));
  }
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(0,dbObjects.size());
  Criteria criteria2=TestHelpers.getTestCriteria(1);
  criteria2.getIndexKeys().put(""String_Node_Str"",((Integer)criteria2.getIndexKeys().get(""String_Node_Str"")).longValue());
  dbObjects=om.list(""String_Node_Str"",criteria2);
  assertEquals(1,dbObjects.size());
  assertEquals(null,om.getNextUpdateIndexRow(null));
  Map<String,Object> testObject3=Maps.newHashMap();
  testObject3.put(""String_Node_Str"",Integer.valueOf(7));
  UUID key4=om.update(""String_Node_Str"",key2,testObject3,null,null);
  Thread.sleep(3000);
  IndexUpdateRow row=om.getNextUpdateIndexRow(null);
  assertEquals(""String_Node_Str"",row.getObjectName());
  assertEquals(""String_Node_Str"",row.getIndex().getKey());
  assertEquals(2,row.getIndexValues().size());
  assertEquals(5,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(7,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(778L,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(778L,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(333333L,row.getIndexValues().get(0).get(""String_Node_Str""));
  assertEquals(333333L,row.getIndexValues().get(1).get(""String_Node_Str""));
  assertEquals(null,om.getNextUpdateIndexRow(row.getTimeStampOfMostCurrentUpdate()));
  cm.teardown();
}",0.849023709902371
17444,"@Test public void testUpdateProcessor() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  CDefinition def1=om.getKeyspaceDefinition_ONLY_FOR_TESTING().getDefinitions().get(""String_Node_Str"");
  Map<String,Object> testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",Long.valueOf(100));
  testObject.put(""String_Node_Str"",Integer.valueOf(101));
  testObject.put(""String_Node_Str"",Long.valueOf(102));
  testObject.put(""String_Node_Str"",Integer.valueOf(103));
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  UUID key=om.insert(""String_Node_Str"",testObject);
  testObject.put(""String_Node_Str"",Long.valueOf(200));
  testObject.put(""String_Node_Str"",Integer.valueOf(201));
  testObject.put(""String_Node_Str"",Long.valueOf(202));
  List<CQLStatement> insertStatements=Lists.newArrayList();
  for (  CIndex i : def1.getIndexes().values()) {
    om.getCqlGenerator_ONLY_FOR_TESTING().addCQLStatmentsForIndexInsert(true,insertStatements,def1,testObject,i,key,om.getCqlGenerator_ONLY_FOR_TESTING().makeFieldAndValueList(def1,testObject),null,null);
  }
  for (  CQLStatement s : insertStatements) {
    om.getCqlExecutor().executeSync(s);
  }
}","@Test public void testUpdateProcessor() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  CDefinition def1=om.getKeyspaceDefinition_ONLY_FOR_TESTING().getDefinitions().get(""String_Node_Str"");
  Map<String,Object> testObject=Maps.newTreeMap();
  testObject.put(""String_Node_Str"",Long.valueOf(100));
  testObject.put(""String_Node_Str"",Integer.valueOf(101));
  testObject.put(""String_Node_Str"",Long.valueOf(102));
  testObject.put(""String_Node_Str"",Integer.valueOf(103));
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  testObject.put(""String_Node_Str"",""String_Node_Str"");
  UUID key=om.insert(""String_Node_Str"",testObject);
  testObject.put(""String_Node_Str"",Long.valueOf(200));
  testObject.put(""String_Node_Str"",Integer.valueOf(201));
  testObject.put(""String_Node_Str"",Long.valueOf(202));
  testObject.put(""String_Node_Str"",Integer.valueOf(203));
  List<CQLStatement> insertStatements=Lists.newArrayList();
  for (  CIndex i : def1.getIndexes().values()) {
    om.getCqlGenerator_ONLY_FOR_TESTING().addCQLStatmentsForIndexInsert(true,insertStatements,def1,testObject,i,key,om.getCqlGenerator_ONLY_FOR_TESTING().makeFieldAndValueList(def1,testObject),null,null);
  }
  for (  CQLStatement s : insertStatements) {
    om.getCqlExecutor().executeSync(s);
  }
  CQLStatement cql=om.getCqlGenerator_ONLY_FOR_TESTING().makeInsertUpdateIndexStatement(def1,key,def1.makeIndexValues(testObject));
  om.getCqlExecutor().executeSync(cql);
  Map<String,Object> testObjectOriginal=Maps.newTreeMap();
  testObjectOriginal.put(""String_Node_Str"",Long.valueOf(100));
  testObjectOriginal.put(""String_Node_Str"",Integer.valueOf(101));
  testObjectOriginal.put(""String_Node_Str"",Long.valueOf(102));
  testObjectOriginal.put(""String_Node_Str"",Integer.valueOf(103));
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  testObjectOriginal.put(""String_Node_Str"",""String_Node_Str"");
  cql=om.getCqlGenerator_ONLY_FOR_TESTING().makeInsertUpdateIndexStatement(def1,key,def1.makeIndexValues(testObjectOriginal));
  om.getCqlExecutor().executeSync(cql);
  Map<String,Object> staticTableObject=om.getByKey(""String_Node_Str"",key);
  assertEquals(100L,staticTableObject.get(""String_Node_Str""));
  assertEquals(101,staticTableObject.get(""String_Node_Str""));
  assertEquals(103,staticTableObject.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",staticTableObject.get(""String_Node_Str""));
  Criteria criteria=new Criteria();
  SortedMap<String,Object> values=Maps.newTreeMap();
  values.put(""String_Node_Str"",Long.valueOf(200L));
  criteria.setIndexKeys(values);
  criteria.setLimit(0L);
  List<Map<String,Object>> indexObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,indexObjects.size());
  assertEquals(staticTableObject.get(""String_Node_Str""),indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(200L,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(201,indexObjects.get(0).get(""String_Node_Str""));
  assertEquals(203,indexObjects.get(0).get(""String_Node_Str""));
  Thread.sleep(3000);
  UpdateProcessor up=new UpdateProcessor(om);
  up.process();
}",0.6253390158853158
17445,"public public ObjectMapper getObjectMapper(){
  return objectMapper;
}","public ObjectMapper getObjectMapper(){
  return objectMapper;
}",0.9473684210526316
17446,"public public ObjectMapper getObjectMapper(){
  return objectMapper;
}","public ObjectMapper getObjectMapper(){
  return objectMapper;
}",0.9473684210526316
17447,"private String getFieldValue(Row row,CField field){
  Object fieldValue;
switch (field.getType()) {
case ASCII:
case VARCHAR:
case TEXT:
    fieldValue=row.getString(field.getName());
  break;
case BIGINT:
case COUNTER:
fieldValue=row.getLong(field.getName());
break;
case BLOB:
fieldValue=row.getBytes(field.getName());
break;
case BOOLEAN:
fieldValue=row.getBool(field.getName());
break;
case DECIMAL:
fieldValue=row.getDecimal(field.getName());
break;
case DOUBLE:
fieldValue=row.getDouble(field.getName());
break;
case FLOAT:
fieldValue=row.getFloat(field.getName());
break;
case INT:
fieldValue=row.getInt(field.getName());
break;
case TIMESTAMP:
fieldValue=row.getDate(field.getName());
if (fieldValue != null) {
fieldValue=((Date)fieldValue).getTime();
}
break;
case UUID:
case TIMEUUID:
fieldValue=row.getUUID(field.getName());
break;
case VARINT:
fieldValue=row.getVarint(field.getName());
break;
default :
fieldValue=null;
}
return (fieldValue == null ? null : fieldValue.toString());
}","private Object getFieldValue(Row row,CField field){
  Object fieldValue;
switch (field.getType()) {
case ASCII:
case VARCHAR:
case TEXT:
    fieldValue=row.getString(field.getName());
  break;
case BIGINT:
case COUNTER:
fieldValue=row.getLong(field.getName());
break;
case BLOB:
fieldValue=row.getBytes(field.getName());
break;
case BOOLEAN:
fieldValue=row.getBool(field.getName());
break;
case DECIMAL:
fieldValue=row.getDecimal(field.getName());
break;
case DOUBLE:
fieldValue=row.getDouble(field.getName());
break;
case FLOAT:
fieldValue=row.getFloat(field.getName());
break;
case INT:
fieldValue=row.getInt(field.getName());
break;
case TIMESTAMP:
fieldValue=row.getDate(field.getName());
if (fieldValue != null) {
fieldValue=((Date)fieldValue).getTime();
}
break;
case UUID:
case TIMEUUID:
fieldValue=row.getUUID(field.getName());
break;
case VARINT:
fieldValue=row.getVarint(field.getName());
break;
default :
fieldValue=null;
}
return (fieldValue == null ? null : fieldValue);
}",0.9883897021706208
17448,"@Override public CQLStatement next(){
  CQLStatement ret=CQLStatement.make(CQLTemplate.getQuery());
  List values=Lists.newArrayList(ret.getValues());
  values.add(0,this.shardIdIterator.next());
  values.add(Long.valueOf(numberRemaining));
  ret.setValues(values.toArray());
  ret.setCacheable(CQLTemplate.isCacheable());
  return ret;
}","@Override public CQLStatement next(){
  CQLStatement ret=CQLStatement.make(CQLTemplate.getQuery());
  List values=Lists.newArrayList(ret.getValues());
  values.add(0,this.shardIdIterator.next());
  ret.setValues(values.toArray());
  ret.setCacheable(CQLTemplate.isCacheable());
  return ret;
}",0.9286846275752774
17449,"protected static CQLStatement makeCQLforDeleteUUIDFromStaticTable(CDefinition def,UUID uuid,Long timestamp){
  Object[] values={timestamp,uuid};
  return CQLStatement.make(String.format(TEMPLATE_DELETE,makeTableName(def,null),""String_Node_Str""),values);
}","protected static CQLStatement makeCQLforDeleteUUIDFromStaticTable(CDefinition def,UUID uuid,Long timestamp){
  Object[] values={uuid};
  return CQLStatement.make(String.format(TEMPLATE_DELETE,makeTableName(def,null),timestamp,""String_Node_Str""),values);
}",0.9607843137254902
17450,"protected static CQLStatement makeCQLforDeleteUUIDFromIndex(CDefinition def,CIndex index,UUID uuid,Map<String,Object> indexValues,Long timestamp){
  List values=Lists.newArrayList(uuid,Long.valueOf(index.getShardingStrategy().getShardKey(uuid)));
  CQLStatement wheres=makeAndedEqualList(def,indexValues);
  values.addAll(Arrays.asList(wheres.getValues()));
  String whereCQL=String.format(""String_Node_Str"",wheres.getQuery());
  String query=String.format(TEMPLATE_DELETE,makeTableName(def,index),whereCQL);
  values.add(0,timestamp);
  return CQLStatement.make(query,values.toArray());
}","protected static CQLStatement makeCQLforDeleteUUIDFromIndex(CDefinition def,CIndex index,UUID uuid,Map<String,Object> indexValues,Long timestamp){
  List values=Lists.newArrayList(uuid,Long.valueOf(index.getShardingStrategy().getShardKey(uuid)));
  CQLStatement wheres=makeAndedEqualList(def,indexValues);
  values.addAll(Arrays.asList(wheres.getValues()));
  String whereCQL=String.format(""String_Node_Str"",wheres.getQuery());
  String query=String.format(TEMPLATE_DELETE,makeTableName(def,index),timestamp,whereCQL);
  return CQLStatement.make(query,values.toArray());
}",0.8992248062015504
17451,"@Override public CQLStatement next(){
  List values=Lists.newArrayList(CQLTemplate.getValues());
  values.add(0,this.keyIterator.next());
  values.add(Long.valueOf(numberRemaining));
  CQLStatement ret=CQLStatement.make(CQLTemplate.getQuery(),values.toArray());
  ret.setCacheable(CQLTemplate.isCacheable());
  return ret;
}","@Override public CQLStatement next(){
  List values=Lists.newArrayList(CQLTemplate.getValues());
  values.add(0,this.keyIterator.next());
  CQLStatement ret=CQLStatement.make(CQLTemplate.getQuery(),values.toArray());
  ret.setCacheable(CQLTemplate.isCacheable());
  return ret;
}",0.9253731343283582
17452,"private static Object typedObjectFromValueAndField(Object jsonValue,CField field){
  if (jsonValue == null) {
    return null;
  }
  Object fieldValue;
switch (field.getType()) {
case ASCII:
case VARCHAR:
case TEXT:
    Preconditions.checkArgument(String.class.isAssignableFrom(jsonValue.getClass()));
  fieldValue=jsonValue;
break;
case BIGINT:
case COUNTER:
fieldValue=longFromNumber(jsonValue);
break;
case BLOB:
throw new IllegalArgumentException();
case BOOLEAN:
fieldValue=booleanFromNumber(jsonValue);
break;
case DECIMAL:
fieldValue=jsonValue.getDecimal(field.getName());
break;
case DOUBLE:
fieldValue=jsonValue.getDouble(field.getName());
break;
case FLOAT:
fieldValue=jsonValue.getFloat(field.getName());
break;
case INT:
fieldValue=jsonValue.getInt(field.getName());
break;
case TIMESTAMP:
fieldValue=jsonValue.getDate(field.getName());
if (fieldValue != null) {
fieldValue=((Date)fieldValue).getTime();
}
break;
case UUID:
case TIMEUUID:
fieldValue=jsonValue.getUUID(field.getName());
break;
case VARINT:
fieldValue=jsonValue.getVarint(field.getName());
break;
default :
fieldValue=null;
}
return (fieldValue == null ? null : fieldValue.toString());
}","private static Object typedObjectFromValueAndField(Object jsonValue,CField field){
  if (jsonValue == null) {
    return null;
  }
  Object fieldValue;
switch (field.getType()) {
case ASCII:
case VARCHAR:
case TEXT:
    Preconditions.checkArgument(String.class.isAssignableFrom(jsonValue.getClass()));
  return jsonValue;
case BIGINT:
case COUNTER:
return longFromNumber(jsonValue);
case BLOB:
throw new IllegalArgumentException();
case BOOLEAN:
if (jsonValue instanceof Boolean) {
return jsonValue;
}
 else {
throw new IllegalArgumentException();
}
case DECIMAL:
if (jsonValue instanceof Float) {
return BigDecimal.valueOf(((Float)jsonValue).floatValue());
}
 else if (jsonValue instanceof Double) {
return BigDecimal.valueOf(((Double)jsonValue).doubleValue());
}
 else {
throw new IllegalArgumentException();
}
case DOUBLE:
if (jsonValue instanceof Double) {
return Double.valueOf(((Float)jsonValue).floatValue());
}
 else {
throw new IllegalArgumentException();
}
case FLOAT:
if (jsonValue instanceof Double) {
return Float.valueOf(((Float)jsonValue).floatValue());
}
 else {
throw new IllegalArgumentException();
}
case INT:
return intFromNumber(jsonValue);
case TIMESTAMP:
if (jsonValue instanceof Integer) {
return new Date(((Integer)jsonValue).longValue());
}
 else if (jsonValue instanceof Long) {
return new Date(((Long)jsonValue).longValue());
}
 else {
throw new IllegalArgumentException(""String_Node_Str"" + jsonValue + ""String_Node_Str""+ jsonValue.getClass()+ ""String_Node_Str"");
}
case UUID:
case TIMEUUID:
if (jsonValue instanceof String) {
return UUID.fromString((String)jsonValue);
}
 else {
throw new IllegalArgumentException();
}
case VARINT:
if (jsonValue instanceof String) {
return BigInteger.valueOf(Long.parseLong((String)jsonValue));
}
 else {
throw new IllegalArgumentException();
}
default :
return null;
}
}",0.3995997331554369
17453,"@Test public void testObjectMapper() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  Map<String,Object> testObject=TestHelpers.getTestObject(0);
  UUID key=om.insert(""String_Node_Str"",testObject);
  Map<String,Object> dbObject=om.getByKey(""String_Node_Str"",key);
  for (  String dbKey : dbObject.keySet()) {
    if (!dbKey.equals(""String_Node_Str"")) {
      assertEquals(testObject.get(dbKey),dbObject.get(dbKey));
    }
  }
  UUID key2=om.insert(""String_Node_Str"",TestHelpers.getTestObject(1));
  Criteria criteria=TestHelpers.getTestCriteria(0);
  List<Map<String,Object>> dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(2,dbObjects.size());
  om.delete(""String_Node_Str"",key);
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,dbObjects.size());
  Map<String,Object> testObject2=TestHelpers.getTestObject(2);
  UUID key3=om.update(""String_Node_Str"",key2,testObject2);
  Map<String,Object> dbObject2=om.getByKey(""String_Node_Str"",key3);
  for (  String dbKey : dbObject2.keySet()) {
    if (!dbKey.equals(""String_Node_Str"")) {
      assertEquals(testObject2.get(dbKey),dbObject2.get(dbKey));
    }
  }
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(0,dbObjects.size());
  Criteria criteria2=TestHelpers.getTestCriteria(1);
  dbObjects=om.list(""String_Node_Str"",criteria2);
  assertEquals(1,dbObjects.size());
  cm.teardown();
}","@Test public void testObjectMapper() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  String json=TestHelpers.readFileToString(this.getClass(),""String_Node_Str"");
  CKeyspaceDefinition definition=CKeyspaceDefinition.fromJsonString(json);
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  Map<String,Object> testObject=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(0),definition.getDefinitions().get(""String_Node_Str""));
  UUID key=om.insert(""String_Node_Str"",testObject);
  Map<String,Object> dbObject=om.getByKey(""String_Node_Str"",key);
  for (  String dbKey : dbObject.keySet()) {
    if (!dbKey.equals(""String_Node_Str"")) {
      assertEquals(testObject.get(dbKey),dbObject.get(dbKey));
    }
  }
  UUID key2=om.insert(""String_Node_Str"",JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(1),definition.getDefinitions().get(""String_Node_Str"")));
  Criteria criteria=TestHelpers.getTestCriteria(0);
  criteria.getIndexKeys().put(""String_Node_Str"",((Integer)criteria.getIndexKeys().get(""String_Node_Str"")).longValue());
  List<Map<String,Object>> dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(2,dbObjects.size());
  om.delete(""String_Node_Str"",key);
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(1,dbObjects.size());
  Map<String,Object> testObject2=JsonUtil.rhombusMapFromJsonMap(TestHelpers.getTestObject(2),definition.getDefinitions().get(""String_Node_Str""));
  UUID key3=om.update(""String_Node_Str"",key2,testObject2);
  Map<String,Object> dbObject2=om.getByKey(""String_Node_Str"",key3);
  for (  String dbKey : dbObject2.keySet()) {
    if (!dbKey.equals(""String_Node_Str"")) {
      assertEquals(testObject2.get(dbKey),dbObject2.get(dbKey));
    }
  }
  dbObjects=om.list(""String_Node_Str"",criteria);
  assertEquals(0,dbObjects.size());
  Criteria criteria2=TestHelpers.getTestCriteria(1);
  criteria2.getIndexKeys().put(""String_Node_Str"",((Integer)criteria2.getIndexKeys().get(""String_Node_Str"")).longValue());
  dbObjects=om.list(""String_Node_Str"",criteria2);
  assertEquals(1,dbObjects.size());
  cm.teardown();
}",0.8756017228274638
17454,"@Test public void testDateRangeQueries() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  CKeyspaceDefinition definition=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,this.getClass().getClassLoader(),""String_Node_Str"");
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  logger.debug(""String_Node_Str"",definition.getName());
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  List<Map<String,Object>> values=JsonUtil.rhombusMapFromResource(this.getClass().getClassLoader(),""String_Node_Str"");
  for (  Map<String,Object> object : values) {
    Long createdAt=Long.parseLong((String)object.get(""String_Node_Str""));
    logger.debug(""String_Node_Str"",createdAt);
    om.insert(""String_Node_Str"",TestHelpers.convertStringsToRealTypes(definition.getDefinitions().get(""String_Node_Str""),object),createdAt);
  }
  SortedMap<String,Object> indexValues=Maps.newTreeMap();
  indexValues.put(""String_Node_Str"",""String_Node_Str"");
  indexValues.put(""String_Node_Str"",""String_Node_Str"");
  indexValues.put(""String_Node_Str"",""String_Node_Str"");
  Criteria criteria=new Criteria();
  criteria.setIndexKeys(indexValues);
  criteria.setLimit(50L);
  List<Map<String,Object>> results=om.list(""String_Node_Str"",criteria);
  assertEquals(8,results.size());
  criteria.setStartTimestamp(1367366400000L);
  results=om.list(""String_Node_Str"",criteria);
  assertEquals(7,results.size());
  criteria.setStartTimestamp(1368489600000L);
  results=om.list(""String_Node_Str"",criteria);
  assertEquals(5,results.size());
}","@Test public void testDateRangeQueries() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  CKeyspaceDefinition definition=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,this.getClass().getClassLoader(),""String_Node_Str"");
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  logger.debug(""String_Node_Str"",definition.getName());
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  List<Map<String,Object>> values=JsonUtil.rhombusMapFromResource(this.getClass().getClassLoader(),""String_Node_Str"");
  for (  Map<String,Object> object : values) {
    Long createdAt=(Long)(object.get(""String_Node_Str""));
    logger.debug(""String_Node_Str"",createdAt);
    om.insert(""String_Node_Str"",JsonUtil.rhombusMapFromJsonMap(object,definition.getDefinitions().get(""String_Node_Str"")),createdAt);
  }
  SortedMap<String,Object> indexValues=Maps.newTreeMap();
  indexValues.put(""String_Node_Str"",UUID.fromString(""String_Node_Str""));
  indexValues.put(""String_Node_Str"",""String_Node_Str"");
  indexValues.put(""String_Node_Str"",UUID.fromString(""String_Node_Str""));
  Criteria criteria=new Criteria();
  criteria.setIndexKeys(indexValues);
  criteria.setLimit(50L);
  List<Map<String,Object>> results=om.list(""String_Node_Str"",criteria);
  assertEquals(8,results.size());
  criteria.setStartTimestamp(1367366400000L);
  results=om.list(""String_Node_Str"",criteria);
  assertEquals(7,results.size());
  criteria.setStartTimestamp(1368489600000L);
  results=om.list(""String_Node_Str"",criteria);
  assertEquals(5,results.size());
}",0.9083566324945636
17455,"/** 
 * This should never be used outside of testing
 * @param cql String of cql to execute
 */
public ResultSet executeCql(CQLStatement cql){
  if (logCql) {
    logger.debug(""String_Node_Str"",cql.getQuery());
  }
  if (cql.isPreparable()) {
    BoundStatement bs=boundStatementMap.get(cql.getQuery());
    if (bs == null) {
      PreparedStatement statement=session.prepare(cql.getQuery());
      bs=new BoundStatement(statement);
      boundStatementMap.put(cql.getQuery(),bs);
    }
    return session.execute(bs.bind(cql.getValues()));
  }
 else {
    return session.execute(cql.getQuery());
  }
}","/** 
 * This should never be used outside of testing
 * @param cql String of cql to execute
 */
public ResultSet executeCql(CQLStatement cql){
  if (logCql) {
    logger.debug(""String_Node_Str"",cql.getQuery());
  }
  if (cql.isPreparable()) {
    BoundStatement bs=boundStatementCache.get(cql.getQuery());
    if (bs == null) {
      PreparedStatement statement=session.prepare(cql.getQuery());
      bs=new BoundStatement(statement);
      if (cql.isCacheable()) {
        boundStatementCache.put(cql.getQuery(),bs);
      }
    }
    return session.execute(bs.bind(cql.getValues()));
  }
 else {
    return session.execute(cql.getQuery());
  }
}",0.9303442754203364
17456,"public ObjectMapper(Session session,CKeyspaceDefinition keyspaceDefinition){
  this.boundStatementMap=Maps.newHashMap();
  this.session=session;
  this.keyspaceDefinition=keyspaceDefinition;
  this.cqlGenerator=new CObjectCQLGenerator(keyspaceDefinition.getDefinitions(),null);
}","public ObjectMapper(Session session,CKeyspaceDefinition keyspaceDefinition){
  this.boundStatementCache=Maps.newHashMap();
  this.session=session;
  this.keyspaceDefinition=keyspaceDefinition;
  this.cqlGenerator=new CObjectCQLGenerator(keyspaceDefinition.getDefinitions(),null);
}",0.9857142857142858
17457,"@Override public CQLStatement next(){
  CQLStatement ret=CQLStatement.make(CQLTemplate.getQuery());
  List values=Lists.newArrayList(ret.getValues());
  values.add(0,this.shardIdIterator.next());
  values.add(Long.valueOf(numberRemaining));
  ret.setValues(values.toArray());
  return ret;
}","@Override public CQLStatement next(){
  CQLStatement ret=CQLStatement.make(CQLTemplate.getQuery());
  List values=Lists.newArrayList(ret.getValues());
  values.add(0,this.shardIdIterator.next());
  values.add(Long.valueOf(numberRemaining));
  ret.setValues(values.toArray());
  ret.setCacheable(CQLTemplate.isCacheable());
  return ret;
}",0.9252782193958664
17458,"@Override public CQLStatement next(){
  List values=Lists.newArrayList(CQLTemplate.getValues());
  values.add(0,this.keyIterator.next());
  values.add(Long.valueOf(numberRemaining));
  return CQLStatement.make(CQLTemplate.getQuery(),values.toArray());
}","@Override public CQLStatement next(){
  List values=Lists.newArrayList(CQLTemplate.getValues());
  values.add(0,this.keyIterator.next());
  values.add(Long.valueOf(numberRemaining));
  CQLStatement ret=CQLStatement.make(CQLTemplate.getQuery(),values.toArray());
  ret.setCacheable(CQLTemplate.isCacheable());
  return ret;
}",0.8526863084922011
17459,"private Object getFieldValue(Row row,CField field){
  Object fieldValue;
switch (field.getType()) {
case ASCII:
case VARCHAR:
case TEXT:
    fieldValue=row.getString(field.getName());
  break;
case BIGINT:
case COUNTER:
fieldValue=row.getLong(field.getName());
break;
case BLOB:
fieldValue=row.getBytes(field.getName());
break;
case BOOLEAN:
fieldValue=row.getBool(field.getName());
break;
case DECIMAL:
fieldValue=row.getDecimal(field.getName());
break;
case DOUBLE:
fieldValue=row.getDouble(field.getName());
break;
case FLOAT:
fieldValue=row.getFloat(field.getName());
break;
case INT:
fieldValue=row.getInt(field.getName());
break;
case TIMESTAMP:
fieldValue=row.getDate(field.getName());
if (fieldValue != null) {
fieldValue=((Date)fieldValue).getTime();
}
break;
case UUID:
case TIMEUUID:
fieldValue=row.getUUID(field.getName());
break;
case VARINT:
fieldValue=row.getVarint(field.getName());
break;
default :
fieldValue=null;
}
return (fieldValue == null ? null : fieldValue);
}","private Object getFieldValue(Row row,CField field){
  Object fieldValue;
switch (field.getType()) {
case ASCII:
case VARCHAR:
case TEXT:
    fieldValue=row.getString(field.getName());
  break;
case BIGINT:
case COUNTER:
fieldValue=row.getLong(field.getName());
break;
case BLOB:
fieldValue=row.getBytes(field.getName());
break;
case BOOLEAN:
fieldValue=row.getBool(field.getName());
break;
case DECIMAL:
fieldValue=row.getDecimal(field.getName());
break;
case DOUBLE:
fieldValue=row.getDouble(field.getName());
break;
case FLOAT:
fieldValue=row.getFloat(field.getName());
break;
case INT:
fieldValue=row.getInt(field.getName());
break;
case TIMESTAMP:
fieldValue=row.getDate(field.getName());
break;
case UUID:
case TIMEUUID:
fieldValue=row.getUUID(field.getName());
break;
case VARINT:
fieldValue=row.getVarint(field.getName());
break;
default :
fieldValue=null;
}
return (fieldValue == null ? null : fieldValue);
}",0.9637033140452392
17460,"@Override public CQLStatement next(){
  CQLStatement ret=CQLStatement.make(CQLTemplate.getQuery());
  List values=Lists.newArrayList(ret.getValues());
  values.add(0,this.shardIdIterator.next());
  ret.setValues(values.toArray());
  ret.setCacheable(CQLTemplate.isCacheable());
  return ret;
}","@Override public CQLStatement next(){
  CQLStatement ret=CQLStatement.make(String.format(CQLTemplate.getQuery(),numberRemaining));
  List values=Lists.newArrayList(ret.getValues());
  values.add(0,this.shardIdIterator.next());
  ret.setValues(values.toArray());
  ret.setCacheable(CQLTemplate.isCacheable());
  return ret;
}",0.9497568881685576
17461,"@Override public CQLStatement next(){
  List values=Lists.newArrayList(CQLTemplate.getValues());
  values.add(0,this.keyIterator.next());
  CQLStatement ret=CQLStatement.make(CQLTemplate.getQuery(),values.toArray());
  ret.setCacheable(CQLTemplate.isCacheable());
  return ret;
}","@Override public CQLStatement next(){
  List values=Lists.newArrayList(CQLTemplate.getValues());
  values.add(0,this.keyIterator.next());
  CQLStatement ret=CQLStatement.make(String.format(CQLTemplate.getQuery(),numberRemaining),values.toArray());
  ret.setCacheable(CQLTemplate.isCacheable());
  return ret;
}",0.9473684210526316
17462,"@Test public void testObjectTypes() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  CKeyspaceDefinition definition=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,this.getClass().getClassLoader(),""String_Node_Str"");
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  List<Map<String,Object>> values=JsonUtil.rhombusMapFromResource(this.getClass().getClassLoader(),""String_Node_Str"");
  Map<String,Object> data=JsonUtil.rhombusMapFromJsonMap(values.get(0),definition.getDefinitions().get(""String_Node_Str""));
  UUID uuid=om.insert(""String_Node_Str"",data);
  assertNotNull(uuid);
  Map<String,Object> returnedValues=om.getByKey(""String_Node_Str"",uuid);
  assertNotNull(returnedValues.get(""String_Node_Str""));
  logger.debug(""String_Node_Str"",returnedValues);
  for (  String returnedKey : returnedValues.keySet()) {
    if (!returnedKey.equals(""String_Node_Str"")) {
      Object insertValue=values.get(0).get(returnedKey);
      Object returnValue=returnedValues.get(returnedKey);
      assertEquals(insertValue,returnValue);
    }
  }
}","@Test public void testObjectTypes() throws Exception {
  logger.debug(""String_Node_Str"");
  ConnectionManager cm=getConnectionManager();
  CKeyspaceDefinition definition=JsonUtil.objectFromJsonResource(CKeyspaceDefinition.class,this.getClass().getClassLoader(),""String_Node_Str"");
  assertNotNull(definition);
  cm.buildKeyspace(definition,true);
  cm.setDefaultKeyspace(definition);
  ObjectMapper om=cm.getObjectMapper();
  List<Map<String,Object>> values=JsonUtil.rhombusMapFromResource(this.getClass().getClassLoader(),""String_Node_Str"");
  Map<String,Object> data=JsonUtil.rhombusMapFromJsonMap(values.get(0),definition.getDefinitions().get(""String_Node_Str""));
  UUID uuid=om.insert(""String_Node_Str"",data);
  assertNotNull(uuid);
  Map<String,Object> returnedValues=om.getByKey(""String_Node_Str"",uuid);
  assertNotNull(returnedValues.get(""String_Node_Str""));
  logger.debug(""String_Node_Str"",returnedValues);
  for (  String returnedKey : returnedValues.keySet()) {
    if (!returnedKey.equals(""String_Node_Str"")) {
      Object insertValue=data.get(returnedKey);
      Object returnValue=returnedValues.get(returnedKey);
      assertEquals(insertValue,returnValue);
    }
  }
}",0.992854140395124
17463,"public void testMakeCQLforGet() throws CQLGenerationException, CObjectParseException, IOException {
  Subject s=new Subject();
}","public void testMakeCQLforGet() throws CQLGenerationException, CObjectParseException, IOException {
  Subject s=new Subject();
  s.testMakeCQLforGet();
}",0.9110320284697508
17464,"protected static Map<String,ArrayList<String>> makeFieldAndValueList(CDefinition def,Map<String,String> data){
  ArrayList<String> fieldList=new ArrayList<String>(def.getFields().size());
  ArrayList<String> valueList=new ArrayList<String>(def.getFields().size());
  for (  CField f : def.getFields().values()) {
    fieldList.add(f.getName());
    valueList.add(getCQLValueString(f,data.get(f.getName())));
  }
  Map<String,ArrayList<String>> ret=Maps.newHashMap();
  ret.put(""String_Node_Str"",fieldList);
  ret.put(""String_Node_Str"",valueList);
  return ret;
}","protected static Map<String,ArrayList<String>> makeFieldAndValueList(CDefinition def,Map<String,String> data){
  ArrayList<String> fieldList=new ArrayList<String>(def.getFields().size());
  ArrayList<String> valueList=new ArrayList<String>(def.getFields().size());
  for (  CField f : def.getFields().values()) {
    if (data.get(f.getName()) != null) {
      fieldList.add(f.getName());
      valueList.add(getCQLValueString(f,data.get(f.getName())));
    }
  }
  Map<String,ArrayList<String>> ret=Maps.newHashMap();
  ret.put(""String_Node_Str"",fieldList);
  ret.put(""String_Node_Str"",valueList);
  return ret;
}",0.931063829787234
17465,"public Range<Long> getShardKeyRange(long timestampStart,long timestampEnd) throws ShardStrategyException {
  if (timestampStart == 0) {
    if (timestampEnd == 0) {
      throw new ShardStrategyException(""String_Node_Str"");
    }
 else {
      long end=getShardKey(timestampEnd);
      return Range.atMost(end);
    }
  }
 else {
    long start=getShardKey(timestampStart);
    if (timestampEnd == 0) {
      return Range.atLeast(start);
    }
 else {
      long end=getShardKey(timestampEnd);
      return Range.closed(start,end);
    }
  }
}","public Range<Long> getShardKeyRange(long timestampStart,long timestampEnd) throws ShardStrategyException {
  if (timestampStart == 0) {
    if (timestampEnd == 0) {
      throw new ShardStrategyException(""String_Node_Str"");
    }
 else {
      return Range.closed(1L,getShardKey(timestampEnd));
    }
  }
 else {
    long start=getShardKey(timestampStart);
    if (timestampEnd == 0) {
      return Range.closed(start,this.getShardKey(DateTime.now().getMillis()));
    }
 else {
      long end=getShardKey(timestampEnd);
      return Range.closed(start,end);
    }
  }
}",0.4995507637017071
17466,"/** 
 * Update objectType with key using values
 * @param objectType
 * @param key
 * @param values
 * @return new UUID of the object
 * @throws CQLGenerationException
 */
public UUID update(String objectType,UUID key,Map<String,String> values) throws CQLGenerationException {
  UUID newKey=UUIDs.startOf(key.timestamp());
  delete(objectType,key);
  return insert(objectType,values,newKey);
}","/** 
 * Update objectType with key using values
 * @param objectType
 * @param key
 * @param values
 * @return new UUID of the object
 * @throws CQLGenerationException
 */
public UUID update(String objectType,UUID key,Map<String,String> values) throws CQLGenerationException {
  UUID newKey=UUIDs.startOf(UUIDs.unixTimestamp(key));
  delete(objectType,key);
  return insert(objectType,values,newKey);
}",0.961006289308176
17467,"/** 
 * Delete objecttype with id key
 * @param objectType
 * @param key
 */
public void delete(String objectType,UUID key){
  CDefinition def=keyspaceDefinition.getDefinitions().get(objectType);
  Map<String,String> values=getByKey(objectType,key);
  CQLStatementIterator statementIterator=cqlGenerator.makeCQLforDelete(objectType,key,values,0);
  mapResults(statementIterator,def,0L);
}","/** 
 * Delete objecttype with id key
 * @param objectType
 * @param key
 */
public void delete(String objectType,UUID key){
  CDefinition def=keyspaceDefinition.getDefinitions().get(objectType);
  Map<String,String> values=getByKey(objectType,key);
  CQLStatementIterator statementIterator=cqlGenerator.makeCQLforDelete(objectType,key,values,null);
  mapResults(statementIterator,def,0L);
}",0.993581514762516
17468,"protected static CQLStatementIterator makeCQLforDelete(CDefinition def,UUID key,Map<String,String> data,long timestamp){
  if (timestamp == 0) {
    timestamp=System.currentTimeMillis();
  }
  List<String> ret=Lists.newArrayList();
  ret.add(makeCQLforDeleteUUIDFromStaticTable(def,key,timestamp));
  for (  CIndex i : def.getIndexes().values()) {
    ret.add(makeCQLforDeleteUUIDFromIndex(def,i,key,i.getIndexKeyAndValues(data),timestamp));
  }
  return new BoundedCQLStatementIterator(ret);
}","protected static CQLStatementIterator makeCQLforDelete(CDefinition def,UUID key,Map<String,String> data,Long timestamp){
  if (timestamp == null) {
    timestamp=Long.valueOf(System.currentTimeMillis());
  }
  List<String> ret=Lists.newArrayList();
  ret.add(makeCQLforDeleteUUIDFromStaticTable(def,key,timestamp));
  for (  CIndex i : def.getIndexes().values()) {
    ret.add(makeCQLforDeleteUUIDFromIndex(def,i,key,i.getIndexKeyAndValues(data),timestamp));
  }
  return new BoundedCQLStatementIterator(ret);
}",0.9791044776119404
17469,"protected static String makeInsertStatementStatic(String tableName,String fields,String values,UUID uuid,long timestamp,int ttl){
  return String.format(TEMPLATE_INSERT_STATIC,tableName,fields,uuid.toString(),values,timestamp + ""String_Node_Str"",(ttl == 0) ? ""String_Node_Str"" : (""String_Node_Str"" + ttl));
}","protected static String makeInsertStatementStatic(String tableName,String fields,String values,UUID uuid,Long timestamp,Integer ttl){
  return String.format(TEMPLATE_INSERT_STATIC,tableName,fields,uuid.toString(),values,timestamp + ""String_Node_Str"",(ttl == null) ? ""String_Node_Str"" : (""String_Node_Str"" + ttl));
}",0.9727126805778492
17470,"protected static String makeCQLforDeleteUUIDFromStaticTable(CDefinition def,UUID uuid,long timestamp){
  return String.format(TEMPLATE_DELETE,makeTableName(def,null),timestamp,""String_Node_Str"" + uuid.toString());
}","protected static String makeCQLforDeleteUUIDFromStaticTable(CDefinition def,UUID uuid,Long timestamp){
  return String.format(TEMPLATE_DELETE,makeTableName(def,null),timestamp,""String_Node_Str"" + uuid.toString());
}",0.9953488372093025
17471,"protected static CQLStatementIterator makeCQLforGet(CObjectShardList shardList,CDefinition def,SortedMap<String,String> indexvalues,CObjectOrdering ordering,long starttimestamp,long endtimestamp,long limit) throws CQLGenerationException {
  return makeCQLforGet(shardList,def,indexvalues,ordering,UUIDs.startOf(starttimestamp),UUIDs.endOf(endtimestamp),limit,true);
}","protected static CQLStatementIterator makeCQLforGet(CObjectShardList shardList,CDefinition def,SortedMap<String,String> indexvalues,CObjectOrdering ordering,Long starttimestamp,Long endtimestamp,Long limit) throws CQLGenerationException {
  UUID startUUID=(starttimestamp == null) ? null : UUIDs.startOf(starttimestamp.longValue());
  UUID endUUID=(endtimestamp == null) ? null : UUIDs.endOf(endtimestamp.longValue());
  return makeCQLforGet(shardList,def,indexvalues,ordering,startUUID,endUUID,limit,true);
}",0.6232876712328768
17472,"protected static String makeInsertStatementWideIndex(String tableName,String targetTableName,Long shardId,List<String> indexValues,long timestamp){
  String indexValuesString=Joiner.on(""String_Node_Str"").join(indexValues);
  return String.format(TEMPLATE_INSERT_WIDE_INDEX,tableName,targetTableName,indexValuesString,shardId,shardId + ""String_Node_Str"" + indexValuesString,timestamp);
}","protected static String makeInsertStatementWideIndex(String tableName,String targetTableName,long shardId,List<String> indexValues,Long timestamp){
  String indexValuesString=Joiner.on(""String_Node_Str"").join(indexValues);
  return String.format(TEMPLATE_INSERT_WIDE_INDEX,tableName,targetTableName,indexValuesString,shardId,shardId + ""String_Node_Str"" + indexValuesString,timestamp);
}",0.9067357512953368
17473,"protected static String makeCQLforDeleteUUIDFromIndex(CDefinition def,CIndex index,UUID uuid,Map<String,String> indexValues,long timestamp){
  String whereCQL=String.format(""String_Node_Str"",uuid.toString(),index.getShardingStrategy().getShardKey(uuid),makeAndedEqualList(def,indexValues));
  return String.format(TEMPLATE_DELETE,makeTableName(def,index),timestamp,whereCQL);
}","protected static String makeCQLforDeleteUUIDFromIndex(CDefinition def,CIndex index,UUID uuid,Map<String,String> indexValues,Long timestamp){
  String whereCQL=String.format(""String_Node_Str"",uuid.toString(),index.getShardingStrategy().getShardKey(uuid),makeAndedEqualList(def,indexValues));
  return String.format(TEMPLATE_DELETE,makeTableName(def,index),timestamp,whereCQL);
}",0.9973474801061007
17474,"protected static CQLStatementIterator makeCQLforInsert(@NotNull CDefinition def,@NotNull Map<String,String> data,@Nullable UUID uuid,long timestamp,int ttl) throws CQLGenerationException {
  List<String> ret=Lists.newArrayList();
  if (uuid == null) {
    uuid=UUIDs.timeBased();
  }
  if (timestamp == 0) {
    timestamp=System.currentTimeMillis();
  }
  if (!validateData(def,data)) {
    throw new CQLGenerationException(""String_Node_Str"");
  }
  Map<String,ArrayList<String>> fieldsAndValues=makeFieldAndValueList(def,data);
  ret.add(makeInsertStatementStatic(makeTableName(def,null),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),uuid,timestamp,ttl));
  for (  CIndex i : def.getIndexes().values()) {
    long shardId=i.getShardingStrategy().getShardKey(uuid);
    ret.add(makeInsertStatementWide(makeTableName(def,i),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),uuid,shardId,timestamp,ttl));
    if (!(i.getShardingStrategy() instanceof ShardingStrategyNone)) {
      ret.add(makeInsertStatementWideIndex(CObjectShardList.SHARD_INDEX_TABLE_NAME,makeTableName(def,i),shardId,i.getIndexValues(data),timestamp));
    }
  }
  return new BoundedCQLStatementIterator(ret);
}","protected static CQLStatementIterator makeCQLforInsert(@NotNull CDefinition def,@NotNull Map<String,String> data,@Nullable UUID uuid,Long timestamp,Integer ttl) throws CQLGenerationException {
  List<String> ret=Lists.newArrayList();
  if (uuid == null) {
    uuid=UUIDs.timeBased();
  }
  if (timestamp == 0) {
    timestamp=System.currentTimeMillis();
  }
  if (!validateData(def,data)) {
    throw new CQLGenerationException(""String_Node_Str"");
  }
  Map<String,ArrayList<String>> fieldsAndValues=makeFieldAndValueList(def,data);
  ret.add(makeInsertStatementStatic(makeTableName(def,null),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),uuid,timestamp,ttl));
  for (  CIndex i : def.getIndexes().values()) {
    long shardId=i.getShardingStrategy().getShardKey(uuid);
    ret.add(makeInsertStatementWide(makeTableName(def,i),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),uuid,shardId,timestamp,ttl));
    if (!(i.getShardingStrategy() instanceof ShardingStrategyNone)) {
      ret.add(makeInsertStatementWideIndex(CObjectShardList.SHARD_INDEX_TABLE_NAME,makeTableName(def,i),shardId,i.getIndexValues(data),timestamp));
    }
  }
  return new BoundedCQLStatementIterator(ret);
}",0.9953881629515756
17475,"protected static String makeInsertStatementWide(String tableName,String fields,String values,UUID uuid,long shardid,long timestamp,int ttl){
  return String.format(TEMPLATE_INSERT_WIDE,tableName,fields,uuid.toString(),shardid,values,timestamp + ""String_Node_Str"",(ttl == 0) ? ""String_Node_Str"" : (""String_Node_Str"" + ttl));
}","protected static String makeInsertStatementWide(String tableName,String fields,String values,UUID uuid,long shardid,Long timestamp,Integer ttl){
  return String.format(TEMPLATE_INSERT_WIDE,tableName,fields,uuid.toString(),shardid,values,timestamp + ""String_Node_Str"",(ttl == null) ? ""String_Node_Str"" : (""String_Node_Str"" + ttl));
}",0.974124809741248
17476,"public Range<Long> getShardKeyRange(long timestampStart,long timestampEnd) throws ShardStrategyException {
  if (timestampStart == 0) {
    if (timestampEnd == 0) {
      throw new ShardStrategyException(""String_Node_Str"");
    }
 else {
      return Range.closed(1L,getShardKey(timestampEnd));
    }
  }
 else {
    long start=getShardKey(timestampStart);
    if (timestampEnd == 0) {
      return Range.closed(start,this.getShardKey(DateTime.now().getMillis()));
    }
 else {
      long end=getShardKey(timestampEnd);
      return Range.closed(start,end);
    }
  }
}","public Range<Long> getShardKeyRange(Long timestampStart,Long timestampEnd) throws ShardStrategyException {
  if (timestampStart == null) {
    if (timestampEnd == null) {
      throw new ShardStrategyException(""String_Node_Str"");
    }
 else {
      return Range.closed(1L,getShardKey(Long.valueOf(timestampEnd)));
    }
  }
 else {
    long start=getShardKey(Long.valueOf(timestampStart));
    if (timestampEnd == null) {
      return Range.closed(start,this.getShardKey(DateTime.now().getMillis()));
    }
 else {
      long end=getShardKey(Long.valueOf(timestampEnd));
      return Range.closed(start,end);
    }
  }
}",0.9252728799328296
17477,"public void testShardingStrategyMonthly() throws ShardStrategyException {
  ShardingStrategyMonthly subject=new ShardingStrategyMonthly();
  DateTime d=new DateTime(2013,2,22,1,0,0,DateTimeZone.UTC);
  long actual=subject.getShardKey(d.getMillis());
  assertEquals(""String_Node_Str"",158,actual);
  subject=new ShardingStrategyMonthly();
  subject.setOffset(20);
  d=new DateTime(2013,2,22,1,0,0,DateTimeZone.UTC);
  actual=subject.getShardKey(d.getMillis());
  assertEquals(""String_Node_Str"",178,actual);
  subject=new ShardingStrategyMonthly();
  DateTime d1=new DateTime(2013,2,22,2,0,0,DateTimeZone.UTC);
  DateTime d2=new DateTime(2014,2,22,2,0,0,DateTimeZone.UTC);
  Range<Long> range=subject.getShardKeyRange(d1.getMillis(),d2.getMillis());
  assertEquals(""String_Node_Str"",158L,range.lowerEndpoint().longValue());
  assertEquals(""String_Node_Str"",170L,range.upperEndpoint().longValue());
  subject=new ShardingStrategyMonthly();
  d1=new DateTime(2014,2,22,2,0,0,DateTimeZone.UTC);
  range=subject.getShardKeyRange(d1.getMillis(),0);
  assertEquals(""String_Node_Str"",170L,range.lowerEndpoint().longValue());
  assertTrue(""String_Node_Str"",!range.hasUpperBound());
  assertTrue(""String_Node_Str"",range.hasLowerBound());
}","public void testShardingStrategyMonthly() throws ShardStrategyException {
  ShardingStrategyMonthly subject=new ShardingStrategyMonthly();
  DateTime d=new DateTime(2013,2,22,1,0,0,DateTimeZone.UTC);
  long actual=subject.getShardKey(d.getMillis());
  assertEquals(""String_Node_Str"",158,actual);
  subject=new ShardingStrategyMonthly();
  subject.setOffset(20);
  d=new DateTime(2013,2,22,1,0,0,DateTimeZone.UTC);
  actual=subject.getShardKey(d.getMillis());
  assertEquals(""String_Node_Str"",178,actual);
  subject=new ShardingStrategyMonthly();
  DateTime d1=new DateTime(2013,2,22,2,0,0,DateTimeZone.UTC);
  DateTime d2=new DateTime(2014,2,22,2,0,0,DateTimeZone.UTC);
  Range<Long> range=subject.getShardKeyRange(d1.getMillis(),d2.getMillis());
  assertEquals(""String_Node_Str"",158L,range.lowerEndpoint().longValue());
  assertEquals(""String_Node_Str"",170L,range.upperEndpoint().longValue());
  subject=new ShardingStrategyMonthly();
  d1=new DateTime(2014,2,22,2,0,0,DateTimeZone.UTC);
  range=subject.getShardKeyRange(Long.valueOf(d1.getMillis()),Long.valueOf(0));
  assertEquals(""String_Node_Str"",170L,range.lowerEndpoint().longValue());
  assertTrue(""String_Node_Str"",!range.hasUpperBound());
  assertTrue(""String_Node_Str"",range.hasLowerBound());
}",0.9871071716357775
17478,"public void testShardingStrategyNone() throws ShardStrategyException {
  ShardingStrategyNone subject=new ShardingStrategyNone();
  DateTime d=new DateTime(2013,2,22,1,0,0,DateTimeZone.UTC);
  long actual=subject.getShardKey(d.getMillis());
  assertEquals(""String_Node_Str"",1L,actual);
  subject=new ShardingStrategyNone();
  subject.setOffset(20);
  d=new DateTime(2013,2,22,1,0,0,DateTimeZone.UTC);
  actual=subject.getShardKey(d.getMillis());
  assertEquals(""String_Node_Str"",21L,actual);
  subject=new ShardingStrategyNone();
  DateTime d1=new DateTime(2013,2,22,2,0,0,DateTimeZone.UTC);
  DateTime d2=new DateTime(2014,2,22,2,0,0,DateTimeZone.UTC);
  Range<Long> range=subject.getShardKeyRange(d1.getMillis(),d2.getMillis());
  assertEquals(""String_Node_Str"",1L,range.lowerEndpoint().longValue());
  assertEquals(""String_Node_Str"",1L,range.upperEndpoint().longValue());
  subject=new ShardingStrategyNone();
  d1=new DateTime(2014,2,22,2,0,0,DateTimeZone.UTC);
  range=subject.getShardKeyRange(d1.getMillis(),0);
  assertEquals(""String_Node_Str"",1L,range.lowerEndpoint().longValue());
  assertTrue(""String_Node_Str"",!range.hasUpperBound());
  assertTrue(""String_Node_Str"",range.hasLowerBound());
}","public void testShardingStrategyNone() throws ShardStrategyException {
  ShardingStrategyNone subject=new ShardingStrategyNone();
  DateTime d=new DateTime(2013,2,22,1,0,0,DateTimeZone.UTC);
  long actual=subject.getShardKey(d.getMillis());
  assertEquals(""String_Node_Str"",1L,actual);
  subject=new ShardingStrategyNone();
  subject.setOffset(20);
  d=new DateTime(2013,2,22,1,0,0,DateTimeZone.UTC);
  actual=subject.getShardKey(d.getMillis());
  assertEquals(""String_Node_Str"",21L,actual);
  subject=new ShardingStrategyNone();
  DateTime d1=new DateTime(2013,2,22,2,0,0,DateTimeZone.UTC);
  DateTime d2=new DateTime(2014,2,22,2,0,0,DateTimeZone.UTC);
  Range<Long> range=subject.getShardKeyRange(d1.getMillis(),d2.getMillis());
  assertEquals(""String_Node_Str"",1L,range.lowerEndpoint().longValue());
  assertEquals(""String_Node_Str"",1L,range.upperEndpoint().longValue());
  subject=new ShardingStrategyNone();
  d1=new DateTime(2014,2,22,2,0,0,DateTimeZone.UTC);
  range=subject.getShardKeyRange(Long.valueOf(d1.getMillis()),Long.valueOf(0));
  assertEquals(""String_Node_Str"",1L,range.lowerEndpoint().longValue());
  assertTrue(""String_Node_Str"",!range.hasUpperBound());
  assertTrue(""String_Node_Str"",range.hasLowerBound());
}",0.986842105263158
17479,"protected static String makeCQLforDeleteUUIDFromIndex(CDefinition def,CIndex index,UUID uuid,Map<String,String> indexValues,long timestamp){
  String whereCQL=String.format(""String_Node_Str"",uuid.toString(),index.getShardingStrategy().getShardKey(uuid) + ""String_Node_Str"",makeAndedEqualList(def,indexValues));
  return String.format(TEMPLATE_DELETE,makeTableName(def,index),timestamp,whereCQL);
}","protected static String makeCQLforDeleteUUIDFromIndex(CDefinition def,CIndex index,UUID uuid,Map<String,String> indexValues,long timestamp){
  String whereCQL=String.format(""String_Node_Str"",uuid.toString(),index.getShardingStrategy().getShardKey(uuid),makeAndedEqualList(def,indexValues));
  return String.format(TEMPLATE_DELETE,makeTableName(def,index),timestamp,whereCQL);
}",0.9741602067183462
17480,"/** 
 * @param def - CIndex for the index for which to pull the shard list
 * @param indexValues - Values identifing the specific index for which to pull the shard list
 * @param ordering - ASC or DESC
 * @param start - Start UUID for bounding
 * @param end - End UUID for bounding
 * @return Single CQL statement needed to retrieve the list of shardids
 */
public static String makeCQLforGetShardIndexList(CDefinition def,SortedMap<String,String> indexValues,CObjectOrdering ordering,@Nullable UUID start,@Nullable UUID end){
  CIndex i=def.getIndex(indexValues);
  String indexValueString=Joiner.on(':').join(indexValues.values());
  String whereCQL=""String_Node_Str"";
  if (start != null) {
    whereCQL+=""String_Node_Str"" + i.getShardingStrategy().getShardKey(start);
  }
  if (end != null) {
    whereCQL+=""String_Node_Str"" + i.getShardingStrategy().getShardKey(end);
  }
  return String.format(TEMPLATE_SELECT_WIDE_INDEX,CObjectShardList.SHARD_INDEX_TABLE_NAME,makeTableName(def.getName(),i.getName()),indexValueString,whereCQL,ordering);
}","/** 
 * @param def - CIndex for the index for which to pull the shard list
 * @param indexValues - Values identifing the specific index for which to pull the shard list
 * @param ordering - ASC or DESC
 * @param start - Start UUID for bounding
 * @param end - End UUID for bounding
 * @return Single CQL statement needed to retrieve the list of shardids
 */
public static String makeCQLforGetShardIndexList(CDefinition def,SortedMap<String,String> indexValues,CObjectOrdering ordering,@Nullable UUID start,@Nullable UUID end){
  CIndex i=def.getIndex(indexValues);
  String indexValueString=Joiner.on(':').join(indexValues.values());
  String whereCQL=""String_Node_Str"";
  if (start != null) {
    whereCQL+=""String_Node_Str"" + i.getShardingStrategy().getShardKey(start);
  }
  if (end != null) {
    whereCQL+=""String_Node_Str"" + i.getShardingStrategy().getShardKey(end);
  }
  return String.format(TEMPLATE_SELECT_WIDE_INDEX,CObjectShardList.SHARD_INDEX_TABLE_NAME,makeTableName(def,i),indexValueString,whereCQL,ordering);
}",0.9903474903474904
17481,"protected static String makeCQLforDeleteUUIDFromStaticTable(CDefinition def,UUID uuid,long timestamp){
  return String.format(TEMPLATE_DELETE,makeTableName(def.getName(),null),timestamp,""String_Node_Str"" + uuid.toString());
}","protected static String makeCQLforDeleteUUIDFromStaticTable(CDefinition def,UUID uuid,long timestamp){
  return String.format(TEMPLATE_DELETE,makeTableName(def,null),timestamp,""String_Node_Str"" + uuid.toString());
}",0.9772727272727272
17482,"protected static String makeWideTableCreate(CDefinition def,CIndex index){
  return String.format(TEMPLATE_CREATE_WIDE,def.getName() + ""String_Node_Str"" + index.getName(),makeFieldList(def.getFields().values(),true),makeCommaList(index.getCompositeKeyList()));
}","protected static String makeWideTableCreate(CDefinition def,CIndex index){
  return String.format(TEMPLATE_CREATE_WIDE,makeTableName(def,index),makeFieldList(def.getFields().values(),true),makeCommaList(index.getCompositeKeyList()));
}",0.8732394366197183
17483,"protected static String makeCQLforDeleteUUIDFromIndex(CDefinition def,CIndex index,UUID uuid,Map<String,String> indexValues,long timestamp){
  String whereCQL=String.format(""String_Node_Str"",uuid.toString(),index.getShardingStrategy().getShardKey(uuid) + ""String_Node_Str"",makeAndedEqualList(def,indexValues));
  return String.format(TEMPLATE_DELETE,makeTableName(def.getName(),index.getName()),timestamp,whereCQL);
}","protected static String makeCQLforDeleteUUIDFromIndex(CDefinition def,CIndex index,UUID uuid,Map<String,String> indexValues,long timestamp){
  String whereCQL=String.format(""String_Node_Str"",uuid.toString(),index.getShardingStrategy().getShardKey(uuid) + ""String_Node_Str"",makeAndedEqualList(def,indexValues));
  return String.format(TEMPLATE_DELETE,makeTableName(def,index),timestamp,whereCQL);
}",0.9606879606879608
17484,"protected static String makeTableName(String objName,@Nullable String indexName){
  if (indexName == null) {
    return objName;
  }
 else {
    return objName + ""String_Node_Str"" + indexName;
  }
}","protected static String makeTableName(CDefinition def,@Nullable CIndex index){
  String objName=def.getName();
  if (index == null) {
    return objName;
  }
 else {
    String indexName=Joiner.on('_').join(index.getCompositeKeyList());
    return objName + ""String_Node_Str"" + indexName;
  }
}",0.6300813008130082
17485,"protected static CQLStatementIterator makeCQLforInsert(@NotNull CDefinition def,@NotNull Map<String,String> data,@Nullable UUID uuid,long timestamp,int ttl) throws CQLGenerationException {
  List<String> ret=Lists.newArrayList();
  if (uuid == null) {
    uuid=UUIDs.timeBased();
  }
  if (timestamp == 0) {
    timestamp=UUIDs.unixTimestamp(uuid);
  }
  if (!validateData(def,data)) {
    throw new CQLGenerationException(""String_Node_Str"");
  }
  Map<String,ArrayList<String>> fieldsAndValues=makeFieldAndValueList(def,data);
  ret.add(makeInsertStatementStatic(makeTableName(def.getName(),null),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),uuid,timestamp,ttl));
  for (  CIndex i : def.getIndexes().values()) {
    long shardId=i.getShardingStrategy().getShardKey(uuid);
    ret.add(makeInsertStatementWide(makeTableName(def.getName(),i.getName()),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),uuid,shardId,timestamp,ttl));
    if (!(i.getShardingStrategy() instanceof ShardingStrategyNone)) {
      ret.add(makeInsertStatementWideIndex(CObjectShardList.SHARD_INDEX_TABLE_NAME,makeTableName(def.getName(),i.getName()),shardId,i.getIndexValues(data),timestamp));
    }
  }
  return new BoundedCQLStatementIterator(ret);
}","protected static CQLStatementIterator makeCQLforInsert(@NotNull CDefinition def,@NotNull Map<String,String> data,@Nullable UUID uuid,long timestamp,int ttl) throws CQLGenerationException {
  List<String> ret=Lists.newArrayList();
  if (uuid == null) {
    uuid=UUIDs.timeBased();
  }
  if (timestamp == 0) {
    timestamp=UUIDs.unixTimestamp(uuid);
  }
  if (!validateData(def,data)) {
    throw new CQLGenerationException(""String_Node_Str"");
  }
  Map<String,ArrayList<String>> fieldsAndValues=makeFieldAndValueList(def,data);
  ret.add(makeInsertStatementStatic(makeTableName(def,null),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),uuid,timestamp,ttl));
  for (  CIndex i : def.getIndexes().values()) {
    long shardId=i.getShardingStrategy().getShardKey(uuid);
    ret.add(makeInsertStatementWide(makeTableName(def,i),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),uuid,shardId,timestamp,ttl));
    if (!(i.getShardingStrategy() instanceof ShardingStrategyNone)) {
      ret.add(makeInsertStatementWideIndex(CObjectShardList.SHARD_INDEX_TABLE_NAME,makeTableName(def,i),shardId,i.getIndexValues(data),timestamp));
    }
  }
  return new BoundedCQLStatementIterator(ret);
}",0.9780801209372638
17486,"protected static String makeInsertStatementWideIndex(String tableName,String targetTableName,Long shardId,List<String> indexValues,long timestamp){
  String indexValuesString=Joiner.on(""String_Node_Str"").join(indexValues);
  return String.format(TEMPLATE_INSERT_WIDE_INDEX,tableName,targetTableName,indexValuesString,shardId,shardId + indexValuesString,timestamp);
}","protected static String makeInsertStatementWideIndex(String tableName,String targetTableName,Long shardId,List<String> indexValues,long timestamp){
  String indexValuesString=Joiner.on(""String_Node_Str"").join(indexValues);
  return String.format(TEMPLATE_INSERT_WIDE_INDEX,tableName,targetTableName,indexValuesString,shardId,shardId + ""String_Node_Str"" + indexValuesString,timestamp);
}",0.973404255319149
17487,"protected static CQLStatementIterator makeCQLforInsert(@NotNull CDefinition def,@NotNull Map<String,String> data,@Nullable UUID uuid,long timestamp,int ttl) throws CQLGenerationException {
  List<String> ret=Lists.newArrayList();
  if (uuid == null) {
    uuid=UUIDs.timeBased();
  }
  if (timestamp == 0) {
    timestamp=UUIDs.unixTimestamp(uuid);
  }
  if (!validateData(def,data)) {
    throw new CQLGenerationException(""String_Node_Str"");
  }
  Map<String,ArrayList<String>> fieldsAndValues=makeFieldAndValueList(def,data);
  ret.add(makeInsertStatementStatic(makeTableName(def.getName(),null),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),uuid,timestamp,ttl));
  for (  CIndex i : def.getIndexes().values()) {
    if (i.passesAllFilters(data)) {
      long shardId=i.getShardingStrategy().getShardKey(uuid);
      ret.add(makeInsertStatementWide(makeTableName(def.getName(),i.getName()),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),uuid,shardId,timestamp,ttl));
      if (!(i.getShardingStrategy() instanceof ShardingStrategyNone)) {
        makeInsertStatementWideIndex(CObjectShardList.SHARD_INDEX_TABLE_NAME,makeTableName(def.getName(),i.getName()),shardId,i.getIndexValues(data),timestamp);
      }
    }
  }
  return new BoundedCQLStatementIterator(ret);
}","protected static CQLStatementIterator makeCQLforInsert(@NotNull CDefinition def,@NotNull Map<String,String> data,@Nullable UUID uuid,long timestamp,int ttl) throws CQLGenerationException {
  List<String> ret=Lists.newArrayList();
  if (uuid == null) {
    uuid=UUIDs.timeBased();
  }
  if (timestamp == 0) {
    timestamp=UUIDs.unixTimestamp(uuid);
  }
  if (!validateData(def,data)) {
    throw new CQLGenerationException(""String_Node_Str"");
  }
  Map<String,ArrayList<String>> fieldsAndValues=makeFieldAndValueList(def,data);
  ret.add(makeInsertStatementStatic(makeTableName(def.getName(),null),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),uuid,timestamp,ttl));
  for (  CIndex i : def.getIndexes().values()) {
    if (i.passesAllFilters(data)) {
      long shardId=i.getShardingStrategy().getShardKey(uuid);
      ret.add(makeInsertStatementWide(makeTableName(def.getName(),i.getName()),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),makeCommaList(fieldsAndValues.get(""String_Node_Str"")),uuid,shardId,timestamp,ttl));
      if (!(i.getShardingStrategy() instanceof ShardingStrategyNone)) {
        ret.add(makeInsertStatementWideIndex(CObjectShardList.SHARD_INDEX_TABLE_NAME,makeTableName(def.getName(),i.getName()),shardId,i.getIndexValues(data),timestamp));
      }
    }
  }
  return new BoundedCQLStatementIterator(ret);
}",0.9967753493371552
17488,"public Range<Long> getShardKeyRange(long timestampStart,long timestampEnd,boolean inclusive) throws ShardStrategyException {
  long start=getShardKey(timestampStart);
  long end=getShardKey(timestampEnd);
  if (start == 0) {
    if (end == 0) {
      throw new ShardStrategyException(""String_Node_Str"");
    }
 else {
      return inclusive ? Range.atMost(end) : Range.lessThan(end);
    }
  }
 else {
    if (end == 0) {
      return inclusive ? Range.atLeast(start) : Range.greaterThan(start);
    }
 else {
      return inclusive ? Range.closed(start,end) : Range.open(start,end);
    }
  }
}","public Range<Long> getShardKeyRange(long timestampStart,long timestampEnd) throws ShardStrategyException {
  if (timestampStart == 0) {
    if (timestampEnd == 0) {
      throw new ShardStrategyException(""String_Node_Str"");
    }
 else {
      long end=getShardKey(timestampEnd);
      return Range.atMost(end);
    }
  }
 else {
    long start=getShardKey(timestampStart);
    if (timestampEnd == 0) {
      return Range.atLeast(start);
    }
 else {
      long end=getShardKey(timestampEnd);
      return Range.closed(start,end);
    }
  }
}",0.4885764499121265
17489,"public void testMakeCQLforGet() throws CQLGenerationException, CObjectParseException, IOException {
  Subject s=new Subject();
}","public void testMakeCQLforGet() throws CQLGenerationException, CObjectParseException, IOException {
  Subject s=new Subject();
  s.testMakeCQLforGet();
}",0.9110320284697508
17490,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.uv_article_layout);
  final Article article=getIntent().getParcelableExtra(""String_Node_Str"");
  setTitle(article.getTitle());
  WebView webView=(WebView)findViewById(R.id.uv_webview);
  Utils.displayArticle(webView,article,this);
  findViewById(R.id.uv_container).setBackgroundColor(Utils.isDarkTheme(this) ? Color.BLACK : Color.WHITE);
  webView.setWebViewClient(new WebViewClient(){
    @Override public void onPageFinished(    WebView view,    String url){
      super.onPageFinished(view,url);
      findViewById(R.id.uv_helpful_section).setVisibility(View.VISIBLE);
    }
  }
);
  findViewById(R.id.uv_helpful_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Babayaga.track(Babayaga.Event.VOTE_ARTICLE,article.getId());
      Toast.makeText(ArticleActivity.this,R.string.uv_thanks,Toast.LENGTH_SHORT).show();
    }
  }
);
  findViewById(R.id.uv_unhelpful_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      UnhelpfulDialogFragment dialog=new UnhelpfulDialogFragment();
      dialog.show(getSupportFragmentManager(),""String_Node_Str"");
    }
  }
);
  Babayaga.track(Babayaga.Event.VIEW_ARTICLE,article.getId());
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.uv_article_layout);
  final Article article=getIntent().getParcelableExtra(""String_Node_Str"");
  setTitle(article.getTitle());
  webView=(WebView)findViewById(R.id.uv_webview);
  final View helpfulSection=findViewById(R.id.uv_helpful_section);
  Utils.displayArticle(webView,article,this);
  findViewById(R.id.uv_container).setBackgroundColor(Utils.isDarkTheme(this) ? Color.BLACK : Color.WHITE);
  webView.setWebViewClient(new WebViewClient(){
    @Override public void onPageFinished(    WebView view,    String url){
      super.onPageFinished(view,url);
      helpfulSection.setVisibility(View.VISIBLE);
    }
  }
);
  findViewById(R.id.uv_helpful_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Babayaga.track(Babayaga.Event.VOTE_ARTICLE,article.getId());
      Toast.makeText(ArticleActivity.this,R.string.uv_thanks,Toast.LENGTH_SHORT).show();
    }
  }
);
  findViewById(R.id.uv_unhelpful_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      UnhelpfulDialogFragment dialog=new UnhelpfulDialogFragment();
      dialog.show(getSupportFragmentManager(),""String_Node_Str"");
    }
  }
);
  Babayaga.track(Babayaga.Event.VIEW_ARTICLE,article.getId());
}",0.9549745824255628
17491,"@Override public void onPageFinished(WebView view,String url){
  super.onPageFinished(view,url);
  findViewById(R.id.uv_helpful_section).setVisibility(View.VISIBLE);
}","@Override public void onPageFinished(WebView view,String url){
  super.onPageFinished(view,url);
  helpfulSection.setVisibility(View.VISIBLE);
}",0.919614147909968
17492,"@Override public void finish(){
  WebView webview=(WebView)findViewById(R.id.uv_webview);
  webview.loadData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  super.finish();
}","@Override public void finish(){
  webView.loadData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  super.finish();
}",0.8064516129032258
17493,"protected Bitmap doInBackground(Void... voids){
  Bitmap bitmap=null;
  InputStream in=null;
  try {
    in=new java.net.URL(url).openStream();
    bitmap=BitmapFactory.decodeStream(in);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    in.close();
  }
  return bitmap;
}","protected Bitmap doInBackground(Void... voids){
  Bitmap bitmap=null;
  InputStream in=null;
  try {
    in=new java.net.URL(url).openStream();
    bitmap=BitmapFactory.decodeStream(in);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    try {
      in.close();
    }
 catch (    Exception ignored) {
    }
  }
  return bitmap;
}",0.9116279069767442
17494,"@SuppressLint({""String_Node_Str"",""String_Node_Str""}) protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (hasActionBar()) {
    ActionBar actionBar=getActionBar();
    actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
    actionBar.setListNavigationCallbacks(new ArrayAdapter<Topic>(this,android.R.layout.simple_spinner_dropdown_item,Session.getInstance().getTopics()){
      @Override public View getView(      int position,      View convertView,      ViewGroup parent){
        View view=super.getView(position,convertView,parent);
        ((TextView)view).setTextColor(Color.WHITE);
        return view;
      }
      @Override public View getDropDownView(      int position,      View convertView,      ViewGroup parent){
        View view=super.getDropDownView(position,convertView,parent);
        ((TextView)view).setTextColor(Color.WHITE);
        return view;
      }
    }
,new ActionBar.OnNavigationListener(){
      @Override @SuppressWarnings(""String_Node_Str"") public boolean onNavigationItemSelected(      int itemPosition,      long itemId){
        Topic topic=Session.getInstance().getTopics().get(itemPosition);
        Session.getInstance().setTopic(topic);
        ((LoadAllAdapter<Article>)getListAdapter()).reload();
        return true;
      }
    }
);
    actionBar.setSelectedNavigationItem(Session.getInstance().getTopics().indexOf(Session.getInstance().getTopic()));
  }
  setTitle(null);
  getListView().setDivider(null);
  setListAdapter(new LoadAllAdapter<Article>(this,R.layout.uv_text_item,new ArrayList<Article>()){
    @Override protected void loadPage(    int page,    Callback<List<Article>> callback){
      Topic topic=Session.getInstance().getTopic();
      if (topic == Topic.ALL_ARTICLES) {
        Article.loadAll(callback);
      }
 else {
        Article.loadForTopic(topic.getId(),callback);
      }
    }
    @Override protected void customizeLayout(    View view,    Article model){
      TextView text=(TextView)view.findViewById(R.id.uv_text);
      TextView text2=(TextView)view.findViewById(R.id.uv_text2);
      text.setText(model.getTitle());
      if (Session.getInstance().getTopic() == Topic.ALL_ARTICLES && model.getTopicName() != null) {
        text2.setVisibility(View.VISIBLE);
        text2.setText(model.getTopicName());
      }
 else {
        text2.setVisibility(View.GONE);
      }
    }
  }
);
  getListView().setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Article article=(Article)getListAdapter().getItem(position);
      Session.getInstance().setArticle(article);
      startActivity(new Intent(TopicActivity.this,ArticleActivity.class));
    }
  }
);
  Babayaga.track(Babayaga.Event.VIEW_TOPIC,Session.getInstance().getTopic().getId());
}","@SuppressLint({""String_Node_Str"",""String_Node_Str""}) protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (hasActionBar()) {
    ActionBar actionBar=getActionBar();
    actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
    SpinnerAdapter topicAdapter=new ArrayAdapter<Topic>(actionBar.getThemedContext(),android.R.layout.simple_spinner_dropdown_item,Session.getInstance().getTopics());
    actionBar.setListNavigationCallbacks(topicAdapter,new ActionBar.OnNavigationListener(){
      @Override @SuppressWarnings(""String_Node_Str"") public boolean onNavigationItemSelected(      int itemPosition,      long itemId){
        Topic topic=Session.getInstance().getTopics().get(itemPosition);
        Session.getInstance().setTopic(topic);
        ((LoadAllAdapter<Article>)getListAdapter()).reload();
        return true;
      }
    }
);
    actionBar.setSelectedNavigationItem(Session.getInstance().getTopics().indexOf(Session.getInstance().getTopic()));
  }
  setTitle(null);
  getListView().setDivider(null);
  setListAdapter(new LoadAllAdapter<Article>(this,R.layout.uv_text_item,new ArrayList<Article>()){
    @Override protected void loadPage(    int page,    Callback<List<Article>> callback){
      Topic topic=Session.getInstance().getTopic();
      if (topic == Topic.ALL_ARTICLES) {
        Article.loadAll(callback);
      }
 else {
        Article.loadForTopic(topic.getId(),callback);
      }
    }
    @Override protected void customizeLayout(    View view,    Article model){
      TextView text=(TextView)view.findViewById(R.id.uv_text);
      TextView text2=(TextView)view.findViewById(R.id.uv_text2);
      text.setText(model.getTitle());
      if (Session.getInstance().getTopic() == Topic.ALL_ARTICLES && model.getTopicName() != null) {
        text2.setVisibility(View.VISIBLE);
        text2.setText(model.getTopicName());
      }
 else {
        text2.setVisibility(View.GONE);
      }
    }
  }
);
  getListView().setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Article article=(Article)getListAdapter().getItem(position);
      Session.getInstance().setArticle(article);
      startActivity(new Intent(TopicActivity.this,ArticleActivity.class));
    }
  }
);
  Babayaga.track(Babayaga.Event.VIEW_TOPIC,Session.getInstance().getTopic().getId());
}",0.8705574261129817
17495,"protected Bitmap doInBackground(Void... voids){
  Bitmap bitmap=null;
  InputStream in=null;
  try {
    in=new java.net.URL(url).openStream();
    bitmap=BitmapFactory.decodeStream(in);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    in.close();
  }
  return bitmap;
}","protected Bitmap doInBackground(Void... voids){
  Bitmap bitmap=null;
  InputStream in=null;
  try {
    in=new java.net.URL(url).openStream();
    bitmap=BitmapFactory.decodeStream(in);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    try {
      in.close();
    }
 catch (    Exception ignored) {
    }
  }
  return bitmap;
}",0.9116279069767442
17496,"private void signIn(){
  User currentUser=Session.getInstance().getUser();
  if (currentUser != null && (email == null || email.equals(currentUser.getEmail()))) {
    callback.run();
  }
 else {
    email=email == null ? Session.getInstance().getEmail() : email;
    name=name == null ? Session.getInstance().getName() : name;
    if (email != null) {
      User.discover(email,new Callback<User>(){
        @Override public void onModel(        User model){
          promptToSignIn();
        }
        @Override public void onError(        RestResult error){
          createUser();
        }
      }
);
    }
 else {
      promptToSignIn();
    }
  }
}","private void signIn(){
  User currentUser=Session.getInstance().getUser();
  if (currentUser != null && (email == null || email.equals(currentUser.getEmail()))) {
    callback.run();
  }
 else   if (Session.getInstance().getAccessToken() != null) {
    callback.run();
  }
 else {
    email=email == null ? Session.getInstance().getEmail() : email;
    name=name == null ? Session.getInstance().getName() : name;
    if (email != null) {
      User.discover(email,new Callback<User>(){
        @Override public void onModel(        User model){
          promptToSignIn();
        }
        @Override public void onError(        RestResult error){
          createUser();
        }
      }
);
    }
 else {
      promptToSignIn();
    }
  }
}",0.938483547925608
17497,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  int type=getItemViewType(position);
  if (view == null) {
    if (type == CUSTOM_TEXT_FIELD) {
      view=inflater.inflate(R.layout.uv_text_field_item,null);
    }
 else     if (type == CUSTOM_PREDEFINED_FIELD) {
      view=inflater.inflate(R.layout.uv_select_field_item,null);
    }
 else {
      return super.getView(position,convertView,parent);
    }
  }
  if (type == CUSTOM_TEXT_FIELD) {
    TextView title=(TextView)view.findViewById(R.id.uv_header_text);
    final EditText field=(EditText)view.findViewById(R.id.uv_text_field);
    final CustomField customField=(CustomField)getItem(position);
    String value=customFieldValues.get(customField.getName());
    title.setText(customField.getName());
    field.setHint(R.string.uv_value);
    field.setInputType(EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE);
    field.setText(value);
    field.setOnFocusChangeListener(new View.OnFocusChangeListener(){
      @Override public void onFocusChange(      View v,      boolean hasFocus){
        if (!hasFocus) {
          customFieldValues.put(customField.getName(),field.getText().toString());
        }
      }
    }
);
  }
 else   if (type == CUSTOM_PREDEFINED_FIELD) {
    final CustomField customField=(CustomField)getItem(position);
    String value=customFieldValues.get(customField.getName());
    TextView title=(TextView)view.findViewById(R.id.uv_header_text);
    title.setText(customField.getName());
    Spinner field=(Spinner)view.findViewById(R.id.uv_select_field);
    field.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
      @Override public void onItemSelected(      AdapterView<?> parent,      View view,      int position,      long id){
        customFieldValues.put(customField.getName(),position == 0 ? null : customField.getPredefinedValues().get(position - 1));
      }
      @Override public void onNothingSelected(      AdapterView<?> parent){
      }
    }
);
    field.setAdapter(new SpinnerAdapter<String>(context,customField.getPredefinedValues()));
    if (value != null && customField.getPredefinedValues().contains(value))     field.setSelection(customField.getPredefinedValues().indexOf(value));
  }
 else {
    return super.getView(position,view,parent);
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  int type=getItemViewType(position);
  if (view == null) {
    if (type == CUSTOM_TEXT_FIELD) {
      view=inflater.inflate(R.layout.uv_text_field_item,null);
    }
 else     if (type == CUSTOM_PREDEFINED_FIELD) {
      view=inflater.inflate(R.layout.uv_select_field_item,null);
    }
 else {
      return super.getView(position,convertView,parent);
    }
  }
  if (type == CUSTOM_TEXT_FIELD) {
    TextView title=(TextView)view.findViewById(R.id.uv_header_text);
    final EditText field=(EditText)view.findViewById(R.id.uv_text_field);
    final CustomField customField=(CustomField)getItem(position);
    String value=customFieldValues.get(customField.getName());
    title.setText(customField.getName());
    field.setHint(R.string.uv_value);
    field.setInputType(EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE);
    field.setText(value);
    field.setOnFocusChangeListener(new View.OnFocusChangeListener(){
      @Override public void onFocusChange(      View v,      boolean hasFocus){
        if (!hasFocus) {
          customFieldValues.put(customField.getName(),field.getText().toString());
        }
      }
    }
);
  }
 else   if (type == CUSTOM_PREDEFINED_FIELD) {
    final CustomField customField=(CustomField)getItem(position);
    String value=customFieldValues.get(customField.getName());
    TextView title=(TextView)view.findViewById(R.id.uv_header_text);
    title.setText(customField.getName());
    Spinner field=(Spinner)view.findViewById(R.id.uv_select_field);
    field.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
      @Override public void onItemSelected(      AdapterView<?> parent,      View view,      int position,      long id){
        customFieldValues.put(customField.getName(),position == 0 ? null : customField.getPredefinedValues().get(position - 1));
      }
      @Override public void onNothingSelected(      AdapterView<?> parent){
      }
    }
);
    field.setAdapter(new SpinnerAdapter<String>(context,customField.getPredefinedValues()));
    if (value != null && customField.getPredefinedValues().contains(value)) {
      field.setSelection(customField.getPredefinedValues().indexOf(value) + 1);
    }
  }
 else {
    return super.getView(position,view,parent);
  }
  return view;
}",0.9957464908549554
17498,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.uv_article_layout);
  final Article article=Session.getInstance().getArticle();
  setTitle(article.getTitle());
  WebView webView=(WebView)findViewById(R.id.uv_webview);
  boolean darkTheme=Utils.displayArticle(webView,article,this);
  findViewById(R.id.uv_container).setBackgroundColor(darkTheme ? Color.BLACK : Color.WHITE);
  webView.setWebViewClient(new WebViewClient(){
    @Override public void onPageFinished(    WebView view,    String url){
      super.onPageFinished(view,url);
      findViewById(R.id.uv_helpful_section).setVisibility(View.VISIBLE);
    }
  }
);
  findViewById(R.id.uv_helpful_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Babayaga.track(Babayaga.Event.VOTE_ARTICLE,article.getId());
      Toast.makeText(ArticleActivity.this,R.string.uv_thanks,Toast.LENGTH_SHORT).show();
    }
  }
);
  findViewById(R.id.uv_unhelpful_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      UnhelpfulDialogFragment dialog=new UnhelpfulDialogFragment();
      dialog.show(getSupportFragmentManager(),""String_Node_Str"");
    }
  }
);
  Babayaga.track(Babayaga.Event.VIEW_ARTICLE,article.getId());
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.uv_article_layout);
  final Article article=Session.getInstance().getArticle();
  setTitle(article.getTitle());
  WebView webView=(WebView)findViewById(R.id.uv_webview);
  Utils.displayArticle(webView,article,this);
  findViewById(R.id.uv_container).setBackgroundColor(Utils.isDarkTheme(this) ? Color.BLACK : Color.WHITE);
  webView.setWebViewClient(new WebViewClient(){
    @Override public void onPageFinished(    WebView view,    String url){
      super.onPageFinished(view,url);
      findViewById(R.id.uv_helpful_section).setVisibility(View.VISIBLE);
    }
  }
);
  findViewById(R.id.uv_helpful_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Babayaga.track(Babayaga.Event.VOTE_ARTICLE,article.getId());
      Toast.makeText(ArticleActivity.this,R.string.uv_thanks,Toast.LENGTH_SHORT).show();
    }
  }
);
  findViewById(R.id.uv_unhelpful_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      UnhelpfulDialogFragment dialog=new UnhelpfulDialogFragment();
      dialog.show(getSupportFragmentManager(),""String_Node_Str"");
    }
  }
);
  Babayaga.track(Babayaga.Event.VIEW_ARTICLE,article.getId());
}",0.9190193164933136
17499,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.uv_article_instant_answer_question);
  webView=new WebView(getActivity());
  builder.setView(webView);
  Utils.displayArticle(webView,article,getActivity());
  builder.setNegativeButton(R.string.uv_no,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (getActivity() instanceof InstantAnswersActivity) {
        Deflection.trackDeflection(""String_Node_Str"",article);
        InstantAnswersActivity activity=(InstantAnswersActivity)getActivity();
        InstantAnswersAdapter adapter=(InstantAnswersAdapter)activity.getListAdapter();
        adapter.notHelpful();
      }
 else {
        UnhelpfulDialogFragment dialogFragment=new UnhelpfulDialogFragment();
        dialogFragment.show(getActivity().getSupportFragmentManager(),""String_Node_Str"");
      }
    }
  }
);
  builder.setPositiveButton(R.string.uv_very_yes,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      Babayaga.track(Babayaga.Event.VOTE_ARTICLE,article.getId());
      if (getActivity() instanceof InstantAnswersActivity) {
        Deflection.trackDeflection(""String_Node_Str"",article);
        HelpfulDialogFragment helpfulDialog=new HelpfulDialogFragment();
        helpfulDialog.show(getActivity().getSupportFragmentManager(),""String_Node_Str"");
      }
    }
  }
);
  Babayaga.track(Babayaga.Event.VIEW_ARTICLE,article.getId());
  return builder.create();
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.uv_article_instant_answer_question);
  webView=new WebView(getActivity());
  if (!Utils.isDarkTheme(getActivity())) {
    builder.setInverseBackgroundForced(true);
  }
  builder.setView(webView);
  Utils.displayArticle(webView,article,getActivity());
  builder.setNegativeButton(R.string.uv_no,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (getActivity() instanceof InstantAnswersActivity) {
        Deflection.trackDeflection(""String_Node_Str"",article);
        InstantAnswersActivity activity=(InstantAnswersActivity)getActivity();
        InstantAnswersAdapter adapter=(InstantAnswersAdapter)activity.getListAdapter();
        adapter.notHelpful();
      }
 else {
        UnhelpfulDialogFragment dialogFragment=new UnhelpfulDialogFragment();
        dialogFragment.show(getActivity().getSupportFragmentManager(),""String_Node_Str"");
      }
    }
  }
);
  builder.setPositiveButton(R.string.uv_very_yes,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      Babayaga.track(Babayaga.Event.VOTE_ARTICLE,article.getId());
      if (getActivity() instanceof InstantAnswersActivity) {
        Deflection.trackDeflection(""String_Node_Str"",article);
        HelpfulDialogFragment helpfulDialog=new HelpfulDialogFragment();
        helpfulDialog.show(getActivity().getSupportFragmentManager(),""String_Node_Str"");
      }
    }
  }
);
  Babayaga.track(Babayaga.Event.VIEW_ARTICLE,article.getId());
  return builder.create();
}",0.9723953695458591
17500,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.uv_post_a_comment);
  View view=getActivity().getLayoutInflater().inflate(R.layout.uv_comment_dialog,null);
  final EditText textField=(EditText)view.findViewById(R.id.uv_comment_edit_text);
  View email=view.findViewById(R.id.uv_email);
  View name=view.findViewById(R.id.uv_name);
  final EditText emailField=(EditText)email.findViewById(R.id.uv_text_field);
  final EditText nameField=(EditText)name.findViewById(R.id.uv_text_field);
  if (Session.getInstance().getUser() != null) {
    email.setVisibility(View.GONE);
    name.setVisibility(View.GONE);
  }
 else {
    emailField.setText(Session.getInstance().getEmail());
    ((TextView)email.findViewById(R.id.uv_header_text)).setText(R.string.uv_your_email_address);
    nameField.setText(Session.getInstance().getName());
    ((TextView)name.findViewById(R.id.uv_header_text)).setText(R.string.uv_your_name);
  }
  builder.setView(view);
  builder.setNegativeButton(R.string.uv_cancel,null);
  final Activity context=getActivity();
  builder.setPositiveButton(R.string.uv_post_comment,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      final String text=textField.getText().toString();
      if (!text.trim().isEmpty()) {
        SigninManager.signIn(getActivity(),emailField.getText().toString(),nameField.getText().toString(),new Runnable(){
          @Override public void run(){
            Comment.createComment(suggestion,text,new DefaultCallback<Comment>(getActivity()){
              @Override public void onModel(              Comment model){
                Toast.makeText(context,R.string.uv_msg_comment_posted,Toast.LENGTH_SHORT).show();
                suggestionDialog.commentPosted(model);
              }
            }
);
          }
        }
);
      }
    }
  }
);
  AlertDialog dialog=builder.create();
  dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
  return dialog;
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  if (!Utils.isDarkTheme(getActivity())) {
    builder.setInverseBackgroundForced(true);
  }
  builder.setTitle(R.string.uv_post_a_comment);
  View view=getActivity().getLayoutInflater().inflate(R.layout.uv_comment_dialog,null);
  final EditText textField=(EditText)view.findViewById(R.id.uv_comment_edit_text);
  View email=view.findViewById(R.id.uv_email);
  View name=view.findViewById(R.id.uv_name);
  final EditText emailField=(EditText)email.findViewById(R.id.uv_text_field);
  final EditText nameField=(EditText)name.findViewById(R.id.uv_text_field);
  if (Session.getInstance().getUser() != null) {
    email.setVisibility(View.GONE);
    name.setVisibility(View.GONE);
  }
 else {
    emailField.setText(Session.getInstance().getEmail());
    ((TextView)email.findViewById(R.id.uv_header_text)).setText(R.string.uv_your_email_address);
    nameField.setText(Session.getInstance().getName());
    ((TextView)name.findViewById(R.id.uv_header_text)).setText(R.string.uv_your_name);
  }
  builder.setView(view);
  builder.setNegativeButton(R.string.uv_cancel,null);
  final Activity context=getActivity();
  builder.setPositiveButton(R.string.uv_post_comment,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      final String text=textField.getText().toString();
      if (!text.trim().isEmpty()) {
        SigninManager.signIn(getActivity(),emailField.getText().toString(),nameField.getText().toString(),new Runnable(){
          @Override public void run(){
            Comment.createComment(suggestion,text,new DefaultCallback<Comment>(getActivity()){
              @Override public void onModel(              Comment model){
                Toast.makeText(context,R.string.uv_msg_comment_posted,Toast.LENGTH_SHORT).show();
                suggestionDialog.commentPosted(model);
              }
            }
);
          }
        }
);
      }
    }
  }
);
  AlertDialog dialog=builder.create();
  dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
  return dialog;
}",0.9786746159137812
17501,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.uv_helpful_article_message_question);
  builder.setNegativeButton(R.string.uv_no,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.cancel();
      getActivity().finish();
    }
  }
);
  builder.setPositiveButton(R.string.uv_yes,null);
  return builder.create();
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  if (!Utils.isDarkTheme(getActivity())) {
    builder.setInverseBackgroundForced(true);
  }
  builder.setTitle(R.string.uv_helpful_article_message_question);
  builder.setNegativeButton(R.string.uv_no,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.cancel();
      getActivity().finish();
    }
  }
);
  builder.setPositiveButton(R.string.uv_yes,null);
  return builder.create();
}",0.9159891598915988
17502,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.uv_password_dialog_title);
  View view=getActivity().getLayoutInflater().inflate(R.layout.uv_password_dialog,null);
  final EditText password=(EditText)view.findViewById(R.id.uv_password);
  builder.setView(view);
  builder.setNegativeButton(R.string.uv_cancel,null);
  builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    final DialogInterface dialog,    int which){
      AccessToken.authorize(Session.getInstance().getEmail(),password.getText().toString(),new DefaultCallback<AccessToken>(getActivity()){
        @Override public void onModel(        AccessToken model){
          Session.getInstance().setAccessToken(model);
          callback.run();
        }
      }
);
    }
  }
);
  AlertDialog dialog=builder.create();
  dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
  return dialog;
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.uv_password_dialog_title);
  if (!Utils.isDarkTheme(getActivity())) {
    builder.setInverseBackgroundForced(true);
  }
  View view=getActivity().getLayoutInflater().inflate(R.layout.uv_password_dialog,null);
  final EditText password=(EditText)view.findViewById(R.id.uv_password);
  builder.setView(view);
  builder.setNegativeButton(R.string.uv_cancel,null);
  builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    final DialogInterface dialog,    int which){
      AccessToken.authorize(Session.getInstance().getEmail(),password.getText().toString(),new DefaultCallback<AccessToken>(getActivity()){
        @Override public void onModel(        AccessToken model){
          Session.getInstance().setAccessToken(model);
          callback.run();
        }
      }
);
    }
  }
);
  AlertDialog dialog=builder.create();
  dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
  return dialog;
}",0.9587217043941412
17503,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  RequestToken.getRequestToken(new DefaultCallback<RequestToken>(getActivity()){
    @Override public void onModel(    RequestToken requestToken){
      Session.getInstance().setRequestToken(requestToken);
      if (requestTokenCallback != null)       requestTokenCallback.run();
    }
  }
);
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.uv_signin_dialog_title);
  LayoutInflater inflater=getActivity().getLayoutInflater();
  View view=inflater.inflate(R.layout.uv_signin_layout,null);
  emailField=(EditText)view.findViewById(R.id.uv_signin_email);
  nameField=(EditText)view.findViewById(R.id.uv_signin_name);
  passwordField=(EditText)view.findViewById(R.id.uv_signin_password);
  passwordFields=view.findViewById(R.id.uv_signin_password_fields);
  forgotPassword=(Button)view.findViewById(R.id.uv_signin_forgot_password);
  passwordFields.setVisibility(View.GONE);
  emailField.setText(email);
  nameField.setText(name);
  if (email != null)   discoverUser();
  forgotPassword.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      sendForgotPassword();
    }
  }
);
  emailField.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (v == emailField && hasFocus == false) {
        discoverUser();
      }
    }
  }
);
  builder.setView(view);
  builder.setNegativeButton(android.R.string.cancel,null);
  builder.setPositiveButton(R.string.uv_signin_dialog_ok,null);
  final AlertDialog dialog=builder.create();
  dialog.setOnShowListener(new DialogInterface.OnShowListener(){
    @Override public void onShow(    DialogInterface di){
      Button positiveButton=dialog.getButton(DialogInterface.BUTTON_POSITIVE);
      positiveButton.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          signIn();
        }
      }
);
      InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
      imm.showSoftInput(emailField,InputMethodManager.SHOW_IMPLICIT);
    }
  }
);
  dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
  return dialog;
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  RequestToken.getRequestToken(new DefaultCallback<RequestToken>(getActivity()){
    @Override public void onModel(    RequestToken requestToken){
      Session.getInstance().setRequestToken(requestToken);
      if (requestTokenCallback != null)       requestTokenCallback.run();
    }
  }
);
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  if (!Utils.isDarkTheme(getActivity())) {
    builder.setInverseBackgroundForced(true);
  }
  builder.setTitle(R.string.uv_signin_dialog_title);
  LayoutInflater inflater=getActivity().getLayoutInflater();
  View view=inflater.inflate(R.layout.uv_signin_layout,null);
  emailField=(EditText)view.findViewById(R.id.uv_signin_email);
  nameField=(EditText)view.findViewById(R.id.uv_signin_name);
  passwordField=(EditText)view.findViewById(R.id.uv_signin_password);
  passwordFields=view.findViewById(R.id.uv_signin_password_fields);
  forgotPassword=(Button)view.findViewById(R.id.uv_signin_forgot_password);
  passwordFields.setVisibility(View.GONE);
  emailField.setText(email);
  nameField.setText(name);
  if (email != null)   discoverUser();
  forgotPassword.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      sendForgotPassword();
    }
  }
);
  emailField.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (v == emailField && hasFocus == false) {
        discoverUser();
      }
    }
  }
);
  builder.setView(view);
  builder.setNegativeButton(android.R.string.cancel,null);
  builder.setPositiveButton(R.string.uv_signin_dialog_ok,null);
  final AlertDialog dialog=builder.create();
  dialog.setOnShowListener(new DialogInterface.OnShowListener(){
    @Override public void onShow(    DialogInterface di){
      Button positiveButton=dialog.getButton(DialogInterface.BUTTON_POSITIVE);
      positiveButton.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          signIn();
        }
      }
);
      InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
      imm.showSoftInput(emailField,InputMethodManager.SHOW_IMPLICIT);
    }
  }
);
  dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
  return dialog;
}",0.9805723835387508
17504,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.uv_subscribe_dialog_title);
  View view=getActivity().getLayoutInflater().inflate(R.layout.uv_subscribe_dialog,null);
  final EditText emailField=(EditText)view.findViewById(R.id.uv_email);
  emailField.setText(Session.getInstance().getEmail());
  builder.setView(view);
  builder.setNegativeButton(R.string.uv_nevermind,null);
  builder.setPositiveButton(R.string.uv_subscribe,new DialogInterface.OnClickListener(){
    @Override public void onClick(    final DialogInterface dialog,    int which){
      Session.getInstance().persistIdentity(Session.getInstance().getName(),emailField.getText().toString());
      SigninManager.signinForSubscribe(getActivity(),Session.getInstance().getEmail(),new Runnable(){
        @Override public void run(){
          suggestion.subscribe(new DefaultCallback<Suggestion>(getActivity()){
            @Override public void onModel(            Suggestion model){
              if (getActivity() instanceof InstantAnswersActivity)               Deflection.trackDeflection(""String_Node_Str"",model);
              suggestionDialog.suggestionSubscriptionUpdated(model);
              dialog.dismiss();
            }
          }
);
        }
      }
);
    }
  }
);
  AlertDialog dialog=builder.create();
  dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
  return dialog;
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.uv_subscribe_dialog_title);
  if (!Utils.isDarkTheme(getActivity())) {
    builder.setInverseBackgroundForced(true);
  }
  View view=getActivity().getLayoutInflater().inflate(R.layout.uv_subscribe_dialog,null);
  final EditText emailField=(EditText)view.findViewById(R.id.uv_email);
  emailField.setText(Session.getInstance().getEmail());
  builder.setView(view);
  builder.setNegativeButton(R.string.uv_nevermind,null);
  builder.setPositiveButton(R.string.uv_subscribe,new DialogInterface.OnClickListener(){
    @Override public void onClick(    final DialogInterface dialog,    int which){
      Session.getInstance().persistIdentity(Session.getInstance().getName(),emailField.getText().toString());
      SigninManager.signinForSubscribe(getActivity(),Session.getInstance().getEmail(),new Runnable(){
        @Override public void run(){
          suggestion.subscribe(new DefaultCallback<Suggestion>(getActivity()){
            @Override public void onModel(            Suggestion model){
              if (getActivity() instanceof InstantAnswersActivity)               Deflection.trackDeflection(""String_Node_Str"",model);
              suggestionDialog.suggestionSubscriptionUpdated(model);
              dialog.dismiss();
            }
          }
);
        }
      }
);
    }
  }
);
  AlertDialog dialog=builder.create();
  dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
  return dialog;
}",0.970315991062879
17505,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  setStyle(STYLE_NO_TITLE,getTheme());
  view=getActivity().getLayoutInflater().inflate(R.layout.uv_idea_dialog,null);
  headerView=getActivity().getLayoutInflater().inflate(R.layout.uv_idea_dialog_header,null);
  headerView.findViewById(R.id.uv_subscribe).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final DefaultCallback<Suggestion> callback=new DefaultCallback<Suggestion>(getActivity()){
        @Override public void onModel(        Suggestion model){
          if (getActivity() instanceof InstantAnswersActivity)           Deflection.trackDeflection(""String_Node_Str"",model);
          suggestionSubscriptionUpdated(model);
        }
      }
;
      if (suggestion.isSubscribed()) {
        suggestion.unsubscribe(callback);
      }
 else {
        if (Session.getInstance().getEmail() != null) {
          SigninManager.signinForSubscribe(getActivity(),Session.getInstance().getEmail(),new Runnable(){
            @Override public void run(){
              suggestion.subscribe(callback);
            }
          }
);
        }
 else {
          SubscribeDialogFragment dialog=new SubscribeDialogFragment(suggestion,SuggestionDialogFragment.this);
          dialog.show(getFragmentManager(),""String_Node_Str"");
        }
      }
    }
  }
);
  headerView.findViewById(R.id.uv_post_comment).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      CommentDialogFragment dialog=new CommentDialogFragment(suggestion,SuggestionDialogFragment.this);
      dialog.show(getActivity().getSupportFragmentManager(),""String_Node_Str"");
    }
  }
);
  ListView listView=(ListView)view.findViewById(R.id.uv_list);
  listView.addHeaderView(headerView);
  displaySuggestion(view,suggestion);
  adapter=getListAdapter();
  listView.setAdapter(adapter);
  listView.setDivider(null);
  listView.setOnScrollListener(new PaginationScrollListener(adapter));
  builder.setView(view);
  builder.setNegativeButton(R.string.uv_close,null);
  Babayaga.track(Babayaga.Event.VIEW_IDEA,suggestion.getId());
  return builder.create();
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  setStyle(STYLE_NO_TITLE,getTheme());
  if (!Utils.isDarkTheme(getActivity())) {
    builder.setInverseBackgroundForced(true);
  }
  view=getActivity().getLayoutInflater().inflate(R.layout.uv_idea_dialog,null);
  headerView=getActivity().getLayoutInflater().inflate(R.layout.uv_idea_dialog_header,null);
  headerView.findViewById(R.id.uv_subscribe).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final DefaultCallback<Suggestion> callback=new DefaultCallback<Suggestion>(getActivity()){
        @Override public void onModel(        Suggestion model){
          if (getActivity() instanceof InstantAnswersActivity)           Deflection.trackDeflection(""String_Node_Str"",model);
          suggestionSubscriptionUpdated(model);
        }
      }
;
      if (suggestion.isSubscribed()) {
        suggestion.unsubscribe(callback);
      }
 else {
        if (Session.getInstance().getEmail() != null) {
          SigninManager.signinForSubscribe(getActivity(),Session.getInstance().getEmail(),new Runnable(){
            @Override public void run(){
              suggestion.subscribe(callback);
            }
          }
);
        }
 else {
          SubscribeDialogFragment dialog=new SubscribeDialogFragment(suggestion,SuggestionDialogFragment.this);
          dialog.show(getFragmentManager(),""String_Node_Str"");
        }
      }
    }
  }
);
  headerView.findViewById(R.id.uv_post_comment).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      CommentDialogFragment dialog=new CommentDialogFragment(suggestion,SuggestionDialogFragment.this);
      dialog.show(getActivity().getSupportFragmentManager(),""String_Node_Str"");
    }
  }
);
  ListView listView=(ListView)view.findViewById(R.id.uv_list);
  listView.addHeaderView(headerView);
  displaySuggestion(view,suggestion);
  adapter=getListAdapter();
  listView.setAdapter(adapter);
  listView.setDivider(null);
  listView.setOnScrollListener(new PaginationScrollListener(adapter));
  builder.setView(view);
  builder.setNegativeButton(R.string.uv_close,null);
  Babayaga.track(Babayaga.Event.VIEW_IDEA,suggestion.getId());
  return builder.create();
}",0.9797517962116264
17506,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.uv_unhelpful_article_message_question);
  builder.setNegativeButton(R.string.uv_no,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.cancel();
    }
  }
);
  builder.setPositiveButton(R.string.uv_yes,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      getActivity().startActivity(new Intent(getActivity(),ContactActivity.class));
      dialog.cancel();
    }
  }
);
  return builder.create();
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  if (!Utils.isDarkTheme(getActivity())) {
    builder.setInverseBackgroundForced(true);
  }
  builder.setTitle(R.string.uv_unhelpful_article_message_question);
  builder.setNegativeButton(R.string.uv_no,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.cancel();
    }
  }
);
  builder.setPositiveButton(R.string.uv_yes,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      getActivity().startActivity(new Intent(getActivity(),ContactActivity.class));
      dialog.cancel();
    }
  }
);
  return builder.create();
}",0.9383697813121272
17507,"@SuppressLint(""String_Node_Str"") public static boolean displayArticle(WebView webView,Article article,Context context){
  TypedValue tv=new TypedValue();
  float[] hsv=new float[3];
  context.getTheme().resolveAttribute(android.R.attr.textColorPrimary,tv,true);
  Color.colorToHSV(context.getResources().getColor(tv.resourceId),hsv);
  boolean darkTheme=hsv[2] > 0.5f;
  String styles=""String_Node_Str"";
  if (darkTheme) {
    webView.setBackgroundColor(Color.BLACK);
    styles+=""String_Node_Str"";
  }
  String html=String.format(""String_Node_Str"",styles,article.getTitle(),article.getHtml());
  webView.setWebChromeClient(new WebChromeClient());
  webView.getSettings().setJavaScriptEnabled(true);
  webView.getSettings().setPluginState(PluginState.ON);
  webView.loadUrl(String.format(""String_Node_Str"",Uri.encode(html)));
  return darkTheme;
}","@SuppressLint(""String_Node_Str"") public static void displayArticle(WebView webView,Article article,Context context){
  String styles=""String_Node_Str"";
  if (isDarkTheme(context)) {
    webView.setBackgroundColor(Color.BLACK);
    styles+=""String_Node_Str"";
  }
  String html=String.format(""String_Node_Str"",styles,article.getTitle(),article.getHtml());
  webView.setWebChromeClient(new WebChromeClient());
  webView.getSettings().setJavaScriptEnabled(true);
  webView.getSettings().setPluginState(PluginState.ON);
  webView.loadUrl(String.format(""String_Node_Str"",Uri.encode(html)));
}",0.7452896022330775
17508,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getListView().setDivider(null);
  adapter=createAdapter();
  setListAdapter(adapter);
  getListView().setOnHierarchyChangeListener(adapter);
  getListView().setOnItemClickListener(adapter);
  getListView().setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);
  new InitManager(this,new Runnable(){
    @Override public void run(){
      onInitialize();
    }
  }
).init();
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getListView().setDivider(null);
  adapter=createAdapter();
  setListAdapter(adapter);
  getListView().setOnHierarchyChangeListener(adapter);
  getListView().setOnItemClickListener(adapter);
  getListView().setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);
  new InitManager(this,new Runnable(){
    @Override public void run(){
      onInitialize();
    }
  }
).init();
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN | WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
}",0.9482470784641068
17509,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setTitle(R.string.uv_feedback_forum);
  suggestions=new ArrayList<Suggestion>();
  getListView().setDivider(null);
  setListAdapter(new PaginatedAdapter<Suggestion>(this,R.layout.suggestion_item,suggestions){
    @Override public int getViewTypeCount(){
      return super.getViewTypeCount() + 2;
    }
    @Override public boolean isEnabled(    int position){
      return getItemViewType(position) == 2 || super.isEnabled(position);
    }
    @Override public int getCount(){
      return super.getCount() + 2;
    }
    @Override public int getItemViewType(    int position){
      if (position == 0)       return 2;
      if (position == 1)       return 3;
      return super.getItemViewType(position - 2);
    }
    @Override public Object getItem(    int position){
      return super.getItem(position - 2);
    }
    @Override public View getView(    int position,    View convertView,    ViewGroup parent){
      int type=getItemViewType(position);
      if (type == 2 || type == 3) {
        View view=convertView;
        if (view == null) {
          if (type == 2) {
            view=getLayoutInflater().inflate(R.layout.text_item,null);
            TextView text=(TextView)view.findViewById(R.id.text);
            text.setText(R.string.uv_post_an_idea);
            view.findViewById(R.id.divider).setVisibility(View.GONE);
            view.findViewById(R.id.text2).setVisibility(View.GONE);
          }
 else           if (type == 3) {
            view=getLayoutInflater().inflate(R.layout.header_item_light,null);
            TextView text=(TextView)view.findViewById(R.id.header_text);
            text.setText(R.string.uv_idea_text_heading);
          }
        }
        return view;
      }
 else {
        return super.getView(position,convertView,parent);
      }
    }
    @Override protected void customizeLayout(    View view,    Suggestion model){
      TextView textView=(TextView)view.findViewById(R.id.suggestion_title);
      textView.setText(model.getTitle());
      textView=(TextView)view.findViewById(R.id.subscriber_count);
      textView.setText(String.valueOf(model.getNumberOfSubscribers()));
      textView=(TextView)view.findViewById(R.id.suggestion_status);
      View colorView=view.findViewById(R.id.suggestion_status_color);
      if (model.getStatus() == null) {
        textView.setVisibility(View.GONE);
        colorView.setVisibility(View.GONE);
      }
 else {
        int color=Color.parseColor(model.getStatusColor());
        textView.setVisibility(View.VISIBLE);
        textView.setTextColor(color);
        textView.setText(model.getStatus().toUpperCase(Locale.getDefault()));
        colorView.setVisibility(View.VISIBLE);
        colorView.setBackgroundColor(color);
      }
    }
    @Override public void loadPage(    int page,    Callback<List<Suggestion>> callback){
      Suggestion.loadSuggestions(forum,page,callback);
    }
    @Override public RestTask search(    final String query,    final Callback<List<Suggestion>> callback){
      return Suggestion.searchSuggestions(forum,query,new Callback<List<Suggestion>>(){
        @Override public void onModel(        List<Suggestion> model){
          Babayaga.track(Babayaga.Event.SEARCH_IDEAS,query,model);
          callback.onModel(model);
        }
        @Override public void onError(        RestResult error){
          callback.onError(error);
        }
      }
);
    }
    @Override public int getTotalNumberOfObjects(){
      return forum.getNumberOfOpenSuggestions();
    }
  }
);
  getListView().setOnScrollListener(new PaginationScrollListener(getModelAdapter()){
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (forum != null)       super.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);
    }
  }
);
  getListView().setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (position == 0) {
        startActivity(new Intent(ForumActivity.this,PostIdeaActivity.class));
      }
 else       if (position != 1) {
        Suggestion suggestion=(Suggestion)getModelAdapter().getItem(position);
        Session.getInstance().setSuggestion(suggestion);
        SuggestionDialogFragment dialog=new SuggestionDialogFragment(suggestion);
        dialog.show(getSupportFragmentManager(),""String_Node_Str"");
      }
    }
  }
);
  Babayaga.track(Babayaga.Event.VIEW_FORUM,forum.getId());
  new InitManager(this,new Runnable(){
    @Override public void run(){
      loadForum();
      Session.getInstance().setSignInListener(new Runnable(){
        @Override public void run(){
          getModelAdapter().reload();
        }
      }
);
    }
  }
).init();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setTitle(R.string.uv_feedback_forum);
  suggestions=new ArrayList<Suggestion>();
  getListView().setDivider(null);
  setListAdapter(new PaginatedAdapter<Suggestion>(this,R.layout.suggestion_item,suggestions){
    @Override public int getViewTypeCount(){
      return super.getViewTypeCount() + 2;
    }
    @Override public boolean isEnabled(    int position){
      return getItemViewType(position) == 2 || super.isEnabled(position);
    }
    @Override public int getCount(){
      return super.getCount() + 2;
    }
    @Override public int getItemViewType(    int position){
      if (position == 0)       return 2;
      if (position == 1)       return 3;
      return super.getItemViewType(position - 2);
    }
    @Override public Object getItem(    int position){
      return super.getItem(position - 2);
    }
    @Override public View getView(    int position,    View convertView,    ViewGroup parent){
      int type=getItemViewType(position);
      if (type == 2 || type == 3) {
        View view=convertView;
        if (view == null) {
          if (type == 2) {
            view=getLayoutInflater().inflate(R.layout.text_item,null);
            TextView text=(TextView)view.findViewById(R.id.text);
            text.setText(R.string.uv_post_an_idea);
            view.findViewById(R.id.divider).setVisibility(View.GONE);
            view.findViewById(R.id.text2).setVisibility(View.GONE);
          }
 else           if (type == 3) {
            view=getLayoutInflater().inflate(R.layout.header_item_light,null);
            TextView text=(TextView)view.findViewById(R.id.header_text);
            text.setText(R.string.uv_idea_text_heading);
          }
        }
        return view;
      }
 else {
        return super.getView(position,convertView,parent);
      }
    }
    @Override protected void customizeLayout(    View view,    Suggestion model){
      TextView textView=(TextView)view.findViewById(R.id.suggestion_title);
      textView.setText(model.getTitle());
      textView=(TextView)view.findViewById(R.id.subscriber_count);
      textView.setText(String.valueOf(model.getNumberOfSubscribers()));
      textView=(TextView)view.findViewById(R.id.suggestion_status);
      View colorView=view.findViewById(R.id.suggestion_status_color);
      if (model.getStatus() == null) {
        textView.setVisibility(View.GONE);
        colorView.setVisibility(View.GONE);
      }
 else {
        int color=Color.parseColor(model.getStatusColor());
        textView.setVisibility(View.VISIBLE);
        textView.setTextColor(color);
        textView.setText(model.getStatus().toUpperCase(Locale.getDefault()));
        colorView.setVisibility(View.VISIBLE);
        colorView.setBackgroundColor(color);
      }
    }
    @Override public void loadPage(    int page,    Callback<List<Suggestion>> callback){
      Suggestion.loadSuggestions(forum,page,callback);
    }
    @Override public RestTask search(    final String query,    final Callback<List<Suggestion>> callback){
      return Suggestion.searchSuggestions(forum,query,new Callback<List<Suggestion>>(){
        @Override public void onModel(        List<Suggestion> model){
          Babayaga.track(Babayaga.Event.SEARCH_IDEAS,query,model);
          callback.onModel(model);
        }
        @Override public void onError(        RestResult error){
          callback.onError(error);
        }
      }
);
    }
    @Override public int getTotalNumberOfObjects(){
      return forum.getNumberOfOpenSuggestions();
    }
  }
);
  getListView().setOnScrollListener(new PaginationScrollListener(getModelAdapter()){
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (forum != null)       super.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);
    }
  }
);
  getListView().setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (position == 0) {
        startActivity(new Intent(ForumActivity.this,PostIdeaActivity.class));
      }
 else       if (position != 1) {
        Suggestion suggestion=(Suggestion)getModelAdapter().getItem(position);
        Session.getInstance().setSuggestion(suggestion);
        SuggestionDialogFragment dialog=new SuggestionDialogFragment(suggestion);
        dialog.show(getSupportFragmentManager(),""String_Node_Str"");
      }
    }
  }
);
  new InitManager(this,new Runnable(){
    @Override public void run(){
      loadForum();
      Session.getInstance().setSignInListener(new Runnable(){
        @Override public void run(){
          getModelAdapter().reload();
        }
      }
);
    }
  }
).init();
}",0.9939431269890155
17510,"private void loadForum(){
  if (Session.getInstance().getForum() != null) {
    forum=Session.getInstance().getForum();
    setTitle(forum.getName());
    getModelAdapter().loadMore();
    return;
  }
  Forum.loadForum(Session.getInstance().getConfig().getForumId(),new DefaultCallback<Forum>(this){
    @Override public void onModel(    Forum model){
      Session.getInstance().setForum(model);
      forum=model;
      setTitle(forum.getName());
      getModelAdapter().loadMore();
    }
  }
);
}","private void loadForum(){
  if (Session.getInstance().getForum() != null) {
    forum=Session.getInstance().getForum();
    Babayaga.track(Babayaga.Event.VIEW_FORUM,forum.getId());
    setTitle(forum.getName());
    getModelAdapter().loadMore();
    return;
  }
  Forum.loadForum(Session.getInstance().getConfig().getForumId(),new DefaultCallback<Forum>(this){
    @Override public void onModel(    Forum model){
      Session.getInstance().setForum(model);
      forum=model;
      setTitle(forum.getName());
      getModelAdapter().loadMore();
    }
  }
);
}",0.9423984891406988
17511,"public void init(){
  if (Session.getInstance().getClientConfig() == null) {
    ClientConfig.loadClientConfig(new DefaultCallback<ClientConfig>(context){
      @Override public void onModel(      ClientConfig model){
        Session.getInstance().setClientConfig(model);
        configDone=true;
        checkComplete();
      }
    }
);
  }
 else {
    configDone=true;
  }
  if (Session.getInstance().getUser() == null) {
    if (shouldSignIn()) {
      RequestToken.getRequestToken(new DefaultCallback<RequestToken>(context){
        @Override public void onModel(        RequestToken model){
          if (canceled)           return;
          Config config=Session.getInstance().getConfig();
          DefaultCallback<AccessTokenResult<User>> signinCallback=new DefaultCallback<AccessTokenResult<User>>(context){
            public void onModel(            AccessTokenResult<User> model){
              if (canceled)               return;
              Session.getInstance().setAccessToken(context,model.getAccessToken());
              Session.getInstance().setUser(model.getModel());
              userDone=true;
              checkComplete();
            }
          }
;
          if (config.getSsoToken() != null) {
            User.findOrCreate(config.getSsoToken(),signinCallback);
          }
 else {
            User.findOrCreate(config.getEmail(),config.getName(),config.getGuid(),signinCallback);
          }
        }
      }
);
    }
 else {
      AccessToken accessToken=BaseModel.load(context,""String_Node_Str"",AccessToken.class);
      if (accessToken != null) {
        Session.getInstance().setAccessToken(accessToken);
        User.loadCurrentUser(new DefaultCallback<User>(context){
          @Override public void onModel(          User model){
            Session.getInstance().setUser(model);
            userDone=true;
            checkComplete();
          }
        }
);
      }
 else {
        userDone=true;
        checkComplete();
      }
    }
  }
 else {
    userDone=true;
  }
  checkComplete();
}","public void init(){
  if (Session.getInstance().getClientConfig() == null) {
    ClientConfig.loadClientConfig(new DefaultCallback<ClientConfig>(context){
      @Override public void onModel(      ClientConfig model){
        Session.getInstance().setClientConfig(model);
        configDone=true;
        checkComplete();
      }
    }
);
  }
 else {
    configDone=true;
  }
  if (Session.getInstance().getUser() == null) {
    if (shouldSignIn()) {
      RequestToken.getRequestToken(new DefaultCallback<RequestToken>(context){
        @Override public void onModel(        RequestToken model){
          if (canceled)           return;
          Session.getInstance().setRequestToken(model);
          Config config=Session.getInstance().getConfig();
          DefaultCallback<AccessTokenResult<User>> signinCallback=new DefaultCallback<AccessTokenResult<User>>(context){
            public void onModel(            AccessTokenResult<User> model){
              if (canceled)               return;
              Session.getInstance().setAccessToken(context,model.getAccessToken());
              Session.getInstance().setUser(model.getModel());
              userDone=true;
              checkComplete();
            }
          }
;
          if (config.getSsoToken() != null) {
            User.findOrCreate(config.getSsoToken(),signinCallback);
          }
 else {
            User.findOrCreate(config.getEmail(),config.getName(),config.getGuid(),signinCallback);
          }
        }
      }
);
    }
 else {
      AccessToken accessToken=BaseModel.load(context,""String_Node_Str"",AccessToken.class);
      if (accessToken != null) {
        Session.getInstance().setAccessToken(accessToken);
        User.loadCurrentUser(new DefaultCallback<User>(context){
          @Override public void onModel(          User model){
            Session.getInstance().setUser(model);
            userDone=true;
            checkComplete();
          }
        }
);
      }
 else {
        userDone=true;
        checkComplete();
      }
    }
  }
 else {
    userDone=true;
  }
  checkComplete();
}",0.9864275327193408
17512,"public static void createSuggestion(Forum forum,Category category,String title,String text,int numberOfVotes,final Callback<Suggestion> callback){
  Map<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",String.valueOf(numberOfVotes));
  params.put(""String_Node_Str"",title);
  params.put(""String_Node_Str"",text);
  params.put(""String_Node_Str"",String.valueOf(category.getId()));
  doPost(apiPath(""String_Node_Str"",forum.getId()),params,new RestTaskCallback(callback){
    @Override public void onComplete(    JSONObject object) throws JSONException {
      callback.onModel(deserializeObject(object,""String_Node_Str"",Suggestion.class));
    }
  }
);
}","public static void createSuggestion(Forum forum,Category category,String title,String text,int numberOfVotes,final Callback<Suggestion> callback){
  Map<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",String.valueOf(numberOfVotes));
  params.put(""String_Node_Str"",title);
  params.put(""String_Node_Str"",text);
  if (category != null)   params.put(""String_Node_Str"",String.valueOf(category.getId()));
  doPost(apiPath(""String_Node_Str"",forum.getId()),params,new RestTaskCallback(callback){
    @Override public void onComplete(    JSONObject object) throws JSONException {
      callback.onModel(deserializeObject(object,""String_Node_Str"",Suggestion.class));
    }
  }
);
}",0.9827338129496402
17513,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getListView().setDivider(null);
  getListView().setPadding(10,0,10,0);
  setListAdapter(new ContactAdapter(this));
  getListView().setOnHierarchyChangeListener((ContactAdapter)getListAdapter());
  getListView().setOnItemClickListener((ContactAdapter)getListAdapter());
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getListView().setDivider(null);
  getListView().setPadding(10,0,10,0);
  setListAdapter(new ContactAdapter(this));
  getListView().setOnHierarchyChangeListener((ContactAdapter)getListAdapter());
  getListView().setOnItemClickListener((ContactAdapter)getListAdapter());
  getListView().setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);
}",0.915401301518438
17514,"@Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,Bundle savedInstanceState){
  mActivity=(RashrActivity)getActivity();
  final ScrollView root=(ScrollView)inflater.inflate(R.layout.fragment_recovery_system,container,false);
  mContext=root.getContext();
  final AppCompatTextView tvTitle=(AppCompatTextView)root.findViewById(R.id.tvSysName);
  tvTitle.setText(mTitle.toUpperCase());
  final AppCompatTextView tvDesc=(AppCompatTextView)root.findViewById(R.id.tvRecSysDesc);
  tvDesc.setText(mDesc);
  final AppCompatSpinner spVersions=(AppCompatSpinner)root.findViewById(R.id.spVersions);
  ArrayList<String> formatedVersions=new ArrayList<>();
  for (  String versionLinks : mVersions) {
    formatedVersions.add(formatName(versionLinks,mTitle));
  }
  final ArrayAdapter<String> adapter=new ArrayAdapter<>(root.getContext(),android.R.layout.simple_list_item_1,formatedVersions);
  spVersions.setAdapter(adapter);
  spVersions.setSelection(0);
  final AppCompatTextView tvDev=(AppCompatTextView)root.findViewById(R.id.tvDevName);
  tvDev.setText(mDev);
  final AppCompatImageView imLogo=(AppCompatImageView)root.findViewById(R.id.ivRecLogo);
  if (mLogo == 0) {
    root.removeView(imLogo);
  }
 else {
    imLogo.setImageResource(mLogo);
  }
  final AppCompatButton bFlash=(AppCompatButton)root.findViewById(R.id.bFlashRecovery);
  bFlash.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      flashSupportedRecovery(mTitle,mVersions.get(spVersions.getSelectedItemPosition()));
    }
  }
);
  final LinearLayout ScreenshotLayout=(LinearLayout)root.findViewById(R.id.ScreenshotLayout);
  if (mScreenshotURL == null) {
    Log.d(Const.RASHR_TAG,""String_Node_Str"");
    ((ViewGroup)ScreenshotLayout.getParent()).removeView(ScreenshotLayout);
  }
 else {
    try {
      Downloader jsonDownloader=new Downloader(new URL(mScreenshotURL + ""String_Node_Str""),new File(mContext.getExternalCacheDir(),""String_Node_Str""));
      jsonDownloader.setOverrideFile(true);
      jsonDownloader.setOnDownloadListener(new Downloader.OnDownloadListener(){
        @Override public void onSuccess(        File file){
          try {
            JSONArray arr=new JSONArray(Common.fileContent(file));
            for (int i=0; i < arr.length(); i++) {
              final String name=arr.get(i).toString();
              if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") || name.equals(""String_Node_Str""))               continue;
              Downloader imageDownloader=new Downloader(new URL(mScreenshotURL + ""String_Node_Str"" + name),new File(file.getParentFile(),name));
              imageDownloader.setOverrideFile(false);
              imageDownloader.setOnDownloadListener(new Downloader.OnDownloadListener(){
                @Override public void onSuccess(                File file){
                  AppCompatImageView iv=(AppCompatImageView)inflater.inflate(R.layout.recovery_screenshot,null);
                  Bitmap screenshot=BitmapFactory.decodeFile(file.toString());
                  iv.setImageBitmap(screenshot);
                  ScreenshotLayout.addView(iv);
                }
                @Override public void onFail(                Exception e){
                }
              }
);
              imageDownloader.download();
            }
          }
 catch (          JSONException e) {
            e.printStackTrace();
          }
catch (          IOException e) {
            onFail(e);
          }
        }
        @Override public void onFail(        Exception e){
          e.printStackTrace();
        }
      }
);
      jsonDownloader.download();
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
  }
  return root;
}","@Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,Bundle savedInstanceState){
  mActivity=(RashrActivity)getActivity();
  final ScrollView root=(ScrollView)inflater.inflate(R.layout.fragment_recovery_system,container,false);
  mContext=root.getContext();
  final AppCompatTextView tvTitle=(AppCompatTextView)root.findViewById(R.id.tvSysName);
  tvTitle.setText(mTitle.toUpperCase());
  final AppCompatTextView tvDesc=(AppCompatTextView)root.findViewById(R.id.tvRecSysDesc);
  tvDesc.setText(mDesc);
  final AppCompatSpinner spVersions=(AppCompatSpinner)root.findViewById(R.id.spVersions);
  ArrayList<String> formatedVersions=new ArrayList<>();
  for (  String versionLinks : mVersions) {
    formatedVersions.add(formatName(versionLinks,mTitle));
  }
  final ArrayAdapter<String> adapter=new ArrayAdapter<>(root.getContext(),android.R.layout.simple_list_item_1,formatedVersions);
  spVersions.setAdapter(adapter);
  spVersions.setSelection(0);
  final AppCompatTextView tvDev=(AppCompatTextView)root.findViewById(R.id.tvDevName);
  tvDev.setText(mDev);
  final AppCompatImageView imLogo=(AppCompatImageView)root.findViewById(R.id.ivRecLogo);
  if (mLogo == 0) {
    root.removeView(imLogo);
  }
 else {
    imLogo.setImageResource(mLogo);
  }
  final AppCompatButton bFlash=(AppCompatButton)root.findViewById(R.id.bFlashRecovery);
  bFlash.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      flashSupportedRecovery(mTitle,mVersions.get(spVersions.getSelectedItemPosition()));
    }
  }
);
  final LinearLayout ScreenshotLayout=(LinearLayout)root.findViewById(R.id.ScreenshotLayout);
  if (mScreenshotURL == null) {
    Log.d(Const.RASHR_TAG,""String_Node_Str"");
    ((ViewGroup)ScreenshotLayout.getParent()).removeView(ScreenshotLayout);
  }
 else {
    try {
      Downloader jsonDownloader=new Downloader(new URL(mScreenshotURL + ""String_Node_Str""),new File(mContext.getExternalCacheDir(),""String_Node_Str""));
      jsonDownloader.setOverrideFile(true);
      jsonDownloader.setOnDownloadListener(new Downloader.OnDownloadListener(){
        @Override public void onSuccess(        File file){
          try {
            JSONArray arr=new JSONArray(Common.fileContent(file));
            for (int i=0; i < arr.length(); i++) {
              final String name=arr.get(i).toString();
              if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") || name.equals(""String_Node_Str""))               continue;
              Downloader imageDownloader=new Downloader(new URL(mScreenshotURL + ""String_Node_Str"" + name),new File(file.getParentFile(),name));
              imageDownloader.setOverrideFile(false);
              imageDownloader.setOnDownloadListener(new Downloader.OnDownloadListener(){
                @Override public void onSuccess(                File file){
                  AppCompatImageView iv=(AppCompatImageView)inflater.inflate(R.layout.recovery_screenshot,null);
                  try {
                    Bitmap screenshot=BitmapFactory.decodeFile(file.toString());
                    iv.setImageBitmap(screenshot);
                    ScreenshotLayout.addView(iv);
                  }
 catch (                  OutOfMemoryError e) {
                    RashrApp.ERRORS.add(""String_Node_Str"" + file.toString() + ""String_Node_Str""+ e.toString());
                  }
                }
                @Override public void onFail(                Exception e){
                }
              }
);
              imageDownloader.download();
            }
          }
 catch (          JSONException e) {
            e.printStackTrace();
          }
catch (          IOException e) {
            onFail(e);
          }
        }
        @Override public void onFail(        Exception e){
          e.printStackTrace();
        }
      }
);
      jsonDownloader.download();
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
  }
  return root;
}",0.9703989703989704
17515,"public int getSizeOfFile(File path){
  try {
    String output;
    output=RashrApp.SHELL.execCommand(""String_Node_Str"" + path);
    return Integer.valueOf(output.split(""String_Node_Str"")[0]);
  }
 catch (  Exception e) {
    RashrApp.ERRORS.add(e.toString());
    e.printStackTrace();
  }
  return -1;
}","public int getSizeOfFile(File path){
  try {
    String output;
    output=RashrApp.SHELL.execCommand(""String_Node_Str"" + path + ""String_Node_Str"");
    return Integer.valueOf(output.split(""String_Node_Str"")[0]);
  }
 catch (  Exception e) {
    RashrApp.ERRORS.add(e.toString());
    e.printStackTrace();
  }
  return -1;
}",0.9681528662420382
17516,"public String lokiPatch() throws FailedExecuteCommand {
  File aboot=new File(""String_Node_Str"");
  File extracted_aboot=new File(mContext.getFilesDir(),""String_Node_Str"");
  File patched_CustomIMG=new File(mContext.getFilesDir(),mCustomIMG.getName() + ""String_Node_Str"");
  File loki_patch=new File(mContext.getFilesDir(),""String_Node_Str"");
  File loki_flash=new File(mContext.getFilesDir(),""String_Node_Str"");
  RashrApp.SHELL.execCommand(""String_Node_Str"" + aboot + ""String_Node_Str""+ extracted_aboot,true);
  RashrApp.SHELL.execCommand(loki_patch + ""String_Node_Str"" + mCustomIMG+ ""String_Node_Str""+ patched_CustomIMG+ ""String_Node_Str"",true);
  return loki_flash + ""String_Node_Str"" + patched_CustomIMG+ ""String_Node_Str"";
}","public String lokiPatch() throws FailedExecuteCommand {
  File aboot=new File(""String_Node_Str"");
  File extracted_aboot=new File(mContext.getFilesDir(),""String_Node_Str"");
  File patched_CustomIMG=new File(mContext.getFilesDir(),mCustomIMG.getName() + ""String_Node_Str"");
  File loki_patch=new File(mContext.getFilesDir(),""String_Node_Str"");
  File loki_flash=new File(mContext.getFilesDir(),""String_Node_Str"");
  RashrApp.SHELL.execCommand(""String_Node_Str"" + aboot + ""String_Node_Str""+ extracted_aboot+ ""String_Node_Str"",true);
  RashrApp.SHELL.execCommand(loki_patch + ""String_Node_Str"" + mCustomIMG+ ""String_Node_Str""+ patched_CustomIMG+ ""String_Node_Str"",true);
  return loki_flash + ""String_Node_Str"" + patched_CustomIMG+ ""String_Node_Str"";
}",0.9871534820824882
17517,"/** 
 * Extract files from APK, the files are stored under RashrApp/src/res/raw
 * @throws IOException Files can't be extracted
 */
private void extractFiles() throws IOException {
  Common.pushFileFromRAW(mContext,Const.RecoveryCollectionFile,R.raw.recovery_sums,mVersionChanged);
  Common.pushFileFromRAW(mContext,Const.KernelCollectionFile,R.raw.kernel_sums,mVersionChanged);
  Const.Busybox=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.Busybox,R.raw.busybox,mVersionChanged);
  try {
    RashrApp.SHELL.execCommand(""String_Node_Str"" + Const.Busybox);
  }
 catch (  FailedExecuteCommand failedExecuteCommand) {
    failedExecuteCommand.printStackTrace();
  }
  File PartLayoutsZip=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,PartLayoutsZip,R.raw.partlayouts,mVersionChanged);
  File flash_image=new File(getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,flash_image,R.raw.flash_image,mVersionChanged);
  File dump_image=new File(getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,dump_image,R.raw.dump_image,mVersionChanged);
  Const.LokiPatch=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.LokiPatch,R.raw.loki_patch,mVersionChanged);
  Const.LokiFlash=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.LokiFlash,R.raw.loki_flash,mVersionChanged);
}","/** 
 * Extract files from APK, the files are stored under RashrApp/src/res/raw
 * @throws IOException Files can't be extracted
 */
private void extractFiles() throws IOException {
  Common.pushFileFromRAW(mContext,Const.RecoveryCollectionFile,R.raw.recovery_sums,mVersionChanged);
  Common.pushFileFromRAW(mContext,Const.KernelCollectionFile,R.raw.kernel_sums,mVersionChanged);
  Const.Busybox=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.Busybox,R.raw.busybox_arm,mVersionChanged);
  try {
    RashrApp.SHELL.execCommand(""String_Node_Str"" + Const.Busybox);
  }
 catch (  FailedExecuteCommand failedExecuteCommand) {
    failedExecuteCommand.printStackTrace();
  }
  File PartLayoutsZip=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,PartLayoutsZip,R.raw.partlayouts,mVersionChanged);
  File flash_image=new File(getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,flash_image,R.raw.flash_image,mVersionChanged);
  File dump_image=new File(getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,dump_image,R.raw.dump_image,mVersionChanged);
  Const.LokiPatch=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.LokiPatch,R.raw.loki_patch,mVersionChanged);
  Const.LokiFlash=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.LokiFlash,R.raw.loki_flash,mVersionChanged);
}",0.9986357435197816
17518,"/** 
 * Checks if new version of Rashr is online and links to Play Store The current version number is stored on dslnexus.de/Android/rashr/version as plain text
 */
public void checkAppUpdates(){
  try {
    File versionsFile=new File(mContext.getFilesDir(),Const.VERSION);
    Downloader downloader=new Downloader(new URL(Const.RASHR_VERSION_URL),versionsFile);
    downloader.setOverrideFile(true);
    downloader.setOnDownloadListener(new Downloader.OnDownloadListener(){
      @Override public void onSuccess(      File file){
        try {
          if (BuildConfig.VERSION_CODE < Integer.valueOf(Common.fileContent(file).replace(""String_Node_Str"",""String_Node_Str""))) {
            new AlertDialog.Builder(mContext).setTitle(R.string.update_available).setMessage(R.string.download_update).setPositiveButton(R.string.open_playstore,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int which){
                startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + getPackageName())));
              }
            }
).setCancelable(false).show();
          }
 else {
            if (Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_UPDATE_HINTS)) {
              Toast.makeText(mContext,R.string.app_uptodate,Toast.LENGTH_SHORT).show();
            }
          }
        }
 catch (        IOException ignore) {
        }
      }
      @Override public void onFail(      Exception e){
        Toast.makeText(mContext,R.string.failed_update,Toast.LENGTH_SHORT).show();
      }
    }
);
    downloader.download();
  }
 catch (  MalformedURLException ignore) {
  }
}","/** 
 * Checks if new version of Rashr is online and links to Play Store The current version number is stored on dslnexus.de/Android/rashr/version as plain text
 */
public void checkAppUpdates(){
  try {
    File versionsFile=new File(mContext.getFilesDir(),Const.VERSION);
    Downloader downloader=new Downloader(new URL(Const.RASHR_VERSION_URL),versionsFile);
    downloader.setOverrideFile(true);
    downloader.setOnDownloadListener(new Downloader.OnDownloadListener(){
      @Override public void onSuccess(      File file){
        try {
          final int ServerVersion=Integer.valueOf(Common.fileContent(file).replace(""String_Node_Str"",""String_Node_Str""));
          if (BuildConfig.VERSION_CODE < ServerVersion) {
            new AlertDialog.Builder(mContext).setTitle(R.string.update_available).setMessage(R.string.download_update).setPositiveButton(R.string.open_playstore,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int which){
                startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + getPackageName())));
              }
            }
).setCancelable(false).show();
          }
 else {
            if (Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_UPDATE_HINTS)) {
              Toast.makeText(mContext,R.string.app_uptodate,Toast.LENGTH_SHORT).show();
            }
          }
        }
 catch (        IOException|NumberFormatException ignore) {
        }
      }
      @Override public void onFail(      Exception e){
        Toast.makeText(mContext,R.string.failed_update,Toast.LENGTH_SHORT).show();
      }
    }
);
    downloader.download();
  }
 catch (  MalformedURLException ignore) {
  }
}",0.9300841311285176
17519,"@Override public void onSuccess(File file){
  try {
    if (BuildConfig.VERSION_CODE < Integer.valueOf(Common.fileContent(file).replace(""String_Node_Str"",""String_Node_Str""))) {
      new AlertDialog.Builder(mContext).setTitle(R.string.update_available).setMessage(R.string.download_update).setPositiveButton(R.string.open_playstore,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + getPackageName())));
        }
      }
).setCancelable(false).show();
    }
 else {
      if (Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_UPDATE_HINTS)) {
        Toast.makeText(mContext,R.string.app_uptodate,Toast.LENGTH_SHORT).show();
      }
    }
  }
 catch (  IOException ignore) {
  }
}","@Override public void onSuccess(File file){
  try {
    final int ServerVersion=Integer.valueOf(Common.fileContent(file).replace(""String_Node_Str"",""String_Node_Str""));
    if (BuildConfig.VERSION_CODE < ServerVersion) {
      new AlertDialog.Builder(mContext).setTitle(R.string.update_available).setMessage(R.string.download_update).setPositiveButton(R.string.open_playstore,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + getPackageName())));
        }
      }
).setCancelable(false).show();
    }
 else {
      if (Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_UPDATE_HINTS)) {
        Toast.makeText(mContext,R.string.app_uptodate,Toast.LENGTH_SHORT).show();
      }
    }
  }
 catch (  IOException|NumberFormatException ignore) {
  }
}",0.9298934380257992
17520,"private void placeImgBack() throws IOException, FailedExecuteCommand {
  RashrApp.SHELL.execCommand(Const.Busybox + ""String_Node_Str"" + tmpFile+ ""String_Node_Str"");
  Common.copyFile(tmpFile,mCustomIMG);
}","private void placeImgBack() throws IOException, FailedExecuteCommand {
  RashrApp.SHELL.execCommand(Const.Busybox + ""String_Node_Str"" + tmpFile+ ""String_Node_Str"");
  RashrApp.SHELL.execCommand(Const.Busybox + ""String_Node_Str"" + tmpFile+ ""String_Node_Str""+ mCustomIMG+ ""String_Node_Str"");
}",0.75
17521,"protected void onPostExecute(Boolean success){
  pDialog.dismiss();
  RashrApp.TOOLBOX.remount(""String_Node_Str"",""String_Node_Str"");
  if (success) {
    if (tmpFile.delete()) {
      if (isJobFlash() || isJobRestore()) {
        if (!Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_REBOOT)) {
          showRebootDialog();
        }
      }
    }
    if (mOnTaskDoneListener != null) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          mOnTaskDoneListener.onSuccess();
        }
      }
);
    }
  }
 else {
    if (mOnTaskDoneListener != null) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          mOnTaskDoneListener.onFail(mException);
        }
      }
);
    }
  }
}","protected void onPostExecute(Boolean success){
  pDialog.dismiss();
  tmpFile.delete();
  RashrApp.TOOLBOX.remount(""String_Node_Str"",""String_Node_Str"");
  if (success) {
    if (isJobFlash() || isJobRestore()) {
      if (!Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_REBOOT)) {
        showRebootDialog();
      }
    }
    if (mOnTaskDoneListener != null) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          mOnTaskDoneListener.onSuccess();
        }
      }
);
    }
  }
 else {
    if (mOnTaskDoneListener != null) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          mOnTaskDoneListener.onFail(mException);
        }
      }
);
    }
  }
}",0.9569313593539704
17522,"@Override public void onClick(View v){
  String EXT;
  File Path;
  final int JOB;
  if (RecoveryBackup) {
    EXT=mDevice.getRecoveryExt();
    Path=Const.PathToRecoveryBackups;
    JOB=FlashUtil.JOB_BACKUP_RECOVERY;
  }
 else {
    EXT=mDevice.getKernelExt();
    Path=Const.PathToKernelBackups;
    JOB=FlashUtil.JOB_BACKUP_KERNEL;
  }
  CharSequence Name=""String_Node_Str"";
  if (optName.isChecked()) {
    Name=optName.getText() + EXT;
  }
 else {
    if (etFileName.getText() != null && !etFileName.getText().toString().equals(""String_Node_Str"")) {
      Name=etFileName.getText().toString();
    }
    if (Name.equals(""String_Node_Str"")) {
      Name=String.valueOf(etFileName.getHint());
    }
    if (!Name.toString().endsWith(EXT)) {
      Name=Name + EXT;
    }
  }
  final File fBACKUP=new File(Path,Name.toString());
  if (fBACKUP.exists()) {
    Toast.makeText(mActivity,R.string.backupalready,Toast.LENGTH_SHORT).show();
  }
 else {
    final FlashUtil BackupCreator=new FlashUtil(mActivity,fBACKUP,JOB);
    BackupCreator.setOnTaskDoneListener(new FlashUtil.OnTaskDoneListener(){
      @Override public void onSuccess(){
        ArrayAdapter<String> adapter;
        if (RecoveryBackup) {
          adapter=mAdapter.getRecoveryBackupFragment().getAdapter();
        }
 else {
          adapter=mAdapter.getKernelBackupFragment().getAdapter();
        }
        loadBackups(mActivity.getDevice(),adapter,RecoveryBackup);
      }
      @Override public void onFail(      Exception e){
      }
    }
);
    BackupCreator.execute();
  }
  dialog.dismiss();
}","@Override public void onClick(View v){
  String EXT;
  File Path;
  final int JOB;
  if (RecoveryBackup) {
    EXT=mDevice.getRecoveryExt();
    Path=Const.PathToRecoveryBackups;
    JOB=FlashUtil.JOB_BACKUP_RECOVERY;
  }
 else {
    EXT=mDevice.getKernelExt();
    Path=Const.PathToKernelBackups;
    JOB=FlashUtil.JOB_BACKUP_KERNEL;
  }
  CharSequence Name=""String_Node_Str"";
  if (optName.isChecked()) {
    Name=optName.getText() + EXT;
  }
 else {
    if (etFileName.getText() != null && !etFileName.getText().toString().equals(""String_Node_Str"")) {
      Name=etFileName.getText().toString();
    }
    if (Name.equals(""String_Node_Str"")) {
      Name=String.valueOf(etFileName.getHint());
    }
    if (!Name.toString().endsWith(EXT)) {
      Name=Name + EXT;
    }
  }
  final File fBACKUP=new File(Path,Name.toString());
  if (fBACKUP.exists()) {
    Toast.makeText(mActivity,R.string.backupalready,Toast.LENGTH_SHORT).show();
  }
 else {
    final FlashUtil BackupCreator=new FlashUtil(mActivity,fBACKUP,JOB);
    BackupCreator.setOnTaskDoneListener(new FlashUtil.OnTaskDoneListener(){
      @Override public void onSuccess(){
        mAdapter.reload();
      }
      @Override public void onFail(      Exception e){
      }
    }
);
    BackupCreator.execute();
  }
  dialog.dismiss();
}",0.8075313807531381
17523,"public ListFragment getKernelBackupFragment(){
  if (mKernelBackupFragment != null) {
    return mKernelBackupFragment;
  }
  mKernelBackupFragment=ListFragment.newInstance(mActivity,false);
  return mKernelBackupFragment;
}","public ListFragment getKernelBackupFragment(){
  if (mKernelBackupFragment != null) {
    return mKernelBackupFragment;
  }
  mKernelBackupFragment=ListFragment.newInstance(mActivity);
  loadBackups();
  return mKernelBackupFragment;
}",0.9498910675381264
17524,"public static void loadBackups(Device device,ArrayAdapter<String> adapter,boolean isRecovery){
  if ((isRecovery && !(device.isRecoveryDD() || device.isRecoveryMTD())) || !isRecovery && !(device.isKernelDD() || device.isKernelMTD())) {
    adapter.add(""String_Node_Str"");
  }
 else {
    File path=isRecovery ? Const.PathToRecoveryBackups : Const.PathToKernelBackups;
    if (path.listFiles() != null) {
      File FileList[]=path.listFiles();
      adapter.clear();
      for (      File backup : FileList) {
        if (!backup.isDirectory())         adapter.add(backup.getName());
      }
    }
  }
}","private void loadBackups(){
  if (mRecoveryBackupFragment != null) {
    mRecoveryBackupFragment.getAdapter().clear();
    if (!(mDevice.isRecoveryDD() || mDevice.isRecoveryMTD())) {
      mRecoveryBackupFragment.getAdapter().add(""String_Node_Str"");
    }
 else {
      File path=Const.PathToRecoveryBackups;
      if (path.listFiles() != null) {
        File FileList[]=path.listFiles();
        for (        File backup : FileList) {
          if (!backup.isDirectory()) {
            mRecoveryBackupFragment.getAdapter().add(backup.getName());
          }
        }
      }
    }
  }
  if (mKernelBackupFragment != null) {
    mKernelBackupFragment.getAdapter().clear();
    if (!(mDevice.isKernelDD() || mDevice.isKernelMTD())) {
      mKernelBackupFragment.getAdapter().add(""String_Node_Str"");
    }
 else {
      File path=Const.PathToKernelBackups;
      if (path.listFiles() != null) {
        File FileList[]=path.listFiles();
        for (        File backup : FileList) {
          if (!backup.isDirectory()) {
            mKernelBackupFragment.getAdapter().add(backup.getName());
          }
        }
      }
    }
  }
}",0.4009216589861751
17525,"public static void showPopup(final RashrActivity activity,final View v,final boolean isRecovery,final ArrayAdapter<String> adapter,final BackupRestorePagerAdapter pagerAdapter){
  PopupMenu popup=new PopupMenu(activity,v);
  popup.getMenuInflater().inflate(R.menu.bakmgr_menu,popup.getMenu());
  popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem menuItem){
      final CharSequence text=((AppCompatTextView)v).getText();
      try {
        final String FileName=text.toString();
        final AppCompatDialog dialog=new AppCompatDialog(activity);
        dialog.setTitle(R.string.setname);
        dialog.setContentView(R.layout.dialog_input);
        final AppCompatButton bGo=(AppCompatButton)dialog.findViewById(R.id.bGoBackup);
        final AppCompatEditText etFileName=(AppCompatEditText)dialog.findViewById(R.id.etFileName);
        final File path=isRecovery ? Const.PathToRecoveryBackups : Const.PathToKernelBackups;
switch (menuItem.getItemId()) {
case R.id.iRestore:
          FlashUtil RestoreUtil=new FlashUtil(activity,new File(path,FileName),isRecovery ? FlashUtil.JOB_RESTORE_RECOVERY : FlashUtil.JOB_RESTORE_KERNEL);
        RestoreUtil.execute();
      return true;
case R.id.iRename:
    etFileName.setHint(FileName);
  bGo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      String Name;
      if (etFileName.getText() != null && etFileName.isEnabled() && !etFileName.getText().toString().equals(""String_Node_Str"")) {
        Name=etFileName.getText().toString();
      }
 else {
        Name=String.valueOf(etFileName.getHint());
      }
      if (!Name.endsWith(activity.getDevice().getRecoveryExt())) {
        Name=Name + activity.getDevice().getRecoveryExt();
      }
      File renamedBackup=new File(path,Name);
      if (renamedBackup.exists()) {
        Toast.makeText(activity,R.string.backupalready,Toast.LENGTH_SHORT).show();
      }
 else {
        File Backup=new File(path,FileName);
        if (Backup.renameTo(renamedBackup)) {
          loadBackups(activity.getDevice(),adapter,isRecovery);
        }
 else {
          Toast.makeText(activity,R.string.rename_failed,Toast.LENGTH_SHORT).show();
        }
      }
      dialog.dismiss();
    }
  }
);
dialog.show();
return true;
case R.id.iDeleteBackup:
if (new File(path,text.toString()).delete()) {
Toast.makeText(activity,activity.getString(R.string.bak_deleted),Toast.LENGTH_SHORT).show();
ArrayAdapter<String> adapter;
if (isRecovery) {
adapter=pagerAdapter.getRecoveryBackupFragment().getAdapter();
}
 else {
adapter=pagerAdapter.getKernelBackupFragment().getAdapter();
}
loadBackups(activity.getDevice(),adapter,isRecovery);
}
return true;
default :
return false;
}
}
 catch (Exception e) {
if (e.getMessage().contains(""String_Node_Str"") && text.toString().contains(""String_Node_Str"")) {
AlertDialog.Builder adialog=new AlertDialog.Builder(activity);
adialog.setMessage(R.string.check_name);
adialog.setMessage(R.string.ok);
adialog.show();
}
activity.addError(Const.RASHR_TAG,e,false);
return false;
}
}
}
);
popup.show();
}","public void showPopup(final View v){
  PopupMenu popup=new PopupMenu(mActivity,v);
  popup.getMenuInflater().inflate(R.menu.bakmgr_menu,popup.getMenu());
  popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    final MenuItem menuItem){
      final CharSequence text=((AppCompatTextView)v).getText();
      final String FileName=text.toString();
      final AppCompatDialog dialog=new AppCompatDialog(mActivity);
      dialog.setTitle(R.string.setname);
      dialog.setContentView(R.layout.dialog_input);
      final AppCompatButton bGo=(AppCompatButton)dialog.findViewById(R.id.bGoBackup);
      final AppCompatEditText etFileName=(AppCompatEditText)dialog.findViewById(R.id.etFileName);
      final File path=mPager.getCurrentItem() == 0 ? Const.PathToRecoveryBackups : Const.PathToKernelBackups;
      try {
switch (menuItem.getItemId()) {
case R.id.iRestore:
          File backup=new File(path,FileName);
        FlashUtil RestoreUtil=new FlashUtil(mActivity,backup,mPager.getCurrentItem() == 1 ? FlashUtil.JOB_RESTORE_RECOVERY : FlashUtil.JOB_RESTORE_KERNEL);
      RestoreUtil.execute();
    return true;
case R.id.iRename:
  etFileName.setHint(FileName);
bGo.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    String Name;
    if (etFileName.getText() != null && etFileName.isEnabled() && !etFileName.getText().toString().equals(""String_Node_Str"")) {
      Name=etFileName.getText().toString();
    }
 else {
      Name=String.valueOf(etFileName.getHint());
    }
    if (!Name.endsWith(mDevice.getRecoveryExt())) {
      Name+=mDevice.getRecoveryExt();
    }
    File renamedBackup=new File(path,Name);
    if (renamedBackup.exists()) {
      Toast.makeText(mActivity,R.string.backupalready,Toast.LENGTH_SHORT).show();
      onMenuItemClick(menuItem);
    }
 else {
      File Backup=new File(path,FileName);
      if (Backup.renameTo(renamedBackup)) {
        mAdapter.reload();
      }
 else {
        Toast.makeText(mActivity,R.string.rename_failed,Toast.LENGTH_SHORT).show();
      }
    }
    dialog.dismiss();
  }
}
);
dialog.show();
return true;
case R.id.iDeleteBackup:
backup=new File(path,text.toString());
if (backup.delete()) {
Toast.makeText(mActivity,mContext.getString(R.string.bak_deleted),Toast.LENGTH_SHORT).show();
}
mAdapter.reload();
return true;
default :
return false;
}
}
 catch (Exception e) {
if (e.getMessage().contains(""String_Node_Str"") && text.toString().contains(""String_Node_Str"")) {
AlertDialog.Builder adialog=new AlertDialog.Builder(mContext);
adialog.setMessage(R.string.check_name);
adialog.setMessage(R.string.ok);
adialog.show();
}
mActivity.addError(Const.RASHR_TAG,e.toString(),false);
return false;
}
}
}
);
popup.show();
}",0.7548441449031171
17526,"@Override public int getIndicatorColor(int position){
  TypedValue typedValue=new TypedValue();
  Resources.Theme theme=mContext.getTheme();
  theme.resolveAttribute(R.attr.colorPrimaryDark,typedValue,true);
  return typedValue.data;
}","@Override public int getIndicatorColor(int position){
  TypedValue typedValue=new TypedValue();
  Resources.Theme theme=mContext.getTheme();
  theme.resolveAttribute(R.attr.colorAccent,typedValue,true);
  return typedValue.data;
}",0.9634408602150538
17527,"public static ListFragment newInstance(RashrActivity activity,boolean isRecovery){
  ListFragment fragment=new ListFragment();
  fragment.mActivity=activity;
  fragment.mListView=new ListView(activity);
  fragment.mAdapter=new ArrayAdapter<>(activity,R.layout.custom_list_item);
  fragment.mListView.setAdapter(fragment.getAdapter());
  fragment.isRecovery=isRecovery;
  return fragment;
}","public static ListFragment newInstance(RashrActivity activity){
  ListFragment fragment=new ListFragment();
  fragment.mListView=new ListView(activity);
  fragment.mAdapter=new ArrayAdapter<>(activity,R.layout.custom_list_item);
  fragment.mListView.setAdapter(fragment.getAdapter());
  return fragment;
}",0.8789625360230547
17528,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  if (!(mDevice.isKernelDD() || mDevice.isKernelMTD())) {
    Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
 else {
    showPopup(mActivity,view,false,mAdapter.getRecoveryBackupFragment().getAdapter(),mAdapter);
  }
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  if (!(mDevice.isKernelDD() || mDevice.isKernelMTD())) {
    Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
 else {
    showPopup(view);
  }
}",0.8600337268128162
17529,"public void createBackup(final boolean RecoveryBackup){
  String prefix;
  String CurrentName;
  String EXT;
  if (RecoveryBackup) {
    prefix=""String_Node_Str"";
    EXT=mDevice.getRecoveryExt();
    CurrentName=mDevice.getRecoveryVersion();
  }
 else {
    prefix=""String_Node_Str"";
    EXT=mDevice.getKernelExt();
    CurrentName=mDevice.getKernelVersion();
  }
  final AppCompatDialog dialog=new AppCompatDialog(mContext);
  dialog.setTitle(R.string.setname);
  dialog.setContentView(R.layout.dialog_input);
  final AppCompatButton bGoBackup=(AppCompatButton)dialog.findViewById(R.id.bGoBackup);
  final AppCompatEditText etFileName=(AppCompatEditText)dialog.findViewById(R.id.etFileName);
  final AppCompatCheckBox optName=(AppCompatCheckBox)dialog.findViewById(R.id.cbOptInput);
  final String NameHint=prefix + ""String_Node_Str"" + Calendar.getInstance().get(Calendar.DATE)+ ""String_Node_Str""+ Calendar.getInstance().get(Calendar.MONTH)+ ""String_Node_Str""+ Calendar.getInstance().get(Calendar.YEAR)+ ""String_Node_Str""+ Calendar.getInstance().get(Calendar.HOUR)+ ""String_Node_Str""+ Calendar.getInstance().get(Calendar.MINUTE)+ EXT;
  optName.setText(CurrentName);
  optName.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      etFileName.setEnabled(!optName.isChecked());
    }
  }
);
  etFileName.setHint(NameHint);
  bGoBackup.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      String EXT;
      File Path;
      final int JOB;
      if (RecoveryBackup) {
        EXT=mDevice.getRecoveryExt();
        Path=Const.PathToRecoveryBackups;
        JOB=FlashUtil.JOB_BACKUP_RECOVERY;
      }
 else {
        EXT=mDevice.getKernelExt();
        Path=Const.PathToKernelBackups;
        JOB=FlashUtil.JOB_BACKUP_KERNEL;
      }
      CharSequence Name=""String_Node_Str"";
      if (optName.isChecked()) {
        Name=optName.getText() + EXT;
      }
 else {
        if (etFileName.getText() != null && !etFileName.getText().toString().equals(""String_Node_Str"")) {
          Name=etFileName.getText().toString();
        }
        if (Name.equals(""String_Node_Str"")) {
          Name=String.valueOf(etFileName.getHint());
        }
        if (!Name.toString().endsWith(EXT)) {
          Name=Name + EXT;
        }
      }
      final File fBACKUP=new File(Path,Name.toString());
      if (fBACKUP.exists()) {
        Toast.makeText(mActivity,R.string.backupalready,Toast.LENGTH_SHORT).show();
      }
 else {
        final FlashUtil BackupCreator=new FlashUtil(mActivity,fBACKUP,JOB);
        BackupCreator.setOnTaskDoneListener(new FlashUtil.OnTaskDoneListener(){
          @Override public void onSuccess(){
            ArrayAdapter<String> adapter;
            if (RecoveryBackup) {
              adapter=mAdapter.getRecoveryBackupFragment().getAdapter();
            }
 else {
              adapter=mAdapter.getKernelBackupFragment().getAdapter();
            }
            loadBackups(mActivity.getDevice(),adapter,RecoveryBackup);
          }
          @Override public void onFail(          Exception e){
          }
        }
);
        BackupCreator.execute();
      }
      dialog.dismiss();
    }
  }
);
  dialog.show();
}","public void createBackup(final boolean RecoveryBackup){
  String prefix;
  String CurrentName;
  String EXT;
  if (RecoveryBackup) {
    prefix=""String_Node_Str"";
    EXT=mDevice.getRecoveryExt();
    CurrentName=mDevice.getRecoveryVersion();
  }
 else {
    prefix=""String_Node_Str"";
    EXT=mDevice.getKernelExt();
    CurrentName=mDevice.getKernelVersion();
  }
  final AppCompatDialog dialog=new AppCompatDialog(mContext);
  dialog.setTitle(R.string.setname);
  dialog.setContentView(R.layout.dialog_input);
  final AppCompatButton bGoBackup=(AppCompatButton)dialog.findViewById(R.id.bGoBackup);
  final AppCompatEditText etFileName=(AppCompatEditText)dialog.findViewById(R.id.etFileName);
  final AppCompatCheckBox optName=(AppCompatCheckBox)dialog.findViewById(R.id.cbOptInput);
  final String NameHint=prefix + ""String_Node_Str"" + Calendar.getInstance().get(Calendar.DATE)+ ""String_Node_Str""+ Calendar.getInstance().get(Calendar.MONTH)+ ""String_Node_Str""+ Calendar.getInstance().get(Calendar.YEAR)+ ""String_Node_Str""+ Calendar.getInstance().get(Calendar.HOUR)+ ""String_Node_Str""+ Calendar.getInstance().get(Calendar.MINUTE)+ EXT;
  optName.setText(CurrentName);
  optName.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      etFileName.setEnabled(!optName.isChecked());
    }
  }
);
  etFileName.setHint(NameHint);
  bGoBackup.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      String EXT;
      File Path;
      final int JOB;
      if (RecoveryBackup) {
        EXT=mDevice.getRecoveryExt();
        Path=Const.PathToRecoveryBackups;
        JOB=FlashUtil.JOB_BACKUP_RECOVERY;
      }
 else {
        EXT=mDevice.getKernelExt();
        Path=Const.PathToKernelBackups;
        JOB=FlashUtil.JOB_BACKUP_KERNEL;
      }
      CharSequence Name=""String_Node_Str"";
      if (optName.isChecked()) {
        Name=optName.getText() + EXT;
      }
 else {
        if (etFileName.getText() != null && !etFileName.getText().toString().equals(""String_Node_Str"")) {
          Name=etFileName.getText().toString();
        }
        if (Name.equals(""String_Node_Str"")) {
          Name=String.valueOf(etFileName.getHint());
        }
        if (!Name.toString().endsWith(EXT)) {
          Name=Name + EXT;
        }
      }
      final File fBACKUP=new File(Path,Name.toString());
      if (fBACKUP.exists()) {
        Toast.makeText(mActivity,R.string.backupalready,Toast.LENGTH_SHORT).show();
      }
 else {
        final FlashUtil BackupCreator=new FlashUtil(mActivity,fBACKUP,JOB);
        BackupCreator.setOnTaskDoneListener(new FlashUtil.OnTaskDoneListener(){
          @Override public void onSuccess(){
            mAdapter.reload();
          }
          @Override public void onFail(          Exception e){
          }
        }
);
        BackupCreator.execute();
      }
      dialog.dismiss();
    }
  }
);
  dialog.show();
}",0.947077922077922
17530,"public ListFragment getRecoveryBackupFragment(){
  if (mRecoveryBackupFragment != null) {
    return mRecoveryBackupFragment;
  }
  mRecoveryBackupFragment=ListFragment.newInstance(mActivity,true);
  return mRecoveryBackupFragment;
}","public ListFragment getRecoveryBackupFragment(){
  if (mRecoveryBackupFragment != null) {
    return mRecoveryBackupFragment;
  }
  mRecoveryBackupFragment=ListFragment.newInstance(mActivity);
  loadBackups();
  return mRecoveryBackupFragment;
}",0.9539748953974896
17531,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  loadBackups(mActivity.getDevice(),mAdapter,isRecovery);
  return mListView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return mListView;
}",0.8152866242038217
17532,"@Override public boolean onMenuItemClick(MenuItem menuItem){
  final CharSequence text=((AppCompatTextView)v).getText();
  try {
    final String FileName=text.toString();
    final AppCompatDialog dialog=new AppCompatDialog(activity);
    dialog.setTitle(R.string.setname);
    dialog.setContentView(R.layout.dialog_input);
    final AppCompatButton bGo=(AppCompatButton)dialog.findViewById(R.id.bGoBackup);
    final AppCompatEditText etFileName=(AppCompatEditText)dialog.findViewById(R.id.etFileName);
    final File path=isRecovery ? Const.PathToRecoveryBackups : Const.PathToKernelBackups;
switch (menuItem.getItemId()) {
case R.id.iRestore:
      FlashUtil RestoreUtil=new FlashUtil(activity,new File(path,FileName),isRecovery ? FlashUtil.JOB_RESTORE_RECOVERY : FlashUtil.JOB_RESTORE_KERNEL);
    RestoreUtil.execute();
  return true;
case R.id.iRename:
etFileName.setHint(FileName);
bGo.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
  String Name;
  if (etFileName.getText() != null && etFileName.isEnabled() && !etFileName.getText().toString().equals(""String_Node_Str"")) {
    Name=etFileName.getText().toString();
  }
 else {
    Name=String.valueOf(etFileName.getHint());
  }
  if (!Name.endsWith(activity.getDevice().getRecoveryExt())) {
    Name=Name + activity.getDevice().getRecoveryExt();
  }
  File renamedBackup=new File(path,Name);
  if (renamedBackup.exists()) {
    Toast.makeText(activity,R.string.backupalready,Toast.LENGTH_SHORT).show();
  }
 else {
    File Backup=new File(path,FileName);
    if (Backup.renameTo(renamedBackup)) {
      loadBackups(activity.getDevice(),adapter,isRecovery);
    }
 else {
      Toast.makeText(activity,R.string.rename_failed,Toast.LENGTH_SHORT).show();
    }
  }
  dialog.dismiss();
}
}
);
dialog.show();
return true;
case R.id.iDeleteBackup:
if (new File(path,text.toString()).delete()) {
Toast.makeText(activity,activity.getString(R.string.bak_deleted),Toast.LENGTH_SHORT).show();
ArrayAdapter<String> adapter;
if (isRecovery) {
adapter=pagerAdapter.getRecoveryBackupFragment().getAdapter();
}
 else {
adapter=pagerAdapter.getKernelBackupFragment().getAdapter();
}
loadBackups(activity.getDevice(),adapter,isRecovery);
}
return true;
default :
return false;
}
}
 catch (Exception e) {
if (e.getMessage().contains(""String_Node_Str"") && text.toString().contains(""String_Node_Str"")) {
AlertDialog.Builder adialog=new AlertDialog.Builder(activity);
adialog.setMessage(R.string.check_name);
adialog.setMessage(R.string.ok);
adialog.show();
}
activity.addError(Const.RASHR_TAG,e,false);
return false;
}
}","@Override public boolean onMenuItemClick(final MenuItem menuItem){
  final CharSequence text=((AppCompatTextView)v).getText();
  final String FileName=text.toString();
  final AppCompatDialog dialog=new AppCompatDialog(mActivity);
  dialog.setTitle(R.string.setname);
  dialog.setContentView(R.layout.dialog_input);
  final AppCompatButton bGo=(AppCompatButton)dialog.findViewById(R.id.bGoBackup);
  final AppCompatEditText etFileName=(AppCompatEditText)dialog.findViewById(R.id.etFileName);
  final File path=mPager.getCurrentItem() == 0 ? Const.PathToRecoveryBackups : Const.PathToKernelBackups;
  try {
switch (menuItem.getItemId()) {
case R.id.iRestore:
      File backup=new File(path,FileName);
    FlashUtil RestoreUtil=new FlashUtil(mActivity,backup,mPager.getCurrentItem() == 1 ? FlashUtil.JOB_RESTORE_RECOVERY : FlashUtil.JOB_RESTORE_KERNEL);
  RestoreUtil.execute();
return true;
case R.id.iRename:
etFileName.setHint(FileName);
bGo.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
String Name;
if (etFileName.getText() != null && etFileName.isEnabled() && !etFileName.getText().toString().equals(""String_Node_Str"")) {
  Name=etFileName.getText().toString();
}
 else {
  Name=String.valueOf(etFileName.getHint());
}
if (!Name.endsWith(mDevice.getRecoveryExt())) {
  Name+=mDevice.getRecoveryExt();
}
File renamedBackup=new File(path,Name);
if (renamedBackup.exists()) {
  Toast.makeText(mActivity,R.string.backupalready,Toast.LENGTH_SHORT).show();
  onMenuItemClick(menuItem);
}
 else {
  File Backup=new File(path,FileName);
  if (Backup.renameTo(renamedBackup)) {
    mAdapter.reload();
  }
 else {
    Toast.makeText(mActivity,R.string.rename_failed,Toast.LENGTH_SHORT).show();
  }
}
dialog.dismiss();
}
}
);
dialog.show();
return true;
case R.id.iDeleteBackup:
backup=new File(path,text.toString());
if (backup.delete()) {
Toast.makeText(mActivity,mContext.getString(R.string.bak_deleted),Toast.LENGTH_SHORT).show();
}
mAdapter.reload();
return true;
default :
return false;
}
}
 catch (Exception e) {
if (e.getMessage().contains(""String_Node_Str"") && text.toString().contains(""String_Node_Str"")) {
AlertDialog.Builder adialog=new AlertDialog.Builder(mContext);
adialog.setMessage(R.string.check_name);
adialog.setMessage(R.string.ok);
adialog.show();
}
mActivity.addError(Const.RASHR_TAG,e.toString(),false);
return false;
}
}",0.7815953385573639
17533,"@Override public void onSuccess(){
  ArrayAdapter<String> adapter;
  if (RecoveryBackup) {
    adapter=mAdapter.getRecoveryBackupFragment().getAdapter();
  }
 else {
    adapter=mAdapter.getKernelBackupFragment().getAdapter();
  }
  loadBackups(mActivity.getDevice(),adapter,RecoveryBackup);
}","@Override public void onSuccess(){
  mAdapter.reload();
}",0.3142857142857143
17534,"private void selectItem(int position){
  if (mDrawerListView != null) {
    mDrawerListView.setItemChecked(position,true);
  }
  if (mDrawerLayout != null) {
    mDrawerLayout.closeDrawer(mFragmentContainerView);
  }
  if (mCallbacks != null) {
    mCallbacks.onNavigationDrawerItemSelected(position);
  }
}","private void selectItem(int position){
  if (mDrawerLayout != null) {
    mDrawerLayout.closeDrawer(mFragmentContainerView);
  }
  mCallbacks.onNavigationDrawerItemSelected(position);
}",0.7520325203252033
17535,"/** 
 * Users of this fragment must call this method to set up the navigation drawer interactions.
 * @param fragmentId   The android:id of this fragment in its activity's layout.
 * @param drawerLayout The DrawerLayout containing this fragment's UI.
 */
public void setUp(int fragmentId,DrawerLayout drawerLayout){
  mFragmentContainerView=getActivity().findViewById(fragmentId);
  mDrawerLayout=drawerLayout;
  ActionBar ab=getSupportActivity().getSupportActionBar();
  if (ab != null) {
    mDrawerListView.setAdapter(new ArrayAdapter<>(ab.getThemedContext(),R.layout.drawer_list_item,android.R.id.text1,new String[]{getString(R.string.flasher),getString(R.string.recovery_script_manager),getString(R.string.donate),getString(R.string.settings)}));
    mDrawerToggle=new ActionBarDrawerToggle(getActivity(),mDrawerLayout,getSupportActivity().getToolbar(),R.string.app_name,R.string.app_name){
      @Override public void onDrawerClosed(      View drawerView){
        super.onDrawerClosed(drawerView);
        if (!isAdded()) {
          return;
        }
        getSupportActivity().invalidateOptionsMenu();
      }
      @Override public void onDrawerOpened(      View drawerView){
        super.onDrawerOpened(drawerView);
        if (!isAdded()) {
          return;
        }
        getSupportActivity().invalidateOptionsMenu();
      }
    }
;
    mDrawerLayout.post(new Runnable(){
      @Override public void run(){
        mDrawerToggle.syncState();
      }
    }
);
    mDrawerLayout.setDrawerListener(mDrawerToggle);
    selectItem(0);
  }
}","/** 
 * Users of this fragment must call this method to set up the navigation drawer interactions.
 * @param fragmentId   The android:id of this fragment in its activity's layout.
 * @param drawerLayout The DrawerLayout containing this fragment's UI.
 */
public void setUp(int fragmentId,DrawerLayout drawerLayout){
  mFragmentContainerView=getActivity().findViewById(fragmentId);
  mDrawerLayout=drawerLayout;
  ActionBar ab=getSupportActivity().getSupportActionBar();
  if (ab != null) {
    mDrawerListView.setAdapter(new ArrayAdapter<>(ab.getThemedContext(),R.layout.drawer_list_item,android.R.id.text1,new String[]{getString(R.string.flasher),getString(R.string.recovery_script_manager),getString(R.string.donate),getString(R.string.settings)}));
    mDrawerToggle=new ActionBarDrawerToggle(getActivity(),mDrawerLayout,getSupportActivity().getToolbar(),R.string.app_name,R.string.app_name){
      @Override public void onDrawerClosed(      View drawerView){
        super.onDrawerClosed(drawerView);
        if (!isAdded()) {
          return;
        }
        getSupportActivity().invalidateOptionsMenu();
      }
      @Override public void onDrawerOpened(      View drawerView){
        super.onDrawerOpened(drawerView);
        if (!isAdded()) {
          return;
        }
        getSupportActivity().invalidateOptionsMenu();
      }
    }
;
    mDrawerLayout.post(new Runnable(){
      @Override public void run(){
        mDrawerToggle.syncState();
      }
    }
);
    mDrawerLayout.setDrawerListener(mDrawerToggle);
  }
}",0.9938570966698996
17536,"protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Const.FilesDir=mContext.getFilesDir();
  Const.RecoveryCollectionFile=new File(Const.FilesDir,""String_Node_Str"");
  Const.KernelCollectionFile=new File(Const.FilesDir,""String_Node_Str"");
  isDark=Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_DARK_UI);
  setTheme(!isDark ? R.style.Rashr : R.style.Rashr_Dark);
  setContentView(R.layout.loading_layout);
  final TextView tvLoading=(TextView)findViewById(R.id.tvLoading);
  final Thread StartThread=new Thread(new Runnable(){
    @Override public void run(){
      final int previous_version=Common.getIntegerPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CUR_VER);
      final int current_version=BuildConfig.VERSION_CODE;
      mVersionChanged=current_version > previous_version;
      Common.setIntegerPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CUR_VER,current_version);
      try {
        startShell();
      }
 catch (      IOException e) {
        mActivity.addError(Const.RASHR_TAG,e,false);
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            setContentView(R.layout.err_layout);
          }
        }
);
        return;
      }
      Common.deleteLogs(mContext);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          tvLoading.setText(R.string.loading_data);
        }
      }
);
      if (Const.PathToTmp.exists()) {
        Common.deleteFolder(Const.PathToTmp,true);
      }
      for (      File i : Folder) {
        if (!i.exists()) {
          if (!i.mkdir()) {
            mActivity.addError(Const.RASHR_TAG,new IOException(i + ""String_Node_Str""),false);
          }
        }
      }
      try {
        extractFiles();
      }
 catch (      IOException e) {
        mActivity.addError(Const.RASHR_TAG,e,true);
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            Toast.makeText(mContext,R.string.failed_unpack_files,Toast.LENGTH_LONG).show();
          }
        }
);
      }
      try {
        File LogCopy=new File(mContext.getFilesDir(),Const.LastLog.getName() + ""String_Node_Str"");
        mShell.execCommand(Const.Busybox + ""String_Node_Str"" + Const.LastLog);
        LogCopy.delete();
        mToolbox.copyFile(Const.LastLog,LogCopy,false,false);
        mShell.execCommand(Const.Busybox + ""String_Node_Str"" + LogCopy);
        LastLogExists=LogCopy.exists();
      }
 catch (      Exception e) {
        mActivity.addError(Const.RASHR_TAG,e,false);
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          checkUpdates(current_version);
          tvLoading.setText(R.string.reading_device);
        }
      }
);
      if (mDevice == null)       mDevice=new Device(mActivity);
      if (!mDevice.isRecoverySupported() && !mDevice.isKernelSupported()) {
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            showDeviceNotSupportedDialog();
          }
        }
);
      }
 else {
        Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_SHOW_UNIFIED,true);
        if (!Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_FIRST_RUN)) {
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_UPDATE_HINTS,false);
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_ADS,true);
          Common.setBooleanPref(mContext,Shell.PREF_NAME,Shell.PREF_LOG,true);
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CHECK_UPDATES,true);
          mActivity.runOnUiThread(new Runnable(){
            @Override public void run(){
              showUsageWarning();
            }
          }
);
        }
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          try {
            setContentView(R.layout.activity_rashr);
            mToolbar=(Toolbar)findViewById(R.id.toolbar);
            setSupportActionBar(mToolbar);
            mNavigationDrawerFragment=(NavigationDrawerFragment)getSupportFragmentManager().findFragmentById(R.id.navigation_drawer);
            mNavigationDrawerFragment.setUp(R.id.navigation_drawer,(DrawerLayout)findViewById(R.id.RashrLayout));
            AdView ads=(AdView)findViewById(R.id.ads);
            if (ads != null) {
              if (Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_ADS)) {
                ads.loadAd(new AdRequest().addTestDevice(""String_Node_Str""));
              }
            }
            if (getIntent().getAction().equals(Intent.ACTION_VIEW)) {
              if (getIntent().getData().toString().endsWith(""String_Node_Str"")) {
                File zip=new File(getIntent().getData().getPath());
                if (zip.exists())                 switchTo(ScriptManagerFragment.newInstance(mActivity,zip));
              }
 else {
                File img=new File(getIntent().getData().getPath());
                if (img.exists())                 switchTo(FlashAsFragment.newInstance(mActivity,img,true));
              }
            }
 else {
              onNavigationDrawerItemSelected(0);
            }
          }
 catch (          NullPointerException e) {
            setContentView(R.layout.err_layout);
            mActivity.addError(Const.RASHR_TAG,e,false);
            AppCompatTextView tv=(AppCompatTextView)findViewById(R.id.tvErr);
            try {
              tv.setText(R.string.failed_setup_layout);
            }
 catch (            RuntimeException ex) {
              mActivity.addError(Const.RASHR_TAG,e,true);
              ex.printStackTrace();
            }
          }
        }
      }
);
    }
  }
);
  StartThread.start();
}","protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Const.FilesDir=mContext.getFilesDir();
  Const.RecoveryCollectionFile=new File(Const.FilesDir,""String_Node_Str"");
  Const.KernelCollectionFile=new File(Const.FilesDir,""String_Node_Str"");
  isDark=Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_DARK_UI);
  setTheme(!isDark ? R.style.Rashr : R.style.Rashr_Dark);
  setContentView(R.layout.loading_layout);
  final TextView tvLoading=(TextView)findViewById(R.id.tvLoading);
  final Thread StartThread=new Thread(new Runnable(){
    @Override public void run(){
      final int previous_version=Common.getIntegerPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CUR_VER);
      final int current_version=BuildConfig.VERSION_CODE;
      mVersionChanged=current_version > previous_version;
      Common.setIntegerPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CUR_VER,current_version);
      try {
        startShell();
      }
 catch (      IOException e) {
        mActivity.addError(Const.RASHR_TAG,e,false);
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            setContentView(R.layout.err_layout);
          }
        }
);
        return;
      }
      Common.deleteLogs(mContext);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          tvLoading.setText(R.string.loading_data);
        }
      }
);
      if (Const.PathToTmp.exists()) {
        Common.deleteFolder(Const.PathToTmp,true);
      }
      for (      File i : Folder) {
        if (!i.exists()) {
          if (!i.mkdir()) {
            mActivity.addError(Const.RASHR_TAG,new IOException(i + ""String_Node_Str""),false);
          }
        }
      }
      try {
        extractFiles();
      }
 catch (      IOException e) {
        mActivity.addError(Const.RASHR_TAG,e,true);
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            Toast.makeText(mContext,R.string.failed_unpack_files,Toast.LENGTH_LONG).show();
          }
        }
);
      }
      try {
        File LogCopy=new File(mContext.getFilesDir(),Const.LastLog.getName() + ""String_Node_Str"");
        mShell.execCommand(Const.Busybox + ""String_Node_Str"" + Const.LastLog);
        if (LogCopy.exists())         LogCopy.delete();
        mToolbox.copyFile(Const.LastLog,LogCopy,false,false);
        mShell.execCommand(Const.Busybox + ""String_Node_Str"" + LogCopy);
        LastLogExists=LogCopy.exists();
      }
 catch (      Exception e) {
        mActivity.addError(Const.RASHR_TAG,e,false);
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          checkUpdates(current_version);
          tvLoading.setText(R.string.reading_device);
        }
      }
);
      if (mDevice == null)       mDevice=new Device(mActivity);
      if (!mDevice.isRecoverySupported() && !mDevice.isKernelSupported()) {
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            showDeviceNotSupportedDialog();
          }
        }
);
      }
 else {
        Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_SHOW_UNIFIED,true);
        if (!Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_FIRST_RUN)) {
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_UPDATE_HINTS,false);
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_ADS,true);
          Common.setBooleanPref(mContext,Shell.PREF_NAME,Shell.PREF_LOG,true);
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CHECK_UPDATES,true);
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_SKIP_SIZE_CHECK,false);
          mActivity.runOnUiThread(new Runnable(){
            @Override public void run(){
              showUsageWarning();
            }
          }
);
        }
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          try {
            View root=View.inflate(mContext,R.layout.activity_rashr,null);
            root.startAnimation(AnimationUtils.loadAnimation(mContext,R.anim.abc_grow_fade_in_from_bottom));
            setContentView(root);
            mToolbar=(Toolbar)findViewById(R.id.toolbar);
            setSupportActionBar(mToolbar);
            mNavigationDrawerFragment=(NavigationDrawerFragment)getSupportFragmentManager().findFragmentById(R.id.navigation_drawer);
            mNavigationDrawerFragment.setUp(R.id.navigation_drawer,(DrawerLayout)findViewById(R.id.RashrLayout));
            AdView ads=(AdView)findViewById(R.id.ads);
            if (ads != null) {
              if (Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_ADS)) {
                ads.loadAd(new AdRequest().addTestDevice(""String_Node_Str""));
              }
            }
            if (getIntent().getAction().equals(Intent.ACTION_VIEW)) {
              File file=new File(getIntent().getData().getPath());
              if (file.exists()) {
                if (file.toString().endsWith(""String_Node_Str"")) {
                  switchTo(ScriptManagerFragment.newInstance(mActivity,file));
                }
 else {
                  switchTo(FlashAsFragment.newInstance(mActivity,file,true));
                }
              }
            }
 else {
              onNavigationDrawerItemSelected(0);
            }
          }
 catch (          NullPointerException e) {
            setContentView(R.layout.err_layout);
            mActivity.addError(Const.RASHR_TAG,e,false);
            AppCompatTextView tv=(AppCompatTextView)findViewById(R.id.tvErr);
            try {
              tv.setText(R.string.failed_setup_layout);
            }
 catch (            RuntimeException ex) {
              mActivity.addError(Const.RASHR_TAG,e,true);
              ex.printStackTrace();
            }
          }
        }
      }
);
    }
  }
);
  StartThread.start();
}",0.9447957614083062
17537,"public void switchTo(Fragment fragment){
  getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.abc_fade_in,R.anim.abc_fade_out).replace(R.id.container,fragment).commitAllowingStateLoss();
}","public void switchTo(Fragment fragment){
  getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.abc_grow_fade_in_from_bottom,R.anim.abc_shrink_fade_out_from_bottom).replace(R.id.container,fragment).commitAllowingStateLoss();
}",0.8558951965065502
17538,"protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Const.FilesDir=mContext.getFilesDir();
  Const.RecoveryCollectionFile=new File(Const.FilesDir,""String_Node_Str"");
  Const.KernelCollectionFile=new File(Const.FilesDir,""String_Node_Str"");
  isDark=Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_DARK_UI);
  setTheme(!isDark ? R.style.Rashr : R.style.Rashr_Dark);
  setContentView(R.layout.loading_layout);
  final TextView tvLoading=(TextView)findViewById(R.id.tvLoading);
  final Thread StartThread=new Thread(new Runnable(){
    @Override public void run(){
      final int previous_version=Common.getIntegerPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CUR_VER);
      final int current_version=BuildConfig.VERSION_CODE;
      mVersionChanged=current_version > previous_version;
      Common.setIntegerPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CUR_VER,current_version);
      try {
        startShell();
      }
 catch (      IOException e) {
        mActivity.addError(Const.RASHR_TAG,e,false);
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            setContentView(R.layout.err_layout);
          }
        }
);
        return;
      }
      Common.deleteLogs(mContext);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          tvLoading.setText(R.string.loading_data);
        }
      }
);
      for (      File i : Folder) {
        if (!i.exists()) {
          if (!i.mkdir()) {
            mActivity.addError(Const.RASHR_TAG,new IOException(i + ""String_Node_Str""),false);
          }
        }
      }
      try {
        extractFiles();
      }
 catch (      IOException e) {
        mActivity.addError(Const.RASHR_TAG,e,true);
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            Toast.makeText(mContext,R.string.failed_unpack_files,Toast.LENGTH_LONG).show();
          }
        }
);
      }
      try {
        File LogCopy=new File(mContext.getFilesDir(),Const.LastLog.getName() + ""String_Node_Str"");
        mShell.execCommand(Const.Busybox + ""String_Node_Str"" + Const.LastLog);
        LogCopy.delete();
        mToolbox.copyFile(Const.LastLog,LogCopy,false,false);
        mShell.execCommand(Const.Busybox + ""String_Node_Str"" + LogCopy);
        LastLogExists=LogCopy.exists();
      }
 catch (      Exception e) {
        mActivity.addError(Const.RASHR_TAG,e,false);
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          checkUpdates(current_version);
          tvLoading.setText(R.string.reading_device);
        }
      }
);
      if (mDevice == null)       mDevice=new Device(mActivity);
      if (!mDevice.isRecoverySupported() && !mDevice.isKernelSupported()) {
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            showDeviceNotSupportedDialog();
          }
        }
);
      }
 else {
        Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_SHOW_UNIFIED,true);
        if (!Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_FIRST_RUN)) {
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_UPDATE_HINTS,false);
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_ADS,true);
          Common.setBooleanPref(mContext,Shell.PREF_NAME,Shell.PREF_LOG,true);
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CHECK_UPDATES,true);
          mActivity.runOnUiThread(new Runnable(){
            @Override public void run(){
              showUsageWarning();
            }
          }
);
        }
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          try {
            setContentView(R.layout.activity_rashr);
            mToolbar=(Toolbar)findViewById(R.id.toolbar);
            setSupportActionBar(mToolbar);
            mNavigationDrawerFragment=(NavigationDrawerFragment)getSupportFragmentManager().findFragmentById(R.id.navigation_drawer);
            mNavigationDrawerFragment.setUp(R.id.navigation_drawer,(DrawerLayout)findViewById(R.id.RashrLayout));
            AdView ads=(AdView)findViewById(R.id.ads);
            if (ads != null) {
              if (Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_ADS)) {
                ads.loadAd(new AdRequest().addTestDevice(""String_Node_Str""));
              }
            }
            if (getIntent().getAction().equals(Intent.ACTION_VIEW)) {
              if (getIntent().getData().toString().endsWith(""String_Node_Str"")) {
                File zip=new File(getIntent().getData().getPath());
                if (zip.exists())                 switchTo(ScriptManagerFragment.newInstance(mActivity,zip));
              }
 else {
                File img=new File(getIntent().getData().getPath());
                if (img.exists())                 switchTo(FlashAsFragment.newInstance(mActivity,img,true));
              }
            }
 else {
              onNavigationDrawerItemSelected(0);
            }
          }
 catch (          NullPointerException e) {
            setContentView(R.layout.err_layout);
            mActivity.addError(Const.RASHR_TAG,e,false);
            AppCompatTextView tv=(AppCompatTextView)findViewById(R.id.tvErr);
            try {
              tv.setText(R.string.failed_setup_layout);
            }
 catch (            RuntimeException ex) {
              mActivity.addError(Const.RASHR_TAG,e,true);
              ex.printStackTrace();
            }
          }
        }
      }
);
    }
  }
);
  StartThread.start();
}","protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Const.FilesDir=mContext.getFilesDir();
  Const.RecoveryCollectionFile=new File(Const.FilesDir,""String_Node_Str"");
  Const.KernelCollectionFile=new File(Const.FilesDir,""String_Node_Str"");
  isDark=Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_DARK_UI);
  setTheme(!isDark ? R.style.Rashr : R.style.Rashr_Dark);
  setContentView(R.layout.loading_layout);
  final TextView tvLoading=(TextView)findViewById(R.id.tvLoading);
  final Thread StartThread=new Thread(new Runnable(){
    @Override public void run(){
      final int previous_version=Common.getIntegerPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CUR_VER);
      final int current_version=BuildConfig.VERSION_CODE;
      mVersionChanged=current_version > previous_version;
      Common.setIntegerPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CUR_VER,current_version);
      try {
        startShell();
      }
 catch (      IOException e) {
        mActivity.addError(Const.RASHR_TAG,e,false);
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            setContentView(R.layout.err_layout);
          }
        }
);
        return;
      }
      Common.deleteLogs(mContext);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          tvLoading.setText(R.string.loading_data);
        }
      }
);
      if (Const.PathToTmp.exists()) {
        Common.deleteFolder(Const.PathToTmp,true);
      }
      for (      File i : Folder) {
        if (!i.exists()) {
          if (!i.mkdir()) {
            mActivity.addError(Const.RASHR_TAG,new IOException(i + ""String_Node_Str""),false);
          }
        }
      }
      try {
        extractFiles();
      }
 catch (      IOException e) {
        mActivity.addError(Const.RASHR_TAG,e,true);
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            Toast.makeText(mContext,R.string.failed_unpack_files,Toast.LENGTH_LONG).show();
          }
        }
);
      }
      try {
        File LogCopy=new File(mContext.getFilesDir(),Const.LastLog.getName() + ""String_Node_Str"");
        mShell.execCommand(Const.Busybox + ""String_Node_Str"" + Const.LastLog);
        LogCopy.delete();
        mToolbox.copyFile(Const.LastLog,LogCopy,false,false);
        mShell.execCommand(Const.Busybox + ""String_Node_Str"" + LogCopy);
        LastLogExists=LogCopy.exists();
      }
 catch (      Exception e) {
        mActivity.addError(Const.RASHR_TAG,e,false);
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          checkUpdates(current_version);
          tvLoading.setText(R.string.reading_device);
        }
      }
);
      if (mDevice == null)       mDevice=new Device(mActivity);
      if (!mDevice.isRecoverySupported() && !mDevice.isKernelSupported()) {
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            showDeviceNotSupportedDialog();
          }
        }
);
      }
 else {
        Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_SHOW_UNIFIED,true);
        if (!Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_FIRST_RUN)) {
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_UPDATE_HINTS,false);
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_ADS,true);
          Common.setBooleanPref(mContext,Shell.PREF_NAME,Shell.PREF_LOG,true);
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CHECK_UPDATES,true);
          mActivity.runOnUiThread(new Runnable(){
            @Override public void run(){
              showUsageWarning();
            }
          }
);
        }
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          try {
            setContentView(R.layout.activity_rashr);
            mToolbar=(Toolbar)findViewById(R.id.toolbar);
            setSupportActionBar(mToolbar);
            mNavigationDrawerFragment=(NavigationDrawerFragment)getSupportFragmentManager().findFragmentById(R.id.navigation_drawer);
            mNavigationDrawerFragment.setUp(R.id.navigation_drawer,(DrawerLayout)findViewById(R.id.RashrLayout));
            AdView ads=(AdView)findViewById(R.id.ads);
            if (ads != null) {
              if (Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_ADS)) {
                ads.loadAd(new AdRequest().addTestDevice(""String_Node_Str""));
              }
            }
            if (getIntent().getAction().equals(Intent.ACTION_VIEW)) {
              if (getIntent().getData().toString().endsWith(""String_Node_Str"")) {
                File zip=new File(getIntent().getData().getPath());
                if (zip.exists())                 switchTo(ScriptManagerFragment.newInstance(mActivity,zip));
              }
 else {
                File img=new File(getIntent().getData().getPath());
                if (img.exists())                 switchTo(FlashAsFragment.newInstance(mActivity,img,true));
              }
            }
 else {
              onNavigationDrawerItemSelected(0);
            }
          }
 catch (          NullPointerException e) {
            setContentView(R.layout.err_layout);
            mActivity.addError(Const.RASHR_TAG,e,false);
            AppCompatTextView tv=(AppCompatTextView)findViewById(R.id.tvErr);
            try {
              tv.setText(R.string.failed_setup_layout);
            }
 catch (            RuntimeException ex) {
              mActivity.addError(Const.RASHR_TAG,e,true);
              ex.printStackTrace();
            }
          }
        }
      }
);
    }
  }
);
  StartThread.start();
}",0.9914949583516002
17539,"@Override public void onClick(View v){
  if (!Common.getBooleanPref(activity,Const.PREF_NAME,Const.PREF_KEY_ADS))   Toast.makeText(activity,R.string.please_ads,Toast.LENGTH_SHORT).show();
  Toast.makeText(activity,R.string.donate_to_support,Toast.LENGTH_SHORT).show();
  try {
    ArrayList<File> files=new ArrayList<>();
    File TestResults=new File(activity.getFilesDir(),""String_Node_Str"");
    try {
      if (TestResults.exists()) {
        if (TestResults.delete()) {
          FileOutputStream fos=activity.openFileOutput(TestResults.getName(),Context.MODE_PRIVATE);
          fos.write((""String_Node_Str"" + shell.execCommand(""String_Node_Str"" + Const.PathToRashr.getAbsolutePath()) + ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")).getBytes());
        }
        files.add(TestResults);
      }
    }
 catch (    Exception e) {
      activity.addError(Const.RASHR_TAG,e,false);
    }
    if (activity.getPackageManager() != null) {
      PackageInfo pInfo=activity.getPackageManager().getPackageInfo(activity.getPackageName(),0);
      String comment=""String_Node_Str"";
      if (text.getText() != null)       comment=text.getText().toString();
      Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);
      intent.setType(""String_Node_Str"");
      intent.putExtra(Intent.EXTRA_EMAIL,new String[]{""String_Node_Str""});
      intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + pInfo.versionCode + ""String_Node_Str"");
      String message=""String_Node_Str"" + ""String_Node_Str"" + pInfo.packageName + ""String_Node_Str""+ pInfo.versionName;
      message+=""String_Node_Str"" + ""String_Node_Str"" + Build.MANUFACTURER + ""String_Node_Str""+ device.getManufacture()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.DEVICE+ ""String_Node_Str""+ device.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.BOARD+ ""String_Node_Str""+ Build.BRAND+ ""String_Node_Str""+ Build.MODEL+ ""String_Node_Str""+ Build.FINGERPRINT+ ""String_Node_Str""+ Build.VERSION.CODENAME+ ""String_Node_Str""+ Build.VERSION.SDK_INT+ ""String_Node_Str"";
      if (device.isRecoverySupported()) {
        message+=""String_Node_Str"" + device.getRecoveryPath() + ""String_Node_Str""+ device.getRecoveryVersion()+ ""String_Node_Str""+ device.isRecoveryMTD()+ ""String_Node_Str""+ device.isRecoveryDD()+ ""String_Node_Str""+ device.isStockRecoverySupported()+ ""String_Node_Str""+ device.isCwmRecoverySupported()+ ""String_Node_Str""+ device.isTwrpRecoverySupported()+ ""String_Node_Str""+ device.isPhilzRecoverySupported();
      }
      if (device.isKernelSupported()) {
        message+=""String_Node_Str"" + device.getKernelPath() + ""String_Node_Str""+ device.getKernelVersion()+ ""String_Node_Str""+ device.isKernelMTD()+ ""String_Node_Str""+ device.isKernelDD();
      }
      if (!comment.equals(""String_Node_Str"")) {
        message+=""String_Node_Str"" + comment + ""String_Node_Str"";
      }
      message+=""String_Node_Str"" + activity.getAllPrefs() + ""String_Node_Str"";
      files.add(new File(activity.getFilesDir(),Shell.Logs));
      files.add(new File(activity.getFilesDir(),Const.LastLog.getName()));
      ArrayList<Uri> uris=new ArrayList<>();
      for (      File i : files) {
        try {
          shell.execCommand(Const.Busybox + ""String_Node_Str"" + i);
        }
 catch (        Exception e) {
          activity.addError(Const.RASHR_TAG,e,false);
        }
      }
      if (errors.size() > 0) {
        message+=""String_Node_Str"";
        for (        String error : errors) {
          message+=error + ""String_Node_Str"";
        }
      }
      intent.putExtra(Intent.EXTRA_TEXT,message);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
      activity.startActivity(Intent.createChooser(intent,""String_Node_Str""));
      dismiss();
    }
  }
 catch (  Exception e) {
    dismiss();
    activity.addError(Const.RASHR_TAG,e,false);
  }
}","@Override public void onClick(View v){
  if (!Common.getBooleanPref(activity,Const.PREF_NAME,Const.PREF_KEY_ADS)) {
    Toast.makeText(activity,R.string.please_ads,Toast.LENGTH_SHORT).show();
  }
 else {
    Toast.makeText(activity,R.string.donate_to_support,Toast.LENGTH_SHORT).show();
  }
  try {
    ArrayList<File> files=new ArrayList<>();
    File TestResults=new File(activity.getFilesDir(),""String_Node_Str"");
    try {
      if (TestResults.exists()) {
        if (TestResults.delete()) {
          FileOutputStream fos=activity.openFileOutput(TestResults.getName(),Context.MODE_PRIVATE);
          fos.write((""String_Node_Str"" + shell.execCommand(""String_Node_Str"" + Const.PathToRashr.getAbsolutePath()) + ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")).getBytes());
        }
        files.add(TestResults);
      }
    }
 catch (    Exception e) {
      activity.addError(Const.RASHR_TAG,e,false);
    }
    String comment=""String_Node_Str"";
    if (text.getText() != null)     comment=text.getText().toString();
    Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);
    intent.setType(""String_Node_Str"");
    intent.putExtra(Intent.EXTRA_EMAIL,new String[]{""String_Node_Str""});
    intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + BuildConfig.VERSION_CODE + ""String_Node_Str"");
    String message=""String_Node_Str"" + ""String_Node_Str"" + BuildConfig.APPLICATION_ID + ""String_Node_Str""+ BuildConfig.VERSION_NAME;
    message+=""String_Node_Str"" + ""String_Node_Str"" + Build.MANUFACTURER + ""String_Node_Str""+ device.getManufacture()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.DEVICE+ ""String_Node_Str""+ device.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.BOARD+ ""String_Node_Str""+ Build.BRAND+ ""String_Node_Str""+ Build.MODEL+ ""String_Node_Str""+ Build.FINGERPRINT+ ""String_Node_Str""+ Build.VERSION.CODENAME+ ""String_Node_Str""+ Build.VERSION.SDK_INT+ ""String_Node_Str"";
    if (device.isRecoverySupported()) {
      message+=""String_Node_Str"" + device.getRecoveryPath() + ""String_Node_Str""+ device.getRecoveryVersion()+ ""String_Node_Str""+ device.isRecoveryMTD()+ ""String_Node_Str""+ device.isRecoveryDD()+ ""String_Node_Str""+ device.isStockRecoverySupported()+ ""String_Node_Str""+ device.isCwmRecoverySupported()+ ""String_Node_Str""+ device.isTwrpRecoverySupported()+ ""String_Node_Str""+ device.isPhilzRecoverySupported();
    }
    if (device.isKernelSupported()) {
      message+=""String_Node_Str"" + device.getKernelPath() + ""String_Node_Str""+ device.getKernelVersion()+ ""String_Node_Str""+ device.isKernelMTD()+ ""String_Node_Str""+ device.isKernelDD();
    }
    if (!comment.equals(""String_Node_Str"")) {
      message+=""String_Node_Str"" + comment + ""String_Node_Str"";
    }
    message+=""String_Node_Str"" + activity.getAllPrefs() + ""String_Node_Str"";
    files.add(new File(activity.getFilesDir(),Shell.Logs));
    files.add(new File(activity.getFilesDir(),Const.LastLog.getName()));
    ArrayList<Uri> uris=new ArrayList<>();
    for (    File i : files) {
      try {
        shell.execCommand(Const.Busybox + ""String_Node_Str"" + i);
        File tmpFile=new File(Const.PathToTmp,i.getName());
        Common.copyFile(i,tmpFile);
        shell.execCommand(Const.Busybox + ""String_Node_Str"" + tmpFile);
        uris.add(Uri.fromFile(tmpFile));
      }
 catch (      Exception e) {
        activity.addError(Const.RASHR_TAG,e,false);
      }
    }
    if (errors.size() > 0) {
      message+=""String_Node_Str"";
      for (      String error : errors) {
        message+=error + ""String_Node_Str"";
      }
    }
    intent.putExtra(Intent.EXTRA_TEXT,message);
    intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
    activity.startActivity(Intent.createChooser(intent,""String_Node_Str""));
    dismiss();
  }
 catch (  Exception e) {
    dismiss();
    activity.addError(Const.RASHR_TAG,e,false);
  }
}",0.8800100200400801
17540,"public ReportDialog(final RashrActivity activity,String message){
  super(activity);
  final Shell shell=activity.getShell();
  final Device device=activity.getDevice();
  final ArrayList<String> errors=activity.getErrors();
  setTitle(R.string.comment);
  setContentView(R.layout.dialog_comment);
  final EditText text=(EditText)findViewById(R.id.etComment);
  if (!message.equals(""String_Node_Str""))   text.setText(message);
  new Thread(new Runnable(){
    @Override public void run(){
      final Button bGo=(Button)findViewById(R.id.bGo);
      bGo.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          if (!Common.getBooleanPref(activity,Const.PREF_NAME,Const.PREF_KEY_ADS))           Toast.makeText(activity,R.string.please_ads,Toast.LENGTH_SHORT).show();
          Toast.makeText(activity,R.string.donate_to_support,Toast.LENGTH_SHORT).show();
          try {
            ArrayList<File> files=new ArrayList<>();
            File TestResults=new File(activity.getFilesDir(),""String_Node_Str"");
            try {
              if (TestResults.exists()) {
                if (TestResults.delete()) {
                  FileOutputStream fos=activity.openFileOutput(TestResults.getName(),Context.MODE_PRIVATE);
                  fos.write((""String_Node_Str"" + shell.execCommand(""String_Node_Str"" + Const.PathToRashr.getAbsolutePath()) + ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")).getBytes());
                }
                files.add(TestResults);
              }
            }
 catch (            Exception e) {
              activity.addError(Const.RASHR_TAG,e,false);
            }
            if (activity.getPackageManager() != null) {
              PackageInfo pInfo=activity.getPackageManager().getPackageInfo(activity.getPackageName(),0);
              String comment=""String_Node_Str"";
              if (text.getText() != null)               comment=text.getText().toString();
              Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);
              intent.setType(""String_Node_Str"");
              intent.putExtra(Intent.EXTRA_EMAIL,new String[]{""String_Node_Str""});
              intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + pInfo.versionCode + ""String_Node_Str"");
              String message=""String_Node_Str"" + ""String_Node_Str"" + pInfo.packageName + ""String_Node_Str""+ pInfo.versionName;
              message+=""String_Node_Str"" + ""String_Node_Str"" + Build.MANUFACTURER + ""String_Node_Str""+ device.getManufacture()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.DEVICE+ ""String_Node_Str""+ device.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.BOARD+ ""String_Node_Str""+ Build.BRAND+ ""String_Node_Str""+ Build.MODEL+ ""String_Node_Str""+ Build.FINGERPRINT+ ""String_Node_Str""+ Build.VERSION.CODENAME+ ""String_Node_Str""+ Build.VERSION.SDK_INT+ ""String_Node_Str"";
              if (device.isRecoverySupported()) {
                message+=""String_Node_Str"" + device.getRecoveryPath() + ""String_Node_Str""+ device.getRecoveryVersion()+ ""String_Node_Str""+ device.isRecoveryMTD()+ ""String_Node_Str""+ device.isRecoveryDD()+ ""String_Node_Str""+ device.isStockRecoverySupported()+ ""String_Node_Str""+ device.isCwmRecoverySupported()+ ""String_Node_Str""+ device.isTwrpRecoverySupported()+ ""String_Node_Str""+ device.isPhilzRecoverySupported();
              }
              if (device.isKernelSupported()) {
                message+=""String_Node_Str"" + device.getKernelPath() + ""String_Node_Str""+ device.getKernelVersion()+ ""String_Node_Str""+ device.isKernelMTD()+ ""String_Node_Str""+ device.isKernelDD();
              }
              if (!comment.equals(""String_Node_Str"")) {
                message+=""String_Node_Str"" + comment + ""String_Node_Str"";
              }
              message+=""String_Node_Str"" + activity.getAllPrefs() + ""String_Node_Str"";
              files.add(new File(activity.getFilesDir(),Shell.Logs));
              files.add(new File(activity.getFilesDir(),Const.LastLog.getName()));
              ArrayList<Uri> uris=new ArrayList<>();
              for (              File i : files) {
                try {
                  shell.execCommand(Const.Busybox + ""String_Node_Str"" + i);
                }
 catch (                Exception e) {
                  activity.addError(Const.RASHR_TAG,e,false);
                }
              }
              if (errors.size() > 0) {
                message+=""String_Node_Str"";
                for (                String error : errors) {
                  message+=error + ""String_Node_Str"";
                }
              }
              intent.putExtra(Intent.EXTRA_TEXT,message);
              intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
              activity.startActivity(Intent.createChooser(intent,""String_Node_Str""));
              dismiss();
            }
          }
 catch (          Exception e) {
            dismiss();
            activity.addError(Const.RASHR_TAG,e,false);
          }
        }
      }
);
    }
  }
).start();
}","public ReportDialog(final RashrActivity activity,String message){
  super(activity);
  final Shell shell=activity.getShell();
  final Device device=activity.getDevice();
  final ArrayList<String> errors=activity.getErrors();
  setTitle(R.string.comment);
  setContentView(R.layout.dialog_comment);
  final EditText text=(EditText)findViewById(R.id.etComment);
  if (!message.equals(""String_Node_Str""))   text.setText(message);
  new Thread(new Runnable(){
    @Override public void run(){
      final Button bGo=(Button)findViewById(R.id.bGo);
      bGo.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          if (!Common.getBooleanPref(activity,Const.PREF_NAME,Const.PREF_KEY_ADS)) {
            Toast.makeText(activity,R.string.please_ads,Toast.LENGTH_SHORT).show();
          }
 else {
            Toast.makeText(activity,R.string.donate_to_support,Toast.LENGTH_SHORT).show();
          }
          try {
            ArrayList<File> files=new ArrayList<>();
            File TestResults=new File(activity.getFilesDir(),""String_Node_Str"");
            try {
              if (TestResults.exists()) {
                if (TestResults.delete()) {
                  FileOutputStream fos=activity.openFileOutput(TestResults.getName(),Context.MODE_PRIVATE);
                  fos.write((""String_Node_Str"" + shell.execCommand(""String_Node_Str"" + Const.PathToRashr.getAbsolutePath()) + ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")).getBytes());
                }
                files.add(TestResults);
              }
            }
 catch (            Exception e) {
              activity.addError(Const.RASHR_TAG,e,false);
            }
            String comment=""String_Node_Str"";
            if (text.getText() != null)             comment=text.getText().toString();
            Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);
            intent.setType(""String_Node_Str"");
            intent.putExtra(Intent.EXTRA_EMAIL,new String[]{""String_Node_Str""});
            intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + BuildConfig.VERSION_CODE + ""String_Node_Str"");
            String message=""String_Node_Str"" + ""String_Node_Str"" + BuildConfig.APPLICATION_ID + ""String_Node_Str""+ BuildConfig.VERSION_NAME;
            message+=""String_Node_Str"" + ""String_Node_Str"" + Build.MANUFACTURER + ""String_Node_Str""+ device.getManufacture()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.DEVICE+ ""String_Node_Str""+ device.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.BOARD+ ""String_Node_Str""+ Build.BRAND+ ""String_Node_Str""+ Build.MODEL+ ""String_Node_Str""+ Build.FINGERPRINT+ ""String_Node_Str""+ Build.VERSION.CODENAME+ ""String_Node_Str""+ Build.VERSION.SDK_INT+ ""String_Node_Str"";
            if (device.isRecoverySupported()) {
              message+=""String_Node_Str"" + device.getRecoveryPath() + ""String_Node_Str""+ device.getRecoveryVersion()+ ""String_Node_Str""+ device.isRecoveryMTD()+ ""String_Node_Str""+ device.isRecoveryDD()+ ""String_Node_Str""+ device.isStockRecoverySupported()+ ""String_Node_Str""+ device.isCwmRecoverySupported()+ ""String_Node_Str""+ device.isTwrpRecoverySupported()+ ""String_Node_Str""+ device.isPhilzRecoverySupported();
            }
            if (device.isKernelSupported()) {
              message+=""String_Node_Str"" + device.getKernelPath() + ""String_Node_Str""+ device.getKernelVersion()+ ""String_Node_Str""+ device.isKernelMTD()+ ""String_Node_Str""+ device.isKernelDD();
            }
            if (!comment.equals(""String_Node_Str"")) {
              message+=""String_Node_Str"" + comment + ""String_Node_Str"";
            }
            message+=""String_Node_Str"" + activity.getAllPrefs() + ""String_Node_Str"";
            files.add(new File(activity.getFilesDir(),Shell.Logs));
            files.add(new File(activity.getFilesDir(),Const.LastLog.getName()));
            ArrayList<Uri> uris=new ArrayList<>();
            for (            File i : files) {
              try {
                shell.execCommand(Const.Busybox + ""String_Node_Str"" + i);
                File tmpFile=new File(Const.PathToTmp,i.getName());
                Common.copyFile(i,tmpFile);
                shell.execCommand(Const.Busybox + ""String_Node_Str"" + tmpFile);
                uris.add(Uri.fromFile(tmpFile));
              }
 catch (              Exception e) {
                activity.addError(Const.RASHR_TAG,e,false);
              }
            }
            if (errors.size() > 0) {
              message+=""String_Node_Str"";
              for (              String error : errors) {
                message+=error + ""String_Node_Str"";
              }
            }
            intent.putExtra(Intent.EXTRA_TEXT,message);
            intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
            activity.startActivity(Intent.createChooser(intent,""String_Node_Str""));
            dismiss();
          }
 catch (          Exception e) {
            dismiss();
            activity.addError(Const.RASHR_TAG,e,false);
          }
        }
      }
);
    }
  }
).start();
}",0.8964855002880737
17541,"@Override public void run(){
  final Button bGo=(Button)findViewById(R.id.bGo);
  bGo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!Common.getBooleanPref(activity,Const.PREF_NAME,Const.PREF_KEY_ADS))       Toast.makeText(activity,R.string.please_ads,Toast.LENGTH_SHORT).show();
      Toast.makeText(activity,R.string.donate_to_support,Toast.LENGTH_SHORT).show();
      try {
        ArrayList<File> files=new ArrayList<>();
        File TestResults=new File(activity.getFilesDir(),""String_Node_Str"");
        try {
          if (TestResults.exists()) {
            if (TestResults.delete()) {
              FileOutputStream fos=activity.openFileOutput(TestResults.getName(),Context.MODE_PRIVATE);
              fos.write((""String_Node_Str"" + shell.execCommand(""String_Node_Str"" + Const.PathToRashr.getAbsolutePath()) + ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")).getBytes());
            }
            files.add(TestResults);
          }
        }
 catch (        Exception e) {
          activity.addError(Const.RASHR_TAG,e,false);
        }
        if (activity.getPackageManager() != null) {
          PackageInfo pInfo=activity.getPackageManager().getPackageInfo(activity.getPackageName(),0);
          String comment=""String_Node_Str"";
          if (text.getText() != null)           comment=text.getText().toString();
          Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);
          intent.setType(""String_Node_Str"");
          intent.putExtra(Intent.EXTRA_EMAIL,new String[]{""String_Node_Str""});
          intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + pInfo.versionCode + ""String_Node_Str"");
          String message=""String_Node_Str"" + ""String_Node_Str"" + pInfo.packageName + ""String_Node_Str""+ pInfo.versionName;
          message+=""String_Node_Str"" + ""String_Node_Str"" + Build.MANUFACTURER + ""String_Node_Str""+ device.getManufacture()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.DEVICE+ ""String_Node_Str""+ device.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.BOARD+ ""String_Node_Str""+ Build.BRAND+ ""String_Node_Str""+ Build.MODEL+ ""String_Node_Str""+ Build.FINGERPRINT+ ""String_Node_Str""+ Build.VERSION.CODENAME+ ""String_Node_Str""+ Build.VERSION.SDK_INT+ ""String_Node_Str"";
          if (device.isRecoverySupported()) {
            message+=""String_Node_Str"" + device.getRecoveryPath() + ""String_Node_Str""+ device.getRecoveryVersion()+ ""String_Node_Str""+ device.isRecoveryMTD()+ ""String_Node_Str""+ device.isRecoveryDD()+ ""String_Node_Str""+ device.isStockRecoverySupported()+ ""String_Node_Str""+ device.isCwmRecoverySupported()+ ""String_Node_Str""+ device.isTwrpRecoverySupported()+ ""String_Node_Str""+ device.isPhilzRecoverySupported();
          }
          if (device.isKernelSupported()) {
            message+=""String_Node_Str"" + device.getKernelPath() + ""String_Node_Str""+ device.getKernelVersion()+ ""String_Node_Str""+ device.isKernelMTD()+ ""String_Node_Str""+ device.isKernelDD();
          }
          if (!comment.equals(""String_Node_Str"")) {
            message+=""String_Node_Str"" + comment + ""String_Node_Str"";
          }
          message+=""String_Node_Str"" + activity.getAllPrefs() + ""String_Node_Str"";
          files.add(new File(activity.getFilesDir(),Shell.Logs));
          files.add(new File(activity.getFilesDir(),Const.LastLog.getName()));
          ArrayList<Uri> uris=new ArrayList<>();
          for (          File i : files) {
            try {
              shell.execCommand(Const.Busybox + ""String_Node_Str"" + i);
            }
 catch (            Exception e) {
              activity.addError(Const.RASHR_TAG,e,false);
            }
          }
          if (errors.size() > 0) {
            message+=""String_Node_Str"";
            for (            String error : errors) {
              message+=error + ""String_Node_Str"";
            }
          }
          intent.putExtra(Intent.EXTRA_TEXT,message);
          intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
          activity.startActivity(Intent.createChooser(intent,""String_Node_Str""));
          dismiss();
        }
      }
 catch (      Exception e) {
        dismiss();
        activity.addError(Const.RASHR_TAG,e,false);
      }
    }
  }
);
}","@Override public void run(){
  final Button bGo=(Button)findViewById(R.id.bGo);
  bGo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!Common.getBooleanPref(activity,Const.PREF_NAME,Const.PREF_KEY_ADS)) {
        Toast.makeText(activity,R.string.please_ads,Toast.LENGTH_SHORT).show();
      }
 else {
        Toast.makeText(activity,R.string.donate_to_support,Toast.LENGTH_SHORT).show();
      }
      try {
        ArrayList<File> files=new ArrayList<>();
        File TestResults=new File(activity.getFilesDir(),""String_Node_Str"");
        try {
          if (TestResults.exists()) {
            if (TestResults.delete()) {
              FileOutputStream fos=activity.openFileOutput(TestResults.getName(),Context.MODE_PRIVATE);
              fos.write((""String_Node_Str"" + shell.execCommand(""String_Node_Str"" + Const.PathToRashr.getAbsolutePath()) + ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")).getBytes());
            }
            files.add(TestResults);
          }
        }
 catch (        Exception e) {
          activity.addError(Const.RASHR_TAG,e,false);
        }
        String comment=""String_Node_Str"";
        if (text.getText() != null)         comment=text.getText().toString();
        Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);
        intent.setType(""String_Node_Str"");
        intent.putExtra(Intent.EXTRA_EMAIL,new String[]{""String_Node_Str""});
        intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + BuildConfig.VERSION_CODE + ""String_Node_Str"");
        String message=""String_Node_Str"" + ""String_Node_Str"" + BuildConfig.APPLICATION_ID + ""String_Node_Str""+ BuildConfig.VERSION_NAME;
        message+=""String_Node_Str"" + ""String_Node_Str"" + Build.MANUFACTURER + ""String_Node_Str""+ device.getManufacture()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.DEVICE+ ""String_Node_Str""+ device.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.BOARD+ ""String_Node_Str""+ Build.BRAND+ ""String_Node_Str""+ Build.MODEL+ ""String_Node_Str""+ Build.FINGERPRINT+ ""String_Node_Str""+ Build.VERSION.CODENAME+ ""String_Node_Str""+ Build.VERSION.SDK_INT+ ""String_Node_Str"";
        if (device.isRecoverySupported()) {
          message+=""String_Node_Str"" + device.getRecoveryPath() + ""String_Node_Str""+ device.getRecoveryVersion()+ ""String_Node_Str""+ device.isRecoveryMTD()+ ""String_Node_Str""+ device.isRecoveryDD()+ ""String_Node_Str""+ device.isStockRecoverySupported()+ ""String_Node_Str""+ device.isCwmRecoverySupported()+ ""String_Node_Str""+ device.isTwrpRecoverySupported()+ ""String_Node_Str""+ device.isPhilzRecoverySupported();
        }
        if (device.isKernelSupported()) {
          message+=""String_Node_Str"" + device.getKernelPath() + ""String_Node_Str""+ device.getKernelVersion()+ ""String_Node_Str""+ device.isKernelMTD()+ ""String_Node_Str""+ device.isKernelDD();
        }
        if (!comment.equals(""String_Node_Str"")) {
          message+=""String_Node_Str"" + comment + ""String_Node_Str"";
        }
        message+=""String_Node_Str"" + activity.getAllPrefs() + ""String_Node_Str"";
        files.add(new File(activity.getFilesDir(),Shell.Logs));
        files.add(new File(activity.getFilesDir(),Const.LastLog.getName()));
        ArrayList<Uri> uris=new ArrayList<>();
        for (        File i : files) {
          try {
            shell.execCommand(Const.Busybox + ""String_Node_Str"" + i);
            File tmpFile=new File(Const.PathToTmp,i.getName());
            Common.copyFile(i,tmpFile);
            shell.execCommand(Const.Busybox + ""String_Node_Str"" + tmpFile);
            uris.add(Uri.fromFile(tmpFile));
          }
 catch (          Exception e) {
            activity.addError(Const.RASHR_TAG,e,false);
          }
        }
        if (errors.size() > 0) {
          message+=""String_Node_Str"";
          for (          String error : errors) {
            message+=error + ""String_Node_Str"";
          }
        }
        intent.putExtra(Intent.EXTRA_TEXT,message);
        intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
        activity.startActivity(Intent.createChooser(intent,""String_Node_Str""));
        dismiss();
      }
 catch (      Exception e) {
        dismiss();
        activity.addError(Const.RASHR_TAG,e,false);
      }
    }
  }
);
}",0.8849457504520796
17542,"private void placeImgBack() throws IOException, FailedExecuteCommand {
  mShell.execCommand(Const.Busybox + ""String_Node_Str"" + tmpFile);
  Common.copyFile(tmpFile,mCustomIMG);
}","private void placeImgBack() throws IOException, FailedExecuteCommand {
  mShell.execCommand(Const.Busybox + ""String_Node_Str"" + tmpFile+ ""String_Node_Str"");
  Common.copyFile(tmpFile,mCustomIMG);
}",0.9493333333333334
17543,"public void MTD() throws FailedExecuteCommand, IOException {
  String Command;
  if (isJobRecovery()) {
    Command=""String_Node_Str"";
  }
 else   if (isJobKernel()) {
    Command=""String_Node_Str"";
  }
 else {
    return;
  }
  if (isJobFlash() || isJobRestore()) {
    Command=flash_image.getAbsolutePath() + Command + ""String_Node_Str""+ tmpFile.getAbsolutePath()+ ""String_Node_Str"";
  }
 else   if (isJobBackup()) {
    Command=dump_image.getAbsolutePath() + Command + ""String_Node_Str""+ tmpFile.getAbsolutePath()+ ""String_Node_Str"";
  }
  mShell.execCommand(Command);
  if (isJobBackup())   placeImgBack();
}","public void MTD() throws FailedExecuteCommand, IOException {
  String Command;
  if (isJobRecovery()) {
    Command=""String_Node_Str"";
  }
 else   if (isJobKernel()) {
    Command=""String_Node_Str"";
  }
 else {
    return;
  }
  if (isJobFlash() || isJobRestore()) {
    Command=flash_image.getAbsolutePath() + Command + ""String_Node_Str""+ tmpFile+ ""String_Node_Str"";
  }
 else   if (isJobBackup()) {
    Command=dump_image.getAbsolutePath() + Command + ""String_Node_Str""+ tmpFile+ ""String_Node_Str"";
  }
  mShell.execCommand(Command);
  if (isJobBackup())   placeImgBack();
}",0.6952861952861953
17544,"public void download(){
  if (onDownloadListener != null) {
    mDownloader.setOnDownloadListener(new Downloader.OnDownloadListener(){
      @Override public void onSuccess(      File file){
        mDownloadDialog.dismiss();
        onDownloadListener.onSuccess(file);
      }
      @Override public void onFail(      Exception e){
        mDownloadDialog.dismiss();
        onDownloadListener.onFail(e);
      }
    }
);
  }
  ConnectingDialog.setTitle(mContext.getResources().getString(R.string.connecting));
  ConnectingDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
  ConnectingDialog.setMessage(mDownloader.getURL().toString());
  if (mCancelable) {
    ConnectingDialog.setButton(DialogInterface.BUTTON_NEGATIVE,mContext.getString(R.string.cancel),new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        mDownloader.cancel();
      }
    }
);
  }
  ConnectingDialog.show();
  mDownloader.setOnUpdateListener(new Downloader.OnUpdateListener(){
    @Override public void onUpdate(    int MAX,    int Downloaded){
      updateProgress(MAX,Downloaded);
    }
  }
);
  mDownloader.download();
  Log.i(TAG,""String_Node_Str"");
}","public void download(){
  mDownloader.setOnDownloadListener(new Downloader.OnDownloadListener(){
    @Override public void onSuccess(    File file){
      mDownloadDialog.dismiss();
      if (onDownloadListener != null) {
        onDownloadListener.onSuccess(file);
      }
    }
    @Override public void onFail(    Exception e){
      ConnectingDialog.dismiss();
      mDownloadDialog.dismiss();
      if (e != null) {
        Toast.makeText(mContext,e.toString(),Toast.LENGTH_SHORT).show();
      }
      if (onDownloadListener != null) {
        onDownloadListener.onFail(e);
      }
    }
  }
);
  ConnectingDialog.setTitle(mContext.getResources().getString(R.string.connecting));
  ConnectingDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
  ConnectingDialog.setMessage(mDownloader.getURL().toString());
  if (mCancelable) {
    ConnectingDialog.setButton(DialogInterface.BUTTON_NEGATIVE,mContext.getString(R.string.cancel),new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        mDownloader.cancel();
      }
    }
);
  }
  ConnectingDialog.show();
  mDownloader.setOnUpdateListener(new Downloader.OnUpdateListener(){
    @Override public void onUpdate(    int MAX,    int Downloaded){
      updateProgress(MAX,Downloaded);
    }
  }
);
  mDownloader.download();
  Log.i(TAG,""String_Node_Str"");
}",0.7987663839629915
17545,"public void download(){
  if (!mOutputFile.getParentFile().exists()) {
    if (!mOutputFile.getParentFile().mkdir()) {
      mError=new Exception(""String_Node_Str"");
    }
  }
  if (mOverrideFile && mOutputFile.exists()) {
    if (!mOutputFile.delete()) {
      mError=new Exception(""String_Node_Str"");
    }
  }
  if (mError == null) {
    mDownloadThread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          Log.i(TAG,""String_Node_Str"" + mURL.getHost());
          URLConnection connection=mURL.openConnection();
          connection.setDoOutput(true);
          connection.connect();
          FileOutputStream fileOutput=new FileOutputStream(mOutputFile);
          InputStream inputStream=connection.getInputStream();
          byte[] buffer=new byte[1024];
          final int FullLength=connection.getContentLength();
          int bufferLength;
          int downloaded=0;
          Log.i(TAG,""String_Node_Str"" + mOutputFile.getName());
          while (((bufferLength=inputStream.read(buffer)) > 0) && !mCancel) {
            fileOutput.write(buffer,0,bufferLength);
            downloaded+=bufferLength;
            final int Downloaded=downloaded;
            if (onUpdateListener != null) {
              mHandler.post(new Runnable(){
                @Override public void run(){
                  onUpdateListener.onUpdate(FullLength,Downloaded);
                }
              }
);
            }
          }
          fileOutput.close();
          Log.i(TAG,""String_Node_Str"");
          if (!mCheckSHA1 || !isDownloadCorrupt()) {
            mHandler.post(new Runnable(){
              @Override public void run(){
                if (onDownloadListener != null) {
                  mHandler.post(new Runnable(){
                    @Override public void run(){
                      onDownloadListener.onSuccess(mOutputFile);
                    }
                  }
);
                }
              }
            }
);
          }
 else {
            mHandler.post(new Runnable(){
              @Override public void run(){
                if (onDownloadListener != null)                 onDownloadListener.onFail(mError);
              }
            }
);
            mOutputFile.delete();
          }
        }
 catch (        IOException e) {
          mError=e;
          e.printStackTrace();
        }
      }
    }
);
    mDownloadThread.start();
  }
 else {
    mHandler.post(new Runnable(){
      @Override public void run(){
        if (onDownloadListener != null)         onDownloadListener.onFail(null);
      }
    }
);
  }
}","public void download(){
  if (!mOutputFile.getParentFile().exists()) {
    if (!mOutputFile.getParentFile().mkdir()) {
      mError=new Exception(""String_Node_Str"");
    }
  }
  if (mOverrideFile && mOutputFile.exists()) {
    if (!mOutputFile.delete()) {
      mError=new Exception(""String_Node_Str"");
    }
  }
  if (mError == null) {
    mDownloadThread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          Log.i(TAG,""String_Node_Str"" + mURL.getHost());
          URLConnection connection=mURL.openConnection();
          connection.setDoOutput(true);
          connection.setDoInput(true);
          connection.connect();
          FileOutputStream fileOutput=new FileOutputStream(mOutputFile);
          InputStream inputStream=connection.getInputStream();
          byte[] buffer=new byte[1024];
          final int FullLength=connection.getContentLength();
          int bufferLength;
          int downloaded=0;
          Log.i(TAG,""String_Node_Str"" + mOutputFile.getName());
          while (((bufferLength=inputStream.read(buffer)) > 0) && !mCancel) {
            fileOutput.write(buffer,0,bufferLength);
            downloaded+=bufferLength;
            final int Downloaded=downloaded;
            if (onUpdateListener != null) {
              mHandler.post(new Runnable(){
                @Override public void run(){
                  onUpdateListener.onUpdate(FullLength,Downloaded);
                }
              }
);
            }
          }
          fileOutput.close();
          Log.i(TAG,""String_Node_Str"");
        }
 catch (        IOException e) {
          mError=e;
          e.printStackTrace();
        }
        if ((!mCheckSHA1 || !isDownloadCorrupt()) && mError == null) {
          mHandler.post(new Runnable(){
            @Override public void run(){
              if (onDownloadListener != null) {
                mHandler.post(new Runnable(){
                  @Override public void run(){
                    onDownloadListener.onSuccess(mOutputFile);
                  }
                }
);
              }
            }
          }
);
        }
 else {
          mHandler.post(new Runnable(){
            @Override public void run(){
              if (onDownloadListener != null)               onDownloadListener.onFail(mError);
            }
          }
);
          mOutputFile.delete();
        }
      }
    }
);
    mDownloadThread.start();
  }
 else {
    mHandler.post(new Runnable(){
      @Override public void run(){
        if (onDownloadListener != null)         onDownloadListener.onFail(null);
      }
    }
);
  }
}",0.9393647738209816
17546,"/** 
 * Cards on FlashRecovery and FlashKernel Dialog
 */
public void FlashSupportedRecovery(Card card){
  final File path;
  final ArrayList<String> Versions;
  String SYSTEM=card.getData().toString();
  ArrayAdapter<String> VersionsAdapter=new ArrayAdapter<>(mContext,R.layout.custom_list_item);
switch (SYSTEM) {
case ""String_Node_Str"":
    Versions=mDevice.getStockRecoveryVersions();
  path=Const.PathToStockRecovery;
break;
case ""String_Node_Str"":
Versions=mDevice.getCwmRecoveryVersions();
path=Const.PathToCWM;
break;
case ""String_Node_Str"":
Versions=mDevice.getTwrpRecoveryVersions();
path=Const.PathToTWRP;
break;
case ""String_Node_Str"":
Versions=mDevice.getPhilzRecoveryVersions();
path=Const.PathToPhilz;
break;
default :
return;
}
for (String i : Versions) {
VersionsAdapter.add(formatName(i,SYSTEM));
}
final AlertDialog.Builder RecoveriesDialog=new AlertDialog.Builder(mContext);
RecoveriesDialog.setTitle(SYSTEM.toUpperCase());
RecoveriesDialog.setAdapter(VersionsAdapter,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
final String fileName=Versions.get(which);
final File recovery=new File(path,fileName);
if (!recovery.exists()) {
try {
URL url=new URL(Const.RECOVERY_URL + ""String_Node_Str"" + fileName);
DownloadDialog RecoveryDownloader=new DownloadDialog(mContext,url,recovery);
RecoveryDownloader.setOnDownloadListener(new DownloadDialog.OnDownloadListener(){
@Override public void success(File file){
flashRecovery(file);
}
@Override public void failed(Exception e){
}
}
);
RecoveryDownloader.setRetry(true);
RecoveryDownloader.setAskBeforeDownload(true);
RecoveryDownloader.setChecksumFile(Const.RecoveryCollectionFile);
RecoveryDownloader.ask();
}
 catch (MalformedURLException ignored) {
}
}
 else {
flashRecovery(recovery);
}
}
}
);
RecoveriesDialog.show();
}","/** 
 * Cards on FlashRecovery and FlashKernel Dialog
 */
public void FlashSupportedRecovery(Card card){
  final File path;
  final ArrayList<String> Versions;
  String SYSTEM=card.getData().toString();
  ArrayAdapter<String> VersionsAdapter=new ArrayAdapter<>(mContext,R.layout.custom_list_item);
switch (SYSTEM) {
case ""String_Node_Str"":
    Versions=mDevice.getStockRecoveryVersions();
  path=Const.PathToStockRecovery;
break;
case ""String_Node_Str"":
Versions=mDevice.getCwmRecoveryVersions();
path=Const.PathToCWM;
break;
case ""String_Node_Str"":
Versions=mDevice.getTwrpRecoveryVersions();
path=Const.PathToTWRP;
break;
case ""String_Node_Str"":
Versions=mDevice.getPhilzRecoveryVersions();
path=Const.PathToPhilz;
break;
default :
return;
}
for (String i : Versions) {
VersionsAdapter.add(formatName(i,SYSTEM));
}
final AlertDialog.Builder RecoveriesDialog=new AlertDialog.Builder(mContext);
RecoveriesDialog.setTitle(SYSTEM.toUpperCase());
RecoveriesDialog.setAdapter(VersionsAdapter,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
final String fileName=Versions.get(which);
final File recovery=new File(path,fileName);
if (!recovery.exists()) {
try {
URL url=new URL(Const.RECOVERY_URL + ""String_Node_Str"" + fileName);
final Downloader downloader=new Downloader(url,recovery);
final DownloadDialog RecoveryDownloader=new DownloadDialog(mContext,downloader);
RecoveryDownloader.setOnDownloadListener(new DownloadDialog.OnDownloadListener(){
@Override public void onSuccess(File file){
flashRecovery(file);
}
@Override public void onFail(Exception e){
RecoveryDownloader.retry();
}
}
);
RecoveryDownloader.setAskBeforeDownload(true);
downloader.setChecksumFile(Const.RecoveryCollectionFile);
RecoveryDownloader.ask();
}
 catch (MalformedURLException ignored) {
}
}
 else {
flashRecovery(recovery);
}
}
}
);
RecoveriesDialog.show();
}",0.9531459170013388
17547,"public void catchUpdates(final boolean ask){
  mSwipeUpdater.setRefreshing(true);
  final Thread updateThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        final URL recoveryUrl=new URL(Const.RECOVERY_SUMS_URL);
        URLConnection recoveryCon=recoveryUrl.openConnection();
        long recoveryListSize=recoveryCon.getContentLength();
        long recoveryListLocalSize=Const.RecoveryCollectionFile.length();
        if (recoveryListSize > 0) {
          isRecoveryListUpToDate=recoveryListLocalSize == recoveryListSize;
        }
        final URL kernelUrl=new URL(Const.KERNEL_SUMS_URL);
        URLConnection kernelCon=kernelUrl.openConnection();
        long kernelListSize=kernelCon.getContentLength();
        long kernelListLocalSize=Const.KernelCollectionFile.length();
        if (kernelListSize > 0) {
          isKernelListUpToDate=kernelListLocalSize == kernelListSize;
        }
      }
 catch (      IOException e) {
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            Toast.makeText(mContext,R.string.check_connection,Toast.LENGTH_SHORT).show();
          }
        }
);
        mActivity.addError(Const.RASHR_TAG,e,false);
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          if (!isRecoveryListUpToDate || !isKernelListUpToDate) {
            final int img_count=mDevice.getStockRecoveryVersions().size() + mDevice.getCwmRecoveryVersions().size() + mDevice.getTwrpRecoveryVersions().size()+ mDevice.getPhilzRecoveryVersions().size()+ mDevice.getStockKernelVersions().size();
            final URL recoveryURL;
            final URL kernelURL;
            try {
              recoveryURL=new URL(Const.RECOVERY_SUMS_URL);
              kernelURL=new URL(Const.KERNEL_SUMS_URL);
            }
 catch (            MalformedURLException e) {
              return;
            }
            final DownloadDialog RecoveryUpdater=new DownloadDialog(mContext,recoveryURL,Const.RecoveryCollectionFile);
            RecoveryUpdater.setOverrideFile(true);
            RecoveryUpdater.setOnDownloadListener(new DownloadDialog.OnDownloadListener(){
              @Override public void success(              File file){
                mDevice.loadRecoveryList();
                isRecoveryListUpToDate=true;
                final DownloadDialog KernelUpdater=new DownloadDialog(mContext,kernelURL,Const.KernelCollectionFile);
                KernelUpdater.setOverrideFile(true);
                KernelUpdater.setOnDownloadListener(new DownloadDialog.OnDownloadListener(){
                  @Override public void success(                  File file){
                    mDevice.loadKernelList();
                    isKernelListUpToDate=true;
                    final int new_img_count=(mDevice.getStockRecoveryVersions().size() + mDevice.getCwmRecoveryVersions().size() + mDevice.getTwrpRecoveryVersions().size()+ mDevice.getPhilzRecoveryVersions().size()+ mDevice.getStockKernelVersions().size()) - img_count;
                    mActivity.runOnUiThread(new Runnable(){
                      @Override public void run(){
                        if (isAdded()) {
                          Toast.makeText(mActivity,String.format(getString(R.string.new_imgs_loaded),new_img_count),Toast.LENGTH_SHORT).show();
                        }
                        mSwipeUpdater.setRefreshing(false);
                      }
                    }
);
                  }
                  @Override public void failed(                  final Exception e){
                    Toast.makeText(mActivity,e.getMessage(),Toast.LENGTH_SHORT).show();
                    mSwipeUpdater.setRefreshing(false);
                  }
                }
);
                KernelUpdater.execute();
              }
              @Override public void failed(              final Exception e){
                Toast.makeText(mActivity,e.getMessage(),Toast.LENGTH_SHORT).show();
                mSwipeUpdater.setRefreshing(false);
              }
            }
);
            mActivity.runOnUiThread(new Runnable(){
              @Override public void run(){
                if (ask) {
                  AlertDialog.Builder updateDialog=new AlertDialog.Builder(mContext);
                  updateDialog.setTitle(R.string.update_available).setMessage(R.string.lists_outdated).setPositiveButton(R.string.update,new DialogInterface.OnClickListener(){
                    @Override public void onClick(                    DialogInterface dialog,                    int which){
                      Toast.makeText(mActivity,R.string.refresh_list,Toast.LENGTH_SHORT).show();
                      RecoveryUpdater.execute();
                    }
                  }
).setNegativeButton(android.R.string.cancel,new DialogInterface.OnClickListener(){
                    @Override public void onClick(                    DialogInterface dialog,                    int which){
                    }
                  }
).show();
                }
 else {
                  Toast.makeText(mActivity,R.string.refresh_list,Toast.LENGTH_SHORT).show();
                  RecoveryUpdater.execute();
                }
              }
            }
);
          }
 else {
            mActivity.runOnUiThread(new Runnable(){
              @Override public void run(){
                if (!Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_UPDATE_HINTS)) {
                  Toast.makeText(mContext,R.string.uptodate,Toast.LENGTH_SHORT).show();
                }
                mSwipeUpdater.setRefreshing(false);
              }
            }
);
          }
        }
      }
);
    }
  }
);
  updateThread.start();
}","public void catchUpdates(final boolean ask){
  mSwipeUpdater.setRefreshing(true);
  final Thread updateThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        final URL recoveryUrl=new URL(Const.RECOVERY_SUMS_URL);
        URLConnection recoveryCon=recoveryUrl.openConnection();
        long recoveryListSize=recoveryCon.getContentLength();
        long recoveryListLocalSize=Const.RecoveryCollectionFile.length();
        if (recoveryListSize > 0) {
          isRecoveryListUpToDate=recoveryListLocalSize == recoveryListSize;
        }
        final URL kernelUrl=new URL(Const.KERNEL_SUMS_URL);
        URLConnection kernelCon=kernelUrl.openConnection();
        long kernelListSize=kernelCon.getContentLength();
        long kernelListLocalSize=Const.KernelCollectionFile.length();
        if (kernelListSize > 0) {
          isKernelListUpToDate=kernelListLocalSize == kernelListSize;
        }
      }
 catch (      IOException e) {
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            Toast.makeText(mContext,R.string.check_connection,Toast.LENGTH_SHORT).show();
          }
        }
);
        mActivity.addError(Const.RASHR_TAG,e,false);
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          if (!isRecoveryListUpToDate || !isKernelListUpToDate) {
            final int img_count=mDevice.getStockRecoveryVersions().size() + mDevice.getCwmRecoveryVersions().size() + mDevice.getTwrpRecoveryVersions().size()+ mDevice.getPhilzRecoveryVersions().size()+ mDevice.getStockKernelVersions().size();
            final URL recoveryURL;
            final URL kernelURL;
            try {
              recoveryURL=new URL(Const.RECOVERY_SUMS_URL);
              kernelURL=new URL(Const.KERNEL_SUMS_URL);
            }
 catch (            MalformedURLException e) {
              return;
            }
            Downloader downloader=new Downloader(recoveryURL,Const.RecoveryCollectionFile);
            final DownloadDialog RecoveryUpdater=new DownloadDialog(mContext,downloader);
            downloader.setOverrideFile(true);
            RecoveryUpdater.setOnDownloadListener(new DownloadDialog.OnDownloadListener(){
              @Override public void onSuccess(              File file){
                mDevice.loadRecoveryList();
                isRecoveryListUpToDate=true;
                Downloader downloader=new Downloader(kernelURL,Const.KernelCollectionFile);
                final DownloadDialog KernelUpdater=new DownloadDialog(mContext,downloader);
                downloader.setOverrideFile(true);
                KernelUpdater.setOnDownloadListener(new DownloadDialog.OnDownloadListener(){
                  @Override public void onSuccess(                  File file){
                    mDevice.loadKernelList();
                    isKernelListUpToDate=true;
                    final int new_img_count=(mDevice.getStockRecoveryVersions().size() + mDevice.getCwmRecoveryVersions().size() + mDevice.getTwrpRecoveryVersions().size()+ mDevice.getPhilzRecoveryVersions().size()+ mDevice.getStockKernelVersions().size()) - img_count;
                    mActivity.runOnUiThread(new Runnable(){
                      @Override public void run(){
                        if (isAdded()) {
                          Toast.makeText(mActivity,String.format(getString(R.string.new_imgs_loaded),new_img_count),Toast.LENGTH_SHORT).show();
                        }
                        mSwipeUpdater.setRefreshing(false);
                      }
                    }
);
                  }
                  @Override public void onFail(                  final Exception e){
                    Toast.makeText(mActivity,e.getMessage(),Toast.LENGTH_SHORT).show();
                    mSwipeUpdater.setRefreshing(false);
                  }
                }
);
                KernelUpdater.download();
              }
              @Override public void onFail(              final Exception e){
                Toast.makeText(mActivity,e.getMessage(),Toast.LENGTH_SHORT).show();
                mSwipeUpdater.setRefreshing(false);
              }
            }
);
            mActivity.runOnUiThread(new Runnable(){
              @Override public void run(){
                if (ask) {
                  AlertDialog.Builder updateDialog=new AlertDialog.Builder(mContext);
                  updateDialog.setTitle(R.string.update_available).setMessage(R.string.lists_outdated).setPositiveButton(R.string.update,new DialogInterface.OnClickListener(){
                    @Override public void onClick(                    DialogInterface dialog,                    int which){
                      Toast.makeText(mActivity,R.string.refresh_list,Toast.LENGTH_SHORT).show();
                      RecoveryUpdater.download();
                    }
                  }
).setNegativeButton(android.R.string.cancel,new DialogInterface.OnClickListener(){
                    @Override public void onClick(                    DialogInterface dialog,                    int which){
                    }
                  }
).show();
                }
 else {
                  Toast.makeText(mActivity,R.string.refresh_list,Toast.LENGTH_SHORT).show();
                  RecoveryUpdater.download();
                }
              }
            }
);
          }
 else {
            mActivity.runOnUiThread(new Runnable(){
              @Override public void run(){
                if (!Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_UPDATE_HINTS)) {
                  Toast.makeText(mContext,R.string.uptodate,Toast.LENGTH_SHORT).show();
                }
                mSwipeUpdater.setRefreshing(false);
              }
            }
);
          }
        }
      }
);
    }
  }
);
  updateThread.start();
}",0.9598549598549598
17548,"public void FlashSupportedKernel(Card card){
  final File path;
  final ArrayList<String> Versions;
  ArrayAdapter<String> VersionsAdapter=new ArrayAdapter<>(mContext,R.layout.custom_list_item);
  String SYSTEM=card.getData().toString();
  if (SYSTEM.equals(""String_Node_Str"")) {
    Versions=mDevice.getStockKernelVersions();
    path=Const.PathToStockKernel;
    for (    String i : Versions) {
      try {
        String version=i.split(""String_Node_Str"")[3].replace(mDevice.getRecoveryExt(),""String_Node_Str"");
        String deviceName=i.split(""String_Node_Str"")[2];
        VersionsAdapter.add(""String_Node_Str"" + version + ""String_Node_Str""+ deviceName+ ""String_Node_Str"");
      }
 catch (      ArrayIndexOutOfBoundsException e) {
        VersionsAdapter.add(i);
      }
    }
  }
 else {
    return;
  }
  final AlertDialog.Builder KernelDialog=new AlertDialog.Builder(mContext);
  KernelDialog.setTitle(SYSTEM);
  KernelDialog.setAdapter(VersionsAdapter,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      final File kernel=new File(path,Versions.get(which));
      if (!kernel.exists()) {
        try {
          URL url=new URL(Const.KERNEL_URL + ""String_Node_Str"" + kernel.getName());
          DownloadDialog KernelDownloader=new DownloadDialog(mContext,url,kernel);
          KernelDownloader.setOnDownloadListener(new DownloadDialog.OnDownloadListener(){
            @Override public void success(            File file){
              flashKernel(file);
            }
            @Override public void failed(            Exception e){
            }
          }
);
          KernelDownloader.setRetry(true);
          KernelDownloader.setAskBeforeDownload(true);
          KernelDownloader.setChecksumFile(Const.KernelCollectionFile);
          KernelDownloader.ask();
        }
 catch (        MalformedURLException ignored) {
        }
      }
 else {
        flashKernel(kernel);
      }
    }
  }
);
  KernelDialog.show();
}","public void FlashSupportedKernel(Card card){
  final File path;
  final ArrayList<String> Versions;
  ArrayAdapter<String> VersionsAdapter=new ArrayAdapter<>(mContext,R.layout.custom_list_item);
  String SYSTEM=card.getData().toString();
  if (SYSTEM.equals(""String_Node_Str"")) {
    Versions=mDevice.getStockKernelVersions();
    path=Const.PathToStockKernel;
    for (    String i : Versions) {
      try {
        String version=i.split(""String_Node_Str"")[3].replace(mDevice.getRecoveryExt(),""String_Node_Str"");
        String deviceName=i.split(""String_Node_Str"")[2];
        VersionsAdapter.add(""String_Node_Str"" + version + ""String_Node_Str""+ deviceName+ ""String_Node_Str"");
      }
 catch (      ArrayIndexOutOfBoundsException e) {
        VersionsAdapter.add(i);
      }
    }
  }
 else {
    return;
  }
  final AlertDialog.Builder KernelDialog=new AlertDialog.Builder(mContext);
  KernelDialog.setTitle(SYSTEM);
  KernelDialog.setAdapter(VersionsAdapter,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      final File kernel=new File(path,Versions.get(which));
      if (!kernel.exists()) {
        try {
          URL url=new URL(Const.KERNEL_URL + ""String_Node_Str"" + kernel.getName());
          Downloader downloader=new Downloader(url,kernel);
          final DownloadDialog KernelDownloader=new DownloadDialog(mContext,downloader);
          KernelDownloader.setOnDownloadListener(new DownloadDialog.OnDownloadListener(){
            @Override public void onSuccess(            File file){
              flashKernel(file);
            }
            @Override public void onFail(            Exception e){
              KernelDownloader.retry();
            }
          }
);
          KernelDownloader.setAskBeforeDownload(true);
          downloader.setChecksumFile(Const.KernelCollectionFile);
          KernelDownloader.ask();
        }
 catch (        MalformedURLException ignored) {
        }
      }
 else {
        flashKernel(kernel);
      }
    }
  }
);
  KernelDialog.show();
}",0.9527539779681764
17549,"public void DD() throws FailedExecuteCommand, IOException {
  Thread observer;
  if (isJobBackup() && (isJobRecovery() ? mDevice.isRecoveryDD() : mDevice.isKernelDD())) {
    observer=new Thread(new Runnable(){
      @Override public void run(){
        while (true) {
          try {
            final int progress=Common.safeLongToInt(tmpFile.length());
            mActivity.runOnUiThread(new Runnable(){
              @Override public void run(){
                pDialog.setProgress(progress);
              }
            }
);
            if (progress >= pDialog.getMax())             break;
          }
 catch (          IllegalArgumentException e) {
            mActivity.addError(Const.FLASH_UTIL_TAG,e,false);
            pDialog.setProgress(pDialog.getMax());
            break;
          }
        }
      }
    }
);
    observer.start();
  }
  if (isJobFlash()) {
    int customSize=getSizeOfFile(mCustomIMG);
    int partitionSize=getSizeOfFile(mPartition);
    if (partitionSize != 0) {
      if (customSize > partitionSize) {
        throw new IOException(""String_Node_Str"" + customSize / (1024 * 1024) + ""String_Node_Str"" + partitionSize / (1024 * 1024) + ""String_Node_Str"");
      }
    }
  }
  String Command=""String_Node_Str"";
  if (isJobFlash() || isJobRestore()) {
    if (mDevice.isLoki() && isJobFlash()) {
      Command=lokiPatch();
    }
 else {
      Common.copyFile(mCustomIMG,tmpFile);
      Command=Const.Busybox + ""String_Node_Str"" + tmpFile+ ""String_Node_Str""+ mPartition+ ""String_Node_Str"";
      if ((isJobRecovery() ? mDevice.getRecoveryBlocksize() : mDevice.getKernelBlocksize()) > 0) {
        String bs=""String_Node_Str"" + (isJobRecovery() ? mDevice.getRecoveryBlocksize() : mDevice.getKernelBlocksize());
        Command+=bs;
      }
    }
  }
 else   if (isJobBackup()) {
    Command=Const.Busybox + ""String_Node_Str"" + mPartition+ ""String_Node_Str""+ tmpFile+ ""String_Node_Str"";
  }
  mShell.execCommand(Command,true);
  if (isJobBackup())   placeImgBack();
}","public void DD() throws FailedExecuteCommand, IOException {
  Thread observer;
  if (isJobBackup() && (isJobRecovery() ? mDevice.isRecoveryDD() : mDevice.isKernelDD())) {
    observer=new Thread(new Runnable(){
      @Override public void run(){
        while (true) {
          try {
            final int progress=Common.safeLongToInt(tmpFile.length());
            mActivity.runOnUiThread(new Runnable(){
              @Override public void run(){
                pDialog.setProgress(progress);
              }
            }
);
            if (progress >= pDialog.getMax())             break;
          }
 catch (          IllegalArgumentException e) {
            mActivity.addError(Const.FLASH_UTIL_TAG,e,false);
            pDialog.setProgress(pDialog.getMax());
            break;
          }
        }
      }
    }
);
    observer.start();
  }
  if (isJobFlash()) {
    int customSize=getSizeOfFile(mCustomIMG);
    int partitionSize=getSizeOfFile(mPartition);
    if (partitionSize != 0) {
      if (customSize > partitionSize) {
        throw new IOException(""String_Node_Str"" + customSize / (1024 * 1024) + ""String_Node_Str"" + partitionSize / (1024 * 1024) + ""String_Node_Str"");
      }
    }
  }
  String Command=""String_Node_Str"";
  if (isJobFlash() || isJobRestore()) {
    if (mDevice.isLoki() && isJobFlash()) {
      Command=lokiPatch();
    }
 else {
      Common.copyFile(mCustomIMG,tmpFile);
      Command=Const.Busybox + ""String_Node_Str"" + tmpFile+ ""String_Node_Str""+ mPartition+ ""String_Node_Str"";
      if ((isJobRecovery() ? mDevice.getRecoveryBlocksize() : mDevice.getKernelBlocksize()) > 0) {
        String bs=""String_Node_Str"" + (isJobRecovery() ? mDevice.getRecoveryBlocksize() : mDevice.getKernelBlocksize());
        Command+=bs;
      }
    }
  }
 else   if (isJobBackup()) {
    Command=Const.Busybox + ""String_Node_Str"" + mPartition+ ""String_Node_Str""+ tmpFile+ ""String_Node_Str"";
  }
  mShell.execCommand(Command);
  if (isJobBackup())   placeImgBack();
}",0.9987465530208072
17550,"private void placeImgBack() throws IOException, FailedExecuteCommand {
  mToolbox.setFilePermissions(tmpFile,""String_Node_Str"");
  Common.copyFile(tmpFile,mCustomIMG);
}","private void placeImgBack() throws IOException, FailedExecuteCommand {
  mShell.execCommand(Const.Busybox + ""String_Node_Str"" + tmpFile);
  Common.copyFile(tmpFile,mCustomIMG);
}",0.8011527377521613
17551,"public void MTD() throws FailedExecuteCommand, IOException {
  String Command;
  if (isJobRecovery()) {
    Command=""String_Node_Str"";
  }
 else   if (isJobKernel()) {
    Command=""String_Node_Str"";
  }
 else {
    return;
  }
  if (isJobFlash() || isJobRestore()) {
    Command=flash_image.getAbsolutePath() + Command + ""String_Node_Str""+ tmpFile.getAbsolutePath()+ ""String_Node_Str"";
  }
 else   if (isJobBackup()) {
    Command=dump_image.getAbsolutePath() + Command + ""String_Node_Str""+ tmpFile.getAbsolutePath()+ ""String_Node_Str"";
  }
  mShell.execCommand(Command,true);
  if (isJobBackup())   placeImgBack();
}","public void MTD() throws FailedExecuteCommand, IOException {
  String Command;
  if (isJobRecovery()) {
    Command=""String_Node_Str"";
  }
 else   if (isJobKernel()) {
    Command=""String_Node_Str"";
  }
 else {
    return;
  }
  if (isJobFlash() || isJobRestore()) {
    Command=flash_image.getAbsolutePath() + Command + ""String_Node_Str""+ tmpFile.getAbsolutePath()+ ""String_Node_Str"";
  }
 else   if (isJobBackup()) {
    Command=dump_image.getAbsolutePath() + Command + ""String_Node_Str""+ tmpFile.getAbsolutePath()+ ""String_Node_Str"";
  }
  mShell.execCommand(Command);
  if (isJobBackup())   placeImgBack();
}",0.9959316517493898
17552,"protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Const.FilesDir=mContext.getFilesDir();
  Const.RecoveryCollectionFile=new File(Const.FilesDir,""String_Node_Str"");
  Const.KernelCollectionFile=new File(Const.FilesDir,""String_Node_Str"");
  isDark=Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_DARK_UI);
  setTheme(!isDark ? R.style.Rashr : R.style.Rashr_Dark);
  setContentView(R.layout.loading_layout);
  final TextView tvLoading=(TextView)findViewById(R.id.tvLoading);
  final Thread StartThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        startShell();
      }
 catch (      IOException e) {
        mActivity.addError(Const.RASHR_TAG,e,false);
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            setContentView(R.layout.err_layout);
          }
        }
);
        return;
      }
      Common.deleteLogs(mContext);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          tvLoading.setText(R.string.loading_data);
        }
      }
);
      for (      File i : Folder) {
        if (!i.exists()) {
          if (!i.mkdir()) {
            mActivity.addError(Const.RASHR_TAG,new IOException(i + ""String_Node_Str""),false);
          }
        }
      }
      try {
        File LogCopy=new File(mContext.getFilesDir(),Const.LastLog.getName() + ""String_Node_Str"");
        mShell.execCommand(Const.Busybox + ""String_Node_Str"" + Const.LastLog);
        mToolbox.copyFile(Const.LastLog,LogCopy,false,false);
      }
 catch (      Exception e) {
        LastLogExists=false;
        mActivity.addError(Const.RASHR_TAG,e,false);
      }
      final int previous_version=Common.getIntegerPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CUR_VER);
      final int current_version=BuildConfig.VERSION_CODE;
      mVersionChanged=current_version > previous_version;
      Common.setIntegerPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CUR_VER,current_version);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          checkUpdates(current_version);
        }
      }
);
      if (mVersionChanged) {
        Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_ADS,true);
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            if (!Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_RATER)) {
              Notifyer.showAppRateDialog(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_RATER);
            }
          }
        }
);
      }
      try {
        extractFiles();
      }
 catch (      IOException e) {
        mActivity.addError(Const.RASHR_TAG,e,true);
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            Toast.makeText(mContext,R.string.failed_unpack_files,Toast.LENGTH_LONG).show();
          }
        }
);
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          tvLoading.setText(R.string.reading_device);
        }
      }
);
      if (mDevice == null)       mDevice=new Device(mActivity);
      if (!mDevice.isRecoverySupported() && !mDevice.isKernelSupported()) {
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            showDeviceNotSupportedDialog();
          }
        }
);
      }
 else {
        Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_SHOW_UNIFIED,true);
        if (!Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_FIRST_RUN)) {
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_UPDATE_HINTS,false);
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_ADS,true);
          Common.setBooleanPref(mContext,Shell.PREF_NAME,Shell.PREF_LOG,true);
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CHECK_UPDATES,true);
          mActivity.runOnUiThread(new Runnable(){
            @Override public void run(){
              showUsageWarning();
            }
          }
);
        }
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          try {
            setContentView(R.layout.activity_rashr);
            mToolbar=(Toolbar)findViewById(R.id.toolbar);
            setSupportActionBar(mToolbar);
            mNavigationDrawerFragment=(NavigationDrawerFragment)getSupportFragmentManager().findFragmentById(R.id.navigation_drawer);
            mNavigationDrawerFragment.setUp(R.id.navigation_drawer,(DrawerLayout)findViewById(R.id.RashrLayout));
            AdView ads=(AdView)findViewById(R.id.ads);
            if (ads != null) {
              if (Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_ADS)) {
                ads.loadAd(new AdRequest().addTestDevice(""String_Node_Str""));
              }
            }
            if (getIntent().getAction().equals(Intent.ACTION_VIEW)) {
              if (getIntent().getData().toString().endsWith(""String_Node_Str"")) {
                File zip=new File(getIntent().getData().getPath());
                if (zip.exists())                 switchTo(ScriptManagerFragment.newInstance(mActivity,zip));
              }
 else {
                File img=new File(getIntent().getData().getPath());
                if (img.exists())                 switchTo(FlashAsFragment.newInstance(mActivity,img,true));
              }
            }
 else {
              onNavigationDrawerItemSelected(0);
            }
          }
 catch (          NullPointerException e) {
            setContentView(R.layout.err_layout);
            mActivity.addError(Const.RASHR_TAG,e,false);
            AppCompatTextView tv=(AppCompatTextView)findViewById(R.id.tvErr);
            try {
              tv.setText(R.string.failed_setup_layout);
            }
 catch (            RuntimeException ex) {
              mActivity.addError(Const.RASHR_TAG,e,true);
              ex.printStackTrace();
            }
          }
        }
      }
);
    }
  }
);
  StartThread.start();
}","protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Const.FilesDir=mContext.getFilesDir();
  Const.RecoveryCollectionFile=new File(Const.FilesDir,""String_Node_Str"");
  Const.KernelCollectionFile=new File(Const.FilesDir,""String_Node_Str"");
  isDark=Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_DARK_UI);
  setTheme(!isDark ? R.style.Rashr : R.style.Rashr_Dark);
  setContentView(R.layout.loading_layout);
  final TextView tvLoading=(TextView)findViewById(R.id.tvLoading);
  final Thread StartThread=new Thread(new Runnable(){
    @Override public void run(){
      final int previous_version=Common.getIntegerPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CUR_VER);
      final int current_version=BuildConfig.VERSION_CODE;
      mVersionChanged=current_version > previous_version;
      Common.setIntegerPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CUR_VER,current_version);
      try {
        startShell();
      }
 catch (      IOException e) {
        mActivity.addError(Const.RASHR_TAG,e,false);
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            setContentView(R.layout.err_layout);
          }
        }
);
        return;
      }
      Common.deleteLogs(mContext);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          tvLoading.setText(R.string.loading_data);
        }
      }
);
      for (      File i : Folder) {
        if (!i.exists()) {
          if (!i.mkdir()) {
            mActivity.addError(Const.RASHR_TAG,new IOException(i + ""String_Node_Str""),false);
          }
        }
      }
      try {
        extractFiles();
      }
 catch (      IOException e) {
        mActivity.addError(Const.RASHR_TAG,e,true);
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            Toast.makeText(mContext,R.string.failed_unpack_files,Toast.LENGTH_LONG).show();
          }
        }
);
      }
      File LogCopy=new File(mContext.getFilesDir(),Const.LastLog.getName());
      try {
        mShell.execCommand(Const.Busybox + ""String_Node_Str"" + Const.LastLog);
        mToolbox.copyFile(Const.LastLog,LogCopy,false,false);
      }
 catch (      Exception e) {
        LastLogExists=LogCopy.exists();
        mActivity.addError(Const.RASHR_TAG,e,false);
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          checkUpdates(current_version);
        }
      }
);
      if (mVersionChanged) {
        Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_ADS,true);
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            if (!Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_RATER)) {
              Notifyer.showAppRateDialog(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_RATER);
            }
          }
        }
);
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          tvLoading.setText(R.string.reading_device);
        }
      }
);
      if (mDevice == null)       mDevice=new Device(mActivity);
      if (!mDevice.isRecoverySupported() && !mDevice.isKernelSupported()) {
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            showDeviceNotSupportedDialog();
          }
        }
);
      }
 else {
        Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_SHOW_UNIFIED,true);
        if (!Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_FIRST_RUN)) {
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_UPDATE_HINTS,false);
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_ADS,true);
          Common.setBooleanPref(mContext,Shell.PREF_NAME,Shell.PREF_LOG,true);
          Common.setBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_CHECK_UPDATES,true);
          mActivity.runOnUiThread(new Runnable(){
            @Override public void run(){
              showUsageWarning();
            }
          }
);
        }
      }
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          try {
            setContentView(R.layout.activity_rashr);
            mToolbar=(Toolbar)findViewById(R.id.toolbar);
            setSupportActionBar(mToolbar);
            mNavigationDrawerFragment=(NavigationDrawerFragment)getSupportFragmentManager().findFragmentById(R.id.navigation_drawer);
            mNavigationDrawerFragment.setUp(R.id.navigation_drawer,(DrawerLayout)findViewById(R.id.RashrLayout));
            AdView ads=(AdView)findViewById(R.id.ads);
            if (ads != null) {
              if (Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_ADS)) {
                ads.loadAd(new AdRequest().addTestDevice(""String_Node_Str""));
              }
            }
            if (getIntent().getAction().equals(Intent.ACTION_VIEW)) {
              if (getIntent().getData().toString().endsWith(""String_Node_Str"")) {
                File zip=new File(getIntent().getData().getPath());
                if (zip.exists())                 switchTo(ScriptManagerFragment.newInstance(mActivity,zip));
              }
 else {
                File img=new File(getIntent().getData().getPath());
                if (img.exists())                 switchTo(FlashAsFragment.newInstance(mActivity,img,true));
              }
            }
 else {
              onNavigationDrawerItemSelected(0);
            }
          }
 catch (          NullPointerException e) {
            setContentView(R.layout.err_layout);
            mActivity.addError(Const.RASHR_TAG,e,false);
            AppCompatTextView tv=(AppCompatTextView)findViewById(R.id.tvErr);
            try {
              tv.setText(R.string.failed_setup_layout);
            }
 catch (            RuntimeException ex) {
              mActivity.addError(Const.RASHR_TAG,e,true);
              ex.printStackTrace();
            }
          }
        }
      }
);
    }
  }
);
  StartThread.start();
}",0.8887974318873981
17553,"public void checkUpdates(final int currentVersion){
  try {
    File versionsFile=new File(mContext.getFilesDir(),""String_Node_Str"");
    DownloadDialog version=new DownloadDialog(mContext,new URL(Const.RASHR_VERSION_URL),versionsFile);
    version.setOverrideFile(true);
    version.setHidden(true);
    version.setOnDownloadListener(new DownloadDialog.OnDownloadListener(){
      @Override public void success(      File file){
        try {
          if (currentVersion < Integer.valueOf(Common.fileContent(file))) {
            new AlertDialog.Builder(mContext).setTitle(R.string.update_available).setMessage(R.string.download_update).setPositiveButton(R.string.open_playstore,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int which){
                startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + getPackageName())));
              }
            }
).setCancelable(false).show();
          }
 else {
            if (Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_UPDATE_HINTS)) {
              Toast.makeText(mContext,R.string.app_uptodate,Toast.LENGTH_SHORT).show();
            }
          }
        }
 catch (        IOException ignore) {
        }
      }
      @Override public void failed(      Exception e){
        Toast.makeText(mContext,R.string.failed_update,Toast.LENGTH_SHORT).show();
      }
    }
);
    version.execute();
  }
 catch (  MalformedURLException ignore) {
  }
}","public void checkUpdates(final int currentVersion){
  try {
    File versionsFile=new File(mContext.getFilesDir(),""String_Node_Str"");
    Downloader downloader=new Downloader(new URL(Const.RASHR_VERSION_URL),versionsFile);
    downloader.setOverrideFile(true);
    downloader.setOnDownloadListener(new Downloader.OnDownloadListener(){
      @Override public void onSuccess(      File file){
        try {
          if (currentVersion < Integer.valueOf(Common.fileContent(file))) {
            new AlertDialog.Builder(mContext).setTitle(R.string.update_available).setMessage(R.string.download_update).setPositiveButton(R.string.open_playstore,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int which){
                startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + getPackageName())));
              }
            }
).setCancelable(false).show();
          }
 else {
            if (Common.getBooleanPref(mContext,Const.PREF_NAME,Const.PREF_KEY_HIDE_UPDATE_HINTS)) {
              Toast.makeText(mContext,R.string.app_uptodate,Toast.LENGTH_SHORT).show();
            }
          }
        }
 catch (        IOException ignore) {
        }
      }
      @Override public void onFail(      Exception e){
        Toast.makeText(mContext,R.string.failed_update,Toast.LENGTH_SHORT).show();
      }
    }
);
    downloader.download();
  }
 catch (  MalformedURLException ignore) {
  }
}",0.9367759020191988
17554,"private void extractFiles() throws IOException {
  Const.RecoveryCollectionFile=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.RecoveryCollectionFile,R.raw.recovery_sums,mVersionChanged);
  Const.KernelCollectionFile=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.KernelCollectionFile,R.raw.kernel_sums,mVersionChanged);
  Const.Busybox=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.Busybox,R.raw.busybox,mVersionChanged);
  try {
    mToolbox.setFilePermissions(Const.Busybox,""String_Node_Str"");
  }
 catch (  FailedExecuteCommand failedExecuteCommand) {
    failedExecuteCommand.printStackTrace();
  }
  File PartLayoutsZip=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,PartLayoutsZip,R.raw.partlayouts,mVersionChanged);
  File flash_image=new File(getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,flash_image,R.raw.flash_image,mVersionChanged);
  File dump_image=new File(getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,dump_image,R.raw.dump_image,mVersionChanged);
  Const.LokiPatch=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.LokiPatch,R.raw.loki_patch,mVersionChanged);
  Const.LokiFlash=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.LokiFlash,R.raw.loki_flash,mVersionChanged);
}","private void extractFiles() throws IOException {
  Const.RecoveryCollectionFile=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.RecoveryCollectionFile,R.raw.recovery_sums,mVersionChanged);
  Const.KernelCollectionFile=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.KernelCollectionFile,R.raw.kernel_sums,mVersionChanged);
  Const.Busybox=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.Busybox,R.raw.busybox,mVersionChanged);
  try {
    mShell.execCommand(""String_Node_Str"" + Const.Busybox);
  }
 catch (  FailedExecuteCommand failedExecuteCommand) {
    failedExecuteCommand.printStackTrace();
  }
  File PartLayoutsZip=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,PartLayoutsZip,R.raw.partlayouts,mVersionChanged);
  File flash_image=new File(getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,flash_image,R.raw.flash_image,mVersionChanged);
  File dump_image=new File(getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,dump_image,R.raw.dump_image,mVersionChanged);
  Const.LokiPatch=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.LokiPatch,R.raw.loki_patch,mVersionChanged);
  Const.LokiFlash=new File(mContext.getFilesDir(),""String_Node_Str"");
  Common.pushFileFromRAW(mContext,Const.LokiFlash,R.raw.loki_flash,mVersionChanged);
}",0.9721756620851492
17555,"@Override public void onClick(View v){
  if (!Common.getBooleanPref(activity,Const.PREF_NAME,Const.PREF_KEY_ADS))   Toast.makeText(activity,R.string.please_ads,Toast.LENGTH_SHORT).show();
  Toast.makeText(activity,R.string.donate_to_support,Toast.LENGTH_SHORT).show();
  try {
    ArrayList<File> files=new ArrayList<>();
    File TestResults=new File(activity.getFilesDir(),""String_Node_Str"");
    try {
      if (TestResults.exists()) {
        if (TestResults.delete()) {
          FileOutputStream fos=activity.openFileOutput(TestResults.getName(),Context.MODE_PRIVATE);
          fos.write((""String_Node_Str"" + shell.execCommand(""String_Node_Str"" + Const.PathToRashr.getAbsolutePath()) + ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")).getBytes());
        }
        files.add(TestResults);
      }
    }
 catch (    Exception e) {
      activity.addError(Const.RASHR_TAG,e,false);
    }
    if (activity.getPackageManager() != null) {
      PackageInfo pInfo=activity.getPackageManager().getPackageInfo(activity.getPackageName(),0);
      String comment=""String_Node_Str"";
      if (text.getText() != null)       comment=text.getText().toString();
      Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);
      intent.setType(""String_Node_Str"");
      intent.putExtra(Intent.EXTRA_EMAIL,new String[]{""String_Node_Str""});
      intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + pInfo.versionCode + ""String_Node_Str"");
      String message=""String_Node_Str"" + ""String_Node_Str"" + pInfo.packageName + ""String_Node_Str""+ pInfo.versionName;
      message+=""String_Node_Str"" + ""String_Node_Str"" + Build.MANUFACTURER + ""String_Node_Str""+ device.getManufacture()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.DEVICE+ ""String_Node_Str""+ device.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.BOARD+ ""String_Node_Str""+ Build.BRAND+ ""String_Node_Str""+ Build.MODEL+ ""String_Node_Str""+ Build.FINGERPRINT+ ""String_Node_Str""+ Build.VERSION.CODENAME+ ""String_Node_Str""+ Build.VERSION.SDK_INT+ ""String_Node_Str"";
      if (device.isRecoverySupported()) {
        message+=""String_Node_Str"" + device.getRecoveryPath() + ""String_Node_Str""+ device.getRecoveryVersion()+ ""String_Node_Str""+ device.isRecoveryMTD()+ ""String_Node_Str""+ device.isRecoveryDD()+ ""String_Node_Str""+ device.isStockRecoverySupported()+ ""String_Node_Str""+ device.isCwmRecoverySupported()+ ""String_Node_Str""+ device.isTwrpRecoverySupported()+ ""String_Node_Str""+ device.isPhilzRecoverySupported();
      }
      if (device.isKernelSupported()) {
        message+=""String_Node_Str"" + device.getKernelPath() + ""String_Node_Str""+ device.getKernelVersion()+ ""String_Node_Str""+ device.isKernelMTD()+ ""String_Node_Str""+ device.isKernelDD();
      }
      if (!comment.equals(""String_Node_Str"")) {
        message+=""String_Node_Str"" + comment + ""String_Node_Str"";
      }
      message+=""String_Node_Str"" + activity.getAllPrefs() + ""String_Node_Str"";
      files.add(new File(activity.getFilesDir(),Shell.Logs));
      files.add(new File(activity.getFilesDir(),""String_Node_Str""));
      ArrayList<Uri> uris=new ArrayList<>();
      File tmpFolder=new File(activity.getFilesDir(),""String_Node_Str"");
      if (tmpFolder.mkdir())       tmpFolder.deleteOnExit();
      for (      File i : files) {
        try {
          File tmp=new File(tmpFolder,i.getName());
          shell.execCommand(Const.Busybox + ""String_Node_Str"" + i);
          toolbox.copyFile(i,tmp,true,false);
          toolbox.setFilePermissions(tmp,""String_Node_Str"");
          shell.execCommand(Const.Busybox + ""String_Node_Str"" + tmp);
        }
 catch (        Exception e) {
          activity.addError(Const.RASHR_TAG,e,false);
        }
      }
      if (errors.size() > 0) {
        message+=""String_Node_Str"";
        for (        String error : errors) {
          message+=error + ""String_Node_Str"";
        }
      }
      intent.putExtra(Intent.EXTRA_TEXT,message);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
      activity.startActivity(Intent.createChooser(intent,""String_Node_Str""));
      dismiss();
    }
  }
 catch (  Exception e) {
    dismiss();
    activity.addError(Const.RASHR_TAG,e,false);
  }
}","@Override public void onClick(View v){
  if (!Common.getBooleanPref(activity,Const.PREF_NAME,Const.PREF_KEY_ADS))   Toast.makeText(activity,R.string.please_ads,Toast.LENGTH_SHORT).show();
  Toast.makeText(activity,R.string.donate_to_support,Toast.LENGTH_SHORT).show();
  try {
    ArrayList<File> files=new ArrayList<>();
    File TestResults=new File(activity.getFilesDir(),""String_Node_Str"");
    try {
      if (TestResults.exists()) {
        if (TestResults.delete()) {
          FileOutputStream fos=activity.openFileOutput(TestResults.getName(),Context.MODE_PRIVATE);
          fos.write((""String_Node_Str"" + shell.execCommand(""String_Node_Str"" + Const.PathToRashr.getAbsolutePath()) + ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")).getBytes());
        }
        files.add(TestResults);
      }
    }
 catch (    Exception e) {
      activity.addError(Const.RASHR_TAG,e,false);
    }
    if (activity.getPackageManager() != null) {
      PackageInfo pInfo=activity.getPackageManager().getPackageInfo(activity.getPackageName(),0);
      String comment=""String_Node_Str"";
      if (text.getText() != null)       comment=text.getText().toString();
      Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);
      intent.setType(""String_Node_Str"");
      intent.putExtra(Intent.EXTRA_EMAIL,new String[]{""String_Node_Str""});
      intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + pInfo.versionCode + ""String_Node_Str"");
      String message=""String_Node_Str"" + ""String_Node_Str"" + pInfo.packageName + ""String_Node_Str""+ pInfo.versionName;
      message+=""String_Node_Str"" + ""String_Node_Str"" + Build.MANUFACTURER + ""String_Node_Str""+ device.getManufacture()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.DEVICE+ ""String_Node_Str""+ device.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.BOARD+ ""String_Node_Str""+ Build.BRAND+ ""String_Node_Str""+ Build.MODEL+ ""String_Node_Str""+ Build.FINGERPRINT+ ""String_Node_Str""+ Build.VERSION.CODENAME+ ""String_Node_Str""+ Build.VERSION.SDK_INT+ ""String_Node_Str"";
      if (device.isRecoverySupported()) {
        message+=""String_Node_Str"" + device.getRecoveryPath() + ""String_Node_Str""+ device.getRecoveryVersion()+ ""String_Node_Str""+ device.isRecoveryMTD()+ ""String_Node_Str""+ device.isRecoveryDD()+ ""String_Node_Str""+ device.isStockRecoverySupported()+ ""String_Node_Str""+ device.isCwmRecoverySupported()+ ""String_Node_Str""+ device.isTwrpRecoverySupported()+ ""String_Node_Str""+ device.isPhilzRecoverySupported();
      }
      if (device.isKernelSupported()) {
        message+=""String_Node_Str"" + device.getKernelPath() + ""String_Node_Str""+ device.getKernelVersion()+ ""String_Node_Str""+ device.isKernelMTD()+ ""String_Node_Str""+ device.isKernelDD();
      }
      if (!comment.equals(""String_Node_Str"")) {
        message+=""String_Node_Str"" + comment + ""String_Node_Str"";
      }
      message+=""String_Node_Str"" + activity.getAllPrefs() + ""String_Node_Str"";
      files.add(new File(activity.getFilesDir(),Shell.Logs));
      files.add(new File(activity.getFilesDir(),Const.LastLog.getName()));
      ArrayList<Uri> uris=new ArrayList<>();
      for (      File i : files) {
        try {
          shell.execCommand(Const.Busybox + ""String_Node_Str"" + i);
        }
 catch (        Exception e) {
          activity.addError(Const.RASHR_TAG,e,false);
        }
      }
      if (errors.size() > 0) {
        message+=""String_Node_Str"";
        for (        String error : errors) {
          message+=error + ""String_Node_Str"";
        }
      }
      intent.putExtra(Intent.EXTRA_TEXT,message);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
      activity.startActivity(Intent.createChooser(intent,""String_Node_Str""));
      dismiss();
    }
  }
 catch (  Exception e) {
    dismiss();
    activity.addError(Const.RASHR_TAG,e,false);
  }
}",0.9434098281869518
17556,"public ReportDialog(final RashrActivity activity,String message){
  super(activity);
  final Shell shell=activity.getShell();
  final Device device=activity.getDevice();
  final Toolbox toolbox=activity.getToolbox();
  final ArrayList<String> errors=activity.getErrors();
  setTitle(R.string.comment);
  setContentView(R.layout.dialog_comment);
  final EditText text=(EditText)findViewById(R.id.etComment);
  if (!message.equals(""String_Node_Str""))   text.setText(message);
  new Thread(new Runnable(){
    @Override public void run(){
      final Button bGo=(Button)findViewById(R.id.bGo);
      bGo.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          if (!Common.getBooleanPref(activity,Const.PREF_NAME,Const.PREF_KEY_ADS))           Toast.makeText(activity,R.string.please_ads,Toast.LENGTH_SHORT).show();
          Toast.makeText(activity,R.string.donate_to_support,Toast.LENGTH_SHORT).show();
          try {
            ArrayList<File> files=new ArrayList<>();
            File TestResults=new File(activity.getFilesDir(),""String_Node_Str"");
            try {
              if (TestResults.exists()) {
                if (TestResults.delete()) {
                  FileOutputStream fos=activity.openFileOutput(TestResults.getName(),Context.MODE_PRIVATE);
                  fos.write((""String_Node_Str"" + shell.execCommand(""String_Node_Str"" + Const.PathToRashr.getAbsolutePath()) + ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")).getBytes());
                }
                files.add(TestResults);
              }
            }
 catch (            Exception e) {
              activity.addError(Const.RASHR_TAG,e,false);
            }
            if (activity.getPackageManager() != null) {
              PackageInfo pInfo=activity.getPackageManager().getPackageInfo(activity.getPackageName(),0);
              String comment=""String_Node_Str"";
              if (text.getText() != null)               comment=text.getText().toString();
              Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);
              intent.setType(""String_Node_Str"");
              intent.putExtra(Intent.EXTRA_EMAIL,new String[]{""String_Node_Str""});
              intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + pInfo.versionCode + ""String_Node_Str"");
              String message=""String_Node_Str"" + ""String_Node_Str"" + pInfo.packageName + ""String_Node_Str""+ pInfo.versionName;
              message+=""String_Node_Str"" + ""String_Node_Str"" + Build.MANUFACTURER + ""String_Node_Str""+ device.getManufacture()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.DEVICE+ ""String_Node_Str""+ device.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.BOARD+ ""String_Node_Str""+ Build.BRAND+ ""String_Node_Str""+ Build.MODEL+ ""String_Node_Str""+ Build.FINGERPRINT+ ""String_Node_Str""+ Build.VERSION.CODENAME+ ""String_Node_Str""+ Build.VERSION.SDK_INT+ ""String_Node_Str"";
              if (device.isRecoverySupported()) {
                message+=""String_Node_Str"" + device.getRecoveryPath() + ""String_Node_Str""+ device.getRecoveryVersion()+ ""String_Node_Str""+ device.isRecoveryMTD()+ ""String_Node_Str""+ device.isRecoveryDD()+ ""String_Node_Str""+ device.isStockRecoverySupported()+ ""String_Node_Str""+ device.isCwmRecoverySupported()+ ""String_Node_Str""+ device.isTwrpRecoverySupported()+ ""String_Node_Str""+ device.isPhilzRecoverySupported();
              }
              if (device.isKernelSupported()) {
                message+=""String_Node_Str"" + device.getKernelPath() + ""String_Node_Str""+ device.getKernelVersion()+ ""String_Node_Str""+ device.isKernelMTD()+ ""String_Node_Str""+ device.isKernelDD();
              }
              if (!comment.equals(""String_Node_Str"")) {
                message+=""String_Node_Str"" + comment + ""String_Node_Str"";
              }
              message+=""String_Node_Str"" + activity.getAllPrefs() + ""String_Node_Str"";
              files.add(new File(activity.getFilesDir(),Shell.Logs));
              files.add(new File(activity.getFilesDir(),""String_Node_Str""));
              ArrayList<Uri> uris=new ArrayList<>();
              File tmpFolder=new File(activity.getFilesDir(),""String_Node_Str"");
              if (tmpFolder.mkdir())               tmpFolder.deleteOnExit();
              for (              File i : files) {
                try {
                  File tmp=new File(tmpFolder,i.getName());
                  shell.execCommand(Const.Busybox + ""String_Node_Str"" + i);
                  toolbox.copyFile(i,tmp,true,false);
                  toolbox.setFilePermissions(tmp,""String_Node_Str"");
                  shell.execCommand(Const.Busybox + ""String_Node_Str"" + tmp);
                }
 catch (                Exception e) {
                  activity.addError(Const.RASHR_TAG,e,false);
                }
              }
              if (errors.size() > 0) {
                message+=""String_Node_Str"";
                for (                String error : errors) {
                  message+=error + ""String_Node_Str"";
                }
              }
              intent.putExtra(Intent.EXTRA_TEXT,message);
              intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
              activity.startActivity(Intent.createChooser(intent,""String_Node_Str""));
              dismiss();
            }
          }
 catch (          Exception e) {
            dismiss();
            activity.addError(Const.RASHR_TAG,e,false);
          }
        }
      }
);
    }
  }
).start();
}","public ReportDialog(final RashrActivity activity,String message){
  super(activity);
  final Shell shell=activity.getShell();
  final Device device=activity.getDevice();
  final ArrayList<String> errors=activity.getErrors();
  setTitle(R.string.comment);
  setContentView(R.layout.dialog_comment);
  final EditText text=(EditText)findViewById(R.id.etComment);
  if (!message.equals(""String_Node_Str""))   text.setText(message);
  new Thread(new Runnable(){
    @Override public void run(){
      final Button bGo=(Button)findViewById(R.id.bGo);
      bGo.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          if (!Common.getBooleanPref(activity,Const.PREF_NAME,Const.PREF_KEY_ADS))           Toast.makeText(activity,R.string.please_ads,Toast.LENGTH_SHORT).show();
          Toast.makeText(activity,R.string.donate_to_support,Toast.LENGTH_SHORT).show();
          try {
            ArrayList<File> files=new ArrayList<>();
            File TestResults=new File(activity.getFilesDir(),""String_Node_Str"");
            try {
              if (TestResults.exists()) {
                if (TestResults.delete()) {
                  FileOutputStream fos=activity.openFileOutput(TestResults.getName(),Context.MODE_PRIVATE);
                  fos.write((""String_Node_Str"" + shell.execCommand(""String_Node_Str"" + Const.PathToRashr.getAbsolutePath()) + ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")).getBytes());
                }
                files.add(TestResults);
              }
            }
 catch (            Exception e) {
              activity.addError(Const.RASHR_TAG,e,false);
            }
            if (activity.getPackageManager() != null) {
              PackageInfo pInfo=activity.getPackageManager().getPackageInfo(activity.getPackageName(),0);
              String comment=""String_Node_Str"";
              if (text.getText() != null)               comment=text.getText().toString();
              Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);
              intent.setType(""String_Node_Str"");
              intent.putExtra(Intent.EXTRA_EMAIL,new String[]{""String_Node_Str""});
              intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + pInfo.versionCode + ""String_Node_Str"");
              String message=""String_Node_Str"" + ""String_Node_Str"" + pInfo.packageName + ""String_Node_Str""+ pInfo.versionName;
              message+=""String_Node_Str"" + ""String_Node_Str"" + Build.MANUFACTURER + ""String_Node_Str""+ device.getManufacture()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.DEVICE+ ""String_Node_Str""+ device.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.BOARD+ ""String_Node_Str""+ Build.BRAND+ ""String_Node_Str""+ Build.MODEL+ ""String_Node_Str""+ Build.FINGERPRINT+ ""String_Node_Str""+ Build.VERSION.CODENAME+ ""String_Node_Str""+ Build.VERSION.SDK_INT+ ""String_Node_Str"";
              if (device.isRecoverySupported()) {
                message+=""String_Node_Str"" + device.getRecoveryPath() + ""String_Node_Str""+ device.getRecoveryVersion()+ ""String_Node_Str""+ device.isRecoveryMTD()+ ""String_Node_Str""+ device.isRecoveryDD()+ ""String_Node_Str""+ device.isStockRecoverySupported()+ ""String_Node_Str""+ device.isCwmRecoverySupported()+ ""String_Node_Str""+ device.isTwrpRecoverySupported()+ ""String_Node_Str""+ device.isPhilzRecoverySupported();
              }
              if (device.isKernelSupported()) {
                message+=""String_Node_Str"" + device.getKernelPath() + ""String_Node_Str""+ device.getKernelVersion()+ ""String_Node_Str""+ device.isKernelMTD()+ ""String_Node_Str""+ device.isKernelDD();
              }
              if (!comment.equals(""String_Node_Str"")) {
                message+=""String_Node_Str"" + comment + ""String_Node_Str"";
              }
              message+=""String_Node_Str"" + activity.getAllPrefs() + ""String_Node_Str"";
              files.add(new File(activity.getFilesDir(),Shell.Logs));
              files.add(new File(activity.getFilesDir(),Const.LastLog.getName()));
              ArrayList<Uri> uris=new ArrayList<>();
              for (              File i : files) {
                try {
                  shell.execCommand(Const.Busybox + ""String_Node_Str"" + i);
                }
 catch (                Exception e) {
                  activity.addError(Const.RASHR_TAG,e,false);
                }
              }
              if (errors.size() > 0) {
                message+=""String_Node_Str"";
                for (                String error : errors) {
                  message+=error + ""String_Node_Str"";
                }
              }
              intent.putExtra(Intent.EXTRA_TEXT,message);
              intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
              activity.startActivity(Intent.createChooser(intent,""String_Node_Str""));
              dismiss();
            }
          }
 catch (          Exception e) {
            dismiss();
            activity.addError(Const.RASHR_TAG,e,false);
          }
        }
      }
);
    }
  }
).start();
}",0.9440546528803544
17557,"@Override public void run(){
  final Button bGo=(Button)findViewById(R.id.bGo);
  bGo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!Common.getBooleanPref(activity,Const.PREF_NAME,Const.PREF_KEY_ADS))       Toast.makeText(activity,R.string.please_ads,Toast.LENGTH_SHORT).show();
      Toast.makeText(activity,R.string.donate_to_support,Toast.LENGTH_SHORT).show();
      try {
        ArrayList<File> files=new ArrayList<>();
        File TestResults=new File(activity.getFilesDir(),""String_Node_Str"");
        try {
          if (TestResults.exists()) {
            if (TestResults.delete()) {
              FileOutputStream fos=activity.openFileOutput(TestResults.getName(),Context.MODE_PRIVATE);
              fos.write((""String_Node_Str"" + shell.execCommand(""String_Node_Str"" + Const.PathToRashr.getAbsolutePath()) + ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")).getBytes());
            }
            files.add(TestResults);
          }
        }
 catch (        Exception e) {
          activity.addError(Const.RASHR_TAG,e,false);
        }
        if (activity.getPackageManager() != null) {
          PackageInfo pInfo=activity.getPackageManager().getPackageInfo(activity.getPackageName(),0);
          String comment=""String_Node_Str"";
          if (text.getText() != null)           comment=text.getText().toString();
          Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);
          intent.setType(""String_Node_Str"");
          intent.putExtra(Intent.EXTRA_EMAIL,new String[]{""String_Node_Str""});
          intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + pInfo.versionCode + ""String_Node_Str"");
          String message=""String_Node_Str"" + ""String_Node_Str"" + pInfo.packageName + ""String_Node_Str""+ pInfo.versionName;
          message+=""String_Node_Str"" + ""String_Node_Str"" + Build.MANUFACTURER + ""String_Node_Str""+ device.getManufacture()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.DEVICE+ ""String_Node_Str""+ device.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.BOARD+ ""String_Node_Str""+ Build.BRAND+ ""String_Node_Str""+ Build.MODEL+ ""String_Node_Str""+ Build.FINGERPRINT+ ""String_Node_Str""+ Build.VERSION.CODENAME+ ""String_Node_Str""+ Build.VERSION.SDK_INT+ ""String_Node_Str"";
          if (device.isRecoverySupported()) {
            message+=""String_Node_Str"" + device.getRecoveryPath() + ""String_Node_Str""+ device.getRecoveryVersion()+ ""String_Node_Str""+ device.isRecoveryMTD()+ ""String_Node_Str""+ device.isRecoveryDD()+ ""String_Node_Str""+ device.isStockRecoverySupported()+ ""String_Node_Str""+ device.isCwmRecoverySupported()+ ""String_Node_Str""+ device.isTwrpRecoverySupported()+ ""String_Node_Str""+ device.isPhilzRecoverySupported();
          }
          if (device.isKernelSupported()) {
            message+=""String_Node_Str"" + device.getKernelPath() + ""String_Node_Str""+ device.getKernelVersion()+ ""String_Node_Str""+ device.isKernelMTD()+ ""String_Node_Str""+ device.isKernelDD();
          }
          if (!comment.equals(""String_Node_Str"")) {
            message+=""String_Node_Str"" + comment + ""String_Node_Str"";
          }
          message+=""String_Node_Str"" + activity.getAllPrefs() + ""String_Node_Str"";
          files.add(new File(activity.getFilesDir(),Shell.Logs));
          files.add(new File(activity.getFilesDir(),""String_Node_Str""));
          ArrayList<Uri> uris=new ArrayList<>();
          File tmpFolder=new File(activity.getFilesDir(),""String_Node_Str"");
          if (tmpFolder.mkdir())           tmpFolder.deleteOnExit();
          for (          File i : files) {
            try {
              File tmp=new File(tmpFolder,i.getName());
              shell.execCommand(Const.Busybox + ""String_Node_Str"" + i);
              toolbox.copyFile(i,tmp,true,false);
              toolbox.setFilePermissions(tmp,""String_Node_Str"");
              shell.execCommand(Const.Busybox + ""String_Node_Str"" + tmp);
            }
 catch (            Exception e) {
              activity.addError(Const.RASHR_TAG,e,false);
            }
          }
          if (errors.size() > 0) {
            message+=""String_Node_Str"";
            for (            String error : errors) {
              message+=error + ""String_Node_Str"";
            }
          }
          intent.putExtra(Intent.EXTRA_TEXT,message);
          intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
          activity.startActivity(Intent.createChooser(intent,""String_Node_Str""));
          dismiss();
        }
      }
 catch (      Exception e) {
        dismiss();
        activity.addError(Const.RASHR_TAG,e,false);
      }
    }
  }
);
}","@Override public void run(){
  final Button bGo=(Button)findViewById(R.id.bGo);
  bGo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!Common.getBooleanPref(activity,Const.PREF_NAME,Const.PREF_KEY_ADS))       Toast.makeText(activity,R.string.please_ads,Toast.LENGTH_SHORT).show();
      Toast.makeText(activity,R.string.donate_to_support,Toast.LENGTH_SHORT).show();
      try {
        ArrayList<File> files=new ArrayList<>();
        File TestResults=new File(activity.getFilesDir(),""String_Node_Str"");
        try {
          if (TestResults.exists()) {
            if (TestResults.delete()) {
              FileOutputStream fos=activity.openFileOutput(TestResults.getName(),Context.MODE_PRIVATE);
              fos.write((""String_Node_Str"" + shell.execCommand(""String_Node_Str"" + Const.PathToRashr.getAbsolutePath()) + ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ shell.execCommand(""String_Node_Str"")).getBytes());
            }
            files.add(TestResults);
          }
        }
 catch (        Exception e) {
          activity.addError(Const.RASHR_TAG,e,false);
        }
        if (activity.getPackageManager() != null) {
          PackageInfo pInfo=activity.getPackageManager().getPackageInfo(activity.getPackageName(),0);
          String comment=""String_Node_Str"";
          if (text.getText() != null)           comment=text.getText().toString();
          Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);
          intent.setType(""String_Node_Str"");
          intent.putExtra(Intent.EXTRA_EMAIL,new String[]{""String_Node_Str""});
          intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + pInfo.versionCode + ""String_Node_Str"");
          String message=""String_Node_Str"" + ""String_Node_Str"" + pInfo.packageName + ""String_Node_Str""+ pInfo.versionName;
          message+=""String_Node_Str"" + ""String_Node_Str"" + Build.MANUFACTURER + ""String_Node_Str""+ device.getManufacture()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.DEVICE+ ""String_Node_Str""+ device.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ Build.BOARD+ ""String_Node_Str""+ Build.BRAND+ ""String_Node_Str""+ Build.MODEL+ ""String_Node_Str""+ Build.FINGERPRINT+ ""String_Node_Str""+ Build.VERSION.CODENAME+ ""String_Node_Str""+ Build.VERSION.SDK_INT+ ""String_Node_Str"";
          if (device.isRecoverySupported()) {
            message+=""String_Node_Str"" + device.getRecoveryPath() + ""String_Node_Str""+ device.getRecoveryVersion()+ ""String_Node_Str""+ device.isRecoveryMTD()+ ""String_Node_Str""+ device.isRecoveryDD()+ ""String_Node_Str""+ device.isStockRecoverySupported()+ ""String_Node_Str""+ device.isCwmRecoverySupported()+ ""String_Node_Str""+ device.isTwrpRecoverySupported()+ ""String_Node_Str""+ device.isPhilzRecoverySupported();
          }
          if (device.isKernelSupported()) {
            message+=""String_Node_Str"" + device.getKernelPath() + ""String_Node_Str""+ device.getKernelVersion()+ ""String_Node_Str""+ device.isKernelMTD()+ ""String_Node_Str""+ device.isKernelDD();
          }
          if (!comment.equals(""String_Node_Str"")) {
            message+=""String_Node_Str"" + comment + ""String_Node_Str"";
          }
          message+=""String_Node_Str"" + activity.getAllPrefs() + ""String_Node_Str"";
          files.add(new File(activity.getFilesDir(),Shell.Logs));
          files.add(new File(activity.getFilesDir(),Const.LastLog.getName()));
          ArrayList<Uri> uris=new ArrayList<>();
          for (          File i : files) {
            try {
              shell.execCommand(Const.Busybox + ""String_Node_Str"" + i);
            }
 catch (            Exception e) {
              activity.addError(Const.RASHR_TAG,e,false);
            }
          }
          if (errors.size() > 0) {
            message+=""String_Node_Str"";
            for (            String error : errors) {
              message+=error + ""String_Node_Str"";
            }
          }
          intent.putExtra(Intent.EXTRA_TEXT,message);
          intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
          activity.startActivity(Intent.createChooser(intent,""String_Node_Str""));
          dismiss();
        }
      }
 catch (      Exception e) {
        dismiss();
        activity.addError(Const.RASHR_TAG,e,false);
      }
    }
  }
);
}",0.9440399869607736
17558,"private void logCommand(SimpleCommand command){
  try {
    if (mContext != null) {
      if (mContext.getSharedPreferences(PREF_NAME,Context.MODE_PRIVATE).getBoolean(PREF_LOG,false)) {
        String Log=""String_Node_Str"";
        if (command.getExitCode() == 0) {
          Log+=""String_Node_Str"" + command.getCommand();
          if (!command.getOutput().equals(""String_Node_Str"")) {
            Log+=""String_Node_Str"" + command.getOutput();
          }
        }
 else {
          Log+=""String_Node_Str"" + command.getCommand() + ""String_Node_Str"";
          if (!command.getOutput().equals(""String_Node_Str"")) {
            Log+=""String_Node_Str"" + command.getOutput() + ""String_Node_Str"";
          }
        }
        FileOutputStream fo=mContext.openFileOutput(Logs,Context.MODE_APPEND);
        fo.write(Log.getBytes());
      }
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","private void logCommand(SimpleCommand command){
  try {
    if (mContext != null) {
      if (mContext.getSharedPreferences(PREF_NAME,Context.MODE_PRIVATE).getBoolean(PREF_LOG,false)) {
        String Log=""String_Node_Str"";
        if (command.getExitCode() == 0) {
          Log+=""String_Node_Str"" + command.getCommand();
        }
 else {
          Log+=""String_Node_Str"" + command.getCommand() + ""String_Node_Str"";
        }
        if (!command.getOutput().equals(""String_Node_Str"")) {
          Log+=""String_Node_Str"" + command.getOutput();
        }
        FileOutputStream fo=mContext.openFileOutput(Logs,Context.MODE_APPEND);
        fo.write(Log.getBytes());
        fo.close();
      }
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.7853170189098999
17559,"private void reload(){
  FileList.clear();
  if ((!currentPath.equals(StartFolder) || BrowseUpEnabled) && currentPath.getParentFile().exists()) {
    FileList.add(currentPath.getParentFile());
  }
  try {
    for (    File i : currentPath.listFiles()) {
      if (showHidden || !i.getName().startsWith(""String_Node_Str"")) {
        if (!AllowedEXT[0].equals(""String_Node_Str"") || AllowedEXT.length > 1) {
          if (i.isDirectory()) {
            FileList.add(i);
          }
 else {
            for (            String EXT : AllowedEXT) {
              if (i.getName().endsWith(EXT)) {
                FileList.add(i);
              }
            }
          }
        }
 else {
          FileList.add(i);
        }
      }
    }
  }
 catch (  NullPointerException e) {
    this.dismiss();
    throw e;
  }
  try {
    Collections.sort(FileList);
  }
 catch (  NullPointerException e) {
    e.printStackTrace();
  }
  String[] tmp=new String[FileList.toArray(new File[FileList.size()]).length];
  for (int i=0; i < tmp.length; i++) {
    if (i == 0 && (BrowseUpEnabled || !currentPath.equals(StartFolder)) && currentPath.getParentFile().exists()) {
      tmp[0]=currentPath.getParentFile().getAbsolutePath() + ""String_Node_Str"";
    }
 else {
      if (FileList.get(i).isDirectory()) {
        tmp[i]=FileList.get(i).getName() + ""String_Node_Str"";
      }
 else {
        tmp[i]=FileList.get(i).getName();
      }
    }
  }
  lvFiles.setAdapter(new ArrayAdapter<String>(mContext,android.R.layout.simple_list_item_1,tmp));
}","private void reload(){
  FileList.clear();
  if ((!currentPath.equals(StartFolder) || BrowseUpEnabled) && currentPath.getParentFile() != null) {
    FileList.add(currentPath.getParentFile());
  }
  try {
    for (    File i : currentPath.listFiles()) {
      if (showHidden || !i.getName().startsWith(""String_Node_Str"")) {
        if (!AllowedEXT[0].equals(""String_Node_Str"") || AllowedEXT.length > 1) {
          if (i.isDirectory()) {
            FileList.add(i);
          }
 else {
            for (            String EXT : AllowedEXT) {
              if (i.getName().endsWith(EXT)) {
                FileList.add(i);
              }
            }
          }
        }
 else {
          FileList.add(i);
        }
      }
    }
  }
 catch (  NullPointerException e) {
    if (isShowing()) {
      dismiss();
    }
  }
  try {
    Collections.sort(FileList);
  }
 catch (  NullPointerException e) {
    e.printStackTrace();
  }
  String[] tmp=new String[FileList.toArray(new File[FileList.size()]).length];
  for (int i=0; i < tmp.length; i++) {
    if (i == 0 && (BrowseUpEnabled || !currentPath.equals(StartFolder)) && currentPath.getParentFile() != null) {
      if (!currentPath.getParentFile().getAbsolutePath().equals(""String_Node_Str"")) {
        tmp[0]=currentPath.getParentFile().getAbsolutePath() + ""String_Node_Str"";
      }
 else {
        tmp[0]=currentPath.getParentFile().getAbsolutePath();
      }
    }
 else {
      if (FileList.get(i).isDirectory()) {
        tmp[i]=FileList.get(i).getName() + ""String_Node_Str"";
      }
 else {
        tmp[i]=FileList.get(i).getName();
      }
    }
  }
  lvFiles.setAdapter(new ArrayAdapter<String>(mContext,android.R.layout.simple_list_item_1,tmp));
}",0.921271997530102
17560,"public void optimizeLayout() throws NullPointerException {
  try {
    if (mDevice.isRecoverySupported() || mDevice.isKernelSupported()) {
      if (getIntent().getAction().equals(Intent.ACTION_VIEW)) {
        setContentView(R.layout.flash_as);
        RelativeLayout FlashAsLayout=(RelativeLayout)findViewById(R.layout.flash_as);
        String path;
        if ((path=getIntent().getData().getPath()) != null) {
          final File IMG=new File(path);
          if (IMG.exists()) {
            TextView tvFlashAs=(TextView)findViewById(R.id.tvFlashAs);
            tvFlashAs.setText(String.format(getString(R.string.flash_as),IMG.getName()));
          }
 else {
            exit();
          }
          RadioButton optAsRecovery=(RadioButton)findViewById(R.id.optAsRecovery);
          RadioButton optAsKernel=(RadioButton)findViewById(R.id.optAsKernel);
          if (!mDevice.isRecoverySupported()) {
            FlashAsLayout.removeView(optAsRecovery);
            optAsKernel.setChecked(true);
          }
          if (!mDevice.isKernelSupported()) {
            FlashAsLayout.removeView((optAsKernel));
          }
        }
 else {
          exit();
        }
      }
 else {
        setContentView(R.layout.recovery_tools);
        mRecoveryToolsLayout=(DrawerLayout)findViewById(R.id.RecoveryToolsLayout);
        LayoutInflater layoutInflater=getLayoutInflater();
        DrawerLayout mMenuDrawer=(DrawerLayout)layoutInflater.inflate(R.layout.menu_drawer,mRecoveryToolsLayout,true);
        DrawerLayout mBackupDrawer=(DrawerLayout)layoutInflater.inflate(R.layout.backup_drawer,mRecoveryToolsLayout,true);
        mRecoveryToolsLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
        ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(mActivity,mRecoveryToolsLayout,R.drawable.ic_drawer,R.string.settings,R.string.app_name);
        mRecoveryToolsLayout.setDrawerListener(mDrawerToggle);
        mDrawerToggle.syncState();
        mDrawerToggle.setDrawerIndicatorEnabled(true);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setHomeButtonEnabled(true);
        String Styles[]=getResources().getStringArray(R.array.styles);
        if (mMenuDrawer != null) {
          Spinner spStyle=(Spinner)mMenuDrawer.findViewById(R.id.spStyle);
          ArrayAdapter<String> adapter=new ArrayAdapter<String>(mActivity,R.layout.custom_list_item,Styles);
          adapter.setDropDownViewResource(R.layout.custom_list_item);
          spStyle.setAdapter(adapter);
          spStyle.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
            @Override public void onItemSelected(            AdapterView<?> parent,            View view,            int position,            long id){
switch (position) {
case 1:
                Common.setIntegerPref(mContext,PREF_NAME,PREF_STYLE,APPCOMPAT_LIGHT_DARK_BAR);
              restartActivity();
            break;
case 2:
          Common.setIntegerPref(mContext,PREF_NAME,PREF_STYLE,APPCOMPAT_LIGHT);
        restartActivity();
      break;
case 3:
    Common.setIntegerPref(mContext,PREF_NAME,PREF_STYLE,APPCOMPAT_DARK);
  restartActivity();
break;
}
}
@Override public void onNothingSelected(AdapterView<?> parent){
}
}
);
CheckBox cbShowAds=(CheckBox)mMenuDrawer.findViewById(R.id.cbShowAds);
CheckBox cbLog=(CheckBox)mMenuDrawer.findViewById(R.id.cbLog);
cbShowAds.setChecked(Common.getBooleanPref(mContext,PREF_NAME,PREF_KEY_ADS));
cbLog.setChecked(Common.getBooleanPref(mContext,Shell.PREF_NAME,Shell.PREF_LOG));
if (cbLog.isChecked()) {
findViewById(R.id.bShowLogs).setVisibility(View.VISIBLE);
}
 else {
findViewById(R.id.bShowLogs).setVisibility(View.INVISIBLE);
}
cbShowAds.setChecked(Common.getBooleanPref(mContext,PREF_NAME,PREF_KEY_ADS));
}
final TextView RecoveryVersion=(TextView)findViewById(R.id.tvVersion);
RecoveryVersion.setText(mDevice.getRecoveryVersion() + ""String_Node_Str"" + mDevice.getKernelVersion());
loadBackupDrawer();
if (!Common.getBooleanPref(mContext,PREF_NAME,PREF_KEY_ADS)) {
mRecoveryToolsLayout.removeView(mRecoveryToolsLayout.findViewById(R.id.adView));
}
if (mDevice.isRecoveryOverRecovery() && mBackupDrawer != null) {
mRecoveryToolsLayout.removeView(mBackupDrawer);
}
if (!mDevice.isKernelSupported()) {
mRecoveryToolsLayout.removeView((mRecoveryToolsLayout.findViewById(R.id.bFlashKernel)));
if (mBackupDrawer != null) {
mBackupDrawer.removeView(mBackupDrawer.findViewById(R.id.bCreateKernelBackup));
mBackupDrawer.removeView(mBackupDrawer.findViewById(R.id.lvKernelBackups));
}
}
if (!mDevice.isRecoverySupported()) {
mRecoveryToolsLayout.removeView(findViewById(R.id.bFlashRecovery));
if (mBackupDrawer != null) {
mBackupDrawer.removeView(findViewById(R.id.bCreateRecoveryBackup));
mBackupDrawer.removeView(findViewById(R.id.lvRecoveryBackups));
}
}
}
}
}
 catch (NullPointerException e) {
throw new NullPointerException(""String_Node_Str"" + e.getMessage());
}
}","public void optimizeLayout() throws NullPointerException {
  try {
    if (mDevice.isRecoverySupported() || mDevice.isKernelSupported()) {
      if (getIntent().getAction().equals(Intent.ACTION_VIEW)) {
        setContentView(R.layout.flash_as);
        RelativeLayout FlashAsLayout=(RelativeLayout)findViewById(R.layout.flash_as);
        String path;
        if ((path=getIntent().getData().getPath()) != null) {
          final File IMG=new File(path);
          if (IMG.exists()) {
            TextView tvFlashAs=(TextView)findViewById(R.id.tvFlashAs);
            tvFlashAs.setText(String.format(getString(R.string.flash_as),IMG.getName()));
          }
 else {
            exit();
          }
          RadioButton optAsRecovery=(RadioButton)findViewById(R.id.optAsRecovery);
          RadioButton optAsKernel=(RadioButton)findViewById(R.id.optAsKernel);
          if (!mDevice.isRecoverySupported()) {
            FlashAsLayout.removeView(optAsRecovery);
            optAsKernel.setChecked(true);
          }
          if (!mDevice.isKernelSupported()) {
            FlashAsLayout.removeView((optAsKernel));
          }
        }
 else {
          exit();
        }
      }
 else {
        setContentView(R.layout.recovery_tools);
        mRecoveryToolsLayout=(DrawerLayout)findViewById(R.id.RecoveryToolsLayout);
        LayoutInflater layoutInflater=getLayoutInflater();
        DrawerLayout mMenuDrawer=(DrawerLayout)layoutInflater.inflate(R.layout.menu_drawer,mRecoveryToolsLayout,true);
        DrawerLayout mBackupDrawer=(DrawerLayout)layoutInflater.inflate(R.layout.backup_drawer,mRecoveryToolsLayout,true);
        mRecoveryToolsLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
        ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(mActivity,mRecoveryToolsLayout,R.drawable.ic_drawer,R.string.settings,R.string.app_name);
        mRecoveryToolsLayout.setDrawerListener(mDrawerToggle);
        mDrawerToggle.syncState();
        mDrawerToggle.setDrawerIndicatorEnabled(true);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setHomeButtonEnabled(true);
        String Styles[]=getResources().getStringArray(R.array.styles);
        if (mMenuDrawer != null) {
          Spinner spStyle=(Spinner)mMenuDrawer.findViewById(R.id.spStyle);
          ArrayAdapter<String> adapter=new ArrayAdapter<String>(mActivity,R.layout.custom_list_item,Styles);
          adapter.setDropDownViewResource(R.layout.custom_list_item);
          spStyle.setAdapter(adapter);
          spStyle.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
            @Override public void onItemSelected(            AdapterView<?> parent,            View view,            int position,            long id){
switch (position) {
case 1:
                Common.setIntegerPref(mContext,PREF_NAME,PREF_STYLE,APPCOMPAT_LIGHT_DARK_BAR);
              restartActivity();
            break;
case 2:
          Common.setIntegerPref(mContext,PREF_NAME,PREF_STYLE,APPCOMPAT_LIGHT);
        restartActivity();
      break;
case 3:
    Common.setIntegerPref(mContext,PREF_NAME,PREF_STYLE,APPCOMPAT_DARK);
  restartActivity();
break;
}
}
@Override public void onNothingSelected(AdapterView<?> parent){
}
}
);
CheckBox cbShowAds=(CheckBox)mMenuDrawer.findViewById(R.id.cbShowAds);
CheckBox cbLog=(CheckBox)mMenuDrawer.findViewById(R.id.cbLog);
cbShowAds.setChecked(Common.getBooleanPref(mContext,PREF_NAME,PREF_KEY_ADS));
cbLog.setChecked(Common.getBooleanPref(mContext,Shell.PREF_NAME,Shell.PREF_LOG));
if (cbLog.isChecked()) {
findViewById(R.id.bShowLogs).setVisibility(View.VISIBLE);
}
 else {
findViewById(R.id.bShowLogs).setVisibility(View.INVISIBLE);
}
cbShowAds.setChecked(Common.getBooleanPref(mContext,PREF_NAME,PREF_KEY_ADS));
}
final TextView RecoveryVersion=(TextView)findViewById(R.id.tvVersion);
RecoveryVersion.setText(mDevice.getRecoveryVersion() + ""String_Node_Str"" + mDevice.getKernelVersion());
loadBackupDrawer();
AdView adView=(AdView)findViewById(R.id.adView);
ViewGroup MainParent=(ViewGroup)adView.getParent();
if (!Common.getBooleanPref(mContext,PREF_NAME,PREF_KEY_ADS)) {
if (adView != null && MainParent != null) {
MainParent.removeView(adView);
}
}
if (MainParent != null) {
if (!mDevice.isKernelSupported()) {
MainParent.removeView(findViewById(R.id.bFlashKernel));
}
if (!mDevice.isRecoverySupported()) {
MainParent.removeView(findViewById(R.id.bFlashRecovery));
}
}
if (mBackupDrawer != null) {
ViewGroup BackupDrawerParent=(ViewGroup)mBackupDrawer.getParent();
if (mDevice.isRecoveryOverRecovery()) {
BackupDrawerParent.removeView(mBackupDrawer);
}
 else {
View createKernelBackup=findViewById(R.id.bCreateKernelBackup);
View kernelBackups=findViewById(R.id.lvKernelBackups);
View createRecoveryBackup=findViewById(R.id.bCreateRecoveryBackup);
View recoveryBackups=findViewById(R.id.lvRecoveryBackups);
if (!mDevice.isKernelSupported()) {
((ViewGroup)createKernelBackup.getParent()).removeView(createKernelBackup);
((ViewGroup)kernelBackups.getParent()).removeView(kernelBackups);
}
if (!mDevice.isRecoverySupported()) {
((ViewGroup)createRecoveryBackup.getParent()).removeView(createRecoveryBackup);
((ViewGroup)recoveryBackups.getParent()).removeView(recoveryBackups);
}
}
}
}
}
}
 catch (NullPointerException e) {
throw new NullPointerException(""String_Node_Str"" + e.getMessage());
}
}",0.8607643928398645
17561,"private void setPredefinedOptions(){
  String BOARD=Build.BOARD.toLowerCase();
  String MODEL=Build.MODEL.toLowerCase();
  String MANUFACTURE=Build.MANUFACTURER.toLowerCase();
  if (MODEL.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (MODEL.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")|| MODEL.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") && MANUFACTURE.equals(""String_Node_Str"")) {
    DEV_NAME=""String_Node_Str"";
  }
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| MODEL.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"")) {
    DEV_NAME=(""String_Node_Str"");
  }
  if (BOARD.equals(""String_Node_Str"")) {
    DEV_NAME=""String_Node_Str"";
  }
  if (DEV_NAME.equals(""String_Node_Str"")) {
    DEV_NAME=""String_Node_Str"";
  }
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")) {
    RECOVERY_EXT=""String_Node_Str"";
  }
  if (BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")) {
    RECOVERY_TYPE=PARTITION_TYPE_RECOVERY;
    RECOVERY_EXT=""String_Node_Str"";
  }
  readDeviceInfos();
  if (!RecoveryPath.equals(""String_Node_Str"") && !isRecoveryOverRecovery()) {
    RECOVERY_TYPE=PARTITION_TYPE_DD;
  }
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")) {
    RECOVERY_TYPE=PARTITION_TYPE_SONY;
  }
  if (new File(""String_Node_Str"").exists()) {
    if (!isRecoveryDD()) {
      RECOVERY_TYPE=PARTITION_TYPE_MTD;
    }
    if (!isKernelDD()) {
      KERNEL_TYPE=PARTITION_TYPE_MTD;
    }
  }
  if (RecoveryPath.contains(""String_Node_Str"")) {
    RECOVERY_TYPE=PARTITION_TYPE_MTD;
  }
 else {
    RECOVERY_TYPE=PARTITION_TYPE_DD;
  }
  if (KernelPath.contains(""String_Node_Str"")) {
    KERNEL_TYPE=PARTITION_TYPE_MTD;
  }
 else {
    KERNEL_TYPE=PARTITION_TYPE_DD;
  }
}","private void setPredefinedOptions(){
  String BOARD=Build.BOARD.toLowerCase();
  String MODEL=Build.MODEL.toLowerCase();
  String MANUFACTURE=Build.MANUFACTURER.toLowerCase();
  if (MODEL.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (MODEL.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")|| MODEL.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") && MANUFACTURE.equals(""String_Node_Str"")) {
    DEV_NAME=""String_Node_Str"";
  }
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| BOARD.equals(""String_Node_Str"")|| MODEL.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"")) {
    DEV_NAME=(""String_Node_Str"");
  }
  if (BOARD.equals(""String_Node_Str"")) {
    DEV_NAME=""String_Node_Str"";
  }
  if (DEV_NAME.equals(""String_Node_Str"")) {
    DEV_NAME=""String_Node_Str"";
  }
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")) {
    RECOVERY_EXT=""String_Node_Str"";
  }
  if (BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (BOARD.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || BOARD.equals(""String_Node_Str"") || MODEL.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str""))   DEV_NAME=""String_Node_Str"";
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")|| DEV_NAME.equals(""String_Node_Str"")) {
    RECOVERY_TYPE=PARTITION_TYPE_RECOVERY;
    RECOVERY_EXT=""String_Node_Str"";
  }
  readDeviceInfos();
  if (!RecoveryPath.equals(""String_Node_Str"") && !isRecoveryOverRecovery()) {
    RECOVERY_TYPE=PARTITION_TYPE_DD;
  }
  if (DEV_NAME.equals(""String_Node_Str"") || DEV_NAME.equals(""String_Node_Str"")) {
    RECOVERY_TYPE=PARTITION_TYPE_SONY;
  }
  if (new File(""String_Node_Str"").exists()) {
    if (!isRecoveryDD()) {
      RECOVERY_TYPE=PARTITION_TYPE_MTD;
    }
    if (!isKernelDD()) {
      KERNEL_TYPE=PARTITION_TYPE_MTD;
    }
  }
  if (!RecoveryPath.equals(""String_Node_Str"")) {
    if (RecoveryPath.contains(""String_Node_Str"")) {
      RECOVERY_TYPE=PARTITION_TYPE_MTD;
    }
 else {
      RECOVERY_TYPE=PARTITION_TYPE_DD;
    }
  }
  if (!KernelPath.equals(""String_Node_Str"")) {
    if (KernelPath.contains(""String_Node_Str"")) {
      KERNEL_TYPE=PARTITION_TYPE_MTD;
    }
 else {
      KERNEL_TYPE=PARTITION_TYPE_DD;
    }
  }
}",0.9925766283524904
17562,"@Test public void getTicketsById() throws Exception {
  createClientWithTokenOrPassword();
  long count=22;
  for (  Ticket t : instance.getTickets(22,24,26)) {
    assertThat(t.getSubject(),notNullValue());
    assertThat(t.getId(),is(count));
    count+=2;
  }
  assertThat(count,is(28L));
}","@Test public void getTicketsById() throws Exception {
  createClientWithTokenOrPassword();
  long count=24;
  for (  Ticket t : instance.getTickets(24,26,28)) {
    assertThat(t.getSubject(),notNullValue());
    assertThat(t.getId(),is(count));
    count+=2;
  }
  assertThat(count,is(30L));
}",0.9795221843003412
17563,"protected <T>PagedAsyncCompletionHandler<List<T>> handleIncrementalList(final Class<T> clazz,final String name){
  return new PagedAsyncListCompletionHandler<T>(clazz,name){
    @Override public void setPagedProperties(    JsonNode responseNode,    Class<?> clazz){
      JsonNode node=responseNode.get(NEXT_PAGE);
      if (node == null) {
        throw new NullPointerException(NEXT_PAGE + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
      }
      JsonNode endTimeNode=responseNode.get(END_TIME);
      if (endTimeNode == null || endTimeNode.asLong() == 0) {
        throw new NullPointerException(END_TIME + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
      }
      if (TimeUnit.SECONDS.toMillis(endTimeNode.asLong()) > System.currentTimeMillis() - FIVE_MINUTES) {
        setNextPage(null);
      }
 else {
        setNextPage(node.asText());
      }
    }
  }
;
}","protected <T>PagedAsyncCompletionHandler<List<T>> handleIncrementalList(final Class<T> clazz,final String name){
  return new PagedAsyncListCompletionHandler<T>(clazz,name){
    @Override public void setPagedProperties(    JsonNode responseNode,    Class<?> clazz){
      JsonNode node=responseNode.get(NEXT_PAGE);
      if (node == null) {
        throw new NullPointerException(NEXT_PAGE + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
      }
      JsonNode endTimeNode=responseNode.get(END_TIME);
      if (endTimeNode == null || endTimeNode.asLong() == 0) {
        throw new NullPointerException(END_TIME + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
      }
      if (TimeUnit.SECONDS.toMillis(endTimeNode.asLong()) > System.currentTimeMillis() - FIVE_MINUTES) {
        setNextPage(null);
      }
 else {
        JsonNode countNode=responseNode.get(COUNT);
        if (countNode == null) {
          throw new NullPointerException(COUNT + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
        }
        if (countNode.asInt() < INCREMENTAL_EXPORT_MAX_COUNT_BY_REQUEST) {
          setNextPage(null);
        }
 else {
          setNextPage(node.asText());
        }
      }
    }
  }
;
}",0.8334771354616048
17564,"@Override public void setPagedProperties(JsonNode responseNode,Class<?> clazz){
  JsonNode node=responseNode.get(NEXT_PAGE);
  if (node == null) {
    throw new NullPointerException(NEXT_PAGE + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
  }
  JsonNode endTimeNode=responseNode.get(END_TIME);
  if (endTimeNode == null || endTimeNode.asLong() == 0) {
    throw new NullPointerException(END_TIME + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
  }
  if (TimeUnit.SECONDS.toMillis(endTimeNode.asLong()) > System.currentTimeMillis() - FIVE_MINUTES) {
    setNextPage(null);
  }
 else {
    setNextPage(node.asText());
  }
}","@Override public void setPagedProperties(JsonNode responseNode,Class<?> clazz){
  JsonNode node=responseNode.get(NEXT_PAGE);
  if (node == null) {
    throw new NullPointerException(NEXT_PAGE + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
  }
  JsonNode endTimeNode=responseNode.get(END_TIME);
  if (endTimeNode == null || endTimeNode.asLong() == 0) {
    throw new NullPointerException(END_TIME + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
  }
  if (TimeUnit.SECONDS.toMillis(endTimeNode.asLong()) > System.currentTimeMillis() - FIVE_MINUTES) {
    setNextPage(null);
  }
 else {
    JsonNode countNode=responseNode.get(COUNT);
    if (countNode == null) {
      throw new NullPointerException(COUNT + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
    }
    if (countNode.asInt() < INCREMENTAL_EXPORT_MAX_COUNT_BY_REQUEST) {
      setNextPage(null);
    }
 else {
      setNextPage(node.asText());
    }
  }
}",0.786114221724524
17565,"protected PagedAsyncCompletionHandler<List<SearchResultEntity>> handleSearchList(final String name){
  return new PagedAsyncCompletionHandler<List<SearchResultEntity>>(){
    @Override public List<SearchResultEntity> onCompleted(    Response response) throws Exception {
      logResponse(response);
      if (isStatus2xx(response)) {
        JsonNode responseNode=mapper.readTree(response.getResponseBodyAsStream()).get(name);
        setPagedProperties(responseNode,null);
        List<SearchResultEntity> values=new ArrayList<SearchResultEntity>();
        for (        JsonNode node : responseNode) {
          Class<? extends SearchResultEntity> clazz=searchResultTypes.get(node.get(""String_Node_Str""));
          if (clazz != null) {
            values.add(mapper.convertValue(node,clazz));
          }
        }
        return values;
      }
      throw new ZendeskResponseException(response);
    }
  }
;
}","protected PagedAsyncCompletionHandler<List<SearchResultEntity>> handleSearchList(final String name){
  return new PagedAsyncCompletionHandler<List<SearchResultEntity>>(){
    @Override public List<SearchResultEntity> onCompleted(    Response response) throws Exception {
      logResponse(response);
      if (isStatus2xx(response)) {
        JsonNode responseNode=mapper.readTree(response.getResponseBodyAsStream()).get(name);
        setPagedProperties(responseNode,null);
        List<SearchResultEntity> values=new ArrayList<SearchResultEntity>();
        for (        JsonNode node : responseNode) {
          Class<? extends SearchResultEntity> clazz=searchResultTypes.get(node.get(""String_Node_Str"").asText());
          if (clazz != null) {
            values.add(mapper.convertValue(node,clazz));
          }
        }
        return values;
      }
      throw new ZendeskResponseException(response);
    }
  }
;
}",0.99510603588907
17566,"protected <T>PagedAsyncCompletionHandler<List<T>> handleIncrementalList(final Class<T> clazz,final String name){
  return new PagedAsyncListCompletionHandler<T>(clazz,name){
    @Override public void setPagedProperties(    JsonNode responseNode,    Class<?> clazz){
      JsonNode node=responseNode.get(NEXT_PAGE);
      if (node == null) {
        throw new NullPointerException(NEXT_PAGE + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
      }
      JsonNode endTimeNode=responseNode.get(END_TIME);
      if (endTimeNode == null || endTimeNode.asLong() == 0) {
        throw new NullPointerException(END_TIME + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
      }
      if (TimeUnit.SECONDS.toMillis(endTimeNode.asLong()) > System.currentTimeMillis() - FIVE_MINUTES) {
        setNextPage(null);
      }
 else {
        setNextPage(node.asText());
      }
    }
  }
;
}","protected <T>PagedAsyncCompletionHandler<List<T>> handleIncrementalList(final Class<T> clazz,final String name){
  return new PagedAsyncListCompletionHandler<T>(clazz,name){
    @Override public void setPagedProperties(    JsonNode responseNode,    Class<?> clazz){
      JsonNode node=responseNode.get(NEXT_PAGE);
      if (node == null) {
        throw new NullPointerException(NEXT_PAGE + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
      }
      JsonNode endTimeNode=responseNode.get(END_TIME);
      if (endTimeNode == null || endTimeNode.asLong() == 0) {
        throw new NullPointerException(END_TIME + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
      }
      if (TimeUnit.SECONDS.toMillis(endTimeNode.asLong()) > System.currentTimeMillis() - FIVE_MINUTES) {
        setNextPage(null);
      }
 else {
        JsonNode countNode=responseNode.get(COUNT);
        if (countNode == null) {
          throw new NullPointerException(COUNT + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
        }
        if (countNode.asInt() < INCREMENTAL_EXPORT_MAX_COUNT_BY_REQUEST) {
          setNextPage(null);
        }
 else {
          setNextPage(node.asText());
        }
      }
    }
  }
;
}",0.8334771354616048
17567,"@Override public void setPagedProperties(JsonNode responseNode,Class<?> clazz){
  JsonNode node=responseNode.get(NEXT_PAGE);
  if (node == null) {
    throw new NullPointerException(NEXT_PAGE + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
  }
  JsonNode endTimeNode=responseNode.get(END_TIME);
  if (endTimeNode == null || endTimeNode.asLong() == 0) {
    throw new NullPointerException(END_TIME + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
  }
  if (TimeUnit.SECONDS.toMillis(endTimeNode.asLong()) > System.currentTimeMillis() - FIVE_MINUTES) {
    setNextPage(null);
  }
 else {
    setNextPage(node.asText());
  }
}","@Override public void setPagedProperties(JsonNode responseNode,Class<?> clazz){
  JsonNode node=responseNode.get(NEXT_PAGE);
  if (node == null) {
    throw new NullPointerException(NEXT_PAGE + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
  }
  JsonNode endTimeNode=responseNode.get(END_TIME);
  if (endTimeNode == null || endTimeNode.asLong() == 0) {
    throw new NullPointerException(END_TIME + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
  }
  if (TimeUnit.SECONDS.toMillis(endTimeNode.asLong()) > System.currentTimeMillis() - FIVE_MINUTES) {
    setNextPage(null);
  }
 else {
    JsonNode countNode=responseNode.get(COUNT);
    if (countNode == null) {
      throw new NullPointerException(COUNT + ""String_Node_Str"" + (clazz != null ? ""String_Node_Str"" + clazz.getName() : ""String_Node_Str""));
    }
    if (countNode.asInt() < INCREMENTAL_EXPORT_MAX_COUNT_BY_REQUEST) {
      setNextPage(null);
    }
 else {
      setNextPage(node.asText());
    }
  }
}",0.786114221724524
17568,"public boolean hasNext(){
  if (current == null || !current.hasNext()) {
    if (page > 0) {
      List<T> values=complete(submit(req(""String_Node_Str"",url,page++),handler));
      if (values.isEmpty()) {
        page=-1;
      }
      current=values.iterator();
    }
 else {
      return false;
    }
  }
  return current.hasNext();
}","public boolean hasNext(){
  if (current == null || !current.hasNext()) {
    if (page > 0) {
      List<T> values=complete(submit(req(""String_Node_Str"",url,page++),handler));
      if (values == null || values.isEmpty()) {
        page=-1;
      }
 else {
synchronized (this) {
          size+=values.size();
        }
        current=values.iterator();
      }
    }
 else {
      return false;
    }
  }
  return current.hasNext();
}",0.8119325551232166
17569,"protected <T>AsyncCompletionHandler<List<T>> handleList(final Class<T> clazz,final String name){
  return new AsyncCompletionHandler<List<T>>(){
    @Override public List<T> onCompleted(    Response response) throws Exception {
      logResponse(response);
      if (isStatus2xx(response)) {
        List<T> values=new ArrayList<T>();
        for (        JsonNode node : mapper.readTree(response.getResponseBodyAsBytes()).get(name)) {
          values.add(mapper.convertValue(node,clazz));
        }
        return values;
      }
      throw new ZendeskResponseException(response);
    }
  }
;
}","protected <T>AsyncCompletionHandler<List<T>> handleList(final Class<T> clazz,final String name){
  final AtomicInteger readCount=new AtomicInteger(0);
  return new AsyncCompletionHandler<List<T>>(){
    @Override public List<T> onCompleted(    Response response) throws Exception {
      logResponse(response);
      if (isStatus2xx(response)) {
        JsonNode responseNode=mapper.readTree(response.getResponseBodyAsBytes());
        int count=responseNode.get(""String_Node_Str"").asInt();
        if (count > readCount.get()) {
          List<T> values=new ArrayList<T>();
          for (          JsonNode node : responseNode.get(name)) {
            values.add(mapper.convertValue(node,clazz));
            readCount.incrementAndGet();
          }
          return values;
        }
 else {
          return null;
        }
      }
      throw new ZendeskResponseException(response);
    }
  }
;
}",0.7316421895861148
17570,"@Override public List<Target> onCompleted(Response response) throws Exception {
  logResponse(response);
  if (isStatus2xx(response)) {
    List<Target> values=new ArrayList<Target>();
    for (    JsonNode node : mapper.readTree(response.getResponseBodyAsBytes()).get(name)) {
      Class<? extends Target> clazz=targetTypes.get(node.get(""String_Node_Str"").asText());
      if (clazz != null) {
        values.add(mapper.convertValue(node,clazz));
      }
    }
    return values;
  }
  throw new ZendeskResponseException(response);
}","@Override public List<Target> onCompleted(Response response) throws Exception {
  logResponse(response);
  if (isStatus2xx(response)) {
    JsonNode responseNode=mapper.readTree(response.getResponseBodyAsBytes());
    int count=responseNode.get(""String_Node_Str"").asInt();
    if (count > readCount.get()) {
      List<Target> values=new ArrayList<Target>();
      for (      JsonNode node : responseNode.get(name)) {
        Class<? extends Target> clazz=targetTypes.get(node.get(""String_Node_Str"").asText());
        if (clazz != null) {
          values.add(mapper.convertValue(node,clazz));
        }
        readCount.incrementAndGet();
      }
      return values;
    }
 else {
      return null;
    }
  }
  throw new ZendeskResponseException(response);
}",0.736517719568567
17571,"protected AsyncCompletionHandler<List<Target>> handleTargetList(final String name){
  return new AsyncCompletionHandler<List<Target>>(){
    @Override public List<Target> onCompleted(    Response response) throws Exception {
      logResponse(response);
      if (isStatus2xx(response)) {
        List<Target> values=new ArrayList<Target>();
        for (        JsonNode node : mapper.readTree(response.getResponseBodyAsBytes()).get(name)) {
          Class<? extends Target> clazz=targetTypes.get(node.get(""String_Node_Str"").asText());
          if (clazz != null) {
            values.add(mapper.convertValue(node,clazz));
          }
        }
        return values;
      }
      throw new ZendeskResponseException(response);
    }
  }
;
}","protected AsyncCompletionHandler<List<Target>> handleTargetList(final String name){
  final AtomicInteger readCount=new AtomicInteger(0);
  return new AsyncCompletionHandler<List<Target>>(){
    @Override public List<Target> onCompleted(    Response response) throws Exception {
      logResponse(response);
      if (isStatus2xx(response)) {
        JsonNode responseNode=mapper.readTree(response.getResponseBodyAsBytes());
        int count=responseNode.get(""String_Node_Str"").asInt();
        if (count > readCount.get()) {
          List<Target> values=new ArrayList<Target>();
          for (          JsonNode node : responseNode.get(name)) {
            Class<? extends Target> clazz=targetTypes.get(node.get(""String_Node_Str"").asText());
            if (clazz != null) {
              values.add(mapper.convertValue(node,clazz));
            }
            readCount.incrementAndGet();
          }
          return values;
        }
 else {
          return null;
        }
      }
      throw new ZendeskResponseException(response);
    }
  }
;
}",0.764182424916574
17572,"public void setForumType(final String forumType){
  this.forumType=forumType;
}","public void setForumType(final Topic.TopicType forumType){
  this.forumType=forumType;
}",0.8862275449101796
17573,"public void setAccess(final String access){
  this.access=access;
}","public void setAccess(final Access access){
  this.access=access;
}",0.9104477611940298
17574,"public String getAccess(){
  return access;
}","public Access getAccess(){
  return access;
}",0.8666666666666667
17575,"@JsonProperty(""String_Node_Str"") public String getForumType(){
  return forumType;
}","@JsonProperty(""String_Node_Str"") public Topic.TopicType getForumType(){
  return forumType;
}",0.8926553672316384
17576,"private Request req(String method,Uri template,int page){
  RequestBuilder builder=new RequestBuilder(method);
  if (realm != null) {
    builder.setRealm(realm);
  }
  builder.addQueryParameter(""String_Node_Str"",Integer.toString(page));
  builder.setUrl(template.toString());
  return builder.build();
}","private Request req(String method,Uri template,int page){
  RequestBuilder builder=new RequestBuilder(method);
  if (realm != null) {
    builder.setRealm(realm);
  }
  builder.addQueryParameter(""String_Node_Str"",Integer.toString(page));
  builder.setUrl(template.toString().replace(""String_Node_Str"",""String_Node_Str""));
  return builder.build();
}",0.9310872894333844
17577,"private Try<TestExecution> runShapes(){
  return Try.of(() -> {
    val shapesSource=SchemaSourceFactory.createSchemaSourceSimple(getId(),getShapesGraphUri(),new RdfModelReader(getDataGraph()));
    val testSuite=new TestSuite(new ShaclTestGenerator().generate(shapesSource));
    val testSource=new TestSourceBuilder().setImMemSingle().setInMemReader(new RdfModelReader(getDataGraph())).setPrefixUri(getId(),getDataGraphUri()).setReferenceSchemata(SchemaSourceFactory.createSchemaSourceSimple(getShapesGraphUri())).build();
    return RDFUnitStaticValidator.validate(shaclFullTestCaseResult,getDataGraph(),testSuite);
  }
);
}","private Try<TestExecution> runShapes(){
  return Try.of(() -> {
    val shapesSource=SchemaSourceFactory.createSchemaSourceSimple(getId(),getShapesGraphUri(),new RdfModelReader(getShapesGraph()));
    val testSuite=new TestSuite(new ShaclTestGenerator().generate(shapesSource));
    return RDFUnitStaticValidator.validate(shaclFullTestCaseResult,getDataGraph(),testSuite);
  }
);
}",0.7440476190476191
17578,"public Set<TestCase> generateTestCases(){
  ImmutableSet.Builder<TestCase> testCaseBuilder=ImmutableSet.builder();
  shapesGraph.getComponents().forEach(component -> {
    allTargets.entrySet().forEach(entry -> {
      testCaseBuilder.addAll(ConstraintTestCaseFactory.createFromComponentAndShape(component,entry.getKey(),entry.getValue()));
      testCaseBuilder.addAll(ConstraintTestCaseFactory.createFromSparqlContraintInShape(entry.getKey(),entry.getValue()));
    }
);
  }
);
  return testCaseBuilder.build();
}","public Set<TestCase> generateTestCases(){
  ImmutableSet.Builder<TestCase> testCaseBuilder=ImmutableSet.builder();
  allTargets.entrySet().forEach(entry -> {
    testCaseBuilder.addAll(ConstraintTestCaseFactory.createFromSparqlContraintInShape(entry.getKey(),entry.getValue()));
    shapesGraph.getComponents().forEach(component -> {
      testCaseBuilder.addAll(ConstraintTestCaseFactory.createFromComponentAndShape(component,entry.getKey(),entry.getValue()));
    }
);
  }
);
  return testCaseBuilder.build();
}",0.5817120622568094
17579,"/** 
 * Test execution for a Source against a TestSuite
 * @param testSource    the source we want to test
 * @param testSuite the test suite we test the source against
 * @return true if all TC executed successfully, false otherwise
 */
public boolean execute(TestSource testSource,TestSuite testSuite){
  boolean success=true;
  isCanceled=false;
  for (  TestExecutorMonitor monitor : progressMonitors) {
    monitor.testingStarted(testSource,testSuite);
  }
  for (  TestCase testCase : testSuite.getTestCases()) {
    if (isCanceled) {
      break;
    }
    for (    TestExecutorMonitor monitor : progressMonitors) {
      monitor.singleTestStarted(testCase);
    }
    Collection<TestCaseResult> results=new ArrayList<>();
    TestCaseResultStatus status;
    long executionTimeStartInMS=System.currentTimeMillis();
    log.debug(""String_Node_Str"",testCase.getAbrTestURI());
    try {
      results=executeSingleTest(testSource,testCase);
    }
 catch (    TestCaseExecutionException e) {
      status=e.getStatus();
    }
catch (    RuntimeException e) {
      try {
        Thread.sleep(40000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
      log.error(""String_Node_Str"" + testCase.getAbrTestURI(),e);
    }
catch (    Exception e) {
      log.error(""String_Node_Str"" + testCase.getAbrTestURI(),e);
      status=TestCaseResultStatus.Error;
    }
    long executionTimeEndInMS=System.currentTimeMillis();
    log.debug(""String_Node_Str"",testCase.getAbrTestURI(),(executionTimeEndInMS - executionTimeStartInMS));
    if (results.isEmpty()) {
      status=TestCaseResultStatus.Success;
    }
 else     if (results.size() > 1) {
      status=TestCaseResultStatus.Fail;
    }
 else {
      status=TestCaseResultStatus.Error;
      TestCaseResult r=RDFUnitUtils.getFirstItemInCollection(results);
      if (r instanceof StatusTestCaseResult) {
        status=((StatusTestCaseResult)r).getStatus();
      }
 else {
        if (r instanceof RLOGTestCaseResult || r instanceof SimpleShaclTestCaseResult) {
          status=TestCaseResultStatus.Fail;
        }
      }
    }
    if (status != TestCaseResultStatus.Success) {
      success=false;
    }
    for (    TestExecutorMonitor monitor : progressMonitors) {
      monitor.singleTestExecuted(testCase,status,results);
    }
  }
  for (  TestExecutorMonitor monitor : progressMonitors) {
    monitor.testingFinished();
  }
  return success;
}","/** 
 * Test execution for a Source against a TestSuite
 * @param testSource    the source we want to test
 * @param testSuite the test suite we test the source against
 * @return true if all TC executed successfully, false otherwise
 */
public boolean execute(TestSource testSource,TestSuite testSuite){
  boolean success=true;
  isCanceled=false;
  for (  TestExecutorMonitor monitor : progressMonitors) {
    monitor.testingStarted(testSource,testSuite);
  }
  for (  TestCase testCase : testSuite.getTestCases()) {
    if (isCanceled) {
      break;
    }
    for (    TestExecutorMonitor monitor : progressMonitors) {
      monitor.singleTestStarted(testCase);
    }
    Collection<TestCaseResult> results=new ArrayList<>();
    TestCaseResultStatus status;
    long executionTimeStartInMS=System.currentTimeMillis();
    log.debug(""String_Node_Str"",testCase.getAbrTestURI());
    try {
      results=executeSingleTest(testSource,testCase);
    }
 catch (    TestCaseExecutionException e) {
      status=e.getStatus();
    }
catch (    RuntimeException e) {
      log.error(""String_Node_Str"" + testCase.getAbrTestURI(),e);
    }
catch (    Exception e) {
      log.error(""String_Node_Str"" + testCase.getAbrTestURI(),e);
      status=TestCaseResultStatus.Error;
    }
    long executionTimeEndInMS=System.currentTimeMillis();
    log.debug(""String_Node_Str"",testCase.getAbrTestURI(),(executionTimeEndInMS - executionTimeStartInMS));
    if (results.isEmpty()) {
      status=TestCaseResultStatus.Success;
    }
 else     if (results.size() > 1) {
      status=TestCaseResultStatus.Fail;
    }
 else {
      status=TestCaseResultStatus.Error;
      TestCaseResult r=RDFUnitUtils.getFirstItemInCollection(results);
      if (r instanceof StatusTestCaseResult) {
        status=((StatusTestCaseResult)r).getStatus();
      }
 else {
        if (r instanceof RLOGTestCaseResult || r instanceof SimpleShaclTestCaseResult) {
          status=TestCaseResultStatus.Fail;
        }
      }
    }
    if (status != TestCaseResultStatus.Success) {
      success=false;
    }
    for (    TestExecutorMonitor monitor : progressMonitors) {
      monitor.singleTestExecuted(testCase,status,results);
    }
  }
  for (  TestExecutorMonitor monitor : progressMonitors) {
    monitor.testingFinished();
  }
  return success;
}",0.9730753050063105
17580,"/** 
 * <p>generateTestSuite.</p>
 * @param testFolder a {@link java.lang.String} object.
 * @param dataset a {@link org.aksw.rdfunit.sources.Source} object.
 * @param autoGenerators a {@link java.util.Collection} object.
 * @return a {@link org.aksw.rdfunit.model.interfaces.TestSuite} object.
 */
public TestSuite generateTestSuite(String testFolder,TestSource dataset,Collection<TestGenerator> autoGenerators){
  Collection<SchemaSource> sources=dataset.getReferencesSchemata();
  for (  TestGeneratorExecutorMonitor monitor : progressMonitors) {
    monitor.generationStarted(dataset,sources.size());
  }
  Collection<TestCase> allTests=new ArrayList<>();
  for (  SchemaSource s : sources) {
    if (isCanceled) {
      break;
    }
    if (s.getModel() == null || s.getModel().isEmpty()) {
      log.error(""String_Node_Str"",s.getUri());
      continue;
    }
    if (useAutoTests) {
      allTests.addAll(generateAutoTestsForSchemaSource(testFolder,s,autoGenerators));
    }
    if (useManualTests) {
      allTests.addAll(generateManualTestsForSource(testFolder,s));
    }
    allTests.addAll(new ShaclTestGenerator().generate(s));
  }
  if (!isCanceled && useManualTests) {
    allTests.addAll(generateManualTestsForSource(testFolder,dataset));
  }
  for (  TestGeneratorExecutorMonitor monitor : progressMonitors) {
    monitor.generationFinished();
  }
  return new TestSuite(allTests);
}","/** 
 * <p>generateTestSuite.</p>
 * @param testFolder a {@link java.lang.String} object.
 * @param dataset a {@link org.aksw.rdfunit.sources.Source} object.
 * @param autoGenerators a {@link java.util.Collection} object.
 * @return a {@link org.aksw.rdfunit.model.interfaces.TestSuite} object.
 */
public TestSuite generateTestSuite(String testFolder,TestSource dataset,Collection<TestGenerator> autoGenerators){
  Collection<SchemaSource> sources=dataset.getReferencesSchemata();
  for (  TestGeneratorExecutorMonitor monitor : progressMonitors) {
    monitor.generationStarted(dataset,sources.size());
  }
  Collection<TestCase> allTests=new ArrayList<>();
  for (  SchemaSource s : sources) {
    if (isCanceled) {
      break;
    }
    if (s.getModel() == null || s.getModel().isEmpty()) {
      log.error(""String_Node_Str"",s.getUri());
      continue;
    }
    if (useAutoTests) {
      allTests.addAll(generateAutoTestsForSchemaSource(testFolder,s,autoGenerators));
    }
    if (useManualTests) {
      allTests.addAll(generateManualTestsForSource(testFolder,s));
    }
  }
  if (!isCanceled && useManualTests) {
    allTests.addAll(generateManualTestsForSource(testFolder,dataset));
  }
  for (  TestGeneratorExecutorMonitor monitor : progressMonitors) {
    monitor.generationFinished();
  }
  return new TestSuite(allTests);
}",0.9784435513335769
17581,"private void testMap(Map<String,Integer> datasets,TestSuite testSuite,SchemaSource ontologySource){
  DatasetOverviewResults overviewResults=new DatasetOverviewResults();
  for (  Map.Entry<String,Integer> entry : datasets.entrySet()) {
    String resource=entry.getKey();
    int errors=datasets.get(resource);
    long failedTestCases=-1;
    for (    TestCaseExecutionType executionType : TestCaseExecutionType.values()) {
      final TestSource modelSource=new TestSourceBuilder().setImMemSingle().setPrefixUri(""String_Node_Str"",resource).setInMemReader(RdfReaderFactory.createResourceReader(resourcePrefix + resource)).setReferenceSchemata(ontologySource).build();
      RDFUnitStaticValidator.validate(executionType,modelSource,testSuite,overviewResults);
      if (!executionType.equals(TestCaseExecutionType.statusTestCaseResult)) {
        assertEquals(executionType + ""String_Node_Str"" + resource,errors,overviewResults.getIndividualErrors());
      }
      if (failedTestCases == -1) {
        failedTestCases=overviewResults.getFailedTests();
      }
 else {
        assertEquals(executionType + ""String_Node_Str"" + resource,failedTestCases,overviewResults.getFailedTests());
      }
      assertEquals(executionType + ""String_Node_Str"" + resource,0,overviewResults.getErrorTests());
    }
  }
}","private void testMap(Map<String,Integer> datasets,TestSuite testSuite,SchemaSource ontologySource) throws RdfReaderException {
  DatasetOverviewResults overviewResults=new DatasetOverviewResults();
  for (  Map.Entry<String,Integer> entry : datasets.entrySet()) {
    String resource=resourcePrefix + entry.getKey();
    int errors=entry.getValue();
    long failedTestCases=-1;
    for (    TestCaseExecutionType executionType : TestCaseExecutionType.values()) {
      final TestSource modelSource=new TestSourceBuilder().setImMemSingle().setPrefixUri(""String_Node_Str"",resource).setInMemReader(new RdfModelReader(RdfReaderFactory.createResourceReader(resource).read())).setReferenceSchemata(ontologySource).build();
      RDFUnitStaticValidator.validate(executionType,modelSource,testSuite,overviewResults);
      if (!executionType.equals(TestCaseExecutionType.statusTestCaseResult)) {
        assertEquals(executionType + ""String_Node_Str"" + resource,errors,overviewResults.getIndividualErrors());
      }
      if (failedTestCases == -1) {
        failedTestCases=overviewResults.getFailedTests();
      }
 else {
        assertEquals(executionType + ""String_Node_Str"" + resource,failedTestCases,overviewResults.getFailedTests());
      }
      assertEquals(executionType + ""String_Node_Str"" + resource,0,overviewResults.getErrorTests());
    }
  }
}",0.9534184823441022
17582,"/** 
 * {@inheritDoc} 
 */
@Override public ExtendedTestCaseResult read(final Resource resource){
  checkNotNull(resource);
  RLOGTestCaseResult test=RLOGTestCaseResultReader.create().read(resource);
  SimpleAnnotationSet annotationSet=SimpleAnnotationSet.create();
  Set<Property> excludesProperties=ImmutableSet.of(RLOG.level,RLOG.resource,RLOG.message,PROV.wasGeneratedBy,DCTerms.date);
  Set<Resource> excludesTypes=ImmutableSet.of(RDFUNITv.RLOGTestCaseResult,RDFUNITv.TestCaseResult,RLOG.Entry);
  for (  Statement smt : resource.listProperties().toList()) {
    if (excludesProperties.contains(smt.getPredicate())) {
      continue;
    }
    if (RDF.type.equals(smt.getPredicate()) && excludesTypes.contains(smt.getObject().asResource())) {
      continue;
    }
    annotationSet.add(smt.getPredicate(),smt.getObject());
  }
  return new ExtendedTestCaseResultImpl(resource,test.getTestCaseUri(),test.getSeverity(),test.getMessage(),test.getTimestamp(),test.getFailingResource(),annotationSet.getAnnotations());
}","/** 
 * {@inheritDoc} 
 */
@Override public ExtendedTestCaseResult read(final Resource resource){
  checkNotNull(resource);
  RLOGTestCaseResult test=RLOGTestCaseResultReader.create().read(resource);
  SimpleAnnotationSet annotationSet=SimpleAnnotationSet.create();
  Set<Property> excludesProperties=ImmutableSet.of(RLOG.level,RLOG.resource,RLOG.message,PROV.wasGeneratedBy,DCTerms.date,RDFUNITv.testCase);
  Set<Resource> excludesTypes=ImmutableSet.of(RDFUNITv.RLOGTestCaseResult,RDFUNITv.TestCaseResult,RLOG.Entry);
  for (  Statement smt : resource.listProperties().toList()) {
    if (excludesProperties.contains(smt.getPredicate())) {
      continue;
    }
    if (RDF.type.equals(smt.getPredicate()) && excludesTypes.contains(smt.getObject().asResource())) {
      continue;
    }
    annotationSet.add(smt.getPredicate(),smt.getObject());
  }
  return new ExtendedTestCaseResultImpl(resource,test.getTestCaseUri(),test.getSeverity(),test.getMessage(),test.getTimestamp(),test.getFailingResource(),annotationSet.getAnnotations());
}",0.9174757281553398
17583,"/** 
 * {@inheritDoc} 
 */
@Override public Resource write(Model model){
  Resource resource=null;
  if (testCaseResult.getElement().isAnon()) {
    resource=model.createResource(executionUri + ""String_Node_Str"" + JenaUUID.generate().toString());
  }
 else {
    resource=ElementWriterUtils.copyElementResourceInModel(testCaseResult,model);
  }
  resource.addProperty(RDF.type,RDFUNITv.TestCaseResult).addProperty(PROV.wasGeneratedBy,model.createResource(executionUri)).addProperty(RDFUNITv.testCase,model.createResource(testCaseResult.getTestCaseUri())).addProperty(DCTerms.date,model.createTypedLiteral(testCaseResult.getTimestamp(),XSDDatatype.XSDdateTime));
  if (testCaseResult instanceof StatusTestCaseResult) {
    resource.addProperty(RDF.type,RDFUNITv.StatusTestCaseResult).addProperty(RDFUNITv.resultStatus,model.createResource(((StatusTestCaseResult)testCaseResult).getStatus().getUri())).addProperty(DCTerms.description,testCaseResult.getMessage()).addProperty(RDFUNITv.testCaseLogLevel,model.createResource(testCaseResult.getSeverity().getUri()));
  }
  if (testCaseResult instanceof AggregatedTestCaseResult) {
    resource.addProperty(RDF.type,RDFUNITv.AggregatedTestResult).addProperty(RDFUNITv.resultCount,ResourceFactory.createTypedLiteral(""String_Node_Str"" + ((AggregatedTestCaseResult)testCaseResult).getErrorCount(),XSDDatatype.XSDinteger)).addProperty(RDFUNITv.resultPrevalence,ResourceFactory.createTypedLiteral(""String_Node_Str"" + ((AggregatedTestCaseResult)testCaseResult).getPrevalenceCount().or(-1l),XSDDatatype.XSDinteger));
  }
  if (testCaseResult instanceof RLOGTestCaseResult) {
    resource.addProperty(RDF.type,RDFUNITv.RLOGTestCaseResult).addProperty(RDF.type,RLOG.Entry).addProperty(RLOG.resource,model.createResource(((RLOGTestCaseResult)testCaseResult).getFailingResource())).addProperty(RLOG.message,testCaseResult.getMessage()).addProperty(RLOG.level,model.createResource(testCaseResult.getSeverity().getUri()));
  }
  if (testCaseResult instanceof ExtendedTestCaseResult) {
    resource.addProperty(RDF.type,RDFUNITv.ExtendedTestCaseResult).addProperty(RDF.type,SHACL.ValidationResult).addProperty(SHACL.focusNode,model.createResource(((RLOGTestCaseResult)testCaseResult).getFailingResource()));
    for (    SimpleAnnotation annotation : ((ExtendedTestCaseResult)testCaseResult).getResultAnnotations()) {
      for (      RDFNode rdfNode : annotation.getValues()) {
        resource.addProperty(annotation.getProperty(),rdfNode);
      }
    }
  }
  if (testCaseResult instanceof SimpleShaclTestCaseResult) {
    resource.addProperty(RDF.type,SHACL.ValidationResult).addProperty(SHACL.focusNode,model.createResource(((SimpleShaclTestCaseResult)testCaseResult).getFailingResource())).addProperty(SHACL.message,testCaseResult.getMessage()).addProperty(SHACL.severity,model.createResource(testCaseResult.getSeverity().getUri()));
  }
  if (testCaseResult instanceof ShaclTestCaseResult) {
    resource.addProperty(SHACL.subject,model.createResource(((SimpleShaclTestCaseResult)testCaseResult).getFailingResource()));
    for (    SimpleAnnotation annotation : ((ShaclTestCaseResult)testCaseResult).getResultAnnotations()) {
      for (      RDFNode rdfNode : annotation.getValues()) {
        resource.addProperty(annotation.getProperty(),rdfNode);
      }
    }
  }
  return resource;
}","/** 
 * {@inheritDoc} 
 */
@Override public Resource write(Model model){
  Resource resource=null;
  if (testCaseResult.getElement().isAnon()) {
    resource=model.createResource(executionUri + ""String_Node_Str"" + JenaUUID.generate().toString());
  }
 else {
    resource=ElementWriterUtils.copyElementResourceInModel(testCaseResult,model);
  }
  resource.addProperty(RDF.type,RDFUNITv.TestCaseResult).addProperty(PROV.wasGeneratedBy,model.createResource(executionUri)).addProperty(RDFUNITv.testCase,model.createResource(testCaseResult.getTestCaseUri())).addProperty(DCTerms.date,model.createTypedLiteral(testCaseResult.getTimestamp(),XSDDatatype.XSDdateTime));
  if (testCaseResult instanceof StatusTestCaseResult) {
    resource.addProperty(RDF.type,RDFUNITv.StatusTestCaseResult).addProperty(RDFUNITv.resultStatus,model.createResource(((StatusTestCaseResult)testCaseResult).getStatus().getUri())).addProperty(DCTerms.description,testCaseResult.getMessage()).addProperty(RDFUNITv.testCaseLogLevel,model.createResource(testCaseResult.getSeverity().getUri()));
  }
  if (testCaseResult instanceof AggregatedTestCaseResult) {
    resource.addProperty(RDF.type,RDFUNITv.AggregatedTestResult).addProperty(RDFUNITv.resultCount,ResourceFactory.createTypedLiteral(""String_Node_Str"" + ((AggregatedTestCaseResult)testCaseResult).getErrorCount(),XSDDatatype.XSDinteger)).addProperty(RDFUNITv.resultPrevalence,ResourceFactory.createTypedLiteral(""String_Node_Str"" + ((AggregatedTestCaseResult)testCaseResult).getPrevalenceCount().or(-1l),XSDDatatype.XSDinteger));
  }
  if (testCaseResult instanceof RLOGTestCaseResult) {
    resource.addProperty(RDF.type,RDFUNITv.RLOGTestCaseResult).addProperty(RDF.type,RLOG.Entry).addProperty(RLOG.resource,model.createResource(((RLOGTestCaseResult)testCaseResult).getFailingResource())).addProperty(RLOG.message,testCaseResult.getMessage()).addProperty(RLOG.level,model.createResource(testCaseResult.getSeverity().getUri()));
  }
  if (testCaseResult instanceof ExtendedTestCaseResult) {
    resource.addProperty(RDF.type,RDFUNITv.ExtendedTestCaseResult);
    for (    SimpleAnnotation annotation : ((ExtendedTestCaseResult)testCaseResult).getResultAnnotations()) {
      for (      RDFNode rdfNode : annotation.getValues()) {
        resource.addProperty(annotation.getProperty(),rdfNode);
      }
    }
  }
  if (testCaseResult instanceof SimpleShaclTestCaseResult) {
    resource.addProperty(RDF.type,SHACL.ValidationResult).addProperty(SHACL.focusNode,model.createResource(((SimpleShaclTestCaseResult)testCaseResult).getFailingResource())).addProperty(SHACL.message,testCaseResult.getMessage()).addProperty(SHACL.severity,model.createResource(testCaseResult.getSeverity().getUri()));
  }
  if (testCaseResult instanceof ShaclTestCaseResult) {
    resource.addProperty(SHACL.subject,model.createResource(((SimpleShaclTestCaseResult)testCaseResult).getFailingResource()));
    for (    SimpleAnnotation annotation : ((ShaclTestCaseResult)testCaseResult).getResultAnnotations()) {
      for (      RDFNode rdfNode : annotation.getValues()) {
        resource.addProperty(annotation.getProperty(),rdfNode);
      }
    }
  }
  return resource;
}",0.9763004001231148
17584,"@Test public void test() throws Exception {
  assertThat(inputModel.isEmpty()).isFalse();
  Model outputModel=ModelFactory.createDefaultModel();
  outputModel.setNsPrefixes(inputModel.getNsPrefixMap());
  for (  Resource testExecutionResource : inputModel.listResourcesWithProperty(RDF.type,RDFUNITv.TestExecution).toList()) {
    TestExecution testExecution=TestExecutionReader.create().read(testExecutionResource);
    TestExecutionWriter writer=TestExecutionWriter.create(testExecution);
    writer.write(outputModel);
  }
  Model difference=inputModel.difference(outputModel);
  assertThat(difference.isEmpty()).isTrue();
}","@Test public void test() throws Exception {
  assertThat(inputModel.isEmpty()).isFalse();
  Model outputModel=ModelFactory.createDefaultModel();
  outputModel.setNsPrefixes(inputModel.getNsPrefixMap());
  for (  Resource testExecutionResource : inputModel.listResourcesWithProperty(RDF.type,RDFUNITv.TestExecution).toList()) {
    TestExecution testExecution=TestExecutionReader.create().read(testExecutionResource);
    TestExecutionWriter writer=TestExecutionWriter.create(testExecution);
    writer.write(outputModel);
  }
  assertThat(inputModel.isIsomorphicWith(outputModel)).isTrue();
}",0.9089417555373256
17585,"/** 
 * <p>Getter for the field <code>testSource</code>.</p>
 * @return a  object.
 */
public TestSource getTestSource(){
  if (testSource != null) {
    Collection<SchemaSource> schemata=getAllSchemata();
    if (testSource.getReferencesSchemata().isEmpty() && !schemata.isEmpty()) {
      testSource=TestSourceFactory.createTestSource(testSource,schemata);
    }
    return testSource;
  }
  testSourceBuilder.setPrefixUri(prefix,datasetURI);
  testSourceBuilder.setReferenceSchemata(getAllSchemata());
  if (customDereferenceURI != null && ""String_Node_Str"".equals(customDereferenceURI)) {
    testSourceBuilder.setInMemFromPipe();
  }
  if (getEndpointURI() == null || getEndpointURI().isEmpty()) {
    String tmp_customDereferenceURI=datasetURI;
    if (customDereferenceURI != null && !customDereferenceURI.isEmpty()) {
      tmp_customDereferenceURI=customDereferenceURI;
    }
    testSourceBuilder.setInMemReader(RDFReaderFactory.createDereferenceReader(tmp_customDereferenceURI));
  }
  if (this.endpointQueryCacheTTL != -1)   testSourceBuilder.setCacheTTL(this.endpointQueryCacheTTL);
  if (this.endpointQueryDelayMS != -1)   testSourceBuilder.setQueryDelay(this.endpointQueryDelayMS);
  if (this.endpointQueryPagination != -1)   testSourceBuilder.setPagination(this.endpointQueryPagination);
  if (this.endpointQueryLimit != -1)   testSourceBuilder.setQueryLimit(this.endpointQueryLimit);
  testSource=testSourceBuilder.build();
  return testSource;
}","/** 
 * <p>Getter for the field <code>testSource</code>.</p>
 * @return a  object.
 */
public TestSource getTestSource(){
  if (testSource != null) {
    Collection<SchemaSource> schemata=getAllSchemata();
    if (testSource.getReferencesSchemata().isEmpty() && !schemata.isEmpty()) {
      testSource=TestSourceFactory.createTestSource(testSource,schemata);
    }
    return testSource;
  }
  testSourceBuilder.setPrefixUri(prefix,datasetURI);
  testSourceBuilder.setReferenceSchemata(getAllSchemata());
  if (customDereferenceURI != null && ""String_Node_Str"".equals(customDereferenceURI)) {
    testSourceBuilder.setInMemFromPipe();
  }
  if (getEndpointURI() == null || getEndpointURI().isEmpty()) {
    String tmp_customDereferenceURI=datasetURI;
    if (customDereferenceURI != null && !customDereferenceURI.isEmpty()) {
      tmp_customDereferenceURI=customDereferenceURI;
    }
    if (testSourceBuilder.getInMemReader() == null) {
      testSourceBuilder.setInMemReader(RDFReaderFactory.createDereferenceReader(tmp_customDereferenceURI));
    }
  }
  if (this.endpointQueryCacheTTL > 0)   testSourceBuilder.setCacheTTL(this.endpointQueryCacheTTL);
  if (this.endpointQueryDelayMS > 0)   testSourceBuilder.setQueryDelay(this.endpointQueryDelayMS);
  if (this.endpointQueryPagination > 0)   testSourceBuilder.setPagination(this.endpointQueryPagination);
  if (this.endpointQueryLimit > 0)   testSourceBuilder.setQueryLimit(this.endpointQueryLimit);
  testSource=testSourceBuilder.build();
  return testSource;
}",0.7718120805369127
17586,"/** 
 * <p>setInMemFromCustomText.</p>
 * @param customTextSource a {@link java.lang.String} object.
 * @param customTextFormat a {@link java.lang.String} object.
 * @return a {@link org.aksw.rdfunit.sources.TestSourceBuilder} object.
 * @throws org.aksw.rdfunit.exceptions.UndefinedSerializationException if any.
 */
public TestSourceBuilder setInMemFromCustomText(String customTextSource,String customTextFormat) throws UndefinedSerializationException {
  SerializationFormat format=FormatService.getInputFormat(customTextFormat);
  if (format == null) {
    throw new UndefinedSerializationException(customTextFormat);
  }
  this.inMemReader=RDFReaderFactory.createReaderFromText(customTextSource,format.getName());
  return this;
}","/** 
 * <p>setInMemFromCustomText.</p>
 * @param customTextSource a {@link java.lang.String} object.
 * @param customTextFormat a {@link java.lang.String} object.
 * @return a {@link org.aksw.rdfunit.sources.TestSourceBuilder} object.
 * @throws org.aksw.rdfunit.exceptions.UndefinedSerializationException if any.
 */
public TestSourceBuilder setInMemFromCustomText(String customTextSource,String customTextFormat) throws UndefinedSerializationException {
  SerializationFormat format=FormatService.getInputFormat(customTextFormat);
  if (format == null) {
    throw new UndefinedSerializationException(customTextFormat);
  }
  this.inMemReader=RDFReaderFactory.createReaderFromText(customTextSource,format.getName());
  if (queryingConfig == null) {
    queryingConfig=QueryingConfig.createInMemory();
  }
  return this;
}",0.9435173299101411
17587,"/** 
 * {@inheritDoc} 
 */
@Override public Collection<ResultAnnotation> getBindedAnnotations(Collection<Binding> bindings){
  Collection<ResultAnnotation> finalAnnotations=new ArrayList<>();
  for (  ResultAnnotation externalAnnotation : annotations) {
    ResultAnnotation sanitizedAnnotation=externalAnnotation;
    if (externalAnnotation.getAnnotationValue().isPresent() && externalAnnotation.getAnnotationValue().get().isLiteral()) {
      String value=externalAnnotation.getAnnotationValue().get().toString();
      for (      Binding binding : bindings) {
        if (value.equals(""String_Node_Str"" + binding.getParameterId() + ""String_Node_Str"")) {
          sanitizedAnnotation=new ResultAnnotationImpl.Builder(externalAnnotation.getAnnotationProperty()).setValueRDFUnit(binding.getValue()).build();
        }
      }
    }
    finalAnnotations.add(sanitizedAnnotation);
  }
  return finalAnnotations;
}","/** 
 * {@inheritDoc} 
 */
@Override public Collection<ResultAnnotation> getBindedAnnotations(Collection<Binding> bindings){
  Collection<ResultAnnotation> finalAnnotations=new ArrayList<>();
  for (  ResultAnnotation externalAnnotation : annotations) {
    ResultAnnotation sanitizedAnnotation=externalAnnotation;
    if (externalAnnotation.getAnnotationValue().isPresent() && externalAnnotation.getAnnotationValue().get().isLiteral()) {
      String value=externalAnnotation.getAnnotationValue().get().toString();
      for (      Binding binding : bindings) {
        if (value.equals(""String_Node_Str"" + binding.getParameterId() + ""String_Node_Str"")) {
          sanitizedAnnotation=new ResultAnnotationImpl.Builder(externalAnnotation.getResource().get(),externalAnnotation.getAnnotationProperty()).setValueRDFUnit(binding.getValue()).build();
        }
      }
    }
    finalAnnotations.add(sanitizedAnnotation);
  }
  return finalAnnotations;
}",0.9790660225442834
17588,"/** 
 * {@inheritDoc} 
 */
@Override public PatternParameter read(Resource resource){
  checkNotNull(resource);
  PatternParameterImpl.Builder parameterBuilder=new PatternParameterImpl.Builder();
  parameterBuilder.setElement(resource);
  for (  Statement smt : resource.listProperties(DCTerms.identifier).toList()) {
    parameterBuilder.setID(smt.getObject().asLiteral().getLexicalForm());
  }
  for (  Statement smt : resource.listProperties(RDFUNITv.parameterConstraint).toList()) {
    parameterBuilder.setPatternParameterConstraints(smt.getObject().asResource().getURI());
  }
  for (  Statement smt : resource.listProperties(SHACL.defaultValue).toList()) {
    parameterBuilder.setContraintPattern(smt.getObject().asLiteral().getLexicalForm());
  }
  return parameterBuilder.build();
}","/** 
 * {@inheritDoc} 
 */
@Override public PatternParameter read(Resource resource){
  checkNotNull(resource);
  PatternParameterImpl.Builder parameterBuilder=new PatternParameterImpl.Builder();
  parameterBuilder.setElement(resource);
  for (  Statement smt : resource.listProperties(DCTerms.identifier).toList()) {
    parameterBuilder.setID(smt.getObject().asLiteral().getLexicalForm());
  }
  for (  Statement smt : resource.listProperties(RDFUNITv.parameterConstraint).toList()) {
    parameterBuilder.setPatternParameterConstraints(smt.getObject().asResource().getURI());
  }
  for (  Statement smt : resource.listProperties(RDFUNITv.constraintPattern).toList()) {
    parameterBuilder.setContraintPattern(smt.getObject().asLiteral().getLexicalForm());
  }
  return parameterBuilder.build();
}",0.9723618090452262
17589,"/** 
 * {@inheritDoc} 
 */
@Override public Pattern read(Resource resource){
  checkNotNull(resource);
  PatternImpl.Builder patternBuilder=new PatternImpl.Builder();
  patternBuilder.setElement(resource);
  int count=0;
  count=0;
  for (  Statement smt : resource.listProperties(DCTerms.identifier).toList()) {
    checkArgument(++count == 1,""String_Node_Str"",resource.getURI());
    patternBuilder.setId(smt.getObject().asLiteral().getString());
  }
  count=0;
  for (  Statement smt : resource.listProperties(DCTerms.description).toList()) {
    checkArgument(++count == 1,""String_Node_Str"",resource.getURI());
    patternBuilder.setDescription(smt.getObject().asLiteral().getLexicalForm());
  }
  count=0;
  for (  Statement smt : resource.listProperties(RDFUNITv.sparqlWherePattern).toList()) {
    checkArgument(++count == 1,""String_Node_Str"",resource.getURI());
    patternBuilder.setSparqlWherePattern(smt.getObject().asLiteral().getLexicalForm());
  }
  count=0;
  for (  Statement smt : resource.listProperties(RDFUNITv.sparqlPrevalencePattern).toList()) {
    checkArgument(++count == 1,""String_Node_Str"",resource.getURI());
    patternBuilder.setSparqlPatternPrevalence(smt.getObject().asLiteral().getLexicalForm());
  }
  Collection<PatternParameter> patternParameters=new ArrayList<>();
  for (  Statement smt : resource.listProperties(RDFUNITv.parameter).toList()) {
    patternParameters.add(PatternParameterReader.create().read(smt.getResource()));
  }
  patternBuilder.setParameters(patternParameters);
  Collection<ResultAnnotation> patternAnnotations=new ArrayList<>();
  for (  Statement smt : resource.listProperties(RDFUNITv.resultAnnotation).toList()) {
    patternAnnotations.add(ResultAnnotationReader.create().read(smt.getResource()));
  }
  patternBuilder.setAnnotations(patternAnnotations);
  return patternBuilder.build();
}","/** 
 * {@inheritDoc} 
 */
@Override public Pattern read(Resource resource){
  checkNotNull(resource);
  PatternImpl.Builder patternBuilder=new PatternImpl.Builder();
  patternBuilder.setElement(resource);
  int count=0;
  count=0;
  for (  Statement smt : resource.listProperties(DCTerms.identifier).toList()) {
    checkArgument(++count == 1,""String_Node_Str"",resource.getURI());
    patternBuilder.setId(smt.getObject().asLiteral().getLexicalForm());
  }
  count=0;
  for (  Statement smt : resource.listProperties(DCTerms.description).toList()) {
    checkArgument(++count == 1,""String_Node_Str"",resource.getURI());
    patternBuilder.setDescription(smt.getObject().asLiteral().getLexicalForm());
  }
  count=0;
  for (  Statement smt : resource.listProperties(RDFUNITv.sparqlWherePattern).toList()) {
    checkArgument(++count == 1,""String_Node_Str"",resource.getURI());
    patternBuilder.setSparqlWherePattern(smt.getObject().asLiteral().getLexicalForm());
  }
  count=0;
  for (  Statement smt : resource.listProperties(RDFUNITv.sparqlPrevalencePattern).toList()) {
    checkArgument(++count == 1,""String_Node_Str"",resource.getURI());
    patternBuilder.setSparqlPatternPrevalence(smt.getObject().asLiteral().getLexicalForm());
  }
  Collection<PatternParameter> patternParameters=new ArrayList<>();
  for (  Statement smt : resource.listProperties(RDFUNITv.parameter).toList()) {
    patternParameters.add(PatternParameterReader.create().read(smt.getResource()));
  }
  patternBuilder.setParameters(patternParameters);
  Collection<ResultAnnotation> patternAnnotations=new ArrayList<>();
  for (  Statement smt : resource.listProperties(RDFUNITv.resultAnnotation).toList()) {
    patternAnnotations.add(ResultAnnotationReader.create().read(smt.getResource()));
  }
  patternBuilder.setAnnotations(patternAnnotations);
  return patternBuilder.build();
}",0.9954239569313592
17590,"/** 
 * {@inheritDoc} 
 */
@Override public ResultAnnotation read(Resource resource){
  checkNotNull(resource);
  ResultAnnotationImpl.Builder resultAnBuilder=null;
  int count=0;
  for (  Statement smt : resource.listProperties(propertyP).toList()) {
    checkArgument(++count == 1,""String_Node_Str"",resource.getURI(),smt.getObject().toString());
    resultAnBuilder=new ResultAnnotationImpl.Builder(ResourceFactory.createProperty(smt.getObject().asResource().getURI()));
  }
  checkNotNull(resultAnBuilder);
  count=0;
  for (  Statement smt : resource.listProperties(valueP).toList()) {
    checkArgument(++count == 1,""String_Node_Str"",resource.getURI(),smt.getObject().toString());
    RDFNode value=smt.getObject();
    if (!valueP.getNameSpace().equals(RDFUNITv.namespace) || !value.toString().startsWith(""String_Node_Str"")) {
      resultAnBuilder.setValue(value);
    }
  }
  count=0;
  for (  Statement smt : resource.listProperties(varNameP).toList()) {
    checkArgument(++count == 1,""String_Node_Str"",resource.getURI(),smt.getObject().toString());
    String varName=smt.getObject().toString();
    if (!valueP.getNameSpace().equals(RDFUNITv.namespace) || varName.startsWith(""String_Node_Str"")) {
      resultAnBuilder.setVariableName(varName.startsWith(""String_Node_Str"") ? varName.substring(1) : varName);
    }
  }
  return resultAnBuilder.build();
}","/** 
 * {@inheritDoc} 
 */
@Override public ResultAnnotation read(Resource resource){
  checkNotNull(resource);
  ResultAnnotationImpl.Builder resultAnBuilder=null;
  int count=0;
  for (  Statement smt : resource.listProperties(propertyP).toList()) {
    checkArgument(++count == 1,""String_Node_Str"",resource.getURI(),smt.getObject().toString());
    resultAnBuilder=new ResultAnnotationImpl.Builder(smt.getSubject(),ResourceFactory.createProperty(smt.getObject().asResource().getURI()));
  }
  checkNotNull(resultAnBuilder);
  count=0;
  for (  Statement smt : resource.listProperties(valueP).toList()) {
    checkArgument(++count == 1,""String_Node_Str"",resource.getURI(),smt.getObject().toString());
    RDFNode value=smt.getObject();
    if (!valueP.getNameSpace().equals(RDFUNITv.namespace) || !value.toString().startsWith(""String_Node_Str"")) {
      resultAnBuilder.setValue(value);
    }
  }
  count=0;
  for (  Statement smt : resource.listProperties(varNameP).toList()) {
    checkArgument(++count == 1,""String_Node_Str"",resource.getURI(),smt.getObject().toString());
    String varName=smt.getObject().toString();
    if (!valueP.getNameSpace().equals(RDFUNITv.namespace) || varName.startsWith(""String_Node_Str"")) {
      resultAnBuilder.setVariableName(varName.startsWith(""String_Node_Str"") ? varName.substring(1) : varName);
    }
  }
  return resultAnBuilder.build();
}",0.99381143065162
17591,"/** 
 * {@inheritDoc} 
 */
@Override protected void collectInitializationErrors(List<Throwable> errors){
  super.collectInitializationErrors(errors);
  verifySchemaAnnotation(errors);
  verifyTestInputAnnotatedMethods(errors);
}","/** 
 * {@inheritDoc} 
 */
@Override protected void collectInitializationErrors(List<Throwable> errors){
  super.collectInitializationErrors(errors);
  verifySchemaAnnotation(errors);
  verifyTestInputAnnotatedMethods(errors);
  verifyAtMostOneAdditionalDataMethodWithMatchingReturnType(errors);
}",0.8685714285714285
17592,"/** 
 * <p>write.</p>
 * @return a {@link com.hp.hpl.jena.rdf.model.Resource} object.
 */
Resource write(Model model);","/** 
 * <p>write.</p>
 * @return a {@link com.hp.hpl.jena.rdf.model.Resource} object.
 * @param model a {@link com.hp.hpl.jena.rdf.model.Model} object.
 */
Resource write(Model model);",0.7814569536423841
17593,"public static Resource copyElementResourceInModel(Element element,Model model){
  if (element.getResource().isPresent() && !element.getResource().get().isAnon()) {
    return model.createResource(element.getResource().get().getURI());
  }
 else {
    return model.createResource();
  }
}","/** 
 * <p>copyElementResourceInModel.</p>
 * @param element a {@link org.aksw.rdfunit.elements.interfaces.Element} object.
 * @param model a {@link com.hp.hpl.jena.rdf.model.Model} object.
 * @return a {@link com.hp.hpl.jena.rdf.model.Resource} object.
 */
public static Resource copyElementResourceInModel(Element element,Model model){
  if (element.getResource().isPresent() && !element.getResource().get().isAnon()) {
    return model.createResource(element.getResource().get().getURI());
  }
 else {
    return model.createResource();
  }
}",0.6346153846153846
17594,"@Override public Optional<Resource> getResource(){
  return Optional.fromNullable(element);
}","/** 
 * {@inheritDoc} 
 */
@Override public Optional<Resource> getResource(){
  return Optional.fromNullable(element);
}",0.8732394366197183
17595,"@Override public Optional<ValueKind> getValueKind(){
  return Optional.fromNullable(valueKind);
}","/** 
 * {@inheritDoc} 
 */
@Override public Optional<ValueKind> getValueKind(){
  return Optional.fromNullable(valueKind);
}",0.8778280542986425
17596,"@Override public boolean isOptional(){
  return isOptional;
}","/** 
 * {@inheritDoc} 
 */
@Override public boolean isOptional(){
  return isOptional;
}",0.8187919463087249
17597,"@Override public Optional<RDFNode> getDefaultValue(){
  return Optional.fromNullable(defaultValue);
}","/** 
 * {@inheritDoc} 
 */
@Override public Optional<RDFNode> getDefaultValue(){
  return Optional.fromNullable(defaultValue);
}",0.8820960698689956
17598,"@Override public RDFNode getPredicate(){
  return predicate;
}","/** 
 * {@inheritDoc} 
 */
@Override public RDFNode getPredicate(){
  return predicate;
}",0.8211920529801324
17599,"@Override public int hashCode(){
  return Objects.hashCode(element,predicate,comment,valueType,valueKind,defaultValue,isOptional);
}","/** 
 * {@inheritDoc} 
 */
@Override public int hashCode(){
  return Objects.hashCode(element,predicate,comment,valueType,valueKind,defaultValue,isOptional);
}",0.9072164948453608
17600,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || getClass() != obj.getClass()) {
    return false;
  }
  final ArgumentImpl other=(ArgumentImpl)obj;
  return Objects.equal(this.element,other.element) && Objects.equal(this.predicate,other.predicate) && Objects.equal(this.comment,other.comment)&& Objects.equal(this.valueType,other.valueType)&& Objects.equal(this.valueKind,other.valueKind)&& Objects.equal(this.defaultValue,other.defaultValue)&& Objects.equal(this.isOptional,other.isOptional);
}","/** 
 * {@inheritDoc} 
 */
@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || getClass() != obj.getClass()) {
    return false;
  }
  final ArgumentImpl other=(ArgumentImpl)obj;
  return Objects.equal(this.element,other.element) && Objects.equal(this.predicate,other.predicate) && Objects.equal(this.comment,other.comment)&& Objects.equal(this.valueType,other.valueType)&& Objects.equal(this.valueKind,other.valueKind)&& Objects.equal(this.defaultValue,other.defaultValue)&& Objects.equal(this.isOptional,other.isOptional);
}",0.9762532981530344
17601,"@Override public String getComment(){
  return comment;
}","/** 
 * {@inheritDoc} 
 */
@Override public String getComment(){
  return comment;
}",0.8085106382978723
17602,"@Override public Optional<Resource> getValueType(){
  return Optional.fromNullable(valueType);
}","/** 
 * {@inheritDoc} 
 */
@Override public Optional<Resource> getValueType(){
  return Optional.fromNullable(valueType);
}",0.8767123287671232
17603,"@Override public Optional<Resource> getResource(){
  return Optional.fromNullable(element);
}","/** 
 * {@inheritDoc} 
 */
@Override public Optional<Resource> getResource(){
  return Optional.fromNullable(element);
}",0.8732394366197183
17604,"@Override public String getSparqlString(){
  return sparqlString;
}","/** 
 * {@inheritDoc} 
 */
@Override public String getSparqlString(){
  return sparqlString;
}",0.8322981366459627
17605,"@Override public Optional<Resource> getReturnType(){
  return Optional.fromNullable(returnType);
}","/** 
 * {@inheritDoc} 
 */
@Override public Optional<Resource> getReturnType(){
  return Optional.fromNullable(returnType);
}",0.8789237668161435
17606,"@Override public int hashCode(){
  return Objects.hashCode(comment,isCachable,superFunction,arguments,sparqlString,returnType);
}","/** 
 * {@inheritDoc} 
 */
@Override public int hashCode(){
  return Objects.hashCode(comment,isCachable,superFunction,arguments,sparqlString,returnType);
}",0.9052631578947368
17607,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || getClass() != obj.getClass()) {
    return false;
  }
  final FunctionImpl other=(FunctionImpl)obj;
  return Objects.equal(this.comment,other.comment) && Objects.equal(this.isCachable,other.isCachable) && Objects.equal(this.superFunction,other.superFunction)&& Objects.equal(this.arguments,other.arguments)&& Objects.equal(this.sparqlString,other.sparqlString)&& Objects.equal(this.returnType,other.returnType);
}","/** 
 * {@inheritDoc} 
 */
@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || getClass() != obj.getClass()) {
    return false;
  }
  final FunctionImpl other=(FunctionImpl)obj;
  return Objects.equal(this.comment,other.comment) && Objects.equal(this.isCachable,other.isCachable) && Objects.equal(this.superFunction,other.superFunction)&& Objects.equal(this.arguments,other.arguments)&& Objects.equal(this.sparqlString,other.sparqlString)&& Objects.equal(this.returnType,other.returnType);
}",0.9747427502338636
17608,"@Override public boolean isCachable(){
  return isCachable;
}","/** 
 * {@inheritDoc} 
 */
@Override public boolean isCachable(){
  return isCachable;
}",0.8187919463087249
17609,"@Override public List<Argument> getArguments(){
  return arguments;
}","/** 
 * {@inheritDoc} 
 */
@Override public List<Argument> getArguments(){
  return arguments;
}",0.8363636363636363
17610,"@Override public String getComment(){
  return comment;
}","/** 
 * {@inheritDoc} 
 */
@Override public String getComment(){
  return comment;
}",0.8085106382978723
17611,"@Override public Optional<Resource> getResource(){
  return null;
}","/** 
 * {@inheritDoc} 
 */
@Override public Optional<Resource> getResource(){
  return null;
}",0.8322981366459627
17612,"@Override public String getIRI(){
  return element.getURI();
}","/** 
 * {@inheritDoc} 
 */
@Override public String getIRI(){
  return element.getURI();
}",0.8211920529801324
17613,"@Override public boolean isValid(){
  if (getParameters() == null || getParameters().isEmpty()) {
    return false;
  }
  for (  PatternParameter p : getParameters()) {
    if (!getSparqlWherePattern().contains(""String_Node_Str"" + p.getId() + ""String_Node_Str"")) {
      return false;
    }
  }
  return true;
}","/** 
 * {@inheritDoc} 
 */
@Override public boolean isValid(){
  if (getParameters() == null || getParameters().isEmpty()) {
    return false;
  }
  for (  PatternParameter p : getParameters()) {
    if (!getSparqlWherePattern().contains(""String_Node_Str"" + p.getId() + ""String_Node_Str"")) {
      return false;
    }
  }
  return true;
}",0.9583975346687212
17614,"@Override public String getSparqlWherePattern(){
  return sparqlWherePattern;
}","/** 
 * {@inheritDoc} 
 */
@Override public String getSparqlWherePattern(){
  return sparqlWherePattern;
}",0.8540540540540541
17615,"@Override public Optional<String> getSparqlPatternPrevalence(){
  return Optional.fromNullable(sparqlPatternPrevalence);
}","/** 
 * {@inheritDoc} 
 */
@Override public Optional<String> getSparqlPatternPrevalence(){
  return Optional.fromNullable(sparqlPatternPrevalence);
}",0.9003690036900369
17616,"@Override public String getId(){
  return id;
}","/** 
 * {@inheritDoc} 
 */
@Override public String getId(){
  return id;
}",0.7768595041322314
17617,"@Override public String getDescription(){
  return description;
}","/** 
 * {@inheritDoc} 
 */
@Override public String getDescription(){
  return description;
}",0.8280254777070064
17618,"@Override public Collection<ResultAnnotation> getBindedAnnotations(Collection<Binding> bindings){
  Collection<ResultAnnotation> finalAnnotations=new ArrayList<>();
  for (  ResultAnnotation externalAnnotation : annotations) {
    ResultAnnotation sanitizedAnnotation=externalAnnotation;
    if (externalAnnotation.getAnnotationValue().isPresent() && externalAnnotation.getAnnotationValue().get().isLiteral()) {
      String value=externalAnnotation.getAnnotationValue().get().toString();
      for (      Binding binding : bindings) {
        if (value.equals(""String_Node_Str"" + binding.getParameterId() + ""String_Node_Str"")) {
          sanitizedAnnotation=new ResultAnnotationImpl.Builder(externalAnnotation.getAnnotationProperty()).setValueRDFUnit(binding.getValue()).build();
        }
      }
    }
    finalAnnotations.add(sanitizedAnnotation);
  }
  return finalAnnotations;
}","/** 
 * {@inheritDoc} 
 */
@Override public Collection<ResultAnnotation> getBindedAnnotations(Collection<Binding> bindings){
  Collection<ResultAnnotation> finalAnnotations=new ArrayList<>();
  for (  ResultAnnotation externalAnnotation : annotations) {
    ResultAnnotation sanitizedAnnotation=externalAnnotation;
    if (externalAnnotation.getAnnotationValue().isPresent() && externalAnnotation.getAnnotationValue().get().isLiteral()) {
      String value=externalAnnotation.getAnnotationValue().get().toString();
      for (      Binding binding : bindings) {
        if (value.equals(""String_Node_Str"" + binding.getParameterId() + ""String_Node_Str"")) {
          sanitizedAnnotation=new ResultAnnotationImpl.Builder(externalAnnotation.getAnnotationProperty()).setValueRDFUnit(binding.getValue()).build();
        }
      }
    }
    finalAnnotations.add(sanitizedAnnotation);
  }
  return finalAnnotations;
}",0.9849749582637728
17619,"@Override public Collection<PatternParameter> getParameters(){
  return Collections.unmodifiableCollection(parameters);
}","/** 
 * {@inheritDoc} 
 */
@Override public Collection<PatternParameter> getParameters(){
  return Collections.unmodifiableCollection(parameters);
}",0.8996282527881041
17620,"@Override public Optional<PatternParameter> getParameter(String parameterURI){
  for (  PatternParameter parameter : parameters) {
    if (parameter.getUri().equals(parameterURI)) {
      return Optional.of(parameter);
    }
  }
  return Optional.absent();
}","/** 
 * {@inheritDoc} 
 */
@Override public Optional<PatternParameter> getParameter(String parameterURI){
  for (  PatternParameter parameter : parameters) {
    if (parameter.getUri().equals(parameterURI)) {
      return Optional.of(parameter);
    }
  }
  return Optional.absent();
}",0.9502762430939228
17621,"@Override public int hashCode(){
  return Objects.hashCode(element,id,constraint,constraintPattern);
}","/** 
 * {@inheritDoc} 
 */
@Override public int hashCode(){
  return Objects.hashCode(element,id,constraint,constraintPattern);
}",0.8831168831168831
17622,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || getClass() != obj.getClass()) {
    return false;
  }
  final PatternParameterImpl other=(PatternParameterImpl)obj;
  return Objects.equal(this.element,other.element) && Objects.equal(this.id,other.id) && Objects.equal(this.constraint,other.constraint)&& Objects.equal(this.constraintPattern,other.constraintPattern);
}","/** 
 * {@inheritDoc} 
 */
@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || getClass() != obj.getClass()) {
    return false;
  }
  final PatternParameterImpl other=(PatternParameterImpl)obj;
  return Objects.equal(this.element,other.element) && Objects.equal(this.id,other.id) && Objects.equal(this.constraint,other.constraint)&& Objects.equal(this.constraintPattern,other.constraintPattern);
}",0.9693530079455164
17623,"@Override public Optional<Resource> getResource(){
  return Optional.fromNullable(element);
}","/** 
 * {@inheritDoc} 
 */
@Override public Optional<Resource> getResource(){
  return Optional.fromNullable(element);
}",0.8732394366197183
17624,"@Override public Property getAnnotationProperty(){
  return property;
}","/** 
 * {@inheritDoc} 
 */
@Override public Property getAnnotationProperty(){
  return property;
}",0.8402366863905325
17625,"@Override public Optional<RDFNode> getAnnotationValue(){
  return Optional.fromNullable(value);
}","/** 
 * {@inheritDoc} 
 */
@Override public Optional<RDFNode> getAnnotationValue(){
  return Optional.fromNullable(value);
}",0.8778280542986425
17626,"@Override public int hashCode(){
  return Objects.hashCode(property,value,variableName);
}","/** 
 * {@inheritDoc} 
 */
@Override public int hashCode(){
  return Objects.hashCode(property,value,variableName);
}",0.8695652173913043
17627,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || getClass() != obj.getClass()) {
    return false;
  }
  final ResultAnnotationImpl other=(ResultAnnotationImpl)obj;
  return Objects.equal(this.property,other.property) && Objects.equal(this.value,other.value) && Objects.equal(this.variableName,other.variableName);
}","/** 
 * {@inheritDoc} 
 */
@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || getClass() != obj.getClass()) {
    return false;
  }
  final ResultAnnotationImpl other=(ResultAnnotationImpl)obj;
  return Objects.equal(this.property,other.property) && Objects.equal(this.value,other.value) && Objects.equal(this.variableName,other.variableName);
}",0.9652509652509652
17628,"@Override public Optional<String> getAnnotationVarName(){
  return Optional.fromNullable(variableName);
}","/** 
 * {@inheritDoc} 
 */
@Override public Optional<String> getAnnotationVarName(){
  return Optional.fromNullable(variableName);
}",0.8860759493670886
17629,"@Override public Pattern getTAGPattern(){
  return pattern;
}","/** 
 * {@inheritDoc} 
 */
@Override public Pattern getTAGPattern(){
  return pattern;
}",0.8187919463087249
17630,"@Override public Optional<Resource> getResource(){
  return Optional.fromNullable(element);
}","/** 
 * {@inheritDoc} 
 */
@Override public Optional<Resource> getResource(){
  return Optional.fromNullable(element);
}",0.8732394366197183
17631,"public static TestGenerator createTAG(Resource element,String description,String query,Pattern pattern,Collection<ResultAnnotation> generatorAnnotations){
  return new TestGeneratorImpl(element,description,query,pattern,generatorAnnotations);
}","/** 
 * <p>createTAG.</p>
 * @param element a {@link com.hp.hpl.jena.rdf.model.Resource} object.
 * @param description a {@link java.lang.String} object.
 * @param query a {@link java.lang.String} object.
 * @param pattern a {@link org.aksw.rdfunit.elements.interfaces.Pattern} object.
 * @param generatorAnnotations a {@link java.util.Collection} object.
 * @return a {@link org.aksw.rdfunit.elements.interfaces.TestGenerator} object.
 */
public static TestGenerator createTAG(Resource element,String description,String query,Pattern pattern,Collection<ResultAnnotation> generatorAnnotations){
  return new TestGeneratorImpl(element,description,query,pattern,generatorAnnotations);
}",0.5258620689655172
17632,"@Override public String getTAGUri(){
  return element.getURI();
}","/** 
 * {@inheritDoc} 
 */
@Override public String getTAGUri(){
  return element.getURI();
}",0.8280254777070064
17633,"@Override public boolean isValid(){
  Query q;
  if (pattern == null) {
    log.error(""String_Node_Str"",getTAGUri(),getTAGPattern());
    return false;
  }
  try {
    q=QueryFactory.create(PrefixNSService.getSparqlPrefixDecl() + getTAGQuery());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",getTAGUri(),PrefixNSService.getSparqlPrefixDecl() + getTAGQuery(),e);
    return false;
  }
  Collection<Var> sv=q.getProjectVars();
  if (sv.size() != pattern.getParameters().size() + 1) {
    log.error(""String_Node_Str"",getTAGUri());
    return false;
  }
  return true;
}","/** 
 * {@inheritDoc} 
 */
@Override public boolean isValid(){
  Query q;
  if (pattern == null) {
    log.error(""String_Node_Str"",getTAGUri(),getTAGPattern());
    return false;
  }
  try {
    q=QueryFactory.create(PrefixNSService.getSparqlPrefixDecl() + getTAGQuery());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",getTAGUri(),PrefixNSService.getSparqlPrefixDecl() + getTAGQuery(),e);
    return false;
  }
  Collection<Var> sv=q.getProjectVars();
  if (sv.size() != pattern.getParameters().size() + 1) {
    log.error(""String_Node_Str"",getTAGUri());
    return false;
  }
  return true;
}",0.977291841883936
17634,"@Override public String getTAGDescription(){
  return description;
}","/** 
 * {@inheritDoc} 
 */
@Override public String getTAGDescription(){
  return description;
}",0.8343558282208589
17635,"@Override public Collection<TestCase> generate(SchemaSource source){
  Collection<TestCase> tests=new ArrayList<>();
  Query q=QueryFactory.create(PrefixNSService.getSparqlPrefixDecl() + getTAGQuery());
  QueryExecution qe=new QueryExecutionFactoryModel(source.getModel()).createQueryExecution(q);
  ResultSet rs=qe.execSelect();
  while (rs.hasNext()) {
    QuerySolution row=rs.next();
    Collection<Binding> bindings=new ArrayList<>();
    Collection<String> references=new ArrayList<>();
    String description;
    for (    PatternParameter p : pattern.getParameters()) {
      if (row.contains(p.getId())) {
        RDFNode n=row.get(p.getId());
        Binding b;
        try {
          b=new Binding(p,n);
        }
 catch (        BindingException e) {
          log.error(""String_Node_Str"",p.getId(),this.getTAGUri(),e);
          continue;
        }
        bindings.add(b);
        if (n.isResource() && !""String_Node_Str"".equalsIgnoreCase(p.getId())) {
          references.add(n.toString().trim().replace(""String_Node_Str"",""String_Node_Str""));
        }
      }
 else {
        log.error(""String_Node_Str"",p.getId(),this.getTAGUri());
        break;
      }
    }
    if (bindings.size() != getTAGPattern().getParameters().size()) {
      log.error(""String_Node_Str"",pattern.getId(),this.getTAGUri());
      continue;
    }
    if (row.get(""String_Node_Str"") != null) {
      description=row.get(""String_Node_Str"").toString();
    }
 else {
      log.error(""String_Node_Str"",this.getTAGUri());
      continue;
    }
    try {
      Collection<ResultAnnotation> patternBindedAnnotations=pattern.getBindedAnnotations(bindings);
      patternBindedAnnotations.addAll(generatorAnnotations);
      PatternBasedTestCase tc=new PatternBasedTestCase(TestUtils.generateTestURI(source.getPrefix(),getTAGPattern(),bindings,getTAGUri()),new TestCaseAnnotation(TestGenerationType.AutoGenerated,this.getTAGUri(),source.getSourceType(),source.getUri(),references,description,null,patternBindedAnnotations),pattern,bindings);
      new TestCaseValidator(tc).validate();
      tests.add(tc);
    }
 catch (    TestCaseInstantiationException e) {
      log.error(e.getMessage(),e);
    }
  }
  return tests;
}","/** 
 * {@inheritDoc} 
 */
@Override public Collection<TestCase> generate(SchemaSource source){
  Collection<TestCase> tests=new ArrayList<>();
  Query q=QueryFactory.create(PrefixNSService.getSparqlPrefixDecl() + getTAGQuery());
  QueryExecution qe=new QueryExecutionFactoryModel(source.getModel()).createQueryExecution(q);
  ResultSet rs=qe.execSelect();
  while (rs.hasNext()) {
    QuerySolution row=rs.next();
    Collection<Binding> bindings=new ArrayList<>();
    Collection<String> references=new ArrayList<>();
    String description;
    for (    PatternParameter p : pattern.getParameters()) {
      if (row.contains(p.getId())) {
        RDFNode n=row.get(p.getId());
        Binding b;
        try {
          b=new Binding(p,n);
        }
 catch (        BindingException e) {
          log.error(""String_Node_Str"",p.getId(),this.getTAGUri(),e);
          continue;
        }
        bindings.add(b);
        if (n.isResource() && !""String_Node_Str"".equalsIgnoreCase(p.getId())) {
          references.add(n.toString().trim().replace(""String_Node_Str"",""String_Node_Str""));
        }
      }
 else {
        log.error(""String_Node_Str"",p.getId(),this.getTAGUri());
        break;
      }
    }
    if (bindings.size() != getTAGPattern().getParameters().size()) {
      log.error(""String_Node_Str"",pattern.getId(),this.getTAGUri());
      continue;
    }
    if (row.get(""String_Node_Str"") != null) {
      description=row.get(""String_Node_Str"").toString();
    }
 else {
      log.error(""String_Node_Str"",this.getTAGUri());
      continue;
    }
    try {
      Collection<ResultAnnotation> patternBindedAnnotations=pattern.getBindedAnnotations(bindings);
      patternBindedAnnotations.addAll(generatorAnnotations);
      PatternBasedTestCase tc=new PatternBasedTestCase(TestUtils.generateTestURI(source.getPrefix(),getTAGPattern(),bindings,getTAGUri()),new TestCaseAnnotation(TestGenerationType.AutoGenerated,this.getTAGUri(),source.getSourceType(),source.getUri(),references,description,null,patternBindedAnnotations),pattern,bindings);
      new TestCaseValidator(tc).validate();
      tests.add(tc);
    }
 catch (    TestCaseInstantiationException e) {
      log.error(e.getMessage(),e);
    }
  }
  return tests;
}",0.9939202882233732
17636,"@Override public String getTAGQuery(){
  return query;
}","/** 
 * {@inheritDoc} 
 */
@Override public String getTAGQuery(){
  return query;
}",0.8057553956834532
17637,Optional<Resource> getReturnType();,"/** 
 * <p>getReturnType.</p>
 * @return a {@link com.google.common.base.Optional} object.
 */
Optional<Resource> getReturnType();",0.4242424242424242
17638,boolean isCachable();,"/** 
 * <p>isCachable.</p>
 * @return a boolean.
 */
boolean isCachable();",0.4421052631578947
17639,List<Argument> getArguments();,"/** 
 * <p>getArguments.</p>
 * @return a {@link java.util.List} object.
 */
List<Argument> getArguments();",0.437956204379562
17640,String getComment();,"/** 
 * <p>getComment.</p>
 * @return a {@link java.lang.String} object.
 */
String getComment();",0.3418803418803419
17641,String getSparqlString();,"/** 
 * <p>getSparqlString.</p>
 * @return a {@link java.lang.String} object.
 */
String getSparqlString();",0.3787878787878788
17642,"@Before public void setUp() throws Exception {
  RDFUnitStaticWrapper.initWrapper(""String_Node_Str"",emptyResource);
  RDFUnit rdfunit=new RDFUnit();
  try {
    rdfunit.init();
  }
 catch (  RDFReaderException e) {
    fail(""String_Node_Str"");
  }
}","@Before public void setUp() throws Exception {
  String emptyResource=""String_Node_Str"";
  RDFUnitStaticWrapper.initWrapper(""String_Node_Str"",emptyResource);
  RDFUnit rdfunit=new RDFUnit();
  try {
    rdfunit.init();
  }
 catch (  RDFReaderException e) {
    fail(""String_Node_Str"");
  }
}",0.9222222222222224
17643,"/** 
 * <p>Getter for the field <code>testSource</code>.</p>
 * @return a  object.
 */
public TestSource getTestSource(){
  if (testSource != null) {
    Collection<SchemaSource> schemata=getAllSchemata();
    if (testSource.getReferencesSchemata().isEmpty() && !schemata.isEmpty()) {
      testSource=TestSourceFactory.createTestSource(testSource,schemata);
    }
    return testSource;
  }
  testSourceBuilder.setPrefixUri(prefix,datasetURI);
  testSourceBuilder.setReferenceSchemata(getAllSchemata());
  if (customDereferenceURI != null && ""String_Node_Str"".equals(customDereferenceURI)) {
    testSourceBuilder.setInMemFromPipe();
  }
  if (this.endpointQueryCacheTTL != -1)   testSourceBuilder.setCacheTTL(this.endpointQueryCacheTTL);
  if (this.endpointQueryDelayMS != -1)   testSourceBuilder.setQueryDelay(this.endpointQueryDelayMS);
  if (this.endpointQueryPagination != -1)   testSourceBuilder.setPagination(this.endpointQueryPagination);
  if (this.endpointQueryLimit != -1)   testSourceBuilder.setQueryLimit(this.endpointQueryLimit);
  testSource=testSourceBuilder.build();
  return testSource;
}","/** 
 * <p>Getter for the field <code>testSource</code>.</p>
 * @return a  object.
 */
public TestSource getTestSource(){
  if (testSource != null) {
    Collection<SchemaSource> schemata=getAllSchemata();
    if (testSource.getReferencesSchemata().isEmpty() && !schemata.isEmpty()) {
      testSource=TestSourceFactory.createTestSource(testSource,schemata);
    }
    return testSource;
  }
  testSourceBuilder.setPrefixUri(prefix,datasetURI);
  testSourceBuilder.setReferenceSchemata(getAllSchemata());
  if (customDereferenceURI != null && ""String_Node_Str"".equals(customDereferenceURI)) {
    testSourceBuilder.setInMemFromPipe();
  }
  if (getEndpointURI() == null || getEndpointURI().isEmpty()) {
    String tmp_customDereferenceURI=datasetURI;
    if (customDereferenceURI != null && !customDereferenceURI.isEmpty()) {
      tmp_customDereferenceURI=customDereferenceURI;
    }
    testSourceBuilder.setInMemReader(RDFReaderFactory.createDereferenceReader(tmp_customDereferenceURI));
  }
  if (this.endpointQueryCacheTTL != -1)   testSourceBuilder.setCacheTTL(this.endpointQueryCacheTTL);
  if (this.endpointQueryDelayMS != -1)   testSourceBuilder.setQueryDelay(this.endpointQueryDelayMS);
  if (this.endpointQueryPagination != -1)   testSourceBuilder.setPagination(this.endpointQueryPagination);
  if (this.endpointQueryLimit != -1)   testSourceBuilder.setQueryLimit(this.endpointQueryLimit);
  testSource=testSourceBuilder.build();
  return testSource;
}",0.8614785992217899
17644,"public TestSourceBuilder setInMemReader(RDFReader reader){
  this.inMemReader=reader;
  return this;
}","public TestSourceBuilder setInMemReader(RDFReader reader){
  this.inMemReader=reader;
  if (queryingConfig == null) {
    queryingConfig=QueryingConfig.createInMemory();
  }
  return this;
}",0.6986301369863014
17645,"public TestSource build(){
  checkNotNull(sourceConfig);
  checkNotNull(referenceSchemata);
  checkNotNull(queryingConfig);
  if (testSourceType.equals(TestSourceType.Endpoint)) {
    checkNotNull(sparqlEndpoint);
    checkNotNull(endpointGraphs);
    return new EndpointTestSource(sourceConfig,queryingConfig,referenceSchemata,sparqlEndpoint,endpointGraphs);
  }
  checkNotNull(inMemReader);
  if (testSourceType.equals(TestSourceType.InMemSingle)) {
    return new DumpTestSource(sourceConfig,queryingConfig,referenceSchemata,inMemReader);
  }
  if (testSourceType.equals(TestSourceType.InMemDataset)) {
    return new DatasetTestSource(sourceConfig,queryingConfig,referenceSchemata,inMemReader);
  }
  throw new IllegalStateException(""String_Node_Str"");
}","public TestSource build(){
  checkNotNull(sourceConfig);
  checkNotNull(referenceSchemata,""String_Node_Str"");
  if (testSourceType.equals(TestSourceType.Endpoint)) {
    if (queryingConfig == null) {
      queryingConfig=QueryingConfig.createEndpoint();
    }
    checkNotNull(sparqlEndpoint);
    checkNotNull(endpointGraphs);
    return new EndpointTestSource(sourceConfig,queryingConfig,referenceSchemata,sparqlEndpoint,endpointGraphs);
  }
  if (queryingConfig == null) {
    queryingConfig=QueryingConfig.createEndpoint();
  }
  checkNotNull(inMemReader);
  if (testSourceType.equals(TestSourceType.InMemSingle)) {
    return new DumpTestSource(sourceConfig,queryingConfig,referenceSchemata,inMemReader);
  }
  if (testSourceType.equals(TestSourceType.InMemDataset)) {
    return new DatasetTestSource(sourceConfig,queryingConfig,referenceSchemata,inMemReader);
  }
  throw new IllegalStateException(""String_Node_Str"");
}",0.8622327790973872
17646,"public TestSourceBuilder setInMemFromPipe(){
  this.inMemReader=new RDFStreamReader(new BufferedInputStream(System.in),""String_Node_Str"");
  return this;
}","public TestSourceBuilder setInMemFromPipe(){
  this.inMemReader=new RDFStreamReader(new BufferedInputStream(System.in),""String_Node_Str"");
  setImMemSingle();
  return this;
}",0.9393939393939394
17647,"@Override public String getSparqlQueryAsString(TestCase testCase){
  return PrefixNSService.getSparqlPrefixDecl() + ""String_Node_Str"" + testCase.getSparqlWhere();
}","@Override public String getSparqlQueryAsString(TestCase testCase){
  return getSparqlQuery(testCase).toString();
}",0.7338129496402878
17648,"@Override public Query getSparqlQuery(TestCase testCase){
  return QueryFactory.create(getSparqlQueryAsString(testCase));
}","@Override public Query getSparqlQuery(TestCase testCase){
  Query query=QueryFactory.create(PrefixNSService.getSparqlPrefixDecl() + ""String_Node_Str"" + testCase.getSparqlWhere());
  if (!query.hasHaving()) {
    return query;
  }
  query=QueryFactory.create(PrefixNSService.getSparqlPrefixDecl() + ""String_Node_Str"" + ""String_Node_Str""+ testCase.getSparqlWhere()+ ""String_Node_Str"");
  return query;
}",0.3702290076335878
17649,"public static void fillSchemaServiceFromLOV(){
  Source lov=new EndpointTestSource(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new ArrayList<String>(),null);
  QueryExecution qe=null;
  int count=0;
  try {
    qe=lov.getExecutionFactory().createQueryExecution(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    ResultSet rs=qe.execSelect();
    while (rs.hasNext()) {
      QuerySolution row=rs.next();
      String prefix=row.get(""String_Node_Str"").toString();
      String vocab=row.get(""String_Node_Str"").toString();
      SchemaService.addSchemaDecl(prefix,vocab);
      count++;
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (qe != null) {
      qe.close();
    }
  }
  log.info(""String_Node_Str"" + count + ""String_Node_Str"");
}","public static void fillSchemaServiceFromLOV(){
  Source lov=new EndpointTestSource(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new ArrayList<String>(),null);
  QueryExecution qe=null;
  int count=0;
  try {
    qe=lov.getExecutionFactory().createQueryExecution(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    ResultSet rs=qe.execSelect();
    while (rs.hasNext()) {
      QuerySolution row=rs.next();
      String prefix=row.get(""String_Node_Str"").toString();
      String vocab=row.get(""String_Node_Str"").toString();
      String ns=row.get(""String_Node_Str"").toString();
      if (ns == null || ns.isEmpty()) {
        ns=vocab;
      }
      SchemaService.addSchemaDecl(prefix,ns);
      count++;
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (qe != null) {
      qe.close();
    }
  }
  log.info(""String_Node_Str"" + count + ""String_Node_Str"");
}",0.9366106080206986
17650,"public Source getTestSource(){
  if (endpointURI != null && !endpointURI.isEmpty()) {
    EndpointTestSource endpointSource=new EndpointTestSource(CacheUtils.getAutoPrefixForURI(datasetURI),datasetURI,endpointURI,endpointGraphs,getAllSchemata());
    endpointSource.setQueryDelay(this.endpointQueryDelayMS);
    endpointSource.setCacheTTL(this.endpointQueryCacheTTL);
    endpointSource.setPagination(this.endpointQueryPagination);
    endpointSource.setQueryLimit(this.endpointQueryLimit);
    return endpointSource;
  }
  if (customTextSource != null) {
    InputStream is=new ByteArrayInputStream(customTextSource.getBytes());
    RDFReader textReader=new RDFStreamReader(is,customTextFormat.getName());
    return new DumpTestSource(CacheUtils.getAutoPrefixForURI(datasetURI),datasetURI,textReader,getAllSchemata());
  }
  String tmp_customDereferenceURI=datasetURI;
  if (customDereferenceURI != null && !customDereferenceURI.isEmpty()) {
    tmp_customDereferenceURI=customDereferenceURI;
  }
  return new DumpTestSource(CacheUtils.getAutoPrefixForURI(datasetURI),datasetURI,tmp_customDereferenceURI,getAllSchemata());
}","public Source getTestSource(){
  if (endpointURI != null && !endpointURI.isEmpty()) {
    EndpointTestSource endpointSource=new EndpointTestSource(CacheUtils.getAutoPrefixForURI(datasetURI),datasetURI,endpointURI,endpointGraphs,getAllSchemata());
    endpointSource.setQueryDelay(this.endpointQueryDelayMS);
    endpointSource.setCacheTTL(this.endpointQueryCacheTTL);
    endpointSource.setPagination(this.endpointQueryPagination);
    endpointSource.setQueryLimit(this.endpointQueryLimit);
    return endpointSource;
  }
  if (customTextSource != null) {
    InputStream is=null;
    try {
      is=new ByteArrayInputStream(customTextSource.getBytes(""String_Node_Str""));
    }
 catch (    UnsupportedEncodingException e) {
      throw new IllegalArgumentException(""String_Node_Str"" + customTextSource,e);
    }
    RDFReader textReader=new RDFStreamReader(is,customTextFormat.getName());
    return new DumpTestSource(CacheUtils.getAutoPrefixForURI(datasetURI),datasetURI,textReader,getAllSchemata());
  }
  String tmp_customDereferenceURI=datasetURI;
  if (customDereferenceURI != null && !customDereferenceURI.isEmpty()) {
    tmp_customDereferenceURI=customDereferenceURI;
  }
  return new DumpTestSource(CacheUtils.getAutoPrefixForURI(datasetURI),datasetURI,tmp_customDereferenceURI,getAllSchemata());
}",0.9252259654889072
17651,"public static String getMD5FromString(String md5){
  try {
    java.security.MessageDigest md=java.security.MessageDigest.getInstance(""String_Node_Str"");
    byte[] array=md.digest(md5.getBytes());
    StringBuilder sb=new StringBuilder();
    for (    byte anArray : array) {
      sb.append(Integer.toHexString((anArray & 0xFF) | 0x100).substring(1,3));
    }
    return sb.toString();
  }
 catch (  java.security.NoSuchAlgorithmException e) {
  }
  return null;
}","public static String getMD5FromString(String md5){
  try {
    java.security.MessageDigest md=java.security.MessageDigest.getInstance(""String_Node_Str"");
    byte[] array=md.digest(md5.getBytes(""String_Node_Str""));
    StringBuilder sb=new StringBuilder();
    for (    byte anArray : array) {
      sb.append(Integer.toHexString((anArray & 0xFF) | 0x100).substring(1,3));
    }
    return sb.toString();
  }
 catch (  java.security.NoSuchAlgorithmException e) {
    throw new RuntimeException(""String_Node_Str"" + md5,e);
  }
catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(""String_Node_Str"" + md5,e);
  }
}",0.824385805277525
17652,"@Override public void write(QueryExecutionFactory qef) throws TripleWriterException {
  final Collection<String> testExecutionURIs=getTestExecutionURI(qef);
  try {
    outputStream.write(getHeader().toString().getBytes());
    for (    String te : testExecutionURIs) {
      outputStream.write(getTestExecutionStats(qef,te).toString().getBytes());
      outputStream.write(getTestExecutionResults(qef,te).toString().getBytes());
    }
    outputStream.write(getFooter().toString().getBytes());
    outputStream.close();
  }
 catch (  IOException e) {
    throw new TripleWriterException(""String_Node_Str"",e);
  }
}","@Override public void write(QueryExecutionFactory qef) throws TripleWriterException {
  final Collection<String> testExecutionURIs=getTestExecutionURI(qef);
  try {
    outputStream.write(getHeader().toString().getBytes(""String_Node_Str""));
    for (    String te : testExecutionURIs) {
      outputStream.write(getTestExecutionStats(qef,te).toString().getBytes(""String_Node_Str""));
      outputStream.write(getTestExecutionResults(qef,te).toString().getBytes(""String_Node_Str""));
    }
    outputStream.write(getFooter().toString().getBytes(""String_Node_Str""));
    outputStream.close();
  }
 catch (  IOException e) {
    throw new TripleWriterException(""String_Node_Str"",e);
  }
}",0.9476117103235748
17653,"@Override protected QueryExecutionFactory initQueryFactory(){
  QueryExecutionFactory qef;
  if (getSparqlGraphs() == null || getSparqlGraphs().isEmpty()) {
    qef=new QueryExecutionFactoryHttp(getSparqlEndpoint());
  }
 else {
    qef=new QueryExecutionFactoryHttp(getSparqlEndpoint(),getSparqlGraphs());
  }
  if (this.queryDelay > 0) {
    qef=new QueryExecutionFactoryDelay(qef,this.queryDelay);
  }
  if (this.cacheTTL > 0) {
    try {
      QueryExecutionFactory _qef=CacheUtilsH2.createQueryExecutionFactory(qef,""String_Node_Str"" + getPrefix(),false,cacheTTL);
      qef=_qef;
      log.debug(""String_Node_Str"" + this.getSparqlEndpoint());
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"" + this.getSparqlEndpoint(),e);
    }
  }
  if (this.pagination > 0) {
    qef=new QueryExecutionFactoryPaginated(qef,900);
  }
  if (this.queryLimit > 0 || this.queryLimit < Query.NOLIMIT) {
    qef=new QueryExecutionFactoryLimit(qef,true,this.queryLimit);
  }
  return qef;
}","@Override protected QueryExecutionFactory initQueryFactory(){
  QueryExecutionFactory qef;
  if (getSparqlGraphs() == null || getSparqlGraphs().isEmpty()) {
    qef=new QueryExecutionFactoryHttp(getSparqlEndpoint());
  }
 else {
    qef=new QueryExecutionFactoryHttp(getSparqlEndpoint(),getSparqlGraphs());
  }
  if (this.queryDelay > 0) {
    qef=new QueryExecutionFactoryDelay(qef,this.queryDelay);
  }
  if (this.cacheTTL > 0) {
    try {
      QueryExecutionFactory _qef=CacheUtilsH2.createQueryExecutionFactory(qef,""String_Node_Str"" + getPrefix(),false,cacheTTL);
      qef=_qef;
      log.debug(""String_Node_Str"" + this.getSparqlEndpoint());
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"" + this.getSparqlEndpoint(),e);
    }
  }
  if (this.pagination > 0) {
    qef=new QueryExecutionFactoryPaginated(qef,this.pagination);
  }
  if (this.queryLimit > 0 || this.queryLimit < Query.NOLIMIT) {
    qef=new QueryExecutionFactoryLimit(qef,true,this.queryLimit);
  }
  return qef;
}",0.9909729187562688
17654,"private String instantiateBindings(List<Binding> bindings,String query){
  String sparql=query;
  for (int i=0; i < bindings.size(); i++) {
    sparql=sparql.replace(""String_Node_Str"" + pattern.getParameters().get(i).getId() + ""String_Node_Str"",bindings.get(i).getValue());
  }
  return sparql;
}","private String instantiateBindings(List<Binding> bindings,String query){
  String sparql=query;
  for (  Binding b : bindings) {
    sparql=sparql.replace(""String_Node_Str"" + b.getParameterId() + ""String_Node_Str"",b.getValue());
  }
  return sparql;
}",0.8336380255941499
17655,"@Subscribe public void preInit(FMLPreInitializationEvent event){
  blaze_hopper=registerBlock(new BlockBlazeHopper(),""String_Node_Str"");
  materials=registerItem(new ItemMetaDynamic(),""String_Node_Str"");
  empty_bowls=registerItem(new ItemMetaDynamic(),""String_Node_Str"");
  edibles=registerItem(new ItemNaturaEdible(),""String_Node_Str"");
  soups=registerItem(new ItemEdibleSoup(),""String_Node_Str"");
  materials.setCreativeTab(NaturaRegistry.tabGeneral);
  empty_bowls.setCreativeTab(NaturaRegistry.tabGeneral);
  edibles.setCreativeTab(NaturaRegistry.tabGeneral);
  soups.setCreativeTab(NaturaRegistry.tabGeneral);
  barley=materials.addMeta(0,""String_Node_Str"");
  barleyFlour=materials.addMeta(1,""String_Node_Str"");
  wheatFlour=materials.addMeta(2,""String_Node_Str"");
  cotton=materials.addMeta(3,""String_Node_Str"");
  sulfurPowder=materials.addMeta(4,""String_Node_Str"");
  ghostwoodFletching=materials.addMeta(5,""String_Node_Str"");
  blueDye=materials.addMeta(8,""String_Node_Str"");
  if (isEntitiesLoaded()) {
    impLeather=materials.addMeta(6,""String_Node_Str"");
    flameString=materials.addMeta(7,""String_Node_Str"");
    impmeatRaw=edibles.addFood(0,3,0.2f,""String_Node_Str"",new PotionEffect(MobEffects.HUNGER,8 * 20,0),new PotionEffect(MobEffects.POISON,5 * 20,0));
    impmeatCooked=edibles.addFood(1,8,0.6f,""String_Node_Str"",new PotionEffect(MobEffects.FIRE_RESISTANCE,15 * 20,0),new PotionEffect(MobEffects.POISON,5 * 20,0));
  }
  if (isOverworldLoaded()) {
    raspberry=edibles.addFood(2,1,0.4F,""String_Node_Str"",true);
    blueberry=edibles.addFood(3,1,0.4F,""String_Node_Str"",true);
    blackberry=edibles.addFood(4,1,0.4F,""String_Node_Str"",true);
    maloberry=edibles.addFood(5,1,0.4F,""String_Node_Str"",true);
    berryMedley=soups.addFood(9,5,1.4F,""String_Node_Str"",new ItemStack(Items.BOWL));
  }
  if (isNetherLoaded()) {
    blightberry=edibles.addFood(6,1,0.4F,""String_Node_Str"",new PotionEffect(MobEffects.REGENERATION,8 * 20,0),new PotionEffect(MobEffects.POISON,5 * 20,0),new PotionEffect(MobEffects.WITHER,5 * 20,0));
    duskberry=edibles.addFood(7,1,0.4F,""String_Node_Str"",new PotionEffect(MobEffects.NIGHT_VISION,15 * 20,0),new PotionEffect(MobEffects.BLINDNESS,3 * 20,0));
    skyberry=edibles.addFood(8,1,0.4F,""String_Node_Str"",new PotionEffect(MobEffects.JUMP_BOOST,8 * 20,0),new PotionEffect(MobEffects.SLOWNESS,3 * 20,0));
    stingberry=edibles.addFood(9,1,0.4F,""String_Node_Str"",new PotionEffect(MobEffects.STRENGTH,10 * 20,0),new PotionEffect(MobEffects.MINING_FATIGUE,10 * 20,0));
  }
  ghostwood_emptybowl=empty_bowls.addMeta(0,""String_Node_Str"");
  bloodwood_emptybowl=empty_bowls.addMeta(1,""String_Node_Str"");
  darkwood_emptybowl=empty_bowls.addMeta(2,""String_Node_Str"");
  fusewood_emptybowl=empty_bowls.addMeta(3,""String_Node_Str"");
  ghostwood_mushroomstew=soups.addFood(0,6,0.6f,""String_Node_Str"",ghostwood_emptybowl);
  bloodwood_mushroomstew=soups.addFood(1,6,0.6f,""String_Node_Str"",bloodwood_emptybowl);
  darkwood_mushroomstew=soups.addFood(2,6,0.6f,""String_Node_Str"",darkwood_emptybowl);
  fusewood_mushroomstew=soups.addFood(3,6,0.6f,""String_Node_Str"",fusewood_emptybowl);
  vanilla_glowshroomstew=soups.addFood(4,6,0.6f,""String_Node_Str"",new ItemStack(Items.BOWL),new PotionEffect(MobEffects.NIGHT_VISION,45 * 25,0),new PotionEffect(MobEffects.POISON,16 * 25,0),new PotionEffect(MobEffects.MINING_FATIGUE,8 * 25,0));
  ghostwood_glowshroomstew=soups.addFood(5,6,0.6f,""String_Node_Str"",ghostwood_emptybowl,new PotionEffect(MobEffects.NIGHT_VISION,45 * 25,0),new PotionEffect(MobEffects.POISON,16 * 25,0),new PotionEffect(MobEffects.MINING_FATIGUE,8 * 25,0));
  bloodwood_glowshroomstew=soups.addFood(6,3,0.2f,""String_Node_Str"",bloodwood_emptybowl,new PotionEffect(MobEffects.NIGHT_VISION,45 * 25,0),new PotionEffect(MobEffects.POISON,16 * 25,0),new PotionEffect(MobEffects.MINING_FATIGUE,8 * 25,0));
  darkwood_glowshroomstew=soups.addFood(7,3,0.2f,""String_Node_Str"",darkwood_emptybowl,new PotionEffect(MobEffects.NIGHT_VISION,45 * 25,0),new PotionEffect(MobEffects.POISON,16 * 25,0),new PotionEffect(MobEffects.MINING_FATIGUE,8 * 25,0));
  fusewood_glowshroomstew=soups.addFood(8,3,0.2f,""String_Node_Str"",fusewood_emptybowl,new PotionEffect(MobEffects.NIGHT_VISION,45 * 25,0),new PotionEffect(MobEffects.POISON,16 * 25,0),new PotionEffect(MobEffects.MINING_FATIGUE,8 * 25,0));
  proxy.preInit();
  NaturaRegistry.tabGeneral.setDisplayIcon(cotton);
}","@Subscribe public void preInit(FMLPreInitializationEvent event){
  blaze_hopper=registerBlock(new BlockBlazeHopper(),""String_Node_Str"");
  materials=registerItem(new ItemMetaDynamic(),""String_Node_Str"");
  empty_bowls=registerItem(new ItemMetaDynamic(),""String_Node_Str"");
  edibles=registerItem(new ItemNaturaEdible(),""String_Node_Str"");
  soups=registerItem(new ItemEdibleSoup(),""String_Node_Str"");
  materials.setCreativeTab(NaturaRegistry.tabGeneral);
  empty_bowls.setCreativeTab(NaturaRegistry.tabGeneral);
  edibles.setCreativeTab(NaturaRegistry.tabGeneral);
  soups.setCreativeTab(NaturaRegistry.tabGeneral);
  barley=materials.addMeta(0,""String_Node_Str"");
  barleyFlour=materials.addMeta(1,""String_Node_Str"");
  wheatFlour=materials.addMeta(2,""String_Node_Str"");
  cotton=materials.addMeta(3,""String_Node_Str"");
  sulfurPowder=materials.addMeta(4,""String_Node_Str"");
  ghostwoodFletching=materials.addMeta(5,""String_Node_Str"");
  blueDye=materials.addMeta(8,""String_Node_Str"");
  if (isEntitiesLoaded()) {
    impLeather=materials.addMeta(6,""String_Node_Str"");
    flameString=materials.addMeta(7,""String_Node_Str"");
    impmeatRaw=edibles.addFood(0,3,0.2f,32,""String_Node_Str"",new PotionEffect(MobEffects.HUNGER,8 * 20,0),new PotionEffect(MobEffects.POISON,5 * 20,0));
    impmeatCooked=edibles.addFood(1,8,0.6f,32,""String_Node_Str"",new PotionEffect(MobEffects.FIRE_RESISTANCE,15 * 20,0),new PotionEffect(MobEffects.POISON,5 * 20,0));
  }
  if (isOverworldLoaded()) {
    raspberry=edibles.addFood(2,1,0.4F,16,""String_Node_Str"",true);
    blueberry=edibles.addFood(3,1,0.4F,16,""String_Node_Str"",true);
    blackberry=edibles.addFood(4,1,0.4F,16,""String_Node_Str"",true);
    maloberry=edibles.addFood(5,1,0.4F,16,""String_Node_Str"",true);
    berryMedley=soups.addFood(9,5,1.4F,""String_Node_Str"",new ItemStack(Items.BOWL));
  }
  if (isNetherLoaded()) {
    blightberry=edibles.addFood(6,1,0.4F,16,""String_Node_Str"",new PotionEffect(MobEffects.REGENERATION,8 * 20,0),new PotionEffect(MobEffects.POISON,5 * 20,0),new PotionEffect(MobEffects.WITHER,5 * 20,0));
    duskberry=edibles.addFood(7,1,0.4F,16,""String_Node_Str"",new PotionEffect(MobEffects.NIGHT_VISION,15 * 20,0),new PotionEffect(MobEffects.BLINDNESS,3 * 20,0));
    skyberry=edibles.addFood(8,1,0.4F,16,""String_Node_Str"",new PotionEffect(MobEffects.JUMP_BOOST,8 * 20,0),new PotionEffect(MobEffects.SLOWNESS,3 * 20,0));
    stingberry=edibles.addFood(9,1,0.4F,16,""String_Node_Str"",new PotionEffect(MobEffects.STRENGTH,10 * 20,0),new PotionEffect(MobEffects.MINING_FATIGUE,10 * 20,0));
  }
  ghostwood_emptybowl=empty_bowls.addMeta(0,""String_Node_Str"");
  bloodwood_emptybowl=empty_bowls.addMeta(1,""String_Node_Str"");
  darkwood_emptybowl=empty_bowls.addMeta(2,""String_Node_Str"");
  fusewood_emptybowl=empty_bowls.addMeta(3,""String_Node_Str"");
  ghostwood_mushroomstew=soups.addFood(0,6,0.6f,""String_Node_Str"",ghostwood_emptybowl);
  bloodwood_mushroomstew=soups.addFood(1,6,0.6f,""String_Node_Str"",bloodwood_emptybowl);
  darkwood_mushroomstew=soups.addFood(2,6,0.6f,""String_Node_Str"",darkwood_emptybowl);
  fusewood_mushroomstew=soups.addFood(3,6,0.6f,""String_Node_Str"",fusewood_emptybowl);
  vanilla_glowshroomstew=soups.addFood(4,6,0.6f,""String_Node_Str"",new ItemStack(Items.BOWL),new PotionEffect(MobEffects.NIGHT_VISION,45 * 25,0),new PotionEffect(MobEffects.POISON,16 * 25,0),new PotionEffect(MobEffects.MINING_FATIGUE,8 * 25,0));
  ghostwood_glowshroomstew=soups.addFood(5,6,0.6f,""String_Node_Str"",ghostwood_emptybowl,new PotionEffect(MobEffects.NIGHT_VISION,45 * 25,0),new PotionEffect(MobEffects.POISON,16 * 25,0),new PotionEffect(MobEffects.MINING_FATIGUE,8 * 25,0));
  bloodwood_glowshroomstew=soups.addFood(6,3,0.2f,""String_Node_Str"",bloodwood_emptybowl,new PotionEffect(MobEffects.NIGHT_VISION,45 * 25,0),new PotionEffect(MobEffects.POISON,16 * 25,0),new PotionEffect(MobEffects.MINING_FATIGUE,8 * 25,0));
  darkwood_glowshroomstew=soups.addFood(7,3,0.2f,""String_Node_Str"",darkwood_emptybowl,new PotionEffect(MobEffects.NIGHT_VISION,45 * 25,0),new PotionEffect(MobEffects.POISON,16 * 25,0),new PotionEffect(MobEffects.MINING_FATIGUE,8 * 25,0));
  fusewood_glowshroomstew=soups.addFood(8,3,0.2f,""String_Node_Str"",fusewood_emptybowl,new PotionEffect(MobEffects.NIGHT_VISION,45 * 25,0),new PotionEffect(MobEffects.POISON,16 * 25,0),new PotionEffect(MobEffects.MINING_FATIGUE,8 * 25,0));
  proxy.preInit();
  NaturaRegistry.tabGeneral.setDisplayIcon(cotton);
}",0.996606334841629
17656,"public ItemNaturaEdible(){
  super();
  this.displayEffectsTooltip=false;
  this.displayCustomEffectsTooltip=true;
}","public ItemNaturaEdible(){
  super();
  this.displayEffectsTooltip=false;
  this.displayCustomEffectsTooltip=true;
  itemDuration=new TIntIntHashMap();
}",0.862453531598513
17657,"protected void addShapedRecipeFirst(List<IRecipe> recipeList,ItemStack itemstack,Object... objArray){
  String var3=""String_Node_Str"";
  int var4=0;
  int var5=0;
  int var6=0;
  if (objArray[var4] instanceof String[]) {
    String[] var7=((String[])objArray[var4++]);
    for (    String var9 : var7) {
      ++var6;
      var5=var9.length();
      var3=var3 + var9;
    }
  }
 else {
    while (objArray[var4] instanceof String) {
      String var11=(String)objArray[var4++];
      ++var6;
      var5=var11.length();
      var3=var3 + var11;
    }
  }
  HashMap var12;
  for (var12=new HashMap(); var4 < objArray.length; var4+=2) {
    Character var13=(Character)objArray[var4];
    ItemStack var14=null;
    if (objArray[var4 + 1] instanceof Item) {
      var14=new ItemStack((Item)objArray[var4 + 1]);
    }
 else     if (objArray[var4 + 1] instanceof Block) {
      var14=new ItemStack((Block)objArray[var4 + 1],1,Short.MAX_VALUE);
    }
 else     if (objArray[var4 + 1] instanceof ItemStack) {
      var14=(ItemStack)objArray[var4 + 1];
    }
    var12.put(var13,var14);
  }
  ItemStack[] var15=new ItemStack[var5 * var6];
  for (int var16=0; var16 < var5 * var6; ++var16) {
    char var10=var3.charAt(var16);
    if (var12.containsKey(Character.valueOf(var10))) {
      var15[var16]=((ItemStack)var12.get(Character.valueOf(var10))).copy();
    }
 else {
      var15[var16]=null;
    }
  }
  ShapedRecipes var17=new ShapedRecipes(var5,var6,var15,itemstack);
  recipeList.add(0,var17);
}","protected void addShapedRecipeFirst(List<IRecipe> recipeList,ItemStack itemstack,Object... objArray){
  String var3=""String_Node_Str"";
  int var4=0;
  int var5=0;
  int var6=0;
  if (objArray[var4] instanceof String[]) {
    String[] var7=((String[])objArray[var4++]);
    for (    String var9 : var7) {
      ++var6;
      var5=var9.length();
      var3=var3 + var9;
    }
  }
 else {
    while (objArray[var4] instanceof String) {
      String var11=(String)objArray[var4++];
      ++var6;
      var5=var11.length();
      var3=var3 + var11;
    }
  }
  HashMap<Character,ItemStack> var12;
  for (var12=new HashMap<Character,ItemStack>(); var4 < objArray.length; var4+=2) {
    Character var13=(Character)objArray[var4];
    ItemStack var14=null;
    if (objArray[var4 + 1] instanceof Item) {
      var14=new ItemStack((Item)objArray[var4 + 1]);
    }
 else     if (objArray[var4 + 1] instanceof Block) {
      var14=new ItemStack((Block)objArray[var4 + 1],1,Short.MAX_VALUE);
    }
 else     if (objArray[var4 + 1] instanceof ItemStack) {
      var14=(ItemStack)objArray[var4 + 1];
    }
    var12.put(var13,var14);
  }
  ItemStack[] var15=new ItemStack[var5 * var6];
  for (int var16=0; var16 < var5 * var6; ++var16) {
    char var10=var3.charAt(var16);
    if (var12.containsKey(Character.valueOf(var10))) {
      var15[var16]=var12.get(Character.valueOf(var10)).copy();
    }
 else {
      var15[var16]=null;
    }
  }
  ShapedRecipes var17=new ShapedRecipes(var5,var6,var15,itemstack);
  recipeList.add(0,var17);
}",0.9817457683372054
17658,"protected void addShapelessRecipeFirst(List<IRecipe> recipeList,ItemStack par1ItemStack,Object... par2ArrayOfObj){
  ArrayList arraylist=new ArrayList();
  Object[] aobject=par2ArrayOfObj;
  int i=par2ArrayOfObj.length;
  for (int j=0; j < i; ++j) {
    Object object1=aobject[j];
    if (object1 instanceof ItemStack) {
      arraylist.add(((ItemStack)object1).copy());
    }
 else     if (object1 instanceof Item) {
      arraylist.add(new ItemStack((Item)object1));
    }
 else {
      if (!(object1 instanceof Block)) {
        throw new RuntimeException(""String_Node_Str"");
      }
      arraylist.add(new ItemStack((Block)object1));
    }
  }
  recipeList.add(0,new ShapelessRecipes(par1ItemStack,arraylist));
}","protected void addShapelessRecipeFirst(List<IRecipe> recipeList,ItemStack par1ItemStack,Object... par2ArrayOfObj){
  ArrayList<ItemStack> arraylist=new ArrayList<ItemStack>();
  Object[] aobject=par2ArrayOfObj;
  int i=par2ArrayOfObj.length;
  for (int j=0; j < i; ++j) {
    Object object1=aobject[j];
    if (object1 instanceof ItemStack) {
      arraylist.add(((ItemStack)object1).copy());
    }
 else     if (object1 instanceof Item) {
      arraylist.add(new ItemStack((Item)object1));
    }
 else {
      if (!(object1 instanceof Block)) {
        throw new RuntimeException(""String_Node_Str"");
      }
      arraylist.add(new ItemStack((Block)object1));
    }
  }
  recipeList.add(0,new ShapelessRecipes(par1ItemStack,arraylist));
}",0.98489010989011
17659,"@Override public boolean onBlockActivated(World worldIn,BlockPos pos,IBlockState state,EntityPlayer playerIn,EnumHand hand,@Nullable ItemStack heldItem,EnumFacing side,float hitX,float hitY,float hitZ){
  int age=state.getValue(AGE).intValue();
  if (age == 3) {
    if (worldIn.isRemote) {
      return true;
    }
    worldIn.setBlockState(pos,this.getDefaultState().withProperty(AGE,Integer.valueOf(2)),2);
    EntityItem entityitem=new EntityItem(worldIn,playerIn.posX,playerIn.posY - 1.0D,playerIn.posZ,this.itemDrop);
    worldIn.spawnEntityInWorld(entityitem);
    if (!(playerIn instanceof FakePlayer)) {
      entityitem.onCollideWithPlayer(playerIn);
    }
    return true;
  }
  return false;
}","@Override public boolean onBlockActivated(World worldIn,BlockPos pos,IBlockState state,EntityPlayer playerIn,EnumHand hand,@Nullable ItemStack heldItem,EnumFacing side,float hitX,float hitY,float hitZ){
  int age=state.getValue(AGE).intValue();
  if (age == 3) {
    if (worldIn.isRemote) {
      return true;
    }
    worldIn.setBlockState(pos,this.getDefaultState().withProperty(AGE,Integer.valueOf(2)),2);
    ItemStack itemDrop=new ItemStack(this.itemDrop.getItem(),1,this.itemDrop.getItemDamage());
    EntityItem entityitem=new EntityItem(worldIn,playerIn.posX,playerIn.posY - 1.0D,playerIn.posZ,itemDrop);
    worldIn.spawnEntityInWorld(entityitem);
    if (!(playerIn instanceof FakePlayer)) {
      entityitem.onCollideWithPlayer(playerIn);
    }
    return true;
  }
  return false;
}",0.9333333333333332
17660,"@Override public void onBlockClicked(World worldIn,BlockPos pos,EntityPlayer playerIn){
  if (worldIn.isRemote) {
    return;
  }
  int age=worldIn.getBlockState(pos).getValue(AGE).intValue();
  if (age == 3) {
    worldIn.setBlockState(pos,this.getDefaultState().withProperty(AGE,Integer.valueOf(2)),2);
    EntityItem entityitem=new EntityItem(worldIn,playerIn.posX,playerIn.posY - 1.0D,playerIn.posZ,this.itemDrop);
    worldIn.spawnEntityInWorld(entityitem);
    if (!(playerIn instanceof FakePlayer)) {
      entityitem.onCollideWithPlayer(playerIn);
    }
  }
}","@Override public void onBlockClicked(World worldIn,BlockPos pos,EntityPlayer playerIn){
  if (worldIn.isRemote) {
    return;
  }
  int age=worldIn.getBlockState(pos).getValue(AGE).intValue();
  if (age == 3) {
    worldIn.setBlockState(pos,this.getDefaultState().withProperty(AGE,Integer.valueOf(2)),2);
    ItemStack itemDrop=new ItemStack(this.itemDrop.getItem(),1,this.itemDrop.getItemDamage());
    EntityItem entityitem=new EntityItem(worldIn,playerIn.posX,playerIn.posY - 1.0D,playerIn.posZ,itemDrop);
    worldIn.spawnEntityInWorld(entityitem);
    if (!(playerIn instanceof FakePlayer)) {
      entityitem.onCollideWithPlayer(playerIn);
    }
  }
}",0.9183006535947712
17661,"public static boolean syncConfig(){
  enableRetrogen=configFile.get(""String_Node_Str"",""String_Node_Str"",enableRetrogen).getBoolean(enableRetrogen);
  boolean BoP=false;
  if (Loader.isModLoaded(""String_Node_Str"")) {
    BoP=true;
  }
  babyHeatscarMinimum=configFile.get(""String_Node_Str"",""String_Node_Str"",babyHeatscarMinimum).getInt(babyHeatscarMinimum);
  if (babyHeatscarMinimum < 0) {
    babyHeatscarMinimum=0;
  }
  babyHeatscarMaximum=configFile.get(""String_Node_Str"",""String_Node_Str"",babyHeatscarMaximum).getInt(babyHeatscarMaximum);
  if (babyHeatscarMaximum < 0) {
    babyHeatscarMaximum=0;
  }
  overrideNether=configFile.get(ENABLE_DISABLE,""String_Node_Str"",!BoP).getBoolean(!BoP);
  canRespawnInNether=configFile.get(ENABLE_DISABLE,""String_Node_Str"",canRespawnInNether).getBoolean(canRespawnInNether);
  generateRedwood=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateRedwood).getBoolean(generateRedwood);
  generateMaple=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateMaple).getBoolean(generateMaple);
  generateSilverbell=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateSilverbell).getBoolean(generateSilverbell);
  generateAmaranth=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateAmaranth).getBoolean(generateAmaranth);
  generateTiger=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateTiger).getBoolean(generateTiger);
  generateWillow=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateWillow).getBoolean(generateWillow);
  generateEucalyptus=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateEucalyptus).getBoolean(generateEucalyptus);
  generateHopseed=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateHopseed).getBoolean(generateHopseed);
  generateSakura=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateSakura).getBoolean(generateSakura);
  generateSaguaro=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateSaguaro).getBoolean(generateSaguaro);
  generateBloodwood=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateBloodwood).getBoolean(generateBloodwood);
  generateDarkwood=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateDarkwood).getBoolean(generateDarkwood);
  generateFusewood=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateFusewood).getBoolean(generateFusewood);
  generateGhostwood=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateGhostwood).getBoolean(generateGhostwood);
  generateThornvines=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateThornvines).getBoolean(generateThornvines);
  generateBarley=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateBarley).getBoolean(generateBarley);
  generateCotton=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateCotton).getBoolean(generateCotton);
  generateBluebells=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateBluebells).getBoolean(generateBluebells);
  generateBlueberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateBlueberries).getBoolean(generateBlueberries);
  generateBlackberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateBlackberries).getBoolean(generateBlackberries);
  generateRaspberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateRaspberries).getBoolean(generateRaspberries);
  generateMaloberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateMaloberries).getBoolean(generateMaloberries);
  generateBlightberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateBlightberries).getBoolean(generateBlightberries);
  generateDuskberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateDuskberries).getBoolean(generateDuskberries);
  generateSkyberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateSkyberries).getBoolean(generateSkyberries);
  generateStingberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateStingberries).getBoolean(generateStingberries);
  generateGreenglowshroom=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateGreenglowshroom).getBoolean(generateGreenglowshroom);
  generatePurpleglowshroom=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generatePurpleglowshroom).getBoolean(generatePurpleglowshroom);
  generateBlueglowshroom=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateBlueglowshroom).getBoolean(generateBlueglowshroom);
  generateGlowshroomtree=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateGlowshroomtree).getBoolean(generateGlowshroomtree);
  dropCotton=configFile.get(ENABLE_DISABLE,""String_Node_Str"",dropCotton).getBoolean(dropCotton);
  dropBarley=configFile.get(ENABLE_DISABLE,""String_Node_Str"",dropBarley).getBoolean(dropBarley);
  try {
    Class.forName(""String_Node_Str"");
    enableWheatRecipe=configFile.get(ENABLE_DISABLE,""String_Node_Str"",false).getBoolean(false);
  }
 catch (  Exception e) {
    enableWheatRecipe=configFile.get(ENABLE_DISABLE,""String_Node_Str"",true).getBoolean(true);
  }
  redwoodSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",redwoodSpawnRarity).getInt(redwoodSpawnRarity);
  mapleRarity=configFile.get(WORLDGEN,""String_Node_Str"",mapleRarity).getInt(mapleRarity);
  silverbellRarity=configFile.get(WORLDGEN,""String_Node_Str"",silverbellRarity).getInt(silverbellRarity);
  amaranthRarity=configFile.get(WORLDGEN,""String_Node_Str"",amaranthRarity).getInt(amaranthRarity);
  tigerRarity=configFile.get(WORLDGEN,""String_Node_Str"",tigerRarity).getInt(tigerRarity);
  willowRarity=configFile.get(WORLDGEN,""String_Node_Str"",willowRarity).getInt(willowRarity);
  eucalyptusSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",eucalyptusSpawnRarity).getInt(eucalyptusSpawnRarity);
  eucalyptusSpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",eucalyptusSpawnRange).getInt(eucalyptusSpawnRange);
  hopseedSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",hopseedSpawnRarity).getInt(hopseedSpawnRarity);
  hopseedSpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",hopseedSpawnRange).getInt(hopseedSpawnRange);
  sakuraSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",sakuraSpawnRarity).getInt(sakuraSpawnRarity);
  sakuraSpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",sakuraSpawnRange).getInt(sakuraSpawnRange);
  bloodwoodSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",bloodwoodSpawnRarity).getInt(bloodwoodSpawnRarity);
  darkwoodSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",darkwoodSpawnRarity).getInt(darkwoodSpawnRarity);
  fusewoodSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",fusewoodSpawnRarity).getInt(fusewoodSpawnRarity);
  ghostwoodSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",ghostwoodSpawnRarity).getInt(ghostwoodSpawnRarity);
  saguaroSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",saguaroSpawnRarity).getInt(saguaroSpawnRarity);
  raspSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",raspSpawnRarity).getInt(raspSpawnRarity);
  raspSpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",raspSpawnRange).getInt(raspSpawnRange);
  blueSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",blueSpawnRarity).getInt(blueSpawnRarity);
  blueSpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",blueSpawnRange).getInt(blueSpawnRange);
  blackSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",blackSpawnRarity).getInt(blackSpawnRarity);
  blackSpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",blackSpawnRange).getInt(blackSpawnRange);
  maloSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",maloSpawnRarity).getInt(maloSpawnRarity);
  maloSpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",maloSpawnRange).getInt(maloSpawnRange);
  blightSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",blightSpawnRarity).getInt(blightSpawnRarity);
  blightSpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",blightSpawnRange).getInt(blightSpawnRange);
  duskSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",duskSpawnRarity).getInt(duskSpawnRarity);
  duskSpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",duskSpawnRange).getInt(duskSpawnRange);
  skySpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",skySpawnRarity).getInt(skySpawnRarity);
  skySpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",skySpawnRange).getInt(skySpawnRange);
  stingSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",stingSpawnRarity).getInt(stingSpawnRarity);
  stingSpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",stingSpawnRange).getInt(stingSpawnRange);
  thornSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",thornSpawnRarity).getInt(thornSpawnRarity);
  seaLevel=configFile.get(""String_Node_Str"",""String_Node_Str"",seaLevel).getInt(seaLevel);
  boolean changed=false;
  if (configFile.hasChanged()) {
    configFile.save();
    changed=true;
  }
  return changed;
}","public static boolean syncConfig(){
  enableRetrogen=configFile.get(""String_Node_Str"",""String_Node_Str"",enableRetrogen).getBoolean(enableRetrogen);
  boolean BoP=false;
  if (Loader.isModLoaded(""String_Node_Str"")) {
    BoP=true;
  }
  babyHeatscarMinimum=configFile.get(""String_Node_Str"",""String_Node_Str"",babyHeatscarMinimum).getInt(babyHeatscarMinimum);
  if (babyHeatscarMinimum < 0) {
    babyHeatscarMinimum=0;
  }
  babyHeatscarMaximum=configFile.get(""String_Node_Str"",""String_Node_Str"",babyHeatscarMaximum).getInt(babyHeatscarMaximum);
  if (babyHeatscarMaximum < 0) {
    babyHeatscarMaximum=0;
  }
  overrideNether=configFile.get(ENABLE_DISABLE,""String_Node_Str"",!BoP).getBoolean(!BoP);
  canRespawnInNether=configFile.get(ENABLE_DISABLE,""String_Node_Str"",canRespawnInNether).getBoolean(canRespawnInNether);
  generateRedwood=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateRedwood).getBoolean(generateRedwood);
  generateMaple=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateMaple).getBoolean(generateMaple);
  generateSilverbell=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateSilverbell).getBoolean(generateSilverbell);
  generateAmaranth=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateAmaranth).getBoolean(generateAmaranth);
  generateTiger=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateTiger).getBoolean(generateTiger);
  generateWillow=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateWillow).getBoolean(generateWillow);
  generateEucalyptus=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateEucalyptus).getBoolean(generateEucalyptus);
  generateHopseed=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateHopseed).getBoolean(generateHopseed);
  generateSakura=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateSakura).getBoolean(generateSakura);
  generateSaguaro=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateSaguaro).getBoolean(generateSaguaro);
  generateBloodwood=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateBloodwood).getBoolean(generateBloodwood);
  generateDarkwood=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateDarkwood).getBoolean(generateDarkwood);
  generateFusewood=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateFusewood).getBoolean(generateFusewood);
  generateGhostwood=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateGhostwood).getBoolean(generateGhostwood);
  generateRaspberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateRaspberries).getBoolean(generateRaspberries);
  generateBlueberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateBlueberries).getBoolean(generateBlueberries);
  generateBlackberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateBlackberries).getBoolean(generateBlackberries);
  generateMaloberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateMaloberries).getBoolean(generateMaloberries);
  generateBlightberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateBlightberries).getBoolean(generateBlightberries);
  generateDuskberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateDuskberries).getBoolean(generateDuskberries);
  generateSkyberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateSkyberries).getBoolean(generateSkyberries);
  generateStingberries=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateStingberries).getBoolean(generateStingberries);
  generateThornvines=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateThornvines).getBoolean(generateThornvines);
  generateBarley=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateBarley).getBoolean(generateBarley);
  generateCotton=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateCotton).getBoolean(generateCotton);
  generateBluebells=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateBluebells).getBoolean(generateBluebells);
  generateGreenglowshroom=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateGreenglowshroom).getBoolean(generateGreenglowshroom);
  generatePurpleglowshroom=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generatePurpleglowshroom).getBoolean(generatePurpleglowshroom);
  generateBlueglowshroom=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateBlueglowshroom).getBoolean(generateBlueglowshroom);
  generateGlowshroomtree=configFile.get(ENABLE_DISABLE,""String_Node_Str"",generateGlowshroomtree).getBoolean(generateGlowshroomtree);
  dropCotton=configFile.get(ENABLE_DISABLE,""String_Node_Str"",dropCotton).getBoolean(dropCotton);
  dropBarley=configFile.get(ENABLE_DISABLE,""String_Node_Str"",dropBarley).getBoolean(dropBarley);
  try {
    Class.forName(""String_Node_Str"");
    enableWheatRecipe=configFile.get(ENABLE_DISABLE,""String_Node_Str"",false).getBoolean(false);
  }
 catch (  Exception e) {
    enableWheatRecipe=configFile.get(ENABLE_DISABLE,""String_Node_Str"",true).getBoolean(true);
  }
  redwoodSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",redwoodSpawnRarity).getInt(redwoodSpawnRarity);
  mapleRarity=configFile.get(WORLDGEN,""String_Node_Str"",mapleRarity).getInt(mapleRarity);
  silverbellRarity=configFile.get(WORLDGEN,""String_Node_Str"",silverbellRarity).getInt(silverbellRarity);
  amaranthRarity=configFile.get(WORLDGEN,""String_Node_Str"",amaranthRarity).getInt(amaranthRarity);
  tigerRarity=configFile.get(WORLDGEN,""String_Node_Str"",tigerRarity).getInt(tigerRarity);
  willowRarity=configFile.get(WORLDGEN,""String_Node_Str"",willowRarity).getInt(willowRarity);
  eucalyptusSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",eucalyptusSpawnRarity).getInt(eucalyptusSpawnRarity);
  eucalyptusSpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",eucalyptusSpawnRange).getInt(eucalyptusSpawnRange);
  hopseedSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",hopseedSpawnRarity).getInt(hopseedSpawnRarity);
  hopseedSpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",hopseedSpawnRange).getInt(hopseedSpawnRange);
  sakuraSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",sakuraSpawnRarity).getInt(sakuraSpawnRarity);
  sakuraSpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",sakuraSpawnRange).getInt(sakuraSpawnRange);
  bloodwoodSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",bloodwoodSpawnRarity).getInt(bloodwoodSpawnRarity);
  darkwoodSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",darkwoodSpawnRarity).getInt(darkwoodSpawnRarity);
  fusewoodSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",fusewoodSpawnRarity).getInt(fusewoodSpawnRarity);
  ghostwoodSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",ghostwoodSpawnRarity).getInt(ghostwoodSpawnRarity);
  saguaroSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",saguaroSpawnRarity).getInt(saguaroSpawnRarity);
  raspberrySpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",raspberrySpawnRarity).getInt(raspberrySpawnRarity);
  raspberrySpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",raspberrySpawnRange).getInt(raspberrySpawnRange);
  blueberrySpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",blueberrySpawnRarity).getInt(blueberrySpawnRarity);
  blueberrySpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",blueberrySpawnRange).getInt(blueberrySpawnRange);
  blackberrySpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",blackberrySpawnRarity).getInt(blackberrySpawnRarity);
  blackberrySpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",blackberrySpawnRange).getInt(blackberrySpawnRange);
  maloberrySpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",maloberrySpawnRarity).getInt(maloberrySpawnRarity);
  maloberrySpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",maloberrySpawnRange).getInt(maloberrySpawnRange);
  blightberrySpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",blightberrySpawnRarity).getInt(blightberrySpawnRarity);
  blightberrySpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",blightberrySpawnRange).getInt(blightberrySpawnRange);
  duskberrySpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",duskberrySpawnRarity).getInt(duskberrySpawnRarity);
  duskberrySpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",duskberrySpawnRange).getInt(duskberrySpawnRange);
  skyberrySpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",skyberrySpawnRarity).getInt(skyberrySpawnRarity);
  skyberrySpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",skyberrySpawnRange).getInt(skyberrySpawnRange);
  stingberrySpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",stingberrySpawnRarity).getInt(stingberrySpawnRarity);
  stingberrySpawnRange=configFile.get(WORLDGEN,""String_Node_Str"",stingberrySpawnRange).getInt(stingberrySpawnRange);
  thornSpawnRarity=configFile.get(WORLDGEN,""String_Node_Str"",thornSpawnRarity).getInt(thornSpawnRarity);
  seaLevel=configFile.get(""String_Node_Str"",""String_Node_Str"",seaLevel).getInt(seaLevel);
  boolean changed=false;
  if (configFile.hasChanged()) {
    configFile.save();
    changed=true;
  }
  return changed;
}",0.815567222095412
17662,"public static ResourceLocation getItemLocation(Item item){
  Object o=GameData.getItemRegistry().getNameForObject(item);
  if (o == null) {
    Natura.log.error(""String_Node_Str"" + item.getUnlocalizedName());
    return null;
  }
  return (ResourceLocation)o;
}","@SuppressWarnings(""String_Node_Str"") public static ResourceLocation getItemLocation(Item item){
  Object o=GameData.getItemRegistry().getNameForObject(item);
  if (o == null) {
    Natura.log.error(""String_Node_Str"" + item.getUnlocalizedName());
    return null;
  }
  return (ResourceLocation)o;
}",0.9338103756708408
17663,"private void registerRecipes(){
  List<IRecipe> recipes=CraftingManager.getInstance().getRecipeList();
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.MAPLE.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog,1,BlockOverworldLog.LogType.MAPLE.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.SILVERBELL.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog,1,BlockOverworldLog.LogType.SILVERBELL.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.AMARANTH.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog,1,BlockOverworldLog.LogType.AMARANTH.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.TIGER.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog,1,BlockOverworldLog.LogType.TIGER.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.WILLOW.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog2,1,BlockOverworldLog2.LogType.WILLOW.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.EUCALYPTUS.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog2,1,BlockOverworldLog2.LogType.EUCALYPTUS.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.HOPSEED.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog2,1,BlockOverworldLog2.LogType.HOPSEED.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.SAKURA.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog2,1,BlockOverworldLog2.LogType.SAKURA.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.REDWOOD.getMeta()),""String_Node_Str"",'w',new ItemStack(redwoodLog,1,BlockRedwoodLog.RedwoodType.HEART.getMeta()));
  addSlabRecipe(overworldSlab,BlockOverworldSlab.PlankType.AMARANTH.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.AMARANTH.getMeta()));
  addSlabRecipe(overworldSlab,BlockOverworldSlab.PlankType.MAPLE.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.MAPLE.getMeta()));
  addSlabRecipe(overworldSlab,BlockOverworldSlab.PlankType.SILVERBELL.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.SILVERBELL.getMeta()));
  addSlabRecipe(overworldSlab,BlockOverworldSlab.PlankType.TIGER.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.TIGER.getMeta()));
  addSlabRecipe(overworldSlab,BlockOverworldSlab.PlankType.WILLOW.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.WILLOW.getMeta()));
  addSlabRecipe(overworldSlab2,BlockOverworldSlab2.PlankType.EUCALYPTUS.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.EUCALYPTUS.getMeta()));
  addSlabRecipe(overworldSlab2,BlockOverworldSlab2.PlankType.HOPSEED.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.HOPSEED.getMeta()));
  addSlabRecipe(overworldSlab2,BlockOverworldSlab2.PlankType.REDWOOD.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.REDWOOD.getMeta()));
  addSlabRecipe(overworldSlab2,BlockOverworldSlab2.PlankType.SAKURA.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.SAKURA.getMeta()));
  addStairRecipe(overworldStairsAmaranth,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.AMARANTH.getMeta()));
  addStairRecipe(overworldStairsMaple,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.MAPLE.getMeta()));
  addStairRecipe(overworldStairsSilverbell,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.SILVERBELL.getMeta()));
  addStairRecipe(overworldStairsTiger,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.TIGER.getMeta()));
  addStairRecipe(overworldStairsWillow,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.WILLOW.getMeta()));
  addStairRecipe(overworldStairsEucalyptus,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.EUCALYPTUS.getMeta()));
  addStairRecipe(overworldStairsHopseed,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.HOPSEED.getMeta()));
  addStairRecipe(overworldStairsRedwood,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.REDWOOD.getMeta()));
  addStairRecipe(overworldStairsSakura,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.SAKURA.getMeta()));
  GameRegistry.addRecipe(new ItemStack(coloredGrass,1,BlockColoredGrass.GrassType.TOPIARY.getMeta()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',new ItemStack(Items.WHEAT_SEEDS),'#',new ItemStack(Blocks.DIRT));
  GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(coloredGrass,1,BlockColoredGrass.GrassType.BLUEGRASS.getMeta()),new ItemStack(coloredGrass,1,0),""String_Node_Str""));
  GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(coloredGrass,1,BlockColoredGrass.GrassType.AUTUMNAL.getMeta()),new ItemStack(coloredGrass,1,0),""String_Node_Str""));
  addSlabRecipe(coloredGrassSlab,BlockColoredGrass.GrassType.TOPIARY.getMeta(),new ItemStack(coloredGrass,1,BlockColoredGrass.GrassType.TOPIARY.getMeta()));
  addSlabRecipe(coloredGrassSlab,BlockColoredGrass.GrassType.BLUEGRASS.getMeta(),new ItemStack(coloredGrass,1,BlockColoredGrass.GrassType.BLUEGRASS.getMeta()));
  addSlabRecipe(coloredGrassSlab,BlockColoredGrass.GrassType.AUTUMNAL.getMeta(),new ItemStack(coloredGrass,1,BlockColoredGrass.GrassType.AUTUMNAL.getMeta()));
}","private void registerRecipes(){
  @SuppressWarnings(""String_Node_Str"") List<IRecipe> recipes=CraftingManager.getInstance().getRecipeList();
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.MAPLE.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog,1,BlockOverworldLog.LogType.MAPLE.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.SILVERBELL.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog,1,BlockOverworldLog.LogType.SILVERBELL.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.AMARANTH.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog,1,BlockOverworldLog.LogType.AMARANTH.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.TIGER.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog,1,BlockOverworldLog.LogType.TIGER.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.WILLOW.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog2,1,BlockOverworldLog2.LogType.WILLOW.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.EUCALYPTUS.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog2,1,BlockOverworldLog2.LogType.EUCALYPTUS.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.HOPSEED.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog2,1,BlockOverworldLog2.LogType.HOPSEED.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.SAKURA.getMeta()),""String_Node_Str"",'w',new ItemStack(overworldLog2,1,BlockOverworldLog2.LogType.SAKURA.getMeta()));
  GameRegistry.addRecipe(new ItemStack(overworldPlanks,4,BlockOverworldPlanks.PlankType.REDWOOD.getMeta()),""String_Node_Str"",'w',new ItemStack(redwoodLog,1,BlockRedwoodLog.RedwoodType.HEART.getMeta()));
  addSlabRecipe(overworldSlab,BlockOverworldSlab.PlankType.AMARANTH.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.AMARANTH.getMeta()));
  addSlabRecipe(overworldSlab,BlockOverworldSlab.PlankType.MAPLE.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.MAPLE.getMeta()));
  addSlabRecipe(overworldSlab,BlockOverworldSlab.PlankType.SILVERBELL.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.SILVERBELL.getMeta()));
  addSlabRecipe(overworldSlab,BlockOverworldSlab.PlankType.TIGER.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.TIGER.getMeta()));
  addSlabRecipe(overworldSlab,BlockOverworldSlab.PlankType.WILLOW.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.WILLOW.getMeta()));
  addSlabRecipe(overworldSlab2,BlockOverworldSlab2.PlankType.EUCALYPTUS.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.EUCALYPTUS.getMeta()));
  addSlabRecipe(overworldSlab2,BlockOverworldSlab2.PlankType.HOPSEED.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.HOPSEED.getMeta()));
  addSlabRecipe(overworldSlab2,BlockOverworldSlab2.PlankType.REDWOOD.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.REDWOOD.getMeta()));
  addSlabRecipe(overworldSlab2,BlockOverworldSlab2.PlankType.SAKURA.getMeta(),new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.SAKURA.getMeta()));
  addStairRecipe(overworldStairsAmaranth,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.AMARANTH.getMeta()));
  addStairRecipe(overworldStairsMaple,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.MAPLE.getMeta()));
  addStairRecipe(overworldStairsSilverbell,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.SILVERBELL.getMeta()));
  addStairRecipe(overworldStairsTiger,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.TIGER.getMeta()));
  addStairRecipe(overworldStairsWillow,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.WILLOW.getMeta()));
  addStairRecipe(overworldStairsEucalyptus,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.EUCALYPTUS.getMeta()));
  addStairRecipe(overworldStairsHopseed,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.HOPSEED.getMeta()));
  addStairRecipe(overworldStairsRedwood,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.REDWOOD.getMeta()));
  addStairRecipe(overworldStairsSakura,new ItemStack(overworldPlanks,1,BlockOverworldPlanks.PlankType.SAKURA.getMeta()));
  GameRegistry.addRecipe(new ItemStack(coloredGrass,1,BlockColoredGrass.GrassType.TOPIARY.getMeta()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',new ItemStack(Items.WHEAT_SEEDS),'#',new ItemStack(Blocks.DIRT));
  GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(coloredGrass,1,BlockColoredGrass.GrassType.BLUEGRASS.getMeta()),new ItemStack(coloredGrass,1,0),""String_Node_Str""));
  GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(coloredGrass,1,BlockColoredGrass.GrassType.AUTUMNAL.getMeta()),new ItemStack(coloredGrass,1,0),""String_Node_Str""));
  addSlabRecipe(coloredGrassSlab,BlockColoredGrass.GrassType.TOPIARY.getMeta(),new ItemStack(coloredGrass,1,BlockColoredGrass.GrassType.TOPIARY.getMeta()));
  addSlabRecipe(coloredGrassSlab,BlockColoredGrass.GrassType.BLUEGRASS.getMeta(),new ItemStack(coloredGrass,1,BlockColoredGrass.GrassType.BLUEGRASS.getMeta()));
  addSlabRecipe(coloredGrassSlab,BlockColoredGrass.GrassType.AUTUMNAL.getMeta(),new ItemStack(coloredGrass,1,BlockColoredGrass.GrassType.AUTUMNAL.getMeta()));
}",0.9967031987882028
17664,"@Subscribe public void postInit(FMLPostInitializationEvent event){
  GameRegistry.registerWorldGenerator(TreeGenerator.INSTANCE,25);
  proxy.postInit();
}","@Subscribe public void postInit(FMLPostInitializationEvent event){
  GameRegistry.registerWorldGenerator(TreeGenerator.INSTANCE,25);
  GameRegistry.registerWorldGenerator(BerryBushGenerator.INSTANCE,25);
  proxy.postInit();
}",0.8126649076517151
17665,"public boolean shouldGenerateInDim(int i){
  return !PHNatura.cloudBlacklist.contains(i);
}","public boolean shouldGenerateInDim(int dim){
  for (  int i : PHNatura.cloudBlacklist) {
    if (dim == i) {
      return false;
    }
  }
  return true;
}",0.6341463414634146
17666,"public boolean shouldGenerateSulfurInDim(int i){
  return !PHNatura.sulfurCloudBlacklist.contains(i);
}","public boolean shouldGenerateSulfurInDim(int dim){
  for (  int i : PHNatura.sulfurCloudBlacklist) {
    if (dim == i) {
      return false;
    }
  }
  return true;
}",0.6666666666666666
17667,"public boolean shouldGenerateDarkInDim(int i){
  return !PHNatura.darkCloudBlacklist.contains(i);
}","public boolean shouldGenerateDarkInDim(int dim){
  for (  int i : PHNatura.darkCloudBlacklist) {
    if (dim == i) {
      return false;
    }
  }
  return true;
}",0.6564885496183206
17668,"public NaturaBow(int damage,String type){
  super();
  this.setMaxDamage(damage);
  this.woodType=type;
  this.setCreativeTab(NaturaTab.tab);
}","public NaturaBow(int damage,String type){
  super();
  this.setMaxDamage(damage);
  this.woodType=type;
  this.setCreativeTab(NaturaTab.tab);
  this.setFull3D();
}",0.934640522875817
17669,"@Override public ArrayList<ItemStack> getDrops(World world,int x,int y,int z,int metadata,int fortune){
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  ret.add(new ItemStack(this));
  return ret;
}","@Override public ArrayList<ItemStack> getDrops(World world,int x,int y,int z,int metadata,int fortune){
  ArrayList<ItemStack> ret=Lists.newArrayList();
  ret.add(new ItemStack(this,1,metadata % 4));
  return ret;
}",0.7743467933491687
17670,"@Override public ArrayList<ItemStack> getDrops(World world,int x,int y,int z,int metadata,int fortune){
  return (ArrayList<ItemStack>)Arrays.asList(new ItemStack(this));
}","@Override public ArrayList<ItemStack> getDrops(World world,int x,int y,int z,int metadata,int fortune){
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  ret.add(new ItemStack(this));
  return ret;
}",0.6137566137566137
17671,"@EventHandler public void preInit(FMLPreInitializationEvent evt){
  MinecraftForge.EVENT_BUS.register(this);
  PluginController.getController().registerBuiltins();
  PHNatura.initProps(evt.getSuggestedConfigurationFile());
  NaturaTab.tab=new TabTools(""String_Node_Str"");
  NaturaTab.woodTab=new TabTools(""String_Node_Str"");
  NaturaTab.netherTab=new TabTools(""String_Node_Str"");
  content=new NContent();
  content.preInit();
  content.addOredictSupport();
  NaturaTab.tab.init(new ItemStack(NContent.boneBag,0));
  NaturaTab.woodTab.init(new ItemStack(NContent.floraSapling.getItem(),3));
  NaturaTab.netherTab.init(new ItemStack(NContent.floraSapling.getItem(null,9,0,0),5));
  PluginController.getController().preInit();
}","@EventHandler public void preInit(FMLPreInitializationEvent evt){
  MinecraftForge.EVENT_BUS.register(this);
  PluginController.getController().registerBuiltins();
  PHNatura.initProps(evt.getSuggestedConfigurationFile());
  NaturaTab.tab=new TabTools(""String_Node_Str"");
  NaturaTab.woodTab=new TabTools(""String_Node_Str"");
  NaturaTab.netherTab=new TabTools(""String_Node_Str"");
  content=new NContent();
  content.preInit();
  content.addOredictSupport();
  NaturaTab.tab.init(new ItemStack(NContent.boneBag,0));
  NaturaTab.woodTab.init(new ItemStack(NContent.floraSapling,1,3));
  NaturaTab.netherTab.init(new ItemStack(NContent.floraSapling,1,5));
  PluginController.getController().preInit();
}",0.9775596072931276
17672,"/** 
 * Returns the ID of the items to drop on destruction.
 */
@Override public Item getItemDropped(int par1,Random par2Random,int par3){
  return NContent.glowshroom.getItem(null,0,0,0);
}","/** 
 * Returns the ID of the items to drop on destruction.
 */
@Override public Item getItemDropped(int par1,Random par2Random,int par3){
  return Item.getItemFromBlock(NContent.glowshroom);
}",0.8929503916449086
17673,"/** 
 * Returns the ID of the items to drop on destruction.
 */
@Override public Item getItemDropped(int p_149650_1_,Random p_149650_2_,int p_149650_3_){
  return NContent.floraSapling.getItem();
}","/** 
 * Returns the ID of the items to drop on destruction.
 */
@Override public Item getItemDropped(int p_149650_1_,Random p_149650_2_,int p_149650_3_){
  return Item.getItemFromBlock(NContent.floraSapling);
}",0.9238329238329238
17674,"@Override public Item getItemDropped(int metadata,Random random,int fortune){
  if (metadata % 4 == 2)   return NContent.potashApple;
  return NContent.floraSapling.getItem();
}","@Override public Item getItemDropped(int metadata,Random random,int fortune){
  if (metadata % 4 == 2)   return NContent.potashApple;
  return Item.getItemFromBlock(NContent.floraSapling);
}",0.9155313351498636
17675,"@Override public Item getItemDropped(int meta,Random random,int fortune){
  if (meta % 4 == 3)   return NContent.rareSapling.getItem(null,0,0,0);
  return NContent.floraSapling.getItem();
}","@Override public Item getItemDropped(int meta,Random random,int fortune){
  if (meta % 4 == 3)   return Item.getItemFromBlock(NContent.rareSapling);
  return Item.getItemFromBlock(NContent.floraSapling);
}",0.817258883248731
17676,"@Override public Item getItemDropped(int p_149650_1_,Random p_149650_2_,int p_149650_3_){
  return NContent.rareSapling.getItem(null,0,0,0);
}","@Override public Item getItemDropped(int p_149650_1_,Random p_149650_2_,int p_149650_3_){
  return Item.getItemFromBlock(NContent.rareSapling);
}",0.8571428571428571
17677,"@Override public void registerRenderer(){
  RenderingRegistry.registerBlockHandler(new BerryRender());
  RenderingRegistry.registerBlockHandler(new SaguaroRenderer());
  RenderingRegistry.registerBlockHandler(new CropRender());
  RenderingRegistry.registerBlockHandler(new FenceRender());
  RenderingRegistry.registerBlockHandler(new HopperRender());
  RenderingRegistry.registerBlockHandler(new LeverRender());
  MinecraftForge.EVENT_BUS.register(new NCropsTickHandler());
  RenderingRegistry.registerEntityRenderingHandler(ImpEntity.class,new ImpRender(new ImpModel(),0f));
  RenderingRegistry.registerEntityRenderingHandler(HeatscarSpider.class,new FlameSpiderRender());
  RenderingRegistry.registerEntityRenderingHandler(NitroCreeper.class,new NitroCreeperRender());
  RenderingRegistry.registerEntityRenderingHandler(FusewoodArrow.class,new FusewoodArrowRender());
  RenderingRegistry.registerEntityRenderingHandler(BabyHeatscarSpider.class,new FlameSpiderBabyRender());
  Minecraft mc=Minecraft.getMinecraft();
  try {
    GrassColorizerAlternate.setBlueGrassBiomeColorizer(TextureUtil.readImageData(mc.getResourceManager(),bluegrass));
    GrassColorizerAlternate.setOrangeGrassBiomeColorizer(TextureUtil.readImageData(mc.getResourceManager(),orangegrass));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void registerRenderer(){
  RenderingRegistry.registerBlockHandler(new BerryRender());
  RenderingRegistry.registerBlockHandler(new SaguaroRenderer());
  RenderingRegistry.registerBlockHandler(new CropRender());
  RenderingRegistry.registerBlockHandler(new FenceRender());
  RenderingRegistry.registerBlockHandler(new HopperRender());
  RenderingRegistry.registerBlockHandler(new LeverRender());
  FMLCommonHandler.instance().bus().register(new NCropsTickHandler());
  RenderingRegistry.registerEntityRenderingHandler(ImpEntity.class,new ImpRender(new ImpModel(),0f));
  RenderingRegistry.registerEntityRenderingHandler(HeatscarSpider.class,new FlameSpiderRender());
  RenderingRegistry.registerEntityRenderingHandler(NitroCreeper.class,new NitroCreeperRender());
  RenderingRegistry.registerEntityRenderingHandler(FusewoodArrow.class,new FusewoodArrowRender());
  RenderingRegistry.registerEntityRenderingHandler(BabyHeatscarSpider.class,new FlameSpiderBabyRender());
  Minecraft mc=Minecraft.getMinecraft();
  try {
    GrassColorizerAlternate.setBlueGrassBiomeColorizer(TextureUtil.readImageData(mc.getResourceManager(),bluegrass));
    GrassColorizerAlternate.setOrangeGrassBiomeColorizer(TextureUtil.readImageData(mc.getResourceManager(),orangegrass));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.979299962363568
17678,"public void getSubItems(int id,CreativeTabs tab,List list){
switch (armorType) {
case 0:
    list.add(NContent.impHelmetStack.copy());
  break;
case 1:
list.add(NContent.impJerkinStack.copy());
break;
case 2:
list.add(NContent.impLeggingsStack.copy());
break;
case 3:
list.add(NContent.impBootsStack.copy());
break;
}
}","@Override public void getSubItems(Item id,CreativeTabs tab,List list){
switch (armorType) {
case 0:
    list.add(NContent.impHelmetStack.copy());
  break;
case 1:
list.add(NContent.impJerkinStack.copy());
break;
case 2:
list.add(NContent.impLeggingsStack.copy());
break;
case 3:
list.add(NContent.impBootsStack.copy());
break;
}
}",0.9738058551617874
17679,"public NLeaves(){
  super();
  this.setTickRandomly(true);
  this.setHardness(0.2F);
  this.setLightOpacity(1);
  this.setStepSound(Block.soundTypeGrass);
  this.setBlockName(""String_Node_Str"");
  setCreativeTab(CreativeTabs.tabDecorations);
  Blocks.fire.setFireInfo(this,30,60);
  this.setCreativeTab(NaturaTab.tab);
}","public NLeaves(){
  super();
  this.setTickRandomly(true);
  this.setHardness(0.2F);
  this.setLightOpacity(1);
  this.setStepSound(Block.soundTypeGrass);
  this.setBlockName(""String_Node_Str"");
  setCreativeTab(CreativeTabs.tabDecorations);
  this.setCreativeTab(NaturaTab.tab);
}",0.9351081530782028
17680,"@Override public ArrayList<ItemStack> getDrops(World world,int x,int y,int z,int metadata,int fortune){
  return (ArrayList<ItemStack>)Arrays.asList(new ItemStack(this));
}","@Override public ArrayList<ItemStack> getDrops(World world,int x,int y,int z,int metadata,int fortune){
  ArrayList<ItemStack> i=Lists.newArrayList();
  i.add(new ItemStack(this));
  return i;
}",0.8688524590163934
17681,"public HeatSand(){
  super();
  this.setHardness(3f);
  this.setStepSound(Block.soundTypeSand);
  this.setCreativeTab(NaturaTab.tab);
  MinecraftForge.setBlockHarvestLevel(this,""String_Node_Str"",0);
}","public HeatSand(){
  super();
  this.setHardness(3f);
  this.setStepSound(Block.soundTypeSand);
  this.setCreativeTab(NaturaTab.tab);
  this.setHarvestLevel(""String_Node_Str"",0);
}",0.9315789473684212
17682,"public boolean canConnectFenceTo(IBlockAccess par1IBlockAccess,int par2,int par3,int par4){
  Block l=par1IBlockAccess.getBlock(par2,par3,par4);
  if (l != this) {
    if (l == null)     return false;
    if (l.getMaterial().isOpaque() && l.renderAsNormalBlock())     return l.getMaterial() != Material.pumpkin;
    return (l instanceof BlockFenceGate);
  }
 else {
    return true;
  }
}","public boolean canConnectFenceTo(IBlockAccess par1IBlockAccess,int par2,int par3,int par4){
  Block l=par1IBlockAccess.getBlock(par2,par3,par4);
  if (l != this) {
    if (l == null)     return false;
    if (l.getMaterial().isOpaque() && l.renderAsNormalBlock())     return l.getMaterial() != Material.plants;
    return (l instanceof BlockFenceGate);
  }
 else {
    return true;
  }
}",0.9858064516129031
17683,"/** 
 * Allows the entity to update its state. Overridden in most subclasses, e.g. the mob spawner uses this to count ticks and creates a new spawn inside its implementation.
 */
public void updateEntity(){
  boolean flag=this.furnaceBurnTime > 0;
  boolean flag1=false;
  if (this.furnaceBurnTime > 0) {
    --this.furnaceBurnTime;
  }
  if (!this.worldObj.isRemote) {
    if (this.furnaceBurnTime == 0 && this.canSmelt()) {
      this.currentItemBurnTime=this.furnaceBurnTime=getFuelTime(this.inventory[1]) * 2;
      if (this.furnaceBurnTime > 0) {
        flag1=true;
        if (this.inventory[1] != null) {
          --this.inventory[1].stackSize;
          if (this.inventory[1].stackSize == 0) {
            this.inventory[1]=this.inventory[1].getItem().getContainerItemStack(inventory[1]);
          }
        }
      }
    }
    if (this.isBurning() && this.canSmelt()) {
      ++this.furnaceCookTime;
      if (this.furnaceCookTime == 200) {
        this.furnaceCookTime=0;
        this.smeltItem();
        if (!active) {
          this.active=true;
          worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
        }
        flag1=true;
      }
    }
 else {
      this.furnaceCookTime=0;
      if (active) {
        this.active=false;
        worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
      }
    }
    if (flag != this.furnaceBurnTime > 0) {
      flag1=true;
      this.active=true;
      worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
    }
  }
  if (flag1) {
    this.onInventoryChanged();
  }
}","/** 
 * Allows the entity to update its state. Overridden in most subclasses, e.g. the mob spawner uses this to count ticks and creates a new spawn inside its implementation.
 */
public void updateEntity(){
  boolean flag=this.furnaceBurnTime > 0;
  boolean flag1=false;
  if (this.furnaceBurnTime > 0) {
    --this.furnaceBurnTime;
  }
  if (!this.worldObj.isRemote) {
    if (this.furnaceBurnTime == 0 && this.canSmelt()) {
      this.currentItemBurnTime=this.furnaceBurnTime=getFuelTime(this.inventory[1]) * 2;
      if (this.furnaceBurnTime > 0) {
        flag1=true;
        if (this.inventory[1] != null) {
          --this.inventory[1].stackSize;
          if (this.inventory[1].stackSize == 0) {
            this.inventory[1]=this.inventory[1].getItem().getContainerItem(inventory[1]);
          }
        }
      }
    }
    if (this.isBurning() && this.canSmelt()) {
      ++this.furnaceCookTime;
      if (this.furnaceCookTime == 200) {
        this.furnaceCookTime=0;
        this.smeltItem();
        if (!active) {
          this.active=true;
          worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
        }
        flag1=true;
      }
    }
 else {
      this.furnaceCookTime=0;
      if (active) {
        this.active=false;
        worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
      }
    }
    if (flag != this.furnaceBurnTime > 0) {
      flag1=true;
      this.active=true;
      worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
    }
  }
  if (flag1) {
    this.markDirty();
  }
}",0.990144546649146
17684,"@Override public boolean canSustainLeaves(World world,int x,int y,int z){
  return true;
}","@Override public boolean canSustainLeaves(IBlockAccess world,int x,int y,int z){
  return true;
}",0.9197860962566844
17685,"public void onBlockHarvested(World world,int x,int y,int z,int meta,EntityPlayer player){
  if (meta % 4 == 1) {
    if (world.difficultySetting > 2)     world.createExplosion(null,x,y,z,1.75f,false);
 else     world.createExplosion(null,x,y,z,2f,false);
  }
}","public void onBlockHarvested(World world,int x,int y,int z,int meta,EntityPlayer player){
  if (meta % 4 == 1) {
    if (world.difficultySetting.getDifficultyId() > 2)     world.createExplosion(null,x,y,z,1.75f,false);
 else     world.createExplosion(null,x,y,z,2f,false);
  }
}",0.966542750929368
17686,"@Override public boolean isWood(World world,int x,int y,int z){
  return true;
}","@Override public boolean isWood(IBlockAccess world,int x,int y,int z){
  return true;
}",0.9101796407185628
17687,"@EventHandler public void init(FMLInitializationEvent evt){
  GameRegistry.registerWorldGenerator(crops=new BaseCropWorldgen());
  GameRegistry.registerWorldGenerator(clouds=new BaseCloudWorldgen());
  GameRegistry.registerWorldGenerator(trees=new BaseTreeWorldgen());
  NaturaTab.init(content.wheatBag);
  proxy.registerRenderer();
  proxy.addNames();
  NetworkRegistry.instance().registerGuiHandler(instance,new NGuiHandler());
  GameRegistry.registerFuelHandler(content);
  if (PHNatura.overrideNether) {
    DimensionManager.unregisterProviderType(-1);
    DimensionManager.registerProviderType(-1,NetheriteWorldProvider.class,true);
  }
  MinecraftForge.EVENT_BUS.register(WorldHandler.instance);
  if (retrogen) {
    TickRegistry.registerTickHandler(new TickHandlerWorld(),Side.SERVER);
  }
  OreDictionary.registerOre(""String_Node_Str"",new ItemStack(NContent.thornVines));
  random.setSeed(2 ^ 16 + 2 ^ 8 + (4 * 3 * 271));
  PluginController.getController().init();
}","@EventHandler public void init(FMLInitializationEvent evt){
  GameRegistry.registerWorldGenerator(crops=new BaseCropWorldgen(),0);
  GameRegistry.registerWorldGenerator(clouds=new BaseCloudWorldgen(),0);
  GameRegistry.registerWorldGenerator(trees=new BaseTreeWorldgen(),0);
  NaturaTab.init(content.wheatBag);
  proxy.registerRenderer();
  proxy.addNames();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new NGuiHandler());
  GameRegistry.registerFuelHandler(content);
  if (PHNatura.overrideNether) {
    DimensionManager.unregisterProviderType(-1);
    DimensionManager.registerProviderType(-1,NetheriteWorldProvider.class,true);
  }
  MinecraftForge.EVENT_BUS.register(WorldHandler.instance);
  if (retrogen) {
    MinecraftForge.EVENT_BUS.register(new TickHandlerWorld());
  }
  OreDictionary.registerOre(""String_Node_Str"",new ItemStack(NContent.thornVines));
  random.setSeed(2 ^ 16 + 2 ^ 8 + (4 * 3 * 271));
  PluginController.getController().init();
}",0.94390118373649
17688,"@SubscribeEvent public void interactEvent(EntityInteractEvent event){
  if (event.target instanceof EntityCow || event.target instanceof EntitySheep) {
    ItemStack equipped=event.entityPlayer.getCurrentEquippedItem();
    EntityAnimal creature=(EntityAnimal)event.target;
    if (equipped != null && equipped.getItem() == NContent.plantItem && equipped.getItemDamage() == 0 && creature.getGrowingAge() == 0 && creature.inLove <= 0) {
      EntityPlayer player=event.entityPlayer;
      if (!player.capabilities.isCreativeMode) {
        --equipped.stackSize;
        if (equipped.stackSize <= 0) {
          player.inventory.setInventorySlotContents(player.inventory.currentItem,(ItemStack)null);
        }
      }
      creature.inLove=600;
      creature.setTarget(null);
      for (int i=0; i < 7; ++i) {
        double d0=random.nextGaussian() * 0.02D;
        double d1=random.nextGaussian() * 0.02D;
        double d2=random.nextGaussian() * 0.02D;
        creature.worldObj.spawnParticle(""String_Node_Str"",creature.posX + (double)(random.nextFloat() * creature.width * 2.0F) - (double)creature.width,creature.posY + 0.5D + (double)(random.nextFloat() * creature.height),creature.posZ + (double)(random.nextFloat() * creature.width * 2.0F) - (double)creature.width,d0,d1,d2);
      }
    }
  }
}","@SubscribeEvent public void interactEvent(EntityInteractEvent event){
  if (event.target instanceof EntityCow || event.target instanceof EntitySheep) {
    ItemStack equipped=event.entityPlayer.getCurrentEquippedItem();
    EntityAnimal creature=(EntityAnimal)event.target;
    if (equipped != null && equipped.getItem() == NContent.plantItem && equipped.getItemDamage() == 0 && creature.getGrowingAge() == 0 && creature.isInLove()) {
      EntityPlayer player=event.entityPlayer;
      if (!player.capabilities.isCreativeMode) {
        --equipped.stackSize;
        if (equipped.stackSize <= 0) {
          player.inventory.setInventorySlotContents(player.inventory.currentItem,(ItemStack)null);
        }
      }
      creature.func_146082_f(event.entityPlayer);
      creature.setTarget(null);
      for (int i=0; i < 7; ++i) {
        double d0=random.nextGaussian() * 0.02D;
        double d1=random.nextGaussian() * 0.02D;
        double d2=random.nextGaussian() * 0.02D;
        creature.worldObj.spawnParticle(""String_Node_Str"",creature.posX + (double)(random.nextFloat() * creature.width * 2.0F) - (double)creature.width,creature.posY + 0.5D + (double)(random.nextFloat() * creature.height),creature.posZ + (double)(random.nextFloat() * creature.width * 2.0F) - (double)creature.width,d0,d1,d2);
      }
    }
  }
}",0.9817351598173516
17689,"public FlowerBlock(){
  super(0);
  setCreativeTab(CreativeTabs.tabDecorations);
  this.setStepSound(soundTypeGrass);
}","public FlowerBlock(){
  super(0);
  setCreativeTab(CreativeTabs.tabDecorations);
  this.setStepSound(soundTypeGrass);
  ObfuscationReflectionHelper.setPrivateValue(BlockFlower.class,this,new IIcon[1],""String_Node_Str"");
}",0.7
17690,"@Override public Item getItemDropped(int meta,Random random,int fortune){
  if (meta % 4 == 3)   return NContent.rareSapling.getItem();
  return NContent.floraSapling.getItem();
}","@Override public Item getItemDropped(int meta,Random random,int fortune){
  if (meta % 4 == 3)   return NContent.rareSapling.getItem(null,0,0,0);
  return NContent.floraSapling.getItem();
}",0.9728260869565216
17691,"@Override public Item getItemDropped(int p_149650_1_,Random p_149650_2_,int p_149650_3_){
  return NContent.rareSapling.getItem();
}","@Override public Item getItemDropped(int p_149650_1_,Random p_149650_2_,int p_149650_3_){
  return NContent.rareSapling.getItem(null,0,0,0);
}",0.9635036496350364
17692,"public void preInit(){
  spawnEgg=new SpawnEgg().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(spawnEgg,""String_Node_Str"");
  plantItem=new PlantItem().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(plantItem,""String_Node_Str"");
  crops=new CropBlock();
  GameRegistry.registerBlock(crops,""String_Node_Str"");
  seeds=new NaturaSeeds(crops,Blocks.farmland).setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(seeds,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(seeds,1,0));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(seeds,1,1));
  waterDrop=new CactusJuice(false).setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(waterDrop,""String_Node_Str"");
  wheatBag=new SeedBag(Blocks.wheat,0,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(wheatBag,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(wheatBag,1,0));
  barleyBag=new SeedBag(crops,0,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(barleyBag,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(barleyBag,1,0));
  potatoBag=new SeedBag(Blocks.potatoes,0,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(potatoBag,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(potatoBag,1,0));
  carrotBag=new SeedBag(Blocks.carrots,0,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(carrotBag,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(carrotBag,1,0));
  netherWartBag=new SeedBag(Blocks.nether_wart,0,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(netherWartBag,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(netherWartBag,1,0));
  cottonBag=new SeedBag(crops,4,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(cottonBag,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(cottonBag,1,0));
  boneBag=new BoneBag(""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(boneBag,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(boneBag,1,0));
  netherBerryItem=new NetherBerryItem(1).setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(netherBerryItem,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(netherBerryItem,1,0));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(netherBerryItem,1,1));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(netherBerryItem,1,2));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(netherBerryItem,1,3));
  berryItem=new BerryItem(1).setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(berryItem,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(berryItem,1,0));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(berryItem,1,1));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(berryItem,1,2));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(berryItem,1,3));
  berryMedley=new BerryMedley(5).setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(berryMedley,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(berryMedley,1,0));
  berryBush=new BerryBush();
  GameRegistry.registerBlock(berryBush,BerryBushItem.class,""String_Node_Str"");
  netherBerryBush=new NetherBerryBush();
  GameRegistry.registerBlock(netherBerryBush,NetherBerryBushItem.class,""String_Node_Str"");
  cloud=new CloudBlock();
  GameRegistry.registerBlock(cloud,CloudItem.class,""String_Node_Str"");
  tree=new TreeBlock().setBlockName(""String_Node_Str"");
  redwood=new SimpleLog().setBlockName(""String_Node_Str"");
  planks=new Planks().setBlockName(""String_Node_Str"");
  floraLeaves=(NLeaves)new NLeaves().setBlockName(""String_Node_Str"");
  floraLeavesNoColor=(NLeaves)new NLeavesNocolor().setBlockName(""String_Node_Str"");
  floraSapling=((NSaplingBlock)new NSaplingBlock().setBlockName(""String_Node_Str""));
  willow=new WillowBlock().setBlockName(""String_Node_Str"");
  saguaro=new SaguaroBlock().setBlockName(""String_Node_Str"");
  seedFood=new SeedFood(3,0.3f,saguaro).setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(seedFood,""String_Node_Str"");
  doorItem=new NDoorItem().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(doorItem,""String_Node_Str"");
  redwoodDoor=new NDoor(Material.wood,0,""String_Node_Str"").setBlockName(""String_Node_Str"");
  eucalyptusDoor=new NDoor(Material.wood,1,""String_Node_Str"").setBlockName(""String_Node_Str"");
  hopseedDoor=new NDoor(Material.wood,2,""String_Node_Str"").setBlockName(""String_Node_Str"");
  sakuraDoor=new NDoor(Material.wood,3,""String_Node_Str"").setBlockName(""String_Node_Str"");
  ghostDoor=new NDoor(Material.wood,4,""String_Node_Str"").setBlockName(""String_Node_Str"");
  bloodDoor=new NDoor(Material.wood,5,""String_Node_Str"").setBlockName(""String_Node_Str"");
  redwoodBarkDoor=new NDoor(Material.wood,6,""String_Node_Str"").setBlockName(""String_Node_Str"");
  MinecraftForge.addGrassSeed(new ItemStack(seeds,1,0),3);
  MinecraftForge.addGrassSeed(new ItemStack(seeds,1,1),3);
  GameRegistry.registerBlock(tree,TreeItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(redwood,RedwoodItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(planks,PlanksItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(floraLeaves,NLeavesItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(floraLeavesNoColor,NoColorLeavesItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(floraSapling,NSaplingItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(saguaro,SaguaroItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(willow,WillowItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(redwoodDoor,""String_Node_Str"");
  GameRegistry.registerBlock(eucalyptusDoor,""String_Node_Str"");
  GameRegistry.registerBlock(hopseedDoor,""String_Node_Str"");
  GameRegistry.registerBlock(sakuraDoor,""String_Node_Str"");
  GameRegistry.registerBlock(ghostDoor,""String_Node_Str"");
  GameRegistry.registerBlock(bloodDoor,""String_Node_Str"");
  GameRegistry.registerBlock(redwoodBarkDoor,""String_Node_Str"");
  bloodwood=new LogTwoxTwo(8f,Material.wood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(bloodwood,LogTwoxTwoItem.class,""String_Node_Str"");
  taintedSoil=new TaintedSoil().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(taintedSoil,""String_Node_Str"");
  heatSand=new HeatSand().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(heatSand,""String_Node_Str"");
  darkTree=new DarkTreeBlock().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(darkTree,DarkTreeItem.class,""String_Node_Str"");
  darkLeaves=(NLeaves)new NLeavesDark().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(darkLeaves,NLeavesDarkItem.class,""String_Node_Str"");
  thornVines=new ThornVines().setBlockName(""String_Node_Str"").setLightLevel(0.625f);
  GameRegistry.registerBlock(thornVines,""String_Node_Str"");
  glowshroom=(Glowshroom)new Glowshroom().setBlockName(""String_Node_Str"").setLightLevel(0.625f);
  GameRegistry.registerBlock(glowshroom,GlowshroomItem.class,""String_Node_Str"");
  glowshroomBlue=new LargeGlowshroom(Material.wood,""String_Node_Str"").setBlockName(""String_Node_Str"").setLightLevel(0.625f);
  GameRegistry.registerBlock(glowshroomBlue,""String_Node_Str"");
  glowshroomPurple=new LargeGlowshroom(Material.wood,""String_Node_Str"").setBlockName(""String_Node_Str"").setLightLevel(0.5f);
  GameRegistry.registerBlock(glowshroomPurple,""String_Node_Str"");
  glowshroomGreen=new LargeGlowshroom(Material.wood,""String_Node_Str"").setBlockName(""String_Node_Str"").setLightLevel(0.5f);
  GameRegistry.registerBlock(glowshroomGreen,""String_Node_Str"");
  Blocks.netherrack.setResistance(4f);
  brail=new BlazeRail().setHardness(0.7F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str"");
  GameRegistry.registerBlock(brail,""String_Node_Str"");
  brailPowered=new BlazeRailPowered(false).setHardness(0.7F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str"");
  GameRegistry.registerBlock(brailPowered,""String_Node_Str"");
  brailDetector=new BlazeRailDetector().setHardness(0.7F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str"");
  GameRegistry.registerBlock(brailDetector,""String_Node_Str"");
  brailActivator=new BlazeRailPowered(true).setHardness(0.7F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str"");
  GameRegistry.registerBlock(brailActivator,""String_Node_Str"");
  netherrackFurnace=new NetherrackFurnaceBlock().setHardness(3.5F).setCreativeTab(NaturaTab.netherTab).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(netherrackFurnace,""String_Node_Str"");
  GameRegistry.registerTileEntity(NetherrackFurnaceLogic.class,""String_Node_Str"");
  respawnObelisk=new RespawnObelisk(Material.wood).setHardness(1.0F).setResistance(1000000F).setCreativeTab(NaturaTab.netherTab).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(respawnObelisk,""String_Node_Str"");
  netherGlass=(NetherGlass)new NetherGlass().setHardness(1.0F).setResistance(3000F).setStepSound(Block.soundTypeGlass).setCreativeTab(NaturaTab.netherTab).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(netherGlass,NetherGlassItem.class,""String_Node_Str"");
  netherHopper=(BlazeHopper)new BlazeHopper().setHardness(3.0F).setResistance(8.0F).setCreativeTab(NaturaTab.netherTab).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(netherHopper,""String_Node_Str"");
  netherPressurePlate=new AlternatePressurePlate(""String_Node_Str"",Material.rock,Sensitivity.mobs).setHardness(0.5F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(netherPressurePlate,""String_Node_Str"");
  netherButton=new NetherrackButton().setHardness(0.5F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(netherButton,""String_Node_Str"");
  netherLever=new NetherLever().setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str"");
  GameRegistry.registerBlock(netherLever,""String_Node_Str"");
  potashApple=new NetherFoodItem().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(potashApple,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(potashApple,1,0));
  rareTree=new OverworldTreeBlock().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(rareTree,OverworldTreeItem.class,""String_Node_Str"");
  rareLeaves=(NLeaves)new OverworldLeaves().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(rareLeaves,OverworldLeavesItem.class,""String_Node_Str"");
  rareSapling=(NSaplingBlock)new OverworldSapling().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(rareSapling,OverworldSaplingItem.class,""String_Node_Str"");
  bluebells=(NSaplingBlock)new FlowerBlock().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(bluebells,""String_Node_Str"");
  alternateWorkbench=new AlternateWorkbench().setHardness(2.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"").setCreativeTab(NaturaTab.tab);
  GameRegistry.registerBlock(alternateWorkbench,NAlternateItem.class,""String_Node_Str"");
  alternateBookshelf=new AlternateBookshelf().setHardness(1.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"").setCreativeTab(NaturaTab.tab);
  GameRegistry.registerBlock(alternateBookshelf,NAlternateItem.class,""String_Node_Str"");
  alternateFence=new AlternateFence(Material.wood).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"").setCreativeTab(NaturaTab.tab);
  GameRegistry.registerBlock(alternateFence,FenceItem.class,""String_Node_Str"");
  grassBlock=new GrassBlock().setBlockName(""String_Node_Str"");
  grassBlock.stepSound=Block.soundTypeGrass;
  GameRegistry.registerBlock(grassBlock,GrassBlockItem.class,""String_Node_Str"");
  grassSlab=new GrassSlab().setBlockName(""String_Node_Str"");
  grassSlab.stepSound=Block.soundTypeGrass;
  GameRegistry.registerBlock(grassSlab,GrassSlabItem.class,""String_Node_Str"");
  plankSlab1=new NSlabBase(Material.wood,planks,0,8).setHardness(2.0f).setBlockName(""String_Node_Str"");
  plankSlab1.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(plankSlab1,PlankSlab1Item.class,""String_Node_Str"");
  plankSlab2=new NSlabBase(Material.wood,planks,8,5).setHardness(2.0f).setBlockName(""String_Node_Str"");
  plankSlab2.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(plankSlab2,PlankSlab2Item.class,""String_Node_Str"");
  stairEucalyptus=new NStairs(planks,0).setBlockName(""String_Node_Str"");
  stairEucalyptus.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairEucalyptus,""String_Node_Str"");
  stairSakura=new NStairs(planks,1).setBlockName(""String_Node_Str"");
  stairSakura.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairSakura,""String_Node_Str"");
  stairGhostwood=new NStairs(planks,2).setBlockName(""String_Node_Str"");
  stairGhostwood.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairGhostwood,""String_Node_Str"");
  stairRedwood=new NStairs(planks,3).setBlockName(""String_Node_Str"");
  stairRedwood.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairRedwood,""String_Node_Str"");
  stairBloodwood=new NStairs(planks,4).setBlockName(""String_Node_Str"");
  stairBloodwood.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairBloodwood,""String_Node_Str"");
  stairHopseed=new NStairs(planks,5).setBlockName(""String_Node_Str"");
  stairHopseed.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairHopseed,""String_Node_Str"");
  stairMaple=new NStairs(planks,6).setBlockName(""String_Node_Str"");
  stairMaple.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairMaple,""String_Node_Str"");
  stairSilverbell=new NStairs(planks,7).setBlockName(""String_Node_Str"");
  stairSilverbell.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairSilverbell,""String_Node_Str"");
  stairAmaranth=new NStairs(planks,8).setBlockName(""String_Node_Str"");
  stairAmaranth.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairAmaranth,""String_Node_Str"");
  stairTiger=new NStairs(planks,9).setBlockName(""String_Node_Str"");
  stairTiger.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairTiger,""String_Node_Str"");
  stairWillow=new NStairs(planks,10).setBlockName(""String_Node_Str"");
  stairWillow.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairWillow,""String_Node_Str"");
  stairDarkwood=new NStairs(planks,11).setBlockName(""String_Node_Str"");
  stairDarkwood.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairDarkwood,""String_Node_Str"");
  stairFusewood=new NStairs(planks,12).setBlockName(""String_Node_Str"");
  stairFusewood.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairFusewood,""String_Node_Str"");
  pressurePlateEucalyptus=new NPressurePlate(Material.wood,Sensitivity.everything,planks,0);
  pressurePlateEucalyptus.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateEucalyptus,""String_Node_Str"");
  trapdoorEucalyptus=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorEucalyptus.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorEucalyptus,""String_Node_Str"");
  buttonEucalyptus=new NButton(planks,0);
  buttonEucalyptus.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonEucalyptus,""String_Node_Str"");
  fenceGateEucalyptus=new NFenceGate(planks,0);
  fenceGateEucalyptus.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateEucalyptus,""String_Node_Str"");
  pressurePlateSakura=new NPressurePlate(Material.wood,Sensitivity.everything,planks,1);
  pressurePlateSakura.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateSakura,""String_Node_Str"");
  trapdoorSakura=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorSakura.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorSakura,""String_Node_Str"");
  buttonSakura=new NButton(planks,1);
  buttonSakura.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonSakura,""String_Node_Str"");
  fenceGateSakura=new NFenceGate(planks,1);
  fenceGateSakura.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateSakura,""String_Node_Str"");
  pressurePlateGhostwood=new NPressurePlate(Material.wood,Sensitivity.everything,planks,2);
  pressurePlateGhostwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateGhostwood,""String_Node_Str"");
  trapdoorGhostwood=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorGhostwood.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorGhostwood,""String_Node_Str"");
  buttonGhostwood=new NButton(planks,2);
  buttonGhostwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonGhostwood,""String_Node_Str"");
  fenceGateGhostwood=new NFenceGate(planks,2);
  fenceGateGhostwood.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateGhostwood,""String_Node_Str"");
  pressurePlateRedwood=new NPressurePlate(Material.wood,Sensitivity.everything,planks,3);
  pressurePlateRedwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateRedwood,""String_Node_Str"");
  trapdoorRedwood=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorRedwood.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorRedwood,""String_Node_Str"");
  buttonRedwood=new NButton(planks,3);
  buttonRedwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonRedwood,""String_Node_Str"");
  fenceGateRedwood=new NFenceGate(planks,3);
  fenceGateRedwood.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateRedwood,""String_Node_Str"");
  pressurePlateBloodwood=new NPressurePlate(Material.wood,Sensitivity.everything,planks,4);
  pressurePlateBloodwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateBloodwood,""String_Node_Str"");
  trapdoorBloodwood=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorBloodwood.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorBloodwood,""String_Node_Str"");
  buttonBloodwood=new NButton(planks,4);
  buttonBloodwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonBloodwood,""String_Node_Str"");
  fenceGateBloodwood=new NFenceGate(planks,4);
  fenceGateBloodwood.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateBloodwood,""String_Node_Str"");
  pressurePlateHopseed=new NPressurePlate(Material.wood,Sensitivity.everything,planks,5);
  pressurePlateHopseed.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateHopseed,""String_Node_Str"");
  trapdoorHopseed=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorHopseed.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorHopseed,""String_Node_Str"");
  buttonHopseed=new NButton(planks,5);
  buttonHopseed.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonHopseed,""String_Node_Str"");
  fenceGateHopseed=new NFenceGate(planks,5);
  fenceGateHopseed.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateHopseed,""String_Node_Str"");
  pressurePlateMaple=new NPressurePlate(Material.wood,Sensitivity.everything,planks,6);
  pressurePlateMaple.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateMaple,""String_Node_Str"");
  trapdoorMaple=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorMaple.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorMaple,""String_Node_Str"");
  buttonMaple=new NButton(planks,6);
  buttonMaple.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonMaple,""String_Node_Str"");
  fenceGateMaple=new NFenceGate(planks,6);
  fenceGateMaple.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateMaple,""String_Node_Str"");
  pressurePlateAmaranth=new NPressurePlate(Material.wood,Sensitivity.everything,planks,8);
  pressurePlateAmaranth.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateAmaranth,""String_Node_Str"");
  trapdoorAmaranth=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorAmaranth.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorAmaranth,""String_Node_Str"");
  buttonAmaranth=new NButton(planks,8);
  buttonAmaranth.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonAmaranth,""String_Node_Str"");
  fenceGateAmaranth=new NFenceGate(planks,8);
  fenceGateAmaranth.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateAmaranth,""String_Node_Str"");
  pressurePlateSilverbell=new NPressurePlate(Material.wood,Sensitivity.everything,planks,7);
  pressurePlateSilverbell.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateSilverbell,""String_Node_Str"");
  trapdoorSilverbell=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorSilverbell.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorSilverbell,""String_Node_Str"");
  buttonSilverbell=new NButton(planks,7);
  buttonSilverbell.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonSilverbell,""String_Node_Str"");
  fenceGateSilverbell=new NFenceGate(planks,7);
  fenceGateSilverbell.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateSilverbell,""String_Node_Str"");
  pressurePlateTiger=new NPressurePlate(Material.wood,Sensitivity.everything,planks,9);
  pressurePlateTiger.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateTiger,""String_Node_Str"");
  trapdoorTiger=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorTiger.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorTiger,""String_Node_Str"");
  buttonTiger=new NButton(planks,9);
  buttonTiger.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonTiger,""String_Node_Str"");
  fenceGateTiger=new NFenceGate(planks,9);
  fenceGateTiger.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateTiger,""String_Node_Str"");
  pressurePlateWillow=new NPressurePlate(Material.wood,Sensitivity.everything,planks,10);
  pressurePlateWillow.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateWillow,""String_Node_Str"");
  trapdoorWillow=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorWillow.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorWillow,""String_Node_Str"");
  buttonWillow=new NButton(planks,10);
  buttonWillow.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonWillow,""String_Node_Str"");
  fenceGateWillow=new NFenceGate(planks,10);
  fenceGateWillow.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateWillow,""String_Node_Str"");
  pressurePlateDarkwood=new NPressurePlate(Material.wood,Sensitivity.everything,planks,11);
  pressurePlateDarkwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateDarkwood,""String_Node_Str"");
  trapdoorDarkwood=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorDarkwood.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorDarkwood,""String_Node_Str"");
  buttonDarkwood=new NButton(planks,11);
  buttonDarkwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonDarkwood,""String_Node_Str"");
  fenceGateDarkwood=new NFenceGate(planks,11);
  fenceGateDarkwood.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateDarkwood,""String_Node_Str"");
  pressurePlateFusewood=new NPressurePlate(Material.wood,Sensitivity.everything,planks,12);
  pressurePlateFusewood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateFusewood,""String_Node_Str"");
  trapdoorFusewood=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorFusewood.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorFusewood,""String_Node_Str"");
  buttonFusewood=new NButton(planks,12);
  buttonFusewood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonFusewood,""String_Node_Str"");
  fenceGateFusewood=new NFenceGate(planks,12);
  fenceGateFusewood.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateFusewood,""String_Node_Str"");
  stickItem=(new StickItem()).setFull3D().setUnlocalizedName(""String_Node_Str"").setCreativeTab(NaturaTab.tab);
  GameRegistry.registerItem(stickItem,""String_Node_Str"");
  ToolMaterial Bloodwood=EnumHelper.addToolMaterial(""String_Node_Str"",3,350,7f,3,24);
  ArmorMaterial Imp=EnumHelper.addArmorMaterial(""String_Node_Str"",33,new int[]{1,3,2,1},15);
  ghostwoodSword=new NaturaSword(ToolMaterial.WOOD,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(ghostwoodSword,""String_Node_Str"");
  ghostwoodPickaxe=new NaturaPickaxe(ToolMaterial.WOOD,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(ghostwoodPickaxe,""String_Node_Str"");
  ghostwoodShovel=new NaturaShovel(ToolMaterial.WOOD,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(ghostwoodShovel,""String_Node_Str"");
  ghostwoodAxe=new NaturaHatchet(ToolMaterial.WOOD,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(ghostwoodAxe,""String_Node_Str"");
  bloodwoodSword=new NaturaSword(Bloodwood,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bloodwoodSword,""String_Node_Str"");
  bloodwoodPickaxe=new NaturaPickaxe(Bloodwood,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bloodwoodPickaxe,""String_Node_Str"");
  bloodwoodShovel=new NaturaShovel(Bloodwood,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bloodwoodShovel,""String_Node_Str"");
  bloodwoodAxe=new NaturaHatchet(Bloodwood,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bloodwoodAxe,""String_Node_Str"");
  darkwoodSword=new NaturaSword(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(darkwoodSword,""String_Node_Str"");
  darkwoodPickaxe=new NaturaPickaxe(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(darkwoodPickaxe,""String_Node_Str"");
  darkwoodShovel=new NaturaShovel(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(darkwoodShovel,""String_Node_Str"");
  darkwoodAxe=new NaturaHatchet(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(darkwoodAxe,""String_Node_Str"");
  fusewoodSword=new NaturaSword(ToolMaterial.IRON,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(fusewoodSword,""String_Node_Str"");
  fusewoodPickaxe=new NaturaPickaxe(ToolMaterial.IRON,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(fusewoodPickaxe,""String_Node_Str"");
  fusewoodShovel=new NaturaShovel(ToolMaterial.IRON,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(fusewoodShovel,""String_Node_Str"");
  fusewoodAxe=new NaturaHatchet(ToolMaterial.IRON,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(fusewoodAxe,""String_Node_Str"");
  netherquartzSword=new NaturaSword(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(netherquartzSword,""String_Node_Str"");
  netherquartzPickaxe=new NaturaPickaxe(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(netherquartzPickaxe,""String_Node_Str"");
  netherquartzShovel=new NaturaShovel(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(netherquartzShovel,""String_Node_Str"");
  netherquartzAxe=new NaturaHatchet(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(netherquartzAxe,""String_Node_Str"");
  netherquartzKama=new NaturaKama(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(netherquartzKama,""String_Node_Str"");
  ghostwoodKama=new NaturaKama(ToolMaterial.WOOD,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(ghostwoodKama,""String_Node_Str"");
  bloodwoodKama=new NaturaKama(Bloodwood,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bloodwoodKama,""String_Node_Str"");
  darkwoodKama=new NaturaKama(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(darkwoodKama,""String_Node_Str"");
  fusewoodKama=new NaturaKama(ToolMaterial.IRON,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(fusewoodKama,""String_Node_Str"");
  ghostwoodBow=new NaturaBow(384,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(ghostwoodBow,""String_Node_Str"");
  bloodwoodBow=new NaturaBow(1501,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bloodwoodBow,""String_Node_Str"");
  darkwoodBow=new NaturaBow(162,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(darkwoodBow,""String_Node_Str"");
  fusewoodBow=new NaturaBow(28,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(fusewoodBow,""String_Node_Str"");
  impHelmet=new NaturaArmor(Imp,1,0,""String_Node_Str"",""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(impHelmet,""String_Node_Str"");
  impJerkin=new NaturaArmor(Imp,1,1,""String_Node_Str"",""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(impJerkin,""String_Node_Str"");
  impLeggings=new NaturaArmor(Imp,1,2,""String_Node_Str"",""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(impLeggings,""String_Node_Str"");
  impBoots=new NaturaArmor(Imp,1,3,""String_Node_Str"",""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(impBoots,""String_Node_Str"");
  flintAndBlaze=new FlintAndBlaze().setUnlocalizedName(""String_Node_Str"").setTextureName(""String_Node_Str"");
  GameRegistry.registerItem(flintAndBlaze,""String_Node_Str"");
  impMeat=new ImpMeat().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(impMeat,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(impMeat,1,0));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(impMeat,1,1));
  ghostwoodPickaxe.setHarvestLevel(""String_Node_Str"",0);
  ghostwoodShovel.setHarvestLevel(""String_Node_Str"",0);
  ghostwoodAxe.setHarvestLevel(""String_Node_Str"",0);
  bloodwoodPickaxe.setHarvestLevel(""String_Node_Str"",2);
  bloodwoodShovel.setHarvestLevel(""String_Node_Str"",2);
  bloodwoodAxe.setHarvestLevel(""String_Node_Str"",2);
  darkwoodPickaxe.setHarvestLevel(""String_Node_Str"",1);
  darkwoodShovel.setHarvestLevel(""String_Node_Str"",1);
  darkwoodAxe.setHarvestLevel(""String_Node_Str"",1);
  fusewoodPickaxe.setHarvestLevel(""String_Node_Str"",2);
  fusewoodShovel.setHarvestLevel(""String_Node_Str"",2);
  fusewoodAxe.setHarvestLevel(""String_Node_Str"",2);
  netherquartzPickaxe.setHarvestLevel(""String_Node_Str"",1);
  netherquartzShovel.setHarvestLevel(""String_Node_Str"",1);
  netherquartzAxe.setHarvestLevel(""String_Node_Str"",1);
  bloodwood.setHarvestLevel(""String_Node_Str"",2);
  darkTree.setHarvestLevel(""String_Node_Str"",1,1);
  darkTree.setHarvestLevel(""String_Node_Str"",-1,0);
  tree.setHarvestLevel(""String_Node_Str"",-1);
  redwood.setHarvestLevel(""String_Node_Str"",-1);
  taintedSoil.setHarvestLevel(""String_Node_Str"",0);
  heatSand.setHarvestLevel(""String_Node_Str"",0);
  bowlEmpty=new BowlEmpty().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bowlEmpty,""String_Node_Str"");
  bowlStew=new BowlStew().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bowlStew,""String_Node_Str"");
  addRecipes();
}","public void preInit(){
  spawnEgg=new SpawnEgg().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(spawnEgg,""String_Node_Str"");
  plantItem=new PlantItem().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(plantItem,""String_Node_Str"");
  crops=new CropBlock();
  GameRegistry.registerBlock(crops,""String_Node_Str"");
  seeds=new NaturaSeeds(crops,Blocks.farmland).setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(seeds,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(seeds,1,0));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(seeds,1,1));
  waterDrop=new CactusJuice(false).setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(waterDrop,""String_Node_Str"");
  wheatBag=new SeedBag(Blocks.wheat,0,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(wheatBag,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(wheatBag,1,0));
  barleyBag=new SeedBag(crops,0,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(barleyBag,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(barleyBag,1,0));
  potatoBag=new SeedBag(Blocks.potatoes,0,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(potatoBag,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(potatoBag,1,0));
  carrotBag=new SeedBag(Blocks.carrots,0,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(carrotBag,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(carrotBag,1,0));
  netherWartBag=new SeedBag(Blocks.nether_wart,0,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(netherWartBag,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(netherWartBag,1,0));
  cottonBag=new SeedBag(crops,4,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(cottonBag,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(cottonBag,1,0));
  boneBag=new BoneBag(""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(boneBag,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(boneBag,1,0));
  netherBerryItem=new NetherBerryItem(1).setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(netherBerryItem,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(netherBerryItem,1,0));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(netherBerryItem,1,1));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(netherBerryItem,1,2));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(netherBerryItem,1,3));
  berryItem=new BerryItem(1).setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(berryItem,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(berryItem,1,0));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(berryItem,1,1));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(berryItem,1,2));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(berryItem,1,3));
  berryMedley=new BerryMedley(5).setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(berryMedley,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(berryMedley,1,0));
  berryBush=new BerryBush();
  GameRegistry.registerBlock(berryBush,BerryBushItem.class,""String_Node_Str"");
  netherBerryBush=new NetherBerryBush();
  GameRegistry.registerBlock(netherBerryBush,NetherBerryBushItem.class,""String_Node_Str"");
  cloud=new CloudBlock();
  GameRegistry.registerBlock(cloud,CloudItem.class,""String_Node_Str"");
  tree=new TreeBlock().setBlockName(""String_Node_Str"");
  redwood=new SimpleLog().setBlockName(""String_Node_Str"");
  planks=new Planks().setBlockName(""String_Node_Str"");
  floraLeaves=(NLeaves)new NLeaves().setBlockName(""String_Node_Str"");
  floraLeavesNoColor=(NLeaves)new NLeavesNocolor().setBlockName(""String_Node_Str"");
  floraSapling=((NSaplingBlock)new NSaplingBlock().setBlockName(""String_Node_Str""));
  willow=new WillowBlock().setBlockName(""String_Node_Str"");
  saguaro=new SaguaroBlock().setBlockName(""String_Node_Str"");
  seedFood=new SeedFood(3,0.3f,saguaro).setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(seedFood,""String_Node_Str"");
  doorItem=new NDoorItem().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(doorItem,""String_Node_Str"");
  redwoodDoor=new NDoor(Material.wood,0,""String_Node_Str"").setBlockName(""String_Node_Str"");
  eucalyptusDoor=new NDoor(Material.wood,1,""String_Node_Str"").setBlockName(""String_Node_Str"");
  hopseedDoor=new NDoor(Material.wood,2,""String_Node_Str"").setBlockName(""String_Node_Str"");
  sakuraDoor=new NDoor(Material.wood,3,""String_Node_Str"").setBlockName(""String_Node_Str"");
  ghostDoor=new NDoor(Material.wood,4,""String_Node_Str"").setBlockName(""String_Node_Str"");
  bloodDoor=new NDoor(Material.wood,5,""String_Node_Str"").setBlockName(""String_Node_Str"");
  redwoodBarkDoor=new NDoor(Material.wood,6,""String_Node_Str"").setBlockName(""String_Node_Str"");
  MinecraftForge.addGrassSeed(new ItemStack(seeds,1,0),3);
  MinecraftForge.addGrassSeed(new ItemStack(seeds,1,1),3);
  GameRegistry.registerBlock(tree,TreeItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(redwood,RedwoodItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(planks,PlanksItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(floraLeaves,NLeavesItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(floraLeavesNoColor,NoColorLeavesItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(floraSapling,NSaplingItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(saguaro,SaguaroItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(willow,WillowItem.class,""String_Node_Str"");
  GameRegistry.registerBlock(redwoodDoor,""String_Node_Str"");
  GameRegistry.registerBlock(eucalyptusDoor,""String_Node_Str"");
  GameRegistry.registerBlock(hopseedDoor,""String_Node_Str"");
  GameRegistry.registerBlock(sakuraDoor,""String_Node_Str"");
  GameRegistry.registerBlock(ghostDoor,""String_Node_Str"");
  GameRegistry.registerBlock(bloodDoor,""String_Node_Str"");
  GameRegistry.registerBlock(redwoodBarkDoor,""String_Node_Str"");
  bloodwood=new LogTwoxTwo(8f,Material.wood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(bloodwood,LogTwoxTwoItem.class,""String_Node_Str"");
  taintedSoil=new TaintedSoil().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(taintedSoil,""String_Node_Str"");
  heatSand=new HeatSand().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(heatSand,""String_Node_Str"");
  darkTree=new DarkTreeBlock().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(darkTree,DarkTreeItem.class,""String_Node_Str"");
  darkLeaves=(NLeaves)new NLeavesDark().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(darkLeaves,NLeavesDarkItem.class,""String_Node_Str"");
  thornVines=new ThornVines().setBlockName(""String_Node_Str"").setLightLevel(0.625f);
  GameRegistry.registerBlock(thornVines,""String_Node_Str"");
  glowshroom=(Glowshroom)new Glowshroom().setBlockName(""String_Node_Str"").setLightLevel(0.625f);
  GameRegistry.registerBlock(glowshroom,GlowshroomItem.class,""String_Node_Str"");
  glowshroomBlue=new LargeGlowshroom(Material.wood,""String_Node_Str"").setBlockName(""String_Node_Str"").setLightLevel(0.625f);
  GameRegistry.registerBlock(glowshroomBlue,""String_Node_Str"");
  glowshroomPurple=new LargeGlowshroom(Material.wood,""String_Node_Str"").setBlockName(""String_Node_Str"").setLightLevel(0.5f);
  GameRegistry.registerBlock(glowshroomPurple,""String_Node_Str"");
  glowshroomGreen=new LargeGlowshroom(Material.wood,""String_Node_Str"").setBlockName(""String_Node_Str"").setLightLevel(0.5f);
  GameRegistry.registerBlock(glowshroomGreen,""String_Node_Str"");
  Blocks.netherrack.setResistance(4f);
  brail=new BlazeRail().setHardness(0.7F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str"");
  GameRegistry.registerBlock(brail,""String_Node_Str"");
  brailPowered=new BlazeRailPowered(false).setHardness(0.7F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str"");
  GameRegistry.registerBlock(brailPowered,""String_Node_Str"");
  brailDetector=new BlazeRailDetector().setHardness(0.7F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str"");
  GameRegistry.registerBlock(brailDetector,""String_Node_Str"");
  brailActivator=new BlazeRailPowered(true).setHardness(0.7F).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str"");
  GameRegistry.registerBlock(brailActivator,""String_Node_Str"");
  netherrackFurnace=new NetherrackFurnaceBlock().setHardness(3.5F).setCreativeTab(NaturaTab.netherTab).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(netherrackFurnace,""String_Node_Str"");
  GameRegistry.registerTileEntity(NetherrackFurnaceLogic.class,""String_Node_Str"");
  respawnObelisk=new RespawnObelisk(Material.wood).setHardness(1.0F).setResistance(1000000F).setCreativeTab(NaturaTab.netherTab).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(respawnObelisk,""String_Node_Str"");
  netherGlass=(NetherGlass)new NetherGlass().setHardness(1.0F).setResistance(3000F).setStepSound(Block.soundTypeGlass).setCreativeTab(NaturaTab.netherTab).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(netherGlass,NetherGlassItem.class,""String_Node_Str"");
  netherHopper=(BlazeHopper)new BlazeHopper().setHardness(3.0F).setResistance(8.0F).setCreativeTab(NaturaTab.netherTab).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(netherHopper,""String_Node_Str"");
  netherPressurePlate=new AlternatePressurePlate(""String_Node_Str"",Material.rock,Sensitivity.mobs).setHardness(0.5F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(netherPressurePlate,""String_Node_Str"");
  netherButton=new NetherrackButton().setHardness(0.5F).setStepSound(Block.soundTypeStone).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(netherButton,""String_Node_Str"");
  netherLever=new NetherLever().setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"").setBlockTextureName(""String_Node_Str"");
  GameRegistry.registerBlock(netherLever,""String_Node_Str"");
  potashApple=new NetherFoodItem().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(potashApple,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(potashApple,1,0));
  rareTree=new OverworldTreeBlock().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(rareTree,OverworldTreeItem.class,""String_Node_Str"");
  rareLeaves=(NLeaves)new OverworldLeaves().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(rareLeaves,OverworldLeavesItem.class,""String_Node_Str"");
  rareSapling=(OverworldSapling)new OverworldSapling().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(rareSapling,OverworldSaplingItem.class,""String_Node_Str"");
  bluebells=(FlowerBlock)new FlowerBlock().setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(bluebells,""String_Node_Str"");
  alternateWorkbench=new AlternateWorkbench().setHardness(2.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"").setCreativeTab(NaturaTab.tab);
  GameRegistry.registerBlock(alternateWorkbench,NAlternateItem.class,""String_Node_Str"");
  alternateBookshelf=new AlternateBookshelf().setHardness(1.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"").setCreativeTab(NaturaTab.tab);
  GameRegistry.registerBlock(alternateBookshelf,NAlternateItem.class,""String_Node_Str"");
  alternateFence=new AlternateFence(Material.wood).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"").setCreativeTab(NaturaTab.tab);
  GameRegistry.registerBlock(alternateFence,FenceItem.class,""String_Node_Str"");
  grassBlock=new GrassBlock().setBlockName(""String_Node_Str"");
  grassBlock.stepSound=Block.soundTypeGrass;
  GameRegistry.registerBlock(grassBlock,GrassBlockItem.class,""String_Node_Str"");
  grassSlab=new GrassSlab().setBlockName(""String_Node_Str"");
  grassSlab.stepSound=Block.soundTypeGrass;
  GameRegistry.registerBlock(grassSlab,GrassSlabItem.class,""String_Node_Str"");
  plankSlab1=new NSlabBase(Material.wood,planks,0,8).setHardness(2.0f).setBlockName(""String_Node_Str"");
  plankSlab1.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(plankSlab1,PlankSlab1Item.class,""String_Node_Str"");
  plankSlab2=new NSlabBase(Material.wood,planks,8,5).setHardness(2.0f).setBlockName(""String_Node_Str"");
  plankSlab2.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(plankSlab2,PlankSlab2Item.class,""String_Node_Str"");
  stairEucalyptus=new NStairs(planks,0).setBlockName(""String_Node_Str"");
  stairEucalyptus.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairEucalyptus,""String_Node_Str"");
  stairSakura=new NStairs(planks,1).setBlockName(""String_Node_Str"");
  stairSakura.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairSakura,""String_Node_Str"");
  stairGhostwood=new NStairs(planks,2).setBlockName(""String_Node_Str"");
  stairGhostwood.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairGhostwood,""String_Node_Str"");
  stairRedwood=new NStairs(planks,3).setBlockName(""String_Node_Str"");
  stairRedwood.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairRedwood,""String_Node_Str"");
  stairBloodwood=new NStairs(planks,4).setBlockName(""String_Node_Str"");
  stairBloodwood.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairBloodwood,""String_Node_Str"");
  stairHopseed=new NStairs(planks,5).setBlockName(""String_Node_Str"");
  stairHopseed.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairHopseed,""String_Node_Str"");
  stairMaple=new NStairs(planks,6).setBlockName(""String_Node_Str"");
  stairMaple.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairMaple,""String_Node_Str"");
  stairSilverbell=new NStairs(planks,7).setBlockName(""String_Node_Str"");
  stairSilverbell.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairSilverbell,""String_Node_Str"");
  stairAmaranth=new NStairs(planks,8).setBlockName(""String_Node_Str"");
  stairAmaranth.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairAmaranth,""String_Node_Str"");
  stairTiger=new NStairs(planks,9).setBlockName(""String_Node_Str"");
  stairTiger.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairTiger,""String_Node_Str"");
  stairWillow=new NStairs(planks,10).setBlockName(""String_Node_Str"");
  stairWillow.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairWillow,""String_Node_Str"");
  stairDarkwood=new NStairs(planks,11).setBlockName(""String_Node_Str"");
  stairDarkwood.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairDarkwood,""String_Node_Str"");
  stairFusewood=new NStairs(planks,12).setBlockName(""String_Node_Str"");
  stairFusewood.stepSound=Block.soundTypeWood;
  GameRegistry.registerBlock(stairFusewood,""String_Node_Str"");
  pressurePlateEucalyptus=new NPressurePlate(Material.wood,Sensitivity.everything,planks,0);
  pressurePlateEucalyptus.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateEucalyptus,""String_Node_Str"");
  trapdoorEucalyptus=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorEucalyptus.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorEucalyptus,""String_Node_Str"");
  buttonEucalyptus=new NButton(planks,0);
  buttonEucalyptus.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonEucalyptus,""String_Node_Str"");
  fenceGateEucalyptus=new NFenceGate(planks,0);
  fenceGateEucalyptus.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateEucalyptus,""String_Node_Str"");
  pressurePlateSakura=new NPressurePlate(Material.wood,Sensitivity.everything,planks,1);
  pressurePlateSakura.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateSakura,""String_Node_Str"");
  trapdoorSakura=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorSakura.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorSakura,""String_Node_Str"");
  buttonSakura=new NButton(planks,1);
  buttonSakura.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonSakura,""String_Node_Str"");
  fenceGateSakura=new NFenceGate(planks,1);
  fenceGateSakura.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateSakura,""String_Node_Str"");
  pressurePlateGhostwood=new NPressurePlate(Material.wood,Sensitivity.everything,planks,2);
  pressurePlateGhostwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateGhostwood,""String_Node_Str"");
  trapdoorGhostwood=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorGhostwood.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorGhostwood,""String_Node_Str"");
  buttonGhostwood=new NButton(planks,2);
  buttonGhostwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonGhostwood,""String_Node_Str"");
  fenceGateGhostwood=new NFenceGate(planks,2);
  fenceGateGhostwood.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateGhostwood,""String_Node_Str"");
  pressurePlateRedwood=new NPressurePlate(Material.wood,Sensitivity.everything,planks,3);
  pressurePlateRedwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateRedwood,""String_Node_Str"");
  trapdoorRedwood=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorRedwood.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorRedwood,""String_Node_Str"");
  buttonRedwood=new NButton(planks,3);
  buttonRedwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonRedwood,""String_Node_Str"");
  fenceGateRedwood=new NFenceGate(planks,3);
  fenceGateRedwood.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateRedwood,""String_Node_Str"");
  pressurePlateBloodwood=new NPressurePlate(Material.wood,Sensitivity.everything,planks,4);
  pressurePlateBloodwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateBloodwood,""String_Node_Str"");
  trapdoorBloodwood=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorBloodwood.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorBloodwood,""String_Node_Str"");
  buttonBloodwood=new NButton(planks,4);
  buttonBloodwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonBloodwood,""String_Node_Str"");
  fenceGateBloodwood=new NFenceGate(planks,4);
  fenceGateBloodwood.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateBloodwood,""String_Node_Str"");
  pressurePlateHopseed=new NPressurePlate(Material.wood,Sensitivity.everything,planks,5);
  pressurePlateHopseed.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateHopseed,""String_Node_Str"");
  trapdoorHopseed=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorHopseed.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorHopseed,""String_Node_Str"");
  buttonHopseed=new NButton(planks,5);
  buttonHopseed.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonHopseed,""String_Node_Str"");
  fenceGateHopseed=new NFenceGate(planks,5);
  fenceGateHopseed.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateHopseed,""String_Node_Str"");
  pressurePlateMaple=new NPressurePlate(Material.wood,Sensitivity.everything,planks,6);
  pressurePlateMaple.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateMaple,""String_Node_Str"");
  trapdoorMaple=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorMaple.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorMaple,""String_Node_Str"");
  buttonMaple=new NButton(planks,6);
  buttonMaple.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonMaple,""String_Node_Str"");
  fenceGateMaple=new NFenceGate(planks,6);
  fenceGateMaple.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateMaple,""String_Node_Str"");
  pressurePlateAmaranth=new NPressurePlate(Material.wood,Sensitivity.everything,planks,8);
  pressurePlateAmaranth.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateAmaranth,""String_Node_Str"");
  trapdoorAmaranth=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorAmaranth.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorAmaranth,""String_Node_Str"");
  buttonAmaranth=new NButton(planks,8);
  buttonAmaranth.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonAmaranth,""String_Node_Str"");
  fenceGateAmaranth=new NFenceGate(planks,8);
  fenceGateAmaranth.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateAmaranth,""String_Node_Str"");
  pressurePlateSilverbell=new NPressurePlate(Material.wood,Sensitivity.everything,planks,7);
  pressurePlateSilverbell.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateSilverbell,""String_Node_Str"");
  trapdoorSilverbell=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorSilverbell.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorSilverbell,""String_Node_Str"");
  buttonSilverbell=new NButton(planks,7);
  buttonSilverbell.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonSilverbell,""String_Node_Str"");
  fenceGateSilverbell=new NFenceGate(planks,7);
  fenceGateSilverbell.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateSilverbell,""String_Node_Str"");
  pressurePlateTiger=new NPressurePlate(Material.wood,Sensitivity.everything,planks,9);
  pressurePlateTiger.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateTiger,""String_Node_Str"");
  trapdoorTiger=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorTiger.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorTiger,""String_Node_Str"");
  buttonTiger=new NButton(planks,9);
  buttonTiger.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonTiger,""String_Node_Str"");
  fenceGateTiger=new NFenceGate(planks,9);
  fenceGateTiger.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateTiger,""String_Node_Str"");
  pressurePlateWillow=new NPressurePlate(Material.wood,Sensitivity.everything,planks,10);
  pressurePlateWillow.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateWillow,""String_Node_Str"");
  trapdoorWillow=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorWillow.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorWillow,""String_Node_Str"");
  buttonWillow=new NButton(planks,10);
  buttonWillow.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonWillow,""String_Node_Str"");
  fenceGateWillow=new NFenceGate(planks,10);
  fenceGateWillow.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateWillow,""String_Node_Str"");
  pressurePlateDarkwood=new NPressurePlate(Material.wood,Sensitivity.everything,planks,11);
  pressurePlateDarkwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateDarkwood,""String_Node_Str"");
  trapdoorDarkwood=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorDarkwood.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorDarkwood,""String_Node_Str"");
  buttonDarkwood=new NButton(planks,11);
  buttonDarkwood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonDarkwood,""String_Node_Str"");
  fenceGateDarkwood=new NFenceGate(planks,11);
  fenceGateDarkwood.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateDarkwood,""String_Node_Str"");
  pressurePlateFusewood=new NPressurePlate(Material.wood,Sensitivity.everything,planks,12);
  pressurePlateFusewood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(pressurePlateFusewood,""String_Node_Str"");
  trapdoorFusewood=new NTrapdoor(Material.wood,""String_Node_Str"");
  trapdoorFusewood.setHardness(3.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(trapdoorFusewood,""String_Node_Str"");
  buttonFusewood=new NButton(planks,12);
  buttonFusewood.setHardness(0.5F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(buttonFusewood,""String_Node_Str"");
  fenceGateFusewood=new NFenceGate(planks,12);
  fenceGateFusewood.setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood).setBlockName(""String_Node_Str"");
  GameRegistry.registerBlock(fenceGateFusewood,""String_Node_Str"");
  stickItem=(new StickItem()).setFull3D().setUnlocalizedName(""String_Node_Str"").setCreativeTab(NaturaTab.tab);
  GameRegistry.registerItem(stickItem,""String_Node_Str"");
  ToolMaterial Bloodwood=EnumHelper.addToolMaterial(""String_Node_Str"",3,350,7f,3,24);
  ArmorMaterial Imp=EnumHelper.addArmorMaterial(""String_Node_Str"",33,new int[]{1,3,2,1},15);
  ghostwoodSword=new NaturaSword(ToolMaterial.WOOD,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(ghostwoodSword,""String_Node_Str"");
  ghostwoodPickaxe=new NaturaPickaxe(ToolMaterial.WOOD,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(ghostwoodPickaxe,""String_Node_Str"");
  ghostwoodShovel=new NaturaShovel(ToolMaterial.WOOD,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(ghostwoodShovel,""String_Node_Str"");
  ghostwoodAxe=new NaturaHatchet(ToolMaterial.WOOD,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(ghostwoodAxe,""String_Node_Str"");
  bloodwoodSword=new NaturaSword(Bloodwood,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bloodwoodSword,""String_Node_Str"");
  bloodwoodPickaxe=new NaturaPickaxe(Bloodwood,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bloodwoodPickaxe,""String_Node_Str"");
  bloodwoodShovel=new NaturaShovel(Bloodwood,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bloodwoodShovel,""String_Node_Str"");
  bloodwoodAxe=new NaturaHatchet(Bloodwood,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bloodwoodAxe,""String_Node_Str"");
  darkwoodSword=new NaturaSword(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(darkwoodSword,""String_Node_Str"");
  darkwoodPickaxe=new NaturaPickaxe(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(darkwoodPickaxe,""String_Node_Str"");
  darkwoodShovel=new NaturaShovel(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(darkwoodShovel,""String_Node_Str"");
  darkwoodAxe=new NaturaHatchet(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(darkwoodAxe,""String_Node_Str"");
  fusewoodSword=new NaturaSword(ToolMaterial.IRON,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(fusewoodSword,""String_Node_Str"");
  fusewoodPickaxe=new NaturaPickaxe(ToolMaterial.IRON,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(fusewoodPickaxe,""String_Node_Str"");
  fusewoodShovel=new NaturaShovel(ToolMaterial.IRON,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(fusewoodShovel,""String_Node_Str"");
  fusewoodAxe=new NaturaHatchet(ToolMaterial.IRON,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(fusewoodAxe,""String_Node_Str"");
  netherquartzSword=new NaturaSword(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(netherquartzSword,""String_Node_Str"");
  netherquartzPickaxe=new NaturaPickaxe(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(netherquartzPickaxe,""String_Node_Str"");
  netherquartzShovel=new NaturaShovel(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(netherquartzShovel,""String_Node_Str"");
  netherquartzAxe=new NaturaHatchet(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(netherquartzAxe,""String_Node_Str"");
  netherquartzKama=new NaturaKama(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(netherquartzKama,""String_Node_Str"");
  ghostwoodKama=new NaturaKama(ToolMaterial.WOOD,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(ghostwoodKama,""String_Node_Str"");
  bloodwoodKama=new NaturaKama(Bloodwood,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bloodwoodKama,""String_Node_Str"");
  darkwoodKama=new NaturaKama(ToolMaterial.STONE,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(darkwoodKama,""String_Node_Str"");
  fusewoodKama=new NaturaKama(ToolMaterial.IRON,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(fusewoodKama,""String_Node_Str"");
  ghostwoodBow=new NaturaBow(384,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(ghostwoodBow,""String_Node_Str"");
  bloodwoodBow=new NaturaBow(1501,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bloodwoodBow,""String_Node_Str"");
  darkwoodBow=new NaturaBow(162,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(darkwoodBow,""String_Node_Str"");
  fusewoodBow=new NaturaBow(28,""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(fusewoodBow,""String_Node_Str"");
  impHelmet=new NaturaArmor(Imp,1,0,""String_Node_Str"",""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(impHelmet,""String_Node_Str"");
  impJerkin=new NaturaArmor(Imp,1,1,""String_Node_Str"",""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(impJerkin,""String_Node_Str"");
  impLeggings=new NaturaArmor(Imp,1,2,""String_Node_Str"",""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(impLeggings,""String_Node_Str"");
  impBoots=new NaturaArmor(Imp,1,3,""String_Node_Str"",""String_Node_Str"").setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(impBoots,""String_Node_Str"");
  flintAndBlaze=new FlintAndBlaze().setUnlocalizedName(""String_Node_Str"").setTextureName(""String_Node_Str"");
  GameRegistry.registerItem(flintAndBlaze,""String_Node_Str"");
  impMeat=new ImpMeat().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(impMeat,""String_Node_Str"");
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(impMeat,1,0));
  GameRegistry.registerCustomItemStack(""String_Node_Str"",new ItemStack(impMeat,1,1));
  ghostwoodPickaxe.setHarvestLevel(""String_Node_Str"",0);
  ghostwoodShovel.setHarvestLevel(""String_Node_Str"",0);
  ghostwoodAxe.setHarvestLevel(""String_Node_Str"",0);
  bloodwoodPickaxe.setHarvestLevel(""String_Node_Str"",2);
  bloodwoodShovel.setHarvestLevel(""String_Node_Str"",2);
  bloodwoodAxe.setHarvestLevel(""String_Node_Str"",2);
  darkwoodPickaxe.setHarvestLevel(""String_Node_Str"",1);
  darkwoodShovel.setHarvestLevel(""String_Node_Str"",1);
  darkwoodAxe.setHarvestLevel(""String_Node_Str"",1);
  fusewoodPickaxe.setHarvestLevel(""String_Node_Str"",2);
  fusewoodShovel.setHarvestLevel(""String_Node_Str"",2);
  fusewoodAxe.setHarvestLevel(""String_Node_Str"",2);
  netherquartzPickaxe.setHarvestLevel(""String_Node_Str"",1);
  netherquartzShovel.setHarvestLevel(""String_Node_Str"",1);
  netherquartzAxe.setHarvestLevel(""String_Node_Str"",1);
  bloodwood.setHarvestLevel(""String_Node_Str"",2);
  darkTree.setHarvestLevel(""String_Node_Str"",1,1);
  darkTree.setHarvestLevel(""String_Node_Str"",-1,0);
  tree.setHarvestLevel(""String_Node_Str"",-1);
  redwood.setHarvestLevel(""String_Node_Str"",-1);
  taintedSoil.setHarvestLevel(""String_Node_Str"",0);
  heatSand.setHarvestLevel(""String_Node_Str"",0);
  bowlEmpty=new BowlEmpty().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bowlEmpty,""String_Node_Str"");
  bowlStew=new BowlStew().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(bowlStew,""String_Node_Str"");
  addRecipes();
}",0.9970934722475744
17693,"public boolean generate(World world,Random random,int x,int y,int z){
  int l=random.nextInt(3) - 1;
  int i1=random.nextInt(3) - 1;
  for (int j1=0; j1 < numberOfBlocks; j1++) {
    x+=(random.nextInt(3) - 1) + l;
    z+=(random.nextInt(3) - 1) + i1;
    if (random.nextBoolean() && !flatCloud || flatCloud && random.nextInt(10) == 0) {
      y+=random.nextInt(3) - 1;
    }
    for (int xIter=x; xIter < x + random.nextInt(4) + 3 * (flatCloud ? 3 : 1); xIter++) {
      for (int yIter=y; yIter < y + random.nextInt(1) + 2; yIter++) {
        for (int zIter=z; zIter < z + random.nextInt(4) + 3 * (flatCloud ? 3 : 1); zIter++) {
          if (world.getBlock(xIter,yIter,zIter) == Blocks.air && Math.abs(xIter - x) + Math.abs(yIter - y) + Math.abs(zIter - z) < 4 * (flatCloud ? 3 : 1) + random.nextInt(2)) {
            setBlockAndMetadata(world,xIter,yIter,zIter,bID,meta);
          }
        }
      }
    }
  }
  return true;
}","public boolean generate(World world,Random random,int x,int y,int z){
  int l=random.nextInt(3) - 1;
  int i1=random.nextInt(3) - 1;
  for (int j1=0; j1 < numberOfBlocks; j1++) {
    x+=(random.nextInt(3) - 1) + l;
    z+=(random.nextInt(3) - 1) + i1;
    if (random.nextBoolean() && !flatCloud || flatCloud && random.nextInt(10) == 0) {
      y+=random.nextInt(3) - 1;
    }
    for (int xIter=x; xIter < x + random.nextInt(4) + 3 * (flatCloud ? 3 : 1); xIter++) {
      for (int yIter=y; yIter < y + random.nextInt(1) + 2; yIter++) {
        for (int zIter=z; zIter < z + random.nextInt(4) + 3 * (flatCloud ? 3 : 1); zIter++) {
          if (world.getBlock(xIter,yIter,zIter) == Blocks.air && Math.abs(xIter - x) + Math.abs(yIter - y) + Math.abs(zIter - z) < 4 * (flatCloud ? 3 : 1) + random.nextInt(2)) {
            setBlockAndNotifyAdequately(world,xIter,yIter,zIter,bID,meta);
          }
        }
      }
    }
  }
  return true;
}",0.9871657754010696
17694,"public boolean generate(World world,Random random,int x,int y,int z){
  int type;
  if (this.mushroomType >= 0) {
    type=this.mushroomType;
  }
 else {
    type=random.nextInt(2);
  }
  int height=random.nextInt(3) + 4;
  boolean flag=true;
  if (y >= 1 && y + height + 1 < 256) {
    int blockID;
    int posY;
    int l1;
    int posX;
    for (blockID=y; blockID <= y + 1 + height; ++blockID) {
      byte b0=3;
      if (blockID <= y + 3) {
        b0=0;
      }
      for (posY=x - b0; posY <= x + b0 && flag; ++posY) {
        for (l1=z - b0; l1 <= z + b0 && flag; ++l1) {
          if (blockID >= 0 && blockID < 256) {
            Block block=world.getBlock(posY,blockID,l1);
            if (posX != 0 && block != null && !block.isLeaves(world,posY,blockID,l1) && posX != NContent.glowshroom) {
              flag=false;
            }
          }
 else {
            flag=false;
          }
        }
      }
    }
    if (!flag) {
      return false;
    }
 else {
      Block blockb=world.getBlock(x,y - 1,z);
      if (blockb != Blocks.mycelium && blockb != Blocks.netherrack && blockb != NContent.taintedSoil && blockb != Blocks.soul_sand) {
        return false;
      }
 else {
        int j2=y + height;
        if (type == 1) {
          j2=y + height - 3;
        }
        for (posY=j2; posY <= y + height; ++posY) {
          l1=1;
          if (posY < y + height) {
            ++l1;
          }
          if (type == 0) {
            l1=3;
          }
          for (posX=x - l1; posX <= x + l1; ++posX) {
            for (int posZ=z - l1; posZ <= z + l1; ++posZ) {
              int meta=5;
              if (posX == x - l1) {
                --meta;
              }
              if (posX == x + l1) {
                ++meta;
              }
              if (posZ == z - l1) {
                meta-=3;
              }
              if (posZ == z + l1) {
                meta+=3;
              }
              if (type == 0 || posY < y + height) {
                if ((posX == x - l1 || posX == x + l1) && (posZ == z - l1 || posZ == z + l1)) {
                  continue;
                }
                if (posX == x - (l1 - 1) && posZ == z - l1) {
                  meta=1;
                }
                if (posX == x - l1 && posZ == z - (l1 - 1)) {
                  meta=1;
                }
                if (posX == x + (l1 - 1) && posZ == z - l1) {
                  meta=3;
                }
                if (posX == x + l1 && posZ == z - (l1 - 1)) {
                  meta=3;
                }
                if (posX == x - (l1 - 1) && posZ == z + l1) {
                  meta=7;
                }
                if (posX == x - l1 && posZ == z + (l1 - 1)) {
                  meta=7;
                }
                if (posX == x + (l1 - 1) && posZ == z + l1) {
                  meta=9;
                }
                if (posX == x + l1 && posZ == z + (l1 - 1)) {
                  meta=9;
                }
              }
              if (meta == 5 && posY < y + height) {
                meta=0;
              }
              Block block=world.getBlock(posX,posY,posZ);
              if ((meta != 0 || y >= y + height - 1) && (block == null || block.canBeReplacedByLeaves(world,posX,posY,posZ))) {
                Block localID=type == 1 ? NContent.glowshroomBlue : NContent.glowshroomGreen;
                world.setBlock(posX,posY,posZ,localID,meta,0);
              }
            }
          }
        }
        for (posY=0; posY < height; ++posY) {
          Block block=world.getBlock(x,y + posY,z);
          if (block == null || block.canBeReplacedByLeaves(world,x,y + posY,z)) {
            Block localID=type == 1 ? NContent.glowshroomBlue : NContent.glowshroomGreen;
            world.setBlock(x,y + posY,z,localID,10,0);
          }
        }
        return true;
      }
    }
  }
 else {
    return false;
  }
}","public boolean generate(World world,Random random,int x,int y,int z){
  int type;
  if (this.mushroomType >= 0) {
    type=this.mushroomType;
  }
 else {
    type=random.nextInt(2);
  }
  int height=random.nextInt(3) + 4;
  boolean flag=true;
  if (y >= 1 && y + height + 1 < 256) {
    int blockID;
    int posY;
    int l1;
    int posX=0;
    for (blockID=y; blockID <= y + 1 + height; ++blockID) {
      byte b0=3;
      if (blockID <= y + 3) {
        b0=0;
      }
      for (posY=x - b0; posY <= x + b0 && flag; ++posY) {
        for (l1=z - b0; l1 <= z + b0 && flag; ++l1) {
          if (blockID >= 0 && blockID < 256) {
            Block block=world.getBlock(posY,blockID,l1);
            if (posX != 0 && block != null && !block.isLeaves(world,posY,blockID,l1) && blockID != Block.getIdFromBlock(NContent.glowshroom)) {
              flag=false;
            }
          }
 else {
            flag=false;
          }
        }
      }
    }
    if (!flag) {
      return false;
    }
 else {
      Block blockb=world.getBlock(x,y - 1,z);
      if (blockb != Blocks.mycelium && blockb != Blocks.netherrack && blockb != NContent.taintedSoil && blockb != Blocks.soul_sand) {
        return false;
      }
 else {
        int j2=y + height;
        if (type == 1) {
          j2=y + height - 3;
        }
        for (posY=j2; posY <= y + height; ++posY) {
          l1=1;
          if (posY < y + height) {
            ++l1;
          }
          if (type == 0) {
            l1=3;
          }
          for (posX=x - l1; posX <= x + l1; ++posX) {
            for (int posZ=z - l1; posZ <= z + l1; ++posZ) {
              int meta=5;
              if (posX == x - l1) {
                --meta;
              }
              if (posX == x + l1) {
                ++meta;
              }
              if (posZ == z - l1) {
                meta-=3;
              }
              if (posZ == z + l1) {
                meta+=3;
              }
              if (type == 0 || posY < y + height) {
                if ((posX == x - l1 || posX == x + l1) && (posZ == z - l1 || posZ == z + l1)) {
                  continue;
                }
                if (posX == x - (l1 - 1) && posZ == z - l1) {
                  meta=1;
                }
                if (posX == x - l1 && posZ == z - (l1 - 1)) {
                  meta=1;
                }
                if (posX == x + (l1 - 1) && posZ == z - l1) {
                  meta=3;
                }
                if (posX == x + l1 && posZ == z - (l1 - 1)) {
                  meta=3;
                }
                if (posX == x - (l1 - 1) && posZ == z + l1) {
                  meta=7;
                }
                if (posX == x - l1 && posZ == z + (l1 - 1)) {
                  meta=7;
                }
                if (posX == x + (l1 - 1) && posZ == z + l1) {
                  meta=9;
                }
                if (posX == x + l1 && posZ == z + (l1 - 1)) {
                  meta=9;
                }
              }
              if (meta == 5 && posY < y + height) {
                meta=0;
              }
              Block block=world.getBlock(posX,posY,posZ);
              if ((meta != 0 || y >= y + height - 1) && (block == null || block.canBeReplacedByLeaves(world,posX,posY,posZ))) {
                Block localID=type == 1 ? NContent.glowshroomBlue : NContent.glowshroomGreen;
                world.setBlock(posX,posY,posZ,localID,meta,0);
              }
            }
          }
        }
        for (posY=0; posY < height; ++posY) {
          Block block=world.getBlock(x,y + posY,z);
          if (block == null || block.canBeReplacedByLeaves(world,x,y + posY,z)) {
            Block localID=type == 1 ? NContent.glowshroomBlue : NContent.glowshroomGreen;
            world.setBlock(x,y + posY,z,localID,10,0);
          }
        }
        return true;
      }
    }
  }
 else {
    return false;
  }
}",0.995507637017071
17695,"public boolean generate(World world,Random random,int x,int y,int z){
  int type=1;
  int height=random.nextInt(4) + 1;
  boolean flag=true;
  if (y >= 1 && y + height + 1 < 256) {
    int blockID;
    int posY;
    int range;
    int posX;
    for (blockID=y; blockID <= y + 1 + height; ++blockID) {
      byte b0=3;
      if (blockID <= y + 3) {
        b0=0;
      }
      for (posY=x - b0; posY <= x + b0 && flag; ++posY) {
        for (range=z - b0; range <= z + b0 && flag; ++range) {
          if (blockID >= 0 && blockID < 256) {
            Block block=world.getBlock(posY,blockID,range);
            if (posX != 0 && block != null && !block.isLeaves(world,posY,blockID,range)) {
              flag=false;
            }
          }
 else {
            flag=false;
          }
        }
      }
    }
    if (!flag) {
      return false;
    }
 else {
      Block blockb=world.getBlock(x,y - 1,z);
      if (blockb != Blocks.mycelium && blockb != Blocks.netherrack && blockb != NContent.taintedSoil && blockb != Blocks.soul_sand) {
        return false;
      }
 else {
        int heightPos=y + height - 1;
        for (posY=heightPos; posY <= y + height; ++posY) {
          range=2;
          if (posY < y + height) {
            ++range;
          }
          for (posX=x - range; posX <= x + range; ++posX) {
            for (int posZ=z - range; posZ <= z + range; ++posZ) {
              int meta=5;
              if (posX == x - range) {
                --meta;
              }
              if (posX == x + range) {
                ++meta;
              }
              if (posZ == z - range) {
                meta-=3;
              }
              if (posZ == z + range) {
                meta+=3;
              }
              if (type == 1 || posY < y + height) {
                int swap=posY < y + height ? 2 : 1;
                if (type == 1) {
                  if ((posX == x - range || posX == x + range) && (posZ == z - range || posZ == z + range)) {
                    continue;
                  }
                }
                if (posY < y + height) {
                  if ((posX <= x - range + 1 || posX >= x + range - 1) && (posZ <= z - range + 1 || posZ >= z + range - 1)) {
                    continue;
                  }
                }
                if (posX == x - (range - swap) && posZ == z - range) {
                  meta=1;
                }
                if (posX == x - range && posZ == z - (range - swap)) {
                  meta=1;
                }
                if (posX == x + (range - swap) && posZ == z - range) {
                  meta=3;
                }
                if (posX == x + range && posZ == z - (range - swap)) {
                  meta=3;
                }
                if (posX == x - (range - swap) && posZ == z + range) {
                  meta=7;
                }
                if (posX == x - range && posZ == z + (range - swap)) {
                  meta=7;
                }
                if (posX == x + (range - swap) && posZ == z + range) {
                  meta=9;
                }
                if (posX == x + range && posZ == z + (range - swap)) {
                  meta=9;
                }
              }
              if (meta == 5 && posY < y + height) {
                meta=0;
              }
              Block block=world.getBlock(posX,posY,posZ);
              if ((meta != 0 || y >= y + height - 1) && (block == null || block.canBeReplacedByLeaves(world,posX,posY,posZ))) {
                world.setBlock(posX,posY,posZ,NContent.glowshroomPurple,meta,0);
              }
            }
          }
        }
        world.setBlock(x - 2,y + height - 1,z - 2,NContent.glowshroomPurple,1,0);
        world.setBlock(x + 2,y + height - 1,z - 2,NContent.glowshroomPurple,3,0);
        world.setBlock(x - 2,y + height - 1,z + 2,NContent.glowshroomPurple,7,0);
        world.setBlock(x + 2,y + height - 1,z + 2,NContent.glowshroomPurple,9,0);
        for (posY=0; posY < height; ++posY) {
          Block block=world.getBlock(x,y + posY,z);
          ;
          if (block == null || block.canBeReplacedByLeaves(world,x,y + posY,z)) {
            world.setBlock(x,y + posY,z,NContent.glowshroomPurple,10,0);
          }
        }
        return true;
      }
    }
  }
 else {
    return false;
  }
}","public boolean generate(World world,Random random,int x,int y,int z){
  int type=1;
  int height=random.nextInt(4) + 1;
  boolean flag=true;
  if (y >= 1 && y + height + 1 < 256) {
    int blockID;
    int posY;
    int range;
    int posX=0;
    for (blockID=y; blockID <= y + 1 + height; ++blockID) {
      byte b0=3;
      if (blockID <= y + 3) {
        b0=0;
      }
      for (posY=x - b0; posY <= x + b0 && flag; ++posY) {
        for (range=z - b0; range <= z + b0 && flag; ++range) {
          if (blockID >= 0 && blockID < 256) {
            Block block=world.getBlock(posY,blockID,range);
            if (posX != 0 && block != null && !block.isLeaves(world,posY,blockID,range)) {
              flag=false;
            }
          }
 else {
            flag=false;
          }
        }
      }
    }
    if (!flag) {
      return false;
    }
 else {
      Block blockb=world.getBlock(x,y - 1,z);
      if (blockb != Blocks.mycelium && blockb != Blocks.netherrack && blockb != NContent.taintedSoil && blockb != Blocks.soul_sand) {
        return false;
      }
 else {
        int heightPos=y + height - 1;
        for (posY=heightPos; posY <= y + height; ++posY) {
          range=2;
          if (posY < y + height) {
            ++range;
          }
          for (posX=x - range; posX <= x + range; ++posX) {
            for (int posZ=z - range; posZ <= z + range; ++posZ) {
              int meta=5;
              if (posX == x - range) {
                --meta;
              }
              if (posX == x + range) {
                ++meta;
              }
              if (posZ == z - range) {
                meta-=3;
              }
              if (posZ == z + range) {
                meta+=3;
              }
              if (type == 1 || posY < y + height) {
                int swap=posY < y + height ? 2 : 1;
                if (type == 1) {
                  if ((posX == x - range || posX == x + range) && (posZ == z - range || posZ == z + range)) {
                    continue;
                  }
                }
                if (posY < y + height) {
                  if ((posX <= x - range + 1 || posX >= x + range - 1) && (posZ <= z - range + 1 || posZ >= z + range - 1)) {
                    continue;
                  }
                }
                if (posX == x - (range - swap) && posZ == z - range) {
                  meta=1;
                }
                if (posX == x - range && posZ == z - (range - swap)) {
                  meta=1;
                }
                if (posX == x + (range - swap) && posZ == z - range) {
                  meta=3;
                }
                if (posX == x + range && posZ == z - (range - swap)) {
                  meta=3;
                }
                if (posX == x - (range - swap) && posZ == z + range) {
                  meta=7;
                }
                if (posX == x - range && posZ == z + (range - swap)) {
                  meta=7;
                }
                if (posX == x + (range - swap) && posZ == z + range) {
                  meta=9;
                }
                if (posX == x + range && posZ == z + (range - swap)) {
                  meta=9;
                }
              }
              if (meta == 5 && posY < y + height) {
                meta=0;
              }
              Block block=world.getBlock(posX,posY,posZ);
              if ((meta != 0 || y >= y + height - 1) && (block == null || block.canBeReplacedByLeaves(world,posX,posY,posZ))) {
                world.setBlock(posX,posY,posZ,NContent.glowshroomPurple,meta,0);
              }
            }
          }
        }
        world.setBlock(x - 2,y + height - 1,z - 2,NContent.glowshroomPurple,1,0);
        world.setBlock(x + 2,y + height - 1,z - 2,NContent.glowshroomPurple,3,0);
        world.setBlock(x - 2,y + height - 1,z + 2,NContent.glowshroomPurple,7,0);
        world.setBlock(x + 2,y + height - 1,z + 2,NContent.glowshroomPurple,9,0);
        for (posY=0; posY < height; ++posY) {
          Block block=world.getBlock(x,y + posY,z);
          ;
          if (block == null || block.canBeReplacedByLeaves(world,x,y + posY,z)) {
            world.setBlock(x,y + posY,z,NContent.glowshroomPurple,10,0);
          }
        }
        return true;
      }
    }
  }
 else {
    return false;
  }
}",0.9997682502896872
17696,"@Override public boolean isFlammable(IBlockAccess world,int x,int y,int z,int metadata,ForgeDirection face){
  return true;
}","@Override public boolean isFlammable(IBlockAccess world,int x,int y,int z,ForgeDirection face){
  return true;
}",0.9451476793248944
17697,"@Override public int getFlammability(IBlockAccess world,int x,int y,int z,int metadata,ForgeDirection face){
  return 25;
}","@Override public int getFlammability(IBlockAccess world,int x,int y,int z,ForgeDirection face){
  return 25;
}",0.944206008583691
17698,"@Override public int getFireSpreadSpeed(World world,int x,int y,int z,int metadata,ForgeDirection face){
  return 4;
}","@Override public int getFireSpreadSpeed(IBlockAccess world,int x,int y,int z,ForgeDirection face){
  return 4;
}",0.8782608695652174
17699,"@Override public int getPlantMetadata(World world,int x,int y,int z){
  int meta=world.getBlockMetadata(x,y,z);
  if (meta < 4)   return 0;
 else   return 4;
}","@Override public int getPlantMetadata(IBlockAccess world,int x,int y,int z){
  int meta=world.getBlockMetadata(x,y,z);
  if (meta < 4)   return 0;
 else   return 4;
}",0.953846153846154
17700,"@Override public EnumPlantType getPlantType(World world,int x,int y,int z){
  return EnumPlantType.Crop;
}","@Override public EnumPlantType getPlantType(IBlockAccess world,int x,int y,int z){
  return EnumPlantType.Crop;
}",0.9315068493150684
17701,"/** 
 * Ticks the block if it's been scheduled
 */
public void updateTick(World world,int x,int y,int z,Random random){
  this.checkFlowerChange(world,x,y,z);
  int light=world.getBlockLightValue(x,y,z);
  if (light >= 8) {
    int meta=world.getBlockMetadata(x,y,z);
    if (meta != 3 && meta != 8) {
      float grow=this.getGrowthRate(world,x,y,z,meta,light);
      if (random.nextInt((int)(60.0F / grow) + 1) == 0) {
        meta++;
        world.setBlockMetadataWithNotify(x,y,z,meta,2);
      }
    }
  }
}","/** 
 * Ticks the block if it's been scheduled
 */
public void updateTick(World world,int x,int y,int z,Random random){
  this.checkAndDropBlock(world,x,y,z);
  int light=world.getBlockLightValue(x,y,z);
  if (light >= 8) {
    int meta=world.getBlockMetadata(x,y,z);
    if (meta != 3 && meta != 8) {
      float grow=this.getGrowthRate(world,x,y,z,meta,light);
      if (random.nextInt((int)(60.0F / grow) + 1) == 0) {
        meta++;
        world.setBlockMetadataWithNotify(x,y,z,meta,2);
      }
    }
  }
}",0.9765625
17702,"@Override public int getPlantMetadata(World world,int x,int y,int z){
  return world.getBlockMetadata(x,y,z);
}","@Override public int getPlantMetadata(IBlockAccess world,int x,int y,int z){
  return world.getBlockMetadata(x,y,z);
}",0.9344978165938864
17703,"@Override public EnumPlantType getPlantType(World world,int x,int y,int z){
  return EnumPlantType.Cave;
}","@Override public EnumPlantType getPlantType(IBlockAccess world,int x,int y,int z){
  return EnumPlantType.Cave;
}",0.9315068493150684
17704,"public void updateTick(World world,int x,int y,int z,Random random){
  this.checkFlowerChange(world,x,y,z);
  int light=world.getBlockLightValue(x,y,z);
  if (light >= 8) {
    int meta=world.getBlockMetadata(x,y,z);
    if (meta % 4 != 3) {
      float grow=this.getGrowthRate(world,x,y,z,meta,light);
      if (random.nextInt((int)(50.0F / grow) + 1) == 0) {
        meta++;
        world.setBlockMetadataWithNotify(x,y,z,meta,2);
      }
    }
  }
}","public void updateTick(World world,int x,int y,int z,Random random){
  this.checkAndDropBlock(world,x,y,z);
  int light=world.getBlockLightValue(x,y,z);
  if (light >= 8) {
    int meta=world.getBlockMetadata(x,y,z);
    if (meta % 4 != 3) {
      float grow=this.getGrowthRate(world,x,y,z,meta,light);
      if (random.nextInt((int)(50.0F / grow) + 1) == 0) {
        meta++;
        world.setBlockMetadataWithNotify(x,y,z,meta,2);
      }
    }
  }
}",0.9734513274336284
17705,"/** 
 * Returns the ID of the items to drop on destruction.
 */
public int idDropped(int par1,Random par2Random,int par3){
  return NContent.glowshroom;
}","/** 
 * Returns the ID of the items to drop on destruction.
 */
public int idDropped(int par1,Random par2Random,int par3){
  return Block.getIdFromBlock(NContent.glowshroom);
}",0.9333333333333332
17706,"@SideOnly(Side.CLIENT) public int idPicked(World par1World,int par2,int par3,int par4){
  return NContent.glowshroom;
}","@SideOnly(Side.CLIENT) public int idPicked(World par1World,int par2,int par3,int par4){
  return Block.getIdFromBlock(NContent.glowshroom);
}",0.9153846153846154
17707,"@Override public boolean isFlammable(IBlockAccess world,int x,int y,int z,int metadata,ForgeDirection face){
  return false;
}","@Override public boolean isFlammable(IBlockAccess world,int x,int y,int z,ForgeDirection face){
  return false;
}",0.9456066945606696
17708,"@Override public int getFlammability(IBlockAccess world,int x,int y,int z,int metadata,ForgeDirection face){
  return 0;
}","@Override public int getFlammability(IBlockAccess world,int x,int y,int z,ForgeDirection face){
  return 0;
}",0.9437229437229436
17709,"@Override public int getFireSpreadSpeed(World world,int x,int y,int z,int metadata,ForgeDirection face){
  return 0;
}","@Override public int getFireSpreadSpeed(IBlockAccess world,int x,int y,int z,ForgeDirection face){
  return 0;
}",0.8782608695652174
17710,"public void startMusic(int type,int startTime){
  if (noFocus)   return;
  if (isInactive)   return;
  if (isMusicReady) {
  }
 else {
    loadMusic(type,startTime);
  }
  if (isMusicReady) {
    if (audioCEO.getRingerMode() != AudioManager.RINGER_MODE_NORMAL)     return;
    musicPlayer.start();
  }
}","public void startMusic(int type,int startTime){
  if (noFocus)   return;
  if (isInactive)   return;
  if (isMusicReady) {
  }
 else {
    loadMusic(type,startTime);
  }
  if (isMusicReady) {
    if (audioCEO.getRingerMode() != AudioManager.RINGER_MODE_NORMAL)     return;
    musicPlayer.setVolume(0.01f * PreferenceManager.getDefaultSharedPreferences(host).getInt(""String_Node_Str"",60),0.01f * PreferenceManager.getDefaultSharedPreferences(host).getInt(""String_Node_Str"",60));
    musicPlayer.start();
  }
}",0.7339901477832512
17711,"public void setAdapter(ArrayList<PieChartData> alPercentage) throws Exception {
  this.alPieCharData=alPercentage;
  iDataSize=alPercentage.size();
  if (rectLegendIcon == null) {
    rectLegendIcon=new RectF[iDataSize];
    for (int i=0; i < iDataSize; i++) {
      if (rectLegendIcon[i] == null) {
        rectLegendIcon[i]=new RectF();
      }
    }
  }
  float fSum=0;
  for (int i=0; i < iDataSize; i++) {
    fSum+=alPercentage.get(i).fPercentage;
  }
  if (fSum != 100) {
    Log.e(TAG,ERROR_NOT_EQUAL_TO_100);
    iDataSize=0;
    throw new Exception(ERROR_NOT_EQUAL_TO_100);
  }
  invalidate();
}","public void setAdapter(ArrayList<PieChartData> alPercentage) throws Exception {
  this.alPieCharData=alPercentage;
  iDataSize=alPercentage.size();
  if (rectLegendIcon == null) {
    rectLegendIcon=new RectF[iDataSize];
    for (int i=0; i < iDataSize; i++) {
      if (rectLegendIcon[i] == null) {
        rectLegendIcon[i]=new RectF();
      }
    }
  }
  float fSum=0;
  for (int i=0; i < iDataSize; i++) {
    fSum+=alPercentage.get(i).fPercentage;
  }
  if (!decimalFormat.format(fSum).equals(""String_Node_Str"")) {
    Log.e(TAG,ERROR_NOT_EQUAL_TO_100);
    iDataSize=0;
    throw new Exception(ERROR_NOT_EQUAL_TO_100);
  }
  invalidate();
}",0.9552715654952076
17712,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  Log.i(TAG,""String_Node_Str"");
  for (int i=0; i < iDataSize; i++) {
    if (i >= iColorListSize) {
      paintPieFill.setColor(Color.parseColor(PIE_COLORS[i % iColorListSize]));
    }
 else {
      paintPieFill.setColor(Color.parseColor(PIE_COLORS[i]));
    }
    final PieChartData tmpData=alPieCharData.get(i);
    fEndAngle=tmpData.fPercentage;
    if (bIsShowLegend) {
      canvas.drawRect(rectLegendIcon[i],paintPieFill);
      canvas.drawText(String.format(""String_Node_Str"",tmpData.strTitle,fEndAngle),fLegendLeft + fnGetRealPxFromDp(15),iDisplayHeight - fLegendIconSize * (6 - i) - fMargin * (6 - i),paintText);
    }
    fEndAngle=fEndAngle / 100 * DEGREE_360;
    if (iSelectedIndex == i) {
      canvas.save(Canvas.MATRIX_SAVE_FLAG);
      float fAngle=fStartAngle + fEndAngle / 2;
      double dxRadius=Math.toRadians((fAngle + DEGREE_360) % DEGREE_360);
      float fY=(float)Math.sin(dxRadius);
      float fX=(float)Math.cos(dxRadius);
      canvas.translate(fX * iShift,fY * iShift);
    }
    canvas.drawArc(rectPie,fStartAngle,fEndAngle,true,paintPieFill);
    if (iSelectedIndex == i) {
      canvas.drawArc(rectPie,fStartAngle,fEndAngle,true,paintPieBorder);
      canvas.restore();
    }
    fStartAngle=fStartAngle + fEndAngle;
  }
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  Log.i(TAG,""String_Node_Str"");
  if (bIsShowLegend) {
    for (int i=0; i < iDataSize; i++) {
      setColor(i);
      final PieChartData tmpData=alPieCharData.get(i);
      final float fEndAngle=alPieCharData.get(i).fPercentage;
      canvas.drawRect(rectLegendIcon[i],paintPieFill);
      canvas.drawText(String.format(""String_Node_Str"",tmpData.strTitle,fEndAngle),fLegendLeft + fnGetRealPxFromDp(15),iDisplayHeight - fLegendIconSize * (6 - i) - fMargin * (6 - i),paintText);
    }
  }
  for (int i=0; i < iDataSize; i++) {
    final PieChartData tmpData=alPieCharData.get(i);
    final float fEndAngle=tmpData.fPercentage / 100 * DEGREE_360;
    float fStartAngle=0.0f;
    if (iSelectedIndex == i) {
      canvas.save(Canvas.MATRIX_SAVE_FLAG);
      float fAngle=fStartAngle + fEndAngle / 2;
      double dxRadius=Math.toRadians((fAngle + DEGREE_360) % DEGREE_360);
      float fY=(float)Math.sin(dxRadius);
      float fX=(float)Math.cos(dxRadius);
      canvas.translate(fX * iShift,fY * iShift);
    }
    setColor(i);
    canvas.drawArc(rectPie,fStartAngle,fEndAngle,true,paintPieFill);
    if (iSelectedIndex == i) {
      canvas.drawArc(rectPie,fStartAngle,fEndAngle,true,paintPieBorder);
      canvas.restore();
    }
    fStartAngle=fStartAngle + fEndAngle;
  }
}",0.8020911127707244
17713,"public void setAdapter(ArrayList<Float> alPercentage) throws Exception {
  this.alPercentage=alPercentage;
  iDataSize=alPercentage.size();
  int iSum=0;
  for (int i=0; i < iDataSize; i++) {
    iSum+=alPercentage.get(i);
  }
  if (iSum != 100) {
    Log.e(TAG,""String_Node_Str"");
    iDataSize=0;
    throw new Exception();
  }
}","public void setAdapter(ArrayList<Float> alPercentage) throws Exception {
  this.alPercentage=alPercentage;
  iDataSize=alPercentage.size();
  float fSum=0;
  for (int i=0; i < iDataSize; i++) {
    fSum+=alPercentage.get(i);
  }
  if (fSum != 100) {
    Log.e(TAG,""String_Node_Str"");
    iDataSize=0;
    throw new Exception();
  }
}",0.9759036144578314
17714,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  Log.i(TAG,""String_Node_Str"");
  if (bIsShowLegend) {
    for (int i=0; i < iDataSize; i++) {
      setColor(i);
      final PieChartData tmpData=alPieCharData.get(i);
      final float fEndAngle=alPieCharData.get(i).fPercentage;
      canvas.drawRect(rectLegendIcon[i],paintPieFill);
      canvas.drawText(String.format(""String_Node_Str"",tmpData.strTitle,fEndAngle),fLegendLeft + fnGetRealPxFromDp(15),iDisplayHeight - fLegendIconSize * (6 - i) - fMargin * (6 - i),paintText);
    }
  }
  for (int i=0; i < iDataSize; i++) {
    final PieChartData tmpData=alPieCharData.get(i);
    final float fEndAngle=tmpData.fPercentage / 100 * DEGREE_360;
    float fStartAngle=0.0f;
    if (iSelectedIndex == i) {
      canvas.save(Canvas.MATRIX_SAVE_FLAG);
      float fAngle=fStartAngle + fEndAngle / 2;
      double dxRadius=Math.toRadians((fAngle + DEGREE_360) % DEGREE_360);
      float fY=(float)Math.sin(dxRadius);
      float fX=(float)Math.cos(dxRadius);
      canvas.translate(fX * iShift,fY * iShift);
    }
    setColor(i);
    canvas.drawArc(rectPie,fStartAngle,fEndAngle,true,paintPieFill);
    if (iSelectedIndex == i) {
      canvas.drawArc(rectPie,fStartAngle,fEndAngle,true,paintPieBorder);
      canvas.restore();
    }
    fStartAngle=fStartAngle + fEndAngle;
  }
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  Log.i(TAG,""String_Node_Str"");
  if (bIsShowLegend) {
    for (int i=0; i < iDataSize; i++) {
      setColor(i);
      final PieChartData tmpData=alPieCharData.get(i);
      final float fEndAngle=alPieCharData.get(i).fPercentage;
      canvas.drawRect(rectLegendIcon[i],paintPieFill);
      canvas.drawText(String.format(""String_Node_Str"",tmpData.strTitle,fEndAngle),fLegendLeft + fnGetRealPxFromDp(15),iDisplayHeight - fLegendIconSize * (6 - i) - fMargin * (6 - i),paintText);
    }
  }
  float fStartAngle=0.0f;
  for (int i=0; i < iDataSize; i++) {
    final PieChartData tmpData=alPieCharData.get(i);
    final float fEndAngle=tmpData.fPercentage / 100 * DEGREE_360;
    if (iSelectedIndex == i) {
      canvas.save(Canvas.MATRIX_SAVE_FLAG);
      float fAngle=fStartAngle + fEndAngle / 2;
      double dxRadius=Math.toRadians((fAngle + DEGREE_360) % DEGREE_360);
      float fY=(float)Math.sin(dxRadius);
      float fX=(float)Math.cos(dxRadius);
      canvas.translate(fX * iShift,fY * iShift);
    }
    setColor(i);
    canvas.drawArc(rectPie,fStartAngle,fEndAngle,true,paintPieFill);
    if (iSelectedIndex == i) {
      canvas.drawArc(rectPie,fStartAngle,fEndAngle,true,paintPieBorder);
      canvas.restore();
    }
    fStartAngle=fStartAngle + fEndAngle;
  }
}",0.979955456570156
17715,"public TProtocol getProtocol(TTransport transport){
  return (transport instanceof TMemoryInputTransport) ? new TBinaryProtocol((TMemoryInputTransport)transport,strictRead_,strictWrite_) : super.getProtocol(transport);
}","public TProtocol getProtocol(TTransport transport){
  return (transport instanceof TMemoryInputTransport) ? new TBinaryProtocol((TMemoryInputTransport)transport,strictRead_,strictWrite_) : new ExtendedTBinaryProtocol(transport);
}",0.9377777777777778
17716,"synchronized void runHooks(ChannelFuture fut){
  future=fut;
  if (!hooks.isEmpty()) {
    Channel channel=fut.channel();
    channel.closeFuture().addListener(s);
    Application application=applicationProvider.get();
    List<ServerLifecycleHook> local=new ArrayList<>(hooks);
    hooks.clear();
    for (    ServerLifecycleHook hook : local) {
      try {
        hook.onStartup(application,channel);
        forShutdown.add(hook);
      }
 catch (      Exception ex) {
        startupExceptionsThrown=true;
        System.err.println(""String_Node_Str"" + hook);
        ctrl.get().internalOnError(ex);
      }
    }
  }
}","synchronized void runHooks(ChannelFuture fut){
  future=fut;
  if (!hooks.isEmpty()) {
    Channel channel=fut.channel();
    channel.closeFuture().addListener(s);
    Application application=applicationProvider.get();
    List<ServerLifecycleHook> local=new ArrayList<>(hooks);
    hooks.clear();
    for (    ServerLifecycleHook hook : local) {
      try {
        hook.onStartup(application,channel);
        forShutdown.add(hook);
      }
 catch (      Exception ex) {
        startupExceptionsThrown=true;
        ctrl.get().internalOnError(ex);
      }
    }
  }
}",0.9463986599664992
17717,"@Override protected void onStartup(Application application,Channel channel) throws Exception {
  HOOK_RAN.incrementAndGet();
}","@Override protected void onStartup(Application application,Channel channel) throws Exception {
  int amt=HOOK_RAN.incrementAndGet();
}",0.9692307692307692
17718,"@Test public void testDateHeaderHandling(TestHarness harn) throws Throwable {
  assertEquals(""String_Node_Str"",1,HOOK_RAN.get());
  ZonedDateTime when=harn.get(""String_Node_Str"").go().assertHasHeader(Headers.LAST_MODIFIED).assertContent(""String_Node_Str"").getHeader(Headers.LAST_MODIFIED);
  assertEquals(when.toInstant(),WHEN.toInstant());
  harn.get(""String_Node_Str"").addHeader(Headers.IF_MODIFIED_SINCE,when).go().assertStatus(NOT_MODIFIED);
  harn.get(""String_Node_Str"").addHeader(Headers.IF_MODIFIED_SINCE,WHEN).go().assertStatus(NOT_MODIFIED);
  harn.get(""String_Node_Str"").addHeader(Headers.IF_MODIFIED_SINCE,WHEN.plus(Duration.ofHours(1))).go().assertStatus(NOT_MODIFIED);
  harn.get(""String_Node_Str"").addHeader(Headers.IF_MODIFIED_SINCE,WHEN.minus(Duration.ofHours(1))).go().assertStatus(OK);
}","@Test public void testDateHeaderHandling(TestHarness harn) throws Throwable {
  ZonedDateTime when=harn.get(""String_Node_Str"").go().assertHasHeader(Headers.LAST_MODIFIED).assertContent(""String_Node_Str"").getHeader(Headers.LAST_MODIFIED);
  assertEquals(when.toInstant(),WHEN.toInstant());
  harn.get(""String_Node_Str"").addHeader(Headers.IF_MODIFIED_SINCE,when).go().assertStatus(NOT_MODIFIED);
  harn.get(""String_Node_Str"").addHeader(Headers.IF_MODIFIED_SINCE,WHEN).go().assertStatus(NOT_MODIFIED);
  harn.get(""String_Node_Str"").addHeader(Headers.IF_MODIFIED_SINCE,WHEN.plus(Duration.ofHours(1))).go().assertStatus(NOT_MODIFIED);
  harn.get(""String_Node_Str"").addHeader(Headers.IF_MODIFIED_SINCE,WHEN.minus(Duration.ofHours(1))).go().assertStatus(OK);
  assertTrue(""String_Node_Str"",HOOK_RAN.get() > 0);
}",0.1416149068322981
17719,"@Override public <T>ChannelPromise broadcast(T obj,Channel origin) throws Exception {
  ChannelPromise p=origin.newPromise();
  Set<Channel> all=reg.allChannels();
  all.remove(origin);
  if (all.isEmpty()) {
    return p.setSuccess();
  }
  ByteBuf buf=alloc.buffer();
  marshallers.write(obj,buf);
  final BinaryWebSocketFrame frame=new BinaryWebSocketFrame(buf);
  threadPool.submit(() -> {
    new CHF(all.iterator(),frame,p).operationComplete(null);
  }
);
  return p;
}","@Override public <T>ChannelPromise broadcast(T obj,Channel origin) throws Exception {
  ChannelPromise p=origin.newPromise();
  Set<Channel> all=new HashSet<>(reg.allChannels());
  all.remove(origin);
  if (all.isEmpty()) {
    return p.setSuccess();
  }
  ByteBuf buf=alloc.buffer();
  marshallers.write(obj,buf);
  final BinaryWebSocketFrame frame=new BinaryWebSocketFrame(buf);
  threadPool.submit(() -> {
    new CHF(all.iterator(),frame,p).operationComplete(null);
  }
);
  return p;
}",0.9844559585492229
17720,"@Override public void decoratePage(Page page,HttpEvent evt,String path,Response response,boolean chunked){
  if (file.lastModified() != lastModified) {
    try {
      load();
    }
 catch (    Exception ex) {
      Exceptions.printStackTrace(ex);
    }
  }
  ResponseHeaders h=page.getResponseHeaders();
  String ua=evt.getHeader(""String_Node_Str"");
  if (ua != null && !ua.contains(""String_Node_Str"")) {
    page.getResponseHeaders().addVaryHeader(Headers.ACCEPT_ENCODING);
  }
  page.getResponseHeaders().addCacheControl(CacheControlTypes.Public);
  page.getResponseHeaders().addCacheControl(CacheControlTypes.max_age,maxAge);
  page.getResponseHeaders().addCacheControl(CacheControlTypes.must_revalidate);
  h.setLastModified(new DateTime(lastModified));
  h.setEtag(hash);
  MediaType type=getContentType();
  if (type == null && debug) {
    System.err.println(""String_Node_Str"" + name);
  }
  if (type != null) {
    h.setContentType(type);
  }
  if (internalGzip) {
    response.add(Headers.stringHeader(""String_Node_Str""),""String_Node_Str"");
  }
  if (chunked) {
    response.add(Headers.stringHeader(""String_Node_Str""),""String_Node_Str"");
  }
  if (isGzip(evt)) {
    page.getResponseHeaders().setContentEncoding(""String_Node_Str"");
    response.add(Headers.CONTENT_ENCODING,""String_Node_Str"");
    if (!chunked) {
      response.add(Headers.CONTENT_LENGTH,(long)compressed.readableBytes());
    }
  }
 else {
    if (!chunked) {
      response.add(Headers.CONTENT_LENGTH,(long)bytes.readableBytes());
    }
  }
  response.setChunked(chunked);
}","@Override public void decoratePage(Page page,HttpEvent evt,String path,Response response,boolean chunked){
  if (file.lastModified() != lastModified) {
    try {
      load();
    }
 catch (    Exception ex) {
      Exceptions.printStackTrace(ex);
    }
  }
  ResponseHeaders h=page.getResponseHeaders();
  String ua=evt.getHeader(""String_Node_Str"");
  if (ua != null && !ua.contains(""String_Node_Str"")) {
    page.getResponseHeaders().addVaryHeader(Headers.ACCEPT_ENCODING);
  }
  h.addCacheControl(CacheControlTypes.Public);
  h.addCacheControl(CacheControlTypes.max_age,maxAge);
  h.addCacheControl(CacheControlTypes.must_revalidate);
  h.setLastModified(new DateTime(lastModified));
  h.setEtag(hash);
  MediaType type=getContentType();
  if (type == null && debug) {
    System.err.println(""String_Node_Str"" + name);
  }
  if (type != null) {
    h.setContentType(type);
  }
  if (internalGzip) {
    response.add(Headers.stringHeader(""String_Node_Str""),""String_Node_Str"");
  }
  if (chunked) {
    response.add(Headers.stringHeader(""String_Node_Str""),""String_Node_Str"");
  }
  if (isGzip(evt)) {
    page.getResponseHeaders().setContentEncoding(""String_Node_Str"");
    response.add(Headers.CONTENT_ENCODING,""String_Node_Str"");
    if (!chunked) {
      response.add(Headers.CONTENT_LENGTH,(long)compressed.readableBytes());
    }
  }
 else {
    if (!chunked) {
      response.add(Headers.CONTENT_LENGTH,(long)bytes.readableBytes());
    }
  }
  response.setChunked(chunked);
}",0.9743252139565504
17721,"private void scan(File dir,String path,List<String> result){
  for (  File f : dir.listFiles()) {
    if (f.isFile() && f.canRead()) {
      result.add(path + (path.isEmpty() ? ""String_Node_Str"" : ""String_Node_Str"") + f.getName());
    }
 else     if (f.isDirectory()) {
      scan(f,path + (path.isEmpty() ? ""String_Node_Str"" : ""String_Node_Str"") + f.getName(),result);
    }
  }
}","private void scan(File dir,String path,List<String> result){
  if (dir == null) {
    return;
  }
  File[] files=dir.listFiles();
  if (files != null) {
    for (    File f : dir.listFiles()) {
      if (f.isFile() && f.canRead()) {
        result.add(path + (path.isEmpty() ? ""String_Node_Str"" : ""String_Node_Str"") + f.getName());
      }
 else       if (f.isDirectory()) {
        scan(f,path + (path.isEmpty() ? ""String_Node_Str"" : ""String_Node_Str"") + f.getName(),result);
      }
    }
  }
}",0.826879271070615
17722,"private boolean check() throws Exception {
  Y y=new Y();
  ByteBuf test=allocator.buffer(bytes.readableBytes());
  try {
    y.decode(null,compressed,Collections.<Object>singletonList(test));
    compressed.resetReaderIndex();
    byte[] a=new byte[bytes.readableBytes()];
    bytes.readBytes(a);
    byte[] b=new byte[test.readableBytes()];
    test.readBytes(b);
    if (!Arrays.equals(a,b)) {
      throw new IllegalStateException(""String_Node_Str"" + a.length + ""String_Node_Str""+ b.length+ ""String_Node_Str""+ new String(a)+ ""String_Node_Str""+ new String(b));
    }
    bytes.resetReaderIndex();
  }
  finally {
    test.release();
  }
  return true;
}","private boolean check() throws Exception {
  SanityCheckDecoder y=new SanityCheckDecoder();
  ByteBuf test=allocator.buffer(bytes.readableBytes());
  try {
    y.decode(null,compressed,Collections.<Object>singletonList(test));
    compressed.resetReaderIndex();
    byte[] a=new byte[bytes.readableBytes()];
    bytes.readBytes(a);
    byte[] b=new byte[test.readableBytes()];
    test.readBytes(b);
    if (!Arrays.equals(a,b)) {
      throw new IllegalStateException(""String_Node_Str"" + a.length + ""String_Node_Str""+ b.length+ ""String_Node_Str""+ new String(a)+ ""String_Node_Str""+ new String(b));
    }
    bytes.resetReaderIndex();
  }
  finally {
    test.release();
  }
  return true;
}",0.9717682020802376
17723,"@Inject ResourceNameMatcher(HttpEvent evt,StaticResources res,Settings settings,ExpiresPolicy policy,Page page) throws UnsupportedEncodingException {
  String base=settings.getString(SETTINGS_KEY_STATIC_RESOURCES_BASE_URL_PATH);
  String path=evt.getPath().toString();
  if (base != null && !base.isEmpty()) {
    Pattern p=Pattern.compile(base);
    Matcher m=p.matcher(path);
    if (m.find()) {
      path=m.group(1);
    }
  }
  path=URLDecoder.decode(path,""String_Node_Str"");
  for (  String pat : res.getPatterns()) {
    if (path.equals(pat)) {
      Resource r=res.get(path);
      if (r == null) {
        reject();
        return;
      }
 else {
        r.decoratePage(page,evt,path,response(),chunked);
        MediaType mimeType=r.getContentType();
        if (mimeType != null) {
          DateTime dt=policy.get(mimeType,Path.parse(path));
          if (dt != null) {
            add(Headers.EXPIRES,dt);
          }
        }
        next(r);
        return;
      }
    }
  }
  reject();
}","@Inject ResourceNameMatcher(HttpEvent evt,StaticResources res,Settings settings,ExpiresPolicy policy,Page page) throws UnsupportedEncodingException {
  String base=settings.getString(SETTINGS_KEY_STATIC_RESOURCES_BASE_URL_PATH);
  String path=evt.getPath().toString();
  if (base != null && !base.isEmpty()) {
    Pattern p=Pattern.compile(base);
    Matcher m=p.matcher(path);
    if (m.find()) {
      path=m.group(1);
    }
  }
  path=URLDecoder.decode(path,""String_Node_Str"");
  String[] patterns=res.getPatterns();
  if (patterns != null) {
    for (    String pat : res.getPatterns()) {
      if (path.equals(pat)) {
        Resource r=res.get(path);
        if (r == null) {
          reject();
          return;
        }
 else {
          r.decoratePage(page,evt,path,response(),chunked);
          MediaType mimeType=r.getContentType();
          if (mimeType != null) {
            DateTime dt=policy.get(mimeType,Path.parse(path));
            if (dt != null) {
              add(Headers.EXPIRES,dt);
            }
          }
          next(r);
          return;
        }
      }
    }
  }
 else {
    Resource r=res.get(path);
    if (r != null) {
      r.decoratePage(page,evt,path,response(),chunked);
      MediaType mimeType=r.getContentType();
      if (mimeType != null) {
        DateTime dt=policy.get(mimeType,Path.parse(path));
        if (dt != null) {
          add(Headers.EXPIRES,dt);
        }
      }
      next(r);
      return;
    }
  }
  reject();
}",0.7919678714859437
17724,"@Inject public ResourcesPage(ActeurFactory af,StaticResources r,Settings settings){
  add(af.matchMethods(Method.GET,Method.HEAD));
  String base=settings.getString(SETTINGS_KEY_STATIC_RESOURCES_BASE_URL_PATH);
  if (base != null) {
    add(af.matchPath(base));
  }
  add(ResourceNameMatcher.class);
  add(af.sendNotModifiedIfIfModifiedSinceHeaderMatches());
  add(af.sendNotModifiedIfETagHeaderMatches());
  add(BytesWriter.class);
}","@Inject public ResourcesPage(ActeurFactory af,StaticResources r,Settings settings){
  add(af.matchMethods(Method.GET,Method.HEAD));
  String base=settings.getString(SETTINGS_KEY_STATIC_RESOURCES_BASE_URL_PATH);
  if (base != null && !base.isEmpty()) {
    add(af.matchPath(base));
  }
  add(ResourceNameMatcher.class);
  add(af.sendNotModifiedIfIfModifiedSinceHeaderMatches());
  add(af.sendNotModifiedIfETagHeaderMatches());
  add(BytesWriter.class);
}",0.9785794813979708
17725,Resource get(String path);,"/** 
 * Get a resource that should be served.
 * @param path The path from the base dir to the file
 * @return A resource or null
 */
Resource get(String path);",0.2795698924731182
17726,"@Override @SuppressWarnings(""String_Node_Str"") protected void configure(){
  bind(Server.class).to(ServerImpl.class);
  bind(ReentrantScope.class).toInstance(scope);
  bind(Application.class).to(appType).asEagerSingleton();
  bind(ChannelHandler.class).to(UpstreamHandlerImpl.class);
  bind(new CISC()).to(PipelineFactoryImpl.class);
  bind(ServerBootstrap.class).toProvider(new ServerBootstrapProvider(binder().getProvider(Settings.class),binder().getProvider(ByteBufAllocator.class)));
  scope.bindTypes(binder(),Event.class,HttpEvent.class,RequestID.class,Page.class,BasicCredentials.class,Closables.class);
  ImplicitBindings implicit=appType.getAnnotation(ImplicitBindings.class);
  if (implicit != null) {
    scope.bindTypes(binder(),implicit.value());
  }
  install(new ActeurBaseModule(scope));
  Provider<ApplicationControl> appControlProvider=binder().getProvider(ApplicationControl.class);
  Provider<Settings> set=binder().getProvider(Settings.class);
  TF eventThreadFactory=new TF(EVENT_THREADS,appControlProvider);
  TF workerThreadFactory=new TF(WORKER_THREADS,appControlProvider);
  TF backgroundThreadFactory=new TF(BACKGROUND_THREAD_POOL_NAME,appControlProvider);
  bind(ThreadGroup.class).annotatedWith(Names.named(BACKGROUND_THREAD_POOL_NAME)).toInstance(backgroundThreadFactory.tg);
  bind(ThreadGroup.class).annotatedWith(Names.named(WORKER_THREADS)).toInstance(workerThreadFactory.tg);
  bind(ThreadGroup.class).annotatedWith(Names.named(EVENT_THREADS)).toInstance(eventThreadFactory.tg);
  ThreadCount workerThreadCount=new ThreadCount(set,8,workerThreads,WORKER_THREADS);
  ThreadCount eventThreadCount=new ThreadCount(set,8,eventThreads,EVENT_THREADS);
  ThreadCount backgroundThreadCount=new ThreadCount(set,128,backgroundThreads,BACKGROUND_THREADS);
  bind(ThreadCount.class).annotatedWith(Names.named(EVENT_THREADS)).toInstance(eventThreadCount);
  bind(ThreadCount.class).annotatedWith(Names.named(WORKER_THREADS)).toInstance(workerThreadCount);
  bind(ThreadCount.class).annotatedWith(Names.named(BACKGROUND_THREAD_POOL_NAME)).toInstance(backgroundThreadCount);
  bind(ThreadFactory.class).annotatedWith(Names.named(WORKER_THREADS)).toInstance(workerThreadFactory);
  bind(ThreadFactory.class).annotatedWith(Names.named(EVENT_THREADS)).toInstance(eventThreadFactory);
  bind(ThreadFactory.class).annotatedWith(Names.named(BACKGROUND_THREAD_POOL_NAME)).toInstance(backgroundThreadFactory);
  Provider<ExecutorService> workerProvider=new ExecutorServiceProvider(workerThreadFactory,workerThreadCount,set);
  Provider<ExecutorService> backgroundProvider=new ExecutorServiceProvider(backgroundThreadFactory,backgroundThreadCount,set);
  bind(ExecutorService.class).annotatedWith(Names.named(WORKER_THREAD_POOL_NAME)).toProvider(workerProvider);
  bind(ExecutorService.class).annotatedWith(Names.named(BACKGROUND_THREAD_POOL_NAME)).toProvider(backgroundProvider);
  bind(ExecutorService.class).annotatedWith(Names.named(SCOPED_WORKER_THREAD_POOL_NAME)).toProvider(new WrappedWorkerThreadPoolProvider(workerProvider,scope));
  bind(ExecutorService.class).annotatedWith(Names.named(SCOPED_BACKGROUND_THREAD_POOL_NAME)).toProvider(new WrappedWorkerThreadPoolProvider(backgroundProvider,scope));
  bind(DateTime.class).toInstance(DateTime.now());
  bind(Duration.class).toProvider(UptimeProvider.class);
  bind(new CKTL()).toProvider(CookiesProvider.class);
  bind(String.class).annotatedWith(Names.named(""String_Node_Str"")).toInstance(this.appType.getSimpleName());
  bind(ServerImpl.class).asEagerSingleton();
  for (  Module m : otherModules) {
    install(m);
  }
  bind(Charset.class).toProvider(CharsetProvider.class);
  bind(ByteBufAllocator.class).toProvider(ByteBufAllocatorProvider.class);
  bind(new ETL()).toProvider(EventProvider.class).in(scope);
  bind(Codec.class).to(CodecImpl.class);
  bind(ApplicationControl.class).toProvider(ApplicationControlProvider.class).in(Scopes.SINGLETON);
  bind(ExceptionEvaluatorRegistry.class).asEagerSingleton();
  bind(KeysValues.class).toProvider(KeysValuesProvider.class);
  bind(InvalidInputExceptionEvaluator.class).asEagerSingleton();
  bind(Channel.class).toProvider(ChannelProvider.class);
  bind(HttpMethod.class).toProvider(MethodProvider.class);
  bind(Method.class).toProvider(MethodProvider2.class);
  bind(Path.class).toProvider(PathProvider.class);
  bind(BuiltInPageAnnotationHandler.class).asEagerSingleton();
  bind(ResponseHeaders.class).toProvider(ResponseHeadersProvider.class);
  bind(ScheduledExecutorService.class).annotatedWith(Names.named(DELAY_EXECUTOR)).toProvider(DelayExecutorProvider.class);
  bind(new CL()).toProvider(ChainProvider.class);
}","@Override @SuppressWarnings(""String_Node_Str"") protected void configure(){
  bind(Server.class).to(ServerImpl.class);
  bind(ReentrantScope.class).toInstance(scope);
  bind(Application.class).to(appType).asEagerSingleton();
  bind(ChannelHandler.class).to(UpstreamHandlerImpl.class);
  bind(new CISC()).to(PipelineFactoryImpl.class);
  bind(ServerBootstrap.class).toProvider(new ServerBootstrapProvider(binder().getProvider(Settings.class),binder().getProvider(ByteBufAllocator.class)));
  scope.bindTypes(binder(),Event.class,HttpEvent.class,RequestID.class,Page.class,BasicCredentials.class,Closables.class);
  ImplicitBindings implicit=appType.getAnnotation(ImplicitBindings.class);
  if (implicit != null) {
    scope.bindTypes(binder(),implicit.value());
  }
  scope.bindTypesAllowingNulls(binder(),EventChannelName.class);
  install(new ActeurBaseModule(scope));
  Provider<ApplicationControl> appControlProvider=binder().getProvider(ApplicationControl.class);
  Provider<Settings> set=binder().getProvider(Settings.class);
  TF eventThreadFactory=new TF(EVENT_THREADS,appControlProvider);
  TF workerThreadFactory=new TF(WORKER_THREADS,appControlProvider);
  TF backgroundThreadFactory=new TF(BACKGROUND_THREAD_POOL_NAME,appControlProvider);
  bind(ThreadGroup.class).annotatedWith(Names.named(BACKGROUND_THREAD_POOL_NAME)).toInstance(backgroundThreadFactory.tg);
  bind(ThreadGroup.class).annotatedWith(Names.named(WORKER_THREADS)).toInstance(workerThreadFactory.tg);
  bind(ThreadGroup.class).annotatedWith(Names.named(EVENT_THREADS)).toInstance(eventThreadFactory.tg);
  ThreadCount workerThreadCount=new ThreadCount(set,8,workerThreads,WORKER_THREADS);
  ThreadCount eventThreadCount=new ThreadCount(set,8,eventThreads,EVENT_THREADS);
  ThreadCount backgroundThreadCount=new ThreadCount(set,128,backgroundThreads,BACKGROUND_THREADS);
  bind(ThreadCount.class).annotatedWith(Names.named(EVENT_THREADS)).toInstance(eventThreadCount);
  bind(ThreadCount.class).annotatedWith(Names.named(WORKER_THREADS)).toInstance(workerThreadCount);
  bind(ThreadCount.class).annotatedWith(Names.named(BACKGROUND_THREAD_POOL_NAME)).toInstance(backgroundThreadCount);
  bind(ThreadFactory.class).annotatedWith(Names.named(WORKER_THREADS)).toInstance(workerThreadFactory);
  bind(ThreadFactory.class).annotatedWith(Names.named(EVENT_THREADS)).toInstance(eventThreadFactory);
  bind(ThreadFactory.class).annotatedWith(Names.named(BACKGROUND_THREAD_POOL_NAME)).toInstance(backgroundThreadFactory);
  Provider<ExecutorService> workerProvider=new ExecutorServiceProvider(workerThreadFactory,workerThreadCount,set);
  Provider<ExecutorService> backgroundProvider=new ExecutorServiceProvider(backgroundThreadFactory,backgroundThreadCount,set);
  bind(ExecutorService.class).annotatedWith(Names.named(WORKER_THREAD_POOL_NAME)).toProvider(workerProvider);
  bind(ExecutorService.class).annotatedWith(Names.named(BACKGROUND_THREAD_POOL_NAME)).toProvider(backgroundProvider);
  bind(ExecutorService.class).annotatedWith(Names.named(SCOPED_WORKER_THREAD_POOL_NAME)).toProvider(new WrappedWorkerThreadPoolProvider(workerProvider,scope));
  bind(ExecutorService.class).annotatedWith(Names.named(SCOPED_BACKGROUND_THREAD_POOL_NAME)).toProvider(new WrappedWorkerThreadPoolProvider(backgroundProvider,scope));
  bind(DateTime.class).toInstance(DateTime.now());
  bind(Duration.class).toProvider(UptimeProvider.class);
  bind(new CKTL()).toProvider(CookiesProvider.class);
  bind(String.class).annotatedWith(Names.named(""String_Node_Str"")).toInstance(this.appType.getSimpleName());
  bind(ServerImpl.class).asEagerSingleton();
  for (  Module m : otherModules) {
    install(m);
  }
  bind(Charset.class).toProvider(CharsetProvider.class);
  bind(ByteBufAllocator.class).toProvider(ByteBufAllocatorProvider.class);
  bind(new ETL()).toProvider(EventProvider.class).in(scope);
  bind(Codec.class).to(CodecImpl.class);
  bind(ApplicationControl.class).toProvider(ApplicationControlProvider.class).in(Scopes.SINGLETON);
  bind(ExceptionEvaluatorRegistry.class).asEagerSingleton();
  bind(KeysValues.class).toProvider(KeysValuesProvider.class);
  bind(InvalidInputExceptionEvaluator.class).asEagerSingleton();
  bind(Channel.class).toProvider(ChannelProvider.class);
  bind(HttpMethod.class).toProvider(MethodProvider.class);
  bind(Method.class).toProvider(MethodProvider2.class);
  bind(Path.class).toProvider(PathProvider.class);
  bind(BuiltInPageAnnotationHandler.class).asEagerSingleton();
  bind(ResponseHeaders.class).toProvider(ResponseHeadersProvider.class);
  bind(ScheduledExecutorService.class).annotatedWith(Names.named(DELAY_EXECUTOR)).toProvider(DelayExecutorProvider.class);
  bind(new CL()).toProvider(ChainProvider.class);
}",0.9930562974041236
17727,"@Override public String toString(Object msg){
  if (msg instanceof String) {
    return msg.toString();
  }
  try {
    return codec.writeValueAsString(codec);
  }
 catch (  IOException ex) {
    ctrl.internalOnError(ex);
    return null;
  }
}","@Override public String toString(Object msg){
  if (msg instanceof String) {
    return msg.toString();
  }
  try {
    return codec.writeValueAsString(msg);
  }
 catch (  IOException ex) {
    ctrl.internalOnError(ex);
    return null;
  }
}",0.9835390946502056
17728,"public Message(String eventType,long id,Object message){
  this.eventType=eventType;
  this.id=id;
  this.message=message;
}","public Message(EventChannelName channelName,String eventType,long id,Object message){
  this.channelName=channelName;
  this.eventType=eventType;
  this.id=id;
  this.message=message;
}",0.8025889967637541
17729,"/** 
 * Publish an event
 * @param message The message. If non-string, it will be encoded as JSON bydefault
 * @return this
 */
public EventSink publish(Object message){
  if (shutdown || channels.isEmpty()) {
    return this;
  }
  Checks.notNull(""String_Node_Str"",message);
  Message msg=new Message(count.getAndIncrement(),message);
  messages.offer(msg);
  return this;
}","/** 
 * Publish an event to a named channel
 * @param name The name of the subchannel
 * @param message The message. If non-string, it will be encoded as JSON bydefault
 * @return this
 */
public EventSink publish(EventChannelName name,Object message){
  Checks.notNull(""String_Node_Str"",message);
  if (shutdown || channels.isEmpty()) {
    return this;
  }
  for (  EventChannelName n : channelsForName.keySet()) {
    if (name.equals(n)) {
      name=n;
      break;
    }
  }
  long id=name == null ? count.getAndIncrement() : name.nextId();
  Message msg=new Message(name,id,message);
  messages.offer(msg);
  return this;
}",0.5737051792828686
17730,"/** 
 * Register a channel which will receive events from this event sink.
 * @param channel A channel
 * @return this
 */
public EventSink register(Channel channel){
  if (!shutdown && channel.isOpen()) {
    channels.add(channel);
  }
  return this;
}","public synchronized EventSink register(EventChannelName name,Channel channel){
  if (!shutdown && channel.isOpen()) {
    channels.add(channel);
    List<Channel> chlls=channelsForName.get(name);
    if (chlls == null) {
      chlls=Lists.newCopyOnWriteArrayList(Arrays.asList(channel));
      channelsForName.put(name,chlls);
    }
 else {
      chlls.add(channel);
    }
    channel.closeFuture().addListener(new RemoveListener(name));
    register(channel);
  }
  return this;
}",0.3160762942779291
17731,"@Inject public SseActeur(EventSink sink){
  add(Headers.CONTENT_TYPE,TYPE);
  add(Headers.CACHE_CONTROL,CacheControl.PRIVATE_NO_CACHE_NO_STORE);
  add(Headers.CONNECTION,Connection.keep_alive);
  setState(new RespondWith(OK));
  setResponseBodyWriter(new L(sink));
  setChunked(true);
}","@Inject public SseActeur(EventSink sink,Provider<EventChannelName> name){
  add(Headers.CONTENT_TYPE,TYPE);
  add(Headers.CACHE_CONTROL,CacheControl.PRIVATE_NO_CACHE_NO_STORE);
  add(Headers.CONNECTION,Connection.keep_alive);
  setState(new RespondWith(OK));
  setResponseBodyWriter(new L(sink,name.get()));
  setChunked(true);
}",0.930081300813008
17732,"public L(EventSink sink){
  this.sink=sink;
}","public L(EventSink sink,EventChannelName name){
  this.sink=sink;
  this.name=name;
}",0.6923076923076923
17733,"@Override public void operationComplete(ChannelFuture future) throws Exception {
  sink.register(future.channel());
}","@Override public void operationComplete(ChannelFuture future) throws Exception {
  if (name == null) {
    sink.register(future.channel());
  }
 else {
    sink.register(name,future.channel());
  }
}",0.740506329113924
17734,"public Set<Class<?>> implicitBindings(){
  Set<Class<?>> types=new LinkedHashSet<>();
  for (  Entry e : entries()) {
    types.addAll(e.bindings);
  }
  ClassLoader cl=type.getClassLoader();
  try {
    for (    URL url : CollectionUtils.toIterable(cl.getResources(""String_Node_Str""))) {
      try (final InputStream in=url.openStream()){
        String[] lines=Streams.readString(in,""String_Node_Str"").split(""String_Node_Str"");
        for (        String line : lines) {
          if (line.isEmpty() || line.startsWith(""String_Node_Str"")) {
            continue;
          }
          System.err.println(""String_Node_Str"" + line + ""String_Node_Str"");
          types.add(cl.loadClass(line));
        }
      }
 catch (      ClassNotFoundException ex) {
        return Exceptions.chuck(ex);
      }
    }
  }
 catch (  IOException ex) {
    return Exceptions.chuck(ex);
  }
  return types;
}","public Set<Class<?>> implicitBindings(){
  Set<Class<?>> types=new LinkedHashSet<>();
  for (  Entry e : entries()) {
    types.addAll(e.bindings);
  }
  ClassLoader cl=type.getClassLoader();
  try {
    for (    URL url : CollectionUtils.toIterable(cl.getResources(""String_Node_Str""))) {
      try (final InputStream in=url.openStream()){
        String[] lines=Streams.readString(in,""String_Node_Str"").split(""String_Node_Str"");
        for (        String line : lines) {
          line=line.trim();
          if (line.isEmpty() || line.startsWith(""String_Node_Str"")) {
            continue;
          }
          System.err.println(""String_Node_Str"" + line + ""String_Node_Str"");
          types.add(cl.loadClass(line));
        }
      }
 catch (      ClassNotFoundException ex) {
        return Exceptions.chuck(ex);
      }
    }
  }
 catch (  IOException ex) {
    return Exceptions.chuck(ex);
  }
  return types;
}",0.9845644983461964
17735,"public final Closables add(Runnable run){
  Checks.notNull(""String_Node_Str"",run);
  add(new RunnableWrapper(run));
  return this;
}","public final Closables add(Runnable run){
  Checks.notNull(""String_Node_Str"",run);
  for (  AutoCloseable clos : closeables) {
    if (clos instanceof RunnableWrapper) {
      RunnableWrapper w=(RunnableWrapper)clos;
      if (w.run == w.run) {
        return this;
      }
    }
  }
  add(new RunnableWrapper(run));
  return this;
}",0.5032258064516129
17736,"Closables(Channel channel,Application application){
  channel.closeFuture().addListener(closeListener);
  this.application=application;
}","Closables(Channel channel,ApplicationControl application){
  channel.closeFuture().addListener(closeListener);
  this.application=application;
}",0.9750889679715302
17737,"private Iterator<Acteur> annotationActeurs(){
  List<Acteur> acteurs=new LinkedList<>();
  Class<?> c=getClass();
  PathRegex regex=c.getAnnotation(PathRegex.class);
  ActeurFactory a=null;
  if (regex != null) {
    ActeurFactory af=a=getApplication().getDependencies().getInstance(ActeurFactory.class);
    acteurs.add(af.matchPath(regex.value()));
  }
  Path path=c.getAnnotation(Path.class);
  if (path != null) {
    ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
    acteurs.add(af.globPathMatch(path.value()));
  }
  Methods m=c.getAnnotation(Methods.class);
  if (m != null) {
    ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
    acteurs.add(af.matchMethods(m.value()));
  }
  RequiredUrlParameters params=c.getAnnotation(RequiredUrlParameters.class);
  if (params != null) {
    ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
switch (params.combination()) {
case ALL:
      acteurs.add(af.requireParameters(params.value()));
    break;
case AT_LEAST_ONE:
  acteurs.add(af.requireAtLeastOneParameter(params.value()));
break;
default :
throw new AssertionError(params.combination());
}
}
RequireParametersIfMethodMatches methodParams=c.getAnnotation(RequireParametersIfMethodMatches.class);
if (methodParams != null) {
ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
acteurs.add(af.requireParametersIfMethodMatches(methodParams.method(),methodParams.value()));
}
ParametersMustBeNumbersIfPresent nums=c.getAnnotation(ParametersMustBeNumbersIfPresent.class);
if (nums != null) {
ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
acteurs.add(af.parametersMustBeNumbersIfTheyArePresent(nums.allowDecimal(),nums.allowNegative(),nums.value()));
}
BasicAuth auth=c.getAnnotation(BasicAuth.class);
if (auth != null) {
acteurs.add(Acteur.wrap(AuthenticationActeur.class,application.getDependencies()));
}
PageAnnotationHandler handler=getApplication().getDependencies().getInstance(PageAnnotationHandler.class);
handler.processAnnotations(this,acteurs);
InjectRequestBodyAs as=c.getAnnotation(InjectRequestBodyAs.class);
if (as != null) {
ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
acteurs.add(af.injectRequestBodyAsJSON(as.value()));
}
return acteurs.iterator();
}","@SuppressWarnings(""String_Node_Str"") private Iterator<Acteur> annotationActeurs(){
  List<Acteur> acteurs=new LinkedList<>();
  Class<?> c=getClass();
  PathRegex regex=c.getAnnotation(PathRegex.class);
  ActeurFactory a=null;
  if (regex != null) {
    ActeurFactory af=a=getApplication().getDependencies().getInstance(ActeurFactory.class);
    acteurs.add(af.matchPath(regex.value()));
  }
  Path path=c.getAnnotation(Path.class);
  if (path != null) {
    ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
    acteurs.add(af.globPathMatch(path.value()));
  }
  Methods m=c.getAnnotation(Methods.class);
  if (m != null) {
    ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
    acteurs.add(af.matchMethods(m.value()));
  }
  MaximumPathLength len=c.getAnnotation(MaximumPathLength.class);
  if (len != null) {
    ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
    acteurs.add(af.maximumPathLength(len.value()));
  }
  BannedUrlParameters banned=c.getAnnotation(BannedUrlParameters.class);
  if (banned != null) {
    ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
    acteurs.add(af.banParameters(banned.value()));
  }
  RequireAtLeastOneUrlParameterFrom atLeastOneOf=c.getAnnotation(RequireAtLeastOneUrlParameterFrom.class);
  if (atLeastOneOf != null) {
    ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
    acteurs.add(af.requireAtLeastOneParameter(banned.value()));
  }
  RequiredUrlParameters params=c.getAnnotation(RequiredUrlParameters.class);
  if (params != null) {
    ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
switch (params.combination()) {
case ALL:
      acteurs.add(af.requireParameters(params.value()));
    break;
case AT_LEAST_ONE:
  acteurs.add(af.requireAtLeastOneParameter(params.value()));
break;
default :
throw new AssertionError(params.combination());
}
}
RequireParametersIfMethodMatches methodParams=c.getAnnotation(RequireParametersIfMethodMatches.class);
if (methodParams != null) {
ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
acteurs.add(af.requireParametersIfMethodMatches(methodParams.method(),methodParams.value()));
}
ParametersMustBeNumbersIfPresent nums=c.getAnnotation(ParametersMustBeNumbersIfPresent.class);
if (nums != null) {
ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
acteurs.add(af.parametersMustBeNumbersIfTheyArePresent(nums.allowDecimal(),nums.allowNegative(),nums.value()));
}
BasicAuth auth=c.getAnnotation(BasicAuth.class);
if (auth != null) {
acteurs.add(Acteur.wrap(AuthenticationActeur.class,application.getDependencies()));
}
PageAnnotationHandler handler=getApplication().getDependencies().getInstance(PageAnnotationHandler.class);
handler.processAnnotations(this,acteurs);
InjectRequestBodyAs as=c.getAnnotation(InjectRequestBodyAs.class);
if (as != null) {
ActeurFactory af=a != null ? a : (a=getApplication().getDependencies().getInstance(ActeurFactory.class));
acteurs.add(af.injectRequestBodyAsJSON(as.value()));
}
return acteurs.iterator();
}",0.8532249873031996
17738,"/** 
 * Returns a CountDownLatch which can be used in tests to wait until a request has been fully processed
 * @param id The request unique id
 * @param event The event - the request itself
 * @param channel The channel
 * @return A latch which will count down when we're done
 */
@Override public final CountDownLatch onEvent(final RequestID id,final Event<?> event,final Channel channel){
  Iterator<Page> it=application.iterator();
  CountDownLatch latch=new CountDownLatch(1);
  Closables closables=new Closables(channel,application);
  PageRunner pageRunner=new PageRunner(application,it,latch,id,event,channel,scheduler,closables);
  application.getWorkerThreadPool().submit(pageRunner);
  return latch;
}","/** 
 * Returns a CountDownLatch which can be used in tests to wait until a request has been fully processed.  Note that the latch will be called when the <i>headers have been flushed</i> - it is entirely possible that a listener has been attached which will write a body after that. Add a close listener to the channel to detect that the channel has been completely written to.
 * @param id The request unique id
 * @param event The event - the request itself
 * @param channel The channel
 * @return A latch which will count down when we're done
 */
@Override public final CountDownLatch onEvent(final RequestID id,final Event<?> event,final Channel channel){
  Iterator<Page> it=application.iterator();
  CountDownLatch latch=new CountDownLatch(1);
  Closables closables=new Closables(channel,application.control());
  PageRunner pageRunner=new PageRunner(application,it,latch,id,event,channel,scheduler,closables);
  application.getWorkerThreadPool().submit(pageRunner);
  return latch;
}",0.8356807511737089
17739,"@Override public void operationComplete(final ChannelFuture future) throws Exception {
  Callable<Void> c=new Callable<Void>(){
    @Override public Void call() throws Exception {
      inOperationComplete=true;
      try {
        ResponseWriterListener.this.future=future;
        ResponseWriter.Status status=writer.write(evt,ResponseWriterListener.this,callCount++);
        if (status.isCallback()) {
          ResponseWriterListener.this.future=ResponseWriterListener.this.future.addListener(ResponseWriterListener.this);
        }
 else         if (status == Status.DONE) {
          if (chunked) {
            ResponseWriterListener.this.future=ResponseWriterListener.this.future.channel().writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);
          }
          if (shouldClose) {
            ResponseWriterListener.this.future=ResponseWriterListener.this.future.addListener(CLOSE);
          }
        }
      }
  finally {
        inOperationComplete=false;
      }
      return null;
    }
  }
;
  if (!inOperationComplete) {
    c.call();
  }
 else {
    svc.submit(c);
  }
}","@Override public void operationComplete(final ChannelFuture future) throws Exception {
  try {
    if (entryCount > 0) {
      svc.submit(new Runnable(){
        @Override public void run(){
          try {
            operationComplete(future);
          }
 catch (          Exception ex) {
            Exceptions.chuck(ex);
          }
        }
      }
);
      return;
    }
    entryCount++;
    Callable<Void> c=new Callable<Void>(){
      @Override public Void call() throws Exception {
        inOperationComplete=true;
        try {
          ResponseWriterListener.this.future=future;
          ResponseWriter.Status status=writer.write(evt,ResponseWriterListener.this,callCount++);
          if (status.isCallback()) {
            ResponseWriterListener.this.future=ResponseWriterListener.this.future.addListener(ResponseWriterListener.this);
          }
 else           if (status == Status.DONE) {
            if (chunked) {
              ResponseWriterListener.this.future=ResponseWriterListener.this.future.channel().writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);
            }
            if (shouldClose) {
              ResponseWriterListener.this.future=ResponseWriterListener.this.future.addListener(CLOSE);
            }
          }
        }
  finally {
          inOperationComplete=false;
        }
        return null;
      }
    }
;
    if (!inOperationComplete) {
      c.call();
    }
 else {
      svc.submit(c);
    }
  }
  finally {
    entryCount--;
  }
}",0.7403100775193798
17740,"@Override public State getState(){
  Page page=deps.getInstance(Page.class);
  page.getReponseHeaders().setETagProvider(this);
  CheckIfNoneMatchHeader h=deps.getInstance(CheckIfNoneMatchHeader.class);
  State result=h.getState();
  getResponse().merge(h.getResponse());
  return result;
}","@Override public State getState(){
  return getDelegate().getState();
}",0.3388888888888889
17741,"/** 
 * Get the set of page instances, constructing them dynamically. Note that this should be called inside the application scope, with any objects which need to be available for injection available in the scope.
 * @return An iterator
 */
@Override public Iterator<Page> iterator(){
  final Iterator<Object> it=pages.iterator();
  return new Iterator<Page>(){
    @Override public boolean hasNext(){
      return it.hasNext();
    }
    @Override public Page next(){
      try {
        Object o=it.next();
        Page result;
        if (o instanceof Class<?>) {
          Class<? extends Page> clazz=(Class<? extends Page>)o;
          result=deps.getInstance(clazz);
        }
 else {
          result=Page.class.cast(o);
        }
        result.setApplication(Application.this);
        return result;
      }
 catch (      Exception e) {
        Application.this.internalOnError(e);
        return Exceptions.chuck(e);
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
  }
;
}","/** 
 * Get the set of page instances, constructing them dynamically. Note that this should be called inside the application scope, with any objects which need to be available for injection available in the scope.
 * @return An iterator
 */
@Override public Iterator<Page> iterator(){
  return new InstantiatingIterators(deps).iterable(pages,Page.class).iterator();
}",0.425561797752809
17742,"protected Acteurs getActeurs(ExecutorService exe,ReentrantScope scope){
  return new ActeursImpl(exe,scope,this,getApplication().getDependencies().getInstance(Settings.class));
}","Acteurs getActeurs(ExecutorService exe,ReentrantScope scope){
  return new ActeursImpl(exe,scope,this,getApplication().getDependencies().getInstance(Settings.class));
}",0.9710982658959536
17743,"public synchronized ResponseHeaders getReponseHeaders(){
  return responseHeaders;
}","public final ResponseHeaders getReponseHeaders(){
  return responseHeaders;
}",0.906832298136646
17744,"/** 
 * Do new model operations
 */
public BufferedImage expensiveModelOperations(BuildData bfnbd,boolean forMain,BTProgressMonitor monitor) throws IOException, AsynchExitRequestException {
  Dimension screenSize=(forMain && (headlessOracle_ == null)) ? Toolkit.getDefaultToolkit().getScreenSize() : new Dimension(600,800);
  BioFabricNetwork bfn=new BioFabricNetwork(bfnbd,pMan_,monitor);
  bfp_.installModel(bfn,monitor);
  int[] preZooms=bfp_.calcZoomSettings(screenSize);
  BufferedImage topImage=null;
  if (headlessOracle_ == null) {
    if (forMain) {
      BufferBuilder bb=new BufferBuilder(null,100,bfp_,bfp_.getBucketRend(),bfp_.getBufImgStack());
      topImage=bb.buildBufs(preZooms,bfp_,25,monitor);
      bfp_.setBufBuilder(bb);
    }
 else {
      BufferBuilder bb=new BufferBuilder(bfp_,bfp_.getBucketRend(),bfp_.getBufImgStack());
      topImage=bb.buildOneBuf(preZooms);
      bfp_.setBufBuilder(null);
    }
  }
  return (topImage);
}","/** 
 * Do new model operations
 */
public BufferedImage expensiveModelOperations(BuildData bfnbd,boolean forMain,BTProgressMonitor monitor) throws IOException, AsynchExitRequestException {
  Dimension screenSize=(forMain && (headlessOracle_ == null)) ? Toolkit.getDefaultToolkit().getScreenSize() : new Dimension(600,800);
  BioFabricNetwork bfn=new BioFabricNetwork(bfnbd,pMan_,monitor);
  bfp_.installModel(bfn,monitor);
  int[] preZooms=bfp_.calcZoomSettings(screenSize);
  BufferedImage topImage=null;
  if (headlessOracle_ == null) {
    if (forMain) {
      BufferBuilder bb=new BufferBuilder(null,100,bfp_,bfp_.getBucketRend(),bfp_.getBufImgStack());
      topImage=bb.buildBufs(preZooms,bfp_,25,monitor);
      bfp_.setBufBuilder(bb);
    }
 else {
      BufferBuilder bb=new BufferBuilder(bfp_,bfp_.getBucketRend(),bfp_.getBufImgStack());
      topImage=bb.buildOneBuf();
      bfp_.setBufBuilder(null);
    }
  }
  return (topImage);
}",0.9957894736842106
17745,"/** 
 * Do new model operations
 */
public BufferedImage expensiveRecolorOperations(boolean forMain,BTProgressMonitor monitor) throws IOException, AsynchExitRequestException {
  Dimension screenSize=(forMain) ? Toolkit.getDefaultToolkit().getScreenSize() : new Dimension(800,400);
  screenSize.setSize((int)(screenSize.getWidth() * 0.8),(int)(screenSize.getHeight() * 0.4));
  colGen_.newColorModel();
  bfp_.changePaint(monitor);
  int[] preZooms=bfp_.getZoomController().getZoomIndices();
  BufferedImage topImage=null;
  if (forMain) {
    BufferBuilder bb=new BufferBuilder(null,100,bfp_,bfp_.getBucketRend(),bfp_.getBufImgStack());
    topImage=bb.buildBufs(preZooms,bfp_,24,monitor);
    bfp_.setBufBuilder(bb);
  }
 else {
    BufferBuilder bb=new BufferBuilder(bfp_,bfp_.getBucketRend(),bfp_.getBufImgStack());
    topImage=bb.buildOneBuf(preZooms);
    bfp_.setBufBuilder(null);
  }
  return (topImage);
}","/** 
 * Do new model operations
 */
public BufferedImage expensiveRecolorOperations(boolean forMain,BTProgressMonitor monitor) throws IOException, AsynchExitRequestException {
  Dimension screenSize=(forMain) ? Toolkit.getDefaultToolkit().getScreenSize() : new Dimension(800,400);
  screenSize.setSize((int)(screenSize.getWidth() * 0.8),(int)(screenSize.getHeight() * 0.4));
  colGen_.newColorModel();
  bfp_.changePaint(monitor);
  int[] zoomLevels=bfp_.getZoomController().getZoomLevels();
  BufferedImage topImage=null;
  if (forMain) {
    BufferBuilder bb=new BufferBuilder(null,100,bfp_,bfp_.getBucketRend(),bfp_.getBufImgStack());
    topImage=bb.buildBufs(zoomLevels,bfp_,24,monitor);
    bfp_.setBufBuilder(bb);
  }
 else {
    BufferBuilder bb=new BufferBuilder(bfp_,bfp_.getBucketRend(),bfp_.getBufImgStack());
    topImage=bb.buildOneBuf();
    bfp_.setBufBuilder(null);
  }
  return (topImage);
}",0.947888096544158
17746,"/** 
 * This is currently the entire contorted calculation of zooms
 */
public int[] calcZoomSettings(Dimension screenSize){
  double screenAR=screenSize.getWidth() / screenSize.getHeight();
  double worldAR=worldRectNetAR_.getWidth() / worldRectNetAR_.getHeight();
  double worldWidthScreenAR;
  double worldHeightScreenAR;
  double zoom;
  if (worldAR > screenAR) {
    worldWidthScreenAR=worldRectNetAR_.getWidth();
    worldHeightScreenAR=worldWidthScreenAR / screenAR;
    zoom=screenSize.getWidth() / worldRectNetAR_.getWidth();
  }
 else {
    worldHeightScreenAR=worldRectNetAR_.getHeight();
    worldWidthScreenAR=worldHeightScreenAR * screenAR;
    zoom=screenSize.getHeight() / worldRectNetAR_.getHeight();
  }
  screenDim_=new Dimension(screenSize);
  bis_=new ImgAndBufPool(50000);
  double worldCenterX=worldRectNetAR_.getCenterX();
  double worldCenterY=worldRectNetAR_.getCenterY();
  double worldULX=worldCenterX - (worldWidthScreenAR / 2.0);
  double worldULY=worldCenterY - (worldHeightScreenAR / 2.0);
  worldRectScreenAR_=new Rectangle2D.Double(worldULX,worldULY,worldWidthScreenAR,worldHeightScreenAR);
  double maxZoom=screenSize.getHeight() / (4.0 * GRID_SIZE);
  double transitionZoom=screenSize.getWidth() / (1.0E4 * GRID_SIZE);
  double lastZoom=zoom;
  ArrayList<Double> zoomList=new ArrayList<Double>();
  ArrayList<Integer> forRet=new ArrayList<Integer>();
  int count=0;
  while ((lastZoom < maxZoom) || (count < 1)) {
    Double zObj=Double.valueOf(lastZoom);
    zoomList.add(zObj);
    if ((lastZoom < transitionZoom) || (count < 2)) {
      Integer index=Integer.valueOf(count);
      zoomMap_.put(zObj,index);
      forRet.add(index);
    }
    count++;
    lastZoom*=2.0;
  }
  bucketRend_.setModelDims(screenDim_,worldRectScreenAR_,bis_);
  int[] zooms=new int[forRet.size()];
  double[] zoomVals=new double[zoomList.size()];
  count=0;
  for (  Integer zo : forRet) {
    zooms[count++]=zo.intValue();
  }
  count=0;
  for (  Double zo : zoomList) {
    zoomVals[count++]=zo.doubleValue();
  }
  zcs_.setZoomPoints(zoomVals);
  return (zooms);
}","/** 
 * This is currently the entire contorted calculation of zooms
 */
public int[] calcZoomSettings(Dimension screenSize){
  double screenAR=screenSize.getWidth() / screenSize.getHeight();
  double worldAR=worldRectNetAR_.getWidth() / worldRectNetAR_.getHeight();
  double worldWidthScreenAR;
  double worldHeightScreenAR;
  double zoom;
  if (worldAR > screenAR) {
    worldWidthScreenAR=worldRectNetAR_.getWidth();
    worldHeightScreenAR=worldWidthScreenAR / screenAR;
    zoom=screenSize.getWidth() / worldRectNetAR_.getWidth();
  }
 else {
    worldHeightScreenAR=worldRectNetAR_.getHeight();
    worldWidthScreenAR=worldHeightScreenAR * screenAR;
    zoom=screenSize.getHeight() / worldRectNetAR_.getHeight();
  }
  screenDim_=new Dimension(screenSize);
  bis_=new ImgAndBufPool(50000);
  double worldCenterX=worldRectNetAR_.getCenterX();
  double worldCenterY=worldRectNetAR_.getCenterY();
  double worldULX=worldCenterX - (worldWidthScreenAR / 2.0);
  double worldULY=worldCenterY - (worldHeightScreenAR / 2.0);
  worldRectScreenAR_=new Rectangle2D.Double(worldULX,worldULY,worldWidthScreenAR,worldHeightScreenAR);
  double maxZoom=screenSize.getHeight() / (4.0 * GRID_SIZE);
  double transitionZoom=screenSize.getWidth() / (1.0E4 * GRID_SIZE);
  double lastZoom=zoom;
  ArrayList<Double> zoomList=new ArrayList<Double>();
  ArrayList<Integer> forRet=new ArrayList<Integer>();
  int count=0;
  while ((lastZoom < maxZoom) || (count < 1)) {
    Double zObj=Double.valueOf(lastZoom);
    zoomList.add(zObj);
    if ((lastZoom < transitionZoom) || (count < 2)) {
      Integer index=Integer.valueOf(count);
      zoomMap_.put(zObj,index);
      forRet.add(index);
    }
    count++;
    lastZoom*=2.0;
  }
  bucketRend_.setModelDims(screenDim_,worldRectScreenAR_,bis_);
  int[] zooms=new int[forRet.size()];
  double[] zoomVals=new double[zoomList.size()];
  count=0;
  for (  Integer zo : forRet) {
    zooms[count++]=zo.intValue();
  }
  count=0;
  for (  Double zo : zoomList) {
    zoomVals[count++]=zo.doubleValue();
  }
  zcs_.setZoomPoints(zoomVals);
  zcs_.setZoomLevels(zooms);
  return (zooms);
}",0.9930903025970932
17747,"/** 
 * Simple overview one-shot
 */
public BufferedImage buildOneBuf(int[] zooms){
  screenDim_=new Dimension();
  worldRect_=new Rectangle2D.Double();
  binRender_.dimsForBuf(screenDim_,worldRect_);
  Rectangle worldPiece=UiUtil.rectFromRect2D(worldRect_);
  BufferedImage bi=bis_.fetchImage(screenDim_.width,screenDim_.height,BufferedImage.TYPE_INT_RGB);
  double lpp=linksPerPix(screenDim_,worldPiece);
  BufBuildDrawer useDrawer=(lpp < TRANSITION_LPP_) ? drawRender_ : binRender_;
  useDrawer.drawForBuffer(bi,worldPiece,screenDim_,worldPiece,0,lpp);
  return (bi);
}","/** 
 * Simple overview one-shot
 */
public BufferedImage buildOneBuf(){
  screenDim_=new Dimension();
  worldRect_=new Rectangle2D.Double();
  binRender_.dimsForBuf(screenDim_,worldRect_);
  Rectangle worldPiece=UiUtil.rectFromRect2D(worldRect_);
  BufferedImage bi=bis_.fetchImage(screenDim_.width,screenDim_.height,BufferedImage.TYPE_INT_RGB);
  double lpp=linksPerPix(screenDim_,worldPiece);
  BufBuildDrawer useDrawer=(lpp < TRANSITION_LPP_) ? drawRender_ : binRender_;
  useDrawer.drawForBuffer(bi,worldPiece,screenDim_,worldPiece,0,lpp);
  return (bi);
}",0.9902912621359224
17748,"/** 
 * Display options have changed!
 */
public void optionsHaveChanged(boolean needRebuild,boolean needRecolor){
  if (!needRebuild && !needRecolor) {
    bfp_.repaint();
    return;
  }
  if (needRecolor && !needRebuild) {
    flf_.doRecolor(isForMain_);
  }
 else   if (needRebuild) {
    flf_.doDisplayOptionChange();
  }
  return;
}","/** 
 * Display options have changed!
 */
public void optionsHaveChanged(boolean needRebuild,boolean needRecolor){
  if (!needRebuild && !needRecolor) {
    bfp_.repaint();
    return;
  }
  if (!bfp_.hasAModel()) {
    return;
  }
  if (needRecolor && !needRebuild) {
    flf_.doRecolor(isForMain_);
  }
 else   if (needRebuild) {
    flf_.doDisplayOptionChange();
  }
  return;
}",0.9401947148817804
17749,"/** 
 * Do recolor
 */
public void doRecolor(boolean isForMain){
  File holdIt;
  try {
    holdIt=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    holdIt.deleteOnExit();
  }
 catch (  IOException ioex) {
    holdIt=null;
  }
  System.out.println(""String_Node_Str"");
  NetworkRecolor nb=new NetworkRecolor();
  nb.doNetworkRecolor(isForMain,holdIt);
  return;
}","/** 
 * Do recolor
 */
public void doRecolor(boolean isForMain){
  File holdIt;
  try {
    holdIt=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    holdIt.deleteOnExit();
  }
 catch (  IOException ioex) {
    holdIt=null;
  }
  NetworkRecolor nb=new NetworkRecolor();
  nb.doNetworkRecolor(isForMain,holdIt);
  return;
}",0.942008486562942
17750,"/** 
 * Simple overview one-shot
 */
public BufferedImage buildOneBuf(int[] zooms){
  screenDim_=new Dimension();
  worldRect_=new Rectangle2D.Double();
  binRender_.dimsForBuf(screenDim_,worldRect_);
  Rectangle worldPiece=UiUtil.rectFromRect2D(worldRect_);
  UiUtil.fixMePrintout(""String_Node_Str"");
  UiUtil.fixMePrintout(""String_Node_Str"");
  System.out.println(bis_ + ""String_Node_Str"" + screenDim_);
  if (bis_ == null) {
    System.out.println(bis_ + ""String_Node_Str"" + screenDim_);
  }
  BufferedImage bi=bis_.fetchImage(screenDim_.width,screenDim_.height,BufferedImage.TYPE_INT_RGB);
  double lpp=linksPerPix(screenDim_,worldPiece);
  BufBuildDrawer useDrawer=(lpp < TRANSITION_LPP_) ? drawRender_ : binRender_;
  useDrawer.drawForBuffer(bi,worldPiece,screenDim_,worldPiece,0,lpp);
  return (bi);
}","/** 
 * Simple overview one-shot
 */
public BufferedImage buildOneBuf(int[] zooms){
  screenDim_=new Dimension();
  worldRect_=new Rectangle2D.Double();
  binRender_.dimsForBuf(screenDim_,worldRect_);
  Rectangle worldPiece=UiUtil.rectFromRect2D(worldRect_);
  BufferedImage bi=bis_.fetchImage(screenDim_.width,screenDim_.height,BufferedImage.TYPE_INT_RGB);
  double lpp=linksPerPix(screenDim_,worldPiece);
  BufBuildDrawer useDrawer=(lpp < TRANSITION_LPP_) ? drawRender_ : binRender_;
  useDrawer.drawForBuffer(bi,worldPiece,screenDim_,worldPiece,0,lpp);
  return (bi);
}",0.8289855072463768
17751,"/** 
 * Find link group intervals (same algorithm as Drain Zone calculator
 */
private AnnotationSet findLinkGroupIntervals(List<FabricLink> linkSet,BTProgressMonitor monitor) throws AsynchExitRequestException {
  LoopReporter lr=new LoopReporter(linkSet.size(),20,monitor,0,.25,""String_Node_Str"");
  AnnotationSet annots=new AnnotationSet();
  int startIdx=0;
  String currentRel=linkSet.get(startIdx).getRelation();
  for (int index=0; index <= linkSet.size(); index++) {
    lr.report();
    if (index == linkSet.size()) {
      int endIdx=linkSet.size() - 1;
      AnnotationSet.Annot annot=new AnnotationSet.Annot(currentRel,startIdx,endIdx,0);
      annots.addAnnot(annot);
    }
 else     if (!linkSet.get(index).getRelation().equals(currentRel)) {
      int endIdx=index - 1;
      AnnotationSet.Annot annot=new AnnotationSet.Annot(currentRel,startIdx,endIdx,0);
      annots.addAnnot(annot);
      startIdx=index;
      currentRel=linkSet.get(index).getRelation();
    }
  }
  return (annots);
}","/** 
 * Find link group intervals (same algorithm as Drain Zone calculator
 */
private AnnotationSet findLinkGroupIntervals(List<FabricLink> linkSet,BTProgressMonitor monitor) throws AsynchExitRequestException {
  LoopReporter lr=new LoopReporter(linkSet.size(),20,monitor,0,.25,""String_Node_Str"");
  AnnotationSet annots=new AnnotationSet();
  int startIdx=0;
  String currentRel=linkSet.get(startIdx).getRelation();
  for (int index=0; index <= linkSet.size(); index++) {
    lr.report();
    if (index == linkSet.size()) {
      int endIdx=linkSet.size() - 1;
      AnnotationSet.Annot annot=new AnnotationSet.Annot(currentRel,startIdx,endIdx,0,null);
      annots.addAnnot(annot);
    }
 else     if (!linkSet.get(index).getRelation().equals(currentRel)) {
      int endIdx=index - 1;
      AnnotationSet.Annot annot=new AnnotationSet.Annot(currentRel,startIdx,endIdx,0,null);
      annots.addAnnot(annot);
      startIdx=index;
      currentRel=linkSet.get(index).getRelation();
    }
  }
  return (annots);
}",0.9950445986124876
17752,"/** 
 * Install Layer Zero Node Annotations
 */
private void installAnnotations(BioFabricNetwork.NetworkAlignmentBuildData nabd,SortedMap<Integer,List<NID.WithName>> targetsGroup,List<NID.WithName> targets,NodeGroupMap grouper){
  Map<Integer,List<NID.WithName>> layerZeroAnnot=new TreeMap<Integer,List<NID.WithName>>();
  for (int i=0; i < grouper.numGroups(); i++) {
    List<NID.WithName> group=targetsGroup.get(i);
    if (group.isEmpty()) {
      continue;
    }
    layerZeroAnnot.put(i,new ArrayList<NID.WithName>());
    layerZeroAnnot.get(i).add(group.get(0));
    layerZeroAnnot.get(i).add(group.get(group.size() - 1));
  }
  AnnotationSet annots=new AnnotationSet();
  for (  Map.Entry<Integer,List<NID.WithName>> entry : layerZeroAnnot.entrySet()) {
    int nodeGroup=entry.getKey();
    String start=entry.getValue().get(0).toString(), end=entry.getValue().get(1).toString();
    int min=-1, max=-1;
    for (int i=0; i < targets.size(); i++) {
      if (start.equals(targets.get(i).toString())) {
        min=i;
      }
      if (end.equals(targets.get(i).toString())) {
        max=i;
      }
    }
    if (min > max || min < 0) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    AnnotationSet.Annot annot=new AnnotationSet.Annot(grouper.getKey(nodeGroup),min,max,0);
    annots.addAnnot(annot);
  }
  nabd.setNodeAnnotations(annots);
  return;
}","/** 
 * Install Layer Zero Node Annotations
 */
private void installAnnotations(BioFabricNetwork.NetworkAlignmentBuildData nabd,SortedMap<Integer,List<NID.WithName>> targetsGroup,List<NID.WithName> targets,NodeGroupMap grouper){
  Map<Integer,List<NID.WithName>> layerZeroAnnot=new TreeMap<Integer,List<NID.WithName>>();
  for (int i=0; i < grouper.numGroups(); i++) {
    List<NID.WithName> group=targetsGroup.get(i);
    if (group.isEmpty()) {
      continue;
    }
    layerZeroAnnot.put(i,new ArrayList<NID.WithName>());
    layerZeroAnnot.get(i).add(group.get(0));
    layerZeroAnnot.get(i).add(group.get(group.size() - 1));
  }
  AnnotationSet annots=new AnnotationSet();
  for (  Map.Entry<Integer,List<NID.WithName>> entry : layerZeroAnnot.entrySet()) {
    int nodeGroup=entry.getKey();
    String start=entry.getValue().get(0).toString(), end=entry.getValue().get(1).toString();
    int min=-1, max=-1;
    for (int i=0; i < targets.size(); i++) {
      if (start.equals(targets.get(i).toString())) {
        min=i;
      }
      if (end.equals(targets.get(i).toString())) {
        max=i;
      }
    }
    if (min > max || min < 0) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    AnnotationSet.Annot annot=new AnnotationSet.Annot(grouper.getKey(nodeGroup),min,max,0,null);
    annots.addAnnot(annot);
  }
  nabd.setNodeAnnotations(annots);
  return;
}",0.9981916817359856
17753,"/** 
 * Build objcache
 */
public Rectangle2D buildObjCache(List<BioFabricNetwork.NodeInfo> targets,List<BioFabricNetwork.LinkInfo> links,boolean shadeNodes,boolean showShadows,BioFabricNetwork.Extents ext,Map<NID.WithName,Rectangle2D> nameMap,Map<NID.WithName,List<Rectangle2D>> drainMap,Rectangle2D netBounds,AnnotationSet nodeAnnot,AnnotationSet linkAnnot,BTProgressMonitor monitor) throws AsynchExitRequestException {
  nameKeyToPaintZero_.clear();
  nameKeyToPaintOneQuarter_.clear();
  nameKeyToPaintOneHalf_.clear();
  nameKeyToPaintFirst_.clear();
  nameKeyToPaintSecond_.clear();
  nameKeyToPaintThird_.clear();
  nameKeyCount_=0;
  ArrayList<QuadTree.Payload> qtpc=new ArrayList<QuadTree.Payload>();
  FontRenderContext frc=new FontRenderContext(new AffineTransform(),true,true);
  int numLinks=links.size();
  Map<Integer,MinMax> linkExtents=ext.allLinkExtents.get(Boolean.valueOf(showShadows));
  MinMax linkCols=ext.allLinkFullRange.get(Boolean.valueOf(showShadows));
  linkIndex_=new int[(numLinks == 0) ? 0 : linkCols.max + 1 - linkCols.min];
  indexOffset_=linkCols.min;
  Arrays.fill(linkIndex_,-1);
  linkRefs_=links;
  int numNodes=targets.size();
  LoopReporter lr=new LoopReporter(targets.size(),20,monitor,0.0,1.0,""String_Node_Str"");
  HashMap<Integer,MinMax> nodeExtents=ext.allNodeExtents.get(Boolean.valueOf(showShadows));
  MinMax nodeRows=ext.allNodeFullRange.get(Boolean.valueOf(showShadows));
  for (int i=0; i < numNodes; i++) {
    BioFabricNetwork.NodeInfo node=targets.get(i);
    int num=node.nodeRow;
    lr.report();
    buildNodeTextAndRect(node,frc,colGen_,linkExtents,shadeNodes,showShadows,nameMap,drainMap,qtpc);
  }
  nodeIndex_=new int[(numNodes == 0) ? 0 : nodeRows.max + 1 - nodeRows.min];
  nodeIndexOffset_=nodeRows.min;
  Arrays.fill(nodeIndex_,-1);
  nodeRefs_=targets;
  nodesForShadow_=showShadows;
  LoopReporter lr2=new LoopReporter(numLinks,20,monitor,0.0,1.0,""String_Node_Str"");
  for (int i=0; i < numLinks; i++) {
    BioFabricNetwork.LinkInfo link=links.get(i);
    lr2.report();
    linkIndex_[link.getUseColumn(showShadows) - indexOffset_]=i;
  }
  LoopReporter lr3=new LoopReporter(numLinks,20,monitor,0.0,1.0,""String_Node_Str"");
  for (int i=0; i < numNodes; i++) {
    BioFabricNetwork.NodeInfo node=targets.get(i);
    lr3.report();
    nodeIndex_[node.nodeRow - nodeIndexOffset_]=i;
  }
  int annotCount=0;
  if (nodeAnnot != null) {
    LoopReporter lr4=new LoopReporter(nodeAnnot.size(),20,monitor,0.0,1.0,""String_Node_Str"");
    for (    AnnotationSet.Annot an : nodeAnnot) {
      AnnotColor acol=an.getColor();
      AnnotColor col=(acol == null) ? annotColors_[annotCount++ % annotColors_.length] : acol;
      lr4.report();
      buildAnAnnotationRect(an.getRange(),an.getName(),col.getColor(),true,nodeExtents,frc,linkCols,qtpc);
    }
  }
  annotCount=0;
  Color[] useColors=(nodeAnnot != null) ? annotGrays_ : annotColors_;
  if (linkAnnot != null) {
    LoopReporter lr5=new LoopReporter(linkAnnot.size(),20,monitor,0.0,1.0,""String_Node_Str"");
    for (    AnnotationSet.Annot an : linkAnnot) {
      Color col;
      if (nodeAnnot != null) {
        col=annotGrays_[annotCount++ % annotGrays_.length];
      }
 else {
        AnnotColor acol=an.getColor();
        col=(acol == null) ? annotColors_[annotCount++ % annotColors_.length].getColor() : acol.getColor();
      }
      lr5.report();
      buildAnAnnotationRect(an.getRange(),an.getName(),col,false,linkExtents,frc,nodeRows,qtpc);
    }
  }
  DoubMinMax dmmw=new DoubMinMax(netBounds.getMinX(),netBounds.getMaxX());
  DoubMinMax dmmh=new DoubMinMax(netBounds.getMinY(),netBounds.getMaxY());
  for (  QuadTree.Payload qtp : qtpc) {
    Rectangle2D qtpr=qtp.getRect();
    dmmw.update(qtpr.getMinX());
    dmmw.update(qtpr.getMaxX());
    dmmh.update(qtpr.getMinY());
    dmmh.update(qtpr.getMaxY());
  }
  Rectangle2D worldRect=new Rectangle2D.Double(dmmw.min,dmmh.min,dmmw.max - dmmw.min,dmmh.max - dmmh.min);
  names_=new QuadTree(worldRect,5);
  for (  QuadTree.Payload qtp : qtpc) {
    names_.insertPayload(qtp);
  }
  qtpc.clear();
  return (worldRect);
}","/** 
 * Build objcache
 */
public Rectangle2D buildObjCache(List<BioFabricNetwork.NodeInfo> targets,List<BioFabricNetwork.LinkInfo> links,boolean shadeNodes,boolean showShadows,BioFabricNetwork.Extents ext,Map<NID.WithName,Rectangle2D> nameMap,Map<NID.WithName,List<Rectangle2D>> drainMap,Rectangle2D netBounds,AnnotationSet nodeAnnot,AnnotationSet linkAnnot,BTProgressMonitor monitor) throws AsynchExitRequestException {
  nameKeyToPaintZero_.clear();
  nameKeyToPaintOneQuarter_.clear();
  nameKeyToPaintOneHalf_.clear();
  nameKeyToPaintFirst_.clear();
  nameKeyToPaintSecond_.clear();
  nameKeyToPaintThird_.clear();
  nameKeyCount_=0;
  ArrayList<QuadTree.Payload> qtpc=new ArrayList<QuadTree.Payload>();
  FontRenderContext frc=new FontRenderContext(new AffineTransform(),true,true);
  int numLinks=links.size();
  Map<Integer,MinMax> linkExtents=ext.allLinkExtents.get(Boolean.valueOf(showShadows));
  MinMax linkCols=ext.allLinkFullRange.get(Boolean.valueOf(showShadows));
  linkIndex_=new int[(numLinks == 0) ? 0 : linkCols.max + 1 - linkCols.min];
  indexOffset_=linkCols.min;
  Arrays.fill(linkIndex_,-1);
  linkRefs_=links;
  int numNodes=targets.size();
  LoopReporter lr=new LoopReporter(targets.size(),20,monitor,0.0,1.0,""String_Node_Str"");
  HashMap<Integer,MinMax> nodeExtents=ext.allNodeExtents.get(Boolean.valueOf(showShadows));
  MinMax nodeRows=ext.allNodeFullRange.get(Boolean.valueOf(showShadows));
  for (int i=0; i < numNodes; i++) {
    BioFabricNetwork.NodeInfo node=targets.get(i);
    int num=node.nodeRow;
    lr.report();
    buildNodeTextAndRect(node,frc,colGen_,linkExtents,shadeNodes,showShadows,nameMap,drainMap,qtpc);
  }
  nodeIndex_=new int[(numNodes == 0) ? 0 : nodeRows.max + 1 - nodeRows.min];
  nodeIndexOffset_=nodeRows.min;
  Arrays.fill(nodeIndex_,-1);
  nodeRefs_=targets;
  nodesForShadow_=showShadows;
  LoopReporter lr2=new LoopReporter(numLinks,20,monitor,0.0,1.0,""String_Node_Str"");
  for (int i=0; i < numLinks; i++) {
    BioFabricNetwork.LinkInfo link=links.get(i);
    lr2.report();
    linkIndex_[link.getUseColumn(showShadows) - indexOffset_]=i;
  }
  LoopReporter lr3=new LoopReporter(numLinks,20,monitor,0.0,1.0,""String_Node_Str"");
  for (int i=0; i < numNodes; i++) {
    BioFabricNetwork.NodeInfo node=targets.get(i);
    lr3.report();
    nodeIndex_[node.nodeRow - nodeIndexOffset_]=i;
  }
  int annotCount=0;
  if (nodeAnnot != null) {
    LoopReporter lr4=new LoopReporter(nodeAnnot.size(),20,monitor,0.0,1.0,""String_Node_Str"");
    for (    AnnotationSet.Annot an : nodeAnnot) {
      AnnotColor acol=an.getColor();
      AnnotColor col=(acol == null) ? annotColors_[annotCount++ % annotColors_.length] : acol;
      lr4.report();
      buildAnAnnotationRect(an.getRange(),an.getName(),col.getColor(),true,nodeExtents,frc,linkCols,qtpc);
    }
  }
  annotCount=0;
  if (linkAnnot != null) {
    LoopReporter lr5=new LoopReporter(linkAnnot.size(),20,monitor,0.0,1.0,""String_Node_Str"");
    for (    AnnotationSet.Annot an : linkAnnot) {
      Color col;
      if (nodeAnnot != null) {
        col=annotGrays_[annotCount++ % annotGrays_.length];
      }
 else {
        AnnotColor acol=an.getColor();
        col=(acol == null) ? annotColors_[annotCount++ % annotColors_.length].getColor() : acol.getColor();
      }
      lr5.report();
      buildAnAnnotationRect(an.getRange(),an.getName(),col,false,linkExtents,frc,nodeRows,qtpc);
    }
  }
  DoubMinMax dmmw=new DoubMinMax(netBounds.getMinX(),netBounds.getMaxX());
  DoubMinMax dmmh=new DoubMinMax(netBounds.getMinY(),netBounds.getMaxY());
  for (  QuadTree.Payload qtp : qtpc) {
    Rectangle2D qtpr=qtp.getRect();
    dmmw.update(qtpr.getMinX());
    dmmw.update(qtpr.getMaxX());
    dmmh.update(qtpr.getMinY());
    dmmh.update(qtpr.getMaxY());
  }
  Rectangle2D worldRect=new Rectangle2D.Double(dmmw.min,dmmh.min,dmmw.max - dmmw.min,dmmh.max - dmmh.min);
  names_=new QuadTree(worldRect,5);
  for (  QuadTree.Payload qtp : qtpc) {
    names_.insertPayload(qtp);
  }
  qtpc.clear();
  return (worldRect);
}",0.9913814331445456
17754,"/** 
 * existingOrd's link order will follow groupOrder's relation order.
 */
private void orderNetworkByGroups(SortedMap<Integer,FabricLink> existingOrd,List<String> groupOrder){
  Map<String,List<FabricLink>> groups=new TreeMap<String,List<FabricLink>>();
  for (  Map.Entry<Integer,FabricLink> entry : existingOrd.entrySet()) {
    FabricLink fl=entry.getValue();
    String rel=fl.getRelation();
    if (groups.get(rel) == null) {
      groups.put(rel,new ArrayList<FabricLink>());
    }
    groups.get(rel).add(fl);
  }
  int rowIdx=0;
  for (  String relation : groupOrder) {
    List<FabricLink> group=groups.get(relation);
    for (    FabricLink fl : group) {
      existingOrd.put(rowIdx,fl);
      rowIdx++;
    }
  }
  return;
}","/** 
 * existingOrd's link order will follow groupOrder's relation order.
 */
private void orderNetworkByGroups(SortedMap<Integer,FabricLink> existingOrd,List<String> groupOrder){
  Map<String,List<FabricLink>> groups=new TreeMap<String,List<FabricLink>>();
  for (  Map.Entry<Integer,FabricLink> entry : existingOrd.entrySet()) {
    FabricLink fl=entry.getValue();
    String rel=fl.getRelation();
    if (groups.get(rel) == null) {
      groups.put(rel,new ArrayList<FabricLink>());
    }
    groups.get(rel).add(fl);
  }
  int rowIdx=0;
  for (  String suffix : groupOrder) {
    for (    String fullRel : groups.keySet()) {
      if (bestSuffixMatch(fullRel,suffix,groupOrder)) {
        List<FabricLink> group=groups.get(fullRel);
        for (        FabricLink fl : group) {
          existingOrd.put(rowIdx,fl);
          rowIdx++;
        }
      }
    }
  }
  return;
}",0.8691358024691358
17755,"/** 
 * Process a link set
 */
private SortedMap<Integer,FabricLink> defaultLinkToColumn(SortedMap<Integer,SortedSet<Integer>> rankedLinks,Map<Link,SortedMap<FabricLink.AugRelation,FabricLink>> relsForPair,HashMap<Integer,String> rowToTarg,BioFabricNetwork.RelayoutBuildData rbd){
  TreeMap<Integer,FabricLink> linkOrder=new TreeMap<Integer,FabricLink>();
  ArrayList<String> microRels;
  ArrayList<String> macroRels;
  if (rbd.layoutMode == BioFabricNetwork.LayoutMode.PER_NODE_MODE) {
    microRels=new ArrayList<String>(rbd.linkGroups);
    macroRels=null;
  }
 else   if (rbd.layoutMode == BioFabricNetwork.LayoutMode.PER_NETWORK_MODE) {
    microRels=new ArrayList<String>();
    macroRels=new ArrayList<String>(rbd.linkGroups);
  }
 else {
    microRels=new ArrayList<String>();
    macroRels=null;
  }
  if (microRels.isEmpty()) {
    microRels.add(""String_Node_Str"");
  }
  int numRel=microRels.size();
  int colCount=0;
  int rowCount=rbd.nodeOrder.size();
  for (int k=0; k < rowCount; k++) {
    Integer topRow=Integer.valueOf(k);
    for (int i=0; i < numRel; i++) {
      String relOnly=microRels.get(i);
      if (relOnly.equals(""String_Node_Str"")) {
        relOnly=null;
      }
      colCount=shadowLinkToColumn(topRow.intValue(),rankedLinks,relsForPair,relOnly,microRels,colCount,rowToTarg,rbd,linkOrder);
      SortedSet<Integer> perSrc=rankedLinks.get(topRow);
      if (perSrc == null) {
        continue;
      }
      Iterator<Integer> psit=perSrc.iterator();
      while (psit.hasNext()) {
        Integer botRow=psit.next();
        String topNode=rowToTarg.get(topRow);
        String botNode=rowToTarg.get(botRow);
        SortedMap<FabricLink.AugRelation,FabricLink> forPair1=relsForPair.get(new Link(topNode,botNode));
        if (forPair1 != null) {
          Iterator<FabricLink> fp1it=forPair1.values().iterator();
          while (fp1it.hasNext()) {
            FabricLink nextLink=fp1it.next();
            if (!nextLink.isShadow()) {
              if (bestSuffixMatch(nextLink,relOnly,microRels)) {
                Integer shadowKey=Integer.valueOf(colCount++);
                linkOrder.put(shadowKey,nextLink);
              }
            }
          }
        }
        if (!topNode.equals(botNode)) {
          SortedMap<FabricLink.AugRelation,FabricLink> forPair2=relsForPair.get(new Link(botNode,topNode));
          if (forPair2 != null) {
            Iterator<FabricLink> fp2it=forPair2.values().iterator();
            while (fp2it.hasNext()) {
              FabricLink nextLink=fp2it.next();
              if (!nextLink.isShadow()) {
                if (bestSuffixMatch(nextLink,relOnly,microRels)) {
                  Integer shadowKey=Integer.valueOf(colCount++);
                  linkOrder.put(shadowKey,nextLink);
                }
              }
            }
          }
        }
      }
    }
  }
  if (rbd.getMode() == BioFabricNetwork.BuildMode.GROUP_PER_NETWORK_CHANGE) {
    orderNetworkByGroups(linkOrder,macroRels);
  }
  return (linkOrder);
}","/** 
 * Process a link set
 */
private SortedMap<Integer,FabricLink> defaultLinkToColumn(SortedMap<Integer,SortedSet<Integer>> rankedLinks,Map<Link,SortedMap<FabricLink.AugRelation,FabricLink>> relsForPair,HashMap<Integer,String> rowToTarg,BioFabricNetwork.RelayoutBuildData rbd){
  TreeMap<Integer,FabricLink> linkOrder=new TreeMap<Integer,FabricLink>();
  ArrayList<String> microRels;
  ArrayList<String> macroRels;
  if (rbd.layoutMode == BioFabricNetwork.LayoutMode.PER_NODE_MODE) {
    microRels=new ArrayList<String>(rbd.linkGroups);
    macroRels=null;
  }
 else   if (rbd.layoutMode == BioFabricNetwork.LayoutMode.PER_NETWORK_MODE) {
    microRels=new ArrayList<String>();
    macroRels=new ArrayList<String>(rbd.linkGroups);
  }
 else {
    microRels=new ArrayList<String>();
    macroRels=null;
  }
  if (microRels.isEmpty()) {
    microRels.add(""String_Node_Str"");
  }
  int numRel=microRels.size();
  int colCount=0;
  int rowCount=rbd.nodeOrder.size();
  for (int k=0; k < rowCount; k++) {
    Integer topRow=Integer.valueOf(k);
    for (int i=0; i < numRel; i++) {
      String relOnly=microRels.get(i);
      if (relOnly.equals(""String_Node_Str"")) {
        relOnly=null;
      }
      colCount=shadowLinkToColumn(topRow.intValue(),rankedLinks,relsForPair,relOnly,microRels,colCount,rowToTarg,rbd,linkOrder);
      SortedSet<Integer> perSrc=rankedLinks.get(topRow);
      if (perSrc == null) {
        continue;
      }
      Iterator<Integer> psit=perSrc.iterator();
      while (psit.hasNext()) {
        Integer botRow=psit.next();
        String topNode=rowToTarg.get(topRow);
        String botNode=rowToTarg.get(botRow);
        SortedMap<FabricLink.AugRelation,FabricLink> forPair1=relsForPair.get(new Link(topNode,botNode));
        if (forPair1 != null) {
          Iterator<FabricLink> fp1it=forPair1.values().iterator();
          while (fp1it.hasNext()) {
            FabricLink nextLink=fp1it.next();
            if (!nextLink.isShadow()) {
              String augRel=nextLink.getAugRelation().relation;
              if (bestSuffixMatch(augRel,relOnly,microRels)) {
                Integer shadowKey=Integer.valueOf(colCount++);
                linkOrder.put(shadowKey,nextLink);
              }
            }
          }
        }
        if (!topNode.equals(botNode)) {
          SortedMap<FabricLink.AugRelation,FabricLink> forPair2=relsForPair.get(new Link(botNode,topNode));
          if (forPair2 != null) {
            Iterator<FabricLink> fp2it=forPair2.values().iterator();
            while (fp2it.hasNext()) {
              FabricLink nextLink=fp2it.next();
              if (!nextLink.isShadow()) {
                String augRel=nextLink.getAugRelation().relation;
                if (bestSuffixMatch(augRel,relOnly,microRels)) {
                  Integer shadowKey=Integer.valueOf(colCount++);
                  linkOrder.put(shadowKey,nextLink);
                }
              }
            }
          }
        }
      }
    }
  }
  if (rbd.getMode() == BioFabricNetwork.BuildMode.GROUP_PER_NETWORK_CHANGE || (macroRels != null && rbd.bfn != null && rbd.bfn.getLayoutMode().equals(BioFabricNetwork.LayoutMode.PER_NETWORK_MODE))) {
    orderNetworkByGroups(linkOrder,macroRels);
  }
  return (linkOrder);
}",0.955242966751918
17756,"/** 
 * Answer if the given relation has the best suffix match the the given match, given all the options. Thus, ""430"" should match ""30"" instead of ""0"" if both are present.
 */
private boolean bestSuffixMatch(FabricLink nextLink,String relToMatch,List<String> allRels){
  if (relToMatch == null) {
    return (true);
  }
  String augR=nextLink.getAugRelation().relation;
  int topLen=0;
  String topRel=null;
  for (  String aRel : allRels) {
    int matchLen=aRel.length();
    if (matchLen < topLen) {
      continue;
    }
    int ioaRel=augR.indexOf(aRel);
    if ((ioaRel >= 0) && ((ioaRel == (augR.length() - matchLen)))) {
      if (topLen == matchLen) {
        throw new IllegalStateException();
      }
 else       if (topLen < matchLen) {
        topLen=matchLen;
        topRel=aRel;
      }
    }
  }
  if (topRel == null) {
    throw new IllegalStateException();
  }
  return (topRel.equals(relToMatch));
}","/** 
 * Answer if the given relation has the best suffix match with the given match, given all the options. Thus, ""430"" should match ""30"" instead of ""0"" if both are present.
 */
private boolean bestSuffixMatch(String augR,String relToMatch,List<String> allRels){
  if (relToMatch == null) {
    return (true);
  }
  int topLen=0;
  String topRel=null;
  for (  String aRel : allRels) {
    int matchLen=aRel.length();
    if (matchLen < topLen) {
      continue;
    }
    int ioaRel=augR.indexOf(aRel);
    if ((ioaRel >= 0) && ((ioaRel == (augR.length() - matchLen)))) {
      if (topLen == matchLen) {
        throw new IllegalStateException();
      }
 else       if (topLen < matchLen) {
        topLen=matchLen;
        topRel=aRel;
      }
    }
  }
  if (topRel == null) {
    throw new IllegalStateException();
  }
  return (topRel.equals(relToMatch));
}",0.9512058328659564
17757,"/** 
 * Get shadow links into their columns:
 */
private int shadowLinkToColumn(int currDrainRow,SortedMap<Integer,SortedSet<Integer>> rankedLinks,Map<Link,SortedMap<FabricLink.AugRelation,FabricLink>> relsForPair,String relOnly,List<String> allRels,int colCount,HashMap<Integer,String> rowToTarg,BioFabricNetwork.RelayoutBuildData rbd,TreeMap<Integer,FabricLink> linkOrder){
  Iterator<Integer> rlit=rankedLinks.keySet().iterator();
  while (rlit.hasNext()) {
    Integer topRow=rlit.next();
    SortedSet<Integer> perSrc=rankedLinks.get(topRow);
    Iterator<Integer> psit=perSrc.iterator();
    while (psit.hasNext()) {
      Integer botRow=psit.next();
      if (botRow.intValue() != currDrainRow) {
        continue;
      }
      if (topRow.equals(botRow)) {
        continue;
      }
      String topNode=rowToTarg.get(topRow);
      String botNode=rowToTarg.get(botRow);
      SortedMap<FabricLink.AugRelation,FabricLink> forPair1=relsForPair.get(new Link(topNode,botNode));
      if (forPair1 != null) {
        Iterator<FabricLink> fp1it=forPair1.values().iterator();
        while (fp1it.hasNext()) {
          FabricLink nextLink=fp1it.next();
          if (nextLink.isShadow()) {
            if (bestSuffixMatch(nextLink,relOnly,allRels)) {
              Integer shadowKey=Integer.valueOf(colCount++);
              linkOrder.put(shadowKey,nextLink);
            }
          }
        }
      }
      if (!topNode.equals(botNode)) {
        SortedMap<FabricLink.AugRelation,FabricLink> forPair2=relsForPair.get(new Link(botNode,topNode));
        if (forPair2 != null) {
          Iterator<FabricLink> fp2it=forPair2.values().iterator();
          while (fp2it.hasNext()) {
            FabricLink nextLink=fp2it.next();
            if (nextLink.isShadow()) {
              if (bestSuffixMatch(nextLink,relOnly,allRels)) {
                Integer shadowKey=Integer.valueOf(colCount++);
                linkOrder.put(shadowKey,nextLink);
              }
            }
          }
        }
      }
 else {
        throw new IllegalStateException();
      }
    }
  }
  return (colCount);
}","/** 
 * Get shadow links into their columns:
 */
private int shadowLinkToColumn(int currDrainRow,SortedMap<Integer,SortedSet<Integer>> rankedLinks,Map<Link,SortedMap<FabricLink.AugRelation,FabricLink>> relsForPair,String relOnly,List<String> allRels,int colCount,HashMap<Integer,String> rowToTarg,BioFabricNetwork.RelayoutBuildData rbd,TreeMap<Integer,FabricLink> linkOrder){
  Iterator<Integer> rlit=rankedLinks.keySet().iterator();
  while (rlit.hasNext()) {
    Integer topRow=rlit.next();
    SortedSet<Integer> perSrc=rankedLinks.get(topRow);
    Iterator<Integer> psit=perSrc.iterator();
    while (psit.hasNext()) {
      Integer botRow=psit.next();
      if (botRow.intValue() != currDrainRow) {
        continue;
      }
      if (topRow.equals(botRow)) {
        continue;
      }
      String topNode=rowToTarg.get(topRow);
      String botNode=rowToTarg.get(botRow);
      SortedMap<FabricLink.AugRelation,FabricLink> forPair1=relsForPair.get(new Link(topNode,botNode));
      if (forPair1 != null) {
        Iterator<FabricLink> fp1it=forPair1.values().iterator();
        while (fp1it.hasNext()) {
          FabricLink nextLink=fp1it.next();
          if (nextLink.isShadow()) {
            String augRel=nextLink.getAugRelation().relation;
            if (bestSuffixMatch(augRel,relOnly,allRels)) {
              Integer shadowKey=Integer.valueOf(colCount++);
              linkOrder.put(shadowKey,nextLink);
            }
          }
        }
      }
      if (!topNode.equals(botNode)) {
        SortedMap<FabricLink.AugRelation,FabricLink> forPair2=relsForPair.get(new Link(botNode,topNode));
        if (forPair2 != null) {
          Iterator<FabricLink> fp2it=forPair2.values().iterator();
          while (fp2it.hasNext()) {
            FabricLink nextLink=fp2it.next();
            if (nextLink.isShadow()) {
              String augRel=nextLink.getAugRelation().relation;
              if (bestSuffixMatch(augRel,relOnly,allRels)) {
                Integer shadowKey=Integer.valueOf(colCount++);
                linkOrder.put(shadowKey,nextLink);
              }
            }
          }
        }
      }
 else {
        throw new IllegalStateException();
      }
    }
  }
  return (colCount);
}",0.9643683479870432
17758,"/** 
 * Process a link set
 */
private void specifiedLinkToColumn(FabricColorGenerator colGen,SortedMap<Integer,FabricLink> linkOrder,boolean userSpec){
  normalCols_.columnCount=0;
  shadowCols_.columnCount=0;
  int numColors=colGen.getNumColors();
  Iterator<Integer> frkit=linkOrder.keySet().iterator();
  while (frkit.hasNext()) {
    Integer nextCol=frkit.next();
    FabricLink nextLink=linkOrder.get(nextCol);
    Integer useForSDef=Integer.valueOf(shadowCols_.columnCount);
    Integer[] colCounts=addLinkDef(nextLink,numColors,normalCols_.columnCount,shadowCols_.columnCount,colGen);
    shadowCols_.columnCount=colCounts[0].intValue();
    if (colCounts[1] != null) {
      normalCols_.columnCount=colCounts[1].intValue();
    }
    LinkInfo linf=getLinkDefinition(useForSDef,true);
    String topNodeName=rowToTarg_.get(Integer.valueOf(linf.topRow()));
    String botNodeName=rowToTarg_.get(Integer.valueOf(linf.bottomRow()));
    NodeInfo nit=nodeDefs_.get(topNodeName);
    NodeInfo nib=nodeDefs_.get(botNodeName);
    if (!userSpec) {
      if (!linf.isShadow()) {
        List<MinMax> dzst=nit.getDrainZones(true);
        if (dzst.size() == 0) {
          dzst=(new ArrayList<MinMax>());
          dzst.add(new MinMax().init());
          nit.addDrainZone(dzst.get(0),true);
        }
        dzst.get(0).update(linf.getUseColumn(true));
        List<MinMax> dznt=nit.getDrainZones(false);
        if (dznt.size() == 0) {
          dznt.add((new MinMax()).init());
          nit.addDrainZone(dznt.get(0),false);
        }
        dznt.get(0).update(linf.getUseColumn(false));
      }
 else {
        List<MinMax> dzsb=nib.getDrainZones(true);
        if (dzsb.size() == 0) {
          dzsb.add((new MinMax()).init());
          nib.addDrainZone(dzsb.get(0),true);
        }
        dzsb.get(0).update(linf.getUseColumn(true));
      }
    }
  }
  if (userSpec) {
    setDrainZonesWithMultipleLabels(true);
    setDrainZonesWithMultipleLabels(false);
  }
 else {
    setDrainZonesByContig(true);
    setDrainZonesByContig(false);
  }
  return;
}","/** 
 * Process a link set
 */
private void specifiedLinkToColumn(FabricColorGenerator colGen,SortedMap<Integer,FabricLink> linkOrder,boolean userSpec){
  normalCols_.columnCount=0;
  shadowCols_.columnCount=0;
  int numColors=colGen.getNumColors();
  Iterator<Integer> frkit=linkOrder.keySet().iterator();
  while (frkit.hasNext()) {
    Integer nextCol=frkit.next();
    FabricLink nextLink=linkOrder.get(nextCol);
    Integer useForSDef=Integer.valueOf(shadowCols_.columnCount);
    Integer[] colCounts=addLinkDef(nextLink,numColors,normalCols_.columnCount,shadowCols_.columnCount,colGen);
    shadowCols_.columnCount=colCounts[0].intValue();
    if (colCounts[1] != null) {
      normalCols_.columnCount=colCounts[1].intValue();
    }
    LinkInfo linf=getLinkDefinition(useForSDef,true);
    String topNodeName=rowToTarg_.get(Integer.valueOf(linf.topRow()));
    String botNodeName=rowToTarg_.get(Integer.valueOf(linf.bottomRow()));
    NodeInfo nit=nodeDefs_.get(topNodeName);
    NodeInfo nib=nodeDefs_.get(botNodeName);
    if (!userSpec) {
      if (!linf.isShadow()) {
        List<MinMax> dzst=nit.getDrainZones(true);
        if (dzst.size() == 0) {
          dzst=(new ArrayList<MinMax>());
          dzst.add(new MinMax().init());
          nit.addDrainZone(dzst.get(0),true);
        }
        dzst.get(0).update(linf.getUseColumn(true));
        List<MinMax> dznt=nit.getDrainZones(false);
        if (dznt.size() == 0) {
          dznt.add((new MinMax()).init());
          nit.addDrainZone(dznt.get(0),false);
        }
        dznt.get(0).update(linf.getUseColumn(false));
      }
 else {
        List<MinMax> dzsb=nib.getDrainZones(true);
        if (dzsb.size() == 0) {
          dzsb.add((new MinMax()).init());
          nib.addDrainZone(dzsb.get(0),true);
        }
        dzsb.get(0).update(linf.getUseColumn(true));
      }
    }
  }
  if (userSpec || this.linkGrouping_ != null) {
    setDrainZonesWithMultipleLabels(true);
    setDrainZonesWithMultipleLabels(false);
  }
 else {
    setDrainZonesByContig(true);
    setDrainZonesByContig(false);
  }
  return;
}",0.9927710843373494
17759,"/** 
 * Run the selection logic
 */
public void selectionLogic(Point rcbp,Point sloc,Rectangle rect,boolean onePt,boolean showShadows,Set<String> nodes,Set<FabricLink> links,Set<Integer> cols,boolean shiftPressed){
  if ((nodeNameLocations_ == null) || (drainNameLocations_ == null)) {
    return;
  }
  MinMax colRange=null;
  MinMax nodeRange=null;
  if (shiftPressed) {
    colRange=new MinMax();
    colRange.init();
    nodeRange=new MinMax();
    nodeRange.init();
    Iterator<Integer> cit=cols.iterator();
    while (cit.hasNext()) {
      Integer col=cit.next();
      colRange.update(col.intValue());
    }
    Iterator<String> nit=nodes.iterator();
    while (nit.hasNext()) {
      String node=nit.next();
      int row=bfn_.getNodeDefinition(node).nodeRow;
      nodeRange.update(row);
    }
  }
  int startRow=(rcbp == null) ? rect.y : rcbp.y;
  int endRow=(rcbp == null) ? rect.y + rect.height : rcbp.y;
  int startCol=(rcbp == null) ? rect.x : rcbp.x;
  int endCol=(rcbp == null) ? rect.x + rect.width : rcbp.x;
  boolean nodeAdd=false;
  boolean linkAdd=false;
  String gotDrain=null;
  if (onePt) {
    Point2D worldPt=viewToWorld(sloc);
    Iterator<String> dnlit=drainNameLocations_.keySet().iterator();
    while (dnlit.hasNext()) {
      String target=dnlit.next();
      List<Rectangle2D> nameLoc=drainNameLocations_.get(target);
      if (nameLoc.contains(worldPt)) {
        gotDrain=target;
        break;
      }
    }
  }
  boolean gotLink=false;
  for (int row=startRow; row <= endRow; row++) {
    for (int col=startCol; col <= endCol; col++) {
      Integer rowObj=Integer.valueOf(row);
      Integer colObj=Integer.valueOf(col);
      String target=bfn_.getNodeForRow(rowObj);
      if ((target != null) && (gotDrain == null)) {
        boolean gotIt=false;
        if (onePt) {
          BioFabricNetwork.NodeInfo tni=bfn_.getNodeDefinition(target);
          MinMax range=tni.getColRange(showShadows);
          if ((col >= range.min) && (col <= range.max)) {
            if (nodes.contains(target)) {
              nodes.remove(target);
            }
 else {
              if (nodeRange != null) {
                nodeRange.update(row);
              }
              nodes.add(target);
              nodeAdd=true;
            }
            gotIt=true;
          }
        }
        if (!gotIt) {
          Point2D worldPt=rowColToWorld(new Point(col,row));
          Rectangle2D nameLoc=nodeNameLocations_.get(target);
          if (nameLoc.contains(worldPt)) {
            if (nodes.contains(target)) {
              nodes.remove(target);
            }
 else {
              if (nodeRange != null) {
                nodeRange.update(row);
              }
              nodes.add(target);
              nodeAdd=true;
            }
          }
        }
      }
      BioFabricNetwork.LinkInfo linf=bfn_.getLinkDefinition(colObj,showShadows);
      if (linf != null) {
        if ((rowObj.intValue() == linf.getStartRow()) || (rowObj.intValue() == linf.getEndRow())) {
          boolean removeIt=false;
          if (cols.contains(colObj)) {
            cols.remove(colObj);
            removeIt=true;
          }
 else {
            if (colRange != null) {
              colRange.update(col);
            }
            cols.add(colObj);
          }
          String src=bfn_.getSourceForColumn(colObj,showShadows);
          String trg=bfn_.getTargetForColumn(colObj,showShadows);
          if (removeIt) {
            links.remove(linf.getLink());
          }
 else {
            links.add(linf.getLink().clone());
            nodes.add(src);
            nodes.add(trg);
          }
          gotLink=true;
        }
      }
    }
  }
  if (!gotLink && (gotDrain != null)) {
    if (nodes.contains(gotDrain)) {
      nodes.remove(gotDrain);
    }
 else {
      if (nodeRange != null) {
        int row=bfn_.getNodeDefinition(gotDrain).nodeRow;
        nodeRange.update(row);
      }
      nodes.add(gotDrain);
      nodeAdd=true;
    }
  }
  if (shiftPressed) {
    if (linkAdd && (colRange.min != Integer.MAX_VALUE)) {
      for (int i=colRange.min; i < colRange.max; i++) {
        Integer colObj=Integer.valueOf(i);
        cols.add(colObj);
        String src=bfn_.getSourceForColumn(colObj,showShadows);
        String trg=bfn_.getTargetForColumn(colObj,showShadows);
        BioFabricNetwork.LinkInfo linf=bfn_.getLinkDefinition(colObj,showShadows);
        links.add(linf.getLink().clone());
        nodes.add(src);
        nodes.add(trg);
      }
    }
    if (nodeAdd && (nodeRange.min != Integer.MAX_VALUE)) {
      for (int i=nodeRange.min; i < nodeRange.max; i++) {
        Integer rowObj=Integer.valueOf(i);
        String target=bfn_.getNodeForRow(rowObj);
        nodes.add(target);
      }
    }
  }
  return;
}","/** 
 * Run the selection logic
 */
public void selectionLogic(Point rcbp,Point sloc,Rectangle rect,boolean onePt,boolean showShadows,Set<String> nodes,Set<FabricLink> links,Set<Integer> cols,boolean shiftPressed){
  if ((nodeNameLocations_ == null) || (drainNameLocations_ == null)) {
    return;
  }
  MinMax colRange=null;
  MinMax nodeRange=null;
  if (shiftPressed) {
    colRange=new MinMax();
    colRange.init();
    nodeRange=new MinMax();
    nodeRange.init();
    Iterator<Integer> cit=cols.iterator();
    while (cit.hasNext()) {
      Integer col=cit.next();
      colRange.update(col.intValue());
    }
    Iterator<String> nit=nodes.iterator();
    while (nit.hasNext()) {
      String node=nit.next();
      int row=bfn_.getNodeDefinition(node).nodeRow;
      nodeRange.update(row);
    }
  }
  int startRow=(rcbp == null) ? rect.y : rcbp.y;
  int endRow=(rcbp == null) ? rect.y + rect.height : rcbp.y;
  int startCol=(rcbp == null) ? rect.x : rcbp.x;
  int endCol=(rcbp == null) ? rect.x + rect.width : rcbp.x;
  boolean nodeAdd=false;
  boolean linkAdd=false;
  String gotDrain=null;
  if (onePt) {
    Point2D worldPt=viewToWorld(sloc);
    Iterator<String> dnlit=drainNameLocations_.keySet().iterator();
    while (dnlit.hasNext()) {
      String target=dnlit.next();
      List<Rectangle2D> nameLocs=drainNameLocations_.get(target);
      for (      Rectangle2D zone : nameLocs) {
        if (zone.contains(worldPt)) {
          gotDrain=target;
          break;
        }
      }
    }
  }
  boolean gotLink=false;
  for (int row=startRow; row <= endRow; row++) {
    for (int col=startCol; col <= endCol; col++) {
      Integer rowObj=Integer.valueOf(row);
      Integer colObj=Integer.valueOf(col);
      String target=bfn_.getNodeForRow(rowObj);
      if ((target != null) && (gotDrain == null)) {
        boolean gotIt=false;
        if (onePt) {
          BioFabricNetwork.NodeInfo tni=bfn_.getNodeDefinition(target);
          MinMax range=tni.getColRange(showShadows);
          if ((col >= range.min) && (col <= range.max)) {
            if (nodes.contains(target)) {
              nodes.remove(target);
            }
 else {
              if (nodeRange != null) {
                nodeRange.update(row);
              }
              nodes.add(target);
              nodeAdd=true;
            }
            gotIt=true;
          }
        }
        if (!gotIt) {
          Point2D worldPt=rowColToWorld(new Point(col,row));
          Rectangle2D nameLoc=nodeNameLocations_.get(target);
          if (nameLoc.contains(worldPt)) {
            if (nodes.contains(target)) {
              nodes.remove(target);
            }
 else {
              if (nodeRange != null) {
                nodeRange.update(row);
              }
              nodes.add(target);
              nodeAdd=true;
            }
          }
        }
      }
      BioFabricNetwork.LinkInfo linf=bfn_.getLinkDefinition(colObj,showShadows);
      if (linf != null) {
        if ((rowObj.intValue() == linf.getStartRow()) || (rowObj.intValue() == linf.getEndRow())) {
          boolean removeIt=false;
          if (cols.contains(colObj)) {
            cols.remove(colObj);
            removeIt=true;
          }
 else {
            if (colRange != null) {
              colRange.update(col);
            }
            cols.add(colObj);
          }
          String src=bfn_.getSourceForColumn(colObj,showShadows);
          String trg=bfn_.getTargetForColumn(colObj,showShadows);
          if (removeIt) {
            links.remove(linf.getLink());
          }
 else {
            links.add(linf.getLink().clone());
            nodes.add(src);
            nodes.add(trg);
          }
          gotLink=true;
        }
      }
    }
  }
  if (!gotLink && (gotDrain != null)) {
    if (nodes.contains(gotDrain)) {
      nodes.remove(gotDrain);
    }
 else {
      if (nodeRange != null) {
        int row=bfn_.getNodeDefinition(gotDrain).nodeRow;
        nodeRange.update(row);
      }
      nodes.add(gotDrain);
      nodeAdd=true;
    }
  }
  if (shiftPressed) {
    if (linkAdd && (colRange.min != Integer.MAX_VALUE)) {
      for (int i=colRange.min; i < colRange.max; i++) {
        Integer colObj=Integer.valueOf(i);
        cols.add(colObj);
        String src=bfn_.getSourceForColumn(colObj,showShadows);
        String trg=bfn_.getTargetForColumn(colObj,showShadows);
        BioFabricNetwork.LinkInfo linf=bfn_.getLinkDefinition(colObj,showShadows);
        links.add(linf.getLink().clone());
        nodes.add(src);
        nodes.add(trg);
      }
    }
    if (nodeAdd && (nodeRange.min != Integer.MAX_VALUE)) {
      for (int i=nodeRange.min; i < nodeRange.max; i++) {
        Integer rowObj=Integer.valueOf(i);
        String target=bfn_.getNodeForRow(rowObj);
        nodes.add(target);
      }
    }
  }
  return;
}",0.9926992073425116
17760,"public Enumerator createEnumerator() throws IOException {
  PlatformBroker platformBroker=getPlatformBroker();
  Branch branch=getBranch();
  Properties properties=platformBroker.getProperties();
  for (  Ref head : branch.heads.keySet()) {
    if (head.tuples != null)     writeValuesTuple(platformBroker,head);
  }
  LingualFlowFactory flowFactory=platformBroker.getFlowFactory(branch);
  Optiq.writeSQLPlan(properties,flowFactory.getName(),getVolcanoPlanner());
  for (  Ref head : branch.heads.keySet()) {
    TableDef tableDefFor=getTableDefFor(platformBroker,head);
    String[] jarPath=getJarPaths(tableDefFor);
    flowFactory.addSource(head.name,tableDefFor,jarPath);
  }
  FlowListener flowListener=null;
  if (branch.tailTableDef != null) {
    TableDef tableDef=branch.tailTableDef;
    String[] jarPath=getJarPaths(tableDef);
    flowFactory.addSink(tableDef.getName(),tableDef,jarPath);
  }
 else {
    Resource<Protocol,Format,SinkMode> resource=createResultResource(platformBroker,flowFactory);
    flowFactory.addSink(branch.current.getName(),resource);
    if (platformBroker.hasResultSchemaDef())     flowListener=new AddResultTableListener(platformBroker,flowFactory.getLingualConnection());
  }
  String flowPlanPath=setFlowPlanPath(properties,flowFactory.getName());
  ClassLoader jarLoader=getJarClassLoader(platformBroker,flowFactory);
  Flow flow;
  try {
    flow=flowFactory.create();
  }
 catch (  PlannerException exception) {
    LOG.error(""String_Node_Str"",exception);
    if (flowPlanPath != null) {
      LOG.info(""String_Node_Str"",flowPlanPath);
      exception.writeDOT(flowPlanPath);
    }
    throw exception;
  }
  if (flowPlanPath != null) {
    LOG.info(""String_Node_Str"",flowPlanPath);
    flow.writeDOT(flowPlanPath);
  }
  if (flowListener != null)   flow.addListener(flowListener);
  try {
    LOG.debug(""String_Node_Str"",flow.getName());
    if (jarLoader != null)     Thread.currentThread().setContextClassLoader(jarLoader);
    flow.complete();
    LOG.debug(""String_Node_Str"",flow.getName());
  }
 catch (  Exception exception) {
    LOG.error(""String_Node_Str"",exception);
    Throwable rootCause=Throwables.getRootCause(exception);
    if (rootCause != null && exception != rootCause)     LOG.error(""String_Node_Str"",rootCause);
    throw new RuntimeException(""String_Node_Str"",exception);
  }
 finally {
    if (jarLoader != null)     Thread.currentThread().setContextClassLoader(jarLoader.getParent());
  }
  LOG.debug(""String_Node_Str"",flow.getSink().getSinkFields().printVerbose());
  if (branch.isModification) {
    FlowStep flowStep=(FlowStep)flow.getFlowSteps().get(flow.getFlowSteps().size() - 1);
    long rowCount=flowStep.getFlowStepStats().getCounterValue(StepCounters.Tuples_Written);
    return new Linq4j().singletonEnumerable(rowCount).enumerator();
  }
  int size=flow.getSink().getSinkFields().size();
  Type[] types=new Type[size];
  for (int i=0; i < size; i++)   types[i]=flowHolder.physType.fieldClass(i);
  int maxRows=getMaxRows(properties);
  if (size == 1)   return new TapObjectEnumerator(maxRows,types,flow.getFlowProcess(),flow.getSink());
 else   return new TapArrayEnumerator(maxRows,types,flow.getFlowProcess(),flow.getSink());
}","public Enumerator createEnumerator() throws IOException {
  PlatformBroker platformBroker=getPlatformBroker();
  Branch branch=getBranch();
  Properties properties=platformBroker.getProperties();
  for (  Ref head : branch.heads.keySet()) {
    if (head.tuples != null)     writeValuesTuple(platformBroker,head);
  }
  LingualFlowFactory flowFactory=platformBroker.getFlowFactory(branch);
  Optiq.writeSQLPlan(properties,flowFactory.getName(),getVolcanoPlanner());
  for (  Ref head : branch.heads.keySet()) {
    TableDef tableDefFor=getTableDefFor(platformBroker,head);
    String[] jarPath=getJarPaths(tableDefFor);
    flowFactory.addSource(head.name,tableDefFor,jarPath);
  }
  FlowListener flowListener=null;
  if (branch.tailTableDef != null) {
    TableDef tableDef=branch.tailTableDef;
    String[] jarPath=getJarPaths(tableDef);
    flowFactory.addSink(tableDef.getName(),tableDef,jarPath);
  }
 else {
    Resource<Protocol,Format,SinkMode> resource=createResultResource(platformBroker,flowFactory);
    flowFactory.addSink(branch.current.getName(),resource);
    if (platformBroker.hasResultSchemaDef())     flowListener=new AddResultTableListener(platformBroker,flowFactory.getLingualConnection());
  }
  String flowPlanPath=setFlowPlanPath(properties,flowFactory.getName());
  ClassLoader jarLoader=getJarClassLoader(platformBroker,flowFactory);
  if (jarLoader != null)   Thread.currentThread().setContextClassLoader(jarLoader);
  Flow flow;
  try {
    flow=flowFactory.create();
  }
 catch (  PlannerException exception) {
    LOG.error(""String_Node_Str"",exception);
    if (flowPlanPath != null) {
      LOG.info(""String_Node_Str"",flowPlanPath);
      exception.writeDOT(flowPlanPath);
    }
    throw exception;
  }
  if (flowPlanPath != null) {
    LOG.info(""String_Node_Str"",flowPlanPath);
    flow.writeDOT(flowPlanPath);
  }
  if (flowListener != null)   flow.addListener(flowListener);
  try {
    LOG.debug(""String_Node_Str"",flow.getName());
    flow.complete();
    LOG.debug(""String_Node_Str"",flow.getName());
  }
 catch (  Exception exception) {
    LOG.error(""String_Node_Str"",exception);
    Throwable rootCause=Throwables.getRootCause(exception);
    if (rootCause != null && exception != rootCause)     LOG.error(""String_Node_Str"",rootCause);
    throw new RuntimeException(""String_Node_Str"",exception);
  }
 finally {
    if (jarLoader != null)     Thread.currentThread().setContextClassLoader(jarLoader.getParent());
  }
  LOG.debug(""String_Node_Str"",flow.getSink().getSinkFields().printVerbose());
  if (branch.isModification) {
    FlowStep flowStep=(FlowStep)flow.getFlowSteps().get(flow.getFlowSteps().size() - 1);
    long rowCount=flowStep.getFlowStepStats().getCounterValue(StepCounters.Tuples_Written);
    return new Linq4j().singletonEnumerable(rowCount).enumerator();
  }
  int size=flow.getSink().getSinkFields().size();
  Type[] types=new Type[size];
  for (int i=0; i < size; i++)   types[i]=flowHolder.physType.fieldClass(i);
  int maxRows=getMaxRows(properties);
  if (size == 1)   return new TapObjectEnumerator(maxRows,types,flow.getFlowProcess(),flow.getSink());
 else   return new TapArrayEnumerator(maxRows,types,flow.getFlowProcess(),flow.getSink());
}",0.973208722741433
17761,"@Override public Object canonical(Object value){
  if (value == null)   return null;
  Class from=value.getClass();
  if (from == String.class)   return (int)(parse((String)value).getDateValue() / MILLIS_PER_DAY);
  if (Date.class.isAssignableFrom(from))   return (int)(((Date)value).getTime() / MILLIS_PER_DAY);
  if (from == Integer.class || from == int.class)   return value;
  if (from == Long.class || from == long.class)   return ((Long)value).intValue();
  throw new CascadingException(""String_Node_Str"" + Util.getTypeName(from));
}","@Override public Object canonical(Object value){
  if (value == null)   return null;
  Class from=value.getClass();
  if (from == String.class)   return (int)(parse((String)value).getDateValue() / MILLIS_PER_DAY);
  if (Date.class.isAssignableFrom(from))   return (int)Math.ceil((double)((Date)value).getTime() / MILLIS_PER_DAY);
  if (from == Integer.class || from == int.class)   return value;
  if (from == Long.class || from == long.class)   return ((Long)value).intValue();
  throw new CascadingException(""String_Node_Str"" + Util.getTypeName(from));
}",0.982648401826484
17762,"static Branch resolveBranch(Stack stack,CascadingRelNode node,RexProgram program){
  final RelOptCluster cluster=node.getCluster();
  Split split=Split.of(program,cluster.getRexBuilder());
  CascadingRelNode child=(CascadingRelNode)((SingleRel)node).getChild();
  Branch branch=child.visitChild(stack);
  Pipe pipe=branch.current;
  for (  Pair<Op,RexProgram> pair : split.list) {
    pipe=addProgram(cluster,pipe,pair.left,pair.right);
  }
  pipe=stack.addDebug(node,pipe);
  return new Branch(pipe,branch);
}","static Branch resolveBranch(Stack stack,CascadingRelNode node,RexProgram program){
  final RelOptCluster cluster=node.getCluster();
  CascadingRelNode child=(CascadingRelNode)((SingleRel)node).getChild();
  Branch branch=child.visitChild(stack);
  Pipe pipe=branch.current;
  final List<String> names=getIncomingFieldNames(pipe);
  if (names != null && !names.equals(program.getInputRowType().getFieldNames()))   program=renameInputs(program,cluster.getRexBuilder(),names);
  Split split=Split.of(program,cluster.getRexBuilder());
  for (  Pair<Op,RexProgram> pair : split.list) {
    pipe=addProgram(cluster,pipe,pair.left,pair.right);
  }
  pipe=stack.addDebug(node,pipe);
  return new Branch(pipe,branch);
}",0.5770491803278689
17763,"private static Pipe addRename(RelOptCluster cluster,RexProgram program,Pipe pipe){
  if (!unique(program.getInputRowType().getFieldNames()))   throw new AssertionError();
  if (!unique(program.getOutputRowType().getFieldNames()))   throw new AssertionError();
  Fields incomingFields=createTypedFields(cluster,program.getInputRowType());
  Fields renameFields=createTypedFields(cluster,program.getOutputRowType());
  return new Rename(pipe,incomingFields,renameFields);
}","private static Pipe addRename(RelOptCluster cluster,RexProgram program,Pipe pipe){
  if (!unique(program.getInputRowType().getFieldNames()))   throw new AssertionError();
  if (!unique(program.getOutputRowType().getFieldNames()))   throw new AssertionError();
  final Permutation permutation=program.getPermutation();
  if (permutation == null)   throw new AssertionError();
  Fields incomingFields=createTypedFields(cluster,Mappings.apply(permutation.inverse(),program.getInputRowType().getFieldList()));
  Fields renameFields=createTypedFields(cluster,program.getOutputRowType());
  return new Rename(pipe,incomingFields,renameFields);
}",0.8486486486486486
17764,"public Branch visitChild(Stack stack){
  Branch lhsBranch=((CascadingRelNode)left).visitChild(stack);
  Branch rhsBranch=((CascadingRelNode)right).visitChild(stack);
  Pipe leftPipe=new Pipe(""String_Node_Str"",lhsBranch.current);
  leftPipe=stack.addDebug(this,leftPipe,""String_Node_Str"");
  Pipe rightPipe=new Pipe(""String_Node_Str"",rhsBranch.current);
  rightPipe=stack.addDebug(this,rightPipe,""String_Node_Str"");
  Fields lhsGroup=createTypedFieldsFor(getCluster(),leftKeys,left.getRowType());
  Fields rhsGroup=createTypedFieldsFor(getCluster(),rightKeys,right.getRowType());
  Joiner joiner=getJoiner();
  Fields declaredFields=RelUtil.createTypedFieldsFor(this);
  String name=stack.getNameFor(CoGroup.class,leftPipe,rightPipe);
  Pipe coGroup=new CoGroup(name,leftPipe,lhsGroup,rightPipe,rhsGroup,declaredFields,joiner);
  coGroup=stack.addDebug(this,coGroup);
  return new Branch(coGroup,lhsBranch,rhsBranch);
}","public Branch visitChild(Stack stack){
  Branch lhsBranch=((CascadingRelNode)left).visitChild(stack);
  Branch rhsBranch=((CascadingRelNode)right).visitChild(stack);
  Pipe leftPipe=new Pipe(""String_Node_Str"",lhsBranch.current);
  leftPipe=stack.addDebug(this,leftPipe,""String_Node_Str"");
  Pipe rightPipe=new Pipe(""String_Node_Str"",rhsBranch.current);
  rightPipe=stack.addDebug(this,rightPipe,""String_Node_Str"");
  Fields lhsGroup=createTypedFieldsFor(getCluster(),leftKeys,left.getRowType(),false);
  Fields rhsGroup=createTypedFieldsFor(getCluster(),rightKeys,right.getRowType(),false);
  Joiner joiner=getJoiner();
  Fields declaredFields=RelUtil.createTypedFieldsFor(this);
  String name=stack.getNameFor(CoGroup.class,leftPipe,rightPipe);
  Pipe coGroup=new CoGroup(name,leftPipe,lhsGroup,rightPipe,rhsGroup,declaredFields,joiner);
  coGroup=stack.addDebug(this,coGroup);
  return new Branch(coGroup,lhsBranch,rhsBranch);
}",0.9935064935064936
17765,"public static Fields createTypedFieldsFor(RelOptCluster cluster,RelDataTypeField typeField){
  String name=typeField.getName();
  Class type=getJavaType(cluster,typeField.getType());
  return new Fields(name,type);
}","public static Fields createTypedFieldsFor(RelOptCluster cluster,RelDataTypeField typeField,boolean numeric){
  Class type=getJavaType(cluster,typeField.getType());
  if (numeric)   return new Fields(typeField.getIndex(),type);
 else   return new Fields(typeField.getName(),type);
}",0.4788732394366197
17766,"public Branch visitChild(Stack stack){
  RexProgram program=CalcProjectUtil.createRexProgram(this);
  return CalcProjectUtil.resolveBranch(stack,this,program);
}","public Branch visitChild(Stack stack){
  RexProgram program=RexProgram.create(getChild().getRowType(),exps,null,getRowType(),getCluster().getRexBuilder());
  return CalcProjectUtil.resolveBranch(stack,this,program);
}",0.671957671957672
17767,"@Override public Connection connect(String url,Properties info) throws SQLException {
  if (!acceptsURL(url)) {
    LOG.error(""String_Node_Str"",url);
    return null;
  }
  Connection connection=super.connect(url,info);
  if (connection == null) {
    LOG.error(""String_Node_Str"",url,info);
    return null;
  }
  Properties connectionProperties=parseConnectionProperties(url,info);
  if (connectionProperties.contains(VERBOSE_PROP))   Logging.setLogLevel(connectionProperties.getProperty(VERBOSE_PROP,""String_Node_Str""));
  return factory.createConnection(connection,connectionProperties);
}","@Override public Connection connect(String url,Properties info) throws SQLException {
  if (!acceptsURL(url)) {
    LOG.debug(""String_Node_Str"",url);
    return null;
  }
  Connection connection=super.connect(url,info);
  if (connection == null) {
    LOG.error(""String_Node_Str"",url,info);
    return null;
  }
  Properties connectionProperties=parseConnectionProperties(url,info);
  if (connectionProperties.contains(VERBOSE_PROP))   Logging.setLogLevel(connectionProperties.getProperty(VERBOSE_PROP,""String_Node_Str""));
  return factory.createConnection(connection,connectionProperties);
}",0.991554054054054
17768,"private String findUserName(){
  String envUser=System.getenv(HADOOP_USER_ENV);
  String propertyUser=System.getProperty(HADOOP_USER_PROPERTY,envUser);
  String user=getProperties().getProperty(""String_Node_Str"",propertyUser);
  if (user == null || user.isEmpty()) {
    LOG.info(""String_Node_Str"");
    user=System.getProperty(""String_Node_Str"",""String_Node_Str"");
  }
  return user;
}","private String findUserName(){
  String envUser=System.getenv(HADOOP_USER_ENV);
  String propertyUser=System.getProperty(HADOOP_USER_PROPERTY,envUser);
  String user=getProperties().getProperty(""String_Node_Str"");
  if (Strings.isNullOrEmpty(user))   user=propertyUser;
  if (Strings.isNullOrEmpty(user)) {
    LOG.info(""String_Node_Str"");
    user=System.getProperty(""String_Node_Str"",""String_Node_Str"");
  }
  return user;
}",0.854679802955665
17769,"protected List<ProviderDefinition> getDefaultProviderProperties(){
  List<ProviderDefinition> properties=new ArrayList<ProviderDefinition>();
  try {
    Enumeration<URL> resources=Thread.currentThread().getContextClassLoader().getResources(ProviderDefinition.CASCADING_BIND_PROVIDER_PROPERTIES);
    while (resources.hasMoreElements()) {
      URL url=resources.nextElement();
      LOG.debug(""String_Node_Str"",url);
      Properties definitions=new Properties();
      InputStream inputStream=url.openStream();
      definitions.load(inputStream);
      inputStream.close();
      Collections.addAll(properties,getProviderDefinitions(definitions));
    }
  }
 catch (  IOException exception) {
    throw new RuntimeException(""String_Node_Str"",exception);
  }
  return properties;
}","protected Collection<ProviderDefinition> getDefaultProviderProperties(){
  Map<String,ProviderDefinition> results=new LinkedHashMap<String,ProviderDefinition>();
  try {
    Enumeration<URL> resources=this.getClass().getClassLoader().getResources(ProviderDefinition.CASCADING_BIND_PROVIDER_PROPERTIES);
    while (resources.hasMoreElements()) {
      URL url=resources.nextElement();
      LOG.debug(""String_Node_Str"",url);
      InputStream inputStream=url.openStream();
      Properties definitions=new Properties();
      definitions.load(inputStream);
      inputStream.close();
      ProviderDefinition[] providerDefinitions=getProviderDefinitions(definitions);
      for (      ProviderDefinition providerDefinition : providerDefinitions) {
        String providerName=providerDefinition.getProviderName();
        if (results.containsKey(providerName)) {
          LOG.debug(""String_Node_Str"" + providerName + ""String_Node_Str""+ url);
          continue;
        }
        LOG.debug(""String_Node_Str"" + providerName + ""String_Node_Str""+ url);
        results.put(providerName,providerDefinition);
      }
    }
  }
 catch (  IOException exception) {
    throw new RuntimeException(""String_Node_Str"",exception);
  }
  return results.values();
}",0.4348253812100344
17770,"private void registerDefaultProviders(){
  for (  ProviderDefinition providerDefinition : getDefaultProviderProperties()) {
    if (!providerDefinition.getPlatforms().contains(platformBroker.getName()))     continue;
    Map<String,String> properties=providerDefinition.getProperties();
    rootSchemaDef.addProviderDef(providerDefinition.getProviderName(),null,properties,null);
  }
}","private void registerDefaultProviders(){
  for (  ProviderDefinition providerDefinition : getDefaultProviderProperties()) {
    if (!providerDefinition.getPlatforms().contains(platformBroker.getName()))     continue;
    String providerName=providerDefinition.getProviderName();
    LOG.debug(""String_Node_Str"" + providerName);
    Map<String,String> properties=providerDefinition.getProperties();
    rootSchemaDef.addProviderDef(providerName,null,properties,null);
  }
}",0.8331388564760793
17771,"public String getProviderName(){
  return name;
}","public String getProviderName(){
  return providerName;
}",0.9056603773584906
17772,"public ProviderDefinition(String name,Map<String,String> properties){
  this.name=name;
  this.properties=new HashMap<String,String>(properties);
}","public ProviderDefinition(String providerName,Map<String,String> properties){
  this.providerName=providerName;
  this.properties=new HashMap<String,String>(properties);
}",0.9056603773584906
17773,"private String property(String property){
  return String.format(property,name);
}","private String property(String property){
  return String.format(property,providerName);
}",0.9418604651162792
17774,"public synchronized SchemaCatalog getCatalog(){
  if (catalog == null)   catalog=loadCatalog();
  return catalog;
}","public synchronized SchemaCatalog getCatalog(){
  if (catalog != null)   return catalog;
  catalog=loadCatalog();
  return catalog;
}",0.9193548387096774
17775,"private synchronized SchemaCatalog loadCatalog(){
  catalog=getCatalogManager().readCatalog();
  if (catalog == null)   catalog=newCatalogInstance();
  if (getProperties().containsKey(SCHEMAS_PROP))   loadSchemas(catalog);
  if (getProperties().containsKey(TABLES_PROP))   loadTables(catalog);
  return catalog;
}","protected SchemaCatalog loadCatalog(){
  SchemaCatalog catalog=getCatalogManager().readCatalog();
  if (catalog == null)   catalog=newCatalogInstance();
  if (getProperties().containsKey(SCHEMAS_PROP))   loadSchemas(catalog);
  if (getProperties().containsKey(TABLES_PROP))   loadTables(catalog);
  return catalog;
}",0.890302066772655
17776,"private Stereotype<Protocol,Format> findOrCreateStereotype(SchemaDef schema,Fields fields,String identifier){
  Stereotype<Protocol,Format> stereotype=findStereotypeFor(identifier);
  if (stereotype != null)   return stereotype;
  if (fields == null)   fields=getFieldsFor(identifier);
  if (fields == null)   return schema.findStereotypeFor(Fields.UNKNOWN);
  String stereotypeName=platformBroker.createTableNameFrom(identifier);
  stereotype=schema.findStereotypeFor(fields);
  if (stereotype == null)   stereotype=createStereotype(schema,stereotypeName,fields);
  return stereotype;
}","private Stereotype<Protocol,Format> findOrCreateStereotype(SchemaDef schema,Fields fields,String identifier){
  Stereotype<Protocol,Format> stereotype=findStereotypeFor(identifier);
  if (stereotype != null)   return stereotype;
  if (fields == null)   fields=getFieldsFor(schema,identifier);
  if (fields == null)   return schema.findStereotypeFor(Fields.UNKNOWN);
  String stereotypeName=platformBroker.createTableNameFrom(identifier);
  stereotype=schema.findStereotypeFor(fields);
  if (stereotype == null)   stereotype=createStereotype(schema,stereotypeName,fields);
  return stereotype;
}",0.9940728196443692
17777,"public Protocol getDefaultProtocolFor(SchemaDef schemaDef,String identifier){
  TableDef table=rootSchemaDef.findTableFor(identifier);
  if (table != null && table.getProtocol() != null)   return table.getActualProtocol();
  Protocol protocol=ProtocolProperties.findProtocolFor(schemaDef,identifier);
  if (protocol == null && schemaDef != null)   protocol=schemaDef.findDefaultProtocol();
  return protocol;
}","public Protocol getDefaultProtocolFor(SchemaDef schemaDef,String identifier){
  TableDef table=schemaDef.findTableFor(identifier);
  if (table != null && table.getProtocol() != null)   return table.getActualProtocol();
  Protocol protocol=ProtocolProperties.findProtocolFor(schemaDef,identifier);
  if (protocol == null && schemaDef != null)   protocol=schemaDef.findDefaultProtocol();
  return protocol;
}",0.9926470588235294
17778,"public Format getDefaultFormatFor(SchemaDef schemaDef,String identifier){
  TableDef tableDef=rootSchemaDef.findTableFor(identifier);
  if (tableDef != null && tableDef.getFormat() != null)   return tableDef.getActualFormat();
  Format format=FormatProperties.findFormatFor(schemaDef,identifier);
  if (format == null && schemaDef != null)   format=schemaDef.findDefaultFormat();
  return format;
}","public Format getDefaultFormatFor(SchemaDef schemaDef,String identifier){
  TableDef tableDef=schemaDef.findTableFor(identifier);
  if (tableDef != null && tableDef.getFormat() != null)   return tableDef.getActualFormat();
  Format format=FormatProperties.findFormatFor(schemaDef,identifier);
  if (format == null && schemaDef != null)   format=schemaDef.findDefaultFormat();
  return format;
}",0.9924242424242424
17779,"public Fields getFieldsFor(String identifier){
  String name=platformBroker.createTableNameFrom(identifier);
  if (nameFieldsMap.containsKey(name))   return nameFieldsMap.get(name);
  Point<Protocol,Format> point=getPointFor(identifier,null,null,null);
  Resource<Protocol,Format,SinkMode> resource=new Resource<Protocol,Format,SinkMode>(identifier,point.protocol,point.format,SinkMode.KEEP);
  Tap tap=createTapFor(rootSchemaDef,rootSchemaDef.findStereotypeFor(Fields.UNKNOWN),resource);
  if (!resourceExists(tap))   return null;
  Fields fields=tap.retrieveSourceFields(platformBroker.getFlowProcess());
  nameFieldsMap.put(name,fields);
  return fields;
}","public Fields getFieldsFor(SchemaDef schemaDef,String identifier){
  String name=platformBroker.createTableNameFrom(identifier);
  if (nameFieldsMap.containsKey(name))   return nameFieldsMap.get(name);
  Point<Protocol,Format> point=getPointFor(identifier,schemaDef.getName(),null,null);
  Resource<Protocol,Format,SinkMode> resource=new Resource<Protocol,Format,SinkMode>(identifier,point.protocol,point.format,SinkMode.KEEP);
  Tap tap=createTapFor(schemaDef,schemaDef.findStereotypeFor(Fields.UNKNOWN),resource);
  if (!resourceExists(tap))   return null;
  Fields fields=tap.retrieveSourceFields(platformBroker.getFlowProcess());
  nameFieldsMap.put(name,fields);
  return fields;
}",0.9591078066914498
17780,"public ProviderDef findProviderDefFor(Format format){
  List<String> providers=findFormatProperties(format).get(SchemaProperties.PROVIDER);
  for (  String providerName : providers) {
    ProviderDef providerDef=findProviderDefFor(providerName);
    if (providerDef != null)     return providerDef;
  }
  return null;
}","public ProviderDef findProviderDefFor(Format format){
  List<String> providers=findFormatProperties(format).get(SchemaProperties.PROVIDER);
  if (providers == null)   return null;
  for (  String providerName : providers) {
    ProviderDef providerDef=findProviderDefFor(providerName);
    if (providerDef != null)     return providerDef;
  }
  return null;
}",0.9410029498525072
17781,"@Test public void testProviderWithSQLLine() throws IOException {
  copyFromLocal(SIMPLE_PRODUCTS_TABLE);
  String classPath=compileFactory(getFactoryPath());
  createProviderJar(TEST_PROPERTIES_FACTORY_LOCATION,classPath);
  initCatalog();
  catalog(""String_Node_Str"",""String_Node_Str"",getProviderPath());
  SchemaCatalog schemaCatalog=getSchemaCatalog();
  Format format=Format.getFormat(""String_Node_Str"");
  ProviderDef providerDef=schemaCatalog.findProviderDefFor(null,format);
  assertNotNull(""String_Node_Str"",providerDef);
  assertEquals(""String_Node_Str"",providerDef.getFactoryClassName());
  Protocol protocol=Protocol.getProtocol(getPlatformName().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
  schemaCatalog=getSchemaCatalog();
  providerDef=schemaCatalog.findProviderDefFor(null,protocol);
  assertNotNull(""String_Node_Str"",providerDef);
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",SIMPLE_PRODUCTS_TABLE);
  boolean result=shell(""String_Node_Str"",PROVIDER_SQL_SELECT_FILE,""String_Node_Str"",getPlatformName());
  assertTrue(""String_Node_Str"",result);
}","@Test public void testProviderWithSQLLine() throws IOException {
  copyFromLocal(SIMPLE_PRODUCTS_TABLE);
  String classPath=compileFactory(getFactoryPath());
  createProviderJar(TEST_PROPERTIES_FACTORY_LOCATION,classPath);
  initCatalog();
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getProviderPath());
  SchemaCatalog schemaCatalog=getSchemaCatalog();
  Format format=Format.getFormat(""String_Node_Str"");
  ProviderDef providerDef=schemaCatalog.findProviderDefFor(""String_Node_Str"",format);
  assertNotNull(""String_Node_Str"",providerDef);
  assertEquals(""String_Node_Str"",providerDef.getFactoryClassName());
  Protocol protocol=Protocol.getProtocol(getPlatformName().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
  schemaCatalog=getSchemaCatalog();
  providerDef=schemaCatalog.findProviderDefFor(null,protocol);
  assertNotNull(""String_Node_Str"",providerDef);
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",SIMPLE_PRODUCTS_TABLE);
  boolean result=shell(""String_Node_Str"",PROVIDER_SQL_SELECT_FILE,""String_Node_Str"",getPlatformName());
  assertTrue(""String_Node_Str"",result);
}",0.9233265720081136
17782,"@Test public void testProviderPropertiesWithSQLLine() throws IOException {
  copyFromLocal(SIMPLE_PRODUCTS_TABLE);
  initCatalog();
  SchemaCatalog schemaCatalog=getSchemaCatalog();
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",SIMPLE_PRODUCTS_TABLE);
  Format format=Format.getFormat(""String_Node_Str"");
  ProviderDef providerDef=schemaCatalog.findProviderDefFor(null,format);
  assertNotNull(""String_Node_Str"",providerDef);
  boolean result=shell(""String_Node_Str"",PROVIDER_SQL_SELECT_FILE,""String_Node_Str"",getPlatformName());
  assertTrue(""String_Node_Str"",result);
}","@Test public void testProviderPropertiesWithSQLLine() throws IOException {
  copyFromLocal(SIMPLE_PRODUCTS_TABLE);
  initCatalog();
  SchemaCatalog schemaCatalog=getSchemaCatalog();
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",SIMPLE_PRODUCTS_TABLE);
  Format format=Format.getFormat(""String_Node_Str"");
  ProviderDef providerDef=schemaCatalog.findProviderDefFor(""String_Node_Str"",format);
  assertNotNull(""String_Node_Str"",providerDef);
  boolean result=shell(""String_Node_Str"",PROVIDER_SQL_SELECT_FILE,""String_Node_Str"",getPlatformName());
  assertTrue(""String_Node_Str"",result);
}",0.8319280494659921
17783,"public Protocol getDefaultProtocolFor(String schemaName,String identifier){
  TableDef table=rootSchemaDef.findTableFor(identifier);
  if (table != null && table.getProtocol() != null)   return table.getActualProtocol();
  SchemaDef schemaDef=getSchemaDef(schemaName);
  Protocol protocol=ProtocolProperties.findProtocolFor(schemaDef,identifier);
  if (protocol == null && schemaDef != null)   protocol=schemaDef.findDefaultProtocol();
  return protocol;
}","public Protocol getDefaultProtocolFor(SchemaDef schemaDef,String identifier){
  TableDef table=rootSchemaDef.findTableFor(identifier);
  if (table != null && table.getProtocol() != null)   return table.getActualProtocol();
  Protocol protocol=ProtocolProperties.findProtocolFor(schemaDef,identifier);
  if (protocol == null && schemaDef != null)   protocol=schemaDef.findDefaultProtocol();
  return protocol;
}",0.9214780600461894
17784,"protected String createTableDefFor(SchemaDef schemaDef,String tableName,String tableIdentifier,String stereotypeName,Fields fields,Protocol protocol,Format format){
  tableIdentifier=getFullPath(tableIdentifier);
  LOG.debug(""String_Node_Str"",tableIdentifier);
  if (tableName == null)   tableName=platformBroker.createTableNameFrom(tableIdentifier);
  Stereotype<Protocol,Format> stereotype=null;
  if (stereotypeName != null)   stereotype=findStereotype(schemaDef,stereotypeName);
  if (stereotype == null)   stereotype=findOrCreateStereotype(schemaDef,fields,tableIdentifier);
  if (stereotype == null)   throw new IllegalArgumentException(""String_Node_Str"" + stereotypeName);
  schemaDef.addTable(tableName,tableIdentifier,stereotype,protocol,format);
  return tableName;
}","protected String createTableDefFor(SchemaDef schemaDef,String tableName,String tableIdentifier,String stereotypeName,Fields fields,Protocol protocol,Format format){
  tableIdentifier=getFullPath(tableIdentifier);
  LOG.debug(""String_Node_Str"",tableIdentifier);
  if (tableName == null)   tableName=platformBroker.createTableNameFrom(tableIdentifier);
  Stereotype<Protocol,Format> stereotype=null;
  if (stereotypeName != null)   stereotype=findStereotype(schemaDef,stereotypeName);
  if (stereotype == null)   stereotype=findOrCreateStereotype(schemaDef,fields,tableIdentifier);
  if (stereotype == null)   throw new IllegalArgumentException(""String_Node_Str"" + stereotypeName);
  if (protocol == null)   protocol=getDefaultProtocolFor(schemaDef,tableIdentifier);
  if (format == null)   format=getDefaultFormatFor(schemaDef,tableIdentifier);
  schemaDef.addTable(tableName,tableIdentifier,stereotype,protocol,format);
  return tableName;
}",0.9045401629802096
17785,"public Format getDefaultFormatFor(String schemaName,String identifier){
  TableDef tableDef=rootSchemaDef.findTableFor(identifier);
  if (tableDef != null && tableDef.getFormat() != null)   return tableDef.getActualFormat();
  SchemaDef schemaDef=getSchemaDef(schemaName);
  Format format=FormatProperties.findFormatFor(schemaDef,identifier);
  if (format == null && schemaDef != null)   format=schemaDef.findDefaultFormat();
  return format;
}","public Format getDefaultFormatFor(SchemaDef schemaDef,String identifier){
  TableDef tableDef=rootSchemaDef.findTableFor(identifier);
  if (tableDef != null && tableDef.getFormat() != null)   return tableDef.getActualFormat();
  Format format=FormatProperties.findFormatFor(schemaDef,identifier);
  if (format == null && schemaDef != null)   format=schemaDef.findDefaultFormat();
  return format;
}",0.9026128266033254
17786,"@Override public void onMatch(RelOptRuleCall call){
  final CascadingTableAccessRel tableRel=(CascadingTableAccessRel)call.getRels()[0];
  final TapEnumerableRel tapRel=new TapEnumerableRel(tableRel.getCluster(),tableRel.getTraitSet().plus(EnumerableConvention.ARRAY),tableRel.getTable(),tableRel.name,tableRel.identifier);
  call.transformTo(tapRel);
}","@Override public void onMatch(RelOptRuleCall call){
  final CascadingTableAccessRel tableRel=(CascadingTableAccessRel)call.getRels()[0];
  final EnumerableTapRel tapRel=new EnumerableTapRel(tableRel.getCluster(),tableRel.getTraitSet().plus(EnumerableConvention.ARRAY),tableRel.getTable());
  call.transformTo(tapRel);
}",0.9315476190476192
17787,"public Enumerator enumerator(){
  PlatformBroker platformBroker=getPlatformBroker();
  Properties properties=platformBroker.getProperties();
  Optiq.writeSQLPlan(properties,Misc.createUniqueName(),getVolcanoPlanner());
  FlowProcess flowProcess=platformBroker.getFlowProcess();
  SchemaCatalog schemaCatalog=platformBroker.getCatalog();
  Tap tap=schemaCatalog.createTapFor(getIdentifier(),SinkMode.KEEP);
  int size=tap.getSinkFields().size();
  Type[] types=new Type[size];
  for (int i=0; i < size; i++)   types[i]=getPhysType().fieldClass(i);
  int maxRows=getMaxRows(properties);
  if (size == 1)   return new TapObjectEnumerator(maxRows,types,flowProcess,tap);
 else   return new TapArrayEnumerator(maxRows,types,flowProcess,tap);
}","public Enumerator enumerator(){
  PlatformBroker platformBroker=getPlatformBroker();
  Properties properties=platformBroker.getProperties();
  Optiq.writeSQLPlan(properties,Misc.createUniqueName(),getVolcanoPlanner());
  FlowProcess flowProcess=platformBroker.getFlowProcess();
  SchemaCatalog schemaCatalog=platformBroker.getCatalog();
  Tap tap=schemaCatalog.createTapFor(getTableDef(),SinkMode.KEEP);
  int size=tap.getSinkFields().size();
  Type[] types=new Type[size];
  for (int i=0; i < size; i++)   types[i]=getPhysType().fieldClass(i);
  int maxRows=getMaxRows(properties);
  if (size == 1)   return new TapObjectEnumerator(maxRows,types,flowProcess,tap);
 else   return new TapArrayEnumerator(maxRows,types,flowProcess,tap);
}",0.9877883310719132
17788,"public TableHolder(PhysType physType,String identifier,PlatformBroker platformBroker,VolcanoPlanner planner){
  this.physType=physType;
  this.identifier=identifier;
  this.platformBroker=platformBroker;
  this.planner=planner;
}","public TableHolder(PhysType physType,TableDef tableDef,PlatformBroker platformBroker,VolcanoPlanner planner){
  this.physType=physType;
  this.tableDef=tableDef;
  this.platformBroker=platformBroker;
  this.planner=planner;
}",0.8414096916299559
17789,"@Ignore @Test public void testProviderPropertiesWithSQLLine() throws IOException {
  initCatalog();
  SchemaCatalog schemaCatalog=getSchemaCatalog();
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",SIMPLE_PRODUCTS_TABLE);
  Format format=Format.getFormat(""String_Node_Str"");
  ProviderDef providerDef=schemaCatalog.findProviderDefFor(null,format);
  assertNotNull(""String_Node_Str"",providerDef);
  boolean result=shell(""String_Node_Str"",PROVIDER_SQL_SELECT_FILE,""String_Node_Str"",getPlatformName());
  assertTrue(""String_Node_Str"",result);
}","@Test public void testProviderPropertiesWithSQLLine() throws IOException {
  initCatalog();
  SchemaCatalog schemaCatalog=getSchemaCatalog();
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",SIMPLE_PRODUCTS_TABLE);
  Format format=Format.getFormat(""String_Node_Str"");
  ProviderDef providerDef=schemaCatalog.findProviderDefFor(null,format);
  assertNotNull(""String_Node_Str"",providerDef);
  boolean result=shell(""String_Node_Str"",PROVIDER_SQL_SELECT_FILE,""String_Node_Str"",getPlatformName());
  assertTrue(""String_Node_Str"",result);
}",0.9951749095295536
17790,"@Ignore @Test public void testProviderWithSQLLine() throws IOException {
  createProviderJar();
  initCatalog();
  catalog(""String_Node_Str"",""String_Node_Str"",PROVIDER_JAR_PATH);
  SchemaCatalog schemaCatalog=getSchemaCatalog();
  Format format=Format.getFormat(""String_Node_Str"");
  ProviderDef providerDef=schemaCatalog.findProviderDefFor(null,format);
  assertNotNull(""String_Node_Str"",providerDef);
  Protocol protocol=Protocol.getProtocol(getPlatformName().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
  schemaCatalog=getSchemaCatalog();
  providerDef=schemaCatalog.findProviderDefFor(null,protocol);
  assertNotNull(""String_Node_Str"",providerDef);
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",SIMPLE_PRODUCTS_TABLE);
  assertTrue(""String_Node_Str"",shell(""String_Node_Str"",PROVIDER_SQL_SELECT_FILE,""String_Node_Str"",getPlatformName()));
}","@Test public void testProviderWithSQLLine() throws IOException {
  createProviderJar();
  initCatalog();
  catalog(""String_Node_Str"",""String_Node_Str"",PROVIDER_JAR_PATH);
  SchemaCatalog schemaCatalog=getSchemaCatalog();
  Format format=Format.getFormat(""String_Node_Str"");
  ProviderDef providerDef=schemaCatalog.findProviderDefFor(null,format);
  assertNotNull(""String_Node_Str"",providerDef);
  Protocol protocol=Protocol.getProtocol(getPlatformName().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
  schemaCatalog=getSchemaCatalog();
  providerDef=schemaCatalog.findProviderDefFor(null,protocol);
  assertNotNull(""String_Node_Str"",providerDef);
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  catalog(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",SIMPLE_PRODUCTS_TABLE);
  boolean result=shell(""String_Node_Str"",PROVIDER_SQL_SELECT_FILE,""String_Node_Str"",getPlatformName());
  assertTrue(""String_Node_Str"",result);
}",0.9552988448016072
17791,"@Override public boolean handle(PlatformBroker platformBroker){
  SchemaCatalog catalog=platformBroker.getCatalog();
  String schemaName=getOptions().getSchemaName();
  String formatName=getOptions().getFormatName();
  String protocolName=getOptions().getProtocolName();
  verifySchema(catalog,schemaName);
  LOG.info(""String_Node_Str"",getOptions().getDDL());
  DDLParser parser=new DDLParser(catalog,schemaName,formatName,protocolName);
  try {
    List<DDLTable> commands=parser.parse(new File(getOptions().getDDL()));
    LOG.info(""String_Node_Str"",commands.size());
    parser.execute(commands);
  }
 catch (  IOException exception) {
    throw new IllegalArgumentException(""String_Node_Str"" + getOptions().getDDL(),exception);
  }
  return true;
}","@Override public boolean handle(PlatformBroker platformBroker){
  SchemaCatalog catalog=platformBroker.getCatalog();
  String schemaName=getOptions().getSchemaName();
  String protocolName=getOptions().getProtocolName();
  String formatName=getOptions().getFormatName();
  verifySchema(catalog,schemaName);
  LOG.info(""String_Node_Str"",getOptions().getDDL());
  DDLParser parser=new DDLParser(catalog,schemaName,protocolName,formatName);
  try {
    List<DDLTable> commands=parser.parse(new File(getOptions().getDDL()));
    LOG.info(""String_Node_Str"",commands.size());
    parser.execute(commands);
  }
 catch (  IOException exception) {
    throw new IllegalArgumentException(""String_Node_Str"" + getOptions().getDDL(),exception);
  }
  return true;
}",0.910904255319149
17792,"@Override protected String performAdd(PlatformBroker platformBroker){
  String addURI=getOptions().getAddOrUpdateURI();
  SchemaCatalog catalog=platformBroker.getCatalog();
  String schemaName=getOptions().getSchemaName();
  if (addURI == null) {
    boolean success=catalog.addSchemaDef(schemaName);
    if (success)     return schemaName;
    return null;
  }
  return catalog.createSchemaDefAndTableDefsFor(schemaName,addURI);
}","@Override protected String performAdd(PlatformBroker platformBroker){
  String addURI=getOptions().getAddOrUpdateURI();
  SchemaCatalog catalog=platformBroker.getCatalog();
  String schemaName=getOptions().getSchemaName();
  String protocol=getOptions().getProtocolName();
  String format=getOptions().getFormatName();
  if (addURI == null) {
    boolean success=catalog.addSchemaDef(schemaName,protocol,format);
    if (success)     return schemaName;
    return null;
  }
  return catalog.createSchemaDefAndTableDefsFor(schemaName,protocol,format,addURI);
}",0.8707070707070707
17793,"@Override protected String performAdd(PlatformBroker platformBroker){
  SchemaCatalog catalog=platformBroker.getCatalog();
  String addURI=getOptions().getAddOrUpdateURI();
  if (addURI == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String tableName=getOptions().getTableName();
  String stereotypeName=getOptions().getStereotypeName();
  Protocol protocol=Protocol.getProtocol(getOptions().getProtocolName());
  Format format=Format.getFormat(getOptions().getFormatName());
  return catalog.createTableDefFor(getOptions().getSchemaName(),tableName,addURI,stereotypeName,protocol,format);
}","@Override protected String performAdd(PlatformBroker platformBroker){
  SchemaCatalog catalog=platformBroker.getCatalog();
  String addURI=getOptions().getAddOrUpdateURI();
  if (addURI == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String tableName=getOptions().getTableName();
  String stereotypeName=getOptions().getStereotypeName();
  Protocol protocol=Protocol.getProtocol(getOptions().getProtocolName());
  Format format=Format.getFormat(getOptions().getFormatName());
  String schemaName=getOptions().getSchemaName();
  return catalog.createTableDefFor(schemaName,tableName,addURI,stereotypeName,protocol,format);
}",0.9441786283891548
17794,"protected void verifySchema(SchemaCatalog catalog,String schemaName){
  if (schemaName == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (!catalog.getSchemaNames().contains(schemaName))   throw new IllegalArgumentException(""String_Node_Str"" + schemaName);
}","protected void verifySchema(SchemaCatalog catalog,String schemaName){
  if (schemaName == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (!catalog.getSchemaNames().contains(schemaName.toLowerCase()))   throw new IllegalArgumentException(""String_Node_Str"" + schemaName);
}",0.975438596491228
17795,"public SchemaDef createSchemaDef(String name,String identifier){
  getRootSchemaDef().addSchema(name,identifier);
  return getRootSchemaDef().getSchema(name);
}","public SchemaDef createSchemaDef(String name,String protocolName,String formatName,String identifier){
  Protocol protocol=Protocol.getProtocol(protocolName);
  Format format=Format.getFormat(formatName);
  if (identifier == null)   identifier=name;
  getRootSchemaDef().addSchema(name,protocol,format,identifier);
  return getRootSchemaDef().getSchema(name);
}",0.6142034548944337
17796,"private Stereotype<Protocol,Format> createStereotype(SchemaDef schemaDef,Protocol defaultProtocol,String name,Fields fields){
  Stereotype<Protocol,Format> stereotype=new Stereotype<Protocol,Format>(getFormatHandlers(),defaultProtocol,name,fields);
  schemaDef.addStereotype(stereotype);
  return stereotype;
}","private Stereotype<Protocol,Format> createStereotype(SchemaDef schemaDef,String name,Fields fields,Protocol protocol){
  Protocol defaultProtocol=protocol == null ? schemaDef.findDefaultProtocol() : protocol;
  Stereotype<Protocol,Format> stereotype=new Stereotype<Protocol,Format>(getFormatHandlers(),defaultProtocol,name,fields);
  schemaDef.addStereotype(stereotype);
  return stereotype;
}",0.8108108108108109
17797,"private Stereotype<Protocol,Format> getOrCreateStereotype(SchemaDef schema,String identifier){
  Stereotype<Protocol,Format> stereotype=findStereotypeFor(identifier);
  if (stereotype != null)   return stereotype;
  Fields fields=getFieldsFor(identifier);
  if (fields == null)   return schema.findStereotypeFor(Fields.UNKNOWN);
  String schemaName=schema.getName();
  String stereotypeName=platformBroker.createTableNameFrom(identifier);
  stereotype=schema.findStereotypeFor(fields);
  if (stereotype == null) {
    Point<Protocol,Format> point=getPointFor(identifier,schemaName,null,null);
    return createStereotype(schema,point.protocol,stereotypeName,fields);
  }
  return stereotype;
}","private Stereotype<Protocol,Format> getOrCreateStereotype(SchemaDef schema,String identifier){
  Stereotype<Protocol,Format> stereotype=findStereotypeFor(identifier);
  if (stereotype != null)   return stereotype;
  Fields fields=getFieldsFor(identifier);
  if (fields == null)   return schema.findStereotypeFor(Fields.UNKNOWN);
  String schemaName=schema.getName();
  String stereotypeName=platformBroker.createTableNameFrom(identifier);
  stereotype=schema.findStereotypeFor(fields);
  if (stereotype == null) {
    Point<Protocol,Format> point=getPointFor(identifier,schemaName,null,null);
    return createStereotype(schema,stereotypeName,fields,point.protocol);
  }
  return stereotype;
}",0.9682539682539684
17798,"public boolean addSchemaDef(String name){
  if (getRootSchemaDef().getSchema(name) != null)   return false;
  getRootSchemaDef().getOrAddSchema(name);
  return true;
}","public boolean addSchemaDef(String name,String protocolName,String formatName){
  Protocol protocol=Protocol.getProtocol(protocolName);
  Format format=Format.getFormat(formatName);
  return getRootSchemaDef().addSchema(name,protocol,format);
}",0.3746958637469586
17799,"public Protocol getDefaultProtocolFor(String identifier){
  TableDef table=rootSchemaDef.findTableFor(identifier);
  if (table != null && table.getProtocol() != null)   return table.getProtocol();
  return defaultProtocol;
}","public Protocol getDefaultProtocolFor(String identifier){
  TableDef table=rootSchemaDef.findTableFor(identifier);
  if (table != null && table.getProtocol() != null)   return table.getProtocol();
  return rootSchemaDef.getDefaultProtocol();
}",0.8950749464668094
17800,"public Format getDefaultFormatFor(String schemaName,String identifier){
  TableDef tableDef=rootSchemaDef.findTableFor(identifier);
  if (tableDef != null && tableDef.getFormat() != null)   return tableDef.getFormat();
  SchemaDef schema=getSchemaDef(schemaName);
  Format format=FormatProperties.findFormatFor(schema,identifier);
  if (format == null)   format=defaultFormat;
  return format;
}","public Format getDefaultFormatFor(String schemaName,String identifier){
  TableDef tableDef=rootSchemaDef.findTableFor(identifier);
  if (tableDef != null && tableDef.getFormat() != null)   return tableDef.getFormat();
  SchemaDef schemaDef=getSchemaDef(schemaName);
  Format format=FormatProperties.findFormatFor(schemaDef,identifier);
  if (format == null && schemaDef != null)   format=schemaDef.findDefaultFormat();
  return format;
}",0.8907563025210085
17801,"protected SchemaCatalog(Protocol defaultProtocol,Format defaultFormat){
  this.defaultProtocol=defaultProtocol;
  this.defaultFormat=defaultFormat;
}","protected SchemaCatalog(Protocol defaultProtocol,Format defaultFormat){
  this.rootSchemaDef=new SchemaDef(defaultProtocol,defaultFormat);
}",0.7612456747404844
17802,"public void initializeNew(){
  if (!rootSchemaDef.hasStereotype(""String_Node_Str""))   createStereotype(rootSchemaDef,defaultProtocol,""String_Node_Str"",Fields.UNKNOWN);
  ProtocolHandlers<Protocol,Format> protocolHandlers=getProtocolHandlers();
  for (  Protocol protocol : protocolHandlers.getProtocols())   rootSchemaDef.addProtocolProperties(protocol,protocolHandlers.getProtocolProperties(protocol));
  FormatHandlers<Protocol,Format> formatHandlers=getFormatHandlers();
  for (  Format format : formatHandlers.getFormats())   rootSchemaDef.addFormatProperties(format,formatHandlers.getFormatProperties(format));
}","public void initializeNew(){
  if (!rootSchemaDef.hasStereotype(""String_Node_Str""))   createStereotype(rootSchemaDef,""String_Node_Str"",Fields.UNKNOWN,null);
  ProtocolHandlers<Protocol,Format> protocolHandlers=getProtocolHandlers();
  for (  Protocol protocol : protocolHandlers.getProtocols())   rootSchemaDef.addProtocolProperties(protocol,protocolHandlers.getProtocolProperties(protocol));
  FormatHandlers<Protocol,Format> formatHandlers=getFormatHandlers();
  for (  Format format : formatHandlers.getFormats())   rootSchemaDef.addFormatProperties(format,formatHandlers.getFormatProperties(format));
}",0.982829108748978
17803,"@Override public int hashCode(){
  int result=defaultProtocol != null ? defaultProtocol.hashCode() : 0;
  result=31 * result + (defaultFormat != null ? defaultFormat.hashCode() : 0);
  result=31 * result + (rootSchemaDef != null ? rootSchemaDef.hashCode() : 0);
  result=31 * result + (protocolHandlers != null ? protocolHandlers.hashCode() : 0);
  result=31 * result + (formatHandlers != null ? formatHandlers.hashCode() : 0);
  result=31 * result + (nameFieldsMap != null ? nameFieldsMap.hashCode() : 0);
  result=31 * result + (idPointMap != null ? idPointMap.hashCode() : 0);
  return result;
}","@Override public int hashCode(){
  int result=(rootSchemaDef != null ? rootSchemaDef.hashCode() : 0);
  result=31 * result + (protocolHandlers != null ? protocolHandlers.hashCode() : 0);
  result=31 * result + (formatHandlers != null ? formatHandlers.hashCode() : 0);
  result=31 * result + (nameFieldsMap != null ? nameFieldsMap.hashCode() : 0);
  result=31 * result + (idPointMap != null ? idPointMap.hashCode() : 0);
  return result;
}",0.5791505791505791
17804,"public String createSchemaDefAndTableDefsFor(String schemaName,String schemaIdentifier){
  if (platformBroker != null)   schemaIdentifier=platformBroker.getFullPath(schemaIdentifier);
  LOG.debug(""String_Node_Str"",schemaIdentifier);
  if (schemaName == null)   schemaName=platformBroker.createSchemaNameFrom(schemaIdentifier);
  SchemaDef schemaDef=getSchemaDef(schemaName);
  if (schemaDef == null)   schemaDef=createSchemaDef(schemaName,schemaIdentifier);
 else   if (!schemaIdentifier.equalsIgnoreCase(schemaDef.getIdentifier()))   throw new IllegalArgumentException(""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaIdentifier);
  String[] childIdentifiers=getChildIdentifiers(schemaIdentifier);
  LOG.debug(""String_Node_Str"",schemaName,childIdentifiers.length);
  for (  String identifier : childIdentifiers)   createTableDefFor(schemaDef,null,identifier,null,null,null);
  return schemaName;
}","public String createSchemaDefAndTableDefsFor(String schemaName,String protocolName,String formatName,String schemaIdentifier){
  if (platformBroker != null)   schemaIdentifier=platformBroker.getFullPath(schemaIdentifier);
  LOG.debug(""String_Node_Str"",schemaIdentifier);
  if (schemaName == null)   schemaName=platformBroker.createSchemaNameFrom(schemaIdentifier);
  SchemaDef schemaDef=getSchemaDef(schemaName);
  if (schemaDef == null)   schemaDef=createSchemaDef(schemaName,protocolName,formatName,schemaIdentifier);
 else   if (!schemaIdentifier.equalsIgnoreCase(schemaDef.getIdentifier()))   throw new IllegalArgumentException(""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaIdentifier);
  String[] childIdentifiers=getChildIdentifiers(schemaIdentifier);
  LOG.debug(""String_Node_Str"",schemaName,childIdentifiers.length);
  for (  String identifier : childIdentifiers)   createTableDefFor(schemaDef,null,identifier,null,null,null);
  return schemaName;
}",0.9669509594882728
17805,"@Override public boolean equals(Object object){
  if (this == object)   return true;
  if (!(object instanceof SchemaCatalog))   return false;
  SchemaCatalog catalog=(SchemaCatalog)object;
  if (defaultFormat != null ? !defaultFormat.equals(catalog.defaultFormat) : catalog.defaultFormat != null)   return false;
  if (defaultProtocol != null ? !defaultProtocol.equals(catalog.defaultProtocol) : catalog.defaultProtocol != null)   return false;
  if (formatHandlers != null ? !formatHandlers.equals(catalog.formatHandlers) : catalog.formatHandlers != null)   return false;
  if (idPointMap != null ? !idPointMap.equals(catalog.idPointMap) : catalog.idPointMap != null)   return false;
  if (nameFieldsMap != null ? !nameFieldsMap.equals(catalog.nameFieldsMap) : catalog.nameFieldsMap != null)   return false;
  if (protocolHandlers != null ? !protocolHandlers.equals(catalog.protocolHandlers) : catalog.protocolHandlers != null)   return false;
  if (rootSchemaDef != null ? !rootSchemaDef.equals(catalog.rootSchemaDef) : catalog.rootSchemaDef != null)   return false;
  return true;
}","@Override public boolean equals(Object object){
  if (this == object)   return true;
  if (!(object instanceof SchemaCatalog))   return false;
  SchemaCatalog catalog=(SchemaCatalog)object;
  if (formatHandlers != null ? !formatHandlers.equals(catalog.formatHandlers) : catalog.formatHandlers != null)   return false;
  if (idPointMap != null ? !idPointMap.equals(catalog.idPointMap) : catalog.idPointMap != null)   return false;
  if (nameFieldsMap != null ? !nameFieldsMap.equals(catalog.nameFieldsMap) : catalog.nameFieldsMap != null)   return false;
  if (protocolHandlers != null ? !protocolHandlers.equals(catalog.protocolHandlers) : catalog.protocolHandlers != null)   return false;
  if (rootSchemaDef != null ? !rootSchemaDef.equals(catalog.rootSchemaDef) : catalog.rootSchemaDef != null)   return false;
  return true;
}",0.4342379958246347
17806,"public boolean connectForRead(boolean allowUI,String sPerms){
  Session session=_createSession();
  Session.OpenRequest req=_createOpenRequest(session);
  req.setPermissions(_createPermissionsFromString(sPerms));
  if (SessionState.CREATED_TOKEN_LOADED.equals(session.getState()) || allowUI) {
    Session.setActiveSession(session);
    session.openForRead(req);
    return session.isOpened();
  }
 else {
    return false;
  }
}","public boolean connectForRead(boolean allowUI,String sPerms){
  Session session=_createSession();
  if (session.isOpened()) {
    return true;
  }
  Session.OpenRequest req=_createOpenRequest(session);
  req.setPermissions(_createPermissionsFromString(sPerms));
  if (SessionState.CREATED_TOKEN_LOADED.equals(session.getState()) || allowUI) {
    Session.setActiveSession(session);
    session.openForRead(req);
    return session.isOpened();
  }
 else {
    return false;
  }
}",0.9459757442116868
17807,"public boolean connectForPublish(boolean allowUI,String sPerms){
  Session session=_createSession();
  Session.OpenRequest req=_createOpenRequest(session);
  req.setPermissions(_createPermissionsFromString(sPerms));
  if (SessionState.CREATED_TOKEN_LOADED.equals(session.getState()) || allowUI) {
    Session.setActiveSession(session);
    session.openForPublish(req);
    return session.isOpened();
  }
 else {
    return false;
  }
}","public boolean connectForPublish(boolean allowUI,String sPerms){
  Session session=_createSession();
  if (session.isOpened()) {
    return true;
  }
  Session.OpenRequest req=_createOpenRequest(session);
  req.setPermissions(_createPermissionsFromString(sPerms));
  if (SessionState.CREATED_TOKEN_LOADED.equals(session.getState()) || allowUI) {
    Session.setActiveSession(session);
    session.openForPublish(req);
    return session.isOpened();
  }
 else {
    return false;
  }
}",0.9466811751904244
17808,"/** 
 * @public
 * @return	void
 */
public boolean connect(boolean allowUI){
  Session session=_createSession();
  Session.OpenRequest req=_createOpenRequest(session);
  if (SessionState.CREATED_TOKEN_LOADED.equals(session.getState()) || allowUI) {
    Session.setActiveSession(session);
    session.openForRead(req);
    return session.isOpened();
  }
 else {
    return false;
  }
}","/** 
 * @public
 * @return	void
 */
public boolean connect(boolean allowUI){
  Session session=_createSession();
  if (session.isOpened()) {
    return true;
  }
  Session.OpenRequest req=_createOpenRequest(session);
  if (SessionState.CREATED_TOKEN_LOADED.equals(session.getState()) || (allowUI && !SessionState.OPENING.equals(session.getState()))) {
    session.openForRead(req);
    return session.isOpened();
  }
 else {
    return false;
  }
}",0.8293269230769231
17809,"private Session _createSession(){
  Session session;
  if (Session.getActiveSession() != null) {
    session=Session.getActiveSession();
  }
 else {
    session=new Session.Builder(GameActivity.getInstance()).setApplicationId(_sAppID).build();
  }
  return session;
}","private Session _createSession(){
  Session session;
  if (Session.getActiveSession() != null) {
    session=Session.getActiveSession();
  }
 else {
    session=new Session.Builder(GameActivity.getInstance()).setApplicationId(_sAppID).build();
    Session.setActiveSession(session);
  }
  return session;
}",0.9319371727748692
17810,"/** 
 * @public
 * @return	void
 */
public void graph_request(String sGraphRequest,String sKeys,String sVals,String sMethod){
  trace(""String_Node_Str"" + sMethod);
  Bundle params=stringTo_bundle(sKeys,sVals);
  final Request req=new Request(Session.getActiveSession(),sGraphRequest,params,HttpMethod.valueOf(sMethod),listener_request);
  GameActivity.getInstance().runOnUiThread(new Runnable(){
    public void run(){
      RequestAsyncTask task=new RequestAsyncTask(req);
      task.execute();
    }
  }
);
}","/** 
 * @public
 * @return	void
 */
public void graph_request(String sGraphRequest,String sKeys,String sVals,String sMethod){
  trace(""String_Node_Str"" + sMethod);
  Bundle params=stringTo_bundle(sKeys,sVals);
  final Request req=new Request(Session.getActiveSession(),sGraphRequest,params,HttpMethod.valueOf(sMethod),listener_request);
  _mSurface.queueEvent(new Runnable(){
    @Override public void run(){
      trace(""String_Node_Str"");
      req.executeAndWait();
    }
  }
);
}",0.7250755287009063
17811,"public static void handleKeyboardInput(GuiScreen gui){
  if (Keyboard.getEventKeyState()) {
    do {
      int k=Keyboard.getEventKey();
      char c=Keyboard.getEventCharacter();
      if (k == 87) {
        gui.mc.toggleFullscreen();
        return;
      }
      if (gui.isMacOs && k == 28 && c == 0) {
        k=29;
      }
      if ((byte)c < 0 && Keyboard.next()) {
        int k2=Keyboard.getEventKey();
        char c2=Keyboard.getEventCharacter();
        try {
          c2=new String(new byte[]{(byte)c,(byte)c2},encoding).charAt(0);
          gui.keyTyped(c2,k);
        }
 catch (        Throwable t) {
          gui.keyTyped(c,k);
          gui.keyTyped(c2,k2);
        }
      }
 else {
        gui.keyTyped(c,k);
      }
    }
 while (Keyboard.next());
  }
}","public static void handleKeyboardInput(GuiScreen gui){
  if (Keyboard.getEventKeyState()) {
    do {
      int k=Keyboard.getEventKey();
      char c=Keyboard.getEventCharacter();
      if (k == 87) {
        gui.mc.toggleFullscreen();
        return;
      }
      if (gui.isMacOs && k == 28 && c == 0) {
        k=29;
      }
      if (!Config.leastfix && c > 0x7F && Keyboard.next()) {
        int k2=Keyboard.getEventKey();
        char c2=Keyboard.getEventCharacter();
        try {
          c2=new String(new byte[]{(byte)c,(byte)c2},Config.encoding).charAt(0);
          gui.keyTyped(c2,k);
        }
 catch (        Throwable t) {
          gui.keyTyped(c,k);
          gui.keyTyped(c2,k2);
        }
      }
 else {
        gui.keyTyped(c,k);
      }
    }
 while (Keyboard.next());
  }
}",0.9707379134860052
17812,"private long increaseCounter(String counterName){
  Query query=new Query(Criteria.where(""String_Node_Str"").is(counterName));
  Update update=new Update().inc(""String_Node_Str"",1);
  Counter counter=mongoTemplate.findAndModify(query,update,Counter.class);
  if (counter == null) {
    counter=new Counter();
    counter.setName(counterName);
    counter.setSequence(1);
    mongoTemplate.save(counter);
  }
  return counter.getSequence();
}","private long increaseCounter(String counterName){
  Query query=new Query(Criteria.where(""String_Node_Str"").is(counterName));
  Update update=new Update().inc(""String_Node_Str"",1);
  Counter counter=mongoTemplate.findAndModify(query,update,Counter.class);
  if (counter == null) {
    counter=new Counter();
    counter.setName(counterName);
    counter.setSequence(2);
    mongoTemplate.save(counter);
    return 1;
  }
  return counter.getSequence();
}",0.9082774049217002
17813,"private PathInfo parseRequestUri(final String uri) throws BatchException {
  PathInfoImpl pathInfo=new PathInfoImpl();
  pathInfo.setServiceRoot(batchRequestPathInfo.getServiceRoot());
  pathInfo.setPrecedingPathSegment(batchRequestPathInfo.getPrecedingSegments());
  final String odataPathSegmentsAsString;
  final String queryParametersAsString;
  try {
    Scanner uriScanner=new Scanner(uri).useDelimiter(LF);
    URI uriObject=new URI(uri);
    if (uriObject.isAbsolute()) {
      Pattern regexRequestUri=Pattern.compile(baseUri + ""String_Node_Str"");
      if (uriScanner.hasNext(regexRequestUri)) {
        uriScanner.next(regexRequestUri);
        MatchResult result=uriScanner.match();
        if (result.groupCount() == 2) {
          odataPathSegmentsAsString=result.group(1);
          queryParametersAsString=result.group(2) != null ? result.group(2) : ""String_Node_Str"";
        }
 else {
          uriScanner.close();
          throw new BatchException(BatchException.INVALID_URI.addContent(currentLineNumber));
        }
      }
 else {
        uriScanner.close();
        throw new BatchException(BatchException.INVALID_URI.addContent(currentLineNumber));
      }
    }
 else {
      Pattern regexRequestUri=Pattern.compile(""String_Node_Str"");
      if (uriScanner.hasNext(regexRequestUri)) {
        uriScanner.next(regexRequestUri);
        MatchResult result=uriScanner.match();
        if (result.groupCount() == 2) {
          odataPathSegmentsAsString=result.group(1);
          queryParametersAsString=result.group(2) != null ? result.group(2) : ""String_Node_Str"";
        }
 else {
          uriScanner.close();
          throw new BatchException(BatchException.INVALID_URI.addContent(currentLineNumber));
        }
      }
 else       if (uriScanner.hasNext(""String_Node_Str"")) {
        uriScanner.close();
        throw new BatchException(BatchException.UNSUPPORTED_ABSOLUTE_PATH.addContent(currentLineNumber));
      }
 else {
        uriScanner.close();
        throw new BatchException(BatchException.INVALID_URI.addContent(currentLineNumber));
      }
    }
    uriScanner.close();
    pathInfo.setODataPathSegment(parseODataPathSegments(odataPathSegmentsAsString));
    if (!odataPathSegmentsAsString.startsWith(""String_Node_Str"")) {
      String requestUri=baseUri + ""String_Node_Str"" + odataPathSegmentsAsString+ queryParametersAsString;
      pathInfo.setRequestUri(new URI(requestUri));
    }
    return pathInfo;
  }
 catch (  URISyntaxException e1) {
    throw new BatchException(BatchException.INVALID_URI.addContent(currentLineNumber));
  }
}","private PathInfo parseRequestUri(final String uri) throws BatchException {
  PathInfoImpl pathInfo=new PathInfoImpl();
  pathInfo.setServiceRoot(batchRequestPathInfo.getServiceRoot());
  pathInfo.setPrecedingPathSegment(batchRequestPathInfo.getPrecedingSegments());
  final String odataPathSegmentsAsString;
  final String queryParametersAsString;
  try {
    Scanner uriScanner=new Scanner(uri).useDelimiter(LF);
    URI uriObject=new URI(uri);
    if (uriObject.isAbsolute()) {
      Pattern regexRequestUri=Pattern.compile(baseUri + ""String_Node_Str"");
      if (uriScanner.hasNext(regexRequestUri)) {
        uriScanner.next(regexRequestUri);
        MatchResult result=uriScanner.match();
        if (result.groupCount() == 2) {
          odataPathSegmentsAsString=result.group(1);
          queryParametersAsString=result.group(2) != null ? result.group(2) : ""String_Node_Str"";
        }
 else {
          uriScanner.close();
          throw new BatchException(BatchException.INVALID_URI.addContent(currentLineNumber));
        }
      }
 else {
        uriScanner.close();
        throw new BatchException(BatchException.INVALID_URI.addContent(currentLineNumber));
      }
    }
 else {
      Pattern regexRequestUri=Pattern.compile(""String_Node_Str"");
      if (uriScanner.hasNext(regexRequestUri)) {
        uriScanner.next(regexRequestUri);
        MatchResult result=uriScanner.match();
        if (result.groupCount() == 2) {
          odataPathSegmentsAsString=result.group(1);
          queryParametersAsString=result.group(2) != null ? result.group(2) : ""String_Node_Str"";
        }
 else {
          uriScanner.close();
          throw new BatchException(BatchException.INVALID_URI.addContent(currentLineNumber));
        }
      }
 else       if (uriScanner.hasNext(""String_Node_Str"")) {
        uriScanner.close();
        throw new BatchException(BatchException.UNSUPPORTED_ABSOLUTE_PATH.addContent(currentLineNumber));
      }
 else {
        uriScanner.close();
        throw new BatchException(BatchException.INVALID_URI.addContent(currentLineNumber));
      }
    }
    uriScanner.close();
    pathInfo.setODataPathSegment(parseODataPathSegments(odataPathSegmentsAsString));
    if (!odataPathSegmentsAsString.startsWith(""String_Node_Str"")) {
      String requestUri=baseUri + ""String_Node_Str"" + odataPathSegmentsAsString+ queryParametersAsString;
      pathInfo.setRequestUri(new URI(requestUri));
    }
    return pathInfo;
  }
 catch (  URISyntaxException e) {
    throw new BatchException(BatchException.INVALID_URI.addContent(currentLineNumber),e);
  }
}",0.9994191674733786
17814,"@Test public void testErrorBatch() throws Exception {
  List<BatchPart> batch=new ArrayList<BatchPart>();
  BatchPart request=BatchQueryPart.method(GET).uri(""String_Node_Str"").build();
  batch.add(request);
  InputStream body=EntityProvider.writeBatchRequestBody(batch,BOUNDARY);
  String bodyAsString=StringHelper.inputStreamToString(body,true);
  checkMimeHeaders(bodyAsString);
  checkBoundaryDelimiters(bodyAsString);
  assertTrue(bodyAsString.contains(""String_Node_Str""));
  HttpResponse batchResponse=execute(bodyAsString);
  InputStream responseBody=batchResponse.getEntity().getContent();
  String contentType=batchResponse.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue();
  List<BatchSingleResponse> responses=EntityProvider.parseBatchResponse(responseBody,contentType);
  for (  BatchSingleResponse response : responses) {
    assertEquals(""String_Node_Str"",response.getStatusCode());
    assertEquals(""String_Node_Str"",response.getStatusInfo());
  }
}","@Test public void testErrorBatch() throws Exception {
  List<BatchPart> batch=new ArrayList<BatchPart>();
  BatchPart request=BatchQueryPart.method(GET).uri(""String_Node_Str"").build();
  batch.add(request);
  InputStream body=EntityProvider.writeBatchRequest(batch,BOUNDARY);
  String bodyAsString=StringHelper.inputStreamToString(body,true);
  checkMimeHeaders(bodyAsString);
  checkBoundaryDelimiters(bodyAsString);
  assertTrue(bodyAsString.contains(""String_Node_Str""));
  HttpResponse batchResponse=execute(bodyAsString);
  InputStream responseBody=batchResponse.getEntity().getContent();
  String contentType=batchResponse.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue();
  List<BatchSingleResponse> responses=EntityProvider.parseBatchResponse(responseBody,contentType);
  for (  BatchSingleResponse response : responses) {
    assertEquals(""String_Node_Str"",response.getStatusCode());
    assertEquals(""String_Node_Str"",response.getStatusInfo());
  }
}",0.9979253112033196
17815,"@Test public void testContentIdReferencing() throws Exception {
  List<BatchPart> batch=new ArrayList<BatchPart>();
  BatchChangeSet changeSet=BatchChangeSet.newBuilder().build();
  Map<String,String> changeSetHeaders=new HashMap<String,String>();
  changeSetHeaders.put(""String_Node_Str"",""String_Node_Str"");
  changeSetHeaders.put(""String_Node_Str"",""String_Node_Str"");
  BatchChangeSetPart changeRequest=BatchChangeSetPart.method(POST).uri(""String_Node_Str"").contentId(""String_Node_Str"").body(""String_Node_Str"").headers(changeSetHeaders).build();
  changeSet.add(changeRequest);
  changeSetHeaders=new HashMap<String,String>();
  changeSetHeaders.put(""String_Node_Str"",""String_Node_Str"");
  BatchChangeSetPart changeRequest2=BatchChangeSetPart.method(PUT).uri(""String_Node_Str"").contentId(""String_Node_Str"").body(""String_Node_Str"").headers(changeSetHeaders).build();
  changeSet.add(changeRequest2);
  batch.add(changeSet);
  Map<String,String> getRequestHeaders=new HashMap<String,String>();
  getRequestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  BatchPart request=BatchQueryPart.method(GET).uri(""String_Node_Str"").contentId(""String_Node_Str"").headers(getRequestHeaders).build();
  batch.add(request);
  InputStream body=EntityProvider.writeBatchRequestBody(batch,BOUNDARY);
  String bodyAsString=StringHelper.inputStreamToString(body,true);
  checkMimeHeaders(bodyAsString);
  checkBoundaryDelimiters(bodyAsString);
  assertTrue(bodyAsString.contains(""String_Node_Str""));
  assertTrue(bodyAsString.contains(""String_Node_Str""));
  assertTrue(bodyAsString.contains(""String_Node_Str""));
  HttpResponse batchResponse=execute(bodyAsString);
  InputStream responseBody=batchResponse.getEntity().getContent();
  String contentType=batchResponse.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue();
  List<BatchSingleResponse> responses=EntityProvider.parseBatchResponse(responseBody,contentType);
  for (  BatchSingleResponse response : responses) {
    if (""String_Node_Str"".equals(response.getContentId())) {
      assertEquals(""String_Node_Str"",response.getStatusCode());
      assertEquals(""String_Node_Str"",response.getStatusInfo());
    }
 else     if (""String_Node_Str"".equals(response.getContentId())) {
      assertEquals(""String_Node_Str"",response.getStatusCode());
      assertEquals(""String_Node_Str"",response.getStatusInfo());
    }
 else     if (""String_Node_Str"".equals(response.getContentId())) {
      assertEquals(""String_Node_Str"",response.getStatusCode());
      assertEquals(""String_Node_Str"",response.getStatusInfo());
    }
 else {
      fail();
    }
  }
}","@Test public void testContentIdReferencing() throws Exception {
  List<BatchPart> batch=new ArrayList<BatchPart>();
  BatchChangeSet changeSet=BatchChangeSet.newBuilder().build();
  Map<String,String> changeSetHeaders=new HashMap<String,String>();
  changeSetHeaders.put(""String_Node_Str"",""String_Node_Str"");
  changeSetHeaders.put(""String_Node_Str"",""String_Node_Str"");
  BatchChangeSetPart changeRequest=BatchChangeSetPart.method(POST).uri(""String_Node_Str"").contentId(""String_Node_Str"").body(""String_Node_Str"").headers(changeSetHeaders).build();
  changeSet.add(changeRequest);
  changeSetHeaders=new HashMap<String,String>();
  changeSetHeaders.put(""String_Node_Str"",""String_Node_Str"");
  BatchChangeSetPart changeRequest2=BatchChangeSetPart.method(PUT).uri(""String_Node_Str"").contentId(""String_Node_Str"").body(""String_Node_Str"").headers(changeSetHeaders).build();
  changeSet.add(changeRequest2);
  batch.add(changeSet);
  Map<String,String> getRequestHeaders=new HashMap<String,String>();
  getRequestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  BatchPart request=BatchQueryPart.method(GET).uri(""String_Node_Str"").contentId(""String_Node_Str"").headers(getRequestHeaders).build();
  batch.add(request);
  InputStream body=EntityProvider.writeBatchRequest(batch,BOUNDARY);
  String bodyAsString=StringHelper.inputStreamToString(body,true);
  checkMimeHeaders(bodyAsString);
  checkBoundaryDelimiters(bodyAsString);
  assertTrue(bodyAsString.contains(""String_Node_Str""));
  assertTrue(bodyAsString.contains(""String_Node_Str""));
  assertTrue(bodyAsString.contains(""String_Node_Str""));
  HttpResponse batchResponse=execute(bodyAsString);
  InputStream responseBody=batchResponse.getEntity().getContent();
  String contentType=batchResponse.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue();
  List<BatchSingleResponse> responses=EntityProvider.parseBatchResponse(responseBody,contentType);
  for (  BatchSingleResponse response : responses) {
    if (""String_Node_Str"".equals(response.getContentId())) {
      assertEquals(""String_Node_Str"",response.getStatusCode());
      assertEquals(""String_Node_Str"",response.getStatusInfo());
    }
 else     if (""String_Node_Str"".equals(response.getContentId())) {
      assertEquals(""String_Node_Str"",response.getStatusCode());
      assertEquals(""String_Node_Str"",response.getStatusInfo());
    }
 else     if (""String_Node_Str"".equals(response.getContentId())) {
      assertEquals(""String_Node_Str"",response.getStatusCode());
      assertEquals(""String_Node_Str"",response.getStatusInfo());
    }
 else {
      fail();
    }
  }
}",0.9992257065427798
17816,"@Test public void testSimpleBatch() throws Exception {
  List<BatchPart> batch=new ArrayList<BatchPart>();
  BatchPart request=BatchQueryPart.method(GET).uri(""String_Node_Str"").build();
  batch.add(request);
  InputStream body=EntityProvider.writeBatchRequestBody(batch,BOUNDARY);
  String batchRequestBody=StringHelper.inputStreamToString(body,true);
  checkMimeHeaders(batchRequestBody);
  checkBoundaryDelimiters(batchRequestBody);
  assertTrue(batchRequestBody.contains(""String_Node_Str""));
  HttpResponse batchResponse=execute(batchRequestBody);
  InputStream responseBody=batchResponse.getEntity().getContent();
  String contentType=batchResponse.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue();
  List<BatchSingleResponse> responses=EntityProvider.parseBatchResponse(responseBody,contentType);
  for (  BatchSingleResponse response : responses) {
    assertEquals(""String_Node_Str"",response.getStatusCode());
    assertEquals(""String_Node_Str"",response.getStatusInfo());
    assertTrue(response.getBody().contains(""String_Node_Str""));
    assertEquals(""String_Node_Str"",response.getHeader(HttpHeaders.CONTENT_TYPE));
    assertNotNull(response.getHeader(HttpHeaders.CONTENT_LENGTH));
  }
}","@Test public void testSimpleBatch() throws Exception {
  List<BatchPart> batch=new ArrayList<BatchPart>();
  BatchPart request=BatchQueryPart.method(GET).uri(""String_Node_Str"").build();
  batch.add(request);
  InputStream body=EntityProvider.writeBatchRequest(batch,BOUNDARY);
  String batchRequestBody=StringHelper.inputStreamToString(body,true);
  checkMimeHeaders(batchRequestBody);
  checkBoundaryDelimiters(batchRequestBody);
  assertTrue(batchRequestBody.contains(""String_Node_Str""));
  HttpResponse batchResponse=execute(batchRequestBody);
  InputStream responseBody=batchResponse.getEntity().getContent();
  String contentType=batchResponse.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue();
  List<BatchSingleResponse> responses=EntityProvider.parseBatchResponse(responseBody,contentType);
  for (  BatchSingleResponse response : responses) {
    assertEquals(""String_Node_Str"",response.getStatusCode());
    assertEquals(""String_Node_Str"",response.getStatusInfo());
    assertTrue(response.getBody().contains(""String_Node_Str""));
    assertEquals(""String_Node_Str"",response.getHeader(HttpHeaders.CONTENT_TYPE));
    assertNotNull(response.getHeader(HttpHeaders.CONTENT_LENGTH));
  }
}",0.998330550918197
17817,"@Test public void testChangeSetBatch() throws Exception {
  List<BatchPart> batch=new ArrayList<BatchPart>();
  BatchChangeSet changeSet=BatchChangeSet.newBuilder().build();
  Map<String,String> changeSetHeaders=new HashMap<String,String>();
  changeSetHeaders.put(""String_Node_Str"",""String_Node_Str"");
  BatchChangeSetPart changeRequest=BatchChangeSetPart.method(PUT).uri(""String_Node_Str"").body(""String_Node_Str"").headers(changeSetHeaders).build();
  changeSet.add(changeRequest);
  batch.add(changeSet);
  BatchPart request=BatchQueryPart.method(GET).uri(""String_Node_Str"").build();
  batch.add(request);
  InputStream body=EntityProvider.writeBatchRequestBody(batch,BOUNDARY);
  String bodyAsString=StringHelper.inputStreamToString(body,true);
  checkMimeHeaders(bodyAsString);
  checkBoundaryDelimiters(bodyAsString);
  assertTrue(bodyAsString.contains(""String_Node_Str""));
  assertTrue(bodyAsString.contains(""String_Node_Str""));
  assertTrue(bodyAsString.contains(""String_Node_Str""));
  HttpResponse batchResponse=execute(bodyAsString);
  InputStream responseBody=batchResponse.getEntity().getContent();
  String contentType=batchResponse.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue();
  List<BatchSingleResponse> responses=EntityProvider.parseBatchResponse(responseBody,contentType);
  for (  BatchSingleResponse response : responses) {
    if (""String_Node_Str"".equals(response.getStatusCode())) {
      assertEquals(""String_Node_Str"",response.getStatusInfo());
    }
 else     if (""String_Node_Str"".equals(response.getStatusCode())) {
      assertEquals(""String_Node_Str"",response.getStatusInfo());
      assertTrue(response.getBody().contains(""String_Node_Str""));
    }
 else {
      fail();
    }
  }
}","@Test public void testChangeSetBatch() throws Exception {
  List<BatchPart> batch=new ArrayList<BatchPart>();
  BatchChangeSet changeSet=BatchChangeSet.newBuilder().build();
  Map<String,String> changeSetHeaders=new HashMap<String,String>();
  changeSetHeaders.put(""String_Node_Str"",""String_Node_Str"");
  BatchChangeSetPart changeRequest=BatchChangeSetPart.method(PUT).uri(""String_Node_Str"").body(""String_Node_Str"").headers(changeSetHeaders).build();
  changeSet.add(changeRequest);
  batch.add(changeSet);
  BatchPart request=BatchQueryPart.method(GET).uri(""String_Node_Str"").build();
  batch.add(request);
  InputStream body=EntityProvider.writeBatchRequest(batch,BOUNDARY);
  String bodyAsString=StringHelper.inputStreamToString(body,true);
  checkMimeHeaders(bodyAsString);
  checkBoundaryDelimiters(bodyAsString);
  assertTrue(bodyAsString.contains(""String_Node_Str""));
  assertTrue(bodyAsString.contains(""String_Node_Str""));
  assertTrue(bodyAsString.contains(""String_Node_Str""));
  HttpResponse batchResponse=execute(bodyAsString);
  InputStream responseBody=batchResponse.getEntity().getContent();
  String contentType=batchResponse.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue();
  List<BatchSingleResponse> responses=EntityProvider.parseBatchResponse(responseBody,contentType);
  for (  BatchSingleResponse response : responses) {
    if (""String_Node_Str"".equals(response.getStatusCode())) {
      assertEquals(""String_Node_Str"",response.getStatusInfo());
    }
 else     if (""String_Node_Str"".equals(response.getStatusCode())) {
      assertEquals(""String_Node_Str"",response.getStatusInfo());
      assertTrue(response.getBody().contains(""String_Node_Str""));
    }
 else {
      fail();
    }
  }
}",0.9988351776354106
17818,"private ODataRequest parseRequest(final Scanner scanner,final boolean isChangeSet) throws BatchException {
  ODataRequest request;
  if (scanner.hasNext(REG_EX_REQUEST_LINE)) {
    scanner.next(REG_EX_REQUEST_LINE);
    currentLineNumber++;
    String method=null;
    String uri=null;
    MatchResult result=scanner.match();
    if (result.groupCount() == 2) {
      method=result.group(1);
      uri=result.group(2).trim();
    }
 else {
      currentLineNumber++;
      throw new BatchException(BatchException.INVALID_REQUEST_LINE.addContent(scanner.next()).addContent(currentLineNumber));
    }
    PathInfo pathInfo=parseRequestUri(uri);
    Map<String,String> queryParameters=parseQueryParameters(uri);
    if (isChangeSet) {
      if (!HTTP_CHANGESET_METHODS.contains(method)) {
        throw new BatchException(BatchException.INVALID_CHANGESET_METHOD.addContent(currentLineNumber));
      }
    }
 else     if (!HTTP_BATCH_METHODS.contains(method)) {
      throw new BatchException(BatchException.INVALID_QUERY_OPERATION_METHOD.addContent(currentLineNumber));
    }
    ODataHttpMethod httpMethod=ODataHttpMethod.valueOf(method);
    Map<String,List<String>> headers=parseRequestHeaders(scanner);
    if (currentMimeHeaderContentId != null) {
      List<String> headerList=new ArrayList<String>();
      headerList.add(currentMimeHeaderContentId);
      headers.put(BatchConstants.MIME_HEADER_CONTENT_ID.toLowerCase(Locale.ENGLISH),headerList);
    }
    String contentType=getContentTypeHeader(headers);
    List<String> acceptHeaders=getAcceptHeader(headers);
    List<Locale> acceptLanguages=getAcceptLanguageHeader(headers);
    parseNewLine(scanner);
    InputStream body=new ByteArrayInputStream(""String_Node_Str"".getBytes());
    if (isChangeSet) {
      body=parseBody(scanner);
    }
    if (contentType != null) {
      request=ODataRequest.method(httpMethod).queryParameters(queryParameters).requestHeaders(headers).pathInfo(pathInfo).acceptableLanguages(acceptLanguages).contentType(contentType).body(body).acceptHeaders(acceptHeaders).build();
    }
 else {
      request=ODataRequest.method(httpMethod).queryParameters(queryParameters).requestHeaders(headers).pathInfo(pathInfo).acceptableLanguages(acceptLanguages).body(body).acceptHeaders(acceptHeaders).build();
    }
  }
 else {
    currentLineNumber++;
    throw new BatchException(BatchException.INVALID_REQUEST_LINE.addContent(scanner.next()).addContent(currentLineNumber));
  }
  return request;
}","private ODataRequest parseRequest(final Scanner scanner,final boolean isChangeSet) throws BatchException {
  try {
    ODataRequest request;
    if (scanner.hasNext(REG_EX_REQUEST_LINE)) {
      scanner.next(REG_EX_REQUEST_LINE);
      currentLineNumber++;
      String method=null;
      String uri=null;
      MatchResult result=scanner.match();
      if (result.groupCount() == 2) {
        method=result.group(1);
        uri=result.group(2).trim();
      }
 else {
        currentLineNumber++;
        throw new BatchException(BatchException.INVALID_REQUEST_LINE.addContent(scanner.next()).addContent(currentLineNumber));
      }
      PathInfo pathInfo=parseRequestUri(uri);
      Map<String,String> queryParameters=parseQueryParameters(uri);
      if (isChangeSet) {
        if (!HTTP_CHANGESET_METHODS.contains(method)) {
          throw new BatchException(BatchException.INVALID_CHANGESET_METHOD.addContent(currentLineNumber));
        }
      }
 else       if (!HTTP_BATCH_METHODS.contains(method)) {
        throw new BatchException(BatchException.INVALID_QUERY_OPERATION_METHOD.addContent(currentLineNumber));
      }
      ODataHttpMethod httpMethod=ODataHttpMethod.valueOf(method);
      Map<String,List<String>> headers=parseRequestHeaders(scanner);
      if (currentMimeHeaderContentId != null) {
        List<String> headerList=new ArrayList<String>();
        headerList.add(currentMimeHeaderContentId);
        headers.put(BatchConstants.MIME_HEADER_CONTENT_ID.toLowerCase(Locale.ENGLISH),headerList);
      }
      String contentType=getContentTypeHeader(headers);
      List<String> acceptHeaders=getAcceptHeader(headers);
      List<Locale> acceptLanguages=getAcceptLanguageHeader(headers);
      parseNewLine(scanner);
      InputStream body;
      body=new ByteArrayInputStream(""String_Node_Str"".getBytes(""String_Node_Str""));
      if (isChangeSet) {
        body=parseBody(scanner);
      }
      if (contentType != null) {
        request=ODataRequest.method(httpMethod).queryParameters(queryParameters).requestHeaders(headers).pathInfo(pathInfo).acceptableLanguages(acceptLanguages).contentType(contentType).body(body).acceptHeaders(acceptHeaders).build();
      }
 else {
        request=ODataRequest.method(httpMethod).queryParameters(queryParameters).requestHeaders(headers).pathInfo(pathInfo).acceptableLanguages(acceptLanguages).body(body).acceptHeaders(acceptHeaders).build();
      }
    }
 else {
      currentLineNumber++;
      throw new BatchException(BatchException.INVALID_REQUEST_LINE.addContent(scanner.next()).addContent(currentLineNumber));
    }
    return request;
  }
 catch (  UnsupportedEncodingException e) {
    throw new ODataRuntimeException(e);
  }
}",0.9546419610113878
17819,"@Override public ODataResponse handleRequest(final ODataRequest suppliedRequest) throws ODataException {
  ODataRequest request;
  String mimeHeaderContentId=suppliedRequest.getRequestHeaderValue(BatchConstants.MIME_HEADER_CONTENT_ID.toLowerCase());
  String requestHeaderContentId=suppliedRequest.getRequestHeaderValue(BatchConstants.REQUEST_HEADER_CONTENT_ID.toLowerCase());
  List<PathSegment> odataSegments=suppliedRequest.getPathInfo().getODataSegments();
  if (!odataSegments.isEmpty() && odataSegments.get(0).getPath().matches(""String_Node_Str"")) {
    request=modifyRequest(suppliedRequest,odataSegments);
  }
 else {
    request=suppliedRequest;
  }
  ODataRequestHandler handler=createHandler(request);
  ODataResponse response=handler.handle(request);
  if (response.getStatus().getStatusCode() < BAD_REQUEST) {
    response=setContentIdHeader(response,mimeHeaderContentId,requestHeaderContentId);
  }
  if (request.getMethod().equals(ODataHttpMethod.POST)) {
    String baseUri=getBaseUri(request);
    if (mimeHeaderContentId != null) {
      fillContentIdMap(response,mimeHeaderContentId,baseUri);
    }
 else     if (requestHeaderContentId != null) {
      fillContentIdMap(response,requestHeaderContentId,baseUri);
    }
  }
  return response;
}","@Override public ODataResponse handleRequest(final ODataRequest suppliedRequest) throws ODataException {
  ODataRequest request;
  String mimeHeaderContentId=suppliedRequest.getRequestHeaderValue(BatchConstants.MIME_HEADER_CONTENT_ID.toLowerCase(Locale.ENGLISH));
  String requestHeaderContentId=suppliedRequest.getRequestHeaderValue(BatchConstants.REQUEST_HEADER_CONTENT_ID.toLowerCase(Locale.ENGLISH));
  List<PathSegment> odataSegments=suppliedRequest.getPathInfo().getODataSegments();
  if (!odataSegments.isEmpty() && odataSegments.get(0).getPath().matches(""String_Node_Str"")) {
    request=modifyRequest(suppliedRequest,odataSegments);
  }
 else {
    request=suppliedRequest;
  }
  ODataRequestHandler handler=createHandler(request);
  ODataResponse response=handler.handle(request);
  if (response.getStatus().getStatusCode() < BAD_REQUEST) {
    response=setContentIdHeader(response,mimeHeaderContentId,requestHeaderContentId);
  }
  if (request.getMethod().equals(ODataHttpMethod.POST)) {
    String baseUri=getBaseUri(request);
    if (mimeHeaderContentId != null) {
      fillContentIdMap(response,mimeHeaderContentId,baseUri);
    }
 else     if (requestHeaderContentId != null) {
      fillContentIdMap(response,requestHeaderContentId,baseUri);
    }
  }
  return response;
}",0.9890196078431372
17820,"@Override public BatchResponsePart handleBatchPart(final BatchPart batchPart) throws ODataException {
  if (batchPart.isChangeSet()) {
    List<ODataRequest> changeSetRequests=batchPart.getRequests();
    contentIdMap=new HashMap<String,String>();
    return service.getBatchProcessor().executeChangeSet(this,changeSetRequests);
  }
 else {
    if (batchPart.getRequests().size() != 1) {
      throw new ODataException(""String_Node_Str"");
    }
    ODataRequest request=batchPart.getRequests().get(0);
    ODataRequestHandler handler=createHandler(request);
    String mimeHeaderContentId=request.getRequestHeaderValue(BatchConstants.MIME_HEADER_CONTENT_ID.toLowerCase());
    String requestHeaderContentId=request.getRequestHeaderValue(BatchConstants.REQUEST_HEADER_CONTENT_ID.toLowerCase());
    ODataResponse response=setContentIdHeader(handler.handle(request),mimeHeaderContentId,requestHeaderContentId);
    List<ODataResponse> responses=new ArrayList<ODataResponse>(1);
    responses.add(response);
    return BatchResponsePart.responses(responses).changeSet(false).build();
  }
}","@Override public BatchResponsePart handleBatchPart(final BatchPart batchPart) throws ODataException {
  if (batchPart.isChangeSet()) {
    List<ODataRequest> changeSetRequests=batchPart.getRequests();
    contentIdMap=new HashMap<String,String>();
    return service.getBatchProcessor().executeChangeSet(this,changeSetRequests);
  }
 else {
    if (batchPart.getRequests().size() != 1) {
      throw new ODataException(""String_Node_Str"");
    }
    ODataRequest request=batchPart.getRequests().get(0);
    ODataRequestHandler handler=createHandler(request);
    String mimeHeaderContentId=request.getRequestHeaderValue(BatchConstants.MIME_HEADER_CONTENT_ID.toLowerCase(Locale.ENGLISH));
    String requestHeaderContentId=request.getRequestHeaderValue(BatchConstants.REQUEST_HEADER_CONTENT_ID.toLowerCase(Locale.ENGLISH));
    ODataResponse response=setContentIdHeader(handler.handle(request),mimeHeaderContentId,requestHeaderContentId);
    List<ODataResponse> responses=new ArrayList<ODataResponse>(1);
    responses.add(response);
    return BatchResponsePart.responses(responses).changeSet(false).build();
  }
}",0.9872727272727272
17821,"private List<String> getAcceptHeader(final Map<String,List<String>> headers){
  List<String> acceptHeaders=new ArrayList<String>();
  List<String> requestAcceptHeaderList=headers.get(HttpHeaders.ACCEPT.toLowerCase());
  if (requestAcceptHeaderList != null) {
    acceptHeaders=requestAcceptHeaderList;
  }
  return acceptHeaders;
}","private List<String> getAcceptHeader(final Map<String,List<String>> headers){
  List<String> acceptHeaders=new ArrayList<String>();
  List<String> requestAcceptHeaderList=headers.get(HttpHeaders.ACCEPT.toLowerCase(Locale.ENGLISH));
  if (requestAcceptHeaderList != null) {
    acceptHeaders=requestAcceptHeaderList;
  }
  return acceptHeaders;
}",0.9792899408284024
17822,"private List<Locale> getAcceptLanguageHeader(final Map<String,List<String>> headers){
  List<String> requestAcceptLanguageList=headers.get(HttpHeaders.ACCEPT_LANGUAGE.toLowerCase());
  List<Locale> acceptLanguages=new ArrayList<Locale>();
  if (requestAcceptLanguageList != null) {
    for (    String acceptLanguage : requestAcceptLanguageList) {
      String[] part=acceptLanguage.split(""String_Node_Str"");
      String language=part[0];
      String country=""String_Node_Str"";
      if (part.length == 2) {
        country=part[part.length - 1];
      }
      Locale locale=new Locale(language,country);
      acceptLanguages.add(locale);
    }
  }
  return acceptLanguages;
}","private List<Locale> getAcceptLanguageHeader(final Map<String,List<String>> headers){
  List<String> requestAcceptLanguageList=headers.get(HttpHeaders.ACCEPT_LANGUAGE.toLowerCase(Locale.ENGLISH));
  List<Locale> acceptLanguages=new ArrayList<Locale>();
  if (requestAcceptLanguageList != null) {
    for (    String acceptLanguage : requestAcceptLanguageList) {
      String[] part=acceptLanguage.split(""String_Node_Str"");
      String language=part[0];
      String country=""String_Node_Str"";
      if (part.length == 2) {
        country=part[part.length - 1];
      }
      Locale locale=new Locale(language,country);
      acceptLanguages.add(locale);
    }
  }
  return acceptLanguages;
}",0.9897959183673468
17823,"private BatchPart parseMultipart(final Scanner scanner,final String boundary,final boolean isChangeSet) throws BatchException {
  Map<String,String> mimeHeaders=new HashMap<String,String>();
  BatchPart multipart=null;
  List<ODataRequest> requests=new ArrayList<ODataRequest>();
  if (scanner.hasNext(""String_Node_Str"" + boundary + REG_EX_ZERO_OR_MORE_WHITESPACES)) {
    scanner.next();
    currentLineNumber++;
    mimeHeaders=parseHeaders(scanner);
    currentMimeHeaderContentId=mimeHeaders.get(BatchConstants.HTTP_CONTENT_ID.toLowerCase());
    String contentType=mimeHeaders.get(HttpHeaders.CONTENT_TYPE.toLowerCase());
    if (contentType == null) {
      throw new BatchException(BatchException.MISSING_CONTENT_TYPE);
    }
    if (isChangeSet) {
      if (BatchConstants.HTTP_APPLICATION_HTTP.equalsIgnoreCase(contentType)) {
        validateEncoding(mimeHeaders.get(BatchConstants.HTTP_CONTENT_TRANSFER_ENCODING.toLowerCase()));
        parseNewLine(scanner);
        requests.add(parseRequest(scanner,isChangeSet));
        multipart=new BatchPartImpl(false,requests);
      }
 else {
        throw new BatchException(BatchException.INVALID_CONTENT_TYPE.addContent(BatchConstants.HTTP_APPLICATION_HTTP));
      }
    }
 else {
      if (BatchConstants.HTTP_APPLICATION_HTTP.equalsIgnoreCase(contentType)) {
        validateEncoding(mimeHeaders.get(BatchConstants.HTTP_CONTENT_TRANSFER_ENCODING.toLowerCase()));
        parseNewLine(scanner);
        requests.add(parseRequest(scanner,isChangeSet));
        multipart=new BatchPartImpl(false,requests);
      }
 else       if (contentType.matches(REG_EX_OPTIONAL_WHITESPACE + BatchConstants.MULTIPART_MIXED + ANY_CHARACTERS)) {
        String changeSetBoundary=getBoundary(contentType);
        if (boundary.equals(changeSetBoundary)) {
          throw new BatchException(BatchException.INVALID_CHANGESET_BOUNDARY.addContent(currentLineNumber));
        }
        List<ODataRequest> changeSetRequests=new LinkedList<ODataRequest>();
        parseNewLine(scanner);
        Pattern changeSetCloseDelimiter=Pattern.compile(""String_Node_Str"" + changeSetBoundary + ""String_Node_Str""+ REG_EX_ZERO_OR_MORE_WHITESPACES);
        while (!scanner.hasNext(changeSetCloseDelimiter)) {
          BatchPart part=parseMultipart(scanner,changeSetBoundary,true);
          if (part.getRequests().size() == 1) {
            changeSetRequests.add(part.getRequests().get(0));
          }
        }
        scanner.next(changeSetCloseDelimiter);
        currentLineNumber++;
        multipart=new BatchPartImpl(true,changeSetRequests);
      }
 else {
        throw new BatchException(BatchException.INVALID_CONTENT_TYPE.addContent(BatchConstants.MULTIPART_MIXED + ""String_Node_Str"" + BatchConstants.HTTP_APPLICATION_HTTP));
      }
    }
  }
 else   if (scanner.hasNext(boundary + REG_EX_ZERO_OR_MORE_WHITESPACES)) {
    currentLineNumber++;
    throw new BatchException(BatchException.INVALID_BOUNDARY_DELIMITER.addContent(currentLineNumber));
  }
 else   if (scanner.hasNext(REG_EX_ANY_BOUNDARY_STRING)) {
    currentLineNumber++;
    throw new BatchException(BatchException.NO_MATCH_WITH_BOUNDARY_STRING.addContent(boundary).addContent(currentLineNumber));
  }
 else {
    currentLineNumber++;
    throw new BatchException(BatchException.MISSING_BOUNDARY_DELIMITER.addContent(currentLineNumber));
  }
  return multipart;
}","private BatchPart parseMultipart(final Scanner scanner,final String boundary,final boolean isChangeSet) throws BatchException {
  Map<String,String> mimeHeaders=new HashMap<String,String>();
  BatchPart multipart=null;
  List<ODataRequest> requests=new ArrayList<ODataRequest>();
  if (scanner.hasNext(""String_Node_Str"" + boundary + REG_EX_ZERO_OR_MORE_WHITESPACES)) {
    scanner.next();
    currentLineNumber++;
    mimeHeaders=parseHeaders(scanner);
    currentMimeHeaderContentId=mimeHeaders.get(BatchConstants.HTTP_CONTENT_ID.toLowerCase(Locale.ENGLISH));
    String contentType=mimeHeaders.get(HttpHeaders.CONTENT_TYPE.toLowerCase(Locale.ENGLISH));
    if (contentType == null) {
      throw new BatchException(BatchException.MISSING_CONTENT_TYPE);
    }
    if (isChangeSet) {
      if (BatchConstants.HTTP_APPLICATION_HTTP.equalsIgnoreCase(contentType)) {
        validateEncoding(mimeHeaders.get(BatchConstants.HTTP_CONTENT_TRANSFER_ENCODING.toLowerCase(Locale.ENGLISH)));
        parseNewLine(scanner);
        requests.add(parseRequest(scanner,isChangeSet));
        multipart=new BatchPartImpl(false,requests);
      }
 else {
        throw new BatchException(BatchException.INVALID_CONTENT_TYPE.addContent(BatchConstants.HTTP_APPLICATION_HTTP));
      }
    }
 else {
      if (BatchConstants.HTTP_APPLICATION_HTTP.equalsIgnoreCase(contentType)) {
        validateEncoding(mimeHeaders.get(BatchConstants.HTTP_CONTENT_TRANSFER_ENCODING.toLowerCase(Locale.ENGLISH)));
        parseNewLine(scanner);
        requests.add(parseRequest(scanner,isChangeSet));
        multipart=new BatchPartImpl(false,requests);
      }
 else       if (contentType.matches(REG_EX_OPTIONAL_WHITESPACE + BatchConstants.MULTIPART_MIXED + ANY_CHARACTERS)) {
        String changeSetBoundary=getBoundary(contentType);
        if (boundary.equals(changeSetBoundary)) {
          throw new BatchException(BatchException.INVALID_CHANGESET_BOUNDARY.addContent(currentLineNumber));
        }
        List<ODataRequest> changeSetRequests=new LinkedList<ODataRequest>();
        parseNewLine(scanner);
        Pattern changeSetCloseDelimiter=Pattern.compile(""String_Node_Str"" + changeSetBoundary + ""String_Node_Str""+ REG_EX_ZERO_OR_MORE_WHITESPACES);
        while (!scanner.hasNext(changeSetCloseDelimiter)) {
          BatchPart part=parseMultipart(scanner,changeSetBoundary,true);
          if (part.getRequests().size() == 1) {
            changeSetRequests.add(part.getRequests().get(0));
          }
        }
        scanner.next(changeSetCloseDelimiter);
        currentLineNumber++;
        multipart=new BatchPartImpl(true,changeSetRequests);
      }
 else {
        throw new BatchException(BatchException.INVALID_CONTENT_TYPE.addContent(BatchConstants.MULTIPART_MIXED + ""String_Node_Str"" + BatchConstants.HTTP_APPLICATION_HTTP));
      }
    }
  }
 else   if (scanner.hasNext(boundary + REG_EX_ZERO_OR_MORE_WHITESPACES)) {
    currentLineNumber++;
    throw new BatchException(BatchException.INVALID_BOUNDARY_DELIMITER.addContent(currentLineNumber));
  }
 else   if (scanner.hasNext(REG_EX_ANY_BOUNDARY_STRING)) {
    currentLineNumber++;
    throw new BatchException(BatchException.NO_MATCH_WITH_BOUNDARY_STRING.addContent(boundary).addContent(currentLineNumber));
  }
 else {
    currentLineNumber++;
    throw new BatchException(BatchException.MISSING_BOUNDARY_DELIMITER.addContent(currentLineNumber));
  }
  return multipart;
}",0.9917501473187978
17824,"private String getContentTypeHeader(final Map<String,List<String>> headers){
  List<String> requestContentTypeList=headers.get(HttpHeaders.CONTENT_TYPE.toLowerCase());
  String contentType=null;
  if (requestContentTypeList != null) {
    for (    String requestContentType : requestContentTypeList) {
      contentType=contentType != null ? contentType + ""String_Node_Str"" + requestContentType : requestContentType;
    }
  }
  return contentType;
}","private String getContentTypeHeader(final Map<String,List<String>> headers){
  List<String> requestContentTypeList=headers.get(HttpHeaders.CONTENT_TYPE.toLowerCase(Locale.ENGLISH));
  String contentType=null;
  if (requestContentTypeList != null) {
    for (    String requestContentType : requestContentTypeList) {
      contentType=contentType != null ? contentType + ""String_Node_Str"" + requestContentType : requestContentType;
    }
  }
  return contentType;
}",0.9846827133479212
17825,"private String readBody(final InputStream in) throws BatchException {
  byte[] tmp=new byte[2048];
  int count;
  BatchException cachedException=null;
  StringBuffer b=new StringBuffer();
  try {
    count=in.read(tmp);
    while (count >= 0) {
      b.append(new String(tmp,0,count));
      count=in.read(tmp);
    }
  }
 catch (  IOException e) {
    cachedException=new BatchException(ODataMessageException.COMMON,e);
    throw cachedException;
  }
 finally {
    try {
      in.close();
    }
 catch (    IOException e) {
      if (cachedException != null) {
        throw cachedException;
      }
    }
  }
  return b.toString();
}","private String readBody(final InputStream in) throws BatchException {
  byte[] tmp=new byte[2048];
  int count;
  BatchException cachedException=null;
  StringBuffer b=new StringBuffer();
  try {
    count=in.read(tmp);
    while (count >= 0) {
      b.append(new String(tmp,0,count,""String_Node_Str""));
      count=in.read(tmp);
    }
  }
 catch (  IOException e) {
    cachedException=new BatchException(ODataMessageException.COMMON,e);
    throw cachedException;
  }
 finally {
    try {
      in.close();
    }
 catch (    IOException e) {
      if (cachedException != null) {
        throw cachedException;
      }
    }
  }
  return b.toString();
}",0.986046511627907
17826,"private ODataRequest parseRequest(final Scanner scanner,final boolean isChangeSet) throws BatchException {
  ODataRequest request;
  if (scanner.hasNext(REG_EX_REQUEST_LINE)) {
    scanner.next(REG_EX_REQUEST_LINE);
    currentLineNumber++;
    String method=null;
    String uri=null;
    MatchResult result=scanner.match();
    if (result.groupCount() == 2) {
      method=result.group(1);
      uri=result.group(2).trim();
    }
 else {
      currentLineNumber++;
      throw new BatchException(BatchException.INVALID_REQUEST_LINE.addContent(scanner.next()).addContent(currentLineNumber));
    }
    PathInfo pathInfo=parseRequestUri(uri);
    Map<String,String> queryParameters=parseQueryParameters(uri);
    if (isChangeSet) {
      if (!HTTP_CHANGESET_METHODS.contains(method)) {
        throw new BatchException(BatchException.INVALID_CHANGESET_METHOD.addContent(currentLineNumber));
      }
    }
 else     if (!HTTP_BATCH_METHODS.contains(method)) {
      throw new BatchException(BatchException.INVALID_QUERY_OPERATION_METHOD.addContent(currentLineNumber));
    }
    ODataHttpMethod httpMethod=ODataHttpMethod.valueOf(method);
    Map<String,List<String>> headers=parseRequestHeaders(scanner);
    if (currentMimeHeaderContentId != null) {
      List<String> headerList=new ArrayList<String>();
      headerList.add(currentMimeHeaderContentId);
      headers.put(BatchConstants.MIME_HEADER_CONTENT_ID.toLowerCase(),headerList);
    }
    String contentType=getContentTypeHeader(headers);
    List<String> acceptHeaders=getAcceptHeader(headers);
    List<Locale> acceptLanguages=getAcceptLanguageHeader(headers);
    parseNewLine(scanner);
    InputStream body=new ByteArrayInputStream(""String_Node_Str"".getBytes());
    if (isChangeSet) {
      body=parseBody(scanner);
    }
    if (contentType != null) {
      request=ODataRequest.method(httpMethod).queryParameters(queryParameters).requestHeaders(headers).pathInfo(pathInfo).acceptableLanguages(acceptLanguages).contentType(contentType).body(body).acceptHeaders(acceptHeaders).build();
    }
 else {
      request=ODataRequest.method(httpMethod).queryParameters(queryParameters).requestHeaders(headers).pathInfo(pathInfo).acceptableLanguages(acceptLanguages).body(body).acceptHeaders(acceptHeaders).build();
    }
  }
 else {
    currentLineNumber++;
    throw new BatchException(BatchException.INVALID_REQUEST_LINE.addContent(scanner.next()).addContent(currentLineNumber));
  }
  return request;
}","private ODataRequest parseRequest(final Scanner scanner,final boolean isChangeSet) throws BatchException {
  ODataRequest request;
  if (scanner.hasNext(REG_EX_REQUEST_LINE)) {
    scanner.next(REG_EX_REQUEST_LINE);
    currentLineNumber++;
    String method=null;
    String uri=null;
    MatchResult result=scanner.match();
    if (result.groupCount() == 2) {
      method=result.group(1);
      uri=result.group(2).trim();
    }
 else {
      currentLineNumber++;
      throw new BatchException(BatchException.INVALID_REQUEST_LINE.addContent(scanner.next()).addContent(currentLineNumber));
    }
    PathInfo pathInfo=parseRequestUri(uri);
    Map<String,String> queryParameters=parseQueryParameters(uri);
    if (isChangeSet) {
      if (!HTTP_CHANGESET_METHODS.contains(method)) {
        throw new BatchException(BatchException.INVALID_CHANGESET_METHOD.addContent(currentLineNumber));
      }
    }
 else     if (!HTTP_BATCH_METHODS.contains(method)) {
      throw new BatchException(BatchException.INVALID_QUERY_OPERATION_METHOD.addContent(currentLineNumber));
    }
    ODataHttpMethod httpMethod=ODataHttpMethod.valueOf(method);
    Map<String,List<String>> headers=parseRequestHeaders(scanner);
    if (currentMimeHeaderContentId != null) {
      List<String> headerList=new ArrayList<String>();
      headerList.add(currentMimeHeaderContentId);
      headers.put(BatchConstants.MIME_HEADER_CONTENT_ID.toLowerCase(Locale.ENGLISH),headerList);
    }
    String contentType=getContentTypeHeader(headers);
    List<String> acceptHeaders=getAcceptHeader(headers);
    List<Locale> acceptLanguages=getAcceptLanguageHeader(headers);
    parseNewLine(scanner);
    InputStream body=new ByteArrayInputStream(""String_Node_Str"".getBytes());
    if (isChangeSet) {
      body=parseBody(scanner);
    }
    if (contentType != null) {
      request=ODataRequest.method(httpMethod).queryParameters(queryParameters).requestHeaders(headers).pathInfo(pathInfo).acceptableLanguages(acceptLanguages).contentType(contentType).body(body).acceptHeaders(acceptHeaders).build();
    }
 else {
      request=ODataRequest.method(httpMethod).queryParameters(queryParameters).requestHeaders(headers).pathInfo(pathInfo).acceptableLanguages(acceptLanguages).body(body).acceptHeaders(acceptHeaders).build();
    }
  }
 else {
    currentLineNumber++;
    throw new BatchException(BatchException.INVALID_REQUEST_LINE.addContent(scanner.next()).addContent(currentLineNumber));
  }
  return request;
}",0.997165991902834
17827,"private Map<String,List<String>> parseRequestHeaders(final Scanner scanner) throws BatchException {
  Map<String,List<String>> headers=new HashMap<String,List<String>>();
  while (scanner.hasNext() && !scanner.hasNext(REG_EX_BLANK_LINE)) {
    if (scanner.hasNext(REG_EX_HEADER)) {
      scanner.next(REG_EX_HEADER);
      currentLineNumber++;
      MatchResult result=scanner.match();
      if (result.groupCount() == 2) {
        String headerName=result.group(1).trim().toLowerCase();
        String headerValue=result.group(2).trim();
        if (HttpHeaders.ACCEPT.equalsIgnoreCase(headerName)) {
          List<String> acceptHeaders=parseAcceptHeaders(headerValue);
          headers.put(headerName,acceptHeaders);
        }
 else         if (HttpHeaders.ACCEPT_LANGUAGE.equalsIgnoreCase(headerName)) {
          List<String> acceptLanguageHeaders=parseAcceptableLanguages(headerValue);
          headers.put(headerName,acceptLanguageHeaders);
        }
 else         if (!BatchConstants.HTTP_CONTENT_ID.equalsIgnoreCase(headerName)) {
          if (headers.containsKey(headerName)) {
            headers.get(headerName).add(headerValue);
          }
 else {
            List<String> headerList=new ArrayList<String>();
            headerList.add(headerValue);
            headers.put(headerName,headerList);
          }
        }
 else {
          List<String> headerList=new ArrayList<String>();
          headerList.add(headerValue);
          headers.put(BatchConstants.REQUEST_HEADER_CONTENT_ID.toLowerCase(),headerList);
        }
      }
    }
 else {
      currentLineNumber++;
      throw new BatchException(BatchException.INVALID_HEADER.addContent(scanner.next()).addContent(currentLineNumber));
    }
  }
  return headers;
}","private Map<String,List<String>> parseRequestHeaders(final Scanner scanner) throws BatchException {
  Map<String,List<String>> headers=new HashMap<String,List<String>>();
  while (scanner.hasNext() && !scanner.hasNext(REG_EX_BLANK_LINE)) {
    if (scanner.hasNext(REG_EX_HEADER)) {
      scanner.next(REG_EX_HEADER);
      currentLineNumber++;
      MatchResult result=scanner.match();
      if (result.groupCount() == 2) {
        String headerName=result.group(1).trim().toLowerCase(Locale.ENGLISH);
        String headerValue=result.group(2).trim();
        if (HttpHeaders.ACCEPT.equalsIgnoreCase(headerName)) {
          List<String> acceptHeaders=parseAcceptHeaders(headerValue);
          headers.put(headerName,acceptHeaders);
        }
 else         if (HttpHeaders.ACCEPT_LANGUAGE.equalsIgnoreCase(headerName)) {
          List<String> acceptLanguageHeaders=parseAcceptableLanguages(headerValue);
          headers.put(headerName,acceptLanguageHeaders);
        }
 else         if (!BatchConstants.HTTP_CONTENT_ID.equalsIgnoreCase(headerName)) {
          if (headers.containsKey(headerName)) {
            headers.get(headerName).add(headerValue);
          }
 else {
            List<String> headerList=new ArrayList<String>();
            headerList.add(headerValue);
            headers.put(headerName,headerList);
          }
        }
 else {
          List<String> headerList=new ArrayList<String>();
          headerList.add(headerValue);
          headers.put(BatchConstants.REQUEST_HEADER_CONTENT_ID.toLowerCase(Locale.ENGLISH),headerList);
        }
      }
    }
 else {
      currentLineNumber++;
      throw new BatchException(BatchException.INVALID_HEADER.addContent(scanner.next()).addContent(currentLineNumber));
    }
  }
  return headers;
}",0.992022792022792
17828,"private Map<String,String> parseHeaders(final Scanner scanner) throws BatchException {
  Map<String,String> headers=new HashMap<String,String>();
  while (scanner.hasNext() && !(scanner.hasNext(REG_EX_BLANK_LINE))) {
    if (scanner.hasNext(REG_EX_HEADER)) {
      scanner.next(REG_EX_HEADER);
      currentLineNumber++;
      MatchResult result=scanner.match();
      if (result.groupCount() == 2) {
        String headerName=result.group(1).trim().toLowerCase();
        String headerValue=result.group(2).trim();
        headers.put(headerName,headerValue);
      }
    }
 else {
      throw new BatchException(BatchException.INVALID_HEADER.addContent(scanner.next()));
    }
  }
  return headers;
}","private Map<String,String> parseHeaders(final Scanner scanner) throws BatchException {
  Map<String,String> headers=new HashMap<String,String>();
  while (scanner.hasNext() && !(scanner.hasNext(REG_EX_BLANK_LINE))) {
    if (scanner.hasNext(REG_EX_HEADER)) {
      scanner.next(REG_EX_HEADER);
      currentLineNumber++;
      MatchResult result=scanner.match();
      if (result.groupCount() == 2) {
        String headerName=result.group(1).trim().toLowerCase(Locale.ENGLISH);
        String headerValue=result.group(2).trim();
        headers.put(headerName,headerValue);
      }
    }
 else {
      throw new BatchException(BatchException.INVALID_HEADER.addContent(scanner.next()));
    }
  }
  return headers;
}",0.9901269393511988
17829,"private InputStream parseBody(final Scanner scanner){
  String body=null;
  InputStream requestBody;
  while (scanner.hasNext() && !scanner.hasNext(REG_EX_ANY_BOUNDARY_STRING)) {
    if (!scanner.hasNext(REG_EX_ZERO_OR_MORE_WHITESPACES)) {
      if (body == null) {
        body=scanner.next();
      }
 else {
        body=body + LF + scanner.next();
      }
    }
 else {
      scanner.next();
    }
    currentLineNumber++;
  }
  if (body != null) {
    requestBody=new ByteArrayInputStream(body.getBytes());
  }
 else {
    requestBody=new ByteArrayInputStream(""String_Node_Str"".getBytes());
  }
  return requestBody;
}","private InputStream parseBody(final Scanner scanner){
  try {
    String body=null;
    InputStream requestBody;
    while (scanner.hasNext() && !scanner.hasNext(REG_EX_ANY_BOUNDARY_STRING)) {
      if (!scanner.hasNext(REG_EX_ZERO_OR_MORE_WHITESPACES)) {
        if (body == null) {
          body=scanner.next();
        }
 else {
          body=body + LF + scanner.next();
        }
      }
 else {
        scanner.next();
      }
      currentLineNumber++;
    }
    if (body != null) {
      requestBody=new ByteArrayInputStream(body.getBytes(""String_Node_Str""));
    }
 else {
      requestBody=new ByteArrayInputStream(""String_Node_Str"".getBytes(""String_Node_Str""));
    }
    return requestBody;
  }
 catch (  UnsupportedEncodingException e) {
    throw new ODataRuntimeException(e);
  }
}",0.8
17830,"public List<BatchPart> parse(final InputStream in) throws BatchException {
  Scanner scanner=new Scanner(in).useDelimiter(LF);
  baseUri=getBaseUri();
  List<BatchPart> requestList;
  try {
    requestList=parseBatchRequest(scanner);
  }
  finally {
    scanner.close();
    try {
      in.close();
    }
 catch (    IOException e) {
      throw new ODataRuntimeException(e);
    }
  }
  return requestList;
}","public List<BatchPart> parse(final InputStream in) throws BatchException {
  Scanner scanner=new Scanner(in,""String_Node_Str"").useDelimiter(LF);
  baseUri=getBaseUri();
  List<BatchPart> requestList;
  try {
    requestList=parseBatchRequest(scanner);
  }
  finally {
    scanner.close();
    try {
      in.close();
    }
 catch (    IOException e) {
      throw new ODataRuntimeException(e);
    }
  }
  return requestList;
}",0.9784688995215312
17831,"private void appendInlineFeed(final XMLStreamWriter writer,final String navigationPropertyName,final EntityInfoAggregator eia,final Map<String,Object> data,final String self) throws EntityProviderException, XMLStreamException, EdmException, URISyntaxException {
  if (eia.getExpandedNavigationPropertyNames().contains(navigationPropertyName)) {
    if (properties.getCallbacks() != null && properties.getCallbacks().containsKey(navigationPropertyName)) {
      writer.writeStartElement(Edm.NAMESPACE_M_2007_08,FormatXml.M_INLINE);
      EdmNavigationProperty navProp=(EdmNavigationProperty)eia.getEntityType().getProperty(navigationPropertyName);
      WriteFeedCallbackContext context=new WriteFeedCallbackContext();
      context.setSourceEntitySet(eia.getEntitySet());
      context.setNavigationProperty(navProp);
      context.setEntryData(data);
      ExpandSelectTreeNode subNode=properties.getExpandSelectTree().getLinks().get(navigationPropertyName);
      context.setCurrentExpandSelectTreeNode(subNode);
      context.setSelfLink(new URI(self));
      ODataCallback callback=properties.getCallbacks().get(navigationPropertyName);
      if (callback == null) {
        throw new EntityProviderException(EntityProviderException.EXPANDNOTSUPPORTED);
      }
      WriteFeedCallbackResult result=null;
      try {
        result=((OnWriteFeedContent)callback).retrieveFeedResult(context);
      }
 catch (      ODataApplicationException e) {
        throw new EntityProviderException(EntityProviderException.COMMON,e);
      }
      List<Map<String,Object>> inlineData=result.getFeedData();
      EntityProviderWriteProperties inlineProperties=result.getInlineProperties();
      EdmEntitySet inlineEntitySet=eia.getEntitySet().getRelatedEntitySet(navProp);
      AtomFeedProducer inlineFeedProducer=new AtomFeedProducer(inlineProperties);
      EntityInfoAggregator inlineEia=EntityInfoAggregator.create(inlineEntitySet,inlineProperties.getExpandSelectTree());
      inlineFeedProducer.append(writer,inlineEia,inlineData,true);
      writer.writeEndElement();
    }
  }
}","private void appendInlineFeed(final XMLStreamWriter writer,final String navigationPropertyName,final EntityInfoAggregator eia,final Map<String,Object> data,final String self) throws EntityProviderException, XMLStreamException, EdmException, URISyntaxException {
  if (eia.getExpandedNavigationPropertyNames().contains(navigationPropertyName)) {
    if (properties.getCallbacks() != null && properties.getCallbacks().containsKey(navigationPropertyName)) {
      writer.writeStartElement(Edm.NAMESPACE_M_2007_08,FormatXml.M_INLINE);
      EdmNavigationProperty navProp=(EdmNavigationProperty)eia.getEntityType().getProperty(navigationPropertyName);
      WriteFeedCallbackContext context=new WriteFeedCallbackContext();
      context.setSourceEntitySet(eia.getEntitySet());
      context.setNavigationProperty(navProp);
      context.setEntryData(data);
      ExpandSelectTreeNode subNode=properties.getExpandSelectTree().getLinks().get(navigationPropertyName);
      context.setCurrentExpandSelectTreeNode(subNode);
      context.setSelfLink(new URI(self));
      ODataCallback callback=properties.getCallbacks().get(navigationPropertyName);
      if (callback == null) {
        throw new EntityProviderException(EntityProviderException.EXPANDNOTSUPPORTED);
      }
      WriteFeedCallbackResult result=null;
      try {
        result=((OnWriteFeedContent)callback).retrieveFeedResult(context);
      }
 catch (      ODataApplicationException e) {
        throw new EntityProviderException(EntityProviderException.COMMON,e);
      }
      List<Map<String,Object>> inlineData=result.getFeedData();
      if (inlineData == null) {
        inlineData=new ArrayList<Map<String,Object>>();
      }
      EntityProviderWriteProperties inlineProperties=result.getInlineProperties();
      EdmEntitySet inlineEntitySet=eia.getEntitySet().getRelatedEntitySet(navProp);
      AtomFeedProducer inlineFeedProducer=new AtomFeedProducer(inlineProperties);
      EntityInfoAggregator inlineEia=EntityInfoAggregator.create(inlineEntitySet,inlineProperties.getExpandSelectTree());
      inlineFeedProducer.append(writer,inlineEia,inlineData,true);
      writer.writeEndElement();
    }
  }
}",0.9774330042313116
17832,"private void appendInlineEntry(final XMLStreamWriter writer,final String navigationPropertyName,final EntityInfoAggregator eia,final Map<String,Object> data) throws EntityProviderException, XMLStreamException, EdmException {
  if (eia.getExpandedNavigationPropertyNames().contains(navigationPropertyName)) {
    if (properties.getCallbacks() != null && properties.getCallbacks().containsKey(navigationPropertyName)) {
      writer.writeStartElement(Edm.NAMESPACE_M_2007_08,FormatXml.M_INLINE);
      EdmNavigationProperty navProp=(EdmNavigationProperty)eia.getEntityType().getProperty(navigationPropertyName);
      WriteEntryCallbackContext context=new WriteEntryCallbackContext();
      context.setSourceEntitySet(eia.getEntitySet());
      context.setNavigationProperty(navProp);
      context.setEntryData(data);
      ExpandSelectTreeNode subNode=properties.getExpandSelectTree().getLinks().get(navigationPropertyName);
      context.setCurrentExpandSelectTreeNode(subNode);
      ODataCallback callback=properties.getCallbacks().get(navigationPropertyName);
      if (callback == null) {
        throw new EntityProviderException(EntityProviderException.EXPANDNOTSUPPORTED);
      }
      WriteEntryCallbackResult result=null;
      try {
        result=((OnWriteEntryContent)callback).retrieveEntryResult(context);
      }
 catch (      ODataApplicationException e) {
        throw new EntityProviderException(EntityProviderException.COMMON,e);
      }
      Map<String,Object> inlineData=result.getEntryData();
      if (inlineData != null) {
        EntityProviderWriteProperties inlineProperties=result.getInlineProperties();
        EdmEntitySet inlineEntitySet=eia.getEntitySet().getRelatedEntitySet(navProp);
        AtomEntryEntityProducer inlineProducer=new AtomEntryEntityProducer(inlineProperties);
        EntityInfoAggregator inlineEia=EntityInfoAggregator.create(inlineEntitySet,inlineProperties.getExpandSelectTree());
        inlineProducer.append(writer,inlineEia,inlineData,false,false);
      }
      writer.writeEndElement();
    }
  }
}","private void appendInlineEntry(final XMLStreamWriter writer,final String navigationPropertyName,final EntityInfoAggregator eia,final Map<String,Object> data) throws EntityProviderException, XMLStreamException, EdmException {
  if (eia.getExpandedNavigationPropertyNames().contains(navigationPropertyName)) {
    if (properties.getCallbacks() != null && properties.getCallbacks().containsKey(navigationPropertyName)) {
      writer.writeStartElement(Edm.NAMESPACE_M_2007_08,FormatXml.M_INLINE);
      EdmNavigationProperty navProp=(EdmNavigationProperty)eia.getEntityType().getProperty(navigationPropertyName);
      WriteEntryCallbackContext context=new WriteEntryCallbackContext();
      context.setSourceEntitySet(eia.getEntitySet());
      context.setNavigationProperty(navProp);
      context.setEntryData(data);
      ExpandSelectTreeNode subNode=properties.getExpandSelectTree().getLinks().get(navigationPropertyName);
      context.setCurrentExpandSelectTreeNode(subNode);
      ODataCallback callback=properties.getCallbacks().get(navigationPropertyName);
      if (callback == null) {
        throw new EntityProviderException(EntityProviderException.EXPANDNOTSUPPORTED);
      }
      WriteEntryCallbackResult result=null;
      try {
        result=((OnWriteEntryContent)callback).retrieveEntryResult(context);
      }
 catch (      ODataApplicationException e) {
        throw new EntityProviderException(EntityProviderException.COMMON,e);
      }
      Map<String,Object> inlineData=result.getEntryData();
      if (inlineData != null && !inlineData.isEmpty()) {
        EntityProviderWriteProperties inlineProperties=result.getInlineProperties();
        EdmEntitySet inlineEntitySet=eia.getEntitySet().getRelatedEntitySet(navProp);
        AtomEntryEntityProducer inlineProducer=new AtomEntryEntityProducer(inlineProperties);
        EntityInfoAggregator inlineEia=EntityInfoAggregator.create(inlineEntitySet,inlineProperties.getExpandSelectTree());
        inlineProducer.append(writer,inlineEia,inlineData,false,false);
      }
      writer.writeEndElement();
    }
  }
}",0.993977354854252
17833,"public void append(final Writer writer,final EntityInfoAggregator entityInfo,final Map<String,Object> data,final boolean isRootElement) throws EntityProviderException {
  final EdmEntityType type=entityInfo.getEntityType();
  try {
    jsonStreamWriter=new JsonStreamWriter(writer);
    if (isRootElement) {
      jsonStreamWriter.beginObject().name(FormatJson.D);
    }
    jsonStreamWriter.beginObject();
    jsonStreamWriter.name(FormatJson.METADATA).beginObject();
    final String self=AtomEntryEntityProducer.createSelfLink(entityInfo,data,null);
    location=(properties.getServiceRoot() == null ? ""String_Node_Str"" : properties.getServiceRoot().toASCIIString()) + self;
    jsonStreamWriter.namedStringValue(FormatJson.ID,location).separator().namedStringValue(FormatJson.URI,location).separator().namedStringValueRaw(FormatJson.TYPE,type.getNamespace() + Edm.DELIMITER + type.getName());
    eTag=AtomEntryEntityProducer.createETag(entityInfo,data);
    if (eTag != null) {
      jsonStreamWriter.separator().namedStringValue(FormatJson.ETAG,eTag);
    }
    if (type.hasStream()) {
      jsonStreamWriter.separator().namedStringValueRaw(FormatJson.CONTENT_TYPE,properties.getMediaResourceMimeType() == null ? type.getMapping() == null || type.getMapping().getMimeType() == null || data.get(type.getMapping().getMimeType()) == null ? HttpContentType.APPLICATION_OCTET_STREAM : data.get(type.getMapping().getMimeType()).toString() : properties.getMediaResourceMimeType()).separator().namedStringValue(FormatJson.MEDIA_SRC,self + ""String_Node_Str"").separator().namedStringValue(FormatJson.EDIT_MEDIA,location + ""String_Node_Str"");
    }
    jsonStreamWriter.endObject();
    for (    final String propertyName : type.getPropertyNames()) {
      if (entityInfo.getSelectedPropertyNames().contains(propertyName)) {
        jsonStreamWriter.separator().name(propertyName);
        JsonPropertyEntityProducer.appendPropertyValue(jsonStreamWriter,entityInfo.getPropertyInfo(propertyName),data.get(propertyName));
      }
    }
    for (    final String navigationPropertyName : type.getNavigationPropertyNames()) {
      if (entityInfo.getSelectedNavigationPropertyNames().contains(navigationPropertyName)) {
        jsonStreamWriter.separator().name(navigationPropertyName);
        if (entityInfo.getExpandedNavigationPropertyNames().contains(navigationPropertyName)) {
          if (properties.getCallbacks() != null && properties.getCallbacks().containsKey(navigationPropertyName)) {
            final EdmNavigationProperty navigationProperty=(EdmNavigationProperty)type.getProperty(navigationPropertyName);
            final boolean isFeed=navigationProperty.getMultiplicity() == EdmMultiplicity.MANY;
            final EdmEntitySet entitySet=entityInfo.getEntitySet();
            final EdmEntitySet inlineEntitySet=entitySet.getRelatedEntitySet(navigationProperty);
            WriteCallbackContext context=isFeed ? new WriteFeedCallbackContext() : new WriteEntryCallbackContext();
            context.setSourceEntitySet(entitySet);
            context.setNavigationProperty(navigationProperty);
            context.setEntryData(data);
            context.setCurrentExpandSelectTreeNode(properties.getExpandSelectTree().getLinks().get(navigationPropertyName));
            ODataCallback callback=properties.getCallbacks().get(navigationPropertyName);
            if (callback == null) {
              throw new EntityProviderException(EntityProviderException.EXPANDNOTSUPPORTED);
            }
            try {
              if (isFeed) {
                final WriteFeedCallbackResult result=((OnWriteFeedContent)callback).retrieveFeedResult((WriteFeedCallbackContext)context);
                List<Map<String,Object>> inlineData=result.getFeedData();
                if (inlineData != null) {
                  final EntityProviderWriteProperties inlineProperties=result.getInlineProperties();
                  final EntityInfoAggregator inlineEntityInfo=EntityInfoAggregator.create(inlineEntitySet,inlineProperties.getExpandSelectTree());
                  new JsonFeedEntityProducer(inlineProperties).append(writer,inlineEntityInfo,inlineData,false);
                }
              }
 else {
                final WriteEntryCallbackResult result=((OnWriteEntryContent)callback).retrieveEntryResult((WriteEntryCallbackContext)context);
                Map<String,Object> inlineData=result.getEntryData();
                if (inlineData != null) {
                  final EntityProviderWriteProperties inlineProperties=result.getInlineProperties();
                  final EntityInfoAggregator inlineEntityInfo=EntityInfoAggregator.create(inlineEntitySet,inlineProperties.getExpandSelectTree());
                  new JsonEntryEntityProducer(inlineProperties).append(writer,inlineEntityInfo,inlineData,false);
                }
              }
            }
 catch (            final ODataApplicationException e) {
              throw new EntityProviderException(EntityProviderException.EXCEPTION_OCCURRED.addContent(e.getClass().getSimpleName()),e);
            }
          }
 else {
            writeDeferredUri(navigationPropertyName);
          }
        }
 else {
          writeDeferredUri(navigationPropertyName);
        }
      }
    }
    jsonStreamWriter.endObject();
    if (isRootElement) {
      jsonStreamWriter.endObject();
    }
    writer.flush();
  }
 catch (  final IOException e) {
    throw new EntityProviderException(EntityProviderException.EXCEPTION_OCCURRED.addContent(e.getClass().getSimpleName()),e);
  }
catch (  final EdmException e) {
    throw new EntityProviderException(EntityProviderException.EXCEPTION_OCCURRED.addContent(e.getClass().getSimpleName()),e);
  }
}","public void append(final Writer writer,final EntityInfoAggregator entityInfo,final Map<String,Object> data,final boolean isRootElement) throws EntityProviderException {
  final EdmEntityType type=entityInfo.getEntityType();
  try {
    jsonStreamWriter=new JsonStreamWriter(writer);
    if (isRootElement) {
      jsonStreamWriter.beginObject().name(FormatJson.D);
    }
    jsonStreamWriter.beginObject();
    jsonStreamWriter.name(FormatJson.METADATA).beginObject();
    final String self=AtomEntryEntityProducer.createSelfLink(entityInfo,data,null);
    location=(properties.getServiceRoot() == null ? ""String_Node_Str"" : properties.getServiceRoot().toASCIIString()) + self;
    jsonStreamWriter.namedStringValue(FormatJson.ID,location).separator().namedStringValue(FormatJson.URI,location).separator().namedStringValueRaw(FormatJson.TYPE,type.getNamespace() + Edm.DELIMITER + type.getName());
    eTag=AtomEntryEntityProducer.createETag(entityInfo,data);
    if (eTag != null) {
      jsonStreamWriter.separator().namedStringValue(FormatJson.ETAG,eTag);
    }
    if (type.hasStream()) {
      jsonStreamWriter.separator().namedStringValueRaw(FormatJson.CONTENT_TYPE,properties.getMediaResourceMimeType() == null ? type.getMapping() == null || type.getMapping().getMimeType() == null || data.get(type.getMapping().getMimeType()) == null ? HttpContentType.APPLICATION_OCTET_STREAM : data.get(type.getMapping().getMimeType()).toString() : properties.getMediaResourceMimeType()).separator().namedStringValue(FormatJson.MEDIA_SRC,self + ""String_Node_Str"").separator().namedStringValue(FormatJson.EDIT_MEDIA,location + ""String_Node_Str"");
    }
    jsonStreamWriter.endObject();
    for (    final String propertyName : type.getPropertyNames()) {
      if (entityInfo.getSelectedPropertyNames().contains(propertyName)) {
        jsonStreamWriter.separator().name(propertyName);
        JsonPropertyEntityProducer.appendPropertyValue(jsonStreamWriter,entityInfo.getPropertyInfo(propertyName),data.get(propertyName));
      }
    }
    for (    final String navigationPropertyName : type.getNavigationPropertyNames()) {
      if (entityInfo.getSelectedNavigationPropertyNames().contains(navigationPropertyName)) {
        jsonStreamWriter.separator().name(navigationPropertyName);
        if (entityInfo.getExpandedNavigationPropertyNames().contains(navigationPropertyName)) {
          if (properties.getCallbacks() != null && properties.getCallbacks().containsKey(navigationPropertyName)) {
            final EdmNavigationProperty navigationProperty=(EdmNavigationProperty)type.getProperty(navigationPropertyName);
            final boolean isFeed=navigationProperty.getMultiplicity() == EdmMultiplicity.MANY;
            final EdmEntitySet entitySet=entityInfo.getEntitySet();
            final EdmEntitySet inlineEntitySet=entitySet.getRelatedEntitySet(navigationProperty);
            WriteCallbackContext context=isFeed ? new WriteFeedCallbackContext() : new WriteEntryCallbackContext();
            context.setSourceEntitySet(entitySet);
            context.setNavigationProperty(navigationProperty);
            context.setEntryData(data);
            context.setCurrentExpandSelectTreeNode(properties.getExpandSelectTree().getLinks().get(navigationPropertyName));
            ODataCallback callback=properties.getCallbacks().get(navigationPropertyName);
            if (callback == null) {
              throw new EntityProviderException(EntityProviderException.EXPANDNOTSUPPORTED);
            }
            try {
              if (isFeed) {
                final WriteFeedCallbackResult result=((OnWriteFeedContent)callback).retrieveFeedResult((WriteFeedCallbackContext)context);
                List<Map<String,Object>> inlineData=result.getFeedData();
                if (inlineData == null) {
                  inlineData=new ArrayList<Map<String,Object>>();
                }
                final EntityProviderWriteProperties inlineProperties=result.getInlineProperties();
                final EntityInfoAggregator inlineEntityInfo=EntityInfoAggregator.create(inlineEntitySet,inlineProperties.getExpandSelectTree());
                new JsonFeedEntityProducer(inlineProperties).append(writer,inlineEntityInfo,inlineData,false);
              }
 else {
                final WriteEntryCallbackResult result=((OnWriteEntryContent)callback).retrieveEntryResult((WriteEntryCallbackContext)context);
                Map<String,Object> inlineData=result.getEntryData();
                if (inlineData != null && !inlineData.isEmpty()) {
                  final EntityProviderWriteProperties inlineProperties=result.getInlineProperties();
                  final EntityInfoAggregator inlineEntityInfo=EntityInfoAggregator.create(inlineEntitySet,inlineProperties.getExpandSelectTree());
                  new JsonEntryEntityProducer(inlineProperties).append(writer,inlineEntityInfo,inlineData,false);
                }
 else {
                  jsonStreamWriter.unquotedValue(""String_Node_Str"");
                }
              }
            }
 catch (            final ODataApplicationException e) {
              throw new EntityProviderException(EntityProviderException.EXCEPTION_OCCURRED.addContent(e.getClass().getSimpleName()),e);
            }
          }
 else {
            writeDeferredUri(navigationPropertyName);
          }
        }
 else {
          writeDeferredUri(navigationPropertyName);
        }
      }
    }
    jsonStreamWriter.endObject();
    if (isRootElement) {
      jsonStreamWriter.endObject();
    }
    writer.flush();
  }
 catch (  final IOException e) {
    throw new EntityProviderException(EntityProviderException.EXCEPTION_OCCURRED.addContent(e.getClass().getSimpleName()),e);
  }
catch (  final EdmException e) {
    throw new EntityProviderException(EntityProviderException.EXCEPTION_OCCURRED.addContent(e.getClass().getSimpleName()),e);
  }
}",0.8908620689655172
17834,"@Override public WriteFeedCallbackResult retrieveFeedResult(final WriteFeedCallbackContext context) throws ODataApplicationException {
  Map<String,Object> roomData=new HashMap<String,Object>();
  roomData.put(""String_Node_Str"",""String_Node_Str"");
  roomData.put(""String_Node_Str"",1);
  List<Map<String,Object>> roomsData=new ArrayList<Map<String,Object>>();
  roomsData.add(roomData);
  WriteFeedCallbackResult result=new WriteFeedCallbackResult();
  result.setFeedData(roomsData);
  result.setInlineProperties(DEFAULT_PROPERTIES);
  return result;
}","@Override public WriteFeedCallbackResult retrieveFeedResult(final WriteFeedCallbackContext context) throws ODataApplicationException {
  WriteFeedCallbackResult result=new WriteFeedCallbackResult();
  result.setFeedData(new ArrayList<Map<String,Object>>());
  result.setInlineProperties(DEFAULT_PROPERTIES);
  return result;
}",0.5222348916761688
17835,"@SuppressWarnings(""String_Node_Str"") public final Object parse2JPAEntityValueMap(final Object jpaEntity,final EdmStructuralType edmEntityType,final Map<String,Object> propertyValueMap,final String entityName) throws ODataJPARuntimeException {
  if (jpaEntity == null || edmEntityType == null || propertyValueMap == null || propertyValueMap.size() == 0) {
    return null;
  }
  String jpaEntityAccessKey=jpaEntity.getClass().getName();
  if (!jpaEntityAccessMap.containsKey(jpaEntityAccessKey)) {
    jpaEntityAccessMap.put(jpaEntityAccessKey,getSetters(jpaEntity,edmEntityType,true));
  }
  HashMap<String,Method> setters=jpaEntityAccessMap.get(jpaEntityAccessKey);
  HashMap<String,String> embeddableKeys=jpaEmbeddableKeyMap.get(jpaEntityAccessKey);
  String propertyName=null;
  try {
    for (    String key : setters.keySet()) {
      EdmProperty property=(EdmProperty)edmEntityType.getProperty(key);
      if (property.getMapping() != null && property.getMapping().getInternalName() != null) {
        propertyName=property.getMapping().getInternalName();
      }
 else {
        propertyName=property.getName();
      }
      Method method=setters.get(key);
      Object propertyValue=propertyValueMap.get(key);
      if (propertyValue == null) {
        continue;
      }
      if (propertyValue instanceof java.util.GregorianCalendar) {
        propertyValue=((java.util.GregorianCalendar)propertyValue).getTime();
      }
      if (method != null) {
        if (property.getType().getKind().equals(EdmTypeKind.COMPLEX)) {
          Object complexObject=jpaComplexObjectMap.get(propertyName);
          parse2JPAEntityValueMap(complexObject,((EdmComplexType)property.getType()),(Map<String,Object>)propertyValue,propertyName);
          setters.get(key).invoke(jpaEntity,complexObject);
        }
 else {
          setters.get(key).invoke(jpaEntity,propertyValue);
        }
      }
    }
    if (embeddableKeys != null) {
      Object embeddableKeyObj=null;
      Method method=null;
      for (      String embeddableKey : embeddableKeys.keySet()) {
        String name=embeddableKeys.get(embeddableKey);
        String[] nameParts=name.split(""String_Node_Str"");
        Object propertyValue=jpaEntity;
        Class<?> propertyClass=null;
        try {
          for (          EntityType<?> entity : metamodel.getEntities()) {
            if (entity.getName().equals(entityName)) {
              Attribute<?,?> attribute=entity.getAttribute(nameParts[0].substring(3,4).toLowerCase() + nameParts[0].substring(4));
              propertyClass=attribute.getJavaType();
              if (embeddableKeyObj == null) {
                try {
                  embeddableKeyObj=propertyClass.newInstance();
                }
 catch (                InstantiationException e) {
                  throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
                }
              }
              break;
            }
          }
          method=propertyValue.getClass().getMethod(nameParts[0],propertyClass);
          populateEmbeddableKey(embeddableKeyObj,embeddableKey,nameParts[1],propertyValueMap);
        }
 catch (        NoSuchMethodException e) {
          throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
        }
      }
      propertyName=""String_Node_Str"";
      method.invoke(jpaEntity,embeddableKeyObj);
    }
  }
 catch (  SecurityException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
catch (  EdmException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
catch (  IllegalAccessException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
catch (  IllegalArgumentException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.ERROR_JPQL_PARAM_VALUE.addContent(propertyName),e);
  }
catch (  InvocationTargetException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
  return jpaEntity;
}","@SuppressWarnings(""String_Node_Str"") public final Object parse2JPAEntityValueMap(final Object jpaEntity,final EdmStructuralType edmEntityType,final Map<String,Object> propertyValueMap,final String entityName) throws ODataJPARuntimeException {
  if (jpaEntity == null || edmEntityType == null || propertyValueMap == null || propertyValueMap.size() == 0) {
    return null;
  }
  String jpaEntityAccessKey=jpaEntity.getClass().getName();
  if (!jpaEntityAccessMap.containsKey(jpaEntityAccessKey)) {
    jpaEntityAccessMap.put(jpaEntityAccessKey,getSetters(jpaEntity,edmEntityType,true));
  }
  HashMap<String,Method> setters=jpaEntityAccessMap.get(jpaEntityAccessKey);
  HashMap<String,String> embeddableKeys=jpaEmbeddableKeyMap.get(jpaEntityAccessKey);
  String propertyName=null;
  try {
    for (    String key : setters.keySet()) {
      EdmProperty property=(EdmProperty)edmEntityType.getProperty(key);
      if (property.getMapping() != null && property.getMapping().getInternalName() != null) {
        propertyName=property.getMapping().getInternalName();
      }
 else {
        propertyName=property.getName();
      }
      Method method=setters.get(key);
      Object propertyValue=propertyValueMap.get(key);
      if (propertyValue == null) {
        continue;
      }
      if (method != null) {
        if (property.getType().getKind().equals(EdmTypeKind.COMPLEX)) {
          Object complexObject=jpaComplexObjectMap.get(propertyName);
          parse2JPAEntityValueMap(complexObject,((EdmComplexType)property.getType()),(Map<String,Object>)propertyValue,propertyName);
          setters.get(key).invoke(jpaEntity,complexObject);
        }
 else {
          setters.get(key).invoke(jpaEntity,propertyValue);
        }
      }
    }
    if (embeddableKeys != null) {
      Object embeddableKeyObj=null;
      Method method=null;
      for (      String embeddableKey : embeddableKeys.keySet()) {
        String name=embeddableKeys.get(embeddableKey);
        String[] nameParts=name.split(""String_Node_Str"");
        Object propertyValue=jpaEntity;
        Class<?> propertyClass=null;
        try {
          for (          EntityType<?> entity : metamodel.getEntities()) {
            if (entity.getName().equals(entityName)) {
              Attribute<?,?> attribute=entity.getAttribute(nameParts[0].substring(3,4).toLowerCase() + nameParts[0].substring(4));
              propertyClass=attribute.getJavaType();
              if (embeddableKeyObj == null) {
                try {
                  embeddableKeyObj=propertyClass.newInstance();
                }
 catch (                InstantiationException e) {
                  throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
                }
              }
              break;
            }
          }
          method=propertyValue.getClass().getMethod(nameParts[0],propertyClass);
          populateEmbeddableKey(embeddableKeyObj,embeddableKey,nameParts[1],propertyValueMap);
        }
 catch (        NoSuchMethodException e) {
          throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
        }
      }
      propertyName=""String_Node_Str"";
      method.invoke(jpaEntity,embeddableKeyObj);
    }
  }
 catch (  SecurityException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
catch (  EdmException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
catch (  IllegalAccessException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
catch (  IllegalArgumentException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.ERROR_JPQL_PARAM_VALUE.addContent(propertyName),e);
  }
catch (  InvocationTargetException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
  return jpaEntity;
}",0.9818094782192436
17836,"@SuppressWarnings(""String_Node_Str"") public final Object parse2JPAEntityValueMap(final Object jpaEntity,final EdmStructuralType edmEntityType,final Map<String,Object> propertyValueMap) throws ODataJPARuntimeException {
  if (jpaEntity == null || edmEntityType == null || propertyValueMap == null) {
    return null;
  }
  String jpaEntityAccessKey=jpaEntity.getClass().getName();
  if (!jpaEntityAccessMap.containsKey(jpaEntityAccessKey)) {
    jpaEntityAccessMap.put(jpaEntityAccessKey,getSetters(jpaEntity,edmEntityType,false));
  }
  HashMap<String,Method> setters=jpaEntityAccessMap.get(jpaEntityAccessKey);
  List<EdmProperty> keyProperties=null;
  if (edmEntityType instanceof EdmEntityType) {
    try {
      keyProperties=((EdmEntityType)edmEntityType).getKeyProperties();
    }
 catch (    EdmException e) {
      throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
    }
  }
  boolean isKeyProperty=false;
  String propertyName=null;
  try {
    for (    String key : setters.keySet()) {
      isKeyProperty=false;
      if (keyProperties != null) {
        for (        EdmProperty keyProperty : keyProperties) {
          if (keyProperty.getName().equalsIgnoreCase(key)) {
            isKeyProperty=true;
            break;
          }
        }
        if (isKeyProperty) {
          continue;
        }
      }
      EdmProperty property=(EdmProperty)edmEntityType.getProperty(key);
      if (property.getMapping() != null && property.getMapping().getInternalName() != null) {
        propertyName=property.getMapping().getInternalName();
      }
 else {
        propertyName=property.getName();
      }
      Method method=setters.get(key);
      Object propertyValue=propertyValueMap.get(key);
      if (propertyValue == null) {
        continue;
      }
      if (propertyValue != null) {
        if (propertyValue instanceof java.util.GregorianCalendar) {
          propertyValue=((java.util.GregorianCalendar)propertyValue).getTime();
        }
        if (method != null) {
          if (property.getType().getKind().equals(EdmTypeKind.COMPLEX)) {
            Object complexObject=jpaComplexObjectMap.get(propertyName);
            parse2JPAEntityValueMap(complexObject,((EdmComplexType)property.getType()),(Map<String,Object>)propertyValue);
            setters.get(key).invoke(jpaEntity,complexObject);
          }
 else {
            setters.get(key).invoke(jpaEntity,propertyValue);
          }
        }
      }
    }
  }
 catch (  SecurityException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
catch (  EdmException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
catch (  IllegalAccessException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
catch (  IllegalArgumentException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.ERROR_JPQL_PARAM_VALUE.addContent(propertyName),e);
  }
catch (  InvocationTargetException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
  return jpaEntity;
}","@SuppressWarnings(""String_Node_Str"") public final Object parse2JPAEntityValueMap(final Object jpaEntity,final EdmStructuralType edmEntityType,final Map<String,Object> propertyValueMap) throws ODataJPARuntimeException {
  if (jpaEntity == null || edmEntityType == null || propertyValueMap == null) {
    return null;
  }
  String jpaEntityAccessKey=jpaEntity.getClass().getName();
  if (!jpaEntityAccessMap.containsKey(jpaEntityAccessKey)) {
    jpaEntityAccessMap.put(jpaEntityAccessKey,getSetters(jpaEntity,edmEntityType,false));
  }
  HashMap<String,Method> setters=jpaEntityAccessMap.get(jpaEntityAccessKey);
  List<EdmProperty> keyProperties=null;
  if (edmEntityType instanceof EdmEntityType) {
    try {
      keyProperties=((EdmEntityType)edmEntityType).getKeyProperties();
    }
 catch (    EdmException e) {
      throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
    }
  }
  boolean isKeyProperty=false;
  String propertyName=null;
  try {
    for (    String key : setters.keySet()) {
      isKeyProperty=false;
      if (keyProperties != null) {
        for (        EdmProperty keyProperty : keyProperties) {
          if (keyProperty.getName().equalsIgnoreCase(key)) {
            isKeyProperty=true;
            break;
          }
        }
        if (isKeyProperty) {
          continue;
        }
      }
      EdmProperty property=(EdmProperty)edmEntityType.getProperty(key);
      if (property.getMapping() != null && property.getMapping().getInternalName() != null) {
        propertyName=property.getMapping().getInternalName();
      }
 else {
        propertyName=property.getName();
      }
      Method method=setters.get(key);
      Object propertyValue=propertyValueMap.get(key);
      if (propertyValue == null) {
        continue;
      }
      if (propertyValue != null) {
        if (method != null) {
          if (property.getType().getKind().equals(EdmTypeKind.COMPLEX)) {
            Object complexObject=jpaComplexObjectMap.get(propertyName);
            parse2JPAEntityValueMap(complexObject,((EdmComplexType)property.getType()),(Map<String,Object>)propertyValue);
            setters.get(key).invoke(jpaEntity,complexObject);
          }
 else {
            setters.get(key).invoke(jpaEntity,propertyValue);
          }
        }
      }
    }
  }
 catch (  SecurityException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
catch (  EdmException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
catch (  IllegalAccessException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
catch (  IllegalArgumentException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.ERROR_JPQL_PARAM_VALUE.addContent(propertyName),e);
  }
catch (  InvocationTargetException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
  return jpaEntity;
}",0.9755114693118412
17837,"@Override public void build() throws ODataJPAModelException, ODataJPARuntimeException {
  JPAEdmBuilder keyViewBuilder=null;
  properties=new ArrayList<Property>();
  List<Attribute<?,?>> jpaAttributes=null;
  String currentEntityName=null;
  String targetEntityName=null;
  String entityTypeName=null;
  if (isBuildModeComplexType) {
    jpaAttributes=sortInAscendingOrder(complexTypeView.getJPAEmbeddableType().getAttributes());
    entityTypeName=complexTypeView.getJPAEmbeddableType().getJavaType().getSimpleName();
  }
 else {
    jpaAttributes=sortInAscendingOrder(entityTypeView.getJPAEntityType().getAttributes());
    entityTypeName=entityTypeView.getJPAEntityType().getName();
  }
  for (  Object jpaAttribute : jpaAttributes) {
    currentAttribute=(Attribute<?,?>)jpaAttribute;
    if (isExcluded((JPAEdmPropertyView)JPAEdmProperty.this,entityTypeName,currentAttribute.getName())) {
      continue;
    }
    PersistentAttributeType attributeType=currentAttribute.getPersistentAttributeType();
switch (attributeType) {
case BASIC:
      currentSimpleProperty=new SimpleProperty();
    JPAEdmNameBuilder.build((JPAEdmPropertyView)JPAEdmProperty.this,isBuildModeComplexType);
  EdmSimpleTypeKind simpleTypeKind=JPATypeConvertor.convertToEdmSimpleType(currentAttribute.getJavaType(),currentAttribute);
currentSimpleProperty.setType(simpleTypeKind);
currentSimpleProperty.setFacets(setFacets(currentAttribute));
properties.add(currentSimpleProperty);
if (((SingularAttribute<?,?>)currentAttribute).isId()) {
if (keyView == null) {
keyView=new JPAEdmKey(JPAEdmProperty.this);
keyViewBuilder=keyView.getBuilder();
}
keyViewBuilder.build();
}
break;
case EMBEDDED:
ComplexType complexType=complexTypeView.searchEdmComplexType(currentAttribute.getJavaType().getName());
if (complexType == null) {
JPAEdmComplexTypeView complexTypeViewLocal=new JPAEdmComplexType(schemaView,currentAttribute);
complexTypeViewLocal.getBuilder().build();
complexType=complexTypeViewLocal.getEdmComplexType();
complexTypeView.addJPAEdmCompleTypeView(complexTypeViewLocal);
}
if (isBuildModeComplexType == false && entityTypeView.getJPAEntityType().getIdType().getJavaType().equals(currentAttribute.getJavaType())) {
if (keyView == null) {
keyView=new JPAEdmKey(complexTypeView,JPAEdmProperty.this);
}
keyView.getBuilder().build();
complexTypeView.expandEdmComplexType(complexType,properties,currentAttribute.getName());
}
 else {
currentComplexProperty=new ComplexProperty();
if (isBuildModeComplexType) {
JPAEdmNameBuilder.build((JPAEdmComplexPropertyView)JPAEdmProperty.this,complexTypeView.getJPAEmbeddableType().getJavaType().getSimpleName());
}
 else {
JPAEdmNameBuilder.build((JPAEdmComplexPropertyView)JPAEdmProperty.this,JPAEdmProperty.this);
}
currentComplexProperty.setType(new FullQualifiedName(schemaView.getEdmSchema().getNamespace(),complexType.getName()));
properties.add(currentComplexProperty);
List<String> nonKeyComplexTypes=schemaView.getNonKeyComplexTypeList();
if (!nonKeyComplexTypes.contains(currentComplexProperty.getType().getName())) {
schemaView.addNonKeyComplexName(currentComplexProperty.getType().getName());
}
}
break;
case MANY_TO_MANY:
case ONE_TO_MANY:
case ONE_TO_ONE:
case MANY_TO_ONE:
JPAEdmAssociationEndView associationEndView=new JPAEdmAssociationEnd(entityTypeView,JPAEdmProperty.this);
associationEndView.getBuilder().build();
JPAEdmAssociationView associationView=schemaView.getJPAEdmAssociationView();
if (associationView.searchAssociation(associationEndView) == null) {
int count=associationView.getNumberOfAssociationsWithSimilarEndPoints(associationEndView);
JPAEdmAssociationView associationViewLocal=new JPAEdmAssociation(associationEndView,entityTypeView,JPAEdmProperty.this,count);
associationViewLocal.getBuilder().build();
associationView.addJPAEdmAssociationView(associationViewLocal,associationEndView);
}
JPAEdmReferentialConstraintView refConstraintView=new JPAEdmReferentialConstraint(associationView,entityTypeView,JPAEdmProperty.this);
refConstraintView.getBuilder().build();
if (refConstraintView.isExists()) {
associationView.addJPAEdmRefConstraintView(refConstraintView);
}
if (navigationPropertyView == null) {
navigationPropertyView=new JPAEdmNavigationProperty(schemaView);
}
currentEntityName=entityTypeView.getJPAEntityType().getName();
targetEntityName=currentAttribute.getJavaType().getSimpleName();
Integer sequenceNumber=associationCount.get(currentEntityName + targetEntityName);
if (sequenceNumber == null) {
sequenceNumber=new Integer(1);
}
 else {
sequenceNumber=new Integer(sequenceNumber.intValue() + 1);
}
associationCount.put(currentEntityName + targetEntityName,sequenceNumber);
JPAEdmNavigationPropertyView localNavigationPropertyView=new JPAEdmNavigationProperty(associationView,JPAEdmProperty.this,sequenceNumber.intValue());
localNavigationPropertyView.getBuilder().build();
navigationPropertyView.addJPAEdmNavigationPropertyView(localNavigationPropertyView);
break;
default :
break;
}
}
}","@Override public void build() throws ODataJPAModelException, ODataJPARuntimeException {
  JPAEdmBuilder keyViewBuilder=null;
  properties=new ArrayList<Property>();
  List<Attribute<?,?>> jpaAttributes=null;
  String currentEntityName=null;
  String targetEntityName=null;
  String entityTypeName=null;
  if (isBuildModeComplexType) {
    jpaAttributes=sortInAscendingOrder(complexTypeView.getJPAEmbeddableType().getAttributes());
    entityTypeName=complexTypeView.getJPAEmbeddableType().getJavaType().getSimpleName();
  }
 else {
    jpaAttributes=sortInAscendingOrder(entityTypeView.getJPAEntityType().getAttributes());
    entityTypeName=entityTypeView.getJPAEntityType().getName();
  }
  for (  Object jpaAttribute : jpaAttributes) {
    currentAttribute=(Attribute<?,?>)jpaAttribute;
    if (isExcluded((JPAEdmPropertyView)JPAEdmProperty.this,entityTypeName,currentAttribute.getName())) {
      continue;
    }
    PersistentAttributeType attributeType=currentAttribute.getPersistentAttributeType();
switch (attributeType) {
case BASIC:
      currentSimpleProperty=new SimpleProperty();
    JPAEdmNameBuilder.build((JPAEdmPropertyView)JPAEdmProperty.this,isBuildModeComplexType);
  EdmSimpleTypeKind simpleTypeKind=JPATypeConvertor.convertToEdmSimpleType(currentAttribute.getJavaType(),currentAttribute);
currentSimpleProperty.setType(simpleTypeKind);
JPAEdmFacets.setFacets(currentAttribute,currentSimpleProperty);
properties.add(currentSimpleProperty);
if (((SingularAttribute<?,?>)currentAttribute).isId()) {
if (keyView == null) {
keyView=new JPAEdmKey(JPAEdmProperty.this);
keyViewBuilder=keyView.getBuilder();
}
keyViewBuilder.build();
}
break;
case EMBEDDED:
ComplexType complexType=complexTypeView.searchEdmComplexType(currentAttribute.getJavaType().getName());
if (complexType == null) {
JPAEdmComplexTypeView complexTypeViewLocal=new JPAEdmComplexType(schemaView,currentAttribute);
complexTypeViewLocal.getBuilder().build();
complexType=complexTypeViewLocal.getEdmComplexType();
complexTypeView.addJPAEdmCompleTypeView(complexTypeViewLocal);
}
if (isBuildModeComplexType == false && entityTypeView.getJPAEntityType().getIdType().getJavaType().equals(currentAttribute.getJavaType())) {
if (keyView == null) {
keyView=new JPAEdmKey(complexTypeView,JPAEdmProperty.this);
}
keyView.getBuilder().build();
complexTypeView.expandEdmComplexType(complexType,properties,currentAttribute.getName());
}
 else {
currentComplexProperty=new ComplexProperty();
if (isBuildModeComplexType) {
JPAEdmNameBuilder.build((JPAEdmComplexPropertyView)JPAEdmProperty.this,complexTypeView.getJPAEmbeddableType().getJavaType().getSimpleName());
}
 else {
JPAEdmNameBuilder.build((JPAEdmComplexPropertyView)JPAEdmProperty.this,JPAEdmProperty.this);
}
currentComplexProperty.setType(new FullQualifiedName(schemaView.getEdmSchema().getNamespace(),complexType.getName()));
properties.add(currentComplexProperty);
List<String> nonKeyComplexTypes=schemaView.getNonKeyComplexTypeList();
if (!nonKeyComplexTypes.contains(currentComplexProperty.getType().getName())) {
schemaView.addNonKeyComplexName(currentComplexProperty.getType().getName());
}
}
break;
case MANY_TO_MANY:
case ONE_TO_MANY:
case ONE_TO_ONE:
case MANY_TO_ONE:
JPAEdmAssociationEndView associationEndView=new JPAEdmAssociationEnd(entityTypeView,JPAEdmProperty.this);
associationEndView.getBuilder().build();
JPAEdmAssociationView associationView=schemaView.getJPAEdmAssociationView();
if (associationView.searchAssociation(associationEndView) == null) {
int count=associationView.getNumberOfAssociationsWithSimilarEndPoints(associationEndView);
JPAEdmAssociationView associationViewLocal=new JPAEdmAssociation(associationEndView,entityTypeView,JPAEdmProperty.this,count);
associationViewLocal.getBuilder().build();
associationView.addJPAEdmAssociationView(associationViewLocal,associationEndView);
}
JPAEdmReferentialConstraintView refConstraintView=new JPAEdmReferentialConstraint(associationView,entityTypeView,JPAEdmProperty.this);
refConstraintView.getBuilder().build();
if (refConstraintView.isExists()) {
associationView.addJPAEdmRefConstraintView(refConstraintView);
}
if (navigationPropertyView == null) {
navigationPropertyView=new JPAEdmNavigationProperty(schemaView);
}
currentEntityName=entityTypeView.getJPAEntityType().getName();
targetEntityName=currentAttribute.getJavaType().getSimpleName();
Integer sequenceNumber=associationCount.get(currentEntityName + targetEntityName);
if (sequenceNumber == null) {
sequenceNumber=new Integer(1);
}
 else {
sequenceNumber=new Integer(sequenceNumber.intValue() + 1);
}
associationCount.put(currentEntityName + targetEntityName,sequenceNumber);
JPAEdmNavigationPropertyView localNavigationPropertyView=new JPAEdmNavigationProperty(associationView,JPAEdmProperty.this,sequenceNumber.intValue());
localNavigationPropertyView.getBuilder().build();
navigationPropertyView.addJPAEdmNavigationPropertyView(localNavigationPropertyView);
break;
default :
break;
}
}
}",0.9921355111917726
17838,"public TestUtilRuntimeException(final String msg){
  super(msg);
}","public TestUtilRuntimeException(final String msg,final Throwable e){
  super(msg,e);
}",0.868421052631579
17839,"public InputStream getContentAsStream(){
  try {
    return new ByteArrayInputStream(content.getBytes(charset));
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","public InputStream getContentAsStream(){
  try {
    return new ByteArrayInputStream(content.getBytes(charset));
  }
 catch (  UnsupportedEncodingException e) {
    throw new TestUtilRuntimeException(""String_Node_Str"",e);
  }
}",0.9820627802690582
17840,"/** 
 * Write responses of single change requests in Change Set Response   {@link ODataResponse}
 * @param changeSetResponses a list of {@link ODataResponses}
 * @return Change Set Response as {@link ODataResponse}
 */
public static ODataResponse writeChangeSetResponse(final List<ODataResponse> changeSetResponses){
  return createEntityProvider().writeChangeSetResponse(changeSetResponses);
}","/** 
 * Write responses of single change requests in Change Set Response   {@link ODataResponse}
 * @param changeSetResponses a list of {@link ODataResponses}
 * @return Change Set Response as {@link ODataResponse}
 * @throws EntityProviderException 
 */
public static ODataResponse writeChangeSetResponse(final List<ODataResponse> changeSetResponses) throws EntityProviderException {
  return createEntityProvider().writeChangeSetResponse(changeSetResponses);
}",0.9205607476635514
17841,"/** 
 * Write responses of change sets and/or query operations in Batch Response as   {@link ODataResponse}. Batch Response body matches one-to-one with the corresponding Batch Request body
 * @param responses a list of {@link ODataResponses}
 * @return Batch Response as {@link ODataResponse}
 */
public static ODataResponse writeBatchResponse(final List<ODataResponse> responses){
  return createEntityProvider().writeBatchResponse(responses);
}","/** 
 * Write responses of change sets and/or query operations in Batch Response as   {@link ODataResponse}. Batch Response body matches one-to-one with the corresponding Batch Request body
 * @param responses a list of {@link ODataResponses}
 * @return Batch Response as {@link ODataResponse}
 * @throws EntityProviderException 
 */
public static ODataResponse writeBatchResponse(final List<ODataResponse> responses) throws EntityProviderException {
  return createEntityProvider().writeBatchResponse(responses);
}",0.9293139293139292
17842,"private void writeResponseBody(final List<ODataResponse> responses,final String boundary,final StringBuilder writer){
  for (  ODataResponse response : responses) {
    writer.append(""String_Node_Str"").append(boundary).append(LF);
    writeResponseBodyPart(response,writer);
  }
  writer.append(""String_Node_Str"").append(boundary).append(""String_Node_Str"");
}","private void writeResponseBody(final List<ODataResponse> responses,final String boundary,final StringBuilder writer) throws EntityProviderException {
  for (  ODataResponse response : responses) {
    writer.append(""String_Node_Str"").append(boundary).append(LF);
    writeResponseBodyPart(response,writer);
  }
  writer.append(""String_Node_Str"").append(boundary).append(""String_Node_Str"");
}",0.9573333333333334
17843,"public ODataResponse writeChangeSet(final List<ODataResponse> responses){
  String boundary=generateBoundary(""String_Node_Str"");
  StringBuilder writer=new StringBuilder();
  writeResponseBody(responses,boundary,writer);
  return ODataResponse.entity(writer.toString()).header(BatchConstants.HTTP_CONTENT_TYPE,BatchConstants.MULTIPART_MIXED + ""String_Node_Str"" + boundary+ ""String_Node_Str"").build();
}","public ODataResponse writeChangeSet(final List<ODataResponse> responses) throws EntityProviderException {
  String boundary=generateBoundary(""String_Node_Str"");
  StringBuilder writer=new StringBuilder();
  writeResponseBody(responses,boundary,writer);
  return ODataResponse.entity(writer.toString()).header(BatchConstants.HTTP_CONTENT_TYPE,BatchConstants.MULTIPART_MIXED + ""String_Node_Str"" + boundary+ ""String_Node_Str"").build();
}",0.9617224880382776
17844,"private void writeResponseBodyPart(final ODataResponse response,final StringBuilder writer){
  if (response.getContentHeader() != null && response.getContentHeader().matches(BatchConstants.MULTIPART_MIXED + ""String_Node_Str"")) {
    writeHeader(response,writer);
    writer.append(LF);
    writer.append(response.getEntity().toString()).append(LF);
  }
 else {
    writer.append(BatchConstants.HTTP_CONTENT_TYPE).append(COLON).append(SP).append(BatchConstants.HTTP_APPLICATION_HTTP).append(LF);
    writer.append(BatchConstants.HTTP_CONTENT_TRANSFER_ENCODING).append(COLON).append(SP).append(""String_Node_Str"").append(LF).append(LF);
    writer.append(response.getStatus().getStatusCode()).append(SP).append(response.getStatus().getInfo()).append(LF);
    writeHeader(response,writer);
    if (!HttpStatusCodes.NO_CONTENT.equals(response.getStatus())) {
      writer.append(BatchConstants.HTTP_CONTENT_LENGTH).append(COLON).append(SP).append(response.getEntity().toString().length()).append(LF).append(LF);
      writer.append(response.getEntity().toString()).append(LF);
    }
 else {
      writer.append(LF);
    }
  }
  writer.append(LF);
}","private void writeResponseBodyPart(final ODataResponse response,final StringBuilder writer) throws EntityProviderException {
  if (response.getContentHeader() != null && response.getContentHeader().matches(BatchConstants.MULTIPART_MIXED + ""String_Node_Str"")) {
    writeHeader(response,writer);
    writer.append(LF);
    writer.append(response.getEntity().toString()).append(LF);
  }
 else {
    writer.append(BatchConstants.HTTP_CONTENT_TYPE).append(COLON).append(SP).append(BatchConstants.HTTP_APPLICATION_HTTP).append(LF);
    writer.append(BatchConstants.HTTP_CONTENT_TRANSFER_ENCODING).append(COLON).append(SP).append(""String_Node_Str"").append(LF).append(LF);
    writer.append(response.getStatus().getStatusCode()).append(SP).append(response.getStatus().getInfo()).append(LF);
    writeHeader(response,writer);
    if (!HttpStatusCodes.NO_CONTENT.equals(response.getStatus())) {
      String body;
      if (response.getEntity() instanceof InputStream) {
        InputStream in=(InputStream)response.getEntity();
        body=readBody(in);
      }
 else {
        body=response.getEntity().toString();
      }
      writer.append(BatchConstants.HTTP_CONTENT_LENGTH).append(COLON).append(SP).append(body.length()).append(LF).append(LF);
      writer.append(body);
    }
    writer.append(LF);
  }
  writer.append(LF);
}",0.8403565640194489
17845,"public ODataResponse write(final List<ODataResponse> responses){
  String boundary=generateBoundary(""String_Node_Str"");
  StringBuilder writer=new StringBuilder();
  writeResponseBody(responses,boundary,writer);
  String batchResponseBody=writer.toString();
  return ODataResponse.entity(batchResponseBody).status(HttpStatusCodes.ACCEPTED).header(BatchConstants.HTTP_CONTENT_TYPE,BatchConstants.MULTIPART_MIXED + ""String_Node_Str"" + boundary+ ""String_Node_Str"").header(BatchConstants.HTTP_CONTENT_LENGTH,""String_Node_Str"" + batchResponseBody.length()).build();
}","public ODataResponse write(final List<ODataResponse> responses) throws EntityProviderException {
  String boundary=generateBoundary(""String_Node_Str"");
  StringBuilder writer=new StringBuilder();
  writeResponseBody(responses,boundary,writer);
  String batchResponseBody=writer.toString();
  return ODataResponse.entity(batchResponseBody).status(HttpStatusCodes.ACCEPTED).header(BatchConstants.HTTP_CONTENT_TYPE,BatchConstants.MULTIPART_MIXED + ""String_Node_Str"" + boundary+ ""String_Node_Str"").header(BatchConstants.HTTP_CONTENT_LENGTH,""String_Node_Str"" + batchResponseBody.length()).build();
}",0.972318339100346
17846,"@Override public ODataResponse writeChangeSetResponse(final List<ODataResponse> responses){
  BatchResponseWriter batchWriter=new BatchResponseWriter();
  return batchWriter.writeChangeSet(responses);
}","@Override public ODataResponse writeChangeSetResponse(final List<ODataResponse> responses) throws EntityProviderException {
  BatchResponseWriter batchWriter=new BatchResponseWriter();
  return batchWriter.writeChangeSet(responses);
}",0.926605504587156
17847,"@Override public ODataResponse writeBatchResponse(final List<ODataResponse> responses){
  BatchResponseWriter batchWriter=new BatchResponseWriter();
  return batchWriter.write(responses);
}","@Override public ODataResponse writeBatchResponse(final List<ODataResponse> responses) throws EntityProviderException {
  BatchResponseWriter batchWriter=new BatchResponseWriter();
  return batchWriter.write(responses);
}",0.9219512195121952
17848,"@Override public ODataResponse readEntitySimpleProperty(final GetSimplePropertyUriInfo uriInfo,final String contentType) throws ODataException {
  ODataResponse oDataResponse=ODataResponse.entity(""String_Node_Str"").status(HttpStatusCodes.OK).contentHeader(""String_Node_Str"").build();
  return oDataResponse;
}","@Override public ODataResponse readEntitySimpleProperty(final GetSimplePropertyUriInfo uriInfo,final String contentType) throws ODataException {
  CircleStreamBuffer buffer=new CircleStreamBuffer();
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(buffer.getOutputStream()));
  JsonStreamWriter jsonStreamWriter=new JsonStreamWriter(writer);
  try {
    jsonStreamWriter.beginObject();
    jsonStreamWriter.name(FormatJson.D);
    jsonStreamWriter.beginObject();
    jsonStreamWriter.namedStringValue(""String_Node_Str"",""String_Node_Str"");
    jsonStreamWriter.endObject();
    jsonStreamWriter.endObject();
    writer.flush();
    buffer.closeWrite();
  }
 catch (  IOException e) {
    buffer.close();
    throw new RuntimeException(e);
  }
  ODataResponse oDataResponse=ODataResponse.entity(buffer.getInputStream()).status(HttpStatusCodes.OK).contentHeader(""String_Node_Str"").build();
  return oDataResponse;
}",0.3214862681744749
17849,"public InputStream getContentAsStream(){
  try {
    return new ByteArrayInputStream(content.getBytes(charset));
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public InputStream getContentAsStream(){
  try {
    return new ByteArrayInputStream(content.getBytes(charset));
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.9954128440366972
17850,"public InputStream getContentAsStream(){
  try {
    return new ByteArrayInputStream(content.getBytes(charset));
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public InputStream getContentAsStream(){
  try {
    return new ByteArrayInputStream(content.getBytes(charset));
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.9954128440366972
17851,"@SuppressWarnings(""String_Node_Str"") private Object readComplexProperty(final JsonReader reader,final EntityComplexPropertyInfo complexPropertyInfo,final Object typeMapping) throws EdmException, EntityProviderException, IOException {
  if (reader.peek().equals(JsonToken.NULL)) {
    reader.nextNull();
    return null;
  }
  reader.beginObject();
  Map<String,Object> data=new HashMap<String,Object>();
  Map<String,Object> mapping;
  if (typeMapping != null) {
    if (typeMapping instanceof Map) {
      mapping=(Map<String,Object>)typeMapping;
    }
 else {
      throw new EntityProviderException(EntityProviderException.INVALID_MAPPING.addContent(complexPropertyInfo.getName()));
    }
  }
 else {
    mapping=new HashMap<String,Object>();
  }
  while (reader.hasNext()) {
    String childName=reader.nextName();
    if (FormatJson.METADATA.equals(childName)) {
      reader.beginObject();
      childName=reader.nextName();
      if (!FormatJson.TYPE.equals(childName)) {
        throw new EntityProviderException(EntityProviderException.MISSING_ATTRIBUTE.addContent(FormatJson.TYPE).addContent(FormatJson.METADATA));
      }
      String actualTypeName=reader.nextString();
      String expectedTypeName=complexPropertyInfo.getType().getNamespace() + Edm.DELIMITER + complexPropertyInfo.getType().getName();
      if (!expectedTypeName.equals(actualTypeName)) {
        throw new EntityProviderException(EntityProviderException.INVALID_ENTITYTYPE.addContent(expectedTypeName).addContent(actualTypeName));
      }
      reader.endObject();
    }
 else {
      EntityPropertyInfo childPropertyInfo=complexPropertyInfo.getPropertyInfo(childName);
      if (childPropertyInfo == null) {
        throw new EntityProviderException(EntityProviderException.ILLEGAL_ARGUMENT.addContent(childName));
      }
      Object childData=readPropertyValue(reader,childPropertyInfo,mapping.get(childName));
      if (data.containsKey(childName)) {
        throw new EntityProviderException(EntityProviderException.DOUBLE_PROPERTY.addContent(childName));
      }
      data.put(childName,childData);
    }
  }
  reader.endObject();
  return data;
}","@SuppressWarnings(""String_Node_Str"") private Object readComplexProperty(final JsonReader reader,final EntityComplexPropertyInfo complexPropertyInfo,final Object typeMapping) throws EdmException, EntityProviderException, IOException {
  if (reader.peek().equals(JsonToken.NULL)) {
    reader.nextNull();
    return null;
  }
  reader.beginObject();
  Map<String,Object> data=new HashMap<String,Object>();
  Map<String,Object> mapping;
  if (typeMapping != null) {
    if (typeMapping instanceof Map) {
      mapping=(Map<String,Object>)typeMapping;
    }
 else {
      throw new EntityProviderException(EntityProviderException.INVALID_MAPPING.addContent(complexPropertyInfo.getName()));
    }
  }
 else {
    mapping=new HashMap<String,Object>();
  }
  while (reader.hasNext()) {
    String childName=reader.nextName();
    if (FormatJson.METADATA.equals(childName)) {
      reader.beginObject();
      childName=reader.nextName();
      if (!FormatJson.TYPE.equals(childName)) {
        throw new EntityProviderException(EntityProviderException.MISSING_ATTRIBUTE.addContent(FormatJson.TYPE).addContent(FormatJson.METADATA));
      }
      String actualTypeName=reader.nextString();
      String expectedTypeName=complexPropertyInfo.getType().getNamespace() + Edm.DELIMITER + complexPropertyInfo.getType().getName();
      if (!expectedTypeName.equals(actualTypeName)) {
        throw new EntityProviderException(EntityProviderException.INVALID_ENTITYTYPE.addContent(expectedTypeName).addContent(actualTypeName));
      }
      reader.endObject();
    }
 else {
      EntityPropertyInfo childPropertyInfo=complexPropertyInfo.getPropertyInfo(childName);
      if (childPropertyInfo == null) {
        throw new EntityProviderException(EntityProviderException.INVALID_PROPERTY.addContent(childName));
      }
      Object childData=readPropertyValue(reader,childPropertyInfo,mapping.get(childName));
      if (data.containsKey(childName)) {
        throw new EntityProviderException(EntityProviderException.DOUBLE_PROPERTY.addContent(childName));
      }
      data.put(childName,childData);
    }
  }
  reader.endObject();
  return data;
}",0.9948525970987364
17852,"protected Object readStartedElement(final XMLStreamReader reader,final EntityPropertyInfo propertyInfo,final EntityTypeMapping typeMappings) throws EntityProviderException, EdmException {
  Map<String,Object> name2Value=new HashMap<String,Object>();
  Object result=null;
  try {
    reader.require(XMLStreamConstants.START_ELEMENT,Edm.NAMESPACE_D_2007_08,propertyInfo.getName());
    final String nullAttribute=reader.getAttributeValue(Edm.NAMESPACE_M_2007_08,FormatXml.M_NULL);
    if (TRUE.equals(nullAttribute)) {
      reader.nextTag();
    }
 else     if (propertyInfo.isComplex()) {
      reader.nextTag();
      while (reader.hasNext() && !reader.isEndElement()) {
        String childName=reader.getLocalName();
        EntityPropertyInfo childProperty=getChildProperty(childName,propertyInfo);
        Object value=readStartedElement(reader,childProperty,typeMappings.getEntityTypeMapping(propertyInfo.getName()));
        name2Value.put(childName,value);
        reader.nextTag();
      }
    }
 else {
      Class<?> mapping=typeMappings.getMappingClass(propertyInfo.getName());
      result=convert(propertyInfo,reader.getElementText(),mapping);
    }
    reader.require(XMLStreamConstants.END_ELEMENT,Edm.NAMESPACE_D_2007_08,propertyInfo.getName());
    if (result != null) {
      return result;
    }
 else     if (!name2Value.isEmpty()) {
      return name2Value;
    }
  }
 catch (  XMLStreamException e) {
    throw new EntityProviderException(EntityProviderException.EXCEPTION_OCCURRED.addContent(e.getClass().getSimpleName()),e);
  }
  return null;
}","protected Object readStartedElement(final XMLStreamReader reader,final EntityPropertyInfo propertyInfo,final EntityTypeMapping typeMappings) throws EntityProviderException, EdmException {
  Map<String,Object> name2Value=new HashMap<String,Object>();
  Object result=null;
  try {
    reader.require(XMLStreamConstants.START_ELEMENT,Edm.NAMESPACE_D_2007_08,propertyInfo.getName());
    final String nullAttribute=reader.getAttributeValue(Edm.NAMESPACE_M_2007_08,FormatXml.M_NULL);
    if (TRUE.equals(nullAttribute)) {
      reader.nextTag();
    }
 else     if (propertyInfo.isComplex()) {
      reader.nextTag();
      while (reader.hasNext() && !reader.isEndElement()) {
        String childName=reader.getLocalName();
        EntityPropertyInfo childProperty=getChildProperty(childName,propertyInfo);
        if (childProperty == null) {
          throw new EntityProviderException(EntityProviderException.INVALID_PROPERTY.addContent(childName));
        }
        Object value=readStartedElement(reader,childProperty,typeMappings.getEntityTypeMapping(propertyInfo.getName()));
        name2Value.put(childName,value);
        reader.nextTag();
      }
    }
 else {
      Class<?> mapping=typeMappings.getMappingClass(propertyInfo.getName());
      result=convert(propertyInfo,reader.getElementText(),mapping);
    }
    reader.require(XMLStreamConstants.END_ELEMENT,Edm.NAMESPACE_D_2007_08,propertyInfo.getName());
    if (result != null) {
      return result;
    }
 else     if (!name2Value.isEmpty()) {
      return name2Value;
    }
  }
 catch (  XMLStreamException e) {
    throw new EntityProviderException(EntityProviderException.EXCEPTION_OCCURRED.addContent(e.getClass().getSimpleName()),e);
  }
  return null;
}",0.952698605215282
17853,"public ODataResponse wrapResponse(){
  try {
    return ODataResponse.status(HttpStatusCodes.OK).entity(isJson ? wrapInJson(createParts()) : null).contentHeader(isJson ? HttpContentType.APPLICATION_JSON : null).build();
  }
 catch (  final ODataException e) {
    throw new ODataRuntimeException(""String_Node_Str"");
  }
catch (  final IOException e) {
    throw new ODataRuntimeException(""String_Node_Str"");
  }
}","public ODataResponse wrapResponse(){
  try {
    return ODataResponse.status(HttpStatusCodes.OK).entity(isJson ? wrapInJson(createParts()) : null).contentHeader(isJson ? HttpContentType.APPLICATION_JSON : null).build();
  }
 catch (  final ODataException e) {
    throw new ODataRuntimeException(""String_Node_Str"",e);
  }
catch (  final IOException e) {
    throw new ODataRuntimeException(""String_Node_Str"",e);
  }
}",0.9951807228915662
17854,"private void handleName(final JsonReader reader,final Map<String,Object> typeMappings,final EntityPropertyInfo entityPropertyInfo,final Map<String,Object> result,final String nextName) throws EntityProviderException {
  Object mapping=null;
  if (typeMappings != null) {
    mapping=typeMappings.get(nextName);
  }
  Object propertyValue=readPropertyValue(reader,entityPropertyInfo,mapping);
  result.put(nextName,propertyValue);
}","private void handleName(final JsonReader reader,final Map<String,Object> typeMappings,final EntityPropertyInfo entityPropertyInfo,final Map<String,Object> result,final String nextName) throws EntityProviderException {
  if (!entityPropertyInfo.getName().equals(nextName)) {
    throw new EntityProviderException(EntityProviderException.ILLEGAL_ARGUMENT.addContent(nextName));
  }
  Object mapping=null;
  if (typeMappings != null) {
    mapping=typeMappings.get(nextName);
  }
  Object propertyValue=readPropertyValue(reader,entityPropertyInfo,mapping);
  result.put(nextName,propertyValue);
}",0.841796875
17855,"@SuppressWarnings(""String_Node_Str"") private Object readComplexProperty(final JsonReader reader,final EntityComplexPropertyInfo complexPropertyInfo,final Object typeMapping) throws EdmException, EntityProviderException, IOException {
  reader.beginObject();
  Map<String,Object> data=new HashMap<String,Object>();
  Map<String,Object> mapping;
  if (typeMapping != null) {
    if (typeMapping instanceof Map) {
      mapping=(Map<String,Object>)typeMapping;
    }
 else {
      throw new EntityProviderException(EntityProviderException.INVALID_MAPPING.addContent(complexPropertyInfo.getName()));
    }
  }
 else {
    mapping=new HashMap<String,Object>();
  }
  while (reader.hasNext()) {
    String childName=reader.nextName();
    if (FormatJson.METADATA.equals(childName)) {
      reader.beginObject();
      childName=reader.nextName();
      if (!FormatJson.TYPE.equals(childName)) {
        throw new EntityProviderException(EntityProviderException.MISSING_ATTRIBUTE.addContent(FormatJson.TYPE).addContent(FormatJson.METADATA));
      }
      reader.nextString();
      reader.endObject();
    }
 else {
      EntityPropertyInfo childPropertyInfo=complexPropertyInfo.getPropertyInfo(childName);
      Object childData=readPropertyValue(reader,childPropertyInfo,mapping.get(childName));
      if (data.containsKey(childName)) {
        throw new EntityProviderException(EntityProviderException.DOUBLE_PROPERTY.addContent(childName));
      }
      data.put(childName,childData);
    }
  }
  reader.endObject();
  return data;
}","@SuppressWarnings(""String_Node_Str"") private Object readComplexProperty(final JsonReader reader,final EntityComplexPropertyInfo complexPropertyInfo,final Object typeMapping) throws EdmException, EntityProviderException, IOException {
  if (reader.peek().equals(JsonToken.NULL)) {
    reader.nextNull();
    return null;
  }
  reader.beginObject();
  Map<String,Object> data=new HashMap<String,Object>();
  Map<String,Object> mapping;
  if (typeMapping != null) {
    if (typeMapping instanceof Map) {
      mapping=(Map<String,Object>)typeMapping;
    }
 else {
      throw new EntityProviderException(EntityProviderException.INVALID_MAPPING.addContent(complexPropertyInfo.getName()));
    }
  }
 else {
    mapping=new HashMap<String,Object>();
  }
  while (reader.hasNext()) {
    String childName=reader.nextName();
    if (FormatJson.METADATA.equals(childName)) {
      reader.beginObject();
      childName=reader.nextName();
      if (!FormatJson.TYPE.equals(childName)) {
        throw new EntityProviderException(EntityProviderException.MISSING_ATTRIBUTE.addContent(FormatJson.TYPE).addContent(FormatJson.METADATA));
      }
      String actualTypeName=reader.nextString();
      String expectedTypeName=complexPropertyInfo.getType().getNamespace() + Edm.DELIMITER + complexPropertyInfo.getType().getName();
      if (!expectedTypeName.equals(actualTypeName)) {
        throw new EntityProviderException(EntityProviderException.INVALID_ENTITYTYPE.addContent(expectedTypeName).addContent(actualTypeName));
      }
      reader.endObject();
    }
 else {
      EntityPropertyInfo childPropertyInfo=complexPropertyInfo.getPropertyInfo(childName);
      if (childPropertyInfo == null) {
        throw new EntityProviderException(EntityProviderException.ILLEGAL_ARGUMENT.addContent(childName));
      }
      Object childData=readPropertyValue(reader,childPropertyInfo,mapping.get(childName));
      if (data.containsKey(childName)) {
        throw new EntityProviderException(EntityProviderException.DOUBLE_PROPERTY.addContent(childName));
      }
      data.put(childName,childData);
    }
  }
  reader.endObject();
  return data;
}",0.8274734260016353
17856,"/** 
 * <p>Handles the   {@link ODataRequest} in a way that it results in a corresponding {@link ODataResponse}.</p> <p>This includes building of the   {@link com.sap.core.odata.api.processor.ODataContext ODataContext}, delegation of URI parsing and dispatching of the request internally.</p>
 * @param request the incoming request
 * @return the corresponding result
 * @throws ODataException
 */
public ODataResponse handle(final ODataRequest request) throws ODataException {
  ODataContextImpl context=buildODataContext(request);
  final int timingHandle=context.startRuntimeMeasurement(""String_Node_Str"",""String_Node_Str"");
  ODataResponse odataResponse;
  try {
    service=serviceFactory.createService(context);
    context.setService(service);
    service.getProcessor().setContext(context);
    final String serverDataServiceVersion=getServerDataServiceVersion();
    final String requestDataServiceVersion=context.getRequestHeader(ODataHttpHeaders.DATASERVICEVERSION);
    validateDataServiceVersion(serverDataServiceVersion,requestDataServiceVersion);
    UriParser uriParser=new UriParserImpl(service.getEntityDataModel());
    final List<PathSegment> pathSegments=context.getPathInfo().getODataSegments();
    int timingHandle2=context.startRuntimeMeasurement(""String_Node_Str"",""String_Node_Str"");
    final UriInfoImpl uriInfo=(UriInfoImpl)uriParser.parse(pathSegments,request.getQueryParameters());
    context.stopRuntimeMeasurement(timingHandle2);
    final ODataHttpMethod method=request.getMethod();
    timingHandle2=context.startRuntimeMeasurement(""String_Node_Str"",""String_Node_Str"");
    validateMethodAndUri(method,uriInfo);
    context.stopRuntimeMeasurement(timingHandle2);
    if (method == ODataHttpMethod.POST || method == ODataHttpMethod.PUT || method == ODataHttpMethod.PATCH || method == ODataHttpMethod.MERGE) {
      final ContentType requestContentType=ContentType.parse(request.getContentType());
      if (requestContentType == null) {
        throw new ODataBadRequestException(ODataBadRequestException.INVALID_HEADER.addContent(HttpHeaders.CONTENT_TYPE,request.getContentType()));
      }
 else {
        checkRequestContentType(uriInfo,requestContentType);
      }
    }
    final String acceptContentType=new ContentNegotiator().doContentNegotiation(uriInfo,request.getAcceptHeaders(),getSupportedContentTypes(uriInfo));
    Dispatcher dispatcher=new Dispatcher(service);
    timingHandle2=context.startRuntimeMeasurement(""String_Node_Str"",""String_Node_Str"");
    odataResponse=dispatcher.dispatch(method,uriInfo,request.getBody(),request.getContentType(),acceptContentType);
    context.stopRuntimeMeasurement(timingHandle2);
    final String location=(method == ODataHttpMethod.POST && (uriInfo.getUriType() == UriType.URI1 || uriInfo.getUriType() == UriType.URI6B)) ? odataResponse.getIdLiteral() : null;
    final HttpStatusCodes s=odataResponse.getStatus() == null ? method == ODataHttpMethod.POST ? uriInfo.getUriType() == UriType.URI9 ? HttpStatusCodes.OK : uriInfo.getUriType() == UriType.URI7B ? HttpStatusCodes.NO_CONTENT : HttpStatusCodes.CREATED : method == ODataHttpMethod.PUT || method == ODataHttpMethod.PATCH || method == ODataHttpMethod.MERGE || method == ODataHttpMethod.DELETE ? HttpStatusCodes.NO_CONTENT : HttpStatusCodes.OK : odataResponse.getStatus();
    ODataResponseBuilder extendedResponse=ODataResponse.fromResponse(odataResponse);
    if (!odataResponse.containsHeader(ODataHttpHeaders.DATASERVICEVERSION)) {
      extendedResponse=extendedResponse.header(ODataHttpHeaders.DATASERVICEVERSION,serverDataServiceVersion);
    }
    if (!odataResponse.containsHeader(HttpHeaders.LOCATION) && location != null) {
      extendedResponse=extendedResponse.header(HttpHeaders.LOCATION,location);
    }
    if (odataResponse.getStatus() != s) {
      extendedResponse=extendedResponse.status(s);
    }
    if (odataResponse.getETag() != null) {
      extendedResponse=extendedResponse.header(HttpHeaders.ETAG,odataResponse.getETag());
    }
    odataResponse=extendedResponse.build();
  }
 catch (  final Exception e) {
    ODataExceptionWrapper exceptionWrapper=new ODataExceptionWrapper(context,request.getQueryParameters(),request.getAcceptHeaders());
    odataResponse=exceptionWrapper.wrapInExceptionResponse(e);
  }
  context.stopRuntimeMeasurement(timingHandle);
  return odataResponse;
}","/** 
 * <p>Handles the   {@link ODataRequest} in a way that it results in a corresponding {@link ODataResponse}.</p> <p>This includes building of the   {@link com.sap.core.odata.api.processor.ODataContext ODataContext}, delegation of URI parsing and dispatching of the request internally.</p>
 * @param request the incoming request
 * @return the corresponding result
 * @throws ODataException
 */
public ODataResponse handle(final ODataRequest request) throws ODataException {
  ODataContextImpl context=buildODataContext(request);
  final int timingHandle=context.startRuntimeMeasurement(""String_Node_Str"",""String_Node_Str"");
  ODataResponse odataResponse;
  try {
    service=serviceFactory.createService(context);
    context.setService(service);
    service.getProcessor().setContext(context);
    final String serverDataServiceVersion=getServerDataServiceVersion();
    final String requestDataServiceVersion=context.getRequestHeader(ODataHttpHeaders.DATASERVICEVERSION);
    validateDataServiceVersion(serverDataServiceVersion,requestDataServiceVersion);
    UriParser uriParser=new UriParserImpl(service.getEntityDataModel());
    final List<PathSegment> pathSegments=context.getPathInfo().getODataSegments();
    int timingHandle2=context.startRuntimeMeasurement(""String_Node_Str"",""String_Node_Str"");
    final UriInfoImpl uriInfo=(UriInfoImpl)uriParser.parse(pathSegments,request.getQueryParameters());
    context.stopRuntimeMeasurement(timingHandle2);
    final ODataHttpMethod method=request.getMethod();
    timingHandle2=context.startRuntimeMeasurement(""String_Node_Str"",""String_Node_Str"");
    validateMethodAndUri(method,uriInfo);
    context.stopRuntimeMeasurement(timingHandle2);
    if (method == ODataHttpMethod.POST || method == ODataHttpMethod.PUT || method == ODataHttpMethod.PATCH || method == ODataHttpMethod.MERGE) {
      final ContentType requestContentType=ContentType.parse(request.getContentType());
      if (requestContentType == null) {
        throw new ODataBadRequestException(ODataBadRequestException.INVALID_HEADER.addContent(HttpHeaders.CONTENT_TYPE,request.getContentType()));
      }
 else {
        checkRequestContentType(uriInfo,requestContentType);
      }
    }
    final String acceptContentType=doContentNegotiation(request,uriInfo);
    Dispatcher dispatcher=new Dispatcher(service);
    timingHandle2=context.startRuntimeMeasurement(""String_Node_Str"",""String_Node_Str"");
    odataResponse=dispatcher.dispatch(method,uriInfo,request.getBody(),request.getContentType(),acceptContentType);
    context.stopRuntimeMeasurement(timingHandle2);
    final String location=(method == ODataHttpMethod.POST && (uriInfo.getUriType() == UriType.URI1 || uriInfo.getUriType() == UriType.URI6B)) ? odataResponse.getIdLiteral() : null;
    final HttpStatusCodes s=odataResponse.getStatus() == null ? method == ODataHttpMethod.POST ? uriInfo.getUriType() == UriType.URI9 ? HttpStatusCodes.OK : uriInfo.getUriType() == UriType.URI7B ? HttpStatusCodes.NO_CONTENT : HttpStatusCodes.CREATED : method == ODataHttpMethod.PUT || method == ODataHttpMethod.PATCH || method == ODataHttpMethod.MERGE || method == ODataHttpMethod.DELETE ? HttpStatusCodes.NO_CONTENT : HttpStatusCodes.OK : odataResponse.getStatus();
    ODataResponseBuilder extendedResponse=ODataResponse.fromResponse(odataResponse);
    if (!odataResponse.containsHeader(ODataHttpHeaders.DATASERVICEVERSION)) {
      extendedResponse=extendedResponse.header(ODataHttpHeaders.DATASERVICEVERSION,serverDataServiceVersion);
    }
    if (!odataResponse.containsHeader(HttpHeaders.LOCATION) && location != null) {
      extendedResponse=extendedResponse.header(HttpHeaders.LOCATION,location);
    }
    if (odataResponse.getStatus() != s) {
      extendedResponse=extendedResponse.status(s);
    }
    if (odataResponse.getETag() != null) {
      extendedResponse=extendedResponse.header(HttpHeaders.ETAG,odataResponse.getETag());
    }
    odataResponse=extendedResponse.build();
  }
 catch (  final Exception e) {
    ODataExceptionWrapper exceptionWrapper=new ODataExceptionWrapper(context,request.getQueryParameters(),request.getAcceptHeaders());
    odataResponse=exceptionWrapper.wrapInExceptionResponse(e);
  }
  context.stopRuntimeMeasurement(timingHandle);
  return odataResponse;
}",0.9878345498783456
17857,"/** 
 * Valid input are <code>;</code> separated <code>key = value</code> pairs.
 * @param parameters
 * @return Map with keys mapped to values
 */
private static Map<String,String> parseParameters(final String parameters){
  Map<String,String> parameterMap=new HashMap<String,String>();
  if (parameters != null) {
    String[] splittedParameters=parameters.split(PARAMETER_SEPARATOR);
    for (    String parameter : splittedParameters) {
      String[] keyValue=parameter.split(""String_Node_Str"");
      String key=keyValue[0].trim().toLowerCase(Locale.ENGLISH);
      if (isParameterAllowed(key)) {
        String value=keyValue.length > 1 ? keyValue[1].trim() : null;
        parameterMap.put(key,value);
      }
    }
  }
  return parameterMap;
}","/** 
 * Valid input are <code>;</code> separated <code>key=value</code> pairs  without spaces between key and value. <p> See RFC 2616: The type, subtype, and parameter attribute names are case-insensitive.  Parameter values might or might not be case-sensitive, depending on the  semantics of the parameter name. <b>Linear white space (LWS) MUST NOT be used  between the type and subtype, nor between an attribute and its value</b>.  </p>
 * @param parameters
 * @return Map with keys mapped to values
 */
private static Map<String,String> parseParameters(final String parameters){
  Map<String,String> parameterMap=new HashMap<String,String>();
  if (parameters != null) {
    String[] splittedParameters=parameters.split(PARAMETER_SEPARATOR);
    for (    String parameter : splittedParameters) {
      String[] keyValue=parameter.split(""String_Node_Str"");
      String key=keyValue[0].trim().toLowerCase(Locale.ENGLISH);
      if (isParameterAllowed(key)) {
        String value=keyValue.length > 1 ? keyValue[1] : null;
        if (value != null && isLws(value.charAt(0))) {
          throw new IllegalArgumentException(""String_Node_Str"" + key + ""String_Node_Str""+ parameters+ ""String_Node_Str"");
        }
        parameterMap.put(key,value);
      }
    }
  }
  return parameterMap;
}",0.7218413320274241
17858,"public static ContentType extractRequestContentType(final SubLocatorParameter param) throws ODataUnsupportedMediaTypeException {
  final MediaType requestMediaType=param.getHttpHeaders().getMediaType();
  if (requestMediaType == null) {
    return ContentType.APPLICATION_OCTET_STREAM;
  }
 else   if (requestMediaType == MediaType.WILDCARD_TYPE || requestMediaType == MediaType.TEXT_PLAIN_TYPE || requestMediaType == MediaType.APPLICATION_XML_TYPE) {
    throw new ODataUnsupportedMediaTypeException(ODataUnsupportedMediaTypeException.NOT_SUPPORTED.addContent(param.getHttpHeaders().getRequestHeader(HttpHeaders.CONTENT_TYPE).get(0)));
  }
 else {
    try {
      return ContentType.create(requestMediaType.toString());
    }
 catch (    IllegalArgumentException e) {
      throw new ODataUnsupportedMediaTypeException(ODataUnsupportedMediaTypeException.NOT_SUPPORTED.addContent(requestMediaType.toString()),e);
    }
  }
}","public static ContentType extractRequestContentType(final SubLocatorParameter param) throws ODataUnsupportedMediaTypeException, ODataBadRequestException {
  final MediaType requestMediaType=param.getHttpHeaders().getMediaType();
  if (requestMediaType == null) {
    return ContentType.APPLICATION_OCTET_STREAM;
  }
 else   if (requestMediaType == MediaType.WILDCARD_TYPE || requestMediaType == MediaType.TEXT_PLAIN_TYPE || requestMediaType == MediaType.APPLICATION_XML_TYPE) {
    throw new ODataUnsupportedMediaTypeException(ODataUnsupportedMediaTypeException.NOT_SUPPORTED.addContent(param.getHttpHeaders().getRequestHeader(HttpHeaders.CONTENT_TYPE).get(0)));
  }
 else {
    try {
      final String contentType=param.getHttpHeaders().getHeaderString(HttpHeaders.CONTENT_TYPE);
      if (ContentType.isParseable(contentType)) {
        return ContentType.create(contentType);
      }
      throw new ODataBadRequestException(ODataBadRequestException.INVALID_HEADER.addContent(HttpHeaders.CONTENT_TYPE,contentType));
    }
 catch (    IllegalArgumentException e) {
      throw new ODataUnsupportedMediaTypeException(ODataUnsupportedMediaTypeException.NOT_SUPPORTED.addContent(requestMediaType.toString()),e);
    }
  }
}",0.8178854215183977
17859,"public static List<String> extractAcceptHeaders(final SubLocatorParameter param) throws ODataBadRequestException {
  final List<MediaType> acceptableMediaTypes=param.getHttpHeaders().getAcceptableMediaTypes();
  final List<String> mediaTypes=new ArrayList<String>();
  for (  final MediaType mediaType : acceptableMediaTypes) {
    mediaTypes.add(mediaType.toString());
  }
  return mediaTypes;
}","public static List<String> extractAcceptHeaders(final SubLocatorParameter param) throws ODataBadRequestException {
  List<String> acceptHeaders=param.getHttpHeaders().getRequestHeader(HttpHeaders.ACCEPT);
  for (  String acceptHeader : acceptHeaders) {
    String[] contentTypes=acceptHeader.split(""String_Node_Str"");
    for (    String contentType : contentTypes) {
      if (!ContentType.isParseable(contentType.trim())) {
        throw new ODataBadRequestException(ODataBadRequestException.INVALID_HEADER.addContent(HttpHeaders.ACCEPT,acceptHeader));
      }
    }
  }
  final List<String> mediaTypes=new ArrayList<String>();
  final List<MediaType> acceptableMediaTypes=param.getHttpHeaders().getAcceptableMediaTypes();
  for (  final MediaType mediaType : acceptableMediaTypes) {
    mediaTypes.add(mediaType.toString());
  }
  return mediaTypes;
}",0.3536
17860,"public ODataExceptionWrapper(final UriInfo uriInfo,final HttpHeaders httpHeaders,final ServletConfig servletConfig){
  contentType=getContentType(uriInfo,httpHeaders).toContentTypeString();
  messageLocale=MessageService.getSupportedLocale(getLanguages(httpHeaders),DEFAULT_RESPONSE_LOCALE);
  httpRequestHeaders=httpHeaders.getRequestHeaders();
  requestUri=uriInfo.getRequestUri();
  try {
    callback=getErrorHandlerCallbackFromServletConfig(servletConfig);
  }
 catch (  Exception e) {
    throw new ODataRuntimeException(""String_Node_Str"",e);
  }
}","public ODataExceptionWrapper(final UriInfo uriInfo,final HttpHeaders httpHeaders,final ServletConfig servletConfig,final HttpServletRequest servletRequest){
  contentType=getContentType(uriInfo,httpHeaders).toContentTypeString();
  messageLocale=MessageService.getSupportedLocale(getLanguages(httpHeaders),DEFAULT_RESPONSE_LOCALE);
  httpRequestHeaders=httpHeaders.getRequestHeaders();
  requestUri=uriInfo.getRequestUri();
  try {
    callback=getErrorHandlerCallbackFromServletConfig(servletConfig,servletRequest);
  }
 catch (  Exception e) {
    throw new ODataRuntimeException(""String_Node_Str"",e);
  }
}",0.9527085124677558
17861,"private ODataErrorCallback getErrorHandlerCallbackFromServletConfig(final ServletConfig servletConfig) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  ODataErrorCallback callback=null;
  final String factoryClassName=servletConfig.getInitParameter(ODataServiceFactory.FACTORY_LABEL);
  if (factoryClassName != null) {
    Class<?> factoryClass=Class.forName(factoryClassName);
    final ODataServiceFactory serviceFactory=(ODataServiceFactory)factoryClass.newInstance();
    callback=serviceFactory.getCallback(ODataErrorCallback.class);
  }
  return callback;
}","private ODataErrorCallback getErrorHandlerCallbackFromServletConfig(final ServletConfig servletConfig,HttpServletRequest servletRequest) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  ODataErrorCallback callback=null;
  final String factoryClassName=servletConfig.getInitParameter(ODataServiceFactory.FACTORY_LABEL);
  if (factoryClassName != null) {
    ClassLoader cl=(ClassLoader)servletRequest.getAttribute(ODataServiceFactory.FACTORY_CLASSLOADER_LABEL);
    Class<?> factoryClass;
    if (cl == null) {
      factoryClass=Class.forName(factoryClassName);
    }
 else {
      factoryClass=Class.forName(factoryClassName,true,cl);
    }
    final ODataServiceFactory serviceFactory=(ODataServiceFactory)factoryClass.newInstance();
    callback=serviceFactory.getCallback(ODataErrorCallback.class);
  }
  return callback;
}",0.8186813186813187
17862,"private ODataErrorCallback getErrorHandlerCallback() throws ClassNotFoundException, InstantiationException, IllegalAccessException {
  ODataErrorCallback callback=null;
  final String factoryClassName=servletConfig.getInitParameter(ODataServiceFactory.FACTORY_LABEL);
  if (factoryClassName != null) {
    Class<?> factoryClass=Class.forName(factoryClassName);
    final ODataServiceFactory serviceFactory=(ODataServiceFactory)factoryClass.newInstance();
    callback=serviceFactory.getCallback(ODataErrorCallback.class);
  }
  return callback;
}","private ODataErrorCallback getErrorHandlerCallback() throws ClassNotFoundException, InstantiationException, IllegalAccessException {
  ODataErrorCallback callback=null;
  final String factoryClassName=servletConfig.getInitParameter(ODataServiceFactory.FACTORY_LABEL);
  if (factoryClassName != null) {
    ClassLoader cl=(ClassLoader)servletRequest.getAttribute(ODataServiceFactory.FACTORY_CLASSLOADER_LABEL);
    Class<?> factoryClass;
    if (cl == null) {
      factoryClass=Class.forName(factoryClassName);
    }
 else {
      factoryClass=Class.forName(factoryClassName,true,cl);
    }
    final ODataServiceFactory serviceFactory=(ODataServiceFactory)factoryClass.newInstance();
    callback=serviceFactory.getCallback(ODataErrorCallback.class);
  }
  return callback;
}",0.8260211800302572
17863,"private ODataResponse handleException(final Exception exception){
  ODataExceptionWrapper exceptionWrapper=new ODataExceptionWrapper(uriInfo,httpHeaders,servletConfig);
  ODataResponse oDataResponse=exceptionWrapper.wrapInExceptionResponse(exception);
  return oDataResponse;
}","private ODataResponse handleException(final Exception exception){
  ODataExceptionWrapper exceptionWrapper=new ODataExceptionWrapper(uriInfo,httpHeaders,servletConfig,servletRequest);
  ODataResponse oDataResponse=exceptionWrapper.wrapInExceptionResponse(exception);
  return oDataResponse;
}",0.9736379613356766
17864,"@Before public void before() throws URISyntaxException {
  exceptionMapper=new ODataExceptionMapperImpl();
  exceptionMapper.httpHeaders=mock(HttpHeaders.class);
  exceptionMapper.uriInfo=mock(UriInfo.class);
  exceptionMapper.servletConfig=mock(ServletConfig.class);
  MultivaluedHashMap<String,String> map=new MultivaluedHashMap<String,String>();
  when(exceptionMapper.uriInfo.getQueryParameters()).thenReturn(map);
  uri=new URI(""String_Node_Str"");
  when(exceptionMapper.uriInfo.getRequestUri()).thenReturn(uri);
  MultivaluedHashMap<String,String> httpHeaders=new MultivaluedHashMap<String,String>();
  when(exceptionMapper.httpHeaders.getRequestHeaders()).thenReturn(httpHeaders);
  disableLogging();
}","@Before public void before() throws URISyntaxException {
  exceptionMapper=new ODataExceptionMapperImpl();
  exceptionMapper.httpHeaders=mock(HttpHeaders.class);
  exceptionMapper.uriInfo=mock(UriInfo.class);
  exceptionMapper.servletConfig=mock(ServletConfig.class);
  exceptionMapper.servletRequest=mock(HttpServletRequest.class);
  MultivaluedHashMap<String,String> map=new MultivaluedHashMap<String,String>();
  when(exceptionMapper.uriInfo.getQueryParameters()).thenReturn(map);
  uri=new URI(""String_Node_Str"");
  when(exceptionMapper.uriInfo.getRequestUri()).thenReturn(uri);
  MultivaluedHashMap<String,String> httpHeaders=new MultivaluedHashMap<String,String>();
  when(exceptionMapper.httpHeaders.getRequestHeaders()).thenReturn(httpHeaders);
  disableLogging();
}",0.9561699258260284
17865,"@Test public void testExtendedODataErrorContext() throws Exception {
  MultivaluedMap<String,String> value=new MultivaluedHashMap<String,String>();
  value.putSingle(""String_Node_Str"",""String_Node_Str"");
  value.put(""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  when(exceptionMapper.httpHeaders.getRequestHeaders()).thenReturn(value);
  when(exceptionMapper.servletConfig.getInitParameter(ODataServiceFactory.FACTORY_LABEL)).thenReturn(ODataServiceFactoryImpl.class.getName());
  Response response=exceptionMapper.toResponse(new Exception());
  assertNotNull(response);
  assertEquals(HttpStatusCodes.BAD_REQUEST.getStatusCode(),response.getStatus());
  String errorMessage=(String)response.getEntity();
  assertEquals(""String_Node_Str"",errorMessage);
  String contentTypeHeader=response.getHeaderString(com.sap.core.odata.api.commons.HttpHeaders.CONTENT_TYPE);
  assertEquals(""String_Node_Str"",contentTypeHeader);
  assertEquals(uri.toASCIIString(),response.getHeaderString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getHeaderString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getHeaderString(""String_Node_Str""));
}","@Test public void testExtendedODataErrorContext() throws Exception {
  MultivaluedMap<String,String> value=new MultivaluedHashMap<String,String>();
  value.putSingle(""String_Node_Str"",""String_Node_Str"");
  value.put(""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  when(exceptionMapper.httpHeaders.getRequestHeaders()).thenReturn(value);
  when(exceptionMapper.servletConfig.getInitParameter(ODataServiceFactory.FACTORY_LABEL)).thenReturn(ODataServiceFactoryImpl.class.getName());
  when(exceptionMapper.servletRequest.getAttribute(ODataServiceFactory.FACTORY_CLASSLOADER_LABEL)).thenReturn(null);
  Response response=exceptionMapper.toResponse(new Exception());
  assertNotNull(response);
  assertEquals(HttpStatusCodes.BAD_REQUEST.getStatusCode(),response.getStatus());
  String errorMessage=(String)response.getEntity();
  assertEquals(""String_Node_Str"",errorMessage);
  String contentTypeHeader=response.getHeaderString(com.sap.core.odata.api.commons.HttpHeaders.CONTENT_TYPE);
  assertEquals(""String_Node_Str"",contentTypeHeader);
  assertEquals(uri.toASCIIString(),response.getHeaderString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getHeaderString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getHeaderString(""String_Node_Str""));
}",0.9528415961305924
17866,"public ODataExceptionWrapper(final UriInfo uriInfo,final HttpHeaders httpHeaders,final ServletConfig servletConfig){
  contentType=getContentType(uriInfo,httpHeaders).toContentTypeString();
  messageLocale=MessageService.getSupportedLocale(getLanguages(httpHeaders),DEFAULT_RESPONSE_LOCALE);
  httpRequestHeaders=httpHeaders.getRequestHeaders();
  requestUri=uriInfo.getRequestUri();
  try {
    callback=getErrorHandlerCallbackFromServletConfig(servletConfig);
  }
 catch (  Exception e) {
    throw new ODataRuntimeException(""String_Node_Str"",e);
  }
}","public ODataExceptionWrapper(final UriInfo uriInfo,final HttpHeaders httpHeaders,final ServletConfig servletConfig,final HttpServletRequest servletRequest){
  contentType=getContentType(uriInfo,httpHeaders).toContentTypeString();
  messageLocale=MessageService.getSupportedLocale(getLanguages(httpHeaders),DEFAULT_RESPONSE_LOCALE);
  httpRequestHeaders=httpHeaders.getRequestHeaders();
  requestUri=uriInfo.getRequestUri();
  try {
    callback=getErrorHandlerCallbackFromServletConfig(servletConfig,servletRequest);
  }
 catch (  Exception e) {
    throw new ODataRuntimeException(""String_Node_Str"",e);
  }
}",0.9527085124677558
17867,"private ODataErrorCallback getErrorHandlerCallbackFromServletConfig(final ServletConfig servletConfig) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  ODataErrorCallback callback=null;
  final String factoryClassName=servletConfig.getInitParameter(ODataServiceFactory.FACTORY_LABEL);
  if (factoryClassName != null) {
    Class<?> factoryClass=Class.forName(factoryClassName);
    final ODataServiceFactory serviceFactory=(ODataServiceFactory)factoryClass.newInstance();
    callback=serviceFactory.getCallback(ODataErrorCallback.class);
  }
  return callback;
}","private ODataErrorCallback getErrorHandlerCallbackFromServletConfig(final ServletConfig servletConfig,HttpServletRequest servletRequest) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  ODataErrorCallback callback=null;
  final String factoryClassName=servletConfig.getInitParameter(ODataServiceFactory.FACTORY_LABEL);
  if (factoryClassName != null) {
    ClassLoader cl=(ClassLoader)servletRequest.getAttribute(ODataServiceFactory.FACTORY_CLASSLOADER_LABEL);
    Class<?> factoryClass;
    if (cl == null) {
      factoryClass=Class.forName(factoryClassName);
    }
 else {
      factoryClass=Class.forName(factoryClassName,true,cl);
    }
    final ODataServiceFactory serviceFactory=(ODataServiceFactory)factoryClass.newInstance();
    callback=serviceFactory.getCallback(ODataErrorCallback.class);
  }
  return callback;
}",0.8186813186813187
17868,"private ODataErrorCallback getErrorHandlerCallback() throws ClassNotFoundException, InstantiationException, IllegalAccessException {
  ODataErrorCallback callback=null;
  final String factoryClassName=servletConfig.getInitParameter(ODataServiceFactory.FACTORY_LABEL);
  if (factoryClassName != null) {
    Class<?> factoryClass=Class.forName(factoryClassName);
    final ODataServiceFactory serviceFactory=(ODataServiceFactory)factoryClass.newInstance();
    callback=serviceFactory.getCallback(ODataErrorCallback.class);
  }
  return callback;
}","private ODataErrorCallback getErrorHandlerCallback() throws ClassNotFoundException, InstantiationException, IllegalAccessException {
  ODataErrorCallback callback=null;
  final String factoryClassName=servletConfig.getInitParameter(ODataServiceFactory.FACTORY_LABEL);
  if (factoryClassName != null) {
    ClassLoader cl=(ClassLoader)servletRequest.getAttribute(ODataServiceFactory.FACTORY_CLASSLOADER_LABEL);
    Class<?> factoryClass;
    if (cl == null) {
      factoryClass=Class.forName(factoryClassName);
    }
 else {
      factoryClass=Class.forName(factoryClassName,true,cl);
    }
    final ODataServiceFactory serviceFactory=(ODataServiceFactory)factoryClass.newInstance();
    callback=serviceFactory.getCallback(ODataErrorCallback.class);
  }
  return callback;
}",0.8260211800302572
17869,"private ODataResponse handleException(final Exception exception){
  ODataExceptionWrapper exceptionWrapper=new ODataExceptionWrapper(uriInfo,httpHeaders,servletConfig);
  ODataResponse oDataResponse=exceptionWrapper.wrapInExceptionResponse(exception);
  return oDataResponse;
}","private ODataResponse handleException(final Exception exception){
  ODataExceptionWrapper exceptionWrapper=new ODataExceptionWrapper(uriInfo,httpHeaders,servletConfig,servletRequest);
  ODataResponse oDataResponse=exceptionWrapper.wrapInExceptionResponse(exception);
  return oDataResponse;
}",0.9736379613356766
17870,"@Before public void before() throws URISyntaxException {
  exceptionMapper=new ODataExceptionMapperImpl();
  exceptionMapper.httpHeaders=mock(HttpHeaders.class);
  exceptionMapper.uriInfo=mock(UriInfo.class);
  exceptionMapper.servletConfig=mock(ServletConfig.class);
  MultivaluedHashMap<String,String> map=new MultivaluedHashMap<String,String>();
  when(exceptionMapper.uriInfo.getQueryParameters()).thenReturn(map);
  uri=new URI(""String_Node_Str"");
  when(exceptionMapper.uriInfo.getRequestUri()).thenReturn(uri);
  MultivaluedHashMap<String,String> httpHeaders=new MultivaluedHashMap<String,String>();
  when(exceptionMapper.httpHeaders.getRequestHeaders()).thenReturn(httpHeaders);
  disableLogging();
}","@Before public void before() throws URISyntaxException {
  exceptionMapper=new ODataExceptionMapperImpl();
  exceptionMapper.httpHeaders=mock(HttpHeaders.class);
  exceptionMapper.uriInfo=mock(UriInfo.class);
  exceptionMapper.servletConfig=mock(ServletConfig.class);
  exceptionMapper.servletRequest=mock(HttpServletRequest.class);
  MultivaluedHashMap<String,String> map=new MultivaluedHashMap<String,String>();
  when(exceptionMapper.uriInfo.getQueryParameters()).thenReturn(map);
  uri=new URI(""String_Node_Str"");
  when(exceptionMapper.uriInfo.getRequestUri()).thenReturn(uri);
  MultivaluedHashMap<String,String> httpHeaders=new MultivaluedHashMap<String,String>();
  when(exceptionMapper.httpHeaders.getRequestHeaders()).thenReturn(httpHeaders);
  disableLogging();
}",0.9561699258260284
17871,"@Test public void testExtendedODataErrorContext() throws Exception {
  MultivaluedMap<String,String> value=new MultivaluedHashMap<String,String>();
  value.putSingle(""String_Node_Str"",""String_Node_Str"");
  value.put(""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  when(exceptionMapper.httpHeaders.getRequestHeaders()).thenReturn(value);
  when(exceptionMapper.servletConfig.getInitParameter(ODataServiceFactory.FACTORY_LABEL)).thenReturn(ODataServiceFactoryImpl.class.getName());
  Response response=exceptionMapper.toResponse(new Exception());
  assertNotNull(response);
  assertEquals(HttpStatusCodes.BAD_REQUEST.getStatusCode(),response.getStatus());
  String errorMessage=(String)response.getEntity();
  assertEquals(""String_Node_Str"",errorMessage);
  String contentTypeHeader=response.getHeaderString(com.sap.core.odata.api.commons.HttpHeaders.CONTENT_TYPE);
  assertEquals(""String_Node_Str"",contentTypeHeader);
  assertEquals(uri.toASCIIString(),response.getHeaderString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getHeaderString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getHeaderString(""String_Node_Str""));
}","@Test public void testExtendedODataErrorContext() throws Exception {
  MultivaluedMap<String,String> value=new MultivaluedHashMap<String,String>();
  value.putSingle(""String_Node_Str"",""String_Node_Str"");
  value.put(""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  when(exceptionMapper.httpHeaders.getRequestHeaders()).thenReturn(value);
  when(exceptionMapper.servletConfig.getInitParameter(ODataServiceFactory.FACTORY_LABEL)).thenReturn(ODataServiceFactoryImpl.class.getName());
  when(exceptionMapper.servletRequest.getAttribute(ODataServiceFactory.FACTORY_CLASSLOADER_LABEL)).thenReturn(null);
  Response response=exceptionMapper.toResponse(new Exception());
  assertNotNull(response);
  assertEquals(HttpStatusCodes.BAD_REQUEST.getStatusCode(),response.getStatus());
  String errorMessage=(String)response.getEntity();
  assertEquals(""String_Node_Str"",errorMessage);
  String contentTypeHeader=response.getHeaderString(com.sap.core.odata.api.commons.HttpHeaders.CONTENT_TYPE);
  assertEquals(""String_Node_Str"",contentTypeHeader);
  assertEquals(uri.toASCIIString(),response.getHeaderString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getHeaderString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",response.getHeaderString(""String_Node_Str""));
}",0.9528415961305924
17872,"private void validateEntitySet() throws EntityProviderException {
  for (  Map.Entry<FullQualifiedName,EntityContainer> container : containerMap.entrySet()) {
    for (    EntitySet entitySet : container.getValue().getEntitySets()) {
      FullQualifiedName entityType=entitySet.getEntityType();
      if (!(entityTypesMap.containsKey(entityType) && container.getKey().getNamespace().equals(entityType.getNamespace()))) {
        validateEntityTypeWithAlias(entityType);
      }
    }
  }
}","private void validateEntitySet() throws EntityProviderException {
  for (  Map.Entry<FullQualifiedName,EntityContainer> container : containerMap.entrySet()) {
    for (    EntitySet entitySet : container.getValue().getEntitySets()) {
      FullQualifiedName entityType=entitySet.getEntityType();
      if (!(entityTypesMap.containsKey(entityType))) {
        validateEntityTypeWithAlias(entityType);
      }
    }
  }
}",0.921892189218922
17873,"private void validateAssociation() throws EntityProviderException {
  for (  Map.Entry<FullQualifiedName,EntityContainer> container : containerMap.entrySet()) {
    for (    AssociationSet associationSet : container.getValue().getAssociationSets()) {
      FullQualifiedName association=associationSet.getAssociation();
      if (associationsMap.containsKey(association) && container.getKey().getNamespace().equals(association.getNamespace())) {
        validateAssociationEnd(associationSet.getEnd1(),associationsMap.get(association));
        validateAssociationEnd(associationSet.getEnd2(),associationsMap.get(association));
        boolean end1=false;
        boolean end2=false;
        for (        EntitySet entitySet : container.getValue().getEntitySets()) {
          if (entitySet.getName().equals(associationSet.getEnd1().getEntitySet())) {
            end1=true;
          }
          if (entitySet.getName().equals(associationSet.getEnd2().getEntitySet())) {
            end2=true;
          }
        }
        if (!(end1 && end2)) {
          throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
        }
      }
 else {
        throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
      }
    }
  }
}","private void validateAssociation() throws EntityProviderException {
  for (  Map.Entry<FullQualifiedName,EntityContainer> container : containerMap.entrySet()) {
    for (    AssociationSet associationSet : container.getValue().getAssociationSets()) {
      FullQualifiedName association=associationSet.getAssociation();
      if (associationsMap.containsKey(association)) {
        validateAssociationEnd(associationSet.getEnd1(),associationsMap.get(association));
        validateAssociationEnd(associationSet.getEnd2(),associationsMap.get(association));
        boolean end1=false;
        boolean end2=false;
        for (        EntitySet entitySet : container.getValue().getEntitySets()) {
          if (entitySet.getName().equals(associationSet.getEnd1().getEntitySet())) {
            end1=true;
          }
          if (entitySet.getName().equals(associationSet.getEnd2().getEntitySet())) {
            end2=true;
          }
        }
        if (!(end1 && end2)) {
          throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
        }
      }
 else {
        throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
      }
    }
  }
}",0.9716312056737588
17874,"@Test public void testAssociationSet() throws XMLStreamException, EntityProviderException {
  EdmParser parser=new EdmParser();
  XMLStreamReader reader=createStreamReader(xmlWithAssociation);
  DataServices result=parser.readMetadata(reader,true);
  for (  Schema schema : result.getSchemas()) {
    for (    EntityContainer container : schema.getEntityContainers()) {
      assertEquals(""String_Node_Str"",container.getName());
      assertEquals(Boolean.TRUE,container.isDefaultEntityContainer());
      for (      AssociationSet assocSet : container.getAssociationSets()) {
        assertEquals(ASSOCIATION,assocSet.getName());
        assertEquals(ASSOCIATION,assocSet.getAssociation().getName());
        assertEquals(NAMESPACE,assocSet.getAssociation().getNamespace());
        AssociationSetEnd end;
        if (""String_Node_Str"".equals(assocSet.getEnd1().getEntitySet())) {
          end=assocSet.getEnd1();
        }
 else {
          end=assocSet.getEnd2();
        }
        assertEquals(""String_Node_Str"",end.getRole());
      }
    }
  }
}","@Test public void testAssociationSet() throws XMLStreamException, EntityProviderException {
  EdmParser parser=new EdmParser();
  XMLStreamReader reader=createStreamReader(xmlWithAssociation);
  DataServices result=parser.readMetadata(reader,true);
  for (  Schema schema : result.getSchemas()) {
    for (    EntityContainer container : schema.getEntityContainers()) {
      assertEquals(NAMESPACE2,schema.getNamespace());
      assertEquals(""String_Node_Str"",container.getName());
      assertEquals(Boolean.TRUE,container.isDefaultEntityContainer());
      for (      AssociationSet assocSet : container.getAssociationSets()) {
        assertEquals(ASSOCIATION,assocSet.getName());
        assertEquals(ASSOCIATION,assocSet.getAssociation().getName());
        assertEquals(NAMESPACE,assocSet.getAssociation().getNamespace());
        AssociationSetEnd end;
        if (""String_Node_Str"".equals(assocSet.getEnd1().getEntitySet())) {
          end=assocSet.getEnd1();
        }
 else {
          end=assocSet.getEnd2();
        }
        assertEquals(""String_Node_Str"",end.getRole());
      }
    }
  }
}",0.9749768303985172
17875,"private void validateEntitySet() throws EntityProviderException {
  for (  Map.Entry<FullQualifiedName,EntityContainer> container : containerMap.entrySet()) {
    for (    EntitySet entitySet : container.getValue().getEntitySets()) {
      FullQualifiedName entityType=entitySet.getEntityType();
      if (!(entityTypesMap.containsKey(entityType) && container.getKey().getNamespace().equals(entityType.getNamespace()))) {
        validateEntityTypeWithAlias(entityType);
      }
    }
  }
}","private void validateEntitySet() throws EntityProviderException {
  for (  Map.Entry<FullQualifiedName,EntityContainer> container : containerMap.entrySet()) {
    for (    EntitySet entitySet : container.getValue().getEntitySets()) {
      FullQualifiedName entityType=entitySet.getEntityType();
      if (!(entityTypesMap.containsKey(entityType))) {
        validateEntityTypeWithAlias(entityType);
      }
    }
  }
}",0.921892189218922
17876,"private void validateAssociation() throws EntityProviderException {
  for (  Map.Entry<FullQualifiedName,EntityContainer> container : containerMap.entrySet()) {
    for (    AssociationSet associationSet : container.getValue().getAssociationSets()) {
      FullQualifiedName association=associationSet.getAssociation();
      if (associationsMap.containsKey(association) && container.getKey().getNamespace().equals(association.getNamespace())) {
        validateAssociationEnd(associationSet.getEnd1(),associationsMap.get(association));
        validateAssociationEnd(associationSet.getEnd2(),associationsMap.get(association));
        boolean end1=false;
        boolean end2=false;
        for (        EntitySet entitySet : container.getValue().getEntitySets()) {
          if (entitySet.getName().equals(associationSet.getEnd1().getEntitySet())) {
            end1=true;
          }
          if (entitySet.getName().equals(associationSet.getEnd2().getEntitySet())) {
            end2=true;
          }
        }
        if (!(end1 && end2)) {
          throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
        }
      }
 else {
        throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
      }
    }
  }
}","private void validateAssociation() throws EntityProviderException {
  for (  Map.Entry<FullQualifiedName,EntityContainer> container : containerMap.entrySet()) {
    for (    AssociationSet associationSet : container.getValue().getAssociationSets()) {
      FullQualifiedName association=associationSet.getAssociation();
      if (associationsMap.containsKey(association)) {
        validateAssociationEnd(associationSet.getEnd1(),associationsMap.get(association));
        validateAssociationEnd(associationSet.getEnd2(),associationsMap.get(association));
        boolean end1=false;
        boolean end2=false;
        for (        EntitySet entitySet : container.getValue().getEntitySets()) {
          if (entitySet.getName().equals(associationSet.getEnd1().getEntitySet())) {
            end1=true;
          }
          if (entitySet.getName().equals(associationSet.getEnd2().getEntitySet())) {
            end2=true;
          }
        }
        if (!(end1 && end2)) {
          throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
        }
      }
 else {
        throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
      }
    }
  }
}",0.9716312056737588
17877,"@Test public void testAssociationSet() throws XMLStreamException, EntityProviderException {
  EdmParser parser=new EdmParser();
  XMLStreamReader reader=createStreamReader(xmlWithAssociation);
  DataServices result=parser.readMetadata(reader,true);
  for (  Schema schema : result.getSchemas()) {
    for (    EntityContainer container : schema.getEntityContainers()) {
      assertEquals(""String_Node_Str"",container.getName());
      assertEquals(Boolean.TRUE,container.isDefaultEntityContainer());
      for (      AssociationSet assocSet : container.getAssociationSets()) {
        assertEquals(ASSOCIATION,assocSet.getName());
        assertEquals(ASSOCIATION,assocSet.getAssociation().getName());
        assertEquals(NAMESPACE,assocSet.getAssociation().getNamespace());
        AssociationSetEnd end;
        if (""String_Node_Str"".equals(assocSet.getEnd1().getEntitySet())) {
          end=assocSet.getEnd1();
        }
 else {
          end=assocSet.getEnd2();
        }
        assertEquals(""String_Node_Str"",end.getRole());
      }
    }
  }
}","@Test public void testAssociationSet() throws XMLStreamException, EntityProviderException {
  EdmParser parser=new EdmParser();
  XMLStreamReader reader=createStreamReader(xmlWithAssociation);
  DataServices result=parser.readMetadata(reader,true);
  for (  Schema schema : result.getSchemas()) {
    for (    EntityContainer container : schema.getEntityContainers()) {
      assertEquals(NAMESPACE2,schema.getNamespace());
      assertEquals(""String_Node_Str"",container.getName());
      assertEquals(Boolean.TRUE,container.isDefaultEntityContainer());
      for (      AssociationSet assocSet : container.getAssociationSets()) {
        assertEquals(ASSOCIATION,assocSet.getName());
        assertEquals(ASSOCIATION,assocSet.getAssociation().getName());
        assertEquals(NAMESPACE,assocSet.getAssociation().getNamespace());
        AssociationSetEnd end;
        if (""String_Node_Str"".equals(assocSet.getEnd1().getEntitySet())) {
          end=assocSet.getEnd1();
        }
 else {
          end=assocSet.getEnd2();
        }
        assertEquals(""String_Node_Str"",end.getRole());
      }
    }
  }
}",0.9749768303985172
17878,"@Override public OrderByExpression parseOrderByString(final String orderByExpression) throws ExpressionParserException, ExpressionParserInternalError {
  curExpression=orderByExpression;
  OrderByExpressionImpl orderCollection=new OrderByExpressionImpl(curExpression);
  try {
    tokenList=new Tokenizer(orderByExpression).tokenize();
  }
 catch (  TokenizerException tokenizerException) {
    throw FilterParserExceptionImpl.createERROR_IN_TOKENIZER(tokenizerException,curExpression);
  }
  boolean weiter=false;
  while (weiter == false) {
    CommonExpression node=null;
    try {
      CommonExpression nodeLeft=readElement(null);
      node=readElements(nodeLeft,0);
    }
 catch (    ExpressionParserException expressionException) {
      expressionException.setFilterTree(orderCollection);
      throw expressionException;
    }
    OrderExpressionImpl orderNode=new OrderExpressionImpl(node);
    Token token=tokenList.lookToken();
    if (token == null) {
      orderNode.setSortOrder(SortOrder.asc);
    }
 else     if ((token.getKind() == TokenKind.LITERAL) && (token.getUriLiteral().equals(""String_Node_Str""))) {
      orderNode.setSortOrder(SortOrder.asc);
      tokenList.next();
      token=tokenList.lookToken();
    }
 else     if ((token.getKind() == TokenKind.LITERAL) && (token.getUriLiteral().equals(""String_Node_Str""))) {
      orderNode.setSortOrder(SortOrder.desc);
      tokenList.next();
      token=tokenList.lookToken();
    }
 else     if (token.getKind() == TokenKind.COMMA) {
      orderNode.setSortOrder(SortOrder.asc);
    }
 else {
      throw FilterParserExceptionImpl.createINVALID_SORT_ORDER(token,curExpression);
    }
    orderCollection.addOrder(orderNode);
    if (token == null) {
      weiter=true;
      break;
    }
 else     if (token.getKind() == TokenKind.COMMA) {
      Token oldToken=token;
      tokenList.next();
      token=tokenList.lookToken();
      if (token == null) {
        throw FilterParserExceptionImpl.createEXPRESSION_EXPECTED_AFTER_POS(oldToken,curExpression);
      }
    }
 else {
      throw FilterParserExceptionImpl.createCOMMA_OR_END_EXPECTED_AT_POS(token,curExpression);
    }
  }
  return orderCollection;
}","@Override public OrderByExpression parseOrderByString(final String orderByExpression) throws ExpressionParserException, ExpressionParserInternalError {
  curExpression=orderByExpression;
  OrderByExpressionImpl orderCollection=new OrderByExpressionImpl(curExpression);
  try {
    tokenList=new Tokenizer(orderByExpression).tokenize();
  }
 catch (  TokenizerException tokenizerException) {
    throw FilterParserExceptionImpl.createERROR_IN_TOKENIZER(tokenizerException,curExpression);
  }
  while (true) {
    CommonExpression node=null;
    try {
      CommonExpression nodeLeft=readElement(null);
      node=readElements(nodeLeft,0);
    }
 catch (    ExpressionParserException expressionException) {
      expressionException.setFilterTree(orderCollection);
      throw expressionException;
    }
    OrderExpressionImpl orderNode=new OrderExpressionImpl(node);
    Token token=tokenList.lookToken();
    if (token == null) {
      orderNode.setSortOrder(SortOrder.asc);
    }
 else     if ((token.getKind() == TokenKind.LITERAL) && (token.getUriLiteral().equals(""String_Node_Str""))) {
      orderNode.setSortOrder(SortOrder.asc);
      tokenList.next();
      token=tokenList.lookToken();
    }
 else     if ((token.getKind() == TokenKind.LITERAL) && (token.getUriLiteral().equals(""String_Node_Str""))) {
      orderNode.setSortOrder(SortOrder.desc);
      tokenList.next();
      token=tokenList.lookToken();
    }
 else     if (token.getKind() == TokenKind.COMMA) {
      orderNode.setSortOrder(SortOrder.asc);
    }
 else {
      throw FilterParserExceptionImpl.createINVALID_SORT_ORDER(token,curExpression);
    }
    orderCollection.addOrder(orderNode);
    if (token == null) {
      break;
    }
 else     if (token.getKind() == TokenKind.COMMA) {
      Token oldToken=token;
      tokenList.next();
      token=tokenList.lookToken();
      if (token == null) {
        throw FilterParserExceptionImpl.createEXPRESSION_EXPECTED_AFTER_POS(oldToken,curExpression);
      }
    }
 else {
      throw FilterParserExceptionImpl.createCOMMA_OR_END_EXPECTED_AT_POS(token,curExpression);
    }
  }
  return orderCollection;
}",0.9860853432282004
17879,"private boolean checkForLiteral(final int oldPosition,final char curCharacter,final String rem_expr){
  final Pattern OTHER_LIT=Pattern.compile(""String_Node_Str"");
  final Matcher matcher=OTHER_LIT.matcher(rem_expr);
  if (matcher.lookingAt()) {
    String token=matcher.group();
    try {
      EdmLiteral edmLiteral=typeDectector.parseUriLiteral(token);
      curPosition+=token.length();
      tokens.appendEdmTypedToken(oldPosition,TokenKind.SIMPLE_TYPE,token,edmLiteral);
      return true;
    }
 catch (    EdmLiteralException e) {
    }
    if (curCharacter == '-') {
      curPosition=curPosition + 1;
      tokens.appendToken(oldPosition,TokenKind.SYMBOL,curCharacter);
      return true;
    }
    curPosition=curPosition + token.length();
    tokens.appendToken(oldPosition,TokenKind.LITERAL,token);
    return true;
  }
  return false;
}","private boolean checkForLiteral(final int oldPosition,final char curCharacter,final String rem_expr){
  final Matcher matcher=OTHER_LIT.matcher(rem_expr);
  boolean isLiteral=false;
  if (matcher.lookingAt()) {
    String token=matcher.group();
    try {
      EdmLiteral edmLiteral=typeDectector.parseUriLiteral(token);
      curPosition=curPosition + token.length();
      tokens.appendEdmTypedToken(oldPosition,TokenKind.SIMPLE_TYPE,token,edmLiteral);
      isLiteral=true;
    }
 catch (    EdmLiteralException e) {
      if (curCharacter == '-') {
        curPosition=curPosition + 1;
        tokens.appendToken(oldPosition,TokenKind.SYMBOL,curCharacter);
        isLiteral=true;
      }
 else {
        curPosition=curPosition + token.length();
        tokens.appendToken(oldPosition,TokenKind.LITERAL,token);
        isLiteral=true;
      }
    }
  }
  return isLiteral;
}",0.8143435511856565
17880,"private boolean checkForMethod(final int oldPosition,final String rem_expr){
  final Pattern FUNK=Pattern.compile(""String_Node_Str"");
  Matcher matcher=FUNK.matcher(rem_expr);
  if (matcher.find()) {
    String token=matcher.group(1);
    curPosition=curPosition + token.length();
    tokens.appendToken(oldPosition,TokenKind.LITERAL,token);
    return true;
  }
  return false;
}","private boolean checkForMethod(final int oldPosition,final String rem_expr){
  boolean isMethod=false;
  Matcher matcher=FUNK.matcher(rem_expr);
  if (matcher.find()) {
    String token=matcher.group(1);
    curPosition=curPosition + token.length();
    tokens.appendToken(oldPosition,TokenKind.LITERAL,token);
    isMethod=true;
  }
  return isMethod;
}",0.8583106267029973
17881,"private boolean checkForBinary(final int oldPosition,final String rem_expr){
  final Pattern AND_SUB=Pattern.compile(""String_Node_Str"");
  Matcher matcher1=AND_SUB.matcher(rem_expr);
  if (matcher1.find()) {
    String token=matcher1.group(1);
    curPosition=curPosition + token.length();
    tokens.appendToken(oldPosition,TokenKind.LITERAL,token);
    return true;
  }
  return false;
}","private boolean checkForBinary(final int oldPosition,final String rem_expr){
  boolean isBinary=false;
  Matcher matcher1=AND_SUB.matcher(rem_expr);
  if (matcher1.find()) {
    String token=matcher1.group(1);
    curPosition=curPosition + token.length();
    tokens.appendToken(oldPosition,TokenKind.LITERAL,token);
    isBinary=true;
  }
  return isBinary;
}",0.8571428571428571
17882,"private boolean checkForPrefix(final String rem_expr) throws ExpressionParserException, TokenizerException {
  final Pattern prefix=Pattern.compile(""String_Node_Str"");
  Matcher matcher=prefix.matcher(rem_expr);
  String token=""String_Node_Str"";
  char curCharacter;
  if (matcher.find()) {
    token=matcher.group(1);
    curPosition=curPosition + token.length();
    curCharacter=expression.charAt(curPosition);
    readLiteral(curCharacter,token);
    return true;
  }
  return false;
}","private boolean checkForPrefix(final String rem_expr) throws ExpressionParserException, TokenizerException {
  boolean isPrefix=false;
  Matcher matcher=prefix.matcher(rem_expr);
  String token=""String_Node_Str"";
  char curCharacter;
  if (matcher.find()) {
    token=matcher.group(1);
    curPosition=curPosition + token.length();
    curCharacter=expression.charAt(curPosition);
    readLiteral(curCharacter,token);
    isPrefix=true;
  }
  return isPrefix;
}",0.7621052631578947
17883,"/** 
 * Read up to single ' and move pointer to the following char and tries a type detection
 * @param curCharacter
 * @param token
 * @throws ExpressionParserException
 * @throws TokenizerException
 */
private void readLiteral(char curCharacter,String token) throws ExpressionParserException, TokenizerException {
  int offsetPos=-token.length();
  int oldPosition=curPosition;
  token+=Character.toString(curCharacter);
  curPosition+=1;
  boolean wasHochkomma=false;
  while (curPosition < expressionLength) {
    curCharacter=expression.charAt(curPosition);
    if (curCharacter != '\'') {
      if (wasHochkomma == true) {
        break;
      }
      token=token + curCharacter;
      wasHochkomma=false;
    }
 else {
      if (wasHochkomma) {
        wasHochkomma=false;
      }
 else {
        wasHochkomma=true;
        token=token + curCharacter;
      }
    }
    curPosition+=1;
  }
  if (!wasHochkomma) {
    throw FilterParserExceptionImpl.createTOKEN_UNDETERMINATED_STRING(oldPosition,expression);
  }
  try {
    EdmLiteral edmLiteral=typeDectector.parseUriLiteral(token);
    tokens.appendEdmTypedToken(oldPosition + offsetPos,TokenKind.SIMPLE_TYPE,token,edmLiteral);
  }
 catch (  EdmLiteralException ex) {
    throw TokenizerException.createTYPEDECTECTION_FAILED_ON_STRING(ex,oldPosition,token);
  }
}","/** 
 * Read up to single ' and move pointer to the following char and tries a type detection
 * @param curCharacter
 * @param token
 * @throws ExpressionParserException
 * @throws TokenizerException
 */
private void readLiteral(char curCharacter,String token) throws ExpressionParserException, TokenizerException {
  int offsetPos=-token.length();
  int oldPosition=curPosition;
  token=token + Character.toString(curCharacter);
  curPosition=curPosition + 1;
  boolean wasApostroph=false;
  while (curPosition < expressionLength) {
    curCharacter=expression.charAt(curPosition);
    if (curCharacter != '\'') {
      if (wasApostroph == true) {
        break;
      }
      token=token + curCharacter;
      wasApostroph=false;
    }
 else {
      if (wasApostroph) {
        wasApostroph=false;
      }
 else {
        wasApostroph=true;
        token=token + curCharacter;
      }
    }
    curPosition=curPosition + 1;
  }
  if (!wasApostroph) {
    throw FilterParserExceptionImpl.createTOKEN_UNDETERMINATED_STRING(oldPosition,expression);
  }
  try {
    EdmLiteral edmLiteral=typeDectector.parseUriLiteral(token);
    tokens.appendEdmTypedToken(oldPosition + offsetPos,TokenKind.SIMPLE_TYPE,token,edmLiteral);
  }
 catch (  EdmLiteralException ex) {
    throw TokenizerException.createTYPEDECTECTION_FAILED_ON_STRING(ex,oldPosition,token);
  }
}",0.9383638401195368
17884,"private boolean checkForMath(final int oldPosition,final String rem_expr){
  final Pattern AND_SUB1=Pattern.compile(""String_Node_Str"");
  Matcher matcher1=AND_SUB1.matcher(rem_expr);
  if (matcher1.find()) {
    String token=matcher1.group(1);
    curPosition=curPosition + token.length();
    tokens.appendToken(oldPosition,TokenKind.LITERAL,token);
    return true;
  }
  return false;
}","private boolean checkForMath(final int oldPosition,final String rem_expr){
  boolean isMath=false;
  Matcher matcher1=AND_SUB1.matcher(rem_expr);
  if (matcher1.find()) {
    String token=matcher1.group(1);
    curPosition=curPosition + token.length();
    tokens.appendToken(oldPosition,TokenKind.LITERAL,token);
    isMath=true;
  }
  return isMath;
}",0.862533692722372
17885,"private boolean checkForBoolean(final int oldPosition,final String rem_expr){
  if (rem_expr.equals(""String_Node_Str"") || rem_expr.equals(""String_Node_Str"")) {
    curPosition=curPosition + rem_expr.length();
    tokens.appendEdmTypedToken(oldPosition,TokenKind.SIMPLE_TYPE,rem_expr,new EdmLiteral(EdmSimpleTypeFacadeImpl.getEdmSimpleType(EdmSimpleTypeKind.Boolean),rem_expr));
    return true;
  }
  return false;
}","private boolean checkForBoolean(final int oldPosition,final String rem_expr){
  boolean isBoolean=false;
  if (rem_expr.equals(""String_Node_Str"") || rem_expr.equals(""String_Node_Str"")) {
    curPosition=curPosition + rem_expr.length();
    tokens.appendEdmTypedToken(oldPosition,TokenKind.SIMPLE_TYPE,rem_expr,new EdmLiteral(EdmSimpleTypeFacadeImpl.getEdmSimpleType(EdmSimpleTypeKind.Boolean),rem_expr));
    isBoolean=true;
  }
  return isBoolean;
}",0.9330254041570438
17886,"private ODataErrorCallback getErrorHandlerCallbackFromContext(final ODataContext context) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
  ODataErrorCallback callback=null;
  ODataServiceFactory serviceFactory=context.getServiceFactory();
  if (serviceFactory != null) {
    callback=serviceFactory.getCallback(ODataErrorCallback.class);
  }
  return callback;
}","private ODataErrorCallback getErrorHandlerCallbackFromContext(final ODataContext context) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
  ODataErrorCallback callback=null;
  ODataServiceFactory serviceFactory=context.getServiceFactory();
  callback=serviceFactory.getCallback(ODataErrorCallback.class);
  return callback;
}",0.9042553191489362
17887,"private ODataContextImpl buildODataContext(final ODataRequest request){
  ODataContextImpl context=new ODataContextImpl();
  context.setRequest(request);
  context.setPathInfo(request.getPathInfo());
  context.setHttpMethod(request.getMethod().name());
  context.setAcceptableLanguages(request.getAcceptableLanguages());
  return context;
}","private ODataContextImpl buildODataContext(final ODataRequest request){
  ODataContextImpl context=new ODataContextImpl();
  context.setServiceFactory(serviceFactory);
  context.setRequest(request);
  context.setPathInfo(request.getPathInfo());
  context.setHttpMethod(request.getMethod().name());
  context.setAcceptableLanguages(request.getAcceptableLanguages());
  return context;
}",0.9379310344827586
17888,"private Response returnNotImplementedResponse(final MessageReference messageReference){
  ODataContextImpl context=new ODataContextImpl();
  context.setRequest(request);
  context.setAcceptableLanguages(request.getAcceptableLanguages());
  context.setPathInfo(request.getPathInfo());
  ODataExceptionWrapper exceptionWrapper=new ODataExceptionWrapper(context,request.getQueryParameters(),request.getAcceptHeaders());
  ODataResponse response=exceptionWrapper.wrapInExceptionResponse(new ODataNotImplementedException(messageReference));
  return RestUtil.convertResponse(response);
}","private Response returnNotImplementedResponse(final MessageReference messageReference){
  ODataContextImpl context=new ODataContextImpl();
  context.setRequest(request);
  context.setAcceptableLanguages(request.getAcceptableLanguages());
  context.setPathInfo(request.getPathInfo());
  context.setServiceFactory(serviceFactory);
  ODataExceptionWrapper exceptionWrapper=new ODataExceptionWrapper(context,request.getQueryParameters(),request.getAcceptHeaders());
  ODataResponse response=exceptionWrapper.wrapInExceptionResponse(new ODataNotImplementedException(messageReference));
  return RestUtil.convertResponse(response);
}",0.9627791563275434
17889,"public void initialize(final SubLocatorParameter param) throws ODataException {
  requestHandler=new ODataRequestHandler(param.getServiceFactory());
  request=new ODataRequestImpl();
  request.setHeaders(RestUtil.extractRequestHeaders(param.getHttpHeaders()));
  request.setPathInfo(RestUtil.buildODataPathInfo(param));
  request.setBody(RestUtil.contentAsStream(RestUtil.extractRequestContent(param)));
  request.setQueryParameters(RestUtil.convertToSinglevaluedMap(param.getUriInfo().getQueryParameters()));
  request.setAcceptHeaders(RestUtil.extractAcceptHeaders(param));
  request.setContentType(RestUtil.extractRequestContentType(param));
  request.setAcceptableLanguages(param.getHttpHeaders().getAcceptableLanguages());
}","public void initialize(final SubLocatorParameter param) throws ODataException {
  serviceFactory=param.getServiceFactory();
  requestHandler=new ODataRequestHandler(serviceFactory);
  request=new ODataRequestImpl();
  request.setHeaders(RestUtil.extractRequestHeaders(param.getHttpHeaders()));
  request.setPathInfo(RestUtil.buildODataPathInfo(param));
  request.setBody(RestUtil.contentAsStream(RestUtil.extractRequestContent(param)));
  request.setQueryParameters(RestUtil.convertToSinglevaluedMap(param.getUriInfo().getQueryParameters()));
  request.setAcceptHeaders(RestUtil.extractAcceptHeaders(param));
  request.setContentType(RestUtil.extractRequestContentType(param));
  request.setAcceptableLanguages(param.getHttpHeaders().getAcceptableLanguages());
}",0.9617706237424548
17890,"public static Map<String,String> extractRequestHeaders(final javax.ws.rs.core.HttpHeaders httpHeaders){
  final MultivaluedMap<String,String> headers=httpHeaders.getRequestHeaders();
  Map<String,String> headerMap=new HashMap<String,String>();
  for (  final String key : headers.keySet()) {
    final String value=httpHeaders.getHeaderString(key);
    if (value != null && !""String_Node_Str"".equals(value)) {
      headerMap.put(key,value);
    }
  }
  return headerMap;
}","public static Map<String,String> extractRequestHeaders(final javax.ws.rs.core.HttpHeaders httpHeaders){
  final MultivaluedMap<String,String> headers=httpHeaders.getRequestHeaders();
  Map<String,String> headerMap=new HashMap<String,String>();
  for (  final String key : headers.keySet()) {
    List<String> header=httpHeaders.getRequestHeader(key);
    if (header != null && !header.isEmpty()) {
      String value=header.get(0);
      if (value != null && !""String_Node_Str"".equals(value)) {
        headerMap.put(key,value);
      }
    }
  }
  return headerMap;
}",0.8434197886647454
17891,"@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  MessageReference other=(MessageReference)obj;
  if (key == null) {
    if (other.key != null) {
      return false;
    }
  }
 else   if (!key.equals(other.key)) {
    return false;
  }
  return true;
}","/** 
 * {@link MessageReference}s are equal if their message keys have the same value.
 * @return <code>true</code> if both instances are equal, otherwise <code>false</code>.
 */
@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  MessageReference other=(MessageReference)obj;
  if (key == null) {
    if (other.key != null) {
      return false;
    }
  }
 else   if (!key.equals(other.key)) {
    return false;
  }
  return true;
}",0.8171603677221655
17892,"@Override public EdmEntityContainer getEntityContainer(final String name) throws EdmException {
  if (edmEntityContainers.containsKey(name)) {
    return edmEntityContainers.get(name);
  }
  EdmEntityContainer edmEntityContainer=null;
  try {
    edmEntityContainer=createEntityContainer(name);
    if (edmEntityContainer != null) {
      if (name == null && edmEntityContainers.containsKey(edmEntityContainer.getName())) {
        edmEntityContainer=edmEntityContainers.get(edmEntityContainer.getName());
        edmEntityContainers.put(name,edmEntityContainer);
      }
 else       if (edmEntityContainers.containsKey(null) && name.equals(edmEntityContainers.get(null).getName())) {
        edmEntityContainer=edmEntityContainers.get(null);
        edmEntityContainers.put(name,edmEntityContainer);
      }
 else {
        edmEntityContainers.put(name,edmEntityContainer);
      }
    }
  }
 catch (  ODataException e) {
    throw new EdmException(EdmException.COMMON,e);
  }
  return edmEntityContainer;
}","@Override public EdmEntityContainer getEntityContainer(final String name) throws EdmException {
  if (edmEntityContainers.containsKey(name)) {
    return edmEntityContainers.get(name);
  }
  EdmEntityContainer edmEntityContainer=null;
  try {
    edmEntityContainer=createEntityContainer(name);
    if (edmEntityContainer != null) {
      if (name == null && edmEntityContainers.containsKey(edmEntityContainer.getName())) {
        edmEntityContainer=edmEntityContainers.get(edmEntityContainer.getName());
        edmEntityContainers.put(name,edmEntityContainer);
      }
 else       if (edmEntityContainers.containsKey(null) && edmEntityContainers.get(null) != null && name.equals(edmEntityContainers.get(null).getName())) {
        edmEntityContainer=edmEntityContainers.get(null);
        edmEntityContainers.put(name,edmEntityContainer);
      }
 else {
        edmEntityContainers.put(name,edmEntityContainer);
      }
    }
  }
 catch (  ODataException e) {
    throw new EdmException(EdmException.COMMON,e);
  }
  return edmEntityContainer;
}",0.980068060281964
17893,"private ServiceDocumentImpl readServiceDocument(final JsonReader reader) throws EntityProviderException {
  try {
    reader.beginObject();
    currentHandledObjectName=reader.nextName();
    if (FormatJson.D.equals(currentHandledObjectName)) {
      reader.beginObject();
      readContent(reader);
      reader.endObject();
    }
    reader.endObject();
    reader.peek();
    reader.close();
  }
 catch (  final IOException e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
catch (  final IllegalStateException e) {
    throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
  }
catch (  final EdmException e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
catch (  final ODataException e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
  return new ServiceDocumentImpl().setEntitySetsInfo(entitySets);
}","private ServiceDocumentImpl readServiceDocument(final JsonReader reader) throws EntityProviderException {
  try {
    reader.beginObject();
    currentHandledObjectName=reader.nextName();
    if (FormatJson.D.equals(currentHandledObjectName)) {
      reader.beginObject();
      readContent(reader);
      reader.endObject();
    }
    reader.endObject();
    reader.peek();
    reader.close();
  }
 catch (  final IOException e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
catch (  final IllegalStateException e) {
    throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""),e);
  }
catch (  final EdmException e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
catch (  final ODataException e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
  return new ServiceDocumentImpl().setEntitySetsInfo(entitySets);
}",0.9989429175475688
17894,"@SuppressWarnings(""String_Node_Str"") private void failContentTypeCreation(final String contentType,final Class<? extends Throwable> expectedExceptionClass) throws Throwable {
  try {
    ContentType mt=ContentType.create(contentType);
    Assert.fail(""String_Node_Str"" + expectedExceptionClass + ""String_Node_Str""+ contentType+ ""String_Node_Str"");
  }
 catch (  Throwable e) {
    if (e.getClass() == AssertionError.class) {
      throw e;
    }
    assertEquals(expectedExceptionClass,e.getClass());
  }
}","@SuppressWarnings(""String_Node_Str"") private void failContentTypeCreation(final String contentType,final Class<? extends Throwable> expectedExceptionClass) throws Exception {
  try {
    ContentType mt=ContentType.create(contentType);
    Assert.fail(""String_Node_Str"" + expectedExceptionClass + ""String_Node_Str""+ contentType+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    assertEquals(expectedExceptionClass,e.getClass());
  }
}",0.8886532343584306
17895,"public ServiceDocumentImpl readServiceDokument(final XMLStreamReader reader) throws EntityProviderException {
  AtomInfoImpl atomInfo=new AtomInfoImpl();
  ServiceDocumentImpl serviceDocument=new ServiceDocumentImpl();
  List<Workspace> workspaces=new ArrayList<Workspace>();
  List<ExtensionElement> extElements=new ArrayList<ExtensionElement>();
  CommonAttributesImpl attributes=new CommonAttributesImpl();
  try {
    while (reader.hasNext() && !(reader.isEndElement() && Edm.NAMESPACE_APP_2007.equals(reader.getNamespaceURI()) && FormatXml.APP_SERVICE.equals(reader.getLocalName()))) {
      reader.next();
      if (reader.isStartElement()) {
        currentHandledStartTagName=reader.getLocalName();
        if (FormatXml.APP_SERVICE.equals(currentHandledStartTagName)) {
          attributes=parseCommonAttribute(reader);
        }
 else         if (FormatXml.APP_WORKSPACE.equals(currentHandledStartTagName)) {
          workspaces.add(parseWorkspace(reader));
        }
 else {
          ExtensionElementImpl extElement=parseExtensionElement(reader);
          if (extElement != null) {
            extElements.add(extElement);
          }
        }
      }
    }
    if (workspaces.isEmpty()) {
      throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
    }
    reader.close();
    atomInfo.setWorkspaces(workspaces).setCommonAttributes(attributes).setExtesionElements(extElements);
    serviceDocument.setAtomInfo(atomInfo);
    serviceDocument.setEntitySetsInfo(atomInfo.getEntitySetsInfo());
    return serviceDocument;
  }
 catch (  XMLStreamException e) {
    throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
  }
}","public ServiceDocumentImpl readServiceDokument(final XMLStreamReader reader) throws EntityProviderException {
  AtomInfoImpl atomInfo=new AtomInfoImpl();
  ServiceDocumentImpl serviceDocument=new ServiceDocumentImpl();
  List<Workspace> workspaces=new ArrayList<Workspace>();
  List<ExtensionElement> extElements=new ArrayList<ExtensionElement>();
  CommonAttributesImpl attributes=new CommonAttributesImpl();
  try {
    while (reader.hasNext() && !(reader.isEndElement() && Edm.NAMESPACE_APP_2007.equals(reader.getNamespaceURI()) && FormatXml.APP_SERVICE.equals(reader.getLocalName()))) {
      reader.next();
      if (reader.isStartElement()) {
        currentHandledStartTagName=reader.getLocalName();
        if (FormatXml.APP_SERVICE.equals(currentHandledStartTagName)) {
          attributes=parseCommonAttribute(reader);
        }
 else         if (FormatXml.APP_WORKSPACE.equals(currentHandledStartTagName)) {
          workspaces.add(parseWorkspace(reader));
        }
 else {
          ExtensionElementImpl extElement=parseExtensionElement(reader);
          if (extElement != null) {
            extElements.add(extElement);
          }
        }
      }
    }
    if (workspaces.isEmpty()) {
      throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
    }
    reader.close();
    atomInfo.setWorkspaces(workspaces).setCommonAttributes(attributes).setExtesionElements(extElements);
    serviceDocument.setAtomInfo(atomInfo);
    serviceDocument.setEntitySetsInfo(atomInfo.getEntitySetsInfo());
    return serviceDocument;
  }
 catch (  XMLStreamException e) {
    throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""),e);
  }
}",0.9994202898550724
17896,"private XMLStreamReader createStreamReader(final InputStream in) throws EntityProviderException {
  if (in != null) {
    XMLInputFactory factory=XMLInputFactory.newInstance();
    factory.setProperty(XMLInputFactory.IS_VALIDATING,false);
    factory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE,true);
    XMLStreamReader streamReader;
    try {
      streamReader=factory.createXMLStreamReader(in);
    }
 catch (    XMLStreamException e) {
      throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
    }
    return streamReader;
  }
 else {
    throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
  }
}","private XMLStreamReader createStreamReader(final InputStream in) throws EntityProviderException {
  if (in != null) {
    XMLInputFactory factory=XMLInputFactory.newInstance();
    factory.setProperty(XMLInputFactory.IS_VALIDATING,false);
    factory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE,true);
    XMLStreamReader streamReader;
    try {
      streamReader=factory.createXMLStreamReader(in);
    }
 catch (    XMLStreamException e) {
      throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""),e);
    }
    return streamReader;
  }
 else {
    throw new EntityProviderException(EntityProviderException.COMMON.addContent(""String_Node_Str""));
  }
}",0.998567335243553
17897,"@SuppressWarnings(""String_Node_Str"") private void failContentTypeCreation(final String contentType,final Class<? extends Throwable> expectedExceptionClass) throws Exception {
  try {
    ContentType mt=ContentType.create(contentType);
    Assert.fail(""String_Node_Str"" + expectedExceptionClass + ""String_Node_Str""+ contentType+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    assertEquals(expectedExceptionClass,e.getClass());
  }
}","@SuppressWarnings(""String_Node_Str"") private void failContentTypeCreation(final String contentType,final Class<? extends Exception> expectedExceptionClass) throws Exception {
  try {
    ContentType mt=ContentType.create(contentType);
    Assert.fail(""String_Node_Str"" + expectedExceptionClass + ""String_Node_Str""+ contentType+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    assertEquals(expectedExceptionClass,e.getClass());
  }
}",0.9794050343249427
17898,"@Test public void testODataContextedCauseLayer3(){
  ODataException exception=new ODataException(""String_Node_Str"",new IllegalArgumentException(new ODataNotFoundException(ODataNotFoundException.ENTITY)));
  Assert.assertTrue(exception.isCausedByHttpException());
}","@Test public void testODataContextedCauseLayer3(){
  ODataException exception=new ODataException(""String_Node_Str"",new IllegalArgumentException(new ODataNotFoundException(ODataNotFoundException.ENTITY)));
  assertTrue(exception.isCausedByHttpException());
}",0.9865642994241842
17899,"@Test public void testODataContextedCause(){
  ODataException exception=new ODataException(""String_Node_Str"",new ODataNotFoundException(ODataNotFoundException.ENTITY));
  Assert.assertTrue(exception.isCausedByHttpException());
}","@Test public void testODataContextedCause(){
  ODataException exception=new ODataException(""String_Node_Str"",new ODataNotFoundException(ODataNotFoundException.ENTITY));
  assertTrue(exception.isCausedByHttpException());
}",0.9844097995545658
17900,"@Test public void testNoCause(){
  ODataException exception=new ODataException(""String_Node_Str"");
  Assert.assertFalse(exception.isCausedByHttpException());
}","@Test public void testNoCause(){
  ODataException exception=new ODataException(""String_Node_Str"");
  assertFalse(exception.isCausedByHttpException());
}",0.977491961414791
17901,"@Test public void testNPECause(){
  ODataException exception=new ODataException(""String_Node_Str"",new NullPointerException());
  Assert.assertFalse(exception.isCausedByHttpException());
}","@Test public void testNPECause(){
  ODataException exception=new ODataException(""String_Node_Str"",new NullPointerException());
  assertFalse(exception.isCausedByHttpException());
}",0.9809264305177112
17902,"@SuppressWarnings(""String_Node_Str"") private void setNavigationProperties(Object jpaEntity,EdmEntitySet entitySet,Map<String,Object> propertyValueMap,String entityName,Map<String,Class<?>> relatedClassMap) throws ODataJPARuntimeException {
  if (jpaEntity == null || entitySet == null || propertyValueMap == null || propertyValueMap.size() == 0)   return;
  List<HashMap<?,?>> mapList=getSettersForNavigationProperties(jpaEntity,entitySet,relatedClassMap);
  HashMap<String,Method> setters=(HashMap<String,Method>)mapList.get(0);
  HashMap<String,EdmMultiplicity> multiplicityMap=(HashMap<String,EdmMultiplicity>)mapList.get(1);
  for (  String key : setters.keySet()) {
    Method method=setters.get(key);
    Object propertyValue=propertyValueMap.get(key);
    if (propertyValue == null)     continue;
    try {
      if (multiplicityMap.get(key) == EdmMultiplicity.MANY) {
        List<Object> propertyList=new ArrayList<Object>();
        propertyList.add(propertyValue);
        propertyValue=propertyList;
      }
      method.invoke(jpaEntity,propertyValue);
    }
 catch (    IllegalAccessException e) {
      throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
    }
catch (    IllegalArgumentException e) {
      throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
    }
catch (    InvocationTargetException e) {
      throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void setNavigationProperties(Object jpaEntity,EdmEntitySet entitySet,Map<String,Object> propertyValueMap,String entityName,Map<String,Class<?>> relatedClassMap) throws ODataJPARuntimeException {
  if (jpaEntity == null || entitySet == null || propertyValueMap == null || propertyValueMap.size() == 0)   return;
  List<HashMap<?,?>> mapList=getSettersForNavigationProperties(jpaEntity,entitySet,relatedClassMap);
  HashMap<String,Method> setters=(HashMap<String,Method>)mapList.get(0);
  HashMap<String,EdmMultiplicity> multiplicityMap=(HashMap<String,EdmMultiplicity>)mapList.get(1);
  for (  String key : setters.keySet()) {
    Method method=setters.get(key);
    List<Object> propertyValue=(List<Object>)propertyValueMap.get(key);
    if (propertyValue == null || propertyValue.size() == 0)     continue;
    try {
      if (multiplicityMap.get(key) == EdmMultiplicity.MANY) {
        method.invoke(jpaEntity,propertyValue);
      }
 else       method.invoke(jpaEntity,propertyValue.get(0));
    }
 catch (    IllegalAccessException e) {
      throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
    }
catch (    IllegalArgumentException e) {
      throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
    }
catch (    InvocationTargetException e) {
      throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
    }
  }
}",0.8628461043142305
17903,"private <T>void createInlinedEntities(final T jpaEntity,final EdmEntitySet entitySet,final ODataEntry entryValues,String jpaEntityName) throws ODataException {
  if (jpaEntity == null)   return;
  Map<String,Object> relatedPropertyValueMap=new HashMap<String,Object>();
  Map<String,Class<?>> relatedClassMap=new HashMap<String,Class<?>>();
  final EdmEntityType entityType=entitySet.getEntityType();
  for (  final String navigationPropertyName : entityType.getNavigationPropertyNames()) {
    final EdmNavigationProperty navigationProperty=(EdmNavigationProperty)entityType.getProperty(navigationPropertyName);
    List<ODataEntry> relatedValueList=null;
    if (entryValues.getProperties().get(navigationPropertyName) != null) {
      relatedValueList=((com.sap.core.odata.core.ep.feed.ODataFeedImpl)entryValues.getProperties().get(navigationPropertyName)).getEntries();
    }
    if (relatedValueList != null) {
      final EdmEntitySet relatedEntitySet=entitySet.getRelatedEntitySet(navigationProperty);
      for (      final ODataEntry relatedValues : relatedValueList) {
        String entityName=null;
        EdmEntityType relatedEntityType=relatedEntitySet.getEntityType();
        try {
          if (relatedEntityType.getMapping() != null && relatedEntityType.getMapping().getInternalName() != null) {
            entityName=relatedEntityType.getMapping().getInternalName();
          }
 else {
            entityName=relatedEntityType.getName();
          }
        }
 catch (        EdmException e1) {
          throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e1.getMessage()),e1);
        }
        Object relatedData=null;
        Set<EntityType<?>> entityTypeSet=this.metamodel.getEntities();
        String currentEntityName=null;
        for (        EntityType<?> entityTypeTemp : entityTypeSet) {
          if (entityTypeTemp.getJavaType().getName().endsWith(""String_Node_Str"" + entityName)) {
            currentEntityName=entityTypeTemp.getName();
            try {
              relatedClassMap.put(navigationProperty.getMapping().getInternalName(),entityTypeTemp.getJavaType());
              relatedData=entityTypeTemp.getJavaType().newInstance();
              break;
            }
 catch (            InstantiationException e) {
              throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
            }
catch (            IllegalAccessException e) {
              throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
            }
          }
        }
        if (relatedValues != null && relatedEntitySet != null)         parse2JPAEntityValueMap(relatedData,relatedEntitySet.getEntityType(),relatedValues.getProperties(),currentEntityName);
 else         continue;
        relatedPropertyValueMap.put(navigationProperty.getMapping().getInternalName(),relatedData);
        createInlinedEntities(relatedData,relatedEntitySet,relatedValues,currentEntityName);
      }
    }
  }
  setNavigationProperties(jpaEntity,entitySet,relatedPropertyValueMap,jpaEntityName,relatedClassMap);
}","private <T>void createInlinedEntities(final T jpaEntity,final EdmEntitySet entitySet,final ODataEntry entryValues,String jpaEntityName) throws ODataException {
  if (jpaEntity == null)   return;
  Map<String,Object> relatedPropertyValueMap=new HashMap<String,Object>();
  Map<String,Class<?>> relatedClassMap=new HashMap<String,Class<?>>();
  final EdmEntityType entityType=entitySet.getEntityType();
  for (  final String navigationPropertyName : entityType.getNavigationPropertyNames()) {
    final EdmNavigationProperty navigationProperty=(EdmNavigationProperty)entityType.getProperty(navigationPropertyName);
    List<ODataEntry> relatedValueList=null;
    if (entryValues.getProperties().get(navigationPropertyName) != null) {
      relatedValueList=((com.sap.core.odata.core.ep.feed.ODataFeedImpl)entryValues.getProperties().get(navigationPropertyName)).getEntries();
    }
    List<Object> relatedDataList=null;
    if (relatedValueList != null) {
      relatedDataList=new ArrayList<Object>();
      final EdmEntitySet relatedEntitySet=entitySet.getRelatedEntitySet(navigationProperty);
      for (      final ODataEntry relatedValues : relatedValueList) {
        String entityName=null;
        EdmEntityType relatedEntityType=relatedEntitySet.getEntityType();
        try {
          if (relatedEntityType.getMapping() != null && relatedEntityType.getMapping().getInternalName() != null) {
            entityName=relatedEntityType.getMapping().getInternalName();
          }
 else {
            entityName=relatedEntityType.getName();
          }
        }
 catch (        EdmException e1) {
          throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e1.getMessage()),e1);
        }
        Object relatedData=null;
        Set<EntityType<?>> entityTypeSet=this.metamodel.getEntities();
        String currentEntityName=null;
        for (        EntityType<?> entityTypeTemp : entityTypeSet) {
          if (entityTypeTemp.getJavaType().getName().endsWith(""String_Node_Str"" + entityName)) {
            currentEntityName=entityTypeTemp.getName();
            try {
              relatedClassMap.put(navigationProperty.getMapping().getInternalName(),entityTypeTemp.getJavaType());
              relatedData=entityTypeTemp.getJavaType().newInstance();
              break;
            }
 catch (            InstantiationException e) {
              throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
            }
catch (            IllegalAccessException e) {
              throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
            }
          }
        }
        if (relatedValues != null && relatedEntitySet != null) {
          relatedDataList.add(relatedData);
          parse2JPAEntityValueMap(relatedData,relatedEntitySet.getEntityType(),relatedValues.getProperties(),currentEntityName);
        }
 else         continue;
        createInlinedEntities(relatedData,relatedEntitySet,relatedValues,currentEntityName);
      }
    }
    relatedPropertyValueMap.put(navigationProperty.getMapping().getInternalName(),relatedDataList);
  }
  setNavigationProperties(jpaEntity,entitySet,relatedPropertyValueMap,jpaEntityName,relatedClassMap);
}",0.9448382126348228
17904,"private List<HashMap<?,?>> getSettersForNavigationProperties(Object jpaEntity,EdmEntitySet edmEntitySet,Map<String,Class<?>> relatedClassMap) throws ODataJPARuntimeException {
  List<HashMap<?,?>> mapList=new ArrayList<HashMap<?,?>>();
  HashMap<String,Method> setters=new HashMap<String,Method>();
  HashMap<String,EdmMultiplicity> multiplicityMap=new HashMap<String,EdmMultiplicity>();
  EdmEntityType edmEntityType=null;
  try {
    edmEntityType=edmEntitySet.getEntityType();
  }
 catch (  EdmException e2) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e2.getMessage()),e2);
  }
  try {
    for (    final String navigationPropertyName : edmEntityType.getNavigationPropertyNames()) {
      final EdmNavigationProperty navigationProperty=(EdmNavigationProperty)edmEntityType.getProperty(navigationPropertyName);
      String entityName=null;
      try {
        if (navigationProperty.getMapping() != null && navigationProperty.getMapping().getInternalName() != null) {
          entityName=navigationProperty.getMapping().getInternalName();
        }
 else {
          entityName=navigationProperty.getName();
        }
      }
 catch (      EdmException e1) {
        throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e1.getMessage()),e1);
      }
      String name=getSetterName(entityName);
      Class<?> propertyClass=null;
      if (navigationProperty.getMultiplicity() == EdmMultiplicity.MANY) {
        propertyClass=List.class;
        multiplicityMap.put(entityName,EdmMultiplicity.MANY);
      }
 else {
        propertyClass=relatedClassMap.get(entityName);
        multiplicityMap.put(entityName,EdmMultiplicity.ONE);
      }
      try {
        setters.put(entityName,jpaEntity.getClass().getDeclaredMethod(name,propertyClass));
      }
 catch (      NoSuchMethodException e) {
        throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
      }
catch (      SecurityException e) {
        throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
      }
    }
  }
 catch (  EdmException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
  mapList.add(0,setters);
  mapList.add(1,multiplicityMap);
  return mapList;
}","private List<HashMap<?,?>> getSettersForNavigationProperties(Object jpaEntity,EdmEntitySet edmEntitySet,Map<String,Class<?>> relatedClassMap) throws ODataJPARuntimeException {
  List<HashMap<?,?>> mapList=new ArrayList<HashMap<?,?>>();
  HashMap<String,Method> setters=new HashMap<String,Method>();
  HashMap<String,EdmMultiplicity> multiplicityMap=new HashMap<String,EdmMultiplicity>();
  EdmEntityType edmEntityType=null;
  try {
    edmEntityType=edmEntitySet.getEntityType();
  }
 catch (  EdmException e2) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e2.getMessage()),e2);
  }
  try {
    for (    final String navigationPropertyName : edmEntityType.getNavigationPropertyNames()) {
      final EdmNavigationProperty navigationProperty=(EdmNavigationProperty)edmEntityType.getProperty(navigationPropertyName);
      String entityName=null;
      try {
        if (navigationProperty.getMapping() != null && navigationProperty.getMapping().getInternalName() != null) {
          entityName=navigationProperty.getMapping().getInternalName();
        }
 else {
          entityName=navigationProperty.getName();
        }
      }
 catch (      EdmException e1) {
        throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e1.getMessage()),e1);
      }
      String name=getSetterName(entityName);
      Class<?> propertyClass=null;
      if (navigationProperty.getMultiplicity() == EdmMultiplicity.MANY) {
        propertyClass=List.class;
        multiplicityMap.put(entityName,EdmMultiplicity.MANY);
      }
 else {
        propertyClass=relatedClassMap.get(entityName);
        if (propertyClass == null)         continue;
        multiplicityMap.put(entityName,EdmMultiplicity.ONE);
      }
      try {
        setters.put(entityName,jpaEntity.getClass().getDeclaredMethod(name,propertyClass));
      }
 catch (      NoSuchMethodException e) {
        throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
      }
catch (      SecurityException e) {
        throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
      }
    }
  }
 catch (  EdmException e) {
    throw ODataJPARuntimeException.throwException(ODataJPARuntimeException.GENERAL.addContent(e.getMessage()),e);
  }
  mapList.add(0,setters);
  mapList.add(1,multiplicityMap);
  return mapList;
}",0.9891192773557792
17905,"private void appendCustomProperties(final XMLStreamWriter writer,final EntityInfoAggregator eia,final Map<String,Object> data) throws EntityProviderException {
  List<String> noneSyndicationTargetPaths=eia.getNoneSyndicationTargetPathNames();
  for (  String tpName : noneSyndicationTargetPaths) {
    EntityPropertyInfo info=eia.getTargetPathInfo(tpName);
    if (!isKeepInContent(info)) {
      XmlPropertyEntityProducer aps=new XmlPropertyEntityProducer();
      final String name=info.getName();
      aps.append(writer,name,info,data.get(name));
    }
  }
}","private void appendCustomProperties(final XMLStreamWriter writer,final EntityInfoAggregator eia,final Map<String,Object> data) throws EntityProviderException {
  List<String> noneSyndicationTargetPaths=eia.getNoneSyndicationTargetPathNames();
  for (  String tpName : noneSyndicationTargetPaths) {
    EntityPropertyInfo info=eia.getTargetPathInfo(tpName);
    final String name=info.getName();
    XmlPropertyEntityProducer aps=new XmlPropertyEntityProducer();
    aps.appendCustomProperty(writer,name,info,data.get(name));
  }
}",0.6813186813186813
17906,"/** 
 * @param writer
 * @param prop
 * @param name
 * @throws XMLStreamException
 */
private void writeStartElementWithCustomNamespace(final XMLStreamWriter writer,final EntityPropertyInfo prop,final String name) throws XMLStreamException {
  EdmCustomizableFeedMappings mapping=prop.getCustomMapping();
  String nsPrefix=mapping.getFcNsPrefix();
  String nsUri=mapping.getFcNsUri();
  writer.writeStartElement(nsPrefix,name,nsUri);
  writer.writeNamespace(nsPrefix,nsUri);
}","/** 
 * @param writer
 * @param prop
 * @param name
 * @throws XMLStreamException
 * @throws EntityProviderException
 */
private void writeStartElementWithCustomNamespace(final XMLStreamWriter writer,final EntityPropertyInfo prop,final String name) throws XMLStreamException, EntityProviderException {
  EdmCustomizableFeedMappings mapping=prop.getCustomMapping();
  String nsPrefix=mapping.getFcNsPrefix();
  String nsUri=mapping.getFcNsUri();
  if (nsUri == null || nsPrefix == null) {
    throw new EntityProviderException(EntityProviderException.INVALID_NAMESPACE.addContent(name));
  }
  writer.writeStartElement(nsPrefix,name,nsUri);
  writer.writeNamespace(nsPrefix,nsUri);
}",0.8117443868739206
17907,"/** 
 * Do the callback based on given parameters.
 * @param readProperties
 * @param navigationProperty
 * @param callback
 * @param isFeed
 * @param entry
 */
private void doCallback(final EntityProviderReadProperties readProperties,final EdmNavigationProperty navigationProperty,final OnReadInlineContent callback,boolean isFeed,Object entry){
  if (isFeed) {
    @SuppressWarnings(""String_Node_Str"") ReadFeedResult callbackInfo=new ReadFeedResult(readProperties,navigationProperty,(List<ODataEntry>)entry);
    callback.handleReadFeed(callbackInfo);
  }
 else {
    ReadEntryResult callbackInfo=new ReadEntryResult(readProperties,navigationProperty,(ODataEntry)entry);
    callback.handleReadEntry(callbackInfo);
  }
}","/** 
 * Do the callback based on given parameters.
 * @param readProperties
 * @param navigationProperty
 * @param callback
 * @param isFeed
 * @param entry
 */
private void doCallback(final EntityProviderReadProperties readProperties,final EdmNavigationProperty navigationProperty,final OnReadInlineContent callback,final boolean isFeed,final Object entry){
  if (isFeed) {
    @SuppressWarnings(""String_Node_Str"") ReadFeedResult callbackInfo=new ReadFeedResult(readProperties,navigationProperty,(List<ODataEntry>)entry);
    callback.handleReadFeed(callbackInfo);
  }
 else {
    ReadEntryResult callbackInfo=new ReadEntryResult(readProperties,navigationProperty,(ODataEntry)entry);
    callback.handleReadEntry(callbackInfo);
  }
}",0.9917582417582418
17908,"/** 
 * Create   {@link EntityProviderReadProperties} which can be used for reading of inline properties/entrys of navigation links withinthis current read entry.
 * @param readProperties
 * @param navigationProperty
 * @return
 */
private EntityProviderReadProperties createInlineProperties(final EntityProviderReadProperties readProperties,EdmNavigationProperty navigationProperty){
  final OnReadInlineContent callback=readProperties.getCallback();
  EntityProviderReadProperties currentReadProperties=EntityProviderReadProperties.initFrom(readProperties).addValidatedPrefixes(foundPrefix2NamespaceUri).build();
  if (callback == null) {
    return currentReadProperties;
  }
 else {
    return callback.receiveReadProperties(currentReadProperties,navigationProperty);
  }
}","/** 
 * Create   {@link EntityProviderReadProperties} which can be used for reading of inline properties/entrys of navigation links withinthis current read entry.
 * @param readProperties
 * @param navigationProperty
 * @return
 */
private EntityProviderReadProperties createInlineProperties(final EntityProviderReadProperties readProperties,final EdmNavigationProperty navigationProperty){
  final OnReadInlineContent callback=readProperties.getCallback();
  EntityProviderReadProperties currentReadProperties=EntityProviderReadProperties.initFrom(readProperties).addValidatedPrefixes(foundPrefix2NamespaceUri).build();
  if (callback == null) {
    return currentReadProperties;
  }
 else {
    return callback.receiveReadProperties(currentReadProperties,navigationProperty);
  }
}",0.9961538461538462
17909,"/** 
 * @param reader
 * @param eia
 * @param readProperties
 * @throws EntityProviderException
 * @throws XMLStreamException
 * @throws EdmException
 */
private void readLink(final XMLStreamReader reader,final EntityInfoAggregator eia,final EntityProviderReadProperties readProperties) throws EntityProviderException, XMLStreamException, EdmException {
  reader.require(XMLStreamConstants.START_ELEMENT,Edm.NAMESPACE_ATOM_2005,FormatXml.ATOM_LINK);
  final String rel=reader.getAttributeValue(null,FormatXml.ATOM_REL);
  final String uri=reader.getAttributeValue(null,FormatXml.ATOM_HREF);
  final String type=reader.getAttributeValue(null,FormatXml.ATOM_TYPE);
  final String etag=reader.getAttributeValue(Edm.NAMESPACE_M_2007_08,FormatXml.M_ETAG);
  reader.next();
  if (reader.isEndElement()) {
    reader.require(XMLStreamConstants.END_ELEMENT,Edm.NAMESPACE_ATOM_2005,FormatXml.ATOM_LINK);
    if (rel == null || uri == null) {
      throw new EntityProviderException(EntityProviderException.MISSING_ATTRIBUTE.addContent(FormatXml.ATOM_HREF + ""String_Node_Str"" + FormatXml.ATOM_REL).addContent(FormatXml.ATOM_LINK));
    }
 else     if (rel.startsWith(Edm.NAMESPACE_REL_2007_08)) {
      final String navigationPropertyName=rel.substring(Edm.NAMESPACE_REL_2007_08.length());
      entryMetadata.putAssociationUri(navigationPropertyName,uri);
    }
 else     if (rel.equals(Edm.LINK_REL_EDIT_MEDIA)) {
      mediaMetadata.setEditLink(uri);
      mediaMetadata.setEtag(etag);
    }
  }
 else {
    if (rel != null && rel.startsWith(Edm.NAMESPACE_REL_2007_08)) {
      readInlineContent(reader,eia,readProperties,type,rel);
    }
  }
}","/** 
 * @param reader
 * @param eia
 * @param readProperties
 * @throws EntityProviderException
 * @throws XMLStreamException
 * @throws EdmException
 */
private void readLink(final XMLStreamReader reader,final EntityInfoAggregator eia,final EntityProviderReadProperties readProperties) throws EntityProviderException, XMLStreamException, EdmException {
  reader.require(XMLStreamConstants.START_ELEMENT,Edm.NAMESPACE_ATOM_2005,FormatXml.ATOM_LINK);
  final String rel=reader.getAttributeValue(null,FormatXml.ATOM_REL);
  final String uri=reader.getAttributeValue(null,FormatXml.ATOM_HREF);
  final String type=reader.getAttributeValue(null,FormatXml.ATOM_TYPE);
  final String etag=reader.getAttributeValue(Edm.NAMESPACE_M_2007_08,FormatXml.M_ETAG);
  reader.nextTag();
  if (reader.isEndElement()) {
    reader.require(XMLStreamConstants.END_ELEMENT,Edm.NAMESPACE_ATOM_2005,FormatXml.ATOM_LINK);
    if (rel == null || uri == null) {
      throw new EntityProviderException(EntityProviderException.MISSING_ATTRIBUTE.addContent(FormatXml.ATOM_HREF + ""String_Node_Str"" + FormatXml.ATOM_REL).addContent(FormatXml.ATOM_LINK));
    }
 else     if (rel.startsWith(Edm.NAMESPACE_REL_2007_08)) {
      final String navigationPropertyName=rel.substring(Edm.NAMESPACE_REL_2007_08.length());
      entryMetadata.putAssociationUri(navigationPropertyName,uri);
    }
 else     if (rel.equals(Edm.LINK_REL_EDIT_MEDIA)) {
      mediaMetadata.setEditLink(uri);
      mediaMetadata.setEtag(etag);
    }
  }
 else {
    if (rel != null && rel.startsWith(Edm.NAMESPACE_REL_2007_08)) {
      readInlineContent(reader,eia,readProperties,type,rel);
    }
  }
}",0.999084528532194
17910,"/** 
 * Check whether it is an inline <code>Feed</code> or <code>Entry</code> and validate that... <ul> <li>...  {@link FormatXml#M_INLINE} tag is correctly set.</li><li>...based on  {@link EdmMultiplicity} of {@link EdmNavigationProperty} all tags are correctly set.</li><li>... {@link FormatXml#ATOM_TYPE} tag is correctly set and according to {@link FormatXml#ATOM_ENTRY} or {@link FormatXml#ATOM_FEED} to following tags are available.</li></ul> For the case that one of above validations fail an  {@link EntityProviderException} is thrown.If validation was successful <code>true</code> is returned for <code>Feed</code> and <code>false</code> for <code>Entry</code> multiplicity.
 * @param reader xml content
 * @param edmEntitySet 
 * @param linkAttributes attributes of parent <code>link</code> tag
 * @return <code>true</code> for <code>Feed</code> and <code>false</code> for <code>Entry</code>
 * @throws EntityProviderException is thrown if at least one validation fails.
 * @throws EdmException if edm access fails
 */
private boolean isInlineFeedValidated(final XMLStreamReader reader,final EntityInfoAggregator eia,final String type,String navigationPropertyName) throws EntityProviderException, EdmException {
  boolean isFeed=false;
  try {
    reader.nextTag();
    reader.require(XMLStreamConstants.START_ELEMENT,Edm.NAMESPACE_M_2007_08,FormatXml.M_INLINE);
    ContentType cType=ContentType.parse(type);
    if (cType == null) {
      throw new EntityProviderException(EntityProviderException.INVALID_INLINE_CONTENT.addContent(""String_Node_Str""));
    }
    EdmNavigationProperty navigationProperty=(EdmNavigationProperty)eia.getEntityType().getProperty(navigationPropertyName);
    EdmMultiplicity navigationMultiplicity=navigationProperty.getMultiplicity();
switch (navigationMultiplicity) {
case MANY:
      validateFeedTags(reader,cType);
    isFeed=true;
  break;
case ONE:
case ZERO_TO_ONE:
validateEntryTags(reader,cType);
break;
}
}
 catch (XMLStreamException e) {
throw new EntityProviderException(EntityProviderException.INVALID_INLINE_CONTENT.addContent(""String_Node_Str""),e);
}
return isFeed;
}","/** 
 * <p> Inline content was found and   {@link XMLStreamReader} already points to <code><m:inline> tag</code>.<br/> <b>ATTENTION</b>: If  {@link XMLStreamReader} does not point to the <code><m:inline> tag</code> an exception is thrown.</p> <p> Check whether it is an inline <code>Feed</code> or <code>Entry</code> and validate that... <ul> <li>... {@link FormatXml#M_INLINE} tag is correctly set.</li><li>...based on  {@link EdmMultiplicity} of {@link EdmNavigationProperty} all tags are correctly set.</li><li>... {@link FormatXml#ATOM_TYPE} tag is correctly set and according to {@link FormatXml#ATOM_ENTRY} or {@link FormatXml#ATOM_FEED} to following tags are available.</li></ul> For the case that one of above validations fail an  {@link EntityProviderException} is thrown.If validation was successful <code>true</code> is returned for <code>Feed</code> and <code>false</code> for <code>Entry</code> multiplicity. </p>
 * @param reader xml content reader which already points to <code><m:inline> tag</code>
 * @param eia all necessary information about the entity 
 * @param type the atom type attribute value of the <code>link</code> tag
 * @param navigationPropertyName the navigation property name of the entity
 * @return <code>true</code> for <code>Feed</code> and <code>false</code> for <code>Entry</code>
 * @throws EntityProviderException is thrown if at least one validation fails.
 * @throws EdmException if edm access fails
 */
private boolean isInlineFeedValidated(final XMLStreamReader reader,final EntityInfoAggregator eia,final String type,String navigationPropertyName) throws EntityProviderException, EdmException {
  boolean isFeed=false;
  try {
    reader.require(XMLStreamConstants.START_ELEMENT,Edm.NAMESPACE_M_2007_08,FormatXml.M_INLINE);
    ContentType cType=ContentType.parse(type);
    if (cType == null) {
      throw new EntityProviderException(EntityProviderException.INVALID_INLINE_CONTENT.addContent(""String_Node_Str""));
    }
    EdmNavigationProperty navigationProperty=(EdmNavigationProperty)eia.getEntityType().getProperty(navigationPropertyName);
    EdmMultiplicity navigationMultiplicity=navigationProperty.getMultiplicity();
switch (navigationMultiplicity) {
case MANY:
      validateFeedTags(reader,cType);
    isFeed=true;
  break;
case ONE:
case ZERO_TO_ONE:
validateEntryTags(reader,cType);
break;
}
}
 catch (XMLStreamException e) {
throw new EntityProviderException(EntityProviderException.INVALID_INLINE_CONTENT.addContent(""String_Node_Str""),e);
}
return isFeed;
}",0.8888410168031021
17911,"/** 
 * Updates the read properties (  {@link #properties}) for this   {@link ReadEntryResult} ({@link #readEntryResult}).
 * @param readProperties
 * @param navigationPropertyName
 * @param navigationProperty
 * @param isFeed
 * @param inlineEntries
 */
private void updateReadProperties(final EntityProviderReadProperties readProperties,String navigationPropertyName,EdmNavigationProperty navigationProperty,boolean isFeed,List<ODataEntry> inlineEntries){
  Object entry=extractODataEntity(isFeed,inlineEntries);
  OnReadInlineContent callback=readProperties.getCallback();
  if (callback == null) {
    readEntryResult.setContainsInlineEntry(true);
    properties.put(navigationPropertyName,entry);
  }
 else {
    doCallback(readProperties,navigationProperty,callback,isFeed,entry);
  }
}","/** 
 * Updates the read properties (  {@link #properties}) for this   {@link ReadEntryResult} ({@link #readEntryResult}).
 * @param readProperties
 * @param navigationPropertyName
 * @param navigationProperty
 * @param isFeed
 * @param inlineEntries
 */
private void updateReadProperties(final EntityProviderReadProperties readProperties,final String navigationPropertyName,final EdmNavigationProperty navigationProperty,final boolean isFeed,final List<ODataEntry> inlineEntries){
  Object entry=extractODataEntity(isFeed,inlineEntries);
  OnReadInlineContent callback=readProperties.getCallback();
  if (callback == null) {
    readEntryResult.setContainsInlineEntry(true);
    properties.put(navigationPropertyName,entry);
  }
 else {
    doCallback(readProperties,navigationProperty,callback,isFeed,entry);
  }
}",0.9850746268656716
17912,"/** 
 * @param reader
 * @param eia
 * @param readProperties
 * @param atomLinkType
 * @param atomLinkRel
 * @throws XMLStreamException
 * @throws EntityProviderException
 * @throws EdmException
 */
private void readInlineContent(final XMLStreamReader reader,final EntityInfoAggregator eia,final EntityProviderReadProperties readProperties,final String atomLinkType,final String atomLinkRel) throws XMLStreamException, EntityProviderException, EdmException {
  String navigationPropertyName=atomLinkRel.substring(Edm.NAMESPACE_REL_2007_08.length());
  EdmNavigationProperty navigationProperty=(EdmNavigationProperty)eia.getEntityType().getProperty(navigationPropertyName);
  EdmEntitySet entitySet=eia.getEntitySet().getRelatedEntitySet(navigationProperty);
  EntityInfoAggregator inlineEia=EntityInfoAggregator.create(entitySet);
  final EntityProviderReadProperties inlineProperties=createInlineProperties(readProperties,navigationProperty);
  boolean isFeed=isInlineFeedValidated(reader,eia,atomLinkType,navigationPropertyName);
  List<ODataEntry> inlineEntries=new ArrayList<ODataEntry>();
  while (!(reader.isEndElement() && Edm.NAMESPACE_M_2007_08.equals(reader.getNamespaceURI()) && FormatXml.M_INLINE.equals(reader.getLocalName()))) {
    if (reader.isStartElement() && Edm.NAMESPACE_ATOM_2005.equals(reader.getNamespaceURI()) && FormatXml.ATOM_ENTRY.equals(reader.getLocalName())) {
      XmlEntryConsumer xec=new XmlEntryConsumer();
      ODataEntry inlineEntry=xec.readEntry(reader,inlineEia,inlineProperties);
      inlineEntries.add(inlineEntry);
    }
    reader.next();
  }
  updateExpandSelectTree(navigationPropertyName,inlineEntries);
  updateReadProperties(readProperties,navigationPropertyName,navigationProperty,isFeed,inlineEntries);
  reader.require(XMLStreamConstants.END_ELEMENT,Edm.NAMESPACE_M_2007_08,FormatXml.M_INLINE);
}","/** 
 * Inline content was found and   {@link XMLStreamReader} already points to <m:inline> tag.
 * @param reader
 * @param eia
 * @param readProperties
 * @param atomLinkType the atom <code>type</code> attribute value of the <code>link</code> tag
 * @param atomLinkRel the atom <code>rel</code> attribute value of the <code>link</code> tag
 * @throws XMLStreamException
 * @throws EntityProviderException
 * @throws EdmException
 */
private void readInlineContent(final XMLStreamReader reader,final EntityInfoAggregator eia,final EntityProviderReadProperties readProperties,final String atomLinkType,final String atomLinkRel) throws XMLStreamException, EntityProviderException, EdmException {
  String navigationPropertyName=atomLinkRel.substring(Edm.NAMESPACE_REL_2007_08.length());
  EdmNavigationProperty navigationProperty=(EdmNavigationProperty)eia.getEntityType().getProperty(navigationPropertyName);
  EdmEntitySet entitySet=eia.getEntitySet().getRelatedEntitySet(navigationProperty);
  EntityInfoAggregator inlineEia=EntityInfoAggregator.create(entitySet);
  final EntityProviderReadProperties inlineProperties=createInlineProperties(readProperties,navigationProperty);
  boolean isFeed=isInlineFeedValidated(reader,eia,atomLinkType,navigationPropertyName);
  List<ODataEntry> inlineEntries=new ArrayList<ODataEntry>();
  while (!(reader.isEndElement() && Edm.NAMESPACE_M_2007_08.equals(reader.getNamespaceURI()) && FormatXml.M_INLINE.equals(reader.getLocalName()))) {
    if (reader.isStartElement() && Edm.NAMESPACE_ATOM_2005.equals(reader.getNamespaceURI()) && FormatXml.ATOM_ENTRY.equals(reader.getLocalName())) {
      XmlEntryConsumer xec=new XmlEntryConsumer();
      ODataEntry inlineEntry=xec.readEntry(reader,inlineEia,inlineProperties);
      inlineEntries.add(inlineEntry);
    }
    reader.next();
  }
  updateExpandSelectTree(navigationPropertyName,inlineEntries);
  updateReadProperties(readProperties,navigationPropertyName,navigationProperty,isFeed,inlineEntries);
  reader.require(XMLStreamConstants.END_ELEMENT,Edm.NAMESPACE_M_2007_08,FormatXml.M_INLINE);
}",0.940279542566709
17913,"@Test public void readWithInlineContentEmployeeRoomEntry() throws Exception {
  EdmEntitySet entitySet=MockFacade.getMockEdm().getDefaultEntityContainer().getEntitySet(""String_Node_Str"");
  InputStream reqContent=createContentAsStream(EMPLOYEE_1_ROOM_XML);
  XmlEntityConsumer xec=new XmlEntityConsumer();
  ODataEntry entry=xec.readEntry(entitySet,reqContent,EntityProviderReadProperties.init().mergeSemantic(true).build());
  assertNotNull(entry);
  Map<String,Object> properties=entry.getProperties();
  assertEquals(""String_Node_Str"",properties.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",properties.get(""String_Node_Str""));
  ODataEntry room=(ODataEntry)properties.get(""String_Node_Str"");
  Map<String,Object> roomProperties=room.getProperties();
  assertEquals(4,roomProperties.size());
  assertEquals(""String_Node_Str"",roomProperties.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",roomProperties.get(""String_Node_Str""));
  assertEquals(Short.valueOf(""String_Node_Str""),roomProperties.get(""String_Node_Str""));
  assertEquals(Short.valueOf(""String_Node_Str""),roomProperties.get(""String_Node_Str""));
}","/** 
 * Read an inline Room at an Employee
 * @throws Exception
 */
@Test public void readWithInlineContentEmployeeRoomEntry() throws Exception {
  EdmEntitySet entitySet=MockFacade.getMockEdm().getDefaultEntityContainer().getEntitySet(""String_Node_Str"");
  InputStream reqContent=createContentAsStream(EMPLOYEE_1_ROOM_XML);
  XmlEntityConsumer xec=new XmlEntityConsumer();
  ODataEntry entry=xec.readEntry(entitySet,reqContent,EntityProviderReadProperties.init().mergeSemantic(true).build());
  assertNotNull(entry);
  Map<String,Object> properties=entry.getProperties();
  assertEquals(""String_Node_Str"",properties.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",properties.get(""String_Node_Str""));
  ODataEntry room=(ODataEntry)properties.get(""String_Node_Str"");
  Map<String,Object> roomProperties=room.getProperties();
  assertEquals(4,roomProperties.size());
  assertEquals(""String_Node_Str"",roomProperties.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",roomProperties.get(""String_Node_Str""));
  assertEquals(Short.valueOf(""String_Node_Str""),roomProperties.get(""String_Node_Str""));
  assertEquals(Short.valueOf(""String_Node_Str""),roomProperties.get(""String_Node_Str""));
}",0.9707903780068728
17914,"private InputStream createContentAsStream(final String xml) throws UnsupportedEncodingException {
  return new ByteArrayInputStream(xml.getBytes(""String_Node_Str""));
}","/** 
 * @param xml
 * @param replaceWhitespaces if <code>true</code> all XML not necessary whitespaces between tags are
 * @return
 * @throws UnsupportedEncodingException
 */
private InputStream createContentAsStream(final String xml,boolean replaceWhitespaces) throws UnsupportedEncodingException {
  String contentForStream=xml;
  if (replaceWhitespaces) {
    contentForStream=xml.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  LOG.info(""String_Node_Str"" + contentForStream + ""String_Node_Str"");
  return new ByteArrayInputStream(contentForStream.getBytes(""String_Node_Str""));
}",0.4338624338624338
17915,"private void appendCustomProperties(final XMLStreamWriter writer,final EntityInfoAggregator eia,final Map<String,Object> data) throws EntityProviderException {
  List<String> noneSyndicationTargetPaths=eia.getNoneSyndicationTargetPathNames();
  for (  String tpName : noneSyndicationTargetPaths) {
    EntityPropertyInfo info=eia.getTargetPathInfo(tpName);
    if (!isKeepInContent(info)) {
      XmlPropertyEntityProducer aps=new XmlPropertyEntityProducer();
      final String name=info.getName();
      aps.append(writer,name,info,data.get(name));
    }
  }
}","private void appendCustomProperties(final XMLStreamWriter writer,final EntityInfoAggregator eia,final Map<String,Object> data) throws EntityProviderException {
  List<String> noneSyndicationTargetPaths=eia.getNoneSyndicationTargetPathNames();
  for (  String tpName : noneSyndicationTargetPaths) {
    EntityPropertyInfo info=eia.getTargetPathInfo(tpName);
    final String name=info.getName();
    XmlPropertyEntityProducer aps=new XmlPropertyEntityProducer();
    aps.appendCustomProperty(writer,name,info,data.get(name));
  }
}",0.6813186813186813
17916,"/** 
 * @param writer
 * @param prop
 * @param name
 * @throws XMLStreamException
 */
private void writeStartElementWithCustomNamespace(final XMLStreamWriter writer,final EntityPropertyInfo prop,final String name) throws XMLStreamException {
  EdmCustomizableFeedMappings mapping=prop.getCustomMapping();
  String nsPrefix=mapping.getFcNsPrefix();
  String nsUri=mapping.getFcNsUri();
  writer.writeStartElement(nsPrefix,name,nsUri);
  writer.writeNamespace(nsPrefix,nsUri);
}","/** 
 * @param writer
 * @param prop
 * @param name
 * @throws XMLStreamException
 * @throws EntityProviderException
 */
private void writeStartElementWithCustomNamespace(final XMLStreamWriter writer,final EntityPropertyInfo prop,final String name) throws XMLStreamException, EntityProviderException {
  EdmCustomizableFeedMappings mapping=prop.getCustomMapping();
  String nsPrefix=mapping.getFcNsPrefix();
  String nsUri=mapping.getFcNsUri();
  if (nsUri == null || nsPrefix == null) {
    throw new EntityProviderException(EntityProviderException.INVALID_NAMESPACE.addContent(name));
  }
  writer.writeStartElement(nsPrefix,name,nsUri);
  writer.writeNamespace(nsPrefix,nsUri);
}",0.8117443868739206
17917,"/** 
 * Skip the tag to which the   {@link XMLStreamReader} currently points.Therefore it is read until an end element tag with current local name is found.
 * @param reader
 * @throws XMLStreamException
 */
private void skipStartedTag(XMLStreamReader reader) throws XMLStreamException {
  final String name=reader.getLocalName();
  boolean read=reader.hasNext();
  while (read) {
    reader.next();
    if (reader.hasName()) {
      read=!(reader.isEndElement() && name.equals(reader.getLocalName()));
    }
  }
}","/** 
 * Skip the tag to which the   {@link XMLStreamReader} currently points.Therefore it is read until an end element tag with current local name is found.
 * @param reader
 * @throws XMLStreamException
 */
private void skipStartedTag(XMLStreamReader reader) throws XMLStreamException {
  final String name=reader.getLocalName();
  int read=1;
  while (read > 0 && reader.hasNext()) {
    reader.next();
    if (reader.hasName() && name.equals(reader.getLocalName())) {
      if (reader.isEndElement()) {
        read--;
      }
 else       if (reader.isStartElement()) {
        read++;
      }
    }
  }
}",0.7237076648841355
17918,"/** 
 * Check whether it is an inline <code>Feed</code> or <code>Entry</code> and validate that... <ul> <li>...  {@link FormatXml#M_INLINE} tag is correctly set.</li><li>...based on  {@link EdmMultiplicity} of {@link EdmNavigationProperty} all tags are correctly set.</li><li>... {@link FormatXml#ATOM_TYPE} tag is correctly set and according to {@link FormatXml#ATOM_ENTRY} or {@link FormatXml#ATOM_FEED} to following tags are available.</li></ul> For the case that one of above validations fail an  {@link EntityProviderException} is thrown.If validation was successful <code>true</code> is returned for <code>Feed</code> and <code>false</code> for <code>Entry</code> multiplicity.
 * @param reader xml content
 * @param edmEntitySet 
 * @param linkAttributes attributes of parent <code>link</code> tag
 * @return <code>true</code> for <code>Feed</code> and <code>false</code> for <code>Entry</code>
 * @throws EntityProviderException is thrown if at least one validation fails.
 * @throws EdmException if edm access fails
 */
private boolean isInlineFeedValidated(final XMLStreamReader reader,final EntityInfoAggregator eia,final Map<String,String> linkAttributes) throws EntityProviderException, EdmException {
  boolean isFeed=false;
  try {
    reader.nextTag();
    reader.require(XMLStreamConstants.START_ELEMENT,Edm.NAMESPACE_M_2007_08,FormatXml.M_INLINE);
    String type=linkAttributes.get(FormatXml.ATOM_TYPE);
    ContentType cType=ContentType.parse(type);
    if (cType == null) {
      throw new EntityProviderException(EntityProviderException.INVALID_INLINE_CONTENT.addContent(""String_Node_Str""));
    }
    String rel=linkAttributes.get(FormatXml.ATOM_REL);
    String navigationPropertyName=rel.substring(Edm.NAMESPACE_REL_2007_08.length());
    EdmNavigationProperty navigationProperty=(EdmNavigationProperty)eia.getEntityType().getProperty(navigationPropertyName);
    EdmMultiplicity navigationMultiplicity=navigationProperty.getMultiplicity();
switch (navigationMultiplicity) {
case MANY:
      validateFeedTags(reader,cType);
    isFeed=true;
  break;
case ONE:
case ZERO_TO_ONE:
validateEntryTags(reader,cType);
break;
}
}
 catch (XMLStreamException e) {
throw new EntityProviderException(EntityProviderException.INVALID_INLINE_CONTENT.addContent(""String_Node_Str""));
}
return isFeed;
}","/** 
 * Check whether it is an inline <code>Feed</code> or <code>Entry</code> and validate that... <ul> <li>...  {@link FormatXml#M_INLINE} tag is correctly set.</li><li>...based on  {@link EdmMultiplicity} of {@link EdmNavigationProperty} all tags are correctly set.</li><li>... {@link FormatXml#ATOM_TYPE} tag is correctly set and according to {@link FormatXml#ATOM_ENTRY} or {@link FormatXml#ATOM_FEED} to following tags are available.</li></ul> For the case that one of above validations fail an  {@link EntityProviderException} is thrown.If validation was successful <code>true</code> is returned for <code>Feed</code> and <code>false</code> for <code>Entry</code> multiplicity.
 * @param reader xml content
 * @param edmEntitySet 
 * @param linkAttributes attributes of parent <code>link</code> tag
 * @return <code>true</code> for <code>Feed</code> and <code>false</code> for <code>Entry</code>
 * @throws EntityProviderException is thrown if at least one validation fails.
 * @throws EdmException if edm access fails
 */
private boolean isInlineFeedValidated(final XMLStreamReader reader,final EntityInfoAggregator eia,final Map<String,String> linkAttributes) throws EntityProviderException, EdmException {
  boolean isFeed=false;
  try {
    reader.nextTag();
    reader.require(XMLStreamConstants.START_ELEMENT,Edm.NAMESPACE_M_2007_08,FormatXml.M_INLINE);
    String type=linkAttributes.get(FormatXml.ATOM_TYPE);
    ContentType cType=ContentType.parse(type);
    if (cType == null) {
      throw new EntityProviderException(EntityProviderException.INVALID_INLINE_CONTENT.addContent(""String_Node_Str""));
    }
    String rel=linkAttributes.get(FormatXml.ATOM_REL);
    String navigationPropertyName=rel.substring(Edm.NAMESPACE_REL_2007_08.length());
    EdmNavigationProperty navigationProperty=(EdmNavigationProperty)eia.getEntityType().getProperty(navigationPropertyName);
    EdmMultiplicity navigationMultiplicity=navigationProperty.getMultiplicity();
switch (navigationMultiplicity) {
case MANY:
      validateFeedTags(reader,cType);
    isFeed=true;
  break;
case ONE:
case ZERO_TO_ONE:
validateEntryTags(reader,cType);
break;
}
}
 catch (XMLStreamException e) {
throw new EntityProviderException(EntityProviderException.INVALID_INLINE_CONTENT.addContent(""String_Node_Str""),e);
}
return isFeed;
}",0.9995672868887928
17919,"public static void crossProcessLockAcquire(final Class<?> c,final long waitMS){
  RandomAccessFile randomAccessFile=null;
  if ((fileLock == null) && (c != null) && (waitMS > 0)) {
    try {
      final long dropDeadTime=System.currentTimeMillis() + waitMS;
      final File file=new File(lockTempDir,c.getName() + ""String_Node_Str"");
      randomAccessFile=new RandomAccessFile(file,""String_Node_Str"");
      final FileChannel fileChannel=randomAccessFile.getChannel();
      while (System.currentTimeMillis() < dropDeadTime) {
        fileLock=fileChannel.tryLock();
        if (fileLock != null) {
          break;
        }
        Thread.sleep(250);
      }
    }
 catch (    final Exception e) {
      throw new RuntimeException(e);
    }
  }
  if (fileLock == null) {
    throw new RuntimeException(""String_Node_Str"" + waitMS);
  }
}","public static void crossProcessLockAcquire(final Class<?> c,final long waitMS){
  RandomAccessFile randomAccessFile=null;
  if ((fileLock == null) && (c != null) && (waitMS > 0)) {
    try {
      final long dropDeadTime=System.currentTimeMillis() + waitMS;
      final File file=new File(lockTempDir,c.getName() + ""String_Node_Str"");
      randomAccessFile=new RandomAccessFile(file,""String_Node_Str"");
      final FileChannel fileChannel=randomAccessFile.getChannel();
      while (System.currentTimeMillis() < dropDeadTime) {
        fileLock=fileChannel.tryLock();
        if (fileLock != null) {
          break;
        }
        Thread.sleep(250);
      }
    }
 catch (    final Exception e) {
      throw new RuntimeException(e);
    }
  }
  if (fileLock == null) {
    throw new ProcessLockerRuntimeException(""String_Node_Str"" + waitMS);
  }
}",0.9923213230950976
17920,"public static void crossProcessLockRelease(){
  if (fileLock != null) {
    try {
      fileLock.release();
      fileLock=null;
    }
 catch (    final IOException e) {
      throw new RuntimeException(e);
    }
  }
}","public static void crossProcessLockRelease(){
  if (fileLock != null) {
    try {
      fileLock.release();
      fileLock=null;
    }
 catch (    final IOException e) {
      throw new ProcessLockerRuntimeException(e);
    }
  }
}",0.9710467706013364
17921,"public void stopServer(){
  try {
    if (server != null) {
      FitStaticServiceFactory.unbindService(this);
      server.stop();
      log.trace(""String_Node_Str"" + getEndpoint().toASCIIString());
    }
  }
 catch (  final Exception e) {
    throw new ServerException(e);
  }
}","public void stopServer(){
  try {
    if (server != null) {
      FitStaticServiceFactory.unbindService(this);
      server.stop();
      log.trace(""String_Node_Str"" + getEndpoint().toASCIIString());
    }
  }
 catch (  final Exception e) {
    throw new ServerRuntimeException(e);
  }
}",0.9876543209876544
17922,"private void appendAtomMandatoryParts(final XMLStreamWriter writer,final EntityInfoAggregator eia,final Map<String,Object> data) throws EntityProviderException {
  try {
    writer.writeStartElement(FormatXml.ATOM_ID);
    location=properties.getServiceRoot().toASCIIString() + createSelfLink(eia,data,null);
    writer.writeCharacters(location);
    writer.writeEndElement();
    writer.writeStartElement(FormatXml.ATOM_TITLE);
    writer.writeAttribute(FormatXml.M_TYPE,""String_Node_Str"");
    EntityPropertyInfo titleInfo=eia.getTargetPathInfo(EdmTargetPath.SYNDICATION_TITLE);
    if (titleInfo != null) {
      EdmSimpleType st=(EdmSimpleType)titleInfo.getType();
      Object object=data.get(titleInfo.getName());
      String title=st.valueToString(object,EdmLiteralKind.DEFAULT,titleInfo.getFacets());
      writer.writeCharacters(title);
    }
 else {
      writer.writeCharacters(eia.getEntitySetName());
    }
    writer.writeEndElement();
    writer.writeStartElement(FormatXml.ATOM_UPDATED);
    Object updateDate=null;
    EdmFacets updateFacets=null;
    EntityPropertyInfo updatedInfo=eia.getTargetPathInfo(EdmTargetPath.SYNDICATION_UPDATED);
    if (updatedInfo != null) {
      updateDate=data.get(updatedInfo.getName());
      if (updateDate != null) {
        updateFacets=updatedInfo.getFacets();
      }
    }
    if (updateDate == null) {
      updateDate=new Date();
    }
    writer.writeCharacters(EdmDateTimeOffset.getInstance().valueToString(updateDate,EdmLiteralKind.DEFAULT,updateFacets));
    writer.writeEndElement();
  }
 catch (  XMLStreamException e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
catch (  EdmSimpleTypeException e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
}","private void appendAtomMandatoryParts(final XMLStreamWriter writer,final EntityInfoAggregator eia,final Map<String,Object> data) throws EntityProviderException {
  try {
    writer.writeStartElement(FormatXml.ATOM_ID);
    location=properties.getServiceRoot().toASCIIString() + createSelfLink(eia,data,null);
    writer.writeCharacters(location);
    writer.writeEndElement();
    writer.writeStartElement(FormatXml.ATOM_TITLE);
    writer.writeAttribute(FormatXml.M_TYPE,""String_Node_Str"");
    EntityPropertyInfo titleInfo=eia.getTargetPathInfo(EdmTargetPath.SYNDICATION_TITLE);
    if (titleInfo != null) {
      EdmSimpleType st=(EdmSimpleType)titleInfo.getType();
      Object object=data.get(titleInfo.getName());
      String title=st.valueToString(object,EdmLiteralKind.DEFAULT,titleInfo.getFacets());
      if (title != null) {
        writer.writeCharacters(title);
      }
    }
 else {
      writer.writeCharacters(eia.getEntitySetName());
    }
    writer.writeEndElement();
    writer.writeStartElement(FormatXml.ATOM_UPDATED);
    Object updateDate=null;
    EdmFacets updateFacets=null;
    EntityPropertyInfo updatedInfo=eia.getTargetPathInfo(EdmTargetPath.SYNDICATION_UPDATED);
    if (updatedInfo != null) {
      updateDate=data.get(updatedInfo.getName());
      if (updateDate != null) {
        updateFacets=updatedInfo.getFacets();
      }
    }
    if (updateDate == null) {
      updateDate=new Date();
    }
    writer.writeCharacters(EdmDateTimeOffset.getInstance().valueToString(updateDate,EdmLiteralKind.DEFAULT,updateFacets));
    writer.writeEndElement();
  }
 catch (  XMLStreamException e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
catch (  EdmSimpleTypeException e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
}",0.989713650264109
17923,"@Before public void before(){
  try {
    service=createService();
    server.startServer(service);
  }
 catch (  final ODataException e) {
    throw new TestUtilException(e);
  }
}","@Before public void before(){
  try {
    service=createService();
    server.startServer(service);
  }
 catch (  final ODataException e) {
    throw new TestUtilRuntimeException(e);
  }
}",0.981029810298103
17924,"@After public void after(){
  try {
    server.stopServer();
  }
 catch (  final Exception e) {
    throw new TestUtilException(e);
  }
}","@After public void after(){
  try {
    server.stopServer();
  }
 catch (  final Exception e) {
    throw new TestUtilRuntimeException(e);
  }
}",0.9750889679715302
17925,"public static void crossProcessLockAcquire(final Class<?> c,final long waitMS){
  RandomAccessFile randomAccessFile=null;
  if ((fileLock == null) && (c != null) && (waitMS > 0)) {
    try {
      final long dropDeadTime=System.currentTimeMillis() + waitMS;
      final File file=new File(lockTempDir,c.getName() + ""String_Node_Str"");
      randomAccessFile=new RandomAccessFile(file,""String_Node_Str"");
      final FileChannel fileChannel=randomAccessFile.getChannel();
      while (System.currentTimeMillis() < dropDeadTime) {
        fileLock=fileChannel.tryLock();
        if (fileLock != null) {
          break;
        }
        Thread.sleep(250);
      }
    }
 catch (    final Exception e) {
      throw new RuntimeException(e);
    }
  }
  if (fileLock == null) {
    throw new ProcessLockerRuntimeException(""String_Node_Str"" + waitMS);
  }
}","public static void crossProcessLockAcquire(final Class<?> c,final long waitMS){
  RandomAccessFile randomAccessFile=null;
  if ((fileLock == null) && (c != null) && (waitMS > 0)) {
    try {
      final long dropDeadTime=System.currentTimeMillis() + waitMS;
      final File file=new File(lockTempDir,c.getName() + ""String_Node_Str"");
      randomAccessFile=new RandomAccessFile(file,""String_Node_Str"");
      final FileChannel fileChannel=randomAccessFile.getChannel();
      while (System.currentTimeMillis() < dropDeadTime) {
        fileLock=fileChannel.tryLock();
        if (fileLock != null) {
          break;
        }
        Thread.sleep(250);
      }
    }
 catch (    final Exception e) {
      throw new TestUtilRuntimeException(e);
    }
  }
  if (fileLock == null) {
    throw new TestUtilRuntimeException(""String_Node_Str"" + waitMS);
  }
}",0.9830310122878876
17926,"public static void crossProcessLockRelease(){
  if (fileLock != null) {
    try {
      fileLock.release();
      fileLock=null;
    }
 catch (    final IOException e) {
      throw new ProcessLockerRuntimeException(e);
    }
  }
}","public static void crossProcessLockRelease(){
  if (fileLock != null) {
    try {
      fileLock.release();
      fileLock=null;
    }
 catch (    final IOException e) {
      throw new TestUtilRuntimeException(e);
    }
  }
}",0.9540481400437636
17927,"/** 
 * simple main to start the tool
 * @param args not used
 */
public static void main(final String[] args) throws Exception {
  activateLoggingToJiraMarkupFile(ACCEPT_HEADER_REQUEST_JIRA_FILENAME);
  final List<String> paths=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  final List<String> headerValues=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  final List<TestPath> testPaths=TestPath.createTestPaths(paths,headerValues);
  final CallerResultHandler handler=new CallerResultHandler();
  final String localBaseUrl=""String_Node_Str"";
  final CallerConfig localConfig=new CallerConfig(localBaseUrl,handler,testPaths);
  AcceptHeaderCaller.create(localConfig).call();
  final String result=handler.getResult();
  LOG.info(""String_Node_Str"" + new SimpleDateFormat().format(new Date()) + ""String_Node_Str"");
  LOG.info(result);
}","/** 
 * simple main to start the tool
 * @param args not used
 */
public static void main(final String[] args){
  try {
    activateLoggingToJiraMarkupFile(ACCEPT_HEADER_REQUEST_JIRA_FILENAME);
    final List<String> paths=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    final List<String> headerValues=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    final List<TestPath> testPaths=TestPath.createTestPaths(paths,headerValues);
    final CallerResultHandler handler=new CallerResultHandler();
    final String localBaseUrl=""String_Node_Str"";
    final CallerConfig localConfig=new CallerConfig(localBaseUrl,handler,testPaths);
    AcceptHeaderCaller.create(localConfig).call();
    final String result=handler.getResult();
    LOG.info(""String_Node_Str"" + new SimpleDateFormat().format(new Date()) + ""String_Node_Str"");
    LOG.info(result);
  }
 catch (  Exception e) {
    throw new TestUtilRuntimeException(e);
  }
}",0.9549745824255628
17928,"private void initProxy() throws IllegalArgumentException {
  final String proxyUrl=config.getProxy();
  final String[] hostAndPort=proxyUrl.split(""String_Node_Str"");
  if (hostAndPort.length != 2) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String host=hostAndPort[0];
  int port;
  try {
    port=Integer.parseInt(hostAndPort[1]);
  }
 catch (  final NumberFormatException e) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final HttpHost proxy=new HttpHost(host,port);
  LOG.info(""String_Node_Str"",proxy.getHostName(),proxy.getPort());
  httpClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,proxy);
}","private void initProxy() throws IllegalArgumentException {
  final String proxyUrl=config.getProxy();
  final String[] hostAndPort=proxyUrl.split(""String_Node_Str"");
  if (hostAndPort.length != 2) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String host=hostAndPort[0];
  int port;
  try {
    port=Integer.parseInt(hostAndPort[1]);
  }
 catch (  final NumberFormatException e) {
    throw new IllegalArgumentException(""String_Node_Str"",e);
  }
  final HttpHost proxy=new HttpHost(host,port);
  LOG.info(""String_Node_Str"",proxy.getHostName(),proxy.getPort());
  httpClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,proxy);
}",0.9984939759036144
17929,"public void validate(final EntityInfoAggregator eia,final ODataEntryImpl entry) throws EntityProviderException {
  Collection<EntityPropertyInfo> propertyInfos=eia.getPropertyInfos();
  Map<String,Object> data=entry.getProperties();
  for (  EntityPropertyInfo entityPropertyInfo : propertyInfos) {
    boolean mandatory=entityPropertyInfo.isMandatory();
    if (mandatory) {
      if (!data.containsKey(entityPropertyInfo.getName())) {
        throw new EntityProviderException(EntityProviderException.MISSING_PROPERTY.addContent(entityPropertyInfo.getName()));
      }
    }
  }
}","public void validate(final EntityInfoAggregator eia,final ODataEntryImpl entry) throws EntityProviderException {
  Collection<EntityPropertyInfo> propertyInfos=new ArrayList<EntityPropertyInfo>(eia.getPropertyInfos());
  propertyInfos.removeAll(eia.getKeyPropertyInfos());
  Map<String,Object> data=entry.getProperties();
  for (  EntityPropertyInfo entityPropertyInfo : propertyInfos) {
    boolean mandatory=entityPropertyInfo.isMandatory();
    if (mandatory) {
      if (!data.containsKey(entityPropertyInfo.getName())) {
        throw new EntityProviderException(EntityProviderException.MISSING_PROPERTY.addContent(entityPropertyInfo.getName()));
      }
    }
  }
}",0.8954509177972865
17930,"@Test(expected=EntityProviderException.class) public void validationOfNamespacesMissingD_NamespaceAtRequiredTag() throws Exception {
  String roomWithValidNamespaces=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  EdmEntitySet entitySet=MockFacade.getMockEdm().getDefaultEntityContainer().getEntitySet(""String_Node_Str"");
  InputStream reqContent=createContentAsStream(roomWithValidNamespaces);
  readAndExpectException(entitySet,reqContent,false,EntityProviderException.MISSING_PROPERTY.addContent(""String_Node_Str""));
}","/** 
 * Missing _d_ namespace at mandatory property/tag (_Version_) results in an exception.
 * @throws Exception
 */
@Test(expected=EntityProviderException.class) public void validationOfNamespacesMissingD_NamespaceAtRequiredTag() throws Exception {
  String roomWithValidNamespaces=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  EdmEntitySet entitySet=MockFacade.getMockEdm().getDefaultEntityContainer().getEntitySet(""String_Node_Str"");
  InputStream reqContent=createContentAsStream(roomWithValidNamespaces);
  readAndExpectException(entitySet,reqContent,false,EntityProviderException.MISSING_PROPERTY.addContent(""String_Node_Str""));
}",0.8979057591623036
17931,"/** 
 * Duplicated occurrence of <code>d:Name</code> tag must result in an exception.
 * @throws Exception
 */
@Test public void validationOfDoublePropertyDifferentTagHierachyD_Namespace() throws Exception {
  String room=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  EdmEntitySet entitySet=MockFacade.getMockEdm().getDefaultEntityContainer().getEntitySet(""String_Node_Str"");
  InputStream reqContent=createContentAsStream(room);
  XmlEntityConsumer xec=new XmlEntityConsumer();
  ODataEntry result=xec.readEntry(entitySet,reqContent,false);
  assertNotNull(result);
}","/** 
 * Double occurrence of <code>d:Name</code> tag within an unknown (and hence ignored) property is allowed.
 * @throws Exception
 */
@Test public void validationOfDoublePropertyDifferentTagHierachyD_Namespace() throws Exception {
  String room=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  EdmEntitySet entitySet=MockFacade.getMockEdm().getDefaultEntityContainer().getEntitySet(""String_Node_Str"");
  InputStream reqContent=createContentAsStream(room);
  XmlEntityConsumer xec=new XmlEntityConsumer();
  ODataEntry result=xec.readEntry(entitySet,reqContent,false);
  assertNotNull(result);
}",0.9498432601880876
17932,"/** 
 * Duplicated occurrence of <code>d:Name</code> tag must result in an exception.
 * @throws Exception
 */
@Test(expected=EntityProviderException.class) public void validationOfDuplicatedPropertyException() throws Exception {
  String room=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  EdmEntitySet entitySet=MockFacade.getMockEdm().getDefaultEntityContainer().getEntitySet(""String_Node_Str"");
  InputStream reqContent=createContentAsStream(room);
  readAndExpectException(entitySet,reqContent,EntityProviderException.DOUBLE_PROPERTY.addContent(""String_Node_Str""));
}","/** 
 * Double occurrence of <code>d:Name</code> tag must result in an exception.
 * @throws Exception
 */
@Test(expected=EntityProviderException.class) public void validationOfDuplicatedPropertyException() throws Exception {
  String room=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  EdmEntitySet entitySet=MockFacade.getMockEdm().getDefaultEntityContainer().getEntitySet(""String_Node_Str"");
  InputStream reqContent=createContentAsStream(room);
  readAndExpectException(entitySet,reqContent,EntityProviderException.DOUBLE_PROPERTY.addContent(""String_Node_Str""));
}",0.9944873208379272
17933,"/** 
 * Duplicated occurrence of <code>d:Name</code> tag must result in an exception.
 * @throws Exception
 */
@Test public void validationOfDoublePropertyDifferentTagHierachy() throws Exception {
  String room=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  EdmEntitySet entitySet=MockFacade.getMockEdm().getDefaultEntityContainer().getEntitySet(""String_Node_Str"");
  InputStream reqContent=createContentAsStream(room);
  XmlEntityConsumer xec=new XmlEntityConsumer();
  ODataEntry result=xec.readEntry(entitySet,reqContent,false);
  assertNotNull(result);
}","/** 
 * Double occurrence of <code>Name</code> tag within ignored/unknown property AND different namespace is allowed.
 * @throws Exception
 */
@Test public void validationOfDoublePropertyDifferentTagHierachy() throws Exception {
  String room=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  EdmEntitySet entitySet=MockFacade.getMockEdm().getDefaultEntityContainer().getEntitySet(""String_Node_Str"");
  InputStream reqContent=createContentAsStream(room);
  XmlEntityConsumer xec=new XmlEntityConsumer();
  ODataEntry result=xec.readEntry(entitySet,reqContent,false);
  assertNotNull(result);
}",0.9436545550289626
17934,"/** 
 * @param reader
 * @param entitySet
 * @throws XMLStreamException
 * @throws EdmException
 * @throws EntityProviderException
 */
private void readProperties(final XMLStreamReader reader,final EntityInfoAggregator entitySet) throws XMLStreamException, EdmException, EntityProviderException {
  checkAllMandatoryNamespacesAvailable();
  validateNamespace(reader.getName(),Edm.NAMESPACE_M_2007_08);
  if (entitySet.getEntityType().hasStream()) {
    checkCurrentHandledStartTag(FormatXml.M_PROPERTIES);
  }
 else {
    checkCurrentHandledStartTag(ATOM_CONTENT);
  }
  int nextTagEventType=reader.next();
  XmlPropertyConsumer xpc=new XmlPropertyConsumer();
  boolean run=true;
  EntityPropertyInfo property;
  while (run) {
    if (nextTagEventType == XMLStreamConstants.START_ELEMENT) {
      if (isEdmNamespaceProperty(reader)) {
        String name=getValidPropertyName(reader);
        property=getValidatedPropertyInfo(entitySet,name);
        Object value=xpc.readStartedElement(reader,property,typeMappings);
        properties.put(name,value);
      }
    }
 else     if (nextTagEventType == XMLStreamConstants.END_ELEMENT) {
      String name=reader.getLocalName();
      if (M_PROPERTIES.equals(name)) {
        run=false;
      }
    }
    nextTagEventType=reader.next();
  }
}","/** 
 * @param reader
 * @param entitySet
 * @throws XMLStreamException
 * @throws EdmException
 * @throws EntityProviderException
 */
private void readProperties(final XMLStreamReader reader,final EntityInfoAggregator entitySet) throws XMLStreamException, EdmException, EntityProviderException {
  checkAllMandatoryNamespacesAvailable();
  validateNamespace(reader.getName(),Edm.NAMESPACE_M_2007_08);
  if (entitySet.getEntityType().hasStream()) {
    checkCurrentHandledStartTag(FormatXml.M_PROPERTIES);
  }
 else {
    checkCurrentHandledStartTag(ATOM_CONTENT);
  }
  EntityPropertyInfo property;
  String closeTag=null;
  int nextTagEventType=reader.next();
  XmlPropertyConsumer xpc=new XmlPropertyConsumer();
  boolean run=true;
  while (run) {
    if (nextTagEventType == XMLStreamConstants.START_ELEMENT && closeTag == null) {
      closeTag=reader.getLocalName();
      if (isEdmNamespaceProperty(reader)) {
        String name=getValidPropertyName(reader);
        property=getValidatedPropertyInfo(entitySet,name);
        Object value=xpc.readStartedElement(reader,property,typeMappings);
        properties.put(name,value);
        closeTag=null;
      }
    }
 else     if (nextTagEventType == XMLStreamConstants.END_ELEMENT) {
      String name=reader.getLocalName();
      if (M_PROPERTIES.equals(name)) {
        run=false;
      }
 else       if (name.equals(closeTag)) {
        closeTag=null;
      }
    }
    nextTagEventType=reader.next();
  }
}",0.9133744110184848
17935,"/** 
 * Duplicated occurrence of <code>d:Name</code> tag must result in an exception.
 * @throws Exception
 */
@Test @Ignore(""String_Node_Str"") public void validationOfDoublePropertyDifferentTagHierachyD_Namespace() throws Exception {
  String room=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  EdmEntitySet entitySet=MockFacade.getMockEdm().getDefaultEntityContainer().getEntitySet(""String_Node_Str"");
  InputStream reqContent=createContentAsStream(room);
  XmlEntityConsumer xec=new XmlEntityConsumer();
  ODataEntry result=xec.readEntry(entitySet,reqContent,false);
  assertNotNull(result);
}","/** 
 * Duplicated occurrence of <code>d:Name</code> tag must result in an exception.
 * @throws Exception
 */
@Test public void validationOfDoublePropertyDifferentTagHierachyD_Namespace() throws Exception {
  String room=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  EdmEntitySet entitySet=MockFacade.getMockEdm().getDefaultEntityContainer().getEntitySet(""String_Node_Str"");
  InputStream reqContent=createContentAsStream(room);
  XmlEntityConsumer xec=new XmlEntityConsumer();
  ODataEntry result=xec.readEntry(entitySet,reqContent,false);
  assertNotNull(result);
}",0.9859007832898172
17936,"private void buildCombinedTree(final ExpandSelectTreeNodeImpl root) throws EdmException {
  for (  SelectItem item : initialSelect) {
    ExpandSelectTreeNodeImpl actualNode=root;
    List<NavigationPropertySegment> segmentsList=item.getNavigationPropertySegments();
    for (int segmentListIndex=0; segmentListIndex < segmentsList.size(); segmentListIndex++) {
      ExpandSelectTreeNodeImpl childNode=null;
      for (      ArrayList<NavigationPropertySegment> singleExpandList : initialExpand) {
        if (singleExpandList.size() > segmentListIndex) {
          boolean ok=true;
          for (int expandListIndex=0; expandListIndex <= segmentListIndex; expandListIndex++) {
            if (!segmentsList.get(expandListIndex).getNavigationProperty().getName().equals(singleExpandList.get(expandListIndex).getNavigationProperty().getName())) {
              ok=false;
              break;
            }
          }
          if (ok) {
            childNode=new ExpandSelectTreeNodeImpl();
            if ((item.getProperty() == null && !item.isStar()) && segmentListIndex == segmentsList.size() - 1) {
              ExpandSelectTreeNodeImpl expandNodes=childNode;
              for (int expandListIndex=segmentListIndex + 1; expandListIndex < singleExpandList.size(); expandListIndex++) {
                ExpandSelectTreeNode newNode=new ExpandSelectTreeNodeImpl();
                expandNodes.setAllExplicitly();
                expandNodes=(ExpandSelectTreeNodeImpl)expandNodes.addChild(singleExpandList.get(expandListIndex).getNavigationProperty(),newNode);
              }
            }
            break;
          }
        }
      }
      actualNode=(ExpandSelectTreeNodeImpl)actualNode.addChild(segmentsList.get(segmentListIndex).getNavigationProperty(),childNode);
      if (actualNode == null) {
        break;
      }
    }
    if (actualNode != null) {
      if (item.getProperty() != null) {
        actualNode.addProperty(item.getProperty());
      }
 else       if (item.isStar()) {
        actualNode.setAllExplicitly();
      }
    }
  }
}","private void buildCombinedTree(final ExpandSelectTreeNodeImpl root) throws EdmException {
  for (  SelectItem item : initialSelect) {
    ExpandSelectTreeNodeImpl actualNode=root;
    List<NavigationPropertySegment> segmentsList=item.getNavigationPropertySegments();
    for (int segmentListIndex=0; segmentListIndex < segmentsList.size(); segmentListIndex++) {
      ExpandSelectTreeNodeImpl childNode=null;
      for (      ArrayList<NavigationPropertySegment> singleExpandList : initialExpand) {
        if (singleExpandList.size() > segmentListIndex) {
          boolean ok=true;
          for (int expandListIndex=0; expandListIndex <= segmentListIndex; expandListIndex++) {
            if (!segmentsList.get(expandListIndex).getNavigationProperty().getName().equals(singleExpandList.get(expandListIndex).getNavigationProperty().getName())) {
              ok=false;
              break;
            }
          }
          if (ok) {
            childNode=new ExpandSelectTreeNodeImpl();
            if ((item.getProperty() == null && !item.isStar()) && segmentListIndex == segmentsList.size() - 1) {
              ExpandSelectTreeNodeImpl expandNodes=childNode;
              expandNodes.setAllExplicitly();
              for (int expandListIndex=segmentListIndex + 1; expandListIndex < singleExpandList.size(); expandListIndex++) {
                ExpandSelectTreeNodeImpl newNode=new ExpandSelectTreeNodeImpl();
                newNode.setAllExplicitly();
                expandNodes=(ExpandSelectTreeNodeImpl)expandNodes.addChild(singleExpandList.get(expandListIndex).getNavigationProperty(),newNode);
              }
            }
            actualNode.addChild(segmentsList.get(segmentListIndex).getNavigationProperty(),childNode);
          }
        }
      }
      actualNode=(ExpandSelectTreeNodeImpl)actualNode.addChild(segmentsList.get(segmentListIndex).getNavigationProperty(),childNode);
      if (actualNode == null) {
        break;
      }
    }
    if (actualNode != null) {
      if (item.getProperty() != null) {
        actualNode.addProperty(item.getProperty());
      }
 else       if (item.isStar()) {
        actualNode.setAllExplicitly();
      }
    }
  }
}",0.9265882352941176
17937,"@Override public boolean isAll(){
  return (isAll == null) || isAll;
}","@Override public boolean isAll(){
  return isAll.getBoolean();
}",0.7910447761194029
17938,"public void addProperty(final EdmProperty property){
  if (isAll == null) {
    isAll=false;
  }
  if (!isAll && !properties.contains(property)) {
    properties.add(property);
  }
}","public void addProperty(final EdmProperty property){
  if (isAll == AllKinds.IMPLICITLYTRUE) {
    isAll=AllKinds.FALSE;
  }
  if (isAll != AllKinds.EXPLICITLYTRUE && !properties.contains(property)) {
    properties.add(property);
  }
}",0.7511961722488039
17939,"public ExpandSelectTreeNode addChild(final EdmNavigationProperty navigationProperty,final ExpandSelectTreeNode childNode){
  if (isAll == null) {
    isAll=false;
  }
  if (links.containsKey(navigationProperty)) {
    ExpandSelectTreeNodeImpl existingNode=(ExpandSelectTreeNodeImpl)links.get(navigationProperty);
    if (existingNode != childNode && childNode != null) {
      if (existingNode.isAll() || childNode.isAll()) {
        existingNode.setAllExplicitly();
        for (        Map.Entry<EdmNavigationProperty,ExpandSelectTreeNode> entry : childNode.getLinks().entrySet()) {
          if (entry.getValue() != null) {
            existingNode.addChild(entry.getKey(),entry.getValue());
          }
        }
      }
 else {
        for (        EdmProperty property : childNode.getProperties()) {
          existingNode.addProperty(property);
        }
        for (        Map.Entry<EdmNavigationProperty,ExpandSelectTreeNode> entry : childNode.getLinks().entrySet()) {
          existingNode.addChild(entry.getKey(),entry.getValue());
        }
      }
    }
    return existingNode;
  }
  if (isAll && childNode == null) {
    return null;
  }
  links.put(navigationProperty,childNode);
  return childNode;
}","public ExpandSelectTreeNode addChild(final EdmNavigationProperty navigationProperty,final ExpandSelectTreeNode childNode){
  if (isAll == AllKinds.IMPLICITLYTRUE) {
    isAll=AllKinds.FALSE;
  }
  if (links.containsKey(navigationProperty)) {
    ExpandSelectTreeNodeImpl existingNode=(ExpandSelectTreeNodeImpl)links.get(navigationProperty);
    ExpandSelectTreeNodeImpl childNodeInternal=(ExpandSelectTreeNodeImpl)childNode;
    if (existingNode != childNode && childNode != null) {
      if (existingNode.isAllInternal() == AllKinds.EXPLICITLYTRUE || childNodeInternal.isAllInternal() == AllKinds.EXPLICITLYTRUE) {
        existingNode.setAllExplicitly();
        for (        Map.Entry<EdmNavigationProperty,ExpandSelectTreeNode> entry : childNode.getLinks().entrySet()) {
          if (entry.getValue() != null) {
            existingNode.addChild(entry.getKey(),entry.getValue());
          }
        }
      }
 else {
        for (        EdmProperty property : childNode.getProperties()) {
          existingNode.addProperty(property);
        }
        for (        Map.Entry<EdmNavigationProperty,ExpandSelectTreeNode> entry : childNode.getLinks().entrySet()) {
          existingNode.addChild(entry.getKey(),entry.getValue());
        }
      }
    }
    return existingNode;
  }
  if (isAll != AllKinds.FALSE && childNode == null) {
    return null;
  }
  links.put(navigationProperty,childNode);
  return childNode;
}",0.9116314199395772
17940,"public void setAllExplicitly(){
  isAll=true;
  properties.clear();
  Iterator<EdmNavigationProperty> iterator=links.keySet().iterator();
  while (iterator.hasNext()) {
    EdmNavigationProperty navProp=iterator.next();
    if (links.get(navProp) == null) {
      iterator.remove();
    }
  }
}","public void setAllExplicitly(){
  isAll=AllKinds.EXPLICITLYTRUE;
  properties.clear();
  Iterator<EdmNavigationProperty> iterator=links.keySet().iterator();
  while (iterator.hasNext()) {
    EdmNavigationProperty navProp=iterator.next();
    if (links.get(navProp) == null) {
      iterator.remove();
    }
  }
}",0.9555189456342668
17941,"private ContentType doContentNegotiationForFormat(final UriInfoImpl uriInfo) throws ODataException {
  ContentType formatContentType=mapFormat(uriInfo);
  formatContentType=ensureCharsetIsSet(formatContentType);
  final Class<? extends ODataProcessor> processorFeature=dispatcher.mapUriTypeToProcessorFeature(uriInfo);
  final List<ContentType> supportedContentTypes=getSupportedContentTypes(processorFeature);
  for (  final ContentType contentType : supportedContentTypes) {
    if (contentType.equals(formatContentType)) {
      return formatContentType;
    }
  }
  throw new ODataNotAcceptableException(ODataNotAcceptableException.NOT_SUPPORTED_CONTENT_TYPE.addContent(uriInfo.getFormat()));
}","private ContentType doContentNegotiationForFormat(final UriInfoImpl uriInfo) throws ODataException {
  validateFormatQuery(uriInfo);
  ContentType formatContentType=mapFormat(uriInfo);
  formatContentType=ensureCharsetIsSet(formatContentType);
  final Class<? extends ODataProcessor> processorFeature=dispatcher.mapUriTypeToProcessorFeature(uriInfo);
  final List<ContentType> supportedContentTypes=getSupportedContentTypes(processorFeature);
  for (  final ContentType contentType : supportedContentTypes) {
    if (contentType.equals(formatContentType)) {
      return formatContentType;
    }
  }
  throw new ODataNotAcceptableException(ODataNotAcceptableException.NOT_SUPPORTED_CONTENT_TYPE.addContent(uriInfo.getFormat()));
}",0.9775910364145658
17942,"private String createLineForJiraTable(Set<TestResult> results){
  final StringBuilder b=new StringBuilder(SEPARATOR);
  append(b,buildUriForJira(results));
  boolean acceptHeaderUnwritten=true;
  for (  final TestResult result : results) {
    if (acceptHeaderUnwritten) {
      append(b,result.getRequestHeader(HttpHeaders.ACCEPT));
      acceptHeaderUnwritten=false;
    }
    append(b,result.getResponseHeader(HttpHeaders.CONTENT_TYPE));
    append(b,result.getSomeValue(""String_Node_Str""));
  }
  b.append(""String_Node_Str"");
  return b.toString();
}","private String createLineForJiraTable(Set<TestResult> results){
  final StringBuilder b=new StringBuilder(SEPARATOR);
  append(b,buildUriForJira(results));
  boolean acceptHeaderUnwritten=true;
  for (  final TestResult result : results) {
    if (acceptHeaderUnwritten) {
      append(b,result.getRequestHeader(HttpHeaders.ACCEPT));
      acceptHeaderUnwritten=false;
    }
    append(b,result.getResponseHeader(HttpHeaders.CONTENT_TYPE));
    append(b,result.getSomeValue(RESPONSE_STATUS_CODE));
  }
  b.append(""String_Node_Str"");
  return b.toString();
}",0.8874887488748875
17943,"public String getRequestHeader(String name){
  return reqHeaders.get(name);
}","public String getRequestHeader(String name){
  return reqHeaders.get(normalizeHeaderName(name));
}",0.88
17944,"public void addResponseHeader(String name,String value){
  resHeaders.put(name,value);
}","public void addResponseHeader(String name,String value){
  resHeaders.put(normalizeHeaderName(name),value);
}",0.8934010152284264
17945,"public void addRequestHeader(String name,String value){
  reqHeaders.put(name,value);
}","public void addRequestHeader(String name,String value){
  reqHeaders.put(normalizeHeaderName(name),value);
}",0.8923076923076924
17946,"public String getResponseHeader(String name){
  return resHeaders.get(name);
}","public String getResponseHeader(String name){
  return resHeaders.get(normalizeHeaderName(name));
}",0.8813559322033898
17947,"/** 
 * @see ServiceDocumentProcessor
 */
@Override public ODataResponse readServiceDocument(GetServiceDocumentUriInfo uriInfo,String contentType) throws ODataException {
  final Edm entityDataModel=getContext().getService().getEntityDataModel();
  final String serviceRoot=getContext().getPathInfo().getServiceRoot().toASCIIString();
  final ODataResponse response=EntityProvider.writeServiceDocument(contentType,entityDataModel,serviceRoot);
  final ODataResponseBuilder odataResponseBuilder=ODataResponse.fromResponse(response).header(ODataHttpHeaders.DATASERVICEVERSION,ODataServiceVersion.V10);
  if (!(contentType.equals(response.getContentHeader()) || (contentType.contains(""String_Node_Str"") && response.getContentHeader().contains(""String_Node_Str"")))) {
    odataResponseBuilder.contentHeader(contentType);
  }
  return odataResponseBuilder.build();
}","/** 
 * @see ServiceDocumentProcessor
 */
@Override public ODataResponse readServiceDocument(GetServiceDocumentUriInfo uriInfo,String contentType) throws ODataException {
  final Edm entityDataModel=getContext().getService().getEntityDataModel();
  final String serviceRoot=getContext().getPathInfo().getServiceRoot().toASCIIString();
  final ODataResponse response=EntityProvider.writeServiceDocument(contentType,entityDataModel,serviceRoot);
  final ODataResponseBuilder odataResponseBuilder=ODataResponse.fromResponse(response).header(ODataHttpHeaders.DATASERVICEVERSION,ODataServiceVersion.V10);
  if (isContentTypeUpdateNecessary(contentType,response)) {
    odataResponseBuilder.contentHeader(contentType);
  }
  return odataResponseBuilder.build();
}",0.823238566131026
17948,"@Override public List<String> getSupportedContentTypes(Class<? extends ODataProcessor> processorFeature) throws ODataException {
  List<String> result=new ArrayList<String>();
  if (processor instanceof CustomContentType) {
    result.addAll(((CustomContentType)processor).getCustomContentTypes(processorFeature));
  }
  if (processorFeature == BatchProcessor.class) {
    result.add(HttpContentType.MULTIPART_MIXED);
  }
 else   if (processorFeature == EntityProcessor.class) {
    result.add(HttpContentType.APPLICATION_ATOM_XML_ENTRY_UTF8);
    result.add(HttpContentType.APPLICATION_ATOM_XML_UTF8);
    result.add(HttpContentType.APPLICATION_JSON_UTF8);
    result.add(HttpContentType.APPLICATION_XML_UTF8);
  }
 else   if (processorFeature == FunctionImportProcessor.class || processorFeature == EntityLinkProcessor.class || processorFeature == EntityLinksProcessor.class || processorFeature == EntitySimplePropertyProcessor.class || processorFeature == EntityComplexPropertyProcessor.class) {
    result.add(HttpContentType.APPLICATION_XML_UTF8);
    result.add(HttpContentType.APPLICATION_JSON_UTF8);
  }
 else   if (processorFeature == EntityMediaProcessor.class || processorFeature == EntitySimplePropertyValueProcessor.class || processorFeature == FunctionImportValueProcessor.class) {
    result.add(HttpContentType.WILDCARD);
  }
 else   if (processorFeature == EntitySetProcessor.class) {
    result.add(HttpContentType.APPLICATION_ATOM_XML_FEED_UTF8);
    result.add(HttpContentType.APPLICATION_ATOM_XML_UTF8);
    result.add(HttpContentType.APPLICATION_JSON_UTF8);
    result.add(HttpContentType.APPLICATION_XML_UTF8);
  }
 else   if (processorFeature == MetadataProcessor.class) {
    result.add(HttpContentType.APPLICATION_XML_UTF8);
  }
 else   if (processorFeature == ServiceDocumentProcessor.class) {
    result.add(HttpContentType.APPLICATION_ATOM_SVC_UTF8);
    result.add(HttpContentType.APPLICATION_ATOM_XML_UTF8);
    result.add(HttpContentType.APPLICATION_JSON_UTF8);
    result.add(HttpContentType.APPLICATION_XML_UTF8);
  }
 else {
    throw new ODataNotImplementedException();
  }
  return result;
}","@Override public List<String> getSupportedContentTypes(Class<? extends ODataProcessor> processorFeature) throws ODataException {
  List<String> result=new ArrayList<String>();
  if (processor instanceof CustomContentType) {
    result.addAll(((CustomContentType)processor).getCustomContentTypes(processorFeature));
  }
  if (processorFeature == BatchProcessor.class) {
    result.add(HttpContentType.MULTIPART_MIXED);
  }
 else   if (processorFeature == EntityProcessor.class) {
    result.add(HttpContentType.APPLICATION_ATOM_XML_ENTRY_UTF8);
    result.add(HttpContentType.APPLICATION_ATOM_XML_UTF8);
    result.add(HttpContentType.APPLICATION_JSON_UTF8);
    result.add(HttpContentType.APPLICATION_XML_UTF8);
  }
 else   if (processorFeature == FunctionImportProcessor.class || processorFeature == EntityLinkProcessor.class || processorFeature == EntityLinksProcessor.class || processorFeature == EntitySimplePropertyProcessor.class || processorFeature == EntityComplexPropertyProcessor.class) {
    result.add(HttpContentType.APPLICATION_XML_UTF8);
    result.add(HttpContentType.APPLICATION_JSON_UTF8);
  }
 else   if (processorFeature == EntityMediaProcessor.class || processorFeature == EntitySimplePropertyValueProcessor.class || processorFeature == FunctionImportValueProcessor.class) {
    result.add(HttpContentType.WILDCARD);
  }
 else   if (processorFeature == EntitySetProcessor.class) {
    result.add(HttpContentType.APPLICATION_ATOM_XML_FEED_UTF8);
    result.add(HttpContentType.APPLICATION_ATOM_XML_UTF8);
    result.add(HttpContentType.APPLICATION_JSON_UTF8);
    result.add(HttpContentType.APPLICATION_XML_UTF8);
  }
 else   if (processorFeature == MetadataProcessor.class) {
    result.add(HttpContentType.APPLICATION_XML_UTF8);
  }
 else   if (processorFeature == ServiceDocumentProcessor.class) {
    result.add(HttpContentType.APPLICATION_ATOM_SVC_UTF8);
    result.add(HttpContentType.APPLICATION_JSON_UTF8);
    result.add(HttpContentType.APPLICATION_XML_UTF8);
  }
 else {
    throw new ODataNotImplementedException();
  }
  return result;
}",0.960209673576364
17949,"private ContentType mapFormat(final UriInfoImpl uriInfo){
  String format=uriInfo.getFormat();
  if (""String_Node_Str"".equals(format)) {
    return ContentType.APPLICATION_XML;
  }
 else   if (""String_Node_Str"".equals(format)) {
    return ContentType.APPLICATION_ATOM_XML;
  }
 else   if (""String_Node_Str"".equals(format)) {
    return ContentType.APPLICATION_JSON;
  }
  return ContentType.create(format);
}","private ContentType mapFormat(final UriInfoImpl uriInfo){
  String format=uriInfo.getFormat();
  if (""String_Node_Str"".equals(format)) {
    return ContentType.APPLICATION_XML;
  }
 else   if (""String_Node_Str"".equals(format)) {
    if (uriInfo.getUriType() == UriType.URI0) {
      return ContentType.APPLICATION_ATOM_SVC;
    }
    return ContentType.APPLICATION_ATOM_XML;
  }
 else   if (""String_Node_Str"".equals(format)) {
    return ContentType.APPLICATION_JSON;
  }
  return ContentType.create(format);
}",0.8900979325353645
17950,"@Override ODataSingleProcessor createProcessor() throws ODataException {
  final String contentType=HttpContentType.APPLICATION_ATOM_XML_UTF8;
  final ODataResponse responseAtomXml=ODataResponse.status(HttpStatusCodes.OK).contentHeader(contentType).entity(""String_Node_Str"").build();
  when(((ServiceDocumentProcessor)processor).readServiceDocument(any(GetServiceDocumentUriInfo.class),eq(contentType))).thenReturn(responseAtomXml);
  final ODataResponse value=ODataResponse.status(HttpStatusCodes.OK).contentHeader(""String_Node_Str"").build();
  when(((ServiceDocumentProcessor)processor).readServiceDocument(any(GetServiceDocumentUriInfo.class),eq(""String_Node_Str""))).thenReturn(value);
  when(((CustomContentType)processor).getCustomContentTypes(ServiceDocumentProcessor.class)).thenReturn(Arrays.asList(""String_Node_Str""));
  return processor;
}","@Override ODataSingleProcessor createProcessor() throws ODataException {
  final String contentType=""String_Node_Str"";
  final ODataResponse responseAtomXml=ODataResponse.status(HttpStatusCodes.OK).contentHeader(contentType).entity(""String_Node_Str"").build();
  when(((ServiceDocumentProcessor)processor).readServiceDocument(any(GetServiceDocumentUriInfo.class),eq(contentType))).thenReturn(responseAtomXml);
  final ODataResponse value=ODataResponse.status(HttpStatusCodes.OK).contentHeader(""String_Node_Str"").build();
  when(((ServiceDocumentProcessor)processor).readServiceDocument(any(GetServiceDocumentUriInfo.class),eq(""String_Node_Str""))).thenReturn(value);
  when(((CustomContentType)processor).getCustomContentTypes(ServiceDocumentProcessor.class)).thenReturn(Arrays.asList(""String_Node_Str""));
  return processor;
}",0.966547192353644
17951,"@Test public void testAtomFormatForServiceDocument() throws Exception {
  final HttpResponse response=executeGetRequest(""String_Node_Str"");
  final String responseEntity=StringHelper.httpEntityToString(response.getEntity());
  assertEquals(""String_Node_Str"",responseEntity);
  assertEquals(HttpStatusCodes.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  final Header header=response.getFirstHeader(HttpHeaders.CONTENT_TYPE);
  assertEquals(HttpContentType.APPLICATION_ATOM_XML_UTF8,header.getValue());
}","@Test public void testAtomFormatForServiceDocument() throws Exception {
  final HttpResponse response=executeGetRequest(""String_Node_Str"");
  final String responseEntity=StringHelper.httpEntityToString(response.getEntity());
  assertEquals(""String_Node_Str"",responseEntity);
  assertEquals(HttpStatusCodes.OK.getStatusCode(),response.getStatusLine().getStatusCode());
  final Header header=response.getFirstHeader(HttpHeaders.CONTENT_TYPE);
  assertEquals(""String_Node_Str"",header.getValue());
}",0.9447731755424064
17952,"@Test public void serviceDocumentAcceptHeaderAtom() throws Exception {
  HttpResponse response=callUri(""String_Node_Str"",HttpHeaders.ACCEPT,HttpContentType.APPLICATION_ATOM_XML);
  checkMediaType(response,HttpContentType.APPLICATION_ATOM_SVC_UTF8);
  validateXmlServiceDocument(getBody(response));
}","@Test public void serviceDocumentAcceptHeaderAtom() throws Exception {
  final HttpResponse response=callUri(""String_Node_Str"",HttpHeaders.ACCEPT,HttpContentType.APPLICATION_ATOM_XML,HttpStatusCodes.NOT_ACCEPTABLE);
  assertXmlErrorResponse(response);
}",0.6847826086956522
17953,"@Test public void serviceDocumentAcceptHeaderUtf8Atom() throws Exception {
  HttpResponse response=callUri(""String_Node_Str"",HttpHeaders.ACCEPT,HttpContentType.APPLICATION_ATOM_XML_UTF8);
  checkMediaType(response,HttpContentType.APPLICATION_ATOM_SVC_UTF8);
  validateXmlServiceDocument(getBody(response));
}","@Test public void serviceDocumentAcceptHeaderUtf8Atom() throws Exception {
  final HttpResponse response=callUri(""String_Node_Str"",HttpHeaders.ACCEPT,HttpContentType.APPLICATION_ATOM_XML_UTF8,HttpStatusCodes.NOT_ACCEPTABLE);
  assertXmlErrorResponse(response);
}",0.6947368421052632
17954,"/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  final List<String> paths=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  final String header=HttpHeaders.ACCEPT;
  final List<String> headerValues=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  final List<TestPath> testPaths=TestPath.createTestPaths(paths,header,headerValues);
  final CallerResultHandler handler=new CallerResultHandler();
  final String localBaseUrl=""String_Node_Str"";
  final CallerConfig localConfig=new CallerConfig(localBaseUrl,handler,testPaths);
  AcceptHeaderCaller.create(localConfig).call();
  final String result=handler.getResult();
  System.out.println(result);
}","/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  final List<String> paths=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  final String header=HttpHeaders.ACCEPT;
  final List<String> headerValues=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  final List<TestPath> testPaths=TestPath.createTestPaths(paths,header,headerValues);
  final CallerResultHandler handler=new CallerResultHandler();
  final String localBaseUrl=""String_Node_Str"";
  final CallerConfig localConfig=new CallerConfig(localBaseUrl,handler,testPaths);
  AcceptHeaderCaller.create(localConfig).call();
  final String result=handler.getResult();
  System.out.println(result);
}",0.9208984375
17955,"/** 
 * @see ServiceDocumentProcessor
 */
@Override public ODataResponse readServiceDocument(GetServiceDocumentUriInfo uriInfo,String contentType) throws ODataException {
  final Edm entityDataModel=getContext().getService().getEntityDataModel();
  final String serviceRoot=getContext().getPathInfo().getServiceRoot().toASCIIString();
  final ODataResponse response=EntityProvider.writeServiceDocument(contentType,entityDataModel,serviceRoot);
  final ODataResponseBuilder odataResponseBuilder=ODataResponse.fromResponse(response).header(ODataHttpHeaders.DATASERVICEVERSION,Edm.DATA_SERVICE_VERSION_10);
  if (!(contentType.equals(response.getContentHeader()) || (contentType.contains(""String_Node_Str"") && response.getContentHeader().contains(""String_Node_Str"")))) {
    odataResponseBuilder.contentHeader(contentType);
  }
  return odataResponseBuilder.build();
}","/** 
 * @see ServiceDocumentProcessor
 */
@Override public ODataResponse readServiceDocument(GetServiceDocumentUriInfo uriInfo,String contentType) throws ODataException {
  final Edm entityDataModel=getContext().getService().getEntityDataModel();
  final String serviceRoot=getContext().getPathInfo().getServiceRoot().toASCIIString();
  final ODataResponse response=EntityProvider.writeServiceDocument(contentType,entityDataModel,serviceRoot);
  final ODataResponseBuilder odataResponseBuilder=ODataResponse.fromResponse(response).header(ODataHttpHeaders.DATASERVICEVERSION,ODataServiceVersion.V10);
  if (!(contentType.equals(response.getContentHeader()) || (contentType.contains(""String_Node_Str"") && response.getContentHeader().contains(""String_Node_Str"")))) {
    odataResponseBuilder.contentHeader(contentType);
  }
  return odataResponseBuilder.build();
}",0.9756662804171496
17956,"@Override public InputStream getMetadata() throws ODataException {
  if (schemas == null) {
    schemas=edmProvider.getSchemas();
  }
  OutputStreamWriter writer=null;
  CircleStreamBuffer csb=new CircleStreamBuffer();
  try {
    DataServices metadata=new DataServices().setSchemas(schemas).setDataServiceVersion(getDataServiceVersion());
    writer=new OutputStreamWriter(csb.getOutputStream(),""String_Node_Str"");
    EdmMetadata.writeMetadata(metadata,writer);
    return csb.getInputStream();
  }
 catch (  UnsupportedEncodingException e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException e) {
        LOG.error(e.getLocalizedMessage(),e);
      }
    }
  }
}","@Override public InputStream getMetadata() throws ODataException {
  if (schemas == null) {
    schemas=edmProvider.getSchemas();
  }
  OutputStreamWriter writer=null;
  CircleStreamBuffer csb=new CircleStreamBuffer();
  try {
    DataServices metadata=new DataServices().setSchemas(schemas).setDataServiceVersion(getDataServiceVersion());
    writer=new OutputStreamWriter(csb.getOutputStream(),""String_Node_Str"");
    XmlMetadataProducer.writeMetadata(metadata,writer,null);
    return csb.getInputStream();
  }
 catch (  UnsupportedEncodingException e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException e) {
        LOG.error(e.getLocalizedMessage(),e);
      }
    }
  }
}",0.9882060831781502
17957,"@Override public String getDataServiceVersion() throws ODataException {
  if (schemas == null) {
    schemas=edmProvider.getSchemas();
  }
  if (dataServiceVersion == null) {
    dataServiceVersion=Edm.DATA_SERVICE_VERSION_10;
    if (schemas != null) {
      for (      Schema schema : schemas) {
        List<EntityType> entityTypes=schema.getEntityTypes();
        if (entityTypes != null) {
          for (          EntityType entityType : entityTypes) {
            List<Property> properties=entityType.getProperties();
            if (properties != null) {
              for (              Property property : properties) {
                if (property.getCustomizableFeedMappings() != null) {
                  if (property.getCustomizableFeedMappings().getFcKeepInContent() != null) {
                    if (!property.getCustomizableFeedMappings().getFcKeepInContent()) {
                      dataServiceVersion=Edm.DATA_SERVICE_VERSION_20;
                      return dataServiceVersion;
                    }
                  }
                }
              }
              if (entityType.getCustomizableFeedMappings() != null) {
                if (entityType.getCustomizableFeedMappings().getFcKeepInContent() != null) {
                  if (entityType.getCustomizableFeedMappings().getFcKeepInContent()) {
                    dataServiceVersion=Edm.DATA_SERVICE_VERSION_20;
                    return dataServiceVersion;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return dataServiceVersion;
}","@Override public String getDataServiceVersion() throws ODataException {
  if (schemas == null) {
    schemas=edmProvider.getSchemas();
  }
  if (dataServiceVersion == null) {
    dataServiceVersion=ODataServiceVersion.V10;
    if (schemas != null) {
      for (      Schema schema : schemas) {
        List<EntityType> entityTypes=schema.getEntityTypes();
        if (entityTypes != null) {
          for (          EntityType entityType : entityTypes) {
            List<Property> properties=entityType.getProperties();
            if (properties != null) {
              for (              Property property : properties) {
                if (property.getCustomizableFeedMappings() != null) {
                  if (property.getCustomizableFeedMappings().getFcKeepInContent() != null) {
                    if (!property.getCustomizableFeedMappings().getFcKeepInContent()) {
                      dataServiceVersion=ODataServiceVersion.V20;
                      return dataServiceVersion;
                    }
                  }
                }
              }
              if (entityType.getCustomizableFeedMappings() != null) {
                if (entityType.getCustomizableFeedMappings().getFcKeepInContent() != null) {
                  if (entityType.getCustomizableFeedMappings().getFcKeepInContent()) {
                    dataServiceVersion=ODataServiceVersion.V20;
                    return dataServiceVersion;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return dataServiceVersion;
}",0.9599491417673236
17958,"private static void writeAnnotationAttributes(Collection<AnnotationAttribute> annotationAttributes,XMLStreamWriter xmlStreamWriter) throws XMLStreamException {
  if (annotationAttributes != null) {
    for (    AnnotationAttribute annotationAttribute : annotationAttributes) {
      xmlStreamWriter.writeAttribute(annotationAttribute.getPrefix(),annotationAttribute.getNamespace(),annotationAttribute.getName(),annotationAttribute.getText());
      xmlStreamWriter.writeNamespace(annotationAttribute.getPrefix(),annotationAttribute.getNamespace());
    }
  }
}","private static void writeAnnotationAttributes(Collection<AnnotationAttribute> annotationAttributes,XMLStreamWriter xmlStreamWriter) throws XMLStreamException {
  if (annotationAttributes != null) {
    ArrayList<String> setNamespaces=new ArrayList<String>();
    for (    AnnotationAttribute annotationAttribute : annotationAttributes) {
      xmlStreamWriter.writeAttribute(annotationAttribute.getPrefix(),annotationAttribute.getNamespace(),annotationAttribute.getName(),annotationAttribute.getText());
      if (!setNamespaces.contains(annotationAttribute.getNamespace())) {
        xmlStreamWriter.writeNamespace(annotationAttribute.getPrefix(),annotationAttribute.getNamespace());
        setNamespaces.add(annotationAttribute.getNamespace());
      }
    }
  }
}",0.8440090429540317
17959,"private static void writeAnnotationElements(Collection<AnnotationElement> annotationElements,XMLStreamWriter xmlStreamWriter) throws XMLStreamException {
  if (annotationElements != null) {
    for (    AnnotationElement annotationElement : annotationElements) {
      xmlStreamWriter.writeStartElement(annotationElement.getPrefix(),annotationElement.getName(),annotationElement.getNamespace());
      xmlStreamWriter.writeNamespace(annotationElement.getPrefix(),annotationElement.getNamespace());
      xmlStreamWriter.writeCharacters(annotationElement.getXmlData());
      xmlStreamWriter.writeEndElement();
    }
  }
}","private static void writeAnnotationElements(Collection<AnnotationElement> annotationElements,XMLStreamWriter xmlStreamWriter) throws XMLStreamException {
  if (annotationElements != null) {
    ArrayList<String> setNamespaces=new ArrayList<String>();
    for (    AnnotationElement annotationElement : annotationElements) {
      xmlStreamWriter.writeStartElement(annotationElement.getPrefix(),annotationElement.getName(),annotationElement.getNamespace());
      if (!setNamespaces.contains(annotationElement.getNamespace())) {
        xmlStreamWriter.writeNamespace(annotationElement.getPrefix(),annotationElement.getNamespace());
        setNamespaces.add(annotationElement.getNamespace());
      }
      xmlStreamWriter.writeCharacters(annotationElement.getXmlData());
      xmlStreamWriter.writeEndElement();
    }
  }
}",0.859515570934256
17960,"@Test public void testSchemaStructure() throws Exception {
  assertXpathExists(""String_Node_Str"",metadata);
  assertXpathExists(""String_Node_Str"",metadata);
  assertXpathExists(""String_Node_Str"",metadata);
  assertXpathExists(""String_Node_Str"",metadata);
  assertXpathExists(""String_Node_Str"",metadata);
  assertXpathExists(""String_Node_Str"",metadata);
  assertXpathExists(""String_Node_Str"",metadata);
}","@Test public void testSchemaStructure() throws Exception {
  System.out.println(metadata);
  assertXpathExists(""String_Node_Str"",metadata);
  assertXpathExists(""String_Node_Str"",metadata);
  assertXpathExists(""String_Node_Str"",metadata);
  assertXpathExists(""String_Node_Str"",metadata);
  assertXpathExists(""String_Node_Str"",metadata);
  assertXpathExists(""String_Node_Str"",metadata);
  assertXpathExists(""String_Node_Str"",metadata);
}",0.9618138424821002
17961,"@BeforeClass public static void setup() throws Exception {
  EdmImplProv edmImplProv=new EdmImplProv(new EdmProviderMock());
  EdmServiceMetadata serviceMetadata=edmImplProv.getServiceMetadata();
  metadata=StringHelper.inputStreamToString(serviceMetadata.getMetadata());
  Map<String,String> prefixMap=new HashMap<String,String>();
  prefixMap.put(null,""String_Node_Str"");
  prefixMap.put(""String_Node_Str"",""String_Node_Str"");
  prefixMap.put(""String_Node_Str"",""String_Node_Str"");
  prefixMap.put(""String_Node_Str"",""String_Node_Str"");
  prefixMap.put(""String_Node_Str"",""String_Node_Str"");
  NamespaceContext ctx=new SimpleNamespaceContext(prefixMap);
  XMLUnit.setXpathNamespaceContext(ctx);
}","@BeforeClass public static void setup() throws Exception {
  EdmImplProv edmImplProv=new EdmImplProv(new EdmTestProvider());
  EdmServiceMetadata serviceMetadata=edmImplProv.getServiceMetadata();
  metadata=StringHelper.inputStreamToString(serviceMetadata.getMetadata());
  Map<String,String> prefixMap=new HashMap<String,String>();
  prefixMap.put(null,""String_Node_Str"");
  prefixMap.put(""String_Node_Str"",""String_Node_Str"");
  prefixMap.put(""String_Node_Str"",""String_Node_Str"");
  prefixMap.put(""String_Node_Str"",""String_Node_Str"");
  prefixMap.put(""String_Node_Str"",""String_Node_Str"");
  NamespaceContext ctx=new SimpleNamespaceContext(prefixMap);
  XMLUnit.setXpathNamespaceContext(ctx);
}",0.9942363112391932
17962,"public static void writeMetadata(DataServices metadata,Writer writer) throws EntityProviderException {
  try {
    XMLStreamWriter xmlStreamWriter=XMLOutputFactory.newInstance().createXMLStreamWriter(writer);
    xmlStreamWriter.writeStartDocument();
    xmlStreamWriter.setPrefix(Edm.PREFIX_EDMX,Edm.NAMESPACE_EDMX_2007_06);
    xmlStreamWriter.setPrefix(Edm.PREFIX_M,Edm.NAMESPACE_M_2007_08);
    xmlStreamWriter.setDefaultNamespace(Edm.NAMESPACE_EDM_2008_09);
    xmlStreamWriter.writeStartElement(Edm.NAMESPACE_EDMX_2007_06,""String_Node_Str"");
    xmlStreamWriter.writeAttribute(""String_Node_Str"",""String_Node_Str"");
    xmlStreamWriter.writeNamespace(Edm.PREFIX_EDMX,Edm.NAMESPACE_EDMX_2007_06);
    xmlStreamWriter.writeStartElement(Edm.NAMESPACE_EDMX_2007_06,""String_Node_Str"");
    xmlStreamWriter.writeAttribute(Edm.PREFIX_M,Edm.NAMESPACE_M_2007_08,""String_Node_Str"",metadata.getDataServiceVersion());
    xmlStreamWriter.writeNamespace(Edm.PREFIX_M,Edm.NAMESPACE_M_2007_08);
    Collection<Schema> schemas=metadata.getSchemas();
    if (schemas != null) {
      for (      Schema schema : schemas) {
        xmlStreamWriter.writeStartElement(""String_Node_Str"");
        if (schema.getAlias() != null) {
          xmlStreamWriter.writeAttribute(""String_Node_Str"",schema.getAlias());
        }
        xmlStreamWriter.writeAttribute(""String_Node_Str"",schema.getNamespace());
        xmlStreamWriter.writeDefaultNamespace(Edm.NAMESPACE_EDM_2008_09);
        writeAnnotationAttributes(schema.getAnnotationAttributes(),xmlStreamWriter);
        Collection<Using> usings=schema.getUsings();
        if (usings != null) {
          for (          Using using : usings) {
            xmlStreamWriter.writeStartElement(""String_Node_Str"");
            xmlStreamWriter.writeAttribute(""String_Node_Str"",using.getNamespace());
            xmlStreamWriter.writeAttribute(""String_Node_Str"",using.getAlias());
            writeAnnotationAttributes(using.getAnnotationAttributes(),xmlStreamWriter);
            writeDocumentation(using.getDocumentation(),xmlStreamWriter);
            writeAnnotationElements(using.getAnnotationElements(),xmlStreamWriter);
            xmlStreamWriter.writeEndElement();
          }
        }
        Collection<EntityType> entityTypes=schema.getEntityTypes();
        if (entityTypes != null) {
          for (          EntityType entityType : entityTypes) {
            xmlStreamWriter.writeStartElement(""String_Node_Str"");
            xmlStreamWriter.writeAttribute(""String_Node_Str"",entityType.getName());
            if (entityType.getBaseType() != null) {
              xmlStreamWriter.writeAttribute(""String_Node_Str"",entityType.getBaseType().toString());
            }
            if (entityType.isAbstract()) {
              xmlStreamWriter.writeAttribute(""String_Node_Str"",""String_Node_Str"");
            }
            if (entityType.isHasStream()) {
              xmlStreamWriter.writeAttribute(Edm.PREFIX_M,Edm.NAMESPACE_M_2007_08,""String_Node_Str"",""String_Node_Str"");
            }
            writeCustomizableFeedMappings(entityType.getCustomizableFeedMappings(),xmlStreamWriter);
            writeAnnotationAttributes(entityType.getAnnotationAttributes(),xmlStreamWriter);
            writeDocumentation(entityType.getDocumentation(),xmlStreamWriter);
            Key key=entityType.getKey();
            if (key != null) {
              xmlStreamWriter.writeStartElement(""String_Node_Str"");
              writeAnnotationAttributes(key.getAnnotationAttributes(),xmlStreamWriter);
              Collection<PropertyRef> propertyRefs=entityType.getKey().getKeys();
              for (              PropertyRef propertyRef : propertyRefs) {
                xmlStreamWriter.writeStartElement(""String_Node_Str"");
                writeAnnotationAttributes(propertyRef.getAnnotationAttributes(),xmlStreamWriter);
                xmlStreamWriter.writeAttribute(""String_Node_Str"",propertyRef.getName());
                writeAnnotationElements(propertyRef.getAnnotationElements(),xmlStreamWriter);
                xmlStreamWriter.writeEndElement();
              }
              writeAnnotationElements(key.getAnnotationElements(),xmlStreamWriter);
              xmlStreamWriter.writeEndElement();
            }
            Collection<Property> properties=entityType.getProperties();
            if (properties != null) {
              writeProperties(properties,xmlStreamWriter);
            }
            Collection<NavigationProperty> navigationProperties=entityType.getNavigationProperties();
            if (navigationProperties != null) {
              for (              NavigationProperty navigationProperty : navigationProperties) {
                xmlStreamWriter.writeStartElement(""String_Node_Str"");
                xmlStreamWriter.writeAttribute(""String_Node_Str"",navigationProperty.getName());
                xmlStreamWriter.writeAttribute(""String_Node_Str"",navigationProperty.getRelationship().toString());
                xmlStreamWriter.writeAttribute(""String_Node_Str"",navigationProperty.getFromRole());
                xmlStreamWriter.writeAttribute(""String_Node_Str"",navigationProperty.getToRole());
                writeAnnotationAttributes(navigationProperty.getAnnotationAttributes(),xmlStreamWriter);
                writeDocumentation(navigationProperty.getDocumentation(),xmlStreamWriter);
                writeAnnotationElements(navigationProperty.getAnnotationElements(),xmlStreamWriter);
                xmlStreamWriter.writeEndElement();
              }
            }
            writeAnnotationElements(entityType.getAnnotationElements(),xmlStreamWriter);
            xmlStreamWriter.writeEndElement();
          }
        }
        Collection<ComplexType> complexTypes=schema.getComplexTypes();
        if (complexTypes != null) {
          for (          ComplexType complexType : complexTypes) {
            xmlStreamWriter.writeStartElement(""String_Node_Str"");
            xmlStreamWriter.writeAttribute(""String_Node_Str"",complexType.getName());
            if (complexType.getBaseType() != null) {
              xmlStreamWriter.writeAttribute(""String_Node_Str"",complexType.getBaseType().toString());
            }
            if (complexType.isAbstract()) {
              xmlStreamWriter.writeAttribute(""String_Node_Str"",""String_Node_Str"");
            }
            writeAnnotationAttributes(complexType.getAnnotationAttributes(),xmlStreamWriter);
            writeDocumentation(complexType.getDocumentation(),xmlStreamWriter);
            Collection<Property> properties=complexType.getProperties();
            if (properties != null) {
              writeProperties(properties,xmlStreamWriter);
            }
            writeAnnotationElements(complexType.getAnnotationElements(),xmlStreamWriter);
            xmlStreamWriter.writeEndElement();
          }
        }
        Collection<Association> associations=schema.getAssociations();
        if (associations != null) {
          for (          Association association : associations) {
            xmlStreamWriter.writeStartElement(""String_Node_Str"");
            xmlStreamWriter.writeAttribute(""String_Node_Str"",association.getName());
            writeAnnotationAttributes(association.getAnnotationAttributes(),xmlStreamWriter);
            writeDocumentation(association.getDocumentation(),xmlStreamWriter);
            writeAssociationEnd(association.getEnd1(),xmlStreamWriter);
            writeAssociationEnd(association.getEnd2(),xmlStreamWriter);
            ReferentialConstraint referentialConstraint=association.getReferentialConstraint();
            if (referentialConstraint != null) {
              xmlStreamWriter.writeStartElement(""String_Node_Str"");
              writeAnnotationAttributes(referentialConstraint.getAnnotationAttributes(),xmlStreamWriter);
              writeDocumentation(referentialConstraint.getDocumentation(),xmlStreamWriter);
              ReferentialConstraintRole principal=referentialConstraint.getPrincipal();
              xmlStreamWriter.writeStartElement(""String_Node_Str"");
              xmlStreamWriter.writeAttribute(""String_Node_Str"",principal.getRole());
              writeAnnotationAttributes(principal.getAnnotationAttributes(),xmlStreamWriter);
              for (              PropertyRef propertyRef : principal.getPropertyRefs()) {
                xmlStreamWriter.writeStartElement(""String_Node_Str"");
                xmlStreamWriter.writeAttribute(""String_Node_Str"",propertyRef.getName());
                xmlStreamWriter.writeEndElement();
              }
              writeAnnotationElements(principal.getAnnotationElements(),xmlStreamWriter);
              xmlStreamWriter.writeEndElement();
              ReferentialConstraintRole dependent=referentialConstraint.getPrincipal();
              xmlStreamWriter.writeStartElement(""String_Node_Str"");
              xmlStreamWriter.writeAttribute(""String_Node_Str"",dependent.getRole());
              writeAnnotationAttributes(dependent.getAnnotationAttributes(),xmlStreamWriter);
              for (              PropertyRef propertyRef : dependent.getPropertyRefs()) {
                xmlStreamWriter.writeStartElement(""String_Node_Str"");
                xmlStreamWriter.writeAttribute(""String_Node_Str"",propertyRef.getName());
                xmlStreamWriter.writeEndElement();
              }
              writeAnnotationElements(dependent.getAnnotationElements(),xmlStreamWriter);
              xmlStreamWriter.writeEndElement();
              writeAnnotationElements(referentialConstraint.getAnnotationElements(),xmlStreamWriter);
              xmlStreamWriter.writeEndElement();
            }
            writeAnnotationElements(association.getAnnotationElements(),xmlStreamWriter);
            xmlStreamWriter.writeEndElement();
          }
        }
        Collection<EntityContainer> entityContainers=schema.getEntityContainers();
        if (entityContainers != null) {
          for (          EntityContainer entityContainer : entityContainers) {
            xmlStreamWriter.writeStartElement(""String_Node_Str"");
            xmlStreamWriter.writeAttribute(""String_Node_Str"",entityContainer.getName());
            if (entityContainer.getExtendz() != null) {
              xmlStreamWriter.writeAttribute(""String_Node_Str"",entityContainer.getExtendz());
            }
            if (entityContainer.isDefaultEntityContainer()) {
              xmlStreamWriter.writeAttribute(Edm.PREFIX_M,Edm.NAMESPACE_M_2007_08,""String_Node_Str"",""String_Node_Str"");
            }
            writeAnnotationAttributes(entityContainer.getAnnotationAttributes(),xmlStreamWriter);
            writeDocumentation(entityContainer.getDocumentation(),xmlStreamWriter);
            Collection<EntitySet> entitySets=entityContainer.getEntitySets();
            if (entitySets != null) {
              for (              EntitySet entitySet : entitySets) {
                xmlStreamWriter.writeStartElement(""String_Node_Str"");
                xmlStreamWriter.writeAttribute(""String_Node_Str"",entitySet.getName());
                xmlStreamWriter.writeAttribute(""String_Node_Str"",entitySet.getEntityType().toString());
                writeAnnotationAttributes(entitySet.getAnnotationAttributes(),xmlStreamWriter);
                writeDocumentation(entitySet.getDocumentation(),xmlStreamWriter);
                writeAnnotationElements(entitySet.getAnnotationElements(),xmlStreamWriter);
                xmlStreamWriter.writeEndElement();
              }
            }
            Collection<AssociationSet> associationSets=entityContainer.getAssociationSets();
            if (associationSets != null) {
              for (              AssociationSet associationSet : associationSets) {
                xmlStreamWriter.writeStartElement(""String_Node_Str"");
                xmlStreamWriter.writeAttribute(""String_Node_Str"",associationSet.getName());
                xmlStreamWriter.writeAttribute(""String_Node_Str"",associationSet.getAssociation().toString());
                writeAnnotationAttributes(associationSet.getAnnotationAttributes(),xmlStreamWriter);
                writeDocumentation(associationSet.getDocumentation(),xmlStreamWriter);
                writeAssociationSetEnd(associationSet.getEnd1(),xmlStreamWriter);
                writeAssociationSetEnd(associationSet.getEnd2(),xmlStreamWriter);
                writeAnnotationElements(associationSet.getAnnotationElements(),xmlStreamWriter);
                xmlStreamWriter.writeEndElement();
              }
            }
            Collection<FunctionImport> functionImports=entityContainer.getFunctionImports();
            if (functionImports != null) {
              for (              FunctionImport functionImport : functionImports) {
                xmlStreamWriter.writeStartElement(""String_Node_Str"");
                xmlStreamWriter.writeAttribute(""String_Node_Str"",functionImport.getName());
                if (functionImport.getReturnType() != null) {
                  xmlStreamWriter.writeAttribute(""String_Node_Str"",functionImport.getReturnType().toString());
                }
                if (functionImport.getEntitySet() != null) {
                  xmlStreamWriter.writeAttribute(""String_Node_Str"",functionImport.getEntitySet());
                }
                if (functionImport.getHttpMethod() != null) {
                  xmlStreamWriter.writeAttribute(Edm.PREFIX_M,Edm.NAMESPACE_M_2007_08,""String_Node_Str"",functionImport.getHttpMethod());
                }
                writeAnnotationAttributes(functionImport.getAnnotationAttributes(),xmlStreamWriter);
                writeDocumentation(functionImport.getDocumentation(),xmlStreamWriter);
                Collection<FunctionImportParameter> functionImportParameters=functionImport.getParameters();
                if (functionImportParameters != null) {
                  for (                  FunctionImportParameter functionImportParameter : functionImportParameters) {
                    xmlStreamWriter.writeStartElement(""String_Node_Str"");
                    xmlStreamWriter.writeAttribute(""String_Node_Str"",functionImportParameter.getName());
                    xmlStreamWriter.writeAttribute(""String_Node_Str"",functionImportParameter.getType().getFullQualifiedName().toString());
                    if (functionImportParameter.getMode() != null) {
                      xmlStreamWriter.writeAttribute(""String_Node_Str"",functionImportParameter.getMode());
                    }
                    writeFacets(xmlStreamWriter,functionImportParameter.getFacets());
                    writeAnnotationAttributes(functionImportParameter.getAnnotationAttributes(),xmlStreamWriter);
                    writeDocumentation(functionImportParameter.getDocumentation(),xmlStreamWriter);
                    writeAnnotationElements(functionImportParameter.getAnnotationElements(),xmlStreamWriter);
                    xmlStreamWriter.writeEndElement();
                  }
                }
                writeAnnotationElements(functionImport.getAnnotationElements(),xmlStreamWriter);
                xmlStreamWriter.writeEndElement();
              }
            }
            writeAnnotationElements(entityContainer.getAnnotationElements(),xmlStreamWriter);
            xmlStreamWriter.writeEndElement();
          }
        }
        xmlStreamWriter.writeEndElement();
        writeAnnotationElements(schema.getAnnotationElements(),xmlStreamWriter);
      }
    }
    xmlStreamWriter.writeEndElement();
    xmlStreamWriter.writeEndElement();
    xmlStreamWriter.writeEndDocument();
    xmlStreamWriter.flush();
  }
 catch (  XMLStreamException e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
catch (  FactoryConfigurationError e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
}","public static void writeMetadata(DataServices metadata,Writer writer) throws EntityProviderException {
  try {
    XMLStreamWriter xmlStreamWriter=XMLOutputFactory.newInstance().createXMLStreamWriter(writer);
    xmlStreamWriter.writeStartDocument();
    xmlStreamWriter.setPrefix(Edm.PREFIX_EDMX,Edm.NAMESPACE_EDMX_2007_06);
    xmlStreamWriter.setPrefix(Edm.PREFIX_M,Edm.NAMESPACE_M_2007_08);
    xmlStreamWriter.setDefaultNamespace(Edm.NAMESPACE_EDM_2008_09);
    xmlStreamWriter.writeStartElement(Edm.NAMESPACE_EDMX_2007_06,""String_Node_Str"");
    xmlStreamWriter.writeAttribute(""String_Node_Str"",""String_Node_Str"");
    xmlStreamWriter.writeNamespace(Edm.PREFIX_EDMX,Edm.NAMESPACE_EDMX_2007_06);
    xmlStreamWriter.writeStartElement(Edm.NAMESPACE_EDMX_2007_06,""String_Node_Str"");
    xmlStreamWriter.writeAttribute(Edm.PREFIX_M,Edm.NAMESPACE_M_2007_08,""String_Node_Str"",metadata.getDataServiceVersion());
    xmlStreamWriter.writeNamespace(Edm.PREFIX_M,Edm.NAMESPACE_M_2007_08);
    Collection<Schema> schemas=metadata.getSchemas();
    if (schemas != null) {
      for (      Schema schema : schemas) {
        xmlStreamWriter.writeStartElement(""String_Node_Str"");
        if (schema.getAlias() != null) {
          xmlStreamWriter.writeAttribute(""String_Node_Str"",schema.getAlias());
        }
        xmlStreamWriter.writeAttribute(""String_Node_Str"",schema.getNamespace());
        xmlStreamWriter.writeDefaultNamespace(Edm.NAMESPACE_EDM_2008_09);
        writeAnnotationAttributes(schema.getAnnotationAttributes(),xmlStreamWriter);
        Collection<Using> usings=schema.getUsings();
        if (usings != null) {
          for (          Using using : usings) {
            xmlStreamWriter.writeStartElement(""String_Node_Str"");
            xmlStreamWriter.writeAttribute(""String_Node_Str"",using.getNamespace());
            xmlStreamWriter.writeAttribute(""String_Node_Str"",using.getAlias());
            writeAnnotationAttributes(using.getAnnotationAttributes(),xmlStreamWriter);
            writeDocumentation(using.getDocumentation(),xmlStreamWriter);
            writeAnnotationElements(using.getAnnotationElements(),xmlStreamWriter);
            xmlStreamWriter.writeEndElement();
          }
        }
        Collection<EntityType> entityTypes=schema.getEntityTypes();
        if (entityTypes != null) {
          for (          EntityType entityType : entityTypes) {
            xmlStreamWriter.writeStartElement(""String_Node_Str"");
            xmlStreamWriter.writeAttribute(""String_Node_Str"",entityType.getName());
            if (entityType.getBaseType() != null) {
              xmlStreamWriter.writeAttribute(""String_Node_Str"",entityType.getBaseType().toString());
            }
            if (entityType.isAbstract()) {
              xmlStreamWriter.writeAttribute(""String_Node_Str"",""String_Node_Str"");
            }
            if (entityType.isHasStream()) {
              xmlStreamWriter.writeAttribute(Edm.PREFIX_M,Edm.NAMESPACE_M_2007_08,""String_Node_Str"",""String_Node_Str"");
            }
            writeCustomizableFeedMappings(entityType.getCustomizableFeedMappings(),xmlStreamWriter);
            writeAnnotationAttributes(entityType.getAnnotationAttributes(),xmlStreamWriter);
            writeDocumentation(entityType.getDocumentation(),xmlStreamWriter);
            Key key=entityType.getKey();
            if (key != null) {
              xmlStreamWriter.writeStartElement(""String_Node_Str"");
              writeAnnotationAttributes(key.getAnnotationAttributes(),xmlStreamWriter);
              Collection<PropertyRef> propertyRefs=entityType.getKey().getKeys();
              for (              PropertyRef propertyRef : propertyRefs) {
                xmlStreamWriter.writeStartElement(""String_Node_Str"");
                writeAnnotationAttributes(propertyRef.getAnnotationAttributes(),xmlStreamWriter);
                xmlStreamWriter.writeAttribute(""String_Node_Str"",propertyRef.getName());
                writeAnnotationElements(propertyRef.getAnnotationElements(),xmlStreamWriter);
                xmlStreamWriter.writeEndElement();
              }
              writeAnnotationElements(key.getAnnotationElements(),xmlStreamWriter);
              xmlStreamWriter.writeEndElement();
            }
            Collection<Property> properties=entityType.getProperties();
            if (properties != null) {
              writeProperties(properties,xmlStreamWriter);
            }
            Collection<NavigationProperty> navigationProperties=entityType.getNavigationProperties();
            if (navigationProperties != null) {
              for (              NavigationProperty navigationProperty : navigationProperties) {
                xmlStreamWriter.writeStartElement(""String_Node_Str"");
                xmlStreamWriter.writeAttribute(""String_Node_Str"",navigationProperty.getName());
                xmlStreamWriter.writeAttribute(""String_Node_Str"",navigationProperty.getRelationship().toString());
                xmlStreamWriter.writeAttribute(""String_Node_Str"",navigationProperty.getFromRole());
                xmlStreamWriter.writeAttribute(""String_Node_Str"",navigationProperty.getToRole());
                writeAnnotationAttributes(navigationProperty.getAnnotationAttributes(),xmlStreamWriter);
                writeDocumentation(navigationProperty.getDocumentation(),xmlStreamWriter);
                writeAnnotationElements(navigationProperty.getAnnotationElements(),xmlStreamWriter);
                xmlStreamWriter.writeEndElement();
              }
            }
            writeAnnotationElements(entityType.getAnnotationElements(),xmlStreamWriter);
            xmlStreamWriter.writeEndElement();
          }
        }
        Collection<ComplexType> complexTypes=schema.getComplexTypes();
        if (complexTypes != null) {
          for (          ComplexType complexType : complexTypes) {
            xmlStreamWriter.writeStartElement(""String_Node_Str"");
            xmlStreamWriter.writeAttribute(""String_Node_Str"",complexType.getName());
            if (complexType.getBaseType() != null) {
              xmlStreamWriter.writeAttribute(""String_Node_Str"",complexType.getBaseType().toString());
            }
            if (complexType.isAbstract()) {
              xmlStreamWriter.writeAttribute(""String_Node_Str"",""String_Node_Str"");
            }
            writeAnnotationAttributes(complexType.getAnnotationAttributes(),xmlStreamWriter);
            writeDocumentation(complexType.getDocumentation(),xmlStreamWriter);
            Collection<Property> properties=complexType.getProperties();
            if (properties != null) {
              writeProperties(properties,xmlStreamWriter);
            }
            writeAnnotationElements(complexType.getAnnotationElements(),xmlStreamWriter);
            xmlStreamWriter.writeEndElement();
          }
        }
        Collection<Association> associations=schema.getAssociations();
        if (associations != null) {
          for (          Association association : associations) {
            xmlStreamWriter.writeStartElement(""String_Node_Str"");
            xmlStreamWriter.writeAttribute(""String_Node_Str"",association.getName());
            writeAnnotationAttributes(association.getAnnotationAttributes(),xmlStreamWriter);
            writeDocumentation(association.getDocumentation(),xmlStreamWriter);
            writeAssociationEnd(association.getEnd1(),xmlStreamWriter);
            writeAssociationEnd(association.getEnd2(),xmlStreamWriter);
            ReferentialConstraint referentialConstraint=association.getReferentialConstraint();
            if (referentialConstraint != null) {
              xmlStreamWriter.writeStartElement(""String_Node_Str"");
              writeAnnotationAttributes(referentialConstraint.getAnnotationAttributes(),xmlStreamWriter);
              writeDocumentation(referentialConstraint.getDocumentation(),xmlStreamWriter);
              ReferentialConstraintRole principal=referentialConstraint.getPrincipal();
              xmlStreamWriter.writeStartElement(""String_Node_Str"");
              xmlStreamWriter.writeAttribute(""String_Node_Str"",principal.getRole());
              writeAnnotationAttributes(principal.getAnnotationAttributes(),xmlStreamWriter);
              for (              PropertyRef propertyRef : principal.getPropertyRefs()) {
                xmlStreamWriter.writeStartElement(""String_Node_Str"");
                xmlStreamWriter.writeAttribute(""String_Node_Str"",propertyRef.getName());
                xmlStreamWriter.writeEndElement();
              }
              writeAnnotationElements(principal.getAnnotationElements(),xmlStreamWriter);
              xmlStreamWriter.writeEndElement();
              ReferentialConstraintRole dependent=referentialConstraint.getDependent();
              xmlStreamWriter.writeStartElement(""String_Node_Str"");
              xmlStreamWriter.writeAttribute(""String_Node_Str"",dependent.getRole());
              writeAnnotationAttributes(dependent.getAnnotationAttributes(),xmlStreamWriter);
              for (              PropertyRef propertyRef : dependent.getPropertyRefs()) {
                xmlStreamWriter.writeStartElement(""String_Node_Str"");
                xmlStreamWriter.writeAttribute(""String_Node_Str"",propertyRef.getName());
                xmlStreamWriter.writeEndElement();
              }
              writeAnnotationElements(dependent.getAnnotationElements(),xmlStreamWriter);
              xmlStreamWriter.writeEndElement();
              writeAnnotationElements(referentialConstraint.getAnnotationElements(),xmlStreamWriter);
              xmlStreamWriter.writeEndElement();
            }
            writeAnnotationElements(association.getAnnotationElements(),xmlStreamWriter);
            xmlStreamWriter.writeEndElement();
          }
        }
        Collection<EntityContainer> entityContainers=schema.getEntityContainers();
        if (entityContainers != null) {
          for (          EntityContainer entityContainer : entityContainers) {
            xmlStreamWriter.writeStartElement(""String_Node_Str"");
            xmlStreamWriter.writeAttribute(""String_Node_Str"",entityContainer.getName());
            if (entityContainer.getExtendz() != null) {
              xmlStreamWriter.writeAttribute(""String_Node_Str"",entityContainer.getExtendz());
            }
            if (entityContainer.isDefaultEntityContainer()) {
              xmlStreamWriter.writeAttribute(Edm.PREFIX_M,Edm.NAMESPACE_M_2007_08,""String_Node_Str"",""String_Node_Str"");
            }
            writeAnnotationAttributes(entityContainer.getAnnotationAttributes(),xmlStreamWriter);
            writeDocumentation(entityContainer.getDocumentation(),xmlStreamWriter);
            Collection<EntitySet> entitySets=entityContainer.getEntitySets();
            if (entitySets != null) {
              for (              EntitySet entitySet : entitySets) {
                xmlStreamWriter.writeStartElement(""String_Node_Str"");
                xmlStreamWriter.writeAttribute(""String_Node_Str"",entitySet.getName());
                xmlStreamWriter.writeAttribute(""String_Node_Str"",entitySet.getEntityType().toString());
                writeAnnotationAttributes(entitySet.getAnnotationAttributes(),xmlStreamWriter);
                writeDocumentation(entitySet.getDocumentation(),xmlStreamWriter);
                writeAnnotationElements(entitySet.getAnnotationElements(),xmlStreamWriter);
                xmlStreamWriter.writeEndElement();
              }
            }
            Collection<AssociationSet> associationSets=entityContainer.getAssociationSets();
            if (associationSets != null) {
              for (              AssociationSet associationSet : associationSets) {
                xmlStreamWriter.writeStartElement(""String_Node_Str"");
                xmlStreamWriter.writeAttribute(""String_Node_Str"",associationSet.getName());
                xmlStreamWriter.writeAttribute(""String_Node_Str"",associationSet.getAssociation().toString());
                writeAnnotationAttributes(associationSet.getAnnotationAttributes(),xmlStreamWriter);
                writeDocumentation(associationSet.getDocumentation(),xmlStreamWriter);
                writeAssociationSetEnd(associationSet.getEnd1(),xmlStreamWriter);
                writeAssociationSetEnd(associationSet.getEnd2(),xmlStreamWriter);
                writeAnnotationElements(associationSet.getAnnotationElements(),xmlStreamWriter);
                xmlStreamWriter.writeEndElement();
              }
            }
            Collection<FunctionImport> functionImports=entityContainer.getFunctionImports();
            if (functionImports != null) {
              for (              FunctionImport functionImport : functionImports) {
                xmlStreamWriter.writeStartElement(""String_Node_Str"");
                xmlStreamWriter.writeAttribute(""String_Node_Str"",functionImport.getName());
                if (functionImport.getReturnType() != null) {
                  xmlStreamWriter.writeAttribute(""String_Node_Str"",functionImport.getReturnType().toString());
                }
                if (functionImport.getEntitySet() != null) {
                  xmlStreamWriter.writeAttribute(""String_Node_Str"",functionImport.getEntitySet());
                }
                if (functionImport.getHttpMethod() != null) {
                  xmlStreamWriter.writeAttribute(Edm.PREFIX_M,Edm.NAMESPACE_M_2007_08,""String_Node_Str"",functionImport.getHttpMethod());
                }
                writeAnnotationAttributes(functionImport.getAnnotationAttributes(),xmlStreamWriter);
                writeDocumentation(functionImport.getDocumentation(),xmlStreamWriter);
                Collection<FunctionImportParameter> functionImportParameters=functionImport.getParameters();
                if (functionImportParameters != null) {
                  for (                  FunctionImportParameter functionImportParameter : functionImportParameters) {
                    xmlStreamWriter.writeStartElement(""String_Node_Str"");
                    xmlStreamWriter.writeAttribute(""String_Node_Str"",functionImportParameter.getName());
                    xmlStreamWriter.writeAttribute(""String_Node_Str"",functionImportParameter.getType().getFullQualifiedName().toString());
                    if (functionImportParameter.getMode() != null) {
                      xmlStreamWriter.writeAttribute(""String_Node_Str"",functionImportParameter.getMode());
                    }
                    writeFacets(xmlStreamWriter,functionImportParameter.getFacets());
                    writeAnnotationAttributes(functionImportParameter.getAnnotationAttributes(),xmlStreamWriter);
                    writeDocumentation(functionImportParameter.getDocumentation(),xmlStreamWriter);
                    writeAnnotationElements(functionImportParameter.getAnnotationElements(),xmlStreamWriter);
                    xmlStreamWriter.writeEndElement();
                  }
                }
                writeAnnotationElements(functionImport.getAnnotationElements(),xmlStreamWriter);
                xmlStreamWriter.writeEndElement();
              }
            }
            writeAnnotationElements(entityContainer.getAnnotationElements(),xmlStreamWriter);
            xmlStreamWriter.writeEndElement();
          }
        }
        xmlStreamWriter.writeEndElement();
        writeAnnotationElements(schema.getAnnotationElements(),xmlStreamWriter);
      }
    }
    xmlStreamWriter.writeEndElement();
    xmlStreamWriter.writeEndElement();
    xmlStreamWriter.writeEndDocument();
    xmlStreamWriter.flush();
  }
 catch (  XMLStreamException e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
catch (  FactoryConfigurationError e) {
    throw new EntityProviderException(EntityProviderException.COMMON,e);
  }
}",0.9994316387748658
17963,"/** 
 * Add given content to message reference.
 */
public MessageReference addContent(Object... content){
  return new SimpleMessageReference(this.key,content);
}","/** 
 * Add given content to message reference.
 */
public MessageReference addContent(Object... content){
  if (this.content == null) {
    return new SimpleMessageReference(this.key,content);
  }
 else {
    List<Object> mergedContent=new ArrayList<Object>(this.content.size() + content.length);
    mergedContent.addAll(this.content);
    mergedContent.addAll(Arrays.asList(content));
    return new SimpleMessageReference(this.key,mergedContent);
  }
}",0.5266558966074314
17964,"private Response buildResponseForApplicationException(ODataApplicationException exception){
  ResponseBuilder responseBuilder=Response.noContent();
  Status status=extractStatus(exception);
  return responseBuilder.entity(exception.getMessage()).status(status).build();
}","private Response buildResponseForApplicationException(ODataApplicationException exception){
  ResponseBuilder responseBuilder=Response.noContent();
  int statusCode=extractStatus(exception);
  return responseBuilder.entity(exception.getMessage()).status(statusCode).build();
}",0.9140767824497258
17965,"private Status extractStatus(ODataException exception){
  Status extractedStatus=Status.INTERNAL_SERVER_ERROR;
  HttpStatusCodes httpStatus=null;
  if (exception instanceof ODataHttpException) {
    httpStatus=((ODataHttpException)exception).getHttpStatus();
  }
 else   if (exception instanceof ODataApplicationException) {
    httpStatus=((ODataApplicationException)exception).getHttpStatus();
  }
  if (httpStatus != null) {
    try {
      extractedStatus=Status.valueOf(httpStatus.name());
    }
 catch (    IllegalArgumentException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  return extractedStatus;
}","private int extractStatus(ODataException exception){
  int extractedStatusCode=HttpStatusCodes.INTERNAL_SERVER_ERROR.getStatusCode();
  if (exception instanceof ODataHttpException) {
    extractedStatusCode=((ODataHttpException)exception).getHttpStatus().getStatusCode();
  }
 else   if (exception instanceof ODataApplicationException) {
    extractedStatusCode=((ODataApplicationException)exception).getHttpStatus().getStatusCode();
  }
  return extractedStatusCode;
}",0.1729530818767249
17966,"@Test public void testGenericHttpExceptions() throws ClientProtocolException, IOException, ODataException {
  List<ODataHttpException> toTestExceptions=new ArrayList<ODataHttpException>();
  toTestExceptions.add(new ODataNotFoundException(ODataNotFoundException.ENTITY));
  toTestExceptions.add(new ODataBadRequestException(ODataBadRequestException.COMMON));
  toTestExceptions.add(new ODataForbiddenException(ODataForbiddenException.COMMON));
  int firstKey=1;
  for (  ODataHttpException oDataException : toTestExceptions) {
    String key=String.valueOf(firstKey++);
    Matcher<GetEntityView> match=new EntityKeyMatcher(key);
    when(processor.readEntity(Matchers.argThat(match))).thenThrow(oDataException);
    String uri=getEndpoint().toString() + ""String_Node_Str"" + key+ ""String_Node_Str"";
    HttpGet get=new HttpGet(URI.create(uri));
    HttpResponse response=getHttpClient().execute(get);
    assertEquals(""String_Node_Str"" + oDataException.getClass().getSimpleName() + ""String_Node_Str"",oDataException.getHttpStatus().getStatusCode(),response.getStatusLine().getStatusCode());
    get.releaseConnection();
  }
}","@Test public void testGenericHttpExceptions() throws Exception {
  List<ODataHttpException> toTestExceptions=getHttpExceptionsForTest();
  int firstKey=1;
  for (  ODataHttpException oDataException : toTestExceptions) {
    String key=String.valueOf(firstKey++);
    Matcher<GetEntityView> match=new EntityKeyMatcher(key);
    when(processor.readEntity(Matchers.argThat(match))).thenThrow(oDataException);
    String uri=getEndpoint().toString() + ""String_Node_Str"" + key+ ""String_Node_Str"";
    HttpGet get=new HttpGet(URI.create(uri));
    HttpResponse response=getHttpClient().execute(get);
    assertEquals(""String_Node_Str"" + oDataException.getClass().getSimpleName() + ""String_Node_Str"",oDataException.getHttpStatus().getStatusCode(),response.getStatusLine().getStatusCode());
    get.releaseConnection();
  }
}",0.833590932509016
17967,"@Override public Response toResponse(Exception exception){
  final Response response;
  Exception toHandleException=extractException(exception);
  exception.printStackTrace();
  if (toHandleException instanceof ODataApplicationException) {
    response=buildResponseForApplicationException((ODataApplicationException)toHandleException);
  }
 else   if (toHandleException instanceof ODataHttpException) {
    response=buildResponseForHttpException((ODataHttpException)toHandleException);
  }
 else {
    response=buildResponseForException(exception);
  }
  if (isInternalServerError(response)) {
    ODataExceptionMapperImpl.LOG.error(exception.getMessage(),exception);
  }
  return response;
}","@Override public Response toResponse(Exception exception){
  final Response response;
  Exception toHandleException=extractException(exception);
  if (toHandleException instanceof ODataApplicationException) {
    response=buildResponseForApplicationException((ODataApplicationException)toHandleException);
  }
 else   if (toHandleException instanceof ODataHttpException) {
    response=buildResponseForHttpException((ODataHttpException)toHandleException);
  }
 else {
    response=buildResponseForException(exception);
  }
  if (isInternalServerError(response)) {
    ODataExceptionMapperImpl.LOG.error(exception.getMessage(),exception);
  }
  return response;
}",0.9771217712177122
17968,"@Test public void test500RuntimeError() throws ClientProtocolException, IOException, ODataException {
  HttpGet get=new HttpGet(URI.create(this.getEndpoint().toString()));
  HttpResponse response=this.getHttpClient().execute(get);
  assertEquals(500,response.getStatusLine().getStatusCode());
  this.log.debug(StringHelper.inputStreamToString(response.getEntity().getContent()));
}","@Test public void test500RuntimeError() throws ClientProtocolException, IOException, ODataException {
  disableLogging(ODataExceptionMapperImpl.class);
  HttpGet get=new HttpGet(URI.create(this.getEndpoint().toString()));
  HttpResponse response=this.getHttpClient().execute(get);
  assertEquals(500,response.getStatusLine().getStatusCode());
  this.log.debug(StringHelper.inputStreamToString(response.getEntity().getContent()));
}",0.9384236453201972
17969,"@After public void after(){
  try {
    this.server.stopServer();
  }
  finally {
    FitStaticServiceFactory.setService(null);
  }
}","@After public void after(){
  reEnableLogging();
  try {
    this.server.stopServer();
  }
  finally {
    FitStaticServiceFactory.setService(null);
  }
}",0.926829268292683
17970,"private void splitPath(InitParameter param) throws ODataException {
  List<PathSegment> precedingPathSegements;
  List<PathSegment> odataPathSegements;
  if (param.getPathSplit() == 0) {
    precedingPathSegements=Collections.emptyList();
    odataPathSegements=param.getPathSegments();
  }
 else {
    if (param.getPathSegments().size() < param.getPathSplit()) {
      throw new ODataBadRequestException(ODataBadRequestException.URLTOSHORT);
    }
    precedingPathSegements=param.getPathSegments().subList(0,param.getPathSplit());
    int pathSegmentCount=param.getPathSegments().size();
    odataPathSegements=param.getPathSegments().subList(param.getPathSplit(),pathSegmentCount);
  }
  for (  PathSegment ps : odataPathSegements) {
    if (!ps.getMatrixParameters().isEmpty()) {
      throw new ODataNotFoundException(ODataNotFoundException.MATRIX);
    }
  }
  this.context.setODataPathSegment(this.convertPathSegmentList(odataPathSegements));
  this.context.setPrecedingPathSegment(this.convertPathSegmentList(precedingPathSegements));
}","private void splitPath(InitParameter param) throws ODataException {
  List<PathSegment> precedingPathSegements;
  List<PathSegment> odataPathSegements;
  if (param.getPathSplit() == 0) {
    precedingPathSegements=Collections.emptyList();
    odataPathSegements=param.getPathSegments();
  }
 else {
    if (param.getPathSegments().size() < param.getPathSplit()) {
      throw new ODataBadRequestException(ODataBadRequestException.URLTOSHORT);
    }
    precedingPathSegements=param.getPathSegments().subList(0,param.getPathSplit());
    int pathSegmentCount=param.getPathSegments().size();
    odataPathSegements=param.getPathSegments().subList(param.getPathSplit(),pathSegmentCount);
  }
  for (  PathSegment ps : odataPathSegements) {
    if (ps.getMatrixParameters() != null && !ps.getMatrixParameters().isEmpty()) {
      throw new ODataNotFoundException(ODataNotFoundException.MATRIX);
    }
  }
  this.context.setODataPathSegment(this.convertPathSegmentList(odataPathSegements));
  this.context.setPrecedingPathSegment(this.convertPathSegmentList(precedingPathSegements));
}",0.9830508474576272
17971,"public EdmElementImplProv(EdmImplProv edm,String name,FullQualifiedName typeName,EdmFacets edmFacets,EdmMapping edmMapping) throws EdmException {
  super(edm,name,typeName,edmFacets == null || edmFacets.isNullable() ? EdmMultiplicity.ZERO_TO_ONE : EdmMultiplicity.ONE);
}","public EdmElementImplProv(EdmImplProv edm,String name,FullQualifiedName typeName,EdmFacets edmFacets,EdmMapping edmMapping) throws EdmException {
  super(edm,name,typeName,edmFacets == null || edmFacets.isNullable() ? EdmMultiplicity.ZERO_TO_ONE : EdmMultiplicity.ONE);
  this.edmFacets=edmFacets;
  this.edmMapping=edmMapping;
}",0.9033333333333332
17972,"@Override protected EdmEntityContainer createEntityContainer(String name) throws ODataException {
  return new EdmEntityContainerImplProv(this,edmProvider.getEntityContainer(name));
}","@Override protected EdmEntityContainer createEntityContainer(String name) throws ODataException {
  EntityContainerInfo enitityContainerInfo=edmProvider.getEntityContainer(name);
  if (enitityContainerInfo == null) {
    throw new EdmException(EdmException.COMMON);
  }
  return new EdmEntityContainerImplProv(this,enitityContainerInfo);
}",0.5670498084291188
17973,"@Override protected EdmComplexType createComplexType(FullQualifiedName fqName) throws ODataException {
  return new EdmComplexTypeImplProv(this,edmProvider.getComplexType(fqName),fqName.getNamespace());
}","@Override protected EdmComplexType createComplexType(FullQualifiedName fqName) throws ODataException {
  ComplexType complexType=edmProvider.getComplexType(fqName);
  if (complexType == null) {
    throw new EdmException(EdmException.COMMON);
  }
  return new EdmComplexTypeImplProv(this,complexType,fqName.getNamespace());
}",0.6162570888468809
17974,"@Override protected EdmAssociation createAssociation(FullQualifiedName fqName) throws ODataException {
  return new EdmAssociationImplProv(this,edmProvider.getAssociation(fqName),fqName.getNamespace());
}","@Override protected EdmAssociation createAssociation(FullQualifiedName fqName) throws ODataException {
  Association association=edmProvider.getAssociation(fqName);
  if (association == null) {
    throw new EdmException(EdmException.COMMON);
  }
  return new EdmAssociationImplProv(this,association,fqName.getNamespace());
}",0.6238185255198487
17975,"@Override protected EdmEntityType createEntityType(FullQualifiedName fqName) throws ODataException {
  return new EdmEntityTypeImplProv(this,edmProvider.getEntityType(fqName),fqName.getNamespace());
}","@Override protected EdmEntityType createEntityType(FullQualifiedName fqName) throws ODataException {
  EntityType entityType=edmProvider.getEntityType(fqName);
  if (entityType == null) {
    throw new EdmException(EdmException.COMMON);
  }
  return new EdmEntityTypeImplProv(this,entityType,fqName.getNamespace());
}",0.6228239845261122
17976,"private void handleNormalInitialSegment() throws UriParserException, EdmException {
  final Matcher matcher=INITIAL_SEGMENT_PATTERN.matcher(currentPathSegment);
  if (!matcher.matches())   throw new UriParserException(""String_Node_Str"" + currentPathSegment);
  final String entityContainerName=matcher.group(1);
  final String segmentName=matcher.group(2);
  final String keyPredicate=matcher.group(3);
  final String emptyParentheses=matcher.group(4);
  UriParserImpl.LOG.debug(""String_Node_Str"" + currentPathSegment + ""String_Node_Str""+ entityContainerName+ ""String_Node_Str""+ segmentName+ ""String_Node_Str""+ keyPredicate+ ""String_Node_Str""+ emptyParentheses);
  uriResult.setEntityContainer(entityContainerName == null ? edm.getDefaultEntityContainer() : edm.getEntityContainer(entityContainerName));
  EdmEntitySet entitySet=null;
  EdmFunctionImport functionImport=null;
  try {
    entitySet=uriResult.getEntityContainer().getEntitySet(segmentName);
  }
 catch (  EdmException e) {
    functionImport=uriResult.getEntityContainer().getFunctionImport(segmentName);
  }
  if (entitySet != null) {
    uriResult.setStartEntitySet(entitySet);
    handleEntitySet(entitySet,keyPredicate);
  }
 else {
    uriResult.setFunctionImport(functionImport);
    handleFunctionImport(functionImport,emptyParentheses,keyPredicate);
  }
}","private void handleNormalInitialSegment() throws UriParserException, EdmException {
  final Matcher matcher=INITIAL_SEGMENT_PATTERN.matcher(currentPathSegment);
  if (!matcher.matches())   throw new UriParserException(""String_Node_Str"" + currentPathSegment);
  final String entityContainerName=matcher.group(1);
  final String segmentName=matcher.group(2);
  final String keyPredicate=matcher.group(3);
  final String emptyParentheses=matcher.group(4);
  UriParserImpl.LOG.debug(""String_Node_Str"" + currentPathSegment + ""String_Node_Str""+ entityContainerName+ ""String_Node_Str""+ segmentName+ ""String_Node_Str""+ keyPredicate+ ""String_Node_Str""+ emptyParentheses);
  uriResult.setEntityContainer(entityContainerName == null ? edm.getDefaultEntityContainer() : edm.getEntityContainer(entityContainerName));
  EdmEntitySet entitySet=null;
  EdmFunctionImport functionImport=null;
  try {
    entitySet=uriResult.getEntityContainer().getEntitySet(segmentName);
  }
 catch (  EdmException e) {
    functionImport=uriResult.getEntityContainer().getFunctionImport(segmentName);
  }
  if (entitySet != null) {
    uriResult.setStartEntitySet(entitySet);
    handleEntitySet(entitySet,keyPredicate);
  }
 else   if (functionImport != null) {
    uriResult.setFunctionImport(functionImport);
    handleFunctionImport(functionImport,emptyParentheses,keyPredicate);
  }
 else {
    throw new UriParserException(""String_Node_Str"" + segmentName);
  }
}",0.9605786618444846
17977,"@Override public EdmEntitySet getRelatedEntitySet(EdmNavigationProperty navigationProperty) throws EdmException {
  return null;
}","@Override public EdmEntitySet getRelatedEntitySet(EdmNavigationProperty navigationProperty) throws EdmException {
  EdmAssociationSet associationSet=edmEntityContainer.getAssociationSet(edmEntityContainer.getEntitySet(entitySet.getName()),navigationProperty);
  if (associationSet == null)   throw new EdmException();
  EdmAssociationSetEnd toEnd=associationSet.getEnd(navigationProperty.getToRole());
  if (toEnd == null)   throw new EdmException();
  EdmEntitySet targetEntitySet=toEnd.getEntitySet();
  if (targetEntitySet == null)   throw new EdmException();
  return targetEntitySet;
}",0.3472222222222222
17978,"@Override public Collection<String> getKeyPropertyNames() throws EdmException {
  return entityType.getKey().getKeys().keySet();
}","@Override public Collection<String> getKeyPropertyNames() throws EdmException {
  if (entityType.getKey() == null)   return Collections.<String>emptyList();
 else   return entityType.getKey().getKeys().keySet();
}",0.7580174927113703
17979,"@Override public List<EdmProperty> getKeyProperties() throws EdmException {
  if (edmKeyProperties == null) {
    String keyPropertyName;
    EdmProperty edmProperty;
    Collection<String> keyPropertyNames=getKeyPropertyNames();
    for (Iterator<String> iterator=keyPropertyNames.iterator(); iterator.hasNext(); ) {
      keyPropertyName=iterator.next();
      try {
        edmProperty=(EdmProperty)getProperty(keyPropertyName);
      }
 catch (      ClassCastException e) {
        throw new EdmException(e);
      }
      if (edmProperty != null) {
        edmKeyProperties.add(edmProperty);
      }
 else {
        throw new EdmException();
      }
    }
  }
  return edmKeyProperties;
}","@Override public List<EdmProperty> getKeyProperties() throws EdmException {
  if (edmKeyProperties == null) {
    EdmProperty edmProperty;
    edmKeyProperties=new ArrayList<EdmProperty>();
    for (    String keyPropertyName : getKeyPropertyNames()) {
      try {
        edmProperty=(EdmProperty)getProperty(keyPropertyName);
      }
 catch (      ClassCastException e) {
        throw new EdmException(e);
      }
      if (edmProperty != null) {
        edmKeyProperties.add(edmProperty);
      }
 else {
        throw new EdmException();
      }
    }
    if (edmBaseType != null)     edmKeyProperties.addAll(((EdmEntityType)edmBaseType).getKeyProperties());
  }
  return edmKeyProperties;
}",0.7084233261339092
17980,"@Override public EntityType getEntityType(final FullQualifiedName edmFQName) throws ODataRuntimeException, ODataMessageException {
  if (NAMESPACE_1.equals(edmFQName.getNamespace()))   if (ENTITY_TYPE_1_1.equals(edmFQName.getName())) {
    Map<String,Property> properties=new HashMap<String,Property>();
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,getFacets(false,null,null,null),null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,new CustomizableFeedMappings(null,null,null,null,null,EdmTargetPath.SyndicationTitle),null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,getFacets(null,2,null,null),null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",COMPLEX_TYPE_1,null,null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_INT16,null,null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_DATETIME,getFacets(true,null,null,null),new CustomizableFeedMappings(null,null,null,null,null,EdmTargetPath.SyndicationUpdated),null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,null,null,null,null));
    Map<String,PropertyRef> keyProperty=new HashMap<String,PropertyRef>();
    keyProperty.put(""String_Node_Str"",new PropertyRef(""String_Node_Str"",null));
    Map<String,NavigationProperty> navigationProperties=new HashMap<String,NavigationProperty>();
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_1,ROLE_1_1,ROLE_1_4,null,null));
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_2,ROLE_1_1,ROLE_1_2,null,null));
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_3,ROLE_1_1,ROLE_1_3,null,null));
    return new EntityType(ENTITY_TYPE_1_1.getName(),null,false,properties,null,null,null,true,null,new Key(keyProperty,null),navigationProperties);
  }
 else   if (ENTITY_TYPE_1_BASE.equals(edmFQName.getName())) {
    Map<String,Property> properties=new HashMap<String,Property>();
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,getFacets(false,null,""String_Node_Str"",null),null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,new CustomizableFeedMappings(null,null,null,null,null,EdmTargetPath.SyndicationTitle),null,null,null));
    Map<String,PropertyRef> keyProperty=new HashMap<String,PropertyRef>();
    keyProperty.put(""String_Node_Str"",new PropertyRef(""String_Node_Str"",null));
    return new EntityType(ENTITY_TYPE_1_BASE.getName(),null,true,properties,null,null,null,false,null,new Key(keyProperty,null),null);
  }
 else   if (ENTITY_TYPE_1_2.equals(edmFQName.getName())) {
    Map<String,Property> properties=new HashMap<String,Property>();
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_BOOLEAN,getFacets(true,null,null,null),null,null,null,null));
    Map<String,NavigationProperty> navigationProperties=new HashMap<String,NavigationProperty>();
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_2,ROLE_1_2,ROLE_1_1,null,null));
    return new EntityType(ENTITY_TYPE_1_2.getName(),ENTITY_TYPE_1_BASE,false,properties,null,null,null,false,null,null,navigationProperties);
  }
 else   if (ENTITY_TYPE_1_3.equals(edmFQName.getName())) {
    Map<String,Property> properties=new HashMap<String,Property>();
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_INT16,null,null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_INT16,getFacets(null,null,null,true),null,null,null,null));
    Map<String,NavigationProperty> navigationProperties=new HashMap<String,NavigationProperty>();
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_3,ROLE_1_3,ROLE_1_1,null,null));
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_4,ROLE_1_3,ROLE_1_5,null,null));
    return new EntityType(ENTITY_TYPE_1_3.getName(),ENTITY_TYPE_1_BASE,false,properties,null,null,null,false,null,null,navigationProperties);
  }
 else   if (ENTITY_TYPE_1_4.equals(edmFQName.getName())) {
    Map<String,NavigationProperty> navigationProperties=new HashMap<String,NavigationProperty>();
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_1,ROLE_1_4,ROLE_1_1,null,null));
    return new EntityType(ENTITY_TYPE_1_4.getName(),ENTITY_TYPE_1_1,false,null,null,null,null,true,null,null,navigationProperties);
  }
 else   if (ENTITY_TYPE_1_5.equals(edmFQName.getName())) {
    Map<String,Property> properties=new HashMap<String,Property>();
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,getFacets(false,null,null,null),null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_BINARY,null,null,null,null,null));
    Map<String,PropertyRef> keyProperty=new HashMap<String,PropertyRef>();
    keyProperty.put(""String_Node_Str"",new PropertyRef(""String_Node_Str"",null));
    Map<String,NavigationProperty> navigationProperties=new HashMap<String,NavigationProperty>();
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_4,ROLE_1_5,ROLE_1_3,null,null));
    return new EntityType(ENTITY_TYPE_1_5.getName(),null,false,properties,null,null,null,false,null,new Key(keyProperty,null),navigationProperties);
  }
 else {
    throw new ODataNotFoundException(ODataNotFoundException.ENTITY);
  }
 else   if (NAMESPACE_2.equals(edmFQName.getNamespace()))   if (ENTITY_TYPE_2_1.equals(edmFQName.getName())) {
    Map<String,Property> properties=new HashMap<String,Property>();
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_INT32,getFacets(false,null,null,true),null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,new CustomizableFeedMappings(null,null,null,null,null,EdmTargetPath.SyndicationTitle),null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,getFacets(false,null,null,null),null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,new CustomizableFeedMappings(null,null,null,null,null,EdmTargetPath.SyndicationAuthorUri),null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_BINARY,null,null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_BINARY,getFacets(true,null,null,null),null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,getFacets(true,null,null,null),new CustomizableFeedMappings(false,null,""String_Node_Str"",""String_Node_Str"",null,null),null,null,null));
    Map<String,PropertyRef> keyProperties=new HashMap<String,PropertyRef>();
    keyProperties.put(""String_Node_Str"",new PropertyRef(""String_Node_Str"",null));
    keyProperties.put(""String_Node_Str"",new PropertyRef(""String_Node_Str"",null));
    return new EntityType(ENTITY_TYPE_2_1.getName(),null,false,properties,null,null,null,true,null,new Key(keyProperties,null),null);
  }
 else {
    throw new ODataNotFoundException(ODataNotFoundException.ENTITY);
  }
 else   throw new ODataNotFoundException(ODataNotFoundException.ENTITY);
}","@Override public EntityType getEntityType(final FullQualifiedName edmFQName) throws ODataRuntimeException, ODataMessageException {
  if (NAMESPACE_1.equals(edmFQName.getNamespace()))   if (ENTITY_TYPE_1_1.getName().equals(edmFQName.getName())) {
    Map<String,Property> properties=new HashMap<String,Property>();
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,getFacets(false,null,null,null),null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,new CustomizableFeedMappings(null,null,null,null,null,EdmTargetPath.SyndicationTitle),null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,getFacets(null,2,null,null),null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",COMPLEX_TYPE_1,null,null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_INT16,null,null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_DATETIME,getFacets(true,null,null,null),new CustomizableFeedMappings(null,null,null,null,null,EdmTargetPath.SyndicationUpdated),null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,null,null,null,null));
    Map<String,PropertyRef> keyProperty=new HashMap<String,PropertyRef>();
    keyProperty.put(""String_Node_Str"",new PropertyRef(""String_Node_Str"",null));
    Map<String,NavigationProperty> navigationProperties=new HashMap<String,NavigationProperty>();
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_1,ROLE_1_1,ROLE_1_4,null,null));
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_2,ROLE_1_1,ROLE_1_2,null,null));
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_3,ROLE_1_1,ROLE_1_3,null,null));
    return new EntityType(ENTITY_TYPE_1_1.getName(),null,false,properties,null,null,null,true,null,new Key(keyProperty,null),navigationProperties);
  }
 else   if (ENTITY_TYPE_1_BASE.getName().equals(edmFQName.getName())) {
    Map<String,Property> properties=new HashMap<String,Property>();
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,getFacets(false,null,""String_Node_Str"",null),null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,new CustomizableFeedMappings(null,null,null,null,null,EdmTargetPath.SyndicationTitle),null,null,null));
    Map<String,PropertyRef> keyProperty=new HashMap<String,PropertyRef>();
    keyProperty.put(""String_Node_Str"",new PropertyRef(""String_Node_Str"",null));
    return new EntityType(ENTITY_TYPE_1_BASE.getName(),null,true,properties,null,null,null,false,null,new Key(keyProperty,null),null);
  }
 else   if (ENTITY_TYPE_1_2.getName().equals(edmFQName.getName())) {
    Map<String,Property> properties=new HashMap<String,Property>();
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_BOOLEAN,getFacets(true,null,null,null),null,null,null,null));
    Map<String,NavigationProperty> navigationProperties=new HashMap<String,NavigationProperty>();
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_2,ROLE_1_2,ROLE_1_1,null,null));
    return new EntityType(ENTITY_TYPE_1_2.getName(),ENTITY_TYPE_1_BASE,false,properties,null,null,null,false,null,null,navigationProperties);
  }
 else   if (ENTITY_TYPE_1_3.getName().equals(edmFQName.getName())) {
    Map<String,Property> properties=new HashMap<String,Property>();
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_INT16,null,null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_INT16,getFacets(null,null,null,true),null,null,null,null));
    Map<String,NavigationProperty> navigationProperties=new HashMap<String,NavigationProperty>();
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_3,ROLE_1_3,ROLE_1_1,null,null));
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_4,ROLE_1_3,ROLE_1_5,null,null));
    return new EntityType(ENTITY_TYPE_1_3.getName(),ENTITY_TYPE_1_BASE,false,properties,null,null,null,false,null,null,navigationProperties);
  }
 else   if (ENTITY_TYPE_1_4.getName().equals(edmFQName.getName())) {
    Map<String,NavigationProperty> navigationProperties=new HashMap<String,NavigationProperty>();
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_1,ROLE_1_4,ROLE_1_1,null,null));
    return new EntityType(ENTITY_TYPE_1_4.getName(),ENTITY_TYPE_1_1,false,null,null,null,null,true,null,null,navigationProperties);
  }
 else   if (ENTITY_TYPE_1_5.getName().equals(edmFQName.getName())) {
    Map<String,Property> properties=new HashMap<String,Property>();
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,getFacets(false,null,null,null),null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_BINARY,null,null,null,null,null));
    Map<String,PropertyRef> keyProperty=new HashMap<String,PropertyRef>();
    keyProperty.put(""String_Node_Str"",new PropertyRef(""String_Node_Str"",null));
    Map<String,NavigationProperty> navigationProperties=new HashMap<String,NavigationProperty>();
    navigationProperties.put(""String_Node_Str"",new NavigationProperty(""String_Node_Str"",ASSOCIATION_1_4,ROLE_1_5,ROLE_1_3,null,null));
    return new EntityType(ENTITY_TYPE_1_5.getName(),null,false,properties,null,null,null,false,null,new Key(keyProperty,null),navigationProperties);
  }
 else {
    throw new ODataNotFoundException(ODataNotFoundException.ENTITY);
  }
 else   if (NAMESPACE_2.equals(edmFQName.getNamespace()))   if (ENTITY_TYPE_2_1.getName().equals(edmFQName.getName())) {
    Map<String,Property> properties=new HashMap<String,Property>();
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_INT32,getFacets(false,null,null,true),null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,new CustomizableFeedMappings(null,null,null,null,null,EdmTargetPath.SyndicationTitle),null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,getFacets(false,null,null,null),null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,null,new CustomizableFeedMappings(null,null,null,null,null,EdmTargetPath.SyndicationAuthorUri),null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_BINARY,null,null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_BINARY,getFacets(true,null,null,null),null,null,null,null));
    properties.put(""String_Node_Str"",new Property(""String_Node_Str"",EDM_STRING,getFacets(true,null,null,null),new CustomizableFeedMappings(false,null,""String_Node_Str"",""String_Node_Str"",null,null),null,null,null));
    Map<String,PropertyRef> keyProperties=new HashMap<String,PropertyRef>();
    keyProperties.put(""String_Node_Str"",new PropertyRef(""String_Node_Str"",null));
    keyProperties.put(""String_Node_Str"",new PropertyRef(""String_Node_Str"",null));
    return new EntityType(ENTITY_TYPE_2_1.getName(),null,false,properties,null,null,null,true,null,new Key(keyProperties,null),null);
  }
 else {
    throw new ODataNotFoundException(ODataNotFoundException.ENTITY);
  }
 else   throw new ODataNotFoundException(ODataNotFoundException.ENTITY);
}",0.9956112852664576
17981,"private Integer applySystemQueryOptions(final EdmEntitySet targetEntitySet,List<?> data,final InlineCount inlineCount,final String filter,final String orderBy,final String skipToken,final int skip,final Integer top){
  if (filter != null)   for (  Object element : data)   if (!appliesFilter(element,filter))   data.remove(element);
  final Integer count=inlineCount == InlineCount.ALLPAGES ? data.size() : null;
  if (orderBy != null)   ;
 else   if (skipToken != null || skip != 0 || top != null)   ;
  if (skipToken != null)   ;
  for (int i=0; i < skip; i++)   data.remove(0);
  if (top != null)   while (data.size() > top)   data.remove(top.intValue());
  return count;
}","private Integer applySystemQueryOptions(final EdmEntitySet targetEntitySet,List<?> data,final InlineCount inlineCount,final String filter,final String orderBy,final String skipToken,final int skip,final Integer top) throws ODataException {
  if (filter != null)   for (  Object element : data)   if (!appliesFilter(element,filter))   data.remove(element);
  final Integer count=inlineCount == InlineCount.ALLPAGES ? data.size() : null;
  if (orderBy != null)   ;
 else   if (skipToken != null || skip != 0 || top != null)   if (data instanceof Comparable<?>)   Collections.sort((List<? extends Comparable<Object>>)data);
 else   throw new ODataException();
  if (skipToken != null)   ;
  for (int i=0; i < skip; i++)   data.remove(0);
  if (top != null)   while (data.size() > top)   data.remove(top.intValue());
  return count;
}",0.897742363877822
17982,"@Override public Object readRelatedData(final EdmEntitySet sourceEntitySet,final Object sourceData,final EdmEntitySet targetEntitySet,final Map<String,Object> targetKeys) throws ODataException {
  if (""String_Node_Str"".equals(targetEntitySet.getName())) {
    ArrayList<Object> data=new ArrayList<Object>();
    if (""String_Node_Str"".equals(sourceEntitySet.getName())) {
      for (      final Employee employee : dataContainer.getEmployeeSet())       if (employee.getTeam().getId().equals(((Team)sourceData).getId()))       data.add(employee);
    }
 else     if (""String_Node_Str"".equals(sourceEntitySet.getName())) {
      for (      final Employee employee : dataContainer.getEmployeeSet())       if (employee.getRoom().getId().equals(((Room)sourceData).getId()))       data.add(employee);
    }
 else     if (""String_Node_Str"".equals(sourceEntitySet.getName())) {
      for (      final Employee employee : dataContainer.getEmployeeSet())       if (employee.getManager().getId().equals(((Manager)sourceData).getId()))       data.add(employee);
    }
    if (data.isEmpty())     throw new ODataNotFoundException(ODataNotFoundException.ENTITY);
 else     return data;
  }
 else {
    throw new ODataNotFoundException(ODataNotFoundException.ENTITY);
  }
}","@Override public Object readRelatedData(final EdmEntitySet sourceEntitySet,final Object sourceData,final EdmEntitySet targetEntitySet,final Map<String,Object> targetKeys) throws ODataException {
  if (""String_Node_Str"".equals(targetEntitySet.getName())) {
    ArrayList<Object> data=new ArrayList<Object>();
    if (""String_Node_Str"".equals(sourceEntitySet.getName())) {
      for (      final Employee employee : dataContainer.getEmployeeSet())       if (employee.getTeam().getId().equals(((Team)sourceData).getId()))       data.add(employee);
    }
 else     if (""String_Node_Str"".equals(sourceEntitySet.getName())) {
      for (      final Employee employee : dataContainer.getEmployeeSet())       if (employee.getRoom().getId().equals(((Room)sourceData).getId()))       data.add(employee);
    }
 else     if (""String_Node_Str"".equals(sourceEntitySet.getName())) {
      for (      final Employee employee : dataContainer.getEmployeeSet())       if (employee.getManager().getId().equals(((Manager)sourceData).getId()))       data.add(employee);
    }
    if (data.isEmpty())     throw new ODataNotFoundException(ODataNotFoundException.ENTITY);
 else     return data;
  }
 else   if (""String_Node_Str"".equals(targetEntitySet.getName())) {
    if (((Employee)sourceData).getTeam() == null)     throw new ODataNotFoundException(ODataNotFoundException.ENTITY);
 else     return ((Employee)sourceData).getTeam();
  }
 else   if (""String_Node_Str"".equals(targetEntitySet.getName())) {
    return null;
  }
 else {
    throw new ODataNotFoundException(ODataNotFoundException.ENTITY);
  }
}",0.884277172001407
17983,"private void handleFunctionImport(final EdmFunctionImport functionImport,final String emptyParentheses,final String keyPredicate) throws UriParserException, EdmException {
  final EdmTyped returnType=functionImport.getReturnType();
  final EdmType type=returnType.getType();
  final boolean isCollection=returnType.getMultiplicity() == EdmMultiplicity.MANY;
  if (type.getKind() == EdmTypeKind.ENTITY && isCollection) {
    handleEntitySet(functionImport.getEntitySet(),keyPredicate);
    return;
  }
  if (emptyParentheses != null)   throw new UriParserException(""String_Node_Str"");
  this.uriResult.setTargetType(type);
switch (type.getKind()) {
case SIMPLE:
    uriResult.setUriType(isCollection ? UriType.URI13 : UriType.URI14);
  break;
case COMPLEX:
uriResult.setUriType(isCollection ? UriType.URI11 : UriType.URI12);
break;
case ENTITY:
uriResult.setUriType(UriType.URI10);
break;
default :
throw new UriParserException(""String_Node_Str"" + currentPathSegment + ""String_Node_Str""+ pathSegments);
}
if (!this.pathSegments.isEmpty()) if (this.uriResult.getUriType() == UriType.URI14) {
currentPathSegment=pathSegments.remove(0).getPath();
if (""String_Node_Str"".equals(currentPathSegment)) uriResult.setValue(true);
 else throw new UriParserException(""String_Node_Str"" + currentPathSegment);
}
if (!pathSegments.isEmpty()) throw new UriParserException(""String_Node_Str"" + currentPathSegment + ""String_Node_Str""+ this.pathSegments);
}","private void handleFunctionImport(final EdmFunctionImport functionImport,final String emptyParentheses,final String keyPredicate) throws UriParserException, EdmException {
  final EdmTyped returnType=functionImport.getReturnType();
  final EdmType type=returnType.getType();
  final boolean isCollection=returnType.getMultiplicity() == EdmMultiplicity.MANY;
  if (type.getKind() == EdmTypeKind.ENTITY && isCollection) {
    handleEntitySet(functionImport.getEntitySet(),keyPredicate);
    return;
  }
  if (emptyParentheses != null)   throw new UriParserException(""String_Node_Str"");
  uriResult.setTargetType(type);
switch (type.getKind()) {
case SIMPLE:
    uriResult.setUriType(isCollection ? UriType.URI13 : UriType.URI14);
  break;
case COMPLEX:
uriResult.setUriType(isCollection ? UriType.URI11 : UriType.URI12);
break;
case ENTITY:
uriResult.setUriType(UriType.URI10);
break;
default :
throw new UriParserException(""String_Node_Str"" + currentPathSegment + ""String_Node_Str""+ pathSegments);
}
if (!pathSegments.isEmpty()) if (uriResult.getUriType() == UriType.URI14) {
currentPathSegment=pathSegments.remove(0).getPath();
if (""String_Node_Str"".equals(currentPathSegment)) uriResult.setValue(true);
 else throw new UriParserException(""String_Node_Str"" + currentPathSegment);
}
ensureLastSegment();
}",0.9182481751824818
17984,"private void handleEntitySet(final EdmEntitySet entitySet,final String keyPredicate) throws UriParserException, EdmException {
  final EdmEntityType entityType=entitySet.getEntityType();
  this.uriResult.setTargetType(entityType);
  this.uriResult.setTargetEntitySet(entitySet);
  if (keyPredicate == null) {
    if (this.pathSegments.isEmpty()) {
      this.uriResult.setUriType(UriType.URI1);
    }
 else {
      currentPathSegment=pathSegments.remove(0).getPath();
      checkCount();
      if (uriResult.isCount())       uriResult.setUriType(UriType.URI15);
 else       throw new UriParserException(""String_Node_Str"" + currentPathSegment + ""String_Node_Str""+ this.pathSegments);
    }
  }
 else {
    this.uriResult.setKeyPredicates(this.parseKey(keyPredicate,entityType));
    if (this.pathSegments.isEmpty())     this.uriResult.setUriType(UriType.URI2);
 else     handleNavigationPathOptions();
  }
}","private void handleEntitySet(final EdmEntitySet entitySet,final String keyPredicate) throws UriParserException, EdmException {
  final EdmEntityType entityType=entitySet.getEntityType();
  uriResult.setTargetType(entityType);
  uriResult.setTargetEntitySet(entitySet);
  if (keyPredicate == null) {
    if (pathSegments.isEmpty()) {
      uriResult.setUriType(UriType.URI1);
    }
 else {
      currentPathSegment=pathSegments.remove(0).getPath();
      checkCount();
      if (uriResult.isCount())       uriResult.setUriType(UriType.URI15);
 else       throw new UriParserException(""String_Node_Str"" + currentPathSegment + ""String_Node_Str""+ this.pathSegments);
    }
  }
 else {
    uriResult.setKeyPredicates(parseKey(keyPredicate,entityType));
    if (pathSegments.isEmpty())     uriResult.setUriType(UriType.URI2);
 else     handleNavigationPathOptions();
  }
}",0.901805869074492
17985,"private ArrayList<KeyPredicate> parseKey(final String keyPredicate,final EdmEntityType entityType) throws UriParserException, EdmException {
  ArrayList<KeyPredicate> keyPredicates=new ArrayList<KeyPredicate>();
  List<EdmProperty> keyProperties=entityType.getKeyProperties();
  final boolean singleKey=keyProperties.size() == 1;
  for (  final String key : keyPredicate.split(""String_Node_Str"")) {
    final Matcher matcher=NAMED_VALUE_PATTERN.matcher(key);
    if (!matcher.matches())     throw new UriParserException(""String_Node_Str"" + key);
    String name=matcher.group(1);
    final String value=matcher.group(2);
    UriParser.LOG.debug(""String_Node_Str"" + keyPredicate + ""String_Node_Str""+ name+ ""String_Node_Str""+ value);
    if (name == null)     if (singleKey)     name=keyProperties.get(0).getName();
 else     throw new UriParserException(""String_Node_Str"" + keyPredicate);
    EdmProperty keyProperty=null;
    for (    EdmProperty testKeyProperty : keyProperties)     if (testKeyProperty.getName().equals(name)) {
      keyProperty=testKeyProperty;
      break;
    }
    if (keyProperty == null)     throw new UriParserException(""String_Node_Str"" + keyPredicate);
    keyProperties.remove(keyProperty);
    final UriLiteral uriLiteral=parseUriLiteral(value);
    if (!isCompatible(uriLiteral,(EdmSimpleType)keyProperty.getType()))     throw new UriParserException(""String_Node_Str"" + value + ""String_Node_Str""+ keyProperty.getName());
    keyPredicates.add(new KeyPredicate(uriLiteral.getLiteral(),keyProperty));
  }
  if (!keyProperties.isEmpty())   throw new UriParserException(""String_Node_Str"" + keyPredicate);
  return keyPredicates;
}","private ArrayList<KeyPredicate> parseKey(final String keyPredicate,final EdmEntityType entityType) throws UriParserException, EdmException {
  final List<EdmProperty> keyProperties=entityType.getKeyProperties();
  ArrayList<EdmProperty> parsedKeyProperties=new ArrayList<EdmProperty>();
  ArrayList<KeyPredicate> keyPredicates=new ArrayList<KeyPredicate>();
  for (  final String key : keyPredicate.split(""String_Node_Str"",-1)) {
    final Matcher matcher=NAMED_VALUE_PATTERN.matcher(key);
    if (!matcher.matches())     throw new UriParserException(""String_Node_Str"" + key);
    String name=matcher.group(1);
    final String value=matcher.group(2);
    UriParser.LOG.debug(""String_Node_Str"" + keyPredicate + ""String_Node_Str""+ name+ ""String_Node_Str""+ value);
    if (name == null)     if (keyProperties.size() == 1)     name=keyProperties.get(0).getName();
 else     throw new UriParserException(""String_Node_Str"" + keyPredicate);
    EdmProperty keyProperty=null;
    for (    final EdmProperty testKeyProperty : keyProperties)     if (testKeyProperty.getName().equals(name)) {
      keyProperty=testKeyProperty;
      break;
    }
    if (keyProperty == null)     throw new UriParserException(name + ""String_Node_Str"");
    if (parsedKeyProperties.contains(keyProperty))     throw new UriParserException(""String_Node_Str"" + keyPredicate);
    parsedKeyProperties.add(keyProperty);
    final UriLiteral uriLiteral=parseUriLiteral(value);
    if (!isCompatible(uriLiteral,(EdmSimpleType)keyProperty.getType()))     throw new UriParserException(""String_Node_Str"" + value + ""String_Node_Str""+ keyProperty.getName());
    keyPredicates.add(new KeyPredicate(uriLiteral.getLiteral(),keyProperty));
  }
  if (parsedKeyProperties.size() != keyProperties.size())   throw new UriParserException(""String_Node_Str"" + keyPredicate);
  return keyPredicates;
}",0.5725691474194469
17986,"private void handlePropertyPath(final EdmProperty property) throws UriParserException, EdmException {
  this.uriResult.addProperty(property);
  final EdmType type=property.getType();
  if (pathSegments.isEmpty()) {
    if (type.getKind() == EdmTypeKind.SIMPLE)     if (this.uriResult.getPropertyPath().size() == 1)     this.uriResult.setUriType(UriType.URI5);
 else     this.uriResult.setUriType(UriType.URI4);
 else     if (type.getKind() == EdmTypeKind.COMPLEX)     this.uriResult.setUriType(UriType.URI3);
 else     throw new UriParserException(""String_Node_Str"" + currentPathSegment + ""String_Node_Str""+ pathSegments);
    this.uriResult.setTargetType(type);
  }
 else {
    currentPathSegment=pathSegments.remove(0).getPath();
switch (type.getKind()) {
case SIMPLE:
      if (""String_Node_Str"".equals(currentPathSegment))       if (this.pathSegments.isEmpty()) {
        this.uriResult.setValue(true);
        if (this.uriResult.getPropertyPath().size() == 1)         this.uriResult.setUriType(UriType.URI5);
 else         this.uriResult.setUriType(UriType.URI4);
      }
 else {
        throw new UriParserException(""String_Node_Str"");
      }
 else       throw new UriParserException(""String_Node_Str"" + currentPathSegment + ""String_Node_Str""+ this.pathSegments);
    this.uriResult.setTargetType(type);
  break;
case COMPLEX:
final EdmProperty nextProperty=(EdmProperty)((EdmComplexType)type).getProperty(currentPathSegment);
handlePropertyPath(nextProperty);
break;
default :
throw new UriParserException(""String_Node_Str"" + currentPathSegment + ""String_Node_Str""+ pathSegments);
}
}
}","private void handlePropertyPath(final EdmProperty property) throws UriParserException, EdmException {
  this.uriResult.addProperty(property);
  final EdmType type=property.getType();
  if (pathSegments.isEmpty()) {
    if (type.getKind() == EdmTypeKind.SIMPLE)     if (this.uriResult.getPropertyPath().size() == 1)     this.uriResult.setUriType(UriType.URI5);
 else     this.uriResult.setUriType(UriType.URI4);
 else     if (type.getKind() == EdmTypeKind.COMPLEX)     this.uriResult.setUriType(UriType.URI3);
 else     throw new UriParserException(""String_Node_Str"" + currentPathSegment + ""String_Node_Str""+ pathSegments);
    this.uriResult.setTargetType(type);
  }
 else {
    currentPathSegment=pathSegments.remove(0).getPath();
switch (type.getKind()) {
case SIMPLE:
      if (""String_Node_Str"".equals(currentPathSegment)) {
        ensureLastSegment();
        uriResult.setValue(true);
        if (uriResult.getPropertyPath().size() == 1)         uriResult.setUriType(UriType.URI5);
 else         uriResult.setUriType(UriType.URI4);
      }
 else {
        throw new UriParserException(""String_Node_Str"" + currentPathSegment + ""String_Node_Str""+ this.pathSegments);
      }
    uriResult.setTargetType(type);
  break;
case COMPLEX:
final EdmProperty nextProperty=(EdmProperty)((EdmComplexType)type).getProperty(currentPathSegment);
handlePropertyPath(nextProperty);
break;
default :
throw new UriParserException(""String_Node_Str"" + currentPathSegment + ""String_Node_Str""+ pathSegments);
}
}
}",0.890038809831824
17987,"/** 
 * Parse the URI part after an OData service root, already splitted into path segments and query parameters.
 * @param pathSegments  the segments of the resource path, already unescaped
 * @param queryParameters  the query parameters, already unescaped
 * @return a {@link UriParserResult} instance containing the parsed information
 * @throws UriParserException
 */
public UriParserResult parse(final List<PathSegment> pathSegments,final Map<String,String> queryParameters) throws UriParserException {
  this.pathSegments=pathSegments;
  systemQueryOptions=new HashMap<SystemQueryOption,String>();
  otherQueryParameters=new HashMap<String,String>();
  uriResult=new UriParserResult();
  preparePathSegments();
  try {
    handleResourcePath();
    distributeQueryParameters(queryParameters);
    checkSystemQueryOptionsCompatibility();
    handleSystemQueryOptions();
    handleFunctionImportParameters();
  }
 catch (  EdmException e) {
    throw new UriParserException(""String_Node_Str"",e);
  }
  uriResult.setCustomQueryOptions(otherQueryParameters);
  UriParser.LOG.debug(uriResult.toString());
  return uriResult;
}","/** 
 * Parse the URI part after an OData service root, already splitted into path segments and query parameters.
 * @param pathSegments  the {@link PathSegment}s of the resource path, already unescaped
 * @param queryParameters  the query parameters, already unescaped
 * @return a {@link UriParserResult} instance containing the parsed information
 * @throws UriParserException
 */
public UriParserResult parse(final List<PathSegment> pathSegments,final Map<String,String> queryParameters) throws UriParserException {
  this.pathSegments=pathSegments;
  systemQueryOptions=new HashMap<SystemQueryOption,String>();
  otherQueryParameters=new HashMap<String,String>();
  uriResult=new UriParserResult();
  preparePathSegments();
  try {
    handleResourcePath();
    distributeQueryParameters(queryParameters);
    checkSystemQueryOptionsCompatibility();
    handleSystemQueryOptions();
    handleFunctionImportParameters();
  }
 catch (  EdmException e) {
    throw new UriParserException(""String_Node_Str"",e);
  }
  uriResult.setCustomQueryOptions(otherQueryParameters);
  UriParser.LOG.debug(uriResult.toString());
  return uriResult;
}",0.9885260370697264
17988,"private void handleNavigationPathOptions() throws UriParserException, EdmException {
  currentPathSegment=pathSegments.remove(0).getPath();
  checkCount();
  if (uriResult.isCount()) {
    uriResult.setUriType(UriType.URI16);
  }
 else   if (""String_Node_Str"".equals(currentPathSegment)) {
    if (uriResult.getTargetEntitySet().getEntityType().hasStream())     if (this.pathSegments.isEmpty()) {
      this.uriResult.setUriType(UriType.URI17);
      this.uriResult.setValue(true);
    }
 else {
      throw new UriParserException(""String_Node_Str"" + currentPathSegment + ""String_Node_Str""+ this.pathSegments);
    }
 else     throw new UriParserException(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(currentPathSegment)) {
    this.uriResult.setLinks(true);
    if (pathSegments.isEmpty())     throw new UriParserException(""String_Node_Str"");
    currentPathSegment=pathSegments.remove(0).getPath();
    handleNavigationProperties();
  }
 else {
    handleNavigationProperties();
  }
}","private void handleNavigationPathOptions() throws UriParserException, EdmException {
  currentPathSegment=pathSegments.remove(0).getPath();
  checkCount();
  if (uriResult.isCount()) {
    uriResult.setUriType(UriType.URI16);
  }
 else   if (""String_Node_Str"".equals(currentPathSegment)) {
    if (uriResult.getTargetEntitySet().getEntityType().hasStream()) {
      ensureLastSegment();
      uriResult.setUriType(UriType.URI17);
      uriResult.setValue(true);
    }
 else     throw new UriParserException(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(currentPathSegment)) {
    this.uriResult.setLinks(true);
    if (pathSegments.isEmpty())     throw new UriParserException(""String_Node_Str"");
    currentPathSegment=pathSegments.remove(0).getPath();
    handleNavigationProperties();
  }
 else {
    handleNavigationProperties();
  }
}",0.6533692722371968
17989,"private void handleResourcePath() throws UriParserException, EdmException {
  UriParser.LOG.debug(""String_Node_Str"" + pathSegments);
  if (pathSegments.isEmpty()) {
    uriResult.setUriType(UriType.URI0);
    return;
  }
  currentPathSegment=pathSegments.remove(0).getPath();
  if (""String_Node_Str"".equals(currentPathSegment))   if (this.pathSegments.isEmpty())   uriResult.setUriType(UriType.URI8);
 else   throw new UriParserException(""String_Node_Str"" + this.pathSegments);
 else   if (""String_Node_Str"".equals(currentPathSegment))   if (this.pathSegments.isEmpty())   uriResult.setUriType(UriType.URI9);
 else   throw new UriParserException(""String_Node_Str"" + this.pathSegments);
 else   handleNormalInitialSegment();
}","private void handleResourcePath() throws UriParserException, EdmException {
  UriParser.LOG.debug(""String_Node_Str"" + pathSegments);
  if (pathSegments.isEmpty()) {
    uriResult.setUriType(UriType.URI0);
  }
 else {
    currentPathSegment=pathSegments.remove(0).getPath();
    if (""String_Node_Str"".equals(currentPathSegment)) {
      ensureLastSegment();
      uriResult.setUriType(UriType.URI8);
    }
 else     if (""String_Node_Str"".equals(currentPathSegment)) {
      ensureLastSegment();
      uriResult.setUriType(UriType.URI9);
    }
 else {
      handleNormalInitialSegment();
    }
  }
}",0.708018154311649
17990,"private void checkQueryParameterCompatibility() throws UriParserException {
  UriParser.LOG.debug(""String_Node_Str"" + odataQueryParameters);
  UriType uriType=uriResult.getUriType();
  for (  SystemQueryOption queryOption : odataQueryParameters.keySet()) {
    if (!uriType.isCompatible(queryOption))     throw new UriParserException(""String_Node_Str"" + queryOption + ""String_Node_Str""+ uriType);
  }
}","private void checkQueryParameterCompatibility() throws UriParserException {
  UriType uriType=uriResult.getUriType();
  for (  SystemQueryOption queryOption : odataQueryParameters.keySet()) {
    if (uriType == UriType.URI4 && queryOption == SystemQueryOption.$format && uriResult.isValue() == true)     throw new UriParserException(""String_Node_Str"" + queryOption + ""String_Node_Str""+ uriType);
    if (uriType == UriType.URI5 && queryOption == SystemQueryOption.$format && uriResult.isValue() == true)     throw new UriParserException(""String_Node_Str"" + queryOption + ""String_Node_Str""+ uriType);
    if (!uriType.isCompatible(queryOption))     throw new UriParserException(""String_Node_Str"" + queryOption + ""String_Node_Str""+ uriType);
  }
}",0.4725370531822144
17991,"private void handleSystemQueryOptionInlineCount(final String inlineCount) throws UriParserException {
  if (""String_Node_Str"".equals(inlineCount))   uriResult.setInlineCount(InlineCount.ALLPAGES);
 else   if (""String_Node_Str"".equals(inlineCount))   uriResult.setInlineCount(InlineCount.NONE);
 else   if (inlineCount != null)   throw new UriParserException(""String_Node_Str"" + inlineCount + ""String_Node_Str"");
}","private void handleSystemQueryOptionInlineCount(final String inlineCount) throws UriParserException {
  if (""String_Node_Str"".equals(inlineCount))   uriResult.setInlineCount(InlineCount.ALLPAGES);
 else   if (""String_Node_Str"".equals(inlineCount))   uriResult.setInlineCount(InlineCount.NONE);
 else   throw new UriParserException(""String_Node_Str"" + inlineCount + ""String_Node_Str"");
}",0.9662077596996246
17992,"private void handleSystemQueryOptionSkip(final String skip) throws UriParserException {
  if (skip != null) {
    try {
      uriResult.setSkip(Integer.valueOf(skip));
    }
 catch (    NumberFormatException e) {
      throw new UriParserException(""String_Node_Str"" + skip + ""String_Node_Str"",e);
    }
    if (uriResult.getSkip() < 0)     throw new UriParserException(""String_Node_Str"");
  }
}","private void handleSystemQueryOptionSkip(final String skip) throws UriParserException {
  try {
    uriResult.setSkip(Integer.valueOf(skip));
  }
 catch (  NumberFormatException e) {
    throw new UriParserException(""String_Node_Str"" + skip + ""String_Node_Str"",e);
  }
  if (uriResult.getSkip() < 0)   throw new UriParserException(""String_Node_Str"");
}",0.935656836461126
17993,"public UriParserResult parse(final List<PathSegment> pathSegments,Map<String,String> queryParameters) throws UriParserException {
  UriParser.LOG.debug(pathSegments.toString());
  this.uriResult=new UriParserResult();
  this.pathSegments=pathSegments;
  handleResourcePath();
  this.odataQueryParameters=new HashMap<SystemQueryOption,String>();
  this.otherQueryParameters=new HashMap<String,String>();
  for (  String queryOptionString : queryParameters.keySet()) {
    try {
      if (queryOptionString.startsWith(""String_Node_Str"")) {
        SystemQueryOption queryOption=SystemQueryOption.valueOf(queryOptionString);
        this.odataQueryParameters.put(queryOption,queryParameters.get(queryOptionString));
      }
 else {
        otherQueryParameters.put(queryOptionString,queryParameters.get(queryOptionString));
      }
    }
 catch (    IllegalArgumentException e) {
      throw new UriParserException(""String_Node_Str"" + queryOptionString);
    }
  }
  checkQueryParameterCompatibility();
  handleQueryParameters();
  return uriResult;
}","public UriParserResult parse(final List<PathSegment> pathSegments,Map<String,String> queryParameters) throws UriParserException {
  UriParser.LOG.debug(pathSegments.toString());
  this.uriResult=new UriParserResult();
  this.pathSegments=pathSegments;
  handleResourcePath();
  this.odataQueryParameters=new HashMap<SystemQueryOption,String>();
  this.otherQueryParameters=new HashMap<String,String>();
  UriParser.LOG.debug(""String_Node_Str"" + queryParameters);
  for (  String queryOptionString : queryParameters.keySet()) {
    try {
      if (queryOptionString.startsWith(""String_Node_Str"")) {
        SystemQueryOption queryOption=SystemQueryOption.valueOf(queryOptionString);
        this.odataQueryParameters.put(queryOption,queryParameters.get(queryOptionString));
      }
 else {
        otherQueryParameters.put(queryOptionString,queryParameters.get(queryOptionString));
      }
    }
 catch (    IllegalArgumentException e) {
      throw new UriParserException(""String_Node_Str"" + queryOptionString);
    }
  }
  checkQueryParameterCompatibility();
  handleQueryParameters();
  return uriResult;
}",0.9721706864564008
17994,"private void handleSystemQueryOptionTop(final String top) throws UriParserException {
  if (top != null) {
    try {
      uriResult.setTop(Integer.valueOf(top));
    }
 catch (    NumberFormatException e) {
      throw new UriParserException(""String_Node_Str"" + top + ""String_Node_Str"",e);
    }
    if (uriResult.getTop() < 0)     throw new UriParserException(""String_Node_Str"");
  }
}","private void handleSystemQueryOptionTop(final String top) throws UriParserException {
  try {
    uriResult.setTop(Integer.valueOf(top));
  }
 catch (  NumberFormatException e) {
    throw new UriParserException(""String_Node_Str"" + top + ""String_Node_Str"",e);
  }
  if (uriResult.getTop() < 0)   throw new UriParserException(""String_Node_Str"");
}",0.9358799454297408
17995,"private void handleSystemQueryOptionFormat(final String format) throws UriParserException {
  if (""String_Node_Str"".equals(format))   uriResult.setFormat(Format.ATOM);
 else   if (""String_Node_Str"".equals(format))   uriResult.setFormat(Format.JSON);
 else   if (""String_Node_Str"".equals(format))   uriResult.setFormat(Format.XML);
 else   if (""String_Node_Str"".equals(format))   throw new UriParserException(""String_Node_Str"");
}","private void handleSystemQueryOptionFormat(final String format) throws UriParserException {
  if (""String_Node_Str"".equals(format))   uriResult.setFormat(Format.ATOM);
 else   if (""String_Node_Str"".equals(format))   uriResult.setFormat(Format.JSON);
 else   if (""String_Node_Str"".equals(format))   uriResult.setFormat(Format.XML);
 else   throw new UriParserException(""String_Node_Str"" + format + ""String_Node_Str"");
}",0.9185360094451004
17996,"@Test public void parseSystemQueryOptions() throws Exception {
  UriParserResult result=parse(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getEntitySet().getName());
  assertEquals(UriType.URI1,result.getUriType());
  assertEquals(Format.JSON,result.getFormat());
  assertEquals(InlineCount.ALLPAGES,result.getInlineCount());
  assertEquals(""String_Node_Str"",result.getSkipToken());
  assertEquals(2,result.getSkip());
  assertEquals(1,result.getTop().intValue());
  result=parse(""String_Node_Str"");
  assertEquals(Format.ATOM,result.getFormat());
  assertEquals(InlineCount.NONE,result.getInlineCount());
  assertEquals(0,result.getTop().intValue());
  result=parse(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getEntitySet().getName());
  assertEquals(UriType.URI1,result.getUriType());
  assertEquals(Format.JSON,result.getFormat());
  assertEquals(InlineCount.NONE,result.getInlineCount());
  result=parse(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getEntitySet().getName());
  assertEquals(UriType.URI1,result.getUriType());
  assertEquals(Format.ATOM,result.getFormat());
  result=parse(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getEntitySet().getName());
  assertEquals(UriType.URI1,result.getUriType());
  assertEquals(Format.XML,result.getFormat());
  assertNull(result.getTop());
  result=parse(""String_Node_Str"");
  assertEquals(Format.JSON,result.getFormat());
}","@Test public void parseSystemQueryOptions() throws Exception {
  UriParserResult result=parse(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getTargetEntitySet().getName());
  assertEquals(UriType.URI1,result.getUriType());
  assertEquals(Format.JSON,result.getFormat());
  assertEquals(InlineCount.ALLPAGES,result.getInlineCount());
  assertEquals(""String_Node_Str"",result.getSkipToken());
  assertEquals(2,result.getSkip());
  assertEquals(1,result.getTop().intValue());
  result=parse(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getTargetEntitySet().getName());
  assertEquals(UriType.URI1,result.getUriType());
  assertEquals(Format.ATOM,result.getFormat());
  assertEquals(InlineCount.NONE,result.getInlineCount());
  assertEquals(0,result.getTop().intValue());
  result=parse(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getTargetEntitySet().getName());
  assertEquals(UriType.URI1,result.getUriType());
  assertEquals(Format.JSON,result.getFormat());
  assertEquals(InlineCount.NONE,result.getInlineCount());
  result=parse(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getTargetEntitySet().getName());
  assertEquals(UriType.URI1,result.getUriType());
  assertEquals(Format.ATOM,result.getFormat());
  result=parse(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getTargetEntitySet().getName());
  assertEquals(UriType.URI1,result.getUriType());
  assertEquals(Format.XML,result.getFormat());
  assertNull(result.getTop());
  result=parse(""String_Node_Str"");
  assertEquals(Format.JSON,result.getFormat());
  result=parse(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getTargetEntitySet().getName());
  assertEquals(UriType.URI4,result.getUriType());
  assertEquals(Format.JSON,result.getFormat());
  result=parse(""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getTargetEntitySet().getName());
  assertEquals(UriType.URI5,result.getUriType());
  assertEquals(Format.JSON,result.getFormat());
}",0.7203956939191155
17997,"@Test public void parseInCompatibleSystemQueryOptions() throws Exception {
  parseWrongUri(""String_Node_Str"");
  parseWrongUri(""String_Node_Str"");
}","@Test public void parseInCompatibleSystemQueryOptions() throws Exception {
  parseWrongUri(""String_Node_Str"");
  parseWrongUri(""String_Node_Str"");
  parseWrongUri(""String_Node_Str"");
  parseWrongUri(""String_Node_Str"");
  parseWrongUri(""String_Node_Str"");
  parseWrongUri(""String_Node_Str"");
}",0.6727272727272727
17998,"/** 
 * Check whether it is an inline <code>Feed</code> or <code>Entry</code> and validate that... <ul> <li>...  {@link FormatXml#M_INLINE} tag is correctly set.</li><li>...based on  {@link EdmMultiplicity} of {@link EdmNavigationProperty} all tags are correctly set.</li><li>... {@link FormatXml#ATOM_TYPE} tag is correctly set and according to {@link FormatXml#ATOM_ENTRY} or {@link FormatXml#ATOM_FEED} to following tags are available.</li></ul> For the case that one of above validations fail an  {@link EntityProviderException} is thrown.If validation was successful <code>true</code> is returned for <code>Feed</code> and <code>false</code> for <code>Entry</code> multiplicity.
 * @param reader xml content
 * @param edmEntitySet 
 * @param linkAttributes attributes of parent <code>link</code> tag
 * @return <code>true</code> for <code>Feed</code> and <code>false</code> for <code>Entry</code>
 * @throws EntityProviderException is thrown if at least one validation fails.
 * @throws EdmException if edm access fails
 */
private boolean isInlineFeedValidated(final XMLStreamReader reader,final EntityInfoAggregator eia,final Map<String,String> linkAttributes) throws EntityProviderException, EdmException {
  boolean isFeed=false;
  try {
    reader.nextTag();
    reader.require(XMLStreamConstants.START_ELEMENT,Edm.NAMESPACE_M_2007_08,FormatXml.M_INLINE);
    String type=linkAttributes.get(FormatXml.ATOM_TYPE);
    ContentType cType=ContentType.parse(type);
    if (cType == null) {
      throw new EntityProviderException(EntityProviderException.INVALID_INLINE_CONTENT.addContent(""String_Node_Str""));
    }
    String rel=linkAttributes.get(FormatXml.ATOM_REL);
    String navigationPropertyName=rel.substring(Edm.NAMESPACE_REL_2007_08.length());
    EdmNavigationProperty navigationProperty=(EdmNavigationProperty)eia.getEntityType().getProperty(navigationPropertyName);
    EdmMultiplicity navigationMultiplicity=navigationProperty.getMultiplicity();
switch (navigationMultiplicity) {
case MANY:
      validateFeedTags(reader,cType);
    isFeed=true;
  break;
case ONE:
case ZERO_TO_ONE:
validateEntryTags(reader,cType);
break;
}
}
 catch (XMLStreamException e) {
throw new EntityProviderException(EntityProviderException.INVALID_INLINE_CONTENT.addContent(""String_Node_Str""));
}
return isFeed;
}","/** 
 * Check whether it is an inline <code>Feed</code> or <code>Entry</code> and validate that... <ul> <li>...  {@link FormatXml#M_INLINE} tag is correctly set.</li><li>...based on  {@link EdmMultiplicity} of {@link EdmNavigationProperty} all tags are correctly set.</li><li>... {@link FormatXml#ATOM_TYPE} tag is correctly set and according to {@link FormatXml#ATOM_ENTRY} or {@link FormatXml#ATOM_FEED} to following tags are available.</li></ul> For the case that one of above validations fail an  {@link EntityProviderException} is thrown.If validation was successful <code>true</code> is returned for <code>Feed</code> and <code>false</code> for <code>Entry</code> multiplicity.
 * @param reader xml content
 * @param edmEntitySet 
 * @param linkAttributes attributes of parent <code>link</code> tag
 * @return <code>true</code> for <code>Feed</code> and <code>false</code> for <code>Entry</code>
 * @throws EntityProviderException is thrown if at least one validation fails.
 * @throws EdmException if edm access fails
 */
private boolean isInlineFeedValidated(final XMLStreamReader reader,final EntityInfoAggregator eia,final Map<String,String> linkAttributes) throws EntityProviderException, EdmException {
  boolean isFeed=false;
  try {
    reader.nextTag();
    reader.require(XMLStreamConstants.START_ELEMENT,Edm.NAMESPACE_M_2007_08,FormatXml.M_INLINE);
    String type=linkAttributes.get(FormatXml.ATOM_TYPE);
    ContentType cType=ContentType.parse(type);
    if (cType == null) {
      throw new EntityProviderException(EntityProviderException.INVALID_INLINE_CONTENT.addContent(""String_Node_Str""));
    }
    String rel=linkAttributes.get(FormatXml.ATOM_REL);
    String navigationPropertyName=rel.substring(Edm.NAMESPACE_REL_2007_08.length());
    EdmNavigationProperty navigationProperty=(EdmNavigationProperty)eia.getEntityType().getProperty(navigationPropertyName);
    EdmMultiplicity navigationMultiplicity=navigationProperty.getMultiplicity();
switch (navigationMultiplicity) {
case MANY:
      validateFeedTags(reader,cType);
    isFeed=true;
  break;
case ONE:
case ZERO_TO_ONE:
validateEntryTags(reader,cType);
break;
}
}
 catch (XMLStreamException e) {
throw new EntityProviderException(EntityProviderException.INVALID_INLINE_CONTENT.addContent(""String_Node_Str""),e);
}
return isFeed;
}",0.9995672868887928
17999,"@Before public void before(){
  try {
    service=createService();
    server.startServer(service);
  }
 catch (  final ODataException e) {
    throw new TestUtilException(e);
  }
}","@Before public void before(){
  try {
    service=createService();
    server.startServer(service);
  }
 catch (  final ODataException e) {
    throw new TestUtilRuntimeException(e);
  }
}",0.981029810298103
18000,"@After public void after(){
  try {
    server.stopServer();
  }
 catch (  final Exception e) {
    throw new TestUtilException(e);
  }
}","@After public void after(){
  try {
    server.stopServer();
  }
 catch (  final Exception e) {
    throw new TestUtilRuntimeException(e);
  }
}",0.9750889679715302
