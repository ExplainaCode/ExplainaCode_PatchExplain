record_number,buggy_code,fixed_code,code_similarity
184001,"@Override public View getView(int position,View convertView,ViewGroup parent){
  if (!mDataValid) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (position == 0 && (mMode & MODE_MASK_SHOW_NUMBER_OF_CONTACTS) != 0) {
    return getTotalContactCountView(parent);
  }
  if (isShowAllContactsItemPosition(position)) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    return inflater.inflate(R.layout.contacts_list_show_all_item,parent,false);
  }
  int separatorId=getSeparatorId(position);
  if (separatorId != 0) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    TextView view=(TextView)inflater.inflate(R.layout.list_separator,parent,false);
    view.setText(separatorId);
    return view;
  }
  boolean showingSuggestion;
  Cursor cursor;
  if (mSuggestionsCursorCount != 0 && position < mSuggestionsCursorCount + 2) {
    showingSuggestion=true;
    cursor=mSuggestionsCursor;
  }
 else {
    showingSuggestion=false;
    cursor=mCursor;
  }
  int realPosition=getRealPosition(position);
  if (!cursor.moveToPosition(realPosition)) {
    throw new IllegalStateException(""String_Node_Str"" + position);
  }
  View v;
  if (convertView == null) {
    v=newView(mContext,cursor,parent);
  }
 else {
    v=convertView;
  }
  bindView(v,mContext,cursor);
  bindSectionHeader(v,realPosition,mDisplaySectionHeaders && !showingSuggestion);
  return v;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  if (!mDataValid) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (position == 0 && (mMode & MODE_MASK_SHOW_NUMBER_OF_CONTACTS) != 0) {
    return getTotalContactCountView(parent);
  }
  if (isShowAllContactsItemPosition(position)) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    return inflater.inflate(R.layout.contacts_list_show_all_item,parent,false);
  }
  int separatorId=getSeparatorId(position);
  if (separatorId != 0) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    TextView view=(TextView)inflater.inflate(R.layout.list_separator,parent,false);
    view.setText(separatorId);
    return view;
  }
  boolean showingSuggestion;
  Cursor cursor;
  if (mSuggestionsCursorCount != 0 && position < mSuggestionsCursorCount + 2) {
    showingSuggestion=true;
    cursor=mSuggestionsCursor;
  }
 else {
    showingSuggestion=false;
    cursor=mCursor;
  }
  int realPosition=getRealPosition(position);
  if (!cursor.moveToPosition(realPosition)) {
    throw new IllegalStateException(""String_Node_Str"" + position);
  }
  View v;
  if (convertView == null || convertView.getTag() == null) {
    v=newView(mContext,cursor,parent);
  }
 else {
    v=convertView;
  }
  bindView(v,mContext,cursor);
  bindSectionHeader(v,realPosition,mDisplaySectionHeaders && !showingSuggestion);
  return v;
}",0.9893262174783188
184002,"@Override public View getView(int position,View convertView,ViewGroup parent){
  if (!mDataValid) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (position == 0 && (mMode & MODE_MASK_SHOW_NUMBER_OF_CONTACTS) != 0) {
    return getTotalContactCountView(parent);
  }
  if (isShowAllContactsItemPosition(position)) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    return inflater.inflate(R.layout.contacts_list_show_all_item,parent,false);
  }
  int separatorId=getSeparatorId(position);
  if (separatorId != 0) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    TextView view=(TextView)inflater.inflate(R.layout.list_separator,parent,false);
    view.setText(separatorId);
    return view;
  }
  boolean showingSuggestion;
  Cursor cursor;
  if (mSuggestionsCursorCount != 0 && position < mSuggestionsCursorCount + 2) {
    showingSuggestion=true;
    cursor=mSuggestionsCursor;
  }
 else {
    showingSuggestion=false;
    cursor=mCursor;
  }
  int realPosition=getRealPosition(position);
  if (!cursor.moveToPosition(realPosition)) {
    throw new IllegalStateException(""String_Node_Str"" + position);
  }
  View v;
  if (convertView == null) {
    v=newView(mContext,cursor,parent);
  }
 else {
    v=convertView;
  }
  bindView(v,mContext,cursor);
  bindSectionHeader(v,realPosition,mDisplaySectionHeaders && !showingSuggestion);
  return v;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  if (!mDataValid) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (position == 0 && (mMode & MODE_MASK_SHOW_NUMBER_OF_CONTACTS) != 0) {
    return getTotalContactCountView(parent);
  }
  if (isShowAllContactsItemPosition(position)) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    return inflater.inflate(R.layout.contacts_list_show_all_item,parent,false);
  }
  int separatorId=getSeparatorId(position);
  if (separatorId != 0) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    TextView view=(TextView)inflater.inflate(R.layout.list_separator,parent,false);
    view.setText(separatorId);
    return view;
  }
  boolean showingSuggestion;
  Cursor cursor;
  if (mSuggestionsCursorCount != 0 && position < mSuggestionsCursorCount + 2) {
    showingSuggestion=true;
    cursor=mSuggestionsCursor;
  }
 else {
    showingSuggestion=false;
    cursor=mCursor;
  }
  int realPosition=getRealPosition(position);
  if (!cursor.moveToPosition(realPosition)) {
    throw new IllegalStateException(""String_Node_Str"" + position);
  }
  View v;
  if (convertView == null || convertView.getTag() == null) {
    v=newView(mContext,cursor,parent);
  }
 else {
    v=convertView;
  }
  bindView(v,mContext,cursor);
  bindSectionHeader(v,realPosition,mDisplaySectionHeaders && !showingSuggestion);
  return v;
}",0.9893262174783188
184003,"@Override public View getView(int position,View convertView,ViewGroup parent){
  if (!mDataValid) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (position == 0 && (mMode & MODE_MASK_SHOW_NUMBER_OF_CONTACTS) != 0) {
    return getTotalContactCountView(parent);
  }
  if (isShowAllContactsItemPosition(position)) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    return inflater.inflate(R.layout.contacts_list_show_all_item,parent,false);
  }
  int separatorId=getSeparatorId(position);
  if (separatorId != 0) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    TextView view=(TextView)inflater.inflate(R.layout.list_separator,parent,false);
    view.setText(separatorId);
    return view;
  }
  boolean showingSuggestion;
  Cursor cursor;
  if (mSuggestionsCursorCount != 0 && position < mSuggestionsCursorCount + 2) {
    showingSuggestion=true;
    cursor=mSuggestionsCursor;
  }
 else {
    showingSuggestion=false;
    cursor=mCursor;
  }
  int realPosition=getRealPosition(position);
  if (!cursor.moveToPosition(realPosition)) {
    throw new IllegalStateException(""String_Node_Str"" + position);
  }
  View v;
  if (convertView == null) {
    v=newView(mContext,cursor,parent);
  }
 else {
    v=convertView;
  }
  bindView(v,mContext,cursor);
  bindSectionHeader(v,realPosition,mDisplaySectionHeaders && !showingSuggestion);
  return v;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  if (!mDataValid) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (position == 0 && (mMode & MODE_MASK_SHOW_NUMBER_OF_CONTACTS) != 0) {
    return getTotalContactCountView(parent);
  }
  if (isShowAllContactsItemPosition(position)) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    return inflater.inflate(R.layout.contacts_list_show_all_item,parent,false);
  }
  int separatorId=getSeparatorId(position);
  if (separatorId != 0) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    TextView view=(TextView)inflater.inflate(R.layout.list_separator,parent,false);
    view.setText(separatorId);
    return view;
  }
  boolean showingSuggestion;
  Cursor cursor;
  if (mSuggestionsCursorCount != 0 && position < mSuggestionsCursorCount + 2) {
    showingSuggestion=true;
    cursor=mSuggestionsCursor;
  }
 else {
    showingSuggestion=false;
    cursor=mCursor;
  }
  int realPosition=getRealPosition(position);
  if (!cursor.moveToPosition(realPosition)) {
    throw new IllegalStateException(""String_Node_Str"" + position);
  }
  View v;
  if (convertView == null || convertView.getTag() == null) {
    v=newView(mContext,cursor,parent);
  }
 else {
    v=convertView;
  }
  bindView(v,mContext,cursor);
  bindSectionHeader(v,realPosition,mDisplaySectionHeaders && !showingSuggestion);
  return v;
}",0.9893262174783188
184004,"String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}","String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION_FROM_EMAIL;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}",0.9940054495912808
184005,"Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return Contacts.CONTENT_URI;
    }
case MODE_STREQUENT:
{
    return Contacts.CONTENT_STREQUENT_URI;
  }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
  return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
}
return null;
}","Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
    return getJoinSuggestionsUri(null);
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
    return Contacts.CONTENT_URI;
  }
case MODE_STREQUENT:
{
  return Contacts.CONTENT_STREQUENT_URI;
}
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
case MODE_QUERY:
{
return getContactFilterUri(mQueryData);
}
case MODE_GROUP:
{
return mGroupUri;
}
default :
{
throw new IllegalStateException(""String_Node_Str"");
}
}
}",0.7986736144007579
184006,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
    }
    mMode=MODE_QUERY;
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
      mQueryData=getIntent().getStringExtra(SearchManager.QUERY);
    }
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}",0.994565974641215
184007,"void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,mGroupUri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQuery=getIntent().getStringExtra(SearchManager.QUERY);
mQueryHandler.startQuery(QUERY_TOKEN,null,getContactFilterUri(mQuery),projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,getUriToQuery(),projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,getJoinSuggestionsUri(null),projection,null,null,null);
break;
}
}","void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
}
}",0.9575353871773522
184008,"@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQuery),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}","@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQueryData),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}",0.9985454545454544
184009,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      Bitmap photo=mBitmapCache.get(photoId).get();
      if (photo == null) {
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      SoftReference<Bitmap> photoRef=mBitmapCache.get(photoId);
      if (photoRef == null) {
        break;
      }
      Bitmap photo=photoRef.get();
      if (photo == null) {
        mBitmapCache.remove(photoId);
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.8978102189781022
184010,"@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  bindEditors();
  super.onRestoreInstanceState(savedInstanceState);
}","@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  mRawContactIdRequestingPhoto=savedInstanceState.getLong(KEY_RAW_CONTACT_ID_REQUESTING_PHOTO);
  bindEditors();
  super.onRestoreInstanceState(savedInstanceState);
}",0.8181818181818182
184011,"/** 
 * {@inheritDoc} 
 */
public void onRequest(int request){
  if (!hasValidState())   return;
switch (request) {
case EditorListener.REQUEST_PICK_PHOTO:
{
      doPickPhotoAction();
      break;
    }
case EditorListener.FIELD_CHANGED:
{
    break;
  }
}
}","public void onRequest(int request){
  if (!hasValidState())   return;
  if (request == EditorListener.REQUEST_PICK_PHOTO) {
    doPickPhotoAction(rawContactId);
  }
}",0.691764705882353
184012,"/** 
 * {@inheritDoc} 
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode != RESULT_OK)   return;
switch (requestCode) {
case PHOTO_PICKED_WITH_DATA:
{
    }
case REQUEST_JOIN_CONTACT:
{
    if (resultCode == RESULT_OK && data != null) {
      final long contactId=ContentUris.parseId(data.getData());
      joinAggregate(contactId);
    }
  }
}
}","/** 
 * {@inheritDoc} 
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode != RESULT_OK)   return;
switch (requestCode) {
case PHOTO_PICKED_WITH_DATA:
{
      ContactEditorView requestingEditor=null;
      if (mRawContactIdRequestingPhoto > 0) {
        for (int i=0; i < mContent.getChildCount(); i++) {
          View childView=mContent.getChildAt(i);
          if (childView instanceof ContactEditorView) {
            ContactEditorView editor=(ContactEditorView)childView;
            if (editor.getRawContactId() == mRawContactIdRequestingPhoto) {
              requestingEditor=editor;
              break;
            }
          }
        }
      }
      if (requestingEditor != null) {
        final Bitmap photo=data.getParcelableExtra(""String_Node_Str"");
        requestingEditor.setPhotoBitmap(photo);
        mRawContactIdRequestingPhoto=-1;
      }
 else {
      }
      break;
    }
case REQUEST_JOIN_CONTACT:
{
    if (resultCode == RESULT_OK && data != null) {
      final long contactId=ContentUris.parseId(data.getData());
      joinAggregate(contactId);
    }
  }
}
}",0.5223012281835812
184013,"/** 
 * Rebuild the editors to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindEditors(){
  if (!hasValidState())   return;
  final LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Sources sources=Sources.getInstance(this);
  mContent.removeAllViews();
  mEntities=new EntityDelta[mState.size()];
  int size=mState.size();
  for (int i=0; i < size; i++) {
    EntityDelta entity=mState.get(i);
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    ContactEditorView editor=(ContactEditorView)inflater.inflate(R.layout.item_contact_editor,mContent,false);
    mContent.addView(editor);
    editor.setState(entity,source);
    mEntities[i]=entity;
  }
  mContent.setVisibility(View.VISIBLE);
}","/** 
 * Rebuild the editors to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindEditors(){
  if (!hasValidState())   return;
  final LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Sources sources=Sources.getInstance(this);
  mContent.removeAllViews();
  int size=mState.size();
  for (int i=0; i < size; i++) {
    EntityDelta entity=mState.get(i);
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    final long rawContactId=values.getAsLong(RawContacts._ID);
    ContactEditorView editor=(ContactEditorView)inflater.inflate(R.layout.item_contact_editor,mContent,false);
    editor.getPhotoEditor().setEditorListener(new EditorListener(){
      public void onDeleted(      Editor editor){
      }
      public void onRequest(      int request){
        if (!hasValidState())         return;
        if (request == EditorListener.REQUEST_PICK_PHOTO) {
          doPickPhotoAction(rawContactId);
        }
      }
    }
);
    mContent.addView(editor);
    editor.setState(entity,source);
  }
  mContent.setVisibility(View.VISIBLE);
}",0.8076616121308858
184014,"/** 
 * Pick a specific photo to be added under the currently selected tab.
 */
private boolean doPickPhotoAction(){
  if (!hasValidState())   return false;
  try {
    final Intent intent=ContactsUtils.getPhotoPickIntent();
    startActivityForResult(intent,PHOTO_PICKED_WITH_DATA);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.photoPickerNotFoundText,Toast.LENGTH_LONG).show();
  }
  return true;
}","/** 
 * Pick a specific photo to be added under the currently selected tab.
 */
private boolean doPickPhotoAction(long rawContactId){
  if (!hasValidState())   return false;
  try {
    final Intent intent=ContactsUtils.getPhotoPickIntent();
    startActivityForResult(intent,PHOTO_PICKED_WITH_DATA);
    mRawContactIdRequestingPhoto=rawContactId;
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.photoPickerNotFoundText,Toast.LENGTH_LONG).show();
  }
  return true;
}",0.9311827956989248
184015,"@Override protected void onSaveInstanceState(Bundle outState){
  if (hasValidState()) {
    outState.putParcelable(KEY_EDIT_STATE,mState);
  }
  super.onSaveInstanceState(outState);
}","@Override protected void onSaveInstanceState(Bundle outState){
  if (hasValidState()) {
    outState.putParcelable(KEY_EDIT_STATE,mState);
  }
  outState.putLong(KEY_RAW_CONTACT_ID_REQUESTING_PHOTO,mRawContactIdRequestingPhoto);
  super.onSaveInstanceState(outState);
}",0.6637168141592921
184016,"/** 
 * Set the internal state for this view, given a current  {@link EntityDelta} state and the {@link ContactsSource} thatapply to that state.
 */
public void setState(EntityDelta state,ContactsSource source){
  mGeneral.removeAllViews();
  mSecondary.removeAllViews();
  if (state == null || source == null)   return;
  EntityModifier.ensureKindExists(state,source,StructuredName.CONTENT_ITEM_TYPE);
  mHeader.setBackgroundColor(source.getHeaderColor(mContext));
  mSideBar.setBackgroundColor(source.getSideBarColor(mContext));
  ValuesDelta values=state.getValues();
  String accountName=values.getAsString(RawContacts.ACCOUNT_NAME);
  if (TextUtils.isEmpty(accountName)) {
    accountName=""String_Node_Str"";
  }
  mHeaderAccountName.setText(accountName);
  mHeaderAccountType.setText(source.getDisplayLabel(mContext));
  mHeaderIcon.setImageDrawable(source.getDisplayIcon(mContext));
  EntityModifier.ensureKindExists(state,source,Photo.CONTENT_ITEM_TYPE);
  mHasPhotoEditor=(source.getKindForMimetype(Photo.CONTENT_ITEM_TYPE) != null);
  mPhoto.setVisibility(mHasPhotoEditor ? View.VISIBLE : View.GONE);
  mPhoto.setEnabled(!source.readOnly);
  mName.setEnabled(!source.readOnly);
  boolean readOnly=source.readOnly;
  if (readOnly) {
    mGeneral.setVisibility(View.GONE);
    mSecondary.setVisibility(View.GONE);
    mSecondaryHeader.setVisibility(View.GONE);
  }
 else {
    mReadOnly.setVisibility(View.GONE);
  }
  for (  DataKind kind : source.getSortedDataKinds()) {
    if (!kind.editable)     continue;
    final String mimeType=kind.mimeType;
    if (StructuredName.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mName.setValues(kind,primary,state,source.readOnly);
    }
 else     if (Photo.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mPhoto.setValues(kind,primary,state,source.readOnly);
    }
 else     if (!readOnly) {
      if (kind.fieldList == null)       continue;
      final ViewGroup parent=kind.secondary ? mSecondary : mGeneral;
      final KindSectionView section=(KindSectionView)mInflater.inflate(R.layout.item_kind_section,parent,false);
      section.setState(kind,state,source.readOnly);
      section.setId(kind.weight);
      parent.addView(section);
    }
  }
  final int secondaryVisibility=mSecondary.getChildCount() > 0 ? View.VISIBLE : View.GONE;
  mSecondary.setVisibility(secondaryVisibility);
  mSecondaryHeader.setVisibility(secondaryVisibility);
}","/** 
 * Set the internal state for this view, given a current  {@link EntityDelta} state and the {@link ContactsSource} thatapply to that state.
 */
public void setState(EntityDelta state,ContactsSource source){
  mGeneral.removeAllViews();
  mSecondary.removeAllViews();
  if (state == null || source == null)   return;
  EntityModifier.ensureKindExists(state,source,StructuredName.CONTENT_ITEM_TYPE);
  mHeader.setBackgroundColor(source.getHeaderColor(mContext));
  mSideBar.setBackgroundColor(source.getSideBarColor(mContext));
  ValuesDelta values=state.getValues();
  String accountName=values.getAsString(RawContacts.ACCOUNT_NAME);
  if (TextUtils.isEmpty(accountName)) {
    accountName=""String_Node_Str"";
  }
  mHeaderAccountName.setText(accountName);
  mHeaderAccountType.setText(source.getDisplayLabel(mContext));
  mHeaderIcon.setImageDrawable(source.getDisplayIcon(mContext));
  mRawContactId=values.getAsLong(RawContacts._ID);
  EntityModifier.ensureKindExists(state,source,Photo.CONTENT_ITEM_TYPE);
  mHasPhotoEditor=(source.getKindForMimetype(Photo.CONTENT_ITEM_TYPE) != null);
  mPhoto.setVisibility(mHasPhotoEditor ? View.VISIBLE : View.GONE);
  mPhoto.setEnabled(!source.readOnly);
  mName.setEnabled(!source.readOnly);
  boolean readOnly=source.readOnly;
  if (readOnly) {
    mGeneral.setVisibility(View.GONE);
    mSecondary.setVisibility(View.GONE);
    mSecondaryHeader.setVisibility(View.GONE);
  }
 else {
    mReadOnly.setVisibility(View.GONE);
  }
  for (  DataKind kind : source.getSortedDataKinds()) {
    if (!kind.editable)     continue;
    final String mimeType=kind.mimeType;
    if (StructuredName.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mName.setValues(kind,primary,state,source.readOnly);
    }
 else     if (Photo.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mPhoto.setValues(kind,primary,state,source.readOnly);
    }
 else     if (!readOnly) {
      if (kind.fieldList == null)       continue;
      final ViewGroup parent=kind.secondary ? mSecondary : mGeneral;
      final KindSectionView section=(KindSectionView)mInflater.inflate(R.layout.item_kind_section,parent,false);
      section.setState(kind,state,source.readOnly);
      section.setId(kind.weight);
      parent.addView(section);
    }
  }
  final int secondaryVisibility=mSecondary.getChildCount() > 0 ? View.VISIBLE : View.GONE;
  mSecondary.setVisibility(secondaryVisibility);
  mSecondaryHeader.setVisibility(secondaryVisibility);
}",0.989986255645003
184017,"String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}","String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION_FROM_EMAIL;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}",0.9940054495912808
184018,"Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return Contacts.CONTENT_URI;
    }
case MODE_STREQUENT:
{
    return Contacts.CONTENT_STREQUENT_URI;
  }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
  return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
}
return null;
}","Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
    return getJoinSuggestionsUri(null);
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
    return Contacts.CONTENT_URI;
  }
case MODE_STREQUENT:
{
  return Contacts.CONTENT_STREQUENT_URI;
}
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
case MODE_QUERY:
{
return getContactFilterUri(mQueryData);
}
case MODE_GROUP:
{
return mGroupUri;
}
default :
{
throw new IllegalStateException(""String_Node_Str"");
}
}
}",0.7986736144007579
184019,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
    }
    mMode=MODE_QUERY;
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
      mQueryData=getIntent().getStringExtra(SearchManager.QUERY);
    }
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}",0.994565974641215
184020,"void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,mGroupUri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQuery=getIntent().getStringExtra(SearchManager.QUERY);
mQueryHandler.startQuery(QUERY_TOKEN,null,getContactFilterUri(mQuery),projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,getUriToQuery(),projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,getJoinSuggestionsUri(null),projection,null,null,null);
break;
}
}","void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
}
}",0.9575353871773522
184021,"@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQuery),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}","@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQueryData),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}",0.9985454545454544
184022,"String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}","String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION_FROM_EMAIL;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}",0.9940054495912808
184023,"Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return Contacts.CONTENT_URI;
    }
case MODE_STREQUENT:
{
    return Contacts.CONTENT_STREQUENT_URI;
  }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
  return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
}
return null;
}","Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
    return getJoinSuggestionsUri(null);
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
    return Contacts.CONTENT_URI;
  }
case MODE_STREQUENT:
{
  return Contacts.CONTENT_STREQUENT_URI;
}
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
case MODE_QUERY:
{
return getContactFilterUri(mQueryData);
}
case MODE_GROUP:
{
return mGroupUri;
}
default :
{
throw new IllegalStateException(""String_Node_Str"");
}
}
}",0.7986736144007579
184024,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
    }
    mMode=MODE_QUERY;
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
      mQueryData=getIntent().getStringExtra(SearchManager.QUERY);
    }
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}",0.994565974641215
184025,"void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,mGroupUri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQuery=getIntent().getStringExtra(SearchManager.QUERY);
mQueryHandler.startQuery(QUERY_TOKEN,null,getContactFilterUri(mQuery),projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,getUriToQuery(),projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,getJoinSuggestionsUri(null),projection,null,null,null);
break;
}
}","void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
}
}",0.9575353871773522
184026,"@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQuery),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}","@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQueryData),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}",0.9985454545454544
184027,"String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}","String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION_FROM_EMAIL;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}",0.9940054495912808
184028,"Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return Contacts.CONTENT_URI;
    }
case MODE_STREQUENT:
{
    return Contacts.CONTENT_STREQUENT_URI;
  }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
  return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
}
return null;
}","Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
    return getJoinSuggestionsUri(null);
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
    return Contacts.CONTENT_URI;
  }
case MODE_STREQUENT:
{
  return Contacts.CONTENT_STREQUENT_URI;
}
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
case MODE_QUERY:
{
return getContactFilterUri(mQueryData);
}
case MODE_GROUP:
{
return mGroupUri;
}
default :
{
throw new IllegalStateException(""String_Node_Str"");
}
}
}",0.7986736144007579
184029,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
    }
    mMode=MODE_QUERY;
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
      mQueryData=getIntent().getStringExtra(SearchManager.QUERY);
    }
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}",0.994565974641215
184030,"void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,mGroupUri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQuery=getIntent().getStringExtra(SearchManager.QUERY);
mQueryHandler.startQuery(QUERY_TOKEN,null,getContactFilterUri(mQuery),projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,getUriToQuery(),projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,getJoinSuggestionsUri(null),projection,null,null,null);
break;
}
}","void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
}
}",0.9575353871773522
184031,"@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQuery),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}","@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQueryData),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}",0.9985454545454544
184032,"String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}","String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION_FROM_EMAIL;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}",0.9940054495912808
184033,"Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return Contacts.CONTENT_URI;
    }
case MODE_STREQUENT:
{
    return Contacts.CONTENT_STREQUENT_URI;
  }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
  return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
}
return null;
}","Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
    return getJoinSuggestionsUri(null);
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
    return Contacts.CONTENT_URI;
  }
case MODE_STREQUENT:
{
  return Contacts.CONTENT_STREQUENT_URI;
}
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
case MODE_QUERY:
{
return getContactFilterUri(mQueryData);
}
case MODE_GROUP:
{
return mGroupUri;
}
default :
{
throw new IllegalStateException(""String_Node_Str"");
}
}
}",0.7986736144007579
184034,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
    }
    mMode=MODE_QUERY;
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
      mQueryData=getIntent().getStringExtra(SearchManager.QUERY);
    }
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}",0.994565974641215
184035,"void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,mGroupUri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQuery=getIntent().getStringExtra(SearchManager.QUERY);
mQueryHandler.startQuery(QUERY_TOKEN,null,getContactFilterUri(mQuery),projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,getUriToQuery(),projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,getJoinSuggestionsUri(null),projection,null,null,null);
break;
}
}","void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
}
}",0.9575353871773522
184036,"@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQuery),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}","@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQueryData),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}",0.9985454545454544
184037,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      Bitmap photo=mBitmapCache.get(photoId).get();
      if (photo == null) {
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      SoftReference<Bitmap> photoRef=mBitmapCache.get(photoId);
      if (photoRef == null) {
        break;
      }
      Bitmap photo=photoRef.get();
      if (photo == null) {
        mBitmapCache.remove(photoId);
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.8978102189781022
184038,"@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  bindEditors();
  super.onRestoreInstanceState(savedInstanceState);
}","@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  mRawContactIdRequestingPhoto=savedInstanceState.getLong(KEY_RAW_CONTACT_ID_REQUESTING_PHOTO);
  bindEditors();
  super.onRestoreInstanceState(savedInstanceState);
}",0.8181818181818182
184039,"/** 
 * {@inheritDoc} 
 */
public void onRequest(int request){
  if (!hasValidState())   return;
switch (request) {
case EditorListener.REQUEST_PICK_PHOTO:
{
      doPickPhotoAction();
      break;
    }
case EditorListener.FIELD_CHANGED:
{
    break;
  }
}
}","public void onRequest(int request){
  if (!hasValidState())   return;
  if (request == EditorListener.REQUEST_PICK_PHOTO) {
    doPickPhotoAction(rawContactId);
  }
}",0.691764705882353
184040,"/** 
 * {@inheritDoc} 
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode != RESULT_OK)   return;
switch (requestCode) {
case PHOTO_PICKED_WITH_DATA:
{
    }
case REQUEST_JOIN_CONTACT:
{
    if (resultCode == RESULT_OK && data != null) {
      final long contactId=ContentUris.parseId(data.getData());
      joinAggregate(contactId);
    }
  }
}
}","/** 
 * {@inheritDoc} 
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode != RESULT_OK)   return;
switch (requestCode) {
case PHOTO_PICKED_WITH_DATA:
{
      ContactEditorView requestingEditor=null;
      if (mRawContactIdRequestingPhoto > 0) {
        for (int i=0; i < mContent.getChildCount(); i++) {
          View childView=mContent.getChildAt(i);
          if (childView instanceof ContactEditorView) {
            ContactEditorView editor=(ContactEditorView)childView;
            if (editor.getRawContactId() == mRawContactIdRequestingPhoto) {
              requestingEditor=editor;
              break;
            }
          }
        }
      }
      if (requestingEditor != null) {
        final Bitmap photo=data.getParcelableExtra(""String_Node_Str"");
        requestingEditor.setPhotoBitmap(photo);
        mRawContactIdRequestingPhoto=-1;
      }
 else {
      }
      break;
    }
case REQUEST_JOIN_CONTACT:
{
    if (resultCode == RESULT_OK && data != null) {
      final long contactId=ContentUris.parseId(data.getData());
      joinAggregate(contactId);
    }
  }
}
}",0.5223012281835812
184041,"/** 
 * Rebuild the editors to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindEditors(){
  if (!hasValidState())   return;
  final LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Sources sources=Sources.getInstance(this);
  mContent.removeAllViews();
  mEntities=new EntityDelta[mState.size()];
  int size=mState.size();
  for (int i=0; i < size; i++) {
    EntityDelta entity=mState.get(i);
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    ContactEditorView editor=(ContactEditorView)inflater.inflate(R.layout.item_contact_editor,mContent,false);
    mContent.addView(editor);
    editor.setState(entity,source);
    mEntities[i]=entity;
  }
  mContent.setVisibility(View.VISIBLE);
}","/** 
 * Rebuild the editors to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindEditors(){
  if (!hasValidState())   return;
  final LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Sources sources=Sources.getInstance(this);
  mContent.removeAllViews();
  int size=mState.size();
  for (int i=0; i < size; i++) {
    EntityDelta entity=mState.get(i);
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    final long rawContactId=values.getAsLong(RawContacts._ID);
    ContactEditorView editor=(ContactEditorView)inflater.inflate(R.layout.item_contact_editor,mContent,false);
    editor.getPhotoEditor().setEditorListener(new EditorListener(){
      public void onDeleted(      Editor editor){
      }
      public void onRequest(      int request){
        if (!hasValidState())         return;
        if (request == EditorListener.REQUEST_PICK_PHOTO) {
          doPickPhotoAction(rawContactId);
        }
      }
    }
);
    mContent.addView(editor);
    editor.setState(entity,source);
  }
  mContent.setVisibility(View.VISIBLE);
}",0.8076616121308858
184042,"/** 
 * Pick a specific photo to be added under the currently selected tab.
 */
private boolean doPickPhotoAction(){
  if (!hasValidState())   return false;
  try {
    final Intent intent=ContactsUtils.getPhotoPickIntent();
    startActivityForResult(intent,PHOTO_PICKED_WITH_DATA);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.photoPickerNotFoundText,Toast.LENGTH_LONG).show();
  }
  return true;
}","/** 
 * Pick a specific photo to be added under the currently selected tab.
 */
private boolean doPickPhotoAction(long rawContactId){
  if (!hasValidState())   return false;
  try {
    final Intent intent=ContactsUtils.getPhotoPickIntent();
    startActivityForResult(intent,PHOTO_PICKED_WITH_DATA);
    mRawContactIdRequestingPhoto=rawContactId;
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.photoPickerNotFoundText,Toast.LENGTH_LONG).show();
  }
  return true;
}",0.9311827956989248
184043,"@Override protected void onSaveInstanceState(Bundle outState){
  if (hasValidState()) {
    outState.putParcelable(KEY_EDIT_STATE,mState);
  }
  super.onSaveInstanceState(outState);
}","@Override protected void onSaveInstanceState(Bundle outState){
  if (hasValidState()) {
    outState.putParcelable(KEY_EDIT_STATE,mState);
  }
  outState.putLong(KEY_RAW_CONTACT_ID_REQUESTING_PHOTO,mRawContactIdRequestingPhoto);
  super.onSaveInstanceState(outState);
}",0.6637168141592921
184044,"/** 
 * Set the internal state for this view, given a current  {@link EntityDelta} state and the {@link ContactsSource} thatapply to that state.
 */
public void setState(EntityDelta state,ContactsSource source){
  mGeneral.removeAllViews();
  mSecondary.removeAllViews();
  if (state == null || source == null)   return;
  EntityModifier.ensureKindExists(state,source,StructuredName.CONTENT_ITEM_TYPE);
  mHeader.setBackgroundColor(source.getHeaderColor(mContext));
  mSideBar.setBackgroundColor(source.getSideBarColor(mContext));
  ValuesDelta values=state.getValues();
  String accountName=values.getAsString(RawContacts.ACCOUNT_NAME);
  if (TextUtils.isEmpty(accountName)) {
    accountName=""String_Node_Str"";
  }
  mHeaderAccountName.setText(accountName);
  mHeaderAccountType.setText(source.getDisplayLabel(mContext));
  mHeaderIcon.setImageDrawable(source.getDisplayIcon(mContext));
  EntityModifier.ensureKindExists(state,source,Photo.CONTENT_ITEM_TYPE);
  mHasPhotoEditor=(source.getKindForMimetype(Photo.CONTENT_ITEM_TYPE) != null);
  mPhoto.setVisibility(mHasPhotoEditor ? View.VISIBLE : View.GONE);
  mPhoto.setEnabled(!source.readOnly);
  mName.setEnabled(!source.readOnly);
  boolean readOnly=source.readOnly;
  if (readOnly) {
    mGeneral.setVisibility(View.GONE);
    mSecondary.setVisibility(View.GONE);
    mSecondaryHeader.setVisibility(View.GONE);
  }
 else {
    mReadOnly.setVisibility(View.GONE);
  }
  for (  DataKind kind : source.getSortedDataKinds()) {
    if (!kind.editable)     continue;
    final String mimeType=kind.mimeType;
    if (StructuredName.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mName.setValues(kind,primary,state,source.readOnly);
    }
 else     if (Photo.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mPhoto.setValues(kind,primary,state,source.readOnly);
    }
 else     if (!readOnly) {
      if (kind.fieldList == null)       continue;
      final ViewGroup parent=kind.secondary ? mSecondary : mGeneral;
      final KindSectionView section=(KindSectionView)mInflater.inflate(R.layout.item_kind_section,parent,false);
      section.setState(kind,state,source.readOnly);
      section.setId(kind.weight);
      parent.addView(section);
    }
  }
  final int secondaryVisibility=mSecondary.getChildCount() > 0 ? View.VISIBLE : View.GONE;
  mSecondary.setVisibility(secondaryVisibility);
  mSecondaryHeader.setVisibility(secondaryVisibility);
}","/** 
 * Set the internal state for this view, given a current  {@link EntityDelta} state and the {@link ContactsSource} thatapply to that state.
 */
public void setState(EntityDelta state,ContactsSource source){
  mGeneral.removeAllViews();
  mSecondary.removeAllViews();
  if (state == null || source == null)   return;
  EntityModifier.ensureKindExists(state,source,StructuredName.CONTENT_ITEM_TYPE);
  mHeader.setBackgroundColor(source.getHeaderColor(mContext));
  mSideBar.setBackgroundColor(source.getSideBarColor(mContext));
  ValuesDelta values=state.getValues();
  String accountName=values.getAsString(RawContacts.ACCOUNT_NAME);
  if (TextUtils.isEmpty(accountName)) {
    accountName=""String_Node_Str"";
  }
  mHeaderAccountName.setText(accountName);
  mHeaderAccountType.setText(source.getDisplayLabel(mContext));
  mHeaderIcon.setImageDrawable(source.getDisplayIcon(mContext));
  mRawContactId=values.getAsLong(RawContacts._ID);
  EntityModifier.ensureKindExists(state,source,Photo.CONTENT_ITEM_TYPE);
  mHasPhotoEditor=(source.getKindForMimetype(Photo.CONTENT_ITEM_TYPE) != null);
  mPhoto.setVisibility(mHasPhotoEditor ? View.VISIBLE : View.GONE);
  mPhoto.setEnabled(!source.readOnly);
  mName.setEnabled(!source.readOnly);
  boolean readOnly=source.readOnly;
  if (readOnly) {
    mGeneral.setVisibility(View.GONE);
    mSecondary.setVisibility(View.GONE);
    mSecondaryHeader.setVisibility(View.GONE);
  }
 else {
    mReadOnly.setVisibility(View.GONE);
  }
  for (  DataKind kind : source.getSortedDataKinds()) {
    if (!kind.editable)     continue;
    final String mimeType=kind.mimeType;
    if (StructuredName.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mName.setValues(kind,primary,state,source.readOnly);
    }
 else     if (Photo.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mPhoto.setValues(kind,primary,state,source.readOnly);
    }
 else     if (!readOnly) {
      if (kind.fieldList == null)       continue;
      final ViewGroup parent=kind.secondary ? mSecondary : mGeneral;
      final KindSectionView section=(KindSectionView)mInflater.inflate(R.layout.item_kind_section,parent,false);
      section.setState(kind,state,source.readOnly);
      section.setId(kind.weight);
      parent.addView(section);
    }
  }
  final int secondaryVisibility=mSecondary.getChildCount() > 0 ? View.VISIBLE : View.GONE;
  mSecondary.setVisibility(secondaryVisibility);
  mSecondaryHeader.setVisibility(secondaryVisibility);
}",0.989986255645003
184045,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      Bitmap photo=mBitmapCache.get(photoId).get();
      if (photo == null) {
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      SoftReference<Bitmap> photoRef=mBitmapCache.get(photoId);
      if (photoRef == null) {
        break;
      }
      Bitmap photo=photoRef.get();
      if (photo == null) {
        mBitmapCache.remove(photoId);
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.8978102189781022
184046,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      Bitmap photo=mBitmapCache.get(photoId).get();
      if (photo == null) {
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      SoftReference<Bitmap> photoRef=mBitmapCache.get(photoId);
      if (photoRef == null) {
        break;
      }
      Bitmap photo=photoRef.get();
      if (photo == null) {
        mBitmapCache.remove(photoId);
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.8978102189781022
184047,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      Bitmap photo=mBitmapCache.get(photoId).get();
      if (photo == null) {
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      SoftReference<Bitmap> photoRef=mBitmapCache.get(photoId);
      if (photoRef == null) {
        break;
      }
      Bitmap photo=photoRef.get();
      if (photo == null) {
        mBitmapCache.remove(photoId);
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.8978102189781022
184048,"@Override protected Dialog onCreateDialog(int id){
switch (id) {
case R.string.import_from_sim:
case R.string.import_from_sdcard:
{
      return AccountSelectionUtil.getSelectAccountDialog(this,id);
    }
case R.id.dialog_sdcard_not_found:
{
    return new AlertDialog.Builder(this).setTitle(R.string.no_sdcard_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.no_sdcard_message).setPositiveButton(android.R.string.ok,null).create();
  }
case R.id.dialog_delete_contact_confirmation:
{
  return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.deleteConfirmation).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener(mSelectedContactUri)).create();
}
case R.id.dialog_readonly_contact_hide_confirmation:
{
return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.readOnlyContactWarning).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener(mSelectedContactUri)).create();
}
case R.id.dialog_readonly_contact_delete_confirmation:
{
return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.readOnlyContactDeleteConfirmation).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener(mSelectedContactUri)).create();
}
case R.id.dialog_multiple_contact_delete_confirmation:
{
return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.multipleContactDeleteConfirmation).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener(mSelectedContactUri)).create();
}
}
return super.onCreateDialog(id);
}","@Override protected Dialog onCreateDialog(int id){
switch (id) {
case R.string.import_from_sim:
case R.string.import_from_sdcard:
{
      return AccountSelectionUtil.getSelectAccountDialog(this,id);
    }
case R.id.dialog_sdcard_not_found:
{
    return new AlertDialog.Builder(this).setTitle(R.string.no_sdcard_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.no_sdcard_message).setPositiveButton(android.R.string.ok,null).create();
  }
case R.id.dialog_delete_contact_confirmation:
{
  return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.deleteConfirmation).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener()).create();
}
case R.id.dialog_readonly_contact_hide_confirmation:
{
return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.readOnlyContactWarning).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener()).create();
}
case R.id.dialog_readonly_contact_delete_confirmation:
{
return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.readOnlyContactDeleteConfirmation).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener()).create();
}
case R.id.dialog_multiple_contact_delete_confirmation:
{
return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.multipleContactDeleteConfirmation).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener()).create();
}
}
return super.onCreateDialog(id);
}",0.9568345323741008
184049,"@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  bindEditors();
  super.onRestoreInstanceState(savedInstanceState);
}","@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  mRawContactIdRequestingPhoto=savedInstanceState.getLong(KEY_RAW_CONTACT_ID_REQUESTING_PHOTO);
  bindEditors();
  super.onRestoreInstanceState(savedInstanceState);
}",0.8181818181818182
184050,"/** 
 * {@inheritDoc} 
 */
public void onRequest(int request){
  if (!hasValidState())   return;
switch (request) {
case EditorListener.REQUEST_PICK_PHOTO:
{
      doPickPhotoAction();
      break;
    }
case EditorListener.FIELD_CHANGED:
{
    break;
  }
}
}","public void onRequest(int request){
  if (!hasValidState())   return;
  if (request == EditorListener.REQUEST_PICK_PHOTO) {
    doPickPhotoAction(rawContactId);
  }
}",0.691764705882353
184051,"/** 
 * {@inheritDoc} 
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode != RESULT_OK)   return;
switch (requestCode) {
case PHOTO_PICKED_WITH_DATA:
{
    }
case REQUEST_JOIN_CONTACT:
{
    if (resultCode == RESULT_OK && data != null) {
      final long contactId=ContentUris.parseId(data.getData());
      joinAggregate(contactId);
    }
  }
}
}","/** 
 * {@inheritDoc} 
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode != RESULT_OK)   return;
switch (requestCode) {
case PHOTO_PICKED_WITH_DATA:
{
      ContactEditorView requestingEditor=null;
      if (mRawContactIdRequestingPhoto > 0) {
        for (int i=0; i < mContent.getChildCount(); i++) {
          View childView=mContent.getChildAt(i);
          if (childView instanceof ContactEditorView) {
            ContactEditorView editor=(ContactEditorView)childView;
            if (editor.getRawContactId() == mRawContactIdRequestingPhoto) {
              requestingEditor=editor;
              break;
            }
          }
        }
      }
      if (requestingEditor != null) {
        final Bitmap photo=data.getParcelableExtra(""String_Node_Str"");
        requestingEditor.setPhotoBitmap(photo);
        mRawContactIdRequestingPhoto=-1;
      }
 else {
      }
      break;
    }
case REQUEST_JOIN_CONTACT:
{
    if (resultCode == RESULT_OK && data != null) {
      final long contactId=ContentUris.parseId(data.getData());
      joinAggregate(contactId);
    }
  }
}
}",0.5223012281835812
184052,"/** 
 * Rebuild the editors to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindEditors(){
  if (!hasValidState())   return;
  final LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Sources sources=Sources.getInstance(this);
  mContent.removeAllViews();
  mEntities=new EntityDelta[mState.size()];
  int size=mState.size();
  for (int i=0; i < size; i++) {
    EntityDelta entity=mState.get(i);
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    ContactEditorView editor=(ContactEditorView)inflater.inflate(R.layout.item_contact_editor,mContent,false);
    mContent.addView(editor);
    editor.setState(entity,source);
    mEntities[i]=entity;
  }
  mContent.setVisibility(View.VISIBLE);
}","/** 
 * Rebuild the editors to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindEditors(){
  if (!hasValidState())   return;
  final LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Sources sources=Sources.getInstance(this);
  mContent.removeAllViews();
  int size=mState.size();
  for (int i=0; i < size; i++) {
    EntityDelta entity=mState.get(i);
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    final long rawContactId=values.getAsLong(RawContacts._ID);
    ContactEditorView editor=(ContactEditorView)inflater.inflate(R.layout.item_contact_editor,mContent,false);
    editor.getPhotoEditor().setEditorListener(new EditorListener(){
      public void onDeleted(      Editor editor){
      }
      public void onRequest(      int request){
        if (!hasValidState())         return;
        if (request == EditorListener.REQUEST_PICK_PHOTO) {
          doPickPhotoAction(rawContactId);
        }
      }
    }
);
    mContent.addView(editor);
    editor.setState(entity,source);
  }
  mContent.setVisibility(View.VISIBLE);
}",0.8076616121308858
184053,"/** 
 * Pick a specific photo to be added under the currently selected tab.
 */
private boolean doPickPhotoAction(){
  if (!hasValidState())   return false;
  try {
    final Intent intent=ContactsUtils.getPhotoPickIntent();
    startActivityForResult(intent,PHOTO_PICKED_WITH_DATA);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.photoPickerNotFoundText,Toast.LENGTH_LONG).show();
  }
  return true;
}","/** 
 * Pick a specific photo to be added under the currently selected tab.
 */
private boolean doPickPhotoAction(long rawContactId){
  if (!hasValidState())   return false;
  try {
    final Intent intent=ContactsUtils.getPhotoPickIntent();
    startActivityForResult(intent,PHOTO_PICKED_WITH_DATA);
    mRawContactIdRequestingPhoto=rawContactId;
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.photoPickerNotFoundText,Toast.LENGTH_LONG).show();
  }
  return true;
}",0.9311827956989248
184054,"@Override protected void onSaveInstanceState(Bundle outState){
  if (hasValidState()) {
    outState.putParcelable(KEY_EDIT_STATE,mState);
  }
  super.onSaveInstanceState(outState);
}","@Override protected void onSaveInstanceState(Bundle outState){
  if (hasValidState()) {
    outState.putParcelable(KEY_EDIT_STATE,mState);
  }
  outState.putLong(KEY_RAW_CONTACT_ID_REQUESTING_PHOTO,mRawContactIdRequestingPhoto);
  super.onSaveInstanceState(outState);
}",0.6637168141592921
184055,"/** 
 * Set the internal state for this view, given a current  {@link EntityDelta} state and the {@link ContactsSource} thatapply to that state.
 */
public void setState(EntityDelta state,ContactsSource source){
  mGeneral.removeAllViews();
  mSecondary.removeAllViews();
  if (state == null || source == null)   return;
  EntityModifier.ensureKindExists(state,source,StructuredName.CONTENT_ITEM_TYPE);
  mHeader.setBackgroundColor(source.getHeaderColor(mContext));
  mSideBar.setBackgroundColor(source.getSideBarColor(mContext));
  ValuesDelta values=state.getValues();
  String accountName=values.getAsString(RawContacts.ACCOUNT_NAME);
  if (TextUtils.isEmpty(accountName)) {
    accountName=""String_Node_Str"";
  }
  mHeaderAccountName.setText(accountName);
  mHeaderAccountType.setText(source.getDisplayLabel(mContext));
  mHeaderIcon.setImageDrawable(source.getDisplayIcon(mContext));
  EntityModifier.ensureKindExists(state,source,Photo.CONTENT_ITEM_TYPE);
  mHasPhotoEditor=(source.getKindForMimetype(Photo.CONTENT_ITEM_TYPE) != null);
  mPhoto.setVisibility(mHasPhotoEditor ? View.VISIBLE : View.GONE);
  mPhoto.setEnabled(!source.readOnly);
  mName.setEnabled(!source.readOnly);
  boolean readOnly=source.readOnly;
  if (readOnly) {
    mGeneral.setVisibility(View.GONE);
    mSecondary.setVisibility(View.GONE);
    mSecondaryHeader.setVisibility(View.GONE);
  }
 else {
    mReadOnly.setVisibility(View.GONE);
  }
  for (  DataKind kind : source.getSortedDataKinds()) {
    if (!kind.editable)     continue;
    final String mimeType=kind.mimeType;
    if (StructuredName.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mName.setValues(kind,primary,state,source.readOnly);
    }
 else     if (Photo.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mPhoto.setValues(kind,primary,state,source.readOnly);
    }
 else     if (!readOnly) {
      if (kind.fieldList == null)       continue;
      final ViewGroup parent=kind.secondary ? mSecondary : mGeneral;
      final KindSectionView section=(KindSectionView)mInflater.inflate(R.layout.item_kind_section,parent,false);
      section.setState(kind,state,source.readOnly);
      section.setId(kind.weight);
      parent.addView(section);
    }
  }
  final int secondaryVisibility=mSecondary.getChildCount() > 0 ? View.VISIBLE : View.GONE;
  mSecondary.setVisibility(secondaryVisibility);
  mSecondaryHeader.setVisibility(secondaryVisibility);
}","/** 
 * Set the internal state for this view, given a current  {@link EntityDelta} state and the {@link ContactsSource} thatapply to that state.
 */
public void setState(EntityDelta state,ContactsSource source){
  mGeneral.removeAllViews();
  mSecondary.removeAllViews();
  if (state == null || source == null)   return;
  EntityModifier.ensureKindExists(state,source,StructuredName.CONTENT_ITEM_TYPE);
  mHeader.setBackgroundColor(source.getHeaderColor(mContext));
  mSideBar.setBackgroundColor(source.getSideBarColor(mContext));
  ValuesDelta values=state.getValues();
  String accountName=values.getAsString(RawContacts.ACCOUNT_NAME);
  if (TextUtils.isEmpty(accountName)) {
    accountName=""String_Node_Str"";
  }
  mHeaderAccountName.setText(accountName);
  mHeaderAccountType.setText(source.getDisplayLabel(mContext));
  mHeaderIcon.setImageDrawable(source.getDisplayIcon(mContext));
  mRawContactId=values.getAsLong(RawContacts._ID);
  EntityModifier.ensureKindExists(state,source,Photo.CONTENT_ITEM_TYPE);
  mHasPhotoEditor=(source.getKindForMimetype(Photo.CONTENT_ITEM_TYPE) != null);
  mPhoto.setVisibility(mHasPhotoEditor ? View.VISIBLE : View.GONE);
  mPhoto.setEnabled(!source.readOnly);
  mName.setEnabled(!source.readOnly);
  boolean readOnly=source.readOnly;
  if (readOnly) {
    mGeneral.setVisibility(View.GONE);
    mSecondary.setVisibility(View.GONE);
    mSecondaryHeader.setVisibility(View.GONE);
  }
 else {
    mReadOnly.setVisibility(View.GONE);
  }
  for (  DataKind kind : source.getSortedDataKinds()) {
    if (!kind.editable)     continue;
    final String mimeType=kind.mimeType;
    if (StructuredName.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mName.setValues(kind,primary,state,source.readOnly);
    }
 else     if (Photo.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mPhoto.setValues(kind,primary,state,source.readOnly);
    }
 else     if (!readOnly) {
      if (kind.fieldList == null)       continue;
      final ViewGroup parent=kind.secondary ? mSecondary : mGeneral;
      final KindSectionView section=(KindSectionView)mInflater.inflate(R.layout.item_kind_section,parent,false);
      section.setState(kind,state,source.readOnly);
      section.setId(kind.weight);
      parent.addView(section);
    }
  }
  final int secondaryVisibility=mSecondary.getChildCount() > 0 ? View.VISIBLE : View.GONE;
  mSecondary.setVisibility(secondaryVisibility);
  mSecondaryHeader.setVisibility(secondaryVisibility);
}",0.989986255645003
184056,"@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}","@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  if (cache.photoView != null) {
    cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  }
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}",0.981629769194536
184057,"@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}","@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  if (cache.photoView != null) {
    cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  }
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}",0.981629769194536
184058,"@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}","@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  if (cache.photoView != null) {
    cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  }
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}",0.981629769194536
184059,"/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  Sources sources=Sources.getInstance(this);
  if (mUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      for (      NamedContentValues subValue : entity.getSubValues()) {
        ViewEntry entry=new ViewEntry();
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final String mimetype=entryValues.getAsString(Data.MIMETYPE);
        if (mimetype == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimetype,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final long id=entryValues.getAsLong(Data._ID);
        final Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,id);
        entry.contactId=rawContactId;
        entry.id=id;
        entry.uri=uri;
        entry.mimetype=mimetype;
        entry.label=buildActionString(kind,entryValues,false);
        entry.data=buildDataString(kind,entryValues);
        if (kind.typeColumn != null && entryValues.containsKey(kind.typeColumn)) {
          entry.type=entryValues.getAsInteger(kind.typeColumn);
        }
        if (kind.iconRes > 0) {
          entry.resPackageName=kind.resPackageName;
          entry.actionIcon=kind.iconRes;
        }
        if (TextUtils.isEmpty(entry.data)) {
          continue;
        }
        if (!mRawContactIds.contains(entry.contactId)) {
          mRawContactIds.add(entry.contactId);
        }
        if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)|| CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
          final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
          if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype)) {
            mNumPhoneNumbers++;
            entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.data=PhoneNumberUtils.stripSeparators(entry.data);
            if (TextUtils.isEmpty(entry.data)) {
              Log.w(TAG,""String_Node_Str"" + id);
              continue;
            }
            entry.isPrimary=isSuperPrimary;
            mPhoneEntries.add(entry);
            if (entry.type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
              if (kind.iconAltRes > 0) {
                entry.secondaryActionIcon=kind.iconAltRes;
              }
            }
          }
 else           if (CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.isPrimary=isSuperPrimary;
            mEmailEntries.add(entry);
          }
 else           if (CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.maxLines=4;
            entry.intent=new Intent(Intent.ACTION_VIEW,uri);
            mPostalEntries.add(entry);
          }
 else           if (CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
            Object protocolObj=entryValues.getAsInteger(Data.DATA5);
            String host=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=getString(R.string.chat).toLowerCase();
            }
            if (protocolObj instanceof Number) {
              int protocol=((Number)protocolObj).intValue();
              host=ContactsUtils.lookupProviderNameFromId(protocol);
              if (protocol == CommonDataKinds.Im.PROTOCOL_GOOGLE_TALK || protocol == CommonDataKinds.Im.PROTOCOL_MSN) {
                entry.maxLabelLines=2;
              }
            }
 else             if (protocolObj != null) {
              String providerName=(String)protocolObj;
              host=providerName.toLowerCase();
            }
            if (!TextUtils.isEmpty(host)) {
              entry.intent=new Intent(Intent.ACTION_SENDTO,constructImToUrl(host.toLowerCase(),entry.data));
            }
            mImEntries.add(entry);
          }
        }
 else         if (CommonDataKinds.Organization.CONTENT_ITEM_TYPE.equals(mimetype)) {
          mOrganizationEntries.add(entry);
        }
 else         if (CommonDataKinds.Note.CONTENT_ITEM_TYPE.equals(mimetype)) {
          entry.id=0;
          entry.uri=null;
          entry.intent=null;
          entry.maxLines=10;
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,uri);
          mOtherEntries.add(entry);
        }
      }
    }
  }
}","/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  Sources sources=Sources.getInstance(this);
  if (mUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      if (!mRawContactIds.contains(rawContactId)) {
        mRawContactIds.add(rawContactId);
      }
      for (      NamedContentValues subValue : entity.getSubValues()) {
        ViewEntry entry=new ViewEntry();
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final String mimetype=entryValues.getAsString(Data.MIMETYPE);
        if (mimetype == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimetype,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final long id=entryValues.getAsLong(Data._ID);
        final Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,id);
        entry.contactId=rawContactId;
        entry.id=id;
        entry.uri=uri;
        entry.mimetype=mimetype;
        entry.label=buildActionString(kind,entryValues,false);
        entry.data=buildDataString(kind,entryValues);
        if (kind.typeColumn != null && entryValues.containsKey(kind.typeColumn)) {
          entry.type=entryValues.getAsInteger(kind.typeColumn);
        }
        if (kind.iconRes > 0) {
          entry.resPackageName=kind.resPackageName;
          entry.actionIcon=kind.iconRes;
        }
        if (TextUtils.isEmpty(entry.data)) {
          continue;
        }
        if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)|| CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
          final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
          if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype)) {
            mNumPhoneNumbers++;
            entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.data=PhoneNumberUtils.stripSeparators(entry.data);
            if (TextUtils.isEmpty(entry.data)) {
              Log.w(TAG,""String_Node_Str"" + id);
              continue;
            }
            entry.isPrimary=isSuperPrimary;
            mPhoneEntries.add(entry);
            if (entry.type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
              if (kind.iconAltRes > 0) {
                entry.secondaryActionIcon=kind.iconAltRes;
              }
            }
          }
 else           if (CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.isPrimary=isSuperPrimary;
            mEmailEntries.add(entry);
          }
 else           if (CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.maxLines=4;
            entry.intent=new Intent(Intent.ACTION_VIEW,uri);
            mPostalEntries.add(entry);
          }
 else           if (CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
            Object protocolObj=entryValues.getAsInteger(Data.DATA5);
            String host=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=getString(R.string.chat).toLowerCase();
            }
            if (protocolObj instanceof Number) {
              int protocol=((Number)protocolObj).intValue();
              host=ContactsUtils.lookupProviderNameFromId(protocol);
              if (protocol == CommonDataKinds.Im.PROTOCOL_GOOGLE_TALK || protocol == CommonDataKinds.Im.PROTOCOL_MSN) {
                entry.maxLabelLines=2;
              }
            }
 else             if (protocolObj != null) {
              String providerName=(String)protocolObj;
              host=providerName.toLowerCase();
            }
            if (!TextUtils.isEmpty(host)) {
              entry.intent=new Intent(Intent.ACTION_SENDTO,constructImToUrl(host.toLowerCase(),entry.data));
            }
            mImEntries.add(entry);
          }
        }
 else         if (CommonDataKinds.Organization.CONTENT_ITEM_TYPE.equals(mimetype)) {
          mOrganizationEntries.add(entry);
        }
 else         if (CommonDataKinds.Note.CONTENT_ITEM_TYPE.equals(mimetype)) {
          entry.id=0;
          entry.uri=null;
          entry.intent=null;
          entry.maxLines=10;
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,uri);
          mOtherEntries.add(entry);
        }
      }
    }
  }
}",0.9794089609151572
184060,"@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}","@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  if (cache.photoView != null) {
    cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  }
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}",0.981629769194536
184061,"/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  Sources sources=Sources.getInstance(this);
  if (mUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      for (      NamedContentValues subValue : entity.getSubValues()) {
        ViewEntry entry=new ViewEntry();
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final String mimetype=entryValues.getAsString(Data.MIMETYPE);
        if (mimetype == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimetype,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final long id=entryValues.getAsLong(Data._ID);
        final Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,id);
        entry.contactId=rawContactId;
        entry.id=id;
        entry.uri=uri;
        entry.mimetype=mimetype;
        entry.label=buildActionString(kind,entryValues,false);
        entry.data=buildDataString(kind,entryValues);
        if (kind.typeColumn != null && entryValues.containsKey(kind.typeColumn)) {
          entry.type=entryValues.getAsInteger(kind.typeColumn);
        }
        if (kind.iconRes > 0) {
          entry.resPackageName=kind.resPackageName;
          entry.actionIcon=kind.iconRes;
        }
        if (TextUtils.isEmpty(entry.data)) {
          continue;
        }
        if (!mRawContactIds.contains(entry.contactId)) {
          mRawContactIds.add(entry.contactId);
        }
        if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)|| CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
          final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
          if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype)) {
            mNumPhoneNumbers++;
            entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.data=PhoneNumberUtils.stripSeparators(entry.data);
            if (TextUtils.isEmpty(entry.data)) {
              Log.w(TAG,""String_Node_Str"" + id);
              continue;
            }
            entry.isPrimary=isSuperPrimary;
            mPhoneEntries.add(entry);
            if (entry.type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
              if (kind.iconAltRes > 0) {
                entry.secondaryActionIcon=kind.iconAltRes;
              }
            }
          }
 else           if (CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.isPrimary=isSuperPrimary;
            mEmailEntries.add(entry);
          }
 else           if (CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.maxLines=4;
            entry.intent=new Intent(Intent.ACTION_VIEW,uri);
            mPostalEntries.add(entry);
          }
 else           if (CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
            Object protocolObj=entryValues.getAsInteger(Data.DATA5);
            String host=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=getString(R.string.chat).toLowerCase();
            }
            if (protocolObj instanceof Number) {
              int protocol=((Number)protocolObj).intValue();
              host=ContactsUtils.lookupProviderNameFromId(protocol);
              if (protocol == CommonDataKinds.Im.PROTOCOL_GOOGLE_TALK || protocol == CommonDataKinds.Im.PROTOCOL_MSN) {
                entry.maxLabelLines=2;
              }
            }
 else             if (protocolObj != null) {
              String providerName=(String)protocolObj;
              host=providerName.toLowerCase();
            }
            if (!TextUtils.isEmpty(host)) {
              entry.intent=new Intent(Intent.ACTION_SENDTO,constructImToUrl(host.toLowerCase(),entry.data));
            }
            mImEntries.add(entry);
          }
        }
 else         if (CommonDataKinds.Organization.CONTENT_ITEM_TYPE.equals(mimetype)) {
          mOrganizationEntries.add(entry);
        }
 else         if (CommonDataKinds.Note.CONTENT_ITEM_TYPE.equals(mimetype)) {
          entry.id=0;
          entry.uri=null;
          entry.intent=null;
          entry.maxLines=10;
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,uri);
          mOtherEntries.add(entry);
        }
      }
    }
  }
}","/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  Sources sources=Sources.getInstance(this);
  if (mUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      if (!mRawContactIds.contains(rawContactId)) {
        mRawContactIds.add(rawContactId);
      }
      for (      NamedContentValues subValue : entity.getSubValues()) {
        ViewEntry entry=new ViewEntry();
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final String mimetype=entryValues.getAsString(Data.MIMETYPE);
        if (mimetype == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimetype,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final long id=entryValues.getAsLong(Data._ID);
        final Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,id);
        entry.contactId=rawContactId;
        entry.id=id;
        entry.uri=uri;
        entry.mimetype=mimetype;
        entry.label=buildActionString(kind,entryValues,false);
        entry.data=buildDataString(kind,entryValues);
        if (kind.typeColumn != null && entryValues.containsKey(kind.typeColumn)) {
          entry.type=entryValues.getAsInteger(kind.typeColumn);
        }
        if (kind.iconRes > 0) {
          entry.resPackageName=kind.resPackageName;
          entry.actionIcon=kind.iconRes;
        }
        if (TextUtils.isEmpty(entry.data)) {
          continue;
        }
        if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)|| CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
          final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
          if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype)) {
            mNumPhoneNumbers++;
            entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.data=PhoneNumberUtils.stripSeparators(entry.data);
            if (TextUtils.isEmpty(entry.data)) {
              Log.w(TAG,""String_Node_Str"" + id);
              continue;
            }
            entry.isPrimary=isSuperPrimary;
            mPhoneEntries.add(entry);
            if (entry.type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
              if (kind.iconAltRes > 0) {
                entry.secondaryActionIcon=kind.iconAltRes;
              }
            }
          }
 else           if (CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.isPrimary=isSuperPrimary;
            mEmailEntries.add(entry);
          }
 else           if (CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.maxLines=4;
            entry.intent=new Intent(Intent.ACTION_VIEW,uri);
            mPostalEntries.add(entry);
          }
 else           if (CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
            Object protocolObj=entryValues.getAsInteger(Data.DATA5);
            String host=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=getString(R.string.chat).toLowerCase();
            }
            if (protocolObj instanceof Number) {
              int protocol=((Number)protocolObj).intValue();
              host=ContactsUtils.lookupProviderNameFromId(protocol);
              if (protocol == CommonDataKinds.Im.PROTOCOL_GOOGLE_TALK || protocol == CommonDataKinds.Im.PROTOCOL_MSN) {
                entry.maxLabelLines=2;
              }
            }
 else             if (protocolObj != null) {
              String providerName=(String)protocolObj;
              host=providerName.toLowerCase();
            }
            if (!TextUtils.isEmpty(host)) {
              entry.intent=new Intent(Intent.ACTION_SENDTO,constructImToUrl(host.toLowerCase(),entry.data));
            }
            mImEntries.add(entry);
          }
        }
 else         if (CommonDataKinds.Organization.CONTENT_ITEM_TYPE.equals(mimetype)) {
          mOrganizationEntries.add(entry);
        }
 else         if (CommonDataKinds.Note.CONTENT_ITEM_TYPE.equals(mimetype)) {
          entry.id=0;
          entry.uri=null;
          entry.intent=null;
          entry.maxLines=10;
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,uri);
          mOtherEntries.add(entry);
        }
      }
    }
  }
}",0.9794089609151572
184062,"/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  Sources sources=Sources.getInstance(this);
  if (mUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      for (      NamedContentValues subValue : entity.getSubValues()) {
        ViewEntry entry=new ViewEntry();
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final String mimetype=entryValues.getAsString(Data.MIMETYPE);
        if (mimetype == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimetype,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final long id=entryValues.getAsLong(Data._ID);
        final Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,id);
        entry.contactId=rawContactId;
        entry.id=id;
        entry.uri=uri;
        entry.mimetype=mimetype;
        entry.label=buildActionString(kind,entryValues,false);
        entry.data=buildDataString(kind,entryValues);
        if (kind.typeColumn != null && entryValues.containsKey(kind.typeColumn)) {
          entry.type=entryValues.getAsInteger(kind.typeColumn);
        }
        if (kind.iconRes > 0) {
          entry.resPackageName=kind.resPackageName;
          entry.actionIcon=kind.iconRes;
        }
        if (TextUtils.isEmpty(entry.data)) {
          continue;
        }
        if (!mRawContactIds.contains(entry.contactId)) {
          mRawContactIds.add(entry.contactId);
        }
        if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)|| CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
          final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
          if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype)) {
            mNumPhoneNumbers++;
            entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.data=PhoneNumberUtils.stripSeparators(entry.data);
            if (TextUtils.isEmpty(entry.data)) {
              Log.w(TAG,""String_Node_Str"" + id);
              continue;
            }
            entry.isPrimary=isSuperPrimary;
            mPhoneEntries.add(entry);
            if (entry.type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
              if (kind.iconAltRes > 0) {
                entry.secondaryActionIcon=kind.iconAltRes;
              }
            }
          }
 else           if (CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.isPrimary=isSuperPrimary;
            mEmailEntries.add(entry);
          }
 else           if (CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.maxLines=4;
            entry.intent=new Intent(Intent.ACTION_VIEW,uri);
            mPostalEntries.add(entry);
          }
 else           if (CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
            Object protocolObj=entryValues.getAsInteger(Data.DATA5);
            String host=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=getString(R.string.chat).toLowerCase();
            }
            if (protocolObj instanceof Number) {
              int protocol=((Number)protocolObj).intValue();
              host=ContactsUtils.lookupProviderNameFromId(protocol);
              if (protocol == CommonDataKinds.Im.PROTOCOL_GOOGLE_TALK || protocol == CommonDataKinds.Im.PROTOCOL_MSN) {
                entry.maxLabelLines=2;
              }
            }
 else             if (protocolObj != null) {
              String providerName=(String)protocolObj;
              host=providerName.toLowerCase();
            }
            if (!TextUtils.isEmpty(host)) {
              entry.intent=new Intent(Intent.ACTION_SENDTO,constructImToUrl(host.toLowerCase(),entry.data));
            }
            mImEntries.add(entry);
          }
        }
 else         if (CommonDataKinds.Organization.CONTENT_ITEM_TYPE.equals(mimetype)) {
          mOrganizationEntries.add(entry);
        }
 else         if (CommonDataKinds.Note.CONTENT_ITEM_TYPE.equals(mimetype)) {
          entry.id=0;
          entry.uri=null;
          entry.intent=null;
          entry.maxLines=10;
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,uri);
          mOtherEntries.add(entry);
        }
      }
    }
  }
}","/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  Sources sources=Sources.getInstance(this);
  if (mUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      if (!mRawContactIds.contains(rawContactId)) {
        mRawContactIds.add(rawContactId);
      }
      for (      NamedContentValues subValue : entity.getSubValues()) {
        ViewEntry entry=new ViewEntry();
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final String mimetype=entryValues.getAsString(Data.MIMETYPE);
        if (mimetype == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimetype,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final long id=entryValues.getAsLong(Data._ID);
        final Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,id);
        entry.contactId=rawContactId;
        entry.id=id;
        entry.uri=uri;
        entry.mimetype=mimetype;
        entry.label=buildActionString(kind,entryValues,false);
        entry.data=buildDataString(kind,entryValues);
        if (kind.typeColumn != null && entryValues.containsKey(kind.typeColumn)) {
          entry.type=entryValues.getAsInteger(kind.typeColumn);
        }
        if (kind.iconRes > 0) {
          entry.resPackageName=kind.resPackageName;
          entry.actionIcon=kind.iconRes;
        }
        if (TextUtils.isEmpty(entry.data)) {
          continue;
        }
        if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)|| CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
          final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
          if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype)) {
            mNumPhoneNumbers++;
            entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.data=PhoneNumberUtils.stripSeparators(entry.data);
            if (TextUtils.isEmpty(entry.data)) {
              Log.w(TAG,""String_Node_Str"" + id);
              continue;
            }
            entry.isPrimary=isSuperPrimary;
            mPhoneEntries.add(entry);
            if (entry.type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
              if (kind.iconAltRes > 0) {
                entry.secondaryActionIcon=kind.iconAltRes;
              }
            }
          }
 else           if (CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.isPrimary=isSuperPrimary;
            mEmailEntries.add(entry);
          }
 else           if (CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.maxLines=4;
            entry.intent=new Intent(Intent.ACTION_VIEW,uri);
            mPostalEntries.add(entry);
          }
 else           if (CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
            Object protocolObj=entryValues.getAsInteger(Data.DATA5);
            String host=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=getString(R.string.chat).toLowerCase();
            }
            if (protocolObj instanceof Number) {
              int protocol=((Number)protocolObj).intValue();
              host=ContactsUtils.lookupProviderNameFromId(protocol);
              if (protocol == CommonDataKinds.Im.PROTOCOL_GOOGLE_TALK || protocol == CommonDataKinds.Im.PROTOCOL_MSN) {
                entry.maxLabelLines=2;
              }
            }
 else             if (protocolObj != null) {
              String providerName=(String)protocolObj;
              host=providerName.toLowerCase();
            }
            if (!TextUtils.isEmpty(host)) {
              entry.intent=new Intent(Intent.ACTION_SENDTO,constructImToUrl(host.toLowerCase(),entry.data));
            }
            mImEntries.add(entry);
          }
        }
 else         if (CommonDataKinds.Organization.CONTENT_ITEM_TYPE.equals(mimetype)) {
          mOrganizationEntries.add(entry);
        }
 else         if (CommonDataKinds.Note.CONTENT_ITEM_TYPE.equals(mimetype)) {
          entry.id=0;
          entry.uri=null;
          entry.intent=null;
          entry.maxLines=10;
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,uri);
          mOtherEntries.add(entry);
        }
      }
    }
  }
}",0.9794089609151572
184063,"/** 
 * Detect if the given   {@link MotionEvent} is outside the boundaries of thiswindow, which usually means we should dismiss.
 */
protected void detectEventOutside(MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    mDecor.getHitRect(mRect);
    final int x=(int)event.getX();
    final int y=(int)event.getY();
    if (!mRect.contains(x,y)) {
      event.setAction(MotionEvent.ACTION_OUTSIDE);
    }
  }
}","/** 
 * Detect if the given   {@link MotionEvent} is outside the boundaries of thiswindow, which usually means we should dismiss.
 */
protected void detectEventOutside(MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    mDecor.getHitRect(mRect);
    mRect.top=mRect.top + mDecor.getPaddingTop();
    mRect.bottom=mRect.bottom - mDecor.getPaddingBottom();
    final int x=(int)event.getX();
    final int y=(int)event.getY();
    if (!mRect.contains(x,y)) {
      event.setAction(MotionEvent.ACTION_OUTSIDE);
    }
  }
}",0.8888888888888888
184064,"/** 
 * Format the given phone number using  {@link PhoneNumberUtils#formatNumber(android.text.Editable,int)}. This helper method uses   {@link #sEditable} and {@link #sFormattingType} toprevent allocations between multiple calls. <p> Because of the shared  {@link #sEditable} builder, <b>this method is notthread safe</b>, and should only be called from the GUI thread. <p> If the given String object is null or empty, return an empty String.
 */
private String formatPhoneNumber(String number){
  if (!TextUtils.isEmpty(number)) {
    return ""String_Node_Str"";
  }
  if (sFormattingType == FORMATTING_TYPE_INVALID) {
    sFormattingType=PhoneNumberUtils.getFormatTypeForLocale(Locale.getDefault());
  }
  sEditable.clear();
  sEditable.append(number);
  PhoneNumberUtils.formatNumber(sEditable,sFormattingType);
  return sEditable.toString();
}","/** 
 * Format the given phone number using  {@link PhoneNumberUtils#formatNumber(android.text.Editable,int)}. This helper method uses   {@link #sEditable} and {@link #sFormattingType} toprevent allocations between multiple calls. <p> Because of the shared  {@link #sEditable} builder, <b>this method is notthread safe</b>, and should only be called from the GUI thread. <p> If the given String object is null or empty, return an empty String.
 */
private String formatPhoneNumber(String number){
  if (TextUtils.isEmpty(number)) {
    return ""String_Node_Str"";
  }
  if (sFormattingType == FORMATTING_TYPE_INVALID) {
    sFormattingType=PhoneNumberUtils.getFormatTypeForLocale(Locale.getDefault());
  }
  sEditable.clear();
  sEditable.append(number);
  PhoneNumberUtils.formatNumber(sEditable,sFormattingType);
  return sEditable.toString();
}",0.9994086339444116
184065,"/** 
 * Parse a specific entry from the given   {@link Bundle} and insert into thegiven  {@link EntityDelta}. Silently skips the insert when missing value or no valid   {@link EditType} found.
 * @param typeExtra {@link Bundle} key that holds the incoming{@link EditType#rawValue} value.
 * @param valueExtra {@link Bundle} key that holds the incoming value.
 * @param valueColumn Column to write value into {@link ValuesDelta}.
 */
public static void parseExtras(EntityDelta state,DataKind kind,Bundle extras,String typeExtra,String valueExtra,String valueColumn){
  final CharSequence value=extras.getCharSequence(valueExtra);
  if (kind == null)   return;
  final boolean canInsert=EntityModifier.canInsert(state,kind);
  final boolean validValue=(value != null && TextUtils.isGraphic(value));
  if (!validValue || !canInsert)   return;
  final int typeValue=extras.getInt(typeExtra,BaseTypes.TYPE_CUSTOM);
  final EditType editType=EntityModifier.getBestValidType(state,kind,true,typeValue);
  final ValuesDelta child=EntityModifier.insertChild(state,kind,editType);
  child.put(valueColumn,value.toString());
  if (editType != null && editType.customColumn != null) {
    final CharSequence customType=extras.getCharSequence(typeExtra);
    child.put(editType.customColumn,customType.toString());
  }
}","/** 
 * Parse a specific entry from the given   {@link Bundle} and insert into thegiven  {@link EntityDelta}. Silently skips the insert when missing value or no valid   {@link EditType} found.
 * @param typeExtra {@link Bundle} key that holds the incoming{@link EditType#rawValue} value.
 * @param valueExtra {@link Bundle} key that holds the incoming value.
 * @param valueColumn Column to write value into {@link ValuesDelta}.
 */
public static void parseExtras(EntityDelta state,DataKind kind,Bundle extras,String typeExtra,String valueExtra,String valueColumn){
  final CharSequence value=extras.getCharSequence(valueExtra);
  if (kind == null)   return;
  final boolean canInsert=EntityModifier.canInsert(state,kind);
  final boolean validValue=(value != null && TextUtils.isGraphic(value));
  if (!validValue || !canInsert)   return;
  final int typeValue=extras.getInt(typeExtra,BaseTypes.TYPE_CUSTOM);
  final EditType editType=EntityModifier.getBestValidType(state,kind,true,typeValue);
  final ValuesDelta child=EntityModifier.insertChild(state,kind,editType);
  child.put(valueColumn,value.toString());
  if (editType != null && editType.customColumn != null) {
    final String customType=extras.getString(typeExtra);
    child.put(editType.customColumn,customType);
  }
}",0.9201080663836356
184066,"/** 
 * Find the best   {@link EditType} for a potential insert. The ""best"" is thefirst primary type that doesn't already exist. When all valid types exist, we pick the last valid option.
 */
public static EditType getBestValidType(EntityDelta state,DataKind kind,boolean includeSecondary,int exactValue){
  if (kind.typeColumn == null)   return null;
  final SparseIntArray typeCount=getTypeFrequencies(state,kind);
  final ArrayList<EditType> validTypes=getValidTypes(state,kind,null,includeSecondary,typeCount);
  if (validTypes.size() == 0)   return null;
  final EditType lastType=validTypes.get(validTypes.size() - 1);
  Iterator<EditType> iterator=validTypes.iterator();
  while (iterator.hasNext()) {
    final EditType type=iterator.next();
    final int count=typeCount.get(type.rawValue);
    if (count == exactValue) {
      return type;
    }
    if (count > 0) {
      iterator.remove();
    }
  }
  if (validTypes.size() > 0) {
    return validTypes.get(0);
  }
 else {
    return lastType;
  }
}","/** 
 * Find the best   {@link EditType} for a potential insert. The ""best"" is thefirst primary type that doesn't already exist. When all valid types exist, we pick the last valid option.
 */
public static EditType getBestValidType(EntityDelta state,DataKind kind,boolean includeSecondary,int exactValue){
  if (kind.typeColumn == null)   return null;
  final SparseIntArray typeCount=getTypeFrequencies(state,kind);
  final ArrayList<EditType> validTypes=getValidTypes(state,kind,null,includeSecondary,typeCount);
  if (validTypes.size() == 0)   return null;
  final EditType lastType=validTypes.get(validTypes.size() - 1);
  Iterator<EditType> iterator=validTypes.iterator();
  while (iterator.hasNext()) {
    final EditType type=iterator.next();
    final int count=typeCount.get(type.rawValue);
    if (exactValue == type.rawValue) {
      return type;
    }
    if (count > 0) {
      iterator.remove();
    }
  }
  if (validTypes.size() > 0) {
    return validTypes.get(0);
  }
 else {
    return lastType;
  }
}",0.987192118226601
184067,"/** 
 * Find   {@link RawContacts#_ID} of the requested {@link EntityDelta}.
 */
public long getRawContactId(int index){
  if (index >= 0 && index < this.size()) {
    final EntityDelta delta=this.get(index);
    return delta.getValues().getAsLong(RawContacts._ID);
  }
 else {
    return 0;
  }
}","/** 
 * Find   {@link RawContacts#_ID} of the requested {@link EntityDelta}.
 */
public long getRawContactId(int index){
  if (index >= 0 && index < this.size()) {
    final EntityDelta delta=this.get(index);
    final ValuesDelta values=delta.getValues();
    if (values.isVisible()) {
      return values.getAsLong(RawContacts._ID);
    }
  }
  return 0;
}",0.8
184068,"/** 
 * Find index of given   {@link RawContacts#_ID} when present.
 */
public int indexOfRawContactId(long rawContactId){
  final int size=this.size();
  for (int i=0; i < size; i++) {
    final long currentId=getRawContactId(i);
    if (currentId == rawContactId) {
      return i;
    }
  }
  return -1;
}","/** 
 * Find index of given   {@link RawContacts#_ID} when present.
 */
public int indexOfRawContactId(Long rawContactId){
  final int size=this.size();
  for (int i=0; i < size; i++) {
    final long currentId=getRawContactId(i);
    if (currentId == rawContactId) {
      return i;
    }
  }
  return -1;
}",0.9967532467532468
184069,"@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  bindTabs();
  bindHeader();
  if (hasValidState()) {
    final long selectedId=savedInstanceState.getLong(KEY_SELECTED_RAW_CONTACT);
    setSelectedRawContactId(selectedId);
  }
  super.onRestoreInstanceState(savedInstanceState);
}","@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  bindTabs();
  bindHeader();
  if (hasValidState()) {
    final Long selectedId=savedInstanceState.getLong(KEY_SELECTED_RAW_CONTACT);
    setSelectedRawContactId(selectedId);
  }
  super.onRestoreInstanceState(savedInstanceState);
}",0.9973614775725592
184070,"/** 
 * {@inheritDoc} 
 */
public void onTabSelectionChanged(int tabIndex,boolean clicked){
  if (!hasValidState())   return;
  if (tabIndex < 0 || tabIndex >= mState.size())   return;
  final EntityDelta entity=mState.get(tabIndex);
  final String accountType=entity.getValues().getAsString(RawContacts.ACCOUNT_TYPE);
  final Sources sources=Sources.getInstance(this);
  final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
  mEditor.setState(entity,source);
}","/** 
 * {@inheritDoc} 
 */
public void onTabSelectionChanged(int tabIndex,boolean clicked){
  if (!hasValidState())   return;
  final EntityDelta entity=this.getSelectedEntityDelta();
  final String accountType=entity.getValues().getAsString(RawContacts.ACCOUNT_TYPE);
  final Sources sources=Sources.getInstance(this);
  final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
  mEditor.setState(entity,source);
}",0.8636363636363636
184071,"/** 
 * {@inheritDoc} 
 */
public void onPhotoLongClick(View view){
  if (!hasValidState())   return;
  this.createPhotoDialog().show();
}","/** 
 * {@inheritDoc} 
 */
public void onPhotoLongClick(View view){
  if (!hasValidState())   return;
  showAndManageDialog(createPhotoDialog());
}",0.9052631578947368
184072,"/** 
 * Set the selected tab based on the given   {@link RawContacts#_ID}.
 */
protected void setSelectedRawContactId(long rawContactId){
  final int index=mState.indexOfRawContactId(rawContactId);
  mTabWidget.setCurrentTab(index);
}","/** 
 * Set the selected tab based on the given   {@link RawContacts#_ID}.
 */
protected void setSelectedRawContactId(Long rawContactId){
  int tabIndex=0;
  final int size=mTabRawContacts.size();
  for (int i=0; i < size; i++) {
    if (mTabRawContacts.valueAt(i) == rawContactId) {
      tabIndex=i;
      break;
    }
  }
  mTabWidget.setCurrentTab(tabIndex);
  this.onTabSelectionChanged(tabIndex,false);
}",0.5652173913043478
184073,"@Override protected void onPostExecute(EditContactActivity target,AlertDialog.Builder result){
  result.create().show();
}","@Override protected void onPostExecute(EditContactActivity target,AlertDialog.Builder result){
  target.showAndManageDialog(result.create());
}",0.8754716981132076
184074,"private Dialog createDeleteDialog(){
  final AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.deleteConfirmation_title);
  builder.setIcon(android.R.drawable.ic_dialog_alert);
  builder.setMessage(R.string.deleteConfirmation);
  builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      final int index=mTabWidget.getCurrentTab();
      final EntityDelta delta=mState.get(index);
      delta.markDeleted();
      bindTabs();
      bindHeader();
    }
  }
);
  builder.setNegativeButton(android.R.string.cancel,null);
  builder.setCancelable(false);
  return builder.create();
}","private Dialog createDeleteDialog(){
  final AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.deleteConfirmation_title);
  builder.setIcon(android.R.drawable.ic_dialog_alert);
  builder.setMessage(R.string.deleteConfirmation);
  builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      final EntityDelta delta=getSelectedEntityDelta();
      delta.markDeleted();
      bindTabs();
      bindHeader();
    }
  }
);
  builder.setNegativeButton(android.R.string.cancel,null);
  builder.setCancelable(false);
  return builder.create();
}",0.6359048305695746
184075,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Context context=this;
  final LayoutInflater inflater=this.getLayoutInflater();
  final Intent intent=getIntent();
  final String action=intent.getAction();
  final Bundle extras=intent.getExtras();
  setContentView(R.layout.act_edit);
  mHeader=(ContactHeaderWidget)this.findViewById(R.id.contact_header_widget);
  mHeader.setContactHeaderListener(this);
  mHeader.showStar(true);
  mTabWidget=(ScrollingTabWidget)this.findViewById(R.id.tab_widget);
  mTabWidget.setTabSelectionListener(this);
  mEditor=(ContactEditorView)this.findViewById(android.R.id.tabcontent);
  mEditor.getPhotoEditor().setEditorListener(this);
  findViewById(R.id.btn_done).setOnClickListener(this);
  findViewById(R.id.btn_discard).setOnClickListener(this);
  if (Intent.ACTION_EDIT.equals(action) && icicle == null) {
    new QueryEntitiesTask(this).execute(intent);
  }
 else   if (Intent.ACTION_INSERT.equals(action) && icicle == null) {
    doAddAction();
  }
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Context context=this;
  final LayoutInflater inflater=this.getLayoutInflater();
  final Intent intent=getIntent();
  final String action=intent.getAction();
  final Bundle extras=intent.getExtras();
  setContentView(R.layout.act_edit);
  mHeader=(ContactHeaderWidget)this.findViewById(R.id.contact_header_widget);
  mHeader.setContactHeaderListener(this);
  mHeader.showStar(true);
  mTabWidget=(ScrollingTabWidget)this.findViewById(R.id.tab_widget);
  mTabWidget.setTabSelectionListener(this);
  mEditor=(ContactEditorView)this.findViewById(android.R.id.tabcontent);
  mEditor.getPhotoEditor().setEditorListener(this);
  findViewById(R.id.btn_done).setOnClickListener(this);
  findViewById(R.id.btn_discard).setOnClickListener(this);
  final boolean hasIncomingState=icicle != null && icicle.containsKey(KEY_EDIT_STATE);
  if (Intent.ACTION_EDIT.equals(action) && !hasIncomingState) {
    new QueryEntitiesTask(this).execute(intent);
  }
 else   if (Intent.ACTION_INSERT.equals(action) && !hasIncomingState) {
    doAddAction();
  }
}",0.9305361305361304
184076,"/** 
 * Rebuild tabs to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindTabs(){
  if (!hasValidState())   return;
  final Sources sources=Sources.getInstance(this);
  int selectedTab=0;
  mTabWidget.removeAllTabs();
  for (  EntityDelta entity : mState) {
    ValuesDelta values=entity.getValues();
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final Long rawContactId=values.getAsLong(RawContacts._ID);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    final View tabView=ContactsUtils.createTabIndicatorView(mTabWidget.getTabParent(),source);
    mTabWidget.addTab(tabView);
  }
  if (mState.size() > 0) {
    mTabWidget.setCurrentTab(selectedTab);
    this.onTabSelectionChanged(selectedTab,false);
  }
  mEditor.setVisibility(View.VISIBLE);
}","/** 
 * Rebuild tabs to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindTabs(){
  if (!hasValidState())   return;
  final Sources sources=Sources.getInstance(this);
  final Long selectedRawContactId=this.getSelectedRawContactId();
  mTabWidget.removeAllTabs();
  mTabRawContacts.clear();
  for (  EntityDelta entity : mState) {
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final Long rawContactId=values.getAsLong(RawContacts._ID);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    final int tabIndex=mTabWidget.getTabCount();
    final View tabView=ContactsUtils.createTabIndicatorView(mTabWidget.getTabParent(),source);
    mTabWidget.addTab(tabView);
    mTabRawContacts.put(tabIndex,rawContactId);
  }
  final boolean hasActiveTabs=mTabWidget.getTabCount() > 0;
  if (hasActiveTabs) {
    this.setSelectedRawContactId(selectedRawContactId);
  }
 else {
    this.doSaveAction();
  }
  mEditor.setVisibility(View.VISIBLE);
}",0.7734553775743707
184077,"/** 
 * Delete the entire contact currently being edited, which usually asks for user confirmation before continuing.
 */
private boolean doDeleteAction(){
  if (!hasValidState())   return false;
  this.createDeleteDialog().show();
  return true;
}","/** 
 * Delete the entire contact currently being edited, which usually asks for user confirmation before continuing.
 */
private boolean doDeleteAction(){
  if (!hasValidState())   return false;
  showAndManageDialog(createDeleteDialog());
  return true;
}",0.8752475247524752
184078,"/** 
 * Return the   {@link RawContacts#_ID} of the currently selected tab.
 */
protected long getSelectedRawContactId(){
  final int index=mTabWidget.getCurrentTab();
  return mState.getRawContactId(index);
}","/** 
 * Return the   {@link RawContacts#_ID} of the currently selected tab.
 */
protected Long getSelectedRawContactId(){
  final int tabIndex=mTabWidget.getCurrentTab();
  return this.mTabRawContacts.get(tabIndex);
}",0.9154929577464788
184079,"/** 
 * {@inheritDoc} 
 */
public void onDisplayNameLongClick(View view){
  if (!hasValidState())   return;
  this.createNameDialog().show();
}","/** 
 * {@inheritDoc} 
 */
public void onDisplayNameLongClick(View view){
  if (!hasValidState())   return;
  showAndManageDialog(createNameDialog());
}",0.9084745762711864
184080,"/** 
 * Saves or creates the contact based on the mode, and if successful finishes the activity.
 */
private boolean doSaveAction(){
  if (!hasValidState())   return false;
  final int selectedTab=mTabWidget.getCurrentTab();
  final long rawContactId=mState.getRawContactId(selectedTab);
  if (rawContactId != -1) {
    final Intent intent=new Intent();
    intent.putExtra(ViewContactActivity.RAW_CONTACT_ID_EXTRA,rawContactId);
    setResult(RESULT_OK,intent);
  }
  try {
    final PersistTask task=new PersistTask(this);
    task.execute(mState);
    task.get(TIMEOUT_PERSIST,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
  }
catch (  TimeoutException e) {
  }
catch (  ExecutionException e) {
  }
  this.finish();
  return true;
}","/** 
 * Saves or creates the contact based on the mode, and if successful finishes the activity.
 */
private boolean doSaveAction(){
  if (!hasValidState())   return false;
  final Long rawContactId=this.getSelectedRawContactId();
  if (rawContactId != null) {
    final Intent intent=new Intent();
    intent.putExtra(ViewContactActivity.RAW_CONTACT_ID_EXTRA,(long)rawContactId);
    setResult(RESULT_OK,intent);
  }
  try {
    final PersistTask task=new PersistTask(this);
    task.execute(mState);
    task.get(TIMEOUT_PERSIST,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
  }
catch (  TimeoutException e) {
  }
catch (  ExecutionException e) {
  }
  this.finish();
  return true;
}",0.8963623884694578
184081,"/** 
 * Parse a specific entry from the given   {@link Bundle} and insert into thegiven  {@link EntityDelta}. Silently skips the insert when missing value or no valid   {@link EditType} found.
 * @param typeExtra {@link Bundle} key that holds the incoming{@link EditType#rawValue} value.
 * @param valueExtra {@link Bundle} key that holds the incoming value.
 * @param valueColumn Column to write value into {@link ValuesDelta}.
 */
public static void parseExtras(EntityDelta state,DataKind kind,Bundle extras,String typeExtra,String valueExtra,String valueColumn){
  final CharSequence value=extras.getCharSequence(valueExtra);
  if (kind == null)   return;
  final boolean canInsert=EntityModifier.canInsert(state,kind);
  final boolean validValue=(value != null && TextUtils.isGraphic(value));
  if (!validValue || !canInsert)   return;
  final int typeValue=extras.getInt(typeExtra,BaseTypes.TYPE_CUSTOM);
  final EditType editType=EntityModifier.getBestValidType(state,kind,true,typeValue);
  final ValuesDelta child=EntityModifier.insertChild(state,kind,editType);
  child.put(valueColumn,value.toString());
  if (editType != null && editType.customColumn != null) {
    final CharSequence customType=extras.getCharSequence(typeExtra);
    child.put(editType.customColumn,customType.toString());
  }
}","/** 
 * Parse a specific entry from the given   {@link Bundle} and insert into thegiven  {@link EntityDelta}. Silently skips the insert when missing value or no valid   {@link EditType} found.
 * @param typeExtra {@link Bundle} key that holds the incoming{@link EditType#rawValue} value.
 * @param valueExtra {@link Bundle} key that holds the incoming value.
 * @param valueColumn Column to write value into {@link ValuesDelta}.
 */
public static void parseExtras(EntityDelta state,DataKind kind,Bundle extras,String typeExtra,String valueExtra,String valueColumn){
  final CharSequence value=extras.getCharSequence(valueExtra);
  if (kind == null)   return;
  final boolean canInsert=EntityModifier.canInsert(state,kind);
  final boolean validValue=(value != null && TextUtils.isGraphic(value));
  if (!validValue || !canInsert)   return;
  final int typeValue=extras.getInt(typeExtra,BaseTypes.TYPE_CUSTOM);
  final EditType editType=EntityModifier.getBestValidType(state,kind,true,typeValue);
  final ValuesDelta child=EntityModifier.insertChild(state,kind,editType);
  child.put(valueColumn,value.toString());
  if (editType != null && editType.customColumn != null) {
    final String customType=extras.getString(typeExtra);
    child.put(editType.customColumn,customType);
  }
}",0.9201080663836356
184082,"/** 
 * Find the best   {@link EditType} for a potential insert. The ""best"" is thefirst primary type that doesn't already exist. When all valid types exist, we pick the last valid option.
 */
public static EditType getBestValidType(EntityDelta state,DataKind kind,boolean includeSecondary,int exactValue){
  if (kind.typeColumn == null)   return null;
  final SparseIntArray typeCount=getTypeFrequencies(state,kind);
  final ArrayList<EditType> validTypes=getValidTypes(state,kind,null,includeSecondary,typeCount);
  if (validTypes.size() == 0)   return null;
  final EditType lastType=validTypes.get(validTypes.size() - 1);
  Iterator<EditType> iterator=validTypes.iterator();
  while (iterator.hasNext()) {
    final EditType type=iterator.next();
    final int count=typeCount.get(type.rawValue);
    if (count == exactValue) {
      return type;
    }
    if (count > 0) {
      iterator.remove();
    }
  }
  if (validTypes.size() > 0) {
    return validTypes.get(0);
  }
 else {
    return lastType;
  }
}","/** 
 * Find the best   {@link EditType} for a potential insert. The ""best"" is thefirst primary type that doesn't already exist. When all valid types exist, we pick the last valid option.
 */
public static EditType getBestValidType(EntityDelta state,DataKind kind,boolean includeSecondary,int exactValue){
  if (kind.typeColumn == null)   return null;
  final SparseIntArray typeCount=getTypeFrequencies(state,kind);
  final ArrayList<EditType> validTypes=getValidTypes(state,kind,null,includeSecondary,typeCount);
  if (validTypes.size() == 0)   return null;
  final EditType lastType=validTypes.get(validTypes.size() - 1);
  Iterator<EditType> iterator=validTypes.iterator();
  while (iterator.hasNext()) {
    final EditType type=iterator.next();
    final int count=typeCount.get(type.rawValue);
    if (exactValue == type.rawValue) {
      return type;
    }
    if (count > 0) {
      iterator.remove();
    }
  }
  if (validTypes.size() > 0) {
    return validTypes.get(0);
  }
 else {
    return lastType;
  }
}",0.987192118226601
184083,"/** 
 * Find   {@link RawContacts#_ID} of the requested {@link EntityDelta}.
 */
public long getRawContactId(int index){
  if (index >= 0 && index < this.size()) {
    final EntityDelta delta=this.get(index);
    return delta.getValues().getAsLong(RawContacts._ID);
  }
 else {
    return 0;
  }
}","/** 
 * Find   {@link RawContacts#_ID} of the requested {@link EntityDelta}.
 */
public long getRawContactId(int index){
  if (index >= 0 && index < this.size()) {
    final EntityDelta delta=this.get(index);
    final ValuesDelta values=delta.getValues();
    if (values.isVisible()) {
      return values.getAsLong(RawContacts._ID);
    }
  }
  return 0;
}",0.8
184084,"/** 
 * Find index of given   {@link RawContacts#_ID} when present.
 */
public int indexOfRawContactId(long rawContactId){
  final int size=this.size();
  for (int i=0; i < size; i++) {
    final long currentId=getRawContactId(i);
    if (currentId == rawContactId) {
      return i;
    }
  }
  return -1;
}","/** 
 * Find index of given   {@link RawContacts#_ID} when present.
 */
public int indexOfRawContactId(Long rawContactId){
  final int size=this.size();
  for (int i=0; i < size; i++) {
    final long currentId=getRawContactId(i);
    if (currentId == rawContactId) {
      return i;
    }
  }
  return -1;
}",0.9967532467532468
184085,"@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  bindTabs();
  bindHeader();
  if (hasValidState()) {
    final long selectedId=savedInstanceState.getLong(KEY_SELECTED_RAW_CONTACT);
    setSelectedRawContactId(selectedId);
  }
  super.onRestoreInstanceState(savedInstanceState);
}","@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  bindTabs();
  bindHeader();
  if (hasValidState()) {
    final Long selectedId=savedInstanceState.getLong(KEY_SELECTED_RAW_CONTACT);
    setSelectedRawContactId(selectedId);
  }
  super.onRestoreInstanceState(savedInstanceState);
}",0.9973614775725592
184086,"/** 
 * {@inheritDoc} 
 */
public void onTabSelectionChanged(int tabIndex,boolean clicked){
  if (!hasValidState())   return;
  if (tabIndex < 0 || tabIndex >= mState.size())   return;
  final EntityDelta entity=mState.get(tabIndex);
  final String accountType=entity.getValues().getAsString(RawContacts.ACCOUNT_TYPE);
  final Sources sources=Sources.getInstance(this);
  final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
  mEditor.setState(entity,source);
}","/** 
 * {@inheritDoc} 
 */
public void onTabSelectionChanged(int tabIndex,boolean clicked){
  if (!hasValidState())   return;
  final EntityDelta entity=this.getSelectedEntityDelta();
  final String accountType=entity.getValues().getAsString(RawContacts.ACCOUNT_TYPE);
  final Sources sources=Sources.getInstance(this);
  final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
  mEditor.setState(entity,source);
}",0.8636363636363636
184087,"/** 
 * {@inheritDoc} 
 */
public void onPhotoLongClick(View view){
  if (!hasValidState())   return;
  this.createPhotoDialog().show();
}","/** 
 * {@inheritDoc} 
 */
public void onPhotoLongClick(View view){
  if (!hasValidState())   return;
  showAndManageDialog(createPhotoDialog());
}",0.9052631578947368
184088,"/** 
 * Set the selected tab based on the given   {@link RawContacts#_ID}.
 */
protected void setSelectedRawContactId(long rawContactId){
  final int index=mState.indexOfRawContactId(rawContactId);
  mTabWidget.setCurrentTab(index);
}","/** 
 * Set the selected tab based on the given   {@link RawContacts#_ID}.
 */
protected void setSelectedRawContactId(Long rawContactId){
  int tabIndex=0;
  final int size=mTabRawContacts.size();
  for (int i=0; i < size; i++) {
    if (mTabRawContacts.valueAt(i) == rawContactId) {
      tabIndex=i;
      break;
    }
  }
  mTabWidget.setCurrentTab(tabIndex);
  this.onTabSelectionChanged(tabIndex,false);
}",0.5652173913043478
184089,"@Override protected void onPostExecute(EditContactActivity target,AlertDialog.Builder result){
  result.create().show();
}","@Override protected void onPostExecute(EditContactActivity target,AlertDialog.Builder result){
  target.showAndManageDialog(result.create());
}",0.8754716981132076
184090,"private Dialog createDeleteDialog(){
  final AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.deleteConfirmation_title);
  builder.setIcon(android.R.drawable.ic_dialog_alert);
  builder.setMessage(R.string.deleteConfirmation);
  builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      final int index=mTabWidget.getCurrentTab();
      final EntityDelta delta=mState.get(index);
      delta.markDeleted();
      bindTabs();
      bindHeader();
    }
  }
);
  builder.setNegativeButton(android.R.string.cancel,null);
  builder.setCancelable(false);
  return builder.create();
}","private Dialog createDeleteDialog(){
  final AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.deleteConfirmation_title);
  builder.setIcon(android.R.drawable.ic_dialog_alert);
  builder.setMessage(R.string.deleteConfirmation);
  builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      final EntityDelta delta=getSelectedEntityDelta();
      delta.markDeleted();
      bindTabs();
      bindHeader();
    }
  }
);
  builder.setNegativeButton(android.R.string.cancel,null);
  builder.setCancelable(false);
  return builder.create();
}",0.6359048305695746
184091,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Context context=this;
  final LayoutInflater inflater=this.getLayoutInflater();
  final Intent intent=getIntent();
  final String action=intent.getAction();
  final Bundle extras=intent.getExtras();
  setContentView(R.layout.act_edit);
  mHeader=(ContactHeaderWidget)this.findViewById(R.id.contact_header_widget);
  mHeader.setContactHeaderListener(this);
  mHeader.showStar(true);
  mTabWidget=(ScrollingTabWidget)this.findViewById(R.id.tab_widget);
  mTabWidget.setTabSelectionListener(this);
  mEditor=(ContactEditorView)this.findViewById(android.R.id.tabcontent);
  mEditor.getPhotoEditor().setEditorListener(this);
  findViewById(R.id.btn_done).setOnClickListener(this);
  findViewById(R.id.btn_discard).setOnClickListener(this);
  if (Intent.ACTION_EDIT.equals(action) && icicle == null) {
    new QueryEntitiesTask(this).execute(intent);
  }
 else   if (Intent.ACTION_INSERT.equals(action) && icicle == null) {
    doAddAction();
  }
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Context context=this;
  final LayoutInflater inflater=this.getLayoutInflater();
  final Intent intent=getIntent();
  final String action=intent.getAction();
  final Bundle extras=intent.getExtras();
  setContentView(R.layout.act_edit);
  mHeader=(ContactHeaderWidget)this.findViewById(R.id.contact_header_widget);
  mHeader.setContactHeaderListener(this);
  mHeader.showStar(true);
  mTabWidget=(ScrollingTabWidget)this.findViewById(R.id.tab_widget);
  mTabWidget.setTabSelectionListener(this);
  mEditor=(ContactEditorView)this.findViewById(android.R.id.tabcontent);
  mEditor.getPhotoEditor().setEditorListener(this);
  findViewById(R.id.btn_done).setOnClickListener(this);
  findViewById(R.id.btn_discard).setOnClickListener(this);
  final boolean hasIncomingState=icicle != null && icicle.containsKey(KEY_EDIT_STATE);
  if (Intent.ACTION_EDIT.equals(action) && !hasIncomingState) {
    new QueryEntitiesTask(this).execute(intent);
  }
 else   if (Intent.ACTION_INSERT.equals(action) && !hasIncomingState) {
    doAddAction();
  }
}",0.9305361305361304
184092,"/** 
 * Rebuild tabs to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindTabs(){
  if (!hasValidState())   return;
  final Sources sources=Sources.getInstance(this);
  int selectedTab=0;
  mTabWidget.removeAllTabs();
  for (  EntityDelta entity : mState) {
    ValuesDelta values=entity.getValues();
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final Long rawContactId=values.getAsLong(RawContacts._ID);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    final View tabView=ContactsUtils.createTabIndicatorView(mTabWidget.getTabParent(),source);
    mTabWidget.addTab(tabView);
  }
  if (mState.size() > 0) {
    mTabWidget.setCurrentTab(selectedTab);
    this.onTabSelectionChanged(selectedTab,false);
  }
  mEditor.setVisibility(View.VISIBLE);
}","/** 
 * Rebuild tabs to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindTabs(){
  if (!hasValidState())   return;
  final Sources sources=Sources.getInstance(this);
  final Long selectedRawContactId=this.getSelectedRawContactId();
  mTabWidget.removeAllTabs();
  mTabRawContacts.clear();
  for (  EntityDelta entity : mState) {
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final Long rawContactId=values.getAsLong(RawContacts._ID);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    final int tabIndex=mTabWidget.getTabCount();
    final View tabView=ContactsUtils.createTabIndicatorView(mTabWidget.getTabParent(),source);
    mTabWidget.addTab(tabView);
    mTabRawContacts.put(tabIndex,rawContactId);
  }
  final boolean hasActiveTabs=mTabWidget.getTabCount() > 0;
  if (hasActiveTabs) {
    this.setSelectedRawContactId(selectedRawContactId);
  }
 else {
    this.doSaveAction();
  }
  mEditor.setVisibility(View.VISIBLE);
}",0.7734553775743707
184093,"/** 
 * Delete the entire contact currently being edited, which usually asks for user confirmation before continuing.
 */
private boolean doDeleteAction(){
  if (!hasValidState())   return false;
  this.createDeleteDialog().show();
  return true;
}","/** 
 * Delete the entire contact currently being edited, which usually asks for user confirmation before continuing.
 */
private boolean doDeleteAction(){
  if (!hasValidState())   return false;
  showAndManageDialog(createDeleteDialog());
  return true;
}",0.8752475247524752
184094,"/** 
 * Return the   {@link RawContacts#_ID} of the currently selected tab.
 */
protected long getSelectedRawContactId(){
  final int index=mTabWidget.getCurrentTab();
  return mState.getRawContactId(index);
}","/** 
 * Return the   {@link RawContacts#_ID} of the currently selected tab.
 */
protected Long getSelectedRawContactId(){
  final int tabIndex=mTabWidget.getCurrentTab();
  return this.mTabRawContacts.get(tabIndex);
}",0.9154929577464788
184095,"/** 
 * {@inheritDoc} 
 */
public void onDisplayNameLongClick(View view){
  if (!hasValidState())   return;
  this.createNameDialog().show();
}","/** 
 * {@inheritDoc} 
 */
public void onDisplayNameLongClick(View view){
  if (!hasValidState())   return;
  showAndManageDialog(createNameDialog());
}",0.9084745762711864
184096,"/** 
 * Saves or creates the contact based on the mode, and if successful finishes the activity.
 */
private boolean doSaveAction(){
  if (!hasValidState())   return false;
  final int selectedTab=mTabWidget.getCurrentTab();
  final long rawContactId=mState.getRawContactId(selectedTab);
  if (rawContactId != -1) {
    final Intent intent=new Intent();
    intent.putExtra(ViewContactActivity.RAW_CONTACT_ID_EXTRA,rawContactId);
    setResult(RESULT_OK,intent);
  }
  try {
    final PersistTask task=new PersistTask(this);
    task.execute(mState);
    task.get(TIMEOUT_PERSIST,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
  }
catch (  TimeoutException e) {
  }
catch (  ExecutionException e) {
  }
  this.finish();
  return true;
}","/** 
 * Saves or creates the contact based on the mode, and if successful finishes the activity.
 */
private boolean doSaveAction(){
  if (!hasValidState())   return false;
  final Long rawContactId=this.getSelectedRawContactId();
  if (rawContactId != null) {
    final Intent intent=new Intent();
    intent.putExtra(ViewContactActivity.RAW_CONTACT_ID_EXTRA,(long)rawContactId);
    setResult(RESULT_OK,intent);
  }
  try {
    final PersistTask task=new PersistTask(this);
    task.execute(mState);
    task.get(TIMEOUT_PERSIST,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
  }
catch (  TimeoutException e) {
  }
catch (  ExecutionException e) {
  }
  this.finish();
  return true;
}",0.8963623884694578
184097,"@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
long photoId=0;
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
photoId=cursor.getLong(SUMMARY_PHOTO_ID_COLUMN_INDEX);
}
if (photoId == 0) {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
}
 else {
cache.photoView.setImageBitmap(null);
Bitmap photo=null;
SoftReference<Bitmap> ref=mBitmapCache.get(photoId);
if (ref != null) {
  photo=ref.get();
  if (photo == null) {
    mBitmapCache.remove(photoId);
  }
}
if (photo != null) {
  cache.photoView.setImageBitmap(photo);
}
 else {
  cache.photoView.setTag(photoId);
  cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
  if (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {
    sendFetchImageMessage(cache.photoView);
  }
 else {
    mItemsMissingImages.add(cache.photoView);
  }
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}","@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
long photoId=0;
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
photoId=cursor.getLong(SUMMARY_PHOTO_ID_COLUMN_INDEX);
}
cache.photoView.setTag(photoId);
if (photoId == 0) {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
}
 else {
Bitmap photo=null;
SoftReference<Bitmap> ref=mBitmapCache.get(photoId);
if (ref != null) {
  photo=ref.get();
  if (photo == null) {
    mBitmapCache.remove(photoId);
  }
}
if (photo != null) {
  cache.photoView.setImageBitmap(photo);
}
 else {
  cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
  mItemsMissingImages.add(cache.photoView);
  if (mScrollState != OnScrollListener.SCROLL_STATE_FLING) {
    sendFetchImageMessage(cache.photoView);
  }
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}",0.9454042847270214
184098,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  long photoId=(Long)imageView.getTag();
Bitmap photo=null;
try {
photo=ContactsUtils.loadContactPhoto(mContext,photoId,null);
if (photo != null) {
  mBitmapCache.put(photoId,new SoftReference<Bitmap>(photo));
  imageView.setImageBitmap(photo);
}
}
 catch (OutOfMemoryError e) {
}
mItemsMissingImages.remove(imageView);
break;
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      ImageView imageView=(ImageView)message.obj;
      long photoId=(Long)imageView.getTag();
      if (photoId == 0) {
        break;
      }
      Bitmap photo=null;
      try {
        photo=ContactsUtils.loadContactPhoto(mContext,photoId,null);
      }
 catch (      OutOfMemoryError e) {
      }
      if (photo == null) {
        break;
      }
      mBitmapCache.put(photoId,new SoftReference<Bitmap>(photo));
synchronized (imageView) {
        long currentPhotoId=(Long)imageView.getTag();
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.5904486251808972
184099,"public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState != OnScrollListener.SCROLL_STATE_IDLE) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}","public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState == OnScrollListener.SCROLL_STATE_FLING) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}",0.9785575048732944
184100,"@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
long photoId=0;
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
photoId=cursor.getLong(SUMMARY_PHOTO_ID_COLUMN_INDEX);
}
if (photoId == 0) {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
}
 else {
cache.photoView.setImageBitmap(null);
Bitmap photo=null;
SoftReference<Bitmap> ref=mBitmapCache.get(photoId);
if (ref != null) {
  photo=ref.get();
  if (photo == null) {
    mBitmapCache.remove(photoId);
  }
}
if (photo != null) {
  cache.photoView.setImageBitmap(photo);
}
 else {
  cache.photoView.setTag(photoId);
  cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
  if (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {
    sendFetchImageMessage(cache.photoView);
  }
 else {
    mItemsMissingImages.add(cache.photoView);
  }
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}","@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
long photoId=0;
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
photoId=cursor.getLong(SUMMARY_PHOTO_ID_COLUMN_INDEX);
}
cache.photoView.setTag(photoId);
if (photoId == 0) {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
}
 else {
Bitmap photo=null;
SoftReference<Bitmap> ref=mBitmapCache.get(photoId);
if (ref != null) {
  photo=ref.get();
  if (photo == null) {
    mBitmapCache.remove(photoId);
  }
}
if (photo != null) {
  cache.photoView.setImageBitmap(photo);
}
 else {
  cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
  mItemsMissingImages.add(cache.photoView);
  if (mScrollState != OnScrollListener.SCROLL_STATE_FLING) {
    sendFetchImageMessage(cache.photoView);
  }
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}",0.9454042847270214
184101,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  long photoId=(Long)imageView.getTag();
Bitmap photo=null;
try {
photo=ContactsUtils.loadContactPhoto(mContext,photoId,null);
if (photo != null) {
  mBitmapCache.put(photoId,new SoftReference<Bitmap>(photo));
  imageView.setImageBitmap(photo);
}
}
 catch (OutOfMemoryError e) {
}
mItemsMissingImages.remove(imageView);
break;
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      ImageView imageView=(ImageView)message.obj;
      long photoId=(Long)imageView.getTag();
      if (photoId == 0) {
        break;
      }
      Bitmap photo=null;
      try {
        photo=ContactsUtils.loadContactPhoto(mContext,photoId,null);
      }
 catch (      OutOfMemoryError e) {
      }
      if (photo == null) {
        break;
      }
      mBitmapCache.put(photoId,new SoftReference<Bitmap>(photo));
synchronized (imageView) {
        long currentPhotoId=(Long)imageView.getTag();
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.5904486251808972
184102,"public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState != OnScrollListener.SCROLL_STATE_IDLE) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}","public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState == OnScrollListener.SCROLL_STATE_FLING) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}",0.9785575048732944
184103,"@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
long photoId=0;
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
photoId=cursor.getLong(SUMMARY_PHOTO_ID_COLUMN_INDEX);
}
if (photoId == 0) {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
}
 else {
cache.photoView.setImageBitmap(null);
Bitmap photo=null;
SoftReference<Bitmap> ref=mBitmapCache.get(photoId);
if (ref != null) {
  photo=ref.get();
  if (photo == null) {
    mBitmapCache.remove(photoId);
  }
}
if (photo != null) {
  cache.photoView.setImageBitmap(photo);
}
 else {
  cache.photoView.setTag(photoId);
  cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
  if (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {
    sendFetchImageMessage(cache.photoView);
  }
 else {
    mItemsMissingImages.add(cache.photoView);
  }
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}","@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
long photoId=0;
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
photoId=cursor.getLong(SUMMARY_PHOTO_ID_COLUMN_INDEX);
}
cache.photoView.setTag(photoId);
if (photoId == 0) {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
}
 else {
Bitmap photo=null;
SoftReference<Bitmap> ref=mBitmapCache.get(photoId);
if (ref != null) {
  photo=ref.get();
  if (photo == null) {
    mBitmapCache.remove(photoId);
  }
}
if (photo != null) {
  cache.photoView.setImageBitmap(photo);
}
 else {
  cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
  mItemsMissingImages.add(cache.photoView);
  if (mScrollState != OnScrollListener.SCROLL_STATE_FLING) {
    sendFetchImageMessage(cache.photoView);
  }
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}",0.9454042847270214
184104,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  long photoId=(Long)imageView.getTag();
Bitmap photo=null;
try {
photo=ContactsUtils.loadContactPhoto(mContext,photoId,null);
if (photo != null) {
  mBitmapCache.put(photoId,new SoftReference<Bitmap>(photo));
  imageView.setImageBitmap(photo);
}
}
 catch (OutOfMemoryError e) {
}
mItemsMissingImages.remove(imageView);
break;
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      ImageView imageView=(ImageView)message.obj;
      long photoId=(Long)imageView.getTag();
      if (photoId == 0) {
        break;
      }
      Bitmap photo=null;
      try {
        photo=ContactsUtils.loadContactPhoto(mContext,photoId,null);
      }
 catch (      OutOfMemoryError e) {
      }
      if (photo == null) {
        break;
      }
      mBitmapCache.put(photoId,new SoftReference<Bitmap>(photo));
synchronized (imageView) {
        long currentPhotoId=(Long)imageView.getTag();
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.5904486251808972
184105,"public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState != OnScrollListener.SCROLL_STATE_IDLE) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}","public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState == OnScrollListener.SCROLL_STATE_FLING) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}",0.9785575048732944
184106,"@Override protected void onResume(){
  super.onResume();
  boolean runQuery=true;
  Activity parent=getParent();
  if (mMode == MODE_DEFAULT) {
    setDefaultMode();
  }
  if (parent != null && parent instanceof DialtactsActivity) {
    String filterText=((DialtactsActivity)parent).getAndClearFilterText();
    if (filterText != null && filterText.length() > 0) {
      getListView().setFilterText(filterText);
      runQuery=false;
    }
 else     if (mJustCreated) {
      getListView().clearTextFilter();
    }
  }
  if (mJustCreated && runQuery) {
    startQuery();
  }
  mJustCreated=false;
}","@Override protected void onResume(){
  super.onResume();
  mScrollState=OnScrollListener.SCROLL_STATE_IDLE;
  boolean runQuery=true;
  Activity parent=getParent();
  if (mMode == MODE_DEFAULT) {
    setDefaultMode();
  }
  if (parent != null && parent instanceof DialtactsActivity) {
    String filterText=((DialtactsActivity)parent).getAndClearFilterText();
    if (filterText != null && filterText.length() > 0) {
      getListView().setFilterText(filterText);
      runQuery=false;
    }
 else     if (mJustCreated) {
      getListView().clearTextFilter();
    }
  }
  if (mJustCreated && runQuery) {
    startQuery();
  }
  mJustCreated=false;
}",0.959101844426624
184107,"@Override protected void onPause(){
  super.onPause();
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_NONE);
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneStopper.removeMessages(STOP_TONE);
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}","@Override protected void onPause(){
  super.onPause();
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_NONE);
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}",0.904639175257732
184108,"/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneStopper.removeMessages(STOP_TONE);
    mToneGenerator.startTone(tone);
    mToneStopper.sendEmptyMessageDelayed(STOP_TONE,TONE_LENGTH_MS);
  }
}","/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneGenerator.startTone(tone,TONE_LENGTH_MS);
  }
}",0.9190718732314658
184109,"@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
int pos=cursor.getPosition();
Bitmap photo=null;
cache.photoView.setImageBitmap(null);
cache.photoView.setTag(pos);
SoftReference<Bitmap> ref=mBitmapCache.get(pos);
if (ref != null) {
photo=ref.get();
}
if (photo != null) {
cache.photoView.setImageBitmap(photo);
}
 else {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
if (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {
  sendFetchImageMessage(cache.photoView);
}
 else {
  mItemsMissingImages.add(cache.photoView);
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}","@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
long photoId=0;
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
photoId=cursor.getLong(SUMMARY_PHOTO_ID_COLUMN_INDEX);
}
if (photoId == 0) {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
}
 else {
cache.photoView.setImageBitmap(null);
Bitmap photo=null;
SoftReference<Bitmap> ref=mBitmapCache.get(photoId);
if (ref != null) {
  photo=ref.get();
  if (photo == null) {
    mBitmapCache.remove(photoId);
  }
}
if (photo != null) {
  cache.photoView.setImageBitmap(photo);
}
 else {
  cache.photoView.setTag(photoId);
  cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
  if (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {
    sendFetchImageMessage(cache.photoView);
  }
 else {
    mItemsMissingImages.add(cache.photoView);
  }
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}",0.9241753534199628
184110,"private void processMissingImageItems(AbsListView view){
  for (  ImageView iv : mItemsMissingImages) {
    int pos=(Integer)iv.getTag();
    sendFetchImageMessage(iv);
  }
}","private void processMissingImageItems(AbsListView view){
  for (  ImageView iv : mItemsMissingImages) {
    sendFetchImageMessage(iv);
  }
}",0.89171974522293
184111,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  int pos=(Integer)imageView.getTag();
Cursor cursor=(Cursor)getItem(pos);
if (cursor != null && !cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
try {
  Bitmap photo=ContactsUtils.loadContactPhoto(mContext,cursor.getInt(SUMMARY_PHOTO_ID_COLUMN_INDEX),null);
  mBitmapCache.put(pos,new SoftReference<Bitmap>(photo));
  if (photo != null) {
    imageView.setImageBitmap(photo);
  }
}
 catch (OutOfMemoryError e) {
}
}
if (imageView.getDrawable() == null) {
imageView.setImageResource(R.drawable.ic_contact_list_picture);
}
mItemsMissingImages.remove(imageView);
break;
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  long photoId=(Long)imageView.getTag();
Bitmap photo=null;
try {
photo=ContactsUtils.loadContactPhoto(mContext,photoId,null);
if (photo != null) {
  mBitmapCache.put(photoId,new SoftReference<Bitmap>(photo));
  imageView.setImageBitmap(photo);
}
}
 catch (OutOfMemoryError e) {
}
mItemsMissingImages.remove(imageView);
break;
}
}",0.5516201959306707
184112,"public ContactItemListAdapter(Context context){
  super(context,R.layout.contacts_list_item,null,false);
  mHandler=new ImageFetchHandler();
  mAlphabet=context.getString(com.android.internal.R.string.fast_scroll_alphabet);
  mUnknownNameText=context.getText(android.R.string.unknownName);
  mLocalizedLabels=context.getResources().getStringArray(android.R.array.phoneTypes);
  if (mQueryMode != QUERY_MODE_NONE) {
    mDisplayAdditionalData=false;
  }
  if ((mMode & MODE_MASK_NO_DATA) == MODE_MASK_NO_DATA) {
    mDisplayAdditionalData=false;
  }
  if ((mMode & MODE_MASK_SHOW_PHOTOS) == MODE_MASK_SHOW_PHOTOS) {
    mDisplayPhotos=true;
    setViewResource(R.layout.contacts_list_item_photo);
    mBitmapCache=new SparseArray<SoftReference<Bitmap>>();
    mItemsMissingImages=new HashSet<ImageView>();
  }
  if (mMode == MODE_STREQUENT || mMode == MODE_FREQUENT) {
    mDisplaySectionHeaders=false;
  }
}","public ContactItemListAdapter(Context context){
  super(context,R.layout.contacts_list_item,null,false);
  mHandler=new ImageFetchHandler();
  mAlphabet=context.getString(com.android.internal.R.string.fast_scroll_alphabet);
  mUnknownNameText=context.getText(android.R.string.unknownName);
  mLocalizedLabels=context.getResources().getStringArray(android.R.array.phoneTypes);
  if (mQueryMode != QUERY_MODE_NONE) {
    mDisplayAdditionalData=false;
  }
  if ((mMode & MODE_MASK_NO_DATA) == MODE_MASK_NO_DATA) {
    mDisplayAdditionalData=false;
  }
  if ((mMode & MODE_MASK_SHOW_PHOTOS) == MODE_MASK_SHOW_PHOTOS) {
    mDisplayPhotos=true;
    setViewResource(R.layout.contacts_list_item_photo);
    mBitmapCache=new HashMap<Long,SoftReference<Bitmap>>();
    mItemsMissingImages=new HashSet<ImageView>();
  }
  if (mMode == MODE_STREQUENT || mMode == MODE_FREQUENT) {
    mDisplaySectionHeaders=false;
  }
}",0.98732782369146
184113,"public CharSequence inflateUsing(Context context,ContentValues values){
  final EditType type=EntityModifier.getCurrentType(values,mKind);
  final boolean validString=(type != null && type.actionAltRes != 0);
  return validString ? context.getText(type.actionAltRes) : null;
}","public CharSequence inflateUsing(Context context,ContentValues values){
  final EditType type=EntityModifier.getCurrentType(values,mKind);
  final boolean validString=(type != null && type.actionAltRes != 0);
  CharSequence actionString;
  if (type.customColumn != null) {
    final String customLabel=values.getAsString(type.customColumn);
    actionString=String.format(context.getString(type.actionAltRes),customLabel);
  }
 else {
    actionString=context.getText(type.actionAltRes);
  }
  return validString ? actionString : null;
}",0.5781057810578106
184114,"public CharSequence inflateUsing(Context context,ContentValues values){
  final EditType type=EntityModifier.getCurrentType(values,mKind);
  final boolean validString=(type != null && type.actionAltRes != 0);
  return validString ? context.getText(type.actionAltRes) : null;
}","public CharSequence inflateUsing(Context context,ContentValues values){
  final EditType type=EntityModifier.getCurrentType(values,mKind);
  final boolean validString=(type != null && type.actionAltRes != 0);
  CharSequence actionString;
  if (type.customColumn != null) {
    final String customLabel=values.getAsString(type.customColumn);
    actionString=String.format(context.getString(type.actionAltRes),customLabel);
  }
 else {
    actionString=context.getText(type.actionAltRes);
  }
  return validString ? actionString : null;
}",0.5781057810578106
184115,"@Override protected void onResume(){
  super.onResume();
  boolean runQuery=true;
  Activity parent=getParent();
  if (mMode == MODE_DEFAULT) {
    setDefaultMode();
  }
  if (parent != null && parent instanceof DialtactsActivity) {
    String filterText=((DialtactsActivity)parent).getAndClearFilterText();
    if (filterText != null && filterText.length() > 0) {
      getListView().setFilterText(filterText);
      runQuery=false;
    }
 else     if (mJustCreated) {
      getListView().clearTextFilter();
    }
  }
  if (mJustCreated && runQuery) {
    startQuery();
  }
  mJustCreated=false;
}","@Override protected void onResume(){
  super.onResume();
  mScrollState=OnScrollListener.SCROLL_STATE_IDLE;
  boolean runQuery=true;
  Activity parent=getParent();
  if (mMode == MODE_DEFAULT) {
    setDefaultMode();
  }
  if (parent != null && parent instanceof DialtactsActivity) {
    String filterText=((DialtactsActivity)parent).getAndClearFilterText();
    if (filterText != null && filterText.length() > 0) {
      getListView().setFilterText(filterText);
      runQuery=false;
    }
 else     if (mJustCreated) {
      getListView().clearTextFilter();
    }
  }
  if (mJustCreated && runQuery) {
    startQuery();
  }
  mJustCreated=false;
}",0.959101844426624
184116,"@Override protected void onPause(){
  super.onPause();
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_NONE);
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneStopper.removeMessages(STOP_TONE);
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}","@Override protected void onPause(){
  super.onPause();
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_NONE);
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}",0.904639175257732
184117,"/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneStopper.removeMessages(STOP_TONE);
    mToneGenerator.startTone(tone);
    mToneStopper.sendEmptyMessageDelayed(STOP_TONE,TONE_LENGTH_MS);
  }
}","/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneGenerator.startTone(tone,TONE_LENGTH_MS);
  }
}",0.9190718732314658
184118,"@Override protected void onResume(){
  super.onResume();
  boolean runQuery=true;
  Activity parent=getParent();
  if (mMode == MODE_DEFAULT) {
    setDefaultMode();
  }
  if (parent != null && parent instanceof DialtactsActivity) {
    String filterText=((DialtactsActivity)parent).getAndClearFilterText();
    if (filterText != null && filterText.length() > 0) {
      getListView().setFilterText(filterText);
      runQuery=false;
    }
 else     if (mJustCreated) {
      getListView().clearTextFilter();
    }
  }
  if (mJustCreated && runQuery) {
    startQuery();
  }
  mJustCreated=false;
}","@Override protected void onResume(){
  super.onResume();
  mScrollState=OnScrollListener.SCROLL_STATE_IDLE;
  boolean runQuery=true;
  Activity parent=getParent();
  if (mMode == MODE_DEFAULT) {
    setDefaultMode();
  }
  if (parent != null && parent instanceof DialtactsActivity) {
    String filterText=((DialtactsActivity)parent).getAndClearFilterText();
    if (filterText != null && filterText.length() > 0) {
      getListView().setFilterText(filterText);
      runQuery=false;
    }
 else     if (mJustCreated) {
      getListView().clearTextFilter();
    }
  }
  if (mJustCreated && runQuery) {
    startQuery();
  }
  mJustCreated=false;
}",0.959101844426624
184119,"public CharSequence inflateUsing(Context context,ContentValues values){
  final EditType type=EntityModifier.getCurrentType(values,mKind);
  final boolean validString=(type != null && type.actionAltRes != 0);
  return validString ? context.getText(type.actionAltRes) : null;
}","public CharSequence inflateUsing(Context context,ContentValues values){
  final EditType type=EntityModifier.getCurrentType(values,mKind);
  final boolean validString=(type != null && type.actionAltRes != 0);
  CharSequence actionString;
  if (type.customColumn != null) {
    final String customLabel=values.getAsString(type.customColumn);
    actionString=String.format(context.getString(type.actionAltRes),customLabel);
  }
 else {
    actionString=context.getText(type.actionAltRes);
  }
  return validString ? actionString : null;
}",0.5781057810578106
184120,"@Override protected void onPause(){
  super.onPause();
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_NONE);
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneStopper.removeMessages(STOP_TONE);
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}","@Override protected void onPause(){
  super.onPause();
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_NONE);
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}",0.904639175257732
184121,"/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneStopper.removeMessages(STOP_TONE);
    mToneGenerator.startTone(tone);
    mToneStopper.sendEmptyMessageDelayed(STOP_TONE,TONE_LENGTH_MS);
  }
}","/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneGenerator.startTone(tone,TONE_LENGTH_MS);
  }
}",0.9190718732314658
184122,"@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  if ((mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER) {
    return;
  }
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  long id=info.id;
  Uri aggUri=ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
  menu.setHeaderTitle(cursor.getString(SUMMARY_NAME_COLUMN_INDEX));
  menu.add(0,MENU_ITEM_VIEW_CONTACT,0,R.string.menu_viewContact).setIntent(new Intent(Intent.ACTION_VIEW,aggUri));
  int starState=cursor.getInt(SUMMARY_STARRED_COLUMN_INDEX);
  if (starState == 0) {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_addStar);
  }
 else {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_removeStar);
  }
  menu.add(0,MENU_ITEM_EDIT,0,R.string.menu_editContact).setIntent(new Intent(Intent.ACTION_EDIT,aggUri));
  menu.add(0,MENU_ITEM_DELETE,0,R.string.menu_deleteContact);
}","@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  if ((mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER) {
    return;
  }
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  long id=info.id;
  Uri contactUri=ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
  long rawContactId=ContactsUtils.queryForRawContactId(getContentResolver(),id);
  Uri rawContactUri=ContentUris.withAppendedId(RawContacts.CONTENT_URI,rawContactId);
  menu.setHeaderTitle(cursor.getString(SUMMARY_NAME_COLUMN_INDEX));
  menu.add(0,MENU_ITEM_VIEW_CONTACT,0,R.string.menu_viewContact).setIntent(new Intent(Intent.ACTION_VIEW,contactUri));
  int starState=cursor.getInt(SUMMARY_STARRED_COLUMN_INDEX);
  if (starState == 0) {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_addStar);
  }
 else {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_removeStar);
  }
  menu.add(0,MENU_ITEM_EDIT,0,R.string.menu_editContact).setIntent(new Intent(Intent.ACTION_EDIT,rawContactUri));
  menu.add(0,MENU_ITEM_DELETE,0,R.string.menu_deleteContact);
}",0.9185667752442996
184123,"/** 
 * Calls the currently selected list item.
 * @return true if the call was initiated, false otherwise
 */
boolean callSelection(){
  ListView list=getListView();
  if (list.hasFocus()) {
    Cursor cursor=(Cursor)list.getSelectedItem();
    if (cursor != null) {
      long dataId=cursor.getLong(ID_COLUMN_INDEX);
      if (dataId == 0) {
        signalError();
        return false;
      }
      Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,dataId);
      Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,uri);
      startActivity(intent);
      return true;
    }
  }
  return false;
}","/** 
 * Calls the currently selected list item.
 * @return true if the call was initiated, false otherwise
 */
boolean callSelection(){
  ListView list=getListView();
  if (list.hasFocus()) {
    Cursor cursor=(Cursor)list.getSelectedItem();
    if (cursor != null) {
      boolean hasPhone=cursor.getInt(SUMMARY_HAS_PHONE_COLUMN_INDEX) != 0;
      if (!hasPhone) {
        signalError();
        return false;
      }
      String phone=ContactsUtils.querySuperPrimaryPhone(getContentResolver(),cursor.getLong(ID_COLUMN_INDEX));
      if (phone == null) {
        signalError();
        return false;
      }
      Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",phone,null));
      startActivity(intent);
      return true;
    }
  }
  return false;
}",0.7281831187410587
184124,"@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  if ((mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER) {
    return;
  }
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  long id=info.id;
  Uri aggUri=ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
  menu.setHeaderTitle(cursor.getString(SUMMARY_NAME_COLUMN_INDEX));
  menu.add(0,MENU_ITEM_VIEW_CONTACT,0,R.string.menu_viewContact).setIntent(new Intent(Intent.ACTION_VIEW,aggUri));
  int starState=cursor.getInt(SUMMARY_STARRED_COLUMN_INDEX);
  if (starState == 0) {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_addStar);
  }
 else {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_removeStar);
  }
  menu.add(0,MENU_ITEM_EDIT,0,R.string.menu_editContact).setIntent(new Intent(Intent.ACTION_EDIT,aggUri));
  menu.add(0,MENU_ITEM_DELETE,0,R.string.menu_deleteContact);
}","@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  if ((mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER) {
    return;
  }
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  long id=info.id;
  Uri contactUri=ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
  long rawContactId=ContactsUtils.queryForRawContactId(getContentResolver(),id);
  Uri rawContactUri=ContentUris.withAppendedId(RawContacts.CONTENT_URI,rawContactId);
  menu.setHeaderTitle(cursor.getString(SUMMARY_NAME_COLUMN_INDEX));
  menu.add(0,MENU_ITEM_VIEW_CONTACT,0,R.string.menu_viewContact).setIntent(new Intent(Intent.ACTION_VIEW,contactUri));
  int starState=cursor.getInt(SUMMARY_STARRED_COLUMN_INDEX);
  if (starState == 0) {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_addStar);
  }
 else {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_removeStar);
  }
  menu.add(0,MENU_ITEM_EDIT,0,R.string.menu_editContact).setIntent(new Intent(Intent.ACTION_EDIT,rawContactUri));
  menu.add(0,MENU_ITEM_DELETE,0,R.string.menu_deleteContact);
}",0.9185667752442996
184125,"/** 
 * Calls the currently selected list item.
 * @return true if the call was initiated, false otherwise
 */
boolean callSelection(){
  ListView list=getListView();
  if (list.hasFocus()) {
    Cursor cursor=(Cursor)list.getSelectedItem();
    if (cursor != null) {
      long dataId=cursor.getLong(ID_COLUMN_INDEX);
      if (dataId == 0) {
        signalError();
        return false;
      }
      Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,dataId);
      Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,uri);
      startActivity(intent);
      return true;
    }
  }
  return false;
}","/** 
 * Calls the currently selected list item.
 * @return true if the call was initiated, false otherwise
 */
boolean callSelection(){
  ListView list=getListView();
  if (list.hasFocus()) {
    Cursor cursor=(Cursor)list.getSelectedItem();
    if (cursor != null) {
      boolean hasPhone=cursor.getInt(SUMMARY_HAS_PHONE_COLUMN_INDEX) != 0;
      if (!hasPhone) {
        signalError();
        return false;
      }
      String phone=ContactsUtils.querySuperPrimaryPhone(getContentResolver(),cursor.getLong(ID_COLUMN_INDEX));
      if (phone == null) {
        signalError();
        return false;
      }
      Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",phone,null));
      startActivity(intent);
      return true;
    }
  }
  return false;
}",0.7281831187410587
184126,"Uri getPickerResultUri(long id){
switch (mMode) {
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return ContentUris.withAppendedId(People.CONTENT_URI,id);
  }
case MODE_PICK_PHONE:
{
  return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_PHONE:
{
return ContentUris.withAppendedId(Phones.CONTENT_URI,id);
}
case MODE_PICK_POSTAL:
{
return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContentUris.withAppendedId(ContactMethods.CONTENT_URI,id);
}
default :
{
return null;
}
}
}","Uri getPickerResultUri(long id){
switch (mMode) {
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_JOIN_CONTACT:
{
      return ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return ContentUris.withAppendedId(People.CONTENT_URI,id);
  }
case MODE_PICK_PHONE:
{
  return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_PHONE:
{
return ContentUris.withAppendedId(Phones.CONTENT_URI,id);
}
case MODE_PICK_POSTAL:
{
return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContentUris.withAppendedId(ContactMethods.CONTENT_URI,id);
}
default :
{
return null;
}
}
}",0.9833333333333332
184127,"Uri getPickerResultUri(long id){
switch (mMode) {
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return ContentUris.withAppendedId(People.CONTENT_URI,id);
  }
case MODE_PICK_PHONE:
{
  return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_PHONE:
{
return ContentUris.withAppendedId(Phones.CONTENT_URI,id);
}
case MODE_PICK_POSTAL:
{
return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContentUris.withAppendedId(ContactMethods.CONTENT_URI,id);
}
default :
{
return null;
}
}
}","Uri getPickerResultUri(long id){
switch (mMode) {
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_JOIN_CONTACT:
{
      return ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return ContentUris.withAppendedId(People.CONTENT_URI,id);
  }
case MODE_PICK_PHONE:
{
  return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_PHONE:
{
return ContentUris.withAppendedId(Phones.CONTENT_URI,id);
}
case MODE_PICK_POSTAL:
{
return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContentUris.withAppendedId(ContactMethods.CONTENT_URI,id);
}
default :
{
return null;
}
}
}",0.9833333333333332
184128,"@Override protected void onStop(){
  super.onStop();
  mAdapter.setLoading(true);
  mAdapter.changeCursor(null);
  if (mMode == MODE_QUERY) {
    SearchManager searchManager=(SearchManager)getSystemService(Context.SEARCH_SERVICE);
    searchManager.stopSearch();
  }
}","@Override protected void onStop(){
  super.onStop();
  mAdapter.setLoading(true);
  mAdapter.changeCursor(null);
  mAdapter.clearImageFetching();
  if (mMode == MODE_QUERY) {
    SearchManager searchManager=(SearchManager)getSystemService(Context.SEARCH_SERVICE);
    searchManager.stopSearch();
  }
}",0.9420035149384886
184129,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  int pos=(Integer)imageView.getTag();
Cursor cursor=(Cursor)getItem(pos);
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
try {
  Bitmap photo=ContactsUtils.loadContactPhoto(mContext,cursor.getInt(SUMMARY_PHOTO_ID_COLUMN_INDEX),null);
  mBitmapCache.put(pos,new SoftReference<Bitmap>(photo));
  if (photo != null) {
    imageView.setImageBitmap(photo);
  }
}
 catch (OutOfMemoryError e) {
}
}
if (imageView.getDrawable() == null) {
imageView.setImageResource(R.drawable.ic_contact_list_picture);
}
mItemsMissingImages.remove(imageView);
break;
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  int pos=(Integer)imageView.getTag();
Cursor cursor=(Cursor)getItem(pos);
if (cursor != null && !cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
try {
  Bitmap photo=ContactsUtils.loadContactPhoto(mContext,cursor.getInt(SUMMARY_PHOTO_ID_COLUMN_INDEX),null);
  mBitmapCache.put(pos,new SoftReference<Bitmap>(photo));
  if (photo != null) {
    imageView.setImageBitmap(photo);
  }
}
 catch (OutOfMemoryError e) {
}
}
if (imageView.getDrawable() == null) {
imageView.setImageResource(R.drawable.ic_contact_list_picture);
}
mItemsMissingImages.remove(imageView);
break;
}
}",0.9883870967741936
184130,"public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState != OnScrollListener.SCROLL_STATE_IDLE) {
    mHandler.clearImageFecthing();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}","public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState != OnScrollListener.SCROLL_STATE_IDLE) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}",0.9750479846449136
184131,"@Override protected void onStop(){
  super.onStop();
  mAdapter.setLoading(true);
  mAdapter.changeCursor(null);
  if (mMode == MODE_QUERY) {
    SearchManager searchManager=(SearchManager)getSystemService(Context.SEARCH_SERVICE);
    searchManager.stopSearch();
  }
}","@Override protected void onStop(){
  super.onStop();
  mAdapter.setLoading(true);
  mAdapter.changeCursor(null);
  mAdapter.clearImageFetching();
  if (mMode == MODE_QUERY) {
    SearchManager searchManager=(SearchManager)getSystemService(Context.SEARCH_SERVICE);
    searchManager.stopSearch();
  }
}",0.9420035149384886
184132,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  int pos=(Integer)imageView.getTag();
Cursor cursor=(Cursor)getItem(pos);
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
try {
  Bitmap photo=ContactsUtils.loadContactPhoto(mContext,cursor.getInt(SUMMARY_PHOTO_ID_COLUMN_INDEX),null);
  mBitmapCache.put(pos,new SoftReference<Bitmap>(photo));
  if (photo != null) {
    imageView.setImageBitmap(photo);
  }
}
 catch (OutOfMemoryError e) {
}
}
if (imageView.getDrawable() == null) {
imageView.setImageResource(R.drawable.ic_contact_list_picture);
}
mItemsMissingImages.remove(imageView);
break;
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  int pos=(Integer)imageView.getTag();
Cursor cursor=(Cursor)getItem(pos);
if (cursor != null && !cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
try {
  Bitmap photo=ContactsUtils.loadContactPhoto(mContext,cursor.getInt(SUMMARY_PHOTO_ID_COLUMN_INDEX),null);
  mBitmapCache.put(pos,new SoftReference<Bitmap>(photo));
  if (photo != null) {
    imageView.setImageBitmap(photo);
  }
}
 catch (OutOfMemoryError e) {
}
}
if (imageView.getDrawable() == null) {
imageView.setImageResource(R.drawable.ic_contact_list_picture);
}
mItemsMissingImages.remove(imageView);
break;
}
}",0.9883870967741936
184133,"public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState != OnScrollListener.SCROLL_STATE_IDLE) {
    mHandler.clearImageFecthing();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}","public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState != OnScrollListener.SCROLL_STATE_IDLE) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}",0.9750479846449136
184134,"private void queryContactInfo(CallerInfoQuery ciq){
  ContactInfo info=mContactInfo.get(ciq.number);
  if (info != null && info != ContactInfo.EMPTY) {
synchronized (mRequests) {
      if (mRequests.isEmpty()) {
        mHandler.sendEmptyMessage(REDRAW);
      }
    }
  }
 else {
    Cursor phonesCursor=RecentCallsListActivity.this.getContentResolver().query(Uri.withAppendedPath(Phones.CONTENT_FILTER_URL,Uri.encode(ciq.number)),PHONES_PROJECTION,null,null,null);
    if (phonesCursor != null) {
      if (phonesCursor.moveToFirst()) {
        info=new ContactInfo();
        info.personId=phonesCursor.getLong(PERSON_ID_COLUMN_INDEX);
        info.name=phonesCursor.getString(NAME_COLUMN_INDEX);
        info.type=phonesCursor.getInt(PHONE_TYPE_COLUMN_INDEX);
        info.label=phonesCursor.getString(LABEL_COLUMN_INDEX);
        info.number=phonesCursor.getString(MATCHED_NUMBER_COLUMN_INDEX);
        info.formattedNumber=null;
        mContactInfo.put(ciq.number,info);
synchronized (mRequests) {
          if (mRequests.isEmpty()) {
            mHandler.sendEmptyMessage(REDRAW);
          }
        }
      }
      phonesCursor.close();
    }
  }
  if (info != null && info != ContactInfo.EMPTY) {
    updateCallLog(ciq,info);
  }
}","private void queryContactInfo(CallerInfoQuery ciq){
  ContactInfo info=mContactInfo.get(ciq.number);
  if (info != null && info != ContactInfo.EMPTY) {
synchronized (mRequests) {
      if (mRequests.isEmpty()) {
        mHandler.sendEmptyMessage(REDRAW);
      }
    }
  }
 else {
    Cursor phonesCursor=RecentCallsListActivity.this.getContentResolver().query(Uri.withAppendedPath(Phones.CONTENT_FILTER_URL,Uri.encode(ciq.number)),PHONES_PROJECTION,null,null,null);
    if (phonesCursor != null) {
      if (phonesCursor.moveToFirst()) {
        info=new ContactInfo();
        info.personId=phonesCursor.getLong(PERSON_ID_COLUMN_INDEX);
        info.name=phonesCursor.getString(NAME_COLUMN_INDEX);
        info.type=phonesCursor.getInt(PHONE_TYPE_COLUMN_INDEX);
        info.label=phonesCursor.getString(LABEL_COLUMN_INDEX);
        info.number=phonesCursor.getString(MATCHED_NUMBER_COLUMN_INDEX);
        info.formattedNumber=null;
        mContactInfo.put(ciq.number,info);
synchronized (mRequests) {
          if (mRequests.isEmpty()) {
            mHandler.sendEmptyMessage(REDRAW);
          }
        }
      }
      phonesCursor.close();
    }
  }
  if (info != null) {
    updateCallLog(ciq,info);
  }
}",0.9881873727087576
184135,"private void queryContactInfo(CallerInfoQuery ciq){
  ContactInfo info=mContactInfo.get(ciq.number);
  if (info != null && info != ContactInfo.EMPTY) {
synchronized (mRequests) {
      if (mRequests.isEmpty()) {
        mHandler.sendEmptyMessage(REDRAW);
      }
    }
  }
 else {
    Cursor phonesCursor=RecentCallsListActivity.this.getContentResolver().query(Uri.withAppendedPath(Phones.CONTENT_FILTER_URL,Uri.encode(ciq.number)),PHONES_PROJECTION,null,null,null);
    if (phonesCursor != null) {
      if (phonesCursor.moveToFirst()) {
        info=new ContactInfo();
        info.personId=phonesCursor.getLong(PERSON_ID_COLUMN_INDEX);
        info.name=phonesCursor.getString(NAME_COLUMN_INDEX);
        info.type=phonesCursor.getInt(PHONE_TYPE_COLUMN_INDEX);
        info.label=phonesCursor.getString(LABEL_COLUMN_INDEX);
        info.number=phonesCursor.getString(MATCHED_NUMBER_COLUMN_INDEX);
        info.formattedNumber=null;
        mContactInfo.put(ciq.number,info);
synchronized (mRequests) {
          if (mRequests.isEmpty()) {
            mHandler.sendEmptyMessage(REDRAW);
          }
        }
      }
      phonesCursor.close();
    }
  }
  if (info != null && info != ContactInfo.EMPTY) {
    updateCallLog(ciq,info);
  }
}","private void queryContactInfo(CallerInfoQuery ciq){
  ContactInfo info=mContactInfo.get(ciq.number);
  if (info != null && info != ContactInfo.EMPTY) {
synchronized (mRequests) {
      if (mRequests.isEmpty()) {
        mHandler.sendEmptyMessage(REDRAW);
      }
    }
  }
 else {
    Cursor phonesCursor=RecentCallsListActivity.this.getContentResolver().query(Uri.withAppendedPath(Phones.CONTENT_FILTER_URL,Uri.encode(ciq.number)),PHONES_PROJECTION,null,null,null);
    if (phonesCursor != null) {
      if (phonesCursor.moveToFirst()) {
        info=new ContactInfo();
        info.personId=phonesCursor.getLong(PERSON_ID_COLUMN_INDEX);
        info.name=phonesCursor.getString(NAME_COLUMN_INDEX);
        info.type=phonesCursor.getInt(PHONE_TYPE_COLUMN_INDEX);
        info.label=phonesCursor.getString(LABEL_COLUMN_INDEX);
        info.number=phonesCursor.getString(MATCHED_NUMBER_COLUMN_INDEX);
        info.formattedNumber=null;
        mContactInfo.put(ciq.number,info);
synchronized (mRequests) {
          if (mRequests.isEmpty()) {
            mHandler.sendEmptyMessage(REDRAW);
          }
        }
      }
      phonesCursor.close();
    }
  }
  if (info != null) {
    updateCallLog(ciq,info);
  }
}",0.9881873727087576
184136,"/** 
 * Overridden by subclasses to control the resource used by the content view. 
 */
protected int getContentViewResource(){
  return R.layout.twelve_key_dialer;
}","/** 
 * Overridden by subclasses to control the resource used by the content view.
 */
protected int getContentViewResource(){
  return R.layout.twelve_key_dialer;
}",0.9969788519637462
184137,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(getContentViewResource());
  Resources r=getResources();
  mDigitsBackground=r.getDrawable(R.drawable.btn_dial_textfield_active);
  mDigitsEmptyBackground=r.getDrawable(R.drawable.btn_dial_textfield);
  mDeleteBackground=r.getDrawable(R.drawable.btn_dial_delete_active);
  mDeleteEmptyBackground=r.getDrawable(R.drawable.btn_dial_delete);
  mDigits=(EditText)findViewById(R.id.digits);
  mDigits.setKeyListener(DialerKeyListener.getInstance());
  mDigits.setOnClickListener(this);
  mDigits.setOnKeyListener(this);
  maybeAddNumberFormatting();
  View view=findViewById(R.id.one);
  if (view != null) {
    setupKeypad();
  }
  view=findViewById(R.id.backspace);
  view.setOnClickListener(this);
  view.setOnLongClickListener(this);
  mDelete=view;
  mDigitsAndBackspace=(View)findViewById(R.id.digitsAndBackspace);
  mDialpad=(View)findViewById(R.id.dialpad);
  mDialpadChooser=(ListView)findViewById(R.id.dialpadChooser);
  mDialpadChooser.setOnItemClickListener(this);
  if (!resolveIntent() && icicle != null) {
    super.onRestoreInstanceState(icicle);
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  mVibrateOn=r.getBoolean(R.bool.config_enable_dialer_key_vibration);
  mVibrateDuration=(long)r.getInteger(R.integer.config_dialer_key_vibrate_duration);
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(getContentViewResource());
  Resources r=getResources();
  mDigitsBackground=r.getDrawable(R.drawable.btn_dial_textfield_active);
  mDigitsEmptyBackground=r.getDrawable(R.drawable.btn_dial_textfield);
  mDeleteBackground=r.getDrawable(R.drawable.btn_dial_delete_active);
  mDeleteEmptyBackground=r.getDrawable(R.drawable.btn_dial_delete);
  mDigits=(EditText)findViewById(R.id.digits);
  mDigits.setKeyListener(DialerKeyListener.getInstance());
  mDigits.setOnClickListener(this);
  mDigits.setOnKeyListener(this);
  maybeAddNumberFormatting();
  View view=findViewById(R.id.one);
  if (view != null) {
    setupKeypad();
  }
  view=findViewById(R.id.backspace);
  view.setOnClickListener(this);
  view.setOnLongClickListener(this);
  mDelete=view;
  mDigitsAndBackspace=(View)findViewById(R.id.digitsAndBackspace);
  mDialpad=(View)findViewById(R.id.dialpad);
  mDialpadChooser=(ListView)findViewById(R.id.dialpadChooser);
  mDialpadChooser.setOnItemClickListener(this);
  if (!resolveIntent() && icicle != null) {
    super.onRestoreInstanceState(icicle);
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_DTMF,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  mVibrateOn=r.getBoolean(R.bool.config_enable_dialer_key_vibration);
  mVibrateDuration=(long)r.getInteger(R.integer.config_dialer_key_vibrate_duration);
}",0.9956736711990112
184138,"@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
}","@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_DTMF,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
}",0.9931573802541545
184139,"@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  if ((mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER) {
    return;
  }
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  long id=info.id;
  Uri dataUri=Uri.withAppendedPath(Aggregates.CONTENT_URI,id + ""String_Node_Str"");
  menu.setHeaderTitle(cursor.getString(NAME_COLUMN_INDEX));
  menu.add(0,MENU_ITEM_VIEW_CONTACT,0,R.string.menu_viewContact).setIntent(new Intent(Intent.ACTION_VIEW,dataUri));
  long phoneId=cursor.getLong(PRIMARY_PHONE_ID_COLUMN_INDEX);
  if (phoneId > 0) {
    CharSequence label=cursor.getString(PRIMARY_PHONE_LABEL_COLUMN_INDEX);
    int type=cursor.getInt(PRIMARY_PHONE_TYPE_COLUMN_INDEX);
    label=ContactsUtils.getDisplayLabel(this,CommonDataKinds.Phone.CONTENT_ITEM_TYPE,type,label);
    Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,ContentUris.withAppendedId(Data.CONTENT_URI,id));
    menu.add(0,MENU_ITEM_CALL,0,String.format(getString(R.string.menu_callNumber),label)).setIntent(intent);
    menu.add(0,MENU_ITEM_SEND_SMS,0,R.string.menu_sendSMS).setIntent(new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",cursor.getString(PRIMARY_PHONE_NUMBER_COLUMN_INDEX),null)));
  }
  int starState=cursor.getInt(STARRED_COLUMN_INDEX);
  if (starState == 0) {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_addStar);
  }
 else {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_removeStar);
  }
}","@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  if ((mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER) {
    return;
  }
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  long id=info.id;
  Uri dataUri=ContentUris.withAppendedId(Aggregates.CONTENT_URI,id);
  menu.setHeaderTitle(cursor.getString(NAME_COLUMN_INDEX));
  menu.add(0,MENU_ITEM_VIEW_CONTACT,0,R.string.menu_viewContact).setIntent(new Intent(Intent.ACTION_VIEW,dataUri));
  long phoneId=cursor.getLong(PRIMARY_PHONE_ID_COLUMN_INDEX);
  if (phoneId > 0) {
    CharSequence label=cursor.getString(PRIMARY_PHONE_LABEL_COLUMN_INDEX);
    int type=cursor.getInt(PRIMARY_PHONE_TYPE_COLUMN_INDEX);
    label=ContactsUtils.getDisplayLabel(this,CommonDataKinds.Phone.CONTENT_ITEM_TYPE,type,label);
    Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,ContentUris.withAppendedId(Data.CONTENT_URI,id));
    menu.add(0,MENU_ITEM_CALL,0,String.format(getString(R.string.menu_callNumber),label)).setIntent(intent);
    menu.add(0,MENU_ITEM_SEND_SMS,0,R.string.menu_sendSMS).setIntent(new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",cursor.getString(PRIMARY_PHONE_NUMBER_COLUMN_INDEX),null)));
  }
  int starState=cursor.getInt(STARRED_COLUMN_INDEX);
  if (starState == 0) {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_addStar);
  }
 else {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_removeStar);
  }
}",0.972877358490566
184140,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(R.layout.view_contact);
  getListView().setOnCreateContextMenuListener(this);
  mNameView=(TextView)findViewById(R.id.name);
  mPhoneticNameView=(TextView)findViewById(R.id.phonetic_name);
  mPhotoView=(ImageView)findViewById(R.id.photo);
  mStarView=(CheckBox)findViewById(R.id.star);
  mStarView.setOnClickListener(this);
  long now=SystemClock.elapsedRealtime();
  int num=(int)now & 0xf;
  if (num < 9) {
    mNoPhotoResource=R.drawable.ic_contact_picture;
  }
 else   if (num < 14) {
    mNoPhotoResource=R.drawable.ic_contact_picture_2;
  }
 else {
    mNoPhotoResource=R.drawable.ic_contact_picture_3;
  }
  mUri=getIntent().getData();
  mResolver=getContentResolver();
  mSections.add(mPhoneEntries);
  mSections.add(mSmsEntries);
  mSections.add(mEmailEntries);
  mSections.add(mImEntries);
  mSections.add(mPostalEntries);
  mSections.add(mOrganizationEntries);
  mSections.add(mGroupEntries);
  mSections.add(mOtherEntries);
  mShowSmsLinksForAllPhones=true;
  mCursor=mResolver.query(mUri,AGGREGATE_PROJECTION,null,null,null);
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(R.layout.view_contact);
  getListView().setOnCreateContextMenuListener(this);
  mNameView=(TextView)findViewById(R.id.name);
  mPhoneticNameView=(TextView)findViewById(R.id.phonetic_name);
  mPhotoView=(ImageView)findViewById(R.id.photo);
  mStarView=(CheckBox)findViewById(R.id.star);
  mStarView.setOnClickListener(this);
  long now=SystemClock.elapsedRealtime();
  int num=(int)now & 0xf;
  if (num < 9) {
    mNoPhotoResource=R.drawable.ic_contact_picture;
  }
 else   if (num < 14) {
    mNoPhotoResource=R.drawable.ic_contact_picture_2;
  }
 else {
    mNoPhotoResource=R.drawable.ic_contact_picture_3;
  }
  mUri=Uri.withAppendedPath(getIntent().getData(),""String_Node_Str"");
  mResolver=getContentResolver();
  mSections.add(mPhoneEntries);
  mSections.add(mSmsEntries);
  mSections.add(mEmailEntries);
  mSections.add(mImEntries);
  mSections.add(mPostalEntries);
  mSections.add(mOrganizationEntries);
  mSections.add(mGroupEntries);
  mSections.add(mOtherEntries);
  mShowSmsLinksForAllPhones=true;
  mCursor=mResolver.query(mUri,AGGREGATE_PROJECTION,null,null,null);
}",0.9826539462272332
184141,"@Override protected void onRestart(){
  super.onRestart();
  if (TextUtils.isEmpty(getListView().getTextFilter())) {
    startQuery();
  }
 else {
    ((ContactItemListAdapter)getListView().getAdapter()).onContentChanged();
  }
}","@Override protected void onRestart(){
  super.onRestart();
  if (TextUtils.isEmpty(getListView().getTextFilter())) {
    startQuery();
  }
 else {
    ((ContactItemListAdapter)getListAdapter()).onContentChanged();
  }
}",0.9776785714285714
184142,"public boolean onChildClick(ExpandableListView parent,View v,int groupPosition,int childPosition,long id){
  EditEntry entry=null;
  dismissDialog(LABEL_PICKER_ALL_TYPES_DIALOG);
switch (groupPosition) {
case LABEL_PICKER_PHONES_POSITION:
{
      String[] labels=getLabelsForKind(this,Contacts.KIND_PHONE);
      final int type=getTypeFromLabelPosition(labels,childPosition);
      entry=EditEntry.newPhoneEntry(EditContactActivity.this,labels[childPosition],type,null,Uri.withAppendedPath(mUri,People.Phones.CONTENT_DIRECTORY),0);
      if (type == Phones.TYPE_CUSTOM) {
        createCustomPicker(entry,mPhoneEntries);
        return true;
      }
 else {
        mPhoneEntries.add(entry);
      }
      break;
    }
case LABEL_PICKER_EMAIL_POSITION:
{
    String[] labels=getLabelsForKind(this,Contacts.KIND_EMAIL);
    final int type=getTypeFromLabelPosition(labels,childPosition);
    entry=EditEntry.newEmailEntry(EditContactActivity.this,labels[childPosition],type,null,Uri.withAppendedPath(mUri,People.ContactMethods.CONTENT_DIRECTORY),0);
    if (type == ContactMethods.TYPE_CUSTOM) {
      createCustomPicker(entry,mEmailEntries);
      return true;
    }
 else {
      mEmailEntries.add(entry);
    }
    break;
  }
case LABEL_PICKER_IM_POSITION:
{
  String[] labels=getLabelsForKind(this,Contacts.KIND_IM);
  entry=EditEntry.newImEntry(EditContactActivity.this,labels[childPosition],childPosition,null,Uri.withAppendedPath(mUri,People.ContactMethods.CONTENT_DIRECTORY),0);
  mImEntries.add(entry);
  break;
}
case LABEL_PICKER_POSTAL_POSITION:
{
String[] labels=getLabelsForKind(this,Contacts.KIND_POSTAL);
final int type=getTypeFromLabelPosition(labels,childPosition);
entry=EditEntry.newPostalEntry(EditContactActivity.this,labels[childPosition],type,null,Uri.withAppendedPath(mUri,People.ContactMethods.CONTENT_DIRECTORY),0);
if (type == ContactMethods.TYPE_CUSTOM) {
  createCustomPicker(entry,mPostalEntries);
  return true;
}
 else {
  mPostalEntries.add(entry);
}
break;
}
case LABEL_PICKER_OTHER_POSITION:
{
switch (childPosition) {
case OTHER_ORGANIZATION:
entry=EditEntry.newOrganizationEntry(EditContactActivity.this,Uri.withAppendedPath(mUri,Organizations.CONTENT_DIRECTORY),ContactMethods.TYPE_WORK);
mOtherEntries.add(entry);
break;
case OTHER_NOTE:
entry=EditEntry.newNotesEntry(EditContactActivity.this,null,mUri);
mOtherEntries.add(entry);
break;
default :
entry=null;
}
break;
}
default :
entry=null;
}
if (entry != null) {
buildViews();
View dataView=entry.view.findViewById(R.id.data);
if (dataView == null) {
entry.view.requestFocus();
}
 else {
dataView.requestFocus();
}
}
return true;
}","public boolean onChildClick(ExpandableListView parent,View v,int groupPosition,int childPosition,long id){
  EditEntry entry=null;
  dismissDialog(LABEL_PICKER_ALL_TYPES_DIALOG);
switch (groupPosition) {
case LABEL_PICKER_PHONES_POSITION:
{
      String[] labels=getLabelsForKind(this,Contacts.KIND_PHONE);
      final int type=getTypeFromLabelPosition(labels,childPosition);
      entry=EditEntry.newPhoneEntry(EditContactActivity.this,labels[childPosition],type,null,Uri.withAppendedPath(mUri,People.Phones.CONTENT_DIRECTORY),0);
      if (type == Phones.TYPE_CUSTOM) {
        createCustomPicker(entry,mPhoneEntries);
        return true;
      }
 else {
        mPhoneEntries.add(entry);
      }
      break;
    }
case LABEL_PICKER_EMAIL_POSITION:
{
    String[] labels=getLabelsForKind(this,Contacts.KIND_EMAIL);
    final int type=getTypeFromLabelPosition(labels,childPosition);
    entry=EditEntry.newEmailEntry(EditContactActivity.this,labels[childPosition],type,null,Uri.withAppendedPath(mUri,People.ContactMethods.CONTENT_DIRECTORY),0);
    if (type == ContactMethods.TYPE_CUSTOM) {
      createCustomPicker(entry,mEmailEntries);
      return true;
    }
 else {
      mEmailEntries.add(entry);
    }
    break;
  }
case LABEL_PICKER_IM_POSITION:
{
  String[] labels=getLabelsForKind(this,Contacts.KIND_IM);
  entry=EditEntry.newImEntry(EditContactActivity.this,labels[childPosition],childPosition,null,Uri.withAppendedPath(mUri,People.ContactMethods.CONTENT_DIRECTORY),0);
  mImEntries.add(entry);
  break;
}
case LABEL_PICKER_POSTAL_POSITION:
{
String[] labels=getLabelsForKind(this,Contacts.KIND_POSTAL);
final int type=getTypeFromLabelPosition(labels,childPosition);
entry=EditEntry.newPostalEntry(EditContactActivity.this,labels[childPosition],type,null,Uri.withAppendedPath(mUri,People.ContactMethods.CONTENT_DIRECTORY),0);
if (type == ContactMethods.TYPE_CUSTOM) {
  createCustomPicker(entry,mPostalEntries);
  return true;
}
 else {
  mPostalEntries.add(entry);
}
break;
}
case LABEL_PICKER_OTHER_POSITION:
{
switch (childPosition) {
case OTHER_ORGANIZATION:
entry=EditEntry.newOrganizationEntry(EditContactActivity.this,Uri.withAppendedPath(mUri,Organizations.CONTENT_DIRECTORY),Organizations.TYPE_WORK);
mOtherEntries.add(entry);
break;
case OTHER_NOTE:
entry=EditEntry.newNotesEntry(EditContactActivity.this,null,mUri);
mOtherEntries.add(entry);
break;
default :
entry=null;
}
break;
}
default :
entry=null;
}
if (entry != null) {
buildViews();
View dataView=entry.view.findViewById(R.id.data);
if (dataView == null) {
entry.view.requestFocus();
}
 else {
dataView.requestFocus();
}
}
return true;
}",0.9952317375548352
184143,"private void calculateData(){
  long set=0;
  long group=0;
  if (groupSize.getText().toString().equals(""String_Node_Str"")) {
    set=Long.parseLong(setSize.getText().toString());
    group=Long.parseLong(setSize.getText().toString());
  }
 else {
    set=Long.parseLong(setSize.getText().toString());
    group=Long.parseLong(groupSize.getText().toString());
  }
  if (group > set) {
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  permVal.setText(String.valueOf(PermComb.calcPermutations(set,group)));
  permWithRep.setText(String.valueOf(PermComb.calcPermutationsWithRep(set,group)));
  combVal.setText(String.valueOf(PermComb.calcCombinations(set,group)));
  combWithRep.setText(String.valueOf(PermComb.calcCombinationsWithRep(set,group)));
  numSubset.setText(String.valueOf(PermComb.calcNumSubset(set)));
  pigeonhole.setText(String.valueOf(PermComb.calcPigeonhole(set,group)));
}","private void calculateData(){
  long set=0;
  long group=0;
  if (setSize.getText().toString().equals(""String_Node_Str"")) {
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  if (groupSize.getText().toString().equals(""String_Node_Str"")) {
    set=Long.parseLong(setSize.getText().toString());
    group=Long.parseLong(setSize.getText().toString());
  }
 else {
    set=Long.parseLong(setSize.getText().toString());
    group=Long.parseLong(groupSize.getText().toString());
  }
  if (group > set) {
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  permVal.setText(String.valueOf(PermComb.calcPermutations(set,group)));
  permWithRep.setText(String.valueOf(PermComb.calcPermutationsWithRep(set,group)));
  combVal.setText(String.valueOf(PermComb.calcCombinations(set,group)));
  combWithRep.setText(String.valueOf(PermComb.calcCombinationsWithRep(set,group)));
  numSubset.setText(String.valueOf(PermComb.calcNumSubset(set)));
  pigeonhole.setText(String.valueOf(PermComb.calcPigeonhole(set,group)));
}",0.661486158329286
184144,"public double getR(){
  return Math.sqrt(this.getRSquared());
}","public double getR(){
  double meanX=x.getMean();
  double meanY=y.getMean();
  double sum=0;
  int sampleSize=y.getSampleSize();
  for (int i=0; i < sampleSize; i++) {
    sum+=(x.getValue(i) - meanX) * (y.getValue(i) - meanY);
  }
  return sum / ((sampleSize) * y.getStandardDeviation() * x.getStandardDeviation());
}",0.1361256544502617
184145,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.linear_regression);
  multiSeriesDataset=new XYMultipleSeriesDataset();
  multiSeriesRenderer=new XYMultipleSeriesRenderer();
  XYSeriesRenderer seriesRenderer=new XYSeriesRenderer();
  XYSeriesRenderer lobfRenderer=new XYSeriesRenderer();
  dataSeries=new XYSeries(""String_Node_Str"");
  lobfSeries=new XYSeries(""String_Node_Str"");
  lobfRenderer.setLineWidth(2);
  lobfRenderer.setColor(Color.GREEN);
  lobfRenderer.setPointStyle(PointStyle.CIRCLE);
  seriesRenderer.setLineWidth(0);
  seriesRenderer.setColor(Color.BLUE);
  seriesRenderer.setPointStyle(PointStyle.CIRCLE);
  seriesRenderer.setFillPoints(true);
  multiSeriesRenderer.setAxesColor(Color.BLACK);
  multiSeriesRenderer.setYLabelsAlign(Align.RIGHT);
  multiSeriesRenderer.setShowLegend(true);
  multiSeriesRenderer.setLabelsTextSize(16);
  multiSeriesRenderer.setShowAxes(true);
  multiSeriesRenderer.setXLabels(4);
  multiSeriesRenderer.setYLabels(4);
  multiSeriesRenderer.setShowGrid(true);
  multiSeriesRenderer.setBackgroundColor(Color.WHITE);
  multiSeriesRenderer.setApplyBackgroundColor(true);
  multiSeriesRenderer.setMarginsColor(Color.WHITE);
  multiSeriesRenderer.addSeriesRenderer(seriesRenderer);
  multiSeriesRenderer.addSeriesRenderer(lobfRenderer);
  multiSeriesDataset.addSeries(dataSeries);
  multiSeriesDataset.addSeries(lobfSeries);
  chart=ChartFactory.getLineChartView(this,multiSeriesDataset,multiSeriesRenderer);
  ((FrameLayout)findViewById(R.id.regression_graph)).addView(chart);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.linear_regression);
  multiSeriesDataset=new XYMultipleSeriesDataset();
  multiSeriesRenderer=new XYMultipleSeriesRenderer();
  XYSeriesRenderer seriesRenderer=new XYSeriesRenderer();
  XYSeriesRenderer lobfRenderer=new XYSeriesRenderer();
  dataSeries=new XYSeries(""String_Node_Str"");
  lobfSeries=new XYSeries(""String_Node_Str"");
  lobfRenderer.setLineWidth(2);
  lobfRenderer.setColor(Color.GREEN);
  lobfRenderer.setPointStyle(PointStyle.CIRCLE);
  seriesRenderer.setLineWidth(0);
  seriesRenderer.setColor(Color.BLUE);
  seriesRenderer.setPointStyle(PointStyle.CIRCLE);
  seriesRenderer.setFillPoints(true);
  multiSeriesRenderer.setAxesColor(Color.BLACK);
  multiSeriesRenderer.setYLabelsAlign(Align.RIGHT);
  multiSeriesRenderer.setShowLegend(true);
  multiSeriesRenderer.setLabelsTextSize(16);
  multiSeriesRenderer.setShowAxes(true);
  multiSeriesRenderer.setXLabels(4);
  multiSeriesRenderer.setYLabels(4);
  multiSeriesRenderer.setShowGrid(true);
  multiSeriesRenderer.setBackgroundColor(Color.WHITE);
  multiSeriesRenderer.setApplyBackgroundColor(true);
  multiSeriesRenderer.setMarginsColor(Color.WHITE);
  multiSeriesRenderer.addSeriesRenderer(seriesRenderer);
  multiSeriesRenderer.addSeriesRenderer(lobfRenderer);
  multiSeriesDataset.addSeries(dataSeries);
  multiSeriesDataset.addSeries(lobfSeries);
  chart=ChartFactory.getLineChartView(this,multiSeriesDataset,multiSeriesRenderer);
  ((FrameLayout)findViewById(R.id.regression_graph)).setBackgroundColor(-1);
}",0.990332326283988
184146,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode != RESULT_OK)   return;
  if (data.hasExtra(""String_Node_Str""))   dataValues=data.getStringExtra(""String_Node_Str"");
  analyzeData();
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  ((FrameLayout)findViewById(R.id.regression_graph)).addView(chart);
  if (resultCode != RESULT_OK)   return;
  if (data.hasExtra(""String_Node_Str""))   dataValues=data.getStringExtra(""String_Node_Str"");
  analyzeData();
}",0.8940092165898618
184147,"public double getMean(){
  double mean=0;
  for (int i=0; i < sample.size(); i++) {
    mean+=sample.get(i);
  }
  return mean;
}","public double getMean(){
  double mean=0;
  mean=this.getSum();
  mean/=sample.size();
  return mean;
}",0.6724137931034483
184148,"private void sortArray(){
  for (int i=0; i < sample.size() - 1; i++) {
    for (int j=1; j < sample.size(); j++) {
      if (sample.get(j) < sample.get(i)) {
        Double temp=sample.get(j);
        sample.set(j,sample.get(i));
        sample.set(i,temp);
        temp=null;
      }
    }
  }
}","private void sortArray(){
  for (int i=0; i < sample.size() - 1; i++) {
    for (int j=i + 1; j < sample.size(); j++) {
      if (sample.get(j) < sample.get(i)) {
        Double temp=sample.get(j);
        sample.set(j,sample.get(i));
        sample.set(i,temp);
        temp=null;
      }
    }
  }
}",0.9933110367892976
184149,"/** 
 * Allows someone to consume pixels from this polygon. There are some edge cases where the requested number of points my not have actually been consumed if the expansion outward from the selected start point encounter problems. I'm trying to remove this annoyance, but for now that means that this method should be called in a loop, checking if the desired area was received.
 * @param amountOfArea the number of pixels desired. If this is greater than the size of this polygon, all polygon pixels are returned and this poly will deregister itself from the area
 * @param startPoint The point at which the merge will start. If the caller is positive that they will consume this entire polygon, then this can be null
 * @return all of the points that can be consumed, up toMath.min(amountOfArea,size). The caller should check the size to see if it got what it requested
 */
public Collection<Point> consumeArea(int amountOfArea,Point startPoint){
  log.entering(className,""String_Node_Str"",new Object[]{amountOfArea,startPoint});
  if (amountOfArea >= getArea()) {
    mRegionManager.removeRegion(this);
    log.exiting(className,""String_Node_Str"",""String_Node_Str"");
    return mPoints;
  }
  List<Point> consumablePoints=new ArrayList<Point>(amountOfArea + 8);
  Set<Point> consumablePointsCopy=new HashSet<Point>(amountOfArea + 8);
  if (isConsumable(startPoint.x,startPoint.y,null)) {
    log.finest(""String_Node_Str"");
    consumablePoints.add(startPoint);
  }
 else {
    log.info(""String_Node_Str"");
    log.exiting(className,""String_Node_Str"");
    return consumablePoints;
  }
  BufferedImage image=mRegionManager.getDebugImage(this);
  Graphics g=image.getGraphics();
  Point lastCur=null;
  int imageID=0;
  boolean debug=true;
  int i=0;
  int lastIterationListSize=0;
  Point cur=null;
  while (consumablePoints.size() < amountOfArea) {
    try {
      cur=consumablePoints.get(i);
    }
 catch (    IndexOutOfBoundsException ide) {
      if (lastIterationListSize == consumablePoints.size()) {
        mPoints.removeAll(consumablePoints);
        assert(isContigious());
        return consumablePoints;
      }
      log.finest(""String_Node_Str"");
      i=0;
      cur=consumablePoints.get(i);
      lastIterationListSize=consumablePoints.size();
    }
    if (cur == lastCur) {
    }
 else {
      StringBuilder name=new StringBuilder(""String_Node_Str"");
      if (imageID < 10)       name.append(""String_Node_Str"").append(imageID).append(""String_Node_Str"");
 else       if (imageID > 9 && imageID < 100)       name.append(""String_Node_Str"").append(imageID).append(""String_Node_Str"");
 else       if (imageID > 99 && imageID < 1000)       name.append(""String_Node_Str"").append(imageID).append(""String_Node_Str"");
 else       name.append(imageID).append(""String_Node_Str"");
      try {
        File f=new File(name.toString());
        ImageIO.write(image,""String_Node_Str"",f);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      image=mRegionManager.getDebugImage(this);
      g=image.getGraphics();
      g.setColor(Color.GREEN);
      for (      Point p : consumablePoints)       g.drawLine(p.x,p.y,p.x,p.y);
      g.setColor(Color.RED);
      g.drawLine(cur.x,cur.y,cur.x,cur.y);
      lastCur=cur;
      imageID++;
    }
    g.setColor(Color.YELLOW);
    log.finest(""String_Node_Str"" + cur + ""String_Node_Str"");
    if (isConsumable(cur.x,cur.y - 1,consumablePointsCopy)) {
      consumablePoints.add(new Point(cur.x,cur.y - 1));
      consumablePointsCopy.add(consumablePoints.get(consumablePoints.size() - 1));
      if (debug)       g.drawLine(cur.x,cur.y - 1,cur.x,cur.y - 1);
      i=0;
      continue;
    }
    if (isConsumable(cur.x + 1,cur.y,consumablePointsCopy)) {
      consumablePoints.add(new Point(cur.x + 1,cur.y));
      consumablePointsCopy.add(consumablePoints.get(consumablePoints.size() - 1));
      if (debug)       g.drawLine(cur.x + 1,cur.y,cur.x + 1,cur.y);
      i=0;
      continue;
    }
    if (isConsumable(cur.x,cur.y + 1,consumablePointsCopy)) {
      consumablePoints.add(new Point(cur.x,cur.y + 1));
      consumablePointsCopy.add(consumablePoints.get(consumablePoints.size() - 1));
      if (debug)       g.drawLine(cur.x,cur.y + 1,cur.x,cur.y + 1);
      i=0;
      continue;
    }
    if (isConsumable(cur.x - 1,cur.y,consumablePointsCopy)) {
      consumablePoints.add(new Point(cur.x - 1,cur.y));
      consumablePointsCopy.add(consumablePoints.get(consumablePoints.size() - 1));
      if (debug)       g.drawLine(cur.x - 1,cur.y,cur.x - 1,cur.y);
      i=0;
      continue;
    }
    ++i;
  }
  while (consumablePoints.size() != amountOfArea)   consumablePoints.remove(amountOfArea);
  mPoints.removeAll(consumablePoints);
  log.exiting(className,""String_Node_Str"");
  return consumablePoints;
}","/** 
 * Allows someone to consume pixels from this polygon. There are some edge cases where the requested number of points my not have actually been consumed if the expansion outward from the selected start point encounter problems. I'm trying to remove this annoyance, but for now that means that this method should be called in a loop, checking if the desired area was received.
 * @param amountOfArea the number of pixels desired. If this is greater than the size of this polygon, all polygon pixels are returned and this poly will deregister itself from the area
 * @param startPoint The point at which the merge will start. If the caller is positive that they will consume this entire polygon, then this can be null
 * @return all of the points that can be consumed, up toMath.min(amountOfArea,size). The caller should check the size to see if it got what it requested
 */
public Collection<Point> consumeArea(int amountOfArea,Point startPoint){
  log.entering(className,""String_Node_Str"",new Object[]{amountOfArea,startPoint});
  if (amountOfArea >= getArea()) {
    mRegionManager.removeRegion(this);
    log.exiting(className,""String_Node_Str"",""String_Node_Str"");
    return mPoints;
  }
  List<Point> consumablePoints=new ArrayList<Point>(amountOfArea + 8);
  Set<Point> consumablePointsCopy=new HashSet<Point>(amountOfArea + 8);
  if (isConsumable(startPoint.x,startPoint.y,null)) {
    log.finest(""String_Node_Str"");
    consumablePoints.add(startPoint);
    consumablePointsCopy.add(startPoint);
  }
 else {
    log.info(""String_Node_Str"");
    log.exiting(className,""String_Node_Str"");
    return consumablePoints;
  }
  BufferedImage image=mRegionManager.getDebugImage(this);
  Graphics g=image.getGraphics();
  Point lastCur=null;
  int imageID=0;
  boolean debug=false;
  int i=0;
  int lastIterationListSize=0;
  Point cur=null;
  while (consumablePoints.size() < amountOfArea) {
    try {
      cur=consumablePoints.get(i);
    }
 catch (    IndexOutOfBoundsException ide) {
      if (lastIterationListSize == consumablePoints.size()) {
        mPoints.removeAll(consumablePoints);
        assert(isContigious());
        return consumablePoints;
      }
      log.finest(""String_Node_Str"");
      i=0;
      cur=consumablePoints.get(i);
      lastIterationListSize=consumablePoints.size();
    }
    if (cur == lastCur) {
    }
 else {
      StringBuilder name=new StringBuilder(""String_Node_Str"");
      if (imageID < 10)       name.append(""String_Node_Str"").append(imageID).append(""String_Node_Str"");
 else       if (imageID > 9 && imageID < 100)       name.append(""String_Node_Str"").append(imageID).append(""String_Node_Str"");
 else       if (imageID > 99 && imageID < 1000)       name.append(""String_Node_Str"").append(imageID).append(""String_Node_Str"");
 else       name.append(imageID).append(""String_Node_Str"");
      try {
        File f=new File(name.toString());
        ImageIO.write(image,""String_Node_Str"",f);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      image=mRegionManager.getDebugImage(this);
      g=image.getGraphics();
      g.setColor(Color.GREEN);
      for (      Point p : consumablePoints)       g.drawLine(p.x,p.y,p.x,p.y);
      g.setColor(Color.RED);
      g.drawLine(cur.x,cur.y,cur.x,cur.y);
      lastCur=cur;
      imageID++;
    }
    g.setColor(Color.YELLOW);
    log.finest(""String_Node_Str"" + cur + ""String_Node_Str"");
    if (isConsumable(cur.x,cur.y - 1,consumablePointsCopy)) {
      consumablePoints.add(new Point(cur.x,cur.y - 1));
      consumablePointsCopy.add(consumablePoints.get(consumablePoints.size() - 1));
      if (debug)       g.drawLine(cur.x,cur.y - 1,cur.x,cur.y - 1);
      i=0;
      continue;
    }
    if (isConsumable(cur.x + 1,cur.y,consumablePointsCopy)) {
      consumablePoints.add(new Point(cur.x + 1,cur.y));
      consumablePointsCopy.add(consumablePoints.get(consumablePoints.size() - 1));
      if (debug)       g.drawLine(cur.x + 1,cur.y,cur.x + 1,cur.y);
      i=0;
      continue;
    }
    if (isConsumable(cur.x,cur.y + 1,consumablePointsCopy)) {
      consumablePoints.add(new Point(cur.x,cur.y + 1));
      consumablePointsCopy.add(consumablePoints.get(consumablePoints.size() - 1));
      if (debug)       g.drawLine(cur.x,cur.y + 1,cur.x,cur.y + 1);
      i=0;
      continue;
    }
    if (isConsumable(cur.x - 1,cur.y,consumablePointsCopy)) {
      consumablePoints.add(new Point(cur.x - 1,cur.y));
      consumablePointsCopy.add(consumablePoints.get(consumablePoints.size() - 1));
      if (debug)       g.drawLine(cur.x - 1,cur.y,cur.x - 1,cur.y);
      i=0;
      continue;
    }
    ++i;
  }
  while (consumablePoints.size() != amountOfArea)   consumablePoints.remove(amountOfArea);
  mPoints.removeAll(consumablePoints);
  log.exiting(className,""String_Node_Str"");
  return consumablePoints;
}",0.994906974326993
184150,"/** 
 * Note that the passed   {@link HourFilter} is substantially different thanthe year, month, or day filters. The year, month, or day filters set a start and end range, which filters everything not in that range. The hour filter, on the other hand, determines the hours that are allowed for each day within the y/m/d range. For example, you cannot define 1PM on May 1st 2011 to 7PM on May 7th 2011, as that is not how the start and end hours work. You can specify the date range May 1 to May 7, and for every day in that range the hours 1PM to 7PM will be allowed through the filters
 * @param sliceSlize Defines the length that each slice of time should be divided into. Uses even divisions, e.g. 0, 15, 30, 45, etc minutes. Additionally, starts at the first even division occurring before the first reading. For days, this is the start of the day that the first reading was entered on
 * @param yf
 * @param mf
 * @param df
 * @param hf
 */
@SuppressWarnings(""String_Node_Str"") public DataLoader(TimeSlice sliceSlize,YearFilter yf,MonthFilter mf,DayFilter df,HourFilter hf){
  mSliceSize=sliceSlize;
  try {
    mInputFile=new BufferedReader(new FileReader(dataFileName));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return;
  }
catch (  IOException e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  GregorianCalendar temp=new GregorianCalendar();
  YearFilter yearFilter=null;
  if (yf != null)   yearFilter=yf;
 else {
    yearFilter=new YearFilter();
    yearFilter.startYear=temp.getMinimum(Calendar.YEAR);
    yearFilter.endYear=temp.getMaximum(Calendar.YEAR);
  }
  MonthFilter monthFilter=null;
  if (mf != null)   monthFilter=mf;
 else {
    monthFilter=new MonthFilter();
    monthFilter.startMonth=temp.getMinimum(Calendar.MONTH);
    monthFilter.endMonth=temp.getMaximum(Calendar.MONTH);
  }
  DayFilter dayFilter=null;
  if (df != null)   dayFilter=df;
 else {
    dayFilter=new DayFilter();
    dayFilter.startDay=temp.getMinimum(Calendar.DAY_OF_MONTH);
    dayFilter.endDay=temp.getMaximum(Calendar.DAY_OF_MONTH);
  }
  mRangeStart=new GregorianCalendar(0,0,0,0,0,0);
  mRangeStart.set(Calendar.YEAR,yearFilter.startYear);
  mRangeStart.set(Calendar.MONTH,monthFilter.startMonth);
  mRangeStart.set(Calendar.DAY_OF_MONTH,dayFilter.startDay);
  mRangeEnd=new GregorianCalendar(0,0,0,0,0,0);
  mRangeEnd.set(Calendar.YEAR,yearFilter.endYear);
  mRangeEnd.set(Calendar.MONTH,monthFilter.endMonth);
  mRangeEnd.set(Calendar.DAY_OF_MONTH,dayFilter.endDay);
  if (hf != null)   mHourFilter=hf;
 else {
    mHourFilter=new HourFilter();
    mHourFilter.startHour=temp.getMinimum(Calendar.HOUR_OF_DAY);
    mHourFilter.endHour=temp.getMaximum(Calendar.HOUR_OF_DAY);
  }
  advanceInputFileToFirstLine();
}","/** 
 * Note that the passed   {@link HourFilter} is substantially different thanthe year, month, or day filters. The year, month, or day filters set a start and end range, which filters everything not in that range. The hour filter, on the other hand, determines the hours that are allowed for each day within the y/m/d range. For example, you cannot define 1PM on May 1st 2011 to 7PM on May 7th 2011, as that is not how the start and end hours work. You can specify the date range May 1 to May 7, and for every day in that range the hours 1PM to 7PM will be allowed through the filters
 * @param sliceSlize Defines the length that each slice of time should be divided into. Uses even divisions, e.g. 0, 15, 30, 45, etc minutes. Additionally, starts at the first even division occurring before the first reading. For days, this is the start of the day that the first reading was entered on
 * @param yf
 * @param mf
 * @param df
 * @param hf
 */
@SuppressWarnings(""String_Node_Str"") public DataLoader(TimeSlice sliceSlize,YearFilter yf,MonthFilter mf,DayFilter df,HourFilter hf,int desiredWidth,int desiredHeight){
  mSliceSize=sliceSlize;
  yScaleFactor=yRange / desiredHeight;
  xScaleFactor=xRange / desiredWidth;
  try {
    mInputFile=new BufferedReader(new FileReader(dataFileName));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return;
  }
catch (  IOException e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  GregorianCalendar temp=new GregorianCalendar();
  YearFilter yearFilter=null;
  if (yf != null)   yearFilter=yf;
 else {
    yearFilter=new YearFilter();
    yearFilter.startYear=temp.getMinimum(Calendar.YEAR);
    yearFilter.endYear=temp.getMaximum(Calendar.YEAR);
  }
  MonthFilter monthFilter=null;
  if (mf != null)   monthFilter=mf;
 else {
    monthFilter=new MonthFilter();
    monthFilter.startMonth=temp.getMinimum(Calendar.MONTH);
    monthFilter.endMonth=temp.getMaximum(Calendar.MONTH);
  }
  DayFilter dayFilter=null;
  if (df != null)   dayFilter=df;
 else {
    dayFilter=new DayFilter();
    dayFilter.startDay=temp.getMinimum(Calendar.DAY_OF_MONTH);
    dayFilter.endDay=temp.getMaximum(Calendar.DAY_OF_MONTH);
  }
  mRangeStart=new GregorianCalendar(0,0,0,0,0,0);
  mRangeStart.set(Calendar.YEAR,yearFilter.startYear);
  mRangeStart.set(Calendar.MONTH,monthFilter.startMonth);
  mRangeStart.set(Calendar.DAY_OF_MONTH,dayFilter.startDay);
  mRangeEnd=new GregorianCalendar(0,0,0,0,0,0);
  mRangeEnd.set(Calendar.YEAR,yearFilter.endYear);
  mRangeEnd.set(Calendar.MONTH,monthFilter.endMonth);
  mRangeEnd.set(Calendar.DAY_OF_MONTH,dayFilter.endDay);
  if (hf != null)   mHourFilter=hf;
 else {
    mHourFilter=new HourFilter();
    mHourFilter.startHour=temp.getMinimum(Calendar.HOUR_OF_DAY);
    mHourFilter.endHour=temp.getMaximum(Calendar.HOUR_OF_DAY);
  }
  advanceInputFileToFirstLine();
}",0.9802747446283904
184151,"/** 
 * Reads data from the file, adding pixels as we go
 * @param r
 * @return 0 if pixels were read and added, 1 if the end of the file wasreached (whether or not pixels were actually added is unreported), -1 if there was an error (such as an IO exception)
 */
public int addPixels(Regions r){
  String nextLine=null;
  while (true) {
    try {
      mInputFile.mark(200);
      nextLine=mInputFile.readLine();
      if (nextLine == null) {
        mInputFile.close();
        return 1;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return -1;
    }
    String[] values=nextLine.split(""String_Node_Str"");
    long timeStamp=Long.parseLong(values[0]) * 1000;
    if (passesTimeFilters(timeStamp) == false) {
      continue;
    }
    if (isInCurrentTimeSlice(timeStamp) == false) {
      try {
        mInputFile.reset();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      updateCurrentTimeSlice();
      return 0;
    }
    double x=Double.parseDouble(values[2]) - xBase;
    double y=Double.parseDouble(values[3].trim()) - yBase;
    int xScaled=(int)(x / xScaleFactor);
    int yScaled=(int)(y / yScaleFactor);
    r.addDataReading(new Point(xScaled,yScaled));
  }
}","/** 
 * Reads data from the file, adding pixels as we go
 * @param r
 * @return 0 if pixels were read and added, 1 if the end of the file wasreached (whether or not pixels were actually added is unreported) or we have reached the end of the available data (bascally, normal termination), -1 if there was an error (such as an IO exception)
 */
public int addPixels(Regions r){
  String nextLine=null;
  while (true) {
    try {
      mInputFile.mark(200);
      nextLine=mInputFile.readLine();
      if (nextLine == null) {
        mInputFile.close();
        return 1;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return -1;
    }
    String[] values=nextLine.split(""String_Node_Str"");
    long timeStamp=Long.parseLong(values[0]) * 1000;
    if (isInCurrentTimeSlice(timeStamp) == false) {
      try {
        mInputFile.reset();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      updateCurrentTimeSlice();
      return 0;
    }
    if (passesDayMonthYearTimeFilters(timeStamp) == false) {
      mTempCalendar.setTimeInMillis(timeStamp);
      if (mTempCalendar.after(mRangeEnd))       return 1;
 else       continue;
    }
    if (passesHourFilter(timeStamp) == false)     continue;
    double x=Double.parseDouble(values[2]) - xBase;
    double y=Double.parseDouble(values[3].trim()) - yBase;
    int xScaled=(int)(x / xScaleFactor);
    int yScaled=(int)(y / yScaleFactor);
    r.addDataReading(new Point(xScaled,yScaled));
  }
}",0.851063829787234
184152,"/** 
 * Skips the input buffer ahead by large ranges.
 */
private void advanceInputFileToFirstLine(){
  int approxCharsPerLine=60;
  int numberOfLines=100000;
  while (true) {
    try {
      mInputFile.mark((approxCharsPerLine + 15) * numberOfLines);
      mInputFile.skip((approxCharsPerLine) * numberOfLines);
      mInputFile.readLine();
      String line=mInputFile.readLine();
      if (line == null)       return;
      long time=Long.parseLong(line.split(""String_Node_Str"")[0]) * 1000;
      mTempCalendar.setTimeInMillis(time);
      if (passesTimeFilters(time)) {
        mInputFile.reset();
        return;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return;
    }
  }
}","/** 
 * Skips the input buffer ahead by large ranges.
 */
private void advanceInputFileToFirstLine(){
  int approxCharsPerLine=60;
  int numberOfLines=100000;
  while (true) {
    try {
      mInputFile.mark((approxCharsPerLine + 15) * numberOfLines);
      mInputFile.skip((approxCharsPerLine) * numberOfLines);
      mInputFile.readLine();
      String line=mInputFile.readLine();
      if (line == null)       return;
      long time=Long.parseLong(line.split(""String_Node_Str"")[0]) * 1000;
      mTempCalendar.setTimeInMillis(time);
      if (passesDayMonthYearTimeFilters(time)) {
        mInputFile.reset();
        return;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return;
    }
  }
}",0.9916550764951322
184153,"private static void printImage(Environment r,int cycle){
  BufferedImage bi=r.getImage();
  StringBuilder name=new StringBuilder(""String_Node_Str"");
  if (cycle < 10)   name.append(""String_Node_Str"").append(cycle).append(""String_Node_Str"");
 else   if (cycle > 9 && cycle < 100)   name.append(""String_Node_Str"").append(cycle).append(""String_Node_Str"");
 else   name.append(cycle).append(""String_Node_Str"");
  try {
    File f=new File(name.toString());
    ImageIO.write(bi,""String_Node_Str"",f);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private static void printImage(Environment r,int cycle){
  BufferedImage bi=r.getKvalueImage(K);
  StringBuilder name=new StringBuilder(""String_Node_Str"");
  if (cycle < 10)   name.append(""String_Node_Str"").append(cycle).append(""String_Node_Str"");
 else   if (cycle > 9 && cycle < 100)   name.append(""String_Node_Str"").append(cycle).append(""String_Node_Str"");
 else   name.append(cycle).append(""String_Node_Str"");
  try {
    File f=new File(name.toString());
    ImageIO.write(bi,""String_Node_Str"",f);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9937555753791256
184154,"public static void main(String[] args){
  if (System.getProperty(paramEnvironmentXSize) != null)   environXsize=Integer.parseInt(System.getProperty(paramEnvironmentXSize));
  if (System.getProperty(paramEnvironmentYSize) != null)   environYsize=Integer.parseInt(System.getProperty(paramEnvironmentYSize));
  if (System.getProperty(paramK) != null)   K=Integer.parseInt(System.getProperty(paramK));
  if (System.getProperty(paramNumberDynamicCycles) != null)   dynamicCycleCount=Integer.parseInt(System.getProperty(paramNumberDynamicCycles));
  if (System.getProperty(paramDatasetRange) != null) {
    String range=System.getProperty(paramDatasetRange);
    if (range.equals(""String_Node_Str"")) {
      yf.startYear=2003;
      mf.startMonth=9;
      df.startDay=24;
      yf.endYear=2003;
      mf.endMonth=10;
      df.endDay=31;
      hf.startHour=12;
      hf.endHour=18;
    }
 else     if (range.equals(""String_Node_Str"")) {
      yf=null;
      mf=null;
      df=null;
      hf=null;
    }
 else     System.err.println(""String_Node_Str"" + paramDatasetRange);
  }
  if (System.getProperty(paramTimesliceLength) != null)   sliceUsed=Long.parseLong(System.getProperty(paramTimesliceLength));
  Environment env=new Environment(new Dimension(environXsize,environYsize));
  env.resetUniqueUsersSeen();
  env.resetRegionUsage();
  DataLoader loader=new DataLoader(sliceUsed,yf,mf,df,hf,environXsize,environYsize);
  FileWriter outFile=null;
  if (debugWriteOutAnonolyResults)   outFile=getOutFileWriter();
  int totalRegionCount=0;
  int cycle=0;
  while (true) {
    env.resetUniqueUsersSeen();
    env.resetDataReadingCounts();
    int result=loader.addDataReadings(env);
    if (result == -1) {
      log.severe(""String_Node_Str"");
      break;
    }
 else     if (result == 0) {
      log.info(""String_Node_Str"");
      continue;
    }
    if (dynamicCycleCount == -1 && env.getRegions().size() == 1)     while (env.getUniqueUserCount() < K) {
      log.info(""String_Node_Str"");
      result=loader.addDataReadings(env);
      if (result == -1) {
        log.severe(""String_Node_Str"");
        break;
      }
    }
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"" + cycle++);
    if (debugPrintTessellationEveryCycle)     printImage(env,cycle);
    if (dynamicCycleCount == -1 || cycle < dynamicCycleCount) {
      env.orderRegions(OptimialityRanking);
      env.printRegionOrdering();
      env.resetRegionUsage();
      log.info(""String_Node_Str"");
      log.info(""String_Node_Str"");
      runAlgorithm(env);
    }
 else     env.printRegionOrdering();
    totalRegionCount+=env.getRegions().size();
    if (debugWriteOutAnonolyResults) {
      try {
        outFile.write(Long.toString(loader.getCurrentTimesliceStart()));
        outFile.write(""String_Node_Str"");
        outFile.write(Long.toString(loader.getCurrentTimesliceEnd()));
        outFile.write(""String_Node_Str"");
        StringBuilder b=new StringBuilder();
        for (        Region reg : env.getRegions()) {
          b.append(reg.getUniqueUsersCount()).append('|').append(reg.getDataReadingCount()).append('|');
          b.append(((RectilinearPixelPoly)reg.getPolyImpl()).getArea()).append('>');
        }
        b.deleteCharAt(b.length() - 1);
        b.append('\n');
        outFile.write(b.toString());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  log.severe(""String_Node_Str"" + totalRegionCount);
  if (debugWriteOutAnonolyResults) {
    try {
      outFile.close();
      RandomAccessFile f=new RandomAccessFile(new File(getFileName()),""String_Node_Str"");
      while (f.readLine().equals(""String_Node_Str"") == false)       ;
      f.writeBytes(""String_Node_Str"");
      f.writeBytes(Integer.toString(totalRegionCount));
      f.writeChar('\n');
      f.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","public static void main(String[] args){
  if (System.getProperty(paramEnvironmentXSize) != null)   environXsize=Integer.parseInt(System.getProperty(paramEnvironmentXSize));
  if (System.getProperty(paramEnvironmentYSize) != null)   environYsize=Integer.parseInt(System.getProperty(paramEnvironmentYSize));
  if (System.getProperty(paramK) != null)   K=Integer.parseInt(System.getProperty(paramK));
  if (System.getProperty(paramNumberDynamicCycles) != null)   minimumCycleCount=Integer.parseInt(System.getProperty(paramNumberDynamicCycles));
  if (System.getProperty(paramDatasetRange) != null) {
    String range=System.getProperty(paramDatasetRange);
    if (range.equals(""String_Node_Str"")) {
      yf.startYear=2003;
      mf.startMonth=9;
      df.startDay=24;
      yf.endYear=2003;
      mf.endMonth=10;
      df.endDay=31;
      hf.startHour=12;
      hf.endHour=18;
    }
 else     if (range.equals(""String_Node_Str"")) {
      yf=null;
      mf=null;
      df=null;
      hf=null;
    }
 else     System.err.println(""String_Node_Str"" + paramDatasetRange);
  }
  if (System.getProperty(paramTimesliceLength) != null)   sliceUsed=Long.parseLong(System.getProperty(paramTimesliceLength));
  Environment env=new Environment(new Dimension(environXsize,environYsize));
  env.resetUniqueUsersSeen();
  env.resetRegionUsage();
  DataLoader loader=new DataLoader(sliceUsed,yf,mf,df,hf,environXsize,environYsize);
  FileWriter outFile=null;
  if (debugWriteOutAnonolyResults)   outFile=getOutFileWriter();
  int totalRegionCount=0;
  int cycle=0;
  while (true) {
    env.resetUniqueUsersSeen();
    env.resetDataReadingCounts();
    int result=loader.addDataReadings(env);
    if (result == -1) {
      log.severe(""String_Node_Str"");
      break;
    }
 else     if (result == 0) {
      log.info(""String_Node_Str"");
      continue;
    }
    if (minimumCycleCount == -1 && env.getRegions().size() == 1)     while (env.getUniqueUserCount() < K) {
      log.info(""String_Node_Str"");
      result=loader.addDataReadings(env);
      if (result == -1) {
        log.severe(""String_Node_Str"");
        break;
      }
    }
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"" + cycle++);
    if (debugPrintTessellationEveryCycle)     printImage(env,cycle);
    if (minimumCycleCount == -1 || cycle < minimumCycleCount || env.getRegions().size() > minimumRequiredStaticRegions) {
      env.orderRegions(OptimialityRanking);
      env.printRegionOrdering();
      env.resetRegionUsage();
      log.info(""String_Node_Str"");
      log.info(""String_Node_Str"");
      runAlgorithm(env);
    }
 else     env.printRegionOrdering();
    totalRegionCount+=env.getRegions().size();
    if (debugWriteOutAnonolyResults) {
      try {
        outFile.write(Long.toString(loader.getCurrentTimesliceStart()));
        outFile.write(""String_Node_Str"");
        outFile.write(Long.toString(loader.getCurrentTimesliceEnd()));
        outFile.write(""String_Node_Str"");
        StringBuilder b=new StringBuilder();
        for (        Region reg : env.getRegions()) {
          b.append(reg.getUniqueUsersCount()).append('|').append(reg.getDataReadingCount()).append('|');
          b.append(((RectilinearPixelPoly)reg.getPolyImpl()).getArea()).append('>');
        }
        b.deleteCharAt(b.length() - 1);
        b.append('\n');
        outFile.write(b.toString());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  log.severe(""String_Node_Str"" + totalRegionCount);
  if (debugWriteOutAnonolyResults) {
    try {
      outFile.close();
      RandomAccessFile f=new RandomAccessFile(new File(getFileName()),""String_Node_Str"");
      while (f.readLine().equals(""String_Node_Str"") == false)       ;
      f.writeBytes(""String_Node_Str"");
      f.writeBytes(Integer.toString(totalRegionCount));
      f.writeChar('\n');
      f.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.9854033290653008
184155,"private static String getFileName(){
  String filename=""String_Node_Str"" + K + ""String_Node_Str"";
  filename+=sliceUsed;
  filename+=""String_Node_Str"";
  filename+=""String_Node_Str"" + environXsize + ""String_Node_Str""+ environYsize;
  if (dynamicCycleCount != -1)   filename+=""String_Node_Str"" + dynamicCycleCount + ""String_Node_Str"";
  filename+=""String_Node_Str"";
  return filename;
}","private static String getFileName(){
  String filename=""String_Node_Str"" + K + ""String_Node_Str"";
  filename+=sliceUsed;
  filename+=""String_Node_Str"";
  filename+=""String_Node_Str"" + environXsize + ""String_Node_Str""+ environYsize;
  if (minimumCycleCount != -1)   filename+=""String_Node_Str"" + minimumCycleCount + ""String_Node_Str"";
  filename+=""String_Node_Str"";
  return filename;
}",0.9636363636363636
184156,"@SuppressWarnings(""String_Node_Str"") private static FileWriter getOutFileWriter(){
  String filename=getFileName();
  try {
    FileWriter fw=new FileWriter(filename);
    fw.write(""String_Node_Str"");
    if (df == null)     fw.write(""String_Node_Str"");
 else     fw.write(df.startDay);
    fw.write(""String_Node_Str"");
    if (mf == null)     fw.write(""String_Node_Str"");
 else     fw.write(mf.startMonth);
    fw.write(""String_Node_Str"");
    if (yf == null)     fw.write(""String_Node_Str"");
 else     fw.write(yf.startYear);
    fw.write(""String_Node_Str"");
    if (df == null)     fw.write(""String_Node_Str"");
 else     fw.write(df.endDay);
    fw.write(""String_Node_Str"");
    if (mf == null)     fw.write(""String_Node_Str"");
 else     fw.write(mf.endMonth);
    fw.write(""String_Node_Str"");
    if (yf == null)     fw.write(""String_Node_Str"");
 else     fw.write(yf.endYear);
    fw.write(""String_Node_Str"");
    if (hf == null)     fw.write(""String_Node_Str"");
 else     fw.write(hf.startHour + ""String_Node_Str"");
    fw.write(""String_Node_Str"");
    if (hf == null)     fw.write(""String_Node_Str"");
 else     fw.write(hf.endHour + ""String_Node_Str"");
    GregorianCalendar time=new GregorianCalendar();
    time.setTimeInMillis(System.currentTimeMillis());
    fw.write(""String_Node_Str"" + time.getTime().toLocaleString() + ""String_Node_Str"");
    fw.write(""String_Node_Str"" + environXsize + ""String_Node_Str""+ environYsize+ ""String_Node_Str"");
    fw.write(""String_Node_Str"" + K + ""String_Node_Str"");
    fw.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return fw;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") private static FileWriter getOutFileWriter(){
  String filename=getFileName();
  try {
    FileWriter fw=new FileWriter(filename);
    fw.write(""String_Node_Str"");
    if (df == null)     fw.write(""String_Node_Str"");
 else     fw.write(Integer.toString(df.startDay));
    fw.write(""String_Node_Str"");
    if (mf == null)     fw.write(""String_Node_Str"");
 else     fw.write(Integer.toString(mf.startMonth));
    fw.write(""String_Node_Str"");
    if (yf == null)     fw.write(""String_Node_Str"");
 else     fw.write(Integer.toString(yf.startYear));
    fw.write(""String_Node_Str"");
    if (df == null)     fw.write(""String_Node_Str"");
 else     fw.write(Integer.toString(df.endDay));
    fw.write(""String_Node_Str"");
    if (mf == null)     fw.write(""String_Node_Str"");
 else     fw.write(Integer.toString(mf.endMonth));
    fw.write(""String_Node_Str"");
    if (yf == null)     fw.write(""String_Node_Str"");
 else     fw.write(Integer.toString(yf.endYear));
    fw.write(""String_Node_Str"");
    if (hf == null)     fw.write(""String_Node_Str"");
 else     fw.write(Integer.toString(hf.startHour) + ""String_Node_Str"");
    fw.write(""String_Node_Str"");
    if (hf == null)     fw.write(""String_Node_Str"");
 else     fw.write(Integer.toString(hf.endHour) + ""String_Node_Str"");
    GregorianCalendar time=new GregorianCalendar();
    time.setTimeInMillis(System.currentTimeMillis());
    fw.write(""String_Node_Str"" + time.getTime().toLocaleString() + ""String_Node_Str"");
    fw.write(""String_Node_Str"" + environXsize + ""String_Node_Str""+ environYsize+ ""String_Node_Str"");
    fw.write(""String_Node_Str"" + K + ""String_Node_Str"");
    fw.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return fw;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}",0.9587864911276474
184157,"protected RectilinearPixelPoly(Collection<Point> initial,Regions manager){
  log.entering(getClass().getName(),""String_Node_Str"");
  if (initial.size() == 0)   throw new IllegalArgumentException();
  mRegionManager=manager;
  mPoints.addAll(initial);
}","protected RectilinearPixelPoly(Collection<Point> initial,Regions manager){
  log.entering(getClass().getName(),""String_Node_Str"");
  if (initial.size() == 0)   throw new IllegalArgumentException();
  mRegionManager=manager;
  mPoints.addAll(initial);
  assert(isContigious());
}",0.9509433962264152
184158,"private boolean isConsumable(int x,int y,List<Point> toBeConsumed){
  log.entering(className,""String_Node_Str"",new Object[]{new Point(x,y),toBeConsumed});
  temp.x=x;
  temp.y=y;
  if (toBeConsumed == null)   toBeConsumed=tempList;
  if (false == contains(temp)) {
    log.finest(""String_Node_Str"");
    log.exiting(className,""String_Node_Str"",false);
    return false;
  }
  if (toBeConsumed.contains(temp)) {
    log.finest(""String_Node_Str"");
    log.exiting(className,""String_Node_Str"",false);
    return false;
  }
  int available=0;
  boolean northAvail=false;
  if (contains(x,y + 1))   if (false == toBeConsumed.contains(new Point(x,y + 1))) {
    northAvail=true;
    ++available;
  }
  boolean eastAvail=false;
  if (contains(x + 1,y))   if (false == toBeConsumed.contains(new Point(x + 1,y))) {
    eastAvail=true;
    ++available;
  }
  boolean southAvail=false;
  if (contains(x,y - 1))   if (false == toBeConsumed.contains(new Point(x,y - 1))) {
    southAvail=true;
    ++available;
  }
  boolean westAvail=false;
  if (contains(x - 1,y))   if (false == toBeConsumed.contains(new Point(x - 1,y))) {
    westAvail=true;
    ++available;
  }
  if (available == 4 && toBeConsumed.size() != 0)   throw new IllegalStateException(""String_Node_Str"");
 else   if (available == 4 && toBeConsumed.size() == 0) {
    log.exiting(className,""String_Node_Str"",true);
    return true;
  }
  if (available == 3) {
    if (!northAvail) {
      if (false == contains(x - 1,y - 1) || toBeConsumed.contains(new Point(x - 1,y - 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      if (false == contains(x + 1,y - 1) || toBeConsumed.contains(new Point(x + 1,y - 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      log.exiting(className,""String_Node_Str"",true);
      return true;
    }
 else     if (!eastAvail) {
      if (false == contains(x - 1,y + 1) || toBeConsumed.contains(new Point(x - 1,y + 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      if (false == contains(x - 1,y - 1) || toBeConsumed.contains(new Point(x - 1,y - 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      log.exiting(className,""String_Node_Str"",true);
      return true;
    }
 else     if (!southAvail) {
      if (false == contains(x - 1,y + 1) || toBeConsumed.contains(new Point(x - 1,y + 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      if (false == contains(x + 1,y + 1) || toBeConsumed.contains(new Point(x + 1,y + 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      log.exiting(className,""String_Node_Str"",true);
      return true;
    }
 else     if (!westAvail) {
      if (false == contains(x + 1,y + 1) || toBeConsumed.contains(new Point(x + 1,y + 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      if (false == contains(x + 1,y - 1) || toBeConsumed.contains(new Point(x + 1,y - 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      log.exiting(className,""String_Node_Str"",true);
      return true;
    }
 else     throw new IllegalStateException(""String_Node_Str"");
  }
  if (available == 2) {
    if (northAvail && southAvail) {
      log.exiting(className,""String_Node_Str"",false);
      return false;
    }
    if (!northAvail && !southAvail) {
      log.exiting(className,""String_Node_Str"",false);
      return false;
    }
    log.exiting(className,""String_Node_Str"",true);
    return true;
  }
  if (available == 1) {
    log.exiting(className,""String_Node_Str"",true);
    return true;
  }
  if (available == 0)   return true;
  if (available == 0 && toBeConsumed.size() != getArea())   throw new IllegalStateException(""String_Node_Str"" + toBeConsumed.size() + ""String_Node_Str""+ getArea());
  throw new IllegalAccessError(""String_Node_Str"");
}","private boolean isConsumable(int x,int y,List<Point> toBeConsumed){
  log.entering(className,""String_Node_Str"",new Object[]{new Point(x,y),toBeConsumed});
  temp.x=x;
  temp.y=y;
  if (toBeConsumed == null)   toBeConsumed=tempList;
  if (false == contains(temp)) {
    log.finest(""String_Node_Str"");
    log.exiting(className,""String_Node_Str"",false);
    return false;
  }
  if (toBeConsumed.contains(temp)) {
    log.finest(""String_Node_Str"");
    log.exiting(className,""String_Node_Str"",false);
    return false;
  }
  int available=0;
  boolean northAvail=false;
  if (contains(x,y + 1))   if (false == toBeConsumed.contains(new Point(x,y + 1))) {
    northAvail=true;
    ++available;
  }
  boolean eastAvail=false;
  if (contains(x + 1,y))   if (false == toBeConsumed.contains(new Point(x + 1,y))) {
    eastAvail=true;
    ++available;
  }
  boolean southAvail=false;
  if (contains(x,y - 1))   if (false == toBeConsumed.contains(new Point(x,y - 1))) {
    southAvail=true;
    ++available;
  }
  boolean westAvail=false;
  if (contains(x - 1,y))   if (false == toBeConsumed.contains(new Point(x - 1,y))) {
    westAvail=true;
    ++available;
  }
  if (available == 4 && toBeConsumed.size() != 0)   throw new IllegalStateException(""String_Node_Str"");
 else   if (available == 4 && toBeConsumed.size() == 0) {
    log.exiting(className,""String_Node_Str"",true);
    return true;
  }
  if (available == 3) {
    if (!northAvail) {
      if (false == contains(x - 1,y - 1) || toBeConsumed.contains(new Point(x - 1,y - 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      if (false == contains(x + 1,y - 1) || toBeConsumed.contains(new Point(x + 1,y - 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      log.exiting(className,""String_Node_Str"",true);
      return true;
    }
 else     if (!eastAvail) {
      if (false == contains(x - 1,y + 1) || toBeConsumed.contains(new Point(x - 1,y + 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      if (false == contains(x - 1,y - 1) || toBeConsumed.contains(new Point(x - 1,y - 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      log.exiting(className,""String_Node_Str"",true);
      return true;
    }
 else     if (!southAvail) {
      if (false == contains(x - 1,y + 1) || toBeConsumed.contains(new Point(x - 1,y + 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      if (false == contains(x + 1,y + 1) || toBeConsumed.contains(new Point(x + 1,y + 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      log.exiting(className,""String_Node_Str"",true);
      return true;
    }
 else     if (!westAvail) {
      if (false == contains(x + 1,y + 1) || toBeConsumed.contains(new Point(x + 1,y + 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      if (false == contains(x + 1,y - 1) || toBeConsumed.contains(new Point(x + 1,y - 1))) {
        log.exiting(className,""String_Node_Str"",false);
        return false;
      }
      log.exiting(className,""String_Node_Str"",true);
      return true;
    }
 else     throw new IllegalStateException(""String_Node_Str"");
  }
  if (available == 2) {
    log.exiting(className,""String_Node_Str"",false);
    return false;
  }
  if (available == 1) {
    log.exiting(className,""String_Node_Str"",true);
    return true;
  }
  if (available == 0)   return true;
  if (available == 0 && toBeConsumed.size() != getArea())   throw new IllegalStateException(""String_Node_Str"" + toBeConsumed.size() + ""String_Node_Str""+ getArea());
  throw new IllegalAccessError(""String_Node_Str"");
}",0.8654685494223363
184159,"/** 
 * Divides this one polygon into two
 * @param amountOfArea The amount of space that should be removed from this polygon and given to the new one
 */
public void split(int amountOfArea){
  log.entering(className,""String_Node_Str"",amountOfArea);
  log.finest(""String_Node_Str"");
  Point edge=null;
  List<Point> innerBorder=getInnerBorder();
  for (  Point p : innerBorder) {
    log.finest(""String_Node_Str"" + p + ""String_Node_Str"");
    if (isConsumable(p.x,p.y,null)) {
      edge=p;
      break;
    }
  }
  if (edge == null) {
    log.fine(""String_Node_Str"");
    for (    Point p : getBorder()) {
      if (innerBorder.contains(p))       continue;
      if (isConsumable(p.x,p.y,null)) {
        edge=p;
        break;
      }
    }
    if (edge == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  log.fine(""String_Node_Str"" + edge);
  Collection<Point> points=consumeArea(amountOfArea,edge);
  if (log.isLoggable(Level.FINEST)) {
    log.finest(""String_Node_Str"" + points);
  }
  mRegionManager.createRegion(points);
}","/** 
 * Divides this one polygon into two
 * @param amountOfArea The amount of space that should be removed from this polygon and given to the new one
 */
public void split(int amountOfArea){
  log.entering(className,""String_Node_Str"",amountOfArea);
  log.finest(""String_Node_Str"");
  Point edge=null;
  List<Point> innerBorder=getInnerBorder();
  for (  Point p : innerBorder) {
    log.finest(""String_Node_Str"" + p + ""String_Node_Str"");
    if (isConsumable(p.x,p.y,null)) {
      edge=p;
      break;
    }
  }
  if (edge == null) {
    log.fine(""String_Node_Str"");
    for (    Point p : getBorder()) {
      if (innerBorder.contains(p))       continue;
      if (isConsumable(p.x,p.y,null)) {
        edge=p;
        break;
      }
    }
    if (edge == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  log.fine(""String_Node_Str"" + edge);
  Collection<Point> points=consumeArea(amountOfArea,edge);
  if (log.isLoggable(Level.FINEST)) {
    log.finest(""String_Node_Str"" + points);
  }
  assert(isContigious());
  mRegionManager.createRegion(points);
}",0.9878618113912232
184160,"/** 
 * Allows someone to consume pixels from this polygon. There are some edge cases where the requested number of points my not have actually been consumed if the expansion outward from the selected start point encounter problems. I'm trying to remove this annoyance, but for now that means that this method should be called in a loop, checking if the desired area was received.
 * @param amountOfArea the number of pixels desired. If this is greater than the size of this polygon, all polygon pixels are returned and this poly will deregister itself from the area
 * @return all of the points that can be consumed, up toMath.min(amountOfArea,size). The caller should check the size to see if it got what it requested
 */
public Collection<Point> consumeArea(int amountOfArea,Point startPoint){
  log.entering(className,""String_Node_Str"",new Object[]{amountOfArea,startPoint});
  if (amountOfArea >= getArea()) {
    mRegionManager.removeRegion(this);
    log.exiting(className,""String_Node_Str"",""String_Node_Str"");
    return mPoints;
  }
  List<Point> consumablePoints=new ArrayList<Point>(amountOfArea + 8);
  if (isConsumable(startPoint.x,startPoint.y,consumablePoints)) {
    log.finest(""String_Node_Str"");
    consumablePoints.add(startPoint);
  }
 else {
    log.info(""String_Node_Str"");
    log.exiting(className,""String_Node_Str"");
    return consumablePoints;
  }
  int i=0;
  int lastIterationListSize=0;
  do {
    Point cur=null;
    try {
      cur=consumablePoints.get(i);
    }
 catch (    IndexOutOfBoundsException ide) {
      if (lastIterationListSize == consumablePoints.size()) {
        mPoints.removeAll(consumablePoints);
        return consumablePoints;
      }
      log.finest(""String_Node_Str"");
      i=0;
      cur=consumablePoints.get(i);
      lastIterationListSize=consumablePoints.size();
    }
    log.finest(""String_Node_Str"" + cur + ""String_Node_Str"");
    if (isConsumable(cur.x,cur.y - 1,consumablePoints))     consumablePoints.add(new Point(cur.x,cur.y - 1));
    if (isConsumable(cur.x + 1,cur.y,consumablePoints))     consumablePoints.add(new Point(cur.x + 1,cur.y));
    if (isConsumable(cur.x,cur.y + 1,consumablePoints))     consumablePoints.add(new Point(cur.x,cur.y + 1));
    if (isConsumable(cur.x - 1,cur.y,consumablePoints))     consumablePoints.add(new Point(cur.x - 1,cur.y));
    ++i;
  }
 while (consumablePoints.size() < amountOfArea);
  while (consumablePoints.size() != amountOfArea)   consumablePoints.remove(amountOfArea);
  mPoints.removeAll(consumablePoints);
  log.exiting(className,""String_Node_Str"");
  return consumablePoints;
}","/** 
 * Allows someone to consume pixels from this polygon. There are some edge cases where the requested number of points my not have actually been consumed if the expansion outward from the selected start point encounter problems. I'm trying to remove this annoyance, but for now that means that this method should be called in a loop, checking if the desired area was received.
 * @param amountOfArea the number of pixels desired. If this is greater than the size of this polygon, all polygon pixels are returned and this poly will deregister itself from the area
 * @return all of the points that can be consumed, up toMath.min(amountOfArea,size). The caller should check the size to see if it got what it requested
 */
public Collection<Point> consumeArea(int amountOfArea,Point startPoint){
  log.entering(className,""String_Node_Str"",new Object[]{amountOfArea,startPoint});
  if (amountOfArea >= getArea()) {
    mRegionManager.removeRegion(this);
    log.exiting(className,""String_Node_Str"",""String_Node_Str"");
    return mPoints;
  }
  List<Point> consumablePoints=new ArrayList<Point>(amountOfArea + 8);
  if (isConsumable(startPoint.x,startPoint.y,consumablePoints)) {
    log.finest(""String_Node_Str"");
    consumablePoints.add(startPoint);
  }
 else {
    log.info(""String_Node_Str"");
    log.exiting(className,""String_Node_Str"");
    return consumablePoints;
  }
  int i=0;
  int lastIterationListSize=0;
  while (consumablePoints.size() < amountOfArea) {
    Point cur=null;
    try {
      cur=consumablePoints.get(i);
    }
 catch (    IndexOutOfBoundsException ide) {
      if (lastIterationListSize == consumablePoints.size()) {
        mPoints.removeAll(consumablePoints);
        assert(isContigious());
        return consumablePoints;
      }
      log.finest(""String_Node_Str"");
      i=0;
      cur=consumablePoints.get(i);
      lastIterationListSize=consumablePoints.size();
    }
    log.finest(""String_Node_Str"" + cur + ""String_Node_Str"");
    if (isConsumable(cur.x,cur.y - 1,consumablePoints))     consumablePoints.add(new Point(cur.x,cur.y - 1));
    if (isConsumable(cur.x + 1,cur.y,consumablePoints))     consumablePoints.add(new Point(cur.x + 1,cur.y));
    if (isConsumable(cur.x,cur.y + 1,consumablePoints))     consumablePoints.add(new Point(cur.x,cur.y + 1));
    if (isConsumable(cur.x - 1,cur.y,consumablePoints))     consumablePoints.add(new Point(cur.x - 1,cur.y));
    ++i;
  }
  while (consumablePoints.size() != amountOfArea)   consumablePoints.remove(amountOfArea);
  mPoints.removeAll(consumablePoints);
  log.exiting(className,""String_Node_Str"");
  return consumablePoints;
}",0.9752826211917992
184161,"public void merge(Collection<Point> consumablePoints){
  mPoints.addAll(consumablePoints);
}","public void merge(Collection<Point> consumablePoints){
  mPoints.addAll(consumablePoints);
  assert(isContigious());
}",0.8761904761904762
184162,"public String readLine() throws IOException {
  if (isASCII && txt != null) {
    return txt.readLine();
  }
  if (!isASCII && bgzf != null) {
    String ans=""String_Node_Str"";
    char c;
    while ((c=(char)bgzf.read()) >= 0) {
      if (c != '\n')       ans+=c;
 else       return ans;
    }
  }
  return null;
}","public String readLine() throws IOException {
  if (isASCII && txt != null) {
    return txt.readLine();
  }
  if (!isASCII && bgzf != null) {
    String ans=""String_Node_Str"";
    char c;
    while ((c=(char)bgzf.read()) < 255) {
      if (c != '\n')       ans+=c;
 else       return ans;
    }
  }
  return null;
}",0.9857369255150554
184163,"public void renderType(RenderType $type){
  _renderType=$type;
  _renderTypeInt=renderTypeToInt(_renderType);
}","public void renderType(RenderType $type){
  _renderType=$type;
}",0.7314285714285714
184164,"protected void drawObject(Object3d $o){
  if ($o.isVisible() == false)   return;
  if ($o.hasNormals() && $o.normalsEnabled()) {
    $o.vertices().normals().buffer().position(0);
    _gl.glNormalPointer(GL10.GL_FLOAT,0,$o.vertices().normals().buffer());
    _gl.glEnableClientState(GL10.GL_NORMAL_ARRAY);
  }
 else {
    _gl.glDisableClientState(GL10.GL_NORMAL_ARRAY);
  }
  boolean useLighting=(_scene.lightingEnabled() && $o.hasNormals() && $o.normalsEnabled()&& $o.lightingEnabled());
  if (useLighting) {
    _gl.glEnable(GL10.GL_LIGHTING);
  }
 else {
    _gl.glDisable(GL10.GL_LIGHTING);
  }
  _gl.glGetIntegerv(GL11.GL_SHADE_MODEL,_scratchIntBuffer);
  if ($o.shadeModel().glConstant() != _scratchIntBuffer.get(0)) {
    _gl.glShadeModel($o.shadeModel().glConstant());
  }
  if ($o.hasVertexColors() && $o.vertexColorsEnabled()) {
    $o.vertices().colors().buffer().position(0);
    _gl.glColorPointer(4,GL10.GL_UNSIGNED_BYTE,0,$o.vertices().colors().buffer());
    _gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
  }
 else {
    _gl.glColor4f((float)$o.defaultColor().r / 255f,(float)$o.defaultColor().g / 255f,(float)$o.defaultColor().b / 255f,(float)$o.defaultColor().a / 255f);
    _gl.glDisableClientState(GL10.GL_COLOR_ARRAY);
  }
  _gl.glGetIntegerv(GL10.GL_COLOR_MATERIAL,_scratchIntBuffer);
  _scratchB=(_scratchIntBuffer.get(0) != 0);
  if ($o.colorMaterialEnabled() != _scratchB) {
    if ($o.colorMaterialEnabled())     _gl.glEnable(GL10.GL_COLOR_MATERIAL);
 else     _gl.glDisable(GL10.GL_COLOR_MATERIAL);
  }
  if ($o.renderType() == RenderType.POINTS) {
    if ($o.pointSmoothing())     _gl.glEnable(GL10.GL_POINT_SMOOTH);
 else     _gl.glDisable(GL10.GL_POINT_SMOOTH);
    _gl.glPointSize($o.pointSize());
  }
  if ($o.renderType() == RenderType.LINES) {
    if ($o.lineSmoothing() == true) {
      _gl.glEnable(GL10.GL_LINE_SMOOTH);
    }
 else {
      _gl.glDisable(GL10.GL_LINE_SMOOTH);
    }
    _gl.glLineWidth($o.lineWidth());
  }
  if ($o.doubleSidedEnabled()) {
    _gl.glDisable(GL10.GL_CULL_FACE);
  }
 else {
    _gl.glEnable(GL10.GL_CULL_FACE);
  }
  drawObject_textures($o);
  _gl.glPushMatrix();
  _gl.glTranslatef($o.position().x,$o.position().y,$o.position().z);
  _gl.glRotatef($o.rotation().x,1,0,0);
  _gl.glRotatef($o.rotation().y,0,1,0);
  _gl.glRotatef($o.rotation().z,0,0,1);
  _gl.glScalef($o.scale().x,$o.scale().y,$o.scale().z);
  $o.vertices().points().buffer().position(0);
  _gl.glVertexPointer(3,GL10.GL_FLOAT,0,$o.vertices().points().buffer());
  if (!$o.ignoreFaces()) {
    int pos, len;
    if (!$o.faces().renderSubsetEnabled()) {
      pos=0;
      len=$o.faces().size();
    }
 else {
      pos=$o.faces().renderSubsetStartIndex() * FacesBufferedList.PROPERTIES_PER_ELEMENT;
      len=$o.faces().renderSubsetLength();
    }
    $o.faces().buffer().position(pos);
    _gl.glDrawElements($o.renderTypeInt(),len * FacesBufferedList.PROPERTIES_PER_ELEMENT,GL10.GL_UNSIGNED_SHORT,$o.faces().buffer());
  }
 else {
    _gl.glDrawArrays($o.renderTypeInt(),0,$o.vertices().size());
  }
  if ($o instanceof Object3dContainer) {
    Object3dContainer container=(Object3dContainer)$o;
    for (int i=0; i < container.children().size(); i++) {
      Object3d o=container.children().get(i);
      drawObject(o);
    }
  }
  _gl.glPopMatrix();
}","protected void drawObject(Object3d $o){
  if ($o.isVisible() == false)   return;
  if ($o.hasNormals() && $o.normalsEnabled()) {
    $o.vertices().normals().buffer().position(0);
    _gl.glNormalPointer(GL10.GL_FLOAT,0,$o.vertices().normals().buffer());
    _gl.glEnableClientState(GL10.GL_NORMAL_ARRAY);
  }
 else {
    _gl.glDisableClientState(GL10.GL_NORMAL_ARRAY);
  }
  boolean useLighting=(_scene.lightingEnabled() && $o.hasNormals() && $o.normalsEnabled()&& $o.lightingEnabled());
  if (useLighting) {
    _gl.glEnable(GL10.GL_LIGHTING);
  }
 else {
    _gl.glDisable(GL10.GL_LIGHTING);
  }
  _gl.glGetIntegerv(GL11.GL_SHADE_MODEL,_scratchIntBuffer);
  if ($o.shadeModel().glConstant() != _scratchIntBuffer.get(0)) {
    _gl.glShadeModel($o.shadeModel().glConstant());
  }
  if ($o.hasVertexColors() && $o.vertexColorsEnabled()) {
    $o.vertices().colors().buffer().position(0);
    _gl.glColorPointer(4,GL10.GL_UNSIGNED_BYTE,0,$o.vertices().colors().buffer());
    _gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
  }
 else {
    _gl.glColor4f((float)$o.defaultColor().r / 255f,(float)$o.defaultColor().g / 255f,(float)$o.defaultColor().b / 255f,(float)$o.defaultColor().a / 255f);
    _gl.glDisableClientState(GL10.GL_COLOR_ARRAY);
  }
  _gl.glGetIntegerv(GL10.GL_COLOR_MATERIAL,_scratchIntBuffer);
  _scratchB=(_scratchIntBuffer.get(0) != 0);
  if ($o.colorMaterialEnabled() != _scratchB) {
    if ($o.colorMaterialEnabled())     _gl.glEnable(GL10.GL_COLOR_MATERIAL);
 else     _gl.glDisable(GL10.GL_COLOR_MATERIAL);
  }
  if ($o.renderType() == RenderType.POINTS) {
    if ($o.pointSmoothing())     _gl.glEnable(GL10.GL_POINT_SMOOTH);
 else     _gl.glDisable(GL10.GL_POINT_SMOOTH);
    _gl.glPointSize($o.pointSize());
  }
  if ($o.renderType() == RenderType.LINES || $o.renderType() == RenderType.LINE_STRIP || $o.renderType() == RenderType.LINE_LOOP) {
    if ($o.lineSmoothing() == true) {
      _gl.glEnable(GL10.GL_LINE_SMOOTH);
    }
 else {
      _gl.glDisable(GL10.GL_LINE_SMOOTH);
    }
    _gl.glLineWidth($o.lineWidth());
  }
  if ($o.doubleSidedEnabled()) {
    _gl.glDisable(GL10.GL_CULL_FACE);
  }
 else {
    _gl.glEnable(GL10.GL_CULL_FACE);
  }
  drawObject_textures($o);
  _gl.glPushMatrix();
  _gl.glTranslatef($o.position().x,$o.position().y,$o.position().z);
  _gl.glRotatef($o.rotation().x,1,0,0);
  _gl.glRotatef($o.rotation().y,0,1,0);
  _gl.glRotatef($o.rotation().z,0,0,1);
  _gl.glScalef($o.scale().x,$o.scale().y,$o.scale().z);
  $o.vertices().points().buffer().position(0);
  _gl.glVertexPointer(3,GL10.GL_FLOAT,0,$o.vertices().points().buffer());
  if (!$o.ignoreFaces()) {
    int pos, len;
    if (!$o.faces().renderSubsetEnabled()) {
      pos=0;
      len=$o.faces().size();
    }
 else {
      pos=$o.faces().renderSubsetStartIndex() * FacesBufferedList.PROPERTIES_PER_ELEMENT;
      len=$o.faces().renderSubsetLength();
    }
    $o.faces().buffer().position(pos);
    _gl.glDrawElements($o.renderType().glValue(),len * FacesBufferedList.PROPERTIES_PER_ELEMENT,GL10.GL_UNSIGNED_SHORT,$o.faces().buffer());
  }
 else {
    _gl.glDrawArrays($o.renderType().glValue(),0,$o.vertices().size());
  }
  if ($o instanceof Object3dContainer) {
    Object3dContainer container=(Object3dContainer)$o;
    for (int i=0; i < container.children().size(); i++) {
      Object3d o=container.children().get(i);
      drawObject(o);
    }
  }
  _gl.glPopMatrix();
}",0.983086364316719
184165,"protected void drawSetupLights(){
  for (int glIndex=0; glIndex < NUM_GLLIGHTS; glIndex++) {
    if (_scene.lights().glIndexEnabledDirty()[glIndex] == true) {
      if (_scene.lights().glIndexEnabled()[glIndex] == true) {
        _gl.glEnable(GL10.GL_LIGHT0 + glIndex);
        _scene.lights().getLightByGlIndex(glIndex).setAllDirty();
      }
 else {
        _gl.glDisable(GL10.GL_LIGHT0 + glIndex);
      }
      _scene.lights().glIndexEnabledDirty()[glIndex]=false;
    }
  }
  Light[] lights=_scene.lights().toArray();
  for (int i=0; i < lights.length; i++) {
    Light light=lights[i];
    if (light.isDirty()) {
      int glLightId=GL10.GL_LIGHT0 + _scene.lights().getGlIndexByLight(light);
      if (light.position.isDirty()) {
        light.commitPositionAndTypeBuffer();
        _gl.glLightfv(glLightId,GL10.GL_POSITION,light.positionAndTypeBuffer());
        light.position.clearDirtyFlag();
      }
      if (light.ambient.isDirty()) {
        light.ambient.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_AMBIENT,light.ambient.floatBuffer());
        light.ambient.clearDirtyFlag();
      }
      if (light.diffuse.isDirty()) {
        light.diffuse.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_DIFFUSE,light.diffuse.floatBuffer());
        light.diffuse.clearDirtyFlag();
      }
      if (light.specular.isDirty()) {
        light.specular.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_SPECULAR,light.specular.floatBuffer());
        light.specular.clearDirtyFlag();
      }
      if (light.emissive.isDirty()) {
        light.emissive.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_EMISSION,light.emissive.floatBuffer());
        light.emissive.clearDirtyFlag();
      }
      if (light.type() == LightType.DIRECTIONAL && light.direction.isDirty()) {
        light.direction.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_SPOT_DIRECTION,light.direction.floatBuffer());
        _gl.glLightf(glLightId,GL10.GL_SPOT_CUTOFF,60.0f);
        light.direction.clearDirtyFlag();
      }
      if (light.isVisibleBm().isDirty()) {
        if (light.isVisible()) {
          _gl.glEnable(glLightId);
        }
 else {
          _gl.glDisable(glLightId);
        }
        light.isVisibleBm().clearDirtyFlag();
      }
      if (light.attenuation().isDirty()) {
        _gl.glLightf(glLightId,GL10.GL_CONSTANT_ATTENUATION,light.attenuation().getX());
        _gl.glLightf(glLightId,GL10.GL_LINEAR_ATTENUATION,light.attenuation().getY());
        _gl.glLightf(glLightId,GL10.GL_QUADRATIC_ATTENUATION,light.attenuation().getZ());
      }
      light.clearDirtyFlag();
    }
  }
}","protected void drawSetupLights(){
  for (int glIndex=0; glIndex < NUM_GLLIGHTS; glIndex++) {
    if (_scene.lights().glIndexEnabledDirty()[glIndex] == true) {
      if (_scene.lights().glIndexEnabled()[glIndex] == true) {
        _gl.glEnable(GL10.GL_LIGHT0 + glIndex);
        _scene.lights().getLightByGlIndex(glIndex).setAllDirty();
      }
 else {
        _gl.glDisable(GL10.GL_LIGHT0 + glIndex);
      }
      _scene.lights().glIndexEnabledDirty()[glIndex]=false;
    }
  }
  Light[] lights=_scene.lights().toArray();
  for (int i=0; i < lights.length; i++) {
    Light light=lights[i];
    if (light.isDirty()) {
      int glLightId=GL10.GL_LIGHT0 + _scene.lights().getGlIndexByLight(light);
      if (light.position.isDirty()) {
        light.commitPositionAndTypeBuffer();
        _gl.glLightfv(glLightId,GL10.GL_POSITION,light.positionAndTypeBuffer());
        light.position.clearDirtyFlag();
      }
      if (light.ambient.isDirty()) {
        light.ambient.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_AMBIENT,light.ambient.floatBuffer());
        light.ambient.clearDirtyFlag();
      }
      if (light.diffuse.isDirty()) {
        light.diffuse.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_DIFFUSE,light.diffuse.floatBuffer());
        light.diffuse.clearDirtyFlag();
      }
      if (light.specular.isDirty()) {
        light.specular.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_SPECULAR,light.specular.floatBuffer());
        light.specular.clearDirtyFlag();
      }
      if (light.emissive.isDirty()) {
        light.emissive.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_EMISSION,light.emissive.floatBuffer());
        light.emissive.clearDirtyFlag();
      }
      if (light.type() == LightType.DIRECTIONAL && light.direction.isDirty()) {
        light.direction.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_SPOT_DIRECTION,light.direction.floatBuffer());
        _gl.glLightf(glLightId,GL10.GL_SPOT_CUTOFF,45f);
        light.direction.clearDirtyFlag();
      }
      if (light.isVisibleBm().isDirty()) {
        if (light.isVisible()) {
          _gl.glEnable(glLightId);
        }
 else {
          _gl.glDisable(glLightId);
        }
        light.isVisibleBm().clearDirtyFlag();
      }
      if (light.attenuation().isDirty()) {
        _gl.glLightf(glLightId,GL10.GL_CONSTANT_ATTENUATION,light.attenuation().getX());
        _gl.glLightf(glLightId,GL10.GL_LINEAR_ATTENUATION,light.attenuation().getY());
        _gl.glLightf(glLightId,GL10.GL_QUADRATIC_ATTENUATION,light.attenuation().getZ());
      }
      light.clearDirtyFlag();
    }
  }
}",0.9988730277986476
184166,"public Light(){
  super(null);
  ambient=new Color4Managed(128,128,128,255,this);
  diffuse=new Color4Managed(255,255,255,255,this);
  specular=new Color4Managed(0,0,0,255,this);
  emissive=new Color4Managed(0,0,0,255,this);
  position=new Number3dManaged(0f,0f,5f,this);
  direction=new Number3dManaged(0,0,-1,this);
  _attenuation=new Number3dManaged(1f,0f,0f,this);
  _isVisible=new BooleanManaged(true,this);
  type(LightType.DIRECTIONAL);
  _positionAndTypeFloatBuffer=Utils.makeFloatBuffer4(0,0,0,0);
  setDirtyFlag();
}","public Light(){
  super(null);
  ambient=new Color4Managed(128,128,128,255,this);
  diffuse=new Color4Managed(255,255,255,255,this);
  specular=new Color4Managed(0,0,0,255,this);
  emissive=new Color4Managed(0,0,0,255,this);
  position=new Number3dManaged(0f,0f,5f,this);
  direction=new Number3dManaged(0f,0f,-1f,this);
  _attenuation=new Number3dManaged(1f,0f,0f,this);
  _isVisible=new BooleanManaged(true,this);
  type(LightType.DIRECTIONAL);
  _positionAndTypeFloatBuffer=Utils.makeFloatBuffer4(0,0,0,0);
  setDirtyFlag();
}",0.9933649289099526
184167,"/** 
 * Used by Renderer
 */
public void commitToFloatBuffer(){
  this.toFloatBuffer(_fb);
}","/** 
 * Used by Renderer
 */
public void commitToFloatBuffer(){
  toFloatBuffer(_fb);
}",0.9720670391061452
184168,"/** 
 * Convenience method
 */
public void toFloatBuffer(FloatBuffer $floatBuffer){
  $floatBuffer.position(0);
  $floatBuffer.put((float)_x / 255f);
  $floatBuffer.put((float)_y / 255f);
  $floatBuffer.put((float)_z / 255f);
  $floatBuffer.position(0);
}","/** 
 * Convenience method
 */
public void toFloatBuffer(FloatBuffer $floatBuffer){
  $floatBuffer.position(0);
  $floatBuffer.put(_x);
  $floatBuffer.put(_y);
  $floatBuffer.put(_z);
  $floatBuffer.position(0);
}",0.7222222222222222
184169,"/** 
 * Color used to render object, but only when colorsEnabled is false.
 */
public Color4 defaultColor(){
  return _defaultColor;
}","public void defaultColor(Color4 color){
  _defaultColor=color;
}",0.4343434343434343
184170,"@Override public Object3d getChildAt(int $index){
  return _children.get($index);
}","public Object3d getChildAt(int $index){
  return _children.get($index);
}",0.935897435897436
184171,"/** 
 * TODO: Use better lookup 
 */
@Override public Object3d getChildByName(String $name){
  for (int i=0; i < _children.size(); i++) {
    if (_children.get(i).name().equals($name))     return _children.get(i);
  }
  return null;
}","/** 
 * TODO: Use better lookup 
 */
public Object3d getChildByName(String $name){
  for (int i=0; i < _children.size(); i++) {
    if (_children.get(i).name().equals($name))     return _children.get(i);
  }
  return null;
}",0.9781659388646288
184172,"@Override public void addChildAt(Object3d $o,int $index){
  _children.add($index,$o);
  $o.parent(this);
  $o.scene(this.scene());
}","public void addChildAt(Object3d $o,int $index){
  _children.add($index,$o);
  $o.parent(this);
  $o.scene(this.scene());
}",0.9606299212598424
184173,"@Override public Object3d removeChildAt(int $index){
  Object3d o=_children.remove($index);
  if (o != null) {
    o.parent(null);
    o.scene(null);
  }
  return o;
}","public Object3d removeChildAt(int $index){
  Object3d o=_children.remove($index);
  if (o != null) {
    o.parent(null);
    o.scene(null);
  }
  return o;
}",0.9691358024691358
184174,"@Override public boolean removeChild(Object3d $o){
  boolean b=_children.remove($o);
  if (b) {
    $o.parent(null);
    $o.scene(null);
  }
  return b;
}","public boolean removeChild(Object3d $o){
  boolean b=_children.remove($o);
  if (b) {
    $o.parent(null);
    $o.scene(null);
  }
  return b;
}",0.9664429530201344
184175,"@Override public int numChildren(){
  return _children.size();
}","public int numChildren(){
  return _children.size();
}",0.9152542372881356
184176,"@Override public void addChild(Object3d $o){
  _children.add($o);
  $o.parent(this);
  $o.scene(this.scene());
}","public void addChild(Object3d $o){
  _children.add($o);
  $o.parent(this);
  $o.scene(this.scene());
}",0.9532710280373832
184177,"@Override public int getChildIndexOf(Object3d $o){
  return _children.indexOf($o);
}","public int getChildIndexOf(Object3d $o){
  return _children.indexOf($o);
}",0.9367088607594936
184178,"protected void drawObject(Object3d $o){
  if ($o.isVisible() == false)   return;
  if ($o.hasNormals() && $o.normalsEnabled()) {
    $o.vertices().normals().buffer().position(0);
    _gl.glNormalPointer(GL10.GL_FLOAT,0,$o.vertices().normals().buffer());
    _gl.glEnableClientState(GL10.GL_NORMAL_ARRAY);
  }
 else {
    _gl.glDisableClientState(GL10.GL_NORMAL_ARRAY);
  }
  boolean useLighting=(_scene.lightingEnabled() && $o.hasNormals() && $o.normalsEnabled());
  if (useLighting) {
    _gl.glEnable(GL10.GL_LIGHTING);
  }
 else {
    _gl.glDisable(GL10.GL_LIGHTING);
  }
  _gl.glGetIntegerv(GL11.GL_SHADE_MODEL,_scratchIntBuffer);
  if ($o.shadeModel().glConstant() != _scratchIntBuffer.get(0)) {
    _gl.glShadeModel($o.shadeModel().glConstant());
  }
  if ($o.hasVertexColors() && $o.vertexColorsEnabled()) {
    $o.vertices().colors().buffer().position(0);
    _gl.glColorPointer(4,GL10.GL_UNSIGNED_BYTE,0,$o.vertices().colors().buffer());
    _gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
  }
 else {
    _gl.glColor4f((float)$o.defaultColor().r / 255f,(float)$o.defaultColor().g / 255f,(float)$o.defaultColor().b / 255f,(float)$o.defaultColor().a / 255f);
    _gl.glDisableClientState(GL10.GL_COLOR_ARRAY);
  }
  _gl.glGetIntegerv(GL10.GL_COLOR_MATERIAL,_scratchIntBuffer);
  _scratchB=(_scratchIntBuffer.get(0) != 0);
  if ($o.colorMaterialEnabled() != _scratchB) {
    if ($o.colorMaterialEnabled())     _gl.glEnable(GL10.GL_COLOR_MATERIAL);
 else     _gl.glDisable(GL10.GL_COLOR_MATERIAL);
  }
  if ($o.renderType() == RenderType.POINTS) {
    if ($o.pointSmoothing())     _gl.glEnable(GL10.GL_POINT_SMOOTH);
 else     _gl.glDisable(GL10.GL_POINT_SMOOTH);
    _gl.glPointSize($o.pointSize());
  }
  if ($o.renderType() == RenderType.LINES) {
    if ($o.lineSmoothing() == true) {
      _gl.glEnable(GL10.GL_LINE_SMOOTH);
    }
 else {
      _gl.glDisable(GL10.GL_LINE_SMOOTH);
    }
    _gl.glLineWidth($o.lineWidth());
  }
  if ($o.doubleSidedEnabled()) {
    _gl.glDisable(GL10.GL_CULL_FACE);
  }
 else {
    _gl.glEnable(GL10.GL_CULL_FACE);
  }
  drawObject_textures($o);
  _gl.glPushMatrix();
  _gl.glTranslatef($o.position().x,$o.position().y,$o.position().z);
  _gl.glRotatef($o.rotation().x,1,0,0);
  _gl.glRotatef($o.rotation().y,0,1,0);
  _gl.glRotatef($o.rotation().z,0,0,1);
  _gl.glScalef($o.scale().x,$o.scale().y,$o.scale().z);
  $o.vertices().points().buffer().position(0);
  _gl.glVertexPointer(3,GL10.GL_FLOAT,0,$o.vertices().points().buffer());
  if (!$o.ignoreFaces()) {
    int pos, len;
    if (!$o.faces().renderSubsetEnabled()) {
      pos=0;
      len=$o.faces().size();
    }
 else {
      pos=$o.faces().renderSubsetStartIndex() * FacesBufferedList.PROPERTIES_PER_ELEMENT;
      len=$o.faces().renderSubsetLength();
    }
    $o.faces().buffer().position(pos);
    _gl.glDrawElements($o.renderTypeInt(),len * FacesBufferedList.PROPERTIES_PER_ELEMENT,GL10.GL_UNSIGNED_SHORT,$o.faces().buffer());
  }
 else {
    _gl.glDrawArrays($o.renderTypeInt(),0,$o.vertices().size());
  }
  if ($o instanceof Object3dContainer) {
    Object3dContainer container=(Object3dContainer)$o;
    for (int i=0; i < container.children().size(); i++) {
      Object3d o=container.children().get(i);
      drawObject(o);
    }
  }
  _gl.glPopMatrix();
}","protected void drawObject(Object3d $o){
  if ($o.isVisible() == false)   return;
  if ($o.hasNormals() && $o.normalsEnabled()) {
    $o.vertices().normals().buffer().position(0);
    _gl.glNormalPointer(GL10.GL_FLOAT,0,$o.vertices().normals().buffer());
    _gl.glEnableClientState(GL10.GL_NORMAL_ARRAY);
  }
 else {
    _gl.glDisableClientState(GL10.GL_NORMAL_ARRAY);
  }
  boolean useLighting=(_scene.lightingEnabled() && $o.hasNormals() && $o.normalsEnabled()&& $o.lightingEnabled());
  if (useLighting) {
    _gl.glEnable(GL10.GL_LIGHTING);
  }
 else {
    _gl.glDisable(GL10.GL_LIGHTING);
  }
  _gl.glGetIntegerv(GL11.GL_SHADE_MODEL,_scratchIntBuffer);
  if ($o.shadeModel().glConstant() != _scratchIntBuffer.get(0)) {
    _gl.glShadeModel($o.shadeModel().glConstant());
  }
  if ($o.hasVertexColors() && $o.vertexColorsEnabled()) {
    $o.vertices().colors().buffer().position(0);
    _gl.glColorPointer(4,GL10.GL_UNSIGNED_BYTE,0,$o.vertices().colors().buffer());
    _gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
  }
 else {
    _gl.glColor4f((float)$o.defaultColor().r / 255f,(float)$o.defaultColor().g / 255f,(float)$o.defaultColor().b / 255f,(float)$o.defaultColor().a / 255f);
    _gl.glDisableClientState(GL10.GL_COLOR_ARRAY);
  }
  _gl.glGetIntegerv(GL10.GL_COLOR_MATERIAL,_scratchIntBuffer);
  _scratchB=(_scratchIntBuffer.get(0) != 0);
  if ($o.colorMaterialEnabled() != _scratchB) {
    if ($o.colorMaterialEnabled())     _gl.glEnable(GL10.GL_COLOR_MATERIAL);
 else     _gl.glDisable(GL10.GL_COLOR_MATERIAL);
  }
  if ($o.renderType() == RenderType.POINTS) {
    if ($o.pointSmoothing())     _gl.glEnable(GL10.GL_POINT_SMOOTH);
 else     _gl.glDisable(GL10.GL_POINT_SMOOTH);
    _gl.glPointSize($o.pointSize());
  }
  if ($o.renderType() == RenderType.LINES) {
    if ($o.lineSmoothing() == true) {
      _gl.glEnable(GL10.GL_LINE_SMOOTH);
    }
 else {
      _gl.glDisable(GL10.GL_LINE_SMOOTH);
    }
    _gl.glLineWidth($o.lineWidth());
  }
  if ($o.doubleSidedEnabled()) {
    _gl.glDisable(GL10.GL_CULL_FACE);
  }
 else {
    _gl.glEnable(GL10.GL_CULL_FACE);
  }
  drawObject_textures($o);
  _gl.glPushMatrix();
  _gl.glTranslatef($o.position().x,$o.position().y,$o.position().z);
  _gl.glRotatef($o.rotation().x,1,0,0);
  _gl.glRotatef($o.rotation().y,0,1,0);
  _gl.glRotatef($o.rotation().z,0,0,1);
  _gl.glScalef($o.scale().x,$o.scale().y,$o.scale().z);
  $o.vertices().points().buffer().position(0);
  _gl.glVertexPointer(3,GL10.GL_FLOAT,0,$o.vertices().points().buffer());
  if (!$o.ignoreFaces()) {
    int pos, len;
    if (!$o.faces().renderSubsetEnabled()) {
      pos=0;
      len=$o.faces().size();
    }
 else {
      pos=$o.faces().renderSubsetStartIndex() * FacesBufferedList.PROPERTIES_PER_ELEMENT;
      len=$o.faces().renderSubsetLength();
    }
    $o.faces().buffer().position(pos);
    _gl.glDrawElements($o.renderTypeInt(),len * FacesBufferedList.PROPERTIES_PER_ELEMENT,GL10.GL_UNSIGNED_SHORT,$o.faces().buffer());
  }
 else {
    _gl.glDrawArrays($o.renderTypeInt(),0,$o.vertices().size());
  }
  if ($o instanceof Object3dContainer) {
    Object3dContainer container=(Object3dContainer)$o;
    for (int i=0; i < container.children().size(); i++) {
      Object3d o=container.children().get(i);
      drawObject(o);
    }
  }
  _gl.glPopMatrix();
}",0.9964922983071528
184179,"/** 
 * TODO: Use better lookup 
 */
@Override public Object3d getChildByName(String $name){
  for (int i=0; i < _children.size(); i++) {
    if (_children.get(0).name() == $name)     return _children.get(0);
  }
  return null;
}","/** 
 * TODO: Use better lookup 
 */
public Object3d getChildByName(String $name){
  for (int i=0; i < _children.size(); i++) {
    if (_children.get(0).name() == $name)     return _children.get(0);
  }
  return null;
}",0.9776785714285714
184180,"/** 
 * Removes Object3d from Scene. Returns false if unsuccessful
 */
@Override public boolean removeChild(Object3d $o){
  $o.parent(null);
  $o.scene(null);
  return _children.remove($o);
}","/** 
 * Removes Object3d from Scene. Returns false if unsuccessful
 */
public boolean removeChild(Object3d $o){
  $o.parent(null);
  $o.scene(null);
  return _children.remove($o);
}",0.9731182795698924
184181,"@Override public void onDirty(){
}","public void onDirty(){
}",0.8275862068965517
184182,"@Override public int getChildIndexOf(Object3d $o){
  return _children.indexOf($o);
}","public int getChildIndexOf(Object3d $o){
  return _children.indexOf($o);
}",0.9367088607594936
184183,"@Override public Object3d getChildAt(int $index){
  return _children.get($index);
}","public Object3d getChildAt(int $index){
  return _children.get($index);
}",0.935897435897436
184184,"@Override public void addChildAt(Object3d $o,int $index){
  if (_children.contains($o))   return;
  _children.add($index,$o);
}","public void addChildAt(Object3d $o,int $index){
  if (_children.contains($o))   return;
  _children.add($index,$o);
}",0.9590163934426228
184185,"@Override public Object3d removeChildAt(int $index){
  Object3d o=_children.remove($index);
  if (o != null) {
    o.parent(null);
    o.scene(null);
  }
  return o;
}","public Object3d removeChildAt(int $index){
  Object3d o=_children.remove($index);
  if (o != null) {
    o.parent(null);
    o.scene(null);
  }
  return o;
}",0.9691358024691358
184186,"@Override public int numChildren(){
  return _children.size();
}","public int numChildren(){
  return _children.size();
}",0.9152542372881356
184187,"/** 
 * Adds Object3d to Scene. Object3d's must be added to Scene in order to be rendered Returns always true. 
 */
@Override public void addChild(Object3d $o){
  if (_children.contains($o))   return;
  _children.add($o);
  $o.parent(this);
  $o.scene(this);
}","/** 
 * Adds Object3d to Scene. Object3d's must be added to Scene in order to be rendered Returns always true. 
 */
public void addChild(Object3d $o){
  if (_children.contains($o))   return;
  _children.add($o);
  $o.parent(this);
  $o.scene(this);
}",0.5882352941176471
184188,"public Rectangle(float $width,float $height,int $segsW,int $segsH,long $colorRgba){
  super(4 * $segsW * $segsH,2 * $segsW * $segsH);
  int row, col;
  float w=$width / $segsW;
  float h=$height / $segsH;
  float width5=$width / 2f;
  float height5=$height / 2f;
  Color4 c=new Color4();
  c.setAll($colorRgba);
  for (row=0; row <= $segsH; row++) {
    for (col=0; col <= $segsW; col++) {
      this.vertices().addVertex((float)col * w - width5,(float)row * h - height5,0f,(float)col / (float)$segsW,1 - (float)row / (float)$segsH,0,0,1f,c.r,c.g,c.b,c.a);
    }
  }
  int colspan=$segsW + 1;
  for (row=1; row <= $segsH; row++) {
    for (col=1; col <= $segsW; col++) {
      int lr=row * colspan + col;
      int ll=lr - 1;
      int ur=lr - colspan;
      int ul=ur - 1;
      Utils.addQuad(this,ul,ur,lr,ll);
    }
  }
}","public Rectangle(float $width,float $height,int $segsW,int $segsH,Color4 color){
  super(4 * $segsW * $segsH,2 * $segsW * $segsH);
  int row, col;
  float w=$width / $segsW;
  float h=$height / $segsH;
  float width5=$width / 2f;
  float height5=$height / 2f;
  for (row=0; row <= $segsH; row++) {
    for (col=0; col <= $segsW; col++) {
      this.vertices().addVertex((float)col * w - width5,(float)row * h - height5,0f,(float)col / (float)$segsW,1 - (float)row / (float)$segsH,0,0,1f,color.r,color.g,color.b,color.a);
    }
  }
  int colspan=$segsW + 1;
  for (row=1; row <= $segsH; row++) {
    for (col=1; col <= $segsW; col++) {
      int lr=row * colspan + col;
      int ll=lr - 1;
      int ur=lr - colspan;
      int ul=ur - 1;
      Utils.addQuad(this,ul,ur,lr,ll);
    }
  }
}",0.9429280397022332
184189,"/** 
 * Override this in the concrete parser
 */
@Override public void parse(){
}","/** 
 * Override this in the concrete parser
 */
public void parse(){
}",0.9342105263157896
184190,"/** 
 * Override this in the concrete parser
 */
@Override public Object3dContainer getParsedObject(){
  return null;
}","/** 
 * Override this in the concrete parser
 */
public Object3dContainer getParsedObject(){
  return null;
}",0.956140350877193
184191,"/** 
 * Override this in the concrete parser if applicable 
 */
@Override public AnimationObject3d getParsedAnimationObject(){
  return null;
}","/** 
 * Override this in the concrete parser if applicable 
 */
public AnimationObject3d getParsedAnimationObject(){
  return null;
}",0.9637681159420288
184192,"/** 
 * Clear object for garbage collection.
 */
public void clear(){
  this.vertices().points().clear();
  this.vertices().uvs().clear();
  this.vertices().normals().clear();
  this.vertices().colors().clear();
  _textures.clear();
  if (this.parent() != null)   this.parent().removeChild(this);
}","/** 
 * Clear object for garbage collection.
 */
public void clear(){
  this.vertices().points().clear();
  this.vertices().uvs().clear();
  this.vertices().normals().clear();
  if (this.vertices().colors() != null)   this.vertices().colors().clear();
  _textures.clear();
  if (this.parent() != null)   this.parent().removeChild(this);
}",0.7389937106918238
184193,"private void getFrames(BufferedInputStream stream,byte[] bytes) throws IOException {
  ByteArrayInputStream ba=new ByteArrayInputStream(bytes,header.offsetFrames - 68,bytes.length - header.offsetFrames);
  LittleEndianDataInputStream is=new LittleEndianDataInputStream(ba);
  ArrayList<Number3d> firstFrameVerts=new ArrayList<Number3d>();
  for (int i=0; i < header.numFrames; i++) {
    float scaleX=is.readFloat();
    float scaleY=is.readFloat();
    float scaleZ=is.readFloat();
    float translateX=is.readFloat();
    float translateY=is.readFloat();
    float translateZ=is.readFloat();
    String name=is.readString(16);
    name=name.subSequence(0,name.lastIndexOf(""String_Node_Str"")).toString();
    Log.d(Min3d.TAG,""String_Node_Str"" + name);
    float vertices[]=new float[header.numVerts * 3];
    int index=0;
    for (int j=0; j < header.numVerts; j++) {
      vertices[index++]=scaleX * is.readUnsignedByte() + translateX;
      vertices[index++]=scaleY * is.readUnsignedByte() + translateY;
      vertices[index++]=scaleZ * is.readUnsignedByte() + translateZ;
      int normalIndex=is.readUnsignedByte();
      if (i == 0)       co.vertices.add(new Number3d(vertices[index - 3],vertices[index - 2],vertices[index - 1]));
    }
    frames[i]=new KeyFrame(name,vertices);
  }
}","private void getFrames(BufferedInputStream stream,byte[] bytes) throws IOException {
  ByteArrayInputStream ba=new ByteArrayInputStream(bytes,header.offsetFrames - 68,bytes.length - header.offsetFrames);
  LittleEndianDataInputStream is=new LittleEndianDataInputStream(ba);
  ArrayList<Number3d> firstFrameVerts=new ArrayList<Number3d>();
  for (int i=0; i < header.numFrames; i++) {
    float scaleX=is.readFloat();
    float scaleY=is.readFloat();
    float scaleZ=is.readFloat();
    float translateX=is.readFloat();
    float translateY=is.readFloat();
    float translateZ=is.readFloat();
    String name=is.readString(16);
    if (name.indexOf(""String_Node_Str"") > 0)     name=name.subSequence(0,name.lastIndexOf(""String_Node_Str"")).toString();
 else     name=name.substring(0,6).replaceAll(""String_Node_Str"",""String_Node_Str"");
    Log.d(Min3d.TAG,""String_Node_Str"" + name);
    float vertices[]=new float[header.numVerts * 3];
    int index=0;
    for (int j=0; j < header.numVerts; j++) {
      vertices[index++]=scaleX * is.readUnsignedByte() + translateX;
      vertices[index++]=scaleY * is.readUnsignedByte() + translateY;
      vertices[index++]=scaleZ * is.readUnsignedByte() + translateZ;
      int normalIndex=is.readUnsignedByte();
      if (i == 0)       co.vertices.add(new Number3d(vertices[index - 3],vertices[index - 2],vertices[index - 1]));
    }
    frames[i]=new KeyFrame(name,vertices);
  }
}",0.9524160826263371
184194,"/** 
 * Generates a new texture atlas
 */
public void generate(){
  Collections.sort(bitmaps,new BitmapHeightComparer());
  if (bitmaps.size() == 0)   return;
  BitmapAsset largestBitmap=bitmaps.get(0);
  int totalWidth=0;
  int numBitmaps=bitmaps.size();
  int uOffset=0;
  int vOffset=0;
  for (int i=0; i < numBitmaps; i++) {
    if (bitmaps.get(i).useForAtlasDimensions)     totalWidth+=bitmaps.get(i).bitmap.getWidth();
  }
  atlas=Bitmap.createBitmap(totalWidth,largestBitmap.bitmap.getHeight(),Config.ARGB_8888);
  for (int i=0; i < numBitmaps; i++) {
    BitmapAsset ba=bitmaps.get(i);
    BitmapAsset existingBA=getBitmapAssetByResourceID(ba.resourceID);
    if (ba.useForAtlasDimensions) {
      Bitmap b=ba.bitmap;
      int w=b.getWidth();
      int h=b.getHeight();
      int[] pixels=new int[w * h];
      b.getPixels(pixels,0,w,0,0,w,h);
      atlas.setPixels(pixels,0,w,uOffset,vOffset,w,h);
      ba.uOffset=(float)uOffset / totalWidth;
      ba.vOffset=0;
      ba.uScale=(float)w / (float)totalWidth;
      ba.vScale=(float)h / (float)largestBitmap.bitmap.getHeight();
      uOffset+=w;
      b.recycle();
    }
 else {
      ba.uOffset=existingBA.uOffset;
      ba.vOffset=existingBA.vOffset;
      ba.uScale=existingBA.uScale;
      ba.vScale=existingBA.vScale;
    }
  }
}","/** 
 * Generates a new texture atlas
 */
public void generate(){
  Collections.sort(bitmaps,new BitmapHeightComparer());
  if (bitmaps.size() == 0)   return;
  BitmapAsset largestBitmap=bitmaps.get(0);
  int totalWidth=0;
  int numBitmaps=bitmaps.size();
  int uOffset=0;
  int vOffset=0;
  for (int i=0; i < numBitmaps; i++) {
    if (bitmaps.get(i).useForAtlasDimensions)     totalWidth+=bitmaps.get(i).bitmap.getWidth();
  }
  atlas=Bitmap.createBitmap(totalWidth,largestBitmap.bitmap.getHeight(),Config.ARGB_8888);
  for (int i=0; i < numBitmaps; i++) {
    BitmapAsset ba=bitmaps.get(i);
    BitmapAsset existingBA=getBitmapAssetByResourceID(ba.resourceID);
    if (ba.useForAtlasDimensions) {
      Bitmap b=ba.bitmap;
      int w=b.getWidth();
      int h=b.getHeight();
      int[] pixels=new int[w * h];
      b.getPixels(pixels,0,w,0,0,w,h);
      atlas.setPixels(pixels,0,w,uOffset,vOffset,w,h);
      ba.uOffset=(float)uOffset / totalWidth;
      ba.vOffset=0;
      ba.uScale=(float)w / (float)totalWidth;
      ba.vScale=(float)h / (float)largestBitmap.bitmap.getHeight();
      uOffset+=w;
      b.recycle();
    }
 else {
      ba.uOffset=existingBA.uOffset;
      ba.vOffset=existingBA.vOffset;
      ba.uScale=existingBA.uScale;
      ba.vScale=existingBA.vScale;
    }
  }
  setId(Shared.textureManager().getNewAtlasId());
}",0.9810462471569372
184195,"@Override public AnimationObject3d getParsedAnimationObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Bitmap texture=null;
  AnimationObject3d animObj;
  if (textureAtlas.hasBitmaps()) {
    textureAtlas.generate();
    texture=textureAtlas.getBitmap();
    Shared.textureManager().addTextureId(texture,""String_Node_Str"",generateMipMap);
  }
  Log.d(Min3d.TAG,""String_Node_Str"" + co.name);
  animObj=co.getParsedObject(textureAtlas,frames);
  if (textureAtlas.hasBitmaps()) {
    if (texture != null)     texture.recycle();
  }
  Log.d(Min3d.TAG,""String_Node_Str"");
  super.cleanup();
  return animObj;
}","@Override public AnimationObject3d getParsedAnimationObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Bitmap texture=null;
  AnimationObject3d animObj;
  if (textureAtlas.hasBitmaps()) {
    textureAtlas.generate();
    texture=textureAtlas.getBitmap();
    Shared.textureManager().addTextureId(texture,textureAtlas.getId(),generateMipMap);
  }
  Log.d(Min3d.TAG,""String_Node_Str"" + co.name);
  animObj=co.getParsedObject(textureAtlas,frames);
  if (textureAtlas.hasBitmaps()) {
    if (texture != null)     texture.recycle();
  }
  Log.d(Min3d.TAG,""String_Node_Str"");
  super.cleanup();
  return animObj;
}",0.9694971145919208
184196,"public Object3dContainer getParsedObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Object3dContainer obj=new Object3dContainer(0,0);
  int numObjects=parseObjects.size();
  Bitmap texture=null;
  if (textureAtlas.hasBitmaps()) {
    textureAtlas.generate();
    texture=textureAtlas.getBitmap();
    Shared.textureManager().addTextureId(texture,""String_Node_Str"",generateMipMap);
  }
  for (int i=0; i < numObjects; i++) {
    ParseObjectData o=parseObjects.get(i);
    Log.d(Min3d.TAG,""String_Node_Str"" + o.name);
    obj.addChild(o.getParsedObject(textureAtlas));
  }
  if (textureAtlas.hasBitmaps()) {
    if (texture != null)     texture.recycle();
  }
  Log.d(Min3d.TAG,""String_Node_Str"");
  super.cleanup();
  return obj;
}","public Object3dContainer getParsedObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Object3dContainer obj=new Object3dContainer(0,0);
  int numObjects=parseObjects.size();
  Bitmap texture=null;
  if (textureAtlas.hasBitmaps()) {
    textureAtlas.generate();
    texture=textureAtlas.getBitmap();
    Shared.textureManager().addTextureId(texture,textureAtlas.getId(),generateMipMap);
  }
  for (int i=0; i < numObjects; i++) {
    ParseObjectData o=parseObjects.get(i);
    Log.d(Min3d.TAG,""String_Node_Str"" + o.name);
    obj.addChild(o.getParsedObject(textureAtlas));
  }
  if (textureAtlas.hasBitmaps()) {
    if (texture != null)     texture.recycle();
  }
  Log.d(Min3d.TAG,""String_Node_Str"");
  super.cleanup();
  return obj;
}",0.9747095010252904
184197,"public Object3dContainer getParsedObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Object3dContainer obj=new Object3dContainer(0,0);
  int numObjects=parseObjects.size();
  Bitmap texture=null;
  if (textureAtlas.hasBitmaps()) {
    textureAtlas.generate();
    texture=textureAtlas.getBitmap();
    Shared.textureManager().addTextureId(texture,""String_Node_Str"",generateMipMap);
  }
  for (int i=0; i < numObjects; i++) {
    ParseObjectData o=parseObjects.get(i);
    Log.d(Min3d.TAG,""String_Node_Str"" + o.name);
    obj.addChild(o.getParsedObject(textureAtlas));
  }
  if (textureAtlas.hasBitmaps()) {
    if (texture != null)     texture.recycle();
  }
  Log.d(Min3d.TAG,""String_Node_Str"");
  cleanup();
  return obj;
}","public Object3dContainer getParsedObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Object3dContainer obj=new Object3dContainer(0,0);
  int numObjects=parseObjects.size();
  Bitmap texture=null;
  if (textureAtlas.hasBitmaps()) {
    textureAtlas.generate();
    texture=textureAtlas.getBitmap();
    Shared.textureManager().addTextureId(texture,textureAtlas.getId(),generateMipMap);
  }
  for (int i=0; i < numObjects; i++) {
    ParseObjectData o=parseObjects.get(i);
    Log.d(Min3d.TAG,""String_Node_Str"" + o.name);
    obj.addChild(o.getParsedObject(textureAtlas));
  }
  if (textureAtlas.hasBitmaps()) {
    if (texture != null)     texture.recycle();
  }
  Log.d(Min3d.TAG,""String_Node_Str"");
  cleanup();
  return obj;
}",0.974500344589938
184198,"private void parseObject(Object3d obj,TextureAtlas textureAtlas){
  int numFaces=faces.size();
  int faceIndex=0;
  boolean hasBitmaps=textureAtlas.hasBitmaps();
  for (int i=0; i < numFaces; i++) {
    ParseObjectFace face=faces.get(i);
    BitmapAsset ba=textureAtlas.getBitmapAssetByName(face.materialKey);
    for (int j=0; j < face.faceLength; j++) {
      Number3d newVertex=vertices.get(face.v[j]);
      Uv newUv=face.hasuv ? texCoords.get(face.uv[j]).clone() : new Uv();
      Number3d newNormal=face.hasn ? normals.get(face.n[j]) : new Number3d();
      Color4 newColor=new Color4(255,255,0,255);
      if (hasBitmaps) {
        newUv.u=ba.uOffset + newUv.u * ba.uScale;
        newUv.v=ba.vOffset + ((newUv.v + 1) * ba.vScale) - 1;
      }
      obj.vertices().addVertex(newVertex,newUv,newNormal,newColor);
    }
    if (face.faceLength == 3) {
      obj.faces().add(new Face(faceIndex,faceIndex + 1,faceIndex + 2));
    }
 else     if (face.faceLength == 4) {
      obj.faces().add(new Face(faceIndex,faceIndex + 1,faceIndex + 3));
      obj.faces().add(new Face(faceIndex + 1,faceIndex + 2,faceIndex + 3));
    }
    faceIndex+=face.faceLength;
  }
  if (hasBitmaps) {
    obj.textures().addById(""String_Node_Str"");
  }
  cleanup();
}","private void parseObject(Object3d obj,TextureAtlas textureAtlas){
  int numFaces=faces.size();
  int faceIndex=0;
  boolean hasBitmaps=textureAtlas.hasBitmaps();
  for (int i=0; i < numFaces; i++) {
    ParseObjectFace face=faces.get(i);
    BitmapAsset ba=textureAtlas.getBitmapAssetByName(face.materialKey);
    for (int j=0; j < face.faceLength; j++) {
      Number3d newVertex=vertices.get(face.v[j]);
      Uv newUv=face.hasuv ? texCoords.get(face.uv[j]).clone() : new Uv();
      Number3d newNormal=face.hasn ? normals.get(face.n[j]) : new Number3d();
      Color4 newColor=new Color4(255,255,0,255);
      if (hasBitmaps) {
        newUv.u=ba.uOffset + newUv.u * ba.uScale;
        newUv.v=ba.vOffset + ((newUv.v + 1) * ba.vScale) - 1;
      }
      obj.vertices().addVertex(newVertex,newUv,newNormal,newColor);
    }
    if (face.faceLength == 3) {
      obj.faces().add(new Face(faceIndex,faceIndex + 1,faceIndex + 2));
    }
 else     if (face.faceLength == 4) {
      obj.faces().add(new Face(faceIndex,faceIndex + 1,faceIndex + 3));
      obj.faces().add(new Face(faceIndex + 1,faceIndex + 2,faceIndex + 3));
    }
    faceIndex+=face.faceLength;
  }
  if (hasBitmaps) {
    obj.textures().addById(textureAtlas.getId());
  }
  cleanup();
}",0.9859943977591036
184199,"private void build(){
  color=new Color4();
  faces=new Rectangle[6];
  Rectangle north=new Rectangle(size,size,quality,quality,color);
  Rectangle east=new Rectangle(size,size,quality,quality,color);
  Rectangle south=new Rectangle(size,size,quality,quality,color);
  Rectangle west=new Rectangle(size,size,quality,quality,color);
  Rectangle up=new Rectangle(size,size,quality,quality,color);
  Rectangle down=new Rectangle(size,size,quality,quality,color);
  north.position().z=halfSize;
  north.lightingEnabled(false);
  east.rotation().y=-90;
  east.position().x=-halfSize;
  east.lightingEnabled(false);
  south.rotation().y=180;
  south.position().z=-halfSize;
  south.lightingEnabled(false);
  west.rotation().y=90;
  west.position().x=halfSize;
  west.lightingEnabled(false);
  up.rotation().x=-90;
  up.position().y=halfSize;
  up.lightingEnabled(false);
  down.rotation().x=90;
  down.position().y=-halfSize;
  down.lightingEnabled(false);
  faces[Face.North.ordinal()]=north;
  faces[Face.East.ordinal()]=east;
  faces[Face.South.ordinal()]=south;
  faces[Face.West.ordinal()]=west;
  faces[Face.Up.ordinal()]=up;
  faces[Face.Down.ordinal()]=down;
  addChild(north);
  addChild(east);
  addChild(south);
  addChild(west);
  addChild(up);
  addChild(down);
}","private void build(){
  color=new Color4();
  faces=new Rectangle[6];
  Rectangle north=new Rectangle(size,size,quality,quality,color);
  Rectangle east=new Rectangle(size,size,quality,quality,color);
  Rectangle south=new Rectangle(size,size,quality,quality,color);
  Rectangle west=new Rectangle(size,size,quality,quality,color);
  Rectangle up=new Rectangle(size,size,quality,quality,color);
  Rectangle down=new Rectangle(size,size,quality,quality,color);
  north.position().z=halfSize;
  north.lightingEnabled(false);
  east.rotation().y=-90;
  east.position().x=halfSize;
  east.doubleSidedEnabled(true);
  east.lightingEnabled(false);
  south.rotation().y=180;
  south.position().z=-halfSize;
  south.lightingEnabled(false);
  west.rotation().y=90;
  west.position().x=-halfSize;
  west.doubleSidedEnabled(true);
  west.lightingEnabled(false);
  up.rotation().x=90;
  up.position().y=halfSize;
  up.doubleSidedEnabled(true);
  up.lightingEnabled(false);
  down.rotation().x=-90;
  down.position().y=-halfSize;
  down.doubleSidedEnabled(true);
  down.lightingEnabled(false);
  faces[Face.North.ordinal()]=north;
  faces[Face.East.ordinal()]=east;
  faces[Face.South.ordinal()]=south;
  faces[Face.West.ordinal()]=west;
  faces[Face.Up.ordinal()]=up;
  faces[Face.Down.ordinal()]=down;
  addChild(north);
  addChild(east);
  addChild(south);
  addChild(west);
  addChild(up);
  addChild(down);
}",0.8794007490636704
184200,"/** 
 * Generates a new texture atlas
 */
public void generate(){
  Collections.sort(bitmaps,new BitmapHeightComparer());
  BitmapAsset largestBitmap=bitmaps.get(0);
  int totalWidth=0;
  int numBitmaps=bitmaps.size();
  for (int i=0; i < numBitmaps; i++) {
    totalWidth+=bitmaps.get(i).bitmap.getWidth();
  }
  atlas=Bitmap.createBitmap(totalWidth,largestBitmap.bitmap.getHeight(),Config.ARGB_8888);
  int uOffset=0;
  int vOffset=0;
  for (int i=0; i < numBitmaps; i++) {
    BitmapAsset ba=bitmaps.get(i);
    Bitmap b=ba.bitmap;
    int w=b.getWidth();
    int h=b.getHeight();
    int[] pixels=new int[w * h];
    b.getPixels(pixels,0,w,0,0,w,h);
    atlas.setPixels(pixels,0,w,uOffset,vOffset,w,h);
    ba.uOffset=(float)uOffset / totalWidth;
    ba.vOffset=0;
    ba.uScale=(float)w / (float)totalWidth;
    ba.vScale=(float)h / (float)largestBitmap.bitmap.getHeight();
    uOffset+=w;
    b.recycle();
  }
}","/** 
 * Generates a new texture atlas
 */
public void generate(){
  Collections.sort(bitmaps,new BitmapHeightComparer());
  if (bitmaps.size() == 0)   return;
  BitmapAsset largestBitmap=bitmaps.get(0);
  int totalWidth=0;
  int numBitmaps=bitmaps.size();
  for (int i=0; i < numBitmaps; i++) {
    totalWidth+=bitmaps.get(i).bitmap.getWidth();
  }
  atlas=Bitmap.createBitmap(totalWidth,largestBitmap.bitmap.getHeight(),Config.ARGB_8888);
  int uOffset=0;
  int vOffset=0;
  for (int i=0; i < numBitmaps; i++) {
    BitmapAsset ba=bitmaps.get(i);
    Bitmap b=ba.bitmap;
    int w=b.getWidth();
    int h=b.getHeight();
    int[] pixels=new int[w * h];
    b.getPixels(pixels,0,w,0,0,w,h);
    atlas.setPixels(pixels,0,w,uOffset,vOffset,w,h);
    ba.uOffset=(float)uOffset / totalWidth;
    ba.vOffset=0;
    ba.uScale=(float)w / (float)totalWidth;
    ba.vScale=(float)h / (float)largestBitmap.bitmap.getHeight();
    uOffset+=w;
    b.recycle();
  }
}",0.980224478888295
184201,"public Object3dContainer getParsedObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Object3dContainer obj=new Object3dContainer(0,0);
  int numObjects=parseObjects.size();
  textureAtlas.generate();
  Bitmap texture=textureAtlas.getBitmap();
  Shared.textureManager().addTextureId(texture,""String_Node_Str"");
  for (int i=0; i < numObjects; i++) {
    ParseObjectData o=parseObjects.get(i);
    Log.d(Min3d.TAG,""String_Node_Str"" + o.name);
    obj.addChild(o.getParsedObject(textureAtlas));
  }
  texture.recycle();
  textureAtlas.cleanup();
  Log.d(Min3d.TAG,""String_Node_Str"");
  cleanup();
  return obj;
}","public Object3dContainer getParsedObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Object3dContainer obj=new Object3dContainer(0,0);
  int numObjects=parseObjects.size();
  Bitmap texture=null;
  if (textureAtlas.hasBitmaps()) {
    textureAtlas.generate();
    texture=textureAtlas.getBitmap();
    Shared.textureManager().addTextureId(texture,""String_Node_Str"");
  }
  for (int i=0; i < numObjects; i++) {
    ParseObjectData o=parseObjects.get(i);
    Log.d(Min3d.TAG,""String_Node_Str"" + o.name);
    obj.addChild(o.getParsedObject(textureAtlas));
  }
  if (textureAtlas.hasBitmaps()) {
    if (texture != null)     texture.recycle();
    textureAtlas.cleanup();
  }
  Log.d(Min3d.TAG,""String_Node_Str"");
  cleanup();
  return obj;
}",0.8
184202,"public ObjFace(StringTokenizer parts,String materialKey,int faceLength){
  super();
  this.materialKey=materialKey;
  this.faceLength=faceLength;
  StringTokenizer subParts=new StringTokenizer(parts.nextToken(),""String_Node_Str"");
  int partLength=subParts.countTokens();
  boolean emptyVt=parts.toString().indexOf(""String_Node_Str"") > -1;
  hasuv=partLength >= 2 && !emptyVt;
  hasn=partLength == 3;
  v=new short[faceLength];
  if (hasuv)   uv=new short[faceLength];
  if (hasn)   n=new short[faceLength];
  for (int i=1; i < faceLength + 1; i++) {
    if (i > 1)     subParts=new StringTokenizer(parts.nextToken(),""String_Node_Str"");
    int index=i - 1;
    v[index]=(short)(Short.parseShort(subParts.nextToken()) - 1);
    if (hasuv)     uv[index]=(short)(Short.parseShort(subParts.nextToken()) - 1);
    if (hasn)     n[index]=(short)(Short.parseShort(subParts.nextToken()) - 1);
  }
}","public ObjFace(String line,String materialKey,int faceLength){
  super();
  this.materialKey=materialKey;
  this.faceLength=faceLength;
  boolean emptyVt=line.indexOf(""String_Node_Str"") > -1;
  if (emptyVt)   line=line.replace(""String_Node_Str"",""String_Node_Str"");
  StringTokenizer parts=new StringTokenizer(line);
  parts.nextToken();
  StringTokenizer subParts=new StringTokenizer(parts.nextToken(),""String_Node_Str"");
  int partLength=subParts.countTokens();
  hasuv=partLength >= 2 && !emptyVt;
  hasn=partLength == 3 || (partLength == 2 && emptyVt);
  v=new short[faceLength];
  if (hasuv)   uv=new short[faceLength];
  if (hasn)   n=new short[faceLength];
  for (int i=1; i < faceLength + 1; i++) {
    if (i > 1)     subParts=new StringTokenizer(parts.nextToken(),""String_Node_Str"");
    int index=i - 1;
    v[index]=(short)(Short.parseShort(subParts.nextToken()) - 1);
    if (hasuv)     uv[index]=(short)(Short.parseShort(subParts.nextToken()) - 1);
    if (hasn)     n[index]=(short)(Short.parseShort(subParts.nextToken()) - 1);
  }
}",0.4739287558079504
184203,"@Override public void parse(){
  long startTime=Calendar.getInstance().getTimeInMillis();
  InputStream fileIn=resources.openRawResource(resources.getIdentifier(resourceID,null,null));
  BufferedReader buffer=new BufferedReader(new InputStreamReader(fileIn));
  String line;
  co=new ParseObjectData(vertices,texCoords,normals);
  parseObjects.add(co);
  materialMap=new HashMap<String,ObjMaterial>();
  Log.d(Min3d.TAG,""String_Node_Str"" + resourceID);
  Log.d(Min3d.TAG,""String_Node_Str"" + startTime);
  try {
    while ((line=buffer.readLine()) != null) {
      StringTokenizer parts=new StringTokenizer(line,""String_Node_Str"");
      int numTokens=parts.countTokens();
      if (numTokens == 0)       continue;
      String type=parts.nextToken();
      if (type.equals(VERTEX)) {
        Number3d vertex=new Number3d();
        vertex.x=Float.parseFloat(parts.nextToken());
        vertex.y=Float.parseFloat(parts.nextToken());
        vertex.z=Float.parseFloat(parts.nextToken());
        vertices.add(vertex);
      }
 else       if (type.equals(FACE)) {
        if (numTokens == 4) {
          co.numFaces++;
          co.faces.add(new ObjFace(parts,currentMaterialKey,3));
        }
 else         if (numTokens == 5) {
          co.numFaces+=2;
          co.faces.add(new ObjFace(parts,currentMaterialKey,4));
        }
      }
 else       if (type.equals(TEXCOORD)) {
        Uv texCoord=new Uv();
        texCoord.u=Float.parseFloat(parts.nextToken());
        texCoord.v=Float.parseFloat(parts.nextToken()) * -1f;
        texCoords.add(texCoord);
      }
 else       if (type.equals(NORMAL)) {
        Number3d normal=new Number3d();
        normal.x=Float.parseFloat(parts.nextToken());
        normal.y=Float.parseFloat(parts.nextToken());
        normal.z=Float.parseFloat(parts.nextToken());
        normals.add(normal);
      }
 else       if (type.equals(MATERIAL_LIB)) {
        readMaterialLib(parts.nextToken());
      }
 else       if (type.equals(USE_MATERIAL)) {
        currentMaterialKey=parts.nextToken();
      }
 else       if (type.equals(OBJECT)) {
        String objName=parts.hasMoreTokens() ? parts.nextToken() : ""String_Node_Str"";
        if (firstObject) {
          Log.d(Min3d.TAG,""String_Node_Str"" + objName);
          co.name=objName;
          firstObject=false;
        }
 else {
          Log.d(Min3d.TAG,""String_Node_Str"" + objName);
          co=new ParseObjectData(vertices,texCoords,normals);
          co.name=objName;
          parseObjects.add(co);
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  long endTime=Calendar.getInstance().getTimeInMillis();
  Log.d(Min3d.TAG,""String_Node_Str"" + (endTime - startTime));
}","@Override public void parse(){
  long startTime=Calendar.getInstance().getTimeInMillis();
  InputStream fileIn=resources.openRawResource(resources.getIdentifier(resourceID,null,null));
  BufferedReader buffer=new BufferedReader(new InputStreamReader(fileIn));
  String line;
  co=new ParseObjectData(vertices,texCoords,normals);
  parseObjects.add(co);
  materialMap=new HashMap<String,ObjMaterial>();
  Log.d(Min3d.TAG,""String_Node_Str"" + resourceID);
  Log.d(Min3d.TAG,""String_Node_Str"" + startTime);
  try {
    while ((line=buffer.readLine()) != null) {
      StringTokenizer parts=new StringTokenizer(line,""String_Node_Str"");
      int numTokens=parts.countTokens();
      if (numTokens == 0)       continue;
      String type=parts.nextToken();
      if (type.equals(VERTEX)) {
        Number3d vertex=new Number3d();
        vertex.x=Float.parseFloat(parts.nextToken());
        vertex.y=Float.parseFloat(parts.nextToken());
        vertex.z=Float.parseFloat(parts.nextToken());
        vertices.add(vertex);
      }
 else       if (type.equals(FACE)) {
        if (numTokens == 4) {
          co.numFaces++;
          co.faces.add(new ObjFace(line,currentMaterialKey,3));
        }
 else         if (numTokens == 5) {
          co.numFaces+=2;
          co.faces.add(new ObjFace(line,currentMaterialKey,4));
        }
      }
 else       if (type.equals(TEXCOORD)) {
        Uv texCoord=new Uv();
        texCoord.u=Float.parseFloat(parts.nextToken());
        texCoord.v=Float.parseFloat(parts.nextToken()) * -1f;
        texCoords.add(texCoord);
      }
 else       if (type.equals(NORMAL)) {
        Number3d normal=new Number3d();
        normal.x=Float.parseFloat(parts.nextToken());
        normal.y=Float.parseFloat(parts.nextToken());
        normal.z=Float.parseFloat(parts.nextToken());
        normals.add(normal);
      }
 else       if (type.equals(MATERIAL_LIB)) {
        readMaterialLib(parts.nextToken());
      }
 else       if (type.equals(USE_MATERIAL)) {
        currentMaterialKey=parts.nextToken();
      }
 else       if (type.equals(OBJECT)) {
        String objName=parts.hasMoreTokens() ? parts.nextToken() : ""String_Node_Str"";
        if (firstObject) {
          Log.d(Min3d.TAG,""String_Node_Str"" + objName);
          co.name=objName;
          firstObject=false;
        }
 else {
          Log.d(Min3d.TAG,""String_Node_Str"" + objName);
          co=new ParseObjectData(vertices,texCoords,normals);
          co.name=objName;
          parseObjects.add(co);
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  long endTime=Calendar.getInstance().getTimeInMillis();
  Log.d(Min3d.TAG,""String_Node_Str"" + (endTime - startTime));
}",0.9966691339748336
184204,"public void play(String name){
  currentFrameIndex=0;
  for (int i=0; i < numFrames; i++) {
    if (frames[i].getName().equals(name))     currentFrameIndex=i;
  }
  play();
}","public void play(String name,boolean loop){
  this.loop=loop;
  play(name);
}",0.3824701195219123
184205,"public void update(){
  if (!isPlaying || !updateVertices)   return;
  currentTime=System.currentTimeMillis();
  KeyFrame currentFrame=frames[currentFrameIndex];
  KeyFrame nextFrame=frames[(currentFrameIndex + 1) % numFrames];
  float[] currentVerts=currentFrame.getVertices();
  float[] nextVerts=nextFrame.getVertices();
  float[] currentNormals=currentFrame.getNormals();
  float[] nextNormals=nextFrame.getNormals();
  int numVerts=currentVerts.length;
  float[] interPolatedVerts=new float[numVerts];
  float[] interPolatedNormals=new float[numVerts];
  for (int i=0; i < numVerts; i+=3) {
    interPolatedVerts[i]=currentVerts[i] + interpolation * (nextVerts[i] - currentVerts[i]);
    interPolatedVerts[i + 1]=currentVerts[i + 1] + interpolation * (nextVerts[i + 1] - currentVerts[i + 1]);
    interPolatedVerts[i + 2]=currentVerts[i + 2] + interpolation * (nextVerts[i + 2] - currentVerts[i + 2]);
    interPolatedNormals[i]=currentNormals[i] + interpolation * (nextNormals[i] - currentNormals[i]);
    interPolatedNormals[i + 1]=currentNormals[i + 1] + interpolation * (nextNormals[i + 1] - currentNormals[i + 1]);
    interPolatedNormals[i + 2]=currentNormals[i + 2] + interpolation * (nextNormals[i + 2] - currentNormals[i + 2]);
  }
  interpolation+=fps * (currentTime - startTime) / 1000;
  vertices().overwriteNormals(interPolatedNormals);
  vertices().overwriteVerts(interPolatedVerts);
  if (interpolation > 1) {
    interpolation=0;
    currentFrameIndex++;
    if (currentFrameIndex >= numFrames)     currentFrameIndex=0;
  }
  startTime=System.currentTimeMillis();
}","public void update(){
  if (!isPlaying || !updateVertices)   return;
  currentTime=System.currentTimeMillis();
  KeyFrame currentFrame=frames[currentFrameIndex];
  KeyFrame nextFrame=frames[(currentFrameIndex + 1) % numFrames];
  if (currentFrameName != null && !currentFrameName.equals(currentFrame.getName())) {
    if (!loop)     stop();
 else     currentFrameIndex=loopStartIndex;
    return;
  }
  float[] currentVerts=currentFrame.getVertices();
  float[] nextVerts=nextFrame.getVertices();
  float[] currentNormals=currentFrame.getNormals();
  float[] nextNormals=nextFrame.getNormals();
  int numVerts=currentVerts.length;
  float[] interPolatedVerts=new float[numVerts];
  float[] interPolatedNormals=new float[numVerts];
  for (int i=0; i < numVerts; i+=3) {
    interPolatedVerts[i]=currentVerts[i] + interpolation * (nextVerts[i] - currentVerts[i]);
    interPolatedVerts[i + 1]=currentVerts[i + 1] + interpolation * (nextVerts[i + 1] - currentVerts[i + 1]);
    interPolatedVerts[i + 2]=currentVerts[i + 2] + interpolation * (nextVerts[i + 2] - currentVerts[i + 2]);
    interPolatedNormals[i]=currentNormals[i] + interpolation * (nextNormals[i] - currentNormals[i]);
    interPolatedNormals[i + 1]=currentNormals[i + 1] + interpolation * (nextNormals[i + 1] - currentNormals[i + 1]);
    interPolatedNormals[i + 2]=currentNormals[i + 2] + interpolation * (nextNormals[i + 2] - currentNormals[i + 2]);
  }
  interpolation+=fps * (currentTime - startTime) / 1000;
  vertices().overwriteNormals(interPolatedNormals);
  vertices().overwriteVerts(interPolatedVerts);
  if (interpolation > 1) {
    interpolation=0;
    currentFrameIndex++;
    if (currentFrameIndex >= numFrames)     currentFrameIndex=0;
  }
  startTime=System.currentTimeMillis();
}",0.9482810164424514
184206,"private void getFrames(BufferedInputStream stream,byte[] bytes) throws IOException {
  ByteArrayInputStream ba=new ByteArrayInputStream(bytes,header.offsetFrames - 68,bytes.length - header.offsetFrames);
  LittleEndianDataInputStream is=new LittleEndianDataInputStream(ba);
  ArrayList<Number3d> firstFrameVerts=new ArrayList<Number3d>();
  for (int i=0; i < header.numFrames; i++) {
    float scaleX=is.readFloat();
    float scaleY=is.readFloat();
    float scaleZ=is.readFloat();
    float translateX=is.readFloat();
    float translateY=is.readFloat();
    float translateZ=is.readFloat();
    String name=is.readString(16);
    float vertices[]=new float[header.numVerts * 3];
    int index=0;
    for (int j=0; j < header.numVerts; j++) {
      vertices[index++]=scaleX * is.readUnsignedByte() + translateX;
      vertices[index++]=scaleY * is.readUnsignedByte() + translateY;
      vertices[index++]=scaleZ * is.readUnsignedByte() + translateZ;
      int normalIndex=is.readUnsignedByte();
      if (i == 0)       co.vertices.add(new Number3d(vertices[index - 3],vertices[index - 2],vertices[index - 1]));
    }
    frames[i]=new KeyFrame(name,vertices);
  }
}","private void getFrames(BufferedInputStream stream,byte[] bytes) throws IOException {
  ByteArrayInputStream ba=new ByteArrayInputStream(bytes,header.offsetFrames - 68,bytes.length - header.offsetFrames);
  LittleEndianDataInputStream is=new LittleEndianDataInputStream(ba);
  ArrayList<Number3d> firstFrameVerts=new ArrayList<Number3d>();
  for (int i=0; i < header.numFrames; i++) {
    float scaleX=is.readFloat();
    float scaleY=is.readFloat();
    float scaleZ=is.readFloat();
    float translateX=is.readFloat();
    float translateY=is.readFloat();
    float translateZ=is.readFloat();
    String name=is.readString(16);
    name=name.subSequence(0,name.lastIndexOf(""String_Node_Str"")).toString();
    Log.d(Min3d.TAG,""String_Node_Str"" + name);
    float vertices[]=new float[header.numVerts * 3];
    int index=0;
    for (int j=0; j < header.numVerts; j++) {
      vertices[index++]=scaleX * is.readUnsignedByte() + translateX;
      vertices[index++]=scaleY * is.readUnsignedByte() + translateY;
      vertices[index++]=scaleZ * is.readUnsignedByte() + translateZ;
      int normalIndex=is.readUnsignedByte();
      if (i == 0)       co.vertices.add(new Number3d(vertices[index - 3],vertices[index - 2],vertices[index - 1]));
    }
    frames[i]=new KeyFrame(name,vertices);
  }
}",0.9495524816924328
184207,"public Void doInBackground(){
  try {
    generateProcessing.setEnabled(false);
    progressBar.setIndeterminate(true);
    rateIndicatorBFToProcessing.setLogFilePath(logFilename,burnInParser.getValue() / 100);
    rateIndicatorBFToProcessing.setBfCutoff(Double.valueOf(bfCutoffParser.getText()));
    rateIndicatorBFToProcessing.setLocationFilePath(locationsFilename);
    rateIndicatorBFToProcessing.setMinBranchRedMapping(branchesMinColor.getRed());
    rateIndicatorBFToProcessing.setMinBranchGreenMapping(branchesMinColor.getGreen());
    rateIndicatorBFToProcessing.setMinBranchBlueMapping(branchesMinColor.getBlue());
    rateIndicatorBFToProcessing.setMinBranchOpacityMapping(branchesMinColor.getAlpha());
    rateIndicatorBFToProcessing.setMaxBranchRedMapping(branchesMaxColor.getRed());
    rateIndicatorBFToProcessing.setMaxBranchGreenMapping(branchesMaxColor.getGreen());
    rateIndicatorBFToProcessing.setMaxBranchBlueMapping(branchesMaxColor.getBlue());
    rateIndicatorBFToProcessing.setMaxBranchOpacityMapping(branchesMaxColor.getAlpha());
    rateIndicatorBFToProcessing.setBranchWidth(branchesWidthParser.getValue() / 2);
    if (meanPoissonPriorParser.getSelectedIndex() == 0) {
      rateIndicatorBFToProcessing.setDefaultMeanPoissonPrior();
    }
 else {
      rateIndicatorBFToProcessing.setUserMeanPoissonPrior(Double.valueOf(meanPoissonPriorParser.getSelectedItem().toString()));
    }
    if (poissonPriorOffsetParser.getSelectedIndex() == 0) {
      rateIndicatorBFToProcessing.setDefaultPoissonPriorOffset();
    }
 else {
      rateIndicatorBFToProcessing.setUserPoissonPriorOffset(Double.valueOf(poissonPriorOffsetParser.getSelectedItem().toString()));
    }
    rateIndicatorBFToProcessing.init();
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    String msg=String.format(""String_Node_Str"",e.toString());
    JOptionPane.showMessageDialog(Utils.getActiveFrame(),msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE,errorIcon);
  }
  return null;
}","public Void doInBackground(){
  try {
    generateProcessing.setEnabled(false);
    progressBar.setIndeterminate(true);
    rateIndicatorBFToProcessing.setLogFilePath(logFilename,burnInParser.getValue() / 100.0);
    rateIndicatorBFToProcessing.setBfCutoff(Double.valueOf(bfCutoffParser.getText()));
    rateIndicatorBFToProcessing.setLocationFilePath(locationsFilename);
    rateIndicatorBFToProcessing.setMinBranchRedMapping(branchesMinColor.getRed());
    rateIndicatorBFToProcessing.setMinBranchGreenMapping(branchesMinColor.getGreen());
    rateIndicatorBFToProcessing.setMinBranchBlueMapping(branchesMinColor.getBlue());
    rateIndicatorBFToProcessing.setMinBranchOpacityMapping(branchesMinColor.getAlpha());
    rateIndicatorBFToProcessing.setMaxBranchRedMapping(branchesMaxColor.getRed());
    rateIndicatorBFToProcessing.setMaxBranchGreenMapping(branchesMaxColor.getGreen());
    rateIndicatorBFToProcessing.setMaxBranchBlueMapping(branchesMaxColor.getBlue());
    rateIndicatorBFToProcessing.setMaxBranchOpacityMapping(branchesMaxColor.getAlpha());
    rateIndicatorBFToProcessing.setBranchWidth(branchesWidthParser.getValue() / 2);
    if (meanPoissonPriorParser.getSelectedIndex() == 0) {
      rateIndicatorBFToProcessing.setDefaultMeanPoissonPrior();
    }
 else {
      rateIndicatorBFToProcessing.setUserMeanPoissonPrior(Double.valueOf(meanPoissonPriorParser.getSelectedItem().toString()));
    }
    if (poissonPriorOffsetParser.getSelectedIndex() == 0) {
      rateIndicatorBFToProcessing.setDefaultPoissonPriorOffset();
    }
 else {
      rateIndicatorBFToProcessing.setUserPoissonPriorOffset(Double.valueOf(poissonPriorOffsetParser.getSelectedItem().toString()));
    }
    rateIndicatorBFToProcessing.init();
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    String msg=String.format(""String_Node_Str"",e.toString());
    JOptionPane.showMessageDialog(Utils.getActiveFrame(),msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE,errorIcon);
  }
  return null;
}",0.9995066600888012
184208,"public ReadLog(String filename,double burnIn){
  time=-System.currentTimeMillis();
  String[] lines=LoadStrings(filename);
  int commentedLines=0;
  for (int row=0; row < lines.length; row++) {
    if (lines[row].startsWith(""String_Node_Str"")) {
      commentedLines++;
    }
  }
  nrow=lines.length - commentedLines - 1;
  String[] colNames=lines[commentedLines].split(""String_Node_Str"");
  List<Integer> list=new ArrayList<Integer>();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  for (int row=0; row < colNames.length; row++) {
    Matcher matcher=pattern.matcher(colNames[row]);
    if (matcher.find()) {
      list.add(row);
    }
  }
  ncol=list.size();
  int delete=(int)(nrow * burnIn) + 1;
  indicators=new double[nrow - delete][ncol];
  int i=0;
  for (int row=delete; row < nrow; row++) {
    String[] line=lines[row].split(""String_Node_Str"");
    indicators[i]=Utils.parseDouble(Utils.Subset(line,list.get(0),ncol));
    i++;
  }
  indicators=(double[][])indicators;
  nrow=indicators.length;
  time+=System.currentTimeMillis();
}","public ReadLog(String filename,double burnIn){
  String[] lines=LoadStrings(filename);
  int commentedLines=0;
  for (int row=0; row < lines.length; row++) {
    if (lines[row].startsWith(""String_Node_Str"")) {
      commentedLines++;
    }
  }
  nrow=lines.length - commentedLines - 1;
  String[] colNames=lines[commentedLines].split(""String_Node_Str"");
  List<Integer> list=new ArrayList<Integer>();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  for (int row=0; row < colNames.length; row++) {
    Matcher matcher=pattern.matcher(colNames[row]);
    if (matcher.find()) {
      list.add(row);
    }
  }
  ncol=list.size();
  int delete=(int)(nrow * burnIn) + 1;
  System.out.println(nrow * burnIn);
  indicators=new double[nrow - delete][ncol];
  int i=0;
  for (int row=delete; row < nrow; row++) {
    String[] line=lines[row].split(""String_Node_Str"");
    indicators[i]=Utils.parseDouble(Utils.Subset(line,list.get(0),ncol));
    i++;
  }
  indicators=(double[][])indicators;
  nrow=indicators.length;
}",0.9473175447075882
184209,"public ReadLog(String filename,double burnIn){
  String[] lines=LoadStrings(filename);
  int commentedLines=0;
  for (int row=0; row < lines.length; row++) {
    if (lines[row].startsWith(""String_Node_Str"")) {
      commentedLines++;
    }
  }
  nrow=lines.length - commentedLines - 1;
  String[] colNames=lines[commentedLines].split(""String_Node_Str"");
  List<Integer> list=new ArrayList<Integer>();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  for (int row=0; row < colNames.length; row++) {
    Matcher matcher=pattern.matcher(colNames[row]);
    if (matcher.find()) {
      list.add(row);
    }
  }
  ncol=list.size();
  int delete=(int)(nrow * burnIn) + 1;
  System.out.println(nrow * burnIn);
  indicators=new double[nrow - delete][ncol];
  int i=0;
  for (int row=delete; row < nrow; row++) {
    String[] line=lines[row].split(""String_Node_Str"");
    indicators[i]=Utils.parseDouble(Utils.Subset(line,list.get(0),ncol));
    i++;
  }
  indicators=(double[][])indicators;
  nrow=indicators.length;
}","public ReadLog(String filename,double burnIn){
  String[] lines=LoadStrings(filename);
  int commentedLines=0;
  for (int row=0; row < lines.length; row++) {
    if (lines[row].startsWith(""String_Node_Str"")) {
      commentedLines++;
    }
  }
  nrow=lines.length - commentedLines - 1;
  String[] colNames=lines[commentedLines].split(""String_Node_Str"");
  List<Integer> list=new ArrayList<Integer>();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  for (int row=0; row < colNames.length; row++) {
    Matcher matcher=pattern.matcher(colNames[row]);
    if (matcher.find()) {
      list.add(row);
    }
  }
  ncol=list.size();
  int delete=(int)(nrow * burnIn) + 1;
  indicators=new double[nrow - delete][ncol];
  int i=0;
  for (int row=delete; row < nrow; row++) {
    String[] line=lines[row].split(""String_Node_Str"");
    indicators[i]=Utils.parseDouble(Utils.Subset(line,list.get(0),ncol));
    i++;
  }
  indicators=(double[][])indicators;
  nrow=indicators.length;
}",0.9814722083124688
184210,"public String getNextCleaner(){
  Calendar c=Calendar.getInstance();
  return getCleaner(c.get(Calendar.WEEK_OF_YEAR) + 1);
}","public String getNextCleaner(){
  Calendar c=Calendar.getInstance(Locale.UK);
  return getCleaner(c.get(Calendar.WEEK_OF_YEAR) + 1);
}",0.9652509652509652
184211,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.pantlistrow,parent,false);
    holder=new ViewHolder();
    holder.amount=(TextView)convertView.findViewById(R.id.pantrow_amount);
    holder.date=(TextView)convertView.findViewById(R.id.pantrow_date);
    holder.user=(TextView)convertView.findViewById(R.id.pantrow_user);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.date.setVisibility(8);
  Pant p=pantList.get(position);
  holder.amount.setText(p.getAmount() + ""String_Node_Str"");
  holder.date.setText(p.getDate().toString());
  holder.user.setText(p.getUser());
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.pantlistrow,parent,false);
    holder=new ViewHolder();
    holder.amount=(TextView)convertView.findViewById(R.id.pantrow_amount);
    holder.date=(TextView)convertView.findViewById(R.id.pantrow_date);
    holder.user=(TextView)convertView.findViewById(R.id.pantrow_user);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  Pant p=pantList.get(position);
  holder.amount.setText(p.getAmount() + ""String_Node_Str"");
  holder.date.setText(p.getDate().getDate() + ""String_Node_Str"" + (p.getDate().getMonth() + 1)+ ""String_Node_Str""+ (p.getDate().getYear() + 1900));
  holder.user.setText(p.getUser());
  return convertView;
}",0.9135034225264468
184212,"public void parseStrings(String[] list){
  for (  String s : list) {
    String[] bits=s.split(""String_Node_Str"");
    String[] d=bits[0].split(""String_Node_Str"");
    Calendar cal=Calendar.getInstance();
    this.add(new Pant(cal.getTime(),Double.parseDouble(bits[1]),bits[2]));
  }
}","public void parseStrings(String[] list){
  for (  String s : list) {
    String[] bits=s.split(""String_Node_Str"");
    String[] d=bits[0].split(""String_Node_Str"");
    Calendar cal=Calendar.getInstance();
    cal.set(Integer.parseInt(d[0]),Integer.parseInt(d[1]),Integer.parseInt(d[2]));
    this.add(new Pant(cal.getTime(),Double.parseDouble(bits[1]),bits[2]));
  }
}",0.8728943338437979
184213,"public void drop(MouseUpEvent event,DNDContext dndContext){
  if (positioner == null) {
    dndContext.revert();
  }
 else {
    final boolean positionerOffset=isPositionerOffset();
    final DNDTreeViewModelAdaper.DNDNodeInfo parentDndNodeInfo=super.drop(positioner,dndContext);
    positioner.remove();
    if (positionerOffset) {
      open(parentDndNodeInfo,true);
    }
    positioner.refresh();
  }
  positioner=null;
}","public void drop(MouseUpEvent event,DNDContext dndContext){
  if (positioner == null) {
    dndContext.revert();
  }
 else {
    final boolean positionerOffset=isPositionerOffset();
    final DNDNodeInfo parentDndNodeInfo=super.drop(positioner,dndContext);
    positioner.remove();
    if (positionerOffset) {
      open(parentDndNodeInfo,true);
    }
    positioner.refresh();
  }
  positioner=null;
}",0.5078597339782346
184214,"public DNDTreeViewModelAdaper.DNDNodeInfo putPositioner(boolean xShifted,boolean insertBelow,String key){
  DNDTreeViewModelAdaper.DNDNodeInfo relativeNode=getDNDNodeInfo(key);
  if (relativeNode == null) {
    return null;
  }
  if (insertBelow && xShifted) {
    TreeNode treeNode=open(relativeNode,true);
    if (treeNode != null && treeNode.getChildCount() > 0) {
      xShifted=false;
    }
  }
 else {
    xShifted=false;
  }
  setPositionerOffset(xShifted);
  int idx=relativeNode.indexOf();
  if (insertBelow) {
    idx++;
  }
  @SuppressWarnings({""String_Node_Str""}) final DNDTreeViewModelAdaper.DNDNodeInfo res=relativeNode.addSibling(idx,getPositionerItem());
  res.refresh();
  return res;
}","public DNDNodeInfo putPositioner(boolean xShifted,boolean insertBelow,String key){
  DNDNodeInfo relativeNode=getDNDNodeInfo(key);
  if (relativeNode == null) {
    return null;
  }
  if (insertBelow && xShifted) {
    TreeNode treeNode=open(relativeNode,true);
    if (treeNode != null && treeNode.getChildCount() > 0) {
      xShifted=false;
    }
  }
 else {
    xShifted=false;
  }
  setPositionerOffset(xShifted);
  int idx=relativeNode.indexOf();
  if (insertBelow) {
    idx++;
  }
  @SuppressWarnings({""String_Node_Str""}) final DNDNodeInfo res=relativeNode.addSibling(idx,getPositionerItem());
  res.refresh();
  return res;
}",0.9483919222139118
184215,"public void onMouseMove(MouseMoveEvent event){
  NodeList<Element> dropTargetList=tree.getElement().getElementsByTagName(DNDTreeViewModelAdaper.TAG);
  Element dropTarget=findClosestElement(event,dropTargetList);
  int x=event.getRelativeX(dropTarget);
  int y=event.getRelativeY(dropTarget);
  String key=dropTarget.getAttribute(DNDTreeViewModelAdaper.KEY_ATTR);
  putPositionerAt(new Pos(x >= 16 ? 16 : 0,y > 10 ? 1 : 0,key));
}","public void onMouseMove(MouseMoveEvent event){
  NodeList<Element> dropTargetList=tree.getElement().getElementsByTagName(TAG);
  Element dropTarget=findClosestElement(event,dropTargetList);
  int x=event.getRelativeX(dropTarget);
  int y=event.getRelativeY(dropTarget);
  String key=dropTarget.getAttribute(KEY_ATTR);
  putPositionerAt(new Pos(x >= 16 ? 16 : 0,y > 10 ? 1 : 0,key));
}",0.9434889434889436
184216,"public TreeNode open(DNDTreeViewModelAdaper.DNDNodeInfo nodeToOpen,final boolean open){
  Stack<DNDTreeViewModelAdaper.DNDNodeInfo> nodesToOpen=new Stack<DNDTreeViewModelAdaper.DNDNodeInfo>();
  DNDTreeViewModelAdaper.DNDNodeInfo nodePos=nodeToOpen;
  while (nodePos != null) {
    if (nodePos.getParentDndNodeInfo() != null) {
      nodesToOpen.push(nodePos);
    }
    nodePos=nodePos.getParentDndNodeInfo();
  }
  TreeNode treeNode=tree.getRootTreeNode();
  while (!nodesToOpen.empty()) {
    nodePos=nodesToOpen.pop();
    final int idx=nodePos.indexOf();
    if (nodesToOpen.isEmpty()) {
      treeNode=treeNode.setChildOpen(idx,open);
    }
 else {
      treeNode=treeNode.setChildOpen(idx,true);
    }
  }
  return treeNode;
}","public TreeNode open(DNDNodeInfo nodeToOpen,final boolean open){
  Stack<DNDNodeInfo> nodesToOpen=new Stack<DNDNodeInfo>();
  DNDNodeInfo nodePos=nodeToOpen;
  while (nodePos != null) {
    if (nodePos.getParentDndNodeInfo() != null) {
      nodesToOpen.push(nodePos);
    }
    nodePos=nodePos.getParentDndNodeInfo();
  }
  TreeNode treeNode=tree.getRootTreeNode();
  while (!nodesToOpen.empty()) {
    nodePos=nodesToOpen.pop();
    final int idx=nodePos.indexOf();
    if (nodesToOpen.isEmpty()) {
      treeNode=treeNode.setChildOpen(idx,open);
    }
 else {
      treeNode=treeNode.setChildOpen(idx,true);
    }
  }
  return treeNode;
}",0.9330422125181952
184217,"public <T>boolean moveNode(T item,T newParent,int idx);","public boolean moveNode(Object item,Object newParent,int idx);",0.8547008547008547
184218,"public void drop(DNDNodeInfo positioner,DNDContext dndContext){
  int idx=positioner.indexOf();
  Object key=dndContext.getKey();
  final DNDNodeInfo dndNodeInfo=cache.get(key.toString());
  String parentKey;
  if (!positionerOffset) {
    parentKey=positioner.getParentKey();
  }
 else {
    T parentItem=positioner.dataProvider.getList().get(idx - 1);
    parentKey=idMap.get(parentItem).toString();
    idx=0;
  }
  DNDNodeInfo parentNodeInfo=cache.get(parentKey);
  moveNode(dndNodeInfo.item,parentNodeInfo.item,idx);
}","public void drop(DNDNodeInfo positioner,DNDContext dndContext){
  int idx=positioner.indexOf();
  Object key=dndContext.getKey();
  final DNDNodeInfo dndNodeInfo=cache.get(key.toString());
  String parentKey;
  if (!positionerOffset) {
    parentKey=positioner.getParentKey();
  }
 else {
    T parentItem=positioner.dataProvider.getList().get(idx - 1);
    parentKey=idMap.get(parentItem).toString();
    idx=0;
  }
  DNDNodeInfo parentNodeInfo=cache.get(parentKey);
  moveNode(dndNodeInfo.item,parentNodeInfo == null ? rootValue : parentNodeInfo.item,idx);
}",0.9658356417359188
184219,"/** 
 * Moves the game forward one step.
 * @return the resulting grid state
 */
public Grid iterate(){
  for (int i=0; i < threadList.length; i++) {
    threadList[i]=new LifeThread(i);
  }
  for (  LifeThread t : threadList) {
    t.start();
  }
  for (  LifeThread t : threadList) {
    try {
      t.join();
    }
 catch (    InterruptedException e) {
    }
  }
  for (int i=0; i < noise; i++) {
    int row=(int)(Math.random() * current.getRows());
    int col=(int)(Math.random() * current.getCols());
    boolean alive=next.isAlive(row,col);
    next.setAlive(row,col,!alive);
  }
  Grid temp=current;
  current=next;
  next=temp;
  iterationCount++;
  return current;
}","/** 
 * Moves the game forward one step.
 * @return the resulting grid state
 */
public Grid iterate(){
  for (int i=0; i < threadList.length; i++) {
    threadList[i]=new LifeThread(i);
  }
  for (  LifeThread t : threadList) {
    t.start();
  }
  for (  LifeThread t : threadList) {
    try {
      t.join();
    }
 catch (    InterruptedException e) {
    }
  }
  if (noise > 0) {
    int changed[][]=new int[noise][2];
    for (int i=0; i < noise; i++) {
      boolean repeat;
      int row, col;
      do {
        repeat=false;
        row=(int)(Math.random() * current.getRows());
        col=(int)(Math.random() * current.getCols());
        for (int j=0; j < i; j++) {
          if (changed[j][0] == row && changed[j][1] == col) {
            repeat=true;
            break;
          }
        }
      }
 while (repeat);
      boolean alive=next.isAlive(row,col);
      next.setAlive(row,col,!alive);
      changed[i][0]=row;
      changed[i][1]=col;
    }
  }
  Grid temp=current;
  current=next;
  next=temp;
  iterationCount++;
  return current;
}",0.7721518987341772
184220,"@Override public void onClick(View v){
  playAgain();
switch (mode) {
case MODE_MULTIPLAYER_HOST:
{
      out.println(NEW_GAME);
      break;
    }
case MODE_MULTIPLAYER_JOIN:
{
    gameView.setEnabled(false);
    out.println(NEW_GAME);
    break;
  }
case MODE_SINGLEPLAYER:
{
  AI=new GameAI(gameView.getBoard(),GameAI.EASY);
}
}
}","@Override public void onClick(View v){
  playAgain();
switch (mode) {
case MODE_MULTIPLAYER_HOST:
{
      out.println(NEW_GAME);
      gameView.setEnabled(true);
      break;
    }
case MODE_MULTIPLAYER_JOIN:
{
    gameView.setEnabled(false);
    out.println(NEW_GAME);
    break;
  }
case MODE_SINGLEPLAYER:
{
  AI=new GameAI(gameView.getBoard(),GameAI.EASY);
}
}
}",0.9527896995708156
184221,"/** 
 * Creates a Button for play again after a WIN or DRAW.
 */
private void setupPlayAgain(){
  replay.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT));
  replay.setBackgroundDrawable(getResources().getDrawable(R.drawable.button_playagain));
  replay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      playAgain();
switch (mode) {
case MODE_MULTIPLAYER_HOST:
{
          out.println(NEW_GAME);
          break;
        }
case MODE_MULTIPLAYER_JOIN:
{
        gameView.setEnabled(false);
        out.println(NEW_GAME);
        break;
      }
case MODE_SINGLEPLAYER:
{
      AI=new GameAI(gameView.getBoard(),GameAI.EASY);
    }
}
}
}
);
gameViewLayout.addView(replay);
}","/** 
 * Creates a Button for play again after a WIN or DRAW.
 */
private void setupPlayAgain(){
  replay.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT));
  replay.setBackgroundDrawable(getResources().getDrawable(R.drawable.button_playagain));
  replay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      playAgain();
switch (mode) {
case MODE_MULTIPLAYER_HOST:
{
          out.println(NEW_GAME);
          gameView.setEnabled(true);
          break;
        }
case MODE_MULTIPLAYER_JOIN:
{
        gameView.setEnabled(false);
        out.println(NEW_GAME);
        break;
      }
case MODE_SINGLEPLAYER:
{
      AI=new GameAI(gameView.getBoard(),GameAI.EASY);
    }
}
}
}
);
gameViewLayout.addView(replay);
}",0.977061376317421
184222,"private void putPlayer(int x,int y,GamePlayer player){
  if (gameView.getBoard().put(x,y,player) == GameState.INVALID_MOVE) {
    return;
  }
switch (mode) {
case MODE_SINGLEPLAYER:
{
      if (gameView.getBoard().getState() == GameState.NEUTRAL) {
        if (gameView.getBoard().getCurrentPlayer() == GamePlayer.PLAYER1) {
          gameView.setEnabled(false);
          gameView.getBoard().setCurrentPlayer(GamePlayer.PLAYER2);
          Position AImove=AI.getMove();
          putPlayer(AImove.getX(),AImove.getY(),gameView.getBoard().getCurrentPlayer());
          return;
        }
 else {
          gameView.getBoard().setCurrentPlayer(GamePlayer.PLAYER1);
          gameView.setEnabled(true);
        }
      }
      break;
    }
case MODE_MULTIPLAYER_SHARED:
{
    if (gameView.getBoard().getState() == GameState.NEUTRAL) {
      if (gameView.getBoard().getCurrentPlayer() == GamePlayer.PLAYER1) {
        gameView.getBoard().setCurrentPlayer(GamePlayer.PLAYER2);
      }
 else {
        gameView.getBoard().setCurrentPlayer(GamePlayer.PLAYER1);
      }
    }
    break;
  }
case MODE_MULTIPLAYER_HOST:
{
  out.printf(""String_Node_Str"",x,y);
  gameView.getBoard().setCurrentPlayer(GamePlayer.PLAYER2);
  gameView.setEnabled(false);
  break;
}
case MODE_MULTIPLAYER_JOIN:
{
out.printf(""String_Node_Str"",x,y);
gameView.getBoard().setCurrentPlayer(GamePlayer.PLAYER1);
gameView.setEnabled(false);
break;
}
}
updateStatus();
updateState(gameView.getBoard().getCurrentPlayer());
gameView.invalidate();
}","private void putPlayer(int x,int y,GamePlayer player){
  if (gameView.getBoard().put(x,y,player) == GameState.INVALID_MOVE) {
    return;
  }
switch (mode) {
case MODE_SINGLEPLAYER:
{
      if (gameView.getBoard().getState() == GameState.NEUTRAL) {
        if (gameView.getBoard().getCurrentPlayer() == GamePlayer.PLAYER1) {
          gameView.setEnabled(false);
          gameView.getBoard().setCurrentPlayer(GamePlayer.PLAYER2);
          Position AImove=AI.getMove();
          putPlayer(AImove.getX(),AImove.getY(),gameView.getBoard().getCurrentPlayer());
          return;
        }
 else {
          gameView.getBoard().setCurrentPlayer(GamePlayer.PLAYER1);
          gameView.setEnabled(true);
        }
      }
      break;
    }
case MODE_MULTIPLAYER_SHARED:
{
    if (gameView.getBoard().getState() == GameState.NEUTRAL) {
      if (gameView.getBoard().getCurrentPlayer() == GamePlayer.PLAYER1) {
        gameView.getBoard().setCurrentPlayer(GamePlayer.PLAYER2);
      }
 else {
        gameView.getBoard().setCurrentPlayer(GamePlayer.PLAYER1);
      }
    }
    break;
  }
case MODE_MULTIPLAYER_HOST:
{
  out.printf(""String_Node_Str"",x,y);
  gameView.getBoard().setCurrentPlayer(GamePlayer.PLAYER2);
  gameView.setEnabled(false);
  break;
}
case MODE_MULTIPLAYER_JOIN:
{
out.printf(""String_Node_Str"",x,y);
gameView.getBoard().setCurrentPlayer(GamePlayer.PLAYER1);
gameView.setEnabled(false);
break;
}
}
updateStatus();
if (mode != MODE_SINGLEPLAYER) {
updateState(player);
}
 else {
updateState(gameView.getBoard().getCurrentPlayer());
}
gameView.invalidate();
}",0.9785714285714284
184223,"private void createGameView(int boardSize,int inRow){
  this.gameView=new GameView(this,boardSize,inRow);
  this.gameView.setFocusable(true);
  this.gameView.setFocusableInTouchMode(true);
  this.gameView.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      int action=event.getAction();
      if (action == MotionEvent.ACTION_DOWN) {
        return true;
      }
 else       if (action == MotionEvent.ACTION_UP) {
        int sxy=gameView.getSxy();
        int x=(int)event.getX() / sxy;
        int y=(int)event.getY() / sxy;
        if (gameView.isEnabled() && x >= 0 && x < gameView.getBoardSize() && y >= 0 & y < gameView.getBoardSize()) {
          if (gameView.getBoard().get(x,y) == GamePlayer.EMPTY) {
            putPlayer(x,y,gameView.getBoard().getCurrentPlayer());
          }
        }
        return true;
      }
      return false;
    }
  }
);
  gameViewHolder.addView(gameView);
}","private void createGameView(int boardSize,int inRow){
  this.gameView=new GameView(this,boardSize,inRow);
  this.gameView.setFocusable(true);
  this.gameView.setFocusableInTouchMode(true);
  this.gameView.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      int action=event.getAction();
      if (action == MotionEvent.ACTION_DOWN) {
        return true;
      }
 else       if (action == MotionEvent.ACTION_UP) {
        int sxy=gameView.getSxy();
        int x=(int)event.getX() / sxy;
        int y=(int)event.getY() / sxy;
        if (gameView.isEnabled() && x >= 0 && x < gameView.getBoardSize() && y >= 0 & y < gameView.getBoardSize()) {
          if (gameView.getBoard().get(x,y) == GamePlayer.EMPTY) {
            GamePlayer player=gameView.getBoard().getCurrentPlayer();
            putPlayer(x,y,player);
          }
        }
        return true;
      }
      return false;
    }
  }
);
  gameViewHolder.addView(gameView);
}",0.9424242424242424
184224,"@Override public boolean onTouch(View v,MotionEvent event){
  int action=event.getAction();
  if (action == MotionEvent.ACTION_DOWN) {
    return true;
  }
 else   if (action == MotionEvent.ACTION_UP) {
    int sxy=gameView.getSxy();
    int x=(int)event.getX() / sxy;
    int y=(int)event.getY() / sxy;
    if (gameView.isEnabled() && x >= 0 && x < gameView.getBoardSize() && y >= 0 & y < gameView.getBoardSize()) {
      if (gameView.getBoard().get(x,y) == GamePlayer.EMPTY) {
        putPlayer(x,y,gameView.getBoard().getCurrentPlayer());
      }
    }
    return true;
  }
  return false;
}","@Override public boolean onTouch(View v,MotionEvent event){
  int action=event.getAction();
  if (action == MotionEvent.ACTION_DOWN) {
    return true;
  }
 else   if (action == MotionEvent.ACTION_UP) {
    int sxy=gameView.getSxy();
    int x=(int)event.getX() / sxy;
    int y=(int)event.getY() / sxy;
    if (gameView.isEnabled() && x >= 0 && x < gameView.getBoardSize() && y >= 0 & y < gameView.getBoardSize()) {
      if (gameView.getBoard().get(x,y) == GamePlayer.EMPTY) {
        GamePlayer player=gameView.getBoard().getCurrentPlayer();
        putPlayer(x,y,player);
      }
    }
    return true;
  }
  return false;
}",0.9083469721767594
184225,"/** 
 * Get the current game state
 * @return State of the game
 */
public GameState getState(){
  for (int i=0, n=0; i < board.length; i++) {
    if (board[x][i] == player) {
      n++;
    }
 else     if (board[x][i] == GamePlayer.EMPTY) {
      if (n > 0) {
        n--;
      }
    }
 else {
      break;
    }
    if (n == inRow) {
      return GameState.WIN;
    }
  }
  for (int i=0, n=0; i < board.length; i++) {
    if (board[i][y] == player) {
      n++;
    }
 else     if (board[i][y] == GamePlayer.EMPTY) {
      if (n > 0) {
        n--;
      }
    }
 else {
      break;
    }
    if (n == inRow) {
      return GameState.WIN;
    }
  }
  if (x == y) {
    for (int i=0, n=0; i < board.length; i++) {
      if (board[i][i] == player) {
        n++;
      }
 else       if (board[i][i] == GamePlayer.EMPTY) {
        if (n > 0) {
          n--;
        }
      }
 else {
        break;
      }
      if (n == inRow) {
        return GameState.WIN;
      }
    }
  }
  for (int i=0, n=0; i < board.length; i++) {
    if (board[i][(board.length - 1) - i] == player) {
      n++;
    }
 else     if (board[i][(board.length - 1) - i] == GamePlayer.EMPTY) {
      if (n > 0) {
        n--;
      }
    }
    if (n == inRow) {
      return GameState.WIN;
    }
  }
  if (moveCount == Math.pow(board.length,2) - 1) {
    return GameState.DRAW;
  }
  return GameState.NEUTRAL;
}","/** 
 * Get the current game state
 * @return State of the game
 */
public GameState getState(){
  for (int i=0, n=0; i < board.length; i++) {
    if (board[x][i] == player) {
      n++;
    }
 else     if (board[x][i] == GamePlayer.EMPTY) {
      n=0;
    }
 else {
      break;
    }
    if (n == inRow) {
      return GameState.WIN;
    }
  }
  for (int i=0, n=0; i < board.length; i++) {
    if (board[i][y] == player) {
      n++;
    }
 else     if (board[i][y] == GamePlayer.EMPTY) {
      n=0;
    }
 else {
      break;
    }
    if (n == inRow) {
      return GameState.WIN;
    }
  }
  if (x == y) {
    for (int i=0, n=0; i < board.length; i++) {
      if (board[i][i] == player) {
        n++;
      }
 else       if (board[i][i] == GamePlayer.EMPTY) {
        n=0;
      }
 else {
        break;
      }
      if (n == inRow) {
        return GameState.WIN;
      }
    }
  }
  for (int i=0, n=0; i < board.length; i++) {
    if (board[i][(board.length - 1) - i] == player) {
      n++;
    }
 else     if (board[i][(board.length - 1) - i] == GamePlayer.EMPTY) {
      n=0;
    }
    if (n == inRow) {
      return GameState.WIN;
    }
  }
  if (moveCount == Math.pow(board.length,2) - 1) {
    return GameState.DRAW;
  }
  return GameState.NEUTRAL;
}",0.9456603773584904
184226,"/** 
 * Test 3x3 game with a column win
 */
@Test public void testGame3x3_ColumnWin(){
  final GameBoard b=new GameBoard(3,3);
  assertEquals(VALID_MOVE,b.put(0,0,PLAYER1));
  assertEquals(PLAYER1,b.get(0,0));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(1,0,PLAYER2));
  assertEquals(PLAYER2,b.get(1,0));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(0,1,PLAYER1));
  assertEquals(PLAYER1,b.get(0,1));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(1,1,PLAYER2));
  assertEquals(PLAYER2,b.get(1,1));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(0,2,PLAYER1));
  assertEquals(PLAYER1,b.get(0,2));
  System.out.println(b.toString());
  assertEquals(WIN,b.getState());
}","/** 
 * Test 3x3 game with a column win
 */
@Test public void testGame3x3_ColumnWin(){
  final GameBoard b=new GameBoard(3,3);
  assertEquals(VALID_MOVE,b.put(0,0,PLAYER1));
  assertEquals(PLAYER1,b.get(0,0));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(1,0,PLAYER2));
  assertEquals(PLAYER2,b.get(1,0));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(0,1,PLAYER1));
  assertEquals(PLAYER1,b.get(0,1));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(1,1,PLAYER2));
  assertEquals(PLAYER2,b.get(1,1));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(0,2,PLAYER1));
  assertEquals(PLAYER1,b.get(0,2));
  assertEquals(WIN,b.getState());
}",0.9759036144578314
184227,"/** 
 * Get the current game state
 * @return State of the game
 */
public GameState getState(){
  for (int i=0; i < inRow; i++) {
    if (board[x][i] != player) {
      break;
    }
    if (i == inRow - 1) {
      return GameState.WIN;
    }
  }
  for (int i=0; i < inRow; i++) {
    if (board[i][y] != player) {
      break;
    }
    if (i == inRow - 1) {
      return GameState.WIN;
    }
  }
  if (x == y) {
    for (int i=0; i < inRow; i++) {
      if (board[i][i] != player) {
        break;
      }
      if (i == inRow - 1) {
        return GameState.WIN;
      }
    }
  }
  for (int i=0; i < inRow; i++) {
    if (board[i][(inRow - 1) - i] != player) {
      break;
    }
    if (i == inRow - 1) {
      return GameState.WIN;
    }
  }
  if (moveCount == (inRow ^ 2) - 1) {
    return GameState.DRAW;
  }
  return GameState.NEUTRAL;
}","/** 
 * Get the current game state
 * @return State of the game
 */
public GameState getState(){
  for (int i=0; i < inRow; i++) {
    if (board[x][i] != player) {
      break;
    }
    if (i == inRow - 1) {
      return GameState.WIN;
    }
  }
  for (int i=0; i < inRow; i++) {
    if (board[i][y] != player) {
      break;
    }
    if (i == inRow - 1) {
      return GameState.WIN;
    }
  }
  if (x == y) {
    for (int i=0; i < inRow; i++) {
      if (board[i][i] != player) {
        break;
      }
      if (i == inRow - 1) {
        return GameState.WIN;
      }
    }
  }
  for (int i=0; i < inRow; i++) {
    if (board[i][(inRow - 1) - i] != player) {
      break;
    }
    if (i == inRow - 1) {
      return GameState.WIN;
    }
  }
  if (moveCount == Math.pow(inRow,2)) {
    return GameState.DRAW;
  }
  return GameState.NEUTRAL;
}",0.983451536643026
184228,"/** 
 * Set the position to the given player
 * @param x X coordinate
 * @param y Y coordinate
 * @param p Player to set
 * @return Game state
 */
public GameState put(int x,int y,GamePlayer p){
  if (board[x][y] == GamePlayer.EMPTY) {
    board[x][y]=p;
    this.x=x;
    this.y=y;
    this.player=p;
    moveCount++;
    return GameState.VALID_MOVE;
  }
 else {
    return GameState.INVALID_MOVE;
  }
}","/** 
 * Set the position to the given player
 * @param x X coordinate
 * @param y Y coordinate
 * @param p Player to set
 * @return Game state
 */
public GameState put(int x,int y,GamePlayer p){
  if (x < 0 || x >= board.length) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",board.length - 1));
  }
  if (y < 0 || y >= board[x].length) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",board[x].length - 1));
  }
  if (board[x][y] == GamePlayer.EMPTY) {
    board[x][y]=p;
    this.x=x;
    this.y=y;
    this.player=p;
    moveCount++;
    return GameState.VALID_MOVE;
  }
 else {
    return GameState.INVALID_MOVE;
  }
}",0.7509293680297398
184229,"public GameState put(int x,int y,GameState s){
  if (board[x][y] == GameState.EMPTY) {
    board[x][y]=s;
    this.x=x;
    this.y=x;
    this.player=s;
    moveCount++;
    return GameState.VALID_MOVE;
  }
 else {
    return GameState.INVALID_MOVE;
  }
}","/** 
 * Set the position to the given state
 * @param x X coordinate
 * @param y Y coordinate
 * @param s State to set
 * @return
 */
public GameState put(int x,int y,GameState s){
  if (board[x][y] == GameState.EMPTY) {
    board[x][y]=s;
    this.x=x;
    this.y=y;
    this.player=s;
    moveCount++;
    return GameState.VALID_MOVE;
  }
 else {
    return GameState.INVALID_MOVE;
  }
}",0.7888198757763976
184230,"@Test public void testGame3x3(){
  GameBoard b=new GameBoard(3);
  b.setInRow(3);
  assertEquals(VALID_MOVE,b.put(0,0,PLAYER1));
  assertEquals(PLAYER1,b.get(0,0));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(0,1,PLAYER2));
  assertEquals(PLAYER2,b.get(0,1));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(1,0,PLAYER1));
  assertEquals(PLAYER1,b.get(1,0));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(1,1,PLAYER2));
  assertEquals(PLAYER2,b.get(1,1));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(2,0,PLAYER1));
  assertEquals(PLAYER1,b.get(2,0));
  assertEquals(WIN,b.getState());
}","@Test public void testGame3x3(){
  GameBoard b=new GameBoard(3);
  b.setInRow(3);
  assertEquals(VALID_MOVE,b.put(0,0,PLAYER1));
  assertEquals(PLAYER1,b.get(0,0));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(0,1,PLAYER2));
  assertEquals(PLAYER2,b.get(0,1));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(1,0,PLAYER1));
  assertEquals(PLAYER1,b.get(1,0));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(1,1,PLAYER2));
  assertEquals(PLAYER2,b.get(1,1));
  assertEquals(NEUTRAL,b.getState());
  assertEquals(VALID_MOVE,b.put(2,0,PLAYER1));
  assertEquals(PLAYER1,b.get(2,0));
  System.out.println(b.toString());
  assertEquals(WIN,b.getState());
}",0.9743589743589745
184231,"public void updateVariableValue(String variable,Object componentValue){
  processVariables.put(variable,componentValue);
}","public void updateVariableValue(String variable,Object componentValue){
  processVariables.put(variable,componentValue);
  groovyContext.put(variable,componentValue);
}",0.8413793103448276
184232,"/** 
 * Open already started task
 * @param taskInstance
 * @return
 * @throws Exception
 */
public void openTask(TaskInstance taskInstance) throws Exception {
  this.taskInstance=taskInstance;
  if (!activityDefinitions.containsKey(taskInstance.getActivityName()))   return;
  processInstanceUUID=taskInstance.getProcessInstanceUUID();
  Activity activity=activityDefinitions.get(taskInstance.getActivityName());
  PageFlow pageFlow=activity.getPageflow();
  taskManager=new TaskManager(this);
  taskManager.setActivity(activity);
  initProcessVariables();
  updateView(taskManager.renderPageflow(pageFlow));
}","/** 
 * Open already started task
 * @param taskInstance
 * @return
 * @throws Exception
 */
public void openTask(TaskInstance taskInstance) throws Exception {
  this.taskInstance=taskInstance;
  if (taskInstance.getProcessDefinitionUUID().equals(this.processDefinitionUUID) == false) {
    this.processDefinitionUUID=taskInstance.getProcessDefinitionUUID();
    initManagerVariables();
  }
  if (!activityDefinitions.containsKey(taskInstance.getActivityName()))   return;
  processInstanceUUID=taskInstance.getProcessInstanceUUID();
  Activity activity=activityDefinitions.get(taskInstance.getActivityName());
  PageFlow pageFlow=activity.getPageflow();
  taskManager=new TaskManager(this);
  taskManager.setActivity(activity);
  updateView(taskManager.renderPageflow(pageFlow));
}",0.7982770997846375
184233,"private void updateView(List<Component> components){
  this.buttons.removeAllComponents();
  this.taskPanel.removeAllComponents();
  if (components.size() == 1) {
    Component c=components.get(0);
    this.taskPanel.addComponent(c);
  }
 else {
    Accordion accordionLayout=new Accordion();
    accordionLayout.setSizeFull();
    for (    Component component : components) {
      accordionLayout.addTab(component,component.getCaption(),null);
    }
    this.taskPanel.addComponent(accordionLayout);
  }
  for (  Entry<String,TaskField> component : this.taskManager.getFields().entrySet()) {
    TaskField tf=component.getValue();
    if (tf.getWidget().getType() == WidgetType.BUTTON_SUBMIT) {
      Button button=(Button)tf.getComponent();
      this.buttons.addButton(button);
    }
  }
  Button buttonKatkesta=new Button(""String_Node_Str"");
  this.buttons.addButton(buttonKatkesta);
  this.buttons.setComponentAlignment(buttonKatkesta,Alignment.MIDDLE_RIGHT);
  buttonKatkesta.setSizeUndefined();
  Button buttonSulge=new Button(""String_Node_Str"");
  this.buttons.addButton(buttonSulge);
  this.buttons.setComponentAlignment(buttonSulge,Alignment.MIDDLE_RIGHT);
  buttonSulge.setSizeUndefined();
}","private void updateView(List<Component> components){
  this.buttons.removeAllComponents();
  this.taskPanel.removeAllComponents();
  if (components.size() == 1) {
    Component c=components.get(0);
    this.taskPanel.addComponent(c);
  }
 else {
    Accordion accordionLayout=new Accordion();
    accordionLayout.setSizeFull();
    for (    Component component : components) {
      accordionLayout.addTab(component,component.getCaption(),null);
    }
    this.taskPanel.addComponent(accordionLayout);
  }
  for (  Entry<String,TaskField> component : this.taskManager.getFields().entrySet()) {
    TaskField tf=component.getValue();
    if (tf.getWidget().getType() == WidgetType.BUTTON_SUBMIT) {
      Button button=(Button)tf.getComponent();
      this.buttons.addButton(button);
    }
  }
  Button buttonKatkesta=new Button(""String_Node_Str"");
  buttonKatkesta.addListener(new Button.ClickListener(){
    public void buttonClick(    ClickEvent event){
      try {
        if (taskInstance != null)         getBpmModule().cancelProcessInstance(getProcessInstanceUUID());
        getWindow().close();
      }
 catch (      Exception e) {
        getWindow().showError(""String_Node_Str"");
        throw new RuntimeException(e);
      }
    }
  }
);
  this.buttons.addButton(buttonKatkesta);
  this.buttons.setComponentAlignment(buttonKatkesta,Alignment.MIDDLE_RIGHT);
  buttonKatkesta.setWidth(""String_Node_Str"");
  Button buttonClose=new Button(""String_Node_Str"");
  buttonClose.addListener(new Button.ClickListener(){
    public void buttonClick(    ClickEvent event){
      getWindow().close();
    }
  }
);
  this.buttons.addButton(buttonClose);
  this.buttons.setComponentAlignment(buttonClose,Alignment.MIDDLE_RIGHT);
  buttonClose.setWidth(""String_Node_Str"");
}",0.7579939414338607
184234,"public void finishTask(TaskManager manager){
  try {
    String confirmationMessage=manager.getConfirmationMessage();
    if (!StringUtils.isNullOrEmpty(confirmationMessage)) {
      getWindow().showInformation(confirmationMessage);
    }
    if (taskInstance != null) {
      getBpmModule().finishTask(taskInstance,true,getProcessVariables(),manager.getActivityVariables(),null);
    }
    taskInstance=bpmModule.nextUserTask(getProcessInstanceUUID(),ProcessbaseApplication.getCurrent().getUserName());
    if (taskInstance != null) {
      manager.Dispose();
      openTask(taskInstance);
    }
 else {
      if (window != null) {
        window.showInformation(""String_Node_Str"");
        window.close();
        return;
      }
    }
  }
 catch (  TaskNotFoundException e) {
    window.showError(e.getMessage());
  }
catch (  IllegalTaskStateException e) {
    window.showError(e.getMessage());
  }
catch (  InstanceNotFoundException e) {
    window.showError(e.getMessage());
  }
catch (  VariableNotFoundException e) {
    window.showError(e.getMessage());
  }
catch (  Exception e) {
    window.showError(e.getMessage());
  }
}","public void finishTask(TaskManager manager){
  try {
    String confirmationMessage=manager.getConfirmationMessage();
    if (!StringUtils.isNullOrEmpty(confirmationMessage)) {
      getWindow().showInformation(confirmationMessage);
    }
    if (taskInstance != null) {
      getBpmModule().finishTask(taskInstance,true,getProcessVariables(),manager.getActivityVariables(),null);
    }
    taskInstance=bpmModule.nextUserTask(getProcessInstanceUUID(),ProcessbaseApplication.getCurrent().getUserName());
    if (taskInstance != null) {
      manager.Dispose();
      openTask(taskInstance);
    }
 else     if (window != null) {
      window.showInformation(""String_Node_Str"");
      window.close();
      return;
    }
  }
 catch (  TaskNotFoundException e) {
    window.showError(e.getMessage());
  }
catch (  IllegalTaskStateException e) {
    window.showError(e.getMessage());
  }
catch (  InstanceNotFoundException e) {
    window.showError(e.getMessage());
  }
catch (  VariableNotFoundException e) {
    window.showError(e.getMessage());
  }
catch (  Exception e) {
    window.showError(e.getMessage());
  }
}",0.9662222222222222
184235,"public Map<String,Object> initGroovyContext(){
  if (groovyContext == null) {
    groovyContext=new Hashtable<String,Object>();
    ProcessbaseApplication application=ProcessbaseApplication.getCurrent();
    groovyContext.put(""String_Node_Str"",application);
    groovyContext.put(""String_Node_Str"",application.getUserName());
  }
  return groovyContext;
}","public Map<String,Object> initGroovyContext(){
  groovyContext=new HashMap<String,Object>();
  ProcessbaseApplication application=ProcessbaseApplication.getCurrent();
  groovyContext.put(""String_Node_Str"",application);
  groovyContext.put(""String_Node_Str"",application.getUserName());
  for (  Entry<String,Object> pvar : processVariables.entrySet()) {
    Object value=pvar.getValue();
    groovyContext.put(pvar.getKey(),value);
  }
  return groovyContext;
}",0.7312883435582822
184236,"private void initProcessVariables(){
  try {
    if (this.getTaskInstance() != null) {
      processDataFields=getBpmModule().getProcessDataFields(this.getTaskInstance().getProcessDefinitionUUID());
      processVariables=getBpmModule().getProcessInstanceVariables(this.getTaskInstance().getProcessInstanceUUID());
    }
 else {
      processDataFields=getBpmModule().getProcessDataFields(processDefinitionUUID);
    }
    initGroovyContext();
    label=process.getProcessLabel();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","void initProcessVariables(){
  try {
    if (this.getTaskInstance() != null) {
      processDataFields=getBpmModule().getProcessDataFields(this.getTaskInstance().getProcessDefinitionUUID());
      processVariables=getBpmModule().getProcessInstanceVariables(this.getTaskInstance().getProcessInstanceUUID());
    }
 else {
      processDataFields=getBpmModule().getProcessDataFields(processDefinitionUUID);
    }
    initGroovyContext();
    label=process.getProcessLabel();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.9925650557620818
184237,"private void defineAccess() throws Exception {
  accessSet=new HashSet<String>();
  String userName=ProcessbaseApplication.getCurrent().getUserName();
  BPMModule bpmModule=ProcessbaseApplication.getCurrent().getBpmModule();
  user=bpmModule.findUserByUserName(userName);
  if (userName.equals(BPMModule.USER_GUEST)) {
    accessSet.add(""String_Node_Str"");
    return;
  }
  for (  Membership membership : user.getMemberships()) {
    if (membership.getRole().getName().equals(IdentityAPI.ADMIN_ROLE_NAME)) {
      if (membership.getGroup().getName().equalsIgnoreCase(""String_Node_Str"")) {
        accessSet.add(""String_Node_Str"");
      }
 else       if (membership.getGroup().getName().equalsIgnoreCase(""String_Node_Str"")) {
        accessSet.add(""String_Node_Str"");
      }
 else       if (membership.getGroup().getName().equalsIgnoreCase(""String_Node_Str"")) {
        accessSet.add(""String_Node_Str"");
      }
 else       if (membership.getGroup().getName().equalsIgnoreCase(""String_Node_Str"")) {
        accessSet.add(""String_Node_Str"");
      }
 else       if (membership.getGroup().getName().equalsIgnoreCase(""String_Node_Str"")) {
        accessSet.add(""String_Node_Str"");
      }
    }
  }
  if (bpmModule.isUserAdmin()) {
    accessSet.add(""String_Node_Str"");
    accessSet.add(""String_Node_Str"");
    accessSet.add(""String_Node_Str"");
    accessSet.add(""String_Node_Str"");
    accessSet.add(""String_Node_Str"");
  }
  accessSet.add(""String_Node_Str"");
}","private void defineAccess() throws Exception {
  accessSet=new HashSet<String>();
  String userName=ProcessbaseApplication.getCurrent().getUserName();
  BPMModule bpmModule=ProcessbaseApplication.getCurrent().getBpmModule();
  user=bpmModule.findUserByUserName(userName);
  if (userName.equals(BPMModule.USER_GUEST)) {
    accessSet.add(""String_Node_Str"");
    return;
  }
  for (  Membership membership : user.getMemberships()) {
    if (membership.getRole().getName().equals(IdentityAPI.ADMIN_ROLE_NAME)) {
      if (membership.getGroup().getName().equalsIgnoreCase(""String_Node_Str"")) {
        accessSet.add(""String_Node_Str"");
      }
 else       if (membership.getGroup().getName().equalsIgnoreCase(""String_Node_Str"")) {
        accessSet.add(""String_Node_Str"");
      }
 else       if (membership.getGroup().getName().equalsIgnoreCase(""String_Node_Str"")) {
        accessSet.add(""String_Node_Str"");
      }
 else       if (membership.getGroup().getName().equalsIgnoreCase(""String_Node_Str"")) {
        accessSet.add(""String_Node_Str"");
      }
 else       if (membership.getGroup().getName().equalsIgnoreCase(""String_Node_Str"")) {
        accessSet.add(""String_Node_Str"");
      }
    }
  }
  if (bpmModule.isUserAdmin() || ""String_Node_Str"".equals(userName)) {
    accessSet.add(""String_Node_Str"");
    accessSet.add(""String_Node_Str"");
    accessSet.add(""String_Node_Str"");
    accessSet.add(""String_Node_Str"");
    accessSet.add(""String_Node_Str"");
  }
  accessSet.add(""String_Node_Str"");
}",0.9871708305199188
184238,"protected void finishProcess(){
  if (processManagerStack.size() > 0) {
    ProcessManager pm=processManagerStack.pop();
    setContent(pm);
    pm.reloadTask();
    pm.setWindow(this);
    setCaption(pm.getLabel());
    processManager=pm;
  }
 else {
    this.getParent().showNotification(""String_Node_Str"");
    this.close();
  }
}","protected void finishProcess(){
  if (processManagerStack.size() > 0) {
    ProcessManager pm=processManagerStack.pop();
    setContent(pm);
    pm.reloadTask();
    pm.setWindow(this);
    setCaption(pm.getLabel());
    processManager=pm;
  }
 else {
    if (processManager != null && processManager.getTaskManager() != null && StringUtils.isNotBlank(processManager.getTaskManager().getConfirmationMessage()))     this.getParent().showNotification(processManager.getTaskManager().getConfirmationMessage());
 else     this.getParent().showNotification(""String_Node_Str"");
    this.close();
  }
}",0.7176724137931034
184239,"public void reloadTask(){
  try {
    TaskInstance nextTask=bpmModule.nextUserTask(getProcessInstanceUUID(),ProcessbaseApplication.getCurrent().getUserName());
    if (nextTask != null) {
      openTask(nextTask);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void reloadTask(){
  try {
    TaskInstance nextTask=bpmModule.nextUserTask(getProcessInstanceUUID(),ProcessbaseApplication.getCurrent().getUserName());
    if (nextTask != null) {
      openTask(nextTask);
      return;
    }
    if (actions != null)     actions.onFinishProcess(processDefinitionUUID);
    return;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8441754916792739
184240,"private ImmediateUpload getUpload(String fileName){
  ImmediateUpload component=null;
  String processUUID=null;
  boolean hasFile=false;
  ProcessManager processManager=taskManager.getProcessManager();
  if (processManager.getTaskInstance() != null) {
    processUUID=processManager.getTaskInstance().getProcessInstanceUUID().toString();
    try {
      AttachmentInstance attachment=processManager.getBpmModule().getAttachment(processUUID,widget.getVariableBound());
      fileName=attachment.getFileName();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (fileName != null) {
      hasFile=true;
    }
  }
  component=new ImmediateUpload(processUUID,widget.getLabel(),widget.getInitialValue().getExpression(),fileName,hasFile,widget.isReadonly(),ProcessbaseApplication.getCurrent().getPbMessages());
  return component;
}","private ImmediateUpload getUpload(String fileName){
  ImmediateUpload component=null;
  String processUUID=null;
  boolean hasFile=false;
  String boundVariable=widget.getVariableBound();
  ProcessManager processManager=taskManager.getProcessManager();
  if (processManager.getTaskInstance() != null) {
    processUUID=processManager.getTaskInstance().getProcessInstanceUUID().toString();
    try {
      AttachmentInstance attachment=processManager.getBpmModule().getAttachment(processUUID,boundVariable);
      fileName=attachment.getFileName();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (fileName != null) {
      hasFile=true;
    }
  }
  String expression=""String_Node_Str"";
  if (widget.getInitialValue() != null)   expression=widget.getInitialValue().getExpression();
  component=new ImmediateUpload(processUUID,widget.getLabel(),boundVariable,fileName,hasFile,widget.isReadonly(),ProcessbaseApplication.getCurrent().getPbMessages());
  return component;
}",0.6163863266413456
184241,"public Object getComponentValue(){
  if (component != null) {
    if (component instanceof AbstractField) {
      return ((AbstractField)component).getValue();
    }
 else     if (component instanceof GeneratedTable) {
      return ((GeneratedTable)component).getTableValue();
    }
 else     if (component instanceof CheckBox) {
      return ((CheckBox)component).booleanValue();
    }
 else {
    }
  }
  if (widget == null) {
    return null;
  }
  return null;
}","public Object getComponentValue(Action action){
  if (component != null) {
    if (component instanceof CheckBox) {
      return ((CheckBox)component).booleanValue();
    }
 else     if (component instanceof Button) {
      return action.getExpression();
    }
 else     if (component instanceof AbstractField) {
      return ((AbstractField)component).getValue();
    }
 else     if (component instanceof GeneratedTable) {
      return ((GeneratedTable)component).getTableValue();
    }
 else {
    }
  }
  if (widget == null) {
    return null;
  }
  return null;
}",0.5924491771539206
184242,"public void onTaskFieldButtonClick(TaskField field,ClickEvent event) throws Exception {
  if (field.getWidget().getType() == WidgetType.BUTTON_SUBMIT) {
    if (actions != null) {
      for (      Action action : actions) {
        if (action.getSubmitButton() != null && action.getSubmitButton().equalsIgnoreCase(field.getName())) {
          field.addAction(action);
        }
      }
    }
    onFinishTask();
  }
}","public void onTaskFieldButtonClick(TaskField field,ClickEvent event) throws Exception {
  if (field.getWidget().getType() == WidgetType.BUTTON_SUBMIT) {
    if (actions != null) {
      for (      Action action : actions) {
        if (action.getSubmitButton() != null && action.getSubmitButton().equalsIgnoreCase(field.getName())) {
          field.addAction(action);
        }
      }
    }
    try {
      onFinishTask();
    }
 catch (    Validator.InvalidValueException e) {
      getProcessManager().getWindow().showError(e.getMessage());
    }
  }
}",0.8521560574948666
184243,"public void onFinishTask() throws Exception {
  List<String> errors=new ArrayList<String>();
  for (  Entry<String,TaskField> field : getFields().entrySet()) {
    TaskField taskField=field.getValue();
    String error=taskField.validate();
    if (error != null)     errors.add(error);
    if (taskField.getActions() != null) {
      for (      Action action : taskField.getActions()) {
        if (action.getVariableType() != null) {
          if (action.getVariableType().equals(VariableType.PROCESS_VARIABLE)) {
            processManager.registerModifiedVariable(action.getVariable());
            processManager.updateVariableValue(action.getVariable(),taskField.getComponentValue());
          }
 else           if (action.getVariableType().equals(VariableType.ACTIVITY_VARIABLE)) {
            processManager.registerModifiedVariable(action.getVariable());
            updateVariableValue(action.getVariable(),taskField.getComponentValue());
          }
        }
 else         if (action.getType().equals(ActionType.SET_ATTACHMENT)) {
          ImmediateUpload upload=(ImmediateUpload)taskField.getComponent();
          try {
            processManager.getBpmModule().addAttachment(processManager.getProcessInstanceUUID(),taskField.getName(),upload.getFileName(),upload.getMimeType(),upload.getFileBody());
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
  if (errors.size() > 0)   return;
  if (processManager.getTaskInstance() == null) {
    try {
      processManager.initializeNewProcess();
      processManager.finishTask(this);
    }
 catch (    ProcessNotFoundException e) {
      e.printStackTrace();
    }
catch (    VariableNotFoundException e) {
      e.printStackTrace();
    }
catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    processManager.finishTask(this);
  }
}","public void onFinishTask() throws Exception {
  List<String> errors=new ArrayList<String>();
  for (  Entry<String,TaskField> field : getFields().entrySet()) {
    TaskField taskField=field.getValue();
    String error=taskField.validate();
    if (error != null)     errors.add(error);
    if (taskField.getActions() != null) {
      for (      Action action : taskField.getActions()) {
        if (action.getVariableType() != null) {
          if (action.getVariableType().equals(VariableType.PROCESS_VARIABLE)) {
            processManager.registerModifiedVariable(action.getVariable());
            processManager.updateVariableValue(action.getVariable(),taskField.getComponentValue(action));
          }
 else           if (action.getVariableType().equals(VariableType.ACTIVITY_VARIABLE)) {
            processManager.registerModifiedVariable(action.getVariable());
            updateVariableValue(action.getVariable(),taskField.getComponentValue(action));
          }
        }
 else         if (action.getType().equals(ActionType.SET_ATTACHMENT)) {
          ImmediateUpload upload=(ImmediateUpload)taskField.getComponent();
          try {
            processManager.getBpmModule().addAttachment(processManager.getProcessInstanceUUID(),taskField.getName(),upload.getFileName(),upload.getMimeType(),upload.getFileBody());
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
  if (errors.size() > 0)   return;
  if (processManager.getTaskInstance() == null) {
    try {
      processManager.initializeNewProcess();
      processManager.finishTask(this);
    }
 catch (    ProcessNotFoundException e) {
      e.printStackTrace();
    }
catch (    VariableNotFoundException e) {
      e.printStackTrace();
    }
catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    processManager.finishTask(this);
  }
}",0.9968237162519852
184244,"public Set<LightProcessDefinition> getAllowedLightProcessDefinitions(Group groupFilter) throws Exception {
  logger.debug(""String_Node_Str"");
  initContext();
  User user=getIdentityAPI().findUserByUserName(currentUserUID);
  Set<String> membershipUUIDs=new HashSet<String>();
  for (  Membership membership : user.getMemberships()) {
    if (groupFilter == null)     membershipUUIDs.add(membership.getUUID());
 else     if (membership.getGroup().getName().equals(groupFilter.getName()))     membershipUUIDs.add(membership.getUUID());
  }
  List<Rule> userRules=getManagementAPI().getApplicableRules(RuleType.PROCESS_START,null,null,null,membershipUUIDs,null);
  Set<String> processException;
  Set<ProcessDefinitionUUID> processUUIDException=new HashSet<ProcessDefinitionUUID>();
  for (  Rule r : userRules) {
    processException=r.getEntities();
    for (    String processID : processException) {
      processUUIDException.add(new ProcessDefinitionUUID(processID));
    }
  }
  Set<LightProcessDefinition> result=new HashSet<LightProcessDefinition>();
  for (  LightProcessDefinition lpd : getQueryDefinitionAPI().getLightProcesses(processUUIDException)) {
    if (lpd.getState().equals(ProcessState.ENABLED)) {
      result.add(lpd);
    }
  }
  return result;
}","public Set<LightProcessDefinition> getAllowedLightProcessDefinitions(Group groupFilter) throws Exception {
  logger.debug(""String_Node_Str"");
  initContext();
  User user=getIdentityAPI().findUserByUserName(currentUserUID);
  Set<String> membershipUUIDs=new HashSet<String>();
  if (groupFilter == null) {
    return getQueryDefinitionAPI().getLightProcesses(ProcessState.ENABLED);
  }
  for (  Membership membership : user.getMemberships()) {
    if (groupFilter == null)     membershipUUIDs.add(membership.getUUID());
 else     if (membership.getGroup().getName().equals(groupFilter.getName()))     membershipUUIDs.add(membership.getUUID());
  }
  List<Rule> userRules=getManagementAPI().getApplicableRules(RuleType.PROCESS_START,null,null,null,membershipUUIDs,null);
  Set<String> processException;
  Set<ProcessDefinitionUUID> processUUIDException=new HashSet<ProcessDefinitionUUID>();
  for (  Rule r : userRules) {
    processException=r.getEntities();
    for (    String processID : processException) {
      processUUIDException.add(new ProcessDefinitionUUID(processID));
    }
  }
  Set<LightProcessDefinition> result=new HashSet<LightProcessDefinition>();
  for (  LightProcessDefinition lpd : getQueryDefinitionAPI().getLightProcesses(processUUIDException)) {
    if (lpd.getState().equals(ProcessState.ENABLED)) {
      result.add(lpd);
    }
  }
  return result;
}",0.2629391764261428
184245,"public void finishTask(TaskInstance task,boolean b,Map<String,Object> pVars,Map<String,Object> aVars,Map<AttachmentInstance,byte[]> attachments) throws TaskNotFoundException, IllegalTaskStateException, InstanceNotFoundException, VariableNotFoundException, Exception {
  logger.debug(""String_Node_Str"");
  initContext();
  if (task.isTaskAssigned() == false && task.getTaskCandidates().contains(currentUserUID)) {
    getRuntimeAPI().startTask(task.getUUID(),true);
  }
  setProcessAndActivityInstanceVariables(task,pVars,aVars);
  if (attachments != null) {
    for (    AttachmentInstance a : attachments.keySet()) {
      logger.debug(a.getProcessInstanceUUID() + ""String_Node_Str"" + a.getName()+ ""String_Node_Str""+ a.getFileName()+ ""String_Node_Str""+ attachments.get(a).length);
    }
    getRuntimeAPI().addAttachments(attachments);
  }
  getRuntimeAPI().finishTask(task.getUUID(),false);
}","public void finishTask(TaskInstance task,boolean b,Map<String,Object> pVars,Map<String,Object> aVars,Map<AttachmentInstance,byte[]> attachments) throws TaskNotFoundException, IllegalTaskStateException, InstanceNotFoundException, VariableNotFoundException, Exception {
  logger.debug(""String_Node_Str"");
  initContext();
  if (task.isTaskAssigned() == false && task.getTaskCandidates().contains(currentUserUID)) {
    LightTaskInstance lightTaskInstance=getQueryRuntimeAPI().getLightTaskInstance(task.getUUID());
    if (lightTaskInstance.getState() != ActivityState.EXECUTING)     getRuntimeAPI().startTask(task.getUUID(),true);
  }
  setProcessAndActivityInstanceVariables(task,pVars,aVars);
  if (attachments != null) {
    for (    AttachmentInstance a : attachments.keySet()) {
      logger.debug(a.getProcessInstanceUUID() + ""String_Node_Str"" + a.getName()+ ""String_Node_Str""+ a.getFileName()+ ""String_Node_Str""+ attachments.get(a).length);
    }
    getRuntimeAPI().addAttachments(attachments);
  }
  getRuntimeAPI().finishTask(task.getUUID(),true);
}",0.9000512557662738
184246,"public void addAttachment(ProcessInstanceUUID instanceUUID,String name,String fileName,String mimeType,byte[] value) throws Exception {
  logger.debug(""String_Node_Str"");
  initContext();
  Map<String,String> metadata=new Hashtable<String,String>();
  metadata.put(""String_Node_Str"",mimeType);
  getRuntimeAPI().addAttachment(instanceUUID,name,null,null,fileName,metadata,value);
}","public void addAttachment(ProcessInstanceUUID instanceUUID,String name,String fileName,String mimeType,byte[] value) throws Exception {
  if (value.length == 0)   return;
  logger.debug(""String_Node_Str"");
  initContext();
  Map<String,String> metadata=new Hashtable<String,String>();
  metadata.put(""String_Node_Str"",mimeType);
  getRuntimeAPI().addAttachment(instanceUUID,name,null,null,fileName,metadata,value);
}",0.9560853199498118
184247,"public Void execute(Environment e) throws Exception {
  DocumentationManager documentatinManager=EnvTool.getDocumentationManager();
  List<Folder> folders=documentatinManager.getFolders(documetName);
  if (folders != null) {
    for (    Folder f : folders) {
      for (      Document d : documentatinManager.getChildrenDocuments(f.getId())) {
        documentatinManager.deleteDocument(d.getId(),true);
      }
      documentatinManager.deleteFolder(f);
    }
  }
  return null;
}","public Void execute(Environment e) throws Exception {
  DocumentationManager documentatinManager=EnvTool.getDocumentationManager();
  List<Folder> folders=documentatinManager.getFolders(documetName);
  if (folders != null) {
    for (    Folder f : folders) {
      delFolder(documentatinManager,f);
    }
  }
  return null;
}",0.6955445544554455
184248,"public XMLProcessDefinition getXmlProcessDefinition(){
  return xmlProcessDefinition;
}","public XMLProcessDefinition getXmlProcessDefinition(String name){
  return xmlProcessDefinition.get(name);
}",0.8923076923076924
184249,"public void setXmlProcessDefinition(XMLProcessDefinition xmlProcessDefinition){
  this.xmlProcessDefinition=xmlProcessDefinition;
}","public void setXmlProcessDefinition(String name,XMLProcessDefinition xmlProcessDefinition){
  if (this.xmlProcessDefinition == null)   this.xmlProcessDefinition=new Hashtable<String,XMLProcessDefinition>();
  this.xmlProcessDefinition.put(name,xmlProcessDefinition);
}",0.4310776942355889
184250,"public void openStartPage(LightProcessDefinition process){
  try {
    String url=ProcessbaseApplication.getCurrent().getBpmModule().getProcessMetaData(process.getUUID()).get(process.getUUID().toString());
    if (url != null && !url.isEmpty() && url.length() > 0) {
      ProcessbaseApplication.getCurrent().removeSessionAttribute(""String_Node_Str"");
      ProcessbaseApplication.getCurrent().removeSessionAttribute(""String_Node_Str"");
      ProcessbaseApplication.getCurrent().setSessionAttribute(""String_Node_Str"",process.getUUID().toString());
      this.getWindow().open(new ExternalResource(url));
    }
 else {
      BarResource barResource=new BarResource(process.getUUID());
      XMLProcessDefinition xmlProcess=barResource.getXmlProcessDefinition();
      if (!xmlProcess.isByPassFormsGeneration()) {
        GeneratedWindow genWindow=new GeneratedWindow(process.getLabel());
        genWindow.setProcessDef(process);
        genWindow.setBarResource(barResource);
        this.getApplication().getMainWindow().addWindow(genWindow);
        genWindow.initUI();
      }
 else {
        ProcessbaseApplication.getCurrent().getBpmModule().startNewProcess(process.getUUID());
        showImportantInformation(ProcessbaseApplication.getCurrent().getPbMessages().getString(""String_Node_Str""));
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    showError(ex.getMessage());
    throw new RuntimeException(ex);
  }
}","public void openStartPage(LightProcessDefinition process){
  try {
    String url=ProcessbaseApplication.getCurrent().getBpmModule().getProcessMetaData(process.getUUID()).get(process.getUUID().toString());
    if (url != null && !url.isEmpty() && url.length() > 0) {
      ProcessbaseApplication.getCurrent().removeSessionAttribute(""String_Node_Str"");
      ProcessbaseApplication.getCurrent().removeSessionAttribute(""String_Node_Str"");
      ProcessbaseApplication.getCurrent().setSessionAttribute(""String_Node_Str"",process.getUUID().toString());
      this.getWindow().open(new ExternalResource(url));
    }
 else {
      BarResource barResource=new BarResource(process.getUUID());
      XMLProcessDefinition xmlProcess=barResource.getXmlProcessDefinition(process.getName());
      if (!xmlProcess.isByPassFormsGeneration()) {
        GeneratedWindow genWindow=new GeneratedWindow(process.getLabel());
        genWindow.setProcessDef(process);
        genWindow.setBarResource(barResource);
        this.getApplication().getMainWindow().addWindow(genWindow);
        genWindow.initUI();
      }
 else {
        ProcessbaseApplication.getCurrent().getBpmModule().startNewProcess(process.getUUID());
        showImportantInformation(ProcessbaseApplication.getCurrent().getPbMessages().getString(""String_Node_Str""));
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    showError(ex.getMessage());
    throw new RuntimeException(ex);
  }
}",0.9941399517407792
184251,"public void openTaskPage(LightTaskInstance task){
  try {
    String url=ProcessbaseApplication.getCurrent().getBpmModule().getProcessMetaData(task.getProcessDefinitionUUID()).get(task.getActivityDefinitionUUID().toString());
    ProcessbaseApplication.getCurrent().removeSessionAttribute(""String_Node_Str"");
    ProcessbaseApplication.getCurrent().setSessionAttribute(""String_Node_Str"",task.getUUID().toString());
    if (url != null && !url.isEmpty() && url.length() > 0) {
      this.getWindow().open(new ExternalResource(url));
    }
 else {
      BarResource barResource=new BarResource(task.getProcessDefinitionUUID());
      XMLProcessDefinition xmlProcess=barResource.getXmlProcessDefinition();
      XMLTaskDefinition taskDef=xmlProcess.getTasks().get(task.getActivityName());
      if (!taskDef.isByPassFormsGeneration()) {
        showError(ProcessbaseApplication.getCurrent().getPbMessages().getString(""String_Node_Str""));
      }
 else       if (!taskDef.isByPassFormsGeneration()) {
        GeneratedWindow genWindow=new GeneratedWindow(task.getActivityLabel());
        genWindow.setTask(ProcessbaseApplication.getCurrent().getBpmModule().getTaskInstance(task.getUUID()));
        genWindow.setBarResource(barResource);
        this.getApplication().getMainWindow().addWindow(genWindow);
        genWindow.initUI();
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    showError(ex.getMessage());
    throw new RuntimeException(ex);
  }
}","public void openTaskPage(LightTaskInstance task){
  try {
    BPMModule bpmModule=ProcessbaseApplication.getCurrent().getBpmModule();
    String url=bpmModule.getProcessMetaData(task.getProcessDefinitionUUID()).get(task.getActivityDefinitionUUID().toString());
    ProcessbaseApplication.getCurrent().removeSessionAttribute(""String_Node_Str"");
    ProcessbaseApplication.getCurrent().setSessionAttribute(""String_Node_Str"",task.getUUID().toString());
    if (url != null && !url.isEmpty() && url.length() > 0) {
      this.getWindow().open(new ExternalResource(url));
    }
 else {
      BarResource barResource=new BarResource(task.getProcessDefinitionUUID());
      ProcessDefinition processDefinition=bpmModule.getProcessDefinition(task.getProcessDefinitionUUID());
      XMLProcessDefinition xmlProcess=barResource.getXmlProcessDefinition(processDefinition.getName());
      XMLTaskDefinition taskDef=xmlProcess.getTasks().get(task.getActivityName());
      if (!taskDef.isByPassFormsGeneration()) {
        showError(ProcessbaseApplication.getCurrent().getPbMessages().getString(""String_Node_Str""));
      }
 else       if (!taskDef.isByPassFormsGeneration()) {
        GeneratedWindow genWindow=new GeneratedWindow(task.getActivityLabel());
        genWindow.setTask(bpmModule.getTaskInstance(task.getUUID()));
        genWindow.setBarResource(barResource);
        this.getApplication().getMainWindow().addWindow(genWindow);
        genWindow.initUI();
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    showError(ex.getMessage());
    throw new RuntimeException(ex);
  }
}",0.8979193758127438
184252,"public void openTaskPage(LightTaskInstance task){
  try {
    LightTaskInstance newTask=ProcessbaseApplication.getCurrent().getBpmModule().getTaskInstance(task.getUUID());
    if (newTask == null || newTask.getState().equals(ActivityState.FINISHED) || newTask.getState().equals(ActivityState.ABORTED)) {
      table.removeItem(task);
      return;
    }
    String url=ProcessbaseApplication.getCurrent().getBpmModule().getProcessMetaData(task.getProcessDefinitionUUID()).get(task.getActivityDefinitionUUID().toString());
    if (url != null && !url.isEmpty() && url.length() > 0) {
      ProcessbaseApplication.getCurrent().removeSessionAttribute(""String_Node_Str"");
      ProcessbaseApplication.getCurrent().removeSessionAttribute(""String_Node_Str"");
      ProcessbaseApplication.getCurrent().setSessionAttribute(""String_Node_Str"",task.getUUID().toString());
      this.getWindow().open(new ExternalResource(url));
    }
 else {
      BarResource barResource=new BarResource(task.getProcessDefinitionUUID());
      XMLProcessDefinition xmlProcess=barResource.getXmlProcessDefinition();
      XMLTaskDefinition taskDef=xmlProcess.getTasks().get(task.getActivityName());
      if (taskDef != null && !taskDef.isByPassFormsGeneration()) {
        GeneratedWindow genWindow=new GeneratedWindow(task.getActivityLabel());
        genWindow.setTask(ProcessbaseApplication.getCurrent().getBpmModule().getTaskInstance(task.getUUID()));
        genWindow.setBarResource(barResource);
        genWindow.setXMLProcessDefinition(xmlProcess);
        genWindow.setTaskList(this);
        this.getApplication().getMainWindow().addWindow(genWindow);
        genWindow.initUI();
      }
 else       if (taskDef != null && taskDef.isByPassFormsGeneration()) {
        ProcessbaseApplication.getCurrent().getBpmModule().startTask(task.getUUID(),true);
        ProcessbaseApplication.getCurrent().getBpmModule().finishTask(task.getUUID(),true);
        showImportantInformation(ProcessbaseApplication.getCurrent().getPbMessages().getString(""String_Node_Str""));
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    showError(ex.getMessage());
    throw new RuntimeException(ex);
  }
}","public void openTaskPage(LightTaskInstance task){
  try {
    BPMModule bpmModule=ProcessbaseApplication.getCurrent().getBpmModule();
    LightTaskInstance newTask=bpmModule.getTaskInstance(task.getUUID());
    if (newTask == null || newTask.getState().equals(ActivityState.FINISHED) || newTask.getState().equals(ActivityState.ABORTED)) {
      table.removeItem(task);
      return;
    }
    String url=bpmModule.getProcessMetaData(task.getProcessDefinitionUUID()).get(task.getActivityDefinitionUUID().toString());
    if (url != null && !url.isEmpty() && url.length() > 0) {
      ProcessbaseApplication.getCurrent().removeSessionAttribute(""String_Node_Str"");
      ProcessbaseApplication.getCurrent().removeSessionAttribute(""String_Node_Str"");
      ProcessbaseApplication.getCurrent().setSessionAttribute(""String_Node_Str"",task.getUUID().toString());
      this.getWindow().open(new ExternalResource(url));
    }
 else {
      BarResource barResource=new BarResource(task.getProcessDefinitionUUID());
      ProcessDefinition processDefinition=bpmModule.getProcessDefinition(task.getProcessDefinitionUUID());
      XMLProcessDefinition xmlProcess=barResource.getXmlProcessDefinition(processDefinition.getName());
      XMLTaskDefinition taskDef=xmlProcess.getTasks().get(task.getActivityName());
      if (taskDef != null && !taskDef.isByPassFormsGeneration()) {
        GeneratedWindow genWindow=new GeneratedWindow(task.getActivityLabel());
        genWindow.setTask(bpmModule.getTaskInstance(task.getUUID()));
        genWindow.setBarResource(barResource);
        genWindow.setXMLProcessDefinition(xmlProcess);
        genWindow.setTaskList(this);
        this.getApplication().getMainWindow().addWindow(genWindow);
        genWindow.initUI();
      }
 else       if (taskDef != null && taskDef.isByPassFormsGeneration()) {
        bpmModule.startTask(task.getUUID(),true);
        bpmModule.finishTask(task.getUUID(),true);
        showImportantInformation(ProcessbaseApplication.getCurrent().getPbMessages().getString(""String_Node_Str""));
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    showError(ex.getMessage());
    throw new RuntimeException(ex);
  }
}",0.9124971441626684
184253,"public XMLProcessDefinition getProcess(){
  return process;
}","public Map<String,XMLProcessDefinition> getProcess(){
  return processPoolMap;
}",0.8652482269503546
184254,"public BonitaFormParcer(byte[] procBytes){
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    Document doc=db.parse(new ByteArrayInputStream(procBytes));
    doc.getDocumentElement().normalize();
    Node mainProcess=doc.getElementsByTagName(""String_Node_Str"").item(0);
    NodeList processNodes=mainProcess.getChildNodes();
    for (int i=0; i < processNodes.getLength(); i++) {
      if (processNodes.item(i) != null && processNodes.item(i).getNodeName().equals(""String_Node_Str"") && processNodes.item(i).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str"")) {
        Node processNode=processNodes.item(i);
        process=new XMLProcessDefinition(processNode.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue(),processNode.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
        process.setByPassFormsGeneration(processNode.getAttributes().getNamedItem(""String_Node_Str"") != null && processNode.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str""));
        NodeList processChilds=processNode.getChildNodes();
        for (int y=0; y < processChilds.getLength(); y++) {
          if (processChilds.item(y).getNodeName().equals(""String_Node_Str"") && processChilds.item(y).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str"")) {
            Node nodeTask=processChilds.item(y);
            if (nodeTask.getChildNodes().getLength() > 0) {
              XMLTaskDefinition task=new XMLTaskDefinition(nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue(),nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
              task.setByPassFormsGeneration(nodeTask.getAttributes().getNamedItem(""String_Node_Str"") != null && nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str""));
              process.addTask(nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue(),task);
            }
          }
 else           if (processChilds.item(y).getNodeName().equals(""String_Node_Str"") && processChilds.item(y).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str"")) {
            NodeList laneChilds=processChilds.item(y).getChildNodes();
            for (int z=0; z < laneChilds.getLength(); z++) {
              if (laneChilds.item(z).getNodeName().equals(""String_Node_Str"") && laneChilds.item(z).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str"")) {
                Node nodeTask=laneChilds.item(z);
                if (nodeTask.getChildNodes().getLength() > 0) {
                  XMLTaskDefinition task=new XMLTaskDefinition(nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue(),nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
                  task.setByPassFormsGeneration(nodeTask.getAttributes().getNamedItem(""String_Node_Str"") != null && nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str""));
                  process.addTask(nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue(),task);
                }
              }
            }
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","public BonitaFormParcer(byte[] procBytes){
  try {
    processPoolMap=new Hashtable<String,XMLProcessDefinition>();
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    Document doc=db.parse(new ByteArrayInputStream(procBytes));
    doc.getDocumentElement().normalize();
    Node mainProcess=doc.getElementsByTagName(""String_Node_Str"").item(0);
    NodeList processNodes=mainProcess.getChildNodes();
    for (int i=0; i < processNodes.getLength(); i++) {
      if (processNodes.item(i) != null && processNodes.item(i).getNodeName().equals(""String_Node_Str"") && processNodes.item(i).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str"")) {
        Node processNode=processNodes.item(i);
        String nodeName=processNode.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        XMLProcessDefinition process=new XMLProcessDefinition(nodeName,processNode.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
        process.setByPassFormsGeneration(processNode.getAttributes().getNamedItem(""String_Node_Str"") != null && processNode.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str""));
        NodeList processChilds=processNode.getChildNodes();
        for (int y=0; y < processChilds.getLength(); y++) {
          if (processChilds.item(y).getNodeName().equals(""String_Node_Str"") && processChilds.item(y).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str"")) {
            Node nodeTask=processChilds.item(y);
            if (nodeTask.getChildNodes().getLength() > 0) {
              XMLTaskDefinition task=new XMLTaskDefinition(nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue(),nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
              task.setByPassFormsGeneration(nodeTask.getAttributes().getNamedItem(""String_Node_Str"") != null && nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str""));
              process.addTask(nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue(),task);
            }
          }
 else           if (processChilds.item(y).getNodeName().equals(""String_Node_Str"") && processChilds.item(y).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str"")) {
            NodeList laneChilds=processChilds.item(y).getChildNodes();
            for (int z=0; z < laneChilds.getLength(); z++) {
              if (laneChilds.item(z).getNodeName().equals(""String_Node_Str"") && laneChilds.item(z).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str"")) {
                Node nodeTask=laneChilds.item(z);
                if (nodeTask.getChildNodes().getLength() > 0) {
                  XMLTaskDefinition task=new XMLTaskDefinition(nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue(),nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
                  task.setByPassFormsGeneration(nodeTask.getAttributes().getNamedItem(""String_Node_Str"") != null && nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str""));
                  process.addTask(nodeTask.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue(),task);
                }
              }
            }
          }
          processPoolMap.put(nodeName,process);
        }
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.9518518518518518
184255,"private void initContext() throws Exception {
  if (Constants.APP_SERVER.startsWith(""String_Node_Str"")) {
    Class authClass=tryClass(""String_Node_Str"");
    if (authClass != null) {
      Method login=authClass.getMethod(""String_Node_Str"");
      login.invoke(authClass.newInstance(),currentUserUID,""String_Node_Str"".toCharArray(),""String_Node_Str"",false);
    }
  }
  DomainOwner.setDomain(Constants.BONITA_DOMAIN);
  UserOwner.setUser(currentUserUID);
}","private void initContext() throws Exception {
  if (Constants.APP_SERVER.startsWith(""String_Node_Str"")) {
  }
  DomainOwner.setDomain(Constants.BONITA_DOMAIN);
  UserOwner.setUser(currentUserUID);
}",0.6045801526717557
184256,"public TaskInstance nextUserTask(ProcessInstanceUUID processInstanceUUID,String currentUserName) throws Exception {
  initContext();
  Set<LightActivityInstance> activities=queryRuntimeAPI.getLightActivityInstances(processInstanceUUID);
  for (  LightActivityInstance instance : activities) {
    if (instance.getState() == ActivityState.READY || instance.getState() == ActivityState.EXECUTING || instance.getState() == ActivityState.SUSPENDED) {
      LightTaskInstance task=instance.getTask();
      if (!task.isTaskAssigned())       return assignAndStartTask(task.getUUID(),currentUserName);
    }
  }
  return null;
}","public TaskInstance nextUserTask(ProcessInstanceUUID processInstanceUUID,String currentUserName) throws Exception {
  initContext();
  Set<ActivityInstance> activities=queryRuntimeAPI.getActivityInstances(processInstanceUUID);
  for (  ActivityInstance instance : activities) {
    if (instance.getState() == ActivityState.READY || instance.getState() == ActivityState.EXECUTING || instance.getState() == ActivityState.SUSPENDED) {
      TaskInstance task=instance.getTask();
      if (task.getTaskCandidates().contains(currentUserName))       return assignAndStartTask(task.getUUID(),currentUserName);
    }
  }
  return null;
}",0.936
184257,"private void commit(){
  for (  GridLayout grid : pages) {
    commitPage(grid);
  }
}","private void commit(){
  for (  VerticalLayout grid : pages) {
    commitPage(grid);
  }
}",0.9545454545454546
184258,"private void commitPage(GridLayout page){
  for (Iterator<Component> iterator=page.getComponentIterator(); iterator.hasNext(); ) {
    Component comp=iterator.next();
    if (comp instanceof AbstractField) {
      try {
        ((AbstractField)comp).setComponentError(null);
        ((AbstractField)comp).validate();
      }
 catch (      InvalidValueException ex) {
        if (ex instanceof EmptyValueException) {
          ((AbstractField)comp).setComponentError(new UserError(((AbstractField)comp).getRequiredError()));
        }
        throw ex;
      }
    }
  }
}","private void commitPage(VerticalLayout page){
  for (Iterator<Component> iterator=page.getComponentIterator(); iterator.hasNext(); ) {
    Component comp=iterator.next();
    if (comp instanceof AbstractField) {
      try {
        ((AbstractField)comp).setComponentError(null);
        ((AbstractField)comp).validate();
      }
 catch (      InvalidValueException ex) {
        if (ex instanceof EmptyValueException) {
          ((AbstractField)comp).setComponentError(new UserError(((AbstractField)comp).getRequiredError()));
        }
        throw ex;
      }
    }
  }
}",0.9895287958115184
184259,"protected void generateWindow() throws Exception {
  prepareAttachments();
  prepareGroovyScripts();
  if (pageFlow == null) {
    showMessage(""String_Node_Str"",Notification.TYPE_WARNING_MESSAGE);
    return;
  }
  for (  Page page : pageFlow.getPages().getPages()) {
    TableStyle ts=barResource.getTableStyle(page);
    GridLayout gridLayout=new GridLayout(ts.getColumns(),ts.getRows());
    gridLayout.setMargin(false,true,true,true);
    gridLayout.setSpacing(true);
    for (    Object wg : page.getWidgets().getWidgetsAndGroups()) {
      Component component=null;
      if (wg instanceof Widget) {
        Widget widget=(Widget)wg;
        component=getComponent(widget);
        components.put(component,widget);
        fields.put(""String_Node_Str"" + widget.getId(),component);
        ComponentStyle componentStyle=ts.getElements().get(widget.getId());
        int fColumn=componentStyle.getPosition().getFColumn();
        int fRow=componentStyle.getPosition().getFRow();
        int tColumn=componentStyle.getPosition().getTColumn();
        int tRow=componentStyle.getPosition().getTRow();
        CSSProperty cssProperty=componentStyle.getCss();
        if (cssProperty != null) {
        }
 else {
          if (!(component instanceof Table) && !(component instanceof Button) && (fColumn == tColumn)) {
            component.setWidth(""String_Node_Str"");
          }
        }
        gridLayout.addComponent(component,fColumn,fRow,tColumn,tRow);
      }
 else       if (wg instanceof WidgetGroup) {
      }
    }
    pages.add(gridLayout);
  }
  taskPanel.setContent(pages.get(currentPage));
  taskPanel.setCaption(pageFlow.getPages().getPages().get(currentPage).getPageLabel());
}","protected void generateWindow() throws Exception {
  prepareAttachments();
  prepareGroovyScripts();
  if (pageFlow == null) {
    showMessage(""String_Node_Str"",Notification.TYPE_WARNING_MESSAGE);
    return;
  }
  for (  Page page : pageFlow.getPages().getPages()) {
    TableStyle ts=barResource.getTableStyle(page);
    GridLayout gridLayout=new GridLayout(ts.getColumns(),ts.getRows());
    gridLayout.setMargin(false,true,true,true);
    gridLayout.setSpacing(true);
    for (    Object wg : page.getWidgets().getWidgetsAndGroups()) {
      Component component=null;
      if (wg instanceof Widget) {
        Widget widget=(Widget)wg;
        component=getComponent(widget);
        components.put(component,widget);
        fields.put(""String_Node_Str"" + widget.getId(),component);
        ComponentStyle componentStyle=ts.getElements().get(widget.getId());
        int fColumn=componentStyle.getPosition().getFColumn();
        int fRow=componentStyle.getPosition().getFRow();
        int tColumn=componentStyle.getPosition().getTColumn();
        int tRow=componentStyle.getPosition().getTRow();
        CSSProperty cssProperty=componentStyle.getCss();
        if (cssProperty != null) {
        }
 else {
          if (!(component instanceof Table) && !(component instanceof Button) && (fColumn == tColumn)) {
            component.setWidth(""String_Node_Str"");
          }
        }
        gridLayout.addComponent(component,fColumn,fRow,tColumn,tRow);
      }
 else       if (wg instanceof WidgetGroup) {
      }
    }
    pages.add(verticalLayout);
  }
  taskPanel.setContent(pages.get(currentPage));
  taskPanel.setCaption(pageFlow.getPages().getPages().get(currentPage).getPageLabel());
}",0.996468510888758
184260,"@Override public void refreshTable(){
  treeTable.removeAllItems();
  try {
    Set<Category> categories=ProcessbaseApplication.getCurrent().getBpmModule().getAllCategories();
    Collection<LightProcessDefinition> processes=ProcessbaseApplication.getCurrent().getBpmModule().getAllowedLightProcessDefinitions();
    for (    Category category : categories) {
      CategoryAndProcessDefinition capParent=new CategoryAndProcessDefinition(category,null);
      addTableRow(capParent,null);
      for (      LightProcessDefinition process : processes) {
        if (process.getCategoryNames().contains(category.getName())) {
          CategoryAndProcessDefinition cap=new CategoryAndProcessDefinition(category,process);
          addTableRow(cap,capParent);
        }
      }
    }
    for (    Object id : treeTable.getItemIds()) {
      if (treeTable.getParent(id) == null && !treeTable.hasChildren(id)) {
        treeTable.removeItem(id);
      }
    }
    this.rowCount=processes.size();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  treeTable.setSortContainerPropertyId(""String_Node_Str"");
  treeTable.setSortAscending(true);
  treeTable.sort();
}","@Override public void refreshTable(){
  treeTable.removeAllItems();
  try {
    Set<Category> categories=ProcessbaseApplication.getCurrent().getBpmModule().getAllCategories();
    Collection<LightProcessDefinition> processes=ProcessbaseApplication.getCurrent().getBpmModule().getAllowedLightProcessDefinitions();
    for (    Category category : categories) {
      CategoryAndProcessDefinition capParent=new CategoryAndProcessDefinition(category,null);
      addTableRow(capParent,null);
      for (      LightProcessDefinition process : processes) {
        if (process.getCategoryNames().contains(category.getName()) || (process.getCategoryNames().size() == 0 && category.getName().equalsIgnoreCase(""String_Node_Str""))) {
          CategoryAndProcessDefinition cap=new CategoryAndProcessDefinition(category,process);
          addTableRow(cap,capParent);
        }
      }
    }
    for (    Object id : treeTable.getItemIds()) {
      if (treeTable.getParent(id) == null && !treeTable.hasChildren(id)) {
        treeTable.removeItem(id);
      }
    }
    this.rowCount=processes.size();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  treeTable.setSortContainerPropertyId(""String_Node_Str"");
  treeTable.setSortAscending(true);
  treeTable.sort();
}",0.9580936729663106
184261,"/** 
 * Application entry point.
 * @param args ignored
 */
public static void main(final String[] args){
  EventQueue.invokeLater(new Runnable(){
    @Override public void run(){
      UIManager.put(""String_Node_Str"",UI.BACKGROUND);
      int device=0;
      if (args.length > 0) {
        device=Integer.parseInt(args[0]);
      }
      MainFrame f=createOnMonitor(device);
      f.setAlwaysOnTop(true);
      f.showFlowGame();
      if (args.length > 1 && args[1].equals(""String_Node_Str"")) {
        startChaosRobot(f);
      }
    }
  }
);
}","/** 
 * Application entry point.
 * @param args ignored
 */
public static void main(final String[] args){
  EventQueue.invokeLater(new Runnable(){
    @Override public void run(){
      UIManager.put(""String_Node_Str"",UI.BACKGROUND);
      int device=0;
      if (args.length > 0) {
        device=Integer.parseInt(args[0]);
      }
      MainFrame f=createOnMonitor(device);
      f.setAlwaysOnTop(true);
      f.showCover();
      if (args.length > 1 && args[1].equals(""String_Node_Str"")) {
        startChaosRobot(f);
      }
    }
  }
);
}",0.9880624426078972
184262,"@Override public void run(){
  UIManager.put(""String_Node_Str"",UI.BACKGROUND);
  int device=0;
  if (args.length > 0) {
    device=Integer.parseInt(args[0]);
  }
  MainFrame f=createOnMonitor(device);
  f.setAlwaysOnTop(true);
  f.showFlowGame();
  if (args.length > 1 && args[1].equals(""String_Node_Str"")) {
    startChaosRobot(f);
  }
}","@Override public void run(){
  UIManager.put(""String_Node_Str"",UI.BACKGROUND);
  int device=0;
  if (args.length > 0) {
    device=Integer.parseInt(args[0]);
  }
  MainFrame f=createOnMonitor(device);
  f.setAlwaysOnTop(true);
  f.showCover();
  if (args.length > 1 && args[1].equals(""String_Node_Str"")) {
    startChaosRobot(f);
  }
}",0.9806835066864784
184263,"public MainFrame(GraphicsConfiguration gc){
  super(gc);
  cardLayout=new CardLayout();
  setLayout(cardLayout);
  coverPanel=new CoverPanel(){
    private static final long serialVersionUID=1L;
    @Override public void onPlayClicked(){
      showRingRoadGame();
    }
  }
;
  add(coverPanel,COVER_CARD);
  ringRoadGamePanel=new RingRoadGamePanel(){
    private static final long serialVersionUID=1L;
    @Override public void goToNextLevel(){
      showFlowGame();
    }
  }
;
  add(ringRoadGamePanel,RING_ROAD_GAME_CARD);
  flowGamePanel=new URoadGamePanel(){
    private static final long serialVersionUID=1L;
    @Override protected void onBackClicked(){
      showRingRoadGame();
    }
    @Override protected void onNextClicked(){
      showCover();
    }
  }
;
  add(flowGamePanel,FLOW_GAME_CARD);
  inactivityTimer=new Timer(INACTIVITY_TIMEOUT_MS,new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showCover();
    }
  }
);
  Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener(){
    @Override public void eventDispatched(    AWTEvent event){
      inactivityTimer.restart();
    }
  }
,AWTEvent.MOUSE_MOTION_EVENT_MASK + AWTEvent.MOUSE_EVENT_MASK);
  inactivityTimer.start();
}","public MainFrame(GraphicsConfiguration gc){
  super(gc);
  cardLayout=new CardLayout();
  setLayout(cardLayout);
  coverPanel=new CoverPanel(){
    private static final long serialVersionUID=1L;
    @Override public void onPlayClicked(){
      showRingRoadGame();
    }
  }
;
  add(coverPanel,COVER_CARD);
  ringRoadGamePanel=new RingRoadGamePanel(){
    private static final long serialVersionUID=1L;
    @Override public void onBackClicked(){
      showCover();
    }
    @Override public void onNextClicked(){
      showFlowGame();
    }
  }
;
  add(ringRoadGamePanel,RING_ROAD_GAME_CARD);
  flowGamePanel=new URoadGamePanel(){
    private static final long serialVersionUID=1L;
    @Override protected void onBackClicked(){
      showRingRoadGame();
    }
    @Override protected void onNextClicked(){
    }
  }
;
  add(flowGamePanel,FLOW_GAME_CARD);
  inactivityTimer=new Timer(INACTIVITY_TIMEOUT_MS,new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showCover();
    }
  }
);
  Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener(){
    @Override public void eventDispatched(    AWTEvent event){
      inactivityTimer.restart();
    }
  }
,AWTEvent.MOUSE_MOTION_EVENT_MASK + AWTEvent.MOUSE_EVENT_MASK);
  inactivityTimer.start();
}",0.9586125344895546
184264,"@Override protected void onNextClicked(){
  showCover();
}","@Override protected void onNextClicked(){
}",0.8514851485148515
184265,"public RingRoadGamePanel(){
  setLayout(new BorderLayout());
  GameChoicePanel titleBar=new GameChoicePanel(false,""String_Node_Str"",true){
    private static final long serialVersionUID=1L;
    @Override public void onNextClicked(){
      goToNextLevel();
    }
  }
;
  add(titleBar,BorderLayout.NORTH);
  ringRoadCanvas=new RingRoadCanvas();
  ringRoadCanvas.setBorder(BorderFactory.createEmptyBorder(UI.PAD,UI.PAD,UI.PAD,UI.PAD));
  ringRoadCanvas.setLayout(new GridBagLayout());
  add(ringRoadCanvas,BorderLayout.CENTER);
  controlPanel=new MessageBubble();
  controlPanel.setLayout(new BorderLayout());
  ringRoadCanvas.add(controlPanel);
  densitySlider=new BigSlider(DENS_MIN_INVKM,DENS_MAX_INVKM,INITIAL_DENSITY_INVKM,HINT_DENSITY_INVKM){
    private static final long serialVersionUID=1L;
{
      setPreferredSize(new Dimension(1,90));
      setBorder(BorderFactory.createEmptyBorder(UI.PAD,0,2 * UI.PAD,0));
    }
    @Override public void onValueUpdated(){
      updateDensity();
    }
  }
;
  controlPanel.add(densitySlider,BorderLayout.NORTH);
  messageContainer=new JPanel();
  messageContainer.setBackground(Color.WHITE);
  controlPanel.add(messageContainer,BorderLayout.CENTER);
  messageLayout=new CardLayout();
  messageContainer.setLayout(messageLayout);
  JPanel freeFlowMessage=new JPanel(new BorderLayout());
  freeFlowMessage.add(UI.makeTrafficReportLabel(""String_Node_Str"",UI.GREEN),BorderLayout.NORTH);
  freeFlowMessage.add(UI.makeStyledTextPane(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  messageContainer.add(freeFlowMessage,FREE_FLOW_CARD);
  JPanel congestionMessage=new JPanel(new BorderLayout());
  congestionMessage.add(UI.makeTrafficReportLabel(""String_Node_Str"",UI.AMBER),BorderLayout.NORTH);
  congestionMessage.add(UI.makeStyledTextPane(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  messageContainer.add(congestionMessage,CONGESTION_CARD);
  JPanel jamMessage=new JPanel(new BorderLayout());
  jamMessage.add(UI.makeTrafficReportLabel(""String_Node_Str"",UI.RED),BorderLayout.NORTH);
  jamMessage.add(UI.makeStyledTextPane(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  messageContainer.add(jamMessage,JAM_CARD);
  messageMachine=new ThresholdMachine(MIN_SPEED_THRESHOLDS,MIN_SPEED_CARDS,MIN_SPEED_TOLERANCE);
  messageTimer=new Timer(ADAPTIVE_MESSAGE_TIMER_DELAY_MS,new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateMessage();
    }
  }
);
}","public RingRoadGamePanel(){
  setLayout(new BorderLayout());
  GameChoicePanel titleBar=new GameChoicePanel(false,""String_Node_Str"",true){
    private static final long serialVersionUID=1L;
    @Override public void onBackClicked(){
      RingRoadGamePanel.this.onBackClicked();
    }
    @Override public void onNextClicked(){
      RingRoadGamePanel.this.onNextClicked();
    }
  }
;
  add(titleBar,BorderLayout.NORTH);
  ringRoadCanvas=new RingRoadCanvas();
  ringRoadCanvas.setBorder(BorderFactory.createEmptyBorder(UI.PAD,UI.PAD,UI.PAD,UI.PAD));
  ringRoadCanvas.setLayout(new GridBagLayout());
  add(ringRoadCanvas,BorderLayout.CENTER);
  controlPanel=new MessageBubble();
  controlPanel.setLayout(new BorderLayout());
  ringRoadCanvas.add(controlPanel);
  densitySlider=new BigSlider(DENS_MIN_INVKM,DENS_MAX_INVKM,INITIAL_DENSITY_INVKM,HINT_DENSITY_INVKM){
    private static final long serialVersionUID=1L;
{
      setPreferredSize(new Dimension(1,90));
      setBorder(BorderFactory.createEmptyBorder(UI.PAD,0,2 * UI.PAD,0));
    }
    @Override public void onValueUpdated(){
      updateDensity();
    }
  }
;
  controlPanel.add(densitySlider,BorderLayout.NORTH);
  messageContainer=new JPanel();
  messageContainer.setBackground(Color.WHITE);
  controlPanel.add(messageContainer,BorderLayout.CENTER);
  messageLayout=new CardLayout();
  messageContainer.setLayout(messageLayout);
  JPanel freeFlowMessage=new JPanel(new BorderLayout());
  freeFlowMessage.add(UI.makeTrafficReportLabel(""String_Node_Str"",UI.GREEN),BorderLayout.NORTH);
  freeFlowMessage.add(UI.makeStyledTextPane(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  messageContainer.add(freeFlowMessage,FREE_FLOW_CARD);
  JPanel congestionMessage=new JPanel(new BorderLayout());
  congestionMessage.add(UI.makeTrafficReportLabel(""String_Node_Str"",UI.AMBER),BorderLayout.NORTH);
  congestionMessage.add(UI.makeStyledTextPane(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  messageContainer.add(congestionMessage,CONGESTION_CARD);
  JPanel jamMessage=new JPanel(new BorderLayout());
  jamMessage.add(UI.makeTrafficReportLabel(""String_Node_Str"",UI.RED),BorderLayout.NORTH);
  jamMessage.add(UI.makeStyledTextPane(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  messageContainer.add(jamMessage,JAM_CARD);
  messageMachine=new ThresholdMachine(MIN_SPEED_THRESHOLDS,MIN_SPEED_CARDS,MIN_SPEED_TOLERANCE);
  messageTimer=new Timer(ADAPTIVE_MESSAGE_TIMER_DELAY_MS,new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateMessage();
    }
  }
);
}",0.9640013845621322
184266,"@Override public void onNextClicked(){
  goToNextLevel();
}","/** 
 * Called when the user presses the next button.
 */
public abstract void onNextClicked();",0.4285714285714285
184267,"/** 
 * For testing 
 */
public static void main(String[] args){
  JFrame f=new JFrame(""String_Node_Str"");
  f.setSize(800,600);
  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  RingRoadGamePanel p=new RingRoadGamePanel(){
    private static final long serialVersionUID=1L;
    @Override public void goToNextLevel(){
    }
  }
;
  f.add(p);
  f.setVisible(true);
  p.start();
}","/** 
 * For testing 
 */
public static void main(String[] args){
  JFrame f=new JFrame(""String_Node_Str"");
  f.setSize(800,600);
  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  RingRoadGamePanel p=new RingRoadGamePanel(){
    private static final long serialVersionUID=1L;
    @Override public void onNextClicked(){
    }
    @Override public void onBackClicked(){
    }
  }
;
  f.add(p);
  f.setVisible(true);
  p.start();
}",0.9175891758917588
184268,"@Override protected void paintAnnotations(Graphics2D g2){
  if (sim == null)   return;
  double minSpeed=sim.getMinSpeedInInsideLane();
  g2.drawString(String.format(""String_Node_Str"",minSpeed,sim.getTime() / 60),30,50);
  Rectangle2D uBounds=getURoad().getBoundsMeters();
  g2.setFont(UI.BODY_FONT.deriveFont(24f));
  String template=getFlowString(99999.0 / 3600.0);
  Rectangle2D textRect=g2.getFontMetrics().getStringBounds(template,g2);
  AffineTransform tx=g2.getTransform();
  Point2D.Double ptIn=new Point2D.Double(uBounds.getMaxX(),uBounds.getMinY() + 2 * LANEWIDTH_M);
  metersToPixels.transform(ptIn,ptIn);
  Arrow leftArrow=new Arrow(textRect,true);
  ptIn.x-=leftArrow.wBody;
  ptIn.y-=leftArrow.yTop - ARROW_PAD;
  g2.translate(ptIn.x,ptIn.y);
  g2.setColor(UI.PURPLE);
  g2.fill(leftArrow.path);
  g2.setColor(Color.WHITE);
  g2.drawString(getFlowString(sim.qIn),0f,0f);
  g2.setTransform(tx);
  Point2D.Double ptRamp=new Point2D.Double(uBounds.getMinX(),uBounds.getMaxY() + LANEWIDTH_M);
  String qRampString=getFlowString(sim.qRamp);
  Rectangle2D qRampRect=g2.getFontMetrics().getStringBounds(qRampString,g2);
  Arrow rightArrow=new Arrow(textRect,false);
  metersToPixels.transform(ptRamp,ptRamp);
  ptRamp.y-=rightArrow.yTop;
  g2.translate(ptRamp.x,ptRamp.y);
  g2.setColor(UI.GREEN_HIGHLIGHT);
  g2.fill(rightArrow.path);
  g2.translate(textRect.getWidth() - qRampRect.getWidth(),0);
  g2.setColor(Color.BLACK);
  g2.drawString(qRampString,0f,0f);
  g2.setTransform(tx);
  Point2D.Double ptOut=new Point2D.Double(uBounds.getMaxX(),uBounds.getMaxY() - 2 * LANEWIDTH_M);
  String qOutString=getFlowString(sim.getMeanFlowOut());
  Rectangle2D qOutRect=g2.getFontMetrics().getStringBounds(qOutString,g2);
  metersToPixels.transform(ptOut,ptOut);
  ptOut.x-=rightArrow.wBody + rightArrow.wHead;
  ptOut.y-=rightArrow.yBot + ARROW_PAD;
  g2.translate(ptOut.x,ptOut.y);
  g2.setColor(UI.DARK_RED);
  g2.fill(rightArrow.path);
  g2.translate(textRect.getWidth() - qOutRect.getWidth(),0);
  g2.setColor(Color.WHITE);
  g2.drawString(qOutString,0f,0f);
  g2.setTransform(tx);
}","@Override protected void paintAnnotations(Graphics2D g2){
  if (sim == null)   return;
  Rectangle2D uBounds=getURoad().getBoundsMeters();
  g2.setFont(UI.BODY_FONT.deriveFont(24f));
  String template=getFlowString(99999.0 / 3600.0);
  Rectangle2D textRect=g2.getFontMetrics().getStringBounds(template,g2);
  AffineTransform tx=g2.getTransform();
  Point2D.Double ptIn=new Point2D.Double(uBounds.getMaxX(),uBounds.getMinY() + 2 * LANEWIDTH_M);
  metersToPixels.transform(ptIn,ptIn);
  Arrow leftArrow=new Arrow(textRect,true);
  ptIn.x-=leftArrow.wBody;
  ptIn.y-=leftArrow.yTop - ARROW_PAD;
  g2.translate(ptIn.x,ptIn.y);
  g2.setColor(UI.PURPLE);
  g2.fill(leftArrow.path);
  g2.setColor(Color.WHITE);
  g2.drawString(getFlowString(sim.qIn),0f,0f);
  g2.setTransform(tx);
  Point2D.Double ptRamp=new Point2D.Double(uBounds.getMinX(),uBounds.getMaxY() + LANEWIDTH_M);
  String qRampString=getFlowString(sim.qRamp);
  Rectangle2D qRampRect=g2.getFontMetrics().getStringBounds(qRampString,g2);
  Arrow rightArrow=new Arrow(textRect,false);
  metersToPixels.transform(ptRamp,ptRamp);
  ptRamp.y-=rightArrow.yTop;
  g2.translate(ptRamp.x,ptRamp.y);
  g2.setColor(UI.GREEN_HIGHLIGHT);
  g2.fill(rightArrow.path);
  g2.translate(textRect.getWidth() - qRampRect.getWidth(),0);
  g2.setColor(Color.BLACK);
  g2.drawString(qRampString,0f,0f);
  g2.setTransform(tx);
  Point2D.Double ptOut=new Point2D.Double(uBounds.getMaxX(),uBounds.getMaxY() - 2 * LANEWIDTH_M);
  String qOutString=getFlowString(sim.getMeanFlowOut());
  Rectangle2D qOutRect=g2.getFontMetrics().getStringBounds(qOutString,g2);
  metersToPixels.transform(ptOut,ptOut);
  ptOut.x-=rightArrow.wBody + rightArrow.wHead;
  ptOut.y-=rightArrow.yBot + ARROW_PAD;
  g2.translate(ptOut.x,ptOut.y);
  g2.setColor(UI.DARK_RED);
  g2.fill(rightArrow.path);
  g2.translate(textRect.getWidth() - qOutRect.getWidth(),0);
  g2.setColor(Color.WHITE);
  g2.drawString(qOutString,0f,0f);
  g2.setTransform(tx);
}",0.966848095002474
184269,"public URoadGamePanel(){
  super(""String_Node_Str"",false);
  ideaContainer.setLayout(new BorderLayout());
  JLabel titleLabel=new JLabel(""String_Node_Str"");
  titleLabel.setFont(UI.HEADER_FONT);
  titleLabel.setBorder(BorderFactory.createEmptyBorder(2 * UI.PAD,0,0,0));
  ideaContainer.add(titleLabel,BorderLayout.NORTH);
  ideaContainer.add(UI.makeStyledTextPane(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  JPanel freeLowMessage=new JPanel(new BorderLayout());
  freeLowMessage.add(UI.makeTrafficReportLabel(""String_Node_Str"",UI.GREEN),BorderLayout.NORTH);
  freeLowMessage.add(UI.makeStyledTextPane(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + UI.EM_DASH + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  messageContainer.add(freeLowMessage,FREE_LOW_CARD);
  JPanel freeOptimalMessage=new JPanel(new BorderLayout());
  freeOptimalMessage.add(UI.makeTrafficReportLabel(""String_Node_Str"",UI.GREEN),BorderLayout.NORTH);
  freeOptimalMessage.add(UI.makeStyledTextPane(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + UI.EM_DASH + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  messageContainer.add(freeOptimalMessage,FREE_OPTIMAL_CARD);
  JPanel freeHighMessage=new JPanel(new BorderLayout());
  freeHighMessage.add(UI.makeTrafficReportLabel(""String_Node_Str"",UI.GREEN),BorderLayout.NORTH);
  freeHighMessage.add(UI.makeStyledTextPane(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + UI.EM_DASH + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  messageContainer.add(freeHighMessage,FREE_HIGH_CARD);
  JPanel congestionMessage=new JPanel(new BorderLayout());
  congestionMessage.add(UI.makeTrafficReportLabel(""String_Node_Str"",UI.RED),BorderLayout.NORTH);
  congestionMessage.add(UI.makeStyledTextPane(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + UI.EM_DASH + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  messageContainer.add(congestionMessage,CONGESTION_CARD);
  messageMachine=new ThresholdMachine(MIN_SPEED_THRESHOLDS,MIN_SPEED_STATES,MIN_SPEED_TOLERANCE);
  messageTimer=new Timer(ADAPTIVE_MESSAGE_TIMER_DELAY_MS,new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateMessage();
    }
  }
);
  simCanvas=new URoadCanvas(TARGET_FPS);
  simCanvas.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(UI.PAD,UI.PAD,UI.PAD,UI.PAD),new RoundedBorder(UI.BACKGROUND.brighter(),null,MessageBubble.CORNER_RADIUS,MessageBubble.BORDER_WIDTH,true)));
  simCanvas.setTimeStepsPerFrame(TIME_STEPS_PER_FRAME);
  gameContainer.add(simCanvas,CARD_GAME);
  warmupPool=new BackgroundWarmupRunner();
}","public URoadGamePanel(){
  super(""String_Node_Str"",false);
  ideaContainer.setLayout(new BorderLayout());
  JLabel titleLabel=new JLabel(""String_Node_Str"");
  titleLabel.setFont(UI.HEADER_FONT);
  titleLabel.setBorder(BorderFactory.createEmptyBorder(2 * UI.PAD,0,0,0));
  ideaContainer.add(titleLabel,BorderLayout.NORTH);
  ideaContainer.add(UI.makeStyledTextPane(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  JPanel freeLowMessage=new JPanel(new BorderLayout());
  freeLowMessage.add(UI.makeTrafficReportLabel(""String_Node_Str"",UI.GREEN),BorderLayout.NORTH);
  freeLowMessage.add(UI.makeStyledTextPane(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + UI.EM_DASH + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  messageContainer.add(freeLowMessage,FREE_LOW_CARD);
  JPanel freeOptimalMessage=new JPanel(new BorderLayout());
  freeOptimalMessage.add(UI.makeTrafficReportLabel(""String_Node_Str"",UI.GREEN),BorderLayout.NORTH);
  freeOptimalMessage.add(UI.makeStyledTextPane(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + UI.EM_DASH + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  messageContainer.add(freeOptimalMessage,FREE_OPTIMAL_CARD);
  JPanel freeHighMessage=new JPanel(new BorderLayout());
  freeHighMessage.add(UI.makeTrafficReportLabel(""String_Node_Str"",UI.GREEN),BorderLayout.NORTH);
  freeHighMessage.add(UI.makeStyledTextPane(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + UI.EM_DASH + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  messageContainer.add(freeHighMessage,FREE_HIGH_CARD);
  JPanel congestionMessage=new JPanel(new BorderLayout());
  congestionMessage.add(UI.makeTrafficReportLabel(""String_Node_Str"",UI.RED),BorderLayout.NORTH);
  congestionMessage.add(UI.makeStyledTextPane(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + UI.EM_DASH + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),BorderLayout.CENTER);
  messageContainer.add(congestionMessage,CONGESTION_CARD);
  messageMachine=new ThresholdMachine(MIN_SPEED_THRESHOLDS,MIN_SPEED_STATES,MIN_SPEED_TOLERANCE);
  messageTimer=new Timer(ADAPTIVE_MESSAGE_TIMER_DELAY_MS,new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateMessage();
    }
  }
);
  simCanvas=new URoadCanvas(TARGET_FPS);
  simCanvas.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(UI.PAD,UI.PAD,UI.PAD,UI.PAD),new RoundedBorder(UI.BACKGROUND.brighter(),null,MessageBubble.CORNER_RADIUS,MessageBubble.BORDER_WIDTH,true)));
  simCanvas.setTimeStepsPerFrame(TIME_STEPS_PER_FRAME);
  gameContainer.add(simCanvas,CARD_GAME);
  warmupPool=new BackgroundWarmupRunner();
}",0.9901261656609984
184270,"public static CueSheet open(java.io.File cueFile) throws IOException {
  CueSheet cueSheet=new CueSheet(""String_Node_Str"",""String_Node_Str"");
  BufferedReader reader=new BufferedReader(new FileReader(cueFile));
  CueItem currentItem=cueSheet;
  String token;
  for (String line; (line=reader.readLine()) != null; ) {
    Scanner tok=new Scanner(line);
    if (!tok.hasNext()) {
      continue;
    }
    token=tok.next();
    if (""String_Node_Str"".equalsIgnoreCase(token)) {
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token) && currentItem instanceof Track) {
      Integer.parseInt(tok.next());
      Scanner sc=tok.useDelimiter(Pattern.compile(""String_Node_Str""));
      int minutes=sc.nextInt(), seconds=sc.nextInt(), frames=sc.nextInt();
      Index index=new Index(minutes,seconds,frames);
      ((Track)currentItem).getIndices().add(index);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
      String nextToken=tok.next();
      if (nextToken.startsWith(QUOTATION_MARK)) {
        if (nextToken.endsWith(QUOTATION_MARK)) {
          nextToken=nextToken.substring(1,nextToken.length() - 1);
        }
 else {
          nextToken=nextToken.substring(1) + tok.useDelimiter(QUOTATION_MARK).next();
        }
      }
      currentItem.setTitle(nextToken);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
      String nextToken=tok.next();
      if (nextToken.startsWith(QUOTATION_MARK)) {
        if (nextToken.endsWith(QUOTATION_MARK)) {
          nextToken=nextToken.substring(1,nextToken.length() - 1);
        }
 else {
          nextToken=nextToken.substring(1) + tok.useDelimiter(QUOTATION_MARK).next();
        }
      }
      currentItem.setPerformer(nextToken);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token) && currentItem instanceof CueSheet) {
      String nextToken=tok.next();
      if (nextToken.startsWith(QUOTATION_MARK)) {
        if (nextToken.endsWith(QUOTATION_MARK)) {
          nextToken=nextToken.substring(1,nextToken.length() - 1);
        }
 else {
          nextToken=nextToken.substring(1) + tok.useDelimiter(QUOTATION_MARK).next();
        }
      }
      File file=new File(nextToken,File.Type.getType(tok.next()));
      currentItem.setFile(file);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
      int trackNo=tok.nextInt();
      String nextToken=tok.nextLine().trim().toUpperCase();
      Mode trackMode=Mode.getMode(nextToken);
      currentItem=new Track(trackNo,trackMode);
      cueSheet.getTracks().add((Track)currentItem);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token) && tok.hasNextLine()) {
      System.out.println(tok.nextLine());
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
    }
  }
  return cueSheet;
}","public static CueSheet open(java.io.File cueFile) throws IOException {
  CueSheet cueSheet=new CueSheet(""String_Node_Str"",""String_Node_Str"");
  BufferedReader reader=new BufferedReader(new FileReader(cueFile));
  CueItem currentItem=cueSheet;
  String token;
  for (String line; (line=reader.readLine()) != null; ) {
    Scanner tok=new Scanner(line);
    if (!tok.hasNext()) {
      continue;
    }
    token=tok.next();
    if (""String_Node_Str"".equalsIgnoreCase(token)) {
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token) && currentItem instanceof Track) {
      Integer.parseInt(tok.next());
      Scanner sc=tok.useDelimiter(Pattern.compile(""String_Node_Str""));
      int minutes=sc.nextInt(), seconds=sc.nextInt(), frames=sc.nextInt();
      Index index=new Index(minutes,seconds,frames);
      ((Track)currentItem).getIndices().add(index);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
      String nextToken=tok.next();
      if (nextToken.startsWith(QUOTATION_MARK)) {
        if (nextToken.endsWith(QUOTATION_MARK)) {
          nextToken=nextToken.substring(1,nextToken.length() - 1);
        }
 else {
          nextToken=nextToken.substring(1) + tok.useDelimiter(QUOTATION_MARK).next();
        }
      }
      currentItem.setTitle(nextToken);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
      String nextToken=tok.next();
      if (nextToken.startsWith(QUOTATION_MARK)) {
        if (nextToken.endsWith(QUOTATION_MARK)) {
          nextToken=nextToken.substring(1,nextToken.length() - 1);
        }
 else {
          nextToken=nextToken.substring(1) + tok.useDelimiter(QUOTATION_MARK).next();
        }
      }
      currentItem.setPerformer(nextToken);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token) && currentItem instanceof CueSheet) {
      String nextToken=tok.next();
      if (nextToken.startsWith(QUOTATION_MARK)) {
        if (nextToken.endsWith(QUOTATION_MARK)) {
          nextToken=nextToken.substring(1,nextToken.length() - 1);
        }
 else {
          nextToken=nextToken.substring(1) + tok.useDelimiter(QUOTATION_MARK).next();
        }
      }
      File file=new File(nextToken,File.Type.getType(tok.next()));
      currentItem.setFile(file);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
      int trackNo=tok.nextInt();
      String nextToken=tok.nextLine().trim().toUpperCase();
      Mode trackMode=Mode.getMode(nextToken);
      currentItem=new Track(trackNo,trackMode);
      cueSheet.getTracks().add((Track)currentItem);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token) && tok.hasNextLine()) {
      System.out.println(tok.nextLine());
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(token)) {
    }
  }
  reader.close();
  return cueSheet;
}",0.9971005154639176
184271,"public int compare(Track o1,Track o2){
  return o1.getNumber() - o2.getNumber();
}","@Override public int compare(Track o1,Track o2){
  return o1.getNumber() - o2.getNumber();
}",0.942528735632184
184272,"public int compare(Marker o1,Marker o2){
  return o1.getPosition() - o2.getPosition();
}","@Override public int compare(Marker o1,Marker o2){
  return o1.getPosition() - o2.getPosition();
}",0.946236559139785
184273,"public static void main(String... args) throws IOException {
  PrintStream log=System.out;
  MixmeisterPlaylist mmp=MixmeisterPlaylist.open(new File(""String_Node_Str""));
  log.println(mmp);
  Track track=mmp.getTracks().get(0);
  String trackId=track.getHeader().getArchiveKey();
  System.out.println(trackId);
  File archiveFile=new File(""String_Node_Str"" + trackId + ""String_Node_Str"");
  RiffFile riff=new RiffFile(archiveFile);
  riff.read();
  Chunk plot=null;
  for (  Chunk p : ((ChunkContainer)riff).getChunks()) {
    if (""String_Node_Str"".equals(p.getIdentifier())) {
      plot=p;
      break;
    }
  }
  display(riff);
}","public static void main(String... args) throws IOException {
  PrintStream log=System.out;
  MixmeisterPlaylist mmp=MixmeisterPlaylist.open(new File(""String_Node_Str""));
  log.println(mmp);
  Track track=mmp.getTracks().get(0);
  String trackId=track.getHeader().getArchiveKey();
  System.out.println(trackId);
  File archiveFile=new File(""String_Node_Str"" + trackId + ""String_Node_Str"");
  RiffFile riff=new RiffFile(archiveFile);
  riff.read();
  Chunk plot=null;
  for (  Chunk p : ((ChunkContainer)riff).getChunks()) {
    if (""String_Node_Str"".equalsIgnoreCase(p.getIdentifier())) {
      plot=p;
      break;
    }
  }
  System.out.println(plot);
  display(riff);
}",0.9524539877300614
184274,"/** 
 * Converts MMP to CUE
 * @param mmp
 * @param readID3 use ID3 lookup
 * @return
 */
private static CueSheet getCueSheetFromMixmeisterPlaylist(MixmeisterPlaylist mmp,boolean readID3){
  CueSheet cueSheet=new CueSheet(""String_Node_Str"",""String_Node_Str"");
  double position=0;
  String performer, songTitle;
  mixmeister.mmp.Track mmpTrack;
  for (int i=0; i < mmp.getTracks().size(); ++i) {
    mmpTrack=mmp.getTracks().get(i);
switch (mmpTrack.getHeader().getTrackType()) {
case TrackType.OVERLAY:
case TrackType.OVERLAY_WITH_BEATSYNC:
case TrackType.OVERLAY_WITHOUT_BEATSYNC:
      break;
default :
    cue.Track cueTrack=new cue.Track(i + 1);
  performer=""String_Node_Str"";
songTitle=""String_Node_Str"" + cueTrack.getNumber();
String fileName=mmpTrack.getFileName();
if (readID3) {
try {
MP3File mp3=new MP3File(new File(fileName),MP3File.LOAD_ALL,true);
if (mp3.hasID3v1Tag()) {
  ID3v1Tag tag=mp3.getID3v1Tag();
  performer=tag.getArtist();
  songTitle=tag.getTitle();
}
if (mp3.hasID3v2Tag()) {
  AbstractID3v2Tag tag=mp3.getID3v2TagAsv24();
  String value=extractID3v2TagValue(tag,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (value != null) {
    performer=value;
  }
  value=extractID3v2TagValue(tag,""String_Node_Str"",""String_Node_Str"");
  if (value != null) {
    songTitle=value;
  }
}
}
 catch (IOException e) {
e.printStackTrace();
}
catch (TagException e) {
e.printStackTrace();
}
catch (ReadOnlyFileException e) {
e.printStackTrace();
}
catch (InvalidAudioFrameException e) {
e.printStackTrace();
}
}
cueTrack.setPerformer(performer);
cueTrack.setTitle(songTitle);
cueTrack.getIndices().add(new Index(position));
cueSheet.getTracks().add(cueTrack);
Marker outroAnchor=new LinkedList<Marker>(mmp.getTracks().get(i).getMarkers(Marker.OUTRO_RANGE)).getLast();
position+=outroAnchor.getPosition() / 1000000.0;
break;
}
}
return cueSheet;
}","/** 
 * Converts MMP to CUE
 * @param mmp
 * @param readID3 use ID3 lookup
 * @return
 */
private static CueSheet getCueSheetFromMixmeisterPlaylist(MixmeisterPlaylist mmp,boolean readID3){
  CueSheet cueSheet=new CueSheet(""String_Node_Str"",""String_Node_Str"");
  double position=0;
  String performer, songTitle;
  mixmeister.mmp.Track mmpTrack;
  for (int i=0; i < mmp.getTracks().size(); ++i) {
    mmpTrack=mmp.getTracks().get(i);
switch (mmpTrack.getHeader().getTrackType()) {
case TrackType.OVERLAY:
case TrackType.OVERLAY_WITH_BEATSYNC:
case TrackType.OVERLAY_WITHOUT_BEATSYNC:
      break;
default :
    cue.Track cueTrack=new cue.Track(i + 1);
  performer=""String_Node_Str"";
songTitle=""String_Node_Str"" + cueTrack.getNumber();
String fileName=mmpTrack.getFileName();
if (readID3) {
try {
MP3File mp3=new MP3File(new File(fileName),MP3File.LOAD_ALL,true);
performer=ID3Helper.getArtist(mp3);
songTitle=ID3Helper.getTitle(mp3);
}
 catch (IOException e) {
e.printStackTrace();
}
catch (TagException e) {
e.printStackTrace();
}
catch (ReadOnlyFileException e) {
e.printStackTrace();
}
catch (InvalidAudioFrameException e) {
e.printStackTrace();
}
}
cueTrack.setPerformer(performer);
cueTrack.setTitle(songTitle);
cueTrack.getIndices().add(new Index(position));
cueSheet.getTracks().add(cueTrack);
Marker outroAnchor=new LinkedList<Marker>(mmpTrack.getMarkers(Marker.OUTRO_RANGE)).getLast();
Marker introAnchor=new LinkedList<Marker>(mmpTrack.getMarkers(Marker.INTRO_RANGE)).getLast();
position+=(outroAnchor.getPosition() - introAnchor.getPosition()) / 1000000.0;
break;
}
}
return cueSheet;
}",0.8035408338092519
184275,"@Deployment public static WebArchive createDeployment(){
  WebArchive war=ShrinkWrap.create(WebArchive.class,""String_Node_Str"").addClass(AddressAgentTest.class).addClasses(AddressMock.class,AddressOperation.class,Address.class).addAsLibraries(SOLDER).addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(EmptyAsset.INSTANCE,""String_Node_Str"");
  System.out.println(war.toString(true));
  return war;
}","@Deployment public static WebArchive createDeployment(){
  WebArchive war=ShrinkWrap.create(WebArchive.class,""String_Node_Str"").addClass(AddressAgentTest.class).addClasses(AddressMock.class,AddressOperation.class,Address.class).addClasses(Address_.class).addAsLibraries(SOLDER).addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(EmptyAsset.INSTANCE,""String_Node_Str"");
  System.out.println(war.toString(true));
  return war;
}",0.9727547931382442
184276,"@Deployment public static WebArchive createDeployment(){
  return ShrinkWrap.create(WebArchive.class,""String_Node_Str"").addPackages(true,DataContainer.class.getPackage()).addAsLibraries(ALL).addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(EmptyAsset.INSTANCE,""String_Node_Str"");
}","@Deployment public static WebArchive createDeployment(){
  return ShrinkWrap.create(WebArchive.class,""String_Node_Str"").addPackages(true,DataContainer.class.getPackage()).addAsLibraries(INTERNATIONAL).addAsLibraries(FACES).addAsLibraries(SOLDER).addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(EmptyAsset.INSTANCE,""String_Node_Str"");
}",0.8465753424657534
184277,"@Deployment public static WebArchive createDeployment(){
  return ShrinkWrap.create(WebArchive.class,""String_Node_Str"").addPackages(true,DataContainer.class.getPackage()).addAsLibraries(JAVAEE).addAsLibraries(SOLDER).addAsLibraries(INTERNATIONAL).addAsLibraries(RICHFACES).addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(EmptyAsset.INSTANCE,""String_Node_Str"");
}","@Deployment public static WebArchive createDeployment(){
  return ShrinkWrap.create(WebArchive.class,""String_Node_Str"").addPackages(true,DataContainer.class.getPackage()).addAsLibraries(INTERNATIONAL).addAsLibraries(FACES).addAsLibraries(SOLDER).addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(EmptyAsset.INSTANCE,""String_Node_Str"");
}",0.8349753694581281
184278,"@Deployment public static WebArchive createDeployment(){
  return ShrinkWrap.create(WebArchive.class,""String_Node_Str"").addPackages(true,DataContainer.class.getPackage()).addAsLibraries(JAVAEE).addAsLibraries(SOLDER).addAsLibraries(INTERNATIONAL).addAsLibraries(RICHFACES).addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(EmptyAsset.INSTANCE,""String_Node_Str"");
}","@Deployment public static WebArchive createDeployment(){
  return ShrinkWrap.create(WebArchive.class,""String_Node_Str"").addPackages(true,DataContainer.class.getPackage()).addAsLibraries(INTERNATIONAL).addAsLibraries(FACES).addAsLibraries(SOLDER).addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(EmptyAsset.INSTANCE,""String_Node_Str"");
}",0.8349753694581281
184279,"@Deployment public static WebArchive createDeployment(){
  return ShrinkWrap.create(WebArchive.class,""String_Node_Str"").addPackages(true,DataContainer.class.getPackage()).addAsLibraries(JAVAEE).addAsLibraries(SOLDER).addAsLibraries(INTERNATIONAL).addAsLibraries(RICHFACES).addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(EmptyAsset.INSTANCE,""String_Node_Str"");
}","@Deployment public static WebArchive createDeployment(){
  return ShrinkWrap.create(WebArchive.class,""String_Node_Str"").addPackages(true,DataContainer.class.getPackage()).addAsLibraries(INTERNATIONAL).addAsLibraries(FACES).addAsLibraries(SOLDER).addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(""String_Node_Str"",""String_Node_Str"").addAsWebInfResource(EmptyAsset.INSTANCE,""String_Node_Str"");
}",0.8349753694581281
184280,"@Override public Article toObject(UIComponent arg0,String arg1){
  for (  Article article : articles)   if (article.getCode().equals(arg1))   return article;
  return null;
}","@Override public Article toObject(UIComponent arg0,String arg1){
  for (  Article article : articleAllSearch.getAllArticles())   if (article.getCode().equals(arg1))   return article;
  return null;
}",0.9329758713136728
184281,"@Override public Customer toObject(UIComponent arg0,String arg1){
  for (  Customer jar : customers)   if (jar.getCode().equals(arg1))   return jar;
  return null;
}","@Override public Customer toObject(UIComponent arg0,String arg1){
  for (  Customer jar : customerAllSearch.getAllCustomers())   if (jar.getCode().equals(arg1))   return jar;
  return null;
}",0.9269662921348316
184282,"@Override public Magazzino toObject(UIComponent arg0,String arg1){
  for (  Magazzino jar : jars)   if (jar.getNumber().equals(arg1))   return jar;
  return null;
}","@Override public Magazzino toObject(UIComponent arg0,String arg1){
  for (  Magazzino jar : magazzinoAllSearch.getAllJars())   if (jar.getNumber().equals(arg1))   return jar;
  return null;
}",0.9183098591549296
184283,"@Override public Receipt toObject(UIComponent arg0,String arg1){
  for (  Receipt receipt : receipts)   if (receipt.getNumber().equals(arg1))   return receipt;
  return null;
}","@Override public Receipt toObject(UIComponent arg0,String arg1){
  for (  Receipt receipt : receiptAllSearch.getAllReceipts())   if (receipt.getNumber().equals(arg1))   return receipt;
  return null;
}",0.93368700265252
184284,"public void register(){
  if (verifyNumberIsAvailable()) {
    registered=true;
    em.persist(newReceipt);
    messages.info(new DefaultBundleKey(""String_Node_Str"")).defaults(""String_Node_Str"").params(newReceipt.getNumber());
    log.receiptConfirmed(newReceipt.getNumber(),newReceipt.getCause());
  }
 else {
    registrationInvalid=true;
  }
}","public void register(){
  if (verifyNumberIsAvailable()) {
    em.persist(newReceipt);
    registered=true;
    messages.info(new DefaultBundleKey(""String_Node_Str"")).defaults(""String_Node_Str"").params(newReceipt.getNumber());
    log.receiptConfirmed(newReceipt.getNumber(),newReceipt.getCause());
  }
 else {
    registrationInvalid=true;
  }
}",0.9190751445086706
184285,"@Override public String toString(){
  return ""String_Node_Str"" + code + ""String_Node_Str"";
}","@Override public String toString(){
  return description;
}",0.6754966887417219
184286,"@Override public String toString(){
  return ""String_Node_Str"" + code + ""String_Node_Str"";
}","@Override public String toString(){
  return ragSocial;
}",0.6711409395973155
184287,"private static int getMaxLeftDiagProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (int r=0; r < grid.length - 4; r++) {
    for (int c=0; c < grid[r].length - 4; c++) {
      product*=grid[r][c];
      product*=grid[r + 1][c + 1];
      product*=grid[r + 2][c + 2];
      product*=grid[r + 3][c + 3];
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}","private static int getMaxLeftDiagProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (int r=0; r < grid.length - 3; r++) {
    for (int c=0; c < grid[r].length - 3; c++) {
      product*=grid[r][c];
      product*=grid[r + 1][c + 1];
      product*=grid[r + 2][c + 2];
      product*=grid[r + 3][c + 3];
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}",0.9951338199513382
184288,"private static int getMaxRightDiagProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (int r=grid.length - 1; r > 4; r--) {
    for (int c=grid[r].length - 1; c > 4; c--) {
      product*=grid[r][c];
      product*=grid[r - 1][c - 1];
      product*=grid[r - 2][c - 2];
      product*=grid[r - 3][c - 3];
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}","private static int getMaxRightDiagProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (int r=grid.length - 1; r > 2; r--) {
    for (int c=grid[r].length - 1; c > 2; c--) {
      product*=grid[r][c];
      product*=grid[r - 1][c - 1];
      product*=grid[r - 2][c - 2];
      product*=grid[r - 3][c - 3];
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}",0.9951456310679612
184289,"/** 
 * @param args
 */
public static void main(String[] args){
  int[][] grid={{8,2,22,97,38,15,0,40,0,75,4,5,7,78,52,12,50,77,91,8},{49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,4,56,62,0},{81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,3,49,13,36,65},{52,70,95,23,4,60,11,42,69,24,68,56,1,32,56,71,37,2,36,91},{22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80},{24,47,32,60,99,3,45,2,44,75,33,53,78,36,84,20,35,17,12,50},{32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70},{67,26,20,68,2,62,12,20,95,63,94,39,63,8,40,91,66,49,94,21},{24,55,58,5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72},{21,36,23,9,75,0,76,44,20,45,35,14,0,61,33,97,34,31,33,95},{78,17,53,28,22,75,31,67,15,94,3,80,4,62,16,14,9,53,56,92},{16,39,5,42,96,35,31,47,55,58,88,24,0,17,54,24,36,29,85,57},{86,56,0,48,35,71,89,7,5,44,44,37,44,60,21,58,51,54,17,58},{19,80,81,68,5,94,47,69,28,73,92,13,86,52,17,77,4,89,55,40},{4,52,8,83,97,35,99,16,7,97,57,32,16,26,26,79,33,27,98,66},{88,36,68,87,57,62,20,72,3,46,33,67,46,55,12,32,63,93,53,69},{4,42,16,73,38,25,39,11,24,94,72,18,8,46,29,32,40,62,76,36},{20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,4,36,16},{20,73,35,29,78,31,90,1,74,31,49,71,48,86,81,16,23,57,5,54},{1,70,54,71,83,51,54,69,16,92,33,48,61,43,52,1,89,19,67,48}};
  int maxHorProd=getMaxHorProd(grid);
  int maxVertProd=getMaxVertProd(grid);
  int maxLeftDiagProd=getMaxLeftDiagProd(grid);
  int maxRightDiagProd=getMaxRightDiagProd(grid);
  int maxProduct=Math.max(Math.max(maxVertProd,maxHorProd),Math.max(maxLeftDiagProd,maxRightDiagProd));
  System.out.println(maxProduct);
}","/** 
 * @param args
 */
public static void main(String[] args){
  int[][] grid={{8,2,22,97,38,15,0,40,0,75,4,5,7,78,52,12,50,77,91,8},{49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,4,56,62,0},{81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,3,49,13,36,65},{52,70,95,23,4,60,11,42,69,24,68,56,1,32,56,71,37,2,36,91},{22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80},{24,47,32,60,99,3,45,2,44,75,33,53,78,36,84,20,35,17,12,50},{32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70},{67,26,20,68,2,62,12,20,95,63,94,39,63,8,40,91,66,49,94,21},{24,55,58,5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72},{21,36,23,9,75,0,76,44,20,45,35,14,0,61,33,97,34,31,33,95},{78,17,53,28,22,75,31,67,15,94,3,80,4,62,16,14,9,53,56,92},{16,39,5,42,96,35,31,47,55,58,88,24,0,17,54,24,36,29,85,57},{86,56,0,48,35,71,89,7,5,44,44,37,44,60,21,58,51,54,17,58},{19,80,81,68,5,94,47,69,28,73,92,13,86,52,17,77,4,89,55,40},{4,52,8,83,97,35,99,16,7,97,57,32,16,26,26,79,33,27,98,66},{88,36,68,87,57,62,20,72,3,46,33,67,46,55,12,32,63,93,53,69},{4,42,16,73,38,25,39,11,24,94,72,18,8,46,29,32,40,62,76,36},{20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,4,36,16},{20,73,35,29,78,31,90,1,74,31,49,71,48,86,81,16,23,57,5,54},{1,70,54,71,83,51,54,69,16,92,33,48,61,43,52,1,89,19,67,48}};
  int maxHorProd=getMaxHorProd(grid);
  int maxVertProd=getMaxVertProd(grid);
  int maxLeftDiagProd=getMaxLeftDiagProd(grid);
  int maxRightDiagProd=getMaxRightDiagProd(grid);
  int maxProduct=Math.max(Math.max(maxVertProd,maxHorProd),Math.max(maxLeftDiagProd,maxRightDiagProd));
  System.out.println(maxHorProd + ""String_Node_Str"" + maxVertProd+ ""String_Node_Str""+ maxLeftDiagProd+ ""String_Node_Str""+ maxRightDiagProd+ ""String_Node_Str""+ maxProduct);
}",0.9585087191822008
184290,"private static int getMaxHorProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (  int[] element : grid) {
    for (int c=0; c < element.length - 4; c++) {
      for (int i=c; i < c + 4; i++) {
        product*=element[i];
      }
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}","private static int getMaxHorProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (  int[] element : grid) {
    for (int c=0; c < element.length - 3; c++) {
      for (int i=c; i < c + 4; i++) {
        product*=element[i];
      }
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}",0.9970414201183432
184291,"private static int getMaxVertProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (int c=0; c < grid[0].length; c++) {
    for (int r=0; r < grid[c].length - 4; r++) {
      for (int i=r; i < r + 4; i++) {
        product*=grid[i][c];
      }
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}","private static int getMaxVertProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (int c=0; c < grid[0].length; c++) {
    for (int r=0; r < grid.length - 3; r++) {
      for (int i=r; i < r + 4; i++) {
        product*=grid[i][c];
      }
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}",0.9928057553956836
184292,"/** 
 * @param args
 */
public static void main(String[] args){
  BigInteger number=BigInteger.valueOf(2L);
  number.pow(7830457);
  number.multiply(BigInteger.valueOf(28433L));
  number.add(BigInteger.valueOf(1L));
  String result=number.toString();
  System.out.println(result.substring(result.length() - 11));
}","/** 
 * @param args
 */
public static void main(String[] args){
  BigInteger number=BigInteger.valueOf(2L);
  number=number.pow(7830457);
  number=number.multiply(BigInteger.valueOf(28433L));
  number=number.add(BigInteger.ONE);
  String result=number.toString();
  System.out.println(result.length());
  System.out.println(result.substring(result.length() - 11));
}",0.7911764705882353
184293,"private static int getMaxLeftDiagProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (int r=0; r < grid.length - 3; r++) {
    for (int c=0; c < grid[r].length - 3; c++) {
      product*=grid[r][c];
      product*=grid[r + 1][c + 1];
      product*=grid[r + 2][c + 2];
      product*=grid[r + 3][c + 3];
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}","/** 
 * diagonal that is NW -> SE
 * @param grid
 * @return
 */
private static int getMaxLeftDiagProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (int r=0; r <= grid.length - 4; r++) {
    for (int c=0; c <= grid[r].length - 4; c++) {
      product*=grid[r][c];
      product*=grid[r + 1][c + 1];
      product*=grid[r + 2][c + 2];
      product*=grid[r + 3][c + 3];
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}",0.9211711711711712
184294,"private static int getMaxRightDiagProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (int r=grid.length - 1; r > 2; r--) {
    for (int c=grid[r].length - 1; c > 2; c--) {
      product*=grid[r][c];
      product*=grid[r - 1][c - 1];
      product*=grid[r - 2][c - 2];
      product*=grid[r - 3][c - 3];
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}","/** 
 * diagonal that is NE -> SW
 * @param grid
 * @return
 */
private static int getMaxRightDiagProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (int r=3; r <= grid.length - 1; r++) {
    for (int c=0; c <= grid[r].length - 4; c++) {
      product*=grid[r][c];
      product*=grid[r - 1][c + 1];
      product*=grid[r - 2][c + 2];
      product*=grid[r - 3][c + 3];
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}",0.6651685393258427
184295,"/** 
 * @param args
 */
public static void main(String[] args){
  int[][] grid={{8,2,22,97,38,15,0,40,0,75,4,5,7,78,52,12,50,77,91,8},{49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,4,56,62,0},{81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,3,49,13,36,65},{52,70,95,23,4,60,11,42,69,24,68,56,1,32,56,71,37,2,36,91},{22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80},{24,47,32,60,99,3,45,2,44,75,33,53,78,36,84,20,35,17,12,50},{32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70},{67,26,20,68,2,62,12,20,95,63,94,39,63,8,40,91,66,49,94,21},{24,55,58,5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72},{21,36,23,9,75,0,76,44,20,45,35,14,0,61,33,97,34,31,33,95},{78,17,53,28,22,75,31,67,15,94,3,80,4,62,16,14,9,53,56,92},{16,39,5,42,96,35,31,47,55,58,88,24,0,17,54,24,36,29,85,57},{86,56,0,48,35,71,89,7,5,44,44,37,44,60,21,58,51,54,17,58},{19,80,81,68,5,94,47,69,28,73,92,13,86,52,17,77,4,89,55,40},{4,52,8,83,97,35,99,16,7,97,57,32,16,26,26,79,33,27,98,66},{88,36,68,87,57,62,20,72,3,46,33,67,46,55,12,32,63,93,53,69},{4,42,16,73,38,25,39,11,24,94,72,18,8,46,29,32,40,62,76,36},{20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,4,36,16},{20,73,35,29,78,31,90,1,74,31,49,71,48,86,81,16,23,57,5,54},{1,70,54,71,83,51,54,69,16,92,33,48,61,43,52,1,89,19,67,48}};
  int maxHorProd=getMaxHorProd(grid);
  int maxVertProd=getMaxVertProd(grid);
  int maxLeftDiagProd=getMaxLeftDiagProd(grid);
  int maxRightDiagProd=getMaxRightDiagProd(grid);
  int maxProduct=Math.max(Math.max(maxVertProd,maxHorProd),Math.max(maxLeftDiagProd,maxRightDiagProd));
  System.out.println(maxHorProd + ""String_Node_Str"" + maxVertProd+ ""String_Node_Str""+ maxLeftDiagProd+ ""String_Node_Str""+ maxRightDiagProd+ ""String_Node_Str""+ maxProduct);
}","/** 
 * @param args
 */
public static void main(String[] args){
  int[][] grid={{8,2,22,97,38,15,0,40,0,75,4,5,7,78,52,12,50,77,91,8},{49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,4,56,62,0},{81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,3,49,13,36,65},{52,70,95,23,4,60,11,42,69,24,68,56,1,32,56,71,37,2,36,91},{22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80},{24,47,32,60,99,3,45,2,44,75,33,53,78,36,84,20,35,17,12,50},{32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70},{67,26,20,68,2,62,12,20,95,63,94,39,63,8,40,91,66,49,94,21},{24,55,58,5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72},{21,36,23,9,75,0,76,44,20,45,35,14,0,61,33,97,34,31,33,95},{78,17,53,28,22,75,31,67,15,94,3,80,4,62,16,14,9,53,56,92},{16,39,5,42,96,35,31,47,55,58,88,24,0,17,54,24,36,29,85,57},{86,56,0,48,35,71,89,7,5,44,44,37,44,60,21,58,51,54,17,58},{19,80,81,68,5,94,47,69,28,73,92,13,86,52,17,77,4,89,55,40},{4,52,8,83,97,35,99,16,7,97,57,32,16,26,26,79,33,27,98,66},{88,36,68,87,57,62,20,72,3,46,33,67,46,55,12,32,63,93,53,69},{4,42,16,73,38,25,39,11,24,94,72,18,8,46,29,32,40,62,76,36},{20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,4,36,16},{20,73,35,29,78,31,90,1,74,31,49,71,48,86,81,16,23,57,5,54},{1,70,54,71,83,51,54,69,16,92,33,48,61,43,52,1,89,19,67,48}};
  int maxHorProd=getMaxHorProd(grid);
  int maxVertProd=getMaxVertProd(grid);
  int maxLeftDiagProd=getMaxLeftDiagProd(grid);
  int maxRightDiagProd=getMaxRightDiagProd(grid);
  int maxProduct=Math.max(Math.max(maxVertProd,maxHorProd),Math.max(maxLeftDiagProd,maxRightDiagProd));
  System.out.println(maxProduct);
}",0.9585087191822008
184296,"private static int getMaxHorProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (  int[] element : grid) {
    for (int c=0; c < element.length - 3; c++) {
      for (int i=c; i < c + 4; i++) {
        product*=element[i];
      }
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}","private static int getMaxHorProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (  int[] element : grid) {
    for (int c=0; c <= element.length - 4; c++) {
      product*=element[c];
      product*=element[c + 1];
      product*=element[c + 2];
      product*=element[c + 3];
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}",0.7063711911357341
184297,"private static int getMaxVertProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (int c=0; c < grid[0].length; c++) {
    for (int r=0; r < grid.length - 3; r++) {
      for (int i=r; i < r + 4; i++) {
        product*=grid[i][c];
      }
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}","private static int getMaxVertProd(int[][] grid){
  int product=1;
  int maxProduct=0;
  for (int c=0; c < grid[0].length; c++) {
    for (int r=0; r < grid.length - 3; r++) {
      product*=grid[r][c];
      product*=grid[r + 1][c];
      product*=grid[r + 2][c];
      product*=grid[r + 3][c];
      maxProduct=Math.max(product,maxProduct);
      product=1;
    }
  }
  return maxProduct;
}",0.7924016282225237
184298,"/** 
 * @param args
 */
public static void main(String[] args){
  try {
    System.setOut(new PrintStream(new File(""String_Node_Str"")));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  int maxChainLength=0;
  int maxChainStart=0;
  int chainLength=0;
  ArrayList<Integer> chain;
  for (int i=999999; i > 0; i--) {
    chain=getChain(i);
    System.out.println(chain);
    chainLength=chain.size();
    if (chainLength >= maxChainLength) {
      maxChainStart=i;
      maxChainLength=chainLength;
    }
  }
  System.err.println(maxChainStart + ""String_Node_Str"" + maxChainLength);
}","/** 
 * @param args
 */
public static void main(String[] args){
  int maxChainLength=0;
  int maxChainStart=0;
  int chainLength=0;
  ArrayList<Integer> chain;
  for (int i=999999; i > 0; i--) {
    chain=getChain(i);
    chainLength=chain.size();
    System.out.println(String.format(""String_Node_Str"",maxChainLength,chainLength,i));
    if (chainLength >= maxChainLength) {
      maxChainStart=i;
      maxChainLength=chainLength;
    }
  }
  System.err.println(maxChainStart + ""String_Node_Str"" + maxChainLength);
}",0.5004452359750667
184299,"public void onClick(View v){
  if (v.getId() == R.id.btnAdd) {
    txtMinutes.requestFocus();
    if (txtName.getText().toString().compareTo(""String_Node_Str"") == 0) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return;
    }
 else     if ((Integer.parseInt(txtHours.getText().toString()) == 0) && (Integer.parseInt(txtMinutes.getText().toString()) == 0)) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return;
    }
    String brother=getId(txtName.getText().toString());
    if (brother == null) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return;
    }
    boolean driver;
    if (chkDriver.isChecked())     driver=true;
 else     driver=false;
    Brother bro=new Brother(txtName.getText().toString(),getId(txtName.getText().toString()),Integer.parseInt(txtHours.getText().toString()),Integer.parseInt(txtMinutes.getText().toString()),driver);
    brothers.add(bro);
    loadBrothers();
  }
 else   if (v.getId() == R.id.btnSubmit) {
    if (txtProjName.getText().toString().compareTo(""String_Node_Str"") == 0) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return;
    }
 else     if (txtProjLoc.getText().toString().compareTo(""String_Node_Str"") == 0) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return;
    }
 else     if (brothers.size() == 0) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return;
    }
    try {
      JSONObject json=new JSONObject();
      for (int x=0; x < brothers.size(); x++) {
        JSONObject jsonBro=new JSONObject();
        jsonBro.put(""String_Node_Str"",brothers.get(x).id);
        jsonBro.put(""String_Node_Str"",brothers.get(x).hours);
        jsonBro.put(""String_Node_Str"",brothers.get(x).minutes);
        if (brothers.get(x).driver)         jsonBro.put(""String_Node_Str"",1);
 else         jsonBro.put(""String_Node_Str"",0);
        jsonBro.put(""String_Node_Str"",brothers.get(x).minutes);
        if (brothers.get(x).driver)         jsonBro.put(""String_Node_Str"",1);
 else         jsonBro.put(""String_Node_Str"",0);
        json.put(x + ""String_Node_Str"",jsonBro);
      }
      String[] params=new String[9];
      String month, day;
      if (datePicker.getMonth() < 10)       month=""String_Node_Str"" + datePicker.getMonth();
 else       month=""String_Node_Str"" + datePicker.getMonth();
      if (datePicker.getDayOfMonth() < 10)       day=""String_Node_Str"" + datePicker.getDayOfMonth();
 else       day=""String_Node_Str"" + datePicker.getDayOfMonth();
      params[0]=datePicker.getYear() + ""String_Node_Str"" + month+ ""String_Node_Str""+ day;
      params[1]=txtProjName.getText().toString();
      params[2]=txtProjLoc.getText().toString();
      if (radIn.isChecked())       params[3]=""String_Node_Str"";
 else       params[3]=""String_Node_Str"";
      if (radOn.isChecked())       params[4]=""String_Node_Str"";
 else       params[4]=""String_Node_Str"";
      if (radService1.isChecked())       params[5]=""String_Node_Str"";
 else       if (radService2.isChecked())       params[5]=""String_Node_Str"";
 else       if (radService3.isChecked())       params[5]=""String_Node_Str"";
 else       params[5]=""String_Node_Str"";
      if (txtTravelTime.getText().toString().compareTo(""String_Node_Str"") == 0)       params[6]=""String_Node_Str"";
 else       params[6]=""String_Node_Str"" + Integer.parseInt(txtTravelTime.getText().toString());
      params[7]=txtComments.getText().toString();
      params[8]=""String_Node_Str"" + brothers.size();
      API api=new API(this);
      if (!api.callMethod(Methods.serviceReport,this,json,params)) {
        Toast msg=Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG);
        msg.show();
      }
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
 else {
    Button remove=(Button)v;
    if (remove.getText().toString().compareTo(""String_Node_Str"") != 0)     return;
    LinearLayout row=(LinearLayout)remove.getParent();
    int count=layoutBrothers.getChildCount();
    int match=-1;
    for (int x=1; x <= count; x++) {
      if (layoutBrothers.getChildAt(x) == row) {
        match=x;
        break;
      }
    }
    if (match == -1)     return;
 else {
      brothers.remove(match - 1);
      loadBrothers();
    }
  }
}","public void onClick(View v){
  if (v.getId() == R.id.btnAdd) {
    txtMinutes.requestFocus();
    if (txtName.getText().toString().compareTo(""String_Node_Str"") == 0) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return;
    }
 else     if ((Integer.parseInt(txtHours.getText().toString()) == 0) && (Integer.parseInt(txtMinutes.getText().toString()) == 0)) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return;
    }
    String brother=getId(txtName.getText().toString());
    if (brother == null) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return;
    }
    boolean driver;
    if (chkDriver.isChecked())     driver=true;
 else     driver=false;
    Brother bro=new Brother(txtName.getText().toString(),getId(txtName.getText().toString()),Integer.parseInt(txtHours.getText().toString()),Integer.parseInt(txtMinutes.getText().toString()),driver);
    brothers.add(bro);
    loadBrothers();
  }
 else   if (v.getId() == R.id.btnSubmit) {
    if (txtProjName.getText().toString().compareTo(""String_Node_Str"") == 0) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return;
    }
 else     if (txtProjLoc.getText().toString().compareTo(""String_Node_Str"") == 0) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return;
    }
 else     if (brothers.size() == 0) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return;
    }
    try {
      JSONObject json=new JSONObject();
      for (int x=0; x < brothers.size(); x++) {
        JSONObject jsonBro=new JSONObject();
        jsonBro.put(""String_Node_Str"",brothers.get(x).id);
        jsonBro.put(""String_Node_Str"",brothers.get(x).hours);
        jsonBro.put(""String_Node_Str"",brothers.get(x).minutes);
        if (brothers.get(x).driver)         jsonBro.put(""String_Node_Str"",1);
 else         jsonBro.put(""String_Node_Str"",0);
        jsonBro.put(""String_Node_Str"",brothers.get(x).minutes);
        if (brothers.get(x).driver)         jsonBro.put(""String_Node_Str"",1);
 else         jsonBro.put(""String_Node_Str"",0);
        json.put(x + ""String_Node_Str"",jsonBro);
      }
      String[] params=new String[9];
      String month, day;
      if (datePicker.getMonth() < 9)       month=""String_Node_Str"" + (datePicker.getMonth() + 1);
 else       month=""String_Node_Str"" + (datePicker.getMonth() + 1);
      if (datePicker.getDayOfMonth() < 10)       day=""String_Node_Str"" + datePicker.getDayOfMonth();
 else       day=""String_Node_Str"" + datePicker.getDayOfMonth();
      params[0]=datePicker.getYear() + ""String_Node_Str"" + month+ ""String_Node_Str""+ day;
      params[1]=txtProjName.getText().toString();
      params[2]=txtProjLoc.getText().toString();
      if (radIn.isChecked())       params[3]=""String_Node_Str"";
 else       params[3]=""String_Node_Str"";
      if (radOn.isChecked())       params[4]=""String_Node_Str"";
 else       params[4]=""String_Node_Str"";
      if (radService1.isChecked())       params[5]=""String_Node_Str"";
 else       if (radService2.isChecked())       params[5]=""String_Node_Str"";
 else       if (radService3.isChecked())       params[5]=""String_Node_Str"";
 else       params[5]=""String_Node_Str"";
      if (txtTravelTime.getText().toString().compareTo(""String_Node_Str"") == 0)       params[6]=""String_Node_Str"";
 else       params[6]=""String_Node_Str"" + Integer.parseInt(txtTravelTime.getText().toString());
      params[7]=txtComments.getText().toString() + ""String_Node_Str"";
      params[8]=""String_Node_Str"" + brothers.size();
      API api=new API(this);
      if (!api.callMethod(Methods.serviceReport,this,json,params)) {
        Toast msg=Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG);
        msg.show();
      }
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
 else {
    Button remove=(Button)v;
    if (remove.getText().toString().compareTo(""String_Node_Str"") != 0)     return;
    LinearLayout row=(LinearLayout)remove.getParent();
    int count=layoutBrothers.getChildCount();
    int match=-1;
    for (int x=1; x <= count; x++) {
      if (layoutBrothers.getChildAt(x) == row) {
        match=x;
        break;
      }
    }
    if (match == -1)     return;
 else {
      brothers.remove(match - 1);
      loadBrothers();
    }
  }
}",0.9829265497880142
184300,"public boolean callMethod(Methods method,AsyncRestRequestListener<Methods,JSONObject> callback,String... params){
  boolean result=false;
switch (method) {
case login:
    if (params.length != 2)     break;
  if (params[0] == null || params[1] == null)   break;
ApiCall loginCall=new ApiCall(context,callback,method,""String_Node_Str"",""String_Node_Str"");
RestClient loginClient=new RestClient(secureUrl,httpClient,RequestMethod.POST);
loginClient.AddParam(""String_Node_Str"",""String_Node_Str"");
loginClient.AddParam(""String_Node_Str"",params[0]);
loginClient.AddParam(""String_Node_Str"",Auth.md5(params[1]));
loginClient.AddParam(""String_Node_Str"",Installation.id(context.getApplicationContext()));
loginClient.AddParam(""String_Node_Str"",Auth.Hmac.getSecretKey().toString());
loginCall.execute(loginClient);
result=true;
break;
case checkCredentials:
ApiCall checkCredentialsCall=new ApiCall(context,callback,method);
RestClient checkCredentialsClient=new RestClient(secureUrl,httpClient,RequestMethod.POST);
String installID=Installation.id(context.getApplicationContext());
String timestamp=Long.toString(Auth.getTimestamp());
String data=""String_Node_Str"" + timestamp + installID;
checkCredentialsClient.AddParam(""String_Node_Str"",""String_Node_Str"");
checkCredentialsClient.AddParam(""String_Node_Str"",installID);
checkCredentialsClient.AddParam(""String_Node_Str"",timestamp);
try {
checkCredentialsClient.AddParam(""String_Node_Str"",Auth.Hmac.generate(data).toString());
}
 catch (InvalidKeyException e) {
e.printStackTrace();
return false;
}
catch (NoSuchAlgorithmException e) {
e.printStackTrace();
return false;
}
checkCredentialsCall.execute(checkCredentialsClient);
result=true;
break;
case logout:
break;
case resetPassword:
break;
case getContract:
break;
case phone:
break;
case serviceReport:
break;
}
return result;
}","public boolean callMethod(Methods method,AsyncRestRequestListener<Methods,JSONObject> callback,String... params){
  boolean result=false;
switch (method) {
case login:
    if (params.length != 2)     break;
  if (params[0] == null || params[1] == null)   break;
ApiCall loginCall=new ApiCall(context,callback,method,""String_Node_Str"",""String_Node_Str"");
RestClient loginClient=new RestClient(secureUrl,httpClient,RequestMethod.POST);
loginClient.AddParam(""String_Node_Str"",""String_Node_Str"");
loginClient.AddParam(""String_Node_Str"",params[0]);
loginClient.AddParam(""String_Node_Str"",Auth.md5(params[1]).toString());
loginClient.AddParam(""String_Node_Str"",URLEncoder.encode(Installation.id(context.getApplicationContext())));
loginClient.AddParam(""String_Node_Str"",Auth.Hmac.getSecretKey().toString());
loginCall.execute(loginClient);
result=true;
break;
case checkCredentials:
ApiCall checkCredentialsCall=new ApiCall(context,callback,method);
RestClient checkCredentialsClient=new RestClient(secureUrl,httpClient,RequestMethod.POST);
String installID=Installation.id(context.getApplicationContext());
String timestamp=Long.toString(Auth.getTimestamp());
String data=""String_Node_Str"" + timestamp + installID;
checkCredentialsClient.AddParam(""String_Node_Str"",""String_Node_Str"");
checkCredentialsClient.AddParam(""String_Node_Str"",installID);
checkCredentialsClient.AddParam(""String_Node_Str"",timestamp);
try {
checkCredentialsClient.AddParam(""String_Node_Str"",Auth.Hmac.generate(data).toString());
}
 catch (InvalidKeyException e) {
e.printStackTrace();
return false;
}
catch (NoSuchAlgorithmException e) {
e.printStackTrace();
return false;
}
checkCredentialsCall.execute(checkCredentialsClient);
result=true;
break;
case logout:
break;
case resetPassword:
break;
case getContract:
break;
case phone:
break;
case serviceReport:
break;
}
return result;
}",0.9918433931484504
184301,"public static String md5(String in){
  MessageDigest digest;
  try {
    digest=MessageDigest.getInstance(""String_Node_Str"");
    digest.reset();
    digest.update(in.getBytes());
    byte messageDigest[]=digest.digest();
    StringBuffer hexString=new StringBuffer();
    for (int i=0; i < messageDigest.length; i++)     hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
    return hexString.toString();
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  return null;
}","public static Hex md5(String in){
  MessageDigest digest;
  try {
    digest=MessageDigest.getInstance(""String_Node_Str"");
    digest.reset();
    digest.update(in.getBytes());
    byte messageDigest[]=digest.digest();
    return new Hex(messageDigest);
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  return null;
}",0.7685076380728555
184302,"public Hex(byte[] input){
  int len=input.length;
  StringBuilder sb=new StringBuilder(len << 1);
  for (int i=0; i < len; i++) {
    sb.append(Character.forDigit((input[i] & 0xf0) >> 4,16));
    sb.append(Character.forDigit((input[i] & 0x0f),16));
  }
  hex=sb.toString();
}","public Hex(byte[] input){
  int len=input.length;
  StringBuilder sb=new StringBuilder(len << 1);
  for (int i=0; i < len; i++) {
    sb.append(Character.forDigit((input[i] & 0xf0) >> 4,16));
    sb.append(Character.forDigit(input[i] & 0x0f,16));
  }
  hex=sb.toString();
}",0.9963503649635036
184303,"/** 
 * Splay the tree with root c to build a new tree that has the same keys but has a node that is ""nearest"" to k at the root. Here ""nearest"" means the new root node's key is equal to k if k is in the tree, otherwise there must be no other key in the tree in between k and the root node's key. (In the latter case there may be two ""nearest"" nodes - one less than k and one greater than k). Splaying is done by returning a new tree rather than modifying the input tree. The returned tree should generally share some of the existing cells from the input tree, and should create new cells for the remainder. The exact scheme for splaying that must be implemented is described in the project specification.
 * @param c The cell at root of the tree to splay.
 * @param k The key for which a ""nearest"" key from the tree is moved to theroot.
 * @return The root cell of the new tree.
 */
public Cell splay(Cell c,String k){
  if (c == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  int compareToCKey=k.compareTo(c.key());
  if (compareToCKey < 0 && c.lt != null) {
    int compareToLtKey=k.compareTo(c.lt.key());
    if (compareToLtKey < 0 && c.lt.lt != null) {
      Cell ll=splay(c.lt.lt,k);
      Cell newRR=cell(c.key(),c.lt.rt,c.rt);
      return cell(ll.key(),ll.lt,cell(c.lt.key(),ll.rt,newRR));
    }
 else     if (compareToLtKey > 0 && c.lt.rt != null) {
      Cell lr=splay(c.lt.rt,k);
      Cell newRRP=cell(c.lt.key(),c.lt.lt,c.lt.rt.lt);
      Cell newRRG=cell(c.key(),c.lt.rt.rt,c.rt);
      return cell(lr.key(),newRRP,newRRG);
    }
 else {
      return cell(c.lt.key(),c.lt.lt,cell(c.key(),c.lt.rt,c.rt));
    }
  }
 else   if (compareToCKey > 0 && c.rt != null) {
    int compareToRtKey=k.compareTo(c.rt.key());
    if (compareToRtKey > 0 && c.rt.rt != null) {
      Cell rr=splay(c.rt.rt,k);
      Cell newRR=cell(c.key(),c.lt,c.rt.lt);
      return cell(rr.key(),cell(c.rt.key(),newRR,rr.lt),rr.rt);
    }
 else     if (compareToRtKey > 0 && c.rt.lt != null) {
      Cell rl=splay(c.rt.lt,k);
      Cell newRRP=cell(c.rt.key(),c.rt.lt.rt,c.rt.rt);
      Cell newRRG=cell(c.key(),c.lt,c.rt.lt.lt);
      return cell(rl.key(),newRRG,newRRP);
    }
 else {
      return cell(c.rt.key(),cell(c.key(),c.lt,c.rt.lt),c.rt.rt);
    }
  }
 else {
    return c;
  }
}","/** 
 * Splay the tree with root c to build a new tree that has the same keys but has a node that is ""nearest"" to k at the root. Here ""nearest"" means the new root node's key is equal to k if k is in the tree, otherwise there must be no other key in the tree in between k and the root node's key. (In the latter case there may be two ""nearest"" nodes - one less than k and one greater than k). Splaying is done by returning a new tree rather than modifying the input tree. The returned tree should generally share some of the existing cells from the input tree, and should create new cells for the remainder. The exact scheme for splaying that must be implemented is described in the project specification.
 * @param c The cell at root of the tree to splay.
 * @param k The key for which a ""nearest"" key from the tree is moved to theroot.
 * @return The root cell of the new tree.
 */
public Cell splay(Cell c,String k){
  if (c == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  int compareToCKey=k.compareTo(c.key());
  if (compareToCKey < 0 && c.lt != null) {
    int compareToLtKey=k.compareTo(c.lt.key());
    if (compareToLtKey < 0 && c.lt.lt != null) {
      Cell ll=splay(c.lt.lt,k);
      Cell newRR=cell(c.key(),c.lt.rt,c.rt);
      return cell(ll.key(),ll.lt,cell(c.lt.key(),ll.rt,newRR));
    }
 else     if (compareToLtKey > 0 && c.lt.rt != null) {
      Cell lr=splay(c.lt.rt,k);
      Cell newRRP=cell(c.lt.key(),c.lt.lt,lr.lt);
      Cell newRRG=cell(c.key(),lr.rt,c.rt);
      return cell(lr.key(),newRRP,newRRG);
    }
 else {
      return cell(c.lt.key(),c.lt.lt,cell(c.key(),c.lt.rt,c.rt));
    }
  }
 else   if (compareToCKey > 0 && c.rt != null) {
    int compareToRtKey=k.compareTo(c.rt.key());
    if (compareToRtKey > 0 && c.rt.rt != null) {
      Cell rr=splay(c.rt.rt,k);
      Cell newRR=cell(c.key(),c.lt,c.rt.lt);
      return cell(rr.key(),cell(c.rt.key(),newRR,rr.lt),rr.rt);
    }
 else     if (compareToRtKey < 0 && c.rt.lt != null) {
      Cell rl=splay(c.rt.lt,k);
      Cell newRRP=cell(c.rt.key(),rl.rt,c.rt.rt);
      Cell newRRG=cell(c.key(),c.lt,rl.lt);
      return cell(rl.key(),newRRG,newRRP);
    }
 else {
      return cell(c.rt.key(),cell(c.key(),c.lt,c.rt.lt),c.rt.rt);
    }
  }
 else {
    return c;
  }
}",0.9916812609457092
184304,"public boolean add(String k){
  if (top == null) {
    top=cell(k,null,null);
    return true;
  }
  Cell s=splay(top,k);
  Iterator snapShot=new snapShotIterator();
  while (snapShot.hasNext() && snapShot.key.compareTo(k) != 0) {
  }
  return false;
  throw new RuntimeException(""String_Node_Str"");
}","public boolean add(String k){
  if (top == null) {
    top=cell(k,null,null);
    return true;
  }
  Cell s=splay(top,k);
  Iterator snapShot=snapShotIterator();
  throw new RuntimeException(""String_Node_Str"");
}",0.8265107212475633
184305,"@Override public Resource resolve(String path){
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + path);
  }
  String[] paths=path.split(""String_Node_Str"");
  String typeName=null;
switch (paths.length) {
case 5:
    return makeResouce(paths[ATTACHTO_TYPENAME],paths[ATTACHTO_ID],paths[ATTACH_TYPENAME]);
case 4:
  typeName=paths[TYPENAME];
if (""String_Node_Str"".equals(typeName)) {
  return makeTypeResouce(typeName,paths[ID]);
}
 else {
  return makeResouce(typeName,paths[ID]);
}
case 3:
typeName=paths[TYPENAME];
if (""String_Node_Str"".equals(typeName)) {
return makeTypeResouce(typeName);
}
 else {
return makeResouce(typeName);
}
default :
return null;
}
}","@Override public Resource resolve(String path){
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + path);
  }
  String[] paths=path.split(""String_Node_Str"");
  String typeName=null;
switch (paths.length) {
case 5:
    return makeAttachedEntityListResouce(paths[ATTACHTO_TYPENAME],paths[ATTACHTO_ID],paths[ATTACH_TYPENAME]);
case 4:
  typeName=paths[TYPENAME];
if (""String_Node_Str"".equalsIgnoreCase(paths[ID])) {
  return makeEntityNewResouce(typeName);
}
if (""String_Node_Str"".equals(typeName)) {
return makeTypeResouce(typeName,paths[ID]);
}
 else {
return makeEntityResouce(typeName,paths[ID]);
}
case 3:
typeName=paths[TYPENAME];
if (""String_Node_Str"".equals(typeName)) {
return makeTypeResouce(typeName);
}
 else {
return makeEntityListResouce(typeName);
}
default :
return null;
}
}",0.8401084010840109
184306,"public EntityResouce(Broker<DataHelper<Entity,Reader,Writer>> json,Broker<DataStore<Entity>> datas,String key){
  super(""String_Node_Str"",0,0);
  this.jsonHolder=json;
  this.datastoreHolder=datas;
  this.key=key;
}","public EntityResouce(Broker<DataHelper<Entity,Reader,Writer>> json,Broker<DataStore<Entity>> datas,String key){
  super(""String_Node_Str"",1,1);
  this.jsonHolder=json;
  this.datastoreHolder=datas;
  this.key=key;
}",0.986046511627907
184307,"protected void unlink(Type topType){
  for (  Type oldType : topType.subTypes) {
    for (    Field f : oldType.fields) {
      f.type.references.remove(f);
      if (f.attrs.containsKey(Type.ATTACH_TO)) {
        f.type.attachedBy.remove(oldType);
      }
    }
  }
}","protected void unlink(Type topType){
  for (  Field f : topType.fields) {
    f.type.references.remove(f);
    if (f.attrs.containsKey(Type.ATTACH)) {
      f.type.attachedBy.remove(topType);
    }
  }
  for (  Type oldType : topType.subTypes) {
    for (    Field f : oldType.fields) {
      f.type.references.remove(f);
      if (f.attrs.containsKey(Type.ATTACH)) {
        f.type.attachedBy.remove(oldType);
      }
    }
  }
}",0.4899713467048711
184308,"public EntityAction compile(CompilerContext context,Type type,String actionName,Code code){
  String name=type.name + ""String_Node_Str"" + NamesEncoding.encode(actionName)+ ""String_Node_Str""+ String.valueOf(count++);
  try {
    byte[] b=this.doCompile(name,code,context);
    if (log.isDebugEnabled()) {
      try {
        FileOutputStream fos=new FileOutputStream(""String_Node_Str"" + name + ""String_Node_Str"");
        fos.write(b);
        fos.close();
      }
 catch (      FileNotFoundException e) {
        log.error(e);
        throw new RuntimeException(e);
      }
catch (      IOException e) {
        log.error(e);
        throw new RuntimeException(e);
      }
    }
    Class<?> expClass=NebulaClassLoader.defineClass(name,b);
    EntityAction expr=(EntityAction)expClass.newInstance();
    return expr;
  }
 catch (  ClassFormatError e) {
    throw new RuntimeException(e);
  }
catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","public EntityAction compile(CompilerContext context,Type type,String actionName,Code code){
  if (code instanceof Compiler.Block && ((Compiler.Block)code).statements.size() == 0) {
    return this.noop;
  }
  String name=this.getClass().getSimpleName() + ""String_Node_Str"" + type.name+ ""String_Node_Str""+ NamesEncoding.encode(actionName)+ ""String_Node_Str""+ String.valueOf(count++);
  try {
    byte[] b=this.doCompile(name,code,context);
    if (log.isDebugEnabled()) {
      try {
        FileOutputStream fos=new FileOutputStream(""String_Node_Str"" + name + ""String_Node_Str"");
        fos.write(b);
        fos.close();
      }
 catch (      FileNotFoundException e) {
        log.error(e);
        throw new RuntimeException(e);
      }
catch (      IOException e) {
        log.error(e);
        throw new RuntimeException(e);
      }
    }
    Class<?> expClass=NebulaClassLoader.defineClass(name,b);
    EntityAction expr=(EntityAction)expClass.newInstance();
    return expr;
  }
 catch (  ClassFormatError e) {
    throw new RuntimeException(e);
  }
catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}",0.9082853345148428
184309,"public String compile(CompilerContext context,Type type,Code code){
  String name=""String_Node_Str"" + type.name + ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(count++);
  try {
    byte[] b=this.doCompile(name,code,context);
    if (log.isDebugEnabled()) {
      try {
        FileOutputStream fos=new FileOutputStream(""String_Node_Str"" + name + ""String_Node_Str"");
        fos.write(b);
        fos.close();
      }
 catch (      FileNotFoundException e) {
        log.error(e);
        throw new RuntimeException(e);
      }
catch (      IOException e) {
        log.error(e);
        throw new RuntimeException(e);
      }
    }
    NebulaClassLoader.defineClass(name,b);
    return name;
  }
 catch (  ClassFormatError e) {
    throw new RuntimeException(e);
  }
}","public String compile(CompilerContext context,Type type,Code code){
  String name=this.getClass().getSimpleName() + ""String_Node_Str"" + type.name+ ""String_Node_Str""+ ""String_Node_Str""+ String.valueOf(count++);
  try {
    byte[] b=this.doCompile(name,code,context);
    if (log.isDebugEnabled()) {
      try {
        FileOutputStream fos=new FileOutputStream(""String_Node_Str"" + name + ""String_Node_Str"");
        fos.write(b);
        fos.close();
      }
 catch (      FileNotFoundException e) {
        log.error(e);
        throw new RuntimeException(e);
      }
catch (      IOException e) {
        log.error(e);
        throw new RuntimeException(e);
      }
    }
    NebulaClassLoader.defineClass(name,b);
    return name;
  }
 catch (  ClassFormatError e) {
    throw new RuntimeException(e);
  }
}",0.9577287066246056
184310,"public <T>EntityExpression compile(CompilerContext context,Type type,String actionName,Expr<T> exp){
  String name=""String_Node_Str"" + type.name + ""String_Node_Str""+ NamesEncoding.encode(actionName)+ ""String_Node_Str""+ String.valueOf(count++);
  try {
    byte[] b=this.doCompile(name,exp,context);
    if (log.isDebugEnabled()) {
      try {
        FileOutputStream fos=new FileOutputStream(""String_Node_Str"" + name + ""String_Node_Str"");
        fos.write(b);
        fos.close();
      }
 catch (      FileNotFoundException e) {
        log.error(e);
        throw new RuntimeException(e);
      }
catch (      IOException e) {
        log.error(e);
        throw new RuntimeException(e);
      }
    }
    Class<?> expClass=NebulaClassLoader.defineClass(name,b);
    EntityExpression expr=(EntityExpression)expClass.newInstance();
    return expr;
  }
 catch (  ClassFormatError e) {
    throw new RuntimeException(e);
  }
catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","public <T>EntityExpression compile(CompilerContext context,Type type,String actionName,Expr<T> exp){
  String name=this.getClass().getSimpleName() + ""String_Node_Str"" + type.name+ ""String_Node_Str""+ NamesEncoding.encode(actionName)+ ""String_Node_Str""+ String.valueOf(count++);
  try {
    byte[] b=this.doCompile(name,exp,context);
    if (log.isDebugEnabled()) {
      try {
        FileOutputStream fos=new FileOutputStream(""String_Node_Str"" + name + ""String_Node_Str"");
        fos.write(b);
        fos.close();
      }
 catch (      FileNotFoundException e) {
        log.error(e);
        throw new RuntimeException(e);
      }
catch (      IOException e) {
        log.error(e);
        throw new RuntimeException(e);
      }
    }
    Class<?> expClass=NebulaClassLoader.defineClass(name,b);
    EntityExpression expr=(EntityExpression)expClass.newInstance();
    return expr;
  }
 catch (  ClassFormatError e) {
    throw new RuntimeException(e);
  }
catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}",0.9840401276789784
184311,"<T>byte[] doCompile(final String name,final Expr<T> expr,CompilerContext context){
  String actualClass=null;
  Class<?> cls=expr.getClass();
  do {
    if (cls.getGenericSuperclass() != null && cls.getGenericSuperclass() instanceof ParameterizedType) {
      ParameterizedType tp=(ParameterizedType)cls.getGenericSuperclass();
      if (tp.getActualTypeArguments()[0] instanceof Class) {
        Class<?> clz1=(Class<?>)tp.getActualTypeArguments()[0];
        actualClass=clz1.getName().replace('.','/');
        break;
      }
    }
    if (cls.getGenericInterfaces().length > 0) {
      for (      java.lang.reflect.Type tp : cls.getGenericInterfaces()) {
        ParameterizedType ttp=(ParameterizedType)tp;
        Class<?> clz1=(Class<?>)ttp.getActualTypeArguments()[0];
        actualClass=clz1.getName().replace('.','/');
        break;
      }
    }
    cls=cls.getSuperclass();
  }
 while (!Object.class.equals(cls));
  Preconditions.checkNotNull(actualClass);
  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);
  MethodVisitor mv;
  cw.visit(V1_6,ACC_PUBLIC + ACC_SUPER,name,""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str""});
{
    mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    mv.visitInsn(RETURN);
    mv.visitMaxs(0,0);
    mv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,""String_Node_Str"",""String_Node_Str"",null,null);
    expr.compile(cw,mv,context);
switch (expr.getExprType(context).rawType) {
case Boolean:
      mv.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    break;
case Long:
  mv.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
break;
default :
break;
}
mv.visitInsn(ARETURN);
mv.visitMaxs(0,0);
mv.visitEnd();
}
cw.visitEnd();
return cw.toByteArray();
}","<T>byte[] doCompile(final String name,final Expr<T> expr,CompilerContext context){
  String actualClass=null;
  Class<?> cls=expr.getClass();
  do {
    if (cls.getGenericSuperclass() != null && cls.getGenericSuperclass() instanceof ParameterizedType) {
      ParameterizedType tp=(ParameterizedType)cls.getGenericSuperclass();
      if (tp.getActualTypeArguments()[0] instanceof Class) {
        Class<?> clz1=(Class<?>)tp.getActualTypeArguments()[0];
        actualClass=clz1.getName().replace('.','/');
        break;
      }
    }
    if (cls.getGenericInterfaces().length > 0) {
      for (      java.lang.reflect.Type tp : cls.getGenericInterfaces()) {
        ParameterizedType ttp=(ParameterizedType)tp;
        Class<?> clz1=(Class<?>)ttp.getActualTypeArguments()[0];
        actualClass=clz1.getName().replace('.','/');
        break;
      }
    }
    cls=cls.getSuperclass();
  }
 while (!Object.class.equals(cls));
  Preconditions.checkNotNull(actualClass);
  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);
  MethodVisitor mv;
  cw.visit(V1_6,ACC_PUBLIC + ACC_SUPER,name,null,""String_Node_Str"",new String[]{""String_Node_Str""});
{
    mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    mv.visitInsn(RETURN);
    mv.visitMaxs(0,0);
    mv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    expr.compile(cw,mv,context);
switch (expr.getExprType(context).rawType) {
case Boolean:
      mv.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    break;
case Long:
  mv.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
break;
default :
break;
}
mv.visitInsn(ARETURN);
mv.visitMaxs(0,0);
mv.visitEnd();
}
cw.visitEnd();
return cw.toByteArray();
}",0.9872318692543413
184312,"protected void setUp() throws Exception {
  loader=new TypeLoaderForTest(new SystemTypeLoader());
  funcCmp=new EntityActionComplier();
  context=new CompilerContext(){
    @Override public Type resolveType(    String name){
      return loader.findType(name);
    }
  }
;
  cp=new Compiler(context);
}","protected void setUp() throws Exception {
  loader=new TypeLoaderForTest(new SystemTypeLoader());
  funcCmp=EntityActionComplier.DEFAULT;
  context=new CompilerContext(){
    @Override public Type resolveType(    String name){
      return loader.findType(name);
    }
  }
;
  cp=new Compiler(context);
}",0.976897689768977
184313,"protected void setUp() throws Exception {
  loader=new TypeLoaderForTest(new SystemTypeLoader());
  funcCmp=new EntityClauseComplier();
  context=new CompilerContext(){
    @Override public Type resolveType(    String name){
      return loader.findType(name);
    }
  }
;
  cp=new Compiler(context);
}","protected void setUp() throws Exception {
  loader=new TypeLoaderForTest(new SystemTypeLoader());
  funcCmp=EntityClauseComplier.DEFAULT;
  context=new CompilerContext(){
    @Override public Type resolveType(    String name){
      return loader.findType(name);
    }
  }
;
  cp=new Compiler(context);
}",0.976897689768977
184314,"@SuppressWarnings(""String_Node_Str"") private <T>T compute(Expr<T> expr,Entity entity){
  EntityExpressionComplier complier=new EntityExpressionComplier();
  return (T)complier.compile(new CompilerContext(){
    @Override public Type resolveType(    String name){
      return compiler.findType(name);
    }
  }
,type,""String_Node_Str"",expr).eval(context,null,entity);
}","@SuppressWarnings(""String_Node_Str"") private <T>T compute(Expr<T> expr,Entity entity){
  EntityExpressionComplier complier=EntityExpressionComplier.DEFAULT;
  return (T)complier.compile(new CompilerContext(){
    @Override public Type resolveType(    String name){
      return compiler.findType(name);
    }
  }
,type,""String_Node_Str"",expr).eval(context,null,entity);
}",0.981081081081081
184315,"EntityDataStore(Function<Entity,Object> keyMaker,DataReposEx dataRepos,Type type){
  this.dataRepos=dataRepos;
  this.values=new SmartList<Object,Entity>(keyMaker);
  this.idMaker=keyMaker;
  this.type=type;
  classificatores=Maps.newHashMap();
  for (  Field f : type.getFields()) {
    if (f.getAttrs().containsKey(""String_Node_Str"")) {
      if (f.getType().getStandalone() == TypeStandalone.Basic) {
        final String name=f.getName();
        DataClassificator<String,Entity> classificator=new DataClassificator<String,Entity>(new Function<Entity,String>(){
          @Override public String apply(          Entity from){
            return String.valueOf(from.get(name));
          }
        }
);
        this.values.addListener(classificator);
        classificatores.put(name,classificator);
        if (log.isDebugEnabled()) {
          log.debug(type.getName() + ""String_Node_Str"" + name);
        }
      }
 else       if (f.getRefer() == Reference.ByRef) {
        for (        Field inf : f.getType().getFields()) {
          if (inf.isKey() && inf.getType().getStandalone() == TypeStandalone.Basic) {
            final String name=f.getName() + inf.getName();
            DataClassificator<String,Entity> classificator=new DataClassificator<String,Entity>(new Function<Entity,String>(){
              @Override public String apply(              Entity from){
                return String.valueOf(from.get(name));
              }
            }
);
            this.values.addListener(classificator);
            classificatores.put(name,classificator);
            if (log.isDebugEnabled()) {
              log.debug(type.getName() + ""String_Node_Str"" + name);
            }
          }
        }
      }
    }
  }
}","EntityDataStore(Function<Entity,Object> keyMaker,DataReposEx dataRepos,Type type){
  this.dataRepos=dataRepos;
  this.values=new SmartList<Object,Entity>(keyMaker);
  this.idMaker=keyMaker;
  this.type=type;
  classificatores=Maps.newHashMap();
  for (  Field f : type.getFields()) {
    if (f.getAttrs().containsKey(Type.GROUP_BY) || f.getAttrs().containsKey(Type.ATTACH)) {
      if (f.getType().getStandalone() == TypeStandalone.Basic) {
        final String name=f.getName();
        DataClassificator<String,Entity> classificator=new DataClassificator<String,Entity>(new Function<Entity,String>(){
          @Override public String apply(          Entity from){
            return String.valueOf(from.get(name));
          }
        }
);
        this.values.addListener(classificator);
        classificatores.put(name,classificator);
        if (log.isDebugEnabled()) {
          log.debug(type.getName() + ""String_Node_Str"" + name);
        }
      }
 else       if (f.getRefer() == Reference.ByRef) {
        for (        Field inf : f.getType().getFields()) {
          if (inf.isKey() && inf.getType().getStandalone() == TypeStandalone.Basic) {
            final String name=f.getName() + inf.getName();
            DataClassificator<String,Entity> classificator=new DataClassificator<String,Entity>(new Function<Entity,String>(){
              @Override public String apply(              Entity from){
                return String.valueOf(from.get(name));
              }
            }
);
            this.values.addListener(classificator);
            classificatores.put(f.getName(),classificator);
            if (log.isDebugEnabled()) {
              log.debug(type.getName() + ""String_Node_Str"" + name);
            }
          }
        }
      }
    }
  }
}",0.9777651083238312
184316,"@Override public Resource resolve(String path){
  String extension=path.substring(path.lastIndexOf('.') + 1);
  Source source=loader.findSource(path);
  if (source != null) {
    return new StaticResource(source,TheMimeTypes.get(extension),this.age);
  }
  String theme=""String_Node_Str"";
  String skin=""String_Node_Str"";
  int last=path.lastIndexOf('/');
  int prev=path.indexOf('/') + 1;
  int next=path.indexOf(""String_Node_Str"",prev);
  if (0 < next && next <= last) {
    prev=next + 1;
  }
  next=path.indexOf(""String_Node_Str"",prev);
  if (0 < next && next <= last) {
    theme=path.substring(prev,next);
    prev=next + 1;
  }
  next=path.indexOf(""String_Node_Str"",prev);
  if (0 < next && next <= last) {
    skin=path.substring(prev,next);
    prev=next + 1;
  }
  String name=path.substring(prev);
  if ((source=loader.findSource(""String_Node_Str"" + ""String_Node_Str"" + theme + ""String_Node_Str""+ skin+ ""String_Node_Str""+ name)) != null) {
    return new StaticResource(source,TheMimeTypes.get(extension),this.age);
  }
 else   if ((source=loader.findSource(""String_Node_Str"" + ""String_Node_Str"" + theme + ""String_Node_Str""+ name)) != null) {
    return new StaticResource(source,TheMimeTypes.get(extension),this.age);
  }
 else   if ((source=loader.findSource(""String_Node_Str"" + ""String_Node_Str"" + name)) != null) {
    return new StaticResource(source,TheMimeTypes.get(extension),this.age);
  }
 else   if ((source=loader.findSource(""String_Node_Str"" + ""String_Node_Str"" + name)) != null) {
    return new StaticResource(source,TheMimeTypes.get(extension),this.age);
  }
 else   if ((source=loader.findSource(""String_Node_Str"" + name)) != null) {
    return new StaticResource(source,TheMimeTypes.get(extension),this.age);
  }
  String[] names=null;
  if (name.indexOf('/',prev) > 0) {
    return new StaticTemplateResouce(templateConfig,typeLoader,attributes,theme,skin,name);
  }
 else   if ((names=name.split(""String_Node_Str"")).length > 0) {
    String specName=null;
    final int start;
    if (""String_Node_Str"".indexOf(names[0]) >= 0) {
      start=1;
      specName=names[0];
    }
 else {
      start=0;
    }
    String attachedTypeName;
    String typeName;
    String layoutName;
    String actionName;
    Broker<Type> type;
    Broker<Type> attachedType;
switch (names.length - start) {
default :
case 4:
      attachedTypeName=names[start + 0];
    typeName=names[start + 1];
  layoutName=names[start + 2];
actionName=names[start + 3];
attachedType=typeBrokers.getBroker(attachedTypeName);
type=typeBrokers.getBroker(typeName);
if (specName == null && type.get().getStandalone() == TypeStandalone.Master) {
specName=""String_Node_Str"";
}
return new AttachedTypeTemplateResouce(templateConfig,dataWareHouse,attributes,path,theme,skin,attachedType,type,specName,layoutName,actionName);
case 3:
typeName=names[start + 0];
layoutName=names[start + 1];
actionName=names[start + 2];
type=typeBrokers.getBroker(typeName);
if (type.get().getAttrs().containsKey(Type.ATTACH_TO)) {
attachedTypeName=(String)type.get().getAttrs().get(Type.ATTACH_TO);
attachedType=typeBrokers.getBroker(attachedTypeName);
if (specName == null && type.get().getStandalone() == TypeStandalone.Master) {
specName=""String_Node_Str"";
}
return new AttachedTypeTemplateResouce(templateConfig,dataWareHouse,attributes,path,theme,skin,attachedType,type,specName,layoutName,actionName);
}
return new TypeTemplateResouce(templateConfig,dataWareHouse,attributes,path,theme,skin,type,specName,layoutName,actionName);
case 2:
typeName=names[start + 0];
layoutName=null;
actionName=names[start + 1];
type=typeBrokers.getBroker(typeName);
if (type.get().getAttrs().containsKey(Type.ATTACH_TO)) {
attachedTypeName=(String)type.get().getAttrs().get(Type.ATTACH_TO);
attachedType=typeBrokers.getBroker(attachedTypeName);
if (specName == null && type.get().getStandalone() == TypeStandalone.Master) {
specName=""String_Node_Str"";
}
return new AttachedTypeTemplateResouce(templateConfig,dataWareHouse,attributes,path,theme,skin,attachedType,type,specName,layoutName,actionName);
}
return new TypeTemplateResouce(templateConfig,dataWareHouse,attributes,path,theme,skin,type,specName,layoutName,actionName);
}
}
 else {
return new StaticTemplateResouce(templateConfig,typeLoader,attributes,theme,skin,name);
}
}","@Override public Resource resolve(String path){
  String extension=path.substring(path.lastIndexOf('.') + 1);
  Source source=loader.findSource(path);
  if (source != null) {
    return new StaticResource(source,TheMimeTypes.get(extension),this.age);
  }
  String theme=""String_Node_Str"";
  String skin=""String_Node_Str"";
  int last=path.lastIndexOf('/');
  int prev=path.indexOf('/') + 1;
  int next=path.indexOf(""String_Node_Str"",prev);
  if (0 < next && next <= last) {
    prev=next + 1;
  }
  next=path.indexOf(""String_Node_Str"",prev);
  if (0 < next && next <= last) {
    theme=path.substring(prev,next);
    prev=next + 1;
  }
  next=path.indexOf(""String_Node_Str"",prev);
  if (0 < next && next <= last) {
    skin=path.substring(prev,next);
    prev=next + 1;
  }
  String name=path.substring(prev);
  if ((source=loader.findSource(""String_Node_Str"" + ""String_Node_Str"" + theme + ""String_Node_Str""+ skin+ ""String_Node_Str""+ name)) != null) {
    return new StaticResource(source,TheMimeTypes.get(extension),this.age);
  }
 else   if ((source=loader.findSource(""String_Node_Str"" + ""String_Node_Str"" + theme + ""String_Node_Str""+ name)) != null) {
    return new StaticResource(source,TheMimeTypes.get(extension),this.age);
  }
 else   if ((source=loader.findSource(""String_Node_Str"" + ""String_Node_Str"" + name)) != null) {
    return new StaticResource(source,TheMimeTypes.get(extension),this.age);
  }
 else   if ((source=loader.findSource(""String_Node_Str"" + ""String_Node_Str"" + name)) != null) {
    return new StaticResource(source,TheMimeTypes.get(extension),this.age);
  }
 else   if ((source=loader.findSource(""String_Node_Str"" + name)) != null) {
    return new StaticResource(source,TheMimeTypes.get(extension),this.age);
  }
  String[] names=null;
  if (name.indexOf('/',prev) > 0) {
    return new StaticTemplateResouce(templateConfig,typeLoader,attributes,theme,skin,name);
  }
 else   if ((names=name.split(""String_Node_Str"")).length > 0) {
    String specName=null;
    final int start;
    if (""String_Node_Str"".indexOf(names[0]) >= 0) {
      start=1;
      specName=names[0];
    }
 else {
      start=0;
    }
    String attachedTypeName;
    String typeName;
    String layoutName;
    String actionName;
    Broker<Type> type;
    Broker<Type> attachedType;
switch (names.length - start) {
default :
case 4:
      attachedTypeName=names[start + 0];
    typeName=names[start + 1];
  layoutName=names[start + 2];
actionName=names[start + 3];
attachedType=typeBrokers.getBroker(attachedTypeName);
type=typeBrokers.getBroker(typeName);
if (specName == null && type.get().getStandalone() == TypeStandalone.Master) {
specName=""String_Node_Str"";
}
return new AttachedTypeTemplateResouce(templateConfig,dataWareHouse,attributes,path,theme,skin,attachedType,type,specName,layoutName,actionName);
case 3:
typeName=names[start + 0];
layoutName=names[start + 1];
actionName=names[start + 2];
type=typeBrokers.getBroker(typeName);
return new TypeTemplateResouce(templateConfig,dataWareHouse,attributes,path,theme,skin,type,specName,layoutName,actionName);
case 2:
typeName=names[start + 0];
layoutName=null;
actionName=names[start + 1];
type=typeBrokers.getBroker(typeName);
return new TypeTemplateResouce(templateConfig,dataWareHouse,attributes,path,theme,skin,type,specName,layoutName,actionName);
}
}
 else {
return new StaticTemplateResouce(templateConfig,typeLoader,attributes,theme,skin,name);
}
}",0.8300025953802233
184317,"protected void get(HttpServletRequest req){
  try {
    String query=URIUtil.decodePath(req.getQueryString());
    List<Entity> dataList;
    if (query == null || query.length() == 0) {
      dataList=datastoreHolder.get().listAll();
      this.cache=buildFrom(dataList);
    }
 else {
      this.cache=dataCache.get(query).get();
    }
    this.lastModified=System.currentTimeMillis();
  }
 catch (  ExecutionException e) {
    throw new RuntimeException(e);
  }
}","protected void get(HttpServletRequest req){
  this.cache=dataCached.get();
  this.lastModified=System.currentTimeMillis();
}",0.4176570458404074
184318,"public AttachedEntityListResouce(Broker<DataHelper<Entity,Reader,Writer>> json,Broker<DataStore<Entity>> datas,final String attachedToTypeName,final String attachToID){
  super(""String_Node_Str"",0,1000);
  this.jsonHolder=json;
  this.datastoreHolder=datas;
  this.dataCache=CacheBuilder.newBuilder().maximumSize(1000).build(new CacheLoader<String,DataHolder>(){
    public DataHolder load(    String query){
      DataStore<Entity> dataStore=datastoreHolder.get();
      Map<String,Classificator<String,Entity>> classificatores=dataStore.getClassificatores();
      return new DataHolder(classificatores.get(checkNotNull(attachedToTypeName)),attachToID);
    }
  }
);
  json.addWatcher(new DataWatcher<DataHelper<Entity,Reader,Writer>>(){
    @Override public boolean onUpdate(    DataHelper<Entity,Reader,Writer> newData,    DataHelper<Entity,Reader,Writer> oldData){
      dataCache.cleanUp();
      return false;
    }
  }
);
}","public AttachedEntityListResouce(Broker<DataHelper<Entity,Reader,Writer>> json,Broker<DataStore<Entity>> datas,final String attachedToTypeName,final String attachToID){
  super(""String_Node_Str"",0,1000);
  this.jsonHolder=json;
  this.datastoreHolder=datas;
  this.dataCached=new DataHolder(datastoreHolder.get().getClassificator(checkNotNull(attachedToTypeName)),attachToID);
}",0.4308632543926661
184319,"Flow(TypeLoader typeLoader,String name){
  super(typeLoader,name);
  steps=new SmartList<String,Step>(new Function<Step,String>(){
    @Override public String apply(    Step input){
      return input.name;
    }
  }
);
}","Flow(TypeLoader typeLoader,Type superType,String name){
  super(typeLoader,name,superType,TypeStandalone.Flow);
  steps=new SmartList<String,Step>(new Function<Step,String>(){
    @Override public String apply(    Step input){
      return input.name;
    }
  }
);
}",0.9075975359342916
184320,"public void put(T newData){
  boolean hasLostReference=false;
  for (  DataWatcher<T> listener : listeners) {
    if (listener != null) {
      boolean result=listener.onUpdate(newData,this.lastData);
      if (!result)       break;
    }
 else {
      hasLostReference=true;
    }
  }
  if (hasLostReference) {
    for (int i=listeners.size() - 1; i >= 0; i--) {
      DataWatcher<T> listener=listeners.get(i);
      if (listener == null) {
        listeners.remove(i);
      }
    }
  }
  this.lastData=newData;
}","public void put(T newData){
  boolean hasLostReference=false;
  for (  DataWatcher<T> listener : listeners) {
    if (listener != null) {
      boolean result=listener.onUpdate(newData,this.lastData);
      if (result)       break;
    }
 else {
      hasLostReference=true;
    }
  }
  if (hasLostReference) {
    for (int i=listeners.size() - 1; i >= 0; i--) {
      DataWatcher<T> listener=listeners.get(i);
      if (listener == null) {
        listeners.remove(i);
      }
    }
  }
  this.lastData=newData;
}",0.999028182701652
184321,"public DefaultDataRepos(TypeDatastore loader){
  this.typeBrokers=loader;
  this.cachedDatastore=CacheBuilder.newBuilder().build(new CacheLoader<String,BrokerEx>(){
    public BrokerEx load(    final String path) throws Exception {
      Broker<Type> typeBroker=DefaultDataRepos.this.typeBrokers.getBroker(path);
      DataStore datastore=DefaultDataRepos.this.loadDataStore(typeBroker.get().getName(),typeBroker.get());
      BrokerCascade<DataStore,Type> datastoreBroker=new BrokerCascade<DataStore,Type>(datastore){
        @Override public boolean onUpdate(        Type newData,        Type oldData){
          DataStore datastore=DefaultDataRepos.this.loadDataStore(newData.getName(),oldData);
          this.put(datastore);
          return false;
        }
      }
;
      typeBroker.addWatcher(datastoreBroker);
      return datastoreBroker;
    }
  }
);
}","public DefaultDataRepos(TypeDatastore loader){
  this.typeBrokers=loader;
  this.cachedDatastore=CacheBuilder.newBuilder().build(new CacheLoader<String,BrokerEx>(){
    public BrokerEx load(    final String path) throws Exception {
      Broker<Type> typeBroker=DefaultDataRepos.this.typeBrokers.getBroker(path);
      DataStore datastore=DefaultDataRepos.this.loadDataStore(typeBroker.get().getName(),typeBroker.get());
      BrokerCascade<DataStore,Type> datastoreBroker=new BrokerCascade<DataStore,Type>(datastore){
        @Override public boolean onUpdate(        Type newData,        Type oldData){
          DataStore datastore=DefaultDataRepos.this.loadDataStore(newData.getName(),newData);
          this.put(datastore);
          return false;
        }
      }
;
      typeBroker.addWatcher(datastoreBroker);
      return datastoreBroker;
    }
  }
);
}",0.9965277777777778
184322,"@Override public boolean onUpdate(Type newData,Type oldData){
  DataStore datastore=DefaultDataRepos.this.loadDataStore(newData.getName(),oldData);
  this.put(datastore);
  return false;
}","@Override public boolean onUpdate(Type newData,Type oldData){
  DataStore datastore=DefaultDataRepos.this.loadDataStore(newData.getName(),newData);
  this.put(datastore);
  return false;
}",0.9840425531914894
184323,"public final void testEntityList(){
  assertNotNull(store);
  Entity v=new EditableEntity();
  assertNotNull(v);
  v.put(""String_Node_Str"",""String_Node_Str"");
  List<EditableEntity> entities=new ArrayList<EditableEntity>();
  EditableEntity education=new EditableEntity();
  education.put(""String_Node_Str"",""String_Node_Str"");
  education.put(""String_Node_Str"",Date.valueOf(""String_Node_Str""));
  education.put(""String_Node_Str"",Date.valueOf(""String_Node_Str""));
  entities.add(education);
  education=new EditableEntity();
  education.put(""String_Node_Str"",""String_Node_Str"");
  education.put(""String_Node_Str"",Date.valueOf(""String_Node_Str""));
  education.put(""String_Node_Str"",Date.valueOf(""String_Node_Str""));
  entities.add(education);
  v.put(""String_Node_Str"",entities);
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(null,((EditableEntity)v).source);
  p.flush();
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(null,((EditableEntity)v).source);
  store.add(v);
  p.flush();
  assertEquals(false,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  @SuppressWarnings(""String_Node_Str"") List<Entity> educationList=(List<Entity>)v.get(""String_Node_Str"");
  assertEquals(2,educationList.size());
  int i=0;
  Entity edu=educationList.get(i);
  assertEquals(""String_Node_Str"",edu.get(""String_Node_Str""));
  assertEquals(Date.valueOf(""String_Node_Str""),edu.get(""String_Node_Str""));
  assertEquals(Date.valueOf(""String_Node_Str""),edu.get(""String_Node_Str""));
  i++;
  edu=educationList.get(i);
  assertEquals(""String_Node_Str"",edu.get(""String_Node_Str""));
  assertEquals(Date.valueOf(""String_Node_Str""),edu.get(""String_Node_Str""));
  assertEquals(Date.valueOf(""String_Node_Str""),edu.get(""String_Node_Str""));
  education=new EditableEntity();
  education.put(""String_Node_Str"",""String_Node_Str"");
  education.put(""String_Node_Str"",Date.valueOf(""String_Node_Str""));
  education.put(""String_Node_Str"",Date.valueOf(""String_Node_Str""));
}","public final void testEntityList(){
  assertNotNull(store);
  Entity v=new EditableEntity();
  assertNotNull(v);
  v.put(""String_Node_Str"",""String_Node_Str"");
  List<EditableEntity> entities=new ArrayList<EditableEntity>();
  EditableEntity education=new EditableEntity();
  education.put(""String_Node_Str"",""String_Node_Str"");
  education.put(""String_Node_Str"",Date.valueOf(""String_Node_Str""));
  education.put(""String_Node_Str"",Date.valueOf(""String_Node_Str""));
  entities.add(education);
  education=new EditableEntity();
  education.put(""String_Node_Str"",""String_Node_Str"");
  education.put(""String_Node_Str"",Date.valueOf(""String_Node_Str""));
  education.put(""String_Node_Str"",Date.valueOf(""String_Node_Str""));
  entities.add(education);
  v.put(""String_Node_Str"",entities);
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(null,((EditableEntity)v).source);
  p.flush();
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(null,((EditableEntity)v).source);
  store.add(v);
  p.flush();
  assertEquals(false,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(Entity.PRIMARY_KEY));
  @SuppressWarnings(""String_Node_Str"") List<Entity> educationList=(List<Entity>)v.get(""String_Node_Str"");
  assertEquals(2,educationList.size());
  int i=0;
  Entity edu=educationList.get(i);
  assertEquals(""String_Node_Str"",edu.get(""String_Node_Str""));
  assertEquals(Date.valueOf(""String_Node_Str""),edu.get(""String_Node_Str""));
  assertEquals(Date.valueOf(""String_Node_Str""),edu.get(""String_Node_Str""));
  i++;
  edu=educationList.get(i);
  assertEquals(""String_Node_Str"",edu.get(""String_Node_Str""));
  assertEquals(Date.valueOf(""String_Node_Str""),edu.get(""String_Node_Str""));
  assertEquals(Date.valueOf(""String_Node_Str""),edu.get(""String_Node_Str""));
  education=new EditableEntity();
  education.put(""String_Node_Str"",""String_Node_Str"");
  education.put(""String_Node_Str"",Date.valueOf(""String_Node_Str""));
  education.put(""String_Node_Str"",Date.valueOf(""String_Node_Str""));
}",0.9919299054646068
184324,"public final void testDefine(){
  store=p.define(String.class,Entity.class,""String_Node_Str"").get();
  assertNotNull(store);
  Entity v=new EditableEntity();
  assertNotNull(v);
  v.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  p.flush();
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  store.add(v);
  p.flush();
  assertEquals(false,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  v.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(null,store.get(""String_Node_Str"").get(""String_Node_Str""));
  store.flush();
  assertEquals(false,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  v.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  p.clearChanges();
  p.flush();
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  p.add(v);
  p.flush();
  assertEquals(false,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
}","public final void testDefine(){
  store=p.define(String.class,Entity.class,""String_Node_Str"").get();
  assertNotNull(store);
  Entity v=new EditableEntity();
  assertNotNull(v);
  v.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  p.flush();
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  store.add(v);
  p.flush();
  assertEquals(false,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(Entity.PRIMARY_KEY));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(Entity.PRIMARY_KEY));
  v.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(null,store.get(""String_Node_Str"").get(""String_Node_Str""));
  store.flush();
  assertEquals(false,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  v.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  p.clearChanges();
  p.flush();
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  p.add(v);
  p.flush();
  assertEquals(false,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
}",0.9381989405532666
184325,"public final void testDefine(){
  store=p.define(String.class,Entity.class,""String_Node_Str"").get();
  assertNotNull(store);
  Entity v=new EditableEntity();
  assertNotNull(v);
  v.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(null,((EditableEntity)v).source);
  p.flush();
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(null,((EditableEntity)v).source);
  store.add(v);
  p.flush();
  assertEquals(false,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  v.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(null,store.get(""String_Node_Str"").get(""String_Node_Str""));
  store.flush();
  assertEquals(false,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  v.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  p.clearChanges();
  p.flush();
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  p.add(v);
  p.flush();
  assertEquals(false,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
}","public final void testDefine(){
  store=p.define(String.class,Entity.class,""String_Node_Str"").get();
  assertNotNull(store);
  Entity v=new EditableEntity();
  assertNotNull(v);
  v.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(null,((EditableEntity)v).source);
  p.flush();
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(null,((EditableEntity)v).source);
  store.add(v);
  p.flush();
  assertEquals(false,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").getID());
  v.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(null,store.get(""String_Node_Str"").get(""String_Node_Str""));
  store.flush();
  assertEquals(false,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  v.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  p.clearChanges();
  p.flush();
  assertEquals(true,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
  p.add(v);
  p.flush();
  assertEquals(false,v.isDirty());
  assertEquals(""String_Node_Str"",v.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",store.get(""String_Node_Str"").get(""String_Node_Str""));
}",0.99412915851272
184326,"@SuppressWarnings(""String_Node_Str"") @Override public boolean equals(Object obj){
  return filterFunction.equals(((DataFilter<V>)obj).filterFunction);
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean equals(Object obj){
  return obj != null ? filterFunction.equals(((DataFilter<V>)obj).filterFunction) : false;
}",0.9325153374233128
184327,"@Override public void flush(){
  lock.lock();
  try {
    Iterator<EditableEntity> i=changes.listIterator();
    while (i.hasNext()) {
      EditableEntity e=i.next();
      e.store.apply(e);
    }
  }
  finally {
    changes.clear();
    lock.unlock();
  }
}","@Override public void flush(){
  lock.lock();
  try {
    Iterator<EditableEntity> i=changes.listIterator();
    while (i.hasNext()) {
      EditableEntity e=i.next();
      e.store.apply(e);
    }
    changes.clear();
  }
  finally {
    lock.unlock();
  }
}",0.918918918918919
184328,"@Override public void clearChanges(){
  lock.lock();
  changes.clear();
  lock.unlock();
}","@Override public void clearChanges(){
  lock.lock();
  try {
    changes.clear();
  }
  finally {
    lock.unlock();
  }
}",0.8490566037735849
184329,"@Override public void markChanged(Entity v){
  lock.lock();
  changes.add((EditableEntity)v);
  lock.unlock();
}","@Override public void markChanged(Entity v){
  lock.lock();
  try {
    changes.add((EditableEntity)v);
  }
  finally {
    lock.unlock();
  }
}",0.875
184330,"public final void testAdd_Update_Remove(){
  DateTime now=new DateTime();
  EditableEntity v=new EditableEntity();
  v.put(""String_Node_Str"",now);
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.withDayOfWeek(1));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.withDayOfMonth(1));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(1).withDayOfMonth(1));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(2).withDayOfMonth(2));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(3).withDayOfMonth(2));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(4).withDayOfMonth(2));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(5).withDayOfMonth(2));
  list.add(v);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3,classificator.getData(""String_Node_Str"").size());
  EditableEntity v1=new EditableEntity();
  v1.put(""String_Node_Str"",now.withDayOfMonth(2));
  list.remove(v);
  list.add(v1);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1 + 1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3 - 1,classificator.getData(""String_Node_Str"").size());
  list.remove(v1);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1 + 1 - 1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3 - 1,classificator.getData(""String_Node_Str"").size());
  Set<String> classifications=classificator.getClassifications();
  assertEquals(5,classifications.size());
  assertEquals(""String_Node_Str"",Joiner.on(""String_Node_Str"").join(classifications));
}","public final void testAdd_Update_Remove(){
  DateTime now=new DateTime();
  EditableEntity v=new EditableEntity();
  v.put(""String_Node_Str"",now);
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.withDayOfWeek(1));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.withDayOfMonth(1));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(1).withDayOfMonth(1));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(2).withDayOfMonth(2));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(3).withDayOfMonth(2));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(4).withDayOfMonth(2));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(5).withDayOfMonth(2));
  list.add(v);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3,classificator.getData(""String_Node_Str"").size());
  EditableEntity v1=new EditableEntity();
  v1.put(""String_Node_Str"",now.withDayOfMonth(2));
  list.remove(v);
  list.add(v1);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1 + 1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3 - 1,classificator.getData(""String_Node_Str"").size());
  list.remove(v1);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1 + 1 - 1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3 - 1,classificator.getData(""String_Node_Str"").size());
  Set<String> classifications=classificator.getClassifications();
  assertEquals(5,classifications.size());
  assertEquals(""String_Node_Str"",Joiner.on(""String_Node_Str"").join(classifications));
  EditableEntity vOld=new EditableEntity();
  vOld.put(""String_Node_Str"",now.minusMonths(9));
  list.add(vOld);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1 + 1 - 1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3 - 1,classificator.getData(""String_Node_Str"").size());
  assertEquals(0,classificator.getData(""String_Node_Str"").size());
}",0.8948840927258194
184331,"public RecentDateClassificatorFunction(){
  today=new DateTime().withMillisOfDay(0);
  thisWeek=today.withDayOfWeek(1);
  thisMonth=today.withDayOfMonth(1);
  threeMonth=today.minusMonths(2).withDayOfMonth(1);
  sixMonth=today.minusMonths(5).withDayOfMonth(1);
}","public RecentDateClassificatorFunction(DateTime today){
  this.today=today;
  thisWeek=today.withDayOfWeek(1);
  thisMonth=today.withDayOfMonth(1);
  threeMonth=today.minusMonths(2).withDayOfMonth(1);
  sixMonth=today.minusMonths(5).withDayOfMonth(1);
}",0.3611650485436893
184332,"public static String encode(String value){
  char[] vs=value.toCharArray();
  char[] nvs=new char[vs.length * 3 + 1];
  int posV=0;
  int posNv=0;
  boolean special=false;
  for (; posV < vs.length; ) {
    if (vs[posV] < 0xFF) {
      char v=vs[posV++];
      if ('0' <= v && v <= '9') {
        nvs[posNv++]='D';
        nvs[posNv++]=v;
        special=true;
        break;
      }
 else       if ('A' <= v && v <= 'Z') {
        nvs[posNv++]=v;
        break;
      }
 else       if ('a' <= v && v <= 'z') {
        nvs[posNv++]=(char)(v - 0x20);
        break;
      }
 else {
      }
    }
 else {
      nvs[posNv++]='Z';
      special=true;
      break;
    }
  }
  for (; posV < vs.length; posV++) {
    char v=vs[posV];
    if (v < 0xFF) {
      if (('0' <= v && v <= '9') || ('A' <= v && v <= 'Z')) {
        nvs[posNv++]=v;
      }
 else       if ('a' <= v && v <= 'z') {
        nvs[posNv++]=(char)(v - 0x20);
      }
 else       if ('_' == v) {
        nvs[posNv++]=v;
      }
 else       if ('-' == v) {
        nvs[posNv++]='_';
      }
 else {
      }
    }
 else {
      int nv=v - 0xFF;
      nvs[posNv++]=e[nv % SPAC];
      nv/=SPAC;
      nvs[posNv++]=e[nv % SPAC];
    }
  }
  if (special) {
    nvs[posNv++]='_';
  }
  return new String(nvs,0,posNv);
}","public static String encode(String value){
  char[] vs=value.toCharArray();
  char[] nvs=new char[vs.length * 3 + 1];
  int posV=0;
  int posNv=0;
  boolean special=false;
  for (; posV < vs.length; ) {
    if (vs[posV] < 0xFF) {
      char v=vs[posV++];
      if ('0' <= v && v <= '9') {
        nvs[posNv++]='D';
        nvs[posNv++]=v;
        special=true;
        break;
      }
 else       if ('A' <= v && v <= 'Z') {
        nvs[posNv++]=v;
        break;
      }
 else       if ('a' <= v && v <= 'z') {
        nvs[posNv++]=(char)(v - 0x20);
        break;
      }
 else {
      }
    }
 else {
      nvs[posNv++]='Z';
      special=true;
      break;
    }
  }
  for (; posV < vs.length; posV++) {
    char v=vs[posV];
    if (v < 0xFF) {
      if (('0' <= v && v <= '9') || ('A' <= v && v <= 'Z')) {
        nvs[posNv++]=v;
      }
 else       if ('a' <= v && v <= 'z') {
        nvs[posNv++]=(char)(v - 0x20);
      }
 else       if ('_' == v) {
        nvs[posNv++]=v;
      }
 else       if ('-' == v) {
        nvs[posNv++]='_';
      }
 else {
      }
    }
 else {
      int nv=v - 0xFF;
      nvs[posNv++]=e[nv % SPAC];
      nv/=SPAC;
      nvs[posNv++]=e[nv % SPAC];
    }
  }
  if (special) {
    nvs[posNv++]='_';
  }
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + value + ""String_Node_Str""+ new String(nvs,0,posNv)+ ""String_Node_Str"");
  }
  return new String(nvs,0,posNv);
}",0.9419642857142856
184333,"public final void testAdd_Update_Remove(){
  DateTime now=new DateTime();
  EditableEntity v=new EditableEntity();
  v.put(""String_Node_Str"",now);
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.withDayOfWeek(1));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.withDayOfMonth(1));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(1).withDayOfMonth(1));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(2).withDayOfMonth(2));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(3).withDayOfMonth(2));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(4).withDayOfMonth(2));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(5).withDayOfMonth(2));
  list.add(v);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3,classificator.getData(""String_Node_Str"").size());
  EditableEntity v1=new EditableEntity();
  v1.put(""String_Node_Str"",now.withDayOfMonth(2));
  list.remove(v);
  list.add(v1);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1 + 1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3 - 1,classificator.getData(""String_Node_Str"").size());
  list.remove(v1);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1 + 1 - 1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3 - 1,classificator.getData(""String_Node_Str"").size());
  Set<String> classifications=classificator.getClassifications();
  assertEquals(5,classifications.size());
  assertEquals(""String_Node_Str"",Joiner.on(""String_Node_Str"").join(classifications));
  EditableEntity vOld=new EditableEntity();
  vOld.put(""String_Node_Str"",now.minusMonths(9));
  list.add(vOld);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1 + 1 - 1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3 - 1,classificator.getData(""String_Node_Str"").size());
  assertEquals(0,classificator.getData(""String_Node_Str"").size());
}","public final void testAdd_Update_Remove(){
  DateTime now=new DateTime().withDayOfMonth(10).withDayOfWeek(3);
  EditableEntity v=new EditableEntity();
  v.put(""String_Node_Str"",now);
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.withDayOfWeek(1));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.withDayOfMonth(1));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(1).withDayOfMonth(1));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(2).withDayOfMonth(2));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(3).withDayOfMonth(2));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(4).withDayOfMonth(2));
  list.add(v);
  v=new EditableEntity();
  v.put(""String_Node_Str"",now.minusMonths(5).withDayOfMonth(2));
  list.add(v);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3,classificator.getData(""String_Node_Str"").size());
  EditableEntity v1=new EditableEntity();
  v1.put(""String_Node_Str"",now.withDayOfMonth(2));
  list.remove(v);
  list.add(v1);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1 + 1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3 - 1,classificator.getData(""String_Node_Str"").size());
  list.remove(v1);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1 + 1 - 1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3 - 1,classificator.getData(""String_Node_Str"").size());
  Set<String> classifications=classificator.getClassifications();
  assertEquals(5,classifications.size());
  assertEquals(""String_Node_Str"",Joiner.on(""String_Node_Str"").join(classifications));
  EditableEntity vOld=new EditableEntity();
  vOld.put(""String_Node_Str"",now.minusMonths(9));
  list.add(vOld);
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1,classificator.getData(""String_Node_Str"").size());
  assertEquals(1 + 1 - 1,classificator.getData(""String_Node_Str"").size());
  assertEquals(2,classificator.getData(""String_Node_Str"").size());
  assertEquals(3 - 1,classificator.getData(""String_Node_Str"").size());
  assertEquals(0,classificator.getData(""String_Node_Str"").size());
}",0.8584261588214157
184334,"protected void setUp() throws Exception {
  super.setUp();
  list=new SmartList<Entity>(new Function<Entity,String>(){
    @Override public String apply(    Entity from){
      return from.get(""String_Node_Str"").toString();
    }
  }
);
  classificator=list.liveClassify(new Function<Entity,String>(){
    Function<DateTime,String> convertFunction=new RecentDateClassificatorFunction();
    @Override public String apply(    Entity from){
      return convertFunction.apply((DateTime)from.get(""String_Node_Str""));
    }
  }
);
}","protected void setUp() throws Exception {
  super.setUp();
  list=new SmartList<Entity>(new Function<Entity,String>(){
    @Override public String apply(    Entity from){
      return from.get(""String_Node_Str"").toString();
    }
  }
);
  classificator=list.liveClassify(new Function<Entity,String>(){
    Function<DateTime,String> convertFunction=new RecentDateClassificatorFunction(new DateTime().withDayOfMonth(10).withDayOfWeek(3));
    @Override public String apply(    Entity from){
      return convertFunction.apply((DateTime)from.get(""String_Node_Str""));
    }
  }
);
}",0.9547920433996384
184335,"public void testActualFields_Key() throws RecognitionException {
  String text=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  List<Type> fs=loader.defineNebula(new StringReader(text));
  Type type=fs.get(0);
}","public void testActualFields_Key() throws RecognitionException {
  String text=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  List<Type> fs=loader.defineNebula(new StringReader(text));
  Type type=fs.get(0);
  List<Field> fields=type.fields;
  int i=0;
  assertEquals(""String_Node_Str"",fields.get(i).name);
  assertEquals(Importance.Key,fields.get(i).importance);
  i++;
  assertEquals(""String_Node_Str"",fields.get(i).name);
  assertEquals(Importance.Key,fields.get(i).importance);
  assertEquals(i + 1,fields.size());
}",0.6959921798631477
184336,"public void testPerson() throws Exception {
  String text=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  type=loader.testDefineNebula(new StringReader(text)).get(0);
  store=persistence.define(Entity.class,type.getName());
  Holder<DataHelper<Entity,Reader,Writer>> json=JsonHelperProvider.getHelper(store,type);
  Entity n=new EditableEntity();
  n=json.get().readFrom(n,new StringReader(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  assertEquals(""String_Node_Str"",n.get(""String_Node_Str""));
  assertEquals(12L,n.get(""String_Node_Str""));
  assertEquals(new BigDecimal(""String_Node_Str""),n.get(""String_Node_Str""));
  DateTimeFormatter sdf;
  sdf=DateTimeFormat.forPattern(""String_Node_Str"");
  assertEquals(sdf.parseDateTime(""String_Node_Str""),n.get(""String_Node_Str""));
  sdf=DateTimeFormat.forPattern(""String_Node_Str"");
  assertEquals(sdf.parseDateTime(""String_Node_Str""),n.get(""String_Node_Str""));
  sdf=DateTimeFormat.forPattern(""String_Node_Str"");
  assertEquals(sdf.parseDateTime(""String_Node_Str""),n.get(""String_Node_Str""));
  sdf=DateTimeFormat.forPattern(""String_Node_Str"");
  assertEquals(sdf.parseDateTime(""String_Node_Str""),n.get(""String_Node_Str""));
  Writer out=new StringWriter();
  json.get().stringifyTo(n,out);
  assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",out.toString());
}","public void testPerson() throws Exception {
  String text=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  type=loader.testDefineNebula(new StringReader(text)).get(0);
  store=persistence.define(Entity.class,type.getName());
  Holder<DataHelper<Entity,Reader,Writer>> json=JsonHelperProvider.getHelper(store,type);
  Entity n=new EditableEntity();
  n=json.get().readFrom(n,new StringReader(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  assertEquals(""String_Node_Str"",n.get(""String_Node_Str""));
  assertEquals(12L,n.get(""String_Node_Str""));
  assertEquals(new BigDecimal(""String_Node_Str""),n.get(""String_Node_Str""));
  DateTimeFormatter sdf;
  sdf=DateTimeFormat.forPattern(""String_Node_Str"");
  assertEquals(sdf.parseDateTime(""String_Node_Str""),n.get(""String_Node_Str""));
  sdf=DateTimeFormat.forPattern(""String_Node_Str"");
  assertEquals(sdf.parseDateTime(""String_Node_Str""),n.get(""String_Node_Str""));
  sdf=DateTimeFormat.forPattern(""String_Node_Str"");
  assertEquals(sdf.parseDateTime(""String_Node_Str""),n.get(""String_Node_Str""));
  sdf=DateTimeFormat.forPattern(""String_Node_Str"");
  assertEquals(sdf.parseDateTime(""String_Node_Str"").getMillis(),n.get(""String_Node_Str""));
  Writer out=new StringWriter();
  json.get().stringifyTo(n,out);
  assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",out.toString());
}",0.9963898916967509
184337,"@Override public void output(JsonGenerator out,Type value) throws Exception {
  Type type=(Type)value;
  out.writeStartObject();
  out.writeStringField(""String_Node_Str"",type.getName());
  if (type.getSuperType() != null) {
    out.writeStringField(""String_Node_Str"",type.getSuperType().getName());
  }
  out.writeStringField(""String_Node_Str"",type.getStandalone().name());
  out.writeFieldName(""String_Node_Str"");
  fieldListDataDealer.writeTo(null,type.getFields(),out);
  out.writeFieldName(""String_Node_Str"");
  out.writeStartObject();
  InheritHashMap p=type.getAttrs();
  for (  String k : p.getNames()) {
    out.writeStringField(k,p.get(k).toString());
  }
  out.writeEndObject();
  Alias n=type.getNameAlias();
  out.writeFieldName(""String_Node_Str"");
  out.writeStartObject();
  for (  String k : n.alias.keySet()) {
    out.writeStringField(k,n.alias.get(k).toString());
  }
  out.writeEndObject();
  out.writeBooleanField(""String_Node_Str"",type.isMutable());
  out.writeStringField(""String_Node_Str"",type.getCode());
  out.writeEndObject();
}","@Override public void output(JsonGenerator out,Type value) throws Exception {
  Type type=(Type)value;
  out.writeStartObject();
  out.writeStringField(""String_Node_Str"",type.getName());
  if (type.getSuperType() != null) {
    out.writeStringField(""String_Node_Str"",type.getSuperType().getName());
  }
  out.writeStringField(""String_Node_Str"",type.getStandalone().name());
  out.writeFieldName(""String_Node_Str"");
  fieldListDataDealer.writeTo(null,type.getFields(),out);
  Alias n=type.getNameAlias();
  out.writeFieldName(""String_Node_Str"");
  out.writeStartObject();
  for (  String k : n.alias.keySet()) {
    out.writeStringField(k,n.alias.get(k).toString());
  }
  out.writeEndObject();
  out.writeFieldName(""String_Node_Str"");
  out.writeStartObject();
  InheritHashMap p=type.getAttrs();
  for (  String k : p.getNames()) {
    out.writeStringField(k,p.get(k).toString());
  }
  out.writeEndObject();
  out.writeBooleanField(""String_Node_Str"",type.isMutable());
  out.writeStringField(""String_Node_Str"",type.getCode());
  out.writeEndObject();
}",0.9060721062618596
184338,"public void put(String name,Object v){
  newData.put(name,v);
  if (data != null) {
    store.markChanged(this);
  }
  this.dirty=true;
}","public void put(String name,Object v){
  newData.put(name,v);
  if (!this.dirty && data != null) {
    store.markChanged(this);
  }
  this.dirty=true;
}",0.9480968858131488
184339,"@Override public void add(Entity v){
  persistence.add(v);
}","@Override public void add(Entity v){
  if (v.isTransient()) {
    EditableEntity entity=(EditableEntity)v;
    entity.store=this;
  }
  persistence.add(v);
}",0.5529953917050692
184340,"@Override protected String post(Request req){
  try {
    DataStore<Entity> store=datastoreHolder.get();
    Entity data=store.createNew();
    InputStream in=req.getInputStream();
    if (log.isTraceEnabled()) {
      in=FileUtil.print(in);
    }
    Entity inData=jsonHolder.get().readFrom(data,new InputStreamReader(in));
    store.add(inData);
    store.flush();
    return req.getAddress().getPath() + data.getID();
  }
 catch (  IOException e) {
    log.error(e);
    throw new RuntimeException(e);
  }
}","@Override protected String post(Request req){
  try {
    DataStore<Entity> store=datastoreHolder.get();
    InputStream in=req.getInputStream();
    if (log.isTraceEnabled()) {
      in=FileUtil.print(in);
    }
    Entity inData=jsonHolder.get().readFrom(null,new InputStreamReader(in));
    store.add(inData);
    store.flush();
    return req.getAddress().getPath() + inData.getID();
  }
 catch (  IOException e) {
    log.error(e);
    throw new RuntimeException(e);
  }
}",0.9523809523809524
184341,"protected void put(Request req) throws IOException {
  BufferedInputStream bio=new BufferedInputStream(req.getInputStream());
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"");
    log.trace(FileUtil.readAllTextFrom(bio));
  }
  Type type=typeLoader.findType(key);
  String oldCode=type.getCode();
  String newCode=FileUtil.readAllTextFrom(bio);
  if (!oldCode.equals(newCode)) {
    if (log.isTraceEnabled()) {
      log.trace(""String_Node_Str"");
      log.trace(oldCode);
      log.trace(""String_Node_Str"");
      log.trace(type.getCode());
    }
    type=typeLoader.update(type,newCode);
    dataWareHouse.define(Entity.class,type.getName());
  }
 else {
    if (log.isTraceEnabled()) {
      log.trace(""String_Node_Str"");
      log.trace(type.getCode());
    }
  }
}","protected void put(Request req) throws IOException {
  BufferedInputStream bio=new BufferedInputStream(req.getInputStream());
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"");
    log.trace(FileUtil.readAllTextFrom(bio));
  }
  Type type=typeLoader.findType(key);
  String oldCode=type.getCode();
  String newCode=FileUtil.readAllTextFrom(bio);
  if (!oldCode.equals(newCode)) {
    if (log.isTraceEnabled()) {
      log.trace(""String_Node_Str"");
      log.trace(oldCode);
      log.trace(""String_Node_Str"");
      log.trace(type.getCode());
    }
    type=typeLoader.update(type,newCode);
    dataWareHouse.reload(Entity.class,type.getName());
  }
 else {
    if (log.isTraceEnabled()) {
      log.trace(""String_Node_Str"");
      log.trace(type.getCode());
    }
  }
}",0.992337164750958
184342,"public SqlHelper(final DbConfiguration config,Type type){
  try {
    this.config=config;
    this.clz=type;
    tableName=decodeTypeName(type.getName());
    List<DefaultFieldSerializer<?>> fieldSerializer=new ArrayList<>();
    List<Field> fl=type.getFields();
    ArrayList<DatabaseColumn> listUserColumns=new ArrayList<DatabaseColumn>();
    for (    Field f : fl) {
      Type rT;
switch (f.getRefer()) {
case ByVal:
        addColumn(listUserColumns,f.getName(),f,f.isKey());
      fieldSerializer.add(new BasicTypeFieldSerializer(f.getName(),toColumnName(f.getName()),f.isArray(),f.getType().getRawType()));
    break;
case Inline:
  rT=f.getType();
if (f.isArray()) {
  List<ListTypeAdapter<?>> adapteres=new ArrayList<>();
  List<String> subFieldNames=new ArrayList<>();
  for (  Field rf : rT.getFields()) {
    addColumn(listUserColumns,f.getName(),rf.getName(),f.isArray(),rf,f.isKey() && rf.isKey());
    adapteres.add(ListTypeAdapter.getAdapter(rf.getType().getRawType()));
    subFieldNames.add(rf.getName());
  }
  fieldSerializer.add(new EntityListFieldSerializer(f.getName(),adapteres,subFieldNames));
}
 else {
  for (  Field rf : rT.getFields()) {
    addColumn(listUserColumns,f.getName(),rf.getName(),f.isArray(),rf,f.isKey() && rf.isKey());
    fieldSerializer.add(new BasicTypeFieldSerializer(toColumnName(f.getName(),rf.getName()),toColumnName(f.getName(),rf.getName()),f.isArray(),rf.getType().getRawType()));
  }
}
break;
case ByRef:
rT=f.getType();
for (Field rf : rT.getFields()) {
switch (rf.getImportance()) {
case Key:
case Core:
addColumn(listUserColumns,rT.getName(),rf.getName(),f.isArray(),rf,f.isKey() && rf.isKey());
fieldSerializer.add(new BasicTypeFieldSerializer(toColumnName(f.getName(),rf.getName()),toColumnName(f.getName(),rf.getName()),f.isArray(),rf.getType().getRawType()));
break;
}
}
break;
case Cascade:
rT=f.getType();
for (Field rf : rT.getFields()) {
switch (rf.getImportance()) {
case Key:
case Core:
addColumn(listUserColumns,rT.getName(),rf.getName(),f.isArray(),rf,f.isKey() || rf.isKey());
fieldSerializer.add(new BasicTypeFieldSerializer(toColumnName(f.getName(),rf.getName()),toColumnName(f.getName(),rf.getName()),f.isArray(),rf.getType().getRawType()));
break;
}
}
break;
}
}
StringBuilder sbForSelect=new StringBuilder();
StringBuilder sbForWhere=new StringBuilder();
ArrayList<DatabaseColumn> listKeyColumns=new ArrayList<DatabaseColumn>();
String sql=""String_Node_Str"";
for (DatabaseColumn column : listUserColumns) {
sbForSelect.append(column.columnName);
sbForSelect.append(',');
sbForWhere.append(""String_Node_Str"");
if (column.key) {
listKeyColumns.add(column);
sql+=column.columnName + ""String_Node_Str"";
}
}
ArrayList<DatabaseColumn> listSystemColumns=new ArrayList<DatabaseColumn>();
DatabaseColumn col=new DatabaseColumn(""String_Node_Str"",""String_Node_Str"",false,false,false,RawTypes.Timestamp,0,0,0);
listSystemColumns.add(col);
fieldSerializer.add(new SystemTypeFieldSerializer(""String_Node_Str"",""String_Node_Str"",false,RawTypes.Timestamp));
this.entitySerializer=new EntityFieldSerializer(fieldSerializer);
this.keyColumns=listKeyColumns.toArray(new DatabaseColumn[0]);
this.wherekeys=sql.substring(0,sql.length() - 4);
this.userColumns=listUserColumns.toArray(new DatabaseColumn[0]);
this.systemColumns=listSystemColumns.toArray(new DatabaseColumn[0]);
this.fieldlist_comma=sbForSelect.substring(0,sbForSelect.length() - 1);
this.fieldlist_questions=sbForWhere.substring(0,sbForWhere.length() - 1);
}
 catch (Exception e) {
throw new RuntimeException(e);
}
}","public SqlHelper(final DbConfiguration config,Type type){
  try {
    this.config=config;
    this.clz=type;
    tableName=decodeTypeName(type.getName());
    List<DefaultFieldSerializer<?>> fieldSerializer=new ArrayList<>();
    List<Field> fl=type.getFields();
    ArrayList<DatabaseColumn> listUserColumns=new ArrayList<DatabaseColumn>();
    for (    Field f : fl) {
      Type rT;
switch (f.getRefer()) {
case ByVal:
        addColumn(listUserColumns,f.getName(),f,f.isKey());
      fieldSerializer.add(new BasicTypeFieldSerializer(toFieldName(f.getName()),toColumnName(f.getName()),f.isArray(),f.getType().getRawType()));
    break;
case Inline:
  rT=f.getType();
if (f.isArray()) {
  List<ListTypeAdapter<?>> adapteres=new ArrayList<>();
  List<String> subFieldNames=new ArrayList<>();
  for (  Field rf : rT.getFields()) {
    addColumn(listUserColumns,f.getName(),rf.getName(),f.isArray(),rf,f.isKey() && rf.isKey());
    adapteres.add(ListTypeAdapter.getAdapter(rf.getType().getRawType()));
    subFieldNames.add(rf.getName());
  }
  fieldSerializer.add(new EntityListFieldSerializer(toFieldName(f.getName()),adapteres,subFieldNames));
}
 else {
  for (  Field rf : rT.getFields()) {
    addColumn(listUserColumns,f.getName(),rf.getName(),f.isArray(),rf,f.isKey() && rf.isKey());
    fieldSerializer.add(new BasicTypeFieldSerializer(toFieldName(f.getName(),rf.getName()),toColumnName(f.getName(),rf.getName()),f.isArray(),rf.getType().getRawType()));
  }
}
break;
case ByRef:
rT=f.getType();
for (Field rf : rT.getFields()) {
switch (rf.getImportance()) {
case Key:
case Core:
addColumn(listUserColumns,rT.getName(),rf.getName(),f.isArray(),rf,f.isKey() && rf.isKey());
fieldSerializer.add(new BasicTypeFieldSerializer(toFieldName(f.getName(),rf.getName()),toColumnName(f.getName(),rf.getName()),f.isArray(),rf.getType().getRawType()));
break;
}
}
break;
case Cascade:
rT=f.getType();
for (Field rf : rT.getFields()) {
switch (rf.getImportance()) {
case Key:
case Core:
addColumn(listUserColumns,rT.getName(),rf.getName(),f.isArray(),rf,f.isKey() || rf.isKey());
fieldSerializer.add(new BasicTypeFieldSerializer(toFieldName(f.getName(),rf.getName()),toColumnName(f.getName(),rf.getName()),f.isArray(),rf.getType().getRawType()));
break;
}
}
break;
}
}
StringBuilder sbForSelect=new StringBuilder();
StringBuilder sbForWhere=new StringBuilder();
ArrayList<DatabaseColumn> listKeyColumns=new ArrayList<DatabaseColumn>();
String sql=""String_Node_Str"";
for (DatabaseColumn column : listUserColumns) {
sbForSelect.append(column.columnName);
sbForSelect.append(',');
sbForWhere.append(""String_Node_Str"");
if (column.key) {
listKeyColumns.add(column);
sql+=column.columnName + ""String_Node_Str"";
}
}
ArrayList<DatabaseColumn> listSystemColumns=new ArrayList<DatabaseColumn>();
DatabaseColumn col=new DatabaseColumn(""String_Node_Str"",""String_Node_Str"",false,false,false,RawTypes.Timestamp,0,0,0);
listSystemColumns.add(col);
fieldSerializer.add(new SystemTypeFieldSerializer(""String_Node_Str"",""String_Node_Str"",false,RawTypes.Timestamp));
this.entitySerializer=new EntityFieldSerializer(fieldSerializer);
this.keyColumns=listKeyColumns.toArray(new DatabaseColumn[0]);
this.wherekeys=sql.substring(0,sql.length() - 4);
this.userColumns=listUserColumns.toArray(new DatabaseColumn[0]);
this.systemColumns=listSystemColumns.toArray(new DatabaseColumn[0]);
this.fieldlist_comma=sbForSelect.substring(0,sbForSelect.length() - 1);
this.fieldlist_questions=sbForWhere.substring(0,sbForWhere.length() - 1);
}
 catch (Exception e) {
throw new RuntimeException(e);
}
}",0.986046511627907
184343,"@Override public void add(Entity v){
  if (v instanceof EditableEntity) {
    EditableEntity vv=(EditableEntity)v;
    this.markChanged(vv);
  }
}","@Override public void add(Entity v){
}",0.4130434782608695
184344,"@Override public void reload(Class<Entity> clz,String name){
  DataHolder<DataStore<Entity>> store=this.stores.get(name);
  if (store != null) {
    DataStore<Entity> oldData=store.get();
    oldData.unload();
    Type type=loader.findType(name);
    DataStore<Entity> newData=new EntityDbDataStore(this,type,dbConfig.getPersister(type));
    store.set(newData,oldData);
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}","@Override public void reload(Class<Entity> clz,String name){
  DataHolder<DataStore<Entity>> holder=this.stores.get(name);
  if (holder != null) {
    DataStore<Entity> oldData=holder.get();
    oldData.unload();
    Type type=loader.findType(name);
    DataStore<Entity> newData=new EntityDbDataStore(this,type,dbConfig.getPersister(type));
    holder.set(newData,oldData);
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}",0.9515418502202644
184345,"public final void test_SimpleTypeWith_EntityArray_readJsonParserString() throws Exception {
  String txtType=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  type=loader.testDefineNebula(new StringReader(txtType)).get(0);
  entityMerger=new EntitySerializer(type);
  String txtData=""String_Node_Str"";
  StringReader in=new StringReader(txtData);
  JsonParser jsonParser=factory.createJsonParser(in);
  Entity entity=entityMerger.readFrom(new EditableEntity(),jsonParser);
  assertNotNull(entity);
  assertEquals(""String_Node_Str"",entity.get(""String_Node_Str""));
  assertEquals(12L,entity.get(""String_Node_Str""));
  @SuppressWarnings(""String_Node_Str"") List<Entity> educations=(List<Entity>)entity.get(""String_Node_Str"");
  assertEquals(2,educations.size());
}","public final void test_SimpleTypeWith_EntityArray_readJsonParserString() throws Exception {
  String txtType=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  type=loader.testDefineNebula(new StringReader(txtType)).get(0);
  entityMerger=new EntitySerializer(type);
  String txtData=""String_Node_Str"";
  StringReader in=new StringReader(txtData);
  JsonParser jsonParser=factory.createJsonParser(in);
  Entity entity=entityMerger.readFrom(null,jsonParser);
  assertNotNull(entity);
  assertEquals(""String_Node_Str"",entity.get(""String_Node_Str""));
  assertEquals(12L,entity.get(""String_Node_Str""));
  @SuppressWarnings(""String_Node_Str"") List<Entity> educations=(List<Entity>)entity.get(""String_Node_Str"");
  assertEquals(2,educations.size());
}",0.9874572405929304
184346,"@Override protected void get(Address address){
  Query query=address.getQuery();
  List<Type> dataList;
  if (query.isEmpty()) {
    dataList=types;
  }
 else {
    Filter<Type> filter=filterBuilder.buildFrom(query,null);
    dataList=types.query(filter);
  }
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  PrintStream out=new PrintStream(bout);
  boolean start=true;
  out.append('[');
  for (  Type data : dataList) {
    if (!start) {
      out.append(',');
    }
 else {
      start=false;
    }
    json.stringifyTo(data,new OutputStreamWriter(out));
  }
  out.append(']');
  out.flush();
  out.close();
  this.lastModified=System.currentTimeMillis();
  this.cache=bout.toByteArray();
}","@Override protected void get(Address address){
  Query query=address.getQuery();
  List<Type> dataList;
  if (query.isEmpty()) {
    dataList=typeLoader.all();
  }
 else {
    Filter<Type> filter=filterBuilder.buildFrom(query,null);
    dataList=typeLoader.all().query(filter);
  }
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  PrintStream out=new PrintStream(bout);
  boolean start=true;
  out.append('[');
  for (  Type data : dataList) {
    if (!start) {
      out.append(',');
    }
 else {
      start=false;
    }
    json.stringifyTo(data,new OutputStreamWriter(out));
  }
  out.append(']');
  out.flush();
  out.close();
  this.lastModified=System.currentTimeMillis();
  this.cache=bout.toByteArray();
}",0.9818181818181818
184347,"public TypeListResouce(TypeLoader typeLoader,JsonHelper<Type> json,TypeFilterBuilder filterBuilder){
  this.types=typeLoader.all();
  this.typeLoader=typeLoader;
  this.json=json;
  this.filterBuilder=filterBuilder;
}","public TypeListResouce(TypeLoader typeLoader,JsonHelper<Type> json,TypeFilterBuilder filterBuilder){
  this.typeLoader=typeLoader;
  this.json=json;
  this.filterBuilder=filterBuilder;
}",0.9230769230769232
184348,"protected void make(){
  try {
    ByteArrayOutputStream bout=new ByteArrayOutputStream();
    Writer w=new OutputStreamWriter(bout);
    Map<String,String> data=datas.get(key);
    json.stringifyTo(data,bout);
    w.flush();
    w.close();
    this.lastModified=System.currentTimeMillis();
    this.buffer=bout.toByteArray();
  }
 catch (  IOException e) {
    log.error(e);
    throw new RuntimeException(e);
  }
}","protected void make(){
  try {
    ByteArrayOutputStream bout=new ByteArrayOutputStream();
    Writer w=new OutputStreamWriter(bout);
    Map<String,String> data=datas.get(key);
    if (data != null) {
      json.stringifyTo(data,bout);
      w.flush();
      w.close();
      this.lastModified=System.currentTimeMillis();
      this.buffer=bout.toByteArray();
    }
 else {
      this.lastModified=System.currentTimeMillis();
      this.buffer=new byte[0];
    }
  }
 catch (  IOException e) {
    log.error(e);
    throw new RuntimeException(e);
  }
}",0.804953560371517
184349,"@Override public void handle(Request req,Response resp){
  try {
    if (""String_Node_Str"".equals(req.getMethod())) {
      resp.set(""String_Node_Str"",""String_Node_Str"");
      resp.set(""String_Node_Str"",""String_Node_Str"");
      resp.set(""String_Node_Str"",mime);
      resp.setDate(""String_Node_Str"",System.currentTimeMillis());
      resp.setDate(""String_Node_Str"",this.underlySource.getLastModified());
      resp.set(""String_Node_Str"",""String_Node_Str"" + (this.underlySource.getLastModified() + System.currentTimeMillis()) + ""String_Node_Str"");
      log.debug(""String_Node_Str"" + underlySource.getName() + ""String_Node_Str""+ req.getPath()+ ""String_Node_Str"");
      InputStream in=underlySource.getInputStream();
      OutputStream out=resp.getOutputStream();
      resp.setContentLength((int)underlySource.getLength());
      byte[] buffer=new byte[1024];
      int length=-1;
      while ((length=in.read(buffer)) > 0) {
        out.write(buffer,0,length);
      }
      in.close();
      out.close();
    }
 else     if (""String_Node_Str"".equals(req.getMethod())) {
      BufferedInputStream bio=new BufferedInputStream(req.getInputStream());
      if (log.isTraceEnabled()) {
        log.trace(""String_Node_Str"");
        log.trace(FileUtil.readAllTextFrom(bio));
      }
      Object realObject=underlySource.getRealObject();
      File file=null;
      if (realObject instanceof File) {
        file=(File)realObject;
      }
 else       if (realObject instanceof URL) {
        URL url=(URL)realObject;
        file=new File(url.getFile());
      }
      file=FileUtil.replace(file,bio);
      resp.set(""String_Node_Str"",""String_Node_Str"");
      resp.set(""String_Node_Str"",""String_Node_Str"");
      resp.set(""String_Node_Str"",mime);
      resp.setDate(""String_Node_Str"",System.currentTimeMillis());
      resp.setDate(""String_Node_Str"",file.lastModified());
      resp.set(""String_Node_Str"",""String_Node_Str"" + (file.lastModified() + System.currentTimeMillis()) + ""String_Node_Str"");
      log.debug(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ req.getPath()+ ""String_Node_Str"");
      InputStream in=new FileInputStream(file);
      OutputStream out=resp.getOutputStream();
      resp.setContentLength((int)file.length());
      byte[] buffer=new byte[1024];
      int length=-1;
      while ((length=in.read(buffer)) > 0) {
        out.write(buffer,0,length);
      }
      in.close();
      out.close();
    }
  }
 catch (  IOException e) {
    log.error(e);
    throw new RuntimeException(e);
  }
}","@Override public void handle(Request req,Response resp){
  try {
    if (""String_Node_Str"".equals(req.getMethod())) {
      this.make();
      resp.set(""String_Node_Str"",""String_Node_Str"");
      resp.set(""String_Node_Str"",""String_Node_Str"");
      resp.set(""String_Node_Str"",mime);
      resp.setContentLength(this.buffer.length);
      resp.setDate(""String_Node_Str"",System.currentTimeMillis());
      resp.setDate(""String_Node_Str"",this.lastModified);
      resp.getOutputStream().write(buffer);
      resp.getOutputStream().flush();
      resp.close();
      log.debug(""String_Node_Str"" + req.getPath() + ""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(req.getMethod())) {
      BufferedInputStream bio=new BufferedInputStream(req.getInputStream());
      if (log.isTraceEnabled()) {
        log.trace(""String_Node_Str"");
        log.trace(FileUtil.readAllTextFrom(bio));
      }
      Object realObject=underlySource.getRealObject();
      File file=null;
      if (realObject instanceof File) {
        file=(File)realObject;
      }
 else       if (realObject instanceof URL) {
        URL url=(URL)realObject;
        file=new File(url.getFile());
      }
      file=FileUtil.replace(file,bio);
      this.make();
      resp.set(""String_Node_Str"",""String_Node_Str"");
      resp.set(""String_Node_Str"",""String_Node_Str"");
      resp.set(""String_Node_Str"",mime);
      resp.setContentLength(this.buffer.length);
      resp.setDate(""String_Node_Str"",System.currentTimeMillis());
      resp.setDate(""String_Node_Str"",this.lastModified);
      resp.getOutputStream().write(buffer);
      resp.getOutputStream().flush();
      resp.close();
      log.debug(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ req.getPath()+ ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    log.error(e);
    throw new RuntimeException(e);
  }
}",0.6350581262821974
184350,"@Override public Resource resolve(Address target){
  Path path=target.getPath();
  Source source=loader.findSource(path.getPath());
  if (source != null) {
    return new StaticResource(source,TheMimeTypes.get(source));
  }
  String[] segments=target.getPath().getSegments();
  String templateTypeName=segments[0];
  if (segments.length != 2) {
    throw new RuntimeException(segments.toString());
  }
  String[] names=path.getName().split(""String_Node_Str"");
  String typeName=names[0];
  String actionName=names[1];
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + path);
    log.trace(""String_Node_Str"" + templateTypeName);
    log.trace(""String_Node_Str"" + typeName);
    log.trace(""String_Node_Str"" + actionName);
  }
  return new TemplateResouce(cfg,typeLoader,templateTypeName,typeName,actionName);
}","@Override public Resource resolve(Address target){
  Path path=target.getPath();
  Source source=loader.findSource(path.getPath());
  if (source != null) {
    return new EditableStaticResource(source,TheMimeTypes.get(source));
  }
  String[] segments=target.getPath().getSegments();
  String templateTypeName=segments[0];
  if (segments.length != 2) {
    throw new RuntimeException(segments.toString());
  }
  String[] names=path.getName().split(""String_Node_Str"");
  String typeName=names[0];
  String actionName=names[1];
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + path);
    log.trace(""String_Node_Str"" + templateTypeName);
    log.trace(""String_Node_Str"" + typeName);
    log.trace(""String_Node_Str"" + actionName);
  }
  return new TemplateResouce(cfg,typeLoader,templateTypeName,typeName,actionName);
}",0.9951573849878934
184351,"@Override public void configure(BasicResourceContainer site){
  site.register(""String_Node_Str"",staticEngine);
  site.register(""String_Node_Str"",templateResouceEngine);
  site.register(""String_Node_Str"",typeResouceEngine);
  site.register(""String_Node_Str"",staticEngine);
  site.register(""String_Node_Str"",dataResouceEngine);
  site.register(""String_Node_Str"",typeResouceEngine);
  site.register(""String_Node_Str"",typeResouceEngine);
}","@Override public void configure(BasicResourceContainer site){
  site.register(""String_Node_Str"",staticEngine);
  site.register(""String_Node_Str"",templateResouceEngine);
  site.register(""String_Node_Str"",templateResouceEngine);
  site.register(""String_Node_Str"",typeResouceEngine);
  site.register(""String_Node_Str"",staticEngine);
  site.register(""String_Node_Str"",dataResouceEngine);
  site.register(""String_Node_Str"",typeResouceEngine);
  site.register(""String_Node_Str"",typeResouceEngine);
}",0.9375
184352,"@Override public Object[] bind(Context context,Method method){
  System.out.println(""String_Node_Str"" + method.getName());
  if (""String_Node_Str"".equals(method.getName()) || ""String_Node_Str"".equals(method.getName())) {
    Company company=new Company();
    if (context.getId() != null)     company.setId(Integer.parseInt(context.getId()));
    company.setName((String)context.getParameter(""String_Node_Str""));
    company.setTel((String)context.getParameter(""String_Node_Str""));
    company.setAddress((String)context.getParameter(""String_Node_Str""));
    company.setDescription((String)context.getParameter(""String_Node_Str""));
    return new Object[]{company};
  }
 else   if (""String_Node_Str"".equals(method.getName())) {
    return new Object[]{Long.parseLong((String)context.getParameter(""String_Node_Str""))};
  }
 else   if (""String_Node_Str"".equals(method.getName())) {
    String id=context.getId();
    return new Object[]{id};
  }
 else   if (""String_Node_Str"".equals(method.getName())) {
    return new Object[]{Integer.valueOf(((String)context.getParameter(""String_Node_Str"")))};
  }
  return null;
}","@Override public Object[] bind(Context context,Method method){
  System.out.println(""String_Node_Str"" + method.getName());
  if (""String_Node_Str"".equals(method.getName()) || ""String_Node_Str"".equals(method.getName())) {
    Company company=new Company();
    if (!""String_Node_Str"".equals(method.getName()) && context.getId() != null)     company.setId(Integer.parseInt(context.getId()));
    company.setName((String)context.getParameter(""String_Node_Str""));
    company.setTel((String)context.getParameter(""String_Node_Str""));
    company.setAddress((String)context.getParameter(""String_Node_Str""));
    company.setDescription((String)context.getParameter(""String_Node_Str""));
    return new Object[]{company};
  }
 else   if (""String_Node_Str"".equals(method.getName())) {
    return new Object[]{Long.parseLong((String)context.getParameter(""String_Node_Str""))};
  }
 else   if (""String_Node_Str"".equals(method.getName())) {
    String id=context.getId();
    return new Object[]{id};
  }
 else   if (""String_Node_Str"".equals(method.getName())) {
    return new Object[]{Integer.valueOf(((String)context.getParameter(""String_Node_Str"")))};
  }
  return null;
}",0.979358805445762
184353,"public static DataBinder<Company> createDataBinder(){
  return new DataBinder<Company>(){
    @Override public Object[] bind(    Context context,    Method method){
      System.out.println(""String_Node_Str"" + method.getName());
      if (""String_Node_Str"".equals(method.getName()) || ""String_Node_Str"".equals(method.getName())) {
        Company company=new Company();
        if (context.getId() != null)         company.setId(Integer.parseInt(context.getId()));
        company.setName((String)context.getParameter(""String_Node_Str""));
        company.setTel((String)context.getParameter(""String_Node_Str""));
        company.setAddress((String)context.getParameter(""String_Node_Str""));
        company.setDescription((String)context.getParameter(""String_Node_Str""));
        return new Object[]{company};
      }
 else       if (""String_Node_Str"".equals(method.getName())) {
        return new Object[]{Long.parseLong((String)context.getParameter(""String_Node_Str""))};
      }
 else       if (""String_Node_Str"".equals(method.getName())) {
        String id=context.getId();
        return new Object[]{id};
      }
 else       if (""String_Node_Str"".equals(method.getName())) {
        return new Object[]{Integer.valueOf(((String)context.getParameter(""String_Node_Str"")))};
      }
      return null;
    }
  }
;
}","public static DataBinder<Company> createDataBinder(){
  return new DataBinder<Company>(){
    @Override public Object[] bind(    Context context,    Method method){
      System.out.println(""String_Node_Str"" + method.getName());
      if (""String_Node_Str"".equals(method.getName()) || ""String_Node_Str"".equals(method.getName())) {
        Company company=new Company();
        if (!""String_Node_Str"".equals(method.getName()) && context.getId() != null)         company.setId(Integer.parseInt(context.getId()));
        company.setName((String)context.getParameter(""String_Node_Str""));
        company.setTel((String)context.getParameter(""String_Node_Str""));
        company.setAddress((String)context.getParameter(""String_Node_Str""));
        company.setDescription((String)context.getParameter(""String_Node_Str""));
        return new Object[]{company};
      }
 else       if (""String_Node_Str"".equals(method.getName())) {
        return new Object[]{Long.parseLong((String)context.getParameter(""String_Node_Str""))};
      }
 else       if (""String_Node_Str"".equals(method.getName())) {
        String id=context.getId();
        return new Object[]{id};
      }
 else       if (""String_Node_Str"".equals(method.getName())) {
        return new Object[]{Integer.valueOf(((String)context.getParameter(""String_Node_Str"")))};
      }
      return null;
    }
  }
;
}",0.9824692279000372
184354,"@Override public void stop(){
  super.stop();
  removeLocationListener();
  getContext().unregisterReceiver(locationReceiver);
}","@Override public void stop(){
  super.stop();
  stpe.shutdown();
  removeLocationListener();
  getContext().unregisterReceiver(locationReceiver);
}",0.9309090909090908
184355,"@Override public void start(){
  super.start();
  addLocationListenerWithAllProviders();
  Thread thread=new Thread(controller);
  thread.start();
  IntentFilter intentFilter=new IntentFilter(LOCATION_UPDATE_ACTION);
  getContext().registerReceiver(locationReceiver,intentFilter);
  Log.d(TAG,""String_Node_Str"");
}","@Override public void start(){
  super.start();
  addLocationListenerWithAllProviders();
  stpe=new ScheduledThreadPoolExecutor(1);
  stpe.scheduleAtFixedRate(controller,MAX_TIME_WITHOUT_NEW_LOCATION,MAX_TIME_WITHOUT_NEW_LOCATION,TimeUnit.MILLISECONDS);
  IntentFilter intentFilter=new IntentFilter(LOCATION_UPDATE_ACTION);
  getContext().registerReceiver(locationReceiver,intentFilter);
  Log.d(TAG,""String_Node_Str"");
}",0.7319727891156462
184356,"public void run(){
  long timeElapsed;
  while (isSensing()) {
    Log.d(TAG,""String_Node_Str"" + MAX_TIME_WITHOUT_NEW_LOCATION);
    try {
      Thread.sleep(MAX_TIME_WITHOUT_NEW_LOCATION);
    }
 catch (    Exception e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
    timeElapsed=System.currentTimeMillis() - lastLocationTime;
    if (timeElapsed > MAX_TIME_WITHOUT_NEW_LOCATION && locationAdded) {
      removeLocationListener();
      Log.d(TAG,""String_Node_Str"" + !locationAdded);
    }
    Log.d(TAG,""String_Node_Str"" + timeElapsed + ""String_Node_Str""+ MAX_TIME_WITHOUT_NEW_LOCATION);
    if (timeElapsed > (MAX_TIME_WITHOUT_NEW_LOCATION + RESTART_TIME) && !locationAdded) {
      addLocationListenerWithAllProviders();
      Log.d(TAG,""String_Node_Str"" + locationAdded);
    }
  }
  Log.d(TAG,""String_Node_Str"");
}","public void run(){
  long timeElapsed=System.currentTimeMillis() - lastLocationTime;
  Log.d(TAG,""String_Node_Str"" + timeElapsed + ""String_Node_Str""+ MAX_TIME_WITHOUT_NEW_LOCATION);
  if (timeElapsed > MAX_TIME_WITHOUT_NEW_LOCATION && locationAdded) {
    removeLocationListener();
    Log.d(TAG,""String_Node_Str"" + !locationAdded);
  }
 else   if (timeElapsed > (MAX_TIME_WITHOUT_NEW_LOCATION + RESTART_TIME) && !locationAdded) {
    addLocationListenerWithAllProviders();
    Log.d(TAG,""String_Node_Str"" + locationAdded);
  }
  Log.d(TAG,""String_Node_Str"");
}",0.3991323210412147
184357,"/** 
 * @see android.app.Application#onCreate()
 */
@Override public final void onCreate(){
  super.onCreate();
  ProjectGenerator.buildProjectJsonQ(this);
  Log.i(getClass().getName(),""String_Node_Str"");
  taskCollection=new HashMap<String,DataTask>();
}","/** 
 * @see android.app.Application#onCreate()
 */
@Override public final void onCreate(){
  super.onCreate();
  ProjectGenerator.buildProjectJsonS(this);
  Log.i(getClass().getName(),""String_Node_Str"");
  taskCollection=new HashMap<String,DataTask>();
}",0.996078431372549
184358,"/** 
 * Threads & Runnable 
 */
public void run(){
  Looper.prepare();
  while (isRunning()) {
    try {
      compute();
      if (getPeriodTime() > 1) {
        Thread.sleep(getPeriodTime());
      }
    }
 catch (    Exception e) {
      Log.e(TAG,""String_Node_Str"" + e);
    }
  }
}","/** 
 * Threads & Runnable 
 */
public void run(){
  Looper.prepare();
  while (isRunning()) {
    compute();
    if (getPeriodTime() > 1) {
      try {
        Thread.sleep(getPeriodTime());
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"" + e);
      }
    }
  }
}",0.75
184359,"public static DataTask createDataTask(Task task,Context context){
  DataTask dataTask=null;
switch (task.getTaskType()) {
case AccelerometerSensor:
    long frameTime=task.getLong(AccelerometerSensor.ATT_FRAMETIME,1000);
  long duration=task.getLong(AccelerometerSensor.ATT_DURATION,500);
Sensor sensor=AccelerometerSensor.createAccelerometer(context,frameTime,duration);
if (task.getSampleFrequency() > 0) {
sensor.setSampleFrequency(task.getSampleFrequency());
}
 else if (task.getPeriodTime() > 0) {
sensor.setPeriodTime(task.getPeriodTime());
}
dataTask=new DataSource(sensor);
task.setPeriodTime(1000);
task.setSampleFrequency(-1.0f);
break;
case TimerSensor:
long period=task.getLong(""String_Node_Str"",1000);
TimerSensor ts=new TimerSensor(context,period);
dataTask=new DataSource(ts);
ts.addSourceTask((DataSource)dataTask);
break;
case AudioSensor:
long audioDuration=task.getLong(""String_Node_Str"",-1);
AudioSensor as=new AudioSensor(context,task.getSampleFrequency());
dataTask=new AudioDataSource(as,audioDuration);
as.addSourceTask((AudioDataSource)dataTask);
break;
case BluetoothSensor:
dataTask=new DataSource(new BluetoothSensor(context));
break;
case BluetoothConnectionSensor:
dataTask=new DataSource(new BluetoothConnectionSensor(context,task.getString(""String_Node_Str"",""String_Node_Str"")));
break;
case GpsSensor:
dataTask=new DataSource(new GpsSensor(context));
break;
case GyroscopeSensor:
long frameTime2=task.getLong(AccelerometerSensor.ATT_FRAMETIME,1000);
long duration2=task.getLong(AccelerometerSensor.ATT_DURATION,500);
Sensor sensor2=AccelerometerSensor.createGyroscope(context,frameTime2,duration2);
if (task.getSampleFrequency() > 0) {
sensor2.setSampleFrequency(task.getSampleFrequency());
}
 else if (task.getPeriodTime() > 0) {
sensor2.setPeriodTime(task.getPeriodTime());
}
dataTask=new DataSource(sensor2);
task.setPeriodTime(frameTime2);
task.setSampleFrequency(-1.0f);
break;
case CallSensor:
dataTask=new DataSource(new PhoneCallSensor(context));
break;
case StateSensor:
dataTask=new DataSource(new PhoneStateSensor(context));
break;
case PowerConnectionSensor:
dataTask=new DataSource(new PowerConnectionSensor(context));
break;
case NfcSensor:
dataTask=new DataSource(new NfcSensor(context));
break;
case WifiScanSensor:
dataTask=new DataSource(new WifiScanSensor(context));
break;
case WifiConnectionSensor:
dataTask=new DataSource(new WifiConnectionSensor(context));
break;
case AccelerometerMeanFilter:
dataTask=new AccelerometerMeanFilter();
break;
case DataSink:
dataTask=new DataSink(new JsonSinkWritter(context));
((DataSink)dataTask).setName(task.getName());
break;
case AudioSink:
dataTask=new AudioSink(new RawAudioSinkWritter(context));
((DataSink)dataTask).setName(task.getName());
break;
case ShakeFilter:
dataTask=new ShakeFilter();
break;
case MovementFilter:
double threshold=task.getDouble(""String_Node_Str"",1000);
dataTask=new MovementFilter();
((MovementFilter)dataTask).setMovementThreshold((float)threshold);
break;
case FalseTimerFilter:
long timeLength=task.getLong(""String_Node_Str"",1000);
String attributeName=task.getString(""String_Node_Str"",""String_Node_Str"");
dataTask=new FalseTimerFilter();
((FalseTimerFilter)dataTask).setTimeLength(timeLength);
((FalseTimerFilter)dataTask).setAttributeName(attributeName);
break;
case WifiTimeConnectedFilter:
dataTask=new WifiTimeConnectedFilter();
break;
case SurveyTrigger:
dataTask=new SurveyTrigger(context);
((SurveyTrigger)dataTask).setSurveyName(""String_Node_Str"");
break;
case Trigger:
String matches=task.getString(JsonTrigger.MATCHES,null);
JsonTrigger jsonTrigger=new JsonTrigger();
List<Condition> conditionsList=jsonTrigger.toConditions(task.getJsonNode());
dataTask=new GeneralTrigger(context,conditionsList,matches);
break;
case StopTrigger:
String matches2=task.getString(JsonTrigger.MATCHES,null);
JsonTrigger jsonTrigger2=new JsonTrigger();
List<Condition> conditionsList2=jsonTrigger2.toConditions(task.getJsonNode());
dataTask=new StopTrigger(context,conditionsList2,matches2);
break;
default :
return null;
}
if (task.getSampleFrequency() > 0) {
dataTask.setSampleFrequency(task.getSampleFrequency());
}
 else if (task.getPeriodTime() > 0) {
dataTask.setPeriodTime(task.getPeriodTime());
}
dataTask.setTaskType(task.getTaskType());
dataTask.setName(task.getName());
dataTask.setTriggered(task.isTriggered());
return dataTask;
}","public static DataTask createDataTask(Task task,Context context){
  DataTask dataTask=null;
switch (task.getTaskType()) {
case AccelerometerSensor:
    long frameTime=task.getLong(AccelerometerSensor.ATT_FRAMETIME,1000);
  long duration=task.getLong(AccelerometerSensor.ATT_DURATION,500);
Sensor sensor=AccelerometerSensor.createAccelerometer(context,frameTime,duration);
if (task.getSampleFrequency() > 0) {
sensor.setSampleFrequency(task.getSampleFrequency());
}
 else if (task.getPeriodTime() > 0) {
sensor.setPeriodTime(task.getPeriodTime());
}
dataTask=new DataSource(sensor);
task.setPeriodTime(1000);
task.setSampleFrequency(-1.0f);
break;
case TimerSensor:
long period=task.getLong(""String_Node_Str"",1000);
TimerSensor ts=new TimerSensor(context,period);
dataTask=new DataSource(ts);
ts.addSourceTask((DataSource)dataTask);
break;
case AudioSensor:
long audioDuration=task.getLong(""String_Node_Str"",-1);
AudioSensor as=new AudioSensor(context,task.getSampleFrequency());
dataTask=new AudioDataSource(as,audioDuration);
as.addSourceTask((AudioDataSource)dataTask);
break;
case BluetoothSensor:
dataTask=new DataSource(new BluetoothSensor(context));
break;
case BluetoothConnectionSensor:
dataTask=new DataSource(new BluetoothConnectionSensor(context,task.getString(""String_Node_Str"",""String_Node_Str"")));
break;
case GpsSensor:
dataTask=new DataSource(new GpsSensor(context));
break;
case GyroscopeSensor:
long frameTime2=task.getLong(AccelerometerSensor.ATT_FRAMETIME,1000);
long duration2=task.getLong(AccelerometerSensor.ATT_DURATION,500);
Sensor sensor2=AccelerometerSensor.createGyroscope(context,frameTime2,duration2);
if (task.getSampleFrequency() > 0) {
sensor2.setSampleFrequency(task.getSampleFrequency());
}
 else if (task.getPeriodTime() > 0) {
sensor2.setPeriodTime(task.getPeriodTime());
}
dataTask=new DataSource(sensor2);
task.setPeriodTime(frameTime2);
task.setSampleFrequency(-1.0f);
break;
case CallSensor:
dataTask=new DataSource(new PhoneCallSensor(context));
break;
case StateSensor:
dataTask=new DataSource(new PhoneStateSensor(context));
break;
case PowerConnectionSensor:
dataTask=new DataSource(new PowerConnectionSensor(context));
break;
case NfcSensor:
dataTask=new DataSource(new NfcSensor(context));
break;
case WifiScanSensor:
dataTask=new DataSource(new WifiScanSensor(context));
break;
case WifiConnectionSensor:
dataTask=new DataSource(new WifiConnectionSensor(context));
break;
case AccelerometerMeanFilter:
dataTask=new AccelerometerMeanFilter();
break;
case DataSink:
dataTask=new DataSink(new JsonSinkWritter(context));
((DataSink)dataTask).setName(task.getName());
break;
case AudioSink:
dataTask=new AudioSink(new RawAudioSinkWritter(context));
((DataSink)dataTask).setName(task.getName());
break;
case ShakeFilter:
dataTask=new ShakeFilter();
break;
case MovementFilter:
double threshold=task.getDouble(""String_Node_Str"",1000);
dataTask=new MovementFilter();
((MovementFilter)dataTask).setMovementThreshold((float)threshold);
break;
case FalseTimerFilter:
long timeLength=task.getLong(""String_Node_Str"",1000);
String attributeName=task.getString(""String_Node_Str"",""String_Node_Str"");
dataTask=new FalseTimerFilter();
((FalseTimerFilter)dataTask).setTimeLength(timeLength);
((FalseTimerFilter)dataTask).setAttributeName(attributeName);
break;
case MovementTimeFilter:
long maxNoInput=task.getLong(""String_Node_Str"",30000L);
long maxNoMovement=task.getLong(""String_Node_Str"",5000L);
dataTask=new MovementTimeFilter();
((MovementTimeFilter)dataTask).setMaxNoInput(maxNoInput);
((MovementTimeFilter)dataTask).setMaxNoMovement(maxNoMovement);
break;
case WifiTimeConnectedFilter:
dataTask=new WifiTimeConnectedFilter();
break;
case SurveyTrigger:
dataTask=new SurveyTrigger(context);
((SurveyTrigger)dataTask).setSurveyName(""String_Node_Str"");
break;
case Trigger:
String matches=task.getString(JsonTrigger.MATCHES,null);
JsonTrigger jsonTrigger=new JsonTrigger();
List<Condition> conditionsList=jsonTrigger.toConditions(task.getJsonNode());
dataTask=new GeneralTrigger(context,conditionsList,matches);
break;
case StopTrigger:
String matches2=task.getString(JsonTrigger.MATCHES,null);
JsonTrigger jsonTrigger2=new JsonTrigger();
List<Condition> conditionsList2=jsonTrigger2.toConditions(task.getJsonNode());
dataTask=new StopTrigger(context,conditionsList2,matches2);
break;
default :
return null;
}
if (task.getSampleFrequency() > 0) {
dataTask.setSampleFrequency(task.getSampleFrequency());
}
 else if (task.getPeriodTime() > 0) {
dataTask.setPeriodTime(task.getPeriodTime());
}
dataTask.setTaskType(task.getTaskType());
dataTask.setName(task.getName());
dataTask.setTriggered(task.isTriggered());
return dataTask;
}",0.9664117060192884
184360,"public Data pullData(){
  if (!dataBuffer.isEmpty())   return dataBuffer.remove();
 else   return null;
}","public Data pullData(){
  if (!dataBuffer.isEmpty() && dataBuffer.peek() != null)   return dataBuffer.poll();
 else   return null;
}",0.8438818565400844
184361,"public void pushData(Data data){
  if (dataBuffer != null)   dataBuffer.offer(data);
}","public void pushData(Data data){
  if (dataBuffer != null && data != null)   dataBuffer.offer(data);
}",0.9148936170212766
184362,"public boolean offer(ResultFile resultFile){
  if (maxFiles > 0 && fileQueue.size() >= maxFiles) {
    poll();
  }
  return fileQueue.offer(resultFile);
}","public boolean offer(ResultFile resultFile){
  if (resultFile != null) {
    if (maxFiles > 0 && fileQueue.size() >= maxFiles) {
      poll();
    }
    return fileQueue.offer(resultFile);
  }
 else   return false;
}",0.8324324324324325
184363,"public boolean isEmpty(){
  return fileQueue.isEmpty();
}","public boolean isEmpty(){
  return fileQueue.isEmpty() && fileQueue.peek() != null;
}",0.8028169014084507
184364,"public AccelerometerSensor(Context context,int SensorType){
  super(context);
  String service=Context.SENSOR_SERVICE;
  sm=(SensorManager)context.getSystemService(service);
  accelerometer=sm.getDefaultSensor(sensorType);
  Log.d(TAG,""String_Node_Str"" + accelerometer.getName());
}","public AccelerometerSensor(Context context,int sensorType){
  super(context);
  String service=Context.SENSOR_SERVICE;
  sm=(SensorManager)context.getSystemService(service);
  accelerometer=sm.getDefaultSensor(sensorType);
  Log.d(TAG,""String_Node_Str"" + accelerometer.getName());
}",0.99645390070922
184365,"@Override protected void onDraw(Canvas canvas){
  Drawable drawable=getDrawable();
  int drawableHeight=drawable.getIntrinsicHeight();
  int drawableWidth=drawable.getIntrinsicWidth();
  if (drawableWidth == 0 || drawableHeight == 0) {
    return;
  }
  final int available=getHeight() - getPaddingTop() - getPaddingBottom()- drawableHeight;
  if (mAnimationStartTime != NO_ANIMATION) {
    long time=AnimationUtils.currentAnimationTimeMillis();
    int deltaTime=(int)(time - mAnimationStartTime);
    mPosition=mAnimationStartPosition + ANIMATION_SPEED * (mSwitch ? deltaTime : -deltaTime) / 1000;
    if (mPosition < 0)     mPosition=0;
    if (mPosition > available)     mPosition=available;
    boolean done=(mPosition == (mSwitch ? available : 0));
    if (!done) {
      invalidate();
    }
 else {
      mAnimationStartTime=NO_ANIMATION;
    }
  }
 else {
    mPosition=mSwitch ? available : 0;
  }
  int offsetTop=getPaddingTop() + mPosition;
  int offsetLeft=(getWidth() - drawableWidth - getPaddingLeft()- getPaddingRight()) / 2;
  int saveCount=canvas.getSaveCount();
  canvas.save();
  canvas.translate(offsetLeft,offsetTop);
  drawable.draw(canvas);
  canvas.restoreToCount(saveCount);
}","@Override protected void onDraw(Canvas canvas){
  Drawable drawable=getDrawable();
  int drawableHeight=drawable.getIntrinsicHeight();
  int drawableWidth=drawable.getIntrinsicWidth();
  if (drawableWidth == 0 || drawableHeight == 0) {
    return;
  }
  final int available=getHeight() - getPaddingTop() - getPaddingBottom()- drawableHeight;
  if (mAnimationStartTime != NO_ANIMATION) {
    long time=AnimationUtils.currentAnimationTimeMillis();
    int deltaTime=(int)(time - mAnimationStartTime);
    mPosition=mAnimationStartPosition + ANIMATION_SPEED * (mSwitch ? deltaTime : -deltaTime) / 1000;
    if (mPosition < 0)     mPosition=0;
    if (mPosition > available)     mPosition=available;
    boolean done=(mPosition == (mSwitch ? available : 0));
    if (!done) {
      invalidate();
    }
 else {
      mAnimationStartTime=NO_ANIMATION;
    }
  }
 else   if (!isPressed()) {
    mPosition=mSwitch ? available : 0;
  }
  int offsetTop=getPaddingTop() + mPosition;
  int offsetLeft=(getWidth() - drawableWidth - getPaddingLeft()- getPaddingRight()) / 2;
  int saveCount=canvas.getSaveCount();
  canvas.save();
  canvas.translate(offsetLeft,offsetTop);
  drawable.draw(canvas);
  canvas.restoreToCount(saveCount);
}",0.9917423616845582
184366,"@Override protected void onDraw(Canvas canvas){
  Drawable drawable=getDrawable();
  int drawableHeight=drawable.getIntrinsicHeight();
  int drawableWidth=drawable.getIntrinsicWidth();
  if (drawableWidth == 0 || drawableHeight == 0) {
    return;
  }
  final int available=getHeight() - getPaddingTop() - getPaddingBottom()- drawableHeight;
  if (mAnimationStartTime != NO_ANIMATION) {
    long time=AnimationUtils.currentAnimationTimeMillis();
    int deltaTime=(int)(time - mAnimationStartTime);
    mPosition=mAnimationStartPosition + ANIMATION_SPEED * (mSwitch ? deltaTime : -deltaTime) / 1000;
    if (mPosition < 0)     mPosition=0;
    if (mPosition > available)     mPosition=available;
    boolean done=(mPosition == (mSwitch ? available : 0));
    if (!done) {
      invalidate();
    }
 else {
      mAnimationStartTime=NO_ANIMATION;
    }
  }
 else {
    mPosition=mSwitch ? available : 0;
  }
  int offsetTop=getPaddingTop() + mPosition;
  int offsetLeft=(getWidth() - drawableWidth - getPaddingLeft()- getPaddingRight()) / 2;
  int saveCount=canvas.getSaveCount();
  canvas.save();
  canvas.translate(offsetLeft,offsetTop);
  drawable.draw(canvas);
  canvas.restoreToCount(saveCount);
}","@Override protected void onDraw(Canvas canvas){
  Drawable drawable=getDrawable();
  int drawableHeight=drawable.getIntrinsicHeight();
  int drawableWidth=drawable.getIntrinsicWidth();
  if (drawableWidth == 0 || drawableHeight == 0) {
    return;
  }
  final int available=getHeight() - getPaddingTop() - getPaddingBottom()- drawableHeight;
  if (mAnimationStartTime != NO_ANIMATION) {
    long time=AnimationUtils.currentAnimationTimeMillis();
    int deltaTime=(int)(time - mAnimationStartTime);
    mPosition=mAnimationStartPosition + ANIMATION_SPEED * (mSwitch ? deltaTime : -deltaTime) / 1000;
    if (mPosition < 0)     mPosition=0;
    if (mPosition > available)     mPosition=available;
    boolean done=(mPosition == (mSwitch ? available : 0));
    if (!done) {
      invalidate();
    }
 else {
      mAnimationStartTime=NO_ANIMATION;
    }
  }
 else   if (!isPressed()) {
    mPosition=mSwitch ? available : 0;
  }
  int offsetTop=getPaddingTop() + mPosition;
  int offsetLeft=(getWidth() - drawableWidth - getPaddingLeft()- getPaddingRight()) / 2;
  int saveCount=canvas.getSaveCount();
  canvas.save();
  canvas.translate(offsetLeft,offsetTop);
  drawable.draw(canvas);
  canvas.restoreToCount(saveCount);
}",0.9917423616845582
184367,"public void run(){
  mHeadUpDisplay.restorePreferences();
}","public void run(){
  mHeadUpDisplay.restorePreferences(mParameters);
}",0.9147286821705426
184368,"protected void onRestorePreferencesClicked(){
  if (mPausing)   return;
  Runnable runnable=new Runnable(){
    public void run(){
      mHeadUpDisplay.restorePreferences();
    }
  }
;
  MenuHelper.confirmAction(this,getString(R.string.confirm_restore_title),getString(R.string.confirm_restore_message),runnable);
}","protected void onRestorePreferencesClicked(){
  if (mPausing)   return;
  Runnable runnable=new Runnable(){
    public void run(){
      mHeadUpDisplay.restorePreferences(mParameters);
    }
  }
;
  MenuHelper.confirmAction(this,getString(R.string.confirm_restore_title),getString(R.string.confirm_restore_message),runnable);
}",0.9828926905132191
184369,"public void run(){
  mHeadUpDisplay.restorePreferences();
}","public void run(){
  mHeadUpDisplay.restorePreferences(mParameters);
}",0.9147286821705426
184370,"private void onRestorePreferencesClicked(){
  Runnable runnable=new Runnable(){
    public void run(){
      mHeadUpDisplay.restorePreferences();
    }
  }
;
  MenuHelper.confirmAction(this,getString(R.string.confirm_restore_title),getString(R.string.confirm_restore_message),runnable);
}","private void onRestorePreferencesClicked(){
  Runnable runnable=new Runnable(){
    public void run(){
      mHeadUpDisplay.restorePreferences(mParameters);
    }
  }
;
  MenuHelper.confirmAction(this,getString(R.string.confirm_restore_title),getString(R.string.confirm_restore_message),runnable);
}",0.9812606473594548
184371,"public void restorePreferences(){
  getGLRootView().runInGLThread(new Runnable(){
    public void run(){
      OnSharedPreferenceChangeListener l=mSharedPreferenceChangeListener;
      mSharedPrefs.unregisterOnSharedPreferenceChangeListener(l);
synchronized (mSharedPrefs) {
        Editor editor=mSharedPrefs.edit();
        editor.clear();
        editor.commit();
      }
      CameraSettings.upgradePreferences(mSharedPrefs);
      reloadPreferences();
      if (mListener != null) {
        mListener.onSharedPreferencesChanged();
      }
      mSharedPrefs.registerOnSharedPreferenceChangeListener(l);
    }
  }
);
}","public void restorePreferences(final Parameters param){
  getGLRootView().runInGLThread(new Runnable(){
    public void run(){
      OnSharedPreferenceChangeListener l=mSharedPreferenceChangeListener;
      mSharedPrefs.unregisterOnSharedPreferenceChangeListener(l);
      Context context=getGLRootView().getContext();
synchronized (mSharedPrefs) {
        Editor editor=mSharedPrefs.edit();
        editor.clear();
        editor.commit();
      }
      CameraSettings.upgradePreferences(mSharedPrefs);
      CameraSettings.initialCameraPictureSize(context,param);
      reloadPreferences();
      if (mListener != null) {
        mListener.onSharedPreferencesChanged();
      }
      mSharedPrefs.registerOnSharedPreferenceChangeListener(l);
    }
  }
);
}",0.9014492753623188
184372,"public void run(){
  OnSharedPreferenceChangeListener l=mSharedPreferenceChangeListener;
  mSharedPrefs.unregisterOnSharedPreferenceChangeListener(l);
synchronized (mSharedPrefs) {
    Editor editor=mSharedPrefs.edit();
    editor.clear();
    editor.commit();
  }
  CameraSettings.upgradePreferences(mSharedPrefs);
  reloadPreferences();
  if (mListener != null) {
    mListener.onSharedPreferencesChanged();
  }
  mSharedPrefs.registerOnSharedPreferenceChangeListener(l);
}","public void run(){
  OnSharedPreferenceChangeListener l=mSharedPreferenceChangeListener;
  mSharedPrefs.unregisterOnSharedPreferenceChangeListener(l);
  Context context=getGLRootView().getContext();
synchronized (mSharedPrefs) {
    Editor editor=mSharedPrefs.edit();
    editor.clear();
    editor.commit();
  }
  CameraSettings.upgradePreferences(mSharedPrefs);
  CameraSettings.initialCameraPictureSize(context,param);
  reloadPreferences();
  if (mListener != null) {
    mListener.onSharedPreferencesChanged();
  }
  mSharedPrefs.registerOnSharedPreferenceChangeListener(l);
}",0.8996212121212122
184373,"/** 
 * Called when the OpenGL surface is recreated without destroying the context.
 */
public void onSurfaceChanged(GL10 gl1,int width,int height){
  Log.v(TAG,""String_Node_Str"" + width + ""String_Node_Str""+ height+ ""String_Node_Str""+ gl1.toString());
  GL11 gl=(GL11)gl1;
  mGL=gl;
  gl.glMatrixMode(GL11.GL_PROJECTION);
  gl.glLoadIdentity();
  GLU.gluOrtho2D(gl,0,width,0,height);
  Matrix matrix=mTransformation.getMatrix();
  matrix.reset();
  matrix.preTranslate(0,getHeight());
  matrix.preScale(1,-1);
}","/** 
 * Called when the OpenGL surface is recreated without destroying the context.
 */
public void onSurfaceChanged(GL10 gl1,int width,int height){
  Log.v(TAG,""String_Node_Str"" + width + ""String_Node_Str""+ height+ ""String_Node_Str""+ gl1.toString());
  GL11 gl=(GL11)gl1;
  mGL=gl;
  gl.glViewport(0,0,width,height);
  gl.glMatrixMode(GL11.GL_PROJECTION);
  gl.glLoadIdentity();
  GLU.gluOrtho2D(gl,0,width,0,height);
  Matrix matrix=mTransformation.getMatrix();
  matrix.reset();
  matrix.preTranslate(0,getHeight());
  matrix.preScale(1,-1);
}",0.9668874172185432
184374,"private void initializeZoom(){
  if (!mParameters.isZoomSupported())   return;
  mParameters=mCameraDevice.getParameters();
  mZoomMax=mParameters.getMaxZoom();
  mSmoothZoomSupported=mParameters.isSmoothZoomSupported();
  mGestureDetector=new GestureDetector(this,new ZoomGestureListener());
  mCameraDevice.setZoomCallback(mZoomCallback);
  mHeadUpDisplay.setZoomRatios(getZoomRatios());
  mHeadUpDisplay.setZoomListener(new ZoomController.ZoomListener(){
    public void onZoomChanged(    final int index,    float ratio,    boolean isMoving){
      mHandler.post(new Runnable(){
        public void run(){
          onZoomValueChanged(index);
        }
      }
);
    }
  }
);
}","private void initializeZoom(){
  if (!mParameters.isZoomSupported())   return;
  mParameters=mCameraDevice.getParameters();
  mZoomMax=mParameters.getMaxZoom();
  mSmoothZoomSupported=mParameters.isSmoothZoomSupported();
  mGestureDetector=new GestureDetector(this,new ZoomGestureListener());
  mCameraDevice.setZoomCallback(mZoomCallback);
  mHeadUpDisplay.setZoomRatios(getZoomRatios());
  mHeadUpDisplay.setZoomIndex(mZoomValue);
  mHeadUpDisplay.setZoomListener(new ZoomController.ZoomListener(){
    public void onZoomChanged(    final int index,    float ratio,    boolean isMoving){
      mHandler.post(new Runnable(){
        public void run(){
          onZoomValueChanged(index);
        }
      }
);
    }
  }
);
}",0.9694385216773276
184375,"@Override protected void onResume(){
  super.onResume();
  mGLRootView.onResume();
  mPausing=false;
  mJpegPictureCallbackTime=0;
  mZoomValue=0;
  mImageCapture=new ImageCapture();
  resetExposureCompensation();
  if (!mPreviewing && !mStartPreviewFail) {
    try {
      startPreview();
    }
 catch (    CameraHardwareException e) {
      showCameraErrorAndFinish();
      return;
    }
  }
  if (mSurfaceHolder != null) {
    if (!mFirstTimeInitialized) {
      mHandler.sendEmptyMessage(FIRST_TIME_INIT);
    }
 else {
      initializeSecondTime();
    }
  }
  keepScreenOnAwhile();
}","@Override protected void onResume(){
  super.onResume();
  mGLRootView.onResume();
  mPausing=false;
  mJpegPictureCallbackTime=0;
  mZoomValue=0;
  if (mHeadUpDisplay != null) {
    mHeadUpDisplay.setZoomIndex(mZoomValue);
  }
  mImageCapture=new ImageCapture();
  resetExposureCompensation();
  if (!mPreviewing && !mStartPreviewFail) {
    try {
      startPreview();
    }
 catch (    CameraHardwareException e) {
      showCameraErrorAndFinish();
      return;
    }
  }
  if (mSurfaceHolder != null) {
    if (!mFirstTimeInitialized) {
      mHandler.sendEmptyMessage(FIRST_TIME_INIT);
    }
 else {
      initializeSecondTime();
    }
  }
  keepScreenOnAwhile();
}",0.9357652656621728
184376,"@Override protected boolean bind(GLRootView root,GL11 gl){
  if (mLastWidth != mWidth || mLastHeight != mHeight) {
    if (mDelegate != null)     mDelegate.deleteFromGL(gl);
    mDelegate=new MyTexture(mWidth,mHeight);
    mLastWidth=mWidth;
    mLastHeight=mHeight;
  }
  return mDelegate.bind(root,gl);
}","@Override protected boolean bind(GLRootView root,GL11 gl){
  if (mLastWidth != mWidth || mLastHeight != mHeight) {
    if (mDelegate != null)     mDelegate.deleteFromGL();
    mDelegate=new MyTexture(mWidth,mHeight);
    mLastWidth=mWidth;
    mLastHeight=mHeight;
  }
  return mDelegate.bind(root,gl);
}",0.99672131147541
184377,"public void deleteFromGL(GL11 gl){
  gl.glDeleteTextures(1,new int[]{mId},0);
  mState=STATE_UNLOADED;
}","public void deleteFromGL(){
  if (mState == STATE_LOADED) {
    mGL.glDeleteTextures(1,new int[]{mId},0);
  }
  mState=STATE_UNLOADED;
}",0.7916666666666666
184378,"public void onZoomChanged(int index,float value,boolean isMoving){
  if (mZoomListener != null) {
    mZoomListener.onZoomChanged(index,value,isMoving);
  }
  if (mZoom != value) {
    mZoom=value;
    mTitle=StringTexture.newInstance(sZoomFormat.format(value),mFontSize,Color.WHITE);
    invalidate();
  }
}","public void onZoomChanged(int index,float value,boolean isMoving){
  if (mZoomListener != null) {
    mZoomListener.onZoomChanged(index,value,isMoving);
  }
  if (mZoomIndex != index)   onZoomIndexChanged(index);
}",0.6704980842911877
184379,"public void setZoomIndex(int index){
  if (mZoomController != null) {
    mZoomController.setZoomIndex(index);
  }
  mZoomIndex=index;
}","public void setZoomIndex(int index){
  if (mZoomIndex == index)   return;
  if (mZoomController != null) {
    mZoomController.setZoomIndex(index);
  }
 else {
    onZoomIndexChanged(index);
  }
}",0.8072289156626506
184380,"public void setZoomRatios(float[] ratios){
  mZoomRatios=ratios;
}","public void setZoomRatios(float[] ratios){
  mZoomRatios=ratios;
  requestLayout();
}",0.8741721854304636
184381,"public ZoomIndicator(Context context){
  super(context);
  mFontSize=GLRootView.dpToPixel(context,FONT_SIZE);
  mTitle=StringTexture.newInstance(sZoomFormat.format(mZoom),mFontSize,FONT_COLOR);
}","public ZoomIndicator(Context context){
  super(context);
  mFontSize=GLRootView.dpToPixel(context,FONT_SIZE);
}",0.7254901960784313
184382,"@Override protected void onMeasure(int widthSpec,int heightSpec){
  new MeasureHelper(this).setPreferredContentSize(mTitle.getWidth(),mTitle.getHeight()).measure(widthSpec,heightSpec);
}","@Override protected void onMeasure(int widthSpec,int heightSpec){
  int maxWidth=0;
  int maxHeight=0;
  for (int i=0, n=mZoomRatios.length; i < n; ++i) {
    float value=mZoomRatios[i];
    Texture tex=StringTexture.newInstance(sZoomFormat.format(value),mFontSize,FONT_COLOR);
    if (maxWidth < tex.getWidth())     maxWidth=tex.getWidth();
    if (maxHeight < tex.getHeight())     maxHeight=tex.getHeight();
  }
  new MeasureHelper(this).setPreferredContentSize(maxWidth,maxHeight).measure(widthSpec,heightSpec);
}",0.4501424501424501
184383,"@Override protected Texture getIcon(){
  return mTitle;
}","@Override protected Texture getIcon(){
  if (mDrawIndex != mZoomIndex) {
    mDrawIndex=mZoomIndex;
    if (mTitle != null)     mTitle.deleteFromGL();
    float value=mZoomRatios == null ? 0 : mZoomRatios[mZoomIndex];
    mTitle=StringTexture.newInstance(sZoomFormat.format(value),mFontSize,FONT_COLOR);
  }
  return mTitle;
}",0.2193211488250653
184384,"/** 
 * Called when the OpenGL surface is recreated without destroying the context.
 */
public void onSurfaceChanged(GL10 gl1,int width,int height){
  Log.v(TAG,""String_Node_Str"" + width + ""String_Node_Str""+ height+ ""String_Node_Str""+ gl1.toString());
  GL11 gl=(GL11)gl1;
  mGL=gl;
  gl.glMatrixMode(GL11.GL_PROJECTION);
  gl.glLoadIdentity();
  GLU.gluOrtho2D(gl,0,width,0,height);
  Matrix matrix=mTransformation.getMatrix();
  matrix.reset();
  matrix.preTranslate(0,getHeight());
  matrix.preScale(1,-1);
}","/** 
 * Called when the OpenGL surface is recreated without destroying the context.
 */
public void onSurfaceChanged(GL10 gl1,int width,int height){
  Log.v(TAG,""String_Node_Str"" + width + ""String_Node_Str""+ height+ ""String_Node_Str""+ gl1.toString());
  GL11 gl=(GL11)gl1;
  mGL=gl;
  gl.glViewport(0,0,width,height);
  gl.glMatrixMode(GL11.GL_PROJECTION);
  gl.glLoadIdentity();
  GLU.gluOrtho2D(gl,0,width,0,height);
  Matrix matrix=mTransformation.getMatrix();
  matrix.reset();
  matrix.preTranslate(0,getHeight());
  matrix.preScale(1,-1);
}",0.9668874172185432
184385,"public void onPictureTaken(final byte[] jpegData,final android.hardware.Camera camera){
  if (mPausing) {
    return;
  }
  mJpegPictureCallbackTime=System.currentTimeMillis();
  if (mPostViewPictureCallbackTime != 0) {
    mShutterToPictureDisplayedTime=mPostViewPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mPostViewPictureCallbackTime;
  }
 else {
    mShutterToPictureDisplayedTime=mRawPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mRawPictureCallbackTime;
  }
  Log.v(TAG,""String_Node_Str"" + mPictureDisplayedToJpegCallbackTime + ""String_Node_Str"");
  if (!mIsImageCaptureIntent) {
    long delay=1200 - mPictureDisplayedToJpegCallbackTime;
    if (delay < 0 || mQuickCapture) {
      restartPreview();
    }
 else {
      mHandler.sendEmptyMessageDelayed(RESTART_PREVIEW,delay);
    }
  }
  mImageCapture.storeImage(jpegData,camera,mLocation);
  calculatePicturesRemaining();
}","public void onPictureTaken(final byte[] jpegData,final android.hardware.Camera camera){
  if (mPausing) {
    return;
  }
  mJpegPictureCallbackTime=System.currentTimeMillis();
  if (mPostViewPictureCallbackTime != 0) {
    mShutterToPictureDisplayedTime=mPostViewPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mPostViewPictureCallbackTime;
  }
 else {
    mShutterToPictureDisplayedTime=mRawPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mRawPictureCallbackTime;
  }
  Log.v(TAG,""String_Node_Str"" + mPictureDisplayedToJpegCallbackTime + ""String_Node_Str"");
  if (!mIsImageCaptureIntent) {
    long delay=1200 - mPictureDisplayedToJpegCallbackTime;
    if (delay < 0 || mQuickCapture) {
      restartPreview();
    }
 else {
      mHandler.sendEmptyMessageDelayed(RESTART_PREVIEW,delay);
    }
  }
  mImageCapture.storeImage(jpegData,camera,mLocation);
  calculatePicturesRemaining();
  if (mPicturesRemaining < 1) {
    updateStorageHint(mPicturesRemaining);
  }
}",0.9625059326056004
184386,"public void onSnap(){
  if (mPausing || mStatus == SNAPSHOT_IN_PROGRESS) {
    return;
  }
  mCaptureStartTime=System.currentTimeMillis();
  mPostViewPictureCallbackTime=0;
  if (mPicturesRemaining < 1) {
    updateStorageHint(mPicturesRemaining);
    return;
  }
  mStatus=SNAPSHOT_IN_PROGRESS;
  mImageCapture.initiate();
}","public void onSnap(){
  if (mPausing || mStatus == SNAPSHOT_IN_PROGRESS) {
    return;
  }
  mCaptureStartTime=System.currentTimeMillis();
  mPostViewPictureCallbackTime=0;
  mStatus=SNAPSHOT_IN_PROGRESS;
  mImageCapture.initiate();
}",0.6332737030411449
184387,"public void onPictureTaken(final byte[] jpegData,final android.hardware.Camera camera){
  if (mPausing) {
    return;
  }
  mJpegPictureCallbackTime=System.currentTimeMillis();
  if (mPostViewPictureCallbackTime != 0) {
    mShutterToPictureDisplayedTime=mPostViewPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mPostViewPictureCallbackTime;
  }
 else {
    mShutterToPictureDisplayedTime=mRawPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mRawPictureCallbackTime;
  }
  Log.v(TAG,""String_Node_Str"" + mPictureDisplayedToJpegCallbackTime + ""String_Node_Str"");
  if (!mIsImageCaptureIntent) {
    long delay=1200 - mPictureDisplayedToJpegCallbackTime;
    if (delay < 0 || mQuickCapture) {
      restartPreview();
    }
 else {
      mHandler.sendEmptyMessageDelayed(RESTART_PREVIEW,delay);
    }
  }
  mImageCapture.storeImage(jpegData,camera,mLocation);
  calculatePicturesRemaining();
}","public void onPictureTaken(final byte[] jpegData,final android.hardware.Camera camera){
  if (mPausing) {
    return;
  }
  mJpegPictureCallbackTime=System.currentTimeMillis();
  if (mPostViewPictureCallbackTime != 0) {
    mShutterToPictureDisplayedTime=mPostViewPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mPostViewPictureCallbackTime;
  }
 else {
    mShutterToPictureDisplayedTime=mRawPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mRawPictureCallbackTime;
  }
  Log.v(TAG,""String_Node_Str"" + mPictureDisplayedToJpegCallbackTime + ""String_Node_Str"");
  if (!mIsImageCaptureIntent) {
    long delay=1200 - mPictureDisplayedToJpegCallbackTime;
    if (delay < 0 || mQuickCapture) {
      restartPreview();
    }
 else {
      mHandler.sendEmptyMessageDelayed(RESTART_PREVIEW,delay);
    }
  }
  mImageCapture.storeImage(jpegData,camera,mLocation);
  calculatePicturesRemaining();
  if (mPicturesRemaining < 1) {
    updateStorageHint(mPicturesRemaining);
  }
}",0.9625059326056004
184388,"public void onSnap(){
  if (mPausing || mStatus == SNAPSHOT_IN_PROGRESS) {
    return;
  }
  mCaptureStartTime=System.currentTimeMillis();
  mPostViewPictureCallbackTime=0;
  if (mPicturesRemaining < 1) {
    updateStorageHint(mPicturesRemaining);
    return;
  }
  mStatus=SNAPSHOT_IN_PROGRESS;
  mImageCapture.initiate();
}","public void onSnap(){
  if (mPausing || mStatus == SNAPSHOT_IN_PROGRESS) {
    return;
  }
  mCaptureStartTime=System.currentTimeMillis();
  mPostViewPictureCallbackTime=0;
  mStatus=SNAPSHOT_IN_PROGRESS;
  mImageCapture.initiate();
}",0.6332737030411449
184389,"@Override protected void onDraw(Canvas canvas){
  Drawable drawable=getDrawable();
  if (drawable == null)   return;
  Rect bounds=drawable.getBounds();
  int w=bounds.right - bounds.left;
  int h=bounds.bottom - bounds.top;
  if (w == 0 || h == 0)   return;
  if (mCurrentDegree != mTargetDegree) {
    long time=AnimationUtils.currentAnimationTimeMillis();
    if (time < mAnimationEndTime) {
      int deltaTime=(int)(time - mAnimationStartTime);
      int degree=mStartDegree + ANIMATION_SPEED * (mClockwise ? deltaTime : -deltaTime) / 1000;
      degree=degree >= 0 ? degree % 360 : degree % 360 + 360;
      mCurrentDegree=degree;
      invalidate();
    }
 else {
      mCurrentDegree=mTargetDegree;
    }
  }
  int saveCount=canvas.getSaveCount();
  canvas.rotate(-mCurrentDegree,w / 2,h / 2);
  drawable.draw(canvas);
  canvas.restoreToCount(saveCount);
}","@Override protected void onDraw(Canvas canvas){
  Drawable drawable=getDrawable();
  if (drawable == null)   return;
  Rect bounds=drawable.getBounds();
  int w=bounds.right - bounds.left;
  int h=bounds.bottom - bounds.top;
  if (w == 0 || h == 0)   return;
  if (mCurrentDegree != mTargetDegree) {
    long time=AnimationUtils.currentAnimationTimeMillis();
    if (time < mAnimationEndTime) {
      int deltaTime=(int)(time - mAnimationStartTime);
      int degree=mStartDegree + ANIMATION_SPEED * (mClockwise ? deltaTime : -deltaTime) / 1000;
      degree=degree >= 0 ? degree % 360 : degree % 360 + 360;
      mCurrentDegree=degree;
      invalidate();
    }
 else {
      mCurrentDegree=mTargetDegree;
    }
  }
  int saveCount=canvas.getSaveCount();
  canvas.translate(getPaddingLeft(),getPaddingTop());
  canvas.rotate(-mCurrentDegree,w / 2,h / 2);
  drawable.draw(canvas);
  canvas.restoreToCount(saveCount);
}",0.9696969696969696
184390,"private void updateThumb(Bitmap original){
  if (original == null) {
    mThumb=null;
    mThumbs=null;
    return;
  }
  final int PADDING_WIDTH=2;
  final int PADDING_HEIGHT=2;
  LayoutParams param=mButton.getLayoutParams();
  final int miniThumbWidth=param.width - 2 * PADDING_WIDTH;
  final int miniThumbHeight=param.height - 2 * PADDING_HEIGHT;
  mThumb=ThumbnailUtil.extractMiniThumb(original,miniThumbWidth,miniThumbHeight,ThumbnailUtil.NO_RECYCLE_INPUT);
  Drawable drawable;
  if (mThumbs == null) {
    mThumbs=new Drawable[2];
    mThumbs[1]=new BitmapDrawable(mResources,mThumb);
    drawable=mThumbs[1];
    mShouldAnimateThumb=false;
  }
 else {
    mThumbs[0]=mThumbs[1];
    mThumbs[1]=new BitmapDrawable(mResources,mThumb);
    mThumbTransition=new TransitionDrawable(mThumbs);
    drawable=mThumbTransition;
    mShouldAnimateThumb=true;
  }
  mButton.setImageDrawable(drawable);
}","private void updateThumb(Bitmap original){
  if (original == null) {
    mThumb=null;
    mThumbs=null;
    return;
  }
  LayoutParams param=mButton.getLayoutParams();
  final int miniThumbWidth=param.width - mButton.getPaddingLeft() - mButton.getPaddingRight();
  final int miniThumbHeight=param.height - mButton.getPaddingTop() - mButton.getPaddingBottom();
  mThumb=ThumbnailUtil.extractMiniThumb(original,miniThumbWidth,miniThumbHeight,ThumbnailUtil.NO_RECYCLE_INPUT);
  Drawable drawable;
  if (mThumbs == null) {
    mThumbs=new Drawable[2];
    mThumbs[1]=new BitmapDrawable(mResources,mThumb);
    drawable=mThumbs[1];
    mShouldAnimateThumb=false;
  }
 else {
    mThumbs[0]=mThumbs[1];
    mThumbs[1]=new BitmapDrawable(mResources,mThumb);
    mThumbTransition=new TransitionDrawable(mThumbs);
    drawable=mThumbTransition;
    mShouldAnimateThumb=true;
  }
  mButton.setImageDrawable(drawable);
}",0.7632743362831859
184391,"private static boolean onDetailsClicked(MenuInvoker onInvoke,final Handler handler,final Activity activity){
  onInvoke.run(new MenuCallback(){
    public void run(    Uri u,    IImage image){
      if (image == null) {
        return;
      }
      final AlertDialog.Builder builder=new AlertDialog.Builder(activity);
      final View d=View.inflate(activity,R.layout.detailsview,null);
      ImageView imageView=(ImageView)d.findViewById(R.id.details_thumbnail_image);
      imageView.setImageBitmap(image.miniThumbBitmap());
      TextView textView=(TextView)d.findViewById(R.id.details_image_title);
      textView.setText(image.getTitle());
      long length=getImageFileSize(image);
      String lengthString=length < 0 ? EMPTY_STRING : Formatter.formatFileSize(activity,length);
      ((TextView)d.findViewById(R.id.details_file_size_value)).setText(lengthString);
      int dimensionWidth=0;
      int dimensionHeight=0;
      if (ImageManager.isImage(image)) {
        dimensionWidth=image.getWidth();
        dimensionHeight=image.getHeight();
        d.findViewById(R.id.details_duration_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_format_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_codec_row).setVisibility(View.GONE);
      }
 else {
        MediaMetadataRetriever retriever=new MediaMetadataRetriever();
        try {
          retriever.setMode(MediaMetadataRetriever.MODE_GET_METADATA_ONLY);
          retriever.setDataSource(image.getDataPath());
          try {
            dimensionWidth=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH));
            dimensionHeight=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT));
          }
 catch (          NumberFormatException e) {
            dimensionWidth=0;
            dimensionHeight=0;
          }
          try {
            int durationMs=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
            String durationValue=formatDuration(activity,durationMs);
            ((TextView)d.findViewById(R.id.details_duration_value)).setText(durationValue);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            String frameRate=String.format(activity.getString(R.string.details_fps),Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_FRAME_RATE)));
            ((TextView)d.findViewById(R.id.details_frame_rate_value)).setText(frameRate);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            long bitRate=Long.parseLong(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_BIT_RATE));
            String bps;
            if (bitRate < 1000000) {
              bps=String.format(activity.getString(R.string.details_kbps),bitRate / 1000);
            }
 else {
              bps=String.format(activity.getString(R.string.details_mbps),(bitRate) / 1000000.0);
            }
            ((TextView)d.findViewById(R.id.details_bit_rate_value)).setText(bps);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
          }
          String format=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_FORMAT);
          ((TextView)d.findViewById(R.id.details_format_value)).setText(format);
          String codec=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_CODEC);
          if (codec != null) {
            setDetailsValue(d,codec,R.id.details_codec_value);
          }
 else {
            hideDetailsRow(d,R.id.details_codec_row);
          }
        }
 catch (        RuntimeException ex) {
        }
 finally {
          try {
            retriever.release();
          }
 catch (          RuntimeException ex) {
          }
        }
      }
      String value=null;
      if (dimensionWidth > 0 && dimensionHeight > 0) {
        value=String.format(activity.getString(R.string.details_dimension_x),dimensionWidth,dimensionHeight);
      }
      if (value != null) {
        setDetailsValue(d,value,R.id.details_resolution_value);
      }
 else {
        hideDetailsRow(d,R.id.details_resolution_row);
      }
      value=EMPTY_STRING;
      long dateTaken=image.getDateTaken();
      if (dateTaken != 0) {
        Date date=new Date(image.getDateTaken());
        SimpleDateFormat dateFormat=new SimpleDateFormat();
        value=dateFormat.format(date);
      }
      if (value != EMPTY_STRING) {
        setDetailsValue(d,value,R.id.details_date_taken_value);
      }
 else {
        hideDetailsRow(d,R.id.details_date_taken_row);
      }
      if (JPEG_MIME_TYPE.equals(image.getMimeType())) {
        showExifInformation(image,d,activity);
      }
 else {
        hideExifInformation(d);
      }
      builder.setNeutralButton(R.string.details_ok,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          dialog.dismiss();
        }
      }
);
      handler.post(new Runnable(){
        public void run(){
          builder.setIcon(android.R.drawable.ic_dialog_info).setTitle(R.string.details_panel_title).setView(d).show();
        }
      }
);
    }
  }
);
  return true;
}","private static boolean onDetailsClicked(MenuInvoker onInvoke,final Handler handler,final Activity activity){
  onInvoke.run(new MenuCallback(){
    public void run(    Uri u,    IImage image){
      if (image == null) {
        return;
      }
      final AlertDialog.Builder builder=new AlertDialog.Builder(activity);
      final View d=View.inflate(activity,R.layout.detailsview,null);
      ImageView imageView=(ImageView)d.findViewById(R.id.details_thumbnail_image);
      imageView.setImageBitmap(image.miniThumbBitmap());
      TextView textView=(TextView)d.findViewById(R.id.details_image_title);
      textView.setText(image.getTitle());
      long length=getImageFileSize(image);
      String lengthString=length < 0 ? EMPTY_STRING : Formatter.formatFileSize(activity,length);
      ((TextView)d.findViewById(R.id.details_file_size_value)).setText(lengthString);
      int dimensionWidth=0;
      int dimensionHeight=0;
      if (ImageManager.isImage(image)) {
        dimensionWidth=image.getWidth();
        dimensionHeight=image.getHeight();
        d.findViewById(R.id.details_duration_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_format_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_codec_row).setVisibility(View.GONE);
      }
 else {
        MediaMetadataRetriever retriever=new MediaMetadataRetriever();
        try {
          retriever.setMode(MediaMetadataRetriever.MODE_GET_METADATA_ONLY);
          retriever.setDataSource(image.getDataPath());
          try {
            dimensionWidth=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH));
            dimensionHeight=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT));
          }
 catch (          NumberFormatException e) {
            dimensionWidth=0;
            dimensionHeight=0;
          }
          try {
            int durationMs=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
            String durationValue=formatDuration(activity,durationMs);
            ((TextView)d.findViewById(R.id.details_duration_value)).setText(durationValue);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            String frameRate=String.format(activity.getString(R.string.details_fps),Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_FRAME_RATE)));
            ((TextView)d.findViewById(R.id.details_frame_rate_value)).setText(frameRate);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            long bitRate=Long.parseLong(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_BIT_RATE));
            String bps;
            if (bitRate < 1000000) {
              bps=String.format(activity.getString(R.string.details_kbps),bitRate / 1000);
            }
 else {
              bps=String.format(activity.getString(R.string.details_mbps),(bitRate) / 1000000.0);
            }
            ((TextView)d.findViewById(R.id.details_bit_rate_value)).setText(bps);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
          }
          String format=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_FORMAT);
          ((TextView)d.findViewById(R.id.details_format_value)).setText(format);
          String codec=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_CODEC);
          if (codec != null) {
            setDetailsValue(d,codec,R.id.details_codec_value);
          }
 else {
            hideDetailsRow(d,R.id.details_codec_row);
          }
        }
 catch (        RuntimeException ex) {
        }
 finally {
          try {
            retriever.release();
          }
 catch (          RuntimeException ex) {
          }
        }
      }
      String value=null;
      if (dimensionWidth > 0 && dimensionHeight > 0) {
        value=String.format(activity.getString(R.string.details_dimension_x),dimensionWidth,dimensionHeight);
      }
      if (value != null) {
        setDetailsValue(d,value,R.id.details_resolution_value);
      }
 else {
        hideDetailsRow(d,R.id.details_resolution_row);
      }
      value=EMPTY_STRING;
      long dateTaken=image.getDateTaken();
      if (dateTaken != 0) {
        Date date=new Date(image.getDateTaken());
        DateFormat dateFormat=android.text.format.DateFormat.getDateFormat(activity);
        DateFormat timeFormat=android.text.format.DateFormat.getTimeFormat(activity);
        value=dateFormat.format(date) + ' ' + timeFormat.format(date);
      }
      if (value != EMPTY_STRING) {
        setDetailsValue(d,value,R.id.details_date_taken_value);
      }
 else {
        hideDetailsRow(d,R.id.details_date_taken_row);
      }
      if (JPEG_MIME_TYPE.equals(image.getMimeType())) {
        showExifInformation(image,d,activity);
      }
 else {
        hideExifInformation(d);
      }
      builder.setNeutralButton(R.string.details_ok,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          dialog.dismiss();
        }
      }
);
      handler.post(new Runnable(){
        public void run(){
          builder.setIcon(android.R.drawable.ic_dialog_info).setTitle(R.string.details_panel_title).setView(d).show();
        }
      }
);
    }
  }
);
  return true;
}",0.9812937062937064
184392,"private void initializeFirstTime(){
  if (mFirstTimeInitialized)   return;
  mOrientationListener=new OrientationEventListener(Camera.this){
    @Override public void onOrientationChanged(    int orientation){
      if (orientation != ORIENTATION_UNKNOWN) {
        orientation+=90;
      }
      orientation=ImageManager.roundOrientation(orientation);
      if (orientation != mLastOrientation) {
        mLastOrientation=orientation;
        if (!mIsImageCaptureIntent) {
          setOrientationIndicator(mLastOrientation);
        }
      }
    }
  }
;
  mOrientationListener.enable();
  mLocationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  keepMediaProviderInstance();
  checkStorage();
  mContentResolver=getContentResolver();
  if (!mIsImageCaptureIntent) {
    findViewById(R.id.camera_switch).setOnClickListener(this);
    mLastPictureButton=(ImageView)findViewById(R.id.review_thumbnail);
    mLastPictureButton.setOnClickListener(this);
    mThumbController=new ThumbnailController(getResources(),mLastPictureButton,mContentResolver);
    mThumbController.loadData(ImageManager.getLastImageThumbPath());
    updateThumbnailButton();
  }
  mShutterButton=(ShutterButton)findViewById(R.id.shutter_button);
  mShutterButton.setOnShutterButtonListener(this);
  mShutterButton.setVisibility(View.VISIBLE);
  mFocusRectangle=(FocusRectangle)findViewById(R.id.focus_rectangle);
  updateFocusIndicator();
  mGpsIndicator=(IconIndicator)findViewById(R.id.gps_icon);
  ImageManager.ensureOSXCompatibleFolder();
  installIntentFilter();
  initializeFocusTone();
  initializeZoom();
  mFirstTimeInitialized=true;
}","private void initializeFirstTime(){
  if (mFirstTimeInitialized)   return;
  mOrientationListener=new OrientationEventListener(Camera.this){
    @Override public void onOrientationChanged(    int orientation){
      if (orientation != ORIENTATION_UNKNOWN) {
        orientation+=90;
      }
      orientation=ImageManager.roundOrientation(orientation);
      if (orientation != mLastOrientation) {
        mLastOrientation=orientation;
        if (!mIsImageCaptureIntent) {
          setOrientationIndicator(mLastOrientation);
        }
      }
    }
  }
;
  mOrientationListener.enable();
  mLocationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  mRecordLocation=RecordLocationPreference.get(mPreferences,getContentResolver());
  if (mRecordLocation)   startReceivingLocationUpdates();
  keepMediaProviderInstance();
  checkStorage();
  mContentResolver=getContentResolver();
  if (!mIsImageCaptureIntent) {
    findViewById(R.id.camera_switch).setOnClickListener(this);
    mLastPictureButton=(ImageView)findViewById(R.id.review_thumbnail);
    mLastPictureButton.setOnClickListener(this);
    mThumbController=new ThumbnailController(getResources(),mLastPictureButton,mContentResolver);
    mThumbController.loadData(ImageManager.getLastImageThumbPath());
    updateThumbnailButton();
  }
  mShutterButton=(ShutterButton)findViewById(R.id.shutter_button);
  mShutterButton.setOnShutterButtonListener(this);
  mShutterButton.setVisibility(View.VISIBLE);
  mFocusRectangle=(FocusRectangle)findViewById(R.id.focus_rectangle);
  updateFocusIndicator();
  mGpsIndicator=(IconIndicator)findViewById(R.id.gps_icon);
  ImageManager.ensureOSXCompatibleFolder();
  installIntentFilter();
  initializeFocusTone();
  initializeZoom();
  mFirstTimeInitialized=true;
}",0.9791368962560733
184393,"private void initializeSecondTime(){
  mOrientationListener.enable();
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  installIntentFilter();
  initializeFocusTone();
  keepMediaProviderInstance();
  checkStorage();
  if (mZoomButtons != null) {
    mCameraDevice.setZoomCallback(mZoomCallback);
  }
  if (!mIsImageCaptureIntent) {
    updateThumbnailButton();
  }
}","private void initializeSecondTime(){
  mOrientationListener.enable();
  mRecordLocation=RecordLocationPreference.get(mPreferences,getContentResolver());
  if (mRecordLocation)   startReceivingLocationUpdates();
  installIntentFilter();
  initializeFocusTone();
  keepMediaProviderInstance();
  checkStorage();
  if (mZoomButtons != null) {
    mCameraDevice.setZoomCallback(mZoomCallback);
  }
  if (!mIsImageCaptureIntent) {
    updateThumbnailButton();
  }
}",0.9148191365227538
184394,"private static boolean onDetailsClicked(MenuInvoker onInvoke,final Handler handler,final Activity activity){
  onInvoke.run(new MenuCallback(){
    public void run(    Uri u,    IImage image){
      if (image == null) {
        return;
      }
      final AlertDialog.Builder builder=new AlertDialog.Builder(activity);
      final View d=View.inflate(activity,R.layout.detailsview,null);
      ImageView imageView=(ImageView)d.findViewById(R.id.details_thumbnail_image);
      imageView.setImageBitmap(image.miniThumbBitmap());
      TextView textView=(TextView)d.findViewById(R.id.details_image_title);
      textView.setText(image.getTitle());
      long length=getImageFileSize(image);
      String lengthString=length < 0 ? EMPTY_STRING : Formatter.formatFileSize(activity,length);
      ((TextView)d.findViewById(R.id.details_file_size_value)).setText(lengthString);
      int dimensionWidth=0;
      int dimensionHeight=0;
      if (ImageManager.isImage(image)) {
        dimensionWidth=image.getWidth();
        dimensionHeight=image.getHeight();
        d.findViewById(R.id.details_duration_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_format_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_codec_row).setVisibility(View.GONE);
      }
 else {
        MediaMetadataRetriever retriever=new MediaMetadataRetriever();
        try {
          retriever.setMode(MediaMetadataRetriever.MODE_GET_METADATA_ONLY);
          retriever.setDataSource(image.getDataPath());
          try {
            dimensionWidth=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH));
            dimensionHeight=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT));
          }
 catch (          NumberFormatException e) {
            dimensionWidth=0;
            dimensionHeight=0;
          }
          try {
            int durationMs=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
            String durationValue=formatDuration(activity,durationMs);
            ((TextView)d.findViewById(R.id.details_duration_value)).setText(durationValue);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            String frameRate=String.format(activity.getString(R.string.details_fps),Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_FRAME_RATE)));
            ((TextView)d.findViewById(R.id.details_frame_rate_value)).setText(frameRate);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            long bitRate=Long.parseLong(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_BIT_RATE));
            String bps;
            if (bitRate < 1000000) {
              bps=String.format(activity.getString(R.string.details_kbps),bitRate / 1000);
            }
 else {
              bps=String.format(activity.getString(R.string.details_mbps),(bitRate) / 1000000.0);
            }
            ((TextView)d.findViewById(R.id.details_bit_rate_value)).setText(bps);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
          }
          String format=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_FORMAT);
          ((TextView)d.findViewById(R.id.details_format_value)).setText(format);
          String codec=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_CODEC);
          if (codec != null) {
            setDetailsValue(d,codec,R.id.details_codec_value);
          }
 else {
            hideDetailsRow(d,R.id.details_codec_row);
          }
        }
 catch (        RuntimeException ex) {
        }
 finally {
          try {
            retriever.release();
          }
 catch (          RuntimeException ex) {
          }
        }
      }
      String value=null;
      if (dimensionWidth > 0 && dimensionHeight > 0) {
        value=String.format(activity.getString(R.string.details_dimension_x),dimensionWidth,dimensionHeight);
      }
      if (value != null) {
        setDetailsValue(d,value,R.id.details_resolution_value);
      }
 else {
        hideDetailsRow(d,R.id.details_resolution_row);
      }
      value=EMPTY_STRING;
      long dateTaken=image.getDateTaken();
      if (dateTaken != 0) {
        Date date=new Date(image.getDateTaken());
        SimpleDateFormat dateFormat=new SimpleDateFormat();
        value=dateFormat.format(date);
      }
      if (value != EMPTY_STRING) {
        setDetailsValue(d,value,R.id.details_date_taken_value);
      }
 else {
        hideDetailsRow(d,R.id.details_date_taken_row);
      }
      if (JPEG_MIME_TYPE.equals(image.getMimeType())) {
        showExifInformation(image,d,activity);
      }
 else {
        hideExifInformation(d);
      }
      builder.setNeutralButton(R.string.details_ok,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          dialog.dismiss();
        }
      }
);
      handler.post(new Runnable(){
        public void run(){
          builder.setIcon(android.R.drawable.ic_dialog_info).setTitle(R.string.details_panel_title).setView(d).show();
        }
      }
);
    }
  }
);
  return true;
}","private static boolean onDetailsClicked(MenuInvoker onInvoke,final Handler handler,final Activity activity){
  onInvoke.run(new MenuCallback(){
    public void run(    Uri u,    IImage image){
      if (image == null) {
        return;
      }
      final AlertDialog.Builder builder=new AlertDialog.Builder(activity);
      final View d=View.inflate(activity,R.layout.detailsview,null);
      ImageView imageView=(ImageView)d.findViewById(R.id.details_thumbnail_image);
      imageView.setImageBitmap(image.miniThumbBitmap());
      TextView textView=(TextView)d.findViewById(R.id.details_image_title);
      textView.setText(image.getTitle());
      long length=getImageFileSize(image);
      String lengthString=length < 0 ? EMPTY_STRING : Formatter.formatFileSize(activity,length);
      ((TextView)d.findViewById(R.id.details_file_size_value)).setText(lengthString);
      int dimensionWidth=0;
      int dimensionHeight=0;
      if (ImageManager.isImage(image)) {
        dimensionWidth=image.getWidth();
        dimensionHeight=image.getHeight();
        d.findViewById(R.id.details_duration_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_format_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_codec_row).setVisibility(View.GONE);
      }
 else {
        MediaMetadataRetriever retriever=new MediaMetadataRetriever();
        try {
          retriever.setMode(MediaMetadataRetriever.MODE_GET_METADATA_ONLY);
          retriever.setDataSource(image.getDataPath());
          try {
            dimensionWidth=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH));
            dimensionHeight=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT));
          }
 catch (          NumberFormatException e) {
            dimensionWidth=0;
            dimensionHeight=0;
          }
          try {
            int durationMs=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
            String durationValue=formatDuration(activity,durationMs);
            ((TextView)d.findViewById(R.id.details_duration_value)).setText(durationValue);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            String frameRate=String.format(activity.getString(R.string.details_fps),Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_FRAME_RATE)));
            ((TextView)d.findViewById(R.id.details_frame_rate_value)).setText(frameRate);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            long bitRate=Long.parseLong(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_BIT_RATE));
            String bps;
            if (bitRate < 1000000) {
              bps=String.format(activity.getString(R.string.details_kbps),bitRate / 1000);
            }
 else {
              bps=String.format(activity.getString(R.string.details_mbps),(bitRate) / 1000000.0);
            }
            ((TextView)d.findViewById(R.id.details_bit_rate_value)).setText(bps);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
          }
          String format=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_FORMAT);
          ((TextView)d.findViewById(R.id.details_format_value)).setText(format);
          String codec=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_CODEC);
          if (codec != null) {
            setDetailsValue(d,codec,R.id.details_codec_value);
          }
 else {
            hideDetailsRow(d,R.id.details_codec_row);
          }
        }
 catch (        RuntimeException ex) {
        }
 finally {
          try {
            retriever.release();
          }
 catch (          RuntimeException ex) {
          }
        }
      }
      String value=null;
      if (dimensionWidth > 0 && dimensionHeight > 0) {
        value=String.format(activity.getString(R.string.details_dimension_x),dimensionWidth,dimensionHeight);
      }
      if (value != null) {
        setDetailsValue(d,value,R.id.details_resolution_value);
      }
 else {
        hideDetailsRow(d,R.id.details_resolution_row);
      }
      value=EMPTY_STRING;
      long dateTaken=image.getDateTaken();
      if (dateTaken != 0) {
        Date date=new Date(image.getDateTaken());
        DateFormat dateFormat=android.text.format.DateFormat.getDateFormat(activity);
        DateFormat timeFormat=android.text.format.DateFormat.getTimeFormat(activity);
        value=dateFormat.format(date) + ' ' + timeFormat.format(date);
      }
      if (value != EMPTY_STRING) {
        setDetailsValue(d,value,R.id.details_date_taken_value);
      }
 else {
        hideDetailsRow(d,R.id.details_date_taken_row);
      }
      if (JPEG_MIME_TYPE.equals(image.getMimeType())) {
        showExifInformation(image,d,activity);
      }
 else {
        hideExifInformation(d);
      }
      builder.setNeutralButton(R.string.details_ok,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          dialog.dismiss();
        }
      }
);
      handler.post(new Runnable(){
        public void run(){
          builder.setIcon(android.R.drawable.ic_dialog_info).setTitle(R.string.details_panel_title).setView(d).show();
        }
      }
);
    }
  }
);
  return true;
}",0.9812937062937064
184395,"private void restorePreferences(){
  mPreferences.unregisterOnSharedPreferenceChangeListener(this);
  mSettings.clearSettings();
  CameraSettings.upgradePreferences(mPreferences);
  setCameraParameters();
  mSettings.setPreferenceGroup(new CameraSettings(this,mParameters).getPreferenceGroup(R.xml.camera_preferences));
  mPreferences.registerOnSharedPreferenceChangeListener(this);
}","private void restorePreferences(){
  mPreferences.unregisterOnSharedPreferenceChangeListener(this);
  mSettings.clearSettings();
  CameraSettings.upgradePreferences(mPreferences);
  setCameraParameters();
  mPreferences.registerOnSharedPreferenceChangeListener(this);
}",0.8238897396630934
184396,"public void setPreferenceGroup(PreferenceGroup group){
  ArrayList<CameraPreference> list=new ArrayList<CameraPreference>();
  for (int i=0, n=group.size(); i < n; ++i) {
    addPreference(group.get(i),list);
  }
  mMainAdapter=new MainMenuAdapter(mContext,list);
  mMainMenu.setAdapter(mMainAdapter);
  mMainMenu.setOnItemClickListener(mMainAdapter);
}","public void setPreferenceGroup(PreferenceGroup group){
  this.mPreferenceGroup=group;
  ArrayList<CameraPreference> list=new ArrayList<CameraPreference>();
  for (int i=0, n=group.size(); i < n; ++i) {
    addPreference(group.get(i),list);
  }
  mMainAdapter=new MainMenuAdapter(mContext,list);
  mMainMenu.setAdapter(mMainAdapter);
  mMainMenu.setOnItemClickListener(mMainAdapter);
}",0.9579375848032564
184397,"public void clearSettings(){
  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(mContext).edit();
  editor.clear();
  editor.commit();
  mOverride.clear();
}","public void clearSettings(){
  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(mContext).edit();
  editor.clear();
  editor.commit();
  mPreferenceGroup.reloadValue();
  if (mMainAdapter != null) {
    mMainAdapter.notifyDataSetChanged();
  }
  mOverride.clear();
}",0.7733887733887734
184398,"private void restorePreferences(){
  mPreferences.unregisterOnSharedPreferenceChangeListener(this);
  mSettings.clearSettings();
  CameraSettings.upgradePreferences(mPreferences);
  readVideoPreferences();
  resetCameraParameters();
  mHandler.post(new Runnable(){
    public void run(){
      mSettings.setPreferenceGroup(new CameraSettings(VideoCamera.this,mParameters).getPreferenceGroup(R.xml.video_preferences));
    }
  }
);
  mPreferences.registerOnSharedPreferenceChangeListener(this);
}","private void restorePreferences(){
  mPreferences.unregisterOnSharedPreferenceChangeListener(this);
  mSettings.clearSettings();
  CameraSettings.upgradePreferences(mPreferences);
  readVideoPreferences();
  resetCameraParameters();
  mPreferences.registerOnSharedPreferenceChangeListener(this);
}",0.5984848484848485
184399,"private static boolean onDetailsClicked(MenuInvoker onInvoke,final Handler handler,final Activity activity){
  onInvoke.run(new MenuCallback(){
    public void run(    Uri u,    IImage image){
      if (image == null) {
        return;
      }
      final AlertDialog.Builder builder=new AlertDialog.Builder(activity);
      final View d=View.inflate(activity,R.layout.detailsview,null);
      ImageView imageView=(ImageView)d.findViewById(R.id.details_thumbnail_image);
      imageView.setImageBitmap(image.miniThumbBitmap());
      TextView textView=(TextView)d.findViewById(R.id.details_image_title);
      textView.setText(image.getTitle());
      long length=getImageFileSize(image);
      String lengthString=length < 0 ? EMPTY_STRING : Formatter.formatFileSize(activity,length);
      ((TextView)d.findViewById(R.id.details_file_size_value)).setText(lengthString);
      int dimensionWidth=0;
      int dimensionHeight=0;
      if (ImageManager.isImage(image)) {
        dimensionWidth=image.getWidth();
        dimensionHeight=image.getHeight();
        d.findViewById(R.id.details_duration_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_format_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_codec_row).setVisibility(View.GONE);
      }
 else {
        MediaMetadataRetriever retriever=new MediaMetadataRetriever();
        try {
          retriever.setMode(MediaMetadataRetriever.MODE_GET_METADATA_ONLY);
          retriever.setDataSource(image.getDataPath());
          try {
            dimensionWidth=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH));
            dimensionHeight=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT));
          }
 catch (          NumberFormatException e) {
            dimensionWidth=0;
            dimensionHeight=0;
          }
          try {
            int durationMs=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
            String durationValue=formatDuration(activity,durationMs);
            ((TextView)d.findViewById(R.id.details_duration_value)).setText(durationValue);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            String frameRate=String.format(activity.getString(R.string.details_fps),Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_FRAME_RATE)));
            ((TextView)d.findViewById(R.id.details_frame_rate_value)).setText(frameRate);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            long bitRate=Long.parseLong(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_BIT_RATE));
            String bps;
            if (bitRate < 1000000) {
              bps=String.format(activity.getString(R.string.details_kbps),bitRate / 1000);
            }
 else {
              bps=String.format(activity.getString(R.string.details_mbps),(bitRate) / 1000000.0);
            }
            ((TextView)d.findViewById(R.id.details_bit_rate_value)).setText(bps);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
          }
          String format=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_FORMAT);
          ((TextView)d.findViewById(R.id.details_format_value)).setText(format);
          String codec=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_CODEC);
          if (codec != null) {
            setDetailsValue(d,codec,R.id.details_codec_value);
          }
 else {
            hideDetailsRow(d,R.id.details_codec_row);
          }
        }
 catch (        RuntimeException ex) {
        }
 finally {
          try {
            retriever.release();
          }
 catch (          RuntimeException ex) {
          }
        }
      }
      String value=null;
      if (dimensionWidth > 0 && dimensionHeight > 0) {
        value=String.format(activity.getString(R.string.details_dimension_x),dimensionWidth,dimensionHeight);
      }
      if (value != null) {
        setDetailsValue(d,value,R.id.details_resolution_value);
      }
 else {
        hideDetailsRow(d,R.id.details_resolution_row);
      }
      value=EMPTY_STRING;
      long dateTaken=image.getDateTaken();
      if (dateTaken != 0) {
        Date date=new Date(image.getDateTaken());
        SimpleDateFormat dateFormat=new SimpleDateFormat();
        value=dateFormat.format(date);
      }
      if (value != EMPTY_STRING) {
        setDetailsValue(d,value,R.id.details_date_taken_value);
      }
 else {
        hideDetailsRow(d,R.id.details_date_taken_row);
      }
      if (JPEG_MIME_TYPE.equals(image.getMimeType())) {
        showExifInformation(image,d,activity);
      }
 else {
        hideExifInformation(d);
      }
      builder.setNeutralButton(R.string.details_ok,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          dialog.dismiss();
        }
      }
);
      handler.post(new Runnable(){
        public void run(){
          builder.setIcon(android.R.drawable.ic_dialog_info).setTitle(R.string.details_panel_title).setView(d).show();
        }
      }
);
    }
  }
);
  return true;
}","private static boolean onDetailsClicked(MenuInvoker onInvoke,final Handler handler,final Activity activity){
  onInvoke.run(new MenuCallback(){
    public void run(    Uri u,    IImage image){
      if (image == null) {
        return;
      }
      final AlertDialog.Builder builder=new AlertDialog.Builder(activity);
      final View d=View.inflate(activity,R.layout.detailsview,null);
      ImageView imageView=(ImageView)d.findViewById(R.id.details_thumbnail_image);
      imageView.setImageBitmap(image.miniThumbBitmap());
      TextView textView=(TextView)d.findViewById(R.id.details_image_title);
      textView.setText(image.getTitle());
      long length=getImageFileSize(image);
      String lengthString=length < 0 ? EMPTY_STRING : Formatter.formatFileSize(activity,length);
      ((TextView)d.findViewById(R.id.details_file_size_value)).setText(lengthString);
      int dimensionWidth=0;
      int dimensionHeight=0;
      if (ImageManager.isImage(image)) {
        dimensionWidth=image.getWidth();
        dimensionHeight=image.getHeight();
        d.findViewById(R.id.details_duration_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_format_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_codec_row).setVisibility(View.GONE);
      }
 else {
        MediaMetadataRetriever retriever=new MediaMetadataRetriever();
        try {
          retriever.setMode(MediaMetadataRetriever.MODE_GET_METADATA_ONLY);
          retriever.setDataSource(image.getDataPath());
          try {
            dimensionWidth=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH));
            dimensionHeight=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT));
          }
 catch (          NumberFormatException e) {
            dimensionWidth=0;
            dimensionHeight=0;
          }
          try {
            int durationMs=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
            String durationValue=formatDuration(activity,durationMs);
            ((TextView)d.findViewById(R.id.details_duration_value)).setText(durationValue);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            String frameRate=String.format(activity.getString(R.string.details_fps),Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_FRAME_RATE)));
            ((TextView)d.findViewById(R.id.details_frame_rate_value)).setText(frameRate);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            long bitRate=Long.parseLong(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_BIT_RATE));
            String bps;
            if (bitRate < 1000000) {
              bps=String.format(activity.getString(R.string.details_kbps),bitRate / 1000);
            }
 else {
              bps=String.format(activity.getString(R.string.details_mbps),(bitRate) / 1000000.0);
            }
            ((TextView)d.findViewById(R.id.details_bit_rate_value)).setText(bps);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
          }
          String format=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_FORMAT);
          ((TextView)d.findViewById(R.id.details_format_value)).setText(format);
          String codec=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_CODEC);
          if (codec != null) {
            setDetailsValue(d,codec,R.id.details_codec_value);
          }
 else {
            hideDetailsRow(d,R.id.details_codec_row);
          }
        }
 catch (        RuntimeException ex) {
        }
 finally {
          try {
            retriever.release();
          }
 catch (          RuntimeException ex) {
          }
        }
      }
      String value=null;
      if (dimensionWidth > 0 && dimensionHeight > 0) {
        value=String.format(activity.getString(R.string.details_dimension_x),dimensionWidth,dimensionHeight);
      }
      if (value != null) {
        setDetailsValue(d,value,R.id.details_resolution_value);
      }
 else {
        hideDetailsRow(d,R.id.details_resolution_row);
      }
      value=EMPTY_STRING;
      long dateTaken=image.getDateTaken();
      if (dateTaken != 0) {
        Date date=new Date(image.getDateTaken());
        DateFormat dateFormat=android.text.format.DateFormat.getDateFormat(activity);
        DateFormat timeFormat=android.text.format.DateFormat.getTimeFormat(activity);
        value=dateFormat.format(date) + ' ' + timeFormat.format(date);
      }
      if (value != EMPTY_STRING) {
        setDetailsValue(d,value,R.id.details_date_taken_value);
      }
 else {
        hideDetailsRow(d,R.id.details_date_taken_row);
      }
      if (JPEG_MIME_TYPE.equals(image.getMimeType())) {
        showExifInformation(image,d,activity);
      }
 else {
        hideExifInformation(d);
      }
      builder.setNeutralButton(R.string.details_ok,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          dialog.dismiss();
        }
      }
);
      handler.post(new Runnable(){
        public void run(){
          builder.setIcon(android.R.drawable.ic_dialog_info).setTitle(R.string.details_panel_title).setView(d).show();
        }
      }
);
    }
  }
);
  return true;
}",0.9812937062937064
184400,"public void setVisible(boolean visible){
  mHandler.removeMessages(MSG_POST_SET_VISIBLE);
  if (visible) {
    if (mOwnerView.getWindowToken() == null) {
      mHandler.sendEmptyMessage(MSG_POST_SET_VISIBLE);
      return;
    }
  }
  if (mIsVisible == visible) {
    return;
  }
  mIsVisible=visible;
  if (visible) {
    if (mMainAdapter != null)     mMainAdapter.notifyDataSetChanged();
    if (mContainerLayoutParams.token == null) {
      mContainerLayoutParams.token=mOwnerView.getWindowToken();
    }
    mSubMenu.setVisibility(View.INVISIBLE);
    mMainMenu.setVisibility(View.VISIBLE);
    mWindowManager.addView(mContainer,mContainerLayoutParams);
    updateLayout();
  }
 else {
    mWindowManager.removeView(mContainer);
  }
  if (mVisibilityListener != null) {
    mVisibilityListener.onVisibilityChanged(mIsVisible);
  }
}","public void setVisible(boolean visible){
  mHandler.removeMessages(MSG_POST_SET_VISIBLE);
  if (visible) {
    if (mOwnerView.getWindowToken() == null) {
      mHandler.sendEmptyMessage(MSG_POST_SET_VISIBLE);
      return;
    }
  }
  if (mIsVisible == visible) {
    return;
  }
  mIsVisible=visible;
  if (visible) {
    if (mMainAdapter != null)     mMainAdapter.notifyDataSetInvalidated();
    if (mContainerLayoutParams.token == null) {
      mContainerLayoutParams.token=mOwnerView.getWindowToken();
    }
    mSubMenu.setVisibility(View.INVISIBLE);
    mMainMenu.setVisibility(View.VISIBLE);
    mWindowManager.addView(mContainer,mContainerLayoutParams);
    updateLayout();
  }
 else {
    mWindowManager.removeView(mContainer);
  }
  if (mVisibilityListener != null) {
    mVisibilityListener.onVisibilityChanged(mIsVisible);
  }
}",0.4677804295942721
184401,"public void setVisible(boolean visible){
  mHandler.removeMessages(MSG_POST_SET_VISIBLE);
  if (visible) {
    if (mOwnerView.getWindowToken() == null) {
      mHandler.sendEmptyMessage(MSG_POST_SET_VISIBLE);
      return;
    }
  }
  if (mIsVisible == visible) {
    return;
  }
  mIsVisible=visible;
  if (visible) {
    if (mMainAdapter != null)     mMainAdapter.notifyDataSetChanged();
    if (mContainerLayoutParams.token == null) {
      mContainerLayoutParams.token=mOwnerView.getWindowToken();
    }
    mSubMenu.setVisibility(View.INVISIBLE);
    mMainMenu.setVisibility(View.VISIBLE);
    mWindowManager.addView(mContainer,mContainerLayoutParams);
    updateLayout();
  }
 else {
    mWindowManager.removeView(mContainer);
  }
  if (mVisibilityListener != null) {
    mVisibilityListener.onVisibilityChanged(mIsVisible);
  }
}","public void setVisible(boolean visible){
  mHandler.removeMessages(MSG_POST_SET_VISIBLE);
  if (visible) {
    if (mOwnerView.getWindowToken() == null) {
      mHandler.sendEmptyMessage(MSG_POST_SET_VISIBLE);
      return;
    }
  }
  if (mIsVisible == visible) {
    return;
  }
  mIsVisible=visible;
  if (visible) {
    if (mMainAdapter != null)     mMainAdapter.notifyDataSetInvalidated();
    if (mContainerLayoutParams.token == null) {
      mContainerLayoutParams.token=mOwnerView.getWindowToken();
    }
    mSubMenu.setVisibility(View.INVISIBLE);
    mMainMenu.setVisibility(View.VISIBLE);
    mWindowManager.addView(mContainer,mContainerLayoutParams);
    updateLayout();
  }
 else {
    mWindowManager.removeView(mContainer);
  }
  if (mVisibilityListener != null) {
    mVisibilityListener.onVisibilityChanged(mIsVisible);
  }
}",0.4677804295942721
184402,"public void setVisible(boolean visible){
  mHandler.removeMessages(MSG_POST_SET_VISIBLE);
  if (visible) {
    if (mOwnerView.getWindowToken() == null) {
      mHandler.sendEmptyMessage(MSG_POST_SET_VISIBLE);
      return;
    }
  }
  if (mIsVisible == visible) {
    return;
  }
  mIsVisible=visible;
  if (visible) {
    if (mMainAdapter != null)     mMainAdapter.notifyDataSetChanged();
    if (mContainerLayoutParams.token == null) {
      mContainerLayoutParams.token=mOwnerView.getWindowToken();
    }
    mSubMenu.setVisibility(View.INVISIBLE);
    mMainMenu.setVisibility(View.VISIBLE);
    mWindowManager.addView(mContainer,mContainerLayoutParams);
    updateLayout();
  }
 else {
    mWindowManager.removeView(mContainer);
  }
  if (mVisibilityListener != null) {
    mVisibilityListener.onVisibilityChanged(mIsVisible);
  }
}","public void setVisible(boolean visible){
  mHandler.removeMessages(MSG_POST_SET_VISIBLE);
  if (visible) {
    if (mOwnerView.getWindowToken() == null) {
      mHandler.sendEmptyMessage(MSG_POST_SET_VISIBLE);
      return;
    }
  }
  if (mIsVisible == visible) {
    return;
  }
  mIsVisible=visible;
  if (visible) {
    if (mMainAdapter != null)     mMainAdapter.notifyDataSetInvalidated();
    if (mContainerLayoutParams.token == null) {
      mContainerLayoutParams.token=mOwnerView.getWindowToken();
    }
    mSubMenu.setVisibility(View.INVISIBLE);
    mMainMenu.setVisibility(View.VISIBLE);
    mWindowManager.addView(mContainer,mContainerLayoutParams);
    updateLayout();
  }
 else {
    mWindowManager.removeView(mContainer);
  }
  if (mVisibilityListener != null) {
    mVisibilityListener.onVisibilityChanged(mIsVisible);
  }
}",0.4677804295942721
184403,"private void initializeFirstTime(){
  if (mFirstTimeInitialized)   return;
  mOrientationListener=new OrientationEventListener(Camera.this){
    @Override public void onOrientationChanged(    int orientation){
      if (orientation != ORIENTATION_UNKNOWN) {
        mLastOrientation=orientation;
      }
    }
  }
;
  mOrientationListener.enable();
  mLocationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  checkStorage();
  mContentResolver=getContentResolver();
  if (!mIsImageCaptureIntent) {
    findViewById(R.id.camera_switch).setOnClickListener(this);
    mLastPictureButton=(ImageView)findViewById(R.id.review_thumbnail);
    mLastPictureButton.setOnClickListener(this);
    mThumbController=new ThumbnailController(getResources(),mLastPictureButton,mContentResolver);
    mThumbController.loadData(ImageManager.getLastImageThumbPath());
    updateThumbnailButton();
  }
  mShutterButton=(ShutterButton)findViewById(R.id.shutter_button);
  mShutterButton.setOnShutterButtonListener(this);
  mShutterButton.setVisibility(View.VISIBLE);
  mFocusRectangle=(FocusRectangle)findViewById(R.id.focus_rectangle);
  updateFocusIndicator();
  mGpsIndicator=(IconIndicator)findViewById(R.id.gps_icon);
  ImageManager.ensureOSXCompatibleFolder();
  installIntentFilter();
  initializeFocusTone();
  initializeZoom();
  mFirstTimeInitialized=true;
}","private void initializeFirstTime(){
  if (mFirstTimeInitialized)   return;
  mOrientationListener=new OrientationEventListener(Camera.this){
    @Override public void onOrientationChanged(    int orientation){
      if (orientation != ORIENTATION_UNKNOWN) {
        mLastOrientation=orientation;
      }
    }
  }
;
  mOrientationListener.enable();
  mLocationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  keepMediaProviderInstance();
  checkStorage();
  mContentResolver=getContentResolver();
  if (!mIsImageCaptureIntent) {
    findViewById(R.id.camera_switch).setOnClickListener(this);
    mLastPictureButton=(ImageView)findViewById(R.id.review_thumbnail);
    mLastPictureButton.setOnClickListener(this);
    mThumbController=new ThumbnailController(getResources(),mLastPictureButton,mContentResolver);
    mThumbController.loadData(ImageManager.getLastImageThumbPath());
    updateThumbnailButton();
  }
  mShutterButton=(ShutterButton)findViewById(R.id.shutter_button);
  mShutterButton.setOnShutterButtonListener(this);
  mShutterButton.setVisibility(View.VISIBLE);
  mFocusRectangle=(FocusRectangle)findViewById(R.id.focus_rectangle);
  updateFocusIndicator();
  mGpsIndicator=(IconIndicator)findViewById(R.id.gps_icon);
  ImageManager.ensureOSXCompatibleFolder();
  installIntentFilter();
  initializeFocusTone();
  initializeZoom();
  mFirstTimeInitialized=true;
}",0.989394457748888
184404,"private void initializeSecondTime(){
  mOrientationListener.enable();
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  installIntentFilter();
  initializeFocusTone();
  checkStorage();
  if (mZoomButtons != null) {
    mCameraDevice.setZoomCallback(mZoomCallback);
  }
  if (!mIsImageCaptureIntent) {
    updateThumbnailButton();
  }
}","private void initializeSecondTime(){
  mOrientationListener.enable();
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  installIntentFilter();
  initializeFocusTone();
  keepMediaProviderInstance();
  checkStorage();
  if (mZoomButtons != null) {
    mCameraDevice.setZoomCallback(mZoomCallback);
  }
  if (!mIsImageCaptureIntent) {
    updateThumbnailButton();
  }
}",0.9593709043250328
184405,"public void onZoomUpdate(int zoomValue,boolean stopped,android.hardware.Camera camera){
  Log.v(TAG,""String_Node_Str"" + zoomValue + ""String_Node_Str""+ stopped);
  mZoomValue=zoomValue;
  if (stopped)   mZooming=false;
  updateZoomButtonsEnabled();
}","public void onZoomUpdate(int zoomValue,boolean stopped,android.hardware.Camera camera){
  Log.v(TAG,""String_Node_Str"" + zoomValue + ""String_Node_Str""+ stopped);
  mZoomValue=zoomValue;
  mParameters.setZoom(zoomValue);
  if (stopped)   mZooming=false;
  updateZoomButtonsEnabled();
}",0.9360902255639098
184406,"public void onZoomUpdate(int zoomValue,boolean stopped,android.hardware.Camera camera){
  Log.v(TAG,""String_Node_Str"" + zoomValue + ""String_Node_Str""+ stopped);
  mZoomValue=zoomValue;
  if (stopped)   mZooming=false;
  updateZoomButtonsEnabled();
}","public void onZoomUpdate(int zoomValue,boolean stopped,android.hardware.Camera camera){
  Log.v(TAG,""String_Node_Str"" + zoomValue + ""String_Node_Str""+ stopped);
  mZoomValue=zoomValue;
  mParameters.setZoom(zoomValue);
  if (stopped)   mZooming=false;
  updateZoomButtonsEnabled();
}",0.9360902255639098
184407,"public void onZoomUpdate(int zoomValue,boolean stopped,android.hardware.Camera camera){
  Log.v(TAG,""String_Node_Str"" + zoomValue + ""String_Node_Str""+ stopped);
  mZoomValue=zoomValue;
  if (stopped)   mZooming=false;
  updateZoomButtonsEnabled();
}","public void onZoomUpdate(int zoomValue,boolean stopped,android.hardware.Camera camera){
  Log.v(TAG,""String_Node_Str"" + zoomValue + ""String_Node_Str""+ stopped);
  mZoomValue=zoomValue;
  mParameters.setZoom(zoomValue);
  if (stopped)   mZooming=false;
  updateZoomButtonsEnabled();
}",0.9360902255639098
184408,"public void onZoomUpdate(int zoomValue,boolean stopped,android.hardware.Camera camera){
  Log.v(TAG,""String_Node_Str"" + zoomValue + ""String_Node_Str""+ stopped);
  mZoomValue=zoomValue;
  if (stopped)   mZooming=false;
  updateZoomButtonsEnabled();
}","public void onZoomUpdate(int zoomValue,boolean stopped,android.hardware.Camera camera){
  Log.v(TAG,""String_Node_Str"" + zoomValue + ""String_Node_Str""+ stopped);
  mZoomValue=zoomValue;
  mParameters.setZoom(zoomValue);
  if (stopped)   mZooming=false;
  updateZoomButtonsEnabled();
}",0.9360902255639098
184409,"public void onZoomUpdate(int zoomValue,boolean stopped,android.hardware.Camera camera){
  Log.v(TAG,""String_Node_Str"" + zoomValue + ""String_Node_Str""+ stopped);
  mZoomValue=zoomValue;
  if (stopped)   mZooming=false;
  updateZoomButtonsEnabled();
}","public void onZoomUpdate(int zoomValue,boolean stopped,android.hardware.Camera camera){
  Log.v(TAG,""String_Node_Str"" + zoomValue + ""String_Node_Str""+ stopped);
  mZoomValue=zoomValue;
  mParameters.setZoom(zoomValue);
  if (stopped)   mZooming=false;
  updateZoomButtonsEnabled();
}",0.9360902255639098
184410,"private void filterUnsupportedOptions(PreferenceScreen screen,ListPreference pref,List<String> supported){
  CharSequence[] allEntries=pref.getEntries();
  if (supported == null || allEntries.length <= 1) {
    removePreference(screen,pref);
    return;
  }
  CharSequence[] allEntryValues=pref.getEntryValues();
  Drawable[] allIcons=(pref instanceof IconListPreference) ? ((IconListPreference)pref).getIcons() : null;
  ArrayList<CharSequence> entries=new ArrayList<CharSequence>();
  ArrayList<CharSequence> entryValues=new ArrayList<CharSequence>();
  ArrayList<Drawable> icons=allIcons == null ? null : new ArrayList<Drawable>();
  for (int i=0, len=allEntryValues.length; i < len; i++) {
    if (supported.indexOf(allEntryValues[i].toString()) != NOT_FOUND) {
      entries.add(allEntries[i]);
      entryValues.add(allEntryValues[i]);
      if (allIcons != null)       icons.add(allIcons[i]);
    }
  }
  int size=entries.size();
  pref.setEntries(entries.toArray(new CharSequence[size]));
  pref.setEntryValues(entryValues.toArray(new CharSequence[size]));
  if (allIcons != null) {
    ((IconListPreference)pref).setIcons(icons.toArray(new Drawable[size]));
  }
  String value=pref.getValue();
  if (pref.findIndexOfValue(value) == NOT_FOUND) {
    pref.setValueIndex(0);
  }
}","private void filterUnsupportedOptions(PreferenceScreen screen,ListPreference pref,List<String> supported){
  CharSequence[] allEntries=pref.getEntries();
  if (supported == null || supported.size() <= 1) {
    removePreference(screen,pref);
    return;
  }
  CharSequence[] allEntryValues=pref.getEntryValues();
  Drawable[] allIcons=(pref instanceof IconListPreference) ? ((IconListPreference)pref).getIcons() : null;
  ArrayList<CharSequence> entries=new ArrayList<CharSequence>();
  ArrayList<CharSequence> entryValues=new ArrayList<CharSequence>();
  ArrayList<Drawable> icons=allIcons == null ? null : new ArrayList<Drawable>();
  for (int i=0, len=allEntryValues.length; i < len; i++) {
    if (supported.indexOf(allEntryValues[i].toString()) != NOT_FOUND) {
      entries.add(allEntries[i]);
      entryValues.add(allEntryValues[i]);
      if (allIcons != null)       icons.add(allIcons[i]);
    }
  }
  int size=entries.size();
  pref.setEntries(entries.toArray(new CharSequence[size]));
  pref.setEntryValues(entryValues.toArray(new CharSequence[size]));
  if (allIcons != null) {
    ((IconListPreference)pref).setIcons(icons.toArray(new Drawable[size]));
  }
  String value=pref.getValue();
  if (pref.findIndexOfValue(value) == NOT_FOUND) {
    pref.setValueIndex(0);
  }
}",0.9871645274212368
184411,"private void filterUnsupportedOptions(PreferenceScreen screen,ListPreference pref,List<String> supported){
  CharSequence[] allEntries=pref.getEntries();
  if (supported == null || allEntries.length <= 1) {
    removePreference(screen,pref);
    return;
  }
  CharSequence[] allEntryValues=pref.getEntryValues();
  Drawable[] allIcons=(pref instanceof IconListPreference) ? ((IconListPreference)pref).getIcons() : null;
  ArrayList<CharSequence> entries=new ArrayList<CharSequence>();
  ArrayList<CharSequence> entryValues=new ArrayList<CharSequence>();
  ArrayList<Drawable> icons=allIcons == null ? null : new ArrayList<Drawable>();
  for (int i=0, len=allEntryValues.length; i < len; i++) {
    if (supported.indexOf(allEntryValues[i].toString()) != NOT_FOUND) {
      entries.add(allEntries[i]);
      entryValues.add(allEntryValues[i]);
      if (allIcons != null)       icons.add(allIcons[i]);
    }
  }
  int size=entries.size();
  pref.setEntries(entries.toArray(new CharSequence[size]));
  pref.setEntryValues(entryValues.toArray(new CharSequence[size]));
  if (allIcons != null) {
    ((IconListPreference)pref).setIcons(icons.toArray(new Drawable[size]));
  }
  String value=pref.getValue();
  if (pref.findIndexOfValue(value) == NOT_FOUND) {
    pref.setValueIndex(0);
  }
}","private void filterUnsupportedOptions(PreferenceScreen screen,ListPreference pref,List<String> supported){
  CharSequence[] allEntries=pref.getEntries();
  if (supported == null || supported.size() <= 1) {
    removePreference(screen,pref);
    return;
  }
  CharSequence[] allEntryValues=pref.getEntryValues();
  Drawable[] allIcons=(pref instanceof IconListPreference) ? ((IconListPreference)pref).getIcons() : null;
  ArrayList<CharSequence> entries=new ArrayList<CharSequence>();
  ArrayList<CharSequence> entryValues=new ArrayList<CharSequence>();
  ArrayList<Drawable> icons=allIcons == null ? null : new ArrayList<Drawable>();
  for (int i=0, len=allEntryValues.length; i < len; i++) {
    if (supported.indexOf(allEntryValues[i].toString()) != NOT_FOUND) {
      entries.add(allEntries[i]);
      entryValues.add(allEntryValues[i]);
      if (allIcons != null)       icons.add(allIcons[i]);
    }
  }
  int size=entries.size();
  pref.setEntries(entries.toArray(new CharSequence[size]));
  pref.setEntryValues(entryValues.toArray(new CharSequence[size]));
  if (allIcons != null) {
    ((IconListPreference)pref).setIcons(icons.toArray(new Drawable[size]));
  }
  String value=pref.getValue();
  if (pref.findIndexOfValue(value) == NOT_FOUND) {
    pref.setValueIndex(0);
  }
}",0.9871645274212368
184412,"private void filterUnsupportedOptions(PreferenceScreen screen,ListPreference pref,List<String> supported){
  CharSequence[] allEntries=pref.getEntries();
  if (supported == null || allEntries.length <= 1) {
    removePreference(screen,pref);
    return;
  }
  CharSequence[] allEntryValues=pref.getEntryValues();
  Drawable[] allIcons=(pref instanceof IconListPreference) ? ((IconListPreference)pref).getIcons() : null;
  ArrayList<CharSequence> entries=new ArrayList<CharSequence>();
  ArrayList<CharSequence> entryValues=new ArrayList<CharSequence>();
  ArrayList<Drawable> icons=allIcons == null ? null : new ArrayList<Drawable>();
  for (int i=0, len=allEntryValues.length; i < len; i++) {
    if (supported.indexOf(allEntryValues[i].toString()) != NOT_FOUND) {
      entries.add(allEntries[i]);
      entryValues.add(allEntryValues[i]);
      if (allIcons != null)       icons.add(allIcons[i]);
    }
  }
  int size=entries.size();
  pref.setEntries(entries.toArray(new CharSequence[size]));
  pref.setEntryValues(entryValues.toArray(new CharSequence[size]));
  if (allIcons != null) {
    ((IconListPreference)pref).setIcons(icons.toArray(new Drawable[size]));
  }
  String value=pref.getValue();
  if (pref.findIndexOfValue(value) == NOT_FOUND) {
    pref.setValueIndex(0);
  }
}","private void filterUnsupportedOptions(PreferenceScreen screen,ListPreference pref,List<String> supported){
  CharSequence[] allEntries=pref.getEntries();
  if (supported == null || supported.size() <= 1) {
    removePreference(screen,pref);
    return;
  }
  CharSequence[] allEntryValues=pref.getEntryValues();
  Drawable[] allIcons=(pref instanceof IconListPreference) ? ((IconListPreference)pref).getIcons() : null;
  ArrayList<CharSequence> entries=new ArrayList<CharSequence>();
  ArrayList<CharSequence> entryValues=new ArrayList<CharSequence>();
  ArrayList<Drawable> icons=allIcons == null ? null : new ArrayList<Drawable>();
  for (int i=0, len=allEntryValues.length; i < len; i++) {
    if (supported.indexOf(allEntryValues[i].toString()) != NOT_FOUND) {
      entries.add(allEntries[i]);
      entryValues.add(allEntryValues[i]);
      if (allIcons != null)       icons.add(allIcons[i]);
    }
  }
  int size=entries.size();
  pref.setEntries(entries.toArray(new CharSequence[size]));
  pref.setEntryValues(entryValues.toArray(new CharSequence[size]));
  if (allIcons != null) {
    ((IconListPreference)pref).setIcons(icons.toArray(new Drawable[size]));
  }
  String value=pref.getValue();
  if (pref.findIndexOfValue(value) == NOT_FOUND) {
    pref.setValueIndex(0);
  }
}",0.9871645274212368
184413,"private void filterUnsupportedOptions(PreferenceScreen screen,ListPreference pref,List<String> supported){
  CharSequence[] allEntries=pref.getEntries();
  if (supported == null || allEntries.length <= 1) {
    removePreference(screen,pref);
    return;
  }
  CharSequence[] allEntryValues=pref.getEntryValues();
  Drawable[] allIcons=(pref instanceof IconListPreference) ? ((IconListPreference)pref).getIcons() : null;
  ArrayList<CharSequence> entries=new ArrayList<CharSequence>();
  ArrayList<CharSequence> entryValues=new ArrayList<CharSequence>();
  ArrayList<Drawable> icons=allIcons == null ? null : new ArrayList<Drawable>();
  for (int i=0, len=allEntryValues.length; i < len; i++) {
    if (supported.indexOf(allEntryValues[i].toString()) != NOT_FOUND) {
      entries.add(allEntries[i]);
      entryValues.add(allEntryValues[i]);
      if (allIcons != null)       icons.add(allIcons[i]);
    }
  }
  int size=entries.size();
  pref.setEntries(entries.toArray(new CharSequence[size]));
  pref.setEntryValues(entryValues.toArray(new CharSequence[size]));
  if (allIcons != null) {
    ((IconListPreference)pref).setIcons(icons.toArray(new Drawable[size]));
  }
  String value=pref.getValue();
  if (pref.findIndexOfValue(value) == NOT_FOUND) {
    pref.setValueIndex(0);
  }
}","private void filterUnsupportedOptions(PreferenceScreen screen,ListPreference pref,List<String> supported){
  CharSequence[] allEntries=pref.getEntries();
  if (supported == null || supported.size() <= 1) {
    removePreference(screen,pref);
    return;
  }
  CharSequence[] allEntryValues=pref.getEntryValues();
  Drawable[] allIcons=(pref instanceof IconListPreference) ? ((IconListPreference)pref).getIcons() : null;
  ArrayList<CharSequence> entries=new ArrayList<CharSequence>();
  ArrayList<CharSequence> entryValues=new ArrayList<CharSequence>();
  ArrayList<Drawable> icons=allIcons == null ? null : new ArrayList<Drawable>();
  for (int i=0, len=allEntryValues.length; i < len; i++) {
    if (supported.indexOf(allEntryValues[i].toString()) != NOT_FOUND) {
      entries.add(allEntries[i]);
      entryValues.add(allEntryValues[i]);
      if (allIcons != null)       icons.add(allIcons[i]);
    }
  }
  int size=entries.size();
  pref.setEntries(entries.toArray(new CharSequence[size]));
  pref.setEntryValues(entryValues.toArray(new CharSequence[size]));
  if (allIcons != null) {
    ((IconListPreference)pref).setIcons(icons.toArray(new Drawable[size]));
  }
  String value=pref.getValue();
  if (pref.findIndexOfValue(value) == NOT_FOUND) {
    pref.setValueIndex(0);
  }
}",0.9871645274212368
184414,"private void filterUnsupportedOptions(PreferenceScreen screen,ListPreference pref,List<String> supported){
  CharSequence[] allEntries=pref.getEntries();
  if (supported == null || allEntries.length <= 1) {
    removePreference(screen,pref);
    return;
  }
  CharSequence[] allEntryValues=pref.getEntryValues();
  Drawable[] allIcons=(pref instanceof IconListPreference) ? ((IconListPreference)pref).getIcons() : null;
  ArrayList<CharSequence> entries=new ArrayList<CharSequence>();
  ArrayList<CharSequence> entryValues=new ArrayList<CharSequence>();
  ArrayList<Drawable> icons=allIcons == null ? null : new ArrayList<Drawable>();
  for (int i=0, len=allEntryValues.length; i < len; i++) {
    if (supported.indexOf(allEntryValues[i].toString()) != NOT_FOUND) {
      entries.add(allEntries[i]);
      entryValues.add(allEntryValues[i]);
      if (allIcons != null)       icons.add(allIcons[i]);
    }
  }
  int size=entries.size();
  pref.setEntries(entries.toArray(new CharSequence[size]));
  pref.setEntryValues(entryValues.toArray(new CharSequence[size]));
  if (allIcons != null) {
    ((IconListPreference)pref).setIcons(icons.toArray(new Drawable[size]));
  }
  String value=pref.getValue();
  if (pref.findIndexOfValue(value) == NOT_FOUND) {
    pref.setValueIndex(0);
  }
}","private void filterUnsupportedOptions(PreferenceScreen screen,ListPreference pref,List<String> supported){
  CharSequence[] allEntries=pref.getEntries();
  if (supported == null || supported.size() <= 1) {
    removePreference(screen,pref);
    return;
  }
  CharSequence[] allEntryValues=pref.getEntryValues();
  Drawable[] allIcons=(pref instanceof IconListPreference) ? ((IconListPreference)pref).getIcons() : null;
  ArrayList<CharSequence> entries=new ArrayList<CharSequence>();
  ArrayList<CharSequence> entryValues=new ArrayList<CharSequence>();
  ArrayList<Drawable> icons=allIcons == null ? null : new ArrayList<Drawable>();
  for (int i=0, len=allEntryValues.length; i < len; i++) {
    if (supported.indexOf(allEntryValues[i].toString()) != NOT_FOUND) {
      entries.add(allEntries[i]);
      entryValues.add(allEntryValues[i]);
      if (allIcons != null)       icons.add(allIcons[i]);
    }
  }
  int size=entries.size();
  pref.setEntries(entries.toArray(new CharSequence[size]));
  pref.setEntryValues(entryValues.toArray(new CharSequence[size]));
  if (allIcons != null) {
    ((IconListPreference)pref).setIcons(icons.toArray(new Drawable[size]));
  }
  String value=pref.getValue();
  if (pref.findIndexOfValue(value) == NOT_FOUND) {
    pref.setValueIndex(0);
  }
}",0.9871645274212368
184415,"private void updateRecordingTime(){
  if (!mMediaRecorderRecording) {
    return;
  }
  long now=SystemClock.uptimeMillis();
  long delta=now - mRecordingStartTime;
  boolean countdownRemainingTime=(mMaxVideoDurationInMs != 0 && delta >= mMaxVideoDurationInMs - 60000);
  long next_update_delay=1000 - (delta % 1000);
  long seconds;
  if (countdownRemainingTime) {
    delta=Math.max(0,mMaxVideoDurationInMs - delta);
    seconds=(delta + 999) / 1000;
  }
 else {
    seconds=delta / 1000;
  }
  long minutes=seconds / 60;
  long hours=minutes / 60;
  long remainderMinutes=minutes - (hours * 60);
  long remainderSeconds=seconds - (minutes * 60);
  String secondsString=Long.toString(remainderSeconds);
  if (secondsString.length() < 2) {
    secondsString=""String_Node_Str"" + secondsString;
  }
  String minutesString=Long.toString(remainderMinutes);
  if (minutesString.length() < 2) {
    minutesString=""String_Node_Str"" + minutesString;
  }
  String text=minutesString + ""String_Node_Str"" + secondsString;
  if (hours > 0) {
    String hoursString=Long.toString(hours);
    if (hoursString.length() < 2) {
      hoursString=""String_Node_Str"" + hoursString;
    }
    text=hoursString + ""String_Node_Str"" + text;
  }
  mRecordingTimeView.setText(text);
  if (mRecordingTimeCountsDown != countdownRemainingTime) {
    mRecordingTimeCountsDown=countdownRemainingTime;
    int color=getResources().getColor(countdownRemainingTime ? R.color.recording_time_remaining_text : R.color.recording_time_elapsed_text);
    mRecordingTimeView.setTextColor(color);
  }
  mVideoPreview.invalidate();
  if (delta > 0) {
    mHandler.sendEmptyMessageDelayed(UPDATE_RECORD_TIME,next_update_delay);
  }
}","private void updateRecordingTime(){
  if (!mMediaRecorderRecording) {
    return;
  }
  long now=SystemClock.uptimeMillis();
  long delta=now - mRecordingStartTime;
  boolean countdownRemainingTime=(mMaxVideoDurationInMs != 0 && delta >= mMaxVideoDurationInMs - 60000);
  long next_update_delay=1000 - (delta % 1000);
  long seconds;
  if (countdownRemainingTime) {
    delta=Math.max(0,mMaxVideoDurationInMs - delta);
    seconds=(delta + 999) / 1000;
  }
 else {
    seconds=delta / 1000;
  }
  long minutes=seconds / 60;
  long hours=minutes / 60;
  long remainderMinutes=minutes - (hours * 60);
  long remainderSeconds=seconds - (minutes * 60);
  String secondsString=Long.toString(remainderSeconds);
  if (secondsString.length() < 2) {
    secondsString=""String_Node_Str"" + secondsString;
  }
  String minutesString=Long.toString(remainderMinutes);
  if (minutesString.length() < 2) {
    minutesString=""String_Node_Str"" + minutesString;
  }
  String text=minutesString + ""String_Node_Str"" + secondsString;
  if (hours > 0) {
    String hoursString=Long.toString(hours);
    if (hoursString.length() < 2) {
      hoursString=""String_Node_Str"" + hoursString;
    }
    text=hoursString + ""String_Node_Str"" + text;
  }
  mRecordingTimeView.setText(text);
  if (mRecordingTimeCountsDown != countdownRemainingTime) {
    mRecordingTimeCountsDown=countdownRemainingTime;
    int color=getResources().getColor(countdownRemainingTime ? R.color.recording_time_remaining_text : R.color.recording_time_elapsed_text);
    mRecordingTimeView.setTextColor(color);
  }
  mVideoPreview.invalidate();
  mHandler.sendEmptyMessageDelayed(UPDATE_RECORD_TIME,next_update_delay);
}",0.992548435171386
184416,"private void updateRecordingTime(){
  if (!mMediaRecorderRecording) {
    return;
  }
  long now=SystemClock.uptimeMillis();
  long delta=now - mRecordingStartTime;
  boolean countdownRemainingTime=(mMaxVideoDurationInMs != 0 && delta >= mMaxVideoDurationInMs - 60000);
  long next_update_delay=1000 - (delta % 1000);
  long seconds;
  if (countdownRemainingTime) {
    delta=Math.max(0,mMaxVideoDurationInMs - delta);
    seconds=(delta + 999) / 1000;
  }
 else {
    seconds=delta / 1000;
  }
  long minutes=seconds / 60;
  long hours=minutes / 60;
  long remainderMinutes=minutes - (hours * 60);
  long remainderSeconds=seconds - (minutes * 60);
  String secondsString=Long.toString(remainderSeconds);
  if (secondsString.length() < 2) {
    secondsString=""String_Node_Str"" + secondsString;
  }
  String minutesString=Long.toString(remainderMinutes);
  if (minutesString.length() < 2) {
    minutesString=""String_Node_Str"" + minutesString;
  }
  String text=minutesString + ""String_Node_Str"" + secondsString;
  if (hours > 0) {
    String hoursString=Long.toString(hours);
    if (hoursString.length() < 2) {
      hoursString=""String_Node_Str"" + hoursString;
    }
    text=hoursString + ""String_Node_Str"" + text;
  }
  mRecordingTimeView.setText(text);
  if (mRecordingTimeCountsDown != countdownRemainingTime) {
    mRecordingTimeCountsDown=countdownRemainingTime;
    int color=getResources().getColor(countdownRemainingTime ? R.color.recording_time_remaining_text : R.color.recording_time_elapsed_text);
    mRecordingTimeView.setTextColor(color);
  }
  mVideoPreview.invalidate();
  if (delta > 0) {
    mHandler.sendEmptyMessageDelayed(UPDATE_RECORD_TIME,next_update_delay);
  }
}","private void updateRecordingTime(){
  if (!mMediaRecorderRecording) {
    return;
  }
  long now=SystemClock.uptimeMillis();
  long delta=now - mRecordingStartTime;
  boolean countdownRemainingTime=(mMaxVideoDurationInMs != 0 && delta >= mMaxVideoDurationInMs - 60000);
  long next_update_delay=1000 - (delta % 1000);
  long seconds;
  if (countdownRemainingTime) {
    delta=Math.max(0,mMaxVideoDurationInMs - delta);
    seconds=(delta + 999) / 1000;
  }
 else {
    seconds=delta / 1000;
  }
  long minutes=seconds / 60;
  long hours=minutes / 60;
  long remainderMinutes=minutes - (hours * 60);
  long remainderSeconds=seconds - (minutes * 60);
  String secondsString=Long.toString(remainderSeconds);
  if (secondsString.length() < 2) {
    secondsString=""String_Node_Str"" + secondsString;
  }
  String minutesString=Long.toString(remainderMinutes);
  if (minutesString.length() < 2) {
    minutesString=""String_Node_Str"" + minutesString;
  }
  String text=minutesString + ""String_Node_Str"" + secondsString;
  if (hours > 0) {
    String hoursString=Long.toString(hours);
    if (hoursString.length() < 2) {
      hoursString=""String_Node_Str"" + hoursString;
    }
    text=hoursString + ""String_Node_Str"" + text;
  }
  mRecordingTimeView.setText(text);
  if (mRecordingTimeCountsDown != countdownRemainingTime) {
    mRecordingTimeCountsDown=countdownRemainingTime;
    int color=getResources().getColor(countdownRemainingTime ? R.color.recording_time_remaining_text : R.color.recording_time_elapsed_text);
    mRecordingTimeView.setTextColor(color);
  }
  mVideoPreview.invalidate();
  mHandler.sendEmptyMessageDelayed(UPDATE_RECORD_TIME,next_update_delay);
}",0.992548435171386
184417,"private Size getOptimalPreviewSize(List<Size> sizes,double targetRatio){
  final double ASPECT_TOLERANCE=0.05;
  if (sizes == null)   return null;
  Size optimalSize=null;
  double minDiff=Double.MAX_VALUE;
  int targetHeight=mSurfaceView.getHeight();
  if (targetHeight <= 0) {
    WindowManager windowManager=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
    targetHeight=windowManager.getDefaultDisplay().getHeight();
  }
  for (  Size size : sizes) {
    double ratio=(double)size.width / size.height;
    if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE)     continue;
    if (Math.abs(size.height - targetHeight) < minDiff) {
      optimalSize=size;
      minDiff=Math.abs(size.height - targetHeight);
    }
  }
  if (optimalSize == null) {
    Log.v(TAG,""String_Node_Str"");
    minDiff=Double.MAX_VALUE;
    for (    Size size : sizes) {
      if (Math.abs(size.height - targetHeight) < minDiff) {
        optimalSize=size;
        minDiff=Math.abs(size.height - targetHeight);
      }
    }
  }
  Log.v(TAG,String.format(""String_Node_Str"",optimalSize.width,optimalSize.height));
  return optimalSize;
}","private Size getOptimalPreviewSize(List<Size> sizes,double targetRatio){
  final double ASPECT_TOLERANCE=0.05;
  if (sizes == null)   return null;
  Size optimalSize=null;
  double minDiff=Double.MAX_VALUE;
  Display display=getWindowManager().getDefaultDisplay();
  int targetHeight=Math.min(display.getHeight(),display.getWidth());
  if (targetHeight <= 0) {
    WindowManager windowManager=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
    targetHeight=windowManager.getDefaultDisplay().getHeight();
  }
  for (  Size size : sizes) {
    double ratio=(double)size.width / size.height;
    if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE)     continue;
    if (Math.abs(size.height - targetHeight) < minDiff) {
      optimalSize=size;
      minDiff=Math.abs(size.height - targetHeight);
    }
  }
  if (optimalSize == null) {
    Log.v(TAG,""String_Node_Str"");
    minDiff=Double.MAX_VALUE;
    for (    Size size : sizes) {
      if (Math.abs(size.height - targetHeight) < minDiff) {
        optimalSize=size;
        minDiff=Math.abs(size.height - targetHeight);
      }
    }
  }
  Log.v(TAG,String.format(""String_Node_Str"",optimalSize.width,optimalSize.height));
  return optimalSize;
}",0.9545454545454546
184418,"private Size getOptimalPreviewSize(List<Size> sizes,double targetRatio){
  final double ASPECT_TOLERANCE=0.05;
  if (sizes == null)   return null;
  Size optimalSize=null;
  double minDiff=Double.MAX_VALUE;
  int targetHeight=mSurfaceView.getHeight();
  if (targetHeight <= 0) {
    WindowManager windowManager=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
    targetHeight=windowManager.getDefaultDisplay().getHeight();
  }
  for (  Size size : sizes) {
    double ratio=(double)size.width / size.height;
    if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE)     continue;
    if (Math.abs(size.height - targetHeight) < minDiff) {
      optimalSize=size;
      minDiff=Math.abs(size.height - targetHeight);
    }
  }
  if (optimalSize == null) {
    Log.v(TAG,""String_Node_Str"");
    minDiff=Double.MAX_VALUE;
    for (    Size size : sizes) {
      if (Math.abs(size.height - targetHeight) < minDiff) {
        optimalSize=size;
        minDiff=Math.abs(size.height - targetHeight);
      }
    }
  }
  Log.v(TAG,String.format(""String_Node_Str"",optimalSize.width,optimalSize.height));
  return optimalSize;
}","private Size getOptimalPreviewSize(List<Size> sizes,double targetRatio){
  final double ASPECT_TOLERANCE=0.05;
  if (sizes == null)   return null;
  Size optimalSize=null;
  double minDiff=Double.MAX_VALUE;
  Display display=getWindowManager().getDefaultDisplay();
  int targetHeight=Math.min(display.getHeight(),display.getWidth());
  if (targetHeight <= 0) {
    WindowManager windowManager=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
    targetHeight=windowManager.getDefaultDisplay().getHeight();
  }
  for (  Size size : sizes) {
    double ratio=(double)size.width / size.height;
    if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE)     continue;
    if (Math.abs(size.height - targetHeight) < minDiff) {
      optimalSize=size;
      minDiff=Math.abs(size.height - targetHeight);
    }
  }
  if (optimalSize == null) {
    Log.v(TAG,""String_Node_Str"");
    minDiff=Double.MAX_VALUE;
    for (    Size size : sizes) {
      if (Math.abs(size.height - targetHeight) < minDiff) {
        optimalSize=size;
        minDiff=Math.abs(size.height - targetHeight);
      }
    }
  }
  Log.v(TAG,String.format(""String_Node_Str"",optimalSize.width,optimalSize.height));
  return optimalSize;
}",0.9545454545454546
184419,"private void updateRecordingTime(){
  if (!mMediaRecorderRecording) {
    return;
  }
  long now=SystemClock.uptimeMillis();
  long delta=now - mRecordingStartTime;
  boolean countdownRemainingTime=(mMaxVideoDurationInMs != 0 && delta >= mMaxVideoDurationInMs - 60000);
  long next_update_delay=1000 - (delta % 1000);
  long seconds;
  if (countdownRemainingTime) {
    delta=Math.max(0,mMaxVideoDurationInMs - delta);
    seconds=(delta + 999) / 1000;
  }
 else {
    seconds=delta / 1000;
  }
  long minutes=seconds / 60;
  long hours=minutes / 60;
  long remainderMinutes=minutes - (hours * 60);
  long remainderSeconds=seconds - (minutes * 60);
  String secondsString=Long.toString(remainderSeconds);
  if (secondsString.length() < 2) {
    secondsString=""String_Node_Str"" + secondsString;
  }
  String minutesString=Long.toString(remainderMinutes);
  if (minutesString.length() < 2) {
    minutesString=""String_Node_Str"" + minutesString;
  }
  String text=minutesString + ""String_Node_Str"" + secondsString;
  if (hours > 0) {
    String hoursString=Long.toString(hours);
    if (hoursString.length() < 2) {
      hoursString=""String_Node_Str"" + hoursString;
    }
    text=hoursString + ""String_Node_Str"" + text;
  }
  mRecordingTimeView.setText(text);
  if (mRecordingTimeCountsDown != countdownRemainingTime) {
    mRecordingTimeCountsDown=countdownRemainingTime;
    int color=getResources().getColor(countdownRemainingTime ? R.color.recording_time_remaining_text : R.color.recording_time_elapsed_text);
    mRecordingTimeView.setTextColor(color);
  }
  mVideoPreview.invalidate();
  if (delta > 0) {
    mHandler.sendEmptyMessageDelayed(UPDATE_RECORD_TIME,next_update_delay);
  }
}","private void updateRecordingTime(){
  if (!mMediaRecorderRecording) {
    return;
  }
  long now=SystemClock.uptimeMillis();
  long delta=now - mRecordingStartTime;
  boolean countdownRemainingTime=(mMaxVideoDurationInMs != 0 && delta >= mMaxVideoDurationInMs - 60000);
  long next_update_delay=1000 - (delta % 1000);
  long seconds;
  if (countdownRemainingTime) {
    delta=Math.max(0,mMaxVideoDurationInMs - delta);
    seconds=(delta + 999) / 1000;
  }
 else {
    seconds=delta / 1000;
  }
  long minutes=seconds / 60;
  long hours=minutes / 60;
  long remainderMinutes=minutes - (hours * 60);
  long remainderSeconds=seconds - (minutes * 60);
  String secondsString=Long.toString(remainderSeconds);
  if (secondsString.length() < 2) {
    secondsString=""String_Node_Str"" + secondsString;
  }
  String minutesString=Long.toString(remainderMinutes);
  if (minutesString.length() < 2) {
    minutesString=""String_Node_Str"" + minutesString;
  }
  String text=minutesString + ""String_Node_Str"" + secondsString;
  if (hours > 0) {
    String hoursString=Long.toString(hours);
    if (hoursString.length() < 2) {
      hoursString=""String_Node_Str"" + hoursString;
    }
    text=hoursString + ""String_Node_Str"" + text;
  }
  mRecordingTimeView.setText(text);
  if (mRecordingTimeCountsDown != countdownRemainingTime) {
    mRecordingTimeCountsDown=countdownRemainingTime;
    int color=getResources().getColor(countdownRemainingTime ? R.color.recording_time_remaining_text : R.color.recording_time_elapsed_text);
    mRecordingTimeView.setTextColor(color);
  }
  mVideoPreview.invalidate();
  mHandler.sendEmptyMessageDelayed(UPDATE_RECORD_TIME,next_update_delay);
}",0.992548435171386
184420,"private void updateRecordingTime(){
  if (!mMediaRecorderRecording) {
    return;
  }
  long now=SystemClock.uptimeMillis();
  long delta=now - mRecordingStartTime;
  boolean countdownRemainingTime=(mMaxVideoDurationInMs != 0 && delta >= mMaxVideoDurationInMs - 60000);
  long next_update_delay=1000 - (delta % 1000);
  long seconds;
  if (countdownRemainingTime) {
    delta=Math.max(0,mMaxVideoDurationInMs - delta);
    seconds=(delta + 999) / 1000;
  }
 else {
    seconds=delta / 1000;
  }
  long minutes=seconds / 60;
  long hours=minutes / 60;
  long remainderMinutes=minutes - (hours * 60);
  long remainderSeconds=seconds - (minutes * 60);
  String secondsString=Long.toString(remainderSeconds);
  if (secondsString.length() < 2) {
    secondsString=""String_Node_Str"" + secondsString;
  }
  String minutesString=Long.toString(remainderMinutes);
  if (minutesString.length() < 2) {
    minutesString=""String_Node_Str"" + minutesString;
  }
  String text=minutesString + ""String_Node_Str"" + secondsString;
  if (hours > 0) {
    String hoursString=Long.toString(hours);
    if (hoursString.length() < 2) {
      hoursString=""String_Node_Str"" + hoursString;
    }
    text=hoursString + ""String_Node_Str"" + text;
  }
  mRecordingTimeView.setText(text);
  if (mRecordingTimeCountsDown != countdownRemainingTime) {
    mRecordingTimeCountsDown=countdownRemainingTime;
    int color=getResources().getColor(countdownRemainingTime ? R.color.recording_time_remaining_text : R.color.recording_time_elapsed_text);
    mRecordingTimeView.setTextColor(color);
  }
  mVideoPreview.invalidate();
  if (delta > 0) {
    mHandler.sendEmptyMessageDelayed(UPDATE_RECORD_TIME,next_update_delay);
  }
}","private void updateRecordingTime(){
  if (!mMediaRecorderRecording) {
    return;
  }
  long now=SystemClock.uptimeMillis();
  long delta=now - mRecordingStartTime;
  boolean countdownRemainingTime=(mMaxVideoDurationInMs != 0 && delta >= mMaxVideoDurationInMs - 60000);
  long next_update_delay=1000 - (delta % 1000);
  long seconds;
  if (countdownRemainingTime) {
    delta=Math.max(0,mMaxVideoDurationInMs - delta);
    seconds=(delta + 999) / 1000;
  }
 else {
    seconds=delta / 1000;
  }
  long minutes=seconds / 60;
  long hours=minutes / 60;
  long remainderMinutes=minutes - (hours * 60);
  long remainderSeconds=seconds - (minutes * 60);
  String secondsString=Long.toString(remainderSeconds);
  if (secondsString.length() < 2) {
    secondsString=""String_Node_Str"" + secondsString;
  }
  String minutesString=Long.toString(remainderMinutes);
  if (minutesString.length() < 2) {
    minutesString=""String_Node_Str"" + minutesString;
  }
  String text=minutesString + ""String_Node_Str"" + secondsString;
  if (hours > 0) {
    String hoursString=Long.toString(hours);
    if (hoursString.length() < 2) {
      hoursString=""String_Node_Str"" + hoursString;
    }
    text=hoursString + ""String_Node_Str"" + text;
  }
  mRecordingTimeView.setText(text);
  if (mRecordingTimeCountsDown != countdownRemainingTime) {
    mRecordingTimeCountsDown=countdownRemainingTime;
    int color=getResources().getColor(countdownRemainingTime ? R.color.recording_time_remaining_text : R.color.recording_time_elapsed_text);
    mRecordingTimeView.setTextColor(color);
  }
  mVideoPreview.invalidate();
  mHandler.sendEmptyMessageDelayed(UPDATE_RECORD_TIME,next_update_delay);
}",0.992548435171386
184421,"private Size getOptimalPreviewSize(List<Size> sizes,double targetRatio){
  final double ASPECT_TOLERANCE=0.05;
  if (sizes == null)   return null;
  Size optimalSize=null;
  double minDiff=Double.MAX_VALUE;
  int targetHeight=mSurfaceView.getHeight();
  if (targetHeight <= 0) {
    WindowManager windowManager=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
    targetHeight=windowManager.getDefaultDisplay().getHeight();
  }
  for (  Size size : sizes) {
    double ratio=(double)size.width / size.height;
    if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE)     continue;
    if (Math.abs(size.height - targetHeight) < minDiff) {
      optimalSize=size;
      minDiff=Math.abs(size.height - targetHeight);
    }
  }
  if (optimalSize == null) {
    Log.v(TAG,""String_Node_Str"");
    minDiff=Double.MAX_VALUE;
    for (    Size size : sizes) {
      if (Math.abs(size.height - targetHeight) < minDiff) {
        optimalSize=size;
        minDiff=Math.abs(size.height - targetHeight);
      }
    }
  }
  Log.v(TAG,String.format(""String_Node_Str"",optimalSize.width,optimalSize.height));
  return optimalSize;
}","private Size getOptimalPreviewSize(List<Size> sizes,double targetRatio){
  final double ASPECT_TOLERANCE=0.05;
  if (sizes == null)   return null;
  Size optimalSize=null;
  double minDiff=Double.MAX_VALUE;
  Display display=getWindowManager().getDefaultDisplay();
  int targetHeight=Math.min(display.getHeight(),display.getWidth());
  if (targetHeight <= 0) {
    WindowManager windowManager=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
    targetHeight=windowManager.getDefaultDisplay().getHeight();
  }
  for (  Size size : sizes) {
    double ratio=(double)size.width / size.height;
    if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE)     continue;
    if (Math.abs(size.height - targetHeight) < minDiff) {
      optimalSize=size;
      minDiff=Math.abs(size.height - targetHeight);
    }
  }
  if (optimalSize == null) {
    Log.v(TAG,""String_Node_Str"");
    minDiff=Double.MAX_VALUE;
    for (    Size size : sizes) {
      if (Math.abs(size.height - targetHeight) < minDiff) {
        optimalSize=size;
        minDiff=Math.abs(size.height - targetHeight);
      }
    }
  }
  Log.v(TAG,String.format(""String_Node_Str"",optimalSize.width,optimalSize.height));
  return optimalSize;
}",0.9545454545454546
184422,"private void updateRecordingTime(){
  if (!mMediaRecorderRecording) {
    return;
  }
  long now=SystemClock.uptimeMillis();
  long delta=now - mRecordingStartTime;
  boolean countdownRemainingTime=(mMaxVideoDurationInMs != 0 && delta >= mMaxVideoDurationInMs - 60000);
  long next_update_delay=1000 - (delta % 1000);
  long seconds;
  if (countdownRemainingTime) {
    delta=Math.max(0,mMaxVideoDurationInMs - delta);
    seconds=(delta + 999) / 1000;
  }
 else {
    seconds=delta / 1000;
  }
  long minutes=seconds / 60;
  long hours=minutes / 60;
  long remainderMinutes=minutes - (hours * 60);
  long remainderSeconds=seconds - (minutes * 60);
  String secondsString=Long.toString(remainderSeconds);
  if (secondsString.length() < 2) {
    secondsString=""String_Node_Str"" + secondsString;
  }
  String minutesString=Long.toString(remainderMinutes);
  if (minutesString.length() < 2) {
    minutesString=""String_Node_Str"" + minutesString;
  }
  String text=minutesString + ""String_Node_Str"" + secondsString;
  if (hours > 0) {
    String hoursString=Long.toString(hours);
    if (hoursString.length() < 2) {
      hoursString=""String_Node_Str"" + hoursString;
    }
    text=hoursString + ""String_Node_Str"" + text;
  }
  mRecordingTimeView.setText(text);
  if (mRecordingTimeCountsDown != countdownRemainingTime) {
    mRecordingTimeCountsDown=countdownRemainingTime;
    int color=getResources().getColor(countdownRemainingTime ? R.color.recording_time_remaining_text : R.color.recording_time_elapsed_text);
    mRecordingTimeView.setTextColor(color);
  }
  mVideoPreview.invalidate();
  if (delta > 0) {
    mHandler.sendEmptyMessageDelayed(UPDATE_RECORD_TIME,next_update_delay);
  }
}","private void updateRecordingTime(){
  if (!mMediaRecorderRecording) {
    return;
  }
  long now=SystemClock.uptimeMillis();
  long delta=now - mRecordingStartTime;
  boolean countdownRemainingTime=(mMaxVideoDurationInMs != 0 && delta >= mMaxVideoDurationInMs - 60000);
  long next_update_delay=1000 - (delta % 1000);
  long seconds;
  if (countdownRemainingTime) {
    delta=Math.max(0,mMaxVideoDurationInMs - delta);
    seconds=(delta + 999) / 1000;
  }
 else {
    seconds=delta / 1000;
  }
  long minutes=seconds / 60;
  long hours=minutes / 60;
  long remainderMinutes=minutes - (hours * 60);
  long remainderSeconds=seconds - (minutes * 60);
  String secondsString=Long.toString(remainderSeconds);
  if (secondsString.length() < 2) {
    secondsString=""String_Node_Str"" + secondsString;
  }
  String minutesString=Long.toString(remainderMinutes);
  if (minutesString.length() < 2) {
    minutesString=""String_Node_Str"" + minutesString;
  }
  String text=minutesString + ""String_Node_Str"" + secondsString;
  if (hours > 0) {
    String hoursString=Long.toString(hours);
    if (hoursString.length() < 2) {
      hoursString=""String_Node_Str"" + hoursString;
    }
    text=hoursString + ""String_Node_Str"" + text;
  }
  mRecordingTimeView.setText(text);
  if (mRecordingTimeCountsDown != countdownRemainingTime) {
    mRecordingTimeCountsDown=countdownRemainingTime;
    int color=getResources().getColor(countdownRemainingTime ? R.color.recording_time_remaining_text : R.color.recording_time_elapsed_text);
    mRecordingTimeView.setTextColor(color);
  }
  mVideoPreview.invalidate();
  mHandler.sendEmptyMessageDelayed(UPDATE_RECORD_TIME,next_update_delay);
}",0.992548435171386
184423,"private Size getOptimalPreviewSize(List<Size> sizes,double targetRatio){
  final double ASPECT_TOLERANCE=0.05;
  if (sizes == null)   return null;
  Size optimalSize=null;
  double minDiff=Double.MAX_VALUE;
  int targetHeight=mSurfaceView.getHeight();
  if (targetHeight <= 0) {
    WindowManager windowManager=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
    targetHeight=windowManager.getDefaultDisplay().getHeight();
  }
  for (  Size size : sizes) {
    double ratio=(double)size.width / size.height;
    if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE)     continue;
    if (Math.abs(size.height - targetHeight) < minDiff) {
      optimalSize=size;
      minDiff=Math.abs(size.height - targetHeight);
    }
  }
  if (optimalSize == null) {
    Log.v(TAG,""String_Node_Str"");
    minDiff=Double.MAX_VALUE;
    for (    Size size : sizes) {
      if (Math.abs(size.height - targetHeight) < minDiff) {
        optimalSize=size;
        minDiff=Math.abs(size.height - targetHeight);
      }
    }
  }
  Log.v(TAG,String.format(""String_Node_Str"",optimalSize.width,optimalSize.height));
  return optimalSize;
}","private Size getOptimalPreviewSize(List<Size> sizes,double targetRatio){
  final double ASPECT_TOLERANCE=0.05;
  if (sizes == null)   return null;
  Size optimalSize=null;
  double minDiff=Double.MAX_VALUE;
  Display display=getWindowManager().getDefaultDisplay();
  int targetHeight=Math.min(display.getHeight(),display.getWidth());
  if (targetHeight <= 0) {
    WindowManager windowManager=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
    targetHeight=windowManager.getDefaultDisplay().getHeight();
  }
  for (  Size size : sizes) {
    double ratio=(double)size.width / size.height;
    if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE)     continue;
    if (Math.abs(size.height - targetHeight) < minDiff) {
      optimalSize=size;
      minDiff=Math.abs(size.height - targetHeight);
    }
  }
  if (optimalSize == null) {
    Log.v(TAG,""String_Node_Str"");
    minDiff=Double.MAX_VALUE;
    for (    Size size : sizes) {
      if (Math.abs(size.height - targetHeight) < minDiff) {
        optimalSize=size;
        minDiff=Math.abs(size.height - targetHeight);
      }
    }
  }
  Log.v(TAG,String.format(""String_Node_Str"",optimalSize.width,optimalSize.height));
  return optimalSize;
}",0.9545454545454546
184424,"private void setCameraParameters(){
  mParameters=mCameraDevice.getParameters();
  List<Integer> frameRates=mParameters.getSupportedPreviewFrameRates();
  if (frameRates != null) {
    Integer max=Collections.max(frameRates);
    mParameters.setPreviewFrameRate(max);
  }
  String pictureSize=mPreferences.getString(CameraSettings.KEY_PICTURE_SIZE,null);
  if (pictureSize == null) {
    CameraSettings.initialCameraPictureSize(this,mParameters);
  }
 else {
    List<Size> supported=mParameters.getSupportedPictureSizes();
    CameraSettings.setCameraPictureSize(pictureSize,supported,mParameters);
  }
  Size size=mParameters.getPictureSize();
  PreviewFrameLayout frameLayout=(PreviewFrameLayout)findViewById(R.id.frame_layout);
  frameLayout.setAspectRatio((double)size.width / size.height);
  List<Size> sizes=mParameters.getSupportedPreviewSizes();
  Size optimalSize=getOptimalPreviewSize(sizes,(double)size.width / size.height);
  if (optimalSize != null) {
    mParameters.setPreviewSize(optimalSize.width,optimalSize.height);
  }
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,getString(R.string.pref_camera_jpegquality_default));
  mParameters.setJpegQuality(Integer.parseInt(jpegQuality));
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,getString(R.string.pref_camera_coloreffect_default));
  if (isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String sceneMode=mPreferences.getString(CameraSettings.KEY_SCENE_MODE,getString(R.string.pref_camera_scenemode_default));
  if (isSupported(sceneMode,mParameters.getSupportedSceneModes())) {
    mParameters.setSceneMode(sceneMode);
  }
 else {
    sceneMode=mParameters.getSceneMode();
    if (sceneMode == null) {
      sceneMode=Parameters.SCENE_MODE_AUTO;
    }
  }
  String flashMode;
  String whiteBalance;
  if (!Parameters.SCENE_MODE_AUTO.equals(sceneMode)) {
    mCameraDevice.setParameters(mParameters);
    mParameters=mCameraDevice.getParameters();
    flashMode=mParameters.getFlashMode();
    whiteBalance=mParameters.getWhiteBalance();
    mFocusMode=mParameters.getFocusMode();
    if (mSettings != null) {
      mSettings.overrideSettings(CameraSettings.KEY_FLASH_MODE,flashMode);
      mSettings.overrideSettings(CameraSettings.KEY_WHITE_BALANCE,whiteBalance);
      mSettings.overrideSettings(CameraSettings.KEY_FOCUS_MODE,mFocusMode);
    }
  }
 else {
    if (mSettings != null) {
      mSettings.overrideSettings(CameraSettings.KEY_FLASH_MODE,null);
      mSettings.overrideSettings(CameraSettings.KEY_FOCUS_MODE,null);
      mSettings.overrideSettings(CameraSettings.KEY_WHITE_BALANCE,null);
    }
    flashMode=mPreferences.getString(CameraSettings.KEY_FLASH_MODE,getString(R.string.pref_camera_flashmode_default));
    List<String> supportedFlash=mParameters.getSupportedFlashModes();
    if (isSupported(flashMode,supportedFlash)) {
      mParameters.setFlashMode(flashMode);
    }
 else {
      flashMode=mParameters.getFlashMode();
      if (flashMode == null) {
        flashMode=Parameters.FLASH_MODE_OFF;
      }
    }
    whiteBalance=mPreferences.getString(CameraSettings.KEY_WHITE_BALANCE,getString(R.string.pref_camera_whitebalance_default));
    if (isSupported(whiteBalance,mParameters.getSupportedWhiteBalance())) {
      mParameters.setWhiteBalance(whiteBalance);
    }
 else {
      whiteBalance=mParameters.getWhiteBalance();
      if (whiteBalance == null) {
        whiteBalance=Parameters.WHITE_BALANCE_AUTO;
      }
    }
    mFocusMode=mPreferences.getString(CameraSettings.KEY_FOCUS_MODE,getString(R.string.pref_camera_focusmode_default));
    if (isSupported(mFocusMode,mParameters.getSupportedFocusModes())) {
      mParameters.setFocusMode(mFocusMode);
    }
 else {
      mFocusMode=mParameters.getFocusMode();
      if (mFocusMode == null) {
        mFocusMode=Parameters.FOCUS_MODE_AUTO;
      }
    }
    mCameraDevice.setParameters(mParameters);
    if (!mScreenComplete && mSettings != null) {
      mScreenComplete=true;
      mParameters=mCameraDevice.getParameters();
      CameraSettings helper=new CameraSettings(this,mParameters);
      mSettings.setPreferenceScreen(helper.getPreferenceScreen(R.xml.camera_preferences));
    }
  }
  final String finalWhiteBalance=whiteBalance;
  final String finalFlashMode=flashMode;
  final String finalSceneMode=Parameters.SCENE_MODE_AUTO.equals(sceneMode) ? SCENE_MODE_OFF : SCENE_MODE_ON;
  mHandler.post(new Runnable(){
    public void run(){
      mFocusIndicator.setMode(mFocusMode);
      mWhitebalanceIndicator.setMode(finalWhiteBalance);
      mSceneModeIndicator.setMode(finalSceneMode);
      mFlashIndicator.setMode(finalFlashMode);
    }
  }
);
}","private void setCameraParameters(){
  mParameters=mCameraDevice.getParameters();
  List<Integer> frameRates=mParameters.getSupportedPreviewFrameRates();
  if (frameRates != null) {
    Integer max=Collections.max(frameRates);
    mParameters.setPreviewFrameRate(max);
  }
  String pictureSize=mPreferences.getString(CameraSettings.KEY_PICTURE_SIZE,null);
  if (pictureSize == null) {
    CameraSettings.initialCameraPictureSize(this,mParameters);
  }
 else {
    List<Size> supported=mParameters.getSupportedPictureSizes();
    CameraSettings.setCameraPictureSize(pictureSize,supported,mParameters);
  }
  Size size=mParameters.getPictureSize();
  PreviewFrameLayout frameLayout=(PreviewFrameLayout)findViewById(R.id.frame_layout);
  frameLayout.setAspectRatio((double)size.width / size.height);
  List<Size> sizes=mParameters.getSupportedPreviewSizes();
  Size optimalSize=getOptimalPreviewSize(sizes,(double)size.width / size.height);
  if (optimalSize != null) {
    mParameters.setPreviewSize(optimalSize.width,optimalSize.height);
  }
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,getString(R.string.pref_camera_jpegquality_default));
  mParameters.setJpegQuality(Integer.parseInt(jpegQuality));
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,getString(R.string.pref_camera_coloreffect_default));
  if (isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String sceneMode=mPreferences.getString(CameraSettings.KEY_SCENE_MODE,getString(R.string.pref_camera_scenemode_default));
  if (isSupported(sceneMode,mParameters.getSupportedSceneModes())) {
    mParameters.setSceneMode(sceneMode);
  }
 else {
    sceneMode=mParameters.getSceneMode();
    if (sceneMode == null) {
      sceneMode=Parameters.SCENE_MODE_AUTO;
    }
  }
  String flashMode;
  String whiteBalance;
  if (!Parameters.SCENE_MODE_AUTO.equals(sceneMode)) {
    mCameraDevice.setParameters(mParameters);
    mParameters=mCameraDevice.getParameters();
    flashMode=mParameters.getFlashMode();
    whiteBalance=mParameters.getWhiteBalance();
    mFocusMode=mParameters.getFocusMode();
    if (mSettings != null) {
      mSettings.overrideSettings(CameraSettings.KEY_FLASH_MODE,flashMode);
      mSettings.overrideSettings(CameraSettings.KEY_WHITE_BALANCE,whiteBalance);
      mSettings.overrideSettings(CameraSettings.KEY_FOCUS_MODE,mFocusMode);
    }
  }
 else {
    if (mSettings != null) {
      mSettings.overrideSettings(CameraSettings.KEY_FLASH_MODE,null);
      mSettings.overrideSettings(CameraSettings.KEY_FOCUS_MODE,null);
      mSettings.overrideSettings(CameraSettings.KEY_WHITE_BALANCE,null);
    }
    flashMode=mPreferences.getString(CameraSettings.KEY_FLASH_MODE,getString(R.string.pref_camera_flashmode_default));
    List<String> supportedFlash=mParameters.getSupportedFlashModes();
    if (isSupported(flashMode,supportedFlash)) {
      mParameters.setFlashMode(flashMode);
    }
 else {
      flashMode=mParameters.getFlashMode();
      if (flashMode == null) {
        flashMode=Parameters.FLASH_MODE_OFF;
      }
    }
    whiteBalance=mPreferences.getString(CameraSettings.KEY_WHITE_BALANCE,getString(R.string.pref_camera_whitebalance_default));
    if (isSupported(whiteBalance,mParameters.getSupportedWhiteBalance())) {
      mParameters.setWhiteBalance(whiteBalance);
    }
 else {
      whiteBalance=mParameters.getWhiteBalance();
      if (whiteBalance == null) {
        whiteBalance=Parameters.WHITE_BALANCE_AUTO;
      }
    }
    mFocusMode=mPreferences.getString(CameraSettings.KEY_FOCUS_MODE,getString(R.string.pref_camera_focusmode_default));
    if (isSupported(mFocusMode,mParameters.getSupportedFocusModes())) {
      mParameters.setFocusMode(mFocusMode);
    }
 else {
      mFocusMode=mParameters.getFocusMode();
      if (mFocusMode == null) {
        mFocusMode=Parameters.FOCUS_MODE_AUTO;
      }
    }
    mCameraDevice.setParameters(mParameters);
  }
  final String finalWhiteBalance=whiteBalance;
  final String finalFlashMode=flashMode;
  final String finalSceneMode=Parameters.SCENE_MODE_AUTO.equals(sceneMode) ? SCENE_MODE_OFF : SCENE_MODE_ON;
  mHandler.post(new Runnable(){
    public void run(){
      mFocusIndicator.setMode(mFocusMode);
      mWhitebalanceIndicator.setMode(finalWhiteBalance);
      mSceneModeIndicator.setMode(finalSceneMode);
      mFlashIndicator.setMode(finalFlashMode);
    }
  }
);
}",0.9685698749320284
184425,"private void showOnScreenSettings(){
  if (mSettings == null) {
    mSettings=new OnScreenSettings(findViewById(R.id.camera_preview));
    CameraSettings helper=new CameraSettings(this,mParameters);
    mSettings.setPreferenceScreen(helper.getPreferenceScreen(R.xml.camera_preferences));
    mSettings.setOnVisibilityChangedListener(this);
    String sceneMode=mParameters.getSceneMode();
    boolean autoSceneMode=sceneMode == null || Parameters.SCENE_MODE_AUTO.equals(sceneMode);
    mScreenComplete=autoSceneMode;
    if (autoSceneMode) {
      mSettings.overrideSettings(CameraSettings.KEY_FLASH_MODE,null);
      mSettings.overrideSettings(CameraSettings.KEY_FOCUS_MODE,null);
      mSettings.overrideSettings(CameraSettings.KEY_WHITE_BALANCE,null);
    }
 else {
      mSettings.overrideSettings(CameraSettings.KEY_FLASH_MODE,mParameters.getFlashMode());
      mSettings.overrideSettings(CameraSettings.KEY_FOCUS_MODE,mParameters.getFocusMode());
      mSettings.overrideSettings(CameraSettings.KEY_WHITE_BALANCE,mParameters.getWhiteBalance());
    }
  }
  mSettings.setVisible(true);
}","private void showOnScreenSettings(){
  if (mSettings == null) {
    mSettings=new OnScreenSettings(findViewById(R.id.camera_preview));
    CameraSettings helper=new CameraSettings(this,mInitialParameters);
    mSettings.setPreferenceScreen(helper.getPreferenceScreen(R.xml.camera_preferences));
    mSettings.setOnVisibilityChangedListener(this);
    String sceneMode=mParameters.getSceneMode();
    if (sceneMode == null || Parameters.SCENE_MODE_AUTO.equals(sceneMode)) {
      mSettings.overrideSettings(CameraSettings.KEY_FLASH_MODE,null);
      mSettings.overrideSettings(CameraSettings.KEY_FOCUS_MODE,null);
      mSettings.overrideSettings(CameraSettings.KEY_WHITE_BALANCE,null);
    }
 else {
      mSettings.overrideSettings(CameraSettings.KEY_FLASH_MODE,mParameters.getFlashMode());
      mSettings.overrideSettings(CameraSettings.KEY_FOCUS_MODE,mParameters.getFocusMode());
      mSettings.overrideSettings(CameraSettings.KEY_WHITE_BALANCE,mParameters.getWhiteBalance());
    }
  }
  mSettings.setVisible(true);
}",0.9569739952718676
184426,"private void ensureCameraDevice() throws CameraHardwareException {
  if (mCameraDevice == null) {
    mCameraDevice=CameraHolder.instance().open();
  }
}","private void ensureCameraDevice() throws CameraHardwareException {
  if (mCameraDevice == null) {
    mCameraDevice=CameraHolder.instance().open();
    mInitialParameters=mCameraDevice.getParameters();
  }
}",0.85
184427,"private void initPreference(PreferenceScreen screen){
  ListPreference videoDuration=(ListPreference)screen.findPreference(KEY_VIDEO_DURATION);
  ListPreference pictureSize=(ListPreference)screen.findPreference(KEY_PICTURE_SIZE);
  ListPreference whiteBalance=(ListPreference)screen.findPreference(KEY_WHITE_BALANCE);
  ListPreference colorEffect=(ListPreference)screen.findPreference(KEY_COLOR_EFFECT);
  ListPreference sceneMode=(ListPreference)screen.findPreference(KEY_SCENE_MODE);
  ListPreference flashMode=(ListPreference)screen.findPreference(KEY_FLASH_MODE);
  if (videoDuration != null) {
    CharSequence[] entries=videoDuration.getEntries();
    entries[0]=String.format(entries[0].toString(),MMS_VIDEO_DURATION);
  }
  if (pictureSize != null) {
    filterUnsupportedOptions(screen,pictureSize,sizeListToStringList(mParameters.getSupportedPictureSizes()));
  }
  if (whiteBalance != null) {
    filterUnsupportedOptions(screen,whiteBalance,mParameters.getSupportedWhiteBalance());
  }
  if (colorEffect != null) {
    filterUnsupportedOptions(screen,colorEffect,mParameters.getSupportedColorEffects());
  }
  if (sceneMode != null) {
    filterUnsupportedOptions(screen,sceneMode,mParameters.getSupportedSceneModes());
  }
  if (flashMode != null) {
    filterUnsupportedOptions(screen,flashMode,mParameters.getSupportedFlashModes());
  }
}","private void initPreference(PreferenceScreen screen){
  ListPreference videoDuration=(ListPreference)screen.findPreference(KEY_VIDEO_DURATION);
  ListPreference pictureSize=(ListPreference)screen.findPreference(KEY_PICTURE_SIZE);
  ListPreference whiteBalance=(ListPreference)screen.findPreference(KEY_WHITE_BALANCE);
  ListPreference colorEffect=(ListPreference)screen.findPreference(KEY_COLOR_EFFECT);
  ListPreference sceneMode=(ListPreference)screen.findPreference(KEY_SCENE_MODE);
  ListPreference flashMode=(ListPreference)screen.findPreference(KEY_FLASH_MODE);
  ListPreference focusMode=(ListPreference)screen.findPreference(KEY_FOCUS_MODE);
  if (videoDuration != null) {
    CharSequence[] entries=videoDuration.getEntries();
    entries[0]=String.format(entries[0].toString(),MMS_VIDEO_DURATION);
  }
  if (pictureSize != null) {
    filterUnsupportedOptions(screen,pictureSize,sizeListToStringList(mParameters.getSupportedPictureSizes()));
  }
  if (whiteBalance != null) {
    filterUnsupportedOptions(screen,whiteBalance,mParameters.getSupportedWhiteBalance());
  }
  if (colorEffect != null) {
    filterUnsupportedOptions(screen,colorEffect,mParameters.getSupportedColorEffects());
  }
  if (sceneMode != null) {
    filterUnsupportedOptions(screen,sceneMode,mParameters.getSupportedSceneModes());
  }
  if (flashMode != null) {
    filterUnsupportedOptions(screen,flashMode,mParameters.getSupportedFlashModes());
  }
  if (focusMode != null) {
    filterUnsupportedOptions(screen,focusMode,mParameters.getSupportedFocusModes());
  }
}",0.9318181818181818
184428,"private void filterUnsupportedOptions(PreferenceScreen screen,ListPreference pref,List<String> supported){
  if (supported == null) {
    removePreference(screen,pref);
    return;
  }
  CharSequence[] allEntries=pref.getEntries();
  CharSequence[] allEntryValues=pref.getEntryValues();
  Drawable[] allIcons=(pref instanceof IconListPreference) ? ((IconListPreference)pref).getIcons() : null;
  ArrayList<CharSequence> entries=new ArrayList<CharSequence>();
  ArrayList<CharSequence> entryValues=new ArrayList<CharSequence>();
  ArrayList<Drawable> icons=allIcons == null ? null : new ArrayList<Drawable>();
  for (int i=0, len=allEntryValues.length; i < len; i++) {
    if (supported.indexOf(allEntryValues[i].toString()) != NOT_FOUND) {
      entries.add(allEntries[i]);
      entryValues.add(allEntryValues[i]);
      if (allIcons != null)       icons.add(allIcons[i]);
    }
  }
  int size=entries.size();
  pref.setEntries(entries.toArray(new CharSequence[size]));
  pref.setEntryValues(entryValues.toArray(new CharSequence[size]));
  if (allIcons != null) {
    ((IconListPreference)pref).setIcons(icons.toArray(new Drawable[size]));
  }
  String value=pref.getValue();
  if (pref.findIndexOfValue(value) == NOT_FOUND) {
    pref.setValueIndex(0);
  }
}","private void filterUnsupportedOptions(PreferenceScreen screen,ListPreference pref,List<String> supported){
  CharSequence[] allEntries=pref.getEntries();
  if (supported == null || allEntries.length <= 1) {
    removePreference(screen,pref);
    return;
  }
  CharSequence[] allEntryValues=pref.getEntryValues();
  Drawable[] allIcons=(pref instanceof IconListPreference) ? ((IconListPreference)pref).getIcons() : null;
  ArrayList<CharSequence> entries=new ArrayList<CharSequence>();
  ArrayList<CharSequence> entryValues=new ArrayList<CharSequence>();
  ArrayList<Drawable> icons=allIcons == null ? null : new ArrayList<Drawable>();
  for (int i=0, len=allEntryValues.length; i < len; i++) {
    if (supported.indexOf(allEntryValues[i].toString()) != NOT_FOUND) {
      entries.add(allEntries[i]);
      entryValues.add(allEntryValues[i]);
      if (allIcons != null)       icons.add(allIcons[i]);
    }
  }
  int size=entries.size();
  pref.setEntries(entries.toArray(new CharSequence[size]));
  pref.setEntryValues(entryValues.toArray(new CharSequence[size]));
  if (allIcons != null) {
    ((IconListPreference)pref).setIcons(icons.toArray(new Drawable[size]));
  }
  String value=pref.getValue();
  if (pref.findIndexOfValue(value) == NOT_FOUND) {
    pref.setValueIndex(0);
  }
}",0.9285153181461115
184429,"public static Uri addImage(ContentResolver cr,String title,long dateTaken,Location location,int orientation,String directory,String filename,Bitmap source,byte[] jpegData){
  OutputStream outputStream=null;
  File file=new File(directory,filename);
  try {
    file.mkdirs();
    outputStream=new FileOutputStream(file);
    if (source != null) {
      source.compress(CompressFormat.JPEG,75,outputStream);
    }
 else {
      outputStream.write(jpegData);
    }
  }
 catch (  FileNotFoundException ex) {
    Log.w(TAG,ex);
    return null;
  }
catch (  IOException ex) {
    Log.w(TAG,ex);
    return null;
  }
 finally {
    Util.closeSilently(outputStream);
  }
  ContentValues values=new ContentValues(7);
  values.put(Images.Media.TITLE,title);
  values.put(Images.Media.DISPLAY_NAME,filename);
  values.put(Images.Media.DATE_TAKEN,dateTaken);
  values.put(Images.Media.MIME_TYPE,""String_Node_Str"");
  values.put(Images.Media.ORIENTATION,orientation);
  values.put(Images.Media.DATA,directory + ""String_Node_Str"" + filename);
  if (location != null) {
    values.put(Images.Media.LATITUDE,location.getLatitude());
    values.put(Images.Media.LONGITUDE,location.getLongitude());
  }
  return cr.insert(STORAGE_URI,values);
}","public static Uri addImage(ContentResolver cr,String title,long dateTaken,Location location,int orientation,String directory,String filename,Bitmap source,byte[] jpegData){
  OutputStream outputStream=null;
  String filePath=directory + ""String_Node_Str"" + filename;
  try {
    File dir=new File(directory);
    if (!dir.exists())     dir.mkdirs();
    File file=new File(directory,filename);
    outputStream=new FileOutputStream(file);
    if (source != null) {
      source.compress(CompressFormat.JPEG,75,outputStream);
    }
 else {
      outputStream.write(jpegData);
    }
  }
 catch (  FileNotFoundException ex) {
    Log.w(TAG,ex);
    return null;
  }
catch (  IOException ex) {
    Log.w(TAG,ex);
    return null;
  }
 finally {
    Util.closeSilently(outputStream);
  }
  ContentValues values=new ContentValues(7);
  values.put(Images.Media.TITLE,title);
  values.put(Images.Media.DISPLAY_NAME,filename);
  values.put(Images.Media.DATE_TAKEN,dateTaken);
  values.put(Images.Media.MIME_TYPE,""String_Node_Str"");
  values.put(Images.Media.ORIENTATION,orientation);
  values.put(Images.Media.DATA,filePath);
  if (location != null) {
    values.put(Images.Media.LATITUDE,location.getLatitude());
    values.put(Images.Media.LONGITUDE,location.getLongitude());
  }
  return cr.insert(STORAGE_URI,values);
}",0.916601101494886
184430,"public static Uri addImage(ContentResolver cr,String title,long dateTaken,Location location,int orientation,String directory,String filename,Bitmap source,byte[] jpegData){
  OutputStream outputStream=null;
  File file=new File(directory,filename);
  try {
    file.mkdirs();
    outputStream=new FileOutputStream(file);
    if (source != null) {
      source.compress(CompressFormat.JPEG,75,outputStream);
    }
 else {
      outputStream.write(jpegData);
    }
  }
 catch (  FileNotFoundException ex) {
    Log.w(TAG,ex);
    return null;
  }
catch (  IOException ex) {
    Log.w(TAG,ex);
    return null;
  }
 finally {
    Util.closeSilently(outputStream);
  }
  ContentValues values=new ContentValues(7);
  values.put(Images.Media.TITLE,title);
  values.put(Images.Media.DISPLAY_NAME,filename);
  values.put(Images.Media.DATE_TAKEN,dateTaken);
  values.put(Images.Media.MIME_TYPE,""String_Node_Str"");
  values.put(Images.Media.ORIENTATION,orientation);
  values.put(Images.Media.DATA,directory + ""String_Node_Str"" + filename);
  if (location != null) {
    values.put(Images.Media.LATITUDE,location.getLatitude());
    values.put(Images.Media.LONGITUDE,location.getLongitude());
  }
  return cr.insert(STORAGE_URI,values);
}","public static Uri addImage(ContentResolver cr,String title,long dateTaken,Location location,int orientation,String directory,String filename,Bitmap source,byte[] jpegData){
  OutputStream outputStream=null;
  String filePath=directory + ""String_Node_Str"" + filename;
  try {
    File dir=new File(directory);
    if (!dir.exists())     dir.mkdirs();
    File file=new File(directory,filename);
    outputStream=new FileOutputStream(file);
    if (source != null) {
      source.compress(CompressFormat.JPEG,75,outputStream);
    }
 else {
      outputStream.write(jpegData);
    }
  }
 catch (  FileNotFoundException ex) {
    Log.w(TAG,ex);
    return null;
  }
catch (  IOException ex) {
    Log.w(TAG,ex);
    return null;
  }
 finally {
    Util.closeSilently(outputStream);
  }
  ContentValues values=new ContentValues(7);
  values.put(Images.Media.TITLE,title);
  values.put(Images.Media.DISPLAY_NAME,filename);
  values.put(Images.Media.DATE_TAKEN,dateTaken);
  values.put(Images.Media.MIME_TYPE,""String_Node_Str"");
  values.put(Images.Media.ORIENTATION,orientation);
  values.put(Images.Media.DATA,filePath);
  if (location != null) {
    values.put(Images.Media.LATITUDE,location.getLatitude());
    values.put(Images.Media.LONGITUDE,location.getLongitude());
  }
  return cr.insert(STORAGE_URI,values);
}",0.916601101494886
184431,"public static Uri addImage(ContentResolver cr,String title,long dateTaken,Location location,int orientation,String directory,String filename,Bitmap source,byte[] jpegData){
  OutputStream outputStream=null;
  File file=new File(directory,filename);
  try {
    file.mkdirs();
    outputStream=new FileOutputStream(file);
    if (source != null) {
      source.compress(CompressFormat.JPEG,75,outputStream);
    }
 else {
      outputStream.write(jpegData);
    }
  }
 catch (  FileNotFoundException ex) {
    Log.w(TAG,ex);
    return null;
  }
catch (  IOException ex) {
    Log.w(TAG,ex);
    return null;
  }
 finally {
    Util.closeSilently(outputStream);
  }
  ContentValues values=new ContentValues(7);
  values.put(Images.Media.TITLE,title);
  values.put(Images.Media.DISPLAY_NAME,filename);
  values.put(Images.Media.DATE_TAKEN,dateTaken);
  values.put(Images.Media.MIME_TYPE,""String_Node_Str"");
  values.put(Images.Media.ORIENTATION,orientation);
  values.put(Images.Media.DATA,directory + ""String_Node_Str"" + filename);
  if (location != null) {
    values.put(Images.Media.LATITUDE,location.getLatitude());
    values.put(Images.Media.LONGITUDE,location.getLongitude());
  }
  return cr.insert(STORAGE_URI,values);
}","public static Uri addImage(ContentResolver cr,String title,long dateTaken,Location location,int orientation,String directory,String filename,Bitmap source,byte[] jpegData){
  OutputStream outputStream=null;
  String filePath=directory + ""String_Node_Str"" + filename;
  try {
    File dir=new File(directory);
    if (!dir.exists())     dir.mkdirs();
    File file=new File(directory,filename);
    outputStream=new FileOutputStream(file);
    if (source != null) {
      source.compress(CompressFormat.JPEG,75,outputStream);
    }
 else {
      outputStream.write(jpegData);
    }
  }
 catch (  FileNotFoundException ex) {
    Log.w(TAG,ex);
    return null;
  }
catch (  IOException ex) {
    Log.w(TAG,ex);
    return null;
  }
 finally {
    Util.closeSilently(outputStream);
  }
  ContentValues values=new ContentValues(7);
  values.put(Images.Media.TITLE,title);
  values.put(Images.Media.DISPLAY_NAME,filename);
  values.put(Images.Media.DATE_TAKEN,dateTaken);
  values.put(Images.Media.MIME_TYPE,""String_Node_Str"");
  values.put(Images.Media.ORIENTATION,orientation);
  values.put(Images.Media.DATA,filePath);
  if (location != null) {
    values.put(Images.Media.LATITUDE,location.getLatitude());
    values.put(Images.Media.LONGITUDE,location.getLongitude());
  }
  return cr.insert(STORAGE_URI,values);
}",0.916601101494886
184432,"private void initPreference(PreferenceScreen screen){
  ListPreference videoDuration=(ListPreference)screen.findPreference(KEY_VIDEO_DURATION);
  ListPreference pictureSize=(ListPreference)screen.findPreference(KEY_PICTURE_SIZE);
  ListPreference whiteBalance=(ListPreference)screen.findPreference(KEY_WHITE_BALANCE);
  ListPreference colorEffect=(ListPreference)screen.findPreference(KEY_COLOR_EFFECT);
  ListPreference sceneMode=(ListPreference)screen.findPreference(KEY_SCENE_MODE);
  if (videoDuration != null) {
    CharSequence[] entries=videoDuration.getEntries();
    entries[0]=String.format(entries[0].toString(),MMS_VIDEO_DURATION);
  }
  if (pictureSize != null) {
    filterUnsupportedOptions(screen,pictureSize,sizeListToStringList(mParameters.getSupportedPictureSizes()));
  }
  if (whiteBalance != null) {
    filterUnsupportedOptions(screen,whiteBalance,mParameters.getSupportedWhiteBalance());
  }
  if (colorEffect != null) {
    filterUnsupportedOptions(screen,colorEffect,mParameters.getSupportedColorEffects());
  }
  if (sceneMode != null) {
    filterUnsupportedOptions(screen,sceneMode,mParameters.getSupportedSceneModes());
  }
}","private void initPreference(PreferenceScreen screen){
  ListPreference videoDuration=(ListPreference)screen.findPreference(KEY_VIDEO_DURATION);
  ListPreference pictureSize=(ListPreference)screen.findPreference(KEY_PICTURE_SIZE);
  ListPreference whiteBalance=(ListPreference)screen.findPreference(KEY_WHITE_BALANCE);
  ListPreference colorEffect=(ListPreference)screen.findPreference(KEY_COLOR_EFFECT);
  ListPreference sceneMode=(ListPreference)screen.findPreference(KEY_SCENE_MODE);
  ListPreference flashMode=(ListPreference)screen.findPreference(KEY_FLASH_MODE);
  if (videoDuration != null) {
    CharSequence[] entries=videoDuration.getEntries();
    entries[0]=String.format(entries[0].toString(),MMS_VIDEO_DURATION);
  }
  if (pictureSize != null) {
    filterUnsupportedOptions(screen,pictureSize,sizeListToStringList(mParameters.getSupportedPictureSizes()));
  }
  if (whiteBalance != null) {
    filterUnsupportedOptions(screen,whiteBalance,mParameters.getSupportedWhiteBalance());
  }
  if (colorEffect != null) {
    filterUnsupportedOptions(screen,colorEffect,mParameters.getSupportedColorEffects());
  }
  if (sceneMode != null) {
    filterUnsupportedOptions(screen,sceneMode,mParameters.getSupportedSceneModes());
  }
  if (flashMode != null) {
    filterUnsupportedOptions(screen,flashMode,mParameters.getSupportedFlashModes());
  }
}",0.9210526315789472
184433,"private void initPreference(PreferenceScreen screen){
  ListPreference videoDuration=(ListPreference)screen.findPreference(KEY_VIDEO_DURATION);
  ListPreference pictureSize=(ListPreference)screen.findPreference(KEY_PICTURE_SIZE);
  ListPreference whiteBalance=(ListPreference)screen.findPreference(KEY_WHITE_BALANCE);
  ListPreference colorEffect=(ListPreference)screen.findPreference(KEY_COLOR_EFFECT);
  ListPreference sceneMode=(ListPreference)screen.findPreference(KEY_SCENE_MODE);
  if (videoDuration != null) {
    CharSequence[] entries=videoDuration.getEntries();
    entries[0]=String.format(entries[0].toString(),MMS_VIDEO_DURATION);
  }
  if (pictureSize != null) {
    filterUnsupportedOptions(screen,pictureSize,sizeListToStringList(mParameters.getSupportedPictureSizes()));
  }
  if (whiteBalance != null) {
    filterUnsupportedOptions(screen,whiteBalance,mParameters.getSupportedWhiteBalance());
  }
  if (colorEffect != null) {
    filterUnsupportedOptions(screen,colorEffect,mParameters.getSupportedColorEffects());
  }
  if (sceneMode != null) {
    filterUnsupportedOptions(screen,sceneMode,mParameters.getSupportedSceneModes());
  }
}","private void initPreference(PreferenceScreen screen){
  ListPreference videoDuration=(ListPreference)screen.findPreference(KEY_VIDEO_DURATION);
  ListPreference pictureSize=(ListPreference)screen.findPreference(KEY_PICTURE_SIZE);
  ListPreference whiteBalance=(ListPreference)screen.findPreference(KEY_WHITE_BALANCE);
  ListPreference colorEffect=(ListPreference)screen.findPreference(KEY_COLOR_EFFECT);
  ListPreference sceneMode=(ListPreference)screen.findPreference(KEY_SCENE_MODE);
  ListPreference flashMode=(ListPreference)screen.findPreference(KEY_FLASH_MODE);
  if (videoDuration != null) {
    CharSequence[] entries=videoDuration.getEntries();
    entries[0]=String.format(entries[0].toString(),MMS_VIDEO_DURATION);
  }
  if (pictureSize != null) {
    filterUnsupportedOptions(screen,pictureSize,sizeListToStringList(mParameters.getSupportedPictureSizes()));
  }
  if (whiteBalance != null) {
    filterUnsupportedOptions(screen,whiteBalance,mParameters.getSupportedWhiteBalance());
  }
  if (colorEffect != null) {
    filterUnsupportedOptions(screen,colorEffect,mParameters.getSupportedColorEffects());
  }
  if (sceneMode != null) {
    filterUnsupportedOptions(screen,sceneMode,mParameters.getSupportedSceneModes());
  }
  if (flashMode != null) {
    filterUnsupportedOptions(screen,flashMode,mParameters.getSupportedFlashModes());
  }
}",0.9210526315789472
184434,"private void initPreference(PreferenceScreen screen){
  ListPreference videoDuration=(ListPreference)screen.findPreference(KEY_VIDEO_DURATION);
  ListPreference pictureSize=(ListPreference)screen.findPreference(KEY_PICTURE_SIZE);
  ListPreference whiteBalance=(ListPreference)screen.findPreference(KEY_WHITE_BALANCE);
  ListPreference colorEffect=(ListPreference)screen.findPreference(KEY_COLOR_EFFECT);
  ListPreference sceneMode=(ListPreference)screen.findPreference(KEY_SCENE_MODE);
  if (videoDuration != null) {
    CharSequence[] entries=videoDuration.getEntries();
    entries[0]=String.format(entries[0].toString(),MMS_VIDEO_DURATION);
  }
  if (pictureSize != null) {
    filterUnsupportedOptions(screen,pictureSize,sizeListToStringList(mParameters.getSupportedPictureSizes()));
  }
  if (whiteBalance != null) {
    filterUnsupportedOptions(screen,whiteBalance,mParameters.getSupportedWhiteBalance());
  }
  if (colorEffect != null) {
    filterUnsupportedOptions(screen,colorEffect,mParameters.getSupportedColorEffects());
  }
  if (sceneMode != null) {
    filterUnsupportedOptions(screen,sceneMode,mParameters.getSupportedSceneModes());
  }
}","private void initPreference(PreferenceScreen screen){
  ListPreference videoDuration=(ListPreference)screen.findPreference(KEY_VIDEO_DURATION);
  ListPreference pictureSize=(ListPreference)screen.findPreference(KEY_PICTURE_SIZE);
  ListPreference whiteBalance=(ListPreference)screen.findPreference(KEY_WHITE_BALANCE);
  ListPreference colorEffect=(ListPreference)screen.findPreference(KEY_COLOR_EFFECT);
  ListPreference sceneMode=(ListPreference)screen.findPreference(KEY_SCENE_MODE);
  ListPreference flashMode=(ListPreference)screen.findPreference(KEY_FLASH_MODE);
  if (videoDuration != null) {
    CharSequence[] entries=videoDuration.getEntries();
    entries[0]=String.format(entries[0].toString(),MMS_VIDEO_DURATION);
  }
  if (pictureSize != null) {
    filterUnsupportedOptions(screen,pictureSize,sizeListToStringList(mParameters.getSupportedPictureSizes()));
  }
  if (whiteBalance != null) {
    filterUnsupportedOptions(screen,whiteBalance,mParameters.getSupportedWhiteBalance());
  }
  if (colorEffect != null) {
    filterUnsupportedOptions(screen,colorEffect,mParameters.getSupportedColorEffects());
  }
  if (sceneMode != null) {
    filterUnsupportedOptions(screen,sceneMode,mParameters.getSupportedSceneModes());
  }
  if (flashMode != null) {
    filterUnsupportedOptions(screen,flashMode,mParameters.getSupportedFlashModes());
  }
}",0.9210526315789472
184435,"private void startPreview() throws CameraHardwareException {
  if (mPausing || isFinishing())   return;
  ensureCameraDevice();
  if (mPreviewing)   stopPreview();
  setPreviewDisplay(mSurfaceHolder);
  setCameraParameter();
  final long wallTimeStart=SystemClock.elapsedRealtime();
  final long threadTimeStart=Debug.threadCpuTimeNanos();
  mCameraDevice.setOneShotPreviewCallback(mOneShotPreviewCallback);
  mCameraDevice.setErrorCallback(mErrorCallback);
  try {
    Log.v(TAG,""String_Node_Str"");
    mCameraDevice.startPreview();
  }
 catch (  Throwable ex) {
    closeCamera();
    throw new RuntimeException(""String_Node_Str"",ex);
  }
  mPreviewing=true;
  mStatus=IDLE;
  long threadTimeEnd=Debug.threadCpuTimeNanos();
  long wallTimeEnd=SystemClock.elapsedRealtime();
  if ((wallTimeEnd - wallTimeStart) > 3000) {
    Log.w(TAG,""String_Node_Str"" + (wallTimeEnd - wallTimeStart) + ""String_Node_Str""+ (threadTimeEnd - threadTimeStart) / 1000000 + ""String_Node_Str"");
  }
}","private void startPreview() throws CameraHardwareException {
  if (mPausing || isFinishing())   return;
  ensureCameraDevice();
  if (mPreviewing)   stopPreview();
  setPreviewDisplay(mSurfaceHolder);
  setCameraParameters();
  final long wallTimeStart=SystemClock.elapsedRealtime();
  final long threadTimeStart=Debug.threadCpuTimeNanos();
  mCameraDevice.setOneShotPreviewCallback(mOneShotPreviewCallback);
  mCameraDevice.setErrorCallback(mErrorCallback);
  try {
    Log.v(TAG,""String_Node_Str"");
    mCameraDevice.startPreview();
  }
 catch (  Throwable ex) {
    closeCamera();
    throw new RuntimeException(""String_Node_Str"",ex);
  }
  mPreviewing=true;
  mStatus=IDLE;
  long threadTimeEnd=Debug.threadCpuTimeNanos();
  long wallTimeEnd=SystemClock.elapsedRealtime();
  if ((wallTimeEnd - wallTimeStart) > 3000) {
    Log.w(TAG,""String_Node_Str"" + (wallTimeEnd - wallTimeStart) + ""String_Node_Str""+ (threadTimeEnd - threadTimeStart) / 1000000 + ""String_Node_Str"");
  }
}",0.9994890137966276
184436,"public void onZoomUpdate(int zoomLevel,android.hardware.Camera camera){
  mZoomValue=(double)zoomLevel / 1000;
  mZooming=false;
}","public void onZoomUpdate(int zoomLevel,android.hardware.Camera camera){
  mZoomValue=(double)zoomLevel / 1000;
  Log.v(TAG,""String_Node_Str"" + zoomLevel);
  updateZoomButtonsEnabled();
}",0.7911392405063291
184437,"private void initializeZoom(){
  String zoomState=mParameters.get(PARM_ZOOM_STATE);
  if (zoomState == null)   return;
  mZoomValue=Double.parseDouble(mParameters.get(PARM_ZOOM_TO_LEVEL));
  mZoomMax=Double.parseDouble(mParameters.get(PARM_ZOOM_MAX));
  mZoomStep=Double.parseDouble(mParameters.get(PARM_ZOOM_STEP));
  mParameters.set(PARM_ZOOM_SPEED,ZOOM_SPEED);
  mCameraDevice.setParameters(mParameters);
  mGestureDetector=new GestureDetector(this,new ZoomGestureListener());
  mCameraDevice.setZoomCallback(mZoomCallback);
  mZoomButtons=new ZoomButtonsController(mSurfaceView);
  mZoomButtons.setAutoDismissed(true);
  mZoomButtons.setZoomSpeed(100);
  mZoomButtons.setOnZoomListener(new ZoomButtonsController.OnZoomListener(){
    public void onVisibilityChanged(    boolean visible){
      if (visible) {
        updateZoomButtonsEnabled();
      }
    }
    public void onZoom(    boolean zoomIn){
      if (mZooming)       return;
      if (zoomIn) {
        if (mZoomValue < mZoomMax) {
          mZoomValue+=mZoomStep;
          zoomToLevel(ZOOM_CONTINUOUS);
        }
      }
 else {
        if (mZoomValue > ZOOM_MIN) {
          mZoomValue-=mZoomStep;
          zoomToLevel(ZOOM_CONTINUOUS);
        }
      }
      updateZoomButtonsEnabled();
    }
  }
);
}","private void initializeZoom(){
  String zoomState=mParameters.get(PARM_ZOOM_STATE);
  if (zoomState == null)   return;
  mZoomValue=Double.parseDouble(mParameters.get(PARM_ZOOM_TO_LEVEL));
  mZoomMax=Double.parseDouble(mParameters.get(PARM_ZOOM_MAX));
  mZoomStep=Double.parseDouble(mParameters.get(PARM_ZOOM_STEP));
  mParameters.set(PARM_ZOOM_SPEED,ZOOM_SPEED);
  mCameraDevice.setParameters(mParameters);
  mGestureDetector=new GestureDetector(this,new ZoomGestureListener());
  mCameraDevice.setZoomCallback(mZoomCallback);
  mZoomButtons=new ZoomButtonsController(mSurfaceView);
  mZoomButtons.setAutoDismissed(true);
  mZoomButtons.setZoomSpeed(100);
  mZoomButtons.setOnZoomListener(new ZoomButtonsController.OnZoomListener(){
    public void onVisibilityChanged(    boolean visible){
      if (visible) {
        updateZoomButtonsEnabled();
      }
    }
    public void onZoom(    boolean zoomIn){
      if (isZooming())       return;
      if (zoomIn) {
        if (mZoomValue < mZoomMax) {
          zoomToLevel(ZOOM_CONTINUOUS,mZoomValue + mZoomStep);
        }
      }
 else {
        if (mZoomValue > ZOOM_MIN) {
          zoomToLevel(ZOOM_CONTINUOUS,mZoomValue - mZoomStep);
        }
      }
    }
  }
);
}",0.9394789579158316
184438,"private void initializeSecondTime(){
  mOrientationListener.enable();
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  installIntentFilter();
  initializeFocusTone();
  checkStorage();
  if (!mIsImageCaptureIntent) {
    updateThumbnailButton();
  }
}","private void initializeSecondTime(){
  mOrientationListener.enable();
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  installIntentFilter();
  initializeFocusTone();
  checkStorage();
  if (mZoomButtons != null) {
    mZoomValue=Double.parseDouble(mParameters.get(PARM_ZOOM_TO_LEVEL));
    mCameraDevice.setZoomCallback(mZoomCallback);
  }
  if (!mIsImageCaptureIntent) {
    updateThumbnailButton();
  }
}",0.7833333333333333
184439,"private void zoomToLevel(String type){
  if (type == null) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  if (mZoomValue > mZoomMax)   mZoomValue=mZoomMax;
  if (mZoomValue < ZOOM_MIN)   mZoomValue=ZOOM_MIN;
  mParameters.set(PARM_ZOOM_STATE,ZOOM_STOP);
  mCameraDevice.setParameters(mParameters);
  mParameters.set(PARM_ZOOM_TO_LEVEL,Double.toString(mZoomValue));
  mParameters.set(PARM_ZOOM_STATE,type);
  mCameraDevice.setParameters(mParameters);
  if (ZOOM_CONTINUOUS.equals(type))   mZooming=true;
}","private void zoomToLevel(String type,double zoomValue){
  if (zoomValue > mZoomMax)   zoomValue=mZoomMax;
  if (zoomValue < ZOOM_MIN)   zoomValue=ZOOM_MIN;
  mParameters.set(PARM_ZOOM_STATE,ZOOM_STOP);
  mCameraDevice.setParameters(mParameters);
  mParameters.set(PARM_ZOOM_TO_LEVEL,Double.toString(zoomValue));
  mParameters.set(PARM_ZOOM_STATE,type);
  mCameraDevice.setParameters(mParameters);
  if (ZOOM_IMMEDIATE.equals(type))   mZoomValue=zoomValue;
}",0.7747933884297521
184440,"@Override public boolean onDoubleTap(MotionEvent e){
  if (mPausing || !isCameraIdle() || !mPreviewing|| mZoomButtons == null || mZooming) {
    return false;
  }
  if (mZoomValue < mZoomMax) {
    while (mZoomValue < mZoomMax) {
      mZoomValue+=ZOOM_STEP_MIN;
      zoomToLevel(ZOOM_IMMEDIATE);
      try {
        Thread.currentThread().sleep(5);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
 else {
    while (mZoomValue > ZOOM_MIN) {
      mZoomValue-=ZOOM_STEP_MIN;
      zoomToLevel(ZOOM_IMMEDIATE);
      try {
        Thread.currentThread().sleep(5);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  updateZoomButtonsEnabled();
  return true;
}","@Override public boolean onDoubleTap(MotionEvent e){
  if (mPausing || !isCameraIdle() || !mPreviewing|| mZoomButtons == null || isZooming()) {
    return false;
  }
  if (mZoomValue < mZoomMax) {
    while (mZoomValue < mZoomMax) {
      zoomToLevel(ZOOM_IMMEDIATE,mZoomValue + ZOOM_STEP_MIN);
      try {
        Thread.currentThread().sleep(5);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
 else {
    while (mZoomValue > ZOOM_MIN) {
      zoomToLevel(ZOOM_IMMEDIATE,mZoomValue - ZOOM_STEP_MIN);
      try {
        Thread.currentThread().sleep(5);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  updateZoomButtonsEnabled();
  return true;
}",0.4945770065075922
184441,"public void onZoom(boolean zoomIn){
  if (mZooming)   return;
  if (zoomIn) {
    if (mZoomValue < mZoomMax) {
      mZoomValue+=mZoomStep;
      zoomToLevel(ZOOM_CONTINUOUS);
    }
  }
 else {
    if (mZoomValue > ZOOM_MIN) {
      mZoomValue-=mZoomStep;
      zoomToLevel(ZOOM_CONTINUOUS);
    }
  }
  updateZoomButtonsEnabled();
}","public void onZoom(boolean zoomIn){
  if (isZooming())   return;
  if (zoomIn) {
    if (mZoomValue < mZoomMax) {
      zoomToLevel(ZOOM_CONTINUOUS,mZoomValue + mZoomStep);
    }
  }
 else {
    if (mZoomValue > ZOOM_MIN) {
      zoomToLevel(ZOOM_CONTINUOUS,mZoomValue - mZoomStep);
    }
  }
}",0.7751196172248804
184442,"private void showOnScreenSettings(){
  if (mSettings == null) {
    mSettings=new OnScreenSettings(findViewById(R.id.camera_preview));
    CameraSettings helper=new CameraSettings(this,mParameters);
    mSettings.setPreferenceScreen(helper.getPreferenceScreen(R.xml.camera_preferences));
    mSettings.setOnVisibilityChangedListener(this);
  }
  mSettings.expandPanel();
}","private void showOnScreenSettings(){
  if (mSettings == null) {
    mSettings=new OnScreenSettings(findViewById(R.id.camera_preview));
    CameraSettings helper=new CameraSettings(this,mParameters);
    mSettings.setPreferenceScreen(helper.getPreferenceScreen(R.xml.video_preferences));
    mSettings.setOnVisibilityChangedListener(this);
  }
  mSettings.expandPanel();
}",0.9851951547779272
184443,"private void startPreview() throws CameraHardwareException {
  if (mPausing || isFinishing())   return;
  ensureCameraDevice();
  if (mPreviewing)   stopPreview();
  setPreviewDisplay(mSurfaceHolder);
  setCameraParameter();
  final long wallTimeStart=SystemClock.elapsedRealtime();
  final long threadTimeStart=Debug.threadCpuTimeNanos();
  mCameraDevice.setOneShotPreviewCallback(mOneShotPreviewCallback);
  mCameraDevice.setErrorCallback(mErrorCallback);
  try {
    Log.v(TAG,""String_Node_Str"");
    mCameraDevice.startPreview();
  }
 catch (  Throwable ex) {
    closeCamera();
    throw new RuntimeException(""String_Node_Str"",ex);
  }
  mPreviewing=true;
  mStatus=IDLE;
  long threadTimeEnd=Debug.threadCpuTimeNanos();
  long wallTimeEnd=SystemClock.elapsedRealtime();
  if ((wallTimeEnd - wallTimeStart) > 3000) {
    Log.w(TAG,""String_Node_Str"" + (wallTimeEnd - wallTimeStart) + ""String_Node_Str""+ (threadTimeEnd - threadTimeStart) / 1000000 + ""String_Node_Str"");
  }
}","private void startPreview() throws CameraHardwareException {
  if (mPausing || isFinishing())   return;
  ensureCameraDevice();
  if (mPreviewing)   stopPreview();
  setPreviewDisplay(mSurfaceHolder);
  setCameraParameters();
  final long wallTimeStart=SystemClock.elapsedRealtime();
  final long threadTimeStart=Debug.threadCpuTimeNanos();
  mCameraDevice.setOneShotPreviewCallback(mOneShotPreviewCallback);
  mCameraDevice.setErrorCallback(mErrorCallback);
  try {
    Log.v(TAG,""String_Node_Str"");
    mCameraDevice.startPreview();
  }
 catch (  Throwable ex) {
    closeCamera();
    throw new RuntimeException(""String_Node_Str"",ex);
  }
  mPreviewing=true;
  mStatus=IDLE;
  long threadTimeEnd=Debug.threadCpuTimeNanos();
  long wallTimeEnd=SystemClock.elapsedRealtime();
  if ((wallTimeEnd - wallTimeStart) > 3000) {
    Log.w(TAG,""String_Node_Str"" + (wallTimeEnd - wallTimeStart) + ""String_Node_Str""+ (threadTimeEnd - threadTimeStart) / 1000000 + ""String_Node_Str"");
  }
}",0.9994890137966276
184444,"public void onZoomUpdate(int zoomLevel,android.hardware.Camera camera){
  mZoomValue=(double)zoomLevel / 1000;
  mZooming=false;
}","public void onZoomUpdate(int zoomLevel,android.hardware.Camera camera){
  mZoomValue=(double)zoomLevel / 1000;
  Log.v(TAG,""String_Node_Str"" + zoomLevel);
  updateZoomButtonsEnabled();
}",0.7911392405063291
184445,"private void initializeZoom(){
  String zoomState=mParameters.get(PARM_ZOOM_STATE);
  if (zoomState == null)   return;
  mZoomValue=Double.parseDouble(mParameters.get(PARM_ZOOM_TO_LEVEL));
  mZoomMax=Double.parseDouble(mParameters.get(PARM_ZOOM_MAX));
  mZoomStep=Double.parseDouble(mParameters.get(PARM_ZOOM_STEP));
  mParameters.set(PARM_ZOOM_SPEED,ZOOM_SPEED);
  mCameraDevice.setParameters(mParameters);
  mGestureDetector=new GestureDetector(this,new ZoomGestureListener());
  mCameraDevice.setZoomCallback(mZoomCallback);
  mZoomButtons=new ZoomButtonsController(mSurfaceView);
  mZoomButtons.setAutoDismissed(true);
  mZoomButtons.setZoomSpeed(100);
  mZoomButtons.setOnZoomListener(new ZoomButtonsController.OnZoomListener(){
    public void onVisibilityChanged(    boolean visible){
      if (visible) {
        updateZoomButtonsEnabled();
      }
    }
    public void onZoom(    boolean zoomIn){
      if (mZooming)       return;
      if (zoomIn) {
        if (mZoomValue < mZoomMax) {
          mZoomValue+=mZoomStep;
          zoomToLevel(ZOOM_CONTINUOUS);
        }
      }
 else {
        if (mZoomValue > ZOOM_MIN) {
          mZoomValue-=mZoomStep;
          zoomToLevel(ZOOM_CONTINUOUS);
        }
      }
      updateZoomButtonsEnabled();
    }
  }
);
}","private void initializeZoom(){
  String zoomState=mParameters.get(PARM_ZOOM_STATE);
  if (zoomState == null)   return;
  mZoomValue=Double.parseDouble(mParameters.get(PARM_ZOOM_TO_LEVEL));
  mZoomMax=Double.parseDouble(mParameters.get(PARM_ZOOM_MAX));
  mZoomStep=Double.parseDouble(mParameters.get(PARM_ZOOM_STEP));
  mParameters.set(PARM_ZOOM_SPEED,ZOOM_SPEED);
  mCameraDevice.setParameters(mParameters);
  mGestureDetector=new GestureDetector(this,new ZoomGestureListener());
  mCameraDevice.setZoomCallback(mZoomCallback);
  mZoomButtons=new ZoomButtonsController(mSurfaceView);
  mZoomButtons.setAutoDismissed(true);
  mZoomButtons.setZoomSpeed(100);
  mZoomButtons.setOnZoomListener(new ZoomButtonsController.OnZoomListener(){
    public void onVisibilityChanged(    boolean visible){
      if (visible) {
        updateZoomButtonsEnabled();
      }
    }
    public void onZoom(    boolean zoomIn){
      if (isZooming())       return;
      if (zoomIn) {
        if (mZoomValue < mZoomMax) {
          zoomToLevel(ZOOM_CONTINUOUS,mZoomValue + mZoomStep);
        }
      }
 else {
        if (mZoomValue > ZOOM_MIN) {
          zoomToLevel(ZOOM_CONTINUOUS,mZoomValue - mZoomStep);
        }
      }
    }
  }
);
}",0.9394789579158316
184446,"private void initializeSecondTime(){
  mOrientationListener.enable();
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  installIntentFilter();
  initializeFocusTone();
  checkStorage();
  if (!mIsImageCaptureIntent) {
    updateThumbnailButton();
  }
}","private void initializeSecondTime(){
  mOrientationListener.enable();
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  installIntentFilter();
  initializeFocusTone();
  checkStorage();
  if (mZoomButtons != null) {
    mZoomValue=Double.parseDouble(mParameters.get(PARM_ZOOM_TO_LEVEL));
    mCameraDevice.setZoomCallback(mZoomCallback);
  }
  if (!mIsImageCaptureIntent) {
    updateThumbnailButton();
  }
}",0.7833333333333333
184447,"private void zoomToLevel(String type){
  if (type == null) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  if (mZoomValue > mZoomMax)   mZoomValue=mZoomMax;
  if (mZoomValue < ZOOM_MIN)   mZoomValue=ZOOM_MIN;
  mParameters.set(PARM_ZOOM_STATE,ZOOM_STOP);
  mCameraDevice.setParameters(mParameters);
  mParameters.set(PARM_ZOOM_TO_LEVEL,Double.toString(mZoomValue));
  mParameters.set(PARM_ZOOM_STATE,type);
  mCameraDevice.setParameters(mParameters);
  if (ZOOM_CONTINUOUS.equals(type))   mZooming=true;
}","private void zoomToLevel(String type,double zoomValue){
  if (zoomValue > mZoomMax)   zoomValue=mZoomMax;
  if (zoomValue < ZOOM_MIN)   zoomValue=ZOOM_MIN;
  mParameters.set(PARM_ZOOM_STATE,ZOOM_STOP);
  mCameraDevice.setParameters(mParameters);
  mParameters.set(PARM_ZOOM_TO_LEVEL,Double.toString(zoomValue));
  mParameters.set(PARM_ZOOM_STATE,type);
  mCameraDevice.setParameters(mParameters);
  if (ZOOM_IMMEDIATE.equals(type))   mZoomValue=zoomValue;
}",0.7747933884297521
184448,"@Override public boolean onDoubleTap(MotionEvent e){
  if (mPausing || !isCameraIdle() || !mPreviewing|| mZoomButtons == null || mZooming) {
    return false;
  }
  if (mZoomValue < mZoomMax) {
    while (mZoomValue < mZoomMax) {
      mZoomValue+=ZOOM_STEP_MIN;
      zoomToLevel(ZOOM_IMMEDIATE);
      try {
        Thread.currentThread().sleep(5);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
 else {
    while (mZoomValue > ZOOM_MIN) {
      mZoomValue-=ZOOM_STEP_MIN;
      zoomToLevel(ZOOM_IMMEDIATE);
      try {
        Thread.currentThread().sleep(5);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  updateZoomButtonsEnabled();
  return true;
}","@Override public boolean onDoubleTap(MotionEvent e){
  if (mPausing || !isCameraIdle() || !mPreviewing|| mZoomButtons == null || isZooming()) {
    return false;
  }
  if (mZoomValue < mZoomMax) {
    while (mZoomValue < mZoomMax) {
      zoomToLevel(ZOOM_IMMEDIATE,mZoomValue + ZOOM_STEP_MIN);
      try {
        Thread.currentThread().sleep(5);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
 else {
    while (mZoomValue > ZOOM_MIN) {
      zoomToLevel(ZOOM_IMMEDIATE,mZoomValue - ZOOM_STEP_MIN);
      try {
        Thread.currentThread().sleep(5);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  updateZoomButtonsEnabled();
  return true;
}",0.4945770065075922
184449,"public void onZoom(boolean zoomIn){
  if (mZooming)   return;
  if (zoomIn) {
    if (mZoomValue < mZoomMax) {
      mZoomValue+=mZoomStep;
      zoomToLevel(ZOOM_CONTINUOUS);
    }
  }
 else {
    if (mZoomValue > ZOOM_MIN) {
      mZoomValue-=mZoomStep;
      zoomToLevel(ZOOM_CONTINUOUS);
    }
  }
  updateZoomButtonsEnabled();
}","public void onZoom(boolean zoomIn){
  if (isZooming())   return;
  if (zoomIn) {
    if (mZoomValue < mZoomMax) {
      zoomToLevel(ZOOM_CONTINUOUS,mZoomValue + mZoomStep);
    }
  }
 else {
    if (mZoomValue > ZOOM_MIN) {
      zoomToLevel(ZOOM_CONTINUOUS,mZoomValue - mZoomStep);
    }
  }
}",0.7751196172248804
184450,"private void startPreview() throws CameraHardwareException {
  if (mPausing || isFinishing())   return;
  ensureCameraDevice();
  if (mPreviewing)   stopPreview();
  setPreviewDisplay(mSurfaceHolder);
  setCameraParameter();
  final long wallTimeStart=SystemClock.elapsedRealtime();
  final long threadTimeStart=Debug.threadCpuTimeNanos();
  mCameraDevice.setOneShotPreviewCallback(mOneShotPreviewCallback);
  mCameraDevice.setErrorCallback(mErrorCallback);
  try {
    Log.v(TAG,""String_Node_Str"");
    mCameraDevice.startPreview();
  }
 catch (  Throwable ex) {
    closeCamera();
    throw new RuntimeException(""String_Node_Str"",ex);
  }
  mPreviewing=true;
  mStatus=IDLE;
  long threadTimeEnd=Debug.threadCpuTimeNanos();
  long wallTimeEnd=SystemClock.elapsedRealtime();
  if ((wallTimeEnd - wallTimeStart) > 3000) {
    Log.w(TAG,""String_Node_Str"" + (wallTimeEnd - wallTimeStart) + ""String_Node_Str""+ (threadTimeEnd - threadTimeStart) / 1000000 + ""String_Node_Str"");
  }
}","private void startPreview() throws CameraHardwareException {
  if (mPausing || isFinishing())   return;
  ensureCameraDevice();
  if (mPreviewing)   stopPreview();
  setPreviewDisplay(mSurfaceHolder);
  setCameraParameters();
  final long wallTimeStart=SystemClock.elapsedRealtime();
  final long threadTimeStart=Debug.threadCpuTimeNanos();
  mCameraDevice.setOneShotPreviewCallback(mOneShotPreviewCallback);
  mCameraDevice.setErrorCallback(mErrorCallback);
  try {
    Log.v(TAG,""String_Node_Str"");
    mCameraDevice.startPreview();
  }
 catch (  Throwable ex) {
    closeCamera();
    throw new RuntimeException(""String_Node_Str"",ex);
  }
  mPreviewing=true;
  mStatus=IDLE;
  long threadTimeEnd=Debug.threadCpuTimeNanos();
  long wallTimeEnd=SystemClock.elapsedRealtime();
  if ((wallTimeEnd - wallTimeStart) > 3000) {
    Log.w(TAG,""String_Node_Str"" + (wallTimeEnd - wallTimeStart) + ""String_Node_Str""+ (threadTimeEnd - threadTimeStart) / 1000000 + ""String_Node_Str"");
  }
}",0.9994890137966276
184451,"public void onZoomUpdate(int zoomLevel,android.hardware.Camera camera){
  mZoomValue=(double)zoomLevel / 1000;
  mZooming=false;
}","public void onZoomUpdate(int zoomLevel,android.hardware.Camera camera){
  mZoomValue=(double)zoomLevel / 1000;
  Log.v(TAG,""String_Node_Str"" + zoomLevel);
  updateZoomButtonsEnabled();
}",0.7911392405063291
184452,"private void initializeZoom(){
  String zoomState=mParameters.get(PARM_ZOOM_STATE);
  if (zoomState == null)   return;
  mZoomValue=Double.parseDouble(mParameters.get(PARM_ZOOM_TO_LEVEL));
  mZoomMax=Double.parseDouble(mParameters.get(PARM_ZOOM_MAX));
  mZoomStep=Double.parseDouble(mParameters.get(PARM_ZOOM_STEP));
  mParameters.set(PARM_ZOOM_SPEED,ZOOM_SPEED);
  mCameraDevice.setParameters(mParameters);
  mGestureDetector=new GestureDetector(this,new ZoomGestureListener());
  mCameraDevice.setZoomCallback(mZoomCallback);
  mZoomButtons=new ZoomButtonsController(mSurfaceView);
  mZoomButtons.setAutoDismissed(true);
  mZoomButtons.setZoomSpeed(100);
  mZoomButtons.setOnZoomListener(new ZoomButtonsController.OnZoomListener(){
    public void onVisibilityChanged(    boolean visible){
      if (visible) {
        updateZoomButtonsEnabled();
      }
    }
    public void onZoom(    boolean zoomIn){
      if (mZooming)       return;
      if (zoomIn) {
        if (mZoomValue < mZoomMax) {
          mZoomValue+=mZoomStep;
          zoomToLevel(ZOOM_CONTINUOUS);
        }
      }
 else {
        if (mZoomValue > ZOOM_MIN) {
          mZoomValue-=mZoomStep;
          zoomToLevel(ZOOM_CONTINUOUS);
        }
      }
      updateZoomButtonsEnabled();
    }
  }
);
}","private void initializeZoom(){
  String zoomState=mParameters.get(PARM_ZOOM_STATE);
  if (zoomState == null)   return;
  mZoomValue=Double.parseDouble(mParameters.get(PARM_ZOOM_TO_LEVEL));
  mZoomMax=Double.parseDouble(mParameters.get(PARM_ZOOM_MAX));
  mZoomStep=Double.parseDouble(mParameters.get(PARM_ZOOM_STEP));
  mParameters.set(PARM_ZOOM_SPEED,ZOOM_SPEED);
  mCameraDevice.setParameters(mParameters);
  mGestureDetector=new GestureDetector(this,new ZoomGestureListener());
  mCameraDevice.setZoomCallback(mZoomCallback);
  mZoomButtons=new ZoomButtonsController(mSurfaceView);
  mZoomButtons.setAutoDismissed(true);
  mZoomButtons.setZoomSpeed(100);
  mZoomButtons.setOnZoomListener(new ZoomButtonsController.OnZoomListener(){
    public void onVisibilityChanged(    boolean visible){
      if (visible) {
        updateZoomButtonsEnabled();
      }
    }
    public void onZoom(    boolean zoomIn){
      if (isZooming())       return;
      if (zoomIn) {
        if (mZoomValue < mZoomMax) {
          zoomToLevel(ZOOM_CONTINUOUS,mZoomValue + mZoomStep);
        }
      }
 else {
        if (mZoomValue > ZOOM_MIN) {
          zoomToLevel(ZOOM_CONTINUOUS,mZoomValue - mZoomStep);
        }
      }
    }
  }
);
}",0.9394789579158316
184453,"private void initializeSecondTime(){
  mOrientationListener.enable();
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  installIntentFilter();
  initializeFocusTone();
  checkStorage();
  if (!mIsImageCaptureIntent) {
    updateThumbnailButton();
  }
}","private void initializeSecondTime(){
  mOrientationListener.enable();
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  installIntentFilter();
  initializeFocusTone();
  checkStorage();
  if (mZoomButtons != null) {
    mZoomValue=Double.parseDouble(mParameters.get(PARM_ZOOM_TO_LEVEL));
    mCameraDevice.setZoomCallback(mZoomCallback);
  }
  if (!mIsImageCaptureIntent) {
    updateThumbnailButton();
  }
}",0.7833333333333333
184454,"private void zoomToLevel(String type){
  if (type == null) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  if (mZoomValue > mZoomMax)   mZoomValue=mZoomMax;
  if (mZoomValue < ZOOM_MIN)   mZoomValue=ZOOM_MIN;
  mParameters.set(PARM_ZOOM_STATE,ZOOM_STOP);
  mCameraDevice.setParameters(mParameters);
  mParameters.set(PARM_ZOOM_TO_LEVEL,Double.toString(mZoomValue));
  mParameters.set(PARM_ZOOM_STATE,type);
  mCameraDevice.setParameters(mParameters);
  if (ZOOM_CONTINUOUS.equals(type))   mZooming=true;
}","private void zoomToLevel(String type,double zoomValue){
  if (zoomValue > mZoomMax)   zoomValue=mZoomMax;
  if (zoomValue < ZOOM_MIN)   zoomValue=ZOOM_MIN;
  mParameters.set(PARM_ZOOM_STATE,ZOOM_STOP);
  mCameraDevice.setParameters(mParameters);
  mParameters.set(PARM_ZOOM_TO_LEVEL,Double.toString(zoomValue));
  mParameters.set(PARM_ZOOM_STATE,type);
  mCameraDevice.setParameters(mParameters);
  if (ZOOM_IMMEDIATE.equals(type))   mZoomValue=zoomValue;
}",0.7747933884297521
184455,"@Override public boolean onDoubleTap(MotionEvent e){
  if (mPausing || !isCameraIdle() || !mPreviewing|| mZoomButtons == null || mZooming) {
    return false;
  }
  if (mZoomValue < mZoomMax) {
    while (mZoomValue < mZoomMax) {
      mZoomValue+=ZOOM_STEP_MIN;
      zoomToLevel(ZOOM_IMMEDIATE);
      try {
        Thread.currentThread().sleep(5);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
 else {
    while (mZoomValue > ZOOM_MIN) {
      mZoomValue-=ZOOM_STEP_MIN;
      zoomToLevel(ZOOM_IMMEDIATE);
      try {
        Thread.currentThread().sleep(5);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  updateZoomButtonsEnabled();
  return true;
}","@Override public boolean onDoubleTap(MotionEvent e){
  if (mPausing || !isCameraIdle() || !mPreviewing|| mZoomButtons == null || isZooming()) {
    return false;
  }
  if (mZoomValue < mZoomMax) {
    while (mZoomValue < mZoomMax) {
      zoomToLevel(ZOOM_IMMEDIATE,mZoomValue + ZOOM_STEP_MIN);
      try {
        Thread.currentThread().sleep(5);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
 else {
    while (mZoomValue > ZOOM_MIN) {
      zoomToLevel(ZOOM_IMMEDIATE,mZoomValue - ZOOM_STEP_MIN);
      try {
        Thread.currentThread().sleep(5);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  updateZoomButtonsEnabled();
  return true;
}",0.4945770065075922
184456,"public void onZoom(boolean zoomIn){
  if (mZooming)   return;
  if (zoomIn) {
    if (mZoomValue < mZoomMax) {
      mZoomValue+=mZoomStep;
      zoomToLevel(ZOOM_CONTINUOUS);
    }
  }
 else {
    if (mZoomValue > ZOOM_MIN) {
      mZoomValue-=mZoomStep;
      zoomToLevel(ZOOM_CONTINUOUS);
    }
  }
  updateZoomButtonsEnabled();
}","public void onZoom(boolean zoomIn){
  if (isZooming())   return;
  if (zoomIn) {
    if (mZoomValue < mZoomMax) {
      zoomToLevel(ZOOM_CONTINUOUS,mZoomValue + mZoomStep);
    }
  }
 else {
    if (mZoomValue > ZOOM_MIN) {
      zoomToLevel(ZOOM_CONTINUOUS,mZoomValue - mZoomStep);
    }
  }
}",0.7751196172248804
184457,"private void closeSubMenu(){
  Util.slideOut(mSubMenu,Util.DIRECTION_RIGHT);
  Util.slideIn(mMainMenu,Util.DIRECTION_LEFT);
  ((MainMenuAdapter)mMainMenu.getAdapter()).notifyDataSetChanged();
}","private void closeSubMenu(){
  Util.slideOut(mSubMenu,Util.DIRECTION_RIGHT);
  Util.slideIn(mMainMenu,Util.DIRECTION_LEFT);
}",0.7861635220125787
184458,"public void setVisible(boolean visible){
  if (visible) {
    if (mOwnerView.getWindowToken() == null) {
      if (!mHandler.hasMessages(MSG_POST_SET_VISIBLE)) {
        mHandler.sendEmptyMessage(MSG_POST_SET_VISIBLE);
      }
      return;
    }
  }
  if (mIsVisible == visible) {
    return;
  }
  mIsVisible=visible;
  if (visible) {
    if (mContainerLayoutParams.token == null) {
      mContainerLayoutParams.token=mOwnerView.getWindowToken();
    }
    if (mPostedVisibleInitializer == null) {
      mPostedVisibleInitializer=new Runnable(){
        public void run(){
          refreshPositioningVariables();
        }
      }
;
    }
    mWindowManager.addView(mContainer,mContainerLayoutParams);
    mHandler.post(mPostedVisibleInitializer);
  }
 else {
    mSubMenu.setAdapter(null);
    mSubMenu.setVisibility(View.INVISIBLE);
    mMainMenu.setVisibility(View.VISIBLE);
    mWindowManager.removeView(mContainer);
    mHandler.removeCallbacks(mPostedVisibleInitializer);
  }
  if (mVisibilityListener != null) {
    mVisibilityListener.onVisibilityChanged(mIsVisible);
  }
}","public void setVisible(boolean visible){
  if (visible) {
    if (mOwnerView.getWindowToken() == null) {
      if (!mHandler.hasMessages(MSG_POST_SET_VISIBLE)) {
        mHandler.sendEmptyMessage(MSG_POST_SET_VISIBLE);
      }
      return;
    }
  }
  if (mIsVisible == visible) {
    return;
  }
  mIsVisible=visible;
  if (visible) {
    if (mMainAdapter != null)     mMainAdapter.notifyDataSetChanged();
    if (mContainerLayoutParams.token == null) {
      mContainerLayoutParams.token=mOwnerView.getWindowToken();
    }
    if (mPostedVisibleInitializer == null) {
      mPostedVisibleInitializer=new Runnable(){
        public void run(){
          refreshPositioningVariables();
        }
      }
;
    }
    mWindowManager.addView(mContainer,mContainerLayoutParams);
    mHandler.post(mPostedVisibleInitializer);
  }
 else {
    mSubMenu.setAdapter(null);
    mSubMenu.setVisibility(View.INVISIBLE);
    mMainMenu.setVisibility(View.VISIBLE);
    mWindowManager.removeView(mContainer);
    mHandler.removeCallbacks(mPostedVisibleInitializer);
  }
  if (mVisibilityListener != null) {
    mVisibilityListener.onVisibilityChanged(mIsVisible);
  }
}",0.968289414917374
184459,"public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  CharSequence values[]=mPreference.getEntryValues();
  if (position <= values.length) {
    int idx=mPreference.findIndexOfValue(mPreference.getValue());
    if (idx != position - 1) {
      mPreference.setValueIndex(position - 1);
      notifyDataSetChanged();
      return;
    }
  }
  closeSubMenu();
}","public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  CharSequence values[]=mPreference.getEntryValues();
  if (position <= values.length) {
    int idx=mPreference.findIndexOfValue(mPreference.getValue());
    if (idx != position - 1) {
      mPreference.setValueIndex(position - 1);
      notifyDataSetChanged();
      mMainAdapter.notifyDataSetChanged();
      return;
    }
  }
  closeSubMenu();
}",0.947109471094711
184460,"public void setPreferenceScreen(PreferenceScreen screen){
  ArrayList<Preference> list=new ArrayList<Preference>();
  for (int i=0, n=screen.getPreferenceCount(); i < n; ++i) {
    addPreference(screen.getPreference(i),list);
  }
  MainMenuAdapter mainAdapter=new MainMenuAdapter(mContext,list);
  mMainMenu.setAdapter(mainAdapter);
  mMainMenu.setOnItemClickListener(mainAdapter);
}","public void setPreferenceScreen(PreferenceScreen screen){
  ArrayList<Preference> list=new ArrayList<Preference>();
  for (int i=0, n=screen.getPreferenceCount(); i < n; ++i) {
    addPreference(screen.getPreference(i),list);
  }
  mMainAdapter=new MainMenuAdapter(mContext,list);
  mMainMenu.setAdapter(mMainAdapter);
  mMainMenu.setOnItemClickListener(mMainAdapter);
}",0.9721115537848606
184461,"public void onSharedPreferenceChanged(SharedPreferences preferences,String key){
  if (mPausing)   return;
  if (CameraSettings.KEY_FLASH_MODE.equals(key)) {
    mParameters.setFlashMode(preferences.getString(key,""String_Node_Str""));
    mCameraDevice.setParameters(mParameters);
  }
 else   if (CameraSettings.KEY_FOCUS_MODE.equals(key)) {
    mFocusMode=preferences.getString(key,getString(R.string.pref_camera_focusmode_default));
  }
 else   if (CameraSettings.KEY_PICTURE_SIZE.equals(key)) {
    String pictureSize=preferences.getString(key,getString(R.string.pref_camera_picturesize_default));
    setCameraPictureSizeIfSupported(pictureSize);
    mCameraDevice.setParameters(mParameters);
  }
 else   if (CameraSettings.KEY_JPEG_QUALITY.equals(key)) {
    String jpegQuality=preferences.getString(key,getString(R.string.pref_camera_jpegquality_default));
    mParameters.setJpegQuality(Integer.parseInt(jpegQuality));
    mCameraDevice.setParameters(mParameters);
  }
 else   if (CameraSettings.KEY_RECORD_LOCATION.equals(key)) {
    mRecordLocation=preferences.getBoolean(key,false);
    if (mRecordLocation) {
      startReceivingLocationUpdates();
    }
 else {
      stopReceivingLocationUpdates();
    }
  }
 else   if (CameraSettings.KEY_COLOR_EFFECT.equals(key)) {
    String colorEffect=preferences.getString(key,getString(R.string.pref_camera_coloreffect_default));
    mParameters.setColorEffect(colorEffect);
    mCameraDevice.setParameters(mParameters);
  }
 else   if (CameraSettings.KEY_WHITE_BALANCE.equals(key)) {
    String whiteBalance=preferences.getString(key,getString(R.string.pref_camera_whitebalance_default));
    mParameters.setWhiteBalance(whiteBalance);
    mCameraDevice.setParameters(mParameters);
  }
}","public void onSharedPreferenceChanged(SharedPreferences preferences,String key){
  if (mPausing)   return;
  if (CameraSettings.KEY_FLASH_MODE.equals(key)) {
    mParameters.setFlashMode(preferences.getString(key,""String_Node_Str""));
    mCameraDevice.setParameters(mParameters);
  }
 else   if (CameraSettings.KEY_FOCUS_MODE.equals(key)) {
    mFocusMode=preferences.getString(key,getString(R.string.pref_camera_focusmode_default));
  }
 else   if (CameraSettings.KEY_PICTURE_SIZE.equals(key)) {
    String pictureSize=preferences.getString(key,getString(R.string.pref_camera_picturesize_default));
    setCameraPictureSizeIfSupported(pictureSize);
    mCameraDevice.setParameters(mParameters);
  }
 else   if (CameraSettings.KEY_JPEG_QUALITY.equals(key)) {
    String jpegQuality=preferences.getString(key,getString(R.string.pref_camera_jpegquality_default));
    mParameters.setJpegQuality(Integer.parseInt(jpegQuality));
    mCameraDevice.setParameters(mParameters);
  }
 else   if (CameraSettings.KEY_RECORD_LOCATION.equals(key)) {
    mRecordLocation=preferences.getBoolean(key,false);
    if (mRecordLocation) {
      startReceivingLocationUpdates();
    }
 else {
      stopReceivingLocationUpdates();
    }
  }
 else   if (CameraSettings.KEY_COLOR_EFFECT.equals(key)) {
    String colorEffect=preferences.getString(key,getString(R.string.pref_camera_coloreffect_default));
    mParameters.setColorEffect(colorEffect);
    mCameraDevice.setParameters(mParameters);
  }
 else   if (CameraSettings.KEY_WHITE_BALANCE.equals(key)) {
    String whiteBalance=preferences.getString(key,getString(R.string.pref_camera_whitebalance_default));
    mParameters.setWhiteBalance(whiteBalance);
    mCameraDevice.setParameters(mParameters);
  }
 else   if (CameraSettings.KEY_SCENE_MODE.equals(key)) {
    String sceneMode=preferences.getString(key,getString(R.string.pref_camera_scenemode_default));
    mParameters.setSceneMode(sceneMode);
    mCameraDevice.setParameters(mParameters);
  }
}",0.9337268580627852
184462,"@Override public void onReceive(Context context,Intent intent){
  try {
    CameraHolder holder=CameraHolder.instance();
    holder.open();
    holder.keep();
    holder.release();
  }
 catch (  CameraHardwareException e) {
    return;
  }
  Intent i=new Intent(Intent.ACTION_MAIN);
  i.setClass(context,Camera.class);
  i.addCategory(""String_Node_Str"");
  i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(i);
}","@Override public void onReceive(Context context,Intent intent){
  CameraHolder holder=CameraHolder.instance();
  if (holder.tryOpen() == null)   return;
  holder.keep();
  holder.release();
  Intent i=new Intent(Intent.ACTION_MAIN);
  i.setClass(context,Camera.class);
  i.addCategory(""String_Node_Str"");
  i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(i);
}",0.6806930693069307
184463,"@Override public boolean dispatchTouchEvent(MotionEvent m){
  if (mZoomButtonsController.isVisible() && mZoomButtonsController.onTouch(null,m)) {
    scheduleDismissOnScreenControls();
  }
  if (!super.dispatchTouchEvent(m)) {
    return mGestureDetector.onTouchEvent(m);
  }
  return true;
}","@Override public boolean dispatchTouchEvent(MotionEvent m){
  if (mZoomButtonsController.isVisible()) {
    scheduleDismissOnScreenControls();
  }
  if (!super.dispatchTouchEvent(m)) {
    return mGestureDetector.onTouchEvent(m);
  }
  return true;
}",0.5129151291512916
184464,"@Override public boolean dispatchTouchEvent(MotionEvent m){
  if (mPaused)   return true;
  if (mZoomButtonsController.isVisible() && mZoomButtonsController.onTouch(null,m)) {
    scheduleDismissOnScreenControls();
  }
  if (!super.dispatchTouchEvent(m)) {
    return mGestureDetector.onTouchEvent(m);
  }
  return true;
}","@Override public boolean dispatchTouchEvent(MotionEvent m){
  if (mPaused)   return true;
  if (mZoomButtonsController.isVisible()) {
    scheduleDismissOnScreenControls();
  }
  if (!super.dispatchTouchEvent(m)) {
    return mGestureDetector.onTouchEvent(m);
  }
  return true;
}",0.5548172757475083
184465,"private void setCameraParameter(){
  mParameters=mCameraDevice.getParameters();
  mParameters.setPreviewSize(mViewFinderWidth,mViewFinderHeight);
  if (mParameters.get(Camera.SUPPORTED_PICTURE_SIZE) != null) {
    String pictureSize=mPreferences.getString(CameraSettings.KEY_PICTURE_SIZE,getString(R.string.pref_camera_picturesize_default));
    if (parameterExists(Camera.SUPPORTED_PICTURE_SIZE,pictureSize)) {
      mParameters.set(PARM_PICTURE_SIZE,pictureSize);
    }
  }
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,getString(R.string.pref_camera_jpegquality_default));
  mParameters.set(PARM_JPEG_QUALITY,jpegQuality);
  mCameraDevice.setParameters(mParameters);
}","private void setCameraParameter(){
  mParameters=mCameraDevice.getParameters();
  mParameters.setPreviewSize(mViewFinderWidth,mViewFinderHeight);
  if (mParameters.get(Camera.SUPPORTED_PICTURE_SIZE) != null) {
    String pictureSize=mPreferences.getString(CameraSettings.KEY_PICTURE_SIZE,getString(R.string.pref_camera_picturesize_default));
    if (parameterExists(Camera.SUPPORTED_PICTURE_SIZE,pictureSize)) {
      mParameters.set(PARM_PICTURE_SIZE,pictureSize);
    }
  }
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,getString(R.string.pref_camera_jpegquality_default));
  mParameters.set(PARM_JPEG_QUALITY,jpegQuality);
  if (mParameters.get(Camera.SUPPORTED_FLASH_MODE) != null) {
    String flashMode=mPreferences.getString(CameraSettings.KEY_FLASH_MODE,""String_Node_Str"");
    mParameters.set(PARM_FLASH_MODE,flashMode);
  }
  mCameraDevice.setParameters(mParameters);
}",0.8621118012422361
184466,"public void setListener(ModeChangeListener listener){
  mListener=listener;
  if (listener != null) {
    mListener.onFlashModeChanged(MODE_STRINGS[mCurrentMode]);
  }
}","public void setListener(ModeChangeListener listener){
  mListener=listener;
}",0.6260162601626016
184467,"public static int computeSampleSize(BitmapFactory.Options options,int minSideLength,int maxNumOfPixels){
  double w=options.outWidth;
  double h=options.outHeight;
  int lowerBound=(maxNumOfPixels == IImage.UNCONSTRAINED) ? 1 : (int)Math.ceil(Math.sqrt(w * h / maxNumOfPixels));
  int upperBound=(minSideLength == IImage.UNCONSTRAINED) ? 128 : (int)Math.min(Math.floor(w / minSideLength),Math.floor(h / minSideLength));
  if (upperBound < lowerBound) {
    return lowerBound;
  }
  if ((maxNumOfPixels == IImage.UNCONSTRAINED) && (minSideLength == IImage.UNCONSTRAINED)) {
    return 1;
  }
 else   if (minSideLength == IImage.UNCONSTRAINED) {
    return lowerBound;
  }
 else {
    return upperBound;
  }
}","public static int computeSampleSize(BitmapFactory.Options options,int minSideLength,int maxNumOfPixels){
  int initialSize=computeInitialSampleSize(options,minSideLength,maxNumOfPixels);
  int roundedSize;
  if (initialSize <= 8) {
    roundedSize=1;
    while (roundedSize < initialSize) {
      roundedSize<<=1;
    }
  }
 else {
    roundedSize=(initialSize + 7) / 8 * 8;
  }
  return roundedSize;
}",0.2596934174932371
184468,"private Bitmap createThumbnailFromUri(Uri uri,long id){
  Bitmap bitmap=Util.makeBitmap(IImage.THUMBNAIL_TARGET_SIZE,IImage.UNCONSTRAINED,uri,mContentResolver);
  if (bitmap != null) {
    storeThumbnail(bitmap,id);
  }
 else {
    bitmap=Util.makeBitmap(IImage.MINI_THUMB_TARGET_SIZE,IImage.UNCONSTRAINED,uri,mContentResolver);
  }
  return bitmap;
}","private Bitmap createThumbnailFromUri(Uri uri,long id){
  Bitmap bitmap=Util.makeBitmap(IImage.THUMBNAIL_TARGET_SIZE,IImage.THUMBNAIL_MAX_NUM_PIXELS,uri,mContentResolver);
  if (bitmap != null) {
    storeThumbnail(bitmap,id);
  }
 else {
    bitmap=Util.makeBitmap(IImage.MINI_THUMB_TARGET_SIZE,IImage.MINI_THUMB_MAX_NUM_PIXELS,uri,mContentResolver);
  }
  return bitmap;
}",0.8662068965517241
184469,"private Bitmap createThumbnailFromEXIF(String filePath,long id){
  if (filePath == null)   return null;
  byte[] thumbData=ExifInterface.getExifThumbnail(filePath);
  if (thumbData == null)   return null;
  BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=true;
  BitmapFactory.decodeByteArray(thumbData,0,thumbData.length,options);
  int width=options.outWidth;
  int height=options.outHeight;
  if (width >= IImage.THUMBNAIL_TARGET_SIZE && height >= IImage.THUMBNAIL_TARGET_SIZE) {
    storeThumbnail(thumbData,id,width,height);
    options.inSampleSize=Util.computeSampleSize(options,IImage.MINI_THUMB_TARGET_SIZE,IImage.UNCONSTRAINED);
    options.inDither=false;
    options.inPreferredConfig=Bitmap.Config.ARGB_8888;
    options.inJustDecodeBounds=false;
    return BitmapFactory.decodeByteArray(thumbData,0,thumbData.length,options);
  }
  return null;
}","private Bitmap createThumbnailFromEXIF(String filePath,long id){
  if (filePath == null)   return null;
  byte[] thumbData=ExifInterface.getExifThumbnail(filePath);
  if (thumbData == null)   return null;
  BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=true;
  BitmapFactory.decodeByteArray(thumbData,0,thumbData.length,options);
  int width=options.outWidth;
  int height=options.outHeight;
  if (width >= IImage.THUMBNAIL_TARGET_SIZE && height >= IImage.THUMBNAIL_TARGET_SIZE) {
    storeThumbnail(thumbData,id,width,height);
    options.inSampleSize=Util.computeSampleSize(options,IImage.MINI_THUMB_TARGET_SIZE,IImage.MINI_THUMB_MAX_NUM_PIXELS);
    options.inDither=false;
    options.inPreferredConfig=Bitmap.Config.ARGB_8888;
    options.inJustDecodeBounds=false;
    return BitmapFactory.decodeByteArray(thumbData,0,thumbData.length,options);
  }
  return null;
}",0.9823399558498896
184470,"@Override public Bitmap miniThumbBitmap(){
  return fullSizeBitmap(IImage.MINI_THUMB_TARGET_SIZE,IImage.UNCONSTRAINED);
}","@Override public Bitmap miniThumbBitmap(){
  return fullSizeBitmap(IImage.MINI_THUMB_TARGET_SIZE,IImage.MINI_THUMB_MAX_NUM_PIXELS);
}",0.8740157480314961
184471,"@Override public Bitmap thumbBitmap(boolean rotateAsNeeded){
  return fullSizeBitmap(IImage.THUMBNAIL_TARGET_SIZE,IImage.UNCONSTRAINED);
}","@Override public Bitmap thumbBitmap(boolean rotateAsNeeded){
  return fullSizeBitmap(IImage.THUMBNAIL_TARGET_SIZE,IImage.THUMBNAIL_MAX_NUM_PIXELS);
}",0.9128919860627178
184472,"public Bitmap thumbBitmap(boolean rotateAsNeeded){
  Bitmap bitmap=null;
  if (mContainer.mThumbUri != null) {
    Cursor c=mContentResolver.query(mContainer.mThumbUri,THUMB_PROJECTION,Thumbnails.IMAGE_ID + ""String_Node_Str"",new String[]{String.valueOf(fullSizeImageId())},null);
    try {
      if (c.moveToFirst()) {
        bitmap=decodeCurrentImage(c.getLong(0));
      }
    }
 catch (    RuntimeException ex) {
      return null;
    }
 finally {
      c.close();
    }
  }
  if (bitmap == null) {
    bitmap=fullSizeBitmap(THUMBNAIL_TARGET_SIZE,IImage.UNCONSTRAINED,IImage.NO_ROTATE,IImage.NO_NATIVE);
    bitmap=mContainer.storeThumbnail(bitmap,mId);
  }
  if (bitmap != null && rotateAsNeeded) {
    bitmap=Util.rotate(bitmap,getDegreesRotated());
  }
  return bitmap;
}","public Bitmap thumbBitmap(boolean rotateAsNeeded){
  Bitmap bitmap=null;
  if (mContainer.mThumbUri != null) {
    Cursor c=mContentResolver.query(mContainer.mThumbUri,THUMB_PROJECTION,Thumbnails.IMAGE_ID + ""String_Node_Str"",new String[]{String.valueOf(fullSizeImageId())},null);
    try {
      if (c.moveToFirst()) {
        bitmap=decodeCurrentImage(c.getLong(0));
      }
    }
 catch (    RuntimeException ex) {
      return null;
    }
 finally {
      c.close();
    }
  }
  if (bitmap == null) {
    bitmap=fullSizeBitmap(THUMBNAIL_TARGET_SIZE,THUMBNAIL_MAX_NUM_PIXELS,NO_ROTATE,NO_NATIVE);
    bitmap=mContainer.storeThumbnail(bitmap,mId);
  }
  if (bitmap != null && rotateAsNeeded) {
    bitmap=Util.rotate(bitmap,getDegreesRotated());
  }
  return bitmap;
}",0.9638242894056848
184473,"public Bitmap thumbBitmap(boolean rotateAsNeeded){
  return fullSizeBitmap(THUMBNAIL_TARGET_SIZE,IImage.UNCONSTRAINED,rotateAsNeeded);
}","public Bitmap thumbBitmap(boolean rotateAsNeeded){
  return fullSizeBitmap(THUMBNAIL_TARGET_SIZE,THUMBNAIL_MAX_NUM_PIXELS,rotateAsNeeded);
}",0.8840579710144928
184474,"public Bitmap thumbBitmap(boolean rotateAsNeeded){
  return fullSizeBitmap(THUMBNAIL_TARGET_SIZE,UNCONSTRAINED);
}","public Bitmap thumbBitmap(boolean rotateAsNeeded){
  return fullSizeBitmap(THUMBNAIL_TARGET_SIZE,THUMBNAIL_MAX_NUM_PIXELS);
}",0.895397489539749
184475,"private void autoFocus(){
  if (isCameraIdle() && mPreviewing) {
    Log.v(TAG,""String_Node_Str"");
    if (mZoomButtons != null)     mZoomButtons.setVisible(false);
    mFocusStartTime=System.currentTimeMillis();
    mFocusState=FOCUSING;
    updateFocusIndicator();
    mCameraDevice.autoFocus(mAutoFocusCallback);
  }
}","private void autoFocus(){
  if (canTakePicture()) {
    Log.v(TAG,""String_Node_Str"");
    if (mZoomButtons != null)     mZoomButtons.setVisible(false);
    mFocusStartTime=System.currentTimeMillis();
    mFocusState=FOCUSING;
    updateFocusIndicator();
    mCameraDevice.autoFocus(mAutoFocusCallback);
  }
}",0.931637519872814
184476,"public static int computeSampleSize(BitmapFactory.Options options,int minSideLength,int maxNumOfPixels){
  double w=options.outWidth;
  double h=options.outHeight;
  int lowerBound=(maxNumOfPixels == IImage.UNCONSTRAINED) ? 1 : (int)Math.ceil(Math.sqrt(w * h / maxNumOfPixels));
  int upperBound=(minSideLength == IImage.UNCONSTRAINED) ? 128 : (int)Math.min(Math.floor(w / minSideLength),Math.floor(h / minSideLength));
  if (upperBound < lowerBound) {
    return lowerBound;
  }
  if ((maxNumOfPixels == IImage.UNCONSTRAINED) && (minSideLength == IImage.UNCONSTRAINED)) {
    return 1;
  }
 else   if (minSideLength == IImage.UNCONSTRAINED) {
    return lowerBound;
  }
 else {
    return upperBound;
  }
}","public static int computeSampleSize(BitmapFactory.Options options,int minSideLength,int maxNumOfPixels){
  int initialSize=computeInitialSampleSize(options,minSideLength,maxNumOfPixels);
  int roundedSize;
  if (initialSize <= 8) {
    roundedSize=1;
    while (roundedSize < initialSize) {
      roundedSize<<=1;
    }
  }
 else {
    roundedSize=(initialSize + 7) / 8 * 8;
  }
  return roundedSize;
}",0.2596934174932371
184477,"private Bitmap createThumbnailFromUri(Uri uri,long id){
  Bitmap bitmap=Util.makeBitmap(IImage.THUMBNAIL_TARGET_SIZE,IImage.UNCONSTRAINED,uri,mContentResolver);
  if (bitmap != null) {
    storeThumbnail(bitmap,id);
  }
 else {
    bitmap=Util.makeBitmap(IImage.MINI_THUMB_TARGET_SIZE,IImage.UNCONSTRAINED,uri,mContentResolver);
  }
  return bitmap;
}","private Bitmap createThumbnailFromUri(Uri uri,long id){
  Bitmap bitmap=Util.makeBitmap(IImage.THUMBNAIL_TARGET_SIZE,IImage.THUMBNAIL_MAX_NUM_PIXELS,uri,mContentResolver);
  if (bitmap != null) {
    storeThumbnail(bitmap,id);
  }
 else {
    bitmap=Util.makeBitmap(IImage.MINI_THUMB_TARGET_SIZE,IImage.MINI_THUMB_MAX_NUM_PIXELS,uri,mContentResolver);
  }
  return bitmap;
}",0.8662068965517241
184478,"private Bitmap createThumbnailFromEXIF(String filePath,long id){
  if (filePath == null)   return null;
  byte[] thumbData=ExifInterface.getExifThumbnail(filePath);
  if (thumbData == null)   return null;
  BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=true;
  BitmapFactory.decodeByteArray(thumbData,0,thumbData.length,options);
  int width=options.outWidth;
  int height=options.outHeight;
  if (width >= IImage.THUMBNAIL_TARGET_SIZE && height >= IImage.THUMBNAIL_TARGET_SIZE) {
    storeThumbnail(thumbData,id,width,height);
    options.inSampleSize=Util.computeSampleSize(options,IImage.MINI_THUMB_TARGET_SIZE,IImage.UNCONSTRAINED);
    options.inDither=false;
    options.inPreferredConfig=Bitmap.Config.ARGB_8888;
    options.inJustDecodeBounds=false;
    return BitmapFactory.decodeByteArray(thumbData,0,thumbData.length,options);
  }
  return null;
}","private Bitmap createThumbnailFromEXIF(String filePath,long id){
  if (filePath == null)   return null;
  byte[] thumbData=ExifInterface.getExifThumbnail(filePath);
  if (thumbData == null)   return null;
  BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=true;
  BitmapFactory.decodeByteArray(thumbData,0,thumbData.length,options);
  int width=options.outWidth;
  int height=options.outHeight;
  if (width >= IImage.THUMBNAIL_TARGET_SIZE && height >= IImage.THUMBNAIL_TARGET_SIZE) {
    storeThumbnail(thumbData,id,width,height);
    options.inSampleSize=Util.computeSampleSize(options,IImage.MINI_THUMB_TARGET_SIZE,IImage.MINI_THUMB_MAX_NUM_PIXELS);
    options.inDither=false;
    options.inPreferredConfig=Bitmap.Config.ARGB_8888;
    options.inJustDecodeBounds=false;
    return BitmapFactory.decodeByteArray(thumbData,0,thumbData.length,options);
  }
  return null;
}",0.9823399558498896
184479,"@Override public Bitmap miniThumbBitmap(){
  return fullSizeBitmap(IImage.MINI_THUMB_TARGET_SIZE,IImage.UNCONSTRAINED);
}","@Override public Bitmap miniThumbBitmap(){
  return fullSizeBitmap(IImage.MINI_THUMB_TARGET_SIZE,IImage.MINI_THUMB_MAX_NUM_PIXELS);
}",0.8740157480314961
184480,"@Override public Bitmap thumbBitmap(boolean rotateAsNeeded){
  return fullSizeBitmap(IImage.THUMBNAIL_TARGET_SIZE,IImage.UNCONSTRAINED);
}","@Override public Bitmap thumbBitmap(boolean rotateAsNeeded){
  return fullSizeBitmap(IImage.THUMBNAIL_TARGET_SIZE,IImage.THUMBNAIL_MAX_NUM_PIXELS);
}",0.9128919860627178
184481,"public Bitmap thumbBitmap(boolean rotateAsNeeded){
  Bitmap bitmap=null;
  if (mContainer.mThumbUri != null) {
    Cursor c=mContentResolver.query(mContainer.mThumbUri,THUMB_PROJECTION,Thumbnails.IMAGE_ID + ""String_Node_Str"",new String[]{String.valueOf(fullSizeImageId())},null);
    try {
      if (c.moveToFirst()) {
        bitmap=decodeCurrentImage(c.getLong(0));
      }
    }
 catch (    RuntimeException ex) {
      return null;
    }
 finally {
      c.close();
    }
  }
  if (bitmap == null) {
    bitmap=fullSizeBitmap(THUMBNAIL_TARGET_SIZE,IImage.UNCONSTRAINED,IImage.NO_ROTATE,IImage.NO_NATIVE);
    bitmap=mContainer.storeThumbnail(bitmap,mId);
  }
  if (bitmap != null && rotateAsNeeded) {
    bitmap=Util.rotate(bitmap,getDegreesRotated());
  }
  return bitmap;
}","public Bitmap thumbBitmap(boolean rotateAsNeeded){
  Bitmap bitmap=null;
  if (mContainer.mThumbUri != null) {
    Cursor c=mContentResolver.query(mContainer.mThumbUri,THUMB_PROJECTION,Thumbnails.IMAGE_ID + ""String_Node_Str"",new String[]{String.valueOf(fullSizeImageId())},null);
    try {
      if (c.moveToFirst()) {
        bitmap=decodeCurrentImage(c.getLong(0));
      }
    }
 catch (    RuntimeException ex) {
      return null;
    }
 finally {
      c.close();
    }
  }
  if (bitmap == null) {
    bitmap=fullSizeBitmap(THUMBNAIL_TARGET_SIZE,THUMBNAIL_MAX_NUM_PIXELS,NO_ROTATE,NO_NATIVE);
    bitmap=mContainer.storeThumbnail(bitmap,mId);
  }
  if (bitmap != null && rotateAsNeeded) {
    bitmap=Util.rotate(bitmap,getDegreesRotated());
  }
  return bitmap;
}",0.9638242894056848
184482,"public Bitmap thumbBitmap(boolean rotateAsNeeded){
  return fullSizeBitmap(THUMBNAIL_TARGET_SIZE,IImage.UNCONSTRAINED,rotateAsNeeded);
}","public Bitmap thumbBitmap(boolean rotateAsNeeded){
  return fullSizeBitmap(THUMBNAIL_TARGET_SIZE,THUMBNAIL_MAX_NUM_PIXELS,rotateAsNeeded);
}",0.8840579710144928
184483,"public Bitmap thumbBitmap(boolean rotateAsNeeded){
  return fullSizeBitmap(THUMBNAIL_TARGET_SIZE,UNCONSTRAINED);
}","public Bitmap thumbBitmap(boolean rotateAsNeeded){
  return fullSizeBitmap(THUMBNAIL_TARGET_SIZE,THUMBNAIL_MAX_NUM_PIXELS);
}",0.895397489539749
184484,"@Override public boolean dispatchTouchEvent(MotionEvent m){
  boolean sup=super.dispatchTouchEvent(m);
  if (mMode == MODE_NORMAL) {
switch (m.getAction()) {
case MotionEvent.ACTION_DOWN:
      showOnScreenControls(NO_AUTO_DISMISS);
    break;
case MotionEvent.ACTION_UP:
  scheduleDismissOnScreenControls();
break;
}
}
if (sup == false) {
mGestureDetector.onTouchEvent(m);
return true;
}
return true;
}","@Override public boolean dispatchTouchEvent(MotionEvent m){
  boolean sup=super.dispatchTouchEvent(m);
  if (mMode == MODE_NORMAL && isTouchOnImage(m)) {
switch (m.getAction()) {
case MotionEvent.ACTION_DOWN:
      showOnScreenControls(NO_AUTO_DISMISS);
    break;
case MotionEvent.ACTION_UP:
  scheduleDismissOnScreenControls();
break;
}
}
if (sup == false) {
mGestureDetector.onTouchEvent(m);
return true;
}
return true;
}",0.9746070133010882
184485,"private void updateItem(Item item){
  if (item != null) {
    mAdapter.addItem(item);
    mAdapter.updateDisplay();
  }
}","private void updateItem(Item item){
  if (mAdapter.getCount() == 0) {
    hideNoImagesView();
  }
  mAdapter.addItem(item);
  mAdapter.updateDisplay();
}",0.7883211678832117
184486,"@Override public boolean onSingleTapConfirmed(MotionEvent e){
  if (!canHandleEvent())   return false;
  select(mCurrentSelection,false);
  int index=computeSelectedIndex(e.getX(),e.getY());
  if (index >= 0 && index < mCount) {
    mListener.onImageClicked(index);
    return true;
  }
  return false;
}","@Override public boolean onSingleTapConfirmed(MotionEvent e){
  if (!canHandleEvent())   return false;
  int index=computeSelectedIndex(e.getX(),e.getY());
  if (index >= 0 && index < mCount) {
    mListener.onImageTapped(index);
    return true;
  }
  return false;
}",0.9230769230769232
184487,"private void paintSelection(Canvas canvas){
  if (mCurrentSelection == SELECT_NONE)   return;
  int row=mCurrentSelection / mColumns;
  int col=mCurrentSelection - (row * mColumns);
  int spacing=mSpec.mCellSpacing;
  int leftSpacing=mSpec.mLeftEdgePadding;
  int xPos=leftSpacing + (col * (mSpec.mCellWidth + spacing));
  int yTop=spacing + (row * mBlockHeight);
  int type=OUTLINE_SELECTED;
  if (mCurrentSelectionPressed) {
    type=OUTLINE_PRESSED;
  }
  canvas.drawBitmap(mOutline[type],xPos,yTop,null);
}","private void paintSelection(Canvas canvas){
  if (mCurrentSelection == INDEX_NONE)   return;
  int row=mCurrentSelection / mColumns;
  int col=mCurrentSelection - (row * mColumns);
  int spacing=mSpec.mCellSpacing;
  int leftSpacing=mSpec.mLeftEdgePadding;
  int xPos=leftSpacing + (col * (mSpec.mCellWidth + spacing));
  int yTop=spacing + (row * mBlockHeight);
  int type=OUTLINE_SELECTED;
  if (mCurrentPressState != 0) {
    type=OUTLINE_PRESSED;
  }
  canvas.drawBitmap(mOutline[type],xPos,yTop,null);
}",0.9685658153241652
184488,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!canHandleEvent()) {
    return false;
  }
  mGestureDetector.onTouchEvent(ev);
  return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!canHandleEvent()) {
    return false;
  }
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    mCurrentPressState|=TAPPING_FLAG;
  invalidate();
break;
case MotionEvent.ACTION_UP:
mCurrentPressState&=~TAPPING_FLAG;
invalidate();
break;
}
mGestureDetector.onTouchEvent(ev);
return true;
}",0.6042884990253411
184489,"@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  if (!canHandleEvent())   return false;
  final float maxVelocity=2500;
  if (velocityY > maxVelocity) {
    velocityY=maxVelocity;
  }
 else   if (velocityY < -maxVelocity) {
    velocityY=-maxVelocity;
  }
  select(SELECT_NONE,false);
  mScroller=new Scroller(getContext());
  mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);
  computeScroll();
  return true;
}","@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  if (!canHandleEvent())   return false;
  if (velocityY > MAX_FLING_VELOCITY) {
    velocityY=MAX_FLING_VELOCITY;
  }
 else   if (velocityY < -MAX_FLING_VELOCITY) {
    velocityY=-MAX_FLING_VELOCITY;
  }
  setSelectedIndex(INDEX_NONE);
  mScroller=new Scroller(getContext());
  mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);
  computeScroll();
  return true;
}",0.6484784889821616
184490,"public void stop(){
  mHandler.removeCallbacks(mLongPressCallback);
  mScroller=null;
  if (mImageBlockManager != null) {
    mImageBlockManager.recycle();
    mImageBlockManager=null;
  }
  mRunning=false;
  mCurrentSelection=SELECT_NONE;
}","public void stop(){
  mHandler.removeCallbacks(mLongPressCallback);
  mScroller=null;
  if (mImageBlockManager != null) {
    mImageBlockManager.recycle();
    mImageBlockManager=null;
  }
  mRunning=false;
  mCurrentSelection=INDEX_NONE;
}",0.9812889812889812
184491,"@Override public boolean onDown(MotionEvent e){
  if (!canHandleEvent())   return false;
  if (mScroller != null && !mScroller.isFinished()) {
    mScroller.forceFinished(true);
    return false;
  }
  int pos=computeSelectedIndex(e.getX(),e.getY());
  if (pos >= 0 && pos < mCount) {
    select(pos,true);
  }
 else {
    select(SELECT_NONE,false);
  }
  return true;
}","@Override public boolean onDown(MotionEvent e){
  if (!canHandleEvent())   return false;
  if (mScroller != null && !mScroller.isFinished()) {
    mScroller.forceFinished(true);
    return false;
  }
  int index=computeSelectedIndex(e.getX(),e.getY());
  if (index >= 0 && index < mCount) {
    setSelectedIndex(index);
  }
 else {
    setSelectedIndex(INDEX_NONE);
  }
  return true;
}",0.8783068783068783
184492,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!canHandleEvent())   return false;
  boolean handled=true;
  int sel=mCurrentSelection;
  boolean pressed=false;
  if (mShowSelection) {
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_RIGHT:
      if (sel != mCount - 1 && (sel % mColumns < mColumns - 1)) {
        sel+=1;
      }
    break;
case KeyEvent.KEYCODE_DPAD_LEFT:
  if (sel > 0 && (sel % mColumns != 0)) {
    sel-=1;
  }
break;
case KeyEvent.KEYCODE_DPAD_UP:
if (sel >= mColumns) {
sel-=mColumns;
}
break;
case KeyEvent.KEYCODE_DPAD_DOWN:
sel=Math.min(mCount - 1,sel + mColumns);
break;
case KeyEvent.KEYCODE_DPAD_CENTER:
pressed=true;
mHandler.postDelayed(mLongPressCallback,ViewConfiguration.getLongPressTimeout());
break;
default :
handled=false;
break;
}
}
 else {
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_RIGHT:
case KeyEvent.KEYCODE_DPAD_LEFT:
case KeyEvent.KEYCODE_DPAD_UP:
case KeyEvent.KEYCODE_DPAD_DOWN:
int startRow=(mScrollY - mSpec.mCellSpacing) / mBlockHeight;
int topPos=startRow * mColumns;
Rect r=getRectForPosition(topPos);
if (r.top < getScrollY()) {
topPos+=mColumns;
}
topPos=Math.min(mCount - 1,topPos);
sel=topPos;
break;
default :
handled=false;
break;
}
}
if (handled) {
select(sel,pressed);
return true;
}
 else {
return super.onKeyDown(keyCode,event);
}
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!canHandleEvent())   return false;
  int sel=mCurrentSelection;
  if (sel != INDEX_NONE) {
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_RIGHT:
      if (sel != mCount - 1 && (sel % mColumns < mColumns - 1)) {
        sel+=1;
      }
    break;
case KeyEvent.KEYCODE_DPAD_LEFT:
  if (sel > 0 && (sel % mColumns != 0)) {
    sel-=1;
  }
break;
case KeyEvent.KEYCODE_DPAD_UP:
if (sel >= mColumns) {
sel-=mColumns;
}
break;
case KeyEvent.KEYCODE_DPAD_DOWN:
sel=Math.min(mCount - 1,sel + mColumns);
break;
case KeyEvent.KEYCODE_DPAD_CENTER:
mCurrentPressState|=CLICKING_FLAG;
mHandler.postDelayed(mLongPressCallback,ViewConfiguration.getLongPressTimeout());
break;
default :
return super.onKeyDown(keyCode,event);
}
}
 else {
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_RIGHT:
case KeyEvent.KEYCODE_DPAD_LEFT:
case KeyEvent.KEYCODE_DPAD_UP:
case KeyEvent.KEYCODE_DPAD_DOWN:
int startRow=(mScrollY - mSpec.mCellSpacing) / mBlockHeight;
int topPos=startRow * mColumns;
Rect r=getRectForPosition(topPos);
if (r.top < getScrollY()) {
topPos+=mColumns;
}
topPos=Math.min(mCount - 1,topPos);
sel=topPos;
break;
default :
return super.onKeyDown(keyCode,event);
}
}
setSelectedIndex(sel);
return true;
}",0.8523827973653623
184493,"@Override public boolean onScroll(MotionEvent e1,MotionEvent e2,float distanceX,float distanceY){
  if (!canHandleEvent())   return false;
  select(SELECT_NONE,false);
  scrollBy(0,(int)distanceY);
  invalidate();
  return true;
}","@Override public boolean onScroll(MotionEvent e1,MotionEvent e2,float distanceX,float distanceY){
  if (!canHandleEvent())   return false;
  setSelectedIndex(INDEX_NONE);
  scrollBy(0,(int)distanceY);
  invalidate();
  return true;
}",0.9244060475161988
184494,"@Override public boolean onKeyUp(int keyCode,KeyEvent event){
  if (!canHandleEvent())   return false;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
    select(GridViewSpecial.ORIGINAL_SELECT,false);
    mHandler.removeCallbacks(mLongPressCallback);
    mListener.onImageClicked(mCurrentSelection);
    return true;
  }
  return super.onKeyUp(keyCode,event);
}","@Override public boolean onKeyUp(int keyCode,KeyEvent event){
  if (!canHandleEvent())   return false;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
    mCurrentPressState&=~CLICKING_FLAG;
    invalidate();
    mHandler.removeCallbacks(mLongPressCallback);
    mListener.onImageClicked(mCurrentSelection);
    return true;
  }
  return super.onKeyUp(keyCode,event);
}",0.8840381991814461
184495,"private void updateItem(Item item){
  if (item != null) {
    mAdapter.addItem(item);
    mAdapter.updateDisplay();
  }
}","private void updateItem(Item item){
  if (mAdapter.getCount() == 0) {
    hideNoImagesView();
  }
  mAdapter.addItem(item);
  mAdapter.updateDisplay();
}",0.7883211678832117
184496,"public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (!canHandleEvent())   return;
  if (getCurrentImage() == null) {
    return;
  }
  boolean isImage=ImageManager.isImage(getCurrentImage());
  if (isImage) {
    menu.add(0,0,0,R.string.view).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        if (!canHandleEvent())         return false;
        onImageClicked(mGvs.getCurrentSelection());
        return true;
      }
    }
);
  }
  menu.setHeaderTitle(isImage ? R.string.context_menu_header : R.string.video_context_menu_header);
  if ((mInclusion & (ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS)) != 0) {
    MenuHelper.MenuItemsResult r=MenuHelper.addImageMenuItems(menu,MenuHelper.INCLUDE_ALL,ImageGallery.this,mHandler,mDeletePhotoRunnable,new MenuHelper.MenuInvoker(){
      public void run(      MenuHelper.MenuCallback cb){
        if (!canHandleEvent()) {
          return;
        }
        cb.run(getCurrentImageUri(),getCurrentImage());
      }
    }
);
    if (r != null) {
      r.gettingReadyToOpen(menu,getCurrentImage());
    }
    if (isImage) {
      addSlideShowMenu(menu,1000);
    }
  }
}","public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (!canHandleEvent())   return;
  if (getCurrentImage() == null) {
    return;
  }
  boolean isImage=ImageManager.isImage(getCurrentImage());
  if (isImage) {
    menu.add(0,0,0,R.string.view).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        if (!canHandleEvent())         return false;
        onImageClicked(mGvs.getCurrentSelection());
        return true;
      }
    }
);
  }
  menu.setHeaderTitle(isImage ? R.string.context_menu_header : R.string.video_context_menu_header);
  if ((mInclusion & (ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS)) != 0) {
    MenuHelper.MenuItemsResult r=MenuHelper.addImageMenuItems(menu,MenuHelper.INCLUDE_ALL,ImageGallery.this,mHandler,mDeletePhotoRunnable,new MenuHelper.MenuInvoker(){
      public void run(      MenuHelper.MenuCallback cb){
        if (!canHandleEvent()) {
          return;
        }
        cb.run(getCurrentImageUri(),getCurrentImage());
        rebake(false,ImageManager.isMediaScannerScanning(getContentResolver()));
      }
    }
);
    if (r != null) {
      r.gettingReadyToOpen(menu,getCurrentImage());
    }
    if (isImage) {
      addSlideShowMenu(menu,1000);
    }
  }
}",0.9687620516775935
184497,"public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (!canHandleEvent())   return;
  if (getCurrentImage() == null) {
    return;
  }
  boolean isImage=ImageManager.isImage(getCurrentImage());
  if (isImage) {
    menu.add(0,0,0,R.string.view).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        if (!canHandleEvent())         return false;
        onImageClicked(mGvs.getCurrentSelection());
        return true;
      }
    }
);
  }
  menu.setHeaderTitle(isImage ? R.string.context_menu_header : R.string.video_context_menu_header);
  if ((mInclusion & (ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS)) != 0) {
    MenuHelper.MenuItemsResult r=MenuHelper.addImageMenuItems(menu,MenuHelper.INCLUDE_ALL,ImageGallery.this,mHandler,mDeletePhotoRunnable,new MenuHelper.MenuInvoker(){
      public void run(      MenuHelper.MenuCallback cb){
        if (!canHandleEvent()) {
          return;
        }
        cb.run(getCurrentImageUri(),getCurrentImage());
      }
    }
);
    if (r != null) {
      r.gettingReadyToOpen(menu,getCurrentImage());
    }
    if (isImage) {
      addSlideShowMenu(menu,1000);
    }
  }
}","public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (!canHandleEvent())   return;
  if (getCurrentImage() == null) {
    return;
  }
  boolean isImage=ImageManager.isImage(getCurrentImage());
  if (isImage) {
    menu.add(0,0,0,R.string.view).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        if (!canHandleEvent())         return false;
        onImageClicked(mGvs.getCurrentSelection());
        return true;
      }
    }
);
  }
  menu.setHeaderTitle(isImage ? R.string.context_menu_header : R.string.video_context_menu_header);
  if ((mInclusion & (ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS)) != 0) {
    MenuHelper.MenuItemsResult r=MenuHelper.addImageMenuItems(menu,MenuHelper.INCLUDE_ALL,ImageGallery.this,mHandler,mDeletePhotoRunnable,new MenuHelper.MenuInvoker(){
      public void run(      MenuHelper.MenuCallback cb){
        if (!canHandleEvent()) {
          return;
        }
        cb.run(getCurrentImageUri(),getCurrentImage());
        rebake(false,ImageManager.isMediaScannerScanning(getContentResolver()));
      }
    }
);
    if (r != null) {
      r.gettingReadyToOpen(menu,getCurrentImage());
    }
    if (isImage) {
      addSlideShowMenu(menu,1000);
    }
  }
}",0.9687620516775935
184498,"public void run(){
  mActivity.removeLifeCycleListener(BackgroundJob.this);
  mDialog.dismiss();
}","public void run(){
  try {
    mJob.run();
  }
  finally {
    mHandler.post(mCleanupRunner);
  }
}",0.416243654822335
184499,"public void run(){
  while (true) {
    WorkItem workItem=null;
synchronized (mQueue) {
      if (mDone) {
        break;
      }
      if (!mQueue.isEmpty()) {
        workItem=mQueue.remove(0);
      }
 else {
        long t=IDLE_TIME - (System.nanoTime() - lastWorkTime);
        if (t > 0) {
          try {
            mQueue.wait(t / 1000000);
          }
 catch (          InterruptedException ex) {
          }
          continue;
        }
        if (!mThumbnailChecker.hasMoreThumbnailsToCheck()) {
          try {
            mQueue.wait();
          }
 catch (          InterruptedException ex) {
          }
          continue;
        }
      }
    }
    if (workItem == null) {
      mThumbnailChecker.checkNextThumbnail();
      continue;
    }
    final Bitmap b=workItem.mImage.miniThumbBitmap();
    if (workItem.mOnLoadedRunnable != null) {
      workItem.mOnLoadedRunnable.run(b);
    }
    lastWorkTime=System.nanoTime();
  }
}","public void run(){
  while (true) {
    WorkItem workItem=null;
synchronized (mQueue) {
      if (mDone) {
        break;
      }
      if (!mQueue.isEmpty()) {
        workItem=mQueue.remove(0);
      }
 else {
        if (!mThumbnailChecker.hasMoreThumbnailsToCheck()) {
          try {
            mQueue.wait();
          }
 catch (          InterruptedException ex) {
          }
          continue;
        }
 else {
          long t=IDLE_TIME - (System.nanoTime() - lastWorkTime);
          t=t / 1000000;
          if (t > 0) {
            try {
              mQueue.wait(t);
            }
 catch (            InterruptedException ex) {
            }
            continue;
          }
        }
      }
    }
    if (workItem == null) {
      mThumbnailChecker.checkNextThumbnail();
      continue;
    }
    final Bitmap b=workItem.mImage.miniThumbBitmap();
    if (workItem.mOnLoadedRunnable != null) {
      workItem.mOnLoadedRunnable.run(b);
    }
    lastWorkTime=System.nanoTime();
  }
}",0.6663249615581753
184500,"private Uri getCurrentUri(){
  IImage image=mAllImages.getImageAt(mCurrentPosition);
  return image.fullSizeImageUri();
}","private Uri getCurrentUri(){
  if (mAllImages.getCount() == 0)   return null;
  IImage image=mAllImages.getImageAt(mCurrentPosition);
  return image.fullSizeImageUri();
}",0.8316151202749141
184501,"private Uri getCurrentUri(){
  IImage image=mAllImages.getImageAt(mCurrentPosition);
  return image.fullSizeImageUri();
}","private Uri getCurrentUri(){
  if (mAllImages.getCount() == 0)   return null;
  IImage image=mAllImages.getImageAt(mCurrentPosition);
  return image.fullSizeImageUri();
}",0.8316151202749141
184502,"public void run(){
  while (true) {
    WorkItem workItem=null;
synchronized (mQueue) {
      if (mDone) {
        break;
      }
      if (!mQueue.isEmpty()) {
        workItem=mQueue.remove(0);
      }
 else {
        long t=IDLE_TIME - (System.nanoTime() - lastWorkTime);
        if (t > 0) {
          try {
            mQueue.wait(t / 1000000);
          }
 catch (          InterruptedException ex) {
          }
          continue;
        }
        if (!mThumbnailChecker.hasMoreThumbnailsToCheck()) {
          try {
            mQueue.wait();
          }
 catch (          InterruptedException ex) {
          }
          continue;
        }
      }
    }
    if (workItem == null) {
      mThumbnailChecker.checkNextThumbnail();
      continue;
    }
    final Bitmap b=workItem.mImage.miniThumbBitmap();
    if (workItem.mOnLoadedRunnable != null) {
      workItem.mOnLoadedRunnable.run(b);
    }
    lastWorkTime=System.nanoTime();
  }
}","public void run(){
  while (true) {
    WorkItem workItem=null;
synchronized (mQueue) {
      if (mDone) {
        break;
      }
      if (!mQueue.isEmpty()) {
        workItem=mQueue.remove(0);
      }
 else {
        if (!mThumbnailChecker.hasMoreThumbnailsToCheck()) {
          try {
            mQueue.wait();
          }
 catch (          InterruptedException ex) {
          }
          continue;
        }
 else {
          long t=IDLE_TIME - (System.nanoTime() - lastWorkTime);
          t=t / 1000000;
          if (t > 0) {
            try {
              mQueue.wait(t);
            }
 catch (            InterruptedException ex) {
            }
            continue;
          }
        }
      }
    }
    if (workItem == null) {
      mThumbnailChecker.checkNextThumbnail();
      continue;
    }
    final Bitmap b=workItem.mImage.miniThumbBitmap();
    if (workItem.mOnLoadedRunnable != null) {
      workItem.mOnLoadedRunnable.run(b);
    }
    lastWorkTime=System.nanoTime();
  }
}",0.6663249615581753
184503,"private Uri getCurrentUri(){
  IImage image=mAllImages.getImageAt(mCurrentPosition);
  return image.fullSizeImageUri();
}","private Uri getCurrentUri(){
  if (mAllImages.getCount() == 0)   return null;
  IImage image=mAllImages.getImageAt(mCurrentPosition);
  return image.fullSizeImageUri();
}",0.8316151202749141
184504,"private Uri getCurrentUri(){
  IImage image=mAllImages.getImageAt(mCurrentPosition);
  return image.fullSizeImageUri();
}","private Uri getCurrentUri(){
  if (mAllImages.getCount() == 0)   return null;
  IImage image=mAllImages.getImageAt(mCurrentPosition);
  return image.fullSizeImageUri();
}",0.8316151202749141
184505,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case MenuHelper.RESULT_COMMON_MENU_CROP:
    if (resultCode == RESULT_OK) {
      mSavedUri=Uri.parse(data.getAction());
      mAllImages=null;
    }
  break;
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case MenuHelper.RESULT_COMMON_MENU_CROP:
    if (resultCode == RESULT_OK) {
      mSavedUri=Uri.parse(data.getAction());
    }
  break;
}
}",0.9558541266794626
184506,"@Override public void onStart(){
  super.onStart();
  init(mSavedUri,mAllImages);
  if (mCameraReviewMode) {
    updateLastImage();
  }
  int count=mAllImages.getCount();
  if (count == 0) {
    finish();
  }
 else   if (count <= mCurrentPosition) {
    mCurrentPosition=count - 1;
  }
  if (mGetter == null) {
    makeGetter();
  }
  if (mMode == MODE_SLIDESHOW) {
    loadNextImage(mCurrentPosition,0,true);
  }
 else {
    setImage(mCurrentPosition);
  }
}","@Override public void onStart(){
  super.onStart();
  mPaused=false;
  init(mSavedUri,mAllImagesState);
  if (mCameraReviewMode) {
    updateLastImage();
  }
  int count=mAllImages.getCount();
  if (count == 0) {
    finish();
  }
 else   if (count <= mCurrentPosition) {
    mCurrentPosition=count - 1;
  }
  if (mGetter == null) {
    makeGetter();
  }
  if (mMode == MODE_SLIDESHOW) {
    loadNextImage(mCurrentPosition,0,true);
  }
 else {
    setImage(mCurrentPosition);
  }
}",0.9765957446808512
184507,"@Override public void onStop(){
  super.onStop();
  mGetter.cancelCurrent();
  mGetter.stop();
  mGetter=null;
  setMode(MODE_NORMAL);
  mHandler.removeAllGetterCallbacks();
  mSavedUri=getCurrentUri();
  mAllImages.deactivate();
  mDismissOnScreenControlsRunnable.run();
  if (mDismissOnScreenControlsRunnable != null) {
    mHandler.removeCallbacks(mDismissOnScreenControlsRunnable);
  }
  mImageView.clear();
  mCache.clear();
  for (  ImageViewTouchBase iv : mSlideShowImageViews) {
    iv.clear();
  }
}","@Override public void onStop(){
  super.onStop();
  mPaused=true;
  mGetter.cancelCurrent();
  mGetter.stop();
  mGetter=null;
  setMode(MODE_NORMAL);
  mHandler.removeAllGetterCallbacks();
  mSavedUri=getCurrentUri();
  mAllImages.deactivate();
  mAllImages.close();
  mAllImages=null;
  mDismissOnScreenControlsRunnable.run();
  if (mDismissOnScreenControlsRunnable != null) {
    mHandler.removeCallbacks(mDismissOnScreenControlsRunnable);
  }
  mImageView.clear();
  mCache.clear();
  for (  ImageViewTouchBase iv : mSlideShowImageViews) {
    iv.clear();
  }
}",0.9468779123951536
184508,"private boolean init(Uri uri,IImageList imageList){
  if (uri == null)   return false;
  mAllImages=(imageList == null) ? buildImageListFromUri(uri) : imageList;
  mAllImages.open(getContentResolver());
  IImage image=mAllImages.getImageForUri(uri);
  if (image == null)   return false;
  mCurrentPosition=mAllImages.getImageIndex(image);
  mLastSlideShowImage=mCurrentPosition;
  return true;
}","private boolean init(Uri uri,IImageList imageList){
  if (uri == null)   return false;
  mAllImagesState=(imageList == null) ? buildImageListFromUri(uri) : imageList;
  mAllImages=mAllImagesState;
  mAllImages.open(getContentResolver());
  IImage image=mAllImages.getImageForUri(uri);
  if (image == null)   return false;
  mCurrentPosition=mAllImages.getImageIndex(image);
  mLastSlideShowImage=mCurrentPosition;
  return true;
}",0.9575757575757576
184509,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  setMode(MODE_NORMAL);
  if (mImageMenuRunnable != null) {
    mImageMenuRunnable.gettingReadyToOpen(menu,mAllImages.getImageAt(mCurrentPosition));
  }
  Uri uri=mAllImages.getImageAt(mCurrentPosition).fullSizeImageUri();
  MenuHelper.enableShareMenuItem(menu,!MenuHelper.isMMSUri(uri));
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  if (mPaused)   return false;
  setMode(MODE_NORMAL);
  if (mImageMenuRunnable != null) {
    mImageMenuRunnable.gettingReadyToOpen(menu,mAllImages.getImageAt(mCurrentPosition));
  }
  Uri uri=mAllImages.getImageAt(mCurrentPosition).fullSizeImageUri();
  MenuHelper.enableShareMenuItem(menu,!MenuHelper.isMMSUri(uri));
  return true;
}",0.962605548854041
184510,"public IImage getImageForUri(Uri uri){
  long matchId;
  try {
    matchId=ContentUris.parseId(uri);
  }
 catch (  NumberFormatException ex) {
    Log.i(TAG,""String_Node_Str"" + uri,ex);
    return null;
  }
  Cursor cursor=getCursor();
synchronized (cursor) {
    cursor.moveToPosition(-1);
    for (int i=0; cursor.moveToNext(); ++i) {
      if (getImageId(cursor) == matchId) {
        BaseImage image=mCache.get(i);
        if (image == null) {
          image=loadImageFromCursor(cursor);
          mCache.put(i,image);
        }
        return image;
      }
    }
    return null;
  }
}","public IImage getImageForUri(Uri uri){
  if (!isChildImageUri(uri))   return null;
  long matchId;
  try {
    matchId=ContentUris.parseId(uri);
  }
 catch (  NumberFormatException ex) {
    Log.i(TAG,""String_Node_Str"" + uri,ex);
    return null;
  }
  Cursor cursor=getCursor();
synchronized (cursor) {
    cursor.moveToPosition(-1);
    for (int i=0; cursor.moveToNext(); ++i) {
      if (getImageId(cursor) == matchId) {
        BaseImage image=mCache.get(i);
        if (image == null) {
          image=loadImageFromCursor(cursor);
          mCache.put(i,image);
        }
        return image;
      }
    }
    return null;
  }
}",0.9641693811074918
184511,"public void open(ContentResolver resolver){
  mContentResolver=resolver;
  mCursor=createCursor();
}","public void open(ContentResolver resolver){
  mContentResolver=resolver;
  mCursor=createCursor();
  mCache.clear();
}",0.9174311926605504
184512,"public void open(ContentResolver cr){
  for (int i=0, n=mSubList.length; i < n; ++i) {
    IImageList list=mSubList[i];
    if (list instanceof BaseImageList) {
      ((BaseImageList)list).open(cr);
    }
    MergeSlot slot=new MergeSlot(list,i);
    if (slot.next())     mQueue.add(slot);
  }
}","public void open(ContentResolver cr){
  mSkipList=new long[16];
  mSkipListSize=0;
  mSkipCounts=new int[mSubList.length];
  mLastListIndex=-1;
  mQueue.clear();
  for (int i=0, n=mSubList.length; i < n; ++i) {
    IImageList list=mSubList[i];
    if (list instanceof BaseImageList) {
      ((BaseImageList)list).open(cr);
    }
    MergeSlot slot=new MergeSlot(list,i);
    if (slot.next())     mQueue.add(slot);
  }
}",0.8263305322128851
184513,"public void onClick(View v){
switch (v.getId()) {
case R.id.btn_delete:
    MenuHelper.deletePhoto(this,mDeletePhotoRunnable);
  break;
case R.id.btn_play:
startPlayVideoActivity();
break;
case R.id.btn_share:
{
IImage image=mAllImages.getImageAt(mCurrentPosition);
if (MenuHelper.isMMSUri(image.fullSizeImageUri())) {
return;
}
startShareMediaActivity(image);
break;
}
case R.id.btn_set_as:
{
Uri u=mAllImages.getImageAt(mCurrentPosition).fullSizeImageUri();
Intent intent=new Intent(Intent.ACTION_ATTACH_DATA,u);
try {
startActivity(Intent.createChooser(intent,getText(R.string.setImage)));
}
 catch (android.content.ActivityNotFoundException ex) {
Toast.makeText(this,R.string.no_way_to_share_video,Toast.LENGTH_SHORT).show();
}
break;
}
case R.id.btn_done:
finish();
break;
case R.id.next_image:
moveNextOrPrevious(1);
break;
case R.id.prev_image:
moveNextOrPrevious(-1);
break;
}
}","public void onClick(View v){
switch (v.getId()) {
case R.id.btn_delete:
    MenuHelper.deleteImage(this,mDeletePhotoRunnable,mAllImages.getImageAt(mCurrentPosition));
  break;
case R.id.btn_play:
startPlayVideoActivity();
break;
case R.id.btn_share:
{
IImage image=mAllImages.getImageAt(mCurrentPosition);
if (MenuHelper.isMMSUri(image.fullSizeImageUri())) {
return;
}
startShareMediaActivity(image);
break;
}
case R.id.btn_set_as:
{
Uri u=mAllImages.getImageAt(mCurrentPosition).fullSizeImageUri();
Intent intent=new Intent(Intent.ACTION_ATTACH_DATA,u);
try {
startActivity(Intent.createChooser(intent,getText(R.string.setImage)));
}
 catch (android.content.ActivityNotFoundException ex) {
Toast.makeText(this,R.string.no_way_to_share_video,Toast.LENGTH_SHORT).show();
}
break;
}
case R.id.btn_done:
finish();
break;
case R.id.next_image:
moveNextOrPrevious(1);
break;
case R.id.prev_image:
moveNextOrPrevious(-1);
break;
}
}",0.9525386313465783
184514,"public void onClick(View v){
switch (v.getId()) {
case R.id.btn_delete:
    MenuHelper.deletePhoto(this,mDeletePhotoRunnable);
  break;
case R.id.btn_play:
startPlayVideoActivity();
break;
case R.id.btn_share:
{
IImage image=mAllImages.getImageAt(mCurrentPosition);
if (MenuHelper.isMMSUri(image.fullSizeImageUri())) {
return;
}
startShareMediaActivity(image);
break;
}
case R.id.btn_set_as:
{
Uri u=mAllImages.getImageAt(mCurrentPosition).fullSizeImageUri();
Intent intent=new Intent(Intent.ACTION_ATTACH_DATA,u);
try {
startActivity(Intent.createChooser(intent,getText(R.string.setImage)));
}
 catch (android.content.ActivityNotFoundException ex) {
Toast.makeText(this,R.string.no_way_to_share_video,Toast.LENGTH_SHORT).show();
}
break;
}
case R.id.btn_done:
finish();
break;
case R.id.next_image:
moveNextOrPrevious(1);
break;
case R.id.prev_image:
moveNextOrPrevious(-1);
break;
}
}","public void onClick(View v){
switch (v.getId()) {
case R.id.btn_delete:
    MenuHelper.deleteImage(this,mDeletePhotoRunnable,mAllImages.getImageAt(mCurrentPosition));
  break;
case R.id.btn_play:
startPlayVideoActivity();
break;
case R.id.btn_share:
{
IImage image=mAllImages.getImageAt(mCurrentPosition);
if (MenuHelper.isMMSUri(image.fullSizeImageUri())) {
return;
}
startShareMediaActivity(image);
break;
}
case R.id.btn_set_as:
{
Uri u=mAllImages.getImageAt(mCurrentPosition).fullSizeImageUri();
Intent intent=new Intent(Intent.ACTION_ATTACH_DATA,u);
try {
startActivity(Intent.createChooser(intent,getText(R.string.setImage)));
}
 catch (android.content.ActivityNotFoundException ex) {
Toast.makeText(this,R.string.no_way_to_share_video,Toast.LENGTH_SHORT).show();
}
break;
}
case R.id.btn_done:
finish();
break;
case R.id.next_image:
moveNextOrPrevious(1);
break;
case R.id.prev_image:
moveNextOrPrevious(-1);
break;
}
}",0.9525386313465783
184515,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case MenuHelper.RESULT_COMMON_MENU_CROP:
    if (resultCode == RESULT_OK) {
      mSavedUri=Uri.parse(data.getAction());
    }
  break;
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case MenuHelper.RESULT_COMMON_MENU_CROP:
    if (resultCode == RESULT_OK) {
      mSavedUri=Uri.parse(data.getAction());
      mAllImages=null;
    }
  break;
}
}",0.9558541266794626
184516,"void initializeFirstTime(){
  if (mFirstTimeInitialized)   return;
  mOrientationListener=new OrientationEventListener(Camera.this){
    @Override public void onOrientationChanged(    int orientation){
      if (orientation != ORIENTATION_UNKNOWN) {
        mLastOrientation=orientation;
      }
    }
  }
;
  mOrientationListener.enable();
  mLocationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  mContentResolver=getContentResolver();
  if (!mIsImageCaptureIntent) {
    findViewById(R.id.video_button).setOnClickListener(this);
    mLastPictureButton=(ImageView)findViewById(R.id.review_button);
    mLastPictureButton.setOnClickListener(this);
    mThumbController=new ThumbnailController(mLastPictureButton,mContentResolver);
    mThumbController.loadData(ImageManager.getLastImageThumbPath());
    if (!mThumbController.isUriValid()) {
      updateLastImage();
    }
    mThumbController.updateDisplayIfNeeded();
  }
 else {
    findViewById(R.id.review_button).setVisibility(View.INVISIBLE);
    findViewById(R.id.video_button).setVisibility(View.INVISIBLE);
    ViewGroup cameraView=(ViewGroup)findViewById(R.id.camera);
    getLayoutInflater().inflate(R.layout.post_picture_panel,cameraView);
    mPostCaptureAlert=findViewById(R.id.post_picture_panel);
  }
  findViewById(R.id.photo_indicator).setVisibility(View.VISIBLE);
  mShutterButton=(ShutterButton)findViewById(R.id.camera_button);
  mShutterButton.setOnShutterButtonListener(this);
  mShutterButton.setVisibility(View.VISIBLE);
  mFocusRectangle=(FocusRectangle)findViewById(R.id.focus_rectangle);
  updateFocusIndicator();
  mGpsIndicator=(ImageView)findViewById(R.id.gps_indicator);
  mGpsIndicator.setImageResource(R.drawable.ic_gps_active_camera);
  ImageManager.ensureOSXCompatibleFolder();
  calculatePicturesRemaining();
  installIntentFilter();
  initializeFocusTone();
  initializeZoom();
  mFirstTimeInitialized=true;
}","void initializeFirstTime(){
  if (mFirstTimeInitialized)   return;
  mOrientationListener=new OrientationEventListener(Camera.this){
    @Override public void onOrientationChanged(    int orientation){
      if (orientation != ORIENTATION_UNKNOWN) {
        mLastOrientation=orientation;
      }
    }
  }
;
  mOrientationListener.enable();
  mLocationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  mContentResolver=getContentResolver();
  if (!mIsImageCaptureIntent) {
    findViewById(R.id.video_button).setOnClickListener(this);
    mLastPictureButton=(ImageView)findViewById(R.id.review_button);
    mLastPictureButton.setOnClickListener(this);
    mThumbController=new ThumbnailController(mLastPictureButton,mContentResolver);
    mThumbController.loadData(ImageManager.getLastImageThumbPath());
    updateThumbnailButton();
  }
 else {
    findViewById(R.id.review_button).setVisibility(View.INVISIBLE);
    findViewById(R.id.video_button).setVisibility(View.INVISIBLE);
    ViewGroup cameraView=(ViewGroup)findViewById(R.id.camera);
    getLayoutInflater().inflate(R.layout.post_picture_panel,cameraView);
    mPostCaptureAlert=findViewById(R.id.post_picture_panel);
  }
  findViewById(R.id.photo_indicator).setVisibility(View.VISIBLE);
  mShutterButton=(ShutterButton)findViewById(R.id.camera_button);
  mShutterButton.setOnShutterButtonListener(this);
  mShutterButton.setVisibility(View.VISIBLE);
  mFocusRectangle=(FocusRectangle)findViewById(R.id.focus_rectangle);
  updateFocusIndicator();
  mGpsIndicator=(ImageView)findViewById(R.id.gps_indicator);
  mGpsIndicator.setImageResource(R.drawable.ic_gps_active_camera);
  ImageManager.ensureOSXCompatibleFolder();
  calculatePicturesRemaining();
  installIntentFilter();
  initializeFocusTone();
  initializeZoom();
  mFirstTimeInitialized=true;
}",0.9687979539641944
184517,"void initializeSecondTime(){
  mOrientationListener.enable();
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  installIntentFilter();
  initializeFocusTone();
}","void initializeSecondTime(){
  mOrientationListener.enable();
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  installIntentFilter();
  initializeFocusTone();
  if (!mIsImageCaptureIntent) {
    updateThumbnailButton();
  }
}",0.854586129753915
184518,"public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  mSurfaceHolder=holder;
  mViewFinderWidth=w;
  mViewFinderHeight=h;
  if (mPausing)   return;
  mSurfaceView.setVisibility(View.VISIBLE);
  if (mStatus == SNAPSHOT_IN_PROGRESS)   return;
  startPreview();
  if (!mFirstTimeInitialized) {
    mHandler.sendEmptyMessage(FIRST_TIME_INIT);
  }
}","public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  mSurfaceHolder=holder;
  mViewFinderWidth=w;
  mViewFinderHeight=h;
  if (mPausing)   return;
  mSurfaceView.setVisibility(View.VISIBLE);
  if (mStatus == SNAPSHOT_IN_PROGRESS)   return;
  startPreview();
  if (!mFirstTimeInitialized) {
    mHandler.sendEmptyMessage(FIRST_TIME_INIT);
  }
 else {
    initializeSecondTime();
  }
}",0.948051948051948
184519,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case RESTART_PREVIEW:
{
      restartPreview();
      break;
    }
case STORE_IMAGE_DONE:
{
    if (!mIsImageCaptureIntent) {
      setLastPictureThumb((byte[])msg.obj,mImageCapture.getLastCaptureUri());
      if (!mThumbController.isUriValid()) {
        updateLastImage();
      }
      mThumbController.updateDisplayIfNeeded();
    }
 else {
      showPostCaptureAlert();
    }
    mStoreImageThread=null;
    break;
  }
case CLEAR_SCREEN_DELAY:
{
  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  break;
}
case FIRST_TIME_INIT:
{
initializeFirstTime();
break;
}
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case RESTART_PREVIEW:
{
      restartPreview();
      break;
    }
case STORE_IMAGE_DONE:
{
    if (!mIsImageCaptureIntent) {
      setLastPictureThumb((byte[])msg.obj,mImageCapture.getLastCaptureUri());
      updateThumbnailButton();
    }
 else {
      showPostCaptureAlert();
    }
    mStoreImageThread=null;
    break;
  }
case CLEAR_SCREEN_DELAY:
{
  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  break;
}
case FIRST_TIME_INIT:
{
initializeFirstTime();
break;
}
}
}",0.8978930307941653
184520,"public V get(K key){
  V value=mLruMap.get(key);
  if (value != null)   return value;
  WeakReference<V> ref=mWeakMap.get(key);
  value=ref == null ? null : ref.get();
  if (value == null && ref != null) {
    mWeakMap.remove(key);
  }
  return value;
}","public synchronized V get(K key){
  V value=mLruMap.get(key);
  if (value != null)   return value;
  WeakReference<V> ref=mWeakMap.get(key);
  value=ref == null ? null : ref.get();
  if (value == null && ref != null) {
    mWeakMap.remove(key);
  }
  return value;
}",0.97495183044316
184521,"public void clear(){
  mLruMap.clear();
  mWeakMap.clear();
}","public synchronized void clear(){
  mLruMap.clear();
  mWeakMap.clear();
}",0.9037037037037036
184522,"public V put(K key,V value){
  if (++mAddBeforeSweep > MAXIMUM_ADD_BEFORE_SWEEP) {
    mAddBeforeSweep=0;
    Iterator<Map.Entry<K,WeakReference<V>>> iter=mWeakMap.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<K,WeakReference<V>> entry=iter.next();
      if (entry.getValue().get() == null)       iter.remove();
    }
  }
  mLruMap.put(key,value);
  WeakReference<V> ref=mWeakMap.put(key,new WeakReference<V>(value));
  return ref == null ? null : ref.get();
}","public synchronized V put(K key,V value){
  if (++mAddBeforeSweep > MAXIMUM_ADD_BEFORE_SWEEP) {
    mAddBeforeSweep=0;
    Iterator<Map.Entry<K,WeakReference<V>>> iter=mWeakMap.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<K,WeakReference<V>> entry=iter.next();
      if (entry.getValue().get() == null)       iter.remove();
    }
  }
  mLruMap.put(key,value);
  WeakReference<V> ref=mWeakMap.put(key,new WeakReference<V>(value));
  return ref == null ? null : ref.get();
}",0.9866939611054248
184523,"public void onShutterButtonClick(ShutterButton button){
  if (mPausing) {
    return;
  }
switch (button.getId()) {
case R.id.camera_button:
    if (mStoreImageThread == null) {
      doSnap();
    }
 else {
      Toast.makeText(Camera.this,getResources().getString(R.string.wait),Toast.LENGTH_SHORT);
    }
  break;
}
}","public void onShutterButtonClick(ShutterButton button){
  if (mPausing) {
    return;
  }
switch (button.getId()) {
case R.id.camera_button:
    if (mIsImageCaptureIntent && mPostCaptureAlert.getVisibility() == View.VISIBLE) {
      hidePostCaptureAlert();
      restartPreview();
    }
 else     if (mStoreImageThread == null) {
      doSnap();
    }
 else {
      Toast.makeText(Camera.this,getResources().getString(R.string.wait),Toast.LENGTH_SHORT);
    }
  break;
}
}",0.8080808080808081
184524,"public void surfaceCreated(SurfaceHolder holder){
  mSurfaceHolder=holder;
}","public void surfaceCreated(SurfaceHolder holder){
}",0.8031496062992126
184525,"public void onPictureTaken(final byte[] jpegData,final android.hardware.Camera camera){
  if (mPausing) {
    return;
  }
  mJpegPictureCallbackTime=System.currentTimeMillis();
  mRawPictureAndJpegPictureCallbackTime=mJpegPictureCallbackTime - mRawPictureCallbackTime;
  Log.v(TAG,""String_Node_Str"" + mRawPictureAndJpegPictureCallbackTime + ""String_Node_Str"");
  if (jpegData != null) {
    mStoreImageThread=new Thread(){
      public void run(){
        mImageCapture.storeImage(jpegData,camera,mLocation);
      }
    }
;
    mStoreImageThread.start();
  }
  mStatus=SNAPSHOT_COMPLETED;
  if (mKeepAndRestartPreview) {
    long delay=1500 - (System.currentTimeMillis() - mRawPictureCallbackTime);
    mHandler.sendEmptyMessageDelayed(RESTART_PREVIEW,Math.max(delay,0));
  }
}","public void onPictureTaken(final byte[] jpegData,final android.hardware.Camera camera){
  if (mPausing) {
    return;
  }
  mJpegPictureCallbackTime=System.currentTimeMillis();
  mRawPictureAndJpegPictureCallbackTime=mJpegPictureCallbackTime - mRawPictureCallbackTime;
  Log.v(TAG,""String_Node_Str"" + mRawPictureAndJpegPictureCallbackTime + ""String_Node_Str"");
  if (jpegData != null) {
    mStoreImageThread=new Thread(){
      public void run(){
        mImageCapture.storeImage(jpegData,camera,mLocation);
      }
    }
;
    mStoreImageThread.start();
  }
  if (!mIsImageCaptureIntent) {
    long delay=1500 - (System.currentTimeMillis() - mRawPictureCallbackTime);
    mHandler.sendEmptyMessageDelayed(RESTART_PREVIEW,Math.max(delay,0));
  }
}",0.9515072083879424
184526,"@Override public void onResume(){
  super.onResume();
  mPausing=false;
  mJpegPictureCallbackTime=0;
  mImageCapture=new ImageCapture();
  if (mPendingFirstTimeInit) {
    mHandler.sendEmptyMessage(FIRST_TIME_INIT);
    mPendingFirstTimeInit=false;
  }
 else   if (mFirstTimeInitialized) {
    mSurfaceView.setAspectRatio(VideoPreview.DONT_CARE);
    setViewFinder(mOriginalViewFinderWidth,mOriginalViewFinderHeight);
    mStatus=IDLE;
    initializeSecondTime();
  }
  mHandler.sendEmptyMessageDelayed(CLEAR_SCREEN_DELAY,SCREEN_DELAY);
}","@Override public void onResume(){
  super.onResume();
  mPausing=false;
  mJpegPictureCallbackTime=0;
  mImageCapture=new ImageCapture();
  if (mSurfaceHolder != null) {
    mSurfaceView.setAspectRatio(VideoPreview.DONT_CARE);
    startPreview();
    if (!mFirstTimeInitialized) {
      mHandler.sendEmptyMessage(FIRST_TIME_INIT);
    }
 else {
      initializeSecondTime();
    }
  }
  mHandler.sendEmptyMessageDelayed(CLEAR_SCREEN_DELAY,SCREEN_DELAY);
}",0.6458752515090543
184527,"public void storeImage(final byte[] data,android.hardware.Camera camera,Location loc){
  boolean captureOnly=mIsImageCaptureIntent;
  Message msg=mHandler.obtainMessage(STORE_IMAGE_DONE);
  if (!captureOnly) {
    storeImage(data,loc);
    sendBroadcast(new Intent(""String_Node_Str"",mLastContentUri));
    msg.obj=data;
  }
 else {
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inSampleSize=4;
    mCaptureOnlyBitmap=BitmapFactory.decodeByteArray(data,0,data.length,options);
    cancelAutomaticPreviewRestart();
  }
  mHandler.sendMessage(msg);
}","public void storeImage(final byte[] data,android.hardware.Camera camera,Location loc){
  Message msg=mHandler.obtainMessage(STORE_IMAGE_DONE);
  if (!mIsImageCaptureIntent) {
    storeImage(data,loc);
    sendBroadcast(new Intent(""String_Node_Str"",mLastContentUri));
    msg.obj=data;
  }
 else {
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inSampleSize=4;
    mCaptureOnlyBitmap=BitmapFactory.decodeByteArray(data,0,data.length,options);
  }
  mHandler.sendMessage(msg);
}",0.9055555555555556
184528,"private void restartPreview(){
  VideoPreview surfaceView=mSurfaceView;
  surfaceView.setAspectRatio(VideoPreview.DONT_CARE);
  setViewFinder(mOriginalViewFinderWidth,mOriginalViewFinderHeight);
  mStatus=IDLE;
  calculatePicturesRemaining();
}","private void restartPreview(){
  mSurfaceView.setAspectRatio(VideoPreview.DONT_CARE);
  startPreview();
  calculatePicturesRemaining();
}",0.6824146981627297
184529,"@Override protected void onPause(){
  mPausing=true;
  stopPreview();
  closeCamera();
  waitForStoreImageThread();
  if (mFirstTimeInitialized) {
    mOrientationListener.disable();
    mGpsIndicator.setVisibility(View.INVISIBLE);
    if (!mIsImageCaptureIntent) {
      mThumbController.storeData(ImageManager.getLastImageThumbPath());
    }
    hidePostCaptureAlert();
  }
  if (mDidRegister) {
    unregisterReceiver(mReceiver);
    mDidRegister=false;
  }
  stopReceivingLocationUpdates();
  if (mFocusToneGenerator != null) {
    mFocusToneGenerator.release();
    mFocusToneGenerator=null;
  }
  if (mStorageHint != null) {
    mStorageHint.cancel();
    mStorageHint=null;
  }
  mImageCapture.clearLastBitmap();
  mImageCapture=null;
  if (mZoomButtons != null) {
    mZoomButtons.setVisible(false);
  }
  mHandler.removeMessages(CLEAR_SCREEN_DELAY);
  mHandler.removeMessages(RESTART_PREVIEW);
  mHandler.removeMessages(STORE_IMAGE_DONE);
  if (mHandler.hasMessages(FIRST_TIME_INIT)) {
    mHandler.removeMessages(FIRST_TIME_INIT);
    mPendingFirstTimeInit=true;
  }
  super.onPause();
}","@Override protected void onPause(){
  mPausing=true;
  stopPreview();
  closeCamera();
  waitForStoreImageThread();
  if (mFirstTimeInitialized) {
    mOrientationListener.disable();
    mGpsIndicator.setVisibility(View.INVISIBLE);
    if (!mIsImageCaptureIntent) {
      mThumbController.storeData(ImageManager.getLastImageThumbPath());
    }
    hidePostCaptureAlert();
  }
  if (mDidRegister) {
    unregisterReceiver(mReceiver);
    mDidRegister=false;
  }
  stopReceivingLocationUpdates();
  if (mFocusToneGenerator != null) {
    mFocusToneGenerator.release();
    mFocusToneGenerator=null;
  }
  if (mStorageHint != null) {
    mStorageHint.cancel();
    mStorageHint=null;
  }
  mImageCapture.clearLastBitmap();
  mImageCapture=null;
  if (mZoomButtons != null) {
    mZoomButtons.setVisible(false);
  }
  mHandler.removeMessages(CLEAR_SCREEN_DELAY);
  mHandler.removeMessages(RESTART_PREVIEW);
  mHandler.removeMessages(FIRST_TIME_INIT);
  mHandler.removeMessages(STORE_IMAGE_DONE);
  super.onPause();
}",0.9027975343764816
184530,"public void onSnap(){
  if (mPausing) {
    return;
  }
  mCaptureStartTime=System.currentTimeMillis();
  if (mStatus == SNAPSHOT_IN_PROGRESS || mStatus == SNAPSHOT_COMPLETED) {
    mKeepAndRestartPreview=true;
    mHandler.sendEmptyMessage(RESTART_PREVIEW);
    return;
  }
  if (mPicturesRemaining < 1) {
    updateStorageHint(mPicturesRemaining);
    return;
  }
  mStatus=SNAPSHOT_IN_PROGRESS;
  mKeepAndRestartPreview=true;
  mImageCapture.initiate();
}","public void onSnap(){
  if (mPausing || mStatus == SNAPSHOT_IN_PROGRESS) {
    return;
  }
  mCaptureStartTime=System.currentTimeMillis();
  if (mPicturesRemaining < 1) {
    updateStorageHint(mPicturesRemaining);
    return;
  }
  mStatus=SNAPSHOT_IN_PROGRESS;
  mImageCapture.initiate();
}",0.3578104138851802
184531,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  for (int i=1; i <= MenuHelper.MENU_ITEM_MAX; i++) {
    if (i != MenuHelper.GENERIC_ITEM) {
      menu.setGroupVisible(i,false);
    }
  }
  if (mStatus == SNAPSHOT_IN_PROGRESS || mStatus == SNAPSHOT_COMPLETED) {
    menu.setGroupVisible(MenuHelper.IMAGE_SAVING_ITEM,true);
    mImageSavingItem=true;
  }
 else {
    menu.setGroupVisible(MenuHelper.IMAGE_MODE_ITEM,true);
    mImageSavingItem=false;
  }
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  for (int i=1; i <= MenuHelper.MENU_ITEM_MAX; i++) {
    if (i != MenuHelper.GENERIC_ITEM) {
      menu.setGroupVisible(i,false);
    }
  }
  if (mStatus == SNAPSHOT_IN_PROGRESS) {
    menu.setGroupVisible(MenuHelper.IMAGE_SAVING_ITEM,true);
    mImageSavingItem=true;
  }
 else {
    menu.setGroupVisible(MenuHelper.IMAGE_MODE_ITEM,true);
    mImageSavingItem=false;
  }
  return true;
}",0.9669669669669668
184532,"public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  mSurfaceView.setVisibility(View.VISIBLE);
  setViewFinder(w,h);
  boolean creating=holder.isCreating();
  if (creating && !mFirstTimeInitialized) {
    mHandler.sendEmptyMessage(FIRST_TIME_INIT);
  }
}","public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  mSurfaceHolder=holder;
  mViewFinderWidth=w;
  mViewFinderHeight=h;
  if (mPausing)   return;
  mSurfaceView.setVisibility(View.VISIBLE);
  if (mStatus == SNAPSHOT_IN_PROGRESS)   return;
  startPreview();
  if (!mFirstTimeInitialized) {
    mHandler.sendEmptyMessage(FIRST_TIME_INIT);
  }
}",0.6177847113884556
184533,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case RESTART_PREVIEW:
{
      if (mStatus == SNAPSHOT_IN_PROGRESS) {
        mHandler.sendEmptyMessageDelayed(RESTART_PREVIEW,100);
      }
 else       if (mStatus == SNAPSHOT_COMPLETED) {
        mImageCapture.dismissFreezeFrame();
        hidePostCaptureAlert();
      }
      break;
    }
case STORE_IMAGE_DONE:
{
    if (!mIsImageCaptureIntent) {
      setLastPictureThumb((byte[])msg.obj,mImageCapture.getLastCaptureUri());
      if (!mThumbController.isUriValid()) {
        updateLastImage();
      }
      mThumbController.updateDisplayIfNeeded();
    }
 else {
      showPostCaptureAlert();
    }
    mStoreImageThread=null;
    break;
  }
case CLEAR_SCREEN_DELAY:
{
  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  break;
}
case FIRST_TIME_INIT:
{
initializeFirstTime();
break;
}
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case RESTART_PREVIEW:
{
      restartPreview();
      break;
    }
case STORE_IMAGE_DONE:
{
    if (!mIsImageCaptureIntent) {
      setLastPictureThumb((byte[])msg.obj,mImageCapture.getLastCaptureUri());
      if (!mThumbController.isUriValid()) {
        updateLastImage();
      }
      mThumbController.updateDisplayIfNeeded();
    }
 else {
      showPostCaptureAlert();
    }
    mStoreImageThread=null;
    break;
  }
case CLEAR_SCREEN_DELAY:
{
  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  break;
}
case FIRST_TIME_INIT:
{
initializeFirstTime();
break;
}
}
}",0.8347266881028939
184534,"public IImage getImageForUri(Uri uri){
  long matchId;
  try {
    matchId=ContentUris.parseId(uri);
  }
 catch (  NumberFormatException ex) {
    Log.i(TAG,""String_Node_Str"" + uri,ex);
    return null;
  }
  if (!ContentUris.withAppendedId(mBaseUri,matchId).equals(uri)) {
    return null;
  }
  Cursor cursor=getCursor();
synchronized (cursor) {
    cursor.moveToPosition(-1);
    for (int i=0; cursor.moveToNext(); ++i) {
      if (getImageId(cursor) == matchId) {
        BaseImage image=mCache.get(i);
        if (image == null) {
          image=loadImageFromCursor(cursor);
          mCache.put(i,image);
        }
        return image;
      }
    }
    return null;
  }
}","public IImage getImageForUri(Uri uri){
  long matchId;
  try {
    matchId=ContentUris.parseId(uri);
  }
 catch (  NumberFormatException ex) {
    Log.i(TAG,""String_Node_Str"" + uri,ex);
    return null;
  }
  Cursor cursor=getCursor();
synchronized (cursor) {
    cursor.moveToPosition(-1);
    for (int i=0; cursor.moveToNext(); ++i) {
      if (getImageId(cursor) == matchId) {
        BaseImage image=mCache.get(i);
        if (image == null) {
          image=loadImageFromCursor(cursor);
          mCache.put(i,image);
        }
        return image;
      }
    }
    return null;
  }
}",0.9308176100628932
184535,"void initializeFirstTime(){
  if (mFirstTimeInitialized)   return;
  mOrientationListener=new OrientationEventListener(Camera.this){
    @Override public void onOrientationChanged(    int orientation){
      if (orientation != ORIENTATION_UNKNOWN) {
        mLastOrientation=orientation;
      }
    }
  }
;
  mOrientationListener.enable();
  mLocationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  mContentResolver=getContentResolver();
  if (!mIsImageCaptureIntent) {
    findViewById(R.id.video_button).setOnClickListener(this);
    mLastPictureButton=(ImageView)findViewById(R.id.review_button);
    mLastPictureButton.setOnClickListener(this);
    mThumbController=new ThumbnailController(mLastPictureButton,mContentResolver);
    mThumbController.loadData(ImageManager.getLastImageThumbPath());
    if (!mThumbController.isUriValid()) {
      updateLastImage();
    }
    mThumbController.updateDisplayIfNeeded();
  }
 else {
    findViewById(R.id.review_button).setVisibility(View.INVISIBLE);
    findViewById(R.id.video_button).setVisibility(View.INVISIBLE);
    ViewGroup cameraView=(ViewGroup)findViewById(R.id.camera);
    getLayoutInflater().inflate(R.layout.post_picture_panel,cameraView);
    mPostCaptureAlert=findViewById(R.id.post_picture_panel);
  }
  findViewById(R.id.photo_indicator).setVisibility(View.VISIBLE);
  mShutterButton=(ShutterButton)findViewById(R.id.camera_button);
  mShutterButton.setOnShutterButtonListener(this);
  mShutterButton.setVisibility(View.VISIBLE);
  mFocusRectangle=(FocusRectangle)findViewById(R.id.focus_rectangle);
  updateFocusIndicator();
  mGpsIndicator=(ImageView)findViewById(R.id.gps_indicator);
  mGpsIndicator.setImageResource(R.drawable.ic_gps_active_camera);
  ImageManager.ensureOSXCompatibleFolder();
  calculatePicturesRemaining();
  installIntentFilter();
  initializeFocusTone();
  initializeZoom();
  mFirstTimeInitialized=true;
}","void initializeFirstTime(){
  if (mFirstTimeInitialized)   return;
  mOrientationListener=new OrientationEventListener(Camera.this){
    @Override public void onOrientationChanged(    int orientation){
      if (orientation != ORIENTATION_UNKNOWN) {
        mLastOrientation=orientation;
      }
    }
  }
;
  mOrientationListener.enable();
  mLocationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  mContentResolver=getContentResolver();
  if (!mIsImageCaptureIntent) {
    findViewById(R.id.video_button).setOnClickListener(this);
    mLastPictureButton=(ImageView)findViewById(R.id.review_button);
    mLastPictureButton.setOnClickListener(this);
    mThumbController=new ThumbnailController(mLastPictureButton,mContentResolver);
    mThumbController.loadData(ImageManager.getLastImageThumbPath());
    updateThumbnailButton();
  }
 else {
    findViewById(R.id.review_button).setVisibility(View.INVISIBLE);
    findViewById(R.id.video_button).setVisibility(View.INVISIBLE);
    ViewGroup cameraView=(ViewGroup)findViewById(R.id.camera);
    getLayoutInflater().inflate(R.layout.post_picture_panel,cameraView);
    mPostCaptureAlert=findViewById(R.id.post_picture_panel);
  }
  findViewById(R.id.photo_indicator).setVisibility(View.VISIBLE);
  mShutterButton=(ShutterButton)findViewById(R.id.camera_button);
  mShutterButton.setOnShutterButtonListener(this);
  mShutterButton.setVisibility(View.VISIBLE);
  mFocusRectangle=(FocusRectangle)findViewById(R.id.focus_rectangle);
  updateFocusIndicator();
  mGpsIndicator=(ImageView)findViewById(R.id.gps_indicator);
  mGpsIndicator.setImageResource(R.drawable.ic_gps_active_camera);
  ImageManager.ensureOSXCompatibleFolder();
  calculatePicturesRemaining();
  installIntentFilter();
  initializeFocusTone();
  initializeZoom();
  mFirstTimeInitialized=true;
}",0.9687979539641944
184536,"void initializeSecondTime(){
  mOrientationListener.enable();
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  installIntentFilter();
  initializeFocusTone();
}","void initializeSecondTime(){
  mOrientationListener.enable();
  readPreference();
  if (mRecordLocation)   startReceivingLocationUpdates();
  installIntentFilter();
  initializeFocusTone();
  if (!mIsImageCaptureIntent) {
    updateThumbnailButton();
  }
}",0.854586129753915
184537,"public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  mSurfaceHolder=holder;
  mViewFinderWidth=w;
  mViewFinderHeight=h;
  if (mPausing)   return;
  mSurfaceView.setVisibility(View.VISIBLE);
  if (mStatus == SNAPSHOT_IN_PROGRESS)   return;
  startPreview();
  if (!mFirstTimeInitialized) {
    mHandler.sendEmptyMessage(FIRST_TIME_INIT);
  }
}","public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  mSurfaceHolder=holder;
  mViewFinderWidth=w;
  mViewFinderHeight=h;
  if (mPausing)   return;
  mSurfaceView.setVisibility(View.VISIBLE);
  if (mStatus == SNAPSHOT_IN_PROGRESS)   return;
  startPreview();
  if (!mFirstTimeInitialized) {
    mHandler.sendEmptyMessage(FIRST_TIME_INIT);
  }
 else {
    initializeSecondTime();
  }
}",0.948051948051948
184538,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case RESTART_PREVIEW:
{
      restartPreview();
      break;
    }
case STORE_IMAGE_DONE:
{
    if (!mIsImageCaptureIntent) {
      setLastPictureThumb((byte[])msg.obj,mImageCapture.getLastCaptureUri());
      if (!mThumbController.isUriValid()) {
        updateLastImage();
      }
      mThumbController.updateDisplayIfNeeded();
    }
 else {
      showPostCaptureAlert();
    }
    mStoreImageThread=null;
    break;
  }
case CLEAR_SCREEN_DELAY:
{
  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  break;
}
case FIRST_TIME_INIT:
{
initializeFirstTime();
break;
}
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case RESTART_PREVIEW:
{
      restartPreview();
      break;
    }
case STORE_IMAGE_DONE:
{
    if (!mIsImageCaptureIntent) {
      setLastPictureThumb((byte[])msg.obj,mImageCapture.getLastCaptureUri());
      updateThumbnailButton();
    }
 else {
      showPostCaptureAlert();
    }
    mStoreImageThread=null;
    break;
  }
case CLEAR_SCREEN_DELAY:
{
  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  break;
}
case FIRST_TIME_INIT:
{
initializeFirstTime();
break;
}
}
}",0.8978930307941653
184539,"public void onShutterButtonClick(ShutterButton button){
  if (mPausing) {
    return;
  }
switch (button.getId()) {
case R.id.camera_button:
    if (mStoreImageThread == null) {
      doSnap();
    }
 else {
      Toast.makeText(Camera.this,getResources().getString(R.string.wait),Toast.LENGTH_SHORT);
    }
  break;
}
}","public void onShutterButtonClick(ShutterButton button){
  if (mPausing) {
    return;
  }
switch (button.getId()) {
case R.id.camera_button:
    if (mIsImageCaptureIntent && mPostCaptureAlert.getVisibility() == View.VISIBLE) {
      hidePostCaptureAlert();
      restartPreview();
    }
 else     if (mStoreImageThread == null) {
      doSnap();
    }
 else {
      Toast.makeText(Camera.this,getResources().getString(R.string.wait),Toast.LENGTH_SHORT);
    }
  break;
}
}",0.8080808080808081
184540,"public void surfaceCreated(SurfaceHolder holder){
  mSurfaceHolder=holder;
}","public void surfaceCreated(SurfaceHolder holder){
}",0.8031496062992126
184541,"public void onPictureTaken(final byte[] jpegData,final android.hardware.Camera camera){
  if (mPausing) {
    return;
  }
  mJpegPictureCallbackTime=System.currentTimeMillis();
  mRawPictureAndJpegPictureCallbackTime=mJpegPictureCallbackTime - mRawPictureCallbackTime;
  Log.v(TAG,""String_Node_Str"" + mRawPictureAndJpegPictureCallbackTime + ""String_Node_Str"");
  if (jpegData != null) {
    mStoreImageThread=new Thread(){
      public void run(){
        mImageCapture.storeImage(jpegData,camera,mLocation);
      }
    }
;
    mStoreImageThread.start();
  }
  mStatus=SNAPSHOT_COMPLETED;
  if (mKeepAndRestartPreview) {
    long delay=1500 - (System.currentTimeMillis() - mRawPictureCallbackTime);
    mHandler.sendEmptyMessageDelayed(RESTART_PREVIEW,Math.max(delay,0));
  }
}","public void onPictureTaken(final byte[] jpegData,final android.hardware.Camera camera){
  if (mPausing) {
    return;
  }
  mJpegPictureCallbackTime=System.currentTimeMillis();
  mRawPictureAndJpegPictureCallbackTime=mJpegPictureCallbackTime - mRawPictureCallbackTime;
  Log.v(TAG,""String_Node_Str"" + mRawPictureAndJpegPictureCallbackTime + ""String_Node_Str"");
  if (jpegData != null) {
    mStoreImageThread=new Thread(){
      public void run(){
        mImageCapture.storeImage(jpegData,camera,mLocation);
      }
    }
;
    mStoreImageThread.start();
  }
  if (!mIsImageCaptureIntent) {
    long delay=1500 - (System.currentTimeMillis() - mRawPictureCallbackTime);
    mHandler.sendEmptyMessageDelayed(RESTART_PREVIEW,Math.max(delay,0));
  }
}",0.9515072083879424
184542,"@Override public void onResume(){
  super.onResume();
  mPausing=false;
  mJpegPictureCallbackTime=0;
  mImageCapture=new ImageCapture();
  if (mPendingFirstTimeInit) {
    mHandler.sendEmptyMessage(FIRST_TIME_INIT);
    mPendingFirstTimeInit=false;
  }
 else   if (mFirstTimeInitialized) {
    mSurfaceView.setAspectRatio(VideoPreview.DONT_CARE);
    setViewFinder(mOriginalViewFinderWidth,mOriginalViewFinderHeight);
    mStatus=IDLE;
    initializeSecondTime();
  }
  mHandler.sendEmptyMessageDelayed(CLEAR_SCREEN_DELAY,SCREEN_DELAY);
}","@Override public void onResume(){
  super.onResume();
  mPausing=false;
  mJpegPictureCallbackTime=0;
  mImageCapture=new ImageCapture();
  if (mSurfaceHolder != null) {
    mSurfaceView.setAspectRatio(VideoPreview.DONT_CARE);
    startPreview();
    if (!mFirstTimeInitialized) {
      mHandler.sendEmptyMessage(FIRST_TIME_INIT);
    }
 else {
      initializeSecondTime();
    }
  }
  mHandler.sendEmptyMessageDelayed(CLEAR_SCREEN_DELAY,SCREEN_DELAY);
}",0.6458752515090543
184543,"public void storeImage(final byte[] data,android.hardware.Camera camera,Location loc){
  boolean captureOnly=mIsImageCaptureIntent;
  Message msg=mHandler.obtainMessage(STORE_IMAGE_DONE);
  if (!captureOnly) {
    storeImage(data,loc);
    sendBroadcast(new Intent(""String_Node_Str"",mLastContentUri));
    msg.obj=data;
  }
 else {
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inSampleSize=4;
    mCaptureOnlyBitmap=BitmapFactory.decodeByteArray(data,0,data.length,options);
    cancelAutomaticPreviewRestart();
  }
  mHandler.sendMessage(msg);
}","public void storeImage(final byte[] data,android.hardware.Camera camera,Location loc){
  Message msg=mHandler.obtainMessage(STORE_IMAGE_DONE);
  if (!mIsImageCaptureIntent) {
    storeImage(data,loc);
    sendBroadcast(new Intent(""String_Node_Str"",mLastContentUri));
    msg.obj=data;
  }
 else {
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inSampleSize=4;
    mCaptureOnlyBitmap=BitmapFactory.decodeByteArray(data,0,data.length,options);
  }
  mHandler.sendMessage(msg);
}",0.9055555555555556
184544,"private void restartPreview(){
  VideoPreview surfaceView=mSurfaceView;
  surfaceView.setAspectRatio(VideoPreview.DONT_CARE);
  setViewFinder(mOriginalViewFinderWidth,mOriginalViewFinderHeight);
  mStatus=IDLE;
  calculatePicturesRemaining();
}","private void restartPreview(){
  mSurfaceView.setAspectRatio(VideoPreview.DONT_CARE);
  startPreview();
  calculatePicturesRemaining();
}",0.6824146981627297
184545,"@Override protected void onPause(){
  mPausing=true;
  stopPreview();
  closeCamera();
  waitForStoreImageThread();
  if (mFirstTimeInitialized) {
    mOrientationListener.disable();
    mGpsIndicator.setVisibility(View.INVISIBLE);
    if (!mIsImageCaptureIntent) {
      mThumbController.storeData(ImageManager.getLastImageThumbPath());
    }
    hidePostCaptureAlert();
  }
  if (mDidRegister) {
    unregisterReceiver(mReceiver);
    mDidRegister=false;
  }
  stopReceivingLocationUpdates();
  if (mFocusToneGenerator != null) {
    mFocusToneGenerator.release();
    mFocusToneGenerator=null;
  }
  if (mStorageHint != null) {
    mStorageHint.cancel();
    mStorageHint=null;
  }
  mImageCapture.clearLastBitmap();
  mImageCapture=null;
  if (mZoomButtons != null) {
    mZoomButtons.setVisible(false);
  }
  mHandler.removeMessages(CLEAR_SCREEN_DELAY);
  mHandler.removeMessages(RESTART_PREVIEW);
  mHandler.removeMessages(STORE_IMAGE_DONE);
  if (mHandler.hasMessages(FIRST_TIME_INIT)) {
    mHandler.removeMessages(FIRST_TIME_INIT);
    mPendingFirstTimeInit=true;
  }
  super.onPause();
}","@Override protected void onPause(){
  mPausing=true;
  stopPreview();
  closeCamera();
  waitForStoreImageThread();
  if (mFirstTimeInitialized) {
    mOrientationListener.disable();
    mGpsIndicator.setVisibility(View.INVISIBLE);
    if (!mIsImageCaptureIntent) {
      mThumbController.storeData(ImageManager.getLastImageThumbPath());
    }
    hidePostCaptureAlert();
  }
  if (mDidRegister) {
    unregisterReceiver(mReceiver);
    mDidRegister=false;
  }
  stopReceivingLocationUpdates();
  if (mFocusToneGenerator != null) {
    mFocusToneGenerator.release();
    mFocusToneGenerator=null;
  }
  if (mStorageHint != null) {
    mStorageHint.cancel();
    mStorageHint=null;
  }
  mImageCapture.clearLastBitmap();
  mImageCapture=null;
  if (mZoomButtons != null) {
    mZoomButtons.setVisible(false);
  }
  mHandler.removeMessages(CLEAR_SCREEN_DELAY);
  mHandler.removeMessages(RESTART_PREVIEW);
  mHandler.removeMessages(FIRST_TIME_INIT);
  mHandler.removeMessages(STORE_IMAGE_DONE);
  super.onPause();
}",0.9027975343764816
184546,"public void onSnap(){
  if (mPausing) {
    return;
  }
  mCaptureStartTime=System.currentTimeMillis();
  if (mStatus == SNAPSHOT_IN_PROGRESS || mStatus == SNAPSHOT_COMPLETED) {
    mKeepAndRestartPreview=true;
    mHandler.sendEmptyMessage(RESTART_PREVIEW);
    return;
  }
  if (mPicturesRemaining < 1) {
    updateStorageHint(mPicturesRemaining);
    return;
  }
  mStatus=SNAPSHOT_IN_PROGRESS;
  mKeepAndRestartPreview=true;
  mImageCapture.initiate();
}","public void onSnap(){
  if (mPausing || mStatus == SNAPSHOT_IN_PROGRESS) {
    return;
  }
  mCaptureStartTime=System.currentTimeMillis();
  if (mPicturesRemaining < 1) {
    updateStorageHint(mPicturesRemaining);
    return;
  }
  mStatus=SNAPSHOT_IN_PROGRESS;
  mImageCapture.initiate();
}",0.3578104138851802
184547,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  for (int i=1; i <= MenuHelper.MENU_ITEM_MAX; i++) {
    if (i != MenuHelper.GENERIC_ITEM) {
      menu.setGroupVisible(i,false);
    }
  }
  if (mStatus == SNAPSHOT_IN_PROGRESS || mStatus == SNAPSHOT_COMPLETED) {
    menu.setGroupVisible(MenuHelper.IMAGE_SAVING_ITEM,true);
    mImageSavingItem=true;
  }
 else {
    menu.setGroupVisible(MenuHelper.IMAGE_MODE_ITEM,true);
    mImageSavingItem=false;
  }
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  for (int i=1; i <= MenuHelper.MENU_ITEM_MAX; i++) {
    if (i != MenuHelper.GENERIC_ITEM) {
      menu.setGroupVisible(i,false);
    }
  }
  if (mStatus == SNAPSHOT_IN_PROGRESS) {
    menu.setGroupVisible(MenuHelper.IMAGE_SAVING_ITEM,true);
    mImageSavingItem=true;
  }
 else {
    menu.setGroupVisible(MenuHelper.IMAGE_MODE_ITEM,true);
    mImageSavingItem=false;
  }
  return true;
}",0.9669669669669668
184548,"public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  mSurfaceView.setVisibility(View.VISIBLE);
  setViewFinder(w,h);
  boolean creating=holder.isCreating();
  if (creating && !mFirstTimeInitialized) {
    mHandler.sendEmptyMessage(FIRST_TIME_INIT);
  }
}","public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  mSurfaceHolder=holder;
  mViewFinderWidth=w;
  mViewFinderHeight=h;
  if (mPausing)   return;
  mSurfaceView.setVisibility(View.VISIBLE);
  if (mStatus == SNAPSHOT_IN_PROGRESS)   return;
  startPreview();
  if (!mFirstTimeInitialized) {
    mHandler.sendEmptyMessage(FIRST_TIME_INIT);
  }
}",0.6177847113884556
184549,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case RESTART_PREVIEW:
{
      if (mStatus == SNAPSHOT_IN_PROGRESS) {
        mHandler.sendEmptyMessageDelayed(RESTART_PREVIEW,100);
      }
 else       if (mStatus == SNAPSHOT_COMPLETED) {
        mImageCapture.dismissFreezeFrame();
        hidePostCaptureAlert();
      }
      break;
    }
case STORE_IMAGE_DONE:
{
    if (!mIsImageCaptureIntent) {
      setLastPictureThumb((byte[])msg.obj,mImageCapture.getLastCaptureUri());
      if (!mThumbController.isUriValid()) {
        updateLastImage();
      }
      mThumbController.updateDisplayIfNeeded();
    }
 else {
      showPostCaptureAlert();
    }
    mStoreImageThread=null;
    break;
  }
case CLEAR_SCREEN_DELAY:
{
  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  break;
}
case FIRST_TIME_INIT:
{
initializeFirstTime();
break;
}
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case RESTART_PREVIEW:
{
      restartPreview();
      break;
    }
case STORE_IMAGE_DONE:
{
    if (!mIsImageCaptureIntent) {
      setLastPictureThumb((byte[])msg.obj,mImageCapture.getLastCaptureUri());
      if (!mThumbController.isUriValid()) {
        updateLastImage();
      }
      mThumbController.updateDisplayIfNeeded();
    }
 else {
      showPostCaptureAlert();
    }
    mStoreImageThread=null;
    break;
  }
case CLEAR_SCREEN_DELAY:
{
  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  break;
}
case FIRST_TIME_INIT:
{
initializeFirstTime();
break;
}
}
}",0.8347266881028939
184550,"private boolean init(Uri uri,IImageList imageList){
  if (uri == null)   return false;
  mAllImages=imageList == null ? new SingleImageList(uri) : imageList;
  mAllImages.open(getContentResolver());
  IImage image=mAllImages.getImageForUri(uri);
  if (image == null)   return false;
  mCurrentPosition=mAllImages.getImageIndex(image);
  mLastSlideShowImage=mCurrentPosition;
  return true;
}","private boolean init(Uri uri,IImageList imageList){
  if (uri == null)   return false;
  mAllImages=(imageList == null) ? buildImageListFromUri(uri) : imageList;
  mAllImages.open(getContentResolver());
  IImage image=mAllImages.getImageForUri(uri);
  if (image == null)   return false;
  mCurrentPosition=mAllImages.getImageIndex(image);
  mLastSlideShowImage=mCurrentPosition;
  return true;
}",0.9033078880407124
184551,"private boolean init(Uri uri,IImageList imageList){
  if (uri == null)   return false;
  mAllImages=imageList == null ? new SingleImageList(uri) : imageList;
  mAllImages.open(getContentResolver());
  IImage image=mAllImages.getImageForUri(uri);
  if (image == null)   return false;
  mCurrentPosition=mAllImages.getImageIndex(image);
  mLastSlideShowImage=mCurrentPosition;
  return true;
}","private boolean init(Uri uri,IImageList imageList){
  if (uri == null)   return false;
  mAllImages=(imageList == null) ? buildImageListFromUri(uri) : imageList;
  mAllImages.open(getContentResolver());
  IImage image=mAllImages.getImageForUri(uri);
  if (image == null)   return false;
  mCurrentPosition=mAllImages.getImageIndex(image);
  mLastSlideShowImage=mCurrentPosition;
  return true;
}",0.9033078880407124
184552,"public int compare(MergeSlot m1,MergeSlot m2){
  if (m1.mDateTaken != m2.mDateTaken) {
    return m1.mDateTaken < m2.mDateTaken ? -1 : 1;
  }
  return m1.mListIndex - m2.mListIndex;
}","public int compare(MergeSlot m1,MergeSlot m2){
  Log.v(TAG,String.format(""String_Node_Str"",m1.mDateTaken,m2.mDateTaken));
  if (m1.mDateTaken != m2.mDateTaken) {
    return m1.mDateTaken < m2.mDateTaken ? -1 : 1;
  }
  return m1.mListIndex - m2.mListIndex;
}",0.8299319727891157
184553,"public void run(MenuHelper.MenuCallback cb){
  cb.run(getCurrentImageUri(),getCurrentImage());
  mGvs.stop();
  mGvs.setImageList(mAllImages);
  mGvs.start();
  mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE);
}","public void run(MenuHelper.MenuCallback cb){
  if (!canHandleEvent()) {
    return;
  }
  cb.run(getCurrentImageUri(),getCurrentImage());
  mGvs.stop();
  mGvs.setImageList(mAllImages);
  mGvs.start();
  mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE);
}",0.9193245778611632
184554,"public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (!canHandleEvent())   return;
  if (getCurrentImage() == null) {
    return;
  }
  boolean isImage=ImageManager.isImage(getCurrentImage());
  if (isImage) {
    menu.add(0,0,0,R.string.view).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        onImageClicked(mGvs.getCurrentSelection());
        return true;
      }
    }
);
  }
  menu.setHeaderTitle(isImage ? R.string.context_menu_header : R.string.video_context_menu_header);
  if ((mInclusion & (ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS)) != 0) {
    MenuHelper.MenuItemsResult r=MenuHelper.addImageMenuItems(menu,MenuHelper.INCLUDE_ALL,isImage,ImageGallery.this,mHandler,mDeletePhotoRunnable,new MenuHelper.MenuInvoker(){
      public void run(      MenuHelper.MenuCallback cb){
        cb.run(getCurrentImageUri(),getCurrentImage());
        mGvs.stop();
        mGvs.setImageList(mAllImages);
        mGvs.start();
        mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE);
      }
    }
);
    if (r != null) {
      r.gettingReadyToOpen(menu,getCurrentImage());
    }
    if (isImage) {
      addSlideShowMenu(menu,1000);
    }
  }
}","public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (!canHandleEvent())   return;
  if (getCurrentImage() == null) {
    return;
  }
  boolean isImage=ImageManager.isImage(getCurrentImage());
  if (isImage) {
    menu.add(0,0,0,R.string.view).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        onImageClicked(mGvs.getCurrentSelection());
        return true;
      }
    }
);
  }
  menu.setHeaderTitle(isImage ? R.string.context_menu_header : R.string.video_context_menu_header);
  if ((mInclusion & (ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS)) != 0) {
    MenuHelper.MenuItemsResult r=MenuHelper.addImageMenuItems(menu,MenuHelper.INCLUDE_ALL,isImage,ImageGallery.this,mHandler,mDeletePhotoRunnable,new MenuHelper.MenuInvoker(){
      public void run(      MenuHelper.MenuCallback cb){
        if (!canHandleEvent()) {
          return;
        }
        cb.run(getCurrentImageUri(),getCurrentImage());
        mGvs.stop();
        mGvs.setImageList(mAllImages);
        mGvs.start();
        mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE);
      }
    }
);
    if (r != null) {
      r.gettingReadyToOpen(menu,getCurrentImage());
    }
    if (isImage) {
      addSlideShowMenu(menu,1000);
    }
  }
}",0.9774658293313632
184555,"public boolean onSlideShowClicked(){
  IImage img=getCurrentImage();
  if (img == null) {
    img=mAllImages.getImageAt(0);
    if (img == null) {
      return true;
    }
  }
  Uri targetUri=img.fullSizeImageUri();
  Uri thisUri=getIntent().getData();
  if (thisUri != null) {
    String bucket=thisUri.getQueryParameter(""String_Node_Str"");
    if (bucket != null) {
      targetUri=targetUri.buildUpon().appendQueryParameter(""String_Node_Str"",bucket).build();
    }
  }
  Intent intent=new Intent(Intent.ACTION_VIEW,targetUri);
  intent.putExtra(""String_Node_Str"",true);
  startActivity(intent);
  return true;
}","public boolean onSlideShowClicked(){
  if (!canHandleEvent()) {
    return false;
  }
  IImage img=getCurrentImage();
  if (img == null) {
    img=mAllImages.getImageAt(0);
    if (img == null) {
      return true;
    }
  }
  Uri targetUri=img.fullSizeImageUri();
  Uri thisUri=getIntent().getData();
  if (thisUri != null) {
    String bucket=thisUri.getQueryParameter(""String_Node_Str"");
    if (bucket != null) {
      targetUri=targetUri.buildUpon().appendQueryParameter(""String_Node_Str"",bucket).build();
    }
  }
  Intent intent=new Intent(Intent.ACTION_VIEW,targetUri);
  intent.putExtra(""String_Node_Str"",true);
  startActivity(intent);
  return true;
}",0.961628817541112
184556,"@Override public boolean onSingleTapConfirmed(MotionEvent e){
  select(mCurrentSelection,false);
  int index=computeSelectedIndex(e.getX(),e.getY());
  if (index >= 0 && index < mCount) {
    mListener.onImageClicked(index);
    return true;
  }
  return false;
}","@Override public boolean onSingleTapConfirmed(MotionEvent e){
  if (!canHandleEvent())   return false;
  select(mCurrentSelection,false);
  int index=computeSelectedIndex(e.getX(),e.getY());
  if (index >= 0 && index < mCount) {
    mListener.onImageClicked(index);
    return true;
  }
  return false;
}",0.927689594356261
184557,"@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  final float maxVelocity=2500;
  if (velocityY > maxVelocity) {
    velocityY=maxVelocity;
  }
 else   if (velocityY < -maxVelocity) {
    velocityY=-maxVelocity;
  }
  select(SELECT_NONE,false);
  mScroller=new Scroller(getContext());
  mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);
  computeScroll();
  return true;
}","@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  if (!canHandleEvent())   return false;
  final float maxVelocity=2500;
  if (velocityY > maxVelocity) {
    velocityY=maxVelocity;
  }
 else   if (velocityY < -maxVelocity) {
    velocityY=-maxVelocity;
  }
  select(SELECT_NONE,false);
  mScroller=new Scroller(getContext());
  mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);
  computeScroll();
  return true;
}",0.9550930996714128
184558,"@Override public boolean onDown(MotionEvent e){
  if (mScroller != null && !mScroller.isFinished()) {
    mScroller.forceFinished(true);
    return false;
  }
  int pos=computeSelectedIndex(e.getX(),e.getY());
  if (pos >= 0 && pos < mCount) {
    select(pos,true);
  }
 else {
    select(SELECT_NONE,false);
  }
  return true;
}","@Override public boolean onDown(MotionEvent e){
  if (!canHandleEvent())   return false;
  if (mScroller != null && !mScroller.isFinished()) {
    mScroller.forceFinished(true);
    return false;
  }
  int pos=computeSelectedIndex(e.getX(),e.getY());
  if (pos >= 0 && pos < mCount) {
    select(pos,true);
  }
 else {
    select(SELECT_NONE,false);
  }
  return true;
}",0.9413447782546496
184559,"@Override public boolean onScroll(MotionEvent e1,MotionEvent e2,float distanceX,float distanceY){
  select(SELECT_NONE,false);
  scrollBy(0,(int)distanceY);
  invalidate();
  return true;
}","@Override public boolean onScroll(MotionEvent e1,MotionEvent e2,float distanceX,float distanceY){
  if (!canHandleEvent())   return false;
  select(SELECT_NONE,false);
  scrollBy(0,(int)distanceY);
  invalidate();
  return true;
}",0.9021479713603818
184560,"public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (getCurrentImage() == null) {
    return;
  }
  boolean isImage=ImageManager.isImage(getCurrentImage());
  if (isImage) {
    menu.add(0,0,0,R.string.view).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        onImageClicked(mGvs.getCurrentSelection());
        return true;
      }
    }
);
  }
  menu.setHeaderTitle(isImage ? R.string.context_menu_header : R.string.video_context_menu_header);
  if ((mInclusion & (ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS)) != 0) {
    MenuHelper.MenuItemsResult r=MenuHelper.addImageMenuItems(menu,MenuHelper.INCLUDE_ALL,isImage,ImageGallery.this,mHandler,mDeletePhotoRunnable,new MenuHelper.MenuInvoker(){
      public void run(      MenuHelper.MenuCallback cb){
        cb.run(getCurrentImageUri(),getCurrentImage());
        mGvs.stop();
        mGvs.setImageList(mAllImages);
        mGvs.start();
        mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE);
      }
    }
);
    if (r != null) {
      r.gettingReadyToOpen(menu,getCurrentImage());
    }
    if (isImage) {
      addSlideShowMenu(menu,1000);
    }
  }
}","public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (!canHandleEvent())   return;
  if (getCurrentImage() == null) {
    return;
  }
  boolean isImage=ImageManager.isImage(getCurrentImage());
  if (isImage) {
    menu.add(0,0,0,R.string.view).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        onImageClicked(mGvs.getCurrentSelection());
        return true;
      }
    }
);
  }
  menu.setHeaderTitle(isImage ? R.string.context_menu_header : R.string.video_context_menu_header);
  if ((mInclusion & (ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS)) != 0) {
    MenuHelper.MenuItemsResult r=MenuHelper.addImageMenuItems(menu,MenuHelper.INCLUDE_ALL,isImage,ImageGallery.this,mHandler,mDeletePhotoRunnable,new MenuHelper.MenuInvoker(){
      public void run(      MenuHelper.MenuCallback cb){
        cb.run(getCurrentImageUri(),getCurrentImage());
        mGvs.stop();
        mGvs.setImageList(mAllImages);
        mGvs.start();
        mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE);
      }
    }
);
    if (r != null) {
      r.gettingReadyToOpen(menu,getCurrentImage());
    }
    if (isImage) {
      addSlideShowMenu(menu,1000);
    }
  }
}",0.9865951742627346
184561,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  if ((mInclusion & ImageManager.INCLUDE_IMAGES) != 0) {
    boolean videoSelected=isVideoSelected();
    if (mSlideShowItem != null) {
      mSlideShowItem.setEnabled(!videoSelected);
    }
  }
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  if (!canHandleEvent())   return false;
  if ((mInclusion & ImageManager.INCLUDE_IMAGES) != 0) {
    boolean videoSelected=isVideoSelected();
    if (mSlideShowItem != null) {
      mSlideShowItem.setEnabled(!videoSelected);
    }
  }
  return true;
}",0.929188255613126
184562,"void setMode(int mode){
  if (mMode == mode) {
    return;
  }
  findViewById(R.id.slideShowContainer).setVisibility(mode == MODE_SLIDESHOW ? View.VISIBLE : View.GONE);
  findViewById(R.id.abs).setVisibility(mode == MODE_NORMAL ? View.VISIBLE : View.GONE);
  Window win=getWindow();
  mMode=mode;
  if (mode == MODE_SLIDESHOW) {
    win.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    mImageView.clear();
    mActionIconPanel.setVisibility(View.GONE);
    mShutterButton.setVisibility(View.GONE);
    findViewById(R.id.slideShowContainer).getRootView().requestLayout();
    mUseShuffleOrder=mPrefs.getBoolean(""String_Node_Str"",false);
    mSlideShowLoop=mPrefs.getBoolean(""String_Node_Str"",false);
    try {
      mAnimationIndex=Integer.parseInt(mPrefs.getString(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    NumberFormatException ex) {
      Log.e(TAG,""String_Node_Str"" + ex.toString());
      mAnimationIndex=0;
    }
    try {
      mSlideShowInterval=Integer.parseInt(mPrefs.getString(""String_Node_Str"",""String_Node_Str"")) * 1000;
    }
 catch (    NumberFormatException ex) {
      Log.e(TAG,""String_Node_Str"" + ex.toString());
      mSlideShowInterval=3000;
    }
    if (mUseShuffleOrder) {
      generateShuffleOrder();
    }
  }
 else {
    win.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    if (mFullScreenInNormalMode) {
      win.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }
 else {
      win.clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }
    if (mGetter != null) {
      mGetter.cancelCurrent();
    }
    if (mShowActionIcons) {
      mActionIconPanel.setVisibility(View.VISIBLE);
      mShutterButton.setVisibility(View.VISIBLE);
    }
    ImageViewTouchBase dst=mImageView;
    dst.mLastXTouchPos=-1;
    dst.mLastYTouchPos=-1;
    for (    ImageViewTouchBase ivt : mSlideShowImageViews) {
      ivt.clear();
    }
    mShuffleOrder=null;
    if (mGetter != null) {
      setImage(mCurrentPosition);
    }
  }
}","void setMode(int mode){
  if (mMode == mode) {
    return;
  }
  findViewById(R.id.slideShowContainer).setVisibility(mode == MODE_SLIDESHOW ? View.VISIBLE : View.GONE);
  findViewById(R.id.abs).setVisibility(mode == MODE_NORMAL ? View.VISIBLE : View.GONE);
  Window win=getWindow();
  mMode=mode;
  if (mode == MODE_SLIDESHOW) {
    win.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    mImageView.clear();
    mActionIconPanel.setVisibility(View.GONE);
    findViewById(R.id.slideShowContainer).getRootView().requestLayout();
    mUseShuffleOrder=mPrefs.getBoolean(""String_Node_Str"",false);
    mSlideShowLoop=mPrefs.getBoolean(""String_Node_Str"",false);
    try {
      mAnimationIndex=Integer.parseInt(mPrefs.getString(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    NumberFormatException ex) {
      Log.e(TAG,""String_Node_Str"" + ex.toString());
      mAnimationIndex=0;
    }
    try {
      mSlideShowInterval=Integer.parseInt(mPrefs.getString(""String_Node_Str"",""String_Node_Str"")) * 1000;
    }
 catch (    NumberFormatException ex) {
      Log.e(TAG,""String_Node_Str"" + ex.toString());
      mSlideShowInterval=3000;
    }
    if (mUseShuffleOrder) {
      generateShuffleOrder();
    }
  }
 else {
    win.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    if (mFullScreenInNormalMode) {
      win.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }
 else {
      win.clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }
    if (mGetter != null) {
      mGetter.cancelCurrent();
    }
    if (mShowActionIcons) {
      mActionIconPanel.setVisibility(View.VISIBLE);
    }
    ImageViewTouchBase dst=mImageView;
    dst.mLastXTouchPos=-1;
    dst.mLastYTouchPos=-1;
    for (    ImageViewTouchBase ivt : mSlideShowImageViews) {
      ivt.clear();
    }
    mShuffleOrder=null;
    if (mGetter != null) {
      setImage(mCurrentPosition);
    }
  }
}",0.976232174130598
184563,"@Override public boolean onSingleTapConfirmed(MotionEvent e){
  select(mCurrentSelection,false);
  int index=computeSelectedIndex(e.getX(),e.getY());
  if (index >= 0 && index < mCount) {
    mListener.onImageClicked(index);
    return true;
  }
  return false;
}","@Override public boolean onSingleTapConfirmed(MotionEvent e){
  if (!canHandleEvent())   return false;
  select(mCurrentSelection,false);
  int index=computeSelectedIndex(e.getX(),e.getY());
  if (index >= 0 && index < mCount) {
    mListener.onImageClicked(index);
    return true;
  }
  return false;
}",0.927689594356261
184564,"@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  final float maxVelocity=2500;
  if (velocityY > maxVelocity) {
    velocityY=maxVelocity;
  }
 else   if (velocityY < -maxVelocity) {
    velocityY=-maxVelocity;
  }
  select(SELECT_NONE,false);
  mScroller=new Scroller(getContext());
  mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);
  computeScroll();
  return true;
}","@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  if (!canHandleEvent())   return false;
  final float maxVelocity=2500;
  if (velocityY > maxVelocity) {
    velocityY=maxVelocity;
  }
 else   if (velocityY < -maxVelocity) {
    velocityY=-maxVelocity;
  }
  select(SELECT_NONE,false);
  mScroller=new Scroller(getContext());
  mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);
  computeScroll();
  return true;
}",0.9550930996714128
184565,"@Override public boolean onDown(MotionEvent e){
  if (mScroller != null && !mScroller.isFinished()) {
    mScroller.forceFinished(true);
    return false;
  }
  int pos=computeSelectedIndex(e.getX(),e.getY());
  if (pos >= 0 && pos < mCount) {
    select(pos,true);
  }
 else {
    select(SELECT_NONE,false);
  }
  return true;
}","@Override public boolean onDown(MotionEvent e){
  if (!canHandleEvent())   return false;
  if (mScroller != null && !mScroller.isFinished()) {
    mScroller.forceFinished(true);
    return false;
  }
  int pos=computeSelectedIndex(e.getX(),e.getY());
  if (pos >= 0 && pos < mCount) {
    select(pos,true);
  }
 else {
    select(SELECT_NONE,false);
  }
  return true;
}",0.9413447782546496
184566,"@Override public boolean onScroll(MotionEvent e1,MotionEvent e2,float distanceX,float distanceY){
  select(SELECT_NONE,false);
  scrollBy(0,(int)distanceY);
  invalidate();
  return true;
}","@Override public boolean onScroll(MotionEvent e1,MotionEvent e2,float distanceX,float distanceY){
  if (!canHandleEvent())   return false;
  select(SELECT_NONE,false);
  scrollBy(0,(int)distanceY);
  invalidate();
  return true;
}",0.9021479713603818
184567,"public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (getCurrentImage() == null) {
    return;
  }
  boolean isImage=ImageManager.isImage(getCurrentImage());
  if (isImage) {
    menu.add(0,0,0,R.string.view).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        onImageClicked(mGvs.getCurrentSelection());
        return true;
      }
    }
);
  }
  menu.setHeaderTitle(isImage ? R.string.context_menu_header : R.string.video_context_menu_header);
  if ((mInclusion & (ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS)) != 0) {
    MenuHelper.MenuItemsResult r=MenuHelper.addImageMenuItems(menu,MenuHelper.INCLUDE_ALL,isImage,ImageGallery.this,mHandler,mDeletePhotoRunnable,new MenuHelper.MenuInvoker(){
      public void run(      MenuHelper.MenuCallback cb){
        cb.run(getCurrentImageUri(),getCurrentImage());
        mGvs.stop();
        mGvs.setImageList(mAllImages);
        mGvs.start();
        mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE);
      }
    }
);
    if (r != null) {
      r.gettingReadyToOpen(menu,getCurrentImage());
    }
    if (isImage) {
      addSlideShowMenu(menu,1000);
    }
  }
}","public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (!canHandleEvent())   return;
  if (getCurrentImage() == null) {
    return;
  }
  boolean isImage=ImageManager.isImage(getCurrentImage());
  if (isImage) {
    menu.add(0,0,0,R.string.view).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        onImageClicked(mGvs.getCurrentSelection());
        return true;
      }
    }
);
  }
  menu.setHeaderTitle(isImage ? R.string.context_menu_header : R.string.video_context_menu_header);
  if ((mInclusion & (ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS)) != 0) {
    MenuHelper.MenuItemsResult r=MenuHelper.addImageMenuItems(menu,MenuHelper.INCLUDE_ALL,isImage,ImageGallery.this,mHandler,mDeletePhotoRunnable,new MenuHelper.MenuInvoker(){
      public void run(      MenuHelper.MenuCallback cb){
        cb.run(getCurrentImageUri(),getCurrentImage());
        mGvs.stop();
        mGvs.setImageList(mAllImages);
        mGvs.start();
        mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE);
      }
    }
);
    if (r != null) {
      r.gettingReadyToOpen(menu,getCurrentImage());
    }
    if (isImage) {
      addSlideShowMenu(menu,1000);
    }
  }
}",0.9865951742627346
184568,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  if ((mInclusion & ImageManager.INCLUDE_IMAGES) != 0) {
    boolean videoSelected=isVideoSelected();
    if (mSlideShowItem != null) {
      mSlideShowItem.setEnabled(!videoSelected);
    }
  }
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  if (!canHandleEvent())   return false;
  if ((mInclusion & ImageManager.INCLUDE_IMAGES) != 0) {
    boolean videoSelected=isVideoSelected();
    if (mSlideShowItem != null) {
      mSlideShowItem.setEnabled(!videoSelected);
    }
  }
  return true;
}",0.929188255613126
184569,"void setMode(int mode){
  if (mMode == mode) {
    return;
  }
  findViewById(R.id.slideShowContainer).setVisibility(mode == MODE_SLIDESHOW ? View.VISIBLE : View.GONE);
  findViewById(R.id.abs).setVisibility(mode == MODE_NORMAL ? View.VISIBLE : View.GONE);
  Window win=getWindow();
  mMode=mode;
  if (mode == MODE_SLIDESHOW) {
    win.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    mImageView.clear();
    mActionIconPanel.setVisibility(View.GONE);
    mShutterButton.setVisibility(View.GONE);
    findViewById(R.id.slideShowContainer).getRootView().requestLayout();
    mUseShuffleOrder=mPrefs.getBoolean(""String_Node_Str"",false);
    mSlideShowLoop=mPrefs.getBoolean(""String_Node_Str"",false);
    try {
      mAnimationIndex=Integer.parseInt(mPrefs.getString(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    NumberFormatException ex) {
      Log.e(TAG,""String_Node_Str"" + ex.toString());
      mAnimationIndex=0;
    }
    try {
      mSlideShowInterval=Integer.parseInt(mPrefs.getString(""String_Node_Str"",""String_Node_Str"")) * 1000;
    }
 catch (    NumberFormatException ex) {
      Log.e(TAG,""String_Node_Str"" + ex.toString());
      mSlideShowInterval=3000;
    }
    if (mUseShuffleOrder) {
      generateShuffleOrder();
    }
  }
 else {
    win.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    if (mFullScreenInNormalMode) {
      win.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }
 else {
      win.clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }
    if (mGetter != null) {
      mGetter.cancelCurrent();
    }
    if (mShowActionIcons) {
      mActionIconPanel.setVisibility(View.VISIBLE);
      mShutterButton.setVisibility(View.VISIBLE);
    }
    ImageViewTouchBase dst=mImageView;
    dst.mLastXTouchPos=-1;
    dst.mLastYTouchPos=-1;
    for (    ImageViewTouchBase ivt : mSlideShowImageViews) {
      ivt.clear();
    }
    mShuffleOrder=null;
    if (mGetter != null) {
      setImage(mCurrentPosition);
    }
  }
}","void setMode(int mode){
  if (mMode == mode) {
    return;
  }
  findViewById(R.id.slideShowContainer).setVisibility(mode == MODE_SLIDESHOW ? View.VISIBLE : View.GONE);
  findViewById(R.id.abs).setVisibility(mode == MODE_NORMAL ? View.VISIBLE : View.GONE);
  Window win=getWindow();
  mMode=mode;
  if (mode == MODE_SLIDESHOW) {
    win.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    mImageView.clear();
    mActionIconPanel.setVisibility(View.GONE);
    findViewById(R.id.slideShowContainer).getRootView().requestLayout();
    mUseShuffleOrder=mPrefs.getBoolean(""String_Node_Str"",false);
    mSlideShowLoop=mPrefs.getBoolean(""String_Node_Str"",false);
    try {
      mAnimationIndex=Integer.parseInt(mPrefs.getString(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    NumberFormatException ex) {
      Log.e(TAG,""String_Node_Str"" + ex.toString());
      mAnimationIndex=0;
    }
    try {
      mSlideShowInterval=Integer.parseInt(mPrefs.getString(""String_Node_Str"",""String_Node_Str"")) * 1000;
    }
 catch (    NumberFormatException ex) {
      Log.e(TAG,""String_Node_Str"" + ex.toString());
      mSlideShowInterval=3000;
    }
    if (mUseShuffleOrder) {
      generateShuffleOrder();
    }
  }
 else {
    win.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    if (mFullScreenInNormalMode) {
      win.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }
 else {
      win.clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }
    if (mGetter != null) {
      mGetter.cancelCurrent();
    }
    if (mShowActionIcons) {
      mActionIconPanel.setVisibility(View.VISIBLE);
    }
    ImageViewTouchBase dst=mImageView;
    dst.mLastXTouchPos=-1;
    dst.mLastYTouchPos=-1;
    for (    ImageViewTouchBase ivt : mSlideShowImageViews) {
      ivt.clear();
    }
    mShuffleOrder=null;
    if (mGetter != null) {
      setImage(mCurrentPosition);
    }
  }
}",0.976232174130598
184570,"private void showAlert(){
  int[] pickIds={R.id.attach,R.id.cancel};
  int[] normalIds={R.id.gallery,R.id.share,R.id.discard};
  int[] alwaysOnIds={R.id.play};
  int[] hideIds=pickIds;
  int[] connectIds=normalIds;
  if (mIsVideoCaptureIntent) {
    hideIds=normalIds;
    connectIds=pickIds;
  }
  for (  int id : hideIds) {
    mPostPictureAlert.findViewById(id).setVisibility(View.GONE);
  }
  ActionMenuButton shareButton=(ActionMenuButton)mPostPictureAlert.findViewById(R.id.share);
  shareButton.setRestricted(mCurrentVideoFileLength > SHARE_FILE_LENGTH_LIMIT);
  connectAndFadeIn(connectIds);
  connectAndFadeIn(alwaysOnIds);
  hideLastPictureButton();
  mPostPictureAlert.setVisibility(View.VISIBLE);
  if (!mIsVideoCaptureIntent) {
    mCurrentVideoUri=mThumbController.getUri();
    mCurrentVideoFilename=getDataPath(mCurrentVideoUri);
  }
  String path=mCurrentVideoFilename;
  if (path != null) {
    Bitmap videoFrame=Util.createVideoThumbnail(path);
    mVideoFrame.setImageBitmap(videoFrame);
    mVideoFrame.setVisibility(View.VISIBLE);
  }
}","private void showAlert(){
  int[] pickIds={R.id.attach,R.id.cancel};
  int[] normalIds={R.id.gallery,R.id.share,R.id.discard};
  int[] alwaysOnIds={R.id.play};
  int[] hideIds=pickIds;
  int[] connectIds=normalIds;
  if (mIsVideoCaptureIntent) {
    hideIds=normalIds;
    connectIds=pickIds;
  }
  for (  int id : hideIds) {
    mPostPictureAlert.findViewById(id).setVisibility(View.GONE);
  }
  ActionMenuButton shareButton=(ActionMenuButton)mPostPictureAlert.findViewById(R.id.share);
  shareButton.setRestricted(mCurrentVideoFileLength > SHARE_FILE_LENGTH_LIMIT);
  connectAndFadeIn(connectIds);
  connectAndFadeIn(alwaysOnIds);
  hideLastPictureButton();
  mPostPictureAlert.setVisibility(View.VISIBLE);
  if (!mIsVideoCaptureIntent) {
    if (mThumbController.isUriValid()) {
      mCurrentVideoUri=mThumbController.getUri();
      mCurrentVideoFilename=getDataPath(mCurrentVideoUri);
    }
 else {
      return;
    }
  }
  String path=mCurrentVideoFilename;
  if (path != null) {
    Bitmap videoFrame=Util.createVideoThumbnail(path);
    mVideoFrame.setImageBitmap(videoFrame);
    mVideoFrame.setVisibility(View.VISIBLE);
  }
}",0.948519362186788
184571,"/** 
 * Make sure ""acquire/release"" are pairing correctly
 */
public synchronized void releaseResourceLock(){
  Thread t=Thread.currentThread();
  mLocked=false;
  notifyAll();
}","/** 
 * Make sure ""acquire/release"" are pairing correctly
 */
public synchronized void releaseResourceLock(){
  mLocked=false;
  notifyAll();
}",0.8909657320872274
184572,"private synchronized IImageList allImages(boolean assumeMounted){
  if (mAllImages == null) {
    mNoImagesView=findViewById(R.id.no_images);
    mInclusion=ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS;
    Intent intent=getIntent();
    if (intent != null) {
      String type=intent.resolveType(this);
      TextView leftText=(TextView)findViewById(R.id.left_text);
      if (type != null) {
        if (isImageType(type)) {
          mInclusion=ImageManager.INCLUDE_IMAGES;
          if (isPickIntent()) {
            leftText.setText(R.string.pick_photos_gallery_title);
          }
 else {
            leftText.setText(R.string.photos_gallery_title);
          }
        }
        if (isVideoType(type)) {
          mInclusion=ImageManager.INCLUDE_VIDEOS;
          if (isPickIntent()) {
            leftText.setText(R.string.pick_videos_gallery_title);
          }
 else {
            leftText.setText(R.string.videos_gallery_title);
          }
        }
      }
      Bundle extras=intent.getExtras();
      String title=(extras != null) ? extras.getString(""String_Node_Str"") : null;
      if (title != null && title.length() > 0) {
        leftText.setText(title);
      }
      if (extras != null) {
        mInclusion=(ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS) & extras.getInt(""String_Node_Str"",mInclusion);
      }
      if (extras != null && extras.getBoolean(""String_Node_Str"")) {
        Log.d(TAG,""String_Node_Str"");
        mInclusion=ImageManager.INCLUDE_DRM_IMAGES;
      }
    }
    Uri uri=getIntent().getData();
    if (!assumeMounted) {
      mAllImages=ImageManager.emptyImageList();
    }
 else {
      mAllImages=ImageManager.allImages(getContentResolver(),ImageManager.DataLocation.NONE,mInclusion,mSortAscending ? ImageManager.SORT_ASCENDING : ImageManager.SORT_DESCENDING,(uri != null) ? uri.getQueryParameter(""String_Node_Str"") : null);
    }
  }
  return mAllImages;
}","private IImageList allImages(boolean assumeMounted){
  if (mAllImages == null) {
    mNoImagesView=findViewById(R.id.no_images);
    mInclusion=ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS;
    Intent intent=getIntent();
    if (intent != null) {
      String type=intent.resolveType(this);
      TextView leftText=(TextView)findViewById(R.id.left_text);
      if (type != null) {
        if (isImageType(type)) {
          mInclusion=ImageManager.INCLUDE_IMAGES;
          if (isPickIntent()) {
            leftText.setText(R.string.pick_photos_gallery_title);
          }
 else {
            leftText.setText(R.string.photos_gallery_title);
          }
        }
        if (isVideoType(type)) {
          mInclusion=ImageManager.INCLUDE_VIDEOS;
          if (isPickIntent()) {
            leftText.setText(R.string.pick_videos_gallery_title);
          }
 else {
            leftText.setText(R.string.videos_gallery_title);
          }
        }
      }
      Bundle extras=intent.getExtras();
      String title=(extras != null) ? extras.getString(""String_Node_Str"") : null;
      if (title != null && title.length() > 0) {
        leftText.setText(title);
      }
      if (extras != null) {
        mInclusion=(ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS) & extras.getInt(""String_Node_Str"",mInclusion);
      }
      if (extras != null && extras.getBoolean(""String_Node_Str"")) {
        Log.d(TAG,""String_Node_Str"");
        mInclusion=ImageManager.INCLUDE_DRM_IMAGES;
      }
    }
    Uri uri=getIntent().getData();
    if (!assumeMounted) {
      mAllImages=ImageManager.emptyImageList();
    }
 else {
      mAllImages=ImageManager.allImages(getContentResolver(),ImageManager.DataLocation.NONE,mInclusion,mSortAscending ? ImageManager.SORT_ASCENDING : ImageManager.SORT_DESCENDING,(uri != null) ? uri.getQueryParameter(""String_Node_Str"") : null);
    }
  }
  return mAllImages;
}",0.9966189856957088
184573,"private synchronized void start(){
  if (mDecodeThread != null) {
    return;
  }
  mDone=false;
  Thread t=new Thread(new WorkerThread());
  t.setName(""String_Node_Str"");
  mDecodeThread=t;
  t.start();
}","private void start(){
  if (mDecodeThread != null) {
    return;
  }
  mDone=false;
  Thread t=new Thread(new WorkerThread());
  t.setName(""String_Node_Str"");
  mDecodeThread=t;
  t.start();
}",0.9672544080604534
184574,"public void run(){
  while (!mDone) {
    WorkItem workItem=null;
synchronized (mQueue) {
      if (!mQueue.isEmpty()) {
        workItem=mQueue.remove(0);
      }
 else {
        if (!mThumbnailChecker.hasMoreThumbnailsToCheck()) {
          try {
            mQueue.wait();
          }
 catch (          InterruptedException ex) {
          }
          continue;
        }
      }
    }
    if (workItem == null) {
      mThumbnailChecker.checkNextThumbnail();
      continue;
    }
    final Bitmap b=workItem.mImage.miniThumbBitmap();
    if (workItem.mOnLoadedRunnable != null) {
      workItem.mOnLoadedRunnable.run(b);
    }
  }
}","public void run(){
  while (true) {
    WorkItem workItem=null;
synchronized (mQueue) {
      if (mDone) {
        break;
      }
      if (!mQueue.isEmpty()) {
        workItem=mQueue.remove(0);
      }
 else {
        if (!mThumbnailChecker.hasMoreThumbnailsToCheck()) {
          try {
            mQueue.wait();
          }
 catch (          InterruptedException ex) {
          }
          continue;
        }
      }
    }
    if (workItem == null) {
      mThumbnailChecker.checkNextThumbnail();
      continue;
    }
    final Bitmap b=workItem.mImage.miniThumbBitmap();
    if (workItem.mOnLoadedRunnable != null) {
      workItem.mOnLoadedRunnable.run(b);
    }
  }
}",0.9619482496194824
184575,"public synchronized void stop(){
  mDone=true;
synchronized (mQueue) {
    mQueue.notifyAll();
  }
  if (mDecodeThread != null) {
    try {
      Thread t=mDecodeThread;
      BitmapManager.instance().cancelThreadDecoding(t);
      t.join();
      mDecodeThread=null;
    }
 catch (    InterruptedException ex) {
    }
  }
  stopCheckingThumbnails();
}","public void stop(){
synchronized (mQueue) {
    mDone=true;
    mQueue.notifyAll();
  }
  if (mDecodeThread != null) {
    try {
      Thread t=mDecodeThread;
      BitmapManager.instance().cancelThreadDecoding(t);
      t.join();
      mDecodeThread=null;
    }
 catch (    InterruptedException ex) {
    }
  }
  stopCheckingThumbnails();
}",0.9090909090909092
184576,"public ImageLoader(Handler handler){
  mHandler=handler;
  mThumbnailChecker=new ThumbnailChecker();
  start();
}","public ImageLoader(Handler handler){
  mThumbnailChecker=new ThumbnailChecker();
  start();
}",0.9029126213592232
184577,"public static Uri addImage(ContentResolver cr,String title,long dateTaken,Location location,int orientation,String directory,String filename){
  ContentValues values=new ContentValues(7);
  values.put(Images.Media.TITLE,title);
  values.put(Images.Media.DISPLAY_NAME,filename);
  values.put(Images.Media.DATE_TAKEN,dateTaken);
  values.put(Images.Media.MIME_TYPE,""String_Node_Str"");
  values.put(Images.Media.ORIENTATION,orientation);
  File parentFile=new File(directory);
  String path=parentFile.toString().toLowerCase();
  String name=parentFile.getName();
  if (location != null) {
    values.put(Images.Media.LATITUDE,location.getLatitude());
    values.put(Images.Media.LONGITUDE,location.getLongitude());
  }
  if (directory != null && filename != null) {
    String value=directory + ""String_Node_Str"" + filename;
    values.put(Images.Media.DATA,value);
  }
  return cr.insert(STORAGE_URI,values);
}","public static Uri addImage(ContentResolver cr,String title,long dateTaken,Location location,int orientation,String directory,String filename){
  ContentValues values=new ContentValues(7);
  values.put(Images.Media.TITLE,title);
  values.put(Images.Media.DISPLAY_NAME,filename);
  values.put(Images.Media.DATE_TAKEN,dateTaken);
  values.put(Images.Media.MIME_TYPE,""String_Node_Str"");
  values.put(Images.Media.ORIENTATION,orientation);
  if (location != null) {
    values.put(Images.Media.LATITUDE,location.getLatitude());
    values.put(Images.Media.LONGITUDE,location.getLongitude());
  }
  if (directory != null && filename != null) {
    String value=directory + ""String_Node_Str"" + filename;
    values.put(Images.Media.DATA,value);
  }
  return cr.insert(STORAGE_URI,values);
}",0.925531914893617
184578,"static MenuItemsResult addImageMenuItems(Menu menu,int inclusions,final boolean isImage,final Activity activity,final Handler handler,final Runnable onDelete,final MenuInvoker onInvoke){
  final ArrayList<MenuItem> requiresWriteAccessItems=new ArrayList<MenuItem>();
  final ArrayList<MenuItem> requiresNoDrmAccessItems=new ArrayList<MenuItem>();
  if (isImage && ((inclusions & INCLUDE_ROTATE_MENU) != 0)) {
    SubMenu rotateSubmenu=menu.addSubMenu(IMAGE_SAVING_ITEM,MENU_IMAGE_ROTATE,40,R.string.rotate).setIcon(android.R.drawable.ic_menu_rotate);
    requiresWriteAccessItems.add(rotateSubmenu.getItem());
    if (rotateSubmenu != null) {
      requiresWriteAccessItems.add(rotateSubmenu.add(0,MENU_IMAGE_ROTATE_LEFT,50,R.string.rotate_left).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
        public boolean onMenuItemClick(        MenuItem item){
          return onRotateClicked(onInvoke,-90);
        }
      }
).setAlphabeticShortcut('l'));
      requiresWriteAccessItems.add(rotateSubmenu.add(0,MENU_IMAGE_ROTATE_RIGHT,60,R.string.rotate_right).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
        public boolean onMenuItemClick(        MenuItem item){
          return onRotateClicked(onInvoke,90);
        }
      }
).setAlphabeticShortcut('r'));
    }
  }
  if (isImage && ((inclusions & INCLUDE_CROP_MENU) != 0)) {
    MenuItem autoCrop=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_CROP,73,R.string.camera_crop);
    autoCrop.setIcon(android.R.drawable.ic_menu_crop);
    autoCrop.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onCropClicked(onInvoke,activity);
      }
    }
);
    requiresWriteAccessItems.add(autoCrop);
  }
  if (isImage && ((inclusions & INCLUDE_SET_MENU) != 0)) {
    MenuItem setMenu=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_SET,75,R.string.camera_set);
    setMenu.setIcon(android.R.drawable.ic_menu_set_as);
    setMenu.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onSetAsClicked(onInvoke,activity);
      }
    }
);
  }
  if ((inclusions & INCLUDE_SHARE_MENU) != 0) {
    MenuItem item1=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_SHARE,10,R.string.camera_share).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onImageShareClicked(onInvoke,activity,isImage);
      }
    }
);
    item1.setIcon(android.R.drawable.ic_menu_share);
    MenuItem item=item1;
    requiresNoDrmAccessItems.add(item);
  }
  if ((inclusions & INCLUDE_DELETE_MENU) != 0) {
    MenuItem deleteItem=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_TOSS,70,R.string.camera_toss);
    requiresWriteAccessItems.add(deleteItem);
    deleteItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        deleteImpl(activity,onDelete,isImage);
        return true;
      }
    }
).setAlphabeticShortcut('d').setIcon(android.R.drawable.ic_menu_delete);
  }
  if ((inclusions & INCLUDE_DETAILS_MENU) != 0) {
    MenuItem detailsMenu=menu.add(0,0,80,R.string.details).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onDetailsClicked(onInvoke,handler,activity,isImage);
      }
    }
);
    detailsMenu.setIcon(R.drawable.ic_menu_view_details);
  }
  if ((isImage) && ((inclusions & INCLUDE_SHOWMAP_MENU) != 0)) {
    menu.add(0,0,80,R.string.show_on_map).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onShowMapClicked(onInvoke,handler,activity);
      }
    }
).setIcon(R.drawable.ic_menu_3d_globe);
  }
  if ((!isImage) && ((inclusions & INCLUDE_VIEWPLAY_MENU) != 0)) {
    menu.add(VIDEO_SAVING_ITEM,MENU_VIDEO_PLAY,0,R.string.video_play).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onViewPlayClicked(onInvoke,activity);
      }
    }
);
  }
  return new MenuItemsResult(){
    public void gettingReadyToOpen(    Menu menu,    IImage image){
      if (image == null) {
        return;
      }
      boolean readOnly=image.isReadonly();
      boolean isDrm=image.isDrm();
      for (      MenuItem item : requiresWriteAccessItems) {
        item.setVisible(!readOnly);
        item.setEnabled(!readOnly);
      }
      for (      MenuItem item : requiresNoDrmAccessItems) {
        item.setVisible(!isDrm);
        item.setEnabled(!isDrm);
      }
    }
    public void aboutToCall(    MenuItem menu,    IImage image){
    }
  }
;
}","static MenuItemsResult addImageMenuItems(Menu menu,int inclusions,final boolean isImage,final Activity activity,final Handler handler,final Runnable onDelete,final MenuInvoker onInvoke){
  final ArrayList<MenuItem> requiresWriteAccessItems=new ArrayList<MenuItem>();
  final ArrayList<MenuItem> requiresNoDrmAccessItems=new ArrayList<MenuItem>();
  if (isImage && ((inclusions & INCLUDE_ROTATE_MENU) != 0)) {
    SubMenu rotateSubmenu=menu.addSubMenu(IMAGE_SAVING_ITEM,MENU_IMAGE_ROTATE,40,R.string.rotate).setIcon(android.R.drawable.ic_menu_rotate);
    requiresWriteAccessItems.add(rotateSubmenu.getItem());
    requiresWriteAccessItems.add(rotateSubmenu.add(0,MENU_IMAGE_ROTATE_LEFT,50,R.string.rotate_left).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onRotateClicked(onInvoke,-90);
      }
    }
).setAlphabeticShortcut('l'));
    requiresWriteAccessItems.add(rotateSubmenu.add(0,MENU_IMAGE_ROTATE_RIGHT,60,R.string.rotate_right).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onRotateClicked(onInvoke,90);
      }
    }
).setAlphabeticShortcut('r'));
  }
  if (isImage && ((inclusions & INCLUDE_CROP_MENU) != 0)) {
    MenuItem autoCrop=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_CROP,73,R.string.camera_crop);
    autoCrop.setIcon(android.R.drawable.ic_menu_crop);
    autoCrop.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onCropClicked(onInvoke,activity);
      }
    }
);
    requiresWriteAccessItems.add(autoCrop);
  }
  if (isImage && ((inclusions & INCLUDE_SET_MENU) != 0)) {
    MenuItem setMenu=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_SET,75,R.string.camera_set);
    setMenu.setIcon(android.R.drawable.ic_menu_set_as);
    setMenu.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onSetAsClicked(onInvoke,activity);
      }
    }
);
  }
  if ((inclusions & INCLUDE_SHARE_MENU) != 0) {
    MenuItem item1=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_SHARE,10,R.string.camera_share).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onImageShareClicked(onInvoke,activity,isImage);
      }
    }
);
    item1.setIcon(android.R.drawable.ic_menu_share);
    MenuItem item=item1;
    requiresNoDrmAccessItems.add(item);
  }
  if ((inclusions & INCLUDE_DELETE_MENU) != 0) {
    MenuItem deleteItem=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_TOSS,70,R.string.camera_toss);
    requiresWriteAccessItems.add(deleteItem);
    deleteItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        deleteImpl(activity,onDelete,isImage);
        return true;
      }
    }
).setAlphabeticShortcut('d').setIcon(android.R.drawable.ic_menu_delete);
  }
  if ((inclusions & INCLUDE_DETAILS_MENU) != 0) {
    MenuItem detailsMenu=menu.add(0,0,80,R.string.details).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onDetailsClicked(onInvoke,handler,activity,isImage);
      }
    }
);
    detailsMenu.setIcon(R.drawable.ic_menu_view_details);
  }
  if ((isImage) && ((inclusions & INCLUDE_SHOWMAP_MENU) != 0)) {
    menu.add(0,0,80,R.string.show_on_map).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onShowMapClicked(onInvoke,handler,activity);
      }
    }
).setIcon(R.drawable.ic_menu_3d_globe);
  }
  if ((!isImage) && ((inclusions & INCLUDE_VIEWPLAY_MENU) != 0)) {
    menu.add(VIDEO_SAVING_ITEM,MENU_VIDEO_PLAY,0,R.string.video_play).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onViewPlayClicked(onInvoke,activity);
      }
    }
);
  }
  return new MenuItemsResult(){
    public void gettingReadyToOpen(    Menu menu,    IImage image){
      if (image == null) {
        return;
      }
      boolean readOnly=image.isReadonly();
      boolean isDrm=image.isDrm();
      for (      MenuItem item : requiresWriteAccessItems) {
        item.setVisible(!readOnly);
        item.setEnabled(!readOnly);
      }
      for (      MenuItem item : requiresNoDrmAccessItems) {
        item.setVisible(!isDrm);
        item.setEnabled(!isDrm);
      }
    }
    public void aboutToCall(    MenuItem menu,    IImage image){
    }
  }
;
}",0.9933899905571294
184579,"private static void setReverseGeocodingDetails(View d,Activity context,float lat,float lng){
  String value=EMPTY_STRING;
  if (lat == INVALID_LATLNG || lng == INVALID_LATLNG) {
    hideDetailsRow(d,R.id.details_location_row);
    return;
  }
  try {
    Geocoder geocoder=new Geocoder(context);
    List<Address> address=geocoder.getFromLocation(lat,lng,1);
    Iterator<Address> iterator=address.iterator();
    while (iterator.hasNext()) {
      Address addr=iterator.next();
      value+=addr.getAddressLine(addr.getMaxAddressLineIndex());
      Log.v(TAG,addr.toString());
    }
  }
 catch (  IOException ex) {
    value=EMPTY_STRING;
    Log.e(TAG,""String_Node_Str"",ex);
  }
catch (  RuntimeException ex) {
    value=EMPTY_STRING;
    Log.e(TAG,""String_Node_Str"",ex);
  }
  if (value != EMPTY_STRING) {
    setDetailsValue(d,value,R.id.details_location_value);
  }
 else {
    hideDetailsRow(d,R.id.details_location_row);
  }
}","private static void setReverseGeocodingDetails(View d,Activity context,float lat,float lng){
  String value=EMPTY_STRING;
  if (lat == INVALID_LATLNG || lng == INVALID_LATLNG) {
    hideDetailsRow(d,R.id.details_location_row);
    return;
  }
  try {
    Geocoder geocoder=new Geocoder(context);
    List<Address> address=geocoder.getFromLocation(lat,lng,1);
    StringBuilder sb=new StringBuilder();
    for (    Address addr : address) {
      int index=addr.getMaxAddressLineIndex();
      sb.append(addr.getAddressLine(index));
    }
    value=sb.toString();
  }
 catch (  IOException ex) {
    value=EMPTY_STRING;
    Log.e(TAG,""String_Node_Str"",ex);
  }
catch (  RuntimeException ex) {
    value=EMPTY_STRING;
    Log.e(TAG,""String_Node_Str"",ex);
  }
  if (value != EMPTY_STRING) {
    setDetailsValue(d,value,R.id.details_location_value);
  }
 else {
    hideDetailsRow(d,R.id.details_location_row);
  }
}",0.7837398373983739
184580,"private void loadExifData(){
  Cursor c=getCursor();
  String filePath;
synchronized (c) {
    filePath=c.getString(mContainer.indexData());
  }
  ExifInterface mExif=new ExifInterface(filePath);
  if (mExifData == null) {
    mExifData=mExif.getAttributes();
  }
}","private void loadExifData(){
  Cursor c=getCursor();
  String filePath;
synchronized (c) {
    filePath=c.getString(mContainer.indexData());
  }
  mExif=new ExifInterface(filePath);
  if (mExifData == null) {
    mExifData=mExif.getAttributes();
  }
}",0.9341085271317828
184581,"public synchronized IImage getImageAt(int index){
  if (index < 0 || index > getCount()) {
    throw new IndexOutOfBoundsException(""String_Node_Str"" + index + ""String_Node_Str""+ getCount());
  }
  if (mSkipCounts == null || mSubList.length > mSkipCounts.length) {
    mSkipCounts=new int[mSubList.length];
  }
  if (mSkipList == null) {
    mSkipList=new ArrayList<Long>();
  }
  for (int i=0; i < mSubList.length; i++) {
    mSkipCounts[i]=0;
  }
  int skipCount=0;
  for (int i=0; i < mSkipList.size(); i++) {
    long v=mSkipList.get(i);
    int offset=(int)(v & 0xFFFFFFFF);
    int which=(int)(v >> 32);
    if (skipCount + offset > index) {
      int subindex=mSkipCounts[which] + (index - skipCount);
      IImage img=mSubList[which].getImageAt(subindex);
      return img;
    }
    skipCount+=offset;
    mSkipCounts[which]+=offset;
  }
  while (true) {
    long maxTimestamp=mSort == ImageManager.SORT_ASCENDING ? Long.MAX_VALUE : Long.MIN_VALUE;
    int which=-1;
    for (int i=0; i < mSubList.length; i++) {
      int pos=mSkipCounts[i];
      IImageList list=mSubList[i];
      if (pos < list.getCount()) {
        IImage image=list.getImageAt(pos);
        if (image != null) {
          long timestamp=image.getDateTaken();
          if (mSort == ImageManager.SORT_ASCENDING ? (timestamp < maxTimestamp) : (timestamp > maxTimestamp)) {
            maxTimestamp=timestamp;
            which=i;
          }
        }
      }
    }
    if (which == -1) {
      return null;
    }
    boolean done=false;
    if (mSkipList.size() > 0) {
      int pos=mSkipList.size() - 1;
      long oldEntry=mSkipList.get(pos);
      if ((oldEntry >> 32) == which) {
        long newEntry=oldEntry + 1;
        mSkipList.set(pos,newEntry);
        done=true;
      }
    }
    if (!done) {
      long newEntry=((long)which << 32) | 1;
      mSkipList.add(newEntry);
    }
    if (skipCount++ == index) {
      return mSubList[which].getImageAt(mSkipCounts[which]);
    }
    mSkipCounts[which]+=1;
  }
}","public IImage getImageAt(int index){
  if (index < 0 || index > getCount()) {
    throw new IndexOutOfBoundsException(""String_Node_Str"" + index + ""String_Node_Str""+ getCount());
  }
  if (mSkipCounts == null || mSubList.length > mSkipCounts.length) {
    mSkipCounts=new int[mSubList.length];
  }
  if (mSkipList == null) {
    mSkipList=new ArrayList<Long>();
  }
  for (int i=0; i < mSubList.length; i++) {
    mSkipCounts[i]=0;
  }
  int skipCount=0;
  for (int i=0; i < mSkipList.size(); i++) {
    long v=mSkipList.get(i);
    int offset=(int)(v & 0xFFFFFFFF);
    int which=(int)(v >> 32);
    if (skipCount + offset > index) {
      int subindex=mSkipCounts[which] + (index - skipCount);
      IImage img=mSubList[which].getImageAt(subindex);
      return img;
    }
    skipCount+=offset;
    mSkipCounts[which]+=offset;
  }
  while (true) {
    long maxTimestamp=mSort == ImageManager.SORT_ASCENDING ? Long.MAX_VALUE : Long.MIN_VALUE;
    int which=-1;
    for (int i=0; i < mSubList.length; i++) {
      int pos=mSkipCounts[i];
      IImageList list=mSubList[i];
      if (pos < list.getCount()) {
        IImage image=list.getImageAt(pos);
        if (image != null) {
          long timestamp=image.getDateTaken();
          if (mSort == ImageManager.SORT_ASCENDING ? (timestamp < maxTimestamp) : (timestamp > maxTimestamp)) {
            maxTimestamp=timestamp;
            which=i;
          }
        }
      }
    }
    if (which == -1) {
      return null;
    }
    boolean done=false;
    if (mSkipList.size() > 0) {
      int pos=mSkipList.size() - 1;
      long oldEntry=mSkipList.get(pos);
      if ((oldEntry >> 32) == which) {
        long newEntry=oldEntry + 1;
        mSkipList.set(pos,newEntry);
        done=true;
      }
    }
    if (!done) {
      long newEntry=((long)which << 32) | 1;
      mSkipList.add(newEntry);
    }
    if (skipCount++ == index) {
      return mSubList[which].getImageAt(mSkipCounts[which]);
    }
    mSkipCounts[which]+=1;
  }
}",0.9967394030599448
184582,"byte[] getMiniThumbFromFile(long id,byte[] data,long magicCheck){
  RandomAccessFile r=miniThumbDataFile();
  if (r == null)   return null;
  long pos=id * BYTES_PER_MINTHUMB;
synchronized (r) {
    try {
      r.seek(pos);
      if (r.readByte() == 1) {
        long magic=r.readLong();
        if (magic != magicCheck) {
          return null;
        }
        int length=r.readInt();
        r.read(data,0,length);
        return data;
      }
 else {
        return null;
      }
    }
 catch (    IOException ex) {
      return null;
    }
  }
}","byte[] getMiniThumbFromFile(long id,byte[] data,long magicCheck){
  RandomAccessFile r=miniThumbDataFile();
  if (r == null)   return null;
  long pos=id * BYTES_PER_MINTHUMB;
synchronized (r) {
    try {
      r.seek(pos);
      if (r.readByte() == 1) {
        long magic=r.readLong();
        if (magic != magicCheck) {
          return null;
        }
        int length=r.readInt();
        int got=r.read(data,0,length);
        if (got != length)         return null;
        return data;
      }
 else {
        return null;
      }
    }
 catch (    IOException ex) {
      return null;
    }
  }
}",0.9516407599309152
184583,"private void saveOutput(){
  if (mSaveUri != null) {
    OutputStream outputStream=null;
    try {
      outputStream=mContentResolver.openOutputStream(mSaveUri);
      if (outputStream != null) {
        mCroppedImage.compress(mOutputFormat,75,outputStream);
      }
    }
 catch (    IOException ex) {
    }
 finally {
      Util.closeSilently(outputStream);
    }
    Bundle extras=new Bundle();
    setResult(RESULT_OK,new Intent(mSaveUri.toString()).putExtras(extras));
  }
 else {
    Bundle extras=new Bundle();
    extras.putString(""String_Node_Str"",mCrop.getCropRect().toString());
    File oldPath=new File(mImage.getDataPath());
    File directory=new File(oldPath.getParent());
    int x=0;
    String fileName=oldPath.getName();
    fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
    while (true) {
      x+=1;
      String candidate=directory.toString() + ""String_Node_Str"" + fileName+ ""String_Node_Str""+ x+ ""String_Node_Str"";
      boolean exists=(new File(candidate)).exists();
      if (!exists) {
        break;
      }
    }
    try {
      Uri newUri=ImageManager.addImage(mContentResolver,mImage.getTitle(),mImage.getDateTaken(),null,0,directory.toString(),fileName + ""String_Node_Str"" + x+ ""String_Node_Str"");
      Cancelable<Void> cancelable=ImageManager.storeImage(newUri,mContentResolver,0,mCroppedImage,null);
      cancelable.get();
      setResult(RESULT_OK,new Intent().setAction(newUri.toString()).putExtras(extras));
    }
 catch (    Exception ex) {
    }
  }
  finish();
}","private void saveOutput(){
  if (mSaveUri != null) {
    OutputStream outputStream=null;
    try {
      outputStream=mContentResolver.openOutputStream(mSaveUri);
      if (outputStream != null) {
        mCroppedImage.compress(mOutputFormat,75,outputStream);
      }
    }
 catch (    IOException ex) {
      Log.e(TAG,""String_Node_Str"" + mSaveUri,ex);
    }
 finally {
      Util.closeSilently(outputStream);
    }
    Bundle extras=new Bundle();
    setResult(RESULT_OK,new Intent(mSaveUri.toString()).putExtras(extras));
  }
 else {
    Bundle extras=new Bundle();
    extras.putString(""String_Node_Str"",mCrop.getCropRect().toString());
    File oldPath=new File(mImage.getDataPath());
    File directory=new File(oldPath.getParent());
    int x=0;
    String fileName=oldPath.getName();
    fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
    while (true) {
      x+=1;
      String candidate=directory.toString() + ""String_Node_Str"" + fileName+ ""String_Node_Str""+ x+ ""String_Node_Str"";
      boolean exists=(new File(candidate)).exists();
      if (!exists) {
        break;
      }
    }
    try {
      Uri newUri=ImageManager.addImage(mContentResolver,mImage.getTitle(),mImage.getDateTaken(),null,0,directory.toString(),fileName + ""String_Node_Str"" + x+ ""String_Node_Str"");
      Cancelable<Void> cancelable=ImageManager.storeImage(newUri,mContentResolver,0,mCroppedImage,null);
      cancelable.get();
      setResult(RESULT_OK,new Intent().setAction(newUri.toString()).putExtras(extras));
    }
 catch (    Exception ex) {
    }
  }
  finish();
}",0.9839331619537276
184584,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (icicle != null) {
    mDoLaunch=icicle.getBoolean(DO_LAUNCH_ICICLE);
    mTempFilePath=icicle.getString(TEMP_FILE_PATH_ICICLE);
  }
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (icicle != null) {
    mDoLaunch=icicle.getBoolean(DO_LAUNCH_ICICLE);
    mTempFile=new File(icicle.getString(TEMP_FILE_PATH_ICICLE));
  }
}",0.9678899082568808
184585,"protected void formatIntent(Intent intent){
  File f=getFileStreamPath(""String_Node_Str"");
  (new File(f.getParent())).mkdirs();
  mTempFilePath=f.toString();
  f.delete();
  int width=getWallpaperDesiredMinimumWidth();
  int height=getWallpaperDesiredMinimumHeight();
  intent.putExtra(""String_Node_Str"",width);
  intent.putExtra(""String_Node_Str"",height);
  intent.putExtra(""String_Node_Str"",width);
  intent.putExtra(""String_Node_Str"",height);
  intent.putExtra(""String_Node_Str"",true);
  intent.putExtra(""String_Node_Str"",true);
  intent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.parse(""String_Node_Str"" + mTempFilePath));
  intent.putExtra(""String_Node_Str"",Bitmap.CompressFormat.PNG.name());
}","protected void formatIntent(Intent intent){
  mTempFile=getFileStreamPath(""String_Node_Str"");
  mTempFile.getParentFile().mkdirs();
  int width=getWallpaperDesiredMinimumWidth();
  int height=getWallpaperDesiredMinimumHeight();
  intent.putExtra(""String_Node_Str"",width);
  intent.putExtra(""String_Node_Str"",height);
  intent.putExtra(""String_Node_Str"",width);
  intent.putExtra(""String_Node_Str"",height);
  intent.putExtra(""String_Node_Str"",true);
  intent.putExtra(""String_Node_Str"",true);
  intent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(mTempFile));
  intent.putExtra(""String_Node_Str"",Bitmap.CompressFormat.PNG.name());
}",0.9170437405731524
184586,"@Override protected void onSaveInstanceState(Bundle icicle){
  icicle.putBoolean(DO_LAUNCH_ICICLE,mDoLaunch);
  icicle.putString(TEMP_FILE_PATH_ICICLE,mTempFilePath);
}","@Override protected void onSaveInstanceState(Bundle icicle){
  icicle.putBoolean(DO_LAUNCH_ICICLE,mDoLaunch);
  icicle.putString(TEMP_FILE_PATH_ICICLE,mTempFile.getAbsolutePath());
}",0.96
184587,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if ((requestCode == PHOTO_PICKED || requestCode == CROP_DONE) && (resultCode == RESULT_OK) && (data != null)) {
    try {
      File tempFile=new File(mTempFilePath);
      InputStream s=new FileInputStream(tempFile);
      Bitmap bitmap=BitmapFactory.decodeStream(s);
      if (bitmap == null) {
        Log.e(LOG_TAG,""String_Node_Str"" + ""String_Node_Str"" + mTempFilePath);
      }
 else {
        mHandler.sendEmptyMessage(SHOW_PROGRESS);
        new SetWallpaperThread(bitmap,mHandler,this,tempFile).start();
      }
      mDoLaunch=false;
    }
 catch (    FileNotFoundException ex) {
    }
  }
 else {
    setResult(RESULT_CANCELED);
    finish();
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if ((requestCode == PHOTO_PICKED || requestCode == CROP_DONE) && (resultCode == RESULT_OK) && (data != null)) {
    try {
      InputStream s=new FileInputStream(mTempFile);
      try {
        Bitmap bitmap=BitmapFactory.decodeStream(s);
        if (bitmap == null) {
          Log.e(LOG_TAG,""String_Node_Str"" + ""String_Node_Str"" + mTempFile);
        }
 else {
          mHandler.sendEmptyMessage(SHOW_PROGRESS);
          new SetWallpaperThread(bitmap,mHandler,this,mTempFile).start();
        }
        mDoLaunch=false;
      }
  finally {
        Util.closeSilently(s);
      }
    }
 catch (    FileNotFoundException ex) {
      Log.e(LOG_TAG,""String_Node_Str"" + mTempFile,ex);
    }
  }
 else {
    setResult(RESULT_CANCELED);
    finish();
  }
}",0.8307111390811831
184588,"private void showAlert(){
  int[] pickIds={R.id.attach,R.id.cancel};
  int[] normalIds={R.id.gallery,R.id.share,R.id.discard};
  int[] alwaysOnIds={R.id.play};
  int[] hideIds=pickIds;
  int[] connectIds=normalIds;
  if (mIsVideoCaptureIntent) {
    hideIds=normalIds;
    connectIds=pickIds;
  }
  for (  int id : hideIds) {
    mPostPictureAlert.findViewById(id).setVisibility(View.GONE);
  }
  ActionMenuButton shareButton=(ActionMenuButton)mPostPictureAlert.findViewById(R.id.share);
  shareButton.setRestricted(mCurrentVideoFileLength > SHARE_FILE_LENGTH_LIMIT);
  connectAndFadeIn(connectIds);
  connectAndFadeIn(alwaysOnIds);
  hideLastPictureButton();
  mPostPictureAlert.setVisibility(View.VISIBLE);
  if (!mIsVideoCaptureIntent) {
    mCurrentVideoUri=mThumbController.getUri();
    mCurrentVideoFilename=getDataPath(mCurrentVideoUri);
  }
  String path=mCurrentVideoFilename;
  if (path != null) {
    Bitmap videoFrame=Util.createVideoThumbnail(path);
    mVideoFrame.setImageBitmap(videoFrame);
    mVideoFrame.setVisibility(View.VISIBLE);
  }
}","private void showAlert(){
  int[] pickIds={R.id.attach,R.id.cancel};
  int[] normalIds={R.id.gallery,R.id.share,R.id.discard};
  int[] alwaysOnIds={R.id.play};
  int[] hideIds=pickIds;
  int[] connectIds=normalIds;
  if (mIsVideoCaptureIntent) {
    hideIds=normalIds;
    connectIds=pickIds;
  }
  for (  int id : hideIds) {
    mPostPictureAlert.findViewById(id).setVisibility(View.GONE);
  }
  ActionMenuButton shareButton=(ActionMenuButton)mPostPictureAlert.findViewById(R.id.share);
  shareButton.setRestricted(mCurrentVideoFileLength > SHARE_FILE_LENGTH_LIMIT);
  connectAndFadeIn(connectIds);
  connectAndFadeIn(alwaysOnIds);
  hideLastPictureButton();
  mPostPictureAlert.setVisibility(View.VISIBLE);
  if (!mIsVideoCaptureIntent) {
    if (mThumbController.isUriValid()) {
      mCurrentVideoUri=mThumbController.getUri();
      mCurrentVideoFilename=getDataPath(mCurrentVideoUri);
    }
 else {
      return;
    }
  }
  String path=mCurrentVideoFilename;
  if (path != null) {
    Bitmap videoFrame=Util.createVideoThumbnail(path);
    mVideoFrame.setImageBitmap(videoFrame);
    mVideoFrame.setVisibility(View.VISIBLE);
  }
}",0.948519362186788
184589,"public void onZoom(boolean zoomIn){
  if (zoomIn) {
    mImageView.zoomIn();
  }
 else {
    mImageView.zoomOut();
  }
}","public void onZoom(boolean zoomIn){
  if (zoomIn) {
    mImageView.zoomIn();
  }
 else {
    mImageView.zoomOut();
  }
  updateZoomButtonsEnabled();
}",0.8888888888888888
184590,"private void setupZoomButtonController(View rootView){
  mGestureDetector=new GestureDetector(this,new MyGestureListener());
  mZoomButtonsController=new ZoomButtonsController(rootView);
  mZoomButtonsController.setAutoDismissed(false);
  mZoomButtonsController.setOnZoomListener(new ZoomButtonsController.OnZoomListener(){
    public void onVisibilityChanged(    boolean visible){
      if (visible) {
        updateZoomButtonsEnabled();
      }
    }
    public void onZoom(    boolean zoomIn){
      if (zoomIn) {
        mImageView.zoomIn();
      }
 else {
        mImageView.zoomOut();
      }
    }
  }
);
}","private void setupZoomButtonController(View rootView){
  mGestureDetector=new GestureDetector(this,new MyGestureListener());
  mZoomButtonsController=new ZoomButtonsController(rootView);
  mZoomButtonsController.setAutoDismissed(false);
  mZoomButtonsController.setOnZoomListener(new ZoomButtonsController.OnZoomListener(){
    public void onVisibilityChanged(    boolean visible){
      if (visible) {
        updateZoomButtonsEnabled();
      }
    }
    public void onZoom(    boolean zoomIn){
      if (zoomIn) {
        mImageView.zoomIn();
      }
 else {
        mImageView.zoomOut();
      }
      updateZoomButtonsEnabled();
    }
  }
);
}",0.9730586370839936
184591,"public void run(){
  int nextWarning=1;
  while (true) {
    try {
synchronized (watchDogSync) {
        watchDogSync.wait(1000);
      }
    }
 catch (    InterruptedException ex) {
    }
    if (mPreviewing)     break;
    int delay=(int)(SystemClock.elapsedRealtime() - wallTimeStart) / 1000;
    if (delay >= nextWarning) {
      Log.e(TAG,""String_Node_Str"" + delay + ""String_Node_Str"");
      if (nextWarning < 60) {
        nextWarning<<=1;
        if (nextWarning == 16) {
          nextWarning=15;
        }
      }
 else {
        nextWarning+=60;
      }
    }
  }
}","public void run(){
  updateStorageHint(mPicturesRemaining);
}",0.1318681318681318
184592,"/** 
 * Initiate the capture of an image.
 */
public void initiate(){
  if (mCameraDevice == null) {
    return;
  }
  mCancel=false;
  mCapturing=true;
  capture();
}","/** 
 * Initiate the capture of an image.
 */
public void initiate(){
  if (mCameraDevice == null) {
    return;
  }
  mCancel=false;
  capture();
}",0.9396825396825396
184593,"private void setViewFinder(int w,int h,boolean startPreview){
  if (mPausing)   return;
  if (mPreviewing && w == mViewFinderWidth && h == mViewFinderHeight) {
    return;
  }
  if (!ensureCameraDevice())   return;
  if (mSurfaceHolder == null)   return;
  if (isFinishing())   return;
  if (mPausing)   return;
  mViewFinderWidth=w;
  mViewFinderHeight=h;
  if (mOriginalViewFinderHeight == 0) {
    mOriginalViewFinderWidth=w;
    mOriginalViewFinderHeight=h;
  }
  if (startPreview == false)   return;
  if (mPreviewing)   stopPreview();
  try {
    mCameraDevice.setPreviewDisplay(mSurfaceHolder);
  }
 catch (  IOException exception) {
    mCameraDevice.release();
    mCameraDevice=null;
    return;
  }
  setCameraParameter();
  final long wallTimeStart=SystemClock.elapsedRealtime();
  final long threadTimeStart=Debug.threadCpuTimeNanos();
  final Object watchDogSync=new Object();
  Thread watchDog=new Thread(new Runnable(){
    public void run(){
      int nextWarning=1;
      while (true) {
        try {
synchronized (watchDogSync) {
            watchDogSync.wait(1000);
          }
        }
 catch (        InterruptedException ex) {
        }
        if (mPreviewing)         break;
        int delay=(int)(SystemClock.elapsedRealtime() - wallTimeStart) / 1000;
        if (delay >= nextWarning) {
          Log.e(TAG,""String_Node_Str"" + delay + ""String_Node_Str"");
          if (nextWarning < 60) {
            nextWarning<<=1;
            if (nextWarning == 16) {
              nextWarning=15;
            }
          }
 else {
            nextWarning+=60;
          }
        }
      }
    }
  }
);
  watchDog.start();
  mCameraDevice.setOneShotPreviewCallback(mOneShotPreviewCallback);
  try {
    mCameraDevice.startPreview();
  }
 catch (  Throwable e) {
  }
  mPreviewing=true;
synchronized (watchDogSync) {
    watchDogSync.notify();
  }
  long threadTimeEnd=Debug.threadCpuTimeNanos();
  long wallTimeEnd=SystemClock.elapsedRealtime();
  if ((wallTimeEnd - wallTimeStart) > 3000) {
    Log.w(TAG,""String_Node_Str"" + (wallTimeEnd - wallTimeStart) + ""String_Node_Str""+ (threadTimeEnd - threadTimeStart) / 1000000 + ""String_Node_Str"");
  }
}","private void setViewFinder(int w,int h,boolean startPreview){
  if (mPausing)   return;
  if (mPreviewing && w == mViewFinderWidth && h == mViewFinderHeight) {
    return;
  }
  if (!ensureCameraDevice())   return;
  if (mSurfaceHolder == null)   return;
  if (isFinishing())   return;
  if (mPausing)   return;
  mViewFinderWidth=w;
  mViewFinderHeight=h;
  if (mOriginalViewFinderHeight == 0) {
    mOriginalViewFinderWidth=w;
    mOriginalViewFinderHeight=h;
  }
  if (startPreview == false)   return;
  if (mPreviewing)   stopPreview();
  try {
    mCameraDevice.setPreviewDisplay(mSurfaceHolder);
  }
 catch (  IOException exception) {
    mCameraDevice.release();
    mCameraDevice=null;
    return;
  }
  setCameraParameter();
  final long wallTimeStart=SystemClock.elapsedRealtime();
  final long threadTimeStart=Debug.threadCpuTimeNanos();
  mCameraDevice.setOneShotPreviewCallback(mOneShotPreviewCallback);
  try {
    mCameraDevice.startPreview();
  }
 catch (  Throwable e) {
  }
  mPreviewing=true;
  long threadTimeEnd=Debug.threadCpuTimeNanos();
  long wallTimeEnd=SystemClock.elapsedRealtime();
  if ((wallTimeEnd - wallTimeStart) > 3000) {
    Log.w(TAG,""String_Node_Str"" + (wallTimeEnd - wallTimeStart) + ""String_Node_Str""+ (threadTimeEnd - threadTimeStart) / 1000000 + ""String_Node_Str"");
  }
}",0.6762507188039103
184594,"public void storeImage(byte[] data,android.hardware.Camera camera,Location loc){
  boolean captureOnly=mIsImageCaptureIntent;
  if (!captureOnly) {
    storeImage(data,loc);
    sendBroadcast(new Intent(""String_Node_Str"",mLastContentUri));
    setLastPictureThumb(data,mCaptureObject.getLastCaptureUri());
    dismissFreezeFrame();
  }
 else {
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inSampleSize=4;
    if (DEBUG_TIME_OPERATIONS) {
      startTiming();
    }
    mCaptureOnlyBitmap=BitmapFactory.decodeByteArray(data,0,data.length,options);
    if (DEBUG_TIME_OPERATIONS) {
      stopTiming();
      Log.d(TAG,""String_Node_Str"" + mCaptureOnlyBitmap.getWidth() + ""String_Node_Str""+ mCaptureOnlyBitmap.getHeight()+ ""String_Node_Str""+ (mWallTimeEnd - mWallTimeStart)+ ""String_Node_Str""+ ((mThreadTimeEnd - mThreadTimeStart) / 1000000)+ ""String_Node_Str"");
    }
    showPostCaptureAlert();
    cancelAutomaticPreviewRestart();
  }
  mCapturing=false;
}","public void storeImage(byte[] data,android.hardware.Camera camera,Location loc){
  boolean captureOnly=mIsImageCaptureIntent;
  if (!captureOnly) {
    storeImage(data,loc);
    sendBroadcast(new Intent(""String_Node_Str"",mLastContentUri));
    setLastPictureThumb(data,mCaptureObject.getLastCaptureUri());
    dismissFreezeFrame();
  }
 else {
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inSampleSize=4;
    mCaptureOnlyBitmap=BitmapFactory.decodeByteArray(data,0,data.length,options);
    showPostCaptureAlert();
    cancelAutomaticPreviewRestart();
  }
}",0.7468193384223919
184595,"/** 
 * Given a HashMap of Exif tags and associated values, an Exif section in the JPG file is created and loaded with the tag data. saveAttributes() is expensive because it involves copying all the JPG data from one file to another and deleting the old file and renaming the other. It's best to collect all the attributes to write and make a single call rather than multiple calls for each attribute. You must call ""commitChanges()"" at some point to commit the changes.
 */
public void saveAttributes(HashMap<String,String> attributes){
  StringBuilder sb=new StringBuilder();
  int size=attributes.size();
  if (attributes.containsKey(""String_Node_Str"")) {
    --size;
  }
  sb.append(size + ""String_Node_Str"");
  Iterator<String> keyIterator=attributes.keySet().iterator();
  while (keyIterator.hasNext()) {
    String key=keyIterator.next();
    if (key.equals(""String_Node_Str"")) {
      continue;
    }
    String val=attributes.get(key);
    sb.append(key + ""String_Node_Str"");
    sb.append(val.length() + ""String_Node_Str"");
    sb.append(val);
  }
  String s=sb.toString();
  saveAttributesNative(mFilename,s);
  commitChangesNative(mFilename);
  mSavedAttributes=true;
}","/** 
 * Given a HashMap of Exif tags and associated values, an Exif section in the JPG file is created and loaded with the tag data. saveAttributes() is expensive because it involves copying all the JPG data from one file to another and deleting the old file and renaming the other. It's best to collect all the attributes to write and make a single call rather than multiple calls for each attribute. You must call ""commitChanges()"" at some point to commit the changes.
 */
public void saveAttributes(HashMap<String,String> attributes){
  StringBuilder sb=new StringBuilder();
  int size=attributes.size();
  if (attributes.containsKey(""String_Node_Str"")) {
    --size;
  }
  sb.append(size + ""String_Node_Str"");
  for (  Map.Entry<String,String> iter : attributes.entrySet()) {
    String key=iter.getKey();
    if (key.equals(""String_Node_Str"")) {
      continue;
    }
    String val=iter.getValue();
    sb.append(key + ""String_Node_Str"");
    sb.append(val.length() + ""String_Node_Str"");
    sb.append(val);
  }
  String s=sb.toString();
  saveAttributesNative(mFilename,s);
  commitChangesNative(mFilename);
  mSavedAttributes=true;
}",0.9224806201550388
184596,"LayoutSpec(int w,int h,int leftEdgePadding,int rightEdgePadding,int intercellSpacing){
  mCellWidth=w;
  mCellHeight=h;
  mLeftEdgePadding=leftEdgePadding;
  mRightEdgePadding=rightEdgePadding;
  mCellSpacing=intercellSpacing;
}","LayoutSpec(int w,int h,int intercellSpacing,int leftEdgePadding){
  mCellWidth=w;
  mCellHeight=h;
  mCellSpacing=intercellSpacing;
  mLeftEdgePadding=leftEdgePadding;
}",0.5843828715365239
184597,"private void paintSelection(Canvas canvas){
  if (mCurrentSelection == SELECT_NONE)   return;
  int row=mCurrentSelection / mColumns;
  int col=mCurrentSelection - (row * mColumns);
  int spacing=mSpec.mCellSpacing;
  int leftSpacing=mSpec.mLeftEdgePadding;
  int xPos=leftSpacing + (col * (mSpec.mCellWidth + spacing));
  int yTop=spacing + (row * mBlockHeight);
  int yBottom=yTop + mSpec.mCellHeight;
  int type=OUTLINE_SELECTED;
  if (mCurrentSelectionPressed) {
    type=OUTLINE_PRESSED;
  }
  canvas.drawBitmap(mOutline[type],xPos,yTop,null);
}","private void paintSelection(Canvas canvas){
  if (mCurrentSelection == SELECT_NONE)   return;
  int row=mCurrentSelection / mColumns;
  int col=mCurrentSelection - (row * mColumns);
  int spacing=mSpec.mCellSpacing;
  int leftSpacing=mSpec.mLeftEdgePadding;
  int xPos=leftSpacing + (col * (mSpec.mCellWidth + spacing));
  int yTop=spacing + (row * mBlockHeight);
  int type=OUTLINE_SELECTED;
  if (mCurrentSelectionPressed) {
    type=OUTLINE_PRESSED;
  }
  canvas.drawBitmap(mOutline[type],xPos,yTop,null);
}",0.9622641509433962
184598,"@Override public void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (!mRunning) {
    return;
  }
  mSpec=mCellSizeChoices[mSizeChoice];
  int width=right - left;
  mColumns=1 + (width - mSpec.mCellWidth) / (mSpec.mCellWidth + mSpec.mCellSpacing);
  mSpec.mLeftEdgePadding=(width - ((mColumns - 1) * mSpec.mCellSpacing) - (mColumns * mSpec.mCellWidth)) / 2;
  mSpec.mRightEdgePadding=mSpec.mLeftEdgePadding;
  mRows=(mCount + mColumns - 1) / mColumns;
  mBlockHeight=mSpec.mCellSpacing + mSpec.mCellHeight;
  mMaxScrollY=mSpec.mCellSpacing + (mRows * mBlockHeight) - (bottom - top);
  mScrollY=Math.max(0,Math.min(mMaxScrollY,mScrollY));
  generateOutlineBitmap();
  if (mImageBlockManager != null) {
    mImageBlockManager.recycle();
  }
  mImageBlockManager=new ImageBlockManager(mHandler,mRedrawCallback,mAllImages,mLoader,mDrawAdapter,mSpec,mColumns,width,mOutline[OUTLINE_EMPTY]);
  mListener.onLayoutComplete(changed);
  moveDataWindow();
  mLayoutComplete=true;
}","@Override public void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (!mRunning) {
    return;
  }
  mSpec=mCellSizeChoices[mSizeChoice];
  int width=right - left;
  mColumns=1 + (width - mSpec.mCellWidth) / (mSpec.mCellWidth + mSpec.mCellSpacing);
  mSpec.mLeftEdgePadding=(width - ((mColumns - 1) * mSpec.mCellSpacing) - (mColumns * mSpec.mCellWidth)) / 2;
  mRows=(mCount + mColumns - 1) / mColumns;
  mBlockHeight=mSpec.mCellSpacing + mSpec.mCellHeight;
  mMaxScrollY=mSpec.mCellSpacing + (mRows * mBlockHeight) - (bottom - top);
  mScrollY=Math.max(0,Math.min(mMaxScrollY,mScrollY));
  generateOutlineBitmap();
  if (mImageBlockManager != null) {
    mImageBlockManager.recycle();
  }
  mImageBlockManager=new ImageBlockManager(mHandler,mRedrawCallback,mAllImages,mLoader,mDrawAdapter,mSpec,mColumns,width,mOutline[OUTLINE_EMPTY]);
  mListener.onLayoutComplete(changed);
  moveDataWindow();
  mLayoutComplete=true;
}",0.975442043222004
184599,"@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  final float maxVelocity=2500;
  if (velocityY > maxVelocity) {
    velocityY=maxVelocity;
  }
 else   if (velocityY < -maxVelocity) {
    velocityY=-maxVelocity;
  }
  select(SELECT_NONE,false);
  if (mFling) {
    mScroller=new Scroller(getContext());
    mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);
    computeScroll();
  }
  return true;
}","@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  final float maxVelocity=2500;
  if (velocityY > maxVelocity) {
    velocityY=maxVelocity;
  }
 else   if (velocityY < -maxVelocity) {
    velocityY=-maxVelocity;
  }
  select(SELECT_NONE,false);
  mScroller=new Scroller(getContext());
  mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);
  computeScroll();
  return true;
}",0.8240534521158129
184600,"public void setImageBitmapResetBase(final Bitmap bitmap,final boolean resetSupp){
  final int viewWidth=getWidth();
  final int viewHeight=getHeight();
  if (viewWidth <= 0) {
    mOnLayoutRunnable=new Runnable(){
      public void run(){
        setImageBitmapResetBase(bitmap,resetSupp);
      }
    }
;
    return;
  }
  if (bitmap != null) {
    getProperBaseMatrix(bitmap,mBaseMatrix);
    setImageBitmap(bitmap);
  }
 else {
    mBaseMatrix.reset();
    setImageBitmap(null);
  }
  if (resetSupp) {
    mSuppMatrix.reset();
  }
  setImageMatrix(getImageViewMatrix());
  mMaxZoom=maxZoom();
}","public void setImageBitmapResetBase(final Bitmap bitmap,final boolean resetSupp){
  final int viewWidth=getWidth();
  if (viewWidth <= 0) {
    mOnLayoutRunnable=new Runnable(){
      public void run(){
        setImageBitmapResetBase(bitmap,resetSupp);
      }
    }
;
    return;
  }
  if (bitmap != null) {
    getProperBaseMatrix(bitmap,mBaseMatrix);
    setImageBitmap(bitmap);
  }
 else {
    mBaseMatrix.reset();
    setImageBitmap(null);
  }
  if (resetSupp) {
    mSuppMatrix.reset();
  }
  setImageMatrix(getImageViewMatrix());
  mMaxZoom=maxZoom();
}",0.9689119170984456
184601,"private Integer getBookmark(){
  if (!uriSupportsBookmarks(mUri)) {
    return null;
  }
  String[] projection=new String[]{Video.VideoColumns.DURATION,Video.VideoColumns.BOOKMARK};
  try {
    Cursor cursor=getContentResolver().query(mUri,projection,null,null,null);
    if (cursor != null) {
      try {
        if (cursor.moveToFirst()) {
          int duration=getCursorInteger(cursor,0);
          int bookmark=getCursorInteger(cursor,1);
          final int ONE_MINUTE=60 * 1000;
          final int TWO_MINUTES=2 * ONE_MINUTE;
          final int FIVE_MINUTES=5 * ONE_MINUTE;
          if ((bookmark < TWO_MINUTES) || (duration < FIVE_MINUTES) || (bookmark > (duration - ONE_MINUTE))) {
            return null;
          }
          return new Integer(bookmark);
        }
      }
  finally {
        cursor.close();
      }
    }
  }
 catch (  SQLiteException e) {
  }
  return null;
}","private Integer getBookmark(){
  if (!uriSupportsBookmarks(mUri)) {
    return null;
  }
  String[] projection=new String[]{Video.VideoColumns.DURATION,Video.VideoColumns.BOOKMARK};
  try {
    Cursor cursor=getContentResolver().query(mUri,projection,null,null,null);
    if (cursor != null) {
      try {
        if (cursor.moveToFirst()) {
          int duration=getCursorInteger(cursor,0);
          int bookmark=getCursorInteger(cursor,1);
          final int ONE_MINUTE=60 * 1000;
          final int TWO_MINUTES=2 * ONE_MINUTE;
          final int FIVE_MINUTES=5 * ONE_MINUTE;
          if ((bookmark < TWO_MINUTES) || (duration < FIVE_MINUTES) || (bookmark > (duration - ONE_MINUTE))) {
            return null;
          }
          return Integer.valueOf(bookmark);
        }
      }
  finally {
        cursor.close();
      }
    }
  }
 catch (  SQLiteException e) {
  }
  return null;
}",0.9854910714285714
184602,"public Bitmap thumbBitmap(){
  Bitmap bitmap=null;
  if (mContainer.mThumbUri != null) {
    Cursor c=mContentResolver.query(mContainer.mThumbUri,THUMB_PROJECTION,Thumbnails.IMAGE_ID + ""String_Node_Str"",new String[]{String.valueOf(fullSizeImageId())},null);
    try {
      if (c.moveToFirst()) {
        bitmap=decodeCurrentImage(c.getLong(0));
      }
    }
 catch (    RuntimeException ex) {
      return null;
    }
 finally {
      c.close();
    }
  }
  if (bitmap == null) {
    bitmap=fullSizeBitmap(THUMBNAIL_TARGET_SIZE,false);
    bitmap=mContainer.storeThumbnail(bitmap,fullSizeImageId());
  }
  if (bitmap != null) {
    bitmap=Util.rotate(bitmap,getDegreesRotated());
  }
  long elapsed=System.currentTimeMillis();
  return bitmap;
}","public Bitmap thumbBitmap(){
  Bitmap bitmap=null;
  if (mContainer.mThumbUri != null) {
    Cursor c=mContentResolver.query(mContainer.mThumbUri,THUMB_PROJECTION,Thumbnails.IMAGE_ID + ""String_Node_Str"",new String[]{String.valueOf(fullSizeImageId())},null);
    try {
      if (c.moveToFirst()) {
        bitmap=decodeCurrentImage(c.getLong(0));
      }
    }
 catch (    RuntimeException ex) {
      return null;
    }
 finally {
      c.close();
    }
  }
  if (bitmap == null) {
    bitmap=fullSizeBitmap(THUMBNAIL_TARGET_SIZE,false);
    bitmap=mContainer.storeThumbnail(bitmap,fullSizeImageId());
  }
  if (bitmap != null) {
    bitmap=Util.rotate(bitmap,getDegreesRotated());
  }
  return bitmap;
}",0.9483115093039284
184603,"private BitmapFactory.Options snifBitmapOptions(){
  ParcelFileDescriptor input=getPFD();
  if (input == null)   return null;
  try {
    Uri uri=fullSizeImageUri();
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inJustDecodeBounds=true;
    BitmapManager.instance().decodeFileDescriptor(input.getFileDescriptor(),options);
    return options;
  }
  finally {
    Util.closeSiliently(input);
  }
}","private BitmapFactory.Options snifBitmapOptions(){
  ParcelFileDescriptor input=getPFD();
  if (input == null)   return null;
  try {
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inJustDecodeBounds=true;
    BitmapManager.instance().decodeFileDescriptor(input.getFileDescriptor(),options);
    return options;
  }
  finally {
    Util.closeSiliently(input);
  }
}",0.3618581907090464
184604,"/** 
 * Make sure ""acquire/release"" are pairing correctly
 */
public synchronized void releaseResourceLock(){
  Thread t=Thread.currentThread();
  mLocked=false;
  notifyAll();
}","/** 
 * Make sure ""acquire/release"" are pairing correctly
 */
public synchronized void releaseResourceLock(){
  mLocked=false;
  notifyAll();
}",0.8909657320872274
184605,"private synchronized IImageList allImages(boolean assumeMounted){
  if (mAllImages == null) {
    mNoImagesView=findViewById(R.id.no_images);
    mInclusion=ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS;
    Intent intent=getIntent();
    if (intent != null) {
      String type=intent.resolveType(this);
      TextView leftText=(TextView)findViewById(R.id.left_text);
      if (type != null) {
        if (isImageType(type)) {
          mInclusion=ImageManager.INCLUDE_IMAGES;
          if (isPickIntent()) {
            leftText.setText(R.string.pick_photos_gallery_title);
          }
 else {
            leftText.setText(R.string.photos_gallery_title);
          }
        }
        if (isVideoType(type)) {
          mInclusion=ImageManager.INCLUDE_VIDEOS;
          if (isPickIntent()) {
            leftText.setText(R.string.pick_videos_gallery_title);
          }
 else {
            leftText.setText(R.string.videos_gallery_title);
          }
        }
      }
      Bundle extras=intent.getExtras();
      String title=(extras != null) ? extras.getString(""String_Node_Str"") : null;
      if (title != null && title.length() > 0) {
        leftText.setText(title);
      }
      if (extras != null) {
        mInclusion=(ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS) & extras.getInt(""String_Node_Str"",mInclusion);
      }
      if (extras != null && extras.getBoolean(""String_Node_Str"")) {
        Log.d(TAG,""String_Node_Str"");
        mInclusion=ImageManager.INCLUDE_DRM_IMAGES;
      }
    }
    Uri uri=getIntent().getData();
    if (!assumeMounted) {
      mAllImages=ImageManager.emptyImageList();
    }
 else {
      mAllImages=ImageManager.allImages(getContentResolver(),ImageManager.DataLocation.NONE,mInclusion,mSortAscending ? ImageManager.SORT_ASCENDING : ImageManager.SORT_DESCENDING,(uri != null) ? uri.getQueryParameter(""String_Node_Str"") : null);
    }
  }
  return mAllImages;
}","private IImageList allImages(boolean assumeMounted){
  if (mAllImages == null) {
    mNoImagesView=findViewById(R.id.no_images);
    mInclusion=ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS;
    Intent intent=getIntent();
    if (intent != null) {
      String type=intent.resolveType(this);
      TextView leftText=(TextView)findViewById(R.id.left_text);
      if (type != null) {
        if (isImageType(type)) {
          mInclusion=ImageManager.INCLUDE_IMAGES;
          if (isPickIntent()) {
            leftText.setText(R.string.pick_photos_gallery_title);
          }
 else {
            leftText.setText(R.string.photos_gallery_title);
          }
        }
        if (isVideoType(type)) {
          mInclusion=ImageManager.INCLUDE_VIDEOS;
          if (isPickIntent()) {
            leftText.setText(R.string.pick_videos_gallery_title);
          }
 else {
            leftText.setText(R.string.videos_gallery_title);
          }
        }
      }
      Bundle extras=intent.getExtras();
      String title=(extras != null) ? extras.getString(""String_Node_Str"") : null;
      if (title != null && title.length() > 0) {
        leftText.setText(title);
      }
      if (extras != null) {
        mInclusion=(ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS) & extras.getInt(""String_Node_Str"",mInclusion);
      }
      if (extras != null && extras.getBoolean(""String_Node_Str"")) {
        Log.d(TAG,""String_Node_Str"");
        mInclusion=ImageManager.INCLUDE_DRM_IMAGES;
      }
    }
    Uri uri=getIntent().getData();
    if (!assumeMounted) {
      mAllImages=ImageManager.emptyImageList();
    }
 else {
      mAllImages=ImageManager.allImages(getContentResolver(),ImageManager.DataLocation.NONE,mInclusion,mSortAscending ? ImageManager.SORT_ASCENDING : ImageManager.SORT_DESCENDING,(uri != null) ? uri.getQueryParameter(""String_Node_Str"") : null);
    }
  }
  return mAllImages;
}",0.9966189856957088
184606,"private synchronized void start(){
  if (mDecodeThread != null) {
    return;
  }
  mDone=false;
  Thread t=new Thread(new WorkerThread());
  t.setName(""String_Node_Str"");
  mDecodeThread=t;
  t.start();
}","private void start(){
  if (mDecodeThread != null) {
    return;
  }
  mDone=false;
  Thread t=new Thread(new WorkerThread());
  t.setName(""String_Node_Str"");
  mDecodeThread=t;
  t.start();
}",0.9672544080604534
184607,"public void run(){
  while (!mDone) {
    WorkItem workItem=null;
synchronized (mQueue) {
      if (!mQueue.isEmpty()) {
        workItem=mQueue.remove(0);
      }
 else {
        if (!mThumbnailChecker.hasMoreThumbnailsToCheck()) {
          try {
            mQueue.wait();
          }
 catch (          InterruptedException ex) {
          }
          continue;
        }
      }
    }
    if (workItem == null) {
      mThumbnailChecker.checkNextThumbnail();
      continue;
    }
    final Bitmap b=workItem.mImage.miniThumbBitmap();
    if (workItem.mOnLoadedRunnable != null) {
      workItem.mOnLoadedRunnable.run(b);
    }
  }
}","public void run(){
  while (true) {
    WorkItem workItem=null;
synchronized (mQueue) {
      if (mDone) {
        break;
      }
      if (!mQueue.isEmpty()) {
        workItem=mQueue.remove(0);
      }
 else {
        if (!mThumbnailChecker.hasMoreThumbnailsToCheck()) {
          try {
            mQueue.wait();
          }
 catch (          InterruptedException ex) {
          }
          continue;
        }
      }
    }
    if (workItem == null) {
      mThumbnailChecker.checkNextThumbnail();
      continue;
    }
    final Bitmap b=workItem.mImage.miniThumbBitmap();
    if (workItem.mOnLoadedRunnable != null) {
      workItem.mOnLoadedRunnable.run(b);
    }
  }
}",0.9619482496194824
184608,"public synchronized void stop(){
  mDone=true;
synchronized (mQueue) {
    mQueue.notifyAll();
  }
  if (mDecodeThread != null) {
    try {
      Thread t=mDecodeThread;
      BitmapManager.instance().cancelThreadDecoding(t);
      t.join();
      mDecodeThread=null;
    }
 catch (    InterruptedException ex) {
    }
  }
  stopCheckingThumbnails();
}","public void stop(){
synchronized (mQueue) {
    mDone=true;
    mQueue.notifyAll();
  }
  if (mDecodeThread != null) {
    try {
      Thread t=mDecodeThread;
      BitmapManager.instance().cancelThreadDecoding(t);
      t.join();
      mDecodeThread=null;
    }
 catch (    InterruptedException ex) {
    }
  }
  stopCheckingThumbnails();
}",0.9090909090909092
184609,"public ImageLoader(Handler handler){
  mHandler=handler;
  mThumbnailChecker=new ThumbnailChecker();
  start();
}","public ImageLoader(Handler handler){
  mThumbnailChecker=new ThumbnailChecker();
  start();
}",0.9029126213592232
184610,"public static Uri addImage(ContentResolver cr,String title,long dateTaken,Location location,int orientation,String directory,String filename){
  ContentValues values=new ContentValues(7);
  values.put(Images.Media.TITLE,title);
  values.put(Images.Media.DISPLAY_NAME,filename);
  values.put(Images.Media.DATE_TAKEN,dateTaken);
  values.put(Images.Media.MIME_TYPE,""String_Node_Str"");
  values.put(Images.Media.ORIENTATION,orientation);
  File parentFile=new File(directory);
  String path=parentFile.toString().toLowerCase();
  String name=parentFile.getName();
  if (location != null) {
    values.put(Images.Media.LATITUDE,location.getLatitude());
    values.put(Images.Media.LONGITUDE,location.getLongitude());
  }
  if (directory != null && filename != null) {
    String value=directory + ""String_Node_Str"" + filename;
    values.put(Images.Media.DATA,value);
  }
  return cr.insert(STORAGE_URI,values);
}","public static Uri addImage(ContentResolver cr,String title,long dateTaken,Location location,int orientation,String directory,String filename){
  ContentValues values=new ContentValues(7);
  values.put(Images.Media.TITLE,title);
  values.put(Images.Media.DISPLAY_NAME,filename);
  values.put(Images.Media.DATE_TAKEN,dateTaken);
  values.put(Images.Media.MIME_TYPE,""String_Node_Str"");
  values.put(Images.Media.ORIENTATION,orientation);
  if (location != null) {
    values.put(Images.Media.LATITUDE,location.getLatitude());
    values.put(Images.Media.LONGITUDE,location.getLongitude());
  }
  if (directory != null && filename != null) {
    String value=directory + ""String_Node_Str"" + filename;
    values.put(Images.Media.DATA,value);
  }
  return cr.insert(STORAGE_URI,values);
}",0.925531914893617
184611,"static MenuItemsResult addImageMenuItems(Menu menu,int inclusions,final boolean isImage,final Activity activity,final Handler handler,final Runnable onDelete,final MenuInvoker onInvoke){
  final ArrayList<MenuItem> requiresWriteAccessItems=new ArrayList<MenuItem>();
  final ArrayList<MenuItem> requiresNoDrmAccessItems=new ArrayList<MenuItem>();
  if (isImage && ((inclusions & INCLUDE_ROTATE_MENU) != 0)) {
    SubMenu rotateSubmenu=menu.addSubMenu(IMAGE_SAVING_ITEM,MENU_IMAGE_ROTATE,40,R.string.rotate).setIcon(android.R.drawable.ic_menu_rotate);
    requiresWriteAccessItems.add(rotateSubmenu.getItem());
    if (rotateSubmenu != null) {
      requiresWriteAccessItems.add(rotateSubmenu.add(0,MENU_IMAGE_ROTATE_LEFT,50,R.string.rotate_left).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
        public boolean onMenuItemClick(        MenuItem item){
          return onRotateClicked(onInvoke,-90);
        }
      }
).setAlphabeticShortcut('l'));
      requiresWriteAccessItems.add(rotateSubmenu.add(0,MENU_IMAGE_ROTATE_RIGHT,60,R.string.rotate_right).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
        public boolean onMenuItemClick(        MenuItem item){
          return onRotateClicked(onInvoke,90);
        }
      }
).setAlphabeticShortcut('r'));
    }
  }
  if (isImage && ((inclusions & INCLUDE_CROP_MENU) != 0)) {
    MenuItem autoCrop=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_CROP,73,R.string.camera_crop);
    autoCrop.setIcon(android.R.drawable.ic_menu_crop);
    autoCrop.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onCropClicked(onInvoke,activity);
      }
    }
);
    requiresWriteAccessItems.add(autoCrop);
  }
  if (isImage && ((inclusions & INCLUDE_SET_MENU) != 0)) {
    MenuItem setMenu=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_SET,75,R.string.camera_set);
    setMenu.setIcon(android.R.drawable.ic_menu_set_as);
    setMenu.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onSetAsClicked(onInvoke,activity);
      }
    }
);
  }
  if ((inclusions & INCLUDE_SHARE_MENU) != 0) {
    MenuItem item1=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_SHARE,10,R.string.camera_share).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onImageShareClicked(onInvoke,activity,isImage);
      }
    }
);
    item1.setIcon(android.R.drawable.ic_menu_share);
    MenuItem item=item1;
    requiresNoDrmAccessItems.add(item);
  }
  if ((inclusions & INCLUDE_DELETE_MENU) != 0) {
    MenuItem deleteItem=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_TOSS,70,R.string.camera_toss);
    requiresWriteAccessItems.add(deleteItem);
    deleteItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        deleteImpl(activity,onDelete,isImage);
        return true;
      }
    }
).setAlphabeticShortcut('d').setIcon(android.R.drawable.ic_menu_delete);
  }
  if ((inclusions & INCLUDE_DETAILS_MENU) != 0) {
    MenuItem detailsMenu=menu.add(0,0,80,R.string.details).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onDetailsClicked(onInvoke,handler,activity,isImage);
      }
    }
);
    detailsMenu.setIcon(R.drawable.ic_menu_view_details);
  }
  if ((isImage) && ((inclusions & INCLUDE_SHOWMAP_MENU) != 0)) {
    menu.add(0,0,80,R.string.show_on_map).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onShowMapClicked(onInvoke,handler,activity);
      }
    }
).setIcon(R.drawable.ic_menu_3d_globe);
  }
  if ((!isImage) && ((inclusions & INCLUDE_VIEWPLAY_MENU) != 0)) {
    menu.add(VIDEO_SAVING_ITEM,MENU_VIDEO_PLAY,0,R.string.video_play).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onViewPlayClicked(onInvoke,activity);
      }
    }
);
  }
  return new MenuItemsResult(){
    public void gettingReadyToOpen(    Menu menu,    IImage image){
      if (image == null) {
        return;
      }
      boolean readOnly=image.isReadonly();
      boolean isDrm=image.isDrm();
      for (      MenuItem item : requiresWriteAccessItems) {
        item.setVisible(!readOnly);
        item.setEnabled(!readOnly);
      }
      for (      MenuItem item : requiresNoDrmAccessItems) {
        item.setVisible(!isDrm);
        item.setEnabled(!isDrm);
      }
    }
    public void aboutToCall(    MenuItem menu,    IImage image){
    }
  }
;
}","static MenuItemsResult addImageMenuItems(Menu menu,int inclusions,final boolean isImage,final Activity activity,final Handler handler,final Runnable onDelete,final MenuInvoker onInvoke){
  final ArrayList<MenuItem> requiresWriteAccessItems=new ArrayList<MenuItem>();
  final ArrayList<MenuItem> requiresNoDrmAccessItems=new ArrayList<MenuItem>();
  if (isImage && ((inclusions & INCLUDE_ROTATE_MENU) != 0)) {
    SubMenu rotateSubmenu=menu.addSubMenu(IMAGE_SAVING_ITEM,MENU_IMAGE_ROTATE,40,R.string.rotate).setIcon(android.R.drawable.ic_menu_rotate);
    requiresWriteAccessItems.add(rotateSubmenu.getItem());
    requiresWriteAccessItems.add(rotateSubmenu.add(0,MENU_IMAGE_ROTATE_LEFT,50,R.string.rotate_left).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onRotateClicked(onInvoke,-90);
      }
    }
).setAlphabeticShortcut('l'));
    requiresWriteAccessItems.add(rotateSubmenu.add(0,MENU_IMAGE_ROTATE_RIGHT,60,R.string.rotate_right).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onRotateClicked(onInvoke,90);
      }
    }
).setAlphabeticShortcut('r'));
  }
  if (isImage && ((inclusions & INCLUDE_CROP_MENU) != 0)) {
    MenuItem autoCrop=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_CROP,73,R.string.camera_crop);
    autoCrop.setIcon(android.R.drawable.ic_menu_crop);
    autoCrop.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onCropClicked(onInvoke,activity);
      }
    }
);
    requiresWriteAccessItems.add(autoCrop);
  }
  if (isImage && ((inclusions & INCLUDE_SET_MENU) != 0)) {
    MenuItem setMenu=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_SET,75,R.string.camera_set);
    setMenu.setIcon(android.R.drawable.ic_menu_set_as);
    setMenu.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onSetAsClicked(onInvoke,activity);
      }
    }
);
  }
  if ((inclusions & INCLUDE_SHARE_MENU) != 0) {
    MenuItem item1=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_SHARE,10,R.string.camera_share).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onImageShareClicked(onInvoke,activity,isImage);
      }
    }
);
    item1.setIcon(android.R.drawable.ic_menu_share);
    MenuItem item=item1;
    requiresNoDrmAccessItems.add(item);
  }
  if ((inclusions & INCLUDE_DELETE_MENU) != 0) {
    MenuItem deleteItem=menu.add(IMAGE_SAVING_ITEM,MENU_IMAGE_TOSS,70,R.string.camera_toss);
    requiresWriteAccessItems.add(deleteItem);
    deleteItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        deleteImpl(activity,onDelete,isImage);
        return true;
      }
    }
).setAlphabeticShortcut('d').setIcon(android.R.drawable.ic_menu_delete);
  }
  if ((inclusions & INCLUDE_DETAILS_MENU) != 0) {
    MenuItem detailsMenu=menu.add(0,0,80,R.string.details).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onDetailsClicked(onInvoke,handler,activity,isImage);
      }
    }
);
    detailsMenu.setIcon(R.drawable.ic_menu_view_details);
  }
  if ((isImage) && ((inclusions & INCLUDE_SHOWMAP_MENU) != 0)) {
    menu.add(0,0,80,R.string.show_on_map).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onShowMapClicked(onInvoke,handler,activity);
      }
    }
).setIcon(R.drawable.ic_menu_3d_globe);
  }
  if ((!isImage) && ((inclusions & INCLUDE_VIEWPLAY_MENU) != 0)) {
    menu.add(VIDEO_SAVING_ITEM,MENU_VIDEO_PLAY,0,R.string.video_play).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        return onViewPlayClicked(onInvoke,activity);
      }
    }
);
  }
  return new MenuItemsResult(){
    public void gettingReadyToOpen(    Menu menu,    IImage image){
      if (image == null) {
        return;
      }
      boolean readOnly=image.isReadonly();
      boolean isDrm=image.isDrm();
      for (      MenuItem item : requiresWriteAccessItems) {
        item.setVisible(!readOnly);
        item.setEnabled(!readOnly);
      }
      for (      MenuItem item : requiresNoDrmAccessItems) {
        item.setVisible(!isDrm);
        item.setEnabled(!isDrm);
      }
    }
    public void aboutToCall(    MenuItem menu,    IImage image){
    }
  }
;
}",0.9933899905571294
184612,"private static void setReverseGeocodingDetails(View d,Activity context,float lat,float lng){
  String value=EMPTY_STRING;
  if (lat == INVALID_LATLNG || lng == INVALID_LATLNG) {
    hideDetailsRow(d,R.id.details_location_row);
    return;
  }
  try {
    Geocoder geocoder=new Geocoder(context);
    List<Address> address=geocoder.getFromLocation(lat,lng,1);
    Iterator<Address> iterator=address.iterator();
    while (iterator.hasNext()) {
      Address addr=iterator.next();
      value+=addr.getAddressLine(addr.getMaxAddressLineIndex());
      Log.v(TAG,addr.toString());
    }
  }
 catch (  IOException ex) {
    value=EMPTY_STRING;
    Log.e(TAG,""String_Node_Str"",ex);
  }
catch (  RuntimeException ex) {
    value=EMPTY_STRING;
    Log.e(TAG,""String_Node_Str"",ex);
  }
  if (value != EMPTY_STRING) {
    setDetailsValue(d,value,R.id.details_location_value);
  }
 else {
    hideDetailsRow(d,R.id.details_location_row);
  }
}","private static void setReverseGeocodingDetails(View d,Activity context,float lat,float lng){
  String value=EMPTY_STRING;
  if (lat == INVALID_LATLNG || lng == INVALID_LATLNG) {
    hideDetailsRow(d,R.id.details_location_row);
    return;
  }
  try {
    Geocoder geocoder=new Geocoder(context);
    List<Address> address=geocoder.getFromLocation(lat,lng,1);
    StringBuilder sb=new StringBuilder();
    for (    Address addr : address) {
      int index=addr.getMaxAddressLineIndex();
      sb.append(addr.getAddressLine(index));
    }
    value=sb.toString();
  }
 catch (  IOException ex) {
    value=EMPTY_STRING;
    Log.e(TAG,""String_Node_Str"",ex);
  }
catch (  RuntimeException ex) {
    value=EMPTY_STRING;
    Log.e(TAG,""String_Node_Str"",ex);
  }
  if (value != EMPTY_STRING) {
    setDetailsValue(d,value,R.id.details_location_value);
  }
 else {
    hideDetailsRow(d,R.id.details_location_row);
  }
}",0.7837398373983739
184613,"private void loadExifData(){
  Cursor c=getCursor();
  String filePath;
synchronized (c) {
    filePath=c.getString(mContainer.indexData());
  }
  ExifInterface mExif=new ExifInterface(filePath);
  if (mExifData == null) {
    mExifData=mExif.getAttributes();
  }
}","private void loadExifData(){
  Cursor c=getCursor();
  String filePath;
synchronized (c) {
    filePath=c.getString(mContainer.indexData());
  }
  mExif=new ExifInterface(filePath);
  if (mExifData == null) {
    mExifData=mExif.getAttributes();
  }
}",0.9341085271317828
184614,"public synchronized IImage getImageAt(int index){
  if (index < 0 || index > getCount()) {
    throw new IndexOutOfBoundsException(""String_Node_Str"" + index + ""String_Node_Str""+ getCount());
  }
  if (mSkipCounts == null || mSubList.length > mSkipCounts.length) {
    mSkipCounts=new int[mSubList.length];
  }
  if (mSkipList == null) {
    mSkipList=new ArrayList<Long>();
  }
  for (int i=0; i < mSubList.length; i++) {
    mSkipCounts[i]=0;
  }
  int skipCount=0;
  for (int i=0; i < mSkipList.size(); i++) {
    long v=mSkipList.get(i);
    int offset=(int)(v & 0xFFFFFFFF);
    int which=(int)(v >> 32);
    if (skipCount + offset > index) {
      int subindex=mSkipCounts[which] + (index - skipCount);
      IImage img=mSubList[which].getImageAt(subindex);
      return img;
    }
    skipCount+=offset;
    mSkipCounts[which]+=offset;
  }
  while (true) {
    long maxTimestamp=mSort == ImageManager.SORT_ASCENDING ? Long.MAX_VALUE : Long.MIN_VALUE;
    int which=-1;
    for (int i=0; i < mSubList.length; i++) {
      int pos=mSkipCounts[i];
      IImageList list=mSubList[i];
      if (pos < list.getCount()) {
        IImage image=list.getImageAt(pos);
        if (image != null) {
          long timestamp=image.getDateTaken();
          if (mSort == ImageManager.SORT_ASCENDING ? (timestamp < maxTimestamp) : (timestamp > maxTimestamp)) {
            maxTimestamp=timestamp;
            which=i;
          }
        }
      }
    }
    if (which == -1) {
      return null;
    }
    boolean done=false;
    if (mSkipList.size() > 0) {
      int pos=mSkipList.size() - 1;
      long oldEntry=mSkipList.get(pos);
      if ((oldEntry >> 32) == which) {
        long newEntry=oldEntry + 1;
        mSkipList.set(pos,newEntry);
        done=true;
      }
    }
    if (!done) {
      long newEntry=((long)which << 32) | 1;
      mSkipList.add(newEntry);
    }
    if (skipCount++ == index) {
      return mSubList[which].getImageAt(mSkipCounts[which]);
    }
    mSkipCounts[which]+=1;
  }
}","public IImage getImageAt(int index){
  if (index < 0 || index > getCount()) {
    throw new IndexOutOfBoundsException(""String_Node_Str"" + index + ""String_Node_Str""+ getCount());
  }
  if (mSkipCounts == null || mSubList.length > mSkipCounts.length) {
    mSkipCounts=new int[mSubList.length];
  }
  if (mSkipList == null) {
    mSkipList=new ArrayList<Long>();
  }
  for (int i=0; i < mSubList.length; i++) {
    mSkipCounts[i]=0;
  }
  int skipCount=0;
  for (int i=0; i < mSkipList.size(); i++) {
    long v=mSkipList.get(i);
    int offset=(int)(v & 0xFFFFFFFF);
    int which=(int)(v >> 32);
    if (skipCount + offset > index) {
      int subindex=mSkipCounts[which] + (index - skipCount);
      IImage img=mSubList[which].getImageAt(subindex);
      return img;
    }
    skipCount+=offset;
    mSkipCounts[which]+=offset;
  }
  while (true) {
    long maxTimestamp=mSort == ImageManager.SORT_ASCENDING ? Long.MAX_VALUE : Long.MIN_VALUE;
    int which=-1;
    for (int i=0; i < mSubList.length; i++) {
      int pos=mSkipCounts[i];
      IImageList list=mSubList[i];
      if (pos < list.getCount()) {
        IImage image=list.getImageAt(pos);
        if (image != null) {
          long timestamp=image.getDateTaken();
          if (mSort == ImageManager.SORT_ASCENDING ? (timestamp < maxTimestamp) : (timestamp > maxTimestamp)) {
            maxTimestamp=timestamp;
            which=i;
          }
        }
      }
    }
    if (which == -1) {
      return null;
    }
    boolean done=false;
    if (mSkipList.size() > 0) {
      int pos=mSkipList.size() - 1;
      long oldEntry=mSkipList.get(pos);
      if ((oldEntry >> 32) == which) {
        long newEntry=oldEntry + 1;
        mSkipList.set(pos,newEntry);
        done=true;
      }
    }
    if (!done) {
      long newEntry=((long)which << 32) | 1;
      mSkipList.add(newEntry);
    }
    if (skipCount++ == index) {
      return mSubList[which].getImageAt(mSkipCounts[which]);
    }
    mSkipCounts[which]+=1;
  }
}",0.9967394030599448
184615,"byte[] getMiniThumbFromFile(long id,byte[] data,long magicCheck){
  RandomAccessFile r=miniThumbDataFile();
  if (r == null)   return null;
  long pos=id * BYTES_PER_MINTHUMB;
synchronized (r) {
    try {
      r.seek(pos);
      if (r.readByte() == 1) {
        long magic=r.readLong();
        if (magic != magicCheck) {
          return null;
        }
        int length=r.readInt();
        r.read(data,0,length);
        return data;
      }
 else {
        return null;
      }
    }
 catch (    IOException ex) {
      return null;
    }
  }
}","byte[] getMiniThumbFromFile(long id,byte[] data,long magicCheck){
  RandomAccessFile r=miniThumbDataFile();
  if (r == null)   return null;
  long pos=id * BYTES_PER_MINTHUMB;
synchronized (r) {
    try {
      r.seek(pos);
      if (r.readByte() == 1) {
        long magic=r.readLong();
        if (magic != magicCheck) {
          return null;
        }
        int length=r.readInt();
        int got=r.read(data,0,length);
        if (got != length)         return null;
        return data;
      }
 else {
        return null;
      }
    }
 catch (    IOException ex) {
      return null;
    }
  }
}",0.9516407599309152
184616,"public void stop(){
  mScroller=null;
  if (mImageBlockManager != null) {
    mImageBlockManager.recycle();
    mImageBlockManager=null;
  }
  mRunning=false;
}","public void stop(){
  mHandler.removeCallbacks(mLongPressCallback);
  mScroller=null;
  if (mImageBlockManager != null) {
    mImageBlockManager.recycle();
    mImageBlockManager=null;
  }
  mRunning=false;
}",0.8695652173913043
184617,"@Override public void onLongPress(MotionEvent e){
  performLongClick();
}","@Override public void onLongPress(MotionEvent e){
  if (GridViewSpecial.this.mRunning) {
    performLongClick();
  }
}",0.7643979057591623
184618,"public void stop(){
  mScroller=null;
  if (mImageBlockManager != null) {
    mImageBlockManager.recycle();
    mImageBlockManager=null;
  }
  mRunning=false;
}","public void stop(){
  mHandler.removeCallbacks(mLongPressCallback);
  mScroller=null;
  if (mImageBlockManager != null) {
    mImageBlockManager.recycle();
    mImageBlockManager=null;
  }
  mRunning=false;
}",0.8695652173913043
184619,"@Override public void onLongPress(MotionEvent e){
  performLongClick();
}","@Override public void onLongPress(MotionEvent e){
  if (GridViewSpecial.this.mRunning) {
    performLongClick();
  }
}",0.7643979057591623
184620,"public void run(){
  int nextWarning=1;
  while (true) {
    try {
synchronized (watchDogSync) {
        watchDogSync.wait(1000);
      }
    }
 catch (    InterruptedException ex) {
    }
    if (mPreviewing)     break;
    int delay=(int)(SystemClock.elapsedRealtime() - wallTimeStart) / 1000;
    if (delay >= nextWarning) {
      Log.e(TAG,""String_Node_Str"" + delay + ""String_Node_Str"");
      if (nextWarning < 60) {
        nextWarning<<=1;
        if (nextWarning == 16) {
          nextWarning=15;
        }
      }
 else {
        nextWarning+=60;
      }
    }
  }
}","public void run(){
  updateStorageHint(mPicturesRemaining);
}",0.1318681318681318
184621,"/** 
 * Initiate the capture of an image.
 */
public void initiate(){
  if (mCameraDevice == null) {
    return;
  }
  mCancel=false;
  mCapturing=true;
  capture();
}","/** 
 * Initiate the capture of an image.
 */
public void initiate(){
  if (mCameraDevice == null) {
    return;
  }
  mCancel=false;
  capture();
}",0.9396825396825396
184622,"private void setViewFinder(int w,int h,boolean startPreview){
  if (mPausing)   return;
  if (mPreviewing && w == mViewFinderWidth && h == mViewFinderHeight) {
    return;
  }
  if (!ensureCameraDevice())   return;
  if (mSurfaceHolder == null)   return;
  if (isFinishing())   return;
  if (mPausing)   return;
  mViewFinderWidth=w;
  mViewFinderHeight=h;
  if (mOriginalViewFinderHeight == 0) {
    mOriginalViewFinderWidth=w;
    mOriginalViewFinderHeight=h;
  }
  if (startPreview == false)   return;
  if (mPreviewing)   stopPreview();
  try {
    mCameraDevice.setPreviewDisplay(mSurfaceHolder);
  }
 catch (  IOException exception) {
    mCameraDevice.release();
    mCameraDevice=null;
    return;
  }
  setCameraParameter();
  final long wallTimeStart=SystemClock.elapsedRealtime();
  final long threadTimeStart=Debug.threadCpuTimeNanos();
  final Object watchDogSync=new Object();
  Thread watchDog=new Thread(new Runnable(){
    public void run(){
      int nextWarning=1;
      while (true) {
        try {
synchronized (watchDogSync) {
            watchDogSync.wait(1000);
          }
        }
 catch (        InterruptedException ex) {
        }
        if (mPreviewing)         break;
        int delay=(int)(SystemClock.elapsedRealtime() - wallTimeStart) / 1000;
        if (delay >= nextWarning) {
          Log.e(TAG,""String_Node_Str"" + delay + ""String_Node_Str"");
          if (nextWarning < 60) {
            nextWarning<<=1;
            if (nextWarning == 16) {
              nextWarning=15;
            }
          }
 else {
            nextWarning+=60;
          }
        }
      }
    }
  }
);
  watchDog.start();
  mCameraDevice.setOneShotPreviewCallback(mOneShotPreviewCallback);
  try {
    mCameraDevice.startPreview();
  }
 catch (  Throwable e) {
  }
  mPreviewing=true;
synchronized (watchDogSync) {
    watchDogSync.notify();
  }
  long threadTimeEnd=Debug.threadCpuTimeNanos();
  long wallTimeEnd=SystemClock.elapsedRealtime();
  if ((wallTimeEnd - wallTimeStart) > 3000) {
    Log.w(TAG,""String_Node_Str"" + (wallTimeEnd - wallTimeStart) + ""String_Node_Str""+ (threadTimeEnd - threadTimeStart) / 1000000 + ""String_Node_Str"");
  }
}","private void setViewFinder(int w,int h,boolean startPreview){
  if (mPausing)   return;
  if (mPreviewing && w == mViewFinderWidth && h == mViewFinderHeight) {
    return;
  }
  if (!ensureCameraDevice())   return;
  if (mSurfaceHolder == null)   return;
  if (isFinishing())   return;
  if (mPausing)   return;
  mViewFinderWidth=w;
  mViewFinderHeight=h;
  if (mOriginalViewFinderHeight == 0) {
    mOriginalViewFinderWidth=w;
    mOriginalViewFinderHeight=h;
  }
  if (startPreview == false)   return;
  if (mPreviewing)   stopPreview();
  try {
    mCameraDevice.setPreviewDisplay(mSurfaceHolder);
  }
 catch (  IOException exception) {
    mCameraDevice.release();
    mCameraDevice=null;
    return;
  }
  setCameraParameter();
  final long wallTimeStart=SystemClock.elapsedRealtime();
  final long threadTimeStart=Debug.threadCpuTimeNanos();
  mCameraDevice.setOneShotPreviewCallback(mOneShotPreviewCallback);
  try {
    mCameraDevice.startPreview();
  }
 catch (  Throwable e) {
  }
  mPreviewing=true;
  long threadTimeEnd=Debug.threadCpuTimeNanos();
  long wallTimeEnd=SystemClock.elapsedRealtime();
  if ((wallTimeEnd - wallTimeStart) > 3000) {
    Log.w(TAG,""String_Node_Str"" + (wallTimeEnd - wallTimeStart) + ""String_Node_Str""+ (threadTimeEnd - threadTimeStart) / 1000000 + ""String_Node_Str"");
  }
}",0.6762507188039103
184623,"public void storeImage(byte[] data,android.hardware.Camera camera,Location loc){
  boolean captureOnly=mIsImageCaptureIntent;
  if (!captureOnly) {
    storeImage(data,loc);
    sendBroadcast(new Intent(""String_Node_Str"",mLastContentUri));
    setLastPictureThumb(data,mCaptureObject.getLastCaptureUri());
    dismissFreezeFrame();
  }
 else {
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inSampleSize=4;
    if (DEBUG_TIME_OPERATIONS) {
      startTiming();
    }
    mCaptureOnlyBitmap=BitmapFactory.decodeByteArray(data,0,data.length,options);
    if (DEBUG_TIME_OPERATIONS) {
      stopTiming();
      Log.d(TAG,""String_Node_Str"" + mCaptureOnlyBitmap.getWidth() + ""String_Node_Str""+ mCaptureOnlyBitmap.getHeight()+ ""String_Node_Str""+ (mWallTimeEnd - mWallTimeStart)+ ""String_Node_Str""+ ((mThreadTimeEnd - mThreadTimeStart) / 1000000)+ ""String_Node_Str"");
    }
    showPostCaptureAlert();
    cancelAutomaticPreviewRestart();
  }
  mCapturing=false;
}","public void storeImage(byte[] data,android.hardware.Camera camera,Location loc){
  boolean captureOnly=mIsImageCaptureIntent;
  if (!captureOnly) {
    storeImage(data,loc);
    sendBroadcast(new Intent(""String_Node_Str"",mLastContentUri));
    setLastPictureThumb(data,mCaptureObject.getLastCaptureUri());
    dismissFreezeFrame();
  }
 else {
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inSampleSize=4;
    mCaptureOnlyBitmap=BitmapFactory.decodeByteArray(data,0,data.length,options);
    showPostCaptureAlert();
    cancelAutomaticPreviewRestart();
  }
}",0.7468193384223919
184624,"/** 
 * Given a HashMap of Exif tags and associated values, an Exif section in the JPG file is created and loaded with the tag data. saveAttributes() is expensive because it involves copying all the JPG data from one file to another and deleting the old file and renaming the other. It's best to collect all the attributes to write and make a single call rather than multiple calls for each attribute. You must call ""commitChanges()"" at some point to commit the changes.
 */
public void saveAttributes(HashMap<String,String> attributes){
  StringBuilder sb=new StringBuilder();
  int size=attributes.size();
  if (attributes.containsKey(""String_Node_Str"")) {
    --size;
  }
  sb.append(size + ""String_Node_Str"");
  Iterator<String> keyIterator=attributes.keySet().iterator();
  while (keyIterator.hasNext()) {
    String key=keyIterator.next();
    if (key.equals(""String_Node_Str"")) {
      continue;
    }
    String val=attributes.get(key);
    sb.append(key + ""String_Node_Str"");
    sb.append(val.length() + ""String_Node_Str"");
    sb.append(val);
  }
  String s=sb.toString();
  saveAttributesNative(mFilename,s);
  commitChangesNative(mFilename);
  mSavedAttributes=true;
}","/** 
 * Given a HashMap of Exif tags and associated values, an Exif section in the JPG file is created and loaded with the tag data. saveAttributes() is expensive because it involves copying all the JPG data from one file to another and deleting the old file and renaming the other. It's best to collect all the attributes to write and make a single call rather than multiple calls for each attribute. You must call ""commitChanges()"" at some point to commit the changes.
 */
public void saveAttributes(HashMap<String,String> attributes){
  StringBuilder sb=new StringBuilder();
  int size=attributes.size();
  if (attributes.containsKey(""String_Node_Str"")) {
    --size;
  }
  sb.append(size + ""String_Node_Str"");
  for (  Map.Entry<String,String> iter : attributes.entrySet()) {
    String key=iter.getKey();
    if (key.equals(""String_Node_Str"")) {
      continue;
    }
    String val=iter.getValue();
    sb.append(key + ""String_Node_Str"");
    sb.append(val.length() + ""String_Node_Str"");
    sb.append(val);
  }
  String s=sb.toString();
  saveAttributesNative(mFilename,s);
  commitChangesNative(mFilename);
  mSavedAttributes=true;
}",0.9224806201550388
184625,"LayoutSpec(int w,int h,int leftEdgePadding,int rightEdgePadding,int intercellSpacing){
  mCellWidth=w;
  mCellHeight=h;
  mLeftEdgePadding=leftEdgePadding;
  mRightEdgePadding=rightEdgePadding;
  mCellSpacing=intercellSpacing;
}","LayoutSpec(int w,int h,int intercellSpacing,int leftEdgePadding){
  mCellWidth=w;
  mCellHeight=h;
  mCellSpacing=intercellSpacing;
  mLeftEdgePadding=leftEdgePadding;
}",0.5843828715365239
184626,"private void paintSelection(Canvas canvas){
  if (mCurrentSelection == SELECT_NONE)   return;
  int row=mCurrentSelection / mColumns;
  int col=mCurrentSelection - (row * mColumns);
  int spacing=mSpec.mCellSpacing;
  int leftSpacing=mSpec.mLeftEdgePadding;
  int xPos=leftSpacing + (col * (mSpec.mCellWidth + spacing));
  int yTop=spacing + (row * mBlockHeight);
  int yBottom=yTop + mSpec.mCellHeight;
  int type=OUTLINE_SELECTED;
  if (mCurrentSelectionPressed) {
    type=OUTLINE_PRESSED;
  }
  canvas.drawBitmap(mOutline[type],xPos,yTop,null);
}","private void paintSelection(Canvas canvas){
  if (mCurrentSelection == SELECT_NONE)   return;
  int row=mCurrentSelection / mColumns;
  int col=mCurrentSelection - (row * mColumns);
  int spacing=mSpec.mCellSpacing;
  int leftSpacing=mSpec.mLeftEdgePadding;
  int xPos=leftSpacing + (col * (mSpec.mCellWidth + spacing));
  int yTop=spacing + (row * mBlockHeight);
  int type=OUTLINE_SELECTED;
  if (mCurrentSelectionPressed) {
    type=OUTLINE_PRESSED;
  }
  canvas.drawBitmap(mOutline[type],xPos,yTop,null);
}",0.9622641509433962
184627,"@Override public void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (!mRunning) {
    return;
  }
  mSpec=mCellSizeChoices[mSizeChoice];
  int width=right - left;
  mColumns=1 + (width - mSpec.mCellWidth) / (mSpec.mCellWidth + mSpec.mCellSpacing);
  mSpec.mLeftEdgePadding=(width - ((mColumns - 1) * mSpec.mCellSpacing) - (mColumns * mSpec.mCellWidth)) / 2;
  mSpec.mRightEdgePadding=mSpec.mLeftEdgePadding;
  mRows=(mCount + mColumns - 1) / mColumns;
  mBlockHeight=mSpec.mCellSpacing + mSpec.mCellHeight;
  mMaxScrollY=mSpec.mCellSpacing + (mRows * mBlockHeight) - (bottom - top);
  mScrollY=Math.max(0,Math.min(mMaxScrollY,mScrollY));
  generateOutlineBitmap();
  if (mImageBlockManager != null) {
    mImageBlockManager.recycle();
  }
  mImageBlockManager=new ImageBlockManager(mHandler,mRedrawCallback,mAllImages,mLoader,mDrawAdapter,mSpec,mColumns,width,mOutline[OUTLINE_EMPTY]);
  mListener.onLayoutComplete(changed);
  moveDataWindow();
  mLayoutComplete=true;
}","@Override public void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (!mRunning) {
    return;
  }
  mSpec=mCellSizeChoices[mSizeChoice];
  int width=right - left;
  mColumns=1 + (width - mSpec.mCellWidth) / (mSpec.mCellWidth + mSpec.mCellSpacing);
  mSpec.mLeftEdgePadding=(width - ((mColumns - 1) * mSpec.mCellSpacing) - (mColumns * mSpec.mCellWidth)) / 2;
  mRows=(mCount + mColumns - 1) / mColumns;
  mBlockHeight=mSpec.mCellSpacing + mSpec.mCellHeight;
  mMaxScrollY=mSpec.mCellSpacing + (mRows * mBlockHeight) - (bottom - top);
  mScrollY=Math.max(0,Math.min(mMaxScrollY,mScrollY));
  generateOutlineBitmap();
  if (mImageBlockManager != null) {
    mImageBlockManager.recycle();
  }
  mImageBlockManager=new ImageBlockManager(mHandler,mRedrawCallback,mAllImages,mLoader,mDrawAdapter,mSpec,mColumns,width,mOutline[OUTLINE_EMPTY]);
  mListener.onLayoutComplete(changed);
  moveDataWindow();
  mLayoutComplete=true;
}",0.975442043222004
184628,"@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  final float maxVelocity=2500;
  if (velocityY > maxVelocity) {
    velocityY=maxVelocity;
  }
 else   if (velocityY < -maxVelocity) {
    velocityY=-maxVelocity;
  }
  select(SELECT_NONE,false);
  if (mFling) {
    mScroller=new Scroller(getContext());
    mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);
    computeScroll();
  }
  return true;
}","@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  final float maxVelocity=2500;
  if (velocityY > maxVelocity) {
    velocityY=maxVelocity;
  }
 else   if (velocityY < -maxVelocity) {
    velocityY=-maxVelocity;
  }
  select(SELECT_NONE,false);
  mScroller=new Scroller(getContext());
  mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);
  computeScroll();
  return true;
}",0.8240534521158129
184629,"public void setImageBitmapResetBase(final Bitmap bitmap,final boolean resetSupp){
  final int viewWidth=getWidth();
  final int viewHeight=getHeight();
  if (viewWidth <= 0) {
    mOnLayoutRunnable=new Runnable(){
      public void run(){
        setImageBitmapResetBase(bitmap,resetSupp);
      }
    }
;
    return;
  }
  if (bitmap != null) {
    getProperBaseMatrix(bitmap,mBaseMatrix);
    setImageBitmap(bitmap);
  }
 else {
    mBaseMatrix.reset();
    setImageBitmap(null);
  }
  if (resetSupp) {
    mSuppMatrix.reset();
  }
  setImageMatrix(getImageViewMatrix());
  mMaxZoom=maxZoom();
}","public void setImageBitmapResetBase(final Bitmap bitmap,final boolean resetSupp){
  final int viewWidth=getWidth();
  if (viewWidth <= 0) {
    mOnLayoutRunnable=new Runnable(){
      public void run(){
        setImageBitmapResetBase(bitmap,resetSupp);
      }
    }
;
    return;
  }
  if (bitmap != null) {
    getProperBaseMatrix(bitmap,mBaseMatrix);
    setImageBitmap(bitmap);
  }
 else {
    mBaseMatrix.reset();
    setImageBitmap(null);
  }
  if (resetSupp) {
    mSuppMatrix.reset();
  }
  setImageMatrix(getImageViewMatrix());
  mMaxZoom=maxZoom();
}",0.9689119170984456
184630,"private Integer getBookmark(){
  if (!uriSupportsBookmarks(mUri)) {
    return null;
  }
  String[] projection=new String[]{Video.VideoColumns.DURATION,Video.VideoColumns.BOOKMARK};
  try {
    Cursor cursor=getContentResolver().query(mUri,projection,null,null,null);
    if (cursor != null) {
      try {
        if (cursor.moveToFirst()) {
          int duration=getCursorInteger(cursor,0);
          int bookmark=getCursorInteger(cursor,1);
          final int ONE_MINUTE=60 * 1000;
          final int TWO_MINUTES=2 * ONE_MINUTE;
          final int FIVE_MINUTES=5 * ONE_MINUTE;
          if ((bookmark < TWO_MINUTES) || (duration < FIVE_MINUTES) || (bookmark > (duration - ONE_MINUTE))) {
            return null;
          }
          return new Integer(bookmark);
        }
      }
  finally {
        cursor.close();
      }
    }
  }
 catch (  SQLiteException e) {
  }
  return null;
}","private Integer getBookmark(){
  if (!uriSupportsBookmarks(mUri)) {
    return null;
  }
  String[] projection=new String[]{Video.VideoColumns.DURATION,Video.VideoColumns.BOOKMARK};
  try {
    Cursor cursor=getContentResolver().query(mUri,projection,null,null,null);
    if (cursor != null) {
      try {
        if (cursor.moveToFirst()) {
          int duration=getCursorInteger(cursor,0);
          int bookmark=getCursorInteger(cursor,1);
          final int ONE_MINUTE=60 * 1000;
          final int TWO_MINUTES=2 * ONE_MINUTE;
          final int FIVE_MINUTES=5 * ONE_MINUTE;
          if ((bookmark < TWO_MINUTES) || (duration < FIVE_MINUTES) || (bookmark > (duration - ONE_MINUTE))) {
            return null;
          }
          return Integer.valueOf(bookmark);
        }
      }
  finally {
        cursor.close();
      }
    }
  }
 catch (  SQLiteException e) {
  }
  return null;
}",0.9854910714285714
184631,"public Bitmap thumbBitmap(){
  Bitmap bitmap=null;
  if (mContainer.mThumbUri != null) {
    Cursor c=mContentResolver.query(mContainer.mThumbUri,THUMB_PROJECTION,Thumbnails.IMAGE_ID + ""String_Node_Str"",new String[]{String.valueOf(fullSizeImageId())},null);
    try {
      if (c.moveToFirst()) {
        bitmap=decodeCurrentImage(c.getLong(0));
      }
    }
 catch (    RuntimeException ex) {
      return null;
    }
 finally {
      c.close();
    }
  }
  if (bitmap == null) {
    bitmap=fullSizeBitmap(THUMBNAIL_TARGET_SIZE,false);
    bitmap=mContainer.storeThumbnail(bitmap,fullSizeImageId());
  }
  if (bitmap != null) {
    bitmap=Util.rotate(bitmap,getDegreesRotated());
  }
  long elapsed=System.currentTimeMillis();
  return bitmap;
}","public Bitmap thumbBitmap(){
  Bitmap bitmap=null;
  if (mContainer.mThumbUri != null) {
    Cursor c=mContentResolver.query(mContainer.mThumbUri,THUMB_PROJECTION,Thumbnails.IMAGE_ID + ""String_Node_Str"",new String[]{String.valueOf(fullSizeImageId())},null);
    try {
      if (c.moveToFirst()) {
        bitmap=decodeCurrentImage(c.getLong(0));
      }
    }
 catch (    RuntimeException ex) {
      return null;
    }
 finally {
      c.close();
    }
  }
  if (bitmap == null) {
    bitmap=fullSizeBitmap(THUMBNAIL_TARGET_SIZE,false);
    bitmap=mContainer.storeThumbnail(bitmap,fullSizeImageId());
  }
  if (bitmap != null) {
    bitmap=Util.rotate(bitmap,getDegreesRotated());
  }
  return bitmap;
}",0.9483115093039284
184632,"private BitmapFactory.Options snifBitmapOptions(){
  ParcelFileDescriptor input=getPFD();
  if (input == null)   return null;
  try {
    Uri uri=fullSizeImageUri();
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inJustDecodeBounds=true;
    BitmapManager.instance().decodeFileDescriptor(input.getFileDescriptor(),options);
    return options;
  }
  finally {
    Util.closeSiliently(input);
  }
}","private BitmapFactory.Options snifBitmapOptions(){
  ParcelFileDescriptor input=getPFD();
  if (input == null)   return null;
  try {
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inJustDecodeBounds=true;
    BitmapManager.instance().decodeFileDescriptor(input.getFileDescriptor(),options);
    return options;
  }
  finally {
    Util.closeSiliently(input);
  }
}",0.3618581907090464
184633,"private static boolean onShowMapClicked(MenuInvoker onInvoke,final Handler handler,final Activity activity){
  onInvoke.run(new MenuCallback(){
    public void run(    Uri u,    IImage image){
      if (image == null) {
        return;
      }
      float lat=getLatLng((Image)image,ExifInterface.TAG_GPS_LATITUDE);
      float lng=getLatLng((Image)image,ExifInterface.TAG_GPS_LONGITUDE);
      if (lat == INVALID_LATLNG || lng == INVALID_LATLNG) {
        handler.post(new Runnable(){
          public void run(){
            Toast.makeText(activity,R.string.no_location_image,Toast.LENGTH_SHORT).show();
          }
        }
);
        return;
      }
      String uri=""String_Node_Str"" + ""String_Node_Str"" + lat + ""String_Node_Str""+ lng+ ""String_Node_Str"";
      activity.startActivity(new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri)));
    }
  }
);
  return true;
}","private static boolean onShowMapClicked(MenuInvoker onInvoke,final Handler handler,final Activity activity){
  onInvoke.run(new MenuCallback(){
    public void run(    Uri u,    IImage image){
      if (image == null) {
        return;
      }
      float[] latlng=getLatLng(getExifData(image));
      if (latlng == null) {
        handler.post(new Runnable(){
          public void run(){
            Toast.makeText(activity,R.string.no_location_image,Toast.LENGTH_SHORT).show();
          }
        }
);
        return;
      }
      String uri=""String_Node_Str"" + ""String_Node_Str"" + latlng[0] + ""String_Node_Str""+ latlng[1]+ ""String_Node_Str"";
      activity.startActivity(new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri)));
    }
  }
);
  return true;
}",0.8602540834845736
184634,"private static float getLatLng(Image img,String tag){
  String value=img.getExifTag(tag);
  String ref;
  if (tag == ExifInterface.TAG_GPS_LATITUDE) {
    ref=img.getExifTag(ExifInterface.TAG_GPS_LATITUDE_REF);
  }
 else {
    ref=img.getExifTag(ExifInterface.TAG_GPS_LONGITUDE_REF);
  }
  float f=INVALID_LATLNG;
  if (value != null && ref != null) {
    f=ExifInterface.convertRationalLatLonToFloat(value,ref);
  }
  return f;
}","private static float[] getLatLng(HashMap<String,String> exifData){
  if (exifData == null) {
    return null;
  }
  String latValue=exifData.get(ExifInterface.TAG_GPS_LATITUDE);
  String latRef=exifData.get(ExifInterface.TAG_GPS_LATITUDE_REF);
  String lngValue=exifData.get(ExifInterface.TAG_GPS_LONGITUDE);
  String lngRef=exifData.get(ExifInterface.TAG_GPS_LONGITUDE_REF);
  float[] latlng=null;
  if (latValue != null && latRef != null && lngValue != null && lngRef != null) {
    latlng=new float[2];
    latlng[0]=ExifInterface.convertRationalLatLonToFloat(latValue,latRef);
    latlng[1]=ExifInterface.convertRationalLatLonToFloat(lngValue,lngRef);
  }
  return latlng;
}",0.4530685920577617
184635,"private static float setLatLngDetails(View d,Image img,String tag,String refTag){
  int valueId=R.id.details_latitude_value;
  int rowId=R.id.details_latitude_row;
  float latlng=getLatLng(img,tag);
  if (tag == ExifInterface.TAG_GPS_LONGITUDE) {
    valueId=R.id.details_longitude_value;
    rowId=R.id.details_longitude_row;
  }
  if (latlng == INVALID_LATLNG) {
    hideDetailsRow(d,rowId);
    return INVALID_LATLNG;
  }
  setDetailsValue(d,String.valueOf(latlng),valueId);
  return latlng;
}","private static void setLatLngDetails(View d,Activity context,HashMap<String,String> exifData){
  float[] latlng=getLatLng(exifData);
  if (latlng != null) {
    setDetailsValue(d,String.valueOf(latlng[0]),R.id.details_latitude_value);
    setDetailsValue(d,String.valueOf(latlng[1]),R.id.details_longitude_value);
    setReverseGeocodingDetails(d,context,latlng[0],latlng[1]);
  }
 else {
    hideDetailsRow(d,R.id.details_latitude_row);
    hideDetailsRow(d,R.id.details_longitude_row);
    hideDetailsRow(d,R.id.details_location_row);
  }
}",0.1368015414258188
184636,"private static boolean onDetailsClicked(MenuInvoker onInvoke,final Handler handler,final Activity activity,final boolean isImage){
  onInvoke.run(new MenuCallback(){
    public void run(    Uri u,    IImage image){
      if (image == null) {
        return;
      }
      final AlertDialog.Builder builder=new AlertDialog.Builder(activity);
      final View d=View.inflate(activity,R.layout.detailsview,null);
      ImageView imageView=(ImageView)d.findViewById(R.id.details_thumbnail_image);
      imageView.setImageBitmap(image.miniThumbBitmap());
      TextView textView=(TextView)d.findViewById(R.id.details_image_title);
      textView.setText(image.getDisplayName());
      long length=getImageFileSize(image);
      String lengthString=length < 0 ? EMPTY_STRING : Formatter.formatFileSize(activity,length);
      ((TextView)d.findViewById(R.id.details_file_size_value)).setText(lengthString);
      int dimensionWidth=0;
      int dimensionHeight=0;
      if (isImage) {
        dimensionWidth=image.getWidth();
        dimensionHeight=image.getHeight();
        d.findViewById(R.id.details_duration_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_format_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_codec_row).setVisibility(View.GONE);
      }
 else {
        MediaMetadataRetriever retriever=new MediaMetadataRetriever();
        try {
          retriever.setMode(MediaMetadataRetriever.MODE_GET_METADATA_ONLY);
          retriever.setDataSource(image.getDataPath());
          try {
            dimensionWidth=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH));
            dimensionHeight=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT));
          }
 catch (          NumberFormatException e) {
            dimensionWidth=0;
            dimensionHeight=0;
          }
          try {
            int durationMs=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
            String durationValue=formatDuration(activity,durationMs);
            ((TextView)d.findViewById(R.id.details_duration_value)).setText(durationValue);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            String frameRate=String.format(activity.getString(R.string.details_fps),Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_FRAME_RATE)));
            ((TextView)d.findViewById(R.id.details_frame_rate_value)).setText(frameRate);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            long bitRate=Long.parseLong(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_BIT_RATE));
            String bps;
            if (bitRate < 1000000) {
              bps=String.format(activity.getString(R.string.details_kbps),bitRate / 1000);
            }
 else {
              bps=String.format(activity.getString(R.string.details_mbps),(bitRate) / 1000000.0);
            }
            ((TextView)d.findViewById(R.id.details_bit_rate_value)).setText(bps);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
          }
          String format=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_FORMAT);
          ((TextView)d.findViewById(R.id.details_format_value)).setText(format);
          String codec=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_CODEC);
          if (codec != null) {
            setDetailsValue(d,codec,R.id.details_codec_value);
          }
 else {
            hideDetailsRow(d,R.id.details_codec_row);
          }
        }
 catch (        RuntimeException ex) {
        }
 finally {
          try {
            retriever.release();
          }
 catch (          RuntimeException ex) {
          }
        }
      }
      Image img=(Image)image;
      String value=null;
      if (dimensionWidth > 0 && dimensionHeight > 0) {
        value=String.format(activity.getString(R.string.details_dimension_x),dimensionWidth,dimensionHeight);
      }
 else {
        String width=img.getExifTag(ExifInterface.TAG_IMAGE_WIDTH);
        String height=img.getExifTag(ExifInterface.TAG_IMAGE_LENGTH);
        if (width != null && height != null) {
          value=EMPTY_STRING + width + ""String_Node_Str""+ height;
        }
      }
      if (value != null) {
        setDetailsValue(d,value,R.id.details_resolution_value);
      }
 else {
        hideDetailsRow(d,R.id.details_resolution_row);
      }
      value=img.getExifTag(ExifInterface.TAG_MAKE);
      if (value != null) {
        setDetailsValue(d,value,R.id.details_make_value);
      }
 else {
        hideDetailsRow(d,R.id.details_make_row);
      }
      value=img.getExifTag(ExifInterface.TAG_MODEL);
      if (value != null) {
        setDetailsValue(d,value,R.id.details_model_value);
      }
 else {
        hideDetailsRow(d,R.id.details_model_row);
      }
      value=img.getExifTag(ExifInterface.TAG_WHITE_BALANCE);
      if (value != null) {
        value=ExifInterface.whiteBalanceToString(Integer.parseInt(value));
      }
      if (value != null) {
        setDetailsValue(d,value,R.id.details_whitebalance_value);
      }
 else {
        hideDetailsRow(d,R.id.details_whitebalance_row);
      }
      float lat=setLatLngDetails(d,img,ExifInterface.TAG_GPS_LATITUDE,ExifInterface.TAG_GPS_LATITUDE_REF);
      float lng=setLatLngDetails(d,img,ExifInterface.TAG_GPS_LONGITUDE,ExifInterface.TAG_GPS_LONGITUDE_REF);
      setReverseGeocodingDetails(d,activity,lat,lng);
      value=EMPTY_STRING;
      long dateTaken=image.getDateTaken();
      if (dateTaken != 0) {
        Date date=new Date(image.getDateTaken());
        SimpleDateFormat dateFormat=new SimpleDateFormat();
        value=dateFormat.format(date);
      }
      if (value != EMPTY_STRING) {
        setDetailsValue(d,value,R.id.details_date_taken_value);
      }
 else {
        hideDetailsRow(d,R.id.details_date_taken_row);
      }
      builder.setNeutralButton(R.string.details_ok,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          dialog.dismiss();
        }
      }
);
      handler.post(new Runnable(){
        public void run(){
          builder.setIcon(android.R.drawable.ic_dialog_info).setTitle(R.string.details_panel_title).setView(d).show();
        }
      }
);
    }
  }
);
  return true;
}","private static boolean onDetailsClicked(MenuInvoker onInvoke,final Handler handler,final Activity activity,final boolean isImage){
  onInvoke.run(new MenuCallback(){
    public void run(    Uri u,    IImage image){
      if (image == null) {
        return;
      }
      final AlertDialog.Builder builder=new AlertDialog.Builder(activity);
      final View d=View.inflate(activity,R.layout.detailsview,null);
      ImageView imageView=(ImageView)d.findViewById(R.id.details_thumbnail_image);
      imageView.setImageBitmap(image.miniThumbBitmap());
      TextView textView=(TextView)d.findViewById(R.id.details_image_title);
      textView.setText(image.getDisplayName());
      long length=getImageFileSize(image);
      String lengthString=length < 0 ? EMPTY_STRING : Formatter.formatFileSize(activity,length);
      ((TextView)d.findViewById(R.id.details_file_size_value)).setText(lengthString);
      int dimensionWidth=0;
      int dimensionHeight=0;
      if (isImage) {
        dimensionWidth=image.getWidth();
        dimensionHeight=image.getHeight();
        d.findViewById(R.id.details_duration_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_format_row).setVisibility(View.GONE);
        d.findViewById(R.id.details_codec_row).setVisibility(View.GONE);
      }
 else {
        MediaMetadataRetriever retriever=new MediaMetadataRetriever();
        try {
          retriever.setMode(MediaMetadataRetriever.MODE_GET_METADATA_ONLY);
          retriever.setDataSource(image.getDataPath());
          try {
            dimensionWidth=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH));
            dimensionHeight=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT));
          }
 catch (          NumberFormatException e) {
            dimensionWidth=0;
            dimensionHeight=0;
          }
          try {
            int durationMs=Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
            String durationValue=formatDuration(activity,durationMs);
            ((TextView)d.findViewById(R.id.details_duration_value)).setText(durationValue);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            String frameRate=String.format(activity.getString(R.string.details_fps),Integer.parseInt(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_FRAME_RATE)));
            ((TextView)d.findViewById(R.id.details_frame_rate_value)).setText(frameRate);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_frame_rate_row).setVisibility(View.GONE);
          }
          try {
            long bitRate=Long.parseLong(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_BIT_RATE));
            String bps;
            if (bitRate < 1000000) {
              bps=String.format(activity.getString(R.string.details_kbps),bitRate / 1000);
            }
 else {
              bps=String.format(activity.getString(R.string.details_mbps),(bitRate) / 1000000.0);
            }
            ((TextView)d.findViewById(R.id.details_bit_rate_value)).setText(bps);
          }
 catch (          NumberFormatException e) {
            d.findViewById(R.id.details_bit_rate_row).setVisibility(View.GONE);
          }
          String format=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_FORMAT);
          ((TextView)d.findViewById(R.id.details_format_value)).setText(format);
          String codec=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_CODEC);
          if (codec != null) {
            setDetailsValue(d,codec,R.id.details_codec_value);
          }
 else {
            hideDetailsRow(d,R.id.details_codec_row);
          }
        }
 catch (        RuntimeException ex) {
        }
 finally {
          try {
            retriever.release();
          }
 catch (          RuntimeException ex) {
          }
        }
      }
      String value=null;
      if (dimensionWidth > 0 && dimensionHeight > 0) {
        value=String.format(activity.getString(R.string.details_dimension_x),dimensionWidth,dimensionHeight);
      }
      if (value != null) {
        setDetailsValue(d,value,R.id.details_resolution_value);
      }
 else {
        hideDetailsRow(d,R.id.details_resolution_row);
      }
      value=EMPTY_STRING;
      long dateTaken=image.getDateTaken();
      if (dateTaken != 0) {
        Date date=new Date(image.getDateTaken());
        SimpleDateFormat dateFormat=new SimpleDateFormat();
        value=dateFormat.format(date);
      }
      if (value != EMPTY_STRING) {
        setDetailsValue(d,value,R.id.details_date_taken_value);
      }
 else {
        hideDetailsRow(d,R.id.details_date_taken_row);
      }
      if (JPEG_MIME_TYPE.equals(image.getMimeType())) {
        showExifInformation(image,d,activity);
      }
 else {
        hideExifInformation(d);
      }
      builder.setNeutralButton(R.string.details_ok,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          dialog.dismiss();
        }
      }
);
      handler.post(new Runnable(){
        public void run(){
          builder.setIcon(android.R.drawable.ic_dialog_info).setTitle(R.string.details_panel_title).setView(d).show();
        }
      }
);
    }
  }
);
  return true;
}",0.8097295567290766
184637,"public void onZoom(boolean zoomIn){
  if (zoomIn) {
    mImageView.zoomIn();
  }
 else {
    mImageView.zoomOut();
  }
}","public void onZoom(boolean zoomIn){
  if (zoomIn) {
    mImageView.zoomIn();
  }
 else {
    mImageView.zoomOut();
  }
  updateZoomButtonsEnabled();
}",0.8888888888888888
184638,"private void setupZoomButtonController(View rootView){
  mGestureDetector=new GestureDetector(this,new MyGestureListener());
  mZoomButtonsController=new ZoomButtonsController(rootView);
  mZoomButtonsController.setAutoDismissed(false);
  mZoomButtonsController.setOnZoomListener(new ZoomButtonsController.OnZoomListener(){
    public void onVisibilityChanged(    boolean visible){
      if (visible) {
        updateZoomButtonsEnabled();
      }
    }
    public void onZoom(    boolean zoomIn){
      if (zoomIn) {
        mImageView.zoomIn();
      }
 else {
        mImageView.zoomOut();
      }
    }
  }
);
}","private void setupZoomButtonController(View rootView){
  mGestureDetector=new GestureDetector(this,new MyGestureListener());
  mZoomButtonsController=new ZoomButtonsController(rootView);
  mZoomButtonsController.setAutoDismissed(false);
  mZoomButtonsController.setOnZoomListener(new ZoomButtonsController.OnZoomListener(){
    public void onVisibilityChanged(    boolean visible){
      if (visible) {
        updateZoomButtonsEnabled();
      }
    }
    public void onZoom(    boolean zoomIn){
      if (zoomIn) {
        mImageView.zoomIn();
      }
 else {
        mImageView.zoomOut();
      }
      updateZoomButtonsEnabled();
    }
  }
);
}",0.9730586370839936
184639,"public int getRow(){
  throw new UnsupportedOperationException();
}","public int getRow(){
  return 0;
}",0.5742574257425742
184640,"public int getRow(){
  throw new UnsupportedOperationException();
}","public int getRow(){
  return 0;
}",0.5742574257425742
184641,"private void setStart(final int blockNumber){
synchronized (ImageBlock.this) {
    if (blockNumber == mBlockNumber) {
      return;
    }
    cancelExistingRequests();
    mBlockNumber=blockNumber;
    mRequestedMask=0;
    mCompletedMask=0;
    int imageNumber=blockNumber * mCurrentSpec.mColumns;
    int lastImageNumber=mAllImages.getCount() - 1;
    int spacing=mCurrentSpec.mCellSpacing;
    int leftSpacing=mCurrentSpec.mLeftEdgePadding;
    final int yPos=spacing;
    for (int col=0; col < mCurrentSpec.mColumns; col++) {
      if (imageNumber++ >= lastImageNumber) {
        break;
      }
      final int xPos=leftSpacing + (col * (mCurrentSpec.mCellWidth + spacing));
      mCanvas.drawRect(xPos,yPos,xPos + mCurrentSpec.mCellWidth,yPos + mCurrentSpec.mCellHeight,mPaint);
      paintSel(0,xPos,yPos);
    }
  }
}","private synchronized void setStart(final int blockNumber){
  if (blockNumber == mBlockNumber) {
    return;
  }
  cancelExistingRequests();
  mBlockNumber=blockNumber;
  mRequestedMask=0;
  mCompletedMask=0;
  mCanvas.drawColor(0xFF000000);
  mPaint.setColor(0xFFDDDDDD);
  LayoutSpec spec=GridViewSpecial.this.mCurrentSpec;
  int columnCount=spec.mColumns;
  int imageIndex=blockNumber * columnCount;
  int imageCount=mAllImages.getCount();
  int yPos=spec.mCellSpacing;
  int xPos=spec.mLeftEdgePadding;
  for (int i=0; i < columnCount && imageIndex < imageCount; ++i, ++imageIndex) {
    mCanvas.drawRect(xPos,yPos,xPos + spec.mCellWidth,yPos + spec.mCellHeight,mPaint);
    paintSel(0,xPos,yPos);
    xPos+=(spec.mCellWidth + spec.mCellSpacing);
  }
}",0.42811906269791
184642,"/** 
 * @param newSel -2 means use old selection, -1 means remove selection
 * @param newPressed
 */
public void select(int newSel,boolean newPressed){
  if (newSel == -2) {
    newSel=mCurrentSelection;
  }
  int oldSel=mCurrentSelection;
  if ((oldSel == newSel) && (mCurrentSelectionPressed == newPressed)) {
    return;
  }
  mShowSelection=(newSel != REMOVE_SELCTION);
  mCurrentSelection=newSel;
  mCurrentSelectionPressed=newPressed;
  if (mImageBlockManager != null) {
    mImageBlockManager.repaintSelection(oldSel);
    mImageBlockManager.repaintSelection(newSel);
  }
  if (newSel != REMOVE_SELCTION) {
    ensureVisible(newSel);
  }
}","/** 
 * @param newSel -2 means use old selection, -1 means remove selection
 * @param newPressed
 */
public void select(int newSel,boolean newPressed){
  if (newSel == ORIGINAL_SELECT) {
    newSel=mCurrentSelection;
  }
  int oldSel=mCurrentSelection;
  if ((oldSel == newSel) && (mCurrentSelectionPressed == newPressed)) {
    return;
  }
  mShowSelection=(newSel != SELECT_NONE);
  mCurrentSelection=newSel;
  mCurrentSelectionPressed=newPressed;
  if (mImageBlockManager != null) {
    mImageBlockManager.repaintSelection(oldSel);
    mImageBlockManager.repaintSelection(newSel);
  }
  if (newSel != SELECT_NONE) {
    ensureVisible(newSel);
  }
  if (mListener != null) {
    mListener.onImageSelected(mCurrentSelection);
  }
}",0.911465892597968
184643,"ImageBlock(){
  mPaint.setStyle(Paint.Style.FILL);
  mPaint.setColor(0xFFDDDDDD);
  mCanvas.drawColor(0xFF000000);
  mBlockNumber=REMOVE_SELCTION;
  mCellOutline=GridViewSpecial.this.getResources().getDrawable(android.R.drawable.gallery_thumb);
}","ImageBlock(){
  mPaint.setStyle(Paint.Style.FILL);
  mPaint.setColor(0xFFDDDDDD);
  mCanvas.drawColor(0xFF000000);
  mBlockNumber=SELECT_NONE;
  mCellOutline=GridViewSpecial.this.getResources().getDrawable(android.R.drawable.gallery_thumb);
}",0.9754098360655736
184644,"@Override public void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (!mRunning) {
    return;
  }
  clearCache();
  mCurrentSpec=mCellSizeChoices[mSizeChoice];
  LayoutSpec spec=mCurrentSpec;
  int oldColumnCount=spec.mColumns;
  int width=right - left;
  spec.mColumns=1 + (width - spec.mCellWidth) / (spec.mCellWidth + spec.mCellSpacing);
  spec.mLeftEdgePadding=(width - ((spec.mColumns - 1) * spec.mCellSpacing) - (spec.mColumns * spec.mCellWidth)) / 2;
  spec.mRightEdgePadding=spec.mLeftEdgePadding;
  int rows=(mAllImages.getCount() + spec.mColumns - 1) / spec.mColumns;
  mMaxScrollY=spec.mCellSpacing + (rows * (spec.mCellSpacing + spec.mCellHeight)) - (bottom - top);
  if (mImageBlockManager == null) {
    mImageBlockManager=new ImageBlockManager(mLoader);
    mImageBlockManager.moveDataWindow(true);
  }
  mLayoutComplete=true;
  if (mListener != null)   mListener.onLayout();
}","@Override public void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (!mRunning) {
    return;
  }
  clearCache();
  mCurrentSpec=mCellSizeChoices[mSizeChoice];
  LayoutSpec spec=mCurrentSpec;
  int oldColumnCount=spec.mColumns;
  int width=right - left;
  spec.mColumns=1 + (width - spec.mCellWidth) / (spec.mCellWidth + spec.mCellSpacing);
  spec.mLeftEdgePadding=(width - ((spec.mColumns - 1) * spec.mCellSpacing) - (spec.mColumns * spec.mCellWidth)) / 2;
  spec.mRightEdgePadding=spec.mLeftEdgePadding;
  int rows=(mAllImages.getCount() + spec.mColumns - 1) / spec.mColumns;
  mMaxScrollY=spec.mCellSpacing + (rows * (spec.mCellSpacing + spec.mCellHeight)) - (bottom - top);
  if (mImageBlockManager == null) {
    mImageBlockManager=new ImageBlockManager();
    mImageBlockManager.moveDataWindow(true);
  }
  mLayoutComplete=true;
  if (mListener != null)   mListener.onLayoutComplete(changed);
}",0.9876160990712074
184645,"@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  final float maxVelocity=2500;
  if (velocityY > maxVelocity) {
    velocityY=maxVelocity;
  }
 else   if (velocityY < -maxVelocity) {
    velocityY=-maxVelocity;
  }
  select(REMOVE_SELCTION,false);
  if (mFling) {
    mScroller=new Scroller(getContext());
    mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);
    computeScroll();
  }
  return true;
}","@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  final float maxVelocity=2500;
  if (velocityY > maxVelocity) {
    velocityY=maxVelocity;
  }
 else   if (velocityY < -maxVelocity) {
    velocityY=-maxVelocity;
  }
  select(SELECT_NONE,false);
  if (mFling) {
    mScroller=new Scroller(getContext());
    mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);
    computeScroll();
  }
  return true;
}",0.9870689655172412
184646,"@Override public void scrollTo(int x,int y){
  y=Math.min(mMaxScrollY,y);
  y=Math.max(0,y);
  if (mListener != null && mCurrentSpec != null) {
    int index=Math.min(mAllImages.getCount(),Math.max(0,computeSelectedIndex(x,y)));
    mListener.onScroll(index);
  }
  super.scrollTo(x,y);
}","@Override public void scrollTo(int x,int y){
  y=Math.max(0,Math.min(mMaxScrollY,y));
  if (mListener != null && mCurrentSpec != null) {
    mListener.onScroll((float)mScrollY / mMaxScrollY);
  }
  super.scrollTo(x,y);
}",0.531496062992126
184647,"@Override public boolean onDown(MotionEvent e){
  if (mScroller != null && !mScroller.isFinished()) {
    mScroller.forceFinished(true);
    return false;
  }
  int pos=computeSelectedIndex(e.getX(),e.getY());
  if (pos >= 0 && pos < mAllImages.getCount()) {
    select(pos,true);
  }
 else {
    select(REMOVE_SELCTION,false);
  }
  if (mImageBlockManager != null) {
    mImageBlockManager.repaintSelection(mCurrentSelection);
  }
  invalidate();
  return true;
}","@Override public boolean onDown(MotionEvent e){
  if (mScroller != null && !mScroller.isFinished()) {
    mScroller.forceFinished(true);
    return false;
  }
  int pos=computeSelectedIndex(e.getX(),e.getY());
  if (pos >= 0 && pos < mAllImages.getCount()) {
    select(pos,true);
  }
 else {
    select(SELECT_NONE,false);
  }
  if (mImageBlockManager != null) {
    mImageBlockManager.repaintSelection(mCurrentSelection);
  }
  invalidate();
  return true;
}",0.987012987012987
184648,public void onScroll(int index);,"/** 
 * Invoked when the <code>GridViewSpecial</code> scrolls.
 * @param scrollPosition the position of the scroller in the range[0, 1], when 0 means on the top and 1 means on the button
 */
public void onScroll(float scrollPosition);",0.1729323308270676
184649,"public void setSizeChoice(int choice,int scrollY){
  mSizeChoice=choice;
  clearCache();
  scrollTo(0,scrollY);
  requestLayout();
  invalidate();
}","public void setSizeChoice(int choice){
  mSizeChoice=choice;
  clearCache();
  requestLayout();
  invalidate();
}",0.8659003831417624
184650,"@Override public boolean onKeyUp(int keyCode,KeyEvent event){
  if (!canHandleEvent())   return false;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
    select(GridViewSpecial.ORIGINAL_SELECT,false);
    mHandler.removeCallbacks(mLongPressCallback);
    if (mListener != null)     mListener.onSelect(mCurrentSelection);
    return true;
  }
  return super.onKeyUp(keyCode,event);
}","@Override public boolean onKeyUp(int keyCode,KeyEvent event){
  if (!canHandleEvent())   return false;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
    select(GridViewSpecial.ORIGINAL_SELECT,false);
    mHandler.removeCallbacks(mLongPressCallback);
    if (mListener != null)     mListener.onImageClicked(mCurrentSelection);
    return true;
  }
  return super.onKeyUp(keyCode,event);
}",0.9534883720930232
184651,"@Override public boolean onSingleTapUp(MotionEvent e){
  select(mCurrentSelection,false);
  int index=computeSelectedIndex(e.getX(),e.getY());
  if (index >= 0 && index < mAllImages.getCount()) {
    if (mListener != null)     mListener.onSelect(index);
    return true;
  }
  return false;
}","@Override public boolean onSingleTapUp(MotionEvent e){
  select(mCurrentSelection,false);
  int index=computeSelectedIndex(e.getX(),e.getY());
  if (index >= 0 && index < mAllImages.getCount()) {
    if (mListener != null)     mListener.onImageClicked(index);
    return true;
  }
  return false;
}",0.9694915254237289
184652,"ImageBlockManager(ImageLoader loader){
  mLoader=loader;
  mBlockCache=new ImageBlock[ROWS_PER_PAGE * (PAGES_PRE_CACHE + PAGES_POST_CACHE + 1)];
  for (int i=0; i < mBlockCache.length; i++) {
    mBlockCache[i]=new ImageBlock();
  }
  mWorkerThread=new Thread(new Runnable(){
    public void run(){
      while (true) {
        int workCounter;
synchronized (ImageBlockManager.this) {
          workCounter=mWorkCounter;
        }
        if (mDone) {
          mLoader.stop();
          for (int i=0; i < mBlockCache.length; i++) {
            ImageBlock block=mBlockCache[i];
            if (block != null) {
              block.recycleBitmaps();
              mBlockCache[i]=null;
            }
          }
          mBlockCache=null;
          mBlockCacheStartOffset=0;
          mBlockCacheFirstBlockNumber=0;
          break;
        }
        loadNext();
synchronized (ImageBlockManager.this) {
          if ((workCounter == mWorkCounter) && (!mDone)) {
            try {
              ImageBlockManager.this.wait();
            }
 catch (            InterruptedException ex) {
            }
          }
        }
      }
    }
  }
);
  mWorkerThread.setName(""String_Node_Str"");
  mWorkerThread.start();
}","ImageBlockManager(){
  mBlockCache=new ImageBlock[ROWS_PER_PAGE * (PAGES_PRE_CACHE + PAGES_POST_CACHE + 1)];
  for (int i=0; i < mBlockCache.length; i++) {
    mBlockCache[i]=new ImageBlock();
  }
  mWorkerThread=new Thread(new Runnable(){
    public void run(){
      while (true) {
        int workCounter;
synchronized (ImageBlockManager.this) {
          workCounter=mWorkCounter;
        }
        if (mDone) {
          mLoader.stop();
          for (int i=0; i < mBlockCache.length; i++) {
            ImageBlock block=mBlockCache[i];
            if (block != null) {
              block.recycleBitmaps();
              mBlockCache[i]=null;
            }
          }
          mBlockCache=null;
          mBlockCacheStartOffset=0;
          mBlockCacheFirstBlockNumber=0;
          break;
        }
        loadNext();
synchronized (ImageBlockManager.this) {
          if ((workCounter == mWorkCounter) && (!mDone)) {
            try {
              ImageBlockManager.this.wait();
            }
 catch (            InterruptedException ex) {
            }
          }
        }
      }
    }
  }
);
  mWorkerThread.setName(""String_Node_Str"");
  mWorkerThread.start();
}",0.983249581239531
184653,"public void invalidateAllImages(){
  this.clearCache();
  mImageBlockManager=new ImageBlockManager(mLoader);
  mImageBlockManager.moveDataWindow(true);
}","public void invalidateAllImages(){
  this.clearCache();
  mImageBlockManager=new ImageBlockManager();
  mImageBlockManager.moveDataWindow(true);
}",0.9765886287625418
184654,"@Override protected void onRestoreInstanceState(Bundle state){
  super.onRestoreInstanceState(state);
  mTargetScroll=state.getInt(INSTANCE_STATE_TAG,0);
}","@Override protected void onRestoreInstanceState(Bundle state){
  super.onRestoreInstanceState(state);
  mScrollPosition=state.getFloat(STATE_SCROLL_POSITION,INVALID_POSITION);
  mSelectedIndex=state.getInt(STATE_SELECTED_INDEX,0);
}",0.661498708010336
184655,"public void onScroll(int index){
  mFirstVisibleIndex=index;
}","public void onScroll(float scrollPosition){
  mScrollPosition=scrollPosition;
}",0.5531914893617021
184656,"@Override public void onResume(){
  super.onResume();
  BitmapManager.instance().allowAllDecoding();
  mGvs.setSizeChoice(Integer.parseInt(mPrefs.getString(""String_Node_Str"",""String_Node_Str"")),mTargetScroll);
  mGvs.requestFocus();
  String sortOrder=mPrefs.getString(""String_Node_Str"",null);
  if (sortOrder != null) {
    mSortAscending=sortOrder.equals(""String_Node_Str"");
  }
  mPausing=false;
  IntentFilter intentFilter=new IntentFilter(Intent.ACTION_MEDIA_MOUNTED);
  intentFilter.addAction(Intent.ACTION_MEDIA_UNMOUNTED);
  intentFilter.addAction(Intent.ACTION_MEDIA_SCANNER_STARTED);
  intentFilter.addAction(Intent.ACTION_MEDIA_SCANNER_FINISHED);
  intentFilter.addAction(Intent.ACTION_MEDIA_EJECT);
  intentFilter.addDataScheme(""String_Node_Str"");
  mReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (action.equals(Intent.ACTION_MEDIA_MOUNTED)) {
      }
 else       if (action.equals(Intent.ACTION_MEDIA_UNMOUNTED)) {
        Toast.makeText(ImageGallery.this,getResources().getString(R.string.wait),5000);
        rebake(true,false);
      }
 else       if (action.equals(Intent.ACTION_MEDIA_SCANNER_STARTED)) {
        Toast.makeText(ImageGallery.this,getResources().getString(R.string.wait),5000);
        rebake(false,true);
      }
 else       if (action.equals(Intent.ACTION_MEDIA_SCANNER_FINISHED)) {
        rebake(false,false);
      }
 else       if (action.equals(Intent.ACTION_MEDIA_EJECT)) {
        rebake(true,false);
      }
    }
  }
;
  registerReceiver(mReceiver,intentFilter);
  rebake(false,ImageManager.isMediaScannerScanning(getContentResolver()));
}","@Override public void onResume(){
  super.onResume();
  BitmapManager.instance().allowAllDecoding();
  mGvs.setSizeChoice(Integer.parseInt(mPrefs.getString(""String_Node_Str"",""String_Node_Str"")));
  mGvs.requestFocus();
  String sortOrder=mPrefs.getString(""String_Node_Str"",null);
  if (sortOrder != null) {
    mSortAscending=sortOrder.equals(""String_Node_Str"");
  }
  mPausing=false;
  IntentFilter intentFilter=new IntentFilter(Intent.ACTION_MEDIA_MOUNTED);
  intentFilter.addAction(Intent.ACTION_MEDIA_UNMOUNTED);
  intentFilter.addAction(Intent.ACTION_MEDIA_SCANNER_STARTED);
  intentFilter.addAction(Intent.ACTION_MEDIA_SCANNER_FINISHED);
  intentFilter.addAction(Intent.ACTION_MEDIA_EJECT);
  intentFilter.addDataScheme(""String_Node_Str"");
  mReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (action.equals(Intent.ACTION_MEDIA_MOUNTED)) {
      }
 else       if (action.equals(Intent.ACTION_MEDIA_UNMOUNTED)) {
        Toast.makeText(ImageGallery.this,getResources().getString(R.string.wait),5000);
        rebake(true,false);
      }
 else       if (action.equals(Intent.ACTION_MEDIA_SCANNER_STARTED)) {
        Toast.makeText(ImageGallery.this,getResources().getString(R.string.wait),5000);
        rebake(false,true);
      }
 else       if (action.equals(Intent.ACTION_MEDIA_SCANNER_FINISHED)) {
        rebake(false,false);
      }
 else       if (action.equals(Intent.ACTION_MEDIA_EJECT)) {
        rebake(true,false);
      }
    }
  }
;
  registerReceiver(mReceiver,intentFilter);
  rebake(false,ImageManager.isMediaScannerScanning(getContentResolver()));
}",0.9958530805687204
184657,"@Override protected void onSaveInstanceState(Bundle state){
  super.onSaveInstanceState(state);
  mTargetScroll=mGvs.getScrollY();
  state.putInt(INSTANCE_STATE_TAG,mTargetScroll);
}","@Override protected void onSaveInstanceState(Bundle state){
  super.onSaveInstanceState(state);
  state.putFloat(STATE_SCROLL_POSITION,mScrollPosition);
  state.putInt(STATE_SELECTED_INDEX,mSelectedIndex);
}",0.5449871465295629
184658,"@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  mTargetScroll=mGvs.getScrollY();
}","@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  mConfigurationChanged=true;
}",0.8542372881355932
184659,"public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (getCurrentImage() == null) {
    return;
  }
  boolean isImage=ImageManager.isImage(getCurrentImage());
  if (isImage) {
    menu.add(0,0,0,R.string.view).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        onSelect(mGvs.mCurrentSelection);
        return true;
      }
    }
);
  }
  menu.setHeaderTitle(isImage ? R.string.context_menu_header : R.string.video_context_menu_header);
  if ((mInclusion & (ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS)) != 0) {
    MenuHelper.MenuItemsResult r=MenuHelper.addImageMenuItems(menu,MenuHelper.INCLUDE_ALL,isImage,ImageGallery.this,mHandler,mDeletePhotoRunnable,new MenuHelper.MenuInvoker(){
      public void run(      MenuHelper.MenuCallback cb){
        cb.run(getCurrentImageUri(),getCurrentImage());
        mGvs.clearCache();
        mGvs.invalidate();
        mGvs.requestLayout();
        mGvs.start();
        mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE);
      }
    }
);
    if (r != null) {
      r.gettingReadyToOpen(menu,getCurrentImage());
    }
    if (isImage) {
      addSlideShowMenu(menu,1000);
    }
  }
}","public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (getCurrentImage() == null) {
    return;
  }
  boolean isImage=ImageManager.isImage(getCurrentImage());
  if (isImage) {
    menu.add(0,0,0,R.string.view).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        onImageClicked(mGvs.mCurrentSelection);
        return true;
      }
    }
);
  }
  menu.setHeaderTitle(isImage ? R.string.context_menu_header : R.string.video_context_menu_header);
  if ((mInclusion & (ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS)) != 0) {
    MenuHelper.MenuItemsResult r=MenuHelper.addImageMenuItems(menu,MenuHelper.INCLUDE_ALL,isImage,ImageGallery.this,mHandler,mDeletePhotoRunnable,new MenuHelper.MenuInvoker(){
      public void run(      MenuHelper.MenuCallback cb){
        cb.run(getCurrentImageUri(),getCurrentImage());
        mGvs.clearCache();
        mGvs.invalidate();
        mGvs.requestLayout();
        mGvs.start();
        mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE);
      }
    }
);
    if (r != null) {
      r.gettingReadyToOpen(menu,getCurrentImage());
    }
    if (isImage) {
      addSlideShowMenu(menu,1000);
    }
  }
}",0.993103448275862
184660,"public boolean onMenuItemClick(MenuItem item){
  onSelect(mGvs.mCurrentSelection);
  return true;
}","public boolean onMenuItemClick(MenuItem item){
  onImageClicked(mGvs.mCurrentSelection);
  return true;
}",0.9411764705882352
184661,"/** 
 * @param newSel -2 means use old selection, -1 means remove selection
 * @param newPressed
 */
public void select(int newSel,boolean newPressed){
  if (newSel == -2) {
    newSel=mCurrentSelection;
  }
  int oldSel=mCurrentSelection;
  if ((oldSel == newSel) && (mCurrentSelectionPressed == newPressed)) {
    return;
  }
  mShowSelection=(newSel != REMOVE_SELCTION);
  mCurrentSelection=newSel;
  mCurrentSelectionPressed=newPressed;
  if (mImageBlockManager != null) {
    mImageBlockManager.repaintSelection(oldSel);
    mImageBlockManager.repaintSelection(newSel);
  }
  if (newSel != REMOVE_SELCTION) {
    ensureVisible(newSel);
  }
}","/** 
 * @param newSel -2 means use old selection, -1 means remove selection
 * @param newPressed
 */
public void select(int newSel,boolean newPressed){
  if (newSel == ORIGINAL_SELECT) {
    newSel=mCurrentSelection;
  }
  int oldSel=mCurrentSelection;
  if ((oldSel == newSel) && (mCurrentSelectionPressed == newPressed)) {
    return;
  }
  mShowSelection=(newSel != SELECT_NONE);
  mCurrentSelection=newSel;
  mCurrentSelectionPressed=newPressed;
  if (mImageBlockManager != null) {
    mImageBlockManager.repaintSelection(oldSel);
    mImageBlockManager.repaintSelection(newSel);
  }
  if (newSel != SELECT_NONE) {
    ensureVisible(newSel);
  }
  if (mListener != null) {
    mListener.onImageSelected(mCurrentSelection);
  }
}",0.911465892597968
184662,"ImageBlock(){
  mPaint.setStyle(Paint.Style.FILL);
  mPaint.setColor(0xFFDDDDDD);
  mCanvas.drawColor(0xFF000000);
  mBlockNumber=REMOVE_SELCTION;
  mCellOutline=GridViewSpecial.this.getResources().getDrawable(android.R.drawable.gallery_thumb);
}","ImageBlock(){
  mPaint.setStyle(Paint.Style.FILL);
  mPaint.setColor(0xFFDDDDDD);
  mCanvas.drawColor(0xFF000000);
  mBlockNumber=SELECT_NONE;
  mCellOutline=GridViewSpecial.this.getResources().getDrawable(android.R.drawable.gallery_thumb);
}",0.9754098360655736
184663,"@Override public void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (!mRunning) {
    return;
  }
  clearCache();
  mCurrentSpec=mCellSizeChoices[mSizeChoice];
  LayoutSpec spec=mCurrentSpec;
  int oldColumnCount=spec.mColumns;
  int width=right - left;
  spec.mColumns=1 + (width - spec.mCellWidth) / (spec.mCellWidth + spec.mCellSpacing);
  spec.mLeftEdgePadding=(width - ((spec.mColumns - 1) * spec.mCellSpacing) - (spec.mColumns * spec.mCellWidth)) / 2;
  spec.mRightEdgePadding=spec.mLeftEdgePadding;
  int rows=(mAllImages.getCount() + spec.mColumns - 1) / spec.mColumns;
  mMaxScrollY=spec.mCellSpacing + (rows * (spec.mCellSpacing + spec.mCellHeight)) - (bottom - top);
  if (mImageBlockManager == null) {
    mImageBlockManager=new ImageBlockManager(mLoader);
    mImageBlockManager.moveDataWindow(true);
  }
  mLayoutComplete=true;
  if (mListener != null)   mListener.onLayout();
}","@Override public void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (!mRunning) {
    return;
  }
  clearCache();
  mCurrentSpec=mCellSizeChoices[mSizeChoice];
  LayoutSpec spec=mCurrentSpec;
  int oldColumnCount=spec.mColumns;
  int width=right - left;
  spec.mColumns=1 + (width - spec.mCellWidth) / (spec.mCellWidth + spec.mCellSpacing);
  spec.mLeftEdgePadding=(width - ((spec.mColumns - 1) * spec.mCellSpacing) - (spec.mColumns * spec.mCellWidth)) / 2;
  spec.mRightEdgePadding=spec.mLeftEdgePadding;
  int rows=(mAllImages.getCount() + spec.mColumns - 1) / spec.mColumns;
  mMaxScrollY=spec.mCellSpacing + (rows * (spec.mCellSpacing + spec.mCellHeight)) - (bottom - top);
  if (mImageBlockManager == null) {
    mImageBlockManager=new ImageBlockManager();
    mImageBlockManager.moveDataWindow(true);
  }
  mLayoutComplete=true;
  if (mListener != null)   mListener.onLayoutComplete(changed);
}",0.9876160990712074
184664,"@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  final float maxVelocity=2500;
  if (velocityY > maxVelocity) {
    velocityY=maxVelocity;
  }
 else   if (velocityY < -maxVelocity) {
    velocityY=-maxVelocity;
  }
  select(REMOVE_SELCTION,false);
  if (mFling) {
    mScroller=new Scroller(getContext());
    mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);
    computeScroll();
  }
  return true;
}","@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  final float maxVelocity=2500;
  if (velocityY > maxVelocity) {
    velocityY=maxVelocity;
  }
 else   if (velocityY < -maxVelocity) {
    velocityY=-maxVelocity;
  }
  select(SELECT_NONE,false);
  if (mFling) {
    mScroller=new Scroller(getContext());
    mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);
    computeScroll();
  }
  return true;
}",0.9870689655172412
184665,"@Override public void scrollTo(int x,int y){
  y=Math.min(mMaxScrollY,y);
  y=Math.max(0,y);
  if (mListener != null && mCurrentSpec != null) {
    int index=Math.min(mAllImages.getCount(),Math.max(0,computeSelectedIndex(x,y)));
    mListener.onScroll(index);
  }
  super.scrollTo(x,y);
}","@Override public void scrollTo(int x,int y){
  y=Math.max(0,Math.min(mMaxScrollY,y));
  if (mListener != null && mCurrentSpec != null) {
    mListener.onScroll((float)mScrollY / mMaxScrollY);
  }
  super.scrollTo(x,y);
}",0.531496062992126
184666,"@Override public boolean onDown(MotionEvent e){
  if (mScroller != null && !mScroller.isFinished()) {
    mScroller.forceFinished(true);
    return false;
  }
  int pos=computeSelectedIndex(e.getX(),e.getY());
  if (pos >= 0 && pos < mAllImages.getCount()) {
    select(pos,true);
  }
 else {
    select(REMOVE_SELCTION,false);
  }
  if (mImageBlockManager != null) {
    mImageBlockManager.repaintSelection(mCurrentSelection);
  }
  invalidate();
  return true;
}","@Override public boolean onDown(MotionEvent e){
  if (mScroller != null && !mScroller.isFinished()) {
    mScroller.forceFinished(true);
    return false;
  }
  int pos=computeSelectedIndex(e.getX(),e.getY());
  if (pos >= 0 && pos < mAllImages.getCount()) {
    select(pos,true);
  }
 else {
    select(SELECT_NONE,false);
  }
  if (mImageBlockManager != null) {
    mImageBlockManager.repaintSelection(mCurrentSelection);
  }
  invalidate();
  return true;
}",0.987012987012987
184667,public void onScroll(int index);,"/** 
 * Invoked when the <code>GridViewSpecial</code> scrolls.
 * @param scrollPosition the position of the scroller in the range[0, 1], when 0 means on the top and 1 means on the button
 */
public void onScroll(float scrollPosition);",0.1729323308270676
184668,"public void setSizeChoice(int choice,int scrollY){
  mSizeChoice=choice;
  clearCache();
  scrollTo(0,scrollY);
  requestLayout();
  invalidate();
}","public void setSizeChoice(int choice){
  mSizeChoice=choice;
  clearCache();
  requestLayout();
  invalidate();
}",0.8659003831417624
184669,"@Override public boolean onKeyUp(int keyCode,KeyEvent event){
  if (!canHandleEvent())   return false;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
    select(GridViewSpecial.ORIGINAL_SELECT,false);
    mHandler.removeCallbacks(mLongPressCallback);
    if (mListener != null)     mListener.onSelect(mCurrentSelection);
    return true;
  }
  return super.onKeyUp(keyCode,event);
}","@Override public boolean onKeyUp(int keyCode,KeyEvent event){
  if (!canHandleEvent())   return false;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
    select(GridViewSpecial.ORIGINAL_SELECT,false);
    mHandler.removeCallbacks(mLongPressCallback);
    if (mListener != null)     mListener.onImageClicked(mCurrentSelection);
    return true;
  }
  return super.onKeyUp(keyCode,event);
}",0.9534883720930232
184670,"@Override public boolean onSingleTapUp(MotionEvent e){
  select(mCurrentSelection,false);
  int index=computeSelectedIndex(e.getX(),e.getY());
  if (index >= 0 && index < mAllImages.getCount()) {
    if (mListener != null)     mListener.onSelect(index);
    return true;
  }
  return false;
}","@Override public boolean onSingleTapUp(MotionEvent e){
  select(mCurrentSelection,false);
  int index=computeSelectedIndex(e.getX(),e.getY());
  if (index >= 0 && index < mAllImages.getCount()) {
    if (mListener != null)     mListener.onImageClicked(index);
    return true;
  }
  return false;
}",0.9694915254237289
184671,"ImageBlockManager(ImageLoader loader){
  mLoader=loader;
  mBlockCache=new ImageBlock[ROWS_PER_PAGE * (PAGES_PRE_CACHE + PAGES_POST_CACHE + 1)];
  for (int i=0; i < mBlockCache.length; i++) {
    mBlockCache[i]=new ImageBlock();
  }
  mWorkerThread=new Thread(new Runnable(){
    public void run(){
      while (true) {
        int workCounter;
synchronized (ImageBlockManager.this) {
          workCounter=mWorkCounter;
        }
        if (mDone) {
          mLoader.stop();
          for (int i=0; i < mBlockCache.length; i++) {
            ImageBlock block=mBlockCache[i];
            if (block != null) {
              block.recycleBitmaps();
              mBlockCache[i]=null;
            }
          }
          mBlockCache=null;
          mBlockCacheStartOffset=0;
          mBlockCacheFirstBlockNumber=0;
          break;
        }
        loadNext();
synchronized (ImageBlockManager.this) {
          if ((workCounter == mWorkCounter) && (!mDone)) {
            try {
              ImageBlockManager.this.wait();
            }
 catch (            InterruptedException ex) {
            }
          }
        }
      }
    }
  }
);
  mWorkerThread.setName(""String_Node_Str"");
  mWorkerThread.start();
}","ImageBlockManager(){
  mBlockCache=new ImageBlock[ROWS_PER_PAGE * (PAGES_PRE_CACHE + PAGES_POST_CACHE + 1)];
  for (int i=0; i < mBlockCache.length; i++) {
    mBlockCache[i]=new ImageBlock();
  }
  mWorkerThread=new Thread(new Runnable(){
    public void run(){
      while (true) {
        int workCounter;
synchronized (ImageBlockManager.this) {
          workCounter=mWorkCounter;
        }
        if (mDone) {
          mLoader.stop();
          for (int i=0; i < mBlockCache.length; i++) {
            ImageBlock block=mBlockCache[i];
            if (block != null) {
              block.recycleBitmaps();
              mBlockCache[i]=null;
            }
          }
          mBlockCache=null;
          mBlockCacheStartOffset=0;
          mBlockCacheFirstBlockNumber=0;
          break;
        }
        loadNext();
synchronized (ImageBlockManager.this) {
          if ((workCounter == mWorkCounter) && (!mDone)) {
            try {
              ImageBlockManager.this.wait();
            }
 catch (            InterruptedException ex) {
            }
          }
        }
      }
    }
  }
);
  mWorkerThread.setName(""String_Node_Str"");
  mWorkerThread.start();
}",0.983249581239531
184672,"public void invalidateAllImages(){
  this.clearCache();
  mImageBlockManager=new ImageBlockManager(mLoader);
  mImageBlockManager.moveDataWindow(true);
}","public void invalidateAllImages(){
  this.clearCache();
  mImageBlockManager=new ImageBlockManager();
  mImageBlockManager.moveDataWindow(true);
}",0.9765886287625418
184673,"@Override protected void onRestoreInstanceState(Bundle state){
  super.onRestoreInstanceState(state);
  mTargetScroll=state.getInt(INSTANCE_STATE_TAG,0);
}","@Override protected void onRestoreInstanceState(Bundle state){
  super.onRestoreInstanceState(state);
  mScrollPosition=state.getFloat(STATE_SCROLL_POSITION,INVALID_POSITION);
  mSelectedIndex=state.getInt(STATE_SELECTED_INDEX,0);
}",0.661498708010336
184674,"public void onScroll(int index){
  mFirstVisibleIndex=index;
}","public void onScroll(float scrollPosition){
  mScrollPosition=scrollPosition;
}",0.5531914893617021
184675,"@Override public void onResume(){
  super.onResume();
  BitmapManager.instance().allowAllDecoding();
  mGvs.setSizeChoice(Integer.parseInt(mPrefs.getString(""String_Node_Str"",""String_Node_Str"")),mTargetScroll);
  mGvs.requestFocus();
  String sortOrder=mPrefs.getString(""String_Node_Str"",null);
  if (sortOrder != null) {
    mSortAscending=sortOrder.equals(""String_Node_Str"");
  }
  mPausing=false;
  IntentFilter intentFilter=new IntentFilter(Intent.ACTION_MEDIA_MOUNTED);
  intentFilter.addAction(Intent.ACTION_MEDIA_UNMOUNTED);
  intentFilter.addAction(Intent.ACTION_MEDIA_SCANNER_STARTED);
  intentFilter.addAction(Intent.ACTION_MEDIA_SCANNER_FINISHED);
  intentFilter.addAction(Intent.ACTION_MEDIA_EJECT);
  intentFilter.addDataScheme(""String_Node_Str"");
  mReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (action.equals(Intent.ACTION_MEDIA_MOUNTED)) {
      }
 else       if (action.equals(Intent.ACTION_MEDIA_UNMOUNTED)) {
        Toast.makeText(ImageGallery.this,getResources().getString(R.string.wait),5000);
        rebake(true,false);
      }
 else       if (action.equals(Intent.ACTION_MEDIA_SCANNER_STARTED)) {
        Toast.makeText(ImageGallery.this,getResources().getString(R.string.wait),5000);
        rebake(false,true);
      }
 else       if (action.equals(Intent.ACTION_MEDIA_SCANNER_FINISHED)) {
        rebake(false,false);
      }
 else       if (action.equals(Intent.ACTION_MEDIA_EJECT)) {
        rebake(true,false);
      }
    }
  }
;
  registerReceiver(mReceiver,intentFilter);
  rebake(false,ImageManager.isMediaScannerScanning(getContentResolver()));
}","@Override public void onResume(){
  super.onResume();
  BitmapManager.instance().allowAllDecoding();
  mGvs.setSizeChoice(Integer.parseInt(mPrefs.getString(""String_Node_Str"",""String_Node_Str"")));
  mGvs.requestFocus();
  String sortOrder=mPrefs.getString(""String_Node_Str"",null);
  if (sortOrder != null) {
    mSortAscending=sortOrder.equals(""String_Node_Str"");
  }
  mPausing=false;
  IntentFilter intentFilter=new IntentFilter(Intent.ACTION_MEDIA_MOUNTED);
  intentFilter.addAction(Intent.ACTION_MEDIA_UNMOUNTED);
  intentFilter.addAction(Intent.ACTION_MEDIA_SCANNER_STARTED);
  intentFilter.addAction(Intent.ACTION_MEDIA_SCANNER_FINISHED);
  intentFilter.addAction(Intent.ACTION_MEDIA_EJECT);
  intentFilter.addDataScheme(""String_Node_Str"");
  mReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (action.equals(Intent.ACTION_MEDIA_MOUNTED)) {
      }
 else       if (action.equals(Intent.ACTION_MEDIA_UNMOUNTED)) {
        Toast.makeText(ImageGallery.this,getResources().getString(R.string.wait),5000);
        rebake(true,false);
      }
 else       if (action.equals(Intent.ACTION_MEDIA_SCANNER_STARTED)) {
        Toast.makeText(ImageGallery.this,getResources().getString(R.string.wait),5000);
        rebake(false,true);
      }
 else       if (action.equals(Intent.ACTION_MEDIA_SCANNER_FINISHED)) {
        rebake(false,false);
      }
 else       if (action.equals(Intent.ACTION_MEDIA_EJECT)) {
        rebake(true,false);
      }
    }
  }
;
  registerReceiver(mReceiver,intentFilter);
  rebake(false,ImageManager.isMediaScannerScanning(getContentResolver()));
}",0.9958530805687204
184676,"@Override protected void onSaveInstanceState(Bundle state){
  super.onSaveInstanceState(state);
  mTargetScroll=mGvs.getScrollY();
  state.putInt(INSTANCE_STATE_TAG,mTargetScroll);
}","@Override protected void onSaveInstanceState(Bundle state){
  super.onSaveInstanceState(state);
  state.putFloat(STATE_SCROLL_POSITION,mScrollPosition);
  state.putInt(STATE_SELECTED_INDEX,mSelectedIndex);
}",0.5449871465295629
184677,"@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  mTargetScroll=mGvs.getScrollY();
}","@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  mConfigurationChanged=true;
}",0.8542372881355932
184678,"public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (getCurrentImage() == null) {
    return;
  }
  boolean isImage=ImageManager.isImage(getCurrentImage());
  if (isImage) {
    menu.add(0,0,0,R.string.view).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        onSelect(mGvs.mCurrentSelection);
        return true;
      }
    }
);
  }
  menu.setHeaderTitle(isImage ? R.string.context_menu_header : R.string.video_context_menu_header);
  if ((mInclusion & (ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS)) != 0) {
    MenuHelper.MenuItemsResult r=MenuHelper.addImageMenuItems(menu,MenuHelper.INCLUDE_ALL,isImage,ImageGallery.this,mHandler,mDeletePhotoRunnable,new MenuHelper.MenuInvoker(){
      public void run(      MenuHelper.MenuCallback cb){
        cb.run(getCurrentImageUri(),getCurrentImage());
        mGvs.clearCache();
        mGvs.invalidate();
        mGvs.requestLayout();
        mGvs.start();
        mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE);
      }
    }
);
    if (r != null) {
      r.gettingReadyToOpen(menu,getCurrentImage());
    }
    if (isImage) {
      addSlideShowMenu(menu,1000);
    }
  }
}","public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (getCurrentImage() == null) {
    return;
  }
  boolean isImage=ImageManager.isImage(getCurrentImage());
  if (isImage) {
    menu.add(0,0,0,R.string.view).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        onImageClicked(mGvs.mCurrentSelection);
        return true;
      }
    }
);
  }
  menu.setHeaderTitle(isImage ? R.string.context_menu_header : R.string.video_context_menu_header);
  if ((mInclusion & (ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS)) != 0) {
    MenuHelper.MenuItemsResult r=MenuHelper.addImageMenuItems(menu,MenuHelper.INCLUDE_ALL,isImage,ImageGallery.this,mHandler,mDeletePhotoRunnable,new MenuHelper.MenuInvoker(){
      public void run(      MenuHelper.MenuCallback cb){
        cb.run(getCurrentImageUri(),getCurrentImage());
        mGvs.clearCache();
        mGvs.invalidate();
        mGvs.requestLayout();
        mGvs.start();
        mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE);
      }
    }
);
    if (r != null) {
      r.gettingReadyToOpen(menu,getCurrentImage());
    }
    if (isImage) {
      addSlideShowMenu(menu,1000);
    }
  }
}",0.993103448275862
184679,"public boolean onMenuItemClick(MenuItem item){
  onSelect(mGvs.mCurrentSelection);
  return true;
}","public boolean onMenuItemClick(MenuItem item){
  onImageClicked(mGvs.mCurrentSelection);
  return true;
}",0.9411764705882352
184680,"private void setStart(final int blockNumber){
synchronized (ImageBlock.this) {
    if (blockNumber == mBlockNumber) {
      return;
    }
    cancelExistingRequests();
    mBlockNumber=blockNumber;
    mRequestedMask=0;
    mCompletedMask=0;
    int imageNumber=blockNumber * mCurrentSpec.mColumns;
    int lastImageNumber=mAllImages.getCount() - 1;
    int spacing=mCurrentSpec.mCellSpacing;
    int leftSpacing=mCurrentSpec.mLeftEdgePadding;
    final int yPos=spacing;
    for (int col=0; col < mCurrentSpec.mColumns; col++) {
      if (imageNumber++ >= lastImageNumber) {
        break;
      }
      final int xPos=leftSpacing + (col * (mCurrentSpec.mCellWidth + spacing));
      mCanvas.drawRect(xPos,yPos,xPos + mCurrentSpec.mCellWidth,yPos + mCurrentSpec.mCellHeight,mPaint);
      paintSel(0,xPos,yPos);
    }
  }
}","private synchronized void setStart(final int blockNumber){
  if (blockNumber == mBlockNumber) {
    return;
  }
  cancelExistingRequests();
  mBlockNumber=blockNumber;
  mRequestedMask=0;
  mCompletedMask=0;
  mCanvas.drawColor(0xFF000000);
  mPaint.setColor(0xFFDDDDDD);
  LayoutSpec spec=GridViewSpecial.this.mCurrentSpec;
  int columnCount=spec.mColumns;
  int imageIndex=blockNumber * columnCount;
  int imageCount=mAllImages.getCount();
  int yPos=spec.mCellSpacing;
  int xPos=spec.mLeftEdgePadding;
  for (int i=0; i < columnCount && imageIndex < imageCount; ++i, ++imageIndex) {
    mCanvas.drawRect(xPos,yPos,xPos + spec.mCellWidth,yPos + spec.mCellHeight,mPaint);
    paintSel(0,xPos,yPos);
    xPos+=(spec.mCellWidth + spec.mCellSpacing);
  }
}",0.42811906269791
184681,"public static void debugWhere(String tag,String msg){
  Exception ex=new Exception();
  Log.d(tag,msg,ex);
}","public static void debugWhere(String tag,String msg){
  Log.d(tag,msg + ""String_Node_Str"");
  StackTraceElement elements[]=Thread.currentThread().getStackTrace();
  for (int i=3, n=elements.length; i < n; ++i) {
    StackTraceElement st=elements[i];
    String message=String.format(""String_Node_Str"",st.getClassName(),st.getMethodName(),st.getFileName(),st.getLineNumber());
    Log.d(tag,message);
  }
  Log.d(tag,msg + ""String_Node_Str"");
}",0.2214156079854809
184682,"private synchronized IImageList allImages(boolean assumeMounted){
  if (mAllImages == null) {
    mNoImagesView=findViewById(R.id.no_images);
    mInclusion=ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS;
    Intent intent=getIntent();
    if (intent != null) {
      String type=intent.resolveType(this);
      TextView leftText=(TextView)findViewById(R.id.left_text);
      if (type != null) {
        if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
          mInclusion=ImageManager.INCLUDE_IMAGES;
          if (isPickIntent()) {
            leftText.setText(R.string.pick_photos_gallery_title);
          }
 else {
            leftText.setText(R.string.photos_gallery_title);
          }
        }
        if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
          mInclusion=ImageManager.INCLUDE_VIDEOS;
          if (isPickIntent()) {
            leftText.setText(R.string.pick_videos_gallery_title);
          }
 else {
            leftText.setText(R.string.videos_gallery_title);
          }
        }
      }
      Bundle extras=intent.getExtras();
      String title=(extras != null) ? extras.getString(""String_Node_Str"") : null;
      if (title != null && title.length() > 0) {
        leftText.setText(title);
      }
      if (extras != null) {
        mInclusion=(ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS) & extras.getInt(""String_Node_Str"",mInclusion);
      }
      if (extras != null && extras.getBoolean(""String_Node_Str"")) {
        Log.d(TAG,""String_Node_Str"");
        mInclusion=ImageManager.INCLUDE_DRM_IMAGES;
      }
    }
    Uri uri=getIntent().getData();
    if (!assumeMounted) {
      mAllImages=ImageManager.emptyImageList();
    }
 else {
      mAllImages=ImageManager.allImages(getContentResolver(),ImageManager.DataLocation.NONE,mInclusion,mSortAscending ? ImageManager.SORT_ASCENDING : ImageManager.SORT_DESCENDING,(uri != null) ? uri.getQueryParameter(""String_Node_Str"") : null);
    }
  }
  return mAllImages;
}","private synchronized IImageList allImages(boolean assumeMounted){
  if (mAllImages == null) {
    mNoImagesView=findViewById(R.id.no_images);
    mInclusion=ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS;
    Intent intent=getIntent();
    if (intent != null) {
      String type=intent.resolveType(this);
      TextView leftText=(TextView)findViewById(R.id.left_text);
      if (type != null) {
        if (isImageType(type)) {
          mInclusion=ImageManager.INCLUDE_IMAGES;
          if (isPickIntent()) {
            leftText.setText(R.string.pick_photos_gallery_title);
          }
 else {
            leftText.setText(R.string.photos_gallery_title);
          }
        }
        if (isVideoType(type)) {
          mInclusion=ImageManager.INCLUDE_VIDEOS;
          if (isPickIntent()) {
            leftText.setText(R.string.pick_videos_gallery_title);
          }
 else {
            leftText.setText(R.string.videos_gallery_title);
          }
        }
      }
      Bundle extras=intent.getExtras();
      String title=(extras != null) ? extras.getString(""String_Node_Str"") : null;
      if (title != null && title.length() > 0) {
        leftText.setText(title);
      }
      if (extras != null) {
        mInclusion=(ImageManager.INCLUDE_IMAGES | ImageManager.INCLUDE_VIDEOS) & extras.getInt(""String_Node_Str"",mInclusion);
      }
      if (extras != null && extras.getBoolean(""String_Node_Str"")) {
        Log.d(TAG,""String_Node_Str"");
        mInclusion=ImageManager.INCLUDE_DRM_IMAGES;
      }
    }
    Uri uri=getIntent().getData();
    if (!assumeMounted) {
      mAllImages=ImageManager.emptyImageList();
    }
 else {
      mAllImages=ImageManager.allImages(getContentResolver(),ImageManager.DataLocation.NONE,mInclusion,mSortAscending ? ImageManager.SORT_ASCENDING : ImageManager.SORT_DESCENDING,(uri != null) ? uri.getQueryParameter(""String_Node_Str"") : null);
    }
  }
  return mAllImages;
}",0.9671052631578948
184683,"@Override public boolean onCreateOptionsMenu(Menu menu){
  MenuItem item;
  if (isPickIntent()) {
    MenuHelper.addCapturePictureMenuItems(menu,this);
  }
 else {
    MenuHelper.addCaptureMenuItems(menu,this);
    if ((mInclusion & ImageManager.INCLUDE_IMAGES) != 0) {
      mSlideShowItem=addSlideShowMenu(menu,5);
    }
  }
  item=menu.add(0,0,1000,R.string.camerasettings);
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    public boolean onMenuItemClick(    MenuItem item){
      Intent preferences=new Intent();
      preferences.setClass(ImageGallery2.this,GallerySettings.class);
      startActivity(preferences);
      return true;
    }
  }
);
  item.setAlphabeticShortcut('p');
  item.setIcon(android.R.drawable.ic_menu_preferences);
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  if (isPickIntent()) {
    String type=getIntent().resolveType(this);
    if (type != null) {
      if (isImageType(type)) {
        MenuHelper.addCapturePictureMenuItems(menu,this);
      }
 else       if (isVideoType(type)) {
        MenuHelper.addCaptureVideoMenuItems(menu,this);
      }
    }
  }
 else {
    MenuHelper.addCaptureMenuItems(menu,this);
    if ((mInclusion & ImageManager.INCLUDE_IMAGES) != 0) {
      mSlideShowItem=addSlideShowMenu(menu,5);
    }
    MenuItem item=menu.add(0,0,1000,R.string.camerasettings);
    item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
        Intent preferences=new Intent();
        preferences.setClass(ImageGallery2.this,GallerySettings.class);
        startActivity(preferences);
        return true;
      }
    }
);
    item.setAlphabeticShortcut('p');
    item.setIcon(android.R.drawable.ic_menu_preferences);
  }
  return true;
}",0.818732782369146
184684,"public Uri addImage(Context ctx,ContentResolver cr,String title,long dateTaken,Location location,int orientation,String directory,String filename){
  ContentValues values=new ContentValues(7);
  values.put(Images.Media.TITLE,title);
  values.put(Images.Media.DISPLAY_NAME,title);
  values.put(Images.Media.DATE_TAKEN,dateTaken);
  values.put(Images.Media.MIME_TYPE,""String_Node_Str"");
  values.put(Images.Media.ORIENTATION,orientation);
  File parentFile=new File(directory);
  String path=parentFile.toString().toLowerCase();
  String name=parentFile.getName();
  if (location != null) {
    values.put(Images.Media.LATITUDE,location.getLatitude());
    values.put(Images.Media.LONGITUDE,location.getLongitude());
  }
  if (directory != null && filename != null) {
    String value=directory + ""String_Node_Str"" + filename;
    values.put(Images.Media.DATA,value);
  }
  Uri uri=cr.insert(sStorageURI,values);
  String projection[]=new String[]{ImageColumns._ID,Images.Media.DISPLAY_NAME,Images.Media.DATA};
  Cursor c=cr.query(uri,projection,null,null,null);
  if (c.moveToFirst()) {
    String filePath=c.getString(2);
    if (filePath != null) {
      int pos=filePath.lastIndexOf(""String_Node_Str"");
      if (pos >= 0) {
        filePath=filePath.substring(pos + 1);
        c.updateString(1,filePath);
        c.commitUpdates();
      }
    }
  }
  c.close();
  return uri;
}","public Uri addImage(Context ctx,ContentResolver cr,String title,long dateTaken,Location location,int orientation,String directory,String filename){
  ContentValues values=new ContentValues(7);
  values.put(Images.Media.TITLE,title);
  values.put(Images.Media.DISPLAY_NAME,filename);
  values.put(Images.Media.DATE_TAKEN,dateTaken);
  values.put(Images.Media.MIME_TYPE,""String_Node_Str"");
  values.put(Images.Media.ORIENTATION,orientation);
  File parentFile=new File(directory);
  String path=parentFile.toString().toLowerCase();
  String name=parentFile.getName();
  if (location != null) {
    values.put(Images.Media.LATITUDE,location.getLatitude());
    values.put(Images.Media.LONGITUDE,location.getLongitude());
  }
  if (directory != null && filename != null) {
    String value=directory + ""String_Node_Str"" + filename;
    values.put(Images.Media.DATA,value);
  }
  return cr.insert(sStorageURI,values);
}",0.7839721254355401
184685,"public void run(){
  mLayoutComplete=true;
  setImage(mCurrentPosition);
}","public void run(){
  if (mMode == MODE_NORMAL)   return;
  ImageViewTouchBase oldView=mSlideShowImageViews[mSlideShowImageCurrent];
  if (++mSlideShowImageCurrent == mSlideShowImageViews.length) {
    mSlideShowImageCurrent=0;
  }
  ImageViewTouchBase newView=mSlideShowImageViews[mSlideShowImageCurrent];
  newView.setVisibility(View.VISIBLE);
  newView.setImageBitmapResetBase(bitmap,isThumb,isThumb);
  newView.bringToFront();
  int animation=0;
  if (mAnimationIndex == -1) {
    int n=mRandom.nextInt(mSlideShowInAnimation.length);
    animation=n;
  }
 else {
    animation=mAnimationIndex;
  }
  Animation aIn=mSlideShowInAnimation[animation];
  newView.setAnimation(aIn);
  newView.setVisibility(View.VISIBLE);
  aIn.startNow();
  Animation aOut=mSlideShowOutAnimation[animation];
  oldView.setVisibility(View.INVISIBLE);
  oldView.setAnimation(aOut);
  aOut.startNow();
  mCurrentPosition=requestedPos;
  if (mCurrentPosition == mLastSlideShowImage && !firstCall) {
    if (mSlideShowLoop) {
      if (mUseShuffleOrder) {
        generateShuffleOrder();
      }
    }
 else {
      setMode(MODE_NORMAL);
      return;
    }
  }
  if (Config.LOGV)   Log.v(TAG,""String_Node_Str"" + mCurrentPosition);
  loadNextImage((mCurrentPosition + 1) % mAllImages.getCount(),mSlideShowInterval,false);
}",0.0641399416909621
184686,"public ScrollHandler(Context context,AttributeSet attrs){
  super(context,attrs);
  mScrollerHelper=new Scroller(context);
}","public ScrollHandler(Context context,AttributeSet attrs){
  super(context,attrs);
  mScrollerHelper=new Scroller(context);
  mViewImage=(ViewImage)context;
}",0.8825622775800712
184687,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  int width=right - left;
  int x=0;
  for (  View v : new View[]{findViewById(R.id.image1),findViewById(R.id.image2),findViewById(R.id.image3)}) {
    v.layout(x,0,x + width,bottom);
    x+=(width + sPadding);
  }
  findViewById(R.id.padding1).layout(width,0,width + sPadding,bottom);
  findViewById(R.id.padding2).layout(width + sPadding + width,0,width + sPadding + width+ sPadding,bottom);
  if (changed) {
    if (mFirstLayoutCompletedCallback != null) {
      mFirstLayoutCompletedCallback.run();
    }
  }
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  int width=right - left;
  int x=0;
  for (  View v : new View[]{findViewById(R.id.image1),findViewById(R.id.image2),findViewById(R.id.image3)}) {
    v.layout(x,0,x + width,bottom);
    x+=(width + sPadding);
  }
  findViewById(R.id.padding1).layout(width,0,width + sPadding,bottom);
  findViewById(R.id.padding2).layout(width + sPadding + width,0,width + sPadding + width+ sPadding,bottom);
  if (changed) {
    mViewImage.mLayoutComplete=true;
    mViewImage.onLayoutChanged();
  }
}",0.8890770533446232
184688,"@Override public void onResume(){
  super.onResume();
  init(mSavedUri);
  int count=mAllImages.getCount();
  if (count == 0) {
    finish();
  }
 else   if (count <= mCurrentPosition) {
    mCurrentPosition=count - 1;
  }
  ImageManager.IImage image=mAllImages.getImageAt(mCurrentPosition);
  if (mGetter == null) {
    makeGetter();
  }
  mFirst=true;
  mScroller.setLayoutCompletedCallback(new Runnable(){
    public void run(){
      mLayoutComplete=true;
      setImage(mCurrentPosition);
    }
  }
);
  setImage(mCurrentPosition);
  setOrientation();
}","@Override public void onResume(){
  super.onResume();
  init(mSavedUri);
  int count=mAllImages.getCount();
  if (count == 0) {
    finish();
  }
 else   if (count <= mCurrentPosition) {
    mCurrentPosition=count - 1;
  }
  ImageManager.IImage image=mAllImages.getImageAt(mCurrentPosition);
  if (mGetter == null) {
    makeGetter();
  }
  mFirst=true;
  setImage(mCurrentPosition);
}",0.8165429480381761
184689,"private void setImage(int pos){
  if (!mLayoutComplete) {
    return;
  }
  final boolean left=(pos == mCurrentPosition - 1);
  final boolean right=(pos == mCurrentPosition + 1);
  mCurrentPosition=pos;
  ImageViewTouchBase current=mImageViews[1];
  current.mSuppMatrix.reset();
  current.setImageMatrix(current.getImageViewMatrix());
  if (false) {
    Log.v(TAG,""String_Node_Str"");
    for (    ImageViewTouchBase ivtb : mImageViews)     ivtb.dump();
  }
  if (!mFirst) {
    if (left) {
      mImageViews[2].copyFrom(mImageViews[1]);
      mImageViews[1].copyFrom(mImageViews[0]);
    }
 else     if (right) {
      mImageViews[0].copyFrom(mImageViews[1]);
      mImageViews[1].copyFrom(mImageViews[2]);
    }
  }
  if (false) {
    Log.v(TAG,""String_Node_Str"");
    for (    ImageViewTouchBase ivtb : mImageViews)     ivtb.dump();
  }
  for (  ImageViewTouchBase ivt : mImageViews) {
    ivt.mIsZooming=false;
  }
  int width=mImageViews[1].getWidth();
  int from;
  int to=width + sPadding;
  if (mFirst) {
    from=to;
    mFirst=false;
  }
 else {
    from=left ? (width + sPadding) + mScroller.getScrollX() : mScroller.getScrollX() - (width + sPadding);
  }
  if (sAnimateTransitions) {
    mScroller.scrollTo(from,0);
    animateScrollTo(to,0);
  }
 else {
    mScroller.scrollTo(to,0);
  }
  ImageGetterCallback cb=new ImageGetterCallback(){
    public void completed(    boolean wasCanceled){
      if (!mShowActionIcons) {
        mImageViews[1].setFocusableInTouchMode(true);
        mImageViews[1].requestFocus();
      }
    }
    public boolean wantsThumbnail(    int pos,    int offset){
      ImageViewTouchBase ivt=mImageViews[1 + offset];
      return ivt.mThumbBitmap == null;
    }
    public boolean wantsFullImage(    int pos,    int offset){
      ImageViewTouchBase ivt=mImageViews[1 + offset];
      if (ivt.mBitmapDisplayed != null && !ivt.mBitmapIsThumbnail) {
        return false;
      }
      if (offset != 0) {
        return false;
      }
      return true;
    }
    public int fullImageSizeToUse(    int pos,    int offset){
      final int imageViewSize=480;
      return imageViewSize;
    }
    public int[] loadOrder(){
      return sOrder_adjacents;
    }
    public void imageLoaded(    int pos,    int offset,    Bitmap bitmap,    boolean isThumb){
      ImageViewTouchBase ivt=mImageViews[1 + offset];
      if (offset == 0)       updateZoomButtonsEnabled();
      ivt.setImageBitmapResetBase(bitmap,isThumb,isThumb);
    }
  }
;
  if (mGetter != null) {
    mGetter.setPosition(pos,cb);
  }
  showOnScreenControls();
}","private void setImage(int pos){
  if (!mLayoutComplete)   return;
  final boolean left=(pos == mCurrentPosition - 1);
  final boolean right=(pos == mCurrentPosition + 1);
  mCurrentPosition=pos;
  ImageViewTouchBase current=mImageViews[1];
  current.mSuppMatrix.reset();
  current.setImageMatrix(current.getImageViewMatrix());
  if (false) {
    Log.v(TAG,""String_Node_Str"");
    for (    ImageViewTouchBase ivtb : mImageViews)     ivtb.dump();
  }
  if (!mFirst) {
    if (left) {
      mImageViews[2].copyFrom(mImageViews[1]);
      mImageViews[1].copyFrom(mImageViews[0]);
    }
 else     if (right) {
      mImageViews[0].copyFrom(mImageViews[1]);
      mImageViews[1].copyFrom(mImageViews[2]);
    }
  }
  if (false) {
    Log.v(TAG,""String_Node_Str"");
    for (    ImageViewTouchBase ivtb : mImageViews)     ivtb.dump();
  }
  for (  ImageViewTouchBase ivt : mImageViews) {
    ivt.mIsZooming=false;
  }
  int width=mImageViews[1].getWidth();
  int from;
  int to=width + sPadding;
  if (mFirst) {
    from=to;
    mFirst=false;
  }
 else {
    from=left ? (width + sPadding) + mScroller.getScrollX() : mScroller.getScrollX() - (width + sPadding);
  }
  if (sAnimateTransitions) {
    mScroller.scrollTo(from,0);
    animateScrollTo(to,0);
  }
 else {
    mScroller.scrollTo(to,0);
  }
  ImageGetterCallback cb=new ImageGetterCallback(){
    public void completed(    boolean wasCanceled){
      if (!mShowActionIcons) {
        mImageViews[1].setFocusableInTouchMode(true);
        mImageViews[1].requestFocus();
      }
    }
    public boolean wantsThumbnail(    int pos,    int offset){
      ImageViewTouchBase ivt=mImageViews[1 + offset];
      return ivt.mThumbBitmap == null;
    }
    public boolean wantsFullImage(    int pos,    int offset){
      ImageViewTouchBase ivt=mImageViews[1 + offset];
      if (ivt.mBitmapDisplayed != null && !ivt.mBitmapIsThumbnail) {
        return false;
      }
      if (offset != 0) {
        return false;
      }
      return true;
    }
    public int fullImageSizeToUse(    int pos,    int offset){
      final int imageViewSize=480;
      return imageViewSize;
    }
    public int[] loadOrder(){
      return sOrder_adjacents;
    }
    public void imageLoaded(    int pos,    int offset,    Bitmap bitmap,    boolean isThumb){
      ImageViewTouchBase ivt=mImageViews[1 + offset];
      if (offset == 0)       updateZoomButtonsEnabled();
      ivt.setImageBitmapResetBase(bitmap,isThumb,isThumb);
    }
  }
;
  if (mGetter != null) {
    mGetter.setPosition(pos,cb);
  }
  showOnScreenControls();
}",0.9949238578680204
184690,"public ImageGetter(){
  mGetterThread=new Thread(new Runnable(){
    private Runnable callback(    final int position,    final int offset,    final boolean isThumb,    final Bitmap bitmap){
      return new Runnable(){
        public void run(){
          if (!isCanceled() && position == mCurrentPosition) {
            mCB.imageLoaded(position,offset,bitmap,isThumb);
          }
 else {
            if (bitmap != null)             bitmap.recycle();
          }
        }
      }
;
    }
    private Runnable completedCallback(    final boolean wasCanceled){
      return new Runnable(){
        public void run(){
          mCB.completed(wasCanceled);
        }
      }
;
    }
    public void run(){
      int lastPosition=-1;
      while (!mDone) {
synchronized (ImageGetter.this) {
          mReady=true;
          ImageGetter.this.notify();
          if (mCurrentPosition == -1 || lastPosition == mCurrentPosition) {
            try {
              ImageGetter.this.wait();
            }
 catch (            InterruptedException ex) {
              continue;
            }
          }
          lastPosition=mCurrentPosition;
          mReady=false;
        }
        if (lastPosition != -1) {
          int imageCount=mAllImages.getCount();
          int[] order=mCB.loadOrder();
          for (int i=0; i < order.length; i++) {
            int offset=order[i];
            int imageNumber=lastPosition + offset;
            if (imageNumber >= 0 && imageNumber < imageCount) {
              ImageManager.IImage image=mAllImages.getImageAt(lastPosition + offset);
              if (image == null || isCanceled()) {
                break;
              }
              if (mCB.wantsThumbnail(lastPosition,offset)) {
                if (Config.LOGV)                 Log.v(TAG,""String_Node_Str"" + offset);
                Bitmap b=image.thumbBitmap();
                mHandler.postGetterCallback(callback(lastPosition,offset,true,b));
              }
            }
          }
          for (int i=0; i < order.length; i++) {
            int offset=order[i];
            int imageNumber=lastPosition + offset;
            if (imageNumber >= 0 && imageNumber < imageCount) {
              ImageManager.IImage image=mAllImages.getImageAt(lastPosition + offset);
              if (mCB.wantsFullImage(lastPosition,offset)) {
                if (Config.LOGV)                 Log.v(TAG,""String_Node_Str"" + offset);
                int sizeToUse=mCB.fullImageSizeToUse(lastPosition,offset);
                if (image != null && !isCanceled()) {
                  mLoad=image.fullSizeBitmap_cancelable(sizeToUse);
                }
                if (mLoad != null) {
                  long t1;
                  if (Config.LOGV)                   t1=System.currentTimeMillis();
                  Bitmap b=mLoad.get();
                  if (Config.LOGV && b != null) {
                    long t2=System.currentTimeMillis();
                    Log.v(TAG,""String_Node_Str"" + image.fullSizeImageUri() + ""String_Node_Str""+ sizeToUse+ ""String_Node_Str""+ (t2 - t1)+ ""String_Node_Str""+ b.getWidth()+ ""String_Node_Str""+ b.getHeight());
                  }
                  mLoad=null;
                  if (b != null) {
                    if (isCanceled()) {
                      b.recycle();
                    }
 else {
                      mHandler.postGetterCallback(callback(lastPosition,offset,false,b));
                    }
                  }
                }
              }
            }
          }
          mHandler.postGetterCallback(completedCallback(isCanceled()));
        }
      }
    }
  }
);
  mGetterThread.setName(""String_Node_Str"");
  mGetterThread.start();
}","public ImageGetter(){
  mGetterThread=new Thread(new Runnable(){
    private Runnable callback(    final int position,    final int offset,    final boolean isThumb,    final Bitmap bitmap){
      return new Runnable(){
        public void run(){
          if (!isCanceled() && position == mCurrentPosition) {
            mCB.imageLoaded(position,offset,bitmap,isThumb);
          }
 else           if (bitmap != null) {
            bitmap.recycle();
          }
        }
      }
;
    }
    private Runnable completedCallback(    final boolean wasCanceled){
      return new Runnable(){
        public void run(){
          mCB.completed(wasCanceled);
        }
      }
;
    }
    public void run(){
      int lastPosition=-1;
      while (!mDone) {
synchronized (ImageGetter.this) {
          mReady=true;
          ImageGetter.this.notify();
          if (mCurrentPosition == -1 || lastPosition == mCurrentPosition) {
            try {
              ImageGetter.this.wait();
            }
 catch (            InterruptedException ex) {
              continue;
            }
          }
          lastPosition=mCurrentPosition;
          mReady=false;
        }
        if (lastPosition != -1) {
          int imageCount=mAllImages.getCount();
          int[] order=mCB.loadOrder();
          for (int i=0; i < order.length; i++) {
            int offset=order[i];
            int imageNumber=lastPosition + offset;
            if (imageNumber >= 0 && imageNumber < imageCount) {
              ImageManager.IImage image=mAllImages.getImageAt(lastPosition + offset);
              if (image == null || isCanceled()) {
                break;
              }
              if (mCB.wantsThumbnail(lastPosition,offset)) {
                if (Config.LOGV)                 Log.v(TAG,""String_Node_Str"" + offset);
                Bitmap b=image.thumbBitmap();
                mHandler.postGetterCallback(callback(lastPosition,offset,true,b));
              }
            }
          }
          for (int i=0; i < order.length; i++) {
            int offset=order[i];
            int imageNumber=lastPosition + offset;
            if (imageNumber >= 0 && imageNumber < imageCount) {
              ImageManager.IImage image=mAllImages.getImageAt(lastPosition + offset);
              if (mCB.wantsFullImage(lastPosition,offset)) {
                if (Config.LOGV)                 Log.v(TAG,""String_Node_Str"" + offset);
                int sizeToUse=mCB.fullImageSizeToUse(lastPosition,offset);
                if (image != null && !isCanceled()) {
                  mLoad=image.fullSizeBitmap_cancelable(sizeToUse);
                }
                if (mLoad != null) {
                  long t1;
                  if (Config.LOGV)                   t1=System.currentTimeMillis();
                  Bitmap b=mLoad.get();
                  if (Config.LOGV && b != null) {
                    long t2=System.currentTimeMillis();
                    Log.v(TAG,""String_Node_Str"" + image.fullSizeImageUri() + ""String_Node_Str""+ sizeToUse+ ""String_Node_Str""+ (t2 - t1)+ ""String_Node_Str""+ b.getWidth()+ ""String_Node_Str""+ b.getHeight());
                  }
                  mLoad=null;
                  if (b != null) {
                    if (isCanceled()) {
                      b.recycle();
                    }
 else {
                      mHandler.postGetterCallback(callback(lastPosition,offset,false,b));
                    }
                  }
                }
              }
            }
          }
          mHandler.postGetterCallback(completedCallback(isCanceled()));
        }
      }
    }
  }
);
  mGetterThread.setName(""String_Node_Str"");
  mGetterThread.start();
}",0.9915806626833242
184691,"@Override public void onCreate(Bundle instanceState){
  super.onCreate(instanceState);
  Intent intent=getIntent();
  mCameraReviewMode=intent.getBooleanExtra(""String_Node_Str"",false);
  mFullScreenInNormalMode=intent.getBooleanExtra(MediaStore.EXTRA_FULL_SCREEN,true);
  mShowActionIcons=intent.getBooleanExtra(MediaStore.EXTRA_SHOW_ACTION_ICONS,false);
  mPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  mCurrentOrientation=getResources().getConfiguration().orientation;
  setDefaultKeyMode(DEFAULT_KEYS_SHORTCUT);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.viewimage);
  mImageViews[0]=(ImageViewTouch)findViewById(R.id.image1);
  mImageViews[1]=(ImageViewTouch)findViewById(R.id.image2);
  mImageViews[2]=(ImageViewTouch)findViewById(R.id.image3);
  for (  ImageViewTouch v : mImageViews) {
    v.setEnableTrackballScroll(!mShowActionIcons);
  }
  mScroller=(ScrollHandler)findViewById(R.id.scroller);
  makeGetter();
  mAnimationIndex=-1;
  mSlideShowInAnimation=new Animation[]{makeInAnimation(R.anim.transition_in),makeInAnimation(R.anim.slide_in),makeInAnimation(R.anim.slide_in_vertical)};
  mSlideShowOutAnimation=new Animation[]{makeOutAnimation(R.anim.transition_out),makeOutAnimation(R.anim.slide_out),makeOutAnimation(R.anim.slide_out_vertical)};
  mSlideShowImageViews[0]=(ImageViewTouch)findViewById(R.id.image1_slideShow);
  mSlideShowImageViews[1]=(ImageViewTouch)findViewById(R.id.image2_slideShow);
  for (  ImageViewTouch v : mSlideShowImageViews) {
    v.setImageBitmapResetBase(null,true,true);
    v.setVisibility(View.INVISIBLE);
    v.setEnableTrackballScroll(!mShowActionIcons);
  }
  mActionIconPanel=findViewById(R.id.action_icon_panel);
{
    int[] pickIds={R.id.attach,R.id.cancel};
    int[] normalIds={R.id.gallery,R.id.setas,R.id.share,R.id.discard};
    int[] hideIds=pickIds;
    int[] connectIds=normalIds;
    if (isPickIntent()) {
      hideIds=normalIds;
      connectIds=pickIds;
    }
    for (    int id : hideIds) {
      mActionIconPanel.findViewById(id).setVisibility(View.GONE);
    }
    for (    int id : connectIds) {
      View view=mActionIconPanel.findViewById(id);
      view.setOnClickListener(this);
      Animation animation=new AlphaAnimation(0F,1F);
      animation.setDuration(500);
      view.setAnimation(animation);
    }
  }
  mShutterButton=findViewById(R.id.shutter_button);
  mShutterButton.setOnClickListener(this);
  Uri uri=getIntent().getData();
  if (Config.LOGV)   Log.v(TAG,""String_Node_Str"" + uri);
  if (instanceState != null) {
    if (instanceState.containsKey(""String_Node_Str"")) {
      uri=Uri.parse(instanceState.getString(""String_Node_Str""));
    }
  }
  if (uri == null) {
    finish();
    return;
  }
  init(uri);
  Bundle b=getIntent().getExtras();
  boolean slideShow=b != null ? b.getBoolean(""String_Node_Str"",false) : false;
  if (slideShow) {
    setMode(MODE_SLIDESHOW);
    loadNextImage(mCurrentPosition,0,true);
  }
 else {
    if (mFullScreenInNormalMode) {
      getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }
    if (mShowActionIcons) {
      mActionIconPanel.setVisibility(View.VISIBLE);
      mShutterButton.setVisibility(View.VISIBLE);
    }
  }
  setupZoomButtonController(findViewById(R.id.rootLayout));
  setupDismissOnScreenControlRunnable();
  mNextImageView=findViewById(R.id.next_image);
  mPrevImageView=findViewById(R.id.prev_image);
  mNextImageView.setOnClickListener(this);
  mPrevImageView.setOnClickListener(this);
  if (mShowActionIcons) {
    mNextImageView.setFocusable(true);
    mPrevImageView.setFocusable(true);
  }
  setOrientation();
}","@Override public void onCreate(Bundle instanceState){
  super.onCreate(instanceState);
  Intent intent=getIntent();
  mCameraReviewMode=intent.getBooleanExtra(""String_Node_Str"",false);
  mFullScreenInNormalMode=intent.getBooleanExtra(MediaStore.EXTRA_FULL_SCREEN,true);
  mShowActionIcons=intent.getBooleanExtra(MediaStore.EXTRA_SHOW_ACTION_ICONS,false);
  setRequestedOrientation();
  mPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  setDefaultKeyMode(DEFAULT_KEYS_SHORTCUT);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.viewimage);
  mImageViews[0]=(ImageViewTouch)findViewById(R.id.image1);
  mImageViews[1]=(ImageViewTouch)findViewById(R.id.image2);
  mImageViews[2]=(ImageViewTouch)findViewById(R.id.image3);
  for (  ImageViewTouch v : mImageViews) {
    v.setEnableTrackballScroll(!mShowActionIcons);
  }
  mScroller=(ScrollHandler)findViewById(R.id.scroller);
  makeGetter();
  mAnimationIndex=-1;
  mSlideShowInAnimation=new Animation[]{makeInAnimation(R.anim.transition_in),makeInAnimation(R.anim.slide_in),makeInAnimation(R.anim.slide_in_vertical)};
  mSlideShowOutAnimation=new Animation[]{makeOutAnimation(R.anim.transition_out),makeOutAnimation(R.anim.slide_out),makeOutAnimation(R.anim.slide_out_vertical)};
  mSlideShowImageViews[0]=(ImageViewTouch)findViewById(R.id.image1_slideShow);
  mSlideShowImageViews[1]=(ImageViewTouch)findViewById(R.id.image2_slideShow);
  for (  ImageViewTouch v : mSlideShowImageViews) {
    v.setImageBitmapResetBase(null,true,true);
    v.setVisibility(View.INVISIBLE);
    v.setEnableTrackballScroll(!mShowActionIcons);
  }
  mActionIconPanel=findViewById(R.id.action_icon_panel);
{
    int[] pickIds={R.id.attach,R.id.cancel};
    int[] normalIds={R.id.gallery,R.id.setas,R.id.share,R.id.discard};
    int[] hideIds=pickIds;
    int[] connectIds=normalIds;
    if (isPickIntent()) {
      hideIds=normalIds;
      connectIds=pickIds;
    }
    for (    int id : hideIds) {
      mActionIconPanel.findViewById(id).setVisibility(View.GONE);
    }
    for (    int id : connectIds) {
      View view=mActionIconPanel.findViewById(id);
      view.setOnClickListener(this);
      Animation animation=new AlphaAnimation(0F,1F);
      animation.setDuration(500);
      view.setAnimation(animation);
    }
  }
  mShutterButton=findViewById(R.id.shutter_button);
  mShutterButton.setOnClickListener(this);
  Uri uri=getIntent().getData();
  if (Config.LOGV)   Log.v(TAG,""String_Node_Str"" + uri);
  if (instanceState != null) {
    if (instanceState.containsKey(""String_Node_Str"")) {
      uri=Uri.parse(instanceState.getString(""String_Node_Str""));
    }
  }
  if (uri == null) {
    finish();
    return;
  }
  init(uri);
  Bundle b=getIntent().getExtras();
  boolean slideShow=b != null ? b.getBoolean(""String_Node_Str"",false) : false;
  if (slideShow) {
    setMode(MODE_SLIDESHOW);
    loadNextImage(mCurrentPosition,0,true);
  }
 else {
    if (mFullScreenInNormalMode) {
      getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }
    if (mShowActionIcons) {
      mActionIconPanel.setVisibility(View.VISIBLE);
      mShutterButton.setVisibility(View.VISIBLE);
    }
  }
  setupZoomButtonController(findViewById(R.id.rootLayout));
  setupDismissOnScreenControlRunnable();
  mNextImageView=findViewById(R.id.next_image);
  mPrevImageView=findViewById(R.id.prev_image);
  mNextImageView.setOnClickListener(this);
  mPrevImageView.setOnClickListener(this);
  if (mShowActionIcons) {
    mNextImageView.setFocusable(true);
    mPrevImageView.setFocusable(true);
  }
}",0.9836065573770492
184692,"private Runnable callback(final int position,final int offset,final boolean isThumb,final Bitmap bitmap){
  return new Runnable(){
    public void run(){
      if (!isCanceled() && position == mCurrentPosition) {
        mCB.imageLoaded(position,offset,bitmap,isThumb);
      }
 else {
        if (bitmap != null)         bitmap.recycle();
      }
    }
  }
;
}","private Runnable callback(final int position,final int offset,final boolean isThumb,final Bitmap bitmap){
  return new Runnable(){
    public void run(){
      if (!isCanceled() && position == mCurrentPosition) {
        mCB.imageLoaded(position,offset,bitmap,isThumb);
      }
 else       if (bitmap != null) {
        bitmap.recycle();
      }
    }
  }
;
}",0.9916666666666668
184693,"public void run(){
  mLayoutComplete=true;
  setImage(mCurrentPosition);
}","public void run(){
  if (mMode == MODE_NORMAL)   return;
  ImageViewTouchBase oldView=mSlideShowImageViews[mSlideShowImageCurrent];
  if (++mSlideShowImageCurrent == mSlideShowImageViews.length) {
    mSlideShowImageCurrent=0;
  }
  ImageViewTouchBase newView=mSlideShowImageViews[mSlideShowImageCurrent];
  newView.setVisibility(View.VISIBLE);
  newView.setImageBitmapResetBase(bitmap,isThumb,isThumb);
  newView.bringToFront();
  int animation=0;
  if (mAnimationIndex == -1) {
    int n=mRandom.nextInt(mSlideShowInAnimation.length);
    animation=n;
  }
 else {
    animation=mAnimationIndex;
  }
  Animation aIn=mSlideShowInAnimation[animation];
  newView.setAnimation(aIn);
  newView.setVisibility(View.VISIBLE);
  aIn.startNow();
  Animation aOut=mSlideShowOutAnimation[animation];
  oldView.setVisibility(View.INVISIBLE);
  oldView.setAnimation(aOut);
  aOut.startNow();
  mCurrentPosition=requestedPos;
  if (mCurrentPosition == mLastSlideShowImage && !firstCall) {
    if (mSlideShowLoop) {
      if (mUseShuffleOrder) {
        generateShuffleOrder();
      }
    }
 else {
      setMode(MODE_NORMAL);
      return;
    }
  }
  if (Config.LOGV)   Log.v(TAG,""String_Node_Str"" + mCurrentPosition);
  loadNextImage((mCurrentPosition + 1) % mAllImages.getCount(),mSlideShowInterval,false);
}",0.0641399416909621
184694,"public ScrollHandler(Context context,AttributeSet attrs){
  super(context,attrs);
  mScrollerHelper=new Scroller(context);
}","public ScrollHandler(Context context,AttributeSet attrs){
  super(context,attrs);
  mScrollerHelper=new Scroller(context);
  mViewImage=(ViewImage)context;
}",0.8825622775800712
184695,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  int width=right - left;
  int x=0;
  for (  View v : new View[]{findViewById(R.id.image1),findViewById(R.id.image2),findViewById(R.id.image3)}) {
    v.layout(x,0,x + width,bottom);
    x+=(width + sPadding);
  }
  findViewById(R.id.padding1).layout(width,0,width + sPadding,bottom);
  findViewById(R.id.padding2).layout(width + sPadding + width,0,width + sPadding + width+ sPadding,bottom);
  if (changed) {
    if (mFirstLayoutCompletedCallback != null) {
      mFirstLayoutCompletedCallback.run();
    }
  }
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  int width=right - left;
  int x=0;
  for (  View v : new View[]{findViewById(R.id.image1),findViewById(R.id.image2),findViewById(R.id.image3)}) {
    v.layout(x,0,x + width,bottom);
    x+=(width + sPadding);
  }
  findViewById(R.id.padding1).layout(width,0,width + sPadding,bottom);
  findViewById(R.id.padding2).layout(width + sPadding + width,0,width + sPadding + width+ sPadding,bottom);
  if (changed) {
    mViewImage.mLayoutComplete=true;
    mViewImage.onLayoutChanged();
  }
}",0.8890770533446232
184696,"@Override public void onResume(){
  super.onResume();
  init(mSavedUri);
  int count=mAllImages.getCount();
  if (count == 0) {
    finish();
  }
 else   if (count <= mCurrentPosition) {
    mCurrentPosition=count - 1;
  }
  ImageManager.IImage image=mAllImages.getImageAt(mCurrentPosition);
  if (mGetter == null) {
    makeGetter();
  }
  mFirst=true;
  mScroller.setLayoutCompletedCallback(new Runnable(){
    public void run(){
      mLayoutComplete=true;
      setImage(mCurrentPosition);
    }
  }
);
  setImage(mCurrentPosition);
  setOrientation();
}","@Override public void onResume(){
  super.onResume();
  init(mSavedUri);
  int count=mAllImages.getCount();
  if (count == 0) {
    finish();
  }
 else   if (count <= mCurrentPosition) {
    mCurrentPosition=count - 1;
  }
  ImageManager.IImage image=mAllImages.getImageAt(mCurrentPosition);
  if (mGetter == null) {
    makeGetter();
  }
  mFirst=true;
  setImage(mCurrentPosition);
}",0.8165429480381761
184697,"private void setImage(int pos){
  if (!mLayoutComplete) {
    return;
  }
  final boolean left=(pos == mCurrentPosition - 1);
  final boolean right=(pos == mCurrentPosition + 1);
  mCurrentPosition=pos;
  ImageViewTouchBase current=mImageViews[1];
  current.mSuppMatrix.reset();
  current.setImageMatrix(current.getImageViewMatrix());
  if (false) {
    Log.v(TAG,""String_Node_Str"");
    for (    ImageViewTouchBase ivtb : mImageViews)     ivtb.dump();
  }
  if (!mFirst) {
    if (left) {
      mImageViews[2].copyFrom(mImageViews[1]);
      mImageViews[1].copyFrom(mImageViews[0]);
    }
 else     if (right) {
      mImageViews[0].copyFrom(mImageViews[1]);
      mImageViews[1].copyFrom(mImageViews[2]);
    }
  }
  if (false) {
    Log.v(TAG,""String_Node_Str"");
    for (    ImageViewTouchBase ivtb : mImageViews)     ivtb.dump();
  }
  for (  ImageViewTouchBase ivt : mImageViews) {
    ivt.mIsZooming=false;
  }
  int width=mImageViews[1].getWidth();
  int from;
  int to=width + sPadding;
  if (mFirst) {
    from=to;
    mFirst=false;
  }
 else {
    from=left ? (width + sPadding) + mScroller.getScrollX() : mScroller.getScrollX() - (width + sPadding);
  }
  if (sAnimateTransitions) {
    mScroller.scrollTo(from,0);
    animateScrollTo(to,0);
  }
 else {
    mScroller.scrollTo(to,0);
  }
  ImageGetterCallback cb=new ImageGetterCallback(){
    public void completed(    boolean wasCanceled){
      if (!mShowActionIcons) {
        mImageViews[1].setFocusableInTouchMode(true);
        mImageViews[1].requestFocus();
      }
    }
    public boolean wantsThumbnail(    int pos,    int offset){
      ImageViewTouchBase ivt=mImageViews[1 + offset];
      return ivt.mThumbBitmap == null;
    }
    public boolean wantsFullImage(    int pos,    int offset){
      ImageViewTouchBase ivt=mImageViews[1 + offset];
      if (ivt.mBitmapDisplayed != null && !ivt.mBitmapIsThumbnail) {
        return false;
      }
      if (offset != 0) {
        return false;
      }
      return true;
    }
    public int fullImageSizeToUse(    int pos,    int offset){
      final int imageViewSize=480;
      return imageViewSize;
    }
    public int[] loadOrder(){
      return sOrder_adjacents;
    }
    public void imageLoaded(    int pos,    int offset,    Bitmap bitmap,    boolean isThumb){
      ImageViewTouchBase ivt=mImageViews[1 + offset];
      if (offset == 0)       updateZoomButtonsEnabled();
      ivt.setImageBitmapResetBase(bitmap,isThumb,isThumb);
    }
  }
;
  if (mGetter != null) {
    mGetter.setPosition(pos,cb);
  }
  showOnScreenControls();
}","private void setImage(int pos){
  if (!mLayoutComplete)   return;
  final boolean left=(pos == mCurrentPosition - 1);
  final boolean right=(pos == mCurrentPosition + 1);
  mCurrentPosition=pos;
  ImageViewTouchBase current=mImageViews[1];
  current.mSuppMatrix.reset();
  current.setImageMatrix(current.getImageViewMatrix());
  if (false) {
    Log.v(TAG,""String_Node_Str"");
    for (    ImageViewTouchBase ivtb : mImageViews)     ivtb.dump();
  }
  if (!mFirst) {
    if (left) {
      mImageViews[2].copyFrom(mImageViews[1]);
      mImageViews[1].copyFrom(mImageViews[0]);
    }
 else     if (right) {
      mImageViews[0].copyFrom(mImageViews[1]);
      mImageViews[1].copyFrom(mImageViews[2]);
    }
  }
  if (false) {
    Log.v(TAG,""String_Node_Str"");
    for (    ImageViewTouchBase ivtb : mImageViews)     ivtb.dump();
  }
  for (  ImageViewTouchBase ivt : mImageViews) {
    ivt.mIsZooming=false;
  }
  int width=mImageViews[1].getWidth();
  int from;
  int to=width + sPadding;
  if (mFirst) {
    from=to;
    mFirst=false;
  }
 else {
    from=left ? (width + sPadding) + mScroller.getScrollX() : mScroller.getScrollX() - (width + sPadding);
  }
  if (sAnimateTransitions) {
    mScroller.scrollTo(from,0);
    animateScrollTo(to,0);
  }
 else {
    mScroller.scrollTo(to,0);
  }
  ImageGetterCallback cb=new ImageGetterCallback(){
    public void completed(    boolean wasCanceled){
      if (!mShowActionIcons) {
        mImageViews[1].setFocusableInTouchMode(true);
        mImageViews[1].requestFocus();
      }
    }
    public boolean wantsThumbnail(    int pos,    int offset){
      ImageViewTouchBase ivt=mImageViews[1 + offset];
      return ivt.mThumbBitmap == null;
    }
    public boolean wantsFullImage(    int pos,    int offset){
      ImageViewTouchBase ivt=mImageViews[1 + offset];
      if (ivt.mBitmapDisplayed != null && !ivt.mBitmapIsThumbnail) {
        return false;
      }
      if (offset != 0) {
        return false;
      }
      return true;
    }
    public int fullImageSizeToUse(    int pos,    int offset){
      final int imageViewSize=480;
      return imageViewSize;
    }
    public int[] loadOrder(){
      return sOrder_adjacents;
    }
    public void imageLoaded(    int pos,    int offset,    Bitmap bitmap,    boolean isThumb){
      ImageViewTouchBase ivt=mImageViews[1 + offset];
      if (offset == 0)       updateZoomButtonsEnabled();
      ivt.setImageBitmapResetBase(bitmap,isThumb,isThumb);
    }
  }
;
  if (mGetter != null) {
    mGetter.setPosition(pos,cb);
  }
  showOnScreenControls();
}",0.9949238578680204
184698,"public ImageGetter(){
  mGetterThread=new Thread(new Runnable(){
    private Runnable callback(    final int position,    final int offset,    final boolean isThumb,    final Bitmap bitmap){
      return new Runnable(){
        public void run(){
          if (!isCanceled() && position == mCurrentPosition) {
            mCB.imageLoaded(position,offset,bitmap,isThumb);
          }
 else {
            if (bitmap != null)             bitmap.recycle();
          }
        }
      }
;
    }
    private Runnable completedCallback(    final boolean wasCanceled){
      return new Runnable(){
        public void run(){
          mCB.completed(wasCanceled);
        }
      }
;
    }
    public void run(){
      int lastPosition=-1;
      while (!mDone) {
synchronized (ImageGetter.this) {
          mReady=true;
          ImageGetter.this.notify();
          if (mCurrentPosition == -1 || lastPosition == mCurrentPosition) {
            try {
              ImageGetter.this.wait();
            }
 catch (            InterruptedException ex) {
              continue;
            }
          }
          lastPosition=mCurrentPosition;
          mReady=false;
        }
        if (lastPosition != -1) {
          int imageCount=mAllImages.getCount();
          int[] order=mCB.loadOrder();
          for (int i=0; i < order.length; i++) {
            int offset=order[i];
            int imageNumber=lastPosition + offset;
            if (imageNumber >= 0 && imageNumber < imageCount) {
              ImageManager.IImage image=mAllImages.getImageAt(lastPosition + offset);
              if (image == null || isCanceled()) {
                break;
              }
              if (mCB.wantsThumbnail(lastPosition,offset)) {
                if (Config.LOGV)                 Log.v(TAG,""String_Node_Str"" + offset);
                Bitmap b=image.thumbBitmap();
                mHandler.postGetterCallback(callback(lastPosition,offset,true,b));
              }
            }
          }
          for (int i=0; i < order.length; i++) {
            int offset=order[i];
            int imageNumber=lastPosition + offset;
            if (imageNumber >= 0 && imageNumber < imageCount) {
              ImageManager.IImage image=mAllImages.getImageAt(lastPosition + offset);
              if (mCB.wantsFullImage(lastPosition,offset)) {
                if (Config.LOGV)                 Log.v(TAG,""String_Node_Str"" + offset);
                int sizeToUse=mCB.fullImageSizeToUse(lastPosition,offset);
                if (image != null && !isCanceled()) {
                  mLoad=image.fullSizeBitmap_cancelable(sizeToUse);
                }
                if (mLoad != null) {
                  long t1;
                  if (Config.LOGV)                   t1=System.currentTimeMillis();
                  Bitmap b=mLoad.get();
                  if (Config.LOGV && b != null) {
                    long t2=System.currentTimeMillis();
                    Log.v(TAG,""String_Node_Str"" + image.fullSizeImageUri() + ""String_Node_Str""+ sizeToUse+ ""String_Node_Str""+ (t2 - t1)+ ""String_Node_Str""+ b.getWidth()+ ""String_Node_Str""+ b.getHeight());
                  }
                  mLoad=null;
                  if (b != null) {
                    if (isCanceled()) {
                      b.recycle();
                    }
 else {
                      mHandler.postGetterCallback(callback(lastPosition,offset,false,b));
                    }
                  }
                }
              }
            }
          }
          mHandler.postGetterCallback(completedCallback(isCanceled()));
        }
      }
    }
  }
);
  mGetterThread.setName(""String_Node_Str"");
  mGetterThread.start();
}","public ImageGetter(){
  mGetterThread=new Thread(new Runnable(){
    private Runnable callback(    final int position,    final int offset,    final boolean isThumb,    final Bitmap bitmap){
      return new Runnable(){
        public void run(){
          if (!isCanceled() && position == mCurrentPosition) {
            mCB.imageLoaded(position,offset,bitmap,isThumb);
          }
 else           if (bitmap != null) {
            bitmap.recycle();
          }
        }
      }
;
    }
    private Runnable completedCallback(    final boolean wasCanceled){
      return new Runnable(){
        public void run(){
          mCB.completed(wasCanceled);
        }
      }
;
    }
    public void run(){
      int lastPosition=-1;
      while (!mDone) {
synchronized (ImageGetter.this) {
          mReady=true;
          ImageGetter.this.notify();
          if (mCurrentPosition == -1 || lastPosition == mCurrentPosition) {
            try {
              ImageGetter.this.wait();
            }
 catch (            InterruptedException ex) {
              continue;
            }
          }
          lastPosition=mCurrentPosition;
          mReady=false;
        }
        if (lastPosition != -1) {
          int imageCount=mAllImages.getCount();
          int[] order=mCB.loadOrder();
          for (int i=0; i < order.length; i++) {
            int offset=order[i];
            int imageNumber=lastPosition + offset;
            if (imageNumber >= 0 && imageNumber < imageCount) {
              ImageManager.IImage image=mAllImages.getImageAt(lastPosition + offset);
              if (image == null || isCanceled()) {
                break;
              }
              if (mCB.wantsThumbnail(lastPosition,offset)) {
                if (Config.LOGV)                 Log.v(TAG,""String_Node_Str"" + offset);
                Bitmap b=image.thumbBitmap();
                mHandler.postGetterCallback(callback(lastPosition,offset,true,b));
              }
            }
          }
          for (int i=0; i < order.length; i++) {
            int offset=order[i];
            int imageNumber=lastPosition + offset;
            if (imageNumber >= 0 && imageNumber < imageCount) {
              ImageManager.IImage image=mAllImages.getImageAt(lastPosition + offset);
              if (mCB.wantsFullImage(lastPosition,offset)) {
                if (Config.LOGV)                 Log.v(TAG,""String_Node_Str"" + offset);
                int sizeToUse=mCB.fullImageSizeToUse(lastPosition,offset);
                if (image != null && !isCanceled()) {
                  mLoad=image.fullSizeBitmap_cancelable(sizeToUse);
                }
                if (mLoad != null) {
                  long t1;
                  if (Config.LOGV)                   t1=System.currentTimeMillis();
                  Bitmap b=mLoad.get();
                  if (Config.LOGV && b != null) {
                    long t2=System.currentTimeMillis();
                    Log.v(TAG,""String_Node_Str"" + image.fullSizeImageUri() + ""String_Node_Str""+ sizeToUse+ ""String_Node_Str""+ (t2 - t1)+ ""String_Node_Str""+ b.getWidth()+ ""String_Node_Str""+ b.getHeight());
                  }
                  mLoad=null;
                  if (b != null) {
                    if (isCanceled()) {
                      b.recycle();
                    }
 else {
                      mHandler.postGetterCallback(callback(lastPosition,offset,false,b));
                    }
                  }
                }
              }
            }
          }
          mHandler.postGetterCallback(completedCallback(isCanceled()));
        }
      }
    }
  }
);
  mGetterThread.setName(""String_Node_Str"");
  mGetterThread.start();
}",0.9915806626833242
184699,"@Override public void onCreate(Bundle instanceState){
  super.onCreate(instanceState);
  Intent intent=getIntent();
  mCameraReviewMode=intent.getBooleanExtra(""String_Node_Str"",false);
  mFullScreenInNormalMode=intent.getBooleanExtra(MediaStore.EXTRA_FULL_SCREEN,true);
  mShowActionIcons=intent.getBooleanExtra(MediaStore.EXTRA_SHOW_ACTION_ICONS,false);
  mPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  mCurrentOrientation=getResources().getConfiguration().orientation;
  setDefaultKeyMode(DEFAULT_KEYS_SHORTCUT);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.viewimage);
  mImageViews[0]=(ImageViewTouch)findViewById(R.id.image1);
  mImageViews[1]=(ImageViewTouch)findViewById(R.id.image2);
  mImageViews[2]=(ImageViewTouch)findViewById(R.id.image3);
  for (  ImageViewTouch v : mImageViews) {
    v.setEnableTrackballScroll(!mShowActionIcons);
  }
  mScroller=(ScrollHandler)findViewById(R.id.scroller);
  makeGetter();
  mAnimationIndex=-1;
  mSlideShowInAnimation=new Animation[]{makeInAnimation(R.anim.transition_in),makeInAnimation(R.anim.slide_in),makeInAnimation(R.anim.slide_in_vertical)};
  mSlideShowOutAnimation=new Animation[]{makeOutAnimation(R.anim.transition_out),makeOutAnimation(R.anim.slide_out),makeOutAnimation(R.anim.slide_out_vertical)};
  mSlideShowImageViews[0]=(ImageViewTouch)findViewById(R.id.image1_slideShow);
  mSlideShowImageViews[1]=(ImageViewTouch)findViewById(R.id.image2_slideShow);
  for (  ImageViewTouch v : mSlideShowImageViews) {
    v.setImageBitmapResetBase(null,true,true);
    v.setVisibility(View.INVISIBLE);
    v.setEnableTrackballScroll(!mShowActionIcons);
  }
  mActionIconPanel=findViewById(R.id.action_icon_panel);
{
    int[] pickIds={R.id.attach,R.id.cancel};
    int[] normalIds={R.id.gallery,R.id.setas,R.id.share,R.id.discard};
    int[] hideIds=pickIds;
    int[] connectIds=normalIds;
    if (isPickIntent()) {
      hideIds=normalIds;
      connectIds=pickIds;
    }
    for (    int id : hideIds) {
      mActionIconPanel.findViewById(id).setVisibility(View.GONE);
    }
    for (    int id : connectIds) {
      View view=mActionIconPanel.findViewById(id);
      view.setOnClickListener(this);
      Animation animation=new AlphaAnimation(0F,1F);
      animation.setDuration(500);
      view.setAnimation(animation);
    }
  }
  mShutterButton=findViewById(R.id.shutter_button);
  mShutterButton.setOnClickListener(this);
  Uri uri=getIntent().getData();
  if (Config.LOGV)   Log.v(TAG,""String_Node_Str"" + uri);
  if (instanceState != null) {
    if (instanceState.containsKey(""String_Node_Str"")) {
      uri=Uri.parse(instanceState.getString(""String_Node_Str""));
    }
  }
  if (uri == null) {
    finish();
    return;
  }
  init(uri);
  Bundle b=getIntent().getExtras();
  boolean slideShow=b != null ? b.getBoolean(""String_Node_Str"",false) : false;
  if (slideShow) {
    setMode(MODE_SLIDESHOW);
    loadNextImage(mCurrentPosition,0,true);
  }
 else {
    if (mFullScreenInNormalMode) {
      getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }
    if (mShowActionIcons) {
      mActionIconPanel.setVisibility(View.VISIBLE);
      mShutterButton.setVisibility(View.VISIBLE);
    }
  }
  setupZoomButtonController(findViewById(R.id.rootLayout));
  setupDismissOnScreenControlRunnable();
  mNextImageView=findViewById(R.id.next_image);
  mPrevImageView=findViewById(R.id.prev_image);
  mNextImageView.setOnClickListener(this);
  mPrevImageView.setOnClickListener(this);
  if (mShowActionIcons) {
    mNextImageView.setFocusable(true);
    mPrevImageView.setFocusable(true);
  }
  setOrientation();
}","@Override public void onCreate(Bundle instanceState){
  super.onCreate(instanceState);
  Intent intent=getIntent();
  mCameraReviewMode=intent.getBooleanExtra(""String_Node_Str"",false);
  mFullScreenInNormalMode=intent.getBooleanExtra(MediaStore.EXTRA_FULL_SCREEN,true);
  mShowActionIcons=intent.getBooleanExtra(MediaStore.EXTRA_SHOW_ACTION_ICONS,false);
  setRequestedOrientation();
  mPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  setDefaultKeyMode(DEFAULT_KEYS_SHORTCUT);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.viewimage);
  mImageViews[0]=(ImageViewTouch)findViewById(R.id.image1);
  mImageViews[1]=(ImageViewTouch)findViewById(R.id.image2);
  mImageViews[2]=(ImageViewTouch)findViewById(R.id.image3);
  for (  ImageViewTouch v : mImageViews) {
    v.setEnableTrackballScroll(!mShowActionIcons);
  }
  mScroller=(ScrollHandler)findViewById(R.id.scroller);
  makeGetter();
  mAnimationIndex=-1;
  mSlideShowInAnimation=new Animation[]{makeInAnimation(R.anim.transition_in),makeInAnimation(R.anim.slide_in),makeInAnimation(R.anim.slide_in_vertical)};
  mSlideShowOutAnimation=new Animation[]{makeOutAnimation(R.anim.transition_out),makeOutAnimation(R.anim.slide_out),makeOutAnimation(R.anim.slide_out_vertical)};
  mSlideShowImageViews[0]=(ImageViewTouch)findViewById(R.id.image1_slideShow);
  mSlideShowImageViews[1]=(ImageViewTouch)findViewById(R.id.image2_slideShow);
  for (  ImageViewTouch v : mSlideShowImageViews) {
    v.setImageBitmapResetBase(null,true,true);
    v.setVisibility(View.INVISIBLE);
    v.setEnableTrackballScroll(!mShowActionIcons);
  }
  mActionIconPanel=findViewById(R.id.action_icon_panel);
{
    int[] pickIds={R.id.attach,R.id.cancel};
    int[] normalIds={R.id.gallery,R.id.setas,R.id.share,R.id.discard};
    int[] hideIds=pickIds;
    int[] connectIds=normalIds;
    if (isPickIntent()) {
      hideIds=normalIds;
      connectIds=pickIds;
    }
    for (    int id : hideIds) {
      mActionIconPanel.findViewById(id).setVisibility(View.GONE);
    }
    for (    int id : connectIds) {
      View view=mActionIconPanel.findViewById(id);
      view.setOnClickListener(this);
      Animation animation=new AlphaAnimation(0F,1F);
      animation.setDuration(500);
      view.setAnimation(animation);
    }
  }
  mShutterButton=findViewById(R.id.shutter_button);
  mShutterButton.setOnClickListener(this);
  Uri uri=getIntent().getData();
  if (Config.LOGV)   Log.v(TAG,""String_Node_Str"" + uri);
  if (instanceState != null) {
    if (instanceState.containsKey(""String_Node_Str"")) {
      uri=Uri.parse(instanceState.getString(""String_Node_Str""));
    }
  }
  if (uri == null) {
    finish();
    return;
  }
  init(uri);
  Bundle b=getIntent().getExtras();
  boolean slideShow=b != null ? b.getBoolean(""String_Node_Str"",false) : false;
  if (slideShow) {
    setMode(MODE_SLIDESHOW);
    loadNextImage(mCurrentPosition,0,true);
  }
 else {
    if (mFullScreenInNormalMode) {
      getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }
    if (mShowActionIcons) {
      mActionIconPanel.setVisibility(View.VISIBLE);
      mShutterButton.setVisibility(View.VISIBLE);
    }
  }
  setupZoomButtonController(findViewById(R.id.rootLayout));
  setupDismissOnScreenControlRunnable();
  mNextImageView=findViewById(R.id.next_image);
  mPrevImageView=findViewById(R.id.prev_image);
  mNextImageView.setOnClickListener(this);
  mPrevImageView.setOnClickListener(this);
  if (mShowActionIcons) {
    mNextImageView.setFocusable(true);
    mPrevImageView.setFocusable(true);
  }
}",0.9836065573770492
184700,"private Runnable callback(final int position,final int offset,final boolean isThumb,final Bitmap bitmap){
  return new Runnable(){
    public void run(){
      if (!isCanceled() && position == mCurrentPosition) {
        mCB.imageLoaded(position,offset,bitmap,isThumb);
      }
 else {
        if (bitmap != null)         bitmap.recycle();
      }
    }
  }
;
}","private Runnable callback(final int position,final int offset,final boolean isThumb,final Bitmap bitmap){
  return new Runnable(){
    public void run(){
      if (!isCanceled() && position == mCurrentPosition) {
        mCB.imageLoaded(position,offset,bitmap,isThumb);
      }
 else       if (bitmap != null) {
        bitmap.recycle();
      }
    }
  }
;
}",0.9916666666666668
184701,"NotificationMgr(Context context){
  mContext=context;
  mSettings=CallFeaturesSetting.getInstance(PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext()));
  mNotificationMgr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  mStatusBar=(StatusBarManager)context.getSystemService(Context.STATUS_BAR_SERVICE);
  PhoneApp app=PhoneApp.getInstance();
  mPhone=app.phone;
}","NotificationMgr(Context context){
  mContext=context;
  mSettings=CallFeaturesSetting.getInstance(PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext()));
  mNotificationMgr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  mStatusBar=(StatusBarManager)context.getSystemService(Context.STATUS_BAR_SERVICE);
  PhoneApp app=PhoneApp.getInstance();
  mPhone=app.phone;
  IntentFilter filter=new IntentFilter();
  filter.addAction(CLEAR_MISSED_CALLS);
  context.registerReceiver(mClearReceiver,filter);
}",0.8633093525179856
184702,"/** 
 * Displays a notification about a missed call.
 * @param nameOrNumber either the contact name, or the phone number if no contact
 * @param label the label of the number if nameOrNumber is a name, null if it is a number
 */
void notifyMissedCall(String name,String number,String label,long date){
  int titleResId;
  String expandedText, callName;
  mNumberMissedCalls++;
  if (name != null && TextUtils.isGraphic(name)) {
    callName=name;
  }
 else   if (!TextUtils.isEmpty(number)) {
    callName=number;
  }
 else {
    callName=mContext.getString(R.string.unknown);
  }
  if (mNumberMissedCalls == 1) {
    titleResId=R.string.notification_missedCallTitle;
    expandedText=callName;
  }
 else {
    titleResId=R.string.notification_missedCallsTitle;
    expandedText=mContext.getString(R.string.notification_missedCallsMsg,mNumberMissedCalls);
  }
  final Intent intent=PhoneApp.createCallLogIntent();
  Notification note=new Notification(mContext,android.R.drawable.stat_notify_missed_call,mContext.getString(R.string.notification_missedCallTicker,callName),date,mContext.getText(titleResId),expandedText,intent);
  if (mSettings.mLedNotify)   configureLedNotification(note);
  mNotificationMgr.notify(MISSED_CALL_NOTIFICATION,note);
}","/** 
 * Displays a notification about a missed call.
 * @param nameOrNumber either the contact name, or the phone number if no contact
 * @param label the label of the number if nameOrNumber is a name, null if it is a number
 */
void notifyMissedCall(String name,String number,String label,long date){
  int titleResId;
  String expandedText, callName;
  mNumberMissedCalls++;
  if (name != null && TextUtils.isGraphic(name)) {
    callName=name;
  }
 else   if (!TextUtils.isEmpty(number)) {
    callName=number;
  }
 else {
    callName=mContext.getString(R.string.unknown);
  }
  if (mNumberMissedCalls == 1) {
    titleResId=R.string.notification_missedCallTitle;
    expandedText=callName;
  }
 else {
    titleResId=R.string.notification_missedCallsTitle;
    expandedText=mContext.getString(R.string.notification_missedCallsMsg,mNumberMissedCalls);
  }
  final Intent intent=PhoneApp.createCallLogIntent();
  Notification note=new Notification(mContext,android.R.drawable.stat_notify_missed_call,mContext.getString(R.string.notification_missedCallTicker,callName),date,mContext.getText(titleResId),expandedText,intent);
  if (mSettings.mLedNotify)   configureLedNotification(note);
  note.deleteIntent=PendingIntent.getBroadcast(mContext,-1,new Intent(CLEAR_MISSED_CALLS),0);
  mNotificationMgr.notify(MISSED_CALL_NOTIFICATION,note);
}",0.9451737451737452
184703,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (DBG)   log(""String_Node_Str"");
  mPhone=PhoneFactory.getDefaultPhone();
  addPreferencesFromResource(R.xml.call_feature_setting);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)findPreference(BUTTON_VOICEMAIL_KEY);
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mButtonDTMF=(ListPreference)findPreference(BUTTON_DTMF_KEY);
  mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  mButtonHAC=(CheckBoxPreference)findPreference(BUTTON_HAC_KEY);
  mButtonTTY=(ListPreference)findPreference(BUTTON_TTY_KEY);
  mVoicemailProviders=(ListPreference)findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
  if (mVoicemailProviders != null) {
    mVoicemailProviders.setOnPreferenceChangeListener(this);
    mVoicemailSettings=(PreferenceScreen)findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
    initVoiceMailProviders();
  }
  if (mButtonDTMF != null) {
    if (getResources().getBoolean(R.bool.dtmf_type_enabled)) {
      mButtonDTMF.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonDTMF);
      mButtonDTMF=null;
    }
  }
  if (mButtonAutoRetry != null) {
    if (getResources().getBoolean(R.bool.auto_retry_enabled)) {
      mButtonAutoRetry.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonAutoRetry);
      mButtonAutoRetry=null;
    }
  }
  if (mButtonHAC != null) {
    if (getResources().getBoolean(R.bool.hac_enabled)) {
      mButtonHAC.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonHAC);
      mButtonHAC=null;
    }
  }
  if (mButtonTTY != null) {
    if (getResources().getBoolean(R.bool.tty_enabled)) {
      mButtonTTY.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonTTY);
      mButtonTTY=null;
    }
  }
  if (!getResources().getBoolean(R.bool.world_phone)) {
    prefSet.removePreference(prefSet.findPreference(BUTTON_CDMA_OPTIONS));
    prefSet.removePreference(prefSet.findPreference(BUTTON_GSM_UMTS_OPTIONS));
    int phoneType=mPhone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      prefSet.removePreference(prefSet.findPreference(BUTTON_FDN_KEY));
      addPreferencesFromResource(R.xml.cdma_call_options);
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      addPreferencesFromResource(R.xml.gsm_umts_call_options);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + phoneType);
    }
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (icicle == null) {
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL) && mVoicemailProviders != null) {
      if (mVMProvidersData.size() > 1) {
        simulatePreferenceClick(mVoicemailProviders);
      }
 else {
        onPreferenceChange(mVoicemailProviders,DEFAULT_VM_PROVIDER_KEY);
        mVoicemailProviders.setValue(DEFAULT_VM_PROVIDER_KEY);
      }
    }
  }
  updateVoiceNumberField();
  mVMProviderSettingsForced=false;
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (DBG)   log(""String_Node_Str"");
  mPhone=PhoneFactory.getDefaultPhone();
  addPreferencesFromResource(R.xml.call_feature_setting);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)findPreference(BUTTON_VOICEMAIL_KEY);
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mButtonDTMF=(ListPreference)findPreference(BUTTON_DTMF_KEY);
  mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  mButtonHAC=(CheckBoxPreference)findPreference(BUTTON_HAC_KEY);
  mButtonTTY=(ListPreference)findPreference(BUTTON_TTY_KEY);
  mVoicemailProviders=(ListPreference)findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
  if (mVoicemailProviders != null) {
    mVoicemailProviders.setOnPreferenceChangeListener(this);
    mVoicemailSettings=(PreferenceScreen)findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
    initVoiceMailProviders();
  }
  if (mButtonDTMF != null) {
    if (getResources().getBoolean(R.bool.dtmf_type_enabled)) {
      mButtonDTMF.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonDTMF);
      mButtonDTMF=null;
    }
  }
  if (mButtonAutoRetry != null) {
    if (getResources().getBoolean(R.bool.auto_retry_enabled)) {
      mButtonAutoRetry.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonAutoRetry);
      mButtonAutoRetry=null;
    }
  }
  if (mButtonHAC != null) {
    if (getResources().getBoolean(R.bool.hac_enabled)) {
      mButtonHAC.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonHAC);
      mButtonHAC=null;
    }
  }
  if (mButtonTTY != null) {
    if (getResources().getBoolean(R.bool.tty_enabled)) {
      mButtonTTY.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonTTY);
      mButtonTTY=null;
    }
  }
  if (!getResources().getBoolean(R.bool.world_phone)) {
    Preference options=prefSet.findPreference(BUTTON_CDMA_OPTIONS);
    if (options != null)     prefSet.removePreference(options);
    options=prefSet.findPreference(BUTTON_GSM_UMTS_OPTIONS);
    if (options != null)     prefSet.removePreference(options);
    int phoneType=mPhone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      Preference fdnButton=prefSet.findPreference(BUTTON_FDN_KEY);
      if (fdnButton != null)       prefSet.removePreference(fdnButton);
      addPreferencesFromResource(R.xml.cdma_call_options);
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      addPreferencesFromResource(R.xml.gsm_umts_call_options);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + phoneType);
    }
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (icicle == null) {
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL) && mVoicemailProviders != null) {
      if (mVMProvidersData.size() > 1) {
        simulatePreferenceClick(mVoicemailProviders);
      }
 else {
        onPreferenceChange(mVoicemailProviders,DEFAULT_VM_PROVIDER_KEY);
        mVoicemailProviders.setValue(DEFAULT_VM_PROVIDER_KEY);
      }
    }
  }
  updateVoiceNumberField();
  mVMProviderSettingsForced=false;
}",0.9602368866328256
184704,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (DBG)   log(""String_Node_Str"");
  mPhone=PhoneFactory.getDefaultPhone();
  addPreferencesFromResource(R.xml.call_feature_setting);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)findPreference(BUTTON_VOICEMAIL_KEY);
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mButtonDTMF=(ListPreference)findPreference(BUTTON_DTMF_KEY);
  mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  mButtonHAC=(CheckBoxPreference)findPreference(BUTTON_HAC_KEY);
  mButtonTTY=(ListPreference)findPreference(BUTTON_TTY_KEY);
  mVoicemailProviders=(ListPreference)findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
  if (mVoicemailProviders != null) {
    mVoicemailProviders.setOnPreferenceChangeListener(this);
    mVoicemailSettings=(PreferenceScreen)findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
    initVoiceMailProviders();
  }
  if (mButtonDTMF != null) {
    if (getResources().getBoolean(R.bool.dtmf_type_enabled)) {
      mButtonDTMF.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonDTMF);
      mButtonDTMF=null;
    }
  }
  if (mButtonAutoRetry != null) {
    if (getResources().getBoolean(R.bool.auto_retry_enabled)) {
      mButtonAutoRetry.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonAutoRetry);
      mButtonAutoRetry=null;
    }
  }
  if (mButtonHAC != null) {
    if (getResources().getBoolean(R.bool.hac_enabled)) {
      mButtonHAC.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonHAC);
      mButtonHAC=null;
    }
  }
  if (mButtonTTY != null) {
    if (getResources().getBoolean(R.bool.tty_enabled)) {
      mButtonTTY.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonTTY);
      mButtonTTY=null;
    }
  }
  if (!getResources().getBoolean(R.bool.world_phone)) {
    prefSet.removePreference(prefSet.findPreference(BUTTON_CDMA_OPTIONS));
    prefSet.removePreference(prefSet.findPreference(BUTTON_GSM_UMTS_OPTIONS));
    int phoneType=mPhone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      prefSet.removePreference(prefSet.findPreference(BUTTON_FDN_KEY));
      addPreferencesFromResource(R.xml.cdma_call_options);
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      addPreferencesFromResource(R.xml.gsm_umts_call_options);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + phoneType);
    }
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (icicle == null) {
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL) && mVoicemailProviders != null) {
      if (mVMProvidersData.size() > 1) {
        simulatePreferenceClick(mVoicemailProviders);
      }
 else {
        onPreferenceChange(mVoicemailProviders,DEFAULT_VM_PROVIDER_KEY);
        mVoicemailProviders.setValue(DEFAULT_VM_PROVIDER_KEY);
      }
    }
  }
  updateVoiceNumberField();
  mVMProviderSettingsForced=false;
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (DBG)   log(""String_Node_Str"");
  mPhone=PhoneFactory.getDefaultPhone();
  addPreferencesFromResource(R.xml.call_feature_setting);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)findPreference(BUTTON_VOICEMAIL_KEY);
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mButtonDTMF=(ListPreference)findPreference(BUTTON_DTMF_KEY);
  mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  mButtonHAC=(CheckBoxPreference)findPreference(BUTTON_HAC_KEY);
  mButtonTTY=(ListPreference)findPreference(BUTTON_TTY_KEY);
  mVoicemailProviders=(ListPreference)findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
  if (mVoicemailProviders != null) {
    mVoicemailProviders.setOnPreferenceChangeListener(this);
    mVoicemailSettings=(PreferenceScreen)findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
    initVoiceMailProviders();
  }
  if (mButtonDTMF != null) {
    if (getResources().getBoolean(R.bool.dtmf_type_enabled)) {
      mButtonDTMF.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonDTMF);
      mButtonDTMF=null;
    }
  }
  if (mButtonAutoRetry != null) {
    if (getResources().getBoolean(R.bool.auto_retry_enabled)) {
      mButtonAutoRetry.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonAutoRetry);
      mButtonAutoRetry=null;
    }
  }
  if (mButtonHAC != null) {
    if (getResources().getBoolean(R.bool.hac_enabled)) {
      mButtonHAC.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonHAC);
      mButtonHAC=null;
    }
  }
  if (mButtonTTY != null) {
    if (getResources().getBoolean(R.bool.tty_enabled)) {
      mButtonTTY.setOnPreferenceChangeListener(this);
    }
 else {
      prefSet.removePreference(mButtonTTY);
      mButtonTTY=null;
    }
  }
  if (!getResources().getBoolean(R.bool.world_phone)) {
    Preference options=prefSet.findPreference(BUTTON_CDMA_OPTIONS);
    if (options != null)     prefSet.removePreference(options);
    options=prefSet.findPreference(BUTTON_GSM_UMTS_OPTIONS);
    if (options != null)     prefSet.removePreference(options);
    int phoneType=mPhone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      Preference fdnButton=prefSet.findPreference(BUTTON_FDN_KEY);
      if (fdnButton != null)       prefSet.removePreference(fdnButton);
      addPreferencesFromResource(R.xml.cdma_call_options);
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      addPreferencesFromResource(R.xml.gsm_umts_call_options);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + phoneType);
    }
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (icicle == null) {
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL) && mVoicemailProviders != null) {
      if (mVMProvidersData.size() > 1) {
        simulatePreferenceClick(mVoicemailProviders);
      }
 else {
        onPreferenceChange(mVoicemailProviders,DEFAULT_VM_PROVIDER_KEY);
        mVoicemailProviders.setValue(DEFAULT_VM_PROVIDER_KEY);
      }
    }
  }
  updateVoiceNumberField();
  mVMProviderSettingsForced=false;
}",0.9602368866328256
184705,"void handleForwardingSettingsReadResult(AsyncResult ar,int idx){
  if (DBG)   Log.d(LOG_TAG,""String_Node_Str"" + idx);
  Throwable error=null;
  if (ar.exception != null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + ar.exception.getMessage());
    error=ar.exception;
  }
  if (ar.userObj instanceof Throwable) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + ((Throwable)ar.userObj).getMessage());
    error=(Throwable)ar.userObj;
  }
  if (mForwardingReadResults == null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + idx);
    return;
  }
  if (error != null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + idx);
    mForwardingReadResults=null;
    dismissDialogSafely(VOICEMAIL_FWD_READING_DIALOG);
    showVMDialog(MSG_FW_GET_EXCEPTION);
    return;
  }
  final CallForwardInfo cfInfoArray[]=(CallForwardInfo[])ar.result;
  CallForwardInfo fi=null;
  for (int i=0; i < cfInfoArray.length; i++) {
    if ((cfInfoArray[i].serviceClass & CommandsInterface.SERVICE_CLASS_VOICE) != 0) {
      fi=cfInfoArray[i];
      break;
    }
  }
  if (fi == null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + idx);
    fi=new CallForwardInfo();
    fi.status=0;
    fi.reason=FORWARDING_SETTINGS_REASONS[idx];
    fi.serviceClass=CommandsInterface.SERVICE_CLASS_VOICE;
  }
 else {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + fi.toString() + ""String_Node_Str""+ idx);
  }
  mForwardingReadResults[idx]=fi;
  boolean done=true;
  for (int i=0; i < mForwardingReadResults.length; i++) {
    if (mForwardingReadResults[i] == null) {
      done=false;
      break;
    }
  }
  if (done) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"");
    dismissDialogSafely(VOICEMAIL_FWD_READING_DIALOG);
    if (mReadingSettingsForDefaultProvider) {
      maybeSaveSettingsForVoicemailProvider(DEFAULT_VM_PROVIDER_KEY,new VoiceMailProviderSettings(this.mOldVmNumber,mForwardingReadResults));
      mReadingSettingsForDefaultProvider=false;
    }
    saveVoiceMailAndForwardingNumberStage2();
  }
 else {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"");
  }
}","void handleForwardingSettingsReadResult(AsyncResult ar,int idx){
  if (DBG)   Log.d(LOG_TAG,""String_Node_Str"" + idx);
  Throwable error=null;
  if (ar.exception != null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + ar.exception.getMessage());
    error=ar.exception;
  }
  if (ar.userObj instanceof Throwable) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + ((Throwable)ar.userObj).getMessage());
    error=(Throwable)ar.userObj;
  }
  if (mForwardingReadResults == null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + idx);
    return;
  }
  if (error != null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + idx);
    mForwardingReadResults=null;
    dismissDialogSafely(VOICEMAIL_FWD_READING_DIALOG);
    showVMDialog(MSG_FW_GET_EXCEPTION);
    return;
  }
  final CallForwardInfo cfInfoArray[]=(CallForwardInfo[])ar.result;
  CallForwardInfo fi=null;
  for (int i=0; i < cfInfoArray.length; i++) {
    if ((cfInfoArray[i].serviceClass & CommandsInterface.SERVICE_CLASS_VOICE) != 0) {
      fi=cfInfoArray[i];
      break;
    }
  }
  if (fi == null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + idx);
    fi=new CallForwardInfo();
    fi.status=0;
    fi.reason=FORWARDING_SETTINGS_REASONS[idx];
    fi.serviceClass=CommandsInterface.SERVICE_CLASS_VOICE;
  }
 else {
    if (fi.number == null || fi.number.length() == 0) {
      fi.status=0;
    }
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + fi.toString() + ""String_Node_Str""+ idx);
  }
  mForwardingReadResults[idx]=fi;
  boolean done=true;
  for (int i=0; i < mForwardingReadResults.length; i++) {
    if (mForwardingReadResults[i] == null) {
      done=false;
      break;
    }
  }
  if (done) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"");
    dismissDialogSafely(VOICEMAIL_FWD_READING_DIALOG);
    if (mReadingSettingsForDefaultProvider) {
      maybeSaveSettingsForVoicemailProvider(DEFAULT_VM_PROVIDER_KEY,new VoiceMailProviderSettings(this.mOldVmNumber,mForwardingReadResults));
      mReadingSettingsForDefaultProvider=false;
    }
    saveVoiceMailAndForwardingNumberStage2();
  }
 else {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"");
  }
}",0.980846535824072
184706,"/** 
 * Implemented to support onPreferenceChangeListener to look for preference changes.
 * @param preference is the preference to be changed
 * @param objValue should be the value of the selection, NOT its localizeddisplay value.
 */
public boolean onPreferenceChange(Preference preference,Object objValue){
  if (preference == mButtonDTMF) {
    int index=mButtonDTMF.findIndexOfValue((String)objValue);
    Settings.System.putInt(mPhone.getContext().getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,index);
  }
 else   if (preference == mButtonTTY) {
    handleTTYChange(preference,objValue);
  }
 else   if (preference == mVoicemailProviders) {
    final String currentProviderKey=getCurrentVoicemailProviderKey();
    final String newProviderKey=(String)objValue;
    if (DBG)     log(""String_Node_Str"" + newProviderKey + ""String_Node_Str""+ mPreviousVMProviderKey);
    if (mPreviousVMProviderKey.equals(newProviderKey)) {
      if (DBG)       log(""String_Node_Str"");
      return true;
    }
    updateVMPreferenceWidgets(newProviderKey);
    mPreviousVMProviderKey=currentProviderKey;
    updateVMPreferenceWidgets(newProviderKey);
    final VoiceMailProviderSettings newProviderSettings=loadSettingsForVoiceMailProvider(newProviderKey);
    if (newProviderSettings == null) {
      if (DBG)       log(""String_Node_Str"");
      mVMProviderSettingsForced=true;
      simulatePreferenceClick(mVoicemailSettings);
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      mChangingVMorFwdDueToProviderChange=true;
      saveVoiceMailAndForwardingNumber(newProviderKey,newProviderSettings);
    }
  }
  return true;
}","/** 
 * Implemented to support onPreferenceChangeListener to look for preference changes.
 * @param preference is the preference to be changed
 * @param objValue should be the value of the selection, NOT its localizeddisplay value.
 */
public boolean onPreferenceChange(Preference preference,Object objValue){
  if (preference == mButtonDTMF) {
    int index=mButtonDTMF.findIndexOfValue((String)objValue);
    Settings.System.putInt(mPhone.getContext().getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,index);
  }
 else   if (preference == mButtonTTY) {
    handleTTYChange(preference,objValue);
  }
 else   if (preference == mVoicemailProviders) {
    final String currentProviderKey=getCurrentVoicemailProviderKey();
    final String newProviderKey=(String)objValue;
    if (DBG)     log(""String_Node_Str"" + newProviderKey + ""String_Node_Str""+ mPreviousVMProviderKey);
    if (mPreviousVMProviderKey.equals(newProviderKey)) {
      if (DBG)       log(""String_Node_Str"");
      return true;
    }
    updateVMPreferenceWidgets(newProviderKey);
    mPreviousVMProviderKey=currentProviderKey;
    final VoiceMailProviderSettings newProviderSettings=loadSettingsForVoiceMailProvider(newProviderKey);
    if (newProviderSettings == null) {
      if (DBG)       log(""String_Node_Str"");
      mVMProviderSettingsForced=true;
      simulatePreferenceClick(mVoicemailSettings);
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      mChangingVMorFwdDueToProviderChange=true;
      saveVoiceMailAndForwardingNumber(newProviderKey,newProviderSettings);
    }
  }
  return true;
}",0.9854983029929034
184707,"@Override public void handleMessage(Message msg){
  AsyncResult result=(AsyncResult)msg.obj;
switch (msg.what) {
case EVENT_VOICEMAIL_CHANGED:
    mVoicemailChangeResult=result;
  if (DBG)   log(""String_Node_Str"");
break;
case EVENT_FORWARDING_CHANGED:
mForwardingChangeResults.put(msg.arg1,result);
if (result.exception != null) {
if (DBG) log(""String_Node_Str"" + msg.arg1 + ""String_Node_Str""+ result.exception.getMessage());
}
 else {
if (DBG) log(""String_Node_Str"" + msg.arg1);
}
if (DBG) log(""String_Node_Str"");
break;
default :
}
final boolean done=(!mVMChangeCompletedSuccesfully || mVoicemailChangeResult != null) && (!mFwdChangesRequireRollback || checkForwardingCompleted());
if (done) {
if (DBG) log(""String_Node_Str"");
dismissDialog(VOICEMAIL_REVERTING_DIALOG);
onRevertDone();
}
}","@Override public void handleMessage(Message msg){
  AsyncResult result=(AsyncResult)msg.obj;
switch (msg.what) {
case EVENT_VOICEMAIL_CHANGED:
    mVoicemailChangeResult=result;
  if (DBG)   log(""String_Node_Str"");
break;
case EVENT_FORWARDING_CHANGED:
mForwardingChangeResults.put(msg.arg1,result);
if (result.exception != null) {
if (DBG) log(""String_Node_Str"" + msg.arg1 + ""String_Node_Str""+ result.exception.getMessage());
}
 else {
if (DBG) log(""String_Node_Str"" + msg.arg1);
}
if (DBG) log(""String_Node_Str"");
break;
default :
}
final boolean done=(!mVMChangeCompletedSuccesfully || mVoicemailChangeResult != null) && (!mFwdChangesRequireRollback || checkForwardingCompleted());
if (done) {
if (DBG) log(""String_Node_Str"");
dismissDialogSafely(VOICEMAIL_REVERTING_DIALOG);
onRevertDone();
}
}",0.9962264150943396
184708,"void handleForwardingSettingsReadResult(AsyncResult ar,int idx){
  if (DBG)   Log.d(LOG_TAG,""String_Node_Str"" + idx);
  Throwable error=null;
  if (ar.exception != null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + ar.exception.getMessage());
    error=ar.exception;
  }
  if (ar.userObj instanceof Throwable) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + ((Throwable)ar.userObj).getMessage());
    error=(Throwable)ar.userObj;
  }
  if (mForwardingReadResults == null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + idx);
    return;
  }
  if (error != null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + idx);
    mForwardingReadResults=null;
    dismissDialogSafely(VOICEMAIL_FWD_READING_DIALOG);
    showVMDialog(MSG_FW_GET_EXCEPTION);
    return;
  }
  final CallForwardInfo cfInfoArray[]=(CallForwardInfo[])ar.result;
  CallForwardInfo fi=null;
  for (int i=0; i < cfInfoArray.length; i++) {
    if ((cfInfoArray[i].serviceClass & CommandsInterface.SERVICE_CLASS_VOICE) != 0) {
      fi=cfInfoArray[i];
      break;
    }
  }
  if (fi == null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + idx);
    fi=new CallForwardInfo();
    fi.status=0;
    fi.reason=FORWARDING_SETTINGS_REASONS[idx];
    fi.serviceClass=CommandsInterface.SERVICE_CLASS_VOICE;
  }
 else {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + fi.toString() + ""String_Node_Str""+ idx);
  }
  mForwardingReadResults[idx]=fi;
  boolean done=true;
  for (int i=0; i < mForwardingReadResults.length; i++) {
    if (mForwardingReadResults[i] == null) {
      done=false;
      break;
    }
  }
  if (done) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"");
    dismissDialogSafely(VOICEMAIL_FWD_READING_DIALOG);
    if (mReadingSettingsForDefaultProvider) {
      maybeSaveSettingsForVoicemailProvider(DEFAULT_VM_PROVIDER_KEY,new VoiceMailProviderSettings(this.mOldVmNumber,mForwardingReadResults));
      mReadingSettingsForDefaultProvider=false;
    }
    saveVoiceMailAndForwardingNumberStage2();
  }
 else {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"");
  }
}","void handleForwardingSettingsReadResult(AsyncResult ar,int idx){
  if (DBG)   Log.d(LOG_TAG,""String_Node_Str"" + idx);
  Throwable error=null;
  if (ar.exception != null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + ar.exception.getMessage());
    error=ar.exception;
  }
  if (ar.userObj instanceof Throwable) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + ((Throwable)ar.userObj).getMessage());
    error=(Throwable)ar.userObj;
  }
  if (mForwardingReadResults == null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + idx);
    return;
  }
  if (error != null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + idx);
    mForwardingReadResults=null;
    dismissDialogSafely(VOICEMAIL_FWD_READING_DIALOG);
    showVMDialog(MSG_FW_GET_EXCEPTION);
    return;
  }
  final CallForwardInfo cfInfoArray[]=(CallForwardInfo[])ar.result;
  CallForwardInfo fi=null;
  for (int i=0; i < cfInfoArray.length; i++) {
    if ((cfInfoArray[i].serviceClass & CommandsInterface.SERVICE_CLASS_VOICE) != 0) {
      fi=cfInfoArray[i];
      break;
    }
  }
  if (fi == null) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + idx);
    fi=new CallForwardInfo();
    fi.status=0;
    fi.reason=FORWARDING_SETTINGS_REASONS[idx];
    fi.serviceClass=CommandsInterface.SERVICE_CLASS_VOICE;
  }
 else {
    if (fi.number == null || fi.number.length() == 0) {
      fi.status=0;
    }
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + fi.toString() + ""String_Node_Str""+ idx);
  }
  mForwardingReadResults[idx]=fi;
  boolean done=true;
  for (int i=0; i < mForwardingReadResults.length; i++) {
    if (mForwardingReadResults[i] == null) {
      done=false;
      break;
    }
  }
  if (done) {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"");
    dismissDialogSafely(VOICEMAIL_FWD_READING_DIALOG);
    if (mReadingSettingsForDefaultProvider) {
      maybeSaveSettingsForVoicemailProvider(DEFAULT_VM_PROVIDER_KEY,new VoiceMailProviderSettings(this.mOldVmNumber,mForwardingReadResults));
      mReadingSettingsForDefaultProvider=false;
    }
    saveVoiceMailAndForwardingNumberStage2();
  }
 else {
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"");
  }
}",0.980846535824072
184709,"/** 
 * Implemented to support onPreferenceChangeListener to look for preference changes.
 * @param preference is the preference to be changed
 * @param objValue should be the value of the selection, NOT its localizeddisplay value.
 */
public boolean onPreferenceChange(Preference preference,Object objValue){
  if (preference == mButtonDTMF) {
    int index=mButtonDTMF.findIndexOfValue((String)objValue);
    Settings.System.putInt(mPhone.getContext().getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,index);
  }
 else   if (preference == mButtonTTY) {
    handleTTYChange(preference,objValue);
  }
 else   if (preference == mVoicemailProviders) {
    final String currentProviderKey=getCurrentVoicemailProviderKey();
    final String newProviderKey=(String)objValue;
    if (DBG)     log(""String_Node_Str"" + newProviderKey + ""String_Node_Str""+ mPreviousVMProviderKey);
    if (mPreviousVMProviderKey.equals(newProviderKey)) {
      if (DBG)       log(""String_Node_Str"");
      return true;
    }
    updateVMPreferenceWidgets(newProviderKey);
    mPreviousVMProviderKey=currentProviderKey;
    updateVMPreferenceWidgets(newProviderKey);
    final VoiceMailProviderSettings newProviderSettings=loadSettingsForVoiceMailProvider(newProviderKey);
    if (newProviderSettings == null) {
      if (DBG)       log(""String_Node_Str"");
      mVMProviderSettingsForced=true;
      simulatePreferenceClick(mVoicemailSettings);
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      mChangingVMorFwdDueToProviderChange=true;
      saveVoiceMailAndForwardingNumber(newProviderKey,newProviderSettings);
    }
  }
  return true;
}","/** 
 * Implemented to support onPreferenceChangeListener to look for preference changes.
 * @param preference is the preference to be changed
 * @param objValue should be the value of the selection, NOT its localizeddisplay value.
 */
public boolean onPreferenceChange(Preference preference,Object objValue){
  if (preference == mButtonDTMF) {
    int index=mButtonDTMF.findIndexOfValue((String)objValue);
    Settings.System.putInt(mPhone.getContext().getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,index);
  }
 else   if (preference == mButtonTTY) {
    handleTTYChange(preference,objValue);
  }
 else   if (preference == mVoicemailProviders) {
    final String currentProviderKey=getCurrentVoicemailProviderKey();
    final String newProviderKey=(String)objValue;
    if (DBG)     log(""String_Node_Str"" + newProviderKey + ""String_Node_Str""+ mPreviousVMProviderKey);
    if (mPreviousVMProviderKey.equals(newProviderKey)) {
      if (DBG)       log(""String_Node_Str"");
      return true;
    }
    updateVMPreferenceWidgets(newProviderKey);
    mPreviousVMProviderKey=currentProviderKey;
    final VoiceMailProviderSettings newProviderSettings=loadSettingsForVoiceMailProvider(newProviderKey);
    if (newProviderSettings == null) {
      if (DBG)       log(""String_Node_Str"");
      mVMProviderSettingsForced=true;
      simulatePreferenceClick(mVoicemailSettings);
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      mChangingVMorFwdDueToProviderChange=true;
      saveVoiceMailAndForwardingNumber(newProviderKey,newProviderSettings);
    }
  }
  return true;
}",0.9854983029929034
184710,"@Override public void handleMessage(Message msg){
  AsyncResult result=(AsyncResult)msg.obj;
switch (msg.what) {
case EVENT_VOICEMAIL_CHANGED:
    mVoicemailChangeResult=result;
  if (DBG)   log(""String_Node_Str"");
break;
case EVENT_FORWARDING_CHANGED:
mForwardingChangeResults.put(msg.arg1,result);
if (result.exception != null) {
if (DBG) log(""String_Node_Str"" + msg.arg1 + ""String_Node_Str""+ result.exception.getMessage());
}
 else {
if (DBG) log(""String_Node_Str"" + msg.arg1);
}
if (DBG) log(""String_Node_Str"");
break;
default :
}
final boolean done=(!mVMChangeCompletedSuccesfully || mVoicemailChangeResult != null) && (!mFwdChangesRequireRollback || checkForwardingCompleted());
if (done) {
if (DBG) log(""String_Node_Str"");
dismissDialog(VOICEMAIL_REVERTING_DIALOG);
onRevertDone();
}
}","@Override public void handleMessage(Message msg){
  AsyncResult result=(AsyncResult)msg.obj;
switch (msg.what) {
case EVENT_VOICEMAIL_CHANGED:
    mVoicemailChangeResult=result;
  if (DBG)   log(""String_Node_Str"");
break;
case EVENT_FORWARDING_CHANGED:
mForwardingChangeResults.put(msg.arg1,result);
if (result.exception != null) {
if (DBG) log(""String_Node_Str"" + msg.arg1 + ""String_Node_Str""+ result.exception.getMessage());
}
 else {
if (DBG) log(""String_Node_Str"" + msg.arg1);
}
if (DBG) log(""String_Node_Str"");
break;
default :
}
final boolean done=(!mVMChangeCompletedSuccesfully || mVoicemailChangeResult != null) && (!mFwdChangesRequireRollback || checkForwardingCompleted());
if (done) {
if (DBG) log(""String_Node_Str"");
dismissDialogSafely(VOICEMAIL_REVERTING_DIALOG);
onRevertDone();
}
}",0.9962264150943396
184711,"@Override public void onReceive(Context context,Intent intent){
  KeyEvent event=(KeyEvent)intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
  if (VDBG)   Log.d(LOG_TAG,""String_Node_Str"" + event);
  if ((event != null) && (event.getKeyCode() == KeyEvent.KEYCODE_HEADSETHOOK) && (event.getAction() == KeyEvent.ACTION_DOWN)) {
    if (event.getRepeatCount() == 0) {
      if (VDBG)       Log.d(LOG_TAG,""String_Node_Str"");
      boolean consumed=PhoneUtils.handleHeadsetHook(phone);
      if (VDBG)       Log.d(LOG_TAG,""String_Node_Str"" + consumed);
      if (consumed) {
        if (isShowingCallScreen()) {
          updateInCallScreenTouchUi();
        }
        abortBroadcast();
      }
    }
 else     if (phone.getState() != Phone.State.IDLE) {
      abortBroadcast();
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  KeyEvent event=(KeyEvent)intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
  if (VDBG)   Log.d(LOG_TAG,""String_Node_Str"" + event);
  if ((event != null) && (event.getKeyCode() == KeyEvent.KEYCODE_HEADSETHOOK)) {
    if (VDBG)     Log.d(LOG_TAG,""String_Node_Str"");
    boolean consumed=PhoneUtils.handleHeadsetHook(phone,event);
    if (VDBG)     Log.d(LOG_TAG,""String_Node_Str"" + consumed);
    if (consumed) {
      if (isShowingCallScreen()) {
        updateInCallScreenTouchUi();
      }
      abortBroadcast();
    }
  }
 else {
    if (phone.getState() != Phone.State.IDLE) {
      if (VDBG)       Log.d(LOG_TAG,""String_Node_Str"");
      abortBroadcast();
    }
  }
}",0.8818897637795275
184712,"/** 
 * Handles the wired headset button while in-call. This is called from the PhoneApp, not from the InCallScreen, since the HEADSETHOOK button means ""mute or unmute the current call"" *any* time a call is active, even if the user isn't actually on the in-call screen.
 * @return true if we consumed the event.
 */
static boolean handleHeadsetHook(Phone phone){
  if (DBG)   log(""String_Node_Str"");
  if (phone.getState() == Phone.State.IDLE) {
    return false;
  }
  final boolean hasRingingCall=!phone.getRingingCall().isIdle();
  final boolean hasActiveCall=!phone.getForegroundCall().isIdle();
  final boolean hasHoldingCall=!phone.getBackgroundCall().isIdle();
  if (hasRingingCall) {
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      answerCall(phone);
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      if (hasActiveCall && hasHoldingCall) {
        if (DBG)         log(""String_Node_Str"");
        answerAndEndActive(phone);
      }
 else {
        if (DBG)         log(""String_Node_Str"");
        answerCall(phone);
      }
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + phoneType);
    }
  }
 else {
    Connection c=phone.getForegroundCall().getLatestConnection();
    if (c != null && !PhoneNumberUtils.isEmergencyNumber(c.getAddress())) {
      if (getMute(phone)) {
        if (DBG)         log(""String_Node_Str"");
        setMute(phone,false);
      }
 else {
        if (DBG)         log(""String_Node_Str"");
        setMute(phone,true);
      }
    }
  }
  return true;
}","/** 
 * Handles the wired headset button while in-call. This is called from the PhoneApp, not from the InCallScreen, since the HEADSETHOOK button means ""mute or unmute the current call"" *any* time a call is active, even if the user isn't actually on the in-call screen.
 * @return true if we consumed the event.
 */
static boolean handleHeadsetHook(Phone phone,KeyEvent event){
  if (DBG)   log(""String_Node_Str"" + event.getAction() + ""String_Node_Str""+ event.getRepeatCount());
  if (phone.getState() == Phone.State.IDLE) {
    return false;
  }
  final boolean hasRingingCall=!phone.getRingingCall().isIdle();
  final boolean hasActiveCall=!phone.getForegroundCall().isIdle();
  final boolean hasHoldingCall=!phone.getBackgroundCall().isIdle();
  if (hasRingingCall && event.getRepeatCount() == 0 && event.getAction() == KeyEvent.ACTION_UP) {
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      answerCall(phone);
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      if (hasActiveCall && hasHoldingCall) {
        if (DBG)         log(""String_Node_Str"");
        answerAndEndActive(phone);
      }
 else {
        if (DBG)         log(""String_Node_Str"");
        answerCall(phone);
      }
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + phoneType);
    }
  }
 else {
    if (event.isLongPress()) {
      if (DBG)       log(""String_Node_Str"");
      hangup(phone);
    }
 else     if (event.getAction() == KeyEvent.ACTION_UP && event.getRepeatCount() == 0) {
      Connection c=phone.getForegroundCall().getLatestConnection();
      if (c != null && !PhoneNumberUtils.isEmergencyNumber(c.getAddress())) {
        if (getMute(phone)) {
          if (DBG)           log(""String_Node_Str"");
          setMute(phone,false);
        }
 else {
          if (DBG)           log(""String_Node_Str"");
          setMute(phone,true);
        }
      }
    }
  }
  return true;
}",0.7846153846153846
184713,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (DBG)   log(""String_Node_Str"");
  mPhone=PhoneFactory.getDefaultPhone();
  addPreferencesFromResource(R.xml.call_feature_setting);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)findPreference(BUTTON_VOICEMAIL_KEY);
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mButtonDTMF=(ListPreference)findPreference(BUTTON_DTMF_KEY);
  mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  mButtonHAC=(CheckBoxPreference)findPreference(BUTTON_HAC_KEY);
  mButtonTTY=(ListPreference)findPreference(BUTTON_TTY_KEY);
  mVoicemailProviders=(ListPreference)findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
  if (mVoicemailProviders != null) {
    mVoicemailProviders.setOnPreferenceChangeListener(this);
    mVoicemailSettings=(PreferenceScreen)findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
    initVoiceMailProviders();
  }
  if (getResources().getBoolean(R.bool.dtmf_type_enabled)) {
    mButtonDTMF.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonDTMF);
    mButtonDTMF=null;
  }
  if (getResources().getBoolean(R.bool.auto_retry_enabled)) {
    mButtonAutoRetry.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonAutoRetry);
    mButtonAutoRetry=null;
  }
  if (getResources().getBoolean(R.bool.hac_enabled)) {
    mButtonHAC.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonHAC);
    mButtonHAC=null;
  }
  if (getResources().getBoolean(R.bool.tty_enabled)) {
    mButtonTTY.setOnPreferenceChangeListener(this);
    ttyHandler=new TTYHandler();
  }
 else {
    prefSet.removePreference(mButtonTTY);
    mButtonTTY=null;
  }
  if (!getResources().getBoolean(R.bool.world_phone)) {
    prefSet.removePreference(prefSet.findPreference(BUTTON_CDMA_OPTIONS));
    prefSet.removePreference(prefSet.findPreference(BUTTON_GSM_UMTS_OPTIONS));
    int phoneType=mPhone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      prefSet.removePreference(prefSet.findPreference(BUTTON_FDN_KEY));
      addPreferencesFromResource(R.xml.cdma_call_options);
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      addPreferencesFromResource(R.xml.gsm_umts_call_options);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + phoneType);
    }
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (icicle == null) {
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL) && mVoicemailProviders != null) {
      if (mVMProvidersData.size() > 1) {
        simulatePreferenceClick(mVoicemailProviders);
      }
 else {
        onPreferenceChange(mVoicemailProviders,DEFAULT_VM_PROVIDER_KEY);
        mVoicemailProviders.setValue(DEFAULT_VM_PROVIDER_KEY);
      }
    }
  }
  updateVoiceNumberField();
  mVMProviderSettingsForced=false;
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (DBG)   log(""String_Node_Str"");
  mPhone=PhoneFactory.getDefaultPhone();
  addPreferencesFromResource(R.xml.call_feature_setting);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)findPreference(BUTTON_VOICEMAIL_KEY);
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mButtonDTMF=(ListPreference)findPreference(BUTTON_DTMF_KEY);
  mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  mButtonHAC=(CheckBoxPreference)findPreference(BUTTON_HAC_KEY);
  mButtonTTY=(ListPreference)findPreference(BUTTON_TTY_KEY);
  mVoicemailProviders=(ListPreference)findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
  if (mVoicemailProviders != null) {
    mVoicemailProviders.setOnPreferenceChangeListener(this);
    mVoicemailSettings=(PreferenceScreen)findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
    initVoiceMailProviders();
  }
  if (getResources().getBoolean(R.bool.dtmf_type_enabled)) {
    mButtonDTMF.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonDTMF);
    mButtonDTMF=null;
  }
  if (getResources().getBoolean(R.bool.auto_retry_enabled)) {
    mButtonAutoRetry.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonAutoRetry);
    mButtonAutoRetry=null;
  }
  if (getResources().getBoolean(R.bool.hac_enabled)) {
    mButtonHAC.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonHAC);
    mButtonHAC=null;
  }
  if (getResources().getBoolean(R.bool.tty_enabled)) {
    mButtonTTY.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonTTY);
    mButtonTTY=null;
  }
  if (!getResources().getBoolean(R.bool.world_phone)) {
    prefSet.removePreference(prefSet.findPreference(BUTTON_CDMA_OPTIONS));
    prefSet.removePreference(prefSet.findPreference(BUTTON_GSM_UMTS_OPTIONS));
    int phoneType=mPhone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      prefSet.removePreference(prefSet.findPreference(BUTTON_FDN_KEY));
      addPreferencesFromResource(R.xml.cdma_call_options);
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      addPreferencesFromResource(R.xml.gsm_umts_call_options);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + phoneType);
    }
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (icicle == null) {
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL) && mVoicemailProviders != null) {
      if (mVMProvidersData.size() > 1) {
        simulatePreferenceClick(mVoicemailProviders);
      }
 else {
        onPreferenceChange(mVoicemailProviders,DEFAULT_VM_PROVIDER_KEY);
        mVoicemailProviders.setValue(DEFAULT_VM_PROVIDER_KEY);
      }
    }
  }
  updateVoiceNumberField();
  mVMProviderSettingsForced=false;
}",0.994991652754591
184714,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case EVENT_TTY_MODE_GET:
    handleQueryTTYModeResponse(msg);
  break;
case EVENT_TTY_MODE_SET:
handleSetTTYModeResponse(msg);
break;
}
}","@Override public void handleMessage(Message msg){
  AsyncResult result=(AsyncResult)msg.obj;
switch (msg.what) {
case EVENT_VOICEMAIL_CHANGED:
    mVoicemailChangeResult=result;
  if (DBG)   log(""String_Node_Str"");
break;
case EVENT_FORWARDING_CHANGED:
mForwardingChangeResults.put(msg.arg1,result);
if (result.exception != null) {
if (DBG) log(""String_Node_Str"" + msg.arg1 + ""String_Node_Str""+ result.exception.getMessage());
}
 else {
if (DBG) log(""String_Node_Str"" + msg.arg1);
}
if (DBG) log(""String_Node_Str"");
break;
default :
}
final boolean done=(!mVMChangeCompletedSuccesfully || mVoicemailChangeResult != null) && (!mFwdChangesRequireRollback || checkForwardingCompleted());
if (done) {
if (DBG) log(""String_Node_Str"");
dismissDialog(VOICEMAIL_REVERTING_DIALOG);
onRevertDone();
}
}",0.1781781781781782
184715,"@Override protected void onResume(){
  super.onResume();
  if (mButtonDTMF != null) {
    int dtmf=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,DTMF_TONE_TYPE_NORMAL);
    mButtonDTMF.setValueIndex(dtmf);
  }
  if (mButtonAutoRetry != null) {
    int autoretry=Settings.System.getInt(getContentResolver(),Settings.System.CALL_AUTO_RETRY,0);
    mButtonAutoRetry.setChecked(autoretry != 0);
  }
  if (mButtonHAC != null) {
    int hac=Settings.System.getInt(getContentResolver(),Settings.System.HEARING_AID,0);
    mButtonHAC.setChecked(hac != 0);
  }
  if (mButtonTTY != null) {
    mPhone.queryTTYMode(ttyHandler.obtainMessage(TTYHandler.EVENT_TTY_MODE_GET));
  }
}","@Override protected void onResume(){
  super.onResume();
  if (mButtonDTMF != null) {
    int dtmf=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,DTMF_TONE_TYPE_NORMAL);
    mButtonDTMF.setValueIndex(dtmf);
  }
  if (mButtonAutoRetry != null) {
    int autoretry=Settings.System.getInt(getContentResolver(),Settings.System.CALL_AUTO_RETRY,0);
    mButtonAutoRetry.setChecked(autoretry != 0);
  }
  if (mButtonHAC != null) {
    int hac=Settings.System.getInt(getContentResolver(),Settings.System.HEARING_AID,0);
    mButtonHAC.setChecked(hac != 0);
  }
  if (mButtonTTY != null) {
    int settingsTtyMode=Settings.Secure.getInt(getContentResolver(),Settings.Secure.PREFERRED_TTY_MODE,Phone.TTY_MODE_OFF);
    mButtonTTY.setValue(Integer.toString(settingsTtyMode));
    updatePreferredTtyModeSummary(settingsTtyMode);
  }
}",0.8256997455470738
184716,"private void handleTTYChange(Preference preference,Object objValue){
  int buttonTtyMode;
  buttonTtyMode=Integer.valueOf((String)objValue).intValue();
  int settingsTtyMode=android.provider.Settings.Secure.getInt(getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,preferredTtyMode);
  if (DBG)   log(""String_Node_Str"" + Integer.toString(buttonTtyMode));
  if (buttonTtyMode != settingsTtyMode) {
switch (buttonTtyMode) {
case Phone.TTY_MODE_OFF:
case Phone.TTY_MODE_FULL:
case Phone.TTY_MODE_HCO:
case Phone.TTY_MODE_VCO:
      mPhone.setTTYMode(buttonTtyMode,ttyHandler.obtainMessage(TTYHandler.EVENT_TTY_MODE_SET));
    break;
default :
  mPhone.setTTYMode(Phone.TTY_MODE_OFF,ttyHandler.obtainMessage(TTYHandler.EVENT_TTY_MODE_SET));
}
}
}","private void handleTTYChange(Preference preference,Object objValue){
  int buttonTtyMode;
  buttonTtyMode=Integer.valueOf((String)objValue).intValue();
  int settingsTtyMode=android.provider.Settings.Secure.getInt(getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,preferredTtyMode);
  if (DBG)   log(""String_Node_Str"" + Integer.toString(buttonTtyMode));
  if (buttonTtyMode != settingsTtyMode) {
switch (buttonTtyMode) {
case Phone.TTY_MODE_OFF:
case Phone.TTY_MODE_FULL:
case Phone.TTY_MODE_HCO:
case Phone.TTY_MODE_VCO:
      android.provider.Settings.Secure.putInt(getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,buttonTtyMode);
    break;
default :
  buttonTtyMode=Phone.TTY_MODE_OFF;
}
mButtonTTY.setValue(Integer.toString(buttonTtyMode));
updatePreferredTtyModeSummary(buttonTtyMode);
Intent ttyModeChanged=new Intent(TtyIntent.TTY_PREFERRED_MODE_CHANGE_ACTION);
ttyModeChanged.putExtra(TtyIntent.TTY_PREFFERED_MODE,buttonTtyMode);
sendBroadcast(ttyModeChanged);
}
}",0.6457399103139013
184717,"@Override public void onCreate(){
  if (Config.LOGV)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      cdmaPhoneCallState=new CdmaPhoneCallState();
      cdmaPhoneCallState.CdmaPhoneCallStateInit();
    }
    if (BluetoothAdapter.getDefaultAdapter() != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    if ((pm.getSupportedWakeLockFlags() & PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) != 0x0) {
      mProximityWakeLock=pm.newWakeLock(PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK,LOG_TAG);
    }
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + mProximityWakeLock);
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mStatusBarManager=(StatusBarManager)getSystemService(Context.STATUS_BAR_SERVICE);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree);
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (Config.LOGV)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForAbsent(mHandler,EVENT_SIM_ABSENT,null);
      sim.registerForLocked(mHandler,EVENT_SIM_LOCKED,null);
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    if (phoneType == Phone.PHONE_TYPE_GSM) {
      phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    }
    PhoneUtils.initializeConnectionHandler(phone);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
boolean phoneIsCdma=(phone.getPhoneType() == Phone.PHONE_TYPE_CDMA);
if (phoneIsCdma) {
cdmaOtaProvisionData=new OtaUtils.CdmaOtaProvisionData();
cdmaOtaConfigData=new OtaUtils.CdmaOtaConfigData();
cdmaOtaScreenState=new OtaUtils.CdmaOtaScreenState();
cdmaOtaInCallScreenUiState=new OtaUtils.CdmaOtaInCallScreenUiState();
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
if (phoneIsCdma) {
int settingsTtyMode=android.provider.Settings.Secure.getInt(phone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,Phone.TTY_MODE_OFF);
phone.setTTYMode(settingsTtyMode,null);
int hac=android.provider.Settings.System.getInt(phone.getContext().getContentResolver(),android.provider.Settings.System.HEARING_AID,0);
AudioManager audioManager=(AudioManager)phone.getContext().getSystemService(Context.AUDIO_SERVICE);
audioManager.setParameter(CallFeaturesSetting.HAC_KEY,hac != 0 ? CallFeaturesSetting.HAC_VAL_ON : CallFeaturesSetting.HAC_VAL_OFF);
}
}","@Override public void onCreate(){
  if (Config.LOGV)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      cdmaPhoneCallState=new CdmaPhoneCallState();
      cdmaPhoneCallState.CdmaPhoneCallStateInit();
    }
    if (BluetoothAdapter.getDefaultAdapter() != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    if ((pm.getSupportedWakeLockFlags() & PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) != 0x0) {
      mProximityWakeLock=pm.newWakeLock(PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK,LOG_TAG);
    }
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + mProximityWakeLock);
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mStatusBarManager=(StatusBarManager)getSystemService(Context.STATUS_BAR_SERVICE);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree);
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (Config.LOGV)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForAbsent(mHandler,EVENT_SIM_ABSENT,null);
      sim.registerForLocked(mHandler,EVENT_SIM_LOCKED,null);
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    if (phoneType == Phone.PHONE_TYPE_GSM) {
      phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    }
    PhoneUtils.initializeConnectionHandler(phone);
    mTtyEnabled=getResources().getBoolean(R.bool.tty_enabled);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
    if (mTtyEnabled) {
      intentFilter.addAction(TtyIntent.TTY_PREFERRED_MODE_CHANGE_ACTION);
    }
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
boolean phoneIsCdma=(phone.getPhoneType() == Phone.PHONE_TYPE_CDMA);
if (phoneIsCdma) {
cdmaOtaProvisionData=new OtaUtils.CdmaOtaProvisionData();
cdmaOtaConfigData=new OtaUtils.CdmaOtaConfigData();
cdmaOtaScreenState=new OtaUtils.CdmaOtaScreenState();
cdmaOtaInCallScreenUiState=new OtaUtils.CdmaOtaInCallScreenUiState();
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
if (mTtyEnabled) {
mPreferredTtyMode=android.provider.Settings.Secure.getInt(phone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,Phone.TTY_MODE_OFF);
mHandler.sendMessage(mHandler.obtainMessage(EVENT_TTY_PREFERRED_MODE_CHANGED,0));
}
if (getResources().getBoolean(R.bool.hac_enabled)) {
int hac=android.provider.Settings.System.getInt(phone.getContext().getContentResolver(),android.provider.Settings.System.HEARING_AID,0);
AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
audioManager.setParameter(CallFeaturesSetting.HAC_KEY,hac != 0 ? CallFeaturesSetting.HAC_VAL_ON : CallFeaturesSetting.HAC_VAL_OFF);
}
}",0.9305968669442792
184718,"@Override public void onReceive(Context context,Intent intent){
  KeyEvent event=(KeyEvent)intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
  if (VDBG)   Log.d(LOG_TAG,""String_Node_Str"" + event);
  if ((event != null) && (event.getKeyCode() == KeyEvent.KEYCODE_HEADSETHOOK) && (event.getAction() == KeyEvent.ACTION_DOWN)) {
    if (event.getRepeatCount() == 0) {
      if (VDBG)       Log.d(LOG_TAG,""String_Node_Str"");
      boolean consumed=PhoneUtils.handleHeadsetHook(phone);
      if (VDBG)       Log.d(LOG_TAG,""String_Node_Str"" + consumed);
      if (consumed) {
        if (isShowingCallScreen()) {
          updateInCallScreenTouchUi();
        }
        abortBroadcast();
      }
    }
 else     if (phone.getState() != Phone.State.IDLE) {
      abortBroadcast();
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  KeyEvent event=(KeyEvent)intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
  if (VDBG)   Log.d(LOG_TAG,""String_Node_Str"" + event);
  if ((event != null) && (event.getKeyCode() == KeyEvent.KEYCODE_HEADSETHOOK)) {
    if (VDBG)     Log.d(LOG_TAG,""String_Node_Str"");
    boolean consumed=PhoneUtils.handleHeadsetHook(phone,event);
    if (VDBG)     Log.d(LOG_TAG,""String_Node_Str"" + consumed);
    if (consumed) {
      if (isShowingCallScreen()) {
        updateInCallScreenTouchUi();
      }
      abortBroadcast();
    }
  }
 else {
    if (phone.getState() != Phone.State.IDLE) {
      if (VDBG)       Log.d(LOG_TAG,""String_Node_Str"");
      abortBroadcast();
    }
  }
}",0.8818897637795275
184719,"/** 
 * Handles the wired headset button while in-call. This is called from the PhoneApp, not from the InCallScreen, since the HEADSETHOOK button means ""mute or unmute the current call"" *any* time a call is active, even if the user isn't actually on the in-call screen.
 * @return true if we consumed the event.
 */
static boolean handleHeadsetHook(Phone phone){
  if (DBG)   log(""String_Node_Str"");
  if (phone.getState() == Phone.State.IDLE) {
    return false;
  }
  final boolean hasRingingCall=!phone.getRingingCall().isIdle();
  final boolean hasActiveCall=!phone.getForegroundCall().isIdle();
  final boolean hasHoldingCall=!phone.getBackgroundCall().isIdle();
  if (hasRingingCall) {
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      answerCall(phone);
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      if (hasActiveCall && hasHoldingCall) {
        if (DBG)         log(""String_Node_Str"");
        answerAndEndActive(phone);
      }
 else {
        if (DBG)         log(""String_Node_Str"");
        answerCall(phone);
      }
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + phoneType);
    }
  }
 else {
    Connection c=phone.getForegroundCall().getLatestConnection();
    if (c != null && !PhoneNumberUtils.isEmergencyNumber(c.getAddress())) {
      if (getMute(phone)) {
        if (DBG)         log(""String_Node_Str"");
        setMute(phone,false);
      }
 else {
        if (DBG)         log(""String_Node_Str"");
        setMute(phone,true);
      }
    }
  }
  return true;
}","/** 
 * Handles the wired headset button while in-call. This is called from the PhoneApp, not from the InCallScreen, since the HEADSETHOOK button means ""mute or unmute the current call"" *any* time a call is active, even if the user isn't actually on the in-call screen.
 * @return true if we consumed the event.
 */
static boolean handleHeadsetHook(Phone phone,KeyEvent event){
  if (DBG)   log(""String_Node_Str"" + event.getAction() + ""String_Node_Str""+ event.getRepeatCount());
  if (phone.getState() == Phone.State.IDLE) {
    return false;
  }
  final boolean hasRingingCall=!phone.getRingingCall().isIdle();
  final boolean hasActiveCall=!phone.getForegroundCall().isIdle();
  final boolean hasHoldingCall=!phone.getBackgroundCall().isIdle();
  if (hasRingingCall && event.getRepeatCount() == 0 && event.getAction() == KeyEvent.ACTION_UP) {
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      answerCall(phone);
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      if (hasActiveCall && hasHoldingCall) {
        if (DBG)         log(""String_Node_Str"");
        answerAndEndActive(phone);
      }
 else {
        if (DBG)         log(""String_Node_Str"");
        answerCall(phone);
      }
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + phoneType);
    }
  }
 else {
    if (event.isLongPress()) {
      if (DBG)       log(""String_Node_Str"");
      hangup(phone);
    }
 else     if (event.getAction() == KeyEvent.ACTION_UP && event.getRepeatCount() == 0) {
      Connection c=phone.getForegroundCall().getLatestConnection();
      if (c != null && !PhoneNumberUtils.isEmergencyNumber(c.getAddress())) {
        if (getMute(phone)) {
          if (DBG)           log(""String_Node_Str"");
          setMute(phone,false);
        }
 else {
          if (DBG)           log(""String_Node_Str"");
          setMute(phone,true);
        }
      }
    }
  }
  return true;
}",0.7846153846153846
184720,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (DBG)   log(""String_Node_Str"");
  mPhone=PhoneFactory.getDefaultPhone();
  addPreferencesFromResource(R.xml.call_feature_setting);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)findPreference(BUTTON_VOICEMAIL_KEY);
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mButtonDTMF=(ListPreference)findPreference(BUTTON_DTMF_KEY);
  mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  mButtonHAC=(CheckBoxPreference)findPreference(BUTTON_HAC_KEY);
  mButtonTTY=(ListPreference)findPreference(BUTTON_TTY_KEY);
  mVoicemailProviders=(ListPreference)findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
  if (mVoicemailProviders != null) {
    mVoicemailProviders.setOnPreferenceChangeListener(this);
    mVoicemailSettings=(PreferenceScreen)findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
    initVoiceMailProviders();
  }
  if (getResources().getBoolean(R.bool.dtmf_type_enabled)) {
    mButtonDTMF.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonDTMF);
    mButtonDTMF=null;
  }
  if (getResources().getBoolean(R.bool.auto_retry_enabled)) {
    mButtonAutoRetry.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonAutoRetry);
    mButtonAutoRetry=null;
  }
  if (getResources().getBoolean(R.bool.hac_enabled)) {
    mButtonHAC.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonHAC);
    mButtonHAC=null;
  }
  if (getResources().getBoolean(R.bool.tty_enabled)) {
    mButtonTTY.setOnPreferenceChangeListener(this);
    ttyHandler=new TTYHandler();
  }
 else {
    prefSet.removePreference(mButtonTTY);
    mButtonTTY=null;
  }
  if (!getResources().getBoolean(R.bool.world_phone)) {
    prefSet.removePreference(prefSet.findPreference(BUTTON_CDMA_OPTIONS));
    prefSet.removePreference(prefSet.findPreference(BUTTON_GSM_UMTS_OPTIONS));
    int phoneType=mPhone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      prefSet.removePreference(prefSet.findPreference(BUTTON_FDN_KEY));
      addPreferencesFromResource(R.xml.cdma_call_options);
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      addPreferencesFromResource(R.xml.gsm_umts_call_options);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + phoneType);
    }
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (icicle == null) {
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL) && mVoicemailProviders != null) {
      if (mVMProvidersData.size() > 1) {
        simulatePreferenceClick(mVoicemailProviders);
      }
 else {
        onPreferenceChange(mVoicemailProviders,DEFAULT_VM_PROVIDER_KEY);
        mVoicemailProviders.setValue(DEFAULT_VM_PROVIDER_KEY);
      }
    }
  }
  updateVoiceNumberField();
  mVMProviderSettingsForced=false;
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (DBG)   log(""String_Node_Str"");
  mPhone=PhoneFactory.getDefaultPhone();
  addPreferencesFromResource(R.xml.call_feature_setting);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)findPreference(BUTTON_VOICEMAIL_KEY);
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mButtonDTMF=(ListPreference)findPreference(BUTTON_DTMF_KEY);
  mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  mButtonHAC=(CheckBoxPreference)findPreference(BUTTON_HAC_KEY);
  mButtonTTY=(ListPreference)findPreference(BUTTON_TTY_KEY);
  mVoicemailProviders=(ListPreference)findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
  if (mVoicemailProviders != null) {
    mVoicemailProviders.setOnPreferenceChangeListener(this);
    mVoicemailSettings=(PreferenceScreen)findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
    initVoiceMailProviders();
  }
  if (getResources().getBoolean(R.bool.dtmf_type_enabled)) {
    mButtonDTMF.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonDTMF);
    mButtonDTMF=null;
  }
  if (getResources().getBoolean(R.bool.auto_retry_enabled)) {
    mButtonAutoRetry.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonAutoRetry);
    mButtonAutoRetry=null;
  }
  if (getResources().getBoolean(R.bool.hac_enabled)) {
    mButtonHAC.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonHAC);
    mButtonHAC=null;
  }
  if (getResources().getBoolean(R.bool.tty_enabled)) {
    mButtonTTY.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonTTY);
    mButtonTTY=null;
  }
  if (!getResources().getBoolean(R.bool.world_phone)) {
    prefSet.removePreference(prefSet.findPreference(BUTTON_CDMA_OPTIONS));
    prefSet.removePreference(prefSet.findPreference(BUTTON_GSM_UMTS_OPTIONS));
    int phoneType=mPhone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      prefSet.removePreference(prefSet.findPreference(BUTTON_FDN_KEY));
      addPreferencesFromResource(R.xml.cdma_call_options);
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      addPreferencesFromResource(R.xml.gsm_umts_call_options);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + phoneType);
    }
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (icicle == null) {
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL) && mVoicemailProviders != null) {
      if (mVMProvidersData.size() > 1) {
        simulatePreferenceClick(mVoicemailProviders);
      }
 else {
        onPreferenceChange(mVoicemailProviders,DEFAULT_VM_PROVIDER_KEY);
        mVoicemailProviders.setValue(DEFAULT_VM_PROVIDER_KEY);
      }
    }
  }
  updateVoiceNumberField();
  mVMProviderSettingsForced=false;
}",0.994991652754591
184721,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case EVENT_TTY_MODE_GET:
    handleQueryTTYModeResponse(msg);
  break;
case EVENT_TTY_MODE_SET:
handleSetTTYModeResponse(msg);
break;
}
}","@Override public void handleMessage(Message msg){
  AsyncResult result=(AsyncResult)msg.obj;
switch (msg.what) {
case EVENT_VOICEMAIL_CHANGED:
    mVoicemailChangeResult=result;
  if (DBG)   log(""String_Node_Str"");
break;
case EVENT_FORWARDING_CHANGED:
mForwardingChangeResults.put(msg.arg1,result);
if (result.exception != null) {
if (DBG) log(""String_Node_Str"" + msg.arg1 + ""String_Node_Str""+ result.exception.getMessage());
}
 else {
if (DBG) log(""String_Node_Str"" + msg.arg1);
}
if (DBG) log(""String_Node_Str"");
break;
default :
}
final boolean done=(!mVMChangeCompletedSuccesfully || mVoicemailChangeResult != null) && (!mFwdChangesRequireRollback || checkForwardingCompleted());
if (done) {
if (DBG) log(""String_Node_Str"");
dismissDialog(VOICEMAIL_REVERTING_DIALOG);
onRevertDone();
}
}",0.1781781781781782
184722,"@Override protected void onResume(){
  super.onResume();
  if (mButtonDTMF != null) {
    int dtmf=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,DTMF_TONE_TYPE_NORMAL);
    mButtonDTMF.setValueIndex(dtmf);
  }
  if (mButtonAutoRetry != null) {
    int autoretry=Settings.System.getInt(getContentResolver(),Settings.System.CALL_AUTO_RETRY,0);
    mButtonAutoRetry.setChecked(autoretry != 0);
  }
  if (mButtonHAC != null) {
    int hac=Settings.System.getInt(getContentResolver(),Settings.System.HEARING_AID,0);
    mButtonHAC.setChecked(hac != 0);
  }
  if (mButtonTTY != null) {
    mPhone.queryTTYMode(ttyHandler.obtainMessage(TTYHandler.EVENT_TTY_MODE_GET));
  }
}","@Override protected void onResume(){
  super.onResume();
  if (mButtonDTMF != null) {
    int dtmf=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,DTMF_TONE_TYPE_NORMAL);
    mButtonDTMF.setValueIndex(dtmf);
  }
  if (mButtonAutoRetry != null) {
    int autoretry=Settings.System.getInt(getContentResolver(),Settings.System.CALL_AUTO_RETRY,0);
    mButtonAutoRetry.setChecked(autoretry != 0);
  }
  if (mButtonHAC != null) {
    int hac=Settings.System.getInt(getContentResolver(),Settings.System.HEARING_AID,0);
    mButtonHAC.setChecked(hac != 0);
  }
  if (mButtonTTY != null) {
    int settingsTtyMode=Settings.Secure.getInt(getContentResolver(),Settings.Secure.PREFERRED_TTY_MODE,Phone.TTY_MODE_OFF);
    mButtonTTY.setValue(Integer.toString(settingsTtyMode));
    updatePreferredTtyModeSummary(settingsTtyMode);
  }
}",0.8256997455470738
184723,"private void handleTTYChange(Preference preference,Object objValue){
  int buttonTtyMode;
  buttonTtyMode=Integer.valueOf((String)objValue).intValue();
  int settingsTtyMode=android.provider.Settings.Secure.getInt(getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,preferredTtyMode);
  if (DBG)   log(""String_Node_Str"" + Integer.toString(buttonTtyMode));
  if (buttonTtyMode != settingsTtyMode) {
switch (buttonTtyMode) {
case Phone.TTY_MODE_OFF:
case Phone.TTY_MODE_FULL:
case Phone.TTY_MODE_HCO:
case Phone.TTY_MODE_VCO:
      mPhone.setTTYMode(buttonTtyMode,ttyHandler.obtainMessage(TTYHandler.EVENT_TTY_MODE_SET));
    break;
default :
  mPhone.setTTYMode(Phone.TTY_MODE_OFF,ttyHandler.obtainMessage(TTYHandler.EVENT_TTY_MODE_SET));
}
}
}","private void handleTTYChange(Preference preference,Object objValue){
  int buttonTtyMode;
  buttonTtyMode=Integer.valueOf((String)objValue).intValue();
  int settingsTtyMode=android.provider.Settings.Secure.getInt(getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,preferredTtyMode);
  if (DBG)   log(""String_Node_Str"" + Integer.toString(buttonTtyMode));
  if (buttonTtyMode != settingsTtyMode) {
switch (buttonTtyMode) {
case Phone.TTY_MODE_OFF:
case Phone.TTY_MODE_FULL:
case Phone.TTY_MODE_HCO:
case Phone.TTY_MODE_VCO:
      android.provider.Settings.Secure.putInt(getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,buttonTtyMode);
    break;
default :
  buttonTtyMode=Phone.TTY_MODE_OFF;
}
mButtonTTY.setValue(Integer.toString(buttonTtyMode));
updatePreferredTtyModeSummary(buttonTtyMode);
Intent ttyModeChanged=new Intent(TtyIntent.TTY_PREFERRED_MODE_CHANGE_ACTION);
ttyModeChanged.putExtra(TtyIntent.TTY_PREFFERED_MODE,buttonTtyMode);
sendBroadcast(ttyModeChanged);
}
}",0.6457399103139013
184724,"@Override public void onCreate(){
  if (Config.LOGV)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      cdmaPhoneCallState=new CdmaPhoneCallState();
      cdmaPhoneCallState.CdmaPhoneCallStateInit();
    }
    if (BluetoothAdapter.getDefaultAdapter() != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    if ((pm.getSupportedWakeLockFlags() & PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) != 0x0) {
      mProximityWakeLock=pm.newWakeLock(PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK,LOG_TAG);
    }
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + mProximityWakeLock);
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mStatusBarManager=(StatusBarManager)getSystemService(Context.STATUS_BAR_SERVICE);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree);
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (Config.LOGV)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForAbsent(mHandler,EVENT_SIM_ABSENT,null);
      sim.registerForLocked(mHandler,EVENT_SIM_LOCKED,null);
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    if (phoneType == Phone.PHONE_TYPE_GSM) {
      phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    }
    PhoneUtils.initializeConnectionHandler(phone);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
boolean phoneIsCdma=(phone.getPhoneType() == Phone.PHONE_TYPE_CDMA);
if (phoneIsCdma) {
cdmaOtaProvisionData=new OtaUtils.CdmaOtaProvisionData();
cdmaOtaConfigData=new OtaUtils.CdmaOtaConfigData();
cdmaOtaScreenState=new OtaUtils.CdmaOtaScreenState();
cdmaOtaInCallScreenUiState=new OtaUtils.CdmaOtaInCallScreenUiState();
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
if (phoneIsCdma) {
int settingsTtyMode=android.provider.Settings.Secure.getInt(phone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,Phone.TTY_MODE_OFF);
phone.setTTYMode(settingsTtyMode,null);
int hac=android.provider.Settings.System.getInt(phone.getContext().getContentResolver(),android.provider.Settings.System.HEARING_AID,0);
AudioManager audioManager=(AudioManager)phone.getContext().getSystemService(Context.AUDIO_SERVICE);
audioManager.setParameter(CallFeaturesSetting.HAC_KEY,hac != 0 ? CallFeaturesSetting.HAC_VAL_ON : CallFeaturesSetting.HAC_VAL_OFF);
}
}","@Override public void onCreate(){
  if (Config.LOGV)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      cdmaPhoneCallState=new CdmaPhoneCallState();
      cdmaPhoneCallState.CdmaPhoneCallStateInit();
    }
    if (BluetoothAdapter.getDefaultAdapter() != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    if ((pm.getSupportedWakeLockFlags() & PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) != 0x0) {
      mProximityWakeLock=pm.newWakeLock(PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK,LOG_TAG);
    }
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + mProximityWakeLock);
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mStatusBarManager=(StatusBarManager)getSystemService(Context.STATUS_BAR_SERVICE);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree);
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (Config.LOGV)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForAbsent(mHandler,EVENT_SIM_ABSENT,null);
      sim.registerForLocked(mHandler,EVENT_SIM_LOCKED,null);
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    if (phoneType == Phone.PHONE_TYPE_GSM) {
      phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    }
    PhoneUtils.initializeConnectionHandler(phone);
    mTtyEnabled=getResources().getBoolean(R.bool.tty_enabled);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
    if (mTtyEnabled) {
      intentFilter.addAction(TtyIntent.TTY_PREFERRED_MODE_CHANGE_ACTION);
    }
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
boolean phoneIsCdma=(phone.getPhoneType() == Phone.PHONE_TYPE_CDMA);
if (phoneIsCdma) {
cdmaOtaProvisionData=new OtaUtils.CdmaOtaProvisionData();
cdmaOtaConfigData=new OtaUtils.CdmaOtaConfigData();
cdmaOtaScreenState=new OtaUtils.CdmaOtaScreenState();
cdmaOtaInCallScreenUiState=new OtaUtils.CdmaOtaInCallScreenUiState();
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
if (mTtyEnabled) {
mPreferredTtyMode=android.provider.Settings.Secure.getInt(phone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,Phone.TTY_MODE_OFF);
mHandler.sendMessage(mHandler.obtainMessage(EVENT_TTY_PREFERRED_MODE_CHANGED,0));
}
if (getResources().getBoolean(R.bool.hac_enabled)) {
int hac=android.provider.Settings.System.getInt(phone.getContext().getContentResolver(),android.provider.Settings.System.HEARING_AID,0);
AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
audioManager.setParameter(CallFeaturesSetting.HAC_KEY,hac != 0 ? CallFeaturesSetting.HAC_VAL_ON : CallFeaturesSetting.HAC_VAL_OFF);
}
}",0.9305968669442792
184725,"@Override public void onCreate(){
  if (Config.LOGV)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      cdmaPhoneCallState=new CdmaPhoneCallState();
      cdmaPhoneCallState.CdmaPhoneCallStateInit();
    }
    if (BluetoothAdapter.getDefaultAdapter() != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    if ((pm.getSupportedWakeLockFlags() & PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) != 0x0) {
      mProximityWakeLock=pm.newWakeLock(PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK,LOG_TAG);
    }
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + mProximityWakeLock);
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mStatusBarManager=(StatusBarManager)getSystemService(Context.STATUS_BAR_SERVICE);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree);
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (Config.LOGV)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForAbsent(mHandler,EVENT_SIM_ABSENT,null);
      sim.registerForLocked(mHandler,EVENT_SIM_LOCKED,null);
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    if (phoneType == Phone.PHONE_TYPE_GSM) {
      phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    }
    PhoneUtils.initializeConnectionHandler(phone);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
boolean phoneIsCdma=(phone.getPhoneType() == Phone.PHONE_TYPE_CDMA);
if (phoneIsCdma) {
cdmaOtaProvisionData=new OtaUtils.CdmaOtaProvisionData();
cdmaOtaConfigData=new OtaUtils.CdmaOtaConfigData();
cdmaOtaScreenState=new OtaUtils.CdmaOtaScreenState();
cdmaOtaInCallScreenUiState=new OtaUtils.CdmaOtaInCallScreenUiState();
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
if (phoneIsCdma) {
int settingsTtyMode=android.provider.Settings.Secure.getInt(phone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,Phone.TTY_MODE_OFF);
phone.setTTYMode(settingsTtyMode,null);
}
}","@Override public void onCreate(){
  if (Config.LOGV)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      cdmaPhoneCallState=new CdmaPhoneCallState();
      cdmaPhoneCallState.CdmaPhoneCallStateInit();
    }
    if (BluetoothAdapter.getDefaultAdapter() != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    if ((pm.getSupportedWakeLockFlags() & PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) != 0x0) {
      mProximityWakeLock=pm.newWakeLock(PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK,LOG_TAG);
    }
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + mProximityWakeLock);
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mStatusBarManager=(StatusBarManager)getSystemService(Context.STATUS_BAR_SERVICE);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree);
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (Config.LOGV)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForAbsent(mHandler,EVENT_SIM_ABSENT,null);
      sim.registerForLocked(mHandler,EVENT_SIM_LOCKED,null);
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    if (phoneType == Phone.PHONE_TYPE_GSM) {
      phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    }
    PhoneUtils.initializeConnectionHandler(phone);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
boolean phoneIsCdma=(phone.getPhoneType() == Phone.PHONE_TYPE_CDMA);
if (phoneIsCdma) {
cdmaOtaProvisionData=new OtaUtils.CdmaOtaProvisionData();
cdmaOtaConfigData=new OtaUtils.CdmaOtaConfigData();
cdmaOtaScreenState=new OtaUtils.CdmaOtaScreenState();
cdmaOtaInCallScreenUiState=new OtaUtils.CdmaOtaInCallScreenUiState();
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
if (phoneIsCdma) {
int settingsTtyMode=android.provider.Settings.Secure.getInt(phone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,Phone.TTY_MODE_OFF);
phone.setTTYMode(settingsTtyMode,null);
int hac=android.provider.Settings.System.getInt(phone.getContext().getContentResolver(),android.provider.Settings.System.HEARING_AID,0);
AudioManager audioManager=(AudioManager)phone.getContext().getSystemService(Context.AUDIO_SERVICE);
audioManager.setParameter(CallFeaturesSetting.HAC_KEY,hac != 0 ? CallFeaturesSetting.HAC_VAL_ON : CallFeaturesSetting.HAC_VAL_OFF);
}
}",0.9610554089709764
184726,"@Override public void onCreate(){
  if (Config.LOGV)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      cdmaPhoneCallState=new CdmaPhoneCallState();
      cdmaPhoneCallState.CdmaPhoneCallStateInit();
    }
    if (BluetoothAdapter.getDefaultAdapter() != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    if ((pm.getSupportedWakeLockFlags() & PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) != 0x0) {
      mProximityWakeLock=pm.newWakeLock(PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK,LOG_TAG);
    }
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + mProximityWakeLock);
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mStatusBarManager=(StatusBarManager)getSystemService(Context.STATUS_BAR_SERVICE);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree);
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (Config.LOGV)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForAbsent(mHandler,EVENT_SIM_ABSENT,null);
      sim.registerForLocked(mHandler,EVENT_SIM_LOCKED,null);
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    if (phoneType == Phone.PHONE_TYPE_GSM) {
      phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    }
    PhoneUtils.initializeConnectionHandler(phone);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
boolean phoneIsCdma=(phone.getPhoneType() == Phone.PHONE_TYPE_CDMA);
if (phoneIsCdma) {
cdmaOtaProvisionData=new OtaUtils.CdmaOtaProvisionData();
cdmaOtaConfigData=new OtaUtils.CdmaOtaConfigData();
cdmaOtaScreenState=new OtaUtils.CdmaOtaScreenState();
cdmaOtaInCallScreenUiState=new OtaUtils.CdmaOtaInCallScreenUiState();
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
if (phoneIsCdma) {
int settingsTtyMode=android.provider.Settings.Secure.getInt(phone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,Phone.TTY_MODE_OFF);
phone.setTTYMode(settingsTtyMode,null);
}
}","@Override public void onCreate(){
  if (Config.LOGV)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      cdmaPhoneCallState=new CdmaPhoneCallState();
      cdmaPhoneCallState.CdmaPhoneCallStateInit();
    }
    if (BluetoothAdapter.getDefaultAdapter() != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    if ((pm.getSupportedWakeLockFlags() & PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) != 0x0) {
      mProximityWakeLock=pm.newWakeLock(PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK,LOG_TAG);
    }
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + mProximityWakeLock);
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mStatusBarManager=(StatusBarManager)getSystemService(Context.STATUS_BAR_SERVICE);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree);
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (Config.LOGV)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForAbsent(mHandler,EVENT_SIM_ABSENT,null);
      sim.registerForLocked(mHandler,EVENT_SIM_LOCKED,null);
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    if (phoneType == Phone.PHONE_TYPE_GSM) {
      phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    }
    PhoneUtils.initializeConnectionHandler(phone);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
boolean phoneIsCdma=(phone.getPhoneType() == Phone.PHONE_TYPE_CDMA);
if (phoneIsCdma) {
cdmaOtaProvisionData=new OtaUtils.CdmaOtaProvisionData();
cdmaOtaConfigData=new OtaUtils.CdmaOtaConfigData();
cdmaOtaScreenState=new OtaUtils.CdmaOtaScreenState();
cdmaOtaInCallScreenUiState=new OtaUtils.CdmaOtaInCallScreenUiState();
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
if (phoneIsCdma) {
int settingsTtyMode=android.provider.Settings.Secure.getInt(phone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,Phone.TTY_MODE_OFF);
phone.setTTYMode(settingsTtyMode,null);
int hac=android.provider.Settings.System.getInt(phone.getContext().getContentResolver(),android.provider.Settings.System.HEARING_AID,0);
AudioManager audioManager=(AudioManager)phone.getContext().getSystemService(Context.AUDIO_SERVICE);
audioManager.setParameter(CallFeaturesSetting.HAC_KEY,hac != 0 ? CallFeaturesSetting.HAC_VAL_ON : CallFeaturesSetting.HAC_VAL_OFF);
}
}",0.9610554089709764
184727,"@Override public void onCreate(){
  if (Config.LOGV)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      cdmaPhoneCallState=new CdmaPhoneCallState();
      cdmaPhoneCallState.CdmaPhoneCallStateInit();
    }
    if (BluetoothAdapter.getDefaultAdapter() != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    if ((pm.getSupportedWakeLockFlags() & PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) != 0x0) {
      mProximityWakeLock=pm.newWakeLock(PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK,LOG_TAG);
    }
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + mProximityWakeLock);
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mStatusBarManager=(StatusBarManager)getSystemService(Context.STATUS_BAR_SERVICE);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree);
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (Config.LOGV)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForAbsent(mHandler,EVENT_SIM_ABSENT,null);
      sim.registerForLocked(mHandler,EVENT_SIM_LOCKED,null);
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    if (phoneType == Phone.PHONE_TYPE_GSM) {
      phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    }
    PhoneUtils.initializeConnectionHandler(phone);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
boolean phoneIsCdma=(phone.getPhoneType() == Phone.PHONE_TYPE_CDMA);
if (phoneIsCdma) {
cdmaOtaProvisionData=new OtaUtils.CdmaOtaProvisionData();
cdmaOtaConfigData=new OtaUtils.CdmaOtaConfigData();
cdmaOtaScreenState=new OtaUtils.CdmaOtaScreenState();
cdmaOtaInCallScreenUiState=new OtaUtils.CdmaOtaInCallScreenUiState();
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
if (phoneIsCdma) {
int settingsTtyMode=android.provider.Settings.Secure.getInt(phone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,Phone.TTY_MODE_OFF);
phone.setTTYMode(settingsTtyMode,null);
}
}","@Override public void onCreate(){
  if (Config.LOGV)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      cdmaPhoneCallState=new CdmaPhoneCallState();
      cdmaPhoneCallState.CdmaPhoneCallStateInit();
    }
    if (BluetoothAdapter.getDefaultAdapter() != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    if ((pm.getSupportedWakeLockFlags() & PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) != 0x0) {
      mProximityWakeLock=pm.newWakeLock(PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK,LOG_TAG);
    }
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + mProximityWakeLock);
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mStatusBarManager=(StatusBarManager)getSystemService(Context.STATUS_BAR_SERVICE);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree);
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (Config.LOGV)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForAbsent(mHandler,EVENT_SIM_ABSENT,null);
      sim.registerForLocked(mHandler,EVENT_SIM_LOCKED,null);
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    if (phoneType == Phone.PHONE_TYPE_GSM) {
      phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    }
    PhoneUtils.initializeConnectionHandler(phone);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
boolean phoneIsCdma=(phone.getPhoneType() == Phone.PHONE_TYPE_CDMA);
if (phoneIsCdma) {
cdmaOtaProvisionData=new OtaUtils.CdmaOtaProvisionData();
cdmaOtaConfigData=new OtaUtils.CdmaOtaConfigData();
cdmaOtaScreenState=new OtaUtils.CdmaOtaScreenState();
cdmaOtaInCallScreenUiState=new OtaUtils.CdmaOtaInCallScreenUiState();
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
if (phoneIsCdma) {
int settingsTtyMode=android.provider.Settings.Secure.getInt(phone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,Phone.TTY_MODE_OFF);
phone.setTTYMode(settingsTtyMode,null);
int hac=android.provider.Settings.System.getInt(phone.getContext().getContentResolver(),android.provider.Settings.System.HEARING_AID,0);
AudioManager audioManager=(AudioManager)phone.getContext().getSystemService(Context.AUDIO_SERVICE);
audioManager.setParameter(CallFeaturesSetting.HAC_KEY,hac != 0 ? CallFeaturesSetting.HAC_VAL_ON : CallFeaturesSetting.HAC_VAL_OFF);
}
}",0.9610554089709764
184728,"@Override public void onCreate(){
  if (VDBG)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      cdmaPhoneCallState=new CdmaPhoneCallState();
      cdmaPhoneCallState.CdmaPhoneCallStateInit();
    }
    if (BluetoothAdapter.getDefaultAdapter() != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    if ((pm.getSupportedWakeLockFlags() & PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) != 0x0) {
      mProximityWakeLock=pm.newWakeLock(PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK,LOG_TAG);
    }
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + mProximityWakeLock);
    if (proximitySensorModeEnabled()) {
      mAccelerometerListener=new AccelerometerListener(this,this);
    }
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mStatusBarManager=(StatusBarManager)getSystemService(Context.STATUS_BAR_SERVICE);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree,new CallLogAsync());
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (VDBG)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    if (phoneType == Phone.PHONE_TYPE_GSM) {
      phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    }
    PhoneUtils.initializeConnectionHandler(phone);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_DOCK_EVENT);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
boolean phoneIsCdma=(phone.getPhoneType() == Phone.PHONE_TYPE_CDMA);
if (phoneIsCdma) {
cdmaOtaProvisionData=new OtaUtils.CdmaOtaProvisionData();
cdmaOtaConfigData=new OtaUtils.CdmaOtaConfigData();
cdmaOtaScreenState=new OtaUtils.CdmaOtaScreenState();
cdmaOtaInCallScreenUiState=new OtaUtils.CdmaOtaInCallScreenUiState();
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
if (phoneIsCdma) {
int settingsTtyMode=android.provider.Settings.Secure.getInt(phone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,Phone.TTY_MODE_OFF);
phone.setTTYMode(settingsTtyMode,null);
}
}","@Override public void onCreate(){
  if (VDBG)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    int phoneType=phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      cdmaPhoneCallState=new CdmaPhoneCallState();
      cdmaPhoneCallState.CdmaPhoneCallStateInit();
    }
    if (BluetoothAdapter.getDefaultAdapter() != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    if ((pm.getSupportedWakeLockFlags() & PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) != 0x0) {
      mProximityWakeLock=pm.newWakeLock(PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK,LOG_TAG);
    }
    if (DBG)     Log.d(LOG_TAG,""String_Node_Str"" + mProximityWakeLock);
    if (proximitySensorModeEnabled()) {
      mAccelerometerListener=new AccelerometerListener(this,this);
    }
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mStatusBarManager=(StatusBarManager)getSystemService(Context.STATUS_BAR_SERVICE);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree,new CallLogAsync());
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (VDBG)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    if (phoneType == Phone.PHONE_TYPE_GSM) {
      phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    }
    PhoneUtils.initializeConnectionHandler(phone);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
    intentFilter.addAction(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_DOCK_EVENT);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
boolean phoneIsCdma=(phone.getPhoneType() == Phone.PHONE_TYPE_CDMA);
if (phoneIsCdma) {
cdmaOtaProvisionData=new OtaUtils.CdmaOtaProvisionData();
cdmaOtaConfigData=new OtaUtils.CdmaOtaConfigData();
cdmaOtaScreenState=new OtaUtils.CdmaOtaScreenState();
cdmaOtaInCallScreenUiState=new OtaUtils.CdmaOtaInCallScreenUiState();
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
if (phoneIsCdma) {
int settingsTtyMode=android.provider.Settings.Secure.getInt(phone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,Phone.TTY_MODE_OFF);
phone.setTTYMode(settingsTtyMode,null);
int hac=android.provider.Settings.System.getInt(phone.getContext().getContentResolver(),android.provider.Settings.System.HEARING_AID,0);
AudioManager audioManager=(AudioManager)phone.getContext().getSystemService(Context.AUDIO_SERVICE);
audioManager.setParameter(CallFeaturesSetting.HAC_KEY,hac != 0 ? CallFeaturesSetting.HAC_VAL_ON : CallFeaturesSetting.HAC_VAL_OFF);
}
}",0.9614621409921672
184729,"/** 
 * Implemented for CallerInfoAsyncQuery.OnQueryCompleteListener interface. refreshes the CallCard data when it called.
 */
public void onQueryComplete(int token,Object cookie,CallerInfo ci){
  if (DBG)   log(""String_Node_Str"" + token + ""String_Node_Str""+ cookie+ ""String_Node_Str""+ ci);
  if (cookie instanceof Call) {
    if (DBG)     log(""String_Node_Str"");
    Call call=(Call)cookie;
    Connection conn=call.getEarliestConnection();
    PhoneUtils.CallerInfoToken cit=PhoneUtils.startGetCallerInfo(getContext(),conn,this,null);
    int presentation=Connection.PRESENTATION_ALLOWED;
    if (conn != null)     presentation=conn.getNumberPresentation();
    if (DBG)     log(""String_Node_Str"" + presentation + ""String_Node_Str""+ ci.contactExists);
    if (ci.contactExists) {
      updateDisplayForPerson(ci,Connection.PRESENTATION_ALLOWED,false,call);
    }
 else {
      updateDisplayForPerson(cit.currentInfo,presentation,false,call);
    }
    updatePhotoForCallState(call);
  }
 else   if (cookie instanceof TextView) {
    if (DBG)     log(""String_Node_Str"");
    ((TextView)cookie).setText(PhoneUtils.getCompactNameFromCallerInfo(ci,mContext));
  }
}","/** 
 * Implemented for CallerInfoAsyncQuery.OnQueryCompleteListener interface. refreshes the CallCard data when it called.
 */
public void onQueryComplete(int token,Object cookie,CallerInfo ci){
  if (DBG)   log(""String_Node_Str"" + token + ""String_Node_Str""+ cookie+ ""String_Node_Str""+ ci);
  if (cookie instanceof Call) {
    if (DBG)     log(""String_Node_Str"");
    Call call=(Call)cookie;
    Connection conn=null;
    int phoneType=mApplication.phone.getPhoneType();
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      conn=call.getLatestConnection();
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      conn=call.getEarliestConnection();
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + phoneType);
    }
    PhoneUtils.CallerInfoToken cit=PhoneUtils.startGetCallerInfo(getContext(),conn,this,null);
    int presentation=Connection.PRESENTATION_ALLOWED;
    if (conn != null)     presentation=conn.getNumberPresentation();
    if (DBG)     log(""String_Node_Str"" + presentation + ""String_Node_Str""+ ci.contactExists);
    if (ci.contactExists) {
      updateDisplayForPerson(ci,Connection.PRESENTATION_ALLOWED,false,call);
    }
 else {
      updateDisplayForPerson(cit.currentInfo,presentation,false,call);
    }
    updatePhotoForCallState(call);
  }
 else   if (cookie instanceof TextView) {
    if (DBG)     log(""String_Node_Str"");
    ((TextView)cookie).setText(PhoneUtils.getCompactNameFromCallerInfo(ci,mContext));
  }
}",0.8638783269961977
184730,"private void onRingbackTone(AsyncResult r){
  boolean playTone=(Boolean)(r.result);
  if (playTone == true) {
    if (mInCallRingbackTonePlayer == null) {
      mInCallRingbackTonePlayer=new InCallRingbackTonePlayer();
    }
    if (mInCallRingbackTonePlayer != null && mPhone.getForegroundCall().getState().isDialing() && mCurrentRingbackToneState == RINGBACK_TONE_OFF) {
      mInCallRingbackTonePlayer.start();
    }
  }
 else {
    if (mInCallRingbackTonePlayer != null && mCurrentRingbackToneState == RINGBACK_TONE_ON) {
      mInCallRingbackTonePlayer.stop();
    }
  }
}","private void onRingbackTone(AsyncResult r){
  boolean playTone=(Boolean)(r.result);
  if (playTone == true) {
    if (mPhone.getForegroundCall().getState().isDialing() && mInCallRingbackTonePlayer == null) {
      mInCallRingbackTonePlayer=new InCallTonePlayer(InCallTonePlayer.TONE_RING_BACK);
      mInCallRingbackTonePlayer.start();
    }
  }
 else {
    if (mInCallRingbackTonePlayer != null) {
      mInCallRingbackTonePlayer.stopTone();
      mInCallRingbackTonePlayer=null;
    }
  }
}",0.3573433115060804
184731,"private void onNewRingingConnection(AsyncResult r){
  Connection c=(Connection)r.result;
  if (DBG)   log(""String_Node_Str"" + c);
  boolean provisioned=Settings.Secure.getInt(mPhone.getContext().getContentResolver(),Settings.Secure.DEVICE_PROVISIONED,0) != 0;
  if (!provisioned) {
    Log.i(LOG_TAG,""String_Node_Str"");
    PhoneUtils.hangupRingingCall(mPhone);
    return;
  }
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    boolean activateState=(mApplication.cdmaOtaScreenState.otaScreenState == OtaUtils.CdmaOtaScreenState.OtaScreenState.OTA_STATUS_ACTIVATION);
    boolean dialogState=(mApplication.cdmaOtaScreenState.otaScreenState == OtaUtils.CdmaOtaScreenState.OtaScreenState.OTA_STATUS_SUCCESS_FAILURE_DLG);
    boolean spcState=mApplication.cdmaOtaProvisionData.inOtaSpcState;
    if (spcState) {
      Log.i(LOG_TAG,""String_Node_Str"");
      PhoneUtils.hangupRingingCall(mPhone);
      return;
    }
 else     if (activateState || dialogState) {
      if (dialogState)       mApplication.dismissOtaDialogs();
      mApplication.clearOtaState();
      mApplication.clearInCallScreenMode();
    }
  }
  if (c != null && c.isRinging()) {
    if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
      stopSignalInfoTone();
    }
    Call.State state=c.getState();
    if (VDBG)     log(""String_Node_Str"" + state);
    if (VDBG)     log(""String_Node_Str"");
    mApplication.requestWakeState(PhoneApp.WakeState.PARTIAL);
    if (state == Call.State.INCOMING) {
      PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
      startIncomingCallQuery(c);
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
      new InCallTonePlayer(InCallTonePlayer.TONE_CALL_WAITING).start();
      PhoneUtils.showIncomingCallUi();
    }
  }
  if (VDBG)   log(""String_Node_Str"");
}","private void onNewRingingConnection(AsyncResult r){
  Connection c=(Connection)r.result;
  if (DBG)   log(""String_Node_Str"" + c);
  boolean provisioned=Settings.Secure.getInt(mPhone.getContext().getContentResolver(),Settings.Secure.DEVICE_PROVISIONED,0) != 0;
  if (!provisioned) {
    Log.i(LOG_TAG,""String_Node_Str"");
    PhoneUtils.hangupRingingCall(mPhone);
    return;
  }
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    boolean activateState=(mApplication.cdmaOtaScreenState.otaScreenState == OtaUtils.CdmaOtaScreenState.OtaScreenState.OTA_STATUS_ACTIVATION);
    boolean dialogState=(mApplication.cdmaOtaScreenState.otaScreenState == OtaUtils.CdmaOtaScreenState.OtaScreenState.OTA_STATUS_SUCCESS_FAILURE_DLG);
    boolean spcState=mApplication.cdmaOtaProvisionData.inOtaSpcState;
    if (spcState) {
      Log.i(LOG_TAG,""String_Node_Str"");
      PhoneUtils.hangupRingingCall(mPhone);
      return;
    }
 else     if (activateState || dialogState) {
      if (dialogState)       mApplication.dismissOtaDialogs();
      mApplication.clearOtaState();
      mApplication.clearInCallScreenMode();
    }
  }
  if (c != null && c.isRinging()) {
    if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
      stopSignalInfoTone();
    }
    Call.State state=c.getState();
    if (VDBG)     log(""String_Node_Str"" + state);
    if (VDBG)     log(""String_Node_Str"");
    mApplication.requestWakeState(PhoneApp.WakeState.PARTIAL);
    if (state == Call.State.INCOMING) {
      PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
      startIncomingCallQuery(c);
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
      if (mCallWaitingTonePlayer == null) {
        mCallWaitingTonePlayer=new InCallTonePlayer(InCallTonePlayer.TONE_CALL_WAITING);
        mCallWaitingTonePlayer.start();
      }
      PhoneUtils.showIncomingCallUi();
    }
  }
  if (VDBG)   log(""String_Node_Str"");
}",0.9657219973009448
184732,"/** 
 * constructor
 */
public EmergencyTonePlayerVibrator(){
  Context context=mApplication.getApplicationContext();
  mAudioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
}","/** 
 * constructor
 */
public EmergencyTonePlayerVibrator(){
}",0.4827586206896552
184733,"public CallNotifier(PhoneApp app,Phone phone,Ringer ringer,BluetoothHandsfree btMgr){
  mApplication=app;
  mPhone=phone;
  mPhone.registerForNewRingingConnection(this,PHONE_NEW_RINGING_CONNECTION,null);
  mPhone.registerForPreciseCallStateChanged(this,PHONE_STATE_CHANGED,null);
  mPhone.registerForDisconnect(this,PHONE_DISCONNECT,null);
  mPhone.registerForUnknownConnection(this,PHONE_UNKNOWN_CONNECTION_APPEARED,null);
  mPhone.registerForIncomingRing(this,PHONE_INCOMING_RING,null);
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    mPhone.registerForCdmaOtaStatusChange(this,EVENT_OTA_PROVISION_CHANGE,null);
    if (DBG)     log(""String_Node_Str"");
    mPhone.registerForCallWaiting(this,PHONE_CDMA_CALL_WAITING,null);
    mPhone.registerForDisplayInfo(this,PHONE_STATE_DISPLAYINFO,null);
    mPhone.registerForSignalInfo(this,PHONE_STATE_SIGNALINFO,null);
    mPhone.registerForInCallVoicePrivacyOn(this,PHONE_ENHANCED_VP_ON,null);
    mPhone.registerForInCallVoicePrivacyOff(this,PHONE_ENHANCED_VP_OFF,null);
    try {
      mSignalInfoToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,TONE_RELATIVE_VOLUME_SIGNALINFO);
    }
 catch (    RuntimeException e) {
      Log.w(LOG_TAG,""String_Node_Str"" + ""String_Node_Str"" + e);
      mSignalInfoToneGenerator=null;
    }
  }
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_GSM) {
    mPhone.registerForRingbackTone(this,PHONE_RINGBACK_TONE,null);
  }
  mRinger=ringer;
  mBluetoothHandsfree=btMgr;
  TelephonyManager telephonyManager=(TelephonyManager)app.getSystemService(Context.TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_MESSAGE_WAITING_INDICATOR | PhoneStateListener.LISTEN_CALL_FORWARDING_INDICATOR);
}","public CallNotifier(PhoneApp app,Phone phone,Ringer ringer,BluetoothHandsfree btMgr){
  mApplication=app;
  mPhone=phone;
  mAudioManager=(AudioManager)mPhone.getContext().getSystemService(Context.AUDIO_SERVICE);
  mPhone.registerForNewRingingConnection(this,PHONE_NEW_RINGING_CONNECTION,null);
  mPhone.registerForPreciseCallStateChanged(this,PHONE_STATE_CHANGED,null);
  mPhone.registerForDisconnect(this,PHONE_DISCONNECT,null);
  mPhone.registerForUnknownConnection(this,PHONE_UNKNOWN_CONNECTION_APPEARED,null);
  mPhone.registerForIncomingRing(this,PHONE_INCOMING_RING,null);
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    mPhone.registerForCdmaOtaStatusChange(this,EVENT_OTA_PROVISION_CHANGE,null);
    if (DBG)     log(""String_Node_Str"");
    mPhone.registerForCallWaiting(this,PHONE_CDMA_CALL_WAITING,null);
    mPhone.registerForDisplayInfo(this,PHONE_STATE_DISPLAYINFO,null);
    mPhone.registerForSignalInfo(this,PHONE_STATE_SIGNALINFO,null);
    mPhone.registerForInCallVoicePrivacyOn(this,PHONE_ENHANCED_VP_ON,null);
    mPhone.registerForInCallVoicePrivacyOff(this,PHONE_ENHANCED_VP_OFF,null);
    try {
      mSignalInfoToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,TONE_RELATIVE_VOLUME_SIGNALINFO);
    }
 catch (    RuntimeException e) {
      Log.w(LOG_TAG,""String_Node_Str"" + ""String_Node_Str"" + e);
      mSignalInfoToneGenerator=null;
    }
  }
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_GSM) {
    mPhone.registerForRingbackTone(this,PHONE_RINGBACK_TONE,null);
  }
  mRinger=ringer;
  mBluetoothHandsfree=btMgr;
  TelephonyManager telephonyManager=(TelephonyManager)app.getSystemService(Context.TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_MESSAGE_WAITING_INDICATOR | PhoneStateListener.LISTEN_CALL_FORWARDING_INDICATOR);
}",0.9744453805110924
184734,"private void onPhoneStateChanged(AsyncResult r){
  Phone.State state=mPhone.getState();
  if (VDBG)   log(""String_Node_Str"" + state);
  NotificationMgr.getDefault().getStatusBarMgr().enableNotificationAlerts(state == Phone.State.IDLE);
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    if ((mPhone.getForegroundCall().getState() == Call.State.ACTIVE) && ((mPreviousCdmaCallState == Call.State.DIALING) || (mPreviousCdmaCallState == Call.State.ALERTING))) {
      if (mIsCdmaRedialCall) {
        int toneToPlay=InCallTonePlayer.TONE_REDIAL;
        new InCallTonePlayer(toneToPlay).start();
      }
      stopSignalInfoTone();
    }
    mPreviousCdmaCallState=mPhone.getForegroundCall().getState();
  }
  mApplication.updateBluetoothIndication(false);
  mApplication.updatePhoneState(state);
  if (state == Phone.State.OFFHOOK) {
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
    if (VDBG)     log(""String_Node_Str"");
    if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
      AudioManager audioManager=(AudioManager)mPhone.getContext().getSystemService(Context.AUDIO_SERVICE);
      if (audioManager.getMode() != AudioManager.MODE_IN_CALL) {
        PhoneUtils.setAudioMode(mPhone.getContext(),AudioManager.MODE_IN_CALL);
      }
    }
    if (!mApplication.isShowingCallScreen()) {
      mApplication.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
      mApplication.requestWakeState(PhoneApp.WakeState.SLEEP);
    }
    if (DBG)     log(""String_Node_Str"");
    mRinger.stopRing();
    NotificationMgr.getDefault().updateInCallNotification();
  }
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    Connection c=mPhone.getForegroundCall().getLatestConnection();
    if ((c != null) && (PhoneNumberUtils.isEmergencyNumber(c.getAddress()))) {
      if (VDBG)       log(""String_Node_Str"");
      Call.State callState=mPhone.getForegroundCall().getState();
      if (mEmergencyTonePlayerVibrator == null) {
        mEmergencyTonePlayerVibrator=new EmergencyTonePlayerVibrator();
      }
      if (callState == Call.State.DIALING || callState == Call.State.ALERTING) {
        mIsEmergencyToneOn=Settings.System.getInt(mPhone.getContext().getContentResolver(),Settings.System.EMERGENCY_TONE,EMERGENCY_TONE_OFF);
        if (mIsEmergencyToneOn != EMERGENCY_TONE_OFF && mCurrentEmergencyToneState == EMERGENCY_TONE_OFF) {
          if (mEmergencyTonePlayerVibrator != null) {
            mEmergencyTonePlayerVibrator.start();
          }
        }
      }
 else       if (callState == Call.State.ACTIVE) {
        if (mCurrentEmergencyToneState != EMERGENCY_TONE_OFF) {
          if (mEmergencyTonePlayerVibrator != null) {
            mEmergencyTonePlayerVibrator.stop();
          }
        }
      }
    }
  }
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_GSM) {
    Call.State callState=mPhone.getForegroundCall().getState();
    if (!callState.isDialing()) {
      if (mInCallRingbackTonePlayer != null && mCurrentRingbackToneState == RINGBACK_TONE_ON) {
        mInCallRingbackTonePlayer.stop();
      }
    }
  }
}","private void onPhoneStateChanged(AsyncResult r){
  Phone.State state=mPhone.getState();
  if (VDBG)   log(""String_Node_Str"" + state);
  NotificationMgr.getDefault().getStatusBarMgr().enableNotificationAlerts(state == Phone.State.IDLE);
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    if ((mPhone.getForegroundCall().getState() == Call.State.ACTIVE) && ((mPreviousCdmaCallState == Call.State.DIALING) || (mPreviousCdmaCallState == Call.State.ALERTING))) {
      if (mIsCdmaRedialCall) {
        int toneToPlay=InCallTonePlayer.TONE_REDIAL;
        new InCallTonePlayer(toneToPlay).start();
      }
      stopSignalInfoTone();
    }
    mPreviousCdmaCallState=mPhone.getForegroundCall().getState();
  }
  mApplication.updateBluetoothIndication(false);
  mApplication.updatePhoneState(state);
  if (state == Phone.State.OFFHOOK) {
    if (mCallWaitingTonePlayer != null) {
      mCallWaitingTonePlayer.stopTone();
      mCallWaitingTonePlayer=null;
    }
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
    if (VDBG)     log(""String_Node_Str"");
    if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
      if (mAudioManager.getMode() != AudioManager.MODE_IN_CALL) {
        PhoneUtils.setAudioMode(mPhone.getContext(),AudioManager.MODE_IN_CALL);
      }
    }
    if (!mApplication.isShowingCallScreen()) {
      mApplication.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
      mApplication.requestWakeState(PhoneApp.WakeState.SLEEP);
    }
    if (DBG)     log(""String_Node_Str"");
    mRinger.stopRing();
    NotificationMgr.getDefault().updateInCallNotification();
  }
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    Connection c=mPhone.getForegroundCall().getLatestConnection();
    if ((c != null) && (PhoneNumberUtils.isEmergencyNumber(c.getAddress()))) {
      if (VDBG)       log(""String_Node_Str"");
      Call.State callState=mPhone.getForegroundCall().getState();
      if (mEmergencyTonePlayerVibrator == null) {
        mEmergencyTonePlayerVibrator=new EmergencyTonePlayerVibrator();
      }
      if (callState == Call.State.DIALING || callState == Call.State.ALERTING) {
        mIsEmergencyToneOn=Settings.System.getInt(mPhone.getContext().getContentResolver(),Settings.System.EMERGENCY_TONE,EMERGENCY_TONE_OFF);
        if (mIsEmergencyToneOn != EMERGENCY_TONE_OFF && mCurrentEmergencyToneState == EMERGENCY_TONE_OFF) {
          if (mEmergencyTonePlayerVibrator != null) {
            mEmergencyTonePlayerVibrator.start();
          }
        }
      }
 else       if (callState == Call.State.ACTIVE) {
        if (mCurrentEmergencyToneState != EMERGENCY_TONE_OFF) {
          if (mEmergencyTonePlayerVibrator != null) {
            mEmergencyTonePlayerVibrator.stop();
          }
        }
      }
    }
  }
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_GSM) {
    Call.State callState=mPhone.getForegroundCall().getState();
    if (!callState.isDialing()) {
      if (mInCallRingbackTonePlayer != null) {
        mInCallRingbackTonePlayer.stopTone();
        mInCallRingbackTonePlayer=null;
      }
    }
  }
}",0.9413103560396684
184735,"private void onDisconnect(AsyncResult r){
  if (VDBG)   log(""String_Node_Str"" + mPhone.getState());
  mCdmaVoicePrivacyState=false;
  int autoretrySetting=0;
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    autoretrySetting=android.provider.Settings.System.getInt(mPhone.getContext().getContentResolver(),android.provider.Settings.System.CALL_AUTO_RETRY,0);
  }
  if (mPhone.getState() == Phone.State.IDLE) {
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  }
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    stopSignalInfoTone();
    mApplication.cdmaPhoneCallState.resetCdmaPhoneCallState();
    removeMessages(CALLWAITING_CALLERINFO_DISPLAY_DONE);
    removeMessages(CALLWAITING_ADDCALL_DISABLE_TIMEOUT);
  }
  Connection c=(Connection)r.result;
  if (DBG && c != null) {
    log(""String_Node_Str"" + c.getDisconnectCause() + ""String_Node_Str""+ c.isIncoming()+ ""String_Node_Str""+ c.getCreateTime());
  }
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    if (mPhone.getRingingCall().getState() == Call.State.INCOMING) {
      if (DBG)       log(""String_Node_Str"");
      NotificationMgr.getDefault().cancelCallInProgressNotification();
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      mRinger.stopRing();
    }
  }
 else {
    if (DBG)     log(""String_Node_Str"");
    mRinger.stopRing();
  }
  int toneToPlay=InCallTonePlayer.TONE_NONE;
  if (c != null) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if (cause == Connection.DisconnectCause.BUSY) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_BUSY;
    }
 else     if (cause == Connection.DisconnectCause.CONGESTION) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CONGESTION;
    }
 else     if (((cause == Connection.DisconnectCause.NORMAL) || (cause == Connection.DisconnectCause.LOCAL)) && (mApplication.isOtaCallInActiveState())) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_OTA_CALL_END;
    }
 else     if (cause == Connection.DisconnectCause.CDMA_REORDER) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_REORDER;
    }
 else     if (cause == Connection.DisconnectCause.CDMA_INTERCEPT) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_INTERCEPT;
    }
 else     if (cause == Connection.DisconnectCause.CDMA_DROP) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CDMA_DROP;
    }
 else     if (cause == Connection.DisconnectCause.OUT_OF_SERVICE) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_OUT_OF_SERVICE;
    }
 else     if (cause == Connection.DisconnectCause.ERROR_UNSPECIFIED) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CALL_ENDED;
    }
  }
  if ((toneToPlay == InCallTonePlayer.TONE_NONE) && (mPhone.getState() == Phone.State.IDLE) && (c != null)) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if ((cause == Connection.DisconnectCause.NORMAL) || (cause == Connection.DisconnectCause.LOCAL)) {
      if (VDBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CALL_ENDED;
      mIsCdmaRedialCall=false;
    }
  }
  if (mPhone.getState() == Phone.State.IDLE) {
    if (toneToPlay == InCallTonePlayer.TONE_NONE) {
      resetAudioStateAfterDisconnect();
    }
    NotificationMgr.getDefault().cancelCallInProgressNotification();
    if (!mApplication.isShowingCallScreen()) {
      if (VDBG)       log(""String_Node_Str"");
      mApplication.dismissCallScreen();
    }
  }
  if (c != null) {
    final String number=c.getAddress();
    final long date=c.getCreateTime();
    final long duration=c.getDurationMillis();
    final Connection.DisconnectCause cause=c.getDisconnectCause();
    final int callLogType;
    if (c.isIncoming()) {
      callLogType=(cause == Connection.DisconnectCause.INCOMING_MISSED ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE);
    }
 else {
      callLogType=CallLog.Calls.OUTGOING_TYPE;
    }
    if (VDBG)     log(""String_Node_Str"" + callLogType + ""String_Node_Str""+ c.getUserData());
{
      final CallerInfo ci=getCallerInfoFromConnection(c);
      final String logNumber=getLogNumber(c,ci);
      if (DBG)       log(""String_Node_Str"" + logNumber);
      final int presentation=getPresentation(c,ci);
      if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
        if ((PhoneNumberUtils.isEmergencyNumber(number)) && (mCurrentEmergencyToneState != EMERGENCY_TONE_OFF)) {
          if (mEmergencyTonePlayerVibrator != null) {
            mEmergencyTonePlayerVibrator.stop();
          }
        }
      }
      final boolean shouldNotlogEmergencyNumber=(mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA);
      final boolean isOtaNumber=(mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) && mPhone.isOtaSpNumber(number);
      final boolean isEmergencyNumber=PhoneNumberUtils.isEmergencyNumber(number);
      if (!(isOtaNumber || isEmergencyNumber && shouldNotlogEmergencyNumber)) {
        Thread t=new Thread(){
          public void run(){
            Calls.addCall(ci,mApplication,logNumber,presentation,callLogType,date,(int)duration / 1000);
          }
        }
;
        t.start();
      }
    }
    if (callLogType == CallLog.Calls.MISSED_TYPE) {
      showMissedCallNotification(c,date);
    }
    if (toneToPlay != InCallTonePlayer.TONE_NONE) {
      if (VDBG)       log(""String_Node_Str"" + toneToPlay + ""String_Node_Str"");
      new InCallTonePlayer(toneToPlay).start();
    }
    if (mPhone.getState() == Phone.State.IDLE) {
      if (!mApplication.isShowingCallScreen()) {
        if (VDBG)         log(""String_Node_Str"");
        mApplication.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
        mApplication.requestWakeState(PhoneApp.WakeState.SLEEP);
      }
 else {
        if (VDBG)         log(""String_Node_Str"");
      }
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
    }
    if (((mPreviousCdmaCallState == Call.State.DIALING) || (mPreviousCdmaCallState == Call.State.ALERTING)) && (!PhoneNumberUtils.isEmergencyNumber(number)) && (cause != Connection.DisconnectCause.INCOMING_MISSED)&& (cause != Connection.DisconnectCause.NORMAL)&& (cause != Connection.DisconnectCause.LOCAL)&& (cause != Connection.DisconnectCause.INCOMING_REJECTED)) {
      if (!mIsCdmaRedialCall) {
        if (autoretrySetting == InCallScreen.AUTO_RETRY_ON) {
          PhoneUtils.placeCall(mPhone,number,null);
          mIsCdmaRedialCall=true;
        }
 else {
          mIsCdmaRedialCall=false;
        }
      }
 else {
        mIsCdmaRedialCall=false;
      }
    }
  }
}","private void onDisconnect(AsyncResult r){
  if (VDBG)   log(""String_Node_Str"" + mPhone.getState());
  mCdmaVoicePrivacyState=false;
  int autoretrySetting=0;
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    autoretrySetting=android.provider.Settings.System.getInt(mPhone.getContext().getContentResolver(),android.provider.Settings.System.CALL_AUTO_RETRY,0);
  }
  if (mPhone.getState() == Phone.State.IDLE) {
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  }
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    stopSignalInfoTone();
    mApplication.cdmaPhoneCallState.resetCdmaPhoneCallState();
    removeMessages(CALLWAITING_CALLERINFO_DISPLAY_DONE);
    removeMessages(CALLWAITING_ADDCALL_DISABLE_TIMEOUT);
  }
  Connection c=(Connection)r.result;
  if (DBG && c != null) {
    log(""String_Node_Str"" + c.getDisconnectCause() + ""String_Node_Str""+ c.isIncoming()+ ""String_Node_Str""+ c.getCreateTime());
  }
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    if (mPhone.getRingingCall().getState() == Call.State.INCOMING) {
      if (DBG)       log(""String_Node_Str"");
      NotificationMgr.getDefault().cancelCallInProgressNotification();
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      mRinger.stopRing();
    }
  }
 else {
    if (DBG)     log(""String_Node_Str"");
    mRinger.stopRing();
  }
  if (mCallWaitingTonePlayer != null) {
    mCallWaitingTonePlayer.stopTone();
    mCallWaitingTonePlayer=null;
  }
  int toneToPlay=InCallTonePlayer.TONE_NONE;
  if (c != null) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if (cause == Connection.DisconnectCause.BUSY) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_BUSY;
    }
 else     if (cause == Connection.DisconnectCause.CONGESTION) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CONGESTION;
    }
 else     if (((cause == Connection.DisconnectCause.NORMAL) || (cause == Connection.DisconnectCause.LOCAL)) && (mApplication.isOtaCallInActiveState())) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_OTA_CALL_END;
    }
 else     if (cause == Connection.DisconnectCause.CDMA_REORDER) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_REORDER;
    }
 else     if (cause == Connection.DisconnectCause.CDMA_INTERCEPT) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_INTERCEPT;
    }
 else     if (cause == Connection.DisconnectCause.CDMA_DROP) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CDMA_DROP;
    }
 else     if (cause == Connection.DisconnectCause.OUT_OF_SERVICE) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_OUT_OF_SERVICE;
    }
 else     if (cause == Connection.DisconnectCause.ERROR_UNSPECIFIED) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CALL_ENDED;
    }
  }
  if ((toneToPlay == InCallTonePlayer.TONE_NONE) && (mPhone.getState() == Phone.State.IDLE) && (c != null)) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if ((cause == Connection.DisconnectCause.NORMAL) || (cause == Connection.DisconnectCause.LOCAL)) {
      if (VDBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CALL_ENDED;
      mIsCdmaRedialCall=false;
    }
  }
  if (mPhone.getState() == Phone.State.IDLE) {
    if (toneToPlay == InCallTonePlayer.TONE_NONE) {
      resetAudioStateAfterDisconnect();
    }
    NotificationMgr.getDefault().cancelCallInProgressNotification();
    if (!mApplication.isShowingCallScreen()) {
      if (VDBG)       log(""String_Node_Str"");
      mApplication.dismissCallScreen();
    }
  }
  if (c != null) {
    final String number=c.getAddress();
    final long date=c.getCreateTime();
    final long duration=c.getDurationMillis();
    final Connection.DisconnectCause cause=c.getDisconnectCause();
    final int callLogType;
    if (c.isIncoming()) {
      callLogType=(cause == Connection.DisconnectCause.INCOMING_MISSED ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE);
    }
 else {
      callLogType=CallLog.Calls.OUTGOING_TYPE;
    }
    if (VDBG)     log(""String_Node_Str"" + callLogType + ""String_Node_Str""+ c.getUserData());
{
      final CallerInfo ci=getCallerInfoFromConnection(c);
      final String logNumber=getLogNumber(c,ci);
      if (DBG)       log(""String_Node_Str"" + logNumber);
      final int presentation=getPresentation(c,ci);
      if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
        if ((PhoneNumberUtils.isEmergencyNumber(number)) && (mCurrentEmergencyToneState != EMERGENCY_TONE_OFF)) {
          if (mEmergencyTonePlayerVibrator != null) {
            mEmergencyTonePlayerVibrator.stop();
          }
        }
      }
      final boolean shouldNotlogEmergencyNumber=(mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA);
      final boolean isOtaNumber=(mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) && mPhone.isOtaSpNumber(number);
      final boolean isEmergencyNumber=PhoneNumberUtils.isEmergencyNumber(number);
      if (!(isOtaNumber || isEmergencyNumber && shouldNotlogEmergencyNumber)) {
        Thread t=new Thread(){
          public void run(){
            Calls.addCall(ci,mApplication,logNumber,presentation,callLogType,date,(int)duration / 1000);
          }
        }
;
        t.start();
      }
    }
    if (callLogType == CallLog.Calls.MISSED_TYPE) {
      showMissedCallNotification(c,date);
    }
    if (toneToPlay != InCallTonePlayer.TONE_NONE) {
      if (VDBG)       log(""String_Node_Str"" + toneToPlay + ""String_Node_Str"");
      new InCallTonePlayer(toneToPlay).start();
    }
    if (mPhone.getState() == Phone.State.IDLE) {
      if (!mApplication.isShowingCallScreen()) {
        if (VDBG)         log(""String_Node_Str"");
        mApplication.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
        mApplication.requestWakeState(PhoneApp.WakeState.SLEEP);
      }
 else {
        if (VDBG)         log(""String_Node_Str"");
      }
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
    }
    if (((mPreviousCdmaCallState == Call.State.DIALING) || (mPreviousCdmaCallState == Call.State.ALERTING)) && (!PhoneNumberUtils.isEmergencyNumber(number)) && (cause != Connection.DisconnectCause.INCOMING_MISSED)&& (cause != Connection.DisconnectCause.NORMAL)&& (cause != Connection.DisconnectCause.LOCAL)&& (cause != Connection.DisconnectCause.INCOMING_REJECTED)) {
      if (!mIsCdmaRedialCall) {
        if (autoretrySetting == InCallScreen.AUTO_RETRY_ON) {
          PhoneUtils.placeCall(mPhone,number,null);
          mIsCdmaRedialCall=true;
        }
 else {
          mIsCdmaRedialCall=false;
        }
      }
 else {
        mIsCdmaRedialCall=false;
      }
    }
  }
}",0.991470588235294
184736,"/** 
 * start the ringback tone
 */
private void start(){
  if (VDBG)   log(""String_Node_Str"");
  AudioManager audioManager=(AudioManager)mPhone.getContext().getSystemService(Context.AUDIO_SERVICE);
  try {
    int stream;
    if (mBluetoothHandsfree != null) {
      stream=mBluetoothHandsfree.isAudioOn() ? AudioManager.STREAM_BLUETOOTH_SCO : AudioManager.STREAM_VOICE_CALL;
    }
 else {
      stream=AudioManager.STREAM_VOICE_CALL;
    }
    mToneGenerator=new ToneGenerator(stream,InCallTonePlayer.TONE_RELATIVE_VOLUME_HIPRI);
  }
 catch (  RuntimeException e) {
    Log.w(LOG_TAG,""String_Node_Str"" + e);
    mToneGenerator=null;
  }
  if (mToneGenerator != null) {
    mToneGenerator.startTone(ToneGenerator.TONE_SUP_RINGTONE);
    mCurrentRingbackToneState=RINGBACK_TONE_ON;
  }
}","/** 
 * Start the emergency tone or vibrator.
 */
private void start(){
  if (VDBG)   log(""String_Node_Str"");
  int ringerMode=mAudioManager.getRingerMode();
  if ((mIsEmergencyToneOn == EMERGENCY_TONE_ALERT) && (ringerMode == AudioManager.RINGER_MODE_NORMAL)) {
    if (VDBG)     log(""String_Node_Str"");
    mToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,InCallTonePlayer.TONE_RELATIVE_VOLUME_HIPRI);
    if (mToneGenerator != null) {
      mToneGenerator.startTone(ToneGenerator.TONE_CDMA_EMERGENCY_RINGBACK);
      mCurrentEmergencyToneState=EMERGENCY_TONE_ALERT;
    }
  }
 else   if (mIsEmergencyToneOn == EMERGENCY_TONE_VIBRATE) {
    if (VDBG)     log(""String_Node_Str"");
    mEmgVibrator=new Vibrator();
    if (mEmgVibrator != null) {
      mEmgVibrator.vibrate(mVibratePattern,0);
      mCurrentEmergencyToneState=EMERGENCY_TONE_VIBRATE;
    }
  }
}",0.2405291641611545
184737,"InCallTonePlayer(int toneId){
  super();
  mToneId=toneId;
}","InCallTonePlayer(int toneId){
  super();
  mToneId=toneId;
  mState=TONE_OFF;
}",0.8633093525179856
184738,"void updateCallNotifierRegistrationsAfterRadioTechnologyChange(){
  if (DBG)   Log.d(LOG_TAG,""String_Node_Str"");
  mPhone.unregisterForNewRingingConnection(this);
  mPhone.unregisterForPreciseCallStateChanged(this);
  mPhone.unregisterForDisconnect(this);
  mPhone.unregisterForUnknownConnection(this);
  mPhone.unregisterForIncomingRing(this);
  mPhone.unregisterForCallWaiting(this);
  mPhone.unregisterForDisplayInfo(this);
  mPhone.unregisterForSignalInfo(this);
  mPhone.unregisterForCdmaOtaStatusChange(this);
  mPhone.unregisterForRingbackTone(this);
  if (mSignalInfoToneGenerator != null) {
    mSignalInfoToneGenerator.release();
  }
  mInCallRingbackTonePlayer=null;
  mPhone.unregisterForInCallVoicePrivacyOn(this);
  mPhone.unregisterForInCallVoicePrivacyOff(this);
  mPhone.registerForNewRingingConnection(this,PHONE_NEW_RINGING_CONNECTION,null);
  mPhone.registerForPreciseCallStateChanged(this,PHONE_STATE_CHANGED,null);
  mPhone.registerForDisconnect(this,PHONE_DISCONNECT,null);
  mPhone.registerForUnknownConnection(this,PHONE_UNKNOWN_CONNECTION_APPEARED,null);
  mPhone.registerForIncomingRing(this,PHONE_INCOMING_RING,null);
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    if (DBG)     log(""String_Node_Str"");
    mPhone.registerForCallWaiting(this,PHONE_CDMA_CALL_WAITING,null);
    mPhone.registerForDisplayInfo(this,PHONE_STATE_DISPLAYINFO,null);
    mPhone.registerForSignalInfo(this,PHONE_STATE_SIGNALINFO,null);
    mPhone.registerForCdmaOtaStatusChange(this,EVENT_OTA_PROVISION_CHANGE,null);
    try {
      mSignalInfoToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,TONE_RELATIVE_VOLUME_SIGNALINFO);
    }
 catch (    RuntimeException e) {
      Log.w(LOG_TAG,""String_Node_Str"" + ""String_Node_Str"" + e);
      mSignalInfoToneGenerator=null;
    }
    mPhone.registerForInCallVoicePrivacyOn(this,PHONE_ENHANCED_VP_ON,null);
    mPhone.registerForInCallVoicePrivacyOff(this,PHONE_ENHANCED_VP_OFF,null);
  }
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_GSM) {
    mPhone.registerForRingbackTone(this,PHONE_RINGBACK_TONE,null);
  }
}","void updateCallNotifierRegistrationsAfterRadioTechnologyChange(){
  if (DBG)   Log.d(LOG_TAG,""String_Node_Str"");
  mPhone.unregisterForNewRingingConnection(this);
  mPhone.unregisterForPreciseCallStateChanged(this);
  mPhone.unregisterForDisconnect(this);
  mPhone.unregisterForUnknownConnection(this);
  mPhone.unregisterForIncomingRing(this);
  mPhone.unregisterForCallWaiting(this);
  mPhone.unregisterForDisplayInfo(this);
  mPhone.unregisterForSignalInfo(this);
  mPhone.unregisterForCdmaOtaStatusChange(this);
  mPhone.unregisterForRingbackTone(this);
  if (mSignalInfoToneGenerator != null) {
    mSignalInfoToneGenerator.release();
  }
  mInCallRingbackTonePlayer=null;
  mCallWaitingTonePlayer=null;
  mPhone.unregisterForInCallVoicePrivacyOn(this);
  mPhone.unregisterForInCallVoicePrivacyOff(this);
  mPhone.registerForNewRingingConnection(this,PHONE_NEW_RINGING_CONNECTION,null);
  mPhone.registerForPreciseCallStateChanged(this,PHONE_STATE_CHANGED,null);
  mPhone.registerForDisconnect(this,PHONE_DISCONNECT,null);
  mPhone.registerForUnknownConnection(this,PHONE_UNKNOWN_CONNECTION_APPEARED,null);
  mPhone.registerForIncomingRing(this,PHONE_INCOMING_RING,null);
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {
    if (DBG)     log(""String_Node_Str"");
    mPhone.registerForCallWaiting(this,PHONE_CDMA_CALL_WAITING,null);
    mPhone.registerForDisplayInfo(this,PHONE_STATE_DISPLAYINFO,null);
    mPhone.registerForSignalInfo(this,PHONE_STATE_SIGNALINFO,null);
    mPhone.registerForCdmaOtaStatusChange(this,EVENT_OTA_PROVISION_CHANGE,null);
    try {
      mSignalInfoToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,TONE_RELATIVE_VOLUME_SIGNALINFO);
    }
 catch (    RuntimeException e) {
      Log.w(LOG_TAG,""String_Node_Str"" + ""String_Node_Str"" + e);
      mSignalInfoToneGenerator=null;
    }
    mPhone.registerForInCallVoicePrivacyOn(this,PHONE_ENHANCED_VP_ON,null);
    mPhone.registerForInCallVoicePrivacyOff(this,PHONE_ENHANCED_VP_OFF,null);
  }
  if (mPhone.getPhoneType() == Phone.PHONE_TYPE_GSM) {
    mPhone.registerForRingbackTone(this,PHONE_RINGBACK_TONE,null);
  }
}",0.992631328737818
184739,"/** 
 * If the ringback tone is playing, stop it and release toneGenerator.
 */
private void stop(){
  if (VDBG)   log(""String_Node_Str"");
  if (mToneGenerator != null) {
    mToneGenerator.stopTone();
    mToneGenerator.release();
    mToneGenerator=null;
  }
  mCurrentRingbackToneState=RINGBACK_TONE_OFF;
}","/** 
 * If the emergency tone is active, stop the tone or vibrator accordingly.
 */
private void stop(){
  if (VDBG)   log(""String_Node_Str"");
  if ((mCurrentEmergencyToneState == EMERGENCY_TONE_ALERT) && (mToneGenerator != null)) {
    mToneGenerator.stopTone();
    mToneGenerator.release();
  }
 else   if ((mCurrentEmergencyToneState == EMERGENCY_TONE_VIBRATE) && (mEmgVibrator != null)) {
    mEmgVibrator.cancel();
  }
  mCurrentEmergencyToneState=EMERGENCY_TONE_OFF;
}",0.5280612244897959
184740,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(R.layout.emergency_dialer);
  Resources r=getResources();
  mDigitsBackground=r.getDrawable(R.drawable.btn_dial_textfield_active);
  mDigitsEmptyBackground=r.getDrawable(R.drawable.btn_dial_textfield);
  mDigits=(EditText)findViewById(R.id.digits);
  mDigits.setKeyListener(DialerKeyListener.getInstance());
  mDigits.setOnClickListener(this);
  mDigits.setOnKeyListener(this);
  mDigits.setLongClickable(false);
  maybeAddNumberFormatting();
  View view=findViewById(R.id.one);
  if (view != null) {
    setupKeypad();
  }
  mVoicemailDialAndDeleteRow=findViewById(R.id.voicemailAndDialAndDelete);
  if (r.getBoolean(R.bool.config_show_onscreen_dial_button)) {
    mVoicemailDialAndDeleteRow.findViewById(R.id.voicemailButton).setEnabled(false);
    mDialButton=mVoicemailDialAndDeleteRow.findViewById(R.id.dialButton);
    mDialButton.setOnClickListener(this);
    mDelete=mVoicemailDialAndDeleteRow.findViewById(R.id.deleteButton);
    mDelete.setOnClickListener(this);
    mDelete.setOnLongClickListener(this);
  }
 else {
    mVoicemailDialAndDeleteRow.setVisibility(View.GONE);
    mVoicemailDialAndDeleteRow=null;
  }
  if (icicle != null) {
    super.onRestoreInstanceState(icicle);
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_DTMF,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(LOG_TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  final IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(Intent.ACTION_SCREEN_OFF);
  registerReceiver(mBroadcastReceiver,intentFilter);
  initVibrationPattern(r);
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(R.layout.emergency_dialer);
  Resources r=getResources();
  mDigitsBackground=r.getDrawable(R.drawable.btn_dial_textfield_active);
  mDigitsEmptyBackground=r.getDrawable(R.drawable.btn_dial_textfield);
  mDigits=(EditText)findViewById(R.id.digits);
  mDigits.setKeyListener(DialerKeyListener.getInstance());
  mDigits.setOnClickListener(this);
  mDigits.setOnKeyListener(this);
  mDigits.setLongClickable(false);
  maybeAddNumberFormatting();
  View view=findViewById(R.id.one);
  if (view != null) {
    setupKeypad();
  }
  mVoicemailDialAndDeleteRow=findViewById(R.id.voicemailAndDialAndDelete);
  if (r.getBoolean(R.bool.config_show_onscreen_dial_button)) {
    mVoicemailDialAndDeleteRow.findViewById(R.id.voicemailButton).setEnabled(false);
    mDialButton=mVoicemailDialAndDeleteRow.findViewById(R.id.dialButton);
    mDialButton.setOnClickListener(this);
    mDelete=mVoicemailDialAndDeleteRow.findViewById(R.id.deleteButton);
    mDelete.setOnClickListener(this);
    mDelete.setOnLongClickListener(this);
  }
 else {
    mVoicemailDialAndDeleteRow.setVisibility(View.GONE);
    mVoicemailDialAndDeleteRow=null;
  }
  if (icicle != null) {
    super.onRestoreInstanceState(icicle);
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(DIAL_TONE_STREAM_TYPE,TONE_RELATIVE_VOLUME);
        setVolumeControlStream(DIAL_TONE_STREAM_TYPE);
      }
 catch (      RuntimeException e) {
        Log.w(LOG_TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  final IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(Intent.ACTION_SCREEN_OFF);
  registerReceiver(mBroadcastReceiver,intentFilter);
  initVibrationPattern(r);
}",0.9773355444997236
184741,"/** 
 * Convert a Connection object into a single +CLCC result for CDMA phones 
 */
private String cdmaConnectionToClccEntry(int index,Connection c){
  int state;
  PhoneApp app=PhoneApp.getInstance();
  CdmaPhoneCallState.PhoneCallState currCdmaCallState=app.cdmaPhoneCallState.getCurrentCallState();
  CdmaPhoneCallState.PhoneCallState prevCdmaCallState=app.cdmaPhoneCallState.getPreviousCallState();
  if ((prevCdmaCallState == CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) && (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL)) {
    state=0;
  }
 else {
switch (c.getState()) {
case ACTIVE:
      if (index == 0) {
        state=mCdmaIsSecondCallActive ? 1 : 0;
      }
 else {
        state=mCdmaIsSecondCallActive ? 0 : 1;
      }
    break;
case HOLDING:
  state=1;
break;
case DIALING:
state=2;
break;
case ALERTING:
state=3;
break;
case INCOMING:
state=4;
break;
case WAITING:
state=5;
break;
default :
return null;
}
}
int mpty=0;
if (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE) {
mpty=0;
}
 else {
mpty=1;
}
int direction=c.isIncoming() ? 1 : 0;
String number=c.getAddress();
int type=-1;
if (number != null) {
type=PhoneNumberUtils.toaFromString(number);
}
String result=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ direction+ ""String_Node_Str""+ state+ ""String_Node_Str""+ mpty;
if (number != null) {
result+=""String_Node_Str"" + number + ""String_Node_Str""+ type;
}
return result;
}","/** 
 * Convert a Connection object into a single +CLCC result for CDMA phones 
 */
private String cdmaConnectionToClccEntry(int index,Connection c){
  int state;
  PhoneApp app=PhoneApp.getInstance();
  CdmaPhoneCallState.PhoneCallState currCdmaCallState=app.cdmaPhoneCallState.getCurrentCallState();
  CdmaPhoneCallState.PhoneCallState prevCdmaCallState=app.cdmaPhoneCallState.getPreviousCallState();
  if ((prevCdmaCallState == CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) && (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL)) {
    state=0;
  }
 else {
switch (c.getState()) {
case ACTIVE:
      if (index == 0) {
        state=mCdmaIsSecondCallActive ? 1 : 0;
      }
 else {
        state=mCdmaIsSecondCallActive ? 0 : 1;
      }
    break;
case HOLDING:
  state=1;
break;
case DIALING:
state=2;
break;
case ALERTING:
state=3;
break;
case INCOMING:
state=4;
break;
case WAITING:
state=5;
break;
default :
return null;
}
}
int mpty=0;
if (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL) {
mpty=1;
}
 else {
mpty=0;
}
int direction=c.isIncoming() ? 1 : 0;
String number=c.getAddress();
int type=-1;
if (number != null) {
type=PhoneNumberUtils.toaFromString(number);
}
String result=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ direction+ ""String_Node_Str""+ state+ ""String_Node_Str""+ mpty;
if (number != null) {
result+=""String_Node_Str"" + number + ""String_Node_Str""+ type;
}
return result;
}",0.9813019390581718
184742,"/** 
 * Convert a Connection object into a single +CLCC result for CDMA phones 
 */
private String cdmaConnectionToClccEntry(int index,Connection c){
  int state;
  PhoneApp app=PhoneApp.getInstance();
  CdmaPhoneCallState.PhoneCallState currCdmaCallState=app.cdmaPhoneCallState.getCurrentCallState();
  CdmaPhoneCallState.PhoneCallState prevCdmaCallState=app.cdmaPhoneCallState.getPreviousCallState();
  if ((prevCdmaCallState == CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) && (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL)) {
    state=0;
  }
 else {
switch (c.getState()) {
case ACTIVE:
      if (index == 0) {
        state=mCdmaIsSecondCallActive ? 1 : 0;
      }
 else {
        state=mCdmaIsSecondCallActive ? 0 : 1;
      }
    break;
case HOLDING:
  state=1;
break;
case DIALING:
state=2;
break;
case ALERTING:
state=3;
break;
case INCOMING:
state=4;
break;
case WAITING:
state=5;
break;
default :
return null;
}
}
int mpty=0;
if (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE) {
mpty=0;
}
 else {
mpty=1;
}
int direction=c.isIncoming() ? 1 : 0;
String number=c.getAddress();
int type=-1;
if (number != null) {
type=PhoneNumberUtils.toaFromString(number);
}
String result=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ direction+ ""String_Node_Str""+ state+ ""String_Node_Str""+ mpty;
if (number != null) {
result+=""String_Node_Str"" + number + ""String_Node_Str""+ type;
}
return result;
}","/** 
 * Convert a Connection object into a single +CLCC result for CDMA phones 
 */
private String cdmaConnectionToClccEntry(int index,Connection c){
  int state;
  PhoneApp app=PhoneApp.getInstance();
  CdmaPhoneCallState.PhoneCallState currCdmaCallState=app.cdmaPhoneCallState.getCurrentCallState();
  CdmaPhoneCallState.PhoneCallState prevCdmaCallState=app.cdmaPhoneCallState.getPreviousCallState();
  if ((prevCdmaCallState == CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) && (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL)) {
    state=0;
  }
 else {
switch (c.getState()) {
case ACTIVE:
      if (index == 0) {
        state=mCdmaIsSecondCallActive ? 1 : 0;
      }
 else {
        state=mCdmaIsSecondCallActive ? 0 : 1;
      }
    break;
case HOLDING:
  state=1;
break;
case DIALING:
state=2;
break;
case ALERTING:
state=3;
break;
case INCOMING:
state=4;
break;
case WAITING:
state=5;
break;
default :
return null;
}
}
int mpty=0;
if (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL) {
mpty=1;
}
 else {
mpty=0;
}
int direction=c.isIncoming() ? 1 : 0;
String number=c.getAddress();
int type=-1;
if (number != null) {
type=PhoneNumberUtils.toaFromString(number);
}
String result=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ direction+ ""String_Node_Str""+ state+ ""String_Node_Str""+ mpty;
if (number != null) {
result+=""String_Node_Str"" + number + ""String_Node_Str""+ type;
}
return result;
}",0.9813019390581718
184743,"/** 
 * Convert a Connection object into a single +CLCC result for CDMA phones 
 */
private String cdmaConnectionToClccEntry(int index,Connection c){
  int state;
  PhoneApp app=PhoneApp.getInstance();
  CdmaPhoneCallState.PhoneCallState currCdmaCallState=app.cdmaPhoneCallState.getCurrentCallState();
  CdmaPhoneCallState.PhoneCallState prevCdmaCallState=app.cdmaPhoneCallState.getPreviousCallState();
  if ((prevCdmaCallState == CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) && (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL)) {
    state=0;
  }
 else {
switch (c.getState()) {
case ACTIVE:
      if (index == 0) {
        state=mCdmaIsSecondCallActive ? 1 : 0;
      }
 else {
        state=mCdmaIsSecondCallActive ? 0 : 1;
      }
    break;
case HOLDING:
  state=1;
break;
case DIALING:
state=2;
break;
case ALERTING:
state=3;
break;
case INCOMING:
state=4;
break;
case WAITING:
state=5;
break;
default :
return null;
}
}
int mpty=0;
if (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE) {
mpty=0;
}
 else {
mpty=1;
}
int direction=c.isIncoming() ? 1 : 0;
String number=c.getAddress();
int type=-1;
if (number != null) {
type=PhoneNumberUtils.toaFromString(number);
}
String result=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ direction+ ""String_Node_Str""+ state+ ""String_Node_Str""+ mpty;
if (number != null) {
result+=""String_Node_Str"" + number + ""String_Node_Str""+ type;
}
return result;
}","/** 
 * Convert a Connection object into a single +CLCC result for CDMA phones 
 */
private String cdmaConnectionToClccEntry(int index,Connection c){
  int state;
  PhoneApp app=PhoneApp.getInstance();
  CdmaPhoneCallState.PhoneCallState currCdmaCallState=app.cdmaPhoneCallState.getCurrentCallState();
  CdmaPhoneCallState.PhoneCallState prevCdmaCallState=app.cdmaPhoneCallState.getPreviousCallState();
  if ((prevCdmaCallState == CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) && (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL)) {
    state=0;
  }
 else {
switch (c.getState()) {
case ACTIVE:
      if (index == 0) {
        state=mCdmaIsSecondCallActive ? 1 : 0;
      }
 else {
        state=mCdmaIsSecondCallActive ? 0 : 1;
      }
    break;
case HOLDING:
  state=1;
break;
case DIALING:
state=2;
break;
case ALERTING:
state=3;
break;
case INCOMING:
state=4;
break;
case WAITING:
state=5;
break;
default :
return null;
}
}
int mpty=0;
if (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL) {
mpty=1;
}
 else {
mpty=0;
}
int direction=c.isIncoming() ? 1 : 0;
String number=c.getAddress();
int type=-1;
if (number != null) {
type=PhoneNumberUtils.toaFromString(number);
}
String result=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ direction+ ""String_Node_Str""+ state+ ""String_Node_Str""+ mpty;
if (number != null) {
result+=""String_Node_Str"" + number + ""String_Node_Str""+ type;
}
return result;
}",0.9813019390581718
184744,"/** 
 * Convert a Connection object into a single +CLCC result for CDMA phones 
 */
private String cdmaConnectionToClccEntry(int index,Connection c){
  int state;
  PhoneApp app=PhoneApp.getInstance();
  CdmaPhoneCallState.PhoneCallState currCdmaCallState=app.cdmaPhoneCallState.getCurrentCallState();
  CdmaPhoneCallState.PhoneCallState prevCdmaCallState=app.cdmaPhoneCallState.getPreviousCallState();
  if ((prevCdmaCallState == CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) && (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL)) {
    state=0;
  }
 else {
switch (c.getState()) {
case ACTIVE:
      if (index == 0) {
        state=mCdmaIsSecondCallActive ? 1 : 0;
      }
 else {
        state=mCdmaIsSecondCallActive ? 0 : 1;
      }
    break;
case HOLDING:
  state=1;
break;
case DIALING:
state=2;
break;
case ALERTING:
state=3;
break;
case INCOMING:
state=4;
break;
case WAITING:
state=5;
break;
default :
return null;
}
}
int mpty=0;
if (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE) {
mpty=0;
}
 else {
mpty=1;
}
int direction=c.isIncoming() ? 1 : 0;
String number=c.getAddress();
int type=-1;
if (number != null) {
type=PhoneNumberUtils.toaFromString(number);
}
String result=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ direction+ ""String_Node_Str""+ state+ ""String_Node_Str""+ mpty;
if (number != null) {
result+=""String_Node_Str"" + number + ""String_Node_Str""+ type;
}
return result;
}","/** 
 * Convert a Connection object into a single +CLCC result for CDMA phones 
 */
private String cdmaConnectionToClccEntry(int index,Connection c){
  int state;
  PhoneApp app=PhoneApp.getInstance();
  CdmaPhoneCallState.PhoneCallState currCdmaCallState=app.cdmaPhoneCallState.getCurrentCallState();
  CdmaPhoneCallState.PhoneCallState prevCdmaCallState=app.cdmaPhoneCallState.getPreviousCallState();
  if ((prevCdmaCallState == CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) && (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL)) {
    state=0;
  }
 else {
switch (c.getState()) {
case ACTIVE:
      if (index == 0) {
        state=mCdmaIsSecondCallActive ? 1 : 0;
      }
 else {
        state=mCdmaIsSecondCallActive ? 0 : 1;
      }
    break;
case HOLDING:
  state=1;
break;
case DIALING:
state=2;
break;
case ALERTING:
state=3;
break;
case INCOMING:
state=4;
break;
case WAITING:
state=5;
break;
default :
return null;
}
}
int mpty=0;
if (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL) {
mpty=1;
}
 else {
mpty=0;
}
int direction=c.isIncoming() ? 1 : 0;
String number=c.getAddress();
int type=-1;
if (number != null) {
type=PhoneNumberUtils.toaFromString(number);
}
String result=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ direction+ ""String_Node_Str""+ state+ ""String_Node_Str""+ mpty;
if (number != null) {
result+=""String_Node_Str"" + number + ""String_Node_Str""+ type;
}
return result;
}",0.9813019390581718
184745,"/** 
 * Convert a Connection object into a single +CLCC result for CDMA phones 
 */
private String cdmaConnectionToClccEntry(int index,Connection c){
  int state;
  PhoneApp app=PhoneApp.getInstance();
  CdmaPhoneCallState.PhoneCallState currCdmaCallState=app.cdmaPhoneCallState.getCurrentCallState();
  CdmaPhoneCallState.PhoneCallState prevCdmaCallState=app.cdmaPhoneCallState.getPreviousCallState();
  if ((prevCdmaCallState == CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) && (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL)) {
    state=0;
  }
 else {
switch (c.getState()) {
case ACTIVE:
      if (index == 0) {
        state=mCdmaIsSecondCallActive ? 1 : 0;
      }
 else {
        state=mCdmaIsSecondCallActive ? 0 : 1;
      }
    break;
case HOLDING:
  state=1;
break;
case DIALING:
state=2;
break;
case ALERTING:
state=3;
break;
case INCOMING:
state=4;
break;
case WAITING:
state=5;
break;
default :
return null;
}
}
int mpty=0;
if (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE) {
mpty=0;
}
 else {
mpty=1;
}
int direction=c.isIncoming() ? 1 : 0;
String number=c.getAddress();
int type=-1;
if (number != null) {
type=PhoneNumberUtils.toaFromString(number);
}
String result=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ direction+ ""String_Node_Str""+ state+ ""String_Node_Str""+ mpty;
if (number != null) {
result+=""String_Node_Str"" + number + ""String_Node_Str""+ type;
}
return result;
}","/** 
 * Convert a Connection object into a single +CLCC result for CDMA phones 
 */
private String cdmaConnectionToClccEntry(int index,Connection c){
  int state;
  PhoneApp app=PhoneApp.getInstance();
  CdmaPhoneCallState.PhoneCallState currCdmaCallState=app.cdmaPhoneCallState.getCurrentCallState();
  CdmaPhoneCallState.PhoneCallState prevCdmaCallState=app.cdmaPhoneCallState.getPreviousCallState();
  if ((prevCdmaCallState == CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) && (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL)) {
    state=0;
  }
 else {
switch (c.getState()) {
case ACTIVE:
      if (index == 0) {
        state=mCdmaIsSecondCallActive ? 1 : 0;
      }
 else {
        state=mCdmaIsSecondCallActive ? 0 : 1;
      }
    break;
case HOLDING:
  state=1;
break;
case DIALING:
state=2;
break;
case ALERTING:
state=3;
break;
case INCOMING:
state=4;
break;
case WAITING:
state=5;
break;
default :
return null;
}
}
int mpty=0;
if (currCdmaCallState == CdmaPhoneCallState.PhoneCallState.CONF_CALL) {
mpty=1;
}
 else {
mpty=0;
}
int direction=c.isIncoming() ? 1 : 0;
String number=c.getAddress();
int type=-1;
if (number != null) {
type=PhoneNumberUtils.toaFromString(number);
}
String result=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ direction+ ""String_Node_Str""+ state+ ""String_Node_Str""+ mpty;
if (number != null) {
result+=""String_Node_Str"" + number + ""String_Node_Str""+ type;
}
return result;
}",0.9813019390581718
184746,"@Override public AtCommandResult handleReadCommand(){
  if (""String_Node_Str"".equals(mCurrentPhonebook)) {
    return new AtCommandResult(""String_Node_Str"" + MAX_PHONEBOOK_SIZE);
  }
  PhonebookResult pbr=getPhonebookResult(mCurrentPhonebook,true);
  if (pbr == null) {
    return mHandsfree.reportCmeError(BluetoothCmeError.OPERATION_NOT_ALLOWED);
  }
  return new AtCommandResult(""String_Node_Str"" + mCurrentPhonebook + ""String_Node_Str""+ pbr.cursor.getCount()+ ""String_Node_Str""+ MAX_PHONEBOOK_SIZE);
}","@Override public AtCommandResult handleReadCommand(){
  if (""String_Node_Str"".equals(mCurrentPhonebook)) {
    return new AtCommandResult(""String_Node_Str"" + getMaxPhoneBookSize(0));
  }
  PhonebookResult pbr=getPhonebookResult(mCurrentPhonebook,true);
  if (pbr == null) {
    return mHandsfree.reportCmeError(BluetoothCmeError.OPERATION_NOT_ALLOWED);
  }
  int size=pbr.cursor.getCount();
  return new AtCommandResult(""String_Node_Str"" + mCurrentPhonebook + ""String_Node_Str""+ size+ ""String_Node_Str""+ getMaxPhoneBookSize(size));
}",0.7129094412331407
184747,"public void register(AtParser parser){
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length < 1) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
      if (((String)args[0]).equals(""String_Node_Str"") || ((String)args[0]).equals(""String_Node_Str"") || ((String)args[0]).equals(""String_Node_Str"")|| ((String)args[0]).equals(""String_Node_Str"")) {
        return new AtCommandResult(AtCommandResult.OK);
      }
 else {
        return mHandsfree.reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
      }
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      if (""String_Node_Str"".equals(mCurrentPhonebook)) {
        return new AtCommandResult(""String_Node_Str"" + MAX_PHONEBOOK_SIZE);
      }
      PhonebookResult pbr=getPhonebookResult(mCurrentPhonebook,true);
      if (pbr == null) {
        return mHandsfree.reportCmeError(BluetoothCmeError.OPERATION_NOT_ALLOWED);
      }
      return new AtCommandResult(""String_Node_Str"" + mCurrentPhonebook + ""String_Node_Str""+ pbr.cursor.getCount()+ ""String_Node_Str""+ MAX_PHONEBOOK_SIZE);
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length < 1 || !(args[0] instanceof String)) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
      String pb=((String)args[0]).trim();
      while (pb.endsWith(""String_Node_Str""))       pb=pb.substring(0,pb.length() - 1);
      while (pb.startsWith(""String_Node_Str""))       pb=pb.substring(1,pb.length());
      if (getPhonebookResult(pb,false) == null && !""String_Node_Str"".equals(pb)) {
        if (DBG)         log(""String_Node_Str"" + pb + ""String_Node_Str"");
        return mHandsfree.reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
      }
      mCurrentPhonebook=pb;
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      int index1;
      int index2;
      if (args.length < 1 || !(args[0] instanceof Integer)) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else {
        index1=(Integer)args[0];
      }
      if (args.length == 1) {
        index2=index1;
      }
 else       if (!(args[1] instanceof Integer)) {
        return mHandsfree.reportCmeError(BluetoothCmeError.TEXT_HAS_INVALID_CHARS);
      }
 else {
        index2=(Integer)args[1];
      }
      if (""String_Node_Str"".equals(mCurrentPhonebook)) {
        return new AtCommandResult(AtCommandResult.OK);
      }
      PhonebookResult pbr=getPhonebookResult(mCurrentPhonebook,false);
      if (pbr == null) {
        return mHandsfree.reportCmeError(BluetoothCmeError.OPERATION_NOT_ALLOWED);
      }
      if (pbr.cursor.getCount() == 0 || index1 <= 0 || index2 < index1 || index2 > pbr.cursor.getCount() || index1 > pbr.cursor.getCount()) {
        return new AtCommandResult(AtCommandResult.OK);
      }
      AtCommandResult result=new AtCommandResult(AtCommandResult.OK);
      int errorDetected=-1;
      pbr.cursor.moveToPosition(index1 - 1);
      for (int index=index1; index <= index2; index++) {
        String number=pbr.cursor.getString(pbr.numberColumn);
        String name=null;
        int type=-1;
        if (pbr.nameColumn == -1) {
          Cursor c=mContext.getContentResolver().query(Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,number),new String[]{PhoneLookup.DISPLAY_NAME,PhoneLookup.TYPE},null,null,null);
          if (c != null) {
            if (c.moveToFirst()) {
              name=c.getString(0);
              type=c.getInt(1);
            }
            c.close();
          }
          if (DBG && name == null)           log(""String_Node_Str"" + number);
        }
 else {
          name=pbr.cursor.getString(pbr.nameColumn);
        }
        if (name == null)         name=""String_Node_Str"";
        name=name.trim();
        if (name.length() > 28)         name=name.substring(0,28);
        if (pbr.typeColumn != -1) {
          type=pbr.cursor.getInt(pbr.typeColumn);
          name=name + ""String_Node_Str"" + getPhoneType(type);
        }
        int regionType=PhoneNumberUtils.toaFromString(number);
        number=number.trim();
        number=PhoneNumberUtils.stripSeparators(number);
        if (number.length() > 30)         number=number.substring(0,30);
        if (number.equals(""String_Node_Str"")) {
          number=""String_Node_Str"";
          name=""String_Node_Str"";
        }
        result.addResponse(""String_Node_Str"" + index + ""String_Node_Str""+ number+ ""String_Node_Str""+ regionType+ ""String_Node_Str""+ name+ ""String_Node_Str"");
        if (!pbr.cursor.moveToNext()) {
          break;
        }
      }
      return result;
    }
    @Override public AtCommandResult handleTestCommand(){
      int size;
      if (""String_Node_Str"".equals(mCurrentPhonebook)) {
        size=0;
      }
 else {
        PhonebookResult pbr=getPhonebookResult(mCurrentPhonebook,false);
        if (pbr == null) {
          return mHandsfree.reportCmeError(BluetoothCmeError.OPERATION_NOT_ALLOWED);
        }
        size=pbr.cursor.getCount();
      }
      if (size == 0) {
        size=1;
      }
      return new AtCommandResult(""String_Node_Str"" + size + ""String_Node_Str"");
    }
  }
);
}","public void register(AtParser parser){
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length < 1) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
      if (((String)args[0]).equals(""String_Node_Str"") || ((String)args[0]).equals(""String_Node_Str"") || ((String)args[0]).equals(""String_Node_Str"")|| ((String)args[0]).equals(""String_Node_Str"")) {
        return new AtCommandResult(AtCommandResult.OK);
      }
 else {
        return mHandsfree.reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
      }
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      if (""String_Node_Str"".equals(mCurrentPhonebook)) {
        return new AtCommandResult(""String_Node_Str"" + getMaxPhoneBookSize(0));
      }
      PhonebookResult pbr=getPhonebookResult(mCurrentPhonebook,true);
      if (pbr == null) {
        return mHandsfree.reportCmeError(BluetoothCmeError.OPERATION_NOT_ALLOWED);
      }
      int size=pbr.cursor.getCount();
      return new AtCommandResult(""String_Node_Str"" + mCurrentPhonebook + ""String_Node_Str""+ size+ ""String_Node_Str""+ getMaxPhoneBookSize(size));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length < 1 || !(args[0] instanceof String)) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
      String pb=((String)args[0]).trim();
      while (pb.endsWith(""String_Node_Str""))       pb=pb.substring(0,pb.length() - 1);
      while (pb.startsWith(""String_Node_Str""))       pb=pb.substring(1,pb.length());
      if (getPhonebookResult(pb,false) == null && !""String_Node_Str"".equals(pb)) {
        if (DBG)         log(""String_Node_Str"" + pb + ""String_Node_Str"");
        return mHandsfree.reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
      }
      mCurrentPhonebook=pb;
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      int index1;
      int index2;
      if (args.length < 1 || !(args[0] instanceof Integer)) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else {
        index1=(Integer)args[0];
      }
      if (args.length == 1) {
        index2=index1;
      }
 else       if (!(args[1] instanceof Integer)) {
        return mHandsfree.reportCmeError(BluetoothCmeError.TEXT_HAS_INVALID_CHARS);
      }
 else {
        index2=(Integer)args[1];
      }
      if (""String_Node_Str"".equals(mCurrentPhonebook)) {
        return new AtCommandResult(AtCommandResult.OK);
      }
      PhonebookResult pbr=getPhonebookResult(mCurrentPhonebook,false);
      if (pbr == null) {
        return mHandsfree.reportCmeError(BluetoothCmeError.OPERATION_NOT_ALLOWED);
      }
      if (pbr.cursor.getCount() == 0 || index1 <= 0 || index2 < index1 || index2 > pbr.cursor.getCount() || index1 > pbr.cursor.getCount()) {
        return new AtCommandResult(AtCommandResult.OK);
      }
      AtCommandResult result=new AtCommandResult(AtCommandResult.OK);
      int errorDetected=-1;
      pbr.cursor.moveToPosition(index1 - 1);
      for (int index=index1; index <= index2; index++) {
        String number=pbr.cursor.getString(pbr.numberColumn);
        String name=null;
        int type=-1;
        if (pbr.nameColumn == -1) {
          Cursor c=mContext.getContentResolver().query(Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,number),new String[]{PhoneLookup.DISPLAY_NAME,PhoneLookup.TYPE},null,null,null);
          if (c != null) {
            if (c.moveToFirst()) {
              name=c.getString(0);
              type=c.getInt(1);
            }
            c.close();
          }
          if (DBG && name == null)           log(""String_Node_Str"" + number);
        }
 else {
          name=pbr.cursor.getString(pbr.nameColumn);
        }
        if (name == null)         name=""String_Node_Str"";
        name=name.trim();
        if (name.length() > 28)         name=name.substring(0,28);
        if (pbr.typeColumn != -1) {
          type=pbr.cursor.getInt(pbr.typeColumn);
          name=name + ""String_Node_Str"" + getPhoneType(type);
        }
        int regionType=PhoneNumberUtils.toaFromString(number);
        number=number.trim();
        number=PhoneNumberUtils.stripSeparators(number);
        if (number.length() > 30)         number=number.substring(0,30);
        if (number.equals(""String_Node_Str"")) {
          number=""String_Node_Str"";
          name=""String_Node_Str"";
        }
        result.addResponse(""String_Node_Str"" + index + ""String_Node_Str""+ number+ ""String_Node_Str""+ regionType+ ""String_Node_Str""+ name+ ""String_Node_Str"");
        if (!pbr.cursor.moveToNext()) {
          break;
        }
      }
      return result;
    }
    @Override public AtCommandResult handleTestCommand(){
      int size;
      if (""String_Node_Str"".equals(mCurrentPhonebook)) {
        size=0;
      }
 else {
        PhonebookResult pbr=getPhonebookResult(mCurrentPhonebook,false);
        if (pbr == null) {
          return mHandsfree.reportCmeError(BluetoothCmeError.OPERATION_NOT_ALLOWED);
        }
        size=pbr.cursor.getCount();
      }
      if (size == 0) {
        size=1;
      }
      return new AtCommandResult(""String_Node_Str"" + size + ""String_Node_Str"");
    }
  }
);
}",0.9884958791208792
184748,"/** 
 * Request to disconnect SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block.
 */
synchronized void audioOff(){
  if (VDBG)   log(""String_Node_Str"" + mPendingSco + ""String_Node_Str""+ mConnectedSco+ ""String_Node_Str""+ mOutgoingSco+ ""String_Node_Str""+ mA2dpState+ ""String_Node_Str""+ mA2dpSuspended);
  if (mA2dpSuspended) {
    if (DBG)     log(""String_Node_Str"");
    mA2dp.resumeSink(mA2dpDevice);
    mA2dpSuspended=false;
  }
  mPendingSco=false;
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getRemoteDevice());
    mConnectedSco.close();
    mConnectedSco=null;
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
}","/** 
 * Request to disconnect SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block.
 */
synchronized void audioOff(){
  if (VDBG)   log(""String_Node_Str"" + mPendingSco + ""String_Node_Str""+ mConnectedSco+ ""String_Node_Str""+ mOutgoingSco+ ""String_Node_Str""+ mA2dpState+ ""String_Node_Str""+ mA2dpSuspended);
  if (mA2dpSuspended) {
    if (isA2dpMultiProfile()) {
      if (DBG)       log(""String_Node_Str"");
      mA2dp.resumeSink(mA2dpDevice);
    }
    mA2dpSuspended=false;
  }
  mPendingSco=false;
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getRemoteDevice());
    mConnectedSco.close();
    mConnectedSco=null;
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
}",0.9734939759036144
184749,"synchronized void onBluetoothDisabled(){
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getRemoteDevice());
    mConnectedSco.close();
    mConnectedSco=null;
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
  if (mIncomingSco != null) {
    mIncomingSco.close();
    mIncomingSco=null;
  }
}","synchronized void onBluetoothDisabled(){
  audioOff();
  if (mIncomingSco != null) {
    mIncomingSco.close();
    mIncomingSco=null;
  }
}",0.4740484429065744
184750,"private synchronized void setState(int state,int result){
  if (state != mState) {
    if (DBG)     log(""String_Node_Str"" + mState + ""String_Node_Str""+ state+ ""String_Node_Str""+ result);
    if (mState == BluetoothHeadset.STATE_CONNECTED) {
      mBtHandsfree.audioOff();
      mBtHandsfree.disconnectHeadset();
    }
    Intent intent=new Intent(BluetoothHeadset.ACTION_STATE_CHANGED);
    intent.putExtra(BluetoothHeadset.EXTRA_PREVIOUS_STATE,mState);
    mState=state;
    intent.putExtra(BluetoothHeadset.EXTRA_STATE,mState);
    intent.putExtra(BluetoothDevice.EXTRA_DEVICE,mRemoteDevice);
    sendBroadcast(intent,BLUETOOTH_PERM);
    if (mState == BluetoothHeadset.STATE_DISCONNECTED) {
      mHeadset=null;
      mRemoteDevice=null;
      mHeadsetType=BluetoothHandsfree.TYPE_UNKNOWN;
      if (mAutoConnectQueue != null) {
        doNextAutoConnect();
      }
    }
 else     if (mState == BluetoothHeadset.STATE_CONNECTED) {
      mAutoConnectQueue=null;
      mHeadsetPriority.bump(mRemoteDevice);
    }
  }
}","private synchronized void setState(int state,int result){
  if (state != mState) {
    if (DBG)     log(""String_Node_Str"" + mState + ""String_Node_Str""+ state+ ""String_Node_Str""+ result);
    if (mState == BluetoothHeadset.STATE_CONNECTED) {
      mBtHandsfree.disconnectHeadset();
      mBtHandsfree.audioOff();
    }
    Intent intent=new Intent(BluetoothHeadset.ACTION_STATE_CHANGED);
    intent.putExtra(BluetoothHeadset.EXTRA_PREVIOUS_STATE,mState);
    mState=state;
    intent.putExtra(BluetoothHeadset.EXTRA_STATE,mState);
    intent.putExtra(BluetoothDevice.EXTRA_DEVICE,mRemoteDevice);
    sendBroadcast(intent,BLUETOOTH_PERM);
    if (mState == BluetoothHeadset.STATE_DISCONNECTED) {
      mHeadset=null;
      mRemoteDevice=null;
      mHeadsetType=BluetoothHandsfree.TYPE_UNKNOWN;
      if (mAutoConnectQueue != null) {
        doNextAutoConnect();
      }
    }
 else     if (mState == BluetoothHeadset.STATE_CONNECTED) {
      mAutoConnectQueue=null;
      mHeadsetPriority.bump(mRemoteDevice);
    }
  }
}",0.9607843137254902
184751,"/** 
 * Request to disconnect SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block.
 */
synchronized void audioOff(){
  if (VDBG)   log(""String_Node_Str"" + mPendingSco + ""String_Node_Str""+ mConnectedSco+ ""String_Node_Str""+ mOutgoingSco+ ""String_Node_Str""+ mA2dpState+ ""String_Node_Str""+ mA2dpSuspended);
  if (mA2dpSuspended) {
    if (DBG)     log(""String_Node_Str"");
    mA2dp.resumeSink(mA2dpDevice);
    mA2dpSuspended=false;
  }
  mPendingSco=false;
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getRemoteDevice());
    mConnectedSco.close();
    mConnectedSco=null;
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
}","/** 
 * Request to disconnect SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block.
 */
synchronized void audioOff(){
  if (VDBG)   log(""String_Node_Str"" + mPendingSco + ""String_Node_Str""+ mConnectedSco+ ""String_Node_Str""+ mOutgoingSco+ ""String_Node_Str""+ mA2dpState+ ""String_Node_Str""+ mA2dpSuspended);
  if (mA2dpSuspended) {
    if (isA2dpMultiProfile()) {
      if (DBG)       log(""String_Node_Str"");
      mA2dp.resumeSink(mA2dpDevice);
    }
    mA2dpSuspended=false;
  }
  mPendingSco=false;
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getRemoteDevice());
    mConnectedSco.close();
    mConnectedSco=null;
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
}",0.9734939759036144
184752,"synchronized void onBluetoothDisabled(){
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getRemoteDevice());
    mConnectedSco.close();
    mConnectedSco=null;
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
  if (mIncomingSco != null) {
    mIncomingSco.close();
    mIncomingSco=null;
  }
}","synchronized void onBluetoothDisabled(){
  audioOff();
  if (mIncomingSco != null) {
    mIncomingSco.close();
    mIncomingSco=null;
  }
}",0.4740484429065744
184753,"private synchronized void setState(int state,int result){
  if (state != mState) {
    if (DBG)     log(""String_Node_Str"" + mState + ""String_Node_Str""+ state+ ""String_Node_Str""+ result);
    if (mState == BluetoothHeadset.STATE_CONNECTED) {
      mBtHandsfree.audioOff();
      mBtHandsfree.disconnectHeadset();
    }
    Intent intent=new Intent(BluetoothHeadset.ACTION_STATE_CHANGED);
    intent.putExtra(BluetoothHeadset.EXTRA_PREVIOUS_STATE,mState);
    mState=state;
    intent.putExtra(BluetoothHeadset.EXTRA_STATE,mState);
    intent.putExtra(BluetoothDevice.EXTRA_DEVICE,mRemoteDevice);
    sendBroadcast(intent,BLUETOOTH_PERM);
    if (mState == BluetoothHeadset.STATE_DISCONNECTED) {
      mHeadset=null;
      mRemoteDevice=null;
      mHeadsetType=BluetoothHandsfree.TYPE_UNKNOWN;
      if (mAutoConnectQueue != null) {
        doNextAutoConnect();
      }
    }
 else     if (mState == BluetoothHeadset.STATE_CONNECTED) {
      mAutoConnectQueue=null;
      mHeadsetPriority.bump(mRemoteDevice);
    }
  }
}","private synchronized void setState(int state,int result){
  if (state != mState) {
    if (DBG)     log(""String_Node_Str"" + mState + ""String_Node_Str""+ state+ ""String_Node_Str""+ result);
    if (mState == BluetoothHeadset.STATE_CONNECTED) {
      mBtHandsfree.disconnectHeadset();
      mBtHandsfree.audioOff();
    }
    Intent intent=new Intent(BluetoothHeadset.ACTION_STATE_CHANGED);
    intent.putExtra(BluetoothHeadset.EXTRA_PREVIOUS_STATE,mState);
    mState=state;
    intent.putExtra(BluetoothHeadset.EXTRA_STATE,mState);
    intent.putExtra(BluetoothDevice.EXTRA_DEVICE,mRemoteDevice);
    sendBroadcast(intent,BLUETOOTH_PERM);
    if (mState == BluetoothHeadset.STATE_DISCONNECTED) {
      mHeadset=null;
      mRemoteDevice=null;
      mHeadsetType=BluetoothHandsfree.TYPE_UNKNOWN;
      if (mAutoConnectQueue != null) {
        doNextAutoConnect();
      }
    }
 else     if (mState == BluetoothHeadset.STATE_CONNECTED) {
      mAutoConnectQueue=null;
      mHeadsetPriority.bump(mRemoteDevice);
    }
  }
}",0.9607843137254902
184754,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == VOICEMAIL_PROVIDER_CFG_ID) {
    boolean failure=false;
    if (DBG)     log(""String_Node_Str"" + mVMProviderSettingsForced);
    final boolean isVMProviderSettingsForced=mVMProviderSettingsForced;
    mVMProviderSettingsForced=false;
    String vmNum=null;
    if (resultCode != RESULT_OK) {
      if (DBG)       log(""String_Node_Str"");
      failure=true;
    }
 else {
      if (data == null) {
        if (DBG)         log(""String_Node_Str"");
        failure=true;
      }
 else {
        if (data.getBooleanExtra(SIGNOUT_EXTRA,false)) {
          if (DBG)           log(""String_Node_Str"");
          if (isVMProviderSettingsForced) {
            if (DBG)             log(""String_Node_Str"");
            switchToPreviousVoicemailProvider();
          }
 else {
            final String victim=getCurrentVoicemailProviderKey();
            if (DBG)             log(""String_Node_Str"" + victim);
            Intent i=new Intent(ACTION_ADD_VOICEMAIL);
            i.putExtra(IGNORE_PROVIDER_EXTRA,victim);
            i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            this.startActivity(i);
          }
          return;
        }
        vmNum=data.getStringExtra(VM_NUMBER_EXTRA);
        if (vmNum == null || vmNum.length() == 0) {
          if (DBG)           log(""String_Node_Str"");
          failure=true;
        }
      }
    }
    if (failure) {
      if (DBG)       log(""String_Node_Str"");
      if (isVMProviderSettingsForced) {
        switchToPreviousVoicemailProvider();
      }
 else {
        if (DBG)         log(""String_Node_Str"");
      }
      return;
    }
    final String fwdNum=data.getStringExtra(FWD_NUMBER_EXTRA);
    final int fwdNumTime=data.getIntExtra(FWD_NUMBER_TIME_EXTRA,20);
    if (DBG)     log(""String_Node_Str"" + (fwdNum != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    saveVoiceMailAndForwardingNumber(getCurrentVoicemailProviderKey(),new VoiceMailProviderSettings(vmNum,(String)fwdNum,fwdNumTime));
    return;
  }
  if (resultCode != RESULT_OK) {
    if (DBG)     log(""String_Node_Str"");
    return;
  }
  Cursor cursor=getContentResolver().query(data.getData(),NUM_PROJECTION,null,null,null);
  if ((cursor == null) || (!cursor.moveToFirst())) {
    if (DBG)     log(""String_Node_Str"");
    return;
  }
switch (requestCode) {
case VOICEMAIL_PREF_ID:
    mSubMenuVoicemailSettings.onPickActivityResult(cursor.getString(0));
  break;
default :
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == VOICEMAIL_PROVIDER_CFG_ID) {
    boolean failure=false;
    if (DBG)     log(""String_Node_Str"" + mVMProviderSettingsForced);
    final boolean isVMProviderSettingsForced=mVMProviderSettingsForced;
    mVMProviderSettingsForced=false;
    String vmNum=null;
    if (resultCode != RESULT_OK) {
      if (DBG)       log(""String_Node_Str"");
      failure=true;
    }
 else {
      if (data == null) {
        if (DBG)         log(""String_Node_Str"");
        failure=true;
      }
 else {
        if (data.getBooleanExtra(SIGNOUT_EXTRA,false)) {
          if (DBG)           log(""String_Node_Str"");
          if (isVMProviderSettingsForced) {
            if (DBG)             log(""String_Node_Str"");
            switchToPreviousVoicemailProvider();
          }
 else {
            final String victim=getCurrentVoicemailProviderKey();
            if (DBG)             log(""String_Node_Str"" + victim);
            Intent i=new Intent(ACTION_ADD_VOICEMAIL);
            i.putExtra(IGNORE_PROVIDER_EXTRA,victim);
            i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            this.startActivity(i);
          }
          return;
        }
        vmNum=data.getStringExtra(VM_NUMBER_EXTRA);
        if (vmNum == null || vmNum.length() == 0) {
          if (DBG)           log(""String_Node_Str"");
          failure=true;
        }
      }
    }
    if (failure) {
      if (DBG)       log(""String_Node_Str"");
      if (isVMProviderSettingsForced) {
        switchToPreviousVoicemailProvider();
      }
 else {
        if (DBG)         log(""String_Node_Str"");
      }
      return;
    }
    mChangingVMorFwdDueToProviderChange=isVMProviderSettingsForced;
    final String fwdNum=data.getStringExtra(FWD_NUMBER_EXTRA);
    final int fwdNumTime=data.getIntExtra(FWD_NUMBER_TIME_EXTRA,20);
    if (DBG)     log(""String_Node_Str"" + (fwdNum != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    saveVoiceMailAndForwardingNumber(getCurrentVoicemailProviderKey(),new VoiceMailProviderSettings(vmNum,(String)fwdNum,fwdNumTime));
    return;
  }
  if (resultCode != RESULT_OK) {
    if (DBG)     log(""String_Node_Str"");
    return;
  }
  Cursor cursor=getContentResolver().query(data.getData(),NUM_PROJECTION,null,null,null);
  if ((cursor == null) || (!cursor.moveToFirst())) {
    if (DBG)     log(""String_Node_Str"");
    return;
  }
switch (requestCode) {
case VOICEMAIL_PREF_ID:
    mSubMenuVoicemailSettings.onPickActivityResult(cursor.getString(0));
  break;
default :
}
}",0.98671875
184755,"private void handleSetVMOrFwdMessage(){
  if (DBG) {
    log(""String_Node_Str"");
  }
  boolean success=true;
  boolean fwdFailure=false;
  String exceptionMessage=""String_Node_Str"";
  if (mForwardingChangeResults != null) {
    for (int i=0; i < mForwardingChangeResults.length; i++) {
      if (mForwardingChangeResults[i].exception != null) {
        exceptionMessage=mForwardingChangeResults[i].exception.getMessage();
        success=false;
        fwdFailure=true;
        break;
      }
    }
  }
  if (success && mVoicemailChangeResult.exception != null) {
    exceptionMessage=mVoicemailChangeResult.exception.getMessage();
    success=false;
  }
  if (success) {
    if (DBG)     log(""String_Node_Str"");
    showVMDialog(MSG_VM_OK);
  }
 else {
    if (fwdFailure) {
      log(""String_Node_Str"" + exceptionMessage);
      showVMDialog(MSG_FW_SET_EXCEPTION);
    }
 else {
      log(""String_Node_Str"" + exceptionMessage);
      showVMDialog(MSG_VM_EXCEPTION);
    }
  }
  updateVoiceNumberField();
}","private void handleSetVMOrFwdMessage(){
  if (DBG) {
    log(""String_Node_Str"");
  }
  boolean success=true;
  boolean fwdFailure=false;
  String exceptionMessage=""String_Node_Str"";
  if (mForwardingChangeResults != null) {
    for (int i=0; i < mForwardingChangeResults.length; i++) {
      if (mForwardingChangeResults[i].exception != null) {
        exceptionMessage=mForwardingChangeResults[i].exception.getMessage();
        success=false;
        fwdFailure=true;
        break;
      }
    }
  }
  if (success && mVoicemailChangeResult.exception != null) {
    exceptionMessage=mVoicemailChangeResult.exception.getMessage();
    success=false;
  }
  if (success) {
    if (DBG)     log(""String_Node_Str"");
    handleVMAndFwdSetSuccess(MSG_VM_OK);
  }
 else {
    if (fwdFailure) {
      log(""String_Node_Str"" + exceptionMessage);
      handleVMOrFwdSetError(MSG_FW_SET_EXCEPTION);
    }
 else {
      log(""String_Node_Str"" + exceptionMessage);
      handleVMOrFwdSetError(MSG_VM_EXCEPTION);
    }
  }
  updateVoiceNumberField();
}",0.9559686888454012
184756,"/** 
 * Request to disconnect SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block.
 */
synchronized void audioOff(){
  if (VDBG)   log(""String_Node_Str"");
  mPendingSco=false;
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getRemoteDevice());
    mConnectedSco.close();
    mConnectedSco=null;
    if (isA2dpMultiProfile() && mA2dpState == BluetoothA2dp.STATE_CONNECTED) {
      if (DBG)       log(""String_Node_Str"");
      mA2dp.resumeSink(mA2dpDevice);
    }
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
}","/** 
 * Request to disconnect SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block.
 */
synchronized void audioOff(){
  if (VDBG)   log(""String_Node_Str"" + mPendingSco + ""String_Node_Str""+ mConnectedSco+ ""String_Node_Str""+ mOutgoingSco+ ""String_Node_Str""+ mA2dpState+ ""String_Node_Str""+ mA2dpSuspended);
  if (mA2dpSuspended) {
    if (DBG)     log(""String_Node_Str"");
    mA2dp.resumeSink(mA2dpDevice);
    mA2dpSuspended=false;
  }
  mPendingSco=false;
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getRemoteDevice());
    mConnectedSco.close();
    mConnectedSco=null;
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
}",0.7016611295681063
184757,"public BluetoothHandsfree(Context context,Phone phone){
  mPhone=phone;
  mContext=context;
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  boolean bluetoothCapable=(adapter != null);
  mHeadset=null;
  mA2dp=new BluetoothA2dp(mContext);
  mA2dpState=BluetoothA2dp.STATE_DISCONNECTED;
  mA2dpDevice=null;
  mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mStartCallWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG + ""String_Node_Str"");
  mStartCallWakeLock.setReferenceCounted(false);
  mStartVoiceRecognitionWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG + ""String_Node_Str"");
  mStartVoiceRecognitionWakeLock.setReferenceCounted(false);
  mLocalBrsf=BRSF_AG_THREE_WAY_CALLING | BRSF_AG_EC_NR | BRSF_AG_REJECT_CALL| BRSF_AG_ENHANCED_CALL_STATUS;
  if (sVoiceCommandIntent == null) {
    sVoiceCommandIntent=new Intent(Intent.ACTION_VOICE_COMMAND);
    sVoiceCommandIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  }
  if (mContext.getPackageManager().resolveActivity(sVoiceCommandIntent,0) != null && !BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
    mLocalBrsf|=BRSF_AG_VOICE_RECOG;
  }
  if (bluetoothCapable) {
    resetAtState();
  }
  mRingingCall=mPhone.getRingingCall();
  mForegroundCall=mPhone.getForegroundCall();
  mBackgroundCall=mPhone.getBackgroundCall();
  mBluetoothPhoneState=new BluetoothPhoneState();
  mUserWantsAudio=true;
  mPhonebook=new BluetoothAtPhonebook(mContext,this);
  mAudioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  cdmaSetSecondCallState(false);
}","public BluetoothHandsfree(Context context,Phone phone){
  mPhone=phone;
  mContext=context;
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  boolean bluetoothCapable=(adapter != null);
  mHeadset=null;
  mA2dp=new BluetoothA2dp(mContext);
  mA2dpState=BluetoothA2dp.STATE_DISCONNECTED;
  mA2dpDevice=null;
  mA2dpSuspended=false;
  mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mStartCallWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG + ""String_Node_Str"");
  mStartCallWakeLock.setReferenceCounted(false);
  mStartVoiceRecognitionWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG + ""String_Node_Str"");
  mStartVoiceRecognitionWakeLock.setReferenceCounted(false);
  mLocalBrsf=BRSF_AG_THREE_WAY_CALLING | BRSF_AG_EC_NR | BRSF_AG_REJECT_CALL| BRSF_AG_ENHANCED_CALL_STATUS;
  if (sVoiceCommandIntent == null) {
    sVoiceCommandIntent=new Intent(Intent.ACTION_VOICE_COMMAND);
    sVoiceCommandIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  }
  if (mContext.getPackageManager().resolveActivity(sVoiceCommandIntent,0) != null && !BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
    mLocalBrsf|=BRSF_AG_VOICE_RECOG;
  }
  if (bluetoothCapable) {
    resetAtState();
  }
  mRingingCall=mPhone.getRingingCall();
  mForegroundCall=mPhone.getForegroundCall();
  mBackgroundCall=mPhone.getBackgroundCall();
  mBluetoothPhoneState=new BluetoothPhoneState();
  mUserWantsAudio=true;
  mPhonebook=new BluetoothAtPhonebook(mContext,this);
  mAudioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  cdmaSetSecondCallState(false);
}",0.9925880172946264
184758,"@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(Intent.ACTION_BATTERY_CHANGED)) {
    updateBatteryState(intent);
  }
 else   if (intent.getAction().equals(TelephonyIntents.ACTION_SIGNAL_STRENGTH_CHANGED)) {
    updateSignalState(intent);
  }
 else   if (intent.getAction().equals(BluetoothA2dp.ACTION_SINK_STATE_CHANGED)) {
    int state=intent.getIntExtra(BluetoothA2dp.EXTRA_SINK_STATE,BluetoothA2dp.STATE_DISCONNECTED);
    int oldState=intent.getIntExtra(BluetoothA2dp.EXTRA_PREVIOUS_SINK_STATE,BluetoothA2dp.STATE_DISCONNECTED);
    BluetoothDevice device=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
synchronized (BluetoothHandsfree.this) {
      mA2dpState=state;
      mA2dpDevice=device;
      if (isA2dpMultiProfile() && mPendingSco) {
        mHandler.removeMessages(MESSAGE_CHECK_PENDING_SCO);
        if (mA2dpState == BluetoothA2dp.STATE_CONNECTED) {
          if (DBG)           log(""String_Node_Str"");
          mOutgoingSco=createScoSocket();
          if (!mOutgoingSco.connect(mHeadset.getRemoteDevice().getAddress())) {
            mOutgoingSco=null;
          }
        }
      }
      mPendingSco=false;
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(Intent.ACTION_BATTERY_CHANGED)) {
    updateBatteryState(intent);
  }
 else   if (intent.getAction().equals(TelephonyIntents.ACTION_SIGNAL_STRENGTH_CHANGED)) {
    updateSignalState(intent);
  }
 else   if (intent.getAction().equals(BluetoothA2dp.ACTION_SINK_STATE_CHANGED)) {
    int state=intent.getIntExtra(BluetoothA2dp.EXTRA_SINK_STATE,BluetoothA2dp.STATE_DISCONNECTED);
    int oldState=intent.getIntExtra(BluetoothA2dp.EXTRA_PREVIOUS_SINK_STATE,BluetoothA2dp.STATE_DISCONNECTED);
    BluetoothDevice device=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
synchronized (BluetoothHandsfree.this) {
      mA2dpState=state;
      mA2dpDevice=device;
      if (oldState == BluetoothA2dp.STATE_PLAYING && mA2dpState == BluetoothA2dp.STATE_CONNECTED) {
        if (mA2dpSuspended) {
          if (mPendingSco) {
            mHandler.removeMessages(MESSAGE_CHECK_PENDING_SCO);
            if (DBG)             log(""String_Node_Str"");
            mOutgoingSco=createScoSocket();
            if (!mOutgoingSco.connect(mHeadset.getRemoteDevice().getAddress())) {
              mOutgoingSco=null;
            }
            mPendingSco=false;
          }
        }
      }
    }
  }
}",0.898024989923418
184759,"/** 
 * Request to establish SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block. Returns false if the user has requested audio off, or if there is some other immediate problem that will prevent BT audio.
 */
synchronized boolean audioOn(){
  if (VDBG)   log(""String_Node_Str"");
  if (!isHeadsetConnected()) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mHeadsetType == TYPE_HANDSFREE && !mServiceConnectionEstablished) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mConnectedSco != null) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (!mUserWantsAudio) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mOutgoingSco != null) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (mPendingSco) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (isA2dpMultiProfile() && mA2dpState == BluetoothA2dp.STATE_PLAYING) {
    if (DBG)     log(""String_Node_Str"");
    mPendingSco=mA2dp.suspendSink(mA2dpDevice);
    if (mPendingSco) {
      Message msg=mHandler.obtainMessage(MESSAGE_CHECK_PENDING_SCO);
      mHandler.sendMessageDelayed(msg,2000);
    }
 else {
      Log.w(TAG,""String_Node_Str"");
    }
  }
  if (!mPendingSco) {
    mOutgoingSco=createScoSocket();
    if (!mOutgoingSco.connect(mHeadset.getRemoteDevice().getAddress())) {
      mOutgoingSco=null;
    }
  }
  return true;
}","/** 
 * Request to establish SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block. Returns false if the user has requested audio off, or if there is some other immediate problem that will prevent BT audio.
 */
synchronized boolean audioOn(){
  if (VDBG)   log(""String_Node_Str"");
  if (!isHeadsetConnected()) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mHeadsetType == TYPE_HANDSFREE && !mServiceConnectionEstablished) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mConnectedSco != null) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (!mUserWantsAudio) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mOutgoingSco != null) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (mPendingSco) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  mA2dpSuspended=false;
  mPendingSco=false;
  if (isA2dpMultiProfile() && mA2dpState == BluetoothA2dp.STATE_PLAYING) {
    if (DBG)     log(""String_Node_Str"");
    mA2dpSuspended=mA2dp.suspendSink(mA2dpDevice);
    if (mA2dpSuspended) {
      mPendingSco=true;
      Message msg=mHandler.obtainMessage(MESSAGE_CHECK_PENDING_SCO);
      mHandler.sendMessageDelayed(msg,2000);
    }
 else {
      Log.w(TAG,""String_Node_Str"");
    }
  }
  if (!mPendingSco) {
    mOutgoingSco=createScoSocket();
    if (!mOutgoingSco.connect(mHeadset.getRemoteDevice().getAddress())) {
      mOutgoingSco=null;
    }
  }
  return true;
}",0.96
184760,"/** 
 * Request to disconnect SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block.
 */
synchronized void audioOff(){
  if (VDBG)   log(""String_Node_Str"");
  mPendingSco=false;
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getRemoteDevice());
    mConnectedSco.close();
    mConnectedSco=null;
    if (isA2dpMultiProfile() && mA2dpState == BluetoothA2dp.STATE_CONNECTED) {
      if (DBG)       log(""String_Node_Str"");
      mA2dp.resumeSink(mA2dpDevice);
    }
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
  mPendingSco=false;
  if (isA2dpMultiProfile() && mA2dpState == BluetoothA2dp.STATE_CONNECTED) {
    if (DBG)     log(""String_Node_Str"");
    mA2dp.resumeSink(mA2dpDevice);
  }
}","/** 
 * Request to disconnect SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block.
 */
synchronized void audioOff(){
  if (VDBG)   log(""String_Node_Str"" + mPendingSco + ""String_Node_Str""+ mConnectedSco+ ""String_Node_Str""+ mOutgoingSco+ ""String_Node_Str""+ mA2dpState+ ""String_Node_Str""+ mA2dpSuspended);
  if (mA2dpSuspended) {
    if (DBG)     log(""String_Node_Str"");
    mA2dp.resumeSink(mA2dpDevice);
    mA2dpSuspended=false;
  }
  mPendingSco=false;
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getRemoteDevice());
    mConnectedSco.close();
    mConnectedSco=null;
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
  mPendingSco=false;
  if (isA2dpMultiProfile() && mA2dpState == BluetoothA2dp.STATE_CONNECTED) {
    if (DBG)     log(""String_Node_Str"");
    mA2dp.resumeSink(mA2dpDevice);
  }
}",0.6190220311660397
184761,"public BluetoothHandsfree(Context context,Phone phone){
  mPhone=phone;
  mContext=context;
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  boolean bluetoothCapable=(adapter != null);
  mHeadset=null;
  mA2dp=new BluetoothA2dp(mContext);
  mA2dpState=BluetoothA2dp.STATE_DISCONNECTED;
  mA2dpDevice=null;
  mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mStartCallWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG + ""String_Node_Str"");
  mStartCallWakeLock.setReferenceCounted(false);
  mStartVoiceRecognitionWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG + ""String_Node_Str"");
  mStartVoiceRecognitionWakeLock.setReferenceCounted(false);
  mLocalBrsf=BRSF_AG_THREE_WAY_CALLING | BRSF_AG_EC_NR | BRSF_AG_REJECT_CALL| BRSF_AG_ENHANCED_CALL_STATUS;
  if (sVoiceCommandIntent == null) {
    sVoiceCommandIntent=new Intent(Intent.ACTION_VOICE_COMMAND);
    sVoiceCommandIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  }
  if (mContext.getPackageManager().resolveActivity(sVoiceCommandIntent,0) != null && !BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
    mLocalBrsf|=BRSF_AG_VOICE_RECOG;
  }
  if (bluetoothCapable) {
    resetAtState();
  }
  mRingingCall=mPhone.getRingingCall();
  mForegroundCall=mPhone.getForegroundCall();
  mBackgroundCall=mPhone.getBackgroundCall();
  mBluetoothPhoneState=new BluetoothPhoneState();
  mUserWantsAudio=true;
  mPhonebook=new BluetoothAtPhonebook(mContext,this);
  mAudioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  cdmaSetSecondCallState(false);
}","public BluetoothHandsfree(Context context,Phone phone){
  mPhone=phone;
  mContext=context;
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  boolean bluetoothCapable=(adapter != null);
  mHeadset=null;
  mA2dp=new BluetoothA2dp(mContext);
  mA2dpState=BluetoothA2dp.STATE_DISCONNECTED;
  mA2dpDevice=null;
  mA2dpSuspended=false;
  mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mStartCallWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG + ""String_Node_Str"");
  mStartCallWakeLock.setReferenceCounted(false);
  mStartVoiceRecognitionWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG + ""String_Node_Str"");
  mStartVoiceRecognitionWakeLock.setReferenceCounted(false);
  mLocalBrsf=BRSF_AG_THREE_WAY_CALLING | BRSF_AG_EC_NR | BRSF_AG_REJECT_CALL| BRSF_AG_ENHANCED_CALL_STATUS;
  if (sVoiceCommandIntent == null) {
    sVoiceCommandIntent=new Intent(Intent.ACTION_VOICE_COMMAND);
    sVoiceCommandIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  }
  if (mContext.getPackageManager().resolveActivity(sVoiceCommandIntent,0) != null && !BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
    mLocalBrsf|=BRSF_AG_VOICE_RECOG;
  }
  if (bluetoothCapable) {
    resetAtState();
  }
  mRingingCall=mPhone.getRingingCall();
  mForegroundCall=mPhone.getForegroundCall();
  mBackgroundCall=mPhone.getBackgroundCall();
  mBluetoothPhoneState=new BluetoothPhoneState();
  mUserWantsAudio=true;
  mPhonebook=new BluetoothAtPhonebook(mContext,this);
  mAudioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  cdmaSetSecondCallState(false);
}",0.9925880172946264
184762,"@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(Intent.ACTION_BATTERY_CHANGED)) {
    updateBatteryState(intent);
  }
 else   if (intent.getAction().equals(TelephonyIntents.ACTION_SIGNAL_STRENGTH_CHANGED)) {
    updateSignalState(intent);
  }
 else   if (intent.getAction().equals(BluetoothA2dp.ACTION_SINK_STATE_CHANGED)) {
    int state=intent.getIntExtra(BluetoothA2dp.EXTRA_SINK_STATE,BluetoothA2dp.STATE_DISCONNECTED);
    int oldState=intent.getIntExtra(BluetoothA2dp.EXTRA_PREVIOUS_SINK_STATE,BluetoothA2dp.STATE_DISCONNECTED);
    BluetoothDevice device=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
synchronized (BluetoothHandsfree.this) {
      mA2dpState=state;
      mA2dpDevice=device;
      if (isA2dpMultiProfile() && mPendingSco) {
        mHandler.removeMessages(MESSAGE_CHECK_PENDING_SCO);
        if (mA2dpState == BluetoothA2dp.STATE_CONNECTED) {
          if (DBG)           log(""String_Node_Str"");
          mOutgoingSco=createScoSocket();
          if (!mOutgoingSco.connect(mHeadset.getRemoteDevice().getAddress())) {
            mOutgoingSco=null;
          }
        }
      }
      mPendingSco=false;
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(Intent.ACTION_BATTERY_CHANGED)) {
    updateBatteryState(intent);
  }
 else   if (intent.getAction().equals(TelephonyIntents.ACTION_SIGNAL_STRENGTH_CHANGED)) {
    updateSignalState(intent);
  }
 else   if (intent.getAction().equals(BluetoothA2dp.ACTION_SINK_STATE_CHANGED)) {
    int state=intent.getIntExtra(BluetoothA2dp.EXTRA_SINK_STATE,BluetoothA2dp.STATE_DISCONNECTED);
    int oldState=intent.getIntExtra(BluetoothA2dp.EXTRA_PREVIOUS_SINK_STATE,BluetoothA2dp.STATE_DISCONNECTED);
    BluetoothDevice device=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
synchronized (BluetoothHandsfree.this) {
      mA2dpState=state;
      mA2dpDevice=device;
      if (oldState == BluetoothA2dp.STATE_PLAYING && mA2dpState == BluetoothA2dp.STATE_CONNECTED) {
        if (mA2dpSuspended) {
          if (mPendingSco) {
            mHandler.removeMessages(MESSAGE_CHECK_PENDING_SCO);
            if (DBG)             log(""String_Node_Str"");
            mOutgoingSco=createScoSocket();
            if (!mOutgoingSco.connect(mHeadset.getRemoteDevice().getAddress())) {
              mOutgoingSco=null;
            }
            mPendingSco=false;
          }
        }
      }
    }
  }
}",0.898024989923418
184763,"/** 
 * Request to establish SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block. Returns false if the user has requested audio off, or if there is some other immediate problem that will prevent BT audio.
 */
synchronized boolean audioOn(){
  if (VDBG)   log(""String_Node_Str"");
  if (!isHeadsetConnected()) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mHeadsetType == TYPE_HANDSFREE && !mServiceConnectionEstablished) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mConnectedSco != null) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (!mUserWantsAudio) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mOutgoingSco != null) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (mPendingSco) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (isA2dpMultiProfile() && mA2dpState == BluetoothA2dp.STATE_PLAYING) {
    if (DBG)     log(""String_Node_Str"");
    mPendingSco=mA2dp.suspendSink(mA2dpDevice);
    if (mPendingSco) {
      Message msg=mHandler.obtainMessage(MESSAGE_CHECK_PENDING_SCO);
      mHandler.sendMessageDelayed(msg,2000);
    }
 else {
      Log.w(TAG,""String_Node_Str"");
    }
  }
  if (!mPendingSco) {
    mOutgoingSco=createScoSocket();
    if (!mOutgoingSco.connect(mHeadset.getRemoteDevice().getAddress())) {
      mOutgoingSco=null;
    }
  }
  return true;
}","/** 
 * Request to establish SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block. Returns false if the user has requested audio off, or if there is some other immediate problem that will prevent BT audio.
 */
synchronized boolean audioOn(){
  if (VDBG)   log(""String_Node_Str"");
  if (!isHeadsetConnected()) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mHeadsetType == TYPE_HANDSFREE && !mServiceConnectionEstablished) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mConnectedSco != null) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (!mUserWantsAudio) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mOutgoingSco != null) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (mPendingSco) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  mA2dpSuspended=false;
  mPendingSco=false;
  if (isA2dpMultiProfile() && mA2dpState == BluetoothA2dp.STATE_PLAYING) {
    if (DBG)     log(""String_Node_Str"");
    mA2dpSuspended=mA2dp.suspendSink(mA2dpDevice);
    if (mA2dpSuspended) {
      mPendingSco=true;
      Message msg=mHandler.obtainMessage(MESSAGE_CHECK_PENDING_SCO);
      mHandler.sendMessageDelayed(msg,2000);
    }
 else {
      Log.w(TAG,""String_Node_Str"");
    }
  }
  if (!mPendingSco) {
    mOutgoingSco=createScoSocket();
    if (!mOutgoingSco.connect(mHeadset.getRemoteDevice().getAddress())) {
      mOutgoingSco=null;
    }
  }
  return true;
}",0.96
184764,"/** 
 * Request to disconnect SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block.
 */
synchronized void audioOff(){
  if (VDBG)   log(""String_Node_Str"");
  mPendingSco=false;
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getRemoteDevice());
    mConnectedSco.close();
    mConnectedSco=null;
    if (isA2dpMultiProfile() && mA2dpState == BluetoothA2dp.STATE_CONNECTED) {
      if (DBG)       log(""String_Node_Str"");
      mA2dp.resumeSink(mA2dpDevice);
    }
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
}","/** 
 * Request to disconnect SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block.
 */
synchronized void audioOff(){
  if (VDBG)   log(""String_Node_Str"" + mPendingSco + ""String_Node_Str""+ mConnectedSco+ ""String_Node_Str""+ mOutgoingSco+ ""String_Node_Str""+ mA2dpState+ ""String_Node_Str""+ mA2dpSuspended);
  if (mA2dpSuspended) {
    if (DBG)     log(""String_Node_Str"");
    mA2dp.resumeSink(mA2dpDevice);
    mA2dpSuspended=false;
  }
  mPendingSco=false;
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getRemoteDevice());
    mConnectedSco.close();
    mConnectedSco=null;
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
}",0.7016611295681063
184765,"public BluetoothHandsfree(Context context,Phone phone){
  mPhone=phone;
  mContext=context;
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  boolean bluetoothCapable=(adapter != null);
  mHeadset=null;
  mA2dp=new BluetoothA2dp(mContext);
  mA2dpState=BluetoothA2dp.STATE_DISCONNECTED;
  mA2dpDevice=null;
  mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mStartCallWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG + ""String_Node_Str"");
  mStartCallWakeLock.setReferenceCounted(false);
  mStartVoiceRecognitionWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG + ""String_Node_Str"");
  mStartVoiceRecognitionWakeLock.setReferenceCounted(false);
  mLocalBrsf=BRSF_AG_THREE_WAY_CALLING | BRSF_AG_EC_NR | BRSF_AG_REJECT_CALL| BRSF_AG_ENHANCED_CALL_STATUS;
  if (sVoiceCommandIntent == null) {
    sVoiceCommandIntent=new Intent(Intent.ACTION_VOICE_COMMAND);
    sVoiceCommandIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  }
  if (mContext.getPackageManager().resolveActivity(sVoiceCommandIntent,0) != null && !BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
    mLocalBrsf|=BRSF_AG_VOICE_RECOG;
  }
  if (bluetoothCapable) {
    resetAtState();
  }
  mRingingCall=mPhone.getRingingCall();
  mForegroundCall=mPhone.getForegroundCall();
  mBackgroundCall=mPhone.getBackgroundCall();
  mBluetoothPhoneState=new BluetoothPhoneState();
  mUserWantsAudio=true;
  mPhonebook=new BluetoothAtPhonebook(mContext,this);
  mAudioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  cdmaSetSecondCallState(false);
}","public BluetoothHandsfree(Context context,Phone phone){
  mPhone=phone;
  mContext=context;
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  boolean bluetoothCapable=(adapter != null);
  mHeadset=null;
  mA2dp=new BluetoothA2dp(mContext);
  mA2dpState=BluetoothA2dp.STATE_DISCONNECTED;
  mA2dpDevice=null;
  mA2dpSuspended=false;
  mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mStartCallWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG + ""String_Node_Str"");
  mStartCallWakeLock.setReferenceCounted(false);
  mStartVoiceRecognitionWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG + ""String_Node_Str"");
  mStartVoiceRecognitionWakeLock.setReferenceCounted(false);
  mLocalBrsf=BRSF_AG_THREE_WAY_CALLING | BRSF_AG_EC_NR | BRSF_AG_REJECT_CALL| BRSF_AG_ENHANCED_CALL_STATUS;
  if (sVoiceCommandIntent == null) {
    sVoiceCommandIntent=new Intent(Intent.ACTION_VOICE_COMMAND);
    sVoiceCommandIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  }
  if (mContext.getPackageManager().resolveActivity(sVoiceCommandIntent,0) != null && !BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
    mLocalBrsf|=BRSF_AG_VOICE_RECOG;
  }
  if (bluetoothCapable) {
    resetAtState();
  }
  mRingingCall=mPhone.getRingingCall();
  mForegroundCall=mPhone.getForegroundCall();
  mBackgroundCall=mPhone.getBackgroundCall();
  mBluetoothPhoneState=new BluetoothPhoneState();
  mUserWantsAudio=true;
  mPhonebook=new BluetoothAtPhonebook(mContext,this);
  mAudioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  cdmaSetSecondCallState(false);
}",0.9925880172946264
184766,"@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(Intent.ACTION_BATTERY_CHANGED)) {
    updateBatteryState(intent);
  }
 else   if (intent.getAction().equals(TelephonyIntents.ACTION_SIGNAL_STRENGTH_CHANGED)) {
    updateSignalState(intent);
  }
 else   if (intent.getAction().equals(BluetoothA2dp.ACTION_SINK_STATE_CHANGED)) {
    int state=intent.getIntExtra(BluetoothA2dp.EXTRA_SINK_STATE,BluetoothA2dp.STATE_DISCONNECTED);
    int oldState=intent.getIntExtra(BluetoothA2dp.EXTRA_PREVIOUS_SINK_STATE,BluetoothA2dp.STATE_DISCONNECTED);
    BluetoothDevice device=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
synchronized (BluetoothHandsfree.this) {
      mA2dpState=state;
      mA2dpDevice=device;
      if (isA2dpMultiProfile() && mPendingSco) {
        mHandler.removeMessages(MESSAGE_CHECK_PENDING_SCO);
        if (mA2dpState == BluetoothA2dp.STATE_CONNECTED) {
          if (DBG)           log(""String_Node_Str"");
          mOutgoingSco=createScoSocket();
          if (!mOutgoingSco.connect(mHeadset.getRemoteDevice().getAddress())) {
            mOutgoingSco=null;
          }
        }
      }
      mPendingSco=false;
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(Intent.ACTION_BATTERY_CHANGED)) {
    updateBatteryState(intent);
  }
 else   if (intent.getAction().equals(TelephonyIntents.ACTION_SIGNAL_STRENGTH_CHANGED)) {
    updateSignalState(intent);
  }
 else   if (intent.getAction().equals(BluetoothA2dp.ACTION_SINK_STATE_CHANGED)) {
    int state=intent.getIntExtra(BluetoothA2dp.EXTRA_SINK_STATE,BluetoothA2dp.STATE_DISCONNECTED);
    int oldState=intent.getIntExtra(BluetoothA2dp.EXTRA_PREVIOUS_SINK_STATE,BluetoothA2dp.STATE_DISCONNECTED);
    BluetoothDevice device=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
synchronized (BluetoothHandsfree.this) {
      mA2dpState=state;
      mA2dpDevice=device;
      if (oldState == BluetoothA2dp.STATE_PLAYING && mA2dpState == BluetoothA2dp.STATE_CONNECTED) {
        if (mA2dpSuspended) {
          if (mPendingSco) {
            mHandler.removeMessages(MESSAGE_CHECK_PENDING_SCO);
            if (DBG)             log(""String_Node_Str"");
            mOutgoingSco=createScoSocket();
            if (!mOutgoingSco.connect(mHeadset.getRemoteDevice().getAddress())) {
              mOutgoingSco=null;
            }
            mPendingSco=false;
          }
        }
      }
    }
  }
}",0.898024989923418
184767,"/** 
 * Request to establish SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block. Returns false if the user has requested audio off, or if there is some other immediate problem that will prevent BT audio.
 */
synchronized boolean audioOn(){
  if (VDBG)   log(""String_Node_Str"");
  if (!isHeadsetConnected()) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mHeadsetType == TYPE_HANDSFREE && !mServiceConnectionEstablished) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mConnectedSco != null) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (!mUserWantsAudio) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mOutgoingSco != null) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (mPendingSco) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (isA2dpMultiProfile() && mA2dpState == BluetoothA2dp.STATE_PLAYING) {
    if (DBG)     log(""String_Node_Str"");
    mPendingSco=mA2dp.suspendSink(mA2dpDevice);
    if (mPendingSco) {
      Message msg=mHandler.obtainMessage(MESSAGE_CHECK_PENDING_SCO);
      mHandler.sendMessageDelayed(msg,2000);
    }
 else {
      Log.w(TAG,""String_Node_Str"");
    }
  }
  if (!mPendingSco) {
    mOutgoingSco=createScoSocket();
    if (!mOutgoingSco.connect(mHeadset.getRemoteDevice().getAddress())) {
      mOutgoingSco=null;
    }
  }
  return true;
}","/** 
 * Request to establish SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block. Returns false if the user has requested audio off, or if there is some other immediate problem that will prevent BT audio.
 */
synchronized boolean audioOn(){
  if (VDBG)   log(""String_Node_Str"");
  if (!isHeadsetConnected()) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mHeadsetType == TYPE_HANDSFREE && !mServiceConnectionEstablished) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mConnectedSco != null) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (!mUserWantsAudio) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  if (mOutgoingSco != null) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (mPendingSco) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  mA2dpSuspended=false;
  mPendingSco=false;
  if (isA2dpMultiProfile() && mA2dpState == BluetoothA2dp.STATE_PLAYING) {
    if (DBG)     log(""String_Node_Str"");
    mA2dpSuspended=mA2dp.suspendSink(mA2dpDevice);
    if (mA2dpSuspended) {
      mPendingSco=true;
      Message msg=mHandler.obtainMessage(MESSAGE_CHECK_PENDING_SCO);
      mHandler.sendMessageDelayed(msg,2000);
    }
 else {
      Log.w(TAG,""String_Node_Str"");
    }
  }
  if (!mPendingSco) {
    mOutgoingSco=createScoSocket();
    if (!mOutgoingSco.connect(mHeadset.getRemoteDevice().getAddress())) {
      mOutgoingSco=null;
    }
  }
  return true;
}",0.96
184768,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == VOICEMAIL_PROVIDER_CFG_ID) {
    boolean failure=false;
    if (DBG)     log(""String_Node_Str"" + mVMProviderSettingsForced);
    final boolean isVMProviderSettingsForced=mVMProviderSettingsForced;
    mVMProviderSettingsForced=false;
    if (resultCode != RESULT_OK) {
      if (DBG)       log(""String_Node_Str"");
      failure=true;
    }
    if (data == null) {
      if (DBG)       log(""String_Node_Str"");
      failure=true;
    }
    if (data.getBooleanExtra(SIGNOUT_EXTRA,false)) {
      if (DBG)       log(""String_Node_Str"");
      if (isVMProviderSettingsForced) {
        if (DBG)         log(""String_Node_Str"");
        switchToPreviousVoicemailProvider();
      }
 else {
        final String victim=mVoicemailProviders.getValue();
        if (DBG)         log(""String_Node_Str"" + victim);
        Intent i=new Intent(ACTION_ADD_VOICEMAIL);
        i.putExtra(IGNORE_PROVIDER_EXTRA,victim);
        i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        this.startActivity(i);
      }
      return;
    }
    String vmNum=data.getStringExtra(VM_NUMBER_EXTRA);
    if (vmNum == null || vmNum.length() == 0) {
      if (DBG)       log(""String_Node_Str"");
      failure=true;
    }
    if (failure) {
      if (DBG)       log(""String_Node_Str"");
      if (isVMProviderSettingsForced) {
        switchToPreviousVoicemailProvider();
      }
 else {
        if (DBG)         log(""String_Node_Str"");
      }
      return;
    }
    final String fwdNum=data.getStringExtra(FWD_NUMBER_EXTRA);
    final int fwdNumTime=data.getIntExtra(FWD_NUMBER_TIME_EXTRA,20);
    if (DBG)     log(""String_Node_Str"" + (fwdNum != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    saveVoiceMailAndForwardingNumber(mVoicemailProviders.getValue(),new VoiceMailProviderSettings(vmNum,(String)fwdNum,fwdNumTime));
    return;
  }
  if (resultCode != RESULT_OK) {
    if (DBG)     log(""String_Node_Str"");
    return;
  }
  Cursor cursor=getContentResolver().query(data.getData(),NUM_PROJECTION,null,null,null);
  if ((cursor == null) || (!cursor.moveToFirst())) {
    if (DBG)     log(""String_Node_Str"");
    return;
  }
switch (requestCode) {
case VOICEMAIL_PREF_ID:
    mSubMenuVoicemailSettings.onPickActivityResult(cursor.getString(0));
  break;
default :
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == VOICEMAIL_PROVIDER_CFG_ID) {
    boolean failure=false;
    if (DBG)     log(""String_Node_Str"" + mVMProviderSettingsForced);
    final boolean isVMProviderSettingsForced=mVMProviderSettingsForced;
    mVMProviderSettingsForced=false;
    String vmNum=null;
    if (resultCode != RESULT_OK) {
      if (DBG)       log(""String_Node_Str"");
      failure=true;
    }
 else {
      if (data == null) {
        if (DBG)         log(""String_Node_Str"");
        failure=true;
      }
 else {
        if (data.getBooleanExtra(SIGNOUT_EXTRA,false)) {
          if (DBG)           log(""String_Node_Str"");
          if (isVMProviderSettingsForced) {
            if (DBG)             log(""String_Node_Str"");
            switchToPreviousVoicemailProvider();
          }
 else {
            final String victim=getCurrentVoicemailProviderKey();
            if (DBG)             log(""String_Node_Str"" + victim);
            Intent i=new Intent(ACTION_ADD_VOICEMAIL);
            i.putExtra(IGNORE_PROVIDER_EXTRA,victim);
            i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            this.startActivity(i);
          }
          return;
        }
        vmNum=data.getStringExtra(VM_NUMBER_EXTRA);
        if (vmNum == null || vmNum.length() == 0) {
          if (DBG)           log(""String_Node_Str"");
          failure=true;
        }
      }
    }
    if (failure) {
      if (DBG)       log(""String_Node_Str"");
      if (isVMProviderSettingsForced) {
        switchToPreviousVoicemailProvider();
      }
 else {
        if (DBG)         log(""String_Node_Str"");
      }
      return;
    }
    final String fwdNum=data.getStringExtra(FWD_NUMBER_EXTRA);
    final int fwdNumTime=data.getIntExtra(FWD_NUMBER_TIME_EXTRA,20);
    if (DBG)     log(""String_Node_Str"" + (fwdNum != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    saveVoiceMailAndForwardingNumber(getCurrentVoicemailProviderKey(),new VoiceMailProviderSettings(vmNum,(String)fwdNum,fwdNumTime));
    return;
  }
  if (resultCode != RESULT_OK) {
    if (DBG)     log(""String_Node_Str"");
    return;
  }
  Cursor cursor=getContentResolver().query(data.getData(),NUM_PROJECTION,null,null,null);
  if ((cursor == null) || (!cursor.moveToFirst())) {
    if (DBG)     log(""String_Node_Str"");
    return;
  }
switch (requestCode) {
case VOICEMAIL_PREF_ID:
    mSubMenuVoicemailSettings.onPickActivityResult(cursor.getString(0));
  break;
default :
}
}",0.9125816993464052
184769,"@Override public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen,Preference preference){
  if (preference == mSubMenuVoicemailSettings) {
    return true;
  }
 else   if (preference == mButtonDTMF) {
    return true;
  }
 else   if (preference == mButtonTTY) {
    return true;
  }
 else   if (preference == mButtonAutoRetry) {
    android.provider.Settings.System.putInt(mPhone.getContext().getContentResolver(),android.provider.Settings.System.CALL_AUTO_RETRY,mButtonAutoRetry.isChecked() ? 1 : 0);
    return true;
  }
 else   if (preference == mButtonHAC) {
    int hac=mButtonHAC.isChecked() ? 1 : 0;
    Settings.System.putInt(mPhone.getContext().getContentResolver(),Settings.System.HEARING_AID,hac);
    mAudioManager.setParameter(HAC_KEY,hac != 0 ? HAC_VAL_ON : HAC_VAL_OFF);
    return true;
  }
 else   if (preference == mVoicemailSettings) {
    if (preference.getIntent() != null) {
      this.startActivityForResult(preference.getIntent(),VOICEMAIL_PROVIDER_CFG_ID);
    }
 else {
      updateVoiceNumberField();
    }
    return true;
  }
  return false;
}","@Override public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen,Preference preference){
  if (preference == mSubMenuVoicemailSettings) {
    return true;
  }
 else   if (preference == mButtonDTMF) {
    return true;
  }
 else   if (preference == mButtonTTY) {
    return true;
  }
 else   if (preference == mButtonAutoRetry) {
    android.provider.Settings.System.putInt(mPhone.getContext().getContentResolver(),android.provider.Settings.System.CALL_AUTO_RETRY,mButtonAutoRetry.isChecked() ? 1 : 0);
    return true;
  }
 else   if (preference == mButtonHAC) {
    int hac=mButtonHAC.isChecked() ? 1 : 0;
    Settings.System.putInt(mPhone.getContext().getContentResolver(),Settings.System.HEARING_AID,hac);
    mAudioManager.setParameter(HAC_KEY,hac != 0 ? HAC_VAL_ON : HAC_VAL_OFF);
    return true;
  }
 else   if (preference == mVoicemailSettings) {
    if (preference.getIntent() != null) {
      if (DBG)       log(""String_Node_Str"" + preference.getIntent().getPackage());
      this.startActivityForResult(preference.getIntent(),VOICEMAIL_PROVIDER_CFG_ID);
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      updateVoiceNumberField();
      mSubMenuVoicemailSettings.showPhoneNumberDialog();
    }
    return true;
  }
  return false;
}",0.9215769393810936
184770,"/** 
 * Implemented to support onPreferenceChangeListener to look for preference changes.
 * @param preference is the preference to be changed
 * @param objValue should be the value of the selection, NOT its localizeddisplay value.
 */
public boolean onPreferenceChange(Preference preference,Object objValue){
  if (preference == mButtonDTMF) {
    int index=mButtonDTMF.findIndexOfValue((String)objValue);
    Settings.System.putInt(mPhone.getContext().getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,index);
  }
 else   if (preference == mButtonTTY) {
    handleTTYChange(preference,objValue);
  }
 else   if (preference == mVoicemailProviders) {
    mPreviousVMProviderKey=mVoicemailProviders.getValue();
    final String newProviderKey=(String)objValue;
    if (DBG)     log(""String_Node_Str"" + newProviderKey + ""String_Node_Str""+ mPreviousVMProviderKey);
    updateVMPreferenceWidgets(newProviderKey);
    final VoiceMailProviderSettings newProviderSettings=loadSettingsForVoiceMailProvider(newProviderKey);
    if (newProviderSettings == null) {
      mVMProviderSettingsForced=true;
      simulatePreferenceClick(mVoicemailSettings);
    }
 else {
      saveVoiceMailAndForwardingNumber(newProviderKey,newProviderSettings);
    }
  }
  return true;
}","/** 
 * Implemented to support onPreferenceChangeListener to look for preference changes.
 * @param preference is the preference to be changed
 * @param objValue should be the value of the selection, NOT its localizeddisplay value.
 */
public boolean onPreferenceChange(Preference preference,Object objValue){
  if (preference == mButtonDTMF) {
    int index=mButtonDTMF.findIndexOfValue((String)objValue);
    Settings.System.putInt(mPhone.getContext().getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,index);
  }
 else   if (preference == mButtonTTY) {
    handleTTYChange(preference,objValue);
  }
 else   if (preference == mVoicemailProviders) {
    mPreviousVMProviderKey=getCurrentVoicemailProviderKey();
    final String newProviderKey=(String)objValue;
    if (DBG)     log(""String_Node_Str"" + newProviderKey + ""String_Node_Str""+ mPreviousVMProviderKey);
    updateVMPreferenceWidgets(newProviderKey);
    final VoiceMailProviderSettings newProviderSettings=loadSettingsForVoiceMailProvider(newProviderKey);
    if (newProviderSettings == null) {
      if (DBG)       log(""String_Node_Str"");
      mVMProviderSettingsForced=true;
      simulatePreferenceClick(mVoicemailSettings);
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      saveVoiceMailAndForwardingNumber(newProviderKey,newProviderSettings);
    }
  }
  return true;
}",0.943939393939394
184771,"/** 
 * Enumerates existing VM providers and puts their data into the list and populates the preference list objects with their names. In case we are called with ACTION_ADD_VOICEMAIL intent the intent may have an extra string called IGNORE_PROVIDER_EXTRA with ""package.activityName"" of the provider which should be hidden when we bring up the list of possible VM providers to choose. This allows a provider which is being disabled (e.g. GV user logging out) to force the user to pick some other provider.
 */
private void initVoiceMailProviders(){
  mPerProviderSavedVMNumbers=this.getApplicationContext().getSharedPreferences(VM_NUMBERS_SHARED_PREFERENCES_NAME,MODE_PRIVATE);
  String providerToIgnore=null;
  if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL)) {
    if (DBG)     log(""String_Node_Str"");
    if (getIntent().hasExtra(IGNORE_PROVIDER_EXTRA)) {
      providerToIgnore=getIntent().getStringExtra(IGNORE_PROVIDER_EXTRA);
    }
    if (DBG)     log(""String_Node_Str"" + providerToIgnore);
    deleteSettingsForVoicemailProvider(providerToIgnore);
  }
  mVMProvidersData.clear();
  final String myCarrier=getString(R.string.voicemail_default);
  mVMProvidersData.put(DEFAULT_VM_PROVIDER_KEY,new VoiceMailProvider(myCarrier,null));
  PackageManager pm=getPackageManager();
  Intent intent=new Intent();
  intent.setAction(ACTION_CONFIGURE_VOICEMAIL);
  List<ResolveInfo> resolveInfos=pm.queryIntentActivities(intent,0);
  int len=resolveInfos.size() + 1;
  for (int i=0; i < resolveInfos.size(); i++) {
    final ResolveInfo ri=resolveInfos.get(i);
    final ActivityInfo currentActivityInfo=ri.activityInfo;
    final String key=makeKeyForActivity(currentActivityInfo);
    if (DBG)     log(""String_Node_Str"" + key);
    if (key.equals(providerToIgnore)) {
      if (DBG)       log(""String_Node_Str"" + key);
      len--;
      continue;
    }
    final String nameForDisplay=ri.loadLabel(pm).toString();
    Intent providerIntent=new Intent();
    providerIntent.setAction(ACTION_CONFIGURE_VOICEMAIL);
    providerIntent.setClassName(currentActivityInfo.packageName,currentActivityInfo.name);
    mVMProvidersData.put(key,new VoiceMailProvider(nameForDisplay,providerIntent));
  }
  String[] entries=new String[len];
  String[] values=new String[len];
  entries[0]=myCarrier;
  values[0]=DEFAULT_VM_PROVIDER_KEY;
  int entryIdx=1;
  for (int i=0; i < resolveInfos.size(); i++) {
    final String key=makeKeyForActivity(resolveInfos.get(i).activityInfo);
    if (!mVMProvidersData.containsKey(key)) {
      continue;
    }
    entries[entryIdx]=mVMProvidersData.get(key).name;
    values[entryIdx]=key;
    entryIdx++;
  }
  mVoicemailProviders.setEntries(entries);
  mVoicemailProviders.setEntryValues(values);
  mPreviousVMProviderKey=mVoicemailProviders.getValue();
  updateVMPreferenceWidgets(mPreviousVMProviderKey);
}","/** 
 * Enumerates existing VM providers and puts their data into the list and populates the preference list objects with their names. In case we are called with ACTION_ADD_VOICEMAIL intent the intent may have an extra string called IGNORE_PROVIDER_EXTRA with ""package.activityName"" of the provider which should be hidden when we bring up the list of possible VM providers to choose. This allows a provider which is being disabled (e.g. GV user logging out) to force the user to pick some other provider.
 */
private void initVoiceMailProviders(){
  mPerProviderSavedVMNumbers=this.getApplicationContext().getSharedPreferences(VM_NUMBERS_SHARED_PREFERENCES_NAME,MODE_PRIVATE);
  String providerToIgnore=null;
  if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL)) {
    if (DBG)     log(""String_Node_Str"");
    if (getIntent().hasExtra(IGNORE_PROVIDER_EXTRA)) {
      providerToIgnore=getIntent().getStringExtra(IGNORE_PROVIDER_EXTRA);
    }
    if (DBG)     log(""String_Node_Str"" + providerToIgnore);
    if (providerToIgnore != null) {
      deleteSettingsForVoicemailProvider(providerToIgnore);
    }
  }
  mVMProvidersData.clear();
  final String myCarrier=getString(R.string.voicemail_default);
  mVMProvidersData.put(DEFAULT_VM_PROVIDER_KEY,new VoiceMailProvider(myCarrier,null));
  PackageManager pm=getPackageManager();
  Intent intent=new Intent();
  intent.setAction(ACTION_CONFIGURE_VOICEMAIL);
  List<ResolveInfo> resolveInfos=pm.queryIntentActivities(intent,0);
  int len=resolveInfos.size() + 1;
  for (int i=0; i < resolveInfos.size(); i++) {
    final ResolveInfo ri=resolveInfos.get(i);
    final ActivityInfo currentActivityInfo=ri.activityInfo;
    final String key=makeKeyForActivity(currentActivityInfo);
    if (DBG)     log(""String_Node_Str"" + key);
    if (key.equals(providerToIgnore)) {
      if (DBG)       log(""String_Node_Str"" + key);
      len--;
      continue;
    }
    final String nameForDisplay=ri.loadLabel(pm).toString();
    Intent providerIntent=new Intent();
    providerIntent.setAction(ACTION_CONFIGURE_VOICEMAIL);
    providerIntent.setClassName(currentActivityInfo.packageName,currentActivityInfo.name);
    mVMProvidersData.put(key,new VoiceMailProvider(nameForDisplay,providerIntent));
  }
  String[] entries=new String[len];
  String[] values=new String[len];
  entries[0]=myCarrier;
  values[0]=DEFAULT_VM_PROVIDER_KEY;
  int entryIdx=1;
  for (int i=0; i < resolveInfos.size(); i++) {
    final String key=makeKeyForActivity(resolveInfos.get(i).activityInfo);
    if (!mVMProvidersData.containsKey(key)) {
      continue;
    }
    entries[entryIdx]=mVMProvidersData.get(key).name;
    values[entryIdx]=key;
    entryIdx++;
  }
  mVoicemailProviders.setEntries(entries);
  mVoicemailProviders.setEntryValues(values);
  mPreviousVMProviderKey=getCurrentVoicemailProviderKey();
  updateVMPreferenceWidgets(mPreviousVMProviderKey);
}",0.9881201956673656
184772,"private void handleVMBtnClickRequest(){
  saveVoiceMailAndForwardingNumber(mVoicemailProviders.getValue(),new VoiceMailProviderSettings(mSubMenuVoicemailSettings.getPhoneNumber(),FWD_SETTINGS_DONT_TOUCH));
}","private void handleVMBtnClickRequest(){
  saveVoiceMailAndForwardingNumber(getCurrentVoicemailProviderKey(),new VoiceMailProviderSettings(mSubMenuVoicemailSettings.getPhoneNumber(),FWD_SETTINGS_DONT_TOUCH));
}",0.9423076923076924
184773,"private int waitForConnect(HeadsetBase headset){
  int result=ETIMEOUT;
  for (int i=0; i < 40 && result == ETIMEOUT; i++) {
    result=headset.waitForAsyncConnect(500,mConnectedStatusHandler);
    if (isInterrupted()) {
      headset.disconnect();
      return EINTERRUPT;
    }
  }
  return result;
}","private int waitForConnect(HeadsetBase headset){
  int result=0;
  for (int i=0; i < 40 && result == 0; i++) {
    result=headset.waitForAsyncConnect(500,mConnectedStatusHandler);
    if (isInterrupted()) {
      headset.disconnect();
      return EINTERRUPT;
    }
  }
  return result;
}",0.9694915254237289
184774,"@Override public void run(){
  long timestamp;
  timestamp=System.currentTimeMillis();
  HeadsetBase headset=new HeadsetBase(mPowerManager,mAdapter,device,channel);
  int result=waitForConnect(headset);
  if (result == ECONNREFUSED) {
    Log.i(TAG,""String_Node_Str"");
    try {
      sleep(1000);
    }
 catch (    InterruptedException e) {
    }
    result=waitForConnect(headset);
  }
  if (result == EINTERRUPT)   return;
  if (DBG)   log(""String_Node_Str"" + (System.currentTimeMillis() - timestamp) + ""String_Node_Str"");
  if (isInterrupted()) {
    headset.disconnect();
    return;
  }
  if (result < 0) {
    Log.w(TAG,""String_Node_Str"" + result);
    if (result == ETIMEOUT) {
      Log.w(TAG,""String_Node_Str"");
    }
    mConnectingStatusHandler.obtainMessage(RFCOMM_ERROR).sendToTarget();
    return;
  }
 else {
    mConnectingStatusHandler.obtainMessage(RFCOMM_CONNECTED,headset).sendToTarget();
  }
}","@Override public void run(){
  long timestamp;
  timestamp=System.currentTimeMillis();
  HeadsetBase headset=new HeadsetBase(mPowerManager,mAdapter,device,channel);
  int result=waitForConnect(headset);
  if (result == ECONNREFUSED) {
    Log.i(TAG,""String_Node_Str"");
    try {
      sleep(1000);
    }
 catch (    InterruptedException e) {
    }
    result=waitForConnect(headset);
  }
  if (result == EINTERRUPT)   return;
  if (DBG)   log(""String_Node_Str"" + (System.currentTimeMillis() - timestamp) + ""String_Node_Str"");
  if (isInterrupted()) {
    headset.disconnect();
    return;
  }
  if (result < 0) {
    Log.w(TAG,""String_Node_Str"" + result);
    mConnectingStatusHandler.obtainMessage(RFCOMM_ERROR).sendToTarget();
    return;
  }
 else   if (result == 0) {
    mConnectingStatusHandler.obtainMessage(RFCOMM_ERROR).sendToTarget();
    Log.w(TAG,""String_Node_Str"" + result + ""String_Node_Str"");
    return;
  }
 else {
    mConnectingStatusHandler.obtainMessage(RFCOMM_CONNECTED,headset).sendToTarget();
  }
}",0.8508002065049045
184775,"/** 
 * Restore the mute setting from the earliest connection of the foreground call.
 */
static Boolean restoreMuteState(Phone phone){
  Connection c=phone.getForegroundCall().getEarliestConnection();
  if (c != null) {
    int phoneType=phone.getPhoneType();
    Boolean shouldMute=null;
    if (phoneType == Phone.PHONE_TYPE_CDMA && PhoneApp.getInstance().cdmaPhoneCallState.getCurrentCallState() == CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) {
      shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getLatestConnection());
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getEarliestConnection());
    }
    if (shouldMute == null) {
      if (DBG)       log(""String_Node_Str"");
      shouldMute=Boolean.FALSE;
    }
    setMute(phone,shouldMute.booleanValue());
    return shouldMute;
  }
  return Boolean.valueOf(getMute(phone));
}","/** 
 * Restore the mute setting from the earliest connection of the foreground call.
 */
static Boolean restoreMuteState(Phone phone){
  Connection c=phone.getForegroundCall().getEarliestConnection();
  if (c != null) {
    int phoneType=phone.getPhoneType();
    Boolean shouldMute=null;
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getLatestConnection());
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getEarliestConnection());
    }
    if (shouldMute == null) {
      if (DBG)       log(""String_Node_Str"");
      shouldMute=Boolean.FALSE;
    }
    setMute(phone,shouldMute.booleanValue());
    return shouldMute;
  }
  return Boolean.valueOf(getMute(phone));
}",0.9324169530355098
184776,"/** 
 * Restore the mute setting from the earliest connection of the foreground call.
 */
static Boolean restoreMuteState(Phone phone){
  Connection c=phone.getForegroundCall().getEarliestConnection();
  if (c != null) {
    int phoneType=phone.getPhoneType();
    Boolean shouldMute=null;
    if (phoneType == Phone.PHONE_TYPE_CDMA && PhoneApp.getInstance().cdmaPhoneCallState.getCurrentCallState() == CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) {
      shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getLatestConnection());
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getEarliestConnection());
    }
    if (shouldMute == null) {
      if (DBG)       log(""String_Node_Str"");
      shouldMute=Boolean.FALSE;
    }
    setMute(phone,shouldMute.booleanValue());
    return shouldMute;
  }
  return Boolean.valueOf(getMute(phone));
}","/** 
 * Restore the mute setting from the earliest connection of the foreground call.
 */
static Boolean restoreMuteState(Phone phone){
  Connection c=phone.getForegroundCall().getEarliestConnection();
  if (c != null) {
    int phoneType=phone.getPhoneType();
    Boolean shouldMute=null;
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getLatestConnection());
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getEarliestConnection());
    }
    if (shouldMute == null) {
      if (DBG)       log(""String_Node_Str"");
      shouldMute=Boolean.FALSE;
    }
    setMute(phone,shouldMute.booleanValue());
    return shouldMute;
  }
  return Boolean.valueOf(getMute(phone));
}",0.9324169530355098
184777,"/** 
 * Restore the mute setting from the earliest connection of the foreground call.
 */
static Boolean restoreMuteState(Phone phone){
  Connection c=phone.getForegroundCall().getEarliestConnection();
  if (c != null) {
    int phoneType=phone.getPhoneType();
    Boolean shouldMute=null;
    if (phoneType == Phone.PHONE_TYPE_CDMA && PhoneApp.getInstance().cdmaPhoneCallState.getCurrentCallState() == CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) {
      shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getLatestConnection());
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getEarliestConnection());
    }
    if (shouldMute == null) {
      if (DBG)       log(""String_Node_Str"");
      shouldMute=Boolean.FALSE;
    }
    setMute(phone,shouldMute.booleanValue());
    return shouldMute;
  }
  return Boolean.valueOf(getMute(phone));
}","/** 
 * Restore the mute setting from the earliest connection of the foreground call.
 */
static Boolean restoreMuteState(Phone phone){
  Connection c=phone.getForegroundCall().getEarliestConnection();
  if (c != null) {
    int phoneType=phone.getPhoneType();
    Boolean shouldMute=null;
    if (phoneType == Phone.PHONE_TYPE_CDMA) {
      shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getLatestConnection());
    }
 else     if (phoneType == Phone.PHONE_TYPE_GSM) {
      shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getEarliestConnection());
    }
    if (shouldMute == null) {
      if (DBG)       log(""String_Node_Str"");
      shouldMute=Boolean.FALSE;
    }
    setMute(phone,shouldMute.booleanValue());
    return shouldMute;
  }
  return Boolean.valueOf(getMute(phone));
}",0.9324169530355098
184778,"/** 
 * Resets the audio mode and speaker state when a call ends.
 */
private void resetAudioStateAfterDisconnect(){
  if (VDBG)   log(""String_Node_Str"");
  if (mBluetoothHandsfree != null) {
    mBluetoothHandsfree.audioOff();
  }
  if (PhoneUtils.isSpeakerOn(mPhone.getContext())) {
    PhoneUtils.turnOnSpeaker(mPhone.getContext(),false,true);
  }
  PhoneUtils.setAudioMode(mPhone.getContext(),AudioManager.MODE_NORMAL);
}","/** 
 * Resets the audio mode and speaker state when a call ends.
 */
private void resetAudioStateAfterDisconnect(){
  if (VDBG)   log(""String_Node_Str"");
  if (mBluetoothHandsfree != null) {
    mBluetoothHandsfree.audioOff();
  }
  PhoneUtils.turnOnSpeaker(mPhone.getContext(),false,true);
  PhoneUtils.setAudioMode(mPhone.getContext(),AudioManager.MODE_NORMAL);
}",0.9102402022756004
184779,"/** 
 * Resets the audio mode and speaker state when a call ends.
 */
private void resetAudioStateAfterDisconnect(){
  if (VDBG)   log(""String_Node_Str"");
  if (mBluetoothHandsfree != null) {
    mBluetoothHandsfree.audioOff();
  }
  if (PhoneUtils.isSpeakerOn(mPhone.getContext())) {
    PhoneUtils.turnOnSpeaker(mPhone.getContext(),false,true);
  }
  PhoneUtils.setAudioMode(mPhone.getContext(),AudioManager.MODE_NORMAL);
}","/** 
 * Resets the audio mode and speaker state when a call ends.
 */
private void resetAudioStateAfterDisconnect(){
  if (VDBG)   log(""String_Node_Str"");
  if (mBluetoothHandsfree != null) {
    mBluetoothHandsfree.audioOff();
  }
  PhoneUtils.turnOnSpeaker(mPhone.getContext(),false,true);
  PhoneUtils.setAudioMode(mPhone.getContext(),AudioManager.MODE_NORMAL);
}",0.9102402022756004
184780,"/** 
 * Resets the audio mode and speaker state when a call ends.
 */
private void resetAudioStateAfterDisconnect(){
  if (VDBG)   log(""String_Node_Str"");
  if (mBluetoothHandsfree != null) {
    mBluetoothHandsfree.audioOff();
  }
  if (PhoneUtils.isSpeakerOn(mPhone.getContext())) {
    PhoneUtils.turnOnSpeaker(mPhone.getContext(),false,true);
  }
  PhoneUtils.setAudioMode(mPhone.getContext(),AudioManager.MODE_NORMAL);
}","/** 
 * Resets the audio mode and speaker state when a call ends.
 */
private void resetAudioStateAfterDisconnect(){
  if (VDBG)   log(""String_Node_Str"");
  if (mBluetoothHandsfree != null) {
    mBluetoothHandsfree.audioOff();
  }
  PhoneUtils.turnOnSpeaker(mPhone.getContext(),false,true);
  PhoneUtils.setAudioMode(mPhone.getContext(),AudioManager.MODE_NORMAL);
}",0.9102402022756004
184781,"/** 
 * Show ""Programming In Progress"" screen during OTA call. Shown when OTA provisioning is in progress after user has selected an option.
 */
private void otaShowInProgressScreen(){
  if (DBG)   log(""String_Node_Str"");
  if (!isDialerOpened()) {
    otaScreenInitialize();
    mOtaWidgetData.otaTextListenProgress.setVisibility(View.VISIBLE);
    mOtaWidgetData.otaTextListenProgress.setText(R.string.ota_progress);
    mOtaWidgetData.otaTextProgressBar.setVisibility(View.VISIBLE);
    mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.VISIBLE);
    mOtaWidgetData.otaSpeakerButton.setVisibility(View.VISIBLE);
  }
 else {
    if (mDialerDrawer != null)     mDialerDrawer.setVisibility(View.VISIBLE);
  }
  mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_PROGRESS;
  mInCallScreen.updateMenuItems();
}","/** 
 * Show ""Programming In Progress"" screen during OTA call. Shown when OTA provisioning is in progress after user has selected an option.
 */
private void otaShowInProgressScreen(){
  if (DBG)   log(""String_Node_Str"");
  if (!isDialerOpened()) {
    otaScreenInitialize();
    mOtaWidgetData.otaTextListenProgress.setVisibility(View.VISIBLE);
    mOtaWidgetData.otaTextListenProgress.setText(R.string.ota_progress);
    mOtaWidgetData.otaTextProgressBar.setVisibility(View.VISIBLE);
    mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.VISIBLE);
    mOtaWidgetData.otaSpeakerButton.setVisibility(View.VISIBLE);
    boolean speakerOn=PhoneUtils.isSpeakerOn(mContext);
    mOtaWidgetData.otaSpeakerButton.setChecked(speakerOn);
  }
 else {
    if (mDialerDrawer != null)     mDialerDrawer.setVisibility(View.VISIBLE);
  }
  mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_PROGRESS;
  mInCallScreen.updateMenuItems();
}",0.9377368706009744
184782,"/** 
 * Starts the OTA provisioning call.  If the MIN isn't available yet, it returns false and adds an event to return the request to the calling app when it becomes available. 
 * @param context
 * @param handler
 * @param request
 * @return true if we were able to launch Ota activity or it's not required; false otherwise
 */
public static boolean maybeDoOtaCall(Context context,Handler handler,int request){
  PhoneApp app=PhoneApp.getInstance();
  Phone phone=app.phone;
  if (!isCdmaPhone()) {
    if (DBG)     Log.v(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  if (!phone.isMinInfoReady()) {
    if (DBG)     log(""String_Node_Str"");
    phone.registerForSubscriptionInfoReady(handler,request,null);
    return false;
  }
  phone.unregisterForSubscriptionInfoReady(handler);
  String min=phone.getCdmaMin();
  if (DBG)   log(""String_Node_Str"" + min);
  boolean phoneNeedsActivation=false;
  try {
    phoneNeedsActivation=needsActivation(min);
  }
 catch (  IllegalArgumentException e) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (DBG)   log(""String_Node_Str"" + phoneNeedsActivation);
  int otaShowActivationScreen=context.getResources().getInteger(R.integer.OtaShowActivationScreen);
  if (DBG)   log(""String_Node_Str"" + otaShowActivationScreen);
  if (phoneNeedsActivation && (otaShowActivationScreen == OTA_SHOW_ACTIVATION_SCREEN_ON)) {
    app.cdmaOtaProvisionData.isOtaCallIntentProcessed=false;
    Intent newIntent=new Intent(InCallScreen.ACTION_SHOW_ACTIVATION);
    newIntent.setClass(context,InCallScreen.class);
    newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startActivity(newIntent);
    if (DBG)     log(""String_Node_Str"");
  }
 else {
    if (DBG)     log(""String_Node_Str"");
  }
  return true;
}","/** 
 * Starts the OTA provisioning call.  If the MIN isn't available yet, it returns false and adds an event to return the request to the calling app when it becomes available.
 * @param context
 * @param handler
 * @param request
 * @return true if we were able to launch Ota activity or it's not required; false otherwise
 */
public static boolean maybeDoOtaCall(Context context,Handler handler,int request){
  PhoneApp app=PhoneApp.getInstance();
  Phone phone=app.phone;
  if (!isCdmaPhone()) {
    if (DBG)     Log.v(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  if (!phone.isMinInfoReady()) {
    if (DBG)     log(""String_Node_Str"");
    phone.registerForSubscriptionInfoReady(handler,request,null);
    return false;
  }
  phone.unregisterForSubscriptionInfoReady(handler);
  String min=phone.getCdmaMin();
  if (DBG)   log(""String_Node_Str"" + min);
  boolean phoneNeedsActivation=false;
  try {
    phoneNeedsActivation=needsActivation(min);
  }
 catch (  IllegalArgumentException e) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (DBG)   log(""String_Node_Str"" + phoneNeedsActivation);
  int otaShowActivationScreen=context.getResources().getInteger(R.integer.OtaShowActivationScreen);
  if (DBG)   log(""String_Node_Str"" + otaShowActivationScreen);
  if (phoneNeedsActivation && (otaShowActivationScreen == OTA_SHOW_ACTIVATION_SCREEN_ON)) {
    app.cdmaOtaProvisionData.isOtaCallIntentProcessed=false;
    Intent newIntent=new Intent(InCallScreen.ACTION_SHOW_ACTIVATION);
    newIntent.setClass(context,InCallScreen.class);
    newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startActivity(newIntent);
    if (DBG)     log(""String_Node_Str"");
  }
 else {
    if (DBG)     log(""String_Node_Str"");
  }
  return true;
}",0.99971870604782
184783,"/** 
 * Clear out all OTA UI widget elements. Needs to get called when OTA call ends or InCallScreen is destroyed.
 */
public void cleanOtaScreen(){
  if (DBG)   log(""String_Node_Str"");
  mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_UNDEFINED;
  mApplication.cdmaOtaProvisionData.isOtaCallCommitted=false;
  mApplication.cdmaOtaProvisionData.isOtaCallIntentProcessed=false;
  mApplication.cdmaOtaProvisionData.inOtaSpcState=false;
  mApplication.cdmaOtaProvisionData.activationCount=0;
  mApplication.cdmaOtaProvisionData.otaSpcUptime=0;
  if (mInCallPanel != null)   mInCallPanel.setVisibility(View.VISIBLE);
  if (mCallCard != null)   mCallCard.hideCallCardElements();
  if (mDialerDrawer != null)   mDialerDrawer.setVisibility(View.VISIBLE);
  mOtaWidgetData.otaTextActivate.setVisibility(View.GONE);
  mOtaWidgetData.otaTextListenProgress.setVisibility(View.GONE);
  mOtaWidgetData.otaTextProgressBar.setVisibility(View.GONE);
  mOtaWidgetData.otaTextSuccessFail.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsActivate.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsFailSuccess.setVisibility(View.GONE);
  mOtaWidgetData.otaCallCardBase.setVisibility(View.GONE);
  mOtaWidgetData.otaDtmfDialerView.setVisibility(View.GONE);
  mOtaWidgetData.otaNextButton.setVisibility(View.GONE);
  mOtaWidgetData.otaTryAgainButton.setVisibility(View.GONE);
}","/** 
 * Clear out all OTA UI widget elements. Needs to get called when OTA call ends or InCallScreen is destroyed.
 */
public void cleanOtaScreen(){
  if (DBG)   log(""String_Node_Str"");
  mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_UNDEFINED;
  mApplication.cdmaOtaProvisionData.isOtaCallCommitted=false;
  mApplication.cdmaOtaProvisionData.isOtaCallIntentProcessed=false;
  mApplication.cdmaOtaProvisionData.inOtaSpcState=false;
  mApplication.cdmaOtaProvisionData.activationCount=0;
  mApplication.cdmaOtaProvisionData.otaSpcUptime=0;
  if (mInCallPanel != null)   mInCallPanel.setVisibility(View.VISIBLE);
  if (mCallCard != null)   mCallCard.hideCallCardElements();
  if (mDialerDrawer != null)   mDialerDrawer.setVisibility(View.VISIBLE);
  mOtaWidgetData.otaTextActivate.setVisibility(View.GONE);
  mOtaWidgetData.otaTextListenProgress.setVisibility(View.GONE);
  mOtaWidgetData.otaTextProgressBar.setVisibility(View.GONE);
  mOtaWidgetData.otaTextSuccessFail.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsActivate.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsFailSuccess.setVisibility(View.GONE);
  mOtaWidgetData.otaCallCardBase.setVisibility(View.GONE);
  mOtaWidgetData.otaDtmfDialerView.setVisibility(View.GONE);
  mOtaWidgetData.otaNextButton.setVisibility(View.GONE);
  mOtaWidgetData.otaTryAgainButton.setVisibility(View.GONE);
  setSpeaker(false);
}",0.9930394431554525
184784,"/** 
 * Show ""Listen for Instruction"" screen during OTA call. Shown when OTA Call is initiated and user needs to listen for network instructions and press appropriate DTMF digits to proceed to the ""Programming in Progress"" phase.
 */
private void otaShowListeningScreen(){
  if (DBG)   log(""String_Node_Str"");
  if (mApplication.cdmaOtaConfigData.otaShowListeningScreen == OTA_SHOW_LISTENING_SCREEN_ON) {
    if (DBG)     log(""String_Node_Str"");
    if (!isDialerOpened()) {
      otaScreenInitialize();
      mOtaWidgetData.otaTextListenProgress.setVisibility(View.VISIBLE);
      mOtaWidgetData.otaTextListenProgress.setText(R.string.ota_listen);
      mOtaWidgetData.otaDtmfDialerView.setVisibility(View.VISIBLE);
      mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.VISIBLE);
      mOtaWidgetData.otaSpeakerButton.setVisibility(View.VISIBLE);
    }
 else {
      if (mDialerDrawer != null)       mDialerDrawer.setVisibility(View.VISIBLE);
    }
    mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_LISTENING;
    mInCallScreen.updateMenuItems();
  }
 else {
    if (DBG)     log(""String_Node_Str"");
    otaShowInProgressScreen();
  }
}","/** 
 * Show ""Listen for Instruction"" screen during OTA call. Shown when OTA Call is initiated and user needs to listen for network instructions and press appropriate DTMF digits to proceed to the ""Programming in Progress"" phase.
 */
private void otaShowListeningScreen(){
  if (DBG)   log(""String_Node_Str"");
  if (mApplication.cdmaOtaConfigData.otaShowListeningScreen == OTA_SHOW_LISTENING_SCREEN_ON) {
    if (DBG)     log(""String_Node_Str"");
    if (!isDialerOpened()) {
      otaScreenInitialize();
      mOtaWidgetData.otaTextListenProgress.setVisibility(View.VISIBLE);
      mOtaWidgetData.otaTextListenProgress.setText(R.string.ota_listen);
      mOtaWidgetData.otaDtmfDialerView.setVisibility(View.VISIBLE);
      mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.VISIBLE);
      mOtaWidgetData.otaSpeakerButton.setVisibility(View.VISIBLE);
      boolean speakerOn=PhoneUtils.isSpeakerOn(mContext);
      mOtaWidgetData.otaSpeakerButton.setChecked(speakerOn);
    }
 else {
      if (mDialerDrawer != null)       mDialerDrawer.setVisibility(View.VISIBLE);
    }
    mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_LISTENING;
    mInCallScreen.updateMenuItems();
  }
 else {
    if (DBG)     log(""String_Node_Str"");
    otaShowInProgressScreen();
  }
}",0.9528339278636544
184785,"private void onClickOtaEndButton(){
  if (DBG)   log(""String_Node_Str"");
  if (!mApplication.cdmaOtaProvisionData.inOtaSpcState) {
    PhoneUtils.hangup(mApplication.phone);
  }
}","private void onClickOtaEndButton(){
  if (DBG)   log(""String_Node_Str"");
  if (!mApplication.cdmaOtaProvisionData.inOtaSpcState) {
    if (PhoneUtils.hangup(mApplication.phone) == false) {
      setSpeaker(false);
      mInCallScreen.handleOtaCallEnd();
    }
  }
}",0.8063063063063063
184786,"/** 
 * Show ""Programming In Progress"" screen during OTA call. Shown when OTA provisioning is in progress after user has selected an option.
 */
private void otaShowInProgressScreen(){
  if (DBG)   log(""String_Node_Str"");
  if (!isDialerOpened()) {
    otaScreenInitialize();
    mOtaWidgetData.otaTextListenProgress.setVisibility(View.VISIBLE);
    mOtaWidgetData.otaTextListenProgress.setText(R.string.ota_progress);
    mOtaWidgetData.otaTextProgressBar.setVisibility(View.VISIBLE);
    mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.VISIBLE);
    mOtaWidgetData.otaSpeakerButton.setVisibility(View.VISIBLE);
  }
 else {
    if (mDialerDrawer != null)     mDialerDrawer.setVisibility(View.VISIBLE);
  }
  mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_PROGRESS;
  mInCallScreen.updateMenuItems();
}","/** 
 * Show ""Programming In Progress"" screen during OTA call. Shown when OTA provisioning is in progress after user has selected an option.
 */
private void otaShowInProgressScreen(){
  if (DBG)   log(""String_Node_Str"");
  if (!isDialerOpened()) {
    otaScreenInitialize();
    mOtaWidgetData.otaTextListenProgress.setVisibility(View.VISIBLE);
    mOtaWidgetData.otaTextListenProgress.setText(R.string.ota_progress);
    mOtaWidgetData.otaTextProgressBar.setVisibility(View.VISIBLE);
    mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.VISIBLE);
    mOtaWidgetData.otaSpeakerButton.setVisibility(View.VISIBLE);
    boolean speakerOn=PhoneUtils.isSpeakerOn(mContext);
    mOtaWidgetData.otaSpeakerButton.setChecked(speakerOn);
  }
 else {
    if (mDialerDrawer != null)     mDialerDrawer.setVisibility(View.VISIBLE);
  }
  mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_PROGRESS;
  mInCallScreen.updateMenuItems();
}",0.9377368706009744
184787,"/** 
 * Starts the OTA provisioning call.  If the MIN isn't available yet, it returns false and adds an event to return the request to the calling app when it becomes available. 
 * @param context
 * @param handler
 * @param request
 * @return true if we were able to launch Ota activity or it's not required; false otherwise
 */
public static boolean maybeDoOtaCall(Context context,Handler handler,int request){
  PhoneApp app=PhoneApp.getInstance();
  Phone phone=app.phone;
  if (!isCdmaPhone()) {
    if (DBG)     Log.v(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  if (!phone.isMinInfoReady()) {
    if (DBG)     log(""String_Node_Str"");
    phone.registerForSubscriptionInfoReady(handler,request,null);
    return false;
  }
  phone.unregisterForSubscriptionInfoReady(handler);
  String min=phone.getCdmaMin();
  if (DBG)   log(""String_Node_Str"" + min);
  boolean phoneNeedsActivation=false;
  try {
    phoneNeedsActivation=needsActivation(min);
  }
 catch (  IllegalArgumentException e) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (DBG)   log(""String_Node_Str"" + phoneNeedsActivation);
  int otaShowActivationScreen=context.getResources().getInteger(R.integer.OtaShowActivationScreen);
  if (DBG)   log(""String_Node_Str"" + otaShowActivationScreen);
  if (phoneNeedsActivation && (otaShowActivationScreen == OTA_SHOW_ACTIVATION_SCREEN_ON)) {
    app.cdmaOtaProvisionData.isOtaCallIntentProcessed=false;
    Intent newIntent=new Intent(InCallScreen.ACTION_SHOW_ACTIVATION);
    newIntent.setClass(context,InCallScreen.class);
    newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startActivity(newIntent);
    if (DBG)     log(""String_Node_Str"");
  }
 else {
    if (DBG)     log(""String_Node_Str"");
  }
  return true;
}","/** 
 * Starts the OTA provisioning call.  If the MIN isn't available yet, it returns false and adds an event to return the request to the calling app when it becomes available.
 * @param context
 * @param handler
 * @param request
 * @return true if we were able to launch Ota activity or it's not required; false otherwise
 */
public static boolean maybeDoOtaCall(Context context,Handler handler,int request){
  PhoneApp app=PhoneApp.getInstance();
  Phone phone=app.phone;
  if (!isCdmaPhone()) {
    if (DBG)     Log.v(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  if (!phone.isMinInfoReady()) {
    if (DBG)     log(""String_Node_Str"");
    phone.registerForSubscriptionInfoReady(handler,request,null);
    return false;
  }
  phone.unregisterForSubscriptionInfoReady(handler);
  String min=phone.getCdmaMin();
  if (DBG)   log(""String_Node_Str"" + min);
  boolean phoneNeedsActivation=false;
  try {
    phoneNeedsActivation=needsActivation(min);
  }
 catch (  IllegalArgumentException e) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (DBG)   log(""String_Node_Str"" + phoneNeedsActivation);
  int otaShowActivationScreen=context.getResources().getInteger(R.integer.OtaShowActivationScreen);
  if (DBG)   log(""String_Node_Str"" + otaShowActivationScreen);
  if (phoneNeedsActivation && (otaShowActivationScreen == OTA_SHOW_ACTIVATION_SCREEN_ON)) {
    app.cdmaOtaProvisionData.isOtaCallIntentProcessed=false;
    Intent newIntent=new Intent(InCallScreen.ACTION_SHOW_ACTIVATION);
    newIntent.setClass(context,InCallScreen.class);
    newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startActivity(newIntent);
    if (DBG)     log(""String_Node_Str"");
  }
 else {
    if (DBG)     log(""String_Node_Str"");
  }
  return true;
}",0.99971870604782
184788,"/** 
 * Clear out all OTA UI widget elements. Needs to get called when OTA call ends or InCallScreen is destroyed.
 */
public void cleanOtaScreen(){
  if (DBG)   log(""String_Node_Str"");
  mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_UNDEFINED;
  mApplication.cdmaOtaProvisionData.isOtaCallCommitted=false;
  mApplication.cdmaOtaProvisionData.isOtaCallIntentProcessed=false;
  mApplication.cdmaOtaProvisionData.inOtaSpcState=false;
  mApplication.cdmaOtaProvisionData.activationCount=0;
  mApplication.cdmaOtaProvisionData.otaSpcUptime=0;
  if (mInCallPanel != null)   mInCallPanel.setVisibility(View.VISIBLE);
  if (mCallCard != null)   mCallCard.hideCallCardElements();
  if (mDialerDrawer != null)   mDialerDrawer.setVisibility(View.VISIBLE);
  mOtaWidgetData.otaTextActivate.setVisibility(View.GONE);
  mOtaWidgetData.otaTextListenProgress.setVisibility(View.GONE);
  mOtaWidgetData.otaTextProgressBar.setVisibility(View.GONE);
  mOtaWidgetData.otaTextSuccessFail.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsActivate.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsFailSuccess.setVisibility(View.GONE);
  mOtaWidgetData.otaCallCardBase.setVisibility(View.GONE);
  mOtaWidgetData.otaDtmfDialerView.setVisibility(View.GONE);
  mOtaWidgetData.otaNextButton.setVisibility(View.GONE);
  mOtaWidgetData.otaTryAgainButton.setVisibility(View.GONE);
}","/** 
 * Clear out all OTA UI widget elements. Needs to get called when OTA call ends or InCallScreen is destroyed.
 */
public void cleanOtaScreen(){
  if (DBG)   log(""String_Node_Str"");
  mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_UNDEFINED;
  mApplication.cdmaOtaProvisionData.isOtaCallCommitted=false;
  mApplication.cdmaOtaProvisionData.isOtaCallIntentProcessed=false;
  mApplication.cdmaOtaProvisionData.inOtaSpcState=false;
  mApplication.cdmaOtaProvisionData.activationCount=0;
  mApplication.cdmaOtaProvisionData.otaSpcUptime=0;
  if (mInCallPanel != null)   mInCallPanel.setVisibility(View.VISIBLE);
  if (mCallCard != null)   mCallCard.hideCallCardElements();
  if (mDialerDrawer != null)   mDialerDrawer.setVisibility(View.VISIBLE);
  mOtaWidgetData.otaTextActivate.setVisibility(View.GONE);
  mOtaWidgetData.otaTextListenProgress.setVisibility(View.GONE);
  mOtaWidgetData.otaTextProgressBar.setVisibility(View.GONE);
  mOtaWidgetData.otaTextSuccessFail.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsActivate.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsFailSuccess.setVisibility(View.GONE);
  mOtaWidgetData.otaCallCardBase.setVisibility(View.GONE);
  mOtaWidgetData.otaDtmfDialerView.setVisibility(View.GONE);
  mOtaWidgetData.otaNextButton.setVisibility(View.GONE);
  mOtaWidgetData.otaTryAgainButton.setVisibility(View.GONE);
  setSpeaker(false);
}",0.9930394431554525
184789,"/** 
 * Show ""Listen for Instruction"" screen during OTA call. Shown when OTA Call is initiated and user needs to listen for network instructions and press appropriate DTMF digits to proceed to the ""Programming in Progress"" phase.
 */
private void otaShowListeningScreen(){
  if (DBG)   log(""String_Node_Str"");
  if (mApplication.cdmaOtaConfigData.otaShowListeningScreen == OTA_SHOW_LISTENING_SCREEN_ON) {
    if (DBG)     log(""String_Node_Str"");
    if (!isDialerOpened()) {
      otaScreenInitialize();
      mOtaWidgetData.otaTextListenProgress.setVisibility(View.VISIBLE);
      mOtaWidgetData.otaTextListenProgress.setText(R.string.ota_listen);
      mOtaWidgetData.otaDtmfDialerView.setVisibility(View.VISIBLE);
      mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.VISIBLE);
      mOtaWidgetData.otaSpeakerButton.setVisibility(View.VISIBLE);
    }
 else {
      if (mDialerDrawer != null)       mDialerDrawer.setVisibility(View.VISIBLE);
    }
    mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_LISTENING;
    mInCallScreen.updateMenuItems();
  }
 else {
    if (DBG)     log(""String_Node_Str"");
    otaShowInProgressScreen();
  }
}","/** 
 * Show ""Listen for Instruction"" screen during OTA call. Shown when OTA Call is initiated and user needs to listen for network instructions and press appropriate DTMF digits to proceed to the ""Programming in Progress"" phase.
 */
private void otaShowListeningScreen(){
  if (DBG)   log(""String_Node_Str"");
  if (mApplication.cdmaOtaConfigData.otaShowListeningScreen == OTA_SHOW_LISTENING_SCREEN_ON) {
    if (DBG)     log(""String_Node_Str"");
    if (!isDialerOpened()) {
      otaScreenInitialize();
      mOtaWidgetData.otaTextListenProgress.setVisibility(View.VISIBLE);
      mOtaWidgetData.otaTextListenProgress.setText(R.string.ota_listen);
      mOtaWidgetData.otaDtmfDialerView.setVisibility(View.VISIBLE);
      mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.VISIBLE);
      mOtaWidgetData.otaSpeakerButton.setVisibility(View.VISIBLE);
      boolean speakerOn=PhoneUtils.isSpeakerOn(mContext);
      mOtaWidgetData.otaSpeakerButton.setChecked(speakerOn);
    }
 else {
      if (mDialerDrawer != null)       mDialerDrawer.setVisibility(View.VISIBLE);
    }
    mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_LISTENING;
    mInCallScreen.updateMenuItems();
  }
 else {
    if (DBG)     log(""String_Node_Str"");
    otaShowInProgressScreen();
  }
}",0.9528339278636544
184790,"private void onClickOtaEndButton(){
  if (DBG)   log(""String_Node_Str"");
  if (!mApplication.cdmaOtaProvisionData.inOtaSpcState) {
    PhoneUtils.hangup(mApplication.phone);
  }
}","private void onClickOtaEndButton(){
  if (DBG)   log(""String_Node_Str"");
  if (!mApplication.cdmaOtaProvisionData.inOtaSpcState) {
    if (PhoneUtils.hangup(mApplication.phone) == false) {
      setSpeaker(false);
      mInCallScreen.handleOtaCallEnd();
    }
  }
}",0.8063063063063063
184791,"/** 
 * Plays local tone for CDMA.
 */
void startLocalToneCdma(char tone){
  if (mDTMFToneEnabled) {
synchronized (mToneGeneratorLock) {
      if (mToneGenerator == null) {
        if (DBG)         log(""String_Node_Str"" + tone);
      }
 else {
        if (DBG)         log(""String_Node_Str"" + tone);
        mToneGenerator.startTone(mToneMap.get(tone));
        if (mDTMFToneType == CallFeaturesSetting.DTMF_TONE_TYPE_NORMAL) {
          mHandler.removeMessages(STOP_DTMF_TONE);
          mHandler.sendEmptyMessageDelayed(STOP_DTMF_TONE,DTMF_DURATION_MS);
        }
      }
    }
  }
}","/** 
 * Plays local tone for CDMA.
 */
void startLocalToneCdma(char tone){
  if (mDTMFToneEnabled) {
synchronized (mToneGeneratorLock) {
      if (mToneGenerator == null) {
        if (DBG)         log(""String_Node_Str"" + tone);
      }
 else {
        if (DBG)         log(""String_Node_Str"" + tone);
        int toneDuration=-1;
        if (mDTMFToneType == CallFeaturesSetting.DTMF_TONE_TYPE_NORMAL) {
          toneDuration=DTMF_DURATION_MS;
        }
        mToneGenerator.startTone(mToneMap.get(tone),toneDuration);
      }
    }
  }
}",0.6637089618456078
184792,"/** 
 * Stops the dtmf from being sent over the network for Long DTMF case and stops local DTMF key feedback tone.
 */
private void stopToneCdma(){
  if (DBG)   log(""String_Node_Str"");
  if (mDTMFToneType == CallFeaturesSetting.DTMF_TONE_TYPE_LONG) {
    mPhone.stopDtmf();
  }
  stopLocalToneCdma();
}","/** 
 * Stops the dtmf from being sent over the network for Long DTMF case and stops local DTMF key feedback tone.
 */
private void stopToneCdma(){
  if (DBG)   log(""String_Node_Str"");
  mPhone.stopDtmf();
  stopLocalToneCdma();
}",0.7857142857142857
184793,"/** 
 * Null out our reference to the InCallScreen activity. This indicates that the InCallScreen activity has been destroyed. At the same time, get rid of listeners since we're not going to be valid anymore.
 */
void clearInCallScreenReference(){
  mInCallScreen=null;
  mDialerKeyListener=null;
  if (mDialerContainer != null) {
    mDialerContainer.setOnDrawerOpenListener(null);
    mDialerContainer.setOnDrawerCloseListener(null);
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mHandler.removeMessages(STOP_DTMF_TONE);
    mHandler.removeMessages(DTMF_SEND_CNF);
synchronized (mDTMFQueue) {
      mDTMFBurstCnfPending=false;
      mDTMFQueue.clear();
    }
  }
  closeDialer(false);
}","/** 
 * Null out our reference to the InCallScreen activity. This indicates that the InCallScreen activity has been destroyed. At the same time, get rid of listeners since we're not going to be valid anymore.
 */
void clearInCallScreenReference(){
  mInCallScreen=null;
  mDialerKeyListener=null;
  if (mDialerContainer != null) {
    mDialerContainer.setOnDrawerOpenListener(null);
    mDialerContainer.setOnDrawerCloseListener(null);
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mHandler.removeMessages(DTMF_SEND_CNF);
synchronized (mDTMFQueue) {
      mDTMFBurstCnfPending=false;
      mDTMFQueue.clear();
    }
  }
  closeDialer(false);
}",0.9671292914536158
184794,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case PHONE_DISCONNECT:
    if (DBG)     log(""String_Node_Str"");
  mPhone.unregisterForDisconnect(this);
closeDialer(false);
break;
case DTMF_SEND_CNF:
if (DBG) log(""String_Node_Str"");
handleBurstDtmfConfirmation();
break;
case STOP_DTMF_TONE:
if (DBG) log(""String_Node_Str"");
stopToneCdma();
break;
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case PHONE_DISCONNECT:
    if (DBG)     log(""String_Node_Str"");
  mPhone.unregisterForDisconnect(this);
closeDialer(false);
break;
case DTMF_SEND_CNF:
if (DBG) log(""String_Node_Str"");
handleBurstDtmfConfirmation();
break;
}
}",0.8845577211394303
184795,"/** 
 * turn on keyguard on pause.
 */
@Override public void onPause(){
  if (DBG)   Log.d(LOG_TAG,""String_Node_Str"");
  PhoneApp app=(PhoneApp)getApplication();
  app.reenableKeyguard();
  app.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
  super.onPause();
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneStopper.removeMessages(STOP_TONE);
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}","/** 
 * turn on keyguard on pause.
 */
@Override public void onPause(){
  if (DBG)   Log.d(LOG_TAG,""String_Node_Str"");
  PhoneApp app=(PhoneApp)getApplication();
  app.reenableKeyguard();
  app.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
  super.onPause();
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}",0.9470046082949308
184796,"@Override protected void onDestroy(){
  super.onDestroy();
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneStopper.removeMessages(STOP_TONE);
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
  unregisterReceiver(mBroadcastReceiver);
}","@Override protected void onDestroy(){
  super.onDestroy();
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
  unregisterReceiver(mBroadcastReceiver);
}",0.553030303030303
184797,"/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(LOG_TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneStopper.removeMessages(STOP_TONE);
    mToneGenerator.startTone(tone);
    mToneStopper.sendEmptyMessageDelayed(STOP_TONE,TONE_LENGTH_MS);
  }
}","/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(LOG_TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneGenerator.startTone(tone,TONE_LENGTH_MS);
  }
}",0.908169014084507
184798,"/** 
 * Show ""Programming In Progress"" screen during OTA call. Shown when OTA provisioning is in progress after user has selected an option.
 */
private void otaShowInProgressScreen(){
  if (DBG)   log(""String_Node_Str"");
  if (!isDialerOpened()) {
    otaScreenInitialize();
    mOtaWidgetData.otaTextListenProgress.setVisibility(View.VISIBLE);
    mOtaWidgetData.otaTextListenProgress.setText(R.string.ota_progress);
    mOtaWidgetData.otaTextProgressBar.setVisibility(View.VISIBLE);
    mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.VISIBLE);
    mOtaWidgetData.otaSpeakerButton.setVisibility(View.VISIBLE);
  }
 else {
    if (mDialerDrawer != null)     mDialerDrawer.setVisibility(View.VISIBLE);
  }
  mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_PROGRESS;
  mInCallScreen.updateMenuItems();
}","/** 
 * Show ""Programming In Progress"" screen during OTA call. Shown when OTA provisioning is in progress after user has selected an option.
 */
private void otaShowInProgressScreen(){
  if (DBG)   log(""String_Node_Str"");
  if (!isDialerOpened()) {
    otaScreenInitialize();
    mOtaWidgetData.otaTextListenProgress.setVisibility(View.VISIBLE);
    mOtaWidgetData.otaTextListenProgress.setText(R.string.ota_progress);
    mOtaWidgetData.otaTextProgressBar.setVisibility(View.VISIBLE);
    mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.VISIBLE);
    mOtaWidgetData.otaSpeakerButton.setVisibility(View.VISIBLE);
    boolean speakerOn=PhoneUtils.isSpeakerOn(mContext);
    mOtaWidgetData.otaSpeakerButton.setChecked(speakerOn);
  }
 else {
    if (mDialerDrawer != null)     mDialerDrawer.setVisibility(View.VISIBLE);
  }
  mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_PROGRESS;
  mInCallScreen.updateMenuItems();
}",0.9377368706009744
184799,"/** 
 * Starts the OTA provisioning call.  If the MIN isn't available yet, it returns false and adds an event to return the request to the calling app when it becomes available. 
 * @param context
 * @param handler
 * @param request
 * @return true if we were able to launch Ota activity or it's not required; false otherwise
 */
public static boolean maybeDoOtaCall(Context context,Handler handler,int request){
  PhoneApp app=PhoneApp.getInstance();
  Phone phone=app.phone;
  if (!isCdmaPhone()) {
    if (DBG)     Log.v(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  if (!phone.isMinInfoReady()) {
    if (DBG)     log(""String_Node_Str"");
    phone.registerForSubscriptionInfoReady(handler,request,null);
    return false;
  }
  phone.unregisterForSubscriptionInfoReady(handler);
  String min=phone.getCdmaMin();
  if (DBG)   log(""String_Node_Str"" + min);
  boolean phoneNeedsActivation=false;
  try {
    phoneNeedsActivation=needsActivation(min);
  }
 catch (  IllegalArgumentException e) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (DBG)   log(""String_Node_Str"" + phoneNeedsActivation);
  int otaShowActivationScreen=context.getResources().getInteger(R.integer.OtaShowActivationScreen);
  if (DBG)   log(""String_Node_Str"" + otaShowActivationScreen);
  if (phoneNeedsActivation && (otaShowActivationScreen == OTA_SHOW_ACTIVATION_SCREEN_ON)) {
    app.cdmaOtaProvisionData.isOtaCallIntentProcessed=false;
    Intent newIntent=new Intent(InCallScreen.ACTION_SHOW_ACTIVATION);
    newIntent.setClass(context,InCallScreen.class);
    newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startActivity(newIntent);
    if (DBG)     log(""String_Node_Str"");
  }
 else {
    if (DBG)     log(""String_Node_Str"");
  }
  return true;
}","/** 
 * Starts the OTA provisioning call.  If the MIN isn't available yet, it returns false and adds an event to return the request to the calling app when it becomes available.
 * @param context
 * @param handler
 * @param request
 * @return true if we were able to launch Ota activity or it's not required; false otherwise
 */
public static boolean maybeDoOtaCall(Context context,Handler handler,int request){
  PhoneApp app=PhoneApp.getInstance();
  Phone phone=app.phone;
  if (!isCdmaPhone()) {
    if (DBG)     Log.v(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  if (!phone.isMinInfoReady()) {
    if (DBG)     log(""String_Node_Str"");
    phone.registerForSubscriptionInfoReady(handler,request,null);
    return false;
  }
  phone.unregisterForSubscriptionInfoReady(handler);
  String min=phone.getCdmaMin();
  if (DBG)   log(""String_Node_Str"" + min);
  boolean phoneNeedsActivation=false;
  try {
    phoneNeedsActivation=needsActivation(min);
  }
 catch (  IllegalArgumentException e) {
    if (DBG)     log(""String_Node_Str"");
    return true;
  }
  if (DBG)   log(""String_Node_Str"" + phoneNeedsActivation);
  int otaShowActivationScreen=context.getResources().getInteger(R.integer.OtaShowActivationScreen);
  if (DBG)   log(""String_Node_Str"" + otaShowActivationScreen);
  if (phoneNeedsActivation && (otaShowActivationScreen == OTA_SHOW_ACTIVATION_SCREEN_ON)) {
    app.cdmaOtaProvisionData.isOtaCallIntentProcessed=false;
    Intent newIntent=new Intent(InCallScreen.ACTION_SHOW_ACTIVATION);
    newIntent.setClass(context,InCallScreen.class);
    newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startActivity(newIntent);
    if (DBG)     log(""String_Node_Str"");
  }
 else {
    if (DBG)     log(""String_Node_Str"");
  }
  return true;
}",0.99971870604782
184800,"/** 
 * Clear out all OTA UI widget elements. Needs to get called when OTA call ends or InCallScreen is destroyed.
 */
public void cleanOtaScreen(){
  if (DBG)   log(""String_Node_Str"");
  mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_UNDEFINED;
  mApplication.cdmaOtaProvisionData.isOtaCallCommitted=false;
  mApplication.cdmaOtaProvisionData.isOtaCallIntentProcessed=false;
  mApplication.cdmaOtaProvisionData.inOtaSpcState=false;
  mApplication.cdmaOtaProvisionData.activationCount=0;
  mApplication.cdmaOtaProvisionData.otaSpcUptime=0;
  if (mInCallPanel != null)   mInCallPanel.setVisibility(View.VISIBLE);
  if (mCallCard != null)   mCallCard.hideCallCardElements();
  if (mDialerDrawer != null)   mDialerDrawer.setVisibility(View.VISIBLE);
  mOtaWidgetData.otaTextActivate.setVisibility(View.GONE);
  mOtaWidgetData.otaTextListenProgress.setVisibility(View.GONE);
  mOtaWidgetData.otaTextProgressBar.setVisibility(View.GONE);
  mOtaWidgetData.otaTextSuccessFail.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsActivate.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsFailSuccess.setVisibility(View.GONE);
  mOtaWidgetData.otaCallCardBase.setVisibility(View.GONE);
  mOtaWidgetData.otaDtmfDialerView.setVisibility(View.GONE);
  mOtaWidgetData.otaNextButton.setVisibility(View.GONE);
  mOtaWidgetData.otaTryAgainButton.setVisibility(View.GONE);
}","/** 
 * Clear out all OTA UI widget elements. Needs to get called when OTA call ends or InCallScreen is destroyed.
 */
public void cleanOtaScreen(){
  if (DBG)   log(""String_Node_Str"");
  mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_UNDEFINED;
  mApplication.cdmaOtaProvisionData.isOtaCallCommitted=false;
  mApplication.cdmaOtaProvisionData.isOtaCallIntentProcessed=false;
  mApplication.cdmaOtaProvisionData.inOtaSpcState=false;
  mApplication.cdmaOtaProvisionData.activationCount=0;
  mApplication.cdmaOtaProvisionData.otaSpcUptime=0;
  if (mInCallPanel != null)   mInCallPanel.setVisibility(View.VISIBLE);
  if (mCallCard != null)   mCallCard.hideCallCardElements();
  if (mDialerDrawer != null)   mDialerDrawer.setVisibility(View.VISIBLE);
  mOtaWidgetData.otaTextActivate.setVisibility(View.GONE);
  mOtaWidgetData.otaTextListenProgress.setVisibility(View.GONE);
  mOtaWidgetData.otaTextProgressBar.setVisibility(View.GONE);
  mOtaWidgetData.otaTextSuccessFail.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsActivate.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.GONE);
  mOtaWidgetData.callCardOtaButtonsFailSuccess.setVisibility(View.GONE);
  mOtaWidgetData.otaCallCardBase.setVisibility(View.GONE);
  mOtaWidgetData.otaDtmfDialerView.setVisibility(View.GONE);
  mOtaWidgetData.otaNextButton.setVisibility(View.GONE);
  mOtaWidgetData.otaTryAgainButton.setVisibility(View.GONE);
  setSpeaker(false);
}",0.9930394431554525
184801,"/** 
 * Show ""Listen for Instruction"" screen during OTA call. Shown when OTA Call is initiated and user needs to listen for network instructions and press appropriate DTMF digits to proceed to the ""Programming in Progress"" phase.
 */
private void otaShowListeningScreen(){
  if (DBG)   log(""String_Node_Str"");
  if (mApplication.cdmaOtaConfigData.otaShowListeningScreen == OTA_SHOW_LISTENING_SCREEN_ON) {
    if (DBG)     log(""String_Node_Str"");
    if (!isDialerOpened()) {
      otaScreenInitialize();
      mOtaWidgetData.otaTextListenProgress.setVisibility(View.VISIBLE);
      mOtaWidgetData.otaTextListenProgress.setText(R.string.ota_listen);
      mOtaWidgetData.otaDtmfDialerView.setVisibility(View.VISIBLE);
      mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.VISIBLE);
      mOtaWidgetData.otaSpeakerButton.setVisibility(View.VISIBLE);
    }
 else {
      if (mDialerDrawer != null)       mDialerDrawer.setVisibility(View.VISIBLE);
    }
    mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_LISTENING;
    mInCallScreen.updateMenuItems();
  }
 else {
    if (DBG)     log(""String_Node_Str"");
    otaShowInProgressScreen();
  }
}","/** 
 * Show ""Listen for Instruction"" screen during OTA call. Shown when OTA Call is initiated and user needs to listen for network instructions and press appropriate DTMF digits to proceed to the ""Programming in Progress"" phase.
 */
private void otaShowListeningScreen(){
  if (DBG)   log(""String_Node_Str"");
  if (mApplication.cdmaOtaConfigData.otaShowListeningScreen == OTA_SHOW_LISTENING_SCREEN_ON) {
    if (DBG)     log(""String_Node_Str"");
    if (!isDialerOpened()) {
      otaScreenInitialize();
      mOtaWidgetData.otaTextListenProgress.setVisibility(View.VISIBLE);
      mOtaWidgetData.otaTextListenProgress.setText(R.string.ota_listen);
      mOtaWidgetData.otaDtmfDialerView.setVisibility(View.VISIBLE);
      mOtaWidgetData.callCardOtaButtonsListenProgress.setVisibility(View.VISIBLE);
      mOtaWidgetData.otaSpeakerButton.setVisibility(View.VISIBLE);
      boolean speakerOn=PhoneUtils.isSpeakerOn(mContext);
      mOtaWidgetData.otaSpeakerButton.setChecked(speakerOn);
    }
 else {
      if (mDialerDrawer != null)       mDialerDrawer.setVisibility(View.VISIBLE);
    }
    mApplication.cdmaOtaScreenState.otaScreenState=CdmaOtaScreenState.OtaScreenState.OTA_STATUS_LISTENING;
    mInCallScreen.updateMenuItems();
  }
 else {
    if (DBG)     log(""String_Node_Str"");
    otaShowInProgressScreen();
  }
}",0.9528339278636544
184802,"private void onClickOtaEndButton(){
  if (DBG)   log(""String_Node_Str"");
  if (!mApplication.cdmaOtaProvisionData.inOtaSpcState) {
    PhoneUtils.hangup(mApplication.phone);
  }
}","private void onClickOtaEndButton(){
  if (DBG)   log(""String_Node_Str"");
  if (!mApplication.cdmaOtaProvisionData.inOtaSpcState) {
    if (PhoneUtils.hangup(mApplication.phone) == false) {
      setSpeaker(false);
      mInCallScreen.handleOtaCallEnd();
    }
  }
}",0.8063063063063063
184803,"/** 
 * Plays local tone for CDMA.
 */
void startLocalToneCdma(char tone){
  if (mDTMFToneEnabled) {
synchronized (mToneGeneratorLock) {
      if (mToneGenerator == null) {
        if (DBG)         log(""String_Node_Str"" + tone);
      }
 else {
        if (DBG)         log(""String_Node_Str"" + tone);
        mToneGenerator.startTone(mToneMap.get(tone));
        if (mDTMFToneType == CallFeaturesSetting.DTMF_TONE_TYPE_NORMAL) {
          mHandler.removeMessages(STOP_DTMF_TONE);
          mHandler.sendEmptyMessageDelayed(STOP_DTMF_TONE,DTMF_DURATION_MS);
        }
      }
    }
  }
}","/** 
 * Plays local tone for CDMA.
 */
void startLocalToneCdma(char tone){
  if (mDTMFToneEnabled) {
synchronized (mToneGeneratorLock) {
      if (mToneGenerator == null) {
        if (DBG)         log(""String_Node_Str"" + tone);
      }
 else {
        if (DBG)         log(""String_Node_Str"" + tone);
        int toneDuration=-1;
        if (mDTMFToneType == CallFeaturesSetting.DTMF_TONE_TYPE_NORMAL) {
          toneDuration=DTMF_DURATION_MS;
        }
        mToneGenerator.startTone(mToneMap.get(tone),toneDuration);
      }
    }
  }
}",0.6637089618456078
184804,"/** 
 * Stops the dtmf from being sent over the network for Long DTMF case and stops local DTMF key feedback tone.
 */
private void stopToneCdma(){
  if (DBG)   log(""String_Node_Str"");
  if (mDTMFToneType == CallFeaturesSetting.DTMF_TONE_TYPE_LONG) {
    mPhone.stopDtmf();
  }
  stopLocalToneCdma();
}","/** 
 * Stops the dtmf from being sent over the network for Long DTMF case and stops local DTMF key feedback tone.
 */
private void stopToneCdma(){
  if (DBG)   log(""String_Node_Str"");
  mPhone.stopDtmf();
  stopLocalToneCdma();
}",0.7857142857142857
184805,"/** 
 * Null out our reference to the InCallScreen activity. This indicates that the InCallScreen activity has been destroyed. At the same time, get rid of listeners since we're not going to be valid anymore.
 */
void clearInCallScreenReference(){
  mInCallScreen=null;
  mDialerKeyListener=null;
  if (mDialerContainer != null) {
    mDialerContainer.setOnDrawerOpenListener(null);
    mDialerContainer.setOnDrawerCloseListener(null);
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mHandler.removeMessages(STOP_DTMF_TONE);
    mHandler.removeMessages(DTMF_SEND_CNF);
synchronized (mDTMFQueue) {
      mDTMFBurstCnfPending=false;
      mDTMFQueue.clear();
    }
  }
  closeDialer(false);
}","/** 
 * Null out our reference to the InCallScreen activity. This indicates that the InCallScreen activity has been destroyed. At the same time, get rid of listeners since we're not going to be valid anymore.
 */
void clearInCallScreenReference(){
  mInCallScreen=null;
  mDialerKeyListener=null;
  if (mDialerContainer != null) {
    mDialerContainer.setOnDrawerOpenListener(null);
    mDialerContainer.setOnDrawerCloseListener(null);
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mHandler.removeMessages(DTMF_SEND_CNF);
synchronized (mDTMFQueue) {
      mDTMFBurstCnfPending=false;
      mDTMFQueue.clear();
    }
  }
  closeDialer(false);
}",0.9671292914536158
184806,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case PHONE_DISCONNECT:
    if (DBG)     log(""String_Node_Str"");
  mPhone.unregisterForDisconnect(this);
closeDialer(false);
break;
case DTMF_SEND_CNF:
if (DBG) log(""String_Node_Str"");
handleBurstDtmfConfirmation();
break;
case STOP_DTMF_TONE:
if (DBG) log(""String_Node_Str"");
stopToneCdma();
break;
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case PHONE_DISCONNECT:
    if (DBG)     log(""String_Node_Str"");
  mPhone.unregisterForDisconnect(this);
closeDialer(false);
break;
case DTMF_SEND_CNF:
if (DBG) log(""String_Node_Str"");
handleBurstDtmfConfirmation();
break;
}
}",0.8845577211394303
184807,"/** 
 * turn on keyguard on pause.
 */
@Override public void onPause(){
  if (DBG)   Log.d(LOG_TAG,""String_Node_Str"");
  PhoneApp app=(PhoneApp)getApplication();
  app.reenableKeyguard();
  app.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
  super.onPause();
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneStopper.removeMessages(STOP_TONE);
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}","/** 
 * turn on keyguard on pause.
 */
@Override public void onPause(){
  if (DBG)   Log.d(LOG_TAG,""String_Node_Str"");
  PhoneApp app=(PhoneApp)getApplication();
  app.reenableKeyguard();
  app.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
  super.onPause();
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}",0.9470046082949308
184808,"@Override protected void onDestroy(){
  super.onDestroy();
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneStopper.removeMessages(STOP_TONE);
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
  unregisterReceiver(mBroadcastReceiver);
}","@Override protected void onDestroy(){
  super.onDestroy();
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
  unregisterReceiver(mBroadcastReceiver);
}",0.553030303030303
184809,"/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(LOG_TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneStopper.removeMessages(STOP_TONE);
    mToneGenerator.startTone(tone);
    mToneStopper.sendEmptyMessageDelayed(STOP_TONE,TONE_LENGTH_MS);
  }
}","/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(LOG_TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneGenerator.startTone(tone,TONE_LENGTH_MS);
  }
}",0.908169014084507
184810,"/** 
 * Plays local tone for CDMA.
 */
void startLocalToneCdma(char tone){
  if (mDTMFToneEnabled) {
synchronized (mToneGeneratorLock) {
      if (mToneGenerator == null) {
        if (DBG)         log(""String_Node_Str"" + tone);
      }
 else {
        if (DBG)         log(""String_Node_Str"" + tone);
        mToneGenerator.startTone(mToneMap.get(tone));
        if (mDTMFToneType == CallFeaturesSetting.DTMF_TONE_TYPE_NORMAL) {
          mHandler.removeMessages(STOP_DTMF_TONE);
          mHandler.sendEmptyMessageDelayed(STOP_DTMF_TONE,DTMF_DURATION_MS);
        }
      }
    }
  }
}","/** 
 * Plays local tone for CDMA.
 */
void startLocalToneCdma(char tone){
  if (mDTMFToneEnabled) {
synchronized (mToneGeneratorLock) {
      if (mToneGenerator == null) {
        if (DBG)         log(""String_Node_Str"" + tone);
      }
 else {
        if (DBG)         log(""String_Node_Str"" + tone);
        int toneDuration=-1;
        if (mDTMFToneType == CallFeaturesSetting.DTMF_TONE_TYPE_NORMAL) {
          toneDuration=DTMF_DURATION_MS;
        }
        mToneGenerator.startTone(mToneMap.get(tone),toneDuration);
      }
    }
  }
}",0.6637089618456078
184811,"/** 
 * Stops the dtmf from being sent over the network for Long DTMF case and stops local DTMF key feedback tone.
 */
private void stopToneCdma(){
  if (DBG)   log(""String_Node_Str"");
  if (mDTMFToneType == CallFeaturesSetting.DTMF_TONE_TYPE_LONG) {
    mPhone.stopDtmf();
  }
  stopLocalToneCdma();
}","/** 
 * Stops the dtmf from being sent over the network for Long DTMF case and stops local DTMF key feedback tone.
 */
private void stopToneCdma(){
  if (DBG)   log(""String_Node_Str"");
  mPhone.stopDtmf();
  stopLocalToneCdma();
}",0.7857142857142857
184812,"/** 
 * Null out our reference to the InCallScreen activity. This indicates that the InCallScreen activity has been destroyed. At the same time, get rid of listeners since we're not going to be valid anymore.
 */
void clearInCallScreenReference(){
  mInCallScreen=null;
  mDialerKeyListener=null;
  if (mDialerContainer != null) {
    mDialerContainer.setOnDrawerOpenListener(null);
    mDialerContainer.setOnDrawerCloseListener(null);
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mHandler.removeMessages(STOP_DTMF_TONE);
    mHandler.removeMessages(DTMF_SEND_CNF);
synchronized (mDTMFQueue) {
      mDTMFBurstCnfPending=false;
      mDTMFQueue.clear();
    }
  }
  closeDialer(false);
}","/** 
 * Null out our reference to the InCallScreen activity. This indicates that the InCallScreen activity has been destroyed. At the same time, get rid of listeners since we're not going to be valid anymore.
 */
void clearInCallScreenReference(){
  mInCallScreen=null;
  mDialerKeyListener=null;
  if (mDialerContainer != null) {
    mDialerContainer.setOnDrawerOpenListener(null);
    mDialerContainer.setOnDrawerCloseListener(null);
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mHandler.removeMessages(DTMF_SEND_CNF);
synchronized (mDTMFQueue) {
      mDTMFBurstCnfPending=false;
      mDTMFQueue.clear();
    }
  }
  closeDialer(false);
}",0.9671292914536158
184813,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case PHONE_DISCONNECT:
    if (DBG)     log(""String_Node_Str"");
  mPhone.unregisterForDisconnect(this);
closeDialer(false);
break;
case DTMF_SEND_CNF:
if (DBG) log(""String_Node_Str"");
handleBurstDtmfConfirmation();
break;
case STOP_DTMF_TONE:
if (DBG) log(""String_Node_Str"");
stopToneCdma();
break;
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case PHONE_DISCONNECT:
    if (DBG)     log(""String_Node_Str"");
  mPhone.unregisterForDisconnect(this);
closeDialer(false);
break;
case DTMF_SEND_CNF:
if (DBG) log(""String_Node_Str"");
handleBurstDtmfConfirmation();
break;
}
}",0.8845577211394303
184814,"/** 
 * turn on keyguard on pause.
 */
@Override public void onPause(){
  if (DBG)   Log.d(LOG_TAG,""String_Node_Str"");
  PhoneApp app=(PhoneApp)getApplication();
  app.reenableKeyguard();
  app.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
  super.onPause();
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneStopper.removeMessages(STOP_TONE);
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}","/** 
 * turn on keyguard on pause.
 */
@Override public void onPause(){
  if (DBG)   Log.d(LOG_TAG,""String_Node_Str"");
  PhoneApp app=(PhoneApp)getApplication();
  app.reenableKeyguard();
  app.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
  super.onPause();
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}",0.9470046082949308
184815,"@Override protected void onDestroy(){
  super.onDestroy();
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneStopper.removeMessages(STOP_TONE);
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
  unregisterReceiver(mBroadcastReceiver);
}","@Override protected void onDestroy(){
  super.onDestroy();
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
  unregisterReceiver(mBroadcastReceiver);
}",0.553030303030303
184816,"/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(LOG_TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneStopper.removeMessages(STOP_TONE);
    mToneGenerator.startTone(tone);
    mToneStopper.sendEmptyMessageDelayed(STOP_TONE,TONE_LENGTH_MS);
  }
}","/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(LOG_TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneGenerator.startTone(tone,TONE_LENGTH_MS);
  }
}",0.908169014084507
184817,"/** 
 * Saves the new VM number associating it with the currently selected provider if the number is different than the one already stored for this provider. Later on this number will be used when the user switches a provider.
 */
private void maybeSaveNumberForVoicemailProvider(String newVMNumber){
  final String key=mVoicemailProviders.getValue();
  final String curNumber=loadNumberForVoiceMailProvider(key);
  if (newVMNumber.equals(curNumber)) {
    return;
  }
  mPerProviderSavedVMNumbers.edit().putString(key,newVMNumber).commit();
}","/** 
 * Saves the new VM number associating it with the currently selected provider if the number is different than the one already stored for this provider. Later on this number will be used when the user switches a provider.
 */
private void maybeSaveNumberForVoicemailProvider(String newVMNumber){
  if (mVoicemailProviders == null) {
    return;
  }
  final String key=mVoicemailProviders.getValue();
  final String curNumber=loadNumberForVoiceMailProvider(key);
  if (newVMNumber.equals(curNumber)) {
    return;
  }
  mPerProviderSavedVMNumbers.edit().putString(key,newVMNumber).commit();
}",0.9534679543459176
184818,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mPhone=PhoneFactory.getDefaultPhone();
  addPreferencesFromResource(R.xml.call_feature_setting);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)findPreference(BUTTON_VOICEMAIL_KEY);
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mButtonDTMF=(ListPreference)findPreference(BUTTON_DTMF_KEY);
  mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  mButtonHAC=(CheckBoxPreference)findPreference(BUTTON_HAC_KEY);
  mButtonTTY=(ListPreference)findPreference(BUTTON_TTY_KEY);
  mVoicemailProviders=(ListPreference)findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
  mVoicemailProviders.setOnPreferenceChangeListener(this);
  mVoicemailSettings=(PreferenceScreen)findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
  initVoiceMailProviders();
  if (getResources().getBoolean(R.bool.dtmf_type_enabled)) {
    mButtonDTMF.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonDTMF);
    mButtonDTMF=null;
  }
  if (getResources().getBoolean(R.bool.auto_retry_enabled)) {
    mButtonAutoRetry.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonAutoRetry);
    mButtonAutoRetry=null;
  }
  if (getResources().getBoolean(R.bool.hac_enabled)) {
    mButtonHAC.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonHAC);
    mButtonHAC=null;
  }
  if (getResources().getBoolean(R.bool.tty_enabled)) {
    mButtonTTY.setOnPreferenceChangeListener(this);
    ttyHandler=new TTYHandler();
  }
 else {
    prefSet.removePreference(mButtonTTY);
    mButtonTTY=null;
  }
  if (!getResources().getBoolean(R.bool.world_phone)) {
    prefSet.removePreference(prefSet.findPreference(BUTTON_CDMA_OPTIONS));
    prefSet.removePreference(prefSet.findPreference(BUTTON_GSM_UMTS_OPTIONS));
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      prefSet.removePreference(prefSet.findPreference(BUTTON_FDN_KEY));
      addPreferencesFromResource(R.xml.cdma_call_options);
    }
 else {
      addPreferencesFromResource(R.xml.gsm_umts_call_options);
    }
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (icicle == null) {
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL)) {
      if (mVMProvidersData.size() > 1) {
        simulatePreferenceClick(mVoicemailProviders);
      }
 else {
        mSubMenuVoicemailSettings.showPhoneNumberDialog();
      }
    }
  }
  updateVoiceNumberField();
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mPhone=PhoneFactory.getDefaultPhone();
  addPreferencesFromResource(R.xml.call_feature_setting);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)findPreference(BUTTON_VOICEMAIL_KEY);
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mButtonDTMF=(ListPreference)findPreference(BUTTON_DTMF_KEY);
  mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  mButtonHAC=(CheckBoxPreference)findPreference(BUTTON_HAC_KEY);
  mButtonTTY=(ListPreference)findPreference(BUTTON_TTY_KEY);
  mVoicemailProviders=(ListPreference)findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
  if (mVoicemailProviders != null) {
    mVoicemailProviders.setOnPreferenceChangeListener(this);
    mVoicemailSettings=(PreferenceScreen)findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
    initVoiceMailProviders();
  }
  if (getResources().getBoolean(R.bool.dtmf_type_enabled)) {
    mButtonDTMF.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonDTMF);
    mButtonDTMF=null;
  }
  if (getResources().getBoolean(R.bool.auto_retry_enabled)) {
    mButtonAutoRetry.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonAutoRetry);
    mButtonAutoRetry=null;
  }
  if (getResources().getBoolean(R.bool.hac_enabled)) {
    mButtonHAC.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonHAC);
    mButtonHAC=null;
  }
  if (getResources().getBoolean(R.bool.tty_enabled)) {
    mButtonTTY.setOnPreferenceChangeListener(this);
    ttyHandler=new TTYHandler();
  }
 else {
    prefSet.removePreference(mButtonTTY);
    mButtonTTY=null;
  }
  if (!getResources().getBoolean(R.bool.world_phone)) {
    prefSet.removePreference(prefSet.findPreference(BUTTON_CDMA_OPTIONS));
    prefSet.removePreference(prefSet.findPreference(BUTTON_GSM_UMTS_OPTIONS));
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      prefSet.removePreference(prefSet.findPreference(BUTTON_FDN_KEY));
      addPreferencesFromResource(R.xml.cdma_call_options);
    }
 else {
      addPreferencesFromResource(R.xml.gsm_umts_call_options);
    }
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (icicle == null) {
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL) && mVoicemailProviders != null) {
      if (mVMProvidersData.size() > 1) {
        simulatePreferenceClick(mVoicemailProviders);
      }
 else {
        mSubMenuVoicemailSettings.showPhoneNumberDialog();
      }
    }
  }
  updateVoiceNumberField();
}",0.9868598382749326
184819,"/** 
 * Saves the new VM number associating it with the currently selected provider if the number is different than the one already stored for this provider. Later on this number will be used when the user switches a provider.
 */
private void maybeSaveNumberForVoicemailProvider(String newVMNumber){
  final String key=mVoicemailProviders.getValue();
  final String curNumber=loadNumberForVoiceMailProvider(key);
  if (newVMNumber.equals(curNumber)) {
    return;
  }
  mPerProviderSavedVMNumbers.edit().putString(key,newVMNumber).commit();
}","/** 
 * Saves the new VM number associating it with the currently selected provider if the number is different than the one already stored for this provider. Later on this number will be used when the user switches a provider.
 */
private void maybeSaveNumberForVoicemailProvider(String newVMNumber){
  if (mVoicemailProviders == null) {
    return;
  }
  final String key=mVoicemailProviders.getValue();
  final String curNumber=loadNumberForVoiceMailProvider(key);
  if (newVMNumber.equals(curNumber)) {
    return;
  }
  mPerProviderSavedVMNumbers.edit().putString(key,newVMNumber).commit();
}",0.9534679543459176
184820,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mPhone=PhoneFactory.getDefaultPhone();
  addPreferencesFromResource(R.xml.call_feature_setting);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)findPreference(BUTTON_VOICEMAIL_KEY);
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mButtonDTMF=(ListPreference)findPreference(BUTTON_DTMF_KEY);
  mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  mButtonHAC=(CheckBoxPreference)findPreference(BUTTON_HAC_KEY);
  mButtonTTY=(ListPreference)findPreference(BUTTON_TTY_KEY);
  mVoicemailProviders=(ListPreference)findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
  mVoicemailProviders.setOnPreferenceChangeListener(this);
  mVoicemailSettings=(PreferenceScreen)findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
  initVoiceMailProviders();
  if (getResources().getBoolean(R.bool.dtmf_type_enabled)) {
    mButtonDTMF.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonDTMF);
    mButtonDTMF=null;
  }
  if (getResources().getBoolean(R.bool.auto_retry_enabled)) {
    mButtonAutoRetry.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonAutoRetry);
    mButtonAutoRetry=null;
  }
  if (getResources().getBoolean(R.bool.hac_enabled)) {
    mButtonHAC.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonHAC);
    mButtonHAC=null;
  }
  if (getResources().getBoolean(R.bool.tty_enabled)) {
    mButtonTTY.setOnPreferenceChangeListener(this);
    ttyHandler=new TTYHandler();
  }
 else {
    prefSet.removePreference(mButtonTTY);
    mButtonTTY=null;
  }
  if (!getResources().getBoolean(R.bool.world_phone)) {
    prefSet.removePreference(prefSet.findPreference(BUTTON_CDMA_OPTIONS));
    prefSet.removePreference(prefSet.findPreference(BUTTON_GSM_UMTS_OPTIONS));
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      prefSet.removePreference(prefSet.findPreference(BUTTON_FDN_KEY));
      addPreferencesFromResource(R.xml.cdma_call_options);
    }
 else {
      addPreferencesFromResource(R.xml.gsm_umts_call_options);
    }
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (icicle == null) {
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL)) {
      if (mVMProvidersData.size() > 1) {
        simulatePreferenceClick(mVoicemailProviders);
      }
 else {
        mSubMenuVoicemailSettings.showPhoneNumberDialog();
      }
    }
  }
  updateVoiceNumberField();
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mPhone=PhoneFactory.getDefaultPhone();
  addPreferencesFromResource(R.xml.call_feature_setting);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)findPreference(BUTTON_VOICEMAIL_KEY);
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mButtonDTMF=(ListPreference)findPreference(BUTTON_DTMF_KEY);
  mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  mButtonHAC=(CheckBoxPreference)findPreference(BUTTON_HAC_KEY);
  mButtonTTY=(ListPreference)findPreference(BUTTON_TTY_KEY);
  mVoicemailProviders=(ListPreference)findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
  if (mVoicemailProviders != null) {
    mVoicemailProviders.setOnPreferenceChangeListener(this);
    mVoicemailSettings=(PreferenceScreen)findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
    initVoiceMailProviders();
  }
  if (getResources().getBoolean(R.bool.dtmf_type_enabled)) {
    mButtonDTMF.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonDTMF);
    mButtonDTMF=null;
  }
  if (getResources().getBoolean(R.bool.auto_retry_enabled)) {
    mButtonAutoRetry.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonAutoRetry);
    mButtonAutoRetry=null;
  }
  if (getResources().getBoolean(R.bool.hac_enabled)) {
    mButtonHAC.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonHAC);
    mButtonHAC=null;
  }
  if (getResources().getBoolean(R.bool.tty_enabled)) {
    mButtonTTY.setOnPreferenceChangeListener(this);
    ttyHandler=new TTYHandler();
  }
 else {
    prefSet.removePreference(mButtonTTY);
    mButtonTTY=null;
  }
  if (!getResources().getBoolean(R.bool.world_phone)) {
    prefSet.removePreference(prefSet.findPreference(BUTTON_CDMA_OPTIONS));
    prefSet.removePreference(prefSet.findPreference(BUTTON_GSM_UMTS_OPTIONS));
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      prefSet.removePreference(prefSet.findPreference(BUTTON_FDN_KEY));
      addPreferencesFromResource(R.xml.cdma_call_options);
    }
 else {
      addPreferencesFromResource(R.xml.gsm_umts_call_options);
    }
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (icicle == null) {
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL) && mVoicemailProviders != null) {
      if (mVMProvidersData.size() > 1) {
        simulatePreferenceClick(mVoicemailProviders);
      }
 else {
        mSubMenuVoicemailSettings.showPhoneNumberDialog();
      }
    }
  }
  updateVoiceNumberField();
}",0.9868598382749326
184821,"/** 
 * Updates the ""on hold"" box in the ""other call"" info area (ie. the stuff in the otherCallOnHoldInfo block) based on the specified Call. Or, clear out the ""on hold"" box if the specified call is null or idle.
 */
private void displayOnHoldCallStatus(Phone phone,Call call){
  if (DBG)   log(""String_Node_Str"" + call + ""String_Node_Str"");
  if ((call == null) || (PhoneApp.getInstance().isOtaCallInActiveState())) {
    mOtherCallOnHoldInfoArea.setVisibility(View.GONE);
    return;
  }
  String name=null;
  Call.State state=call.getState();
switch (state) {
case HOLDING:
    if (PhoneUtils.isConferenceCall(call)) {
      if (DBG)       log(""String_Node_Str"");
      name=getContext().getString(R.string.confCall);
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),call,this,mOtherCallOnHoldName);
      name=PhoneUtils.getCompactNameFromCallerInfo(info.currentInfo,getContext());
    }
  mOtherCallOnHoldName.setText(name);
mOtherCallOnHoldName.setTextColor(mTextColorOnHold);
mOtherCallOnHoldStatus.setTextColor(mTextColorOnHold);
mOtherCallOnHoldInfoArea.setVisibility(View.VISIBLE);
break;
case ACTIVE:
if (mApplication.phone.getPhoneName().equals(""String_Node_Str"")) {
List<Connection> connections=call.getConnections();
if (connections.size() > 2) {
name=getContext().getString(R.string.card_title_in_call);
}
 else {
Connection conn=call.getEarliestConnection();
PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),conn,this,mOtherCallOnHoldName);
name=PhoneUtils.getCompactNameFromCallerInfo(info.currentInfo,getContext());
}
mOtherCallOnHoldName.setText(name);
mOtherCallOnHoldName.setTextColor(mTextColorOnHold);
mOtherCallOnHoldStatus.setTextColor(mTextColorOnHold);
mOtherCallOnHoldInfoArea.setVisibility(View.VISIBLE);
}
break;
default :
mOtherCallOnHoldInfoArea.setVisibility(View.GONE);
break;
}
}","/** 
 * Updates the ""on hold"" box in the ""other call"" info area (ie. the stuff in the otherCallOnHoldInfo block) based on the specified Call. Or, clear out the ""on hold"" box if the specified call is null or idle.
 */
private void displayOnHoldCallStatus(Phone phone,Call call){
  if (DBG)   log(""String_Node_Str"" + call + ""String_Node_Str"");
  if ((call == null) || (PhoneApp.getInstance().isOtaCallInActiveState())) {
    mOtherCallOnHoldInfoArea.setVisibility(View.GONE);
    return;
  }
  String name=null;
  Call.State state=call.getState();
switch (state) {
case HOLDING:
    if (PhoneUtils.isConferenceCall(call)) {
      if (DBG)       log(""String_Node_Str"");
      name=getContext().getString(R.string.confCall);
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),call,this,mOtherCallOnHoldName);
      name=PhoneUtils.getCompactNameFromCallerInfo(info.currentInfo,getContext());
    }
  mOtherCallOnHoldName.setText(name);
mOtherCallOnHoldName.setTextColor(mTextColorOnHold);
mOtherCallOnHoldStatus.setTextColor(mTextColorOnHold);
mOtherCallOnHoldInfoArea.setVisibility(View.VISIBLE);
break;
case ACTIVE:
if (mApplication.phone.getPhoneName().equals(""String_Node_Str"")) {
List<Connection> connections=call.getConnections();
if (connections.size() > 2) {
name=getContext().getString(R.string.card_title_in_call);
}
 else {
Connection conn=call.getEarliestConnection();
PhoneUtils.CallerInfoToken infoToken=PhoneUtils.startGetCallerInfo(getContext(),conn,this,mOtherCallOnHoldName);
CallerInfo info=infoToken.currentInfo;
name=PhoneUtils.getCompactNameFromCallerInfo(info,getContext());
if (info != null && info.numberPresentation != Connection.PRESENTATION_ALLOWED) {
name=getPresentationString(info.numberPresentation);
}
}
mOtherCallOnHoldName.setText(name);
mOtherCallOnHoldName.setTextColor(mTextColorOnHold);
mOtherCallOnHoldStatus.setTextColor(mTextColorOnHold);
mOtherCallOnHoldInfoArea.setVisibility(View.VISIBLE);
}
break;
default :
mOtherCallOnHoldInfoArea.setVisibility(View.GONE);
break;
}
}",0.9451748945671048
184822,"/** 
 * Helper function used to show a missed call notification.
 */
private void showMissedCallNotification(Connection c,final long date){
  PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(mApplication,c,this,Long.valueOf(date));
  if (info != null) {
    if (VDBG)     log(""String_Node_Str"");
    if (info.isFinal) {
      CallerInfo ci=info.currentInfo;
      NotificationMgr.getDefault().notifyMissedCall(ci.name,ci.phoneNumber,ci.phoneLabel,date);
    }
  }
 else {
    Log.w(LOG_TAG,""String_Node_Str"" + c);
  }
}","/** 
 * Helper function used to show a missed call notification.
 */
private void showMissedCallNotification(Connection c,final long date){
  PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(mApplication,c,this,Long.valueOf(date));
  if (info != null) {
    if (VDBG)     log(""String_Node_Str"");
    if (info.isFinal) {
      CallerInfo ci=info.currentInfo;
      String name=ci.name;
      String number=ci.phoneNumber;
      if (ci.numberPresentation == Connection.PRESENTATION_RESTRICTED) {
        name=mPhone.getContext().getString(R.string.private_num);
      }
 else       if (ci.numberPresentation != Connection.PRESENTATION_ALLOWED) {
        name=mPhone.getContext().getString(R.string.unknown);
      }
 else {
        number=PhoneUtils.modifyForSpecialCnapCases(mPhone.getContext(),ci,number,ci.numberPresentation);
      }
      NotificationMgr.getDefault().notifyMissedCall(name,number,ci.phoneLabel,date);
    }
  }
 else {
    Log.w(LOG_TAG,""String_Node_Str"" + c);
  }
}",0.6727629000653168
184823,"public void run(){
  Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
  if (DBG)   log(""String_Node_Str"");
}","public void run(){
  Calls.addCall(ci,mApplication,logNumber,newPresentation,callLogType,date,(int)duration / 1000);
  if (DBG)   log(""String_Node_Str"");
}",0.9671052631578948
184824,"/** 
 * Performs Call logging based on Timeout or Ignore Call Waiting Call for CDMA, and finally calls Hangup on the Call Waiting connection.
 */
void onCdmaCallWaitingReject(){
  final Call ringingCall=mPhone.getRingingCall();
  if (ringingCall.getState() == Call.State.WAITING) {
    Connection c=ringingCall.getLatestConnection();
    if (c != null) {
      final String number=c.getAddress();
      final int presentation=c.getNumberPresentation();
      final long date=c.getCreateTime();
      final long duration=c.getDurationMillis();
      final int callLogType=mCallWaitingTimeOut ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE;
      Object o=c.getUserData();
      final CallerInfo ci;
      if ((o == null) || (o instanceof CallerInfo)) {
        ci=(CallerInfo)o;
      }
 else {
        ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
      }
      Thread t=new Thread(){
        public void run(){
          Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
          if (DBG)           log(""String_Node_Str"");
        }
      }
;
      t.start();
      if (callLogType == CallLog.Calls.MISSED_TYPE) {
        showMissedCallNotification(c,date);
      }
 else {
        removeMessages(CALLWAITING_CALLERINFO_DISPLAY_DONE);
      }
      PhoneUtils.hangup(c);
    }
    mCallWaitingTimeOut=false;
  }
}","/** 
 * Performs Call logging based on Timeout or Ignore Call Waiting Call for CDMA, and finally calls Hangup on the Call Waiting connection.
 */
void onCdmaCallWaitingReject(){
  final Call ringingCall=mPhone.getRingingCall();
  if (ringingCall.getState() == Call.State.WAITING) {
    Connection c=ringingCall.getLatestConnection();
    if (c != null) {
      String number=c.getAddress();
      int presentation=c.getNumberPresentation();
      final long date=c.getCreateTime();
      final long duration=c.getDurationMillis();
      final int callLogType=mCallWaitingTimeOut ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE;
      Object o=c.getUserData();
      final CallerInfo ci;
      if ((o == null) || (o instanceof CallerInfo)) {
        ci=(CallerInfo)o;
      }
 else {
        ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
      }
      final String logNumber=PhoneUtils.modifyForSpecialCnapCases(mPhone.getContext(),ci,number,presentation);
      final int newPresentation=(ci != null) ? ci.numberPresentation : presentation;
      if (DBG)       log(""String_Node_Str"" + logNumber + ""String_Node_Str""+ newPresentation);
      Thread t=new Thread(){
        public void run(){
          Calls.addCall(ci,mApplication,logNumber,newPresentation,callLogType,date,(int)duration / 1000);
          if (DBG)           log(""String_Node_Str"");
        }
      }
;
      t.start();
      if (callLogType == CallLog.Calls.MISSED_TYPE) {
        showMissedCallNotification(c,date);
      }
 else {
        removeMessages(CALLWAITING_CALLERINFO_DISPLAY_DONE);
      }
      PhoneUtils.hangup(c);
    }
    mCallWaitingTimeOut=false;
  }
}",0.8966887417218543
184825,"/** 
 * place a temporary callerinfo object in the hands of the caller and notify caller when the actual query is done.
 */
static CallerInfoToken startGetCallerInfo(Context context,Connection c,CallerInfoAsyncQuery.OnQueryCompleteListener listener,Object cookie){
  CallerInfoToken cit;
  if (c == null) {
    cit=new CallerInfoToken();
    cit.asyncQuery=null;
    return cit;
  }
  Object userDataObject=c.getUserData();
  if (userDataObject instanceof Uri) {
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,(Uri)userDataObject,sCallerInfoQueryListener,c);
    cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
    cit.isFinal=false;
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + userDataObject);
  }
 else   if (userDataObject == null) {
    String number=c.getAddress();
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    if (DBG)     log(""String_Node_Str"" + number);
    if (!TextUtils.isEmpty(number)) {
      cit.currentInfo.cnapName=c.getCnapName();
      cit.currentInfo.name=cit.currentInfo.cnapName;
      cit.currentInfo.numberPresentation=c.getNumberPresentation();
      cit.currentInfo.namePresentation=c.getCnapNamePresentation();
      if (DBG)       log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
      number=modifyForSpecialCnapCases(context,cit.currentInfo,number,cit.currentInfo.numberPresentation);
      cit.currentInfo.phoneNumber=number;
      if (cit.currentInfo.numberPresentation != Connection.PRESENTATION_ALLOWED) {
        cit.isFinal=true;
      }
 else {
        cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,number,sCallerInfoQueryListener,c);
        cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
        cit.isFinal=false;
      }
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      cit.isFinal=true;
    }
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + number);
  }
 else   if (userDataObject instanceof CallerInfoToken) {
    cit=(CallerInfoToken)userDataObject;
    if (cit.asyncQuery != null) {
      cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
      if (DBG)       log(""String_Node_Str"" + listener.getClass().toString());
    }
 else {
      String updatedNumber=c.getAddress();
      if (DBG)       log(""String_Node_Str"" + updatedNumber);
      if (!TextUtils.isEmpty(updatedNumber)) {
        cit.currentInfo.phoneNumber=updatedNumber;
        cit.currentInfo.cnapName=c.getCnapName();
        cit.currentInfo.name=cit.currentInfo.cnapName;
        cit.currentInfo.numberPresentation=c.getNumberPresentation();
        cit.currentInfo.namePresentation=c.getCnapNamePresentation();
        if (DBG)         log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
        if (cit.currentInfo.numberPresentation != Connection.PRESENTATION_ALLOWED) {
          cit.isFinal=true;
        }
 else {
          cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,updatedNumber,sCallerInfoQueryListener,c);
          cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
          cit.isFinal=false;
        }
      }
 else {
        if (DBG)         log(""String_Node_Str"");
        if (cit.currentInfo == null) {
          cit.currentInfo=new CallerInfo();
        }
        cit.isFinal=true;
      }
    }
  }
 else {
    cit=new CallerInfoToken();
    cit.currentInfo=(CallerInfo)userDataObject;
    cit.asyncQuery=null;
    cit.isFinal=true;
    if (DBG)     log(""String_Node_Str"");
  }
  return cit;
}","/** 
 * place a temporary callerinfo object in the hands of the caller and notify caller when the actual query is done.
 */
static CallerInfoToken startGetCallerInfo(Context context,Connection c,CallerInfoAsyncQuery.OnQueryCompleteListener listener,Object cookie){
  CallerInfoToken cit;
  if (c == null) {
    cit=new CallerInfoToken();
    cit.asyncQuery=null;
    return cit;
  }
  Object userDataObject=c.getUserData();
  if (userDataObject instanceof Uri) {
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,(Uri)userDataObject,sCallerInfoQueryListener,c);
    cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
    cit.isFinal=false;
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + userDataObject);
  }
 else   if (userDataObject == null) {
    String number=c.getAddress();
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    cit.currentInfo.cnapName=c.getCnapName();
    cit.currentInfo.name=cit.currentInfo.cnapName;
    cit.currentInfo.numberPresentation=c.getNumberPresentation();
    cit.currentInfo.namePresentation=c.getCnapNamePresentation();
    if (DBG)     log(""String_Node_Str"" + number);
    if (DBG)     log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
    if (!TextUtils.isEmpty(number)) {
      number=modifyForSpecialCnapCases(context,cit.currentInfo,number,cit.currentInfo.numberPresentation);
      cit.currentInfo.phoneNumber=number;
      if (cit.currentInfo.numberPresentation != Connection.PRESENTATION_ALLOWED) {
        cit.isFinal=true;
      }
 else {
        cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,number,sCallerInfoQueryListener,c);
        cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
        cit.isFinal=false;
      }
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      cit.isFinal=true;
    }
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + number);
  }
 else   if (userDataObject instanceof CallerInfoToken) {
    cit=(CallerInfoToken)userDataObject;
    if (cit.asyncQuery != null) {
      cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
      if (DBG)       log(""String_Node_Str"" + listener.getClass().toString());
    }
 else {
      String updatedNumber=c.getAddress();
      if (DBG)       log(""String_Node_Str"" + updatedNumber);
      if (!TextUtils.isEmpty(updatedNumber)) {
        cit.currentInfo.cnapName=c.getCnapName();
        cit.currentInfo.name=cit.currentInfo.cnapName;
        cit.currentInfo.numberPresentation=c.getNumberPresentation();
        cit.currentInfo.namePresentation=c.getCnapNamePresentation();
        updatedNumber=modifyForSpecialCnapCases(context,cit.currentInfo,updatedNumber,cit.currentInfo.numberPresentation);
        cit.currentInfo.phoneNumber=updatedNumber;
        if (DBG)         log(""String_Node_Str"" + updatedNumber);
        if (DBG)         log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
        if (cit.currentInfo.numberPresentation != Connection.PRESENTATION_ALLOWED) {
          cit.isFinal=true;
        }
 else {
          cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,updatedNumber,sCallerInfoQueryListener,c);
          cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
          cit.isFinal=false;
        }
      }
 else {
        if (DBG)         log(""String_Node_Str"");
        if (cit.currentInfo == null) {
          cit.currentInfo=new CallerInfo();
        }
        cit.currentInfo.cnapName=c.getCnapName();
        cit.currentInfo.name=cit.currentInfo.cnapName;
        cit.currentInfo.numberPresentation=c.getNumberPresentation();
        cit.currentInfo.namePresentation=c.getCnapNamePresentation();
        if (DBG)         log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
        cit.isFinal=true;
      }
    }
  }
 else {
    cit=new CallerInfoToken();
    cit.currentInfo=(CallerInfo)userDataObject;
    cit.asyncQuery=null;
    cit.isFinal=true;
    if (DBG)     log(""String_Node_Str"");
  }
  return cit;
}",0.8033136688841471
184826,"/** 
 * Handles certain ""corner cases"" for CNAP. When we receive weird phone numbers from the network to indicate different number presentations, convert them to expected number and presentation values within the CallerInfo object.
 * @param number number we use to verify if we are in a corner case
 * @param presentation presentation value used to verify if we are in a corner case
 * @return the new String that should be used for the phone number
 */
static String modifyForSpecialCnapCases(Context context,CallerInfo ci,String number,int presentation){
  if (ci == null || number == null)   return number;
  if (DBG)   log(""String_Node_Str"" + number + ""String_Node_Str""+ presentation);
  if (number.equals(context.getString(R.string.absent_num))) {
    number=context.getString(R.string.unknown);
    ci.numberPresentation=Connection.PRESENTATION_UNKNOWN;
  }
  if (ci.numberPresentation == Connection.PRESENTATION_ALLOWED || ci.numberPresentation != presentation) {
    int cnapSpecialCase=checkCnapSpecialCases(number);
    if (cnapSpecialCase != CNAP_SPECIAL_CASE_NO) {
      if (cnapSpecialCase == Connection.PRESENTATION_RESTRICTED) {
        number=context.getString(R.string.private_num);
      }
 else       if (cnapSpecialCase == Connection.PRESENTATION_UNKNOWN) {
        number=context.getString(R.string.unknown);
      }
      if (DBG)       log(""String_Node_Str"" + number + ""String_Node_Str""+ cnapSpecialCase);
      ci.numberPresentation=cnapSpecialCase;
    }
  }
  if (DBG)   log(""String_Node_Str"" + number);
  return number;
}","/** 
 * Handles certain ""corner cases"" for CNAP. When we receive weird phone numbers from the network to indicate different number presentations, convert them to expected number and presentation values within the CallerInfo object.
 * @param number number we use to verify if we are in a corner case
 * @param presentation presentation value used to verify if we are in a corner case
 * @return the new String that should be used for the phone number
 */
static String modifyForSpecialCnapCases(Context context,CallerInfo ci,String number,int presentation){
  if (ci == null || number == null)   return number;
  if (DBG)   log(""String_Node_Str"" + number + ""String_Node_Str""+ presentation);
  if (number.equals(context.getString(R.string.absent_num)) && presentation == Connection.PRESENTATION_ALLOWED) {
    number=context.getString(R.string.unknown);
    ci.numberPresentation=Connection.PRESENTATION_UNKNOWN;
  }
  if (ci.numberPresentation == Connection.PRESENTATION_ALLOWED || (ci.numberPresentation != presentation && presentation == Connection.PRESENTATION_ALLOWED)) {
    int cnapSpecialCase=checkCnapSpecialCases(number);
    if (cnapSpecialCase != CNAP_SPECIAL_CASE_NO) {
      if (cnapSpecialCase == Connection.PRESENTATION_RESTRICTED) {
        number=context.getString(R.string.private_num);
      }
 else       if (cnapSpecialCase == Connection.PRESENTATION_UNKNOWN) {
        number=context.getString(R.string.unknown);
      }
      if (DBG)       log(""String_Node_Str"" + number + ""String_Node_Str""+ cnapSpecialCase);
      ci.numberPresentation=cnapSpecialCase;
    }
  }
  if (DBG)   log(""String_Node_Str"" + number);
  return number;
}",0.7745159275452842
184827,"/** 
 * Returns a single ""name"" for the specified given a CallerInfo object. If the name is null, return defaultString as the default value, usually context.getString(R.string.unknown).
 */
static String getCompactNameFromCallerInfo(CallerInfo ci,Context context){
  if (DBG)   log(""String_Node_Str"" + ci);
  String compactName=null;
  if (ci != null) {
    compactName=ci.name;
    if ((compactName == null) || (TextUtils.isEmpty(compactName))) {
      compactName=ci.phoneNumber;
    }
  }
  if ((compactName == null) || (TextUtils.isEmpty(compactName))) {
    compactName=context.getString(R.string.unknown);
  }
  return compactName;
}","/** 
 * Returns a single ""name"" for the specified given a CallerInfo object. If the name is null, return defaultString as the default value, usually context.getString(R.string.unknown).
 */
static String getCompactNameFromCallerInfo(CallerInfo ci,Context context){
  if (DBG)   log(""String_Node_Str"" + ci);
  String compactName=null;
  if (ci != null) {
    compactName=ci.name;
    if ((compactName == null) || (TextUtils.isEmpty(compactName))) {
      compactName=ci.phoneNumber;
    }
    compactName=modifyForSpecialCnapCases(context,ci,compactName,ci.numberPresentation);
  }
  if ((compactName == null) || (TextUtils.isEmpty(compactName))) {
    if (ci != null && ci.numberPresentation == Connection.PRESENTATION_RESTRICTED) {
      compactName=context.getString(R.string.private_num);
    }
 else     if (ci != null && ci.numberPresentation == Connection.PRESENTATION_PAYPHONE) {
      compactName=context.getString(R.string.payphone);
    }
 else {
      compactName=context.getString(R.string.unknown);
    }
  }
  if (DBG)   log(""String_Node_Str"" + compactName);
  return compactName;
}",0.715850144092219
184828,"private void saveVoiceMailNumber(String newVMNumber){
  if (newVMNumber == null) {
    newVMNumber=""String_Node_Str"";
  }
  if (newVMNumber.equals(mOldVmNumber)) {
    showVMDialog(MSG_VM_NOCHANGE);
    return;
  }
  if (DBG)   log(""String_Node_Str"" + newVMNumber);
  mPhone.setVoiceMailNumber(mPhone.getVoiceMailAlphaTag().toString(),newVMNumber,Message.obtain(mSetOptionComplete,EVENT_VOICEMAIL_CHANGED));
}","private void saveVoiceMailNumber(String newVMNumber){
  if (newVMNumber == null) {
    newVMNumber=""String_Node_Str"";
  }
  if (newVMNumber.equals(mOldVmNumber)) {
    showVMDialog(MSG_VM_NOCHANGE);
    return;
  }
  maybeSaveNumberForVoicemailProvider(newVMNumber);
  if (DBG)   log(""String_Node_Str"" + newVMNumber);
  mPhone.setVoiceMailNumber(mPhone.getVoiceMailAlphaTag().toString(),newVMNumber,Message.obtain(mSetOptionComplete,EVENT_VOICEMAIL_CHANGED));
}",0.9402298850574712
184829,"/** 
 * Implemented to support onPreferenceChangeListener to look for preference changes.
 * @param preference is the preference to be changed
 * @param objValue should be the value of the selection, NOT its localizeddisplay value.
 */
public boolean onPreferenceChange(Preference preference,Object objValue){
  if (preference == mButtonDTMF) {
    int index=mButtonDTMF.findIndexOfValue((String)objValue);
    Settings.System.putInt(mPhone.getContext().getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,index);
  }
 else   if (preference == mButtonTTY) {
    handleTTYChange(preference,objValue);
  }
 else   if (preference == mVoicemailProviders) {
    updateVMPreferenceWidgets((String)objValue);
    simulatePreferenceClick(mVoicemailSettings);
  }
  return true;
}","/** 
 * Implemented to support onPreferenceChangeListener to look for preference changes.
 * @param preference is the preference to be changed
 * @param objValue should be the value of the selection, NOT its localizeddisplay value.
 */
public boolean onPreferenceChange(Preference preference,Object objValue){
  if (preference == mButtonDTMF) {
    int index=mButtonDTMF.findIndexOfValue((String)objValue);
    Settings.System.putInt(mPhone.getContext().getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,index);
  }
 else   if (preference == mButtonTTY) {
    handleTTYChange(preference,objValue);
  }
 else   if (preference == mVoicemailProviders) {
    updateVMPreferenceWidgets((String)objValue);
    final String providerVMNumber=loadNumberForVoiceMailProvider((String)objValue);
    if (providerVMNumber == null) {
      simulatePreferenceClick(mVoicemailSettings);
    }
 else {
      saveVoiceMailNumber(providerVMNumber);
    }
  }
  return true;
}",0.8706552706552707
184830,"/** 
 * Enumerates existing VM providers and puts their data into the list and populates the preference list objects with their names. In case we are called with ACTION_ADD_VOICEMAIL intent the intent may have an extra string called ""providerToIgnore"" with ""package.activityName"" of the provider which should be hidden when we bring up the list of possible VM providers to choose. This allows a provider which is being disabled (e.g. GV user logging out) to force the user to pick some other provider.
 */
private void initVoiceMailProviders(){
  String providerToIgnore=null;
  if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL)) {
    providerToIgnore=getIntent().getStringExtra(""String_Node_Str"");
  }
  mVMProvidersData.clear();
  final String myCarrier=getString(R.string.voicemail_default);
  mVMProvidersData.put(""String_Node_Str"",new VoiceMailProvider(myCarrier,null));
  PackageManager pm=getPackageManager();
  Intent intent=new Intent();
  intent.setAction(ACTION_CONFIGURE_VOICEMAIL);
  List<ResolveInfo> resolveInfos=pm.queryIntentActivities(intent,0);
  int len=resolveInfos.size() + 1;
  for (int i=0; i < resolveInfos.size(); i++) {
    final ResolveInfo ri=resolveInfos.get(i);
    final ActivityInfo currentActivityInfo=ri.activityInfo;
    final String key=makeKeyForActivity(currentActivityInfo);
    if (key.equals(providerToIgnore)) {
      len--;
      continue;
    }
    final String nameForDisplay=ri.loadLabel(pm).toString();
    Intent providerIntent=new Intent();
    providerIntent.setAction(ACTION_CONFIGURE_VOICEMAIL);
    providerIntent.setClassName(currentActivityInfo.packageName,currentActivityInfo.name);
    mVMProvidersData.put(key,new VoiceMailProvider(nameForDisplay,providerIntent));
  }
  String[] entries=new String[len];
  String[] values=new String[len];
  entries[0]=myCarrier;
  values[0]=""String_Node_Str"";
  int entryIdx=1;
  for (int i=0; i < resolveInfos.size(); i++) {
    final String key=makeKeyForActivity(resolveInfos.get(i).activityInfo);
    if (!mVMProvidersData.containsKey(key)) {
      continue;
    }
    entries[entryIdx]=mVMProvidersData.get(key).name;
    values[entryIdx]=key;
    entryIdx++;
  }
  mVoicemailProviders.setEntries(entries);
  mVoicemailProviders.setEntryValues(values);
  updateVMPreferenceWidgets(mVoicemailProviders.getValue());
}","/** 
 * Enumerates existing VM providers and puts their data into the list and populates the preference list objects with their names. In case we are called with ACTION_ADD_VOICEMAIL intent the intent may have an extra string called IGNORE_PROVIDER_EXTRA with ""package.activityName"" of the provider which should be hidden when we bring up the list of possible VM providers to choose. This allows a provider which is being disabled (e.g. GV user logging out) to force the user to pick some other provider.
 */
private void initVoiceMailProviders(){
  String providerToIgnore=null;
  if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL)) {
    providerToIgnore=getIntent().getStringExtra(IGNORE_PROVIDER_EXTRA);
  }
  mVMProvidersData.clear();
  final String myCarrier=getString(R.string.voicemail_default);
  mVMProvidersData.put(""String_Node_Str"",new VoiceMailProvider(myCarrier,null));
  PackageManager pm=getPackageManager();
  Intent intent=new Intent();
  intent.setAction(ACTION_CONFIGURE_VOICEMAIL);
  List<ResolveInfo> resolveInfos=pm.queryIntentActivities(intent,0);
  int len=resolveInfos.size() + 1;
  for (int i=0; i < resolveInfos.size(); i++) {
    final ResolveInfo ri=resolveInfos.get(i);
    final ActivityInfo currentActivityInfo=ri.activityInfo;
    final String key=makeKeyForActivity(currentActivityInfo);
    if (key.equals(providerToIgnore)) {
      len--;
      continue;
    }
    final String nameForDisplay=ri.loadLabel(pm).toString();
    Intent providerIntent=new Intent();
    providerIntent.setAction(ACTION_CONFIGURE_VOICEMAIL);
    providerIntent.setClassName(currentActivityInfo.packageName,currentActivityInfo.name);
    mVMProvidersData.put(key,new VoiceMailProvider(nameForDisplay,providerIntent));
  }
  String[] entries=new String[len];
  String[] values=new String[len];
  entries[0]=myCarrier;
  values[0]=""String_Node_Str"";
  int entryIdx=1;
  for (int i=0; i < resolveInfos.size(); i++) {
    final String key=makeKeyForActivity(resolveInfos.get(i).activityInfo);
    if (!mVMProvidersData.containsKey(key)) {
      continue;
    }
    entries[entryIdx]=mVMProvidersData.get(key).name;
    values[entryIdx]=key;
    entryIdx++;
  }
  mVoicemailProviders.setEntries(entries);
  mVoicemailProviders.setEntryValues(values);
  updateVMPreferenceWidgets(mVoicemailProviders.getValue());
  mPerProviderSavedVMNumbers=this.getApplicationContext().getSharedPreferences(VM_NUMBERS_SHARED_PREFERENCES_NAME,MODE_PRIVATE);
}",0.9581589958158996
184831,"/** 
 * Updates the ""on hold"" box in the ""other call"" info area (ie. the stuff in the otherCallOnHoldInfo block) based on the specified Call. Or, clear out the ""on hold"" box if the specified call is null or idle.
 */
private void displayOnHoldCallStatus(Phone phone,Call call){
  if (DBG)   log(""String_Node_Str"" + call + ""String_Node_Str"");
  if ((call == null) || (PhoneApp.getInstance().isOtaCallInActiveState())) {
    mOtherCallOnHoldInfoArea.setVisibility(View.GONE);
    return;
  }
  String name=null;
  Call.State state=call.getState();
switch (state) {
case HOLDING:
    if (PhoneUtils.isConferenceCall(call)) {
      if (DBG)       log(""String_Node_Str"");
      name=getContext().getString(R.string.confCall);
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),call,this,mOtherCallOnHoldName);
      name=PhoneUtils.getCompactNameFromCallerInfo(info.currentInfo,getContext());
    }
  mOtherCallOnHoldName.setText(name);
mOtherCallOnHoldName.setTextColor(mTextColorOnHold);
mOtherCallOnHoldStatus.setTextColor(mTextColorOnHold);
mOtherCallOnHoldInfoArea.setVisibility(View.VISIBLE);
break;
case ACTIVE:
if (mApplication.phone.getPhoneName().equals(""String_Node_Str"")) {
List<Connection> connections=call.getConnections();
if (connections.size() > 2) {
name=getContext().getString(R.string.card_title_in_call);
}
 else {
Connection conn=call.getEarliestConnection();
PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),conn,this,mOtherCallOnHoldName);
name=PhoneUtils.getCompactNameFromCallerInfo(info.currentInfo,getContext());
}
mOtherCallOnHoldName.setText(name);
mOtherCallOnHoldName.setTextColor(mTextColorOnHold);
mOtherCallOnHoldStatus.setTextColor(mTextColorOnHold);
mOtherCallOnHoldInfoArea.setVisibility(View.VISIBLE);
}
break;
default :
mOtherCallOnHoldInfoArea.setVisibility(View.GONE);
break;
}
}","/** 
 * Updates the ""on hold"" box in the ""other call"" info area (ie. the stuff in the otherCallOnHoldInfo block) based on the specified Call. Or, clear out the ""on hold"" box if the specified call is null or idle.
 */
private void displayOnHoldCallStatus(Phone phone,Call call){
  if (DBG)   log(""String_Node_Str"" + call + ""String_Node_Str"");
  if ((call == null) || (PhoneApp.getInstance().isOtaCallInActiveState())) {
    mOtherCallOnHoldInfoArea.setVisibility(View.GONE);
    return;
  }
  String name=null;
  Call.State state=call.getState();
switch (state) {
case HOLDING:
    if (PhoneUtils.isConferenceCall(call)) {
      if (DBG)       log(""String_Node_Str"");
      name=getContext().getString(R.string.confCall);
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),call,this,mOtherCallOnHoldName);
      name=PhoneUtils.getCompactNameFromCallerInfo(info.currentInfo,getContext());
    }
  mOtherCallOnHoldName.setText(name);
mOtherCallOnHoldName.setTextColor(mTextColorOnHold);
mOtherCallOnHoldStatus.setTextColor(mTextColorOnHold);
mOtherCallOnHoldInfoArea.setVisibility(View.VISIBLE);
break;
case ACTIVE:
if (mApplication.phone.getPhoneName().equals(""String_Node_Str"")) {
List<Connection> connections=call.getConnections();
if (connections.size() > 2) {
name=getContext().getString(R.string.card_title_in_call);
}
 else {
Connection conn=call.getEarliestConnection();
PhoneUtils.CallerInfoToken infoToken=PhoneUtils.startGetCallerInfo(getContext(),conn,this,mOtherCallOnHoldName);
CallerInfo info=infoToken.currentInfo;
name=PhoneUtils.getCompactNameFromCallerInfo(info,getContext());
if (info != null && info.numberPresentation != Connection.PRESENTATION_ALLOWED) {
name=getPresentationString(info.numberPresentation);
}
}
mOtherCallOnHoldName.setText(name);
mOtherCallOnHoldName.setTextColor(mTextColorOnHold);
mOtherCallOnHoldStatus.setTextColor(mTextColorOnHold);
mOtherCallOnHoldInfoArea.setVisibility(View.VISIBLE);
}
break;
default :
mOtherCallOnHoldInfoArea.setVisibility(View.GONE);
break;
}
}",0.9451748945671048
184832,"/** 
 * Helper function used to show a missed call notification.
 */
private void showMissedCallNotification(Connection c,final long date){
  PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(mApplication,c,this,Long.valueOf(date));
  if (info != null) {
    if (VDBG)     log(""String_Node_Str"");
    if (info.isFinal) {
      CallerInfo ci=info.currentInfo;
      NotificationMgr.getDefault().notifyMissedCall(ci.name,ci.phoneNumber,ci.phoneLabel,date);
    }
  }
 else {
    Log.w(LOG_TAG,""String_Node_Str"" + c);
  }
}","/** 
 * Helper function used to show a missed call notification.
 */
private void showMissedCallNotification(Connection c,final long date){
  PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(mApplication,c,this,Long.valueOf(date));
  if (info != null) {
    if (VDBG)     log(""String_Node_Str"");
    if (info.isFinal) {
      CallerInfo ci=info.currentInfo;
      String name=ci.name;
      String number=ci.phoneNumber;
      if (ci.numberPresentation == Connection.PRESENTATION_RESTRICTED) {
        name=mPhone.getContext().getString(R.string.private_num);
      }
 else       if (ci.numberPresentation != Connection.PRESENTATION_ALLOWED) {
        name=mPhone.getContext().getString(R.string.unknown);
      }
 else {
        number=PhoneUtils.modifyForSpecialCnapCases(mPhone.getContext(),ci,number,ci.numberPresentation);
      }
      NotificationMgr.getDefault().notifyMissedCall(name,number,ci.phoneLabel,date);
    }
  }
 else {
    Log.w(LOG_TAG,""String_Node_Str"" + c);
  }
}",0.6727629000653168
184833,"public void run(){
  Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
  if (DBG)   log(""String_Node_Str"");
}","public void run(){
  Calls.addCall(ci,mApplication,logNumber,newPresentation,callLogType,date,(int)duration / 1000);
  if (DBG)   log(""String_Node_Str"");
}",0.9671052631578948
184834,"/** 
 * Performs Call logging based on Timeout or Ignore Call Waiting Call for CDMA, and finally calls Hangup on the Call Waiting connection.
 */
void onCdmaCallWaitingReject(){
  final Call ringingCall=mPhone.getRingingCall();
  if (ringingCall.getState() == Call.State.WAITING) {
    Connection c=ringingCall.getLatestConnection();
    if (c != null) {
      final String number=c.getAddress();
      final int presentation=c.getNumberPresentation();
      final long date=c.getCreateTime();
      final long duration=c.getDurationMillis();
      final int callLogType=mCallWaitingTimeOut ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE;
      Object o=c.getUserData();
      final CallerInfo ci;
      if ((o == null) || (o instanceof CallerInfo)) {
        ci=(CallerInfo)o;
      }
 else {
        ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
      }
      Thread t=new Thread(){
        public void run(){
          Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
          if (DBG)           log(""String_Node_Str"");
        }
      }
;
      t.start();
      if (callLogType == CallLog.Calls.MISSED_TYPE) {
        showMissedCallNotification(c,date);
      }
 else {
        removeMessages(CALLWAITING_CALLERINFO_DISPLAY_DONE);
      }
      PhoneUtils.hangup(c);
    }
    mCallWaitingTimeOut=false;
  }
}","/** 
 * Performs Call logging based on Timeout or Ignore Call Waiting Call for CDMA, and finally calls Hangup on the Call Waiting connection.
 */
void onCdmaCallWaitingReject(){
  final Call ringingCall=mPhone.getRingingCall();
  if (ringingCall.getState() == Call.State.WAITING) {
    Connection c=ringingCall.getLatestConnection();
    if (c != null) {
      String number=c.getAddress();
      int presentation=c.getNumberPresentation();
      final long date=c.getCreateTime();
      final long duration=c.getDurationMillis();
      final int callLogType=mCallWaitingTimeOut ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE;
      Object o=c.getUserData();
      final CallerInfo ci;
      if ((o == null) || (o instanceof CallerInfo)) {
        ci=(CallerInfo)o;
      }
 else {
        ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
      }
      final String logNumber=PhoneUtils.modifyForSpecialCnapCases(mPhone.getContext(),ci,number,presentation);
      final int newPresentation=(ci != null) ? ci.numberPresentation : presentation;
      if (DBG)       log(""String_Node_Str"" + logNumber + ""String_Node_Str""+ newPresentation);
      Thread t=new Thread(){
        public void run(){
          Calls.addCall(ci,mApplication,logNumber,newPresentation,callLogType,date,(int)duration / 1000);
          if (DBG)           log(""String_Node_Str"");
        }
      }
;
      t.start();
      if (callLogType == CallLog.Calls.MISSED_TYPE) {
        showMissedCallNotification(c,date);
      }
 else {
        removeMessages(CALLWAITING_CALLERINFO_DISPLAY_DONE);
      }
      PhoneUtils.hangup(c);
    }
    mCallWaitingTimeOut=false;
  }
}",0.8966887417218543
184835,"/** 
 * place a temporary callerinfo object in the hands of the caller and notify caller when the actual query is done.
 */
static CallerInfoToken startGetCallerInfo(Context context,Connection c,CallerInfoAsyncQuery.OnQueryCompleteListener listener,Object cookie){
  CallerInfoToken cit;
  if (c == null) {
    cit=new CallerInfoToken();
    cit.asyncQuery=null;
    return cit;
  }
  Object userDataObject=c.getUserData();
  if (userDataObject instanceof Uri) {
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,(Uri)userDataObject,sCallerInfoQueryListener,c);
    cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
    cit.isFinal=false;
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + userDataObject);
  }
 else   if (userDataObject == null) {
    String number=c.getAddress();
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    if (DBG)     log(""String_Node_Str"" + number);
    if (!TextUtils.isEmpty(number)) {
      cit.currentInfo.cnapName=c.getCnapName();
      cit.currentInfo.name=cit.currentInfo.cnapName;
      cit.currentInfo.numberPresentation=c.getNumberPresentation();
      cit.currentInfo.namePresentation=c.getCnapNamePresentation();
      if (DBG)       log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
      number=modifyForSpecialCnapCases(context,cit.currentInfo,number,cit.currentInfo.numberPresentation);
      cit.currentInfo.phoneNumber=number;
      if (cit.currentInfo.numberPresentation != Connection.PRESENTATION_ALLOWED) {
        cit.isFinal=true;
      }
 else {
        cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,number,sCallerInfoQueryListener,c);
        cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
        cit.isFinal=false;
      }
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      cit.isFinal=true;
    }
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + number);
  }
 else   if (userDataObject instanceof CallerInfoToken) {
    cit=(CallerInfoToken)userDataObject;
    if (cit.asyncQuery != null) {
      cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
      if (DBG)       log(""String_Node_Str"" + listener.getClass().toString());
    }
 else {
      String updatedNumber=c.getAddress();
      if (DBG)       log(""String_Node_Str"" + updatedNumber);
      if (!TextUtils.isEmpty(updatedNumber)) {
        cit.currentInfo.phoneNumber=updatedNumber;
        cit.currentInfo.cnapName=c.getCnapName();
        cit.currentInfo.name=cit.currentInfo.cnapName;
        cit.currentInfo.numberPresentation=c.getNumberPresentation();
        cit.currentInfo.namePresentation=c.getCnapNamePresentation();
        if (DBG)         log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
        if (cit.currentInfo.numberPresentation != Connection.PRESENTATION_ALLOWED) {
          cit.isFinal=true;
        }
 else {
          cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,updatedNumber,sCallerInfoQueryListener,c);
          cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
          cit.isFinal=false;
        }
      }
 else {
        if (DBG)         log(""String_Node_Str"");
        if (cit.currentInfo == null) {
          cit.currentInfo=new CallerInfo();
        }
        cit.isFinal=true;
      }
    }
  }
 else {
    cit=new CallerInfoToken();
    cit.currentInfo=(CallerInfo)userDataObject;
    cit.asyncQuery=null;
    cit.isFinal=true;
    if (DBG)     log(""String_Node_Str"");
  }
  return cit;
}","/** 
 * place a temporary callerinfo object in the hands of the caller and notify caller when the actual query is done.
 */
static CallerInfoToken startGetCallerInfo(Context context,Connection c,CallerInfoAsyncQuery.OnQueryCompleteListener listener,Object cookie){
  CallerInfoToken cit;
  if (c == null) {
    cit=new CallerInfoToken();
    cit.asyncQuery=null;
    return cit;
  }
  Object userDataObject=c.getUserData();
  if (userDataObject instanceof Uri) {
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,(Uri)userDataObject,sCallerInfoQueryListener,c);
    cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
    cit.isFinal=false;
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + userDataObject);
  }
 else   if (userDataObject == null) {
    String number=c.getAddress();
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    cit.currentInfo.cnapName=c.getCnapName();
    cit.currentInfo.name=cit.currentInfo.cnapName;
    cit.currentInfo.numberPresentation=c.getNumberPresentation();
    cit.currentInfo.namePresentation=c.getCnapNamePresentation();
    if (DBG)     log(""String_Node_Str"" + number);
    if (DBG)     log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
    if (!TextUtils.isEmpty(number)) {
      number=modifyForSpecialCnapCases(context,cit.currentInfo,number,cit.currentInfo.numberPresentation);
      cit.currentInfo.phoneNumber=number;
      if (cit.currentInfo.numberPresentation != Connection.PRESENTATION_ALLOWED) {
        cit.isFinal=true;
      }
 else {
        cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,number,sCallerInfoQueryListener,c);
        cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
        cit.isFinal=false;
      }
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      cit.isFinal=true;
    }
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + number);
  }
 else   if (userDataObject instanceof CallerInfoToken) {
    cit=(CallerInfoToken)userDataObject;
    if (cit.asyncQuery != null) {
      cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
      if (DBG)       log(""String_Node_Str"" + listener.getClass().toString());
    }
 else {
      String updatedNumber=c.getAddress();
      if (DBG)       log(""String_Node_Str"" + updatedNumber);
      if (!TextUtils.isEmpty(updatedNumber)) {
        cit.currentInfo.cnapName=c.getCnapName();
        cit.currentInfo.name=cit.currentInfo.cnapName;
        cit.currentInfo.numberPresentation=c.getNumberPresentation();
        cit.currentInfo.namePresentation=c.getCnapNamePresentation();
        updatedNumber=modifyForSpecialCnapCases(context,cit.currentInfo,updatedNumber,cit.currentInfo.numberPresentation);
        cit.currentInfo.phoneNumber=updatedNumber;
        if (DBG)         log(""String_Node_Str"" + updatedNumber);
        if (DBG)         log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
        if (cit.currentInfo.numberPresentation != Connection.PRESENTATION_ALLOWED) {
          cit.isFinal=true;
        }
 else {
          cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,updatedNumber,sCallerInfoQueryListener,c);
          cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
          cit.isFinal=false;
        }
      }
 else {
        if (DBG)         log(""String_Node_Str"");
        if (cit.currentInfo == null) {
          cit.currentInfo=new CallerInfo();
        }
        cit.currentInfo.cnapName=c.getCnapName();
        cit.currentInfo.name=cit.currentInfo.cnapName;
        cit.currentInfo.numberPresentation=c.getNumberPresentation();
        cit.currentInfo.namePresentation=c.getCnapNamePresentation();
        if (DBG)         log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
        cit.isFinal=true;
      }
    }
  }
 else {
    cit=new CallerInfoToken();
    cit.currentInfo=(CallerInfo)userDataObject;
    cit.asyncQuery=null;
    cit.isFinal=true;
    if (DBG)     log(""String_Node_Str"");
  }
  return cit;
}",0.8033136688841471
184836,"/** 
 * Handles certain ""corner cases"" for CNAP. When we receive weird phone numbers from the network to indicate different number presentations, convert them to expected number and presentation values within the CallerInfo object.
 * @param number number we use to verify if we are in a corner case
 * @param presentation presentation value used to verify if we are in a corner case
 * @return the new String that should be used for the phone number
 */
static String modifyForSpecialCnapCases(Context context,CallerInfo ci,String number,int presentation){
  if (ci == null || number == null)   return number;
  if (DBG)   log(""String_Node_Str"" + number + ""String_Node_Str""+ presentation);
  if (number.equals(context.getString(R.string.absent_num))) {
    number=context.getString(R.string.unknown);
    ci.numberPresentation=Connection.PRESENTATION_UNKNOWN;
  }
  if (ci.numberPresentation == Connection.PRESENTATION_ALLOWED || ci.numberPresentation != presentation) {
    int cnapSpecialCase=checkCnapSpecialCases(number);
    if (cnapSpecialCase != CNAP_SPECIAL_CASE_NO) {
      if (cnapSpecialCase == Connection.PRESENTATION_RESTRICTED) {
        number=context.getString(R.string.private_num);
      }
 else       if (cnapSpecialCase == Connection.PRESENTATION_UNKNOWN) {
        number=context.getString(R.string.unknown);
      }
      if (DBG)       log(""String_Node_Str"" + number + ""String_Node_Str""+ cnapSpecialCase);
      ci.numberPresentation=cnapSpecialCase;
    }
  }
  if (DBG)   log(""String_Node_Str"" + number);
  return number;
}","/** 
 * Handles certain ""corner cases"" for CNAP. When we receive weird phone numbers from the network to indicate different number presentations, convert them to expected number and presentation values within the CallerInfo object.
 * @param number number we use to verify if we are in a corner case
 * @param presentation presentation value used to verify if we are in a corner case
 * @return the new String that should be used for the phone number
 */
static String modifyForSpecialCnapCases(Context context,CallerInfo ci,String number,int presentation){
  if (ci == null || number == null)   return number;
  if (DBG)   log(""String_Node_Str"" + number + ""String_Node_Str""+ presentation);
  if (number.equals(context.getString(R.string.absent_num)) && presentation == Connection.PRESENTATION_ALLOWED) {
    number=context.getString(R.string.unknown);
    ci.numberPresentation=Connection.PRESENTATION_UNKNOWN;
  }
  if (ci.numberPresentation == Connection.PRESENTATION_ALLOWED || (ci.numberPresentation != presentation && presentation == Connection.PRESENTATION_ALLOWED)) {
    int cnapSpecialCase=checkCnapSpecialCases(number);
    if (cnapSpecialCase != CNAP_SPECIAL_CASE_NO) {
      if (cnapSpecialCase == Connection.PRESENTATION_RESTRICTED) {
        number=context.getString(R.string.private_num);
      }
 else       if (cnapSpecialCase == Connection.PRESENTATION_UNKNOWN) {
        number=context.getString(R.string.unknown);
      }
      if (DBG)       log(""String_Node_Str"" + number + ""String_Node_Str""+ cnapSpecialCase);
      ci.numberPresentation=cnapSpecialCase;
    }
  }
  if (DBG)   log(""String_Node_Str"" + number);
  return number;
}",0.7745159275452842
184837,"/** 
 * Returns a single ""name"" for the specified given a CallerInfo object. If the name is null, return defaultString as the default value, usually context.getString(R.string.unknown).
 */
static String getCompactNameFromCallerInfo(CallerInfo ci,Context context){
  if (DBG)   log(""String_Node_Str"" + ci);
  String compactName=null;
  if (ci != null) {
    compactName=ci.name;
    if ((compactName == null) || (TextUtils.isEmpty(compactName))) {
      compactName=ci.phoneNumber;
    }
  }
  if ((compactName == null) || (TextUtils.isEmpty(compactName))) {
    compactName=context.getString(R.string.unknown);
  }
  return compactName;
}","/** 
 * Returns a single ""name"" for the specified given a CallerInfo object. If the name is null, return defaultString as the default value, usually context.getString(R.string.unknown).
 */
static String getCompactNameFromCallerInfo(CallerInfo ci,Context context){
  if (DBG)   log(""String_Node_Str"" + ci);
  String compactName=null;
  if (ci != null) {
    compactName=ci.name;
    if ((compactName == null) || (TextUtils.isEmpty(compactName))) {
      compactName=ci.phoneNumber;
    }
    compactName=modifyForSpecialCnapCases(context,ci,compactName,ci.numberPresentation);
  }
  if ((compactName == null) || (TextUtils.isEmpty(compactName))) {
    if (ci != null && ci.numberPresentation == Connection.PRESENTATION_RESTRICTED) {
      compactName=context.getString(R.string.private_num);
    }
 else     if (ci != null && ci.numberPresentation == Connection.PRESENTATION_PAYPHONE) {
      compactName=context.getString(R.string.payphone);
    }
 else {
      compactName=context.getString(R.string.unknown);
    }
  }
  if (DBG)   log(""String_Node_Str"" + compactName);
  return compactName;
}",0.715850144092219
184838,"/** 
 * Updates the ""on hold"" box in the ""other call"" info area (ie. the stuff in the otherCallOnHoldInfo block) based on the specified Call. Or, clear out the ""on hold"" box if the specified call is null or idle.
 */
private void displayOnHoldCallStatus(Phone phone,Call call){
  if (DBG)   log(""String_Node_Str"" + call + ""String_Node_Str"");
  if ((call == null) || (PhoneApp.getInstance().isOtaCallInActiveState())) {
    mOtherCallOnHoldInfoArea.setVisibility(View.GONE);
    return;
  }
  String name=null;
  Call.State state=call.getState();
switch (state) {
case HOLDING:
    if (PhoneUtils.isConferenceCall(call)) {
      if (DBG)       log(""String_Node_Str"");
      name=getContext().getString(R.string.confCall);
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),call,this,mOtherCallOnHoldName);
      name=PhoneUtils.getCompactNameFromCallerInfo(info.currentInfo,getContext());
    }
  mOtherCallOnHoldName.setText(name);
mOtherCallOnHoldName.setTextColor(mTextColorOnHold);
mOtherCallOnHoldStatus.setTextColor(mTextColorOnHold);
mOtherCallOnHoldInfoArea.setVisibility(View.VISIBLE);
break;
case ACTIVE:
if (mApplication.phone.getPhoneName().equals(""String_Node_Str"")) {
List<Connection> connections=call.getConnections();
if (connections.size() > 2) {
name=getContext().getString(R.string.card_title_in_call);
}
 else {
Connection conn=call.getEarliestConnection();
PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),conn,this,mOtherCallOnHoldName);
name=PhoneUtils.getCompactNameFromCallerInfo(info.currentInfo,getContext());
}
mOtherCallOnHoldName.setText(name);
mOtherCallOnHoldName.setTextColor(mTextColorOnHold);
mOtherCallOnHoldStatus.setTextColor(mTextColorOnHold);
mOtherCallOnHoldInfoArea.setVisibility(View.VISIBLE);
}
break;
default :
mOtherCallOnHoldInfoArea.setVisibility(View.GONE);
break;
}
}","/** 
 * Updates the ""on hold"" box in the ""other call"" info area (ie. the stuff in the otherCallOnHoldInfo block) based on the specified Call. Or, clear out the ""on hold"" box if the specified call is null or idle.
 */
private void displayOnHoldCallStatus(Phone phone,Call call){
  if (DBG)   log(""String_Node_Str"" + call + ""String_Node_Str"");
  if ((call == null) || (PhoneApp.getInstance().isOtaCallInActiveState())) {
    mOtherCallOnHoldInfoArea.setVisibility(View.GONE);
    return;
  }
  String name=null;
  Call.State state=call.getState();
switch (state) {
case HOLDING:
    if (PhoneUtils.isConferenceCall(call)) {
      if (DBG)       log(""String_Node_Str"");
      name=getContext().getString(R.string.confCall);
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),call,this,mOtherCallOnHoldName);
      name=PhoneUtils.getCompactNameFromCallerInfo(info.currentInfo,getContext());
    }
  mOtherCallOnHoldName.setText(name);
mOtherCallOnHoldName.setTextColor(mTextColorOnHold);
mOtherCallOnHoldStatus.setTextColor(mTextColorOnHold);
mOtherCallOnHoldInfoArea.setVisibility(View.VISIBLE);
break;
case ACTIVE:
if (mApplication.phone.getPhoneName().equals(""String_Node_Str"")) {
List<Connection> connections=call.getConnections();
if (connections.size() > 2) {
name=getContext().getString(R.string.card_title_in_call);
}
 else {
Connection conn=call.getEarliestConnection();
PhoneUtils.CallerInfoToken infoToken=PhoneUtils.startGetCallerInfo(getContext(),conn,this,mOtherCallOnHoldName);
CallerInfo info=infoToken.currentInfo;
name=PhoneUtils.getCompactNameFromCallerInfo(info,getContext());
if (info != null && info.numberPresentation != Connection.PRESENTATION_ALLOWED) {
name=getPresentationString(info.numberPresentation);
}
}
mOtherCallOnHoldName.setText(name);
mOtherCallOnHoldName.setTextColor(mTextColorOnHold);
mOtherCallOnHoldStatus.setTextColor(mTextColorOnHold);
mOtherCallOnHoldInfoArea.setVisibility(View.VISIBLE);
}
break;
default :
mOtherCallOnHoldInfoArea.setVisibility(View.GONE);
break;
}
}",0.9451748945671048
184839,"/** 
 * Helper function used to show a missed call notification.
 */
private void showMissedCallNotification(Connection c,final long date){
  PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(mApplication,c,this,Long.valueOf(date));
  if (info != null) {
    if (VDBG)     log(""String_Node_Str"");
    if (info.isFinal) {
      CallerInfo ci=info.currentInfo;
      NotificationMgr.getDefault().notifyMissedCall(ci.name,ci.phoneNumber,ci.phoneLabel,date);
    }
  }
 else {
    Log.w(LOG_TAG,""String_Node_Str"" + c);
  }
}","/** 
 * Helper function used to show a missed call notification.
 */
private void showMissedCallNotification(Connection c,final long date){
  PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(mApplication,c,this,Long.valueOf(date));
  if (info != null) {
    if (VDBG)     log(""String_Node_Str"");
    if (info.isFinal) {
      CallerInfo ci=info.currentInfo;
      String name=ci.name;
      String number=ci.phoneNumber;
      if (ci.numberPresentation == Connection.PRESENTATION_RESTRICTED) {
        name=mPhone.getContext().getString(R.string.private_num);
      }
 else       if (ci.numberPresentation != Connection.PRESENTATION_ALLOWED) {
        name=mPhone.getContext().getString(R.string.unknown);
      }
 else {
        number=PhoneUtils.modifyForSpecialCnapCases(mPhone.getContext(),ci,number,ci.numberPresentation);
      }
      NotificationMgr.getDefault().notifyMissedCall(name,number,ci.phoneLabel,date);
    }
  }
 else {
    Log.w(LOG_TAG,""String_Node_Str"" + c);
  }
}",0.6727629000653168
184840,"public void run(){
  Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
  if (DBG)   log(""String_Node_Str"");
}","public void run(){
  Calls.addCall(ci,mApplication,logNumber,newPresentation,callLogType,date,(int)duration / 1000);
  if (DBG)   log(""String_Node_Str"");
}",0.9671052631578948
184841,"/** 
 * Performs Call logging based on Timeout or Ignore Call Waiting Call for CDMA, and finally calls Hangup on the Call Waiting connection.
 */
void onCdmaCallWaitingReject(){
  final Call ringingCall=mPhone.getRingingCall();
  if (ringingCall.getState() == Call.State.WAITING) {
    Connection c=ringingCall.getLatestConnection();
    if (c != null) {
      final String number=c.getAddress();
      final int presentation=c.getNumberPresentation();
      final long date=c.getCreateTime();
      final long duration=c.getDurationMillis();
      final int callLogType=mCallWaitingTimeOut ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE;
      Object o=c.getUserData();
      final CallerInfo ci;
      if ((o == null) || (o instanceof CallerInfo)) {
        ci=(CallerInfo)o;
      }
 else {
        ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
      }
      Thread t=new Thread(){
        public void run(){
          Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
          if (DBG)           log(""String_Node_Str"");
        }
      }
;
      t.start();
      if (callLogType == CallLog.Calls.MISSED_TYPE) {
        showMissedCallNotification(c,date);
      }
 else {
        removeMessages(CALLWAITING_CALLERINFO_DISPLAY_DONE);
      }
      PhoneUtils.hangup(c);
    }
    mCallWaitingTimeOut=false;
  }
}","/** 
 * Performs Call logging based on Timeout or Ignore Call Waiting Call for CDMA, and finally calls Hangup on the Call Waiting connection.
 */
void onCdmaCallWaitingReject(){
  final Call ringingCall=mPhone.getRingingCall();
  if (ringingCall.getState() == Call.State.WAITING) {
    Connection c=ringingCall.getLatestConnection();
    if (c != null) {
      String number=c.getAddress();
      int presentation=c.getNumberPresentation();
      final long date=c.getCreateTime();
      final long duration=c.getDurationMillis();
      final int callLogType=mCallWaitingTimeOut ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE;
      Object o=c.getUserData();
      final CallerInfo ci;
      if ((o == null) || (o instanceof CallerInfo)) {
        ci=(CallerInfo)o;
      }
 else {
        ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
      }
      final String logNumber=PhoneUtils.modifyForSpecialCnapCases(mPhone.getContext(),ci,number,presentation);
      final int newPresentation=(ci != null) ? ci.numberPresentation : presentation;
      if (DBG)       log(""String_Node_Str"" + logNumber + ""String_Node_Str""+ newPresentation);
      Thread t=new Thread(){
        public void run(){
          Calls.addCall(ci,mApplication,logNumber,newPresentation,callLogType,date,(int)duration / 1000);
          if (DBG)           log(""String_Node_Str"");
        }
      }
;
      t.start();
      if (callLogType == CallLog.Calls.MISSED_TYPE) {
        showMissedCallNotification(c,date);
      }
 else {
        removeMessages(CALLWAITING_CALLERINFO_DISPLAY_DONE);
      }
      PhoneUtils.hangup(c);
    }
    mCallWaitingTimeOut=false;
  }
}",0.8966887417218543
184842,"/** 
 * place a temporary callerinfo object in the hands of the caller and notify caller when the actual query is done.
 */
static CallerInfoToken startGetCallerInfo(Context context,Connection c,CallerInfoAsyncQuery.OnQueryCompleteListener listener,Object cookie){
  CallerInfoToken cit;
  if (c == null) {
    cit=new CallerInfoToken();
    cit.asyncQuery=null;
    return cit;
  }
  Object userDataObject=c.getUserData();
  if (userDataObject instanceof Uri) {
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,(Uri)userDataObject,sCallerInfoQueryListener,c);
    cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
    cit.isFinal=false;
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + userDataObject);
  }
 else   if (userDataObject == null) {
    String number=c.getAddress();
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    if (DBG)     log(""String_Node_Str"" + number);
    if (!TextUtils.isEmpty(number)) {
      cit.currentInfo.cnapName=c.getCnapName();
      cit.currentInfo.name=cit.currentInfo.cnapName;
      cit.currentInfo.numberPresentation=c.getNumberPresentation();
      cit.currentInfo.namePresentation=c.getCnapNamePresentation();
      if (DBG)       log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
      number=modifyForSpecialCnapCases(context,cit.currentInfo,number,cit.currentInfo.numberPresentation);
      cit.currentInfo.phoneNumber=number;
      if (cit.currentInfo.numberPresentation != Connection.PRESENTATION_ALLOWED) {
        cit.isFinal=true;
      }
 else {
        cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,number,sCallerInfoQueryListener,c);
        cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
        cit.isFinal=false;
      }
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      cit.isFinal=true;
    }
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + number);
  }
 else   if (userDataObject instanceof CallerInfoToken) {
    cit=(CallerInfoToken)userDataObject;
    if (cit.asyncQuery != null) {
      cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
      if (DBG)       log(""String_Node_Str"" + listener.getClass().toString());
    }
 else {
      String updatedNumber=c.getAddress();
      if (DBG)       log(""String_Node_Str"" + updatedNumber);
      if (!TextUtils.isEmpty(updatedNumber)) {
        cit.currentInfo.phoneNumber=updatedNumber;
        cit.currentInfo.cnapName=c.getCnapName();
        cit.currentInfo.name=cit.currentInfo.cnapName;
        cit.currentInfo.numberPresentation=c.getNumberPresentation();
        cit.currentInfo.namePresentation=c.getCnapNamePresentation();
        if (DBG)         log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
        if (cit.currentInfo.numberPresentation != Connection.PRESENTATION_ALLOWED) {
          cit.isFinal=true;
        }
 else {
          cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,updatedNumber,sCallerInfoQueryListener,c);
          cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
          cit.isFinal=false;
        }
      }
 else {
        if (DBG)         log(""String_Node_Str"");
        if (cit.currentInfo == null) {
          cit.currentInfo=new CallerInfo();
        }
        cit.isFinal=true;
      }
    }
  }
 else {
    cit=new CallerInfoToken();
    cit.currentInfo=(CallerInfo)userDataObject;
    cit.asyncQuery=null;
    cit.isFinal=true;
    if (DBG)     log(""String_Node_Str"");
  }
  return cit;
}","/** 
 * place a temporary callerinfo object in the hands of the caller and notify caller when the actual query is done.
 */
static CallerInfoToken startGetCallerInfo(Context context,Connection c,CallerInfoAsyncQuery.OnQueryCompleteListener listener,Object cookie){
  CallerInfoToken cit;
  if (c == null) {
    cit=new CallerInfoToken();
    cit.asyncQuery=null;
    return cit;
  }
  Object userDataObject=c.getUserData();
  if (userDataObject instanceof Uri) {
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,(Uri)userDataObject,sCallerInfoQueryListener,c);
    cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
    cit.isFinal=false;
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + userDataObject);
  }
 else   if (userDataObject == null) {
    String number=c.getAddress();
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    cit.currentInfo.cnapName=c.getCnapName();
    cit.currentInfo.name=cit.currentInfo.cnapName;
    cit.currentInfo.numberPresentation=c.getNumberPresentation();
    cit.currentInfo.namePresentation=c.getCnapNamePresentation();
    if (DBG)     log(""String_Node_Str"" + number);
    if (DBG)     log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
    if (!TextUtils.isEmpty(number)) {
      number=modifyForSpecialCnapCases(context,cit.currentInfo,number,cit.currentInfo.numberPresentation);
      cit.currentInfo.phoneNumber=number;
      if (cit.currentInfo.numberPresentation != Connection.PRESENTATION_ALLOWED) {
        cit.isFinal=true;
      }
 else {
        cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,number,sCallerInfoQueryListener,c);
        cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
        cit.isFinal=false;
      }
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      cit.isFinal=true;
    }
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + number);
  }
 else   if (userDataObject instanceof CallerInfoToken) {
    cit=(CallerInfoToken)userDataObject;
    if (cit.asyncQuery != null) {
      cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
      if (DBG)       log(""String_Node_Str"" + listener.getClass().toString());
    }
 else {
      String updatedNumber=c.getAddress();
      if (DBG)       log(""String_Node_Str"" + updatedNumber);
      if (!TextUtils.isEmpty(updatedNumber)) {
        cit.currentInfo.cnapName=c.getCnapName();
        cit.currentInfo.name=cit.currentInfo.cnapName;
        cit.currentInfo.numberPresentation=c.getNumberPresentation();
        cit.currentInfo.namePresentation=c.getCnapNamePresentation();
        updatedNumber=modifyForSpecialCnapCases(context,cit.currentInfo,updatedNumber,cit.currentInfo.numberPresentation);
        cit.currentInfo.phoneNumber=updatedNumber;
        if (DBG)         log(""String_Node_Str"" + updatedNumber);
        if (DBG)         log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
        if (cit.currentInfo.numberPresentation != Connection.PRESENTATION_ALLOWED) {
          cit.isFinal=true;
        }
 else {
          cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,updatedNumber,sCallerInfoQueryListener,c);
          cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
          cit.isFinal=false;
        }
      }
 else {
        if (DBG)         log(""String_Node_Str"");
        if (cit.currentInfo == null) {
          cit.currentInfo=new CallerInfo();
        }
        cit.currentInfo.cnapName=c.getCnapName();
        cit.currentInfo.name=cit.currentInfo.cnapName;
        cit.currentInfo.numberPresentation=c.getNumberPresentation();
        cit.currentInfo.namePresentation=c.getCnapNamePresentation();
        if (DBG)         log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
        cit.isFinal=true;
      }
    }
  }
 else {
    cit=new CallerInfoToken();
    cit.currentInfo=(CallerInfo)userDataObject;
    cit.asyncQuery=null;
    cit.isFinal=true;
    if (DBG)     log(""String_Node_Str"");
  }
  return cit;
}",0.8033136688841471
184843,"/** 
 * Handles certain ""corner cases"" for CNAP. When we receive weird phone numbers from the network to indicate different number presentations, convert them to expected number and presentation values within the CallerInfo object.
 * @param number number we use to verify if we are in a corner case
 * @param presentation presentation value used to verify if we are in a corner case
 * @return the new String that should be used for the phone number
 */
static String modifyForSpecialCnapCases(Context context,CallerInfo ci,String number,int presentation){
  if (ci == null || number == null)   return number;
  if (DBG)   log(""String_Node_Str"" + number + ""String_Node_Str""+ presentation);
  if (number.equals(context.getString(R.string.absent_num))) {
    number=context.getString(R.string.unknown);
    ci.numberPresentation=Connection.PRESENTATION_UNKNOWN;
  }
  if (ci.numberPresentation == Connection.PRESENTATION_ALLOWED || ci.numberPresentation != presentation) {
    int cnapSpecialCase=checkCnapSpecialCases(number);
    if (cnapSpecialCase != CNAP_SPECIAL_CASE_NO) {
      if (cnapSpecialCase == Connection.PRESENTATION_RESTRICTED) {
        number=context.getString(R.string.private_num);
      }
 else       if (cnapSpecialCase == Connection.PRESENTATION_UNKNOWN) {
        number=context.getString(R.string.unknown);
      }
      if (DBG)       log(""String_Node_Str"" + number + ""String_Node_Str""+ cnapSpecialCase);
      ci.numberPresentation=cnapSpecialCase;
    }
  }
  if (DBG)   log(""String_Node_Str"" + number);
  return number;
}","/** 
 * Handles certain ""corner cases"" for CNAP. When we receive weird phone numbers from the network to indicate different number presentations, convert them to expected number and presentation values within the CallerInfo object.
 * @param number number we use to verify if we are in a corner case
 * @param presentation presentation value used to verify if we are in a corner case
 * @return the new String that should be used for the phone number
 */
static String modifyForSpecialCnapCases(Context context,CallerInfo ci,String number,int presentation){
  if (ci == null || number == null)   return number;
  if (DBG)   log(""String_Node_Str"" + number + ""String_Node_Str""+ presentation);
  if (number.equals(context.getString(R.string.absent_num)) && presentation == Connection.PRESENTATION_ALLOWED) {
    number=context.getString(R.string.unknown);
    ci.numberPresentation=Connection.PRESENTATION_UNKNOWN;
  }
  if (ci.numberPresentation == Connection.PRESENTATION_ALLOWED || (ci.numberPresentation != presentation && presentation == Connection.PRESENTATION_ALLOWED)) {
    int cnapSpecialCase=checkCnapSpecialCases(number);
    if (cnapSpecialCase != CNAP_SPECIAL_CASE_NO) {
      if (cnapSpecialCase == Connection.PRESENTATION_RESTRICTED) {
        number=context.getString(R.string.private_num);
      }
 else       if (cnapSpecialCase == Connection.PRESENTATION_UNKNOWN) {
        number=context.getString(R.string.unknown);
      }
      if (DBG)       log(""String_Node_Str"" + number + ""String_Node_Str""+ cnapSpecialCase);
      ci.numberPresentation=cnapSpecialCase;
    }
  }
  if (DBG)   log(""String_Node_Str"" + number);
  return number;
}",0.7745159275452842
184844,"/** 
 * Returns a single ""name"" for the specified given a CallerInfo object. If the name is null, return defaultString as the default value, usually context.getString(R.string.unknown).
 */
static String getCompactNameFromCallerInfo(CallerInfo ci,Context context){
  if (DBG)   log(""String_Node_Str"" + ci);
  String compactName=null;
  if (ci != null) {
    compactName=ci.name;
    if ((compactName == null) || (TextUtils.isEmpty(compactName))) {
      compactName=ci.phoneNumber;
    }
  }
  if ((compactName == null) || (TextUtils.isEmpty(compactName))) {
    compactName=context.getString(R.string.unknown);
  }
  return compactName;
}","/** 
 * Returns a single ""name"" for the specified given a CallerInfo object. If the name is null, return defaultString as the default value, usually context.getString(R.string.unknown).
 */
static String getCompactNameFromCallerInfo(CallerInfo ci,Context context){
  if (DBG)   log(""String_Node_Str"" + ci);
  String compactName=null;
  if (ci != null) {
    compactName=ci.name;
    if ((compactName == null) || (TextUtils.isEmpty(compactName))) {
      compactName=ci.phoneNumber;
    }
    compactName=modifyForSpecialCnapCases(context,ci,compactName,ci.numberPresentation);
  }
  if ((compactName == null) || (TextUtils.isEmpty(compactName))) {
    if (ci != null && ci.numberPresentation == Connection.PRESENTATION_RESTRICTED) {
      compactName=context.getString(R.string.private_num);
    }
 else     if (ci != null && ci.numberPresentation == Connection.PRESENTATION_PAYPHONE) {
      compactName=context.getString(R.string.payphone);
    }
 else {
      compactName=context.getString(R.string.unknown);
    }
  }
  if (DBG)   log(""String_Node_Str"" + compactName);
  return compactName;
}",0.715850144092219
184845,"/** 
 * Saves the new VM number associating it with the currently selected provider if the number is different than the one already stored for this provider. Later on this number will be used when the user switches a provider.
 */
private void maybeSaveNumberForVoicemailProvider(String newVMNumber){
  final String key=mVoicemailProviders.getValue();
  final String curNumber=loadNumberForVoiceMailProvider(key);
  if (newVMNumber.equals(curNumber)) {
    return;
  }
  mPerProviderSavedVMNumbers.edit().putString(key,newVMNumber).commit();
}","/** 
 * Saves the new VM number associating it with the currently selected provider if the number is different than the one already stored for this provider. Later on this number will be used when the user switches a provider.
 */
private void maybeSaveNumberForVoicemailProvider(String newVMNumber){
  if (mVoicemailProviders == null) {
    return;
  }
  final String key=mVoicemailProviders.getValue();
  final String curNumber=loadNumberForVoiceMailProvider(key);
  if (newVMNumber.equals(curNumber)) {
    return;
  }
  mPerProviderSavedVMNumbers.edit().putString(key,newVMNumber).commit();
}",0.9534679543459176
184846,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mPhone=PhoneFactory.getDefaultPhone();
  addPreferencesFromResource(R.xml.call_feature_setting);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)findPreference(BUTTON_VOICEMAIL_KEY);
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mButtonDTMF=(ListPreference)findPreference(BUTTON_DTMF_KEY);
  mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  mButtonHAC=(CheckBoxPreference)findPreference(BUTTON_HAC_KEY);
  mButtonTTY=(ListPreference)findPreference(BUTTON_TTY_KEY);
  mVoicemailProviders=(ListPreference)findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
  mVoicemailProviders.setOnPreferenceChangeListener(this);
  mVoicemailSettings=(PreferenceScreen)findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
  initVoiceMailProviders();
  if (getResources().getBoolean(R.bool.dtmf_type_enabled)) {
    mButtonDTMF.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonDTMF);
    mButtonDTMF=null;
  }
  if (getResources().getBoolean(R.bool.auto_retry_enabled)) {
    mButtonAutoRetry.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonAutoRetry);
    mButtonAutoRetry=null;
  }
  if (getResources().getBoolean(R.bool.hac_enabled)) {
    mButtonHAC.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonHAC);
    mButtonHAC=null;
  }
  if (getResources().getBoolean(R.bool.tty_enabled)) {
    mButtonTTY.setOnPreferenceChangeListener(this);
    ttyHandler=new TTYHandler();
  }
 else {
    prefSet.removePreference(mButtonTTY);
    mButtonTTY=null;
  }
  if (!getResources().getBoolean(R.bool.world_phone)) {
    prefSet.removePreference(prefSet.findPreference(BUTTON_CDMA_OPTIONS));
    prefSet.removePreference(prefSet.findPreference(BUTTON_GSM_UMTS_OPTIONS));
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      prefSet.removePreference(prefSet.findPreference(BUTTON_FDN_KEY));
      addPreferencesFromResource(R.xml.cdma_call_options);
    }
 else {
      addPreferencesFromResource(R.xml.gsm_umts_call_options);
    }
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (icicle == null) {
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL)) {
      if (mVMProvidersData.size() > 1) {
        simulatePreferenceClick(mVoicemailProviders);
      }
 else {
        mSubMenuVoicemailSettings.showPhoneNumberDialog();
      }
    }
  }
  updateVoiceNumberField();
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mPhone=PhoneFactory.getDefaultPhone();
  addPreferencesFromResource(R.xml.call_feature_setting);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)findPreference(BUTTON_VOICEMAIL_KEY);
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mButtonDTMF=(ListPreference)findPreference(BUTTON_DTMF_KEY);
  mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  mButtonHAC=(CheckBoxPreference)findPreference(BUTTON_HAC_KEY);
  mButtonTTY=(ListPreference)findPreference(BUTTON_TTY_KEY);
  mVoicemailProviders=(ListPreference)findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
  if (mVoicemailProviders != null) {
    mVoicemailProviders.setOnPreferenceChangeListener(this);
    mVoicemailSettings=(PreferenceScreen)findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
    initVoiceMailProviders();
  }
  if (getResources().getBoolean(R.bool.dtmf_type_enabled)) {
    mButtonDTMF.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonDTMF);
    mButtonDTMF=null;
  }
  if (getResources().getBoolean(R.bool.auto_retry_enabled)) {
    mButtonAutoRetry.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonAutoRetry);
    mButtonAutoRetry=null;
  }
  if (getResources().getBoolean(R.bool.hac_enabled)) {
    mButtonHAC.setOnPreferenceChangeListener(this);
  }
 else {
    prefSet.removePreference(mButtonHAC);
    mButtonHAC=null;
  }
  if (getResources().getBoolean(R.bool.tty_enabled)) {
    mButtonTTY.setOnPreferenceChangeListener(this);
    ttyHandler=new TTYHandler();
  }
 else {
    prefSet.removePreference(mButtonTTY);
    mButtonTTY=null;
  }
  if (!getResources().getBoolean(R.bool.world_phone)) {
    prefSet.removePreference(prefSet.findPreference(BUTTON_CDMA_OPTIONS));
    prefSet.removePreference(prefSet.findPreference(BUTTON_GSM_UMTS_OPTIONS));
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      prefSet.removePreference(prefSet.findPreference(BUTTON_FDN_KEY));
      addPreferencesFromResource(R.xml.cdma_call_options);
    }
 else {
      addPreferencesFromResource(R.xml.gsm_umts_call_options);
    }
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (icicle == null) {
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL) && mVoicemailProviders != null) {
      if (mVMProvidersData.size() > 1) {
        simulatePreferenceClick(mVoicemailProviders);
      }
 else {
        mSubMenuVoicemailSettings.showPhoneNumberDialog();
      }
    }
  }
  updateVoiceNumberField();
}",0.9868598382749326
184847,"/** 
 * Implemented to support onPreferenceChangeListener to look for preference changes.
 * @param preference is the preference to be changed
 * @param objValue should be the value of the selection, NOT its localizeddisplay value.
 */
public boolean onPreferenceChange(Preference preference,Object objValue){
  if (preference == mButtonDTMF) {
    int index=mButtonDTMF.findIndexOfValue((String)objValue);
    Settings.System.putInt(mPhone.getContext().getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,index);
  }
 else   if (preference == mButtonTTY) {
    handleTTYChange(preference,objValue);
  }
 else   if (preference == mVoicemailProviders) {
    updateVMPreferenceWidgets((String)objValue);
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL)) {
      simulatePreferenceClick(mVoicemailSettings);
    }
  }
  return true;
}","/** 
 * Implemented to support onPreferenceChangeListener to look for preference changes.
 * @param preference is the preference to be changed
 * @param objValue should be the value of the selection, NOT its localizeddisplay value.
 */
public boolean onPreferenceChange(Preference preference,Object objValue){
  if (preference == mButtonDTMF) {
    int index=mButtonDTMF.findIndexOfValue((String)objValue);
    Settings.System.putInt(mPhone.getContext().getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,index);
  }
 else   if (preference == mButtonTTY) {
    handleTTYChange(preference,objValue);
  }
 else   if (preference == mVoicemailProviders) {
    updateVMPreferenceWidgets((String)objValue);
    simulatePreferenceClick(mVoicemailSettings);
  }
  return true;
}",0.9182926829268292
184848,"/** 
 * Resets the audio mode and speaker state when a call ends.
 */
private void resetAudioStateAfterDisconnect(){
  if (VDBG)   log(""String_Node_Str"");
  if (mBluetoothHandsfree != null) {
    mBluetoothHandsfree.audioOff();
  }
  if (PhoneUtils.isSpeakerOn(mPhone.getContext())) {
    PhoneUtils.turnOnSpeaker(mPhone.getContext(),false);
  }
  PhoneUtils.setAudioMode(mPhone.getContext(),AudioManager.MODE_NORMAL);
}","/** 
 * Resets the audio mode and speaker state when a call ends.
 */
private void resetAudioStateAfterDisconnect(){
  if (VDBG)   log(""String_Node_Str"");
  if (mBluetoothHandsfree != null) {
    mBluetoothHandsfree.audioOff();
  }
  if (PhoneUtils.isSpeakerOn(mPhone.getContext())) {
    PhoneUtils.turnOnSpeaker(mPhone.getContext(),false,true);
  }
  PhoneUtils.setAudioMode(mPhone.getContext(),AudioManager.MODE_NORMAL);
}",0.9940828402366864
184849,"/** 
 * Updates all our public boolean flags based on the current state of the Phone.
 */
public void update(){
  final boolean hasRingingCall=!mPhone.getRingingCall().isIdle();
  final Call fgCall=mPhone.getForegroundCall();
  final Call.State fgCallState=fgCall.getState();
  final boolean hasActiveCall=!fgCall.isIdle();
  final boolean hasHoldingCall=!mPhone.getBackgroundCall().isIdle();
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    manageConferenceVisible=PhoneUtils.isConferenceCall(fgCall);
    manageConferenceEnabled=manageConferenceVisible && !mInCallScreen.isManageConferenceMode();
  }
 else {
    manageConferenceVisible=false;
    manageConferenceEnabled=false;
  }
  canAddCall=PhoneUtils.okToAddCall(mPhone);
  canSwap=PhoneUtils.okToSwapCalls(mPhone);
  canMerge=PhoneUtils.okToMergeCalls(mPhone);
  if (mInCallScreen.isBluetoothAvailable()) {
    bluetoothEnabled=true;
    bluetoothIndicatorOn=mInCallScreen.isBluetoothAudioConnectedOrPending();
  }
 else {
    bluetoothEnabled=false;
    bluetoothIndicatorOn=false;
  }
  if (PhoneApp.getInstance().isHeadsetPlugged()) {
    speakerEnabled=false;
    speakerOn=false;
  }
 else {
    speakerEnabled=true;
    speakerOn=PhoneUtils.isSpeakerOn(mInCallScreen);
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    Connection c=fgCall.getLatestConnection();
    boolean isEmergencyCall=false;
    if (c != null)     isEmergencyCall=PhoneNumberUtils.isEmergencyNumber(c.getAddress());
    if (isEmergencyCall) {
      canMute=false;
      muteIndicatorOn=false;
    }
 else {
      canMute=(fgCallState == Call.State.ACTIVE);
      muteIndicatorOn=PhoneUtils.getMute(mPhone);
    }
  }
 else {
    canMute=(fgCallState == Call.State.ACTIVE);
    muteIndicatorOn=PhoneUtils.getMute(mPhone);
  }
  dialpadEnabled=mInCallScreen.okToShowDialpad();
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    supportsHold=true;
    onHold=hasHoldingCall && !hasActiveCall;
    canHold=!((hasActiveCall && hasHoldingCall) || (hasActiveCall && (fgCallState != Call.State.ACTIVE)));
  }
 else {
    supportsHold=false;
    onHold=false;
    canHold=false;
  }
  if (DBG)   dumpState();
}","/** 
 * Updates all our public boolean flags based on the current state of the Phone.
 */
public void update(){
  final boolean hasRingingCall=!mPhone.getRingingCall().isIdle();
  final Call fgCall=mPhone.getForegroundCall();
  final Call.State fgCallState=fgCall.getState();
  final boolean hasActiveCall=!fgCall.isIdle();
  final boolean hasHoldingCall=!mPhone.getBackgroundCall().isIdle();
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    manageConferenceVisible=PhoneUtils.isConferenceCall(fgCall);
    manageConferenceEnabled=manageConferenceVisible && !mInCallScreen.isManageConferenceMode();
  }
 else {
    manageConferenceVisible=false;
    manageConferenceEnabled=false;
  }
  canAddCall=PhoneUtils.okToAddCall(mPhone);
  canSwap=PhoneUtils.okToSwapCalls(mPhone);
  canMerge=PhoneUtils.okToMergeCalls(mPhone);
  if (mInCallScreen.isBluetoothAvailable()) {
    bluetoothEnabled=true;
    bluetoothIndicatorOn=mInCallScreen.isBluetoothAudioConnectedOrPending();
  }
 else {
    bluetoothEnabled=false;
    bluetoothIndicatorOn=false;
  }
  speakerEnabled=true;
  speakerOn=PhoneUtils.isSpeakerOn(mInCallScreen);
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    Connection c=fgCall.getLatestConnection();
    boolean isEmergencyCall=false;
    if (c != null)     isEmergencyCall=PhoneNumberUtils.isEmergencyNumber(c.getAddress());
    if (isEmergencyCall) {
      canMute=false;
      muteIndicatorOn=false;
    }
 else {
      canMute=(fgCallState == Call.State.ACTIVE);
      muteIndicatorOn=PhoneUtils.getMute(mPhone);
    }
  }
 else {
    canMute=(fgCallState == Call.State.ACTIVE);
    muteIndicatorOn=PhoneUtils.getMute(mPhone);
  }
  dialpadEnabled=mInCallScreen.okToShowDialpad();
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    supportsHold=true;
    onHold=hasHoldingCall && !hasActiveCall;
    canHold=!((hasActiveCall && hasHoldingCall) || (hasActiveCall && (fgCallState != Call.State.ACTIVE)));
  }
 else {
    supportsHold=false;
    onHold=false;
    canHold=false;
  }
  if (DBG)   dumpState();
}",0.940453686200378
184850,"/** 
 * Updates the enabledness and visibility of all items in the InCallMenuView based on the current state of the Phone. This is called every time we need to display the menu, right before it becomes visible.
 * @return true if we successfully updated the items and it's OKto go ahead and show the menu, or false if we shouldn't show the menu at all.
 */
boolean updateItems(Phone phone){
  if (DBG)   log(""String_Node_Str"");
  if (phone.getState() == Phone.State.IDLE) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  final boolean hasRingingCall=!phone.getRingingCall().isIdle();
  final boolean hasActiveCall=!phone.getForegroundCall().isIdle();
  final Call.State fgCallState=phone.getForegroundCall().getState();
  final boolean hasHoldingCall=!phone.getBackgroundCall().isIdle();
  if (hasActiveCall && (PhoneApp.getInstance().isOtaCallInActiveState())) {
    mAnswerAndHold.setVisible(false);
    mAnswerAndHold.setEnabled(false);
    mAnswerAndEnd.setVisible(false);
    mAnswerAndEnd.setEnabled(false);
    mManageConference.setVisible(false);
    mAddCall.setEnabled(false);
    mSwapCalls.setEnabled(false);
    mMergeCalls.setEnabled(false);
    mHold.setEnabled(false);
    mBluetooth.setEnabled(false);
    mMute.setEnabled(false);
    mAnswer.setVisible(false);
    mIgnore.setVisible(false);
    boolean inConferenceCall=PhoneUtils.isConferenceCall(phone.getForegroundCall());
    boolean showShowDialpad=!InCallScreen.ConfigurationHelper.isLandscape() && !inConferenceCall;
    boolean enableShowDialpad=showShowDialpad && mInCallScreen.okToShowDialpad();
    mShowDialpad.setVisible(showShowDialpad);
    mShowDialpad.setEnabled(enableShowDialpad);
    boolean isDtmfDialerOpened=mInCallScreen.isDialerOpened();
    mShowDialpad.setText(isDtmfDialerOpened ? R.string.menu_hideDialpad : R.string.menu_showDialpad);
    mEndCall.setVisible(true);
    mEndCall.setEnabled(true);
    mSpeaker.setVisible(true);
    if (PhoneApp.getInstance().isHeadsetPlugged()) {
      mSpeaker.setEnabled(false);
      mSpeaker.setIndicatorState(false);
    }
 else {
      mSpeaker.setEnabled(true);
      boolean speakerOn=PhoneUtils.isSpeakerOn(mInCallScreen.getApplicationContext());
      mSpeaker.setIndicatorState(speakerOn);
    }
    mInCallMenuView.updateVisibility();
    return true;
  }
  if (hasRingingCall) {
    if (hasActiveCall && !hasHoldingCall) {
      if (phone.getPhoneName().equals(""String_Node_Str"")) {
        mAnswer.setVisible(true);
        mAnswer.setEnabled(true);
        mIgnore.setVisible(true);
        mIgnore.setEnabled(true);
        mAnswerAndHold.setVisible(false);
        mAnswerAndEnd.setVisible(false);
      }
 else {
        mAnswerAndHold.setVisible(true);
        mAnswerAndHold.setEnabled(true);
        mAnswerAndEnd.setVisible(true);
        mAnswerAndEnd.setEnabled(true);
        mAnswer.setVisible(false);
        mIgnore.setVisible(false);
        mManageConference.setVisible(false);
      }
      mShowDialpad.setVisible(false);
      mEndCall.setVisible(false);
      mAddCall.setVisible(false);
      mSwapCalls.setVisible(false);
      mMergeCalls.setVisible(false);
      mBluetooth.setVisible(false);
      mSpeaker.setVisible(false);
      mMute.setVisible(false);
      mHold.setVisible(false);
      mInCallMenuView.updateVisibility();
      return true;
    }
 else {
      return false;
    }
  }
  InCallControlState inCallControlState=mInCallScreen.getUpdatedInCallControlState();
  mManageConference.setVisible(inCallControlState.manageConferenceVisible);
  mManageConference.setEnabled(inCallControlState.manageConferenceEnabled);
  boolean showShowDialpad=!InCallScreen.ConfigurationHelper.isLandscape() && !inCallControlState.manageConferenceVisible;
  boolean enableShowDialpad=showShowDialpad && mInCallScreen.okToShowDialpad();
  mShowDialpad.setVisible(showShowDialpad);
  mShowDialpad.setEnabled(enableShowDialpad);
  mShowDialpad.setText(mInCallScreen.isDialerOpened() ? R.string.menu_hideDialpad : R.string.menu_showDialpad);
  mEndCall.setVisible(true);
  mEndCall.setEnabled(true);
  mAddCall.setVisible(true);
  mAddCall.setEnabled(inCallControlState.canAddCall);
  mSwapCalls.setVisible(true);
  mSwapCalls.setEnabled(inCallControlState.canSwap);
  mMergeCalls.setVisible(true);
  mMergeCalls.setEnabled(inCallControlState.canMerge);
  mBluetooth.setVisible(true);
  mBluetooth.setEnabled(inCallControlState.bluetoothEnabled);
  mBluetooth.setIndicatorState(inCallControlState.bluetoothIndicatorOn);
  mSpeaker.setVisible(true);
  mSpeaker.setEnabled(inCallControlState.speakerEnabled);
  mSpeaker.setIndicatorState(inCallControlState.speakerOn);
  mMute.setVisible(true);
  mMute.setEnabled(inCallControlState.canMute);
  mMute.setIndicatorState(inCallControlState.muteIndicatorOn);
  mHold.setVisible(inCallControlState.supportsHold);
  mHold.setIndicatorState(inCallControlState.onHold);
  mHold.setEnabled(inCallControlState.canHold);
  mAnswer.setVisible(false);
  mAnswer.setEnabled(false);
  mIgnore.setVisible(false);
  mIgnore.setEnabled(false);
  mAnswerAndHold.setVisible(false);
  mAnswerAndHold.setEnabled(false);
  mAnswerAndEnd.setVisible(false);
  mAnswerAndEnd.setEnabled(false);
  mInCallMenuView.updateVisibility();
  return true;
}","/** 
 * Updates the enabledness and visibility of all items in the InCallMenuView based on the current state of the Phone. This is called every time we need to display the menu, right before it becomes visible.
 * @return true if we successfully updated the items and it's OKto go ahead and show the menu, or false if we shouldn't show the menu at all.
 */
boolean updateItems(Phone phone){
  if (DBG)   log(""String_Node_Str"");
  if (phone.getState() == Phone.State.IDLE) {
    if (DBG)     log(""String_Node_Str"");
    return false;
  }
  final boolean hasRingingCall=!phone.getRingingCall().isIdle();
  final boolean hasActiveCall=!phone.getForegroundCall().isIdle();
  final Call.State fgCallState=phone.getForegroundCall().getState();
  final boolean hasHoldingCall=!phone.getBackgroundCall().isIdle();
  if (hasActiveCall && (PhoneApp.getInstance().isOtaCallInActiveState())) {
    mAnswerAndHold.setVisible(false);
    mAnswerAndHold.setEnabled(false);
    mAnswerAndEnd.setVisible(false);
    mAnswerAndEnd.setEnabled(false);
    mManageConference.setVisible(false);
    mAddCall.setEnabled(false);
    mSwapCalls.setEnabled(false);
    mMergeCalls.setEnabled(false);
    mHold.setEnabled(false);
    mBluetooth.setEnabled(false);
    mMute.setEnabled(false);
    mAnswer.setVisible(false);
    mIgnore.setVisible(false);
    boolean inConferenceCall=PhoneUtils.isConferenceCall(phone.getForegroundCall());
    boolean showShowDialpad=!InCallScreen.ConfigurationHelper.isLandscape() && !inConferenceCall;
    boolean enableShowDialpad=showShowDialpad && mInCallScreen.okToShowDialpad();
    mShowDialpad.setVisible(showShowDialpad);
    mShowDialpad.setEnabled(enableShowDialpad);
    boolean isDtmfDialerOpened=mInCallScreen.isDialerOpened();
    mShowDialpad.setText(isDtmfDialerOpened ? R.string.menu_hideDialpad : R.string.menu_showDialpad);
    mEndCall.setVisible(true);
    mEndCall.setEnabled(true);
    mSpeaker.setVisible(true);
    mSpeaker.setEnabled(true);
    boolean speakerOn=PhoneUtils.isSpeakerOn(mInCallScreen.getApplicationContext());
    mSpeaker.setIndicatorState(speakerOn);
    mInCallMenuView.updateVisibility();
    return true;
  }
  if (hasRingingCall) {
    if (hasActiveCall && !hasHoldingCall) {
      if (phone.getPhoneName().equals(""String_Node_Str"")) {
        mAnswer.setVisible(true);
        mAnswer.setEnabled(true);
        mIgnore.setVisible(true);
        mIgnore.setEnabled(true);
        mAnswerAndHold.setVisible(false);
        mAnswerAndEnd.setVisible(false);
      }
 else {
        mAnswerAndHold.setVisible(true);
        mAnswerAndHold.setEnabled(true);
        mAnswerAndEnd.setVisible(true);
        mAnswerAndEnd.setEnabled(true);
        mAnswer.setVisible(false);
        mIgnore.setVisible(false);
        mManageConference.setVisible(false);
      }
      mShowDialpad.setVisible(false);
      mEndCall.setVisible(false);
      mAddCall.setVisible(false);
      mSwapCalls.setVisible(false);
      mMergeCalls.setVisible(false);
      mBluetooth.setVisible(false);
      mSpeaker.setVisible(false);
      mMute.setVisible(false);
      mHold.setVisible(false);
      mInCallMenuView.updateVisibility();
      return true;
    }
 else {
      return false;
    }
  }
  InCallControlState inCallControlState=mInCallScreen.getUpdatedInCallControlState();
  mManageConference.setVisible(inCallControlState.manageConferenceVisible);
  mManageConference.setEnabled(inCallControlState.manageConferenceEnabled);
  boolean showShowDialpad=!InCallScreen.ConfigurationHelper.isLandscape() && !inCallControlState.manageConferenceVisible;
  boolean enableShowDialpad=showShowDialpad && mInCallScreen.okToShowDialpad();
  mShowDialpad.setVisible(showShowDialpad);
  mShowDialpad.setEnabled(enableShowDialpad);
  mShowDialpad.setText(mInCallScreen.isDialerOpened() ? R.string.menu_hideDialpad : R.string.menu_showDialpad);
  mEndCall.setVisible(true);
  mEndCall.setEnabled(true);
  mAddCall.setVisible(true);
  mAddCall.setEnabled(inCallControlState.canAddCall);
  mSwapCalls.setVisible(true);
  mSwapCalls.setEnabled(inCallControlState.canSwap);
  mMergeCalls.setVisible(true);
  mMergeCalls.setEnabled(inCallControlState.canMerge);
  mBluetooth.setVisible(true);
  mBluetooth.setEnabled(inCallControlState.bluetoothEnabled);
  mBluetooth.setIndicatorState(inCallControlState.bluetoothIndicatorOn);
  mSpeaker.setVisible(true);
  mSpeaker.setEnabled(inCallControlState.speakerEnabled);
  mSpeaker.setIndicatorState(inCallControlState.speakerOn);
  mMute.setVisible(true);
  mMute.setEnabled(inCallControlState.canMute);
  mMute.setIndicatorState(inCallControlState.muteIndicatorOn);
  mHold.setVisible(inCallControlState.supportsHold);
  mHold.setIndicatorState(inCallControlState.onHold);
  mHold.setEnabled(inCallControlState.canHold);
  mAnswer.setVisible(false);
  mAnswer.setEnabled(false);
  mIgnore.setVisible(false);
  mIgnore.setEnabled(false);
  mAnswerAndHold.setVisible(false);
  mAnswerAndHold.setEnabled(false);
  mAnswerAndEnd.setVisible(false);
  mAnswerAndEnd.setEnabled(false);
  mInCallMenuView.updateVisibility();
  return true;
}",0.98377438671045
184851,"private void onSpeakerClick(){
  if (VDBG)   log(""String_Node_Str"");
  boolean newSpeakerState=!PhoneUtils.isSpeakerOn(this);
  if (newSpeakerState && isBluetoothAvailable() && isBluetoothAudioConnected()) {
    disconnectBluetoothAudio();
  }
  PhoneUtils.turnOnSpeaker(this,newSpeakerState);
  if (newSpeakerState) {
    enableTouchLock(false);
  }
 else {
    if (mDialer.isOpened() && !isTouchLocked()) {
      resetTouchLockTimer();
    }
  }
}","private void onSpeakerClick(){
  if (VDBG)   log(""String_Node_Str"");
  boolean newSpeakerState=!PhoneUtils.isSpeakerOn(this);
  if (newSpeakerState && isBluetoothAvailable() && isBluetoothAudioConnected()) {
    disconnectBluetoothAudio();
  }
  PhoneUtils.turnOnSpeaker(this,newSpeakerState,true);
  if (newSpeakerState) {
    enableTouchLock(false);
  }
 else {
    if (mDialer.isOpened() && !isTouchLocked()) {
      resetTouchLockTimer();
    }
  }
}",0.9944629014396456
184852,"private void onBluetoothClick(){
  if (VDBG)   log(""String_Node_Str"");
  if (isBluetoothAvailable()) {
    if (isBluetoothAudioConnected()) {
      disconnectBluetoothAudio();
    }
 else {
      if (PhoneUtils.isSpeakerOn(this)) {
        PhoneUtils.turnOnSpeaker(this,false);
      }
      connectBluetoothAudio();
    }
  }
 else {
    Log.w(LOG_TAG,""String_Node_Str"");
  }
}","private void onBluetoothClick(){
  if (VDBG)   log(""String_Node_Str"");
  if (isBluetoothAvailable()) {
    if (isBluetoothAudioConnected()) {
      disconnectBluetoothAudio();
    }
 else {
      if (PhoneUtils.isSpeakerOn(this)) {
        PhoneUtils.turnOnSpeaker(this,false,true);
      }
      connectBluetoothAudio();
    }
  }
 else {
    Log.w(LOG_TAG,""String_Node_Str"");
  }
}",0.9934296977660972
184853,"private void setSpeaker(boolean state){
  if (DBG)   log(""String_Node_Str"" + state);
  if (state == PhoneUtils.isSpeakerOn(mContext)) {
    if (DBG)     log(""String_Node_Str"");
    return;
  }
  if (state && mInCallScreen.isBluetoothAvailable() && mInCallScreen.isBluetoothAudioConnected()) {
    mInCallScreen.disconnectBluetoothAudio();
  }
  PhoneUtils.turnOnSpeaker(mContext,state);
}","private void setSpeaker(boolean state){
  if (DBG)   log(""String_Node_Str"" + state);
  if (state == PhoneUtils.isSpeakerOn(mContext)) {
    if (DBG)     log(""String_Node_Str"");
    return;
  }
  if (state && mInCallScreen.isBluetoothAvailable() && mInCallScreen.isBluetoothAudioConnected()) {
    mInCallScreen.disconnectBluetoothAudio();
  }
  PhoneUtils.turnOnSpeaker(mContext,state,true);
}",0.9935979513444302
184854,"/** 
 * Restore the speaker mode, called after a wired headset disconnect event.
 */
static void restoreSpeakerMode(Context context){
  if (DBG)   log(""String_Node_Str"" + sIsSpeakerEnabled);
  if (isSpeakerOn(context) != sIsSpeakerEnabled) {
    turnOnSpeaker(context,sIsSpeakerEnabled);
  }
}","/** 
 * Restore the speaker mode, called after a wired headset disconnect event.
 */
static void restoreSpeakerMode(Context context){
  if (DBG)   log(""String_Node_Str"" + sIsSpeakerEnabled);
  if (isSpeakerOn(context) != sIsSpeakerEnabled) {
    turnOnSpeaker(context,sIsSpeakerEnabled,false);
  }
}",0.9898648648648648
184855,"static void turnOnSpeaker(Context context,boolean flag){
  if (DBG)   log(""String_Node_Str"" + flag);
  AudioManager audioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  audioManager.setSpeakerphoneOn(flag);
  sIsSpeakerEnabled=flag;
  if (flag) {
    NotificationMgr.getDefault().notifySpeakerphone();
  }
 else {
    NotificationMgr.getDefault().cancelSpeakerphone();
  }
  PhoneApp app=PhoneApp.getInstance();
  app.updateWakeState();
  app.updateProximitySensorMode(app.phone.getState());
}","static void turnOnSpeaker(Context context,boolean flag,boolean store){
  if (DBG)   log(""String_Node_Str"" + flag);
  AudioManager audioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  audioManager.setSpeakerphoneOn(flag);
  if (store) {
    sIsSpeakerEnabled=flag;
  }
  if (flag) {
    NotificationMgr.getDefault().notifySpeakerphone();
  }
 else {
    NotificationMgr.getDefault().cancelSpeakerphone();
  }
  PhoneApp app=PhoneApp.getInstance();
  app.updateWakeState();
  app.updateProximitySensorMode(app.phone.getState());
}",0.9673202614379084
184856,"/** 
 * Answer the currently-ringing call.
 * @return true if we answered the call, or false if there wasn'tactually a ringing incoming call, or some other error occurred.
 * @see answerAndEndHolding()
 * @see answerAndEndActive()
 */
static boolean answerCall(Phone phone){
  if (DBG)   log(""String_Node_Str"");
  PhoneApp.getInstance().getRinger().stopRing();
  PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
  boolean answered=false;
  Call call=phone.getRingingCall();
  if (phone.getPhoneName().equals(""String_Node_Str"")) {
    if (call.getState() == Call.State.WAITING) {
      final CallNotifier notifier=PhoneApp.getInstance().notifier;
      notifier.stopSignalInfoTone();
    }
  }
  if (call != null && call.isRinging()) {
    if (DBG)     log(""String_Node_Str"" + call.getState());
    try {
      phone.acceptCall();
      answered=true;
      setAudioMode(phone.getContext(),AudioManager.MODE_IN_CALL);
      if (phone.getPhoneName().equals(""String_Node_Str"")) {
        PhoneApp app=PhoneApp.getInstance();
        if (app.cdmaPhoneCallState.getCurrentCallState() == CdmaPhoneCallState.PhoneCallState.IDLE) {
          app.cdmaPhoneCallState.setCurrentCallState(CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
        }
 else {
          app.cdmaPhoneCallState.setCurrentCallState(CdmaPhoneCallState.PhoneCallState.CONF_CALL);
          BluetoothHandsfree bthf=PhoneApp.getInstance().getBluetoothHandsfree();
          if (bthf != null) {
            bthf.cdmaSetSecondCallState(true);
          }
        }
      }
    }
 catch (    CallStateException ex) {
      Log.w(LOG_TAG,""String_Node_Str"" + ex,ex);
    }
  }
  return answered;
}","/** 
 * Answer the currently-ringing call.
 * @return true if we answered the call, or false if there wasn'tactually a ringing incoming call, or some other error occurred.
 * @see answerAndEndHolding()
 * @see answerAndEndActive()
 */
static boolean answerCall(Phone phone){
  if (DBG)   log(""String_Node_Str"");
  PhoneApp.getInstance().getRinger().stopRing();
  PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
  boolean answered=false;
  Call call=phone.getRingingCall();
  if (phone.getPhoneName().equals(""String_Node_Str"")) {
    if (call.getState() == Call.State.WAITING) {
      final CallNotifier notifier=PhoneApp.getInstance().notifier;
      notifier.stopSignalInfoTone();
    }
  }
  if (call != null && call.isRinging()) {
    if (DBG)     log(""String_Node_Str"" + call.getState());
    try {
      if (phone.getPhoneName().equals(""String_Node_Str"")) {
        PhoneApp app=PhoneApp.getInstance();
        if (app.cdmaPhoneCallState.getCurrentCallState() == CdmaPhoneCallState.PhoneCallState.IDLE) {
          app.cdmaPhoneCallState.setCurrentCallState(CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
        }
 else {
          app.cdmaPhoneCallState.setCurrentCallState(CdmaPhoneCallState.PhoneCallState.CONF_CALL);
          BluetoothHandsfree bthf=PhoneApp.getInstance().getBluetoothHandsfree();
          if (bthf != null) {
            bthf.cdmaSetSecondCallState(true);
          }
        }
      }
      phone.acceptCall();
      answered=true;
      setAudioMode(phone.getContext(),AudioManager.MODE_IN_CALL);
    }
 catch (    CallStateException ex) {
      Log.w(LOG_TAG,""String_Node_Str"" + ex,ex);
    }
  }
  return answered;
}",0.6298076923076923
184857,"/** 
 * Answer the currently-ringing call.
 * @return true if we answered the call, or false if there wasn'tactually a ringing incoming call, or some other error occurred.
 * @see answerAndEndHolding()
 * @see answerAndEndActive()
 */
static boolean answerCall(Phone phone){
  if (DBG)   log(""String_Node_Str"");
  PhoneApp.getInstance().getRinger().stopRing();
  PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
  boolean answered=false;
  Call call=phone.getRingingCall();
  if (phone.getPhoneName().equals(""String_Node_Str"")) {
    if (call.getState() == Call.State.WAITING) {
      final CallNotifier notifier=PhoneApp.getInstance().notifier;
      notifier.stopSignalInfoTone();
    }
  }
  if (call != null && call.isRinging()) {
    if (DBG)     log(""String_Node_Str"" + call.getState());
    try {
      phone.acceptCall();
      answered=true;
      setAudioMode(phone.getContext(),AudioManager.MODE_IN_CALL);
      if (phone.getPhoneName().equals(""String_Node_Str"")) {
        PhoneApp app=PhoneApp.getInstance();
        if (app.cdmaPhoneCallState.getCurrentCallState() == CdmaPhoneCallState.PhoneCallState.IDLE) {
          app.cdmaPhoneCallState.setCurrentCallState(CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
        }
 else {
          app.cdmaPhoneCallState.setCurrentCallState(CdmaPhoneCallState.PhoneCallState.CONF_CALL);
          BluetoothHandsfree bthf=PhoneApp.getInstance().getBluetoothHandsfree();
          if (bthf != null) {
            bthf.cdmaSetSecondCallState(true);
          }
        }
      }
    }
 catch (    CallStateException ex) {
      Log.w(LOG_TAG,""String_Node_Str"" + ex,ex);
    }
  }
  return answered;
}","/** 
 * Answer the currently-ringing call.
 * @return true if we answered the call, or false if there wasn'tactually a ringing incoming call, or some other error occurred.
 * @see answerAndEndHolding()
 * @see answerAndEndActive()
 */
static boolean answerCall(Phone phone){
  if (DBG)   log(""String_Node_Str"");
  PhoneApp.getInstance().getRinger().stopRing();
  PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
  boolean answered=false;
  Call call=phone.getRingingCall();
  if (phone.getPhoneName().equals(""String_Node_Str"")) {
    if (call.getState() == Call.State.WAITING) {
      final CallNotifier notifier=PhoneApp.getInstance().notifier;
      notifier.stopSignalInfoTone();
    }
  }
  if (call != null && call.isRinging()) {
    if (DBG)     log(""String_Node_Str"" + call.getState());
    try {
      if (phone.getPhoneName().equals(""String_Node_Str"")) {
        PhoneApp app=PhoneApp.getInstance();
        if (app.cdmaPhoneCallState.getCurrentCallState() == CdmaPhoneCallState.PhoneCallState.IDLE) {
          app.cdmaPhoneCallState.setCurrentCallState(CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
        }
 else {
          app.cdmaPhoneCallState.setCurrentCallState(CdmaPhoneCallState.PhoneCallState.CONF_CALL);
          BluetoothHandsfree bthf=PhoneApp.getInstance().getBluetoothHandsfree();
          if (bthf != null) {
            bthf.cdmaSetSecondCallState(true);
          }
        }
      }
      phone.acceptCall();
      answered=true;
      setAudioMode(phone.getContext(),AudioManager.MODE_IN_CALL);
    }
 catch (    CallStateException ex) {
      Log.w(LOG_TAG,""String_Node_Str"" + ex,ex);
    }
  }
  return answered;
}",0.6298076923076923
184858,"public void onReceive(Context context,Intent intent){
  PhoneApp app=PhoneApp.getInstance();
  Phone mPhone=app.phone;
  if (!mPhone.getPhoneName().equals(""String_Node_Str"")) {
    if (DBG)     log(""String_Node_Str"");
    return;
  }
  mMin_string=mPhone.getCdmaMin();
  if (DBG)   log(""String_Node_Str"" + mMin_string);
  if ((mMin_string != null) && (mMin_string.length() > 3)) {
    mMin2_string=mMin_string.substring(0,3);
    if (DBG)     log(""String_Node_Str"" + mMin2_string);
  }
 else {
    if (DBG)     log(""String_Node_Str"");
    return;
  }
  if ((mMin2_string.equals(UNACTIVATED_MIN2_VALUE)) || (mMin_string.equals(UNACTIVATED_MIN_VALUE))) {
    mPhoneNeedActivation=true;
    if (DBG)     log(""String_Node_Str"");
  }
 else {
    if (DBG)     log(""String_Node_Str"");
  }
  mTmpOtaShowActivationScreen=context.getResources().getInteger(R.integer.OtaShowActivationScreen);
  if (DBG)   log(""String_Node_Str"" + mTmpOtaShowActivationScreen);
  mOtaShowActivationScreen=mTmpOtaShowActivationScreen;
  if (DBG)   log(""String_Node_Str"" + mOtaShowActivationScreen);
  if ((mPhoneNeedActivation) && (mOtaShowActivationScreen == OtaUtils.OTA_SHOW_ACTIVATION_SCREEN_ON)) {
    if (DBG)     log(""String_Node_Str"");
    app.cdmaOtaProvisionData.isOtaCallIntentProcessed=false;
    Intent newIntent=new Intent(InCallScreen.ACTION_SHOW_ACTIVATION);
    newIntent.setClass(context,InCallScreen.class);
    newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startActivity(newIntent);
  }
 else {
    if (DBG)     log(""String_Node_Str"");
  }
}","public void onReceive(Context context,Intent intent){
  if (DBG)   log(""String_Node_Str"");
  mApp=PhoneApp.getInstance();
  mPhone=mApp.phone;
  mContext=context;
  if (!mPhone.getPhoneName().equals(""String_Node_Str"")) {
    if (DBG)     log(""String_Node_Str"");
    return;
  }
  tryInit();
}",0.2021739130434782
184859,"private void onDisconnect(AsyncResult r){
  if (VDBG)   log(""String_Node_Str"" + mPhone.getState());
  mCdmaVoicePrivacyState=false;
  int autoretrySetting=0;
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    autoretrySetting=android.provider.Settings.System.getInt(mPhone.getContext().getContentResolver(),android.provider.Settings.System.CALL_AUTO_RETRY,0);
  }
  if (mPhone.getState() == Phone.State.IDLE) {
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    stopSignalInfoTone();
  }
  Connection c=(Connection)r.result;
  if (DBG && c != null) {
    log(""String_Node_Str"" + c.getDisconnectCause() + ""String_Node_Str""+ c.isIncoming()+ ""String_Node_Str""+ c.getCreateTime());
  }
  if (DBG)   log(""String_Node_Str"");
  mRinger.stopRing();
  int toneToPlay=InCallTonePlayer.TONE_NONE;
  if (c != null) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if (cause == Connection.DisconnectCause.BUSY) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_BUSY;
    }
 else     if (cause == Connection.DisconnectCause.CONGESTION) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CONGESTION;
    }
 else     if (((cause == Connection.DisconnectCause.NORMAL) || (cause == Connection.DisconnectCause.LOCAL)) && (mApplication.isOtaCallInActiveState())) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_OTA_CALL_END;
    }
 else     if (cause == Connection.DisconnectCause.CDMA_REORDER) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_REORDER;
    }
 else     if (cause == Connection.DisconnectCause.CDMA_INTERCEPT) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_INTERCEPT;
    }
 else     if (cause == Connection.DisconnectCause.CDMA_DROP) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CDMA_DROP;
    }
 else     if (cause == Connection.DisconnectCause.OUT_OF_SERVICE) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_OUT_OF_SERVICE;
    }
 else     if (cause == Connection.DisconnectCause.ERROR_UNSPECIFIED) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CALL_ENDED;
    }
  }
  if ((toneToPlay == InCallTonePlayer.TONE_NONE) && (mPhone.getState() == Phone.State.IDLE) && (c != null)) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if ((cause == Connection.DisconnectCause.NORMAL) || (cause == Connection.DisconnectCause.LOCAL)) {
      if (VDBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CALL_ENDED;
      mIsCdmaRedialCall=false;
    }
  }
  if (mPhone.getState() == Phone.State.IDLE) {
    if (toneToPlay == InCallTonePlayer.TONE_NONE) {
      resetAudioStateAfterDisconnect();
    }
    NotificationMgr.getDefault().cancelCallInProgressNotification();
    if (!mApplication.isShowingCallScreen()) {
      if (VDBG)       log(""String_Node_Str"");
      mApplication.dismissCallScreen();
    }
  }
  if (c != null) {
    final String number=c.getAddress();
    final int presentation=c.getNumberPresentation();
    if (DBG)     log(""String_Node_Str"" + presentation);
    final long date=c.getCreateTime();
    final long duration=c.getDurationMillis();
    final Connection.DisconnectCause cause=c.getDisconnectCause();
    final String cdmaLogNumber=c.isIncoming() ? number : c.getOrigDialString();
    final int callLogType;
    if (c.isIncoming()) {
      callLogType=(cause == Connection.DisconnectCause.INCOMING_MISSED ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE);
    }
 else {
      callLogType=CallLog.Calls.OUTGOING_TYPE;
    }
    if (VDBG)     log(""String_Node_Str"" + callLogType + ""String_Node_Str""+ c.getUserData());
{
      Object o=c.getUserData();
      final CallerInfo ci;
      if ((o == null) || (o instanceof CallerInfo)) {
        ci=(CallerInfo)o;
      }
 else {
        ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
      }
      final String eNumber=c.getAddress();
      if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
        if ((PhoneNumberUtils.isEmergencyNumber(eNumber)) && (mCurrentEmergencyToneState != EMERGENCY_TONE_OFF)) {
          if (mEmergencyTonePlayerVibrator != null) {
            mEmergencyTonePlayerVibrator.stop();
          }
        }
      }
      Thread t=new Thread(){
        public void run(){
          if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
            if (!mApplication.isOtaCallInActiveState() && !PhoneNumberUtils.isEmergencyNumber(eNumber)) {
              Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
            }
          }
 else {
            Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
          }
        }
      }
;
      t.start();
    }
    if (callLogType == CallLog.Calls.MISSED_TYPE) {
      showMissedCallNotification(c,date);
    }
    if (toneToPlay != InCallTonePlayer.TONE_NONE) {
      if (VDBG)       log(""String_Node_Str"" + toneToPlay + ""String_Node_Str"");
      new InCallTonePlayer(toneToPlay).start();
    }
    if (mPhone.getState() == Phone.State.IDLE) {
      if (!mApplication.isShowingCallScreen()) {
        if (VDBG)         log(""String_Node_Str"");
        mApplication.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
        mApplication.requestWakeState(PhoneApp.WakeState.SLEEP);
      }
 else {
        if (VDBG)         log(""String_Node_Str"");
      }
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
    }
    if (((mPreviousCdmaCallState == Call.State.DIALING) || (mPreviousCdmaCallState == Call.State.ALERTING)) && (!PhoneNumberUtils.isEmergencyNumber(number)) && (cause != Connection.DisconnectCause.INCOMING_MISSED)&& (cause != Connection.DisconnectCause.NORMAL)&& (cause != Connection.DisconnectCause.LOCAL)&& (cause != Connection.DisconnectCause.INCOMING_REJECTED)) {
      if (!mIsCdmaRedialCall) {
        if (autoretrySetting == InCallScreen.AUTO_RETRY_ON) {
          PhoneUtils.placeCall(mPhone,number,null);
          mIsCdmaRedialCall=true;
        }
 else {
          mIsCdmaRedialCall=false;
        }
      }
 else {
        mIsCdmaRedialCall=false;
      }
    }
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mApplication.cdmaPhoneCallState.resetCdmaPhoneCallState();
    removeMessages(CALLWAITING_CALLERINFO_DISPLAY_DONE);
    removeMessages(CALLWAITING_ADDCALL_DISABLE_TIMEOUT);
  }
}","private void onDisconnect(AsyncResult r){
  if (VDBG)   log(""String_Node_Str"" + mPhone.getState());
  mCdmaVoicePrivacyState=false;
  int autoretrySetting=0;
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    autoretrySetting=android.provider.Settings.System.getInt(mPhone.getContext().getContentResolver(),android.provider.Settings.System.CALL_AUTO_RETRY,0);
  }
  if (mPhone.getState() == Phone.State.IDLE) {
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    stopSignalInfoTone();
  }
  Connection c=(Connection)r.result;
  if (DBG && c != null) {
    log(""String_Node_Str"" + c.getDisconnectCause() + ""String_Node_Str""+ c.isIncoming()+ ""String_Node_Str""+ c.getCreateTime());
  }
  if (DBG)   log(""String_Node_Str"");
  mRinger.stopRing();
  int toneToPlay=InCallTonePlayer.TONE_NONE;
  if (c != null) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if (cause == Connection.DisconnectCause.BUSY) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_BUSY;
    }
 else     if (cause == Connection.DisconnectCause.CONGESTION) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CONGESTION;
    }
 else     if (((cause == Connection.DisconnectCause.NORMAL) || (cause == Connection.DisconnectCause.LOCAL)) && (mApplication.isOtaCallInActiveState())) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_OTA_CALL_END;
    }
 else     if (cause == Connection.DisconnectCause.CDMA_REORDER) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_REORDER;
    }
 else     if (cause == Connection.DisconnectCause.CDMA_INTERCEPT) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_INTERCEPT;
    }
 else     if (cause == Connection.DisconnectCause.CDMA_DROP) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CDMA_DROP;
    }
 else     if (cause == Connection.DisconnectCause.OUT_OF_SERVICE) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_OUT_OF_SERVICE;
    }
 else     if (cause == Connection.DisconnectCause.ERROR_UNSPECIFIED) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CALL_ENDED;
    }
  }
  if ((toneToPlay == InCallTonePlayer.TONE_NONE) && (mPhone.getState() == Phone.State.IDLE) && (c != null)) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if ((cause == Connection.DisconnectCause.NORMAL) || (cause == Connection.DisconnectCause.LOCAL)) {
      if (VDBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CALL_ENDED;
      mIsCdmaRedialCall=false;
    }
  }
  if (mPhone.getState() == Phone.State.IDLE) {
    if (toneToPlay == InCallTonePlayer.TONE_NONE) {
      resetAudioStateAfterDisconnect();
    }
    NotificationMgr.getDefault().cancelCallInProgressNotification();
    if (!mApplication.isShowingCallScreen()) {
      if (VDBG)       log(""String_Node_Str"");
      mApplication.dismissCallScreen();
    }
  }
  if (c != null) {
    final String number=c.getAddress();
    final int presentation=c.getNumberPresentation();
    if (DBG)     log(""String_Node_Str"" + presentation);
    final long date=c.getCreateTime();
    final long duration=c.getDurationMillis();
    final Connection.DisconnectCause cause=c.getDisconnectCause();
    final String cdmaLogNumber=c.isIncoming() ? number : c.getOrigDialString();
    final int callLogType;
    if (c.isIncoming()) {
      callLogType=(cause == Connection.DisconnectCause.INCOMING_MISSED ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE);
    }
 else {
      callLogType=CallLog.Calls.OUTGOING_TYPE;
    }
    if (VDBG)     log(""String_Node_Str"" + callLogType + ""String_Node_Str""+ c.getUserData());
{
      Object o=c.getUserData();
      final CallerInfo ci;
      if ((o == null) || (o instanceof CallerInfo)) {
        ci=(CallerInfo)o;
      }
 else {
        ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
      }
      final String eNumber=c.getAddress();
      if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
        if ((PhoneNumberUtils.isEmergencyNumber(eNumber)) && (mCurrentEmergencyToneState != EMERGENCY_TONE_OFF)) {
          if (mEmergencyTonePlayerVibrator != null) {
            mEmergencyTonePlayerVibrator.stop();
          }
        }
      }
      Thread t=new Thread(){
        public void run(){
          if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
            if (!mPhone.isOtaSpNumber(eNumber) && !PhoneNumberUtils.isEmergencyNumber(eNumber)) {
              Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
            }
          }
 else {
            Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
          }
        }
      }
;
      t.start();
    }
    if (callLogType == CallLog.Calls.MISSED_TYPE) {
      showMissedCallNotification(c,date);
    }
    if (toneToPlay != InCallTonePlayer.TONE_NONE) {
      if (VDBG)       log(""String_Node_Str"" + toneToPlay + ""String_Node_Str"");
      new InCallTonePlayer(toneToPlay).start();
    }
    if (mPhone.getState() == Phone.State.IDLE) {
      if (!mApplication.isShowingCallScreen()) {
        if (VDBG)         log(""String_Node_Str"");
        mApplication.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
        mApplication.requestWakeState(PhoneApp.WakeState.SLEEP);
      }
 else {
        if (VDBG)         log(""String_Node_Str"");
      }
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
    }
    if (((mPreviousCdmaCallState == Call.State.DIALING) || (mPreviousCdmaCallState == Call.State.ALERTING)) && (!PhoneNumberUtils.isEmergencyNumber(number)) && (cause != Connection.DisconnectCause.INCOMING_MISSED)&& (cause != Connection.DisconnectCause.NORMAL)&& (cause != Connection.DisconnectCause.LOCAL)&& (cause != Connection.DisconnectCause.INCOMING_REJECTED)) {
      if (!mIsCdmaRedialCall) {
        if (autoretrySetting == InCallScreen.AUTO_RETRY_ON) {
          PhoneUtils.placeCall(mPhone,number,null);
          mIsCdmaRedialCall=true;
        }
 else {
          mIsCdmaRedialCall=false;
        }
      }
 else {
        mIsCdmaRedialCall=false;
      }
    }
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mApplication.cdmaPhoneCallState.resetCdmaPhoneCallState();
    removeMessages(CALLWAITING_CALLERINFO_DISPLAY_DONE);
    removeMessages(CALLWAITING_ADDCALL_DISABLE_TIMEOUT);
  }
}",0.9954621086068672
184860,"/** 
 * Updates the state of the in-call UI based on the current state of the Phone.
 */
private void updateScreen(){
  if (VDBG)   log(""String_Node_Str"");
  if (!mIsForegroundActivity) {
    if (VDBG)     log(""String_Node_Str"");
    return;
  }
  if (mInCallMenu != null) {
    if (VDBG)     log(""String_Node_Str"");
    boolean okToShowMenu=mInCallMenu.updateItems(mPhone);
    if (!okToShowMenu) {
      if (VDBG)       log(""String_Node_Str"");
      dismissMenu(true);
    }
  }
  final PhoneApp app=PhoneApp.getInstance();
  if (mInCallScreenMode == InCallScreenMode.OTA_NORMAL) {
    if (VDBG)     log(""String_Node_Str"");
    if (otaUtils != null) {
      if (VDBG)       log(""String_Node_Str"");
      otaUtils.otaShowProperScreen();
    }
    return;
  }
 else   if (mInCallScreenMode == InCallScreenMode.OTA_ENDED) {
    if (VDBG)     log(""String_Node_Str"");
    if (app.cdmaOtaScreenState.otaScreenState == CdmaOtaScreenState.OtaScreenState.OTA_STATUS_ACTIVATION) {
      if (VDBG)       log(""String_Node_Str"");
      if (otaUtils != null) {
        if (VDBG)         log(""String_Node_Str"" + ""String_Node_Str"");
        otaUtils.otaShowActivateScreen();
      }
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
      if (otaUtils != null) {
        if (VDBG)         log(""String_Node_Str"");
        otaUtils.otaShowSuccessFailure();
      }
    }
    return;
  }
 else   if (mInCallScreenMode == InCallScreenMode.MANAGE_CONFERENCE) {
    if (VDBG)     log(""String_Node_Str"");
    updateManageConferencePanelIfNecessary();
    return;
  }
 else   if (mInCallScreenMode == InCallScreenMode.CALL_ENDED) {
    if (VDBG)     log(""String_Node_Str"");
    updateInCallPanelBackground();
    return;
  }
  if (VDBG)   log(""String_Node_Str"");
  mCallCard.updateState(mPhone);
  updateDialpadVisibility();
  updateInCallTouchUi();
  updateMenuButtonHint();
  updateInCallPanelBackground();
  if (!mRingingCall.isIdle()) {
    dismissAllDialogs();
  }
 else {
    List<Connection> fgConnections=mForegroundCall.getConnections();
    for (    Connection cn : fgConnections) {
      if ((cn != null) && (cn.getPostDialState() == Connection.PostDialState.WAIT)) {
        String postDialStr=cn.getRemainingPostDialString();
        showWaitPromptDialog(cn,postDialStr);
      }
    }
  }
}","/** 
 * Updates the state of the in-call UI based on the current state of the Phone.
 */
private void updateScreen(){
  if (VDBG)   log(""String_Node_Str"");
  if (!mIsForegroundActivity) {
    if (VDBG)     log(""String_Node_Str"");
    return;
  }
  if (mInCallMenu != null) {
    if (VDBG)     log(""String_Node_Str"");
    boolean okToShowMenu=mInCallMenu.updateItems(mPhone);
    if (!okToShowMenu) {
      if (VDBG)       log(""String_Node_Str"");
      dismissMenu(true);
    }
  }
  final PhoneApp app=PhoneApp.getInstance();
  if (mInCallScreenMode == InCallScreenMode.OTA_NORMAL) {
    if (VDBG)     log(""String_Node_Str"");
    if (otaUtils != null) {
      if (VDBG)       log(""String_Node_Str"");
      otaUtils.otaShowProperScreen();
    }
    return;
  }
 else   if (mInCallScreenMode == InCallScreenMode.OTA_ENDED) {
    if (VDBG)     log(""String_Node_Str"");
    if (app.cdmaOtaScreenState.otaScreenState == CdmaOtaScreenState.OtaScreenState.OTA_STATUS_ACTIVATION) {
      if (VDBG)       log(""String_Node_Str"");
      if (otaUtils != null) {
        if (VDBG)         log(""String_Node_Str"" + ""String_Node_Str"");
        otaUtils.otaShowActivateScreen();
      }
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
      if (otaUtils != null) {
        if (VDBG)         log(""String_Node_Str"");
        otaUtils.otaShowSuccessFailure();
      }
    }
    return;
  }
 else   if (mInCallScreenMode == InCallScreenMode.MANAGE_CONFERENCE) {
    if (VDBG)     log(""String_Node_Str"");
    updateManageConferencePanelIfNecessary();
    return;
  }
 else   if (mInCallScreenMode == InCallScreenMode.CALL_ENDED) {
    if (VDBG)     log(""String_Node_Str"");
    updateInCallPanelBackground();
    return;
  }
  if (VDBG)   log(""String_Node_Str"");
  mCallCard.updateState(mPhone);
  updateDialpadVisibility();
  updateInCallTouchUi();
  updateMenuButtonHint();
  updateInCallPanelBackground();
  if (!mRingingCall.isIdle()) {
    dismissAllDialogs();
  }
 else {
    List<Connection> fgConnections=mForegroundCall.getConnections();
    for (    Connection cn : fgConnections) {
      if ((cn != null) && (cn.getPostDialState() == Connection.PostDialState.WAIT)) {
        String postDialStr=cn.getRemainingPostDialString();
        if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
          if (PhoneApp.getInstance().cdmaPhoneCallState.getCurrentCallState() != CdmaPhoneCallState.PhoneCallState.CONF_CALL) {
            if (DBG)             log(""String_Node_Str"");
            showWaitPromptDialogCDMA(cn,postDialStr);
          }
        }
 else {
          showWaitPromptDialog(cn,postDialStr);
        }
      }
    }
  }
}",0.9301948051948052
184861,"/** 
 * Updates the main block of caller info on the CallCard (ie. the stuff in the mainCallCard block) based on the specified Call.
 */
private void displayMainCallStatus(Phone phone,Call call){
  if (DBG)   log(""String_Node_Str"" + phone + ""String_Node_Str""+ call+ ""String_Node_Str"");
  if (call == null) {
    mMainCallCard.setVisibility(View.GONE);
    return;
  }
  mMainCallCard.setVisibility(View.VISIBLE);
  Call.State state=call.getState();
  if (DBG)   log(""String_Node_Str"" + call.getState());
  int callCardBackgroundResid=0;
  boolean landscapeMode=InCallScreen.ConfigurationHelper.isLandscape();
  final boolean bluetoothActive=mApplication.showBluetoothIndication();
switch (state) {
case ACTIVE:
    if (bluetoothActive) {
      callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
    }
 else {
      callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_connected_tall_land : R.drawable.incall_frame_connected_tall_port;
    }
  if (DBG)   log(""String_Node_Str"");
mCallTime.setActiveCallMode(call);
mCallTime.reset();
mCallTime.periodicUpdateTimer();
break;
case HOLDING:
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_hold_tall_land : R.drawable.incall_frame_hold_tall_port;
mCallTime.cancelTimer();
break;
case DISCONNECTED:
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_ended_tall_land : R.drawable.incall_frame_ended_tall_port;
mCallTime.cancelTimer();
break;
case DIALING:
case ALERTING:
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case INCOMING:
case WAITING:
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case IDLE:
Log.w(LOG_TAG,""String_Node_Str"");
break;
default :
Log.w(LOG_TAG,""String_Node_Str"" + state);
break;
}
setMainCallCardBackgroundResource(callCardBackgroundResid);
updateCardTitleWidgets(phone,call);
if (PhoneUtils.isConferenceCall(call)) {
updateDisplayForConference();
}
 else {
Connection conn=null;
if (phone.getPhoneName().equals(""String_Node_Str"")) {
conn=call.getLatestConnection();
}
 else {
conn=call.getEarliestConnection();
}
if (conn == null) {
if (DBG) log(""String_Node_Str"");
CallerInfo info=PhoneUtils.getCallerInfo(getContext(),null);
updateDisplayForPerson(info,Connection.PRESENTATION_ALLOWED,false,call);
}
 else {
if (DBG) log(""String_Node_Str"" + conn + ""String_Node_Str""+ conn.getState());
int presentation=conn.getNumberPresentation();
boolean runQuery=true;
Object o=conn.getUserData();
if (o instanceof PhoneUtils.CallerInfoToken) {
runQuery=mPhotoTracker.isDifferentImageRequest(((PhoneUtils.CallerInfoToken)o).currentInfo);
}
 else {
runQuery=mPhotoTracker.isDifferentImageRequest(conn);
}
if (runQuery) {
if (DBG) log(""String_Node_Str"");
PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),conn,this,call);
updateDisplayForPerson(info.currentInfo,presentation,!info.isFinal,call);
}
 else {
if (DBG) log(""String_Node_Str"");
if (o instanceof CallerInfo) {
CallerInfo ci=(CallerInfo)o;
ci.cnapName=conn.getCnapName();
ci.numberPresentation=conn.getNumberPresentation();
ci.namePresentation=conn.getCnapNamePresentation();
if (DBG) log(""String_Node_Str"" + ""String_Node_Str"" + ci.cnapName + ""String_Node_Str""+ ci.numberPresentation);
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,false,call);
}
 else if (o instanceof PhoneUtils.CallerInfoToken) {
CallerInfo ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
if (DBG) log(""String_Node_Str"" + ""String_Node_Str"" + ci.cnapName + ""String_Node_Str""+ ci.numberPresentation);
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,true,call);
}
 else {
Log.w(LOG_TAG,""String_Node_Str"" + ""String_Node_Str"" + o);
}
}
}
}
updatePhotoForCallState(call);
}","/** 
 * Updates the main block of caller info on the CallCard (ie. the stuff in the mainCallCard block) based on the specified Call.
 */
private void displayMainCallStatus(Phone phone,Call call){
  if (DBG)   log(""String_Node_Str"" + phone + ""String_Node_Str""+ call+ ""String_Node_Str"");
  if (call == null) {
    mMainCallCard.setVisibility(View.GONE);
    return;
  }
  mMainCallCard.setVisibility(View.VISIBLE);
  Call.State state=call.getState();
  if (DBG)   log(""String_Node_Str"" + call.getState());
  int callCardBackgroundResid=0;
  boolean landscapeMode=InCallScreen.ConfigurationHelper.isLandscape();
  final boolean bluetoothActive=mApplication.showBluetoothIndication();
switch (state) {
case ACTIVE:
    if (bluetoothActive) {
      callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
    }
 else {
      callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_connected_tall_land : R.drawable.incall_frame_connected_tall_port;
    }
  if (DBG)   log(""String_Node_Str"");
mCallTime.setActiveCallMode(call);
mCallTime.reset();
mCallTime.periodicUpdateTimer();
break;
case HOLDING:
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_hold_tall_land : R.drawable.incall_frame_hold_tall_port;
mCallTime.cancelTimer();
break;
case DISCONNECTED:
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_ended_tall_land : R.drawable.incall_frame_ended_tall_port;
mCallTime.cancelTimer();
break;
case DIALING:
case ALERTING:
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case INCOMING:
case WAITING:
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case IDLE:
Log.w(LOG_TAG,""String_Node_Str"");
break;
default :
Log.w(LOG_TAG,""String_Node_Str"" + state);
break;
}
setMainCallCardBackgroundResource(callCardBackgroundResid);
updateCardTitleWidgets(phone,call);
if (PhoneUtils.isConferenceCall(call)) {
updateDisplayForConference();
}
 else {
Connection conn=null;
if (phone.getPhoneName().equals(""String_Node_Str"")) {
conn=call.getLatestConnection();
}
 else {
conn=call.getEarliestConnection();
}
if (conn == null) {
if (DBG) log(""String_Node_Str"");
CallerInfo info=PhoneUtils.getCallerInfo(getContext(),null);
updateDisplayForPerson(info,Connection.PRESENTATION_ALLOWED,false,call);
}
 else {
if (DBG) log(""String_Node_Str"" + conn + ""String_Node_Str""+ conn.getState());
int presentation=conn.getNumberPresentation();
boolean runQuery=true;
Object o=conn.getUserData();
if (o instanceof PhoneUtils.CallerInfoToken) {
runQuery=mPhotoTracker.isDifferentImageRequest(((PhoneUtils.CallerInfoToken)o).currentInfo);
}
 else {
runQuery=mPhotoTracker.isDifferentImageRequest(conn);
}
if (phone.getPhoneName().equals(""String_Node_Str"")) {
Object obj=conn.getUserData();
String updatedNumber=conn.getAddress();
String updatedCnapName=conn.getCnapName();
CallerInfo info=null;
if (obj instanceof PhoneUtils.CallerInfoToken) {
info=((PhoneUtils.CallerInfoToken)o).currentInfo;
}
 else if (o instanceof CallerInfo) {
info=(CallerInfo)o;
}
if (info != null) {
if (updatedNumber != null && !updatedNumber.equals(info.phoneNumber)) {
if (DBG) log(""String_Node_Str"" + updatedNumber);
runQuery=true;
}
if (updatedCnapName != null && !updatedCnapName.equals(info.cnapName)) {
if (DBG) log(""String_Node_Str"" + updatedCnapName);
runQuery=true;
}
}
}
if (runQuery) {
if (DBG) log(""String_Node_Str"");
PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),conn,this,call);
updateDisplayForPerson(info.currentInfo,presentation,!info.isFinal,call);
}
 else {
if (DBG) log(""String_Node_Str"");
if (o instanceof CallerInfo) {
CallerInfo ci=(CallerInfo)o;
ci.cnapName=conn.getCnapName();
ci.numberPresentation=conn.getNumberPresentation();
ci.namePresentation=conn.getCnapNamePresentation();
if (DBG) log(""String_Node_Str"" + ""String_Node_Str"" + ci.cnapName + ""String_Node_Str""+ ci.numberPresentation);
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,false,call);
}
 else if (o instanceof PhoneUtils.CallerInfoToken) {
CallerInfo ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
if (DBG) log(""String_Node_Str"" + ""String_Node_Str"" + ci.cnapName + ""String_Node_Str""+ ci.numberPresentation);
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,true,call);
}
 else {
Log.w(LOG_TAG,""String_Node_Str"" + ""String_Node_Str"" + o);
}
}
}
}
updatePhotoForCallState(call);
}",0.9295501132808286
184862,"/** 
 * place a temporary callerinfo object in the hands of the caller and notify caller when the actual query is done.
 */
static CallerInfoToken startGetCallerInfo(Context context,Connection c,CallerInfoAsyncQuery.OnQueryCompleteListener listener,Object cookie){
  CallerInfoToken cit;
  if (c == null) {
    cit=new CallerInfoToken();
    cit.asyncQuery=null;
    return cit;
  }
  Object userDataObject=c.getUserData();
  if (userDataObject instanceof Uri) {
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,(Uri)userDataObject,sCallerInfoQueryListener,c);
    cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
    cit.isFinal=false;
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + userDataObject);
  }
 else   if (userDataObject == null) {
    String number=c.getAddress();
    int cnapSpecialCase;
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    if (DBG)     log(""String_Node_Str"" + number);
    if (!TextUtils.isEmpty(number)) {
      cit.currentInfo.cnapName=c.getCnapName();
      cit.currentInfo.name=cit.currentInfo.cnapName;
      cit.currentInfo.numberPresentation=c.getNumberPresentation();
      cit.currentInfo.namePresentation=c.getCnapNamePresentation();
      if (DBG)       log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
      if (cit.currentInfo.numberPresentation == Connection.PRESENTATION_ALLOWED) {
        cnapSpecialCase=checkCnapSpecialCases(number);
        if (cnapSpecialCase != CNAP_SPECIAL_CASE_NO) {
          if (cnapSpecialCase == Connection.PRESENTATION_RESTRICTED) {
            number=context.getString(R.string.private_num);
          }
 else           if (cnapSpecialCase == Connection.PRESENTATION_UNKNOWN) {
            number=context.getString(R.string.unknown);
          }
          cit.currentInfo.numberPresentation=cnapSpecialCase;
        }
      }
      cit.currentInfo.phoneNumber=number;
      cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,number,sCallerInfoQueryListener,c);
      cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
      cit.isFinal=false;
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      cit.isFinal=true;
    }
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + number);
  }
 else   if (userDataObject instanceof CallerInfoToken) {
    cit=(CallerInfoToken)userDataObject;
    if (cit.asyncQuery != null) {
      cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
      if (DBG)       log(""String_Node_Str"" + listener.getClass().toString());
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      if (cit.currentInfo == null) {
        cit.currentInfo=new CallerInfo();
      }
      cit.isFinal=true;
    }
  }
 else {
    cit=new CallerInfoToken();
    cit.currentInfo=(CallerInfo)userDataObject;
    cit.asyncQuery=null;
    cit.isFinal=true;
    if (DBG)     log(""String_Node_Str"");
  }
  return cit;
}","/** 
 * place a temporary callerinfo object in the hands of the caller and notify caller when the actual query is done.
 */
static CallerInfoToken startGetCallerInfo(Context context,Connection c,CallerInfoAsyncQuery.OnQueryCompleteListener listener,Object cookie){
  CallerInfoToken cit;
  if (c == null) {
    cit=new CallerInfoToken();
    cit.asyncQuery=null;
    return cit;
  }
  Object userDataObject=c.getUserData();
  if (userDataObject instanceof Uri) {
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,(Uri)userDataObject,sCallerInfoQueryListener,c);
    cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
    cit.isFinal=false;
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + userDataObject);
  }
 else   if (userDataObject == null) {
    String number=c.getAddress();
    int cnapSpecialCase;
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    if (DBG)     log(""String_Node_Str"" + number);
    if (!TextUtils.isEmpty(number)) {
      cit.currentInfo.cnapName=c.getCnapName();
      cit.currentInfo.name=cit.currentInfo.cnapName;
      cit.currentInfo.numberPresentation=c.getNumberPresentation();
      cit.currentInfo.namePresentation=c.getCnapNamePresentation();
      if (DBG)       log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
      if (cit.currentInfo.numberPresentation == Connection.PRESENTATION_ALLOWED) {
        cnapSpecialCase=checkCnapSpecialCases(number);
        if (cnapSpecialCase != CNAP_SPECIAL_CASE_NO) {
          if (cnapSpecialCase == Connection.PRESENTATION_RESTRICTED) {
            number=context.getString(R.string.private_num);
          }
 else           if (cnapSpecialCase == Connection.PRESENTATION_UNKNOWN) {
            number=context.getString(R.string.unknown);
          }
          cit.currentInfo.numberPresentation=cnapSpecialCase;
        }
      }
      cit.currentInfo.phoneNumber=number;
      cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,number,sCallerInfoQueryListener,c);
      cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
      cit.isFinal=false;
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      cit.isFinal=true;
    }
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + number);
  }
 else   if (userDataObject instanceof CallerInfoToken) {
    cit=(CallerInfoToken)userDataObject;
    if (cit.asyncQuery != null) {
      cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
      if (DBG)       log(""String_Node_Str"" + listener.getClass().toString());
    }
 else {
      String updatedNumber=c.getAddress();
      if (DBG)       log(""String_Node_Str"" + updatedNumber);
      if (!TextUtils.isEmpty(updatedNumber)) {
        cit.currentInfo.phoneNumber=updatedNumber;
        cit.currentInfo.cnapName=c.getCnapName();
        cit.currentInfo.name=cit.currentInfo.cnapName;
        cit.currentInfo.numberPresentation=c.getNumberPresentation();
        cit.currentInfo.namePresentation=c.getCnapNamePresentation();
        if (DBG)         log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
        cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,updatedNumber,sCallerInfoQueryListener,c);
        cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
        cit.isFinal=false;
      }
 else {
        if (DBG)         log(""String_Node_Str"");
        if (cit.currentInfo == null) {
          cit.currentInfo=new CallerInfo();
        }
        cit.isFinal=true;
      }
    }
  }
 else {
    cit=new CallerInfoToken();
    cit.currentInfo=(CallerInfo)userDataObject;
    cit.asyncQuery=null;
    cit.isFinal=true;
    if (DBG)     log(""String_Node_Str"");
  }
  return cit;
}",0.8704767375071798
184863,"/** 
 * Updates all our public boolean flags based on the current state of the Phone.
 */
public void update(){
  final boolean hasRingingCall=!mPhone.getRingingCall().isIdle();
  final Call fgCall=mPhone.getForegroundCall();
  final Call.State fgCallState=fgCall.getState();
  final boolean hasActiveCall=!fgCall.isIdle();
  final boolean hasHoldingCall=!mPhone.getBackgroundCall().isIdle();
  manageConferenceVisible=PhoneUtils.isConferenceCall(fgCall);
  manageConferenceEnabled=!mInCallScreen.isManageConferenceMode();
  canAddCall=PhoneUtils.okToAddCall(mPhone);
  canSwap=PhoneUtils.okToSwapCalls(mPhone);
  canMerge=PhoneUtils.okToMergeCalls(mPhone);
  if (mInCallScreen.isBluetoothAvailable()) {
    bluetoothEnabled=true;
    bluetoothIndicatorOn=mInCallScreen.isBluetoothAudioConnectedOrPending();
  }
 else {
    bluetoothEnabled=false;
    bluetoothIndicatorOn=false;
  }
  if (PhoneApp.getInstance().isHeadsetPlugged()) {
    speakerEnabled=false;
    speakerOn=false;
  }
 else {
    speakerEnabled=true;
    speakerOn=PhoneUtils.isSpeakerOn(mInCallScreen);
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    Connection c=fgCall.getLatestConnection();
    boolean isEmergencyCall=PhoneNumberUtils.isEmergencyNumber(c.getAddress());
    if (isEmergencyCall) {
      canMute=false;
      muteIndicatorOn=false;
    }
 else {
      canMute=(fgCallState == Call.State.ACTIVE);
      muteIndicatorOn=PhoneUtils.getMute(mPhone);
    }
  }
 else {
    canMute=(fgCallState == Call.State.ACTIVE);
    muteIndicatorOn=PhoneUtils.getMute(mPhone);
  }
  dialpadEnabled=mInCallScreen.okToShowDialpad();
  onHold=hasHoldingCall && !hasActiveCall;
  canHold=!((hasActiveCall && hasHoldingCall) || (hasActiveCall && (fgCallState != Call.State.ACTIVE)));
  if (DBG)   dumpState();
}","/** 
 * Updates all our public boolean flags based on the current state of the Phone.
 */
public void update(){
  final boolean hasRingingCall=!mPhone.getRingingCall().isIdle();
  final Call fgCall=mPhone.getForegroundCall();
  final Call.State fgCallState=fgCall.getState();
  final boolean hasActiveCall=!fgCall.isIdle();
  final boolean hasHoldingCall=!mPhone.getBackgroundCall().isIdle();
  manageConferenceVisible=PhoneUtils.isConferenceCall(fgCall);
  manageConferenceEnabled=!mInCallScreen.isManageConferenceMode();
  canAddCall=PhoneUtils.okToAddCall(mPhone);
  canSwap=PhoneUtils.okToSwapCalls(mPhone);
  canMerge=PhoneUtils.okToMergeCalls(mPhone);
  if (mInCallScreen.isBluetoothAvailable()) {
    bluetoothEnabled=true;
    bluetoothIndicatorOn=mInCallScreen.isBluetoothAudioConnectedOrPending();
  }
 else {
    bluetoothEnabled=false;
    bluetoothIndicatorOn=false;
  }
  if (PhoneApp.getInstance().isHeadsetPlugged()) {
    speakerEnabled=false;
    speakerOn=false;
  }
 else {
    speakerEnabled=true;
    speakerOn=PhoneUtils.isSpeakerOn(mInCallScreen);
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    Connection c=fgCall.getLatestConnection();
    boolean isEmergencyCall=false;
    if (c != null)     isEmergencyCall=PhoneNumberUtils.isEmergencyNumber(c.getAddress());
    if (isEmergencyCall) {
      canMute=false;
      muteIndicatorOn=false;
    }
 else {
      canMute=(fgCallState == Call.State.ACTIVE);
      muteIndicatorOn=PhoneUtils.getMute(mPhone);
    }
  }
 else {
    canMute=(fgCallState == Call.State.ACTIVE);
    muteIndicatorOn=PhoneUtils.getMute(mPhone);
  }
  dialpadEnabled=mInCallScreen.okToShowDialpad();
  onHold=hasHoldingCall && !hasActiveCall;
  canHold=!((hasActiveCall && hasHoldingCall) || (hasActiveCall && (fgCallState != Call.State.ACTIVE)));
  if (DBG)   dumpState();
}",0.9873417721518988
184864,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case PHONE_NEW_RINGING_CONNECTION:
    if (DBG)     log(""String_Node_Str"");
  onNewRingingConnection((AsyncResult)msg.obj);
mSilentRingerRequested=false;
break;
case PHONE_INCOMING_RING:
if (msg.obj != null && ((AsyncResult)msg.obj).result != null && ((GSMPhone)((AsyncResult)msg.obj).result).getState() == Phone.State.RINGING && mSilentRingerRequested == false) {
if (DBG) log(""String_Node_Str"");
mRinger.ring();
}
 else {
if (DBG) log(""String_Node_Str"");
}
break;
case PHONE_STATE_CHANGED:
onPhoneStateChanged((AsyncResult)msg.obj);
break;
case PHONE_DISCONNECT:
if (DBG) log(""String_Node_Str"");
onDisconnect((AsyncResult)msg.obj);
break;
case PHONE_UNKNOWN_CONNECTION_APPEARED:
onUnknownConnectionAppeared((AsyncResult)msg.obj);
break;
case RINGER_CUSTOM_RINGTONE_QUERY_TIMEOUT:
Log.w(LOG_TAG,""String_Node_Str"");
onCustomRingQueryComplete();
break;
case PHONE_MWI_CHANGED:
onMwiChanged(mPhone.getMessageWaitingIndicator());
break;
case PHONE_BATTERY_LOW:
onBatteryLow();
break;
case PHONE_CDMA_CALL_WAITING:
if (DBG) log(""String_Node_Str"");
onCdmaCallWaiting((AsyncResult)msg.obj);
break;
case CALLWAITING_CALLERINFO_DISPLAY_DONE:
if (DBG) log(""String_Node_Str"");
mCallWaitingTimeOut=true;
onCdmaCallWaitingReject();
break;
case CALLWAITING_ADDCALL_DISABLE_TIMEOUT:
if (DBG) log(""String_Node_Str"");
mApplication.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);
break;
case PHONE_STATE_DISPLAYINFO:
if (DBG) log(""String_Node_Str"");
onDisplayInfo((AsyncResult)msg.obj);
break;
case PHONE_STATE_SIGNALINFO:
if (DBG) log(""String_Node_Str"");
onSignalInfo((AsyncResult)msg.obj);
break;
case DISPLAYINFO_NOTIFICATION_DONE:
if (DBG) log(""String_Node_Str"");
CdmaDisplayInfo.dismissDisplayInfoRecord();
break;
case EVENT_OTA_PROVISION_CHANGE:
mApplication.handleOtaEvents(msg);
break;
case PHONE_ENHANCED_VP_ON:
if (DBG) log(""String_Node_Str"");
if (!mCdmaVoicePrivacyState) {
int toneToPlay=InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mCdmaVoicePrivacyState=true;
}
break;
case PHONE_ENHANCED_VP_OFF:
if (DBG) log(""String_Node_Str"");
if (mCdmaVoicePrivacyState) {
int toneToPlay=InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mCdmaVoicePrivacyState=false;
}
break;
default :
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case PHONE_NEW_RINGING_CONNECTION:
    if (DBG)     log(""String_Node_Str"");
  onNewRingingConnection((AsyncResult)msg.obj);
mSilentRingerRequested=false;
break;
case PHONE_INCOMING_RING:
if (msg.obj != null && ((AsyncResult)msg.obj).result != null && ((GSMPhone)((AsyncResult)msg.obj).result).getState() == Phone.State.RINGING && mSilentRingerRequested == false) {
if (DBG) log(""String_Node_Str"");
mRinger.ring();
}
 else {
if (DBG) log(""String_Node_Str"");
}
break;
case PHONE_STATE_CHANGED:
onPhoneStateChanged((AsyncResult)msg.obj);
break;
case PHONE_DISCONNECT:
if (DBG) log(""String_Node_Str"");
onDisconnect((AsyncResult)msg.obj);
break;
case PHONE_UNKNOWN_CONNECTION_APPEARED:
onUnknownConnectionAppeared((AsyncResult)msg.obj);
break;
case RINGER_CUSTOM_RINGTONE_QUERY_TIMEOUT:
Log.w(LOG_TAG,""String_Node_Str"");
onCustomRingQueryComplete();
break;
case PHONE_MWI_CHANGED:
onMwiChanged(mPhone.getMessageWaitingIndicator());
break;
case PHONE_BATTERY_LOW:
onBatteryLow();
break;
case PHONE_CDMA_CALL_WAITING:
if (DBG) log(""String_Node_Str"");
onCdmaCallWaiting((AsyncResult)msg.obj);
break;
case CALLWAITING_CALLERINFO_DISPLAY_DONE:
if (DBG) log(""String_Node_Str"");
mCallWaitingTimeOut=true;
onCdmaCallWaitingReject();
break;
case CALLWAITING_ADDCALL_DISABLE_TIMEOUT:
if (DBG) log(""String_Node_Str"");
mApplication.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);
break;
case PHONE_STATE_DISPLAYINFO:
if (DBG) log(""String_Node_Str"");
onDisplayInfo((AsyncResult)msg.obj);
break;
case PHONE_STATE_SIGNALINFO:
if (DBG) log(""String_Node_Str"");
onSignalInfo((AsyncResult)msg.obj);
break;
case DISPLAYINFO_NOTIFICATION_DONE:
if (DBG) log(""String_Node_Str"");
CdmaDisplayInfo.dismissDisplayInfoRecord();
break;
case EVENT_OTA_PROVISION_CHANGE:
mApplication.handleOtaEvents(msg);
break;
case PHONE_ENHANCED_VP_ON:
if (DBG) log(""String_Node_Str"");
if (!mCdmaVoicePrivacyState) {
int toneToPlay=InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mCdmaVoicePrivacyState=true;
NotificationMgr.getDefault().updateInCallNotification();
}
break;
case PHONE_ENHANCED_VP_OFF:
if (DBG) log(""String_Node_Str"");
if (mCdmaVoicePrivacyState) {
int toneToPlay=InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mCdmaVoicePrivacyState=false;
NotificationMgr.getDefault().updateInCallNotification();
}
break;
default :
}
}",0.9760302775441548
184865,"NotificationMgr(Context context){
  mContext=context;
  mNotificationMgr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  mStatusBar=(StatusBarManager)context.getSystemService(Context.STATUS_BAR_SERVICE);
  PhoneApp app=PhoneApp.getInstance();
  mPhone=app.phone;
  mPhone.registerForInCallVoicePrivacyOn(mEnhancedVPHandler,EVENT_ENHANCED_VP_ON,null);
  mPhone.registerForInCallVoicePrivacyOff(mEnhancedVPHandler,EVENT_ENHANCED_VP_OFF,null);
}","NotificationMgr(Context context){
  mContext=context;
  mNotificationMgr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  mStatusBar=(StatusBarManager)context.getSystemService(Context.STATUS_BAR_SERVICE);
  PhoneApp app=PhoneApp.getInstance();
  mPhone=app.phone;
}",0.7682291666666666
184866,"void updateInCallNotification(){
  int resId;
  if (DBG)   log(""String_Node_Str"");
  if (mPhone.getState() != Phone.State.OFFHOOK) {
    return;
  }
  final boolean hasActiveCall=!mPhone.getForegroundCall().isIdle();
  final boolean hasHoldingCall=!mPhone.getBackgroundCall().isIdle();
  boolean enhancedVoicePrivacy=PhoneApp.getInstance().notifier.getCdmaVoicePrivacyState();
  if (!hasActiveCall && hasHoldingCall) {
    if (enhancedVoicePrivacy) {
      resId=android.R.drawable.stat_sys_vp_phone_call_on_hold;
    }
 else {
      resId=android.R.drawable.stat_sys_phone_call_on_hold;
    }
  }
 else   if (PhoneApp.getInstance().showBluetoothIndication()) {
    if (enhancedVoicePrivacy) {
      resId=com.android.internal.R.drawable.stat_sys_vp_phone_call_bluetooth;
    }
 else {
      resId=com.android.internal.R.drawable.stat_sys_phone_call_bluetooth;
    }
  }
 else {
    if (enhancedVoicePrivacy) {
      resId=android.R.drawable.stat_sys_vp_phone_call;
    }
 else {
      resId=android.R.drawable.stat_sys_phone_call;
    }
  }
  if (DBG)   log(""String_Node_Str"" + resId);
  mInCallResId=resId;
  int expandedViewIcon=mInCallResId;
  Call currentCall=hasActiveCall ? mPhone.getForegroundCall() : mPhone.getBackgroundCall();
  Connection currentConn=currentCall.getEarliestConnection();
  Notification notification=new Notification();
  notification.icon=mInCallResId;
  notification.contentIntent=PendingIntent.getActivity(mContext,0,PhoneApp.createInCallIntent(),0);
  notification.flags|=Notification.FLAG_ONGOING_EVENT;
  RemoteViews contentView=new RemoteViews(mContext.getPackageName(),R.layout.ongoing_call_notification);
  contentView.setImageViewResource(R.id.icon,expandedViewIcon);
  if (currentConn != null) {
    long callDurationMsec=currentConn.getDurationMillis();
    long chronometerBaseTime=SystemClock.elapsedRealtime() - callDurationMsec;
    String expandedViewLine1;
    if (hasHoldingCall && !hasActiveCall) {
      expandedViewLine1=mContext.getString(R.string.notification_on_hold);
    }
 else {
      expandedViewLine1=mContext.getString(R.string.notification_ongoing_call_format);
    }
    if (DBG)     log(""String_Node_Str"" + expandedViewLine1 + ""String_Node_Str"");
    contentView.setChronometer(R.id.text1,chronometerBaseTime,expandedViewLine1,true);
  }
 else   if (DBG) {
    log(""String_Node_Str"");
  }
  String expandedViewLine2=""String_Node_Str"";
  if (PhoneUtils.isConferenceCall(currentCall)) {
    expandedViewLine2=mContext.getString(R.string.card_title_conf_call);
  }
 else {
    PhoneUtils.CallerInfoToken cit=PhoneUtils.startGetCallerInfo(mContext,currentCall,this,contentView);
    expandedViewLine2=PhoneUtils.getCompactNameFromCallerInfo(cit.currentInfo,mContext);
  }
  if (DBG)   log(""String_Node_Str"" + expandedViewLine2 + ""String_Node_Str"");
  contentView.setTextViewText(R.id.text2,expandedViewLine2);
  notification.contentView=contentView;
  if (DBG)   log(""String_Node_Str"" + notification);
  mNotificationMgr.notify(IN_CALL_NOTIFICATION,notification);
  updateSpeakerNotification();
  updateMuteNotification();
}","void updateInCallNotification(){
  int resId;
  if (DBG)   log(""String_Node_Str"");
  if (mPhone.getState() != Phone.State.OFFHOOK) {
    return;
  }
  final boolean hasActiveCall=!mPhone.getForegroundCall().isIdle();
  final boolean hasHoldingCall=!mPhone.getBackgroundCall().isIdle();
  boolean enhancedVoicePrivacy=PhoneApp.getInstance().notifier.getCdmaVoicePrivacyState();
  if (DBG)   log(""String_Node_Str"" + enhancedVoicePrivacy);
  if (!hasActiveCall && hasHoldingCall) {
    if (enhancedVoicePrivacy) {
      resId=android.R.drawable.stat_sys_vp_phone_call_on_hold;
    }
 else {
      resId=android.R.drawable.stat_sys_phone_call_on_hold;
    }
  }
 else   if (PhoneApp.getInstance().showBluetoothIndication()) {
    if (enhancedVoicePrivacy) {
      resId=com.android.internal.R.drawable.stat_sys_vp_phone_call_bluetooth;
    }
 else {
      resId=com.android.internal.R.drawable.stat_sys_phone_call_bluetooth;
    }
  }
 else {
    if (enhancedVoicePrivacy) {
      resId=android.R.drawable.stat_sys_vp_phone_call;
    }
 else {
      resId=android.R.drawable.stat_sys_phone_call;
    }
  }
  if (DBG)   log(""String_Node_Str"" + resId);
  mInCallResId=resId;
  int expandedViewIcon=mInCallResId;
  Call currentCall=hasActiveCall ? mPhone.getForegroundCall() : mPhone.getBackgroundCall();
  Connection currentConn=currentCall.getEarliestConnection();
  Notification notification=new Notification();
  notification.icon=mInCallResId;
  notification.contentIntent=PendingIntent.getActivity(mContext,0,PhoneApp.createInCallIntent(),0);
  notification.flags|=Notification.FLAG_ONGOING_EVENT;
  RemoteViews contentView=new RemoteViews(mContext.getPackageName(),R.layout.ongoing_call_notification);
  contentView.setImageViewResource(R.id.icon,expandedViewIcon);
  if (currentConn != null) {
    long callDurationMsec=currentConn.getDurationMillis();
    long chronometerBaseTime=SystemClock.elapsedRealtime() - callDurationMsec;
    String expandedViewLine1;
    if (hasHoldingCall && !hasActiveCall) {
      expandedViewLine1=mContext.getString(R.string.notification_on_hold);
    }
 else {
      expandedViewLine1=mContext.getString(R.string.notification_ongoing_call_format);
    }
    if (DBG)     log(""String_Node_Str"" + expandedViewLine1 + ""String_Node_Str"");
    contentView.setChronometer(R.id.text1,chronometerBaseTime,expandedViewLine1,true);
  }
 else   if (DBG) {
    log(""String_Node_Str"");
  }
  String expandedViewLine2=""String_Node_Str"";
  if (PhoneUtils.isConferenceCall(currentCall)) {
    expandedViewLine2=mContext.getString(R.string.card_title_conf_call);
  }
 else {
    PhoneUtils.CallerInfoToken cit=PhoneUtils.startGetCallerInfo(mContext,currentCall,this,contentView);
    expandedViewLine2=PhoneUtils.getCompactNameFromCallerInfo(cit.currentInfo,mContext);
  }
  if (DBG)   log(""String_Node_Str"" + expandedViewLine2 + ""String_Node_Str"");
  contentView.setTextViewText(R.id.text2,expandedViewLine2);
  notification.contentView=contentView;
  if (DBG)   log(""String_Node_Str"" + notification);
  mNotificationMgr.notify(IN_CALL_NOTIFICATION,notification);
  updateSpeakerNotification();
  updateMuteNotification();
}",0.9903629938965628
184867,"/** 
 * Implemented for CallerInfoAsyncQuery.OnQueryCompleteListener interface. refreshes the CallCard data when it called.
 */
public void onQueryComplete(int token,Object cookie,CallerInfo ci){
  if (DBG)   log(""String_Node_Str"" + token + ""String_Node_Str""+ cookie+ ""String_Node_Str""+ ci);
  if (cookie instanceof Call) {
    if (DBG)     log(""String_Node_Str"");
    Call call=(Call)cookie;
    Connection conn=call.getEarliestConnection();
    PhoneUtils.CallerInfoToken cit=PhoneUtils.startGetCallerInfo(getContext(),conn,this,null);
    int presentation=conn.getNumberPresentation();
    if (DBG)     log(""String_Node_Str"" + presentation + ""String_Node_Str""+ ci.contactExists);
    if (ci.contactExists) {
      updateDisplayForPerson(ci,Connection.PRESENTATION_ALLOWED,false,call);
    }
 else {
      updateDisplayForPerson(cit.currentInfo,presentation,false,call);
    }
    updatePhotoForCallState(call);
  }
 else   if (cookie instanceof TextView) {
    if (DBG)     log(""String_Node_Str"");
    ((TextView)cookie).setText(PhoneUtils.getCompactNameFromCallerInfo(ci,mContext));
  }
}","/** 
 * Implemented for CallerInfoAsyncQuery.OnQueryCompleteListener interface. refreshes the CallCard data when it called.
 */
public void onQueryComplete(int token,Object cookie,CallerInfo ci){
  if (DBG)   log(""String_Node_Str"" + token + ""String_Node_Str""+ cookie+ ""String_Node_Str""+ ci);
  if (cookie instanceof Call) {
    if (DBG)     log(""String_Node_Str"");
    Call call=(Call)cookie;
    Connection conn=call.getEarliestConnection();
    PhoneUtils.CallerInfoToken cit=PhoneUtils.startGetCallerInfo(getContext(),conn,this,null);
    int presentation=Connection.PRESENTATION_ALLOWED;
    if (conn != null)     presentation=conn.getNumberPresentation();
    if (DBG)     log(""String_Node_Str"" + presentation + ""String_Node_Str""+ ci.contactExists);
    if (ci.contactExists) {
      updateDisplayForPerson(ci,Connection.PRESENTATION_ALLOWED,false,call);
    }
 else {
      updateDisplayForPerson(cit.currentInfo,presentation,false,call);
    }
    updatePhotoForCallState(call);
  }
 else   if (cookie instanceof TextView) {
    if (DBG)     log(""String_Node_Str"");
    ((TextView)cookie).setText(PhoneUtils.getCompactNameFromCallerInfo(ci,mContext));
  }
}",0.9680851063829788
184868,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mPhone=PhoneFactory.getDefaultPhone();
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    addPreferencesFromResource(R.xml.cdma_call_feature_setting);
  }
 else {
    addPreferencesFromResource(R.xml.call_feature_setting);
  }
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_VOICEMAIL_KEY);
  mSubMenuFDNSettings=(PreferenceScreen)prefSet.findPreference(BUTTON_FDN_KEY);
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mButtonVoicePrivacy=(CheckBoxPreference)findPreference(BUTTON_VP_KEY);
    mButtonTTY=(ListPreference)prefSet.findPreference(BUTTON_TTY_KEY);
    mButtonTTY.setOnPreferenceChangeListener(this);
    int settingsTtyMode=android.provider.Settings.Secure.getInt(mPhone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,preferredTtyMode);
    mButtonTTY.setValue(Integer.toString(settingsTtyMode));
    UpdatePreferredTtyModeSummary(settingsTtyMode);
    mButtonDS=(ListPreference)findPreference(BUTTON_DS_KEY);
    int index=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,preferredDtmfMode);
    mButtonDS.setValueIndex(index);
    mButtonDS.setOnPreferenceChangeListener(this);
    mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  }
 else   if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mButtonCLIR=(ListPreference)prefSet.findPreference(BUTTON_CLIR_KEY);
    mButtonCW=(CheckBoxPreference)prefSet.findPreference(BUTTON_CW_KEY);
    mButtonCFU=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFU_KEY);
    mButtonCFB=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFB_KEY);
    mButtonCFNRy=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFNRY_KEY);
    mButtonCFNRc=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFNRC_KEY);
    mButtonCFExpand=(PreferenceScreen)prefSet.findPreference(BUTTON_CF_EXPAND_KEY);
    mButtonGSMMoreExpand=(PreferenceScreen)prefSet.findPreference(BUTTON_GSM_MORE_EXPAND_KEY);
    if (mButtonCFU != null) {
      mButtonCFU.setParentActivity(this,CommandsInterface.CF_REASON_UNCONDITIONAL,this);
      mButtonCFU.setDialogOnClosedListener(this);
      mButtonCFU.setDialogTitle(R.string.labelCF);
      mButtonCFU.setDialogMessage(R.string.messageCFU);
    }
    if (mButtonCFB != null) {
      mButtonCFB.setParentActivity(this,CommandsInterface.CF_REASON_BUSY,this);
      mButtonCFB.setDialogOnClosedListener(this);
      mButtonCFB.setDependency(BUTTON_CFU_KEY);
      mButtonCFB.setDialogTitle(R.string.labelCF);
      mButtonCFB.setDialogMessage(R.string.messageCFB);
    }
    if (mButtonCFNRy != null) {
      mButtonCFNRy.setParentActivity(this,CommandsInterface.CF_REASON_NO_REPLY,this);
      mButtonCFNRy.setDialogOnClosedListener(this);
      mButtonCFNRy.setDependency(BUTTON_CFU_KEY);
      mButtonCFNRy.setDialogTitle(R.string.labelCF);
      mButtonCFNRy.setDialogMessage(R.string.messageCFNRy);
    }
    if (mButtonCFNRc != null) {
      mButtonCFNRc.setParentActivity(this,CommandsInterface.CF_REASON_NOT_REACHABLE,this);
      mButtonCFNRc.setDialogOnClosedListener(this);
      mButtonCFNRc.setDependency(BUTTON_CFU_KEY);
      mButtonCFNRc.setDialogTitle(R.string.labelCF);
      mButtonCFNRc.setDialogMessage(R.string.messageCFNRc);
    }
    if (mButtonCLIR != null) {
      mButtonCLIR.setOnPreferenceChangeListener(this);
    }
    mFDNSettingIntent=new Intent(Intent.ACTION_MAIN);
    mFDNSettingIntent.setClassName(this,FdnSetting.class.getName());
    mSubMenuFDNSettings.setIntent(mFDNSettingIntent);
  }
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (mSubMenuFDNSettings != null) {
    mFDNSettingIntent=new Intent(Intent.ACTION_MAIN);
    mFDNSettingIntent.setClassName(this,FdnSetting.class.getName());
    mSubMenuFDNSettings.setIntent(mFDNSettingIntent);
  }
  mAppState=AppState.INPUT_READY;
  if (icicle != null) {
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      mButtonVoicePrivacy.setChecked(icicle.getBoolean(BUTTON_VP_KEY));
      mButtonAutoRetry.setChecked(icicle.getBoolean(BUTTON_RETRY_KEY));
    }
 else     if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      mDialingNumCFU=icicle.getString(SUMMARY_CFU_KEY);
      mDialingNumCFB=icicle.getString(SUMMARY_CFB_KEY);
      mDialingNumCFNRy=icicle.getString(SUMMARY_CFNRY_KEY);
      mDialingNumCFNRc=icicle.getString(SUMMARY_CFNRC_KEY);
      adjustCFbuttonState(mButtonCFU,icicle.getBoolean(BUTTON_CFU_KEY),R.string.sum_cfu_enabled,mDialingNumCFU);
      adjustCFbuttonState(mButtonCFB,icicle.getBoolean(BUTTON_CFB_KEY),R.string.sum_cfb_enabled,mDialingNumCFB);
      adjustCFbuttonState(mButtonCFNRy,icicle.getBoolean(BUTTON_CFNRY_KEY),R.string.sum_cfnry_enabled,mDialingNumCFNRy);
      adjustCFbuttonState(mButtonCFNRc,icicle.getBoolean(BUTTON_CFNRC_KEY),R.string.sum_cfnrc_enabled,mDialingNumCFNRc);
      setButtonCLIRValue(icicle.getInt(BUTTON_CLIR_KEY));
      if (mButtonCW != null) {
        mButtonCW.setChecked(icicle.getBoolean(BUTTON_CW_KEY));
      }
      mCFDataStale=icicle.getBoolean(BUTTON_CF_EXPAND_KEY);
      mMoreDataStale=icicle.getBoolean(BUTTON_GSM_MORE_EXPAND_KEY);
    }
    mAppState=(AppState)icicle.getSerializable(APP_STATE_KEY);
    mDisplayMode=icicle.getInt(DISPLAY_MODE_KEY);
  }
 else {
    mCFDataStale=true;
    mMoreDataStale=true;
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL)) {
      setAppState(AppState.DIALOG_OPEN);
      mSubMenuVoicemailSettings.showPhoneNumberDialog();
    }
  }
  updateVoiceNumberField();
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mPhone=PhoneFactory.getDefaultPhone();
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    addPreferencesFromResource(R.xml.cdma_call_feature_setting);
  }
 else {
    addPreferencesFromResource(R.xml.call_feature_setting);
  }
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_VOICEMAIL_KEY);
  mSubMenuFDNSettings=(PreferenceScreen)prefSet.findPreference(BUTTON_FDN_KEY);
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mButtonVoicePrivacy=(CheckBoxPreference)findPreference(BUTTON_VP_KEY);
    mButtonTTY=(ListPreference)prefSet.findPreference(BUTTON_TTY_KEY);
    mButtonTTY.setOnPreferenceChangeListener(this);
    int settingsTtyMode=android.provider.Settings.Secure.getInt(mPhone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,preferredTtyMode);
    mButtonTTY.setValue(Integer.toString(settingsTtyMode));
    UpdatePreferredTtyModeSummary(settingsTtyMode);
    mButtonDS=(ListPreference)findPreference(BUTTON_DS_KEY);
    int index=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,preferredDtmfMode);
    mButtonDS.setValueIndex(index);
    mButtonDS.setOnPreferenceChangeListener(this);
    mButtonAutoRetry=(CheckBoxPreference)findPreference(BUTTON_RETRY_KEY);
  }
 else   if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mButtonCLIR=(ListPreference)prefSet.findPreference(BUTTON_CLIR_KEY);
    mButtonCW=(CheckBoxPreference)prefSet.findPreference(BUTTON_CW_KEY);
    mButtonCFU=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFU_KEY);
    mButtonCFB=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFB_KEY);
    mButtonCFNRy=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFNRY_KEY);
    mButtonCFNRc=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFNRC_KEY);
    mButtonCFExpand=(PreferenceScreen)prefSet.findPreference(BUTTON_CF_EXPAND_KEY);
    mButtonGSMMoreExpand=(PreferenceScreen)prefSet.findPreference(BUTTON_GSM_MORE_EXPAND_KEY);
    if (mButtonCFU != null) {
      mButtonCFU.setParentActivity(this,CommandsInterface.CF_REASON_UNCONDITIONAL,this);
      mButtonCFU.setDialogOnClosedListener(this);
      mButtonCFU.setDialogTitle(R.string.labelCF);
      mButtonCFU.setDialogMessage(R.string.messageCFU);
    }
    if (mButtonCFB != null) {
      mButtonCFB.setParentActivity(this,CommandsInterface.CF_REASON_BUSY,this);
      mButtonCFB.setDialogOnClosedListener(this);
      mButtonCFB.setDependency(BUTTON_CFU_KEY);
      mButtonCFB.setDialogTitle(R.string.labelCF);
      mButtonCFB.setDialogMessage(R.string.messageCFB);
    }
    if (mButtonCFNRy != null) {
      mButtonCFNRy.setParentActivity(this,CommandsInterface.CF_REASON_NO_REPLY,this);
      mButtonCFNRy.setDialogOnClosedListener(this);
      mButtonCFNRy.setDependency(BUTTON_CFU_KEY);
      mButtonCFNRy.setDialogTitle(R.string.labelCF);
      mButtonCFNRy.setDialogMessage(R.string.messageCFNRy);
    }
    if (mButtonCFNRc != null) {
      mButtonCFNRc.setParentActivity(this,CommandsInterface.CF_REASON_NOT_REACHABLE,this);
      mButtonCFNRc.setDialogOnClosedListener(this);
      mButtonCFNRc.setDependency(BUTTON_CFU_KEY);
      mButtonCFNRc.setDialogTitle(R.string.labelCF);
      mButtonCFNRc.setDialogMessage(R.string.messageCFNRc);
    }
    if (mButtonCLIR != null) {
      mButtonCLIR.setOnPreferenceChangeListener(this);
    }
    if (mSubMenuFDNSettings != null) {
      mFDNSettingIntent=new Intent(Intent.ACTION_MAIN);
      mFDNSettingIntent.setClassName(this,FdnSetting.class.getName());
      mSubMenuFDNSettings.setIntent(mFDNSettingIntent);
    }
  }
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (mSubMenuFDNSettings != null) {
    mFDNSettingIntent=new Intent(Intent.ACTION_MAIN);
    mFDNSettingIntent.setClassName(this,FdnSetting.class.getName());
    mSubMenuFDNSettings.setIntent(mFDNSettingIntent);
  }
  mAppState=AppState.INPUT_READY;
  if (icicle != null) {
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      mButtonVoicePrivacy.setChecked(icicle.getBoolean(BUTTON_VP_KEY));
      mButtonAutoRetry.setChecked(icicle.getBoolean(BUTTON_RETRY_KEY));
    }
 else     if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      mDialingNumCFU=icicle.getString(SUMMARY_CFU_KEY);
      mDialingNumCFB=icicle.getString(SUMMARY_CFB_KEY);
      mDialingNumCFNRy=icicle.getString(SUMMARY_CFNRY_KEY);
      mDialingNumCFNRc=icicle.getString(SUMMARY_CFNRC_KEY);
      adjustCFbuttonState(mButtonCFU,icicle.getBoolean(BUTTON_CFU_KEY),R.string.sum_cfu_enabled,mDialingNumCFU);
      adjustCFbuttonState(mButtonCFB,icicle.getBoolean(BUTTON_CFB_KEY),R.string.sum_cfb_enabled,mDialingNumCFB);
      adjustCFbuttonState(mButtonCFNRy,icicle.getBoolean(BUTTON_CFNRY_KEY),R.string.sum_cfnry_enabled,mDialingNumCFNRy);
      adjustCFbuttonState(mButtonCFNRc,icicle.getBoolean(BUTTON_CFNRC_KEY),R.string.sum_cfnrc_enabled,mDialingNumCFNRc);
      setButtonCLIRValue(icicle.getInt(BUTTON_CLIR_KEY));
      if (mButtonCW != null) {
        mButtonCW.setChecked(icicle.getBoolean(BUTTON_CW_KEY));
      }
      mCFDataStale=icicle.getBoolean(BUTTON_CF_EXPAND_KEY);
      mMoreDataStale=icicle.getBoolean(BUTTON_GSM_MORE_EXPAND_KEY);
    }
    mAppState=(AppState)icicle.getSerializable(APP_STATE_KEY);
    mDisplayMode=icicle.getInt(DISPLAY_MODE_KEY);
  }
 else {
    mCFDataStale=true;
    mMoreDataStale=true;
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL)) {
      setAppState(AppState.DIALOG_OPEN);
      mSubMenuVoicemailSettings.showPhoneNumberDialog();
    }
  }
  updateVoiceNumberField();
}",0.995808334018246
184869,"/** 
 * Updates the main block of caller info on the CallCard (ie. the stuff in the mainCallCard block) based on the specified Call.
 */
private void displayMainCallStatus(Phone phone,Call call){
  if (DBG)   log(""String_Node_Str"" + phone + ""String_Node_Str""+ call+ ""String_Node_Str"");
  if (call == null) {
    mMainCallCard.setVisibility(View.GONE);
    return;
  }
  mMainCallCard.setVisibility(View.VISIBLE);
  Call.State state=call.getState();
  if (DBG)   log(""String_Node_Str"" + call.getState());
  int callCardBackgroundResid=0;
  boolean landscapeMode=InCallScreen.ConfigurationHelper.isLandscape();
  final boolean bluetoothActive=mApplication.showBluetoothIndication();
switch (state) {
case ACTIVE:
    if (bluetoothActive) {
      callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
    }
 else {
      callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_connected_tall_land : R.drawable.incall_frame_connected_tall_port;
    }
  if (DBG)   log(""String_Node_Str"");
mCallTime.setActiveCallMode(call);
mCallTime.reset();
mCallTime.periodicUpdateTimer();
break;
case HOLDING:
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_hold_tall_land : R.drawable.incall_frame_hold_tall_port;
mCallTime.cancelTimer();
break;
case DISCONNECTED:
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_ended_tall_land : R.drawable.incall_frame_ended_tall_port;
mCallTime.cancelTimer();
break;
case DIALING:
case ALERTING:
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case INCOMING:
case WAITING:
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case IDLE:
Log.w(LOG_TAG,""String_Node_Str"");
break;
default :
Log.w(LOG_TAG,""String_Node_Str"" + state);
break;
}
setMainCallCardBackgroundResource(callCardBackgroundResid);
updateCardTitleWidgets(phone,call);
if (PhoneUtils.isConferenceCall(call)) {
updateDisplayForConference();
}
 else {
Connection conn=null;
if (phone.getPhoneName().equals(""String_Node_Str"")) {
conn=call.getLatestConnection();
}
 else {
conn=call.getEarliestConnection();
}
if (conn == null) {
if (DBG) log(""String_Node_Str"");
CallerInfo info=PhoneUtils.getCallerInfo(getContext(),null);
updateDisplayForPerson(info,Connection.PRESENTATION_ALLOWED,false,call);
}
 else {
if (DBG) log(""String_Node_Str"" + conn + ""String_Node_Str""+ conn.getState());
int presentation=conn.getNumberPresentation();
boolean runQuery=true;
Object o=conn.getUserData();
if (o instanceof PhoneUtils.CallerInfoToken) {
runQuery=mPhotoTracker.isDifferentImageRequest(((PhoneUtils.CallerInfoToken)o).currentInfo);
}
 else {
runQuery=mPhotoTracker.isDifferentImageRequest(conn);
}
if (runQuery) {
if (DBG) log(""String_Node_Str"");
PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),conn,this,call);
updateDisplayForPerson(info.currentInfo,presentation,!info.isFinal,call);
}
 else {
if (DBG) log(""String_Node_Str"");
if (o instanceof CallerInfo) {
CallerInfo ci=(CallerInfo)o;
ci.cnapName=conn.getCnapName();
ci.numberPresentation=conn.getNumberPresentation();
ci.namePresentation=conn.getCnapNamePresentation();
if (DBG) log(""String_Node_Str"" + ""String_Node_Str"" + ci.cnapName + ""String_Node_Str""+ ci.numberPresentation);
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,false,call);
}
 else if (o instanceof PhoneUtils.CallerInfoToken) {
CallerInfo ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
if (DBG) log(""String_Node_Str"" + ""String_Node_Str"" + ci.cnapName + ""String_Node_Str""+ ci.numberPresentation);
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,true,call);
}
 else {
Log.w(LOG_TAG,""String_Node_Str"" + ""String_Node_Str"" + o);
}
}
}
}
updatePhotoForCallState(call);
}","/** 
 * Updates the main block of caller info on the CallCard (ie. the stuff in the mainCallCard block) based on the specified Call.
 */
private void displayMainCallStatus(Phone phone,Call call){
  if (DBG)   log(""String_Node_Str"" + phone + ""String_Node_Str""+ call+ ""String_Node_Str"");
  if (call == null) {
    mMainCallCard.setVisibility(View.GONE);
    return;
  }
  mMainCallCard.setVisibility(View.VISIBLE);
  Call.State state=call.getState();
  if (DBG)   log(""String_Node_Str"" + call.getState());
  int callCardBackgroundResid=0;
  boolean landscapeMode=InCallScreen.ConfigurationHelper.isLandscape();
  final boolean bluetoothActive=mApplication.showBluetoothIndication();
switch (state) {
case ACTIVE:
    if (bluetoothActive) {
      callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
    }
 else {
      callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_connected_tall_land : R.drawable.incall_frame_connected_tall_port;
    }
  if (DBG)   log(""String_Node_Str"");
mCallTime.setActiveCallMode(call);
mCallTime.reset();
mCallTime.periodicUpdateTimer();
break;
case HOLDING:
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_hold_tall_land : R.drawable.incall_frame_hold_tall_port;
mCallTime.cancelTimer();
break;
case DISCONNECTED:
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_ended_tall_land : R.drawable.incall_frame_ended_tall_port;
mCallTime.cancelTimer();
break;
case DIALING:
case ALERTING:
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case INCOMING:
case WAITING:
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case IDLE:
Log.w(LOG_TAG,""String_Node_Str"");
break;
default :
Log.w(LOG_TAG,""String_Node_Str"" + state);
break;
}
setMainCallCardBackgroundResource(callCardBackgroundResid);
updateCardTitleWidgets(phone,call);
if (PhoneUtils.isConferenceCall(call)) {
updateDisplayForConference();
}
 else {
Connection conn=null;
if (phone.getPhoneName().equals(""String_Node_Str"")) {
conn=call.getLatestConnection();
}
 else {
conn=call.getEarliestConnection();
}
if (conn == null) {
if (DBG) log(""String_Node_Str"");
CallerInfo info=PhoneUtils.getCallerInfo(getContext(),null);
updateDisplayForPerson(info,Connection.PRESENTATION_ALLOWED,false,call);
}
 else {
if (DBG) log(""String_Node_Str"" + conn + ""String_Node_Str""+ conn.getState());
int presentation=conn.getNumberPresentation();
boolean runQuery=true;
Object o=conn.getUserData();
if (o instanceof PhoneUtils.CallerInfoToken) {
runQuery=mPhotoTracker.isDifferentImageRequest(((PhoneUtils.CallerInfoToken)o).currentInfo);
}
 else {
runQuery=mPhotoTracker.isDifferentImageRequest(conn);
}
if (phone.getPhoneName().equals(""String_Node_Str"")) {
Object obj=conn.getUserData();
String updatedNumber=conn.getAddress();
String updatedCnapName=conn.getCnapName();
CallerInfo info=null;
if (obj instanceof PhoneUtils.CallerInfoToken) {
info=((PhoneUtils.CallerInfoToken)o).currentInfo;
}
 else if (o instanceof CallerInfo) {
info=(CallerInfo)o;
}
if (info != null) {
if (updatedNumber != null && !updatedNumber.equals(info.phoneNumber)) {
if (DBG) log(""String_Node_Str"" + updatedNumber);
runQuery=true;
}
if (updatedCnapName != null && !updatedCnapName.equals(info.cnapName)) {
if (DBG) log(""String_Node_Str"" + updatedCnapName);
runQuery=true;
}
}
}
if (runQuery) {
if (DBG) log(""String_Node_Str"");
PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),conn,this,call);
updateDisplayForPerson(info.currentInfo,presentation,!info.isFinal,call);
}
 else {
if (DBG) log(""String_Node_Str"");
if (o instanceof CallerInfo) {
CallerInfo ci=(CallerInfo)o;
ci.cnapName=conn.getCnapName();
ci.numberPresentation=conn.getNumberPresentation();
ci.namePresentation=conn.getCnapNamePresentation();
if (DBG) log(""String_Node_Str"" + ""String_Node_Str"" + ci.cnapName + ""String_Node_Str""+ ci.numberPresentation);
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,false,call);
}
 else if (o instanceof PhoneUtils.CallerInfoToken) {
CallerInfo ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
if (DBG) log(""String_Node_Str"" + ""String_Node_Str"" + ci.cnapName + ""String_Node_Str""+ ci.numberPresentation);
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,true,call);
}
 else {
Log.w(LOG_TAG,""String_Node_Str"" + ""String_Node_Str"" + o);
}
}
}
}
updatePhotoForCallState(call);
}",0.9295501132808286
184870,"/** 
 * place a temporary callerinfo object in the hands of the caller and notify caller when the actual query is done.
 */
static CallerInfoToken startGetCallerInfo(Context context,Connection c,CallerInfoAsyncQuery.OnQueryCompleteListener listener,Object cookie){
  CallerInfoToken cit;
  if (c == null) {
    cit=new CallerInfoToken();
    cit.asyncQuery=null;
    return cit;
  }
  Object userDataObject=c.getUserData();
  if (userDataObject instanceof Uri) {
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,(Uri)userDataObject,sCallerInfoQueryListener,c);
    cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
    cit.isFinal=false;
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + userDataObject);
  }
 else   if (userDataObject == null) {
    String number=c.getAddress();
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    if (DBG)     log(""String_Node_Str"" + number);
    if (!TextUtils.isEmpty(number)) {
      cit.currentInfo.phoneNumber=number;
      cit.currentInfo.cnapName=c.getCnapName();
      cit.currentInfo.name=cit.currentInfo.cnapName;
      cit.currentInfo.numberPresentation=c.getNumberPresentation();
      cit.currentInfo.namePresentation=c.getCnapNamePresentation();
      if (DBG)       log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
      cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,number,sCallerInfoQueryListener,c);
      cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
      cit.isFinal=false;
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      cit.isFinal=true;
    }
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + number);
  }
 else   if (userDataObject instanceof CallerInfoToken) {
    cit=(CallerInfoToken)userDataObject;
    if (cit.asyncQuery != null) {
      cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
      if (DBG)       log(""String_Node_Str"" + listener.getClass().toString());
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      if (cit.currentInfo == null) {
        cit.currentInfo=new CallerInfo();
      }
      cit.isFinal=true;
    }
  }
 else {
    cit=new CallerInfoToken();
    cit.currentInfo=(CallerInfo)userDataObject;
    cit.asyncQuery=null;
    cit.isFinal=true;
    if (DBG)     log(""String_Node_Str"");
  }
  return cit;
}","/** 
 * place a temporary callerinfo object in the hands of the caller and notify caller when the actual query is done.
 */
static CallerInfoToken startGetCallerInfo(Context context,Connection c,CallerInfoAsyncQuery.OnQueryCompleteListener listener,Object cookie){
  CallerInfoToken cit;
  if (c == null) {
    cit=new CallerInfoToken();
    cit.asyncQuery=null;
    return cit;
  }
  Object userDataObject=c.getUserData();
  if (userDataObject instanceof Uri) {
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,(Uri)userDataObject,sCallerInfoQueryListener,c);
    cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
    cit.isFinal=false;
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + userDataObject);
  }
 else   if (userDataObject == null) {
    String number=c.getAddress();
    cit=new CallerInfoToken();
    cit.currentInfo=new CallerInfo();
    if (DBG)     log(""String_Node_Str"" + number);
    if (!TextUtils.isEmpty(number)) {
      cit.currentInfo.phoneNumber=number;
      cit.currentInfo.cnapName=c.getCnapName();
      cit.currentInfo.name=cit.currentInfo.cnapName;
      cit.currentInfo.numberPresentation=c.getNumberPresentation();
      cit.currentInfo.namePresentation=c.getCnapNamePresentation();
      if (DBG)       log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
      cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,number,sCallerInfoQueryListener,c);
      cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
      cit.isFinal=false;
    }
 else {
      if (DBG)       log(""String_Node_Str"");
      cit.isFinal=true;
    }
    c.setUserData(cit);
    if (DBG)     log(""String_Node_Str"" + number);
  }
 else   if (userDataObject instanceof CallerInfoToken) {
    cit=(CallerInfoToken)userDataObject;
    if (cit.asyncQuery != null) {
      cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
      if (DBG)       log(""String_Node_Str"" + listener.getClass().toString());
    }
 else {
      String updatedNumber=c.getAddress();
      if (DBG)       log(""String_Node_Str"" + updatedNumber);
      if (!TextUtils.isEmpty(updatedNumber)) {
        cit.currentInfo.phoneNumber=updatedNumber;
        cit.currentInfo.cnapName=c.getCnapName();
        cit.currentInfo.name=cit.currentInfo.cnapName;
        cit.currentInfo.numberPresentation=c.getNumberPresentation();
        cit.currentInfo.namePresentation=c.getCnapNamePresentation();
        if (DBG)         log(""String_Node_Str"" + cit.currentInfo.cnapName + ""String_Node_Str""+ cit.currentInfo.numberPresentation);
        cit.asyncQuery=CallerInfoAsyncQuery.startQuery(QUERY_TOKEN,context,updatedNumber,sCallerInfoQueryListener,c);
        cit.asyncQuery.addQueryListener(QUERY_TOKEN,listener,cookie);
        cit.isFinal=false;
      }
 else {
        if (DBG)         log(""String_Node_Str"");
        if (cit.currentInfo == null) {
          cit.currentInfo=new CallerInfo();
        }
        cit.isFinal=true;
      }
    }
  }
 else {
    cit=new CallerInfoToken();
    cit.currentInfo=(CallerInfo)userDataObject;
    cit.asyncQuery=null;
    cit.isFinal=true;
    if (DBG)     log(""String_Node_Str"");
  }
  return cit;
}",0.8444291134874095
184871,"/** 
 * Implemented for CallerInfoAsyncQuery.OnQueryCompleteListener interface. refreshes the CallCard data when it called.
 */
public void onQueryComplete(int token,Object cookie,CallerInfo ci){
  if (DBG)   log(""String_Node_Str"" + token + ""String_Node_Str""+ cookie+ ""String_Node_Str""+ ci);
  if (cookie instanceof Call) {
    if (DBG)     log(""String_Node_Str"");
    Call call=(Call)cookie;
    Connection conn=call.getEarliestConnection();
    PhoneUtils.CallerInfoToken cit=PhoneUtils.startGetCallerInfo(getContext(),conn,this,null);
    int presentation=conn.getNumberPresentation();
    if (DBG)     log(""String_Node_Str"" + presentation + ""String_Node_Str""+ ci.contactExists);
    if (ci.contactExists) {
      updateDisplayForPerson(ci,Connection.PRESENTATION_ALLOWED,false,call);
    }
 else {
      updateDisplayForPerson(cit.currentInfo,presentation,false,call);
    }
    updatePhotoForCallState(call);
  }
 else   if (cookie instanceof TextView) {
    if (DBG)     log(""String_Node_Str"");
    ((TextView)cookie).setText(PhoneUtils.getCompactNameFromCallerInfo(ci,mContext));
  }
}","/** 
 * Implemented for CallerInfoAsyncQuery.OnQueryCompleteListener interface. refreshes the CallCard data when it called.
 */
public void onQueryComplete(int token,Object cookie,CallerInfo ci){
  if (DBG)   log(""String_Node_Str"" + token + ""String_Node_Str""+ cookie+ ""String_Node_Str""+ ci);
  if (cookie instanceof Call) {
    if (DBG)     log(""String_Node_Str"");
    Call call=(Call)cookie;
    Connection conn=call.getEarliestConnection();
    PhoneUtils.CallerInfoToken cit=PhoneUtils.startGetCallerInfo(getContext(),conn,this,null);
    int presentation=Connection.PRESENTATION_ALLOWED;
    if (conn != null)     presentation=conn.getNumberPresentation();
    if (DBG)     log(""String_Node_Str"" + presentation + ""String_Node_Str""+ ci.contactExists);
    if (ci.contactExists) {
      updateDisplayForPerson(ci,Connection.PRESENTATION_ALLOWED,false,call);
    }
 else {
      updateDisplayForPerson(cit.currentInfo,presentation,false,call);
    }
    updatePhotoForCallState(call);
  }
 else   if (cookie instanceof TextView) {
    if (DBG)     log(""String_Node_Str"");
    ((TextView)cookie).setText(PhoneUtils.getCompactNameFromCallerInfo(ci,mContext));
  }
}",0.9680851063829788
184872,"/** 
 * Request to disconnect SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block.
 */
synchronized void audioOff(){
  if (VDBG)   log(""String_Node_Str"");
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED);
    mConnectedSco.close();
    mConnectedSco=null;
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
}","/** 
 * Request to disconnect SCO (audio) connection to bluetooth headset/handsfree, if one is connected. Does not block.
 */
synchronized void audioOff(){
  if (VDBG)   log(""String_Node_Str"");
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getAddress());
    mConnectedSco.close();
    mConnectedSco=null;
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
}",0.977687626774848
184873,"private void broadcastAudioStateIntent(int state){
  if (VDBG)   log(""String_Node_Str"" + state + ""String_Node_Str"");
  Intent intent=new Intent(BluetoothIntent.HEADSET_AUDIO_STATE_CHANGED_ACTION);
  intent.putExtra(BluetoothIntent.HEADSET_AUDIO_STATE,state);
  mContext.sendBroadcast(intent,android.Manifest.permission.BLUETOOTH);
}","private void broadcastAudioStateIntent(int state,String address){
  if (VDBG)   log(""String_Node_Str"" + state + ""String_Node_Str"");
  Intent intent=new Intent(BluetoothIntent.HEADSET_AUDIO_STATE_CHANGED_ACTION);
  intent.putExtra(BluetoothIntent.HEADSET_AUDIO_STATE,state);
  intent.putExtra(BluetoothIntent.ADDRESS,address);
  mContext.sendBroadcast(intent,android.Manifest.permission.BLUETOOTH);
}",0.908344733242134
184874,"/** 
 * Register AT Command handlers to implement the Handsfree profile
 */
private void initializeHandsfreeAtParser(){
  if (DBG)   log(""String_Node_Str"");
  AtParser parser=mHeadset.getAtParser();
  parser.register('A',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      PhoneUtils.answerCall(mPhone);
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register('D',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      if (args.length() > 0) {
        if (args.charAt(0) == '>') {
          if (args.startsWith(""String_Node_Str"")) {
            return new AtCommandResult(AtCommandResult.ERROR);
          }
          return redial();
        }
 else {
          if (args.charAt(args.length() - 1) == ';') {
            args=args.substring(0,args.length() - 1);
          }
          Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",args,null));
          intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          mContext.startActivity(intent);
          expectCallStart();
          return new AtCommandResult(AtCommandResult.UNSOLICITED);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      if (!mForegroundCall.isIdle()) {
        PhoneUtils.hangup(mForegroundCall);
      }
 else       if (!mRingingCall.isIdle()) {
        PhoneUtils.hangup(mRingingCall);
      }
 else       if (!mBackgroundCall.isIdle()) {
        PhoneUtils.hangup(mBackgroundCall);
      }
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    private AtCommandResult sendBRSF(){
      return new AtCommandResult(""String_Node_Str"" + mLocalBrsf);
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 1 && (args[0] instanceof Integer)) {
        mRemoteBrsf=(Integer)args[0];
      }
 else {
        Log.w(TAG,""String_Node_Str"");
      }
      return sendBRSF();
    }
    @Override public AtCommandResult handleActionCommand(){
      return sendBRSF();
    }
    @Override public AtCommandResult handleReadCommand(){
      return sendBRSF();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mIndicatorsEnabled ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length < 4) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else       if (args[0].equals(3) && args[1].equals(0) && args[2].equals(0)) {
        boolean valid=false;
        if (args[3].equals(0)) {
          mIndicatorsEnabled=false;
          valid=true;
        }
 else         if (args[3].equals(1)) {
          mIndicatorsEnabled=true;
          valid=true;
        }
        if (valid) {
          if ((mRemoteBrsf & BRSF_HF_CW_THREE_WAY_CALLING) == 0x0) {
            mServiceConnectionEstablished=true;
            sendURC(""String_Node_Str"");
            if (isIncallAudio()) {
              audioOn();
            }
            return new AtCommandResult(AtCommandResult.UNSOLICITED);
          }
 else {
            return new AtCommandResult(AtCommandResult.OK);
          }
        }
      }
      return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      mCmee=true;
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mCmee ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 0) {
        mCmee=false;
        return new AtCommandResult(AtCommandResult.OK);
      }
 else       if (!(args[0] instanceof Integer)) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else {
        mCmee=((Integer)args[0] == 1);
        return new AtCommandResult(AtCommandResult.OK);
      }
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return redial();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return mBluetoothPhoneState.toCindResult();
    }
    @Override public AtCommandResult handleTestCommand(){
      return mBluetoothPhoneState.getCindTestResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return mBluetoothPhoneState.toCsqResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(mBluetoothPhoneState.toCregString());
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length >= 1) {
        char c;
        if (args[0] instanceof Integer) {
          c=((Integer)args[0]).toString().charAt(0);
        }
 else {
          c=((String)args[0]).charAt(0);
        }
        if (isValidDtmf(c)) {
          mPhone.sendDtmf(c);
          return new AtCommandResult(AtCommandResult.OK);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
    private boolean isValidDtmf(    char c){
switch (c) {
case '#':
case '*':
        return true;
default :
      if (Character.digit(c,14) != -1) {
        return true;
      }
    return false;
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return getClccResult();
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1) {
  if (args[0].equals(0)) {
    boolean result;
    if (mRingingCall.isRinging()) {
      result=PhoneUtils.hangupRingingCall(mPhone);
    }
 else {
      result=PhoneUtils.hangupHoldingCall(mPhone);
    }
    if (result) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(1)) {
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      PhoneUtils.answerCall(mPhone);
      PhoneUtils.setMute(mPhone,false);
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      if (PhoneUtils.answerAndEndActive(mPhone)) {
        return new AtCommandResult(AtCommandResult.OK);
      }
 else {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
    }
  }
 else   if (args[0].equals(2)) {
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      PhoneUtils.answerCall(mPhone);
      PhoneUtils.setMute(mPhone,false);
    }
 else {
      PhoneUtils.switchHoldingAndActive(mPhone);
    }
    return new AtCommandResult(AtCommandResult.OK);
  }
 else   if (args[0].equals(3)) {
    if (mForegroundCall.getState().isAlive() && mBackgroundCall.getState().isAlive()) {
      PhoneUtils.mergeCalls(mPhone);
    }
    return new AtCommandResult(AtCommandResult.OK);
  }
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
mServiceConnectionEstablished=true;
sendURC(""String_Node_Str"");
sendURC(""String_Node_Str"");
if (isIncallAudio()) {
  audioOn();
}
return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
String operatorName=mPhone.getServiceState().getOperatorAlphaLong();
if (operatorName != null) {
  if (operatorName.length() > 16) {
    operatorName=operatorName.substring(0,16);
  }
  return new AtCommandResult(""String_Node_Str"" + operatorName + ""String_Node_Str"");
}
 else {
  return new AtCommandResult(""String_Node_Str"");
}
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 2 || !(args[0] instanceof Integer) || !(args[1] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
 else if ((Integer)args[0] != 3 || (Integer)args[1] != 0) {
  return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
}
 else {
  return new AtCommandResult(AtCommandResult.OK);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(AtCommandResult.OK);
}
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String imsi=mPhone.getSubscriberId();
if (imsi == null || imsi.length() == 0) {
  return reportCmeError(BluetoothCmeError.SIM_FAILURE);
}
 else {
  return new AtCommandResult(imsi);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"" + (mClip ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1 && (args[0].equals(0) || args[0].equals(1))) {
  mClip=args[0].equals(1);
  return new AtCommandResult(AtCommandResult.OK);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return new AtCommandResult(""String_Node_Str"" + mPhone.getDeviceId());
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String model=SystemProperties.get(""String_Node_Str"");
if (model != null) {
  return new AtCommandResult(""String_Node_Str"" + model);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String manuf=SystemProperties.get(""String_Node_Str"");
if (manuf != null) {
  return new AtCommandResult(""String_Node_Str"" + manuf);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args[0].equals(0)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
 else if (args[0].equals(1)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
if (args.length >= 1 && args[0].equals(1)) {
synchronized (BluetoothHandsfree.this) {
    if (!mWaitingForVoiceRecognition) {
      try {
        mContext.startActivity(sVoiceCommandIntent);
      }
 catch (      ActivityNotFoundException e) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
      expectVoiceRecognition();
    }
  }
  return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
 else if (args.length >= 1 && args[0].equals(0)) {
  audioOff();
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String number=mPhone.getLine1Number();
if (number == null) {
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(""String_Node_Str"" + number + ""String_Node_Str""+ PhoneNumberUtils.toaFromString(number)+ ""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 1 || !(args[0] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
mScoGain=(Integer)args[0];
int flag=mAudioManager.isBluetoothScoOn() ? AudioManager.FLAG_SHOW_UI : 0;
mAudioManager.setStreamVolume(AudioManager.STREAM_BLUETOOTH_SCO,mScoGain,flag);
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
int status=0;
switch (mPhone.getState()) {
case IDLE:
  status=0;
break;
case RINGING:
status=3;
break;
case OFFHOOK:
status=4;
break;
}
return new AtCommandResult(""String_Node_Str"" + status);
}
}
);
mPhonebook.register(parser);
}","/** 
 * Register AT Command handlers to implement the Handsfree profile
 */
private void initializeHandsfreeAtParser(){
  if (DBG)   log(""String_Node_Str"");
  AtParser parser=mHeadset.getAtParser();
  parser.register('A',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      PhoneUtils.answerCall(mPhone);
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register('D',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      if (args.length() > 0) {
        if (args.charAt(0) == '>') {
          if (args.startsWith(""String_Node_Str"")) {
            return new AtCommandResult(AtCommandResult.ERROR);
          }
          return redial();
        }
 else {
          if (args.charAt(args.length() - 1) == ';') {
            args=args.substring(0,args.length() - 1);
          }
          Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",args,null));
          intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          mContext.startActivity(intent);
          expectCallStart();
          return new AtCommandResult(AtCommandResult.UNSOLICITED);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      if (!mForegroundCall.isIdle()) {
        PhoneUtils.hangup(mForegroundCall);
      }
 else       if (!mRingingCall.isIdle()) {
        PhoneUtils.hangup(mRingingCall);
      }
 else       if (!mBackgroundCall.isIdle()) {
        PhoneUtils.hangup(mBackgroundCall);
      }
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    private AtCommandResult sendBRSF(){
      return new AtCommandResult(""String_Node_Str"" + mLocalBrsf);
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 1 && (args[0] instanceof Integer)) {
        mRemoteBrsf=(Integer)args[0];
      }
 else {
        Log.w(TAG,""String_Node_Str"");
      }
      return sendBRSF();
    }
    @Override public AtCommandResult handleActionCommand(){
      return sendBRSF();
    }
    @Override public AtCommandResult handleReadCommand(){
      return sendBRSF();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mIndicatorsEnabled ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length < 4) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else       if (args[0].equals(3) && args[1].equals(0) && args[2].equals(0)) {
        boolean valid=false;
        if (args[3].equals(0)) {
          mIndicatorsEnabled=false;
          valid=true;
        }
 else         if (args[3].equals(1)) {
          mIndicatorsEnabled=true;
          valid=true;
        }
        if (valid) {
          if ((mRemoteBrsf & BRSF_HF_CW_THREE_WAY_CALLING) == 0x0) {
            mServiceConnectionEstablished=true;
            sendURC(""String_Node_Str"");
            if (isIncallAudio()) {
              audioOn();
            }
            return new AtCommandResult(AtCommandResult.UNSOLICITED);
          }
 else {
            return new AtCommandResult(AtCommandResult.OK);
          }
        }
      }
      return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      mCmee=true;
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mCmee ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 0) {
        mCmee=false;
        return new AtCommandResult(AtCommandResult.OK);
      }
 else       if (!(args[0] instanceof Integer)) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else {
        mCmee=((Integer)args[0] == 1);
        return new AtCommandResult(AtCommandResult.OK);
      }
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return redial();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return mBluetoothPhoneState.toCindResult();
    }
    @Override public AtCommandResult handleTestCommand(){
      return mBluetoothPhoneState.getCindTestResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return mBluetoothPhoneState.toCsqResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(mBluetoothPhoneState.toCregString());
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length >= 1) {
        char c;
        if (args[0] instanceof Integer) {
          c=((Integer)args[0]).toString().charAt(0);
        }
 else {
          c=((String)args[0]).charAt(0);
        }
        if (isValidDtmf(c)) {
          mPhone.sendDtmf(c);
          return new AtCommandResult(AtCommandResult.OK);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
    private boolean isValidDtmf(    char c){
switch (c) {
case '#':
case '*':
        return true;
default :
      if (Character.digit(c,14) != -1) {
        return true;
      }
    return false;
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return getClccResult();
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1) {
  if (args[0].equals(0)) {
    boolean result;
    if (mRingingCall.isRinging()) {
      result=PhoneUtils.hangupRingingCall(mPhone);
    }
 else {
      result=PhoneUtils.hangupHoldingCall(mPhone);
    }
    if (result) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(1)) {
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      PhoneUtils.answerCall(mPhone);
      PhoneUtils.setMute(mPhone,false);
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      if (PhoneUtils.answerAndEndActive(mPhone)) {
        return new AtCommandResult(AtCommandResult.OK);
      }
 else {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
    }
  }
 else   if (args[0].equals(2)) {
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      PhoneUtils.answerCall(mPhone);
      PhoneUtils.setMute(mPhone,false);
    }
 else {
      PhoneUtils.switchHoldingAndActive(mPhone);
    }
    return new AtCommandResult(AtCommandResult.OK);
  }
 else   if (args[0].equals(3)) {
    if (mForegroundCall.getState().isAlive() && mBackgroundCall.getState().isAlive()) {
      PhoneUtils.mergeCalls(mPhone);
    }
    return new AtCommandResult(AtCommandResult.OK);
  }
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
mServiceConnectionEstablished=true;
sendURC(""String_Node_Str"");
sendURC(""String_Node_Str"");
if (isIncallAudio()) {
  audioOn();
}
return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
String operatorName=mPhone.getServiceState().getOperatorAlphaLong();
if (operatorName != null) {
  if (operatorName.length() > 16) {
    operatorName=operatorName.substring(0,16);
  }
  return new AtCommandResult(""String_Node_Str"" + operatorName + ""String_Node_Str"");
}
 else {
  return new AtCommandResult(""String_Node_Str"");
}
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 2 || !(args[0] instanceof Integer) || !(args[1] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
 else if ((Integer)args[0] != 3 || (Integer)args[1] != 0) {
  return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
}
 else {
  return new AtCommandResult(AtCommandResult.OK);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(AtCommandResult.OK);
}
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String imsi=mPhone.getSubscriberId();
if (imsi == null || imsi.length() == 0) {
  return reportCmeError(BluetoothCmeError.SIM_FAILURE);
}
 else {
  return new AtCommandResult(imsi);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"" + (mClip ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1 && (args[0].equals(0) || args[0].equals(1))) {
  mClip=args[0].equals(1);
  return new AtCommandResult(AtCommandResult.OK);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return new AtCommandResult(""String_Node_Str"" + mPhone.getDeviceId());
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String model=SystemProperties.get(""String_Node_Str"");
if (model != null) {
  return new AtCommandResult(""String_Node_Str"" + model);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String manuf=SystemProperties.get(""String_Node_Str"");
if (manuf != null) {
  return new AtCommandResult(""String_Node_Str"" + manuf);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args[0].equals(0)) {
  mAudioManager.setParameters(HEADSET_NREC + ""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
 else if (args[0].equals(1)) {
  mAudioManager.setParameters(HEADSET_NREC + ""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
if (args.length >= 1 && args[0].equals(1)) {
synchronized (BluetoothHandsfree.this) {
    if (!mWaitingForVoiceRecognition) {
      try {
        mContext.startActivity(sVoiceCommandIntent);
      }
 catch (      ActivityNotFoundException e) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
      expectVoiceRecognition();
    }
  }
  return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
 else if (args.length >= 1 && args[0].equals(0)) {
  audioOff();
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String number=mPhone.getLine1Number();
if (number == null) {
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(""String_Node_Str"" + number + ""String_Node_Str""+ PhoneNumberUtils.toaFromString(number)+ ""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 1 || !(args[0] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
mScoGain=(Integer)args[0];
int flag=mAudioManager.isBluetoothScoOn() ? AudioManager.FLAG_SHOW_UI : 0;
mAudioManager.setStreamVolume(AudioManager.STREAM_BLUETOOTH_SCO,mScoGain,flag);
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
int status=0;
switch (mPhone.getState()) {
case IDLE:
  status=0;
break;
case RINGING:
status=3;
break;
case OFFHOOK:
status=4;
break;
}
return new AtCommandResult(""String_Node_Str"" + status);
}
}
);
mPhonebook.register(parser);
}",0.9996579325442976
184875,"private void configAudioParameters(){
  String name=mHeadset.getName();
  if (name == null) {
    name=""String_Node_Str"";
  }
  mAudioManager.setParameter(HEADSET_NAME,name);
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
}","private void configAudioParameters(){
  String name=mHeadset.getName();
  if (name == null) {
    name=""String_Node_Str"";
  }
  mAudioManager.setParameters(HEADSET_NAME + ""String_Node_Str"" + name+ ""String_Node_Str""+ HEADSET_NREC+ ""String_Node_Str"");
}",0.6993865030674846
184876,"@Override public void handleMessage(Message msg){
synchronized (BluetoothHandsfree.this) {
switch (msg.what) {
case SCO_ACCEPTED:
      if (msg.arg1 == ScoSocket.STATE_CONNECTED) {
        if (isHeadsetConnected() && (mAudioPossible || allowAudioAnytime()) && mConnectedSco == null) {
          Log.i(TAG,""String_Node_Str"");
          mConnectedSco=(ScoSocket)msg.obj;
          mAudioManager.setBluetoothScoOn(true);
          broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_CONNECTED);
        }
 else {
          Log.i(TAG,""String_Node_Str"");
          ((ScoSocket)msg.obj).close();
        }
      }
    mIncomingSco=createScoSocket();
  mIncomingSco.accept();
break;
case SCO_CONNECTED:
if (msg.arg1 == ScoSocket.STATE_CONNECTED && isHeadsetConnected() && mConnectedSco == null) {
if (DBG) log(""String_Node_Str"");
mConnectedSco=(ScoSocket)msg.obj;
mAudioManager.setBluetoothScoOn(true);
broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_CONNECTED);
}
 else if (msg.arg1 == ScoSocket.STATE_CONNECTED) {
if (DBG) log(""String_Node_Str"");
((ScoSocket)msg.obj).close();
mOutgoingSco.close();
}
mOutgoingSco=null;
break;
case SCO_CLOSED:
if (mConnectedSco == (ScoSocket)msg.obj) {
mConnectedSco=null;
mAudioManager.setBluetoothScoOn(false);
broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED);
}
 else if (mOutgoingSco == (ScoSocket)msg.obj) {
mOutgoingSco=null;
}
 else if (mIncomingSco == (ScoSocket)msg.obj) {
mIncomingSco=null;
}
break;
case CHECK_CALL_STARTED:
if (mWaitingForCallStart) {
mWaitingForCallStart=false;
Log.e(TAG,""String_Node_Str"");
sendURC(""String_Node_Str"");
if (mStartCallWakeLock.isHeld()) {
mStartCallWakeLock.release();
}
}
break;
case CHECK_VOICE_RECOGNITION_STARTED:
if (mWaitingForVoiceRecognition) {
mWaitingForVoiceRecognition=false;
Log.e(TAG,""String_Node_Str"");
sendURC(""String_Node_Str"");
}
break;
}
}
}","@Override public void handleMessage(Message msg){
synchronized (BluetoothHandsfree.this) {
switch (msg.what) {
case SCO_ACCEPTED:
      if (msg.arg1 == ScoSocket.STATE_CONNECTED) {
        if (isHeadsetConnected() && (mAudioPossible || allowAudioAnytime()) && mConnectedSco == null) {
          Log.i(TAG,""String_Node_Str"");
          mConnectedSco=(ScoSocket)msg.obj;
          mAudioManager.setBluetoothScoOn(true);
          broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_CONNECTED,mHeadset.getAddress());
        }
 else {
          Log.i(TAG,""String_Node_Str"");
          ((ScoSocket)msg.obj).close();
        }
      }
    mIncomingSco=createScoSocket();
  mIncomingSco.accept();
break;
case SCO_CONNECTED:
if (msg.arg1 == ScoSocket.STATE_CONNECTED && isHeadsetConnected() && mConnectedSco == null) {
if (DBG) log(""String_Node_Str"");
mConnectedSco=(ScoSocket)msg.obj;
mAudioManager.setBluetoothScoOn(true);
broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_CONNECTED,mHeadset.getAddress());
}
 else if (msg.arg1 == ScoSocket.STATE_CONNECTED) {
if (DBG) log(""String_Node_Str"");
((ScoSocket)msg.obj).close();
mOutgoingSco.close();
}
mOutgoingSco=null;
break;
case SCO_CLOSED:
if (mConnectedSco == (ScoSocket)msg.obj) {
mConnectedSco=null;
mAudioManager.setBluetoothScoOn(false);
broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getAddress());
}
 else if (mOutgoingSco == (ScoSocket)msg.obj) {
mOutgoingSco=null;
}
 else if (mIncomingSco == (ScoSocket)msg.obj) {
mIncomingSco=null;
}
break;
case CHECK_CALL_STARTED:
if (mWaitingForCallStart) {
mWaitingForCallStart=false;
Log.e(TAG,""String_Node_Str"");
sendURC(""String_Node_Str"");
if (mStartCallWakeLock.isHeld()) {
mStartCallWakeLock.release();
}
}
break;
case CHECK_VOICE_RECOGNITION_STARTED:
if (mWaitingForVoiceRecognition) {
mWaitingForVoiceRecognition=false;
Log.e(TAG,""String_Node_Str"");
sendURC(""String_Node_Str"");
}
break;
}
}
}",0.9826041117554032
184877,"synchronized void onBluetoothDisabled(){
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED);
    mConnectedSco.close();
    mConnectedSco=null;
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
  if (mIncomingSco != null) {
    mIncomingSco.close();
    mIncomingSco=null;
  }
}","synchronized void onBluetoothDisabled(){
  if (mConnectedSco != null) {
    mAudioManager.setBluetoothScoOn(false);
    broadcastAudioStateIntent(BluetoothHeadset.AUDIO_STATE_DISCONNECTED,mHeadset.getAddress());
    mConnectedSco.close();
    mConnectedSco=null;
  }
  if (mOutgoingSco != null) {
    mOutgoingSco.close();
    mOutgoingSco=null;
  }
  if (mIncomingSco != null) {
    mIncomingSco.close();
    mIncomingSco=null;
  }
}",0.9739952718676124
184878,"/** 
 * Setup the local tone generator.  Should have corresponding calls to  {@link onDialerPause}.
 */
public void startDialerSession(){
  mDTMFToneEnabled=Settings.System.getInt(mInCallScreen.getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
  if (mDTMFToneEnabled) {
synchronized (mToneGeneratorLock) {
      if (mToneGenerator == null) {
        try {
          mToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,80);
        }
 catch (        RuntimeException e) {
          if (DBG)           log(""String_Node_Str"" + e);
          mToneGenerator=null;
        }
      }
    }
  }
}","/** 
 * Setup the local tone generator.  Should have corresponding calls to  {@link onDialerPause}.
 */
public void startDialerSession(){
  mDTMFToneEnabled=Settings.System.getInt(mInCallScreen.getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
  if (mDTMFToneEnabled) {
synchronized (mToneGeneratorLock) {
      if (mToneGenerator == null) {
        try {
          mToneGenerator=new ToneGenerator(AudioManager.STREAM_DTMF,80);
        }
 catch (        RuntimeException e) {
          if (DBG)           log(""String_Node_Str"" + e);
          mToneGenerator=null;
        }
      }
    }
  }
}",0.9886363636363636
184879,"/** 
 * Updates the state of the in-call UI based on the current state of the Phone.
 */
private void updateScreen(){
  if (VDBG)   log(""String_Node_Str"");
  if (!mIsForegroundActivity) {
    if (VDBG)     log(""String_Node_Str"");
    return;
  }
  if (mInCallMenu != null) {
    if (VDBG)     log(""String_Node_Str"");
    boolean okToShowMenu=mInCallMenu.updateItems(mPhone);
    if (!okToShowMenu) {
      if (VDBG)       log(""String_Node_Str"");
      dismissMenu(true);
    }
  }
  final PhoneApp app=PhoneApp.getInstance();
  if (mInCallScreenMode == InCallScreenMode.OTA_NORMAL) {
    if (VDBG)     log(""String_Node_Str"");
    if (otaUtils != null) {
      if (VDBG)       log(""String_Node_Str"");
      otaUtils.otaShowProperScreen();
    }
    return;
  }
 else   if (mInCallScreenMode == InCallScreenMode.OTA_ENDED) {
    if (VDBG)     log(""String_Node_Str"");
    if (app.cdmaOtaScreenState.otaScreenState == CdmaOtaScreenState.OtaScreenState.OTA_STATUS_ACTIVATION) {
      if (VDBG)       log(""String_Node_Str"");
      if (otaUtils != null) {
        if (VDBG)         log(""String_Node_Str"");
        otaUtils.otaShowActivateScreen();
      }
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
      if (otaUtils != null) {
        if (VDBG)         log(""String_Node_Str"");
        otaUtils.otaShowSuccessFailure();
      }
    }
    return;
  }
 else   if (mInCallScreenMode == InCallScreenMode.MANAGE_CONFERENCE) {
    if (VDBG)     log(""String_Node_Str"");
    updateManageConferencePanelIfNecessary();
    return;
  }
 else   if (mInCallScreenMode == InCallScreenMode.CALL_ENDED) {
    if (VDBG)     log(""String_Node_Str"");
    return;
  }
  if (VDBG)   log(""String_Node_Str"");
  mCallCard.updateState(mPhone);
  updateDialpadVisibility();
  updateInCallTouchUi();
  updateMenuButtonHint();
}","/** 
 * Updates the state of the in-call UI based on the current state of the Phone.
 */
private void updateScreen(){
  if (VDBG)   log(""String_Node_Str"");
  if (!mIsForegroundActivity) {
    if (VDBG)     log(""String_Node_Str"");
    return;
  }
  if (mInCallMenu != null) {
    if (VDBG)     log(""String_Node_Str"");
    boolean okToShowMenu=mInCallMenu.updateItems(mPhone);
    if (!okToShowMenu) {
      if (VDBG)       log(""String_Node_Str"");
      dismissMenu(true);
    }
  }
  final PhoneApp app=PhoneApp.getInstance();
  if (mInCallScreenMode == InCallScreenMode.OTA_NORMAL) {
    if (VDBG)     log(""String_Node_Str"");
    if (otaUtils != null) {
      if (VDBG)       log(""String_Node_Str"");
      otaUtils.otaShowProperScreen();
    }
    return;
  }
 else   if (mInCallScreenMode == InCallScreenMode.OTA_ENDED) {
    if (VDBG)     log(""String_Node_Str"");
    if (app.cdmaOtaScreenState.otaScreenState == CdmaOtaScreenState.OtaScreenState.OTA_STATUS_ACTIVATION) {
      if (VDBG)       log(""String_Node_Str"");
      if (otaUtils != null) {
        if (VDBG)         log(""String_Node_Str"");
        otaUtils.otaShowActivateScreen();
      }
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
      if (otaUtils != null) {
        if (VDBG)         log(""String_Node_Str"");
        otaUtils.otaShowSuccessFailure();
      }
    }
    return;
  }
 else   if (mInCallScreenMode == InCallScreenMode.MANAGE_CONFERENCE) {
    if (VDBG)     log(""String_Node_Str"");
    updateManageConferencePanelIfNecessary();
    return;
  }
 else   if (mInCallScreenMode == InCallScreenMode.CALL_ENDED) {
    if (VDBG)     log(""String_Node_Str"");
    return;
  }
  if (VDBG)   log(""String_Node_Str"");
  mCallCard.updateState(mPhone);
  updateDialpadVisibility();
  updateInCallTouchUi();
  updateMenuButtonHint();
  if (!mRingingCall.isIdle()) {
    dismissAllDialogs();
  }
 else {
    List<Connection> fgConnections=mForegroundCall.getConnections();
    for (    Connection cn : fgConnections) {
      if ((cn != null) && (cn.getPostDialState() == Connection.PostDialState.WAIT)) {
        String postDialStr=cn.getRemainingPostDialString();
        showWaitPromptDialog(cn,postDialStr);
      }
    }
  }
}",0.901843547583458
184880,"/** 
 * Brings up the UI used to handle an incoming call. Originally, this brought up an IncomingCallPanel instance (which was a subclass of Dialog) on top of whatever app was currently running.  Now, we take you directly to the in-call screen, whose CallCard automatically does the right thing if there's a Call that's currently ringing.
 */
static void showIncomingCallUi(){
  if (DBG)   log(""String_Node_Str"");
  PhoneApp app=PhoneApp.getInstance();
  app.sendBroadcast(new Intent(Intent.ACTION_CLOSE_SYSTEM_DIALOGS));
  app.preventScreenOn(true);
  app.requestWakeState(PhoneApp.WakeState.FULL);
  app.displayCallScreen();
}","/** 
 * Brings up the UI used to handle an incoming call. Originally, this brought up an IncomingCallPanel instance (which was a subclass of Dialog) on top of whatever app was currently running.  Now, we take you directly to the in-call screen, whose CallCard automatically does the right thing if there's a Call that's currently ringing.
 */
static void showIncomingCallUi(){
  if (DBG)   log(""String_Node_Str"");
  PhoneApp app=PhoneApp.getInstance();
  try {
    ActivityManagerNative.getDefault().closeSystemDialogs(""String_Node_Str"");
  }
 catch (  RemoteException e) {
  }
  app.preventScreenOn(true);
  app.requestWakeState(PhoneApp.WakeState.FULL);
  app.displayCallScreen();
}",0.8628048780487805
184881,"/** 
 * Brings up the UI used to handle an incoming call. Originally, this brought up an IncomingCallPanel instance (which was a subclass of Dialog) on top of whatever app was currently running.  Now, we take you directly to the in-call screen, whose CallCard automatically does the right thing if there's a Call that's currently ringing.
 */
static void showIncomingCallUi(){
  if (DBG)   log(""String_Node_Str"");
  PhoneApp app=PhoneApp.getInstance();
  app.sendBroadcast(new Intent(Intent.ACTION_CLOSE_SYSTEM_DIALOGS));
  app.preventScreenOn(true);
  app.requestWakeState(PhoneApp.WakeState.FULL);
  app.displayCallScreen();
}","/** 
 * Brings up the UI used to handle an incoming call. Originally, this brought up an IncomingCallPanel instance (which was a subclass of Dialog) on top of whatever app was currently running.  Now, we take you directly to the in-call screen, whose CallCard automatically does the right thing if there's a Call that's currently ringing.
 */
static void showIncomingCallUi(){
  if (DBG)   log(""String_Node_Str"");
  PhoneApp app=PhoneApp.getInstance();
  try {
    ActivityManagerNative.getDefault().closeSystemDialogs(""String_Node_Str"");
  }
 catch (  RemoteException e) {
  }
  app.preventScreenOn(true);
  app.requestWakeState(PhoneApp.WakeState.FULL);
  app.displayCallScreen();
}",0.8628048780487805
184882,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mPhone=PhoneFactory.getDefaultPhone();
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    addPreferencesFromResource(R.xml.cdma_call_feature_setting);
  }
 else {
    addPreferencesFromResource(R.xml.call_feature_setting);
  }
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_VOICEMAIL_KEY);
  mSubMenuFDNSettings=(PreferenceScreen)prefSet.findPreference(BUTTON_FDN_KEY);
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mButtonVoicePrivacy=(CheckBoxPreference)findPreference(BUTTON_VP_KEY);
    mButtonTTY=(ListPreference)prefSet.findPreference(BUTTON_TTY_KEY);
    mButtonTTY.setOnPreferenceChangeListener(this);
    int settingsTtyMode=android.provider.Settings.Secure.getInt(mPhone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,preferredTtyMode);
    mButtonTTY.setValue(Integer.toString(settingsTtyMode));
    UpdatePreferredTtyModeSummary(settingsTtyMode);
    mButtonDS=(ListPreference)findPreference(BUTTON_DS_KEY);
    int index=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,preferredDtmfMode);
    mButtonDS.setValueIndex(index);
    mButtonDS.setOnPreferenceChangeListener(this);
  }
 else   if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mButtonCLIR=(ListPreference)prefSet.findPreference(BUTTON_CLIR_KEY);
    mButtonCW=(CheckBoxPreference)prefSet.findPreference(BUTTON_CW_KEY);
    mButtonCFU=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFU_KEY);
    mButtonCFB=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFB_KEY);
    mButtonCFNRy=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFNRY_KEY);
    mButtonCFNRc=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFNRC_KEY);
    mButtonCFExpand=(PreferenceScreen)prefSet.findPreference(BUTTON_CF_EXPAND_KEY);
    mButtonGSMMoreExpand=(PreferenceScreen)prefSet.findPreference(BUTTON_GSM_MORE_EXPAND_KEY);
    if (mButtonCFU != null) {
      mButtonCFU.setParentActivity(this,CommandsInterface.CF_REASON_UNCONDITIONAL,this);
      mButtonCFU.setDialogOnClosedListener(this);
      mButtonCFU.setDialogTitle(R.string.labelCF);
      mButtonCFU.setDialogMessage(R.string.messageCFU);
    }
    if (mButtonCFB != null) {
      mButtonCFB.setParentActivity(this,CommandsInterface.CF_REASON_BUSY,this);
      mButtonCFB.setDialogOnClosedListener(this);
      mButtonCFB.setDependency(BUTTON_CFU_KEY);
      mButtonCFB.setDialogTitle(R.string.labelCF);
      mButtonCFB.setDialogMessage(R.string.messageCFB);
    }
    if (mButtonCFNRy != null) {
      mButtonCFNRy.setParentActivity(this,CommandsInterface.CF_REASON_NO_REPLY,this);
      mButtonCFNRy.setDialogOnClosedListener(this);
      mButtonCFNRy.setDependency(BUTTON_CFU_KEY);
      mButtonCFNRy.setDialogTitle(R.string.labelCF);
      mButtonCFNRy.setDialogMessage(R.string.messageCFNRy);
    }
    if (mButtonCFNRc != null) {
      mButtonCFNRc.setParentActivity(this,CommandsInterface.CF_REASON_NOT_REACHABLE,this);
      mButtonCFNRc.setDialogOnClosedListener(this);
      mButtonCFNRc.setDependency(BUTTON_CFU_KEY);
      mButtonCFNRc.setDialogTitle(R.string.labelCF);
      mButtonCFNRc.setDialogMessage(R.string.messageCFNRc);
    }
    if (mButtonCLIR != null) {
      mButtonCLIR.setOnPreferenceChangeListener(this);
    }
    mFDNSettingIntent=new Intent(Intent.ACTION_MAIN);
    mFDNSettingIntent.setClassName(this,FdnSetting.class.getName());
    mSubMenuFDNSettings.setIntent(mFDNSettingIntent);
  }
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (mSubMenuFDNSettings != null) {
    mFDNSettingIntent=new Intent(Intent.ACTION_MAIN);
    mFDNSettingIntent.setClassName(this,FdnSetting.class.getName());
    mSubMenuFDNSettings.setIntent(mFDNSettingIntent);
  }
  mAppState=AppState.INPUT_READY;
  if (icicle != null) {
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      mButtonVoicePrivacy.setChecked(icicle.getBoolean(BUTTON_VP_KEY));
    }
 else     if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      mDialingNumCFU=icicle.getString(SUMMARY_CFU_KEY);
      mDialingNumCFB=icicle.getString(SUMMARY_CFB_KEY);
      mDialingNumCFNRy=icicle.getString(SUMMARY_CFNRY_KEY);
      mDialingNumCFNRc=icicle.getString(SUMMARY_CFNRC_KEY);
      adjustCFbuttonState(mButtonCFU,icicle.getBoolean(BUTTON_CFU_KEY),R.string.sum_cfu_enabled,mDialingNumCFU);
      adjustCFbuttonState(mButtonCFB,icicle.getBoolean(BUTTON_CFB_KEY),R.string.sum_cfb_enabled,mDialingNumCFB);
      adjustCFbuttonState(mButtonCFNRy,icicle.getBoolean(BUTTON_CFNRY_KEY),R.string.sum_cfnry_enabled,mDialingNumCFNRy);
      adjustCFbuttonState(mButtonCFNRc,icicle.getBoolean(BUTTON_CFNRC_KEY),R.string.sum_cfnrc_enabled,mDialingNumCFNRc);
      setButtonCLIRValue(icicle.getInt(BUTTON_CLIR_KEY));
      if (mButtonCW != null) {
        mButtonCW.setChecked(icicle.getBoolean(BUTTON_CW_KEY));
      }
      mCFDataStale=icicle.getBoolean(BUTTON_CF_EXPAND_KEY);
      mMoreDataStale=icicle.getBoolean(BUTTON_GSM_MORE_EXPAND_KEY);
    }
    mAppState=(AppState)icicle.getSerializable(APP_STATE_KEY);
    mDisplayMode=icicle.getInt(DISPLAY_MODE_KEY);
  }
 else {
    mCFDataStale=true;
    mMoreDataStale=true;
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL)) {
      setAppState(AppState.DIALOG_OPEN);
      mSubMenuVoicemailSettings.showPhoneNumberDialog();
    }
  }
  updateVoiceNumberField();
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mPhone=PhoneFactory.getDefaultPhone();
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    addPreferencesFromResource(R.xml.cdma_call_feature_setting);
  }
 else {
    addPreferencesFromResource(R.xml.call_feature_setting);
  }
  PreferenceScreen prefSet=getPreferenceScreen();
  mSubMenuVoicemailSettings=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_VOICEMAIL_KEY);
  mSubMenuFDNSettings=(PreferenceScreen)prefSet.findPreference(BUTTON_FDN_KEY);
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mButtonVoicePrivacy=(CheckBoxPreference)findPreference(BUTTON_VP_KEY);
    mButtonTTY=(ListPreference)prefSet.findPreference(BUTTON_TTY_KEY);
    mButtonTTY.setOnPreferenceChangeListener(this);
    int settingsTtyMode=android.provider.Settings.Secure.getInt(mPhone.getContext().getContentResolver(),android.provider.Settings.Secure.PREFERRED_TTY_MODE,preferredTtyMode);
    mButtonTTY.setValue(Integer.toString(settingsTtyMode));
    UpdatePreferredTtyModeSummary(settingsTtyMode);
    mButtonDS=(ListPreference)findPreference(BUTTON_DS_KEY);
    int index=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,preferredDtmfMode);
    mButtonDS.setValueIndex(index);
    mButtonDS.setOnPreferenceChangeListener(this);
  }
 else   if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mButtonCLIR=(ListPreference)prefSet.findPreference(BUTTON_CLIR_KEY);
    mButtonCW=(CheckBoxPreference)prefSet.findPreference(BUTTON_CW_KEY);
    mButtonCFU=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFU_KEY);
    mButtonCFB=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFB_KEY);
    mButtonCFNRy=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFNRY_KEY);
    mButtonCFNRc=(EditPhoneNumberPreference)prefSet.findPreference(BUTTON_CFNRC_KEY);
    mButtonCFExpand=(PreferenceScreen)prefSet.findPreference(BUTTON_CF_EXPAND_KEY);
    mButtonGSMMoreExpand=(PreferenceScreen)prefSet.findPreference(BUTTON_GSM_MORE_EXPAND_KEY);
    if (mButtonCFU != null) {
      mButtonCFU.setParentActivity(this,CommandsInterface.CF_REASON_UNCONDITIONAL,this);
      mButtonCFU.setDialogOnClosedListener(this);
      mButtonCFU.setDialogTitle(R.string.labelCF);
      mButtonCFU.setDialogMessage(R.string.messageCFU);
    }
    if (mButtonCFB != null) {
      mButtonCFB.setParentActivity(this,CommandsInterface.CF_REASON_BUSY,this);
      mButtonCFB.setDialogOnClosedListener(this);
      mButtonCFB.setDependency(BUTTON_CFU_KEY);
      mButtonCFB.setDialogTitle(R.string.labelCF);
      mButtonCFB.setDialogMessage(R.string.messageCFB);
    }
    if (mButtonCFNRy != null) {
      mButtonCFNRy.setParentActivity(this,CommandsInterface.CF_REASON_NO_REPLY,this);
      mButtonCFNRy.setDialogOnClosedListener(this);
      mButtonCFNRy.setDependency(BUTTON_CFU_KEY);
      mButtonCFNRy.setDialogTitle(R.string.labelCF);
      mButtonCFNRy.setDialogMessage(R.string.messageCFNRy);
    }
    if (mButtonCFNRc != null) {
      mButtonCFNRc.setParentActivity(this,CommandsInterface.CF_REASON_NOT_REACHABLE,this);
      mButtonCFNRc.setDialogOnClosedListener(this);
      mButtonCFNRc.setDependency(BUTTON_CFU_KEY);
      mButtonCFNRc.setDialogTitle(R.string.labelCF);
      mButtonCFNRc.setDialogMessage(R.string.messageCFNRc);
    }
    if (mButtonCLIR != null) {
      mButtonCLIR.setOnPreferenceChangeListener(this);
    }
    if (mSubMenuFDNSettings != null) {
      mFDNSettingIntent=new Intent(Intent.ACTION_MAIN);
      mFDNSettingIntent.setClassName(this,FdnSetting.class.getName());
      mSubMenuFDNSettings.setIntent(mFDNSettingIntent);
    }
  }
  if (mSubMenuVoicemailSettings != null) {
    mSubMenuVoicemailSettings.setParentActivity(this,VOICEMAIL_PREF_ID,this);
    mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
    mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
  }
  mContactListIntent=new Intent(Intent.ACTION_GET_CONTENT);
  mContactListIntent.setType(android.provider.Contacts.Phones.CONTENT_ITEM_TYPE);
  if (mSubMenuFDNSettings != null) {
    mFDNSettingIntent=new Intent(Intent.ACTION_MAIN);
    mFDNSettingIntent.setClassName(this,FdnSetting.class.getName());
    mSubMenuFDNSettings.setIntent(mFDNSettingIntent);
  }
  mAppState=AppState.INPUT_READY;
  if (icicle != null) {
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      mButtonVoicePrivacy.setChecked(icicle.getBoolean(BUTTON_VP_KEY));
    }
 else     if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      mDialingNumCFU=icicle.getString(SUMMARY_CFU_KEY);
      mDialingNumCFB=icicle.getString(SUMMARY_CFB_KEY);
      mDialingNumCFNRy=icicle.getString(SUMMARY_CFNRY_KEY);
      mDialingNumCFNRc=icicle.getString(SUMMARY_CFNRC_KEY);
      adjustCFbuttonState(mButtonCFU,icicle.getBoolean(BUTTON_CFU_KEY),R.string.sum_cfu_enabled,mDialingNumCFU);
      adjustCFbuttonState(mButtonCFB,icicle.getBoolean(BUTTON_CFB_KEY),R.string.sum_cfb_enabled,mDialingNumCFB);
      adjustCFbuttonState(mButtonCFNRy,icicle.getBoolean(BUTTON_CFNRY_KEY),R.string.sum_cfnry_enabled,mDialingNumCFNRy);
      adjustCFbuttonState(mButtonCFNRc,icicle.getBoolean(BUTTON_CFNRC_KEY),R.string.sum_cfnrc_enabled,mDialingNumCFNRc);
      setButtonCLIRValue(icicle.getInt(BUTTON_CLIR_KEY));
      if (mButtonCW != null) {
        mButtonCW.setChecked(icicle.getBoolean(BUTTON_CW_KEY));
      }
      mCFDataStale=icicle.getBoolean(BUTTON_CF_EXPAND_KEY);
      mMoreDataStale=icicle.getBoolean(BUTTON_GSM_MORE_EXPAND_KEY);
    }
    mAppState=(AppState)icicle.getSerializable(APP_STATE_KEY);
    mDisplayMode=icicle.getInt(DISPLAY_MODE_KEY);
  }
 else {
    mCFDataStale=true;
    mMoreDataStale=true;
    if (getIntent().getAction().equals(ACTION_ADD_VOICEMAIL)) {
      setAppState(AppState.DIALOG_OPEN);
      mSubMenuVoicemailSettings.showPhoneNumberDialog();
    }
  }
  updateVoiceNumberField();
}",0.9957045397119516
184883,"@Override public void run(){
  if (DBG)   log(""String_Node_Str"" + mToneId + ""String_Node_Str"");
  if (mSignalInfoToneGenerator != null) {
    mSignalInfoToneGenerator.stopTone();
    mSignalInfoToneGenerator.startTone(mToneId);
  }
}","public void run(){
  Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
  if (DBG)   log(""String_Node_Str"");
}",0.2984293193717277
184884,"/** 
 * Performs Call logging based on Timeout or Ignore Call Waiting Call for CDMA, and finally calls Hangup on the Call Waiting connection.
 */
void onCdmaCallWaitingReject(){
  final Call ringingCall=mPhone.getRingingCall();
  if (ringingCall.getState() == Call.State.WAITING) {
    Connection c=ringingCall.getLatestConnection();
    if (c != null) {
      String number=c.getAddress();
      int isPrivateNumber=c.getNumberPresentation();
      long date=c.getCreateTime();
      long duration=c.getDurationMillis();
      int callLogType=mCallWaitingTimeOut ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE;
      Object o=c.getUserData();
      CallerInfo ci;
      if ((o == null) || (o instanceof CallerInfo)) {
        ci=(CallerInfo)o;
      }
 else {
        ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
      }
      Calls.addCall(ci,mApplication,number,isPrivateNumber,callLogType,date,(int)duration / 1000);
      if (callLogType == CallLog.Calls.MISSED_TYPE) {
        NotificationMgr.getDefault().notifyMissedCall(ci.name,ci.phoneNumber,ci.phoneLabel,date);
      }
      mApplication.cdmaPhoneCallState.setCurrentCallState(CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
      PhoneUtils.hangup(c);
    }
    mCallWaitingTimeOut=false;
  }
}","/** 
 * Performs Call logging based on Timeout or Ignore Call Waiting Call for CDMA, and finally calls Hangup on the Call Waiting connection.
 */
void onCdmaCallWaitingReject(){
  final Call ringingCall=mPhone.getRingingCall();
  if (ringingCall.getState() == Call.State.WAITING) {
    Connection c=ringingCall.getLatestConnection();
    if (c != null) {
      final String number=c.getAddress();
      final int presentation=c.getNumberPresentation();
      final long date=c.getCreateTime();
      final long duration=c.getDurationMillis();
      final int callLogType=mCallWaitingTimeOut ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE;
      Object o=c.getUserData();
      final CallerInfo ci;
      if ((o == null) || (o instanceof CallerInfo)) {
        ci=(CallerInfo)o;
      }
 else {
        ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
      }
      Thread t=new Thread(){
        public void run(){
          Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
          if (DBG)           log(""String_Node_Str"");
        }
      }
;
      t.start();
      if (callLogType == CallLog.Calls.MISSED_TYPE) {
        showMissedCallNotification(c,date);
      }
      mApplication.cdmaPhoneCallState.setCurrentCallState(CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
      PhoneUtils.hangup(c);
    }
    mCallWaitingTimeOut=false;
  }
}",0.8255988023952096
184885,"private void onDisconnect(AsyncResult r){
  if (VDBG)   log(""String_Node_Str"" + mPhone.getState());
  if (mPhone.getState() == Phone.State.IDLE) {
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    new SignalInfoTonePlayer(ToneGenerator.TONE_CDMA_SIGNAL_OFF).start();
  }
  Connection c=(Connection)r.result;
  if (DBG && c != null) {
    log(""String_Node_Str"" + c.getDisconnectCause() + ""String_Node_Str""+ c.isIncoming()+ ""String_Node_Str""+ c.getCreateTime());
  }
  if (DBG)   log(""String_Node_Str"");
  mRinger.stopRing();
  int toneToPlay=InCallTonePlayer.TONE_NONE;
  if (c != null) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if (cause == Connection.DisconnectCause.BUSY) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_BUSY;
    }
 else     if (cause == Connection.DisconnectCause.CONGESTION) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CONGESTION;
    }
  }
  if ((toneToPlay == InCallTonePlayer.TONE_NONE) && (mPhone.getState() == Phone.State.IDLE) && (c != null)) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if ((cause == Connection.DisconnectCause.NORMAL) || (cause == Connection.DisconnectCause.LOCAL)) {
      if (VDBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CALL_ENDED;
    }
  }
  if (mPhone.getState() == Phone.State.IDLE) {
    if (toneToPlay == InCallTonePlayer.TONE_NONE) {
      resetAudioStateAfterDisconnect();
    }
    NotificationMgr.getDefault().cancelCallInProgressNotification();
    if (!mApplication.isShowingCallScreen()) {
      if (VDBG)       log(""String_Node_Str"");
      mApplication.dismissCallScreen();
    }
  }
  if (c != null) {
    final String number=c.getAddress();
    final int presentation=c.getNumberPresentation();
    if (DBG)     log(""String_Node_Str"" + presentation);
    final long date=c.getCreateTime();
    final long duration=c.getDurationMillis();
    final Connection.DisconnectCause cause=c.getDisconnectCause();
    final int callLogType;
    if (c.isIncoming()) {
      callLogType=(cause == Connection.DisconnectCause.INCOMING_MISSED ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE);
    }
 else {
      callLogType=CallLog.Calls.OUTGOING_TYPE;
    }
    if (VDBG)     log(""String_Node_Str"" + callLogType + ""String_Node_Str""+ c.getUserData());
{
      Object o=c.getUserData();
      final CallerInfo ci;
      if ((o == null) || (o instanceof CallerInfo)) {
        ci=(CallerInfo)o;
      }
 else {
        ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
      }
      Thread t=new Thread(){
        public void run(){
          Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
        }
      }
;
      t.start();
    }
    if (callLogType == CallLog.Calls.MISSED_TYPE) {
      PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(mApplication,c,this,Long.valueOf(date));
      if (info != null) {
        if (VDBG)         log(""String_Node_Str"");
        if (info.isFinal) {
          CallerInfo ci=info.currentInfo;
          NotificationMgr.getDefault().notifyMissedCall(ci.name,ci.phoneNumber,ci.phoneLabel,date);
        }
      }
 else {
        Log.w(LOG_TAG,""String_Node_Str"" + c);
      }
    }
    if (toneToPlay != InCallTonePlayer.TONE_NONE) {
      if (VDBG)       log(""String_Node_Str"" + toneToPlay + ""String_Node_Str"");
      new InCallTonePlayer(toneToPlay).start();
    }
    if (mPhone.getState() == Phone.State.IDLE) {
      if (!mApplication.isShowingCallScreen()) {
        if (VDBG)         log(""String_Node_Str"");
        mApplication.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
        mApplication.requestWakeState(PhoneApp.WakeState.SLEEP);
      }
 else {
        if (VDBG)         log(""String_Node_Str"");
      }
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
    }
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mApplication.cdmaPhoneCallState.resetCdmaPhoneCallState();
    removeMessages(CALLWAITING_CALLERINFO_DISPLAY_DONE);
    removeMessages(CALLWAITING_ADDCALL_DISABLE_TIMEOUT);
  }
}","private void onDisconnect(AsyncResult r){
  if (VDBG)   log(""String_Node_Str"" + mPhone.getState());
  if (mPhone.getState() == Phone.State.IDLE) {
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    new SignalInfoTonePlayer(ToneGenerator.TONE_CDMA_SIGNAL_OFF).start();
  }
  Connection c=(Connection)r.result;
  if (DBG && c != null) {
    log(""String_Node_Str"" + c.getDisconnectCause() + ""String_Node_Str""+ c.isIncoming()+ ""String_Node_Str""+ c.getCreateTime());
  }
  if (DBG)   log(""String_Node_Str"");
  mRinger.stopRing();
  int toneToPlay=InCallTonePlayer.TONE_NONE;
  if (c != null) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if (cause == Connection.DisconnectCause.BUSY) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_BUSY;
    }
 else     if (cause == Connection.DisconnectCause.CONGESTION) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CONGESTION;
    }
  }
  if ((toneToPlay == InCallTonePlayer.TONE_NONE) && (mPhone.getState() == Phone.State.IDLE) && (c != null)) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if ((cause == Connection.DisconnectCause.NORMAL) || (cause == Connection.DisconnectCause.LOCAL)) {
      if (VDBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CALL_ENDED;
    }
  }
  if (mPhone.getState() == Phone.State.IDLE) {
    if (toneToPlay == InCallTonePlayer.TONE_NONE) {
      resetAudioStateAfterDisconnect();
    }
    NotificationMgr.getDefault().cancelCallInProgressNotification();
    if (!mApplication.isShowingCallScreen()) {
      if (VDBG)       log(""String_Node_Str"");
      mApplication.dismissCallScreen();
    }
  }
  if (c != null) {
    final String number=c.getAddress();
    final int presentation=c.getNumberPresentation();
    if (DBG)     log(""String_Node_Str"" + presentation);
    final long date=c.getCreateTime();
    final long duration=c.getDurationMillis();
    final Connection.DisconnectCause cause=c.getDisconnectCause();
    final int callLogType;
    if (c.isIncoming()) {
      callLogType=(cause == Connection.DisconnectCause.INCOMING_MISSED ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE);
    }
 else {
      callLogType=CallLog.Calls.OUTGOING_TYPE;
    }
    if (VDBG)     log(""String_Node_Str"" + callLogType + ""String_Node_Str""+ c.getUserData());
{
      Object o=c.getUserData();
      final CallerInfo ci;
      if ((o == null) || (o instanceof CallerInfo)) {
        ci=(CallerInfo)o;
      }
 else {
        ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
      }
      Thread t=new Thread(){
        public void run(){
          Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
        }
      }
;
      t.start();
    }
    if (callLogType == CallLog.Calls.MISSED_TYPE) {
      showMissedCallNotification(c,date);
    }
    if (toneToPlay != InCallTonePlayer.TONE_NONE) {
      if (VDBG)       log(""String_Node_Str"" + toneToPlay + ""String_Node_Str"");
      new InCallTonePlayer(toneToPlay).start();
    }
    if (mPhone.getState() == Phone.State.IDLE) {
      if (!mApplication.isShowingCallScreen()) {
        if (VDBG)         log(""String_Node_Str"");
        mApplication.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
        mApplication.requestWakeState(PhoneApp.WakeState.SLEEP);
      }
 else {
        if (VDBG)         log(""String_Node_Str"");
      }
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
    }
  }
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mApplication.cdmaPhoneCallState.resetCdmaPhoneCallState();
    removeMessages(CALLWAITING_CALLERINFO_DISPLAY_DONE);
    removeMessages(CALLWAITING_ADDCALL_DISABLE_TIMEOUT);
  }
}",0.9449347420758236
184886,"/** 
 * Updates the visibility of the onscreen ""answer"" UI.  On devices with no hardware CALL button, this UI becomes visible while an incoming call is ringing. TODO: This method should eventually be rolled into a more general method to update *all* onscreen UI elements that need to be different on different devices (depending on which hard buttons are present and/or if we don't have to worry about false touches while in-call.)
 */
private void updateOnscreenAnswerUi(){
  if (mOnscreenAnswerUiContainer != null) {
    if (mPhone.getState() == Phone.State.RINGING) {
      mOnscreenAnswerUiContainer.setVisibility(View.VISIBLE);
    }
 else {
      mOnscreenAnswerUiContainer.setVisibility(View.GONE);
    }
  }
}","/** 
 * Updates the visibility of the onscreen ""answer"" UI.  On devices with no hardware CALL button, this UI becomes visible while an incoming call is ringing. TODO: This method should eventually be rolled into a more general method to update *all* onscreen UI elements that need to be different on different devices (depending on which hard buttons are present and/or if we don't have to worry about false touches while in-call.)
 */
private void updateOnscreenAnswerUi(){
  if (mOnscreenAnswerUiContainer != null) {
    if (DBG)     log(""String_Node_Str"" + mPhone.getState().toString());
    if (mPhone.getState() == Phone.State.RINGING) {
      mOnscreenAnswerUiContainer.setVisibility(View.VISIBLE);
    }
 else {
      mOnscreenAnswerUiContainer.setVisibility(View.GONE);
    }
    if (DBG)     log(""String_Node_Str"" + mOnscreenAnswerUiContainer.getVisibility());
  }
}",0.9007537688442212
184887,"/** 
 * Answer the ringing call.
 */
void internalAnswerCall(){
  if (DBG)   log(""String_Node_Str"");
  PhoneUtils.answerCall(mPhone);
}","/** 
 * Answer the ringing call.
 */
void internalAnswerCall(){
  if (DBG)   log(""String_Node_Str"");
  PhoneUtils.answerCall(mPhone);
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    PhoneUtils.setMute(mPhone,false);
  }
}",0.7317073170731707
184888,"/** 
 * Restore the mute setting from the earliest connection of the foreground call.
 */
static Boolean restoreMuteState(Phone phone){
  Connection c=phone.getForegroundCall().getEarliestConnection();
  if (c != null) {
    Boolean shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getEarliestConnection());
    if (shouldMute == null) {
      if (DBG)       log(""String_Node_Str"");
      shouldMute=Boolean.FALSE;
    }
    setMute(phone,shouldMute.booleanValue());
    return shouldMute;
  }
  return Boolean.valueOf(getMute(phone));
}","/** 
 * Restore the mute setting from the earliest connection of the foreground call.
 */
static Boolean restoreMuteState(Phone phone){
  Connection c=phone.getForegroundCall().getEarliestConnection();
  if (c != null) {
    Boolean shouldMute;
    if (phone.getPhoneName().equals(""String_Node_Str"") && PhoneApp.getInstance().cdmaPhoneCallState.getCurrentCallState() == CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) {
      shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getLatestConnection());
    }
 else {
      shouldMute=sConnectionMuteTable.get(phone.getForegroundCall().getEarliestConnection());
    }
    if (shouldMute == null) {
      if (DBG)       log(""String_Node_Str"");
      shouldMute=Boolean.FALSE;
    }
    setMute(phone,shouldMute.booleanValue());
    return shouldMute;
  }
  return Boolean.valueOf(getMute(phone));
}",0.7610241820768137
184889,"private BluetoothPhoneState(){
  updateServiceState(false,mPhone.getServiceState());
  updatePhoneState(false,null);
  mBattchg=5;
  mSignal=asuToSignal(mPhone.getSignalStrength());
  mPhone.registerForServiceStateChanged(mStateChangeHandler,SERVICE_STATE_CHANGED,null);
  mPhone.registerForPhoneStateChanged(mStateChangeHandler,PHONE_STATE_CHANGED,null);
  IntentFilter filter=new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
  filter.addAction(TelephonyIntents.ACTION_SIGNAL_STRENGTH_CHANGED);
  mContext.registerReceiver(mStateReceiver,filter);
}","private BluetoothPhoneState(){
  updateServiceState(false,mPhone.getServiceState());
  updatePhoneState(false,null);
  mBattchg=5;
  mSignal=asuToSignal(mPhone.getSignalStrength());
  mPhone.registerForServiceStateChanged(mStateChangeHandler,SERVICE_STATE_CHANGED,null);
  mPhone.registerForPhoneStateChanged(mStateChangeHandler,PHONE_STATE_CHANGED,null);
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mPhone.registerForCallWaiting(mStateChangeHandler,PHONE_CDMA_CALL_WAITING,null);
  }
  IntentFilter filter=new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
  filter.addAction(TelephonyIntents.ACTION_SIGNAL_STRENGTH_CHANGED);
  mContext.registerReceiver(mStateReceiver,filter);
}",0.882636655948553
184890,"private void updateBtPhoneStateAfterRadioTechnologyChange(){
  if (DBG)   Log.d(TAG,""String_Node_Str"");
  mPhone.unregisterForServiceStateChanged(mStateChangeHandler);
  mPhone.unregisterForPhoneStateChanged(mStateChangeHandler);
  mPhone.registerForServiceStateChanged(mStateChangeHandler,SERVICE_STATE_CHANGED,null);
  mPhone.registerForPhoneStateChanged(mStateChangeHandler,PHONE_STATE_CHANGED,null);
}","private void updateBtPhoneStateAfterRadioTechnologyChange(){
  if (DBG)   Log.d(TAG,""String_Node_Str"");
  mPhone.unregisterForServiceStateChanged(mStateChangeHandler);
  mPhone.unregisterForPhoneStateChanged(mStateChangeHandler);
  mPhone.unregisterForCallWaiting(mStateChangeHandler);
  mPhone.registerForServiceStateChanged(mStateChangeHandler,SERVICE_STATE_CHANGED,null);
  mPhone.registerForPhoneStateChanged(mStateChangeHandler,PHONE_STATE_CHANGED,null);
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mPhone.registerForCallWaiting(mStateChangeHandler,PHONE_CDMA_CALL_WAITING,null);
  }
}",0.8003952569169961
184891,"/** 
 * Register AT Command handlers to implement the Handsfree profile
 */
private void initializeHandsfreeAtParser(){
  if (DBG)   log(""String_Node_Str"");
  AtParser parser=mHeadset.getAtParser();
  parser.register('A',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      PhoneUtils.answerCall(mPhone);
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register('D',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      if (args.length() > 0) {
        if (args.charAt(0) == '>') {
          if (args.startsWith(""String_Node_Str"")) {
            return new AtCommandResult(AtCommandResult.ERROR);
          }
          return redial();
        }
 else {
          if (args.charAt(args.length() - 1) == ';') {
            args=args.substring(0,args.length() - 1);
          }
          Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",args,null));
          intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          mContext.startActivity(intent);
          expectCallStart();
          return new AtCommandResult(AtCommandResult.UNSOLICITED);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      if (!mForegroundCall.isIdle()) {
        PhoneUtils.hangup(mForegroundCall);
      }
 else       if (!mRingingCall.isIdle()) {
        PhoneUtils.hangup(mRingingCall);
      }
 else       if (!mBackgroundCall.isIdle()) {
        PhoneUtils.hangup(mBackgroundCall);
      }
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    private AtCommandResult sendBRSF(){
      return new AtCommandResult(""String_Node_Str"" + mLocalBrsf);
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 1 && (args[0] instanceof Integer)) {
        mRemoteBrsf=(Integer)args[0];
      }
 else {
        Log.w(TAG,""String_Node_Str"");
      }
      return sendBRSF();
    }
    @Override public AtCommandResult handleActionCommand(){
      return sendBRSF();
    }
    @Override public AtCommandResult handleReadCommand(){
      return sendBRSF();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mIndicatorsEnabled ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length < 4) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else       if (args[0].equals(3) && args[1].equals(0) && args[2].equals(0)) {
        boolean valid=false;
        if (args[3].equals(0)) {
          mIndicatorsEnabled=false;
          valid=true;
        }
 else         if (args[3].equals(1)) {
          mIndicatorsEnabled=true;
          valid=true;
        }
        if (valid) {
          if ((mRemoteBrsf & BRSF_HF_CW_THREE_WAY_CALLING) == 0x0) {
            mServiceConnectionEstablished=true;
            sendURC(""String_Node_Str"");
            if (isIncallAudio()) {
              audioOn();
            }
            return new AtCommandResult(AtCommandResult.UNSOLICITED);
          }
 else {
            return new AtCommandResult(AtCommandResult.OK);
          }
        }
      }
      return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      mCmee=true;
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mCmee ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 0) {
        mCmee=false;
        return new AtCommandResult(AtCommandResult.OK);
      }
 else       if (!(args[0] instanceof Integer)) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else {
        mCmee=((Integer)args[0] == 1);
        return new AtCommandResult(AtCommandResult.OK);
      }
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return redial();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return mBluetoothPhoneState.toCindResult();
    }
    @Override public AtCommandResult handleTestCommand(){
      return mBluetoothPhoneState.getCindTestResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return mBluetoothPhoneState.toCsqResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(mBluetoothPhoneState.toCregString());
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length >= 1) {
        char c;
        if (args[0] instanceof Integer) {
          c=((Integer)args[0]).toString().charAt(0);
        }
 else {
          c=((String)args[0]).charAt(0);
        }
        if (isValidDtmf(c)) {
          mPhone.sendDtmf(c);
          return new AtCommandResult(AtCommandResult.OK);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
    private boolean isValidDtmf(    char c){
switch (c) {
case '#':
case '*':
        return true;
default :
      if (Character.digit(c,14) != -1) {
        return true;
      }
    return false;
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return getClccResult();
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1) {
  if (args[0].equals(0)) {
    boolean result;
    if (mRingingCall.isRinging()) {
      result=PhoneUtils.hangupRingingCall(mPhone);
    }
 else {
      result=PhoneUtils.hangupHoldingCall(mPhone);
    }
    if (result) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(1)) {
    if (PhoneUtils.answerAndEndActive(mPhone)) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(2)) {
    PhoneUtils.switchHoldingAndActive(mPhone);
    return new AtCommandResult(AtCommandResult.OK);
  }
 else   if (args[0].equals(3)) {
    if (mForegroundCall.getState().isAlive() && mBackgroundCall.getState().isAlive()) {
      PhoneUtils.mergeCalls(mPhone);
    }
    return new AtCommandResult(AtCommandResult.OK);
  }
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
mServiceConnectionEstablished=true;
sendURC(""String_Node_Str"");
sendURC(""String_Node_Str"");
if (isIncallAudio()) {
  audioOn();
}
return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
String operatorName=mPhone.getServiceState().getOperatorAlphaLong();
if (operatorName != null) {
  if (operatorName.length() > 16) {
    operatorName=operatorName.substring(0,16);
  }
  return new AtCommandResult(""String_Node_Str"" + operatorName + ""String_Node_Str"");
}
 else {
  return new AtCommandResult(""String_Node_Str"");
}
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 2 || !(args[0] instanceof Integer) || !(args[1] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
 else if ((Integer)args[0] != 3 || (Integer)args[1] != 0) {
  return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
}
 else {
  return new AtCommandResult(AtCommandResult.OK);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(AtCommandResult.OK);
}
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String imsi=mPhone.getSubscriberId();
if (imsi == null || imsi.length() == 0) {
  return reportCmeError(BluetoothCmeError.SIM_FAILURE);
}
 else {
  return new AtCommandResult(imsi);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"" + (mClip ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1 && (args[0].equals(0) || args[0].equals(1))) {
  mClip=args[0].equals(1);
  return new AtCommandResult(AtCommandResult.OK);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return new AtCommandResult(""String_Node_Str"" + mPhone.getDeviceId());
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String model=SystemProperties.get(""String_Node_Str"");
if (model != null) {
  return new AtCommandResult(""String_Node_Str"" + model);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String manuf=SystemProperties.get(""String_Node_Str"");
if (manuf != null) {
  return new AtCommandResult(""String_Node_Str"" + manuf);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args[0].equals(0)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
 else if (args[0].equals(1)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
if (args.length >= 1 && args[0].equals(1)) {
synchronized (BluetoothHandsfree.this) {
    if (!mWaitingForVoiceRecognition) {
      try {
        mContext.startActivity(sVoiceCommandIntent);
      }
 catch (      ActivityNotFoundException e) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
      expectVoiceRecognition();
    }
  }
  return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
 else if (args.length >= 1 && args[0].equals(0)) {
  audioOff();
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String number=mPhone.getLine1Number();
if (number == null) {
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(""String_Node_Str"" + number + ""String_Node_Str""+ PhoneNumberUtils.toaFromString(number)+ ""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 1 || !(args[0] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
mScoGain=(Integer)args[0];
int flag=mAudioManager.isBluetoothScoOn() ? AudioManager.FLAG_SHOW_UI : 0;
mAudioManager.setStreamVolume(AudioManager.STREAM_BLUETOOTH_SCO,mScoGain,flag);
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
int status=0;
switch (mPhone.getState()) {
case IDLE:
  status=0;
break;
case RINGING:
status=3;
break;
case OFFHOOK:
status=4;
break;
}
return new AtCommandResult(""String_Node_Str"" + status);
}
}
);
mPhonebook.register(parser);
}","/** 
 * Register AT Command handlers to implement the Handsfree profile
 */
private void initializeHandsfreeAtParser(){
  if (DBG)   log(""String_Node_Str"");
  AtParser parser=mHeadset.getAtParser();
  parser.register('A',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      PhoneUtils.answerCall(mPhone);
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register('D',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      if (args.length() > 0) {
        if (args.charAt(0) == '>') {
          if (args.startsWith(""String_Node_Str"")) {
            return new AtCommandResult(AtCommandResult.ERROR);
          }
          return redial();
        }
 else {
          if (args.charAt(args.length() - 1) == ';') {
            args=args.substring(0,args.length() - 1);
          }
          Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",args,null));
          intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          mContext.startActivity(intent);
          expectCallStart();
          return new AtCommandResult(AtCommandResult.UNSOLICITED);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      if (!mForegroundCall.isIdle()) {
        PhoneUtils.hangup(mForegroundCall);
      }
 else       if (!mRingingCall.isIdle()) {
        PhoneUtils.hangup(mRingingCall);
      }
 else       if (!mBackgroundCall.isIdle()) {
        PhoneUtils.hangup(mBackgroundCall);
      }
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    private AtCommandResult sendBRSF(){
      return new AtCommandResult(""String_Node_Str"" + mLocalBrsf);
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 1 && (args[0] instanceof Integer)) {
        mRemoteBrsf=(Integer)args[0];
      }
 else {
        Log.w(TAG,""String_Node_Str"");
      }
      return sendBRSF();
    }
    @Override public AtCommandResult handleActionCommand(){
      return sendBRSF();
    }
    @Override public AtCommandResult handleReadCommand(){
      return sendBRSF();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mIndicatorsEnabled ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length < 4) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else       if (args[0].equals(3) && args[1].equals(0) && args[2].equals(0)) {
        boolean valid=false;
        if (args[3].equals(0)) {
          mIndicatorsEnabled=false;
          valid=true;
        }
 else         if (args[3].equals(1)) {
          mIndicatorsEnabled=true;
          valid=true;
        }
        if (valid) {
          if ((mRemoteBrsf & BRSF_HF_CW_THREE_WAY_CALLING) == 0x0) {
            mServiceConnectionEstablished=true;
            sendURC(""String_Node_Str"");
            if (isIncallAudio()) {
              audioOn();
            }
            return new AtCommandResult(AtCommandResult.UNSOLICITED);
          }
 else {
            return new AtCommandResult(AtCommandResult.OK);
          }
        }
      }
      return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      mCmee=true;
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mCmee ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 0) {
        mCmee=false;
        return new AtCommandResult(AtCommandResult.OK);
      }
 else       if (!(args[0] instanceof Integer)) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else {
        mCmee=((Integer)args[0] == 1);
        return new AtCommandResult(AtCommandResult.OK);
      }
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return redial();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return mBluetoothPhoneState.toCindResult();
    }
    @Override public AtCommandResult handleTestCommand(){
      return mBluetoothPhoneState.getCindTestResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return mBluetoothPhoneState.toCsqResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(mBluetoothPhoneState.toCregString());
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length >= 1) {
        char c;
        if (args[0] instanceof Integer) {
          c=((Integer)args[0]).toString().charAt(0);
        }
 else {
          c=((String)args[0]).charAt(0);
        }
        if (isValidDtmf(c)) {
          mPhone.sendDtmf(c);
          return new AtCommandResult(AtCommandResult.OK);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
    private boolean isValidDtmf(    char c){
switch (c) {
case '#':
case '*':
        return true;
default :
      if (Character.digit(c,14) != -1) {
        return true;
      }
    return false;
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return getClccResult();
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1) {
  if (args[0].equals(0)) {
    boolean result;
    if (mRingingCall.isRinging()) {
      result=PhoneUtils.hangupRingingCall(mPhone);
    }
 else {
      result=PhoneUtils.hangupHoldingCall(mPhone);
    }
    if (result) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(1)) {
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      PhoneUtils.answerCall(mPhone);
      PhoneUtils.setMute(mPhone,false);
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      if (PhoneUtils.answerAndEndActive(mPhone)) {
        return new AtCommandResult(AtCommandResult.OK);
      }
 else {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
    }
  }
 else   if (args[0].equals(2)) {
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      PhoneUtils.answerCall(mPhone);
      PhoneUtils.setMute(mPhone,false);
    }
 else {
      PhoneUtils.switchHoldingAndActive(mPhone);
    }
    return new AtCommandResult(AtCommandResult.OK);
  }
 else   if (args[0].equals(3)) {
    if (mForegroundCall.getState().isAlive() && mBackgroundCall.getState().isAlive()) {
      PhoneUtils.mergeCalls(mPhone);
    }
    return new AtCommandResult(AtCommandResult.OK);
  }
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
mServiceConnectionEstablished=true;
sendURC(""String_Node_Str"");
sendURC(""String_Node_Str"");
if (isIncallAudio()) {
  audioOn();
}
return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
String operatorName=mPhone.getServiceState().getOperatorAlphaLong();
if (operatorName != null) {
  if (operatorName.length() > 16) {
    operatorName=operatorName.substring(0,16);
  }
  return new AtCommandResult(""String_Node_Str"" + operatorName + ""String_Node_Str"");
}
 else {
  return new AtCommandResult(""String_Node_Str"");
}
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 2 || !(args[0] instanceof Integer) || !(args[1] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
 else if ((Integer)args[0] != 3 || (Integer)args[1] != 0) {
  return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
}
 else {
  return new AtCommandResult(AtCommandResult.OK);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(AtCommandResult.OK);
}
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String imsi=mPhone.getSubscriberId();
if (imsi == null || imsi.length() == 0) {
  return reportCmeError(BluetoothCmeError.SIM_FAILURE);
}
 else {
  return new AtCommandResult(imsi);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"" + (mClip ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1 && (args[0].equals(0) || args[0].equals(1))) {
  mClip=args[0].equals(1);
  return new AtCommandResult(AtCommandResult.OK);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return new AtCommandResult(""String_Node_Str"" + mPhone.getDeviceId());
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String model=SystemProperties.get(""String_Node_Str"");
if (model != null) {
  return new AtCommandResult(""String_Node_Str"" + model);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String manuf=SystemProperties.get(""String_Node_Str"");
if (manuf != null) {
  return new AtCommandResult(""String_Node_Str"" + manuf);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args[0].equals(0)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
 else if (args[0].equals(1)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
if (args.length >= 1 && args[0].equals(1)) {
synchronized (BluetoothHandsfree.this) {
    if (!mWaitingForVoiceRecognition) {
      try {
        mContext.startActivity(sVoiceCommandIntent);
      }
 catch (      ActivityNotFoundException e) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
      expectVoiceRecognition();
    }
  }
  return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
 else if (args.length >= 1 && args[0].equals(0)) {
  audioOff();
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String number=mPhone.getLine1Number();
if (number == null) {
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(""String_Node_Str"" + number + ""String_Node_Str""+ PhoneNumberUtils.toaFromString(number)+ ""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 1 || !(args[0] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
mScoGain=(Integer)args[0];
int flag=mAudioManager.isBluetoothScoOn() ? AudioManager.FLAG_SHOW_UI : 0;
mAudioManager.setStreamVolume(AudioManager.STREAM_BLUETOOTH_SCO,mScoGain,flag);
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
int status=0;
switch (mPhone.getState()) {
case IDLE:
  status=0;
break;
case RINGING:
status=3;
break;
case OFFHOOK:
status=4;
break;
}
return new AtCommandResult(""String_Node_Str"" + status);
}
}
);
mPhonebook.register(parser);
}",0.9818370883882148
184892,"/** 
 * Plays tone when the DTMF setting is normal(Short).
 */
void startToneCdma(char tone){
  mDTMFToneType=Settings.System.getInt(mInCallScreen.getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,CallFeaturesSetting.preferredDtmfMode);
  if (mDTMFToneType == CallFeaturesSetting.DTMF_TONE_TYPE_NORMAL) {
    sendShortDtmfToNetwork(tone);
  }
 else {
    Log.i(LOG_TAG,""String_Node_Str"" + tone);
    mPhone.startDtmf(tone);
  }
  if (mDTMFToneEnabled) {
synchronized (mToneGeneratorLock) {
      if (mToneGenerator == null) {
        if (DBG)         log(""String_Node_Str"" + tone);
      }
 else {
        if (DBG)         log(""String_Node_Str"" + tone);
        stopToneCdma();
        mToneGenerator.startTone(mToneMap.get(tone));
        if (mDTMFToneType == CallFeaturesSetting.DTMF_TONE_TYPE_NORMAL) {
          mHandler.removeMessages(STOP_DTMF_TONE);
          mHandler.sendEmptyMessageDelayed(STOP_DTMF_TONE,DTMF_DURATION_MS);
        }
      }
    }
  }
}","/** 
 * Plays tone when the DTMF setting is normal(Short).
 */
void startToneCdma(char tone){
  mDTMFToneType=Settings.System.getInt(mInCallScreen.getContentResolver(),Settings.System.DTMF_TONE_TYPE_WHEN_DIALING,CallFeaturesSetting.preferredDtmfMode);
  if (mDTMFToneType == CallFeaturesSetting.DTMF_TONE_TYPE_NORMAL) {
    sendShortDtmfToNetwork(tone);
  }
 else {
    Log.i(LOG_TAG,""String_Node_Str"" + tone);
    mPhone.startDtmf(tone);
  }
  if (mDTMFToneEnabled) {
synchronized (mToneGeneratorLock) {
      if (mToneGenerator == null) {
        if (DBG)         log(""String_Node_Str"" + tone);
      }
 else {
        if (DBG)         log(""String_Node_Str"" + tone);
        mToneGenerator.startTone(mToneMap.get(tone));
        if (mDTMFToneType == CallFeaturesSetting.DTMF_TONE_TYPE_NORMAL) {
          mHandler.removeMessages(STOP_DTMF_TONE);
          mHandler.sendEmptyMessageDelayed(STOP_DTMF_TONE,DTMF_DURATION_MS);
        }
      }
    }
  }
}",0.9875776397515528
184893,"private BluetoothPhoneState(){
  updateServiceState(false,mPhone.getServiceState());
  updatePhoneState(false,null);
  mBattchg=5;
  mSignal=asuToSignal(mPhone.getSignalStrength());
  mPhone.registerForServiceStateChanged(mStateChangeHandler,SERVICE_STATE_CHANGED,null);
  mPhone.registerForPreciseCallStateChanged(mStateChangeHandler,PHONE_STATE_CHANGED,null);
  IntentFilter filter=new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
  filter.addAction(TelephonyIntents.ACTION_SIGNAL_STRENGTH_CHANGED);
  mContext.registerReceiver(mStateReceiver,filter);
}","private BluetoothPhoneState(){
  updateServiceState(false,mPhone.getServiceState());
  updatePhoneState(false,null);
  mBattchg=5;
  mSignal=asuToSignal(mPhone.getSignalStrength());
  mPhone.registerForServiceStateChanged(mStateChangeHandler,SERVICE_STATE_CHANGED,null);
  mPhone.registerForPreciseCallStateChanged(mStateChangeHandler,PHONE_STATE_CHANGED,null);
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mPhone.registerForCallWaiting(mStateChangeHandler,PHONE_CDMA_CALL_WAITING,null);
  }
  IntentFilter filter=new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
  filter.addAction(TelephonyIntents.ACTION_SIGNAL_STRENGTH_CHANGED);
  mContext.registerReceiver(mStateReceiver,filter);
}",0.8837579617834395
184894,"private void updateBtPhoneStateAfterRadioTechnologyChange(){
  if (DBG)   Log.d(TAG,""String_Node_Str"");
  mPhone.unregisterForServiceStateChanged(mStateChangeHandler);
  mPhone.unregisterForPreciseCallStateChanged(mStateChangeHandler);
  mPhone.registerForServiceStateChanged(mStateChangeHandler,SERVICE_STATE_CHANGED,null);
  mPhone.registerForPreciseCallStateChanged(mStateChangeHandler,PHONE_STATE_CHANGED,null);
}","private void updateBtPhoneStateAfterRadioTechnologyChange(){
  if (DBG)   Log.d(TAG,""String_Node_Str"");
  mPhone.unregisterForServiceStateChanged(mStateChangeHandler);
  mPhone.unregisterForPreciseCallStateChanged(mStateChangeHandler);
  mPhone.unregisterForCallWaiting(mStateChangeHandler);
  mPhone.registerForServiceStateChanged(mStateChangeHandler,SERVICE_STATE_CHANGED,null);
  mPhone.registerForPreciseCallStateChanged(mStateChangeHandler,PHONE_STATE_CHANGED,null);
  if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
    mPhone.registerForCallWaiting(mStateChangeHandler,PHONE_CDMA_CALL_WAITING,null);
  }
}",0.805019305019305
184895,"/** 
 * Register AT Command handlers to implement the Handsfree profile
 */
private void initializeHandsfreeAtParser(){
  if (DBG)   log(""String_Node_Str"");
  AtParser parser=mHeadset.getAtParser();
  parser.register('A',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      PhoneUtils.answerCall(mPhone);
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register('D',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      if (args.length() > 0) {
        if (args.charAt(0) == '>') {
          if (args.startsWith(""String_Node_Str"")) {
            return new AtCommandResult(AtCommandResult.ERROR);
          }
          return redial();
        }
 else {
          if (args.charAt(args.length() - 1) == ';') {
            args=args.substring(0,args.length() - 1);
          }
          Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",args,null));
          intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          mContext.startActivity(intent);
          expectCallStart();
          return new AtCommandResult(AtCommandResult.UNSOLICITED);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      if (!mForegroundCall.isIdle()) {
        PhoneUtils.hangup(mForegroundCall);
      }
 else       if (!mRingingCall.isIdle()) {
        PhoneUtils.hangup(mRingingCall);
      }
 else       if (!mBackgroundCall.isIdle()) {
        PhoneUtils.hangup(mBackgroundCall);
      }
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    private AtCommandResult sendBRSF(){
      return new AtCommandResult(""String_Node_Str"" + mLocalBrsf);
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 1 && (args[0] instanceof Integer)) {
        mRemoteBrsf=(Integer)args[0];
      }
 else {
        Log.w(TAG,""String_Node_Str"");
      }
      return sendBRSF();
    }
    @Override public AtCommandResult handleActionCommand(){
      return sendBRSF();
    }
    @Override public AtCommandResult handleReadCommand(){
      return sendBRSF();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mIndicatorsEnabled ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length < 4) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else       if (args[0].equals(3) && args[1].equals(0) && args[2].equals(0)) {
        boolean valid=false;
        if (args[3].equals(0)) {
          mIndicatorsEnabled=false;
          valid=true;
        }
 else         if (args[3].equals(1)) {
          mIndicatorsEnabled=true;
          valid=true;
        }
        if (valid) {
          if ((mRemoteBrsf & BRSF_HF_CW_THREE_WAY_CALLING) == 0x0) {
            mServiceConnectionEstablished=true;
            sendURC(""String_Node_Str"");
            if (isIncallAudio()) {
              audioOn();
            }
            return new AtCommandResult(AtCommandResult.UNSOLICITED);
          }
 else {
            return new AtCommandResult(AtCommandResult.OK);
          }
        }
      }
      return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      mCmee=true;
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mCmee ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 0) {
        mCmee=false;
        return new AtCommandResult(AtCommandResult.OK);
      }
 else       if (!(args[0] instanceof Integer)) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else {
        mCmee=((Integer)args[0] == 1);
        return new AtCommandResult(AtCommandResult.OK);
      }
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return redial();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return mBluetoothPhoneState.toCindResult();
    }
    @Override public AtCommandResult handleTestCommand(){
      return mBluetoothPhoneState.getCindTestResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return mBluetoothPhoneState.toCsqResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(mBluetoothPhoneState.toCregString());
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length >= 1) {
        char c;
        if (args[0] instanceof Integer) {
          c=((Integer)args[0]).toString().charAt(0);
        }
 else {
          c=((String)args[0]).charAt(0);
        }
        if (isValidDtmf(c)) {
          mPhone.sendDtmf(c);
          return new AtCommandResult(AtCommandResult.OK);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
    private boolean isValidDtmf(    char c){
switch (c) {
case '#':
case '*':
        return true;
default :
      if (Character.digit(c,14) != -1) {
        return true;
      }
    return false;
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return getClccResult();
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1) {
  if (args[0].equals(0)) {
    boolean result;
    if (mRingingCall.isRinging()) {
      result=PhoneUtils.hangupRingingCall(mPhone);
    }
 else {
      result=PhoneUtils.hangupHoldingCall(mPhone);
    }
    if (result) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(1)) {
    if (PhoneUtils.answerAndEndActive(mPhone)) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(2)) {
    PhoneUtils.switchHoldingAndActive(mPhone);
    return new AtCommandResult(AtCommandResult.OK);
  }
 else   if (args[0].equals(3)) {
    if (mForegroundCall.getState().isAlive() && mBackgroundCall.getState().isAlive()) {
      PhoneUtils.mergeCalls(mPhone);
    }
    return new AtCommandResult(AtCommandResult.OK);
  }
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
mServiceConnectionEstablished=true;
sendURC(""String_Node_Str"");
sendURC(""String_Node_Str"");
if (isIncallAudio()) {
  audioOn();
}
return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
String operatorName=mPhone.getServiceState().getOperatorAlphaLong();
if (operatorName != null) {
  if (operatorName.length() > 16) {
    operatorName=operatorName.substring(0,16);
  }
  return new AtCommandResult(""String_Node_Str"" + operatorName + ""String_Node_Str"");
}
 else {
  return new AtCommandResult(""String_Node_Str"");
}
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 2 || !(args[0] instanceof Integer) || !(args[1] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
 else if ((Integer)args[0] != 3 || (Integer)args[1] != 0) {
  return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
}
 else {
  return new AtCommandResult(AtCommandResult.OK);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(AtCommandResult.OK);
}
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String imsi=mPhone.getSubscriberId();
if (imsi == null || imsi.length() == 0) {
  return reportCmeError(BluetoothCmeError.SIM_FAILURE);
}
 else {
  return new AtCommandResult(imsi);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"" + (mClip ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1 && (args[0].equals(0) || args[0].equals(1))) {
  mClip=args[0].equals(1);
  return new AtCommandResult(AtCommandResult.OK);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return new AtCommandResult(""String_Node_Str"" + mPhone.getDeviceId());
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String model=SystemProperties.get(""String_Node_Str"");
if (model != null) {
  return new AtCommandResult(""String_Node_Str"" + model);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String manuf=SystemProperties.get(""String_Node_Str"");
if (manuf != null) {
  return new AtCommandResult(""String_Node_Str"" + manuf);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args[0].equals(0)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
 else if (args[0].equals(1)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
if (args.length >= 1 && args[0].equals(1)) {
synchronized (BluetoothHandsfree.this) {
    if (!mWaitingForVoiceRecognition) {
      try {
        mContext.startActivity(sVoiceCommandIntent);
      }
 catch (      ActivityNotFoundException e) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
      expectVoiceRecognition();
    }
  }
  return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
 else if (args.length >= 1 && args[0].equals(0)) {
  audioOff();
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String number=mPhone.getLine1Number();
if (number == null) {
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(""String_Node_Str"" + number + ""String_Node_Str""+ PhoneNumberUtils.toaFromString(number)+ ""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 1 || !(args[0] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
mScoGain=(Integer)args[0];
int flag=mAudioManager.isBluetoothScoOn() ? AudioManager.FLAG_SHOW_UI : 0;
mAudioManager.setStreamVolume(AudioManager.STREAM_BLUETOOTH_SCO,mScoGain,flag);
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
int status=0;
switch (mPhone.getState()) {
case IDLE:
  status=0;
break;
case RINGING:
status=3;
break;
case OFFHOOK:
status=4;
break;
}
return new AtCommandResult(""String_Node_Str"" + status);
}
}
);
mPhonebook.register(parser);
}","/** 
 * Register AT Command handlers to implement the Handsfree profile
 */
private void initializeHandsfreeAtParser(){
  if (DBG)   log(""String_Node_Str"");
  AtParser parser=mHeadset.getAtParser();
  parser.register('A',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      PhoneUtils.answerCall(mPhone);
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register('D',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      if (args.length() > 0) {
        if (args.charAt(0) == '>') {
          if (args.startsWith(""String_Node_Str"")) {
            return new AtCommandResult(AtCommandResult.ERROR);
          }
          return redial();
        }
 else {
          if (args.charAt(args.length() - 1) == ';') {
            args=args.substring(0,args.length() - 1);
          }
          Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",args,null));
          intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          mContext.startActivity(intent);
          expectCallStart();
          return new AtCommandResult(AtCommandResult.UNSOLICITED);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      if (!mForegroundCall.isIdle()) {
        PhoneUtils.hangup(mForegroundCall);
      }
 else       if (!mRingingCall.isIdle()) {
        PhoneUtils.hangup(mRingingCall);
      }
 else       if (!mBackgroundCall.isIdle()) {
        PhoneUtils.hangup(mBackgroundCall);
      }
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    private AtCommandResult sendBRSF(){
      return new AtCommandResult(""String_Node_Str"" + mLocalBrsf);
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 1 && (args[0] instanceof Integer)) {
        mRemoteBrsf=(Integer)args[0];
      }
 else {
        Log.w(TAG,""String_Node_Str"");
      }
      return sendBRSF();
    }
    @Override public AtCommandResult handleActionCommand(){
      return sendBRSF();
    }
    @Override public AtCommandResult handleReadCommand(){
      return sendBRSF();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mIndicatorsEnabled ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length < 4) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else       if (args[0].equals(3) && args[1].equals(0) && args[2].equals(0)) {
        boolean valid=false;
        if (args[3].equals(0)) {
          mIndicatorsEnabled=false;
          valid=true;
        }
 else         if (args[3].equals(1)) {
          mIndicatorsEnabled=true;
          valid=true;
        }
        if (valid) {
          if ((mRemoteBrsf & BRSF_HF_CW_THREE_WAY_CALLING) == 0x0) {
            mServiceConnectionEstablished=true;
            sendURC(""String_Node_Str"");
            if (isIncallAudio()) {
              audioOn();
            }
            return new AtCommandResult(AtCommandResult.UNSOLICITED);
          }
 else {
            return new AtCommandResult(AtCommandResult.OK);
          }
        }
      }
      return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      mCmee=true;
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mCmee ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 0) {
        mCmee=false;
        return new AtCommandResult(AtCommandResult.OK);
      }
 else       if (!(args[0] instanceof Integer)) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else {
        mCmee=((Integer)args[0] == 1);
        return new AtCommandResult(AtCommandResult.OK);
      }
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return redial();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return mBluetoothPhoneState.toCindResult();
    }
    @Override public AtCommandResult handleTestCommand(){
      return mBluetoothPhoneState.getCindTestResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return mBluetoothPhoneState.toCsqResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(mBluetoothPhoneState.toCregString());
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length >= 1) {
        char c;
        if (args[0] instanceof Integer) {
          c=((Integer)args[0]).toString().charAt(0);
        }
 else {
          c=((String)args[0]).charAt(0);
        }
        if (isValidDtmf(c)) {
          mPhone.sendDtmf(c);
          return new AtCommandResult(AtCommandResult.OK);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
    private boolean isValidDtmf(    char c){
switch (c) {
case '#':
case '*':
        return true;
default :
      if (Character.digit(c,14) != -1) {
        return true;
      }
    return false;
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return getClccResult();
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1) {
  if (args[0].equals(0)) {
    boolean result;
    if (mRingingCall.isRinging()) {
      result=PhoneUtils.hangupRingingCall(mPhone);
    }
 else {
      result=PhoneUtils.hangupHoldingCall(mPhone);
    }
    if (result) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(1)) {
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      PhoneUtils.answerCall(mPhone);
      PhoneUtils.setMute(mPhone,false);
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      if (PhoneUtils.answerAndEndActive(mPhone)) {
        return new AtCommandResult(AtCommandResult.OK);
      }
 else {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
    }
  }
 else   if (args[0].equals(2)) {
    if (mPhone.getPhoneName().equals(""String_Node_Str"")) {
      PhoneUtils.answerCall(mPhone);
      PhoneUtils.setMute(mPhone,false);
    }
 else {
      PhoneUtils.switchHoldingAndActive(mPhone);
    }
    return new AtCommandResult(AtCommandResult.OK);
  }
 else   if (args[0].equals(3)) {
    if (mForegroundCall.getState().isAlive() && mBackgroundCall.getState().isAlive()) {
      PhoneUtils.mergeCalls(mPhone);
    }
    return new AtCommandResult(AtCommandResult.OK);
  }
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
mServiceConnectionEstablished=true;
sendURC(""String_Node_Str"");
sendURC(""String_Node_Str"");
if (isIncallAudio()) {
  audioOn();
}
return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
String operatorName=mPhone.getServiceState().getOperatorAlphaLong();
if (operatorName != null) {
  if (operatorName.length() > 16) {
    operatorName=operatorName.substring(0,16);
  }
  return new AtCommandResult(""String_Node_Str"" + operatorName + ""String_Node_Str"");
}
 else {
  return new AtCommandResult(""String_Node_Str"");
}
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 2 || !(args[0] instanceof Integer) || !(args[1] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
 else if ((Integer)args[0] != 3 || (Integer)args[1] != 0) {
  return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
}
 else {
  return new AtCommandResult(AtCommandResult.OK);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(AtCommandResult.OK);
}
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String imsi=mPhone.getSubscriberId();
if (imsi == null || imsi.length() == 0) {
  return reportCmeError(BluetoothCmeError.SIM_FAILURE);
}
 else {
  return new AtCommandResult(imsi);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"" + (mClip ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1 && (args[0].equals(0) || args[0].equals(1))) {
  mClip=args[0].equals(1);
  return new AtCommandResult(AtCommandResult.OK);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return new AtCommandResult(""String_Node_Str"" + mPhone.getDeviceId());
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String model=SystemProperties.get(""String_Node_Str"");
if (model != null) {
  return new AtCommandResult(""String_Node_Str"" + model);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String manuf=SystemProperties.get(""String_Node_Str"");
if (manuf != null) {
  return new AtCommandResult(""String_Node_Str"" + manuf);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args[0].equals(0)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
 else if (args[0].equals(1)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
if (args.length >= 1 && args[0].equals(1)) {
synchronized (BluetoothHandsfree.this) {
    if (!mWaitingForVoiceRecognition) {
      try {
        mContext.startActivity(sVoiceCommandIntent);
      }
 catch (      ActivityNotFoundException e) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
      expectVoiceRecognition();
    }
  }
  return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
 else if (args.length >= 1 && args[0].equals(0)) {
  audioOff();
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String number=mPhone.getLine1Number();
if (number == null) {
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(""String_Node_Str"" + number + ""String_Node_Str""+ PhoneNumberUtils.toaFromString(number)+ ""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 1 || !(args[0] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
mScoGain=(Integer)args[0];
int flag=mAudioManager.isBluetoothScoOn() ? AudioManager.FLAG_SHOW_UI : 0;
mAudioManager.setStreamVolume(AudioManager.STREAM_BLUETOOTH_SCO,mScoGain,flag);
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
int status=0;
switch (mPhone.getState()) {
case IDLE:
  status=0;
break;
case RINGING:
status=3;
break;
case OFFHOOK:
status=4;
break;
}
return new AtCommandResult(""String_Node_Str"" + status);
}
}
);
mPhonebook.register(parser);
}",0.9818370883882148
184896,"/** 
 * Register AT Command handlers to implement the Handsfree profile
 */
private void initializeHandsfreeAtParser(){
  if (DBG)   log(""String_Node_Str"");
  AtParser parser=mHeadset.getAtParser();
  parser.register('A',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      PhoneUtils.answerCall(mPhone);
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register('D',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      if (args.length() > 0) {
        if (args.charAt(0) == '>') {
          if (args.startsWith(""String_Node_Str"")) {
            return new AtCommandResult(AtCommandResult.ERROR);
          }
          return redial();
        }
 else {
          if (args.charAt(args.length() - 1) == ';') {
            args=args.substring(0,args.length() - 1);
          }
          Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",args,null));
          intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          mContext.startActivity(intent);
          expectCallStart();
          return new AtCommandResult(AtCommandResult.UNSOLICITED);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      if (!mForegroundCall.isIdle()) {
        PhoneUtils.hangup(mForegroundCall);
      }
 else       if (!mRingingCall.isIdle()) {
        PhoneUtils.hangup(mRingingCall);
      }
 else       if (!mBackgroundCall.isIdle()) {
        PhoneUtils.hangup(mBackgroundCall);
      }
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    private AtCommandResult sendBRSF(){
      return new AtCommandResult(""String_Node_Str"" + mLocalBrsf);
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 1 && (args[0] instanceof Integer)) {
        mRemoteBrsf=(Integer)args[0];
      }
 else {
        Log.w(TAG,""String_Node_Str"");
      }
      return sendBRSF();
    }
    @Override public AtCommandResult handleActionCommand(){
      return sendBRSF();
    }
    @Override public AtCommandResult handleReadCommand(){
      return sendBRSF();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mIndicatorsEnabled ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length < 4) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else       if (args[0].equals(3) && args[1].equals(0) && args[2].equals(0)) {
        boolean valid=false;
        if (args[3].equals(0)) {
          mIndicatorsEnabled=false;
          valid=true;
        }
 else         if (args[3].equals(1)) {
          mIndicatorsEnabled=true;
          valid=true;
        }
        if (valid) {
          if ((mRemoteBrsf & BRSF_HF_CW_THREE_WAY_CALLING) == 0x0) {
            mServiceConnectionEstablished=true;
            sendURC(""String_Node_Str"");
            if (isIncallAudio()) {
              audioOn();
            }
            return new AtCommandResult(AtCommandResult.UNSOLICITED);
          }
 else {
            return new AtCommandResult(AtCommandResult.OK);
          }
        }
      }
      return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      mCmee=true;
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mCmee ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 0) {
        mCmee=false;
        return new AtCommandResult(AtCommandResult.OK);
      }
 else       if (!(args[0] instanceof Integer)) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else {
        mCmee=((Integer)args[0] == 1);
        return new AtCommandResult(AtCommandResult.OK);
      }
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return redial();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return mPhoneState.toCindResult();
    }
    @Override public AtCommandResult handleTestCommand(){
      return mPhoneState.getCindTestResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return mPhoneState.toCsqResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(mPhoneState.toCregString());
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length >= 1) {
        char c;
        if (args[0] instanceof Integer) {
          c=((Integer)args[0]).toString().charAt(0);
        }
 else {
          c=((String)args[0]).charAt(0);
        }
        if (isValidDtmf(c)) {
          mPhone.sendDtmf(c);
          return new AtCommandResult(AtCommandResult.OK);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
    private boolean isValidDtmf(    char c){
switch (c) {
case '#':
case '*':
        return true;
default :
      if (Character.digit(c,14) != -1) {
        return true;
      }
    return false;
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return getClccResult();
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1) {
  if (args[0].equals(0)) {
    boolean result;
    if (mRingingCall.isRinging()) {
      result=PhoneUtils.hangupRingingCall(mPhone);
    }
 else {
      result=PhoneUtils.hangupHoldingCall(mPhone);
    }
    if (result) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(1)) {
    if (PhoneUtils.answerAndEndActive(mPhone)) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(2)) {
    PhoneUtils.switchHoldingAndActive(mPhone);
    return new AtCommandResult(AtCommandResult.OK);
  }
 else   if (args[0].equals(3)) {
    if (mForegroundCall.getState().isAlive() && mBackgroundCall.getState().isAlive()) {
      PhoneUtils.mergeCalls(mPhone);
    }
    return new AtCommandResult(AtCommandResult.OK);
  }
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
mServiceConnectionEstablished=true;
sendURC(""String_Node_Str"");
if (isIncallAudio()) {
  audioOn();
}
return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
String operatorName=mPhone.getServiceState().getOperatorAlphaLong();
if (operatorName != null) {
  if (operatorName.length() > 16) {
    operatorName=operatorName.substring(0,16);
  }
  return new AtCommandResult(""String_Node_Str"" + operatorName + ""String_Node_Str"");
}
 else {
  return new AtCommandResult(""String_Node_Str"");
}
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 2 || !(args[0] instanceof Integer) || !(args[1] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
 else if ((Integer)args[0] != 3 || (Integer)args[1] != 0) {
  return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
}
 else {
  return new AtCommandResult(AtCommandResult.OK);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(AtCommandResult.OK);
}
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String imsi=mPhone.getSubscriberId();
if (imsi == null || imsi.length() == 0) {
  return reportCmeError(BluetoothCmeError.SIM_FAILURE);
}
 else {
  return new AtCommandResult(imsi);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"" + (mClip ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1 && (args[0].equals(0) || args[0].equals(1))) {
  mClip=args[0].equals(1);
  return new AtCommandResult(AtCommandResult.OK);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return new AtCommandResult(""String_Node_Str"" + mPhone.getDeviceId());
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String model=SystemProperties.get(""String_Node_Str"");
if (model != null) {
  return new AtCommandResult(""String_Node_Str"" + model);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String manuf=SystemProperties.get(""String_Node_Str"");
if (manuf != null) {
  return new AtCommandResult(""String_Node_Str"" + manuf);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args[0].equals(0)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
 else if (args[0].equals(1)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
if (args.length >= 1 && args[0].equals(1)) {
synchronized (BluetoothHandsfree.this) {
    if (!mWaitingForVoiceRecognition) {
      try {
        mContext.startActivity(sVoiceCommandIntent);
      }
 catch (      ActivityNotFoundException e) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
      expectVoiceRecognition();
    }
  }
  return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
 else if (args.length >= 1 && args[0].equals(0)) {
  audioOff();
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String number=mPhone.getLine1Number();
if (number == null) {
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(""String_Node_Str"" + number + ""String_Node_Str""+ PhoneNumberUtils.toaFromString(number)+ ""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 1 || !(args[0] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
mScoGain=(Integer)args[0];
int flag=mAudioManager.isBluetoothScoOn() ? AudioManager.FLAG_SHOW_UI : 0;
mAudioManager.setStreamVolume(AudioManager.STREAM_BLUETOOTH_SCO,mScoGain,flag);
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
int status=0;
switch (mPhone.getState()) {
case IDLE:
  status=0;
break;
case RINGING:
status=3;
break;
case OFFHOOK:
status=4;
break;
}
return new AtCommandResult(""String_Node_Str"" + status);
}
}
);
mPhonebook.register(parser);
}","/** 
 * Register AT Command handlers to implement the Handsfree profile
 */
private void initializeHandsfreeAtParser(){
  if (DBG)   log(""String_Node_Str"");
  AtParser parser=mHeadset.getAtParser();
  parser.register('A',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      PhoneUtils.answerCall(mPhone);
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register('D',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      if (args.length() > 0) {
        if (args.charAt(0) == '>') {
          if (args.startsWith(""String_Node_Str"")) {
            return new AtCommandResult(AtCommandResult.ERROR);
          }
          return redial();
        }
 else {
          if (args.charAt(args.length() - 1) == ';') {
            args=args.substring(0,args.length() - 1);
          }
          Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",args,null));
          intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          mContext.startActivity(intent);
          expectCallStart();
          return new AtCommandResult(AtCommandResult.UNSOLICITED);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      if (!mForegroundCall.isIdle()) {
        PhoneUtils.hangup(mForegroundCall);
      }
 else       if (!mRingingCall.isIdle()) {
        PhoneUtils.hangup(mRingingCall);
      }
 else       if (!mBackgroundCall.isIdle()) {
        PhoneUtils.hangup(mBackgroundCall);
      }
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    private AtCommandResult sendBRSF(){
      return new AtCommandResult(""String_Node_Str"" + mLocalBrsf);
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 1 && (args[0] instanceof Integer)) {
        mRemoteBrsf=(Integer)args[0];
      }
 else {
        Log.w(TAG,""String_Node_Str"");
      }
      return sendBRSF();
    }
    @Override public AtCommandResult handleActionCommand(){
      return sendBRSF();
    }
    @Override public AtCommandResult handleReadCommand(){
      return sendBRSF();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mIndicatorsEnabled ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length < 4) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else       if (args[0].equals(3) && args[1].equals(0) && args[2].equals(0)) {
        boolean valid=false;
        if (args[3].equals(0)) {
          mIndicatorsEnabled=false;
          valid=true;
        }
 else         if (args[3].equals(1)) {
          mIndicatorsEnabled=true;
          valid=true;
        }
        if (valid) {
          if ((mRemoteBrsf & BRSF_HF_CW_THREE_WAY_CALLING) == 0x0) {
            mServiceConnectionEstablished=true;
            sendURC(""String_Node_Str"");
            if (isIncallAudio()) {
              audioOn();
            }
            return new AtCommandResult(AtCommandResult.UNSOLICITED);
          }
 else {
            return new AtCommandResult(AtCommandResult.OK);
          }
        }
      }
      return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      mCmee=true;
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mCmee ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 0) {
        mCmee=false;
        return new AtCommandResult(AtCommandResult.OK);
      }
 else       if (!(args[0] instanceof Integer)) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else {
        mCmee=((Integer)args[0] == 1);
        return new AtCommandResult(AtCommandResult.OK);
      }
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return redial();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return mPhoneState.toCindResult();
    }
    @Override public AtCommandResult handleTestCommand(){
      return mPhoneState.getCindTestResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return mPhoneState.toCsqResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(mPhoneState.toCregString());
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length >= 1) {
        char c;
        if (args[0] instanceof Integer) {
          c=((Integer)args[0]).toString().charAt(0);
        }
 else {
          c=((String)args[0]).charAt(0);
        }
        if (isValidDtmf(c)) {
          mPhone.sendDtmf(c);
          return new AtCommandResult(AtCommandResult.OK);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
    private boolean isValidDtmf(    char c){
switch (c) {
case '#':
case '*':
        return true;
default :
      if (Character.digit(c,14) != -1) {
        return true;
      }
    return false;
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return getClccResult();
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1) {
  if (args[0].equals(0)) {
    boolean result;
    if (mRingingCall.isRinging()) {
      result=PhoneUtils.hangupRingingCall(mPhone);
    }
 else {
      result=PhoneUtils.hangupHoldingCall(mPhone);
    }
    if (result) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(1)) {
    if (PhoneUtils.answerAndEndActive(mPhone)) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(2)) {
    PhoneUtils.switchHoldingAndActive(mPhone);
    return new AtCommandResult(AtCommandResult.OK);
  }
 else   if (args[0].equals(3)) {
    if (mForegroundCall.getState().isAlive() && mBackgroundCall.getState().isAlive()) {
      PhoneUtils.mergeCalls(mPhone);
    }
    return new AtCommandResult(AtCommandResult.OK);
  }
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
mServiceConnectionEstablished=true;
sendURC(""String_Node_Str"");
sendURC(""String_Node_Str"");
if (isIncallAudio()) {
  audioOn();
}
return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
String operatorName=mPhone.getServiceState().getOperatorAlphaLong();
if (operatorName != null) {
  if (operatorName.length() > 16) {
    operatorName=operatorName.substring(0,16);
  }
  return new AtCommandResult(""String_Node_Str"" + operatorName + ""String_Node_Str"");
}
 else {
  return new AtCommandResult(""String_Node_Str"");
}
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 2 || !(args[0] instanceof Integer) || !(args[1] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
 else if ((Integer)args[0] != 3 || (Integer)args[1] != 0) {
  return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
}
 else {
  return new AtCommandResult(AtCommandResult.OK);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(AtCommandResult.OK);
}
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String imsi=mPhone.getSubscriberId();
if (imsi == null || imsi.length() == 0) {
  return reportCmeError(BluetoothCmeError.SIM_FAILURE);
}
 else {
  return new AtCommandResult(imsi);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"" + (mClip ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1 && (args[0].equals(0) || args[0].equals(1))) {
  mClip=args[0].equals(1);
  return new AtCommandResult(AtCommandResult.OK);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return new AtCommandResult(""String_Node_Str"" + mPhone.getDeviceId());
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String model=SystemProperties.get(""String_Node_Str"");
if (model != null) {
  return new AtCommandResult(""String_Node_Str"" + model);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String manuf=SystemProperties.get(""String_Node_Str"");
if (manuf != null) {
  return new AtCommandResult(""String_Node_Str"" + manuf);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args[0].equals(0)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
 else if (args[0].equals(1)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
if (args.length >= 1 && args[0].equals(1)) {
synchronized (BluetoothHandsfree.this) {
    if (!mWaitingForVoiceRecognition) {
      try {
        mContext.startActivity(sVoiceCommandIntent);
      }
 catch (      ActivityNotFoundException e) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
      expectVoiceRecognition();
    }
  }
  return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
 else if (args.length >= 1 && args[0].equals(0)) {
  audioOff();
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String number=mPhone.getLine1Number();
if (number == null) {
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(""String_Node_Str"" + number + ""String_Node_Str""+ PhoneNumberUtils.toaFromString(number)+ ""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 1 || !(args[0] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
mScoGain=(Integer)args[0];
int flag=mAudioManager.isBluetoothScoOn() ? AudioManager.FLAG_SHOW_UI : 0;
mAudioManager.setStreamVolume(AudioManager.STREAM_BLUETOOTH_SCO,mScoGain,flag);
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
int status=0;
switch (mPhone.getState()) {
case IDLE:
  status=0;
break;
case RINGING:
status=3;
break;
case OFFHOOK:
status=4;
break;
}
return new AtCommandResult(""String_Node_Str"" + status);
}
}
);
mPhonebook.register(parser);
}",0.9990131115183984
184897,"/** 
 * Register AT Command handlers to implement the Handsfree profile
 */
private void initializeHandsfreeAtParser(){
  if (DBG)   log(""String_Node_Str"");
  AtParser parser=mHeadset.getAtParser();
  parser.register('A',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      PhoneUtils.answerCall(mPhone);
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register('D',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      if (args.length() > 0) {
        if (args.charAt(0) == '>') {
          if (args.startsWith(""String_Node_Str"")) {
            return new AtCommandResult(AtCommandResult.ERROR);
          }
          return redial();
        }
 else {
          if (args.charAt(args.length() - 1) == ';') {
            args=args.substring(0,args.length() - 1);
          }
          Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",args,null));
          intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          mContext.startActivity(intent);
          expectCallStart();
          return new AtCommandResult(AtCommandResult.UNSOLICITED);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      if (!mForegroundCall.isIdle()) {
        PhoneUtils.hangup(mForegroundCall);
      }
 else       if (!mRingingCall.isIdle()) {
        PhoneUtils.hangup(mRingingCall);
      }
 else       if (!mBackgroundCall.isIdle()) {
        PhoneUtils.hangup(mBackgroundCall);
      }
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    private AtCommandResult sendBRSF(){
      return new AtCommandResult(""String_Node_Str"" + mLocalBrsf);
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 1 && (args[0] instanceof Integer)) {
        mRemoteBrsf=(Integer)args[0];
      }
 else {
        Log.w(TAG,""String_Node_Str"");
      }
      return sendBRSF();
    }
    @Override public AtCommandResult handleActionCommand(){
      return sendBRSF();
    }
    @Override public AtCommandResult handleReadCommand(){
      return sendBRSF();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mIndicatorsEnabled ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length < 4) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else       if (args[0].equals(3) && args[1].equals(0) && args[2].equals(0)) {
        boolean valid=false;
        if (args[3].equals(0)) {
          mIndicatorsEnabled=false;
          valid=true;
        }
 else         if (args[3].equals(1)) {
          mIndicatorsEnabled=true;
          valid=true;
        }
        if (valid) {
          if ((mRemoteBrsf & BRSF_HF_CW_THREE_WAY_CALLING) == 0x0) {
            mServiceConnectionEstablished=true;
            sendURC(""String_Node_Str"");
            if (isIncallAudio()) {
              audioOn();
            }
            return new AtCommandResult(AtCommandResult.UNSOLICITED);
          }
 else {
            return new AtCommandResult(AtCommandResult.OK);
          }
        }
      }
      return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      mCmee=true;
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mCmee ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 0) {
        mCmee=false;
        return new AtCommandResult(AtCommandResult.OK);
      }
 else       if (!(args[0] instanceof Integer)) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else {
        mCmee=((Integer)args[0] == 1);
        return new AtCommandResult(AtCommandResult.OK);
      }
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return redial();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return mPhoneState.toCindResult();
    }
    @Override public AtCommandResult handleTestCommand(){
      return mPhoneState.getCindTestResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return mPhoneState.toCsqResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(mPhoneState.toCregString());
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length >= 1) {
        char c;
        if (args[0] instanceof Integer) {
          c=((Integer)args[0]).toString().charAt(0);
        }
 else {
          c=((String)args[0]).charAt(0);
        }
        if (isValidDtmf(c)) {
          mPhone.sendDtmf(c);
          return new AtCommandResult(AtCommandResult.OK);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
    private boolean isValidDtmf(    char c){
switch (c) {
case '#':
case '*':
        return true;
default :
      if (Character.digit(c,14) != -1) {
        return true;
      }
    return false;
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return getClccResult();
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1) {
  if (args[0].equals(0)) {
    boolean result;
    if (mRingingCall.isRinging()) {
      result=PhoneUtils.hangupRingingCall(mPhone);
    }
 else {
      result=PhoneUtils.hangupHoldingCall(mPhone);
    }
    if (result) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(1)) {
    if (PhoneUtils.answerAndEndActive(mPhone)) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(2)) {
    PhoneUtils.switchHoldingAndActive(mPhone);
    return new AtCommandResult(AtCommandResult.OK);
  }
 else   if (args[0].equals(3)) {
    if (mForegroundCall.getState().isAlive() && mBackgroundCall.getState().isAlive()) {
      PhoneUtils.mergeCalls(mPhone);
    }
    return new AtCommandResult(AtCommandResult.OK);
  }
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
mServiceConnectionEstablished=true;
sendURC(""String_Node_Str"");
if (isIncallAudio()) {
  audioOn();
}
return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
String operatorName=mPhone.getServiceState().getOperatorAlphaLong();
if (operatorName != null) {
  if (operatorName.length() > 16) {
    operatorName=operatorName.substring(0,16);
  }
  return new AtCommandResult(""String_Node_Str"" + operatorName + ""String_Node_Str"");
}
 else {
  return new AtCommandResult(""String_Node_Str"");
}
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 2 || !(args[0] instanceof Integer) || !(args[1] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
 else if ((Integer)args[0] != 3 || (Integer)args[1] != 0) {
  return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
}
 else {
  return new AtCommandResult(AtCommandResult.OK);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(AtCommandResult.OK);
}
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String imsi=mPhone.getSubscriberId();
if (imsi == null || imsi.length() == 0) {
  return reportCmeError(BluetoothCmeError.SIM_FAILURE);
}
 else {
  return new AtCommandResult(imsi);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"" + (mClip ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1 && (args[0].equals(0) || args[0].equals(1))) {
  mClip=args[0].equals(1);
  return new AtCommandResult(AtCommandResult.OK);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return new AtCommandResult(""String_Node_Str"" + mPhone.getDeviceId());
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String model=SystemProperties.get(""String_Node_Str"");
if (model != null) {
  return new AtCommandResult(""String_Node_Str"" + model);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String manuf=SystemProperties.get(""String_Node_Str"");
if (manuf != null) {
  return new AtCommandResult(""String_Node_Str"" + manuf);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args[0].equals(0)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
 else if (args[0].equals(1)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
if (args.length >= 1 && args[0].equals(1)) {
synchronized (BluetoothHandsfree.this) {
    if (!mWaitingForVoiceRecognition) {
      try {
        mContext.startActivity(sVoiceCommandIntent);
      }
 catch (      ActivityNotFoundException e) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
      expectVoiceRecognition();
    }
  }
  return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
 else if (args.length >= 1 && args[0].equals(0)) {
  audioOff();
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String number=mPhone.getLine1Number();
if (number == null) {
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(""String_Node_Str"" + number + ""String_Node_Str""+ PhoneNumberUtils.toaFromString(number)+ ""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 1 || !(args[0] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
mScoGain=(Integer)args[0];
int flag=mAudioManager.isBluetoothScoOn() ? AudioManager.FLAG_SHOW_UI : 0;
mAudioManager.setStreamVolume(AudioManager.STREAM_BLUETOOTH_SCO,mScoGain,flag);
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
int status=0;
switch (mPhone.getState()) {
case IDLE:
  status=0;
break;
case RINGING:
status=3;
break;
case OFFHOOK:
status=4;
break;
}
return new AtCommandResult(""String_Node_Str"" + status);
}
}
);
mPhonebook.register(parser);
}","/** 
 * Register AT Command handlers to implement the Handsfree profile
 */
private void initializeHandsfreeAtParser(){
  if (DBG)   log(""String_Node_Str"");
  AtParser parser=mHeadset.getAtParser();
  parser.register('A',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      PhoneUtils.answerCall(mPhone);
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register('D',new AtCommandHandler(){
    @Override public AtCommandResult handleBasicCommand(    String args){
      if (args.length() > 0) {
        if (args.charAt(0) == '>') {
          if (args.startsWith(""String_Node_Str"")) {
            return new AtCommandResult(AtCommandResult.ERROR);
          }
          return redial();
        }
 else {
          if (args.charAt(args.length() - 1) == ';') {
            args=args.substring(0,args.length() - 1);
          }
          Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",args,null));
          intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          mContext.startActivity(intent);
          expectCallStart();
          return new AtCommandResult(AtCommandResult.UNSOLICITED);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      if (!mForegroundCall.isIdle()) {
        PhoneUtils.hangup(mForegroundCall);
      }
 else       if (!mRingingCall.isIdle()) {
        PhoneUtils.hangup(mRingingCall);
      }
 else       if (!mBackgroundCall.isIdle()) {
        PhoneUtils.hangup(mBackgroundCall);
      }
      return new AtCommandResult(AtCommandResult.OK);
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    private AtCommandResult sendBRSF(){
      return new AtCommandResult(""String_Node_Str"" + mLocalBrsf);
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 1 && (args[0] instanceof Integer)) {
        mRemoteBrsf=(Integer)args[0];
      }
 else {
        Log.w(TAG,""String_Node_Str"");
      }
      return sendBRSF();
    }
    @Override public AtCommandResult handleActionCommand(){
      return sendBRSF();
    }
    @Override public AtCommandResult handleReadCommand(){
      return sendBRSF();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mIndicatorsEnabled ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length < 4) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else       if (args[0].equals(3) && args[1].equals(0) && args[2].equals(0)) {
        boolean valid=false;
        if (args[3].equals(0)) {
          mIndicatorsEnabled=false;
          valid=true;
        }
 else         if (args[3].equals(1)) {
          mIndicatorsEnabled=true;
          valid=true;
        }
        if (valid) {
          if ((mRemoteBrsf & BRSF_HF_CW_THREE_WAY_CALLING) == 0x0) {
            mServiceConnectionEstablished=true;
            sendURC(""String_Node_Str"");
            if (isIncallAudio()) {
              audioOn();
            }
            return new AtCommandResult(AtCommandResult.UNSOLICITED);
          }
 else {
            return new AtCommandResult(AtCommandResult.OK);
          }
        }
      }
      return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      mCmee=true;
      return new AtCommandResult(AtCommandResult.OK);
    }
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(""String_Node_Str"" + (mCmee ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length == 0) {
        mCmee=false;
        return new AtCommandResult(AtCommandResult.OK);
      }
 else       if (!(args[0] instanceof Integer)) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
 else {
        mCmee=((Integer)args[0] == 1);
        return new AtCommandResult(AtCommandResult.OK);
      }
    }
    @Override public AtCommandResult handleTestCommand(){
      return new AtCommandResult(""String_Node_Str"");
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return redial();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return mPhoneState.toCindResult();
    }
    @Override public AtCommandResult handleTestCommand(){
      return mPhoneState.getCindTestResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleActionCommand(){
      return mPhoneState.toCsqResult();
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleReadCommand(){
      return new AtCommandResult(mPhoneState.toCregString());
    }
  }
);
  parser.register(""String_Node_Str"",new AtCommandHandler(){
    @Override public AtCommandResult handleSetCommand(    Object[] args){
      if (args.length >= 1) {
        char c;
        if (args[0] instanceof Integer) {
          c=((Integer)args[0]).toString().charAt(0);
        }
 else {
          c=((String)args[0]).charAt(0);
        }
        if (isValidDtmf(c)) {
          mPhone.sendDtmf(c);
          return new AtCommandResult(AtCommandResult.OK);
        }
      }
      return new AtCommandResult(AtCommandResult.ERROR);
    }
    private boolean isValidDtmf(    char c){
switch (c) {
case '#':
case '*':
        return true;
default :
      if (Character.digit(c,14) != -1) {
        return true;
      }
    return false;
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return getClccResult();
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1) {
  if (args[0].equals(0)) {
    boolean result;
    if (mRingingCall.isRinging()) {
      result=PhoneUtils.hangupRingingCall(mPhone);
    }
 else {
      result=PhoneUtils.hangupHoldingCall(mPhone);
    }
    if (result) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(1)) {
    if (PhoneUtils.answerAndEndActive(mPhone)) {
      return new AtCommandResult(AtCommandResult.OK);
    }
 else {
      return new AtCommandResult(AtCommandResult.ERROR);
    }
  }
 else   if (args[0].equals(2)) {
    PhoneUtils.switchHoldingAndActive(mPhone);
    return new AtCommandResult(AtCommandResult.OK);
  }
 else   if (args[0].equals(3)) {
    if (mForegroundCall.getState().isAlive() && mBackgroundCall.getState().isAlive()) {
      PhoneUtils.mergeCalls(mPhone);
    }
    return new AtCommandResult(AtCommandResult.OK);
  }
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
mServiceConnectionEstablished=true;
sendURC(""String_Node_Str"");
sendURC(""String_Node_Str"");
if (isIncallAudio()) {
  audioOn();
}
return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
String operatorName=mPhone.getServiceState().getOperatorAlphaLong();
if (operatorName != null) {
  if (operatorName.length() > 16) {
    operatorName=operatorName.substring(0,16);
  }
  return new AtCommandResult(""String_Node_Str"" + operatorName + ""String_Node_Str"");
}
 else {
  return new AtCommandResult(""String_Node_Str"");
}
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 2 || !(args[0] instanceof Integer) || !(args[1] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
 else if ((Integer)args[0] != 3 || (Integer)args[1] != 0) {
  return reportCmeError(BluetoothCmeError.OPERATION_NOT_SUPPORTED);
}
 else {
  return new AtCommandResult(AtCommandResult.OK);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(AtCommandResult.OK);
}
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String imsi=mPhone.getSubscriberId();
if (imsi == null || imsi.length() == 0) {
  return reportCmeError(BluetoothCmeError.SIM_FAILURE);
}
 else {
  return new AtCommandResult(imsi);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleReadCommand(){
return new AtCommandResult(""String_Node_Str"" + (mClip ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
}
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length >= 1 && (args[0].equals(0) || args[0].equals(1))) {
  mClip=args[0].equals(1);
  return new AtCommandResult(AtCommandResult.OK);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
return new AtCommandResult(""String_Node_Str"" + mPhone.getDeviceId());
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String model=SystemProperties.get(""String_Node_Str"");
if (model != null) {
  return new AtCommandResult(""String_Node_Str"" + model);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String manuf=SystemProperties.get(""String_Node_Str"");
if (manuf != null) {
  return new AtCommandResult(""String_Node_Str"" + manuf);
}
 else {
  return new AtCommandResult(AtCommandResult.ERROR);
}
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args[0].equals(0)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
 else if (args[0].equals(1)) {
  mAudioManager.setParameter(HEADSET_NREC,""String_Node_Str"");
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (BluetoothHeadset.DISABLE_BT_VOICE_DIALING) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
if (args.length >= 1 && args[0].equals(1)) {
synchronized (BluetoothHandsfree.this) {
    if (!mWaitingForVoiceRecognition) {
      try {
        mContext.startActivity(sVoiceCommandIntent);
      }
 catch (      ActivityNotFoundException e) {
        return new AtCommandResult(AtCommandResult.ERROR);
      }
      expectVoiceRecognition();
    }
  }
  return new AtCommandResult(AtCommandResult.UNSOLICITED);
}
 else if (args.length >= 1 && args[0].equals(0)) {
  audioOff();
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(AtCommandResult.ERROR);
}
@Override public AtCommandResult handleTestCommand(){
return new AtCommandResult(""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
String number=mPhone.getLine1Number();
if (number == null) {
  return new AtCommandResult(AtCommandResult.OK);
}
return new AtCommandResult(""String_Node_Str"" + number + ""String_Node_Str""+ PhoneNumberUtils.toaFromString(number)+ ""String_Node_Str"");
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleSetCommand(Object[] args){
if (args.length != 1 || !(args[0] instanceof Integer)) {
  return new AtCommandResult(AtCommandResult.ERROR);
}
mScoGain=(Integer)args[0];
int flag=mAudioManager.isBluetoothScoOn() ? AudioManager.FLAG_SHOW_UI : 0;
mAudioManager.setStreamVolume(AudioManager.STREAM_BLUETOOTH_SCO,mScoGain,flag);
return new AtCommandResult(AtCommandResult.OK);
}
}
);
parser.register(""String_Node_Str"",new AtCommandHandler(){
@Override public AtCommandResult handleActionCommand(){
int status=0;
switch (mPhone.getState()) {
case IDLE:
  status=0;
break;
case RINGING:
status=3;
break;
case OFFHOOK:
status=4;
break;
}
return new AtCommandResult(""String_Node_Str"" + status);
}
}
);
mPhonebook.register(parser);
}",0.9990131115183984
184898,"private String getCallFailedString(Call call){
  Phone phone=PhoneApp.getInstance().phone;
  Connection c=call.getEarliestConnection();
  int resID;
  if (c == null) {
    if (DBG)     log(""String_Node_Str"");
    resID=R.string.card_title_call_ended;
  }
 else {
    Connection.DisconnectCause cause=c.getDisconnectCause();
switch (cause) {
case BUSY:
      resID=R.string.callFailed_userBusy;
    break;
case CONGESTION:
  resID=R.string.callFailed_congestion;
break;
case LOST_SIGNAL:
resID=R.string.callFailed_noSignal;
break;
case LIMIT_EXCEEDED:
resID=R.string.callFailed_limitExceeded;
break;
case POWER_OFF:
resID=R.string.callFailed_powerOff;
break;
case ICC_ERROR:
resID=R.string.callFailed_simError;
break;
case OUT_OF_SERVICE:
resID=R.string.callFailed_outOfService;
break;
default :
resID=R.string.card_title_call_ended;
break;
}
}
return getContext().getString(resID);
}","private String getCallFailedString(Call call){
  Connection c=call.getEarliestConnection();
  int resID;
  if (c == null) {
    if (DBG)     log(""String_Node_Str"");
    resID=R.string.card_title_call_ended;
  }
 else {
    Connection.DisconnectCause cause=c.getDisconnectCause();
switch (cause) {
case BUSY:
      resID=R.string.callFailed_userBusy;
    break;
case CONGESTION:
  resID=R.string.callFailed_congestion;
break;
case LOST_SIGNAL:
resID=R.string.callFailed_noSignal;
break;
case LIMIT_EXCEEDED:
resID=R.string.callFailed_limitExceeded;
break;
case POWER_OFF:
resID=R.string.callFailed_powerOff;
break;
case ICC_ERROR:
resID=R.string.callFailed_simError;
break;
case OUT_OF_SERVICE:
resID=R.string.callFailed_outOfService;
break;
default :
resID=R.string.card_title_call_ended;
break;
}
}
return getContext().getString(resID);
}",0.9744483159117304
184899,"void reset(){
  if (DBG)   log(""String_Node_Str"");
  mRingerSilenced=false;
  showCallConnected();
  setUpperTitle(""String_Node_Str"");
}","void reset(){
  if (DBG)   log(""String_Node_Str"");
  showCallConnected();
  setUpperTitle(""String_Node_Str"");
}",0.8987854251012146
184900,"/** 
 * Updates the main block of caller info on the CallCard (ie. the stuff in the mainCallCard block) based on the specified Call.
 */
private void displayMainCallStatus(Phone phone,Call call){
  if (DBG)   log(""String_Node_Str"" + phone + ""String_Node_Str""+ call+ ""String_Node_Str"");
  if (call == null) {
    mMainCallCard.setVisibility(View.GONE);
    return;
  }
  mMainCallCard.setVisibility(View.VISIBLE);
  Call.State state=call.getState();
  if (DBG)   log(""String_Node_Str"" + call.getState());
  int callCardBackgroundResid=0;
  boolean landscapeMode=InCallScreen.ConfigurationHelper.isLandscape();
  final boolean bluetoothActive=PhoneApp.getInstance().showBluetoothIndication();
switch (state) {
case ACTIVE:
    showCallConnected();
  if (bluetoothActive) {
    callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
  }
 else {
    callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_connected_tall_land : R.drawable.incall_frame_connected_tall_port;
  }
if (DBG) log(""String_Node_Str"");
mCallTime.setActiveCallMode(call);
mCallTime.reset();
mCallTime.periodicUpdateTimer();
break;
case HOLDING:
showCallOnhold();
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_hold_tall_land : R.drawable.incall_frame_hold_tall_port;
mCallTime.cancelTimer();
break;
case DISCONNECTED:
reset();
showCallEnded();
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_ended_tall_land : R.drawable.incall_frame_ended_tall_port;
mCallTime.cancelTimer();
break;
case DIALING:
case ALERTING:
showCallConnecting();
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case INCOMING:
case WAITING:
showCallIncoming();
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case IDLE:
Log.w(LOG_TAG,""String_Node_Str"");
break;
default :
Log.w(LOG_TAG,""String_Node_Str"" + state);
break;
}
updateCardTitleWidgets(phone,call);
if (PhoneUtils.isConferenceCall(call)) {
updateDisplayForConference();
}
 else {
Connection conn=call.getEarliestConnection();
int presentation=conn.getNumberPresentation();
if (conn == null) {
if (DBG) log(""String_Node_Str"");
CallerInfo info=PhoneUtils.getCallerInfo(getContext(),conn);
updateDisplayForPerson(info,presentation,false,call);
}
 else {
if (DBG) log(""String_Node_Str"" + conn + ""String_Node_Str""+ conn.getState());
boolean runQuery=true;
Object o=conn.getUserData();
if (o instanceof PhoneUtils.CallerInfoToken) {
runQuery=mPhotoTracker.isDifferentImageRequest(((PhoneUtils.CallerInfoToken)o).currentInfo);
}
 else {
runQuery=mPhotoTracker.isDifferentImageRequest(conn);
}
if (runQuery) {
if (DBG) log(""String_Node_Str"");
PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),conn,this,call);
updateDisplayForPerson(info.currentInfo,presentation,!info.isFinal,call);
}
 else {
if (DBG) log(""String_Node_Str"");
if (o instanceof CallerInfo) {
CallerInfo ci=(CallerInfo)o;
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,false,call);
}
 else if (o instanceof PhoneUtils.CallerInfoToken) {
CallerInfo ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,true,call);
}
 else {
Log.w(LOG_TAG,""String_Node_Str"" + ""String_Node_Str"" + o);
}
}
}
}
updatePhotoForCallState(call);
setMainCallCardBackgroundResource(callCardBackgroundResid);
}","/** 
 * Updates the main block of caller info on the CallCard (ie. the stuff in the mainCallCard block) based on the specified Call.
 */
private void displayMainCallStatus(Phone phone,Call call){
  if (DBG)   log(""String_Node_Str"" + phone + ""String_Node_Str""+ call+ ""String_Node_Str"");
  if (call == null) {
    mMainCallCard.setVisibility(View.GONE);
    return;
  }
  mMainCallCard.setVisibility(View.VISIBLE);
  Call.State state=call.getState();
  if (DBG)   log(""String_Node_Str"" + call.getState());
  int callCardBackgroundResid=0;
  boolean landscapeMode=InCallScreen.ConfigurationHelper.isLandscape();
  final boolean bluetoothActive=PhoneApp.getInstance().showBluetoothIndication();
switch (state) {
case ACTIVE:
    showCallConnected();
  if (bluetoothActive) {
    callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
  }
 else {
    callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_connected_tall_land : R.drawable.incall_frame_connected_tall_port;
  }
if (DBG) log(""String_Node_Str"");
mCallTime.setActiveCallMode(call);
mCallTime.reset();
mCallTime.periodicUpdateTimer();
break;
case HOLDING:
showCallOnhold();
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_hold_tall_land : R.drawable.incall_frame_hold_tall_port;
mCallTime.cancelTimer();
break;
case DISCONNECTED:
reset();
showCallEnded();
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_ended_tall_land : R.drawable.incall_frame_ended_tall_port;
mCallTime.cancelTimer();
break;
case DIALING:
case ALERTING:
showCallConnecting();
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case INCOMING:
case WAITING:
showCallIncoming();
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case IDLE:
Log.w(LOG_TAG,""String_Node_Str"");
break;
default :
Log.w(LOG_TAG,""String_Node_Str"" + state);
break;
}
updateCardTitleWidgets(phone,call);
if (PhoneUtils.isConferenceCall(call)) {
updateDisplayForConference();
}
 else {
Connection conn=call.getEarliestConnection();
if (conn == null) {
if (DBG) log(""String_Node_Str"");
CallerInfo info=PhoneUtils.getCallerInfo(getContext(),null);
updateDisplayForPerson(info,Connection.PRESENTATION_ALLOWED,false,call);
}
 else {
if (DBG) log(""String_Node_Str"" + conn + ""String_Node_Str""+ conn.getState());
int presentation=conn.getNumberPresentation();
boolean runQuery=true;
Object o=conn.getUserData();
if (o instanceof PhoneUtils.CallerInfoToken) {
runQuery=mPhotoTracker.isDifferentImageRequest(((PhoneUtils.CallerInfoToken)o).currentInfo);
}
 else {
runQuery=mPhotoTracker.isDifferentImageRequest(conn);
}
if (runQuery) {
if (DBG) log(""String_Node_Str"");
PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),conn,this,call);
updateDisplayForPerson(info.currentInfo,presentation,!info.isFinal,call);
}
 else {
if (DBG) log(""String_Node_Str"");
if (o instanceof CallerInfo) {
CallerInfo ci=(CallerInfo)o;
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,false,call);
}
 else if (o instanceof PhoneUtils.CallerInfoToken) {
CallerInfo ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,true,call);
}
 else {
Log.w(LOG_TAG,""String_Node_Str"" + ""String_Node_Str"" + o);
}
}
}
}
updatePhotoForCallState(call);
setMainCallCardBackgroundResource(callCardBackgroundResid);
}",0.9815966493209798
184901,"@Override protected void onFinishInflate(){
  super.onFinishInflate();
  if (DBG)   log(""String_Node_Str"" + this + ""String_Node_Str"");
  LayoutInflater inflater=LayoutInflater.from(getContext());
  mMainCallCard=(ViewGroup)findViewById(R.id.mainCallCard);
  mOtherCallOngoingInfoArea=(ViewGroup)findViewById(R.id.otherCallOngoingInfoArea);
  mOtherCallOnHoldInfoArea=(ViewGroup)findViewById(R.id.otherCallOnHoldInfoArea);
  mUpperTitle=(TextView)findViewById(R.id.upperTitle);
  mLowerTitleViewGroup=(ViewGroup)findViewById(R.id.lowerTitleViewGroup);
  mLowerTitle=(TextView)findViewById(R.id.lowerTitle);
  mLowerTitleIcon=(ImageView)findViewById(R.id.lowerTitleIcon);
  mElapsedTime=(TextView)findViewById(R.id.elapsedTime);
  mTextColorConnected=getResources().getColor(R.color.incall_textConnected);
  mTextColorConnectedBluetooth=getResources().getColor(R.color.incall_textConnectedBluetooth);
  mTextColorEnded=getResources().getColor(R.color.incall_textEnded);
  mTextColorOnHold=getResources().getColor(R.color.incall_textOnHold);
  mPhoto=(ImageView)findViewById(R.id.photo);
  mName=(TextView)findViewById(R.id.name);
  mPhoneNumber=(TextView)findViewById(R.id.phoneNumber);
  mLabel=(TextView)findViewById(R.id.label);
  mOtherCallOngoingIcon=(ImageView)findViewById(R.id.otherCallOngoingIcon);
  mOtherCallOngoingName=(TextView)findViewById(R.id.otherCallOngoingName);
  mOtherCallOngoingStatus=(TextView)findViewById(R.id.otherCallOngoingStatus);
  mOtherCallOnHoldName=(TextView)findViewById(R.id.otherCallOnHoldName);
  mOtherCallOnHoldStatus=(TextView)findViewById(R.id.otherCallOnHoldStatus);
  mMenuButtonHint=(TextView)findViewById(R.id.menuButtonHint);
}","@Override protected void onFinishInflate(){
  super.onFinishInflate();
  if (DBG)   log(""String_Node_Str"" + this + ""String_Node_Str"");
  mMainCallCard=(ViewGroup)findViewById(R.id.mainCallCard);
  mOtherCallOngoingInfoArea=(ViewGroup)findViewById(R.id.otherCallOngoingInfoArea);
  mOtherCallOnHoldInfoArea=(ViewGroup)findViewById(R.id.otherCallOnHoldInfoArea);
  mUpperTitle=(TextView)findViewById(R.id.upperTitle);
  mLowerTitleViewGroup=(ViewGroup)findViewById(R.id.lowerTitleViewGroup);
  mLowerTitle=(TextView)findViewById(R.id.lowerTitle);
  mLowerTitleIcon=(ImageView)findViewById(R.id.lowerTitleIcon);
  mElapsedTime=(TextView)findViewById(R.id.elapsedTime);
  mTextColorConnected=getResources().getColor(R.color.incall_textConnected);
  mTextColorConnectedBluetooth=getResources().getColor(R.color.incall_textConnectedBluetooth);
  mTextColorEnded=getResources().getColor(R.color.incall_textEnded);
  mTextColorOnHold=getResources().getColor(R.color.incall_textOnHold);
  mPhoto=(ImageView)findViewById(R.id.photo);
  mName=(TextView)findViewById(R.id.name);
  mPhoneNumber=(TextView)findViewById(R.id.phoneNumber);
  mLabel=(TextView)findViewById(R.id.label);
  mOtherCallOngoingIcon=(ImageView)findViewById(R.id.otherCallOngoingIcon);
  mOtherCallOngoingName=(TextView)findViewById(R.id.otherCallOngoingName);
  mOtherCallOngoingStatus=(TextView)findViewById(R.id.otherCallOngoingStatus);
  mOtherCallOnHoldName=(TextView)findViewById(R.id.otherCallOnHoldName);
  mOtherCallOnHoldStatus=(TextView)findViewById(R.id.otherCallOnHoldStatus);
  mMenuButtonHint=(TextView)findViewById(R.id.menuButtonHint);
}",0.981442044417402
184902,"private String getCallFailedString(Call call){
  Phone phone=PhoneApp.getInstance().phone;
  Connection c=call.getEarliestConnection();
  int resID;
  if (c == null) {
    if (DBG)     log(""String_Node_Str"");
    resID=R.string.card_title_call_ended;
  }
 else {
    Connection.DisconnectCause cause=c.getDisconnectCause();
switch (cause) {
case BUSY:
      resID=R.string.callFailed_userBusy;
    break;
case CONGESTION:
  resID=R.string.callFailed_congestion;
break;
case LOST_SIGNAL:
resID=R.string.callFailed_noSignal;
break;
case LIMIT_EXCEEDED:
resID=R.string.callFailed_limitExceeded;
break;
case POWER_OFF:
resID=R.string.callFailed_powerOff;
break;
case ICC_ERROR:
resID=R.string.callFailed_simError;
break;
case OUT_OF_SERVICE:
resID=R.string.callFailed_outOfService;
break;
default :
resID=R.string.card_title_call_ended;
break;
}
}
return getContext().getString(resID);
}","private String getCallFailedString(Call call){
  Connection c=call.getEarliestConnection();
  int resID;
  if (c == null) {
    if (DBG)     log(""String_Node_Str"");
    resID=R.string.card_title_call_ended;
  }
 else {
    Connection.DisconnectCause cause=c.getDisconnectCause();
switch (cause) {
case BUSY:
      resID=R.string.callFailed_userBusy;
    break;
case CONGESTION:
  resID=R.string.callFailed_congestion;
break;
case LOST_SIGNAL:
resID=R.string.callFailed_noSignal;
break;
case LIMIT_EXCEEDED:
resID=R.string.callFailed_limitExceeded;
break;
case POWER_OFF:
resID=R.string.callFailed_powerOff;
break;
case ICC_ERROR:
resID=R.string.callFailed_simError;
break;
case OUT_OF_SERVICE:
resID=R.string.callFailed_outOfService;
break;
default :
resID=R.string.card_title_call_ended;
break;
}
}
return getContext().getString(resID);
}",0.9744483159117304
184903,"void reset(){
  if (DBG)   log(""String_Node_Str"");
  mRingerSilenced=false;
  showCallConnected();
  setUpperTitle(""String_Node_Str"");
}","void reset(){
  if (DBG)   log(""String_Node_Str"");
  showCallConnected();
  setUpperTitle(""String_Node_Str"");
}",0.8987854251012146
184904,"/** 
 * Updates the main block of caller info on the CallCard (ie. the stuff in the mainCallCard block) based on the specified Call.
 */
private void displayMainCallStatus(Phone phone,Call call){
  if (DBG)   log(""String_Node_Str"" + phone + ""String_Node_Str""+ call+ ""String_Node_Str"");
  if (call == null) {
    mMainCallCard.setVisibility(View.GONE);
    return;
  }
  mMainCallCard.setVisibility(View.VISIBLE);
  Call.State state=call.getState();
  if (DBG)   log(""String_Node_Str"" + call.getState());
  int callCardBackgroundResid=0;
  boolean landscapeMode=InCallScreen.ConfigurationHelper.isLandscape();
  final boolean bluetoothActive=PhoneApp.getInstance().showBluetoothIndication();
switch (state) {
case ACTIVE:
    showCallConnected();
  if (bluetoothActive) {
    callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
  }
 else {
    callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_connected_tall_land : R.drawable.incall_frame_connected_tall_port;
  }
if (DBG) log(""String_Node_Str"");
mCallTime.setActiveCallMode(call);
mCallTime.reset();
mCallTime.periodicUpdateTimer();
break;
case HOLDING:
showCallOnhold();
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_hold_tall_land : R.drawable.incall_frame_hold_tall_port;
mCallTime.cancelTimer();
break;
case DISCONNECTED:
reset();
showCallEnded();
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_ended_tall_land : R.drawable.incall_frame_ended_tall_port;
mCallTime.cancelTimer();
break;
case DIALING:
case ALERTING:
showCallConnecting();
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case INCOMING:
case WAITING:
showCallIncoming();
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case IDLE:
Log.w(LOG_TAG,""String_Node_Str"");
break;
default :
Log.w(LOG_TAG,""String_Node_Str"" + state);
break;
}
updateCardTitleWidgets(phone,call);
if (PhoneUtils.isConferenceCall(call)) {
updateDisplayForConference();
}
 else {
Connection conn=call.getEarliestConnection();
int presentation=conn.getNumberPresentation();
if (conn == null) {
if (DBG) log(""String_Node_Str"");
CallerInfo info=PhoneUtils.getCallerInfo(getContext(),conn);
updateDisplayForPerson(info,presentation,false,call);
}
 else {
if (DBG) log(""String_Node_Str"" + conn + ""String_Node_Str""+ conn.getState());
boolean runQuery=true;
Object o=conn.getUserData();
if (o instanceof PhoneUtils.CallerInfoToken) {
runQuery=mPhotoTracker.isDifferentImageRequest(((PhoneUtils.CallerInfoToken)o).currentInfo);
}
 else {
runQuery=mPhotoTracker.isDifferentImageRequest(conn);
}
if (runQuery) {
if (DBG) log(""String_Node_Str"");
PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),conn,this,call);
updateDisplayForPerson(info.currentInfo,presentation,!info.isFinal,call);
}
 else {
if (DBG) log(""String_Node_Str"");
if (o instanceof CallerInfo) {
CallerInfo ci=(CallerInfo)o;
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,false,call);
}
 else if (o instanceof PhoneUtils.CallerInfoToken) {
CallerInfo ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,true,call);
}
 else {
Log.w(LOG_TAG,""String_Node_Str"" + ""String_Node_Str"" + o);
}
}
}
}
updatePhotoForCallState(call);
setMainCallCardBackgroundResource(callCardBackgroundResid);
}","/** 
 * Updates the main block of caller info on the CallCard (ie. the stuff in the mainCallCard block) based on the specified Call.
 */
private void displayMainCallStatus(Phone phone,Call call){
  if (DBG)   log(""String_Node_Str"" + phone + ""String_Node_Str""+ call+ ""String_Node_Str"");
  if (call == null) {
    mMainCallCard.setVisibility(View.GONE);
    return;
  }
  mMainCallCard.setVisibility(View.VISIBLE);
  Call.State state=call.getState();
  if (DBG)   log(""String_Node_Str"" + call.getState());
  int callCardBackgroundResid=0;
  boolean landscapeMode=InCallScreen.ConfigurationHelper.isLandscape();
  final boolean bluetoothActive=PhoneApp.getInstance().showBluetoothIndication();
switch (state) {
case ACTIVE:
    showCallConnected();
  if (bluetoothActive) {
    callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
  }
 else {
    callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_connected_tall_land : R.drawable.incall_frame_connected_tall_port;
  }
if (DBG) log(""String_Node_Str"");
mCallTime.setActiveCallMode(call);
mCallTime.reset();
mCallTime.periodicUpdateTimer();
break;
case HOLDING:
showCallOnhold();
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_hold_tall_land : R.drawable.incall_frame_hold_tall_port;
mCallTime.cancelTimer();
break;
case DISCONNECTED:
reset();
showCallEnded();
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_ended_tall_land : R.drawable.incall_frame_ended_tall_port;
mCallTime.cancelTimer();
break;
case DIALING:
case ALERTING:
showCallConnecting();
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case INCOMING:
case WAITING:
showCallIncoming();
if (bluetoothActive) {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_bluetooth_tall_land : R.drawable.incall_frame_bluetooth_tall_port;
}
 else {
callCardBackgroundResid=landscapeMode ? R.drawable.incall_frame_normal_tall_land : R.drawable.incall_frame_normal_tall_port;
}
mCallTime.cancelTimer();
break;
case IDLE:
Log.w(LOG_TAG,""String_Node_Str"");
break;
default :
Log.w(LOG_TAG,""String_Node_Str"" + state);
break;
}
updateCardTitleWidgets(phone,call);
if (PhoneUtils.isConferenceCall(call)) {
updateDisplayForConference();
}
 else {
Connection conn=call.getEarliestConnection();
if (conn == null) {
if (DBG) log(""String_Node_Str"");
CallerInfo info=PhoneUtils.getCallerInfo(getContext(),null);
updateDisplayForPerson(info,Connection.PRESENTATION_ALLOWED,false,call);
}
 else {
if (DBG) log(""String_Node_Str"" + conn + ""String_Node_Str""+ conn.getState());
int presentation=conn.getNumberPresentation();
boolean runQuery=true;
Object o=conn.getUserData();
if (o instanceof PhoneUtils.CallerInfoToken) {
runQuery=mPhotoTracker.isDifferentImageRequest(((PhoneUtils.CallerInfoToken)o).currentInfo);
}
 else {
runQuery=mPhotoTracker.isDifferentImageRequest(conn);
}
if (runQuery) {
if (DBG) log(""String_Node_Str"");
PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(getContext(),conn,this,call);
updateDisplayForPerson(info.currentInfo,presentation,!info.isFinal,call);
}
 else {
if (DBG) log(""String_Node_Str"");
if (o instanceof CallerInfo) {
CallerInfo ci=(CallerInfo)o;
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,false,call);
}
 else if (o instanceof PhoneUtils.CallerInfoToken) {
CallerInfo ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
if (DBG) log(""String_Node_Str"" + ci);
updateDisplayForPerson(ci,presentation,true,call);
}
 else {
Log.w(LOG_TAG,""String_Node_Str"" + ""String_Node_Str"" + o);
}
}
}
}
updatePhotoForCallState(call);
setMainCallCardBackgroundResource(callCardBackgroundResid);
}",0.9815966493209798
184905,"@Override protected void onFinishInflate(){
  super.onFinishInflate();
  if (DBG)   log(""String_Node_Str"" + this + ""String_Node_Str"");
  LayoutInflater inflater=LayoutInflater.from(getContext());
  mMainCallCard=(ViewGroup)findViewById(R.id.mainCallCard);
  mOtherCallOngoingInfoArea=(ViewGroup)findViewById(R.id.otherCallOngoingInfoArea);
  mOtherCallOnHoldInfoArea=(ViewGroup)findViewById(R.id.otherCallOnHoldInfoArea);
  mUpperTitle=(TextView)findViewById(R.id.upperTitle);
  mLowerTitleViewGroup=(ViewGroup)findViewById(R.id.lowerTitleViewGroup);
  mLowerTitle=(TextView)findViewById(R.id.lowerTitle);
  mLowerTitleIcon=(ImageView)findViewById(R.id.lowerTitleIcon);
  mElapsedTime=(TextView)findViewById(R.id.elapsedTime);
  mTextColorConnected=getResources().getColor(R.color.incall_textConnected);
  mTextColorConnectedBluetooth=getResources().getColor(R.color.incall_textConnectedBluetooth);
  mTextColorEnded=getResources().getColor(R.color.incall_textEnded);
  mTextColorOnHold=getResources().getColor(R.color.incall_textOnHold);
  mPhoto=(ImageView)findViewById(R.id.photo);
  mName=(TextView)findViewById(R.id.name);
  mPhoneNumber=(TextView)findViewById(R.id.phoneNumber);
  mLabel=(TextView)findViewById(R.id.label);
  mOtherCallOngoingIcon=(ImageView)findViewById(R.id.otherCallOngoingIcon);
  mOtherCallOngoingName=(TextView)findViewById(R.id.otherCallOngoingName);
  mOtherCallOngoingStatus=(TextView)findViewById(R.id.otherCallOngoingStatus);
  mOtherCallOnHoldName=(TextView)findViewById(R.id.otherCallOnHoldName);
  mOtherCallOnHoldStatus=(TextView)findViewById(R.id.otherCallOnHoldStatus);
  mMenuButtonHint=(TextView)findViewById(R.id.menuButtonHint);
}","@Override protected void onFinishInflate(){
  super.onFinishInflate();
  if (DBG)   log(""String_Node_Str"" + this + ""String_Node_Str"");
  mMainCallCard=(ViewGroup)findViewById(R.id.mainCallCard);
  mOtherCallOngoingInfoArea=(ViewGroup)findViewById(R.id.otherCallOngoingInfoArea);
  mOtherCallOnHoldInfoArea=(ViewGroup)findViewById(R.id.otherCallOnHoldInfoArea);
  mUpperTitle=(TextView)findViewById(R.id.upperTitle);
  mLowerTitleViewGroup=(ViewGroup)findViewById(R.id.lowerTitleViewGroup);
  mLowerTitle=(TextView)findViewById(R.id.lowerTitle);
  mLowerTitleIcon=(ImageView)findViewById(R.id.lowerTitleIcon);
  mElapsedTime=(TextView)findViewById(R.id.elapsedTime);
  mTextColorConnected=getResources().getColor(R.color.incall_textConnected);
  mTextColorConnectedBluetooth=getResources().getColor(R.color.incall_textConnectedBluetooth);
  mTextColorEnded=getResources().getColor(R.color.incall_textEnded);
  mTextColorOnHold=getResources().getColor(R.color.incall_textOnHold);
  mPhoto=(ImageView)findViewById(R.id.photo);
  mName=(TextView)findViewById(R.id.name);
  mPhoneNumber=(TextView)findViewById(R.id.phoneNumber);
  mLabel=(TextView)findViewById(R.id.label);
  mOtherCallOngoingIcon=(ImageView)findViewById(R.id.otherCallOngoingIcon);
  mOtherCallOngoingName=(TextView)findViewById(R.id.otherCallOngoingName);
  mOtherCallOngoingStatus=(TextView)findViewById(R.id.otherCallOngoingStatus);
  mOtherCallOnHoldName=(TextView)findViewById(R.id.otherCallOnHoldName);
  mOtherCallOnHoldStatus=(TextView)findViewById(R.id.otherCallOnHoldStatus);
  mMenuButtonHint=(TextView)findViewById(R.id.menuButtonHint);
}",0.981442044417402
184906,"private void onDisconnect(AsyncResult r){
  if (VDBG)   log(""String_Node_Str"" + mPhone.getState());
  if (mPhone.getState() == Phone.State.IDLE) {
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  }
  Connection c=(Connection)r.result;
  if (DBG && c != null) {
    log(""String_Node_Str"" + c.getDisconnectCause() + ""String_Node_Str""+ c.isIncoming()+ ""String_Node_Str""+ c.getCreateTime());
  }
  if (DBG)   log(""String_Node_Str"");
  mRinger.stopRing();
  int toneToPlay=InCallTonePlayer.TONE_NONE;
  if (c != null) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if (cause == Connection.DisconnectCause.BUSY) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_BUSY;
    }
 else     if (cause == Connection.DisconnectCause.CONGESTION) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CONGESTION;
    }
  }
  if ((toneToPlay == InCallTonePlayer.TONE_NONE) && (mPhone.getState() == Phone.State.IDLE) && (c != null)) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if ((cause == Connection.DisconnectCause.NORMAL) || (cause == Connection.DisconnectCause.LOCAL)) {
      if (VDBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CALL_ENDED;
    }
  }
  if (mPhone.getState() == Phone.State.IDLE) {
    if (toneToPlay == InCallTonePlayer.TONE_NONE) {
      resetAudioStateAfterDisconnect();
    }
    NotificationMgr.getDefault().cancelCallInProgressNotification();
    if (!mApplication.isShowingCallScreen()) {
      if (VDBG)       log(""String_Node_Str"");
      mApplication.dismissCallScreen();
    }
  }
  if (c != null) {
    final String number=c.getAddress();
    final int presentation=c.getNumberPresentation();
    final long date=c.getCreateTime();
    final long duration=c.getDurationMillis();
    final Connection.DisconnectCause cause=c.getDisconnectCause();
    final int callLogType;
    if (c.isIncoming()) {
      callLogType=(cause == Connection.DisconnectCause.INCOMING_MISSED ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE);
    }
 else {
      callLogType=CallLog.Calls.OUTGOING_TYPE;
    }
    if (VDBG)     log(""String_Node_Str"" + callLogType + ""String_Node_Str""+ c.getUserData());
{
      Object o=c.getUserData();
      final CallerInfo ci;
      if ((o == null) || (o instanceof CallerInfo)) {
        ci=(CallerInfo)o;
      }
 else {
        ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
      }
      Thread t=new Thread(){
        public void run(){
          Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
        }
      }
;
      t.start();
    }
    if (callLogType == CallLog.Calls.MISSED_TYPE) {
      PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(mApplication,c,this,new Long(date));
      if (info != null) {
        if (VDBG)         log(""String_Node_Str"");
        if (info.isFinal) {
          CallerInfo ci=info.currentInfo;
          NotificationMgr.getDefault().notifyMissedCall(ci.name,ci.phoneNumber,ci.phoneLabel,date);
        }
      }
 else {
        Log.w(LOG_TAG,""String_Node_Str"" + c);
      }
    }
    if (toneToPlay != InCallTonePlayer.TONE_NONE) {
      if (VDBG)       log(""String_Node_Str"" + toneToPlay + ""String_Node_Str"");
      new InCallTonePlayer(toneToPlay).start();
    }
    if (mPhone.getState() == Phone.State.IDLE) {
      if (!mApplication.isShowingCallScreen()) {
        if (VDBG)         log(""String_Node_Str"");
        mApplication.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
        mApplication.requestWakeState(PhoneApp.WakeState.SLEEP);
      }
 else {
        if (VDBG)         log(""String_Node_Str"");
      }
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
    }
  }
}","private void onDisconnect(AsyncResult r){
  if (VDBG)   log(""String_Node_Str"" + mPhone.getState());
  if (mPhone.getState() == Phone.State.IDLE) {
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  }
  Connection c=(Connection)r.result;
  if (DBG && c != null) {
    log(""String_Node_Str"" + c.getDisconnectCause() + ""String_Node_Str""+ c.isIncoming()+ ""String_Node_Str""+ c.getCreateTime());
  }
  if (DBG)   log(""String_Node_Str"");
  mRinger.stopRing();
  int toneToPlay=InCallTonePlayer.TONE_NONE;
  if (c != null) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if (cause == Connection.DisconnectCause.BUSY) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_BUSY;
    }
 else     if (cause == Connection.DisconnectCause.CONGESTION) {
      if (DBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CONGESTION;
    }
  }
  if ((toneToPlay == InCallTonePlayer.TONE_NONE) && (mPhone.getState() == Phone.State.IDLE) && (c != null)) {
    Connection.DisconnectCause cause=c.getDisconnectCause();
    if ((cause == Connection.DisconnectCause.NORMAL) || (cause == Connection.DisconnectCause.LOCAL)) {
      if (VDBG)       log(""String_Node_Str"");
      toneToPlay=InCallTonePlayer.TONE_CALL_ENDED;
    }
  }
  if (mPhone.getState() == Phone.State.IDLE) {
    if (toneToPlay == InCallTonePlayer.TONE_NONE) {
      resetAudioStateAfterDisconnect();
    }
    NotificationMgr.getDefault().cancelCallInProgressNotification();
    if (!mApplication.isShowingCallScreen()) {
      if (VDBG)       log(""String_Node_Str"");
      mApplication.dismissCallScreen();
    }
  }
  if (c != null) {
    final String number=c.getAddress();
    final int presentation=c.getNumberPresentation();
    final long date=c.getCreateTime();
    final long duration=c.getDurationMillis();
    final Connection.DisconnectCause cause=c.getDisconnectCause();
    final int callLogType;
    if (c.isIncoming()) {
      callLogType=(cause == Connection.DisconnectCause.INCOMING_MISSED ? CallLog.Calls.MISSED_TYPE : CallLog.Calls.INCOMING_TYPE);
    }
 else {
      callLogType=CallLog.Calls.OUTGOING_TYPE;
    }
    if (VDBG)     log(""String_Node_Str"" + callLogType + ""String_Node_Str""+ c.getUserData());
{
      Object o=c.getUserData();
      final CallerInfo ci;
      if ((o == null) || (o instanceof CallerInfo)) {
        ci=(CallerInfo)o;
      }
 else {
        ci=((PhoneUtils.CallerInfoToken)o).currentInfo;
      }
      Thread t=new Thread(){
        public void run(){
          Calls.addCall(ci,mApplication,number,presentation,callLogType,date,(int)duration / 1000);
        }
      }
;
      t.start();
    }
    if (callLogType == CallLog.Calls.MISSED_TYPE) {
      PhoneUtils.CallerInfoToken info=PhoneUtils.startGetCallerInfo(mApplication,c,this,Long.valueOf(date));
      if (info != null) {
        if (VDBG)         log(""String_Node_Str"");
        if (info.isFinal) {
          CallerInfo ci=info.currentInfo;
          NotificationMgr.getDefault().notifyMissedCall(ci.name,ci.phoneNumber,ci.phoneLabel,date);
        }
      }
 else {
        Log.w(LOG_TAG,""String_Node_Str"" + c);
      }
    }
    if (toneToPlay != InCallTonePlayer.TONE_NONE) {
      if (VDBG)       log(""String_Node_Str"" + toneToPlay + ""String_Node_Str"");
      new InCallTonePlayer(toneToPlay).start();
    }
    if (mPhone.getState() == Phone.State.IDLE) {
      if (!mApplication.isShowingCallScreen()) {
        if (VDBG)         log(""String_Node_Str"");
        mApplication.setScreenTimeout(PhoneApp.ScreenTimeoutDuration.DEFAULT);
        mApplication.requestWakeState(PhoneApp.WakeState.SLEEP);
      }
 else {
        if (VDBG)         log(""String_Node_Str"");
      }
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
    }
  }
}",0.998416050686378
184907,"private void onNewRingingConnection(AsyncResult r){
  Connection c=(Connection)r.result;
  if (DBG)   log(""String_Node_Str"" + c);
  PhoneApp app=PhoneApp.getInstance();
  boolean provisioned=Settings.Secure.getInt(mPhone.getContext().getContentResolver(),Settings.Secure.DEVICE_PROVISIONED,0) != 0;
  if (!provisioned) {
    Log.i(LOG_TAG,""String_Node_Str"");
    PhoneUtils.hangupRingingCall(mPhone);
    return;
  }
  if (c != null && c.isRinging()) {
    Call.State state=c.getState();
    if (VDBG)     log(""String_Node_Str"" + state);
    if (state == Call.State.INCOMING) {
      PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
      startIncomingCallQuery(c);
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
      new InCallTonePlayer(InCallTonePlayer.TONE_CALL_WAITING).start();
      PhoneUtils.showIncomingCallUi();
    }
  }
  if (VDBG)   log(""String_Node_Str"");
  mApplication.requestWakeState(PhoneApp.WakeState.PARTIAL);
  if (VDBG)   log(""String_Node_Str"");
}","private void onNewRingingConnection(AsyncResult r){
  Connection c=(Connection)r.result;
  if (DBG)   log(""String_Node_Str"" + c);
  boolean provisioned=Settings.Secure.getInt(mPhone.getContext().getContentResolver(),Settings.Secure.DEVICE_PROVISIONED,0) != 0;
  if (!provisioned) {
    Log.i(LOG_TAG,""String_Node_Str"");
    PhoneUtils.hangupRingingCall(mPhone);
    return;
  }
  if (c != null && c.isRinging()) {
    Call.State state=c.getState();
    if (VDBG)     log(""String_Node_Str"" + state);
    if (state == Call.State.INCOMING) {
      PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
      startIncomingCallQuery(c);
    }
 else {
      if (VDBG)       log(""String_Node_Str"");
      new InCallTonePlayer(InCallTonePlayer.TONE_CALL_WAITING).start();
      PhoneUtils.showIncomingCallUi();
    }
  }
  if (VDBG)   log(""String_Node_Str"");
  mApplication.requestWakeState(PhoneApp.WakeState.PARTIAL);
  if (VDBG)   log(""String_Node_Str"");
}",0.9800102511532548
184908,"@Override public boolean dispatchTouchEvent(MotionEvent event){
  int x=(int)event.getX();
  int y=(int)event.getY();
  int closestDeltaX=0;
  int closestDeltaY=0;
  ArrayList<View> touchables=getTouchables();
  int minDistance=Integer.MAX_VALUE;
  View closest=null;
  final int numTouchables=touchables.size();
  Rect closestBounds=new Rect();
  Rect touchableBounds=new Rect();
  for (int i=0; i < numTouchables; i++) {
    View touchable=touchables.get(i);
    touchable.getDrawingRect(touchableBounds);
    offsetDescendantRectToMyCoords(touchable,touchableBounds);
    if (touchableBounds.contains(x,y)) {
      return super.dispatchTouchEvent(event);
    }
    int deltaX;
    if (x > touchableBounds.right) {
      deltaX=touchableBounds.right - 1 - x;
    }
 else     if (x < touchableBounds.left) {
      deltaX=touchableBounds.left + 1 - x;
    }
 else {
      deltaX=0;
    }
    int deltaY;
    if (y > touchableBounds.bottom) {
      deltaY=touchableBounds.bottom - 1 - y;
    }
 else     if (y < touchableBounds.top) {
      deltaY=touchableBounds.top + 1 - y;
    }
 else {
      deltaY=0;
    }
    final int distanceSquared=(deltaX * deltaX) + (deltaY * deltaY);
    if (distanceSquared < minDistance) {
      minDistance=distanceSquared;
      closest=touchable;
      closestDeltaX=deltaX;
      closestDeltaY=deltaY;
    }
  }
  if (closest != null) {
    event.offsetLocation(closestDeltaX,closestDeltaY);
    return super.dispatchTouchEvent(event);
  }
 else {
    return super.dispatchTouchEvent(event);
  }
}","@Override public boolean dispatchTouchEvent(MotionEvent event){
  int x=(int)event.getX();
  int y=(int)event.getY();
  int closestDeltaX=0;
  int closestDeltaY=0;
  ArrayList<View> touchables=getTouchables();
  int minDistance=Integer.MAX_VALUE;
  View closest=null;
  final int numTouchables=touchables.size();
  Rect touchableBounds=new Rect();
  for (int i=0; i < numTouchables; i++) {
    View touchable=touchables.get(i);
    touchable.getDrawingRect(touchableBounds);
    offsetDescendantRectToMyCoords(touchable,touchableBounds);
    if (touchableBounds.contains(x,y)) {
      return super.dispatchTouchEvent(event);
    }
    int deltaX;
    if (x > touchableBounds.right) {
      deltaX=touchableBounds.right - 1 - x;
    }
 else     if (x < touchableBounds.left) {
      deltaX=touchableBounds.left + 1 - x;
    }
 else {
      deltaX=0;
    }
    int deltaY;
    if (y > touchableBounds.bottom) {
      deltaY=touchableBounds.bottom - 1 - y;
    }
 else     if (y < touchableBounds.top) {
      deltaY=touchableBounds.top + 1 - y;
    }
 else {
      deltaY=0;
    }
    final int distanceSquared=(deltaX * deltaX) + (deltaY * deltaY);
    if (distanceSquared < minDistance) {
      minDistance=distanceSquared;
      closest=touchable;
      closestDeltaX=deltaX;
      closestDeltaY=deltaY;
    }
  }
  if (closest != null) {
    event.offsetLocation(closestDeltaX,closestDeltaY);
    return super.dispatchTouchEvent(event);
  }
 else {
    return super.dispatchTouchEvent(event);
  }
}",0.9891196834817012
184909,"public void onClick(View view){
  final Editable digits=mDigits.getText();
switch (view.getId()) {
case R.id.one:
{
      playTone(ToneGenerator.TONE_DTMF_1);
      keyPressed(KeyEvent.KEYCODE_1);
      return;
    }
case R.id.two:
{
    playTone(ToneGenerator.TONE_DTMF_2);
    keyPressed(KeyEvent.KEYCODE_2);
    return;
  }
case R.id.three:
{
  playTone(ToneGenerator.TONE_DTMF_3);
  keyPressed(KeyEvent.KEYCODE_3);
  return;
}
case R.id.four:
{
playTone(ToneGenerator.TONE_DTMF_4);
keyPressed(KeyEvent.KEYCODE_4);
return;
}
case R.id.five:
{
playTone(ToneGenerator.TONE_DTMF_5);
keyPressed(KeyEvent.KEYCODE_5);
return;
}
case R.id.six:
{
playTone(ToneGenerator.TONE_DTMF_6);
keyPressed(KeyEvent.KEYCODE_6);
return;
}
case R.id.seven:
{
playTone(ToneGenerator.TONE_DTMF_7);
keyPressed(KeyEvent.KEYCODE_7);
return;
}
case R.id.eight:
{
playTone(ToneGenerator.TONE_DTMF_8);
keyPressed(KeyEvent.KEYCODE_8);
return;
}
case R.id.nine:
{
playTone(ToneGenerator.TONE_DTMF_9);
keyPressed(KeyEvent.KEYCODE_9);
return;
}
case R.id.zero:
{
playTone(ToneGenerator.TONE_DTMF_0);
keyPressed(KeyEvent.KEYCODE_0);
return;
}
case R.id.pound:
{
playTone(ToneGenerator.TONE_DTMF_P);
keyPressed(KeyEvent.KEYCODE_POUND);
return;
}
case R.id.star:
{
playTone(ToneGenerator.TONE_DTMF_S);
keyPressed(KeyEvent.KEYCODE_STAR);
return;
}
case R.id.digits:
{
placeCall();
return;
}
case R.id.backspace:
{
keyPressed(KeyEvent.KEYCODE_DEL);
return;
}
}
}","public void onClick(View view){
switch (view.getId()) {
case R.id.one:
{
      playTone(ToneGenerator.TONE_DTMF_1);
      keyPressed(KeyEvent.KEYCODE_1);
      return;
    }
case R.id.two:
{
    playTone(ToneGenerator.TONE_DTMF_2);
    keyPressed(KeyEvent.KEYCODE_2);
    return;
  }
case R.id.three:
{
  playTone(ToneGenerator.TONE_DTMF_3);
  keyPressed(KeyEvent.KEYCODE_3);
  return;
}
case R.id.four:
{
playTone(ToneGenerator.TONE_DTMF_4);
keyPressed(KeyEvent.KEYCODE_4);
return;
}
case R.id.five:
{
playTone(ToneGenerator.TONE_DTMF_5);
keyPressed(KeyEvent.KEYCODE_5);
return;
}
case R.id.six:
{
playTone(ToneGenerator.TONE_DTMF_6);
keyPressed(KeyEvent.KEYCODE_6);
return;
}
case R.id.seven:
{
playTone(ToneGenerator.TONE_DTMF_7);
keyPressed(KeyEvent.KEYCODE_7);
return;
}
case R.id.eight:
{
playTone(ToneGenerator.TONE_DTMF_8);
keyPressed(KeyEvent.KEYCODE_8);
return;
}
case R.id.nine:
{
playTone(ToneGenerator.TONE_DTMF_9);
keyPressed(KeyEvent.KEYCODE_9);
return;
}
case R.id.zero:
{
playTone(ToneGenerator.TONE_DTMF_0);
keyPressed(KeyEvent.KEYCODE_0);
return;
}
case R.id.pound:
{
playTone(ToneGenerator.TONE_DTMF_P);
keyPressed(KeyEvent.KEYCODE_POUND);
return;
}
case R.id.star:
{
playTone(ToneGenerator.TONE_DTMF_S);
keyPressed(KeyEvent.KEYCODE_STAR);
return;
}
case R.id.digits:
{
placeCall();
return;
}
case R.id.backspace:
{
keyPressed(KeyEvent.KEYCODE_DEL);
return;
}
}
}",0.9846920612317552
184910,"/** 
 * Do some delayed cleanup after a Phone call gets disconnected. This method gets called a couple of seconds after any DISCONNECT event from the Phone; it's triggered by the DELAYED_CLEANUP_AFTER_DISCONNECT message we send in onDisconnect(). If the Phone is totally idle right now, that means we've already shown the ""call ended"" state for a couple of seconds, and it's now time to finish() this activity. If the Phone is *not* idle right now, that probably means that one call ended but the other line is still in use.  In that case, we *don't* exit the in-call screen, but we at least turn off the backlight (which we turned on in onDisconnect().)
 */
private void delayedCleanupAfterDisconnect(){
  if (VDBG)   log(""String_Node_Str"" + mPhone.getState());
  mPhone.clearDisconnected();
  final PhoneApp app=PhoneApp.getInstance();
  if (!phoneIsInUse()) {
    if (DBG)     log(""String_Node_Str"");
    if (mIsForegroundActivity) {
      if (DBG)       log(""String_Node_Str"");
      if (mShowCallLogAfterDisconnect && !isPhoneStateRestricted()) {
        if (VDBG)         log(""String_Node_Str"");
        final Intent intent=PhoneApp.createCallLogIntent();
        startActivity(intent);
      }
      finish();
    }
  }
 else {
    if (DBG)     log(""String_Node_Str"");
    if (DBG)     PhoneUtils.dumpCallState(mPhone);
  }
}","/** 
 * Do some delayed cleanup after a Phone call gets disconnected. This method gets called a couple of seconds after any DISCONNECT event from the Phone; it's triggered by the DELAYED_CLEANUP_AFTER_DISCONNECT message we send in onDisconnect(). If the Phone is totally idle right now, that means we've already shown the ""call ended"" state for a couple of seconds, and it's now time to finish() this activity. If the Phone is *not* idle right now, that probably means that one call ended but the other line is still in use.  In that case, we *don't* exit the in-call screen, but we at least turn off the backlight (which we turned on in onDisconnect().)
 */
private void delayedCleanupAfterDisconnect(){
  if (VDBG)   log(""String_Node_Str"" + mPhone.getState());
  mPhone.clearDisconnected();
  if (!phoneIsInUse()) {
    if (DBG)     log(""String_Node_Str"");
    if (mIsForegroundActivity) {
      if (DBG)       log(""String_Node_Str"");
      if (mShowCallLogAfterDisconnect && !isPhoneStateRestricted()) {
        if (VDBG)         log(""String_Node_Str"");
        final Intent intent=PhoneApp.createCallLogIntent();
        startActivity(intent);
      }
      finish();
    }
  }
 else {
    if (DBG)     log(""String_Node_Str"");
    if (DBG)     PhoneUtils.dumpCallState(mPhone);
  }
}",0.7659411989308896
184911,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mPhone=PhoneApp.getInstance().phone;
  Intent intent=getIntent();
  if (LOGV)   Log.v(TAG,""String_Node_Str"" + intent + ""String_Node_Str"");
  String action=intent.getAction();
  String number=PhoneNumberUtils.getNumberFromIntent(intent,this);
  if (number != null) {
    number=PhoneNumberUtils.convertKeypadLettersToDigits(number);
    number=PhoneNumberUtils.stripSeparators(number);
  }
  final boolean emergencyNumber=(number != null) && PhoneNumberUtils.isEmergencyNumber(number);
  boolean callNow;
  if (getClass().getName().equals(intent.getComponent().getClassName())) {
    if (!Intent.ACTION_CALL.equals(intent.getAction())) {
      Log.w(TAG,""String_Node_Str"");
      intent.setAction(Intent.ACTION_CALL);
    }
  }
  if (Intent.ACTION_CALL_PRIVILEGED.equals(action)) {
    action=emergencyNumber ? Intent.ACTION_CALL_EMERGENCY : Intent.ACTION_CALL;
    intent.setAction(action);
  }
  if (Intent.ACTION_CALL.equals(action)) {
    if (emergencyNumber) {
      Log.w(TAG,""String_Node_Str"" + number + ""String_Node_Str""+ intent+ ""String_Node_Str"");
      finish();
      return;
    }
    callNow=false;
  }
 else   if (Intent.ACTION_CALL_EMERGENCY.equals(action)) {
    if (!emergencyNumber) {
      Log.w(TAG,""String_Node_Str"" + number + ""String_Node_Str""+ intent+ ""String_Node_Str"");
      finish();
      return;
    }
    callNow=true;
  }
 else {
    Log.e(TAG,""String_Node_Str"" + intent + ""String_Node_Str"");
    finish();
    return;
  }
  PhoneApp.getInstance().wakeUpScreen();
  if (number == null)   callNow=true;
  if (callNow) {
    intent.setClass(this,InCallScreen.class);
    startActivity(intent);
  }
  Intent broadcastIntent=new Intent(Intent.ACTION_NEW_OUTGOING_CALL);
  if (number != null)   broadcastIntent.putExtra(Intent.EXTRA_PHONE_NUMBER,number);
  broadcastIntent.putExtra(EXTRA_ALREADY_CALLED,callNow);
  broadcastIntent.putExtra(EXTRA_ORIGINAL_URI,intent.getData().toString());
  if (LOGV)   Log.v(TAG,""String_Node_Str"" + broadcastIntent + ""String_Node_Str"");
  sendOrderedBroadcast(broadcastIntent,PERMISSION,null,null,Activity.RESULT_OK,number,null);
  finish();
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Intent intent=getIntent();
  if (LOGV)   Log.v(TAG,""String_Node_Str"" + intent + ""String_Node_Str"");
  String action=intent.getAction();
  String number=PhoneNumberUtils.getNumberFromIntent(intent,this);
  if (number != null) {
    number=PhoneNumberUtils.convertKeypadLettersToDigits(number);
    number=PhoneNumberUtils.stripSeparators(number);
  }
  final boolean emergencyNumber=(number != null) && PhoneNumberUtils.isEmergencyNumber(number);
  boolean callNow;
  if (getClass().getName().equals(intent.getComponent().getClassName())) {
    if (!Intent.ACTION_CALL.equals(intent.getAction())) {
      Log.w(TAG,""String_Node_Str"");
      intent.setAction(Intent.ACTION_CALL);
    }
  }
  if (Intent.ACTION_CALL_PRIVILEGED.equals(action)) {
    action=emergencyNumber ? Intent.ACTION_CALL_EMERGENCY : Intent.ACTION_CALL;
    intent.setAction(action);
  }
  if (Intent.ACTION_CALL.equals(action)) {
    if (emergencyNumber) {
      Log.w(TAG,""String_Node_Str"" + number + ""String_Node_Str""+ intent+ ""String_Node_Str"");
      finish();
      return;
    }
    callNow=false;
  }
 else   if (Intent.ACTION_CALL_EMERGENCY.equals(action)) {
    if (!emergencyNumber) {
      Log.w(TAG,""String_Node_Str"" + number + ""String_Node_Str""+ intent+ ""String_Node_Str"");
      finish();
      return;
    }
    callNow=true;
  }
 else {
    Log.e(TAG,""String_Node_Str"" + intent + ""String_Node_Str"");
    finish();
    return;
  }
  PhoneApp.getInstance().wakeUpScreen();
  if (number == null)   callNow=true;
  if (callNow) {
    intent.setClass(this,InCallScreen.class);
    startActivity(intent);
  }
  Intent broadcastIntent=new Intent(Intent.ACTION_NEW_OUTGOING_CALL);
  if (number != null)   broadcastIntent.putExtra(Intent.EXTRA_PHONE_NUMBER,number);
  broadcastIntent.putExtra(EXTRA_ALREADY_CALLED,callNow);
  broadcastIntent.putExtra(EXTRA_ORIGINAL_URI,intent.getData().toString());
  if (LOGV)   Log.v(TAG,""String_Node_Str"" + broadcastIntent + ""String_Node_Str"");
  sendOrderedBroadcast(broadcastIntent,PERMISSION,null,null,Activity.RESULT_OK,number,null);
  finish();
}",0.9909784871616932
184912,"@Override public void onCreate(){
  if (Config.LOGV)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    if (getSystemService(Context.BLUETOOTH_SERVICE) != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    SoundEffect.init();
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mKeyguardLock=mKeyguardManager.newKeyguardLock(LOG_TAG);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree);
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (Config.LOGV)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForAbsent(mHandler,EVENT_SIM_ABSENT,null);
      sim.registerForLocked(mHandler,EVENT_SIM_LOCKED,null);
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    PhoneUtils.initializeConnectionHandler(phone);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothIntent.HEADSET_STATE_CHANGED_ACTION);
    intentFilter.addAction(BluetoothIntent.HEADSET_AUDIO_STATE_CHANGED_ACTION);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
}","@Override public void onCreate(){
  if (Config.LOGV)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    if (getSystemService(Context.BLUETOOTH_SERVICE) != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mKeyguardLock=mKeyguardManager.newKeyguardLock(LOG_TAG);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree);
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (Config.LOGV)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForAbsent(mHandler,EVENT_SIM_ABSENT,null);
      sim.registerForLocked(mHandler,EVENT_SIM_LOCKED,null);
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    PhoneUtils.initializeConnectionHandler(phone);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothIntent.HEADSET_STATE_CHANGED_ACTION);
    intentFilter.addAction(BluetoothIntent.HEADSET_AUDIO_STATE_CHANGED_ACTION);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
}",0.9963931469792606
184913,"@Override public void onCreate(){
  if (Config.LOGV)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    if (getSystemService(Context.BLUETOOTH_SERVICE) != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    SoundEffect.init();
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mKeyguardLock=mKeyguardManager.newKeyguardLock(LOG_TAG);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree);
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (Config.LOGV)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForAbsent(mHandler,EVENT_SIM_ABSENT,null);
      sim.registerForLocked(mHandler,EVENT_SIM_LOCKED,null);
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    PhoneUtils.initializeConnectionHandler(phone);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothIntent.HEADSET_STATE_CHANGED_ACTION);
    intentFilter.addAction(BluetoothIntent.HEADSET_AUDIO_STATE_CHANGED_ACTION);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
}","@Override public void onCreate(){
  if (Config.LOGV)   Log.v(LOG_TAG,""String_Node_Str"");
  ContentResolver resolver=getContentResolver();
  if (phone == null) {
    PhoneFactory.makeDefaultPhones(this);
    phone=PhoneFactory.getDefaultPhone();
    NotificationMgr.init(this);
    phoneMgr=new PhoneInterfaceManager(this,phone);
    if (getSystemService(Context.BLUETOOTH_SERVICE) != null) {
      mBtHandsfree=new BluetoothHandsfree(this,phone);
      startService(new Intent(this,BluetoothHeadsetService.class));
    }
 else {
      mBtHandsfree=null;
    }
    ringer=new Ringer(phone);
    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,LOG_TAG);
    mKeyguardManager=(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE);
    mKeyguardLock=mKeyguardManager.newKeyguardLock(LOG_TAG);
    mPowerManagerService=IPowerManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    notifier=new CallNotifier(this,phone,ringer,mBtHandsfree);
    IccCard sim=phone.getIccCard();
    if (sim != null) {
      if (Config.LOGV)       Log.v(LOG_TAG,""String_Node_Str"");
      sim.registerForAbsent(mHandler,EVENT_SIM_ABSENT,null);
      sim.registerForLocked(mHandler,EVENT_SIM_LOCKED,null);
      sim.registerForNetworkLocked(mHandler,EVENT_SIM_NETWORK_LOCKED,null);
    }
    phone.registerForMmiComplete(mHandler,MMI_COMPLETE,null);
    PhoneUtils.initializeConnectionHandler(phone);
    IntentFilter intentFilter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    intentFilter.addAction(BluetoothIntent.HEADSET_STATE_CHANGED_ACTION);
    intentFilter.addAction(BluetoothIntent.HEADSET_AUDIO_STATE_CHANGED_ACTION);
    intentFilter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
    intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    intentFilter.addAction(Intent.ACTION_BATTERY_LOW);
    intentFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
    intentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
    registerReceiver(mReceiver,intentFilter);
    IntentFilter mediaButtonIntentFilter=new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
    mediaButtonIntentFilter.setPriority(1);
    registerReceiver(mMediaButtonReceiver,mediaButtonIntentFilter);
    PreferenceManager.setDefaultValues(this,R.xml.network_setting,false);
    PreferenceManager.setDefaultValues(this,R.xml.call_feature_setting,false);
switch (phone.getState()) {
case IDLE:
      if (DBG)       Log.d(LOG_TAG,""String_Node_Str"");
    PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_IDLE);
  PhoneUtils.setAudioMode(this,AudioManager.MODE_NORMAL);
break;
case RINGING:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_RINGING);
PhoneUtils.setAudioMode(this,AudioManager.MODE_RINGTONE);
break;
case OFFHOOK:
if (DBG) Log.d(LOG_TAG,""String_Node_Str"");
PhoneUtils.setAudioControlState(PhoneUtils.AUDIO_OFFHOOK);
PhoneUtils.setAudioMode(this,AudioManager.MODE_IN_CALL);
break;
}
}
resolver.getType(Uri.parse(""String_Node_Str""));
mShouldRestoreMuteOnInCallResume=false;
}",0.9963931469792606
184914,"@Override protected boolean processFile(final File file){
  logger.info(""String_Node_Str"",file.getAbsolutePath());
  StringWriter writer=new StringWriter();
  final TransformerFactory transformerFactory=TransformerFactory.newInstance();
  try {
    final Transformer transformer=transformerFactory.newTransformer(new StreamSource(template));
    transformer.transform(new StreamSource(file),new StreamResult(writer));
    String result=writer.toString();
    String outputFileName=getTemplate().getAbsolutePath() + File.pathSeparator + buildResultFilename(result);
    BufferedWriter out=new BufferedWriter(new FileWriter(outputFileName));
    out.write(result);
    out.close();
    return true;
  }
 catch (  TransformerConfigurationException e) {
  }
catch (  TransformerException e) {
  }
catch (  IOException e) {
  }
  return false;
}","@Override protected boolean processFile(final File file){
  logger.info(""String_Node_Str"",file.getAbsolutePath());
  StringWriter writer=new StringWriter();
  final TransformerFactory transformerFactory=TransformerFactory.newInstance();
  try {
    final Transformer transformer=transformerFactory.newTransformer(new StreamSource(template));
    transformer.transform(new StreamSource(file),new StreamResult(writer));
    String result=writer.toString();
    String outputFileName=getDestinationDirectory().getAbsolutePath() + File.separator + buildResultFilename(result);
    BufferedWriter out=new BufferedWriter(new FileWriter(outputFileName));
    out.write(result);
    out.close();
    return true;
  }
 catch (  TransformerConfigurationException e) {
  }
catch (  TransformerException e) {
  }
catch (  IOException e) {
  }
  return false;
}",0.9798578199052131
184915,"private void processPresentations() throws RepositoryException {
  mLogger.debug(""String_Node_Str"");
  Map<String,Presentation> tNewPresentations=new HashMap<String,Presentation>();
  Map<String,Long> tPathEntries=getChildrenRevisions(getLocation(""String_Node_Str""));
  for (  Map.Entry<String,Long> tEntry : tPathEntries.entrySet()) {
    ;
    Presentation tPresentation=(Presentation)mApplicationContext.getBean(""String_Node_Str"",new Object[]{tEntry.getValue(),tEntry.getKey()});
    tNewPresentations.put(tEntry.getKey(),tPresentation);
  }
  mLogger.debug(""String_Node_Str"");
  Repository tRepository=getRepository();
  RepositoryChangeset<Presentation> tChangeset=new RepositoryChangeset<Presentation>(tRepository.getPresentations(),tNewPresentations);
  for (  Map.Entry<String,Presentation> tEntry : tChangeset.getRemovals().entrySet()) {
    tRepository.removePresentation(tEntry.getKey(),tEntry.getValue());
  }
  for (  Map.Entry<String,Presentation> tEntry : tChangeset.getAdditions().entrySet()) {
    tRepository.addPresentation(tEntry.getKey(),tEntry.getValue());
  }
  for (  Map.Entry<String,Presentation> tEntry : tChangeset.getUpdates().entrySet()) {
    tRepository.updatePresentation(tEntry.getKey(),tEntry.getValue());
  }
}","private void processPresentations() throws RepositoryException {
  mLogger.debug(""String_Node_Str"");
  Map<String,Presentation> tNewPresentations=new HashMap<String,Presentation>();
  Map<String,Long> tPathEntries=getChildrenRevisions(getLocation(""String_Node_Str""));
  for (  Map.Entry<String,Long> tEntry : tPathEntries.entrySet()) {
    ;
    Presentation tPresentation=(Presentation)mApplicationContext.getBean(""String_Node_Str"",new Object[]{tEntry.getValue(),""String_Node_Str"" + tEntry.getKey()});
    tNewPresentations.put(tEntry.getKey(),tPresentation);
  }
  mLogger.debug(""String_Node_Str"");
  Repository tRepository=getRepository();
  RepositoryChangeset<Presentation> tChangeset=new RepositoryChangeset<Presentation>(tRepository.getPresentations(),tNewPresentations);
  for (  Map.Entry<String,Presentation> tEntry : tChangeset.getRemovals().entrySet()) {
    tRepository.removePresentation(tEntry.getKey(),tEntry.getValue());
  }
  for (  Map.Entry<String,Presentation> tEntry : tChangeset.getAdditions().entrySet()) {
    tRepository.addPresentation(tEntry.getKey(),tEntry.getValue());
  }
  for (  Map.Entry<String,Presentation> tEntry : tChangeset.getUpdates().entrySet()) {
    tRepository.updatePresentation(tEntry.getKey(),tEntry.getValue());
  }
}",0.9920382165605096
184916,"private Map<String,Long> getChildrenRevisions(final String iLocation) throws RepositoryException {
  try {
    final Map<String,Long> tChildren=new HashMap<String,Long>();
    mClient.info2(iLocation,Revision.HEAD,Revision.HEAD,Depth.immediates,null,new InfoCallback(){
      @Override public void singleInfo(      final Info2 iInfo){
        if (iInfo.getPath().equals(iLocation)) {
          return;
        }
        tChildren.put(iInfo.getPath(),iInfo.getLastChangedRev());
      }
    }
);
    return tChildren;
  }
 catch (  ClientException tException) {
    throw new RepositoryException(""String_Node_Str"",tException);
  }
}","private Map<String,Long> getChildrenRevisions(final String iLocation) throws RepositoryException {
  try {
    final Map<String,Long> tChildren=new HashMap<String,Long>();
    mClient.info2(iLocation,Revision.HEAD,Revision.HEAD,Depth.immediates,null,new InfoCallback(){
      @Override public void singleInfo(      final Info2 iInfo){
        if (iInfo.getUrl().equals(iLocation)) {
          return;
        }
        tChildren.put(iInfo.getPath(),iInfo.getLastChangedRev());
      }
    }
);
    return tChildren;
  }
 catch (  ClientException tException) {
    throw new RepositoryException(""String_Node_Str"",tException);
  }
}",0.9944488501189532
184917,"@Override public void singleInfo(final Info2 iInfo){
  if (iInfo.getPath().equals(iLocation)) {
    return;
  }
  tChildren.put(iInfo.getPath(),iInfo.getLastChangedRev());
}","@Override public void singleInfo(final Info2 iInfo){
  if (iInfo.getUrl().equals(iLocation)) {
    return;
  }
  tChildren.put(iInfo.getPath(),iInfo.getLastChangedRev());
}",0.9797101449275364
184918,"protected final String getEndpoint(final String[] iResources){
  StringBuilder tEndpointBuilder=new StringBuilder(""String_Node_Str"").append(getAddress());
  tEndpointBuilder.append(""String_Node_Str"").append(getPort());
  for (  final String tResource : iResources) {
    tEndpointBuilder.append(""String_Node_Str"").append(tResource);
  }
  return tEndpointBuilder.toString();
}","protected final String getEndpoint(final String[] iResources){
  StringBuilder tEndpointBuilder=new StringBuilder(""String_Node_Str"").append(getAddress());
  tEndpointBuilder.append(""String_Node_Str"").append(getPort());
  tEndpointBuilder.append(""String_Node_Str"");
  for (  final String tResource : iResources) {
    tEndpointBuilder.append(tResource).append(""String_Node_Str"");
  }
  return tEndpointBuilder.toString();
}",0.8972431077694235
184919,"private Network(){
  if (System.getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
    mDevices=new HashMap<UUID,NetworkEntity>();
    mUpnpService=new UpnpServiceImpl();
    mListeners=new ArrayList<INetworkListener>();
  }
 else   if (System.getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
    mDevices=new HashMap<UUID,NetworkEntity>();
    mUpnpService=new UpnpServiceImpl(new CompatUpnpServiceConfiguration());
    mListeners=new ArrayList<INetworkListener>();
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  }
}","private Network(){
  mDevices=new HashMap<UUID,NetworkEntity>();
  mUpnpService=new UpnpServiceImpl();
  mListeners=new ArrayList<INetworkListener>();
}",0.3963494132985658
184920,"@Override public final void run() throws ServiceRunException {
  try {
    getLogger().debug(""String_Node_Str"");
    mConfigurationsRevision=getConfigurations();
    processConfigurations();
  }
 catch (  RepositoryException tException) {
    throw new ServiceRunException(""String_Node_Str"",tException);
  }
  try {
    getLogger().debug(""String_Node_Str"");
    mConfigurationsRevision=checkPresentations();
    processPresentations();
  }
 catch (  RepositoryException tException) {
    throw new ServiceRunException(""String_Node_Str"",tException);
  }
  mSVNMonitor.schedule(new Monitor(),mSVNMonitorInterval * 1000,mSVNMonitorInterval * 1000);
}","@Override public final void run() throws ServiceRunException {
  try {
    getLogger().debug(""String_Node_Str"");
    mConnectionsRevision=getConnections();
    processConnections();
  }
 catch (  RepositoryException tException) {
    throw new ServiceRunException(""String_Node_Str"",tException);
  }
  try {
    getLogger().debug(""String_Node_Str"");
    mConfigurationsRevision=getConfigurations();
    processConfigurations();
  }
 catch (  RepositoryException tException) {
    throw new ServiceRunException(""String_Node_Str"",tException);
  }
  try {
    getLogger().debug(""String_Node_Str"");
    mConfigurationsRevision=checkPresentations();
    processPresentations();
  }
 catch (  RepositoryException tException) {
    throw new ServiceRunException(""String_Node_Str"",tException);
  }
  mSVNMonitor.schedule(new Monitor(),mSVNMonitorInterval * 1000,mSVNMonitorInterval * 1000);
}",0.8457516339869281
184921,"public RepositoryMonitor() throws ServiceSetupException {
  mSVNCheckoutRoot=new File(getConfiguration().getString(""String_Node_Str""));
  if (!mSVNCheckoutRoot.exists() || !mSVNCheckoutRoot.canWrite())   throw new ServiceSetupException(""String_Node_Str"");
  Pattern tLocationPattern=Pattern.compile(""String_Node_Str"");
  mSVNLocation=getConfiguration().getString(""String_Node_Str"");
  Matcher tLocationMatcher=tLocationPattern.matcher(mSVNLocation);
  if (!tLocationMatcher.find()) {
    throw new ServiceSetupException(""String_Node_Str"" + mSVNLocation + ""String_Node_Str"");
  }
  Repository.getInstance().setServer(mSVNLocation);
  mSVNClient=new SVNClient();
  Integer tInterval=getConfiguration().getInt(""String_Node_Str"");
  if (tInterval <= 0) {
    throw new ServiceSetupException(""String_Node_Str"");
  }
  mSVNMonitorInterval=tInterval;
  getLogger().debug(""String_Node_Str"" + tInterval + ""String_Node_Str"");
  mSVNMonitor=new Timer();
}","public RepositoryMonitor() throws ServiceSetupException {
  mSVNCheckoutRoot=new File(getConfiguration().getString(""String_Node_Str""));
  if (!mSVNCheckoutRoot.exists())   mSVNCheckoutRoot.mkdirs();
  if (!mSVNCheckoutRoot.exists() || !mSVNCheckoutRoot.canWrite())   throw new ServiceSetupException(""String_Node_Str"");
  Pattern tLocationPattern=Pattern.compile(""String_Node_Str"");
  mSVNLocation=getConfiguration().getString(""String_Node_Str"");
  Matcher tLocationMatcher=tLocationPattern.matcher(mSVNLocation);
  if (!tLocationMatcher.find()) {
    throw new ServiceSetupException(""String_Node_Str"" + mSVNLocation + ""String_Node_Str"");
  }
  Repository.getInstance().setServer(mSVNLocation);
  mSVNClient=new SVNClient();
  Integer tInterval=getConfiguration().getInt(""String_Node_Str"");
  if (tInterval <= 0) {
    throw new ServiceSetupException(""String_Node_Str"");
  }
  mSVNMonitorInterval=tInterval;
  getLogger().debug(""String_Node_Str"" + tInterval + ""String_Node_Str"");
  mSVNMonitor=new Timer();
}",0.9677088672475652
184922,"public Processor(final File iFile,final String iValidationFilename) throws RepositoryException {
  mLogger=Service.getLogger(this);
  if (iValidationFilename != null) {
    if (System.getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
      mLogger.warn(""String_Node_Str"");
    }
 else {
      try {
        String tSchemaLanguage=""String_Node_Str"";
        SchemaFactory tSchemaFactory=SchemaFactory.newInstance(tSchemaLanguage);
        Schema tSchema=tSchemaFactory.newSchema(this.getClass().getClassLoader().getResource(""String_Node_Str""));
        Validator tValidator=tSchema.newValidator();
        tValidator.validate(new StreamSource(iValidationFilename));
      }
 catch (      SAXException tException) {
        throw new RepositoryException(""String_Node_Str"",tException);
      }
catch (      IOException tException) {
        throw new RepositoryException(""String_Node_Str"",tException);
      }
    }
  }
  try {
    if (PARSER_FACTORY == null) {
      PARSER_FACTORY=XmlPullParserFactory.newInstance();
      PARSER_FACTORY.setNamespaceAware(true);
      PARSER_FACTORY.setValidating(false);
    }
  }
 catch (  XmlPullParserException tException) {
    throw new RepositoryException(""String_Node_Str"",tException);
  }
  try {
    mParser=PARSER_FACTORY.newPullParser();
    mParser.setInput(new FileInputStream(iFile),null);
  }
 catch (  XmlPullParserException tException) {
    throw new RepositoryException(""String_Node_Str"",tException);
  }
catch (  FileNotFoundException tException) {
    throw new RepositoryException(""String_Node_Str"",tException);
  }
}","public Processor(final File iFile,final String iValidationFilename) throws RepositoryException {
  mLogger=Service.getLogger(this);
  if (iValidationFilename != null) {
    try {
      String tSchemaLanguage=""String_Node_Str"";
      SchemaFactory tSchemaFactory=SchemaFactory.newInstance(tSchemaLanguage);
      Schema tSchema=tSchemaFactory.newSchema(this.getClass().getClassLoader().getResource(iValidationFilename));
      Validator tValidator=tSchema.newValidator();
      tValidator.validate(new StreamSource(iFile));
    }
 catch (    SAXException tException) {
      throw new RepositoryException(""String_Node_Str"",tException);
    }
catch (    IOException tException) {
      throw new RepositoryException(""String_Node_Str"",tException);
    }
  }
  try {
    if (PARSER_FACTORY == null) {
      PARSER_FACTORY=XmlPullParserFactory.newInstance();
      PARSER_FACTORY.setNamespaceAware(true);
      PARSER_FACTORY.setValidating(false);
    }
  }
 catch (  XmlPullParserException tException) {
    throw new RepositoryException(""String_Node_Str"",tException);
  }
  try {
    mParser=PARSER_FACTORY.newPullParser();
    mParser.setInput(new FileInputStream(iFile),null);
  }
 catch (  XmlPullParserException tException) {
    throw new RepositoryException(""String_Node_Str"",tException);
  }
catch (  FileNotFoundException tException) {
    throw new RepositoryException(""String_Node_Str"",tException);
  }
}",0.9138276553106212
184923,"private static void stop(){
  for (  ServiceType tServiceType : mSubservices.keySet()) {
    Service tService=mSubservices.get(tServiceType);
    mLogger.debug(""String_Node_Str"" + mServiceNames.get(tServiceType));
    try {
      tService.stop();
      mSubservices.remove(tServiceType);
    }
 catch (    ServiceRunException e) {
      mLogger.error(""String_Node_Str"" + mServiceNames.get(tServiceType),e);
    }
  }
}","private static void stop(){
  for (  ServiceType tServiceType : SUBSERVICES.keySet()) {
    Service tService=SUBSERVICES.get(tServiceType);
    LOGGER.debug(""String_Node_Str"" + cServiceNames.get(tServiceType));
    try {
      tService.stop();
      SUBSERVICES.remove(tServiceType);
    }
 catch (    ServiceRunException tException) {
      LOGGER.error(""String_Node_Str"" + cServiceNames.get(tServiceType),tException);
    }
  }
}",0.7491166077738516
184924,"public static SignalHandler install(String signalName){
  mLogger.debug(""String_Node_Str"" + signalName);
  Signal diagSignal=new Signal(signalName);
  Main instance=new Main();
  instance.oldHandler=Signal.handle(diagSignal,instance);
  return instance;
}","public static SignalHandler install(final String iSignalName){
  LOGGER.debug(""String_Node_Str"" + iSignalName);
  Signal tSignal=new Signal(iSignalName);
  Main tInstance=new Main();
  tInstance.mOldHandler=Signal.handle(tSignal,tInstance);
  return tInstance;
}",0.793036750483559
184925,"public void signalAction(Signal signal){
  mLogger.info(""String_Node_Str"" + signal.getName());
  if (mStatus == Status.RUNNING) {
    mLogger.info(""String_Node_Str"");
    mStatus=Status.STOPPING;
    stop();
    mLogger.info(""String_Node_Str"");
    mStatus=Status.IDLE;
    System.exit(0);
  }
 else   if (mStatus != Status.STOPPING) {
    mLogger.info(""String_Node_Str"");
    mStatus=Status.IDLE;
    System.exit(0);
  }
 else {
    mLogger.debug(""String_Node_Str"" + mStatus.name());
  }
}","public final void signalAction(final Signal iSignal){
  LOGGER.info(""String_Node_Str"" + iSignal.getName());
  if (STATUS == Status.RUNNING) {
    LOGGER.info(""String_Node_Str"");
    STATUS=Status.STOPPING;
    stop();
    LOGGER.info(""String_Node_Str"");
    STATUS=Status.IDLE;
    System.exit(0);
  }
 else   if (STATUS != Status.STOPPING) {
    LOGGER.info(""String_Node_Str"");
    STATUS=Status.IDLE;
    System.exit(0);
  }
 else {
    LOGGER.debug(""String_Node_Str"" + STATUS.name());
  }
}",0.4781281790437436
184926,"private static boolean start(){
  for (  ServiceType tServiceType : mSubservices.keySet()) {
    Service tService=mSubservices.get(tServiceType);
    mLogger.debug(""String_Node_Str"" + mServiceNames.get(tServiceType));
    try {
      tService.run();
    }
 catch (    ServiceRunException e) {
      mLogger.error(""String_Node_Str"" + mServiceNames.get(tServiceType),e);
      return false;
    }
  }
  return true;
}","private static boolean start(){
  for (  ServiceType tServiceType : SUBSERVICES.keySet()) {
    Service tService=SUBSERVICES.get(tServiceType);
    LOGGER.debug(""String_Node_Str"" + cServiceNames.get(tServiceType));
    try {
      tService.run();
    }
 catch (    ServiceRunException tException) {
      LOGGER.error(""String_Node_Str"" + cServiceNames.get(tServiceType),tException);
      return false;
    }
  }
  return true;
}",0.8459715639810427
184927,"@Override public void handle(Signal signal){
  mLogger.info(""String_Node_Str"" + signal.getName());
  try {
    signalAction(signal);
    if (oldHandler != SIG_DFL && oldHandler != SIG_IGN) {
      oldHandler.handle(signal);
    }
  }
 catch (  Exception e) {
    mLogger.error(""String_Node_Str"" + signal.getName() + ""String_Node_Str"",e);
  }
}","@Override public final void handle(final Signal iSignal){
  LOGGER.info(""String_Node_Str"" + iSignal.getName());
  try {
    signalAction(iSignal);
    if (mOldHandler != SIG_DFL && mOldHandler != SIG_IGN) {
      mOldHandler.handle(iSignal);
    }
  }
 catch (  Exception tException) {
    LOGGER.error(""String_Node_Str"" + iSignal.getName() + ""String_Node_Str"",tException);
  }
}",0.6260387811634349
184928,"public static void main(String[] args) throws ServletException, LifecycleException {
  mLogger=Logger.getLogger(Main.class);
  Main.install(""String_Node_Str"");
  Main.install(""String_Node_Str"");
  Main.install(""String_Node_Str"");
  mLogger.info(""String_Node_Str"");
  mStatus=Status.INITIALIZING;
  if (!initialize()) {
    mLogger.error(""String_Node_Str"");
    mStatus=Status.IDLE;
    System.exit(0);
  }
  mLogger.info(""String_Node_Str"");
  mStatus=Status.STARTING;
  if (!start()) {
    mLogger.error(""String_Node_Str"");
    mStatus=Status.STOPPING;
    stop();
    mStatus=Status.IDLE;
    System.exit(0);
  }
  mLogger.info(""String_Node_Str"");
  mStatus=Status.RUNNING;
  while (true) {
    try {
      Thread.sleep(50);
    }
 catch (    InterruptedException e) {
      mLogger.warn(""String_Node_Str"",e);
      break;
    }
  }
  mLogger.info(""String_Node_Str"");
  mStatus=Status.STOPPING;
  stop();
  mLogger.info(""String_Node_Str"");
  mStatus=Status.IDLE;
  System.exit(0);
}","public static void main(final String[] iParameters) throws ServletException, LifecycleException {
  LOGGER=Logger.getLogger(Main.class);
  Main.install(""String_Node_Str"");
  Main.install(""String_Node_Str"");
  Main.install(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"");
  STATUS=Status.INITIALIZING;
  if (!initialize()) {
    LOGGER.error(""String_Node_Str"");
    STATUS=Status.IDLE;
    System.exit(0);
  }
  LOGGER.info(""String_Node_Str"");
  STATUS=Status.STARTING;
  if (!start()) {
    LOGGER.error(""String_Node_Str"");
    STATUS=Status.STOPPING;
    stop();
    STATUS=Status.IDLE;
    System.exit(0);
  }
  LOGGER.info(""String_Node_Str"");
  STATUS=Status.RUNNING;
  while (true) {
    try {
      Thread.sleep(50);
    }
 catch (    InterruptedException tException) {
      LOGGER.warn(""String_Node_Str"",tException);
      break;
    }
  }
  LOGGER.info(""String_Node_Str"");
  STATUS=Status.STOPPING;
  stop();
  LOGGER.info(""String_Node_Str"");
  STATUS=Status.IDLE;
  System.exit(0);
}",0.4101010101010101
184929,"private static boolean initialize(){
  mSubservices=new EnumMap<ServiceType,Service>(ServiceType.class);
  for (  ServiceType tServiceType : ServiceType.values()) {
    mLogger.debug(""String_Node_Str"" + mServiceNames.get(tServiceType));
    try {
      Service tService=null;
switch (tServiceType) {
case REPOSITORY:
        tService=new RepositoryMonitor();
      break;
case WEBSITE:
    tService=new EmbeddedTomcat();
  ((EmbeddedTomcat)tService).addWebapp(""String_Node_Str"");
break;
case NETWORK:
tService=new NetworkMonitor();
break;
case CONTROLLER:
tService=new Controller();
break;
default :
throw new ServiceSetupException(""String_Node_Str"" + mServiceNames.get(tServiceType));
}
mSubservices.put(tServiceType,tService);
}
 catch (ServiceSetupException e) {
mLogger.error(""String_Node_Str"" + mServiceNames.get(tServiceType),e);
return false;
}
}
return true;
}","private static boolean initialize(){
  SUBSERVICES=new EnumMap<ServiceType,Service>(ServiceType.class);
  for (  ServiceType tServiceType : ServiceType.values()) {
    LOGGER.debug(""String_Node_Str"" + cServiceNames.get(tServiceType));
    try {
      Service tService=null;
switch (tServiceType) {
case REPOSITORY:
        tService=new RepositoryMonitor();
      break;
case WEBSITE:
    tService=new EmbeddedTomcat();
  ((EmbeddedTomcat)tService).addWebapp(""String_Node_Str"");
break;
case NETWORK:
tService=new NetworkMonitor();
break;
case CONTROLLER:
tService=new Controller();
break;
default :
throw new ServiceSetupException(""String_Node_Str"" + cServiceNames.get(tServiceType));
}
SUBSERVICES.put(tServiceType,tService);
}
 catch (ServiceSetupException tException) {
LOGGER.error(""String_Node_Str"" + cServiceNames.get(tServiceType),tException);
return false;
}
}
return true;
}",0.9451428571428572
184930,"protected final String getProperty(String iKey,String iDefaultValue){
  return mProperties.getProperty(iKey,iDefaultValue);
}","protected final String getProperty(final String iKey,final String iDefaultValue){
  return mProperties.getProperty(iKey,iDefaultValue);
}",0.9541984732824428
184931,"private Properties getProperties(String iBasename) throws Exception {
  String tFilename=iBasename + ""String_Node_Str"";
  InputStream tStream=this.getClass().getClassLoader().getResourceAsStream(tFilename);
  if (tStream == null) {
    getLogger().warn(""String_Node_Str"" + tFilename + ""String_Node_Str"");
    return new java.util.Properties();
  }
  Properties oProperties=new java.util.Properties();
  try {
    oProperties.load(tStream);
    return oProperties;
  }
 catch (  IOException e) {
    throw e;
  }
}","private Properties getProperties(final String iBasename) throws Exception {
  String tFilename=iBasename + ""String_Node_Str"";
  InputStream tStream=this.getClass().getClassLoader().getResourceAsStream(tFilename);
  if (tStream == null) {
    getLogger().warn(""String_Node_Str"" + tFilename + ""String_Node_Str"");
    return new java.util.Properties();
  }
  Properties tProperties=new java.util.Properties();
  try {
    tProperties.load(tStream);
    return tProperties;
  }
 catch (  IOException tException) {
    throw tException;
  }
}",0.9676190476190476
184932,"public Service() throws ServiceSetupException {
  mLogger=Logger.getLogger(this.getClass());
  try {
    mProperties=getProperties(this.getClass().getSimpleName());
  }
 catch (  Exception e) {
    throw new ServiceSetupException(e);
  }
}","public Service() throws ServiceSetupException {
  mLogger=Logger.getLogger(this.getClass());
  try {
    mProperties=getProperties(this.getClass().getSimpleName());
  }
 catch (  Exception tException) {
    throw new ServiceSetupException(tException);
  }
}",0.9556451612903226
184933,"protected Logger getLogger(){
  return mLogger;
}","final protected Logger getLogger(){
  return mLogger;
}",0.9423076923076924
184934,"@Override public void doDeviceAdded(Device iDevice){
  getLogger().info(""String_Node_Str"" + iDevice.getUuid());
  Repository tRepository=Repository.getInstance();
  if (iDevice instanceof Kiosk30) {
    Kiosk30 iKiosk=(Kiosk30)iDevice;
    KioskConfiguration tKioskConfiguration=tRepository.lookupKioskConfiguration(iDevice.getUuid());
    getLogger().debug(""String_Node_Str"" + tKioskConfiguration.getId() + ""String_Node_Str""+ iDevice.getUuid());
    if (tKioskConfiguration != null) {
      try {
        iKiosk.setConfiguration(tKioskConfiguration);
      }
 catch (      DeviceException iException) {
        getLogger().warn(""String_Node_Str"",iException);
      }
    }
 else     getLogger().warn(""String_Node_Str"" + iDevice.getUuid() + ""String_Node_Str"");
  }
 else   getLogger().warn(""String_Node_Str"");
}","@Override public void doDeviceAdded(Device iDevice){
  getLogger().info(""String_Node_Str"" + iDevice.getUuid());
  Repository tRepository=Repository.getInstance();
  if (iDevice instanceof Kiosk30) {
    Kiosk30 iKiosk=(Kiosk30)iDevice;
    KioskConfiguration tKioskConfiguration=tRepository.lookupKioskConfiguration(iDevice.getUuid());
    if (tKioskConfiguration != null) {
      getLogger().debug(""String_Node_Str"" + tKioskConfiguration.getId() + ""String_Node_Str""+ iDevice.getUuid());
      try {
        iKiosk.setConfiguration(tKioskConfiguration);
      }
 catch (      DeviceException iException) {
        getLogger().warn(""String_Node_Str"",iException);
      }
    }
 else     getLogger().warn(""String_Node_Str"" + iDevice.getUuid() + ""String_Node_Str"");
  }
 else   getLogger().warn(""String_Node_Str"");
}",0.8620689655172413
184935,"public synchronized Server getServer(String iName){
  return mServers.get(iName);
}","public Server getServer(String iName){
synchronized (this) {
    if (mServers.containsKey(iName))     return new Server(mServers.get(iName));
 else     return null;
  }
}",0.5533596837944664
184936,"public synchronized Kiosk getKiosk(String iName){
  return new Kiosk(mKiosks.get(iName));
}","public Kiosk getKiosk(String iName){
synchronized (this) {
    if (mKiosks.containsKey(iName))     return new Kiosk(mKiosks.get(iName));
 else     return null;
  }
}",0.609375
184937,"public synchronized Collection<Kiosk> getKiosks(){
  List tKiosks=new ArrayList<Kiosk>();
  for (  Kiosk tKiosk : mKiosks.values())   tKiosks.add(new Kiosk(tKiosk));
  return tKiosks;
}","public Collection<Kiosk> getKiosks(){
synchronized (this) {
    List tKiosks=new ArrayList<Kiosk>();
    for (    Kiosk tKiosk : mKiosks.values())     tKiosks.add(new Kiosk(tKiosk));
    return tKiosks;
  }
}",0.7938931297709924
184938,"public synchronized Collection<Server> getServers(){
  List tServers=new ArrayList<Server>();
  for (  Server tServer : mServers.values())   tServers.add(new Server(tServer));
  return tServers;
}","public Collection<Server> getServers(){
synchronized (this) {
    List tServers=new ArrayList<Server>();
    for (    Server tServer : mServers.values())     tServers.add(new Server(tServer));
    return tServers;
  }
}",0.7951807228915663
184939,"public synchronized void updateServer(Server iServerNew) throws TopologyException {
  if (!mServers.containsKey(iServerNew.getName()))   throw new TopologyException(""String_Node_Str"" + iServerNew.getName());
  Server tServerOld=mServers.remove(iServerNew.getName());
  mServers.put(iServerNew.getName(),iServerNew);
  serverUpdated(tServerOld,iServerNew);
}","public void updateServer(Server iServerNew) throws TopologyException {
  Server tServerOld;
synchronized (this) {
    if (!mServers.containsKey(iServerNew.getName()))     throw new TopologyException(""String_Node_Str"" + iServerNew.getName());
    tServerOld=mServers.remove(iServerNew.getName());
    mServers.put(iServerNew.getName(),iServerNew);
  }
  serverUpdated(tServerOld,iServerNew);
}",0.9025367156208278
184940,"public synchronized void addKiosk(Kiosk iKiosk) throws TopologyException {
  if (mKiosks.containsKey(iKiosk.getName()))   throw new TopologyException(""String_Node_Str"" + iKiosk.getName());
  mKiosks.put(iKiosk.getName(),iKiosk);
  kioskAdded(iKiosk);
}","public void addKiosk(Kiosk iKiosk) throws TopologyException {
synchronized (this) {
    if (mKiosks.containsKey(iKiosk.getName()))     throw new TopologyException(""String_Node_Str"" + iKiosk.getName());
    mKiosks.put(iKiosk.getName(),iKiosk);
  }
  kioskAdded(iKiosk);
}",0.9139579349904398
184941,"public synchronized void updateKiosk(Kiosk iKioskNew) throws TopologyException {
  if (!mKiosks.containsKey(iKioskNew.getName()))   throw new TopologyException(""String_Node_Str"" + iKioskNew.getName());
  Kiosk tKioskOld=mKiosks.remove(iKioskNew.getName());
  mKiosks.put(iKioskNew.getName(),iKioskNew);
  kioskUpdated(tKioskOld,iKioskNew);
}","public void updateKiosk(Kiosk iKioskNew) throws TopologyException {
  Kiosk tKioskOld;
synchronized (this) {
    if (!mKiosks.containsKey(iKioskNew.getName()))     throw new TopologyException(""String_Node_Str"" + iKioskNew.getName());
    tKioskOld=mKiosks.remove(iKioskNew.getName());
    mKiosks.put(iKioskNew.getName(),iKioskNew);
  }
  kioskUpdated(tKioskOld,iKioskNew);
}",0.9022346368715084
184942,"public synchronized Collection<Machine> getMachines(){
  Collection<Machine> oMachines=new ArrayList<Machine>();
  oMachines.addAll(getServers());
  oMachines.addAll(getKiosks());
  return oMachines;
}","public Collection<Machine> getMachines(){
synchronized (this) {
    Collection<Machine> oMachines=new ArrayList<Machine>();
    oMachines.addAll(getServers());
    oMachines.addAll(getKiosks());
    return oMachines;
  }
}",0.7943262411347518
184943,"public synchronized void addServer(Server iServer) throws TopologyException {
  if (mServers.containsKey(iServer.getName()))   throw new TopologyException(""String_Node_Str"" + iServer.getName());
  mServers.put(iServer.getName(),iServer);
  serverAdded(iServer);
}","public void addServer(Server iServer) throws TopologyException {
synchronized (this) {
    if (mServers.containsKey(iServer.getName()))     throw new TopologyException(""String_Node_Str"" + iServer.getName());
    mServers.put(iServer.getName(),iServer);
  }
  serverAdded(iServer);
}",0.9174311926605504
184944,"public synchronized void addListener(TopologyListener iListener){
  mListeners.add(iListener);
}","public void addListener(TopologyListener iListener){
synchronized (this) {
    mListeners.add(iListener);
  }
}",0.8019323671497585
184945,"public void serviceAddedAction(ServiceEvent iServiceEvent){
  getLogger().info(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str""+ iServiceEvent.getType());
  Kiosk tKiosk=new Kiosk(iServiceEvent.getName());
  try {
    Topology.getInstance().addKiosk(tKiosk);
  }
 catch (  TopologyException e) {
    getLogger().warn(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str"",e);
  }
}","public void serviceAddedAction(ServiceEvent iServiceEvent){
  getLogger().debug(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str""+ iServiceEvent.getType());
  Kiosk tKiosk=new Kiosk(iServiceEvent.getName());
  try {
    Topology.getInstance().addKiosk(tKiosk);
  }
 catch (  Exception e) {
    getLogger().error(""String_Node_Str"" + iServiceEvent.getName(),e);
  }
}",0.9311224489795918
184946,"public void serviceResolvedAction(ServiceEvent iServiceEvent){
  getLogger().info(""String_Node_Str"" + iServiceEvent.getInfo());
  Kiosk tKiosk=Topology.getInstance().getKiosk(iServiceEvent.getName());
  if (tKiosk != null) {
    tKiosk.setState(State.ONLINE);
    ServiceInfo iServiceInfo=iServiceEvent.getInfo();
    for (    InetAddress tInetAddress : iServiceInfo.getInetAddresses()) {
      tKiosk.addInetAddress(tInetAddress);
    }
  }
 else   getLogger().warn(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str"");
}","public void serviceResolvedAction(ServiceEvent iServiceEvent){
  getLogger().debug(""String_Node_Str"" + iServiceEvent.getInfo());
  try {
    Kiosk tKiosk=Topology.getInstance().getKiosk(iServiceEvent.getName());
    if (tKiosk != null) {
      tKiosk.setState(State.ONLINE);
      ServiceInfo iServiceInfo=iServiceEvent.getInfo();
      for (      InetAddress tInetAddress : iServiceInfo.getInetAddresses()) {
        tKiosk.addInetAddress(tInetAddress);
      }
      Topology.getInstance().updateKiosk(tKiosk);
    }
 else     getLogger().error(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    getLogger().error(""String_Node_Str"" + iServiceEvent.getName(),e);
  }
}",0.7785771382893685
184947,"public void serviceRemovedAction(ServiceEvent iServiceEvent){
  getLogger().info(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str""+ iServiceEvent.getType());
  Kiosk tKiosk=Topology.getInstance().getKiosk(iServiceEvent.getName());
  if (tKiosk != null) {
    tKiosk.setState(State.OFFLINE);
    tKiosk.clearInetAddresses();
  }
 else   getLogger().warn(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str"");
}","public void serviceRemovedAction(ServiceEvent iServiceEvent){
  getLogger().debug(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str""+ iServiceEvent.getType());
  try {
    Kiosk tKiosk=Topology.getInstance().getKiosk(iServiceEvent.getName());
    if (tKiosk != null) {
      tKiosk.setState(State.OFFLINE);
      tKiosk.clearInetAddresses();
      Topology.getInstance().updateKiosk(tKiosk);
    }
 else     getLogger().error(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    getLogger().error(""String_Node_Str"" + iServiceEvent.getName(),e);
  }
}",0.8168744007670182
184948,"public void serviceAddedAction(ServiceEvent iServiceEvent){
  getLogger().info(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str""+ iServiceEvent.getType());
  Server tServer=new Server(iServiceEvent.getName());
  try {
    Topology.getInstance().addServer(tServer);
  }
 catch (  TopologyException e) {
    getLogger().warn(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str"",e);
  }
}","public void serviceAddedAction(ServiceEvent iServiceEvent){
  getLogger().debug(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str""+ iServiceEvent.getType());
  Server tServer=new Server(iServiceEvent.getName());
  try {
    Topology.getInstance().addServer(tServer);
  }
 catch (  TopologyException e) {
    getLogger().warn(""String_Node_Str"" + iServiceEvent.getName(),e);
  }
}",0.9637952559300874
184949,"public void serviceResolvedAction(ServiceEvent iServiceEvent){
  getLogger().info(""String_Node_Str"" + iServiceEvent.getInfo());
  Server tServer=Topology.getInstance().getServer(iServiceEvent.getName());
  if (tServer != null) {
    tServer.setState(State.ONLINE);
    ServiceInfo iServiceInfo=iServiceEvent.getInfo();
    for (    InetAddress tInetAddress : iServiceInfo.getInetAddresses()) {
      tServer.addInetAddress(tInetAddress);
    }
  }
 else   getLogger().warn(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str"");
}","public void serviceResolvedAction(ServiceEvent iServiceEvent){
  getLogger().debug(""String_Node_Str"" + iServiceEvent.getInfo());
  try {
    Server tServer=Topology.getInstance().getServer(iServiceEvent.getName());
    if (tServer != null) {
      tServer.setState(State.ONLINE);
      ServiceInfo iServiceInfo=iServiceEvent.getInfo();
      for (      InetAddress tInetAddress : iServiceInfo.getInetAddresses()) {
        tServer.addInetAddress(tInetAddress);
      }
      Topology.getInstance().updateServer(tServer);
    }
 else     getLogger().warn(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    getLogger().error(""String_Node_Str"" + iServiceEvent.getName(),e);
  }
}",0.7863924050632911
184950,"public void serviceRemovedAction(ServiceEvent iServiceEvent){
  getLogger().info(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str""+ iServiceEvent.getType());
  Server tServer=Topology.getInstance().getServer(iServiceEvent.getName());
  if (tServer != null) {
    tServer.setState(State.OFFLINE);
    tServer.clearInetAddresses();
  }
 else   getLogger().warn(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str"");
}","public void serviceRemovedAction(ServiceEvent iServiceEvent){
  getLogger().debug(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str""+ iServiceEvent.getType());
  try {
    Server tServer=Topology.getInstance().getServer(iServiceEvent.getName());
    if (tServer != null) {
      tServer.setState(State.OFFLINE);
      tServer.clearInetAddresses();
      Topology.getInstance().updateServer(tServer);
    }
 else     getLogger().warn(""String_Node_Str"" + iServiceEvent.getName() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    getLogger().error(""String_Node_Str"" + iServiceEvent.getName(),e);
  }
}",0.8257575757575758
184951,"@Override public void stop() throws ServiceRunException {
}","@Override public void stop() throws ServiceRunException {
  Topology.getInstance().removeListener(this);
}",0.7151515151515152
184952,"@Override public void run() throws ServiceRunException {
}","@Override public void run() throws ServiceRunException {
  Topology.getInstance().addListener(this);
}",0.725
184953,"void apply(Sound iSound){
  if (iSound.enabled != null)   enabled=iSound.enabled;
  if (iSound.volume != null)   volume=iSound.volume;
}","void apply(Sound iSound){
  if (iSound == null)   return;
  if (iSound.enabled != null)   enabled=iSound.enabled;
  if (iSound.volume != null)   volume=iSound.volume;
}",0.8947368421052632
184954,abstract public void run() throws ServiceRunException ;,"/** 
 * The run() method starts the service, but should be non blocking.
 * @throws ServiceRunException
 */
abstract public void run() throws ServiceRunException ;",0.5045871559633027
184955,"public RepositoryMonitor() throws ServiceSetupException {
  DAVRepositoryFactory.setup();
  mDAVLocation=""String_Node_Str"" + getProperty(""String_Node_Str"",""String_Node_Str"") + getProperty(""String_Node_Str"",""String_Node_Str"");
  getLogger().debug(""String_Node_Str"" + mDAVLocation);
  try {
    SVNURL tSVNLocation=SVNURL.parseURIDecoded(mDAVLocation);
    mSVNRepository=SVNRepositoryFactory.create(tSVNLocation,null);
  }
 catch (  SVNException e) {
    throw new ServiceSetupException(e);
  }
}","public RepositoryMonitor() throws ServiceSetupException {
  DAVRepositoryFactory.setup();
  mDAVLocation=""String_Node_Str"" + getProperty(""String_Node_Str"",""String_Node_Str"") + getProperty(""String_Node_Str"",""String_Node_Str"");
  getLogger().debug(""String_Node_Str"" + mDAVLocation);
  try {
    SVNURL tSVNLocation=SVNURL.parseURIDecoded(mDAVLocation);
    mSVNRepository=SVNRepositoryFactory.create(tSVNLocation,null);
  }
 catch (  SVNException e) {
    throw new ServiceSetupException(e);
  }
  Integer iInterval=Integer.parseInt(getProperty(""String_Node_Str"",""String_Node_Str""));
  if (iInterval <= 0)   throw new ServiceSetupException(""String_Node_Str"");
  getLogger().debug(""String_Node_Str"" + iInterval + ""String_Node_Str"");
  mSVNMonitor=new Timer();
  mSVNMonitorInterval=iInterval;
}",0.7698289269051322
184956,"@Override public void run() throws ServiceRunException {
  checkout();
}","@Override public void run() throws ServiceRunException {
  checkout();
  mSVNMonitor.schedule(new Monitor(),mSVNMonitorInterval * 1000);
}",0.6857142857142857
184957,"void checkout() throws ServiceRunException {
  try {
    long tSVNRepositoryRevision=mSVNRepository.getLatestRevision();
    getLogger().debug(""String_Node_Str"");
    ISVNReporterBaton tConfigurationBaton=new DummyBaton(tSVNRepositoryRevision);
    ISVNEditor tConfigurationEditor=new ConfigurationEditor();
    mSVNRepository.update(tSVNRepositoryRevision,""String_Node_Str"",true,tConfigurationBaton,tConfigurationEditor);
    getLogger().debug(""String_Node_Str"");
    ISVNReporterBaton tKioskBaton=new DummyBaton(tSVNRepositoryRevision);
    ISVNEditor tKioskEditor=new KioskConfigurationEditor();
    mSVNRepository.update(tSVNRepositoryRevision,""String_Node_Str"",true,tKioskBaton,tKioskEditor);
  }
 catch (  SVNException e) {
    getLogger().error(""String_Node_Str"",e);
  }
}","void checkout() throws ServiceRunException {
  try {
    mSVNRevision=mSVNRepository.getLatestRevision();
    getLogger().debug(""String_Node_Str"");
    ISVNReporterBaton tConfigurationBaton=new DummyBaton(mSVNRevision);
    ISVNEditor tConfigurationEditor=new ConfigurationEditor();
    mSVNRepository.update(mSVNRevision,""String_Node_Str"",true,tConfigurationBaton,tConfigurationEditor);
    getLogger().debug(""String_Node_Str"");
    ISVNReporterBaton tKioskBaton=new DummyBaton(mSVNRevision);
    ISVNEditor tKioskEditor=new KioskConfigurationEditor();
    mSVNRepository.update(mSVNRevision,""String_Node_Str"",true,tKioskBaton,tKioskEditor);
  }
 catch (  SVNException e) {
    getLogger().error(""String_Node_Str"",e);
  }
}",0.9367930805056554
184958,"public RegistrationConsumerImpl() throws RemoteException {
  super();
  String exp=ContainerConfig.getConfig().getOption(SPRING_CLASSPATH_EXPRESSION,DEFAULT_SPRING_CLASSPATH_EXPRESSION);
  String bean=ContainerConfig.getConfig().getOption(REGISTRATION_CONSUMER_BEAN_NAME,DEFAULT_REGISTRATION_CONSUMER_BEAN_NAME);
  if (this.getClass().getResourceAsStream(exp) == null) {
    System.out.print(""String_Node_Str"");
    this.consumer=new EchoRegistrationConsumer();
  }
 else {
    System.out.print(""String_Node_Str"");
    ApplicationContext ctx=new ClassPathXmlApplicationContext(exp);
    this.consumer=(RegistrationConsumerI)ctx.getBean(bean);
  }
}","public RegistrationConsumerImpl() throws RemoteException {
  super();
  String exp=ContainerConfig.getConfig().getOption(SPRING_CLASSPATH_EXPRESSION,DEFAULT_SPRING_CLASSPATH_EXPRESSION);
  String bean=ContainerConfig.getConfig().getOption(REGISTRATION_CONSUMER_BEAN_NAME,DEFAULT_REGISTRATION_CONSUMER_BEAN_NAME);
  if (this.getClass().getResourceAsStream(DEFAULT_APPCONTEXT_XML_PATH) == null) {
    System.out.print(""String_Node_Str"");
    this.consumer=new EchoRegistrationConsumer();
  }
 else {
    System.out.print(""String_Node_Str"");
    ApplicationContext ctx=new ClassPathXmlApplicationContext(exp);
    this.consumer=(RegistrationConsumerI)ctx.getBean(bean);
  }
}",0.9772727272727272
184959,"@Override protected Object getKeyObject(ResultSet rs,String colname) throws SQLException {
  return rs.getObject(colname);
}","@Override protected Object getKeyObject(ResultSet rs,String colname) throws SQLException {
  return rs.getInt(colname);
}",0.9714285714285714
184960,"public void testGetKeyObject() throws Exception {
  ResultSet rs=createMock(ResultSet.class);
  expect(rs.getObject(""String_Node_Str"")).andReturn(7);
  replay(rs);
  assertEquals(7,type.getKeyObject(rs,""String_Node_Str""));
  verifyMocks();
}","public void testGetKeyObject() throws Exception {
  ResultSet rs=createMock(ResultSet.class);
  expect(rs.getInt(""String_Node_Str"")).andReturn(7);
  replay(rs);
  assertEquals(7,type.getKeyObject(rs,""String_Node_Str""));
  verifyMocks();
}",0.6471816283924844
184961,"/** 
 * Create a transient copy of the source configuration.
 * @param source
 */
public static void create(Configuration source){
  TransientConfiguration copy=new TransientConfiguration(source.getProperties());
  copy.copyFrom(source);
}","/** 
 * Create a transient copy of the source configuration.
 * @param source
 */
public static Configuration create(Configuration source){
  TransientConfiguration copy=new TransientConfiguration(source.getProperties());
  copy.copyFrom(source);
  return copy;
}",0.9362549800796812
184962,"public Tab<C> getTargetTab(){
  int defaultTarget=getNumber() + 1;
  return getFlow().getTab(defaultTarget);
}","public Tab<C> getTargetTab(){
  int defaultTarget=Math.min(getNumber() + 1,getFlow().getTabCount() - 1);
  return getFlow().getTab(defaultTarget);
}",0.8527131782945736
184963,"public static void main(String[] args){
  final URI employeeUri=createEmployee(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + employeeUri);
  Employee employee=getEmployee(employeeUri);
  System.out.println(""String_Node_Str"" + employee);
  deleteEmployee(employeeUri);
  try {
    getEmployee(employeeUri);
    System.out.println(""String_Node_Str"" + employeeUri + ""String_Node_Str"");
  }
 catch (  UniformInterfaceException e) {
    if (e.getResponse().getClientResponseStatus() != Status.NOT_FOUND) {
      throw new RuntimeException(""String_Node_Str"" + describeStatus(e.getResponse()));
    }
 else {
      System.out.println(""String_Node_Str"" + e.getResponse().toString());
    }
  }
  employee.name=""String_Node_Str"";
  updateEmployee(employee,employeeUri);
  Employee updatedEmployee=getEmployee(employeeUri);
  System.out.println(""String_Node_Str"" + updatedEmployee);
}","public static void main(String[] args){
  final URI employeeUri=createEmployee(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + employeeUri);
  Employee employee=getEmployee(employeeUri);
  System.out.println(""String_Node_Str"" + employee);
  employee.name=""String_Node_Str"";
  updateEmployee(employee,employeeUri);
  Employee updatedEmployee=getEmployee(employeeUri);
  System.out.println(""String_Node_Str"" + updatedEmployee);
  if (!updatedEmployee.name.equals(employee.name)) {
    throw new RuntimeException(""String_Node_Str"" + employee.name + ""String_Node_Str""+ updatedEmployee.name);
  }
  deleteEmployee(employeeUri);
  try {
    getEmployee(employeeUri);
    throw new RuntimeException(""String_Node_Str"" + employeeUri + ""String_Node_Str"");
  }
 catch (  UniformInterfaceException e) {
    if (e.getResponse().getClientResponseStatus() != Status.NOT_FOUND) {
      throw new RuntimeException(""String_Node_Str"" + describeStatus(e.getResponse()));
    }
 else {
      System.out.println(""String_Node_Str"" + e.getResponse().toString());
    }
  }
}",0.6782786885245902
184964,"private void addTitle(int index){
  Label titleLabel=getLabel((index + 1) + ""String_Node_Str"" + file.getName());
  titleLabel.setFont(Constants.HEADER_2);
  titleLabel.addMouseListener(getMouseListener(""String_Node_Str"" + file.getName(),new Work(){
    @Override public void executeWork(){
      BufferedImage previewImage=file.getImage();
      int index=1;
      for (      WallpaperScreen screen : Manager.get().getEngineSettings().getScreens()) {
        int x=screen.getX();
        int y=screen.getY();
        int x2=x + screen.getWidth();
        int y2=y + screen.getHeight();
        int xMid=x + screen.getWidth() / 2;
        int yMid=y + screen.getHeight() / 2;
        int backgroundSize=40;
        Graphics2D g2=(Graphics2D)previewImage.getGraphics();
        g2.setColor(new Color(0,0,0,100));
        g2.fillOval(xMid - backgroundSize,yMid - backgroundSize,backgroundSize * 2,backgroundSize * 2);
        g2.setStroke(new BasicStroke(5));
        g2.setColor(Color.black);
        g2.drawRect(x,y,x2,y2);
        g2.setFont(new Font(""String_Node_Str"",Font.PLAIN,45));
        g2.drawString(index + ""String_Node_Str"",xMid - 15,yMid + 15);
        index++;
      }
      Manager.get().showPreview(previewImage,""String_Node_Str"" + file.getName());
    }
  }
));
  content.add(titleLabel);
}","private void addTitle(int index){
  Label titleLabel=getLabel((index + 1) + ""String_Node_Str"" + file.getName());
  titleLabel.setFont(Constants.HEADER_2);
  titleLabel.addMouseListener(getMouseListener(""String_Node_Str"" + file.getName(),new Work(){
    @Override public void executeWork(){
      BufferedImage previewImage=file.getImage();
      int index=1;
      for (      WallpaperScreen screen : Manager.get().getEngineSettings().getScreens()) {
        int x=screen.getX();
        int y=screen.getY();
        int x2=x + screen.getWidth();
        int y2=y + screen.getHeight();
        int xMid=x + screen.getWidth() / 2;
        int yMid=y + screen.getHeight() / 2;
        int backgroundSize=40;
        Graphics2D g2=(Graphics2D)previewImage.getGraphics();
        g2.setColor(new Color(0,0,0,100));
        g2.fillOval(xMid - backgroundSize,yMid - backgroundSize,backgroundSize * 2,backgroundSize * 2);
        g2.setStroke(new BasicStroke(5));
        g2.setColor(Color.black);
        g2.drawRect(x,y,x2,y2);
        g2.setColor(Color.white);
        g2.setFont(new Font(""String_Node_Str"",Font.PLAIN,45));
        g2.drawString(index + ""String_Node_Str"",xMid - 15,yMid + 15);
        index++;
      }
      Manager.get().showPreview(previewImage,""String_Node_Str"" + file.getName());
    }
  }
));
  content.add(titleLabel);
}",0.98714069591528
184965,"@Override public void run(){
  super.run();
  run=true;
  while (run) {
    try {
      long startTime=System.currentTimeMillis();
      listener.updateWallpaper();
      long remainingMillis=sleepMillis - (System.currentTimeMillis() - startTime);
      sleep(remainingMillis);
    }
 catch (    InterruptedException e) {
      run=false;
    }
  }
}","@Override public void run(){
  super.run();
  run=true;
  while (run) {
    long startTime=System.currentTimeMillis();
    listener.updateWallpaper();
    long remainingMillis=sleepMillis - (System.currentTimeMillis() - startTime);
    if (remainingMillis > 0) {
      try {
        sleep(remainingMillis);
      }
 catch (      InterruptedException e) {
        run=false;
      }
    }
  }
}",0.8102288021534321
184966,"@Override public void onBlockRedstoneChange(BlockRedstoneEvent event){
  Block block=event.getBlock();
  if (event.getNewCurrent() == 0 && block.getTypeId() == 74) {
    block.setTypeId(Material.REDSTONE_ORE.getId());
  }
  int newPower=event.getNewCurrent() - (event.getNewCurrent() == 0 ? 0 : 1);
  BlockMatrixNode oreCircuit=new BlockMatrixNode(block,new HashMap<Block,BlockMatrixNode>());
  if (block.getTypeId() == 73 || block.getTypeId() == 74) {
    if (event.getNewCurrent() > event.getOldCurrent()) {
      oreCircuit.setFilter(new HashSet<Material>(EnumSet.of(Material.REDSTONE_ORE)));
      oreCircuit.floodFill();
      if (oreCircuit.getBlockMatrix().size() > 1) {
        for (        Block change : oreCircuit.getBlockMatrix()) {
          change.setTypeId(74);
        }
      }
    }
 else     if (event.getNewCurrent() != event.getOldCurrent()) {
      oreCircuit.setFilter(new HashSet<Material>(EnumSet.of(Material.GLOWING_REDSTONE_ORE)));
      oreCircuit.floodFill();
      if (oreCircuit.getBlockMatrix().size() > 1) {
        for (        Block change : oreCircuit.getBlockMatrix()) {
          change.setTypeId(73);
        }
      }
    }
    if (oreCircuit.getBlockMatrix().size() > 1) {
      oreCircuit.setFilter(EnumSet.complementOf(EnumSet.of(Material.REDSTONE_ORE,Material.GLOWING_REDSTONE_ORE)));
      for (      BlockMatrixNode next : oreCircuit.getBlockMatrixNodes()) {
        for (        Block eventTarget : next.getFilteredExternalAdjancentBlocks()) {
          int oldPower=0;
          if (eventTarget.getState() instanceof RedstoneWire) {
            oldPower=eventTarget.getBlockPower();
            eventTarget.setData((byte)newPower);
          }
          plugin.getServer().getPluginManager().callEvent(new BlockRedstoneEvent(eventTarget,oldPower,newPower));
        }
      }
    }
  }
}","@Override public void onBlockRedstoneChange(BlockRedstoneEvent event){
  Block block=event.getBlock();
  if (event.getNewCurrent() == 0 && block.getTypeId() == 74) {
    block.setTypeId(Material.REDSTONE_ORE.getId());
  }
  int newPower=event.getNewCurrent() - (event.getNewCurrent() == 0 ? 0 : 1);
  BlockMatrixNode oreCircuit=new BlockMatrixNode(block,new HashMap<Block,BlockMatrixNode>());
  if (block.getTypeId() == Material.REDSTONE_WIRE.getId()) {
    block.setData((byte)event.getNewCurrent());
    oreCircuit.setFilter(new HashSet<Material>(EnumSet.of(Material.REDSTONE_ORE,Material.GLOWING_REDSTONE_ORE)));
    for (    Block eventTarget : oreCircuit.getFilteredExternalAdjancentBlocks()) {
      int oldPower=0;
      if (eventTarget.getState().getData() instanceof RedstoneWire) {
        if (eventTarget.getBlockPower() > 0) {
          continue;
        }
        oldPower=eventTarget.getBlockPower();
        eventTarget.setData((byte)newPower);
      }
      plugin.getServer().getPluginManager().callEvent(new BlockRedstoneEvent(eventTarget,oldPower,newPower));
    }
  }
  if (block.getTypeId() == 73 || block.getTypeId() == 74) {
    if (event.getNewCurrent() > event.getOldCurrent()) {
      oreCircuit.setFilter(new HashSet<Material>(EnumSet.of(Material.REDSTONE_ORE)));
      oreCircuit.floodFill();
      for (      Block change : oreCircuit.getBlockMatrix()) {
        change.setTypeId(74);
      }
    }
 else     if (event.getNewCurrent() != event.getOldCurrent()) {
      oreCircuit.setFilter(new HashSet<Material>(EnumSet.of(Material.GLOWING_REDSTONE_ORE)));
      oreCircuit.floodFill();
      for (      Block change : oreCircuit.getBlockMatrix()) {
        change.setTypeId(73);
      }
    }
    oreCircuit.setFilter(EnumSet.complementOf(EnumSet.of(Material.REDSTONE_ORE,Material.GLOWING_REDSTONE_ORE)));
    for (    BlockMatrixNode next : oreCircuit.getBlockMatrixNodes()) {
      for (      Block eventTarget : next.getFilteredExternalAdjancentBlocks()) {
        int oldPower=0;
        if (eventTarget.getState().getData() instanceof RedstoneWire) {
          oldPower=eventTarget.getBlockPower();
          eventTarget.setData((byte)newPower);
        }
        plugin.getServer().getPluginManager().callEvent(new BlockRedstoneEvent(eventTarget,oldPower,newPower));
      }
    }
  }
}",0.556651431320664
184967,"private long copyBackupToFile(BackupDataInput data,File file,int toRead) throws IOException {
  final int CHUNK=8192;
  byte[] buf=new byte[CHUNK];
  CRC32 crc=new CRC32();
  FileOutputStream out=new FileOutputStream(file);
  while (toRead > 0) {
    int numRead=data.readEntityData(buf,0,CHUNK);
    crc.update(buf,0,numRead);
    out.write(buf,0,numRead);
    toRead-=numRead;
  }
  out.close();
  return crc.getValue();
}","private long copyBackupToFile(BackupDataInput data,File file,int toRead) throws IOException {
  final int CHUNK=8192;
  byte[] buf=new byte[CHUNK];
  CRC32 crc=new CRC32();
  FileOutputStream out=new FileOutputStream(file);
  try {
    while (toRead > 0) {
      int numRead=data.readEntityData(buf,0,CHUNK);
      crc.update(buf,0,numRead);
      out.write(buf,0,numRead);
      toRead-=numRead;
    }
  }
  finally {
    if (out != null) {
      out.close();
    }
  }
  return crc.getValue();
}",0.9207383279044516
184968,"/** 
 * In order to determine whether the bookmark set has changed since the last time we did a backup, we store the following bits of info in the state file after a backup: 1. the size of the flattened bookmark file 2. the CRC32 of that file 3. the agent version number [relevant following an OTA] After we flatten the bookmarks file here in onBackup, we compare its metrics with the values from the saved state.  If they match, it means the bookmarks didn't really change and we don't need to send the data. (If they don't match, of course, then they've changed and we do indeed send the new flattened file to be backed up.)
 */
@Override public void onBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState) throws IOException {
  long savedFileSize=-1;
  long savedCrc=-1;
  int savedVersion=-1;
  DataInputStream in=new DataInputStream(new FileInputStream(oldState.getFileDescriptor()));
  try {
    savedFileSize=in.readLong();
    savedCrc=in.readLong();
    savedVersion=in.readInt();
  }
 catch (  EOFException e) {
  }
  File tmpfile=File.createTempFile(""String_Node_Str"",null,getCacheDir());
  try {
    FileOutputStream outfstream=new FileOutputStream(tmpfile);
    long newCrc=buildBookmarkFile(outfstream);
    outfstream.close();
    if ((savedVersion != BACKUP_AGENT_VERSION) || (newCrc != savedCrc) || (tmpfile.length() != savedFileSize)) {
      copyFileToBackup(BOOKMARK_KEY,tmpfile,data);
    }
    writeBackupState(tmpfile.length(),newCrc,newState);
  }
  finally {
    tmpfile.delete();
  }
}","/** 
 * In order to determine whether the bookmark set has changed since the last time we did a backup, we store the following bits of info in the state file after a backup: 1. the size of the flattened bookmark file 2. the CRC32 of that file 3. the agent version number [relevant following an OTA] After we flatten the bookmarks file here in onBackup, we compare its metrics with the values from the saved state.  If they match, it means the bookmarks didn't really change and we don't need to send the data. (If they don't match, of course, then they've changed and we do indeed send the new flattened file to be backed up.)
 */
@Override public void onBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState) throws IOException {
  long savedFileSize=-1;
  long savedCrc=-1;
  int savedVersion=-1;
  DataInputStream in=new DataInputStream(new FileInputStream(oldState.getFileDescriptor()));
  try {
    savedFileSize=in.readLong();
    savedCrc=in.readLong();
    savedVersion=in.readInt();
  }
 catch (  EOFException e) {
  }
 finally {
    if (in != null) {
      in.close();
    }
  }
  File tmpfile=File.createTempFile(""String_Node_Str"",null,getCacheDir());
  try {
    FileOutputStream outfstream=new FileOutputStream(tmpfile);
    long newCrc=buildBookmarkFile(outfstream);
    outfstream.close();
    if ((savedVersion != BACKUP_AGENT_VERSION) || (newCrc != savedCrc) || (tmpfile.length() != savedFileSize)) {
      copyFileToBackup(BOOKMARK_KEY,tmpfile,data);
    }
    writeBackupState(tmpfile.length(),newCrc,newState);
  }
  finally {
    tmpfile.delete();
  }
}",0.9806778587266392
184969,"private void copyFileToBackup(String key,File file,BackupDataOutput data) throws IOException {
  final int CHUNK=8192;
  byte[] buf=new byte[CHUNK];
  int toCopy=(int)file.length();
  data.writeEntityHeader(key,toCopy);
  FileInputStream in=new FileInputStream(file);
  int nRead;
  while (toCopy > 0) {
    nRead=in.read(buf,0,CHUNK);
    data.writeEntityData(buf,nRead);
    toCopy-=nRead;
  }
  in.close();
}","private void copyFileToBackup(String key,File file,BackupDataOutput data) throws IOException {
  final int CHUNK=8192;
  byte[] buf=new byte[CHUNK];
  int toCopy=(int)file.length();
  data.writeEntityHeader(key,toCopy);
  FileInputStream in=new FileInputStream(file);
  try {
    int nRead;
    while (toCopy > 0) {
      nRead=in.read(buf,0,CHUNK);
      data.writeEntityData(buf,nRead);
      toCopy-=nRead;
    }
  }
  finally {
    if (in != null) {
      in.close();
    }
  }
}",0.9194630872483222
184970,"private void writeBackupState(long fileSize,long crc,ParcelFileDescriptor stateFile) throws IOException {
  DataOutputStream out=new DataOutputStream(new FileOutputStream(stateFile.getFileDescriptor()));
  out.writeLong(fileSize);
  out.writeLong(crc);
  out.writeInt(BACKUP_AGENT_VERSION);
}","private void writeBackupState(long fileSize,long crc,ParcelFileDescriptor stateFile) throws IOException {
  DataOutputStream out=new DataOutputStream(new FileOutputStream(stateFile.getFileDescriptor()));
  try {
    out.writeLong(fileSize);
    out.writeLong(crc);
    out.writeInt(BACKUP_AGENT_VERSION);
  }
  finally {
    if (out != null) {
      out.close();
    }
  }
}",0.8768768768768769
184971,"/** 
 * Restore from backup -- reads in the flattened bookmark file as supplied from the backup service, parses that out, and rebuilds the bookmarks table in the browser database from it.
 */
@Override public void onRestore(BackupDataInput data,int appVersionCode,ParcelFileDescriptor newState) throws IOException {
  long crc=-1;
  File tmpfile=File.createTempFile(""String_Node_Str"",null,getFilesDir());
  try {
    while (data.readNextHeader()) {
      if (BOOKMARK_KEY.equals(data.getKey())) {
        crc=copyBackupToFile(data,tmpfile,data.getDataSize());
        FileInputStream infstream=new FileInputStream(tmpfile);
        DataInputStream in=new DataInputStream(infstream);
        try {
          int count=in.readInt();
          ArrayList<Bookmark> bookmarks=new ArrayList<Bookmark>(count);
          for (int i=0; i < count; i++) {
            Bookmark mark=new Bookmark();
            mark.url=in.readUTF();
            mark.visits=in.readInt();
            mark.date=in.readLong();
            mark.created=in.readLong();
            mark.title=in.readUTF();
            bookmarks.add(mark);
          }
          int N=bookmarks.size();
          int nUnique=0;
          if (DEBUG)           Log.v(TAG,""String_Node_Str"" + N + ""String_Node_Str"");
          String[] urlCol=new String[]{BookmarkColumns.URL};
          for (int i=0; i < N; i++) {
            Bookmark mark=bookmarks.get(i);
            Cursor cursor=getContentResolver().query(Browser.BOOKMARKS_URI,urlCol,BookmarkColumns.URL + ""String_Node_Str"" + mark.url+ ""String_Node_Str""+ BookmarkColumns.BOOKMARK+ ""String_Node_Str"",null,null);
            if (cursor.getCount() <= 0) {
              if (DEBUG)               Log.v(TAG,""String_Node_Str"" + mark.url);
              Bookmarks.addBookmark(null,getContentResolver(),mark.url,mark.title,null,false);
              nUnique++;
            }
 else {
              if (DEBUG)               Log.v(TAG,""String_Node_Str"" + mark.url);
            }
            cursor.close();
          }
          Log.i(TAG,""String_Node_Str"" + nUnique + ""String_Node_Str""+ N+ ""String_Node_Str"");
        }
 catch (        IOException ioe) {
          Log.w(TAG,""String_Node_Str"");
          crc=-1;
        }
      }
      writeBackupState(tmpfile.length(),crc,newState);
    }
  }
  finally {
    tmpfile.delete();
  }
}","/** 
 * Restore from backup -- reads in the flattened bookmark file as supplied from the backup service, parses that out, and rebuilds the bookmarks table in the browser database from it.
 */
@Override public void onRestore(BackupDataInput data,int appVersionCode,ParcelFileDescriptor newState) throws IOException {
  long crc=-1;
  File tmpfile=File.createTempFile(""String_Node_Str"",null,getFilesDir());
  try {
    while (data.readNextHeader()) {
      if (BOOKMARK_KEY.equals(data.getKey())) {
        crc=copyBackupToFile(data,tmpfile,data.getDataSize());
        FileInputStream infstream=new FileInputStream(tmpfile);
        DataInputStream in=new DataInputStream(infstream);
        try {
          int count=in.readInt();
          ArrayList<Bookmark> bookmarks=new ArrayList<Bookmark>(count);
          for (int i=0; i < count; i++) {
            Bookmark mark=new Bookmark();
            mark.url=in.readUTF();
            mark.visits=in.readInt();
            mark.date=in.readLong();
            mark.created=in.readLong();
            mark.title=in.readUTF();
            bookmarks.add(mark);
          }
          int N=bookmarks.size();
          int nUnique=0;
          if (DEBUG)           Log.v(TAG,""String_Node_Str"" + N + ""String_Node_Str"");
          String[] urlCol=new String[]{BookmarkColumns.URL};
          for (int i=0; i < N; i++) {
            Bookmark mark=bookmarks.get(i);
            Cursor cursor=getContentResolver().query(Browser.BOOKMARKS_URI,urlCol,BookmarkColumns.URL + ""String_Node_Str"" + mark.url+ ""String_Node_Str""+ BookmarkColumns.BOOKMARK+ ""String_Node_Str"",null,null);
            if (cursor.getCount() <= 0) {
              if (DEBUG)               Log.v(TAG,""String_Node_Str"" + mark.url);
              Bookmarks.addBookmark(null,getContentResolver(),mark.url,mark.title,null,false);
              nUnique++;
            }
 else {
              if (DEBUG)               Log.v(TAG,""String_Node_Str"" + mark.url);
            }
            cursor.close();
          }
          Log.i(TAG,""String_Node_Str"" + nUnique + ""String_Node_Str""+ N+ ""String_Node_Str"");
        }
 catch (        IOException ioe) {
          Log.w(TAG,""String_Node_Str"");
          crc=-1;
        }
 finally {
          if (in != null) {
            in.close();
          }
        }
      }
      writeBackupState(tmpfile.length(),crc,newState);
    }
  }
  finally {
    tmpfile.delete();
  }
}",0.982086406743941
184972,"public void write() throws IOException {
  FileWriter output=null;
  OutputStreamWriter writer=null;
  if (mFile.exists()) {
    mFile.delete();
  }
  try {
    output=new FileWriter(mFile);
    output.write(iteration + newLine);
    output.write(page + newLine);
    output.write(url + newLine);
  }
  finally {
    try {
      if (writer != null) {
        writer.close();
      }
    }
  finally {
      if (output != null) {
        output.close();
      }
    }
  }
}","public void write() throws IOException {
  FileWriter output=null;
  if (mFile.exists()) {
    mFile.delete();
  }
  try {
    output=new FileWriter(mFile);
    output.write(iteration + newLine);
    output.write(page + newLine);
    output.write(url + newLine);
  }
  finally {
    if (output != null) {
      output.close();
    }
  }
}",0.7876543209876543
184973,"/** 
 * Loops over a list of URLs, points the browser to each one, and records the time elapsed.
 * @param input the reader from which to get the URLs.
 * @param writer the writer to which to output the results.
 * @param clearCache determines whether the cache is cleared before loading each page
 * @param loopCount the number of times to loop through the list of pages
 * @throws IOException unable to read from input or write to writer.
 * @throws InterruptedException the thread was interrupted waiting for the page to load.
 */
void loopUrls(BufferedReader input,OutputStreamWriter writer,boolean clearCache,int loopCount) throws IOException, InterruptedException {
  Tab tab=mActivity.getTabControl().getCurrentTab();
  WebView webView=tab.getWebView();
  List<String> pages=new LinkedList<String>();
  String page;
  while (null != (page=input.readLine())) {
    pages.add(page);
  }
  Iterator<String> iterator=pages.iterator();
  for (int i=0; i < mStatus.getPage(); ++i) {
    iterator.next();
  }
  if (mStatus.getIsRecovery()) {
    Log.e(TAG,""String_Node_Str"" + iterator.next());
  }
  while (mStatus.getIteration() < loopCount) {
    if (clearCache) {
      webView.clearCache(true);
    }
    while (iterator.hasNext()) {
      page=iterator.next();
      mStatus.setUrl(page);
      mStatus.write();
      Log.i(TAG,""String_Node_Str"" + page);
      Uri uri=Uri.parse(page);
      final Intent intent=new Intent(Intent.ACTION_VIEW,uri);
      long startTime=System.currentTimeMillis();
      resetForNewPage();
      mInst.runOnMainSync(new Runnable(){
        public void run(){
          mActivity.onNewIntent(intent);
        }
      }
);
      waitForLoad();
      long stopTime=System.currentTimeMillis();
      String url=webView.getUrl();
      Log.i(TAG,""String_Node_Str"" + url);
      if (writer != null) {
        writer.write(page + ""String_Node_Str"" + (stopTime - startTime)+ newLine);
        writer.flush();
      }
      mStatus.incrementPage();
    }
    mStatus.incrementIteration();
    mStatus.resetPage();
    iterator=pages.iterator();
  }
}","/** 
 * Loops over a list of URLs, points the browser to each one, and records the time elapsed.
 * @param input the reader from which to get the URLs.
 * @param writer the writer to which to output the results.
 * @param clearCache determines whether the cache is cleared before loading each page
 * @param loopCount the number of times to loop through the list of pages
 * @throws IOException unable to read from input or write to writer.
 * @throws InterruptedException the thread was interrupted waiting for the page to load.
 */
void loopUrls(BufferedReader input,OutputStreamWriter writer,boolean clearCache,int loopCount) throws IOException, InterruptedException {
  Tab tab=mActivity.getTabControl().getCurrentTab();
  WebView webView=tab.getWebView();
  List<String> pages=new LinkedList<String>();
  String page;
  while (null != (page=input.readLine())) {
    pages.add(page);
  }
  Iterator<String> iterator=pages.iterator();
  for (int i=0; i < mStatus.getPage(); ++i) {
    iterator.next();
  }
  if (mStatus.getIsRecovery()) {
    Log.e(TAG,""String_Node_Str"" + iterator.next());
    mStatus.incrementPage();
  }
  while (mStatus.getIteration() < loopCount) {
    if (clearCache) {
      webView.clearCache(true);
    }
    while (iterator.hasNext()) {
      page=iterator.next();
      mStatus.setUrl(page);
      mStatus.write();
      Log.i(TAG,""String_Node_Str"" + page);
      Uri uri=Uri.parse(page);
      final Intent intent=new Intent(Intent.ACTION_VIEW,uri);
      long startTime=System.currentTimeMillis();
      resetForNewPage();
      mInst.runOnMainSync(new Runnable(){
        public void run(){
          mActivity.onNewIntent(intent);
        }
      }
);
      waitForLoad();
      long stopTime=System.currentTimeMillis();
      String url=webView.getUrl();
      Log.i(TAG,""String_Node_Str"" + url);
      if (writer != null) {
        writer.write(page + ""String_Node_Str"" + (stopTime - startTime)+ newLine);
        writer.flush();
      }
      mStatus.incrementPage();
    }
    mStatus.incrementIteration();
    mStatus.resetPage();
    iterator=pages.iterator();
  }
}",0.9930704898446834
184974,"private long copyBackupToFile(BackupDataInput data,File file,int toRead) throws IOException {
  final int CHUNK=8192;
  byte[] buf=new byte[CHUNK];
  CRC32 crc=new CRC32();
  FileOutputStream out=new FileOutputStream(file);
  while (toRead > 0) {
    int numRead=data.readEntityData(buf,0,CHUNK);
    crc.update(buf,0,numRead);
    out.write(buf,0,numRead);
    toRead-=numRead;
  }
  out.close();
  return crc.getValue();
}","private long copyBackupToFile(BackupDataInput data,File file,int toRead) throws IOException {
  final int CHUNK=8192;
  byte[] buf=new byte[CHUNK];
  CRC32 crc=new CRC32();
  FileOutputStream out=new FileOutputStream(file);
  try {
    while (toRead > 0) {
      int numRead=data.readEntityData(buf,0,CHUNK);
      crc.update(buf,0,numRead);
      out.write(buf,0,numRead);
      toRead-=numRead;
    }
  }
  finally {
    if (out != null) {
      out.close();
    }
  }
  return crc.getValue();
}",0.9207383279044516
184975,"/** 
 * In order to determine whether the bookmark set has changed since the last time we did a backup, we store the following bits of info in the state file after a backup: 1. the size of the flattened bookmark file 2. the CRC32 of that file 3. the agent version number [relevant following an OTA] After we flatten the bookmarks file here in onBackup, we compare its metrics with the values from the saved state.  If they match, it means the bookmarks didn't really change and we don't need to send the data. (If they don't match, of course, then they've changed and we do indeed send the new flattened file to be backed up.)
 */
@Override public void onBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState) throws IOException {
  long savedFileSize=-1;
  long savedCrc=-1;
  int savedVersion=-1;
  DataInputStream in=new DataInputStream(new FileInputStream(oldState.getFileDescriptor()));
  try {
    savedFileSize=in.readLong();
    savedCrc=in.readLong();
    savedVersion=in.readInt();
  }
 catch (  EOFException e) {
  }
  File tmpfile=File.createTempFile(""String_Node_Str"",null,getCacheDir());
  try {
    FileOutputStream outfstream=new FileOutputStream(tmpfile);
    long newCrc=buildBookmarkFile(outfstream);
    outfstream.close();
    if ((savedVersion != BACKUP_AGENT_VERSION) || (newCrc != savedCrc) || (tmpfile.length() != savedFileSize)) {
      copyFileToBackup(BOOKMARK_KEY,tmpfile,data);
    }
    writeBackupState(tmpfile.length(),newCrc,newState);
  }
  finally {
    tmpfile.delete();
  }
}","/** 
 * In order to determine whether the bookmark set has changed since the last time we did a backup, we store the following bits of info in the state file after a backup: 1. the size of the flattened bookmark file 2. the CRC32 of that file 3. the agent version number [relevant following an OTA] After we flatten the bookmarks file here in onBackup, we compare its metrics with the values from the saved state.  If they match, it means the bookmarks didn't really change and we don't need to send the data. (If they don't match, of course, then they've changed and we do indeed send the new flattened file to be backed up.)
 */
@Override public void onBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState) throws IOException {
  long savedFileSize=-1;
  long savedCrc=-1;
  int savedVersion=-1;
  DataInputStream in=new DataInputStream(new FileInputStream(oldState.getFileDescriptor()));
  try {
    savedFileSize=in.readLong();
    savedCrc=in.readLong();
    savedVersion=in.readInt();
  }
 catch (  EOFException e) {
  }
 finally {
    if (in != null) {
      in.close();
    }
  }
  File tmpfile=File.createTempFile(""String_Node_Str"",null,getCacheDir());
  try {
    FileOutputStream outfstream=new FileOutputStream(tmpfile);
    long newCrc=buildBookmarkFile(outfstream);
    outfstream.close();
    if ((savedVersion != BACKUP_AGENT_VERSION) || (newCrc != savedCrc) || (tmpfile.length() != savedFileSize)) {
      copyFileToBackup(BOOKMARK_KEY,tmpfile,data);
    }
    writeBackupState(tmpfile.length(),newCrc,newState);
  }
  finally {
    tmpfile.delete();
  }
}",0.9806778587266392
184976,"private void copyFileToBackup(String key,File file,BackupDataOutput data) throws IOException {
  final int CHUNK=8192;
  byte[] buf=new byte[CHUNK];
  int toCopy=(int)file.length();
  data.writeEntityHeader(key,toCopy);
  FileInputStream in=new FileInputStream(file);
  int nRead;
  while (toCopy > 0) {
    nRead=in.read(buf,0,CHUNK);
    data.writeEntityData(buf,nRead);
    toCopy-=nRead;
  }
  in.close();
}","private void copyFileToBackup(String key,File file,BackupDataOutput data) throws IOException {
  final int CHUNK=8192;
  byte[] buf=new byte[CHUNK];
  int toCopy=(int)file.length();
  data.writeEntityHeader(key,toCopy);
  FileInputStream in=new FileInputStream(file);
  try {
    int nRead;
    while (toCopy > 0) {
      nRead=in.read(buf,0,CHUNK);
      data.writeEntityData(buf,nRead);
      toCopy-=nRead;
    }
  }
  finally {
    if (in != null) {
      in.close();
    }
  }
}",0.9194630872483222
184977,"private void writeBackupState(long fileSize,long crc,ParcelFileDescriptor stateFile) throws IOException {
  DataOutputStream out=new DataOutputStream(new FileOutputStream(stateFile.getFileDescriptor()));
  out.writeLong(fileSize);
  out.writeLong(crc);
  out.writeInt(BACKUP_AGENT_VERSION);
}","private void writeBackupState(long fileSize,long crc,ParcelFileDescriptor stateFile) throws IOException {
  DataOutputStream out=new DataOutputStream(new FileOutputStream(stateFile.getFileDescriptor()));
  try {
    out.writeLong(fileSize);
    out.writeLong(crc);
    out.writeInt(BACKUP_AGENT_VERSION);
  }
  finally {
    if (out != null) {
      out.close();
    }
  }
}",0.8768768768768769
184978,"/** 
 * Restore from backup -- reads in the flattened bookmark file as supplied from the backup service, parses that out, and rebuilds the bookmarks table in the browser database from it.
 */
@Override public void onRestore(BackupDataInput data,int appVersionCode,ParcelFileDescriptor newState) throws IOException {
  long crc=-1;
  File tmpfile=File.createTempFile(""String_Node_Str"",null,getFilesDir());
  try {
    while (data.readNextHeader()) {
      if (BOOKMARK_KEY.equals(data.getKey())) {
        crc=copyBackupToFile(data,tmpfile,data.getDataSize());
        FileInputStream infstream=new FileInputStream(tmpfile);
        DataInputStream in=new DataInputStream(infstream);
        try {
          int count=in.readInt();
          ArrayList<Bookmark> bookmarks=new ArrayList<Bookmark>(count);
          for (int i=0; i < count; i++) {
            Bookmark mark=new Bookmark();
            mark.url=in.readUTF();
            mark.visits=in.readInt();
            mark.date=in.readLong();
            mark.created=in.readLong();
            mark.title=in.readUTF();
            bookmarks.add(mark);
          }
          int N=bookmarks.size();
          int nUnique=0;
          if (DEBUG)           Log.v(TAG,""String_Node_Str"" + N + ""String_Node_Str"");
          String[] urlCol=new String[]{BookmarkColumns.URL};
          for (int i=0; i < N; i++) {
            Bookmark mark=bookmarks.get(i);
            Cursor cursor=getContentResolver().query(Browser.BOOKMARKS_URI,urlCol,BookmarkColumns.URL + ""String_Node_Str"" + mark.url+ ""String_Node_Str""+ BookmarkColumns.BOOKMARK+ ""String_Node_Str"",null,null);
            if (cursor.getCount() <= 0) {
              if (DEBUG)               Log.v(TAG,""String_Node_Str"" + mark.url);
              Bookmarks.addBookmark(null,getContentResolver(),mark.url,mark.title,null,false);
              nUnique++;
            }
 else {
              if (DEBUG)               Log.v(TAG,""String_Node_Str"" + mark.url);
            }
            cursor.close();
          }
          Log.i(TAG,""String_Node_Str"" + nUnique + ""String_Node_Str""+ N+ ""String_Node_Str"");
        }
 catch (        IOException ioe) {
          Log.w(TAG,""String_Node_Str"");
          crc=-1;
        }
      }
      writeBackupState(tmpfile.length(),crc,newState);
    }
  }
  finally {
    tmpfile.delete();
  }
}","/** 
 * Restore from backup -- reads in the flattened bookmark file as supplied from the backup service, parses that out, and rebuilds the bookmarks table in the browser database from it.
 */
@Override public void onRestore(BackupDataInput data,int appVersionCode,ParcelFileDescriptor newState) throws IOException {
  long crc=-1;
  File tmpfile=File.createTempFile(""String_Node_Str"",null,getFilesDir());
  try {
    while (data.readNextHeader()) {
      if (BOOKMARK_KEY.equals(data.getKey())) {
        crc=copyBackupToFile(data,tmpfile,data.getDataSize());
        FileInputStream infstream=new FileInputStream(tmpfile);
        DataInputStream in=new DataInputStream(infstream);
        try {
          int count=in.readInt();
          ArrayList<Bookmark> bookmarks=new ArrayList<Bookmark>(count);
          for (int i=0; i < count; i++) {
            Bookmark mark=new Bookmark();
            mark.url=in.readUTF();
            mark.visits=in.readInt();
            mark.date=in.readLong();
            mark.created=in.readLong();
            mark.title=in.readUTF();
            bookmarks.add(mark);
          }
          int N=bookmarks.size();
          int nUnique=0;
          if (DEBUG)           Log.v(TAG,""String_Node_Str"" + N + ""String_Node_Str"");
          String[] urlCol=new String[]{BookmarkColumns.URL};
          for (int i=0; i < N; i++) {
            Bookmark mark=bookmarks.get(i);
            Cursor cursor=getContentResolver().query(Browser.BOOKMARKS_URI,urlCol,BookmarkColumns.URL + ""String_Node_Str"" + mark.url+ ""String_Node_Str""+ BookmarkColumns.BOOKMARK+ ""String_Node_Str"",null,null);
            if (cursor.getCount() <= 0) {
              if (DEBUG)               Log.v(TAG,""String_Node_Str"" + mark.url);
              Bookmarks.addBookmark(null,getContentResolver(),mark.url,mark.title,null,false);
              nUnique++;
            }
 else {
              if (DEBUG)               Log.v(TAG,""String_Node_Str"" + mark.url);
            }
            cursor.close();
          }
          Log.i(TAG,""String_Node_Str"" + nUnique + ""String_Node_Str""+ N+ ""String_Node_Str"");
        }
 catch (        IOException ioe) {
          Log.w(TAG,""String_Node_Str"");
          crc=-1;
        }
 finally {
          if (in != null) {
            in.close();
          }
        }
      }
      writeBackupState(tmpfile.length(),crc,newState);
    }
  }
  finally {
    tmpfile.delete();
  }
}",0.982086406743941
184979,"/** 
 * Notify the host application a download should be done, even if there is a streaming viewer available for thise type.
 * @param url The full url to the content that should be downloaded
 * @param contentDisposition Content-disposition http header, ifpresent.
 * @param mimetype The mimetype of the content reported by the server
 * @param contentLength The file size reported by the server
 */
void onDownloadStartNoStream(String url,String userAgent,String contentDisposition,String mimetype,long contentLength){
  String filename=URLUtil.guessFileName(url,contentDisposition,mimetype);
  String status=Environment.getExternalStorageState();
  if (!status.equals(Environment.MEDIA_MOUNTED)) {
    int title;
    String msg;
    if (status.equals(Environment.MEDIA_SHARED)) {
      msg=getString(R.string.download_sdcard_busy_dlg_msg);
      title=R.string.download_sdcard_busy_dlg_title;
    }
 else {
      msg=getString(R.string.download_no_sdcard_dlg_msg,filename);
      title=R.string.download_no_sdcard_dlg_title;
    }
    new AlertDialog.Builder(this).setTitle(title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(msg).setPositiveButton(R.string.ok,null).show();
    return;
  }
  URI uri=null;
  try {
    String newUrl=new String(URLUtil.decode(url.getBytes()));
    WebAddress w=new WebAddress(newUrl);
    String frag=null;
    String query=null;
    String path=w.mPath;
    if (path.length() > 0) {
      int idx=path.lastIndexOf('#');
      if (idx != -1) {
        frag=path.substring(idx + 1);
        path=path.substring(0,idx);
      }
      idx=path.lastIndexOf('?');
      if (idx != -1) {
        query=path.substring(idx + 1);
        path=path.substring(0,idx);
      }
    }
    uri=new URI(w.mScheme,w.mAuthInfo,w.mHost,w.mPort,path,query,frag);
  }
 catch (  Exception e) {
    Log.e(LOGTAG,""String_Node_Str"" + url,e);
    return;
  }
  String cookies=CookieManager.getInstance().getCookie(url);
  ContentValues values=new ContentValues();
  values.put(Downloads.Impl.COLUMN_URI,uri.toString());
  values.put(Downloads.Impl.COLUMN_COOKIE_DATA,cookies);
  values.put(Downloads.Impl.COLUMN_USER_AGENT,userAgent);
  values.put(Downloads.Impl.COLUMN_NOTIFICATION_PACKAGE,getPackageName());
  values.put(Downloads.Impl.COLUMN_NOTIFICATION_CLASS,BrowserDownloadPage.class.getCanonicalName());
  values.put(Downloads.Impl.COLUMN_VISIBILITY,Downloads.Impl.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
  values.put(Downloads.Impl.COLUMN_MIME_TYPE,mimetype);
  values.put(Downloads.Impl.COLUMN_FILE_NAME_HINT,filename);
  values.put(Downloads.Impl.COLUMN_DESCRIPTION,uri.getHost());
  if (contentLength > 0) {
    values.put(Downloads.Impl.COLUMN_TOTAL_BYTES,contentLength);
  }
  if (mimetype == null) {
    new FetchUrlMimeType(this).execute(values);
  }
 else {
    final Uri contentUri=getContentResolver().insert(Downloads.Impl.CONTENT_URI,values);
  }
  Toast.makeText(this,R.string.download_pending,Toast.LENGTH_SHORT).show();
}","/** 
 * Notify the host application a download should be done, even if there is a streaming viewer available for thise type.
 * @param url The full url to the content that should be downloaded
 * @param contentDisposition Content-disposition http header, ifpresent.
 * @param mimetype The mimetype of the content reported by the server
 * @param contentLength The file size reported by the server
 */
void onDownloadStartNoStream(String url,String userAgent,String contentDisposition,String mimetype,long contentLength){
  String filename=URLUtil.guessFileName(url,contentDisposition,mimetype);
  String status=Environment.getExternalStorageState();
  if (!status.equals(Environment.MEDIA_MOUNTED)) {
    int title;
    String msg;
    if (status.equals(Environment.MEDIA_SHARED)) {
      msg=getString(R.string.download_sdcard_busy_dlg_msg);
      title=R.string.download_sdcard_busy_dlg_title;
    }
 else {
      msg=getString(R.string.download_no_sdcard_dlg_msg,filename);
      title=R.string.download_no_sdcard_dlg_title;
    }
    new AlertDialog.Builder(this).setTitle(title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(msg).setPositiveButton(R.string.ok,null).show();
    return;
  }
  WebAddress webAddress;
  try {
    webAddress=new WebAddress(url);
    webAddress.mPath=encodePath(webAddress.mPath);
  }
 catch (  Exception e) {
    Log.e(LOGTAG,""String_Node_Str"" + url);
    return;
  }
  String cookies=CookieManager.getInstance().getCookie(url);
  ContentValues values=new ContentValues();
  values.put(Downloads.Impl.COLUMN_URI,webAddress.toString());
  values.put(Downloads.Impl.COLUMN_COOKIE_DATA,cookies);
  values.put(Downloads.Impl.COLUMN_USER_AGENT,userAgent);
  values.put(Downloads.Impl.COLUMN_NOTIFICATION_PACKAGE,getPackageName());
  values.put(Downloads.Impl.COLUMN_NOTIFICATION_CLASS,BrowserDownloadPage.class.getCanonicalName());
  values.put(Downloads.Impl.COLUMN_VISIBILITY,Downloads.Impl.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
  values.put(Downloads.Impl.COLUMN_MIME_TYPE,mimetype);
  values.put(Downloads.Impl.COLUMN_FILE_NAME_HINT,filename);
  values.put(Downloads.Impl.COLUMN_DESCRIPTION,webAddress.mHost);
  if (contentLength > 0) {
    values.put(Downloads.Impl.COLUMN_TOTAL_BYTES,contentLength);
  }
  if (mimetype == null) {
    new FetchUrlMimeType(this).execute(values);
  }
 else {
    final Uri contentUri=getContentResolver().insert(Downloads.Impl.CONTENT_URI,values);
  }
  Toast.makeText(this,R.string.download_pending,Toast.LENGTH_SHORT).show();
}",0.8783610755441741
184980,"@Override public void onProgressChanged(WebView view,int newProgress){
  mTitleBar.setProgress(newProgress);
  if (mFakeTitleBar != null) {
    mFakeTitleBar.setProgress(newProgress);
  }
  if (newProgress == 100) {
    CookieSyncManager.getInstance().sync();
    if (mInLoad) {
      mInLoad=false;
      updateInLoadMenuItems();
      if (!mOptionsMenuOpen || !mIconView) {
        hideFakeTitleBar();
      }
    }
    if (mNeedExtraScreenShot) {
      updateScreenshot(view);
      mNeedExtraScreenShot=false;
    }
  }
 else   if (!mInLoad) {
    mInLoad=true;
    updateInLoadMenuItems();
    if (!mOptionsMenuOpen || mIconView) {
      showFakeTitleBar();
    }
  }
}","@Override public void onProgressChanged(WebView view,int newProgress){
  mTitleBar.setProgress(newProgress);
  if (mFakeTitleBar != null) {
    mFakeTitleBar.setProgress(newProgress);
  }
  if (newProgress == 100) {
    CookieSyncManager.getInstance().sync();
    if (mInLoad) {
      mInLoad=false;
      updateInLoadMenuItems();
      if (!mOptionsMenuOpen || !mIconView) {
        hideFakeTitleBar();
      }
    }
  }
 else   if (!mInLoad) {
    mInLoad=true;
    updateInLoadMenuItems();
    if (!mOptionsMenuOpen || mIconView) {
      showFakeTitleBar();
    }
  }
}",0.9181380417335474
184981,"@Override public void onPageFinished(WebView view,String url){
  resetTitleAndIcon(view);
  if (!mDidStopLoad) {
    updateScreenshot(view);
  }
  updateLockIconToLatest();
  if (false) {
    long[] sysCpu=new long[7];
    if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
      String uiInfo=""String_Node_Str"" + (SystemClock.currentThreadTimeMillis() - mUiStart) + ""String_Node_Str"";
      if (LOGD_ENABLED) {
        Log.d(LOGTAG,uiInfo);
      }
      String performanceString=""String_Node_Str"" + (SystemClock.uptimeMillis() - mStart) + ""String_Node_Str""+ ""String_Node_Str""+ (Process.getElapsedCpuTime() - mProcessStart)+ ""String_Node_Str""+ (sysCpu[0] + sysCpu[1] - mUserStart) * 10 + ""String_Node_Str"" + (sysCpu[2] - mSystemStart) * 10 + ""String_Node_Str"" + (sysCpu[3] - mIdleStart) * 10 + ""String_Node_Str"" + (sysCpu[4] + sysCpu[5] + sysCpu[6] - mIrqStart) * 10 + ""String_Node_Str"" + uiInfo;
      if (LOGD_ENABLED) {
        Log.d(LOGTAG,performanceString + ""String_Node_Str"" + url);
      }
      if (url != null) {
        String newUrl=new String(url);
        if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(11);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(7);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(12);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(8);
        }
        if (LOGD_ENABLED) {
          Log.d(LOGTAG,newUrl + ""String_Node_Str"");
        }
      }
    }
  }
  if (mInTrace) {
    mInTrace=false;
    Debug.stopMethodTracing();
  }
  if (mPageStarted) {
    mPageStarted=false;
    if (pauseWebViewTimers()) {
      if (mWakeLock.isHeld()) {
        mHandler.removeMessages(RELEASE_WAKELOCK);
        mWakeLock.release();
      }
    }
  }
}","@Override public void onPageFinished(WebView view,String url){
  resetTitleAndIcon(view);
  if (!mDidStopLoad) {
    Message updateScreenshot=Message.obtain(mHandler,UPDATE_BOOKMARK_THUMBNAIL,view);
    mHandler.sendMessageDelayed(updateScreenshot,500);
  }
  updateLockIconToLatest();
  if (false) {
    long[] sysCpu=new long[7];
    if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
      String uiInfo=""String_Node_Str"" + (SystemClock.currentThreadTimeMillis() - mUiStart) + ""String_Node_Str"";
      if (LOGD_ENABLED) {
        Log.d(LOGTAG,uiInfo);
      }
      String performanceString=""String_Node_Str"" + (SystemClock.uptimeMillis() - mStart) + ""String_Node_Str""+ ""String_Node_Str""+ (Process.getElapsedCpuTime() - mProcessStart)+ ""String_Node_Str""+ (sysCpu[0] + sysCpu[1] - mUserStart) * 10 + ""String_Node_Str"" + (sysCpu[2] - mSystemStart) * 10 + ""String_Node_Str"" + (sysCpu[3] - mIdleStart) * 10 + ""String_Node_Str"" + (sysCpu[4] + sysCpu[5] + sysCpu[6] - mIrqStart) * 10 + ""String_Node_Str"" + uiInfo;
      if (LOGD_ENABLED) {
        Log.d(LOGTAG,performanceString + ""String_Node_Str"" + url);
      }
      if (url != null) {
        String newUrl=new String(url);
        if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(11);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(7);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(12);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(8);
        }
        if (LOGD_ENABLED) {
          Log.d(LOGTAG,newUrl + ""String_Node_Str"");
        }
      }
    }
  }
  if (mInTrace) {
    mInTrace=false;
    Debug.stopMethodTracing();
  }
  if (mPageStarted) {
    mPageStarted=false;
    if (pauseWebViewTimers()) {
      if (mWakeLock.isHeld()) {
        mHandler.removeMessages(RELEASE_WAKELOCK);
        mWakeLock.release();
      }
    }
  }
}",0.9706707472583525
184982,"/** 
 * Show a dialog informing the user of the network error reported by WebCore.
 */
@Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){
  if (errorCode != WebViewClient.ERROR_HOST_LOOKUP && errorCode != WebViewClient.ERROR_CONNECT && errorCode != WebViewClient.ERROR_BAD_URL && errorCode != WebViewClient.ERROR_UNSUPPORTED_SCHEME && errorCode != WebViewClient.ERROR_FILE) {
    queueError(errorCode,description);
  }
  Log.e(LOGTAG,""String_Node_Str"" + errorCode + ""String_Node_Str""+ failingUrl+ ""String_Node_Str""+ description);
  mNeedExtraScreenShot=true;
  resetTitleAndRevertLockIcon();
}","/** 
 * Show a dialog informing the user of the network error reported by WebCore.
 */
@Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){
  if (errorCode != WebViewClient.ERROR_HOST_LOOKUP && errorCode != WebViewClient.ERROR_CONNECT && errorCode != WebViewClient.ERROR_BAD_URL && errorCode != WebViewClient.ERROR_UNSUPPORTED_SCHEME && errorCode != WebViewClient.ERROR_FILE) {
    queueError(errorCode,description);
  }
  Log.e(LOGTAG,""String_Node_Str"" + errorCode + ""String_Node_Str""+ failingUrl+ ""String_Node_Str""+ description);
  resetTitleAndRevertLockIcon();
}",0.9770387965162312
184983,"@Override public void onPageStarted(WebView view,String url,Bitmap favicon){
  resetLockIcon(url);
  setUrlTitle(url,null);
  if (mTouchIconLoader != null) {
    mTouchIconLoader.mActivity=null;
    mTouchIconLoader=null;
  }
  ErrorConsoleView errorConsole=mTabControl.getCurrentErrorConsole(false);
  if (errorConsole != null) {
    errorConsole.clearErrorMessages();
    if (mShouldShowErrorConsole) {
      errorConsole.showConsole(ErrorConsoleView.SHOW_NONE);
    }
  }
  updateIcon(url,favicon);
  if (mSettings.isTracing()) {
    String host;
    try {
      WebAddress uri=new WebAddress(url);
      host=uri.mHost;
    }
 catch (    android.net.ParseException ex) {
      host=""String_Node_Str"";
    }
    host=host.replace('.','_');
    host+=""String_Node_Str"";
    mInTrace=true;
    Debug.startMethodTracing(host,20 * 1024 * 1024);
  }
  if (false) {
    mStart=SystemClock.uptimeMillis();
    mProcessStart=Process.getElapsedCpuTime();
    long[] sysCpu=new long[7];
    if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
      mUserStart=sysCpu[0] + sysCpu[1];
      mSystemStart=sysCpu[2];
      mIdleStart=sysCpu[3];
      mIrqStart=sysCpu[4] + sysCpu[5] + sysCpu[6];
    }
    mUiStart=SystemClock.currentThreadTimeMillis();
  }
  if (!mPageStarted) {
    mPageStarted=true;
    resumeWebViewTimers();
  }
  CookieSyncManager.getInstance().resetSync();
  mInLoad=true;
  mDidStopLoad=false;
  showFakeTitleBar();
  updateInLoadMenuItems();
  if (!mIsNetworkUp) {
    createAndShowNetworkDialog();
    if (view != null) {
      view.setNetworkAvailable(false);
    }
  }
}","@Override public void onPageStarted(WebView view,String url,Bitmap favicon){
  resetLockIcon(url);
  setUrlTitle(url,null);
  mHandler.removeMessages(UPDATE_BOOKMARK_THUMBNAIL);
  if (mTouchIconLoader != null) {
    mTouchIconLoader.mActivity=null;
    mTouchIconLoader=null;
  }
  ErrorConsoleView errorConsole=mTabControl.getCurrentErrorConsole(false);
  if (errorConsole != null) {
    errorConsole.clearErrorMessages();
    if (mShouldShowErrorConsole) {
      errorConsole.showConsole(ErrorConsoleView.SHOW_NONE);
    }
  }
  updateIcon(url,favicon);
  if (mSettings.isTracing()) {
    String host;
    try {
      WebAddress uri=new WebAddress(url);
      host=uri.mHost;
    }
 catch (    android.net.ParseException ex) {
      host=""String_Node_Str"";
    }
    host=host.replace('.','_');
    host+=""String_Node_Str"";
    mInTrace=true;
    Debug.startMethodTracing(host,20 * 1024 * 1024);
  }
  if (false) {
    mStart=SystemClock.uptimeMillis();
    mProcessStart=Process.getElapsedCpuTime();
    long[] sysCpu=new long[7];
    if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
      mUserStart=sysCpu[0] + sysCpu[1];
      mSystemStart=sysCpu[2];
      mIdleStart=sysCpu[3];
      mIrqStart=sysCpu[4] + sysCpu[5] + sysCpu[6];
    }
    mUiStart=SystemClock.currentThreadTimeMillis();
  }
  if (!mPageStarted) {
    mPageStarted=true;
    resumeWebViewTimers();
  }
  CookieSyncManager.getInstance().resetSync();
  mInLoad=true;
  mDidStopLoad=false;
  showFakeTitleBar();
  updateInLoadMenuItems();
  if (!mIsNetworkUp) {
    createAndShowNetworkDialog();
    if (view != null) {
      view.setNetworkAvailable(false);
    }
  }
}",0.9835965978128796
184984,"private Bitmap createScreenshot(WebView view){
  Picture thumbnail=view.capturePicture();
  Bitmap bm=Bitmap.createBitmap(getDesiredThumbnailWidth(this),getDesiredThumbnailHeight(this),Bitmap.Config.ARGB_4444);
  Canvas canvas=new Canvas(bm);
  int contentWidth=view.getContentWidth();
  if (contentWidth > 0) {
    float scaleFactor=(float)getDesiredThumbnailWidth(this) / (float)contentWidth;
    canvas.scale(scaleFactor,scaleFactor);
  }
  thumbnail.draw(canvas);
  return bm;
}","private Bitmap createScreenshot(WebView view){
  Picture thumbnail=view.capturePicture();
  Bitmap bm=Bitmap.createBitmap(getDesiredThumbnailWidth(this),getDesiredThumbnailHeight(this),Bitmap.Config.ARGB_4444);
  Canvas canvas=new Canvas(bm);
  int thumbnailWidth=thumbnail.getWidth();
  if (thumbnailWidth > 0) {
    float scaleFactor=(float)getDesiredThumbnailWidth(this) / (float)thumbnailWidth;
    canvas.scale(scaleFactor,scaleFactor);
  }
  thumbnail.draw(canvas);
  return bm;
}",0.53099173553719
184985,"public void handleMessage(Message msg){
switch (msg.what) {
case FOCUS_NODE_HREF:
    String url=(String)msg.getData().get(""String_Node_Str"");
  if (url == null || url.length() == 0) {
    break;
  }
HashMap focusNodeMap=(HashMap)msg.obj;
WebView view=(WebView)focusNodeMap.get(""String_Node_Str"");
if (getTopWindow() != view) {
break;
}
switch (msg.arg1) {
case R.id.open_context_menu_id:
case R.id.view_image_context_menu_id:
loadURL(getTopWindow(),url);
break;
case R.id.open_newtab_context_menu_id:
final TabControl.Tab parent=mTabControl.getCurrentTab();
final TabControl.Tab newTab=openTab(url);
if (newTab != parent) {
parent.addChildTab(newTab);
}
break;
case R.id.bookmark_context_menu_id:
Intent intent=new Intent(BrowserActivity.this,AddBookmarkPage.class);
intent.putExtra(""String_Node_Str"",url);
startActivity(intent);
break;
case R.id.share_link_context_menu_id:
Browser.sendString(BrowserActivity.this,url,getText(R.string.choosertitle_sharevia).toString());
break;
case R.id.copy_link_context_menu_id:
copy(url);
break;
case R.id.save_link_context_menu_id:
case R.id.download_context_menu_id:
onDownloadStartNoStream(url,null,null,null,-1);
break;
}
break;
case LOAD_URL:
loadURL(getTopWindow(),(String)msg.obj);
break;
case STOP_LOAD:
stopLoading();
break;
case CANCEL_CREDS_REQUEST:
resumeAfterCredentials();
break;
case RELEASE_WAKELOCK:
if (mWakeLock.isHeld()) {
mWakeLock.release();
}
break;
}
}","public void handleMessage(Message msg){
switch (msg.what) {
case FOCUS_NODE_HREF:
{
      String url=(String)msg.getData().get(""String_Node_Str"");
      if (url == null || url.length() == 0) {
        break;
      }
      HashMap focusNodeMap=(HashMap)msg.obj;
      WebView view=(WebView)focusNodeMap.get(""String_Node_Str"");
      if (getTopWindow() != view) {
        break;
      }
switch (msg.arg1) {
case R.id.open_context_menu_id:
case R.id.view_image_context_menu_id:
        loadURL(getTopWindow(),url);
      break;
case R.id.open_newtab_context_menu_id:
    final TabControl.Tab parent=mTabControl.getCurrentTab();
  final TabControl.Tab newTab=openTab(url);
if (newTab != parent) {
  parent.addChildTab(newTab);
}
break;
case R.id.bookmark_context_menu_id:
Intent intent=new Intent(BrowserActivity.this,AddBookmarkPage.class);
intent.putExtra(""String_Node_Str"",url);
startActivity(intent);
break;
case R.id.share_link_context_menu_id:
Browser.sendString(BrowserActivity.this,url,getText(R.string.choosertitle_sharevia).toString());
break;
case R.id.copy_link_context_menu_id:
copy(url);
break;
case R.id.save_link_context_menu_id:
case R.id.download_context_menu_id:
onDownloadStartNoStream(url,null,null,null,-1);
break;
}
break;
}
case LOAD_URL:
loadURL(getTopWindow(),(String)msg.obj);
break;
case STOP_LOAD:
stopLoading();
break;
case CANCEL_CREDS_REQUEST:
resumeAfterCredentials();
break;
case RELEASE_WAKELOCK:
if (mWakeLock.isHeld()) {
mWakeLock.release();
}
break;
case UPDATE_BOOKMARK_THUMBNAIL:
WebView view=(WebView)msg.obj;
if (view != null) {
updateScreenshot(view);
}
break;
}
}",0.9284294234592444
184986,"@Override public void onProgressChanged(WebView view,int newProgress){
  mTitleBar.setProgress(newProgress);
  if (mFakeTitleBar != null) {
    mFakeTitleBar.setProgress(newProgress);
  }
  if (newProgress == 100) {
    CookieSyncManager.getInstance().sync();
    if (mInLoad) {
      mInLoad=false;
      updateInLoadMenuItems();
      if (!mOptionsMenuOpen || !mIconView) {
        hideFakeTitleBar();
      }
    }
    if (mNeedExtraScreenShot) {
      updateScreenshot(view);
      mNeedExtraScreenShot=false;
    }
  }
 else   if (!mInLoad) {
    mInLoad=true;
    updateInLoadMenuItems();
    if (!mOptionsMenuOpen || mIconView) {
      showFakeTitleBar();
    }
  }
}","@Override public void onProgressChanged(WebView view,int newProgress){
  mTitleBar.setProgress(newProgress);
  if (mFakeTitleBar != null) {
    mFakeTitleBar.setProgress(newProgress);
  }
  if (newProgress == 100) {
    CookieSyncManager.getInstance().sync();
    if (mInLoad) {
      mInLoad=false;
      updateInLoadMenuItems();
      if (!mOptionsMenuOpen || !mIconView) {
        hideFakeTitleBar();
      }
    }
  }
 else   if (!mInLoad) {
    mInLoad=true;
    updateInLoadMenuItems();
    if (!mOptionsMenuOpen || mIconView) {
      showFakeTitleBar();
    }
  }
}",0.9181380417335474
184987,"@Override public void onPageFinished(WebView view,String url){
  resetTitleAndIcon(view);
  if (!mDidStopLoad) {
    updateScreenshot(view);
  }
  updateLockIconToLatest();
  if (false) {
    long[] sysCpu=new long[7];
    if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
      String uiInfo=""String_Node_Str"" + (SystemClock.currentThreadTimeMillis() - mUiStart) + ""String_Node_Str"";
      if (LOGD_ENABLED) {
        Log.d(LOGTAG,uiInfo);
      }
      String performanceString=""String_Node_Str"" + (SystemClock.uptimeMillis() - mStart) + ""String_Node_Str""+ ""String_Node_Str""+ (Process.getElapsedCpuTime() - mProcessStart)+ ""String_Node_Str""+ (sysCpu[0] + sysCpu[1] - mUserStart) * 10 + ""String_Node_Str"" + (sysCpu[2] - mSystemStart) * 10 + ""String_Node_Str"" + (sysCpu[3] - mIdleStart) * 10 + ""String_Node_Str"" + (sysCpu[4] + sysCpu[5] + sysCpu[6] - mIrqStart) * 10 + ""String_Node_Str"" + uiInfo;
      if (LOGD_ENABLED) {
        Log.d(LOGTAG,performanceString + ""String_Node_Str"" + url);
      }
      if (url != null) {
        String newUrl=new String(url);
        if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(11);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(7);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(12);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(8);
        }
        if (LOGD_ENABLED) {
          Log.d(LOGTAG,newUrl + ""String_Node_Str"");
        }
      }
    }
  }
  if (mInTrace) {
    mInTrace=false;
    Debug.stopMethodTracing();
  }
  if (mPageStarted) {
    mPageStarted=false;
    if (pauseWebViewTimers()) {
      if (mWakeLock.isHeld()) {
        mHandler.removeMessages(RELEASE_WAKELOCK);
        mWakeLock.release();
      }
    }
  }
}","@Override public void onPageFinished(WebView view,String url){
  resetTitleAndIcon(view);
  if (!mDidStopLoad) {
    Message updateScreenshot=Message.obtain(mHandler,UPDATE_BOOKMARK_THUMBNAIL,view);
    mHandler.sendMessageDelayed(updateScreenshot,500);
  }
  updateLockIconToLatest();
  if (false) {
    long[] sysCpu=new long[7];
    if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
      String uiInfo=""String_Node_Str"" + (SystemClock.currentThreadTimeMillis() - mUiStart) + ""String_Node_Str"";
      if (LOGD_ENABLED) {
        Log.d(LOGTAG,uiInfo);
      }
      String performanceString=""String_Node_Str"" + (SystemClock.uptimeMillis() - mStart) + ""String_Node_Str""+ ""String_Node_Str""+ (Process.getElapsedCpuTime() - mProcessStart)+ ""String_Node_Str""+ (sysCpu[0] + sysCpu[1] - mUserStart) * 10 + ""String_Node_Str"" + (sysCpu[2] - mSystemStart) * 10 + ""String_Node_Str"" + (sysCpu[3] - mIdleStart) * 10 + ""String_Node_Str"" + (sysCpu[4] + sysCpu[5] + sysCpu[6] - mIrqStart) * 10 + ""String_Node_Str"" + uiInfo;
      if (LOGD_ENABLED) {
        Log.d(LOGTAG,performanceString + ""String_Node_Str"" + url);
      }
      if (url != null) {
        String newUrl=new String(url);
        if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(11);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(7);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(12);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(8);
        }
        if (LOGD_ENABLED) {
          Log.d(LOGTAG,newUrl + ""String_Node_Str"");
        }
      }
    }
  }
  if (mInTrace) {
    mInTrace=false;
    Debug.stopMethodTracing();
  }
  if (mPageStarted) {
    mPageStarted=false;
    if (pauseWebViewTimers()) {
      if (mWakeLock.isHeld()) {
        mHandler.removeMessages(RELEASE_WAKELOCK);
        mWakeLock.release();
      }
    }
  }
}",0.9706707472583525
184988,"/** 
 * Show a dialog informing the user of the network error reported by WebCore.
 */
@Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){
  if (errorCode != WebViewClient.ERROR_HOST_LOOKUP && errorCode != WebViewClient.ERROR_CONNECT && errorCode != WebViewClient.ERROR_BAD_URL && errorCode != WebViewClient.ERROR_UNSUPPORTED_SCHEME && errorCode != WebViewClient.ERROR_FILE) {
    queueError(errorCode,description);
  }
  Log.e(LOGTAG,""String_Node_Str"" + errorCode + ""String_Node_Str""+ failingUrl+ ""String_Node_Str""+ description);
  mNeedExtraScreenShot=true;
  resetTitleAndRevertLockIcon();
}","/** 
 * Show a dialog informing the user of the network error reported by WebCore.
 */
@Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){
  if (errorCode != WebViewClient.ERROR_HOST_LOOKUP && errorCode != WebViewClient.ERROR_CONNECT && errorCode != WebViewClient.ERROR_BAD_URL && errorCode != WebViewClient.ERROR_UNSUPPORTED_SCHEME && errorCode != WebViewClient.ERROR_FILE) {
    queueError(errorCode,description);
  }
  Log.e(LOGTAG,""String_Node_Str"" + errorCode + ""String_Node_Str""+ failingUrl+ ""String_Node_Str""+ description);
  resetTitleAndRevertLockIcon();
}",0.9770387965162312
184989,"@Override public void onPageStarted(WebView view,String url,Bitmap favicon){
  resetLockIcon(url);
  setUrlTitle(url,null);
  if (mTouchIconLoader != null) {
    mTouchIconLoader.mActivity=null;
    mTouchIconLoader=null;
  }
  ErrorConsoleView errorConsole=mTabControl.getCurrentErrorConsole(false);
  if (errorConsole != null) {
    errorConsole.clearErrorMessages();
    if (mShouldShowErrorConsole) {
      errorConsole.showConsole(ErrorConsoleView.SHOW_NONE);
    }
  }
  updateIcon(url,favicon);
  if (mSettings.isTracing()) {
    String host;
    try {
      WebAddress uri=new WebAddress(url);
      host=uri.mHost;
    }
 catch (    android.net.ParseException ex) {
      host=""String_Node_Str"";
    }
    host=host.replace('.','_');
    host+=""String_Node_Str"";
    mInTrace=true;
    Debug.startMethodTracing(host,20 * 1024 * 1024);
  }
  if (false) {
    mStart=SystemClock.uptimeMillis();
    mProcessStart=Process.getElapsedCpuTime();
    long[] sysCpu=new long[7];
    if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
      mUserStart=sysCpu[0] + sysCpu[1];
      mSystemStart=sysCpu[2];
      mIdleStart=sysCpu[3];
      mIrqStart=sysCpu[4] + sysCpu[5] + sysCpu[6];
    }
    mUiStart=SystemClock.currentThreadTimeMillis();
  }
  if (!mPageStarted) {
    mPageStarted=true;
    resumeWebViewTimers();
  }
  CookieSyncManager.getInstance().resetSync();
  mInLoad=true;
  mDidStopLoad=false;
  showFakeTitleBar();
  updateInLoadMenuItems();
  if (!mIsNetworkUp) {
    createAndShowNetworkDialog();
    if (view != null) {
      view.setNetworkAvailable(false);
    }
  }
}","@Override public void onPageStarted(WebView view,String url,Bitmap favicon){
  resetLockIcon(url);
  setUrlTitle(url,null);
  mHandler.removeMessages(UPDATE_BOOKMARK_THUMBNAIL);
  if (mTouchIconLoader != null) {
    mTouchIconLoader.mActivity=null;
    mTouchIconLoader=null;
  }
  ErrorConsoleView errorConsole=mTabControl.getCurrentErrorConsole(false);
  if (errorConsole != null) {
    errorConsole.clearErrorMessages();
    if (mShouldShowErrorConsole) {
      errorConsole.showConsole(ErrorConsoleView.SHOW_NONE);
    }
  }
  updateIcon(url,favicon);
  if (mSettings.isTracing()) {
    String host;
    try {
      WebAddress uri=new WebAddress(url);
      host=uri.mHost;
    }
 catch (    android.net.ParseException ex) {
      host=""String_Node_Str"";
    }
    host=host.replace('.','_');
    host+=""String_Node_Str"";
    mInTrace=true;
    Debug.startMethodTracing(host,20 * 1024 * 1024);
  }
  if (false) {
    mStart=SystemClock.uptimeMillis();
    mProcessStart=Process.getElapsedCpuTime();
    long[] sysCpu=new long[7];
    if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
      mUserStart=sysCpu[0] + sysCpu[1];
      mSystemStart=sysCpu[2];
      mIdleStart=sysCpu[3];
      mIrqStart=sysCpu[4] + sysCpu[5] + sysCpu[6];
    }
    mUiStart=SystemClock.currentThreadTimeMillis();
  }
  if (!mPageStarted) {
    mPageStarted=true;
    resumeWebViewTimers();
  }
  CookieSyncManager.getInstance().resetSync();
  mInLoad=true;
  mDidStopLoad=false;
  showFakeTitleBar();
  updateInLoadMenuItems();
  if (!mIsNetworkUp) {
    createAndShowNetworkDialog();
    if (view != null) {
      view.setNetworkAvailable(false);
    }
  }
}",0.9835965978128796
184990,"private Bitmap createScreenshot(WebView view){
  Picture thumbnail=view.capturePicture();
  Bitmap bm=Bitmap.createBitmap(getDesiredThumbnailWidth(this),getDesiredThumbnailHeight(this),Bitmap.Config.ARGB_4444);
  Canvas canvas=new Canvas(bm);
  int contentWidth=view.getContentWidth();
  if (contentWidth > 0) {
    float scaleFactor=(float)getDesiredThumbnailWidth(this) / (float)contentWidth;
    canvas.scale(scaleFactor,scaleFactor);
  }
  thumbnail.draw(canvas);
  return bm;
}","private Bitmap createScreenshot(WebView view){
  Picture thumbnail=view.capturePicture();
  Bitmap bm=Bitmap.createBitmap(getDesiredThumbnailWidth(this),getDesiredThumbnailHeight(this),Bitmap.Config.ARGB_4444);
  Canvas canvas=new Canvas(bm);
  int thumbnailWidth=thumbnail.getWidth();
  if (thumbnailWidth > 0) {
    float scaleFactor=(float)getDesiredThumbnailWidth(this) / (float)thumbnailWidth;
    canvas.scale(scaleFactor,scaleFactor);
  }
  thumbnail.draw(canvas);
  return bm;
}",0.53099173553719
184991,"public void handleMessage(Message msg){
switch (msg.what) {
case FOCUS_NODE_HREF:
    String url=(String)msg.getData().get(""String_Node_Str"");
  if (url == null || url.length() == 0) {
    break;
  }
HashMap focusNodeMap=(HashMap)msg.obj;
WebView view=(WebView)focusNodeMap.get(""String_Node_Str"");
if (getTopWindow() != view) {
break;
}
switch (msg.arg1) {
case R.id.open_context_menu_id:
case R.id.view_image_context_menu_id:
loadURL(getTopWindow(),url);
break;
case R.id.open_newtab_context_menu_id:
final TabControl.Tab parent=mTabControl.getCurrentTab();
final TabControl.Tab newTab=openTab(url);
if (newTab != parent) {
parent.addChildTab(newTab);
}
break;
case R.id.bookmark_context_menu_id:
Intent intent=new Intent(BrowserActivity.this,AddBookmarkPage.class);
intent.putExtra(""String_Node_Str"",url);
startActivity(intent);
break;
case R.id.share_link_context_menu_id:
Browser.sendString(BrowserActivity.this,url,getText(R.string.choosertitle_sharevia).toString());
break;
case R.id.copy_link_context_menu_id:
copy(url);
break;
case R.id.save_link_context_menu_id:
case R.id.download_context_menu_id:
onDownloadStartNoStream(url,null,null,null,-1);
break;
}
break;
case LOAD_URL:
loadURL(getTopWindow(),(String)msg.obj);
break;
case STOP_LOAD:
stopLoading();
break;
case CANCEL_CREDS_REQUEST:
resumeAfterCredentials();
break;
case RELEASE_WAKELOCK:
if (mWakeLock.isHeld()) {
mWakeLock.release();
}
break;
}
}","public void handleMessage(Message msg){
switch (msg.what) {
case FOCUS_NODE_HREF:
{
      String url=(String)msg.getData().get(""String_Node_Str"");
      if (url == null || url.length() == 0) {
        break;
      }
      HashMap focusNodeMap=(HashMap)msg.obj;
      WebView view=(WebView)focusNodeMap.get(""String_Node_Str"");
      if (getTopWindow() != view) {
        break;
      }
switch (msg.arg1) {
case R.id.open_context_menu_id:
case R.id.view_image_context_menu_id:
        loadURL(getTopWindow(),url);
      break;
case R.id.open_newtab_context_menu_id:
    final TabControl.Tab parent=mTabControl.getCurrentTab();
  final TabControl.Tab newTab=openTab(url);
if (newTab != parent) {
  parent.addChildTab(newTab);
}
break;
case R.id.bookmark_context_menu_id:
Intent intent=new Intent(BrowserActivity.this,AddBookmarkPage.class);
intent.putExtra(""String_Node_Str"",url);
startActivity(intent);
break;
case R.id.share_link_context_menu_id:
Browser.sendString(BrowserActivity.this,url,getText(R.string.choosertitle_sharevia).toString());
break;
case R.id.copy_link_context_menu_id:
copy(url);
break;
case R.id.save_link_context_menu_id:
case R.id.download_context_menu_id:
onDownloadStartNoStream(url,null,null,null,-1);
break;
}
break;
}
case LOAD_URL:
loadURL(getTopWindow(),(String)msg.obj);
break;
case STOP_LOAD:
stopLoading();
break;
case CANCEL_CREDS_REQUEST:
resumeAfterCredentials();
break;
case RELEASE_WAKELOCK:
if (mWakeLock.isHeld()) {
mWakeLock.release();
}
break;
case UPDATE_BOOKMARK_THUMBNAIL:
WebView view=(WebView)msg.obj;
if (view != null) {
updateScreenshot(view);
}
break;
}
}",0.9284294234592444
184992,"@Override public void onProgressChanged(WebView view,int newProgress){
  mTitleBar.setProgress(newProgress);
  if (mFakeTitleBar != null) {
    mFakeTitleBar.setProgress(newProgress);
  }
  if (newProgress == 100) {
    CookieSyncManager.getInstance().sync();
    if (mInLoad) {
      mInLoad=false;
      updateInLoadMenuItems();
      if (!mOptionsMenuOpen || !mIconView) {
        hideFakeTitleBar();
      }
    }
    if (mNeedExtraScreenShot) {
      updateScreenshot(view);
      mNeedExtraScreenShot=false;
    }
  }
 else   if (!mInLoad) {
    mInLoad=true;
    updateInLoadMenuItems();
    if (!mOptionsMenuOpen || mIconView) {
      showFakeTitleBar();
    }
  }
}","@Override public void onProgressChanged(WebView view,int newProgress){
  mTitleBar.setProgress(newProgress);
  if (mFakeTitleBar != null) {
    mFakeTitleBar.setProgress(newProgress);
  }
  if (newProgress == 100) {
    CookieSyncManager.getInstance().sync();
    if (mInLoad) {
      mInLoad=false;
      updateInLoadMenuItems();
      if (!mOptionsMenuOpen || !mIconView) {
        hideFakeTitleBar();
      }
    }
  }
 else   if (!mInLoad) {
    mInLoad=true;
    updateInLoadMenuItems();
    if (!mOptionsMenuOpen || mIconView) {
      showFakeTitleBar();
    }
  }
}",0.9181380417335474
184993,"@Override public void onPageFinished(WebView view,String url){
  resetTitleAndIcon(view);
  if (!mDidStopLoad) {
    updateScreenshot(view);
  }
  updateLockIconToLatest();
  if (false) {
    long[] sysCpu=new long[7];
    if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
      String uiInfo=""String_Node_Str"" + (SystemClock.currentThreadTimeMillis() - mUiStart) + ""String_Node_Str"";
      if (LOGD_ENABLED) {
        Log.d(LOGTAG,uiInfo);
      }
      String performanceString=""String_Node_Str"" + (SystemClock.uptimeMillis() - mStart) + ""String_Node_Str""+ ""String_Node_Str""+ (Process.getElapsedCpuTime() - mProcessStart)+ ""String_Node_Str""+ (sysCpu[0] + sysCpu[1] - mUserStart) * 10 + ""String_Node_Str"" + (sysCpu[2] - mSystemStart) * 10 + ""String_Node_Str"" + (sysCpu[3] - mIdleStart) * 10 + ""String_Node_Str"" + (sysCpu[4] + sysCpu[5] + sysCpu[6] - mIrqStart) * 10 + ""String_Node_Str"" + uiInfo;
      if (LOGD_ENABLED) {
        Log.d(LOGTAG,performanceString + ""String_Node_Str"" + url);
      }
      if (url != null) {
        String newUrl=new String(url);
        if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(11);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(7);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(12);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(8);
        }
        if (LOGD_ENABLED) {
          Log.d(LOGTAG,newUrl + ""String_Node_Str"");
        }
      }
    }
  }
  if (mInTrace) {
    mInTrace=false;
    Debug.stopMethodTracing();
  }
  if (mPageStarted) {
    mPageStarted=false;
    if (pauseWebViewTimers()) {
      if (mWakeLock.isHeld()) {
        mHandler.removeMessages(RELEASE_WAKELOCK);
        mWakeLock.release();
      }
    }
  }
}","@Override public void onPageFinished(WebView view,String url){
  resetTitleAndIcon(view);
  if (!mDidStopLoad) {
    Message updateScreenshot=Message.obtain(mHandler,UPDATE_BOOKMARK_THUMBNAIL,view);
    mHandler.sendMessageDelayed(updateScreenshot,500);
  }
  updateLockIconToLatest();
  if (false) {
    long[] sysCpu=new long[7];
    if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
      String uiInfo=""String_Node_Str"" + (SystemClock.currentThreadTimeMillis() - mUiStart) + ""String_Node_Str"";
      if (LOGD_ENABLED) {
        Log.d(LOGTAG,uiInfo);
      }
      String performanceString=""String_Node_Str"" + (SystemClock.uptimeMillis() - mStart) + ""String_Node_Str""+ ""String_Node_Str""+ (Process.getElapsedCpuTime() - mProcessStart)+ ""String_Node_Str""+ (sysCpu[0] + sysCpu[1] - mUserStart) * 10 + ""String_Node_Str"" + (sysCpu[2] - mSystemStart) * 10 + ""String_Node_Str"" + (sysCpu[3] - mIdleStart) * 10 + ""String_Node_Str"" + (sysCpu[4] + sysCpu[5] + sysCpu[6] - mIrqStart) * 10 + ""String_Node_Str"" + uiInfo;
      if (LOGD_ENABLED) {
        Log.d(LOGTAG,performanceString + ""String_Node_Str"" + url);
      }
      if (url != null) {
        String newUrl=new String(url);
        if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(11);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(7);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(12);
        }
 else         if (newUrl.startsWith(""String_Node_Str"")) {
          newUrl=newUrl.substring(8);
        }
        if (LOGD_ENABLED) {
          Log.d(LOGTAG,newUrl + ""String_Node_Str"");
        }
      }
    }
  }
  if (mInTrace) {
    mInTrace=false;
    Debug.stopMethodTracing();
  }
  if (mPageStarted) {
    mPageStarted=false;
    if (pauseWebViewTimers()) {
      if (mWakeLock.isHeld()) {
        mHandler.removeMessages(RELEASE_WAKELOCK);
        mWakeLock.release();
      }
    }
  }
}",0.9706707472583525
184994,"/** 
 * Show a dialog informing the user of the network error reported by WebCore.
 */
@Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){
  if (errorCode != WebViewClient.ERROR_HOST_LOOKUP && errorCode != WebViewClient.ERROR_CONNECT && errorCode != WebViewClient.ERROR_BAD_URL && errorCode != WebViewClient.ERROR_UNSUPPORTED_SCHEME && errorCode != WebViewClient.ERROR_FILE) {
    queueError(errorCode,description);
  }
  Log.e(LOGTAG,""String_Node_Str"" + errorCode + ""String_Node_Str""+ failingUrl+ ""String_Node_Str""+ description);
  mNeedExtraScreenShot=true;
  resetTitleAndRevertLockIcon();
}","/** 
 * Show a dialog informing the user of the network error reported by WebCore.
 */
@Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){
  if (errorCode != WebViewClient.ERROR_HOST_LOOKUP && errorCode != WebViewClient.ERROR_CONNECT && errorCode != WebViewClient.ERROR_BAD_URL && errorCode != WebViewClient.ERROR_UNSUPPORTED_SCHEME && errorCode != WebViewClient.ERROR_FILE) {
    queueError(errorCode,description);
  }
  Log.e(LOGTAG,""String_Node_Str"" + errorCode + ""String_Node_Str""+ failingUrl+ ""String_Node_Str""+ description);
  resetTitleAndRevertLockIcon();
}",0.9770387965162312
184995,"@Override public void onPageStarted(WebView view,String url,Bitmap favicon){
  resetLockIcon(url);
  setUrlTitle(url,null);
  if (mTouchIconLoader != null) {
    mTouchIconLoader.mActivity=null;
    mTouchIconLoader=null;
  }
  ErrorConsoleView errorConsole=mTabControl.getCurrentErrorConsole(false);
  if (errorConsole != null) {
    errorConsole.clearErrorMessages();
    if (mShouldShowErrorConsole) {
      errorConsole.showConsole(ErrorConsoleView.SHOW_NONE);
    }
  }
  updateIcon(url,favicon);
  if (mSettings.isTracing()) {
    String host;
    try {
      WebAddress uri=new WebAddress(url);
      host=uri.mHost;
    }
 catch (    android.net.ParseException ex) {
      host=""String_Node_Str"";
    }
    host=host.replace('.','_');
    host+=""String_Node_Str"";
    mInTrace=true;
    Debug.startMethodTracing(host,20 * 1024 * 1024);
  }
  if (false) {
    mStart=SystemClock.uptimeMillis();
    mProcessStart=Process.getElapsedCpuTime();
    long[] sysCpu=new long[7];
    if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
      mUserStart=sysCpu[0] + sysCpu[1];
      mSystemStart=sysCpu[2];
      mIdleStart=sysCpu[3];
      mIrqStart=sysCpu[4] + sysCpu[5] + sysCpu[6];
    }
    mUiStart=SystemClock.currentThreadTimeMillis();
  }
  if (!mPageStarted) {
    mPageStarted=true;
    resumeWebViewTimers();
  }
  CookieSyncManager.getInstance().resetSync();
  mInLoad=true;
  mDidStopLoad=false;
  showFakeTitleBar();
  updateInLoadMenuItems();
  if (!mIsNetworkUp) {
    createAndShowNetworkDialog();
    if (view != null) {
      view.setNetworkAvailable(false);
    }
  }
}","@Override public void onPageStarted(WebView view,String url,Bitmap favicon){
  resetLockIcon(url);
  setUrlTitle(url,null);
  mHandler.removeMessages(UPDATE_BOOKMARK_THUMBNAIL);
  if (mTouchIconLoader != null) {
    mTouchIconLoader.mActivity=null;
    mTouchIconLoader=null;
  }
  ErrorConsoleView errorConsole=mTabControl.getCurrentErrorConsole(false);
  if (errorConsole != null) {
    errorConsole.clearErrorMessages();
    if (mShouldShowErrorConsole) {
      errorConsole.showConsole(ErrorConsoleView.SHOW_NONE);
    }
  }
  updateIcon(url,favicon);
  if (mSettings.isTracing()) {
    String host;
    try {
      WebAddress uri=new WebAddress(url);
      host=uri.mHost;
    }
 catch (    android.net.ParseException ex) {
      host=""String_Node_Str"";
    }
    host=host.replace('.','_');
    host+=""String_Node_Str"";
    mInTrace=true;
    Debug.startMethodTracing(host,20 * 1024 * 1024);
  }
  if (false) {
    mStart=SystemClock.uptimeMillis();
    mProcessStart=Process.getElapsedCpuTime();
    long[] sysCpu=new long[7];
    if (Process.readProcFile(""String_Node_Str"",SYSTEM_CPU_FORMAT,null,sysCpu,null)) {
      mUserStart=sysCpu[0] + sysCpu[1];
      mSystemStart=sysCpu[2];
      mIdleStart=sysCpu[3];
      mIrqStart=sysCpu[4] + sysCpu[5] + sysCpu[6];
    }
    mUiStart=SystemClock.currentThreadTimeMillis();
  }
  if (!mPageStarted) {
    mPageStarted=true;
    resumeWebViewTimers();
  }
  CookieSyncManager.getInstance().resetSync();
  mInLoad=true;
  mDidStopLoad=false;
  showFakeTitleBar();
  updateInLoadMenuItems();
  if (!mIsNetworkUp) {
    createAndShowNetworkDialog();
    if (view != null) {
      view.setNetworkAvailable(false);
    }
  }
}",0.9835965978128796
184996,"private Bitmap createScreenshot(WebView view){
  Picture thumbnail=view.capturePicture();
  Bitmap bm=Bitmap.createBitmap(getDesiredThumbnailWidth(this),getDesiredThumbnailHeight(this),Bitmap.Config.ARGB_4444);
  Canvas canvas=new Canvas(bm);
  int contentWidth=view.getContentWidth();
  if (contentWidth > 0) {
    float scaleFactor=(float)getDesiredThumbnailWidth(this) / (float)contentWidth;
    canvas.scale(scaleFactor,scaleFactor);
  }
  thumbnail.draw(canvas);
  return bm;
}","private Bitmap createScreenshot(WebView view){
  Picture thumbnail=view.capturePicture();
  Bitmap bm=Bitmap.createBitmap(getDesiredThumbnailWidth(this),getDesiredThumbnailHeight(this),Bitmap.Config.ARGB_4444);
  Canvas canvas=new Canvas(bm);
  int thumbnailWidth=thumbnail.getWidth();
  if (thumbnailWidth > 0) {
    float scaleFactor=(float)getDesiredThumbnailWidth(this) / (float)thumbnailWidth;
    canvas.scale(scaleFactor,scaleFactor);
  }
  thumbnail.draw(canvas);
  return bm;
}",0.53099173553719
184997,"public void handleMessage(Message msg){
switch (msg.what) {
case FOCUS_NODE_HREF:
    String url=(String)msg.getData().get(""String_Node_Str"");
  if (url == null || url.length() == 0) {
    break;
  }
HashMap focusNodeMap=(HashMap)msg.obj;
WebView view=(WebView)focusNodeMap.get(""String_Node_Str"");
if (getTopWindow() != view) {
break;
}
switch (msg.arg1) {
case R.id.open_context_menu_id:
case R.id.view_image_context_menu_id:
loadURL(getTopWindow(),url);
break;
case R.id.open_newtab_context_menu_id:
final TabControl.Tab parent=mTabControl.getCurrentTab();
final TabControl.Tab newTab=openTab(url);
if (newTab != parent) {
parent.addChildTab(newTab);
}
break;
case R.id.bookmark_context_menu_id:
Intent intent=new Intent(BrowserActivity.this,AddBookmarkPage.class);
intent.putExtra(""String_Node_Str"",url);
startActivity(intent);
break;
case R.id.share_link_context_menu_id:
Browser.sendString(BrowserActivity.this,url,getText(R.string.choosertitle_sharevia).toString());
break;
case R.id.copy_link_context_menu_id:
copy(url);
break;
case R.id.save_link_context_menu_id:
case R.id.download_context_menu_id:
onDownloadStartNoStream(url,null,null,null,-1);
break;
}
break;
case LOAD_URL:
loadURL(getTopWindow(),(String)msg.obj);
break;
case STOP_LOAD:
stopLoading();
break;
case CANCEL_CREDS_REQUEST:
resumeAfterCredentials();
break;
case RELEASE_WAKELOCK:
if (mWakeLock.isHeld()) {
mWakeLock.release();
}
break;
}
}","public void handleMessage(Message msg){
switch (msg.what) {
case FOCUS_NODE_HREF:
{
      String url=(String)msg.getData().get(""String_Node_Str"");
      if (url == null || url.length() == 0) {
        break;
      }
      HashMap focusNodeMap=(HashMap)msg.obj;
      WebView view=(WebView)focusNodeMap.get(""String_Node_Str"");
      if (getTopWindow() != view) {
        break;
      }
switch (msg.arg1) {
case R.id.open_context_menu_id:
case R.id.view_image_context_menu_id:
        loadURL(getTopWindow(),url);
      break;
case R.id.open_newtab_context_menu_id:
    final TabControl.Tab parent=mTabControl.getCurrentTab();
  final TabControl.Tab newTab=openTab(url);
if (newTab != parent) {
  parent.addChildTab(newTab);
}
break;
case R.id.bookmark_context_menu_id:
Intent intent=new Intent(BrowserActivity.this,AddBookmarkPage.class);
intent.putExtra(""String_Node_Str"",url);
startActivity(intent);
break;
case R.id.share_link_context_menu_id:
Browser.sendString(BrowserActivity.this,url,getText(R.string.choosertitle_sharevia).toString());
break;
case R.id.copy_link_context_menu_id:
copy(url);
break;
case R.id.save_link_context_menu_id:
case R.id.download_context_menu_id:
onDownloadStartNoStream(url,null,null,null,-1);
break;
}
break;
}
case LOAD_URL:
loadURL(getTopWindow(),(String)msg.obj);
break;
case STOP_LOAD:
stopLoading();
break;
case CANCEL_CREDS_REQUEST:
resumeAfterCredentials();
break;
case RELEASE_WAKELOCK:
if (mWakeLock.isHeld()) {
mWakeLock.release();
}
break;
case UPDATE_BOOKMARK_THUMBNAIL:
WebView view=(WebView)msg.obj;
if (view != null) {
updateScreenshot(view);
}
break;
}
}",0.9284294234592444
184998,"private void scheduleOutOfSpaceNotification(){
  if (LOGV_ENABLED) {
    Log.v(LOGTAG,""String_Node_Str"");
  }
  if (mContext == null) {
    return;
  }
  int icon=android.R.drawable.stat_sys_warning;
  CharSequence title=mContext.getString(R.string.webstorage_outofspace_notification_title);
  CharSequence text=mContext.getString(R.string.webstorage_outofspace_notification_text);
  long when=System.currentTimeMillis();
  Intent intent=new Intent(mContext,WebsiteSettingsActivity.class);
  PendingIntent contentIntent=PendingIntent.getActivity(mContext,0,intent,0);
  Notification notification=new Notification(icon,title,when);
  notification.setLatestEventInfo(mContext,title,text,contentIntent);
  notification.flags|=Notification.FLAG_AUTO_CANCEL;
  String ns=Context.NOTIFICATION_SERVICE;
  NotificationManager mgr=(NotificationManager)mContext.getSystemService(ns);
  if (mgr != null) {
    mgr.notify(OUT_OF_SPACE_ID,notification);
  }
}","private void scheduleOutOfSpaceNotification(){
  if (LOGV_ENABLED) {
    Log.v(LOGTAG,""String_Node_Str"");
  }
  if (mContext == null) {
    return;
  }
  if ((mLastOutOfSpaceNotificationTime == -1) || (System.currentTimeMillis() - mLastOutOfSpaceNotificationTime > NOTIFICATION_INTERVAL)) {
    int icon=android.R.drawable.stat_sys_warning;
    CharSequence title=mContext.getString(R.string.webstorage_outofspace_notification_title);
    CharSequence text=mContext.getString(R.string.webstorage_outofspace_notification_text);
    long when=System.currentTimeMillis();
    Intent intent=new Intent(mContext,WebsiteSettingsActivity.class);
    PendingIntent contentIntent=PendingIntent.getActivity(mContext,0,intent,0);
    Notification notification=new Notification(icon,title,when);
    notification.setLatestEventInfo(mContext,title,text,contentIntent);
    notification.flags|=Notification.FLAG_AUTO_CANCEL;
    String ns=Context.NOTIFICATION_SERVICE;
    NotificationManager mgr=(NotificationManager)mContext.getSystemService(ns);
    if (mgr != null) {
      mLastOutOfSpaceNotificationTime=System.currentTimeMillis();
      mgr.notify(OUT_OF_SPACE_ID,notification);
    }
  }
}",0.8886801315171442
184999,"public void onClick(DialogInterface dlg,int which){
  WebStorage.getInstance().deleteAllData();
  GeolocationPermissions.getInstance().clearAll();
  mAdapter.askForOrigins();
  finish();
}","public void onClick(DialogInterface dlg,int which){
  WebStorage.getInstance().deleteAllData();
  GeolocationPermissions.getInstance().clearAll();
  WebStorageSizeManager.resetLastOutOfSpaceNotificationTime();
  mAdapter.askForOrigins();
  finish();
}",0.856492027334852
185000,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.website_settings_menu_clear_all:
    new AlertDialog.Builder(this).setTitle(R.string.website_settings_clear_all_dialog_title).setMessage(R.string.website_settings_clear_all_dialog_message).setPositiveButton(R.string.website_settings_clear_all_dialog_ok_button,new AlertDialog.OnClickListener(){
      public void onClick(      DialogInterface dlg,      int which){
        WebStorage.getInstance().deleteAllData();
        GeolocationPermissions.getInstance().clearAll();
        mAdapter.askForOrigins();
        finish();
      }
    }
).setNegativeButton(R.string.website_settings_clear_all_dialog_cancel_button,null).setIcon(android.R.drawable.ic_dialog_alert).show();
  return true;
}
return false;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.website_settings_menu_clear_all:
    new AlertDialog.Builder(this).setTitle(R.string.website_settings_clear_all_dialog_title).setMessage(R.string.website_settings_clear_all_dialog_message).setPositiveButton(R.string.website_settings_clear_all_dialog_ok_button,new AlertDialog.OnClickListener(){
      public void onClick(      DialogInterface dlg,      int which){
        WebStorage.getInstance().deleteAllData();
        GeolocationPermissions.getInstance().clearAll();
        WebStorageSizeManager.resetLastOutOfSpaceNotificationTime();
        mAdapter.askForOrigins();
        finish();
      }
    }
).setNegativeButton(R.string.website_settings_clear_all_dialog_cancel_button,null).setIcon(android.R.drawable.ic_dialog_alert).show();
  return true;
}
return false;
}",0.958953004164188
